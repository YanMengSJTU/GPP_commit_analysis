diff --git a/static-webp/src/main/jni/static-webp/webp.cpp b/static-webp/src/main/jni/static-webp/webp.cpp
index 29987b6f8..728162f50 100644
--- a/static-webp/src/main/jni/static-webp/webp.cpp
+++ b/static-webp/src/main/jni/static-webp/webp.cpp
@@ -438,37 +438,36 @@ jobject WebPImage_nativeGetFrame(JNIEnv* pEnv, jobject thiz, jint index) {
     return nullptr;
   }
 
-
-  auto spIter = std::unique_ptr<WebPIterator, decltype(&WebPDemuxReleaseIterator)> {
-    new WebPIterator(),
-    WebPDemuxReleaseIterator
-  };
+  WebPIterator iter= {0};
 
   // Note, in WebP, frame numbers are one-based.
-  if (!WebPDemuxGetFrame(spNativeContext->spDemuxer->get(), index + 1, spIter.get())) {
+  if (!WebPDemuxGetFrame(spNativeContext->spDemuxer->get(), index + 1, &iter)) {
     throwIllegalStateException(pEnv, "unable to get frame");
+    WebPDemuxReleaseIterator(&iter);
     return nullptr;
   }
 
   std::unique_ptr<WebPFrameNativeContext> spFrameNativeContext(new WebPFrameNativeContext());
   if (!spFrameNativeContext) {
     throwOutOfMemoryError(pEnv, "Unable to allocate WebPFrameNativeContext");
+    WebPDemuxReleaseIterator(&iter);
     return nullptr;
   }
 
   spFrameNativeContext->spDemuxer = spNativeContext->spDemuxer;
-  spFrameNativeContext->frameNum = spIter->frame_num;
-  spFrameNativeContext->xOffset = spIter->x_offset;
-  spFrameNativeContext->yOffset = spIter->y_offset;
-  spFrameNativeContext->durationMs = spIter->duration;
-  spFrameNativeContext->width = spIter->width;
-  spFrameNativeContext->height = spIter->height;
+  spFrameNativeContext->frameNum = iter.frame_num;
+  spFrameNativeContext->xOffset = iter.x_offset;
+  spFrameNativeContext->yOffset = iter.y_offset;
+  spFrameNativeContext->durationMs = iter.duration;
+  spFrameNativeContext->width = iter.width;
+  spFrameNativeContext->height = iter.height;
   spFrameNativeContext->disposeToBackgroundColor =
-      spIter->dispose_method == WEBP_MUX_DISPOSE_BACKGROUND;
-  spFrameNativeContext->blendWithPreviousFrame = spIter->blend_method == WEBP_MUX_BLEND;
-  spFrameNativeContext->pPayload = spIter->fragment.bytes;
-  spFrameNativeContext->payloadSize = spIter->fragment.size;
+      iter.dispose_method == WEBP_MUX_DISPOSE_BACKGROUND;
+  spFrameNativeContext->blendWithPreviousFrame = iter.blend_method == WEBP_MUX_BLEND;
+  spFrameNativeContext->pPayload = iter.fragment.bytes;
+  spFrameNativeContext->payloadSize = iter.fragment.size;
 
+  WebPDemuxReleaseIterator(&iter);
   jobject ret = pEnv->NewObject(
       sClazzWebPFrame,
       sWebPFrameConstructor,
