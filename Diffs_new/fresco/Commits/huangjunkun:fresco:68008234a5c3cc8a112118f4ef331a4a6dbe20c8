diff --git a/animated-base/build.gradle b/animated-base/build.gradle
index dae5d76af..6ad669a0a 100644
--- a/animated-base/build.gradle
+++ b/animated-base/build.gradle
@@ -10,7 +10,6 @@ dependencies {
     provided "com.google.code.findbugs:jsr305:${JSR_305_VERSION}"
     compile "com.parse.bolts:bolts-tasks:${BOLTS_ANDROID_VERSION}"
     compile "com.android.support:support-v4:${SUPPORT_LIB_VERSION}"
-    compile "com.nineoldandroids:library:${NINEOLDANDROID_VERSION}"
     compile project(':fbcore')
     compile project(':imagepipeline-base')
     compile project(':imagepipeline')
diff --git a/animated-gif/build.gradle b/animated-gif/build.gradle
index 21f099c7d..306db00d6 100644
--- a/animated-gif/build.gradle
+++ b/animated-gif/build.gradle
@@ -12,7 +12,6 @@ import org.apache.tools.ant.taskdefs.condition.Os
 dependencies {
     provided "com.google.code.findbugs:jsr305:${JSR_305_VERSION}"
     compile "com.parse.bolts:bolts-tasks:${BOLTS_ANDROID_VERSION}"
-    compile "com.nineoldandroids:library:${NINEOLDANDROID_VERSION}"
     compile "com.android.support:support-v4:${SUPPORT_LIB_VERSION}"
     provided "javax.annotation:javax.annotation-api:${ANNOTATION_API_VERSION}"
     compile project(':fbcore')
diff --git a/animated-webp/build.gradle b/animated-webp/build.gradle
index 5bf730dcf..b201d06fe 100644
--- a/animated-webp/build.gradle
+++ b/animated-webp/build.gradle
@@ -12,7 +12,6 @@ import org.apache.tools.ant.taskdefs.condition.Os
 dependencies {
     provided "com.google.code.findbugs:jsr305:${JSR_305_VERSION}"
     compile "com.parse.bolts:bolts-tasks:${BOLTS_ANDROID_VERSION}"
-    compile "com.nineoldandroids:library:${NINEOLDANDROID_VERSION}"
     compile "com.android.support:support-v4:${SUPPORT_LIB_VERSION}"
     provided "javax.annotation:javax.annotation-api:${ANNOTATION_API_VERSION}"
     compile project(':fbcore')
diff --git a/circle.yml b/circle.yml
index 24af51164..911eb3087 100644
--- a/circle.yml
+++ b/circle.yml
@@ -5,6 +5,7 @@ general:
 machine:
   environment:
     PATH: $ANDROID_NDK:$PATH
+    GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m -XX:+HeapDumpOnOutOfMemoryError"'
 test:
   override:
     - ./gradlew assembleDebug -PdisablePreDex
diff --git a/drawee/src/main/java/com/facebook/drawee/components/DraweeEventTracker.java b/drawee/src/main/java/com/facebook/drawee/components/DraweeEventTracker.java
index b615360bd..50a8ac0ba 100644
--- a/drawee/src/main/java/com/facebook/drawee/components/DraweeEventTracker.java
+++ b/drawee/src/main/java/com/facebook/drawee/components/DraweeEventTracker.java
@@ -37,6 +37,8 @@
     ON_DATASOURCE_FAILURE_INT,
     ON_HOLDER_ATTACH,
     ON_HOLDER_DETACH,
+    ON_HOLDER_TRIM,
+    ON_HOLDER_UNTRIM,
     ON_DRAWABLE_SHOW,
     ON_DRAWABLE_HIDE,
     ON_ACTIVITY_START,
diff --git a/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java b/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java
index e466f0ffa..bcb7d9cae 100644
--- a/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java
+++ b/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java
@@ -89,6 +89,7 @@
   private boolean mIsRequestSubmitted;
   private boolean mHasFetchFailed;
   private boolean mRetainImageOnFailure;
+  private @Nullable String mContentDescription;
   private @Nullable DataSource<T> mDataSource;
   private @Nullable T mFetchedImage;
   private @Nullable Drawable mDrawable;
@@ -178,6 +179,9 @@ private void releaseFetch() {
     if (mDrawable != null) {
       releaseDrawable(mDrawable);
     }
+    if (mContentDescription != null) {
+      mContentDescription = null;
+    }
     mDrawable = null;
     if (mFetchedImage != null) {
       logMessageAndImage("release", mFetchedImage);
@@ -227,6 +231,18 @@ protected void setRetainImageOnFailure(boolean enabled) {
     mRetainImageOnFailure = enabled;
   }
 
+  /** Gets accessibility content description. */
+  @Override
+  public @Nullable String getContentDescription() {
+    return mContentDescription;
+  }
+
+  /** Sets accessibility content description. */
+  @Override
+  public void setContentDescription(@Nullable String contentDescription) {
+    mContentDescription = contentDescription;
+  }
+
   /** Adds controller listener. */
   public void addControllerListener(ControllerListener<? super INFO> controllerListener) {
     Preconditions.checkNotNull(controllerListener);
diff --git a/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeControllerBuilder.java b/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeControllerBuilder.java
index 9a7198f27..8eeb38963 100644
--- a/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeControllerBuilder.java
+++ b/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeControllerBuilder.java
@@ -69,6 +69,7 @@ public void onFinalImageSet(String id, @Nullable Object info, @Nullable Animatab
   private boolean mTapToRetryEnabled;
   private boolean mAutoPlayAnimations;
   private boolean mRetainImageOnFailure;
+  private String mContentDescription;
   // old controller to reuse
   private @Nullable DraweeController mOldController;
 
@@ -93,6 +94,7 @@ private void init() {
     mTapToRetryEnabled = false;
     mAutoPlayAnimations = false;
     mOldController = null;
+    mContentDescription = null;
   }
 
   /** Resets this builder to its initial values making it reusable. */
@@ -238,6 +240,18 @@ public BUILDER setControllerListener(ControllerListener<? super INFO> controller
     return mControllerListener;
   }
 
+  /** Sets the accessibility content description. */
+  public BUILDER setContentDescription(String contentDescription) {
+    mContentDescription = contentDescription;
+    return getThis();
+  }
+
+  /** Gets the accessibility content description. */
+  @Nullable
+  public String getContentDescription() {
+    return mContentDescription;
+  }
+
   /** Sets the old controller to be reused if possible. */
   @Override
   public BUILDER setOldController(@Nullable DraweeController oldController) {
@@ -280,6 +294,7 @@ protected void validate() {
   protected AbstractDraweeController buildController() {
     AbstractDraweeController controller = obtainController();
     controller.setRetainImageOnFailure(getRetainImageOnFailure());
+    controller.setContentDescription(getContentDescription());
     maybeBuildAndSetRetryManager(controller);
     maybeAttachListeners(controller);
     return controller;
diff --git a/drawee/src/main/java/com/facebook/drawee/interfaces/DraweeController.java b/drawee/src/main/java/com/facebook/drawee/interfaces/DraweeController.java
index 394bcdbe9..f6b7d5593 100644
--- a/drawee/src/main/java/com/facebook/drawee/interfaces/DraweeController.java
+++ b/drawee/src/main/java/com/facebook/drawee/interfaces/DraweeController.java
@@ -52,4 +52,12 @@
    */
   Animatable getAnimatable();
 
+  /** Sets the accessibility content description. */
+  void setContentDescription(String contentDescription);
+
+  /**
+   * Gets the accessibility content description.
+   * @return content description, or null if the image has no content description
+   */
+  String getContentDescription();
 }
diff --git a/drawee/src/main/java/com/facebook/drawee/view/DraweeHolder.java b/drawee/src/main/java/com/facebook/drawee/view/DraweeHolder.java
index 151bbac44..f350acf5c 100644
--- a/drawee/src/main/java/com/facebook/drawee/view/DraweeHolder.java
+++ b/drawee/src/main/java/com/facebook/drawee/view/DraweeHolder.java
@@ -6,7 +6,6 @@
  * LICENSE file in the root directory of this source tree. An additional grant
  * of patent rights can be found in the PATENTS file in the same directory.
  */
-
 package com.facebook.drawee.view;
 
 import android.content.Context;
@@ -14,10 +13,11 @@
 import android.view.MotionEvent;
 import android.view.View;
 
-import com.facebook.common.activitylistener.ListenableActivity;
 import com.facebook.common.internal.Objects;
 import com.facebook.common.internal.Preconditions;
 import com.facebook.common.logging.FLog;
+import com.facebook.common.memory.MemoryUiTrimmable;
+import com.facebook.common.memory.MemoryUiTrimmableRegistry;
 import com.facebook.drawee.components.DraweeEventTracker;
 import com.facebook.drawee.drawable.VisibilityAwareDrawable;
 import com.facebook.drawee.drawable.VisibilityCallback;
@@ -45,15 +45,14 @@
  * call {@link #onAttach} from its {@link View#onFinishTemporaryDetach()} and
  * {@link View#onAttachedToWindow()} methods.
  */
-public class DraweeHolder<DH extends DraweeHierarchy> implements VisibilityCallback {
+public class DraweeHolder<DH extends DraweeHierarchy>
+    implements VisibilityCallback, MemoryUiTrimmable {
 
   private boolean mIsControllerAttached = false;
   private boolean mIsHolderAttached = false;
   private boolean mIsVisible = true;
-  private boolean mIsActivityStarted = true;
+  private boolean mTrimmed = false;
   private DH mHierarchy;
-  // TODO(T6181423): this is not working reliably and we cannot afford photos-not-loading issues.
-  //private final ActivityListener mActivityListener;
 
   private DraweeController mController = null;
 
@@ -63,25 +62,19 @@
    * Creates a new instance of DraweeHolder that detaches / attaches controller whenever context
    * notifies it about activity's onStop and onStart callbacks.
    *
-   * <p>It is strongly recommended to pass a {@link ListenableActivity} as context. The holder will
-   * then also be able to respond to onStop and onStart events from that activity, making sure the
-   * image does not waste memory when the activity is stopped.
+   * <p>It is recommended to pass a {@link ListenableActivity} as context. This will help in a future release.
    */
   public static <DH extends DraweeHierarchy> DraweeHolder<DH> create(
       @Nullable DH hierarchy,
       Context context) {
     DraweeHolder<DH> holder = new DraweeHolder<DH>(hierarchy);
     holder.registerWithContext(context);
+    MemoryUiTrimmableRegistry.registerUiTrimmable(holder);
     return holder;
   }
 
-  /**
-   * If the given context is an instance of FbListenableActivity, then listener for its onStop and
-   * onStart methods is registered that changes visibility of the holder.
-   */
+  /** For future use. */
   public void registerWithContext(Context context) {
-    // TODO(T6181423): this is not working reliably and we cannot afford photos-not-loading issues.
-    //ActivityListenerManager.register(mActivityListener, context);
   }
 
   /**
@@ -92,20 +85,6 @@ public DraweeHolder(@Nullable DH hierarchy) {
     if (hierarchy != null) {
       setHierarchy(hierarchy);
     }
-    /*
-    // TODO(T6181423): this is not working reliably and we cannot afford photos-not-loading issues.
-    mActivityListener = new BaseActivityListener() {
-      @Override
-      public void onStart(Activity activity) {
-        setActivityStarted(true);
-      }
-
-      @Override
-      public void onStop(Activity activity) {
-        setActivityStarted(false);
-      }
-    };
-    */
   }
 
   /**
@@ -144,6 +123,20 @@ public void onDetach() {
     attachOrDetachController();
   }
 
+  @Override
+  public void trim() {
+    mEventTracker.recordEvent(Event.ON_HOLDER_TRIM);
+    mTrimmed = true;
+    attachOrDetachController();
+  }
+
+  @Override
+  public void untrim() {
+    mEventTracker.recordEvent(Event.ON_HOLDER_UNTRIM);
+    mTrimmed = false;
+    attachOrDetachController();
+  }
+
   /**
    * Forwards the touch event to the controller.
    * @param event touch event to handle
@@ -178,17 +171,20 @@ public void onDraw() {
     if (mIsControllerAttached) {
       return;
     }
-    // something went wrong here; controller is not attached, yet the hierarchy has to be drawn
-    // log error and attach the controller
-    FLog.wtf(
-        DraweeEventTracker.class,
-        "%x: Draw requested for a non-attached controller %x. %s",
-        System.identityHashCode(this),
-        System.identityHashCode(mController),
-        toString());
+    // trimming events are not guaranteed to arrive before the draw
+    if (!mTrimmed) {
+      // something went wrong here; controller is not attached, yet the hierarchy has to be drawn
+      // log error and attach the controller
+      FLog.wtf(
+          DraweeEventTracker.class,
+          "%x: Draw requested for a non-attached controller %x. %s",
+          System.identityHashCode(this),
+          System.identityHashCode(mController),
+          toString());
+    }
+    mTrimmed = false;
     mIsHolderAttached = true;
     mIsVisible = true;
-    mIsActivityStarted = true;
     attachOrDetachController();
   }
 
@@ -202,15 +198,6 @@ private void setVisibilityCallback(@Nullable VisibilityCallback visibilityCallba
     }
   }
 
-  /**
-   * Notifies the holder of activity's visibility change
-   */
-  private void setActivityStarted(boolean isStarted) {
-    mEventTracker.recordEvent(isStarted ? Event.ON_ACTIVITY_START : Event.ON_ACTIVITY_STOP);
-    mIsActivityStarted = isStarted;
-    attachOrDetachController();
-  }
-
   /**
    * Sets a new controller.
    */
@@ -309,7 +296,7 @@ private void detachController() {
   }
 
   private void attachOrDetachController() {
-    if (mIsHolderAttached && mIsVisible && mIsActivityStarted) {
+    if (mIsHolderAttached && mIsVisible && !mTrimmed) {
       attachController();
     } else {
       detachController();
@@ -322,7 +309,7 @@ public String toString() {
         .add("controllerAttached", mIsControllerAttached)
         .add("holderAttached", mIsHolderAttached)
         .add("drawableVisible", mIsVisible)
-        .add("activityStarted", mIsActivityStarted)
+        .add("trimmed", mTrimmed)
         .add("events", mEventTracker.toString())
         .toString();
   }
diff --git a/drawee/src/test/java/com/facebook/drawee/testing/DraweeMocks.java b/drawee/src/test/java/com/facebook/drawee/testing/DraweeMocks.java
index 296232347..906fe4045 100644
--- a/drawee/src/test/java/com/facebook/drawee/testing/DraweeMocks.java
+++ b/drawee/src/test/java/com/facebook/drawee/testing/DraweeMocks.java
@@ -40,6 +40,7 @@
   public static DraweeController mockController() {
     DraweeController controller = mock(AbstractDraweeController.class);
     stubGetAndSetHierarchy(controller);
+    stubGetAndSetContentDescription(controller);
     return controller;
   }
 
@@ -65,6 +66,28 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
         }).when(controller).setHierarchy(any(DraweeHierarchy.class));
   }
 
+  /**
+   * Stubs setContentDescription and getContentDescription methods.
+   * @param controller controller to stub methods of
+   */
+  public static void stubGetAndSetContentDescription(DraweeController controller) {
+    final String[] contentDescriptionHolder = new String[1];
+    doAnswer(
+        new Answer<Object>() {
+          @Override
+          public Object answer(InvocationOnMock invocation) throws Throwable {
+            return contentDescriptionHolder[0];
+          }
+        }).when(controller).getContentDescription();
+    doAnswer(
+        new Answer() {
+          @Override
+          public Object answer(InvocationOnMock invocation) throws Throwable {
+            return contentDescriptionHolder[0] = (String) invocation.getArguments()[0];
+          }
+        }).when(controller).setContentDescription(any(String.class));
+  }
+
   /**
    * Stubs addControllerListener
    * @param controller
diff --git a/drawee/src/test/java/com/facebook/drawee/view/DraweeHolderTest.java b/drawee/src/test/java/com/facebook/drawee/view/DraweeHolderTest.java
index da4b60b70..70ea6a06c 100644
--- a/drawee/src/test/java/com/facebook/drawee/view/DraweeHolderTest.java
+++ b/drawee/src/test/java/com/facebook/drawee/view/DraweeHolderTest.java
@@ -121,6 +121,78 @@ public void testSetNullController() {
     mDraweeHolder.onAttach();
   }
 
+  @Test
+  public void testAttachAndTrim() {
+    mDraweeHolder.setController(mController);
+    mDraweeHolder.onAttach();
+    mDraweeHolder.trim();
+    mInOrderVerifier.verify(mController).onAttach();
+    mInOrderVerifier.verify(mController).onDetach();
+    assertTrue(mDraweeHolder.isAttached());
+  }
+
+  @Test
+  public void testAttachTrimUntrim() {
+    mDraweeHolder.setController(mController);
+    mDraweeHolder.onAttach();
+    mDraweeHolder.trim();
+    mDraweeHolder.untrim();
+    mInOrderVerifier.verify(mController).onAttach();
+    mInOrderVerifier.verify(mController).onDetach();
+    mInOrderVerifier.verify(mController).onAttach();
+    assertTrue(mDraweeHolder.isAttached());
+  }
+
+  @Test
+  public void testAttachTrimDetachUntrim() {
+    mDraweeHolder.setController(mController);
+    mDraweeHolder.onAttach();
+    mDraweeHolder.trim();
+    mDraweeHolder.onDetach();
+    mDraweeHolder.untrim();
+    mInOrderVerifier.verify(mController).onAttach();
+    mInOrderVerifier.verify(mController).onDetach();
+    assertFalse(mDraweeHolder.isAttached());
+  }
+
+  @Test
+  public void testAttachTrimUntrimDetach() {
+    mDraweeHolder.setController(mController);
+    mDraweeHolder.onAttach();
+    mDraweeHolder.trim();
+    mDraweeHolder.untrim();
+    mDraweeHolder.onDetach();
+    mInOrderVerifier.verify(mController).onAttach();
+    mInOrderVerifier.verify(mController).onDetach();
+    mInOrderVerifier.verify(mController).onAttach();
+    mInOrderVerifier.verify(mController).onDetach();
+    assertFalse(mDraweeHolder.isAttached());
+  }
+
+  @Test
+  public void testDetachPreventsUntrim() {
+    mDraweeHolder.setController(mController);
+    mDraweeHolder.onAttach();
+    mDraweeHolder.onDetach();
+    mDraweeHolder.trim();
+    mDraweeHolder.untrim();
+    assertFalse(mDraweeHolder.isAttached());
+  }
+
+  @Test
+  public void testReattachAfterTrim() {
+    mDraweeHolder.setController(mController);
+    mDraweeHolder.onAttach();
+    mDraweeHolder.trim();
+    mDraweeHolder.onDetach();
+    mDraweeHolder.untrim();
+    mDraweeHolder.onAttach();
+    mInOrderVerifier.verify(mController).onAttach();
+    mInOrderVerifier.verify(mController).onDetach();
+    mInOrderVerifier.verify(mController).onAttach();
+    assertTrue(mDraweeHolder.isAttached());
+  }
+
   /** There are 8 possible state transitions with two variables
    * 1. (visible, unattached)   -> (visible, attached)
    * 2. (visible, attached)     -> (invisible, attached)
diff --git a/drawee/src/test/java/com/facebook/drawee/view/DraweeViewTest.java b/drawee/src/test/java/com/facebook/drawee/view/DraweeViewTest.java
index d2403151c..c12597018 100644
--- a/drawee/src/test/java/com/facebook/drawee/view/DraweeViewTest.java
+++ b/drawee/src/test/java/com/facebook/drawee/view/DraweeViewTest.java
@@ -48,6 +48,15 @@ public void setUp() {
     mDraweeView = new DraweeView<DraweeHierarchy>(activity);
   }
 
+  @Test
+  public void testSetContentDescription() {
+    String CONTENT_DESCRIPTION = "Test Photo";
+    mController.setContentDescription(CONTENT_DESCRIPTION);
+    mDraweeView.setController(mController);
+    mDraweeView.setContentDescription(mController.getContentDescription());
+    assertSame(mDraweeView.getContentDescription(), CONTENT_DESCRIPTION);
+  }
+
   @Test
   public void testSetHierarchy() {
     mDraweeView.setHierarchy(mDraweeHierarchy);
diff --git a/fbcore/src/main/java/com/facebook/common/memory/MemoryUiTrimmable.java b/fbcore/src/main/java/com/facebook/common/memory/MemoryUiTrimmable.java
new file mode 100644
index 000000000..a2e115695
--- /dev/null
+++ b/fbcore/src/main/java/com/facebook/common/memory/MemoryUiTrimmable.java
@@ -0,0 +1,22 @@
+/*
+ * Copyright (c) 2015-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ */
+
+package com.facebook.common.memory;
+
+/**
+ * Intended for UI elements to backup and restore elements from memory on the UI thread
+ */
+public interface MemoryUiTrimmable  {
+
+  /** Trim memory that isn't needed */
+  void trim();
+
+  /** Restore memory that was trimmed. */
+  void untrim();
+}
diff --git a/fbcore/src/main/java/com/facebook/common/memory/MemoryUiTrimmableRegistry.java b/fbcore/src/main/java/com/facebook/common/memory/MemoryUiTrimmableRegistry.java
new file mode 100644
index 000000000..d2d830629
--- /dev/null
+++ b/fbcore/src/main/java/com/facebook/common/memory/MemoryUiTrimmableRegistry.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (c) 2015-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ */
+
+package com.facebook.common.memory;
+
+import java.util.Collections;
+import java.util.Set;
+import java.util.WeakHashMap;
+
+/**
+ * Used to make available a list of all UI objects in the system that can
+ * be trimmed on background. Currently stores DraweeHolder objects, both
+ * inside and outside views.
+ */
+public class MemoryUiTrimmableRegistry {
+
+  private static final Set<MemoryUiTrimmable> sUiTrimmables =
+      Collections.newSetFromMap(new WeakHashMap<MemoryUiTrimmable, Boolean>());
+
+  public static void registerUiTrimmable(MemoryUiTrimmable uiTrimmable) {
+    sUiTrimmables.add(uiTrimmable);
+  }
+
+  public static Iterable<MemoryUiTrimmable> iterable() {
+    return sUiTrimmables;
+  }
+
+  // There is no unregister! The trimmables are stored in a weak-hash set,
+  // so the GC will take care of that.
+
+}
diff --git a/fbcore/src/main/java/com/facebook/common/util/UriUtil.java b/fbcore/src/main/java/com/facebook/common/util/UriUtil.java
index 4401b836b..dd571bee1 100644
--- a/fbcore/src/main/java/com/facebook/common/util/UriUtil.java
+++ b/fbcore/src/main/java/com/facebook/common/util/UriUtil.java
@@ -169,10 +169,11 @@ public static String getRealPathFromUri(ContentResolver contentResolver, final U
       Cursor cursor = null;
       try {
         cursor = contentResolver.query(srcUri, null, null, null, null);
-        if (cursor != null) {
-          cursor.moveToFirst();
+        if (cursor != null && cursor.moveToFirst()) {
           int idx = cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA);
-          result = cursor.getString(idx);
+          if (idx != -1) {
+            result = cursor.getString(idx);
+          }
         }
       } finally {
         if (cursor != null) {
diff --git a/fbcore/src/main/java/com/facebook/datasource/AbstractDataSource.java b/fbcore/src/main/java/com/facebook/datasource/AbstractDataSource.java
index ba938d407..4c1d065d0 100644
--- a/fbcore/src/main/java/com/facebook/datasource/AbstractDataSource.java
+++ b/fbcore/src/main/java/com/facebook/datasource/AbstractDataSource.java
@@ -41,7 +41,7 @@
     SUCCESS,
 
     // data source has finished with failure
-    FAILURE, StoredProcedureResult,
+    FAILURE,
   }
 
   @GuardedBy("this")
diff --git a/gradle.properties b/gradle.properties
index 0ef842714..8d776c6b4 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -22,7 +22,7 @@ VERSION_NAME=0.11.0
 GROUP=com.facebook.fresco
 
 # Deps for gradle
-BUILD_TOOLS_VERSION=23.0.3
+BUILD_TOOLS_VERSION=23.0.2
 COMPILE_SDK_VERSION=23
 ANDROID_GRADLE_PLUGIN_VERSION=2.1.2
 GRADLE_DOWNLOAD_TASK_VERSION=2.1.0
@@ -40,7 +40,6 @@ NINEOLDANDROID_VERSION=2.4.0
 POWERMOCK_VERSION=1.6.4
 ROBOLECTRIC_VERSION=3.0
 SUPPORT_LIB_VERSION=23.2.1
-LIBJPEG_TURBO_VERSION=1.5.0
 VOLLEY_VERSION=1.0.0
 
 # SDK versions for the samples
diff --git a/imagepipeline/build.gradle b/imagepipeline/build.gradle
index 0bf2824be..752277a55 100644
--- a/imagepipeline/build.gradle
+++ b/imagepipeline/build.gradle
@@ -49,19 +49,19 @@ task createNativeDepsDirectories {
 }
 
 task downloadLibjpeg(dependsOn: createNativeDepsDirectories, type: Download) {
-    src "http://downloads.sourceforge.net/project/libjpeg-turbo/${LIBJPEG_TURBO_VERSION}/libjpeg-turbo-${LIBJPEG_TURBO_VERSION}.tar.gz"
+    src 'http://downloads.sourceforge.net/project/libjpeg-turbo/1.3.1/libjpeg-turbo-1.3.1.tar.gz'
     onlyIfNewer true
     overwrite false
     dest downloadsDir
 }
 
 task unpackLibjpeg(dependsOn: downloadLibjpeg, type: Copy) {
-    from tarTree(resources.gzip("${downloadLibjpeg.dest}/libjpeg-turbo-${LIBJPEG_TURBO_VERSION}.tar.gz"))
+    from tarTree(resources.gzip("${downloadLibjpeg.dest}/libjpeg-turbo-1.3.1.tar.gz"))
     into "${downloadsDir}/libjpeg"
 }
 
 task copyLibjpeg(dependsOn: unpackLibjpeg, type: Copy) {
-    from "${unpackLibjpeg.destinationDir}/libjpeg-turbo-${LIBJPEG_TURBO_VERSION}"
+    from "${unpackLibjpeg.destinationDir}/libjpeg-turbo-1.3.1"
     from 'src/main/jni/third-party/libjpeg-turbo-1.3.x'
     include('**/*.c', '**/*.h','**/*.S', '**/*.asm', '**/*.inc', '*.mk')
     into "${mergeDir}/libjpeg-turbo-1.3.x"
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DecodeProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DecodeProducer.java
index 447d2bcff..d7d9e3b01 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DecodeProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DecodeProducer.java
@@ -219,7 +219,7 @@ private void doDecode(EncodedImage encodedImage, boolean isLast) {
       String queueStr = String.valueOf(queueTime);
       String qualityStr = String.valueOf(quality.isOfGoodEnoughQuality());
       String finalStr = String.valueOf(isFinal);
-      String imageTypeStr = String.valueOf(mProducerContext.getImageRequest().getImageType());
+      String cacheChoiceStr = String.valueOf(mProducerContext.getImageRequest().getCacheChoice());
       if (image instanceof CloseableStaticBitmap) {
         Bitmap bitmap = ((CloseableStaticBitmap) image).getUnderlyingBitmap();
         String sizeStr = bitmap.getWidth() + "x" + bitmap.getHeight();
@@ -233,7 +233,7 @@ private void doDecode(EncodedImage encodedImage, boolean isLast) {
             IS_FINAL_KEY,
             finalStr,
             IMAGE_TYPE_KEY,
-            imageTypeStr);
+            cacheChoiceStr);
       } else {
         return ImmutableMap.of(
             JobScheduler.QUEUE_TIME_KEY,
@@ -243,7 +243,7 @@ private void doDecode(EncodedImage encodedImage, boolean isLast) {
             IS_FINAL_KEY,
             finalStr,
             IMAGE_TYPE_KEY,
-            imageTypeStr);
+            cacheChoiceStr);
       }
     }
 
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DiskCacheProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DiskCacheProducer.java
index d4c1fb48f..8d66043e7 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DiskCacheProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DiskCacheProducer.java
@@ -72,7 +72,7 @@ public void produceResults(
 
     final CacheKey cacheKey =
         mCacheKeyFactory.getEncodedCacheKey(imageRequest, producerContext.getCallerContext());
-    boolean isSmallRequest = (imageRequest.getImageType() == ImageRequest.ImageType.SMALL);
+    boolean isSmallRequest = (imageRequest.getCacheChoice() == ImageRequest.CacheChoice.SMALL);
     final BufferedDiskCache preferredCache = isSmallRequest ?
         mSmallImageBufferedDiskCache : mDefaultBufferedDiskCache;
     final AtomicBoolean isCancelled = new AtomicBoolean(false);
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java
index 1944c9e9b..d339b580e 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java
@@ -28,8 +28,8 @@
 @Immutable
 public class ImageRequest {
 
-  /** image type */
-  private final ImageType mImageType;
+  /** Cache choice */
+  private final CacheChoice mCacheChoice;
 
   /** Source Uri */
   private final Uri mSourceUri;
@@ -73,7 +73,7 @@ public static ImageRequest fromUri(@Nullable String uriString) {
   }
 
   protected ImageRequest(ImageRequestBuilder builder) {
-    mImageType = builder.getImageType();
+    mCacheChoice = builder.getCacheChoice();
     mSourceUri = builder.getSourceUri();
 
     mProgressiveRenderingEnabled = builder.isProgressiveRenderingEnabled();
@@ -91,8 +91,8 @@ protected ImageRequest(ImageRequestBuilder builder) {
     mPostprocessor = builder.getPostprocessor();
   }
 
-  public ImageType getImageType() {
-    return mImageType;
+  public CacheChoice getCacheChoice() {
+    return mCacheChoice;
   }
 
   public Uri getSourceUri() {
@@ -157,19 +157,19 @@ public boolean equals(Object o) {
     }
     ImageRequest request = (ImageRequest) o;
     return Objects.equal(mSourceUri, request.mSourceUri) &&
-        Objects.equal(mImageType, request.mImageType) &&
+        Objects.equal(mCacheChoice, request.mCacheChoice) &&
         Objects.equal(mSourceFile, request.mSourceFile);
   }
 
   @Override
   public int hashCode() {
-    return Objects.hashCode(mImageType, mSourceUri, mSourceFile);
+    return Objects.hashCode(mCacheChoice, mSourceUri, mSourceFile);
   }
 
   /**
-   * An enum describing type of the image.
+   * An enum describing the cache choice.
    */
-  public enum ImageType {
+  public enum CacheChoice {
     /* Indicates that this image should go in the small disk cache, if one is being used */
     SMALL,
 
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequestBuilder.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequestBuilder.java
index 8347083ca..2258f60ec 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequestBuilder.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequestBuilder.java
@@ -19,7 +19,7 @@
 
 import javax.annotation.Nullable;
 
-import static com.facebook.imagepipeline.request.ImageRequest.ImageType;
+import static com.facebook.imagepipeline.request.ImageRequest.CacheChoice;
 import static com.facebook.imagepipeline.request.ImageRequest.RequestLevel;
 
 /**
@@ -32,7 +32,7 @@
   private boolean mAutoRotateEnabled = false;
   private @Nullable ResizeOptions mResizeOptions = null;
   private ImageDecodeOptions mImageDecodeOptions = ImageDecodeOptions.defaults();
-  private ImageType mImageType = ImageType.DEFAULT;
+  private CacheChoice mCacheChoice = CacheChoice.DEFAULT;
   private boolean mProgressiveRenderingEnabled = false;
   private boolean mLocalThumbnailPreviewsEnabled = false;
   private Priority mRequestPriority = Priority.HIGH;
@@ -82,7 +82,7 @@ public static ImageRequestBuilder fromRequest(ImageRequest imageRequest) {
     return ImageRequestBuilder.newBuilderWithSource(imageRequest.getSourceUri())
         .setAutoRotateEnabled(imageRequest.getAutoRotateEnabled())
         .setImageDecodeOptions(imageRequest.getImageDecodeOptions())
-        .setImageType(imageRequest.getImageType())
+        .setCacheChoice(imageRequest.getCacheChoice())
         .setLocalThumbnailPreviewsEnabled(imageRequest.getLocalThumbnailPreviewsEnabled())
         .setLowestPermittedRequestLevel(imageRequest.getLowestPermittedRequestLevel())
         .setPostprocessor(imageRequest.getPostprocessor())
@@ -167,19 +167,19 @@ public ImageDecodeOptions getImageDecodeOptions() {
   }
 
   /**
-   * Sets the image type. Pipeline might use different caches and eviction policies for each
+   * Sets the cache option. Pipeline might use different caches and eviction policies for each
    * image type.
-   * @param imageType the image type to set
+   * @param cacheChoice the cache choice to set
    * @return the modified builder instance
    */
-  public ImageRequestBuilder setImageType(ImageType imageType) {
-    mImageType = imageType;
+  public ImageRequestBuilder setCacheChoice(ImageRequest.CacheChoice cacheChoice) {
+    mCacheChoice = cacheChoice;
     return this;
   }
 
-  /** Gets the image type (profile image or default). */
-  public ImageType getImageType() {
-    return mImageType;
+  /** Gets the cache choice (profile image or default). */
+  public CacheChoice getCacheChoice() {
+    return mCacheChoice;
   }
 
   /**
diff --git a/imagepipeline/src/test/java/com/facebook/imagepipeline/producers/DiskCacheProducerTest.java b/imagepipeline/src/test/java/com/facebook/imagepipeline/producers/DiskCacheProducerTest.java
index 188d7d7c1..3f10d9c6b 100644
--- a/imagepipeline/src/test/java/com/facebook/imagepipeline/producers/DiskCacheProducerTest.java
+++ b/imagepipeline/src/test/java/com/facebook/imagepipeline/producers/DiskCacheProducerTest.java
@@ -129,7 +129,7 @@ public void setUp() {
         Priority.MEDIUM);
     when(mProducerListener.requiresExtraMap(mRequestId)).thenReturn(true);
     when(mCacheKeyFactory.getEncodedCacheKey(mImageRequest, mCallerContext)).thenReturn(mCacheKey);
-    when(mImageRequest.getImageType()).thenReturn(ImageRequest.ImageType.DEFAULT);
+    when(mImageRequest.getCacheChoice()).thenReturn(ImageRequest.CacheChoice.DEFAULT);
     when(mImageRequest.isDiskCacheEnabled()).thenReturn(true);
   }
 
@@ -171,7 +171,7 @@ public void testDefaultDiskCacheGetSuccessful() {
 
   @Test
   public void testSmallImageDiskCacheGetSuccessful() {
-    when(mImageRequest.getImageType()).thenReturn(ImageRequest.ImageType.SMALL);
+    when(mImageRequest.getCacheChoice()).thenReturn(ImageRequest.CacheChoice.SMALL);
     setupDiskCacheGetSuccess(mSmallImageBufferedDiskCache);
     mDiskCacheProducer.produceResults(mConsumer, mProducerContext);
     verify(mConsumer).onNewResult(mFinalEncodedImage, true);
@@ -223,7 +223,7 @@ public void testDefaultDiskCacheGetFailureInputProducerSuccess() {
 
   @Test
   public void testSmallImageDiskCacheGetFailureInputProducerSuccess() {
-    when(mImageRequest.getImageType()).thenReturn(ImageRequest.ImageType.SMALL);
+    when(mImageRequest.getCacheChoice()).thenReturn(ImageRequest.CacheChoice.SMALL);
     setupDiskCacheGetFailure(mSmallImageBufferedDiskCache);
     setupInputProducerSuccess();
     mDiskCacheProducer.produceResults(mConsumer, mProducerContext);
@@ -277,7 +277,7 @@ public void testDefaultDiskCacheGetNotFoundInputProducerSuccess() {
 
   @Test
   public void testSmallImageDiskCacheGetNotFoundInputProducerSuccess() {
-    when(mImageRequest.getImageType()).thenReturn(ImageRequest.ImageType.SMALL);
+    when(mImageRequest.getCacheChoice()).thenReturn(ImageRequest.CacheChoice.SMALL);
     setupDiskCacheGetNotFound(mSmallImageBufferedDiskCache);
     setupInputProducerSuccess();
     mDiskCacheProducer.produceResults(mConsumer, mProducerContext);
@@ -390,7 +390,7 @@ public void testBigImageInDefaultCache() {
 
   @Test
   public void testIgnoresSmallHintOnWrite() {
-    when(mImageRequest.getImageType()).thenReturn(ImageRequest.ImageType.SMALL);
+    when(mImageRequest.getCacheChoice()).thenReturn(ImageRequest.CacheChoice.SMALL);
     setupDiskCacheGetNotFound(mSmallImageBufferedDiskCache);
     setupDiskCacheGetNotFound(mDefaultBufferedDiskCache);
     setupInputProducerSuccess();
@@ -428,7 +428,7 @@ public void testReadsTwiceWhenNecessary() {
 
   @Test
   public void testIgnoresSmallHintIndex() {
-    when(mImageRequest.getImageType()).thenReturn(ImageRequest.ImageType.SMALL);
+    when(mImageRequest.getCacheChoice()).thenReturn(ImageRequest.CacheChoice.SMALL);
     when(mDefaultBufferedDiskCache.containsSync(mCacheKey)).thenReturn(true);
     setupDiskCacheGetSuccess(mDefaultBufferedDiskCache);
     mForceSmallCacheProducer.produceResults(mConsumer, mProducerContext);
@@ -439,7 +439,7 @@ public void testIgnoresSmallHintIndex() {
 
   @Test
   public void testIgnoresSmallHintDisk() {
-    when(mImageRequest.getImageType()).thenReturn(ImageRequest.ImageType.SMALL);
+    when(mImageRequest.getCacheChoice()).thenReturn(ImageRequest.CacheChoice.SMALL);
     setupDiskCacheGetNotFound(mSmallImageBufferedDiskCache);
     setupDiskCacheGetSuccess(mDefaultBufferedDiskCache);
     mForceSmallCacheProducer.produceResults(mConsumer, mProducerContext);
diff --git a/samples/scrollperf/build.gradle b/samples/scrollperf/build.gradle
index 67a3343fa..bf92526e1 100644
--- a/samples/scrollperf/build.gradle
+++ b/samples/scrollperf/build.gradle
@@ -33,6 +33,8 @@ dependencies {
     compile 'com.android.support:appcompat-v7:23.2.0'
     compile 'com.android.support:recyclerview-v7:23.2.0'
     compile 'com.android.support:preference-v7:23.2.0'
+    testCompile "com.android.support:support-v4:${SUPPORT_LIB_VERSION}"
+    testCompile "junit:junit:${JUNIT_VERSION}"
     androidTestCompile "junit:junit:${JUNIT_VERSION}"
     androidTestCompile "org.mockito:mockito-core:${MOCKITO_CORE_VERSION}"
     androidTestCompile("org.powermock:powermock-api-mockito:${POWERMOCK_VERSION}") {
diff --git a/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/conf/Config.java b/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/conf/Config.java
index 1ac59a84c..286305a1a 100644
--- a/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/conf/Config.java
+++ b/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/conf/Config.java
@@ -35,6 +35,11 @@
   public final boolean useRoundedCorners;
   public final boolean useRoundedAsCircle;
 
+  public final boolean usePostprocessor;
+  public final String postprocessorType;
+
+  public final String scaleType;
+
   public static Config load(final Context context) {
     final SharedPreferences sharedPreferences =
             PreferenceManager.getDefaultSharedPreferences(context);
@@ -56,10 +61,18 @@ public static Config load(final Context context) {
     final boolean useRoundedCorners = sharedPreferences.getBoolean(
             Const.ROUNDED_CORNERS_KEY,
             false);
-    // Rounded as circle
     final boolean useRoundedAsCircle = sharedPreferences.getBoolean(
             Const.ROUNDED_AS_CIRCLE_KEY,
             false);
+    final boolean usePostprocessor = sharedPreferences.getBoolean(
+            Const.USE_POSTPROCESSOR_KEY,
+            false);
+    final String postprocessorType = sharedPreferences.getString(
+            Const.POSTPROCESSOR_TYPE_KEY,
+            context.getString(R.string.value_postprocessor_medium));
+    final String scaleType = sharedPreferences.getString(
+            Const.SCALE_TYPE_KEY,
+            context.getString(R.string.value_scale_type_fit_center));
     return new Config(
       dataSourceType,
       recyclerLayoutType,
@@ -67,7 +80,10 @@ public static Config load(final Context context) {
       distinctUriDataSource,
       reuseOldController,
       useRoundedCorners,
-      useRoundedAsCircle);
+      useRoundedAsCircle,
+      usePostprocessor,
+      postprocessorType,
+      scaleType);
   }
 
   private Config(
@@ -77,7 +93,10 @@ private Config(
       final boolean distinctUriDataSource,
       final boolean reuseOldController,
       final boolean useRoundedCorners,
-      final boolean useRoundedAsCircle) {
+      final boolean useRoundedAsCircle,
+      final boolean usePostprocessor,
+      final String postprocessorType,
+      final String scaleType) {
     this.dataSourceType = dataSourceType;
     this.recyclerLayoutType = recyclerLayoutType;
     this.infiniteDataSource = infiniteDataSource;
@@ -85,5 +104,8 @@ private Config(
     this.reuseOldController = reuseOldController;
     this.useRoundedCorners = useRoundedCorners;
     this.useRoundedAsCircle = useRoundedAsCircle;
+    this.usePostprocessor = usePostprocessor;
+    this.postprocessorType = postprocessorType;
+    this.scaleType = scaleType;
   }
 }
diff --git a/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/conf/Const.java b/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/conf/Const.java
index 9ea6eb260..281b60ed2 100644
--- a/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/conf/Const.java
+++ b/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/conf/Const.java
@@ -33,4 +33,7 @@
   public static final String REUSE_OLD_CONTROLLER_KEY= "reuse_old_controller";
   public static final String ROUNDED_CORNERS_KEY= "rounded_corners";
   public static final String ROUNDED_AS_CIRCLE_KEY= "rounded_as_circle";
+  public static final String USE_POSTPROCESSOR_KEY= "use_postprocessor";
+  public static final String POSTPROCESSOR_TYPE_KEY= "postprocessor_type";
+  public static final String SCALE_TYPE_KEY= "scale_type";
 }
diff --git a/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/fragments/SettingsFragment.java b/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/fragments/SettingsFragment.java
index 05590334f..b7984556b 100644
--- a/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/fragments/SettingsFragment.java
+++ b/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/fragments/SettingsFragment.java
@@ -52,6 +52,9 @@ public void onCreatePreferences(Bundle bundle, String s) {
     updateReuseOldControllerSummary(findPreference(Const.REUSE_OLD_CONTROLLER_KEY));
     updateRoundedCornersSummary(findPreference(Const.ROUNDED_CORNERS_KEY));
     updateRoundedAsCircleSummary(findPreference(Const.ROUNDED_AS_CIRCLE_KEY));
+    updateUsePostprocessorSummary(findPreference(Const.USE_POSTPROCESSOR_KEY));
+    updateWhatPostprocessorSummary(findPreference(Const.POSTPROCESSOR_TYPE_KEY));
+    updateWhatScaleTypeSummary(findPreference(Const.SCALE_TYPE_KEY));
   }
 
   @Override
@@ -63,28 +66,45 @@ public void onDestroy() {
   @Override
   public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
     Preference preference = findPreference(key);
-    if (Const.DATA_SOURCE_KEY.equals(key)) {
-      updateDataSourceSummary(preference);
-    } else if (Const.RECYCLER_LAYOUT_KEY.equals(key)) {
-      updateRecyclerLayoutSummary(preference);
-    } else if (Const.INFINITE_DATA_SOURCE_KEY.equals(key)) {
-      updateInfiniteDataSourceSummary(preference);
-    } else if (Const.DISTINCT_DATA_SOURCE_KEY.equals(key)) {
-      updateDistinctDataSourceSummary(preference);
-    } else if (Const.REUSE_OLD_CONTROLLER_KEY.equals(key)) {
-      updateReuseOldControllerSummary(preference);
-    } else if (Const.ROUNDED_CORNERS_KEY.equals(key)) {
-      updateRoundedCornersSummary(preference);
-    } else if (Const.ROUNDED_AS_CIRCLE_KEY.equals(key)) {
-      updateRoundedAsCircleSummary(preference);
+    switch (key) {
+      case Const.DATA_SOURCE_KEY:
+        updateDataSourceSummary(preference);
+        break;
+      case Const.RECYCLER_LAYOUT_KEY:
+        updateRecyclerLayoutSummary(preference);
+        break;
+      case Const.INFINITE_DATA_SOURCE_KEY:
+        updateInfiniteDataSourceSummary(preference);
+        break;
+      case Const.DISTINCT_DATA_SOURCE_KEY:
+        updateDistinctDataSourceSummary(preference);
+        break;
+      case Const.REUSE_OLD_CONTROLLER_KEY:
+        updateReuseOldControllerSummary(preference);
+        break;
+      case Const.ROUNDED_CORNERS_KEY:
+        updateRoundedCornersSummary(preference);
+        break;
+      case Const.ROUNDED_AS_CIRCLE_KEY:
+        updateRoundedAsCircleSummary(preference);
+        break;
+      case Const.USE_POSTPROCESSOR_KEY:
+        updateUsePostprocessorSummary(preference);
+        break;
+      case Const.POSTPROCESSOR_TYPE_KEY:
+        updateWhatPostprocessorSummary(preference);
+        break;
+      case Const.SCALE_TYPE_KEY:
+        updateWhatScaleTypeSummary(preference);
+        break;
     }
   }
 
   private void updateDataSourceSummary(final Preference preference) {
-    ListPreference dataSourcePreference = (ListPreference) preference;
-    final int valueIndex = dataSourcePreference.findIndexOfValue(dataSourcePreference.getValue());
-    final String summary = getResources().getStringArray(R.array.data_source_summaries)[valueIndex];
-    preference.setSummary(summary);
+    updateListPreference(
+      getResources(),
+      (ListPreference) preference,
+      R.array.data_source_summaries);
   }
 
   private void updateInfiniteDataSourceSummary(final Preference preference) {
@@ -106,12 +126,10 @@ private void updateDistinctDataSourceSummary(final Preference preference) {
   }
 
   private void updateRecyclerLayoutSummary(final Preference preference) {
-    ListPreference recyclerLayoutPreference = (ListPreference) preference;
-    final int valueIndex = recyclerLayoutPreference
-        .findIndexOfValue(recyclerLayoutPreference.getValue());
-    final String summary = getResources()
-        .getStringArray(R.array.recycler_layout_summaries)[valueIndex];
-    preference.setSummary(summary);
+    updateListPreference(
+            getResources(),
+            (ListPreference) preference,
+            R.array.recycler_layout_summaries);
   }
 
   private void updateReuseOldControllerSummary(final Preference preference) {
@@ -130,6 +148,36 @@ private void updateRoundedCornersSummary(final Preference preference) {
             R.string.unchecked_rounded_corners_summary);
   }
 
+  private void updateRoundedAsCircleSummary(final Preference preference) {
+    updateCheckBoxPreference(
+            getResources(),
+            (CheckBoxPreference) preference,
+            R.string.checked_rounded_as_circle_summary,
+            R.string.unchecked_rounded_as_circle_summary);
+  }
+
+  private void updateUsePostprocessorSummary(final Preference preference) {
+    updateCheckBoxPreference(
+            getResources(),
+            (CheckBoxPreference) preference,
+            R.string.checked_postprocessor_summary,
+            R.string.unchecked_postprocessor_summary);
+  }
+
+  private void updateWhatPostprocessorSummary(final Preference preference) {
+    updateListPreference(
+            getResources(),
+            (ListPreference) preference,
+            R.array.postprocessor_summaries);
+  }
+
+  private void updateWhatScaleTypeSummary(final Preference preference) {
+    updateListPreference(
+            getResources(),
+            (ListPreference) preference,
+            R.array.scale_type_summaries);
+  }
+
   private static boolean updateCheckBoxPreference(
           Resources resources,
           CheckBoxPreference preference,
@@ -144,13 +192,12 @@ private static boolean updateCheckBoxPreference(
     return checkboxState;
   }
 
-  private void updateRoundedAsCircleSummary(final Preference preference) {
-    CheckBoxPreference roundedAsCirclePreference = (CheckBoxPreference) preference;
-    final boolean roundedAsCircle = roundedAsCirclePreference.isChecked();
-    if (roundedAsCircle) {
-      preference.setSummary(getResources().getString(R.string.checked_rounded_as_circle_enabled_summary));
-    } else {
-      preference.setSummary(getResources().getString(R.string.unchecked_rounded_as_circle_enabled_summary));
-    }
+  private static void updateListPreference(
+          Resources resources,
+          ListPreference preference,
+          int arrayValuesId) {
+    final int valueIndex = preference.findIndexOfValue(preference.getValue());
+    final String summary = resources.getStringArray(arrayValuesId)[valueIndex];
+    preference.setSummary(summary);
   }
 }
diff --git a/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/fragments/recycler/DraweeViewHolder.java b/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/fragments/recycler/DraweeViewHolder.java
index ad15d882d..a5908fe40 100644
--- a/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/fragments/recycler/DraweeViewHolder.java
+++ b/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/fragments/recycler/DraweeViewHolder.java
@@ -22,6 +22,7 @@
 import com.facebook.imagepipeline.request.ImageRequestBuilder;
 import com.facebook.samples.scrollperf.conf.Config;
 import com.facebook.samples.scrollperf.conf.Const;
+import com.facebook.samples.scrollperf.util.PipelineUtil;
 import com.facebook.samples.scrollperf.util.SizeUtil;
 
 /**
@@ -59,6 +60,7 @@ public void bind(Uri uri) {
             new ResizeOptions(
               mDraweeView.getLayoutParams().width,
               mDraweeView.getLayoutParams().height));
+    PipelineUtil.addOptionalFeatures(imageRequestBuilder, mConfig);
     // Create the Builder
     PipelineDraweeControllerBuilder builder = Fresco.newDraweeControllerBuilder()
                                                       .setImageRequest(imageRequestBuilder.build());
diff --git a/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/fragments/recycler/DraweeViewListAdapter.java b/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/fragments/recycler/DraweeViewListAdapter.java
index c63de5f3d..1396aabd9 100644
--- a/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/fragments/recycler/DraweeViewListAdapter.java
+++ b/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/fragments/recycler/DraweeViewListAdapter.java
@@ -28,6 +28,7 @@
 import com.facebook.samples.scrollperf.conf.Const;
 import com.facebook.samples.scrollperf.data.SimpleAdapter;
 import com.facebook.samples.scrollperf.util.DraweeUtil;
+import com.facebook.samples.scrollperf.util.PipelineUtil;
 import com.facebook.samples.scrollperf.util.SizeUtil;
 
 /**
@@ -80,6 +81,7 @@ public View getView(int position, View convertView, ViewGroup parent) {
                     new ResizeOptions(
                             draweeView.getLayoutParams().width,
                             draweeView.getLayoutParams().height));
+    PipelineUtil.addOptionalFeatures(imageRequestBuilder, mConfig);
     // Create the Builder
     PipelineDraweeControllerBuilder builder = Fresco.newDraweeControllerBuilder()
             .setImageRequest(imageRequestBuilder.build());
diff --git a/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/postprocessor/DelayPostprocessor.java b/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/postprocessor/DelayPostprocessor.java
new file mode 100644
index 000000000..a01d63950
--- /dev/null
+++ b/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/postprocessor/DelayPostprocessor.java
@@ -0,0 +1,61 @@
+/*
+ * This file provided by Facebook is for non-commercial testing and evaluation
+ * purposes only.  Facebook reserves all rights not expressly granted.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+package com.facebook.samples.scrollperf.postprocessor;
+
+import android.graphics.Bitmap;
+
+import com.facebook.imagepipeline.request.BasePostprocessor;
+import com.facebook.samples.scrollperf.util.TimeWaster;
+
+/**
+ * This is a Postprocessor which just introduce a delay
+ */
+public final class DelayPostprocessor extends BasePostprocessor {
+
+  private static DelayPostprocessor sSlowPostprocessor;
+
+  private static DelayPostprocessor sMediumPostprocessor;
+
+  private static DelayPostprocessor sFastPostprocessor;
+
+  private final int mDelay;
+
+  private DelayPostprocessor(final int delay) {
+    this.mDelay = delay;
+  }
+
+  public static DelayPostprocessor getSlowPostprocessor() {
+    if (sSlowPostprocessor == null) {
+      sSlowPostprocessor = new DelayPostprocessor(20);
+    }
+    return sSlowPostprocessor;
+  }
+
+  public static DelayPostprocessor getMediumPostprocessor() {
+    if (sMediumPostprocessor == null) {
+      sMediumPostprocessor = new DelayPostprocessor(10);
+    }
+    return sMediumPostprocessor;
+  }
+
+  public static DelayPostprocessor getFastPostprocessor() {
+    if (sFastPostprocessor == null) {
+      sFastPostprocessor = new DelayPostprocessor(5);
+    }
+    return sFastPostprocessor;
+  }
+
+  @Override
+  public void process(Bitmap bitmap) {
+    TimeWaster.Fib(mDelay);
+  }
+}
diff --git a/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/util/DraweeUtil.java b/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/util/DraweeUtil.java
index 867f65d62..661137a4a 100644
--- a/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/util/DraweeUtil.java
+++ b/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/util/DraweeUtil.java
@@ -41,6 +41,7 @@ public static GenericDraweeHierarchy createDraweeHierarchy(
             .setPlaceholderImage(Const.PLACEHOLDER)
             .setFailureImage(Const.FAILURE)
             .setActualImageScaleType(ScalingUtils.ScaleType.FIT_CENTER);
+    applyScaleType(builder, config);
     if (config.useRoundedCorners) {
       // Will add conf params later about this
       final RoundingParams roundingParams = new RoundingParams()
@@ -53,4 +54,33 @@ public static GenericDraweeHierarchy createDraweeHierarchy(
     }
     return builder.build();
   }
+
+  public static void applyScaleType(GenericDraweeHierarchyBuilder builder, final Config config) {
+    switch (config.scaleType) {
+      case "scale_type_none":
+        builder.setActualImageScaleType(null);
+        break;
+      case "scale_type_center":
+        builder.setActualImageScaleType(ScalingUtils.ScaleType.CENTER);
+        break;
+      case "scale_type_center_crop":
+        builder.setActualImageScaleType(ScalingUtils.ScaleType.CENTER_CROP);
+        break;
+      case "scale_type_center_inside":
+        builder.setActualImageScaleType(ScalingUtils.ScaleType.CENTER_INSIDE);
+        break;
+      case "scale_type_fit_center":
+        builder.setActualImageScaleType(ScalingUtils.ScaleType.FIT_CENTER);
+        break;
+      case "scale_type_fit_start":
+        builder.setActualImageScaleType(ScalingUtils.ScaleType.FIT_START);
+        break;
+      case "scale_type_fit_end":
+        builder.setActualImageScaleType(ScalingUtils.ScaleType.FIT_END);
+        break;
+      case "scale_type_fit_xy":
+        builder.setActualImageScaleType(ScalingUtils.ScaleType.FIT_XY);
+        break;
+    }
+  }
 }
diff --git a/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/util/PipelineUtil.java b/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/util/PipelineUtil.java
new file mode 100644
index 000000000..98a9c0eab
--- /dev/null
+++ b/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/util/PipelineUtil.java
@@ -0,0 +1,46 @@
+/*
+ * This file provided by Facebook is for non-commercial testing and evaluation
+ * purposes only.  Facebook reserves all rights not expressly granted.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+package com.facebook.samples.scrollperf.util;
+
+import com.facebook.imagepipeline.request.ImageRequestBuilder;
+import com.facebook.imagepipeline.request.Postprocessor;
+import com.facebook.samples.scrollperf.conf.Config;
+import com.facebook.samples.scrollperf.postprocessor.DelayPostprocessor;
+
+/**
+ * Utility class in order to manage Pipeline objects
+ */
+public final class PipelineUtil {
+
+  /**
+   * Utility method which adds optional configuration to ImageRequest
+   *
+   * @param imageRequestBuilder The Builder for ImageRequest
+   * @param config              The Config
+   */
+  public static void addOptionalFeatures(ImageRequestBuilder imageRequestBuilder, Config config) {
+    if (config.usePostprocessor) {
+      final Postprocessor postprocessor;
+      switch (config.postprocessorType) {
+        case "use_slow_postprocessor":
+          postprocessor = DelayPostprocessor.getMediumPostprocessor();
+          break;
+        case "use_fast_postprocessor":
+          postprocessor = DelayPostprocessor.getFastPostprocessor();
+          break;
+        default:
+          postprocessor = DelayPostprocessor.getMediumPostprocessor();
+      }
+      imageRequestBuilder.setPostprocessor(postprocessor);
+    }
+  }
+}
diff --git a/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/util/TimeWaster.java b/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/util/TimeWaster.java
new file mode 100644
index 000000000..416262db3
--- /dev/null
+++ b/samples/scrollperf/src/main/java/com/facebook/samples/scrollperf/util/TimeWaster.java
@@ -0,0 +1,31 @@
+/*
+ * This file provided by Facebook is for non-commercial testing and evaluation
+ * purposes only.  Facebook reserves all rights not expressly granted.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+package com.facebook.samples.scrollperf.util;
+
+/**
+ * Class with utility method which spend time
+ */
+public final class TimeWaster {
+
+  /**
+   * A not efficient calculation of the fibonacci sequence
+   * @param n The position for the fibonacci sequence
+   * @return The n-th fibonacci number
+   */
+  public static long Fib(int n) {
+    if (n < 2) {
+      return n;
+    } else {
+      return Fib(n - 1) + Fib(n - 2);
+    }
+  }
+}
diff --git a/samples/scrollperf/src/main/res/values/array.xml b/samples/scrollperf/src/main/res/values/array.xml
index 72b1e5dff..afb62f788 100644
--- a/samples/scrollperf/src/main/res/values/array.xml
+++ b/samples/scrollperf/src/main/res/values/array.xml
@@ -29,4 +29,51 @@
         <item>@string/value_listview_summary</item>
         <item>@string/value_recycler_summary</item>
     </array>
+    <!-- Post processor labels and values-->
+    <array name="postprocessor_labels">
+        <item>@string/label_postprocessor_slow</item>
+        <item>@string/label_postprocessor_medium</item>
+        <item>@string/label_postprocessor_fast</item>
+    </array>
+    <array name="postprocessor_values">
+        <item>@string/value_postprocessor_slow</item>
+        <item>@string/value_postprocessor_medium</item>
+        <item>@string/value_postprocessor_fast</item>
+    </array>
+    <array name="postprocessor_summaries">
+        <item>@string/value_postprocessor_slow_summary</item>
+        <item>@string/value_postprocessor_medium_summary</item>
+        <item>@string/value_postprocessor_fast_summary</item>
+    </array>
+    <!-- ScaleType -->
+    <array name="scale_type_labels">
+        <item>@string/label_scale_type_none</item>
+        <item>@string/label_scale_type_center</item>
+        <item>@string/label_scale_type_center_crop</item>
+        <item>@string/label_scale_type_center_inside</item>
+        <item>@string/label_scale_type_fit_center</item>
+        <item>@string/label_scale_type_fit_start</item>
+        <item>@string/label_scale_type_fit_end</item>
+        <item>@string/label_scale_type_fit_xy</item>
+    </array>
+    <array name="scale_type_values">
+        <item>@string/value_scale_type_none</item>
+        <item>@string/value_scale_type_center</item>
+        <item>@string/value_scale_type_center_crop</item>
+        <item>@string/value_scale_type_center_inside</item>
+        <item>@string/value_scale_type_fit_center</item>
+        <item>@string/value_scale_type_fit_start</item>
+        <item>@string/value_scale_type_fit_end</item>
+        <item>@string/value_scale_type_fit_xy</item>
+    </array>
+    <array name="scale_type_summaries">
+        <item>@string/label_scale_type_none_summary</item>
+        <item>@string/label_scale_type_center_summary</item>
+        <item>@string/label_scale_type_center_crop_summary</item>
+        <item>@string/label_scale_type_center_inside_summary</item>
+        <item>@string/label_scale_type_fit_center_summary</item>
+        <item>@string/label_scale_type_fit_start_summary</item>
+        <item>@string/label_scale_type_fit_end_summary</item>
+        <item>@string/label_scale_type_fit_xy_summary</item>
+    </array>
 </resources>
diff --git a/samples/scrollperf/src/main/res/values/strings.xml b/samples/scrollperf/src/main/res/values/strings.xml
index 0573fff87..f1f489659 100644
--- a/samples/scrollperf/src/main/res/values/strings.xml
+++ b/samples/scrollperf/src/main/res/values/strings.xml
@@ -48,9 +48,53 @@
     <string translatable="false" name="unchecked_rounded_corners_summary">No rounded corners for Drawee</string>
 
     <string translatable="false" name="title_preferences_rounded_as_circle_enabled">Rounded as circle</string>
-    <string translatable="false" name="checked_rounded_as_circle_enabled_summary">The images will be rounded as a circle</string>
-    <string translatable="false" name="unchecked_rounded_as_circle_enabled_summary">The images will have rounded corners</string>
+    <string translatable="false" name="checked_rounded_as_circle_summary">The images will be rounded as a circle</string>
+    <string translatable="false" name="unchecked_rounded_as_circle_summary">The images will have rounded corners</string>
 
+    <!-- Postprocessor-->
+    <string translatable="false" name="title_preferences_postprocessor">Postprocessor</string>
+    <string translatable="false" name="title_preferences_postprocessor_type">Postprocessor type</string>
+    <string translatable="false" name="title_preferences_use_postprocessor">Use a Postprocessor</string>
+    <string translatable="false" name="dialog_title_use_postprocessor">Select a Postprocessor</string>
+    <string translatable="false" name="checked_postprocessor_summary">We use a Postprocessor</string>
+    <string translatable="false" name="unchecked_postprocessor_summary">Postprocessor not present</string>
+    <string translatable="false" name="label_postprocessor_slow">Use a Slow Postprocessor</string>
+    <string translatable="false" name="label_postprocessor_medium">Use a Medium Postprocessor</string>
+    <string translatable="false" name="label_postprocessor_fast">Use a Fast Postprocessor</string>
+    <string translatable="false" name="value_postprocessor_slow">use_slow_postprocessor</string>
+    <string translatable="false" name="value_postprocessor_medium">use_medium_postprocessor</string>
+    <string translatable="false" name="value_postprocessor_fast">use_fast_postprocessor</string>
+    <string translatable="false" name="value_postprocessor_slow_summary">Simulation of a very slow Postprocessor</string>
+    <string translatable="false" name="value_postprocessor_medium_summary">Simulation of a medium fast Postprocessor</string>
+    <string translatable="false" name="value_postprocessor_fast_summary">Simulation of a very fast Postprocessor</string>
+
+    <!-- Scale Types-->
+    <string translatable="false" name="title_preferences_drawee_group">Drawee</string>
+    <string translatable="false" name="title_preferences_scale_type">Scale Type</string>
+    <string translatable="false" name="value_scale_type_none">scale_type_none</string>
+    <string translatable="false" name="value_scale_type_center">scale_type_center</string>
+    <string translatable="false" name="value_scale_type_center_crop">scale_type_center_crop</string>
+    <string translatable="false" name="value_scale_type_center_inside">scale_type_center_inside</string>
+    <string translatable="false" name="value_scale_type_fit_center">scale_type_fit_center</string>
+    <string translatable="false" name="value_scale_type_fit_start">scale_type_fit_start</string>
+    <string translatable="false" name="value_scale_type_fit_end">scale_type_fit_end</string>
+    <string translatable="false" name="value_scale_type_fit_xy">scale_type_fit_xy</string>
+    <string translatable="false" name="label_scale_type_none">None</string>
+    <string translatable="false" name="label_scale_type_center">center</string>
+    <string translatable="false" name="label_scale_type_center_crop">centerCrop</string>
+    <string translatable="false" name="label_scale_type_center_inside">centerInside</string>
+    <string translatable="false" name="label_scale_type_fit_center">fitCenter</string>
+    <string translatable="false" name="label_scale_type_fit_start">fitStart</string>
+    <string translatable="false" name="label_scale_type_fit_end">fitEnd</string>
+    <string translatable="false" name="label_scale_type_fit_xy">fitXY</string>
+    <string translatable="false" name="label_scale_type_none_summary">No scale type used</string>
+    <string translatable="false" name="label_scale_type_center_summary">Using center scale type</string>
+    <string translatable="false" name="label_scale_type_center_crop_summary">Using centerCrop scale type</string>
+    <string translatable="false" name="label_scale_type_center_inside_summary">Using centerInside scale type</string>
+    <string translatable="false" name="label_scale_type_fit_center_summary">Using fitCenter scale type</string>
+    <string translatable="false" name="label_scale_type_fit_start_summary">Using fitStart scale type</string>
+    <string translatable="false" name="label_scale_type_fit_end_summary">Using fitEnd scale type</string>
+    <string translatable="false" name="label_scale_type_fit_xy_summary">Using fitXY scale type</string>
 
     <!-- Layout Preferences-->
     <string translatable="false" name="key_preferences_recycler_layout">Recycler Layout</string>
@@ -63,6 +107,4 @@
     <string translatable="false" name="value_recyclerview_recycler_layout">recyclerview_recycler_layout</string>
     <string translatable="false" name="value_listview_summary">We use a ListView</string>
     <string translatable="false" name="value_recycler_summary">We use a RecyclerView</string>
-
-
 </resources>
diff --git a/samples/scrollperf/src/main/res/xml/preferences.xml b/samples/scrollperf/src/main/res/xml/preferences.xml
index a42293f0f..c6a074350 100644
--- a/samples/scrollperf/src/main/res/xml/preferences.xml
+++ b/samples/scrollperf/src/main/res/xml/preferences.xml
@@ -37,7 +37,24 @@
             app:dependency="rounded_corners"
             />
     </PreferenceCategory>
-
+    <PreferenceCategory
+        android:key="key_preferences_use_postprocessor"
+        android:title="@string/title_preferences_postprocessor"
+        >
+        <CheckBoxPreference
+            android:title="@string/title_preferences_use_postprocessor"
+            android:key="use_postprocessor"
+            />
+        <ListPreference
+            android:defaultValue="@string/value_postprocessor_medium"
+            android:dialogTitle="@string/dialog_title_use_postprocessor"
+            android:entries="@array/postprocessor_labels"
+            android:entryValues="@array/postprocessor_values"
+            android:key="postprocessor_type"
+            android:title="@string/title_preferences_postprocessor_type"
+            android:dependency="use_postprocessor"
+            />
+    </PreferenceCategory>
     <PreferenceCategory
         android:key="key_preferences_controller_group"
         android:title="@string/title_controller_group"
@@ -47,7 +64,19 @@
             android:key="reuse_old_controller"
             />
     </PreferenceCategory>
-
+    <PreferenceCategory
+        android:key="key_preferences_scale_type_group"
+        android:title="@string/title_preferences_drawee_group"
+        >
+        <ListPreference
+            android:defaultValue="@string/value_scale_type_fit_center"
+            android:dialogTitle="@string/title_preferences_scale_type"
+            android:entries="@array/scale_type_labels"
+            android:entryValues="@array/scale_type_values"
+            android:key="scale_type"
+            android:title="@string/title_preferences_scale_type"
+            />
+    </PreferenceCategory>
     <PreferenceCategory
         android:key="key_preferences_recycler_layout"
         android:title="@string/title_preferences_recycler_layout"
diff --git a/samples/scrollperf/src/test/java/com/facebook/samples/scrollperf/util/TimeWasterTest.java b/samples/scrollperf/src/test/java/com/facebook/samples/scrollperf/util/TimeWasterTest.java
new file mode 100644
index 000000000..b2044ec1d
--- /dev/null
+++ b/samples/scrollperf/src/test/java/com/facebook/samples/scrollperf/util/TimeWasterTest.java
@@ -0,0 +1,57 @@
+/*
+ * This file provided by Facebook is for non-commercial testing and evaluation
+ * purposes only.  Facebook reserves all rights not expressly granted.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+package com.facebook.samples.scrollperf.util;
+
+import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+
+/**
+ * Test for TimeWaster
+ */
+public class TimeWasterTest {
+
+  @Test
+  public void testFib_0_0() {
+    final long result = TimeWaster.Fib(0);
+    assertEquals(0, result);
+  }
+
+  @Test
+  public void testFib_1_1() {
+    final long result = TimeWaster.Fib(1);
+    assertEquals(1, result);
+  }
+
+  @Test
+  public void testFib_2_1() {
+    final long result = TimeWaster.Fib(2);
+    assertEquals(1, result);
+  }
+
+  @Test
+  public void testFib_5_5() {
+    final long result = TimeWaster.Fib(5);
+    assertEquals(5, result);
+  }
+
+  @Test
+  public void testFib_10_55() {
+    final long result = TimeWaster.Fib(10);
+    assertEquals(55, result);
+  }
+
+  @Test
+  public void testFib_20_6765() {
+    final long result = TimeWaster.Fib(20);
+    assertEquals(6765, result);
+  }
+}
diff --git a/samples/uriapp/src/main/java/com/facebook/samples/uriapp/MainActivity.java b/samples/uriapp/src/main/java/com/facebook/samples/uriapp/MainActivity.java
index e4ac9ce0f..a803c8b85 100644
--- a/samples/uriapp/src/main/java/com/facebook/samples/uriapp/MainActivity.java
+++ b/samples/uriapp/src/main/java/com/facebook/samples/uriapp/MainActivity.java
@@ -19,7 +19,9 @@
 import android.net.Uri;
 import android.os.Bundle;
 import android.view.KeyEvent;
+import android.view.View;
 import android.view.inputmethod.EditorInfo;
+import android.widget.Button;
 import android.widget.EditText;
 import android.widget.TextView;
 
@@ -49,19 +51,26 @@ protected void onCreate(Bundle savedInstanceState) {
 
     mSimpleDraweeView = (SimpleDraweeView) findViewById(R.id.simple_drawee_view);
 
-    EditText editText = (EditText) findViewById(R.id.uri_edit_text);
+    final EditText editText = (EditText) findViewById(R.id.uri_edit_text);
     editText.setOnEditorActionListener(
         new TextView.OnEditorActionListener() {
           @Override
           public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
             final boolean isEnterKeyDown = (actionId == EditorInfo.IME_NULL) &&
-                    (event.getAction() == KeyEvent.ACTION_DOWN);
+                (event.getAction() == KeyEvent.ACTION_DOWN);
             if (isEnterKeyDown || actionId == EditorInfo.IME_ACTION_DONE) {
               updateImageUri(Uri.parse(v.getText().toString()));
             }
             return false;
           }
         });
+    final Button clearButton = (Button) findViewById(R.id.clear_uri);
+    clearButton.setOnClickListener(new View.OnClickListener() {
+      @Override
+      public void onClick(View v) {
+        editText.getText().clear();
+      }
+    });
   }
 
   private void updateImageUri(Uri uri) {
diff --git a/samples/uriapp/src/main/res/layout/activity_main.xml b/samples/uriapp/src/main/res/layout/activity_main.xml
index d2191b10e..f2a3a8d0c 100644
--- a/samples/uriapp/src/main/res/layout/activity_main.xml
+++ b/samples/uriapp/src/main/res/layout/activity_main.xml
@@ -10,23 +10,37 @@
     android:paddingLeft="@dimen/activity_horizontal_margin"
     android:paddingRight="@dimen/activity_horizontal_margin"
     android:paddingTop="@dimen/activity_vertical_margin"
-    tools:context="com.facebook.uri.MainActivity" >
+    tools:context="com.facebook.uri.MainActivity"
+    >
 
+  <LinearLayout
+      android:layout_width="match_parent"
+      android:layout_height="wrap_content"
+      android:orientation="horizontal"
+      >
     <EditText
-        android:layout_width="match_parent"
+        android:layout_width="0dp"
+        android:layout_weight="1"
         android:layout_height="wrap_content"
         android:id="@+id/uri_edit_text"
         android:layout_gravity="center_horizontal"
-        android:layout_weight="0"
         android:singleLine="true"
         android:imeOptions="actionDone"
-        android:hint="@string/uri_edit_text_hint" />
+        android:hint="@string/uri_edit_text_hint"
+        />
+    <Button
+        android:id="@+id/clear_uri"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/clear_uri"
+        />
+  </LinearLayout>
 
-    <com.facebook.drawee.view.SimpleDraweeView
+  <com.facebook.drawee.view.SimpleDraweeView
       android:id="@+id/simple_drawee_view"
       android:layout_width="match_parent"
-      android:layout_height="0dp"
-      android:layout_weight="1"
+      android:layout_height="match_parent"
       fresco:actualImageScaleType="fitCenter"
-      fresco:failureImage="@color/red"/>
+      fresco:failureImage="@color/red"
+      />
 </LinearLayout>
diff --git a/samples/uriapp/src/main/res/values/strings.xml b/samples/uriapp/src/main/res/values/strings.xml
index 68120a0ee..1f55a4b54 100644
--- a/samples/uriapp/src/main/res/values/strings.xml
+++ b/samples/uriapp/src/main/res/values/strings.xml
@@ -1,4 +1,5 @@
 <resources>
   <string name="app_name">Fresco Uri App</string>
   <string name="uri_edit_text_hint">Type uri here!</string>
+  <string name="clear_uri">Clear</string>
 </resources>
diff --git a/samples/zoomable/src/main/java/com/facebook/samples/zoomable/GestureListenerWrapper.java b/samples/zoomable/src/main/java/com/facebook/samples/zoomable/GestureListenerWrapper.java
index 5f0686684..8e27fc0c2 100644
--- a/samples/zoomable/src/main/java/com/facebook/samples/zoomable/GestureListenerWrapper.java
+++ b/samples/zoomable/src/main/java/com/facebook/samples/zoomable/GestureListenerWrapper.java
@@ -17,7 +17,7 @@
 /**
  * Wrapper for SimpleOnGestureListener as GestureDetector does not allow changing its listener.
  */
-class GestureListenerWrapper extends GestureDetector.SimpleOnGestureListener {
+public class GestureListenerWrapper extends GestureDetector.SimpleOnGestureListener {
 
   private GestureDetector.SimpleOnGestureListener mDelegate;
 
