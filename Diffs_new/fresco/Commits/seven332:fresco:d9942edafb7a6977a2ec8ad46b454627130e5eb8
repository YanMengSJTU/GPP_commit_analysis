diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/FrescoLarge.java b/fresco-large/src/main/java/com/hippo/fresco/large/FrescoLarge.java
index 63d6b6486..fa73458e5 100644
--- a/fresco-large/src/main/java/com/hippo/fresco/large/FrescoLarge.java
+++ b/fresco-large/src/main/java/com/hippo/fresco/large/FrescoLarge.java
@@ -9,21 +9,25 @@
 import java.util.Map;
 import java.util.Set;
 
+import android.content.Context;
+
 import com.facebook.common.logging.FLog;
 import com.facebook.drawee.backends.pipeline.DraweeConfig;
 import com.facebook.imageformat.ImageFormat;
 import com.facebook.imagepipeline.decoder.ImageDecoderConfig;
 
 import com.hippo.fresco.large.decoder.ImageRegionDecoderFactory;
-import com.hippo.fresco.large.drawable.LargeDrawableFactory;
 
 public final class FrescoLarge {
   private FrescoLarge() {}
 
   private static final Class<?> TAG = FrescoLarge.class;
 
-  public static void config(@Nonnull ImageDecoderConfig.Builder decoderConfigBuilder,
-      @Nonnull DraweeConfig.Builder draweeConfigBuilder, @Nonnull FrescoLargeConfig config) {
+  public static void config(
+      @Nonnull Context context,
+      @Nonnull ImageDecoderConfig.Builder decoderConfigBuilder,
+      @Nonnull DraweeConfig.Builder draweeConfigBuilder,
+      @Nonnull FrescoLargeConfig config) {
     Set<ImageFormat> imageFormatSet = config.getImageFormatSet();
     if (imageFormatSet == null || imageFormatSet.isEmpty()) {
       FLog.w(TAG, "No ImageFormat");
@@ -37,12 +41,6 @@ public static void config(@Nonnull ImageDecoderConfig.Builder decoderConfigBuild
       return;
     }
 
-    LargeDrawableFactory factory = config.getLargeDrawableFactory();
-    if (factory == null) {
-      FLog.w(TAG, "No LargeDrawableFactory");
-      return;
-    }
-
     Map<ImageFormat, ImageFormat.FormatChecker> imageFormatCheckerMap =
         config.getImageFormatCheckerMap();
     if (imageFormatCheckerMap != null) {
@@ -61,6 +59,6 @@ public static void config(@Nonnull ImageDecoderConfig.Builder decoderConfigBuild
       decoderConfigBuilder.overrideDecoder(imageFormat, largeImageDecoder);
     }
 
-    draweeConfigBuilder.addCustomDrawableFactory(config.getLargeDrawableFactory());
+    draweeConfigBuilder.addCustomDrawableFactory(new LargeDrawableFactory(context));
   }
 }
diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/FrescoLargeConfig.java b/fresco-large/src/main/java/com/hippo/fresco/large/FrescoLargeConfig.java
index cf6a3f5ab..dc86015f9 100644
--- a/fresco-large/src/main/java/com/hippo/fresco/large/FrescoLargeConfig.java
+++ b/fresco-large/src/main/java/com/hippo/fresco/large/FrescoLargeConfig.java
@@ -17,8 +17,6 @@
 
 import com.hippo.fresco.large.decoder.ImageRegionDecoderFactory;
 import com.hippo.fresco.large.decoder.ImageSizeDecoder;
-import com.hippo.fresco.large.drawable.LargeDrawableFactory;
-import com.hippo.fresco.large.drawable.SubsamplingDrawableFactory;
 
 public class FrescoLargeConfig {
 
@@ -27,7 +25,6 @@
   private final Map<ImageFormat, ImageSizeDecoder> sizeDecoderMap;
   private final Map<ImageFormat, ImageRegionDecoderFactory> regionDecoderFactoryMap;
   private final Map<ImageFormat, ImageDecoder> imageDecoderMap;
-  private LargeDrawableFactory largeDrawableFactory;
   private final int thresholdWidth;
   private final int thresholdHeight;
 
@@ -37,7 +34,6 @@ public FrescoLargeConfig(Builder builder) {
     sizeDecoderMap = builder.sizeDecoderMap;
     regionDecoderFactoryMap = builder.regionDecoderFactoryMap;
     imageDecoderMap = builder.imageDecoderMap;
-    largeDrawableFactory = builder.largeDrawableFactory;
     thresholdWidth = builder.thresholdWidth;
     thresholdHeight = builder.thresholdHeight;
   }
@@ -62,13 +58,6 @@ public FrescoLargeConfig(Builder builder) {
     return imageDecoderMap;
   }
 
-  public LargeDrawableFactory getLargeDrawableFactory() {
-    if (largeDrawableFactory == null) {
-      largeDrawableFactory = new SubsamplingDrawableFactory();
-    }
-    return largeDrawableFactory;
-  }
-
   public int getThresholdWidth() {
     return thresholdWidth;
   }
@@ -87,7 +76,6 @@ public static Builder newBuilder() {
     private Map<ImageFormat, ImageSizeDecoder> sizeDecoderMap;
     private Map<ImageFormat, ImageRegionDecoderFactory> regionDecoderFactoryMap;
     private Map<ImageFormat, ImageDecoder> imageDecoderMap;
-    private LargeDrawableFactory largeDrawableFactory;
     private int thresholdWidth;
     private int thresholdHeight;
 
@@ -135,11 +123,6 @@ public static Builder newBuilder() {
       return this;
     }
 
-    public FrescoLargeConfig.Builder setLargeDrawableFactory(LargeDrawableFactory factory) {
-      largeDrawableFactory = factory;
-      return this;
-    }
-
     public FrescoLargeConfig.Builder setThresholdSize(int width, int height) {
       thresholdWidth = width;
       thresholdHeight = height;
diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/LargeDrawableFactory.java b/fresco-large/src/main/java/com/hippo/fresco/large/LargeDrawableFactory.java
new file mode 100644
index 000000000..2ade94f34
--- /dev/null
+++ b/fresco-large/src/main/java/com/hippo/fresco/large/LargeDrawableFactory.java
@@ -0,0 +1,98 @@
+package com.hippo.fresco.large;
+
+/*
+ * Created by Hippo on 5/30/2017.
+ */
+
+import javax.annotation.Nullable;
+
+import android.content.Context;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.util.Log;
+
+import com.facebook.drawee.backends.pipeline.DrawableFactory;
+import com.facebook.drawee.backends.pipeline.Fresco;
+import com.facebook.drawee.drawable.OrientedDrawable;
+import com.facebook.imagepipeline.animated.factory.AnimatedDrawableFactory;
+import com.facebook.imagepipeline.animated.factory.AnimatedFactory;
+import com.facebook.imagepipeline.image.CloseableImage;
+import com.facebook.imagepipeline.image.CloseableStaticBitmap;
+import com.facebook.imagepipeline.image.EncodedImage;
+
+import com.hippo.fresco.large.drawable.StandardizedTransformedDrawable;
+import com.hippo.fresco.large.drawable.Transformed;
+import com.hippo.fresco.large.drawable.TransformedDrawable;
+import com.hippo.fresco.large.drawable.SubsamplingDrawable;
+
+public class LargeDrawableFactory implements DrawableFactory {
+
+  private final Context context;
+
+  private boolean hasAnimatedDrawableFactory;
+  private AnimatedDrawableFactory animatedDrawableFactory;
+
+  public LargeDrawableFactory(Context context) {
+    this.context = context;
+  }
+
+  @Override
+  public final boolean supportsImageType(CloseableImage image) {
+    return true;
+  }
+
+  private AnimatedDrawableFactory getAnimatedDrawableFactory() {
+    if (!hasAnimatedDrawableFactory) {
+      hasAnimatedDrawableFactory = true;
+      AnimatedFactory factory = Fresco.getImagePipelineFactory().getAnimatedFactory();
+      if (factory != null) {
+        animatedDrawableFactory = factory.getAnimatedDrawableFactory(context);
+      }
+    }
+    return animatedDrawableFactory;
+  }
+
+  @Nullable
+  @Override
+  public final Drawable createDrawable(CloseableImage image) {
+    Drawable drawable = null;
+
+    if (image instanceof CloseableLargeImage) {
+      drawable = new SubsamplingDrawable(
+          ((CloseableLargeImage) image).getDecoder(),
+          Fresco.getImagePipelineFactory().getConfig().getExecutorSupplier().forDecode());
+    } else {
+      drawable = createNormalDrawable(image);
+      if (drawable != null) {
+        drawable = new TransformedDrawable(drawable);
+      }
+    }
+
+    if (drawable instanceof Transformed) {
+      drawable = new StandardizedTransformedDrawable(drawable);
+    }
+
+    return drawable;
+  }
+
+  private Drawable createNormalDrawable(CloseableImage image) {
+    if (image instanceof CloseableStaticBitmap) {
+      CloseableStaticBitmap closeableStaticBitmap = (CloseableStaticBitmap) image;
+      Drawable bitmapDrawable = new BitmapDrawable(
+          context.getResources(),
+          closeableStaticBitmap.getUnderlyingBitmap());
+      if (closeableStaticBitmap.getRotationAngle() == 0 ||
+          closeableStaticBitmap.getRotationAngle() == EncodedImage.UNKNOWN_ROTATION_ANGLE) {
+        return bitmapDrawable;
+      } else {
+        return new OrientedDrawable(bitmapDrawable, closeableStaticBitmap.getRotationAngle());
+      }
+    } else {
+      AnimatedDrawableFactory factory = getAnimatedDrawableFactory();
+      if (factory != null) {
+        return factory.create(image);
+      }
+    }
+    return null;
+  }
+}
diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/LargeDraweeView.java b/fresco-large/src/main/java/com/hippo/fresco/large/LargeDraweeView.java
index cdab022a4..c8540c878 100644
--- a/fresco-large/src/main/java/com/hippo/fresco/large/LargeDraweeView.java
+++ b/fresco-large/src/main/java/com/hippo/fresco/large/LargeDraweeView.java
@@ -4,22 +4,51 @@
  * Created by Hippo on 5/31/2017.
  */
 
+import javax.annotation.Nullable;
+
 import android.content.Context;
+import android.graphics.drawable.Animatable;
 import android.graphics.drawable.Drawable;
 import android.util.AttributeSet;
+import android.util.Log;
 import android.view.MotionEvent;
-
+import android.view.ViewParent;
+
+import com.facebook.drawee.controller.AbstractDraweeController;
+import com.facebook.drawee.controller.BaseControllerListener;
+import com.facebook.drawee.controller.ControllerListener;
+import com.facebook.drawee.drawable.ArrayDrawable;
+import com.facebook.drawee.drawable.DrawableParent;
+import com.facebook.drawee.drawable.ForwardingDrawable;
+import com.facebook.drawee.drawable.Scaled;
 import com.facebook.drawee.generic.GenericDraweeHierarchy;
 import com.facebook.drawee.interfaces.DraweeController;
 import com.facebook.drawee.view.SimpleDraweeView;
 
-import com.hippo.fresco.large.drawable.SubsamplingDrawable;
+import com.hippo.fresco.large.drawable.StandardizedTransformedDrawable;
 import com.hippo.fresco.large.gesture.GestureRecognizer;
 
 public class LargeDraweeView extends SimpleDraweeView implements GestureRecognizer.Listener {
 
   private GestureRecognizer gestureRecognizer;
 
+  private StandardizedTransformedDrawable transform;
+
+  private final ControllerListener controllerListener = new BaseControllerListener<Object>() {
+    @Override
+    public void onFinalImageSet(
+        String id,
+        @Nullable Object imageInfo,
+        @Nullable Animatable animatable) {
+      LargeDraweeView.this.onFinalImageSet();
+    }
+
+    @Override
+    public void onRelease(String id) {
+      LargeDraweeView.this.onRelease();
+    }
+  };
+
   public LargeDraweeView(Context context, GenericDraweeHierarchy hierarchy) {
     super(context, hierarchy);
     init(context);
@@ -52,23 +81,69 @@ private void init(Context context) {
   }
 
   @Override
-  public boolean onTouchEvent(MotionEvent event) {
-    super.onTouchEvent(event);
-    gestureRecognizer.onTouchEvent(event);
-    return true;
+  public void setController(@Nullable DraweeController draweeController) {
+    removeControllerListener(getController());
+    super.setController(draweeController);
+    addControllerListener(draweeController);
   }
 
-  private SubsamplingDrawable getSubsamplingDrawable() {
+  private void removeControllerListener(DraweeController controller) {
+    if (controller instanceof AbstractDraweeController) {
+      //noinspection unchecked
+      ((AbstractDraweeController) controller).removeControllerListener(controllerListener);
+    }
+  }
+
+  private void addControllerListener(DraweeController controller) {
+    if (controller instanceof AbstractDraweeController) {
+      //noinspection unchecked
+      ((AbstractDraweeController) controller).addControllerListener(controllerListener);
+    }
+  }
+
+
+  private Drawable getActualDrawable() {
     DraweeController controller = getController();
     if (controller != null) {
-      Drawable drawable = controller.getDrawable();
-      if (drawable instanceof SubsamplingDrawable) {
-        return (SubsamplingDrawable) drawable;
-      }
+      return controller.getDrawable();
     }
     return null;
   }
 
+  private void onFinalImageSet() {
+    final Drawable drawable = getActualDrawable();
+
+    // Auto start
+    Animatable animatable = getActiveAnimatable(drawable);
+    if (animatable != null) {
+      animatable.start();
+    }
+
+    if (drawable instanceof StandardizedTransformedDrawable) {
+      transform = (StandardizedTransformedDrawable) drawable;
+    } else {
+      transform = null;
+    }
+  }
+
+  private void onRelease() {
+    transform = null;
+  }
+
+  private void requestDisallowInterceptTouchEvent() {
+    ViewParent parent = getParent();
+    if (parent != null) {
+      parent.requestDisallowInterceptTouchEvent(true);
+    }
+  }
+
+  @Override
+  public boolean onTouchEvent(MotionEvent event) {
+    super.onTouchEvent(event);
+    gestureRecognizer.onTouchEvent(event);
+    return true;
+  }
+
   @Override
   public void onSingleTap(float x, float y) {
 
@@ -86,9 +161,10 @@ public void onLongPress(float x, float y) {
 
   @Override
   public void onScroll(float dx, float dy, float totalX, float totalY, float x, float y) {
-    SubsamplingDrawable drawable = getSubsamplingDrawable();
-    if (drawable != null) {
-      drawable.translate(dx, dy);
+    if (transform != null) {
+      if (transform.translate(dx, dy)) {
+        requestDisallowInterceptTouchEvent();
+      }
     }
   }
 
@@ -99,17 +175,33 @@ public void onFling(float velocityX, float velocityY) {
 
   @Override
   public void onScale(float factor, float x, float y) {
-    SubsamplingDrawable drawable = getSubsamplingDrawable();
-    if (drawable != null) {
-      drawable.scale(factor, factor, x, y);
-    }
+
   }
 
   @Override
-  public void onRotate(float angle, float x, float y) {
-    SubsamplingDrawable drawable = getSubsamplingDrawable();
-    if (drawable != null) {
-      drawable.rotate(angle, x, y);
+  public void onRotate(float angle, float x, float y) {}
+
+  @Nullable
+  private static Animatable getActiveAnimatable(Drawable drawable) {
+    if (drawable == null) {
+      return null;
+    } else if (drawable instanceof Animatable) {
+      return (Animatable) drawable;
+    } else if (drawable instanceof DrawableParent) {
+      final Drawable childDrawable = ((DrawableParent) drawable).getDrawable();
+      return getActiveAnimatable(childDrawable);
+    } else if (drawable instanceof ArrayDrawable) {
+      final ArrayDrawable fadeDrawable = (ArrayDrawable) drawable;
+      final int numLayers = fadeDrawable.getNumberOfLayers();
+
+      for (int i = 0; i < numLayers; i++) {
+        final Drawable childDrawable = fadeDrawable.getDrawable(i);
+        final Animatable result = getActiveAnimatable(childDrawable);
+        if (result != null) {
+          return result;
+        }
+      }
     }
+    return null;
   }
 }
diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/drawable/LargeDrawableFactory.java b/fresco-large/src/main/java/com/hippo/fresco/large/drawable/LargeDrawableFactory.java
deleted file mode 100644
index 3be1f23d6..000000000
--- a/fresco-large/src/main/java/com/hippo/fresco/large/drawable/LargeDrawableFactory.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package com.hippo.fresco.large.drawable;
-
-/*
- * Created by Hippo on 5/30/2017.
- */
-
-import javax.annotation.Nullable;
-
-import android.graphics.drawable.Drawable;
-
-import com.facebook.drawee.backends.pipeline.DrawableFactory;
-import com.facebook.imagepipeline.image.CloseableImage;
-
-import com.hippo.fresco.large.CloseableLargeImage;
-
-public abstract class LargeDrawableFactory implements DrawableFactory {
-
-  @Override
-  public final boolean supportsImageType(CloseableImage image) {
-    return image instanceof CloseableLargeImage;
-  }
-
-  @Nullable
-  @Override
-  public final Drawable createDrawable(CloseableImage image) {
-    return createLargeDrawable((CloseableLargeImage) image);
-  }
-
-  public abstract Drawable createLargeDrawable(CloseableLargeImage image);
-}
diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/drawable/StandardizedTransformedDrawable.java b/fresco-large/src/main/java/com/hippo/fresco/large/drawable/StandardizedTransformedDrawable.java
new file mode 100644
index 000000000..74176ead3
--- /dev/null
+++ b/fresco-large/src/main/java/com/hippo/fresco/large/drawable/StandardizedTransformedDrawable.java
@@ -0,0 +1,59 @@
+package com.hippo.fresco.large.drawable;
+
+/*
+ * Created by Hippo on 6/2/2017.
+ */
+
+import android.graphics.RectF;
+import android.graphics.drawable.Drawable;
+
+import com.facebook.drawee.drawable.ForwardingDrawable;
+
+public class StandardizedTransformedDrawable extends ForwardingDrawable {
+
+  private RectF rectF = new RectF();
+
+  public StandardizedTransformedDrawable(Drawable drawable) {
+    super(drawable);
+  }
+
+  public boolean translate(float dx, float dy) {
+    Transformed transformed = (Transformed) getDrawable();
+
+    rectF.set(0, 0, getIntrinsicWidth(), getIntrinsicHeight());
+    transformed.getMatrix().mapRect(rectF);
+
+    if (le(rectF.left, 0.0f) && dx > 0) {
+      dx = Math.min(dx, -rectF.left);
+    } else if (ge(rectF.right, getBounds().width()) && dx < 0) {
+      dx = Math.max(dx, getBounds().width() - rectF.right);
+    } else {
+      dx = 0.0f;
+    }
+
+    if (le(rectF.top, 0.0f) && dy > 0) {
+      dy = Math.min(dy, -rectF.top);
+    } else if (ge(rectF.bottom, getBounds().height()) && dy < 0) {
+      dy = Math.max(dy, getBounds().height() - rectF.bottom);
+    } else {
+      dy = 0.0f;
+    }
+
+    if (dx != 0.0f || dy != 0.0f) {
+      transformed.translate(dx, dy);
+      return true;
+    } else {
+      return false;
+    }
+  }
+
+  // Greater than or equal
+  private static boolean ge(float a, float b) {
+    return a >= b - 0.25f;
+  }
+
+  // less than or equal
+  private static boolean le(float a, float b) {
+    return a <= b + 0.25f;
+  }
+}
diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/drawable/SubsamplingDrawable.java b/fresco-large/src/main/java/com/hippo/fresco/large/drawable/SubsamplingDrawable.java
index 731a400d4..72111e2c3 100644
--- a/fresco-large/src/main/java/com/hippo/fresco/large/drawable/SubsamplingDrawable.java
+++ b/fresco-large/src/main/java/com/hippo/fresco/large/drawable/SubsamplingDrawable.java
@@ -31,7 +31,7 @@
 
 import com.hippo.fresco.large.decoder.ImageRegionDecoder;
 
-public class SubsamplingDrawable extends Drawable implements Scaled, DrawableWithCaches {
+public class SubsamplingDrawable extends Drawable implements Transformed, DrawableWithCaches {
 
   private static final boolean DEBUG = false;
 
@@ -100,6 +100,7 @@ public SubsamplingDrawable(CloseableReference<ImageRegionDecoder> decoderReferen
     }
   }
 
+  @Override
   public void translate(float dx, float dy) {
     matrix.postTranslate(dx, dy);
     matrixValueDirty = true;
@@ -107,6 +108,7 @@ public void translate(float dx, float dy) {
     invalidateSelf();
   }
 
+  @Override
   public void scale(float sx, float sy, float px, float py) {
     matrix.postScale(sx, sy, px, py);
     matrixValueDirty = true;
@@ -114,6 +116,7 @@ public void scale(float sx, float sy, float px, float py) {
     invalidateSelf();
   }
 
+  @Override
   public void rotate(float degrees, float px, float py) {
     matrix.postRotate(degrees, px, py);
     matrixValueDirty = true;
@@ -121,6 +124,11 @@ public void rotate(float degrees, float px, float py) {
     invalidateSelf();
   }
 
+  @Override
+  public Matrix getMatrix() {
+    return matrix;
+  }
+
   @Override
   public void setScaleType(ScalingUtils.ScaleType scaleType) {
     this.scaleType = scaleType;
diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/drawable/SubsamplingDrawableFactory.java b/fresco-large/src/main/java/com/hippo/fresco/large/drawable/SubsamplingDrawableFactory.java
deleted file mode 100644
index b3a774a76..000000000
--- a/fresco-large/src/main/java/com/hippo/fresco/large/drawable/SubsamplingDrawableFactory.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package com.hippo.fresco.large.drawable;
-
-/*
- * Created by Hippo on 5/30/2017.
- */
-
-import android.graphics.drawable.Drawable;
-
-import com.facebook.drawee.backends.pipeline.Fresco;
-
-import com.hippo.fresco.large.CloseableLargeImage;
-
-public class SubsamplingDrawableFactory extends LargeDrawableFactory {
-
-  @Override
-  public Drawable createLargeDrawable(CloseableLargeImage image) {
-    return new SubsamplingDrawable(image.getDecoder(),
-        Fresco.getImagePipelineFactory().getConfig().getExecutorSupplier().forDecode());
-  }
-}
diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/drawable/Transformed.java b/fresco-large/src/main/java/com/hippo/fresco/large/drawable/Transformed.java
new file mode 100644
index 000000000..1de4cb8b5
--- /dev/null
+++ b/fresco-large/src/main/java/com/hippo/fresco/large/drawable/Transformed.java
@@ -0,0 +1,20 @@
+package com.hippo.fresco.large.drawable;
+
+/*
+ * Created by Hippo on 6/2/2017.
+ */
+
+import android.graphics.Matrix;
+
+import com.facebook.drawee.drawable.Scaled;
+
+public interface Transformed extends Scaled {
+
+  Matrix getMatrix();
+
+  void translate(float dx, float dy);
+
+  void scale(float sx, float sy, float px, float py);
+
+  void rotate(float degrees, float px, float py);
+}
diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/drawable/TransformedDrawable.java b/fresco-large/src/main/java/com/hippo/fresco/large/drawable/TransformedDrawable.java
new file mode 100644
index 000000000..48fec4b99
--- /dev/null
+++ b/fresco-large/src/main/java/com/hippo/fresco/large/drawable/TransformedDrawable.java
@@ -0,0 +1,93 @@
+package com.hippo.fresco.large.drawable;
+
+/*
+ * Created by Hippo on 6/2/2017.
+ */
+
+import android.graphics.Canvas;
+import android.graphics.Matrix;
+import android.graphics.PointF;
+import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
+
+import com.facebook.drawable.base.DrawableWithCaches;
+import com.facebook.drawee.drawable.ForwardingDrawable;
+import com.facebook.drawee.drawable.ScalingUtils;
+
+public class TransformedDrawable extends ForwardingDrawable
+    implements Transformed, DrawableWithCaches {
+
+  private ScalingUtils.ScaleType scaleType = ScalingUtils.ScaleType.FIT_CENTER;
+  private PointF focusPoint;
+
+  private final Matrix matrix = new Matrix();
+
+  public TransformedDrawable(Drawable drawable) {
+    super(drawable);
+    drawable.setBounds(0, 0, getIntrinsicWidth(), getIntrinsicHeight());
+  }
+
+  @Override
+  public void translate(float dx, float dy) {
+    matrix.postTranslate(dx, dy);
+    invalidateSelf();
+  }
+
+  @Override
+  public void scale(float sx, float sy, float px, float py) {
+    matrix.postScale(sx, sy, px, py);
+    invalidateSelf();
+  }
+
+  @Override
+  public void rotate(float degrees, float px, float py) {
+    matrix.postRotate(degrees, px, py);
+    invalidateSelf();
+  }
+
+  @Override
+  public Matrix getMatrix() {
+    return matrix;
+  }
+
+  @Override
+  public void setScaleType(ScalingUtils.ScaleType scaleType) {
+    this.scaleType = scaleType;
+  }
+
+  @Override
+  public void setFocusPoint(PointF focusPoint) {
+    this.focusPoint = focusPoint;
+  }
+
+  @Override
+  public void applyScaleType() {
+    scaleType.getTransform(
+        matrix,
+        getBounds(),
+        getIntrinsicWidth(),
+        getIntrinsicHeight(),
+        (focusPoint != null) ? focusPoint.x : 0.5f,
+        (focusPoint != null) ? focusPoint.y : 0.5f);
+    invalidateSelf();
+  }
+
+  @Override
+  public void dropCaches() {
+    Drawable drawable = getCurrent();
+    if (drawable instanceof DrawableWithCaches) {
+      ((DrawableWithCaches) drawable).dropCaches();
+    }
+  }
+
+  @Override
+  protected void onBoundsChange(Rect bounds) {}
+
+  @Override
+  public void draw(Canvas canvas) {
+    int saved = canvas.save();
+    canvas.concat(matrix);
+    super.draw(canvas);
+    canvas.restoreToCount(saved);
+  }
+}
diff --git a/samples/large/src/main/java/com/hippo/fresco/large/demo/DemoApp.java b/samples/large/src/main/java/com/hippo/fresco/large/demo/DemoApp.java
index 86bad5f42..1935f8f83 100644
--- a/samples/large/src/main/java/com/hippo/fresco/large/demo/DemoApp.java
+++ b/samples/large/src/main/java/com/hippo/fresco/large/demo/DemoApp.java
@@ -31,7 +31,7 @@ public void onCreate() {
 
     ImageDecoderConfig.Builder decoderConfigBuilder = ImageDecoderConfig.newBuilder();
     DraweeConfig.Builder draweeConfigBuilder = DraweeConfig.newBuilder();
-    FrescoLarge.config(decoderConfigBuilder, draweeConfigBuilder, builder.build());
+    FrescoLarge.config(this, decoderConfigBuilder, draweeConfigBuilder, builder.build());
 
     ImagePipelineConfig imagePipelineConfig = ImagePipelineConfig
         .newBuilder(this)
