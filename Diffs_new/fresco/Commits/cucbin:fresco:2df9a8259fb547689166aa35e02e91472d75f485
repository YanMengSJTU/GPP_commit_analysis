diff --git a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerBuilder.java b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerBuilder.java
index 06157467b..2eb9fa3ea 100644
--- a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerBuilder.java
+++ b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerBuilder.java
@@ -15,6 +15,7 @@
 import com.facebook.common.references.CloseableReference;
 import com.facebook.datasource.DataSource;
 import com.facebook.drawee.backends.pipeline.info.ImageOriginListener;
+import com.facebook.drawee.backends.pipeline.info.ImageOriginRequestListener;
 import com.facebook.drawee.controller.AbstractDraweeControllerBuilder;
 import com.facebook.drawee.controller.ControllerListener;
 import com.facebook.drawee.interfaces.DraweeController;
@@ -24,6 +25,7 @@
 import com.facebook.imagepipeline.drawable.DrawableFactory;
 import com.facebook.imagepipeline.image.CloseableImage;
 import com.facebook.imagepipeline.image.ImageInfo;
+import com.facebook.imagepipeline.listener.RequestListener;
 import com.facebook.imagepipeline.request.ImageRequest;
 import com.facebook.imagepipeline.request.ImageRequestBuilder;
 import java.util.Set;
@@ -102,11 +104,12 @@ public PipelineDraweeControllerBuilder setImageOriginListener(
   protected PipelineDraweeController obtainController() {
     DraweeController oldController = getOldController();
     PipelineDraweeController controller;
+    final String controllerId = generateUniqueControllerId();
     if (oldController instanceof PipelineDraweeController) {
       controller = (PipelineDraweeController) oldController;
       controller.initialize(
-          obtainDataSourceSupplier(),
-          generateUniqueControllerId(),
+          obtainDataSourceSupplier(controllerId),
+          controllerId,
           getCacheKey(),
           getCallerContext(),
           mCustomDrawableFactories,
@@ -114,8 +117,8 @@ protected PipelineDraweeController obtainController() {
     } else {
       controller =
           mPipelineDraweeControllerFactory.newController(
-              obtainDataSourceSupplier(),
-              generateUniqueControllerId(),
+              obtainDataSourceSupplier(controllerId),
+              controllerId,
               getCacheKey(),
               getCallerContext(),
               mCustomDrawableFactories,
@@ -144,13 +147,23 @@ private CacheKey getCacheKey() {
 
   @Override
   protected DataSource<CloseableReference<CloseableImage>> getDataSourceForRequest(
+      String controllerId,
       ImageRequest imageRequest,
       Object callerContext,
       AbstractDraweeControllerBuilder.CacheLevel cacheLevel) {
     return mImagePipeline.fetchDecodedImage(
         imageRequest,
         callerContext,
-        convertCacheLevelToRequestLevel(cacheLevel));
+        convertCacheLevelToRequestLevel(cacheLevel),
+        createRequestListener(controllerId));
+  }
+
+  @Nullable
+  protected RequestListener createRequestListener(String controllerId) {
+    if (mImageOriginListener == null) {
+      return null;
+    }
+    return new ImageOriginRequestListener(controllerId, mImageOriginListener);
   }
 
   public static ImageRequest.RequestLevel convertCacheLevelToRequestLevel(
diff --git a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImageOriginRequestListener.java b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImageOriginRequestListener.java
new file mode 100644
index 000000000..99a6cd613
--- /dev/null
+++ b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImageOriginRequestListener.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (c) 2017-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ */
+package com.facebook.drawee.backends.pipeline.info;
+
+import com.facebook.imagepipeline.listener.BaseRequestListener;
+import javax.annotation.Nullable;
+
+/**
+ * Image origin request listener that maps all image requests for a given Drawee controller to an
+ * {@link ImageOrigin} and corresponding {@link ImageOriginListener}.
+ */
+public class ImageOriginRequestListener extends BaseRequestListener {
+
+  private final String mControllerId;
+  private final @Nullable ImageOriginListener mImageOriginLister;
+
+  public ImageOriginRequestListener(
+      String controllerId, @Nullable ImageOriginListener imageOriginLister) {
+    mControllerId = controllerId;
+    mImageOriginLister = imageOriginLister;
+  }
+
+  @Override
+  public void onUltimateProducerReached(String requestId, String producerName, boolean successful) {
+    if (mImageOriginLister != null) {
+      mImageOriginLister.onImageLoaded(
+          mControllerId, ImageOriginUtils.mapProducerNameToImageOrigin(producerName), successful);
+    }
+  }
+}
diff --git a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImageOriginUtils.java b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImageOriginUtils.java
new file mode 100644
index 000000000..95b4c5724
--- /dev/null
+++ b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImageOriginUtils.java
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2017-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ */
+package com.facebook.drawee.backends.pipeline.info;
+
+import com.facebook.imagepipeline.producers.BitmapMemoryCacheGetProducer;
+import com.facebook.imagepipeline.producers.BitmapMemoryCacheProducer;
+import com.facebook.imagepipeline.producers.DiskCacheReadProducer;
+import com.facebook.imagepipeline.producers.EncodedMemoryCacheProducer;
+import com.facebook.imagepipeline.producers.MediaVariationsFallbackProducer;
+import com.facebook.imagepipeline.producers.NetworkFetchProducer;
+
+public class ImageOriginUtils {
+
+  public static String toString(@ImageOrigin int imageOrigin) {
+    switch (imageOrigin) {
+      case ImageOrigin.NETWORK:
+        return "network";
+      case ImageOrigin.DISK:
+        return "disk";
+      case ImageOrigin.MEMORY_BITMAP:
+        return "memory_bitmap";
+      case ImageOrigin.MEMORY_ENCODED:
+        return "memory_encoded";
+      default:
+        return "unknown";
+    }
+  }
+
+  public static @ImageOrigin int mapProducerNameToImageOrigin(final String producerName) {
+    switch (producerName) {
+      case BitmapMemoryCacheGetProducer.PRODUCER_NAME:
+      case BitmapMemoryCacheProducer.PRODUCER_NAME:
+        return ImageOrigin.MEMORY_BITMAP;
+      case EncodedMemoryCacheProducer.PRODUCER_NAME:
+        return ImageOrigin.MEMORY_ENCODED;
+      case DiskCacheReadProducer.PRODUCER_NAME:
+        return ImageOrigin.DISK;
+      case MediaVariationsFallbackProducer.PRODUCER_NAME:
+        return ImageOrigin.MEMORY_BITMAP;
+      case NetworkFetchProducer.PRODUCER_NAME:
+        return ImageOrigin.NETWORK;
+      default:
+        return ImageOrigin.UNKNOWN;
+    }
+  }
+
+  private ImageOriginUtils() {}
+}
diff --git a/drawee-backends/drawee-volley/src/main/java/com/facebook/drawee/backends/volley/VolleyDraweeControllerBuilder.java b/drawee-backends/drawee-volley/src/main/java/com/facebook/drawee/backends/volley/VolleyDraweeControllerBuilder.java
index 2828aa97d..1a1a12925 100644
--- a/drawee-backends/drawee-volley/src/main/java/com/facebook/drawee/backends/volley/VolleyDraweeControllerBuilder.java
+++ b/drawee-backends/drawee-volley/src/main/java/com/facebook/drawee/backends/volley/VolleyDraweeControllerBuilder.java
@@ -45,23 +45,22 @@ public VolleyDraweeControllerBuilder(
   protected VolleyDraweeController obtainController() {
     DraweeController oldController = getOldController();
     VolleyDraweeController controller;
+    String controllerId = generateUniqueControllerId();
     if (oldController instanceof VolleyDraweeController) {
       controller = (VolleyDraweeController) oldController;
       controller.initialize(
-          obtainDataSourceSupplier(),
-          generateUniqueControllerId(),
-          getCallerContext());
+          obtainDataSourceSupplier(controllerId), controllerId, getCallerContext());
     } else {
-      controller = mVolleyDraweeControllerFactory.newController(
-          obtainDataSourceSupplier(),
-          generateUniqueControllerId(),
-          getCallerContext());
+      controller =
+          mVolleyDraweeControllerFactory.newController(
+              obtainDataSourceSupplier(controllerId), controllerId, getCallerContext());
     }
     return controller;
   }
 
   @Override
   protected DataSource<Bitmap> getDataSourceForRequest(
+      final String controllerId,
       final Uri imageRequest,
       final Object callerContext,
       final CacheLevel cacheLevel) {
diff --git a/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeControllerBuilder.java b/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeControllerBuilder.java
index 6875efa32..707b3ec05 100644
--- a/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeControllerBuilder.java
+++ b/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeControllerBuilder.java
@@ -321,7 +321,7 @@ protected static String generateUniqueControllerId() {
   }
 
   /** Gets the top-level data source supplier to be used by a controller. */
-  protected Supplier<DataSource<IMAGE>> obtainDataSourceSupplier() {
+  protected Supplier<DataSource<IMAGE>> obtainDataSourceSupplier(String controllerId) {
     if (mDataSourceSupplier != null) {
       return mDataSourceSupplier;
     }
@@ -330,16 +330,18 @@ protected static String generateUniqueControllerId() {
 
     // final image supplier;
     if (mImageRequest != null) {
-      supplier = getDataSourceSupplierForRequest(mImageRequest);
+      supplier = getDataSourceSupplierForRequest(controllerId, mImageRequest);
     } else if (mMultiImageRequests != null) {
-      supplier = getFirstAvailableDataSourceSupplier(mMultiImageRequests, mTryCacheOnlyFirst);
+      supplier =
+          getFirstAvailableDataSourceSupplier(
+              controllerId, mMultiImageRequests, mTryCacheOnlyFirst);
     }
 
     // increasing-quality supplier; highest-quality supplier goes first
     if (supplier != null && mLowResImageRequest != null) {
       List<Supplier<DataSource<IMAGE>>> suppliers = new ArrayList<>(2);
       suppliers.add(supplier);
-      suppliers.add(getDataSourceSupplierForRequest(mLowResImageRequest));
+      suppliers.add(getDataSourceSupplierForRequest(controllerId, mLowResImageRequest));
       supplier = IncreasingQualityDataSourceSupplier.create(suppliers);
     }
 
@@ -352,42 +354,41 @@ protected static String generateUniqueControllerId() {
   }
 
   protected Supplier<DataSource<IMAGE>> getFirstAvailableDataSourceSupplier(
-      REQUEST[] imageRequests,
-      boolean tryBitmapCacheOnlyFirst) {
+      String controllerId, REQUEST[] imageRequests, boolean tryBitmapCacheOnlyFirst) {
     List<Supplier<DataSource<IMAGE>>> suppliers = new ArrayList<>(imageRequests.length * 2);
     if (tryBitmapCacheOnlyFirst) {
       // we first add bitmap-cache-only suppliers, then the full-fetch ones
       for (int i = 0; i < imageRequests.length; i++) {
         suppliers.add(
-            getDataSourceSupplierForRequest(imageRequests[i], CacheLevel.BITMAP_MEMORY_CACHE));
+            getDataSourceSupplierForRequest(
+                controllerId, imageRequests[i], CacheLevel.BITMAP_MEMORY_CACHE));
       }
     }
     for (int i = 0; i < imageRequests.length; i++) {
-      suppliers.add(getDataSourceSupplierForRequest(imageRequests[i]));
+      suppliers.add(getDataSourceSupplierForRequest(controllerId, imageRequests[i]));
     }
     return FirstAvailableDataSourceSupplier.create(suppliers);
   }
 
   /** Creates a data source supplier for the given image request. */
-  protected Supplier<DataSource<IMAGE>> getDataSourceSupplierForRequest(REQUEST imageRequest) {
-    return getDataSourceSupplierForRequest(imageRequest, CacheLevel.FULL_FETCH);
+  protected Supplier<DataSource<IMAGE>> getDataSourceSupplierForRequest(
+      String controllerId, REQUEST imageRequest) {
+    return getDataSourceSupplierForRequest(controllerId, imageRequest, CacheLevel.FULL_FETCH);
   }
 
   /** Creates a data source supplier for the given image request. */
   protected Supplier<DataSource<IMAGE>> getDataSourceSupplierForRequest(
-      final REQUEST imageRequest,
-      final CacheLevel cacheLevel) {
+      final String controllerId, final REQUEST imageRequest, final CacheLevel cacheLevel) {
     final Object callerContext = getCallerContext();
     return new Supplier<DataSource<IMAGE>>() {
       @Override
       public DataSource<IMAGE> get() {
-        return getDataSourceForRequest(imageRequest, callerContext, cacheLevel);
+        return getDataSourceForRequest(controllerId, imageRequest, callerContext, cacheLevel);
       }
+
       @Override
       public String toString() {
-        return Objects.toStringHelper(this)
-            .add("request", imageRequest.toString())
-            .toString();
+        return Objects.toStringHelper(this).add("request", imageRequest.toString()).toString();
       }
     };
   }
@@ -436,15 +437,16 @@ protected Context getContext() {
   /**
    * Concrete builder classes should override this method to return a data source for the request.
    *
-   * <p/>IMPORTANT: Do NOT ever call this method directly. This method is only to be called from
-   * a supplier created in {#code getDataSourceSupplierForRequest(REQUEST, boolean)}.
+   * <p>IMPORTANT: Do NOT ever call this method directly. This method is only to be called from a
+   * supplier created in {#code getDataSourceSupplierForRequest(REQUEST, boolean)}.
    *
-   * <p/>IMPORTANT: Make sure that you do NOT use any non-final field from this method, as the field
+   * <p>IMPORTANT: Make sure that you do NOT use any non-final field from this method, as the field
    * may change if the instance of this builder gets reused. If any such field is required, override
    * {#code getDataSourceSupplierForRequest(REQUEST, boolean)}, and store the field in a final
    * variable (same as it is done for callerContext).
    */
   protected abstract DataSource<IMAGE> getDataSourceForRequest(
+      final String controllerId,
       final REQUEST imageRequest,
       final Object callerContext,
       final CacheLevel cacheLevel);
diff --git a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imagepipeline/ImagePipelinePrefetchFragment.java b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imagepipeline/ImagePipelinePrefetchFragment.java
index 602eb208d..18d473c7a 100644
--- a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imagepipeline/ImagePipelinePrefetchFragment.java
+++ b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imagepipeline/ImagePipelinePrefetchFragment.java
@@ -13,6 +13,7 @@
 
 import android.net.Uri;
 import android.os.Bundle;
+import android.os.Handler;
 import android.support.annotation.Nullable;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -26,6 +27,7 @@
 import com.facebook.drawee.backends.pipeline.Fresco;
 import com.facebook.drawee.backends.pipeline.info.ImageOrigin;
 import com.facebook.drawee.backends.pipeline.info.ImageOriginListener;
+import com.facebook.drawee.backends.pipeline.info.ImageOriginUtils;
 import com.facebook.drawee.view.SimpleDraweeView;
 import com.facebook.fresco.samples.showcase.BaseShowcaseFragment;
 import com.facebook.fresco.samples.showcase.R;
@@ -46,22 +48,31 @@
   private Button mPrefetchButton;
   private TextView mPrefetchStatus;
   private ViewGroup mDraweesHolder;
+  private final Handler mHandler = new Handler();
 
   private final ImageOriginListener mImageOriginListener =
       new ImageOriginListener() {
         @Override
         public void onImageLoaded(
-            String controllerId, @ImageOrigin int imageOrigin, boolean successful) {
-          Toast.makeText(
-                  getContext(),
-                  String.format(
-                      (Locale) null,
-                      "Image loaded: controllerId=%s, origin=%s, successful=%b",
-                      controllerId,
-                      imageOrigin,
-                      successful),
-                  Toast.LENGTH_SHORT)
-              .show();
+            final String controllerId,
+            final @ImageOrigin int imageOrigin,
+            final boolean successful) {
+          mHandler.post(
+              new Runnable() {
+                @Override
+                public void run() {
+                  Toast.makeText(
+                          getContext(),
+                          String.format(
+                              (Locale) null,
+                              "Image loaded: controllerId=%s, origin=%s, successful=%b",
+                              controllerId,
+                              ImageOriginUtils.toString(imageOrigin),
+                              successful),
+                          Toast.LENGTH_SHORT)
+                      .show();
+                }
+              });
         }
       };
 
