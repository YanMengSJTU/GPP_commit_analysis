diff --git a/animated-base/src/main/java/com/facebook/fresco/animation/factory/ExperimentalBitmapAnimationDrawableFactory.java b/animated-base/src/main/java/com/facebook/fresco/animation/factory/ExperimentalBitmapAnimationDrawableFactory.java
index 5bcac3650..a65450cf8 100644
--- a/animated-base/src/main/java/com/facebook/fresco/animation/factory/ExperimentalBitmapAnimationDrawableFactory.java
+++ b/animated-base/src/main/java/com/facebook/fresco/animation/factory/ExperimentalBitmapAnimationDrawableFactory.java
@@ -100,7 +100,7 @@ private AnimationBackend createAnimationBackend(AnimatedImageResult animatedImag
     BitmapFrameRenderer bitmapFrameRenderer =
         new AnimatedDrawableBackendFrameRenderer(bitmapFrameCache, animatedDrawableBackend);
 
-    int numberOfFramesToPrefetch = mNumberOfFramesToPrepareSupplier.get();
+    int numberOfFramesToPrefetch = mNumberOfFramesToPrepareSupplier.get(); // 预加载的帧数
     BitmapFramePreparationStrategy bitmapFramePreparationStrategy = null;
     BitmapFramePreparer bitmapFramePreparer = null;
     if (numberOfFramesToPrefetch > 0) {
diff --git a/animated-base/src/main/java/com/facebook/imagepipeline/animated/impl/AnimatedDrawableBackendImpl.java b/animated-base/src/main/java/com/facebook/imagepipeline/animated/impl/AnimatedDrawableBackendImpl.java
index 54625b258..856df3bef 100644
--- a/animated-base/src/main/java/com/facebook/imagepipeline/animated/impl/AnimatedDrawableBackendImpl.java
+++ b/animated-base/src/main/java/com/facebook/imagepipeline/animated/impl/AnimatedDrawableBackendImpl.java
@@ -234,7 +234,7 @@ private void renderImageDoesNotSupportScaling(Canvas canvas, AnimatedImageFrame
       mRenderDstRect.set(0, 0, frameWidth, frameHeight);
 
       canvas.save();
-      canvas.translate(xOffset, yOffset);
+      canvas.translate(xOffset, yOffset); // 把GIF帧绘制到指定位置上去
       canvas.drawBitmap(mTempBitmap, mRenderSrcRect, mRenderDstRect, null);
       canvas.restore();
     }
diff --git a/animated-base/src/main/java/com/facebook/imagepipeline/animated/impl/AnimatedImageCompositor.java b/animated-base/src/main/java/com/facebook/imagepipeline/animated/impl/AnimatedImageCompositor.java
index cd00a53ba..7bf0930be 100644
--- a/animated-base/src/main/java/com/facebook/imagepipeline/animated/impl/AnimatedImageCompositor.java
+++ b/animated-base/src/main/java/com/facebook/imagepipeline/animated/impl/AnimatedImageCompositor.java
@@ -57,7 +57,7 @@
     CloseableReference<Bitmap> getCachedBitmap(int frameNumber);
   }
 
-  private final AnimatedDrawableBackend mAnimatedDrawableBackend;
+  private final AnimatedDrawableBackend mAnimatedDrawableBackend; // 负责具体某帧的绘制
   private final Callback mCallback;
   private final Paint mTransparentFillPaint;
 
@@ -69,18 +69,18 @@ public AnimatedImageCompositor(
     mTransparentFillPaint = new Paint();
     mTransparentFillPaint.setColor(Color.TRANSPARENT);
     mTransparentFillPaint.setStyle(Paint.Style.FILL);
-    mTransparentFillPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC));
+    mTransparentFillPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC));// 保留src图，即用透明去替换指定区域
   }
 
   /**
    * Renders the specified frame. Only should be called on the rendering thread.
-   *
+   * 生成动图的一张完整帧，这里会处理各种Dispose Method和blendOperation
    * @param frameNumber the frame to render
    * @param bitmap the bitmap to render into
    */
   public void renderFrame(int frameNumber, Bitmap bitmap) {
     Canvas canvas = new Canvas(bitmap);
-    canvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.SRC);
+    canvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.SRC); // 清空Bitmap
 
     // If blending is required, prepare the canvas with the nearest cached frame.
     int nextIndex;
@@ -105,13 +105,13 @@ public void renderFrame(int frameNumber, Bitmap bitmap) {
       }
       mAnimatedDrawableBackend.renderFrame(index, canvas);
       mCallback.onIntermediateResult(index, bitmap);
-      if (disposalMethod == DisposalMethod.DISPOSE_TO_BACKGROUND) {
+      if (disposalMethod == DisposalMethod.DISPOSE_TO_BACKGROUND) { //todo 这里为什么在renderFrame之后做呀???
         disposeToBackground(canvas, frameInfo);
       }
     }
 
     AnimatedDrawableFrameInfo frameInfo = mAnimatedDrawableBackend.getFrameInfo(frameNumber);
-    if (frameInfo.blendOperation == BlendOperation.NO_BLEND) {
+    if (frameInfo.blendOperation == BlendOperation.NO_BLEND) { // 默认的绘制会进行像素混合，但是这里frameNumber帧不需要进行混合，那就需要把覆盖区域清除掉
       disposeToBackground(canvas, frameInfo);
     }
     // Finally, we render the current frame. We don't dispose it.
@@ -156,7 +156,7 @@ private int prepareCanvasWithClosestCachedFrame(int previousFrameNumber, Canvas
             try {
               canvas.drawBitmap(startBitmap.get(), 0, 0, null);
               if (frameInfo.disposalMethod == DisposalMethod.DISPOSE_TO_BACKGROUND) {
-                disposeToBackground(canvas, frameInfo);
+                disposeToBackground(canvas, frameInfo); // 擦掉index帧覆盖的部分
               }
               return index + 1;
             } finally {
@@ -171,7 +171,7 @@ private int prepareCanvasWithClosestCachedFrame(int previousFrameNumber, Canvas
             }
           }
         case NOT_REQUIRED:
-          return index + 1;
+          return index + 1; // index帧不需要，那就从下一帧（index + 1）开始
         case ABORT:
           return index;
         case SKIP:
@@ -227,7 +227,7 @@ private boolean isKeyFrame(int index) {
     }
     AnimatedDrawableFrameInfo currFrameInfo = mAnimatedDrawableBackend.getFrameInfo(index);
     AnimatedDrawableFrameInfo prevFrameInfo = mAnimatedDrawableBackend.getFrameInfo(index - 1);
-    if (currFrameInfo.blendOperation == BlendOperation.NO_BLEND && isFullFrame(currFrameInfo)) {
+    if (currFrameInfo.blendOperation == BlendOperation.NO_BLEND && isFullFrame(currFrameInfo)) { // 当前帧是完整帧，并且当前帧的透明像素不需要跟前面的帧进行混合，即透明像素也会覆盖前面的像素
       return true;
     } else
       return prevFrameInfo.disposalMethod == DisposalMethod.DISPOSE_TO_BACKGROUND
diff --git a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeController.java b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeController.java
index 39ae8ff81..ff5ee354e 100644
--- a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeController.java
+++ b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeController.java
@@ -329,7 +329,7 @@ private void maybeUpdateDebugOverlay(@Nullable CloseableImage image) {
     if (mImageOriginListener == null) {
       addImageOriginListener(mDebugOverlayImageOriginListener);
     }
-
+    // Debug Overlay Drawable Debug信息
     if (getControllerOverlay() instanceof DebugControllerOverlayDrawable) {
       DebugControllerOverlayDrawable debugOverlay =
           (DebugControllerOverlayDrawable) getControllerOverlay();
@@ -377,7 +377,7 @@ protected void releaseDrawable(@Nullable Drawable drawable) {
   }
 
   @Override
-  protected CloseableReference<CloseableImage> getCachedImage() {
+  protected CloseableReference<CloseableImage> getCachedImage() { // 尝试从内存获取解码后的CloseableImage
     if (FrescoSystrace.isTracing()) {
       FrescoSystrace.beginSection("PipelineDraweeController#getCachedImage");
     }
diff --git a/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java b/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java
index 554a476ee..ff6bf7caf 100644
--- a/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java
+++ b/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java
@@ -453,7 +453,7 @@ protected void submitRequest() {
     if (FrescoSystrace.isTracing()) {
       FrescoSystrace.beginSection("AbstractDraweeController#submitRequest");
     }
-    final T closeableImage = getCachedImage();
+    final T closeableImage = getCachedImage(); // 尝试从内存获取解码后的closeableImage
     if (closeableImage != null) {
       if (FrescoSystrace.isTracing()) {
         FrescoSystrace.beginSection("AbstractDraweeController#submitRequest->cache");
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipeline.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipeline.java
index 4bcdfa846..02a8978ad 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipeline.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipeline.java
@@ -688,9 +688,9 @@ public CacheKey getCacheKey(ImageRequest imageRequest, Object callerContext) {
               /* isPrefetch */ false,
               imageRequest.getProgressiveRenderingEnabled()
                   || !UriUtil.isNetworkUri(imageRequest.getSourceUri()),
-              imageRequest.getPriority());
+              imageRequest.getPriority()); // Producer中的ProducerContext
       return CloseableProducerToDataSourceAdapter.create(
-          producerSequence, settableProducerContext, finalRequestListener);
+          producerSequence, settableProducerContext, finalRequestListener); // 创建DataSource
     } catch (Exception exception) {
       return DataSources.immediateFailedDataSource(exception);
     } finally {
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerSequenceFactory.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerSequenceFactory.java
index e9ce3e990..092eb7f88 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerSequenceFactory.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerSequenceFactory.java
@@ -705,7 +705,7 @@ private static void validateEncodedImageRequest(ImageRequest imageRequest) {
         (!mWebpSupportEnabled || WebpSupportStatus.sWebpBitmapFactory == null)) {
       inputProducer = mProducerFactory.newWebpTranscodeProducer(inputProducer);
     }
-    if (mDiskCacheEnabled) {
+    if (mDiskCacheEnabled) { // 磁盘缓存
       inputProducer = newDiskCacheSequence(inputProducer);
     }
     EncodedMemoryCacheProducer encodedMemoryCacheProducer =
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/datasource/AbstractProducerToDataSourceAdapter.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/datasource/AbstractProducerToDataSourceAdapter.java
index 596b136b6..19873abb8 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/datasource/AbstractProducerToDataSourceAdapter.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/datasource/AbstractProducerToDataSourceAdapter.java
@@ -55,7 +55,7 @@ protected AbstractProducerToDataSourceAdapter(
     if (FrescoSystrace.isTracing()) {
       FrescoSystrace.beginSection("AbstractProducerToDataSourceAdapter()->produceResult");
     }
-    producer.produceResults(createConsumer(), settableProducerContext);
+    producer.produceResults(createConsumer(), settableProducerContext); //此时就触发生产啦？
     if (FrescoSystrace.isTracing()) {
       FrescoSystrace.endSection();
     }
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/datasource/CloseableProducerToDataSourceAdapter.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/datasource/CloseableProducerToDataSourceAdapter.java
index 9596ba877..b84b7013a 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/datasource/CloseableProducerToDataSourceAdapter.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/datasource/CloseableProducerToDataSourceAdapter.java
@@ -33,7 +33,7 @@
       FrescoSystrace.beginSection("CloseableProducerToDataSourceAdapter#create");
     }
     CloseableProducerToDataSourceAdapter<T> result =
-        new CloseableProducerToDataSourceAdapter<T>(producer, settableProducerContext, listener);
+        new CloseableProducerToDataSourceAdapter<T>(producer, settableProducerContext, listener); // 基于Producer创建DataSource
     if (FrescoSystrace.isTracing()) {
       FrescoSystrace.endSection();
     }
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/WebpTranscodeProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/WebpTranscodeProducer.java
index 17f44b84f..7ba6a9880 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/WebpTranscodeProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/WebpTranscodeProducer.java
@@ -73,7 +73,7 @@ protected void onNewResultImpl(@Nullable EncodedImage newResult, @Status int sta
         mShouldTranscodeWhenFinished = shouldTranscode(newResult);
       }
 
-      // just propagate result if it shouldn't be transformed
+      // just propagate result if it shouldn't be transformed 如果不需要转码，则直接传给当前Producer的Consumer
       if (mShouldTranscodeWhenFinished == TriState.NO) {
         getConsumer().onNewResult(newResult, status);
         return;
@@ -81,7 +81,7 @@ protected void onNewResultImpl(@Nullable EncodedImage newResult, @Status int sta
 
       if (isLast(status)) {
         if (mShouldTranscodeWhenFinished == TriState.YES && newResult != null) {
-          transcodeLastResult(newResult, getConsumer(), mContext);
+          transcodeLastResult(newResult, getConsumer(), mContext); // 转码后，交给当前Producer的Consumer
         } else {
           getConsumer().onNewResult(newResult, status);
         }
@@ -103,13 +103,13 @@ private void transcodeLastResult(
             producerContext.getId()) {
           @Override
           protected EncodedImage getResult() throws Exception {
-            PooledByteBufferOutputStream outputStream = mPooledByteBufferFactory.newOutputStream();
+            PooledByteBufferOutputStream outputStream = mPooledByteBufferFactory.newOutputStream();// 转码之后的字节数组
             try {
               doTranscode(encodedImageCopy, outputStream);
               CloseableReference<PooledByteBuffer> ref =
                   CloseableReference.of(outputStream.toByteBuffer());
               try {
-                EncodedImage encodedImage = new EncodedImage(ref);
+                EncodedImage encodedImage = new EncodedImage(ref); // todo 把webp转码成jpg或者png后，生成新的EncodedImage，但是这里元数据为什么还是使用之前webp的？？？
                 encodedImage.copyMetaDataFrom(encodedImageCopy);
                 return encodedImage;
               } finally {
@@ -172,14 +172,14 @@ private static void doTranscode(
     InputStream imageInputStream = encodedImage.getInputStream();
     ImageFormat imageFormat = ImageFormatChecker.getImageFormat_WrapIOException(imageInputStream);
     if (imageFormat == DefaultImageFormats.WEBP_SIMPLE ||
-        imageFormat == DefaultImageFormats.WEBP_EXTENDED) {
+        imageFormat == DefaultImageFormats.WEBP_EXTENDED) { // 有损发webp转码成jpeg
         WebpTranscoderFactory.getWebpTranscoder().transcodeWebpToJpeg(
             imageInputStream,
             outputStream,
             DEFAULT_JPEG_QUALITY);
       encodedImage.setImageFormat(DefaultImageFormats.JPEG);
     } else if (imageFormat == DefaultImageFormats.WEBP_LOSSLESS ||
-        imageFormat == DefaultImageFormats.WEBP_EXTENDED_WITH_ALPHA) {
+        imageFormat == DefaultImageFormats.WEBP_EXTENDED_WITH_ALPHA) { // 无损或者带透明度的webp转码成png
       // In this case we always transcode to PNG
       WebpTranscoderFactory.getWebpTranscoder()
           .transcodeWebpToPng(imageInputStream, outputStream);
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java
index 3579fefbf..a69d4454c 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java
@@ -304,7 +304,7 @@ public static RequestLevel getMax(RequestLevel requestLevel1, RequestLevel reque
 
   /**
    * This is a utility method which returns the type of Uri
-   * @param uri The Uri to test
+   * @param uri The Uri to test 判断Uri的类型
    * @return The type of the given Uri if available or SOURCE_TYPE_UNKNOWN if not
    */
   private static @SourceUriType int getSourceUriType(final Uri uri) {
diff --git a/static-webp/src/main/jni/static-webp/WebpTranscoder.cpp b/static-webp/src/main/jni/static-webp/WebpTranscoder.cpp
index b022b71b9..181618f0f 100644
--- a/static-webp/src/main/jni/static-webp/WebpTranscoder.cpp
+++ b/static-webp/src/main/jni/static-webp/WebpTranscoder.cpp
@@ -28,9 +28,9 @@ static void WebpTranscoder_transcodeToJpeg(
     jobject is,
     jobject os,
     jint quality) {
-  auto decodedImagePtr = decodeWebpFromInputStream(env, is, PixelFormat::RGB);
+  auto decodedImagePtr = decodeWebpFromInputStream(env, is, PixelFormat::RGB);// 1.先对webp进行解码成RGB
   RETURN_IF_EXCEPTION_PENDING;
-  encodeJpegIntoOutputStream(env, *decodedImagePtr, os, quality);
+  encodeJpegIntoOutputStream(env, *decodedImagePtr, os, quality);// 2.再对RGB数据，编码成jpeg
 }
 
 static void WebpTranscoder_transcodeToPng(
@@ -39,9 +39,9 @@ static void WebpTranscoder_transcodeToPng(
     jobject is,
     jobject os) {
   using namespace facebook::imagepipeline;
-  auto decodedImagePtr = decodeWebpFromInputStream(env, is, PixelFormat::RGBA);
+  auto decodedImagePtr = decodeWebpFromInputStream(env, is, PixelFormat::RGBA);// 1.先对webp进行解码成RGBA
   RETURN_IF_EXCEPTION_PENDING;
-  encodePngIntoOutputStream(env, *decodedImagePtr, os);
+  encodePngIntoOutputStream(env, *decodedImagePtr, os);// 2.再对RGBA数据，编码成png
 }
 
 static JNINativeMethod gWebpTranscoderMethods[] = {
