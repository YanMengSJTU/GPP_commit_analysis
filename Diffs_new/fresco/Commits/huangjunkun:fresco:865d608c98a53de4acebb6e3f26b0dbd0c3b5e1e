diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DecodeProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DecodeProducer.java
index 2fd66666a..ce860e5b3 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DecodeProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DecodeProducer.java
@@ -122,6 +122,9 @@ public void run(EncodedImage encodedImage, boolean isLast) {
               ImageRequest request = producerContext.getImageRequest();
               if (mDownsampleEnabledForNetwork ||
                   !UriUtil.isNetworkUri(request.getSourceUri())) {
+                if (!EncodedImage.isMetaDataAvailable(encodedImage)) {
+                  encodedImage.parseMetaData();
+                }
                 encodedImage.setSampleSize(DownsampleUtil.determineSampleSize(
                     request, encodedImage));
               }
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalFetchProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalFetchProducer.java
index 2ccb13fd0..db416de54 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalFetchProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalFetchProducer.java
@@ -105,20 +105,35 @@ protected EncodedImage getByteBufferBackedEncodedImage(
     }
   }
 
-  protected EncodedImage getEncodedImage(
-      InputStream inputStream,
-      int length) throws IOException {
-    Runtime runTime = Runtime.getRuntime();
-    long javaMax = runTime.maxMemory();
-    long javaUsed = runTime.totalMemory() - runTime.freeMemory();
-    long javaFree = Math.min(javaMax - javaUsed, 8 * ByteConstants.MB);
-    if (mDecodeFileDescriptorEnabledForKitKat && inputStream instanceof FileInputStream &&
-        javaMax >= 64 * javaFree) {
-      return getInputStreamBackedEncodedImage(new File(inputStream.toString()), length);
-    } else {
-      return getByteBufferBackedEncodedImage(inputStream, length);
+    private boolean isMemoryEnough() {
+        Runtime runTime = Runtime.getRuntime();
+        long javaMax = runTime.maxMemory();
+        long javaUsed = runTime.totalMemory() - runTime.freeMemory();
+        long javaFree = Math.min(javaMax - javaUsed, 8 * ByteConstants.MB);
+        return (javaMax >= 64 * javaFree);
+    }
+
+    protected EncodedImage getEncodedImage(
+            File file,
+            InputStream inputStream,
+            int length) throws IOException {
+        if (mDecodeFileDescriptorEnabledForKitKat && inputStream instanceof FileInputStream &&
+                isMemoryEnough()) {
+            if (file == null) {
+                file = new File(inputStream.toString());
+            }
+            //TODO: https://github.com/facebook/fresco/issues/1091
+            return getInputStreamBackedEncodedImage(file, length);
+        } else {
+            return getByteBufferBackedEncodedImage(inputStream, length);
+        }
+    }
+
+    protected EncodedImage getEncodedImage(
+            InputStream inputStream,
+            int length) throws IOException {
+        return getEncodedImage(null, inputStream, length);
     }
-  }
 
   protected EncodedImage getInputStreamBackedEncodedImage(
       final File file,
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalFileFetchProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalFileFetchProducer.java
index 4ec65bb39..910c4d76f 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalFileFetchProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalFileFetchProducer.java
@@ -9,6 +9,7 @@
 
 package com.facebook.imagepipeline.producers;
 
+import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.util.concurrent.Executor;
@@ -33,9 +34,9 @@ public LocalFileFetchProducer(
 
   @Override
   protected EncodedImage getEncodedImage(final ImageRequest imageRequest) throws IOException {
-    return getEncodedImage(
-        new FileInputStream(imageRequest.getSourceFile().toString()),
-        (int) imageRequest.getSourceFile().length());
+      File sourceFile = imageRequest.getSourceFile();
+      return getEncodedImage(sourceFile,
+              new FileInputStream(imageRequest.getSourceFile().getPath()), (int) sourceFile.length());
   }
 
   @Override
