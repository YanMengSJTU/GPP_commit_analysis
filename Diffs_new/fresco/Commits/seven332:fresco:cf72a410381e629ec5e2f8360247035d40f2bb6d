diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/LargeDraweeView.java b/fresco-large/src/main/java/com/hippo/fresco/large/LargeDraweeView.java
index c8540c878..2509217d7 100644
--- a/fresco-large/src/main/java/com/hippo/fresco/large/LargeDraweeView.java
+++ b/fresco-large/src/main/java/com/hippo/fresco/large/LargeDraweeView.java
@@ -10,7 +10,6 @@
 import android.graphics.drawable.Animatable;
 import android.graphics.drawable.Drawable;
 import android.util.AttributeSet;
-import android.util.Log;
 import android.view.MotionEvent;
 import android.view.ViewParent;
 
@@ -19,8 +18,6 @@
 import com.facebook.drawee.controller.ControllerListener;
 import com.facebook.drawee.drawable.ArrayDrawable;
 import com.facebook.drawee.drawable.DrawableParent;
-import com.facebook.drawee.drawable.ForwardingDrawable;
-import com.facebook.drawee.drawable.Scaled;
 import com.facebook.drawee.generic.GenericDraweeHierarchy;
 import com.facebook.drawee.interfaces.DraweeController;
 import com.facebook.drawee.view.SimpleDraweeView;
@@ -175,11 +172,21 @@ public void onFling(float velocityX, float velocityY) {
 
   @Override
   public void onScale(float factor, float x, float y) {
-
+    if (transform != null) {
+      if (transform.scale(factor, x, y)) {
+        requestDisallowInterceptTouchEvent();
+      }
+    }
   }
 
   @Override
-  public void onRotate(float angle, float x, float y) {}
+  public void onRotate(float angle, float x, float y) {
+    if (transform != null) {
+      if (transform.rotate(angle, x, y)) {
+        requestDisallowInterceptTouchEvent();
+      }
+    }
+  }
 
   @Nullable
   private static Animatable getActiveAnimatable(Drawable drawable) {
diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/drawable/StandardizedTransformedDrawable.java b/fresco-large/src/main/java/com/hippo/fresco/large/drawable/StandardizedTransformedDrawable.java
index 74176ead3..6f1a4ce02 100644
--- a/fresco-large/src/main/java/com/hippo/fresco/large/drawable/StandardizedTransformedDrawable.java
+++ b/fresco-large/src/main/java/com/hippo/fresco/large/drawable/StandardizedTransformedDrawable.java
@@ -4,6 +4,12 @@
  * Created by Hippo on 6/2/2017.
  */
 
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import android.graphics.Matrix;
+import android.graphics.Rect;
 import android.graphics.RectF;
 import android.graphics.drawable.Drawable;
 
@@ -11,30 +17,77 @@
 
 public class StandardizedTransformedDrawable extends ForwardingDrawable {
 
-  private RectF rectF = new RectF();
+  private RectF rect = new RectF();
+  private float[] matrixValue = new float[9];
+
+  private float widthScale;
+  private float heightScale;
+  private float fitScale;
+  private float minScale;
+  private float maxScale;
+  private float[] scaleLevels;
 
   public StandardizedTransformedDrawable(Drawable drawable) {
     super(drawable);
   }
 
+  @Override
+  protected void onBoundsChange(Rect bounds) {
+    super.onBoundsChange(bounds);
+    updateScales();
+  }
+
+  private void updateScales() {
+    Transformed transformed = (Transformed) getDrawable();
+    rect.set(0, 0, getIntrinsicWidth(), getIntrinsicHeight());
+    transformed.getMatrix().mapRect(rect);
+
+    widthScale = (float) getBounds().width() / rect.width();
+    heightScale = (float) getBounds().height() / rect.height();
+    fitScale = Math.min(widthScale, heightScale);
+    scaleLevels = mergeScaleLevels(widthScale, heightScale, 1.0f, 3.0f);
+    minScale = scaleLevels[0];
+    maxScale = scaleLevels[scaleLevels.length - 1];
+  }
+
+  private float[] mergeScaleLevels(float... scales) {
+    Arrays.sort(scales);
+
+    List<Float> scaleLevels = new ArrayList<>();
+    float lastScale = Float.NaN;
+
+    for (float scale : scales) {
+      if (Float.isNaN(lastScale) || !eq(scale, lastScale)) {
+        scaleLevels.add(scale);
+      }
+      lastScale = scale;
+    }
+
+    float[] result = new float[scaleLevels.size()];
+    for (int i = 0, n = scaleLevels.size(); i < n; ++i) {
+      result[i] = scaleLevels.get(i);
+    }
+    return result;
+  }
+
   public boolean translate(float dx, float dy) {
     Transformed transformed = (Transformed) getDrawable();
 
-    rectF.set(0, 0, getIntrinsicWidth(), getIntrinsicHeight());
-    transformed.getMatrix().mapRect(rectF);
+    rect.set(0, 0, getIntrinsicWidth(), getIntrinsicHeight());
+    transformed.getMatrix().mapRect(rect);
 
-    if (le(rectF.left, 0.0f) && dx > 0) {
-      dx = Math.min(dx, -rectF.left);
-    } else if (ge(rectF.right, getBounds().width()) && dx < 0) {
-      dx = Math.max(dx, getBounds().width() - rectF.right);
+    if (le(rect.left, 0.0f) && dx > 0) {
+      dx = Math.min(dx, -rect.left);
+    } else if (ge(rect.right, getBounds().width()) && dx < 0) {
+      dx = Math.max(dx, getBounds().width() - rect.right);
     } else {
       dx = 0.0f;
     }
 
-    if (le(rectF.top, 0.0f) && dy > 0) {
-      dy = Math.min(dy, -rectF.top);
-    } else if (ge(rectF.bottom, getBounds().height()) && dy < 0) {
-      dy = Math.max(dy, getBounds().height() - rectF.bottom);
+    if (le(rect.top, 0.0f) && dy > 0) {
+      dy = Math.min(dy, -rect.top);
+    } else if (ge(rect.bottom, getBounds().height()) && dy < 0) {
+      dy = Math.max(dy, getBounds().height() - rect.bottom);
     } else {
       dy = 0.0f;
     }
@@ -47,13 +100,92 @@ public boolean translate(float dx, float dy) {
     }
   }
 
+  // Make the image in center
+  private void fixPosition() {
+    Transformed transformed = (Transformed) getDrawable();
+
+    rect.set(0, 0, getIntrinsicWidth(), getIntrinsicHeight());
+    transformed.getMatrix().mapRect(rect);
+
+    float dx = 0.0f, dy = 0.0f;
+    int windowWidth = getBounds().width();
+    int windowHeight = getBounds().height();
+
+    if (rect.width() < windowWidth) {
+      dx = (windowWidth / 2) - rect.centerX();
+    } else {
+      if (rect.left > 0.0f) {
+        dx = -rect.left;
+      } else if (rect.right < windowWidth) {
+        dx = windowWidth - rect.right;
+      }
+    }
+
+    if (rect.height() < windowHeight) {
+      dy = (windowHeight / 2) - rect.centerY();
+    } else {
+      if (rect.top > 0.0f) {
+        dy = -rect.top;
+      } else if (rect.bottom < windowHeight) {
+        dy = windowHeight - rect.bottom;
+      }
+    }
+
+    if (!eq(dx, 0.0f) || !eq(dy, 0.0f)) {
+      transformed.translate(dx, dy);
+    }
+  }
+
+  public boolean scale(float factor, float x, float y) {
+    Transformed transformed = (Transformed) getDrawable();
+
+    final float scale = getScale(transformed.getMatrix());
+    if (scale < maxScale && factor > 1.0f) {
+      factor = Math.min(maxScale / scale, factor);
+    } else if (scale > minScale && factor < 1.0f) {
+      factor = Math.max(minScale / scale, factor);
+    } else {
+      factor = 1.0f;
+    }
+
+    if (factor != 1.0f) {
+      transformed.scale(factor, factor, x, y);
+      fixPosition();
+    }
+
+    // Always return true
+    return true;
+  }
+
+  public boolean rotate(float angle, float x, float y) {
+    Transformed transformed = (Transformed) getDrawable();
+
+    transformed.rotate(angle, x, y);
+    fixPosition();
+    updateScales();
+
+    // Always return true
+    return true;
+  }
+
+  private float getScale(Matrix matrix) {
+    matrix.getValues(matrixValue);
+    return (float) Math.sqrt(matrixValue[Matrix.MSCALE_X] * matrixValue[Matrix.MSCALE_X] +
+        matrixValue[Matrix.MSKEW_X] * matrixValue[Matrix.MSKEW_X]);
+  }
+
   // Greater than or equal
   private static boolean ge(float a, float b) {
-    return a >= b - 0.25f;
+    return a >= b - 0.1f;
   }
 
   // less than or equal
   private static boolean le(float a, float b) {
-    return a <= b + 0.25f;
+    return a <= b + 0.1f;
+  }
+
+  // equal
+  private static boolean eq(float a, float b) {
+    return a <= b + 0.05f && a >= b - 0.05f;
   }
 }
