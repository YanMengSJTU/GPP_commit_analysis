diff --git a/animated-base/src/main/java/com/facebook/imagepipeline/image/CloseableAnimatedBitmap.java b/animated-base/src/main/java/com/facebook/imagepipeline/image/CloseableAnimatedBitmap.java
index 871e3b428..c188ba360 100644
--- a/animated-base/src/main/java/com/facebook/imagepipeline/image/CloseableAnimatedBitmap.java
+++ b/animated-base/src/main/java/com/facebook/imagepipeline/image/CloseableAnimatedBitmap.java
@@ -160,4 +160,19 @@ public int getHeight() {
     return (bitmaps == null) ? 0 : bitmaps.get(0).getHeight();
   }
 
+  /**
+   * @return width of original (non-resized) image
+   */
+  @Override
+  public int getOriginalWidth() {
+      return getWidth();
+  }
+
+  /**
+   * @return height of original (non-resized) image
+   */
+  @Override
+  public int getOriginalHeight() {
+      return getHeight();
+  }
 }
diff --git a/animated-base/src/main/java/com/facebook/imagepipeline/image/CloseableAnimatedImage.java b/animated-base/src/main/java/com/facebook/imagepipeline/image/CloseableAnimatedImage.java
index 1437397db..fe88c9cba 100644
--- a/animated-base/src/main/java/com/facebook/imagepipeline/image/CloseableAnimatedImage.java
+++ b/animated-base/src/main/java/com/facebook/imagepipeline/image/CloseableAnimatedImage.java
@@ -69,4 +69,20 @@ public synchronized AnimatedImageResult getImageResult() {
   public synchronized AnimatedImage getImage() {
     return isClosed() ? null : mImageResult.getImage();
   }
+
+  /**
+   * @return width of original (non-resized) image
+   */
+  @Override
+  public int getOriginalWidth() {
+      return getWidth();
+  }
+
+  /**
+   * @return height of original (non-resized) image
+   */
+  @Override
+  public int getOriginalHeight() {
+      return getHeight();
+  }
 }
diff --git a/imagepipeline-base/src/main/java/com/facebook/imagepipeline/image/CloseableStaticBitmap.java b/imagepipeline-base/src/main/java/com/facebook/imagepipeline/image/CloseableStaticBitmap.java
index bdf2a3f12..97a459a47 100644
--- a/imagepipeline-base/src/main/java/com/facebook/imagepipeline/image/CloseableStaticBitmap.java
+++ b/imagepipeline-base/src/main/java/com/facebook/imagepipeline/image/CloseableStaticBitmap.java
@@ -35,6 +35,9 @@
 
   private final int mRotationAngle;
 
+  private int mOriginalWidth = -1;
+  private int mOriginalHeight = -1;
+
   /**
    * Creates a new instance of a CloseableStaticBitmap.
    *
@@ -54,6 +57,29 @@ public CloseableStaticBitmap(
     mRotationAngle = rotationAngle;
   }
 
+  /**
+   * Creates a new instance of a CloseableStaticBitmap.
+   *
+   * @param bitmap the bitmap to wrap
+   * @param resourceReleaser ResourceReleaser to release the bitmap to
+   */
+  public CloseableStaticBitmap(
+          Bitmap bitmap,
+          ResourceReleaser<Bitmap> resourceReleaser,
+          QualityInfo qualityInfo,
+          int rotationAngle,
+          int originalWidth,
+          int originalHeight) {
+    mBitmap = Preconditions.checkNotNull(bitmap);
+    mBitmapReference = CloseableReference.of(
+            mBitmap,
+            Preconditions.checkNotNull(resourceReleaser));
+    mQualityInfo = qualityInfo;
+    mRotationAngle = rotationAngle;
+    mOriginalWidth = originalWidth;
+    mOriginalHeight = originalHeight;
+  }
+
   /**
    * Creates a new instance of a CloseableStaticBitmap from an existing CloseableReference. The
    * CloseableStaticBitmap will hold a reference to the Bitmap until it's closed.
@@ -70,6 +96,26 @@ public CloseableStaticBitmap(
     mRotationAngle = rotationAngle;
   }
 
+  /**
+   * Creates a new instance of a CloseableStaticBitmap from an existing CloseableReference. The
+   * CloseableStaticBitmap will hold a reference to the Bitmap until it's closed.
+   *
+   * @param bitmapReference the bitmap reference.
+   */
+  public CloseableStaticBitmap(
+          CloseableReference<Bitmap> bitmapReference,
+          QualityInfo qualityInfo,
+          int rotationAngle,
+          int originalWidth,
+          int originalHeight) {
+    mBitmapReference = Preconditions.checkNotNull(bitmapReference.cloneOrNull());
+    mBitmap = mBitmapReference.get();
+    mQualityInfo = qualityInfo;
+    mRotationAngle = rotationAngle;
+    mOriginalWidth = originalWidth;
+    mOriginalHeight = originalHeight;
+  }
+
   /**
    * Releases the bitmap to the pool.
    */
@@ -158,4 +204,14 @@ public int getRotationAngle() {
   public QualityInfo getQualityInfo() {
     return mQualityInfo;
   }
+
+  @Override
+  public int getOriginalWidth() {
+      return mOriginalWidth;
+  }
+
+  @Override
+  public int getOriginalHeight() {
+      return mOriginalHeight;
+  }
 }
diff --git a/imagepipeline-base/src/main/java/com/facebook/imagepipeline/image/ImageInfo.java b/imagepipeline-base/src/main/java/com/facebook/imagepipeline/image/ImageInfo.java
index dd1c3b85b..cd064f275 100644
--- a/imagepipeline-base/src/main/java/com/facebook/imagepipeline/image/ImageInfo.java
+++ b/imagepipeline-base/src/main/java/com/facebook/imagepipeline/image/ImageInfo.java
@@ -28,4 +28,15 @@
    * @return quality information for the image
    */
   QualityInfo getQualityInfo();
+
+  /**
+   * @return width of original (non-resized) image
+   */
+  int getOriginalWidth();
+
+  /**
+   * @return height of original (non-resized) image
+   */
+  int getOriginalHeight();
+
 }
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/decoder/ImageDecoder.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/decoder/ImageDecoder.java
index f742839eb..461197368 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/decoder/ImageDecoder.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/decoder/ImageDecoder.java
@@ -132,7 +132,9 @@ public CloseableStaticBitmap decodeStaticImage(
       return new CloseableStaticBitmap(
           bitmapReference,
           ImmutableQualityInfo.FULL_QUALITY,
-          encodedImage.getRotationAngle());
+          encodedImage.getRotationAngle(),
+          encodedImage.getWidth(),
+          encodedImage.getHeight());
     } finally {
       bitmapReference.close();
     }
@@ -156,7 +158,9 @@ public CloseableStaticBitmap decodeJpeg(
       return new CloseableStaticBitmap(
           bitmapReference,
           qualityInfo,
-          encodedImage.getRotationAngle());
+          encodedImage.getRotationAngle(),
+          encodedImage.getWidth(),
+          encodedImage.getHeight());
     } finally {
       bitmapReference.close();
     }
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalVideoThumbnailProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalVideoThumbnailProducer.java
index 0d1bff71b..562bec881 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalVideoThumbnailProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalVideoThumbnailProducer.java
@@ -71,7 +71,9 @@ public void produceResults(
                     thumbnailBitmap,
                     SimpleBitmapReleaser.getInstance(),
                     ImmutableQualityInfo.FULL_QUALITY,
-                    0));
+                    0,
+                    thumbnailBitmap.getWidth(),
+                    thumbnailBitmap.getHeight()));
           }
 
           @Override
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/PostprocessorProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/PostprocessorProducer.java
index 741aa148d..559f24258 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/PostprocessorProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/PostprocessorProducer.java
@@ -253,7 +253,7 @@ private boolean shouldPostprocess(CloseableImage sourceImage) {
       int rotationAngle = staticBitmap.getRotationAngle();
       try {
         return CloseableReference.<CloseableImage>of(
-            new CloseableStaticBitmap(bitmapRef, sourceImage.getQualityInfo(), rotationAngle));
+            new CloseableStaticBitmap(bitmapRef, sourceImage.getQualityInfo(), rotationAngle, sourceImage.getWidth(), sourceImage.getHeight()));
       } finally {
         CloseableReference.closeSafely(bitmapRef);
       }
