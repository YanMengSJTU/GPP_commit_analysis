diff --git a/imagepipeline-base/src/main/java/com/facebook/imageutils/KpgUtil.java b/imagepipeline-base/src/main/java/com/facebook/imageutils/KpgUtil.java
index 8f04476f9..42c36c2f7 100644
--- a/imagepipeline-base/src/main/java/com/facebook/imageutils/KpgUtil.java
+++ b/imagepipeline-base/src/main/java/com/facebook/imageutils/KpgUtil.java
@@ -30,7 +30,6 @@
 
     private native static int[] nativedecode(byte[] bs, int len, int pic_width, int pic_height);
 
-    @TargetApi(Build.VERSION_CODES.KITKAT)
     public static Bitmap decodePurgable(byte[] data, int offset, int length, BitmapFactory.Options opts)
     {
         int[] argb = nativedecode(data, length, opts.outWidth, opts.outHeight);
diff --git a/samples/demo/src/main/java/com/facebook/samples/demo/ImageActivity.java b/samples/demo/src/main/java/com/facebook/samples/demo/ImageActivity.java
index 4a5bf1607..13f6a6cae 100644
--- a/samples/demo/src/main/java/com/facebook/samples/demo/ImageActivity.java
+++ b/samples/demo/src/main/java/com/facebook/samples/demo/ImageActivity.java
@@ -18,7 +18,7 @@ protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.image);
         ArrayList<String> datas = new ArrayList<>();
-        for(int i = 1; i <= 50; i++)
+        for(int i = 1; i <= 1; i++)
         {
             File file = new File(Environment.getExternalStorageDirectory().getPath() + "/kpgtest/" + Integer.toString(i) + ".kpg");
             Uri uri = Uri.fromFile(file);
@@ -37,10 +37,10 @@ protected void onCreate(Bundle savedInstanceState) {
         adapter.setDatas(datas);
 
 
-        ListView listViewright = (ListView) this.findViewById(R.id.list_right);
-        adapter = new MyAdapter();
-        listViewright.setAdapter(adapter);
-        adapter.setDatas(datas);
+//        ListView listViewright = (ListView) this.findViewById(R.id.list_right);
+//        adapter = new MyAdapter();
+//        listViewright.setAdapter(adapter);
+//        adapter.setDatas(datas);
 //        File file = new File(Environment.getExternalStorageDirectory().getPath() + "/test.kpg");
 //        Uri uri = Uri.fromFile(file);
 //        datas.add(uri.toString());
diff --git a/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgArtDecoder.java b/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgArtDecoder.java
index d49dc8456..5bd8c9f47 100644
--- a/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgArtDecoder.java
+++ b/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgArtDecoder.java
@@ -15,7 +15,6 @@
 import com.facebook.imagepipeline.image.EncodedImage;
 import com.facebook.imagepipeline.memory.BitmapPool;
 import com.facebook.imageutils.BitmapUtil;
-import com.facebook.samples.demo.kpg.KpgUtil;
 
 /**
  * Created by fengweilun on 22/05/2017.
diff --git a/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgImageDecoder.java b/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgImageDecoder.java
index 5fc932562..712a980b0 100644
--- a/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgImageDecoder.java
+++ b/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgImageDecoder.java
@@ -40,6 +40,7 @@ public static KpgPlatformDecoder buildPlatformDecoder(
                     new Pools.SynchronizedPool<>(maxNumThreads));
         } else {
             return null;
+            //TODO 23/05/2017 fix the sws_scale libc bug
             //return new KpgKitKatPurgeableDecoder(poolFactory.getFlexByteArrayPool());
         }
     }
@@ -50,9 +51,10 @@ public CloseableImage decode(EncodedImage encodedImage, int length, QualityInfo
         parseMetadata(encodedImage);
         // TODO: 22/05/2017 puth mPlatformDecoder related implemention here
         Log.d("KpgImageDecoder", "decode");
-
-        CloseableReference<Bitmap> bitmapReference =
-                mPlatformDecoder.decodeKpgFromEncodedImage(encodedImage, options.bitmapConfig);
+        CloseableReference<Bitmap> bitmapReference = null;
+        if(null != mPlatformDecoder) {
+            bitmapReference = mPlatformDecoder.decodeKpgFromEncodedImage(encodedImage, options.bitmapConfig);
+        }
         try {
             return new CloseableStaticBitmap(
                     bitmapReference,
diff --git a/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgKitKatPurgeableDecoder.java b/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgKitKatPurgeableDecoder.java
new file mode 100644
index 000000000..bd2acb5f0
--- /dev/null
+++ b/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgKitKatPurgeableDecoder.java
@@ -0,0 +1,97 @@
+package com.facebook.samples.demo.kpg;
+
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+
+import com.facebook.common.internal.Preconditions;
+import com.facebook.common.internal.Throwables;
+import com.facebook.common.memory.PooledByteBuffer;
+import com.facebook.common.references.CloseableReference;
+import com.facebook.imagepipeline.common.TooManyBitmapsException;
+import com.facebook.imagepipeline.image.EncodedImage;
+import com.facebook.imagepipeline.memory.BitmapCounter;
+import com.facebook.imagepipeline.memory.BitmapCounterProvider;
+import com.facebook.imagepipeline.memory.FlexByteArrayPool;
+import com.facebook.imagepipeline.nativecode.Bitmaps;
+import com.facebook.imageutils.JfifUtil;
+
+/**
+ * Created by fengweilun on 22/05/2017.
+ */
+
+public class KpgKitKatPurgeableDecoder implements KpgPlatformDecoder {
+
+  private final FlexByteArrayPool mFlexByteArrayPool;
+  private final BitmapCounter mUnpooledBitmapsCounter;
+
+  public KpgKitKatPurgeableDecoder(FlexByteArrayPool flexByteArrayPool) {
+    mFlexByteArrayPool = flexByteArrayPool;
+    mUnpooledBitmapsCounter = BitmapCounterProvider.get();
+  }
+
+  protected static final byte[] EOI = new byte[] {
+      (byte) JfifUtil.MARKER_FIRST_BYTE, (byte) JfifUtil.MARKER_EOI };
+
+  protected static boolean endsWithEOI(CloseableReference<PooledByteBuffer> bytesRef, int length) {
+    PooledByteBuffer buffer = bytesRef.get();
+    return length >= 2 &&
+        buffer.read(length - 2) == (byte) JfifUtil.MARKER_FIRST_BYTE &&
+        buffer.read(length - 1) == (byte) JfifUtil.MARKER_EOI;
+  }
+
+  private static void putEOI(byte[] imageBytes, int offset) {
+    // TODO 5884402: remove dependency on JfifUtil
+    imageBytes[offset] = (byte) JfifUtil.MARKER_FIRST_BYTE;
+    imageBytes[offset + 1] = (byte) JfifUtil.MARKER_EOI;
+  }
+
+  CloseableReference<Bitmap> decodeKPGAsPurgeable(CloseableReference<PooledByteBuffer> bytesRef, BitmapFactory.Options options, int file_size) {
+    byte[] suffix = endsWithEOI(bytesRef, file_size) ? null : EOI;
+    final PooledByteBuffer pooledByteBuffer = bytesRef.get();
+    Preconditions.checkArgument(file_size <= pooledByteBuffer.size());
+    // allocate bigger array in case EOI needs to be added
+    final CloseableReference<byte[]> encodedBytesArrayRef = mFlexByteArrayPool.get(file_size + 2);
+    try {
+      byte[] encodedBytesArray = encodedBytesArrayRef.get();
+      pooledByteBuffer.read(0, encodedBytesArray, 0, file_size);
+      if (suffix != null) {
+        putEOI(encodedBytesArray, file_size);
+        file_size += 2;
+      }
+      Bitmap bitmap = KpgUtil.decodePurgable(encodedBytesArray, 0, file_size, options);
+      return pinBitmap(bitmap);
+    } finally {
+      CloseableReference.closeSafely(encodedBytesArrayRef);
+    }
+  }
+
+  @Override
+  public CloseableReference<Bitmap> decodeKpgFromEncodedImage(
+      EncodedImage encodedImage, Bitmap.Config bitmapConfig) {
+    int[] file_size = new int[1];
+    final BitmapFactory.Options options = com.facebook.imageutils.KpgUtil
+        .getOptions(encodedImage, bitmapConfig, file_size);
+    CloseableReference<PooledByteBuffer> bytesRef = encodedImage.getByteBufferRef();
+    Preconditions.checkNotNull(bytesRef);
+    try {
+      return decodeKPGAsPurgeable(bytesRef, options, file_size[0]);
+    } catch (RuntimeException re) {
+      throw re;
+    }
+  }
+  public CloseableReference<Bitmap> pinBitmap(Bitmap bitmap) {
+    try {
+      // Real decoding happens here - if the image was corrupted, this will throw an exception
+      Bitmaps.pinBitmap(bitmap);
+    } catch (Exception e) {
+      bitmap.recycle();
+      throw Throwables.propagate(e);
+    }
+    if (!mUnpooledBitmapsCounter.increase(bitmap)) {
+      bitmap.recycle();
+      throw new TooManyBitmapsException();
+    }
+    return CloseableReference.of(bitmap, mUnpooledBitmapsCounter.getReleaser());
+  }
+
+}
diff --git a/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgUtil.java b/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgUtil.java
index ad41f9b7c..478fc425f 100644
--- a/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgUtil.java
+++ b/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgUtil.java
@@ -31,10 +31,17 @@
 
     private native static int[] nativedecode(byte[] bs, int len, int pic_width, int pic_height);
 
+    @TargetApi(Build.VERSION_CODES.KITKAT)
+    public static Bitmap decodePurgable(byte[] data, int offset, int length, BitmapFactory.Options opts)
+    {
+        int[] argb = nativedecode(data, length, opts.outWidth, opts.outHeight);
+        return Bitmap.createBitmap(argb, opts.outWidth, opts.outHeight, Bitmap.Config.ARGB_8888);
+    }
+
     @TargetApi(Build.VERSION_CODES.LOLLIPOP)
     public static Bitmap decodeStream(InputStream is, Rect outPadding, BitmapFactory.Options opts, int filesize)
     {
-        Bitmap bitmap;
+        Bitmap bitmap = null;
         try {
             byte[] stream = new byte[filesize];
             is.read(stream);
diff --git a/samples/demo/src/main/libs/armeabi-v7a/libffmpeg.so b/samples/demo/src/main/libs/armeabi-v7a/libffmpeg.so
index aa4dce40d..b49bfb870 100755
Binary files a/samples/demo/src/main/libs/armeabi-v7a/libffmpeg.so and b/samples/demo/src/main/libs/armeabi-v7a/libffmpeg.so differ
diff --git a/static-kpg/src/main/jni/kpg/libffmpeg.so b/static-kpg/src/main/jni/kpg/libffmpeg.so
index aa4dce40d..b49bfb870 100755
Binary files a/static-kpg/src/main/jni/kpg/libffmpeg.so and b/static-kpg/src/main/jni/kpg/libffmpeg.so differ
diff --git a/static-kpg/src/main/jni/kpg/libkpg.h b/static-kpg/src/main/jni/kpg/libkpg.h
index 029ab8716..4492c1a6a 100644
--- a/static-kpg/src/main/jni/kpg/libkpg.h
+++ b/static-kpg/src/main/jni/kpg/libkpg.h
@@ -52,7 +52,7 @@ void open_ffmpeg_log_in_debug_mode() {
     if (1) {
         LOGD("ffmpeg log opened");
         av_log_set_callback(av_log_new_callback);
-        av_log_set_level(50);
+        av_log_set_level(100);
     } else {
         LOGD("ffmpeg log not open");
     }
