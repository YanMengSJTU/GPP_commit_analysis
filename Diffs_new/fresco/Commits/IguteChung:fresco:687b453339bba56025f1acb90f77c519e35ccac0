diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineFactory.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineFactory.java
index 0a91aa8dd..4f210cb34 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineFactory.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineFactory.java
@@ -363,7 +363,7 @@ private ProducerSequenceFactory getProducerSequenceFactory() {
     if (mProducerSequenceFactory == null) {
       mProducerSequenceFactory =
           new ProducerSequenceFactory(
-              mConfig.getContext(),
+              mConfig.getContext().getApplicationContext().getContentResolver(),
               getProducerFactory(),
               mConfig.getNetworkFetcher(),
               mConfig.isResizeAndRotateEnabledForNetwork(),
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerSequenceFactory.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerSequenceFactory.java
index 976ce204f..35f9a874f 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerSequenceFactory.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerSequenceFactory.java
@@ -13,7 +13,6 @@
 import java.util.Map;
 
 import android.content.ContentResolver;
-import android.content.Context;
 import android.net.Uri;
 
 import com.facebook.common.internal.Preconditions;
@@ -98,7 +97,7 @@
       mBitmapPrepareSequences;
 
   public ProducerSequenceFactory(
-      Context context,
+      ContentResolver contentResolver,
       ProducerFactory producerFactory,
       NetworkFetcher networkFetcher,
       boolean resizeAndRotateEnabledForNetwork,
@@ -107,7 +106,7 @@ public ProducerSequenceFactory(
       boolean useDownsamplingRatio,
       boolean useBitmapPrepareToDraw,
       boolean partialImageCachingEnabled) {
-    mContentResolver = context.getApplicationContext().getContentResolver();
+    mContentResolver = contentResolver;
     mProducerFactory = producerFactory;
     mNetworkFetcher = networkFetcher;
     mResizeAndRotateEnabledForNetwork = resizeAndRotateEnabledForNetwork;
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalVideoThumbnailProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalVideoThumbnailProducer.java
index 8ec8d5770..c76c69fc8 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalVideoThumbnailProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalVideoThumbnailProducer.java
@@ -9,12 +9,16 @@
 
 package com.facebook.imagepipeline.producers;
 
+import java.util.Map;
+import java.util.concurrent.Executor;
+
 import android.content.ContentResolver;
 import android.database.Cursor;
 import android.graphics.Bitmap;
 import android.media.ThumbnailUtils;
 import android.net.Uri;
 import android.provider.MediaStore;
+import android.support.annotation.Nullable;
 
 import com.facebook.common.internal.ImmutableMap;
 import com.facebook.common.internal.VisibleForTesting;
@@ -26,9 +30,6 @@
 import com.facebook.imagepipeline.image.ImmutableQualityInfo;
 import com.facebook.imagepipeline.request.ImageRequest;
 
-import java.util.Map;
-import java.util.concurrent.Executor;
-
 /**
  * A producer that creates video thumbnails.
  *
@@ -77,8 +78,12 @@ protected void onFailure(Exception e) {
 
           @Override
           protected CloseableReference<CloseableImage> getResult() throws Exception {
-            Bitmap thumbnailBitmap = ThumbnailUtils.createVideoThumbnail(
-              getLocalFilePath(imageRequest), calculateKind(imageRequest));
+            String path = getLocalFilePath(imageRequest);
+            if (path == null) {
+              return null;
+            }
+            Bitmap thumbnailBitmap = ThumbnailUtils.createVideoThumbnail(path,
+                calculateKind(imageRequest));
             if (thumbnailBitmap == null) {
               return null;
             }
@@ -119,7 +124,7 @@ private static int calculateKind(ImageRequest imageRequest) {
     return MediaStore.Images.Thumbnails.MICRO_KIND;
   }
 
-  private String getLocalFilePath(ImageRequest imageRequest) {
+  @Nullable private String getLocalFilePath(ImageRequest imageRequest) {
     Uri uri = imageRequest.getSourceUri();
     if (UriUtil.isLocalFileUri(uri)) {
       return imageRequest.getSourceFile().getPath();
@@ -134,6 +139,6 @@ private String getLocalFilePath(ImageRequest imageRequest) {
         cursor.close();
       }
     }
-    return "";
+    return null;
   }
 }
diff --git a/imagepipeline/src/test/java/com/facebook/imagepipeline/core/ProducerSequenceFactoryTest.java b/imagepipeline/src/test/java/com/facebook/imagepipeline/core/ProducerSequenceFactoryTest.java
index ecd63b7d6..75119bbf4 100644
--- a/imagepipeline/src/test/java/com/facebook/imagepipeline/core/ProducerSequenceFactoryTest.java
+++ b/imagepipeline/src/test/java/com/facebook/imagepipeline/core/ProducerSequenceFactoryTest.java
@@ -73,7 +73,7 @@ public void setUp() {
     ProducerFactory producerFactory = mock(ProducerFactory.class, RETURNS_MOCKS);
 
     mProducerSequenceFactory = new ProducerSequenceFactory(
-        RuntimeEnvironment.application,
+        RuntimeEnvironment.application.getContentResolver(),
         producerFactory, null, true, false, null, false, false, false);
 
     when(mImageRequest.getLowestPermittedRequestLevel())
@@ -320,7 +320,7 @@ public void testPrepareBitmapFactoryWithPostprocessor() {
   private void internalUseSequenceFactoryWithBitmapPrepare() {
     ProducerFactory producerFactory = mock(ProducerFactory.class, RETURNS_MOCKS);
     mProducerSequenceFactory = new ProducerSequenceFactory(
-        RuntimeEnvironment.application,
+        RuntimeEnvironment.application.getContentResolver(),
         producerFactory,
         null,
         true,
