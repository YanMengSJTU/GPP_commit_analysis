diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/HttpUrlConnectionNetworkFetcher.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/HttpUrlConnectionNetworkFetcher.java
index 78e8c6a9b..02f0c3685 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/HttpUrlConnectionNetworkFetcher.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/HttpUrlConnectionNetworkFetcher.java
@@ -51,57 +51,57 @@ public FetchState createFetchState(Consumer<EncodedImage> consumer, ProducerCont
   @Override
   public void fetch(final FetchState fetchState, final Callback callback) {
     final Future<?> future = mExecutorService.submit(
-        new Runnable() {
-          @Override
-          public void run() {
-              HttpURLConnection connection = null;
-              Uri uri = fetchState.getUri();
-              String uriString = uri.toString();
-              InputStream is;
-              try {
-                  connection = createGetConnection(uriString);
-                  int redirectCount = 0;
-                  while (connection.getResponseCode() / 100 == 3 && redirectCount < MAX_REDIRECT_COUNT) {
-                      uriString = connection.getHeaderField("Location");
-                      connection.disconnect();
-                      connection = createGetConnection(uriString);
-                      ++redirectCount;
-                  }
-                  if (redirectCount > MAX_REDIRECT_COUNT) {
-                      callback.onFailure(new Exception("RedirectCount more than " + MAX_REDIRECT_COUNT));
-                      return;
-                  }
-                  is = connection.getInputStream();
-                  callback.onResponse(is, -1);//connection.getContentLength()
-              } catch (Exception e) {
-                  callback.onFailure(e);
-              } finally {
-                  if (connection != null) {
-                      connection.disconnect();
-                  }
-              }
+      new Runnable() {
+        @Override
+        public void run() {
+          HttpURLConnection connection = null;
+          Uri uri = fetchState.getUri();
+          String uriString = uri.toString();
+          InputStream is;
+          try {
+            connection = createGetConnection(uriString);
+            int redirectCount = 0;
+            while (connection.getResponseCode() / 100 == 3 && redirectCount < MAX_REDIRECT_COUNT) {
+              uriString = connection.getHeaderField("Location");
+              connection.disconnect();
+              connection = createGetConnection(uriString);
+              ++redirectCount;
+            }
+            if (redirectCount >= MAX_REDIRECT_COUNT) {
+              callback.onFailure(new Exception("RedirectCount more than " + MAX_REDIRECT_COUNT));
+              return;
+            }
+            is = connection.getInputStream();
+            callback.onResponse(is, -1);//connection.getContentLength()
+          } catch (Exception e) {
+            callback.onFailure(e);
+          } finally {
+            if (connection != null) {
+                connection.disconnect();
+            }
           }
-        });
+        }
+      });
     fetchState.getContext().addCallbacks(
-        new BaseProducerContextCallbacks() {
-          @Override
-          public void onCancellationRequested() {
-            if (future.cancel(false)) {
-              callback.onCancellation();
-            }
+      new BaseProducerContextCallbacks() {
+        @Override
+        public void onCancellationRequested() {
+          if (future.cancel(false)) {
+            callback.onCancellation();
           }
-        });
+        }
+      });
   }
 
 
     protected HttpURLConnection createGetConnection(String uriString) throws IOException {
-        String encodedUrl = Uri.encode(uriString, ALLOWED_URI_CHARS);
-        URL url = new URL(encodedUrl);
-        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
-        connection.setConnectTimeout(HTTP_CONNECT_TIMEOUT);
-        connection.setReadTimeout(HTTP_READ_TIMEOUT);
-        connection.setInstanceFollowRedirects(false);
-        connection.setRequestMethod("GET");
-        return connection;
+      String encodedUrl = Uri.encode(uriString, ALLOWED_URI_CHARS);
+      URL url = new URL(encodedUrl);
+      HttpURLConnection connection = (HttpURLConnection) url.openConnection();
+      connection.setConnectTimeout(HTTP_CONNECT_TIMEOUT);
+      connection.setReadTimeout(HTTP_READ_TIMEOUT);
+      connection.setInstanceFollowRedirects(false);
+      connection.setRequestMethod("GET");
+      return connection;
     }
 }
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalFetchProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalFetchProducer.java
index db416de54..5069500b5 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalFetchProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalFetchProducer.java
@@ -106,33 +106,33 @@ protected EncodedImage getByteBufferBackedEncodedImage(
   }
 
     private boolean isMemoryEnough() {
-        Runtime runTime = Runtime.getRuntime();
-        long javaMax = runTime.maxMemory();
-        long javaUsed = runTime.totalMemory() - runTime.freeMemory();
-        long javaFree = Math.min(javaMax - javaUsed, 8 * ByteConstants.MB);
-        return (javaMax >= 64 * javaFree);
+      Runtime runTime = Runtime.getRuntime();
+      long javaMax = runTime.maxMemory();
+      long javaUsed = runTime.totalMemory() - runTime.freeMemory();
+      long javaFree = Math.min(javaMax - javaUsed, 8 * ByteConstants.MB);
+      return (javaMax >= 64 * javaFree);
     }
 
     protected EncodedImage getEncodedImage(
             File file,
             InputStream inputStream,
             int length) throws IOException {
-        if (mDecodeFileDescriptorEnabledForKitKat && inputStream instanceof FileInputStream &&
-                isMemoryEnough()) {
-            if (file == null) {
-                file = new File(inputStream.toString());
-            }
-            //TODO: https://github.com/facebook/fresco/issues/1091
-            return getInputStreamBackedEncodedImage(file, length);
-        } else {
-            return getByteBufferBackedEncodedImage(inputStream, length);
-        }
+      if (mDecodeFileDescriptorEnabledForKitKat && inputStream instanceof FileInputStream &&
+              isMemoryEnough()) {
+          if (file == null) {
+              file = new File(inputStream.toString());
+          }
+          //TODO: https://github.com/facebook/fresco/issues/1091
+          return getInputStreamBackedEncodedImage(file, length);
+      } else {
+          return getByteBufferBackedEncodedImage(inputStream, length);
+      }
     }
 
     protected EncodedImage getEncodedImage(
             InputStream inputStream,
             int length) throws IOException {
-        return getEncodedImage(null, inputStream, length);
+      return getEncodedImage(null, inputStream, length);
     }
 
   protected EncodedImage getInputStreamBackedEncodedImage(
