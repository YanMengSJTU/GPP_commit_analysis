diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/LargeDraweeView.java b/fresco-large/src/main/java/com/hippo/fresco/large/LargeDraweeView.java
index c14e6b731..8605bc161 100644
--- a/fresco-large/src/main/java/com/hippo/fresco/large/LargeDraweeView.java
+++ b/fresco-large/src/main/java/com/hippo/fresco/large/LargeDraweeView.java
@@ -9,6 +9,8 @@
 import android.content.Context;
 import android.graphics.drawable.Animatable;
 import android.graphics.drawable.Drawable;
+import android.os.Parcel;
+import android.os.Parcelable;
 import android.util.AttributeSet;
 import android.view.MotionEvent;
 import android.view.ViewParent;
@@ -38,6 +40,9 @@
 
   private boolean isFixAngleEnabled = true;
 
+  private boolean hasValues;
+  private float[] matrixValues = new float[9];
+
   private final ControllerListener controllerListener = new BaseControllerListener<Object>() {
     @Override
     public void onFinalImageSet(
@@ -140,6 +145,9 @@ private void onFinalImageSet() {
 
     if (drawable instanceof StandardizedTransformedDrawable) {
       transform = (StandardizedTransformedDrawable) drawable;
+      if (hasValues) {
+        transform.setMatrixValues(matrixValues);
+      }
     } else {
       transform = null;
     }
@@ -219,6 +227,69 @@ public void onRotate(float angle, float x, float y) {
     }
   }
 
+  @Override
+  protected Parcelable onSaveInstanceState() {
+    Parcelable superState = super.onSaveInstanceState();
+    SavedState savedState = new SavedState(superState);
+    if (transform != null) {
+      hasValues = true;
+      savedState.hasValues = true;
+      transform.getMatrixValues(matrixValues);
+      System.arraycopy(matrixValues, 0, savedState.matrixValues, 0, 9);
+    } else {
+      hasValues = false;
+      savedState.hasValues = false;
+    }
+    return savedState;
+  }
+
+  @Override
+  protected void onRestoreInstanceState(Parcelable state) {
+    SavedState ss = (SavedState) state;
+    super.onRestoreInstanceState(ss.getSuperState());
+    hasValues = ss.hasValues;
+    System.arraycopy(ss.matrixValues, 0, matrixValues, 0, 9);
+    if (transform != null && hasValues) {
+      transform.setMatrixValues(matrixValues);
+    }
+  }
+
+  private static class SavedState extends BaseSavedState {
+
+    boolean hasValues;
+    float[] matrixValues = new float[9];
+
+    SavedState(Parcelable superState) {
+      super(superState);
+    }
+
+    @Override
+    public void writeToParcel(Parcel out, int flags) {
+      super.writeToParcel(out, flags);
+      out.writeInt(hasValues ? 1 : 0);
+      out.writeFloatArray(matrixValues);
+    }
+
+    public static final Parcelable.Creator<SavedState> CREATOR
+        = new Parcelable.Creator<SavedState>() {
+      @Override
+      public SavedState createFromParcel(Parcel in) {
+        return new SavedState(in);
+      }
+
+      @Override
+      public SavedState[] newArray(int size) {
+        return new SavedState[size];
+      }
+    };
+
+    private SavedState(Parcel in) {
+      super(in);
+      hasValues = in.readInt() != 0;
+      in.readFloatArray(matrixValues);
+    }
+  }
+
   @Nullable
   private static Animatable getActiveAnimatable(Drawable drawable) {
     if (drawable == null) {
diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/drawable/StandardizedTransformedDrawable.java b/fresco-large/src/main/java/com/hippo/fresco/large/drawable/StandardizedTransformedDrawable.java
index 779396497..74b858807 100644
--- a/fresco-large/src/main/java/com/hippo/fresco/large/drawable/StandardizedTransformedDrawable.java
+++ b/fresco-large/src/main/java/com/hippo/fresco/large/drawable/StandardizedTransformedDrawable.java
@@ -34,7 +34,7 @@
 
   private RectF rect = new RectF();
   private Matrix matrix = new Matrix();
-  private float[] matrixValue = new float[9];
+  private float[] matrixValues = new float[9];
 
   private float widthScale;
   private float heightScale;
@@ -50,6 +50,17 @@ public StandardizedTransformedDrawable(Context context, Drawable drawable) {
     this.context = context;
   }
 
+  public void getMatrixValues(float[] values) {
+    Transformed transformed = (Transformed) getDrawable();
+    transformed.getMatrix().getValues(values);
+  }
+
+  public void setMatrixValues(float[] values) {
+    Transformed transformed = (Transformed) getDrawable();
+    transformed.getMatrix().setValues(values);
+    invalidateSelf();
+  }
+
   @Override
   public void dropCaches() {
     Drawable drawable = getCurrent();
@@ -344,16 +355,16 @@ public void onAnimationUpdate(ValueAnimator animation) {
   }
 
   private float getScale(Matrix matrix) {
-    matrix.getValues(matrixValue);
-    float x = matrixValue[Matrix.MSCALE_X];
-    float y = matrixValue[Matrix.MSKEW_X];
+    matrix.getValues(matrixValues);
+    float x = matrixValues[Matrix.MSCALE_X];
+    float y = matrixValues[Matrix.MSKEW_X];
     return (float) Math.sqrt(x * x + y * y);
   }
 
   private float getAngleToRect(Matrix matrix) {
-    matrix.getValues(matrixValue);
-    float x = matrixValue[Matrix.MSCALE_X];
-    float y = matrixValue[Matrix.MSKEW_X];
+    matrix.getValues(matrixValues);
+    float x = matrixValues[Matrix.MSCALE_X];
+    float y = matrixValues[Matrix.MSKEW_X];
     float angle = (float) Math.toDegrees(Math.atan(- y / x));
     if (Float.isNaN(angle)) {
       angle = 90.0f;
