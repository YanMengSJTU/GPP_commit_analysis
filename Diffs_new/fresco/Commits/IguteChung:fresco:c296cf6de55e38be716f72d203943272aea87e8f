diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineFactory.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineFactory.java
index 604570da5..0a91aa8dd 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineFactory.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineFactory.java
@@ -363,6 +363,7 @@ private ProducerSequenceFactory getProducerSequenceFactory() {
     if (mProducerSequenceFactory == null) {
       mProducerSequenceFactory =
           new ProducerSequenceFactory(
+              mConfig.getContext(),
               getProducerFactory(),
               mConfig.getNetworkFetcher(),
               mConfig.isResizeAndRotateEnabledForNetwork(),
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerFactory.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerFactory.java
index 6d4d81d4a..faaf4e263 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerFactory.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerFactory.java
@@ -9,8 +9,6 @@
 
 package com.facebook.imagepipeline.core;
 
-import javax.annotation.Nullable;
-
 import android.content.ContentResolver;
 import android.content.Context;
 import android.content.res.AssetManager;
@@ -68,6 +66,8 @@
 import com.facebook.imagepipeline.producers.ThumbnailProducer;
 import com.facebook.imagepipeline.producers.WebpTranscodeProducer;
 
+import javax.annotation.Nullable;
+
 public class ProducerFactory {
 
   private static final int MAX_SIMULTANEOUS_REQUESTS = 5;
@@ -296,7 +296,8 @@ public LocalResourceFetchProducer newLocalResourceFetchProducer() {
   }
 
   public LocalVideoThumbnailProducer newLocalVideoThumbnailProducer() {
-    return new LocalVideoThumbnailProducer(mExecutorSupplier.forLocalStorageRead());
+    return new LocalVideoThumbnailProducer(mExecutorSupplier.forLocalStorageRead(),
+      mContentResolver);
   }
 
   public NetworkFetchProducer newNetworkFetchProducer(NetworkFetcher networkFetcher) {
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerSequenceFactory.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerSequenceFactory.java
index d44d9194d..976ce204f 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerSequenceFactory.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerSequenceFactory.java
@@ -12,10 +12,13 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import android.content.ContentResolver;
+import android.content.Context;
 import android.net.Uri;
 
 import com.facebook.common.internal.Preconditions;
 import com.facebook.common.internal.VisibleForTesting;
+import com.facebook.common.media.MediaUtils;
 import com.facebook.common.memory.PooledByteBuffer;
 import com.facebook.common.references.CloseableReference;
 import com.facebook.common.webp.WebpSupportStatus;
@@ -55,6 +58,7 @@
 
 public class ProducerSequenceFactory {
 
+  private final ContentResolver mContentResolver;
   private final ProducerFactory mProducerFactory;
   private final NetworkFetcher mNetworkFetcher;
   private final boolean mResizeAndRotateEnabledForNetwork;
@@ -94,6 +98,7 @@
       mBitmapPrepareSequences;
 
   public ProducerSequenceFactory(
+      Context context,
       ProducerFactory producerFactory,
       NetworkFetcher networkFetcher,
       boolean resizeAndRotateEnabledForNetwork,
@@ -102,6 +107,7 @@ public ProducerSequenceFactory(
       boolean useDownsamplingRatio,
       boolean useBitmapPrepareToDraw,
       boolean partialImageCachingEnabled) {
+    mContentResolver = context.getApplicationContext().getContentResolver();
     mProducerFactory = producerFactory;
     mNetworkFetcher = networkFetcher;
     mResizeAndRotateEnabledForNetwork = resizeAndRotateEnabledForNetwork;
@@ -249,6 +255,9 @@ private static void validateEncodedImageRequest(ImageRequest imageRequest) {
       case SOURCE_TYPE_LOCAL_IMAGE_FILE:
         return getLocalImageFileFetchSequence();
       case SOURCE_TYPE_LOCAL_CONTENT:
+        if (MediaUtils.isVideo(mContentResolver.getType(uri))) {
+          return getLocalVideoFileFetchSequence();
+        }
         return getLocalContentUriFetchSequence();
       case SOURCE_TYPE_LOCAL_ASSET:
         return getLocalAssetFetchSequence();
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalVideoThumbnailProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalVideoThumbnailProducer.java
index ef5e87686..8ec8d5770 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalVideoThumbnailProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalVideoThumbnailProducer.java
@@ -9,22 +9,26 @@
 
 package com.facebook.imagepipeline.producers;
 
-import java.util.Map;
-import java.util.concurrent.Executor;
-
+import android.content.ContentResolver;
+import android.database.Cursor;
 import android.graphics.Bitmap;
 import android.media.ThumbnailUtils;
+import android.net.Uri;
 import android.provider.MediaStore;
 
 import com.facebook.common.internal.ImmutableMap;
 import com.facebook.common.internal.VisibleForTesting;
 import com.facebook.common.references.CloseableReference;
+import com.facebook.common.util.UriUtil;
 import com.facebook.imagepipeline.bitmaps.SimpleBitmapReleaser;
 import com.facebook.imagepipeline.image.CloseableImage;
 import com.facebook.imagepipeline.image.CloseableStaticBitmap;
 import com.facebook.imagepipeline.image.ImmutableQualityInfo;
 import com.facebook.imagepipeline.request.ImageRequest;
 
+import java.util.Map;
+import java.util.concurrent.Executor;
+
 /**
  * A producer that creates video thumbnails.
  *
@@ -38,9 +42,11 @@
   @VisibleForTesting static final String CREATED_THUMBNAIL = "createdThumbnail";
 
   private final Executor mExecutor;
+  private final ContentResolver mContentResolver;
 
-  public LocalVideoThumbnailProducer(Executor executor) {
+  public LocalVideoThumbnailProducer(Executor executor, ContentResolver contentResolver) {
     mExecutor = executor;
+    mContentResolver = contentResolver;
   }
 
   @Override
@@ -72,8 +78,7 @@ protected void onFailure(Exception e) {
           @Override
           protected CloseableReference<CloseableImage> getResult() throws Exception {
             Bitmap thumbnailBitmap = ThumbnailUtils.createVideoThumbnail(
-                imageRequest.getSourceFile().getPath(),
-                calculateKind(imageRequest));
+              getLocalFilePath(imageRequest), calculateKind(imageRequest));
             if (thumbnailBitmap == null) {
               return null;
             }
@@ -113,4 +118,22 @@ private static int calculateKind(ImageRequest imageRequest) {
     }
     return MediaStore.Images.Thumbnails.MICRO_KIND;
   }
+
+  private String getLocalFilePath(ImageRequest imageRequest) {
+    Uri uri = imageRequest.getSourceUri();
+    if (UriUtil.isLocalFileUri(uri)) {
+      return imageRequest.getSourceFile().getPath();
+    } else if (UriUtil.isLocalContentUri(uri)) {
+      Cursor cursor = mContentResolver.query(uri, new String[] {MediaStore.Video.Media.DATA},
+        null, null, null);
+      try {
+        if (cursor.moveToFirst()) {
+          return cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Video.Media.DATA));
+        }
+      } finally {
+        cursor.close();
+      }
+    }
+    return "";
+  }
 }
diff --git a/imagepipeline/src/test/java/com/facebook/imagepipeline/core/ProducerSequenceFactoryTest.java b/imagepipeline/src/test/java/com/facebook/imagepipeline/core/ProducerSequenceFactoryTest.java
index 38e92e8b6..ecd63b7d6 100644
--- a/imagepipeline/src/test/java/com/facebook/imagepipeline/core/ProducerSequenceFactoryTest.java
+++ b/imagepipeline/src/test/java/com/facebook/imagepipeline/core/ProducerSequenceFactoryTest.java
@@ -31,6 +31,7 @@
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.rule.PowerMockRule;
 import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 import static com.facebook.imagepipeline.common.SourceUriType.SOURCE_TYPE_LOCAL_ASSET;
@@ -71,8 +72,9 @@ public void setUp() {
 
     ProducerFactory producerFactory = mock(ProducerFactory.class, RETURNS_MOCKS);
 
-    mProducerSequenceFactory =
-        new ProducerSequenceFactory(producerFactory, null, true, false, null, false, false, false);
+    mProducerSequenceFactory = new ProducerSequenceFactory(
+        RuntimeEnvironment.application,
+        producerFactory, null, true, false, null, false, false, false);
 
     when(mImageRequest.getLowestPermittedRequestLevel())
         .thenReturn(ImageRequest.RequestLevel.FULL_FETCH);
@@ -318,6 +320,7 @@ public void testPrepareBitmapFactoryWithPostprocessor() {
   private void internalUseSequenceFactoryWithBitmapPrepare() {
     ProducerFactory producerFactory = mock(ProducerFactory.class, RETURNS_MOCKS);
     mProducerSequenceFactory = new ProducerSequenceFactory(
+        RuntimeEnvironment.application,
         producerFactory,
         null,
         true,
diff --git a/imagepipeline/src/test/java/com/facebook/imagepipeline/producers/LocalVideoThumbnailProducerTest.java b/imagepipeline/src/test/java/com/facebook/imagepipeline/producers/LocalVideoThumbnailProducerTest.java
index cb1286ee1..84517f3c7 100644
--- a/imagepipeline/src/test/java/com/facebook/imagepipeline/producers/LocalVideoThumbnailProducerTest.java
+++ b/imagepipeline/src/test/java/com/facebook/imagepipeline/producers/LocalVideoThumbnailProducerTest.java
@@ -77,7 +77,8 @@
   public void setUp() throws Exception {
     MockitoAnnotations.initMocks(this);
     mExecutor = new TestExecutorService(new FakeClock());
-    mLocalVideoThumbnailProducer = new LocalVideoThumbnailProducer(mExecutor);
+    mLocalVideoThumbnailProducer = new LocalVideoThumbnailProducer(mExecutor,
+        RuntimeEnvironment.application.getContentResolver());
     mFile = new File(RuntimeEnvironment.application.getExternalFilesDir(null), TEST_FILENAME);
 
     mockStatic(ThumbnailUtils.class);
