diff --git a/drawee/src/main/java/com/facebook/drawee/generic/WrappingUtils.java b/drawee/src/main/java/com/facebook/drawee/generic/WrappingUtils.java
index 2eb9813b2..d9b759e98 100644
--- a/drawee/src/main/java/com/facebook/drawee/generic/WrappingUtils.java
+++ b/drawee/src/main/java/com/facebook/drawee/generic/WrappingUtils.java
@@ -174,6 +174,8 @@ static void updateOverlayColorRounding(
    * its rounding parameters are updated.
    * <li>If rounding mode is not BITMAP_ONLY and the child is rounded,
    * its rounding parameters are reset so that no rounding occurs.
+   * <li>If rounding mode is OUTLINE no rounding happens here at the leaf drawable level.
+   * Instead rounding is done at the view level.
    * </ul>
    */
   static void updateLeafRounding(
diff --git a/drawee/src/main/java/com/facebook/drawee/view/GenericDraweeView.java b/drawee/src/main/java/com/facebook/drawee/view/GenericDraweeView.java
index 7e7f7b3a2..dd965cd31 100644
--- a/drawee/src/main/java/com/facebook/drawee/view/GenericDraweeView.java
+++ b/drawee/src/main/java/com/facebook/drawee/view/GenericDraweeView.java
@@ -13,12 +13,17 @@
 
 import android.annotation.TargetApi;
 import android.content.Context;
+import android.graphics.Outline;
 import android.os.Build;
+import android.support.annotation.RequiresApi;
 import android.util.AttributeSet;
+import android.view.View;
+import android.view.ViewOutlineProvider;
 
 import com.facebook.drawee.generic.GenericDraweeHierarchy;
 import com.facebook.drawee.generic.GenericDraweeHierarchyBuilder;
 import com.facebook.drawee.generic.GenericDraweeHierarchyInflater;
+import com.facebook.drawee.generic.RoundingParams;
 
 /**
  * DraweeView that uses GenericDraweeHierarchy.
@@ -60,4 +65,74 @@ protected void inflateHierarchy(Context context, @Nullable AttributeSet attrs) {
     setAspectRatio(builder.getDesiredAspectRatio());
     setHierarchy(builder.build());
   }
+
+  /**
+   * Sets the rounding params.
+   */
+  public void setRoundingParams(@Nullable RoundingParams roundingParams) {
+    if (hasHierarchy()) {
+      getHierarchy().setRoundingParams(roundingParams);
+    }
+    if (Build.VERSION.SDK_INT >= 21) {
+      if (roundingParams != null) {
+        this.setClipToOutline(true);
+        this.setOutlineProvider(getRoundedClipOutlineProvider());
+      } else {
+        this.setClipToOutline(false);
+        this.setOutlineProvider(null);
+      }
+    }
+  }
+
+  /**
+   * Gets the rounding params.
+   */
+  @Nullable
+  public RoundingParams getRoundingParams() {
+    if (hasHierarchy()) {
+      return getHierarchy().getRoundingParams();
+    } else {
+      return null;
+    }
+  }
+
+  /**
+   * Cached return value of {@link #getRoundedClipOutlineProvider}.
+   */
+  private static ViewOutlineProvider mRoundedClipOutlineProvider;
+
+  /**
+   * Creates an outline used for clipping the image so that it has rounded corners.
+   */
+  @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
+  private static ViewOutlineProvider getRoundedClipOutlineProvider() {
+    if (mRoundedClipOutlineProvider == null) {
+      mRoundedClipOutlineProvider = new ViewOutlineProvider() {
+        @Override
+        public void getOutline(View view, Outline outline) {
+          if (!(view instanceof GenericDraweeView)) {
+            throw new AssertionError(
+                "For rounded corners using the outline API, View must be a GenericDraweeView");
+          }
+          final GenericDraweeView dv = (GenericDraweeView) view;
+          RoundingParams roundingParams = dv.getHierarchy().getRoundingParams();
+          if (roundingParams.getRoundAsCircle()) {
+            int w = view.getWidth();
+            int h = view.getHeight();
+            if (w > h) {
+              int l = (w - h) / 2;
+              outline.setOval(l, 0, l + h, h);
+            } else {
+              int t = (h - w) / 2;
+              outline.setOval(0, t, w, t + w);
+            }
+          } else {
+            // TODO radius
+            outline.setRoundRect(0, 0, view.getWidth(), view.getHeight(), 16);
+          }
+        }
+      };
+    }
+    return mRoundedClipOutlineProvider;
+  }
 }
diff --git a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeRoundedCornersFragment.java b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeRoundedCornersFragment.java
index 5c02ec172..a53b04e19 100644
--- a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeRoundedCornersFragment.java
+++ b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeRoundedCornersFragment.java
@@ -171,13 +171,13 @@ private void changeDraweeViewScaleType(
     hierarchy.setActualImageScaleType(scaleType);
     hierarchy.setActualImageFocusPoint(focusPoint != null ? focusPoint : new PointF(0.5f, 0.5f));
 
-    final RoundingParams roundingParams = Preconditions.checkNotNull(hierarchy.getRoundingParams());
+    final RoundingParams roundingParams = Preconditions.checkNotNull(draweeView.getRoundingParams());
     if (roundingMethod == RoundingParams.RoundingMethod.OVERLAY_COLOR) {
       roundingParams.setOverlayColor(mWindowBackgroundColor);
     } else {
       roundingParams.setRoundingMethod(roundingMethod);
     }
-    hierarchy.setRoundingParams(roundingParams);
+    draweeView.setRoundingParams(roundingParams);
   }
 
   private RoundingParams.RoundingMethod getRoundingMethodForScaleType(ScaleType scaleType) {
