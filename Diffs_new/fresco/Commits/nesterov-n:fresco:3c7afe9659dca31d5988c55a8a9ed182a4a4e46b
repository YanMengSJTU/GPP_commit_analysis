diff --git a/imagepipeline-base/src/main/java/com/facebook/imagepipeline/common/RotationOptions.java b/imagepipeline-base/src/main/java/com/facebook/imagepipeline/common/RotationOptions.java
index 3846daa69..a38890ae3 100644
--- a/imagepipeline-base/src/main/java/com/facebook/imagepipeline/common/RotationOptions.java
+++ b/imagepipeline-base/src/main/java/com/facebook/imagepipeline/common/RotationOptions.java
@@ -39,7 +39,8 @@
       ROTATE_90,
       ROTATE_180,
       ROTATE_270,
-      USE_EXIF_ROTATION_ANGLE
+      USE_EXIF_ROTATION_ANGLE,
+      DISABLE_ROTATION
   })
   @Retention(RetentionPolicy.SOURCE)
   private @interface Rotation {}
@@ -58,6 +59,7 @@
   public static final int ROTATE_180 = 180;
   public static final int ROTATE_270 = 270;
   private static final int USE_EXIF_ROTATION_ANGLE = -1;
+  private static final int DISABLE_ROTATION = -2;
 
   private final @Rotation int mRotation;
   private final boolean mDeferUntilRendered;
@@ -75,6 +77,14 @@ public static RotationOptions autoRotate() {
     return new RotationOptions(USE_EXIF_ROTATION_ANGLE, false);
   }
 
+  /**
+   * Creates a new set of rotation options for JPEG images to load image without any rotation.
+   *
+   */
+  public static RotationOptions disableRotation() {
+    return new RotationOptions(DISABLE_ROTATION, false);
+  }
+
   /**
    * Creates a new set of rotation options for JPEG images to use the rotation angle in the image
    * metadata.
@@ -105,6 +115,10 @@ public boolean useImageMetadata() {
     return mRotation == USE_EXIF_ROTATION_ANGLE;
   }
 
+  public boolean rotationEnabled() {
+    return mRotation != DISABLE_ROTATION;
+  }
+
   /**
    * Gets the explicit angle to rotate to, if one was set.
    *
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ResizeAndRotateProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ResizeAndRotateProducer.java
index 039dc9642..9a6521ac4 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ResizeAndRotateProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ResizeAndRotateProducer.java
@@ -46,6 +46,7 @@
   private static final String ORIGINAL_SIZE_KEY = "Original size";
   private static final String REQUESTED_SIZE_KEY = "Requested size";
   private static final String FRACTION_KEY = "Fraction";
+  private static final int FULL_ROUND = 360;
 
   @VisibleForTesting static final int DEFAULT_JPEG_QUALITY = 85;
   @VisibleForTesting static final int MAX_JPEG_SCALE_NUMERATOR = JpegTranscoder.SCALE_DENOMINATOR;
@@ -284,13 +285,16 @@ private static int getScaleNumerator(
   }
 
   private static int getRotationAngle(RotationOptions rotationOptions, EncodedImage encodedImage) {
+    if (!rotationOptions.rotationEnabled()) {
+      return RotationOptions.NO_ROTATION;
+    }
     int rotationFromMetadata = extractOrientationFromMetadata(encodedImage);
     if (rotationOptions.useImageMetadata()) {
       return rotationFromMetadata;
     }
     int angle = rotationFromMetadata + rotationOptions.getForcedAngle();
-    while (angle >= 360) {
-      angle -= 360;
+    while (angle >= FULL_ROUND) {
+      angle -= FULL_ROUND;
     }
     return angle;
   }
diff --git a/imagepipeline/src/test/java/com/facebook/imagepipeline/producers/ResizeAndRotateProducerTest.java b/imagepipeline/src/test/java/com/facebook/imagepipeline/producers/ResizeAndRotateProducerTest.java
index 365385fee..413ce8d89 100644
--- a/imagepipeline/src/test/java/com/facebook/imagepipeline/producers/ResizeAndRotateProducerTest.java
+++ b/imagepipeline/src/test/java/com/facebook/imagepipeline/producers/ResizeAndRotateProducerTest.java
@@ -167,8 +167,31 @@ public void testDoesNotTransformIfImageRotationAngleUnkown() {
   }
 
   @Test
-  public void testDoesNotTransformIfNotRequested() {
+  public void testDoesNotTransformIfRotationDisabled() {
+    whenResizingEnabled();
+    whenDisableRotation();
+
+    provideIntermediateResult(DefaultImageFormats.JPEG);
+    verifyIntermediateResultPassedThroughUnchanged();
+
+    provideFinalResult(DefaultImageFormats.JPEG);
+    verifyFinalResultPassedThroughUnchanged();
+    verifyZeroJpegTranscoderInteractions();
+  }
+
+  @Test
+  public void testDoesNotTransformIfMetadataAngleAndRequestedRotationHaveOppositeValues() {
     whenResizingEnabled();
+    whenRequestSpecificRotation(RotationOptions.ROTATE_270);
+
+    provideFinalResult(DefaultImageFormats.JPEG, 400, 200, 90);
+    verifyFinalResultPassedThroughUnchanged();
+    verifyZeroJpegTranscoderInteractions();
+  }
+
+  @Test
+  public void testDoesNotTransformIfNotRequested() {
+    whenResizingDisabled();
     whenRequestsRotationFromMetadataWithoutDeferring();
 
     provideIntermediateResult(DefaultImageFormats.JPEG);
@@ -405,9 +428,9 @@ public void testDoesRotateWhenSpecificRotationRequested() {
   public void testDoesNothingWhenNotAskedToDoAnything() {
     whenResizingEnabled();
     whenRequestWidthAndHeight(0, 0);
-    whenRequestSpecificRotation(RotationOptions.NO_ROTATION);
+    whenDisableRotation();
 
-    provideFinalResult(DefaultImageFormats.JPEG, 400, 200, 0);
+    provideFinalResult(DefaultImageFormats.JPEG, 400, 200, 90);
     verifyAFinalResultPassedThrough();
     verifyZeroJpegTranscoderInteractions();
   }
@@ -567,6 +590,11 @@ private void whenRequestSpecificRotation(
         .thenReturn(RotationOptions.forceRotation(rotationAngle));
   }
 
+  private void whenDisableRotation() {
+    when(mImageRequest.getRotationOptions())
+        .thenReturn(RotationOptions.disableRotation());
+  }
+
   private void whenRequestsRotationFromMetadataWithDeferringAllowed() {
     when(mImageRequest.getRotationOptions())
         .thenReturn(RotationOptions.autoRotateAtRenderTime());
