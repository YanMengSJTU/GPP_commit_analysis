diff --git a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeController.java b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeController.java
index 23a93d70b..a81ff168a 100644
--- a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeController.java
+++ b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeController.java
@@ -60,7 +60,7 @@
   @Nullable
   private final ImmutableList<DrawableFactory> mGlobalDrawableFactories;
 
-  private @Nullable MemoryCache<CacheKey, CloseableImage> mMemoryCache;
+  private final @Nullable MemoryCache<CacheKey, CloseableImage> mMemoryCache;
 
   private CacheKey mCacheKey;
 
@@ -122,47 +122,18 @@ private static boolean hasTransformableExifOrientation(
         && closeableStaticBitmap.getExifOrientation() != ExifInterface.ORIENTATION_UNDEFINED;
   }
 
-  public PipelineDraweeController(
-          Resources resources,
-          DeferredReleaser deferredReleaser,
-          DrawableFactory animatedDrawableFactory,
-          Executor uiThreadExecutor,
-          MemoryCache<CacheKey, CloseableImage> memoryCache,
-          Supplier<DataSource<CloseableReference<CloseableImage>>> dataSourceSupplier,
-          String id,
-          CacheKey cacheKey,
-          Object callerContext) {
-    this(
-        resources,
-        deferredReleaser,
-        animatedDrawableFactory,
-        uiThreadExecutor,
-        memoryCache,
-        dataSourceSupplier,
-        id,
-        cacheKey,
-        callerContext,
-        null);
-  }
-
   public PipelineDraweeController(
       Resources resources,
       DeferredReleaser deferredReleaser,
       DrawableFactory animatedDrawableFactory,
       Executor uiThreadExecutor,
-      MemoryCache<CacheKey, CloseableImage> memoryCache,
-      Supplier<DataSource<CloseableReference<CloseableImage>>> dataSourceSupplier,
-      String id,
-      CacheKey cacheKey,
-      Object callerContext,
+      @Nullable MemoryCache<CacheKey, CloseableImage> memoryCache,
       @Nullable ImmutableList<DrawableFactory> globalDrawableFactories) {
-    super(deferredReleaser, uiThreadExecutor, id, callerContext);
+    super(deferredReleaser, uiThreadExecutor, null, null);
     mResources = resources;
     mAnimatedDrawableFactory = animatedDrawableFactory;
-    mMemoryCache = memoryCache;
-    mCacheKey = cacheKey;
     mGlobalDrawableFactories = globalDrawableFactories;
-    init(dataSourceSupplier);
+    mMemoryCache = memoryCache;
   }
 
   /**
@@ -180,7 +151,7 @@ public void initialize(
       CacheKey cacheKey,
       Object callerContext,
       @Nullable ImmutableList<DrawableFactory> customDrawableFactories,
-      ImageOriginListener imageOriginListener) {
+      @Nullable ImageOriginListener imageOriginListener) {
     super.initialize(id, callerContext);
     init(dataSourceSupplier);
     mCacheKey = cacheKey;
@@ -363,6 +334,10 @@ protected void onImageLoadedFromCacheImmediately(
     }
   }
 
+  protected Supplier<DataSource<CloseableReference<CloseableImage>>> getDataSourceSupplier() {
+    return mDataSourceSupplier;
+  }
+
   @Override
   public String toString() {
     return Objects.toStringHelper(this)
diff --git a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerBuilder.java b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerBuilder.java
index 2eb9fa3ea..1b6c8ea79 100644
--- a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerBuilder.java
+++ b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerBuilder.java
@@ -107,23 +107,16 @@ protected PipelineDraweeController obtainController() {
     final String controllerId = generateUniqueControllerId();
     if (oldController instanceof PipelineDraweeController) {
       controller = (PipelineDraweeController) oldController;
-      controller.initialize(
-          obtainDataSourceSupplier(controllerId),
-          controllerId,
-          getCacheKey(),
-          getCallerContext(),
-          mCustomDrawableFactories,
-          mImageOriginListener);
     } else {
-      controller =
-          mPipelineDraweeControllerFactory.newController(
-              obtainDataSourceSupplier(controllerId),
-              controllerId,
-              getCacheKey(),
-              getCallerContext(),
-              mCustomDrawableFactories,
-              mImageOriginListener);
+      controller = mPipelineDraweeControllerFactory.newController();
     }
+    controller.initialize(
+        obtainDataSourceSupplier(controllerId),
+        controllerId,
+        getCacheKey(),
+        getCallerContext(),
+        mCustomDrawableFactories,
+        mImageOriginListener);
     return controller;
   }
 
diff --git a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerFactory.java b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerFactory.java
index f08605d5a..b0e4f9826 100644
--- a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerFactory.java
+++ b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerFactory.java
@@ -10,11 +10,7 @@
 import android.content.res.Resources;
 import com.facebook.cache.common.CacheKey;
 import com.facebook.common.internal.ImmutableList;
-import com.facebook.common.internal.Preconditions;
 import com.facebook.common.internal.Supplier;
-import com.facebook.common.references.CloseableReference;
-import com.facebook.datasource.DataSource;
-import com.facebook.drawee.backends.pipeline.info.ImageOriginListener;
 import com.facebook.drawee.components.DeferredReleaser;
 import com.facebook.imagepipeline.cache.MemoryCache;
 import com.facebook.imagepipeline.drawable.DrawableFactory;
@@ -22,9 +18,7 @@
 import java.util.concurrent.Executor;
 import javax.annotation.Nullable;
 
-/**
- * Default implementation of {@link PipelineDraweeControllerFactory}.
- */
+/** Default implementation of {@link PipelineDraweeControllerFactory}. */
 public class PipelineDraweeControllerFactory {
 
   private Resources mResources;
@@ -32,10 +26,8 @@
   private DrawableFactory mAnimatedDrawableFactory;
   private Executor mUiThreadExecutor;
   private MemoryCache<CacheKey, CloseableImage> mMemoryCache;
-  @Nullable
-  private ImmutableList<DrawableFactory> mDrawableFactories;
-  @Nullable
-  private Supplier<Boolean> mDebugOverlayEnabledSupplier;
+  @Nullable private ImmutableList<DrawableFactory> mDrawableFactories;
+  @Nullable private Supplier<Boolean> mDebugOverlayEnabledSupplier;
 
   public void init(
       Resources resources,
@@ -54,24 +46,7 @@ public void init(
     mDebugOverlayEnabledSupplier = debugOverlayEnabledSupplier;
   }
 
-  public PipelineDraweeController newController(
-      Supplier<DataSource<CloseableReference<CloseableImage>>> dataSourceSupplier,
-      String id,
-      CacheKey cacheKey,
-      Object callerContext) {
-    return newController(dataSourceSupplier, id, cacheKey, callerContext, null, null);
-  }
-
-  public PipelineDraweeController newController(
-      Supplier<DataSource<CloseableReference<CloseableImage>>> dataSourceSupplier,
-      String id,
-      CacheKey cacheKey,
-      Object callerContext,
-      @Nullable ImmutableList<DrawableFactory> customDrawableFactories,
-      @Nullable ImageOriginListener imageOriginListener) {
-    Preconditions.checkState(mResources != null, "init() not called");
-    // Field values passed as arguments so that any subclass of PipelineDraweeControllerFactory
-    // can simply override internalCreateController() and return a custom Drawee controller
+  public PipelineDraweeController newController() {
     PipelineDraweeController controller =
         internalCreateController(
             mResources,
@@ -79,16 +54,10 @@ public PipelineDraweeController newController(
             mAnimatedDrawableFactory,
             mUiThreadExecutor,
             mMemoryCache,
-            mDrawableFactories,
-            customDrawableFactories,
-            dataSourceSupplier,
-            id,
-            cacheKey,
-            callerContext);
+            mDrawableFactories);
     if (mDebugOverlayEnabledSupplier != null) {
       controller.setDrawDebugOverlay(mDebugOverlayEnabledSupplier.get());
     }
-    controller.setImageOriginListener(imageOriginListener);
     return controller;
   }
 
@@ -98,25 +67,13 @@ protected PipelineDraweeController internalCreateController(
       DrawableFactory animatedDrawableFactory,
       Executor uiThreadExecutor,
       MemoryCache<CacheKey, CloseableImage> memoryCache,
-      @Nullable ImmutableList<DrawableFactory> globalDrawableFactories,
-      @Nullable ImmutableList<DrawableFactory> customDrawableFactories,
-      Supplier<DataSource<CloseableReference<CloseableImage>>> dataSourceSupplier,
-      String id,
-      CacheKey cacheKey,
-      Object callerContext) {
-    PipelineDraweeController controller =
-        new PipelineDraweeController(
-            resources,
-            deferredReleaser,
-            animatedDrawableFactory,
-            uiThreadExecutor,
-            memoryCache,
-            dataSourceSupplier,
-            id,
-            cacheKey,
-            callerContext,
-            globalDrawableFactories);
-    controller.setCustomDrawableFactories(customDrawableFactories);
-    return controller;
+      @Nullable ImmutableList<DrawableFactory> drawableFactories) {
+    return new PipelineDraweeController(
+        resources,
+        deferredReleaser,
+        animatedDrawableFactory,
+        uiThreadExecutor,
+        memoryCache,
+        drawableFactories);
   }
 }
diff --git a/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java b/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java
index a424b1a64..bb2252b96 100644
--- a/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java
+++ b/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java
@@ -90,6 +90,7 @@
   private @Nullable DataSource<T> mDataSource;
   private @Nullable T mFetchedImage;
   private @Nullable Drawable mDrawable;
+  private boolean mJustConstructed = true;
 
   public AbstractDraweeController(
       DeferredReleaser deferredReleaser,
@@ -98,7 +99,7 @@ public AbstractDraweeController(
       Object callerContext) {
     mDeferredReleaser = deferredReleaser;
     mUiThreadImmediateExecutor = uiThreadImmediateExecutor;
-    init(id, callerContext, true);
+    init(id, callerContext);
   }
 
   /**
@@ -109,13 +110,14 @@ public AbstractDraweeController(
    * @param callerContext tag and context for this controller
    */
   protected void initialize(String id, Object callerContext) {
-    init(id, callerContext, false);
+    init(id, callerContext);
+    mJustConstructed = false;
   }
 
-  private void init(String id, Object callerContext, boolean justConstructed) {
+  private void init(String id, Object callerContext) {
     mEventTracker.recordEvent(Event.ON_INIT_CONTROLLER);
     // cancel deferred release
-    if (!justConstructed && mDeferredReleaser != null) {
+    if (!mJustConstructed && mDeferredReleaser != null) {
       mDeferredReleaser.cancelDeferredRelease(this);
     }
     // reinitialize mutable state (fetch state)
