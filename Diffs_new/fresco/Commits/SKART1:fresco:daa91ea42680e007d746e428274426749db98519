diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/DiskCache.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/DiskCache.java
index 606f23769..c6f14d34d 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/DiskCache.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/DiskCache.java
@@ -24,7 +24,7 @@
   private static final String DISK_CACHE_SUBDIR = "thumbnails";
 
   //Singleton
-  private static DiskCache diskCache = null;
+  private static volatile DiskCache diskCache = null;
 
   private Semaphore writeLock = new Semaphore(1);
   private final ConcurrentHashMap<Integer, Boolean> concurrentHashMap = new ConcurrentHashMap<>(6);
@@ -65,31 +65,35 @@ private DiskCache(Context context) {
 
 
   @Override
-  public InfoStruct getFile(String url) {
-    InfoStruct infoStruct = new InfoStruct();
+  public CacheInfo getCacheInfo(String url) {
+    CacheInfo cacheInfo = new CacheInfo();
 
-    infoStruct.setFileName(url.hashCode());
+    cacheInfo.setFileName(url.hashCode());
 
     //
-    File fileInp = new File(cacheDir, String.valueOf(infoStruct.getFileName()));
+    File fileInp = new File(cacheDir, String.valueOf(cacheInfo.getFileName()));
 
 
     if(fileInp.length() < Integer.MAX_VALUE) {
-      infoStruct.setFileOffset((int) fileInp.length());
+      cacheInfo.setFileOffset((int) fileInp.length());
     } else {
-      infoStruct.setFileOffset(0);
+      cacheInfo.setFileOffset(0);
     }
 
-    infoStruct.setFile(fileInp);
+    cacheInfo.setFile(fileInp);
 
-    return infoStruct;
+    return cacheInfo;
   }
 
   @Override
-  public InputStream getInputStream(InfoStruct infoStruct) {
+  public InputStream getInputStream(CacheInfo cacheInfo) {
+    if(cacheInfo == null){
+      return null;
+    }
+
     InputStream is = null;
     try {
-      File file = infoStruct.getFile();
+      File file = cacheInfo.getFile();
       if (!file.exists()) {
         if (file.createNewFile()) {
           is = new FileInputStream(file);
@@ -104,16 +108,21 @@ public InputStream getInputStream(InfoStruct infoStruct) {
   }
 
   @Override
-  public OutputStream getOutputStream(InfoStruct infoStruct) {
+  public OutputStream getOutputStream(CacheInfo cacheInfo) {
     FileOutputStream fileOutputStream = null;
+
+    if(cacheInfo == null){
+      return null;
+    }
+
     try {
-      File file = infoStruct.getFile();
+      File file = cacheInfo.getFile();
       if (!file.exists()) {
         if (file.createNewFile()) {
-          fileOutputStream = getOutputStreamMonopole(infoStruct);
+          fileOutputStream = getOutputStreamMonopole(cacheInfo);
         }
       } else {
-        fileOutputStream = getOutputStreamMonopole(infoStruct);
+        fileOutputStream = getOutputStreamMonopole(cacheInfo);
       }
     } catch (IOException e) {
       e.printStackTrace();
@@ -122,15 +131,15 @@ public OutputStream getOutputStream(InfoStruct infoStruct) {
   }
 
   @Nullable
-  private FileOutputStream getOutputStreamMonopole(InfoStruct infoStruct) throws FileNotFoundException {
+  private FileOutputStream getOutputStreamMonopole(CacheInfo cacheInfo) throws FileNotFoundException {
     try {
       writeLock.acquire();
-      Boolean isProcessing = concurrentHashMap.putIfAbsent(infoStruct.getFileName(), false);
+      Boolean isProcessing = concurrentHashMap.putIfAbsent(cacheInfo.getFileName(), false);
 
       if (isProcessing != null && isProcessing) {
         FLog.e(DiskCache.class.getName(), " Multiply writers to one file!");
       } else {
-        return new FileOutputStream(infoStruct.getFile(), true);
+        return new FileOutputStream(cacheInfo.getFile(), true);
       }
 
     } catch (InterruptedException e) {
@@ -148,12 +157,12 @@ public void clearCache() {
   }
 
   @Override
-  public void onFinished(InfoStruct infoStruct) {
+  public void onFinished(CacheInfo cacheInfo) {
     try {
       writeLock.acquire();
 
-      if (infoStruct.getFile().delete()) {
-        concurrentHashMap.remove(infoStruct.getFileName());
+      if (cacheInfo.getFile().delete()) {
+        concurrentHashMap.remove(cacheInfo.getFileName());
       }
     } catch (InterruptedException e) {
       e.printStackTrace();
@@ -163,11 +172,11 @@ public void onFinished(InfoStruct infoStruct) {
   }
 
   @Override
-  public void onError(InfoStruct infoStruct, Throwable throwable) {
+  public void onError(CacheInfo cacheInfo, Throwable throwable) {
     try {
       writeLock.acquire();
 
-      concurrentHashMap.put(infoStruct.getFileName(), false);
+      concurrentHashMap.put(cacheInfo.getFileName(), false);
     } catch (InterruptedException e) {
       e.printStackTrace();
     } finally {
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/DiskCacheInterface.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/DiskCacheInterface.java
index 5d3f7e881..d6412df0c 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/DiskCacheInterface.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/DiskCacheInterface.java
@@ -5,23 +5,32 @@
 import java.io.OutputStream;
 
 public interface DiskCacheInterface {
-  InfoStruct getFile(String url);
+  CacheInfo getCacheInfo(String url);
 
-  InputStream getInputStream(InfoStruct infoStruct);
+  InputStream getInputStream(CacheInfo cacheInfo);
 
-  OutputStream getOutputStream(InfoStruct infoStruct);
+  OutputStream getOutputStream(CacheInfo cacheInfo);
 
   void clearCache();
 
-  void onFinished(InfoStruct infoStruct);
+  void onFinished(CacheInfo cacheInfo);
 
-  void onError(InfoStruct infoStruct, Throwable throwable);
+  void onError(CacheInfo cacheInfo, Throwable throwable);
+
+  class CacheInfo {
+    public static final int NO_OFFSET = -7;
+    public static final int NO_FILENAME = -8;
 
-  class InfoStruct {
     private int fileName;
     private int fileOffset;
     private File file;
 
+    public CacheInfo() {
+      fileName = NO_OFFSET;
+      fileOffset = NO_FILENAME;
+      file = null;
+    }
+
     public int getFileName() {
       return fileName;
     }
@@ -50,17 +59,17 @@ public void setFile(File file) {
 
   public static class DumbDiskCahce implements DiskCacheInterface {
     @Override
-    public InfoStruct getFile(String url) {
-      return null;
+    public CacheInfo getCacheInfo(String url) {
+      return new CacheInfo();
     }
 
     @Override
-    public InputStream getInputStream(InfoStruct infoStruct) {
+    public InputStream getInputStream(CacheInfo cacheInfo) {
       return null;
     }
 
     @Override
-    public OutputStream getOutputStream(InfoStruct infoStruct) {
+    public OutputStream getOutputStream(CacheInfo cacheInfo) {
       return null;
     }
 
@@ -70,12 +79,12 @@ public void clearCache() {
     }
 
     @Override
-    public void onFinished(InfoStruct infoStruct) {
+    public void onFinished(CacheInfo cacheInfo) {
 
     }
 
     @Override
-    public void onError(InfoStruct infoStruct, Throwable throwable) {
+    public void onError(CacheInfo cacheInfo, Throwable throwable) {
 
     }
   }
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/SmartCachingFetcher.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ResumeDownloadFetcher.java
similarity index 80%
rename from imagepipeline/src/main/java/com/facebook/imagepipeline/producers/SmartCachingFetcher.java
rename to imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ResumeDownloadFetcher.java
index a63e86813..02ef4d1f4 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/SmartCachingFetcher.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ResumeDownloadFetcher.java
@@ -3,7 +3,6 @@
 import android.net.Uri;
 
 import com.facebook.common.logging.FLog;
-import com.facebook.imagepipeline.cache.DiskCache;
 import com.facebook.imagepipeline.cache.DiskCacheInterface;
 import com.facebook.imagepipeline.image.EncodedImage;
 
@@ -16,18 +15,19 @@
 import java.util.concurrent.Future;
 
 /**
- * Created by art on 2/4/16.
+ * This class
+ *
  */
-public class SmartCachingFetcher extends BaseNetworkFetcher<FetchState> {
-  private static final String TAG = SmartCachingFetcher.class.getName();
+public class ResumeDownloadFetcher extends BaseNetworkFetcher<FetchState> {
+  private static final String TAG = ResumeDownloadFetcher.class.getName();
 
   private static final int NUM_NETWORK_THREADS = 3;
 
   private final ExecutorService mExecutorService;
-  private DiskCache diskCache;
+  private DiskCacheInterface diskCache;
 
 
-  public SmartCachingFetcher(DiskCache diskCache) {
+  public ResumeDownloadFetcher(DiskCacheInterface diskCache) {
     this.diskCache = diskCache;
     mExecutorService = Executors.newFixedThreadPool(NUM_NETWORK_THREADS);
   }
@@ -53,19 +53,24 @@ public void run() {
                 String scheme = uri.getScheme();
                 String uriString = fetchState.getUri().toString();
 
-                DiskCacheInterface.InfoStruct infoStruct = diskCache.getFile(uriString);
+                DiskCacheInterface.CacheInfo cacheInfo = diskCache.getCacheInfo(uriString);
 
                 while (true) {
                   String nextUriString;
                   String nextScheme;
 
                   try {
-                    final String rangeHeader = "bytes=" + infoStruct.getFileOffset() + "-";
-                    FLog.w(TAG, "Trying offset value: " + infoStruct.getFileOffset());
-
                     URL url = new URL(uriString);
                     connection = (HttpURLConnection) url.openConnection();
-                    connection.setRequestProperty("Range", rangeHeader);
+
+                    if(cacheInfo.getFileOffset() != DiskCacheInterface.CacheInfo.NO_OFFSET) {
+                      FLog.w(TAG, "Trying offset value: " + cacheInfo.getFileOffset());
+
+                      final  String rangeHeader = "bytes=" + cacheInfo.getFileOffset() + "-";
+                      connection.setRequestProperty("Range", rangeHeader);
+                    } else {
+                      FLog.w(TAG, "No offset value");
+                    }
 
                     nextUriString = connection.getHeaderField("Location");
                     nextScheme = (nextUriString == null) ? null : Uri.parse(nextUriString).getScheme();
@@ -78,10 +83,10 @@ public void run() {
                       //If response is 206 (allows partitioning)
                       if (connection.getResponseCode() == HttpURLConnection.HTTP_PARTIAL) {
 
-                        firstInputStream = diskCache.getInputStream(infoStruct);
+                        firstInputStream = diskCache.getInputStream(cacheInfo);
                         secondInputStream = connection.getInputStream();
 
-                        outputStream = diskCache.getOutputStream(infoStruct);
+                        outputStream = diskCache.getOutputStream(cacheInfo);
                         is = new DoubleSourceStream(firstInputStream, secondInputStream, outputStream);
                       } else {
                         is = connection.getInputStream();
@@ -94,13 +99,13 @@ public void run() {
                       }
 
                       callback.onResponse(is, contentLengthValue);
-                      diskCache.onFinished(infoStruct);
+                      diskCache.onFinished(cacheInfo);
                       break;
                     }
                     uriString = nextUriString;
                     scheme = nextScheme;
                   } catch (Exception e) {
-                    diskCache.onError(infoStruct, e);
+                    diskCache.onError(cacheInfo, e);
                     callback.onFailure(e);
                     break;
                   } finally {
diff --git a/samples/redownloadingapp/src/main/java/com/facebook/samples/redownloadingapp/MainActivity.java b/samples/redownloadingapp/src/main/java/com/facebook/samples/redownloadingapp/MainActivity.java
index 8cea57cad..88cfa328e 100644
--- a/samples/redownloadingapp/src/main/java/com/facebook/samples/redownloadingapp/MainActivity.java
+++ b/samples/redownloadingapp/src/main/java/com/facebook/samples/redownloadingapp/MainActivity.java
@@ -34,12 +34,13 @@
 import com.facebook.drawee.interfaces.DraweeController;
 import com.facebook.drawee.view.SimpleDraweeView;
 import com.facebook.imagepipeline.cache.DiskCache;
+import com.facebook.imagepipeline.cache.DiskCacheInterface;
 import com.facebook.imagepipeline.core.ImagePipeline;
 import com.facebook.imagepipeline.core.ImagePipelineConfig;
 import com.facebook.imagepipeline.image.ImageInfo;
 import com.facebook.imagepipeline.listener.RequestListener;
 import com.facebook.imagepipeline.listener.RequestLoggingListener;
-import com.facebook.imagepipeline.producers.SmartCachingFetcher;
+import com.facebook.imagepipeline.producers.ResumeDownloadFetcher;
 
 
 public class MainActivity extends Activity {
@@ -53,10 +54,10 @@ protected void onCreate(Bundle savedInstanceState) {
     Set<RequestListener> listeners = new HashSet<>();
     listeners.add(new RequestLoggingListener());
 
-    final DiskCache diskCache = DiskCache.getInstance(this);
+    final DiskCacheInterface diskCache = new DiskCacheInterface.DumbDiskCahce();//DiskCache.getInstance(this);
 
     ImagePipelineConfig config = ImagePipelineConfig.newBuilder(this)
-            .setNetworkFetcher(new SmartCachingFetcher(diskCache))
+            .setNetworkFetcher(new ResumeDownloadFetcher(diskCache))
             .setRequestListeners(listeners)
             .build();
     Fresco.initialize(this, config);
