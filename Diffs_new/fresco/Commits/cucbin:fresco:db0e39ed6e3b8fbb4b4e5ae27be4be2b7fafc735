diff --git a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeController.java b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeController.java
index 4a3f74cb8..dfac716f6 100644
--- a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeController.java
+++ b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeController.java
@@ -18,12 +18,15 @@
 import com.facebook.common.internal.Supplier;
 import com.facebook.common.logging.FLog;
 import com.facebook.common.references.CloseableReference;
+import com.facebook.common.time.RealtimeSinceBootClock;
 import com.facebook.datasource.DataSource;
 import com.facebook.drawable.base.DrawableWithCaches;
 import com.facebook.drawee.backends.pipeline.info.ForwardingImageOriginListener;
 import com.facebook.drawee.backends.pipeline.info.ImageOrigin;
 import com.facebook.drawee.backends.pipeline.info.ImageOriginListener;
 import com.facebook.drawee.backends.pipeline.info.ImageOriginRequestListener;
+import com.facebook.drawee.backends.pipeline.info.ImagePerfDataListener;
+import com.facebook.drawee.backends.pipeline.info.ImagePerfMonitor;
 import com.facebook.drawee.components.DeferredReleaser;
 import com.facebook.drawee.controller.AbstractDraweeController;
 import com.facebook.drawee.debug.DebugControllerOverlayDrawable;
@@ -78,6 +81,8 @@
   // Drawable factories that are unique for a given image request
   private @Nullable ImmutableList<DrawableFactory> mCustomDrawableFactories;
 
+  private @Nullable ImagePerfMonitor mImagePerfMonitor;
+
   @GuardedBy("this")
   @Nullable
   private Set<RequestListener> mRequestListeners;
@@ -170,6 +175,20 @@ public void initialize(
     addImageOriginListener(imageOriginListener);
   }
 
+  protected synchronized void initializePerformanceMonitoring(
+      @Nullable ImagePerfDataListener imagePerfDataListener) {
+    if (mImagePerfMonitor != null) {
+      mImagePerfMonitor.reset();
+    }
+    if (imagePerfDataListener != null) {
+      if (mImagePerfMonitor == null) {
+        mImagePerfMonitor = new ImagePerfMonitor(RealtimeSinceBootClock.get(), this);
+      }
+      mImagePerfMonitor.addImagePerfDataListener(imagePerfDataListener);
+      mImagePerfMonitor.setEnabled(true);
+    }
+  }
+
   public void setDrawDebugOverlay(boolean drawDebugOverlay) {
     mDrawDebugOverlay = drawDebugOverlay;
   }
diff --git a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerBuilder.java b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerBuilder.java
index 6b8f384ce..8ddbaeffe 100644
--- a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerBuilder.java
+++ b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerBuilder.java
@@ -15,6 +15,7 @@
 import com.facebook.common.references.CloseableReference;
 import com.facebook.datasource.DataSource;
 import com.facebook.drawee.backends.pipeline.info.ImageOriginListener;
+import com.facebook.drawee.backends.pipeline.info.ImagePerfDataListener;
 import com.facebook.drawee.controller.AbstractDraweeControllerBuilder;
 import com.facebook.drawee.controller.ControllerListener;
 import com.facebook.drawee.interfaces.DraweeController;
@@ -46,6 +47,7 @@
   @Nullable
   private ImmutableList<DrawableFactory> mCustomDrawableFactories;
   @Nullable private ImageOriginListener mImageOriginListener;
+  @Nullable private ImagePerfDataListener mImagePerfDataListener;
 
   public PipelineDraweeControllerBuilder(
       Context context,
@@ -99,6 +101,12 @@ public PipelineDraweeControllerBuilder setImageOriginListener(
     return getThis();
   }
 
+  public PipelineDraweeControllerBuilder setPerfDataListener(
+      @Nullable ImagePerfDataListener imagePerfDataListener) {
+    mImagePerfDataListener = imagePerfDataListener;
+    return getThis();
+  }
+
   @Override
   protected PipelineDraweeController obtainController() {
     DraweeController oldController = getOldController();
@@ -116,6 +124,7 @@ protected PipelineDraweeController obtainController() {
         getCallerContext(),
         mCustomDrawableFactories,
         mImageOriginListener);
+    controller.initializePerformanceMonitoring(mImagePerfDataListener);
     return controller;
   }
 
diff --git a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfMonitor.java b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfMonitor.java
index a72f809cd..6c8888ae0 100644
--- a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfMonitor.java
+++ b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfMonitor.java
@@ -31,15 +31,42 @@
 
   private @Nullable List<ImagePerfDataListener> mImagePerfDataListeners;
 
+  private boolean mEnabled;
+
   public ImagePerfMonitor(
       MonotonicClock monotonicClock, PipelineDraweeController pipelineDraweeController) {
     mMonotonicClock = monotonicClock;
     mPipelineDraweeController = pipelineDraweeController;
     mImagePerfState = new ImagePerfState();
-    setupListeners();
   }
 
-  public void addImagePerfDataListener(ImagePerfDataListener imagePerfDataListener) {
+  public void setEnabled(boolean enabled) {
+    mEnabled = enabled;
+    if (enabled) {
+      setupListeners();
+      if (mImageOriginListener != null) {
+        mPipelineDraweeController.addImageOriginListener(mImageOriginListener);
+      }
+      if (mImagePerfControllerListener != null) {
+        mPipelineDraweeController.addControllerListener(mImagePerfControllerListener);
+      }
+      if (mForwardingRequestListener != null) {
+        mPipelineDraweeController.addRequestListener(mForwardingRequestListener);
+      }
+    } else {
+      if (mImageOriginListener != null) {
+        mPipelineDraweeController.removeImageOriginListener(mImageOriginListener);
+      }
+      if (mImagePerfControllerListener != null) {
+        mPipelineDraweeController.removeControllerListener(mImagePerfControllerListener);
+      }
+      if (mForwardingRequestListener != null) {
+        mPipelineDraweeController.removeRequestListener(mForwardingRequestListener);
+      }
+    }
+  }
+
+  public void addImagePerfDataListener(@Nullable ImagePerfDataListener imagePerfDataListener) {
     if (imagePerfDataListener == null) {
       return;
     }
@@ -63,7 +90,7 @@ public void clearImagePerfDataListeners() {
   }
 
   public void notifyListeners(ImagePerfState state, @ImageLoadStatus int imageLoadStatus) {
-    if (mImagePerfDataListeners == null || mImagePerfDataListeners.isEmpty()) {
+    if (!mEnabled || mImagePerfDataListeners == null || mImagePerfDataListeners.isEmpty()) {
       return;
     }
     ImagePerfData data = state.snapshot();
@@ -93,4 +120,10 @@ private void setupListeners() {
           new ForwardingRequestListener(mImagePerfRequestListener, mImageOriginRequestListener);
     }
   }
+
+  public void reset() {
+    clearImagePerfDataListeners();
+    setEnabled(false);
+    mImagePerfState.reset();
+  }
 }
diff --git a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfState.java b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfState.java
index 3aa42d653..62bb9973b 100644
--- a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfState.java
+++ b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfState.java
@@ -35,6 +35,25 @@
   private boolean mIsSuccessful;
   private boolean mIsPrefetch;
 
+  public void reset() {
+    mRequestId = null;
+    mImageRequest = null;
+    mCallerContext = null;
+    mImageInfo = null;
+
+    mControllerSubmitTimeMs = UNSET;
+    mControllerFinalImageSetTimeMs = UNSET;
+    mControllerFailureTimeMs = UNSET;
+
+    mImageRequestStartTimeMs = UNSET;
+    mImageRequestEndTimeMs = UNSET;
+
+    mImageOrigin = ImageOrigin.UNKNOWN;
+    mIsCanceled = false;
+    mIsSuccessful = false;
+    mIsPrefetch = false;
+  }
+
   public void setRequestId(@Nullable String requestId) {
     mRequestId = requestId;
   }
