diff --git a/drawee/src/main/java/com/facebook/drawee/generic/GenericDraweeHierarchy.java b/drawee/src/main/java/com/facebook/drawee/generic/GenericDraweeHierarchy.java
index e55a2ff27..ea0511e19 100644
--- a/drawee/src/main/java/com/facebook/drawee/generic/GenericDraweeHierarchy.java
+++ b/drawee/src/main/java/com/facebook/drawee/generic/GenericDraweeHierarchy.java
@@ -113,9 +113,10 @@
     // array of layers
     Drawable[] layers = new Drawable[numLayers];
     layers[BACKGROUND_IMAGE_INDEX] = buildBranch(builder.getBackground(), null);
-    layers[PLACEHOLDER_IMAGE_INDEX] = buildBranch(
+    layers[PLACEHOLDER_IMAGE_INDEX] = buildPlaceHolderImageBranch(
         builder.getPlaceholderImage(),
-        builder.getPlaceholderImageScaleType());
+        builder.getPlaceholderImageScaleType(),
+        builder.getPlaceholderImageBorderDisable());
     layers[ACTUAL_IMAGE_INDEX] = buildActualImageBranch(
         mActualImageWrapper,
         builder.getActualImageScaleType(),
@@ -159,6 +160,24 @@
     resetFade();
   }
 
+  @Nullable
+  private Drawable buildPlaceHolderImageBranch(@Nullable Drawable drawable,
+                                               @Nullable ScalingUtils.ScaleType scaleType,
+                                               boolean placeHolderImageBorderDisable){
+    if (!placeHolderImageBorderDisable) {
+      return buildBranch(drawable, scaleType);
+    }
+    int borderColor = mRoundingParams.getBorderColor();
+    float borderWidth = mRoundingParams.getBorderWidth();
+
+    //if set the roundingBorderOnPlaceHolderDisable attributes, set the reset the border
+    mRoundingParams.setBorder(Color.TRANSPARENT,0);
+    drawable = buildBranch(drawable, scaleType);
+    //when the placeholder image load finish,set the border back,avoid effect the actual image
+    mRoundingParams.setBorder(borderColor, borderWidth);
+    return drawable;
+  }
+
   @Nullable
   private Drawable buildActualImageBranch(
       Drawable drawable,
@@ -343,6 +362,24 @@ private void setChildDrawableAtIndex(int index, @Nullable Drawable drawable) {
     getParentDrawableAtIndex(index).setDrawable(drawable);
   }
 
+  /**
+   * Sets the drawable at the specified index while keeping the old scale type and rounding.
+   * In case the given drawable is null, scale type gets cleared too.
+   */
+  private void setChildDrawableAtIndex(int index, @Nullable Drawable drawable, boolean borderValid) {
+    if (drawable == null) {
+      mFadeDrawable.setDrawable(index, null);
+      return;
+    }
+    if (!borderValid) {
+      RoundingParams roundingParams = mRoundingParams;
+      roundingParams.setBorder(Color.TRANSPARENT, 0);
+      drawable = WrappingUtils.maybeApplyLeafRounding(drawable, roundingParams, mResources);
+    }
+    drawable = WrappingUtils.maybeApplyLeafRounding(drawable, mRoundingParams, mResources);
+    getParentDrawableAtIndex(index).setDrawable(drawable);
+  }
+
   /**
    * Gets the ScaleTypeDrawable at the specified index.
    * In case there is no child at the specified index, a NullPointerException is thrown.
@@ -418,6 +455,11 @@ public void setPlaceholderImage(Drawable drawable, ScalingUtils.ScaleType scaleT
     getScaleTypeDrawableAtIndex(PLACEHOLDER_IMAGE_INDEX).setScaleType(scaleType);
   }
 
+  public void setPlaceholderImage(Drawable drawable, boolean borderValid) {
+    setChildDrawableAtIndex(PLACEHOLDER_IMAGE_INDEX, drawable, borderValid);
+  }
+
+
   /**
    * @return true if there is a placeholder image set.
    */
@@ -450,6 +492,7 @@ public void setPlaceholderImage(int resourceId, ScalingUtils.ScaleType scaleType
     setPlaceholderImage(mResources.getDrawable(resourceId), scaleType);
   }
 
+
   /** Sets a new failure drawable with old scale type. */
   public void setFailureImage(@Nullable Drawable drawable) {
     setChildDrawableAtIndex(FAILURE_IMAGE_INDEX, drawable);
@@ -584,4 +627,5 @@ public RoundingParams getRoundingParams() {
   public boolean hasImage() {
     return mActualImageWrapper.getDrawable() != mEmptyActualImageDrawable;
   }
+
 }
diff --git a/drawee/src/main/java/com/facebook/drawee/generic/GenericDraweeHierarchyBuilder.java b/drawee/src/main/java/com/facebook/drawee/generic/GenericDraweeHierarchyBuilder.java
index abc11f758..d752f10f2 100644
--- a/drawee/src/main/java/com/facebook/drawee/generic/GenericDraweeHierarchyBuilder.java
+++ b/drawee/src/main/java/com/facebook/drawee/generic/GenericDraweeHierarchyBuilder.java
@@ -44,6 +44,7 @@
 
   private Drawable mPlaceholderImage;
   private @Nullable ScalingUtils.ScaleType mPlaceholderImageScaleType;
+  private boolean mPlaceholderImageBorderDisable;
 
   private Drawable mRetryImage;
   private ScalingUtils.ScaleType mRetryImageScaleType;
@@ -84,6 +85,7 @@ private void init() {
 
     mPlaceholderImage = null;
     mPlaceholderImageScaleType = DEFAULT_SCALE_TYPE;
+    mPlaceholderImageBorderDisable = false;
 
     mRetryImage = null;
     mRetryImageScaleType = DEFAULT_SCALE_TYPE;
@@ -242,6 +244,27 @@ public GenericDraweeHierarchyBuilder setPlaceholderImage(
     return this;
   }
 
+  /**
+   * sets the optional for disable the rounding when the actual image fail.
+   *
+   * <p>If not set.the rounding will exist,when the actual image fail.
+   *
+   * @param placeholderImageBorderDisable the optional about disable the rounding when the actual image fail
+   * @return modified instance of this builder
+   */
+  public GenericDraweeHierarchyBuilder setPlaceholderImageBorderDisable(boolean placeholderImageBorderDisable) {
+    mPlaceholderImageBorderDisable = placeholderImageBorderDisable;
+    return this;
+  }
+
+  /**
+   * gets the optional about disable the rounding when the actual image fail.
+   * @return the optional about disable rounding
+   */
+  public boolean getPlaceholderImageBorderDisable() {
+    return mPlaceholderImageBorderDisable;
+  }
+
   /**
    * Sets the retry image.
    *
diff --git a/drawee/src/main/java/com/facebook/drawee/generic/GenericDraweeHierarchyInflater.java b/drawee/src/main/java/com/facebook/drawee/generic/GenericDraweeHierarchyInflater.java
index 1037220fb..af92d3f74 100644
--- a/drawee/src/main/java/com/facebook/drawee/generic/GenericDraweeHierarchyInflater.java
+++ b/drawee/src/main/java/com/facebook/drawee/generic/GenericDraweeHierarchyInflater.java
@@ -154,6 +154,9 @@ public static GenericDraweeHierarchyBuilder updateBuilder(
           } else if (attr == R.styleable.GenericDraweeHierarchy_progressBarImageScaleType) {
             builder.setProgressBarImageScaleType(getScaleTypeFromXml(gdhAttrs, attr));
 
+          } else if (attr == R.styleable.GenericDraweeHierarchy_roundingBorderOnPlaceHolderDisable) {
+            builder.setPlaceholderImageBorderDisable(gdhAttrs.getBoolean(attr, false));
+
           } else if (attr == R.styleable.GenericDraweeHierarchy_progressBarAutoRotateInterval) {
             progressBarAutoRotateInterval =
                 gdhAttrs.getInteger(attr, progressBarAutoRotateInterval);
diff --git a/drawee/src/main/res/values/attrs.xml b/drawee/src/main/res/values/attrs.xml
index 7c9c62bc4..be9a7b3c1 100644
--- a/drawee/src/main/res/values/attrs.xml
+++ b/drawee/src/main/res/values/attrs.xml
@@ -137,6 +137,8 @@
     <attr name="roundingBorderColor" format="color"/>
     <!-- Rounding border padding -->
     <attr name="roundingBorderPadding" format="dimension" />
+    <!-- Rounding border on placeHolder disable -->
+    <attr name="roundingBorderOnPlaceHolderDisable" format="boolean"/>
 
   </declare-styleable>
 
