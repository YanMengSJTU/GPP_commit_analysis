diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/FrescoLarge.java b/fresco-large/src/main/java/com/hippo/fresco/large/FrescoLarge.java
index fa73458e5..aa1505f0a 100644
--- a/fresco-large/src/main/java/com/hippo/fresco/large/FrescoLarge.java
+++ b/fresco-large/src/main/java/com/hippo/fresco/large/FrescoLarge.java
@@ -5,15 +5,23 @@
  */
 
 import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
 
 import java.util.Map;
 import java.util.Set;
 
 import android.content.Context;
 
+import com.facebook.common.internal.Supplier;
 import com.facebook.common.logging.FLog;
 import com.facebook.drawee.backends.pipeline.DraweeConfig;
+import com.facebook.drawee.backends.pipeline.PipelineDraweeControllerBuilder;
+import com.facebook.drawee.backends.pipeline.PipelineDraweeControllerBuilderSupplier;
+import com.facebook.drawee.interfaces.SimpleDraweeControllerBuilder;
+import com.facebook.drawee.view.SimpleDraweeView;
 import com.facebook.imageformat.ImageFormat;
+import com.facebook.imagepipeline.core.ImagePipelineConfig;
+import com.facebook.imagepipeline.core.ImagePipelineFactory;
 import com.facebook.imagepipeline.decoder.ImageDecoderConfig;
 
 import com.hippo.fresco.large.decoder.ImageRegionDecoderFactory;
@@ -23,11 +31,13 @@ private FrescoLarge() {}
 
   private static final Class<?> TAG = FrescoLarge.class;
 
+  private static PipelineDraweeControllerBuilderSupplier sDraweeControllerBuilderSupplier;
+
   public static void config(
       @Nonnull Context context,
+      @Nonnull FrescoLargeConfig config,
       @Nonnull ImageDecoderConfig.Builder decoderConfigBuilder,
-      @Nonnull DraweeConfig.Builder draweeConfigBuilder,
-      @Nonnull FrescoLargeConfig config) {
+      @Nonnull DraweeConfig.Builder draweeConfigBuilder) {
     Set<ImageFormat> imageFormatSet = config.getImageFormatSet();
     if (imageFormatSet == null || imageFormatSet.isEmpty()) {
       FLog.w(TAG, "No ImageFormat");
@@ -61,4 +71,27 @@ public static void config(
 
     draweeConfigBuilder.addCustomDrawableFactory(new LargeDrawableFactory(context));
   }
+
+  public static void initialize(
+      @Nonnull Context context,
+      @Nullable DraweeConfig draweeConfig) {
+    sDraweeControllerBuilderSupplier =
+        new PipelineDraweeControllerBuilderSupplier(context, draweeConfig);
+    SimpleLargeDraweeView.initialize(sDraweeControllerBuilderSupplier);
+  }
+
+  /** Gets the supplier of Fresco Drawee controller builders. */
+  public static PipelineDraweeControllerBuilderSupplier getDraweeControllerBuilderSupplier() {
+    return sDraweeControllerBuilderSupplier;
+  }
+
+  /** Returns a new instance of Fresco Drawee controller builder. */
+  public static PipelineDraweeControllerBuilder newDraweeControllerBuilder() {
+    return sDraweeControllerBuilderSupplier.get();
+  }
+
+  /** Shuts Fresco down. */
+  public static void shutDown() {
+    sDraweeControllerBuilderSupplier = null;
+  }
 }
diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/LargeDraweeView.java b/fresco-large/src/main/java/com/hippo/fresco/large/LargeDraweeView.java
index 8605bc161..d1526762f 100644
--- a/fresco-large/src/main/java/com/hippo/fresco/large/LargeDraweeView.java
+++ b/fresco-large/src/main/java/com/hippo/fresco/large/LargeDraweeView.java
@@ -22,7 +22,7 @@
 import com.facebook.drawee.drawable.DrawableParent;
 import com.facebook.drawee.generic.GenericDraweeHierarchy;
 import com.facebook.drawee.interfaces.DraweeController;
-import com.facebook.drawee.view.SimpleDraweeView;
+import com.facebook.drawee.view.GenericDraweeView;
 
 import com.hippo.fresco.large.drawable.StandardizedTransformedDrawable;
 import com.hippo.fresco.large.gesture.GestureRecognizer;
@@ -33,7 +33,7 @@
  * <p>
  * It must be used with {@link FrescoLarge}.
  */
-public class LargeDraweeView extends SimpleDraweeView {
+public class LargeDraweeView extends GenericDraweeView {
 
   private GestureRecognizer gestureRecognizer;
   private StandardizedTransformedDrawable transform;
diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/SimpleLargeDraweeView.java b/fresco-large/src/main/java/com/hippo/fresco/large/SimpleLargeDraweeView.java
new file mode 100644
index 000000000..4688d1a63
--- /dev/null
+++ b/fresco-large/src/main/java/com/hippo/fresco/large/SimpleLargeDraweeView.java
@@ -0,0 +1,132 @@
+package com.hippo.fresco.large;
+
+/*
+ * Created by Hippo on 6/10/2017.
+ */
+
+import javax.annotation.Nullable;
+
+import android.content.Context;
+import android.net.Uri;
+import android.support.annotation.DrawableRes;
+import android.util.AttributeSet;
+
+import com.facebook.common.internal.Supplier;
+import com.facebook.common.util.UriUtil;
+import com.facebook.drawee.generic.GenericDraweeHierarchy;
+import com.facebook.drawee.interfaces.DraweeController;
+import com.facebook.drawee.interfaces.SimpleDraweeControllerBuilder;
+
+public class SimpleLargeDraweeView extends LargeDraweeView {
+
+  private static Supplier<? extends SimpleDraweeControllerBuilder> sDraweeControllerBuilderSupplier;
+
+  /** Initializes {@link SimpleLargeDraweeView} with supplier of Drawee controller builders. */
+  public static void initialize(
+      Supplier<? extends SimpleDraweeControllerBuilder> draweeControllerBuilderSupplier) {
+    sDraweeControllerBuilderSupplier = draweeControllerBuilderSupplier;
+  }
+
+  /** Shuts {@link SimpleLargeDraweeView} down. */
+  public static void shutDown() {
+    sDraweeControllerBuilderSupplier = null;
+  }
+
+  private SimpleDraweeControllerBuilder simpleDraweeControllerBuilder;
+
+  public SimpleLargeDraweeView(Context context, GenericDraweeHierarchy hierarchy) {
+    super(context, hierarchy);
+  }
+
+  public SimpleLargeDraweeView(Context context) {
+    super(context);
+    init();
+  }
+
+  public SimpleLargeDraweeView(Context context, AttributeSet attrs) {
+    super(context, attrs);
+    init();
+  }
+
+  public SimpleLargeDraweeView(Context context, AttributeSet attrs, int defStyle) {
+    super(context, attrs, defStyle);
+    init();
+  }
+
+  public SimpleLargeDraweeView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+    super(context, attrs, defStyleAttr, defStyleRes);
+    init();
+  }
+
+  private void init() {
+    simpleDraweeControllerBuilder = sDraweeControllerBuilderSupplier.get();
+  }
+
+  protected SimpleDraweeControllerBuilder getControllerBuilder() {
+    return simpleDraweeControllerBuilder;
+  }
+
+  /**
+   * Displays an image given by the uri string.
+   *
+   * @param uriString uri string of the image
+   */
+  public void setImageURI(@Nullable String uriString) {
+    setImageURI(uriString, null);
+  }
+
+  /**
+   * Displays an image given by the uri.
+   *
+   * @param uri uri of the image
+   * @param callerContext caller context
+   */
+  public void setImageURI(Uri uri, @Nullable Object callerContext) {
+    DraweeController controller = simpleDraweeControllerBuilder
+        .setCallerContext(callerContext)
+        .setUri(uri)
+        .setOldController(getController())
+        .build();
+    setController(controller);
+  }
+
+  /**
+   * Displays an image given by the uri string.
+   *
+   * @param uriString uri string of the image
+   * @param callerContext caller context
+   */
+  public void setImageURI(@Nullable String uriString, @Nullable Object callerContext) {
+    Uri uri = (uriString != null) ? Uri.parse(uriString) : null;
+    setImageURI(uri, callerContext);
+  }
+
+  /**
+   * Sets the actual image resource to the given resource ID.
+   *
+   * Similar to {@link #setImageResource(int)}, this sets the displayed image to the given resource.
+   * However, {@link #setImageResource(int)} bypasses all Drawee functionality and makes the view
+   * act as a normal {@link android.widget.ImageView}, whereas this method keeps all of the
+   * Drawee functionality, including the {@link com.facebook.drawee.interfaces.DraweeHierarchy}.
+   *
+   * @param resourceId the resource ID to use.
+   */
+  public void setActualImageResource(@DrawableRes int resourceId) {
+    setActualImageResource(resourceId, null);
+  }
+
+  /**
+   * Sets the actual image resource to the given resource ID.
+   *
+   * Similar to {@link #setImageResource(int)}, this sets the displayed image to the given resource.
+   * However, {@link #setImageResource(int)} bypasses all Drawee functionality and makes the view
+   * act as a normal {@link android.widget.ImageView}, whereas this method keeps all of the
+   * Drawee functionality, including the {@link com.facebook.drawee.interfaces.DraweeHierarchy}.
+   *
+   * @param resourceId the resource ID to use.
+   * @param callerContext caller context
+   */
+  public void setActualImageResource(@DrawableRes int resourceId, @Nullable Object callerContext) {
+    setImageURI(UriUtil.getUriForResourceId(resourceId), callerContext);
+  }
+}
diff --git a/samples/large/src/main/java/com/hippo/fresco/large/demo/DemoApp.java b/samples/large/src/main/java/com/hippo/fresco/large/demo/DemoApp.java
index 1935f8f83..b5edea7d6 100644
--- a/samples/large/src/main/java/com/hippo/fresco/large/demo/DemoApp.java
+++ b/samples/large/src/main/java/com/hippo/fresco/large/demo/DemoApp.java
@@ -31,13 +31,14 @@ public void onCreate() {
 
     ImageDecoderConfig.Builder decoderConfigBuilder = ImageDecoderConfig.newBuilder();
     DraweeConfig.Builder draweeConfigBuilder = DraweeConfig.newBuilder();
-    FrescoLarge.config(this, decoderConfigBuilder, draweeConfigBuilder, builder.build());
+    FrescoLarge.config(this, builder.build(), decoderConfigBuilder, draweeConfigBuilder);
 
     ImagePipelineConfig imagePipelineConfig = ImagePipelineConfig
         .newBuilder(this)
         .setImageDecoderConfig(decoderConfigBuilder.build())
         .build();
 
-    Fresco.initialize(this, imagePipelineConfig, draweeConfigBuilder.build());
+    Fresco.initialize(this, imagePipelineConfig);
+    FrescoLarge.initialize(this, draweeConfigBuilder.build());
   }
 }
diff --git a/samples/large/src/main/java/com/hippo/fresco/large/demo/MyPageAdapter.java b/samples/large/src/main/java/com/hippo/fresco/large/demo/MyPageAdapter.java
index 67da773c0..f8d4adcdb 100644
--- a/samples/large/src/main/java/com/hippo/fresco/large/demo/MyPageAdapter.java
+++ b/samples/large/src/main/java/com/hippo/fresco/large/demo/MyPageAdapter.java
@@ -11,6 +11,7 @@
 import android.view.ViewGroup;
 
 import com.hippo.fresco.large.LargeDraweeView;
+import com.hippo.fresco.large.SimpleLargeDraweeView;
 
 public class MyPageAdapter extends PagerAdapter {
 
@@ -30,7 +31,7 @@ public MyPageAdapter(Context context) {
 
   @Override
   public Object instantiateItem(ViewGroup container, int position) {
-    LargeDraweeView view = (LargeDraweeView) inflater.inflate(R.layout.pager, container, false);
+    SimpleLargeDraweeView view = (SimpleLargeDraweeView) inflater.inflate(R.layout.pager, container, false);
     view.setImageURI(SAMPLE_URIS[position]);
     container.addView(view);
     return view;
diff --git a/samples/large/src/main/res/layout/pager.xml b/samples/large/src/main/res/layout/pager.xml
index 7d924ccc3..6ee7914cf 100644
--- a/samples/large/src/main/res/layout/pager.xml
+++ b/samples/large/src/main/res/layout/pager.xml
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="utf-8"?>
-<com.hippo.fresco.large.LargeDraweeView
+<com.hippo.fresco.large.SimpleLargeDraweeView
     xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:app="http://schemas.android.com/apk/res-auto"
     android:id="@+id/image"
