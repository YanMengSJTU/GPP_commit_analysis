diff --git a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImageLoadStatus.java b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImageLoadStatus.java
new file mode 100644
index 000000000..adc88aa71
--- /dev/null
+++ b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImageLoadStatus.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (c) 2015-present, Facebook, Inc.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+package com.facebook.drawee.backends.pipeline.info;
+
+import static com.facebook.drawee.backends.pipeline.info.ImageLoadStatus.AVAILABLE;
+import static com.facebook.drawee.backends.pipeline.info.ImageLoadStatus.CANCELED;
+import static com.facebook.drawee.backends.pipeline.info.ImageLoadStatus.ERROR;
+import static com.facebook.drawee.backends.pipeline.info.ImageLoadStatus.ORIGIN_AVAILABLE;
+import static com.facebook.drawee.backends.pipeline.info.ImageLoadStatus.REQUESTED;
+import static java.lang.annotation.RetentionPolicy.SOURCE;
+
+import android.support.annotation.IntDef;
+import java.lang.annotation.Retention;
+
+@Retention(SOURCE)
+@IntDef({
+  REQUESTED,
+  ORIGIN_AVAILABLE,
+  AVAILABLE,
+  CANCELED,
+  ERROR,
+})
+public @interface ImageLoadStatus {
+
+  int REQUESTED = 0;
+  int ORIGIN_AVAILABLE = 1;
+  int AVAILABLE = 2;
+  int CANCELED = 3;
+  int ERROR = 4;
+}
diff --git a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfData.java b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfData.java
new file mode 100644
index 000000000..12e468883
--- /dev/null
+++ b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfData.java
@@ -0,0 +1,143 @@
+/*
+ * Copyright (c) 2015-present, Facebook, Inc.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+package com.facebook.drawee.backends.pipeline.info;
+
+import com.facebook.common.internal.Objects;
+import com.facebook.imagepipeline.image.ImageInfo;
+import com.facebook.imagepipeline.request.ImageRequest;
+import javax.annotation.Nullable;
+
+public class ImagePerfData {
+
+  public static final int UNSET = -1;
+
+  private final @Nullable String mRequestId;
+  private final @Nullable Object mCallerContext;
+  private final @Nullable ImageRequest mImageRequest;
+  private final @Nullable ImageInfo mImageInfo;
+
+  private final long mControllerSubmitTimeMs;
+  private final long mControllerFinalImageSetTimeMs;
+  private final long mControllerFailureTimeMs;
+
+  private final long mImageRequestStartTimeMs;
+  private final long mImageRequestEndTimeMs;
+  private final @ImageOrigin int mImageOrigin;
+  private final boolean mIsCanceled;
+  private final boolean mIsSuccessful;
+  private final boolean mIsPrefetch;
+
+  public ImagePerfData(
+      @Nullable String requestId,
+      @Nullable ImageRequest imageRequest,
+      @Nullable Object callerContext,
+      @Nullable ImageInfo imageInfo,
+      long controllerSubmitTimeMs,
+      long controllerFinalImageSetTimeMs,
+      long controllerFailureTimeMs,
+      long imageRequestStartTimeMs,
+      long imageRequestEndTimeMs,
+      @ImageOrigin int imageOrigin,
+      boolean isCanceled,
+      boolean isSuccessful,
+      boolean isPrefetch) {
+    mRequestId = requestId;
+    mImageRequest = imageRequest;
+    mCallerContext = callerContext;
+    mImageInfo = imageInfo;
+    mControllerSubmitTimeMs = controllerSubmitTimeMs;
+    mControllerFinalImageSetTimeMs = controllerFinalImageSetTimeMs;
+    mControllerFailureTimeMs = controllerFailureTimeMs;
+    mImageRequestStartTimeMs = imageRequestStartTimeMs;
+    mImageRequestEndTimeMs = imageRequestEndTimeMs;
+    mImageOrigin = imageOrigin;
+    mIsCanceled = isCanceled;
+    mIsSuccessful = isSuccessful;
+    mIsPrefetch = isPrefetch;
+  }
+
+  @Nullable
+  public String getRequestId() {
+    return mRequestId;
+  }
+
+  @Nullable
+  public ImageRequest getImageRequest() {
+    return mImageRequest;
+  }
+
+  @Nullable
+  public Object getCallerContext() {
+    return mCallerContext;
+  }
+
+  @Nullable
+  public ImageInfo getImageInfo() {
+    return mImageInfo;
+  }
+
+  public long getControllerSubmitTimeMs() {
+    return mControllerSubmitTimeMs;
+  }
+
+  public long getControllerFinalImageSetTimeMs() {
+    return mControllerFinalImageSetTimeMs;
+  }
+
+  public long getControllerFailureTimeMs() {
+    return mControllerFailureTimeMs;
+  }
+
+  public long getImageRequestStartTimeMs() {
+    return mImageRequestStartTimeMs;
+  }
+
+  public long getImageRequestEndTimeMs() {
+    return mImageRequestEndTimeMs;
+  }
+
+  public @ImageOrigin int getImageOrigin() {
+    return mImageOrigin;
+  }
+
+  public boolean isCanceled() {
+    return mIsCanceled;
+  }
+
+  public boolean isSuccessful() {
+    return mIsSuccessful;
+  }
+
+  public boolean isPrefetch() {
+    return mIsPrefetch;
+  }
+
+  public long getFinalImageLoadTimeMs() {
+    if (isSuccessful()) {
+      return getImageRequestEndTimeMs() - getImageRequestStartTimeMs();
+    }
+    return UNSET;
+  }
+
+  public String createDebugString() {
+    return Objects.toStringHelper(this)
+        .add("request ID", mRequestId)
+        .add("controller submit", mControllerSubmitTimeMs)
+        .add("controller final image", mControllerFinalImageSetTimeMs)
+        .add("controller failure", mControllerFailureTimeMs)
+        .add("start time", mImageRequestStartTimeMs)
+        .add("end time", mImageRequestEndTimeMs)
+        .add("origin", ImageOriginUtils.toString(mImageOrigin))
+        .add("canceled", mIsCanceled)
+        .add("successful", mIsSuccessful)
+        .add("prefetch", mIsPrefetch)
+        .add("caller context", mCallerContext)
+        .add("image request", mImageRequest)
+        .add("image info", mImageInfo)
+        .toString();
+  }
+}
diff --git a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfDataListener.java b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfDataListener.java
new file mode 100644
index 000000000..8628bae3f
--- /dev/null
+++ b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfDataListener.java
@@ -0,0 +1,12 @@
+/*
+ * Copyright (c) 2015-present, Facebook, Inc.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+package com.facebook.drawee.backends.pipeline.info;
+
+public interface ImagePerfDataListener {
+
+  void onImagePerfDataUpdated(ImagePerfData imagePerfData, @ImageLoadStatus int imageLoadStatus);
+}
diff --git a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfMonitor.java b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfMonitor.java
new file mode 100644
index 000000000..a72f809cd
--- /dev/null
+++ b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfMonitor.java
@@ -0,0 +1,96 @@
+/*
+ * Copyright (c) 2015-present, Facebook, Inc.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+package com.facebook.drawee.backends.pipeline.info;
+
+import com.facebook.common.time.MonotonicClock;
+import com.facebook.drawee.backends.pipeline.PipelineDraweeController;
+import com.facebook.drawee.backends.pipeline.info.internal.ImagePerfControllerListener;
+import com.facebook.drawee.backends.pipeline.info.internal.ImagePerfImageOriginListener;
+import com.facebook.drawee.backends.pipeline.info.internal.ImagePerfRequestListener;
+import com.facebook.imagepipeline.listener.BaseRequestListener;
+import com.facebook.imagepipeline.listener.ForwardingRequestListener;
+import java.util.LinkedList;
+import java.util.List;
+import javax.annotation.Nullable;
+
+public class ImagePerfMonitor extends BaseRequestListener {
+
+  private final PipelineDraweeController mPipelineDraweeController;
+  private final MonotonicClock mMonotonicClock;
+  private final ImagePerfState mImagePerfState;
+
+  private @Nullable ImageOriginRequestListener mImageOriginRequestListener;
+  private @Nullable ImageOriginListener mImageOriginListener;
+  private @Nullable ImagePerfRequestListener mImagePerfRequestListener;
+  private @Nullable ImagePerfControllerListener mImagePerfControllerListener;
+  private @Nullable ForwardingRequestListener mForwardingRequestListener;
+
+  private @Nullable List<ImagePerfDataListener> mImagePerfDataListeners;
+
+  public ImagePerfMonitor(
+      MonotonicClock monotonicClock, PipelineDraweeController pipelineDraweeController) {
+    mMonotonicClock = monotonicClock;
+    mPipelineDraweeController = pipelineDraweeController;
+    mImagePerfState = new ImagePerfState();
+    setupListeners();
+  }
+
+  public void addImagePerfDataListener(ImagePerfDataListener imagePerfDataListener) {
+    if (imagePerfDataListener == null) {
+      return;
+    }
+    if (mImagePerfDataListeners == null) {
+      mImagePerfDataListeners = new LinkedList<>();
+    }
+    mImagePerfDataListeners.add(imagePerfDataListener);
+  }
+
+  public void removeImagePerfDataListener(ImagePerfDataListener imagePerfDataListener) {
+    if (mImagePerfDataListeners == null) {
+      return;
+    }
+    mImagePerfDataListeners.remove(imagePerfDataListener);
+  }
+
+  public void clearImagePerfDataListeners() {
+    if (mImagePerfDataListeners != null) {
+      mImagePerfDataListeners.clear();
+    }
+  }
+
+  public void notifyListeners(ImagePerfState state, @ImageLoadStatus int imageLoadStatus) {
+    if (mImagePerfDataListeners == null || mImagePerfDataListeners.isEmpty()) {
+      return;
+    }
+    ImagePerfData data = state.snapshot();
+    for (ImagePerfDataListener listener : mImagePerfDataListeners) {
+      listener.onImagePerfDataUpdated(data, imageLoadStatus);
+    }
+  }
+
+  private void setupListeners() {
+    if (mImagePerfControllerListener == null) {
+      mImagePerfControllerListener =
+          new ImagePerfControllerListener(mMonotonicClock, mImagePerfState, this);
+    }
+    if (mImagePerfRequestListener == null) {
+      mImagePerfRequestListener =
+          new ImagePerfRequestListener(mMonotonicClock, mImagePerfState, this);
+    }
+    if (mImageOriginListener == null) {
+      mImageOriginListener = new ImagePerfImageOriginListener(mImagePerfState, this);
+    }
+    if (mImageOriginRequestListener == null) {
+      mImageOriginRequestListener =
+          new ImageOriginRequestListener(mPipelineDraweeController.getId(), mImageOriginListener);
+    }
+    if (mForwardingRequestListener == null) {
+      mForwardingRequestListener =
+          new ForwardingRequestListener(mImagePerfRequestListener, mImageOriginRequestListener);
+    }
+  }
+}
diff --git a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfState.java b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfState.java
new file mode 100644
index 000000000..3aa42d653
--- /dev/null
+++ b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfState.java
@@ -0,0 +1,106 @@
+/*
+ * Copyright (c) 2015-present, Facebook, Inc.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+package com.facebook.drawee.backends.pipeline.info;
+
+import static com.facebook.drawee.backends.pipeline.info.ImagePerfData.UNSET;
+
+import com.facebook.imagepipeline.image.ImageInfo;
+import com.facebook.imagepipeline.request.ImageRequest;
+import javax.annotation.Nullable;
+
+public class ImagePerfState {
+
+  // General image metadata
+  private @Nullable String mRequestId;
+  private @Nullable ImageRequest mImageRequest;
+  private @Nullable Object mCallerContext;
+  private @Nullable ImageInfo mImageInfo;
+
+  // Controller timings
+  private long mControllerSubmitTimeMs = UNSET;
+  private long mControllerFinalImageSetTimeMs = UNSET;
+  private long mControllerFailureTimeMs = UNSET;
+
+  // Image request timings
+  private long mImageRequestStartTimeMs = UNSET;
+  private long mImageRequestEndTimeMs = UNSET;
+
+  // Image pipeline information
+  private @ImageOrigin int mImageOrigin = ImageOrigin.UNKNOWN;
+  private boolean mIsCanceled;
+  private boolean mIsSuccessful;
+  private boolean mIsPrefetch;
+
+  public void setRequestId(@Nullable String requestId) {
+    mRequestId = requestId;
+  }
+
+  public void setImageRequest(@Nullable ImageRequest imageRequest) {
+    mImageRequest = imageRequest;
+  }
+
+  public void setCallerContext(@Nullable Object callerContext) {
+    mCallerContext = callerContext;
+  }
+
+  public void setControllerSubmitTimeMs(long controllerSubmitTimeMs) {
+    mControllerSubmitTimeMs = controllerSubmitTimeMs;
+  }
+
+  public void setControllerFinalImageSetTimeMs(long controllerFinalImageSetTimeMs) {
+    mControllerFinalImageSetTimeMs = controllerFinalImageSetTimeMs;
+  }
+
+  public void setControllerFailureTimeMs(long controllerFailureTimeMs) {
+    mControllerFailureTimeMs = controllerFailureTimeMs;
+  }
+
+  public void setImageRequestStartTimeMs(long imageRequestStartTimeMs) {
+    mImageRequestStartTimeMs = imageRequestStartTimeMs;
+  }
+
+  public void setImageRequestEndTimeMs(long imageRequestEndTimeMs) {
+    mImageRequestEndTimeMs = imageRequestEndTimeMs;
+  }
+
+  public void setImageOrigin(@ImageOrigin int imageOrigin) {
+    mImageOrigin = imageOrigin;
+  }
+
+  public void setCanceled(boolean canceled) {
+    mIsCanceled = canceled;
+  }
+
+  public void setSuccessful(boolean successful) {
+    mIsSuccessful = successful;
+  }
+
+  public void setPrefetch(boolean prefetch) {
+    mIsPrefetch = prefetch;
+  }
+
+  public void setImageInfo(@Nullable ImageInfo imageInfo) {
+    mImageInfo = imageInfo;
+  }
+
+  public ImagePerfData snapshot() {
+    return new ImagePerfData(
+        mRequestId,
+        mImageRequest,
+        mCallerContext,
+        mImageInfo,
+        mControllerSubmitTimeMs,
+        mControllerFinalImageSetTimeMs,
+        mControllerFailureTimeMs,
+        mImageRequestStartTimeMs,
+        mImageRequestEndTimeMs,
+        mImageOrigin,
+        mIsCanceled,
+        mIsSuccessful,
+        mIsPrefetch);
+  }
+}
diff --git a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfUtils.java b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfUtils.java
new file mode 100644
index 000000000..5ee223f62
--- /dev/null
+++ b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/ImagePerfUtils.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (c) 2015-present, Facebook, Inc.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+package com.facebook.drawee.backends.pipeline.info;
+
+public class ImagePerfUtils {
+
+  public static String toString(@ImageLoadStatus int imageLoadStatus) {
+    switch (imageLoadStatus) {
+      case ImageLoadStatus.REQUESTED:
+        return "requested";
+      case ImageLoadStatus.ORIGIN_AVAILABLE:
+        return "origin_available";
+      case ImageLoadStatus.AVAILABLE:
+        return "available";
+      case ImageLoadStatus.CANCELED:
+        return "canceled";
+      case ImageLoadStatus.ERROR:
+        return "error";
+      default:
+        return "unknown";
+    }
+  }
+
+  private ImagePerfUtils() {}
+}
diff --git a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/internal/ImagePerfControllerListener.java b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/internal/ImagePerfControllerListener.java
new file mode 100644
index 000000000..e80e23fb7
--- /dev/null
+++ b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/internal/ImagePerfControllerListener.java
@@ -0,0 +1,62 @@
+/*
+ * Copyright (c) 2015-present, Facebook, Inc.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+package com.facebook.drawee.backends.pipeline.info.internal;
+
+import android.graphics.drawable.Animatable;
+import com.facebook.common.time.MonotonicClock;
+import com.facebook.drawee.backends.pipeline.info.ImageLoadStatus;
+import com.facebook.drawee.backends.pipeline.info.ImagePerfMonitor;
+import com.facebook.drawee.backends.pipeline.info.ImagePerfState;
+import com.facebook.drawee.controller.BaseControllerListener;
+import com.facebook.imagepipeline.image.ImageInfo;
+import javax.annotation.Nullable;
+
+public class ImagePerfControllerListener extends BaseControllerListener<ImageInfo> {
+
+  private final MonotonicClock mClock;
+  private final ImagePerfState mImagePerfState;
+  private final ImagePerfMonitor mImagePerfMonitor;
+
+  public ImagePerfControllerListener(
+      MonotonicClock clock, ImagePerfState imagePerfState, ImagePerfMonitor imagePerfMonitor) {
+    mClock = clock;
+    mImagePerfState = imagePerfState;
+    mImagePerfMonitor = imagePerfMonitor;
+  }
+
+  @Override
+  public void onSubmit(String id, Object callerContext) {
+    mImagePerfState.setControllerSubmitTimeMs(mClock.now());
+
+    mImagePerfState.setRequestId(id);
+    mImagePerfState.setCallerContext(callerContext);
+
+    mImagePerfMonitor.notifyListeners(mImagePerfState, ImageLoadStatus.REQUESTED);
+  }
+
+  @Override
+  public void onFinalImageSet(
+      String id, @Nullable ImageInfo imageInfo, @Nullable Animatable animatable) {
+    mImagePerfState.setControllerFinalImageSetTimeMs(mClock.now());
+
+    mImagePerfState.setRequestId(id);
+    mImagePerfState.setImageInfo(imageInfo);
+    mImagePerfState.setSuccessful(true);
+
+    mImagePerfMonitor.notifyListeners(mImagePerfState, ImageLoadStatus.AVAILABLE);
+  }
+
+  @Override
+  public void onFailure(String id, Throwable throwable) {
+    mImagePerfState.setControllerFailureTimeMs(mClock.now());
+
+    mImagePerfState.setRequestId(id);
+    mImagePerfState.setSuccessful(false);
+
+    mImagePerfMonitor.notifyListeners(mImagePerfState, ImageLoadStatus.ERROR);
+  }
+}
diff --git a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/internal/ImagePerfImageOriginListener.java b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/internal/ImagePerfImageOriginListener.java
new file mode 100644
index 000000000..cc044e2f0
--- /dev/null
+++ b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/internal/ImagePerfImageOriginListener.java
@@ -0,0 +1,32 @@
+/*
+ * Copyright (c) 2015-present, Facebook, Inc.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+package com.facebook.drawee.backends.pipeline.info.internal;
+
+import com.facebook.drawee.backends.pipeline.info.ImageLoadStatus;
+import com.facebook.drawee.backends.pipeline.info.ImageOrigin;
+import com.facebook.drawee.backends.pipeline.info.ImageOriginListener;
+import com.facebook.drawee.backends.pipeline.info.ImagePerfMonitor;
+import com.facebook.drawee.backends.pipeline.info.ImagePerfState;
+
+public class ImagePerfImageOriginListener implements ImageOriginListener {
+
+  private final ImagePerfState mImagePerfState;
+  private final ImagePerfMonitor mImagePerfMonitor;
+
+  public ImagePerfImageOriginListener(
+      ImagePerfState imagePerfState, ImagePerfMonitor imagePerfMonitor) {
+    mImagePerfState = imagePerfState;
+    mImagePerfMonitor = imagePerfMonitor;
+  }
+
+  @Override
+  public void onImageLoaded(String controllerId, @ImageOrigin int imageOrigin, boolean successful) {
+    mImagePerfState.setImageOrigin(imageOrigin);
+    mImagePerfState.setSuccessful(successful);
+    mImagePerfMonitor.notifyListeners(mImagePerfState, ImageLoadStatus.ORIGIN_AVAILABLE);
+  }
+}
diff --git a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/internal/ImagePerfRequestListener.java b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/internal/ImagePerfRequestListener.java
new file mode 100644
index 000000000..df758cd0a
--- /dev/null
+++ b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/info/internal/ImagePerfRequestListener.java
@@ -0,0 +1,78 @@
+/*
+ * Copyright (c) 2015-present, Facebook, Inc.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+package com.facebook.drawee.backends.pipeline.info.internal;
+
+import com.facebook.common.time.MonotonicClock;
+import com.facebook.drawee.backends.pipeline.info.ImageLoadStatus;
+import com.facebook.drawee.backends.pipeline.info.ImagePerfMonitor;
+import com.facebook.drawee.backends.pipeline.info.ImagePerfState;
+import com.facebook.imagepipeline.listener.BaseRequestListener;
+import com.facebook.imagepipeline.request.ImageRequest;
+
+public class ImagePerfRequestListener extends BaseRequestListener {
+
+  private final MonotonicClock mClock;
+  private final ImagePerfState mImagePerfState;
+  private final ImagePerfMonitor mImagePerfMonitor;
+
+  public ImagePerfRequestListener(
+      MonotonicClock monotonicClock,
+      ImagePerfState imagePerfState,
+      ImagePerfMonitor imagePerfMonitor) {
+    mClock = monotonicClock;
+    mImagePerfState = imagePerfState;
+    mImagePerfMonitor = imagePerfMonitor;
+  }
+
+  @Override
+  public void onRequestStart(
+      ImageRequest request, Object callerContext, String requestId, boolean isPrefetch) {
+    mImagePerfState.setImageRequestStartTimeMs(mClock.now());
+
+    mImagePerfState.setImageRequest(request);
+    mImagePerfState.setCallerContext(callerContext);
+    mImagePerfState.setRequestId(requestId);
+    mImagePerfState.setPrefetch(isPrefetch);
+
+    mImagePerfMonitor.notifyListeners(mImagePerfState, ImageLoadStatus.REQUESTED);
+  }
+
+  @Override
+  public void onRequestSuccess(ImageRequest request, String requestId, boolean isPrefetch) {
+    mImagePerfState.setImageRequestEndTimeMs(mClock.now());
+
+    mImagePerfState.setImageRequest(request);
+    mImagePerfState.setRequestId(requestId);
+    mImagePerfState.setPrefetch(isPrefetch);
+    mImagePerfState.setSuccessful(true);
+
+    mImagePerfMonitor.notifyListeners(mImagePerfState, ImageLoadStatus.AVAILABLE);
+  }
+
+  @Override
+  public void onRequestFailure(
+      ImageRequest request, String requestId, Throwable throwable, boolean isPrefetch) {
+    mImagePerfState.setImageRequestEndTimeMs(mClock.now());
+
+    mImagePerfState.setImageRequest(request);
+    mImagePerfState.setRequestId(requestId);
+    mImagePerfState.setPrefetch(isPrefetch);
+    mImagePerfState.setSuccessful(false);
+
+    mImagePerfMonitor.notifyListeners(mImagePerfState, ImageLoadStatus.ERROR);
+  }
+
+  @Override
+  public void onRequestCancellation(String requestId) {
+    mImagePerfState.setImageRequestEndTimeMs(mClock.now());
+
+    mImagePerfState.setRequestId(requestId);
+    mImagePerfState.setCanceled(true);
+
+    mImagePerfMonitor.notifyListeners(mImagePerfState, ImageLoadStatus.CANCELED);
+  }
+}
