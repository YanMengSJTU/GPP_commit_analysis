diff --git a/drawee-backends/drawee-pipeline/build.gradle b/drawee-backends/drawee-pipeline/build.gradle
index 404e1895f..8d066e956 100644
--- a/drawee-backends/drawee-pipeline/build.gradle
+++ b/drawee-backends/drawee-pipeline/build.gradle
@@ -9,6 +9,7 @@ dependencies {
     compile project(':drawee')
     compile project(':fbcore')
     compile project(':imagepipeline')
+    compile project(path: ':animated-drawable')
 }
 apply from: rootProject.file('release.gradle')
 
diff --git a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/Fresco.java b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/Fresco.java
index ba319e811..e69095eda 100644
--- a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/Fresco.java
+++ b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/Fresco.java
@@ -12,9 +12,18 @@
 import javax.annotation.Nullable;
 
 import android.content.Context;
+import android.content.res.Resources;
+import android.graphics.drawable.AnimationDrawable;
+import android.graphics.drawable.Drawable;
 
 import com.facebook.common.logging.FLog;
+import com.facebook.drawee.drawable.Rounded;
+import com.facebook.drawee.drawable.RoundedBitmapDrawable;
+import com.facebook.drawee.generic.RoundingParams;
+import com.facebook.drawee.generic.WrappingUtils;
 import com.facebook.drawee.view.SimpleDraweeView;
+import com.facebook.imagepipeline.animated.base.AnimatedDrawable;
+import com.facebook.imagepipeline.animated.base.AnimatedDrawableSupport;
 import com.facebook.imagepipeline.core.ImagePipeline;
 import com.facebook.imagepipeline.core.ImagePipelineConfig;
 import com.facebook.imagepipeline.core.ImagePipelineFactory;
@@ -67,8 +76,49 @@ public static void initialize(
       ImagePipelineFactory.initialize(imagePipelineConfig);
     }
     initializeDrawee(context, draweeConfig);
+    initRoundInterceptor();
   }
 
+
+  static void applyRoundingParams(Rounded rounded, RoundingParams roundingParams) {
+    rounded.setCircle(roundingParams.getRoundAsCircle());
+    rounded.setRadii(roundingParams.getCornersRadii());
+    rounded.setBorder(roundingParams.getBorderColor(), roundingParams.getBorderWidth());
+    rounded.setPadding(roundingParams.getPadding());
+  }
+
+  private static void initRoundInterceptor(){
+    WrappingUtils.setRoundDrawableInterceptor(new WrappingUtils.RoundDrawableInterceptor() {
+      @Override
+      public RoundedBitmapDrawable intercept(Resources resources, Drawable drawable,RoundingParams roundingParams) {
+        try {
+          if (drawable instanceof AnimatedDrawable) {
+            final AnimatedDrawable bitmapDrawable = (AnimatedDrawable) drawable;
+            RoundedBitmapDrawable roundedBitmapDrawable =
+                    new RoundedBitmapDrawable(
+                            resources,
+                            bitmapDrawable.getAnimatedDrawableBackend().getPreviewBitmap().get(),
+                            bitmapDrawable.getPaint());
+            applyRoundingParams(roundedBitmapDrawable, roundingParams);
+            return roundedBitmapDrawable;
+          }
+          if (drawable instanceof AnimatedDrawableSupport) {
+            final AnimatedDrawableSupport bitmapDrawable = (AnimatedDrawableSupport) drawable;
+            RoundedBitmapDrawable roundedBitmapDrawable =
+                    new RoundedBitmapDrawable(
+                            resources,
+                            bitmapDrawable.getAnimatedDrawableBackend().getPreviewBitmap().get(),
+                            bitmapDrawable.getPaint());
+            applyRoundingParams(roundedBitmapDrawable, roundingParams);
+            return roundedBitmapDrawable;
+          }
+        }catch (Exception ex){
+          ex.printStackTrace();
+        }
+        return null;
+      }
+    });
+  }
   /** Initializes Drawee with the specified config. */
   private static void initializeDrawee(
       Context context,
@@ -108,4 +158,7 @@ public static void shutDown() {
   public static boolean hasBeenInitialized() {
     return sIsInitialized;
   }
+
+
+
 }
diff --git a/drawee/src/main/java/com/facebook/drawee/generic/RoundingParams.java b/drawee/src/main/java/com/facebook/drawee/generic/RoundingParams.java
index 5b8642ace..4f8b04864 100644
--- a/drawee/src/main/java/com/facebook/drawee/generic/RoundingParams.java
+++ b/drawee/src/main/java/com/facebook/drawee/generic/RoundingParams.java
@@ -46,7 +46,15 @@
   private float mBorderWidth = 0;
   private int mBorderColor = Color.TRANSPARENT;
   private float mPadding = 0;
+  private int mComeFrom;//0默认，1代表其他
 
+  public int getComeFrom() {
+    return mComeFrom;
+  }
+
+  public void setComeFrom(int comeFrom) {
+    mComeFrom = comeFrom;
+  }
   /**
    *  Sets whether to round as circle.
    *
diff --git a/drawee/src/main/java/com/facebook/drawee/generic/WrappingUtils.java b/drawee/src/main/java/com/facebook/drawee/generic/WrappingUtils.java
index fab187756..91606cbc3 100644
--- a/drawee/src/main/java/com/facebook/drawee/generic/WrappingUtils.java
+++ b/drawee/src/main/java/com/facebook/drawee/generic/WrappingUtils.java
@@ -11,8 +11,11 @@
 import javax.annotation.Nullable;
 
 import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
 import android.graphics.Color;
 import android.graphics.Matrix;
+import android.graphics.PixelFormat;
 import android.graphics.PointF;
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.ColorDrawable;
@@ -299,7 +302,22 @@ private static Drawable applyLeafRounding(
       applyRoundingParams(roundedColorDrawable, roundingParams);
       return roundedColorDrawable;
     }
-    if(roundingParams != null && (roundingParams.getOverlayColor() != 0 || roundingParams.getCornersRadii() != null || roundingParams.getRoundAsCircle())) {
+    if(roundingParams.getComeFrom()!=0 && roundingParams != null && (roundingParams.getOverlayColor() != 0
+            || roundingParams.getCornersRadii() != null
+            || roundingParams.getRoundAsCircle())) {
+
+      //新需求,将gif改为圆角显示
+      if(mRoundDrawableInterceptor!=null){
+        RoundedBitmapDrawable roundedBitmapDrawable = mRoundDrawableInterceptor.intercept(resources,drawable,roundingParams);
+        if(roundedBitmapDrawable!=null){
+          return roundedBitmapDrawable;
+        }
+      }
+    }
+
+    /*if(roundingParams != null && (roundingParams.getOverlayColor() != 0
+            || roundingParams.getCornersRadii() != null
+            || roundingParams.getRoundAsCircle())) {
       //新需求,将gif改为圆角显示
       if (drawable instanceof AnimatedDrawable) {
         final AnimatedDrawable bitmapDrawable = (AnimatedDrawable) drawable;
@@ -321,9 +339,16 @@ private static Drawable applyLeafRounding(
         applyRoundingParams(roundedBitmapDrawable, roundingParams);
         return roundedBitmapDrawable;
       }
-    }
+    }*/
     return drawable;
   }
+  public static interface RoundDrawableInterceptor{
+    public RoundedBitmapDrawable intercept(Resources resources,Drawable drawable,RoundingParams params);
+  }
+  private static RoundDrawableInterceptor mRoundDrawableInterceptor;
+  public static void setRoundDrawableInterceptor(RoundDrawableInterceptor interceptor){
+    mRoundDrawableInterceptor = interceptor;
+  }
 
   /**
    * Applies the given rounding params on the specified rounded drawable.
@@ -358,4 +383,23 @@ static DrawableParent findDrawableParentForLeaf(DrawableParent parent) {
     }
     return parent;
   }
+  public static Bitmap drawableToBitmap(Drawable drawable) {
+
+    Bitmap bitmap = Bitmap.createBitmap(
+
+            drawable.getIntrinsicWidth(),
+
+            drawable.getIntrinsicHeight(),
+
+            drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888
+                    : Bitmap.Config.RGB_565);
+    Canvas canvas = new Canvas(bitmap);
+    //canvas.setBitmap(bitmap);
+    drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());
+
+    drawable.draw(canvas);
+
+    return bitmap;
+
+  }
 }
diff --git a/frescopainter/src/main/java/com/meetyou/frescopainter/FrescoPainterPen.java b/frescopainter/src/main/java/com/meetyou/frescopainter/FrescoPainterPen.java
index ba7addf10..791883bf4 100644
--- a/frescopainter/src/main/java/com/meetyou/frescopainter/FrescoPainterPen.java
+++ b/frescopainter/src/main/java/com/meetyou/frescopainter/FrescoPainterPen.java
@@ -39,6 +39,15 @@
     private boolean mProgressiveRenderingEnabled = false;
     private boolean isOrigin=false;
     private int mLoadMode = PainterMode.FULL_LOAD;
+    private int mComeFrom;//0默认，1代表其他
+
+    public int getComeFrom() {
+        return mComeFrom;
+    }
+
+    public void setComeFrom(int comeFrom) {
+        mComeFrom = comeFrom;
+    }
 
     public FrescoPainterDraweeInterceptor getFrescoPainterDraweeInterceptor() {
         return mFrescoPainterDraweeInterceptor;
diff --git a/frescopainter/src/main/java/com/meetyou/frescopainter/PainterWorksapce.java b/frescopainter/src/main/java/com/meetyou/frescopainter/PainterWorksapce.java
index a249b598c..ec98b520b 100644
--- a/frescopainter/src/main/java/com/meetyou/frescopainter/PainterWorksapce.java
+++ b/frescopainter/src/main/java/com/meetyou/frescopainter/PainterWorksapce.java
@@ -119,6 +119,7 @@ private void setRoundingParmas(IFrescoImageView draweeView, FrescoPainterPen pen
             return;
         }
         RoundingParams roundingParams = getRoundingParams(draweeView);
+        roundingParams.setComeFrom(pen.getComeFrom());
         if(pen.isCircle()){
             //如果是圆形
             roundingParams.setRoundAsCircle(true);
