diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/EncodedMemoryCacheProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/EncodedMemoryCacheProducer.java
index 618074d51..36167b59a 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/EncodedMemoryCacheProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/EncodedMemoryCacheProducer.java
@@ -11,6 +11,7 @@
 import com.facebook.common.internal.ImmutableMap;
 import com.facebook.common.memory.PooledByteBuffer;
 import com.facebook.common.references.CloseableReference;
+import com.facebook.imageformat.ImageFormat;
 import com.facebook.imagepipeline.cache.CacheKeyFactory;
 import com.facebook.imagepipeline.cache.MemoryCache;
 import com.facebook.imagepipeline.image.EncodedImage;
@@ -126,9 +127,11 @@ public void onNewResultImpl(EncodedImage newResult, @Status int status) {
       try {
         FrescoSystrace.beginSection("EncodedMemoryCacheProducer#onNewResultImpl");
         // intermediate, null or uncacheable results are not cached, so we just forward them
+        // as well as the images with unknown format which could be html response from the server
         if (isNotLast(status)
             || newResult == null
-            || statusHasAnyFlag(status, DO_NOT_CACHE_ENCODED | IS_PARTIAL_RESULT)) {
+            || statusHasAnyFlag(status, DO_NOT_CACHE_ENCODED | IS_PARTIAL_RESULT)
+                || newResult.getImageFormat() == ImageFormat.UNKNOWN) {
           getConsumer().onNewResult(newResult, status);
           return;
         }
