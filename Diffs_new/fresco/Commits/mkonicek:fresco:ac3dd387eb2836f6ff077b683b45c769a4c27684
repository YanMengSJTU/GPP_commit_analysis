diff --git a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/common/SimpleRoundingMethodAdapter.java b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/common/SimpleRoundingMethodAdapter.java
new file mode 100644
index 000000000..60d00c65d
--- /dev/null
+++ b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/common/SimpleRoundingMethodAdapter.java
@@ -0,0 +1,85 @@
+/*
+ * This file provided by Facebook is for non-commercial testing and evaluation
+ * purposes only.  Facebook reserves all rights not expressly granted.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+package com.facebook.fresco.samples.showcase.common;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import android.os.Build;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.TextView;
+
+import com.facebook.drawee.generic.RoundingParams;
+
+public class SimpleRoundingMethodAdapter extends BaseAdapter {
+
+  public static SimpleRoundingMethodAdapter createForAllRoundingMethods() {
+    List<Entry> entries = new ArrayList<>();
+    entries.add(new Entry(RoundingParams.RoundingMethod.OVERLAY_COLOR, "overlay_color"));
+    entries.add(new Entry(RoundingParams.RoundingMethod.BITMAP_ONLY, "bitmap_only"));
+    if (Build.VERSION.SDK_INT >= 21) {
+      entries.add(new Entry(RoundingParams.RoundingMethod.OUTLINE, "outline"));
+    }
+    return new SimpleRoundingMethodAdapter(entries);
+  }
+
+  private final List<Entry> mEntries;
+
+  private SimpleRoundingMethodAdapter(List<Entry> entries) {
+    mEntries = entries;
+  }
+
+  @Override
+  public int getCount() {
+    return mEntries.size();
+  }
+
+  @Override
+  public Object getItem(int position) {
+    return mEntries.get(position);
+  }
+
+  @Override
+  public long getItemId(int position) {
+    return position;
+  }
+
+  @Override
+  public View getView(int position, View convertView, ViewGroup parent) {
+    final LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
+
+    final View view = convertView != null
+        ? convertView
+        : layoutInflater.inflate(android.R.layout.simple_spinner_dropdown_item, parent, false);
+
+    final TextView textView = (TextView) view.findViewById(android.R.id.text1);
+    textView.setText(mEntries.get(position).description);
+
+    return view;
+  }
+
+  public static class Entry {
+
+    public final RoundingParams.RoundingMethod roundingMethod;
+    public final String description;
+
+    private Entry(
+        RoundingParams.RoundingMethod roundingMethod,
+        String description) {
+      this.roundingMethod = roundingMethod;
+      this.description = description;
+    }
+  }
+}
diff --git a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeRoundedCornersFragment.java b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeRoundedCornersFragment.java
index a53b04e19..9c8c412c1 100644
--- a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeRoundedCornersFragment.java
+++ b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeRoundedCornersFragment.java
@@ -11,14 +11,10 @@
  */
 package com.facebook.fresco.samples.showcase.drawee;
 
-import java.util.Arrays;
-import java.util.List;
-
 import android.content.res.Resources;
 import android.content.res.TypedArray;
 import android.graphics.Color;
 import android.graphics.PointF;
-import android.os.Build;
 import android.os.Bundle;
 import android.support.annotation.Nullable;
 import android.support.v4.app.Fragment;
@@ -29,7 +25,6 @@
 import android.widget.CheckBox;
 import android.widget.CompoundButton;
 import android.widget.Spinner;
-import android.widget.Toast;
 
 import com.facebook.common.internal.Preconditions;
 import com.facebook.drawee.drawable.ScalingUtils.ScaleType;
@@ -38,28 +33,19 @@
 import com.facebook.drawee.view.SimpleDraweeView;
 import com.facebook.fresco.samples.showcase.BaseShowcaseFragment;
 import com.facebook.fresco.samples.showcase.R;
+import com.facebook.fresco.samples.showcase.common.SimpleRoundingMethodAdapter;
 import com.facebook.fresco.samples.showcase.common.SimpleScaleTypeAdapter;
 
 /**
  * A {@link Fragment} that illustrates using rounded corners with Fresco.
  */
 public class DraweeRoundedCornersFragment extends BaseShowcaseFragment {
-  // TODO It looks like BITMAP_ONLY actually works for all scale types?
-  /**
-   * With these scale types, the contents of the picture will be clipped,
-   * either using a shader (on API level < 21) or View.setOutlineProvider (on API level 21+).
-   * For all other scale types we'll paint the rounded corners with a solid color.
-   */
-  private static final List<ScaleType> CLIP_SCALETYPES = Arrays.asList(
-      ScaleType.CENTER_CROP,
-      ScaleType.FOCUS_CROP,
-      ScaleType.FIT_XY);
-
-  private RoundingParams.RoundingMethod mPreviousRoundingMethod = getRoundingMethodForScaleType(ScaleType.CENTER);
-
   private int mWindowBackgroundColor;
   private int mColorPrimary;
 
+  private SimpleScaleTypeAdapter.Entry mScaleType;
+  private RoundingParams.RoundingMethod mRoundingMethod;
+
   private SimpleDraweeView mDraweeRound;
   private SimpleDraweeView mDraweeRadius;
   private SimpleDraweeView mDraweeSome;
@@ -89,29 +75,49 @@ public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
     findDrawees(view);
     initColors();
 
-    final Spinner scaleType = (Spinner) view.findViewById(R.id.scaleType);
+    final Spinner scaleTypeSpinner = (Spinner) view.findViewById(R.id.scaleType);
     final SimpleScaleTypeAdapter scaleTypeAdapter = SimpleScaleTypeAdapter.createForAllScaleTypes();
-    scaleType.setAdapter(scaleTypeAdapter);
-    scaleType.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
+    scaleTypeSpinner.setAdapter(scaleTypeAdapter);
+    scaleTypeSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
       @Override
       public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
         final SimpleScaleTypeAdapter.Entry spinnerEntry =
             (SimpleScaleTypeAdapter.Entry) scaleTypeAdapter.getItem(position);
-        final ScaleType scaleType = spinnerEntry.scaleType;
-
-        RoundingParams.RoundingMethod roundingMethod = getRoundingMethodForScaleType(scaleType);
-        changeDraweeViewScaleType(mDraweeRound, scaleType, roundingMethod, spinnerEntry.focusPoint);
-        changeDraweeViewScaleType(mDraweeRadius, scaleType, roundingMethod, spinnerEntry.focusPoint);
-        changeDraweeViewScaleType(mDraweeSome, scaleType, roundingMethod, spinnerEntry.focusPoint);
-        changeDraweeViewScaleType(mDraweeFancy, scaleType, roundingMethod, spinnerEntry.focusPoint);
-
-        if (roundingMethod != mPreviousRoundingMethod) {
-          Toast.makeText(
-              getContext(),
-              getString(R.string.drawee_rounded_corners_toast, roundingMethod),
-              Toast.LENGTH_SHORT).show();
+
+        mScaleType = spinnerEntry;
+        if (mRoundingMethod == null) {
+          return;
+        }
+        changeDraweeViewScaleType(mDraweeRound, mScaleType.scaleType, mRoundingMethod, mScaleType.focusPoint);
+        changeDraweeViewScaleType(mDraweeRadius, mScaleType.scaleType, mRoundingMethod, mScaleType.focusPoint);
+        changeDraweeViewScaleType(mDraweeSome, mScaleType.scaleType, mRoundingMethod, mScaleType.focusPoint);
+        changeDraweeViewScaleType(mDraweeFancy, mScaleType.scaleType, mRoundingMethod, mScaleType.focusPoint);
+      }
+
+      @Override
+      public void onNothingSelected(AdapterView<?> parent) {
+      }
+    });
+
+    final Spinner roundingMethodSpinner = (Spinner) view.findViewById(R.id.roundingMethod);
+    final SimpleRoundingMethodAdapter roundingMethodAdapter =
+        SimpleRoundingMethodAdapter.createForAllRoundingMethods();
+    roundingMethodSpinner.setAdapter(roundingMethodAdapter);
+    roundingMethodSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
+      @Override
+      public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
+        final SimpleRoundingMethodAdapter.Entry spinnerEntry =
+            (SimpleRoundingMethodAdapter.Entry) roundingMethodAdapter.getItem(position);
+        final RoundingParams.RoundingMethod roundingMethod = spinnerEntry.roundingMethod;
+
+        mRoundingMethod = roundingMethod;
+        if (mScaleType == null) {
+          return;
         }
-        mPreviousRoundingMethod = roundingMethod;
+        changeDraweeViewScaleType(mDraweeRound, mScaleType.scaleType, mRoundingMethod, mScaleType.focusPoint);
+        changeDraweeViewScaleType(mDraweeRadius, mScaleType.scaleType, mRoundingMethod, mScaleType.focusPoint);
+        changeDraweeViewScaleType(mDraweeSome, mScaleType.scaleType, mRoundingMethod, mScaleType.focusPoint);
+        changeDraweeViewScaleType(mDraweeFancy, mScaleType.scaleType, mRoundingMethod, mScaleType.focusPoint);
       }
 
       @Override
@@ -180,22 +186,6 @@ private void changeDraweeViewScaleType(
     draweeView.setRoundingParams(roundingParams);
   }
 
-  private RoundingParams.RoundingMethod getRoundingMethodForScaleType(ScaleType scaleType) {
-    // TODO It looks like BITMAP_ONLY actually works for all scale types?
-//    if (1 == 1) {
-//      return RoundingParams.RoundingMethod.BITMAP_ONLY;
-//    }
-    if (CLIP_SCALETYPES.contains(scaleType)) {
-      if (Build.VERSION.SDK_INT >= 21) {
-        return RoundingParams.RoundingMethod.OUTLINE;
-      } else {
-        return RoundingParams.RoundingMethod.BITMAP_ONLY;
-      }
-    } else {
-      return RoundingParams.RoundingMethod.OVERLAY_COLOR;
-    }
-  }
-
   private void setShowBorder(SimpleDraweeView draweeView, boolean show) {
     final RoundingParams roundingParams =
         Preconditions.checkNotNull(draweeView.getHierarchy().getRoundingParams());
diff --git a/samples/showcase/src/main/res/layout/fragment_drawee_rounded_corners.xml b/samples/showcase/src/main/res/layout/fragment_drawee_rounded_corners.xml
index 9c7213cef..9433c598b 100644
--- a/samples/showcase/src/main/res/layout/fragment_drawee_rounded_corners.xml
+++ b/samples/showcase/src/main/res/layout/fragment_drawee_rounded_corners.xml
@@ -75,19 +75,26 @@
   <LinearLayout
       android:layout_width="match_parent"
       android:layout_height="wrap_content"
-      android:layout_marginTop="@dimen/margin_medium"
+      android:layout_marginTop="@dimen/margin_small"
       android:orientation="horizontal"
       >
     <Spinner
         android:id="@+id/scaleType"
-        android:layout_width="wrap_content"
+        android:layout_width="0dp"
+        android:layout_weight="1"
         android:layout_height="wrap_content"
         />
-    <CheckBox
-        android:id="@+id/borders"
-        android:layout_width="wrap_content"
+    <Spinner
+        android:id="@+id/roundingMethod"
+        android:layout_width="0dp"
+        android:layout_weight="1"
         android:layout_height="wrap_content"
-        android:text="@string/drawee_rounded_corners_borders"
         />
   </LinearLayout>
+  <CheckBox
+      android:id="@+id/borders"
+      android:layout_width="wrap_content"
+      android:layout_height="wrap_content"
+      android:text="@string/drawee_rounded_corners_borders"
+      />
 </LinearLayout>
diff --git a/samples/showcase/src/main/res/values/strings.xml b/samples/showcase/src/main/res/values/strings.xml
index 99aa6fa66..1c9a265fc 100644
--- a/samples/showcase/src/main/res/values/strings.xml
+++ b/samples/showcase/src/main/res/values/strings.xml
@@ -156,7 +156,6 @@
   <string name="drawee_rounded_corners_some">Only rounding some corners</string>
   <string name="drawee_rounded_corners_fancy">Fancy (different radii)</string>
   <string name="drawee_rounded_corners_borders">Borders</string>
-  <string name="drawee_rounded_corners_toast">Switched to %1$s rounding method</string>
 
   <string name="drawee_hierarchy_load_success">Load (success)</string>
   <string name="drawee_hierarchy_load_fail">Load (fail)</string>
