diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ThreadHandoffProducerQueue.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ThreadHandoffProducerQueue.java
index ef2a32e13..46e66109c 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ThreadHandoffProducerQueue.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ThreadHandoffProducerQueue.java
@@ -11,48 +11,49 @@
 
 import com.facebook.common.internal.Preconditions;
 
-import java.util.ArrayList;
+import java.util.ArrayDeque;
+import java.util.Deque;
 import java.util.concurrent.Executor;
 
 public class ThreadHandoffProducerQueue {
-  private boolean mQueueing = false;
-  private final ArrayList<Runnable> mRunnableList;
-  private final Executor mExecutor;
-
-  public ThreadHandoffProducerQueue(Executor executor) {
-    mExecutor = Preconditions.checkNotNull(executor);
-    mRunnableList = new ArrayList<>();
-  }
-
-  public synchronized void addToQueueOrExecute(Runnable runnable) {
-    if (mQueueing) {
-      mRunnableList.add(runnable);
-    } else {
-      mExecutor.execute(runnable);
+    private boolean mQueueing = false;
+    private final Deque<Runnable> mRunnableList;
+    private final Executor mExecutor;
+
+    public ThreadHandoffProducerQueue(Executor executor) {
+        mExecutor = Preconditions.checkNotNull(executor);
+        mRunnableList = new ArrayDeque<>();
+    }
+
+
+    public synchronized void addToQueueOrExecute(Runnable runnable) {
+        if (mQueueing) {
+            mRunnableList.add(runnable);
+        } else {
+            mExecutor.execute(runnable);
+        }
     }
-  }
 
-  public synchronized void startQueueing() {
-    mQueueing = true;
-  }
+    public synchronized void startQueueing() {
+        mQueueing = true;
+    }
 
-  public synchronized void stopQueuing() {
-    mQueueing = false;
-    execInQueue();
-  }
+    public synchronized void stopQueuing() {
+        mQueueing = false;
+        execInQueue();
+    }
 
-  private void execInQueue() {
-    for (Runnable runnable : mRunnableList) {
-      mExecutor.execute(runnable);
+    private void execInQueue() {
+        while (!mRunnableList.isEmpty())
+            mExecutor.execute(mRunnableList.pop());
+        mRunnableList.clear();
     }
-    mRunnableList.clear();
-  }
 
-  public void remove(Runnable runnable) {
-    mRunnableList.remove(runnable);
-  }
+    public synchronized void remove(Runnable runnable) {
+        mRunnableList.remove(runnable);
+    }
 
-  public synchronized boolean isQueueing() {
-    return mQueueing;
-  }
+    public synchronized boolean isQueueing() {
+        return mQueueing;
+    }
 }
