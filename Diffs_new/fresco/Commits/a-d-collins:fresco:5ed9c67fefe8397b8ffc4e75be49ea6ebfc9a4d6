diff --git a/imagepipeline-base/src/main/java/com/facebook/imageformat/ImageFormatChecker.java b/imagepipeline-base/src/main/java/com/facebook/imageformat/ImageFormatChecker.java
index 1588f3f96..e93882c3d 100644
--- a/imagepipeline-base/src/main/java/com/facebook/imageformat/ImageFormatChecker.java
+++ b/imagepipeline-base/src/main/java/com/facebook/imageformat/ImageFormatChecker.java
@@ -51,7 +51,9 @@ public ImageFormat determineImageFormat(final InputStream is) throws IOException
     final int headerSize = readHeaderFromStream(mMaxHeaderLength, is, imageHeaderBytes);
 
     ImageFormat format = mDefaultFormatChecker.determineFormat(imageHeaderBytes, headerSize);
-    if (format != null) return format;
+    if (format != null) {
+      return format;
+    }
 
     if (mCustomImageFormatCheckers != null) {
       for (ImageFormat.FormatChecker formatChecker : mCustomImageFormatCheckers) {
diff --git a/imagepipeline-base/src/main/java/com/facebook/imageformat/ImageFormatCheckerUtils.java b/imagepipeline-base/src/main/java/com/facebook/imageformat/ImageFormatCheckerUtils.java
index 5dd17932b..185dec172 100644
--- a/imagepipeline-base/src/main/java/com/facebook/imageformat/ImageFormatCheckerUtils.java
+++ b/imagepipeline-base/src/main/java/com/facebook/imageformat/ImageFormatCheckerUtils.java
@@ -65,7 +65,7 @@ public static boolean startsWithPattern(
    * @param pattern the pattern to check
    * @return index of beginning of pattern, if found; otherwise -1
    */
-  public static int containsPattern(
+  public static int indexOfPattern(
       final byte[] byteArray,
       final byte[] pattern) {
     Preconditions.checkNotNull(byteArray);
@@ -77,8 +77,12 @@ public static int containsPattern(
     for (int i = 0; i < (byteArray.length - pattern.length); i++) {
       if (byteArray[i] == pattern[0]) {
         for (int j = 1; j < pattern.length; j++) {
-          if (byteArray[i + j] != pattern[j]) break;
-          if (j == pattern.length - 1) return i;
+          if (byteArray[i + j] != pattern[j]) {
+            break;
+          }
+          if (j == pattern.length - 1) {
+            return i;
+          }
         }
       }
     }
diff --git a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imageformat/svg/SvgDecoderExample.java b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imageformat/svg/SvgDecoderExample.java
index 93f0a34ee..95ee93bb8 100644
--- a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imageformat/svg/SvgDecoderExample.java
+++ b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imageformat/svg/SvgDecoderExample.java
@@ -41,6 +41,7 @@
 
   // We do not include the closing ">" since there can be additional information
   private static final String HEADER_TAG = "<svg";
+  private static final String[] POSSIBLE_HEADER_TAGS = { "<?xml" };
 
   public static class SvgFormatChecker implements ImageFormat.FormatChecker {
 
@@ -60,6 +61,13 @@ public ImageFormat determineFormat(byte[] headerBytes, int headerSize) {
       if (ImageFormatCheckerUtils.startsWithPattern(headerBytes, HEADER)) {
         return SVG_FORMAT;
       }
+      for (String possibleHeaderTag : POSSIBLE_HEADER_TAGS) {
+        byte[] possibleHeader = ImageFormatCheckerUtils.asciiBytes(possibleHeaderTag);
+        if (ImageFormatCheckerUtils.startsWithPattern(headerBytes, possibleHeader) &&
+            ImageFormatCheckerUtils.indexOfPattern(headerBytes, HEADER) > -1) {
+          return SVG_FORMAT;
+        }
+      }
       return null;
     }
   }
