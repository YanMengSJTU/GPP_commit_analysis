diff --git a/gradle.properties b/gradle.properties
index 95fbce6a3..677aad2f4 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -18,8 +18,8 @@
 # org.gradle.parallel=true
 
 target=10
-VERSION_NAME=0.8.1
-GROUP=com.facebook.fresco
+VERSION_NAME=0.8.2
+GROUP=com.github.theyy
 
 # Deps for gradle
 BUILD_TOOLS_VERSION=23.0.0
@@ -48,3 +48,10 @@ GLIDE_VERSION=3.6.1
 UIL_VERSION=1.9.4
 PICASSO_VERSION=2.5.2
 AQUERY_VERSION=0.25.9
+
+// local setting.
+ndk.path=/Users/yangyang/Android/android-ndk-r10c
+
+
+
+
diff --git a/imagepipeline/build.gradle b/imagepipeline/build.gradle
index 88a3b98c2..f281a7ca1 100644
--- a/imagepipeline/build.gradle
+++ b/imagepipeline/build.gradle
@@ -189,9 +189,8 @@ android {
     def ndkLibs = [
         ['bitmaps', []],
         ['gifimage', [copyGiflib]],
-        ['imagepipeline', [copyLibjpeg, copyLibpng, copyLibwebp]],
-        ['memchunk', []],
-        ['webpimage', [copyLibwebp]]]
+        ['imagepipeline', [copyLibjpeg, copyLibpng]],
+        ['memchunk', []]]
 
     buildToolsVersion rootProject.ext.buildToolsVersion
     compileSdkVersion rootProject.ext.compileSdkVersion
diff --git a/imagepipeline/src/main/jni/Application.mk b/imagepipeline/src/main/jni/Application.mk
index 1b8034d0d..e09bb59d4 100644
--- a/imagepipeline/src/main/jni/Application.mk
+++ b/imagepipeline/src/main/jni/Application.mk
@@ -1,7 +1,9 @@
 # Copyright 2004-present Facebook. All Rights Reserved.
 APP_BUILD_SCRIPT := Android.mk
 
-APP_ABI := armeabi-v7a armeabi arm64-v8a x86 x86_64
+#APP_ABI := armeabi-v7a armeabi arm64-v8a x86 x86_64
+APP_ABI := armeabi-v7a armeabi  x86
+
 APP_PLATFORM := android-9
 
 APP_MK_DIR := $(dir $(lastword $(MAKEFILE_LIST)))
diff --git a/imagepipeline/src/main/jni/imagepipeline/Android.mk b/imagepipeline/src/main/jni/imagepipeline/Android.mk
index f1fadc3d3..d7c4727ab 100644
--- a/imagepipeline/src/main/jni/imagepipeline/Android.mk
+++ b/imagepipeline/src/main/jni/imagepipeline/Android.mk
@@ -12,14 +12,9 @@ LOCAL_SRC_FILES := \
 	jpeg/jpeg_error_handler.cpp \
 	jpeg/jpeg_memory_io.cpp \
 	jpeg/jpeg_stream_wrappers.cpp \
-	png/png_codec.cpp \
-	png/png_stream_wrappers.cpp \
 	streams.cpp \
 	transformations.cpp \
-	webp/webp_codec.cpp \
 	JpegTranscoder.cpp \
-	WebpTranscoder.cpp
-
 
 CXX11_FLAGS := -std=c++11
 LOCAL_CFLAGS += $(CXX11_FLAGS)
@@ -31,17 +26,10 @@ LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)
 LOCAL_LDLIBS := -llog
 LOCAL_LDFLAGS += $(FRESCO_CPP_LDFLAGS)
 
-LOCAL_SHARED_LIBRARIES += webp
-
 LOCAL_STATIC_LIBRARIES += fb_jpegturbo
 LOCAL_LDFLAGS += -Wl,--exclude-libs,libfb_jpegturbo.a
 
 LOCAL_LDLIBS += -lz
 
-LOCAL_STATIC_LIBRARIES += fb_png
-LOCAL_LDFLAGS += -Wl,--exclude-libs,libfb_png.a
-
 include $(BUILD_SHARED_LIBRARY)
-$(call import-module,libpng-1.6.10)
-$(call import-module,libwebp-0.4.3)
 $(call import-module,libjpeg-turbo-1.3.x)
diff --git a/imagepipeline/src/main/jni/imagepipeline/WebpTranscoder.cpp b/imagepipeline/src/main/jni/imagepipeline/WebpTranscoder.cpp
deleted file mode 100644
index e3613569b..000000000
--- a/imagepipeline/src/main/jni/imagepipeline/WebpTranscoder.cpp
+++ /dev/null
@@ -1,77 +0,0 @@
-/*
- * Copyright (c) 2015-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- */
-
-#include <type_traits>
-
-#include <jni.h>
-
-#include "exceptions.h"
-#include "jpeg/jpeg_codec.h"
-#include "logging.h"
-#include "decoded_image.h"
-#include "png/png_codec.h"
-#include "webp/webp_codec.h"
-#include "WebpTranscoder.h"
-
-using facebook::imagepipeline::PixelFormat;
-using facebook::imagepipeline::jpeg::encodeJpegIntoOutputStream;
-using facebook::imagepipeline::png::encodePngIntoOutputStream;
-using facebook::imagepipeline::webp::decodeWebpFromInputStream;
-
-static void WebpTranscoder_transcodeToJpeg(
-    JNIEnv* env,
-    jclass clzz,
-    jobject is,
-    jobject os,
-    jint quality) {
-  auto decodedImagePtr = decodeWebpFromInputStream(env, is, PixelFormat::RGB);
-  RETURN_IF_EXCEPTION_PENDING;
-  encodeJpegIntoOutputStream(env, *decodedImagePtr, os, quality);
-}
-
-static void WebpTranscoder_transcodeToPng(
-    JNIEnv* env,
-    jclass clzz,
-    jobject is,
-    jobject os) {
-  using namespace facebook::imagepipeline;
-  auto decodedImagePtr = decodeWebpFromInputStream(env, is, PixelFormat::RGBA);
-  RETURN_IF_EXCEPTION_PENDING;
-  encodePngIntoOutputStream(env, *decodedImagePtr, os);
-}
-
-static JNINativeMethod gWebpTranscoderMethods[] = {
-  { "nativeTranscodeWebpToJpeg",
-    "(Ljava/io/InputStream;Ljava/io/OutputStream;I)V",
-    (void*) WebpTranscoder_transcodeToJpeg },
-  { "nativeTranscodeWebpToPng",
-    "(Ljava/io/InputStream;Ljava/io/OutputStream;)V",
-    (void*) WebpTranscoder_transcodeToPng },
-};
-
-bool registerWebpTranscoderMethods(JNIEnv* env){
-  auto webPTranscoderClass = env->FindClass(
-      "com/facebook/imagepipeline/nativecode/WebpTranscoder");
-  if (webPTranscoderClass == nullptr) {
-    LOGE("could not find WebpTranscoder class");
-    return false;
-  }
-
-  auto result = env->RegisterNatives(
-      webPTranscoderClass,
-      gWebpTranscoderMethods,
-      std::extent<decltype(gWebpTranscoderMethods)>::value);
-
-  if (result != 0) {
-    LOGE("could not register WebpTranscoder methods");
-    return false;
-  }
-
-  return true;
-}
diff --git a/imagepipeline/src/main/jni/imagepipeline/WebpTranscoder.h b/imagepipeline/src/main/jni/imagepipeline/WebpTranscoder.h
deleted file mode 100644
index 4101c8918..000000000
--- a/imagepipeline/src/main/jni/imagepipeline/WebpTranscoder.h
+++ /dev/null
@@ -1,15 +0,0 @@
-/*
- * Copyright (c) 2015-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- */
-
-#ifndef _WEBPTRANSCODER_H_
-#define _WEBPTRANSCODER_H_
-
-bool registerWebpTranscoderMethods(JNIEnv* env);
-
-#endif /* _WEBPTRANSCODER_H_ */
diff --git a/imagepipeline/src/main/jni/imagepipeline/init.cpp b/imagepipeline/src/main/jni/imagepipeline/init.cpp
index cff842b3a..1402cff25 100644
--- a/imagepipeline/src/main/jni/imagepipeline/init.cpp
+++ b/imagepipeline/src/main/jni/imagepipeline/init.cpp
@@ -13,7 +13,6 @@
 #include "java_globals.h"
 #include "logging.h"
 #include "JpegTranscoder.h"
-#include "WebpTranscoder.h"
 
 jmethodID midInputStreamRead;
 jmethodID midInputStreamSkip;
@@ -84,10 +83,6 @@ JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved) {
       !registerJpegTranscoderMethods(env),
       "Could not register JpegTranscoder methods",
       -1);
-  THROW_AND_RETURNVAL_IF(
-      !registerWebpTranscoderMethods(env),
-      "Could not register WebpTranscoderMethods",
-      -1);
 
   return JNI_VERSION_1_6;
 }
diff --git a/imagepipeline/src/main/jni/imagepipeline/png/png_codec.cpp b/imagepipeline/src/main/jni/imagepipeline/png/png_codec.cpp
deleted file mode 100644
index a2a13eaa6..000000000
--- a/imagepipeline/src/main/jni/imagepipeline/png/png_codec.cpp
+++ /dev/null
@@ -1,82 +0,0 @@
-/*
- * Copyright (c) 2015-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- */
-
-#include <iterator>
-
-#include <jni.h>
-#include <png.h>
-
-#include "exceptions.h"
-#include "png_stream_wrappers.h"
-#include "decoded_image.h"
-#include "png_utils.h"
-#include "png_codec.h"
-
-namespace facebook {
-namespace imagepipeline {
-namespace png {
-
-void encodePngIntoOutputStream(
-    JNIEnv* env,
-    DecodedImage& decoded_image,
-    jobject os) {
-  THROW_AND_RETURN_IF(
-      decoded_image.getPixelFormat() != PixelFormat::RGBA,
-      "png encode function expect ARGB pixel format");
-
-  png_structp png_ptr = png_create_write_struct(
-      PNG_LIBPNG_VER_STRING,
-      nullptr,
-      nullptr,
-      nullptr);
-  THROW_AND_RETURN_IF(png_ptr == nullptr, "could not create png struct");
-  PngStructGuard png_guard{png_ptr};
-
-  png_infop info_ptr = png_create_info_struct(png_ptr);
-  THROW_AND_RETURN_IF(info_ptr == nullptr, "could not create png info");
-  png_guard.setInfoPtr(info_ptr);
-
-  PngOutputStreamWrapper os_wrapper{env, os};
-  RETURN_IF_EXCEPTION_PENDING;
-
-  // Create all png structs that needs releasing before this line.
-  if (setjmp(png_jmpbuf(png_ptr))) {
-    safeThrowJavaException(env, jRuntimeException_class, "error encoding png");
-    return;
-  }
-
-  png_set_IHDR(
-    png_ptr,
-    info_ptr,
-    decoded_image.getWidth(),
-    decoded_image.getHeight(),
-    8,
-    PNG_COLOR_TYPE_RGBA,
-    PNG_INTERLACE_NONE,
-    PNG_COMPRESSION_TYPE_BASE,
-    PNG_FILTER_TYPE_BASE
-  );
-  png_set_write_fn(
-      png_ptr,
-      &os_wrapper,
-      pngWriteToJavaOutputStream,
-      pngNoOpFlush);
-
-  // write the image
-  const int row_stride = decoded_image.getStride();
-  png_bytep row_pointer = decoded_image.getPixelsPtr();
-  png_write_info(png_ptr, info_ptr);
-  for (unsigned i = 0; i < decoded_image.getHeight(); ++i) {
-    png_write_row(png_ptr, row_pointer);
-    std::advance(row_pointer, row_stride);
-  }
-  png_write_end(png_ptr, info_ptr);
-}
-
-} } }
diff --git a/imagepipeline/src/main/jni/imagepipeline/png/png_codec.h b/imagepipeline/src/main/jni/imagepipeline/png/png_codec.h
deleted file mode 100644
index 79ce1e614..000000000
--- a/imagepipeline/src/main/jni/imagepipeline/png/png_codec.h
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
- * Copyright (c) 2015-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- */
-
-#ifndef _PNG_CODEC_H_
-#define _PNG_CODEC_H_
-
-#include <jni.h>
-
-#include "decoded_image.h"
-
-namespace facebook {
-namespace imagepipeline {
-namespace png {
-
-/**
- * Encodes given image using libpng and writtes encoded bytes
- * into provided output stream.
- *
- * @param env
- * @param decoded_image
- * @param os output stream to write data to
- * @param quality value passed to png encoder
- */
-void encodePngIntoOutputStream(
-    JNIEnv* env,
-    DecodedImage& decoded_image,
-    jobject os);
-
-} } }
-
-
-#endif /* _PNG_CODEC_H_ */
diff --git a/imagepipeline/src/main/jni/imagepipeline/png/png_stream_wrappers.cpp b/imagepipeline/src/main/jni/imagepipeline/png/png_stream_wrappers.cpp
deleted file mode 100644
index 79cb4b9ab..000000000
--- a/imagepipeline/src/main/jni/imagepipeline/png/png_stream_wrappers.cpp
+++ /dev/null
@@ -1,73 +0,0 @@
-/*
- * Copyright (c) 2015-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- */
-
-#include <algorithm>
-#include <iterator>
-
-#include <jni.h>
-#include <png.h>
-
-#include "exceptions.h"
-#include "java_globals.h"
-#include "png_stream_wrappers.h"
-
-namespace facebook {
-namespace imagepipeline {
-namespace png {
-
-void pngNoOpFlush(png_structp png_ptr) {
-}
-
-void pngWriteToJavaOutputStream(
-    png_structp png_ptr,
-    png_bytep data,
-    png_size_t length) {
-  PngOutputStreamWrapper* os_wrapper =
-    reinterpret_cast<PngOutputStreamWrapper*>(png_get_io_ptr(png_ptr));
-  os_wrapper->write(png_ptr, data, length);
-}
-
-PngOutputStreamWrapper::PngOutputStreamWrapper(
-    JNIEnv* env,
-    jobject os,
-    const int bufferSize)
-    : env_(env), os_(os), bufferSize_(bufferSize) {
-  buffer_ = env_->NewByteArray(bufferSize_);
-  RETURN_IF_EXCEPTION_PENDING;
-}
-
-void PngOutputStreamWrapper::write(
-    png_structp png_ptr,
-    png_bytep data,
-    png_size_t length) {
-  while (length > 0) {
-    const int portion_length = std::min<int>(bufferSize_, length);
-    env_->SetByteArrayRegion(
-        buffer_,
-        0,
-        reinterpret_cast<jsize>(portion_length),
-        reinterpret_cast<jbyte*>(data));
-    if (env_->ExceptionCheck()) {
-      png_error(png_ptr, "Error when copying data to java array.");
-    }
-    env_->CallVoidMethod(
-        os_,
-        midOutputStreamWriteWithBounds,
-        buffer_,
-        0,
-        reinterpret_cast<jint>(portion_length));
-    if (env_->ExceptionCheck()) {
-      png_error(png_ptr, "Error when writing data to OutputStream.");
-    }
-    std::advance(data, portion_length);
-    length -= portion_length;
-  }
-}
-
-} } }
diff --git a/imagepipeline/src/main/jni/imagepipeline/png/png_stream_wrappers.h b/imagepipeline/src/main/jni/imagepipeline/png/png_stream_wrappers.h
deleted file mode 100644
index 324b106f7..000000000
--- a/imagepipeline/src/main/jni/imagepipeline/png/png_stream_wrappers.h
+++ /dev/null
@@ -1,60 +0,0 @@
-/*
- * Copyright (c) 2015-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- */
-
-#ifndef _PNG_STREAM_WRAPPERS_H_
-#define _PNG_STREAM_WRAPPERS_H_
-
-#include <jni.h>
-#include <png.h>
-
-namespace facebook {
-namespace imagepipeline {
-namespace png {
-
-const int kIOBufferSize = 8 * 1024;
-
-/**
- * Wrapper for java OutputStream that makes it possible to forward output
- * of libpng directly to OutputStream.
- */
-class PngOutputStreamWrapper {
- public:
-  PngOutputStreamWrapper(
-      JNIEnv* env,
-      jobject os,
-      const int bufferSize = kIOBufferSize);
-
-  void write(
-      png_structp png_ptr,
-      png_bytep data,
-      png_size_t length);
-
- private:
-  JNIEnv* env_;
-  jobject os_;
-  jbyteArray buffer_;
-  const int bufferSize_;
-};
-
-/**
- * Wrire function that should
- */
-void pngWriteToJavaOutputStream(
-    png_structp png_ptr,
-    png_bytep data,
-    png_size_t length);
-
-/**
- * No op flush function to be used with java output stream wrappers
- */
-void pngNoOpFlush(png_structp png_ptr);
-
-} } }
-
-#endif /* _PNG_STREAM_WRAPPERS_H_ */
diff --git a/imagepipeline/src/main/jni/imagepipeline/png/png_utils.h b/imagepipeline/src/main/jni/imagepipeline/png/png_utils.h
deleted file mode 100644
index 6fec112ac..000000000
--- a/imagepipeline/src/main/jni/imagepipeline/png/png_utils.h
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * Copyright (c) 2015-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- */
-
-#ifndef _PNG_UTILS_H_
-#define _PNG_UTILS_H_
-
-namespace facebook {
-namespace imagepipeline {
-namespace png {
-
-#include <png.h>
-
-/**
- * RAII wrapper for png_struct and png_info which are basic libpng
- * structures that require destruction.
- */
-class PngStructGuard {
- public:
-  /**
-   * Create PngStructGuard initializing it with pointer to png_struct
-   */
-  PngStructGuard(png_structp pngStructP)
-    : pngStructP_(pngStructP), pngInfoP_(nullptr) {}
-
-  /**
-   * Release libpng resources.
-   */
-  ~PngStructGuard() {
-    png_destroy_write_struct(&pngStructP_, &pngInfoP_);
-  }
-
-  /**
-   * Associate png_info with the guard.
-   */
-  void setInfoPtr(png_infop pngInfoP) { pngInfoP_ = pngInfoP; }
-
- private:
-  png_structp pngStructP_;
-  png_infop pngInfoP_;
-};
-
-} } }
-
-#endif /* _PNG_UTILS_H_ */
diff --git a/imagepipeline/src/main/jni/imagepipeline/webp/webp_codec.cpp b/imagepipeline/src/main/jni/imagepipeline/webp/webp_codec.cpp
deleted file mode 100644
index 6cad20d02..000000000
--- a/imagepipeline/src/main/jni/imagepipeline/webp/webp_codec.cpp
+++ /dev/null
@@ -1,116 +0,0 @@
-/*
- * Copyright (c) 2015-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- */
-
-#include <jni.h>
-#include <webp/demux.h>
-#include <webp/decode.h>
-
-#include "exceptions.h"
-#include "decoded_image.h"
-#include "streams.h"
-#include "webp_codec.h"
-
-namespace facebook {
-namespace imagepipeline {
-namespace webp {
-
-/**
- * Uses libwebp to extract xmp metadata.
- */
-const std::vector<uint8_t> extractMetadata(
-    JNIEnv* env,
-    std::vector<uint8_t>& image_data) {
-  // Create WebPDemux from provided data.
-  // It is "index" of all chunks. It stores
-  // list of pointers to particular chunks, but does
-  // not copy memory from provided WebPData.
-  WebPData webpdata = {image_data.data(), image_data.size()};
-  // Thsnks to using RAII we do not need to worry about
-  // releasing WebPDemuxer structure
-  auto demux = std::unique_ptr<WebPDemuxer, decltype(&WebPDemuxDelete)>{
-      WebPDemux(&webpdata),
-      WebPDemuxDelete};
-  THROW_AND_RETURNVAL_IF(
-      demux == nullptr,
-      "Could not create WebPDemux from image. This webp might be malformed.",
-      {});
-
-  // find xmp chunk
-  WebPChunkIterator chunk_iterator;
-  if (!WebPDemuxGetChunk(demux.get(), "XMP ", 1, &chunk_iterator)) {
-    // we failed to find "XMP " chunk - don't worry, maybe it was not
-    // there. Let the transcode proceed
-    WebPDemuxReleaseChunkIterator(&chunk_iterator);
-    return {};
-  }
-
-  // we managed to find "XMP " chunk, let's return its size and pointer to it
-  const unsigned int metadata_length = chunk_iterator.chunk.size;
-  const uint8_t* metadata_ptr = chunk_iterator.chunk.bytes;
-
-  WebPDemuxReleaseChunkIterator(&chunk_iterator);
-
-  // If XMP chunk contains no data then return nullptr.
-  if (metadata_length == 0) {
-    return {};
-  }
-
-  return {metadata_ptr, metadata_ptr + metadata_length};
-}
-
-std::unique_ptr<DecodedImage> decodeWebpFromInputStream(
-    JNIEnv* env,
-    jobject is,
-    PixelFormat pixel_format) {
-  // get image into decoded heap
-  auto encoded_image = readStreamFully(env, is);
-  RETURNVAL_IF_EXCEPTION_PENDING({});
-
-  // extract metadata
-  auto metadata = extractMetadata(env, encoded_image);
-  RETURNVAL_IF_EXCEPTION_PENDING({});
-
-  // get pixels
-  int image_width = 0;
-  int image_height = 0;
-  uint8_t* raw_pixels = nullptr;
-
-  switch (pixel_format) {
-  case PixelFormat::RGB:
-    raw_pixels = WebPDecodeRGB(
-        encoded_image.data(),
-        encoded_image.size(),
-        &image_width,
-        &image_height);
-    break;
-
-  case PixelFormat::RGBA:
-    raw_pixels = WebPDecodeRGBA(
-        encoded_image.data(),
-        encoded_image.size(),
-        &image_width,
-        &image_height);
-    break;
-
-  default:
-    THROW_AND_RETURNVAL_IF(true, "unrecognized pixel format", {});
-  }
-
-  auto pixels = pixels_t{raw_pixels, (void(*)(uint8_t*)) &free};
-
-  return std::unique_ptr<DecodedImage>{
-      new DecodedImage{
-          std::move(pixels),
-          pixel_format,
-          (unsigned int) image_width,
-          (unsigned int) image_height,
-          std::move(metadata)}};
-}
-
-} } }
diff --git a/imagepipeline/src/main/jni/imagepipeline/webp/webp_codec.h b/imagepipeline/src/main/jni/imagepipeline/webp/webp_codec.h
deleted file mode 100644
index 0d3f32419..000000000
--- a/imagepipeline/src/main/jni/imagepipeline/webp/webp_codec.h
+++ /dev/null
@@ -1,37 +0,0 @@
-/*
- * Copyright (c) 2015-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- */
-
-#ifndef _WEBP_CODEC_H_
-#define _WEBP_CODEC_H_
-
-#include <memory>
-
-#include <jni.h>
-
-#include "decoded_image.h"
-
-namespace facebook {
-namespace imagepipeline {
-namespace webp {
-
-/**
- * Decodes webp image from given input stream.
- *
- * @param env
- * @param is
- * @param pixel_format
- */
-std::unique_ptr<DecodedImage> decodeWebpFromInputStream(
-    JNIEnv* env,
-    jobject is,
-    PixelFormat pixel_format);
-
-} } }
-
-#endif /* _WEBP_CODEC_H_ */
diff --git a/imagepipeline/src/main/jni/memchunk/NativeMemoryChunk.c b/imagepipeline/src/main/jni/memchunk/NativeMemoryChunk.c
index c900b8962..9f805363c 100644
--- a/imagepipeline/src/main/jni/memchunk/NativeMemoryChunk.c
+++ b/imagepipeline/src/main/jni/memchunk/NativeMemoryChunk.c
@@ -19,6 +19,7 @@
 
 static jclass jRuntimeException_class;
 
+// 分配内存空间，返回分配空间地址.
 static jlong NativeMemoryChunk_nativeAllocate(
     JNIEnv* env,
     jclass clzz,
@@ -32,6 +33,7 @@ static jlong NativeMemoryChunk_nativeAllocate(
   return PTR_TO_JLONG(pointer);
 }
 
+// 释放分配空间地址.
 static void NativeMemoryChunk_nativeFree(
     JNIEnv* env,
     jclass clzz,
@@ -41,6 +43,7 @@ static void NativeMemoryChunk_nativeFree(
   free(JLONG_TO_PTR(lpointer));
 }
 
+// 将字节数组里面的数据拷贝到指针所指的内存空间.
 static void NativeMemoryChunk_nativeCopyToByteArray(
     JNIEnv* env,
     jclass clzz,
@@ -57,6 +60,7 @@ static void NativeMemoryChunk_nativeCopyToByteArray(
       JLONG_TO_PTR(lpointer));
 }
 
+// 将内存空间的数据拷贝到字节数组中.
 static void NativeMemoryChunk_nativeCopyFromByteArray(
     JNIEnv* env,
     jclass clzz,
@@ -73,6 +77,7 @@ static void NativeMemoryChunk_nativeCopyFromByteArray(
       JLONG_TO_PTR(lpointer));
 }
 
+// 内存拷贝
 static void NativeMemoryChunk_nativeMemcpy(
     JNIEnv* env,
     jclass clzz,
@@ -84,6 +89,7 @@ static void NativeMemoryChunk_nativeMemcpy(
   memcpy(JLONG_TO_PTR(dst), JLONG_TO_PTR(src), count);
 }
 
+// 读取内存某一个字节
 static jbyte NativeMemoryChunk_nativeReadByte(
     JNIEnv* env,
     jclass clzz,
diff --git a/imagepipeline/src/main/jni/third-party/libpng-1.6.10/Android.mk b/imagepipeline/src/main/jni/third-party/libpng-1.6.10/Android.mk
deleted file mode 100644
index 75458c4fb..000000000
--- a/imagepipeline/src/main/jni/third-party/libpng-1.6.10/Android.mk
+++ /dev/null
@@ -1,26 +0,0 @@
-LOCAL_PATH:= $(call my-dir)
-
-LIBPNG_SRC_FILES:= \
-	png.c \
-	pngerror.c \
-	pngget.c \
-	pngmem.c \
-	pngpread.c \
-	pngread.c \
-	pngrio.c \
-	pngrtran.c \
-	pngrutil.c \
-	pngset.c \
-	pngtrans.c \
-	pngwio.c \
-	pngwrite.c \
-	pngwtran.c \
-	pngwutil.c
-
-
-include $(CLEAR_VARS)
-LOCAL_MODULE:= libfb_png
-LOCAL_SRC_FILES:= $(LIBPNG_SRC_FILES)
-LOCAL_CFLAGS:= $(LIBPNG_CFLAGS)
-LOCAL_EXPORT_C_INCLUDES:= $(LOCAL_PATH)
-include $(BUILD_STATIC_LIBRARY)
diff --git a/imagepipeline/src/main/jni/third-party/libpng-1.6.10/pnglibconf.h b/imagepipeline/src/main/jni/third-party/libpng-1.6.10/pnglibconf.h
deleted file mode 100644
index 9d4ef5a16..000000000
--- a/imagepipeline/src/main/jni/third-party/libpng-1.6.10/pnglibconf.h
+++ /dev/null
@@ -1,211 +0,0 @@
-/* libpng 1.6.10 STANDARD API DEFINITION */
-
-/* pnglibconf.h - library build configuration */
-
-/* Libpng version 1.6.10 - March 6, 2014 */
-
-/* Copyright (c) 1998-2013 Glenn Randers-Pehrson */
-
-/* This code is released under the libpng license. */
-/* For conditions of distribution and use, see the disclaimer */
-/* and license in png.h */
-
-/* pnglibconf.h */
-/* Machine generated file: DO NOT EDIT */
-/* Derived from: scripts/pnglibconf.dfa */
-#ifndef PNGLCONF_H
-#define PNGLCONF_H
-/* options */
-#define PNG_16BIT_SUPPORTED
-#define PNG_ALIGNED_MEMORY_SUPPORTED
-/*#undef PNG_ARM_NEON_API_SUPPORTED*/
-/*#undef PNG_ARM_NEON_CHECK_SUPPORTED*/
-#define PNG_BENIGN_ERRORS_SUPPORTED
-#define PNG_BENIGN_READ_ERRORS_SUPPORTED
-/*#undef PNG_BENIGN_WRITE_ERRORS_SUPPORTED*/
-#define PNG_BUILD_GRAYSCALE_PALETTE_SUPPORTED
-#define PNG_CHECK_FOR_INVALID_INDEX_SUPPORTED
-#define PNG_COLORSPACE_SUPPORTED
-#define PNG_CONSOLE_IO_SUPPORTED
-#define PNG_CONVERT_tIME_SUPPORTED
-#define PNG_EASY_ACCESS_SUPPORTED
-/*#undef PNG_ERROR_NUMBERS_SUPPORTED*/
-#define PNG_ERROR_TEXT_SUPPORTED
-#define PNG_FIXED_POINT_SUPPORTED
-#define PNG_FLOATING_ARITHMETIC_SUPPORTED
-#define PNG_FLOATING_POINT_SUPPORTED
-#define PNG_FORMAT_AFIRST_SUPPORTED
-#define PNG_FORMAT_BGR_SUPPORTED
-#define PNG_GAMMA_SUPPORTED
-#define PNG_GET_PALETTE_MAX_SUPPORTED
-#define PNG_HANDLE_AS_UNKNOWN_SUPPORTED
-#define PNG_INCH_CONVERSIONS_SUPPORTED
-#define PNG_INFO_IMAGE_SUPPORTED
-#define PNG_IO_STATE_SUPPORTED
-#define PNG_MNG_FEATURES_SUPPORTED
-#define PNG_POINTER_INDEXING_SUPPORTED
-#define PNG_PROGRESSIVE_READ_SUPPORTED
-#define PNG_READ_16BIT_SUPPORTED
-#define PNG_READ_ALPHA_MODE_SUPPORTED
-#define PNG_READ_ANCILLARY_CHUNKS_SUPPORTED
-#define PNG_READ_BACKGROUND_SUPPORTED
-#define PNG_READ_BGR_SUPPORTED
-#define PNG_READ_CHECK_FOR_INVALID_INDEX_SUPPORTED
-#define PNG_READ_COMPOSITE_NODIV_SUPPORTED
-#define PNG_READ_COMPRESSED_TEXT_SUPPORTED
-#define PNG_READ_EXPAND_16_SUPPORTED
-#define PNG_READ_EXPAND_SUPPORTED
-#define PNG_READ_FILLER_SUPPORTED
-#define PNG_READ_GAMMA_SUPPORTED
-#define PNG_READ_GET_PALETTE_MAX_SUPPORTED
-#define PNG_READ_GRAY_TO_RGB_SUPPORTED
-#define PNG_READ_INTERLACING_SUPPORTED
-#define PNG_READ_INT_FUNCTIONS_SUPPORTED
-#define PNG_READ_INVERT_ALPHA_SUPPORTED
-#define PNG_READ_INVERT_SUPPORTED
-#define PNG_READ_OPT_PLTE_SUPPORTED
-#define PNG_READ_PACKSWAP_SUPPORTED
-#define PNG_READ_PACK_SUPPORTED
-#define PNG_READ_QUANTIZE_SUPPORTED
-#define PNG_READ_RGB_TO_GRAY_SUPPORTED
-#define PNG_READ_SCALE_16_TO_8_SUPPORTED
-#define PNG_READ_SHIFT_SUPPORTED
-#define PNG_READ_STRIP_16_TO_8_SUPPORTED
-#define PNG_READ_STRIP_ALPHA_SUPPORTED
-#define PNG_READ_SUPPORTED
-#define PNG_READ_SWAP_ALPHA_SUPPORTED
-#define PNG_READ_SWAP_SUPPORTED
-#define PNG_READ_TEXT_SUPPORTED
-#define PNG_READ_TRANSFORMS_SUPPORTED
-#define PNG_READ_UNKNOWN_CHUNKS_SUPPORTED
-#define PNG_READ_USER_CHUNKS_SUPPORTED
-#define PNG_READ_USER_TRANSFORM_SUPPORTED
-#define PNG_READ_bKGD_SUPPORTED
-#define PNG_READ_cHRM_SUPPORTED
-#define PNG_READ_gAMA_SUPPORTED
-#define PNG_READ_hIST_SUPPORTED
-#define PNG_READ_iCCP_SUPPORTED
-#define PNG_READ_iTXt_SUPPORTED
-#define PNG_READ_oFFs_SUPPORTED
-#define PNG_READ_pCAL_SUPPORTED
-#define PNG_READ_pHYs_SUPPORTED
-#define PNG_READ_sBIT_SUPPORTED
-#define PNG_READ_sCAL_SUPPORTED
-#define PNG_READ_sPLT_SUPPORTED
-#define PNG_READ_sRGB_SUPPORTED
-#define PNG_READ_tEXt_SUPPORTED
-#define PNG_READ_tIME_SUPPORTED
-#define PNG_READ_tRNS_SUPPORTED
-#define PNG_READ_zTXt_SUPPORTED
-/*#undef PNG_SAFE_LIMITS_SUPPORTED*/
-#define PNG_SAVE_INT_32_SUPPORTED
-#define PNG_SAVE_UNKNOWN_CHUNKS_SUPPORTED
-#define PNG_SEQUENTIAL_READ_SUPPORTED
-#define PNG_SETJMP_SUPPORTED
-#define PNG_SET_CHUNK_CACHE_LIMIT_SUPPORTED
-#define PNG_SET_CHUNK_MALLOC_LIMIT_SUPPORTED
-#define PNG_SET_OPTION_SUPPORTED
-#define PNG_SET_UNKNOWN_CHUNKS_SUPPORTED
-#define PNG_SET_USER_LIMITS_SUPPORTED
-#define PNG_SIMPLIFIED_READ_AFIRST_SUPPORTED
-#define PNG_SIMPLIFIED_READ_BGR_SUPPORTED
-#define PNG_SIMPLIFIED_READ_SUPPORTED
-#define PNG_SIMPLIFIED_WRITE_AFIRST_SUPPORTED
-#define PNG_SIMPLIFIED_WRITE_BGR_SUPPORTED
-#define PNG_SIMPLIFIED_WRITE_SUPPORTED
-#define PNG_STDIO_SUPPORTED
-#define PNG_STORE_UNKNOWN_CHUNKS_SUPPORTED
-#define PNG_TEXT_SUPPORTED
-#define PNG_TIME_RFC1123_SUPPORTED
-#define PNG_UNKNOWN_CHUNKS_SUPPORTED
-#define PNG_USER_CHUNKS_SUPPORTED
-#define PNG_USER_LIMITS_SUPPORTED
-#define PNG_USER_MEM_SUPPORTED
-#define PNG_USER_TRANSFORM_INFO_SUPPORTED
-#define PNG_USER_TRANSFORM_PTR_SUPPORTED
-#define PNG_WARNINGS_SUPPORTED
-#define PNG_WRITE_16BIT_SUPPORTED
-#define PNG_WRITE_ANCILLARY_CHUNKS_SUPPORTED
-#define PNG_WRITE_BGR_SUPPORTED
-#define PNG_WRITE_CHECK_FOR_INVALID_INDEX_SUPPORTED
-#define PNG_WRITE_COMPRESSED_TEXT_SUPPORTED
-#define PNG_WRITE_CUSTOMIZE_ZTXT_COMPRESSION_SUPPORTED
-#define PNG_WRITE_FILLER_SUPPORTED
-#define PNG_WRITE_FILTER_SUPPORTED
-#define PNG_WRITE_FLUSH_SUPPORTED
-#define PNG_WRITE_GET_PALETTE_MAX_SUPPORTED
-#define PNG_WRITE_INTERLACING_SUPPORTED
-#define PNG_WRITE_INT_FUNCTIONS_SUPPORTED
-#define PNG_WRITE_INVERT_ALPHA_SUPPORTED
-#define PNG_WRITE_INVERT_SUPPORTED
-#define PNG_WRITE_OPTIMIZE_CMF_SUPPORTED
-#define PNG_WRITE_PACKSWAP_SUPPORTED
-#define PNG_WRITE_PACK_SUPPORTED
-#define PNG_WRITE_SHIFT_SUPPORTED
-#define PNG_WRITE_SUPPORTED
-#define PNG_WRITE_SWAP_ALPHA_SUPPORTED
-#define PNG_WRITE_SWAP_SUPPORTED
-#define PNG_WRITE_TEXT_SUPPORTED
-#define PNG_WRITE_TRANSFORMS_SUPPORTED
-#define PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED
-#define PNG_WRITE_USER_TRANSFORM_SUPPORTED
-#define PNG_WRITE_WEIGHTED_FILTER_SUPPORTED
-#define PNG_WRITE_bKGD_SUPPORTED
-#define PNG_WRITE_cHRM_SUPPORTED
-#define PNG_WRITE_gAMA_SUPPORTED
-#define PNG_WRITE_hIST_SUPPORTED
-#define PNG_WRITE_iCCP_SUPPORTED
-#define PNG_WRITE_iTXt_SUPPORTED
-#define PNG_WRITE_oFFs_SUPPORTED
-#define PNG_WRITE_pCAL_SUPPORTED
-#define PNG_WRITE_pHYs_SUPPORTED
-#define PNG_WRITE_sBIT_SUPPORTED
-#define PNG_WRITE_sCAL_SUPPORTED
-#define PNG_WRITE_sPLT_SUPPORTED
-#define PNG_WRITE_sRGB_SUPPORTED
-#define PNG_WRITE_tEXt_SUPPORTED
-#define PNG_WRITE_tIME_SUPPORTED
-#define PNG_WRITE_tRNS_SUPPORTED
-#define PNG_WRITE_zTXt_SUPPORTED
-#define PNG_bKGD_SUPPORTED
-#define PNG_cHRM_SUPPORTED
-#define PNG_gAMA_SUPPORTED
-#define PNG_hIST_SUPPORTED
-#define PNG_iCCP_SUPPORTED
-#define PNG_iTXt_SUPPORTED
-#define PNG_oFFs_SUPPORTED
-#define PNG_pCAL_SUPPORTED
-#define PNG_pHYs_SUPPORTED
-#define PNG_sBIT_SUPPORTED
-#define PNG_sCAL_SUPPORTED
-#define PNG_sPLT_SUPPORTED
-#define PNG_sRGB_SUPPORTED
-#define PNG_tEXt_SUPPORTED
-#define PNG_tIME_SUPPORTED
-#define PNG_tRNS_SUPPORTED
-#define PNG_zTXt_SUPPORTED
-/* end of options */
-/* settings */
-#define PNG_API_RULE 0
-#define PNG_CALLOC_SUPPORTED
-#define PNG_COST_SHIFT 3
-#define PNG_DEFAULT_READ_MACROS 1
-#define PNG_GAMMA_THRESHOLD_FIXED 5000
-#define PNG_IDAT_READ_SIZE PNG_ZBUF_SIZE
-#define PNG_INFLATE_BUF_SIZE 1024
-#define PNG_MAX_GAMMA_8 11
-#define PNG_QUANTIZE_BLUE_BITS 5
-#define PNG_QUANTIZE_GREEN_BITS 5
-#define PNG_QUANTIZE_RED_BITS 5
-#define PNG_TEXT_Z_DEFAULT_COMPRESSION (-1)
-#define PNG_TEXT_Z_DEFAULT_STRATEGY 0
-#define PNG_WEIGHT_SHIFT 8
-#define PNG_ZBUF_SIZE 8192
-#define PNG_ZLIB_VERNUM 0 /* unknown */
-#define PNG_Z_DEFAULT_COMPRESSION (-1)
-#define PNG_Z_DEFAULT_NOFILTER_STRATEGY 0
-#define PNG_Z_DEFAULT_STRATEGY 1
-#define PNG_sCAL_PRECISION 5
-#define PNG_sRGB_PROFILE_CHECKS 2
-/* end of settings */
-#endif /* PNGLCONF_H */
diff --git a/imagepipeline/src/main/jni/third-party/libwebp-0.4.3/Android.mk b/imagepipeline/src/main/jni/third-party/libwebp-0.4.3/Android.mk
deleted file mode 100644
index a841325c0..000000000
--- a/imagepipeline/src/main/jni/third-party/libwebp-0.4.3/Android.mk
+++ /dev/null
@@ -1,108 +0,0 @@
-LOCAL_PATH := $(call my-dir)
-
-WEBP_CFLAGS := -Wall -DANDROID -DHAVE_MALLOC_H -DHAVE_PTHREAD -DWEBP_USE_THREAD -DWEBP_FORCE_ALIGNED
-
-ifeq ($(APP_OPTIM),release)
-  WEBP_CFLAGS += -finline-functions -ffast-math \
-                 -ffunction-sections -fdata-sections
-  ifeq ($(findstring clang,$(NDK_TOOLCHAIN_VERSION)),)
-    WEBP_CFLAGS += -frename-registers -s
-  endif
-endif
-
-include $(CLEAR_VARS)
-
-ifneq ($(findstring armeabi-v7a, $(TARGET_ARCH_ABI)),)
-  # Setting LOCAL_ARM_NEON will enable -mfpu=neon which may cause illegal
-  # instructions to be generated for armv7a code. Instead target the neon code
-  # specifically.
-  NEON := c.neon
-else
-  NEON := c
-endif
-
-LOCAL_SRC_FILES := \
-    src/dec/alpha.c \
-    src/dec/buffer.c \
-    src/dsp/cpu.c \
-    src/dsp/dec.c \
-    src/dsp/dec_clip_tables.c \
-    src/dsp/dec_mips32.c \
-    src/dsp/dec_neon.$(NEON) \
-    src/dsp/dec_sse2.c \
-    src/dec/frame.c \
-    src/dec/idec.c \
-    src/dec/io.c \
-    src/dec/quant.c \
-    src/dec/tree.c \
-    src/dec/vp8.c \
-    src/dec/vp8l.c \
-    src/dec/webp.c \
-    src/dsp/alpha_processing.c \
-    src/dsp/alpha_processing_sse2.c \
-    src/dsp/lossless.c \
-    src/dsp/lossless_mips32.c \
-    src/dsp/lossless_neon.$(NEON) \
-    src/dsp/lossless_sse2.c \
-    src/dsp/upsampling.c \
-    src/dsp/upsampling_neon.$(NEON) \
-    src/dsp/upsampling_sse2.c \
-    src/dsp/yuv.c \
-    src/dsp/yuv_mips32.c \
-    src/dsp/yuv_sse2.c \
-    src/demux/demux.c \
-    src/utils/bit_reader.c \
-    src/utils/color_cache.c \
-    src/utils/filters.c \
-    src/utils/huffman.c \
-    src/utils/quant_levels.c \
-    src/utils/quant_levels_dec.c \
-    src/utils/rescaler.c \
-    src/utils/utils.c \
-    src/utils/random.c \
-    src/utils/thread.c \
-
-
-UNUSED_SRCS := \
-    src/dsp/enc.c \
-    src/dsp/enc_avx2.c \
-    src/dsp/enc_mips32.c \
-    src/dsp/enc_neon.$(NEON) \
-    src/dsp/enc_sse2.c \
-    src/enc/alpha.c \
-    src/enc/analysis.c \
-    src/enc/backward_references.c \
-    src/enc/config.c \
-    src/enc/cost.c \
-    src/enc/filter.c \
-    src/enc/frame.c \
-    src/enc/histogram.c \
-    src/enc/iterator.c \
-    src/enc/picture.c \
-    src/enc/picture_csp.c \
-    src/enc/picture_psnr.c \
-    src/enc/picture_rescale.c \
-    src/enc/picture_tools.c \
-    src/enc/quant.c \
-    src/enc/syntax.c \
-    src/enc/token.c \
-    src/enc/tree.c \
-    src/enc/vp8l.c \
-    src/enc/webpenc.c \
-    src/utils/bit_writer.c \
-    src/utils/huffman_encode.c \
-
-LOCAL_CFLAGS := $(WEBP_CFLAGS)
-LOCAL_C_INCLUDES += $(LOCAL_PATH)/src
-
-# prefer arm over thumb mode for performance gains
-LOCAL_ARM_MODE := arm
-
-LOCAL_STATIC_LIBRARIES := cpufeatures
-
-LOCAL_MODULE := webp
-LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)/src
-
-include $(BUILD_SHARED_LIBRARY)
-
-$(call import-module,android/cpufeatures)
diff --git a/imagepipeline/src/main/jni/webpimage/Android.mk b/imagepipeline/src/main/jni/webpimage/Android.mk
deleted file mode 100644
index c4fe8f1ee..000000000
--- a/imagepipeline/src/main/jni/webpimage/Android.mk
+++ /dev/null
@@ -1,24 +0,0 @@
-# Copyright 2004-present Facebook. All Rights Reserved.
-
-LOCAL_PATH := $(call my-dir)
-
-include $(CLEAR_VARS)
-
-LOCAL_MODULE := webpimage
-
-LOCAL_SRC_FILES := \
-  jni.cpp \
-  webp.cpp \
-  jni_helpers.cpp \
-
-CXX11_FLAGS := -std=c++11
-LOCAL_CFLAGS += $(CXX11_FLAGS)
-LOCAL_CFLAGS += -fvisibility=hidden
-LOCAL_CFLAGS += $(FRESCO_CPP_CFLAGS)
-LOCAL_EXPORT_CPPFLAGS := $(CXX11_FLAGS)
-LOCAL_LDLIBS += -llog -ljnigraphics
-LOCAL_LDFLAGS += $(FRESCO_CPP_LDFLAGS)
-
-LOCAL_SHARED_LIBRARIES += webp
-include $(BUILD_SHARED_LIBRARY)
-$(call import-module, libwebp-0.4.3)
diff --git a/imagepipeline/src/main/jni/webpimage/jni.cpp b/imagepipeline/src/main/jni/webpimage/jni.cpp
deleted file mode 100644
index 6efed5de2..000000000
--- a/imagepipeline/src/main/jni/webpimage/jni.cpp
+++ /dev/null
@@ -1,34 +0,0 @@
-/*
- * Copyright (c) 2015-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- */
-
-#include <stdio.h>
-#include <assert.h>
-#include <limits.h>
-#include <unistd.h>
-#include <fcntl.h>
-
-#include <jni.h>
-
-int initWebPImage(JNIEnv *env);
-
-// Registers jni methods.
-__attribute__((visibility("default")))
-jint JNI_OnLoad(JavaVM* vm, void* reserved) {
-  // get the current env
-  JNIEnv* env;
-  if (vm->GetEnv(reinterpret_cast<void**>(&env), JNI_VERSION_1_6) != JNI_OK) {
-    return JNI_ERR;
-  }
-
-  int result = initWebPImage(env);
-  if (result != JNI_OK) {
-    return result;
-  }
-  return JNI_VERSION_1_6;
-}
diff --git a/imagepipeline/src/main/jni/webpimage/jni_helpers.cpp b/imagepipeline/src/main/jni/webpimage/jni_helpers.cpp
deleted file mode 100644
index ae7f6974f..000000000
--- a/imagepipeline/src/main/jni/webpimage/jni_helpers.cpp
+++ /dev/null
@@ -1,195 +0,0 @@
-/*
- * Copyright (c) 2015-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- */
-
-#include <jni.h>
-#include <stddef.h>
-#include <cstdio>
-
-#define MSG_SIZE 1024
-
-namespace facebook {
-
-/**
- * Instructs the JNI environment to throw an exception.
- *
- * @param pEnv JNI environment
- * @param szClassName class name to throw
- * @param szFmt sprintf-style format string
- * @param ... sprintf-style args
- * @return 0 on success; a negative value on failure
- */
-jint throwException(JNIEnv* pEnv, const char* szClassName, const char* szFmt, va_list va_args) {
-  char szMsg[MSG_SIZE];
-  vsnprintf(szMsg, MSG_SIZE, szFmt, va_args);
-  jclass exClass = pEnv->FindClass(szClassName);
-  return pEnv->ThrowNew(exClass, szMsg);
-}
-
-/**
- * Instructs the JNI environment to throw a NoClassDefFoundError.
- *
- * @param pEnv JNI environment
- * @param szFmt sprintf-style format string
- * @param ... sprintf-style args
- * @return 0 on success; a negative value on failure
- */
-jint throwNoClassDefError(JNIEnv* pEnv, const char* szFmt, ...) {
-  va_list va_args;
-  va_start(va_args, szFmt);
-  jint ret = throwException(pEnv, "java/lang/NoClassDefFoundError", szFmt, va_args);
-  va_end(va_args);
-  return ret;
-}
-
-/**
- * Instructs the JNI environment to throw a RuntimeException.
- *
- * @param pEnv JNI environment
- * @param szFmt sprintf-style format string
- * @param ... sprintf-style args
- * @return 0 on success; a negative value on failure
- */
-jint throwRuntimeException(JNIEnv* pEnv, const char* szFmt, ...) {
-  va_list va_args;
-  va_start(va_args, szFmt);
-  jint ret = throwException(pEnv, "java/lang/RuntimeException", szFmt, va_args);
-  va_end(va_args);
-  return ret;
-}
-
-/**
- * Instructs the JNI environment to throw an IllegalArgumentException.
- *
- * @param pEnv JNI environment
- * @param szFmt sprintf-style format string
- * @param ... sprintf-style args
- * @return 0 on success; a negative value on failure
- */
-jint throwIllegalArgumentException(JNIEnv* pEnv, const char* szFmt, ...) {
-  va_list va_args;
-  va_start(va_args, szFmt);
-  jint ret = throwException(pEnv, "java/lang/IllegalArgumentException", szFmt, va_args);
-  va_end(va_args);
-  return ret;
-}
-
-/**
- * Instructs the JNI environment to throw an IllegalStateException.
- *
- * @param pEnv JNI environment
- * @param szFmt sprintf-style format string
- * @param ... sprintf-style args
- * @return 0 on success; a negative value on failure
- */
-jint throwIllegalStateException(JNIEnv* pEnv, const char* szFmt, ...) {
-  va_list va_args;
-  va_start(va_args, szFmt);
-  jint ret = throwException(pEnv, "java/lang/IllegalStateException", szFmt, va_args);
-  va_end(va_args);
-  return ret;
-}
-
-/**
- * Instructs the JNI environment to throw an OutOfMemoryError.
- *
- * @param pEnv JNI environment
- * @param szFmt sprintf-style format string
- * @param ... sprintf-style args
- * @return 0 on success; a negative value on failure
- */
-jint throwOutOfMemoryError(JNIEnv* pEnv, const char* szFmt, ...) {
-  va_list va_args;
-  va_start(va_args, szFmt);
-  jint ret = throwException(pEnv, "java/lang/OutOfMemoryError", szFmt, va_args);
-  va_end(va_args);
-  return ret;
-}
-
-/**
- * Instructs the JNI environment to throw an AssertionError.
- *
- * @param pEnv JNI environment
- * @param szFmt sprintf-style format string
- * @param ... sprintf-style args
- * @return 0 on success; a negative value on failure
- */
-jint throwAssertionError(JNIEnv* pEnv, const char* szFmt, ...) {
-  va_list va_args;
-  va_start(va_args, szFmt);
-  jint ret = throwException(pEnv, "java/lang/AssertionError", szFmt, va_args);
-  va_end(va_args);
-  return ret;
-}
-
-/**
- * Instructs the JNI environment to throw an IOException.
- *
- * @param pEnv JNI environment
- * @param szFmt sprintf-style format string
- * @param ... sprintf-style args
- * @return 0 on success; a negative value on failure
- */
-jint throwIOException(JNIEnv* pEnv, const char* szFmt, ...) {
-  va_list va_args;
-  va_start(va_args, szFmt);
-  jint ret = throwException(pEnv, "java/io/IOException", szFmt, va_args);
-  va_end(va_args);
-  return ret;
-}
-
-/**
- * Finds the specified class. If it's not found, instructs the JNI environment to throw an
- * exception.
- *
- * @param pEnv JNI environment
- * @param szClassName the classname to find in JNI format (e.g. "java/lang/String")
- * @return the class or NULL if not found (in which case a pending exception will be queued). This
- *     returns a global reference (JNIEnv::NewGlobalRef).
- */
-jclass findClassOrThrow(JNIEnv* pEnv, const char* szClassName) {
-  jclass clazz = pEnv->FindClass(szClassName);
-  if (!clazz) {
-    return NULL;
-  }
-  return (jclass) pEnv->NewGlobalRef(clazz);
-}
-
-/**
- * Finds the specified field of the specified class. If it's not found, instructs the JNI
- * environment to throw an exception.
- *
- * @param pEnv JNI environment
- * @param clazz the class to lookup the field in
- * @param szFieldName the name of the field to find
- * @param szSig the signature of the field
- * @return the field or NULL if not found (in which case a pending exception will be queued)
- */
-jfieldID getFieldIdOrThrow(JNIEnv* pEnv, jclass clazz, const char* szFieldName, const char* szSig) {
-  return pEnv->GetFieldID(clazz, szFieldName, szSig);
-}
-
-/**
- * Finds the specified method of the specified class. If it's not found, instructs the JNI
- * environment to throw an exception.
- *
- * @param pEnv JNI environment
- * @param clazz the class to lookup the method in
- * @param szMethodName the name of the method to find
- * @param szSig the signature of the method
- * @return the method or NULL if not found (in which case a pending exception will be queued)
- */
-jmethodID getMethodIdOrThrow(
-    JNIEnv* pEnv,
-    jclass clazz,
-    const char* szMethodName,
-    const char* szSig) {
-  return pEnv->GetMethodID(clazz, szMethodName, szSig);
-}
-
-} // namespace facebook
diff --git a/imagepipeline/src/main/jni/webpimage/jni_helpers.h b/imagepipeline/src/main/jni/webpimage/jni_helpers.h
deleted file mode 100644
index 01482a8b7..000000000
--- a/imagepipeline/src/main/jni/webpimage/jni_helpers.h
+++ /dev/null
@@ -1,137 +0,0 @@
-/*
- * Copyright (c) 2015-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- */
-
-#pragma once
-
-#include <jni.h>
-
-namespace facebook {
-
-/**
- * Instructs the JNI environment to throw an exception.
- *
- * @param pEnv JNI environment
- * @param szClassName class name to throw
- * @param szFmt sprintf-style format string
- * @param ... sprintf-style args
- * @return 0 on success; a negative value on failure
- */
-jint throwException(JNIEnv* pEnv, const char* szClassName, const char* szFmt, va_list va_args);
-
-/**
- * Instructs the JNI environment to throw a NoClassDefFoundError.
- *
- * @param pEnv JNI environment
- * @param szFmt sprintf-style format string
- * @param ... sprintf-style args
- * @return 0 on success; a negative value on failure
- */
-jint throwNoClassDefError(JNIEnv* pEnv, const char* szFmt, ...);
-
-/**
- * Instructs the JNI environment to throw a RuntimeException.
- *
- * @param pEnv JNI environment
- * @param szFmt sprintf-style format string
- * @param ... sprintf-style args
- * @return 0 on success; a negative value on failure
- */
-jint throwRuntimeException(JNIEnv* pEnv, const char* szFmt, ...);
-
-/**
- * Instructs the JNI environment to throw a IllegalArgumentException.
- *
- * @param pEnv JNI environment
- * @param szFmt sprintf-style format string
- * @param ... sprintf-style args
- * @return 0 on success; a negative value on failure
- */
-jint throwIllegalArgumentException(JNIEnv* pEnv, const char* szFmt, ...);
-
-/**
- * Instructs the JNI environment to throw a IllegalStateException.
- *
- * @param pEnv JNI environment
- * @param szFmt sprintf-style format string
- * @param ... sprintf-style args
- * @return 0 on success; a negative value on failure
- */
-jint throwIllegalStateException(JNIEnv* pEnv, const char* szFmt, ...);
-
-/**
- * Instructs the JNI environment to throw an IOException.
- *
- * @param pEnv JNI environment
- * @param szFmt sprintf-style format string
- * @param ... sprintf-style args
- * @return 0 on success; a negative value on failure
- */
-jint throwIOException(JNIEnv* pEnv, const char* szFmt, ...);
-
-/**
- * Instructs the JNI environment to throw an AssertionError.
- *
- * @param pEnv JNI environment
- * @param szFmt sprintf-style format string
- * @param ... sprintf-style args
- * @return 0 on success; a negative value on failure
- */
-jint throwAssertionError(JNIEnv* pEnv, const char* szFmt, ...);
-
-/**
- * Instructs the JNI environment to throw an OutOfMemoryError.
- *
- * @param pEnv JNI environment
- * @param szFmt sprintf-style format string
- * @param ... sprintf-style args
- * @return 0 on success; a negative value on failure
- */
-jint throwOutOfMemoryError(JNIEnv* pEnv, const char* szFmt, ...);
-
-/**
- * Finds the specified class. If it's not found, instructs the JNI environment to throw an
- * exception.
- *
- * @param pEnv JNI environment
- * @param szClassName the classname to find in JNI format (e.g. "java/lang/String")
- * @return the class or NULL if not found (in which case a pending exception will be queued). This
- *     returns a global reference (JNIEnv::NewGlobalRef).
- */
-jclass findClassOrThrow(JNIEnv *pEnv, const char* szClassName);
-
-/**
- * Finds the specified field of the specified class. If it's not found, instructs the JNI
- * environment to throw an exception.
- *
- * @param pEnv JNI environment
- * @param clazz the class to lookup the field in
- * @param szFieldName the name of the field to find
- * @param szSig the signature of the field
- * @return the field or NULL if not found (in which case a pending exception will be queued)
- */
-jfieldID getFieldIdOrThrow(JNIEnv* pEnv, jclass clazz, const char* szFieldName, const char* szSig);
-
-/**
- * Finds the specified method of the specified class. If it's not found, instructs the JNI
- * environment to throw an exception.
- *
- * @param pEnv JNI environment
- * @param clazz the class to lookup the method in
- * @param szMethodName the name of the method to find
- * @param szSig the signature of the method
- * @return the method or NULL if not found (in which case a pending exception will be queued)
- */
-jmethodID getMethodIdOrThrow(
-    JNIEnv* pEnv,
-    jclass clazz,
-    const char* szMethodName,
-    const char* szSig);
-
-} // namespace facebook
-
diff --git a/imagepipeline/src/main/jni/webpimage/webp.cpp b/imagepipeline/src/main/jni/webpimage/webp.cpp
deleted file mode 100644
index 4a0f68314..000000000
--- a/imagepipeline/src/main/jni/webpimage/webp.cpp
+++ /dev/null
@@ -1,918 +0,0 @@
-/*
- * Copyright (c) 2015-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- */
-
-#define LOG_TAG "WebPImage"
-
-#include <jni.h>
-#include <array>
-#include <memory>
-#include <utility>
-#include <vector>
-#include <android/bitmap.h>
-#include <android/log.h>
-
-#include "webp/decode.h"
-#include "webp/demux.h"
-
-#include "jni_helpers.h"
-
-using namespace facebook;
-
-#define EXTRA_LOGGING false
-
-/**
- * A holder for WebPDemuxer and its buffer. WebPDemuxer is needed by both WebPImage and
- * instances of WebPFrameIterator and it can't be released until all of them are done with it. This
- * wrapper is meant to be used inside of a std::shared_ptr to manage the resource.
- */
-class WebPDemuxerWrapper {
-
-public:
-  WebPDemuxerWrapper(
-      std::unique_ptr<WebPDemuxer, decltype(&WebPDemuxDelete)>&& pDemuxer,
-      std::vector<uint8_t>&& pBuffer) :
-    m_pDemuxer(std::move(pDemuxer)),
-    m_pBuffer(std::move(pBuffer)) {
-  }
-
-  virtual ~WebPDemuxerWrapper() {
-    //FBLOGD("Deleting Demuxer");
-  }
-
-  WebPDemuxer* get() {
-    return m_pDemuxer.get();
-  }
-
-  size_t getBufferSize() {
-    return m_pBuffer.size();
-  }
-
-private:
-  std::unique_ptr<WebPDemuxer, decltype(&WebPDemuxDelete)> m_pDemuxer;
-  std::vector<uint8_t> m_pBuffer;
-};
-
-
-/**
- * Native context for WebPImage.
- */
-struct WebPImageNativeContext {
-
-  /* Reference to the Demuxer */
-  std::shared_ptr<WebPDemuxerWrapper> spDemuxer;
-
-  /* Cached width of the image */
-  int pixelWidth;
-
-  /* Cached height of the image */
-  int pixelHeight;
-
-  /* Cached number of the frames in the image */
-  int numFrames;
-
-  /** Cached loop count for the image. 0 means infinite. */
-  int loopCount;
-
-  /** Duration of all the animation (the sum of all the frames duration) */
-  int durationMs;
-
-  /** Array of each frame's duration (size of array is numFrames) */
-  std::vector<jint> frameDurationsMs;
-
-  /** Reference counter. Instance is deleted when it goes from 1 to 0 */
-  size_t refCount;
-
-#if EXTRA_LOGGING
-  ~WebPImageNativeContext() {
-    __android_log_write(ANDROID_LOG_DEBUG, LOG_TAG, "WebPImageNativeContext destructor");
-  }
-#endif
-};
-
-/**
- * Native context for WebPFrame.
- */
-struct WebPFrameNativeContext {
-  /* Reference to the Demuxer */
-  std::shared_ptr<WebPDemuxerWrapper> spDemuxer;
-
-  /** Frame number for the image. Starts at 1. */
-  int frameNum;
-
-  /** X offset for the frame relative to the image canvas */
-  int xOffset;
-
-  /** Y offset for the frame relative to the image canvas */
-  int yOffset;
-
-  /** Display duration for the frame in ms*/
-  int durationMs;
-
-  /** Width of this frame */
-  int width;
-
-  /** Height of this frame */
-  int height;
-
-  /** Whether the next frame might need to be blended with this frame */
-  bool disposeToBackgroundColor;
-
-  /** Whether this frame needs to be blended with the previous frame */
-  bool blendWithPreviousFrame;
-
-  /** Raw encoded bytes for the frame. Points to existing memory managed by WebPDemuxerWrapper */
-  const uint8_t* pPayload;
-
-  /** Size of payload in bytes */
-  size_t payloadSize;
-
-  /** Reference counter. Instance is deleted when it goes from 1 to 0 */
-  size_t refCount;
-
-#if EXTRA_LOGGING
-  ~WebPFrameNativeContext() {
-    __android_log_write(ANDROID_LOG_DEBUG, LOG_TAG, "WebPFrameNativeContext destructor");
-  }
-#endif
-};
-
-
-// Class Names.
-static const char* const kWebPImageClassPathName =
-    "com/facebook/imagepipeline/webp/WebPImage";
-static const char* const kWebPFrameClassPathName =
-    "com/facebook/imagepipeline/webp/WebPFrame";
-
-// Cached fields related to WebPImage
-static jclass sClazzWebPImage;
-static jmethodID sWebPImageConstructor;
-static jfieldID sWebPImageFieldNativeContext;
-
-// Cached fields related to WebPFrame
-static jclass sClazzWebPFrame;
-static jmethodID sWebPFrameConstructor;
-static jfieldID sWebPFrameFieldNativeContext;
-
-
-////////////////////////////////////////////////////////////////
-/// Related to WebPImage
-////////////////////////////////////////////////////////////////
-
-/**
- * Creates a new WebPImage from the specified buffer.
- *
- * @param vBuffer the vector containing the bytes
- * @return a newly allocated WebPImage
- */
-jobject WebPImage_nativeCreateFromByteVector(JNIEnv* pEnv, std::vector<uint8_t>& vBuffer) {
-  std::unique_ptr<WebPImageNativeContext> spNativeContext(new WebPImageNativeContext());
-  if (!spNativeContext) {
-    throwOutOfMemoryError(pEnv, "Unable to allocate native context");
-    return 0;
-  }
-
-  // WebPData is on the stack as its only used during the call to WebPDemux.
-  WebPData webPData;
-  webPData.bytes = vBuffer.data();
-  webPData.size = vBuffer.size();
-
-  // Create the WebPDemuxer
-  auto spDemuxer = std::unique_ptr<WebPDemuxer, decltype(&WebPDemuxDelete)> {
-    WebPDemux(&webPData),
-    WebPDemuxDelete
-  };
-  if (!spDemuxer) {
-    // We may want to consider first using functions that will return a useful error code
-    // if it fails to parse.
-    throwIllegalArgumentException(pEnv, "Failed to create demuxer");
-    //FBLOGW("unable to get demuxer");
-    return 0;
-  }
-
-  spNativeContext->pixelWidth = WebPDemuxGetI(spDemuxer.get(), WEBP_FF_CANVAS_WIDTH);
-  spNativeContext->pixelHeight = WebPDemuxGetI(spDemuxer.get(), WEBP_FF_CANVAS_HEIGHT);
-  spNativeContext->numFrames = WebPDemuxGetI(spDemuxer.get(), WEBP_FF_FRAME_COUNT);
-  spNativeContext->loopCount = WebPDemuxGetI(spDemuxer.get(), WEBP_FF_LOOP_COUNT);
-
-  // Compute cached fields that require iterating the frames.
-  jint durationMs = 0;
-  std::vector<jint> frameDurationsMs;
-  WebPIterator iter;
-  if (WebPDemuxGetFrame(spDemuxer.get(), 1, &iter)) {
-    do {
-      durationMs += iter.duration;
-      frameDurationsMs.push_back(iter.duration);
-    } while (WebPDemuxNextFrame(&iter));
-    WebPDemuxReleaseIterator(&iter);
-  }
-  spNativeContext->durationMs = durationMs;
-  spNativeContext->frameDurationsMs = frameDurationsMs;
-
-  // Ownership of pDemuxer and vBuffer is transferred to WebPDemuxerWrapper here.
-  // Note, according to Rob Arnold, createNew assumes we throw exceptions but we don't. Though
-  // he claims this won't happen in practice cause "Linux will overcommit pages, we should only
-  // get this error if we run out of virtual address space." Also, Daniel C may be working
-  // on converting to exceptions.
-  spNativeContext->spDemuxer = std::shared_ptr<WebPDemuxerWrapper>(
-    new WebPDemuxerWrapper(std::move(spDemuxer), std::move(vBuffer)));
-
-  // Create the WebPImage with the native context.
-  jobject ret = pEnv->NewObject(
-      sClazzWebPImage,
-      sWebPImageConstructor,
-      (jlong) spNativeContext.get());
-  if (ret != nullptr) {
-    // Ownership was transferred.
-    spNativeContext->refCount = 1;
-    spNativeContext.release();
-  }
-  return ret;
-}
-
-/**
- * Releases a reference to the WebPImageNativeContext and deletes it when the reference count
- * reaches 0
- */
-void WebPImageNativeContext_releaseRef(JNIEnv* pEnv, jobject thiz, WebPImageNativeContext* p) {
-  pEnv->MonitorEnter(thiz);
-  p->refCount--;
-  if (p->refCount == 0) {
-    delete p;
-  }
-  pEnv->MonitorExit(thiz);
-}
-
-/**
- * Functor for getWebPImageNativeContext that releases the reference.
- */
-struct WebPImageNativeContextReleaser {
-  JNIEnv* pEnv;
-  jobject webpImage;
-
-  WebPImageNativeContextReleaser(JNIEnv* pEnv, jobject webpImage) :
-      pEnv(pEnv), webpImage(webpImage) {}
-
-  void operator()(WebPImageNativeContext* pNativeContext) {
-    WebPImageNativeContext_releaseRef(pEnv, webpImage, pNativeContext);
-  }
-};
-
-/**
- * Gets the WebPImageNativeContext from the mNativeContext of the WebPImage object. This returns
- * a reference counted shared_ptr.
- *
- * @return the shared_ptr which will be a nullptr in the case where the object has already been
- *    disposed
- */
-std::unique_ptr<WebPImageNativeContext, WebPImageNativeContextReleaser>
-    getWebPImageNativeContext(JNIEnv* pEnv, jobject thiz) {
-
-  // A deleter that decrements the reference and possibly deletes the instance.
-  WebPImageNativeContextReleaser releaser(pEnv, thiz);
-  std::unique_ptr<WebPImageNativeContext, WebPImageNativeContextReleaser> ret(nullptr, releaser);
-  pEnv->MonitorEnter(thiz);
-  WebPImageNativeContext* pNativeContext =
-      (WebPImageNativeContext*) pEnv->GetLongField(thiz, sWebPImageFieldNativeContext);
-  if (pNativeContext != nullptr) {
-    pNativeContext->refCount++;
-    ret.reset(pNativeContext);
-  }
-  pEnv->MonitorExit(thiz);
-  return ret;
-}
-
-/**
- * Creates a new WebPImage from the specified byte buffer. The data from the byte buffer is copied
- * into native memory managed by WebPImage.
- *
- * @param byteBuffer A java.nio.ByteBuffer. Must be direct. Assumes data is the entire capacity
- *      of the buffer
- * @return a newly allocated WebPImage
- */
-jobject WebPImage_nativeCreateFromDirectByteBuffer(JNIEnv* pEnv, jclass clazz, jobject byteBuffer) {
-  jbyte* bbufInput = (jbyte*) pEnv->GetDirectBufferAddress(byteBuffer);
-  if (!bbufInput) {
-    throwIllegalArgumentException(pEnv, "ByteBuffer must be direct");
-    return 0;
-  }
-
-  jlong capacity = pEnv->GetDirectBufferCapacity(byteBuffer);
-  if (pEnv->ExceptionCheck()) {
-    return 0;
-  }
-
-  std::vector<uint8_t> vBuffer(bbufInput, bbufInput + capacity);
-  return WebPImage_nativeCreateFromByteVector(pEnv, vBuffer);
-}
-
-/**
- * Creates a new WebPImage from the specified native pointer. The data is copied into memory
- managed by WebPImage.
- *
- * @param nativePtr the native memory pointer
- * @param sizeInBytes size in bytes of the buffer
- * @return a newly allocated WebPImage
- */
-jobject WebPImage_nativeCreateFromNativeMemory(
-    JNIEnv* pEnv,
-    jclass clazz,
-    jlong nativePtr,
-    jint sizeInBytes) {
-
-  jbyte* const pointer = (jbyte*) nativePtr;
-  std::vector<uint8_t> vBuffer(pointer, pointer + sizeInBytes);
-  return WebPImage_nativeCreateFromByteVector(pEnv, vBuffer);
-}
-
-/**
- * Gets the width of the image.
- *
- * @return the width of the image
- */
-jint WebPImage_nativeGetWidth(JNIEnv* pEnv, jobject thiz) {
-  auto spNativeContext = getWebPImageNativeContext(pEnv, thiz);
-  if (!spNativeContext) {
-    throwIllegalStateException(pEnv, "Already disposed");
-    return 0;
-  }
-
-  return spNativeContext->pixelWidth;
-}
-
-/**
- * Gets the height of the image.
- *
- * @return the height of the image
- */
-jint WebPImage_nativeGetHeight(JNIEnv* pEnv, jobject thiz) {
-  auto spNativeContext = getWebPImageNativeContext(pEnv, thiz);
-  if (!spNativeContext) {
-    throwIllegalStateException(pEnv, "Already disposed");
-    return 0;
-  }
-  return spNativeContext->pixelHeight;
-}
-
-/**
- * Gets the number of frames in the image.
- *
- * @return the number of frames in the image
- */
-jint WebPImage_nativeGetFrameCount(JNIEnv* pEnv, jobject thiz) {
-  auto spNativeContext = getWebPImageNativeContext(pEnv, thiz);
-  if (!spNativeContext) {
-    throwIllegalStateException(pEnv, "Already disposed");
-    return 0;
-  }
-  return spNativeContext->numFrames;
-}
-
-/**
- * Gets the duration of the animated image.
- *
- * @return the duration of the animated image in milliseconds
- */
-jint WebPImage_nativeGetDuration(JNIEnv* pEnv, jobject thiz) {
-  auto spNativeContext = getWebPImageNativeContext(pEnv, thiz);
-  if (!spNativeContext) {
-    throwIllegalStateException(pEnv, "Already disposed");
-    return 0;
-  }
-  return spNativeContext->durationMs;
-}
-
-/**
- * Gets the number of loops to run the animation for.
- *
- * @return the number of loops, or 0 to indicate infinite
- */
-jint WebPImage_nativeGetLoopCount(JNIEnv* pEnv, jobject thiz) {
-  auto spNativeContext = getWebPImageNativeContext(pEnv, thiz);
-  if (!spNativeContext) {
-    throwIllegalStateException(pEnv, "Already disposed");
-    return 0;
-  }
-  return spNativeContext->loopCount;
-}
-
-/**
- * Gets the duration of each frame of the animated image.
- *
- * @return an array that is the size of the number of frames containing the duration of each frame
- *     in milliseconds
- */
-jintArray WebPImage_nativeGetFrameDurations(JNIEnv* pEnv, jobject thiz) {
-  auto spNativeContext = getWebPImageNativeContext(pEnv, thiz);
-  if (!spNativeContext) {
-    throwIllegalStateException(pEnv, "Already disposed");
-    return NULL;
-  }
-  jintArray result = pEnv->NewIntArray(spNativeContext->numFrames);
-  if (result == nullptr) {
-    // pEnv->NewIntArray will have already instructed the environment to throw an exception.
-    return nullptr;
-  }
-
-  pEnv->SetIntArrayRegion(
-      result,
-      0,
-      spNativeContext->numFrames,
-      spNativeContext->frameDurationsMs.data());
-  return result;
-}
-
-/**
- * Gets the Frame at the specified index.
- *
- * @param index the index of the frame
- * @return a newly created WebPFrame for the specified frame
- */
-jobject WebPImage_nativeGetFrame(JNIEnv* pEnv, jobject thiz, jint index) {
-  auto spNativeContext = getWebPImageNativeContext(pEnv, thiz);
-  if (!spNativeContext) {
-    throwIllegalStateException(pEnv, "Already disposed");
-    return nullptr;
-  }
-
-
-  auto spIter = std::unique_ptr<WebPIterator, decltype(&WebPDemuxReleaseIterator)> {
-    new WebPIterator(),
-    WebPDemuxReleaseIterator
-  };
-
-  // Note, in WebP, frame numbers are one-based.
-  if (!WebPDemuxGetFrame(spNativeContext->spDemuxer->get(), index + 1, spIter.get())) {
-    throwIllegalStateException(pEnv, "unable to get frame");
-    return nullptr;
-  }
-
-  std::unique_ptr<WebPFrameNativeContext> spFrameNativeContext(new WebPFrameNativeContext());
-  if (!spFrameNativeContext) {
-    throwOutOfMemoryError(pEnv, "Unable to allocate WebPFrameNativeContext");
-    return nullptr;
-  }
-
-  spFrameNativeContext->spDemuxer = spNativeContext->spDemuxer;
-  spFrameNativeContext->frameNum = spIter->frame_num;
-  spFrameNativeContext->xOffset = spIter->x_offset;
-  spFrameNativeContext->yOffset = spIter->y_offset;
-  spFrameNativeContext->durationMs = spIter->duration;
-  spFrameNativeContext->width = spIter->width;
-  spFrameNativeContext->height = spIter->height;
-  spFrameNativeContext->disposeToBackgroundColor =
-      spIter->dispose_method == WEBP_MUX_DISPOSE_BACKGROUND;
-  spFrameNativeContext->blendWithPreviousFrame = spIter->blend_method == WEBP_MUX_BLEND;
-  spFrameNativeContext->pPayload = spIter->fragment.bytes;
-  spFrameNativeContext->payloadSize = spIter->fragment.size;
-
-  jobject ret = pEnv->NewObject(
-      sClazzWebPFrame,
-      sWebPFrameConstructor,
-      (jlong) spFrameNativeContext.get());
-  if (ret != nullptr) {
-    // Ownership was transferred.
-    spFrameNativeContext->refCount = 1;
-    spFrameNativeContext.release();
-  }
-  return ret;
-}
-
-/**
- * Releases a reference to the WebPFrameNativeContext and deletes it when the reference count
- * reaches 0
- */
-void WebPFrameNativeContext_releaseRef(JNIEnv* pEnv, jobject thiz, WebPFrameNativeContext* p) {
-  pEnv->MonitorEnter(thiz);
-  p->refCount--;
-  if (p->refCount == 0) {
-    delete p;
-  }
-  pEnv->MonitorExit(thiz);
-}
-
-/**
- * Functor for getWebPFrameNativeContext.
- */
-struct WebPFrameNativeContextReleaser {
-  JNIEnv* pEnv;
-  jobject webpFrame;
-
-  WebPFrameNativeContextReleaser(JNIEnv* pEnv, jobject webpFrame) :
-      pEnv(pEnv), webpFrame(webpFrame) {}
-
-  void operator()(WebPFrameNativeContext* pNativeContext) {
-    WebPFrameNativeContext_releaseRef(pEnv, webpFrame, pNativeContext);
-  }
-};
-
-/**
- * Gets the WebPFrameNativeContext from the mNativeContext of the WebPFrame object. This returns
- * a reference counted pointer.
- *
- * @return the reference counted pointer which will be a nullptr in the case where the object has
- *    already been disposed
- */
-std::unique_ptr<WebPFrameNativeContext, WebPFrameNativeContextReleaser>
-    getWebPFrameNativeContext(JNIEnv* pEnv, jobject thiz) {
-
-  WebPFrameNativeContextReleaser releaser(pEnv, thiz);
-  std::unique_ptr<WebPFrameNativeContext, WebPFrameNativeContextReleaser> ret(nullptr, releaser);
-  pEnv->MonitorEnter(thiz);
-  WebPFrameNativeContext* pNativeContext =
-      (WebPFrameNativeContext*) pEnv->GetLongField(thiz, sWebPFrameFieldNativeContext);
-  if (pNativeContext != nullptr) {
-    pNativeContext->refCount++;
-    ret.reset(pNativeContext);
-  }
-  pEnv->MonitorExit(thiz);
-  return ret;
-}
-
-/**
- * Gets the size in bytes used by the {@link WebPImage}. The implementation only takes into
- * account the encoded data buffer as the other data structures are relatively tiny.
- *
- * @return approximate size in bytes used by the {@link WebPImage}
- */
-jint WebPImage_nativeGetSizeInBytes(JNIEnv* pEnv, jobject thiz) {
-  auto spNativeContext = getWebPImageNativeContext(pEnv, thiz);
-  if (!spNativeContext) {
-    throwIllegalStateException(pEnv, "Already disposed");
-    return 0;
-  }
-  return spNativeContext->spDemuxer->getBufferSize();
-}
-
-/**
- * Disposes the WebImage, freeing native resources.
- */
-void WebImage_nativeDispose(JNIEnv* pEnv, jobject thiz) {
-  pEnv->MonitorEnter(thiz);
-  WebPImageNativeContext* pNativeContext =
-      (WebPImageNativeContext*) pEnv->GetLongField(thiz, sWebPImageFieldNativeContext);
-  if (pNativeContext != nullptr) {
-    pEnv->SetLongField(thiz, sWebPImageFieldNativeContext, 0);
-    WebPImageNativeContext_releaseRef(pEnv, thiz, pNativeContext);
-  }
-
-  pEnv->MonitorExit(thiz);
-}
-
-/**
- * Finalizer for WebImage that frees native resources.
- */
-void WebImage_nativeFinalize(JNIEnv* pEnv, jobject thiz) {
-  WebImage_nativeDispose(pEnv, thiz);
-}
-
-
-////////////////////////////////////////////////////////////////
-/// Related to WebPFrame
-////////////////////////////////////////////////////////////////
-
-/**
- * Renders the frame to the specified pixel array. The array is expected to have a size that
- * is at least the the width and height of the frame. The frame is rendered where each pixel is
- * represented as a 32-bit BGRA pixel. The rendered stride is the same as the frame width. Note,
- * the number of pixels written to the array may be smaller than the canvas if the frame's
- * width/height is smaller than the canvas.
- *
- * @param jPixels the array to render into
- */
-void WebPFrame_nativeRenderFrame(
-    JNIEnv* pEnv,
-    jobject thiz,
-    jint width,
-    jint height,
-    jobject bitmap) {
-  auto spNativeContext = getWebPFrameNativeContext(pEnv, thiz);
-  if (!spNativeContext) {
-    throwIllegalStateException(pEnv, "Already disposed");
-    return;
-  }
-
-  AndroidBitmapInfo bitmapInfo;
-  if (AndroidBitmap_getInfo(pEnv, bitmap, &bitmapInfo) != ANDROID_BITMAP_RESULT_SUCCESS) {
-    throwIllegalStateException(pEnv, "Bad bitmap");
-    return;
-  }
-
-  if (width < 0 || height < 0) {
-    throwIllegalArgumentException(pEnv, "Width or height is negative !");
-    return;
-  }
-  
-  if (bitmapInfo.width < (unsigned) width || bitmapInfo.height < (unsigned) height) {
-    throwIllegalStateException(pEnv, "Width or height is too small");
-    return;
-  }
-
-  if (bitmapInfo.format != ANDROID_BITMAP_FORMAT_RGBA_8888) {
-    throwIllegalStateException(pEnv, "Wrong color format");
-    return;
-  }
-
-  WebPDecoderConfig config;
-  int ret = WebPInitDecoderConfig(&config);
-  if (!ret) {
-    throwIllegalStateException(pEnv, "WebPInitDecoderConfig failed");
-    return;
-  }
-
-  const uint8_t* pPayload = spNativeContext->pPayload;
-  size_t payloadSize = spNativeContext->payloadSize;
-
-  ret = (WebPGetFeatures(pPayload , payloadSize, &config.input) == VP8_STATUS_OK);
-  if (!ret) {
-    throwIllegalStateException(pEnv, "WebPGetFeatures failed");
-    return;
-  }
-
-  uint8_t* pixels;
-  if (AndroidBitmap_lockPixels(pEnv, bitmap, (void**) &pixels) != ANDROID_BITMAP_RESULT_SUCCESS) {
-    throwIllegalStateException(pEnv, "Bad bitmap");
-    return;
-  }
-
-  config.options.no_fancy_upsampling = 1;
-  if (width != spNativeContext->width || height != spNativeContext->height) {
-    config.options.use_scaling = true;
-    config.options.scaled_width = width;
-    config.options.scaled_height = height;
-  }
-
-  config.output.colorspace = MODE_rgbA;
-  config.output.is_external_memory = 1;
-  config.output.u.RGBA.rgba = pixels;
-  config.output.u.RGBA.stride = bitmapInfo.stride;
-  config.output.u.RGBA.size   = bitmapInfo.stride * bitmapInfo.height;
-
-  ret = WebPDecode(pPayload, payloadSize, &config);
-  AndroidBitmap_unlockPixels(pEnv, bitmap);
-  if (ret != VP8_STATUS_OK) {
-    throwIllegalStateException(pEnv, "Failed to decode frame");
-  }
-}
-
-/**
- * Gets the duration of the frame.
- *
- * @return the duration of the frame in milliseconds
- */
-jint WebPFrame_nativeGetDurationMs(JNIEnv* pEnv, jobject thiz) {
-  auto spNativeContext = getWebPFrameNativeContext(pEnv, thiz);
-  if (!spNativeContext) {
-    throwIllegalStateException(pEnv, "Already disposed");
-    return -1;
-  }
-  return spNativeContext->durationMs;
-}
-
-/**
- * Gets the width of the frame.
- *
- * @return the width of the frame
- */
-jint WebPFrame_nativeGetWidth(JNIEnv* pEnv, jobject thiz) {
-  auto spNativeContext = getWebPFrameNativeContext(pEnv, thiz);
-  if (!spNativeContext) {
-    throwIllegalStateException(pEnv, "Already disposed");
-    return -1;
-  }
-  return spNativeContext->width;
-}
-
-/**
- * Gets the height of the frame.
- *
- * @return the height of the frame
- */
-jint WebPFrame_nativeGetHeight(JNIEnv* pEnv, jobject thiz) {
-  auto spNativeContext = getWebPFrameNativeContext(pEnv, thiz);
-  if (!spNativeContext) {
-    throwIllegalStateException(pEnv, "Already disposed");
-    return -1;
-  }
-  return spNativeContext->height;
-}
-
-/**
- * Gets the x-offset of the frame relative to the image canvas.
- *
- * @return the x-offset of the frame
- */
-jint WebPFrame_nativeGetXOffset(JNIEnv* pEnv, jobject thiz) {
-  auto spNativeContext = getWebPFrameNativeContext(pEnv, thiz);
-  if (!spNativeContext) {
-    throwIllegalStateException(pEnv, "Already disposed");
-    return -1;
-  }
-  return spNativeContext->xOffset;
-}
-
-/**
- * Gets the y-offset of the frame relative to the image canvas.
- *
- * @return the y-offset of the frame
- */
-jint WebPFrame_nativeGetYOffset(JNIEnv* pEnv, jobject thiz) {
-  auto spNativeContext = getWebPFrameNativeContext(pEnv, thiz);
-  if (!spNativeContext) {
-    throwIllegalStateException(pEnv, "Already disposed");
-    return -1;
-  }
-  return spNativeContext->yOffset;
-}
-
-/**
- * Gets whether the current frame should be disposed to the background color (or may be needed
- * as the background of the next frame).
- *
- * @return whether the current frame should be disposed to the background color
- */
-jboolean WebPFrame_nativeShouldDisposeToBackgroundColor(JNIEnv* pEnv, jobject thiz) {
-  auto spNativeContext = getWebPFrameNativeContext(pEnv, thiz);
-  if (!spNativeContext) {
-    throwIllegalStateException(pEnv, "Already disposed");
-    return -1;
-  }
-  return spNativeContext->disposeToBackgroundColor;
-}
-
-/**
- * Gets whether the current frame should be alpha blended over the previous frame.
- *
- * @return whether the current frame should be alpha blended over the previous frame
- */
-jboolean WebPFrame_nativeShouldBlendWithPreviousFrame(JNIEnv* pEnv, jobject thiz) {
-  auto spNativeContext = getWebPFrameNativeContext(pEnv, thiz);
-  if (!spNativeContext) {
-    throwIllegalStateException(pEnv, "Already disposed");
-    return -1;
-  }
-  return spNativeContext->blendWithPreviousFrame;
-}
-
-/**
- * Disposes the WebPFrameIterator, freeing native resources.
- */
-void WebPFrame_nativeDispose(JNIEnv* pEnv, jobject thiz) {
-  pEnv->MonitorEnter(thiz);
-  WebPFrameNativeContext* pNativeContext =
-      (WebPFrameNativeContext*) pEnv->GetLongField(thiz, sWebPFrameFieldNativeContext);
-  if (pNativeContext) {
-    pEnv->SetLongField(thiz, sWebPFrameFieldNativeContext, 0);
-    WebPFrameNativeContext_releaseRef(pEnv, thiz, pNativeContext);
-  }
-  pEnv->MonitorExit(thiz);
-}
-
-/**
- * Finalizer for WebPFrame that frees native resources.
- */
-void WebPFrame_nativeFinalize(JNIEnv* pEnv, jobject thiz) {
-  WebPFrame_nativeDispose(pEnv, thiz);
-}
-
-static JNINativeMethod sWebPImageMethods[] = {
-  { "nativeCreateFromDirectByteBuffer",
-    "(Ljava/nio/ByteBuffer;)Lcom/facebook/imagepipeline/webp/WebPImage;",
-    (void*)WebPImage_nativeCreateFromDirectByteBuffer },
-  { "nativeCreateFromNativeMemory",
-    "(JI)Lcom/facebook/imagepipeline/webp/WebPImage;",
-    (void*)WebPImage_nativeCreateFromNativeMemory },
-  { "nativeGetWidth",
-    "()I",
-    (void*)WebPImage_nativeGetWidth },
-  { "nativeGetHeight",
-    "()I",
-    (void*)WebPImage_nativeGetHeight },
-  { "nativeGetDuration",
-    "()I",
-    (void*)WebPImage_nativeGetDuration },
-  { "nativeGetFrameCount",
-    "()I",
-    (void*)WebPImage_nativeGetFrameCount },
-  { "nativeGetFrameDurations",
-    "()[I",
-    (void*)WebPImage_nativeGetFrameDurations },
-  { "nativeGetDuration",
-    "()I",
-    (void*)WebPImage_nativeGetDuration },
-  { "nativeGetLoopCount",
-    "()I",
-    (void*)WebPImage_nativeGetLoopCount },
-  { "nativeGetFrame",
-    "(I)Lcom/facebook/imagepipeline/webp/WebPFrame;",
-    (void*)WebPImage_nativeGetFrame },
-  { "nativeGetSizeInBytes",
-    "()I",
-    (void*)WebPImage_nativeGetSizeInBytes },
-  { "nativeDispose",
-    "()V",
-    (void*)WebImage_nativeDispose },
-  { "nativeFinalize",
-    "()V",
-    (void*)WebImage_nativeFinalize },
-};
-
-static JNINativeMethod sWebPFrameMethods[] = {
-  { "nativeRenderFrame",
-    "(IILandroid/graphics/Bitmap;)V",
-    (void*)WebPFrame_nativeRenderFrame },
-  { "nativeGetDurationMs",
-    "()I",
-    (void*)WebPFrame_nativeGetDurationMs },
-  { "nativeGetWidth",
-    "()I",
-    (void*)WebPFrame_nativeGetWidth },
-  { "nativeGetHeight",
-    "()I",
-    (void*)WebPFrame_nativeGetHeight },
-  { "nativeGetXOffset",
-    "()I",
-    (void*)WebPFrame_nativeGetXOffset },
-  { "nativeGetYOffset",
-    "()I",
-    (void*)WebPFrame_nativeGetYOffset },
-  { "nativeGetDurationMs",
-    "()I",
-    (void*)WebPFrame_nativeGetDurationMs },
-  { "nativeShouldDisposeToBackgroundColor",
-    "()Z",
-    (void*)WebPFrame_nativeShouldDisposeToBackgroundColor },
-  { "nativeShouldBlendWithPreviousFrame",
-    "()Z",
-    (void*)WebPFrame_nativeShouldBlendWithPreviousFrame },
-  { "nativeDispose",
-    "()V",
-    (void*)WebPFrame_nativeDispose },
-  { "nativeFinalize",
-    "()V",
-    (void*)WebPFrame_nativeFinalize },
-};
-
-/**
- * Called by JNI_OnLoad to initialize the classes.
- */
-int initWebPImage(JNIEnv* pEnv) {
-  // WebPImage
-  sClazzWebPImage = findClassOrThrow(pEnv, kWebPImageClassPathName);
-  if (sClazzWebPImage == NULL) {
-    return JNI_ERR;
-  }
-
-  // WebPImage.mNativeContext
-  sWebPImageFieldNativeContext = getFieldIdOrThrow(pEnv, sClazzWebPImage, "mNativeContext", "J");
-  if (!sWebPImageFieldNativeContext) {
-    return JNI_ERR;
-  }
-
-  // WebPImage.<init>
-  sWebPImageConstructor = getMethodIdOrThrow(pEnv, sClazzWebPImage, "<init>", "(J)V");
-  if (!sWebPImageConstructor) {
-    return JNI_ERR;
-  }
-
-  int result = pEnv->RegisterNatives(
-      sClazzWebPImage,
-      sWebPImageMethods,
-      std::extent<decltype(sWebPImageMethods)>::value);
-  if (result != JNI_OK) {
-    return result;
-  }
-
-  // WebPFrame
-  sClazzWebPFrame = findClassOrThrow(pEnv, kWebPFrameClassPathName);
-  if (sClazzWebPFrame == NULL) {
-    return JNI_ERR;
-  }
-
-  // WebPFrame.mNativeContext
-  sWebPFrameFieldNativeContext = getFieldIdOrThrow(pEnv, sClazzWebPFrame, "mNativeContext", "J");
-  if (!sWebPFrameFieldNativeContext) {
-    return JNI_ERR;
-  }
-
-  // WebPFrame.<init>
-  sWebPFrameConstructor = getMethodIdOrThrow(pEnv, sClazzWebPFrame, "<init>", "(J)V");
-  if (!sWebPFrameConstructor) {
-    return JNI_ERR;
-  }
-
-  result = pEnv->RegisterNatives(
-      sClazzWebPFrame,
-      sWebPFrameMethods,
-      std::extent<decltype(sWebPFrameMethods)>::value);
-  if (result != JNI_OK) {
-    return result;
-  }
-
-  return JNI_OK;
-}
diff --git a/release.gradle b/release.gradle
index 0784b1fac..fe5fdf780 100644
--- a/release.gradle
+++ b/release.gradle
@@ -91,12 +91,12 @@ afterEvaluate { project ->
                 artifactId POM_ARTIFACT_ID
                 packaging POM_PACKAGING
                 description POM_DESCRIPTION
-                url 'https://github.com/facebook/fresco'
+                url 'https://github.com/theYY/fresco'
 
                 scm {
-                    url 'https://github.com/facebook/fresco.git'
-                    connection 'scm:git:https://github.com/facebook/fresco.git'
-                    developerConnection 'scm:git:git@github.com:facebook/fresco.git'
+                    url 'https://github.com/theYY/fresco.git'
+                    connection 'scm:git:https://github.com/theYY/fresco.git'
+                    developerConnection 'scm:git:git@github.com:theYY/fresco.git'
                 }
 
                 licenses {
@@ -109,8 +109,8 @@ afterEvaluate { project ->
 
                 developers {
                     developer {
-                        id 'facebook'
-                        name 'Facebook'
+                        id 'yangyang'
+                        name 'yangyang'
                     }
                 }
             }
