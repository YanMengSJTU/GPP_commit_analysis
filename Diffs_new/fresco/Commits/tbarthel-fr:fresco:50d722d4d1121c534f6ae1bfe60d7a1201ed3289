diff --git a/gradle.properties b/gradle.properties
index fc1c08840..50a4f20ec 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -28,6 +28,7 @@ GRADLE_GIT_CLONE_TASK_VERSION=0.0.2
 ROBOLECTRIC_GRADLE_PLUGIN_VERSION=0.14.1
 
 // Deps for libraries
+ANDROID_ANNOTATIONS_VERSION=21.0.3
 ANNOTATION_API_VERSION=1.2
 BOLTS_ANDROID_VERSION=1.1.4
 FEST_ASSERT_CORE_VERSION=2.0M10
diff --git a/imagepipeline/build.gradle b/imagepipeline/build.gradle
index d62b6a436..0ec20ee94 100644
--- a/imagepipeline/build.gradle
+++ b/imagepipeline/build.gradle
@@ -12,6 +12,7 @@ import com.palominolabs.gradle.task.git.clone.GitCloneTask
 import org.apache.tools.ant.taskdefs.condition.Os
 
 dependencies {
+    provided "com.android.support:support-annotations:${ANDROID_ANNOTATIONS_VERSION}"
     provided "com.google.code.findbugs:jsr305:${JSR_305_VERSION}"
     compile "com.parse.bolts:bolts-android:${BOLTS_ANDROID_VERSION}"
     compile "com.nineoldandroids:library:${NINEOLDANDROID_VERSION}"
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequestBuilder.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequestBuilder.java
index 04a62c922..4513b3829 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequestBuilder.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequestBuilder.java
@@ -11,7 +11,10 @@
 
 import javax.annotation.Nullable;
 
+import android.content.res.Resources;
 import android.net.Uri;
+import android.support.annotation.DrawableRes;
+import android.util.TypedValue;
 
 import com.facebook.common.internal.Preconditions;
 import com.facebook.common.util.UriUtil;
@@ -19,6 +22,11 @@
 import com.facebook.imagepipeline.common.Priority;
 import com.facebook.imagepipeline.common.ResizeOptions;
 
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Set;
+
 import static com.facebook.imagepipeline.request.ImageRequest.ImageType;
 import static com.facebook.imagepipeline.request.ImageRequest.RequestLevel;
 
@@ -27,6 +35,12 @@
  */
 public class ImageRequestBuilder {
 
+  /**
+   * Local resource supported extensions
+   */
+  private static final Set<String> LOCAL_RESOURCE_EXT
+          = Collections.unmodifiableSet(new HashSet<String>(Arrays.asList(".png", ".jpg", ".gif")));
+
   private Uri mSourceUri = null;
   private RequestLevel mLowestPermittedRequestLevel = RequestLevel.FULL_FETCH;
   private boolean mAutoRotateEnabled = false;
@@ -47,6 +61,38 @@ public static ImageRequestBuilder newBuilderWithSource(Uri uri) {
     return new ImageRequestBuilder().setSource(uri);
   }
 
+  /**
+   * Creates a new request builder instance for a local resource image.
+   * <p/>
+   * Only image resources can be used with the image pipeline (PNG, JPG, GIF). Other resource
+   * types such as Strings or XML Drawables make no sense in the context of the image pipeline and
+   * so cannot be supported by definition. One potentially confusing case is drawable declared in
+   * XML (e.g. ShapeDrawable). Important thing to note is that this is not an image. If you want
+   * to display an XML drawable as the main image, then set it as a placeholder and use the null uri.
+   * <p/>
+   *
+   * @param resources application resources.
+   * @param resId     local image resource id.
+   * @return a new request builder instance.
+   */
+  public static ImageRequestBuilder newBuilderWithResourceId(Resources resources,
+                                                             @DrawableRes int resId) {
+    TypedValue value = new TypedValue();
+    resources.getValue(resId, value, true);
+    String resourceName = value.string.toString();
+    String resourceExt = resourceName.substring(resourceName.lastIndexOf('.')).toLowerCase();
+
+    if (!LOCAL_RESOURCE_EXT.contains(resourceExt)) {
+      throw new IllegalArgumentException("Only image resources can be used with"
+          + " the image pipeline. " + resourceExt + " files are not supported.");
+    }
+
+    Uri uri = new Uri.Builder().scheme(UriUtil.LOCAL_RESOURCE_SCHEME)
+        .path(String.valueOf(resId)).build();
+
+    return newBuilderWithSource(uri);
+  }
+
   private ImageRequestBuilder() {
   }
 
