diff --git a/fbcore/src/main/java/com/facebook/common/media/MediaUtils.java b/fbcore/src/main/java/com/facebook/common/media/MediaUtils.java
index b16ede6a5..968e59ce6 100644
--- a/fbcore/src/main/java/com/facebook/common/media/MediaUtils.java
+++ b/fbcore/src/main/java/com/facebook/common/media/MediaUtils.java
@@ -30,6 +30,10 @@ public static boolean isVideo(@Nullable String mimeType) {
     return mimeType != null && mimeType.startsWith("video/");
   }
 
+  public static boolean isAudio(@Nullable String mimeType) {
+    return mimeType != null && mimeType.startsWith("audio/");
+  }
+
   public static boolean isThreeD(@Nullable String mimeType) {
     return mimeType != null && mimeType.equals("model/gltf-binary");
   }
diff --git a/imagepipeline-base/src/main/java/com/facebook/imagepipeline/common/SourceUriType.java b/imagepipeline-base/src/main/java/com/facebook/imagepipeline/common/SourceUriType.java
index 82773f648..d74b78a84 100644
--- a/imagepipeline-base/src/main/java/com/facebook/imagepipeline/common/SourceUriType.java
+++ b/imagepipeline-base/src/main/java/com/facebook/imagepipeline/common/SourceUriType.java
@@ -13,6 +13,7 @@
 import static com.facebook.imagepipeline.common.SourceUriType.SOURCE_TYPE_LOCAL_IMAGE_FILE;
 import static com.facebook.imagepipeline.common.SourceUriType.SOURCE_TYPE_LOCAL_RESOURCE;
 import static com.facebook.imagepipeline.common.SourceUriType.SOURCE_TYPE_LOCAL_VIDEO_FILE;
+import static com.facebook.imagepipeline.common.SourceUriType.SOURCE_TYPE_LOCAL_AUDIO_FILE;
 import static com.facebook.imagepipeline.common.SourceUriType.SOURCE_TYPE_NETWORK;
 import static com.facebook.imagepipeline.common.SourceUriType.SOURCE_TYPE_QUALIFIED_RESOURCE;
 import static com.facebook.imagepipeline.common.SourceUriType.SOURCE_TYPE_UNKNOWN;
@@ -31,6 +32,7 @@
     SOURCE_TYPE_NETWORK,
     SOURCE_TYPE_LOCAL_FILE,
     SOURCE_TYPE_LOCAL_VIDEO_FILE,
+    SOURCE_TYPE_LOCAL_AUDIO_FILE,
     SOURCE_TYPE_LOCAL_IMAGE_FILE,
     SOURCE_TYPE_LOCAL_CONTENT,
     SOURCE_TYPE_LOCAL_ASSET,
@@ -44,10 +46,11 @@
   int SOURCE_TYPE_NETWORK = 0;
   int SOURCE_TYPE_LOCAL_FILE = 1;
   int SOURCE_TYPE_LOCAL_VIDEO_FILE = 2;
-  int SOURCE_TYPE_LOCAL_IMAGE_FILE = 3;
-  int SOURCE_TYPE_LOCAL_CONTENT = 4;
-  int SOURCE_TYPE_LOCAL_ASSET = 5;
-  int SOURCE_TYPE_LOCAL_RESOURCE = 6;
-  int SOURCE_TYPE_DATA = 7;
-  int SOURCE_TYPE_QUALIFIED_RESOURCE = 8;
+  int SOURCE_TYPE_LOCAL_AUDIO_FILE = 3;
+  int SOURCE_TYPE_LOCAL_IMAGE_FILE = 4;
+  int SOURCE_TYPE_LOCAL_CONTENT = 5;
+  int SOURCE_TYPE_LOCAL_ASSET = 6;
+  int SOURCE_TYPE_LOCAL_RESOURCE = 7;
+  int SOURCE_TYPE_DATA = 8;
+  int SOURCE_TYPE_QUALIFIED_RESOURCE = 9;
 }
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerFactory.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerFactory.java
index 792e2a0c9..8145d9e51 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerFactory.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerFactory.java
@@ -39,6 +39,7 @@
 import com.facebook.imagepipeline.producers.EncodedCacheKeyMultiplexProducer;
 import com.facebook.imagepipeline.producers.EncodedMemoryCacheProducer;
 import com.facebook.imagepipeline.producers.LocalAssetFetchProducer;
+import com.facebook.imagepipeline.producers.LocalAudioThumbnailProducer;
 import com.facebook.imagepipeline.producers.LocalContentUriFetchProducer;
 import com.facebook.imagepipeline.producers.LocalContentUriThumbnailFetchProducer;
 import com.facebook.imagepipeline.producers.LocalExifThumbnailProducer;
@@ -307,6 +308,12 @@ public LocalVideoThumbnailProducer newLocalVideoThumbnailProducer() {
         mContentResolver);
   }
 
+  public LocalAudioThumbnailProducer newLocalAudioThumbnailProducer() {
+    return new LocalAudioThumbnailProducer(
+        mExecutorSupplier.forLocalStorageRead(),
+        mContentResolver);
+  }
+
   public NetworkFetchProducer newNetworkFetchProducer(NetworkFetcher networkFetcher) {
     return new NetworkFetchProducer(
         mPooledByteBufferFactory,
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerSequenceFactory.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerSequenceFactory.java
index 2d09da20a..3350373db 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerSequenceFactory.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerSequenceFactory.java
@@ -13,6 +13,7 @@
 import static com.facebook.imagepipeline.common.SourceUriType.SOURCE_TYPE_LOCAL_IMAGE_FILE;
 import static com.facebook.imagepipeline.common.SourceUriType.SOURCE_TYPE_LOCAL_RESOURCE;
 import static com.facebook.imagepipeline.common.SourceUriType.SOURCE_TYPE_LOCAL_VIDEO_FILE;
+import static com.facebook.imagepipeline.common.SourceUriType.SOURCE_TYPE_LOCAL_AUDIO_FILE;
 import static com.facebook.imagepipeline.common.SourceUriType.SOURCE_TYPE_NETWORK;
 import static com.facebook.imagepipeline.common.SourceUriType.SOURCE_TYPE_QUALIFIED_RESOURCE;
 
@@ -31,6 +32,7 @@
 import com.facebook.imagepipeline.producers.DecodeProducer;
 import com.facebook.imagepipeline.producers.EncodedMemoryCacheProducer;
 import com.facebook.imagepipeline.producers.LocalAssetFetchProducer;
+import com.facebook.imagepipeline.producers.LocalAudioThumbnailProducer;
 import com.facebook.imagepipeline.producers.LocalContentUriFetchProducer;
 import com.facebook.imagepipeline.producers.LocalFileFetchProducer;
 import com.facebook.imagepipeline.producers.LocalResourceFetchProducer;
@@ -76,6 +78,7 @@
   private Producer<EncodedImage> mCommonNetworkFetchToEncodedMemorySequence;
   @VisibleForTesting Producer<CloseableReference<CloseableImage>> mLocalImageFileFetchSequence;
   @VisibleForTesting Producer<CloseableReference<CloseableImage>> mLocalVideoFileFetchSequence;
+  @VisibleForTesting Producer<CloseableReference<CloseableImage>> mLocalAudioFileFetchSequence;
   @VisibleForTesting Producer<CloseableReference<CloseableImage>> mLocalContentUriFetchSequence;
   @VisibleForTesting Producer<CloseableReference<CloseableImage>> mLocalResourceFetchSequence;
   @VisibleForTesting Producer<CloseableReference<CloseableImage>> mLocalAssetFetchSequence;
@@ -132,6 +135,7 @@ public ProducerSequenceFactory(
       case SOURCE_TYPE_NETWORK:
         return getNetworkFetchEncodedImageProducerSequence();
       case SOURCE_TYPE_LOCAL_VIDEO_FILE:
+      case SOURCE_TYPE_LOCAL_AUDIO_FILE:
       case SOURCE_TYPE_LOCAL_IMAGE_FILE:
         return getLocalFileFetchEncodedImageProducerSequence();
       default:
@@ -185,6 +189,7 @@ public ProducerSequenceFactory(
       case SOURCE_TYPE_NETWORK:
         return getNetworkFetchToEncodedMemoryPrefetchSequence();
       case SOURCE_TYPE_LOCAL_VIDEO_FILE:
+      case SOURCE_TYPE_LOCAL_AUDIO_FILE:
       case SOURCE_TYPE_LOCAL_IMAGE_FILE:
         return getLocalFileFetchToEncodedMemoryPrefetchSequence();
       default:
@@ -254,12 +259,17 @@ private static void validateEncodedImageRequest(ImageRequest imageRequest) {
         return getNetworkFetchSequence();
       case SOURCE_TYPE_LOCAL_VIDEO_FILE:
         return getLocalVideoFileFetchSequence();
+      case SOURCE_TYPE_LOCAL_AUDIO_FILE:
+        return getLocalAudioFileFetchSequence();
       case SOURCE_TYPE_LOCAL_IMAGE_FILE:
         return getLocalImageFileFetchSequence();
       case SOURCE_TYPE_LOCAL_CONTENT:
         if (MediaUtils.isVideo(mContentResolver.getType(uri))) {
           return getLocalVideoFileFetchSequence();
         }
+        if (MediaUtils.isAudio(mContentResolver.getType(uri))) {
+          return getLocalAudioFileFetchSequence();
+        }
         return getLocalContentUriFetchSequence();
       case SOURCE_TYPE_LOCAL_ASSET:
         return getLocalAssetFetchSequence();
@@ -403,6 +413,21 @@ private static void validateEncodedImageRequest(ImageRequest imageRequest) {
     return mLocalVideoFileFetchSequence;
   }
 
+  /**
+   * Bitmap cache get -> thread hand off -> multiplex -> bitmap cache ->
+   * local audio thumbnail
+   */
+  private synchronized Producer<CloseableReference<CloseableImage>>
+  getLocalAudioFileFetchSequence() {
+    if (mLocalAudioFileFetchSequence == null) {
+      LocalAudioThumbnailProducer localAudioThumbnailProducer =
+          mProducerFactory.newLocalAudioThumbnailProducer();
+      mLocalAudioFileFetchSequence =
+          newBitmapCacheGetToBitmapCacheSequence(localAudioThumbnailProducer);
+    }
+    return mLocalAudioFileFetchSequence;
+  }
+
   /**
    * bitmap cache get ->
    * background thread hand-off -> multiplex -> bitmap cache -> decode ->
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalAudioThumbnailProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalAudioThumbnailProducer.java
new file mode 100644
index 000000000..b2b768f03
--- /dev/null
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalAudioThumbnailProducer.java
@@ -0,0 +1,161 @@
+/*
+ * Copyright (c) 2015-present, Facebook, Inc.
+ * Copyright (c) 2018-present, Pablo Delgado Kraemer
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ */
+
+package com.facebook.imagepipeline.producers;
+
+import android.content.ContentResolver;
+import android.database.Cursor;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.media.MediaMetadataRetriever;
+import android.net.Uri;
+import android.os.Build;
+import android.provider.DocumentsContract;
+import android.provider.MediaStore;
+import android.support.annotation.Nullable;
+import com.facebook.common.internal.ImmutableMap;
+import com.facebook.common.internal.VisibleForTesting;
+import com.facebook.common.references.CloseableReference;
+import com.facebook.common.util.UriUtil;
+import com.facebook.imagepipeline.bitmaps.SimpleBitmapReleaser;
+import com.facebook.imagepipeline.image.CloseableImage;
+import com.facebook.imagepipeline.image.CloseableStaticBitmap;
+import com.facebook.imagepipeline.image.ImmutableQualityInfo;
+import com.facebook.imagepipeline.request.ImageRequest;
+import java.util.Map;
+import java.util.concurrent.Executor;
+
+/**
+ * A producer that creates audio thumbnails.
+ *
+ * <p>At present, these thumbnails are created on the java heap rather than being pinned
+ * purgeables. This is deemed okay as the thumbnails are only very small.
+ */
+public class LocalAudioThumbnailProducer implements
+    Producer<CloseableReference<CloseableImage>> {
+
+  public static final String PRODUCER_NAME = "AudioThumbnailProducer";
+  @VisibleForTesting static final String CREATED_THUMBNAIL = "createdThumbnail";
+
+  private final Executor mExecutor;
+  private final ContentResolver mContentResolver;
+
+  public LocalAudioThumbnailProducer(Executor executor, ContentResolver contentResolver) {
+    mExecutor = executor;
+    mContentResolver = contentResolver;
+  }
+
+  @Override
+  public void produceResults(
+      final Consumer<CloseableReference<CloseableImage>> consumer,
+      final ProducerContext producerContext) {
+
+    final ProducerListener listener = producerContext.getListener();
+    final String requestId = producerContext.getId();
+    final ImageRequest imageRequest = producerContext.getImageRequest();
+    final StatefulProducerRunnable cancellableProducerRunnable =
+        new StatefulProducerRunnable<CloseableReference<CloseableImage>>(
+            consumer,
+            listener,
+            PRODUCER_NAME,
+            requestId) {
+          @Override
+          protected void onSuccess(CloseableReference<CloseableImage> result) {
+            super.onSuccess(result);
+            listener.onUltimateProducerReached(requestId, PRODUCER_NAME, result != null);
+          }
+
+          @Override
+          protected void onFailure(Exception e) {
+            super.onFailure(e);
+            listener.onUltimateProducerReached(requestId, PRODUCER_NAME, false);
+          }
+
+          @Override
+          protected CloseableReference<CloseableImage> getResult() throws Exception {
+            String path = getLocalFilePath(imageRequest);
+            if (path == null) {
+              return null;
+            }
+
+            byte[] bitmapData;
+            MediaMetadataRetriever retriever = new MediaMetadataRetriever();
+            try {
+              retriever.setDataSource(path);
+              bitmapData = retriever.getEmbeddedPicture();
+            } finally {
+              retriever.release();
+            }
+            if (bitmapData == null) {
+              return null;
+            }
+
+            Bitmap bitmap = BitmapFactory.decodeByteArray(bitmapData, 0, bitmapData.length);
+            if (bitmap == null) {
+              return null;
+            }
+
+            return CloseableReference.<CloseableImage>of(
+                new CloseableStaticBitmap(
+                    bitmap,
+                    SimpleBitmapReleaser.getInstance(),
+                    ImmutableQualityInfo.FULL_QUALITY,
+                    0));
+          }
+
+          @Override
+          protected Map<String, String> getExtraMapOnSuccess(
+              final CloseableReference<CloseableImage> result) {
+            return ImmutableMap.of(CREATED_THUMBNAIL, String.valueOf(result != null));
+          }
+
+          @Override
+          protected void disposeResult(CloseableReference<CloseableImage> result) {
+            CloseableReference.closeSafely(result);
+          }
+        };
+    producerContext.addCallbacks(
+        new BaseProducerContextCallbacks() {
+          @Override
+          public void onCancellationRequested() {
+            cancellableProducerRunnable.cancel();
+          }
+        });
+    mExecutor.execute(cancellableProducerRunnable);
+  }
+
+  @Nullable private String getLocalFilePath(ImageRequest imageRequest) {
+    Uri uri = imageRequest.getSourceUri();
+    if (UriUtil.isLocalFileUri(uri)) {
+      return imageRequest.getSourceFile().getPath();
+    } else if (UriUtil.isLocalContentUri(uri)) {
+      String selection = null;
+      String[] selectionArgs = null;
+      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT
+          && "com.android.providers.media.documents".equals(uri.getAuthority())) {
+        String documentId = DocumentsContract.getDocumentId(uri);
+        uri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
+        selection = MediaStore.Audio.Media._ID + "=?";
+        selectionArgs = new String[] {documentId.split(":")[1]};
+      }
+      Cursor cursor =
+          mContentResolver.query(
+              uri, new String[] {MediaStore.Audio.Media.DATA}, selection, selectionArgs, null);
+      try {
+        if (cursor != null && cursor.moveToFirst()) {
+          return cursor.getString(cursor.getColumnIndexOrThrow(MediaStore.Audio.Media.DATA));
+        }
+      } finally {
+        if (cursor != null) {
+          cursor.close();
+        }
+      }
+    }
+    return null;
+  }
+}
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java
index f44afbd9e..b5c0c79fd 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java
@@ -13,6 +13,7 @@
 import static com.facebook.imagepipeline.common.SourceUriType.SOURCE_TYPE_LOCAL_IMAGE_FILE;
 import static com.facebook.imagepipeline.common.SourceUriType.SOURCE_TYPE_LOCAL_RESOURCE;
 import static com.facebook.imagepipeline.common.SourceUriType.SOURCE_TYPE_LOCAL_VIDEO_FILE;
+import static com.facebook.imagepipeline.common.SourceUriType.SOURCE_TYPE_LOCAL_AUDIO_FILE;
 import static com.facebook.imagepipeline.common.SourceUriType.SOURCE_TYPE_NETWORK;
 import static com.facebook.imagepipeline.common.SourceUriType.SOURCE_TYPE_QUALIFIED_RESOURCE;
 import static com.facebook.imagepipeline.common.SourceUriType.SOURCE_TYPE_UNKNOWN;
@@ -317,8 +318,11 @@ public static RequestLevel getMax(RequestLevel requestLevel1, RequestLevel reque
     if (UriUtil.isNetworkUri(uri)) {
       return SOURCE_TYPE_NETWORK;
     } else if (UriUtil.isLocalFileUri(uri)) {
-      if (MediaUtils.isVideo(MediaUtils.extractMime(uri.getPath()))) {
+      String mimeType = MediaUtils.extractMime(uri.getPath());
+      if (MediaUtils.isVideo(mimeType)) {
         return SOURCE_TYPE_LOCAL_VIDEO_FILE;
+      } else if (MediaUtils.isAudio(mimeType)) {
+        return SOURCE_TYPE_LOCAL_AUDIO_FILE;
       } else {
         return SOURCE_TYPE_LOCAL_IMAGE_FILE;
       }
