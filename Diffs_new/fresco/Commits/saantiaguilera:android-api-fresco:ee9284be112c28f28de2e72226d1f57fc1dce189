diff --git a/drawee/src/main/java/com/facebook/drawee/components/DeferredReleaser.java b/drawee/src/main/java/com/facebook/drawee/components/DeferredReleaser.java
index 56b0233eb..d57e0af6d 100644
--- a/drawee/src/main/java/com/facebook/drawee/components/DeferredReleaser.java
+++ b/drawee/src/main/java/com/facebook/drawee/components/DeferredReleaser.java
@@ -47,7 +47,7 @@ public static synchronized DeferredReleaser getInstance() {
     public void release();
   }
 
-  private final Set<Releasable> mPendingReleasables;
+  /* PACKAGE */ final Set<Releasable> mPendingReleasables;
   private final Handler mUiHandler;
 
   public DeferredReleaser() {
@@ -99,7 +99,7 @@ public void cancelDeferredRelease(Releasable releasable) {
     mPendingReleasables.remove(releasable);
   }
 
-  private static void ensureOnUiThread() {
+  /* PACKAGE */ static void ensureOnUiThread() {
     Preconditions.checkState(Looper.getMainLooper().getThread() == Thread.currentThread());
   }
 }
diff --git a/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java b/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java
index c92cf0288..059ec5e43 100644
--- a/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java
+++ b/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java
@@ -485,7 +485,7 @@ public void onProgressUpdate(DataSource<T> dataSource) {
     mDataSource.subscribe(dataSubscriber, mUiThreadImmediateExecutor);
   }
 
-  private void onNewResultInternal(
+  /* PACKAGE */ void onNewResultInternal(
       String id,
       DataSource<T> dataSource,
       @Nullable T image,
@@ -540,7 +540,7 @@ private void onNewResultInternal(
     }
   }
 
-  private void onFailureInternal(
+  /* PACKAGE */ void onFailureInternal(
       String id,
       DataSource<T> dataSource,
       Throwable throwable,
@@ -575,7 +575,7 @@ private void onFailureInternal(
     }
   }
 
-  private void onProgressUpdateInternal(
+  /* PACKAGE */ void onProgressUpdateInternal(
       String id,
       DataSource<T> dataSource,
       float progress,
diff --git a/drawee/src/main/java/com/facebook/drawee/view/DraweeTransition.java b/drawee/src/main/java/com/facebook/drawee/view/DraweeTransition.java
index 185fdb594..4cdd1a5c6 100644
--- a/drawee/src/main/java/com/facebook/drawee/view/DraweeTransition.java
+++ b/drawee/src/main/java/com/facebook/drawee/view/DraweeTransition.java
@@ -35,7 +35,7 @@
   private static final String PROPNAME_BOUNDS = "draweeTransition:bounds";
 
   private final ScalingUtils.ScaleType mFromScale;
-  private final ScalingUtils.ScaleType mToScale;
+  /* PACKAGE */ final ScalingUtils.ScaleType mToScale;
 
   public static TransitionSet createTransitionSet(
       ScalingUtils.ScaleType fromScale,
diff --git a/imagepipeline-backends/imagepipeline-okhttp/src/main/java/com/facebook/imagepipeline/backends/okhttp/OkHttpNetworkFetcher.java b/imagepipeline-backends/imagepipeline-okhttp/src/main/java/com/facebook/imagepipeline/backends/okhttp/OkHttpNetworkFetcher.java
index b2b4561db..8f536e82e 100644
--- a/imagepipeline-backends/imagepipeline-okhttp/src/main/java/com/facebook/imagepipeline/backends/okhttp/OkHttpNetworkFetcher.java
+++ b/imagepipeline-backends/imagepipeline-okhttp/src/main/java/com/facebook/imagepipeline/backends/okhttp/OkHttpNetworkFetcher.java
@@ -51,7 +51,7 @@ public OkHttpNetworkFetchState(
     }
   }
 
-  private static final String TAG = "OkHttpNetworkFetchProducer";
+  /* PACKAGE */ static final String TAG = "OkHttpNetworkFetchProducer";
   private static final String QUEUE_TIME = "queue_time";
   private static final String FETCH_TIME = "fetch_time";
   private static final String TOTAL_TIME = "total_time";
@@ -59,7 +59,7 @@ public OkHttpNetworkFetchState(
 
   private final OkHttpClient mOkHttpClient;
 
-  private Executor mCancellationExecutor;
+  /* PACKAGE */ Executor mCancellationExecutor;
 
   /**
    * @param okHttpClient client to use
@@ -172,7 +172,7 @@ public void onFetchCompletion(OkHttpNetworkFetchState fetchState, int byteSize)
    * after request cancellation, then the exception is interpreted as successful cancellation
    * and onCancellation is called. Otherwise onFailure is called.
    */
-  private void handleException(final Call call, final Exception e, final Callback callback) {
+  /* PACKAGE */ void handleException(final Call call, final Exception e, final Callback callback) {
     if (call.isCanceled()) {
       callback.onCancellation();
     } else {
diff --git a/imagepipeline-backends/imagepipeline-okhttp3/src/main/java/com/facebook/imagepipeline/backends/okhttp3/OkHttpNetworkFetcher.java b/imagepipeline-backends/imagepipeline-okhttp3/src/main/java/com/facebook/imagepipeline/backends/okhttp3/OkHttpNetworkFetcher.java
index 845ab5e58..27d9a9625 100644
--- a/imagepipeline-backends/imagepipeline-okhttp3/src/main/java/com/facebook/imagepipeline/backends/okhttp3/OkHttpNetworkFetcher.java
+++ b/imagepipeline-backends/imagepipeline-okhttp3/src/main/java/com/facebook/imagepipeline/backends/okhttp3/OkHttpNetworkFetcher.java
@@ -48,7 +48,7 @@ public OkHttpNetworkFetchState(
     }
   }
 
-  private static final String TAG = "OkHttpNetworkFetchProducer";
+  /* PACKAGE */ static final String TAG = "OkHttpNetworkFetchProducer";
   private static final String QUEUE_TIME = "queue_time";
   private static final String FETCH_TIME = "fetch_time";
   private static final String TOTAL_TIME = "total_time";
@@ -56,7 +56,7 @@ public OkHttpNetworkFetchState(
 
   private final OkHttpClient mOkHttpClient;
 
-  private Executor mCancellationExecutor;
+  /* PACKAGE */ Executor mCancellationExecutor;
 
   /**
    * @param okHttpClient client to use
@@ -160,7 +160,7 @@ public void onFetchCompletion(OkHttpNetworkFetchState fetchState, int byteSize)
    * after request cancellation, then the exception is interpreted as successful cancellation
    * and onCancellation is called. Otherwise onFailure is called.
    */
-  private void handleException(final Call call, final Exception e, final Callback callback) {
+  /* PACKAGE */ void handleException(final Call call, final Exception e, final Callback callback) {
     if (call.isCanceled()) {
       callback.onCancellation();
     } else {
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/BufferedDiskCache.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/BufferedDiskCache.java
index 9d9d048a7..6fb3a2b5d 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/BufferedDiskCache.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/BufferedDiskCache.java
@@ -36,15 +36,15 @@
  * read/writes.
  */
 public class BufferedDiskCache {
-  private static final Class<?> TAG = BufferedDiskCache.class;
+  /* PACKAGE */ static final Class<?> TAG = BufferedDiskCache.class;
 
-  private final FileCache mFileCache;
-  private final PooledByteBufferFactory mPooledByteBufferFactory;
-  private final PooledByteStreams mPooledByteStreams;
-  private final Executor mReadExecutor;
-  private final Executor mWriteExecutor;
-  private final StagingArea mStagingArea;
-  private final ImageCacheStatsTracker mImageCacheStatsTracker;
+  /* PACKAGE */ final FileCache mFileCache;
+  /* PACKAGE */ final PooledByteBufferFactory mPooledByteBufferFactory;
+  /* PACKAGE */ final PooledByteStreams mPooledByteStreams;
+  /* PACKAGE */ final Executor mReadExecutor;
+  /* PACKAGE */ final Executor mWriteExecutor;
+  /* PACKAGE */ final StagingArea mStagingArea;
+  /* PACKAGE */ final ImageCacheStatsTracker mImageCacheStatsTracker;
 
   public BufferedDiskCache(
       FileCache fileCache,
@@ -144,7 +144,7 @@ public boolean diskCheckSync(final CacheKey key) {
    * @param key
    * @return true if the image is found in staging area or File cache, false if not found
    */
-  private boolean checkInStagingAreaAndFileCache(final CacheKey key) {
+  /* PACKAGE */ boolean checkInStagingAreaAndFileCache(final CacheKey key) {
     EncodedImage result = mStagingArea.get(key);
     if (result != null) {
       result.close();
@@ -318,7 +318,7 @@ public Void call() throws Exception {
   /**
    * Performs disk cache read. In case of any exception null is returned.
    */
-  private PooledByteBuffer readFromDiskCache(final CacheKey key) throws IOException {
+  /* PACKAGE */ PooledByteBuffer readFromDiskCache(final CacheKey key) throws IOException {
     try {
       FLog.v(TAG, "Disk cache read for %s", key.toString());
 
@@ -356,7 +356,7 @@ private PooledByteBuffer readFromDiskCache(final CacheKey key) throws IOExceptio
    * Writes to disk cache
    * @throws IOException
    */
-  private void writeToDiskCache(
+  /* PACKAGE */ void writeToDiskCache(
       final CacheKey key,
       final EncodedImage encodedImage) {
     FLog.v(TAG, "About to write to disk-cache for key %s", key.toString());
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipeline.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipeline.java
index c0ba46b52..45ec07078 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipeline.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipeline.java
@@ -60,7 +60,7 @@
   private final MemoryCache<CacheKey, CloseableImage> mBitmapMemoryCache;
   private final MemoryCache<CacheKey, PooledByteBuffer> mEncodedMemoryCache;
   private final BufferedDiskCache mMainBufferedDiskCache;
-  private final BufferedDiskCache mSmallImageBufferedDiskCache;
+  /* PACKAGE */ final BufferedDiskCache mSmallImageBufferedDiskCache;
   private final CacheKeyFactory mCacheKeyFactory;
   private final ThreadHandoffProducerQueue mThreadHandoffProducerQueue;
   private AtomicLong mIdCounter;
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineConfig.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineConfig.java
index 4db85bb91..d762279ee 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineConfig.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineConfig.java
@@ -91,7 +91,7 @@
   private static DefaultImageRequestConfig
       sDefaultImageRequestConfig = new DefaultImageRequestConfig();
 
-  private ImagePipelineConfig(Builder builder) {
+  /* PACKAGE */ ImagePipelineConfig(Builder builder) {
     mAnimatedImageFactory = builder.mAnimatedImageFactory;
     mBitmapMemoryCacheParamsSupplier =
         builder.mBitmapMemoryCacheParamsSupplier == null ?
@@ -313,7 +313,7 @@ public static Builder newBuilder(Context context) {
 
     private boolean mProgressiveRenderingEnabled = false;
 
-    private DefaultImageRequestConfig() {
+    /* PACKAGE */ DefaultImageRequestConfig() {
     }
 
     public void setProgressiveRenderingEnabled(boolean progressiveRenderingEnabled) {
@@ -327,32 +327,32 @@ public boolean isProgressiveRenderingEnabled() {
 
   public static class Builder {
 
-    private AnimatedImageFactory mAnimatedImageFactory;
-    private Bitmap.Config mBitmapConfig;
-    private Supplier<MemoryCacheParams> mBitmapMemoryCacheParamsSupplier;
-    private CacheKeyFactory mCacheKeyFactory;
-    private final Context mContext;
-    private boolean mDownsampleEnabled = false;
-    private boolean mDecodeMemoryFileEnabled;
-    private Supplier<MemoryCacheParams> mEncodedMemoryCacheParamsSupplier;
-    private ExecutorSupplier mExecutorSupplier;
-    private ImageCacheStatsTracker mImageCacheStatsTracker;
-    private ImageDecoder mImageDecoder;
-    private Supplier<Boolean> mIsPrefetchEnabledSupplier;
-    private DiskCacheConfig mMainDiskCacheConfig;
-    private MemoryTrimmableRegistry mMemoryTrimmableRegistry;
-    private NetworkFetcher mNetworkFetcher;
-    private PlatformBitmapFactory mPlatformBitmapFactory;
-    private PoolFactory mPoolFactory;
-    private ProgressiveJpegConfig mProgressiveJpegConfig;
-    private Set<RequestListener> mRequestListeners;
-    private boolean mResizeAndRotateEnabledForNetwork = true;
-    private DiskCacheConfig mSmallImageDiskCacheConfig;
-    private FileCacheFactory mFileCacheFactory;
-    private final ImagePipelineExperiments.Builder mExperimentsBuilder
+    /* PACKAGE */ AnimatedImageFactory mAnimatedImageFactory;
+    /* PACKAGE */ Bitmap.Config mBitmapConfig;
+    /* PACKAGE */ Supplier<MemoryCacheParams> mBitmapMemoryCacheParamsSupplier;
+    /* PACKAGE */ CacheKeyFactory mCacheKeyFactory;
+    /* PACKAGE */ final Context mContext;
+    /* PACKAGE */ boolean mDownsampleEnabled = false;
+    /* PACKAGE */ boolean mDecodeMemoryFileEnabled;
+    /* PACKAGE */ Supplier<MemoryCacheParams> mEncodedMemoryCacheParamsSupplier;
+    /* PACKAGE */ ExecutorSupplier mExecutorSupplier;
+    /* PACKAGE */ ImageCacheStatsTracker mImageCacheStatsTracker;
+    /* PACKAGE */ ImageDecoder mImageDecoder;
+    /* PACKAGE */ Supplier<Boolean> mIsPrefetchEnabledSupplier;
+    /* PACKAGE */ DiskCacheConfig mMainDiskCacheConfig;
+    /* PACKAGE */ MemoryTrimmableRegistry mMemoryTrimmableRegistry;
+    /* PACKAGE */ NetworkFetcher mNetworkFetcher;
+    /* PACKAGE */ PlatformBitmapFactory mPlatformBitmapFactory;
+    /* PACKAGE */ PoolFactory mPoolFactory;
+    /* PACKAGE */ ProgressiveJpegConfig mProgressiveJpegConfig;
+    /* PACKAGE */ Set<RequestListener> mRequestListeners;
+    /* PACKAGE */ boolean mResizeAndRotateEnabledForNetwork = true;
+    /* PACKAGE */ DiskCacheConfig mSmallImageDiskCacheConfig;
+    /* PACKAGE */ FileCacheFactory mFileCacheFactory;
+    /* PACKAGE */ final ImagePipelineExperiments.Builder mExperimentsBuilder
         = new ImagePipelineExperiments.Builder(this);
 
-    private Builder(Context context) {
+    /* PACKAGE */ Builder(Context context) {
       // Doesn't use a setter as always required.
       mContext = Preconditions.checkNotNull(context);
     }
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineExperiments.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineExperiments.java
index 68210298a..6b264f8ad 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineExperiments.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipelineExperiments.java
@@ -30,7 +30,7 @@
   private final boolean mExternalCreatedBitmapLogEnabled;
   private final WebpBitmapFactory.WebpErrorLogger mWebpErrorLogger;
 
-  private ImagePipelineExperiments(Builder builder, ImagePipelineConfig.Builder configBuilder) {
+  /* PACKAGE */ ImagePipelineExperiments(Builder builder, ImagePipelineConfig.Builder configBuilder) {
     mForceSmallCacheThresholdBytes = builder.mForceSmallCacheThresholdBytes;
     mWebpSupportEnabled = builder.mWebpSupportEnabled && sWebpLibraryPresent;
     mDecodeFileDescriptorEnabled = configBuilder.isDownsampleEnabled() &&
@@ -78,14 +78,14 @@ public int getThrottlingMaxSimultaneousRequests() {
 
     private static final int DEFAULT_MAX_SIMULTANEOUS_FILE_FETCH_AND_RESIZE = 5;
 
-    private final ImagePipelineConfig.Builder mConfigBuilder;
-    private int mForceSmallCacheThresholdBytes = 0;
-    private boolean mWebpSupportEnabled = false;
-    private @WebpTranscodeProducer.EnhancedTranscodingType int mEnhancedWebpTranscodingType;
-    private boolean mDecodeFileDescriptorEnabled = false;
-    private boolean mExternalCreatedBitmapLogEnabled = false;
-    private int mThrottlingMaxSimultaneousRequests = DEFAULT_MAX_SIMULTANEOUS_FILE_FETCH_AND_RESIZE;
-    private WebpBitmapFactory.WebpErrorLogger mWebpErrorLogger;
+    /* PACKAGE */ final ImagePipelineConfig.Builder mConfigBuilder;
+    /* PACKAGE */ int mForceSmallCacheThresholdBytes = 0;
+    /* PACKAGE */ boolean mWebpSupportEnabled = false;
+    /* PACKAGE */ @WebpTranscodeProducer.EnhancedTranscodingType int mEnhancedWebpTranscodingType;
+    /* PACKAGE */ boolean mDecodeFileDescriptorEnabled = false;
+    /* PACKAGE */ boolean mExternalCreatedBitmapLogEnabled = false;
+    /* PACKAGE */ int mThrottlingMaxSimultaneousRequests = DEFAULT_MAX_SIMULTANEOUS_FILE_FETCH_AND_RESIZE;
+    /* PACKAGE */ WebpBitmapFactory.WebpErrorLogger mWebpErrorLogger;
 
     public Builder(ImagePipelineConfig.Builder configBuilder) {
       mConfigBuilder = configBuilder;
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/datasource/AbstractProducerToDataSourceAdapter.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/datasource/AbstractProducerToDataSourceAdapter.java
index 7b67bbcd4..606108a67 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/datasource/AbstractProducerToDataSourceAdapter.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/datasource/AbstractProducerToDataSourceAdapter.java
@@ -80,7 +80,7 @@ protected void onNewResultImpl(@Nullable T result, boolean isLast) {
     }
   }
 
-  private void onFailureImpl(Throwable throwable) {
+  /* PACKAGE */ void onFailureImpl(Throwable throwable) {
     if (super.setFailure(throwable)) {
       mRequestListener.onRequestFailure(
           mSettableProducerContext.getImageRequest(),
@@ -90,7 +90,7 @@ private void onFailureImpl(Throwable throwable) {
     }
   }
 
-  private synchronized void onCancellationImpl() {
+  /* PACKAGE */ synchronized void onCancellationImpl() {
     Preconditions.checkState(isClosed());
   }
 
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/datasource/ListDataSource.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/datasource/ListDataSource.java
index fae0a158e..8c3dfde19 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/datasource/ListDataSource.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/datasource/ListDataSource.java
@@ -112,7 +112,7 @@ private void onDataSourceProgress() {
     setProgress(progress / mDataSources.length);
   }
 
-  private class InternalDataSubscriber implements DataSubscriber<CloseableReference<T>> {
+  /* PACKAGE */ class InternalDataSubscriber implements DataSubscriber<CloseableReference<T>> {
     @GuardedBy("InternalDataSubscriber.this")
     boolean mFinished = false;
 
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/decoder/SimpleProgressiveJpegConfig.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/decoder/SimpleProgressiveJpegConfig.java
index 76461c5f1..863e220dc 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/decoder/SimpleProgressiveJpegConfig.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/decoder/SimpleProgressiveJpegConfig.java
@@ -27,7 +27,7 @@
     int getGoodEnoughScanNumber();
   }
 
-  private static class DefaultDynamicValueConfig implements DynamicValueConfig {
+  /* PACKAGE */ static class DefaultDynamicValueConfig implements DynamicValueConfig {
     public List<Integer> getScansToDecode() {
       return Collections.EMPTY_LIST;
     }
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/memory/PoolConfig.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/memory/PoolConfig.java
index 52b277b1d..9d55d3e19 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/memory/PoolConfig.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/memory/PoolConfig.java
@@ -32,7 +32,7 @@
   private final PoolParams mSmallByteArrayPoolParams;
   private final PoolStatsTracker mSmallByteArrayPoolStatsTracker;
 
-  private PoolConfig(Builder builder) {
+  /* PACKAGE */ PoolConfig(Builder builder) {
     mBitmapPoolParams =
         builder.mBitmapPoolParams == null ?
             DefaultBitmapPoolParams.get() :
@@ -105,16 +105,16 @@ public static Builder newBuilder() {
 
   public static class Builder {
 
-    private PoolParams mBitmapPoolParams;
-    private PoolStatsTracker mBitmapPoolStatsTracker;
-    private PoolParams mFlexByteArrayPoolParams;
-    private MemoryTrimmableRegistry mMemoryTrimmableRegistry;
-    private PoolParams mNativeMemoryChunkPoolParams;
-    private PoolStatsTracker mNativeMemoryChunkPoolStatsTracker;
-    private PoolParams mSmallByteArrayPoolParams;
-    private PoolStatsTracker mSmallByteArrayPoolStatsTracker;
+    /* PACKAGE */ PoolParams mBitmapPoolParams;
+    /* PACKAGE */ PoolStatsTracker mBitmapPoolStatsTracker;
+    /* PACKAGE */ PoolParams mFlexByteArrayPoolParams;
+    /* PACKAGE */ MemoryTrimmableRegistry mMemoryTrimmableRegistry;
+    /* PACKAGE */ PoolParams mNativeMemoryChunkPoolParams;
+    /* PACKAGE */ PoolStatsTracker mNativeMemoryChunkPoolStatsTracker;
+    /* PACKAGE */ PoolParams mSmallByteArrayPoolParams;
+    /* PACKAGE */ PoolStatsTracker mSmallByteArrayPoolStatsTracker;
 
-    private Builder() {
+    /* PACKAGE */ Builder() {
     }
 
     public Builder setBitmapPoolParams(PoolParams bitmapPoolParams) {
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DiskCacheProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DiskCacheProducer.java
index c0a886803..b6ac83845 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DiskCacheProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DiskCacheProducer.java
@@ -39,12 +39,12 @@
   public static final String PRODUCER_NAME = "DiskCacheProducer";
   public static final String EXTRA_CACHED_VALUE_FOUND = ProducerConstants.EXTRA_CACHED_VALUE_FOUND;
 
-  private final BufferedDiskCache mDefaultBufferedDiskCache;
-  private final BufferedDiskCache mSmallImageBufferedDiskCache;
+  /* PACKAGE */ final BufferedDiskCache mDefaultBufferedDiskCache;
+  /* PACKAGE */ final BufferedDiskCache mSmallImageBufferedDiskCache;
   private final CacheKeyFactory mCacheKeyFactory;
   private final Producer<EncodedImage> mInputProducer;
-  private final boolean mChooseCacheByImageSize;
-  private final int mForceSmallCacheThresholdBytes;
+  /* PACKAGE */ final boolean mChooseCacheByImageSize;
+  /* PACKAGE */ final int mForceSmallCacheThresholdBytes;
 
   public DiskCacheProducer(
       BufferedDiskCache defaultBufferedDiskCache,
@@ -156,12 +156,12 @@ public Void then(Task<EncodedImage> task)
     };
   }
 
-  private static boolean isTaskCancelled(Task<?> task) {
+  /* PACKAGE */ static boolean isTaskCancelled(Task<?> task) {
     return task.isCancelled() ||
         (task.isFaulted() && task.getError() instanceof CancellationException);
   }
 
-  private void maybeStartInputProducer(
+  /* PACKAGE */ void maybeStartInputProducer(
       Consumer<EncodedImage> consumerOfDiskCacheProducer,
       Consumer<EncodedImage> consumerOfInputProducer,
       ProducerContext producerContext) {
@@ -208,7 +208,7 @@ public void onCancellationRequested() {
     private final BufferedDiskCache mCache;
     private final CacheKey mCacheKey;
 
-    private DiskCacheConsumer(
+    /* PACKAGE */ DiskCacheConsumer(
         final Consumer<EncodedImage> consumer,
         final BufferedDiskCache cache,
         final CacheKey cacheKey) {
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/EncodedMemoryCacheProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/EncodedMemoryCacheProducer.java
index c0a7540b7..700513843 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/EncodedMemoryCacheProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/EncodedMemoryCacheProducer.java
@@ -28,7 +28,7 @@
   public static final String PRODUCER_NAME = "EncodedMemoryCacheProducer";
   public static final String EXTRA_CACHED_VALUE_FOUND = ProducerConstants.EXTRA_CACHED_VALUE_FOUND;
 
-  private final MemoryCache<CacheKey, PooledByteBuffer> mMemoryCache;
+  /* PACKAGE */ final MemoryCache<CacheKey, PooledByteBuffer> mMemoryCache;
   private final CacheKeyFactory mCacheKeyFactory;
   private final Producer<EncodedImage> mInputProducer;
 
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/JobScheduler.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/JobScheduler.java
index b316b7956..309a7ce6b 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/JobScheduler.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/JobScheduler.java
@@ -184,11 +184,11 @@ private void enqueueJob(long delay) {
     }
   }
 
-  private void submitJob() {
+  /* PACKAGE */ void submitJob() {
     mExecutor.execute(mDoJobRunnable);
   }
 
-  private void doJob() {
+  /* PACKAGE */ void doJob() {
     long now = SystemClock.uptimeMillis();
     EncodedImage input;
     boolean isLast;
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalExifThumbnailProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalExifThumbnailProducer.java
index a0d8423cb..d8f1270da 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalExifThumbnailProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalExifThumbnailProducer.java
@@ -49,7 +49,7 @@
   @VisibleForTesting static final String CREATED_THUMBNAIL = "createdThumbnail";
 
   private final Executor mExecutor;
-  private final PooledByteBufferFactory mPooledByteBufferFactory;
+  /* PACKAGE */ final PooledByteBufferFactory mPooledByteBufferFactory;
   private final ContentResolver mContentResolver;
 
   public LocalExifThumbnailProducer(
@@ -138,7 +138,7 @@ public void onCancellationRequested() {
     return null;
   }
 
-  private EncodedImage buildEncodedImage(
+  /* PACKAGE */ EncodedImage buildEncodedImage(
       PooledByteBuffer imageBytes,
       ExifInterface exifInterface) {
     Pair<Integer, Integer> dimensions =
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalVideoThumbnailProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalVideoThumbnailProducer.java
index 4828b9782..d4ae2a5ae 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalVideoThumbnailProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalVideoThumbnailProducer.java
@@ -95,7 +95,7 @@ public void onCancellationRequested() {
     mExecutor.execute(cancellableProducerRunnable);
   }
 
-  private static int calculateKind(ImageRequest imageRequest) {
+    /* PACKAGE */ static int calculateKind(ImageRequest imageRequest) {
     if (imageRequest.getPreferredWidth() > 96 || imageRequest.getPreferredHeight() > 96) {
       return MediaStore.Images.Thumbnails.MINI_KIND;
     }
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/MultiplexProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/MultiplexProducer.java
index fd4326b2d..dc3f82123 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/MultiplexProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/MultiplexProducer.java
@@ -53,7 +53,7 @@
    */
   @GuardedBy("this")
   @VisibleForTesting final Map<K, Multiplexer> mMultiplexers;
-  private final Producer<T> mInputProducer;
+  /* PACKAGE */ final Producer<T> mInputProducer;
 
   protected MultiplexProducer(Producer<T> inputProducer) {
     mInputProducer = inputProducer;
@@ -88,7 +88,7 @@ public void produceResults(Consumer<T> consumer, ProducerContext context) {
     }
   }
 
-  private synchronized Multiplexer getExistingMultiplexer(K key) {
+  /* PACKAGE */ synchronized Multiplexer getExistingMultiplexer(K key) {
     return mMultiplexers.get(key);
   }
 
@@ -98,7 +98,7 @@ private synchronized Multiplexer createAndPutNewMultiplexer(K key) {
     return multiplexer;
   }
 
-  private synchronized void removeMultiplexer(K key, Multiplexer multiplexer) {
+  /* PACKAGE */ synchronized void removeMultiplexer(K key, Multiplexer multiplexer) {
     if (mMultiplexers.get(key) == multiplexer) {
       mMultiplexers.remove(key);
     }
@@ -140,7 +140,7 @@ private synchronized void removeMultiplexer(K key, Multiplexer multiplexer) {
      *   <li> cancellation notification is received and mConsumerContextPairs is empty </li>
      * </ul>
      */
-    private final CopyOnWriteArraySet<Pair<Consumer<T>, ProducerContext>> mConsumerContextPairs;
+    /* PACKAGE */ final CopyOnWriteArraySet<Pair<Consumer<T>, ProducerContext>> mConsumerContextPairs;
 
     @GuardedBy("Multiplexer.this")
     @Nullable
@@ -157,7 +157,7 @@ private synchronized void removeMultiplexer(K key, Multiplexer multiplexer) {
      */
     @GuardedBy("Multiplexer.this")
     @Nullable
-    private BaseProducerContext mMultiplexProducerContext;
+    /* PACKAGE */ BaseProducerContext mMultiplexProducerContext;
 
     /**
      * Currently used consumer of next producer.
@@ -305,7 +305,7 @@ public void onPriorityChanged() {
      * the data. If all consumers are cancelled, then this multiplexer is removed from mRequest
      * map to clean up.
      */
-    private void startInputProducerIfHasAttachedConsumers() {
+    /* PACKAGE */ void startInputProducerIfHasAttachedConsumers() {
       BaseProducerContext multiplexProducerContext;
       ForwardingConsumer forwardingConsumer;
       synchronized (Multiplexer.this) {
@@ -339,7 +339,7 @@ private void startInputProducerIfHasAttachedConsumers() {
     }
 
     @Nullable
-    private synchronized List<ProducerContextCallbacks> updateIsPrefetch() {
+    /* PACKAGE */ synchronized List<ProducerContextCallbacks> updateIsPrefetch() {
       if (mMultiplexProducerContext == null) {
         return null;
       }
@@ -356,7 +356,7 @@ private synchronized boolean computeIsPrefetch() {
     }
 
     @Nullable
-    private synchronized List<ProducerContextCallbacks> updateIsIntermediateResultExpected() {
+    /* PACKAGE */ synchronized List<ProducerContextCallbacks> updateIsIntermediateResultExpected() {
       if (mMultiplexProducerContext == null) {
         return null;
       }
@@ -374,7 +374,7 @@ private synchronized boolean computeIsIntermediateResultExpected() {
     }
 
     @Nullable
-    private synchronized List<ProducerContextCallbacks> updatePriority() {
+    /* PACKAGE */ synchronized List<ProducerContextCallbacks> updatePriority() {
       if (mMultiplexProducerContext == null) {
         return null;
       }
@@ -493,7 +493,7 @@ private void closeSafely(Closeable obj) {
     /**
      * Forwards {@link Consumer} methods to Multiplexer.
      */
-    private class ForwardingConsumer extends BaseConsumer<T> {
+    /* PACKAGE */ class ForwardingConsumer extends BaseConsumer<T> {
       @Override
       protected void onNewResultImpl(T newResult, boolean isLast) {
         Multiplexer.this.onNextResult(this, newResult, isLast);
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/NetworkFetchProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/NetworkFetchProducer.java
index 633b15afb..ba069a9af 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/NetworkFetchProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/NetworkFetchProducer.java
@@ -84,7 +84,7 @@ public void onCancellation() {
         });
   }
 
-  private void onResponse(
+  /* PACKAGE */ void onResponse(
       FetchState fetchState,
       InputStream responseData,
       int responseContentLength)
@@ -172,13 +172,13 @@ private void notifyConsumer(
     }
   }
 
-  private void onFailure(FetchState fetchState, Throwable e) {
+  /* PACKAGE */ void onFailure(FetchState fetchState, Throwable e) {
     fetchState.getListener()
         .onProducerFinishWithFailure(fetchState.getId(), PRODUCER_NAME, e, null);
     fetchState.getConsumer().onFailure(e);
   }
 
-  private void onCancellation(FetchState fetchState) {
+  /* PACKAGE */ void onCancellation(FetchState fetchState) {
     fetchState.getListener()
         .onProducerFinishWithCancellation(fetchState.getId(), PRODUCER_NAME, null);
     fetchState.getConsumer().onCancellation();
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/PostprocessorProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/PostprocessorProducer.java
index 0bc7e16a4..9a2c5f3c3 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/PostprocessorProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/PostprocessorProducer.java
@@ -40,8 +40,8 @@
   @VisibleForTesting static final String POSTPROCESSOR = "Postprocessor";
 
   private final Producer<CloseableReference<CloseableImage>> mInputProducer;
-  private final PlatformBitmapFactory mBitmapFactory;
-  private final Executor mExecutor;
+  /* PACKAGE */ final PlatformBitmapFactory mBitmapFactory;
+  /* PACKAGE */ final Executor mExecutor;
 
   public PostprocessorProducer(
       Producer<CloseableReference<CloseableImage>> inputProducer,
@@ -87,11 +87,11 @@ public void produceResults(
     private boolean mIsClosed;
     @GuardedBy("PostprocessorConsumer.this")
     @Nullable
-    private CloseableReference<CloseableImage> mSourceImageRef = null;
+    /* PACKAGE */ CloseableReference<CloseableImage> mSourceImageRef = null;
     @GuardedBy("PostprocessorConsumer.this")
-    private boolean mIsLast = false;
+    /* PACKAGE */ boolean mIsLast = false;
     @GuardedBy("PostprocessorConsumer.this")
-    private boolean mIsDirty = false;
+    /* PACKAGE */ boolean mIsDirty = false;
     @GuardedBy("PostprocessorConsumer.this")
     private boolean mIsPostProcessingRunning = false;
 
@@ -185,7 +185,7 @@ public void run() {
           });
     }
 
-    private void clearRunningAndStartIfDirty() {
+    /* PACKAGE */ void clearRunningAndStartIfDirty() {
       boolean shouldExecuteAgain;
       synchronized (PostprocessorConsumer.this) {
         mIsPostProcessingRunning = false;
@@ -205,7 +205,7 @@ private synchronized boolean setRunningIfDirtyAndNotRunning() {
       return false;
     }
 
-    private void doPostprocessing(
+    /* PACKAGE */ void doPostprocessing(
         CloseableReference<CloseableImage> sourceImageRef,
         boolean isLast) {
       Preconditions.checkArgument(CloseableReference.isValid(sourceImageRef));
@@ -271,7 +271,7 @@ private void maybeNotifyOnFailure(Throwable throwable) {
       }
     }
 
-    private void maybeNotifyOnCancellation() {
+    /* PACKAGE */ void maybeNotifyOnCancellation() {
       if (close()) {
         getConsumer().onCancellation();
       }
@@ -303,7 +303,7 @@ private boolean close() {
       CloseableReference<CloseableImage>,
       CloseableReference<CloseableImage>> {
 
-    private SingleUsePostprocessorConsumer(PostprocessorConsumer postprocessorConsumer) {
+    /* PACKAGE */ SingleUsePostprocessorConsumer(PostprocessorConsumer postprocessorConsumer) {
       super(postprocessorConsumer);
     }
 
@@ -338,7 +338,7 @@ protected void onNewResultImpl(
     @Nullable
     private CloseableReference<CloseableImage> mSourceImageRef = null;
 
-    private RepeatedPostprocessorConsumer(
+    /* PACKAGE */ RepeatedPostprocessorConsumer(
         PostprocessorConsumer postprocessorConsumer,
         RepeatedPostprocessor repeatedPostprocessor,
         ProducerContext context) {
@@ -411,7 +411,7 @@ private void setSourceImageRef(CloseableReference<CloseableImage> sourceImageRef
       CloseableReference.closeSafely(oldSourceImageRef);
     }
 
-    private boolean close() {
+    /* PACKAGE */ boolean close() {
       CloseableReference<CloseableImage> oldSourceImageRef;
       synchronized (RepeatedPostprocessorConsumer.this) {
         if (mIsClosed) {
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/RemoveImageTransformMetaDataProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/RemoveImageTransformMetaDataProducer.java
index 8e18507b7..5a2ecdbdf 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/RemoveImageTransformMetaDataProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/RemoveImageTransformMetaDataProducer.java
@@ -38,7 +38,7 @@ public void produceResults(
   private class RemoveImageTransformMetaDataConsumer extends DelegatingConsumer<EncodedImage,
           CloseableReference<PooledByteBuffer>> {
 
-    private RemoveImageTransformMetaDataConsumer(
+    /* PACKAGE */ RemoveImageTransformMetaDataConsumer(
         Consumer<CloseableReference<PooledByteBuffer>> consumer) {
       super(consumer);
     }
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ResizeAndRotateProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ResizeAndRotateProducer.java
index ddb98eada..3213939e2 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ResizeAndRotateProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ResizeAndRotateProducer.java
@@ -43,17 +43,17 @@
  */
 public class ResizeAndRotateProducer implements Producer<EncodedImage> {
   public static final String PRODUCER_NAME = "ResizeAndRotateProducer";
-  private static final String ORIGINAL_SIZE_KEY = "Original size";
-  private static final String REQUESTED_SIZE_KEY = "Requested size";
-  private static final String FRACTION_KEY = "Fraction";
+  /* PACKAGE */ static final String ORIGINAL_SIZE_KEY = "Original size";
+  /* PACKAGE */ static final String REQUESTED_SIZE_KEY = "Requested size";
+  /* PACKAGE */ static final String FRACTION_KEY = "Fraction";
 
   @VisibleForTesting static final int DEFAULT_JPEG_QUALITY = 85;
   @VisibleForTesting static final int MAX_JPEG_SCALE_NUMERATOR = JpegTranscoder.SCALE_DENOMINATOR;
   @VisibleForTesting static final int MIN_TRANSFORM_INTERVAL_MS = 100;
 
-  private final Executor mExecutor;
-  private final PooledByteBufferFactory mPooledByteBufferFactory;
-  private final boolean mResizingEnabled;
+  /* PACKAGE */ final Executor mExecutor;
+  /* PACKAGE */ final PooledByteBufferFactory mPooledByteBufferFactory;
+  /* PACKAGE */ final boolean mResizingEnabled;
   private final Producer<EncodedImage> mInputProducer;
 
   public ResizeAndRotateProducer(
@@ -76,10 +76,10 @@ public void produceResults(
 
   private class TransformingConsumer extends DelegatingConsumer<EncodedImage, EncodedImage> {
 
-    private final ProducerContext mProducerContext;
-    private boolean mIsCancelled;
+    /* PACKAGE */ final ProducerContext mProducerContext;
+    /* PACKAGE */ boolean mIsCancelled;
 
-    private final JobScheduler mJobScheduler;
+    /* PACKAGE */ final JobScheduler mJobScheduler;
 
     public TransformingConsumer(
         final Consumer<EncodedImage> consumer,
@@ -145,7 +145,7 @@ protected void onNewResultImpl(@Nullable EncodedImage newResult, boolean isLast)
       }
     }
 
-    private void doTransform(EncodedImage encodedImage, boolean isLast) {
+    /* PACKAGE */ void doTransform(EncodedImage encodedImage, boolean isLast) {
       mProducerContext.getListener().onProducerStart(mProducerContext.getId(), PRODUCER_NAME);
       ImageRequest imageRequest = mProducerContext.getImageRequest();
       PooledByteBufferOutputStream outputStream = mPooledByteBufferFactory.newOutputStream();
@@ -215,7 +215,7 @@ private void doTransform(EncodedImage encodedImage, boolean isLast) {
     }
   }
 
-  private static TriState shouldTransform(
+  /* PACKAGE */ static TriState shouldTransform(
       ImageRequest request,
       EncodedImage encodedImage,
       boolean resizingEnabled) {
@@ -256,7 +256,7 @@ private static TriState shouldTransform(
     return (int) (roundUpFraction + maxRatio * JpegTranscoder.SCALE_DENOMINATOR);
   }
 
-  private static int getScaleNumerator(
+  /* PACKAGE */ static int getScaleNumerator(
       ImageRequest imageRequest,
       EncodedImage encodedImage,
       boolean resizingEnabled) {
@@ -283,7 +283,7 @@ private static int getScaleNumerator(
     return (numerator < 1) ? 1 : numerator;
   }
 
-  private static int getRotationAngle(RotationOptions rotationOptions, EncodedImage encodedImage) {
+  /* PACKAGE */ static int getRotationAngle(RotationOptions rotationOptions, EncodedImage encodedImage) {
     if (rotationOptions.useImageMetadata()) {
       int rotationAngle = encodedImage.getRotationAngle();
       switch (rotationAngle) {
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ThreadHandoffProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ThreadHandoffProducer.java
index 0725b79af..4f91e6567 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ThreadHandoffProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ThreadHandoffProducer.java
@@ -19,8 +19,8 @@
 
   public static final String PRODUCER_NAME = "BackgroundThreadHandoffProducer";
 
-  private final Producer<T> mInputProducer;
-  private final ThreadHandoffProducerQueue mThreadHandoffProducerQueue;
+  /* PACKAGE */ final Producer<T> mInputProducer;
+  /* PACKAGE */ final ThreadHandoffProducerQueue mThreadHandoffProducerQueue;
 
   public ThreadHandoffProducer(final Producer<T> inputProducer,
                                final  ThreadHandoffProducerQueue inputThreadHandoffProducerQueue) {
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ThrottlingProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ThrottlingProducer.java
index 41c08e87d..90afe3db3 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ThrottlingProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ThrottlingProducer.java
@@ -30,10 +30,10 @@
   private final int mMaxSimultaneousRequests;
 
   @GuardedBy("this")
-  private int mNumCurrentRequests;
+  /* PACKAGE */ int mNumCurrentRequests;
   @GuardedBy("this")
-  private final ConcurrentLinkedQueue<Pair<Consumer<T>, ProducerContext>> mPendingRequests;
-  private final Executor mExecutor;
+  /* PACKAGE */ final ConcurrentLinkedQueue<Pair<Consumer<T>, ProducerContext>> mPendingRequests;
+  /* PACKAGE */ final Executor mExecutor;
 
   public ThrottlingProducer(
       int maxSimultaneousRequests,
@@ -75,7 +75,7 @@ void produceResultsInternal(Consumer<T> consumer, ProducerContext producerContex
 
   private class ThrottlerConsumer extends DelegatingConsumer<T, T> {
 
-    private ThrottlerConsumer(Consumer<T> consumer) {
+    /* PACKAGE */ ThrottlerConsumer(Consumer<T> consumer) {
       super(consumer);
     }
 
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ThumbnailBranchProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ThumbnailBranchProducer.java
index 917ca16c7..44f587c15 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ThumbnailBranchProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ThumbnailBranchProducer.java
@@ -90,7 +90,7 @@ protected void onFailureImpl(Throwable t) {
     }
   }
 
-  private boolean produceResultsFromThumbnailProducer(
+  /* PACKAGE */ boolean produceResultsFromThumbnailProducer(
       int startIndex,
       Consumer<EncodedImage> consumer,
       ProducerContext context) {
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/WebpTranscodeProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/WebpTranscodeProducer.java
index 10f31ffd6..20e8e2525 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/WebpTranscodeProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/WebpTranscodeProducer.java
@@ -53,9 +53,9 @@
   private static final int DEFAULT_JPEG_QUALITY = 80;
 
   private final Executor mExecutor;
-  private final PooledByteBufferFactory mPooledByteBufferFactory;
+  /* PACKAGE */ final PooledByteBufferFactory mPooledByteBufferFactory;
   private final Producer<EncodedImage> mInputProducer;
-  private final @EnhancedTranscodingType int mEnhancedTranscodingType;
+  /* PACKAGE */ final @EnhancedTranscodingType int mEnhancedTranscodingType;
 
   public WebpTranscodeProducer(
       Executor executor,
@@ -108,7 +108,7 @@ protected void onNewResultImpl(@Nullable EncodedImage newResult, boolean isLast)
     }
   }
 
-  private void transcodeLastResult(
+  /* PACKAGE */ void transcodeLastResult(
       final EncodedImage originalResult,
       final Consumer<EncodedImage> consumer,
       final ProducerContext producerContext) {
@@ -165,7 +165,7 @@ protected void onCancellation() {
     mExecutor.execute(runnable);
   }
 
-  private static TriState shouldTranscode(final EncodedImage encodedImage) {
+  /* PACKAGE */ static TriState shouldTranscode(final EncodedImage encodedImage) {
     Preconditions.checkNotNull(encodedImage);
     ImageFormat imageFormat = ImageFormatChecker.getImageFormat_WrapIOException(
         encodedImage.getInputStream());
@@ -185,7 +185,7 @@ private static TriState shouldTranscode(final EncodedImage encodedImage) {
     return TriState.NO;
   }
 
-  private static void doTranscode(
+  /* PACKAGE */ static void doTranscode(
       final EncodedImage encodedImage,
       final PooledByteBufferOutputStream outputStream,
       final @EnhancedTranscodingType int enhancedWebpTranscodingType) throws Exception {
