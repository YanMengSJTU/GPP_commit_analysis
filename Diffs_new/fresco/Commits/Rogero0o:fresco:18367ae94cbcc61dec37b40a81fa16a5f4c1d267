diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalContentUriFetchProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalContentUriFetchProducer.java
index 9d0b07f85..b5f8c4242 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalContentUriFetchProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalContentUriFetchProducer.java
@@ -11,16 +11,15 @@
 import android.content.res.AssetFileDescriptor;
 import android.database.Cursor;
 import android.net.Uri;
+import android.os.ParcelFileDescriptor;
 import android.provider.ContactsContract;
 import android.provider.MediaStore;
 import com.facebook.common.memory.PooledByteBufferFactory;
 import com.facebook.common.util.UriUtil;
 import com.facebook.imagepipeline.image.EncodedImage;
 import com.facebook.imagepipeline.request.ImageRequest;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.InputStream;
+
+import java.io.*;
 import java.util.concurrent.Executor;
 import javax.annotation.Nullable;
 
@@ -32,16 +31,16 @@
   public static final String PRODUCER_NAME = "LocalContentUriFetchProducer";
 
   private static final String[] PROJECTION = new String[] {
-      MediaStore.Images.Media._ID,
-      MediaStore.Images.ImageColumns.DATA
+          MediaStore.Images.Media._ID,
+          MediaStore.Images.ImageColumns.DATA
   };
 
   private final ContentResolver mContentResolver;
 
   public LocalContentUriFetchProducer(
-      Executor executor,
-      PooledByteBufferFactory pooledByteBufferFactory,
-      ContentResolver contentResolver) {
+          Executor executor,
+          PooledByteBufferFactory pooledByteBufferFactory,
+          ContentResolver contentResolver) {
     super(executor, pooledByteBufferFactory);
     mContentResolver = contentResolver;
   }
@@ -68,8 +67,8 @@ protected EncodedImage getEncodedImage(ImageRequest imageRequest) throws IOExcep
       }
       // If a Contact URI is provided, use the special helper to open that contact's photo.
       return getEncodedImage(
-          inputStream,
-          EncodedImage.UNKNOWN_STREAM_SIZE);
+              inputStream,
+              EncodedImage.UNKNOWN_STREAM_SIZE);
     }
 
     if (UriUtil.isLocalCameraUri(uri)) {
@@ -80,8 +79,8 @@ protected EncodedImage getEncodedImage(ImageRequest imageRequest) throws IOExcep
     }
 
     return getEncodedImage(
-        mContentResolver.openInputStream(uri),
-        EncodedImage.UNKNOWN_STREAM_SIZE);
+            mContentResolver.openInputStream(uri),
+            EncodedImage.UNKNOWN_STREAM_SIZE);
   }
 
   private @Nullable EncodedImage getCameraImage(Uri uri) throws IOException {
@@ -95,9 +94,11 @@ protected EncodedImage getEncodedImage(ImageRequest imageRequest) throws IOExcep
       }
       cursor.moveToFirst();
       final String pathname =
-          cursor.getString(cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA));
+              cursor.getString(cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA));
       if (pathname != null) {
-        return getEncodedImage(new FileInputStream(pathname), getLength(pathname));
+        ParcelFileDescriptor parcelFileDescriptor = mContentResolver.openFileDescriptor(uri, "r");
+        FileDescriptor fd = parcelFileDescriptor.getFileDescriptor();
+        return getEncodedImage(new FileInputStream(fd), getLength(pathname));
       }
     } finally {
       cursor.close();
