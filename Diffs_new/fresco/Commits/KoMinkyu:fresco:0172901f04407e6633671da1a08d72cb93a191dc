diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipeline.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipeline.java
index c1959d88d..8b12bc350 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipeline.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipeline.java
@@ -44,6 +44,7 @@
 
 import bolts.Continuation;
 import bolts.Task;
+
 import com.android.internal.util.Predicate;
 
 /**
@@ -423,7 +424,24 @@ public boolean isInBitmapMemoryCache(final ImageRequest imageRequest) {
    * @return true if the image was found in the disk cache, false otherwise.
    */
   public boolean isInDiskCacheSync(final Uri uri) {
-    return isInDiskCacheSync(ImageRequest.fromUri(uri));
+    return isInDiskCacheSync(uri, ImageRequest.CacheChoice.DEFAULT);
+  }
+
+  /**
+   * Returns whether the image is stored in the disk cache.
+   * Performs disk cache check synchronously. It is not recommended to use this
+   * unless you know what exactly you are doing. Disk cache check is a costly operation,
+   * the call will block the caller thread until the cache check is completed.
+   * @param uri the uri for the image to be looked up.
+   * @param cacheChoice the cacheChoice for the cache to be looked up.
+   * @return true if the image was found in the disk cache, false otherwise.
+   */
+  public boolean isInDiskCacheSync(final Uri uri, final ImageRequest.CacheChoice cacheChoice) {
+    ImageRequest imageRequest = ImageRequestBuilder
+            .newBuilderWithSource(uri)
+            .setCacheChoice(cacheChoice)
+            .build();
+    return isInDiskCacheSync(imageRequest);
   }
 
   /**
@@ -435,7 +453,13 @@ public boolean isInDiskCacheSync(final Uri uri) {
    */
   public boolean isInDiskCacheSync(final ImageRequest imageRequest) {
     final CacheKey cacheKey = mCacheKeyFactory.getEncodedCacheKey(imageRequest, null);
-    return mMainBufferedDiskCache.diskCheckSync(cacheKey);
+    final ImageRequest.CacheChoice cacheChoice = imageRequest.getCacheChoice();
+
+    if (cacheChoice == ImageRequest.CacheChoice.SMALL) {
+      return mSmallImageBufferedDiskCache.diskCheckSync(cacheKey);
+    } else {
+      return mMainBufferedDiskCache.diskCheckSync(cacheKey);
+    }
   }
 
   /**
