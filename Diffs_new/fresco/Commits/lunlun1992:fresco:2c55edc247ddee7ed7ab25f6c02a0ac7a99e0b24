diff --git a/imagepipeline-base/src/main/java/com/facebook/imageutils/KpgUtil.java b/imagepipeline-base/src/main/java/com/facebook/imageutils/KpgUtil.java
index dcd89088e..8f04476f9 100644
--- a/imagepipeline-base/src/main/java/com/facebook/imageutils/KpgUtil.java
+++ b/imagepipeline-base/src/main/java/com/facebook/imageutils/KpgUtil.java
@@ -24,10 +24,6 @@
 public class KpgUtil
 {
     static{
-//        System.loadLibrary("avutil");
-//        System.loadLibrary("avcodec");
-//        System.loadLibrary("swresample");
-//        System.loadLibrary("swscale");
         System.loadLibrary("ffmpeg");
         System.loadLibrary("kpg");
     }
diff --git a/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgArtDecoder.java b/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgArtDecoder.java
new file mode 100644
index 000000000..d49dc8456
--- /dev/null
+++ b/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgArtDecoder.java
@@ -0,0 +1,98 @@
+package com.facebook.samples.demo.kpg;
+
+import java.io.InputStream;
+import java.nio.ByteBuffer;
+
+import android.annotation.TargetApi;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.os.Build;
+import android.support.v4.util.Pools;
+
+import com.facebook.common.internal.Preconditions;
+import com.facebook.common.internal.VisibleForTesting;
+import com.facebook.common.references.CloseableReference;
+import com.facebook.imagepipeline.image.EncodedImage;
+import com.facebook.imagepipeline.memory.BitmapPool;
+import com.facebook.imageutils.BitmapUtil;
+import com.facebook.samples.demo.kpg.KpgUtil;
+
+/**
+ * Created by fengweilun on 22/05/2017.
+ */
+@TargetApi(Build.VERSION_CODES.LOLLIPOP)
+public class KpgArtDecoder implements KpgPlatformDecoder
+{
+  private static final int DECODE_BUFFER_SIZE = 16 * 1024;
+  private final BitmapPool mBitmapPool;
+  /**
+   * ArtPlatformImageDecoder decodes images from InputStream - to do so we need to provide
+   * temporary buffer, otherwise framework will allocate one for us for each decode request
+   */
+  @VisibleForTesting final Pools.SynchronizedPool<ByteBuffer> mDecodeBuffers;
+
+  public KpgArtDecoder(BitmapPool bitmapPool, int maxNumThreads, Pools.SynchronizedPool decodeBuffers)
+  {
+    mBitmapPool = bitmapPool;
+    mDecodeBuffers = decodeBuffers;
+    for (int i = 0; i < maxNumThreads; i++) {
+      mDecodeBuffers.release(ByteBuffer.allocate(DECODE_BUFFER_SIZE));
+    }
+  }
+
+  protected CloseableReference<Bitmap> decodeKpgFromStream(
+      InputStream inputStream,
+      BitmapFactory.Options options,
+      int filesize)
+  {
+    Preconditions.checkNotNull(inputStream);
+    int sizeInBytes = BitmapUtil.getSizeInByteForBitmap(
+        options.outWidth,
+        options.outHeight,
+        options.inPreferredConfig);
+    final Bitmap bitmapToReuse = mBitmapPool.get(sizeInBytes);
+    if (bitmapToReuse == null) {
+      throw new NullPointerException("BitmapPool.get returned null");
+    }
+    options.inBitmap = bitmapToReuse;
+
+    Bitmap decodedBitmap;
+    ByteBuffer byteBuffer = mDecodeBuffers.acquire();
+    if (byteBuffer == null) {
+      byteBuffer = ByteBuffer.allocate(DECODE_BUFFER_SIZE);
+    }
+    try {
+      options.inTempStorage = byteBuffer.array();
+      decodedBitmap = KpgUtil.decodeStream(inputStream, null, options, filesize);
+    } catch (RuntimeException re) {
+      mBitmapPool.release(bitmapToReuse);
+      throw re;
+    } finally {
+      mDecodeBuffers.release(byteBuffer);
+    }
+
+    if (bitmapToReuse != decodedBitmap) {
+      mBitmapPool.release(bitmapToReuse);
+      decodedBitmap.recycle();
+      throw new IllegalStateException();
+    }
+
+    return CloseableReference.of(decodedBitmap, mBitmapPool);
+  }
+  @Override
+  public CloseableReference<Bitmap> decodeKpgFromEncodedImage(
+      EncodedImage encodedImage, Bitmap.Config bitmapConfig) {
+    int[] file_size = new int[1];
+    final BitmapFactory.Options options = com.facebook.imageutils.KpgUtil
+        .getOptions(encodedImage, bitmapConfig, file_size);
+    boolean retryOnFail=options.inPreferredConfig != Bitmap.Config.ARGB_8888;
+    try {
+      return decodeKpgFromStream(encodedImage.getInputStream(), options, file_size[0]);
+    } catch (RuntimeException re) {
+      if (retryOnFail) {
+        return decodeKpgFromEncodedImage(encodedImage, Bitmap.Config.ARGB_8888);
+      }
+      throw re;
+    }
+  }
+}
diff --git a/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgImageDecoder.java b/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgImageDecoder.java
index 441bf5dac..5fc932562 100644
--- a/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgImageDecoder.java
+++ b/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgImageDecoder.java
@@ -1,14 +1,21 @@
 package com.facebook.samples.demo.kpg;
 
+import com.facebook.common.references.CloseableReference;
 import com.facebook.imagepipeline.common.ImageDecodeOptions;
 import com.facebook.imagepipeline.decoder.ImageDecoder;
 import com.facebook.imagepipeline.image.CloseableImage;
 import com.facebook.imagepipeline.image.CloseableStaticBitmap;
 import com.facebook.imagepipeline.image.EncodedImage;
+import com.facebook.imagepipeline.image.ImmutableQualityInfo;
 import com.facebook.imagepipeline.image.QualityInfo;
+import com.facebook.imagepipeline.memory.BitmapPool;
 import com.facebook.imagepipeline.memory.PoolFactory;
 import com.facebook.imageutils.KpgUtil;
 
+import android.graphics.Bitmap;
+import android.os.Build;
+import android.support.v4.util.Pools;
+import android.util.Log;
 import android.util.Pair;
 
 /**
@@ -17,7 +24,7 @@
 
 public class KpgImageDecoder implements ImageDecoder {
 
-    KpgPlatformDecoder mPlatformDecoder;
+    private final KpgPlatformDecoder mPlatformDecoder;
 
     public KpgImageDecoder(PoolFactory poolFactory) {
         mPlatformDecoder = buildPlatformDecoder(poolFactory);
@@ -25,41 +32,35 @@ public KpgImageDecoder(PoolFactory poolFactory) {
 
     public static KpgPlatformDecoder buildPlatformDecoder(
             PoolFactory poolFactory) {
-        return null;
-//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
-//            int maxNumThreads = poolFactory.getFlexByteArrayPoolMaxNumThreads();
-//            return new ArtDecoder(
-//                    poolFactory.getBitmapPool(),
-//                    maxNumThreads,
-//                    new Pools.SynchronizedPool<>(maxNumThreads));
-//        } else {
-//            return new KitKatPurgeableDecoder(poolFactory.getFlexByteArrayPool());
-//        }
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            int maxNumThreads = poolFactory.getFlexByteArrayPoolMaxNumThreads();
+            return new KpgArtDecoder(
+                    poolFactory.getBitmapPool(),
+                    maxNumThreads,
+                    new Pools.SynchronizedPool<>(maxNumThreads));
+        } else {
+            return null;
+            //return new KpgKitKatPurgeableDecoder(poolFactory.getFlexByteArrayPool());
+        }
     }
 
     @Override
     public CloseableImage decode(EncodedImage encodedImage, int length, QualityInfo qualityInfo,
             ImageDecodeOptions options) {
         parseMetadata(encodedImage);
-        return decodeKpgStaticImage(encodedImage, options);
-    }
-
-
-    public CloseableStaticBitmap decodeKpgStaticImage(
-            final EncodedImage encodedImage,
-            ImageDecodeOptions options) {
         // TODO: 22/05/2017 puth mPlatformDecoder related implemention here
-//        CloseableReference<Bitmap> bitmapReference =
-//                mPlatformDecoder.decodeKpgFromEncodedImage(encodedImage, options.bitmapConfig);
-//        try {
-//            return new CloseableStaticBitmap(
-//                    bitmapReference,
-//                    ImmutableQualityInfo.FULL_QUALITY,
-//                    encodedImage.getRotationAngle());
-//        } finally {
-//            bitmapReference.close();
-//        }
-        return null;
+        Log.d("KpgImageDecoder", "decode");
+
+        CloseableReference<Bitmap> bitmapReference =
+                mPlatformDecoder.decodeKpgFromEncodedImage(encodedImage, options.bitmapConfig);
+        try {
+            return new CloseableStaticBitmap(
+                    bitmapReference,
+                    ImmutableQualityInfo.FULL_QUALITY,
+                    encodedImage.getRotationAngle());
+        } finally {
+            bitmapReference.close();
+        }
     }
 
     private static void parseMetadata(EncodedImage encodedImage) {
diff --git a/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgUtil.java b/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgUtil.java
index 3b4cb6b0f..ad41f9b7c 100644
--- a/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgUtil.java
+++ b/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgUtil.java
@@ -21,10 +21,11 @@
 public class KpgUtil
 {
     static{
-        System.loadLibrary("avutil");
-        System.loadLibrary("avcodec");
-        System.loadLibrary("swresample");
-        System.loadLibrary("swscale");
+//        System.loadLibrary("avutil");
+//        System.loadLibrary("avcodec");
+//        System.loadLibrary("swresample");
+//        System.loadLibrary("swscale");
+        System.loadLibrary("ffmpeg");
         System.loadLibrary("kpg");
     }
 
diff --git a/samples/demo/src/main/libs/armeabi-v7a/libkpg.so b/samples/demo/src/main/libs/armeabi-v7a/libkpg.so
index 9f30053d4..7d1e1da70 100755
Binary files a/samples/demo/src/main/libs/armeabi-v7a/libkpg.so and b/samples/demo/src/main/libs/armeabi-v7a/libkpg.so differ
diff --git a/static-kpg/src/main/jni/kpg/libkpg.cpp b/static-kpg/src/main/jni/kpg/libkpg.cpp
index 1301baf3d..d173b3b84 100644
--- a/static-kpg/src/main/jni/kpg/libkpg.cpp
+++ b/static-kpg/src/main/jni/kpg/libkpg.cpp
@@ -13,9 +13,10 @@ typedef struct CodecContext {
 } CodecContext;
 
 #define HEADER_LENGTH 28
-
 JNIEXPORT
-jintArray Java_com_facebook_imageutils_KpgUtil_nativedecode(JNIEnv *env, jclass clazz, jbyteArray bs, jint len, jint width, jint height) {
+jintArray Java_com_facebook_samples_demo_kpg_KpgUtil_nativedecode(JNIEnv *env, jclass clazz, jbyteArray bs, jint len, jint width, jint height){
+//JNIEXPORT
+//jintArray Java_com_facebook_imageutils_KpgUtil_nativedecode(JNIEnv *env, jclass clazz, jbyteArray bs, jint len, jint width, jint height) {
     //Header offset
     LOGI("Start Prepare");
 
