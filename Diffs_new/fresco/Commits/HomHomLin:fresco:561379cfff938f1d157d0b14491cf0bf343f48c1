diff --git a/frescopainter/src/main/java/com/meetyou/frescopainter/FrescoPainterPen.java b/frescopainter/src/main/java/com/meetyou/frescopainter/FrescoPainterPen.java
index 514510488..ba7addf10 100644
--- a/frescopainter/src/main/java/com/meetyou/frescopainter/FrescoPainterPen.java
+++ b/frescopainter/src/main/java/com/meetyou/frescopainter/FrescoPainterPen.java
@@ -37,7 +37,7 @@
     private boolean mAnim = true;
     private int mFade = 300;
     private boolean mProgressiveRenderingEnabled = false;
-
+    private boolean isOrigin=false;
     private int mLoadMode = PainterMode.FULL_LOAD;
 
     public FrescoPainterDraweeInterceptor getFrescoPainterDraweeInterceptor() {
@@ -366,4 +366,12 @@ public FrescoPainterPen setAnim(boolean anim){
         return this;
     }
 
+    public boolean isOrigin() {
+        return isOrigin;
+    }
+
+    public FrescoPainterPen setOrigin(boolean origin) {
+        isOrigin = origin;
+        return this;
+    }
 }
diff --git a/frescopainter/src/main/java/com/meetyou/frescopainter/PainterFactory.java b/frescopainter/src/main/java/com/meetyou/frescopainter/PainterFactory.java
index 6f2e86852..e637418fd 100644
--- a/frescopainter/src/main/java/com/meetyou/frescopainter/PainterFactory.java
+++ b/frescopainter/src/main/java/com/meetyou/frescopainter/PainterFactory.java
@@ -31,6 +31,7 @@ public static ImageRequest buildImageRequestWithResource(FrescoPainterPen pen){
         imageRequestBuilder
 //                .setPostprocessor(fresco.getPostProcessor())
                 .setAutoRotateEnabled(pen.getAutoRotateEnabled())
+                .setOrigin(pen.isOrigin())
                 .setProgressiveRenderingEnabled(pen.getProgressiveRenderingEnabled())
                 .setLocalThumbnailPreviewsEnabled(true);
         if (pen.getWidth() > 0 && pen.getHeight() > 0) {
@@ -70,6 +71,7 @@ public static ImageRequest buildImageRequestWithSource(FrescoPainterPen pen, boo
         ImageRequestBuilder imageRequestBuilder = ImageRequestBuilder.newBuilderWithSource(uri)
 //                .setPostprocessor(fresco.getPostProcessor())
                 .setAutoRotateEnabled(pen.getAutoRotateEnabled())
+                .setOrigin(pen.isOrigin())
                 .setProgressiveRenderingEnabled(pen.getProgressiveRenderingEnabled())
                 .setLocalThumbnailPreviewsEnabled(true);
         if (pen.getWidth() > 0 && pen.getHeight() > 0) {
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DownsampleUtil.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DownsampleUtil.java
index 25f2fb003..034105591 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DownsampleUtil.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DownsampleUtil.java
@@ -33,7 +33,7 @@ private DownsampleUtil() {}
    * @return
    */
   public static int determineSampleSize(ImageRequest imageRequest, EncodedImage encodedImage) {
-    if (!EncodedImage.isMetaDataAvailable(encodedImage)) {
+    if (!EncodedImage.isMetaDataAvailable(encodedImage) || imageRequest.isOrigin()) {
       return DEFAULT_SAMPLE_SIZE;
     }
     float ratio = determineDownsampleRatio(imageRequest, encodedImage);
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java
index 227a79666..60e676b39 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java
@@ -72,6 +72,10 @@
   /** Request listener to use for this image request */
   private final @Nullable RequestListener mRequestListener;
 
+
+  /** isOrigin */
+  private boolean mIsOrigin;
+
   public static ImageRequest fromFile(@Nullable File file) {
     return (file == null) ? null : ImageRequest.fromUri(UriUtil.getUriForFile(file));
   }
@@ -105,6 +109,8 @@ protected ImageRequest(ImageRequestBuilder builder) {
     mPostprocessor = builder.getPostprocessor();
 
     mRequestListener = builder.getRequestListener();
+
+    mIsOrigin = builder.isOrigin();
   }
 
   public CacheChoice getCacheChoice() {
@@ -213,6 +219,10 @@ public String toString() {
         .toString();
   }
 
+  public boolean isOrigin() {
+    return mIsOrigin;
+  }
+
   /**
    * An enum describing the cache choice.
    */
@@ -256,4 +266,5 @@ public static RequestLevel getMax(RequestLevel requestLevel1, RequestLevel reque
       return requestLevel1.getValue() > requestLevel2.getValue() ? requestLevel1 : requestLevel2;
     }
   }
+
 }
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequestBuilder.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequestBuilder.java
index 51181e6e0..1522141b1 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequestBuilder.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequestBuilder.java
@@ -44,6 +44,7 @@
   private boolean mDiskCacheEnabled = true;
   private @Nullable RequestListener mRequestListener;
   private @Nullable MediaVariations mMediaVariations = null;
+  private boolean mIsOrigin = false;
 
   /**
    * Creates a new request builder instance. The setting will be done according to the source type.
@@ -278,6 +279,15 @@ public boolean isDiskCacheEnabled() {
     return mDiskCacheEnabled && UriUtil.isNetworkUri(mSourceUri);
   }
 
+  public boolean isOrigin() {
+    return mIsOrigin;
+  }
+
+  public ImageRequestBuilder setOrigin(boolean origin) {
+    mIsOrigin = origin;
+    return this;
+  }
+
   /**
    * Set priority for the request.
    * @param requestPriority
diff --git a/mvn.gradle b/mvn.gradle
index 7edc0fbfc..0abb9fe38 100644
--- a/mvn.gradle
+++ b/mvn.gradle
@@ -17,7 +17,7 @@ uploadArchives {
     }else{
         depolyTypeUrl =deployToUrl
     }
-    
+    depolyTypeUrl= deployToUrl.replace("snapshots","releases")
     println "depolyTypeUrl " + depolyTypeUrl
 
     repositories.mavenDeployer {
