diff --git a/animated-drawable/src/main/java/com/facebook/fresco/animation/bitmap/BitmapAnimationBackend.java b/animated-drawable/src/main/java/com/facebook/fresco/animation/bitmap/BitmapAnimationBackend.java
index 7c2038db7..a3f19ed37 100644
--- a/animated-drawable/src/main/java/com/facebook/fresco/animation/bitmap/BitmapAnimationBackend.java
+++ b/animated-drawable/src/main/java/com/facebook/fresco/animation/bitmap/BitmapAnimationBackend.java
@@ -166,7 +166,10 @@ public boolean drawFrame(
       mFrameListener.onDrawFrameStart(this, frameNumber);
     }
 
-    mRoundAsCircle = ((AnimatedDrawable2)parent).isRoundAsCircle();
+    if(parent instanceof AnimatedDrawable2) {
+      mRoundAsCircle = ((AnimatedDrawable2) parent).isRoundAsCircle();
+    }
+
     boolean drawn = drawFrameOrFallback(canvas, frameNumber, FRAME_TYPE_CACHED);
 
     // We could not draw anything
diff --git a/animated-drawable/src/test/java/com/facebook/fresco/animation/bitmap/BitmapAnimationBackendTest.java b/animated-drawable/src/test/java/com/facebook/fresco/animation/bitmap/BitmapAnimationBackendTest.java
index 19313d897..b4d02141b 100644
--- a/animated-drawable/src/test/java/com/facebook/fresco/animation/bitmap/BitmapAnimationBackendTest.java
+++ b/animated-drawable/src/test/java/com/facebook/fresco/animation/bitmap/BitmapAnimationBackendTest.java
@@ -27,6 +27,7 @@
 import com.facebook.fresco.animation.backend.AnimationInformation;
 import com.facebook.fresco.animation.bitmap.preparation.BitmapFramePreparationStrategy;
 import com.facebook.fresco.animation.bitmap.preparation.BitmapFramePreparer;
+import com.facebook.fresco.animation.drawable.AnimatedDrawable2;
 import com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory;
 import org.junit.Before;
 import org.junit.Test;
@@ -401,6 +402,49 @@ public void testDrawNoFrame() {
         .onFrameDropped(mBitmapAnimationBackend, 4);
   }
 
+  @Test
+  public void testRoundBitmapWithoutRoundAsCircle(){
+    AnimatedDrawable2 drawable = new AnimatedDrawable2(mBitmapAnimationBackend);
+    when(mPlatformBitmapFactory.createBitmap(anyInt(), anyInt(), any(Bitmap.Config.class)))
+        .thenReturn(mBitmapRefererence);
+    when(mBitmapFrameRenderer.renderFrame(anyInt(), any(Bitmap.class))).thenReturn(true);
+
+    mBitmapAnimationBackend.drawFrame(drawable, mCanvas, 2);
+
+    verify(mFrameListener).onDrawFrameStart(mBitmapAnimationBackend, 2);
+    verify(mBitmapFrameCache).getCachedFrame(2);
+    verify(mBitmapFrameCache).getBitmapToReuseForFrame(2, 0, 0);
+    verify(mPlatformBitmapFactory).createBitmap(0, 0, Bitmap.Config.ARGB_8888);
+    verify(mBitmapFrameRenderer).renderFrame(2, mBitmap);
+    verify(mCanvas).drawBitmap(eq(mBitmap), eq(0f), eq(0f), any(Paint.class));
+    verifyFramePreparationStrategyCalled(2);
+    verifyListenersAndCacheNotified(2, BitmapAnimationBackend.FRAME_TYPE_CREATED);
+    assertReferencesClosed();
+  }
+
+  @Test
+  public void testRoundBitmapWithRoundAsCircle(){
+    AnimatedDrawable2 drawable = new AnimatedDrawable2(mBitmapAnimationBackend);
+    drawable.setRoundAsCircle(true);
+    when(drawable.isRoundAsCircle()).thenReturn(true);
+
+    when(mPlatformBitmapFactory.createBitmap(anyInt(), anyInt(), any(Bitmap.Config.class)))
+        .thenReturn(mBitmapRefererence);
+    when(mBitmapFrameRenderer.renderFrame(anyInt(), any(Bitmap.class))).thenReturn(true);
+
+    mBitmapAnimationBackend.drawFrame(drawable, mCanvas, 2);
+
+    verify(mFrameListener).onDrawFrameStart(mBitmapAnimationBackend, 2);
+    verify(mBitmapFrameCache).getCachedFrame(2);
+    verify(mBitmapFrameCache).getBitmapToReuseForFrame(2, 0, 0);
+    verify(mPlatformBitmapFactory).createBitmap(0, 0, Bitmap.Config.ARGB_8888);
+    verify(mBitmapFrameRenderer).renderFrame(2, mBitmap);
+    verify(mCanvas).drawBitmap(eq(mBitmap), eq(0f), eq(0f), any(Paint.class));
+    verifyFramePreparationStrategyCalled(2);
+    verifyListenersAndCacheNotified(2, BitmapAnimationBackend.FRAME_TYPE_CREATED);
+    assertReferencesClosed();
+  }
+
   private void verifyFramePreparationStrategyCalled(int frameNumber) {
     verify(mBitmapFramePreparationStrategy).prepareFrames(
         mBitmapFramePreparer,
