diff --git a/samples/demo/src/main/java/com/facebook/samples/demo/DemoApplication.java b/samples/demo/src/main/java/com/facebook/samples/demo/DemoApplication.java
index 3159b3f73..669cfa2fd 100644
--- a/samples/demo/src/main/java/com/facebook/samples/demo/DemoApplication.java
+++ b/samples/demo/src/main/java/com/facebook/samples/demo/DemoApplication.java
@@ -17,6 +17,8 @@
 import com.facebook.imagepipeline.core.ImagePipelineConfig;
 import com.facebook.imagepipeline.listener.RequestListener;
 import com.facebook.imagepipeline.listener.RequestLoggingListener;
+import com.facebook.imagepipeline.memory.PoolConfig;
+import com.facebook.imagepipeline.memory.PoolFactory;
 import com.facebook.samples.demo.kpg.KpgCustomImageFormatConfigurator;
 
 import android.app.Application;
@@ -35,8 +37,14 @@ public void onCreate() {
         FLog.setMinimumLoggingLevel(FLog.VERBOSE);
         Set<RequestListener> listeners = new HashSet<>();
         listeners.add(new RequestLoggingListener());
+
+
+        PoolFactory poolFactory = new PoolFactory(PoolConfig.newBuilder().build());
         ImagePipelineConfig config = ImagePipelineConfig.newBuilder(this)
-                .setImageDecoderConfig(KpgCustomImageFormatConfigurator.createImageDecoderConfig(this))   // use this syntax to add kpg capability
+
+                .setImageDecoderConfig(KpgCustomImageFormatConfigurator.createImageDecoderConfig(this, poolFactory))   // use this syntax to add kpg capability
+                .setPoolFactory(poolFactory)
+
                 .setRequestListeners(listeners)
                 .build();
         DraweeConfig draweeConfig = DraweeConfig.newBuilder()
diff --git a/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgCustomImageFormatConfigurator.java b/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgCustomImageFormatConfigurator.java
index 722c462c2..369780248 100644
--- a/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgCustomImageFormatConfigurator.java
+++ b/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgCustomImageFormatConfigurator.java
@@ -1,6 +1,7 @@
 package com.facebook.samples.demo.kpg;
 
 import com.facebook.imagepipeline.decoder.ImageDecoderConfig;
+import com.facebook.imagepipeline.memory.PoolFactory;
 
 import android.content.Context;
 import android.support.annotation.Nullable;
@@ -13,12 +14,13 @@
 public class KpgCustomImageFormatConfigurator {
 
     @Nullable
-    public static ImageDecoderConfig createImageDecoderConfig(Context context) {
+    public static ImageDecoderConfig createImageDecoderConfig(Context context,
+            PoolFactory poolFactory) {
         ImageDecoderConfig.Builder config = ImageDecoderConfig.newBuilder();
         config.addDecodingCapability(
                 KpgImageFormat.KPG,
                 new KpgImageFormatChecker(),
-                new KpgImageDecoder());
+                new KpgImageDecoder(poolFactory));
         return config.build();
     }
 }
diff --git a/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgImageDecoder.java b/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgImageDecoder.java
index 551039c1f..441bf5dac 100644
--- a/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgImageDecoder.java
+++ b/samples/demo/src/main/java/com/facebook/samples/demo/kpg/KpgImageDecoder.java
@@ -6,6 +6,7 @@
 import com.facebook.imagepipeline.image.CloseableStaticBitmap;
 import com.facebook.imagepipeline.image.EncodedImage;
 import com.facebook.imagepipeline.image.QualityInfo;
+import com.facebook.imagepipeline.memory.PoolFactory;
 import com.facebook.imageutils.KpgUtil;
 
 import android.util.Pair;
@@ -16,6 +17,25 @@
 
 public class KpgImageDecoder implements ImageDecoder {
 
+    KpgPlatformDecoder mPlatformDecoder;
+
+    public KpgImageDecoder(PoolFactory poolFactory) {
+        mPlatformDecoder = buildPlatformDecoder(poolFactory);
+    }
+
+    public static KpgPlatformDecoder buildPlatformDecoder(
+            PoolFactory poolFactory) {
+        return null;
+//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+//            int maxNumThreads = poolFactory.getFlexByteArrayPoolMaxNumThreads();
+//            return new ArtDecoder(
+//                    poolFactory.getBitmapPool(),
+//                    maxNumThreads,
+//                    new Pools.SynchronizedPool<>(maxNumThreads));
+//        } else {
+//            return new KitKatPurgeableDecoder(poolFactory.getFlexByteArrayPool());
+//        }
+    }
 
     @Override
     public CloseableImage decode(EncodedImage encodedImage, int length, QualityInfo qualityInfo,
