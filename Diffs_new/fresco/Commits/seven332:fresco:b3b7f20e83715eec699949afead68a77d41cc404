diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/FrescoLargeConfig.java b/fresco-large/src/main/java/com/hippo/fresco/large/FrescoLargeConfig.java
index dc86015f9..9ebd98197 100644
--- a/fresco-large/src/main/java/com/hippo/fresco/large/FrescoLargeConfig.java
+++ b/fresco-large/src/main/java/com/hippo/fresco/large/FrescoLargeConfig.java
@@ -28,7 +28,7 @@
   private final int thresholdWidth;
   private final int thresholdHeight;
 
-  public FrescoLargeConfig(Builder builder) {
+  private FrescoLargeConfig(Builder builder) {
     imageFormatSet = builder.imageFormatSet;
     formatCheckerMap = builder.formatCheckerMap;
     sizeDecoderMap = builder.sizeDecoderMap;
@@ -38,31 +38,31 @@ public FrescoLargeConfig(Builder builder) {
     thresholdHeight = builder.thresholdHeight;
   }
 
-  public Set<ImageFormat> getImageFormatSet() {
+  Set<ImageFormat> getImageFormatSet() {
     return imageFormatSet;
   }
 
-  public Map<ImageFormat, ImageFormat.FormatChecker> getImageFormatCheckerMap() {
+  Map<ImageFormat, ImageFormat.FormatChecker> getImageFormatCheckerMap() {
     return formatCheckerMap;
   }
 
-  public Map<ImageFormat, ImageSizeDecoder> getImageSizeDecoderMap() {
+  Map<ImageFormat, ImageSizeDecoder> getImageSizeDecoderMap() {
     return sizeDecoderMap;
   }
 
-  public Map<ImageFormat, ImageRegionDecoderFactory> getImageRegionDecoderFactoryMap() {
+  Map<ImageFormat, ImageRegionDecoderFactory> getImageRegionDecoderFactoryMap() {
     return regionDecoderFactoryMap;
   }
 
-  public Map<ImageFormat, ImageDecoder> getImageDecoderMap() {
+  Map<ImageFormat, ImageDecoder> getImageDecoderMap() {
     return imageDecoderMap;
   }
 
-  public int getThresholdWidth() {
+  int getThresholdWidth() {
     return thresholdWidth;
   }
 
-  public int getThresholdHeight() {
+  int getThresholdHeight() {
     return thresholdHeight;
   }
 
@@ -79,11 +79,26 @@ public static Builder newBuilder() {
     private int thresholdWidth;
     private int thresholdHeight;
 
+    /**
+     * Add a decoder for the image format.
+     */
     public FrescoLargeConfig.Builder addDecoder(@Nonnull ImageFormat imageFormat,
         @Nonnull ImageRegionDecoderFactory imageRegionDecoderFactory) {
       return addDecoder(imageFormat, null, null, imageRegionDecoderFactory, null);
     }
 
+    /**
+     * Add a decoder for the image format.
+     *
+     * @param imageFormat the image format
+     * @param imageFormatChecker the checker to check whether the image format,
+     *                           {@code null} to use default checker
+     * @param imageSizeDecoder the decoder to decode image size,
+     *                         {@code null} to use default decoder
+     * @param imageRegionDecoderFactory the factory to create image region decoder
+     * @param imageDecoder the decoder to decode the image if the image isn't large,
+     *                     {@code null} to use default decoder
+     */
     public FrescoLargeConfig.Builder addDecoder(@Nonnull ImageFormat imageFormat,
         @Nullable ImageFormat.FormatChecker imageFormatChecker,
         @Nullable ImageSizeDecoder imageSizeDecoder,
@@ -123,6 +138,9 @@ public static Builder newBuilder() {
       return this;
     }
 
+    /**
+     * Set the threshold to check whether the image is large.
+     */
     public FrescoLargeConfig.Builder setThresholdSize(int width, int height) {
       thresholdWidth = width;
       thresholdHeight = height;
diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/LargeDraweeView.java b/fresco-large/src/main/java/com/hippo/fresco/large/LargeDraweeView.java
index 5a73315ff..c14e6b731 100644
--- a/fresco-large/src/main/java/com/hippo/fresco/large/LargeDraweeView.java
+++ b/fresco-large/src/main/java/com/hippo/fresco/large/LargeDraweeView.java
@@ -25,11 +25,19 @@
 import com.hippo.fresco.large.drawable.StandardizedTransformedDrawable;
 import com.hippo.fresco.large.gesture.GestureRecognizer;
 
-public class LargeDraweeView extends SimpleDraweeView implements GestureRecognizer.Listener {
+/**
+ * {@code LargeDraweeView} shows a large image and supports gesture
+ * to translate, scale and rotate the image.
+ * <p>
+ * It must be used with {@link FrescoLarge}.
+ */
+public class LargeDraweeView extends SimpleDraweeView {
 
   private GestureRecognizer gestureRecognizer;
   private StandardizedTransformedDrawable transform;
 
+  private boolean isFixAngleEnabled = true;
+
   private final ControllerListener controllerListener = new BaseControllerListener<Object>() {
     @Override
     public void onFinalImageSet(
@@ -71,11 +79,27 @@ public LargeDraweeView(Context context, AttributeSet attrs, int defStyleAttr, in
   }
 
   private void init(Context context) {
-    gestureRecognizer = new GestureRecognizer(context, this);
+    gestureRecognizer = new GestureRecognizer(context, new Listener());
     gestureRecognizer.setIsDoubleTapEnabled(true);
     gestureRecognizer.setIsLongPressEnabled(false);
   }
 
+  /**
+   * Set whether fixing image rotating angle to meet right rect.
+   * If {@code true}, a animation will be run to fix image rotating angle,
+   * otherwise image rotating angle could be any value.
+   */
+  public void setIsFixAngleEnabled(boolean isFixAngleEnabled) {
+    this.isFixAngleEnabled = isFixAngleEnabled;
+  }
+
+  /**
+   * @return {@code true} if fixing image rotating angle is enabled, else {@code false}.
+   */
+  public boolean isFixAngleEnabled() {
+    return isFixAngleEnabled;
+  }
+
   @Override
   public void setController(@Nullable DraweeController draweeController) {
     removeControllerListener(getController());
@@ -97,7 +121,6 @@ private void addControllerListener(DraweeController controller) {
     }
   }
 
-
   private Drawable getActualDrawable() {
     DraweeController controller = getController();
     if (controller != null) {
@@ -140,65 +163,59 @@ public boolean onTouchEvent(MotionEvent event) {
     return true;
   }
 
-  @Override
-  public void onDown(int count, float x, float y) {
-    if (transform != null) {
-      transform.cancelAnimator();
-    }
-  }
+  private class Listener extends GestureRecognizer.ListenerAdapter {
 
-  @Override
-  public void onUp(int count, float x, float y) {
-    if (count == 0 && transform != null) {
-      transform.rotateToNextAngle(x, y);
+    @Override
+    public void onDown(int count, float x, float y) {
+      if (transform != null) {
+        transform.cancelAnimator();
+      }
     }
-  }
 
-  @Override
-  public void onCancel() {}
-
-  @Override
-  public void onSingleTap(float x, float y) {}
-
-  @Override
-  public void onDoubleTap(float x, float y) {
-    if (transform != null) {
-      transform.scaleToNextLevel(x, y);
+    @Override
+    public void onUp(int count, float x, float y) {
+      if (isFixAngleEnabled && count == 0 && transform != null) {
+        transform.rotateToNextAngle(x, y);
+      }
     }
-  }
 
-  @Override
-  public void onLongPress(float x, float y) {}
+    @Override
+    public void onDoubleTap(float x, float y) {
+      if (transform != null) {
+        transform.scaleToNextLevel(x, y);
+      }
+    }
 
-  @Override
-  public void onScroll(float dx, float dy, float totalX, float totalY, float x, float y) {
-    if (transform != null) {
-      if (transform.translate(dx, dy)) {
-        requestDisallowInterceptTouchEvent();
+    @Override
+    public void onScroll(float dx, float dy, float totalX, float totalY, float x, float y) {
+      if (transform != null) {
+        if (transform.translate(dx, dy)) {
+          requestDisallowInterceptTouchEvent();
+        }
       }
     }
-  }
 
-  @Override
-  public void onFling(float velocityX, float velocityY) {
-    if (transform != null) {
-      transform.fling(velocityX, velocityY);
+    @Override
+    public void onFling(float velocityX, float velocityY) {
+      if (transform != null) {
+        transform.fling(velocityX, velocityY);
+      }
     }
-  }
 
-  @Override
-  public void onScale(float factor, float x, float y) {
-    if (transform != null) {
-      transform.scale(factor, x, y);
-      requestDisallowInterceptTouchEvent();
+    @Override
+    public void onScale(float factor, float x, float y) {
+      if (transform != null) {
+        transform.scale(factor, x, y);
+        requestDisallowInterceptTouchEvent();
+      }
     }
-  }
 
-  @Override
-  public void onRotate(float angle, float x, float y) {
-    if (transform != null) {
-      transform.rotate(angle, x, y);
-      requestDisallowInterceptTouchEvent();
+    @Override
+    public void onRotate(float angle, float x, float y) {
+      if (transform != null) {
+        transform.rotate(angle, x, y);
+        requestDisallowInterceptTouchEvent();
+      }
     }
   }
 
diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/decoder/DefaultImageSizeDecoder.java b/fresco-large/src/main/java/com/hippo/fresco/large/decoder/DefaultImageSizeDecoder.java
index d1c1bd404..773bb9aa4 100644
--- a/fresco-large/src/main/java/com/hippo/fresco/large/decoder/DefaultImageSizeDecoder.java
+++ b/fresco-large/src/main/java/com/hippo/fresco/large/decoder/DefaultImageSizeDecoder.java
@@ -10,6 +10,10 @@
 
 import com.facebook.imagepipeline.image.EncodedImage;
 
+/**
+ * The default {@code ImageSizeDecoder}. It uses {@link EncodedImage#parseMetaData()}
+ * to get width and height.
+ */
 public class DefaultImageSizeDecoder implements ImageSizeDecoder {
 
   @Nullable
diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/decoder/ImageRegionDecoder.java b/fresco-large/src/main/java/com/hippo/fresco/large/decoder/ImageRegionDecoder.java
index 9391d2127..85f9bbaf3 100644
--- a/fresco-large/src/main/java/com/hippo/fresco/large/decoder/ImageRegionDecoder.java
+++ b/fresco-large/src/main/java/com/hippo/fresco/large/decoder/ImageRegionDecoder.java
@@ -17,10 +17,19 @@
   private Bitmap preview;
   private int previewSample;
 
+  /**
+   * Returns the width of the image.
+   */
   public abstract int getWidth();
 
+  /**
+   * Returns the height of the image.
+   */
   public abstract int getHeight();
 
+  /**
+   * Decodes a region for the image.
+   */
   @Nullable
   public abstract Bitmap decode(Rect rect, int sample);
 
diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/decoder/ImageRegionDecoderFactory.java b/fresco-large/src/main/java/com/hippo/fresco/large/decoder/ImageRegionDecoderFactory.java
index 35ac1b667..92b640d82 100644
--- a/fresco-large/src/main/java/com/hippo/fresco/large/decoder/ImageRegionDecoderFactory.java
+++ b/fresco-large/src/main/java/com/hippo/fresco/large/decoder/ImageRegionDecoderFactory.java
@@ -9,8 +9,15 @@
 import com.facebook.imagepipeline.common.ImageDecodeOptions;
 import com.facebook.imagepipeline.image.EncodedImage;
 
+/**
+ * {@code ImageRegionDecoderFactory} creates {@link ImageRegionDecoder} for given images.
+ */
 public interface ImageRegionDecoderFactory {
 
+  /**
+   * Creates a {@link ImageRegionDecoder} for the given image.
+   * Returns {@code null} if can't create it.
+   */
   @Nullable
   ImageRegionDecoder createImageRegionDecoder(EncodedImage encodedImage,
       ImageDecodeOptions options);
diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/decoder/ImageSizeDecoder.java b/fresco-large/src/main/java/com/hippo/fresco/large/decoder/ImageSizeDecoder.java
index deccbcec7..d9528cf02 100644
--- a/fresco-large/src/main/java/com/hippo/fresco/large/decoder/ImageSizeDecoder.java
+++ b/fresco-large/src/main/java/com/hippo/fresco/large/decoder/ImageSizeDecoder.java
@@ -10,8 +10,15 @@
 
 import com.facebook.imagepipeline.image.EncodedImage;
 
+/**
+ * {@code ImageSizeDecoder} gets size for given images.
+ */
 public interface ImageSizeDecoder {
 
+  /**
+   * Returns a pair of width and height.
+   * Returns {@code null} if can't decode it.
+   */
   @Nullable
   Pair<Integer, Integer> decode(EncodedImage encodedImage);
 }
diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/decoder/SkiaImageRegionDecoder.java b/fresco-large/src/main/java/com/hippo/fresco/large/decoder/SkiaImageRegionDecoder.java
index 6af780816..fa008a552 100644
--- a/fresco-large/src/main/java/com/hippo/fresco/large/decoder/SkiaImageRegionDecoder.java
+++ b/fresco-large/src/main/java/com/hippo/fresco/large/decoder/SkiaImageRegionDecoder.java
@@ -11,6 +11,10 @@
 import android.graphics.BitmapRegionDecoder;
 import android.graphics.Rect;
 
+/**
+ * {@code SkiaImageRegionDecoder} uses {@link BitmapRegionDecoder}
+ * to decode image.
+ */
 public class SkiaImageRegionDecoder extends ImageRegionDecoder {
 
   private BitmapRegionDecoder decoder;
diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/gesture/GestureRecognizer.java b/fresco-large/src/main/java/com/hippo/fresco/large/gesture/GestureRecognizer.java
index ea6c3479d..99d6e052e 100644
--- a/fresco-large/src/main/java/com/hippo/fresco/large/gesture/GestureRecognizer.java
+++ b/fresco-large/src/main/java/com/hippo/fresco/large/gesture/GestureRecognizer.java
@@ -285,4 +285,37 @@ public void onRotateEnd() {
 
     void onRotate(float angle, float x, float y);
   }
+
+  public static class ListenerAdapter implements Listener {
+
+    @Override
+    public void onDown(int count, float x, float y) {}
+
+    @Override
+    public void onUp(int count, float x, float y) {}
+
+    @Override
+    public void onCancel() {}
+
+    @Override
+    public void onSingleTap(float x, float y) {}
+
+    @Override
+    public void onDoubleTap(float x, float y) {}
+
+    @Override
+    public void onLongPress(float x, float y) {}
+
+    @Override
+    public void onScroll(float dx, float dy, float totalX, float totalY, float x, float y) {}
+
+    @Override
+    public void onFling(float velocityX, float velocityY) {}
+
+    @Override
+    public void onScale(float factor, float x, float y) {}
+
+    @Override
+    public void onRotate(float angle, float x, float y) {}
+  }
 }
