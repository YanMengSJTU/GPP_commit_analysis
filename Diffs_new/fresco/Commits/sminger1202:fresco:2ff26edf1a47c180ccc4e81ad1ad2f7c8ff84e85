diff --git a/imagepipeline/src/main/jni/gifimage/Android.mk b/imagepipeline/src/main/jni/gifimage/Android.mk
index 33f905649..157a95d40 100644
--- a/imagepipeline/src/main/jni/gifimage/Android.mk
+++ b/imagepipeline/src/main/jni/gifimage/Android.mk
@@ -18,11 +18,15 @@ LOCAL_CFLAGS += $(FRESCO_CPP_CFLAGS)
 LOCAL_EXPORT_CPPFLAGS := $(CXX11_FLAGS)
 LOCAL_LDLIBS += -ljnigraphics
 LOCAL_LDFLAGS += $(FRESCO_CPP_LDFLAGS)
+
+
 ifeq ($(BUCK_BUILD), 1)
+$(warning "true")
   LOCAL_CFLAGS += $(BUCK_DEP_CFLAGS)
   LOCAL_LDFLAGS += $(BUCK_DEP_LDFLAGS)
   include $(BUILD_SHARED_LIBRARY)
 else
+$(warning "false")
   LOCAL_LDLIBS += -llog -ldl -landroid
   LOCAL_STATIC_LIBRARIES += gif
   include $(BUILD_SHARED_LIBRARY)
diff --git a/sample/src/main/java/com/facebook/fresco/sample/MyPostprocessor.java b/sample/src/main/java/com/facebook/fresco/sample/MyPostprocessor.java
new file mode 100644
index 000000000..9ef683aae
--- /dev/null
+++ b/sample/src/main/java/com/facebook/fresco/sample/MyPostprocessor.java
@@ -0,0 +1,40 @@
+package com.facebook.fresco.sample;
+
+import com.facebook.common.references.CloseableReference;
+import com.facebook.imagepipeline.bitmaps.PlatformBitmapFactory;
+import com.facebook.imagepipeline.request.BasePostprocessor;
+import com.facebook.imagepipeline.request.Postprocessor;
+import android.graphics.Bitmap;
+import android.graphics.Color;
+
+/**
+ * Created by sminger on 15-5-21.
+ */
+public class MyPostprocessor extends BasePostprocessor {
+    private int mColor = Color.TRANSPARENT;
+
+    public MyPostprocessor(){
+        mColor = Color.RED;
+    }
+    public void setColor(int color) {
+        mColor = color;
+        //update();
+    }
+
+    @Override
+    public String getName() {
+        return "meshPostprocessor";
+    }
+
+    @Override
+    public CloseableReference<Bitmap> process(Bitmap bitmap, PlatformBitmapFactory bitmapFactory) {
+        CloseableReference<Bitmap> destBitmapRef = bitmapFactory.createBitmap(bitmap.getWidth(),bitmap.getHeight());
+        Bitmap destBitmap = destBitmapRef.get();
+        for (int x = 0; x < bitmap.getWidth(); x+=20) {
+            for (int y = 0; y < bitmap.getHeight(); y+=20) {
+                destBitmap.setPixel(x, y, mColor);
+            }
+        }
+        return CloseableReference.cloneOrNull(destBitmapRef);
+    }
+}
diff --git a/sample/src/main/java/com/facebook/fresco/sample/adapters/FrescoAdapter.java b/sample/src/main/java/com/facebook/fresco/sample/adapters/FrescoAdapter.java
index a29409fa9..cd59d8205 100644
--- a/sample/src/main/java/com/facebook/fresco/sample/adapters/FrescoAdapter.java
+++ b/sample/src/main/java/com/facebook/fresco/sample/adapters/FrescoAdapter.java
@@ -22,12 +22,15 @@
 import com.facebook.drawee.generic.RoundingParams;
 import com.facebook.drawee.interfaces.DraweeController;
 import com.facebook.fresco.sample.Drawables;
+import com.facebook.fresco.sample.MyPostprocessor;
 import com.facebook.fresco.sample.instrumentation.InstrumentedDraweeView;
 import com.facebook.fresco.sample.instrumentation.PerfListener;
 import com.facebook.imagepipeline.common.ResizeOptions;
 import com.facebook.imagepipeline.core.ImagePipelineConfig;
 import com.facebook.imagepipeline.request.ImageRequest;
 import com.facebook.imagepipeline.request.ImageRequestBuilder;
+import com.facebook.imagepipeline.request.Postprocessor;
+import android.graphics.Bitmap;
 
 /** Populate the list view with images using the Fresco image pipeline. */
 public class FrescoAdapter extends ImageListAdapter<InstrumentedDraweeView> {
@@ -56,18 +59,28 @@ protected InstrumentedDraweeView createView() {
     return new InstrumentedDraweeView(getContext(), gdh);
   }
 
-  protected void bind(final InstrumentedDraweeView view, String uri) {
+    Postprocessor redMeshPostprocessor = new MyPostprocessor();
+
+
+    protected void bind(final InstrumentedDraweeView view, String uri) {
     ImageRequest imageRequest =
         ImageRequestBuilder.newBuilderWithSource(Uri.parse(uri))
-            .setResizeOptions(
-                new ResizeOptions(view.getLayoutParams().width, view.getLayoutParams().height))
+                .setAutoRotateEnabled(true)// modify by sminger , note : may it contained in listview,so not work
+                //.setPostprocessor(redMeshPostprocessor)// modify by sminger
+                .setResizeOptions(
+                        new ResizeOptions(view.getLayoutParams().width, view.getLayoutParams().height))
             .build();
+      Uri lowResUri = Uri.parse("http://u4.tdimg.com/7/147/82/31804659546604080410941337579323207967.jpg");
+      Uri heightResUri = Uri.parse("http://g1.ykimg.com/0516000051B6F2FA67583905D3081E0A");
     DraweeController draweeController = Fresco.newDraweeControllerBuilder()
-        .setImageRequest(imageRequest)
-        .setOldController(view.getController())
-        .setControllerListener(view.getListener())
-        .setAutoPlayAnimations(true)
-        .build();
+            .setLowResImageRequest(ImageRequest.fromUri(lowResUri))
+            //.setImageRequest(imageRequest.fromUri(heightResUri))
+            .setImageRequest(imageRequest)// default configuration
+            .setOldController(view.getController())
+            .setControllerListener(view.getListener())
+            .setAutoPlayAnimations(true)
+            .setTapToRetryEnabled(true)// modify by sminger
+            .build();
     view.setController(draweeController);
   }
 
diff --git a/sample/src/main/java/com/facebook/fresco/sample/adapters/ImageListAdapter.java b/sample/src/main/java/com/facebook/fresco/sample/adapters/ImageListAdapter.java
index 1534fc0f9..5bb39e293 100644
--- a/sample/src/main/java/com/facebook/fresco/sample/adapters/ImageListAdapter.java
+++ b/sample/src/main/java/com/facebook/fresco/sample/adapters/ImageListAdapter.java
@@ -54,7 +54,7 @@ public View getView(int position, View convertView, ViewGroup parent) {
     V view = getViewClass().isInstance(convertView) ? (V) convertView : createView();
 
     int size = calcDesiredSize(parent.getWidth(), parent.getHeight());
-    updateViewLayoutParams(view, size, size);
+    updateViewLayoutParams(view, 2 * size, 2 * size);// modify by sminger
 
     String uri = getItem(position);
     view.initInstrumentation(uri, mPerfListener);
diff --git a/sample/src/main/java/com/facebook/fresco/sample/configs/imagepipeline/ImagePipelineConfigFactory.java b/sample/src/main/java/com/facebook/fresco/sample/configs/imagepipeline/ImagePipelineConfigFactory.java
index 955f7d24b..362dfa893 100644
--- a/sample/src/main/java/com/facebook/fresco/sample/configs/imagepipeline/ImagePipelineConfigFactory.java
+++ b/sample/src/main/java/com/facebook/fresco/sample/configs/imagepipeline/ImagePipelineConfigFactory.java
@@ -15,6 +15,7 @@
 
 import android.content.Context;
 
+import com.facebook.imagepipeline.decoder.SimpleProgressiveJpegConfig;
 import com.squareup.okhttp.OkHttpClient;
 
 import com.facebook.cache.disk.DiskCacheConfig;
@@ -39,7 +40,8 @@
    */
   public static ImagePipelineConfig getImagePipelineConfig(Context context) {
     if (sImagePipelineConfig == null) {
-      ImagePipelineConfig.Builder configBuilder = ImagePipelineConfig.newBuilder(context);
+      ImagePipelineConfig.Builder configBuilder = ImagePipelineConfig.newBuilder(context)
+              .setProgressiveJpegConfig(new SimpleProgressiveJpegConfig());//modify by sminger
       configureCaches(configBuilder, context);
       sImagePipelineConfig = configBuilder.build();
     }
