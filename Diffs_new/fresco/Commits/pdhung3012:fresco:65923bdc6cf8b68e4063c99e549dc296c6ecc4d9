diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/memory/BitmapCounter.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/memory/BitmapCounter.java
index 6936ff3c7..9958057d5 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/memory/BitmapCounter.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/memory/BitmapCounter.java
@@ -54,7 +54,7 @@ public void release(Bitmap value) {
    * @param bitmap to include in the count
    * @return true if and only if bitmap is successfully included in the count
    */
-  public synchronized boolean isInBitmap(Bitmap bitmap) {
+  public synchronized boolean includeBitmap(Bitmap bitmap) {
     final int bitmapSize = BitmapUtil.getSizeInBytes(bitmap);
     if (mCount >= mMaxCount || mSize + bitmapSize > mMaxSize) {
       return false;
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/nativecode/DalvikPurgeableDecoder.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/nativecode/DalvikPurgeableDecoder.java
index c3dd4c01d..6c99fb4d8 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/nativecode/DalvikPurgeableDecoder.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/nativecode/DalvikPurgeableDecoder.java
@@ -216,7 +216,7 @@ static void setColorSpace(BitmapFactory.Options options, @Nullable ColorSpace co
       bitmap.recycle();
       throw Throwables.propagate(e);
     }
-    if (!mUnpooledBitmapsCounter.isInBitmap(bitmap)) {
+    if (!mUnpooledBitmapsCounter.includeBitmap(bitmap)) {
       int bitmapSize = BitmapUtil.getSizeInBytes(bitmap);
       bitmap.recycle();
       String detailMessage = String.format(
diff --git a/imagepipeline/src/test/java/com/facebook/imagepipeline/memory/BitmapCounterTest.java b/imagepipeline/src/test/java/com/facebook/imagepipeline/memory/BitmapCounterTest.java
index 50e46829d..d925b43f6 100644
--- a/imagepipeline/src/test/java/com/facebook/imagepipeline/memory/BitmapCounterTest.java
+++ b/imagepipeline/src/test/java/com/facebook/imagepipeline/memory/BitmapCounterTest.java
@@ -32,9 +32,9 @@ public void setUp() {
   @Test
   public void testBasic() {
     assertState(0, 0);
-    assertTrue(mBitmapCounter.isInBitmap(bitmapForSize(1)));
+    assertTrue(mBitmapCounter.includeBitmap(bitmapForSize(1)));
     assertState(1, 1);
-    assertTrue(mBitmapCounter.isInBitmap(bitmapForSize(2)));
+    assertTrue(mBitmapCounter.includeBitmap(bitmapForSize(2)));
     assertState(2, 3);
     mBitmapCounter.decrease(bitmapForSize(1));
     assertState(1, 2);
@@ -42,43 +42,43 @@ public void testBasic() {
 
   @Test(expected = IllegalArgumentException.class)
   public void testDecreaseTooMuch() {
-    assertTrue(mBitmapCounter.isInBitmap(bitmapForSize(1)));
+    assertTrue(mBitmapCounter.includeBitmap(bitmapForSize(1)));
     mBitmapCounter.decrease(bitmapForSize(2));
   }
 
   @Test(expected = IllegalArgumentException.class)
   public void testDecreaseTooMany() {
-    assertTrue(mBitmapCounter.isInBitmap(bitmapForSize(2)));
+    assertTrue(mBitmapCounter.includeBitmap(bitmapForSize(2)));
     mBitmapCounter.decrease(bitmapForSize(1));
     mBitmapCounter.decrease(bitmapForSize(1));
   }
 
   @Test
   public void testMaxSize() {
-    assertTrue(mBitmapCounter.isInBitmap(bitmapForSize(MAX_SIZE)));
+    assertTrue(mBitmapCounter.includeBitmap(bitmapForSize(MAX_SIZE)));
     assertState(1, MAX_SIZE);
   }
 
   @Test
   public void testMaxCount() {
     for (int i = 0; i < MAX_COUNT; ++i) {
-      mBitmapCounter.isInBitmap(bitmapForSize(1));
+      mBitmapCounter.includeBitmap(bitmapForSize(1));
     }
     assertState(MAX_COUNT, MAX_COUNT);
   }
 
   @Test()
   public void increaseTooBigObject() {
-    assertFalse(mBitmapCounter.isInBitmap(bitmapForSize(MAX_SIZE + 1)));
+    assertFalse(mBitmapCounter.includeBitmap(bitmapForSize(MAX_SIZE + 1)));
     assertState(0, 0);
   }
 
   @Test()
   public void increaseTooManyObjects() {
     for (int i = 0; i < MAX_COUNT; ++i) {
-      mBitmapCounter.isInBitmap(bitmapForSize(1));
+      mBitmapCounter.includeBitmap(bitmapForSize(1));
     }
-    assertFalse(mBitmapCounter.isInBitmap(bitmapForSize(1)));
+    assertFalse(mBitmapCounter.includeBitmap(bitmapForSize(1)));
     assertState(MAX_COUNT, MAX_COUNT);
   }
 
diff --git a/imagepipeline/src/test/java/com/facebook/imagepipeline/platform/KitKatPurgeableDecoderTest.java b/imagepipeline/src/test/java/com/facebook/imagepipeline/platform/KitKatPurgeableDecoderTest.java
index 7a4f96a30..d036ca7e0 100644
--- a/imagepipeline/src/test/java/com/facebook/imagepipeline/platform/KitKatPurgeableDecoderTest.java
+++ b/imagepipeline/src/test/java/com/facebook/imagepipeline/platform/KitKatPurgeableDecoderTest.java
@@ -169,7 +169,7 @@ public void testDecodeJpeg_incomplete() {
   @Test(expected = TooManyBitmapsException.class)
   public void testHitBitmapLimit_static() {
     assumeNotNull(mKitKatPurgeableDecoder);
-    mBitmapCounter.isInBitmap(
+    mBitmapCounter.includeBitmap(
         MockBitmapFactory.createForSize(MAX_BITMAP_SIZE, DEFAULT_BITMAP_CONFIG));
     try {
       mKitKatPurgeableDecoder.decodeFromEncodedImage(mEncodedImage, DEFAULT_BITMAP_CONFIG, null);
