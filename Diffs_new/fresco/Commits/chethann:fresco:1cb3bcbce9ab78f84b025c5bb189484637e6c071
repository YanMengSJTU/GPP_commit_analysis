diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/BufferedDiskCache.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/BufferedDiskCache.java
index aa1bf721f..db5ead079 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/BufferedDiskCache.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/BufferedDiskCache.java
@@ -9,18 +9,6 @@
 
 package com.facebook.imagepipeline.cache;
 
-import com.facebook.binaryresource.BinaryResource;
-import com.facebook.cache.common.CacheKey;
-import com.facebook.cache.common.WriterCallback;
-import com.facebook.cache.disk.FileCache;
-import com.facebook.common.internal.Preconditions;
-import com.facebook.common.logging.FLog;
-import com.facebook.common.references.CloseableReference;
-import com.facebook.imagepipeline.image.EncodedImage;
-import com.facebook.imagepipeline.memory.PooledByteBuffer;
-import com.facebook.imagepipeline.memory.PooledByteBufferFactory;
-import com.facebook.imagepipeline.memory.PooledByteStreams;
-
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
@@ -29,6 +17,18 @@
 import java.util.concurrent.Executor;
 import java.util.concurrent.atomic.AtomicBoolean;
 
+import com.facebook.common.internal.Preconditions;
+import com.facebook.common.logging.FLog;
+import com.facebook.common.references.CloseableReference;
+import com.facebook.imagepipeline.image.EncodedImage;
+import com.facebook.imagepipeline.memory.PooledByteBuffer;
+import com.facebook.imagepipeline.memory.PooledByteBufferFactory;
+import com.facebook.imagepipeline.memory.PooledByteStreams;
+import com.facebook.binaryresource.BinaryResource;
+import com.facebook.cache.common.CacheKey;
+import com.facebook.cache.common.WriterCallback;
+import com.facebook.cache.disk.FileCache;
+
 import bolts.Task;
 
 /**
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipeline.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipeline.java
index efc671061..3bc9a4428 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipeline.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipeline.java
@@ -9,9 +9,15 @@
 
 package com.facebook.imagepipeline.core;
 
+import javax.annotation.concurrent.ThreadSafe;
+
+import java.lang.Exception;
+import java.util.Set;
+import java.util.concurrent.CancellationException;
+import java.util.concurrent.atomic.AtomicLong;
+
 import android.net.Uri;
 
-import com.android.internal.util.Predicate;
 import com.facebook.cache.common.CacheKey;
 import com.facebook.common.internal.Objects;
 import com.facebook.common.internal.Preconditions;
@@ -22,29 +28,26 @@
 import com.facebook.datasource.DataSources;
 import com.facebook.datasource.SimpleDataSource;
 import com.facebook.imagepipeline.cache.BufferedDiskCache;
-import com.facebook.imagepipeline.cache.CacheKeyFactory;
 import com.facebook.imagepipeline.cache.MemoryCache;
+import com.facebook.imagepipeline.cache.CacheKeyFactory;
 import com.facebook.imagepipeline.common.Priority;
 import com.facebook.imagepipeline.datasource.CloseableProducerToDataSourceAdapter;
 import com.facebook.imagepipeline.datasource.ProducerToDataSourceAdapter;
 import com.facebook.imagepipeline.image.CloseableImage;
-import com.facebook.imagepipeline.listener.ForwardingRequestListener;
-import com.facebook.imagepipeline.listener.RequestListener;
 import com.facebook.imagepipeline.memory.PooledByteBuffer;
 import com.facebook.imagepipeline.producers.Producer;
 import com.facebook.imagepipeline.producers.SettableProducerContext;
-import com.facebook.imagepipeline.producers.ThreadHandoffProducerQueue;
+import com.facebook.imagepipeline.listener.ForwardingRequestListener;
 import com.facebook.imagepipeline.request.ImageRequest;
-import com.facebook.imagepipeline.request.ImageRequestBuilder;
+import com.facebook.imagepipeline.listener.RequestListener;
 
-import java.util.Set;
-import java.util.concurrent.CancellationException;
-import java.util.concurrent.atomic.AtomicLong;
+import bolts.Continuation;
+import com.android.internal.util.Predicate;
 
-import javax.annotation.concurrent.ThreadSafe;
+import com.facebook.imagepipeline.request.ImageRequestBuilder;
 
-import bolts.Continuation;
 import bolts.Task;
+import com.facebook.imagepipeline.producers.ThreadHandoffProducerQueue;
 
 /**
  * The entry point for the image pipeline.
@@ -252,10 +255,10 @@ public String toString() {
       Producer<Void> producerSequence =
           mProducerSequenceFactory.getDecodedImagePrefetchProducerSequence(imageRequest);
       return submitPrefetchRequest(
-              producerSequence,
-              imageRequest,
-              ImageRequest.RequestLevel.FULL_FETCH,
-              callerContext);
+          producerSequence,
+          imageRequest,
+          ImageRequest.RequestLevel.FULL_FETCH,
+          callerContext);
     } catch (Exception exception) {
       return DataSources.immediateFailedDataSource(exception);
     }
@@ -276,10 +279,10 @@ public String toString() {
       Producer<Void> producerSequence =
           mProducerSequenceFactory.getEncodedImagePrefetchProducerSequence(imageRequest);
       return submitPrefetchRequest(
-              producerSequence,
-              imageRequest,
-              ImageRequest.RequestLevel.FULL_FETCH,
-              callerContext);
+          producerSequence,
+          imageRequest,
+          ImageRequest.RequestLevel.FULL_FETCH,
+          callerContext);
     } catch (Exception exception) {
       return DataSources.immediateFailedDataSource(exception);
     }
@@ -442,13 +445,13 @@ public boolean isInDiskCacheSync(final ImageRequest imageRequest) {
               }
             })
         .continueWith(
-                new Continuation<Boolean, Void>() {
-                    @Override
-                    public Void then(Task<Boolean> task) throws Exception {
-                        dataSource.setResult(!task.isCancelled() && !task.isFaulted() && task.getResult());
-                        return null;
-                    }
-                });
+            new Continuation<Boolean, Void>() {
+              @Override
+              public Void then(Task<Boolean> task) throws Exception {
+                dataSource.setResult(!task.isCancelled() && !task.isFaulted() && task.getResult());
+                return null;
+              }
+            });
     return dataSource;
   }
 
