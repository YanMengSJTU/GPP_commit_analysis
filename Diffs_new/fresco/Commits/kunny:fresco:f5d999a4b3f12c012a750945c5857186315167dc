diff --git a/imagepipeline-base/src/main/java/com/facebook/imagepipeline/common/ResizeOptions.java b/imagepipeline-base/src/main/java/com/facebook/imagepipeline/common/ResizeOptions.java
index 426624a6a..2ccfc0891 100644
--- a/imagepipeline-base/src/main/java/com/facebook/imagepipeline/common/ResizeOptions.java
+++ b/imagepipeline-base/src/main/java/com/facebook/imagepipeline/common/ResizeOptions.java
@@ -13,6 +13,7 @@
 
 import com.facebook.common.internal.Preconditions;
 import com.facebook.common.util.HashCodeUtil;
+import com.facebook.imageutils.BitmapUtil;
 
 /**
  * Options for resizing.
@@ -22,19 +23,44 @@
  */
 public class ResizeOptions {
 
+  public static final float DEFAULT_ROUNDUP_FRACTION = 2.0f/3;
+
   /* target width (in pixels) */
   public final int width;
 
   /* target height (in pixels) */
   public final int height;
 
+  /* max supported bitmap size (in pixels), defaults to BitmapUtil.MAX_BITMAP_SIZE */
+  public final float maxBitmapSize;
+
+  /* round-up fraction for resize process, defaults to DEFAULT_ROUNDUP_FRACTION */
+  public final float roundUpFraction;
+
   public ResizeOptions(
       int width,
       int height) {
+    this(width, height, BitmapUtil.MAX_BITMAP_SIZE);
+  }
+
+  public ResizeOptions(
+      int width,
+      int height,
+      float maxBitmapSize) {
+    this(width, height, maxBitmapSize, DEFAULT_ROUNDUP_FRACTION);
+  }
+
+  public ResizeOptions(
+      int width,
+      int height,
+      float maxBitmapSize,
+      float roundUpFraction) {
     Preconditions.checkArgument(width > 0);
     Preconditions.checkArgument(height > 0);
     this.width = width;
     this.height = height;
+    this.maxBitmapSize = maxBitmapSize;
+    this.roundUpFraction = roundUpFraction;
   }
 
   @Override
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ResizeAndRotateProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ResizeAndRotateProducer.java
index 7c3d14b2b..37d151634 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ResizeAndRotateProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ResizeAndRotateProducer.java
@@ -29,7 +29,6 @@
 import com.facebook.imagepipeline.memory.PooledByteBufferOutputStream;
 import com.facebook.imagepipeline.nativecode.JpegTranscoder;
 import com.facebook.imagepipeline.request.ImageRequest;
-import com.facebook.imageutils.BitmapUtil;
 
 /**
  * Resizes and rotates JPEG image according to the EXIF orientation data.
@@ -47,8 +46,6 @@
   @VisibleForTesting static final int MAX_JPEG_SCALE_NUMERATOR = JpegTranscoder.SCALE_DENOMINATOR;
   @VisibleForTesting static final int MIN_TRANSFORM_INTERVAL_MS = 100;
 
-  private static final float ROUNDUP_FRACTION = 2.0f/3;
-
   private final Executor mExecutor;
   private final PooledByteBufferFactory mPooledByteBufferFactory;
   private final Producer<EncodedImage> mInputProducer;
@@ -237,19 +234,21 @@ private static TriState shouldTransform(
     final float heightRatio = ((float) resizeOptions.height) / height;
     float ratio = Math.max(widthRatio, heightRatio);
 
-    // TODO: The limit is larger than this on newer devices. The problem is to get the real limit,
-    // you have to call Canvas.getMaximumBitmapWidth/Height on a real HW-accelerated Canvas.
-    if (width * ratio > BitmapUtil.MAX_BITMAP_SIZE) {
-      ratio = BitmapUtil.MAX_BITMAP_SIZE / width;
+    if (width * ratio > resizeOptions.maxBitmapSize) {
+      ratio = resizeOptions.maxBitmapSize / width;
     }
-    if (height * ratio > BitmapUtil.MAX_BITMAP_SIZE) {
-      ratio = BitmapUtil.MAX_BITMAP_SIZE / height;
+    if (height * ratio > resizeOptions.maxBitmapSize) {
+      ratio = resizeOptions.maxBitmapSize / height;
     }
     return ratio;
   }
 
   @VisibleForTesting static int roundNumerator(float maxRatio) {
-    return (int) (ROUNDUP_FRACTION + maxRatio * JpegTranscoder.SCALE_DENOMINATOR);
+    return roundNumerator(maxRatio, ResizeOptions.DEFAULT_ROUNDUP_FRACTION);
+  }
+
+  static int roundNumerator(float maxRatio, float roundUpFraction) {
+    return (int) (roundUpFraction + maxRatio * JpegTranscoder.SCALE_DENOMINATOR);
   }
 
   private static int getScaleNumerator(
@@ -268,7 +267,7 @@ private static int getScaleNumerator(
             encodedImage.getHeight();
 
     float ratio = determineResizeRatio(resizeOptions, widthAfterRotation, heightAfterRotation);
-    int numerator = roundNumerator(ratio);
+    int numerator = roundNumerator(ratio, resizeOptions.roundUpFraction);
     if (numerator > MAX_JPEG_SCALE_NUMERATOR) {
       return MAX_JPEG_SCALE_NUMERATOR;
     }
