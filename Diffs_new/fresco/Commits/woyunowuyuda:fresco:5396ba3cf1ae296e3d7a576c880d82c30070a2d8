diff --git a/drawee/src/main/java/com/facebook/drawee/drawable/ScalingUtils.java b/drawee/src/main/java/com/facebook/drawee/drawable/ScalingUtils.java
index e4c9ee42c..cc10024f5 100644
--- a/drawee/src/main/java/com/facebook/drawee/drawable/ScalingUtils.java
+++ b/drawee/src/main/java/com/facebook/drawee/drawable/ScalingUtils.java
@@ -89,6 +89,12 @@
      */
     ScaleType FIT_BOTTOM_START = ScaleTypeFitBottomStart.INSTANCE;
 
+    /**
+     * Scales the child so that it can be used in a parallax animation. When the wrapper View slide
+     * horizontally or vertically, the inner image can also parallax move.
+     */
+    ScaleType PARALLAX = ScaleTypeParallax.INSTANCE;
+
     /**
      * Gets transformation matrix based on the scale type.
      *
@@ -383,6 +389,45 @@ public String toString() {
     }
   }
 
+  private static class ScaleTypeParallax extends AbstractScaleType {
+
+    public static final ScaleType INSTANCE = new ScaleTypeParallax();
+
+    private float mParallaxFactor = 1.2f;
+
+    /**
+     * set the parallax factor to the Drawable.
+     * @param factor the parallax factor to config the the image's off-screen size
+     */
+    public void setParallaxFactor(float factor) {
+      mParallaxFactor = factor;
+    }
+
+    @Override
+    public void getTransformImpl(
+            Matrix outTransform,
+            Rect parentRect,
+            int childWidth,
+            int childHeight,
+            float focusX,
+            float focusY,
+            float scaleX,
+            float scaleY) {
+      float scale = Math.max(scaleX, scaleY) * mParallaxFactor;
+      float parallaxTotalX = parentRect.width() / scale - childWidth;
+      float parallaxTotalY = parentRect.height() / scale - childHeight;
+      float dx = focusX * parallaxTotalX;
+      float dy = focusY * parallaxTotalY;
+      outTransform.setScale(scale, scale);
+      outTransform.preTranslate((int) (dx + 0.5f), (int) (dy + 0.5f));
+    }
+
+    @Override
+    public String toString() {
+      return "parallax";
+    }
+  }
+
   private static class ScaleTypeFocusCrop extends AbstractScaleType {
 
     public static final ScaleType INSTANCE = new ScaleTypeFocusCrop();
diff --git a/drawee/src/main/java/com/facebook/drawee/view/SimpleDraweeView.java b/drawee/src/main/java/com/facebook/drawee/view/SimpleDraweeView.java
index ceb18827f..bf5d29867 100644
--- a/drawee/src/main/java/com/facebook/drawee/view/SimpleDraweeView.java
+++ b/drawee/src/main/java/com/facebook/drawee/view/SimpleDraweeView.java
@@ -208,4 +208,9 @@ public void setActualImageResource(@DrawableRes int resourceId, @Nullable Object
   public void setImageResource(int resId) {
     super.setImageResource(resId);
   }
+
+  @Override
+  public boolean performClick() {
+    return super.performClick();
+  }
 }
diff --git a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/common/SimpleScaleTypeAdapter.java b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/common/SimpleScaleTypeAdapter.java
index 23f96626a..9ad214e33 100644
--- a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/common/SimpleScaleTypeAdapter.java
+++ b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/common/SimpleScaleTypeAdapter.java
@@ -35,7 +35,8 @@
       new Entry(ScalingUtils.ScaleType.FIT_END, "fit_end", null),
       new Entry(ScalingUtils.ScaleType.FIT_XY, "fit_xy", null),
       new Entry(ScalingUtils.ScaleType.FOCUS_CROP, "focus_crop (0, 0)", new PointF(0, 0)),
-      new Entry(ScalingUtils.ScaleType.FOCUS_CROP, "focus_crop (1, 0.5)", new PointF(1, 0.5f))
+      new Entry(ScalingUtils.ScaleType.FOCUS_CROP, "focus_crop (1, 0.5)", new PointF(1, 0.5f)),
+      new Entry(ScalingUtils.ScaleType.PARALLAX, "parallax,touch image", new PointF(0.5f, 0.5f))
   };
 
   private static final Entry[] CUSTOM_TYPES = new Entry[]{
diff --git a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeScaleTypeFragment.java b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeScaleTypeFragment.java
index 967253685..a76a87065 100644
--- a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeScaleTypeFragment.java
+++ b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeScaleTypeFragment.java
@@ -16,10 +16,12 @@
 import android.os.Bundle;
 import android.support.annotation.Nullable;
 import android.view.LayoutInflater;
+import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
 import android.widget.Spinner;
+import com.facebook.drawee.drawable.ScalingUtils;
 import com.facebook.drawee.drawable.ScalingUtils.ScaleType;
 import com.facebook.drawee.generic.GenericDraweeHierarchy;
 import com.facebook.drawee.view.SimpleDraweeView;
@@ -37,6 +39,7 @@
   private SimpleDraweeView mDraweeTop2;
   private SimpleDraweeView mDraweeMain;
   private Spinner mSpinner;
+  private ParallaxTestListener mTextListener;
 
   @Nullable
   @Override
@@ -104,10 +107,55 @@ private void changeMainDraweeScaleType(ScaleType scaleType, @Nullable PointF foc
     final GenericDraweeHierarchy hierarchy = mDraweeMain.getHierarchy();
     hierarchy.setActualImageScaleType(scaleType);
     hierarchy.setActualImageFocusPoint(focusPoint != null ? focusPoint : new PointF(0.5f, 0.5f));
+    setupTouchEventIfNeeded(scaleType, hierarchy);
+  }
+
+  private void setupTouchEventIfNeeded(ScaleType scaleType, GenericDraweeHierarchy hierarchy) {
+    if (scaleType == ScaleType.PARALLAX) {
+      if (mTextListener == null) {
+        mTextListener = new ParallaxTestListener(hierarchy);
+      }
+      mDraweeMain.setOnTouchListener(mTextListener);
+    } else {
+      mDraweeMain.setOnTouchListener(null);
+    }
   }
 
   @Override
   public int getTitleId() {
     return R.string.drawee_scale_type_title;
   }
+
+  /**
+   * The helper class to show the parallax effect.
+   */
+  private static class ParallaxTestListener implements View.OnTouchListener {
+    private GenericDraweeHierarchy mHierarchy;
+    private PointF mFocus = new PointF(0.5f, 0.5f);
+    private int mViewWidth, mViewHeight;
+    private ParallaxTestListener(GenericDraweeHierarchy hierarchy) {
+      mHierarchy = hierarchy;
+    }
+
+    @Override
+    public boolean onTouch(View v, MotionEvent event) {
+      if (mViewHeight <= 0) {
+        mViewHeight = v.getHeight();
+      }
+      if (mViewWidth <= 0) {
+        mViewWidth = v.getWidth();
+      }
+      if (mViewWidth <= 0 || mViewHeight <= 0) {
+        return false;
+      }
+      float x = event.getX();
+      float y = event.getY();
+      float focusX = x / mViewWidth;
+      float focusY = y / mViewHeight;
+      mFocus.set(focusX, focusY);
+      mHierarchy.setActualImageFocusPoint(mFocus);
+      return true;
+    }
+
+  }
 }
