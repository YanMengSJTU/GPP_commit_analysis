diff --git a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeController.java b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeController.java
index 55486e429..6616a5812 100644
--- a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeController.java
+++ b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeController.java
@@ -23,6 +23,7 @@
 import com.facebook.drawee.backends.pipeline.info.ForwardingImageOriginListener;
 import com.facebook.drawee.backends.pipeline.info.ImageOrigin;
 import com.facebook.drawee.backends.pipeline.info.ImageOriginListener;
+import com.facebook.drawee.backends.pipeline.info.ImageOriginRequestListener;
 import com.facebook.drawee.components.DeferredReleaser;
 import com.facebook.drawee.controller.AbstractDraweeController;
 import com.facebook.drawee.debug.DebugControllerOverlayDrawable;
@@ -40,6 +41,10 @@
 import com.facebook.imagepipeline.image.CloseableStaticBitmap;
 import com.facebook.imagepipeline.image.EncodedImage;
 import com.facebook.imagepipeline.image.ImageInfo;
+import com.facebook.imagepipeline.listener.ForwardingRequestListener;
+import com.facebook.imagepipeline.listener.RequestListener;
+import java.util.HashSet;
+import java.util.Set;
 import java.util.concurrent.Executor;
 import javax.annotation.Nullable;
 import javax.annotation.concurrent.GuardedBy;
@@ -73,6 +78,10 @@
   // Drawable factories that are unique for a given image request
   private @Nullable ImmutableList<DrawableFactory> mCustomDrawableFactories;
 
+  @GuardedBy("this")
+  @Nullable
+  private Set<RequestListener> mRequestListeners;
+
   @GuardedBy("this")
   @Nullable
   private ImageOriginListener mImageOriginListener;
@@ -170,6 +179,20 @@ public void setCustomDrawableFactories(
     mCustomDrawableFactories = customDrawableFactories;
   }
 
+  public synchronized void addRequestListener(RequestListener requestListener) {
+    if (mRequestListeners == null) {
+      mRequestListeners = new HashSet<>();
+    }
+    mRequestListeners.add(requestListener);
+  }
+
+  public synchronized void removeRequestListener(RequestListener requestListener) {
+    if (mRequestListeners == null) {
+      return;
+    }
+    mRequestListeners.remove(requestListener);
+  }
+
   public void addImageOriginListener(@Nullable ImageOriginListener imageOriginListener) {
     synchronized (this) {
       if (mImageOriginListener != null) {
@@ -201,6 +224,22 @@ protected CacheKey getCacheKey() {
     return mCacheKey;
   }
 
+  @Nullable
+  public synchronized RequestListener getRequestListener() {
+    RequestListener imageOriginRequestListener = null;
+    if (mImageOriginListener != null) {
+      imageOriginRequestListener = new ImageOriginRequestListener(getId(), mImageOriginListener);
+    }
+    if (mRequestListeners != null) {
+      ForwardingRequestListener requestListener = new ForwardingRequestListener(mRequestListeners);
+      if (imageOriginRequestListener != null) {
+        requestListener.addRequestListener(imageOriginRequestListener);
+      }
+      return requestListener;
+    }
+    return imageOriginRequestListener;
+  }
+
   @Override
   protected DataSource<CloseableReference<CloseableImage>> getDataSource() {
     if (FLog.isLoggable(FLog.VERBOSE)) {
diff --git a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerBuilder.java b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerBuilder.java
index da1fce7ea..6b8f384ce 100644
--- a/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerBuilder.java
+++ b/drawee-backends/drawee-pipeline/src/main/java/com/facebook/drawee/backends/pipeline/PipelineDraweeControllerBuilder.java
@@ -15,7 +15,6 @@
 import com.facebook.common.references.CloseableReference;
 import com.facebook.datasource.DataSource;
 import com.facebook.drawee.backends.pipeline.info.ImageOriginListener;
-import com.facebook.drawee.backends.pipeline.info.ImageOriginRequestListener;
 import com.facebook.drawee.controller.AbstractDraweeControllerBuilder;
 import com.facebook.drawee.controller.ControllerListener;
 import com.facebook.drawee.interfaces.DraweeController;
@@ -149,15 +148,15 @@ private CacheKey getCacheKey() {
         imageRequest,
         callerContext,
         convertCacheLevelToRequestLevel(cacheLevel),
-        createRequestListener(controllerId));
+        getRequestListener(controller));
   }
 
   @Nullable
-  protected RequestListener createRequestListener(String controllerId) {
-    if (mImageOriginListener == null) {
-      return null;
+  protected RequestListener getRequestListener(final DraweeController controller) {
+    if (controller instanceof PipelineDraweeController) {
+      return ((PipelineDraweeController) controller).getRequestListener();
     }
-    return new ImageOriginRequestListener(controllerId, mImageOriginListener);
+    return null;
   }
 
   public static ImageRequest.RequestLevel convertCacheLevelToRequestLevel(
diff --git a/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java b/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java
index bb2252b96..ded169213 100644
--- a/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java
+++ b/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java
@@ -114,7 +114,7 @@ protected void initialize(String id, Object callerContext) {
     mJustConstructed = false;
   }
 
-  private void init(String id, Object callerContext) {
+  private synchronized void init(String id, Object callerContext) {
     mEventTracker.recordEvent(Event.ON_INIT_CONTROLLER);
     // cancel deferred release
     if (!mJustConstructed && mDeferredReleaser != null) {
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/listener/ForwardingRequestListener.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/listener/ForwardingRequestListener.java
index 26ba19322..8b685e77b 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/listener/ForwardingRequestListener.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/listener/ForwardingRequestListener.java
@@ -38,6 +38,10 @@ public ForwardingRequestListener(RequestListener... requestListeners) {
     }
   }
 
+  public void addRequestListener(RequestListener requestListener) {
+    mRequestListeners.add(requestListener);
+  }
+
   @Override
   public void onRequestStart(
       ImageRequest request, Object callerContext, String requestId, boolean isPrefetch) {
