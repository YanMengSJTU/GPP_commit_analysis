diff --git a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imageformat/pjpeg/ImageFormatProgressiveJpegFragment.java b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imageformat/pjpeg/ImageFormatProgressiveJpegFragment.java
index cc5a0cb94..56fd678cf 100644
--- a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imageformat/pjpeg/ImageFormatProgressiveJpegFragment.java
+++ b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imageformat/pjpeg/ImageFormatProgressiveJpegFragment.java
@@ -26,12 +26,14 @@
 import android.widget.Spinner;
 import android.widget.TextView;
 import com.facebook.drawee.backends.pipeline.Fresco;
+import com.facebook.drawee.backends.pipeline.info.ImagePerfDataListener;
 import com.facebook.drawee.controller.BaseControllerListener;
 import com.facebook.drawee.drawable.ProgressBarDrawable;
 import com.facebook.drawee.interfaces.DraweeController;
 import com.facebook.drawee.view.SimpleDraweeView;
 import com.facebook.fresco.samples.showcase.BaseShowcaseFragment;
 import com.facebook.fresco.samples.showcase.R;
+import com.facebook.fresco.samples.showcase.misc.LogcatImagePerfDataListener;
 import com.facebook.imagepipeline.image.ImageInfo;
 import com.facebook.imagepipeline.image.QualityInfo;
 import com.facebook.imagepipeline.request.ImageRequest;
@@ -63,6 +65,7 @@
   };
 
   private final DateFormat mDateFormat = new SimpleDateFormat("HH:mm:ss.SSS");
+  private final ImagePerfDataListener mImagePerfDataListener = new LogcatImagePerfDataListener();
 
   private SimpleDraweeView mSimpleDraweeView;
   private boolean mProgressiveRenderingEnabled;
@@ -125,40 +128,43 @@ private void setImageUri(Uri uri) {
     ImageRequest request = ImageRequestBuilder.newBuilderWithSource(uri)
         .setProgressiveRenderingEnabled(mProgressiveRenderingEnabled)
         .build();
-    DraweeController controller = Fresco.newDraweeControllerBuilder()
-        .setImageRequest(request)
-        .setRetainImageOnFailure(true)
-        .setControllerListener(new BaseControllerListener<ImageInfo>() {
-          @Override
-          public void onFinalImageSet(
-              String id,
-              @javax.annotation.Nullable ImageInfo imageInfo,
-              @javax.annotation.Nullable Animatable animatable) {
-            if (imageInfo != null) {
-              QualityInfo qualityInfo = imageInfo.getQualityInfo();
-              logScan(qualityInfo, true);
-            }
-          }
-
-          @Override
-          public void onIntermediateImageSet(
-              String id, @javax.annotation.Nullable ImageInfo imageInfo) {
-            if (imageInfo != null) {
-              QualityInfo qualityInfo = imageInfo.getQualityInfo();
-              logScan(qualityInfo, false);
-            }
-          }
-
-          @Override
-          public void onIntermediateImageFailed(String id, Throwable throwable) {
-            mDebugOutput.append(
-                String.format(
-                    Locale.getDefault(),
-                    "onIntermediateImageFailed, %s\n",
-                    throwable.getMessage()));
-          }
-        })
-        .build();
+    DraweeController controller =
+        Fresco.newDraweeControllerBuilder()
+            .setImageRequest(request)
+            .setRetainImageOnFailure(true)
+            .setPerfDataListener(mImagePerfDataListener)
+            .setControllerListener(
+                new BaseControllerListener<ImageInfo>() {
+                  @Override
+                  public void onFinalImageSet(
+                      String id,
+                      @javax.annotation.Nullable ImageInfo imageInfo,
+                      @javax.annotation.Nullable Animatable animatable) {
+                    if (imageInfo != null) {
+                      QualityInfo qualityInfo = imageInfo.getQualityInfo();
+                      logScan(qualityInfo, true);
+                    }
+                  }
+
+                  @Override
+                  public void onIntermediateImageSet(
+                      String id, @javax.annotation.Nullable ImageInfo imageInfo) {
+                    if (imageInfo != null) {
+                      QualityInfo qualityInfo = imageInfo.getQualityInfo();
+                      logScan(qualityInfo, false);
+                    }
+                  }
+
+                  @Override
+                  public void onIntermediateImageFailed(String id, Throwable throwable) {
+                    mDebugOutput.append(
+                        String.format(
+                            Locale.getDefault(),
+                            "onIntermediateImageFailed, %s\n",
+                            throwable.getMessage()));
+                  }
+                })
+            .build();
     mSimpleDraweeView.setController(controller);
   }
 
diff --git a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/misc/LogcatImagePerfDataListener.java b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/misc/LogcatImagePerfDataListener.java
new file mode 100644
index 000000000..77dd88176
--- /dev/null
+++ b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/misc/LogcatImagePerfDataListener.java
@@ -0,0 +1,34 @@
+/*
+ * This file provided by Facebook is for non-commercial testing and evaluation
+ * purposes only.  Facebook reserves all rights not expressly granted.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+package com.facebook.fresco.samples.showcase.misc;
+
+import android.util.Log;
+import com.facebook.drawee.backends.pipeline.info.ImagePerfData;
+import com.facebook.drawee.backends.pipeline.info.ImagePerfDataListener;
+import com.facebook.drawee.backends.pipeline.info.ImagePerfUtils;
+import java.util.Locale;
+
+public class LogcatImagePerfDataListener implements ImagePerfDataListener {
+
+  private static final String TAG = "ImagePerf";
+
+  @Override
+  public void onImagePerfDataUpdated(ImagePerfData imagePerfData, int imageLoadStatus) {
+    Log.d(
+        TAG,
+        String.format(
+            (Locale) null,
+            "status=%s, data=%s",
+            ImagePerfUtils.toString(imageLoadStatus),
+            imagePerfData.createDebugString()));
+  }
+}
