diff --git a/animated-base-support/gradle.properties b/animated-base-support/gradle.properties
index 914eee859..4c51caf4c 100644
--- a/animated-base-support/gradle.properties
+++ b/animated-base-support/gradle.properties
@@ -1,7 +1,7 @@
 systemProp.file.encoding=utf-8
 
 GROUP_ID=com.meiyou.fresco
-DEPLOY_VERSION=0.9.3-linhonghong-SNAPSHOT
+DEPLOY_VERSION=0.9.3
 
 deployToUrl=http\://192.168.10.230\:8081/nexus/content/repositories/snapshots/
 deployUserName=admin
diff --git a/animated-base-test/gradle.properties b/animated-base-test/gradle.properties
index 754115bea..984192f4c 100644
--- a/animated-base-test/gradle.properties
+++ b/animated-base-test/gradle.properties
@@ -1,7 +1,7 @@
 systemProp.file.encoding=utf-8
 
 GROUP_ID=com.meiyou.fresco
-DEPLOY_VERSION=0.0.8-linhonghong-SNAPSHOT
+DEPLOY_VERSION=0.9.3
 
 deployToUrl=http\://192.168.10.230\:8081/nexus/content/repositories/snapshots/
 deployUserName=admin
diff --git a/animated-base/gradle.properties b/animated-base/gradle.properties
index 83037a56d..caff49cb2 100644
--- a/animated-base/gradle.properties
+++ b/animated-base/gradle.properties
@@ -5,7 +5,7 @@ POM_ARTIFACT_ID=fresco-animated-base
 POM_PACKAGING=aar
 
 GROUP_ID=com.meiyou.fresco
-DEPLOY_VERSION=0.9.3-linhonghong-SNAPSHOT
+DEPLOY_VERSION=0.9.3
 
 deployToUrl=http\://192.168.10.230\:8081/nexus/content/repositories/snapshots/
 deployUserName=admin
diff --git a/animated-base/src/main/java/com/facebook/imagepipeline/animated/impl/AnimatedDrawableBackendImpl.java b/animated-base/src/main/java/com/facebook/imagepipeline/animated/impl/AnimatedDrawableBackendImpl.java
index 1a52db0e6..e602d7175 100644
--- a/animated-base/src/main/java/com/facebook/imagepipeline/animated/impl/AnimatedDrawableBackendImpl.java
+++ b/animated-base/src/main/java/com/facebook/imagepipeline/animated/impl/AnimatedDrawableBackendImpl.java
@@ -9,13 +9,10 @@
 
 package com.facebook.imagepipeline.animated.impl;
 
-import javax.annotation.concurrent.GuardedBy;
-
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.graphics.Color;
 import android.graphics.Rect;
-
 import com.facebook.common.internal.Preconditions;
 import com.facebook.common.references.CloseableReference;
 import com.facebook.imagepipeline.animated.base.AnimatedDrawableBackend;
@@ -24,6 +21,7 @@
 import com.facebook.imagepipeline.animated.base.AnimatedImageFrame;
 import com.facebook.imagepipeline.animated.base.AnimatedImageResult;
 import com.facebook.imagepipeline.animated.util.AnimatedDrawableUtil;
+import javax.annotation.concurrent.GuardedBy;
 
 /**
  * An {@link AnimatedDrawableBackend} that renders {@link AnimatedImage}.
@@ -39,14 +37,16 @@
   private final int[] mFrameTimestampsMs;
   private final int mDurationMs;
   private final AnimatedDrawableFrameInfo[] mFrameInfos;
+  private final Rect mRenderSrcRect = new Rect();
+  private final Rect mRenderDstRect = new Rect();
 
   @GuardedBy("this")
   private Bitmap mTempBitmap;
 
   public AnimatedDrawableBackendImpl(
-      AnimatedDrawableUtil animatedDrawableUtil,
-      AnimatedImageResult animatedImageResult,
-      Rect bounds) {
+          AnimatedDrawableUtil animatedDrawableUtil,
+          AnimatedImageResult animatedImageResult,
+          Rect bounds) {
     mAnimatedDrawableUtil = animatedDrawableUtil;
     mAnimatedImageResult = animatedImageResult;
     mAnimatedImage = animatedImageResult.getImage();
@@ -66,10 +66,10 @@ private static Rect getBoundsToUse(AnimatedImage image, Rect targetBounds) {
       return new Rect(0, 0, image.getWidth(), image.getHeight());
     }
     return new Rect(
-        0,
-        0,
-        Math.min(targetBounds.width(), image.getWidth()),
-        Math.min(targetBounds.height(), image.getHeight()));
+            0,
+            0,
+            Math.min(targetBounds.width(), image.getWidth()),
+            Math.min(targetBounds.height(), image.getHeight()));
   }
 
   @Override
@@ -146,9 +146,9 @@ public AnimatedDrawableBackend forNewBounds(Rect bounds) {
       return this;
     }
     return new AnimatedDrawableBackendImpl(
-        mAnimatedDrawableUtil,
-        mAnimatedImageResult,
-        bounds);
+            mAnimatedDrawableUtil,
+            mAnimatedImageResult,
+            bounds);
   }
 
   @Override
@@ -185,6 +185,19 @@ public void renderFrame(int frameNumber, Canvas canvas) {
     }
   }
 
+  private void prepareTempBitmapForThisSize(int width, int height) {
+    // Different gif frames can be different size,
+    // So we need to ensure we can fit next frame to temporary bitmap
+    if (mTempBitmap != null
+            && (mTempBitmap.getWidth() < width || mTempBitmap.getHeight() < height)) {
+      dropCaches();
+    }
+    if (mTempBitmap == null) {
+      mTempBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
+    }
+    mTempBitmap.eraseColor(Color.TRANSPARENT);
+  }
+
   private void renderImageSupportsScaling(Canvas canvas, AnimatedImageFrame frame) {
     double xScale = (double) mRenderedBounds.width() / (double) mAnimatedImage.getWidth();
     double yScale = (double) mRenderedBounds.height() / (double) mAnimatedImage.getHeight();
@@ -195,39 +208,36 @@ private void renderImageSupportsScaling(Canvas canvas, AnimatedImageFrame frame)
     int yOffset = (int) (frame.getYOffset() * yScale);
 
     synchronized (this) {
-      if (mTempBitmap == null) {
-        mTempBitmap = Bitmap.createBitmap(
-            mRenderedBounds.width(),
-            mRenderedBounds.height(),
-            Bitmap.Config.ARGB_8888);
-      }
-      mTempBitmap.eraseColor(Color.TRANSPARENT);
+      prepareTempBitmapForThisSize(mRenderedBounds.width(), mRenderedBounds.height());
       frame.renderFrame(frameWidth, frameHeight, mTempBitmap);
-      canvas.drawBitmap(mTempBitmap, xOffset, yOffset, null);
+
+      // Temporary bitmap can be bigger than frame, so we should draw only rendered area of bitmap
+      mRenderSrcRect.set(0, 0, mRenderedBounds.width(), mRenderedBounds.height());
+      mRenderDstRect.set(xOffset, yOffset, mRenderedBounds.width(), mRenderedBounds.height());
+
+      canvas.drawBitmap(mTempBitmap, mRenderSrcRect, mRenderDstRect, null);
     }
   }
 
-  public void renderImageDoesNotSupportScaling(Canvas canvas, AnimatedImageFrame frame) {
+  private void renderImageDoesNotSupportScaling(Canvas canvas, AnimatedImageFrame frame) {
     int frameWidth = frame.getWidth();
     int frameHeight = frame.getHeight();
     int xOffset = frame.getXOffset();
     int yOffset = frame.getYOffset();
     synchronized (this) {
-      if (mTempBitmap == null) {
-        mTempBitmap = Bitmap.createBitmap(
-            mAnimatedImage.getWidth(),
-            mAnimatedImage.getHeight(),
-            Bitmap.Config.ARGB_8888);
-      }
-      mTempBitmap.eraseColor(Color.TRANSPARENT);
+      prepareTempBitmapForThisSize(frameWidth, frameHeight);
       frame.renderFrame(frameWidth, frameHeight, mTempBitmap);
 
+      // Temporary bitmap can be bigger than frame, so we should draw only rendered area of bitmap
+      mRenderSrcRect.set(0, 0, frameWidth, frameHeight);
+      mRenderDstRect.set(0, 0, frameWidth, frameHeight);
+
       float xScale = (float) mRenderedBounds.width() / (float) mAnimatedImage.getWidth();
       float yScale = (float) mRenderedBounds.height() / (float) mAnimatedImage.getHeight();
       canvas.save();
       canvas.scale(xScale, yScale);
       canvas.translate(xOffset, yOffset);
-      canvas.drawBitmap(mTempBitmap, 0, 0, null);
+      canvas.drawBitmap(mTempBitmap, mRenderSrcRect, mRenderDstRect, null);
       canvas.restore();
     }
   }
diff --git a/animated-drawable/gradle.properties b/animated-drawable/gradle.properties
index e3c04bc8a..e518e673c 100644
--- a/animated-drawable/gradle.properties
+++ b/animated-drawable/gradle.properties
@@ -1,7 +1,7 @@
 systemProp.file.encoding=utf-8
 
 GROUP_ID=com.meiyou.fresco
-DEPLOY_VERSION=0.9.3-linhonghong-SNAPSHOT
+DEPLOY_VERSION=0.9.3
 
 deployToUrl=http\://192.168.10.230\:8081/nexus/content/repositories/snapshots/
 deployUserName=admin
diff --git a/animated-gif/gradle.properties b/animated-gif/gradle.properties
index 575143b4e..f480d569b 100644
--- a/animated-gif/gradle.properties
+++ b/animated-gif/gradle.properties
@@ -1,7 +1,7 @@
 systemProp.file.encoding=utf-8
 
 GROUP_ID=com.meiyou.fresco
-DEPLOY_VERSION=0.9.3-linhonghong-SNAPSHOT
+DEPLOY_VERSION=0.9.3
 
 deployToUrl=http\://192.168.10.230\:8081/nexus/content/repositories/snapshots/
 deployUserName=admin
diff --git a/animated-gif/src/main/jni/gifimage/gif.cpp b/animated-gif/src/main/jni/gifimage/gif.cpp
index ea2aab034..222d9392b 100644
--- a/animated-gif/src/main/jni/gifimage/gif.cpp
+++ b/animated-gif/src/main/jni/gifimage/gif.cpp
@@ -70,8 +70,9 @@ class GifWrapper {
       std::unique_ptr<GifFileType, decltype(&DGifCloseFile2)>&& pGifFile,
       std::shared_ptr<DataWrapper>& pData) :
           m_spGifFile(std::move(pGifFile)),
-          m_spData(pData) {
-    m_rasterBits.reserve(m_spGifFile->SWidth * m_spGifFile->SHeight);
+          m_spData(pData),
+          m_reservedBufferSize(m_spGifFile->SWidth * m_spGifFile->SHeight) {
+    m_rasterBits.reserve(m_reservedBufferSize);
   }
 
   virtual ~GifWrapper() {
@@ -110,6 +111,13 @@ class GifWrapper {
     return m_rasterBits.size();
   }
 
+  void reserveRasterBuffer(size_t bufferSize) {
+    if (m_reservedBufferSize < bufferSize) {
+      m_rasterBits.reserve(bufferSize);
+      m_reservedBufferSize = bufferSize;
+    }
+  }
+
   std::mutex& getRasterMutex() {
     return m_rasterMutex;
   }
@@ -125,6 +133,7 @@ class GifWrapper {
   std::vector<int> m_vectorFrameByteOffsets;
   std::vector<uint8_t> m_rasterBits;
   std::mutex m_rasterMutex;
+  size_t m_reservedBufferSize;
 };
 
 /**
@@ -278,14 +287,15 @@ static ColorMapObject* genDefColorMap(void) {
 ////////////////////////////////////////////////////////////////
 
 bool getGraphicsControlBlockForImage(SavedImage* pSavedImage, GraphicsControlBlock* pGcp) {
+  int resultCode = GIF_ERROR;
+  // If a GIF has multiple graphic control extension blocks, we use the last one
   for (int i = 0; i < pSavedImage->ExtensionBlockCount; i++) {
     ExtensionBlock* pExtensionBlock = &pSavedImage->ExtensionBlocks[i];
     if (pExtensionBlock->Function == GRAPHICS_EXT_FUNC_CODE) {
-      DGifExtensionToGCB(pExtensionBlock->ByteCount, pExtensionBlock->Bytes, pGcp);
-      return true;
+      resultCode = DGifExtensionToGCB(pExtensionBlock->ByteCount, pExtensionBlock->Bytes, pGcp);
     }
   }
-  return false;
+  return resultCode == GIF_OK;
 }
 
 /**
@@ -296,36 +306,44 @@ bool getGraphicsControlBlockForImage(SavedImage* pSavedImage, GraphicsControlBlo
  * written to the SavedImage structure. This is the key to how we avoid caching all the decoded
  * frame pixels in memory.
  *
- * @param pGifFile the gif data structure to read to and write to
- * @param pRasterBits the buffer to write the decoded frame pixels to. If null, the data is
- *    not actually decoded and instead just skipped.
- * @param doNotAddToSavedImages if set to true, will not add an additional SavedImage to
+ * @param pGifWrapper the gif wrapper containing the giflib struct and additional data
+ * @param decodeFrame if set to true, next frame will be decoded to pGifWrapper bits buffer,
+       otherwise it will only decode frame data and skip it
+ * @param addToSavedImages if set to true, will add an additional SavedImage to
  *     pGifFile->SavedImages
  * @return a gif error code
  */
 int readSingleFrame(
-    GifFileType* pGifFile,
-    uint8_t* pRasterBits,
-    bool doNotAddToSavedImages) {
+    GifWrapper* pGifWrapper,
+    bool decodeFramePixels,
+    bool addToSavedImages) {
+
+  GifFileType *pGifFile = pGifWrapper->get();
+
   if (DGifGetImageDesc(pGifFile) == GIF_ERROR) {
     return GIF_ERROR;
   }
   SavedImage* pSavedImage = &pGifFile->SavedImages[pGifFile->ImageCount - 1];
 
-  // Check size of image.
-  if (pSavedImage->ImageDesc.Width <= 0 &&
-      pSavedImage->ImageDesc.Height <= 0 &&
-      pSavedImage->ImageDesc.Width > (INT_MAX / pSavedImage->ImageDesc.Height)) {
+  // Check size of image. Note: Frames with 0 width or height should be allowed.
+  if (pSavedImage->ImageDesc.Width < 0 || pSavedImage->ImageDesc.Height < 0) {
     return GIF_ERROR;
   }
 
-  size_t imageSize = pSavedImage->ImageDesc.Width * pSavedImage->ImageDesc.Height;
-  if (imageSize > (unsigned)(pGifFile->SWidth * pGifFile->SHeight)) {
+  // Check for image size overflow.
+  if (pSavedImage->ImageDesc.Width > 0 &&
+      pSavedImage->ImageDesc.Height > 0 &&
+      pSavedImage->ImageDesc.Width > (INT_MAX / pSavedImage->ImageDesc.Height)) {
     return GIF_ERROR;
   }
 
-  if (pRasterBits != nullptr) {
-    // We're were asked to decode and write the results to pRasterBits.
+  if (decodeFramePixels) {
+    // Reserve larger raster bits buffer if needed
+    size_t imageSize = pSavedImage->ImageDesc.Width * pSavedImage->ImageDesc.Height;
+    pGifWrapper->reserveRasterBuffer(imageSize);
+
+    // Decode frame image and save it to temporary raster bits buffer
+    uint8_t* pRasterBits = pGifWrapper->getRasterBits();
     if (pSavedImage->ImageDesc.Interlace) {
       // The way an interlaced image should be read - offsets and jumps...
       int interlacedOffset[] = { 0, 4, 2, 1 };
@@ -369,7 +387,7 @@ int readSingleFrame(
     pGifFile->ExtensionBlockCount = 0;
   }
 
-  if (doNotAddToSavedImages) {
+  if (!addToSavedImages) {
     // giflib wasn't designed to work with decoding arbitrary frames on the fly. By default, it will
     // keep adding more images to the SavedImages array. To avoid that, we just decrement the image
     // count. It basically means the array remains larger by one GifFileType. We decrement it so
@@ -496,9 +514,10 @@ int modifiedDGifSlurp(GifWrapper* pGifWrapper) {
         pGifWrapper->addFrameByteOffset(pGifWrapper->getData()->getPosition());
 
         if (readSingleFrame(
-              pGifWrapper->get(),
-              nullptr,
-              false) == GIF_ERROR) {
+              pGifWrapper,
+              false, // Don't decode frame pixels
+              true  // Add to saved images
+              ) == GIF_ERROR) {
           isStop = true;
         }
         break;
@@ -1103,7 +1122,14 @@ void GifFrame_nativeRenderFrame(
   pGifWrapper->getData()->setPosition(byteOffset);
 
   // Now we kick off the decoding process.
-  readSingleFrame(pGifWrapper->get(), pGifWrapper->getRasterBits(), true);
+  int readRes = readSingleFrame(pGifWrapper,
+                                true, // Decode frame pixels
+                                false // Don't add frame to saved images
+                                );
+  if (readRes != GIF_OK) {
+    // Probably, broken canvas, and we can ignore it
+    return;
+  }
 
   // Get the right color table to use.
   ColorMapObject* pColorMap = spNativeContext->spGifWrapper->get()->SColorMap;
diff --git a/animated-webp/gradle.properties b/animated-webp/gradle.properties
index a4e6bcfac..eda24f7e2 100644
--- a/animated-webp/gradle.properties
+++ b/animated-webp/gradle.properties
@@ -2,7 +2,7 @@
 systemProp.file.encoding=utf-8
 
 GROUP_ID=com.meiyou.fresco
-DEPLOY_VERSION=0.9.3-linhonghong-SNAPSHOT
+DEPLOY_VERSION=0.9.3
 
 deployToUrl=http\://192.168.10.230\:8081/nexus/content/repositories/snapshots/
 deployUserName=admin
diff --git a/drawee-backends/drawee-pipeline/gradle.properties b/drawee-backends/drawee-pipeline/gradle.properties
index f7daa98f6..82beae96a 100644
--- a/drawee-backends/drawee-pipeline/gradle.properties
+++ b/drawee-backends/drawee-pipeline/gradle.properties
@@ -2,7 +2,7 @@
 systemProp.file.encoding=utf-8
 
 GROUP_ID=com.meiyou.fresco
-DEPLOY_VERSION=0.9.3-linhonghong-SNAPSHOT
+DEPLOY_VERSION=0.9.3
 
 deployToUrl=http\://192.168.10.230\:8081/nexus/content/repositories/snapshots/
 deployUserName=admin
diff --git a/drawee-backends/drawee-volley/gradle.properties b/drawee-backends/drawee-volley/gradle.properties
index 25d0d8939..0f9886893 100644
--- a/drawee-backends/drawee-volley/gradle.properties
+++ b/drawee-backends/drawee-volley/gradle.properties
@@ -1,7 +1,7 @@
 systemProp.file.encoding=utf-8
 
 GROUP_ID=com.meiyou.fresco
-DEPLOY_VERSION=0.0.8-linhonghong-SNAPSHOT
+DEPLOY_VERSION=0.9.3
 
 deployToUrl=http\://192.168.10.230\:8081/nexus/content/repositories/snapshots/
 deployUserName=admin
diff --git a/drawee-span/gradle.properties b/drawee-span/gradle.properties
index 56244cd63..13e7833a4 100644
--- a/drawee-span/gradle.properties
+++ b/drawee-span/gradle.properties
@@ -1,7 +1,7 @@
 systemProp.file.encoding=utf-8
 
 GROUP_ID=com.meiyou.fresco
-DEPLOY_VERSION=0.9.3-linhonghong-SNAPSHOT
+DEPLOY_VERSION=0.9.3
 
 deployToUrl=http\://192.168.10.230\:8081/nexus/content/repositories/snapshots/
 deployUserName=admin
diff --git a/drawee/gradle.properties b/drawee/gradle.properties
index 689681bad..ce3f0cd86 100644
--- a/drawee/gradle.properties
+++ b/drawee/gradle.properties
@@ -2,7 +2,7 @@
 systemProp.file.encoding=utf-8
 
 GROUP_ID=com.meiyou.fresco
-DEPLOY_VERSION=0.9.3-linhonghong-SNAPSHOT
+DEPLOY_VERSION=0.9.3
 
 deployToUrl=http\://192.168.10.230\:8081/nexus/content/repositories/snapshots/
 deployUserName=admin
diff --git a/fbcore/gradle.properties b/fbcore/gradle.properties
index fcda3b06f..069760c6f 100644
--- a/fbcore/gradle.properties
+++ b/fbcore/gradle.properties
@@ -2,7 +2,7 @@
 systemProp.file.encoding=utf-8
 
 GROUP_ID=com.meiyou.fresco
-DEPLOY_VERSION=0.9.3-linhonghong-SNAPSHOT
+DEPLOY_VERSION=0.9.3
 
 deployToUrl=http\://192.168.10.230\:8081/nexus/content/repositories/snapshots/
 deployUserName=admin
diff --git a/frescopainter/gradle.properties b/frescopainter/gradle.properties
index 08deb1112..3b8fc6dad 100644
--- a/frescopainter/gradle.properties
+++ b/frescopainter/gradle.properties
@@ -20,7 +20,7 @@ systemProp.file.encoding=utf-8
 
 POM_ARTIFACT_ID=fresco-frescopainter
 GROUP_ID=com.meiyou.fresco
-DEPLOY_VERSION=0.9.3-linhonghong-SNAPSHOT
+DEPLOY_VERSION=0.9.3
 
 deployToUrl=http\://192.168.10.230\:8081/nexus/content/repositories/snapshots/
 deployUserName=admin
diff --git a/frescopainter/src/main/java/com/meetyou/frescopainter/FrescoPainter.java b/frescopainter/src/main/java/com/meetyou/frescopainter/FrescoPainter.java
index b67565693..e9a2d6741 100644
--- a/frescopainter/src/main/java/com/meetyou/frescopainter/FrescoPainter.java
+++ b/frescopainter/src/main/java/com/meetyou/frescopainter/FrescoPainter.java
@@ -94,51 +94,53 @@ public void paint(IFrescoImageView draweeView, FrescoPainterPen pen){
     }
 
     @Override
-    public void loadImageCallBackWork(String url, PainterCallBack callBack) {
-      PainterUtils.loadImageCallBackWork(mContext, url,callBack);
+    public void loadImageCallBackWork(String url,PainterImageParams painterImageParams, PainterCallBack callBack) {
+      PainterUtils.loadImageCallBackWork(mContext, painterImageParams,url,callBack);
     }
 
     @Override
-    public void loadImageCallBackUi(String url, PainterCallBack callBack) {
-      PainterUtils.loadImageCallBackUi(mContext, url,callBack);
+    public void loadImageCallBackUi(String url, PainterImageParams painterImageParams,PainterCallBack callBack) {
+      PainterUtils.loadImageCallBackUi(mContext,painterImageParams, url,callBack);
     }
 
     @Override
-    public void loadImageCallBackWork(int res, PainterCallBack callBack) {
-      PainterUtils.loadImageCallBackWork(mContext,res,callBack);
+    public void loadImageCallBackWork(int res, PainterImageParams painterImageParams,PainterCallBack callBack) {
+      PainterUtils.loadImageCallBackWork(mContext,painterImageParams,res,callBack);
     }
 
     @Override
-    public void loadImageCallBackUi(int res, PainterCallBack callBack) {
-      PainterUtils.loadImageCallBackUi(mContext,res,callBack);
+    public void loadImageCallBackUi(int res,PainterImageParams painterImageParams, PainterCallBack callBack) {
+      PainterUtils.loadImageCallBackUi(mContext,painterImageParams,res,callBack);
     }
 
     @Override
     public void loadImageCallBackUi(
         String url,
+        PainterImageParams painterImageParams,
         ResizeOptions imageSize,
         PainterCallBack callBack) {
-      PainterUtils.loadImageCallBackUi(mContext,url,imageSize,callBack);
+      PainterUtils.loadImageCallBackUi(mContext,painterImageParams,url,imageSize,callBack);
     }
 
     @Override
     public void loadImageCallBackWork(
         String url,
+        PainterImageParams painterImageParams,
         ResizeOptions imageSize,
         PainterCallBack callBack) {
-      PainterUtils.loadImageCallBackWork(mContext,url,imageSize,callBack);
+      PainterUtils.loadImageCallBackWork(mContext,painterImageParams,url,imageSize,callBack);
     }
 
     @Override
     public void loadImageCallBackUi(
-        int res, ResizeOptions imageSize, PainterCallBack callBack) {
-      PainterUtils.loadImageCallBackUi(mContext,res,imageSize,callBack);
+        int res, PainterImageParams painterImageParams,ResizeOptions imageSize, PainterCallBack callBack) {
+      PainterUtils.loadImageCallBackUi(mContext,painterImageParams,res,imageSize,callBack);
     }
 
     @Override
     public void loadImageCallBackWork(
-        int res, ResizeOptions imageSize, PainterCallBack callBack) {
-      PainterUtils.loadImageCallBackWork(mContext,res,imageSize,callBack);
+        int res,PainterImageParams painterImageParams, ResizeOptions imageSize, PainterCallBack callBack) {
+      PainterUtils.loadImageCallBackWork(mContext,painterImageParams,res,imageSize,callBack);
     }
 
     @Override
diff --git a/frescopainter/src/main/java/com/meetyou/frescopainter/FrescoPainterPen.java b/frescopainter/src/main/java/com/meetyou/frescopainter/FrescoPainterPen.java
index 514510488..ba7addf10 100644
--- a/frescopainter/src/main/java/com/meetyou/frescopainter/FrescoPainterPen.java
+++ b/frescopainter/src/main/java/com/meetyou/frescopainter/FrescoPainterPen.java
@@ -37,7 +37,7 @@
     private boolean mAnim = true;
     private int mFade = 300;
     private boolean mProgressiveRenderingEnabled = false;
-
+    private boolean isOrigin=false;
     private int mLoadMode = PainterMode.FULL_LOAD;
 
     public FrescoPainterDraweeInterceptor getFrescoPainterDraweeInterceptor() {
@@ -366,4 +366,12 @@ public FrescoPainterPen setAnim(boolean anim){
         return this;
     }
 
+    public boolean isOrigin() {
+        return isOrigin;
+    }
+
+    public FrescoPainterPen setOrigin(boolean origin) {
+        isOrigin = origin;
+        return this;
+    }
 }
diff --git a/frescopainter/src/main/java/com/meetyou/frescopainter/FrescoWork.java b/frescopainter/src/main/java/com/meetyou/frescopainter/FrescoWork.java
index ebd3b51d2..f209f22bf 100644
--- a/frescopainter/src/main/java/com/meetyou/frescopainter/FrescoWork.java
+++ b/frescopainter/src/main/java/com/meetyou/frescopainter/FrescoWork.java
@@ -17,26 +17,26 @@
      * @param url
      * @param callBack
      */
-    public void loadImageCallBackWork(String url, PainterCallBack callBack);
+    public void loadImageCallBackWork(String url, PainterImageParams painterImageParams, PainterCallBack callBack);
 
     /**
      * 异步加载
      * @param url
      * @param callBack
      */
-    public void loadImageCallBackUi(String url, PainterCallBack callBack);
+    public void loadImageCallBackUi(String url, PainterImageParams painterImageParams, PainterCallBack callBack);
 
-    public void loadImageCallBackWork(int res, PainterCallBack callBack);
+    public void loadImageCallBackWork(int res, PainterImageParams painterImageParams, PainterCallBack callBack);
 
-    public void loadImageCallBackUi(int res, PainterCallBack callBack);
+    public void loadImageCallBackUi(int res, PainterImageParams painterImageParams, PainterCallBack callBack);
 
-    public void loadImageCallBackUi(final String url, final ResizeOptions imageSize, final PainterCallBack callBack);
+    public void loadImageCallBackUi(final String url, PainterImageParams painterImageParams, final ResizeOptions imageSize, final PainterCallBack callBack);
 
-    public void loadImageCallBackWork(final String url, final ResizeOptions imageSize, final PainterCallBack callBack);
+    public void loadImageCallBackWork(final String url, PainterImageParams painterImageParams, final ResizeOptions imageSize, final PainterCallBack callBack);
 
-    public void loadImageCallBackUi(final int res, final ResizeOptions imageSize, final PainterCallBack callBack);
+    public void loadImageCallBackUi(final int res, PainterImageParams painterImageParams, final ResizeOptions imageSize, final PainterCallBack callBack);
 
-    public void loadImageCallBackWork(final int res, final ResizeOptions imageSize, final PainterCallBack callBack);
+    public void loadImageCallBackWork(final int res, PainterImageParams painterImageParams, final ResizeOptions imageSize, final PainterCallBack callBack);
 
     /**
      * 缓存清除
diff --git a/frescopainter/src/main/java/com/meetyou/frescopainter/PainterFactory.java b/frescopainter/src/main/java/com/meetyou/frescopainter/PainterFactory.java
index 6f2e86852..e637418fd 100644
--- a/frescopainter/src/main/java/com/meetyou/frescopainter/PainterFactory.java
+++ b/frescopainter/src/main/java/com/meetyou/frescopainter/PainterFactory.java
@@ -31,6 +31,7 @@ public static ImageRequest buildImageRequestWithResource(FrescoPainterPen pen){
         imageRequestBuilder
 //                .setPostprocessor(fresco.getPostProcessor())
                 .setAutoRotateEnabled(pen.getAutoRotateEnabled())
+                .setOrigin(pen.isOrigin())
                 .setProgressiveRenderingEnabled(pen.getProgressiveRenderingEnabled())
                 .setLocalThumbnailPreviewsEnabled(true);
         if (pen.getWidth() > 0 && pen.getHeight() > 0) {
@@ -70,6 +71,7 @@ public static ImageRequest buildImageRequestWithSource(FrescoPainterPen pen, boo
         ImageRequestBuilder imageRequestBuilder = ImageRequestBuilder.newBuilderWithSource(uri)
 //                .setPostprocessor(fresco.getPostProcessor())
                 .setAutoRotateEnabled(pen.getAutoRotateEnabled())
+                .setOrigin(pen.isOrigin())
                 .setProgressiveRenderingEnabled(pen.getProgressiveRenderingEnabled())
                 .setLocalThumbnailPreviewsEnabled(true);
         if (pen.getWidth() > 0 && pen.getHeight() > 0) {
diff --git a/frescopainter/src/main/java/com/meetyou/frescopainter/PainterImageParams.java b/frescopainter/src/main/java/com/meetyou/frescopainter/PainterImageParams.java
new file mode 100644
index 000000000..c01debbc2
--- /dev/null
+++ b/frescopainter/src/main/java/com/meetyou/frescopainter/PainterImageParams.java
@@ -0,0 +1,19 @@
+package com.meetyou.frescopainter;
+
+/**
+ * Author: ice
+ * Date: 17/11/28 14:33.
+ */
+
+public class PainterImageParams {
+
+    private boolean isOrigin = false;
+
+    public boolean isOrigin() {
+        return isOrigin;
+    }
+
+    public void setOrigin(boolean origin) {
+        isOrigin = origin;
+    }
+}
diff --git a/frescopainter/src/main/java/com/meetyou/frescopainter/PainterUtils.java b/frescopainter/src/main/java/com/meetyou/frescopainter/PainterUtils.java
index cfe024f10..30a213029 100644
--- a/frescopainter/src/main/java/com/meetyou/frescopainter/PainterUtils.java
+++ b/frescopainter/src/main/java/com/meetyou/frescopainter/PainterUtils.java
@@ -58,7 +58,7 @@ public static Drawable getDrawable(Context context, int resId) {
         }
     }
 
-    private static void loadImage(Context context, final String url, final ImageRequest request, final PainterCallBack callBack, final
+    private static void loadImage(Context context,final String url, final ImageRequest request, final PainterCallBack callBack, final
         Executor executor){
 //        if(mBitmapCache.containsKey(request.getSourceUri()) && !mBitmapCache.get(request.getSourceUri()).isRecycled()){
 //            if(callBack != null) {
@@ -96,66 +96,72 @@ public void onCancellation(DataSource<CloseableReference<CloseableImage>> dataSo
 
                 @Override
                 public void onProgressUpdate(DataSource<CloseableReference<CloseableImage>> dataSource) {
-                    if (callBack != null && dataSource!=null) {
-                        callBack.onProgress(url, (int)(dataSource.getProgress()*100),100);
-                    }
+
                 }
             }, executor);
 //        }
     }
 
-    public static void loadImageCallBackWork(Context context, final int res, final ResizeOptions imageSize, final PainterCallBack callBack){
+    public static void loadImageCallBackWork(Context context, PainterImageParams painterImageParams,final int res, final ResizeOptions imageSize, final PainterCallBack callBack){
         ImageRequest request = ImageRequestBuilder.newBuilderWithResourceId(res)
             .setResizeOptions(imageSize)
+             .setOrigin(painterImageParams==null?false:painterImageParams.isOrigin())
             .build();
         loadImage(context,"", request,callBack,CallerThreadExecutor.getInstance());
     }
 
-    public static void loadImageCallBackWork(Context context, final String url, final ResizeOptions imageSize, final PainterCallBack callBack){
+    public static void loadImageCallBackWork(Context context, PainterImageParams painterImageParams, final String url, final ResizeOptions imageSize, final PainterCallBack callBack){
         ImageRequest request = ImageRequestBuilder.newBuilderWithSource(
             Uri.parse(url))
             .setResizeOptions(imageSize)
+                .setOrigin(painterImageParams==null?false:painterImageParams.isOrigin())
             .build();
         loadImage(context,url, request,callBack,CallerThreadExecutor.getInstance());
     }
 
-    public static void loadImageCallBackWork(Context context, final int res,final PainterCallBack callBack){
+    public static void loadImageCallBackWork(Context context, PainterImageParams painterImageParams, final int res,final PainterCallBack callBack){
         ImageRequest request = ImageRequestBuilder.newBuilderWithResourceId(res)
+                .setOrigin(painterImageParams==null?false:painterImageParams.isOrigin())
             .build();
         loadImage(context,"", request,callBack,CallerThreadExecutor.getInstance());
     }
 
-    public static void loadImageCallBackWork(Context context, final String url, final PainterCallBack callBack){
+    public static void loadImageCallBackWork(Context context, PainterImageParams painterImageParams, final String url, final PainterCallBack callBack){
         ImageRequest request = ImageRequestBuilder.newBuilderWithSource(
             Uri.parse(url))
+                .setOrigin(painterImageParams==null?false:painterImageParams.isOrigin())
             .build();
         loadImage(context,url, request,callBack,CallerThreadExecutor.getInstance());
     }
 
-    public static void loadImageCallBackUi(Context context, final int res, final ResizeOptions imageSize, final PainterCallBack callBack){
+    public static void loadImageCallBackUi(Context context, PainterImageParams painterImageParams, final int res, final ResizeOptions imageSize, final PainterCallBack callBack){
         ImageRequest request = ImageRequestBuilder.newBuilderWithResourceId(res)
             .setResizeOptions(imageSize)
+                .setOrigin(painterImageParams==null?false:painterImageParams.isOrigin())
             .build();
         loadImage(context,"", request,callBack,UiThreadImmediateExecutorService.getInstance());
     }
 
-    public static void loadImageCallBackUi(Context context, final String url, final ResizeOptions imageSize, final PainterCallBack callBack){
+    public static void loadImageCallBackUi(Context context, PainterImageParams painterImageParams, final String url, final ResizeOptions imageSize, final PainterCallBack callBack){
         ImageRequest request = ImageRequestBuilder.newBuilderWithSource(
             Uri.parse(url))
             .setResizeOptions(imageSize)
+                .setOrigin(painterImageParams==null?false:painterImageParams.isOrigin())
             .build();
         loadImage(context,url, request,callBack,UiThreadImmediateExecutorService.getInstance());
     }
 
-    public static void loadImageCallBackUi(Context context, final int res, final PainterCallBack callBack){
+    public static void loadImageCallBackUi(Context context, PainterImageParams painterImageParams, final int res, final PainterCallBack callBack){
         ImageRequest request = ImageRequestBuilder.newBuilderWithResourceId(res)
+                .setOrigin(painterImageParams==null?false:painterImageParams.isOrigin())
             .build();
         loadImage(context,"", request,callBack,UiThreadImmediateExecutorService.getInstance());
     }
 
-    public static void loadImageCallBackUi(Context context, final String url, final PainterCallBack callBack){
+    public static void loadImageCallBackUi(Context context, PainterImageParams painterImageParams, final String url, final PainterCallBack callBack){
         ImageRequest request = ImageRequestBuilder.newBuilderWithSource(
             Uri.parse(url))
+                .setOrigin(painterImageParams==null?false:painterImageParams.isOrigin())
             .build();
         loadImage(context,url, request,callBack,UiThreadImmediateExecutorService.getInstance());
     }
diff --git a/imagepipeline-backends/imagepipeline-okhttp/gradle.properties b/imagepipeline-backends/imagepipeline-okhttp/gradle.properties
index 7daa80d69..bc05c5e43 100644
--- a/imagepipeline-backends/imagepipeline-okhttp/gradle.properties
+++ b/imagepipeline-backends/imagepipeline-okhttp/gradle.properties
@@ -1,7 +1,7 @@
 systemProp.file.encoding=utf-8
 
 GROUP_ID=com.meiyou.fresco
-DEPLOY_VERSION=0.0.10-linhonghong-SNAPSHOT
+DEPLOY_VERSION=0.9.3
 
 deployToUrl=http\://192.168.10.230\:8081/nexus/content/repositories/snapshots/
 deployUserName=admin
diff --git a/imagepipeline-backends/imagepipeline-okhttp3/gradle.properties b/imagepipeline-backends/imagepipeline-okhttp3/gradle.properties
index ce923f868..1d7602f96 100644
--- a/imagepipeline-backends/imagepipeline-okhttp3/gradle.properties
+++ b/imagepipeline-backends/imagepipeline-okhttp3/gradle.properties
@@ -2,7 +2,7 @@
 systemProp.file.encoding=utf-8
 
 GROUP_ID=com.meiyou.fresco
-DEPLOY_VERSION=0.9.3-linhonghong-SNAPSHOT
+DEPLOY_VERSION=0.9.3
 
 deployToUrl=http\://192.168.10.230\:8081/nexus/content/repositories/snapshots/
 deployUserName=admin
diff --git a/imagepipeline-backends/imagepipeline-volley/gradle.properties b/imagepipeline-backends/imagepipeline-volley/gradle.properties
index 27ca35a9e..be4d83c74 100644
--- a/imagepipeline-backends/imagepipeline-volley/gradle.properties
+++ b/imagepipeline-backends/imagepipeline-volley/gradle.properties
@@ -1,7 +1,7 @@
 systemProp.file.encoding=utf-8
 
 GROUP_ID=com.meiyou.fresco
-DEPLOY_VERSION=0.0.10-linhonghong-SNAPSHOT
+DEPLOY_VERSION=0.9.3
 
 deployToUrl=http\://192.168.10.230\:8081/nexus/content/repositories/snapshots/
 deployUserName=admin
diff --git a/imagepipeline-base-test/gradle.properties b/imagepipeline-base-test/gradle.properties
index 515d19f34..dd1592745 100644
--- a/imagepipeline-base-test/gradle.properties
+++ b/imagepipeline-base-test/gradle.properties
@@ -1,7 +1,7 @@
 systemProp.file.encoding=utf-8
 
 GROUP_ID=com.meiyou.fresco
-DEPLOY_VERSION=0.0.29-linhonghong-SNAPSHOT
+DEPLOY_VERSION=0.9.3
 
 deployToUrl=http\://192.168.10.230\:8081/nexus/content/repositories/snapshots/
 deployUserName=admin
diff --git a/imagepipeline-base/gradle.properties b/imagepipeline-base/gradle.properties
index b29589421..a11cffdc5 100644
--- a/imagepipeline-base/gradle.properties
+++ b/imagepipeline-base/gradle.properties
@@ -1,7 +1,7 @@
 systemProp.file.encoding=utf-8
 
 GROUP_ID=com.meiyou.fresco
-DEPLOY_VERSION=0.9.3-linhonghong-SNAPSHOT
+DEPLOY_VERSION=0.9.3
 
 deployToUrl=http\://192.168.10.230\:8081/nexus/content/repositories/snapshots/
 deployUserName=admin
diff --git a/imagepipeline-test/gradle.properties b/imagepipeline-test/gradle.properties
index 8b5e1a296..8ccb44579 100644
--- a/imagepipeline-test/gradle.properties
+++ b/imagepipeline-test/gradle.properties
@@ -1,7 +1,7 @@
 systemProp.file.encoding=utf-8
 
 GROUP_ID=com.meiyou.fresco
-DEPLOY_VERSION=0.0.10-linhonghong-SNAPSHOT
+DEPLOY_VERSION=0.9.3
 
 deployToUrl=http\://192.168.10.230\:8081/nexus/content/repositories/snapshots/
 deployUserName=admin
diff --git a/imagepipeline/gradle.properties b/imagepipeline/gradle.properties
index 6dc4d759c..50c7582c7 100644
--- a/imagepipeline/gradle.properties
+++ b/imagepipeline/gradle.properties
@@ -2,7 +2,7 @@
 systemProp.file.encoding=utf-8
 
 GROUP_ID=com.meiyou.fresco
-DEPLOY_VERSION=0.9.3-linhonghong-SNAPSHOT
+DEPLOY_VERSION=0.9.3
 
 deployToUrl=http\://192.168.10.230\:8081/nexus/content/repositories/snapshots/
 deployUserName=admin
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DownsampleUtil.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DownsampleUtil.java
index 25f2fb003..a2c9ab71c 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DownsampleUtil.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DownsampleUtil.java
@@ -33,7 +33,7 @@ private DownsampleUtil() {}
    * @return
    */
   public static int determineSampleSize(ImageRequest imageRequest, EncodedImage encodedImage) {
-    if (!EncodedImage.isMetaDataAvailable(encodedImage)) {
+    if (!EncodedImage.isMetaDataAvailable(encodedImage) || imageRequest.isOrigin()) {
       return DEFAULT_SAMPLE_SIZE;
     }
     float ratio = determineDownsampleRatio(imageRequest, encodedImage);
@@ -49,8 +49,8 @@ public static int determineSampleSize(ImageRequest imageRequest, EncodedImage en
     int maxDimension = Math.max(encodedImage.getHeight(), encodedImage.getWidth());
     final ResizeOptions resizeOptions = imageRequest.getResizeOptions();
     final float maxBitmapSize = resizeOptions != null
-        ? resizeOptions.maxBitmapSize
-        : BitmapUtil.MAX_BITMAP_SIZE;
+            ? resizeOptions.maxBitmapSize
+            : BitmapUtil.MAX_BITMAP_SIZE;
     while (maxDimension / sampleSize > maxBitmapSize) {
       if (encodedImage.getImageFormat() == DefaultImageFormats.JPEG) {
         sampleSize *= 2;
@@ -63,11 +63,11 @@ public static int determineSampleSize(ImageRequest imageRequest, EncodedImage en
 
   @VisibleForTesting
   static float determineDownsampleRatio(
-      ImageRequest imageRequest, EncodedImage encodedImage) {
+          ImageRequest imageRequest, EncodedImage encodedImage) {
     Preconditions.checkArgument(EncodedImage.isMetaDataAvailable(encodedImage));
     final ResizeOptions resizeOptions = imageRequest.getResizeOptions();
     if (resizeOptions == null || resizeOptions.height <= 0 || resizeOptions.width <= 0
-        || encodedImage.getWidth() == 0 || encodedImage.getHeight() == 0) {
+            || encodedImage.getWidth() == 0 || encodedImage.getHeight() == 0) {
       return 1.0f;
     }
 
@@ -82,17 +82,17 @@ static float determineDownsampleRatio(
     final float heightRatio = ((float) resizeOptions.height) / heightAfterRotation;
     float ratio = Math.max(widthRatio, heightRatio);
     FLog.v(
-        "DownsampleUtil",
-        "Downsample - Specified size: %dx%d, image size: %dx%d " +
-            "ratio: %.1f x %.1f, ratio: %.3f for %s",
-        resizeOptions.width,
-        resizeOptions.height,
-        widthAfterRotation,
-        heightAfterRotation,
-        widthRatio,
-        heightRatio,
-        ratio,
-        imageRequest.getSourceUri().toString());
+            "DownsampleUtil",
+            "Downsample - Specified size: %dx%d, image size: %dx%d " +
+                    "ratio: %.1f x %.1f, ratio: %.3f for %s",
+            resizeOptions.width,
+            resizeOptions.height,
+            widthAfterRotation,
+            heightAfterRotation,
+            widthRatio,
+            heightRatio,
+            ratio,
+            imageRequest.getSourceUri().toString());
     return ratio;
   }
 
@@ -134,7 +134,7 @@ private static int getRotationAngle(ImageRequest imageRequest, EncodedImage enco
     }
     int rotationAngle = encodedImage.getRotationAngle();
     Preconditions.checkArgument(rotationAngle == 0 || rotationAngle == 90
-        || rotationAngle == 180 || rotationAngle == 270);
+            || rotationAngle == 180 || rotationAngle == 270);
     return rotationAngle;
   }
 
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java
index 227a79666..ed59ac714 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequest.java
@@ -72,6 +72,10 @@
   /** Request listener to use for this image request */
   private final @Nullable RequestListener mRequestListener;
 
+
+  /** isOrigin */
+  private boolean mIsOrigin;
+
   public static ImageRequest fromFile(@Nullable File file) {
     return (file == null) ? null : ImageRequest.fromUri(UriUtil.getUriForFile(file));
   }
@@ -96,7 +100,7 @@ protected ImageRequest(ImageRequestBuilder builder) {
 
     mResizeOptions = builder.getResizeOptions();
     mRotationOptions = builder.getRotationOptions() == null
-        ? RotationOptions.autoRotate() : builder.getRotationOptions();
+            ? RotationOptions.autoRotate() : builder.getRotationOptions();
 
     mRequestPriority = builder.getRequestPriority();
     mLowestPermittedRequestLevel = builder.getLowestPermittedRequestLevel();
@@ -105,6 +109,8 @@ protected ImageRequest(ImageRequestBuilder builder) {
     mPostprocessor = builder.getPostprocessor();
 
     mRequestListener = builder.getRequestListener();
+
+    mIsOrigin = builder.isOrigin();
   }
 
   public CacheChoice getCacheChoice() {
@@ -189,9 +195,9 @@ public boolean equals(Object o) {
     }
     ImageRequest request = (ImageRequest) o;
     return Objects.equal(mSourceUri, request.mSourceUri) &&
-        Objects.equal(mCacheChoice, request.mCacheChoice) &&
-        Objects.equal(mMediaVariations, request.mMediaVariations) &&
-        Objects.equal(mSourceFile, request.mSourceFile);
+            Objects.equal(mCacheChoice, request.mCacheChoice) &&
+            Objects.equal(mMediaVariations, request.mMediaVariations) &&
+            Objects.equal(mSourceFile, request.mSourceFile);
   }
 
   @Override
@@ -202,15 +208,19 @@ public int hashCode() {
   @Override
   public String toString() {
     return Objects.toStringHelper(this)
-        .add("uri", mSourceUri)
-        .add("cacheChoice", mCacheChoice)
-        .add("decodeOptions", mImageDecodeOptions)
-        .add("postprocessor", mPostprocessor)
-        .add("priority", mRequestPriority)
-        .add("resizeOptions", mResizeOptions)
-        .add("rotationOptions", mRotationOptions)
-        .add("mediaVariations", mMediaVariations)
-        .toString();
+            .add("uri", mSourceUri)
+            .add("cacheChoice", mCacheChoice)
+            .add("decodeOptions", mImageDecodeOptions)
+            .add("postprocessor", mPostprocessor)
+            .add("priority", mRequestPriority)
+            .add("resizeOptions", mResizeOptions)
+            .add("rotationOptions", mRotationOptions)
+            .add("mediaVariations", mMediaVariations)
+            .toString();
+  }
+
+  public boolean isOrigin() {
+    return mIsOrigin;
   }
 
   /**
@@ -256,4 +266,5 @@ public static RequestLevel getMax(RequestLevel requestLevel1, RequestLevel reque
       return requestLevel1.getValue() > requestLevel2.getValue() ? requestLevel1 : requestLevel2;
     }
   }
+
 }
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequestBuilder.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequestBuilder.java
index 51181e6e0..010c5ddfa 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequestBuilder.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/request/ImageRequestBuilder.java
@@ -37,13 +37,14 @@
   private ImageDecodeOptions mImageDecodeOptions = ImageDecodeOptions.defaults();
   private CacheChoice mCacheChoice = CacheChoice.DEFAULT;
   private boolean mProgressiveRenderingEnabled =
-      ImagePipelineConfig.getDefaultImageRequestConfig().isProgressiveRenderingEnabled();
+          ImagePipelineConfig.getDefaultImageRequestConfig().isProgressiveRenderingEnabled();
   private boolean mLocalThumbnailPreviewsEnabled = false;
   private Priority mRequestPriority = Priority.HIGH;
   private @Nullable Postprocessor mPostprocessor = null;
   private boolean mDiskCacheEnabled = true;
   private @Nullable RequestListener mRequestListener;
   private @Nullable MediaVariations mMediaVariations = null;
+  private boolean mIsOrigin = false;
 
   /**
    * Creates a new request builder instance. The setting will be done according to the source type.
@@ -81,17 +82,17 @@ public static ImageRequestBuilder newBuilderWithResourceId(int resId) {
    */
   public static ImageRequestBuilder fromRequest(ImageRequest imageRequest) {
     return ImageRequestBuilder.newBuilderWithSource(imageRequest.getSourceUri())
-        .setImageDecodeOptions(imageRequest.getImageDecodeOptions())
-        .setCacheChoice(imageRequest.getCacheChoice())
-        .setLocalThumbnailPreviewsEnabled(imageRequest.getLocalThumbnailPreviewsEnabled())
-        .setLowestPermittedRequestLevel(imageRequest.getLowestPermittedRequestLevel())
-        .setMediaVariations(imageRequest.getMediaVariations())
-        .setPostprocessor(imageRequest.getPostprocessor())
-        .setProgressiveRenderingEnabled(imageRequest.getProgressiveRenderingEnabled())
-        .setRequestPriority(imageRequest.getPriority())
-        .setResizeOptions(imageRequest.getResizeOptions())
-        .setRequestListener(imageRequest.getRequestListener())
-        .setRotationOptions(imageRequest.getRotationOptions());
+            .setImageDecodeOptions(imageRequest.getImageDecodeOptions())
+            .setCacheChoice(imageRequest.getCacheChoice())
+            .setLocalThumbnailPreviewsEnabled(imageRequest.getLocalThumbnailPreviewsEnabled())
+            .setLowestPermittedRequestLevel(imageRequest.getLowestPermittedRequestLevel())
+            .setMediaVariations(imageRequest.getMediaVariations())
+            .setPostprocessor(imageRequest.getPostprocessor())
+            .setProgressiveRenderingEnabled(imageRequest.getProgressiveRenderingEnabled())
+            .setRequestPriority(imageRequest.getPriority())
+            .setResizeOptions(imageRequest.getResizeOptions())
+            .setRequestListener(imageRequest.getRequestListener())
+            .setRotationOptions(imageRequest.getRotationOptions());
   }
 
   private ImageRequestBuilder() {
@@ -278,6 +279,15 @@ public boolean isDiskCacheEnabled() {
     return mDiskCacheEnabled && UriUtil.isNetworkUri(mSourceUri);
   }
 
+  public boolean isOrigin() {
+    return mIsOrigin;
+  }
+
+  public ImageRequestBuilder setOrigin(boolean origin) {
+    mIsOrigin = origin;
+    return this;
+  }
+
   /**
    * Set priority for the request.
    * @param requestPriority
diff --git a/mvn.gradle b/mvn.gradle
index 7edc0fbfc..0abb9fe38 100644
--- a/mvn.gradle
+++ b/mvn.gradle
@@ -17,7 +17,7 @@ uploadArchives {
     }else{
         depolyTypeUrl =deployToUrl
     }
-    
+    depolyTypeUrl= deployToUrl.replace("snapshots","releases")
     println "depolyTypeUrl " + depolyTypeUrl
 
     repositories.mavenDeployer {
diff --git a/static-webp/gradle.properties b/static-webp/gradle.properties
index 604a36cbc..fb8bfc7c3 100644
--- a/static-webp/gradle.properties
+++ b/static-webp/gradle.properties
@@ -1,7 +1,7 @@
 systemProp.file.encoding=utf-8
 
 GROUP_ID=com.meiyou.fresco
-DEPLOY_VERSION=0.9.3-linhonghong-SNAPSHOT
+DEPLOY_VERSION=0.9.3
 
 deployToUrl=http\://192.168.10.230\:8081/nexus/content/repositories/snapshots/
 deployUserName=admin
diff --git a/tools/stetho/gradle.properties b/tools/stetho/gradle.properties
index 250b9b7ab..a26f4f4d1 100644
--- a/tools/stetho/gradle.properties
+++ b/tools/stetho/gradle.properties
@@ -1,7 +1,7 @@
 systemProp.file.encoding=utf-8
 
 GROUP_ID=com.meiyou.fresco
-DEPLOY_VERSION=0.0.10-linhonghong-SNAPSHOT
+DEPLOY_VERSION=0.9.3
 
 deployToUrl=http\://192.168.10.230\:8081/nexus/content/repositories/snapshots/
 deployUserName=admin
