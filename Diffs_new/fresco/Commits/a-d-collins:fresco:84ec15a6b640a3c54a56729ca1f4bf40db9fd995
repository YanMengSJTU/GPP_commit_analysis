diff --git a/fbcore/src/main/java/com/facebook/common/memory/PooledByteBufferInputStream.java b/fbcore/src/main/java/com/facebook/common/memory/PooledByteBufferInputStream.java
index 98beefe88..4c1a1a76e 100644
--- a/fbcore/src/main/java/com/facebook/common/memory/PooledByteBufferInputStream.java
+++ b/fbcore/src/main/java/com/facebook/common/memory/PooledByteBufferInputStream.java
@@ -28,6 +28,10 @@
 
   @VisibleForTesting
   int mOffset; // current offset in the chunk
+
+  // TODO: determine better name for this
+  public static int byteOffset = -1;
+
   @VisibleForTesting
   int mMark; // position of 'mark' if any
 
@@ -39,7 +43,7 @@ public PooledByteBufferInputStream(PooledByteBuffer pooledByteBuffer) {
     super();
     Preconditions.checkArgument(!pooledByteBuffer.isClosed());
     mPooledByteBuffer = Preconditions.checkNotNull(pooledByteBuffer);
-    mOffset = 0;
+    mOffset = byteOffset != -1 ? byteOffset : 0;
     mMark = 0;
   }
 
diff --git a/imagepipeline-base/src/main/java/com/facebook/imageformat/DefaultImageFormatChecker.java b/imagepipeline-base/src/main/java/com/facebook/imageformat/DefaultImageFormatChecker.java
index 2e6cdd43d..69e512285 100644
--- a/imagepipeline-base/src/main/java/com/facebook/imageformat/DefaultImageFormatChecker.java
+++ b/imagepipeline-base/src/main/java/com/facebook/imageformat/DefaultImageFormatChecker.java
@@ -10,6 +10,7 @@
 
 import javax.annotation.Nullable;
 
+import java.io.IOException;
 import java.io.InputStream;
 
 import com.facebook.common.internal.Ints;
@@ -51,7 +52,8 @@ public int getHeaderSize() {
    */
   @Nullable
   @Override
-  public final ImageFormat determineFormat(byte[] headerBytes, int headerSize) {
+  public final ImageFormat determineFormat(byte[] headerBytes, int headerSize, InputStream is)
+      throws IOException {
     Preconditions.checkNotNull(headerBytes);
 
     if (WebpSupportStatus.isWebpHeader(headerBytes, 0, headerSize)) {
diff --git a/imagepipeline-base/src/main/java/com/facebook/imageformat/ImageFormat.java b/imagepipeline-base/src/main/java/com/facebook/imageformat/ImageFormat.java
index 76363ba4d..f9f16bfa0 100644
--- a/imagepipeline-base/src/main/java/com/facebook/imageformat/ImageFormat.java
+++ b/imagepipeline-base/src/main/java/com/facebook/imageformat/ImageFormat.java
@@ -11,6 +11,9 @@
 
 import javax.annotation.Nullable;
 
+import java.io.IOException;
+import java.io.InputStream;
+
 /**
  * Class representing all used image formats.
  */
@@ -32,7 +35,8 @@
      * @return the image format or null if unknown
      */
     @Nullable
-    ImageFormat determineFormat(byte[] headerBytes, int headerSize);
+    ImageFormat determineFormat(byte[] headerBytes, int headerSize, InputStream is)
+      throws IOException;
   }
 
   // Unknown image format
diff --git a/imagepipeline-base/src/main/java/com/facebook/imageformat/ImageFormatChecker.java b/imagepipeline-base/src/main/java/com/facebook/imageformat/ImageFormatChecker.java
index d114af0e3..a04d89f9e 100644
--- a/imagepipeline-base/src/main/java/com/facebook/imageformat/ImageFormatChecker.java
+++ b/imagepipeline-base/src/main/java/com/facebook/imageformat/ImageFormatChecker.java
@@ -52,13 +52,13 @@ public ImageFormat determineImageFormat(final InputStream is) throws IOException
 
     if (mCustomImageFormatCheckers != null) {
       for (ImageFormat.FormatChecker formatChecker : mCustomImageFormatCheckers) {
-        ImageFormat format = formatChecker.determineFormat(imageHeaderBytes, headerSize);
+        ImageFormat format = formatChecker.determineFormat(imageHeaderBytes, headerSize, is);
         if (format != null && format != ImageFormat.UNKNOWN) {
           return format;
         }
       }
     }
-    ImageFormat format = mDefaultFormatChecker.determineFormat(imageHeaderBytes, headerSize);
+    ImageFormat format = mDefaultFormatChecker.determineFormat(imageHeaderBytes, headerSize, is);
     if (format == null) {
       format = ImageFormat.UNKNOWN;
     }
diff --git a/imagepipeline-base/src/main/java/com/facebook/imageformat/ImageFormatCheckerUtils.java b/imagepipeline-base/src/main/java/com/facebook/imageformat/ImageFormatCheckerUtils.java
index f16ea2782..0e0c56094 100644
--- a/imagepipeline-base/src/main/java/com/facebook/imageformat/ImageFormatCheckerUtils.java
+++ b/imagepipeline-base/src/main/java/com/facebook/imageformat/ImageFormatCheckerUtils.java
@@ -59,5 +59,30 @@ public static boolean startsWithPattern(
     return true;
   }
 
+  /**
+   * Checks if byteArray interpreted as sequence of bytes contains the pattern.
+   * @param byteArray the byte array to be checked
+   * @param pattern the pattern to check
+   * @return index of beginning of pattern, if found; otherwise -1
+   */
+  public static int containsPattern(
+      final byte[] byteArray,
+      final byte[] pattern) {
+    Preconditions.checkNotNull(byteArray);
+    Preconditions.checkNotNull(pattern);
+    if (pattern.length > byteArray.length) {
+      return -1;
+    }
+
+    for (int i = 0; i < (byteArray.length - pattern.length); i++) {
+      if (byteArray[i] == pattern[i]) {
+        for (int j = 0; j < pattern.length; j++) {
+          if (byteArray[i + j] == pattern[j]) return i;
+        }
+      }
+    }
+    return -1;
+  }
+
   private ImageFormatCheckerUtils() {}
 }
diff --git a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imageformat/color/ColorImageExample.java b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imageformat/color/ColorImageExample.java
index 6973e605c..146a392fb 100644
--- a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imageformat/color/ColorImageExample.java
+++ b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imageformat/color/ColorImageExample.java
@@ -14,6 +14,7 @@
 import javax.annotation.Nullable;
 
 import java.io.IOException;
+import java.io.InputStream;
 
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
@@ -83,7 +84,8 @@ public int getHeaderSize() {
 
     @Nullable
     @Override
-    public ImageFormat determineFormat(byte[] headerBytes, int headerSize) {
+    public ImageFormat determineFormat(byte[] headerBytes, int headerSize, InputStream is)
+        throws IOException {
       if (headerSize < getHeaderSize()) {
         return null;
       }
diff --git a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imageformat/keyframes/KeyframesDecoderExample.java b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imageformat/keyframes/KeyframesDecoderExample.java
index 6ae5a7726..824e8f262 100644
--- a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imageformat/keyframes/KeyframesDecoderExample.java
+++ b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imageformat/keyframes/KeyframesDecoderExample.java
@@ -67,7 +67,8 @@ public int getHeaderSize() {
      */
     @Nullable
     @Override
-    public ImageFormat determineFormat(byte[] headerBytes, int headerSize) {
+    public ImageFormat determineFormat(byte[] headerBytes, int headerSize, InputStream is)
+        throws IOException {
       // JSON files must start with a opening curly brace
       if (!ImageFormatCheckerUtils.startsWithPattern(
           headerBytes,
diff --git a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imageformat/svg/SvgDecoderExample.java b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imageformat/svg/SvgDecoderExample.java
index 2f36be764..3caeb89e4 100644
--- a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imageformat/svg/SvgDecoderExample.java
+++ b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/imageformat/svg/SvgDecoderExample.java
@@ -13,10 +13,15 @@
 
 import javax.annotation.Nullable;
 
+import java.io.IOException;
+import java.io.InputStream;
+
 import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
 import android.graphics.drawable.PictureDrawable;
 
+import com.facebook.common.internal.ByteStreams;
+import com.facebook.common.memory.PooledByteBufferInputStream;
 import com.facebook.imagepipeline.drawable.DrawableFactory;
 import com.facebook.imageformat.ImageFormat;
 import com.facebook.imageformat.ImageFormatCheckerUtils;
@@ -50,13 +55,22 @@ public int getHeaderSize() {
 
     @Nullable
     @Override
-    public ImageFormat determineFormat(byte[] headerBytes, int headerSize) {
+    public ImageFormat determineFormat(byte[] headerBytes, int headerSize, InputStream is)
+        throws IOException {
       if (headerSize < getHeaderSize()) {
         return null;
       }
       if (ImageFormatCheckerUtils.startsWithPattern(headerBytes, HEADER)) {
         return SVG_FORMAT;
       }
+
+      // TODO: is passing the InputStream to this method the best way to achieve this result?
+      int index = ImageFormatCheckerUtils.containsPattern(ByteStreams.toByteArray(is), HEADER);
+      if (index != -1) {
+        PooledByteBufferInputStream.byteOffset = index;
+        return SVG_FORMAT;
+      }
+
       return null;
     }
   }
