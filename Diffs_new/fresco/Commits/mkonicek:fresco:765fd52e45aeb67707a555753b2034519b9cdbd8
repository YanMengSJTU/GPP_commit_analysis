diff --git a/drawee/src/main/java/com/facebook/drawee/generic/RoundingParams.java b/drawee/src/main/java/com/facebook/drawee/generic/RoundingParams.java
index b557eb15c..b4adda1e3 100644
--- a/drawee/src/main/java/com/facebook/drawee/generic/RoundingParams.java
+++ b/drawee/src/main/java/com/facebook/drawee/generic/RoundingParams.java
@@ -40,6 +40,9 @@
 
     /**
      * On Android versions >= 21 (Lollipop) uses the {@code View.setClipToOutline} method.
+     * This method only supports uniform rounded corners - all 4 corners have the same radius,
+     * or the image forms a circle. If you want each corner to have a different radius
+     * use one of the other rounding methods.
      */
     OUTLINE
   }
@@ -117,6 +120,7 @@ public RoundingParams setCornersRadii(float[] radii) {
 
   /**
    * Gets the rounded corners radii.
+   * The corners are ordered top-left, top-right, bottom-right, bottom-left.
    *
    * <p> For performance reasons the internal array is returned directly. Do not modify it directly,
    * but use one of the exposed corner radii setters instead.
diff --git a/drawee/src/main/java/com/facebook/drawee/view/GenericDraweeView.java b/drawee/src/main/java/com/facebook/drawee/view/GenericDraweeView.java
index dd965cd31..2ec2265f0 100644
--- a/drawee/src/main/java/com/facebook/drawee/view/GenericDraweeView.java
+++ b/drawee/src/main/java/com/facebook/drawee/view/GenericDraweeView.java
@@ -73,10 +73,11 @@ public void setRoundingParams(@Nullable RoundingParams roundingParams) {
     if (hasHierarchy()) {
       getHierarchy().setRoundingParams(roundingParams);
     }
-    if (Build.VERSION.SDK_INT >= 21) {
+    if (Build.VERSION.SDK_INT >= 21 &&
+        roundingParams.getRoundingMethod() == RoundingParams.RoundingMethod.OUTLINE) {
       if (roundingParams != null) {
         this.setClipToOutline(true);
-        this.setOutlineProvider(getRoundedClipOutlineProvider());
+        this.setOutlineProvider(getClipOutlineProvider());
       } else {
         this.setClipToOutline(false);
         this.setOutlineProvider(null);
@@ -97,17 +98,18 @@ public RoundingParams getRoundingParams() {
   }
 
   /**
-   * Cached return value of {@link #getRoundedClipOutlineProvider}.
+   * Cached return value of {@link #getClipOutlineProvider}.
    */
-  private static ViewOutlineProvider mRoundedClipOutlineProvider;
+  private static ViewOutlineProvider mClipOutlineProvider;
 
   /**
    * Creates an outline used for clipping the image so that it has rounded corners.
+   * Used only when the rounding method is RoundingMethod.OUTLINE.
    */
   @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
-  private static ViewOutlineProvider getRoundedClipOutlineProvider() {
-    if (mRoundedClipOutlineProvider == null) {
-      mRoundedClipOutlineProvider = new ViewOutlineProvider() {
+  private static ViewOutlineProvider getClipOutlineProvider() {
+    if (mClipOutlineProvider == null) {
+      mClipOutlineProvider = new ViewOutlineProvider() {
         @Override
         public void getOutline(View view, Outline outline) {
           if (!(view instanceof GenericDraweeView)) {
@@ -127,12 +129,21 @@ public void getOutline(View view, Outline outline) {
               outline.setOval(0, t, w, t + w);
             }
           } else {
-            // TODO radius
-            outline.setRoundRect(0, 0, view.getWidth(), view.getHeight(), 16);
+            float[] cornerRadii = roundingParams.getCornersRadii();
+            if (cornerRadii != null) {
+              // The cornerRadii can specify custom radius for each corner. However,
+              // the outline API only supports ovals and rounded rectangles (each corner
+              // has the same radius). When RoundingMethod.OUTLINE is used we simply use
+              // the x radius of the first corner.
+              float topLeftCornerXRadius = cornerRadii[0];
+              if (topLeftCornerXRadius > 0) {
+                outline.setRoundRect(0, 0, view.getWidth(), view.getHeight(), topLeftCornerXRadius);
+              }
+            }
           }
         }
       };
     }
-    return mRoundedClipOutlineProvider;
+    return mClipOutlineProvider;
   }
 }
