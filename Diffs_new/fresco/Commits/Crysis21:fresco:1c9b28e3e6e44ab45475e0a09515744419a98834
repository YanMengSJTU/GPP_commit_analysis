diff --git a/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java b/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java
index f7ac8fb39..70c601c45 100644
--- a/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java
+++ b/drawee/src/main/java/com/facebook/drawee/controller/AbstractDraweeController.java
@@ -7,11 +7,10 @@
 
 package com.facebook.drawee.controller;
 
-import static com.facebook.drawee.components.DraweeEventTracker.Event;
-
 import android.graphics.drawable.Animatable;
 import android.graphics.drawable.Drawable;
 import android.view.MotionEvent;
+
 import com.facebook.common.internal.Objects;
 import com.facebook.common.internal.Preconditions;
 import com.facebook.common.logging.FLog;
@@ -27,10 +26,14 @@
 import com.facebook.drawee.interfaces.SettableDraweeHierarchy;
 import com.facebook.imagepipeline.systrace.FrescoSystrace;
 import com.facebook.infer.annotation.ReturnsOwnership;
+
 import java.util.concurrent.Executor;
+
 import javax.annotation.Nullable;
 import javax.annotation.concurrent.NotThreadSafe;
 
+import static com.facebook.drawee.components.DraweeEventTracker.Event;
+
 /**
  * Abstract Drawee controller that implements common functionality
  * regardless of the backend used to fetch the image.
@@ -443,7 +446,7 @@ protected void submitRequest() {
       mEventTracker.recordEvent(Event.ON_SUBMIT_CACHE_HIT);
       getControllerListener().onSubmit(mId, mCallerContext);
       onImageLoadedFromCacheImmediately(mId, closeableImage);
-      onNewResultInternal(mId, mDataSource, closeableImage, 1.0f, true, true);
+      onNewResultInternal(mId, mDataSource, closeableImage, 1.0f, true, true, true);
       FrescoSystrace.endSection();
       return;
     }
@@ -470,10 +473,11 @@ public void onNewResultImpl(DataSource<T> dataSource) {
             // isFinished must be obtained before image, otherwise we might set intermediate result
             // as final image.
             boolean isFinished = dataSource.isFinished();
+            boolean isReadyToPlay = dataSource.isReadyToPlay();
             float progress = dataSource.getProgress();
             T image = dataSource.getResult();
             if (image != null) {
-              onNewResultInternal(id, dataSource, image, progress, isFinished, wasImmediate);
+              onNewResultInternal(id, dataSource, image, progress, isFinished, wasImmediate, isReadyToPlay);
             } else if (isFinished) {
               onFailureInternal(id, dataSource, new NullPointerException(), /* isFinished */ true);
             }
@@ -499,7 +503,8 @@ private void onNewResultInternal(
       @Nullable T image,
       float progress,
       boolean isFinished,
-      boolean wasImmediate) {
+      boolean wasImmediate,
+      boolean isReadyToPlay) {
     try {
       FrescoSystrace.beginSection("AbstractDraweeController#onNewResultInternal");
       // ignore late callbacks (data source that returned the new result is not the one we expected)
@@ -532,7 +537,10 @@ private void onNewResultInternal(
           mDataSource = null;
           mSettableDraweeHierarchy.setImage(drawable, 1f, wasImmediate);
           getControllerListener().onFinalImageSet(id, getImageInfo(image), getAnimatable());
-          // IMPORTANT: do not execute any instance-specific code after this point
+        } else if (isReadyToPlay) {
+          logMessageAndImage("set_temporary_result @ onNewResult", image);
+          mSettableDraweeHierarchy.setImage(drawable, 1f, wasImmediate);
+          getControllerListener().onFinalImageSet(id, getImageInfo(image), getAnimatable());
         } else {
           logMessageAndImage("set_intermediate_result @ onNewResult", image);
           mSettableDraweeHierarchy.setImage(drawable, progress, wasImmediate);
diff --git a/fbcore/src/main/java/com/facebook/datasource/AbstractDataSource.java b/fbcore/src/main/java/com/facebook/datasource/AbstractDataSource.java
index dc4c41390..9db190ea8 100644
--- a/fbcore/src/main/java/com/facebook/datasource/AbstractDataSource.java
+++ b/fbcore/src/main/java/com/facebook/datasource/AbstractDataSource.java
@@ -319,4 +319,9 @@ public void run() {
           });
     }
   }
+
+  @Override
+  public boolean isReadyToPlay() {
+    return false;
+  }
 }
diff --git a/fbcore/src/main/java/com/facebook/datasource/DataSource.java b/fbcore/src/main/java/com/facebook/datasource/DataSource.java
index 266d04bf1..2864a380e 100644
--- a/fbcore/src/main/java/com/facebook/datasource/DataSource.java
+++ b/fbcore/src/main/java/com/facebook/datasource/DataSource.java
@@ -49,6 +49,13 @@
    */
   boolean hasResult();
 
+  /**
+   *
+   * @return true if any resources poured in the datasource should be sent to controllers. Usefull
+   * with a RetainingDataSource to loaded resources are displayed correctly.
+   */
+  boolean isReadyToPlay();
+
   /**
    * @return true if request is finished, false otherwise
    */
diff --git a/fbcore/src/main/java/com/facebook/datasource/RetainingDataSourceSupplier.java b/fbcore/src/main/java/com/facebook/datasource/RetainingDataSourceSupplier.java
index 229872d96..188ec9d6f 100644
--- a/fbcore/src/main/java/com/facebook/datasource/RetainingDataSourceSupplier.java
+++ b/fbcore/src/main/java/com/facebook/datasource/RetainingDataSourceSupplier.java
@@ -139,5 +139,10 @@ public void onProgressUpdate(DataSource<T> dataSource) {
         RetainingDataSource.this.onDatasourceProgress(dataSource);
       }
     }
+
+    @Override
+    public boolean isReadyToPlay() {
+      return true;
+    }
   }
 }
diff --git a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/RetainingDataSourceSupplierFragment.java b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/RetainingDataSourceSupplierFragment.java
index 281f7b8e8..3fda5a451 100644
--- a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/RetainingDataSourceSupplierFragment.java
+++ b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/RetainingDataSourceSupplierFragment.java
@@ -11,21 +11,27 @@
  */
 package com.facebook.fresco.samples.showcase.drawee;
 
+import android.graphics.drawable.Animatable;
 import android.net.Uri;
 import android.os.Bundle;
 import android.support.annotation.Nullable;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
+
 import com.facebook.common.references.CloseableReference;
 import com.facebook.datasource.RetainingDataSourceSupplier;
 import com.facebook.drawee.backends.pipeline.Fresco;
+import com.facebook.drawee.controller.BaseControllerListener;
+import com.facebook.drawee.controller.ControllerListener;
 import com.facebook.drawee.view.SimpleDraweeView;
 import com.facebook.fresco.samples.showcase.BaseShowcaseFragment;
 import com.facebook.fresco.samples.showcase.R;
 import com.facebook.fresco.samples.showcase.misc.ImageUriProvider;
 import com.facebook.imagepipeline.image.CloseableImage;
+import com.facebook.imagepipeline.image.ImageInfo;
 import com.facebook.imagepipeline.request.ImageRequest;
+
 import java.util.List;
 
 public class RetainingDataSourceSupplierFragment extends BaseShowcaseFragment {
@@ -33,12 +39,24 @@
   private List<Uri> mSampleUris;
   private int mUriIndex = 0;
 
+  private ControllerListener controllerListener = new BaseControllerListener<ImageInfo>() {
+    @Override
+    public void onFinalImageSet(
+            String id,
+            @Nullable ImageInfo imageInfo,
+            @Nullable Animatable anim) {
+      if (anim != null) {
+        // app-specific logic to enable animation starting
+        anim.start();
+      }
+    }
+  };
+
   @Override
   public void onCreate(@Nullable Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
 
-    mSampleUris =
-        ImageUriProvider.getInstance(getContext()).getSampleUris(ImageUriProvider.ImageSize.M);
+    mSampleUris = ImageUriProvider.getInstance(getContext()).getSampleGifUris();
   }
 
   @Nullable
@@ -54,7 +72,10 @@ public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
     final RetainingDataSourceSupplier<CloseableReference<CloseableImage>> retainingSupplier =
         new RetainingDataSourceSupplier<>();
     simpleDraweeView.setController(
-        Fresco.newDraweeControllerBuilder().setDataSourceSupplier(retainingSupplier).build());
+        Fresco.newDraweeControllerBuilder()
+                .setDataSourceSupplier(retainingSupplier)
+                .setControllerListener(controllerListener)
+                .build());
     replaceImage(retainingSupplier);
     simpleDraweeView.setOnClickListener(
         new View.OnClickListener() {
diff --git a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/misc/ImageUriProvider.java b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/misc/ImageUriProvider.java
index 5b621ef21..9a69a1dc5 100644
--- a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/misc/ImageUriProvider.java
+++ b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/misc/ImageUriProvider.java
@@ -146,6 +146,13 @@
   private static final String SAMPLE_URI_WEBP_ANIMATED =
       "https://www.gstatic.com/webp/animated/1.webp";
 
+  private static final String[] SAMPLE_URIS_GIFS =
+          new String [] {
+            "https://media2.giphy.com/media/3oge84qhopFbFFkwec/giphy.gif",
+            "https://media3.giphy.com/media/uegrGBitPHtKM/giphy.gif",
+            "https://media0.giphy.com/media/SWd9mTHEMIxQ4/giphy.gif"
+          };
+
   private static ImageUriProvider sInstance;
 
   private final SharedPreferences mSharedPreferences;
@@ -279,6 +286,14 @@ public String getUriOverride() {
     return data;
   }
 
+  public List<Uri> getSampleGifUris(){
+    ArrayList<Uri> uris = new ArrayList<>();
+    for (String uri : SAMPLE_URIS_GIFS) {
+      uris.add(Uri.parse(uri));
+    }
+    return uris;
+  }
+
   private Uri applyOverrideSettings(
       String uriString,
       UriModification urlModification) {
