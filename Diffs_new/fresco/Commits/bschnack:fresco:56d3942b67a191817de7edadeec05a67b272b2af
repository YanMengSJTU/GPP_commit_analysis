diff --git a/imagepipeline-backends/imagepipeline-okhttp3/src/main/java/com/facebook/imagepipeline/backends/okhttp3/OkHttpNetworkFetcher.java b/imagepipeline-backends/imagepipeline-okhttp3/src/main/java/com/facebook/imagepipeline/backends/okhttp3/OkHttpNetworkFetcher.java
index 35a3fb933..16803b138 100644
--- a/imagepipeline-backends/imagepipeline-okhttp3/src/main/java/com/facebook/imagepipeline/backends/okhttp3/OkHttpNetworkFetcher.java
+++ b/imagepipeline-backends/imagepipeline-okhttp3/src/main/java/com/facebook/imagepipeline/backends/okhttp3/OkHttpNetworkFetcher.java
@@ -39,6 +39,7 @@
     BaseNetworkFetcher<OkHttpNetworkFetcher.OkHttpNetworkFetchState> {
 
   public static class OkHttpNetworkFetchState extends FetchState {
+
     public long submitTime;
     public long responseTime;
     public long fetchCompleteTime;
@@ -137,7 +138,8 @@ public void onCancellationRequested() {
               call.cancel();
             } else {
               mCancellationExecutor.execute(new Runnable() {
-                @Override public void run() {
+                @Override
+                public void run() {
                   call.cancel();
                 }
               });
@@ -162,7 +164,9 @@ public void onResponse(Call call, Response response) throws IOException {
 
               BytesRange responseRange =
                   BytesRange.fromContentRangeHeader(response.header("Content-Range"));
-              if (responseRange != null) {
+              if (responseRange != null &&
+                  !(responseRange.from == 0 && responseRange.to == BytesRange.TO_END_OF_CONTENT)) {
+                // Only treat as a partial image if the range is not all of the content
                 fetchState.setResponseBytesRange(responseRange);
                 fetchState.setOnNewResultStatusFlags(Consumer.IS_PARTIAL_RESULT);
               }
