diff --git a/animated-base/src/main/java/com/facebook/imagepipeline/animated/factory/AnimatedImageFactoryImpl.java b/animated-base/src/main/java/com/facebook/imagepipeline/animated/factory/AnimatedImageFactoryImpl.java
index ead981b00..40d5b2de8 100644
--- a/animated-base/src/main/java/com/facebook/imagepipeline/animated/factory/AnimatedImageFactoryImpl.java
+++ b/animated-base/src/main/java/com/facebook/imagepipeline/animated/factory/AnimatedImageFactoryImpl.java
@@ -179,10 +179,11 @@ public void onIntermediateResult(int frameNumber, Bitmap bitmap) {
   private List<CloseableReference<Bitmap>> decodeAllFrames(
       AnimatedImage image,
       Bitmap.Config bitmapConfig) {
-    final List<CloseableReference<Bitmap>> bitmaps = new ArrayList<>();
     AnimatedImageResult tempResult = AnimatedImageResult.forAnimatedImage(image);
     AnimatedDrawableBackend drawableBackend =
         mAnimatedDrawableBackendProvider.get(tempResult, null);
+    final List<CloseableReference<Bitmap>> bitmaps = new ArrayList<>(
+        drawableBackend.getFrameCount());
     AnimatedImageCompositor animatedImageCompositor = new AnimatedImageCompositor(
         drawableBackend,
         new AnimatedImageCompositor.Callback() {
diff --git a/animated-base/src/main/java/com/facebook/imagepipeline/animated/impl/AnimatedDrawableCachingBackendImpl.java b/animated-base/src/main/java/com/facebook/imagepipeline/animated/impl/AnimatedDrawableCachingBackendImpl.java
index 1d77308f5..dc0b230b8 100644
--- a/animated-base/src/main/java/com/facebook/imagepipeline/animated/impl/AnimatedDrawableCachingBackendImpl.java
+++ b/animated-base/src/main/java/com/facebook/imagepipeline/animated/impl/AnimatedDrawableCachingBackendImpl.java
@@ -547,7 +547,7 @@ private synchronized boolean hasCachedOrPredecodedFrame(int frameNumber) {
 
   @VisibleForTesting
   synchronized Set<Integer> getFramesCached() {
-    Set<Integer> set = new HashSet<Integer>();
+    Set<Integer> set = new HashSet<Integer>(mCachedBitmaps.size());
     for (int i = 0; i < mCachedBitmaps.size(); i++) {
       set.add(mCachedBitmaps.keyAt(i));
     }
diff --git a/animated-base/src/main/java/com/facebook/imagepipeline/image/CloseableAnimatedBitmap.java b/animated-base/src/main/java/com/facebook/imagepipeline/image/CloseableAnimatedBitmap.java
index c1a33e7a5..871e3b428 100644
--- a/animated-base/src/main/java/com/facebook/imagepipeline/image/CloseableAnimatedBitmap.java
+++ b/animated-base/src/main/java/com/facebook/imagepipeline/image/CloseableAnimatedBitmap.java
@@ -41,8 +41,8 @@ public CloseableAnimatedBitmap(
       List<Integer> durations) {
     Preconditions.checkNotNull(bitmapReferences);
     Preconditions.checkState(bitmapReferences.size() >= 1, "Need at least 1 frame!");
-    mBitmapReferences = new ArrayList<>();
-    mBitmaps = new ArrayList<>();
+    mBitmapReferences = new ArrayList<>(bitmapReferences.size());
+    mBitmaps = new ArrayList<>(bitmapReferences.size());
     for (CloseableReference<Bitmap> bitmapReference : bitmapReferences) {
       mBitmapReferences.add(bitmapReference.clone());
       mBitmaps.add(bitmapReference.get());
@@ -64,8 +64,8 @@ public CloseableAnimatedBitmap(
       ResourceReleaser<Bitmap> resourceReleaser) {
     Preconditions.checkNotNull(bitmaps);
     Preconditions.checkState(bitmaps.size() >= 1, "Need at least 1 frame!");
-    mBitmaps = new ArrayList<>();
-    mBitmapReferences = new ArrayList<>();
+    mBitmaps = new ArrayList<>(bitmaps.size());
+    mBitmapReferences = new ArrayList<>(bitmaps.size());
     for (Bitmap bitmap : bitmaps) {
       mBitmapReferences.add(CloseableReference.of(bitmap, resourceReleaser));
       mBitmaps.add(bitmap);
diff --git a/imagepipeline-base/src/main/java/com/facebook/imagepipeline/cache/CountingLruMap.java b/imagepipeline-base/src/main/java/com/facebook/imagepipeline/cache/CountingLruMap.java
index fbe36675d..10afd89e3 100644
--- a/imagepipeline-base/src/main/java/com/facebook/imagepipeline/cache/CountingLruMap.java
+++ b/imagepipeline-base/src/main/java/com/facebook/imagepipeline/cache/CountingLruMap.java
@@ -66,7 +66,7 @@ public synchronized K getFirstKey() {
   /** Gets the all matching elements. */
   public synchronized ArrayList<LinkedHashMap.Entry<K, V>> getMatchingEntries(
       @Nullable Predicate<K> predicate) {
-    ArrayList<LinkedHashMap.Entry<K, V>> matchingEntries = new ArrayList<>();
+    ArrayList<LinkedHashMap.Entry<K, V>> matchingEntries = new ArrayList<>(mMap.entrySet().size());
     for (LinkedHashMap.Entry<K, V> entry : mMap.entrySet()) {
       if (predicate == null || predicate.apply(entry.getKey())) {
         matchingEntries.add(entry);
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/memory/BitmapCounter.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/memory/BitmapCounter.java
index f353cc0ec..b05f7d01b 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/memory/BitmapCounter.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/memory/BitmapCounter.java
@@ -132,7 +132,7 @@ public synchronized long getSize() {
           throw new TooManyBitmapsException();
         }
       }
-      List<CloseableReference<Bitmap>> ret = new ArrayList<>();
+      List<CloseableReference<Bitmap>> ret = new ArrayList<>(bitmaps.size());
       for (Bitmap bitmap : bitmaps) {
         ret.add(CloseableReference.of(bitmap, mUnpooledBitmapsReleaser));
       }
