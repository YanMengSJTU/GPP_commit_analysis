diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/FrescoLarge.java b/fresco-large/src/main/java/com/hippo/fresco/large/FrescoLarge.java
index aa1505f0a..94a97e477 100644
--- a/fresco-large/src/main/java/com/hippo/fresco/large/FrescoLarge.java
+++ b/fresco-large/src/main/java/com/hippo/fresco/large/FrescoLarge.java
@@ -12,69 +12,166 @@
 
 import android.content.Context;
 
-import com.facebook.common.internal.Supplier;
-import com.facebook.common.logging.FLog;
+import com.facebook.common.internal.ImmutableList;
+import com.facebook.drawee.backends.pipeline.DrawableFactory;
 import com.facebook.drawee.backends.pipeline.DraweeConfig;
+import com.facebook.drawee.backends.pipeline.Fresco;
 import com.facebook.drawee.backends.pipeline.PipelineDraweeControllerBuilder;
 import com.facebook.drawee.backends.pipeline.PipelineDraweeControllerBuilderSupplier;
-import com.facebook.drawee.interfaces.SimpleDraweeControllerBuilder;
-import com.facebook.drawee.view.SimpleDraweeView;
+import com.facebook.imageformat.DefaultImageFormats;
 import com.facebook.imageformat.ImageFormat;
+import com.facebook.imagepipeline.animated.factory.AnimatedFactory;
 import com.facebook.imagepipeline.core.ImagePipelineConfig;
-import com.facebook.imagepipeline.core.ImagePipelineFactory;
+import com.facebook.imagepipeline.decoder.DefaultImageDecoder;
+import com.facebook.imagepipeline.decoder.ImageDecoder;
 import com.facebook.imagepipeline.decoder.ImageDecoderConfig;
 
 import com.hippo.fresco.large.decoder.ImageRegionDecoderFactory;
+import com.hippo.fresco.large.decoder.SkiaImageRegionDecoderFactory;
 
 public final class FrescoLarge {
   private FrescoLarge() {}
 
-  private static final Class<?> TAG = FrescoLarge.class;
+  private static final int THRESHOLD_SIZE = 1024;
 
   private static PipelineDraweeControllerBuilderSupplier sDraweeControllerBuilderSupplier;
 
-  public static void config(
+  /** Initializes FrescoLarge with the default config. */
+  public static void initialize(@Nonnull Context context) {
+    initialize(context, null, null, null, null);
+  }
+
+  /** Initializes FrescoLarge with the default ImagePipeline config and the default Drawee config. */
+  public static void initialize(
+      @Nonnull Context context,
+      @Nullable FrescoLargeConfig frescoLargeConfig) {
+    initialize(context, frescoLargeConfig, null, null, null);
+  }
+
+  /** Initializes FrescoLarge with the default Drawee config. */
+  public static void initialize(
+      @Nonnull Context context,
+      @Nullable FrescoLargeConfig frescoLargeConfig,
+      @Nullable ImageDecoderConfig.Builder imageDecoderConfigBuilder,
+      @Nullable ImagePipelineConfig.Builder imagePipelineConfigBuilder) {
+    initialize(context, frescoLargeConfig, imageDecoderConfigBuilder, imagePipelineConfigBuilder, null);
+  }
+
+  /** Initializes Fresco with the specified config. */
+  public static void initialize(
       @Nonnull Context context,
-      @Nonnull FrescoLargeConfig config,
-      @Nonnull ImageDecoderConfig.Builder decoderConfigBuilder,
-      @Nonnull DraweeConfig.Builder draweeConfigBuilder) {
-    Set<ImageFormat> imageFormatSet = config.getImageFormatSet();
-    if (imageFormatSet == null || imageFormatSet.isEmpty()) {
-      FLog.w(TAG, "No ImageFormat");
-      return;
+      @Nullable FrescoLargeConfig frescoLargeConfig,
+      @Nullable ImageDecoderConfig.Builder imageDecoderConfigBuilder,
+      @Nullable ImagePipelineConfig.Builder imagePipelineConfigBuilder,
+      @Nullable DraweeConfig draweeConfig) {
+
+    if (frescoLargeConfig == null) {
+      ImageRegionDecoderFactory decoderFactory = new SkiaImageRegionDecoderFactory();
+      frescoLargeConfig = FrescoLargeConfig.newBuilder()
+          .addDecoder(DefaultImageFormats.JPEG, decoderFactory)
+          .addDecoder(DefaultImageFormats.PNG, decoderFactory)
+          .setThresholdSize(THRESHOLD_SIZE, THRESHOLD_SIZE)
+          .build();
+    }
+
+    imageDecoderConfigBuilder = configImageDecoderConfigBuilder(frescoLargeConfig, imageDecoderConfigBuilder);
+
+    final ImagePipelineConfig imagePipelineConfig;
+    if (imageDecoderConfigBuilder != null && imagePipelineConfigBuilder != null) {
+      imagePipelineConfig = imagePipelineConfigBuilder
+          .setImageDecoderConfig(imageDecoderConfigBuilder.build())
+          .build();
+    } else if (imageDecoderConfigBuilder == null && imagePipelineConfigBuilder != null) {
+      imagePipelineConfig = imagePipelineConfigBuilder.build();
+    } else if (imageDecoderConfigBuilder != null) {
+      imagePipelineConfig = ImagePipelineConfig.newBuilder(context)
+          .setImageDecoderConfig(imageDecoderConfigBuilder.build())
+          .build();
+    } else {
+      imagePipelineConfig = null;
     }
 
+    Fresco.initialize(context, imagePipelineConfig, draweeConfig);
+
+    DraweeConfig largeDraweeConfig = configLargeDraweeConfig(context, draweeConfig);
+    initializeLargeDrawee(context, largeDraweeConfig);
+
+    // Init LargeDrawableFactory
+    AnimatedFactory factory = Fresco.getImagePipelineFactory().getAnimatedFactory();
+    LargeDrawableFactory.initialize(
+        Fresco.getImagePipelineFactory().getConfig().getExecutorSupplier().forDecode(),
+        factory != null ? factory.getAnimatedDrawableFactory(context) : null);
+
+    // Init LargeImageDecoder
+    ImageDecoder decoder = Fresco.getImagePipelineFactory().getImageDecoder();
+    if (decoder instanceof DefaultImageDecoder) {
+      LargeImageDecoder.initialize((DefaultImageDecoder) decoder);
+    }
+  }
+
+
+  @Nullable
+  private static ImageDecoderConfig.Builder configImageDecoderConfigBuilder(
+      @Nonnull FrescoLargeConfig frescoLargeConfig,
+      @Nullable ImageDecoderConfig.Builder imageDecoderConfigBuilder) {
+    Set<ImageFormat> imageFormatSet = frescoLargeConfig.getImageFormatSet();
     Map<ImageFormat, ImageRegionDecoderFactory> regionDecoderFactoryMap =
-        config.getImageRegionDecoderFactoryMap();
-    if (regionDecoderFactoryMap == null || regionDecoderFactoryMap.isEmpty()) {
-      FLog.w(TAG, "No ImageRegionDecoderFactory");
-      return;
+        frescoLargeConfig.getImageRegionDecoderFactoryMap();
+
+    if (imageFormatSet == null || imageFormatSet.isEmpty() ||
+        regionDecoderFactoryMap == null || regionDecoderFactoryMap.isEmpty()) {
+      return imageDecoderConfigBuilder;
+    }
+
+    if (imageDecoderConfigBuilder == null) {
+      imageDecoderConfigBuilder = ImageDecoderConfig.newBuilder();
     }
 
     Map<ImageFormat, ImageFormat.FormatChecker> imageFormatCheckerMap =
-        config.getImageFormatCheckerMap();
+        frescoLargeConfig.getImageFormatCheckerMap();
     if (imageFormatCheckerMap != null) {
-      for (Map.Entry<ImageFormat, ImageFormat.FormatChecker> entry :
-          config.getImageFormatCheckerMap().entrySet()) {
+      for (Map.Entry<ImageFormat, ImageFormat.FormatChecker> entry : imageFormatCheckerMap.entrySet()) {
         // Apply image format checker.
         // Pass null for ImageDecoder, it should be override by LargeImageDecoder
-        decoderConfigBuilder.addDecodingCapability(entry.getKey(), entry.getValue(), null);
+        imageDecoderConfigBuilder.addDecodingCapability(entry.getKey(), entry.getValue(), null);
       }
     }
 
-    LargeImageDecoder largeImageDecoder = new LargeImageDecoder(config.getImageSizeDecoderMap(),
-        config.getImageRegionDecoderFactoryMap(), config.getImageDecoderMap(),
-        config.getThresholdWidth(), config.getThresholdHeight());
-    for (ImageFormat imageFormat : config.getImageFormatSet()) {
-      decoderConfigBuilder.overrideDecoder(imageFormat, largeImageDecoder);
+    LargeImageDecoder largeImageDecoder = new LargeImageDecoder(
+        frescoLargeConfig.getImageSizeDecoderMap(),
+        frescoLargeConfig.getImageRegionDecoderFactoryMap(),
+        frescoLargeConfig.getImageDecoderMap(),
+        frescoLargeConfig.getThresholdWidth(),
+        frescoLargeConfig.getThresholdHeight());
+    for (ImageFormat imageFormat : imageFormatSet) {
+      imageDecoderConfigBuilder.overrideDecoder(imageFormat, largeImageDecoder);
     }
 
-    draweeConfigBuilder.addCustomDrawableFactory(new LargeDrawableFactory(context));
+    return imageDecoderConfigBuilder;
   }
 
-  public static void initialize(
+  @Nullable
+  private static DraweeConfig configLargeDraweeConfig(
       @Nonnull Context context,
       @Nullable DraweeConfig draweeConfig) {
+    ImmutableList<DrawableFactory> customDrawableFactories =
+        draweeConfig != null ? draweeConfig.getCustomDrawableFactories() : null;
+    LargeDrawableFactory largeDrawableFactory = new LargeDrawableFactory(context, customDrawableFactories);
+
+    DraweeConfig.Builder builder = DraweeConfig.newBuilder()
+        .addCustomDrawableFactory(largeDrawableFactory);
+    if (draweeConfig != null) {
+      builder.setDebugOverlayEnabledSupplier(draweeConfig.getDebugOverlayEnabledSupplier())
+          .setPipelineDraweeControllerFactory(draweeConfig.getPipelineDraweeControllerFactory());
+    }
+
+    return builder.build();
+  }
+
+  /** Initializes Drawee with the specified config. */
+  private static void initializeLargeDrawee(
+      Context context,
+      @Nullable DraweeConfig draweeConfig) {
     sDraweeControllerBuilderSupplier =
         new PipelineDraweeControllerBuilderSupplier(context, draweeConfig);
     SimpleLargeDraweeView.initialize(sDraweeControllerBuilderSupplier);
@@ -92,6 +189,7 @@ public static PipelineDraweeControllerBuilder newDraweeControllerBuilder() {
 
   /** Shuts Fresco down. */
   public static void shutDown() {
+    Fresco.shutDown();
     sDraweeControllerBuilderSupplier = null;
   }
 }
diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/LargeDrawableFactory.java b/fresco-large/src/main/java/com/hippo/fresco/large/LargeDrawableFactory.java
index f80c2a25d..956ed6727 100644
--- a/fresco-large/src/main/java/com/hippo/fresco/large/LargeDrawableFactory.java
+++ b/fresco-large/src/main/java/com/hippo/fresco/large/LargeDrawableFactory.java
@@ -13,11 +13,10 @@
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
 
+import com.facebook.common.internal.ImmutableList;
 import com.facebook.drawee.backends.pipeline.DrawableFactory;
-import com.facebook.drawee.backends.pipeline.Fresco;
 import com.facebook.drawee.drawable.OrientedDrawable;
 import com.facebook.imagepipeline.animated.factory.AnimatedDrawableFactory;
-import com.facebook.imagepipeline.animated.factory.AnimatedFactory;
 import com.facebook.imagepipeline.image.CloseableImage;
 import com.facebook.imagepipeline.image.CloseableStaticBitmap;
 import com.facebook.imagepipeline.image.EncodedImage;
@@ -31,18 +30,23 @@
 
 class LargeDrawableFactory implements DrawableFactory {
 
-  private final Context context;
+  private static Executor sDecodeExecutor;
+  private static AnimatedDrawableFactory sAnimatedDrawableFactory;
 
-  private boolean hasDecodeExecutor;
-  private final Object lockDecodeExecutor = new Object();
-  private Executor decodeExecutor;
+  static void initialize(Executor decodeExecutor, AnimatedDrawableFactory animatedDrawableFactory) {
+    sDecodeExecutor = decodeExecutor;
+    sAnimatedDrawableFactory = animatedDrawableFactory;
+  }
 
-  private boolean hasAnimatedDrawableFactory;
-  private final Object lockAnimatedDrawableFactory = new Object();
-  private AnimatedDrawableFactory animatedDrawableFactory;
 
-  public LargeDrawableFactory(Context context) {
+  private final Context context;
+  private final ImmutableList<DrawableFactory> customDrawableFactories;
+
+  public LargeDrawableFactory(
+      Context context,
+      ImmutableList<DrawableFactory> customDrawableFactories) {
     this.context = context;
+    this.customDrawableFactories = customDrawableFactories;
   }
 
   @Override
@@ -50,43 +54,13 @@ public final boolean supportsImageType(CloseableImage image) {
     return true;
   }
 
-  private Executor getDecodeExecutor() {
-    if (!hasDecodeExecutor) {
-      synchronized (lockDecodeExecutor) {
-        if (!hasDecodeExecutor) {
-          hasDecodeExecutor = true;
-          decodeExecutor =
-              Fresco.getImagePipelineFactory().getConfig().getExecutorSupplier().forDecode();
-        }
-      }
-    }
-    return decodeExecutor;
-  }
-
-  private AnimatedDrawableFactory getAnimatedDrawableFactory() {
-    if (!hasAnimatedDrawableFactory) {
-      synchronized (lockAnimatedDrawableFactory) {
-        if (!hasAnimatedDrawableFactory) {
-          hasAnimatedDrawableFactory = true;
-          AnimatedFactory factory = Fresco.getImagePipelineFactory().getAnimatedFactory();
-          if (factory != null) {
-            animatedDrawableFactory = factory.getAnimatedDrawableFactory(context);
-          }
-        }
-      }
-    }
-    return animatedDrawableFactory;
-  }
-
   @Nullable
   @Override
   public final Drawable createDrawable(CloseableImage image) {
     Drawable drawable = null;
 
     if (image instanceof CloseableLargeImage) {
-      drawable = new SubsamplingDrawable(
-          ((CloseableLargeImage) image).getDecoder(),
-          getDecodeExecutor());
+      drawable = new SubsamplingDrawable(((CloseableLargeImage) image).getDecoder(), sDecodeExecutor);
     } else {
       drawable = createNormalDrawable(image);
       if (drawable instanceof Animatable) {
@@ -108,6 +82,17 @@ public final Drawable createDrawable(CloseableImage image) {
   }
 
   private Drawable createNormalDrawable(CloseableImage image) {
+    if (customDrawableFactories != null) {
+      for (DrawableFactory factory : customDrawableFactories) {
+        if (factory.supportsImageType(image)) {
+          Drawable drawable = factory.createDrawable(image);
+          if (drawable != null) {
+            return drawable;
+          }
+        }
+      }
+    }
+
     if (image instanceof CloseableStaticBitmap) {
       CloseableStaticBitmap closeableStaticBitmap = (CloseableStaticBitmap) image;
       Drawable bitmapDrawable = new BitmapDrawable(
@@ -120,7 +105,7 @@ private Drawable createNormalDrawable(CloseableImage image) {
         return new OrientedDrawable(bitmapDrawable, closeableStaticBitmap.getRotationAngle());
       }
     } else {
-      AnimatedDrawableFactory factory = getAnimatedDrawableFactory();
+      AnimatedDrawableFactory factory = sAnimatedDrawableFactory;
       if (factory != null) {
         return factory.create(image);
       }
diff --git a/fresco-large/src/main/java/com/hippo/fresco/large/LargeImageDecoder.java b/fresco-large/src/main/java/com/hippo/fresco/large/LargeImageDecoder.java
index 4eea0478f..6394c3612 100644
--- a/fresco-large/src/main/java/com/hippo/fresco/large/LargeImageDecoder.java
+++ b/fresco-large/src/main/java/com/hippo/fresco/large/LargeImageDecoder.java
@@ -10,7 +10,6 @@
 
 import android.util.Pair;
 
-import com.facebook.drawee.backends.pipeline.Fresco;
 import com.facebook.imageformat.DefaultImageFormats;
 import com.facebook.imageformat.ImageFormat;
 import com.facebook.imagepipeline.common.ImageDecodeOptions;
@@ -27,9 +26,12 @@
 
 class LargeImageDecoder implements ImageDecoder {
 
-  private boolean hasDefaultImageDecoder;
-  private final Object lockDefaultImageDecoder = new Object();
-  private DefaultImageDecoder defaultImageDecoder;
+  private static DefaultImageDecoder sDefaultImageDecoder;
+
+  static void initialize(DefaultImageDecoder defaultImageDecoder) {
+    sDefaultImageDecoder = defaultImageDecoder;
+  }
+
 
   private final ImageSizeDecoder defaultSizeDecoder;
 
@@ -56,21 +58,6 @@ public LargeImageDecoder(
     defaultSizeDecoder = new DefaultImageSizeDecoder();
   }
 
-  private DefaultImageDecoder getDefaultImageDecoder() {
-    if (!hasDefaultImageDecoder) {
-      synchronized (lockDefaultImageDecoder) {
-        if (!hasDefaultImageDecoder) {
-          hasDefaultImageDecoder = true;
-          ImageDecoder decoder = Fresco.getImagePipelineFactory().getImageDecoder();
-          if (decoder instanceof DefaultImageDecoder) {
-            defaultImageDecoder = (DefaultImageDecoder) decoder;
-          }
-        }
-      }
-    }
-    return defaultImageDecoder;
-  }
-
   private boolean isLargeEnough(int width, int height) {
     return width > thresholdWidth || height > thresholdHeight;
   }
@@ -112,7 +99,7 @@ public CloseableImage decode(EncodedImage encodedImage, int length, QualityInfo
       }
     }
 
-    DefaultImageDecoder defaultImageDecoder = getDefaultImageDecoder();
+    DefaultImageDecoder defaultImageDecoder = sDefaultImageDecoder;
     if (defaultImageDecoder != null) {
       if (imageFormat == DefaultImageFormats.JPEG) {
         return defaultImageDecoder.decodeJpeg(encodedImage, length, qualityInfo, options);
diff --git a/samples/large/src/main/java/com/hippo/fresco/large/demo/DemoApp.java b/samples/large/src/main/java/com/hippo/fresco/large/demo/DemoApp.java
index b5edea7d6..34b133f32 100644
--- a/samples/large/src/main/java/com/hippo/fresco/large/demo/DemoApp.java
+++ b/samples/large/src/main/java/com/hippo/fresco/large/demo/DemoApp.java
@@ -6,39 +6,13 @@
 
 import android.app.Application;
 
-import com.facebook.drawee.backends.pipeline.DraweeConfig;
-import com.facebook.drawee.backends.pipeline.Fresco;
-import com.facebook.imageformat.DefaultImageFormats;
-import com.facebook.imagepipeline.core.ImagePipelineConfig;
-import com.facebook.imagepipeline.decoder.ImageDecoderConfig;
-
 import com.hippo.fresco.large.FrescoLarge;
-import com.hippo.fresco.large.FrescoLargeConfig;
-import com.hippo.fresco.large.decoder.ImageRegionDecoderFactory;
-import com.hippo.fresco.large.decoder.SkiaImageRegionDecoderFactory;
 
 public class DemoApp extends Application {
 
   @Override
   public void onCreate() {
     super.onCreate();
-
-    FrescoLargeConfig.Builder builder = FrescoLargeConfig.newBuilder();
-    builder.setThresholdSize(1024, 1024);
-    ImageRegionDecoderFactory decoderFactory = new SkiaImageRegionDecoderFactory();
-    builder.addDecoder(DefaultImageFormats.JPEG, decoderFactory);
-    builder.addDecoder(DefaultImageFormats.PNG, decoderFactory);
-
-    ImageDecoderConfig.Builder decoderConfigBuilder = ImageDecoderConfig.newBuilder();
-    DraweeConfig.Builder draweeConfigBuilder = DraweeConfig.newBuilder();
-    FrescoLarge.config(this, builder.build(), decoderConfigBuilder, draweeConfigBuilder);
-
-    ImagePipelineConfig imagePipelineConfig = ImagePipelineConfig
-        .newBuilder(this)
-        .setImageDecoderConfig(decoderConfigBuilder.build())
-        .build();
-
-    Fresco.initialize(this, imagePipelineConfig);
-    FrescoLarge.initialize(this, draweeConfigBuilder.build());
+    FrescoLarge.initialize(this);
   }
 }
