diff --git a/imagepipeline-base/src/main/java/com/facebook/imagepipeline/common/ImageDecodeOptions.java b/imagepipeline-base/src/main/java/com/facebook/imagepipeline/common/ImageDecodeOptions.java
index b7b1af6af..10c529c02 100644
--- a/imagepipeline-base/src/main/java/com/facebook/imagepipeline/common/ImageDecodeOptions.java
+++ b/imagepipeline-base/src/main/java/com/facebook/imagepipeline/common/ImageDecodeOptions.java
@@ -9,10 +9,12 @@
 
 package com.facebook.imagepipeline.common;
 
-import javax.annotation.concurrent.Immutable;
+import android.graphics.Bitmap;
 
 import java.util.Locale;
 
+import javax.annotation.concurrent.Immutable;
+
 /**
  * Options for changing the behavior of the {@code ImageDecoder}.
  */
@@ -50,12 +52,18 @@
    */
   public final boolean forceStaticImage;
 
+  /**
+   * StaticImage and JPEG will decode with this config;
+   */
+  public final Bitmap.Config bitmapConfig;
+
   public ImageDecodeOptions(ImageDecodeOptionsBuilder b) {
     this.minDecodeIntervalMs = b.getMinDecodeIntervalMs();
     this.decodePreviewFrame = b.getDecodePreviewFrame();
     this.useLastFrameForPreview = b.getUseLastFrameForPreview();
     this.decodeAllFrames = b.getDecodeAllFrames();
     this.forceStaticImage = b.getForceStaticImage();
+    this.bitmapConfig = b.getBitmapConfig();
   }
 
   /**
@@ -87,6 +95,7 @@ public boolean equals(Object o) {
     if (useLastFrameForPreview != that.useLastFrameForPreview) return false;
     if (decodeAllFrames != that.decodeAllFrames) return false;
     if (forceStaticImage != that.forceStaticImage) return false;
+    if (bitmapConfig != that.bitmapConfig) return false;
 
     return true;
   }
@@ -98,6 +107,7 @@ public int hashCode() {
     result = 31 * result + (useLastFrameForPreview ? 1 : 0);
     result = 31 * result + (decodeAllFrames ? 1 : 0);
     result = 31 * result + (forceStaticImage ? 1 : 0);
+    result = 31 * result + bitmapConfig.ordinal();
     return result;
   }
 
@@ -105,11 +115,12 @@ public int hashCode() {
   public String toString() {
     return String.format(
         (Locale) null,
-        "%d-%b-%b-%b-%b",
+        "%d-%b-%b-%b-%b-%s",
         minDecodeIntervalMs,
         decodePreviewFrame,
         useLastFrameForPreview,
         decodeAllFrames,
-        forceStaticImage);
+        forceStaticImage,
+        bitmapConfig.name());
   }
 }
diff --git a/imagepipeline-base/src/main/java/com/facebook/imagepipeline/common/ImageDecodeOptionsBuilder.java b/imagepipeline-base/src/main/java/com/facebook/imagepipeline/common/ImageDecodeOptionsBuilder.java
index 7ddeb68d9..6db7d2402 100644
--- a/imagepipeline-base/src/main/java/com/facebook/imagepipeline/common/ImageDecodeOptionsBuilder.java
+++ b/imagepipeline-base/src/main/java/com/facebook/imagepipeline/common/ImageDecodeOptionsBuilder.java
@@ -9,6 +9,8 @@
 
 package com.facebook.imagepipeline.common;
 
+import android.graphics.Bitmap;
+
 /**
  * Builder for {@link ImageDecodeOptions}.
  */
@@ -19,6 +21,7 @@
   private boolean mUseLastFrameForPreview;
   private boolean mDecodeAllFrames;
   private boolean mForceStaticImage;
+  private Bitmap.Config mBitmapConfig = Bitmap.Config.ARGB_8888;
 
   public ImageDecodeOptionsBuilder() {
   }
@@ -34,6 +37,7 @@ public ImageDecodeOptionsBuilder setFrom(ImageDecodeOptions options) {
     mUseLastFrameForPreview = options.useLastFrameForPreview;
     mDecodeAllFrames = options.decodeAllFrames;
     mForceStaticImage = options.forceStaticImage;
+    mBitmapConfig = options.bitmapConfig;
     return this;
   }
 
@@ -144,6 +148,23 @@ public boolean getForceStaticImage() {
     return mForceStaticImage;
   }
 
+  /**
+   * Gets which config image will be decode with;
+   *
+   * @return which config image will be decode with
+   */
+  public Bitmap.Config getBitmapConfig() {
+    return mBitmapConfig;
+  }
+
+  /**
+   * Sets which config static image will be decode with;
+   * @param bitmapConfig which config static image will be decode with;
+   */
+  public void setBitmapConfig(Bitmap.Config bitmapConfig) {
+    mBitmapConfig = bitmapConfig;
+  }
+
   /**
    * Builds the immutable {@link ImageDecodeOptions} instance.
    *
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/decoder/DefaultImageDecoder.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/decoder/DefaultImageDecoder.java
index 6d36ee702..dd7fa108c 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/decoder/DefaultImageDecoder.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/decoder/DefaultImageDecoder.java
@@ -11,8 +11,6 @@
 
 import android.graphics.Bitmap;
 
-import javax.annotation.Nullable;
-
 import com.facebook.common.internal.Closeables;
 import com.facebook.common.references.CloseableReference;
 import com.facebook.imageformat.DefaultImageFormats;
@@ -31,6 +29,8 @@
 import java.io.InputStream;
 import java.util.Map;
 
+import javax.annotation.Nullable;
+
 /**
  * Decodes images.
  *
@@ -61,7 +61,7 @@ public CloseableImage decode(
         ImageDecodeOptions options) {
       ImageFormat imageFormat = encodedImage.getImageFormat();
       if (imageFormat == DefaultImageFormats.JPEG) {
-        return decodeJpeg(encodedImage, length, qualityInfo);
+        return decodeJpeg(encodedImage, length, qualityInfo, options);
       } else if (imageFormat == DefaultImageFormats.GIF) {
         return decodeGif(encodedImage, options);
       } else if (imageFormat == DefaultImageFormats.WEBP_ANIMATED) {
@@ -69,7 +69,7 @@ public CloseableImage decode(
       } else if (imageFormat == ImageFormat.UNKNOWN) {
         throw new IllegalArgumentException("unknown image format");
       }
-      return decodeStaticImage(encodedImage);
+      return decodeStaticImage(encodedImage, options);
     }
   };
 
@@ -143,7 +143,7 @@ public CloseableImage decodeGif(
           && GifFormatChecker.isAnimated(is)) {
         return mAnimatedImageFactory.decodeGif(encodedImage, options, mBitmapConfig);
       }
-      return decodeStaticImage(encodedImage);
+      return decodeStaticImage(encodedImage, options);
     } finally {
       Closeables.closeQuietly(is);
     }
@@ -154,9 +154,10 @@ public CloseableImage decodeGif(
    * @return a CloseableStaticBitmap
    */
   public CloseableStaticBitmap decodeStaticImage(
-      final EncodedImage encodedImage) {
+      final EncodedImage encodedImage,
+      ImageDecodeOptions options) {
     CloseableReference<Bitmap> bitmapReference =
-        mPlatformDecoder.decodeFromEncodedImage(encodedImage, mBitmapConfig);
+        mPlatformDecoder.decodeFromEncodedImage(encodedImage, options.bitmapConfig);
     try {
       return new CloseableStaticBitmap(
           bitmapReference,
@@ -178,9 +179,10 @@ public CloseableStaticBitmap decodeStaticImage(
   public CloseableStaticBitmap decodeJpeg(
       final EncodedImage encodedImage,
       int length,
-      QualityInfo qualityInfo) {
+      QualityInfo qualityInfo,
+      ImageDecodeOptions options) {
     CloseableReference<Bitmap> bitmapReference =
-        mPlatformDecoder.decodeJPEGFromEncodedImage(encodedImage, mBitmapConfig, length);
+        mPlatformDecoder.decodeJPEGFromEncodedImage(encodedImage, options.bitmapConfig, length);
     try {
       return new CloseableStaticBitmap(
           bitmapReference,
