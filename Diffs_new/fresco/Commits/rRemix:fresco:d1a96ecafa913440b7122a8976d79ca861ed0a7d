diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerFactory.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerFactory.java
index fb8ac7c95..5c02bd2aa 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerFactory.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerFactory.java
@@ -34,7 +34,7 @@
 import com.facebook.imagepipeline.producers.DecodeProducer;
 import com.facebook.imagepipeline.producers.DiskCacheReadProducer;
 import com.facebook.imagepipeline.producers.DiskCacheWriteProducer;
-import com.facebook.imagepipeline.producers.EmbeddedProducer;
+import com.facebook.imagepipeline.producers.EmbeddedCoverProducer;
 import com.facebook.imagepipeline.producers.EncodedCacheKeyMultiplexProducer;
 import com.facebook.imagepipeline.producers.EncodedMemoryCacheProducer;
 import com.facebook.imagepipeline.producers.LocalAssetFetchProducer;
@@ -363,9 +363,10 @@ public BitmapPrepareProducer newBitmapPrepareProducer(
         mBitmapPrepareToDrawForPrefetch);
   }
 
-  public EmbeddedProducer newEmbeddedProducer() {
-    return new EmbeddedProducer(
+
+  public EmbeddedCoverProducer newEmbeddedCoverProducer(){
+    return new EmbeddedCoverProducer(
         mExecutorSupplier.forLocalStorageRead(),
-        mContentResolver);
+        mPooledByteBufferFactory);
   }
 }
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerSequenceFactory.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerSequenceFactory.java
index 76adcb799..187a9d0ee 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerSequenceFactory.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ProducerSequenceFactory.java
@@ -31,7 +31,7 @@
 import com.facebook.imagepipeline.producers.BitmapMemoryCacheProducer;
 import com.facebook.imagepipeline.producers.DecodeProducer;
 import com.facebook.imagepipeline.producers.DiskCacheReadProducer;
-import com.facebook.imagepipeline.producers.EmbeddedProducer;
+import com.facebook.imagepipeline.producers.EmbeddedCoverProducer;
 import com.facebook.imagepipeline.producers.EncodedMemoryCacheProducer;
 import com.facebook.imagepipeline.producers.LocalAssetFetchProducer;
 import com.facebook.imagepipeline.producers.LocalContentUriFetchProducer;
@@ -333,12 +333,19 @@ private static void validateEncodedImageRequest(ImageRequest imageRequest) {
 
   private synchronized Producer<CloseableReference<CloseableImage>> getEmbeddedFetchSequence() {
     if (mEmbeddedFetchSequence == null) {
-      EmbeddedProducer embeddedProducer =
-          mProducerFactory.newEmbeddedProducer();
+      EmbeddedCoverProducer embeddedProducer =
+          mProducerFactory.newEmbeddedCoverProducer();
       mEmbeddedFetchSequence =
-          newBitmapCacheGetToBitmapCacheSequence(embeddedProducer);
+          newBitmapCacheGetToLocalTransformSequence(embeddedProducer);
     }
     return mEmbeddedFetchSequence;
+//    if (mEmbeddedFetchSequence == null) {
+//      EmbeddedProducer embeddedProducer =
+//          mProducerFactory.newEmbeddedProducer();
+//      mEmbeddedFetchSequence =
+//          newBitmapCacheGetToBitmapCacheSequence(embeddedProducer);
+//    }
+//    return mEmbeddedFetchSequence;
   }
 
   /**
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/EmbeddedCoverProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/EmbeddedCoverProducer.java
new file mode 100644
index 000000000..2be0c80d3
--- /dev/null
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/EmbeddedCoverProducer.java
@@ -0,0 +1,57 @@
+package com.facebook.imagepipeline.producers;
+
+import android.annotation.TargetApi;
+import android.media.MediaMetadataRetriever;
+import android.net.Uri;
+import android.os.Build.VERSION_CODES;
+import android.support.annotation.Nullable;
+import com.facebook.common.memory.PooledByteBufferFactory;
+import com.facebook.imagepipeline.image.EncodedImage;
+import com.facebook.imagepipeline.request.ImageRequest;
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.util.concurrent.Executor;
+
+public class EmbeddedCoverProducer extends LocalFetchProducer {
+
+  public static final String PRODUCER_NAME = "EmbeddedCoverProducer";
+
+  public EmbeddedCoverProducer(Executor executor,
+      PooledByteBufferFactory pooledByteBufferFactory) {
+    super(executor, pooledByteBufferFactory);
+  }
+
+  @TargetApi(VERSION_CODES.GINGERBREAD_MR1)
+  @Override
+  protected EncodedImage getEncodedImage(ImageRequest imageRequest) throws IOException {
+    String path = getLocalFilePath(imageRequest);
+    if (path == null) {
+      return null;
+    }
+    byte[] bitmapData;
+    MediaMetadataRetriever retriever = new MediaMetadataRetriever();
+    try {
+      retriever.setDataSource(path);
+      bitmapData = retriever.getEmbeddedPicture();
+    } finally {
+      retriever.release();
+    }
+    if (bitmapData == null) {
+      return null;
+    }
+    return getEncodedImage(
+        new ByteArrayInputStream(bitmapData),
+        bitmapData.length);
+  }
+
+  @Override
+  protected String getProducerName() {
+    return PRODUCER_NAME;
+  }
+
+  @Nullable
+  private String getLocalFilePath(ImageRequest imageRequest) {
+    final Uri uri = imageRequest.getSourceUri();
+    return uri != null ? uri.getPath() : null;
+  }
+}
diff --git a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeSimpleFragment.java b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeSimpleFragment.java
index 4fd59ed74..f8297a487 100644
--- a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeSimpleFragment.java
+++ b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeSimpleFragment.java
@@ -11,16 +11,26 @@
  */
 package com.facebook.fresco.samples.showcase.drawee;
 
+import android.graphics.drawable.Animatable;
 import android.net.Uri;
 import android.os.Bundle;
 import android.support.annotation.Nullable;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
+import com.facebook.drawee.backends.pipeline.Fresco;
+import com.facebook.drawee.controller.ControllerListener;
+import com.facebook.drawee.interfaces.DraweeController;
 import com.facebook.drawee.view.SimpleDraweeView;
 import com.facebook.fresco.samples.showcase.BaseShowcaseFragment;
 import com.facebook.fresco.samples.showcase.R;
 import com.facebook.fresco.samples.showcase.misc.ImageUriProvider;
+import com.facebook.imagepipeline.common.ResizeOptions;
+import com.facebook.imagepipeline.image.ImageInfo;
+import com.facebook.imagepipeline.image.QualityInfo;
+import com.facebook.imagepipeline.request.ImageRequestBuilder;
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
 
 /**
  * Simple drawee fragment that just displays an image.
@@ -39,8 +49,54 @@ public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
     final ImageUriProvider imageUriProvider = ImageUriProvider.getInstance(getContext());
     final Uri uri = imageUriProvider.createSampleUri(ImageUriProvider.ImageSize.M);
 
-    SimpleDraweeView simpleDraweeView = (SimpleDraweeView) view.findViewById(R.id.drawee_view);
-    simpleDraweeView.setImageURI("embedded:///storage/emulated/0/Music/Linkin park/Faint.mp3");
+//    final String uriString = "file:///storage/emulated/0/不才 - 藏龙.png";
+    final String uriString = "embedded:///storage/emulated/0/Crash/不才 - 藏龙.mp3";
+    ImageRequestBuilder imageRequestBuilder = ImageRequestBuilder.newBuilderWithSource(Uri.parse(uriString));
+    imageRequestBuilder.setResizeOptions(
+          ResizeOptions.forDimensions(200,300));
+
+
+    SimpleDraweeView simpleDraweeView = view.findViewById(R.id.drawee_view);
+    DraweeController controller = Fresco.newDraweeControllerBuilder()
+        .setImageRequest(imageRequestBuilder.build())
+        .setOldController(simpleDraweeView.getController())
+        .setControllerListener(new ControllerListener<ImageInfo>() {
+          @Override
+          public void onSubmit(String id, Object callerContext) {
+          }
+
+          @Override
+          public void onFinalImageSet(String id, @javax.annotation.Nullable ImageInfo imageInfo, @javax.annotation.Nullable Animatable animatable) {
+            if(imageInfo != null){
+              int width = imageInfo.getWidth();
+              int height = imageInfo.getHeight();
+              QualityInfo qualityInfo = imageInfo.getQualityInfo();
+            }
+          }
+
+          @Override
+          public void onIntermediateImageSet(String id,
+              @javax.annotation.Nullable ImageInfo imageInfo) {
+
+          }
+
+          @Override
+          public void onIntermediateImageFailed(String id, Throwable throwable) {
+
+          }
+
+          @Override
+          public void onFailure(String id, Throwable throwable) {
+
+          }
+
+          @Override
+          public void onRelease(String id) {
+
+          }
+        })
+        .build();
+    simpleDraweeView.setController(controller);
   }
 
   @Override
