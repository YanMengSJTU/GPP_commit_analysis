diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalExifThumbnailProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalExifThumbnailProducer.java
index 7bc7b1d5e..a8658626a 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalExifThumbnailProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/LocalExifThumbnailProducer.java
@@ -124,7 +124,13 @@ private EncodedImage buildEncodedImage(
     int rotationAngle = getRotationAngle(exifInterface);
     int width = dimensions != null ? dimensions.first : EncodedImage.UNKNOWN_WIDTH;
     int height = dimensions != null ? dimensions.second : EncodedImage.UNKNOWN_HEIGHT;
-    EncodedImage encodedImage = new EncodedImage(CloseableReference.of(imageBytes));
+    EncodedImage encodedImage;
+    CloseableReference<PooledByteBuffer> closeableByteBuffer = CloseableReference.of(imageBytes);
+    try {
+      encodedImage = new EncodedImage(closeableByteBuffer);
+    } finally {
+      CloseableReference.closeSafely(closeableByteBuffer);
+    }
     encodedImage.setImageFormat(ImageFormat.JPEG);
     encodedImage.setRotationAngle(rotationAngle);
     encodedImage.setWidth(width);
diff --git a/imagepipeline/src/test/java/com/facebook/imagepipeline/producers/LocalExifThumbnailProducerTest.java b/imagepipeline/src/test/java/com/facebook/imagepipeline/producers/LocalExifThumbnailProducerTest.java
index 0ca42b080..6b13f4757 100644
--- a/imagepipeline/src/test/java/com/facebook/imagepipeline/producers/LocalExifThumbnailProducerTest.java
+++ b/imagepipeline/src/test/java/com/facebook/imagepipeline/producers/LocalExifThumbnailProducerTest.java
@@ -116,11 +116,10 @@ public Object answer(InvocationOnMock invocation) throws Throwable {
   public void testFindExifThumbnail() {
     mTestLocalExifThumbnailProducer.produceResults(mConsumer, mProducerContext);
     mTestExecutorService.runUntilIdle();
-    // Should have 3 references open: The reference that is used in the producer, the cloned
-    // reference when the argument is captured and one more that is created when getByteBufferRef is
-    // called on EncodedImage
+    // Should have 2 references open: The cloned reference when the argument is captured by EncodedImage
+    // and the one that is created when getByteBufferRef is called on EncodedImage
     assertEquals(
-        3,
+        2,
         mCapturedEncodedImage.
             getByteBufferRef().getUnderlyingReferenceTestOnly().getRefCountTestOnly());
     assertSame(mThumbnailByteBuffer, mCapturedEncodedImage.getByteBufferRef().get());
