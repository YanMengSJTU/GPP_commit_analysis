diff --git a/drawee/src/main/java/com/facebook/drawee/drawable/RoundedBitmapDrawable.java b/drawee/src/main/java/com/facebook/drawee/drawable/RoundedBitmapDrawable.java
index 8a7bf9622..ecd29b425 100644
--- a/drawee/src/main/java/com/facebook/drawee/drawable/RoundedBitmapDrawable.java
+++ b/drawee/src/main/java/com/facebook/drawee/drawable/RoundedBitmapDrawable.java
@@ -49,7 +49,7 @@
   private final Path mPath = new Path();
   private boolean mIsPathDirty = true;
   /** True if this rounded bitmap drawable will actually do anything. */
-  private final Paint mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+  private final Paint mPaint;
   private final Paint mBorderPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
   private boolean mIsShaderTransformDirty = true;
   private WeakReference<Bitmap> mLastBitmap;
@@ -57,7 +57,17 @@
   private @Nullable TransformCallback mTransformCallback;
 
   public RoundedBitmapDrawable(Resources res, Bitmap bitmap) {
+    this(res, bitmap, null);
+  }
+
+  public RoundedBitmapDrawable(Resources res, Bitmap bitmap, Paint paint){
     super(res, bitmap);
+    if (paint == null){
+      mPaint = new Paint();
+    }else{
+      mPaint = new Paint(paint);
+    }
+    mPaint.setFlags(Paint.ANTI_ALIAS_FLAG);
     mBorderPaint.setStyle(Paint.Style.STROKE);
   }
 
@@ -70,7 +80,7 @@ public RoundedBitmapDrawable(Resources res, Bitmap bitmap) {
   public static RoundedBitmapDrawable fromBitmapDrawable(
       Resources res,
       BitmapDrawable bitmapDrawable) {
-    return new RoundedBitmapDrawable(res, bitmapDrawable.getBitmap());
+    return new RoundedBitmapDrawable(res, bitmapDrawable.getBitmap(), bitmapDrawable.getPaint());
   }
 
   /**
diff --git a/drawee/src/test/java/com/facebook/drawee/drawable/RoundedBitmapDrawableTest.java b/drawee/src/test/java/com/facebook/drawee/drawable/RoundedBitmapDrawableTest.java
index 121899117..1aea6d8b7 100644
--- a/drawee/src/test/java/com/facebook/drawee/drawable/RoundedBitmapDrawableTest.java
+++ b/drawee/src/test/java/com/facebook/drawee/drawable/RoundedBitmapDrawableTest.java
@@ -12,7 +12,10 @@
 import android.content.res.Resources;
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
+import android.graphics.ColorFilter;
 import android.graphics.Matrix;
+import android.graphics.Paint;
+import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
 import android.util.DisplayMetrics;
 
@@ -107,4 +110,20 @@ public void testNonZeroCircle() {
     mRoundedBitmapDrawable.draw(mCanvas);
     assertFalse(mRoundedBitmapDrawable.mIsNonzero);
   }
+
+  @Test
+  public void testPreservePaintOnDrawableCopy() {
+    ColorFilter colorFilter = mock(ColorFilter.class);
+    Paint originalPaint = mock(Paint.class);
+    BitmapDrawable originalVersion = mock(BitmapDrawable.class);
+
+    originalPaint.setColorFilter(colorFilter);
+    when(originalVersion.getPaint()).thenReturn(originalPaint);
+
+    RoundedBitmapDrawable roundedVersion = RoundedBitmapDrawable.fromBitmapDrawable(mResources,
+            originalVersion);
+
+    assertEquals(originalVersion.getPaint().getColorFilter(),
+            roundedVersion.getPaint().getColorFilter());
+  }
 }
