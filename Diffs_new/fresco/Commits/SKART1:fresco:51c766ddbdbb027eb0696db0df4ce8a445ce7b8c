diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/DiskCache.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/DiskCache.java
new file mode 100644
index 000000000..606f23769
--- /dev/null
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/DiskCache.java
@@ -0,0 +1,208 @@
+package com.facebook.imagepipeline.cache;
+
+import android.content.Context;
+import android.support.annotation.Nullable;
+
+import com.facebook.common.logging.FLog;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.util.Arrays;
+import java.util.LinkedList;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.Semaphore;
+
+/**
+ * Created by art on 2/5/16.
+ */
+public class DiskCache implements DiskCacheInterface {
+  private static final String DISK_CACHE_SUBDIR = "thumbnails";
+
+  //Singleton
+  private static DiskCache diskCache = null;
+
+  private Semaphore writeLock = new Semaphore(1);
+  private final ConcurrentHashMap<Integer, Boolean> concurrentHashMap = new ConcurrentHashMap<>(6);
+
+  private File cacheDir;
+
+  public static DiskCache getInstance(Context context) {
+    if (diskCache == null) {
+      synchronized (DiskCache.class) {
+        if (diskCache == null) {
+          diskCache = new DiskCache(context);
+        }
+      }
+    }
+    return diskCache;
+  }
+
+  private DiskCache(Context context) {
+    cacheDir = new File(context.getCacheDir(), DISK_CACHE_SUBDIR);
+    cacheDir.mkdirs();
+
+    //Init blocker
+    try {
+      writeLock.acquire();
+
+      File[] files = cacheDir.listFiles();
+      for (File file : files) {
+        if (!file.isDirectory()) {
+          concurrentHashMap.putIfAbsent(file.getName().hashCode(), false);
+        }
+      }
+    } catch (InterruptedException e) {
+      e.printStackTrace();
+    } finally {
+      writeLock.release();
+    }
+  }
+
+
+  @Override
+  public InfoStruct getFile(String url) {
+    InfoStruct infoStruct = new InfoStruct();
+
+    infoStruct.setFileName(url.hashCode());
+
+    //
+    File fileInp = new File(cacheDir, String.valueOf(infoStruct.getFileName()));
+
+
+    if(fileInp.length() < Integer.MAX_VALUE) {
+      infoStruct.setFileOffset((int) fileInp.length());
+    } else {
+      infoStruct.setFileOffset(0);
+    }
+
+    infoStruct.setFile(fileInp);
+
+    return infoStruct;
+  }
+
+  @Override
+  public InputStream getInputStream(InfoStruct infoStruct) {
+    InputStream is = null;
+    try {
+      File file = infoStruct.getFile();
+      if (!file.exists()) {
+        if (file.createNewFile()) {
+          is = new FileInputStream(file);
+        }
+      } else {
+        is = new FileInputStream(file);
+      }
+    } catch (IOException e) {
+      e.printStackTrace();
+    }
+    return is;
+  }
+
+  @Override
+  public OutputStream getOutputStream(InfoStruct infoStruct) {
+    FileOutputStream fileOutputStream = null;
+    try {
+      File file = infoStruct.getFile();
+      if (!file.exists()) {
+        if (file.createNewFile()) {
+          fileOutputStream = getOutputStreamMonopole(infoStruct);
+        }
+      } else {
+        fileOutputStream = getOutputStreamMonopole(infoStruct);
+      }
+    } catch (IOException e) {
+      e.printStackTrace();
+    }
+    return fileOutputStream;
+  }
+
+  @Nullable
+  private FileOutputStream getOutputStreamMonopole(InfoStruct infoStruct) throws FileNotFoundException {
+    try {
+      writeLock.acquire();
+      Boolean isProcessing = concurrentHashMap.putIfAbsent(infoStruct.getFileName(), false);
+
+      if (isProcessing != null && isProcessing) {
+        FLog.e(DiskCache.class.getName(), " Multiply writers to one file!");
+      } else {
+        return new FileOutputStream(infoStruct.getFile(), true);
+      }
+
+    } catch (InterruptedException e) {
+      e.printStackTrace();
+    } finally {
+      writeLock.release();
+    }
+    return null;
+  }
+
+
+  @Override
+  public void clearCache() {
+    deleteAllInsideRecursively(cacheDir);
+  }
+
+  @Override
+  public void onFinished(InfoStruct infoStruct) {
+    try {
+      writeLock.acquire();
+
+      if (infoStruct.getFile().delete()) {
+        concurrentHashMap.remove(infoStruct.getFileName());
+      }
+    } catch (InterruptedException e) {
+      e.printStackTrace();
+    } finally {
+      writeLock.release();
+    }
+  }
+
+  @Override
+  public void onError(InfoStruct infoStruct, Throwable throwable) {
+    try {
+      writeLock.acquire();
+
+      concurrentHashMap.put(infoStruct.getFileName(), false);
+    } catch (InterruptedException e) {
+      e.printStackTrace();
+    } finally {
+      writeLock.release();
+    }
+  }
+
+  /**
+   * Deletes the given folder and all its files / subfolders.
+   * Is not implemented in a recursive way. The "Recursively" in the name stems from the filesystem command
+   *
+   * @param root The folder to delete recursively
+   */
+  public static void deleteAllInsideRecursively(final File root) {
+    LinkedList<File> deletionQueue = new LinkedList<>();
+    deletionQueue.add(root);
+
+    while (!deletionQueue.isEmpty()) {
+      final File toDelete = deletionQueue.removeFirst();
+      final File[] children = toDelete.listFiles();
+
+      if (children == null || children.length == 0) {
+        // This is either a file or an empty directory -> deletion possible
+        if (toDelete != root) {
+          toDelete.delete();
+        }
+      } else {
+        // Add the children before the folder because they have to be deleted first
+        deletionQueue.addAll(Arrays.asList(children));
+        // Add the folder again because we can't delete it yet.
+        deletionQueue.addLast(toDelete);
+      }
+    }
+  }
+}
+
+
+
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/DiskCacheInterface.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/DiskCacheInterface.java
new file mode 100644
index 000000000..5d3f7e881
--- /dev/null
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/DiskCacheInterface.java
@@ -0,0 +1,82 @@
+package com.facebook.imagepipeline.cache;
+
+import java.io.File;
+import java.io.InputStream;
+import java.io.OutputStream;
+
+public interface DiskCacheInterface {
+  InfoStruct getFile(String url);
+
+  InputStream getInputStream(InfoStruct infoStruct);
+
+  OutputStream getOutputStream(InfoStruct infoStruct);
+
+  void clearCache();
+
+  void onFinished(InfoStruct infoStruct);
+
+  void onError(InfoStruct infoStruct, Throwable throwable);
+
+  class InfoStruct {
+    private int fileName;
+    private int fileOffset;
+    private File file;
+
+    public int getFileName() {
+      return fileName;
+    }
+
+    public void setFileName(int fileName) {
+      this.fileName = fileName;
+    }
+
+    public int getFileOffset() {
+      return fileOffset;
+    }
+
+    public void setFileOffset(int fileOffset) {
+      this.fileOffset = fileOffset;
+    }
+
+    public File getFile() {
+      return file;
+    }
+
+    public void setFile(File file) {
+      this.file = file;
+    }
+  }
+
+
+  public static class DumbDiskCahce implements DiskCacheInterface {
+    @Override
+    public InfoStruct getFile(String url) {
+      return null;
+    }
+
+    @Override
+    public InputStream getInputStream(InfoStruct infoStruct) {
+      return null;
+    }
+
+    @Override
+    public OutputStream getOutputStream(InfoStruct infoStruct) {
+      return null;
+    }
+
+    @Override
+    public void clearCache() {
+
+    }
+
+    @Override
+    public void onFinished(InfoStruct infoStruct) {
+
+    }
+
+    @Override
+    public void onError(InfoStruct infoStruct, Throwable throwable) {
+
+    }
+  }
+}
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DoubleSourceStream.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DoubleSourceStream.java
new file mode 100644
index 000000000..d243aa8b8
--- /dev/null
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DoubleSourceStream.java
@@ -0,0 +1,123 @@
+package com.facebook.imagepipeline.producers;
+
+import android.support.annotation.NonNull;
+
+import com.facebook.common.logging.FLog;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+
+/**
+ * Class reads from first {@link java.io.InputStream} and when it ends
+ * continues to read from second {@link java.io.InputStream}
+ */
+public class DoubleSourceStream extends InputStream {
+  private static final String TAG = DoubleSourceStream.class.getName();
+
+  private InputStream firstInputStream;
+  private InputStream secondInputStream;
+
+  private OutputStream firstOutputStream;
+
+  private boolean firstEnds = false;
+  private int firstInputStreamTotalRead = 0;
+  private int secondInputStreamTotalRead = 0;
+
+  public DoubleSourceStream(InputStream firstInputStream,
+                            @NonNull InputStream secondInputStream,
+                            OutputStream firstOutputStream) {
+    this.firstInputStream = firstInputStream;
+    this.secondInputStream = secondInputStream;
+
+    this.firstOutputStream = firstOutputStream;
+
+    if (this.firstInputStream == null) {
+      firstEnds = true;
+    }
+  }
+
+  @Override
+  public void close() throws IOException {
+    try {
+      firstInputStream.close();
+    } finally {
+      try {
+        if (secondInputStream != null) {
+          secondInputStream.close();
+        }
+      } finally {
+        if (firstOutputStream != null) {
+          firstOutputStream.close();
+        }
+      }
+    }
+  }
+
+  @Override
+  public int available() throws IOException {
+    if (!firstEnds) {
+      return firstInputStream.available();
+    } else if (secondInputStream != null) {
+      return secondInputStream.available();
+    }
+    return 0;
+  }
+
+  @Override
+  public int read() throws IOException {
+    int value;
+
+    if (!firstEnds) {
+      value = firstInputStream.read();
+      if (value != -1) {
+        return value;
+      }
+      firstEnds = true;
+    }
+    value = secondInputStream.read();
+
+    if (firstOutputStream != null && value != -1) {
+      firstOutputStream.write(value);
+    }
+
+    return value;
+  }
+
+  @Override
+  public int read(@NonNull byte[] buffer, int byteOffset, int byteCount) throws IOException {
+    checkOffsetAndCount(buffer.length, byteOffset, byteCount);
+
+    int bytesRead;
+    if (!firstEnds) {
+      bytesRead = firstInputStream.read(buffer, byteOffset, byteCount);
+      if (bytesRead != -1) {
+        firstInputStreamTotalRead += bytesRead;
+        FLog.w(TAG, "Read from firstInputStream " + bytesRead + " bytes. Totally read from source: " + firstInputStreamTotalRead + " bytes");
+
+        return bytesRead;
+      }
+      FLog.w(TAG, "FirstInputStream ended. Totally read " + firstInputStreamTotalRead);
+      firstEnds = true;
+    }
+
+    bytesRead = secondInputStream.read(buffer, byteOffset, byteCount);
+    if (bytesRead != -1) {
+      secondInputStreamTotalRead += bytesRead;
+      FLog.w(TAG, "Read from secondInputStream " + bytesRead + " bytes. Totally read from source: " + secondInputStreamTotalRead + " bytes");
+    }
+
+    if (firstOutputStream != null && bytesRead != -1) {
+      firstOutputStream.write(buffer, byteOffset, bytesRead);
+      firstOutputStream.flush();
+    }
+
+    return bytesRead;
+  }
+
+  private void checkOffsetAndCount(int arrayLength, int offset, int count) {
+    if ((offset | count) < 0 || offset > arrayLength || arrayLength - offset < count) {
+      throw new ArrayIndexOutOfBoundsException();
+    }
+  }
+}
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/SmartCachingFetcher.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/SmartCachingFetcher.java
new file mode 100644
index 000000000..a63e86813
--- /dev/null
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/SmartCachingFetcher.java
@@ -0,0 +1,128 @@
+package com.facebook.imagepipeline.producers;
+
+import android.net.Uri;
+
+import com.facebook.common.logging.FLog;
+import com.facebook.imagepipeline.cache.DiskCache;
+import com.facebook.imagepipeline.cache.DiskCacheInterface;
+import com.facebook.imagepipeline.image.EncodedImage;
+
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+
+/**
+ * Created by art on 2/4/16.
+ */
+public class SmartCachingFetcher extends BaseNetworkFetcher<FetchState> {
+  private static final String TAG = SmartCachingFetcher.class.getName();
+
+  private static final int NUM_NETWORK_THREADS = 3;
+
+  private final ExecutorService mExecutorService;
+  private DiskCache diskCache;
+
+
+  public SmartCachingFetcher(DiskCache diskCache) {
+    this.diskCache = diskCache;
+    mExecutorService = Executors.newFixedThreadPool(NUM_NETWORK_THREADS);
+  }
+
+  @Override
+  public FetchState createFetchState(Consumer<EncodedImage> consumer, ProducerContext context) {
+    return new FetchState(consumer, context);
+  }
+
+  @Override
+  public void fetch(final FetchState fetchState, final Callback callback) {
+    final Future<?> future = mExecutorService.submit(
+            new Runnable() {
+              @Override
+              public void run() {
+                HttpURLConnection connection = null;
+
+                InputStream firstInputStream;
+                InputStream secondInputStream;
+                OutputStream outputStream;
+
+                Uri uri = fetchState.getUri();
+                String scheme = uri.getScheme();
+                String uriString = fetchState.getUri().toString();
+
+                DiskCacheInterface.InfoStruct infoStruct = diskCache.getFile(uriString);
+
+                while (true) {
+                  String nextUriString;
+                  String nextScheme;
+
+                  try {
+                    final String rangeHeader = "bytes=" + infoStruct.getFileOffset() + "-";
+                    FLog.w(TAG, "Trying offset value: " + infoStruct.getFileOffset());
+
+                    URL url = new URL(uriString);
+                    connection = (HttpURLConnection) url.openConnection();
+                    connection.setRequestProperty("Range", rangeHeader);
+
+                    nextUriString = connection.getHeaderField("Location");
+                    nextScheme = (nextUriString == null) ? null : Uri.parse(nextUriString).getScheme();
+
+                    if (nextUriString == null || nextScheme.equals(scheme)) {
+                      int contentLengthValue = -1;
+
+                      String acceptRanges = connection.getHeaderField("Accept-Ranges");
+                      InputStream is;
+                      //If response is 206 (allows partitioning)
+                      if (connection.getResponseCode() == HttpURLConnection.HTTP_PARTIAL) {
+
+                        firstInputStream = diskCache.getInputStream(infoStruct);
+                        secondInputStream = connection.getInputStream();
+
+                        outputStream = diskCache.getOutputStream(infoStruct);
+                        is = new DoubleSourceStream(firstInputStream, secondInputStream, outputStream);
+                      } else {
+                        is = connection.getInputStream();
+                      }
+
+                      //Content-Length header parsing
+                      String contentLengthHeader = connection.getHeaderField("Content-Length");
+                      if (contentLengthHeader != null) {
+                        contentLengthValue = Integer.parseInt(contentLengthHeader);
+                      }
+
+                      callback.onResponse(is, contentLengthValue);
+                      diskCache.onFinished(infoStruct);
+                      break;
+                    }
+                    uriString = nextUriString;
+                    scheme = nextScheme;
+                  } catch (Exception e) {
+                    diskCache.onError(infoStruct, e);
+                    callback.onFailure(e);
+                    break;
+                  } finally {
+
+                    if (connection != null) {
+                      connection.disconnect();
+                    }
+                  }
+                }
+
+              }
+            });
+    fetchState.getContext().addCallbacks(
+            new BaseProducerContextCallbacks() {
+              @Override
+              public void onCancellationRequested() {
+                if (future.cancel(false)) {
+                  callback.onCancellation();
+                }
+              }
+            });
+  }
+
+}
+
diff --git a/samples/redownloadingapp/.gitignore b/samples/redownloadingapp/.gitignore
new file mode 100644
index 000000000..796b96d1c
--- /dev/null
+++ b/samples/redownloadingapp/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/samples/redownloadingapp/build.gradle b/samples/redownloadingapp/build.gradle
new file mode 100644
index 000000000..914a117e0
--- /dev/null
+++ b/samples/redownloadingapp/build.gradle
@@ -0,0 +1,39 @@
+apply plugin: 'com.android.application'
+
+dependencies {
+    compile project(':drawee-backends:drawee-pipeline')
+}
+
+android {
+    buildToolsVersion rootProject.ext.buildToolsVersion
+    compileSdkVersion rootProject.ext.compileSdkVersion
+    defaultConfig {
+        applicationId "com.facebook.samples.redownloadingapp"
+        minSdkVersion 9
+        targetSdkVersion 21
+        versionCode 1
+        versionName "${VERSION_NAME}"
+
+        testApplicationId "com.facebook.samples.redownloadingapp.test"
+        testInstrumentationRunner "android.test.InstrumentationTestRunner"
+    }
+    buildTypes {
+        release {
+            minifyEnabled true
+            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), '../../proguard-fresco.pro'
+        }
+    }
+
+    lintOptions {
+        warning 'InvalidPackage'
+    }
+
+    splits {
+        abi {
+            enable true
+            reset()
+            include 'x86', 'x86_64', 'arm64-v8a', 'armeabi-v7a', 'armeabi'
+            universalApk false
+        }
+    }
+}
diff --git a/samples/redownloadingapp/proguard-rules.pro b/samples/redownloadingapp/proguard-rules.pro
new file mode 100644
index 000000000..a6ff9b070
--- /dev/null
+++ b/samples/redownloadingapp/proguard-rules.pro
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in /home/art/Software/android-sdk-preview/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/samples/redownloadingapp/src/androidTest/java/com/facebook/samples/redownloadingapp/ApplicationTest.java b/samples/redownloadingapp/src/androidTest/java/com/facebook/samples/redownloadingapp/ApplicationTest.java
new file mode 100644
index 000000000..c481cf743
--- /dev/null
+++ b/samples/redownloadingapp/src/androidTest/java/com/facebook/samples/redownloadingapp/ApplicationTest.java
@@ -0,0 +1,13 @@
+package com.facebook.samples.redownloadingapp;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+/**
+ * <a href="http://d.android.com/tools/testing/testing_android.html">Testing Fundamentals</a>
+ */
+public class ApplicationTest extends ApplicationTestCase<Application> {
+    public ApplicationTest() {
+        super(Application.class);
+    }
+}
\ No newline at end of file
diff --git a/samples/redownloadingapp/src/main/AndroidManifest.xml b/samples/redownloadingapp/src/main/AndroidManifest.xml
new file mode 100644
index 000000000..d77cabc70
--- /dev/null
+++ b/samples/redownloadingapp/src/main/AndroidManifest.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.facebook.samples.redownloadingapp" >
+
+    <uses-permission android:name="android.permission.INTERNET" />
+
+    <uses-sdk
+        android:minSdkVersion="9"
+        android:targetSdkVersion="21"
+        />
+
+    <application
+        android:allowBackup="true"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name">
+        <activity
+            android:name=".MainActivity"
+            android:label="@string/app_name" >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+    </application>
+
+</manifest>
diff --git a/samples/redownloadingapp/src/main/java/com/facebook/samples/redownloadingapp/MainActivity.java b/samples/redownloadingapp/src/main/java/com/facebook/samples/redownloadingapp/MainActivity.java
new file mode 100644
index 000000000..8cea57cad
--- /dev/null
+++ b/samples/redownloadingapp/src/main/java/com/facebook/samples/redownloadingapp/MainActivity.java
@@ -0,0 +1,140 @@
+/*
+ * This file provided by Facebook is for non-commercial testing and evaluation
+ * purposes only.  Facebook reserves all rights not expressly granted.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.redownloadingapp;
+
+import java.util.HashSet;
+import java.util.Set;
+
+import android.app.Activity;
+import android.graphics.drawable.Animatable;
+import android.net.Uri;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.view.View;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.Toast;
+
+import com.facebook.common.logging.FLog;
+import com.facebook.drawee.backends.pipeline.Fresco;
+import com.facebook.drawee.controller.ControllerListener;
+import com.facebook.drawee.drawable.ProgressBarDrawable;
+import com.facebook.drawee.generic.GenericDraweeHierarchy;
+import com.facebook.drawee.generic.GenericDraweeHierarchyBuilder;
+import com.facebook.drawee.interfaces.DraweeController;
+import com.facebook.drawee.view.SimpleDraweeView;
+import com.facebook.imagepipeline.cache.DiskCache;
+import com.facebook.imagepipeline.core.ImagePipeline;
+import com.facebook.imagepipeline.core.ImagePipelineConfig;
+import com.facebook.imagepipeline.image.ImageInfo;
+import com.facebook.imagepipeline.listener.RequestListener;
+import com.facebook.imagepipeline.listener.RequestLoggingListener;
+import com.facebook.imagepipeline.producers.SmartCachingFetcher;
+
+
+public class MainActivity extends Activity {
+  private SimpleDraweeView mSimpleDraweeView;
+
+  @Override
+  protected void onCreate(Bundle savedInstanceState) {
+    super.onCreate(savedInstanceState);
+
+    FLog.setMinimumLoggingLevel(FLog.VERBOSE);
+    Set<RequestListener> listeners = new HashSet<>();
+    listeners.add(new RequestLoggingListener());
+
+    final DiskCache diskCache = DiskCache.getInstance(this);
+
+    ImagePipelineConfig config = ImagePipelineConfig.newBuilder(this)
+            .setNetworkFetcher(new SmartCachingFetcher(diskCache))
+            .setRequestListeners(listeners)
+            .build();
+    Fresco.initialize(this, config);
+    setContentView(R.layout.activity_main);
+
+    mSimpleDraweeView = (SimpleDraweeView) findViewById(R.id.simple_drawee_view);
+
+
+    final EditText editText = (EditText) findViewById(R.id.uri_edit_text);
+    Button downloadButton = (Button) findViewById(R.id.download_button);
+    Button clearCacheButton = (Button) findViewById(R.id.clear_cache_button);
+
+    editText.setText("https://upload.wikimedia.org/wikipedia/commons/6/61/Flat_earth_night.png");
+
+    downloadButton.setOnClickListener(new View.OnClickListener() {
+      @Override
+      public void onClick(View v) {
+        updateImageUri(Uri.parse(editText.getText().toString()));
+      }
+    });
+
+    clearCacheButton.setOnClickListener(new View.OnClickListener() {
+      @Override
+      public void onClick(View v) {
+        ImagePipeline imagePipeline = Fresco.getImagePipeline();
+
+        imagePipeline.clearCaches();
+
+        diskCache.clearCache();
+      }
+    });
+  }
+
+  private void updateImageUri(Uri uri) {
+    DraweeController controller = Fresco.newDraweeControllerBuilder()
+            .setUri(uri)
+            .setAutoPlayAnimations(true)
+            .setControllerListener(new ControllerListener<ImageInfo>() {
+              @Override
+              public void onSubmit(String id, Object callerContext) {
+                Toast.makeText(MainActivity.this, "onSubmit", Toast.LENGTH_SHORT).show();
+              }
+
+              @Override
+              public void onFinalImageSet(String id, @Nullable ImageInfo imageInfo, @Nullable Animatable animatable) {
+                Toast.makeText(MainActivity.this, "onFinalImageSet", Toast.LENGTH_SHORT).show();
+              }
+
+              @Override
+              public void onIntermediateImageSet(String id, @Nullable ImageInfo imageInfo) {
+                Toast.makeText(MainActivity.this, "onIntermediateImageSet", Toast.LENGTH_SHORT).show();
+              }
+
+              @Override
+              public void onIntermediateImageFailed(String id, Throwable throwable) {
+                Toast.makeText(MainActivity.this, "onIntermediateImageFailed", Toast.LENGTH_SHORT).show();
+              }
+
+              @Override
+              public void onFailure(String id, Throwable throwable) {
+                Toast.makeText(MainActivity.this, "onFailure", Toast.LENGTH_SHORT).show();
+              }
+
+              @Override
+              public void onRelease(String id) {
+                Toast.makeText(MainActivity.this, "onRelease", Toast.LENGTH_SHORT).show();
+              }
+            })
+            .build();
+
+    GenericDraweeHierarchy hierarchy = new GenericDraweeHierarchyBuilder(getResources())
+            .setProgressBarImage(new ProgressBarDrawable())
+            .setFailureImage(getResources().getDrawable(R.drawable.error))
+            .build();
+
+    mSimpleDraweeView.setHierarchy(hierarchy);
+
+    mSimpleDraweeView.setHierarchy(hierarchy);
+    mSimpleDraweeView.setController(controller);
+  }
+}
diff --git a/samples/redownloadingapp/src/main/res/drawable/error.png b/samples/redownloadingapp/src/main/res/drawable/error.png
new file mode 100644
index 000000000..001448a7f
Binary files /dev/null and b/samples/redownloadingapp/src/main/res/drawable/error.png differ
diff --git a/samples/redownloadingapp/src/main/res/layout/activity_main.xml b/samples/redownloadingapp/src/main/res/layout/activity_main.xml
new file mode 100644
index 000000000..70e3d4049
--- /dev/null
+++ b/samples/redownloadingapp/src/main/res/layout/activity_main.xml
@@ -0,0 +1,52 @@
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    xmlns:fresco="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    android:baselineAligned="false"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    tools:context="com.facebook.samples.redownloadingapp.MainActivity" >
+
+    <EditText
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:id="@+id/uri_edit_text"
+        android:layout_gravity="center_horizontal"
+        android:layout_weight="0"
+        android:singleLine="true"
+        android:imeOptions="actionDone"
+        android:hint="@string/uri_edit_text_hint" />
+
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content">
+
+        <Button
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:id="@+id/download_button"
+            android:text="@string/download_button_hint"
+            android:layout_weight="0" />
+
+        <Button
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:id="@+id/clear_cache_button"
+            android:text="@string/clear_cache_button_hint"
+            android:layout_marginLeft="10dp" />
+    </LinearLayout>
+
+    <com.facebook.drawee.view.SimpleDraweeView
+        android:id="@+id/simple_drawee_view"
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        android:layout_weight="1"
+        fresco:actualImageScaleType="fitCenter"
+        fresco:failureImage="@color/red"/>
+</LinearLayout>
diff --git a/samples/redownloadingapp/src/main/res/mipmap-hdpi/ic_launcher.png b/samples/redownloadingapp/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100644
index 000000000..cde69bccc
Binary files /dev/null and b/samples/redownloadingapp/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/samples/redownloadingapp/src/main/res/mipmap-mdpi/ic_launcher.png b/samples/redownloadingapp/src/main/res/mipmap-mdpi/ic_launcher.png
new file mode 100644
index 000000000..c133a0cbd
Binary files /dev/null and b/samples/redownloadingapp/src/main/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/samples/redownloadingapp/src/main/res/mipmap-xhdpi/ic_launcher.png b/samples/redownloadingapp/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100644
index 000000000..bfa42f0e7
Binary files /dev/null and b/samples/redownloadingapp/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/samples/redownloadingapp/src/main/res/mipmap-xxhdpi/ic_launcher.png b/samples/redownloadingapp/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100644
index 000000000..324e72cdd
Binary files /dev/null and b/samples/redownloadingapp/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/samples/redownloadingapp/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/samples/redownloadingapp/src/main/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100644
index 000000000..aee44e138
Binary files /dev/null and b/samples/redownloadingapp/src/main/res/mipmap-xxxhdpi/ic_launcher.png differ
diff --git a/samples/redownloadingapp/src/main/res/values/colors.xml b/samples/redownloadingapp/src/main/res/values/colors.xml
new file mode 100644
index 000000000..eef11c1d3
--- /dev/null
+++ b/samples/redownloadingapp/src/main/res/values/colors.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="colorPrimary">#3F51B5</color>
+    <color name="colorPrimaryDark">#303F9F</color>
+    <color name="colorAccent">#FF4081</color>
+    <color name="red">#ff0000</color>
+</resources>
diff --git a/samples/redownloadingapp/src/main/res/values/dimens.xml b/samples/redownloadingapp/src/main/res/values/dimens.xml
new file mode 100644
index 000000000..47c822467
--- /dev/null
+++ b/samples/redownloadingapp/src/main/res/values/dimens.xml
@@ -0,0 +1,5 @@
+<resources>
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="activity_vertical_margin">16dp</dimen>
+</resources>
diff --git a/samples/redownloadingapp/src/main/res/values/strings.xml b/samples/redownloadingapp/src/main/res/values/strings.xml
new file mode 100644
index 000000000..58e296e25
--- /dev/null
+++ b/samples/redownloadingapp/src/main/res/values/strings.xml
@@ -0,0 +1,6 @@
+<resources>
+    <string name="app_name">Fresco Uri App</string>
+    <string name="uri_edit_text_hint">Type uri here!</string>
+    <string name="download_button_hint">Download</string>
+    <string name="clear_cache_button_hint">Clear cache</string>
+</resources>
diff --git a/samples/redownloadingapp/src/test/java/com/facebook/samples/myapplication/ExampleUnitTest.java b/samples/redownloadingapp/src/test/java/com/facebook/samples/myapplication/ExampleUnitTest.java
new file mode 100644
index 000000000..f05d957ff
--- /dev/null
+++ b/samples/redownloadingapp/src/test/java/com/facebook/samples/myapplication/ExampleUnitTest.java
@@ -0,0 +1,15 @@
+package com.facebook.samples.myapplication;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * To work on unit tests, switch the Test Artifact in the Build Variants view.
+ */
+public class ExampleUnitTest {
+    @Test
+    public void addition_isCorrect() throws Exception {
+        assertEquals(4, 2 + 2);
+    }
+}
\ No newline at end of file
diff --git a/samples/uriapp/src/main/res/layout/activity_main.xml b/samples/uriapp/src/main/res/layout/activity_main.xml
index d2191b10e..227466f52 100644
--- a/samples/uriapp/src/main/res/layout/activity_main.xml
+++ b/samples/uriapp/src/main/res/layout/activity_main.xml
@@ -10,7 +10,7 @@
     android:paddingLeft="@dimen/activity_horizontal_margin"
     android:paddingRight="@dimen/activity_horizontal_margin"
     android:paddingTop="@dimen/activity_vertical_margin"
-    tools:context="com.facebook.uri.MainActivity" >
+    tools:context="com.facebook.samples.uriapp.MainActivity" >
 
     <EditText
         android:layout_width="match_parent"
diff --git a/settings.gradle b/settings.gradle
index a1a223cf0..1faa1d541 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -8,6 +8,7 @@ include ':samples:gestures'
 include ':samples:demo'
 include ':samples:round'
 include ':samples:uriapp'
+include 'samples:redownloadingapp'
 include ':samples:zoomable'
 include ':samples:transition'
 include ':tools:stetho'
