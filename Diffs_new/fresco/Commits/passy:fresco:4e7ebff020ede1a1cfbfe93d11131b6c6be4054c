diff --git a/fbcore/src/main/java/com/facebook/common/references/CloseableReference.java b/fbcore/src/main/java/com/facebook/common/references/CloseableReference.java
index ffeb631b9..1cfebbcad 100644
--- a/fbcore/src/main/java/com/facebook/common/references/CloseableReference.java
+++ b/fbcore/src/main/java/com/facebook/common/references/CloseableReference.java
@@ -66,10 +66,10 @@
   @GuardedBy("this")
   private boolean mIsClosed = false;
   private final SharedReference<T> mSharedReference;
-  private final LeakHandler<T> mLeakHandler;
+  private final LeakHandler mLeakHandler;
 
-  public interface LeakHandler<T> {
-    void reportLeak(SharedReference<T> reference);
+  public interface LeakHandler {
+    void reportLeak(SharedReference<Object> reference);
   }
 
   private static final ResourceReleaser<Closeable> DEFAULT_CLOSEABLE_RELEASER =
@@ -84,8 +84,8 @@ public void release(Closeable value) {
         }
       };
 
-  private static final LeakHandler<Object> DEFAULT_LEAK_HANDLER =
-      new LeakHandler<Object>() {
+  private static final LeakHandler DEFAULT_LEAK_HANDLER =
+      new LeakHandler() {
         @Override
         public void reportLeak(SharedReference<Object> reference) {
           FLog.w(
@@ -97,14 +97,13 @@ public void reportLeak(SharedReference<Object> reference) {
         }
       };
 
-  private CloseableReference(SharedReference<T> sharedReference, LeakHandler<T> leakHandler) {
+  private CloseableReference(SharedReference<T> sharedReference, LeakHandler leakHandler) {
     mSharedReference = Preconditions.checkNotNull(sharedReference);
     sharedReference.addReference();
     mLeakHandler = leakHandler;
   }
 
-  private CloseableReference(
-      T t, ResourceReleaser<T> resourceReleaser, LeakHandler<T> leakHandler) {
+  private CloseableReference(T t, ResourceReleaser<T> resourceReleaser, LeakHandler leakHandler) {
     mSharedReference = new SharedReference<T>(t, resourceReleaser);
     mLeakHandler = leakHandler;
   }
@@ -125,7 +124,7 @@ private CloseableReference(
    * <p>Returns null if the parameter is null.
    */
   public static <T extends Closeable> CloseableReference<T> of(
-      @PropagatesNullable T t, LeakHandler<T> leakHandler) {
+      @PropagatesNullable T t, LeakHandler leakHandler) {
     if (t == null) {
       return null;
     } else {
@@ -140,7 +139,7 @@ private CloseableReference(
    */
   public static <T> CloseableReference<T> of(
       @PropagatesNullable T t, ResourceReleaser<T> resourceReleaser) {
-    return of(t, resourceReleaser, (LeakHandler<T>) DEFAULT_LEAK_HANDLER);
+    return of(t, resourceReleaser, DEFAULT_LEAK_HANDLER);
   }
 
   /**
@@ -149,7 +148,7 @@ private CloseableReference(
    * t is null, this will just return null.
    */
   public static <T> CloseableReference<T> of(
-      @PropagatesNullable T t, ResourceReleaser<T> resourceReleaser, LeakHandler<T> leakHandler) {
+      @PropagatesNullable T t, ResourceReleaser<T> resourceReleaser, LeakHandler leakHandler) {
     if (t == null) {
       return null;
     } else {
@@ -301,7 +300,7 @@ protected void finalize() throws Throwable {
         }
       }
 
-      mLeakHandler.reportLeak(mSharedReference);
+      mLeakHandler.reportLeak((SharedReference<Object>) mSharedReference);
 
       close();
     } finally {
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/CloseableReferenceFactory.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/CloseableReferenceFactory.java
index 7dca3a2e8..d053bee8b 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/CloseableReferenceFactory.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/CloseableReferenceFactory.java
@@ -15,14 +15,14 @@
 
 public class CloseableReferenceFactory {
 
-  private final CloseableReference.LeakHandler<Closeable> mLeakHandler;
+  private final CloseableReference.LeakHandler mLeakHandler;
 
   public CloseableReferenceFactory(
       final CloseableReferenceLeakTracker closeableReferenceLeakTracker) {
     mLeakHandler =
-        new CloseableReference.LeakHandler<Closeable>() {
+        new CloseableReference.LeakHandler() {
           @Override
-          public void reportLeak(SharedReference<Closeable> reference) {
+          public void reportLeak(SharedReference<Object> reference) {
             closeableReferenceLeakTracker.trackCloseableReferenceLeak(reference);
             FLog.w(
                 "Fresco",
@@ -35,11 +35,10 @@ public void reportLeak(SharedReference<Closeable> reference) {
   }
 
   public <U extends Closeable> CloseableReference<U> create(U u) {
-    return (CloseableReference<U>) CloseableReference.of(u, mLeakHandler);
+    return CloseableReference.of(u, mLeakHandler);
   }
 
   public <T> CloseableReference<T> create(T t, ResourceReleaser<T> resourceReleaser) {
-    return CloseableReference.of(
-        t, resourceReleaser, (CloseableReference.LeakHandler<T>) mLeakHandler);
+    return CloseableReference.of(t, resourceReleaser, mLeakHandler);
   }
 }
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/debug/CloseableReferenceLeakTracker.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/debug/CloseableReferenceLeakTracker.java
index 5d964ab23..b8a0f4d35 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/debug/CloseableReferenceLeakTracker.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/debug/CloseableReferenceLeakTracker.java
@@ -7,7 +7,6 @@
 package com.facebook.imagepipeline.debug;
 
 import com.facebook.common.references.SharedReference;
-import java.io.Closeable;
 import javax.annotation.Nullable;
 
 /**
@@ -16,10 +15,10 @@
  */
 public interface CloseableReferenceLeakTracker {
   interface Listener {
-    void onCloseableReferenceLeak(SharedReference<Closeable> reference);
+    void onCloseableReferenceLeak(SharedReference<Object> reference);
   }
 
-  void trackCloseableReferenceLeak(SharedReference<Closeable> reference);
+  void trackCloseableReferenceLeak(SharedReference<Object> reference);
 
   void setListener(@Nullable Listener listener);
 }
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/debug/NoOpCloseableReferenceLeakTracker.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/debug/NoOpCloseableReferenceLeakTracker.java
index 2c6ebd8ab..f50caa016 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/debug/NoOpCloseableReferenceLeakTracker.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/debug/NoOpCloseableReferenceLeakTracker.java
@@ -7,13 +7,12 @@
 package com.facebook.imagepipeline.debug;
 
 import com.facebook.common.references.SharedReference;
-import java.io.Closeable;
 import javax.annotation.Nullable;
 
 public class NoOpCloseableReferenceLeakTracker implements CloseableReferenceLeakTracker {
 
   @Override
-  public void trackCloseableReferenceLeak(SharedReference<Closeable> reference) {}
+  public void trackCloseableReferenceLeak(SharedReference<Object> reference) {}
 
   @Override
   public void setListener(@Nullable Listener listener) {}
diff --git a/tools/flipper/src/main/java/com/facebook/imagepipeline/debug/FlipperCloseableReferenceLeakTracker.java b/tools/flipper/src/main/java/com/facebook/imagepipeline/debug/FlipperCloseableReferenceLeakTracker.java
index 9e3a735f1..9ecd8efb6 100644
--- a/tools/flipper/src/main/java/com/facebook/imagepipeline/debug/FlipperCloseableReferenceLeakTracker.java
+++ b/tools/flipper/src/main/java/com/facebook/imagepipeline/debug/FlipperCloseableReferenceLeakTracker.java
@@ -8,14 +8,13 @@
 
 import android.util.Log;
 import com.facebook.common.references.SharedReference;
-import java.io.Closeable;
 import javax.annotation.Nullable;
 
 public class FlipperCloseableReferenceLeakTracker implements CloseableReferenceLeakTracker {
   @Nullable private Listener mListener;
 
   @Override
-  public void trackCloseableReferenceLeak(SharedReference<Closeable> reference) {
+  public void trackCloseableReferenceLeak(SharedReference<Object> reference) {
     if (mListener == null) {
       Log.w("FRESCO", "No Flipper listener registered to track CloseableReference leak.");
       return;
