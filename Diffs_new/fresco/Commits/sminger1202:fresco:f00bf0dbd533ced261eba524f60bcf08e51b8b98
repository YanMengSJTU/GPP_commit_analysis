diff --git a/frescodemoformaven/build.gradle b/frescodemoformaven/build.gradle
new file mode 100644
index 000000000..a50e7943c
--- /dev/null
+++ b/frescodemoformaven/build.gradle
@@ -0,0 +1,35 @@
+apply plugin: 'com.android.application'
+android {
+    compileSdkVersion 21
+    buildToolsVersion "19.1.0"
+
+    defaultConfig {
+        applicationId "in.srain.demos.fresco"
+        minSdkVersion 19
+        targetSdkVersion 19
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
+        }
+    }
+}
+
+dependencies {
+    //compile 'com.facebook.fresco:fresco:0.5.0+'
+    provided "com.google.code.findbugs:jsr305:${JSR_305_VERSION}"
+    compile "com.android.support:appcompat-v7:${APPCOMPAT_V7_VERSION}"
+    compile "com.github.bumptech.glide:glide:${GLIDE_VERSION}"
+    compile "com.mcxiaoke.volley:library:${VOLLEY_VERSION}"
+    compile "com.nostra13.universalimageloader:universal-image-loader:${UIL_VERSION}"
+    compile "com.squareup.picasso:picasso:${PICASSO_VERSION}"
+
+    compile project(':drawee')
+    compile project(':drawee-backends:drawee-pipeline')
+    compile project(':drawee-backends:drawee-volley')
+    compile project(':fbcore')
+    compile project(':imagepipeline')
+    compile project(':imagepipeline-backends:imagepipeline-okhttp')
+}
\ No newline at end of file
diff --git a/frescodemoformaven/src/main/AndroidManifest.xml b/frescodemoformaven/src/main/AndroidManifest.xml
new file mode 100644
index 000000000..f4f5b9793
--- /dev/null
+++ b/frescodemoformaven/src/main/AndroidManifest.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="in.srain.demos.fresco"
+    android:versionCode="1"
+    android:versionName="1.0">
+
+    <uses-sdk
+        android:minSdkVersion="19"
+        android:targetSdkVersion="21" />
+
+    <uses-permission android:name="android.permission.INTERNET" />
+
+    <application
+        android:name=".DemoApp"
+        android:label="@string/app_name">
+        <activity android:name="MainActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+    </application>
+</manifest>
diff --git a/frescodemoformaven/src/main/java/in/srain/demos/fresco/ConfigConstants.java b/frescodemoformaven/src/main/java/in/srain/demos/fresco/ConfigConstants.java
new file mode 100644
index 000000000..bcb8e3bb0
--- /dev/null
+++ b/frescodemoformaven/src/main/java/in/srain/demos/fresco/ConfigConstants.java
@@ -0,0 +1,13 @@
+package in.srain.demos.fresco;
+
+import com.facebook.common.util.ByteConstants;
+
+/**
+ * Created by sminger on 15-5-25.
+ */
+public class ConfigConstants {
+    private static final int MAX_HEAP_SIZE = (int) Runtime.getRuntime().maxMemory();
+
+    public static final int MAX_DISK_CACHE_SIZE = 40 * ByteConstants.MB;
+    public static final int MAX_MEMORY_CACHE_SIZE = MAX_HEAP_SIZE / 4;
+}
diff --git a/frescodemoformaven/src/main/java/in/srain/demos/fresco/DemoApp.java b/frescodemoformaven/src/main/java/in/srain/demos/fresco/DemoApp.java
new file mode 100644
index 000000000..3c1543526
--- /dev/null
+++ b/frescodemoformaven/src/main/java/in/srain/demos/fresco/DemoApp.java
@@ -0,0 +1,75 @@
+package in.srain.demos.fresco;
+
+import android.app.Application;
+import android.content.Context;
+import android.util.Log;
+
+import com.facebook.cache.disk.DiskCacheConfig;
+import com.facebook.common.internal.Supplier;
+import com.facebook.drawee.backends.pipeline.Fresco;
+import com.facebook.imagepipeline.cache.MemoryCacheParams;
+import com.facebook.imagepipeline.core.ImagePipelineConfig;
+import com.facebook.imagepipeline.decoder.ProgressiveJpegConfig;
+import com.facebook.imagepipeline.image.ImmutableQualityInfo;
+import com.facebook.imagepipeline.image.QualityInfo;
+
+public class DemoApp extends Application {
+    private  ImagePipelineConfig ImagePipelineConfig;
+    private static final String IMAGE_PIPELINE_CACHE_DIR = "imagepipeline_cache";
+    @Override
+    public void onCreate() {
+        super.onCreate();
+
+        ProgressiveJpegConfig pjpegConfig = new ProgressiveJpegConfig() {
+
+            @Override
+            public int getNextScanNumberToDecode(int scanNumber) {
+                Log.i("ssss", "ddddddd  scanNumber :" + scanNumber);
+                return scanNumber + 1;
+            }
+
+            @Override
+            public QualityInfo getQualityInfo(int scanNumber) {
+                Log.i("ssss", "dddddddd======getQualityInfo:"+ scanNumber);
+                boolean isGoodEnough = (scanNumber >= 5);
+                return ImmutableQualityInfo.of(scanNumber, isGoodEnough, false);
+            }
+        };
+        ImagePipelineConfig.Builder configBuilder = ImagePipelineConfig.newBuilder(this)
+                .setProgressiveJpegConfig(pjpegConfig);//modify by sminger
+        configureCaches(configBuilder, this);
+        ImagePipelineConfig = configBuilder.build();
+
+        // Fresco.initialize(this);
+
+        Fresco.initialize(this, ImagePipelineConfig);
+        Fresco.getImagePipeline();
+    }
+
+    /**
+     * Configures disk and memory cache not to exceed common limits
+     */
+    private static void configureCaches(
+            ImagePipelineConfig.Builder configBuilder,
+            Context context) {
+        final MemoryCacheParams bitmapCacheParams = new MemoryCacheParams(
+                ConfigConstants.MAX_MEMORY_CACHE_SIZE, // Max total size of elements in the cache
+                Integer.MAX_VALUE,                     // Max entries in the cache
+                ConfigConstants.MAX_MEMORY_CACHE_SIZE, // Max total size of elements in eviction queue
+                Integer.MAX_VALUE,                     // Max length of eviction queue
+                Integer.MAX_VALUE);                    // Max cache entry size
+        configBuilder
+                .setBitmapMemoryCacheParamsSupplier(
+                        new Supplier<MemoryCacheParams>() {
+                            public MemoryCacheParams get() {
+                                return bitmapCacheParams;
+                            }
+                        })
+                .setMainDiskCacheConfig(
+                        DiskCacheConfig.newBuilder()
+                                .setBaseDirectoryPath(context.getApplicationContext().getCacheDir())
+                                .setBaseDirectoryName(IMAGE_PIPELINE_CACHE_DIR)
+                                .setMaxCacheSize(ConfigConstants.MAX_DISK_CACHE_SIZE)
+                                .build());
+    }
+}
diff --git a/frescodemoformaven/src/main/java/in/srain/demos/fresco/MainActivity.java b/frescodemoformaven/src/main/java/in/srain/demos/fresco/MainActivity.java
new file mode 100644
index 000000000..5be6c16c4
--- /dev/null
+++ b/frescodemoformaven/src/main/java/in/srain/demos/fresco/MainActivity.java
@@ -0,0 +1,85 @@
+package in.srain.demos.fresco;
+
+import android.app.Activity;
+import android.net.Uri;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.View;
+import android.widget.Button;
+import android.widget.Toast;
+
+import com.facebook.cache.common.CacheKey;
+import com.facebook.common.internal.AndroidPredicates;
+import com.facebook.drawee.backends.pipeline.Fresco;
+import com.facebook.drawee.interfaces.DraweeController;
+import com.facebook.drawee.view.SimpleDraweeView;
+import com.facebook.imagepipeline.request.ImageRequest;
+import com.facebook.imagepipeline.request.ImageRequestBuilder;
+
+public class MainActivity extends Activity {
+    //Uri aniImageUri = Uri.parse("https://camo.githubusercontent.com/588a2ef2cdcfb6c71e88437df486226dd15605b3/687474703a2f2f737261696e2d6769746875622e71696e6975646e2e636f6d2f756c7472612d7074722f73746f72652d686f7573652d737472696e672d61727261792e676966");
+    //Uri proImageUri = Uri.parse("http://192.168.1.135:8080/image/king_pro.jpg");
+    //Uri proImageUri = Uri.parse("http://192.168.1.135:8080/image/DSC_0097_pro.JPG");
+    //Uri proImageUri = Uri.parse("http://192.168.1.135:8080/image/DSC_0097_HD1080_pro.jpg");
+    //Uri proImageUri = Uri.parse("http://192.168.1.135:8080/image/DSC_final.JPG");
+    //Uri proImageUri = Uri.parse("http://192.168.1.135:8080/image/DSC_final_pro.JPG");
+    final Uri proImageUri = Uri.parse("http://images.shigeten.net/images/DSC_final_pro.JPG");
+    final Uri lowResUri = Uri.parse("http://u4.tdimg.com/7/147/82/31804659546604080410941337579323207967.jpg");
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.main_activity);
+
+        //final SimpleDraweeView simpleDraweeView = (SimpleDraweeView) findViewById(R.id.logo_image);
+        final SimpleDraweeView progressivePic = (SimpleDraweeView) findViewById(R.id.progressive);
+        Button buttonClearCache = (Button) findViewById(R.id.clearCache);
+        Button buttonReload = (Button) findViewById(R.id.reload);
+//        simpleDraweeView.setOnClickListener(new View.OnClickListener() {
+//            @Override
+//            public void onClick(View v) {
+//                Toast toast = Toast.makeText(getApplicationContext()," Clear the Cache !" ,Toast.LENGTH_SHORT);
+//                toast.show();
+//                renderProgressive(progressivePic, lowResUri);
+//                Fresco.getImagePipeline().evictFromMemoryCache(proImageUri);
+//
+//            }
+//        });
+
+        buttonClearCache.setOnClickListener(new View.OnClickListener(){
+            @Override
+            public void onClick(View v) {
+
+                renderProgressive(progressivePic, lowResUri);
+                Fresco.getImagePipeline().evictFromMemoryCache(proImageUri);
+                Toast toast = Toast.makeText(getApplicationContext(),
+                        " Clear the Cache :" /*+ Runtime.getRuntime().freeMemory()*/,
+                        Toast.LENGTH_SHORT);
+                toast.show();
+
+            }
+        });
+        buttonReload.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                renderProgressive(progressivePic, proImageUri);
+            }
+
+        });
+        //simpleDraweeView.setImageURI(lowResUri);
+
+        renderProgressive(progressivePic, proImageUri);
+    }
+
+    void renderProgressive( SimpleDraweeView view, Uri uri) {
+        ImageRequest request = ImageRequestBuilder.newBuilderWithSource(uri)
+                .setProgressiveRenderingEnabled(true)
+                .build();
+
+        DraweeController controller = Fresco.newDraweeControllerBuilder()
+                .setImageRequest(request)
+                .setOldController(view.getController())
+                .build();
+        view.setController(controller);
+
+    }
+}
diff --git a/frescodemoformaven/src/main/res/layout/main_activity.xml b/frescodemoformaven/src/main/res/layout/main_activity.xml
new file mode 100644
index 000000000..1e71cdeb2
--- /dev/null
+++ b/frescodemoformaven/src/main/res/layout/main_activity.xml
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:fresco="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/white"
+    android:padding="15dp">
+
+    <com.facebook.drawee.view.SimpleDraweeView
+        android:id="@+id/logo_image"
+        android:layout_width="65dp"
+        android:layout_height="65dp"
+        android:layout_centerHorizontal="true"
+        android:layout_marginTop="20dp"/>
+
+    <com.facebook.drawee.view.SimpleDraweeView
+        android:id="@+id/progressive"
+        android:layout_width="match_parent"
+        android:layout_height="350dp"
+        android:layout_centerHorizontal="true"
+        android:layout_marginTop="20dp"/>
+
+    <Button
+        android:layout_width="150dp"
+        android:layout_height="50dp"
+        android:layout_below ="@+id/progressive"
+        android:text="Clear cache"
+        android:id="@+id/clearCache"
+        />
+    <Button
+        android:layout_width="150dp"
+        android:layout_height="50dp"
+        android:layout_below ="@+id/clearCache"
+        android:text="Reload"
+        android:id="@+id/reload"
+        />
+
+</RelativeLayout>
diff --git a/frescodemoformaven/src/main/res/values/colors.xml b/frescodemoformaven/src/main/res/values/colors.xml
new file mode 100644
index 000000000..6327c8f14
--- /dev/null
+++ b/frescodemoformaven/src/main/res/values/colors.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <color name="image_placeholder">#cccccc</color>
+    <color name="white">#ffffff</color>
+
+</resources>
\ No newline at end of file
diff --git a/frescodemoformaven/src/main/res/values/strings.xml b/frescodemoformaven/src/main/res/values/strings.xml
new file mode 100644
index 000000000..6d1f04e64
--- /dev/null
+++ b/frescodemoformaven/src/main/res/values/strings.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="app_name">Fresco Demo</string>
+</resources>
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DecodeProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DecodeProducer.java
index fdc6e7515..a2806f359 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DecodeProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DecodeProducer.java
@@ -17,6 +17,7 @@
 import java.util.concurrent.TimeUnit;
 
 import android.os.SystemClock;
+import android.util.Log;
 
 import com.facebook.common.executors.UiThreadExecutorService;
 import com.facebook.common.internal.ImmutableMap;
@@ -372,18 +373,26 @@ public NetworkImagesProgressiveDecoder(
     protected synchronized boolean updateDecodeJob(
         CloseableReference<PooledByteBuffer> imageBytesRef,
         boolean isLast) {
+
+      Log.i("ssss", "dddddddd+ isLast:" + isLast +" is closeable:" + CloseableReference.isValid(imageBytesRef));
+
       boolean ret = super.updateDecodeJob(imageBytesRef, isLast);
       if (!isLast && CloseableReference.isValid(imageBytesRef)) {
+        Log.i("sss", "ddddddddd" + "is more parse:" + mProgressiveJpegParser.parseMoreData(imageBytesRef));
         if (!mProgressiveJpegParser.parseMoreData(imageBytesRef)) {
           return false;
         }
         int scanNum = mProgressiveJpegParser.getBestScanNumber();
+//        scanNum = 10;
         if (scanNum <= mLastScheduledScanNumber ||
             scanNum < mProgressiveJpegConfig.getNextScanNumberToDecode(mLastScheduledScanNumber)) {
+          Log.i("ssss", "dddddddd+ scanNum:" + scanNum + "   mLastScheduledScanNumber"+mLastScheduledScanNumber);
           return false;
         }
+        Log.i("ssss", "dddddddd+ at D1111111111111111111111a");
         mLastScheduledScanNumber = scanNum;
       }
+      Log.i("ssss", "dddddddd+ at ______+++++++++++++__00001a");
       return ret;
     }
 
diff --git a/import-summary.txt b/import-summary.txt
new file mode 100644
index 000000000..f9e22249b
--- /dev/null
+++ b/import-summary.txt
@@ -0,0 +1,55 @@
+ECLIPSE ANDROID PROJECT IMPORT SUMMARY
+======================================
+
+Ignored Files:
+--------------
+The following files were *not* copied into the new Gradle project; you
+should evaluate whether these are still needed in your project and if
+so manually move them:
+
+* .gitignore
+* README.md
+* fresco-demo-for-maven.apk
+* pom.xml
+
+Moved Files:
+------------
+Android Gradle projects use a different directory structure than ADT
+Eclipse projects. Here's how the projects were restructured:
+
+* AndroidManifest.xml => frescodemoformaven/src/main/AndroidManifest.xml
+* libs/armeabi-v7a/libbitmaps.so => frescodemoformaven/src/main/jniLibs/armeabi-v7a/libbitmaps.so
+* libs/armeabi-v7a/libgifimage.so => frescodemoformaven/src/main/jniLibs/armeabi-v7a/libgifimage.so
+* libs/armeabi-v7a/libimagepipeline.so => frescodemoformaven/src/main/jniLibs/armeabi-v7a/libimagepipeline.so
+* libs/armeabi-v7a/libmemchunk.so => frescodemoformaven/src/main/jniLibs/armeabi-v7a/libmemchunk.so
+* libs/armeabi-v7a/libwebp.so => frescodemoformaven/src/main/jniLibs/armeabi-v7a/libwebp.so
+* libs/armeabi-v7a/libwebpimage.so => frescodemoformaven/src/main/jniLibs/armeabi-v7a/libwebpimage.so
+* libs/armeabi/libbitmaps.so => frescodemoformaven/src/main/jniLibs/armeabi/libbitmaps.so
+* libs/armeabi/libgifimage.so => frescodemoformaven/src/main/jniLibs/armeabi/libgifimage.so
+* libs/armeabi/libimagepipeline.so => frescodemoformaven/src/main/jniLibs/armeabi/libimagepipeline.so
+* libs/armeabi/libmemchunk.so => frescodemoformaven/src/main/jniLibs/armeabi/libmemchunk.so
+* libs/armeabi/libwebp.so => frescodemoformaven/src/main/jniLibs/armeabi/libwebp.so
+* libs/armeabi/libwebpimage.so => frescodemoformaven/src/main/jniLibs/armeabi/libwebpimage.so
+* libs/x86/libbitmaps.so => frescodemoformaven/src/main/jniLibs/x86/libbitmaps.so
+* libs/x86/libgifimage.so => frescodemoformaven/src/main/jniLibs/x86/libgifimage.so
+* libs/x86/libimagepipeline.so => frescodemoformaven/src/main/jniLibs/x86/libimagepipeline.so
+* libs/x86/libmemchunk.so => frescodemoformaven/src/main/jniLibs/x86/libmemchunk.so
+* libs/x86/libwebp.so => frescodemoformaven/src/main/jniLibs/x86/libwebp.so
+* libs/x86/libwebpimage.so => frescodemoformaven/src/main/jniLibs/x86/libwebpimage.so
+* res/ => frescodemoformaven/src/main/res/
+* src/ => frescodemoformaven/src/main/java/
+
+Next Steps:
+-----------
+You can now build the project. The Gradle project needs network
+connectivity to download dependencies.
+
+Bugs:
+-----
+If for some reason your project does not build, and you determine that
+it is due to a bug or limitation of the Eclipse to Gradle importer,
+please file a bug at http://b.android.com with category
+Component-Tools.
+
+(This import summary is for your information only, and can be deleted
+after import once you are satisfied with the results.)
diff --git a/sample/src/main/java/com/facebook/fresco/sample/MainActivity.java b/sample/src/main/java/com/facebook/fresco/sample/MainActivity.java
index 8123b99d6..48dc60a77 100644
--- a/sample/src/main/java/com/facebook/fresco/sample/MainActivity.java
+++ b/sample/src/main/java/com/facebook/fresco/sample/MainActivity.java
@@ -17,6 +17,7 @@
 import android.os.Handler;
 import android.os.Looper;
 import android.support.v7.app.ActionBarActivity;
+import android.util.Log;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
@@ -40,7 +41,6 @@
 import com.facebook.fresco.sample.urlsfetcher.ImageSize;
 import com.facebook.fresco.sample.urlsfetcher.ImageUrlsFetcher;
 import com.facebook.fresco.sample.urlsfetcher.ImageUrlsRequestBuilder;
-
 import java.util.List;
 import java.util.Locale;
 
@@ -195,12 +195,22 @@ private void setAdapter(int index) {
       mCurrentAdapter = null;
       System.gc();
     }
-
     mCurrentAdapterIndex = index;
     mPerfListener = new PerfListener();
     switch (index) {
       case FRESCO_INDEX:
       case FRESCO_OKHTTP_INDEX:
+//        ProgressiveJpegConfig pjpegConfig = new ProgressiveJpegConfig() {
+//          @Override
+//          public int getNextScanNumberToDecode(int scanNumber) {
+//            return scanNumber + 2;
+//          }
+//          @Override
+//          public QualityInfo getQualityInfo(int scanNumber) {
+//            boolean isGoodEnough = (scanNumber >= 5);
+//            return ImmutableQualityInfo.of(scanNumber, isGoodEnough, false);
+//          }
+//        };
         mCurrentAdapter = new FrescoAdapter(
                 this,
                 R.id.image_list,
diff --git a/sample/src/main/java/com/facebook/fresco/sample/adapters/FrescoAdapter.java b/sample/src/main/java/com/facebook/fresco/sample/adapters/FrescoAdapter.java
index cd59d8205..59bd36c36 100644
--- a/sample/src/main/java/com/facebook/fresco/sample/adapters/FrescoAdapter.java
+++ b/sample/src/main/java/com/facebook/fresco/sample/adapters/FrescoAdapter.java
@@ -30,7 +30,6 @@
 import com.facebook.imagepipeline.request.ImageRequest;
 import com.facebook.imagepipeline.request.ImageRequestBuilder;
 import com.facebook.imagepipeline.request.Postprocessor;
-import android.graphics.Bitmap;
 
 /** Populate the list view with images using the Fresco image pipeline. */
 public class FrescoAdapter extends ImageListAdapter<InstrumentedDraweeView> {
@@ -69,12 +68,27 @@ protected void bind(final InstrumentedDraweeView view, String uri) {
                 //.setPostprocessor(redMeshPostprocessor)// modify by sminger
                 .setResizeOptions(
                         new ResizeOptions(view.getLayoutParams().width, view.getLayoutParams().height))
+                .setProgressiveRenderingEnabled(true)
             .build();
-      Uri lowResUri = Uri.parse("http://u4.tdimg.com/7/147/82/31804659546604080410941337579323207967.jpg");
-      Uri heightResUri = Uri.parse("http://g1.ykimg.com/0516000051B6F2FA67583905D3081E0A");
+        /*
+        modify by sminger to verify the progressive loading image
+         */
+        Uri lowResUri = Uri.parse("http://u4.tdimg.com/7/147/82/31804659546604080410941337579323207967.jpg");
+        //Uri heightResUri = Uri.parse("http://g1.ykimg.com/0516000051B6F2FA67583905D3081E0A");
+        Uri heightResUri = Uri.parse("http://192.168.1.135:8080/image/king_pro.jpg");
+        //Uri heightResUri = Uri.parse("http://192.168.1.135:8080/image/DSC_2237_pro.jpg");
+        //Uri heightResUri = Uri.parse("https://img.okezone.com//content/2015/03/13/20/1117973/dirjen-pajak-blunder-soal-pajak-jalan-tol-Hhkw9dov48.jpg");
+        //Uri heightResUri = Uri.parse("http://pooyak.com/p/progjpeg/jpegload.cgi?o=1");
+
+        //Uri heightResUri = Uri.parse("http://192.168.1.135:8080/image/DSC_0097_pro.JPG");
+        ImageRequest myImageRequest = ImageRequestBuilder.newBuilderWithSource(heightResUri)
+                .setProgressiveRenderingEnabled(true)
+                .build();
+
     DraweeController draweeController = Fresco.newDraweeControllerBuilder()
-            .setLowResImageRequest(ImageRequest.fromUri(lowResUri))
-            //.setImageRequest(imageRequest.fromUri(heightResUri))
+            //.setLowResImageRequest(ImageRequest.fromUri(lowResUri))       //modify by sminger
+            //.setImageRequest(imageRequest.fromUri(heightResUri))          //modify by sminger
+            //.setImageRequest(myImageRequest)                                //modify bs sminger
             .setImageRequest(imageRequest)// default configuration
             .setOldController(view.getController())
             .setControllerListener(view.getListener())
diff --git a/sample/src/main/java/com/facebook/fresco/sample/configs/imagepipeline/ImagePipelineConfigFactory.java b/sample/src/main/java/com/facebook/fresco/sample/configs/imagepipeline/ImagePipelineConfigFactory.java
index 362dfa893..60b3978cc 100644
--- a/sample/src/main/java/com/facebook/fresco/sample/configs/imagepipeline/ImagePipelineConfigFactory.java
+++ b/sample/src/main/java/com/facebook/fresco/sample/configs/imagepipeline/ImagePipelineConfigFactory.java
@@ -14,8 +14,16 @@
 
 
 import android.content.Context;
+import android.util.Log;
 
+import com.facebook.common.logging.FLog;
+import com.facebook.common.memory.MemoryTrimType;
+import com.facebook.common.memory.MemoryTrimmable;
+import com.facebook.common.memory.MemoryTrimmableRegistry;
+import com.facebook.imagepipeline.decoder.ProgressiveJpegConfig;
 import com.facebook.imagepipeline.decoder.SimpleProgressiveJpegConfig;
+import com.facebook.imagepipeline.image.ImmutableQualityInfo;
+import com.facebook.imagepipeline.image.QualityInfo;
 import com.squareup.okhttp.OkHttpClient;
 
 import com.facebook.cache.disk.DiskCacheConfig;
@@ -25,7 +33,8 @@
 import com.facebook.imagepipeline.core.ImagePipelineConfig;
 
 import com.facebook.fresco.sample.configs.ConfigConstants;
-
+import com.facebook.common.logging.FLog;
+import android.util.Log;
 /**
  * Creates ImagePipeline configuration for the sample app
  */
@@ -34,21 +43,40 @@
 
   private static ImagePipelineConfig sImagePipelineConfig;
   private static ImagePipelineConfig sOkHttpImagePipelineConfig;
-
+  private static final  String Tag = "sminger";
   /**
    * Creates config using android http stack as network backend.
    */
   public static ImagePipelineConfig getImagePipelineConfig(Context context) {
     if (sImagePipelineConfig == null) {
+        /*
+        modify by sminger to verify progressive loading
+         */
+        ProgressiveJpegConfig pjpegConfig = new ProgressiveJpegConfig() {
+
+            @Override
+            public int getNextScanNumberToDecode(int scanNumber) {
+                Log.i("ssss", "dddddddddddddd==================================================");
+                return scanNumber + 2;
+            }
+
+            @Override
+            public QualityInfo getQualityInfo(int scanNumber) {
+                boolean isGoodEnough = (scanNumber >= 5);
+                return ImmutableQualityInfo.of(scanNumber, isGoodEnough, false);
+            }
+        };
       ImagePipelineConfig.Builder configBuilder = ImagePipelineConfig.newBuilder(context)
-              .setProgressiveJpegConfig(new SimpleProgressiveJpegConfig());//modify by sminger
+              .setProgressiveJpegConfig(pjpegConfig);//modify by sminger
       configureCaches(configBuilder, context);
+        //configureTrim(configBuilder, context);
       sImagePipelineConfig = configBuilder.build();
     }
     return sImagePipelineConfig;
   }
 
   /**
+   *
    * Creates config using OkHttp as network backed.
    */
   public static ImagePipelineConfig getOkHttpImagePipelineConfig(Context context) {
@@ -88,4 +116,31 @@ public MemoryCacheParams get() {
                 .setMaxCacheSize(ConfigConstants.MAX_DISK_CACHE_SIZE)
                 .build());
   }
+
+    /*
+     configures the trim register to free the memory cache.add by sminger
+     */
+    private static void configureTrim(
+            ImagePipelineConfig.Builder configureBuild,
+            Context context ) {
+        MemoryTrimmable memoryTrimmable = new MemoryTrimmable() {
+            @Override
+            public void trim(MemoryTrimType trimType) {
+                Log.i("trim", "trim is processing !");
+            }
+        };
+        MemoryTrimmableRegistry MTR = new MemoryTrimmableRegistry() {
+            @Override
+            public void registerMemoryTrimmable(MemoryTrimmable MT) {
+
+            }
+
+            @Override
+            public void unregisterMemoryTrimmable(MemoryTrimmable MT) {
+
+            }
+        };
+        MTR.registerMemoryTrimmable(memoryTrimmable);
+        configureBuild.setMemoryTrimmableRegistry(MTR);
+    }
 }
diff --git a/settings.gradle b/settings.gradle
index 264b8a190..3040647bd 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -5,3 +5,4 @@ include ':fbcore'
 include ':imagepipeline'
 include ':sample'
 include ':imagepipeline-backends:imagepipeline-okhttp'
+include ':frescodemoformaven'
