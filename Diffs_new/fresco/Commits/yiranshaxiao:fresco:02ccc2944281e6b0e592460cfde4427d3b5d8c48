diff --git a/.gitignore b/.gitignore
index cd4cae9fa..667435bcd 100644
--- a/.gitignore
+++ b/.gitignore
@@ -8,3 +8,4 @@ obj/
 *.iml
 Gemfile.lock
 _site/
+*.gz
\ No newline at end of file
diff --git a/samples/comparison/src/main/java/com/facebook/samples/comparison/MainActivity.java b/samples/comparison/src/main/java/com/facebook/samples/comparison/MainActivity.java
index 612cd3d77..3f09f25ce 100644
--- a/samples/comparison/src/main/java/com/facebook/samples/comparison/MainActivity.java
+++ b/samples/comparison/src/main/java/com/facebook/samples/comparison/MainActivity.java
@@ -42,6 +42,7 @@
 import com.facebook.common.logging.FLog;
 import com.facebook.samples.comparison.adapters.AQueryAdapter;
 import com.facebook.samples.comparison.adapters.FrescoAdapter;
+import com.facebook.samples.comparison.adapters.FrescoAdapterV2;
 import com.facebook.samples.comparison.adapters.GlideAdapter;
 import com.facebook.samples.comparison.adapters.ImageListAdapter;
 import com.facebook.samples.comparison.adapters.PicassoAdapter;
@@ -54,6 +55,7 @@
 import com.facebook.samples.comparison.urlsfetcher.ImageSize;
 import com.facebook.samples.comparison.urlsfetcher.ImageUrlsFetcher;
 import com.facebook.samples.comparison.urlsfetcher.ImageUrlsRequestBuilder;
+import com.facebook.samples.comparison.viewhelper.RecyclerViewHelper;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Locale;
@@ -73,6 +75,7 @@
   public static final int VOLLEY_INDEX = 6;
   public static final int AQUERY_INDEX = 7;
 
+  public static final int FRESCO_OKHTTP_INDEX_OPT = 8;
   // These need to be in sync with {@link R.array.image_sources}
   public static final int NONE_INDEX = 0;
   public static final int NETWORK_INDEX = 1;
@@ -118,6 +121,7 @@ protected void onCreate(Bundle savedInstanceState) {
     setContentView(R.layout.activity_main);
     mRecyclerView = (RecyclerView) findViewById(R.id.image_grid);
     mRecyclerView.setLayoutManager(new GridLayoutManager(this, COLS_NUMBER));
+    new RecyclerViewHelper().with(mRecyclerView);
 
     FLog.setMinimumLoggingLevel(FLog.WARN);
     Drawables.init(getResources());
@@ -298,6 +302,12 @@ private void setLoaderAdapter(int index) {
                 ImagePipelineConfigFactory.getImagePipelineConfig(this) :
                 ImagePipelineConfigFactory.getOkHttpImagePipelineConfig(this));
         break;
+      case FRESCO_OKHTTP_INDEX_OPT:
+        mCurrentAdapter = new FrescoAdapterV2(
+            this,
+            mPerfListener,
+            ImagePipelineConfigFactory.getOkHttpImagePipelineConfig(this));
+        break;
       case GLIDE_INDEX:
         mCurrentAdapter = new GlideAdapter(this, mPerfListener);
         break;
diff --git a/samples/comparison/src/main/java/com/facebook/samples/comparison/adapters/FrescoAdapterV2.java b/samples/comparison/src/main/java/com/facebook/samples/comparison/adapters/FrescoAdapterV2.java
new file mode 100644
index 000000000..3b79aad57
--- /dev/null
+++ b/samples/comparison/src/main/java/com/facebook/samples/comparison/adapters/FrescoAdapterV2.java
@@ -0,0 +1,92 @@
+/*
+ * This file provided by Facebook is for non-commercial testing and evaluation
+ * purposes only.  Facebook reserves all rights not expressly granted.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.comparison.adapters;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.view.ViewGroup;
+import com.facebook.cache.common.CacheKey;
+import com.facebook.common.internal.ImmutableList;
+import com.facebook.drawee.backends.pipeline.DraweeConfig;
+import com.facebook.drawee.backends.pipeline.Fresco;
+import com.facebook.drawee.backends.pipeline.PipelineDraweeController;
+import com.facebook.drawee.backends.pipeline.PipelineDraweeControllerFactory;
+import com.facebook.drawee.components.DeferredReleaser;
+import com.facebook.drawee.drawable.ProgressBarDrawable;
+import com.facebook.drawee.drawable.ScalingUtils;
+import com.facebook.drawee.generic.GenericDraweeHierarchy;
+import com.facebook.drawee.generic.GenericDraweeHierarchyBuilder;
+import com.facebook.imagepipeline.cache.MemoryCache;
+import com.facebook.imagepipeline.core.ImagePipelineConfig;
+import com.facebook.imagepipeline.drawable.DrawableFactory;
+import com.facebook.imagepipeline.image.CloseableImage;
+import com.facebook.samples.comparison.Drawables;
+import com.facebook.samples.comparison.configs.imagepipeline.IdlePipelineDraweeController;
+import com.facebook.samples.comparison.holders.FrescoHolderV2;
+import com.facebook.samples.comparison.instrumentation.InstrumentedDraweeView;
+import com.facebook.samples.comparison.instrumentation.PerfListener;
+import java.util.concurrent.Executor;
+import javax.annotation.Nullable;
+
+/**
+ * RecyclerView Adapter for Fresco
+ */
+public class FrescoAdapterV2 extends ImageListAdapter {
+
+  public FrescoAdapterV2(
+      Context context,
+      PerfListener perfListener,
+      ImagePipelineConfig imagePipelineConfig) {
+    super(context, perfListener);
+    Fresco.initialize(
+        context,
+        imagePipelineConfig,
+        DraweeConfig.newBuilder()
+            .setPipelineDraweeControllerFactory(new PipelineDraweeControllerFactory() {
+              @Override
+              protected PipelineDraweeController internalCreateController(
+                  Resources resources,
+                  DeferredReleaser deferredReleaser,
+                  DrawableFactory animatedDrawableFactory,
+                  Executor uiThreadExecutor,
+                  MemoryCache<CacheKey, CloseableImage> memoryCache,
+                  @Nullable ImmutableList<DrawableFactory> drawableFactories) {
+                return new IdlePipelineDraweeController(
+                    resources,
+                    deferredReleaser,
+                    animatedDrawableFactory,
+                    uiThreadExecutor,
+                    memoryCache,
+                    drawableFactories);
+              }
+            }).build());
+  }
+
+  @Override
+  public FrescoHolderV2 onCreateViewHolder(ViewGroup parent, int viewType) {
+    GenericDraweeHierarchy gdh = new GenericDraweeHierarchyBuilder(getContext().getResources())
+        .setPlaceholderImage(Drawables.sPlaceholderDrawable)
+        .setFailureImage(Drawables.sErrorDrawable)
+        .setProgressBarImage(new ProgressBarDrawable())
+        .setActualImageScaleType(ScalingUtils.ScaleType.FIT_CENTER)
+        .build();
+    final InstrumentedDraweeView instrView = new InstrumentedDraweeView(getContext(), gdh);
+
+    return new FrescoHolderV2(getContext(), parent, instrView, getPerfListener());
+  }
+
+  @Override
+  public void shutDown() {
+    Fresco.shutDown();
+  }
+}
diff --git a/samples/comparison/src/main/java/com/facebook/samples/comparison/configs/imagepipeline/IdlePipelineDraweeController.java b/samples/comparison/src/main/java/com/facebook/samples/comparison/configs/imagepipeline/IdlePipelineDraweeController.java
new file mode 100644
index 000000000..891926ee7
--- /dev/null
+++ b/samples/comparison/src/main/java/com/facebook/samples/comparison/configs/imagepipeline/IdlePipelineDraweeController.java
@@ -0,0 +1,48 @@
+package com.facebook.samples.comparison.configs.imagepipeline;
+
+import android.content.res.Resources;
+import com.facebook.cache.common.CacheKey;
+import com.facebook.common.internal.ImmutableList;
+import com.facebook.drawee.backends.pipeline.PipelineDraweeController;
+import com.facebook.drawee.components.DeferredReleaser;
+import com.facebook.imagepipeline.cache.MemoryCache;
+import com.facebook.imagepipeline.drawable.DrawableFactory;
+import com.facebook.imagepipeline.image.CloseableImage;
+import java.util.concurrent.Executor;
+import javax.annotation.Nullable;
+
+/**
+ * Created on 17/07/2018.
+ */
+public class IdlePipelineDraweeController extends PipelineDraweeController {
+
+  private static boolean sIdle = true;
+
+  public IdlePipelineDraweeController(
+      Resources resources,
+      DeferredReleaser deferredReleaser,
+      DrawableFactory animatedDrawableFactory,
+      Executor uiThreadExecutor,
+      @Nullable MemoryCache<CacheKey, CloseableImage> memoryCache,
+      @Nullable ImmutableList<DrawableFactory> globalDrawableFactories) {
+    super(
+        resources,
+        deferredReleaser,
+        animatedDrawableFactory,
+        uiThreadExecutor,
+        memoryCache,
+        globalDrawableFactories);
+  }
+
+  public static void setIdle(boolean idle) {
+    sIdle = idle;
+  }
+
+  @Override
+  public void onAttach() {
+    if (sIdle) {
+      super.onAttach();
+    }
+  }
+
+}
diff --git a/samples/comparison/src/main/java/com/facebook/samples/comparison/holders/FrescoHolderV2.java b/samples/comparison/src/main/java/com/facebook/samples/comparison/holders/FrescoHolderV2.java
new file mode 100644
index 000000000..c933ebccc
--- /dev/null
+++ b/samples/comparison/src/main/java/com/facebook/samples/comparison/holders/FrescoHolderV2.java
@@ -0,0 +1,67 @@
+/*
+ * This file provided by Facebook is for non-commercial testing and evaluation
+ * purposes only.  Facebook reserves all rights not expressly granted.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.comparison.holders;
+
+import android.content.Context;
+import android.net.Uri;
+import android.view.View;
+import com.facebook.common.util.UriUtil;
+import com.facebook.drawee.backends.pipeline.Fresco;
+import com.facebook.drawee.interfaces.DraweeController;
+import com.facebook.imagepipeline.common.ResizeOptions;
+import com.facebook.imagepipeline.request.ImageRequestBuilder;
+import com.facebook.samples.comparison.instrumentation.InstrumentedDraweeView;
+import com.facebook.samples.comparison.instrumentation.PerfListener;
+import com.facebook.samples.comparison.viewhelper.RecyclerViewHelper;
+
+/**
+ * This is the Holder class for the RecycleView to use with Fresco
+ */
+public class FrescoHolderV2 extends BaseViewHolder<InstrumentedDraweeView> implements
+    RecyclerViewHelper.IdleListener {
+
+  private String mUriString;
+
+  public FrescoHolderV2(
+      Context context, View parentView,
+      InstrumentedDraweeView intrumentedDraweeView, PerfListener perfListener) {
+    super(context, parentView, intrumentedDraweeView, perfListener);
+  }
+
+  @Override
+  protected void onBind(String uriString) {
+    mUriString = uriString;
+    Uri uri = Uri.parse(uriString);
+    ImageRequestBuilder imageRequestBuilder =
+        ImageRequestBuilder.newBuilderWithSource(uri);
+    if (UriUtil.isNetworkUri(uri)) {
+      imageRequestBuilder.setProgressiveRenderingEnabled(true);
+    } else {
+      imageRequestBuilder.setResizeOptions(new ResizeOptions(
+          mImageView.getLayoutParams().width,
+          mImageView.getLayoutParams().height));
+    }
+    DraweeController draweeController = Fresco.newDraweeControllerBuilder()
+        .setImageRequest(imageRequestBuilder.build())
+        .setOldController(mImageView.getController())
+        .setControllerListener(mImageView.getListener())
+        .setAutoPlayAnimations(true)
+        .build();
+    mImageView.setController(draweeController);
+  }
+
+  @Override
+  public void onIdle() {
+    onBind(mUriString);
+  }
+}
diff --git a/samples/comparison/src/main/java/com/facebook/samples/comparison/instrumentation/InstrumentedDraweeViewV2.java b/samples/comparison/src/main/java/com/facebook/samples/comparison/instrumentation/InstrumentedDraweeViewV2.java
new file mode 100644
index 000000000..2c060d483
--- /dev/null
+++ b/samples/comparison/src/main/java/com/facebook/samples/comparison/instrumentation/InstrumentedDraweeViewV2.java
@@ -0,0 +1,124 @@
+/*
+ * This file provided by Facebook is for non-commercial testing and evaluation
+ * purposes only.  Facebook reserves all rights not expressly granted.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * FACEBOOK BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.samples.comparison.instrumentation;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.drawable.Animatable;
+import android.net.Uri;
+import android.util.AttributeSet;
+import com.facebook.drawee.controller.AbstractDraweeControllerBuilder;
+import com.facebook.drawee.controller.BaseControllerListener;
+import com.facebook.drawee.controller.ControllerListener;
+import com.facebook.drawee.generic.GenericDraweeHierarchy;
+import com.facebook.drawee.interfaces.SimpleDraweeControllerBuilder;
+import com.facebook.drawee.view.SimpleDraweeView;
+import javax.annotation.Nullable;
+
+/**
+ * {@link SimpleDraweeView} with instrumentation.
+ */
+public class InstrumentedDraweeViewV2 extends SimpleDraweeView implements Instrumented {
+
+  private static boolean sIdleState = true;
+  private Instrumentation mInstrumentation;
+  private ControllerListener<Object> mListener;
+
+  public InstrumentedDraweeViewV2(Context context, GenericDraweeHierarchy hierarchy) {
+    super(context, hierarchy);
+    init();
+  }
+
+  public InstrumentedDraweeViewV2(Context context) {
+    super(context);
+    init();
+  }
+
+  public InstrumentedDraweeViewV2(Context context, AttributeSet attrs) {
+    super(context, attrs);
+    init();
+  }
+
+  public InstrumentedDraweeViewV2(Context context, AttributeSet attrs, int defStyle) {
+    super(context, attrs, defStyle);
+    init();
+  }
+
+  public static void setIdleState(boolean idle) {
+    sIdleState = idle;
+  }
+
+  private void init() {
+    mInstrumentation = new Instrumentation(this);
+    mListener = new BaseControllerListener<Object>() {
+      @Override
+      public void onSubmit(String id, Object callerContext) {
+        mInstrumentation.onStart();
+      }
+
+      @Override
+      public void onFinalImageSet(
+          String id,
+          @Nullable Object imageInfo,
+          @Nullable Animatable animatable) {
+        mInstrumentation.onSuccess();
+      }
+
+      @Override
+      public void onFailure(String id, Throwable throwable) {
+        mInstrumentation.onFailure();
+      }
+
+      @Override
+      public void onRelease(String id) {
+        mInstrumentation.onCancellation();
+      }
+    };
+  }
+
+  @Override
+  public void initInstrumentation(String tag, PerfListener perfListener) {
+    mInstrumentation.init(tag, perfListener);
+  }
+
+  @Override
+  public void onDraw(final Canvas canvas) {
+    super.onDraw(canvas);
+    mInstrumentation.onDraw(canvas);
+  }
+
+  @Override
+  public void setImageURI(Uri uri, @Nullable Object callerContext) {
+    SimpleDraweeControllerBuilder controllerBuilder = getControllerBuilder()
+        .setUri(uri)
+        .setCallerContext(callerContext)
+        .setOldController(getController());
+    if (controllerBuilder instanceof AbstractDraweeControllerBuilder) {
+      ((AbstractDraweeControllerBuilder<?, ?, ?, ?>) controllerBuilder)
+          .setControllerListener(mListener);
+    }
+    setController(controllerBuilder.build());
+  }
+
+  public ControllerListener<Object> getListener() {
+    return mListener;
+  }
+
+  @Override
+  protected void onAttach() {
+    if (!sIdleState) {
+      return;
+    }
+    super.onAttach();
+  }
+}
diff --git a/samples/comparison/src/main/java/com/facebook/samples/comparison/urlsfetcher/HttpsConnectionUtil.java b/samples/comparison/src/main/java/com/facebook/samples/comparison/urlsfetcher/HttpsConnectionUtil.java
new file mode 100644
index 000000000..7ee210497
--- /dev/null
+++ b/samples/comparison/src/main/java/com/facebook/samples/comparison/urlsfetcher/HttpsConnectionUtil.java
@@ -0,0 +1,86 @@
+package com.facebook.samples.comparison.urlsfetcher;
+
+import java.security.GeneralSecurityException;
+import java.security.SecureRandom;
+import java.security.cert.CertificateException;
+import java.security.cert.X509Certificate;
+
+import javax.net.ssl.HostnameVerifier;
+import javax.net.ssl.HttpsURLConnection;
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.SSLSession;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.X509TrustManager;
+
+/**
+ * Created on 28/03/2017.
+ */
+
+public final class HttpsConnectionUtil {
+
+    private static HostnameVerifier sHostnameVerifier;
+    private static TrustManager[] sTrustManagers;
+
+    public static void setAllTrust() {
+        trustAllHostnames();
+        trustAllHttpsCertificates();
+    }
+
+    /**
+     * Set the default Hostname Verifier to an instance of a fake class that
+     * trust all hostnames.
+     */
+    private static void trustAllHostnames() {
+        if (sHostnameVerifier == null) {
+            sHostnameVerifier = new AllTrustHostnameVerifier();
+        }
+        HttpsURLConnection.setDefaultHostnameVerifier(sHostnameVerifier);
+    }
+
+    /**
+     * Set the default X509 Trust Manager to an instance of a fake class that
+     * trust all certificates, even the self-signed ones.
+     */
+    private static void trustAllHttpsCertificates() {
+        SSLContext context = null;
+        if (sTrustManagers == null) {
+            sTrustManagers = new TrustManager[]{new AllTrustX509TrustManager()};
+        }
+        try {
+            context = SSLContext.getInstance("SSL");
+            context.init(null, sTrustManagers, new SecureRandom());
+        } catch (GeneralSecurityException gse) {
+            gse.printStackTrace();
+        }
+        if (context != null) {
+            HttpsURLConnection.setDefaultSSLSocketFactory(context
+                    .getSocketFactory());
+        }
+    }
+
+    private static class AllTrustHostnameVerifier implements HostnameVerifier {
+        @Override
+        public boolean verify(String hostname, SSLSession session) {
+            return true;
+        }
+    }
+
+    private static class AllTrustX509TrustManager implements X509TrustManager {
+
+        @Override
+        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
+            // do nothing
+        }
+
+        @Override
+        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
+            // do nothing
+        }
+
+        @Override
+        public X509Certificate[] getAcceptedIssuers() {
+            return new X509Certificate[0];
+        }
+
+    }
+}
\ No newline at end of file
diff --git a/samples/comparison/src/main/java/com/facebook/samples/comparison/viewhelper/RecyclerViewHelper.java b/samples/comparison/src/main/java/com/facebook/samples/comparison/viewhelper/RecyclerViewHelper.java
new file mode 100644
index 000000000..54cb51b22
--- /dev/null
+++ b/samples/comparison/src/main/java/com/facebook/samples/comparison/viewhelper/RecyclerViewHelper.java
@@ -0,0 +1,70 @@
+package com.facebook.samples.comparison.viewhelper;
+
+import android.support.v7.widget.RecyclerView;
+import android.view.View;
+import com.facebook.drawee.backends.pipeline.Fresco;
+import com.facebook.samples.comparison.adapters.FrescoAdapterV2;
+import com.facebook.samples.comparison.configs.imagepipeline.IdlePipelineDraweeController;
+import com.facebook.samples.comparison.instrumentation.InstrumentedDraweeViewV2;
+
+/**
+ * Created on 17/07/2018.
+ */
+public class RecyclerViewHelper extends RecyclerView.OnScrollListener {
+
+  private RecyclerView mRecyclerView;
+
+  public void with(RecyclerView recyclerView) {
+    this.mRecyclerView = recyclerView;
+    this.mRecyclerView.addOnScrollListener(this);
+  }
+
+  @Override
+  public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
+    super.onScrollStateChanged(recyclerView, newState);
+    if (recyclerView.getAdapter() instanceof FrescoAdapterV2) {
+      if (newState == RecyclerView.SCROLL_STATE_IDLE) {
+        Fresco.getImagePipeline().resume();
+        IdlePipelineDraweeController.setIdle(true);
+        InstrumentedDraweeViewV2.setIdleState(true);
+        onIdle();
+      } else {
+        Fresco.getImagePipeline().pause();
+        IdlePipelineDraweeController.setIdle(false);
+        InstrumentedDraweeViewV2.setIdleState(false);
+      }
+    }
+  }
+
+  private void onIdle() {
+    if (mRecyclerView == null) {
+      return;
+    }
+    if (mRecyclerView.getLayoutManager() == null) {
+      return;
+    }
+    if (mRecyclerView.getAdapter() == null) {
+      return;
+    }
+    RecyclerView.LayoutManager manager = mRecyclerView.getLayoutManager();
+    for (int i = 0, count = manager.getChildCount(); i < count; i++) {
+      View view = manager.getChildAt(i);
+      if (view != null) {
+        RecyclerView.ViewHolder viewHolder = mRecyclerView.getChildViewHolder(view);
+        if (viewHolder instanceof IdleListener) {
+          ((IdleListener) viewHolder).onIdle();
+        }
+      }
+    }
+  }
+
+  @Override
+  public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
+    super.onScrolled(recyclerView, dx, dy);
+  }
+
+  public interface IdleListener {
+
+    void onIdle();
+  }
+}
diff --git a/samples/comparison/src/main/res/values/strings.xml b/samples/comparison/src/main/res/values/strings.xml
index 665fa0e7d..0b154f1d5 100644
--- a/samples/comparison/src/main/res/values/strings.xml
+++ b/samples/comparison/src/main/res/values/strings.xml
@@ -15,6 +15,7 @@
       <item>Universal Image Loader</item>
       <item>Volley</item>
       <item>AQuery</item>
+      <item>Fresco + OkHttp Opt</item>
     </string-array>
 
     <!-- If you change the order of the elements, update the indices in the MainActivity.java -->
