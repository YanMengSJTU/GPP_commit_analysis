diff --git a/drawee/src/main/java/com/facebook/drawee/generic/RoundingParams.java b/drawee/src/main/java/com/facebook/drawee/generic/RoundingParams.java
index 5b8642ace..b557eb15c 100644
--- a/drawee/src/main/java/com/facebook/drawee/generic/RoundingParams.java
+++ b/drawee/src/main/java/com/facebook/drawee/generic/RoundingParams.java
@@ -36,7 +36,12 @@
      * {@link ScalingUtils.ScaleType#CENTER_CROP}, {@link ScalingUtils.ScaleType#FOCUS_CROP} and
      * {@link ScalingUtils.ScaleType#FIT_XY}.
      */
-    BITMAP_ONLY
+    BITMAP_ONLY,
+
+    /**
+     * On Android versions >= 21 (Lollipop) uses the {@code View.setClipToOutline} method.
+     */
+    OUTLINE
   }
 
   private RoundingMethod mRoundingMethod = RoundingMethod.BITMAP_ONLY;
diff --git a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeRoundedCornersFragment.java b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeRoundedCornersFragment.java
index 33b911966..5c02ec172 100644
--- a/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeRoundedCornersFragment.java
+++ b/samples/showcase/src/main/java/com/facebook/fresco/samples/showcase/drawee/DraweeRoundedCornersFragment.java
@@ -18,6 +18,7 @@
 import android.content.res.TypedArray;
 import android.graphics.Color;
 import android.graphics.PointF;
+import android.os.Build;
 import android.os.Bundle;
 import android.support.annotation.Nullable;
 import android.support.v4.app.Fragment;
@@ -43,12 +44,18 @@
  * A {@link Fragment} that illustrates using rounded corners with Fresco.
  */
 public class DraweeRoundedCornersFragment extends BaseShowcaseFragment {
-  private static final List<ScaleType> BITMAP_ONLY_SCALETYPES = Arrays.asList(
+  // TODO It looks like BITMAP_ONLY actually works for all scale types?
+  /**
+   * With these scale types, the contents of the picture will be clipped,
+   * either using a shader (on API level < 21) or View.setOutlineProvider (on API level 21+).
+   * For all other scale types we'll paint the rounded corners with a solid color.
+   */
+  private static final List<ScaleType> CLIP_SCALETYPES = Arrays.asList(
       ScaleType.CENTER_CROP,
       ScaleType.FOCUS_CROP,
       ScaleType.FIT_XY);
 
-  private ScaleType mPreviousScaleType = ScaleType.CENTER;
+  private RoundingParams.RoundingMethod mPreviousRoundingMethod = getRoundingMethodForScaleType(ScaleType.CENTER);
 
   private int mWindowBackgroundColor;
   private int mColorPrimary;
@@ -92,25 +99,19 @@ public void onItemSelected(AdapterView<?> parent, View view, int position, long
             (SimpleScaleTypeAdapter.Entry) scaleTypeAdapter.getItem(position);
         final ScaleType scaleType = spinnerEntry.scaleType;
 
-        changeDraweeViewScaleType(mDraweeRound, scaleType, spinnerEntry.focusPoint);
-        changeDraweeViewScaleType(mDraweeRadius, scaleType, spinnerEntry.focusPoint);
-        changeDraweeViewScaleType(mDraweeSome, scaleType, spinnerEntry.focusPoint);
-        changeDraweeViewScaleType(mDraweeFancy, scaleType, spinnerEntry.focusPoint);
+        RoundingParams.RoundingMethod roundingMethod = getRoundingMethodForScaleType(scaleType);
+        changeDraweeViewScaleType(mDraweeRound, scaleType, roundingMethod, spinnerEntry.focusPoint);
+        changeDraweeViewScaleType(mDraweeRadius, scaleType, roundingMethod, spinnerEntry.focusPoint);
+        changeDraweeViewScaleType(mDraweeSome, scaleType, roundingMethod, spinnerEntry.focusPoint);
+        changeDraweeViewScaleType(mDraweeFancy, scaleType, roundingMethod, spinnerEntry.focusPoint);
 
-        if (BITMAP_ONLY_SCALETYPES.contains(scaleType) &&
-            !BITMAP_ONLY_SCALETYPES.contains(mPreviousScaleType)) {
+        if (roundingMethod != mPreviousRoundingMethod) {
           Toast.makeText(
               getContext(),
-              R.string.drawee_rounded_corners_bitmap_only_toast,
-              Toast.LENGTH_SHORT).show();
-        } else if (!BITMAP_ONLY_SCALETYPES.contains(scaleType) &&
-            BITMAP_ONLY_SCALETYPES.contains(mPreviousScaleType)) {
-          Toast.makeText(
-              getContext(),
-              R.string.drawee_rounded_corners_overlay_color_toast,
+              getString(R.string.drawee_rounded_corners_toast, roundingMethod),
               Toast.LENGTH_SHORT).show();
         }
-        mPreviousScaleType = scaleType;
+        mPreviousRoundingMethod = roundingMethod;
       }
 
       @Override
@@ -164,20 +165,37 @@ private void initColors() {
   private void changeDraweeViewScaleType(
       SimpleDraweeView draweeView,
       ScaleType scaleType,
+      RoundingParams.RoundingMethod roundingMethod,
       @Nullable PointF focusPoint) {
     final GenericDraweeHierarchy hierarchy = draweeView.getHierarchy();
     hierarchy.setActualImageScaleType(scaleType);
     hierarchy.setActualImageFocusPoint(focusPoint != null ? focusPoint : new PointF(0.5f, 0.5f));
 
     final RoundingParams roundingParams = Preconditions.checkNotNull(hierarchy.getRoundingParams());
-    if (BITMAP_ONLY_SCALETYPES.contains(scaleType)) {
-      roundingParams.setRoundingMethod(RoundingParams.RoundingMethod.BITMAP_ONLY);
-    } else {
+    if (roundingMethod == RoundingParams.RoundingMethod.OVERLAY_COLOR) {
       roundingParams.setOverlayColor(mWindowBackgroundColor);
+    } else {
+      roundingParams.setRoundingMethod(roundingMethod);
     }
     hierarchy.setRoundingParams(roundingParams);
   }
 
+  private RoundingParams.RoundingMethod getRoundingMethodForScaleType(ScaleType scaleType) {
+    // TODO It looks like BITMAP_ONLY actually works for all scale types?
+//    if (1 == 1) {
+//      return RoundingParams.RoundingMethod.BITMAP_ONLY;
+//    }
+    if (CLIP_SCALETYPES.contains(scaleType)) {
+      if (Build.VERSION.SDK_INT >= 21) {
+        return RoundingParams.RoundingMethod.OUTLINE;
+      } else {
+        return RoundingParams.RoundingMethod.BITMAP_ONLY;
+      }
+    } else {
+      return RoundingParams.RoundingMethod.OVERLAY_COLOR;
+    }
+  }
+
   private void setShowBorder(SimpleDraweeView draweeView, boolean show) {
     final RoundingParams roundingParams =
         Preconditions.checkNotNull(draweeView.getHierarchy().getRoundingParams());
diff --git a/samples/showcase/src/main/res/values/strings.xml b/samples/showcase/src/main/res/values/strings.xml
index 92d7461a3..99aa6fa66 100644
--- a/samples/showcase/src/main/res/values/strings.xml
+++ b/samples/showcase/src/main/res/values/strings.xml
@@ -156,8 +156,7 @@
   <string name="drawee_rounded_corners_some">Only rounding some corners</string>
   <string name="drawee_rounded_corners_fancy">Fancy (different radii)</string>
   <string name="drawee_rounded_corners_borders">Borders</string>
-  <string name="drawee_rounded_corners_bitmap_only_toast">Switched to BITMAP_ONLY rounding method</string>
-  <string name="drawee_rounded_corners_overlay_color_toast">Switched to OVERLAY_COLOR rounding method</string>
+  <string name="drawee_rounded_corners_toast">Switched to %1$s rounding method</string>
 
   <string name="drawee_hierarchy_load_success">Load (success)</string>
   <string name="drawee_hierarchy_load_fail">Load (fail)</string>
