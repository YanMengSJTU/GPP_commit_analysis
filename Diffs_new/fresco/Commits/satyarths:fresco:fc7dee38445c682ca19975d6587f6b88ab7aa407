diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ThreadHandoffProducerQueue.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ThreadHandoffProducerQueue.java
index 46e66109c..926f8d4c9 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ThreadHandoffProducerQueue.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/ThreadHandoffProducerQueue.java
@@ -16,44 +16,44 @@
 import java.util.concurrent.Executor;
 
 public class ThreadHandoffProducerQueue {
-    private boolean mQueueing = false;
-    private final Deque<Runnable> mRunnableList;
-    private final Executor mExecutor;
+  private boolean mQueueing = false;
+  private final Deque<Runnable> mRunnableList;
+  private final Executor mExecutor;
 
-    public ThreadHandoffProducerQueue(Executor executor) {
-        mExecutor = Preconditions.checkNotNull(executor);
-        mRunnableList = new ArrayDeque<>();
-    }
-
-
-    public synchronized void addToQueueOrExecute(Runnable runnable) {
-        if (mQueueing) {
-            mRunnableList.add(runnable);
-        } else {
-            mExecutor.execute(runnable);
-        }
-    }
-
-    public synchronized void startQueueing() {
-        mQueueing = true;
-    }
+  public ThreadHandoffProducerQueue(Executor executor) {
+    mExecutor = Preconditions.checkNotNull(executor);
+    mRunnableList = new ArrayDeque<>();
+  }
 
-    public synchronized void stopQueuing() {
-        mQueueing = false;
-        execInQueue();
-    }
-
-    private void execInQueue() {
-        while (!mRunnableList.isEmpty())
-            mExecutor.execute(mRunnableList.pop());
-        mRunnableList.clear();
-    }
-
-    public synchronized void remove(Runnable runnable) {
-        mRunnableList.remove(runnable);
-    }
 
-    public synchronized boolean isQueueing() {
-        return mQueueing;
+  public synchronized void addToQueueOrExecute(Runnable runnable) {
+    if (mQueueing) {
+      mRunnableList.add(runnable);
+    } else {
+      mExecutor.execute(runnable);
     }
+  }
+
+  public synchronized void startQueueing() {
+    mQueueing = true;
+  }
+
+  public synchronized void stopQueuing() {
+    mQueueing = false;
+    execInQueue();
+  }
+
+  private void execInQueue() {
+    while (!mRunnableList.isEmpty())
+      mExecutor.execute(mRunnableList.pop());
+    mRunnableList.clear();
+  }
+
+  public synchronized void remove(Runnable runnable) {
+    mRunnableList.remove(runnable);
+  }
+
+  public synchronized boolean isQueueing() {
+    return mQueueing;
+  }
 }
