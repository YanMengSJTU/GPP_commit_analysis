diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DecodeProducer.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DecodeProducer.java
index 337ae51bb..8dac69971 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DecodeProducer.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/producers/DecodeProducer.java
@@ -418,8 +418,12 @@ public NetworkImagesProgressiveDecoder(
     @Override
     protected synchronized boolean updateDecodeJob(EncodedImage encodedImage, boolean isLast) {
       boolean ret = super.updateDecodeJob(encodedImage, isLast);
-      if (!isLast && EncodedImage.isValid(encodedImage) &&
-          encodedImage.getImageFormat() == DefaultImageFormats.JPEG) {
+      if (!isLast && EncodedImage.isValid(encodedImage)) {
+        if (encodedImage.getImageFormat() != DefaultImageFormats.JPEG) {
+          // decoding a partial image data of none jpeg type and displaying that result bitmap
+          // to the user have no sense.
+          return ret && isNotPartialData(encodedImage);
+        }
         if (!mProgressiveJpegParser.parseMoreData(encodedImage)) {
           return false;
         }
@@ -439,6 +443,10 @@ protected synchronized boolean updateDecodeJob(EncodedImage encodedImage, boolea
       return ret;
     }
 
+    private boolean isNotPartialData(EncodedImage encodedImage) {
+      return encodedImage.getEncodedCacheKey() != null;
+    }
+
     @Override
     protected int getIntermediateImageEndOffset(EncodedImage encodedImage) {
       return mProgressiveJpegParser.getBestScanEndOffset();
