diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/BufferedDiskCache.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/BufferedDiskCache.java
index db5ead079..dd204a761 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/BufferedDiskCache.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/cache/BufferedDiskCache.java
@@ -94,21 +94,7 @@ public boolean containsSync(CacheKey key) {
           new Callable<Boolean>() {
             @Override
             public Boolean call() throws Exception {
-              EncodedImage result = mStagingArea.get(key);
-              if (result != null) {
-                result.close();
-                FLog.v(TAG, "Found image for %s in staging area", key.toString());
-                mImageCacheStatsTracker.onStagingAreaHit();
-                return true;
-              } else {
-                FLog.v(TAG, "Did not find image for %s in staging area", key.toString());
-                mImageCacheStatsTracker.onStagingAreaMiss();
-                try {
-                  return mFileCache.hasKey(key);
-                } catch (Exception exception) {
-                  return false;
-                }
-              }
+              return checkInStagingAreaAndFileCache(key);
             }
           },
           mReadExecutor);
@@ -129,25 +115,11 @@ public Boolean call() throws Exception {
    * @param key
    * @return true if the key is found in disk cache else false
    */
-  public boolean syncDiskCheck(final CacheKey key){
+  public boolean syncDiskCheck(final CacheKey key) {
     if(containsSync(key)){
       return true;
     }
-    EncodedImage result = mStagingArea.get(key);
-    if (result != null) {
-      result.close();
-      FLog.v(TAG, "Found image for %s in staging area", key.toString());
-      mImageCacheStatsTracker.onStagingAreaHit();
-      return true;
-    } else {
-      FLog.v(TAG, "Did not find image for %s in staging area", key.toString());
-      mImageCacheStatsTracker.onStagingAreaMiss();
-      try {
-        return mFileCache.hasKey(key);
-      } catch (Exception exception) {
-        return false;
-      }
-    }
+    return checkInStagingAreaAndFileCache(key);
   }
 
   /**
@@ -166,6 +138,30 @@ public boolean syncDiskCheck(final CacheKey key){
     return getAsync(key, isCancelled);
   }
 
+  /**
+   * Performs key-value loop up in staging area and file cache.
+   * Any error manifests itself as a miss, i.e. returns false.
+   * @param key
+   * @return true if the image is found in staging area or File cache, false if not found
+   */
+  private boolean checkInStagingAreaAndFileCache(final CacheKey key) {
+    EncodedImage result = mStagingArea.get(key);
+    if (result != null) {
+      result.close();
+      FLog.v(TAG, "Found image for %s in staging area", key.toString());
+      mImageCacheStatsTracker.onStagingAreaHit();
+      return true;
+    } else {
+      FLog.v(TAG, "Did not find image for %s in staging area", key.toString());
+      mImageCacheStatsTracker.onStagingAreaMiss();
+      try {
+        return mFileCache.hasKey(key);
+      } catch (Exception exception) {
+        return false;
+      }
+    }
+  }
+
   private Task<EncodedImage> getAsync(final CacheKey key, final AtomicBoolean isCancelled) {
     try {
       return Task.call(
diff --git a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipeline.java b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipeline.java
index 096774bc5..cdb096b3a 100644
--- a/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipeline.java
+++ b/imagepipeline/src/main/java/com/facebook/imagepipeline/core/ImagePipeline.java
@@ -391,7 +391,9 @@ public boolean isInBitmapMemoryCache(final ImageRequest imageRequest) {
 
   /**
    * Returns whether the image is stored in the disk cache.
-   * The check is made synchronously
+   * Performs disk cache check synchronously. It is not recommended to use this
+   * unless you know what exactly you are doing. Disk cache check is a costly operation,
+   * the call will block the caller thread until the cache check is completed.
    * @param uri the uri for the image to be looked up.
    * @return true if the image was found in the disk cache, false otherwise.
    */
@@ -401,7 +403,7 @@ public boolean isInDiskCacheSync(final Uri uri) {
 
   /**
    * Performs disk cache check synchronously. It is not recommended to use this
-   * unless u know what exactly you are doing. Disk cache check is a costly operation,
+   * unless you know what exactly you are doing. Disk cache check is a costly operation,
    * the call will block the caller thread until the cache check is completed.
    * @param imageRequest the imageRequest for the image to be looked up.
    * @return true if the image was found in the disk cache, false otherwise.
diff --git a/imagepipeline/src/test/java/com/facebook/imagepipeline/cache/BufferedDiskCacheTest.java b/imagepipeline/src/test/java/com/facebook/imagepipeline/cache/BufferedDiskCacheTest.java
index 841490bd5..559003f9f 100644
--- a/imagepipeline/src/test/java/com/facebook/imagepipeline/cache/BufferedDiskCacheTest.java
+++ b/imagepipeline/src/test/java/com/facebook/imagepipeline/cache/BufferedDiskCacheTest.java
@@ -134,6 +134,12 @@ public void testDoesntAlwaysHaveKeySync() {
     assertFalse(mBufferedDiskCache.containsSync(mCacheKey));
   }
 
+  @Test
+  public void testSyncDiskCacheCheck(){
+    when(mStagingArea.containsKey(mCacheKey) || mFileCache.hasKey(mCacheKey)).thenReturn(true);
+    assertTrue(mBufferedDiskCache.syncDiskCheck(mCacheKey));
+  }
+
   @Test
   public void testQueriesDiskCache() throws Exception {
     when(mFileCache.getResource(eq(mCacheKey))).thenReturn(mBinaryResource);
