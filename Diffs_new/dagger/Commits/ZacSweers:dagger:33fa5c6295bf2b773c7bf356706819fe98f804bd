diff --git a/java/dagger/internal/codegen/SimpleMethodBindingExpression.java b/java/dagger/internal/codegen/SimpleMethodBindingExpression.java
index 6c884fa75..f35d0a0d6 100644
--- a/java/dagger/internal/codegen/SimpleMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/SimpleMethodBindingExpression.java
@@ -99,9 +99,7 @@ private Expression invokeMethod(ClassName requestingClass) {
         throw new IllegalStateException();
     }
 
-    return Expression.create(
-        provisionBinding.contributedPrimitiveType().orElse(provisionBinding.key().type()),
-        invocation);
+    return Expression.create(simpleMethodReturnType(), invocation);
   }
 
   private TypeName constructorTypeName(ClassName requestingClass) {
@@ -133,7 +131,7 @@ private CodeBlock dependencyArgument(DependencyRequest dependency, ClassName req
 
   private Expression injectMembers(CodeBlock instance) {
     if (provisionBinding.injectionSites().isEmpty()) {
-      return Expression.create(provisionBinding.key().type(), instance);
+      return Expression.create(simpleMethodReturnType(), instance);
     }
     // Java 7 type inference can't figure out that instance in
     // injectParameterized(Parameterized_Factory.newParameterized()) is Parameterized<T> and not
@@ -162,4 +160,8 @@ private Expression injectMembers(CodeBlock instance) {
                     componentRequirementFields.getExpression(requirement, requestingClass))
         : Optional.empty();
   }
+
+  private TypeMirror simpleMethodReturnType() {
+    return provisionBinding.contributedPrimitiveType().orElse(provisionBinding.key().type());
+  }
 }
diff --git a/javatests/dagger/functional/multipackage/PrimitivesAcrossPackagesComponent.java b/javatests/dagger/functional/multipackage/PrimitivesAcrossPackagesComponent.java
new file mode 100644
index 000000000..639558f7a
--- /dev/null
+++ b/javatests/dagger/functional/multipackage/PrimitivesAcrossPackagesComponent.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (C) 2018 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional.multipackage;
+
+import dagger.Component;
+import dagger.functional.multipackage.primitives.PrimitiveAcrossPackagesModule;
+import javax.inject.Provider;
+
+// b/77150738#comment11
+@Component(modules = PrimitiveAcrossPackagesModule.class)
+interface PrimitivesAcrossPackagesComponent {
+  boolean primitive();
+
+  Provider<Boolean> boxedPrimitive();
+}
diff --git a/javatests/dagger/functional/multipackage/primitives/PrimitiveAcrossPackagesModule.java b/javatests/dagger/functional/multipackage/primitives/PrimitiveAcrossPackagesModule.java
new file mode 100644
index 000000000..1e6e36203
--- /dev/null
+++ b/javatests/dagger/functional/multipackage/primitives/PrimitiveAcrossPackagesModule.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (C) 2018 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional.multipackage.primitives;
+
+import dagger.Module;
+import dagger.Provides;
+
+@Module
+public final class PrimitiveAcrossPackagesModule {
+  // This method should be package-private so that a proxy method is created
+  @Provides
+  static boolean primitive() {
+    return false;
+  }
+}
