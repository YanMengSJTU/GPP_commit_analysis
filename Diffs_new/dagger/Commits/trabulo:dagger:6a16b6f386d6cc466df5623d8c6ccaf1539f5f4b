diff --git a/java/dagger/internal/codegen/CompilerOptions.java b/java/dagger/internal/codegen/CompilerOptions.java
index af450bc0a..685a26e47 100644
--- a/java/dagger/internal/codegen/CompilerOptions.java
+++ b/java/dagger/internal/codegen/CompilerOptions.java
@@ -77,7 +77,7 @@ boolean doCheckForNulls() {
 
   abstract boolean headerCompilation();
 
-  abstract boolean aheadOfTimeComponents();
+  abstract boolean aheadOfTimeSubcomponents();
 
   static Builder builder() {
     return new AutoValue_CompilerOptions.Builder().headerCompilation(false);
@@ -109,8 +109,8 @@ static CompilerOptions create(ProcessingEnvironment processingEnv, DaggerElement
         .warnIfInjectionFactoryNotGeneratedUpstream(
             warnIfInjectionFactoryNotGeneratedUpstreamFeatureStatus(processingEnv)
                 .equals(FeatureStatus.ENABLED))
-        .aheadOfTimeComponents(
-            aheadOfTimeComponentsFeatureStatus(processingEnv).equals(FeatureStatus.ENABLED))
+        .aheadOfTimeSubcomponents(
+            aheadOfTimeSubcomponentsFeatureStatus(processingEnv).equals(FeatureStatus.ENABLED))
         .build();
   }
 
@@ -140,7 +140,7 @@ Builder ignorePrivateAndStaticInjectionForComponent(
     Builder warnIfInjectionFactoryNotGeneratedUpstream(
         boolean warnIfInjectionFactoryNotGeneratedUpstream);
 
-    Builder aheadOfTimeComponents(boolean aheadOfTimeComponents);
+    Builder aheadOfTimeSubcomponents(boolean aheadOfTimeSubcomponents);
 
     CompilerOptions build();
   }
@@ -178,7 +178,7 @@ Builder warnIfInjectionFactoryNotGeneratedUpstream(
   static final String IGNORE_PRIVATE_AND_STATIC_INJECTION_FOR_COMPONENT =
       "dagger.ignorePrivateAndStaticInjectionForComponent";
 
-  static final String AHEAD_OF_TIME_COMPONENTS_KEY = "dagger.experimentalAheadOfTimeComponents";
+  static final String AHEAD_OF_TIME_COMPONENTS_KEY = "dagger.experimentalAheadOfTimeSubcomponents";
 
   static final ImmutableSet<String> SUPPORTED_OPTIONS =
       ImmutableSet.of(
@@ -277,7 +277,7 @@ private static FeatureStatus warnIfInjectionFactoryNotGeneratedUpstreamFeatureSt
         EnumSet.allOf(FeatureStatus.class));
   }
 
-  private static FeatureStatus aheadOfTimeComponentsFeatureStatus(
+  private static FeatureStatus aheadOfTimeSubcomponentsFeatureStatus(
       ProcessingEnvironment processingEnv) {
     return valueOf(
         processingEnv,
diff --git a/java/dagger/internal/codegen/KytheBindingGraphFactory.java b/java/dagger/internal/codegen/KytheBindingGraphFactory.java
index 9380285e8..0d49637de 100644
--- a/java/dagger/internal/codegen/KytheBindingGraphFactory.java
+++ b/java/dagger/internal/codegen/KytheBindingGraphFactory.java
@@ -106,7 +106,7 @@ private static BindingGraphFactory createBindingGraphFactory(
             .warnIfInjectionFactoryNotGeneratedUpstream(false)
             .fastInit(false)
             .experimentalAndroidMode2(false)
-            .aheadOfTimeComponents(false)
+            .aheadOfTimeSubcomponents(false)
             .build();
 
     BindingFactory bindingFactory =
diff --git a/javatests/dagger/functional/cycle/LongCycleTest.java b/javatests/dagger/functional/cycle/LongCycleTest.java
index 95fdf05e9..02250541a 100644
--- a/javatests/dagger/functional/cycle/LongCycleTest.java
+++ b/javatests/dagger/functional/cycle/LongCycleTest.java
@@ -46,7 +46,7 @@ public void longCycleHasMoreThanOneInitializeMethod() throws NoSuchMethodExcepti
     assume().that(System.getProperty("dagger.mode")).isNotEqualTo("FastInit");
     assume()
         .that(System.getProperty("dagger.mode"))
-        .isNotEqualTo("FastInitAndAheadOfTimeComponents");
+        .isNotEqualTo("FastInitAndAheadOfTimeSubcomponents");
     DaggerLongCycle_LongCycleComponent.class
         .getDeclaredMethod("initialize2", DaggerLongCycle_LongCycleComponent.Builder.class);
   }
diff --git a/javatests/dagger/functional/subcomponent/SubcomponentTest.java b/javatests/dagger/functional/subcomponent/SubcomponentTest.java
index 26da5f1c5..8e72138fc 100644
--- a/javatests/dagger/functional/subcomponent/SubcomponentTest.java
+++ b/javatests/dagger/functional/subcomponent/SubcomponentTest.java
@@ -89,7 +89,7 @@ public void unscopedProviders() {
     assume().that(System.getProperty("dagger.mode")).isNotEqualTo("FastInit");
     assume()
         .that(System.getProperty("dagger.mode"))
-        .isNotEqualTo("FastInitAndAheadOfTimeComponents");
+        .isNotEqualTo("FastInitAndAheadOfTimeSubcomponents");
     assertThat(parentGetters.getUnscopedTypeProvider())
         .isSameAs(childComponent.getUnscopedTypeProvider());
     assertThat(parentGetters.getUnscopedTypeProvider())
diff --git a/test_defs.bzl b/test_defs.bzl
index 0869038aa..6f71971df 100644
--- a/test_defs.bzl
+++ b/test_defs.bzl
@@ -17,10 +17,10 @@
 BUILD_VARIANTS = {
     "FastInit": ["-Adagger.fastInit=enabled"],
     "ExperimentalAndroidMode2": ["-Adagger.experimentalAndroidMode2=enabled"],
-    "ExperimentalAheadOfTimeComponents": ["-Adagger.experimentalAheadOfTimeComponents=enabled"],
-    "FastInitAndAheadOfTimeComponents": [
+    "ExperimentalAheadOfTimeSubcomponents": ["-Adagger.experimentalAheadOfTimeSubcomponents=enabled"],
+    "FastInitAndAheadOfTimeSubcomponents": [
         "-Adagger.fastInit=enabled",
-        "-Adagger.experimentalAheadOfTimeComponents=enabled",
+        "-Adagger.experimentalAheadOfTimeSubcomponents=enabled",
     ],
 }
 
