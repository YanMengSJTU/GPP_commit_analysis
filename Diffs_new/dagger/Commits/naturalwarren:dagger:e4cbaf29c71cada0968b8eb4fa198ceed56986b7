diff --git a/java/dagger/internal/codegen/BindingGraph.java b/java/dagger/internal/codegen/BindingGraph.java
index 44cf0d7b4..e0a6a8f76 100644
--- a/java/dagger/internal/codegen/BindingGraph.java
+++ b/java/dagger/internal/codegen/BindingGraph.java
@@ -24,6 +24,7 @@
 import static dagger.internal.codegen.ComponentDescriptor.Kind.PRODUCTION_COMPONENT;
 import static dagger.internal.codegen.ComponentDescriptor.isComponentContributionMethod;
 import static dagger.internal.codegen.ComponentDescriptor.isComponentProductionMethod;
+import static dagger.internal.codegen.ContributionBinding.Kind.PROVISION;
 import static dagger.internal.codegen.ContributionBinding.Kind.SYNTHETIC_MULTIBOUND_KINDS;
 import static dagger.internal.codegen.ContributionBinding.Kind.SYNTHETIC_OPTIONAL_BINDING;
 import static dagger.internal.codegen.Key.indexByKey;
@@ -956,8 +957,7 @@ void resolve(BindingKey bindingKey) {
            * component between this one and the previously-resolved one. */
           parentResolver.get().resolve(bindingKey);
           LocalDependencyChecker localDependencyChecker = new LocalDependencyChecker();
-          if (!localDependencyChecker.dependsOnLocalBindings(bindingKey) &&
-              !localDependencyChecker.bindingDefinedLocally(bindingKey)) {
+          if (!localDependencyChecker.dependsOnLocalBindings(bindingKey)) {
             /* Cache the inherited parent component's bindings in case resolving at the parent found
              * bindings in some component between this one and the previously-resolved one. */
             ResolvedBindings inheritedBindings =
@@ -1059,24 +1059,6 @@ private boolean dependsOnLocalBindingsUncached(BindingKey bindingKey) {
           return false;
         }
 
-        /**
-         * Returns {@code true} if any of the bindings resolved for {@code bindingKey} are
-         * defined locally within this component's modules. If {@code bindingKey} is of kind
-         * {@link BindingKey.Kind#MEMBERS_INJECTION} each of the binding's dependencies will be
-         * checked to see if they are defined locally within this component's modules.
-         */
-        boolean bindingDefinedLocally(BindingKey bindingKey) {
-          if (bindingKey.kind().equals(BindingKey.Kind.MEMBERS_INJECTION)) {
-            return !getPreviouslyResolvedBindings(bindingKey)
-                .get()
-                .bindings()
-                .stream()
-                .flatMap(binding -> binding.dependencies().stream())
-                .anyMatch(dependency -> getLocalExplicitBindings(dependency.key()).isEmpty());
-          }
-          return !getLocalExplicitBindings(bindingKey.key()).isEmpty();
-        }
-
         /**
          * Returns {@code true} if {@code binding} is unscoped (or has {@link Reusable @Reusable}
          * scope) and depends on multibindings with contributions declared within this component's
@@ -1134,6 +1116,19 @@ private boolean hasLocallyPresentOptionalBinding(ResolvedBindings resolvedBindin
               && !getLocalExplicitBindings(keyFactory.unwrapOptional(resolvedBindings.key()).get())
                   .isEmpty();
         }
+
+        /**
+         * Returns {@code true} if {@code resolvedBindings} contains a provision binding
+         * for which there is an explicit present binding in this component.
+         */
+        boolean hasLocallyResolvedContributionBinding(ResolvedBindings resolvedBindings) {
+          return resolvedBindings
+                .contributionBindings()
+                .stream()
+                .map(ContributionBinding::bindingKind)
+                .anyMatch(isEqual(PROVISION))
+            && !getLocalExplicitBindings(resolvedBindings.key()).isEmpty();
+        }
       }
     }
 
diff --git a/javatests/dagger/internal/codegen/GraphValidationTest.java b/javatests/dagger/internal/codegen/GraphValidationTest.java
index 504c07c65..299e7e2e9 100644
--- a/javatests/dagger/internal/codegen/GraphValidationTest.java
+++ b/javatests/dagger/internal/codegen/GraphValidationTest.java
@@ -2437,7 +2437,7 @@ public void subcomponentTransitiveBindingConflictsWithParent() {
         .processedWith(new ComponentProcessor())
         .failsToCompile()
         .withErrorContaining(
-            "[test.Child.string()] java.lang.String is bound multiple times:\n"
+            "[test.Child.object()] java.lang.String is bound multiple times:\n"
                 + "      @Provides String"
                 + " test.Parent.ParentModule.string()\n"
                 + "      @Provides String"
