diff --git a/java/dagger/internal/codegen/AbstractComponentWriter.java b/java/dagger/internal/codegen/AbstractComponentWriter.java
index d389d1101..b0fcc2378 100644
--- a/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -33,7 +33,6 @@
 import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.FieldSpec;
 import com.squareup.javapoet.MethodSpec;
-import com.squareup.javapoet.TypeName;
 import com.squareup.javapoet.TypeSpec;
 import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
 import java.util.ArrayList;
@@ -50,7 +49,7 @@
   // TODO(dpb): Make all these fields private after refactoring is complete.
   protected final Elements elements;
   protected final DaggerTypes types;
-  protected final CompilerOptions compilerOptions;
+  private final CompilerOptions compilerOptions;
   protected final BindingGraph graph;
   protected final SubcomponentNames subcomponentNames;
   private final ComponentBindingExpressions bindingExpressions;
@@ -138,13 +137,6 @@ protected AbstractComponentWriter(
         parent.referenceReleasingManagerFields);
   }
 
-  /**
-   * Creates a {@link FieldSpec.Builder} with a unique name based off of {@code name}.
-   */
-  protected final FieldSpec.Builder componentField(TypeName type, String name) {
-    return FieldSpec.builder(type, generatedComponentModel.getUniqueFieldName(name));
-  }
-
   /**
    * Constructs a {@link TypeSpec.Builder} that models the {@link BindingGraph} for this component.
    * This is only intended to be called once (and will throw on successive invocations). If the
diff --git a/java/dagger/internal/codegen/SubcomponentWriter.java b/java/dagger/internal/codegen/SubcomponentWriter.java
index 4f9ccf239..e7413daee 100644
--- a/java/dagger/internal/codegen/SubcomponentWriter.java
+++ b/java/dagger/internal/codegen/SubcomponentWriter.java
@@ -170,4 +170,9 @@ private void writeSubcomponentWithoutBuilder(
         generatedComponentModel.name(),
         makeParametersCodeBlock(subcomponentConstructorParameters.build()));
   }
+
+  /** Creates a {@link FieldSpec.Builder} with a unique name based off of {@code name}. */
+  private final FieldSpec.Builder componentField(TypeName type, String name) {
+    return FieldSpec.builder(type, generatedComponentModel.getUniqueFieldName(name));
+  }
 }
