diff --git a/examples/async/src/main/java/coffee2/AsyncCoffeeModule.java b/examples/async/src/main/java/coffee2/AsyncCoffeeModule.java
new file mode 100644
index 000000000..479774449
--- /dev/null
+++ b/examples/async/src/main/java/coffee2/AsyncCoffeeModule.java
@@ -0,0 +1,31 @@
+package coffee2;
+
+import javax.inject.Singleton;
+
+import com.google.common.util.concurrent.Futures;
+import com.google.common.util.concurrent.ListenableFuture;
+
+import dagger.Lazy;
+import dagger.producers.ProducerModule;
+import dagger.producers.Produces;
+
+@ProducerModule
+class AsyncCoffeeModule {
+    @Produces
+    @Singleton
+    ListenableFuture<CoffeeMaker> produceMaker(Lazy<Heater> heater, Pump pump, Grinder grinder) {
+        System.out.println("@Producing CoffeeMaker..");
+        return Futures.immediateFuture(new CoffeeMaker(heater, pump, grinder));
+    }
+    
+    @Produces
+    ListenableFuture<Grinder> produceGrinder() {
+        System.out.println("@Producing Grinder..");
+        try {
+            Thread.sleep(2000);
+        } catch (InterruptedException e) {
+        }
+        System.out.println("done @Producing Grinder");
+        return Futures.immediateFuture((Grinder) new ElectricGrinder());
+    }
+}
diff --git a/examples/async/src/main/java/coffee2/CoffeeApp.java b/examples/async/src/main/java/coffee2/CoffeeApp.java
index 3cffffb2c..98d2a930b 100644
--- a/examples/async/src/main/java/coffee2/CoffeeApp.java
+++ b/examples/async/src/main/java/coffee2/CoffeeApp.java
@@ -1,19 +1,30 @@
 package coffee2;
 
-import dagger.Component;
+import dagger.producers.ProductionComponent;
+
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+
 import javax.inject.Singleton;
 
-import coffee2.DaggerCoffeeApp_Coffee;
+import com.google.common.util.concurrent.ListenableFuture;
 
 public class CoffeeApp {
   @Singleton
-  @Component(modules = { DripCoffeeModule.class })
+  @ProductionComponent(modules = { AsyncCoffeeModule.class, DripCoffeeModule.class, PumpModule.class })
   public interface Coffee {
-    CoffeeMaker maker();
+      ListenableFuture<CoffeeMaker> maker();
   }
 
-  public static void main(String[] args) {
-    Coffee coffee = DaggerCoffeeApp_Coffee.builder().build();
-    coffee.maker().brew();
+  public static void main(String[] args) throws Exception {
+      ExecutorService es = Executors.newFixedThreadPool(3);
+
+      Coffee coffee = DaggerCoffeeApp_Coffee.builder()
+              .executor(es).build();
+
+      CoffeeMaker maker = coffee.maker().get();
+      maker.brew();
+
+      es.shutdownNow();
   }
 }
diff --git a/examples/async/src/main/java/coffee2/CoffeeMaker.java b/examples/async/src/main/java/coffee2/CoffeeMaker.java
index d3c93f1b4..de298c1f5 100644
--- a/examples/async/src/main/java/coffee2/CoffeeMaker.java
+++ b/examples/async/src/main/java/coffee2/CoffeeMaker.java
@@ -6,13 +6,16 @@
 class CoffeeMaker {
   private final Lazy<Heater> heater; // Create a possibly costly heater only when we use it.
   private final Pump pump;
+  private final Grinder grinder;
 
-  @Inject CoffeeMaker(Lazy<Heater> heater, Pump pump) {
+  @Inject CoffeeMaker(Lazy<Heater> heater, Pump pump, Grinder grinder) {
     this.heater = heater;
     this.pump = pump;
+    this.grinder = grinder;
   }
 
   public void brew() {
+	grinder.grind();
     heater.get().on();
     pump.pump();
     System.out.println(" [_]P coffee! [_]P ");
diff --git a/examples/async/src/main/java/coffee2/DripCoffeeModule.java b/examples/async/src/main/java/coffee2/DripCoffeeModule.java
index ce963e94f..d988cfef4 100644
--- a/examples/async/src/main/java/coffee2/DripCoffeeModule.java
+++ b/examples/async/src/main/java/coffee2/DripCoffeeModule.java
@@ -4,9 +4,10 @@
 import dagger.Provides;
 import javax.inject.Singleton;
 
-@Module(includes = PumpModule.class)
+@Module
 class DripCoffeeModule {
   @Provides @Singleton Heater provideHeater() {
+	System.out.println("@Provide Heater");
     return new ElectricHeater();
   }
 }
diff --git a/examples/async/src/main/java/coffee2/ElectricGrinder.java b/examples/async/src/main/java/coffee2/ElectricGrinder.java
new file mode 100644
index 000000000..66dd5d90b
--- /dev/null
+++ b/examples/async/src/main/java/coffee2/ElectricGrinder.java
@@ -0,0 +1,10 @@
+package coffee2;
+
+class ElectricGrinder implements Grinder {
+  boolean heating;
+
+  @Override public void grind() {
+    System.out.println("~ ~ ~ grinding ~ ~ ~");
+  }
+
+}
diff --git a/examples/async/src/main/java/coffee2/Grinder.java b/examples/async/src/main/java/coffee2/Grinder.java
new file mode 100644
index 000000000..ee2d021a9
--- /dev/null
+++ b/examples/async/src/main/java/coffee2/Grinder.java
@@ -0,0 +1,5 @@
+package coffee2;
+
+interface Grinder {
+  void grind();
+}
diff --git a/examples/async/src/main/java/coffee2/PumpModule.java b/examples/async/src/main/java/coffee2/PumpModule.java
index 45b2286fa..7cb9a92e1 100644
--- a/examples/async/src/main/java/coffee2/PumpModule.java
+++ b/examples/async/src/main/java/coffee2/PumpModule.java
@@ -1,11 +1,21 @@
 package coffee2;
 
-import dagger.Module;
-import dagger.Provides;
+import com.google.common.util.concurrent.Futures;
+import com.google.common.util.concurrent.ListenableFuture;
 
-@Module
+import dagger.producers.ProducerModule;
+import dagger.producers.Produces;
+
+@ProducerModule
 class PumpModule {
-  @Provides Pump providePump(Thermosiphon pump) {
-    return pump;
-  }
-}
+    @Produces
+    ListenableFuture<Pump> producePump(Thermosiphon pump) {
+        System.out.println("@Producing Pump..");
+        try {
+            Thread.sleep(3000);
+        } catch (InterruptedException e) {
+        }
+        System.out.println("done @Producing Pump");
+        return Futures.immediateFuture((Pump)pump);
+    }
+}
\ No newline at end of file
diff --git a/examples/async/src/main/java/coffee2/Thermosiphon.java b/examples/async/src/main/java/coffee2/Thermosiphon.java
index f5ca42a77..fb91c189c 100644
--- a/examples/async/src/main/java/coffee2/Thermosiphon.java
+++ b/examples/async/src/main/java/coffee2/Thermosiphon.java
@@ -7,6 +7,7 @@
 
   @Inject
   Thermosiphon(Heater heater) {
+	System.out.println("@Inject Thermosiphon");
     this.heater = heater;
   }
 
