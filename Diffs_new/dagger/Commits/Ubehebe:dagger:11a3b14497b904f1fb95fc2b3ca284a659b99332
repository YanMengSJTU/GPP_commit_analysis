diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index 04b769a57..c0944dba8 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -24,8 +24,8 @@ load("//tools:simple_jar.bzl", "simple_jar")
 EXPERIMENTAL_VISUALIZER_SRCS = ["BindingNetworkVisualizer.java"]
 
 KYTHE_SRCS = [
-    "KytheBindingGraphFactory.java",
     "DaggerKythePlugin.java",
+    "JavacPluginModule.java",
 ]
 
 CODEGEN_SRCS = glob(
@@ -337,6 +337,7 @@ java_library(
         "ComponentProcessingStep.java",
         "ComponentProcessor.java",
         "InjectBindingRegistryImpl.java",
+        "InjectBindingRegistryModule.java",
         "InjectProcessingStep.java",
         "MapKeyProcessingStep.java",
         "ModuleProcessingStep.java",
@@ -382,7 +383,6 @@ java_library(
         ":binding",
         ":kythe_plugin",
         ":processor",
-        ":validation",
         "//java/dagger:core",
         "//java/dagger/model",
         "//java/dagger/producers",
diff --git a/java/dagger/internal/codegen/ComponentProcessor.java b/java/dagger/internal/codegen/ComponentProcessor.java
index 69187ec1c..28e5af748 100644
--- a/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/java/dagger/internal/codegen/ComponentProcessor.java
@@ -23,7 +23,6 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import com.google.errorprone.annotations.CheckReturnValue;
-import dagger.Binds;
 import dagger.BindsInstance;
 import dagger.Component;
 import dagger.Module;
@@ -118,12 +117,13 @@ public SourceVersion getSupportedSourceVersion() {
   @Singleton
   @Component(
       modules = {
-        ProcessingEnvironmentModule.class,
-        SpiModule.class,
         BindingGraphValidationModule.class,
         BindingMethodValidatorsModule.class,
+        InjectBindingRegistryModule.class,
+        ProcessingEnvironmentModule.class,
         ProcessingStepsModule.class,
         SourceFileGeneratorsModule.class,
+        SpiModule.class,
         SystemComponentsModule.class
       })
   interface ProcessorComponent {
@@ -176,9 +176,6 @@ Builder testingPlugins(
               : componentProcessingStep,
           bindingMethodProcessingStep);
     }
-
-    @Binds
-    InjectBindingRegistry injectBindingRegistry(InjectBindingRegistryImpl impl);
   }
 
   @Override
diff --git a/java/dagger/internal/codegen/DaggerKythePlugin.java b/java/dagger/internal/codegen/DaggerKythePlugin.java
index 4b8e8586c..2e9b3f61e 100644
--- a/java/dagger/internal/codegen/DaggerKythePlugin.java
+++ b/java/dagger/internal/codegen/DaggerKythePlugin.java
@@ -20,6 +20,7 @@
 package dagger.internal.codegen;
 
 import static dagger.internal.codegen.BindingRequest.bindingRequest;
+import static dagger.internal.codegen.DaggerElements.isAnyAnnotationPresent;
 
 import com.google.auto.service.AutoService;
 import com.google.common.collect.Iterables;
@@ -29,8 +30,6 @@
 import com.google.devtools.kythe.analyzers.java.Plugin;
 import com.google.devtools.kythe.proto.Storage.VName;
 import com.sun.tools.javac.code.Symbol;
-import com.sun.tools.javac.model.JavacElements;
-import com.sun.tools.javac.model.JavacTypes;
 import com.sun.tools.javac.tree.JCTree.JCClassDecl;
 import com.sun.tools.javac.tree.JCTree.JCCompilationUnit;
 import com.sun.tools.javac.util.Context;
@@ -38,13 +37,12 @@
 import dagger.Component;
 import dagger.model.DependencyRequest;
 import dagger.model.Key;
+import dagger.producers.ProductionComponent;
 import java.util.Optional;
 import java.util.logging.Logger;
 import javax.inject.Inject;
 import javax.inject.Singleton;
 import javax.lang.model.element.Element;
-import javax.lang.model.util.Elements;
-import javax.lang.model.util.Types;
 
 /**
  * A plugin which emits nodes and edges for <a href="https://github.com/google/dagger">Dagger</a>
@@ -55,14 +53,16 @@
   // TODO(ronshapiro): use flogger
   private static final Logger logger = Logger.getLogger(DaggerKythePlugin.class.getCanonicalName());
   private FactEmitter emitter;
-  @Inject KytheBindingGraphFactory bindingGraphFactory;
+  @Inject ComponentDescriptor.Factory componentDescriptorFactory;
+  @Inject BindingGraphFactory bindingGraphFactory;
 
   @Override
   public Void visitClassDef(JCClassDecl tree, Void p) {
-    Optional.ofNullable(tree.sym)
-        .flatMap(bindingGraphFactory::create)
-        .ifPresent(this::addNodesForGraph);
-
+    if (tree.sym != null
+        && isAnyAnnotationPresent(tree.sym, Component.class, ProductionComponent.class)) {
+      addNodesForGraph(
+          bindingGraphFactory.create(componentDescriptorFactory.forTypeElement(tree.sym)));
+    }
     return super.visitClassDef(tree, p);
   }
 
@@ -168,12 +168,9 @@ private void emitEdge(Optional<VName> source, String edgeName, Optional<VName> t
   public void run(
       JCCompilationUnit compilationUnit, KytheEntrySets entrySets, KytheGraph kytheGraph) {
     if (bindingGraphFactory == null) {
-      Context javaContext = kytheGraph.getJavaContext();
       emitter = entrySets.getEmitter();
       DaggerDaggerKythePlugin_PluginComponent.builder()
-          .types(JavacTypes.instance(javaContext))
-          .elements(JavacElements.instance(javaContext))
-          .compilerOptions(KytheBindingGraphFactory.createCompilerOptions())
+          .context(kytheGraph.getJavaContext())
           .build()
           .inject(this);
     }
@@ -181,20 +178,14 @@ public void run(
   }
 
   @Singleton
-  @Component
+  @Component(modules = JavacPluginModule.class)
   interface PluginComponent {
     void inject(DaggerKythePlugin plugin);
 
     @Component.Builder
     interface Builder {
       @BindsInstance
-      Builder types(Types types);
-
-      @BindsInstance
-      Builder elements(Elements elements);
-
-      @BindsInstance
-      Builder compilerOptions(CompilerOptions compilerOptions);
+      Builder context(Context context);
 
       PluginComponent build();
     }
diff --git a/java/dagger/internal/codegen/InjectBindingRegistryModule.java b/java/dagger/internal/codegen/InjectBindingRegistryModule.java
new file mode 100644
index 000000000..45633620d
--- /dev/null
+++ b/java/dagger/internal/codegen/InjectBindingRegistryModule.java
@@ -0,0 +1,26 @@
+/*
+ * Copyright (C) 2018 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.internal.codegen;
+
+import dagger.Binds;
+import dagger.Module;
+
+@Module
+interface InjectBindingRegistryModule {
+  @Binds
+  InjectBindingRegistry injectBindingRegistry(InjectBindingRegistryImpl impl);
+}
diff --git a/java/dagger/internal/codegen/JavacPluginModule.java b/java/dagger/internal/codegen/JavacPluginModule.java
new file mode 100644
index 000000000..1bc1e36ba
--- /dev/null
+++ b/java/dagger/internal/codegen/JavacPluginModule.java
@@ -0,0 +1,104 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.internal.codegen;
+
+import com.sun.tools.javac.model.JavacElements;
+import com.sun.tools.javac.model.JavacTypes;
+import com.sun.tools.javac.util.Context;
+import dagger.Binds;
+import dagger.Module;
+import dagger.Provides;
+import dagger.internal.codegen.ProcessingEnvironmentModule.ElementsModule;
+import javax.annotation.processing.Messager;
+import javax.inject.Inject;
+import javax.lang.model.element.AnnotationMirror;
+import javax.lang.model.element.AnnotationValue;
+import javax.lang.model.element.Element;
+import javax.lang.model.util.Types;
+import javax.tools.Diagnostic;
+
+/**
+ * A module that provides a {@link BindingGraphFactory} and {@link ComponentDescriptor.Factory} for
+ * use in {@code javac} plugins. Requires a binding for the {@code javac} {@link Context}.
+ */
+@Module(includes = {InjectBindingRegistryModule.class, ElementsModule.class})
+abstract class JavacPluginModule {
+  @Provides
+  static CompilerOptions compilerOptions() {
+    return CompilerOptions.builder()
+        .usesProducers(true)
+        .writeProducerNameInToken(true)
+        .nullableValidationKind(Diagnostic.Kind.NOTE)
+        .privateMemberValidationKind(Diagnostic.Kind.NOTE)
+        .staticMemberValidationKind(Diagnostic.Kind.NOTE)
+        .ignorePrivateAndStaticInjectionForComponent(false)
+        .scopeCycleValidationType(ValidationType.NONE)
+        .warnIfInjectionFactoryNotGeneratedUpstream(false)
+        .fastInit(false)
+        .experimentalAndroidMode2(false)
+        .aheadOfTimeSubcomponents(false)
+        .moduleBindingValidationType(ValidationType.NONE)
+        .moduleHasDifferentScopesDiagnosticKind(Diagnostic.Kind.NOTE)
+        .build()
+        .validate();
+  }
+
+  @Binds
+  abstract Messager messager(NullMessager nullMessager);
+
+  static final class NullMessager implements Messager {
+
+    @Inject
+    NullMessager() {}
+
+    @Override
+    public void printMessage(Diagnostic.Kind kind, CharSequence charSequence) {}
+
+    @Override
+    public void printMessage(Diagnostic.Kind kind, CharSequence charSequence, Element element) {}
+
+    @Override
+    public void printMessage(
+        Diagnostic.Kind kind,
+        CharSequence charSequence,
+        Element element,
+        AnnotationMirror annotationMirror) {}
+
+    @Override
+    public void printMessage(
+        Diagnostic.Kind kind,
+        CharSequence charSequence,
+        Element element,
+        AnnotationMirror annotationMirror,
+        AnnotationValue annotationValue) {}
+  }
+
+  @Provides
+  static DaggerElements daggerElements(Context javaContext) {
+    return new DaggerElements(
+        JavacElements.instance(javaContext), JavacTypes.instance(javaContext));
+  }
+
+  @Provides
+  static DaggerTypes daggerTypes(Context javaContext, DaggerElements elements) {
+    return new DaggerTypes(JavacTypes.instance(javaContext), elements);
+  }
+
+  @Binds abstract Types types(DaggerTypes daggerTypes);
+
+  private JavacPluginModule() {}
+}
diff --git a/java/dagger/internal/codegen/KytheBindingGraphFactory.java b/java/dagger/internal/codegen/KytheBindingGraphFactory.java
deleted file mode 100644
index e9ea2428d..000000000
--- a/java/dagger/internal/codegen/KytheBindingGraphFactory.java
+++ /dev/null
@@ -1,176 +0,0 @@
-/*
- * Copyright (C) 2017 The Dagger Authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package dagger.internal.codegen;
-
-import com.google.auto.common.MoreElements;
-import dagger.Component;
-import dagger.producers.ProductionComponent;
-import java.util.Optional;
-import javax.annotation.processing.Messager;
-import javax.inject.Inject;
-import javax.lang.model.element.AnnotationMirror;
-import javax.lang.model.element.AnnotationValue;
-import javax.lang.model.element.Element;
-import javax.lang.model.element.TypeElement;
-import javax.lang.model.util.Elements;
-import javax.lang.model.util.Types;
-import javax.tools.Diagnostic;
-
-/**
- * A factory of {@link BindingGraph}s for use by <a href="https://kythe.io">Kythe</a>.
- *
- * <p>This is <b>not</b> intended to be used by any other APIs/processors and is not part of any
- * supported API except for Kythe.
- */
-final class KytheBindingGraphFactory {
-  private final ComponentDescriptor.Factory componentDescriptorFactory;
-  private final BindingGraphFactory bindingGraphFactory;
-
-  @Inject
-  KytheBindingGraphFactory(Types types, Elements elements, CompilerOptions compilerOptions) {
-    DaggerElements daggerElements = new DaggerElements(elements, types);
-    DaggerTypes daggerTypes = new DaggerTypes(types, daggerElements);
-    this.componentDescriptorFactory =
-        createComponentDescriptorFactory(daggerElements, daggerTypes, compilerOptions);
-    this.bindingGraphFactory =
-        createBindingGraphFactory(daggerTypes, daggerElements, compilerOptions);
-  }
-
-  /**
-   * Creates a {@link BindingGraph} for {@code type} if it is annotated with a component annotation,
-   * otherwise returns {@link Optional#empty()}.
-   */
-  Optional<BindingGraph> create(TypeElement type) {
-    if (MoreElements.isAnnotationPresent(type, Component.class)
-        || MoreElements.isAnnotationPresent(type, ProductionComponent.class)) {
-      return Optional.of(
-          bindingGraphFactory.create(componentDescriptorFactory.forTypeElement(type)));
-    }
-    return Optional.empty();
-  }
-
-  /** Creates the {@link CompilerOptions} for use during {@link BindingGraph} construction. */
-  // TODO(dpb): Use Dagger to inject this!
-  static CompilerOptions createCompilerOptions() {
-    return CompilerOptions.builder()
-        .usesProducers(true)
-        .writeProducerNameInToken(true)
-        .nullableValidationKind(Diagnostic.Kind.NOTE)
-        .privateMemberValidationKind(Diagnostic.Kind.NOTE)
-        .staticMemberValidationKind(Diagnostic.Kind.NOTE)
-        .ignorePrivateAndStaticInjectionForComponent(false)
-        .scopeCycleValidationType(ValidationType.NONE)
-        .warnIfInjectionFactoryNotGeneratedUpstream(false)
-        .fastInit(false)
-        .experimentalAndroidMode2(false)
-        .aheadOfTimeSubcomponents(false)
-        .moduleBindingValidationType(ValidationType.NONE)
-        .moduleHasDifferentScopesDiagnosticKind(Diagnostic.Kind.NOTE)
-        .build()
-        .validate();
-  }
-
-  // TODO(dpb): Use Dagger to inject this!
-  private static ComponentDescriptor.Factory createComponentDescriptorFactory(
-      DaggerElements elements, DaggerTypes types, CompilerOptions compilerOptions) {
-    KeyFactory keyFactory = new KeyFactory(types, elements);
-    DependencyRequestFactory dependencyRequestFactory =
-        new DependencyRequestFactory(keyFactory, types);
-    BindingFactory provisionBindingFactory =
-        new BindingFactory(types, elements, keyFactory, dependencyRequestFactory);
-    MultibindingDeclaration.Factory multibindingDeclarationFactory =
-        new MultibindingDeclaration.Factory(types, keyFactory);
-    DelegateDeclaration.Factory bindingDelegateDeclarationFactory =
-        new DelegateDeclaration.Factory(types, keyFactory, dependencyRequestFactory);
-    SubcomponentDeclaration.Factory subcomponentDeclarationFactory =
-        new SubcomponentDeclaration.Factory(keyFactory);
-    OptionalBindingDeclaration.Factory optionalBindingDeclarationFactory =
-        new OptionalBindingDeclaration.Factory(keyFactory);
-
-    ModuleDescriptor.Factory moduleDescriptorFactory =
-        new ModuleDescriptor.Factory(
-            elements,
-            provisionBindingFactory,
-            multibindingDeclarationFactory,
-            bindingDelegateDeclarationFactory,
-            subcomponentDeclarationFactory,
-            optionalBindingDeclarationFactory);
-    return new ComponentDescriptor.Factory(
-        elements, types, dependencyRequestFactory, moduleDescriptorFactory, compilerOptions);
-  }
-
-  // TODO(dpb): Use Dagger to inject this!
-  private static BindingGraphFactory createBindingGraphFactory(
-      DaggerTypes types, DaggerElements elements, CompilerOptions compilerOptions) {
-    KeyFactory keyFactory = new KeyFactory(types, elements);
-
-    BindingFactory bindingFactory =
-        new BindingFactory(
-            types, elements, keyFactory, new DependencyRequestFactory(keyFactory, types));
-
-    InjectBindingRegistry injectBindingRegistry =
-        new InjectBindingRegistryImpl(
-            elements,
-            types,
-            new NullMessager(),
-            new InjectValidator(
-                types,
-                elements,
-                new DependencyRequestValidator(new MembersInjectionValidator()),
-                compilerOptions),
-            keyFactory,
-            bindingFactory,
-            compilerOptions);
-    return new BindingGraphFactory(
-        elements,
-        injectBindingRegistry,
-        keyFactory,
-        bindingFactory,
-        new ModuleDescriptor.Factory(
-            elements,
-            bindingFactory,
-            new MultibindingDeclaration.Factory(types, keyFactory),
-            new DelegateDeclaration.Factory(
-                types, keyFactory, new DependencyRequestFactory(keyFactory, types)),
-            new SubcomponentDeclaration.Factory(keyFactory),
-            new OptionalBindingDeclaration.Factory(keyFactory)),
-        compilerOptions);
-  }
-
-  private static class NullMessager implements Messager {
-    @Override
-    public void printMessage(Diagnostic.Kind kind, CharSequence charSequence) {}
-
-    @Override
-    public void printMessage(Diagnostic.Kind kind, CharSequence charSequence, Element element) {}
-
-    @Override
-    public void printMessage(
-        Diagnostic.Kind kind,
-        CharSequence charSequence,
-        Element element,
-        AnnotationMirror annotationMirror) {}
-
-    @Override
-    public void printMessage(
-        Diagnostic.Kind kind,
-        CharSequence charSequence,
-        Element element,
-        AnnotationMirror annotationMirror,
-        AnnotationValue annotationValue) {}
-  }
-}
