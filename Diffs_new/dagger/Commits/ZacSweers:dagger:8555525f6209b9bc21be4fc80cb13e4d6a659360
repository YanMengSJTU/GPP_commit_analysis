diff --git a/java/dagger/internal/codegen/ComponentGenerator.java b/java/dagger/internal/codegen/ComponentGenerator.java
index f5c529fdc..d374b2e55 100644
--- a/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/java/dagger/internal/codegen/ComponentGenerator.java
@@ -65,10 +65,10 @@ public Element originatingElement(BindingGraph input) {
   }
 
   @Override
-  public Optional<TypeSpec.Builder> write(ClassName componentName, BindingGraph bindingGraph) {
+  public Optional<TypeSpec.Builder> write(BindingGraph bindingGraph) {
     ComponentImplementation componentImplementation =
         componentImplementationFactory.createComponentImplementation(bindingGraph);
-    verify(componentImplementation.name().equals(componentName));
+    verify(componentImplementation.name().equals(nameGeneratedType(bindingGraph)));
     return Optional.of(componentImplementation.generate());
   }
 }
diff --git a/java/dagger/internal/codegen/ComponentHjarProcessingStep.java b/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
index 4417e9fac..8ae79d2a5 100644
--- a/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
+++ b/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
@@ -151,8 +151,8 @@ public Element originatingElement(ComponentDescriptor input) {
     }
 
     @Override
-    public Optional<TypeSpec.Builder> write(
-        ClassName generatedTypeName, ComponentDescriptor componentDescriptor) {
+    public Optional<TypeSpec.Builder> write(ComponentDescriptor componentDescriptor) {
+      ClassName generatedTypeName = nameGeneratedType(componentDescriptor);
       TypeSpec.Builder generatedComponent =
           TypeSpec.classBuilder(generatedTypeName)
               .addModifiers(FINAL)
diff --git a/java/dagger/internal/codegen/base/SourceFileGenerator.java b/java/dagger/internal/codegen/base/SourceFileGenerator.java
index 87f6d62ab..02348a4f4 100644
--- a/java/dagger/internal/codegen/base/SourceFileGenerator.java
+++ b/java/dagger/internal/codegen/base/SourceFileGenerator.java
@@ -74,13 +74,12 @@ public void generate(T input, Messager messager) {
 
   /** Generates a source file to be compiled for {@code T}. */
   public void generate(T input) throws SourceFileGenerationException {
-    ClassName generatedTypeName = nameGeneratedType(input);
-    Optional<TypeSpec.Builder> type = write(generatedTypeName, input);
+    Optional<TypeSpec.Builder> type = write(input);
     if (!type.isPresent()) {
       return;
     }
     try {
-      buildJavaFile(generatedTypeName, input, type.get()).writeTo(filer);
+      buildJavaFile(input, type.get()).writeTo(filer);
     } catch (Exception e) {
       // if the code above threw a SFGE, use that
       Throwables.propagateIfPossible(e, SourceFileGenerationException.class);
@@ -89,8 +88,7 @@ public void generate(T input) throws SourceFileGenerationException {
     }
   }
 
-  private JavaFile buildJavaFile(
-      ClassName generatedTypeName, T input, TypeSpec.Builder typeSpecBuilder) {
+  private JavaFile buildJavaFile(T input, TypeSpec.Builder typeSpecBuilder) {
     typeSpecBuilder.addOriginatingElement(originatingElement(input));
     Optional<AnnotationSpec> generatedAnnotation =
         generatedAnnotation(elements, sourceVersion)
@@ -111,7 +109,7 @@ private JavaFile buildJavaFile(
                 .build()));
 
     JavaFile.Builder javaFileBuilder =
-        JavaFile.builder(generatedTypeName.packageName(), typeSpecBuilder.build())
+        JavaFile.builder(nameGeneratedType(input).packageName(), typeSpecBuilder.build())
             .skipJavaLangImports(true);
     if (!generatedAnnotation.isPresent()) {
       javaFileBuilder.addFileComment("Generated by Dagger ($L).", GENERATED_COMMENTS);
@@ -131,7 +129,7 @@ private JavaFile buildJavaFile(
    */
   // TODO(ronshapiro): write() makes more sense in JavaWriter where all writers are mutable.
   // consider renaming to something like typeBuilder() which conveys the mutability of the result
-  public abstract Optional<TypeSpec.Builder> write(ClassName generatedTypeName, T input);
+  public abstract Optional<TypeSpec.Builder> write(T input);
 
   /** Returns {@link Suppression}s that are applied to files generated by this generator. */
   // TODO(b/134590785): When suppressions are removed locally, remove this and inline the usages
diff --git a/java/dagger/internal/codegen/validation/MonitoringModuleGenerator.java b/java/dagger/internal/codegen/validation/MonitoringModuleGenerator.java
index 5a3239c03..2c72e5f0d 100644
--- a/java/dagger/internal/codegen/validation/MonitoringModuleGenerator.java
+++ b/java/dagger/internal/codegen/validation/MonitoringModuleGenerator.java
@@ -64,10 +64,9 @@ public Element originatingElement(TypeElement componentElement) {
   }
 
   @Override
-  public Optional<TypeSpec.Builder> write(
-      ClassName generatedTypeName, TypeElement componentElement) {
+  public Optional<TypeSpec.Builder> write(TypeElement componentElement) {
     return Optional.of(
-        classBuilder(generatedTypeName)
+        classBuilder(nameGeneratedType(componentElement))
             .addAnnotation(Module.class)
             .addModifiers(ABSTRACT)
             .addMethod(privateConstructor())
diff --git a/java/dagger/internal/codegen/writing/AnnotationCreatorGenerator.java b/java/dagger/internal/codegen/writing/AnnotationCreatorGenerator.java
index c047e9e0e..96e6340af 100644
--- a/java/dagger/internal/codegen/writing/AnnotationCreatorGenerator.java
+++ b/java/dagger/internal/codegen/writing/AnnotationCreatorGenerator.java
@@ -98,7 +98,8 @@ public Element originatingElement(TypeElement annotationType) {
   }
 
   @Override
-  public Optional<TypeSpec.Builder> write(ClassName generatedTypeName, TypeElement annotationType) {
+  public Optional<TypeSpec.Builder> write(TypeElement annotationType) {
+    ClassName generatedTypeName = nameGeneratedType(annotationType);
     TypeSpec.Builder annotationCreatorBuilder =
         classBuilder(generatedTypeName)
             .addModifiers(PUBLIC, FINAL)
diff --git a/java/dagger/internal/codegen/writing/FactoryGenerator.java b/java/dagger/internal/codegen/writing/FactoryGenerator.java
index b836313a3..9bbf0602d 100644
--- a/java/dagger/internal/codegen/writing/FactoryGenerator.java
+++ b/java/dagger/internal/codegen/writing/FactoryGenerator.java
@@ -113,7 +113,7 @@ public Element originatingElement(ProvisionBinding binding) {
   }
 
   @Override
-  public Optional<TypeSpec.Builder> write(ClassName generatedTypeName, ProvisionBinding binding) {
+  public Optional<TypeSpec.Builder> write(ProvisionBinding binding) {
     // We don't want to write out resolved bindings -- we want to write out the generic version.
     checkArgument(!binding.unresolved().isPresent());
     checkArgument(binding.bindingElement().isPresent());
diff --git a/java/dagger/internal/codegen/writing/HjarSourceFileGenerator.java b/java/dagger/internal/codegen/writing/HjarSourceFileGenerator.java
index 340ee17ca..5a4b6f132 100644
--- a/java/dagger/internal/codegen/writing/HjarSourceFileGenerator.java
+++ b/java/dagger/internal/codegen/writing/HjarSourceFileGenerator.java
@@ -57,10 +57,8 @@ public Element originatingElement(T input) {
   }
 
   @Override
-  public Optional<TypeSpec.Builder> write(ClassName generatedTypeName, T input) {
-    return delegate
-        .write(generatedTypeName, input)
-        .map(completeType -> skeletonType(completeType.build()));
+  public Optional<TypeSpec.Builder> write(T input) {
+    return delegate.write(input).map(completeType -> skeletonType(completeType.build()));
   }
 
   private TypeSpec.Builder skeletonType(TypeSpec completeType) {
diff --git a/java/dagger/internal/codegen/writing/InaccessibleMapKeyProxyGenerator.java b/java/dagger/internal/codegen/writing/InaccessibleMapKeyProxyGenerator.java
index 29e180be8..d52735963 100644
--- a/java/dagger/internal/codegen/writing/InaccessibleMapKeyProxyGenerator.java
+++ b/java/dagger/internal/codegen/writing/InaccessibleMapKeyProxyGenerator.java
@@ -64,11 +64,11 @@ public Element originatingElement(ContributionBinding binding) {
   }
 
   @Override
-  public Optional<TypeSpec.Builder> write(ClassName generatedName, ContributionBinding binding) {
+  public Optional<TypeSpec.Builder> write(ContributionBinding binding) {
     return MapKeys.mapKeyFactoryMethod(binding, types, elements)
         .map(
             method ->
-                classBuilder(generatedName)
+                classBuilder(nameGeneratedType(binding))
                     .addModifiers(PUBLIC, FINAL)
                     .addMethod(constructorBuilder().addModifiers(PRIVATE).build())
                     .addMethod(method));
diff --git a/java/dagger/internal/codegen/writing/MembersInjectorGenerator.java b/java/dagger/internal/codegen/writing/MembersInjectorGenerator.java
index 01dca35a6..1fdd44124 100644
--- a/java/dagger/internal/codegen/writing/MembersInjectorGenerator.java
+++ b/java/dagger/internal/codegen/writing/MembersInjectorGenerator.java
@@ -101,8 +101,7 @@ public Element originatingElement(MembersInjectionBinding binding) {
   }
 
   @Override
-  public Optional<TypeSpec.Builder> write(
-      ClassName generatedTypeName, MembersInjectionBinding binding) {
+  public Optional<TypeSpec.Builder> write(MembersInjectionBinding binding) {
     // Empty members injection bindings are special and don't need source files.
     if (binding.injectionSites().isEmpty()) {
       return Optional.empty();
@@ -116,6 +115,7 @@ public Element originatingElement(MembersInjectionBinding binding) {
         "tried to generate a MembersInjector for a binding of a resolved generic type: %s",
         binding);
 
+    ClassName generatedTypeName = nameGeneratedType(binding);
     ImmutableList<TypeVariableName> typeParameters = bindingTypeElementTypeVariableNames(binding);
     TypeSpec.Builder injectorTypeBuilder =
         classBuilder(generatedTypeName)
diff --git a/java/dagger/internal/codegen/writing/ModuleConstructorProxyGenerator.java b/java/dagger/internal/codegen/writing/ModuleConstructorProxyGenerator.java
index a3d8ae951..4520f4ed3 100644
--- a/java/dagger/internal/codegen/writing/ModuleConstructorProxyGenerator.java
+++ b/java/dagger/internal/codegen/writing/ModuleConstructorProxyGenerator.java
@@ -65,10 +65,10 @@ public Element originatingElement(TypeElement moduleElement) {
   }
 
   @Override
-  public Optional<TypeSpec.Builder> write(ClassName generatedTypeName, TypeElement moduleElement) {
+  public Optional<TypeSpec.Builder> write(TypeElement moduleElement) {
     checkIsModule(moduleElement);
     return nonPublicNullaryConstructor(moduleElement, elements).isPresent()
-        ? Optional.of(buildProxy(generatedTypeName, moduleElement))
+        ? Optional.of(buildProxy(nameGeneratedType(moduleElement), moduleElement))
         : Optional.empty();
   }
 
diff --git a/java/dagger/internal/codegen/writing/ProducerFactoryGenerator.java b/java/dagger/internal/codegen/writing/ProducerFactoryGenerator.java
index 5029204d8..5e5292359 100644
--- a/java/dagger/internal/codegen/writing/ProducerFactoryGenerator.java
+++ b/java/dagger/internal/codegen/writing/ProducerFactoryGenerator.java
@@ -115,7 +115,7 @@ public Element originatingElement(ProductionBinding binding) {
   }
 
   @Override
-  public Optional<TypeSpec.Builder> write(ClassName generatedTypeName, ProductionBinding binding) {
+  public Optional<TypeSpec.Builder> write(ProductionBinding binding) {
     // We don't want to write out resolved bindings -- we want to write out the generic version.
     checkArgument(!binding.unresolved().isPresent());
     checkArgument(binding.bindingElement().isPresent());
@@ -123,6 +123,7 @@ public Element originatingElement(ProductionBinding binding) {
     TypeName providedTypeName = TypeName.get(binding.contributedType());
     TypeName futureTypeName = listenableFutureOf(providedTypeName);
 
+    ClassName generatedTypeName = nameGeneratedType(binding);
     TypeSpec.Builder factoryBuilder =
         classBuilder(generatedTypeName)
             .addModifiers(PUBLIC, FINAL)
