diff --git a/java/dagger/android/AndroidInjector.java b/java/dagger/android/AndroidInjector.java
index df778e2d5..260ecd231 100644
--- a/java/dagger/android/AndroidInjector.java
+++ b/java/dagger/android/AndroidInjector.java
@@ -16,7 +16,6 @@
 
 package dagger.android;
 
-import com.google.errorprone.annotations.DoNotMock;
 import dagger.BindsInstance;
 import dagger.internal.Beta;
 
@@ -33,8 +32,6 @@
  * @see DispatchingAndroidInjector
  */
 @Beta
-@DoNotMock(
-    "Faked versions of AndroidInjector are much clearer than a mock. See https://google.github.io/dagger/testing")
 public interface AndroidInjector<T> {
 
   /** Injects the members of {@code instance}. */
@@ -45,7 +42,6 @@
    *
    * @param <T> the concrete type to be injected
    */
-  @DoNotMock
   interface Factory<T> {
     /**
      * Creates an {@link AndroidInjector} for {@code instance}. This should be the same instance
@@ -60,7 +56,6 @@
    *
    * @param <T> the concrete type to be injected
    */
-  @DoNotMock
   abstract class Builder<T> implements AndroidInjector.Factory<T> {
     @Override
     public final AndroidInjector<T> create(T instance) {
diff --git a/java/dagger/model/Binding.java b/java/dagger/model/Binding.java
index 38a452711..3e0cad0ab 100644
--- a/java/dagger/model/Binding.java
+++ b/java/dagger/model/Binding.java
@@ -17,7 +17,6 @@
 package dagger.model;
 
 import com.google.common.collect.ImmutableSet;
-import com.google.errorprone.annotations.DoNotMock;
 import java.util.Optional;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
@@ -27,7 +26,6 @@
  * Includes any {@linkplain DependencyRequest dependencies} that are needed in order to provide the
  * instances.
  */
-@DoNotMock("Equality semantics are important but not specified, so use only Dagger implementations")
 public interface Binding {
   /** The binding's key. */
   Key key();
diff --git a/java/dagger/model/BindingGraph.java b/java/dagger/model/BindingGraph.java
index 94fc7873b..2468f5403 100644
--- a/java/dagger/model/BindingGraph.java
+++ b/java/dagger/model/BindingGraph.java
@@ -31,7 +31,6 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.common.graph.ImmutableNetwork;
 import com.google.common.graph.Network;
-import com.google.errorprone.annotations.DoNotMock;
 import dagger.BindsOptionalOf;
 import dagger.Module;
 import dagger.model.BindingGraph.Edge;
@@ -305,7 +304,6 @@ public String toString() {
    * there is one binding node for that binding for every owning component.
    */
   @AutoValue
-  @DoNotMock("Use Dagger-supplied implementations")
   public abstract static class BindingNode implements Node {
     static BindingNode create(
         ComponentPath component,
@@ -348,7 +346,6 @@ public String toString() {
 
   /** A node in the binding graph that represents a missing binding for a key in a component. */
   @AutoValue
-  @DoNotMock("Use Dagger-supplied implementations")
   public abstract static class MissingBindingNode implements Node {
     static MissingBindingNode create(ComponentPath component, Key key) {
       return new AutoValue_BindingGraph_MissingBindingNode(component, key);
diff --git a/java/dagger/model/ComponentPath.java b/java/dagger/model/ComponentPath.java
index ce9329ac7..5ef7b41f9 100644
--- a/java/dagger/model/ComponentPath.java
+++ b/java/dagger/model/ComponentPath.java
@@ -22,12 +22,10 @@
 
 import com.google.auto.value.AutoValue;
 import com.google.common.collect.ImmutableList;
-import com.google.errorprone.annotations.DoNotMock;
 import javax.lang.model.element.TypeElement;
 
 /** A path containing a component and all of its ancestor components. */
 @AutoValue
-@DoNotMock("Use ComponentPath.create() to create an instance.")
 public abstract class ComponentPath {
   /** Returns a new {@link ComponentPath} from {@code components}. */
   public static ComponentPath create(Iterable<TypeElement> components) {
diff --git a/java/dagger/model/DependencyRequest.java b/java/dagger/model/DependencyRequest.java
index 09d77920c..607b5ec00 100644
--- a/java/dagger/model/DependencyRequest.java
+++ b/java/dagger/model/DependencyRequest.java
@@ -19,7 +19,6 @@
 import com.google.auto.value.AutoValue;
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import com.google.errorprone.annotations.CheckReturnValue;
-import com.google.errorprone.annotations.DoNotMock;
 import dagger.Provides;
 import java.util.Optional;
 import javax.inject.Inject;
@@ -36,7 +35,6 @@
  * asynchronously even though it is not directly specified as a parameter to the binding method.
  */
 @AutoValue
-@DoNotMock("Use DependencyRequest.builder() to create an instance")
 public abstract class DependencyRequest {
   /** The kind of this request. */
   public abstract RequestKind kind();
diff --git a/java/dagger/model/Key.java b/java/dagger/model/Key.java
index 119396c39..daeb35a94 100644
--- a/java/dagger/model/Key.java
+++ b/java/dagger/model/Key.java
@@ -25,7 +25,6 @@
 import com.google.common.base.Equivalence;
 import com.google.common.base.Equivalence.Wrapper;
 import com.google.common.base.Joiner;
-import com.google.errorprone.annotations.DoNotMock;
 import java.util.Optional;
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.ExecutableElement;
@@ -37,7 +36,6 @@
  * is the lookup key for a binding.
  */
 @AutoValue
-@DoNotMock("Use Key.builder() to create an instance.")
 public abstract class Key {
   /**
    * A {@link javax.inject.Qualifier} annotation that provides a unique namespace prefix
@@ -132,7 +130,7 @@ public abstract Builder multibindingContributionIdentifier(
 
     public abstract Key build();
   }
-  
+
   /**
    * An object that identifies a multibinding contribution method and the module class that
    * contributes it to the graph.
diff --git a/java/dagger/model/Scope.java b/java/dagger/model/Scope.java
index 8e8457724..541a69f0b 100644
--- a/java/dagger/model/Scope.java
+++ b/java/dagger/model/Scope.java
@@ -26,7 +26,6 @@
 import com.google.auto.value.AutoValue;
 import com.google.common.base.Equivalence;
 import com.google.common.collect.ImmutableSet;
-import com.google.errorprone.annotations.DoNotMock;
 import dagger.Reusable;
 import dagger.producers.ProductionScope;
 import dagger.releasablereferences.CanReleaseReferences;
@@ -40,7 +39,6 @@
 /** A representation of a {@link javax.inject.Scope}. */
 @AutoValue
 // TODO(ronshapiro): point to SimpleAnnotationMirror
-@DoNotMock("Use Scope.scope(AnnotationMirror) to create an instance")
 public abstract class Scope {
   abstract Equivalence.Wrapper<AnnotationMirror> wrappedScopeAnnotation();
 
