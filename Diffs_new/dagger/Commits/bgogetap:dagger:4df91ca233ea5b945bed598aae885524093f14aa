diff --git a/java/dagger/internal/codegen/AbstractComponentWriter.java b/java/dagger/internal/codegen/AbstractComponentWriter.java
index 3046f488e..fd7d78c54 100644
--- a/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -141,7 +141,6 @@
         new BindingExpression.Factory(
             compilerOptions,
             name,
-            componentFieldNames,
             bindingExpressions,
             componentRequirementFields,
             this,
@@ -151,7 +150,7 @@
             elements,
             optionalFactories);
     this.componentRequirementFieldFactory =
-        new ComponentRequirementField.Factory(this, componentFieldNames, name, builderFields);
+        new ComponentRequirementField.Factory(this, name, builderFields);
   }
 
   private static ImmutableMap<BindingKey, String> childComponentNames(
@@ -187,7 +186,7 @@ protected AbstractComponentWriter(
    * Creates a {@link FieldSpec.Builder} with a unique name based off of {@code name}.
    */
   protected final FieldSpec.Builder componentField(TypeName type, String name) {
-    return FieldSpec.builder(type, componentFieldNames.getUniqueName(name));
+    return FieldSpec.builder(type, getUniqueFieldName(name));
   }
 
   @Override
@@ -205,6 +204,11 @@ public void addMethod(MethodSpec methodSpec) {
     component.addMethod(methodSpec);
   }
 
+  @Override
+  public String getUniqueFieldName(String name) {
+    return componentFieldNames.getUniqueName(name);
+  }
+
   @Override
   public String getUniqueMethodName(String name) {
     return componentMethodNames.getUniqueName(name);
diff --git a/java/dagger/internal/codegen/BindingExpression.java b/java/dagger/internal/codegen/BindingExpression.java
index 46a74b0cb..6eab1cd10 100644
--- a/java/dagger/internal/codegen/BindingExpression.java
+++ b/java/dagger/internal/codegen/BindingExpression.java
@@ -63,7 +63,6 @@ Expression getComponentMethodExpression(DependencyRequest request, ClassName req
   static final class Factory {
     private final CompilerOptions compilerOptions;
     private final ClassName componentName;
-    private final UniqueNameSet componentFieldNames;
     private final ComponentBindingExpressions componentBindingExpressions;
     private final ComponentRequirementFields componentRequirementFields;
     private final GeneratedComponentModel generatedComponentModel;
@@ -76,7 +75,6 @@ Expression getComponentMethodExpression(DependencyRequest request, ClassName req
     Factory(
         CompilerOptions compilerOptions,
         ClassName componentName,
-        UniqueNameSet componentFieldNames,
         ComponentBindingExpressions componentBindingExpressions,
         ComponentRequirementFields componentRequirementFields,
         GeneratedComponentModel generatedComponentModel,
@@ -87,7 +85,6 @@ Expression getComponentMethodExpression(DependencyRequest request, ClassName req
         OptionalFactories optionalFactories) {
       this.compilerOptions = checkNotNull(compilerOptions);
       this.componentName = checkNotNull(componentName);
-      this.componentFieldNames = checkNotNull(componentFieldNames);
       this.componentBindingExpressions = checkNotNull(componentBindingExpressions);
       this.componentRequirementFields = checkNotNull(componentRequirementFields);
       this.generatedComponentModel = checkNotNull(generatedComponentModel);
@@ -126,7 +123,7 @@ private FieldSpec generateFrameworkField(
               useRawType
                   ? contributionBindingField.type().rawType
                   : contributionBindingField.type(),
-              componentFieldNames.getUniqueName(contributionBindingField.name()));
+              generatedComponentModel.getUniqueFieldName(contributionBindingField.name()));
       contributionField.addModifiers(PRIVATE);
       if (useRawType) {
         contributionField.addAnnotation(AnnotationSpecs.suppressWarnings(RAWTYPES));
diff --git a/java/dagger/internal/codegen/ComponentRequirementField.java b/java/dagger/internal/codegen/ComponentRequirementField.java
index e8d721d47..0f1c6d974 100644
--- a/java/dagger/internal/codegen/ComponentRequirementField.java
+++ b/java/dagger/internal/codegen/ComponentRequirementField.java
@@ -64,7 +64,6 @@ final ComponentRequirement componentRequirement() {
    */
   private static final class BuilderField extends ComponentRequirementField {
     private final GeneratedComponentModel generatedComponentModel;
-    private final UniqueNameSet componentFieldNames;
     private final ClassName owningComponent;
     private final FieldSpec builderField;
     private MemberSelect field;
@@ -72,12 +71,10 @@ final ComponentRequirement componentRequirement() {
     private BuilderField(
         ComponentRequirement componentRequirement,
         GeneratedComponentModel generatedComponentModel,
-        UniqueNameSet componentFieldNames,
         ClassName owningComponent,
         FieldSpec builderField) {
       super(componentRequirement);
       this.generatedComponentModel = checkNotNull(generatedComponentModel);
-      this.componentFieldNames = checkNotNull(componentFieldNames);
       this.owningComponent = checkNotNull(owningComponent);
       this.builderField = checkNotNull(builderField);
     }
@@ -102,7 +99,8 @@ private MemberSelect getField() {
       if (field == null) {
         // TODO(dpb,ronshapiro): think about whether GeneratedComponentModel.addField should make a
         // unique name for the field.
-        String fieldName = componentFieldNames.getUniqueName(componentRequirement().variableName());
+        String fieldName =
+            generatedComponentModel.getUniqueFieldName(componentRequirement().variableName());
         FieldSpec componentField =
             FieldSpec.builder(TypeName.get(componentRequirement().type()), fieldName, PRIVATE)
                 .build();
@@ -143,17 +141,14 @@ CodeBlock getExpressionDuringInitialization(ClassName requestingClass) {
 
   static final class Factory {
     private final GeneratedComponentModel generatedComponentModel;
-    private final UniqueNameSet componentFieldNames;
     private final ClassName owningComponent;
     private final ImmutableMap<ComponentRequirement, FieldSpec> builderFields;
 
     Factory(
         GeneratedComponentModel generatedComponentModel,
-        UniqueNameSet componentFieldNames,
         ClassName owningComponent,
         ImmutableMap<ComponentRequirement, FieldSpec> builderFields) {
       this.generatedComponentModel = checkNotNull(generatedComponentModel);
-      this.componentFieldNames = checkNotNull(componentFieldNames);
       this.owningComponent = checkNotNull(owningComponent);
       this.builderFields = checkNotNull(builderFields);
     }
@@ -166,7 +161,6 @@ ComponentRequirementField forBuilderField(ComponentRequirement componentRequirem
       return new BuilderField(
           componentRequirement,
           generatedComponentModel,
-          componentFieldNames,
           owningComponent,
           builderFields.get(componentRequirement));
     }
diff --git a/java/dagger/internal/codegen/GeneratedComponentModel.java b/java/dagger/internal/codegen/GeneratedComponentModel.java
index 54d95187f..634f80dec 100644
--- a/java/dagger/internal/codegen/GeneratedComponentModel.java
+++ b/java/dagger/internal/codegen/GeneratedComponentModel.java
@@ -37,9 +37,10 @@
   /** Adds the given type to the component. */
   void addType(TypeSpec typeSpec);
 
-  // TODO(user): add getUniqueFieldName(String name).
+  /** Returns a new, unique field name for the component based on the given name. */
+  String getUniqueFieldName(String name);
 
-  /** Returns a unique method name for the component based on the given name. */
+  /** Returns a new, unique method name for the component based on the given name. */
   String getUniqueMethodName(String name);
 
   /** Returns the corresponding subcomponent name for the given subcomponent descriptor. */
