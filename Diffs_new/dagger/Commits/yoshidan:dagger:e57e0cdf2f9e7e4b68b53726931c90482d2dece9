diff --git a/compiler/install.sh b/compiler/install.sh
new file mode 100644
index 000000000..e69de29bb
diff --git a/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java b/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java
index 507519966..d80cac503 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java
@@ -219,18 +219,20 @@ MembersInjectionBinding forInjectedType(
         final DeclaredType type = currentType.get();
         ancestors.add(MoreElements.asType(type.asElement()));
         for (Element enclosedElement : type.asElement().getEnclosedElements()) {
-          Optional<InjectionSite> maybeInjectionSite =
-              injectionSiteVisitor.visit(enclosedElement, type);
-          if (maybeInjectionSite.isPresent()) {
-            InjectionSite injectionSite = maybeInjectionSite.get();
-            if (shouldBeInjected(injectionSite.element(), overriddenMethodMap)) {
-              injectionSites.add(injectionSite);
-            }
-            if (injectionSite.kind().equals(InjectionSite.Kind.METHOD)) {
-              ExecutableElement injectionSiteMethod =
-                  MoreElements.asExecutable(injectionSite.element());
-              overriddenMethodMap.put(
-                  injectionSiteMethod.getSimpleName().toString(), injectionSiteMethod);
+          if(shouldBeInjected(enclosedElement)) {
+            Optional<InjectionSite> maybeInjectionSite =
+                    injectionSiteVisitor.visit(enclosedElement, type);
+            if (maybeInjectionSite.isPresent()) {
+              InjectionSite injectionSite = maybeInjectionSite.get();
+              if (shouldBeInjected(injectionSite.element(), overriddenMethodMap)) {
+                injectionSites.add(injectionSite);
+              }
+              if (injectionSite.kind().equals(InjectionSite.Kind.METHOD)) {
+                ExecutableElement injectionSiteMethod =
+                        MoreElements.asExecutable(injectionSite.element());
+                overriddenMethodMap.put(
+                        injectionSiteMethod.getSimpleName().toString(), injectionSiteMethod);
+              }
             }
           }
         }
@@ -249,13 +251,14 @@ MembersInjectionBinding forInjectedType(
           injectionSites);
     }
 
+    private boolean shouldBeInjected(Element injectionSite){
+      return isAnnotationPresent(injectionSite, Inject.class)
+              && !injectionSite.getModifiers().contains(PRIVATE)
+              && !injectionSite.getModifiers().contains(STATIC);
+    }
+
     private boolean shouldBeInjected(
-        Element injectionSite, SetMultimap<String, ExecutableElement> overriddenMethodMap) {
-      if (!isAnnotationPresent(injectionSite, Inject.class)
-          || injectionSite.getModifiers().contains(PRIVATE)
-          || injectionSite.getModifiers().contains(STATIC)) {
-        return false;
-      }
+            Element injectionSite, SetMultimap<String, ExecutableElement> overriddenMethodMap) {
 
       if (injectionSite.getKind().isField()) { // Inject all fields (self and ancestors)
         return true;
