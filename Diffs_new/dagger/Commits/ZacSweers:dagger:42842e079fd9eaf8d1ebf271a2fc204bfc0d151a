diff --git a/java/dagger/internal/codegen/AnonymousProviderCreationExpression.java b/java/dagger/internal/codegen/AnonymousProviderCreationExpression.java
new file mode 100644
index 000000000..1e66e59d4
--- /dev/null
+++ b/java/dagger/internal/codegen/AnonymousProviderCreationExpression.java
@@ -0,0 +1,57 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.internal.codegen;
+
+import static dagger.internal.codegen.BindingRequest.bindingRequest;
+import static dagger.internal.codegen.CodeBlocks.anonymousProvider;
+import static dagger.model.RequestKind.INSTANCE;
+
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
+import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
+
+/**
+ * A {@link javax.inject.Provider} creation expression for an anonymous inner class whose
+ * {@code get()} method returns the expression for an instance binding request for its key.
+ */
+final class AnonymousProviderCreationExpression
+    implements FrameworkInstanceCreationExpression {
+  private final ContributionBinding binding;
+  private final ComponentBindingExpressions componentBindingExpressions;
+  private final ClassName requestingClass;
+
+  AnonymousProviderCreationExpression(
+      ContributionBinding binding,
+      ComponentBindingExpressions componentBindingExpressions,
+      ClassName requestingClass) {
+    this.binding = binding;
+    this.componentBindingExpressions = componentBindingExpressions;
+    this.requestingClass = requestingClass;
+  }
+
+  @Override
+  public CodeBlock creationExpression() {
+    BindingRequest instanceExpressionRequest = bindingRequest(binding.key(), INSTANCE);
+    Expression instanceExpression =
+        componentBindingExpressions.getDependencyExpression(
+            instanceExpressionRequest,
+            // Not a real class name, but the actual requestingClass is an inner class within the
+            // given class, not that class itself.
+            requestingClass.nestedClass("Anonymous"));
+    return anonymousProvider(instanceExpression);
+  }
+}
diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index 74b6c695a..f5b42d6c9 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -246,6 +246,7 @@ java_library(
     name = "writing",
     srcs = [
         "AnnotationCreatorGenerator.java",
+        "AnonymousProviderCreationExpression.java",
         "BindingExpression.java",
         "ComponentBindingExpressions.java",
         "ComponentCreatorImplementation.java",
@@ -316,7 +317,6 @@ java_library(
         "SimpleInvocationBindingExpression.java",
         "SimpleMethodBindingExpression.java",
         "SubcomponentCreatorBindingExpression.java",
-        "SubcomponentCreatorProviderCreationExpression.java",
         "SubcomponentNames.java",
         "SwitchingProviders.java",
         "TopLevel.java",
diff --git a/java/dagger/internal/codegen/CodeBlocks.java b/java/dagger/internal/codegen/CodeBlocks.java
index c1ca32d3c..e551aebd4 100644
--- a/java/dagger/internal/codegen/CodeBlocks.java
+++ b/java/dagger/internal/codegen/CodeBlocks.java
@@ -80,6 +80,17 @@ static void addAnnotation(MethodSpec.Builder method, DeclaredType nullableType)
     method.addAnnotation(ClassName.get(MoreTypes.asTypeElement(nullableType)));
   }
 
+  /**
+   * Returns an anonymous {@link javax.inject.Provider} class with the single {@link
+   * javax.inject.Provider#get()} method that returns the given {@code expression}.
+   */
+  static CodeBlock anonymousProvider(Expression expression) {
+    // More of a precondition check that the type Provider is parameterized with is a DeclaredType
+    DeclaredType type = MoreTypes.asDeclared(expression.type());
+    return anonymousProvider(
+        TypeName.get(type), CodeBlock.of("return $L;", expression.codeBlock()));
+  }
+
   /**
    * Returns an anonymous {@link javax.inject.Provider} class with the single {@link
    * javax.inject.Provider#get()} method implemented by {@code body}.
diff --git a/java/dagger/internal/codegen/ComponentBindingExpressions.java b/java/dagger/internal/codegen/ComponentBindingExpressions.java
index 96cb85df0..bfadd30e7 100644
--- a/java/dagger/internal/codegen/ComponentBindingExpressions.java
+++ b/java/dagger/internal/codegen/ComponentBindingExpressions.java
@@ -339,9 +339,8 @@ private FrameworkInstanceCreationExpression frameworkInstanceCreationExpression(
             graph);
 
       case SUBCOMPONENT_CREATOR:
-        return new SubcomponentCreatorProviderCreationExpression(
-            binding.key().type(),
-            componentImplementation.getSubcomponentCreatorSimpleName(binding.key()));
+        return new AnonymousProviderCreationExpression(
+            binding, this, componentImplementation.name());
 
       case INJECTION:
       case PROVISION:
diff --git a/java/dagger/internal/codegen/SubcomponentCreatorProviderCreationExpression.java b/java/dagger/internal/codegen/SubcomponentCreatorProviderCreationExpression.java
deleted file mode 100644
index 06d491d81..000000000
--- a/java/dagger/internal/codegen/SubcomponentCreatorProviderCreationExpression.java
+++ /dev/null
@@ -1,43 +0,0 @@
-/*
- * Copyright (C) 2015 The Dagger Authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package dagger.internal.codegen;
-
-import static dagger.internal.codegen.CodeBlocks.anonymousProvider;
-
-import com.squareup.javapoet.CodeBlock;
-import com.squareup.javapoet.TypeName;
-import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
-import javax.lang.model.type.TypeMirror;
-
-/** A {@link javax.inject.Provider} creation expression for a subcomponent creator. */
-final class SubcomponentCreatorProviderCreationExpression
-    implements FrameworkInstanceCreationExpression {
-  private final TypeMirror creatorType;
-  private final String creatorImplementationName;
-
-  SubcomponentCreatorProviderCreationExpression(
-      TypeMirror creatorType, String creatorImplementationName) {
-    this.creatorType = creatorType;
-    this.creatorImplementationName = creatorImplementationName;
-  }
-
-  @Override
-  public CodeBlock creationExpression() {
-    return anonymousProvider(
-        TypeName.get(creatorType), CodeBlock.of("return new $L();", creatorImplementationName));
-  }
-}
