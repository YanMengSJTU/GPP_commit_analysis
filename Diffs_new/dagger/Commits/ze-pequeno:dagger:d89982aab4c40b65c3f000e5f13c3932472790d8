diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index e2f8f8167..b1cc46a4a 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -287,7 +287,6 @@ java_library(
         "ProducerFactoryGenerator.java",
         "ProducerFromProviderCreationExpression.java",
         "ProducerNodeInstanceBindingExpression.java",
-        "ProductionExecutorModuleGenerator.java",
         "ProviderInstanceBindingExpression.java",
         "PrunedConcreteMethodBindingExpression.java",
         "SetBindingExpression.java",
@@ -336,7 +335,6 @@ java_library(
         "ModuleProcessingStep.java",
         "ProcessingEnvironmentModule.java",
         "ProcessingOptions.java",
-        "ProductionExecutorModuleProcessingStep.java",
         "SourceFileGeneratorsModule.java",
         "SystemComponentsModule.java",
     ],
diff --git a/java/dagger/internal/codegen/ComponentDescriptor.java b/java/dagger/internal/codegen/ComponentDescriptor.java
index a5f1f1538..0c25ea96c 100644
--- a/java/dagger/internal/codegen/ComponentDescriptor.java
+++ b/java/dagger/internal/codegen/ComponentDescriptor.java
@@ -57,6 +57,7 @@
 import dagger.producers.CancellationPolicy;
 import dagger.producers.ProductionComponent;
 import dagger.producers.ProductionSubcomponent;
+import dagger.producers.internal.ProductionExecutorModule;
 import java.lang.annotation.Annotation;
 import java.util.EnumSet;
 import java.util.LinkedHashSet;
@@ -521,7 +522,7 @@ private ComponentDescriptor create(
               && (parentKind.get().equals(Kind.COMPONENT)
                   || parentKind.get().equals(Kind.SUBCOMPONENT)))) {
         modulesBuilder.add(descriptorForMonitoringModule(componentDefinitionType));
-        modulesBuilder.add(descriptorForProductionExecutorModule(componentDefinitionType));
+        modulesBuilder.add(descriptorForProductionExecutorModule());
       }
       ImmutableSet<ModuleDescriptor> modules = modulesBuilder.build();
       ImmutableSet<ModuleDescriptor> transitiveModules = transitiveModules(modules);
@@ -732,20 +733,10 @@ private ModuleDescriptor descriptorForMonitoringModule(TypeElement componentDefi
       return moduleDescriptorFactory.create(monitoringModule);
     }
 
-    /**
-     * Returns a descriptor for a generated module that handles the producer executor for production
-     * components. This module is generated in the {@link ProductionExecutorModuleProcessingStep}.
-     *
-     * @throws TypeNotPresentException if the module has not been generated yet. This will cause the
-     *     processor to retry in a later processing round.
-     */
-    // TODO(beder): Replace this with a single class when the producers client library exists.
-    private ModuleDescriptor descriptorForProductionExecutorModule(
-        TypeElement componentDefinitionType) {
-      ClassName productionExecutorModuleName =
-          SourceFiles.generatedProductionExecutorModuleName(componentDefinitionType);
+    /** Returns a descriptor {@link ProductionExecutorModule}. */
+    private ModuleDescriptor descriptorForProductionExecutorModule() {
       TypeElement productionExecutorModule =
-          elements.checkTypePresent(productionExecutorModuleName.toString());
+          elements.getTypeElement(ProductionExecutorModule.class);
       return moduleDescriptorFactory.create(productionExecutorModule);
     }
 
diff --git a/java/dagger/internal/codegen/ComponentProcessor.java b/java/dagger/internal/codegen/ComponentProcessor.java
index 2beaad439..b5159a1b2 100644
--- a/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/java/dagger/internal/codegen/ComponentProcessor.java
@@ -154,7 +154,6 @@ Builder testingPlugins(
         MapKeyProcessingStep mapKeyProcessingStep,
         InjectProcessingStep injectProcessingStep,
         MonitoringModuleProcessingStep monitoringModuleProcessingStep,
-        ProductionExecutorModuleProcessingStep productionExecutorModuleProcessingStep,
         MultibindingAnnotationsProcessingStep multibindingAnnotationsProcessingStep,
         BindsInstanceProcessingStep bindsInstanceProcessingStep,
         ModuleProcessingStep moduleProcessingStep,
@@ -166,7 +165,6 @@ Builder testingPlugins(
           mapKeyProcessingStep,
           injectProcessingStep,
           monitoringModuleProcessingStep,
-          productionExecutorModuleProcessingStep,
           multibindingAnnotationsProcessingStep,
           bindsInstanceProcessingStep,
           moduleProcessingStep,
diff --git a/java/dagger/internal/codegen/ProductionExecutorModuleGenerator.java b/java/dagger/internal/codegen/ProductionExecutorModuleGenerator.java
deleted file mode 100644
index a28981a72..000000000
--- a/java/dagger/internal/codegen/ProductionExecutorModuleGenerator.java
+++ /dev/null
@@ -1,80 +0,0 @@
-/*
- * Copyright (C) 2016 The Dagger Authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package dagger.internal.codegen;
-
-import static com.squareup.javapoet.MethodSpec.methodBuilder;
-import static com.squareup.javapoet.TypeSpec.classBuilder;
-import static javax.lang.model.element.Modifier.FINAL;
-import static javax.lang.model.element.Modifier.STATIC;
-
-import com.squareup.javapoet.ClassName;
-import com.squareup.javapoet.ParameterSpec;
-import com.squareup.javapoet.TypeSpec;
-import dagger.Module;
-import dagger.Provides;
-import dagger.producers.Production;
-import dagger.producers.ProductionScope;
-import dagger.producers.internal.ProductionImplementation;
-import java.util.Optional;
-import java.util.concurrent.Executor;
-import javax.annotation.processing.Filer;
-import javax.inject.Inject;
-import javax.lang.model.SourceVersion;
-import javax.lang.model.element.Element;
-import javax.lang.model.element.TypeElement;
-import javax.lang.model.util.Elements;
-
-/** Generates a producer executor module for use with production components. */
-// TODO(beder): Replace this with a single class when the producers client library exists.
-final class ProductionExecutorModuleGenerator extends SourceFileGenerator<TypeElement> {
-
-  @Inject
-  ProductionExecutorModuleGenerator(Filer filer, Elements elements, SourceVersion sourceVersion) {
-    super(filer, elements, sourceVersion);
-  }
-
-  @Override
-  ClassName nameGeneratedType(TypeElement componentElement) {
-    return SourceFiles.generatedProductionExecutorModuleName(componentElement);
-  }
-
-  @Override
-  Element originatingElement(TypeElement componentElement) {
-    return componentElement;
-  }
-
-  @Override
-  Optional<TypeSpec.Builder> write(ClassName generatedTypeName, TypeElement componentElement) {
-    return Optional.of(
-        classBuilder(generatedTypeName)
-            .addAnnotation(Module.class)
-            .addModifiers(FINAL)
-            .addMethod(
-                methodBuilder("executor")
-                    .returns(Executor.class)
-                    .addModifiers(STATIC)
-                    .addAnnotation(Provides.class)
-                    .addAnnotation(ProductionScope.class)
-                    .addAnnotation(ProductionImplementation.class)
-                    .addParameter(
-                        ParameterSpec.builder(Executor.class, "executor")
-                            .addAnnotation(Production.class)
-                            .build())
-                    .addStatement("return executor")
-                    .build()));
-  }
-}
diff --git a/java/dagger/internal/codegen/ProductionExecutorModuleProcessingStep.java b/java/dagger/internal/codegen/ProductionExecutorModuleProcessingStep.java
deleted file mode 100644
index 07cd49083..000000000
--- a/java/dagger/internal/codegen/ProductionExecutorModuleProcessingStep.java
+++ /dev/null
@@ -1,59 +0,0 @@
-/*
- * Copyright (C) 2016 The Dagger Authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package dagger.internal.codegen;
-
-import com.google.auto.common.BasicAnnotationProcessor.ProcessingStep;
-import com.google.auto.common.MoreElements;
-import com.google.common.collect.ImmutableSet;
-import com.google.common.collect.SetMultimap;
-import dagger.producers.ProductionComponent;
-import dagger.producers.ProductionSubcomponent;
-import java.lang.annotation.Annotation;
-import java.util.Set;
-import javax.annotation.processing.Messager;
-import javax.inject.Inject;
-import javax.lang.model.element.Element;
-
-/**
- * A processing step that is responsible for generating a special module for a
- * {@link ProductionComponent} or {@link ProductionSubcomponent}.
- */
-final class ProductionExecutorModuleProcessingStep implements ProcessingStep {
-  private final Messager messager;
-  private final ProductionExecutorModuleGenerator productionExecutorModuleGenerator;
-
-  @Inject
-  ProductionExecutorModuleProcessingStep(
-      Messager messager, ProductionExecutorModuleGenerator productionExecutorModuleGenerator) {
-    this.messager = messager;
-    this.productionExecutorModuleGenerator = productionExecutorModuleGenerator;
-  }
-
-  @Override
-  public Set<? extends Class<? extends Annotation>> annotations() {
-    return ImmutableSet.of(ProductionComponent.class, ProductionSubcomponent.class);
-  }
-
-  @Override
-  public Set<Element> process(
-      SetMultimap<Class<? extends Annotation>, Element> elementsByAnnotation) {
-    for (Element element : elementsByAnnotation.values()) {
-      productionExecutorModuleGenerator.generate(MoreElements.asType(element), messager);
-    }
-    return ImmutableSet.of();
-  }
-}
diff --git a/java/dagger/producers/internal/ProductionExecutorModule.java b/java/dagger/producers/internal/ProductionExecutorModule.java
new file mode 100644
index 000000000..e233ae917
--- /dev/null
+++ b/java/dagger/producers/internal/ProductionExecutorModule.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2018 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.producers.internal;
+
+import dagger.Binds;
+import dagger.Module;
+import dagger.producers.Production;
+import dagger.producers.ProductionScope;
+import java.util.concurrent.Executor;
+
+/**
+ * Binds the {@code @ProductionImplementation Executor} binding in {@link ProductionScope} so that
+ * only on instance is ever used within production components.
+ */
+@Module
+public abstract class ProductionExecutorModule {
+  @Binds
+  @ProductionScope
+  @ProductionImplementation
+  abstract Executor productionImplementationExecutor(@Production Executor executor);
+
+  private ProductionExecutorModule() {}
+}
diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
index d8a09cd5f..f2582c473 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
@@ -3328,7 +3328,7 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             "public final class DaggerRoot implements Root, CancellationListener {",
             "  private ExecutorModule_ExecutorFactory executorProvider;",
             "",
-            "  private Provider<Executor> executorProvider2;",
+            "  private Provider<Executor> productionImplementationExecutorProvider;",
             "",
             "  private Provider<Root> rootProvider;",
             "",
@@ -3353,9 +3353,8 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             "  private void initialize(final Builder builder) {",
             "    this.executorProvider =",
             "        ExecutorModule_ExecutorFactory.create(builder.executorModule);",
-            "    this.executorProvider2 =",
-            "        DoubleCheck.provider(",
-            "            Root_ProductionExecutorModule_ExecutorFactory.create(executorProvider));",
+            "    this.productionImplementationExecutorProvider =",
+            "        DoubleCheck.provider((Provider) executorProvider);",
             "    this.rootProvider = InstanceFactory.create((Root) this);",
             "    this.monitorProvider =",
             "        DoubleCheck.provider(",
@@ -3364,7 +3363,7 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             "                SetFactory.<ProductionComponentMonitor.Factory>empty()));",
             "    this.responseDependencyProducer =",
             "        ResponseDependencyProducerModule_ResponseDependencyFactory.create(",
-            "            executorProvider2, monitorProvider);",
+            "            productionImplementationExecutorProvider, monitorProvider);",
             "  }",
             "",
             "  @Override",
@@ -3400,13 +3399,6 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             "      this.executorModule = Preconditions.checkNotNull(executorModule);",
             "      return this;",
             "    }",
-            "",
-            "    @Deprecated",
-            "    public Builder root_ProductionExecutorModule(",
-            "        Root_ProductionExecutorModule root_ProductionExecutorModule) {",
-            "      Preconditions.checkNotNull(root_ProductionExecutorModule);",
-            "      return this;",
-            "    }",
             "  }",
             "",
             "  private final class LeafBuilder extends DaggerLeaf.Builder {",
@@ -3423,7 +3415,7 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             "",
             "    @Override",
             "    public Provider<Executor> getExecutorProvider() {",
-            "      return DaggerRoot.this.executorProvider2;",
+            "      return DaggerRoot.this.productionImplementationExecutorProvider;",
             "    }",
             "",
             "    @Override",
diff --git a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
index 3e111c5b8..0da590d58 100644
--- a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -238,7 +238,7 @@ public void simpleComponent() {
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestClass_SimpleComponent",
                 "    implements TestClass.SimpleComponent, CancellationListener {",
-                "  private volatile Provider<Executor> executorProvider;",
+                "  private volatile Provider<Executor> productionImplementationExecutorProvider;",
                 "  private volatile Object productionImplementationExecutor =",
                 "      new MemoizedSentinel();",
                 "  private volatile Provider<ProductionComponentMonitor> monitorProvider;",
@@ -269,9 +269,7 @@ public void simpleComponent() {
                 "        local = productionImplementationExecutor;",
                 "        if (local instanceof MemoizedSentinel) {",
                 "          local =",
-                "              TestClass_SimpleComponent_ProductionExecutorModule_ExecutorFactory",
-                "                  .proxyExecutor(",
-                "                      TestClass_BModule_ExecutorFactory.proxyExecutor(bModule));",
+                "              TestClass_BModule_ExecutorFactory.proxyExecutor(bModule);",
                 "          productionImplementationExecutor =",
                 "              DoubleCheck.reentrantCheck(",
                 "                  productionImplementationExecutor, local);",
@@ -282,10 +280,10 @@ public void simpleComponent() {
                 "  }",
                 "",
                 "  private Provider<Executor> getProductionImplementationExecutorProvider() {",
-                "    Object local = executorProvider;",
+                "    Object local = productionImplementationExecutorProvider;",
                 "    if (local == null) {",
                 "      local = new SwitchingProvider<>(0);",
-                "      executorProvider = (Provider<Executor>) local;",
+                "      productionImplementationExecutorProvider = (Provider<Executor>) local;",
                 "    }",
                 "    return (Provider<Executor>) local;",
                 "  }",
@@ -384,16 +382,8 @@ public void simpleComponent() {
                 "      this.bModule = Preconditions.checkNotNull(bModule);",
                 "      return this;",
                 "    }",
-                "",
-                "    @Deprecated",
-                "    public Builder testClass_SimpleComponent_ProductionExecutorModule(",
-                "        TestClass_SimpleComponent_ProductionExecutorModule",
-                "            testClass_SimpleComponent_ProductionExecutorModule) {",
-                "      Preconditions.checkNotNull(",
-                "          testClass_SimpleComponent_ProductionExecutorModule);",
-                "      return this;",
-                "    }",
                 "  }",
+                "",
                 "  private final class SwitchingProvider<T> implements Provider<T> {",
                 "    private final int id;",
                 "",
@@ -441,7 +431,7 @@ public void simpleComponent() {
                 "    implements TestClass.SimpleComponent, CancellationListener {",
                 "  private Producer<TestClass.A> aEntryPoint;",
                 "  private TestClass_BModule_ExecutorFactory executorProvider;",
-                "  private Provider<Executor> executorProvider2;",
+                "  private Provider<Executor> productionImplementationExecutorProvider;",
                 "  private Provider<TestClass.SimpleComponent> simpleComponentProvider;",
                 "  private Provider<ProductionComponentMonitor> monitorProvider;",
                 "  private TestClass_BModule_BFactory bProvider;",
@@ -465,10 +455,8 @@ public void simpleComponent() {
                 "  private void initialize(final Builder builder) {",
                 "    this.executorProvider =",
                 "        TestClass_BModule_ExecutorFactory.create(builder.bModule);",
-                "    this.executorProvider2 =",
-                "        DoubleCheck.provider(",
-                "            TestClass_SimpleComponent_ProductionExecutorModule_ExecutorFactory",
-                "                .create(executorProvider));",
+                "    this.productionImplementationExecutorProvider =",
+                "        DoubleCheck.provider((Provider) executorProvider);",
                 "    this.simpleComponentProvider = ",
                 "        InstanceFactory.create((TestClass.SimpleComponent) this);",
                 "    this.monitorProvider =",
@@ -481,7 +469,7 @@ public void simpleComponent() {
                 "    this.bProducer = Producers.producerFromProvider(bProvider);",
                 "    this.aProducer = TestClass_AModule_AFactory.create(",
                 "        builder.aModule,",
-                "        executorProvider2,",
+                "        productionImplementationExecutorProvider,",
                 "        monitorProvider,",
                 "        bProducer);",
                 "    this.aEntryPoint = Producers.entryPointViewOf(aProducer, this);",
@@ -523,14 +511,6 @@ public void simpleComponent() {
                 "      this.bModule = Preconditions.checkNotNull(bModule);",
                 "      return this;",
                 "    }",
-                "",
-                "    @Deprecated",
-                "    public Builder testClass_SimpleComponent_ProductionExecutorModule(",
-                "        TestClass_SimpleComponent_ProductionExecutorModule",
-                "            testClass_SimpleComponent_ProductionExecutorModule) {",
-                "      Preconditions.checkNotNull(testClass_SimpleComponent_ProductionExecutorModule);",
-                "      return this;",
-                "    }",
                 "  }",
                 "}");
     }
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
index 8caae3e2a..20ef6a2b6 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
@@ -329,7 +329,6 @@ public void productionComponents() {
             "import com.google.common.collect.ImmutableSet;",
             "import com.google.common.util.concurrent.Futures;",
             "import com.google.common.util.concurrent.ListenableFuture;",
-            "import dagger.internal.Preconditions;",
             "import dagger.producers.internal.CancellationListener;",
             "import java.util.Set;",
             IMPORT_GENERATED_ANNOTATION,
@@ -366,14 +365,6 @@ public void productionComponents() {
             "    public TestComponent build() {",
             "      return new DaggerTestComponent(this);",
             "    }",
-            "",
-            "    @Deprecated",
-            "    public Builder testComponent_ProductionExecutorModule(",
-            "        TestComponent_ProductionExecutorModule",
-            "            testComponent_ProductionExecutorModule) {",
-            "      Preconditions.checkNotNull(testComponent_ProductionExecutorModule);",
-            "      return this;",
-            "    }",
             "  }",
             "}");
 
