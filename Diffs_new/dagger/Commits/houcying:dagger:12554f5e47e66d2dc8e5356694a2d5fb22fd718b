diff --git a/compiler/src/main/resources/META-INF/services/javax.annotation.processing.Processor b/compiler/src/main/resources/META-INF/services/javax.annotation.processing.Processor
index 97f5f1471..6d7a2940a 100644
--- a/compiler/src/main/resources/META-INF/services/javax.annotation.processing.Processor
+++ b/compiler/src/main/resources/META-INF/services/javax.annotation.processing.Processor
@@ -1,4 +1,5 @@
-dagger.internal.codegen.ValidationProcessor
-dagger.internal.codegen.InjectAdapterProcessor
-dagger.internal.codegen.ModuleAdapterProcessor
-dagger.internal.codegen.GraphAnalysisProcessor
+dagger.internal.codegen.ComponentProcessor
+#dagger.internal.codegen.ValidationProcessor
+#dagger.internal.codegen.InjectAdapterProcessor
+#dagger.internal.codegen.ModuleAdapterProcessor
+#dagger.internal.codegen.GraphAnalysisProcessor
diff --git a/examples/simple/src/main/java/coffee/ChocolateFlavorProcessor.java b/examples/simple/src/main/java/coffee/ChocolateFlavorProcessor.java
new file mode 100644
index 000000000..15e19bfc3
--- /dev/null
+++ b/examples/simple/src/main/java/coffee/ChocolateFlavorProcessor.java
@@ -0,0 +1,12 @@
+package coffee;
+
+/**
+ * TODO: Insert description here. (generated by houcy)
+ */
+public class ChocolateFlavorProcessor implements FlavorProcessor {
+  public ChocolateFlavorProcessor () { }
+  @Override
+  public String toString() {
+    return "ChocolateFlavorProcessor";
+  }
+}
diff --git a/examples/simple/src/main/java/coffee/CoffeeApp.java b/examples/simple/src/main/java/coffee/CoffeeApp.java
index b6be33a31..aedf1aa57 100644
--- a/examples/simple/src/main/java/coffee/CoffeeApp.java
+++ b/examples/simple/src/main/java/coffee/CoffeeApp.java
@@ -4,16 +4,9 @@
 
 import dagger.ObjectGraph;
 
-public class CoffeeApp implements Runnable {
-  @Inject CoffeeMaker coffeeMaker;
-
-  @Override public void run() {
-    coffeeMaker.brew();
-  }
-
+public class CoffeeApp {
   public static void main(String[] args) {
-    ObjectGraph objectGraph = ObjectGraph.create(new DripCoffeeModule());
-    CoffeeApp coffeeApp = objectGraph.get(CoffeeApp.class);
-    coffeeApp.run();
+    CoffeeMain coffee = new Dagger_CoffeeMain(new DripCoffeeModule(), new PumpModule(), new MilkFlavorModule());
+    coffee.getMaker().brew();
   }
 }
diff --git a/examples/simple/src/main/java/coffee/CoffeeMain.java b/examples/simple/src/main/java/coffee/CoffeeMain.java
new file mode 100644
index 000000000..f73f4b949
--- /dev/null
+++ b/examples/simple/src/main/java/coffee/CoffeeMain.java
@@ -0,0 +1,9 @@
+package coffee;
+
+import dagger.Component;
+
+@Component(modules = { DripCoffeeModule.class, PumpModule.class, MilkFlavorModule.class })
+interface CoffeeMain {
+  CoffeeMaker getMaker();
+}
+
diff --git a/examples/simple/src/main/java/coffee/CoffeeMaker.java b/examples/simple/src/main/java/coffee/CoffeeMaker.java
index 5abc27c1f..a7b7273f5 100644
--- a/examples/simple/src/main/java/coffee/CoffeeMaker.java
+++ b/examples/simple/src/main/java/coffee/CoffeeMaker.java
@@ -1,15 +1,34 @@
 package coffee;
 
 import dagger.Lazy;
+
+import java.util.Map;
+
 import javax.inject.Inject;
+import javax.inject.Provider;
 
 class CoffeeMaker {
-  @Inject Lazy<Heater> heater; // Don't want to create a possibly costly heater until we need it.
-  @Inject Pump pump;
+  final Lazy<Heater> heater; // Don't want to create a possibly costly heater until needed.
+  final Pump pump;
+  final Map<String, Provider<FlavorProcessor>> dispatcher;
+  
+  @Inject CoffeeMaker(
+      Map<String, Provider<FlavorProcessor>> dispatcher,
+      Lazy<Heater> heater,
+      Pump pump
+     ) {
+    this.dispatcher = dispatcher;
+    this.heater = heater;
+    this.pump = pump;
+  }
 
   public void brew() {
     heater.get().on();
     pump.pump();
+    System.out.println("Preparing Flavoring:");
+    for (Map.Entry<String, Provider<FlavorProcessor>> e: dispatcher.entrySet()) {
+      System.out.println("Flavor: " + e.getKey() + " has dispatcher : " + e.getValue().get().toString());
+    }
     System.out.println(" [_]P coffee! [_]P ");
     heater.get().off();
   }
diff --git a/examples/simple/src/main/java/coffee/FlavorProcessor.java b/examples/simple/src/main/java/coffee/FlavorProcessor.java
new file mode 100644
index 000000000..9a1498af8
--- /dev/null
+++ b/examples/simple/src/main/java/coffee/FlavorProcessor.java
@@ -0,0 +1,8 @@
+package coffee;
+
+/**
+ * TODO: Insert description here. (generated by houcy)
+ */
+public interface FlavorProcessor {
+
+}
diff --git a/examples/simple/src/main/java/coffee/MilkFlavorModule.java b/examples/simple/src/main/java/coffee/MilkFlavorModule.java
new file mode 100644
index 000000000..607b8eb65
--- /dev/null
+++ b/examples/simple/src/main/java/coffee/MilkFlavorModule.java
@@ -0,0 +1,15 @@
+package coffee;
+
+import static dagger.Provides.Type.MAP;
+
+import dagger.Module;
+import dagger.Provides;
+
+@Module
+class MilkFlavorModule {
+  @Provides(type = MAP)
+  @StringKey("Chocolate")
+  FlavorProcessor provideChocolateProcessor() {
+    return new ChocolateFlavorProcessor();
+  }
+}
diff --git a/examples/simple/src/main/java/coffee/PumpModule.java b/examples/simple/src/main/java/coffee/PumpModule.java
index ed44e7285..7467117ca 100644
--- a/examples/simple/src/main/java/coffee/PumpModule.java
+++ b/examples/simple/src/main/java/coffee/PumpModule.java
@@ -1,5 +1,7 @@
 package coffee;
 
+import static dagger.Provides.Type.MAP;
+
 import dagger.Module;
 import dagger.Provides;
 
@@ -8,5 +10,11 @@
   @Provides Pump providePump(Thermosiphon pump) {
     return pump;
   }
+  
+  @Provides(type = MAP)
+  @StringKey("Vanilla")
+  FlavorProcessor provideVanillaProcessor() {
+    return new VanillaFlavorProcessor();
+  }
 }
 
diff --git a/examples/simple/src/main/java/coffee/StringKey.java b/examples/simple/src/main/java/coffee/StringKey.java
new file mode 100644
index 000000000..ad780f0c9
--- /dev/null
+++ b/examples/simple/src/main/java/coffee/StringKey.java
@@ -0,0 +1,14 @@
+package coffee;
+
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+import dagger.MapKey;
+
+import java.lang.annotation.Retention;
+
+@MapKey
+@Retention(RUNTIME)
+public @interface StringKey {
+  String value(); // Or Enum value(); using annotationMirror to obtain the concrete value, compile
+                  // reflection
+}
diff --git a/examples/simple/src/main/java/coffee/VanillaFlavorProcessor.java b/examples/simple/src/main/java/coffee/VanillaFlavorProcessor.java
new file mode 100644
index 000000000..787e9fc83
--- /dev/null
+++ b/examples/simple/src/main/java/coffee/VanillaFlavorProcessor.java
@@ -0,0 +1,13 @@
+package coffee;
+
+/**
+ * TODO: Insert description here. (generated by houcy)
+ */
+public class VanillaFlavorProcessor implements FlavorProcessor{
+  public VanillaFlavorProcessor () { }
+  
+  @Override
+  public String toString() {
+    return "VanillaFlavorProcessor";
+  }
+}
