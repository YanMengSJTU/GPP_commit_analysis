diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index e922610c3..55c6cd5d4 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -16,7 +16,6 @@
 
 package dagger.internal.codegen;
 
-import com.google.common.base.Joiner;
 import com.google.common.base.Optional;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.TypeSpec;
@@ -54,9 +53,7 @@
   @Override
   ClassName nameGeneratedType(BindingGraph input) {
     ClassName componentDefinitionClassName = ClassName.get(input.componentType());
-    String componentName =
-        "Dagger" + Joiner.on('_').join(componentDefinitionClassName.simpleNames());
-    return componentDefinitionClassName.topLevelClassName().peerClass(componentName);
+    return Util.getDaggerComponentClassName(componentDefinitionClassName);
   }
 
   @Override
diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectorGenerator.java b/compiler/src/main/java/dagger/internal/codegen/InjectorGenerator.java
index f642b728a..30a09c234 100644
--- a/compiler/src/main/java/dagger/internal/codegen/InjectorGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/InjectorGenerator.java
@@ -2,14 +2,12 @@
 
 import com.google.common.base.Optional;
 import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.MethodSpec;
 import com.squareup.javapoet.TypeSpec;
 
 import javax.annotation.processing.Filer;
-import javax.lang.model.element.Element;
-import javax.lang.model.element.ExecutableElement;
-import javax.lang.model.element.Modifier;
-import javax.lang.model.element.TypeElement;
+import javax.lang.model.element.*;
 import javax.lang.model.util.Elements;
 import java.util.HashMap;
 import java.util.List;
@@ -44,14 +42,8 @@ ClassName nameGeneratedType(DI input) {
                 .superclass(ClassName.get(injector))
                 .addModifiers(Modifier.PUBLIC);
 
-
-        for (ExecutableElement executableElement : input.getMethods()) {
-            final MethodSpec.Builder method = MethodSpec.overriding(executableElement);
-            method.addStatement("return null");
-            builder.addMethod(method.build());
-        }
-
         Map<Key, String> delegateFieldNames = new HashMap<>();
+        Map<Key, ComponentDescriptor> componentDescriptors = new HashMap<>();
         for (InjectorType injectorType : input.getInjectorTypes()) {
             injectorType.getBindingGraph().resolvedBindings().values().forEach(resolvedBindings -> {
                 if (resolvedBindings.bindingType() == BindingType.PROVISION) {
@@ -60,6 +52,28 @@ ClassName nameGeneratedType(DI input) {
                     }
                 }
             });
+            final Key key = Key.builder(injectorType.getElement().asType()).build();
+            componentDescriptors.put(key, injectorType.getComponentDescriptor());
+        }
+
+        for (ExecutableElement executableElement : input.getMethods()) {
+            final MethodSpec.Builder method = MethodSpec.overriding(executableElement);
+            final List<? extends VariableElement> parameters = executableElement.getParameters();
+            Map<Key, VariableElement> map = new HashMap<>();
+            for (VariableElement parameter : parameters) {
+                map.put(Key.builder(parameter.asType()).build(), parameter);
+            }
+            final Key key = Key.builder(executableElement.getReturnType()).build();
+            final ComponentDescriptor componentDescriptor = componentDescriptors.get(key);
+            final CodeBlock.Builder codeBuilder = CodeBlock.builder();
+            codeBuilder.add("$T", Util.getDaggerComponentClassName(componentDescriptor.componentDefinitionType())).add(".builder().");
+            for (ModuleDescriptor moduleDescriptor : componentDescriptor.modules()) {
+                final TypeElement element = moduleDescriptor.moduleElement();
+                codeBuilder.add(Util.lowerCaseFirstLetter(element.getSimpleName().toString()));
+            }
+            codeBuilder.add(".build()");
+            method.addStatement("return $L", codeBuilder.build());
+            builder.addMethod(method.build());
         }
 
         return Optional.of(builder);
diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectorProcessingStep.java b/compiler/src/main/java/dagger/internal/codegen/InjectorProcessingStep.java
index 98a783f57..39ba2d08b 100644
--- a/compiler/src/main/java/dagger/internal/codegen/InjectorProcessingStep.java
+++ b/compiler/src/main/java/dagger/internal/codegen/InjectorProcessingStep.java
@@ -63,7 +63,7 @@ public InjectorProcessingStep(Messager messager, InjectorGenerator injectorGener
             try {
                 ComponentDescriptor componentDescriptor = componentDescriptorFactory.forComponent(componentTypeElement);
                 BindingGraph bindingGraph = bindingGraphFactory.create(componentDescriptor);
-                InjectorType injectorType = new InjectorType(componentTypeElement, bindingGraph);
+                InjectorType injectorType = new InjectorType(componentTypeElement, bindingGraph, componentDescriptor);
                 injectorTypeList.add(injectorType);
             } catch (TypeNotPresentException e) {
                 rejectedElements.add(componentTypeElement);
diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectorType.java b/compiler/src/main/java/dagger/internal/codegen/InjectorType.java
index 9bca59b73..860a96420 100644
--- a/compiler/src/main/java/dagger/internal/codegen/InjectorType.java
+++ b/compiler/src/main/java/dagger/internal/codegen/InjectorType.java
@@ -9,10 +9,12 @@
 
     private TypeElement element;
     private BindingGraph bindingGraph;
+    private ComponentDescriptor componentDescriptor;
 
-    public InjectorType(TypeElement element, BindingGraph bindingGraph) {
+    public InjectorType(TypeElement element, BindingGraph bindingGraph, ComponentDescriptor componentDescriptor) {
         this.element = element;
         this.bindingGraph = bindingGraph;
+        this.componentDescriptor = componentDescriptor;
     }
 
     public BindingGraph getBindingGraph() {
@@ -22,4 +24,8 @@ public BindingGraph getBindingGraph() {
     public TypeElement getElement() {
         return element;
     }
+
+    public ComponentDescriptor getComponentDescriptor() {
+        return componentDescriptor;
+    }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/Util.java b/compiler/src/main/java/dagger/internal/codegen/Util.java
index d97287bd6..5ed684ffb 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Util.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Util.java
@@ -30,6 +30,7 @@
 import com.google.auto.common.MoreElements;
 import com.google.auto.common.MoreTypes;
 import com.google.common.base.Function;
+import com.google.common.base.Joiner;
 import com.google.common.base.Optional;
 import com.google.common.collect.FluentIterable;
 import com.google.common.collect.ImmutableList;
@@ -326,7 +327,7 @@ private static String capitalizeFirstLetter(String original) {
     return original.substring(0, 1).toUpperCase() + original.substring(1);
   }
 
-  private static String lowerCaseFirstLetter(String original) {
+  public static String lowerCaseFirstLetter(String original) {
     if (original == null || original.length() == 0) {
       return original;
     }
@@ -377,4 +378,14 @@ public static String getFieldName(Key key) {
       return capitalizeFirstLetter(ClassName.bestGuess(key.type().toString()).simpleName());
     }
   }
+
+  public static ClassName getDaggerComponentClassName(ClassName componentDefinitionClassName) {
+      String componentName =
+        "Dagger" + Joiner.on('_').join(componentDefinitionClassName.simpleNames());
+      return componentDefinitionClassName.topLevelClassName().peerClass(componentName);
+  }
+
+  public static ClassName getDaggerComponentClassName(Element component) {
+      return getDaggerComponentClassName(ClassName.bestGuess(component.asType().toString()));
+  }
 }
