diff --git a/WORKSPACE b/WORKSPACE
index 14b797099..955149838 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -208,3 +208,9 @@ http_archive(
 load("//tools:jarjar.bzl", "jarjar_deps")
 
 jarjar_deps()
+
+maven_jar(
+    name = "org_checkerframework_checker_compat_qual",
+    artifact = "org.checkerframework:checker-compat-qual:2.3.0",
+    sha1 = "69cb4fea55a9d89b8827d107f17c985cc1a76052",
+)
diff --git a/java/dagger/grpc/server/processor/GrpcServiceModel.java b/java/dagger/grpc/server/processor/GrpcServiceModel.java
index 5188b61a1..bb18cfafc 100644
--- a/java/dagger/grpc/server/processor/GrpcServiceModel.java
+++ b/java/dagger/grpc/server/processor/GrpcServiceModel.java
@@ -17,6 +17,7 @@
 package dagger.grpc.server.processor;
 
 import static com.google.auto.common.AnnotationMirrors.getAnnotationValue;
+import static com.google.auto.common.GeneratedAnnotationSpecs.generatedAnnotationSpec;
 import static com.google.auto.common.MoreElements.getAnnotationMirror;
 import static com.google.common.base.CaseFormat.LOWER_CAMEL;
 import static com.google.common.base.CaseFormat.UPPER_CAMEL;
@@ -28,7 +29,7 @@
 import dagger.grpc.server.ForGrpcService;
 import dagger.grpc.server.GrpcService;
 import dagger.grpc.server.processor.SourceGenerator.IoGrpc;
-import javax.annotation.Generated;
+import java.util.Optional;
 import javax.annotation.processing.Messager;
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.lang.model.element.AnnotationMirror;
@@ -108,18 +109,16 @@ protected final TypeElement grpcClass() {
   }
 
   /**
-   * Returns the annotation spec for the {@link Generated @Generated} annotation to add to any
+   * Returns the annotation spec for the {@code @Generated} annotation to add to any
    * type generated by this processor.
    */
-  protected final AnnotationSpec generatedAnnotation() {
-    return AnnotationSpec.builder(Generated.class)
-        .addMember(
-            "value",
-            "$S",
-            String.format(
-                "@%s annotation on %s",
-                GrpcService.class.getCanonicalName(), serviceImplementationClassName))
-        .build();
+  protected final Optional<AnnotationSpec> generatedAnnotation() {
+    return generatedAnnotationSpec(
+        elements,
+        GrpcService.class,
+        String.format(
+            "@%s annotation on %s",
+            GrpcService.class.getCanonicalName(), serviceImplementationClassName));
   }
 
   /**
diff --git a/java/dagger/grpc/server/processor/GrpcServiceModuleGenerator.java b/java/dagger/grpc/server/processor/GrpcServiceModuleGenerator.java
index ab8bcafc9..bbad143ec 100644
--- a/java/dagger/grpc/server/processor/GrpcServiceModuleGenerator.java
+++ b/java/dagger/grpc/server/processor/GrpcServiceModuleGenerator.java
@@ -50,14 +50,16 @@
 
   @Override
   protected TypeSpec createType() {
-    return classBuilder(grpcServiceModel.serviceModuleName)
-        .addJavadoc(
-            "Install this module in the {@link $T @Singleton} server component\n",
-            JavaxInject.singleton().type)
-        .addJavadoc(
-            "or in the subcomponent that implements {@link $T}.\n",
-            grpcServiceModel.serviceDefinitionTypeName)
-        .addAnnotation(grpcServiceModel.generatedAnnotation())
+    TypeSpec.Builder serviceModule =
+        classBuilder(grpcServiceModel.serviceModuleName)
+            .addJavadoc(
+                "Install this module in the {@link $T @Singleton} server component\n",
+                JavaxInject.singleton().type)
+            .addJavadoc(
+                "or in the subcomponent that implements {@link $T}.\n",
+                grpcServiceModel.serviceDefinitionTypeName);
+    grpcServiceModel.generatedAnnotation().ifPresent(serviceModule::addAnnotation);
+    return serviceModule
         .addAnnotation(Dagger.module())
         .addModifiers(PUBLIC, FINAL)
         .addMethod(provideServiceDefinition())
diff --git a/java/dagger/grpc/server/processor/ProxyModuleGenerator.java b/java/dagger/grpc/server/processor/ProxyModuleGenerator.java
index 83e8a6cec..60aea8eef 100644
--- a/java/dagger/grpc/server/processor/ProxyModuleGenerator.java
+++ b/java/dagger/grpc/server/processor/ProxyModuleGenerator.java
@@ -57,12 +57,14 @@
 
   @Override
   protected TypeSpec createType() {
-    return classBuilder(grpcServiceModel.proxyModuleName)
-        .addModifiers(PUBLIC, FINAL)
-        .addJavadoc(
-            "Install this module in the {@link $T @Singleton} server component.\n",
-            JavaxInject.singleton().type)
-        .addAnnotation(grpcServiceModel.generatedAnnotation())
+    TypeSpec.Builder proxyModule =
+        classBuilder(grpcServiceModel.proxyModuleName)
+            .addModifiers(PUBLIC, FINAL)
+            .addJavadoc(
+                "Install this module in the {@link $T @Singleton} server component.\n",
+                JavaxInject.singleton().type);
+    grpcServiceModel.generatedAnnotation().ifPresent(proxyModule::addAnnotation);
+    return proxyModule
         .addAnnotation(Dagger.module())
         .addMethod(provideServiceDefinitionContribution())
         .addMethod(provideServiceDefinitionFactory())
diff --git a/java/dagger/grpc/server/processor/ServiceDefinitionTypeGenerator.java b/java/dagger/grpc/server/processor/ServiceDefinitionTypeGenerator.java
index 5d5ccbd98..15e13fbbe 100644
--- a/java/dagger/grpc/server/processor/ServiceDefinitionTypeGenerator.java
+++ b/java/dagger/grpc/server/processor/ServiceDefinitionTypeGenerator.java
@@ -43,8 +43,8 @@ protected TypeSpec createType() {
     TypeSpec.Builder type =
         interfaceBuilder(grpcServiceModel.serviceDefinitionTypeName.simpleName())
             .addJavadoc("A component must implement this interface.\n")
-            .addAnnotation(grpcServiceModel.generatedAnnotation())
             .addModifiers(PUBLIC);
+    grpcServiceModel.generatedAnnotation().ifPresent(type::addAnnotation);
     type.addType(
         interfaceBuilder(grpcServiceModel.serviceDefinitionTypeFactoryName.simpleName())
             .addModifiers(PUBLIC, STATIC)
diff --git a/java/dagger/grpc/server/processor/UnscopedGrpcServiceModuleGenerator.java b/java/dagger/grpc/server/processor/UnscopedGrpcServiceModuleGenerator.java
index 12f93e459..339fb0faf 100644
--- a/java/dagger/grpc/server/processor/UnscopedGrpcServiceModuleGenerator.java
+++ b/java/dagger/grpc/server/processor/UnscopedGrpcServiceModuleGenerator.java
@@ -49,12 +49,15 @@ protected TypeSpec createType() {
     ClassName unscopedComponentFactory =
         grpcServiceModel.unscopedServiceModuleName.nestedClass(
             grpcServiceModel.serviceImplementationClassName.simpleName() + "ComponentFactory");
-    return classBuilder(grpcServiceModel.unscopedServiceModuleName)
-        .addJavadoc(
-            "Install this module in the {@link $T @Singleton} server component\n",
-            JavaxInject.singleton().type)
-        .addJavadoc("if it implements {@link $T}.\n", grpcServiceModel.serviceDefinitionTypeName)
-        .addAnnotation(grpcServiceModel.generatedAnnotation())
+    TypeSpec.Builder unscopedServiceModule =
+        classBuilder(grpcServiceModel.unscopedServiceModuleName)
+            .addJavadoc(
+                "Install this module in the {@link $T @Singleton} server component\n",
+                JavaxInject.singleton().type)
+            .addJavadoc(
+                "if it implements {@link $T}.\n", grpcServiceModel.serviceDefinitionTypeName);
+    grpcServiceModel.generatedAnnotation().ifPresent(unscopedServiceModule::addAnnotation);
+    return unscopedServiceModule
         .addAnnotation(
             Dagger.module(grpcServiceModel.proxyModuleName, grpcServiceModel.serviceModuleName))
         .addModifiers(PUBLIC, ABSTRACT)
diff --git a/java/dagger/producers/BUILD b/java/dagger/producers/BUILD
index 8c1f05e3e..2ebf44e97 100644
--- a/java/dagger/producers/BUILD
+++ b/java/dagger/producers/BUILD
@@ -43,9 +43,9 @@ java_library(
     ],
     deps = [
         "//java/dagger:core",
+        "//third_party:checker_framework_annotations",
         "//third_party:error_prone_annotations",
         "//third_party:guava",
-        "//third_party:jsr305_annotations",
         "//third_party:jsr330_inject",
     ],
 )
diff --git a/java/dagger/producers/Produced.java b/java/dagger/producers/Produced.java
index 0c097ac08..c20adafb6 100644
--- a/java/dagger/producers/Produced.java
+++ b/java/dagger/producers/Produced.java
@@ -22,7 +22,7 @@
 import com.google.errorprone.annotations.CheckReturnValue;
 import dagger.internal.Beta;
 import java.util.concurrent.ExecutionException;
-import javax.annotation.Nullable;
+import org.checkerframework.checker.nullness.compatqual.NullableDecl;
 
 /**
  * An interface that represents the result of a {@linkplain Producer production} of type {@code T},
@@ -66,7 +66,7 @@
   public abstract int hashCode();
 
   /** Returns a successful {@code Produced}, whose {@link #get} will return the given value. */
-  public static <T> Produced<T> successful(@Nullable T value) {
+  public static <T> Produced<T> successful(@NullableDecl T value) {
     return new Successful<T>(value);
   }
 
@@ -79,13 +79,15 @@
   }
 
   private static final class Successful<T> extends Produced<T> {
-    @Nullable private final T value;
+    @NullableDecl private final T value;
 
-    private Successful(@Nullable T value) {
+    private Successful(@NullableDecl T value) {
       this.value = value;
     }
 
-    @Override public T get() {
+    @Override
+    @NullableDecl
+    public T get() {
       return value;
     }
 
diff --git a/java/dagger/producers/internal/AbstractProducer.java b/java/dagger/producers/internal/AbstractProducer.java
index d7fa6aec2..5b31380f2 100644
--- a/java/dagger/producers/internal/AbstractProducer.java
+++ b/java/dagger/producers/internal/AbstractProducer.java
@@ -24,8 +24,8 @@
 import dagger.producers.monitoring.ProducerToken;
 import dagger.producers.monitoring.ProductionComponentMonitor;
 import dagger.producers.monitoring.internal.Monitors;
-import javax.annotation.Nullable;
 import javax.inject.Provider;
+import org.checkerframework.checker.nullness.compatqual.NullableDecl;
 
 /**
  * An abstract {@link Producer} implementation that memoizes the result of its compute method.
@@ -35,7 +35,7 @@
  */
 public abstract class AbstractProducer<T> implements Producer<T> {
   private final Provider<ProductionComponentMonitor> monitorProvider;
-  @Nullable private final ProducerToken token;
+  @NullableDecl private final ProducerToken token;
   private volatile ListenableFuture<T> instance = null;
   protected volatile ProducerMonitor monitor = null;
 
@@ -44,7 +44,7 @@ protected AbstractProducer() {
   }
 
   protected AbstractProducer(
-      Provider<ProductionComponentMonitor> monitorProvider, @Nullable ProducerToken token) {
+      Provider<ProductionComponentMonitor> monitorProvider, @NullableDecl ProducerToken token) {
     this.monitorProvider = checkNotNull(monitorProvider);
     this.token = token;
   }
diff --git a/java/dagger/producers/monitoring/ProducerToken.java b/java/dagger/producers/monitoring/ProducerToken.java
index 21b5a51eb..1f0514613 100644
--- a/java/dagger/producers/monitoring/ProducerToken.java
+++ b/java/dagger/producers/monitoring/ProducerToken.java
@@ -20,14 +20,14 @@
 
 import dagger.producers.Produces;
 import java.util.Objects;
-import javax.annotation.Nullable;
+import org.checkerframework.checker.nullness.compatqual.NullableDecl;
 
 /** A token that represents an individual {@linkplain Produces producer method}. */
 public final class ProducerToken {
-  @Nullable private final Class<?> classToken;
-  @Nullable private final String methodName;
+  @NullableDecl private final Class<?> classToken;
+  @NullableDecl private final String methodName;
 
-  private ProducerToken(@Nullable Class<?> classToken, @Nullable String methodName) {
+  private ProducerToken(@NullableDecl Class<?> classToken, @NullableDecl String methodName) {
     this.classToken = classToken;
     this.methodName = methodName;
   }
diff --git a/third_party/BUILD b/third_party/BUILD
index db03f7f2e..6178f5fd1 100644
--- a/third_party/BUILD
+++ b/third_party/BUILD
@@ -234,6 +234,11 @@ java_library(
     ],
 )
 
+java_library(
+    name = "checker_framework_annotations",
+    exports = ["@org_checkerframework_checker_compat_qual//jar"],
+)
+
 # A _deploy.jar consisting of the java_librarys in https://github.com/google/kythe needed to build a
 # Kythe plugin
 # TODO(ronshapiro): replace this with a http_archive of the next release in
