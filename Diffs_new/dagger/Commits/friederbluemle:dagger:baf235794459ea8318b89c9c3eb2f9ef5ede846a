diff --git a/java/dagger/android/processor/AndroidInjectorDescriptor.java b/java/dagger/android/processor/AndroidInjectorDescriptor.java
index 1deb3c3fd..1e0d93f6a 100644
--- a/java/dagger/android/processor/AndroidInjectorDescriptor.java
+++ b/java/dagger/android/processor/AndroidInjectorDescriptor.java
@@ -78,8 +78,8 @@
   /** The {@link Module} that contains the {@link ContributesAndroidInjector} method. */
   abstract ClassName enclosingModule();
 
-  /** Simple name of the {@link ContributesAndroidInjector} method. */
-  abstract String methodName();
+  /** The method annotated with {@link ContributesAndroidInjector}. */
+  abstract ExecutableElement method();
 
   @AutoValue.Builder
   abstract static class Builder {
@@ -95,7 +95,7 @@
 
     abstract Builder enclosingModule(ClassName enclosingModule);
 
-    abstract Builder methodName(String methodName);
+    abstract Builder method(ExecutableElement method);
 
     abstract AndroidInjectorDescriptor build();
   }
@@ -126,8 +126,8 @@
         reporter.reportError("@ContributesAndroidInjector methods cannot have parameters");
       }
 
-      AndroidInjectorDescriptor.Builder builder = new AutoValue_AndroidInjectorDescriptor.Builder();
-      builder.methodName(method.getSimpleName().toString());
+      AndroidInjectorDescriptor.Builder builder =
+          new AutoValue_AndroidInjectorDescriptor.Builder().method(method);
       TypeElement enclosingElement = MoreElements.asType(method.getEnclosingElement());
       if (!isAnnotationPresent(enclosingElement, Module.class)) {
         reporter.reportError("@ContributesAndroidInjector methods must be in a @Module");
diff --git a/java/dagger/android/processor/ContributesAndroidInjectorGenerator.java b/java/dagger/android/processor/ContributesAndroidInjectorGenerator.java
index 57404764c..4f022c229 100644
--- a/java/dagger/android/processor/ContributesAndroidInjectorGenerator.java
+++ b/java/dagger/android/processor/ContributesAndroidInjectorGenerator.java
@@ -104,7 +104,7 @@ private void generate(AndroidInjectorDescriptor descriptor) {
             .peerClass(
                 Joiner.on('_').join(descriptor.enclosingModule().simpleNames())
                     + "_"
-                    + LOWER_CAMEL.to(UPPER_CAMEL, descriptor.methodName()));
+                    + LOWER_CAMEL.to(UPPER_CAMEL, descriptor.method().getSimpleName().toString()));
 
     String baseName = descriptor.injectedType().simpleName();
     ClassName subcomponentName = moduleName.nestedClass(baseName + "Subcomponent");
@@ -112,6 +112,7 @@ private void generate(AndroidInjectorDescriptor descriptor) {
 
     TypeSpec.Builder module =
         classBuilder(moduleName)
+            .addOriginatingElement(descriptor.method())
             .addAnnotation(
                 AnnotationSpec.builder(Module.class)
                     .addMember("subcomponents", "$T.class", subcomponentName)
diff --git a/java/dagger/internal/codegen/AnnotationCreatorGenerator.java b/java/dagger/internal/codegen/AnnotationCreatorGenerator.java
index 859fbf8c5..8c0a3ad7e 100644
--- a/java/dagger/internal/codegen/AnnotationCreatorGenerator.java
+++ b/java/dagger/internal/codegen/AnnotationCreatorGenerator.java
@@ -91,8 +91,8 @@ ClassName nameGeneratedType(TypeElement annotationType) {
   }
 
   @Override
-  Optional<? extends Element> getElementForErrorReporting(TypeElement annotationType) {
-    return Optional.of(annotationType);
+  Element originatingElement(TypeElement annotationType) {
+    return annotationType;
   }
 
   @Override
diff --git a/java/dagger/internal/codegen/ComponentGenerator.java b/java/dagger/internal/codegen/ComponentGenerator.java
index 1dc14b933..d15341cf3 100644
--- a/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/java/dagger/internal/codegen/ComponentGenerator.java
@@ -66,8 +66,8 @@ static ClassName componentName(TypeElement componentDefinitionType) {
   }
 
   @Override
-  Optional<? extends Element> getElementForErrorReporting(BindingGraph input) {
-    return Optional.of(input.componentType());
+  Element originatingElement(BindingGraph input) {
+    return input.componentType();
   }
 
   @Override
diff --git a/java/dagger/internal/codegen/ComponentHjarProcessingStep.java b/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
index 3e08b80a9..cedc3896c 100644
--- a/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
+++ b/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
@@ -147,8 +147,8 @@ ClassName nameGeneratedType(ComponentDescriptor input) {
     }
 
     @Override
-    Optional<? extends Element> getElementForErrorReporting(ComponentDescriptor input) {
-      return Optional.of(input.componentDefinitionType());
+    Element originatingElement(ComponentDescriptor input) {
+      return input.componentDefinitionType();
     }
 
     @Override
diff --git a/java/dagger/internal/codegen/FactoryGenerator.java b/java/dagger/internal/codegen/FactoryGenerator.java
index 3e34d3a6d..afa1d9e04 100644
--- a/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/java/dagger/internal/codegen/FactoryGenerator.java
@@ -91,8 +91,9 @@ ClassName nameGeneratedType(ProvisionBinding binding) {
   }
 
   @Override
-  Optional<? extends Element> getElementForErrorReporting(ProvisionBinding binding) {
-    return binding.bindingElement();
+  Element originatingElement(ProvisionBinding binding) {
+    // we only create factories for bindings that have a binding element
+    return binding.bindingElement().get();
   }
 
   @Override
diff --git a/java/dagger/internal/codegen/InaccessibleMapKeyProxyGenerator.java b/java/dagger/internal/codegen/InaccessibleMapKeyProxyGenerator.java
index db6844706..878c4ec42 100644
--- a/java/dagger/internal/codegen/InaccessibleMapKeyProxyGenerator.java
+++ b/java/dagger/internal/codegen/InaccessibleMapKeyProxyGenerator.java
@@ -52,8 +52,9 @@ ClassName nameGeneratedType(ContributionBinding binding) {
   }
 
   @Override
-  Optional<? extends Element> getElementForErrorReporting(ContributionBinding binding) {
-    return binding.bindingElement();
+  Element originatingElement(ContributionBinding binding) {
+    // a map key is only ever present on bindings that have a binding element
+    return binding.bindingElement().get();
   }
 
   @Override
diff --git a/java/dagger/internal/codegen/MembersInjectorGenerator.java b/java/dagger/internal/codegen/MembersInjectorGenerator.java
index 13e3e1635..9e9e9753e 100644
--- a/java/dagger/internal/codegen/MembersInjectorGenerator.java
+++ b/java/dagger/internal/codegen/MembersInjectorGenerator.java
@@ -79,8 +79,8 @@ ClassName nameGeneratedType(MembersInjectionBinding binding) {
   }
 
   @Override
-  Optional<? extends Element> getElementForErrorReporting(MembersInjectionBinding binding) {
-    return Optional.of(binding.membersInjectedType());
+  Element originatingElement(MembersInjectionBinding binding) {
+    return binding.membersInjectedType();
   }
 
   @Override
diff --git a/java/dagger/internal/codegen/MonitoringModuleGenerator.java b/java/dagger/internal/codegen/MonitoringModuleGenerator.java
index d80dccdc4..74502620a 100644
--- a/java/dagger/internal/codegen/MonitoringModuleGenerator.java
+++ b/java/dagger/internal/codegen/MonitoringModuleGenerator.java
@@ -57,8 +57,8 @@ ClassName nameGeneratedType(TypeElement componentElement) {
   }
 
   @Override
-  Optional<? extends Element> getElementForErrorReporting(TypeElement componentElement) {
-    return Optional.of(componentElement);
+  Element originatingElement(TypeElement componentElement) {
+    return componentElement;
   }
 
   @Override
diff --git a/java/dagger/internal/codegen/ProducerFactoryGenerator.java b/java/dagger/internal/codegen/ProducerFactoryGenerator.java
index 1eb2c62e4..8cb913d54 100644
--- a/java/dagger/internal/codegen/ProducerFactoryGenerator.java
+++ b/java/dagger/internal/codegen/ProducerFactoryGenerator.java
@@ -93,8 +93,9 @@ ClassName nameGeneratedType(ProductionBinding binding) {
   }
 
   @Override
-  Optional<? extends Element> getElementForErrorReporting(ProductionBinding binding) {
-    return binding.bindingElement();
+  Element originatingElement(ProductionBinding binding) {
+    // we only create factories for bindings that have a binding element
+    return binding.bindingElement().get();
   }
 
   @Override
diff --git a/java/dagger/internal/codegen/ProductionExecutorModuleGenerator.java b/java/dagger/internal/codegen/ProductionExecutorModuleGenerator.java
index 118edd5a9..a28981a72 100644
--- a/java/dagger/internal/codegen/ProductionExecutorModuleGenerator.java
+++ b/java/dagger/internal/codegen/ProductionExecutorModuleGenerator.java
@@ -53,8 +53,8 @@ ClassName nameGeneratedType(TypeElement componentElement) {
   }
 
   @Override
-  Optional<? extends Element> getElementForErrorReporting(TypeElement componentElement) {
-    return Optional.of(componentElement);
+  Element originatingElement(TypeElement componentElement) {
+    return componentElement;
   }
 
   @Override
diff --git a/java/dagger/internal/codegen/SourceFileGenerationException.java b/java/dagger/internal/codegen/SourceFileGenerationException.java
index 445a8404f..07c1c68d6 100644
--- a/java/dagger/internal/codegen/SourceFileGenerationException.java
+++ b/java/dagger/internal/codegen/SourceFileGenerationException.java
@@ -28,17 +28,14 @@
  * An exception thrown to indicate that a source file could not be generated.
  *
  * <p>This exception <b>should not</b> be used to report detectable, logical errors as it may mask
- * other errors that might have been caught upon further processing.  Use a {@link ValidationReport}
+ * other errors that might have been caught upon further processing. Use a {@link ValidationReport}
  * for that.
  */
 final class SourceFileGenerationException extends Exception {
-  // TODO(ronshapiro): remove these unused values
-  private final Optional<? extends Element> associatedElement;
+  private final Element associatedElement;
 
   SourceFileGenerationException(
-      Optional<ClassName> generatedClassName,
-      Throwable cause,
-      Optional<? extends Element> associatedElement) {
+      Optional<ClassName> generatedClassName, Throwable cause, Element associatedElement) {
     super(createMessage(generatedClassName, cause.getMessage()), cause);
     this.associatedElement = checkNotNull(associatedElement);
   }
@@ -52,10 +49,6 @@ private static String createMessage(Optional<ClassName> generatedClassName, Stri
   }
 
   void printMessageTo(Messager messager) {
-    if (associatedElement.isPresent()) {
-      messager.printMessage(ERROR, getMessage(), associatedElement.get());
-    } else {
-      messager.printMessage(ERROR, getMessage());
-    }
+    messager.printMessage(ERROR, getMessage(), associatedElement);
   }
 }
diff --git a/java/dagger/internal/codegen/SourceFileGenerator.java b/java/dagger/internal/codegen/SourceFileGenerator.java
index 5b2506478..8c663c9c4 100644
--- a/java/dagger/internal/codegen/SourceFileGenerator.java
+++ b/java/dagger/internal/codegen/SourceFileGenerator.java
@@ -71,18 +71,19 @@ void generate(T input) throws SourceFileGenerationException {
       return;
     }
     try {
-      buildJavaFile(generatedTypeName, type.get()).writeTo(filer);
+      buildJavaFile(generatedTypeName, input, type.get()).writeTo(filer);
     } catch (Exception e) {
       // if the code above threw a SFGE, use that
       Throwables.propagateIfPossible(e, SourceFileGenerationException.class);
       // otherwise, throw a new one
       throw new SourceFileGenerationException(
-          Optional.empty(), e, getElementForErrorReporting(input));
+          Optional.empty(), e, originatingElement(input));
     }
   }
 
   private JavaFile buildJavaFile(
-      ClassName generatedTypeName, TypeSpec.Builder typeSpecBuilder) {
+      ClassName generatedTypeName, T input, TypeSpec.Builder typeSpecBuilder) {
+    typeSpecBuilder.addOriginatingElement(originatingElement(input));
     Optional<AnnotationSpec> generatedAnnotation =
         generatedAnnotation(elements, sourceVersion)
             .map(
@@ -106,11 +107,8 @@ private JavaFile buildJavaFile(
    */
   abstract ClassName nameGeneratedType(T input);
 
-  /**
-   * Returns an optional element to be used for reporting errors. This returns a single element
-   * rather than a collection to reduce output noise.
-   */
-  abstract Optional<? extends Element> getElementForErrorReporting(T input);
+  /** Returns the originating element of the generating type. */
+  abstract Element originatingElement(T input);
 
   /**
    * Returns a {@link TypeSpec.Builder type} to be generated for {@code T}, or {@link
