diff --git a/java/dagger/android/DaggerDialogFragment.java b/java/dagger/android/DaggerDialogFragment.java
index 3aec6545f..00e65f256 100644
--- a/java/dagger/android/DaggerDialogFragment.java
+++ b/java/dagger/android/DaggerDialogFragment.java
@@ -26,7 +26,12 @@
  * A {@link DialogFragment} that injects its members in {@link #onAttach(Context)} and can be used
  * to inject child {@link Fragment}s attached to it. Note that when this fragment gets reattached,
  * its members will be injected again.
+ *
+ * @deprecated Framework fragments are deprecated in Android P; prefer {@code
+ *     dagger.android.support.DaggerDialogFragment} to use a support-library-friendly {@code
+ *     dagger.android} dialog fragment implementation.
  */
+@Deprecated
 @Beta
 public abstract class DaggerDialogFragment extends DialogFragment implements HasFragmentInjector {
 
diff --git a/java/dagger/android/support/DaggerDialogFragment.java b/java/dagger/android/support/DaggerDialogFragment.java
new file mode 100644
index 000000000..18feb6e39
--- /dev/null
+++ b/java/dagger/android/support/DaggerDialogFragment.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2018 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android.support;
+
+import android.content.Context;
+import android.support.v4.app.DialogFragment;
+import android.support.v4.app.Fragment;
+import dagger.android.AndroidInjector;
+import dagger.android.DispatchingAndroidInjector;
+import dagger.internal.Beta;
+import javax.inject.Inject;
+
+/**
+ * A {@link DialogFragment} that injects its members in {@link #onAttach(Context)} and can be used
+ * to inject child {@link Fragment}s attached to it. Note that when this fragment gets reattached,
+ * its members will be injected again.
+ */
+@Beta
+public abstract class DaggerDialogFragment extends DialogFragment
+    implements HasSupportFragmentInjector {
+
+  @Inject DispatchingAndroidInjector<Fragment> childFragmentInjector;
+
+  @Override
+  public void onAttach(Context context) {
+    AndroidSupportInjection.inject(this);
+    super.onAttach(context);
+  }
+
+  @Override
+  public AndroidInjector<Fragment> supportFragmentInjector() {
+    return childFragmentInjector;
+  }
+}
