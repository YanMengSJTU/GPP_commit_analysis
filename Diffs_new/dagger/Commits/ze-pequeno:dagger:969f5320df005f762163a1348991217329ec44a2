diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index ff786dc66..20cebe311 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -79,6 +79,7 @@ java_library(
     srcs = [
         "Accessibility.java",
         "AnnotationSpecs.java",
+        "ClearableCache.java",
         "CodeBlocks.java",
         "CompilerOptions.java",
         "ContributionType.java",
@@ -359,6 +360,7 @@ java_library(
         "MapKeyProcessingStep.java",
         "ModuleProcessingStep.java",
         "ProcessingEnvironmentModule.java",
+        "ProcessingRoundCacheModule.java",
         "SourceFileGeneratorsModule.java",
         "SpiModule.java",
         "SystemComponentsModule.java",
diff --git a/java/dagger/internal/codegen/BindingGraphFactory.java b/java/dagger/internal/codegen/BindingGraphFactory.java
index 51d4f2803..311f9dd5c 100644
--- a/java/dagger/internal/codegen/BindingGraphFactory.java
+++ b/java/dagger/internal/codegen/BindingGraphFactory.java
@@ -66,11 +66,13 @@
 import java.util.function.Function;
 import javax.inject.Inject;
 import javax.inject.Provider;
+import javax.inject.Singleton;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
 
 /** A factory for {@link BindingGraph} objects. */
-final class BindingGraphFactory {
+@Singleton
+final class BindingGraphFactory implements ClearableCache {
   private final DaggerElements elements;
   private final InjectBindingRegistry injectBindingRegistry;
   private final KeyFactory keyFactory;
@@ -270,8 +272,8 @@ private ModuleDescriptor descriptorForProductionExecutorModule() {
     return ImmutableSetMultimap.copyOf(Multimaps.index(declarations, BindingDeclaration::key));
   }
 
-  /** Releases cached references that this factory is retaining during this processing round. */
-  void clearCache() {
+  @Override
+  public void clearCache() {
     keysMatchingRequestCache.clear();
   }
 
diff --git a/java/dagger/internal/codegen/ClearableCache.java b/java/dagger/internal/codegen/ClearableCache.java
new file mode 100644
index 000000000..66ce3ef82
--- /dev/null
+++ b/java/dagger/internal/codegen/ClearableCache.java
@@ -0,0 +1,23 @@
+/*
+ * Copyright (C) 2019 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.internal.codegen;
+
+/** A cache of objects that can be cleared. */
+interface ClearableCache {
+  /** Releases cached references. */
+  void clearCache();
+}
diff --git a/java/dagger/internal/codegen/ComponentImplementationFactory.java b/java/dagger/internal/codegen/ComponentImplementationFactory.java
index 848125f54..fac5ba9f4 100644
--- a/java/dagger/internal/codegen/ComponentImplementationFactory.java
+++ b/java/dagger/internal/codegen/ComponentImplementationFactory.java
@@ -18,17 +18,24 @@
 
 import static com.google.common.base.Preconditions.checkState;
 import static dagger.internal.codegen.ComponentGenerator.componentName;
+import static dagger.internal.codegen.Util.reentrantComputeIfAbsent;
 import static javax.lang.model.element.Modifier.ABSTRACT;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PUBLIC;
 
 import com.squareup.javapoet.ClassName;
+import java.util.HashMap;
+import java.util.Map;
 import java.util.Optional;
 import javax.inject.Inject;
+import javax.inject.Singleton;
 import javax.lang.model.element.NestingKind;
+import javax.lang.model.element.TypeElement;
 
 /** Factory for {@link ComponentImplementation}s. */
-final class ComponentImplementationFactory {
+@Singleton
+final class ComponentImplementationFactory implements ClearableCache {
+  private final Map<TypeElement, ComponentImplementation> topLevelComponentCache = new HashMap<>();
   private final KeyFactory keyFactory;
   private final CompilerOptions compilerOptions;
   private final BindingGraphFactory bindingGraphFactory;
@@ -53,6 +60,13 @@
    *     ahead-of-time-subcomponents mode is not enabled
    */
   ComponentImplementation createComponentImplementation(BindingGraph bindingGraph) {
+    return reentrantComputeIfAbsent(
+        topLevelComponentCache,
+        bindingGraph.componentTypeElement(),
+        component -> createComponentImplementationUncached(bindingGraph));
+  }
+
+  private ComponentImplementation createComponentImplementationUncached(BindingGraph bindingGraph) {
     ComponentImplementation componentImplementation =
         topLevelImplementation(componentName(bindingGraph.componentTypeElement()), bindingGraph);
     // TODO(dpb): explore using optional bindings for the "parent" bindings
@@ -115,4 +129,9 @@ ComponentImplementation findChildSuperclassImplementation(
     BindingGraph truncatedBindingGraph = bindingGraphFactory.create(child, false);
     return createComponentImplementation(truncatedBindingGraph);
   }
+
+  @Override
+  public void clearCache() {
+    topLevelComponentCache.clear();
+  }
 }
diff --git a/java/dagger/internal/codegen/ComponentProcessor.java b/java/dagger/internal/codegen/ComponentProcessor.java
index dbbbef075..d2fed1bc5 100644
--- a/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/java/dagger/internal/codegen/ComponentProcessor.java
@@ -56,10 +56,7 @@
   @Inject BindingGraphPlugins bindingGraphPlugins;
   @Inject CompilerOptions compilerOptions;
   @Inject DaggerStatisticsCollector statisticsCollector;
-
-  // TODO(ronshapiro): inject a multibinding for all instances that retain caches?
-  @Inject ModuleDescriptor.Factory moduleDescriptorFactory;
-  @Inject BindingGraphFactory bindingGraphFactory;
+  @Inject Set<ClearableCache> clearableCaches;
 
   public ComponentProcessor() {
     this.testingPlugins = Optional.empty();
@@ -125,6 +122,7 @@ public SourceVersion getSupportedSourceVersion() {
         BindingMethodValidatorsModule.class,
         InjectBindingRegistryModule.class,
         ProcessingEnvironmentModule.class,
+        ProcessingRoundCacheModule.class,
         ProcessingStepsModule.class,
         SourceFileGeneratorsModule.class,
         SpiModule.class,
@@ -196,7 +194,6 @@ protected void postRound(RoundEnvironment roundEnv) {
         e.printMessageTo(processingEnv.getMessager());
       }
     }
-    moduleDescriptorFactory.clearCache();
-    bindingGraphFactory.clearCache();
+    clearableCaches.forEach(ClearableCache::clearCache);
   }
 }
diff --git a/java/dagger/internal/codegen/ModuleDescriptor.java b/java/dagger/internal/codegen/ModuleDescriptor.java
index 4be952fe3..ce248e16d 100644
--- a/java/dagger/internal/codegen/ModuleDescriptor.java
+++ b/java/dagger/internal/codegen/ModuleDescriptor.java
@@ -100,7 +100,7 @@
   }
 
   @Singleton
-  static final class Factory {
+  static final class Factory implements ClearableCache {
     private final DaggerElements elements;
     private final BindingFactory bindingFactory;
     private final MultibindingDeclaration.Factory multibindingDeclarationFactory;
@@ -220,8 +220,8 @@ private String implicitlyIncludedModuleName(ExecutableElement method) {
           + LOWER_CAMEL.to(UPPER_CAMEL, method.getSimpleName().toString());
     }
 
-    /** Releases references to any {@link ModuleDescriptor}s that this factory is retaining. */
-    void clearCache() {
+    @Override
+    public void clearCache() {
       cache.clear();
     }
   }
diff --git a/java/dagger/internal/codegen/ProcessingRoundCacheModule.java b/java/dagger/internal/codegen/ProcessingRoundCacheModule.java
new file mode 100644
index 000000000..b56cc30ac
--- /dev/null
+++ b/java/dagger/internal/codegen/ProcessingRoundCacheModule.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (C) 2019 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.internal.codegen;
+
+import dagger.Binds;
+import dagger.Module;
+import dagger.multibindings.IntoSet;
+
+/**
+ * Binding contributions to a set of {@link ClearableCache}s that will be cleared at the end of each
+ * processing round.
+ */
+@Module
+interface ProcessingRoundCacheModule {
+  @Binds
+  @IntoSet
+  ClearableCache moduleDescriptorFactory(ModuleDescriptor.Factory cache);
+
+  @Binds
+  @IntoSet
+  ClearableCache bindingGraphFactory(BindingGraphFactory cache);
+
+  @Binds
+  @IntoSet
+  ClearableCache componentImplementationFactory(ComponentImplementationFactory cache);
+}
