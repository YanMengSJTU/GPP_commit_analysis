diff --git a/android.md b/android.md
index 9ba4a778d..6c66a1585 100644
--- a/android.md
+++ b/android.md
@@ -267,6 +267,23 @@ activity instance during configuration change, which in turn injects the
 must already be injected. For users of [ErrorProne], it is a
 compiler error to call `AndroidInjection.inject()` after `super.onCreate()`.
 
+## FAQ
+
+### Scoping `AndroidInjector.Factory`
+
+`AndroidInjector.Factory` is intended to be a stateless interface so that
+implementors don't have to worry about managing state related to the object
+which will be injected. When `DispatchingAndroidInjector` requests a
+`AndroidInjector.Factory`, it does so through a `Provider` so that it doesn't
+explicitly retain any instances of the factory. Because the
+`AndroidInjector.Builder` implementation that is generated by Dagger *does*
+retain an instance of the `Activity`/`Fragment`/etc that is being injected, it
+is a compile-time error to apply a scope to the methods which provide them. If
+you are positive that your `AndroidInjector.Factory` does not retain an instance
+to the injected object, you may suppress this error by applying
+`@SuppressWarnings("dagger.android.ScopedInjectoryFactory")` to your module
+method.
+
 <!-- References -->
 
 [AndroidInjection.inject(Activity)]: https://google.github.io/dagger/api/latest/dagger/android/AndroidInjection.html#inject-Activity-
