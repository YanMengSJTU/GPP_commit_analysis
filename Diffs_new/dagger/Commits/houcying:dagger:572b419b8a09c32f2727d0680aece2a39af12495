diff --git a/core/src/main/java/dagger/ObjectGraph.java b/core/src/main/java/dagger/ObjectGraph.java
index a1736d2b8..b695195d9 100644
--- a/core/src/main/java/dagger/ObjectGraph.java
+++ b/core/src/main/java/dagger/ObjectGraph.java
@@ -163,16 +163,18 @@ static ObjectGraph createWith(Loader loader, Object... modules) {
       return object;
     }
 
+    // is each module with all provided annotation, does it include all dependencies?
     private static ObjectGraph makeGraph(DaggerObjectGraph base, Loader plugin, Object... modules) {
       Map<String, Class<?>> injectableTypes = new LinkedHashMap<String, Class<?>>();
       Map<Class<?>, StaticInjection> staticInjections
           = new LinkedHashMap<Class<?>, StaticInjection>();
       StandardBindings baseBindings =
-          (base == null) ? new StandardBindings() : new StandardBindings(base.setBindings);
+          (base == null) ? new StandardBindings() : new StandardBindings(base.setBindings);  //why only setbinding? it is the basebinding part
       BindingsGroup overrideBindings = new OverridesBindings();
 
-      Map<ModuleAdapter<?>, Object> loadedModules = Modules.loadModules(plugin, modules);
+      Map<ModuleAdapter<?>, Object> loadedModules = Modules.loadModules(plugin, modules); //load all the modules into the loadedModules
       for (Entry<ModuleAdapter<?>, Object> loadedModule : loadedModules.entrySet()) {
+        // moduleadapter Extracts bindings from an {@code @Module}-annotated class.
         ModuleAdapter<Object> moduleAdapter = (ModuleAdapter<Object>) loadedModule.getKey();
         for (int i = 0; i < moduleAdapter.injectableTypes.length; i++) {
           injectableTypes.put(moduleAdapter.injectableTypes[i], moduleAdapter.moduleClass);
diff --git a/examples/simple/src/main/java/coffee/CoffeeMaker.java b/examples/simple/src/main/java/coffee/CoffeeMaker.java
index a4e818012..2d8bee7c8 100644
--- a/examples/simple/src/main/java/coffee/CoffeeMaker.java
+++ b/examples/simple/src/main/java/coffee/CoffeeMaker.java
@@ -1,16 +1,21 @@
 package coffee;
 
 import dagger.Lazy;
+
+import java.util.Set;
+
 import javax.inject.Inject;
 
 class CoffeeMaker {
   @Inject Lazy<Heater> heater; // Don't want to create a possibly costly heater until we need it.
   @Inject Pump pump;
+  @Inject Set<Flavor> flavors;
 
   public void brew() {
     heater.get().on();
     pump.pump();
     System.out.println(" [_]P coffee! [_]P ");
+    System.out.println(flavors);
     heater.get().off();
   }
 }
diff --git a/examples/simple/src/main/java/coffee/DripCoffeeModule.java b/examples/simple/src/main/java/coffee/DripCoffeeModule.java
index da0bbaafa..555ebb6e8 100644
--- a/examples/simple/src/main/java/coffee/DripCoffeeModule.java
+++ b/examples/simple/src/main/java/coffee/DripCoffeeModule.java
@@ -4,6 +4,7 @@
 import dagger.Provides;
 import javax.inject.Singleton;
 
+
 @Module(
     injects = CoffeeApp.class,
     includes = PumpModule.class
@@ -12,4 +13,8 @@
   @Provides @Singleton Heater provideHeater() {
     return new ElectricHeater();
   }
+  @Provides(type = Provides.Type.SET) Flavor provideFlavor() {
+    return new Flavor("vanilla");
+  }
 }
+
