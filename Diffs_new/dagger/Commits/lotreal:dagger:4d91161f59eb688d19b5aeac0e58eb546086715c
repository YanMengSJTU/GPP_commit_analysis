diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
index c35058ba3..daea230a5 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
@@ -24,6 +24,8 @@
 import dagger.Provides;
 import dagger.producers.ProducerModule;
 import dagger.producers.Produces;
+import dm.diana.codegen.InjectExtraProcessingStep;
+
 import java.lang.annotation.Annotation;
 import java.util.EnumSet;
 import java.util.Map;
@@ -176,6 +178,7 @@ public SourceVersion getSupportedSourceVersion() {
             keyFormatter);
 
     return ImmutableList.<ProcessingStep>of(
+        new InjectExtraProcessingStep(),
         new MapKeyProcessingStep(messager, types, mapKeyValidator, mapKeyGenerator),
         new InjectProcessingStep(
             messager,
diff --git a/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java b/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
index 2112d4d8c..e9a8327cc 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
@@ -42,6 +42,8 @@
 import dagger.internal.codegen.writer.VariableWriter;
 import dagger.internal.codegen.writer.VoidName;
 import dagger.producers.Producer;
+import dm.diana.codegen.DianaGenerator;
+
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map.Entry;
@@ -229,11 +231,7 @@ ClassName nameGeneratedType(MembersInjectionBinding binding) {
       injectMembersWriter.annotate(SuppressWarnings.class).setValue("unchecked");
     }
 
-    injectMembersWriter.body().addSnippet(Joiner.on('\n').join(
-        "// instance.injectExtra = (Config) instance.getIntent().getSerializableExtra(\"config\");",
-        "// ButterKnife.bind(instance);"
-    ));
-
+    DianaGenerator.appendInjectMembers(injectMembersWriter, injectedTypeName);
     return ImmutableSet.of(writer);
   }
 
