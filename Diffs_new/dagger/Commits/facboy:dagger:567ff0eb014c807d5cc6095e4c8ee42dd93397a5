diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index a99ce7fe4..609ae1654 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -221,6 +221,7 @@ java_library(
         "DependencyMethodProducerCreationExpression.java",
         "DependencyMethodProviderCreationExpression.java",
         "DerivedFromProviderBindingExpression.java",
+        "DoubleCheckedMethodImplementation.java",
         "FactoryGenerator.java",
         "FrameworkFieldInitializer.java",
         "FrameworkInstanceBindingExpression.java",
@@ -252,11 +253,11 @@ java_library(
         "ReferenceReleasingManagerFields.java",
         "ReleasableReferenceManagerProviderCreationExpression.java",
         "ReleasableReferenceManagerSetProviderCreationExpression.java",
-        "ScopedInstanceMethodImplementation.java",
         "SetBindingExpression.java",
         "SetFactoryCreationExpression.java",
         "SimpleInvocationBindingExpression.java",
         "SimpleMethodBindingExpression.java",
+        "SingleCheckedMethodImplementation.java",
         "SubcomponentBuilderBindingExpression.java",
         "SubcomponentBuilderProviderCreationExpression.java",
         "SubcomponentNames.java",
diff --git a/java/dagger/internal/codegen/ComponentBindingExpressions.java b/java/dagger/internal/codegen/ComponentBindingExpressions.java
index 94509b091..a9587470c 100644
--- a/java/dagger/internal/codegen/ComponentBindingExpressions.java
+++ b/java/dagger/internal/codegen/ComponentBindingExpressions.java
@@ -595,7 +595,6 @@ private BindingExpression providerBindingExpression(ResolvedBindings resolvedBin
       if (!frameworkInstanceCreationExpression(resolvedBindings).isSimpleFactory()
           && !(instanceBindingExpression(resolvedBindings)
               instanceof DerivedFromProviderBindingExpression)) {
-        // TODO(user): Cache the provider.
         return wrapInMethod(
             resolvedBindings,
             RequestKind.PROVIDER,
@@ -657,17 +656,21 @@ private BindingMethodImplementation methodImplementation(
       ResolvedBindings resolvedBindings,
       RequestKind requestKind,
       BindingExpression bindingExpression) {
-    return compilerOptions.experimentalAndroidMode()
-            && requestKind.equals(RequestKind.INSTANCE)
-            && needsCaching(resolvedBindings)
-        ? new ScopedInstanceMethodImplementation(
-            resolvedBindings, requestKind, bindingExpression, types, generatedComponentModel)
-        : new BindingMethodImplementation(
-            resolvedBindings,
-            requestKind,
-            bindingExpression,
-            generatedComponentModel.name(),
-            types);
+    if (compilerOptions.experimentalAndroidMode()) {
+      if (requestKind.equals(RequestKind.PROVIDER)) {
+        return new SingleCheckedMethodImplementation(
+            resolvedBindings, requestKind, bindingExpression, types, generatedComponentModel);
+      } else if (requestKind.equals(RequestKind.INSTANCE) && needsCaching(resolvedBindings)) {
+        return resolvedBindings.scope().get().isReusable()
+            ? new SingleCheckedMethodImplementation(
+                resolvedBindings, requestKind, bindingExpression, types, generatedComponentModel)
+            : new DoubleCheckedMethodImplementation(
+                resolvedBindings, requestKind, bindingExpression, types, generatedComponentModel);
+      }
+    }
+
+    return new BindingMethodImplementation(
+        resolvedBindings, requestKind, bindingExpression, generatedComponentModel.name(), types);
   }
 
   /**
diff --git a/java/dagger/internal/codegen/ScopedInstanceMethodImplementation.java b/java/dagger/internal/codegen/DoubleCheckedMethodImplementation.java
similarity index 77%
rename from java/dagger/internal/codegen/ScopedInstanceMethodImplementation.java
rename to java/dagger/internal/codegen/DoubleCheckedMethodImplementation.java
index 02a872231..e8a2a09d7 100644
--- a/java/dagger/internal/codegen/ScopedInstanceMethodImplementation.java
+++ b/java/dagger/internal/codegen/DoubleCheckedMethodImplementation.java
@@ -16,7 +16,6 @@
 
 package dagger.internal.codegen;
 
-import static com.google.common.base.Preconditions.checkArgument;
 import static dagger.internal.codegen.GeneratedComponentModel.FieldSpecKind.PRIVATE_METHOD_SCOPED_FIELD;
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.VOLATILE;
@@ -29,14 +28,17 @@
 import dagger.internal.MemoizedSentinel;
 import dagger.model.RequestKind;
 
-/** Defines a scoping method body and return type for a given instance {@link BindingExpression}. */
-final class ScopedInstanceMethodImplementation extends BindingMethodImplementation {
+/**
+ * Defines a method body and return type for double checked locking of the given {@link
+ * BindingExpression}.
+ */
+final class DoubleCheckedMethodImplementation extends BindingMethodImplementation {
 
   private final GeneratedComponentModel generatedComponentModel;
   private final ContributionBinding binding;
   private final Supplier<String> fieldName = Suppliers.memoize(this::createField);
 
-  ScopedInstanceMethodImplementation(
+  DoubleCheckedMethodImplementation(
       ResolvedBindings resolvedBindings,
       RequestKind requestKind,
       BindingExpression bindingExpression,
@@ -45,24 +47,10 @@
     super(resolvedBindings, requestKind, bindingExpression, generatedComponentModel.name(), types);
     this.generatedComponentModel = generatedComponentModel;
     this.binding = resolvedBindings.contributionBinding();
-    checkArgument(binding.scope().isPresent(), "expected binding to be scoped: %s", binding);
   }
 
   @Override
   CodeBlock body() {
-    return binding.scope().get().isReusable() ? singleCheck() : doubleCheck();
-  }
-
-  private CodeBlock singleCheck() {
-    return CodeBlock.builder()
-        .beginControlFlow("if ($N instanceof $T)", fieldName.get(), MemoizedSentinel.class)
-        .addStatement("$N = $L", fieldName.get(), simpleBindingExpression())
-        .endControlFlow()
-        .addStatement("return ($T) $N", returnType(), fieldName.get())
-        .build();
-  }
-
-  private CodeBlock doubleCheck() {
     String fieldExpression =
         fieldName.get().equals("local") ? "this." + fieldName.get() : fieldName.get();
     return CodeBlock.builder()
diff --git a/java/dagger/internal/codegen/SingleCheckedMethodImplementation.java b/java/dagger/internal/codegen/SingleCheckedMethodImplementation.java
new file mode 100644
index 000000000..6fd39f6a5
--- /dev/null
+++ b/java/dagger/internal/codegen/SingleCheckedMethodImplementation.java
@@ -0,0 +1,101 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.internal.codegen;
+
+import static dagger.internal.codegen.GeneratedComponentModel.FieldSpecKind.PRIVATE_METHOD_SCOPED_FIELD;
+import static dagger.model.RequestKind.INSTANCE;
+import static javax.lang.model.element.Modifier.PRIVATE;
+import static javax.lang.model.element.Modifier.VOLATILE;
+
+import com.google.common.base.Supplier;
+import com.google.common.base.Suppliers;
+import com.squareup.javapoet.CodeBlock;
+import com.squareup.javapoet.FieldSpec;
+import com.squareup.javapoet.TypeName;
+import dagger.internal.MemoizedSentinel;
+import dagger.model.RequestKind;
+import java.util.Optional;
+
+/**
+ * Defines a method body and return type for single checked caching of the given {@link
+ * BindingExpression}.
+ */
+final class SingleCheckedMethodImplementation extends BindingMethodImplementation {
+
+  private final GeneratedComponentModel generatedComponentModel;
+  private final ResolvedBindings resolvedBindings;
+  private final ContributionBinding binding;
+  private final RequestKind requestKind;
+  private final Supplier<FieldSpec> field = Suppliers.memoize(this::createField);
+
+  SingleCheckedMethodImplementation(
+      ResolvedBindings resolvedBindings,
+      RequestKind requestKind,
+      BindingExpression bindingExpression,
+      DaggerTypes types,
+      GeneratedComponentModel generatedComponentModel) {
+    super(resolvedBindings, requestKind, bindingExpression, generatedComponentModel.name(), types);
+    this.generatedComponentModel = generatedComponentModel;
+    this.resolvedBindings = resolvedBindings;
+    this.binding = resolvedBindings.contributionBinding();
+    this.requestKind = requestKind;
+  }
+
+  @Override
+  CodeBlock body() {
+    CodeBlock.Builder builder = CodeBlock.builder();
+    if (isNullable()) {
+      builder.beginControlFlow("if ($N instanceof $T)", field.get(), MemoizedSentinel.class);
+    } else {
+      builder.beginControlFlow("if ($N == null)", field.get());
+    }
+
+    builder
+        .addStatement("$N = $L", field.get(), simpleBindingExpression())
+        .endControlFlow();
+
+    if (isNullable()) {
+      builder.addStatement("return ($T) $N", returnType(), field.get());
+    } else {
+      builder.addStatement("return $N", field.get());
+    }
+    return builder.build();
+  }
+
+  private FieldSpec createField() {
+    String name =
+        generatedComponentModel.getUniqueFieldName(
+            requestKind.equals(INSTANCE)
+                ? BindingVariableNamer.name(binding)
+                : FrameworkField.forResolvedBindings(resolvedBindings, Optional.empty()).name());
+
+    FieldSpec field =
+        // Nullable instances use `MemoizedSentinel` instead of `null` as the initialization value.
+        isNullable()
+            ? FieldSpec.builder(TypeName.OBJECT, name, PRIVATE, VOLATILE)
+                .initializer("new $T()", MemoizedSentinel.class)
+                .build()
+            : FieldSpec.builder(TypeName.get(returnType()), name, PRIVATE, VOLATILE).build();
+
+    generatedComponentModel.addField(PRIVATE_METHOD_SCOPED_FIELD, field);
+    return field;
+  }
+
+  private boolean isNullable() {
+    return requestKind.equals(INSTANCE) && binding.isNullable();
+  }
+}
diff --git a/javatests/dagger/functional/nullables/NullComponent.java b/javatests/dagger/functional/nullables/NullComponent.java
index 8d8d757b3..39f0d349d 100644
--- a/javatests/dagger/functional/nullables/NullComponent.java
+++ b/javatests/dagger/functional/nullables/NullComponent.java
@@ -26,4 +26,5 @@
   Provider<String> stringProvider();
   Number number();
   Provider<Number> numberProvider();
+  @Nullable Integer integer();
 }
diff --git a/javatests/dagger/functional/nullables/NullModule.java b/javatests/dagger/functional/nullables/NullModule.java
index 00f35fd43..02191657d 100644
--- a/javatests/dagger/functional/nullables/NullModule.java
+++ b/javatests/dagger/functional/nullables/NullModule.java
@@ -18,10 +18,12 @@
 
 import dagger.Module;
 import dagger.Provides;
+import dagger.Reusable;
 
 @Module
 class NullModule {
   Number numberValue = null;
+  Integer integerCallCount = 0;
 
   @Nullable
   @Provides
@@ -33,4 +35,12 @@ String provideNullableString() {
   Number provideNumber() {
     return numberValue;
   }
+
+  @Nullable
+  @Provides
+  @Reusable
+  Integer provideNullReusableInteger() {
+    integerCallCount++;
+    return null;
+  }
 }
diff --git a/javatests/dagger/functional/nullables/NullabilityTest.java b/javatests/dagger/functional/nullables/NullabilityTest.java
index e232d8534..8db577bb8 100644
--- a/javatests/dagger/functional/nullables/NullabilityTest.java
+++ b/javatests/dagger/functional/nullables/NullabilityTest.java
@@ -50,9 +50,21 @@
     validate(true, nullFoo.fieldInjectedString, nullFoo.fieldInjectedStringProvider,
         nullFoo.fieldInjectedNumberProvider);
   }
-  
+
+  @Test public void testNullability_reusuable() {
+    NullModule module = new NullModule();
+    NullComponent component = DaggerNullComponent.builder().nullModule(module).build();
+
+    // Test that the @Nullable @Reusuable binding is cached properly even when the value is null.
+    assertThat(module.integerCallCount).isEqualTo(0);
+    assertThat(component.integer()).isNull();
+    assertThat(module.integerCallCount).isEqualTo(1);
+    assertThat(component.integer()).isNull();
+    assertThat(module.integerCallCount).isEqualTo(1);
+  }
+
   @Test public void testNullability_components() {
-    NullComponent nullComponent = new NullComponent() {      
+    NullComponent nullComponent = new NullComponent() {
       @Override public Provider<String> stringProvider() {
         return new Provider<String>() {
           @Override public String get() {
@@ -60,11 +72,11 @@
           }
         };
       }
-      
+
       @Override public String string() {
         return null;
       }
-      
+
       @Override public Provider<Number> numberProvider() {
         return new Provider<Number>() {
           @Override public Number get() {
@@ -72,19 +84,23 @@
           }
         };
       }
-      
+
       @Override public Number number() {
         return null;
       }
-      
+
       @Override public NullFoo nullFoo() {
         return null;
       }
+
+      @Override public Integer integer() {
+        return null;
+      }
     };
     NullComponentWithDependency component =
         DaggerNullComponentWithDependency.builder().nullComponent(nullComponent).build();
     validate(false, component.string(), component.stringProvider(), component.numberProvider());
-    
+
     // Also validate that the component's number() method fails
     try {
       component.number();
@@ -103,7 +119,7 @@ private void validate(boolean fromProvides,
     try {
       numberProvider.get();
       fail();
-    } catch(NullPointerException npe) {
+    } catch (NullPointerException npe) {
       assertThat(npe).hasMessage("Cannot return null from a non-@Nullable "
           + (fromProvides ? "@Provides" : "component") + " method");
     }
diff --git a/javatests/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
index 24e6f6e40..0d858ed01 100644
--- a/javatests/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
@@ -289,7 +289,11 @@ public void componentWithInvalidModule() {
                 "import javax.inject.Provider;",
                 "",
                 GENERATED_ANNOTATION,
-                "public final class DaggerSimpleComponent implements SimpleComponent {",
+                "public final class DaggerSimpleComponent implements SimpleComponent {")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
+                "  private volatile Provider<SomeInjectableType> someInjectableTypeProvider;")
+            .addLines(
                 "  private DaggerSimpleComponent(Builder builder) {}",
                 "",
                 "  public static Builder builder() {",
@@ -323,7 +327,10 @@ public void componentWithInvalidModule() {
                 "    return SomeInjectableType_Factory.create();")
             .addLinesIn(
                 EXPERIMENTAL_ANDROID_MODE, //
-                "    return new SwitchingProvider<>(0);")
+                "    if (someInjectableTypeProvider == null) {",
+                "      someInjectableTypeProvider = new SwitchingProvider<>(0);",
+                "    }",
+                "    return someInjectableTypeProvider;")
             .addLines(
                 "  }",
                 "",
@@ -400,7 +407,8 @@ public void componentWithInvalidModule() {
                 "public final class DaggerSimpleComponent implements SimpleComponent {")
             .addLinesIn(
                 EXPERIMENTAL_ANDROID_MODE,
-                "  private volatile Object someInjectableType = new MemoizedSentinel();")
+                "  private volatile Object someInjectableType = new MemoizedSentinel();",
+                "  private volatile Provider<SomeInjectableType> someInjectableTypeProvider;")
             .addLinesIn(
                 DEFAULT_MODE,
                 "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
@@ -447,11 +455,11 @@ public void componentWithInvalidModule() {
                 "  public Provider<SomeInjectableType> someInjectableTypeProvider() {")
             .addLinesIn(
                 EXPERIMENTAL_ANDROID_MODE, //
-                "    return new SwitchingProvider<>(0);")
-            .addLinesIn(
-                DEFAULT_MODE, //
-                "    return someInjectableTypeProvider;")
-            .addLines( //
+                "    if (someInjectableTypeProvider == null) {",
+                "      someInjectableTypeProvider = new SwitchingProvider<>(0);",
+                "    }")
+            .addLines(
+                "    return someInjectableTypeProvider;",
                 "  }")
             .addLinesIn(
                 EXPERIMENTAL_ANDROID_MODE,
@@ -1291,10 +1299,14 @@ public void testDefaultPackage() {
                 "  private test_AComponent_a aProvider;")
             .addLinesIn(
                 EXPERIMENTAL_ANDROID_MODE,
+                "  private volatile Provider<A> aProvider;",
                 "  private AComponent aComponent;",
                 "",
                 "  private Provider<A> getAProvider() {",
-                "    return new SwitchingProvider<>(0);",
+                "    if (aProvider == null) {",
+                "      aProvider = new SwitchingProvider<>(0);",
+                "    }",
+                "    return aProvider;",
                 "  }")
             .addLines(
                 "  @SuppressWarnings(\"unchecked\")",
diff --git a/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java b/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
index 36c54cc21..921365fda 100644
--- a/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
+++ b/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
@@ -178,6 +178,9 @@ public void toDoubleCheck() {
                     "public final class DaggerTestComponent implements TestComponent {")
                 .addLinesIn(
                     EXPERIMENTAL_ANDROID_MODE,
+                    "  private volatile Object regularScoped = new MemoizedSentinel();",
+                    "  private volatile ReusableScoped reusableScoped;",
+                    "",
                     "  private RegularScoped getRegularScoped() {",
                     "    Object local = regularScoped;",
                     "    if (local instanceof MemoizedSentinel) {",
@@ -192,10 +195,10 @@ public void toDoubleCheck() {
                     "  }",
                     "",
                     "  private ReusableScoped getReusableScoped() {",
-                    "    if (reusableScoped instanceof MemoizedSentinel) {",
+                    "    if (reusableScoped == null) {",
                     "      reusableScoped = new ReusableScoped();",
                     "    }",
-                    "    return (ReusableScoped) reusableScoped;",
+                    "    return reusableScoped;",
                     "  }",
                     "")
                 .addLines(
@@ -270,6 +273,9 @@ public void toSingleCheck() {
                     "public final class DaggerTestComponent implements TestComponent {")
                 .addLinesIn(
                     EXPERIMENTAL_ANDROID_MODE,
+                    "  private volatile Object regularScoped = new MemoizedSentinel();",
+                    "  private volatile ReusableScoped reusableScoped;",
+                    "",
                     "  private RegularScoped getRegularScoped() {",
                     "    Object local = regularScoped;",
                     "    if (local instanceof MemoizedSentinel) {",
@@ -284,10 +290,10 @@ public void toSingleCheck() {
                     "  }",
                     "",
                     "  private ReusableScoped getReusableScoped() {",
-                    "    if (reusableScoped instanceof MemoizedSentinel) {",
+                    "    if (reusableScoped == null) {",
                     "      reusableScoped = new ReusableScoped();",
                     "    }",
-                    "    return (ReusableScoped) reusableScoped;",
+                    "    return reusableScoped;",
                     "  }",
                     "")
                 .addLines(
@@ -359,6 +365,10 @@ public void toReleasableCheck() {
                     "public final class DaggerTestComponent implements TestComponent {")
                 .addLinesIn(
                     EXPERIMENTAL_ANDROID_MODE,
+                    "  private volatile Object regularScoped = new MemoizedSentinel();",
+                    "  private volatile ReusableScoped reusableScoped;",
+                    "  private volatile Provider<Unscoped> unscopedProvider;",
+                    "",
                     "  private RegularScoped getRegularScoped() {",
                     "    Object local = regularScoped;",
                     "    if (local instanceof MemoizedSentinel) {",
@@ -373,14 +383,17 @@ public void toReleasableCheck() {
                     "  }",
                     "",
                     "  private ReusableScoped getReusableScoped() {",
-                    "    if (reusableScoped instanceof MemoizedSentinel) {",
+                    "    if (reusableScoped == null) {",
                     "      reusableScoped = new ReusableScoped();",
                     "    }",
-                    "    return (ReusableScoped) reusableScoped;",
+                    "    return reusableScoped;",
                     "  }",
                     "",
                     "  private Provider<Unscoped> getUnscopedProvider() {",
-                    "    return new SwitchingProvider<>(0);",
+                    "    if (unscopedProvider == null) {",
+                    "      unscopedProvider = new SwitchingProvider<>(0);",
+                    "    }",
+                    "    return unscopedProvider;",
                     "  }",
                     "")
                 .addLines(
@@ -395,14 +408,16 @@ public void toReleasableCheck() {
                 .addLines(
                     "    this.releasableScopedProvider = ",
                     "         ReferenceReleasingProvider.create(",
-                    "             ReleasableScoped_Factory.create(), customScopeReferences);",
-                    "    this.unscopedProvider =",
-                    "        ReferenceReleasingProvider.create(")
+                    "             ReleasableScoped_Factory.create(), customScopeReferences);")
                 .addLinesIn(
                     DEFAULT_MODE,
+                    "    this.unscopedProvider =",
+                    "        ReferenceReleasingProvider.create(",
                     "            (Provider) Unscoped_Factory.create(), customScopeReferences);")
                 .addLinesIn(
                     EXPERIMENTAL_ANDROID_MODE,
+                    "    this.unscopedProvider2 =",
+                    "        ReferenceReleasingProvider.create(",
                     "            (Provider) getUnscopedProvider(), customScopeReferences);")
                 .addLines(
                     "    this.forReleasableReferencesReleasableReferenceManagerProvider =",
@@ -466,6 +481,9 @@ public void toUnscoped() {
                     "public final class DaggerTestComponent implements TestComponent {")
                 .addLinesIn(
                     EXPERIMENTAL_ANDROID_MODE,
+                    "  private volatile Object regularScoped = new MemoizedSentinel();",
+                    "  private volatile ReusableScoped reusableScoped;",
+                    "",
                     "  private RegularScoped getRegularScoped() {",
                     "    Object local = regularScoped;",
                     "    if (local instanceof MemoizedSentinel) {",
@@ -480,10 +498,10 @@ public void toUnscoped() {
                     "  }",
                     "",
                     "  private ReusableScoped getReusableScoped() {",
-                    "    if (reusableScoped instanceof MemoizedSentinel) {",
+                    "    if (reusableScoped == null) {",
                     "      reusableScoped = new ReusableScoped();",
                     "    }",
-                    "    return (ReusableScoped) reusableScoped;",
+                    "    return reusableScoped;",
                     "  }",
                     "")
                 .addLines(
@@ -784,14 +802,23 @@ public void castedToRawType() {
                     "}")
                 .addLinesIn(
                     EXPERIMENTAL_ANDROID_MODE,
+                    "  private volatile Provider<CharSequence> charSequenceProvider;",
+                    "  private volatile Provider<String> namedStringProvider;",
+                    "",
                     "  @Override",
                     "  public Provider<CharSequence> charSequence() {",
-                    "    return new SwitchingProvider<>(0);",
+                    "    if (charSequenceProvider == null) {",
+                    "      charSequenceProvider = new SwitchingProvider<>(0);",
+                    "    }",
+                    "    return charSequenceProvider;",
                     "  }",
                     "",
                     "  @Override",
                     "  public Provider<String> namedString() {",
-                    "    return new SwitchingProvider<>(1);",
+                    "    if (namedStringProvider == null) {",
+                    "      namedStringProvider = new SwitchingProvider<>(1);",
+                    "    }",
+                    "    return namedStringProvider;",
                     "  }",
                     "",
                     "  private final class SwitchingProvider<T> implements Provider<T> {",
@@ -877,14 +904,23 @@ public void doubleBinds() {
                     "}")
                 .addLinesIn(
                     EXPERIMENTAL_ANDROID_MODE,
+                    "  private volatile Provider<CharSequence> charSequenceProvider;",
+                    "  private volatile Provider<Object> objectProvider;",
+                    "",
                     "  @Override",
                     "  public Provider<CharSequence> charSequence() {",
-                    "    return new SwitchingProvider<>(0);",
+                    "    if (charSequenceProvider == null) {",
+                    "      charSequenceProvider = new SwitchingProvider<>(0);",
+                    "    }",
+                    "    return charSequenceProvider;",
                     "  }",
                     "",
                     "  @Override",
                     "  public Provider<Object> object() {",
-                    "    return new SwitchingProvider<>(1);",
+                    "    if (objectProvider == null) {",
+                    "      objectProvider = new SwitchingProvider<>(1);",
+                    "    }",
+                    "    return objectProvider;",
                     "  }",
                     "",
                     "  private final class SwitchingProvider<T> implements Provider<T> {",
@@ -971,9 +1007,14 @@ public void inlineFactoryOfInacessibleType() {
                     "}")
                 .addLinesIn(
                     EXPERIMENTAL_ANDROID_MODE,
+                    "  private volatile Provider<Supertype> toProvider;",
+                    "",
                     "  @Override",
                     "  public Provider<Supertype> supertypeProvider() {",
-                    "    return new SwitchingProvider<>(0);",
+                    "    if (toProvider == null) {",
+                    "      toProvider = new SwitchingProvider<>(0);",
+                    "    }",
+                    "    return toProvider;",
                     "  }",
                     "",
                     "  private final class SwitchingProvider<T> implements Provider<T> {",
@@ -1063,14 +1104,15 @@ public void providerWhenBindsScopeGreaterThanDependencyScope() {
                     "}")
                 .addLinesIn(
                     EXPERIMENTAL_ANDROID_MODE,
+                    "  private volatile Provider<Object> bindStringProvider;",
                     "  private volatile Object object = new MemoizedSentinel();",
-                    "  private volatile Object string = new MemoizedSentinel();",
+                    "  private volatile String string;",
                     "",
                     "  private String getString() {",
-                    "    if (string instanceof MemoizedSentinel) {",
+                    "    if (string == null) {",
                     "      string = TestModule_ProvideStringFactory.proxyProvideString();",
                     "    }",
-                    "    return (String) string;",
+                    "    return string;",
                     "  }",
                     "",
                     "  private Object getObject2() {",
@@ -1088,7 +1130,10 @@ public void providerWhenBindsScopeGreaterThanDependencyScope() {
                     "",
                     "  @Override",
                     "  public Provider<Object> getObject() {",
-                    "    return new SwitchingProvider<>(0);",
+                    "    if (bindStringProvider == null) {",
+                    "      bindStringProvider = new SwitchingProvider<>(0);",
+                    "    }",
+                    "    return bindStringProvider;",
                     "  }",
                     "",
                     "  private final class SwitchingProvider<T> implements Provider<T> {",
diff --git a/javatests/dagger/internal/codegen/ElidedFactoriesTest.java b/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
index e41311f75..ae8729300 100644
--- a/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
+++ b/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
@@ -186,6 +186,7 @@ public void simpleComponent_injectsProviderOf_dependsOnScoped() {
                 "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerSimpleComponent implements SimpleComponent {",
+                "  private volatile Provider<DependsOnScoped> dependsOnScopedProvider;",
                 "  private volatile Object scopedType = new MemoizedSentinel();",
                 "",
                 "  private DaggerSimpleComponent(Builder builder) {}",
@@ -216,7 +217,10 @@ public void simpleComponent_injectsProviderOf_dependsOnScoped() {
                 "  }",
                 "",
                 "  private Provider<DependsOnScoped> getDependsOnScopedProvider() {",
-                "    return new SwitchingProvider<>(0);",
+                "    if (dependsOnScopedProvider == null) {",
+                "      dependsOnScopedProvider = new SwitchingProvider<>(0);",
+                "    }",
+                "    return dependsOnScopedProvider;",
                 "  }",
                 "",
                 "  @Override",
diff --git a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index be6da4b8f..a186b6d71 100644
--- a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -133,15 +133,25 @@ public void mapBindingsWithEnumKey() {
                 "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
+                "  private volatile Provider<Map<PathEnum, Provider<Handler>>>",
+                "      mapOfPathEnumAndProviderOfHandlerProvider;",
+                "  private volatile Provider<Handler> provideAdminHandlerProvider;",
+                "  private volatile Provider<Handler> provideLoginHandlerProvider;",
                 "  private MapModuleOne mapModuleOne;",
                 "  private MapModuleTwo mapModuleTwo;",
                 "",
                 "  private Provider<Handler> getMapOfPathEnumAndProviderOfHandlerProvider() {",
-                "    return new SwitchingProvider<>(1);",
+                "    if (provideAdminHandlerProvider == null) {",
+                "      provideAdminHandlerProvider = new SwitchingProvider<>(1);",
+                "    }",
+                "    return provideAdminHandlerProvider;",
                 "  }",
                 "",
                 "  private Provider<Handler> getMapOfPathEnumAndProviderOfHandlerProvider2() {",
-                "    return new SwitchingProvider<>(2);",
+                "    if (provideLoginHandlerProvider == null) {",
+                "      provideLoginHandlerProvider = new SwitchingProvider<>(2);",
+                "    }",
+                "    return provideLoginHandlerProvider;",
                 "  }",
                 "",
                 "  private Map<PathEnum, Provider<Handler>>",
@@ -153,7 +163,10 @@ public void mapBindingsWithEnumKey() {
                 "",
                 "  @Override",
                 "  public Provider<Map<PathEnum, Provider<Handler>>> dispatcher() {",
-                "    return new SwitchingProvider<>(0);",
+                "    if (mapOfPathEnumAndProviderOfHandlerProvider == null) {",
+                "      mapOfPathEnumAndProviderOfHandlerProvider = new SwitchingProvider<>(0);",
+                "    }",
+                "    return mapOfPathEnumAndProviderOfHandlerProvider;",
                 "  }",
                 "",
                 "  private final class SwitchingProvider<T> implements Provider<T> {",
@@ -518,15 +531,25 @@ public void mapBindingsWithStringKey() {
                 "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
+                "  private volatile Provider<Map<String, Provider<Handler>>>",
+                "      mapOfStringAndProviderOfHandlerProvider;",
+                "  private volatile Provider<Handler> provideAdminHandlerProvider;",
+                "  private volatile Provider<Handler> provideLoginHandlerProvider;",
                 "  private MapModuleOne mapModuleOne;",
                 "  private MapModuleTwo mapModuleTwo;",
                 "",
                 "  private Provider<Handler> getMapOfStringAndProviderOfHandlerProvider() {",
-                "    return new SwitchingProvider<>(1);",
+                "    if (provideAdminHandlerProvider == null) {",
+                "      provideAdminHandlerProvider = new SwitchingProvider<>(1);",
+                "    }",
+                "    return provideAdminHandlerProvider;",
                 "  }",
                 "",
                 "  private Provider<Handler> getMapOfStringAndProviderOfHandlerProvider2() {",
-                "    return new SwitchingProvider<>(2);",
+                "    if (provideLoginHandlerProvider == null) {",
+                "      provideLoginHandlerProvider = new SwitchingProvider<>(2);",
+                "    }",
+                "    return provideLoginHandlerProvider;",
                 "  }",
                 "",
                 "  private Map<String, Provider<Handler>>",
@@ -538,7 +561,10 @@ public void mapBindingsWithStringKey() {
                 "",
                 "  @Override",
                 "  public Provider<Map<String, Provider<Handler>>> dispatcher() {",
-                "    return new SwitchingProvider<>(0);",
+                "    if (mapOfStringAndProviderOfHandlerProvider == null) {",
+                "      mapOfStringAndProviderOfHandlerProvider = new SwitchingProvider<>(0);",
+                "    }",
+                "    return mapOfStringAndProviderOfHandlerProvider;",
                 "  }",
                 "",
                 "  private final class SwitchingProvider<T> implements Provider<T> {",
@@ -696,17 +722,27 @@ public void mapBindingsWithWrappedKey() {
                 "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
+                "  private volatile Provider<Map<WrappedClassKey, Provider<Handler>>>",
+                "      mapOfWrappedClassKeyAndProviderOfHandlerProvider;",
+                "  private volatile Provider<Handler> provideAdminHandlerProvider;",
+                "  private volatile Provider<Handler> provideLoginHandlerProvider;",
                 "  private MapModuleOne mapModuleOne;",
                 "  private MapModuleTwo mapModuleTwo;",
                 "",
                 "  private Provider<Handler>",
                 "        getMapOfWrappedClassKeyAndProviderOfHandlerProvider() {",
-                "    return new SwitchingProvider<>(1);",
+                "    if (provideAdminHandlerProvider == null) {",
+                "      provideAdminHandlerProvider = new SwitchingProvider<>(1);",
+                "    }",
+                "    return provideAdminHandlerProvider;",
                 "  }",
                 "",
                 "  private Provider<Handler>",
                 "        getMapOfWrappedClassKeyAndProviderOfHandlerProvider2() {",
-                "    return new SwitchingProvider<>(2);",
+                "    if (provideLoginHandlerProvider == null) {",
+                "      provideLoginHandlerProvider = new SwitchingProvider<>(2);",
+                "    }",
+                "    return provideLoginHandlerProvider;",
                 "  }",
                 "",
                 "  private Map<WrappedClassKey, Provider<Handler>>",
@@ -726,7 +762,11 @@ public void mapBindingsWithWrappedKey() {
                 "",
                 "  @Override",
                 "  public Provider<Map<WrappedClassKey, Provider<Handler>>> dispatcher() {",
-                "    return new SwitchingProvider<>(0);",
+                "    if (mapOfWrappedClassKeyAndProviderOfHandlerProvider == null) {",
+                "      mapOfWrappedClassKeyAndProviderOfHandlerProvider =",
+                "          new SwitchingProvider<>(0);",
+                "    }",
+                "    return mapOfWrappedClassKeyAndProviderOfHandlerProvider;",
                 "  }",
                 "",
                 "  private final class SwitchingProvider<T> implements Provider<T> {",
@@ -888,6 +928,8 @@ public void mapBindingsWithNonProviderValue() {
                 "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
+                "  private volatile Provider<Map<PathEnum, Handler>>",
+                "      mapOfPathEnumAndHandlerProvider;",
                 "  private MapModuleOne mapModuleOne;",
                 "  private MapModuleTwo mapModuleTwo;",
                 "",
@@ -903,7 +945,10 @@ public void mapBindingsWithNonProviderValue() {
                 "",
                 "  @Override",
                 "  public Provider<Map<PathEnum, Handler>> dispatcher() {",
-                "    return new SwitchingProvider<>(0);",
+                "    if (mapOfPathEnumAndHandlerProvider == null) {",
+                "      mapOfPathEnumAndHandlerProvider = new SwitchingProvider<>(0);",
+                "    }",
+                "    return mapOfPathEnumAndHandlerProvider;",
                 "  }",
                 "",
                 "  private final class SwitchingProvider<T> implements Provider<T> {",
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
index c77161752..ea4321a91 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
@@ -100,20 +100,37 @@ public void mapBindings() {
                 "public final class DaggerTestComponent implements TestComponent {")
             .addLinesIn(
                 EXPERIMENTAL_ANDROID_MODE,
+                "  private volatile Provider<Integer> provideIntProvider;",
+                "  private volatile Provider<Long> provideLong0Provider;",
+                "  private volatile Provider<Long> provideLong1Provider;",
+                "  private volatile Provider<Long> provideLong2Provider;",
+                "",
                 "  private Provider<Integer> getMapOfIntegerAndProviderOfIntegerProvider() {",
-                "    return new SwitchingProvider<>(0);",
+                "    if (provideIntProvider == null) {",
+                "      provideIntProvider = new SwitchingProvider<>(0);",
+                "    }",
+                "    return provideIntProvider;",
                 "  }",
                 "",
                 "  private Provider<Long> getMapOfLongAndProviderOfLongProvider() {",
-                "    return new SwitchingProvider<>(1);",
+                "    if (provideLong0Provider == null) {",
+                "      provideLong0Provider = new SwitchingProvider<>(1);",
+                "    }",
+                "    return provideLong0Provider;",
                 "  }",
                 "",
                 "  private Provider<Long> getMapOfLongAndProviderOfLongProvider2() {",
-                "    return new SwitchingProvider<>(2);",
+                "    if (provideLong1Provider == null) {",
+                "      provideLong1Provider = new SwitchingProvider<>(2);",
+                "    }",
+                "    return provideLong1Provider;",
                 "  }",
                 "",
                 "  private Provider<Long> getMapOfLongAndProviderOfLongProvider3() {",
-                "    return new SwitchingProvider<>(3);",
+                "    if (provideLong2Provider == null) {",
+                "      provideLong2Provider = new SwitchingProvider<>(3);",
+                "    }",
+                "    return provideLong2Provider;",
                 "  }")
             .addLines(
                 "  @Override",
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
index 5de328055..b66dae78e 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
@@ -131,20 +131,37 @@ public void mapBindings() {
                 "public final class DaggerTestComponent implements TestComponent {")
             .addLinesIn(
                 EXPERIMENTAL_ANDROID_MODE,
+                "  private volatile Provider<Integer> provideIntProvider;",
+                "  private volatile Provider<Long> provideLong0Provider;",
+                "  private volatile Provider<Long> provideLong1Provider;",
+                "  private volatile Provider<Long> provideLong2Provider;",
+                "",
                 "  private Provider<Integer> getMapOfIntegerAndProviderOfIntegerProvider() {",
-                "    return new SwitchingProvider<>(0);",
+                "    if (provideIntProvider == null) {",
+                "      provideIntProvider = new SwitchingProvider<>(0);",
+                "    }",
+                "    return provideIntProvider;",
                 "  }",
                 "",
                 "  private Provider<Long> getMapOfLongAndProviderOfLongProvider() {",
-                "    return new SwitchingProvider<>(1);",
+                "    if (provideLong0Provider == null) {",
+                "      provideLong0Provider = new SwitchingProvider<>(1);",
+                "    }",
+                "    return provideLong0Provider;",
                 "  }",
                 "",
                 "  private Provider<Long> getMapOfLongAndProviderOfLongProvider2() {",
-                "    return new SwitchingProvider<>(2);",
+                "    if (provideLong1Provider == null) {",
+                "      provideLong1Provider = new SwitchingProvider<>(2);",
+                "    }",
+                "    return provideLong1Provider;",
                 "  }",
                 "",
                 "  private Provider<Long> getMapOfLongAndProviderOfLongProvider3() {",
-                "    return new SwitchingProvider<>(3);",
+                "    if (provideLong2Provider == null) {",
+                "      provideLong2Provider = new SwitchingProvider<>(3);",
+                "    }",
+                "    return provideLong2Provider;",
                 "  }")
             .addLines(
                 "  @Override",
@@ -203,20 +220,33 @@ public void mapBindings() {
                 "    return new SubImpl();",
                 "  }",
                 "",
-                "  private final class SubImpl implements Sub {",
-                "    private SubImpl() {}")
+                "  private final class SubImpl implements Sub {")
             .addLinesIn(
                 EXPERIMENTAL_ANDROID_MODE,
+                "    private volatile Provider<Long> provideLong3Provider;",
+                "    private volatile Provider<Long> provideLong4Provider;",
+                "    private volatile Provider<Long> provideLong5Provider;",
+                "    private SubImpl() {}",
+                "",
                 "    private Provider<Long> getMapOfLongAndProviderOfLongProvider() {",
-                "      return new SwitchingProvider<>(0);",
+                "    if (provideLong3Provider == null) {",
+                "      provideLong3Provider = new SwitchingProvider<>(0);",
+                "    }",
+                "    return provideLong3Provider;",
                 "    }",
                 "",
                 "    private Provider<Long> getMapOfLongAndProviderOfLongProvider2() {",
-                "      return new SwitchingProvider<>(1);",
+                "    if (provideLong4Provider == null) {",
+                "      provideLong4Provider = new SwitchingProvider<>(1);",
+                "    }",
+                "    return provideLong4Provider;",
                 "    }",
                 "",
                 "    private Provider<Long> getMapOfLongAndProviderOfLongProvider3() {",
-                "      return new SwitchingProvider<>(2);",
+                "    if (provideLong5Provider == null) {",
+                "      provideLong5Provider = new SwitchingProvider<>(2);",
+                "    }",
+                "    return provideLong5Provider;",
                 "    }")
             .addLines(
                 "    @Override",
diff --git a/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
index 860b640aa..c1f70fe1f 100644
--- a/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
@@ -118,8 +118,13 @@ public void inlinedOptionalBindings() {
                 "public final class DaggerTestComponent implements TestComponent {")
             .addLinesIn(
                 EXPERIMENTAL_ANDROID_MODE,
+                "  private volatile Provider<Maybe> provideMaybeProvider;",
+                "",
                 "  private Provider<Maybe> getMaybeProvider() {",
-                "    return new SwitchingProvider<>(0);",
+                "    if (provideMaybeProvider == null) {",
+                "      provideMaybeProvider = new SwitchingProvider<>(0);",
+                "    }",
+                "    return provideMaybeProvider;",
                 "  }")
             .addLines(
                 "  @Override",
diff --git a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
index 08a541f3b..ab260fbde 100644
--- a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -242,9 +242,14 @@ public void simpleComponent() {
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestClass_SimpleComponent",
                 "    implements TestClass.SimpleComponent {",
+                "  private volatile Provider<Executor> executorProvider;",
                 "  private volatile Object productionImplementationExecutor =",
                 "      new MemoizedSentinel();",
+                "  private volatile Provider<ProductionComponentMonitor> monitorProvider;",
                 "  private volatile Object productionComponentMonitor = new MemoizedSentinel();",
+                "  private volatile Provider<Set<ProductionComponentMonitor.Factory>>",
+                "      setOfFactoryProvider;",
+                "  private volatile Provider<TestClass.B> bProvider;",
                 "  private TestClass.BModule bModule;",
                 "  private Provider<TestClass.SimpleComponent> simpleComponentProvider;",
                 "  private Producer<TestClass.B> bProducer;",
@@ -279,12 +284,18 @@ public void simpleComponent() {
                 "  }",
                 "",
                 "  private Provider<Executor> getProductionImplementationExecutorProvider() {",
-                "    return new SwitchingProvider<>(0);",
+                "    if (executorProvider == null) {",
+                "      executorProvider = new SwitchingProvider<>(0);",
+                "    }",
+                "    return executorProvider;",
                 "  }",
                 "",
                 "  private Provider<Set<ProductionComponentMonitor.Factory>>",
                 "      getSetOfFactoryProvider() {",
-                "    return new SwitchingProvider<>(2);",
+                "    if (setOfFactoryProvider == null) {",
+                "      setOfFactoryProvider = new SwitchingProvider<>(2);",
+                "    }",
+                "    return setOfFactoryProvider;",
                 "  }",
                 "",
                 "  private ProductionComponentMonitor getProductionComponentMonitor() {",
@@ -306,7 +317,10 @@ public void simpleComponent() {
                 "",
                 "  private Provider<ProductionComponentMonitor>",
                 "      getProductionComponentMonitorProvider() {",
-                "    return new SwitchingProvider<>(1);",
+                "    if (monitorProvider == null) {",
+                "      monitorProvider = new SwitchingProvider<>(1);",
+                "    }",
+                "    return monitorProvider;",
                 "  }",
                 "",
                 "  private TestClass.B getB() {",
@@ -314,7 +328,10 @@ public void simpleComponent() {
                 "  }",
                 "",
                 "  private Provider<TestClass.B> getBProvider() {",
-                "    return new SwitchingProvider<>(3);",
+                "    if (bProvider == null) {",
+                "      bProvider = new SwitchingProvider<>(3);",
+                "    }",
+                "    return bProvider;",
                 "  }",
                 "",
                 "  @SuppressWarnings(\"unchecked\")",
