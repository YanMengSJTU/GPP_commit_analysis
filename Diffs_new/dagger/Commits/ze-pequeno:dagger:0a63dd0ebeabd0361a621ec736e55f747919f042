diff --git a/BUILD b/BUILD
index cfad792d0..b55d28e34 100644
--- a/BUILD
+++ b/BUILD
@@ -56,12 +56,12 @@ SHADE_RULES = ["rule com.google.auto.common.** dagger.shaded.auto.common.@1"]
 jarjar_library(
     name = "shaded_compiler",
     jars = [
-        "//java/dagger/internal/codegen:base",
         "//java/dagger/internal/codegen:binding",
         "//java/dagger/internal/codegen:binding_graph_validation",
         "//java/dagger/internal/codegen:processor",
         "//java/dagger/internal/codegen:validation",
         "//java/dagger/internal/codegen:writing",
+        "//java/dagger/internal/codegen/base",
         "//java/dagger/internal/codegen/compileroption",
         "//java/dagger/internal/codegen/javapoet",
         "//java/dagger/internal/codegen/langmodel",
@@ -77,12 +77,12 @@ jarjar_library(
 jarjar_library(
     name = "shaded_compiler_src",
     jars = [
-        "//java/dagger/internal/codegen:libbase-src.jar",
         "//java/dagger/internal/codegen:libbinding-src.jar",
         "//java/dagger/internal/codegen:libbinding_graph_validation-src.jar",
         "//java/dagger/internal/codegen:libprocessor-src.jar",
         "//java/dagger/internal/codegen:libvalidation-src.jar",
         "//java/dagger/internal/codegen:libwriting-src.jar",
+        "//java/dagger/internal/codegen/base:libbase-src.jar",
         "//java/dagger/internal/codegen/compileroption:libcompileroption-src.jar",
         "//java/dagger/internal/codegen/javapoet:libjavapoet-src.jar",
         "//java/dagger/internal/codegen/langmodel:liblangmodel-src.jar",
diff --git a/java/dagger/internal/codegen/AnnotationCreatorGenerator.java b/java/dagger/internal/codegen/AnnotationCreatorGenerator.java
index 273f5526f..079b59425 100644
--- a/java/dagger/internal/codegen/AnnotationCreatorGenerator.java
+++ b/java/dagger/internal/codegen/AnnotationCreatorGenerator.java
@@ -36,6 +36,7 @@
 import com.squareup.javapoet.MethodSpec;
 import com.squareup.javapoet.TypeName;
 import com.squareup.javapoet.TypeSpec;
+import dagger.internal.codegen.base.SourceFileGenerator;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import java.util.LinkedHashSet;
 import java.util.Optional;
@@ -87,17 +88,17 @@
   }
 
   @Override
-  ClassName nameGeneratedType(TypeElement annotationType) {
+  public ClassName nameGeneratedType(TypeElement annotationType) {
     return getAnnotationCreatorClassName(annotationType);
   }
 
   @Override
-  Element originatingElement(TypeElement annotationType) {
+  public Element originatingElement(TypeElement annotationType) {
     return annotationType;
   }
 
   @Override
-  Optional<TypeSpec.Builder> write(ClassName generatedTypeName, TypeElement annotationType) {
+  public Optional<TypeSpec.Builder> write(ClassName generatedTypeName, TypeElement annotationType) {
     TypeSpec.Builder annotationCreatorBuilder =
         classBuilder(generatedTypeName)
             .addModifiers(PUBLIC, FINAL)
diff --git a/java/dagger/internal/codegen/AnyBindingMethodValidator.java b/java/dagger/internal/codegen/AnyBindingMethodValidator.java
index 76a0c82a6..6baea0515 100644
--- a/java/dagger/internal/codegen/AnyBindingMethodValidator.java
+++ b/java/dagger/internal/codegen/AnyBindingMethodValidator.java
@@ -18,7 +18,7 @@
 
 import static com.google.auto.common.MoreElements.isAnnotationPresent;
 import static com.google.common.collect.Iterables.getOnlyElement;
-import static dagger.internal.codegen.Util.reentrantComputeIfAbsent;
+import static dagger.internal.codegen.base.Util.reentrantComputeIfAbsent;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableSet;
 import static dagger.internal.codegen.langmodel.DaggerElements.isAnyAnnotationPresent;
 import static java.util.stream.Collectors.joining;
diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index 32a0d9276..1edfc4f10 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -58,47 +58,17 @@ CODEGEN_SHARED_DEPS = [
 ]
 
 CODEGEN_DEPS = CODEGEN_SHARED_DEPS + [
+    ":package_info",
     "//java/dagger/internal/codegen/extension",
     "@google_bazel_common//third_party/java/guava",
 ]
 
-# Common types needed across all of the codegen package
 java_library(
-    name = "base",
-    srcs = [
-        "ClearableCache.java",
-        "ComponentAnnotation.java",
-        "ContributionType.java",
-        "DiagnosticFormatting.java",
-        "ElementFormatter.java",
-        "Formatter.java",
-        "FrameworkTypes.java",
-        "InjectionAnnotations.java",
-        "Keys.java",
-        "MapKeyAccessibility.java",
-        "MapType.java",
-        "ModuleAnnotation.java",
-        "MoreAnnotationMirrors.java",
-        "MoreAnnotationValues.java",
-        "MultibindingAnnotations.java",
-        "OptionalType.java",
-        "RequestKinds.java",
-        "Scopes.java",
-        "SetType.java",
-        "SimpleAnnotationMirror.java",
-        "SimpleTypeAnnotationValue.java",
-        "SourceFileGenerationException.java",  # Used in :writing and :processor
-        "SourceFileGenerator.java",  # Needed by InjectBindingRegistry in :binding and also :writing
-        "TypeCheckingProcessingStep.java",
-        "UniqueNameSet.java",
-        "Util.java",
-        "package-info.java",
-    ],
-    plugins = CODEGEN_PLUGINS,
+    name = "package_info",
+    srcs = ["package-info.java"],
     tags = ["maven:merged"],
-    deps = CODEGEN_DEPS + [
-        "//java/dagger/internal/codegen/javapoet",
-        "//java/dagger/internal/codegen/langmodel",
+    deps = [
+        "@google_bazel_common//third_party/java/error_prone:annotations",
     ],
 )
 
@@ -161,7 +131,7 @@ java_library(
     plugins = CODEGEN_PLUGINS,
     tags = ["maven:merged"],
     deps = CODEGEN_DEPS + [
-        ":base",
+        "//java/dagger/internal/codegen/base",
         "//java/dagger/internal/codegen/compileroption",
         "//java/dagger/internal/codegen/langmodel",
         "//java/dagger/internal/codegen/javapoet",
@@ -194,19 +164,23 @@ java_library(
         "MapKeyValidator.java",
         "MembersInjectionValidator.java",
         "ModuleValidator.java",
+        "MonitoringModuleGenerator.java",
+        "MonitoringModuleProcessingStep.java",
         "MultibindingAnnotationsProcessingStep.java",
         "MultibindsMethodValidator.java",
         "ProducesMethodValidator.java",
         "ProvidesMethodValidator.java",
+        "TypeCheckingProcessingStep.java",
         "Validation.java",
         "ValidationReport.java",
     ],
     plugins = CODEGEN_PLUGINS,
     tags = ["maven:merged"],
     deps = CODEGEN_DEPS + [
-        ":base",
         ":binding",
+        "//java/dagger/internal/codegen/base",
         "//java/dagger/internal/codegen/compileroption",
+        "//java/dagger/internal/codegen/javapoet",
         "//java/dagger/internal/codegen/langmodel",
     ],
 )
@@ -228,9 +202,9 @@ java_library(
     plugins = CODEGEN_PLUGINS,
     tags = ["maven:merged"],
     deps = CODEGEN_DEPS + [
-        ":base",
         ":binding",
         ":validation",
+        "//java/dagger/internal/codegen/base",
         "//java/dagger/internal/codegen/compileroption",
         "//java/dagger/internal/codegen/langmodel",
     ],
@@ -281,8 +255,6 @@ java_library(
         "ModuleConstructorProxyGenerator.java",
         "ModuleGenerator.java",
         "ModuleProxies.java",
-        "MonitoringModuleGenerator.java",
-        "MonitoringModuleProcessingStep.java",
         "MultibindingFactoryCreationExpression.java",
         "OptionalBindingExpression.java",
         "OptionalFactories.java",
@@ -310,8 +282,8 @@ java_library(
     plugins = CODEGEN_PLUGINS,
     tags = ["maven:merged"],
     deps = CODEGEN_DEPS + [
-        ":base",
         ":binding",
+        "//java/dagger/internal/codegen/base",
         "//java/dagger/internal/codegen/compileroption",
         "//java/dagger/internal/codegen/javapoet",
         "//java/dagger/internal/codegen/langmodel",
@@ -348,11 +320,11 @@ java_library(
     plugins = CODEGEN_PLUGINS,
     tags = ["maven_coordinates=com.google.dagger:dagger-compiler:" + POM_VERSION],
     deps = CODEGEN_DEPS + [
-        ":base",
         ":binding",
         ":binding_graph_validation",
         ":writing",
         ":validation",
+        "//java/dagger/internal/codegen/base",
         "//java/dagger/internal/codegen/compileroption",
         "//java/dagger/internal/codegen/javapoet",
         "//java/dagger/internal/codegen/langmodel",
@@ -367,11 +339,11 @@ pom_file(
     artifact_name = "Dagger Compiler",
     targets = [
         ":processor",
-        ":base",
         ":binding",
         ":binding_graph_validation",
         ":writing",
         ":validation",
+        "//java/dagger/internal/codegen/base",
         "//java/dagger/internal/codegen/javapoet",
     ],
 )
@@ -382,9 +354,9 @@ java_library(
     plugins = [":component-codegen"],
     visibility = ["//visibility:private"],
     deps = [
-        ":base",
         ":javac",
         "//java/dagger:core",
+        "//java/dagger/internal/codegen/base",
         "//java/dagger/internal/codegen/compileroption",
         "//java/dagger/internal/codegen/langmodel",
     ],
@@ -395,13 +367,14 @@ java_library(
     srcs = KYTHE_SRCS,
     plugins = [":component-codegen"],
     deps = [
-        ":base",
         ":binding",
         ":javac",
         ":javac-plugin-module",
         ":kythe_plugin",
+        ":package_info",
         ":processor",
         "//java/dagger:core",
+        "//java/dagger/internal/codegen/base",
         "//java/dagger/internal/codegen/langmodel",
         "//java/dagger/model",
         "//java/dagger/producers",
@@ -441,6 +414,7 @@ java_library(
     javacopts = DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
     plugins = CODEGEN_PLUGINS,
     deps = CODEGEN_DEPS + [
+        "//java/dagger/internal/codegen/base",
         "//java/dagger/internal/codegen/compileroption",
         "//java/dagger/internal/codegen/langmodel",
         "//java/dagger/internal/codegen/javapoet",
@@ -468,12 +442,13 @@ java_library(
     srcs = STATISTICS_COLLECTOR_SRCS,
     plugins = [":component-codegen"],
     deps = [
-        ":base",
         ":binding",
         ":javac",
         ":javac-plugin-module",
+        ":package_info",
         ":processor",
         "//java/dagger:core",
+        "//java/dagger/internal/codegen/base",
         "//java/dagger/model",
         "@google_bazel_common//third_party/java/error_prone:check_api",
     ],
diff --git a/java/dagger/internal/codegen/BindingDeclarationFormatter.java b/java/dagger/internal/codegen/BindingDeclarationFormatter.java
index d8501651a..1bbc61aee 100644
--- a/java/dagger/internal/codegen/BindingDeclarationFormatter.java
+++ b/java/dagger/internal/codegen/BindingDeclarationFormatter.java
@@ -17,8 +17,8 @@
 package dagger.internal.codegen;
 
 import static com.google.common.collect.Sets.immutableEnumSet;
-import static dagger.internal.codegen.DiagnosticFormatting.stripCommonTypePrefixes;
-import static dagger.internal.codegen.ElementFormatter.elementToString;
+import static dagger.internal.codegen.base.DiagnosticFormatting.stripCommonTypePrefixes;
+import static dagger.internal.codegen.base.ElementFormatter.elementToString;
 import static javax.lang.model.element.ElementKind.PARAMETER;
 import static javax.lang.model.type.TypeKind.DECLARED;
 import static javax.lang.model.type.TypeKind.EXECUTABLE;
@@ -27,6 +27,7 @@
 import com.google.auto.common.MoreTypes;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
+import dagger.internal.codegen.base.Formatter;
 import javax.inject.Inject;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
diff --git a/java/dagger/internal/codegen/BindingElementValidator.java b/java/dagger/internal/codegen/BindingElementValidator.java
index 00519123d..892f683e6 100644
--- a/java/dagger/internal/codegen/BindingElementValidator.java
+++ b/java/dagger/internal/codegen/BindingElementValidator.java
@@ -17,10 +17,10 @@
 package dagger.internal.codegen;
 
 import static com.google.common.base.Verify.verifyNotNull;
-import static dagger.internal.codegen.InjectionAnnotations.getQualifiers;
 import static dagger.internal.codegen.MapKeys.getMapKeys;
-import static dagger.internal.codegen.Scopes.scopesOf;
-import static dagger.internal.codegen.Util.reentrantComputeIfAbsent;
+import static dagger.internal.codegen.base.InjectionAnnotations.getQualifiers;
+import static dagger.internal.codegen.base.Scopes.scopesOf;
+import static dagger.internal.codegen.base.Util.reentrantComputeIfAbsent;
 import static dagger.internal.codegen.langmodel.DaggerElements.getAnnotationMirror;
 import static javax.lang.model.type.TypeKind.ARRAY;
 import static javax.lang.model.type.TypeKind.DECLARED;
@@ -31,6 +31,10 @@
 import com.google.errorprone.annotations.FormatMethod;
 import dagger.MapKey;
 import dagger.Provides;
+import dagger.internal.codegen.base.ContributionType;
+import dagger.internal.codegen.base.FrameworkTypes;
+import dagger.internal.codegen.base.MultibindingAnnotations;
+import dagger.internal.codegen.base.SetType;
 import dagger.model.Key;
 import dagger.model.Scope;
 import dagger.multibindings.ElementsIntoSet;
diff --git a/java/dagger/internal/codegen/BindingFactory.java b/java/dagger/internal/codegen/BindingFactory.java
index 3397cb1a6..58f5af824 100644
--- a/java/dagger/internal/codegen/BindingFactory.java
+++ b/java/dagger/internal/codegen/BindingFactory.java
@@ -26,10 +26,10 @@
 import static dagger.internal.codegen.ComponentDescriptor.isComponentProductionMethod;
 import static dagger.internal.codegen.ConfigurationAnnotations.getNullableType;
 import static dagger.internal.codegen.ContributionBinding.bindingKindForMultibindingKey;
-import static dagger.internal.codegen.InjectionAnnotations.getQualifier;
 import static dagger.internal.codegen.MapKeys.getMapKey;
-import static dagger.internal.codegen.MoreAnnotationMirrors.wrapOptionalInEquivalence;
-import static dagger.internal.codegen.Scopes.uniqueScopeOf;
+import static dagger.internal.codegen.base.InjectionAnnotations.getQualifier;
+import static dagger.internal.codegen.base.MoreAnnotationMirrors.wrapOptionalInEquivalence;
+import static dagger.internal.codegen.base.Scopes.uniqueScopeOf;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableSet;
 import static dagger.model.BindingKind.BOUND_INSTANCE;
 import static dagger.model.BindingKind.COMPONENT;
@@ -54,6 +54,9 @@
 import dagger.Module;
 import dagger.internal.codegen.MembersInjectionBinding.InjectionSite;
 import dagger.internal.codegen.ProductionBinding.ProductionKind;
+import dagger.internal.codegen.base.ContributionType;
+import dagger.internal.codegen.base.MapType;
+import dagger.internal.codegen.base.SetType;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import dagger.model.DependencyRequest;
diff --git a/java/dagger/internal/codegen/BindingGraphFactory.java b/java/dagger/internal/codegen/BindingGraphFactory.java
index 5bcdf1392..506157bbd 100644
--- a/java/dagger/internal/codegen/BindingGraphFactory.java
+++ b/java/dagger/internal/codegen/BindingGraphFactory.java
@@ -22,9 +22,9 @@
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.collect.Iterables.isEmpty;
 import static dagger.internal.codegen.ComponentDescriptor.isComponentContributionMethod;
-import static dagger.internal.codegen.RequestKinds.getRequestKind;
 import static dagger.internal.codegen.SourceFiles.generatedMonitoringModuleName;
-import static dagger.internal.codegen.Util.reentrantComputeIfAbsent;
+import static dagger.internal.codegen.base.RequestKinds.getRequestKind;
+import static dagger.internal.codegen.base.Util.reentrantComputeIfAbsent;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableSet;
 import static dagger.model.BindingKind.DELEGATE;
 import static dagger.model.BindingKind.INJECTION;
@@ -44,6 +44,9 @@
 import com.google.common.collect.Sets;
 import dagger.MembersInjector;
 import dagger.Reusable;
+import dagger.internal.codegen.base.ClearableCache;
+import dagger.internal.codegen.base.MapType;
+import dagger.internal.codegen.base.OptionalType;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.model.DependencyRequest;
 import dagger.model.Key;
diff --git a/java/dagger/internal/codegen/BindingGraphStatisticsCollector.java b/java/dagger/internal/codegen/BindingGraphStatisticsCollector.java
index 3ea336437..751877c04 100644
--- a/java/dagger/internal/codegen/BindingGraphStatisticsCollector.java
+++ b/java/dagger/internal/codegen/BindingGraphStatisticsCollector.java
@@ -17,7 +17,7 @@
 package dagger.internal.codegen;
 
 import static com.google.errorprone.util.ASTHelpers.getSymbol;
-import static dagger.internal.codegen.ComponentAnnotation.rootComponentAnnotation;
+import static dagger.internal.codegen.base.ComponentAnnotation.rootComponentAnnotation;
 
 import com.google.errorprone.VisitorState;
 import com.google.errorprone.bugpatterns.BugChecker;
diff --git a/java/dagger/internal/codegen/BindingRequest.java b/java/dagger/internal/codegen/BindingRequest.java
index 2c1535557..52e398e5d 100644
--- a/java/dagger/internal/codegen/BindingRequest.java
+++ b/java/dagger/internal/codegen/BindingRequest.java
@@ -16,7 +16,7 @@
 
 package dagger.internal.codegen;
 
-import static dagger.internal.codegen.RequestKinds.requestType;
+import static dagger.internal.codegen.base.RequestKinds.requestType;
 
 import com.google.auto.value.AutoValue;
 import dagger.internal.codegen.langmodel.DaggerTypes;
diff --git a/java/dagger/internal/codegen/BindsInstanceMethodValidator.java b/java/dagger/internal/codegen/BindsInstanceMethodValidator.java
index 1a491c76e..9d5fa4865 100644
--- a/java/dagger/internal/codegen/BindsInstanceMethodValidator.java
+++ b/java/dagger/internal/codegen/BindsInstanceMethodValidator.java
@@ -17,11 +17,12 @@
 package dagger.internal.codegen;
 
 import static com.google.common.collect.Iterables.getOnlyElement;
-import static dagger.internal.codegen.ComponentAnnotation.anyComponentAnnotation;
-import static dagger.internal.codegen.ModuleAnnotation.moduleAnnotation;
+import static dagger.internal.codegen.base.ComponentAnnotation.anyComponentAnnotation;
+import static dagger.internal.codegen.base.ModuleAnnotation.moduleAnnotation;
 import static javax.lang.model.element.Modifier.ABSTRACT;
 
 import com.google.auto.common.MoreElements;
+import dagger.internal.codegen.base.ModuleAnnotation;
 import java.util.List;
 import java.util.Optional;
 import javax.inject.Inject;
diff --git a/java/dagger/internal/codegen/BindsMethodValidator.java b/java/dagger/internal/codegen/BindsMethodValidator.java
index 2f746c240..540ea70e9 100644
--- a/java/dagger/internal/codegen/BindsMethodValidator.java
+++ b/java/dagger/internal/codegen/BindsMethodValidator.java
@@ -25,6 +25,8 @@
 import com.google.common.collect.ImmutableSet;
 import dagger.Binds;
 import dagger.Module;
+import dagger.internal.codegen.base.ContributionType;
+import dagger.internal.codegen.base.SetType;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import dagger.producers.ProducerModule;
diff --git a/java/dagger/internal/codegen/BindsOptionalOfMethodValidator.java b/java/dagger/internal/codegen/BindsOptionalOfMethodValidator.java
index e1c9d735f..aaf8d074a 100644
--- a/java/dagger/internal/codegen/BindsOptionalOfMethodValidator.java
+++ b/java/dagger/internal/codegen/BindsOptionalOfMethodValidator.java
@@ -20,9 +20,9 @@
 import static dagger.internal.codegen.BindingElementValidator.AllowsScoping.NO_SCOPING;
 import static dagger.internal.codegen.BindingMethodValidator.Abstractness.MUST_BE_ABSTRACT;
 import static dagger.internal.codegen.BindingMethodValidator.ExceptionSuperclass.NO_EXCEPTIONS;
-import static dagger.internal.codegen.InjectionAnnotations.getQualifiers;
-import static dagger.internal.codegen.InjectionAnnotations.injectedConstructors;
-import static dagger.internal.codegen.Keys.isValidImplicitProvisionKey;
+import static dagger.internal.codegen.base.InjectionAnnotations.getQualifiers;
+import static dagger.internal.codegen.base.InjectionAnnotations.injectedConstructors;
+import static dagger.internal.codegen.base.Keys.isValidImplicitProvisionKey;
 
 import com.google.auto.common.MoreElements;
 import com.google.auto.common.MoreTypes;
diff --git a/java/dagger/internal/codegen/BindsTypeChecker.java b/java/dagger/internal/codegen/BindsTypeChecker.java
index acecc9e23..e69c1fd13 100644
--- a/java/dagger/internal/codegen/BindsTypeChecker.java
+++ b/java/dagger/internal/codegen/BindsTypeChecker.java
@@ -21,6 +21,7 @@
 import com.google.auto.common.MoreElements;
 import com.google.auto.common.MoreTypes;
 import com.google.common.collect.ImmutableList;
+import dagger.internal.codegen.base.ContributionType;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import java.util.Map;
diff --git a/java/dagger/internal/codegen/ChildFactoryMethodEdgeImpl.java b/java/dagger/internal/codegen/ChildFactoryMethodEdgeImpl.java
index a5e021942..b4dc5c3ea 100644
--- a/java/dagger/internal/codegen/ChildFactoryMethodEdgeImpl.java
+++ b/java/dagger/internal/codegen/ChildFactoryMethodEdgeImpl.java
@@ -16,7 +16,7 @@
 
 package dagger.internal.codegen;
 
-import static dagger.internal.codegen.ElementFormatter.elementToString;
+import static dagger.internal.codegen.base.ElementFormatter.elementToString;
 
 import dagger.model.BindingGraph.ChildFactoryMethodEdge;
 import javax.lang.model.element.ExecutableElement;
diff --git a/java/dagger/internal/codegen/ComponentCreatorAnnotation.java b/java/dagger/internal/codegen/ComponentCreatorAnnotation.java
index 057b08536..a45cf50bf 100644
--- a/java/dagger/internal/codegen/ComponentCreatorAnnotation.java
+++ b/java/dagger/internal/codegen/ComponentCreatorAnnotation.java
@@ -25,6 +25,7 @@
 import com.google.common.collect.ImmutableSet;
 import dagger.Component;
 import dagger.Subcomponent;
+import dagger.internal.codegen.base.ComponentAnnotation;
 import dagger.producers.ProductionComponent;
 import dagger.producers.ProductionSubcomponent;
 import java.lang.annotation.Annotation;
diff --git a/java/dagger/internal/codegen/ComponentCreatorDescriptor.java b/java/dagger/internal/codegen/ComponentCreatorDescriptor.java
index 3874a5a3d..79861b2bf 100644
--- a/java/dagger/internal/codegen/ComponentCreatorDescriptor.java
+++ b/java/dagger/internal/codegen/ComponentCreatorDescriptor.java
@@ -21,7 +21,7 @@
 import static com.google.common.base.Verify.verify;
 import static com.google.common.collect.Iterables.getOnlyElement;
 import static dagger.internal.codegen.ComponentCreatorAnnotation.getCreatorAnnotations;
-import static dagger.internal.codegen.ModuleAnnotation.moduleAnnotation;
+import static dagger.internal.codegen.base.ModuleAnnotation.moduleAnnotation;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableSet;
 
 import com.google.auto.common.MoreTypes;
diff --git a/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java b/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java
index 32587ac73..868bc9a24 100644
--- a/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java
+++ b/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java
@@ -44,6 +44,7 @@
 import com.squareup.javapoet.TypeSpec;
 import dagger.internal.Preconditions;
 import dagger.internal.codegen.ComponentRequirement.NullPolicy;
+import dagger.internal.codegen.base.UniqueNameSet;
 import dagger.internal.codegen.javapoet.TypeNames;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
diff --git a/java/dagger/internal/codegen/ComponentDescriptor.java b/java/dagger/internal/codegen/ComponentDescriptor.java
index 5d99e12c2..080f7cb92 100644
--- a/java/dagger/internal/codegen/ComponentDescriptor.java
+++ b/java/dagger/internal/codegen/ComponentDescriptor.java
@@ -38,6 +38,7 @@
 import dagger.Component;
 import dagger.Module;
 import dagger.Subcomponent;
+import dagger.internal.codegen.base.ComponentAnnotation;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import dagger.model.DependencyRequest;
diff --git a/java/dagger/internal/codegen/ComponentDescriptorFactory.java b/java/dagger/internal/codegen/ComponentDescriptorFactory.java
index c14eaa633..873b21b69 100644
--- a/java/dagger/internal/codegen/ComponentDescriptorFactory.java
+++ b/java/dagger/internal/codegen/ComponentDescriptorFactory.java
@@ -20,14 +20,14 @@
 import static com.google.auto.common.MoreTypes.asTypeElement;
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.collect.Iterables.getOnlyElement;
-import static dagger.internal.codegen.ComponentAnnotation.subcomponentAnnotation;
 import static dagger.internal.codegen.ComponentCreatorAnnotation.creatorAnnotationsFor;
 import static dagger.internal.codegen.ComponentDescriptor.isComponentContributionMethod;
 import static dagger.internal.codegen.ConfigurationAnnotations.enclosedAnnotatedTypes;
 import static dagger.internal.codegen.ConfigurationAnnotations.isSubcomponentCreator;
-import static dagger.internal.codegen.InjectionAnnotations.getQualifier;
-import static dagger.internal.codegen.Scopes.productionScope;
-import static dagger.internal.codegen.Scopes.scopesOf;
+import static dagger.internal.codegen.base.ComponentAnnotation.subcomponentAnnotation;
+import static dagger.internal.codegen.base.InjectionAnnotations.getQualifier;
+import static dagger.internal.codegen.base.Scopes.productionScope;
+import static dagger.internal.codegen.base.Scopes.scopesOf;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableSet;
 import static javax.lang.model.type.TypeKind.DECLARED;
 import static javax.lang.model.type.TypeKind.VOID;
@@ -38,6 +38,8 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
+import dagger.internal.codegen.base.ComponentAnnotation;
+import dagger.internal.codegen.base.ModuleAnnotation;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import dagger.model.Scope;
diff --git a/java/dagger/internal/codegen/ComponentDescriptorValidator.java b/java/dagger/internal/codegen/ComponentDescriptorValidator.java
index 74dc17037..adb95ccd5 100644
--- a/java/dagger/internal/codegen/ComponentDescriptorValidator.java
+++ b/java/dagger/internal/codegen/ComponentDescriptorValidator.java
@@ -21,13 +21,13 @@
 import static com.google.common.base.Predicates.in;
 import static com.google.common.collect.Collections2.transform;
 import static com.google.common.collect.Iterables.getOnlyElement;
-import static dagger.internal.codegen.ComponentAnnotation.rootComponentAnnotation;
-import static dagger.internal.codegen.DiagnosticFormatting.stripCommonTypePrefixes;
-import static dagger.internal.codegen.Formatter.INDENT;
-import static dagger.internal.codegen.Scopes.getReadableSource;
-import static dagger.internal.codegen.Scopes.scopesOf;
-import static dagger.internal.codegen.Scopes.singletonScope;
-import static dagger.internal.codegen.Util.reentrantComputeIfAbsent;
+import static dagger.internal.codegen.base.ComponentAnnotation.rootComponentAnnotation;
+import static dagger.internal.codegen.base.DiagnosticFormatting.stripCommonTypePrefixes;
+import static dagger.internal.codegen.base.Formatter.INDENT;
+import static dagger.internal.codegen.base.Scopes.getReadableSource;
+import static dagger.internal.codegen.base.Scopes.scopesOf;
+import static dagger.internal.codegen.base.Scopes.singletonScope;
+import static dagger.internal.codegen.base.Util.reentrantComputeIfAbsent;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableSet;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableSetMultimap;
 import static java.util.stream.Collectors.joining;
diff --git a/java/dagger/internal/codegen/ComponentGenerator.java b/java/dagger/internal/codegen/ComponentGenerator.java
index 330ec2d03..2e009bc35 100644
--- a/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/java/dagger/internal/codegen/ComponentGenerator.java
@@ -22,6 +22,7 @@
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.TypeSpec;
 import dagger.Component;
+import dagger.internal.codegen.base.SourceFileGenerator;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import java.util.Optional;
 import javax.annotation.processing.Filer;
@@ -47,7 +48,7 @@
   }
 
   @Override
-  ClassName nameGeneratedType(BindingGraph input) {
+  public ClassName nameGeneratedType(BindingGraph input) {
     return componentName(input.componentTypeElement());
   }
 
@@ -57,12 +58,12 @@ static ClassName componentName(TypeElement componentDefinitionType) {
   }
 
   @Override
-  Element originatingElement(BindingGraph input) {
+  public Element originatingElement(BindingGraph input) {
     return input.componentTypeElement();
   }
 
   @Override
-  Optional<TypeSpec.Builder> write(ClassName componentName, BindingGraph bindingGraph) {
+  public Optional<TypeSpec.Builder> write(ClassName componentName, BindingGraph bindingGraph) {
     ComponentImplementation componentImplementation =
         componentImplementationFactory.createComponentImplementation(bindingGraph);
     verify(componentImplementation.name().equals(componentName));
diff --git a/java/dagger/internal/codegen/ComponentHierarchyValidator.java b/java/dagger/internal/codegen/ComponentHierarchyValidator.java
index 9c6c2631b..4ba407fbe 100644
--- a/java/dagger/internal/codegen/ComponentHierarchyValidator.java
+++ b/java/dagger/internal/codegen/ComponentHierarchyValidator.java
@@ -20,8 +20,8 @@
 import static com.google.common.base.Predicates.and;
 import static com.google.common.base.Predicates.in;
 import static com.google.common.base.Predicates.not;
-import static dagger.internal.codegen.Scopes.getReadableSource;
-import static dagger.internal.codegen.Scopes.uniqueScopeOf;
+import static dagger.internal.codegen.base.Scopes.getReadableSource;
+import static dagger.internal.codegen.base.Scopes.uniqueScopeOf;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableSet;
 
 import com.google.auto.common.MoreTypes;
diff --git a/java/dagger/internal/codegen/ComponentHjarProcessingStep.java b/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
index 47857ca69..2e676c6d2 100644
--- a/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
+++ b/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
@@ -21,9 +21,9 @@
 import static com.google.common.base.CaseFormat.UPPER_CAMEL;
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.squareup.javapoet.MethodSpec.constructorBuilder;
-import static dagger.internal.codegen.ComponentAnnotation.rootComponentAnnotations;
 import static dagger.internal.codegen.ComponentCreatorKind.BUILDER;
 import static dagger.internal.codegen.ComponentGenerator.componentName;
+import static dagger.internal.codegen.base.ComponentAnnotation.rootComponentAnnotations;
 import static dagger.internal.codegen.javapoet.TypeSpecs.addSupertype;
 import static javax.lang.model.element.Modifier.ABSTRACT;
 import static javax.lang.model.element.Modifier.FINAL;
@@ -42,6 +42,7 @@
 import com.squareup.javapoet.TypeSpec;
 import dagger.BindsInstance;
 import dagger.internal.codegen.ComponentValidator.ComponentValidationReport;
+import dagger.internal.codegen.base.SourceFileGenerator;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import dagger.producers.internal.CancellationListener;
@@ -127,17 +128,17 @@ protected void process(
     }
 
     @Override
-    ClassName nameGeneratedType(ComponentDescriptor input) {
+    public ClassName nameGeneratedType(ComponentDescriptor input) {
       return componentName(input.typeElement());
     }
 
     @Override
-    Element originatingElement(ComponentDescriptor input) {
+    public Element originatingElement(ComponentDescriptor input) {
       return input.typeElement();
     }
 
     @Override
-    Optional<TypeSpec.Builder> write(
+    public Optional<TypeSpec.Builder> write(
         ClassName generatedTypeName, ComponentDescriptor componentDescriptor) {
       TypeSpec.Builder generatedComponent =
           TypeSpec.classBuilder(generatedTypeName)
diff --git a/java/dagger/internal/codegen/ComponentImplementation.java b/java/dagger/internal/codegen/ComponentImplementation.java
index c5bc1230e..222f14673 100644
--- a/java/dagger/internal/codegen/ComponentImplementation.java
+++ b/java/dagger/internal/codegen/ComponentImplementation.java
@@ -40,6 +40,7 @@
 import com.squareup.javapoet.FieldSpec;
 import com.squareup.javapoet.MethodSpec;
 import com.squareup.javapoet.TypeSpec;
+import dagger.internal.codegen.base.UniqueNameSet;
 import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.internal.codegen.javapoet.TypeSpecs;
 import dagger.model.Key;
diff --git a/java/dagger/internal/codegen/ComponentImplementationFactory.java b/java/dagger/internal/codegen/ComponentImplementationFactory.java
index 3d3289bb4..a0367f1a2 100644
--- a/java/dagger/internal/codegen/ComponentImplementationFactory.java
+++ b/java/dagger/internal/codegen/ComponentImplementationFactory.java
@@ -17,8 +17,9 @@
 package dagger.internal.codegen;
 
 import static dagger.internal.codegen.ComponentGenerator.componentName;
-import static dagger.internal.codegen.Util.reentrantComputeIfAbsent;
+import static dagger.internal.codegen.base.Util.reentrantComputeIfAbsent;
 
+import dagger.internal.codegen.base.ClearableCache;
 import dagger.internal.codegen.compileroption.CompilerOptions;
 import java.util.HashMap;
 import java.util.Map;
diff --git a/java/dagger/internal/codegen/ComponentProcessingStep.java b/java/dagger/internal/codegen/ComponentProcessingStep.java
index 4e593aebe..de06e32c9 100644
--- a/java/dagger/internal/codegen/ComponentProcessingStep.java
+++ b/java/dagger/internal/codegen/ComponentProcessingStep.java
@@ -17,12 +17,12 @@
 package dagger.internal.codegen;
 
 import static com.google.common.collect.Sets.union;
-import static dagger.internal.codegen.ComponentAnnotation.allComponentAnnotations;
-import static dagger.internal.codegen.ComponentAnnotation.rootComponentAnnotations;
-import static dagger.internal.codegen.ComponentAnnotation.subcomponentAnnotations;
 import static dagger.internal.codegen.ComponentCreatorAnnotation.allCreatorAnnotations;
 import static dagger.internal.codegen.ComponentCreatorAnnotation.rootComponentCreatorAnnotations;
 import static dagger.internal.codegen.ComponentCreatorAnnotation.subcomponentCreatorAnnotations;
+import static dagger.internal.codegen.base.ComponentAnnotation.allComponentAnnotations;
+import static dagger.internal.codegen.base.ComponentAnnotation.rootComponentAnnotations;
+import static dagger.internal.codegen.base.ComponentAnnotation.subcomponentAnnotations;
 import static dagger.internal.codegen.compileroption.ValidationType.NONE;
 import static java.util.Collections.disjoint;
 
@@ -35,6 +35,7 @@
 import com.google.common.collect.SetMultimap;
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import dagger.internal.codegen.ComponentValidator.ComponentValidationReport;
+import dagger.internal.codegen.base.SourceFileGenerator;
 import dagger.internal.codegen.compileroption.CompilerOptions;
 import java.lang.annotation.Annotation;
 import java.util.HashMap;
diff --git a/java/dagger/internal/codegen/ComponentProcessor.java b/java/dagger/internal/codegen/ComponentProcessor.java
index cc4e97f5c..6196b1ee9 100644
--- a/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/java/dagger/internal/codegen/ComponentProcessor.java
@@ -32,6 +32,9 @@
 import dagger.Module;
 import dagger.Provides;
 import dagger.internal.codegen.SpiModule.TestingPlugins;
+import dagger.internal.codegen.base.ClearableCache;
+import dagger.internal.codegen.base.SourceFileGenerationException;
+import dagger.internal.codegen.base.SourceFileGenerator;
 import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions;
 import dagger.internal.codegen.statistics.DaggerStatisticsCollectingProcessingStep;
@@ -59,7 +62,8 @@
   private final Optional<ImmutableSet<BindingGraphPlugin>> testingPlugins;
 
   @Inject InjectBindingRegistry injectBindingRegistry;
-  @Inject SourceFileGenerator<ProvisionBinding> factoryGenerator;
+  @Inject
+  SourceFileGenerator<ProvisionBinding> factoryGenerator;
   @Inject SourceFileGenerator<MembersInjectionBinding> membersInjectorGenerator;
   @Inject ImmutableList<ProcessingStep> processingSteps;
   @Inject BindingGraphPlugins bindingGraphPlugins;
diff --git a/java/dagger/internal/codegen/ComponentRequirement.java b/java/dagger/internal/codegen/ComponentRequirement.java
index 71e2d586e..847c69959 100644
--- a/java/dagger/internal/codegen/ComponentRequirement.java
+++ b/java/dagger/internal/codegen/ComponentRequirement.java
@@ -20,7 +20,7 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
 import static dagger.internal.codegen.SourceFiles.simpleVariableName;
-import static dagger.internal.codegen.Util.componentCanMakeNewInstances;
+import static dagger.internal.codegen.base.Util.componentCanMakeNewInstances;
 import static dagger.internal.codegen.langmodel.DaggerElements.isAnyAnnotationPresent;
 import static javax.lang.model.element.Modifier.ABSTRACT;
 import static javax.lang.model.element.Modifier.STATIC;
diff --git a/java/dagger/internal/codegen/ComponentValidator.java b/java/dagger/internal/codegen/ComponentValidator.java
index ced38ceea..cd0335ca5 100644
--- a/java/dagger/internal/codegen/ComponentValidator.java
+++ b/java/dagger/internal/codegen/ComponentValidator.java
@@ -25,7 +25,6 @@
 import static com.google.common.collect.Iterables.getOnlyElement;
 import static com.google.common.collect.Multimaps.asMap;
 import static com.google.common.collect.Sets.intersection;
-import static dagger.internal.codegen.ComponentAnnotation.anyComponentAnnotation;
 import static dagger.internal.codegen.ComponentCreatorAnnotation.creatorAnnotationsFor;
 import static dagger.internal.codegen.ComponentCreatorAnnotation.productionCreatorAnnotations;
 import static dagger.internal.codegen.ComponentCreatorAnnotation.subcomponentCreatorAnnotations;
@@ -34,7 +33,8 @@
 import static dagger.internal.codegen.ConfigurationAnnotations.getTransitiveModules;
 import static dagger.internal.codegen.ErrorMessages.ComponentCreatorMessages.builderMethodRequiresNoArgs;
 import static dagger.internal.codegen.ErrorMessages.ComponentCreatorMessages.moreThanOneRefToSubcomponent;
-import static dagger.internal.codegen.ModuleAnnotation.moduleAnnotation;
+import static dagger.internal.codegen.base.ComponentAnnotation.anyComponentAnnotation;
+import static dagger.internal.codegen.base.ModuleAnnotation.moduleAnnotation;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableList;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableSet;
 import static dagger.internal.codegen.langmodel.DaggerElements.getAnnotationMirror;
@@ -57,6 +57,7 @@
 import com.google.common.collect.Sets;
 import dagger.Component;
 import dagger.Reusable;
+import dagger.internal.codegen.base.ComponentAnnotation;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import dagger.model.DependencyRequest;
diff --git a/java/dagger/internal/codegen/ConfigurationAnnotations.java b/java/dagger/internal/codegen/ConfigurationAnnotations.java
index a9bba2977..177a36eb0 100644
--- a/java/dagger/internal/codegen/ConfigurationAnnotations.java
+++ b/java/dagger/internal/codegen/ConfigurationAnnotations.java
@@ -19,10 +19,10 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.collect.Iterables.consumingIterable;
-import static dagger.internal.codegen.ComponentAnnotation.subcomponentAnnotation;
 import static dagger.internal.codegen.ComponentCreatorAnnotation.subcomponentCreatorAnnotations;
-import static dagger.internal.codegen.ModuleAnnotation.moduleAnnotation;
-import static dagger.internal.codegen.MoreAnnotationMirrors.getTypeListValue;
+import static dagger.internal.codegen.base.ComponentAnnotation.subcomponentAnnotation;
+import static dagger.internal.codegen.base.ModuleAnnotation.moduleAnnotation;
+import static dagger.internal.codegen.base.MoreAnnotationMirrors.getTypeListValue;
 import static dagger.internal.codegen.langmodel.DaggerElements.isAnyAnnotationPresent;
 import static javax.lang.model.util.ElementFilter.typesIn;
 
diff --git a/java/dagger/internal/codegen/ContributionBinding.java b/java/dagger/internal/codegen/ContributionBinding.java
index 1a29d0062..325369583 100644
--- a/java/dagger/internal/codegen/ContributionBinding.java
+++ b/java/dagger/internal/codegen/ContributionBinding.java
@@ -19,14 +19,17 @@
 import static dagger.internal.codegen.ContributionBinding.FactoryCreationStrategy.CLASS_CONSTRUCTOR;
 import static dagger.internal.codegen.ContributionBinding.FactoryCreationStrategy.DELEGATE;
 import static dagger.internal.codegen.ContributionBinding.FactoryCreationStrategy.SINGLETON_INSTANCE;
-import static dagger.internal.codegen.MoreAnnotationMirrors.unwrapOptionalEquivalence;
+import static dagger.internal.codegen.base.MoreAnnotationMirrors.unwrapOptionalEquivalence;
 import static java.util.Arrays.asList;
 
 import com.google.auto.common.MoreElements;
 import com.google.common.base.Equivalence;
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import com.google.errorprone.annotations.CheckReturnValue;
-import dagger.internal.codegen.ContributionType.HasContributionType;
+import dagger.internal.codegen.base.ContributionType;
+import dagger.internal.codegen.base.ContributionType.HasContributionType;
+import dagger.internal.codegen.base.MapType;
+import dagger.internal.codegen.base.SetType;
 import dagger.model.BindingKind;
 import dagger.model.DependencyRequest;
 import dagger.model.Key;
diff --git a/java/dagger/internal/codegen/DelegateBindingExpression.java b/java/dagger/internal/codegen/DelegateBindingExpression.java
index 6a42927ea..bf48db3e6 100644
--- a/java/dagger/internal/codegen/DelegateBindingExpression.java
+++ b/java/dagger/internal/codegen/DelegateBindingExpression.java
@@ -20,7 +20,7 @@
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.collect.Iterables.getOnlyElement;
 import static dagger.internal.codegen.BindingRequest.bindingRequest;
-import static dagger.internal.codegen.RequestKinds.requestType;
+import static dagger.internal.codegen.base.RequestKinds.requestType;
 import static dagger.internal.codegen.langmodel.Accessibility.isTypeAccessibleFrom;
 import static dagger.model.BindingKind.DELEGATE;
 
diff --git a/java/dagger/internal/codegen/DelegateDeclaration.java b/java/dagger/internal/codegen/DelegateDeclaration.java
index 67991deb6..a186b3cc2 100644
--- a/java/dagger/internal/codegen/DelegateDeclaration.java
+++ b/java/dagger/internal/codegen/DelegateDeclaration.java
@@ -18,7 +18,7 @@
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static dagger.internal.codegen.MapKeys.getMapKey;
-import static dagger.internal.codegen.MoreAnnotationMirrors.wrapOptionalInEquivalence;
+import static dagger.internal.codegen.base.MoreAnnotationMirrors.wrapOptionalInEquivalence;
 
 import com.google.auto.common.MoreElements;
 import com.google.auto.common.MoreTypes;
@@ -27,7 +27,8 @@
 import com.google.common.base.Equivalence;
 import com.google.common.collect.Iterables;
 import dagger.Binds;
-import dagger.internal.codegen.ContributionType.HasContributionType;
+import dagger.internal.codegen.base.ContributionType;
+import dagger.internal.codegen.base.ContributionType.HasContributionType;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import dagger.model.DependencyRequest;
 import java.util.Optional;
diff --git a/java/dagger/internal/codegen/DependencyCycleValidator.java b/java/dagger/internal/codegen/DependencyCycleValidator.java
index 6fa2e5b6a..3d008caf5 100644
--- a/java/dagger/internal/codegen/DependencyCycleValidator.java
+++ b/java/dagger/internal/codegen/DependencyCycleValidator.java
@@ -21,8 +21,8 @@
 import static com.google.common.collect.Iterables.limit;
 import static com.google.common.collect.Iterables.skip;
 import static com.google.common.collect.Sets.newHashSetWithExpectedSize;
-import static dagger.internal.codegen.RequestKinds.extractKeyType;
-import static dagger.internal.codegen.RequestKinds.getRequestKind;
+import static dagger.internal.codegen.base.RequestKinds.extractKeyType;
+import static dagger.internal.codegen.base.RequestKinds.getRequestKind;
 import static dagger.internal.codegen.extension.DaggerGraphs.shortestPath;
 import static dagger.internal.codegen.extension.DaggerStreams.instancesOf;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableList;
@@ -37,6 +37,8 @@
 import com.google.common.graph.ImmutableNetwork;
 import com.google.common.graph.MutableNetwork;
 import com.google.common.graph.NetworkBuilder;
+import dagger.internal.codegen.base.MapType;
+import dagger.internal.codegen.base.OptionalType;
 import dagger.model.BindingGraph;
 import dagger.model.BindingGraph.ComponentNode;
 import dagger.model.BindingGraph.DependencyEdge;
diff --git a/java/dagger/internal/codegen/DependencyEdgeImpl.java b/java/dagger/internal/codegen/DependencyEdgeImpl.java
index 64b08457a..517904a0f 100644
--- a/java/dagger/internal/codegen/DependencyEdgeImpl.java
+++ b/java/dagger/internal/codegen/DependencyEdgeImpl.java
@@ -16,6 +16,7 @@
 
 package dagger.internal.codegen;
 
+import dagger.internal.codegen.base.ElementFormatter;
 import dagger.model.BindingGraph.DependencyEdge;
 import dagger.model.DependencyRequest;
 
diff --git a/java/dagger/internal/codegen/DependencyRequestFactory.java b/java/dagger/internal/codegen/DependencyRequestFactory.java
index 3ad12e299..301118cc8 100644
--- a/java/dagger/internal/codegen/DependencyRequestFactory.java
+++ b/java/dagger/internal/codegen/DependencyRequestFactory.java
@@ -22,9 +22,9 @@
 import static com.google.common.base.Preconditions.checkState;
 import static com.google.common.collect.Iterables.getOnlyElement;
 import static dagger.internal.codegen.ConfigurationAnnotations.getNullableType;
-import static dagger.internal.codegen.RequestKinds.extractKeyType;
-import static dagger.internal.codegen.RequestKinds.frameworkClass;
-import static dagger.internal.codegen.RequestKinds.getRequestKind;
+import static dagger.internal.codegen.base.RequestKinds.extractKeyType;
+import static dagger.internal.codegen.base.RequestKinds.frameworkClass;
+import static dagger.internal.codegen.base.RequestKinds.getRequestKind;
 import static dagger.model.RequestKind.FUTURE;
 import static dagger.model.RequestKind.INSTANCE;
 import static dagger.model.RequestKind.MEMBERS_INJECTION;
@@ -34,6 +34,9 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.common.util.concurrent.ListenableFuture;
 import dagger.Lazy;
+import dagger.internal.codegen.base.InjectionAnnotations;
+import dagger.internal.codegen.base.MapType;
+import dagger.internal.codegen.base.OptionalType;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import dagger.model.DependencyRequest;
 import dagger.model.Key;
diff --git a/java/dagger/internal/codegen/DependencyRequestFormatter.java b/java/dagger/internal/codegen/DependencyRequestFormatter.java
index 25becaf38..057e158f8 100644
--- a/java/dagger/internal/codegen/DependencyRequestFormatter.java
+++ b/java/dagger/internal/codegen/DependencyRequestFormatter.java
@@ -16,11 +16,12 @@
 
 package dagger.internal.codegen;
 
-import static dagger.internal.codegen.ElementFormatter.elementToString;
-import static dagger.internal.codegen.RequestKinds.requestType;
+import static dagger.internal.codegen.base.ElementFormatter.elementToString;
+import static dagger.internal.codegen.base.RequestKinds.requestType;
 
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import dagger.Provides;
+import dagger.internal.codegen.base.Formatter;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import dagger.model.DependencyRequest;
 import dagger.producers.Produces;
diff --git a/java/dagger/internal/codegen/DependencyRequestValidator.java b/java/dagger/internal/codegen/DependencyRequestValidator.java
index 1a9981852..14239fdab 100644
--- a/java/dagger/internal/codegen/DependencyRequestValidator.java
+++ b/java/dagger/internal/codegen/DependencyRequestValidator.java
@@ -16,14 +16,15 @@
 
 package dagger.internal.codegen;
 
-import static dagger.internal.codegen.InjectionAnnotations.getQualifiers;
-import static dagger.internal.codegen.RequestKinds.extractKeyType;
-import static dagger.internal.codegen.RequestKinds.getRequestKind;
+import static dagger.internal.codegen.base.InjectionAnnotations.getQualifiers;
+import static dagger.internal.codegen.base.RequestKinds.extractKeyType;
+import static dagger.internal.codegen.base.RequestKinds.getRequestKind;
 import static javax.lang.model.type.TypeKind.WILDCARD;
 
 import com.google.auto.common.MoreTypes;
 import com.google.common.collect.ImmutableSet;
 import dagger.MembersInjector;
+import dagger.internal.codegen.base.FrameworkTypes;
 import javax.inject.Inject;
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.Element;
diff --git a/java/dagger/internal/codegen/DiagnosticReporterFactory.java b/java/dagger/internal/codegen/DiagnosticReporterFactory.java
index 803bf991f..4f57f61bd 100644
--- a/java/dagger/internal/codegen/DiagnosticReporterFactory.java
+++ b/java/dagger/internal/codegen/DiagnosticReporterFactory.java
@@ -24,7 +24,7 @@
 import static com.google.common.collect.Iterables.indexOf;
 import static com.google.common.collect.Iterables.transform;
 import static com.google.common.collect.Lists.asList;
-import static dagger.internal.codegen.ElementFormatter.elementToString;
+import static dagger.internal.codegen.base.ElementFormatter.elementToString;
 import static dagger.internal.codegen.compileroption.ValidationType.NONE;
 import static dagger.internal.codegen.extension.DaggerGraphs.shortestPath;
 import static dagger.internal.codegen.extension.DaggerStreams.instancesOf;
@@ -49,6 +49,8 @@
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Table;
 import com.google.errorprone.annotations.FormatMethod;
+import dagger.internal.codegen.base.ElementFormatter;
+import dagger.internal.codegen.base.Formatter;
 import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.internal.codegen.compileroption.ValidationType;
 import dagger.internal.codegen.langmodel.DaggerTypes;
diff --git a/java/dagger/internal/codegen/DuplicateBindingsValidator.java b/java/dagger/internal/codegen/DuplicateBindingsValidator.java
index d770ba2c9..0f6d431ca 100644
--- a/java/dagger/internal/codegen/DuplicateBindingsValidator.java
+++ b/java/dagger/internal/codegen/DuplicateBindingsValidator.java
@@ -18,7 +18,7 @@
 
 import static com.google.common.base.Verify.verify;
 import static com.google.common.collect.Iterables.getOnlyElement;
-import static dagger.internal.codegen.Formatter.INDENT;
+import static dagger.internal.codegen.base.Formatter.INDENT;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableSet;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableSetMultimap;
 import static dagger.model.BindingKind.INJECTION;
@@ -37,6 +37,7 @@
 import com.google.common.collect.Multimap;
 import com.google.common.collect.Multimaps;
 import com.google.common.collect.Sets;
+import dagger.internal.codegen.base.Formatter;
 import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.model.Binding;
 import dagger.model.BindingGraph;
diff --git a/java/dagger/internal/codegen/ErrorMessages.java b/java/dagger/internal/codegen/ErrorMessages.java
index 4195e1a20..5d8786053 100644
--- a/java/dagger/internal/codegen/ErrorMessages.java
+++ b/java/dagger/internal/codegen/ErrorMessages.java
@@ -18,6 +18,7 @@
 
 import com.google.common.base.Joiner;
 import com.google.common.collect.ImmutableMap;
+import dagger.internal.codegen.base.ComponentAnnotation;
 import java.util.Set;
 import java.util.function.Function;
 import java.util.function.UnaryOperator;
diff --git a/java/dagger/internal/codegen/FactoryGenerator.java b/java/dagger/internal/codegen/FactoryGenerator.java
index 2ea4b7495..5f3b96925 100644
--- a/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/java/dagger/internal/codegen/FactoryGenerator.java
@@ -56,6 +56,8 @@
 import dagger.internal.Preconditions;
 import dagger.internal.codegen.InjectionMethods.InjectionSiteMethod;
 import dagger.internal.codegen.InjectionMethods.ProvisionMethod;
+import dagger.internal.codegen.base.SourceFileGenerator;
+import dagger.internal.codegen.base.UniqueNameSet;
 import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.internal.codegen.javapoet.CodeBlocks;
 import dagger.internal.codegen.langmodel.DaggerElements;
@@ -95,18 +97,18 @@
   }
 
   @Override
-  ClassName nameGeneratedType(ProvisionBinding binding) {
+  public ClassName nameGeneratedType(ProvisionBinding binding) {
     return generatedClassNameForBinding(binding);
   }
 
   @Override
-  Element originatingElement(ProvisionBinding binding) {
+  public Element originatingElement(ProvisionBinding binding) {
     // we only create factories for bindings that have a binding element
     return binding.bindingElement().get();
   }
 
   @Override
-  Optional<TypeSpec.Builder> write(ClassName generatedTypeName, ProvisionBinding binding) {
+  public Optional<TypeSpec.Builder> write(ClassName generatedTypeName, ProvisionBinding binding) {
     // We don't want to write out resolved bindings -- we want to write out the generic version.
     checkArgument(!binding.unresolved().isPresent());
     checkArgument(binding.bindingElement().isPresent());
diff --git a/java/dagger/internal/codegen/FrameworkType.java b/java/dagger/internal/codegen/FrameworkType.java
index f4e377972..4f094753c 100644
--- a/java/dagger/internal/codegen/FrameworkType.java
+++ b/java/dagger/internal/codegen/FrameworkType.java
@@ -29,6 +29,7 @@
 import dagger.Lazy;
 import dagger.internal.DoubleCheck;
 import dagger.internal.ProviderOfLazy;
+import dagger.internal.codegen.base.RequestKinds;
 import dagger.internal.codegen.javapoet.Expression;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import dagger.model.DependencyRequest;
diff --git a/java/dagger/internal/codegen/HjarSourceFileGenerator.java b/java/dagger/internal/codegen/HjarSourceFileGenerator.java
index 5c363225a..d0fe93849 100644
--- a/java/dagger/internal/codegen/HjarSourceFileGenerator.java
+++ b/java/dagger/internal/codegen/HjarSourceFileGenerator.java
@@ -25,6 +25,7 @@
 import com.squareup.javapoet.FieldSpec;
 import com.squareup.javapoet.MethodSpec;
 import com.squareup.javapoet.TypeSpec;
+import dagger.internal.codegen.base.SourceFileGenerator;
 import java.util.Optional;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.Modifier;
@@ -46,17 +47,17 @@ private HjarSourceFileGenerator(SourceFileGenerator<T> delegate) {
   }
 
   @Override
-  ClassName nameGeneratedType(T input) {
+  public ClassName nameGeneratedType(T input) {
     return delegate.nameGeneratedType(input);
   }
 
   @Override
-  Element originatingElement(T input) {
+  public Element originatingElement(T input) {
     return delegate.originatingElement(input);
   }
 
   @Override
-  Optional<TypeSpec.Builder> write(ClassName generatedTypeName, T input) {
+  public Optional<TypeSpec.Builder> write(ClassName generatedTypeName, T input) {
     return delegate
         .write(generatedTypeName, input)
         .map(completeType -> skeletonType(completeType.build()));
diff --git a/java/dagger/internal/codegen/InaccessibleMapKeyProxyGenerator.java b/java/dagger/internal/codegen/InaccessibleMapKeyProxyGenerator.java
index 19c4d19f1..96c3a70ae 100644
--- a/java/dagger/internal/codegen/InaccessibleMapKeyProxyGenerator.java
+++ b/java/dagger/internal/codegen/InaccessibleMapKeyProxyGenerator.java
@@ -24,6 +24,7 @@
 
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.TypeSpec;
+import dagger.internal.codegen.base.SourceFileGenerator;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import java.util.Optional;
@@ -49,18 +50,18 @@
   }
 
   @Override
-  ClassName nameGeneratedType(ContributionBinding binding) {
+  public ClassName nameGeneratedType(ContributionBinding binding) {
     return MapKeys.mapKeyProxyClassName(binding);
   }
 
   @Override
-  Element originatingElement(ContributionBinding binding) {
+  public Element originatingElement(ContributionBinding binding) {
     // a map key is only ever present on bindings that have a binding element
     return binding.bindingElement().get();
   }
 
   @Override
-  Optional<TypeSpec.Builder> write(ClassName generatedName, ContributionBinding binding) {
+  public Optional<TypeSpec.Builder> write(ClassName generatedName, ContributionBinding binding) {
     return MapKeys.mapKeyFactoryMethod(binding, types, elements)
         .map(
             method ->
diff --git a/java/dagger/internal/codegen/IncompatiblyScopedBindingsValidator.java b/java/dagger/internal/codegen/IncompatiblyScopedBindingsValidator.java
index ccff75eca..0985b53ef 100644
--- a/java/dagger/internal/codegen/IncompatiblyScopedBindingsValidator.java
+++ b/java/dagger/internal/codegen/IncompatiblyScopedBindingsValidator.java
@@ -16,8 +16,8 @@
 
 package dagger.internal.codegen;
 
-import static dagger.internal.codegen.Formatter.INDENT;
-import static dagger.internal.codegen.Scopes.getReadableSource;
+import static dagger.internal.codegen.base.Formatter.INDENT;
+import static dagger.internal.codegen.base.Scopes.getReadableSource;
 import static dagger.internal.codegen.langmodel.DaggerElements.closestEnclosingTypeElement;
 import static dagger.model.BindingKind.INJECTION;
 import static java.util.stream.Collectors.joining;
@@ -26,6 +26,7 @@
 import com.google.auto.common.MoreElements;
 import com.google.common.collect.ImmutableSetMultimap;
 import com.google.common.collect.Multimaps;
+import dagger.internal.codegen.base.Scopes;
 import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.model.Binding;
 import dagger.model.BindingGraph;
diff --git a/java/dagger/internal/codegen/InjectBindingRegistry.java b/java/dagger/internal/codegen/InjectBindingRegistry.java
index 2840d75f4..0bfda0fbc 100644
--- a/java/dagger/internal/codegen/InjectBindingRegistry.java
+++ b/java/dagger/internal/codegen/InjectBindingRegistry.java
@@ -19,6 +19,8 @@
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import dagger.Component;
 import dagger.Provides;
+import dagger.internal.codegen.base.SourceFileGenerationException;
+import dagger.internal.codegen.base.SourceFileGenerator;
 import dagger.model.Key;
 import java.util.Optional;
 import javax.inject.Inject;
diff --git a/java/dagger/internal/codegen/InjectBindingRegistryImpl.java b/java/dagger/internal/codegen/InjectBindingRegistryImpl.java
index 77636c1fd..29c4c80a4 100644
--- a/java/dagger/internal/codegen/InjectBindingRegistryImpl.java
+++ b/java/dagger/internal/codegen/InjectBindingRegistryImpl.java
@@ -19,10 +19,10 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.base.Preconditions.checkState;
-import static dagger.internal.codegen.InjectionAnnotations.injectedConstructors;
-import static dagger.internal.codegen.Keys.isValidImplicitProvisionKey;
-import static dagger.internal.codegen.Keys.isValidMembersInjectionKey;
 import static dagger.internal.codegen.SourceFiles.generatedClassNameForBinding;
+import static dagger.internal.codegen.base.InjectionAnnotations.injectedConstructors;
+import static dagger.internal.codegen.base.Keys.isValidImplicitProvisionKey;
+import static dagger.internal.codegen.base.Keys.isValidMembersInjectionKey;
 
 import com.google.auto.common.MoreElements;
 import com.google.auto.common.MoreTypes;
@@ -35,6 +35,8 @@
 import dagger.Component;
 import dagger.MembersInjector;
 import dagger.Provides;
+import dagger.internal.codegen.base.SourceFileGenerationException;
+import dagger.internal.codegen.base.SourceFileGenerator;
 import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
diff --git a/java/dagger/internal/codegen/InjectValidator.java b/java/dagger/internal/codegen/InjectValidator.java
index d15cb52e6..b06268e63 100644
--- a/java/dagger/internal/codegen/InjectValidator.java
+++ b/java/dagger/internal/codegen/InjectValidator.java
@@ -17,9 +17,9 @@
 package dagger.internal.codegen;
 
 import static com.google.auto.common.MoreElements.isAnnotationPresent;
-import static dagger.internal.codegen.InjectionAnnotations.getQualifiers;
-import static dagger.internal.codegen.InjectionAnnotations.injectedConstructors;
-import static dagger.internal.codegen.Scopes.scopesOf;
+import static dagger.internal.codegen.base.InjectionAnnotations.getQualifiers;
+import static dagger.internal.codegen.base.InjectionAnnotations.injectedConstructors;
+import static dagger.internal.codegen.base.Scopes.scopesOf;
 import static javax.lang.model.element.Modifier.ABSTRACT;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PRIVATE;
diff --git a/java/dagger/internal/codegen/InjectionMethod.java b/java/dagger/internal/codegen/InjectionMethod.java
index dcfbae5e0..cd06aea7a 100644
--- a/java/dagger/internal/codegen/InjectionMethod.java
+++ b/java/dagger/internal/codegen/InjectionMethod.java
@@ -35,6 +35,7 @@
 import com.squareup.javapoet.ParameterSpec;
 import com.squareup.javapoet.TypeName;
 import com.squareup.javapoet.TypeVariableName;
+import dagger.internal.codegen.base.UniqueNameSet;
 import dagger.internal.codegen.javapoet.CodeBlocks;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import java.util.List;
diff --git a/java/dagger/internal/codegen/InjectionMethods.java b/java/dagger/internal/codegen/InjectionMethods.java
index 494381d70..4a15d279a 100644
--- a/java/dagger/internal/codegen/InjectionMethods.java
+++ b/java/dagger/internal/codegen/InjectionMethods.java
@@ -21,9 +21,9 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static dagger.internal.codegen.ConfigurationAnnotations.getNullableType;
 import static dagger.internal.codegen.FactoryGenerator.checkNotNullProvidesMethod;
-import static dagger.internal.codegen.RequestKinds.requestTypeName;
 import static dagger.internal.codegen.SourceFiles.generatedClassNameForBinding;
 import static dagger.internal.codegen.SourceFiles.membersInjectorNameForType;
+import static dagger.internal.codegen.base.RequestKinds.requestTypeName;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableList;
 import static dagger.internal.codegen.javapoet.CodeBlocks.toConcatenatedCodeBlock;
 import static dagger.internal.codegen.javapoet.TypeNames.rawTypeName;
diff --git a/java/dagger/internal/codegen/KeyFactory.java b/java/dagger/internal/codegen/KeyFactory.java
index aea1cb8f4..a75b44db2 100644
--- a/java/dagger/internal/codegen/KeyFactory.java
+++ b/java/dagger/internal/codegen/KeyFactory.java
@@ -22,11 +22,11 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.collect.Iterables.getOnlyElement;
-import static dagger.internal.codegen.InjectionAnnotations.getQualifier;
 import static dagger.internal.codegen.MapKeys.getMapKey;
 import static dagger.internal.codegen.MapKeys.mapKeyType;
-import static dagger.internal.codegen.RequestKinds.extractKeyType;
-import static dagger.internal.codegen.RequestKinds.getRequestKind;
+import static dagger.internal.codegen.base.InjectionAnnotations.getQualifier;
+import static dagger.internal.codegen.base.RequestKinds.extractKeyType;
+import static dagger.internal.codegen.base.RequestKinds.getRequestKind;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableSet;
 import static dagger.internal.codegen.extension.Optionals.firstPresent;
 import static dagger.internal.codegen.langmodel.DaggerTypes.isFutureType;
@@ -37,6 +37,13 @@
 import com.google.common.collect.ImmutableSet;
 import dagger.Binds;
 import dagger.BindsOptionalOf;
+import dagger.internal.codegen.base.ContributionType;
+import dagger.internal.codegen.base.FrameworkTypes;
+import dagger.internal.codegen.base.MapType;
+import dagger.internal.codegen.base.OptionalType;
+import dagger.internal.codegen.base.RequestKinds;
+import dagger.internal.codegen.base.SetType;
+import dagger.internal.codegen.base.SimpleAnnotationMirror;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import dagger.model.Key;
diff --git a/java/dagger/internal/codegen/MapBindingExpression.java b/java/dagger/internal/codegen/MapBindingExpression.java
index 4acd3749e..178500aa0 100644
--- a/java/dagger/internal/codegen/MapBindingExpression.java
+++ b/java/dagger/internal/codegen/MapBindingExpression.java
@@ -30,6 +30,7 @@
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
 import dagger.internal.MapBuilder;
+import dagger.internal.codegen.base.MapType;
 import dagger.internal.codegen.javapoet.Expression;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
diff --git a/java/dagger/internal/codegen/MapFactoryCreationExpression.java b/java/dagger/internal/codegen/MapFactoryCreationExpression.java
index e9cd1cfaf..7ffdc4df1 100644
--- a/java/dagger/internal/codegen/MapFactoryCreationExpression.java
+++ b/java/dagger/internal/codegen/MapFactoryCreationExpression.java
@@ -22,6 +22,7 @@
 
 import com.google.common.collect.ImmutableSet;
 import com.squareup.javapoet.CodeBlock;
+import dagger.internal.codegen.base.MapType;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.model.DependencyRequest;
 import dagger.producers.Produced;
diff --git a/java/dagger/internal/codegen/MapKeys.java b/java/dagger/internal/codegen/MapKeys.java
index d8da6af52..0b2f84e06 100644
--- a/java/dagger/internal/codegen/MapKeys.java
+++ b/java/dagger/internal/codegen/MapKeys.java
@@ -21,8 +21,8 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.collect.Iterables.getOnlyElement;
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
-import static dagger.internal.codegen.MapKeyAccessibility.isMapKeyPubliclyAccessible;
 import static dagger.internal.codegen.SourceFiles.elementBasedClassName;
+import static dagger.internal.codegen.base.MapKeyAccessibility.isMapKeyPubliclyAccessible;
 import static javax.lang.model.element.Modifier.PUBLIC;
 import static javax.lang.model.element.Modifier.STATIC;
 import static javax.lang.model.util.ElementFilter.methodsIn;
@@ -35,6 +35,7 @@
 import com.squareup.javapoet.MethodSpec;
 import com.squareup.javapoet.TypeName;
 import dagger.MapKey;
+import dagger.internal.codegen.base.MapKeyAccessibility;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import java.util.NoSuchElementException;
diff --git a/java/dagger/internal/codegen/MapMultibindingValidator.java b/java/dagger/internal/codegen/MapMultibindingValidator.java
index c04968d9e..c433c7e61 100644
--- a/java/dagger/internal/codegen/MapMultibindingValidator.java
+++ b/java/dagger/internal/codegen/MapMultibindingValidator.java
@@ -18,7 +18,7 @@
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.collect.Multimaps.filterKeys;
-import static dagger.internal.codegen.Formatter.INDENT;
+import static dagger.internal.codegen.base.Formatter.INDENT;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableSet;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableSetMultimap;
 import static dagger.model.BindingKind.MULTIBOUND_MAP;
@@ -31,6 +31,7 @@
 import com.google.common.collect.ImmutableSetMultimap;
 import com.google.common.collect.Multimaps;
 import com.google.common.collect.SetMultimap;
+import dagger.internal.codegen.base.MapType;
 import dagger.model.BindingGraph;
 import dagger.model.Key;
 import dagger.producers.Producer;
diff --git a/java/dagger/internal/codegen/MemberSelect.java b/java/dagger/internal/codegen/MemberSelect.java
index 4ae874516..6dcdd3b50 100644
--- a/java/dagger/internal/codegen/MemberSelect.java
+++ b/java/dagger/internal/codegen/MemberSelect.java
@@ -35,6 +35,7 @@
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.TypeVariableName;
+import dagger.internal.codegen.base.SetType;
 import dagger.internal.codegen.javapoet.CodeBlocks;
 import java.util.List;
 import java.util.Optional;
diff --git a/java/dagger/internal/codegen/MembersInjectionMethods.java b/java/dagger/internal/codegen/MembersInjectionMethods.java
index 1e046697c..c24af89ae 100644
--- a/java/dagger/internal/codegen/MembersInjectionMethods.java
+++ b/java/dagger/internal/codegen/MembersInjectionMethods.java
@@ -19,7 +19,7 @@
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
 import static dagger.internal.codegen.ComponentImplementation.MethodSpecKind.MEMBERS_INJECTION_METHOD;
-import static dagger.internal.codegen.Util.reentrantComputeIfAbsent;
+import static dagger.internal.codegen.base.Util.reentrantComputeIfAbsent;
 import static dagger.internal.codegen.langmodel.Accessibility.isTypeAccessibleFrom;
 import static javax.lang.model.element.Modifier.PRIVATE;
 
diff --git a/java/dagger/internal/codegen/MembersInjectionValidator.java b/java/dagger/internal/codegen/MembersInjectionValidator.java
index 036315ea9..c0fa7c62a 100644
--- a/java/dagger/internal/codegen/MembersInjectionValidator.java
+++ b/java/dagger/internal/codegen/MembersInjectionValidator.java
@@ -17,7 +17,7 @@
 package dagger.internal.codegen;
 
 import static com.google.common.base.Preconditions.checkArgument;
-import static dagger.internal.codegen.InjectionAnnotations.getQualifiers;
+import static dagger.internal.codegen.base.InjectionAnnotations.getQualifiers;
 
 import com.google.auto.common.MoreElements;
 import javax.inject.Inject;
diff --git a/java/dagger/internal/codegen/MembersInjectorGenerator.java b/java/dagger/internal/codegen/MembersInjectorGenerator.java
index 6b677b6b0..c447c94f1 100644
--- a/java/dagger/internal/codegen/MembersInjectorGenerator.java
+++ b/java/dagger/internal/codegen/MembersInjectorGenerator.java
@@ -50,6 +50,8 @@
 import dagger.MembersInjector;
 import dagger.internal.codegen.InjectionMethods.InjectionSiteMethod;
 import dagger.internal.codegen.MembersInjectionBinding.InjectionSite;
+import dagger.internal.codegen.base.SourceFileGenerator;
+import dagger.internal.codegen.base.UniqueNameSet;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import dagger.internal.codegen.statistics.DaggerStatisticsCollector;
@@ -83,22 +85,23 @@
   }
 
   @Override
-  ClassName nameGeneratedType(MembersInjectionBinding binding) {
+  public ClassName nameGeneratedType(MembersInjectionBinding binding) {
     return membersInjectorNameForType(binding.membersInjectedType());
   }
 
   @Override
-  Element originatingElement(MembersInjectionBinding binding) {
+  public Element originatingElement(MembersInjectionBinding binding) {
     return binding.membersInjectedType();
   }
 
   @Override
-  Optional<TypeSpec.Builder> write(ClassName generatedTypeName, MembersInjectionBinding binding) {
+  public Optional<TypeSpec.Builder> write(
+      ClassName generatedTypeName, MembersInjectionBinding binding) {
     // Empty members injection bindings are special and don't need source files.
     if (binding.injectionSites().isEmpty()) {
       return Optional.empty();
     }
-    
+
     statisticsCollector.recordMembersInjectorGenerated();
 
     // We don't want to write out resolved bindings -- we want to write out the generic version.
diff --git a/java/dagger/internal/codegen/MethodSignatureFormatter.java b/java/dagger/internal/codegen/MethodSignatureFormatter.java
index 012d5b013..07f3f841c 100644
--- a/java/dagger/internal/codegen/MethodSignatureFormatter.java
+++ b/java/dagger/internal/codegen/MethodSignatureFormatter.java
@@ -17,11 +17,12 @@
 package dagger.internal.codegen;
 
 import static com.google.common.base.Preconditions.checkState;
-import static dagger.internal.codegen.DiagnosticFormatting.stripCommonTypePrefixes;
-import static dagger.internal.codegen.InjectionAnnotations.getQualifier;
+import static dagger.internal.codegen.base.DiagnosticFormatting.stripCommonTypePrefixes;
+import static dagger.internal.codegen.base.InjectionAnnotations.getQualifier;
 
 import com.google.auto.common.MoreElements;
 import com.google.auto.common.MoreTypes;
+import dagger.internal.codegen.base.Formatter;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import java.util.Iterator;
 import java.util.List;
diff --git a/java/dagger/internal/codegen/MissingBindingValidator.java b/java/dagger/internal/codegen/MissingBindingValidator.java
index fbfa32eca..b006e7c1a 100644
--- a/java/dagger/internal/codegen/MissingBindingValidator.java
+++ b/java/dagger/internal/codegen/MissingBindingValidator.java
@@ -17,9 +17,9 @@
 package dagger.internal.codegen;
 
 import static com.google.common.base.Verify.verify;
-import static dagger.internal.codegen.Keys.isValidImplicitProvisionKey;
-import static dagger.internal.codegen.Keys.isValidMembersInjectionKey;
-import static dagger.internal.codegen.RequestKinds.canBeSatisfiedByProductionBinding;
+import static dagger.internal.codegen.base.Keys.isValidImplicitProvisionKey;
+import static dagger.internal.codegen.base.Keys.isValidMembersInjectionKey;
+import static dagger.internal.codegen.base.RequestKinds.canBeSatisfiedByProductionBinding;
 import static dagger.internal.codegen.extension.DaggerStreams.instancesOf;
 import static javax.tools.Diagnostic.Kind.ERROR;
 
diff --git a/java/dagger/internal/codegen/ModuleConstructorProxyGenerator.java b/java/dagger/internal/codegen/ModuleConstructorProxyGenerator.java
index 5f0d6871b..b17fb2e92 100644
--- a/java/dagger/internal/codegen/ModuleConstructorProxyGenerator.java
+++ b/java/dagger/internal/codegen/ModuleConstructorProxyGenerator.java
@@ -28,6 +28,7 @@
 
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.TypeSpec;
+import dagger.internal.codegen.base.SourceFileGenerator;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import java.util.Optional;
 import javax.annotation.processing.Filer;
@@ -54,17 +55,17 @@
   }
 
   @Override
-  ClassName nameGeneratedType(TypeElement moduleElement) {
+  public ClassName nameGeneratedType(TypeElement moduleElement) {
     return ModuleProxies.constructorProxyTypeName(moduleElement);
   }
 
   @Override
-  Element originatingElement(TypeElement moduleElement) {
+  public Element originatingElement(TypeElement moduleElement) {
     return moduleElement;
   }
 
   @Override
-  Optional<TypeSpec.Builder> write(ClassName generatedTypeName, TypeElement moduleElement) {
+  public Optional<TypeSpec.Builder> write(ClassName generatedTypeName, TypeElement moduleElement) {
     checkIsModule(moduleElement);
     return nonPublicNullaryConstructor(moduleElement, elements).isPresent()
         ? Optional.of(buildProxy(generatedTypeName, moduleElement))
diff --git a/java/dagger/internal/codegen/ModuleDescriptor.java b/java/dagger/internal/codegen/ModuleDescriptor.java
index 3c049d67d..3ec3d4d6f 100644
--- a/java/dagger/internal/codegen/ModuleDescriptor.java
+++ b/java/dagger/internal/codegen/ModuleDescriptor.java
@@ -22,9 +22,9 @@
 import static com.google.common.base.CaseFormat.UPPER_CAMEL;
 import static com.google.common.base.Verify.verify;
 import static com.google.common.collect.Iterables.transform;
-import static dagger.internal.codegen.ModuleAnnotation.moduleAnnotation;
 import static dagger.internal.codegen.SourceFiles.classFileName;
-import static dagger.internal.codegen.Util.reentrantComputeIfAbsent;
+import static dagger.internal.codegen.base.ModuleAnnotation.moduleAnnotation;
+import static dagger.internal.codegen.base.Util.reentrantComputeIfAbsent;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableSet;
 import static dagger.internal.codegen.langmodel.DaggerElements.isAnnotationPresent;
 import static javax.lang.model.type.TypeKind.DECLARED;
@@ -43,6 +43,7 @@
 import dagger.BindsOptionalOf;
 import dagger.Module;
 import dagger.Provides;
+import dagger.internal.codegen.base.ClearableCache;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.model.Key;
 import dagger.multibindings.Multibinds;
diff --git a/java/dagger/internal/codegen/ModuleGenerator.java b/java/dagger/internal/codegen/ModuleGenerator.java
index 161b47b4a..f5caacee3 100644
--- a/java/dagger/internal/codegen/ModuleGenerator.java
+++ b/java/dagger/internal/codegen/ModuleGenerator.java
@@ -18,6 +18,7 @@
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
+import dagger.internal.codegen.base.SourceFileGenerator;
 import java.lang.annotation.Retention;
 import javax.inject.Qualifier;
 
diff --git a/java/dagger/internal/codegen/ModuleProcessingStep.java b/java/dagger/internal/codegen/ModuleProcessingStep.java
index 27cd531fc..f7fc0698d 100644
--- a/java/dagger/internal/codegen/ModuleProcessingStep.java
+++ b/java/dagger/internal/codegen/ModuleProcessingStep.java
@@ -29,6 +29,7 @@
 import dagger.Module;
 import dagger.Provides;
 import dagger.internal.codegen.DelegateDeclaration.Factory;
+import dagger.internal.codegen.base.SourceFileGenerator;
 import dagger.producers.ProducerModule;
 import dagger.producers.Produces;
 import java.lang.annotation.Annotation;
diff --git a/java/dagger/internal/codegen/ModuleValidator.java b/java/dagger/internal/codegen/ModuleValidator.java
index 73682c1b6..6dafa3b6a 100644
--- a/java/dagger/internal/codegen/ModuleValidator.java
+++ b/java/dagger/internal/codegen/ModuleValidator.java
@@ -21,16 +21,16 @@
 import static com.google.auto.common.Visibility.PUBLIC;
 import static com.google.auto.common.Visibility.effectiveVisibilityOfElement;
 import static com.google.common.collect.Iterables.getOnlyElement;
-import static dagger.internal.codegen.ComponentAnnotation.componentAnnotation;
-import static dagger.internal.codegen.ComponentAnnotation.isComponentAnnotation;
-import static dagger.internal.codegen.ComponentAnnotation.subcomponentAnnotation;
 import static dagger.internal.codegen.ComponentCreatorAnnotation.getCreatorAnnotations;
 import static dagger.internal.codegen.ConfigurationAnnotations.getSubcomponentCreator;
-import static dagger.internal.codegen.ModuleAnnotation.isModuleAnnotation;
-import static dagger.internal.codegen.ModuleAnnotation.moduleAnnotation;
-import static dagger.internal.codegen.MoreAnnotationMirrors.simpleName;
-import static dagger.internal.codegen.MoreAnnotationValues.asType;
-import static dagger.internal.codegen.Util.reentrantComputeIfAbsent;
+import static dagger.internal.codegen.base.ComponentAnnotation.componentAnnotation;
+import static dagger.internal.codegen.base.ComponentAnnotation.isComponentAnnotation;
+import static dagger.internal.codegen.base.ComponentAnnotation.subcomponentAnnotation;
+import static dagger.internal.codegen.base.ModuleAnnotation.isModuleAnnotation;
+import static dagger.internal.codegen.base.ModuleAnnotation.moduleAnnotation;
+import static dagger.internal.codegen.base.MoreAnnotationMirrors.simpleName;
+import static dagger.internal.codegen.base.MoreAnnotationValues.asType;
+import static dagger.internal.codegen.base.Util.reentrantComputeIfAbsent;
 import static dagger.internal.codegen.compileroption.ValidationType.NONE;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableSet;
 import static dagger.internal.codegen.langmodel.DaggerElements.getAnnotationMirror;
@@ -54,6 +54,7 @@
 import com.google.errorprone.annotations.FormatMethod;
 import dagger.Module;
 import dagger.Subcomponent;
+import dagger.internal.codegen.base.ModuleAnnotation;
 import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
diff --git a/java/dagger/internal/codegen/MonitoringModuleGenerator.java b/java/dagger/internal/codegen/MonitoringModuleGenerator.java
index 1738fe9a7..d839490ce 100644
--- a/java/dagger/internal/codegen/MonitoringModuleGenerator.java
+++ b/java/dagger/internal/codegen/MonitoringModuleGenerator.java
@@ -31,6 +31,7 @@
 import com.squareup.javapoet.TypeSpec;
 import dagger.Module;
 import dagger.Provides;
+import dagger.internal.codegen.base.SourceFileGenerator;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.multibindings.Multibinds;
 import dagger.producers.ProductionScope;
@@ -52,17 +53,18 @@
   }
 
   @Override
-  ClassName nameGeneratedType(TypeElement componentElement) {
+  public ClassName nameGeneratedType(TypeElement componentElement) {
     return SourceFiles.generatedMonitoringModuleName(componentElement);
   }
 
   @Override
-  Element originatingElement(TypeElement componentElement) {
+  public Element originatingElement(TypeElement componentElement) {
     return componentElement;
   }
 
   @Override
-  Optional<TypeSpec.Builder> write(ClassName generatedTypeName, TypeElement componentElement) {
+  public Optional<TypeSpec.Builder> write(
+      ClassName generatedTypeName, TypeElement componentElement) {
     return Optional.of(
         classBuilder(generatedTypeName)
             .addAnnotation(Module.class)
diff --git a/java/dagger/internal/codegen/MultibindingDeclaration.java b/java/dagger/internal/codegen/MultibindingDeclaration.java
index c3724dc77..da058c609 100644
--- a/java/dagger/internal/codegen/MultibindingDeclaration.java
+++ b/java/dagger/internal/codegen/MultibindingDeclaration.java
@@ -22,7 +22,10 @@
 import com.google.auto.common.MoreTypes;
 import com.google.auto.value.AutoValue;
 import com.google.auto.value.extension.memoized.Memoized;
-import dagger.internal.codegen.ContributionType.HasContributionType;
+import dagger.internal.codegen.base.ContributionType;
+import dagger.internal.codegen.base.ContributionType.HasContributionType;
+import dagger.internal.codegen.base.MapType;
+import dagger.internal.codegen.base.SetType;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import dagger.model.Key;
 import dagger.multibindings.Multibinds;
diff --git a/java/dagger/internal/codegen/MultibindsMethodValidator.java b/java/dagger/internal/codegen/MultibindsMethodValidator.java
index bc97d3060..d8c5e7c7f 100644
--- a/java/dagger/internal/codegen/MultibindsMethodValidator.java
+++ b/java/dagger/internal/codegen/MultibindsMethodValidator.java
@@ -20,11 +20,13 @@
 import static dagger.internal.codegen.BindingElementValidator.AllowsScoping.NO_SCOPING;
 import static dagger.internal.codegen.BindingMethodValidator.Abstractness.MUST_BE_ABSTRACT;
 import static dagger.internal.codegen.BindingMethodValidator.ExceptionSuperclass.NO_EXCEPTIONS;
-import static dagger.internal.codegen.FrameworkTypes.isFrameworkType;
+import static dagger.internal.codegen.base.FrameworkTypes.isFrameworkType;
 
 import com.google.auto.common.MoreTypes;
 import com.google.common.collect.ImmutableSet;
 import dagger.Module;
+import dagger.internal.codegen.base.MapType;
+import dagger.internal.codegen.base.SetType;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import dagger.multibindings.Multibinds;
diff --git a/java/dagger/internal/codegen/OptionalBindingExpression.java b/java/dagger/internal/codegen/OptionalBindingExpression.java
index 6019d5d92..3c74f07c0 100644
--- a/java/dagger/internal/codegen/OptionalBindingExpression.java
+++ b/java/dagger/internal/codegen/OptionalBindingExpression.java
@@ -22,7 +22,8 @@
 
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
-import dagger.internal.codegen.OptionalType.OptionalKind;
+import dagger.internal.codegen.base.OptionalType;
+import dagger.internal.codegen.base.OptionalType.OptionalKind;
 import dagger.internal.codegen.javapoet.Expression;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import dagger.model.DependencyRequest;
diff --git a/java/dagger/internal/codegen/OptionalFactories.java b/java/dagger/internal/codegen/OptionalFactories.java
index 51c9939a3..aeb2a0af5 100644
--- a/java/dagger/internal/codegen/OptionalFactories.java
+++ b/java/dagger/internal/codegen/OptionalFactories.java
@@ -27,7 +27,7 @@
 import static dagger.internal.codegen.ComponentImplementation.FieldSpecKind.ABSENT_OPTIONAL_FIELD;
 import static dagger.internal.codegen.ComponentImplementation.MethodSpecKind.ABSENT_OPTIONAL_METHOD;
 import static dagger.internal.codegen.ComponentImplementation.TypeSpecKind.PRESENT_FACTORY;
-import static dagger.internal.codegen.RequestKinds.requestTypeName;
+import static dagger.internal.codegen.base.RequestKinds.requestTypeName;
 import static dagger.internal.codegen.javapoet.AnnotationSpecs.Suppression.RAWTYPES;
 import static dagger.internal.codegen.javapoet.AnnotationSpecs.Suppression.UNCHECKED;
 import static dagger.internal.codegen.javapoet.TypeNames.PROVIDER;
@@ -55,7 +55,8 @@
 import com.squareup.javapoet.TypeVariableName;
 import dagger.internal.InstanceFactory;
 import dagger.internal.Preconditions;
-import dagger.internal.codegen.OptionalType.OptionalKind;
+import dagger.internal.codegen.base.OptionalType;
+import dagger.internal.codegen.base.OptionalType.OptionalKind;
 import dagger.internal.codegen.javapoet.AnnotationSpecs;
 import dagger.model.RequestKind;
 import dagger.producers.Producer;
diff --git a/java/dagger/internal/codegen/ProcessingRoundCacheModule.java b/java/dagger/internal/codegen/ProcessingRoundCacheModule.java
index b56cc30ac..ee1f49d5b 100644
--- a/java/dagger/internal/codegen/ProcessingRoundCacheModule.java
+++ b/java/dagger/internal/codegen/ProcessingRoundCacheModule.java
@@ -18,6 +18,7 @@
 
 import dagger.Binds;
 import dagger.Module;
+import dagger.internal.codegen.base.ClearableCache;
 import dagger.multibindings.IntoSet;
 
 /**
diff --git a/java/dagger/internal/codegen/ProducerFactoryGenerator.java b/java/dagger/internal/codegen/ProducerFactoryGenerator.java
index 4f1f63166..a785ef1f7 100644
--- a/java/dagger/internal/codegen/ProducerFactoryGenerator.java
+++ b/java/dagger/internal/codegen/ProducerFactoryGenerator.java
@@ -58,6 +58,8 @@
 import com.squareup.javapoet.ParameterizedTypeName;
 import com.squareup.javapoet.TypeName;
 import com.squareup.javapoet.TypeSpec;
+import dagger.internal.codegen.base.SourceFileGenerator;
+import dagger.internal.codegen.base.UniqueNameSet;
 import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.internal.codegen.javapoet.AnnotationSpecs;
 import dagger.internal.codegen.javapoet.AnnotationSpecs.Suppression;
@@ -97,18 +99,18 @@
   }
 
   @Override
-  ClassName nameGeneratedType(ProductionBinding binding) {
+  public ClassName nameGeneratedType(ProductionBinding binding) {
     return generatedClassNameForBinding(binding);
   }
 
   @Override
-  Element originatingElement(ProductionBinding binding) {
+  public Element originatingElement(ProductionBinding binding) {
     // we only create factories for bindings that have a binding element
     return binding.bindingElement().get();
   }
 
   @Override
-  Optional<TypeSpec.Builder> write(ClassName generatedTypeName, ProductionBinding binding) {
+  public Optional<TypeSpec.Builder> write(ClassName generatedTypeName, ProductionBinding binding) {
     // We don't want to write out resolved bindings -- we want to write out the generic version.
     checkArgument(!binding.unresolved().isPresent());
     checkArgument(binding.bindingElement().isPresent());
diff --git a/java/dagger/internal/codegen/ProductionBinding.java b/java/dagger/internal/codegen/ProductionBinding.java
index 9d7d4daf0..3f9895984 100644
--- a/java/dagger/internal/codegen/ProductionBinding.java
+++ b/java/dagger/internal/codegen/ProductionBinding.java
@@ -24,6 +24,8 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
+import dagger.internal.codegen.base.ContributionType;
+import dagger.internal.codegen.base.SetType;
 import dagger.model.DependencyRequest;
 import dagger.model.Key;
 import java.util.Optional;
diff --git a/java/dagger/internal/codegen/ProvisionDependencyOnProducerBindingValidator.java b/java/dagger/internal/codegen/ProvisionDependencyOnProducerBindingValidator.java
index 535932110..2bbf084fb 100644
--- a/java/dagger/internal/codegen/ProvisionDependencyOnProducerBindingValidator.java
+++ b/java/dagger/internal/codegen/ProvisionDependencyOnProducerBindingValidator.java
@@ -18,7 +18,7 @@
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Verify.verify;
-import static dagger.internal.codegen.RequestKinds.canBeSatisfiedByProductionBinding;
+import static dagger.internal.codegen.base.RequestKinds.canBeSatisfiedByProductionBinding;
 import static dagger.internal.codegen.extension.DaggerStreams.instancesOf;
 import static javax.tools.Diagnostic.Kind.ERROR;
 
diff --git a/java/dagger/internal/codegen/ResolvedBindings.java b/java/dagger/internal/codegen/ResolvedBindings.java
index af5a267da..30635a766 100644
--- a/java/dagger/internal/codegen/ResolvedBindings.java
+++ b/java/dagger/internal/codegen/ResolvedBindings.java
@@ -29,7 +29,8 @@
 import com.google.common.collect.ImmutableSetMultimap;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Multimap;
-import dagger.internal.codegen.ContributionType.HasContributionType;
+import dagger.internal.codegen.base.ContributionType;
+import dagger.internal.codegen.base.ContributionType.HasContributionType;
 import dagger.model.Key;
 import dagger.model.Scope;
 import java.util.Optional;
diff --git a/java/dagger/internal/codegen/SetBindingExpression.java b/java/dagger/internal/codegen/SetBindingExpression.java
index 0560718bd..e9daa0ff8 100644
--- a/java/dagger/internal/codegen/SetBindingExpression.java
+++ b/java/dagger/internal/codegen/SetBindingExpression.java
@@ -26,6 +26,8 @@
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
 import dagger.internal.SetBuilder;
+import dagger.internal.codegen.base.ContributionType;
+import dagger.internal.codegen.base.SetType;
 import dagger.internal.codegen.javapoet.Expression;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
diff --git a/java/dagger/internal/codegen/SetFactoryCreationExpression.java b/java/dagger/internal/codegen/SetFactoryCreationExpression.java
index ee461371b..2660e2cc6 100644
--- a/java/dagger/internal/codegen/SetFactoryCreationExpression.java
+++ b/java/dagger/internal/codegen/SetFactoryCreationExpression.java
@@ -20,6 +20,8 @@
 import static dagger.internal.codegen.SourceFiles.setFactoryClassName;
 
 import com.squareup.javapoet.CodeBlock;
+import dagger.internal.codegen.base.ContributionType;
+import dagger.internal.codegen.base.SetType;
 import dagger.model.DependencyRequest;
 import dagger.producers.Produced;
 
diff --git a/java/dagger/internal/codegen/SourceFileGeneratorsModule.java b/java/dagger/internal/codegen/SourceFileGeneratorsModule.java
index 739748778..1a13f2401 100644
--- a/java/dagger/internal/codegen/SourceFileGeneratorsModule.java
+++ b/java/dagger/internal/codegen/SourceFileGeneratorsModule.java
@@ -22,6 +22,7 @@
 import dagger.internal.codegen.SourceFileGeneratorsModule.MembersInjectionModule;
 import dagger.internal.codegen.SourceFileGeneratorsModule.ProductionModule;
 import dagger.internal.codegen.SourceFileGeneratorsModule.ProvisionModule;
+import dagger.internal.codegen.base.SourceFileGenerator;
 import dagger.internal.codegen.compileroption.CompilerOptions;
 import javax.lang.model.element.TypeElement;
 
diff --git a/java/dagger/internal/codegen/SourceFiles.java b/java/dagger/internal/codegen/SourceFiles.java
index fb08cf8c3..0fdf642ec 100644
--- a/java/dagger/internal/codegen/SourceFiles.java
+++ b/java/dagger/internal/codegen/SourceFiles.java
@@ -51,6 +51,8 @@
 import com.squareup.javapoet.TypeName;
 import com.squareup.javapoet.TypeVariableName;
 import dagger.internal.SetFactory;
+import dagger.internal.codegen.base.MapType;
+import dagger.internal.codegen.base.SetType;
 import dagger.model.DependencyRequest;
 import dagger.model.RequestKind;
 import dagger.producers.Produced;
diff --git a/java/dagger/internal/codegen/SubcomponentDeclaration.java b/java/dagger/internal/codegen/SubcomponentDeclaration.java
index 567785700..451847a63 100644
--- a/java/dagger/internal/codegen/SubcomponentDeclaration.java
+++ b/java/dagger/internal/codegen/SubcomponentDeclaration.java
@@ -22,6 +22,7 @@
 import com.google.auto.value.AutoValue;
 import com.google.auto.value.extension.memoized.Memoized;
 import com.google.common.collect.ImmutableSet;
+import dagger.internal.codegen.base.ModuleAnnotation;
 import dagger.model.Key;
 import java.util.Optional;
 import javax.inject.Inject;
diff --git a/java/dagger/internal/codegen/SubcomponentFactoryMethodValidator.java b/java/dagger/internal/codegen/SubcomponentFactoryMethodValidator.java
index bf58b7223..3f3481d2b 100644
--- a/java/dagger/internal/codegen/SubcomponentFactoryMethodValidator.java
+++ b/java/dagger/internal/codegen/SubcomponentFactoryMethodValidator.java
@@ -20,7 +20,7 @@
 import static com.google.auto.common.MoreTypes.asExecutable;
 import static com.google.auto.common.MoreTypes.asTypeElements;
 import static com.google.common.collect.Sets.union;
-import static dagger.internal.codegen.Util.componentCanMakeNewInstances;
+import static dagger.internal.codegen.base.Util.componentCanMakeNewInstances;
 import static dagger.internal.codegen.extension.DaggerStreams.instancesOf;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableSet;
 import static javax.tools.Diagnostic.Kind.ERROR;
@@ -29,6 +29,7 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Sets;
 import com.google.common.collect.Sets.SetView;
+import dagger.internal.codegen.base.Util;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import dagger.model.BindingGraph;
 import dagger.model.BindingGraph.ChildFactoryMethodEdge;
diff --git a/java/dagger/internal/codegen/SubcomponentNames.java b/java/dagger/internal/codegen/SubcomponentNames.java
index 10e6c2433..f690ae1f4 100644
--- a/java/dagger/internal/codegen/SubcomponentNames.java
+++ b/java/dagger/internal/codegen/SubcomponentNames.java
@@ -28,6 +28,7 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Multimaps;
+import dagger.internal.codegen.base.UniqueNameSet;
 import dagger.model.Key;
 import java.util.Collection;
 import java.util.Iterator;
diff --git a/java/dagger/internal/codegen/SwitchingProviders.java b/java/dagger/internal/codegen/SwitchingProviders.java
index 9349f5030..6b7ba4c7a 100644
--- a/java/dagger/internal/codegen/SwitchingProviders.java
+++ b/java/dagger/internal/codegen/SwitchingProviders.java
@@ -35,6 +35,7 @@
 import com.squareup.javapoet.MethodSpec;
 import com.squareup.javapoet.TypeSpec;
 import com.squareup.javapoet.TypeVariableName;
+import dagger.internal.codegen.base.UniqueNameSet;
 import dagger.internal.codegen.javapoet.CodeBlocks;
 import dagger.internal.codegen.javapoet.Expression;
 import dagger.internal.codegen.langmodel.DaggerTypes;
diff --git a/java/dagger/internal/codegen/ValidationReport.java b/java/dagger/internal/codegen/ValidationReport.java
index 64091b532..86fff5690 100644
--- a/java/dagger/internal/codegen/ValidationReport.java
+++ b/java/dagger/internal/codegen/ValidationReport.java
@@ -16,7 +16,7 @@
 
 package dagger.internal.codegen;
 
-import static dagger.internal.codegen.ElementFormatter.elementToString;
+import static dagger.internal.codegen.base.ElementFormatter.elementToString;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableSet;
 import static javax.tools.Diagnostic.Kind.ERROR;
 import static javax.tools.Diagnostic.Kind.NOTE;
diff --git a/java/dagger/internal/codegen/base/BUILD b/java/dagger/internal/codegen/base/BUILD
new file mode 100644
index 000000000..9d3ac7bfe
--- /dev/null
+++ b/java/dagger/internal/codegen/base/BUILD
@@ -0,0 +1,64 @@
+# Copyright (C) 2019 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Description:
+#   Sources related to compiler options.
+
+package(default_visibility = ["//:src"])
+
+java_library(
+    name = "base",
+    srcs = [
+        "ClearableCache.java",
+        "ComponentAnnotation.java",
+        "ContributionType.java",
+        "DiagnosticFormatting.java",
+        "ElementFormatter.java",
+        "Formatter.java",
+        "FrameworkTypes.java",
+        "InjectionAnnotations.java",
+        "Keys.java",
+        "MapKeyAccessibility.java",
+        "MapType.java",
+        "ModuleAnnotation.java",
+        "MoreAnnotationMirrors.java",
+        "MoreAnnotationValues.java",
+        "MultibindingAnnotations.java",
+        "OptionalType.java",
+        "RequestKinds.java",
+        "Scopes.java",
+        "SetType.java",
+        "SimpleAnnotationMirror.java",
+        "SimpleTypeAnnotationValue.java",
+        "SourceFileGenerationException.java",
+        "SourceFileGenerator.java",
+        "UniqueNameSet.java",
+        "Util.java",
+    ],
+    plugins = ["//java/dagger/internal/codegen/bootstrap"],
+    tags = ["maven:merged"],
+    deps = [
+        "//java/dagger:core",
+        "//java/dagger/internal/codegen/extension",
+        "//java/dagger/internal/codegen/javapoet",
+        "//java/dagger/internal/codegen/langmodel",
+        "//java/dagger/model",
+        "//java/dagger/producers",
+        "@google_bazel_common//third_party/java/auto:common",
+        "@google_bazel_common//third_party/java/auto:value",
+        "@google_bazel_common//third_party/java/guava",
+        "@google_bazel_common//third_party/java/javapoet",
+        "@google_bazel_common//third_party/java/jsr330_inject",
+    ],
+)
diff --git a/java/dagger/internal/codegen/ClearableCache.java b/java/dagger/internal/codegen/base/ClearableCache.java
similarity index 90%
rename from java/dagger/internal/codegen/ClearableCache.java
rename to java/dagger/internal/codegen/base/ClearableCache.java
index 66ce3ef82..61e9482eb 100644
--- a/java/dagger/internal/codegen/ClearableCache.java
+++ b/java/dagger/internal/codegen/base/ClearableCache.java
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.base;
 
 /** A cache of objects that can be cleared. */
-interface ClearableCache {
+public interface ClearableCache {
   /** Releases cached references. */
   void clearCache();
 }
diff --git a/java/dagger/internal/codegen/ComponentAnnotation.java b/java/dagger/internal/codegen/base/ComponentAnnotation.java
similarity index 78%
rename from java/dagger/internal/codegen/ComponentAnnotation.java
rename to java/dagger/internal/codegen/base/ComponentAnnotation.java
index c6b8fe756..34550c935 100644
--- a/java/dagger/internal/codegen/ComponentAnnotation.java
+++ b/java/dagger/internal/codegen/base/ComponentAnnotation.java
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.base;
 
 import static com.google.auto.common.AnnotationMirrors.getAnnotationValue;
 import static com.google.auto.common.MoreTypes.asTypeElements;
 import static com.google.auto.common.MoreTypes.isTypeOf;
-import static dagger.internal.codegen.MoreAnnotationValues.asAnnotationValues;
+import static dagger.internal.codegen.base.MoreAnnotationValues.asAnnotationValues;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableList;
 import static dagger.internal.codegen.langmodel.DaggerElements.getAnyAnnotation;
 
@@ -46,7 +46,7 @@
  * annotation that is being treated as a component annotation when validating full binding graphs
  * for modules.
  */
-abstract class ComponentAnnotation {
+public abstract class ComponentAnnotation {
   /** The root component annotation types. */
   private static final ImmutableSet<Class<? extends Annotation>> ROOT_COMPONENT_ANNOTATIONS =
      ImmutableSet.of(Component.class, ProductionComponent.class);
@@ -63,10 +63,10 @@
          .build();
 
   /** The annotation itself. */
-  abstract AnnotationMirror annotation();
+  public abstract AnnotationMirror annotation();
 
   /** The simple name of the annotation type. */
-  String simpleName() {
+  public String simpleName() {
     return MoreAnnotationMirrors.simpleName(annotation()).toString();
   }
 
@@ -74,25 +74,25 @@ String simpleName() {
    * Returns {@code true} if the annotation is a {@code @Subcomponent} or
    * {@code @ProductionSubcomponent}.
    */
-  abstract boolean isSubcomponent();
+  public abstract boolean isSubcomponent();
 
   /**
    * Returns {@code true} if the annotation is a {@code @ProductionComponent},
    * {@code @ProductionSubcomponent}, or {@code @ProducerModule}.
    */
-  abstract boolean isProduction();
+  public abstract boolean isProduction();
 
   /**
    * Returns {@code true} if the annotation is a real component annotation and not a module
    * annotation.
    */
-  abstract boolean isRealComponent();
+  public abstract boolean isRealComponent();
 
   /** The values listed as {@code dependencies}. */
-  abstract ImmutableList<AnnotationValue> dependencyValues();
+  public abstract ImmutableList<AnnotationValue> dependencyValues();
 
   /** The types listed as {@code dependencies}. */
-  ImmutableList<TypeMirror> dependencyTypes() {
+  public ImmutableList<TypeMirror> dependencyTypes() {
     return dependencyValues().stream().map(MoreAnnotationValues::asType).collect(toImmutableList());
   }
 
@@ -101,15 +101,15 @@ String simpleName() {
    *
    * @throws IllegalArgumentException if any of {@link #dependencyTypes()} are error types
    */
-  ImmutableList<TypeElement> dependencies() {
+  public ImmutableList<TypeElement> dependencies() {
     return asTypeElements(dependencyTypes()).asList();
   }
 
   /** The values listed as {@code modules}. */
-  abstract ImmutableList<AnnotationValue> moduleValues();
+  public abstract ImmutableList<AnnotationValue> moduleValues();
 
   /** The types listed as {@code modules}. */
-  ImmutableList<TypeMirror> moduleTypes() {
+  public ImmutableList<TypeMirror> moduleTypes() {
     return moduleValues().stream().map(MoreAnnotationValues::asType).collect(toImmutableList());
   }
 
@@ -118,7 +118,7 @@ String simpleName() {
    *
    * @throws IllegalArgumentException if any of {@link #moduleTypes()} are error types
    */
-  ImmutableSet<TypeElement> modules() {
+  public ImmutableSet<TypeElement> modules() {
     return asTypeElements(moduleTypes());
   }
 
@@ -130,7 +130,7 @@ String simpleName() {
    * Returns an object representing a root component annotation, not a subcomponent annotation, if
    * one is present on {@code typeElement}.
    */
-  static Optional<ComponentAnnotation> rootComponentAnnotation(TypeElement typeElement) {
+  public static Optional<ComponentAnnotation> rootComponentAnnotation(TypeElement typeElement) {
     return anyComponentAnnotation(typeElement, ROOT_COMPONENT_ANNOTATIONS);
   }
 
@@ -138,7 +138,7 @@ String simpleName() {
    * Returns an object representing a subcomponent annotation, if one is present on {@code
    * typeElement}.
    */
-  static Optional<ComponentAnnotation> subcomponentAnnotation(TypeElement typeElement) {
+  public static Optional<ComponentAnnotation> subcomponentAnnotation(TypeElement typeElement) {
     return anyComponentAnnotation(typeElement, SUBCOMPONENT_ANNOTATIONS);
   }
 
@@ -146,7 +146,7 @@ String simpleName() {
    * Returns an object representing a root component or subcomponent annotation, if one is present
    * on {@code typeElement}.
    */
-  static Optional<ComponentAnnotation> anyComponentAnnotation(TypeElement typeElement) {
+  public static Optional<ComponentAnnotation> anyComponentAnnotation(TypeElement typeElement) {
     return anyComponentAnnotation(typeElement, ALL_COMPONENT_ANNOTATIONS);
   }
 
@@ -156,13 +156,13 @@ String simpleName() {
   }
 
   /** Returns {@code true} if the argument is a component annotation. */
-  static boolean isComponentAnnotation(AnnotationMirror annotation) {
+  public static boolean isComponentAnnotation(AnnotationMirror annotation) {
     return ALL_COMPONENT_ANNOTATIONS.stream()
         .anyMatch(annotationClass -> isTypeOf(annotationClass, annotation.getAnnotationType()));
   }
 
   /** Creates an object representing a component or subcomponent annotation. */
-  static ComponentAnnotation componentAnnotation(AnnotationMirror annotation) {
+  public static ComponentAnnotation componentAnnotation(AnnotationMirror annotation) {
     RealComponentAnnotation.Builder annotationBuilder =
         RealComponentAnnotation.builder().annotation(annotation);
 
@@ -185,22 +185,22 @@ static ComponentAnnotation componentAnnotation(AnnotationMirror annotation) {
   }
 
   /** Creates a fictional component annotation representing a module. */
-  static ComponentAnnotation fromModuleAnnotation(ModuleAnnotation moduleAnnotation) {
+  public static ComponentAnnotation fromModuleAnnotation(ModuleAnnotation moduleAnnotation) {
     return new AutoValue_ComponentAnnotation_FictionalComponentAnnotation(moduleAnnotation);
   }
 
   /** The root component annotation types. */
-  static ImmutableSet<Class<? extends Annotation>> rootComponentAnnotations() {
+  public static ImmutableSet<Class<? extends Annotation>> rootComponentAnnotations() {
     return ROOT_COMPONENT_ANNOTATIONS;
   }
 
   /** The subcomponent annotation types. */
-  static ImmutableSet<Class<? extends Annotation>> subcomponentAnnotations() {
+  public static ImmutableSet<Class<? extends Annotation>> subcomponentAnnotations() {
     return SUBCOMPONENT_ANNOTATIONS;
   }
 
   /** All component annotation types. */
-  static ImmutableSet<Class<? extends Annotation>> allComponentAnnotations() {
+  public static ImmutableSet<Class<? extends Annotation>> allComponentAnnotations() {
     return ALL_COMPONENT_ANNOTATIONS;
   }
 
@@ -214,42 +214,42 @@ static ComponentAnnotation fromModuleAnnotation(ModuleAnnotation moduleAnnotatio
 
     @Override
     @Memoized
-    ImmutableList<AnnotationValue> dependencyValues() {
+    public ImmutableList<AnnotationValue> dependencyValues() {
       return isSubcomponent() ? ImmutableList.of() : getAnnotationValues("dependencies");
     }
 
     @Override
     @Memoized
-    ImmutableList<TypeMirror> dependencyTypes() {
+    public ImmutableList<TypeMirror> dependencyTypes() {
       return super.dependencyTypes();
     }
 
     @Override
     @Memoized
-    ImmutableList<TypeElement> dependencies() {
+    public ImmutableList<TypeElement> dependencies() {
       return super.dependencies();
     }
 
     @Override
-    boolean isRealComponent() {
+    public boolean isRealComponent() {
       return true;
     }
 
     @Override
     @Memoized
-    ImmutableList<AnnotationValue> moduleValues() {
+    public ImmutableList<AnnotationValue> moduleValues() {
       return getAnnotationValues("modules");
     }
 
     @Override
     @Memoized
-    ImmutableList<TypeMirror> moduleTypes() {
+    public ImmutableList<TypeMirror> moduleTypes() {
       return super.moduleTypes();
     }
 
     @Override
     @Memoized
-    ImmutableSet<TypeElement> modules() {
+    public ImmutableSet<TypeElement> modules() {
       return super.modules();
     }
 
@@ -277,47 +277,47 @@ static Builder builder() {
   abstract static class FictionalComponentAnnotation extends ComponentAnnotation {
 
     @Override
-    AnnotationMirror annotation() {
+    public AnnotationMirror annotation() {
       return moduleAnnotation().annotation();
     }
 
     @Override
-    boolean isSubcomponent() {
+    public boolean isSubcomponent() {
       return false;
     }
 
     @Override
-    boolean isProduction() {
+    public boolean isProduction() {
       return moduleAnnotation().annotationClass().equals(ProducerModule.class);
     }
 
     @Override
-    boolean isRealComponent() {
+    public boolean isRealComponent() {
       return false;
     }
 
     @Override
-    ImmutableList<AnnotationValue> dependencyValues() {
+    public ImmutableList<AnnotationValue> dependencyValues() {
       return ImmutableList.of();
     }
 
     @Override
-    ImmutableList<AnnotationValue> moduleValues() {
+    public ImmutableList<AnnotationValue> moduleValues() {
       return moduleAnnotation().includesAsAnnotationValues();
     }
 
     @Override
     @Memoized
-    ImmutableList<TypeMirror> moduleTypes() {
+    public ImmutableList<TypeMirror> moduleTypes() {
       return super.moduleTypes();
     }
 
     @Override
     @Memoized
-    ImmutableSet<TypeElement> modules() {
+    public ImmutableSet<TypeElement> modules() {
       return super.modules();
     }
 
-    abstract ModuleAnnotation moduleAnnotation();
+    public abstract ModuleAnnotation moduleAnnotation();
   }
 }
diff --git a/java/dagger/internal/codegen/ContributionType.java b/java/dagger/internal/codegen/base/ContributionType.java
similarity index 84%
rename from java/dagger/internal/codegen/ContributionType.java
rename to java/dagger/internal/codegen/base/ContributionType.java
index 66b528985..22571e16c 100644
--- a/java/dagger/internal/codegen/ContributionType.java
+++ b/java/dagger/internal/codegen/base/ContributionType.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.base;
 
 import static com.google.auto.common.MoreElements.isAnnotationPresent;
 
@@ -25,7 +25,7 @@
 import javax.lang.model.element.Element;
 
 /** Whether a binding or declaration is for a unique contribution or a map or set multibinding. */
-enum ContributionType {
+public enum ContributionType {
   /** Represents map bindings. */
   MAP,
   /** Represents set bindings. */
@@ -37,24 +37,24 @@
   ;
 
   /** An object that is associated with a {@link ContributionType}. */
-  interface HasContributionType {
+  public interface HasContributionType {
 
     /** The contribution type of this object. */
     ContributionType contributionType();
   }
 
   /** {@code true} if this is for a multibinding. */
-  boolean isMultibinding() {
+  public boolean isMultibinding() {
     return !this.equals(UNIQUE);
   }
 
   /**
    * The contribution type from a binding element's annotations. Presumes a well-formed binding
    * element (at most one of @IntoSet, @IntoMap, @ElementsIntoSet and @Provides.type). {@link
-   * BindingMethodValidator} and {@link BindsInstanceProcessingStep} validate correctness on their
-   * own.
+   * dagger.internal.codegen.BindingMethodValidator} and {@link
+   * dagger.internal.codegen.BindsInstanceProcessingStep} validate correctness on their own.
    */
-  static ContributionType fromBindingElement(Element element) {
+  public static ContributionType fromBindingElement(Element element) {
     if (isAnnotationPresent(element, IntoMap.class)) {
       return ContributionType.MAP;
     } else if (isAnnotationPresent(element, IntoSet.class)) {
diff --git a/java/dagger/internal/codegen/DiagnosticFormatting.java b/java/dagger/internal/codegen/base/DiagnosticFormatting.java
similarity index 94%
rename from java/dagger/internal/codegen/DiagnosticFormatting.java
rename to java/dagger/internal/codegen/base/DiagnosticFormatting.java
index 8502ecb25..caa908bf7 100644
--- a/java/dagger/internal/codegen/DiagnosticFormatting.java
+++ b/java/dagger/internal/codegen/base/DiagnosticFormatting.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.base;
 
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -22,7 +22,7 @@
 /**
  * Utility methods for formatting diagnostics to the {@link javax.annotation.processing.Messager}.
  */
-final class DiagnosticFormatting {
+public final class DiagnosticFormatting {
 
   /**
    * A regular expression to match a small list of specific packages deemed to be unhelpful to
@@ -54,7 +54,7 @@
    * <p>TODO(cgruber): Tighten these to take type representations (mirrors and elements) to avoid
    * accidental mis-use by running errors through this method.
    */
-  static String stripCommonTypePrefixes(String type) {
+  public static String stripCommonTypePrefixes(String type) {
     // Do regex magic to remove common packages we care to shorten.
     Matcher matcher = COMMON_PACKAGE_PATTERN.matcher(type);
     StringBuilder result = new StringBuilder();
diff --git a/java/dagger/internal/codegen/ElementFormatter.java b/java/dagger/internal/codegen/base/ElementFormatter.java
similarity index 95%
rename from java/dagger/internal/codegen/ElementFormatter.java
rename to java/dagger/internal/codegen/base/ElementFormatter.java
index 40d7606a8..f85fbfde8 100644
--- a/java/dagger/internal/codegen/ElementFormatter.java
+++ b/java/dagger/internal/codegen/base/ElementFormatter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.base;
 
 import static com.google.auto.common.MoreElements.asExecutable;
 import static java.util.stream.Collectors.joining;
@@ -34,7 +34,7 @@
  *
  * <p>Parameters are given with their enclosing executable, with other parameters elided.
  */
-final class ElementFormatter extends Formatter<Element> {
+public final class ElementFormatter extends Formatter<Element> {
   @Inject
   ElementFormatter() {}
 
@@ -50,7 +50,7 @@ public String format(Element element) {
    *
    * <p>Parameters are given with their enclosing executable, with other parameters elided.
    */
-  static String elementToString(Element element) {
+  public static String elementToString(Element element) {
     return element.accept(ELEMENT_TO_STRING, null);
   }
 
diff --git a/java/dagger/internal/codegen/Formatter.java b/java/dagger/internal/codegen/base/Formatter.java
similarity index 90%
rename from java/dagger/internal/codegen/Formatter.java
rename to java/dagger/internal/codegen/base/Formatter.java
index 53d4f9ade..c5e235768 100644
--- a/java/dagger/internal/codegen/Formatter.java
+++ b/java/dagger/internal/codegen/base/Formatter.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.base;
 
 import static com.google.common.base.Preconditions.checkElementIndex;
 
@@ -27,10 +27,10 @@
  *
  * @param <T> the type of the object to be transformed.
  */
-abstract class Formatter<T> implements Function<T, String> {
+public abstract class Formatter<T> implements Function<T, String> {
 
-  static final String INDENT = "    ";
-  static final String DOUBLE_INDENT = INDENT + INDENT;
+  public static final String INDENT = "    ";
+  public static final String DOUBLE_INDENT = INDENT + INDENT;
   private static final int LIST_LIMIT = 10;
 
   /**
@@ -81,7 +81,7 @@ private void appendIndent(StringBuilder builder, int indentLevel) {
     }
   }
 
-  static String formatArgumentInList(int index, int size, CharSequence name) {
+  public static String formatArgumentInList(int index, int size, CharSequence name) {
     checkElementIndex(index, size);
     StringBuilder builder = new StringBuilder();
     if (index > 0) {
diff --git a/java/dagger/internal/codegen/FrameworkTypes.java b/java/dagger/internal/codegen/base/FrameworkTypes.java
similarity index 91%
rename from java/dagger/internal/codegen/FrameworkTypes.java
rename to java/dagger/internal/codegen/base/FrameworkTypes.java
index 19d2eda2d..4cd54a33d 100644
--- a/java/dagger/internal/codegen/FrameworkTypes.java
+++ b/java/dagger/internal/codegen/base/FrameworkTypes.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.base;
 
 import static com.google.auto.common.MoreTypes.isType;
 
@@ -32,7 +32,7 @@
  * A collection of utility methods for dealing with Dagger framework types. A framework type is any
  * type that the framework itself defines.
  */
-final class FrameworkTypes {
+public final class FrameworkTypes {
   private static final ImmutableSet<Class<?>> PROVISION_TYPES =
       ImmutableSet.of(Provider.class, Lazy.class, MembersInjector.class);
 
@@ -42,12 +42,12 @@
       ImmutableSet.of(Produced.class, Producer.class);
 
   /** Returns true if the type represents a producer-related framework type. */
-  static boolean isProducerType(TypeMirror type) {
+  public static boolean isProducerType(TypeMirror type) {
     return isType(type) && typeIsOneOf(PRODUCTION_TYPES, type);
   }
 
   /** Returns true if the type represents a framework type. */
-  static boolean isFrameworkType(TypeMirror type) {
+  public static boolean isFrameworkType(TypeMirror type) {
     return isType(type)
         && (typeIsOneOf(PROVISION_TYPES, type)
             || typeIsOneOf(PRODUCTION_TYPES, type));
diff --git a/java/dagger/internal/codegen/InjectionAnnotations.java b/java/dagger/internal/codegen/base/InjectionAnnotations.java
similarity index 87%
rename from java/dagger/internal/codegen/InjectionAnnotations.java
rename to java/dagger/internal/codegen/base/InjectionAnnotations.java
index 521ad433f..96a889b7a 100644
--- a/java/dagger/internal/codegen/InjectionAnnotations.java
+++ b/java/dagger/internal/codegen/base/InjectionAnnotations.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.base;
 
 import static com.google.auto.common.MoreElements.isAnnotationPresent;
 import static com.google.common.base.Preconditions.checkNotNull;
@@ -35,8 +35,8 @@
 /**
  * Utilities relating to annotations defined in the {@code javax.inject} package.
  */
-final class InjectionAnnotations {
-  static Optional<AnnotationMirror> getQualifier(Element e) {
+public final class InjectionAnnotations {
+  public static Optional<AnnotationMirror> getQualifier(Element e) {
     if (!SuperficialValidation.validateElement(e)) {
       throw new TypeNotPresentException(e.toString(), null);
     }
@@ -53,12 +53,12 @@
     }
   }
 
-  static ImmutableSet<? extends AnnotationMirror> getQualifiers(Element element) {
+  public static ImmutableSet<? extends AnnotationMirror> getQualifiers(Element element) {
     return AnnotationMirrors.getAnnotatedAnnotations(element, Qualifier.class);
   }
 
   /** Returns the constructors in {@code type} that are annotated with {@link Inject}. */
-  static ImmutableSet<ExecutableElement> injectedConstructors(TypeElement type) {
+  public static ImmutableSet<ExecutableElement> injectedConstructors(TypeElement type) {
     return FluentIterable.from(constructorsIn(type.getEnclosedElements()))
         .filter(constructor -> isAnnotationPresent(constructor, Inject.class))
         .toSet();
diff --git a/java/dagger/internal/codegen/Keys.java b/java/dagger/internal/codegen/base/Keys.java
similarity index 93%
rename from java/dagger/internal/codegen/Keys.java
rename to java/dagger/internal/codegen/base/Keys.java
index 670fda78a..a25f9963f 100644
--- a/java/dagger/internal/codegen/Keys.java
+++ b/java/dagger/internal/codegen/base/Keys.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.base;
 
 import com.google.auto.common.MoreElements;
 import com.google.auto.common.MoreTypes;
@@ -31,8 +31,8 @@
 import javax.lang.model.util.SimpleTypeVisitor6;
 
 /** Utility methods related to {@link Key}s. */
-final class Keys {
-  static boolean isValidMembersInjectionKey(Key key) {
+public final class Keys {
+  public static boolean isValidMembersInjectionKey(Key key) {
     return !key.qualifier().isPresent()
         && !key.multibindingContributionIdentifier().isPresent()
         && key.type().getKind().equals(TypeKind.DECLARED);
@@ -42,7 +42,7 @@ static boolean isValidMembersInjectionKey(Key key) {
    * Returns {@code true} if this is valid as an implicit key (that is, if it's valid for a
    * just-in-time binding by discovering an {@code @Inject} constructor).
    */
-  static boolean isValidImplicitProvisionKey(Key key, DaggerTypes types) {
+  public static boolean isValidImplicitProvisionKey(Key key, DaggerTypes types) {
     return isValidImplicitProvisionKey(key.qualifier(), key.type(), types);
   }
 
@@ -51,7 +51,7 @@ static boolean isValidImplicitProvisionKey(Key key, DaggerTypes types) {
    * key (that is, if it's valid for a just-in-time binding by discovering an {@code @Inject}
    * constructor).
    */
-  static boolean isValidImplicitProvisionKey(
+  public static boolean isValidImplicitProvisionKey(
       Optional<? extends AnnotationMirror> qualifier, TypeMirror type, final DaggerTypes types) {
     // Qualifiers disqualify implicit provisioning.
     if (qualifier.isPresent()) {
diff --git a/java/dagger/internal/codegen/MapKeyAccessibility.java b/java/dagger/internal/codegen/base/MapKeyAccessibility.java
similarity index 86%
rename from java/dagger/internal/codegen/MapKeyAccessibility.java
rename to java/dagger/internal/codegen/base/MapKeyAccessibility.java
index ce2787746..93c265aa6 100644
--- a/java/dagger/internal/codegen/MapKeyAccessibility.java
+++ b/java/dagger/internal/codegen/base/MapKeyAccessibility.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.base;
 
 import static dagger.internal.codegen.langmodel.Accessibility.isTypeAccessibleFrom;
 
@@ -28,7 +28,8 @@
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.SimpleAnnotationValueVisitor8;
 
-final class MapKeyAccessibility extends SimpleAnnotationValueVisitor8<Boolean, Void> {
+/** Utility class for checking the visibility of an annotation.  */
+public final class MapKeyAccessibility extends SimpleAnnotationValueVisitor8<Boolean, Void> {
   private final Predicate<TypeMirror> accessibilityChecker;
 
   private MapKeyAccessibility(Predicate<TypeMirror> accessibilityChecker) {
@@ -66,12 +67,13 @@ protected Boolean defaultAction(Object o, Void aVoid) {
     return true;
   }
 
-  static boolean isMapKeyAccessibleFrom(AnnotationMirror annotation, String accessingPackage) {
+  public static boolean isMapKeyAccessibleFrom(
+      AnnotationMirror annotation, String accessingPackage) {
     return new MapKeyAccessibility(type -> isTypeAccessibleFrom(type, accessingPackage))
         .visitAnnotation(annotation, null);
   }
 
-  static boolean isMapKeyPubliclyAccessible(AnnotationMirror annotation) {
+  public static boolean isMapKeyPubliclyAccessible(AnnotationMirror annotation) {
     return new MapKeyAccessibility(Accessibility::isTypePubliclyAccessible)
         .visitAnnotation(annotation, null);
   }
diff --git a/java/dagger/internal/codegen/MapType.java b/java/dagger/internal/codegen/base/MapType.java
similarity index 87%
rename from java/dagger/internal/codegen/MapType.java
rename to java/dagger/internal/codegen/base/MapType.java
index 73ecdbfa3..4e2307a6c 100644
--- a/java/dagger/internal/codegen/MapType.java
+++ b/java/dagger/internal/codegen/base/MapType.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.base;
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkState;
@@ -31,7 +31,7 @@
  * Information about a {@link Map} {@link TypeMirror}.
  */
 @AutoValue
-abstract class MapType {
+public abstract class MapType {
   /**
    * The map type itself, wrapped using {@link MoreTypes#equivalence()}. Use
    * {@link #declaredMapType()} instead.
@@ -41,43 +41,43 @@
   /**
    * The map type itself.
    */
-  DeclaredType declaredMapType() {
+  private DeclaredType declaredMapType() {
     return wrappedDeclaredMapType().get();
   }
 
   /**
    * {@code true} if the map type is the raw {@link Map} type.
    */
-  boolean isRawType() {
+  public boolean isRawType() {
     return declaredMapType().getTypeArguments().isEmpty();
   }
 
   /**
    * The map key type.
-   * 
+   *
    * @throws IllegalStateException if {@link #isRawType()} is true.
    */
-  TypeMirror keyType() {
+  public TypeMirror keyType() {
     checkState(!isRawType());
     return declaredMapType().getTypeArguments().get(0);
   }
 
   /**
    * The map value type.
-   * 
+   *
    * @throws IllegalStateException if {@link #isRawType()} is true.
    */
-  TypeMirror valueType() {
+  public TypeMirror valueType() {
     checkState(!isRawType());
     return declaredMapType().getTypeArguments().get(1);
   }
 
   /**
    * {@code true} if {@link #valueType()} is a {@code clazz}.
-   * 
+   *
    * @throws IllegalStateException if {@link #isRawType()} is true.
    */
-  boolean valuesAreTypeOf(Class<?> clazz) {
+  public boolean valuesAreTypeOf(Class<?> clazz) {
     return MoreTypes.isType(valueType()) && MoreTypes.isTypeOf(clazz, valueType());
   }
 
@@ -85,7 +85,7 @@ boolean valuesAreTypeOf(Class<?> clazz) {
    * Returns {@code true} if the {@linkplain #valueType() value type} of the {@link Map} is a
    * {@linkplain FrameworkTypes#isFrameworkType(TypeMirror) framework type}.
    */
-  boolean valuesAreFrameworkType() {
+  public boolean valuesAreFrameworkType() {
     return FrameworkTypes.isFrameworkType(valueType());
   }
 
@@ -96,7 +96,7 @@ boolean valuesAreFrameworkType() {
    * @throws IllegalStateException if {@link #isRawType()} is true or {@link #valueType()} is not a
    *     framework type
    */
-  TypeMirror unwrappedFrameworkValueType() {
+  public TypeMirror unwrappedFrameworkValueType() {
     checkState(
         valuesAreFrameworkType(), "called unwrappedFrameworkValueType() on %s", declaredMapType());
     return uncheckedUnwrappedValueType();
@@ -110,7 +110,7 @@ TypeMirror unwrappedFrameworkValueType() {
    * @throws IllegalArgumentException if {@code wrappingClass} does not have exactly one type
    *     parameter
    */
-  TypeMirror unwrappedValueType(Class<?> wrappingClass) {
+  public TypeMirror unwrappedValueType(Class<?> wrappingClass) {
     checkArgument(
         wrappingClass.getTypeParameters().length == 1,
         "%s must have exactly one type parameter",
@@ -126,14 +126,14 @@ private TypeMirror uncheckedUnwrappedValueType() {
   /**
    * {@code true} if {@code type} is a {@link Map} type.
    */
-  static boolean isMap(TypeMirror type) {
+  public static boolean isMap(TypeMirror type) {
     return MoreTypes.isType(type) && MoreTypes.isTypeOf(Map.class, type);
   }
 
   /**
    * {@code true} if {@code key.type()} is a {@link Map} type.
    */
-  static boolean isMap(Key key) {
+  public static boolean isMap(Key key) {
     return isMap(key.type());
   }
 
@@ -142,7 +142,7 @@ static boolean isMap(Key key) {
    *
    * @throws IllegalArgumentException if {@code type} is not a {@link Map} type
    */
-  static MapType from(TypeMirror type) {
+  public static MapType from(TypeMirror type) {
     checkArgument(isMap(type), "%s is not a Map", type);
     return new AutoValue_MapType(MoreTypes.equivalence().wrap(MoreTypes.asDeclared(type)));
   }
@@ -152,7 +152,7 @@ static MapType from(TypeMirror type) {
    *
    * @throws IllegalArgumentException if {@code key.type()} is not a {@link Map} type
    */
-  static MapType from(Key key) {
+  public static MapType from(Key key) {
     return from(key.type());
   }
 }
diff --git a/java/dagger/internal/codegen/ModuleAnnotation.java b/java/dagger/internal/codegen/base/ModuleAnnotation.java
similarity index 84%
rename from java/dagger/internal/codegen/ModuleAnnotation.java
rename to java/dagger/internal/codegen/base/ModuleAnnotation.java
index 16a3690f9..e6071dd73 100644
--- a/java/dagger/internal/codegen/ModuleAnnotation.java
+++ b/java/dagger/internal/codegen/base/ModuleAnnotation.java
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.base;
 
 import static com.google.auto.common.AnnotationMirrors.getAnnotationValue;
 import static com.google.auto.common.MoreTypes.asTypeElement;
 import static com.google.common.base.Preconditions.checkArgument;
-import static dagger.internal.codegen.MoreAnnotationValues.asAnnotationValues;
+import static dagger.internal.codegen.base.MoreAnnotationValues.asAnnotationValues;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableList;
 import static dagger.internal.codegen.langmodel.DaggerElements.getAnyAnnotation;
 
@@ -38,18 +38,18 @@
 
 /** A {@code @Module} or {@code @ProducerModule} annotation. */
 @AutoValue
-abstract class ModuleAnnotation {
+public abstract class ModuleAnnotation {
   private static final ImmutableSet<Class<? extends Annotation>> MODULE_ANNOTATIONS =
       ImmutableSet.of(Module.class, ProducerModule.class);
 
   /** The annotation itself. */
   // This does not use AnnotationMirrors.equivalence() because we want the actual annotation
   // instance.
-  abstract AnnotationMirror annotation();
+  public abstract AnnotationMirror annotation();
 
   /** The type of the annotation. */
   @Memoized
-  Class<?> annotationClass() {
+  public Class<?> annotationClass() {
     try {
       return Class.forName(
           asTypeElement(annotation().getAnnotationType()).getQualifiedName().toString());
@@ -66,7 +66,7 @@
    * @throws IllegalArgumentException if any of the values are error types
    */
   @Memoized
-  ImmutableList<TypeElement> includes() {
+  public ImmutableList<TypeElement> includes() {
     return includesAsAnnotationValues().stream()
         .map(MoreAnnotationValues::asType)
         .map(MoreTypes::asTypeElement)
@@ -75,7 +75,7 @@
 
   /** The values specified in the {@code includes} attribute. */
   @Memoized
-  ImmutableList<AnnotationValue> includesAsAnnotationValues() {
+  public ImmutableList<AnnotationValue> includesAsAnnotationValues() {
     return asAnnotationValues(getAnnotationValue(annotation(), "includes"));
   }
 
@@ -85,7 +85,7 @@
    * @throws IllegalArgumentException if any of the values are error types
    */
   @Memoized
-  ImmutableList<TypeElement> subcomponents() {
+  public ImmutableList<TypeElement> subcomponents() {
     return subcomponentsAsAnnotationValues().stream()
         .map(MoreAnnotationValues::asType)
         .map(MoreTypes::asTypeElement)
@@ -94,19 +94,19 @@
 
   /** The values specified in the {@code subcomponents} attribute. */
   @Memoized
-  ImmutableList<AnnotationValue> subcomponentsAsAnnotationValues() {
+  public ImmutableList<AnnotationValue> subcomponentsAsAnnotationValues() {
     return asAnnotationValues(getAnnotationValue(annotation(), "subcomponents"));
   }
 
   /** Returns {@code true} if the argument is a {@code @Module} or {@code @ProducerModule}. */
-  static boolean isModuleAnnotation(AnnotationMirror annotation) {
+  public static boolean isModuleAnnotation(AnnotationMirror annotation) {
     return MODULE_ANNOTATIONS.stream()
         .map(Class::getCanonicalName)
         .anyMatch(asTypeElement(annotation.getAnnotationType()).getQualifiedName()::contentEquals);
   }
 
   /** The module annotation types. */
-  static ImmutableSet<Class<? extends Annotation>> moduleAnnotations() {
+  public static ImmutableSet<Class<? extends Annotation>> moduleAnnotations() {
     return MODULE_ANNOTATIONS;
   }
 
@@ -116,7 +116,7 @@ static boolean isModuleAnnotation(AnnotationMirror annotation) {
    * @throws IllegalArgumentException if {@link #isModuleAnnotation(AnnotationMirror)} returns
    *     {@code false}
    */
-  static ModuleAnnotation moduleAnnotation(AnnotationMirror annotation) {
+  public static ModuleAnnotation moduleAnnotation(AnnotationMirror annotation) {
     checkArgument(
         isModuleAnnotation(annotation),
         "%s is not a Module or ProducerModule annotation",
@@ -128,7 +128,7 @@ static ModuleAnnotation moduleAnnotation(AnnotationMirror annotation) {
    * Returns an object representing the {@code @Module} or {@code @ProducerModule} annotation if one
    * annotates {@code typeElement}.
    */
-  static Optional<ModuleAnnotation> moduleAnnotation(TypeElement typeElement) {
+  public static Optional<ModuleAnnotation> moduleAnnotation(TypeElement typeElement) {
     return getAnyAnnotation(typeElement, Module.class, ProducerModule.class)
         .map(ModuleAnnotation::moduleAnnotation);
   }
diff --git a/java/dagger/internal/codegen/MoreAnnotationMirrors.java b/java/dagger/internal/codegen/base/MoreAnnotationMirrors.java
similarity index 83%
rename from java/dagger/internal/codegen/MoreAnnotationMirrors.java
rename to java/dagger/internal/codegen/base/MoreAnnotationMirrors.java
index e803bf1bf..234ecc10e 100644
--- a/java/dagger/internal/codegen/MoreAnnotationMirrors.java
+++ b/java/dagger/internal/codegen/base/MoreAnnotationMirrors.java
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.base;
 
 import static com.google.auto.common.AnnotationMirrors.getAnnotationValue;
-import static dagger.internal.codegen.MoreAnnotationValues.asAnnotationValues;
+import static dagger.internal.codegen.base.MoreAnnotationValues.asAnnotationValues;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableList;
 
 import com.google.auto.common.AnnotationMirrors;
@@ -32,7 +32,7 @@
  * A utility class for working with {@link AnnotationMirror} instances, similar to {@link
  * AnnotationMirrors}.
  */
-final class MoreAnnotationMirrors {
+public final class MoreAnnotationMirrors {
 
   private MoreAnnotationMirrors() {}
 
@@ -40,7 +40,7 @@ private MoreAnnotationMirrors() {}
    * Wraps an {@link Optional} of a type in an {@code Optional} of a {@link Equivalence.Wrapper} for
    * that type.
    */
-  static Optional<Equivalence.Wrapper<AnnotationMirror>> wrapOptionalInEquivalence(
+  public static Optional<Equivalence.Wrapper<AnnotationMirror>> wrapOptionalInEquivalence(
       Optional<AnnotationMirror> optional) {
     return optional.map(AnnotationMirrors.equivalence()::wrap);
   }
@@ -49,12 +49,12 @@ private MoreAnnotationMirrors() {}
    * Unwraps an {@link Optional} of a {@link Equivalence.Wrapper} into an {@code Optional} of the
    * underlying type.
    */
-  static Optional<AnnotationMirror> unwrapOptionalEquivalence(
+  public static Optional<AnnotationMirror> unwrapOptionalEquivalence(
       Optional<Equivalence.Wrapper<AnnotationMirror>> wrappedOptional) {
     return wrappedOptional.map(Equivalence.Wrapper::get);
   }
 
-  static Name simpleName(AnnotationMirror annotationMirror) {
+  public static Name simpleName(AnnotationMirror annotationMirror) {
     return annotationMirror.getAnnotationType().asElement().getSimpleName();
   }
 
@@ -63,7 +63,7 @@ static Name simpleName(AnnotationMirror annotationMirror) {
    *
    * @throws IllegalArgumentException unless that member represents an array of types
    */
-  static ImmutableList<TypeMirror> getTypeListValue(
+  public static ImmutableList<TypeMirror> getTypeListValue(
       AnnotationMirror annotationMirror, String name) {
     return asAnnotationValues(getAnnotationValue(annotationMirror, name))
         .stream()
diff --git a/java/dagger/internal/codegen/MoreAnnotationValues.java b/java/dagger/internal/codegen/base/MoreAnnotationValues.java
similarity index 91%
rename from java/dagger/internal/codegen/MoreAnnotationValues.java
rename to java/dagger/internal/codegen/base/MoreAnnotationValues.java
index 84a4d94b0..463885aab 100644
--- a/java/dagger/internal/codegen/MoreAnnotationValues.java
+++ b/java/dagger/internal/codegen/base/MoreAnnotationValues.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.base;
 
 import com.google.common.collect.ImmutableList;
 import java.util.List;
@@ -24,13 +24,13 @@
 import javax.lang.model.util.SimpleAnnotationValueVisitor8;
 
 /** Utility methods for working with {@link AnnotationValue} instances. */
-final class MoreAnnotationValues {
+public final class MoreAnnotationValues {
   /**
    * Returns the list of values represented by an array annotation value.
    *
    * @throws IllegalArgumentException unless {@code annotationValue} represents an array
    */
-  static ImmutableList<AnnotationValue> asAnnotationValues(AnnotationValue annotationValue) {
+  public static ImmutableList<AnnotationValue> asAnnotationValues(AnnotationValue annotationValue) {
     return annotationValue.accept(AS_ANNOTATION_VALUES, null);
   }
 
@@ -54,7 +54,7 @@
    *
    * @throws IllegalArgumentException unless {@code annotationValue} represents a single type
    */
-  static TypeMirror asType(AnnotationValue annotationValue) {
+  public static TypeMirror asType(AnnotationValue annotationValue) {
     return AS_TYPE.visit(annotationValue);
   }
 
diff --git a/java/dagger/internal/codegen/MultibindingAnnotations.java b/java/dagger/internal/codegen/base/MultibindingAnnotations.java
similarity index 87%
rename from java/dagger/internal/codegen/MultibindingAnnotations.java
rename to java/dagger/internal/codegen/base/MultibindingAnnotations.java
index b478704fa..424f92a20 100644
--- a/java/dagger/internal/codegen/MultibindingAnnotations.java
+++ b/java/dagger/internal/codegen/base/MultibindingAnnotations.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.base;
 
 import static dagger.internal.codegen.langmodel.DaggerElements.getAllAnnotations;
 
@@ -29,8 +29,8 @@
  * Utility methods related to processing {@link IntoSet}, {@link ElementsIntoSet}, and {@link
  * IntoMap}.
  */
-final class MultibindingAnnotations {
-  static ImmutableSet<AnnotationMirror> forElement(Element method) {
+public final class MultibindingAnnotations {
+  public static ImmutableSet<AnnotationMirror> forElement(Element method) {
     return getAllAnnotations(method, IntoSet.class, ElementsIntoSet.class, IntoMap.class);
   }
 }
diff --git a/java/dagger/internal/codegen/OptionalType.java b/java/dagger/internal/codegen/base/OptionalType.java
similarity index 86%
rename from java/dagger/internal/codegen/OptionalType.java
rename to java/dagger/internal/codegen/base/OptionalType.java
index 0fdbf685d..15056828e 100644
--- a/java/dagger/internal/codegen/OptionalType.java
+++ b/java/dagger/internal/codegen/base/OptionalType.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.base;
 
 import static com.google.common.base.Preconditions.checkArgument;
 
@@ -40,10 +40,10 @@
  * <p>{@link com.google.common.base.Optional} and {@link java.util.Optional} are supported.
  */
 @AutoValue
-abstract class OptionalType {
+public abstract class OptionalType {
 
   /** A variant of {@code Optional}. */
-  enum OptionalKind {
+  public enum OptionalKind {
     /** {@link com.google.common.base.Optional}. */
     GUAVA_OPTIONAL(com.google.common.base.Optional.class, "absent"),
 
@@ -60,24 +60,24 @@
     }
 
     /** Returns {@code valueType} wrapped in the correct class. */
-    ParameterizedTypeName of(TypeName valueType) {
+    public ParameterizedTypeName of(TypeName valueType) {
       return ParameterizedTypeName.get(ClassName.get(clazz), valueType);
     }
 
     /** Returns an expression for the absent/empty value. */
-    CodeBlock absentValueExpression() {
+    public CodeBlock absentValueExpression() {
       return CodeBlock.of("$T.$L()", clazz, absentFactoryMethodName);
     }
 
     /**
      * Returns an expression for the absent/empty value, parameterized with {@link #valueType()}.
      */
-    CodeBlock parameterizedAbsentValueExpression(OptionalType optionalType) {
+    public CodeBlock parameterizedAbsentValueExpression(OptionalType optionalType) {
       return CodeBlock.of("$T.<$T>$L()", clazz, optionalType.valueType(), absentFactoryMethodName);
     }
 
     /** Returns an expression for the present {@code value}. */
-    CodeBlock presentExpression(CodeBlock value) {
+    public CodeBlock presentExpression(CodeBlock value) {
       return CodeBlock.of("$T.of($L)", clazz, value);
     }
 
@@ -85,7 +85,7 @@ CodeBlock presentExpression(CodeBlock value) {
      * Returns an expression for the present {@code value}, returning {@code Optional<Object>} no
      * matter what type the value is.
      */
-    CodeBlock presentObjectExpression(CodeBlock value) {
+    public CodeBlock presentObjectExpression(CodeBlock value) {
       return CodeBlock.of("$T.<$T>of($L)", clazz, Object.class, value);
     }
   }
@@ -114,27 +114,27 @@ CodeBlock presentObjectExpression(CodeBlock value) {
 
   /** The optional type itself. */
   @SuppressWarnings("deprecation")
-  DeclaredType declaredOptionalType() {
+  private DeclaredType declaredOptionalType() {
     return wrappedDeclaredOptionalType().get();
   }
-  
+
   /** Which {@code Optional} type is used. */
-  OptionalKind kind() {
+  public OptionalKind kind() {
     return declaredOptionalType().accept(OPTIONAL_KIND, null).get();
   }
 
   /** The value type. */
-  TypeMirror valueType() {
+  public TypeMirror valueType() {
     return declaredOptionalType().getTypeArguments().get(0);
   }
 
   /** Returns {@code true} if {@code type} is an {@code Optional} type. */
-  static boolean isOptional(TypeMirror type) {
+  private static boolean isOptional(TypeMirror type) {
     return type.accept(OPTIONAL_KIND, null).isPresent();
   }
 
   /** Returns {@code true} if {@code key.type()} is an {@code Optional} type. */
-  static boolean isOptional(Key key) {
+  public static boolean isOptional(Key key) {
     return isOptional(key.type());
   }
 
@@ -143,7 +143,7 @@ static boolean isOptional(Key key) {
    *
    * @throws IllegalArgumentException if {@code type} is not an {@code Optional} type
    */
-  static OptionalType from(TypeMirror type) {
+  public static OptionalType from(TypeMirror type) {
     checkArgument(isOptional(type), "%s must be an Optional", type);
     return new AutoValue_OptionalType(MoreTypes.equivalence().wrap(MoreTypes.asDeclared(type)));
   }
@@ -153,7 +153,7 @@ static OptionalType from(TypeMirror type) {
    *
    * @throws IllegalArgumentException if {@code key.type()} is not an {@code Optional} type
    */
-  static OptionalType from(Key key) {
+  public static OptionalType from(Key key) {
     return from(key.type());
   }
 }
diff --git a/java/dagger/internal/codegen/RequestKinds.java b/java/dagger/internal/codegen/base/RequestKinds.java
similarity index 88%
rename from java/dagger/internal/codegen/RequestKinds.java
rename to java/dagger/internal/codegen/base/RequestKinds.java
index aa17f5ead..a4110b3a7 100644
--- a/java/dagger/internal/codegen/RequestKinds.java
+++ b/java/dagger/internal/codegen/base/RequestKinds.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.base;
 
 import static com.google.auto.common.MoreTypes.asDeclared;
 import static com.google.auto.common.MoreTypes.isType;
@@ -47,9 +47,10 @@
 import javax.lang.model.type.TypeMirror;
 
 /** Utility methods for {@link RequestKind}s. */
-final class RequestKinds {
+public final class RequestKinds {
   /** Returns the type of a request of this kind for a key with a given type. */
-  static TypeMirror requestType(RequestKind requestKind, TypeMirror type, DaggerTypes types) {
+  public static TypeMirror requestType(
+      RequestKind requestKind, TypeMirror type, DaggerTypes types) {
     switch (requestKind) {
       case INSTANCE:
         return type;
@@ -66,7 +67,7 @@ static TypeMirror requestType(RequestKind requestKind, TypeMirror type, DaggerTy
   }
 
   /** Returns the type of a request of this kind for a key with a given type. */
-  static TypeName requestTypeName(RequestKind requestKind, TypeName keyType) {
+  public static TypeName requestTypeName(RequestKind requestKind, TypeName keyType) {
     switch (requestKind) {
       case INSTANCE:
         return keyType;
@@ -102,7 +103,7 @@ static TypeName requestTypeName(RequestKind requestKind, TypeName keyType) {
           PRODUCED, Produced.class);
 
   /** Returns the {@link RequestKind} that matches the wrapping types (if any) of {@code type}. */
-  static RequestKind getRequestKind(TypeMirror type) {
+  public static RequestKind getRequestKind(TypeMirror type) {
     checkTypePresent(type);
     for (RequestKind kind : FRAMEWORK_CLASSES.keySet()) {
       if (matchesKind(kind, type)) {
@@ -134,7 +135,7 @@ private static boolean matchesKind(RequestKind kind, TypeMirror type) {
    * @throws IllegalArgumentException if {@code type} is not wrapped with {@code requestKind}'s
    *     framework class(es).
    */
-  static TypeMirror extractKeyType(RequestKind requestKind, TypeMirror type) {
+  public static TypeMirror extractKeyType(RequestKind requestKind, TypeMirror type) {
     checkTypePresent(type);
     switch (requestKind) {
       case INSTANCE:
@@ -159,7 +160,7 @@ static TypeMirror extractKeyType(RequestKind requestKind, TypeMirror type) {
    * classes, and {@link RequestKind#FUTURE} is wrapped with a {@link ListenableFuture}, but for
    * historical/implementation reasons has not had an associated framework class.
    */
-  static Class<?> frameworkClass(RequestKind requestKind) {
+  public static Class<?> frameworkClass(RequestKind requestKind) {
     Class<?> result = FRAMEWORK_CLASSES.get(requestKind);
     checkArgument(result != null, "no framework class for %s", requestKind);
     return result;
@@ -169,7 +170,7 @@ static TypeMirror extractKeyType(RequestKind requestKind, TypeMirror type) {
    * Returns {@code true} if requests for {@code requestKind} can be satisfied by a production
    * binding.
    */
-  static boolean canBeSatisfiedByProductionBinding(RequestKind requestKind) {
+  public static boolean canBeSatisfiedByProductionBinding(RequestKind requestKind) {
     switch (requestKind) {
       case INSTANCE:
       case PROVIDER:
@@ -185,19 +186,5 @@ static boolean canBeSatisfiedByProductionBinding(RequestKind requestKind) {
     throw new AssertionError();
   }
 
-  /**
-   * Returns true if {@code requestKind} is always derived from a {@link RequestKind#PROVIDER}
-   * instance.
-   */
-  static boolean isDerivedFromProvider(RequestKind requestKind) {
-    switch (requestKind) {
-      case LAZY:
-      case PROVIDER_OF_LAZY:
-        return true;
-      default:
-        return false;
-    }
-  }
-
   private RequestKinds() {}
 }
diff --git a/java/dagger/internal/codegen/Scopes.java b/java/dagger/internal/codegen/base/Scopes.java
similarity index 80%
rename from java/dagger/internal/codegen/Scopes.java
rename to java/dagger/internal/codegen/base/Scopes.java
index 4a47fecf8..f2c39cea0 100644
--- a/java/dagger/internal/codegen/Scopes.java
+++ b/java/dagger/internal/codegen/base/Scopes.java
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.base;
 
 import static com.google.common.collect.Iterables.getOnlyElement;
-import static dagger.internal.codegen.DiagnosticFormatting.stripCommonTypePrefixes;
+import static dagger.internal.codegen.base.DiagnosticFormatting.stripCommonTypePrefixes;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableSet;
 
 import com.google.auto.common.AnnotationMirrors;
@@ -29,37 +29,33 @@
 import java.util.Optional;
 import javax.inject.Singleton;
 import javax.lang.model.element.Element;
-import javax.lang.model.element.TypeElement;
 
 /** Common names and convenience methods for {@link Scope}s. */
-final class Scopes {
-  /**
-   * Creates a {@link Scope} object from the {@link javax.inject.Scope}-annotated annotation type.
-   */
-  static Scope scope(TypeElement scopeType) {
-    return Scope.scope(SimpleAnnotationMirror.of(scopeType));
-  }
+public final class Scopes {
 
   /** Returns a representation for {@link ProductionScope @ProductionScope} scope. */
-  static Scope productionScope(DaggerElements elements) {
+  public static Scope productionScope(DaggerElements elements) {
     return scope(elements, ProductionScope.class);
   }
 
   /** Returns a representation for {@link Singleton @Singleton} scope. */
-  static Scope singletonScope(DaggerElements elements) {
+  public static Scope singletonScope(DaggerElements elements) {
     return scope(elements, Singleton.class);
   }
 
+  /**
+   * Creates a {@link Scope} object from the {@link javax.inject.Scope}-annotated annotation type.
+   */
   private static Scope scope(
       DaggerElements elements, Class<? extends Annotation> scopeAnnotationClass) {
-    return scope(elements.getTypeElement(scopeAnnotationClass));
+    return Scope.scope(SimpleAnnotationMirror.of(elements.getTypeElement(scopeAnnotationClass)));
   }
 
   /**
    * Returns at most one associated scoped annotation from the source code element, throwing an
    * exception if there are more than one.
    */
-  static Optional<Scope> uniqueScopeOf(Element element) {
+  public static Optional<Scope> uniqueScopeOf(Element element) {
     // TODO(ronshapiro): Use MoreCollectors.toOptional() once we can use guava-jre
     return Optional.ofNullable(getOnlyElement(scopesOf(element), null));
   }
@@ -70,12 +66,12 @@ private static Scope scope(
    * <p>It's readable source because it has had common package prefixes removed, e.g.
    * {@code @javax.inject.Singleton} is returned as {@code @Singleton}.
    */
-  static String getReadableSource(Scope scope) {
+  public static String getReadableSource(Scope scope) {
     return stripCommonTypePrefixes(scope.toString());
   }
 
   /** Returns all of the associated scopes for a source code element. */
-  static ImmutableSet<Scope> scopesOf(Element element) {
+  public static ImmutableSet<Scope> scopesOf(Element element) {
     return AnnotationMirrors.getAnnotatedAnnotations(element, javax.inject.Scope.class)
         .stream()
         .map(Scope::scope)
diff --git a/java/dagger/internal/codegen/SetType.java b/java/dagger/internal/codegen/base/SetType.java
similarity index 86%
rename from java/dagger/internal/codegen/SetType.java
rename to java/dagger/internal/codegen/base/SetType.java
index e4fa58469..a75a6d316 100644
--- a/java/dagger/internal/codegen/SetType.java
+++ b/java/dagger/internal/codegen/base/SetType.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.base;
 
 import static com.google.common.base.Preconditions.checkArgument;
 
@@ -30,38 +30,38 @@
  * Information about a {@link Set} {@link TypeMirror}.
  */
 @AutoValue
-abstract class SetType {
+public abstract class SetType {
   /**
    * The set type itself, wrapped using {@link MoreTypes#equivalence()}. Use
    * {@link #declaredSetType()} instead.
    */
   protected abstract Equivalence.Wrapper<DeclaredType> wrappedDeclaredSetType();
-  
+
   /**
    * The set type itself.
    */
-  DeclaredType declaredSetType() {
+  private DeclaredType declaredSetType() {
     return wrappedDeclaredSetType().get();
   }
 
   /**
    * {@code true} if the set type is the raw {@link Set} type.
    */
-  boolean isRawType() {
+  public boolean isRawType() {
     return declaredSetType().getTypeArguments().isEmpty();
   }
 
   /**
    * The element type.
    */
-  TypeMirror elementType() {
+  public TypeMirror elementType() {
     return declaredSetType().getTypeArguments().get(0);
   }
 
   /**
    * {@code true} if {@link #elementType()} is a {@code clazz}.
    */
-  boolean elementsAreTypeOf(Class<?> clazz) {
+  public boolean elementsAreTypeOf(Class<?> clazz) {
     return MoreTypes.isType(elementType()) && MoreTypes.isTypeOf(clazz, elementType());
   }
 
@@ -72,7 +72,7 @@ boolean elementsAreTypeOf(Class<?> clazz) {
    * @throws IllegalArgumentException if {@code wrappingClass} does not have exactly one type
    *     parameter
    */
-  TypeMirror unwrappedElementType(Class<?> wrappingClass) {
+  public TypeMirror unwrappedElementType(Class<?> wrappingClass) {
     checkArgument(
         wrappingClass.getTypeParameters().length == 1,
         "%s must have exactly one type parameter",
@@ -88,14 +88,14 @@ TypeMirror unwrappedElementType(Class<?> wrappingClass) {
   /**
    * {@code true} if {@code type} is a {@link Set} type.
    */
-  static boolean isSet(TypeMirror type) {
+  public static boolean isSet(TypeMirror type) {
     return MoreTypes.isType(type) && MoreTypes.isTypeOf(Set.class, type);
   }
 
   /**
    * {@code true} if {@code key.type()} is a {@link Set} type.
    */
-  static boolean isSet(Key key) {
+  public static boolean isSet(Key key) {
     return isSet(key.type());
   }
 
@@ -104,7 +104,7 @@ static boolean isSet(Key key) {
    *
    * @throws IllegalArgumentException if {@code type} is not a {@link Set} type
    */
-  static SetType from(TypeMirror type) {
+  public static SetType from(TypeMirror type) {
     checkArgument(isSet(type), "%s must be a Set", type);
     return new AutoValue_SetType(MoreTypes.equivalence().wrap(MoreTypes.asDeclared(type)));
   }
@@ -114,7 +114,7 @@ static SetType from(TypeMirror type) {
    *
    * @throws IllegalArgumentException if {@code key.type()} is not a {@link Set} type
    */
-  static SetType from(Key key) {
+  public static SetType from(Key key) {
     return from (key.type());
   }
 }
diff --git a/java/dagger/internal/codegen/SimpleAnnotationMirror.java b/java/dagger/internal/codegen/base/SimpleAnnotationMirror.java
similarity index 94%
rename from java/dagger/internal/codegen/SimpleAnnotationMirror.java
rename to java/dagger/internal/codegen/base/SimpleAnnotationMirror.java
index 505c8eaef..9690691eb 100644
--- a/java/dagger/internal/codegen/SimpleAnnotationMirror.java
+++ b/java/dagger/internal/codegen/base/SimpleAnnotationMirror.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.base;
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static javax.lang.model.util.ElementFilter.methodsIn;
@@ -34,7 +34,7 @@
 import javax.lang.model.type.DeclaredType;
 
 /** A representation of an annotation. */
-final class SimpleAnnotationMirror implements AnnotationMirror {
+public final class SimpleAnnotationMirror implements AnnotationMirror {
   private final TypeElement annotationType;
   private final ImmutableMap<String, ? extends AnnotationValue> namedValues;
   private final ImmutableMap<ExecutableElement, ? extends AnnotationValue> elementValues;
@@ -89,7 +89,7 @@ public String toString() {
    *
    * @param annotationType must be an annotation type with no members
    */
-  static AnnotationMirror of(TypeElement annotationType) {
+  public static AnnotationMirror of(TypeElement annotationType) {
     return of(annotationType, ImmutableMap.<String, AnnotationValue>of());
   }
 
@@ -100,7 +100,7 @@ static AnnotationMirror of(TypeElement annotationType) {
    * @param namedValues a value for every annotation member, including those with defaults, indexed
    *     by simple name
    */
-  static AnnotationMirror of(
+  private static AnnotationMirror of(
       TypeElement annotationType, Map<String, ? extends AnnotationValue> namedValues) {
     return new SimpleAnnotationMirror(annotationType, namedValues);
   }
diff --git a/java/dagger/internal/codegen/SimpleTypeAnnotationValue.java b/java/dagger/internal/codegen/base/SimpleTypeAnnotationValue.java
similarity index 97%
rename from java/dagger/internal/codegen/SimpleTypeAnnotationValue.java
rename to java/dagger/internal/codegen/base/SimpleTypeAnnotationValue.java
index 7f043db02..d595bcb70 100644
--- a/java/dagger/internal/codegen/SimpleTypeAnnotationValue.java
+++ b/java/dagger/internal/codegen/base/SimpleTypeAnnotationValue.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.base;
 
 import javax.lang.model.element.AnnotationValue;
 import javax.lang.model.element.AnnotationValueVisitor;
diff --git a/java/dagger/internal/codegen/SourceFileGenerationException.java b/java/dagger/internal/codegen/base/SourceFileGenerationException.java
similarity index 92%
rename from java/dagger/internal/codegen/SourceFileGenerationException.java
rename to java/dagger/internal/codegen/base/SourceFileGenerationException.java
index 07c1c68d6..5553dd85b 100644
--- a/java/dagger/internal/codegen/SourceFileGenerationException.java
+++ b/java/dagger/internal/codegen/base/SourceFileGenerationException.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.base;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 import static javax.tools.Diagnostic.Kind.ERROR;
@@ -31,7 +31,7 @@
  * other errors that might have been caught upon further processing. Use a {@link ValidationReport}
  * for that.
  */
-final class SourceFileGenerationException extends Exception {
+public final class SourceFileGenerationException extends Exception {
   private final Element associatedElement;
 
   SourceFileGenerationException(
@@ -48,7 +48,7 @@ private static String createMessage(Optional<ClassName> generatedClassName, Stri
         message);
   }
 
-  void printMessageTo(Messager messager) {
+  public void printMessageTo(Messager messager) {
     messager.printMessage(ERROR, getMessage(), associatedElement);
   }
 }
diff --git a/java/dagger/internal/codegen/SourceFileGenerator.java b/java/dagger/internal/codegen/base/SourceFileGenerator.java
similarity index 90%
rename from java/dagger/internal/codegen/SourceFileGenerator.java
rename to java/dagger/internal/codegen/base/SourceFileGenerator.java
index ad7c4dcfc..87f6d62ab 100644
--- a/java/dagger/internal/codegen/SourceFileGenerator.java
+++ b/java/dagger/internal/codegen/base/SourceFileGenerator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.base;
 
 import static com.google.auto.common.GeneratedAnnotations.generatedAnnotation;
 import static com.google.common.base.Preconditions.checkNotNull;
@@ -43,20 +43,20 @@
  *
  * @param <T> The input type from which source is to be generated.
  */
-abstract class SourceFileGenerator<T> {
+public abstract class SourceFileGenerator<T> {
   private static final String GENERATED_COMMENTS = "https://dagger.dev";
 
   private final Filer filer;
   private final DaggerElements elements;
   private final SourceVersion sourceVersion;
 
-  SourceFileGenerator(Filer filer, DaggerElements elements, SourceVersion sourceVersion) {
+  public SourceFileGenerator(Filer filer, DaggerElements elements, SourceVersion sourceVersion) {
     this.filer = checkNotNull(filer);
     this.elements = checkNotNull(elements);
     this.sourceVersion = checkNotNull(sourceVersion);
   }
 
-  SourceFileGenerator(SourceFileGenerator<T> delegate) {
+  public SourceFileGenerator(SourceFileGenerator<T> delegate) {
     this(delegate.filer, delegate.elements, delegate.sourceVersion);
   }
 
@@ -64,7 +64,7 @@
    * Generates a source file to be compiled for {@code T}. Writes any generation exception to {@code
    * messager} and does not throw.
    */
-  void generate(T input, Messager messager) {
+  public void generate(T input, Messager messager) {
     try {
       generate(input);
     } catch (SourceFileGenerationException e) {
@@ -73,7 +73,7 @@ void generate(T input, Messager messager) {
   }
 
   /** Generates a source file to be compiled for {@code T}. */
-  void generate(T input) throws SourceFileGenerationException {
+  public void generate(T input) throws SourceFileGenerationException {
     ClassName generatedTypeName = nameGeneratedType(input);
     Optional<TypeSpec.Builder> type = write(generatedTypeName, input);
     if (!type.isPresent()) {
@@ -120,10 +120,10 @@ private JavaFile buildJavaFile(
   }
 
   /** Implementations should return the {@link ClassName} for the top-level type to be generated. */
-  abstract ClassName nameGeneratedType(T input);
+  public abstract ClassName nameGeneratedType(T input);
 
   /** Returns the originating element of the generating type. */
-  abstract Element originatingElement(T input);
+  public abstract Element originatingElement(T input);
 
   /**
    * Returns a {@link TypeSpec.Builder type} to be generated for {@code T}, or {@link
@@ -131,7 +131,7 @@ private JavaFile buildJavaFile(
    */
   // TODO(ronshapiro): write() makes more sense in JavaWriter where all writers are mutable.
   // consider renaming to something like typeBuilder() which conveys the mutability of the result
-  abstract Optional<TypeSpec.Builder> write(ClassName generatedTypeName, T input);
+  public abstract Optional<TypeSpec.Builder> write(ClassName generatedTypeName, T input);
 
   /** Returns {@link Suppression}s that are applied to files generated by this generator. */
   // TODO(b/134590785): When suppressions are removed locally, remove this and inline the usages
diff --git a/java/dagger/internal/codegen/UniqueNameSet.java b/java/dagger/internal/codegen/base/UniqueNameSet.java
similarity index 89%
rename from java/dagger/internal/codegen/UniqueNameSet.java
rename to java/dagger/internal/codegen/base/UniqueNameSet.java
index 11c48b30a..c1ffe4731 100644
--- a/java/dagger/internal/codegen/UniqueNameSet.java
+++ b/java/dagger/internal/codegen/base/UniqueNameSet.java
@@ -14,20 +14,20 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.base;
 
 import java.util.HashSet;
 import java.util.Set;
 
 /** A collector for names to be used in the same namespace that should not conflict. */
-final class UniqueNameSet {
+public final class UniqueNameSet {
   private final Set<String> uniqueNames = new HashSet<>();
 
   /**
    * Generates a unique name using {@code base}. If {@code base} has not yet been added, it will be
    * returned as-is. If your {@code base} is healthy, this will always return {@code base}.
    */
-  String getUniqueName(CharSequence base) {
+  public String getUniqueName(CharSequence base) {
     String name = base.toString();
     for (int differentiator = 2; !uniqueNames.add(name); differentiator++) {
       name = base.toString() + differentiator;
@@ -39,7 +39,7 @@ String getUniqueName(CharSequence base) {
    * Adds {@code name} without any modification to the name set. Has no effect if {@code name} is
    * already present in the set.
    */
-  void claim(CharSequence name) {
+  public void claim(CharSequence name) {
     uniqueNames.add(name.toString());
   }
 }
diff --git a/java/dagger/internal/codegen/Util.java b/java/dagger/internal/codegen/base/Util.java
similarity index 93%
rename from java/dagger/internal/codegen/Util.java
rename to java/dagger/internal/codegen/base/Util.java
index 1869b7ced..9c4f0f8b5 100644
--- a/java/dagger/internal/codegen/Util.java
+++ b/java/dagger/internal/codegen/base/Util.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.base;
 
 import static javax.lang.model.element.ElementKind.CONSTRUCTOR;
 import static javax.lang.model.element.Modifier.ABSTRACT;
@@ -30,12 +30,12 @@
 /**
  * Utilities for handling types in annotation processors
  */
-final class Util {
+public final class Util {
   /**
    * Returns true if and only if a component can instantiate new instances (typically of a module)
    * rather than requiring that they be passed.
    */
-  static boolean componentCanMakeNewInstances(TypeElement typeElement) {
+  public static boolean componentCanMakeNewInstances(TypeElement typeElement) {
     switch (typeElement.getKind()) {
       case CLASS:
         break;
@@ -86,7 +86,7 @@ private static boolean requiresEnclosingInstance(TypeElement typeElement) {
    * A version of {@link Map#computeIfAbsent(Object, Function)} that allows {@code mappingFunction}
    * to update {@code map}.
    */
-  static <K, V> V reentrantComputeIfAbsent(
+  public static <K, V> V reentrantComputeIfAbsent(
       Map<K, V> map, K key, Function<? super K, ? extends V> mappingFunction) {
     V value = map.get(key);
     if (value == null) {
diff --git a/java/dagger/internal/codegen/package-info.java b/java/dagger/internal/codegen/package-info.java
index c8cc40430..4c478d620 100644
--- a/java/dagger/internal/codegen/package-info.java
+++ b/java/dagger/internal/codegen/package-info.java
@@ -14,6 +14,7 @@
  * limitations under the License.
  */
 
+/** Apply {@link CheckReturnValue} by default to every method in this package. */
 @CheckReturnValue
 package dagger.internal.codegen;
 
diff --git a/javatests/dagger/internal/codegen/BUILD b/javatests/dagger/internal/codegen/BUILD
index 90cc2db08..8a58c3d8c 100644
--- a/javatests/dagger/internal/codegen/BUILD
+++ b/javatests/dagger/internal/codegen/BUILD
@@ -27,12 +27,13 @@ GenJavaTests(
     javacopts = DOCLINT_HTML_AND_SYNTAX,
     deps = [
         "//java/dagger:core",
-        "//java/dagger/internal/codegen:base",
         "//java/dagger/internal/codegen:binding",
         "//java/dagger/internal/codegen:binding_graph_validation",
+        "//java/dagger/internal/codegen:package_info",
         "//java/dagger/internal/codegen:processor",
         "//java/dagger/internal/codegen:validation",
         "//java/dagger/internal/codegen:writing",
+        "//java/dagger/internal/codegen/base",
         "//java/dagger/internal/codegen/compileroption",
         "//java/dagger/internal/codegen/javapoet",
         "//java/dagger/internal/codegen/langmodel",
diff --git a/javatests/dagger/internal/codegen/DiagnosticFormattingTest.java b/javatests/dagger/internal/codegen/DiagnosticFormattingTest.java
index a2da92f57..9b0dde00e 100644
--- a/javatests/dagger/internal/codegen/DiagnosticFormattingTest.java
+++ b/javatests/dagger/internal/codegen/DiagnosticFormattingTest.java
@@ -18,6 +18,7 @@
 
 import static com.google.common.truth.Truth.assertThat;
 
+import dagger.internal.codegen.base.DiagnosticFormatting;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
