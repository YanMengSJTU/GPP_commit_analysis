diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index aa03b6756..1f2ecb6b5 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -53,8 +53,8 @@ CODEGEN_SHARED_DEPS = [
 ]
 
 CODEGEN_DEPS = CODEGEN_SHARED_DEPS + [
-    "@google_bazel_common//third_party/java/guava",
     ":shared-with-spi",
+    "@google_bazel_common//third_party/java/guava",
 ]
 
 # Code that is shared with the dagger.model and dagger.spi packages. This code is merged into both
@@ -80,6 +80,7 @@ java_library(
         "ContributionType.java",
         "DaggerElements.java",
         "DaggerGraphs.java",
+        "DaggerStatistics.java",
         "DaggerTypes.java",
         "DiagnosticFormatting.java",
         "Expression.java",
@@ -340,6 +341,7 @@ java_library(
         "ProcessingEnvironmentModule.java",
         "ProcessingOptions.java",
         "ProductionExecutorModuleProcessingStep.java",
+        "SystemComponentsModule.java",
     ],
     plugins = CODEGEN_PLUGINS,
     resource_jars = [":processor_manifest_files.jar"],
diff --git a/java/dagger/internal/codegen/ComponentProcessor.java b/java/dagger/internal/codegen/ComponentProcessor.java
index 65e7d0a85..7505c4ce3 100644
--- a/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/java/dagger/internal/codegen/ComponentProcessor.java
@@ -56,6 +56,7 @@
   @Inject BindingGraphPlugins spiPlugins;
   @Inject CompilerOptions compilerOptions;
   @Inject @Validation BindingGraphPlugins validationPlugins;
+  @Inject DaggerStatistics daggerStatistics;
 
   public ComponentProcessor() {
     this.testingPlugins = Optional.empty();
@@ -108,6 +109,7 @@ public SourceVersion getSupportedSourceVersion() {
         .build()
         .inject(this);
 
+    daggerStatistics.processingStarted();
     spiPlugins.initializePlugins();
     validationPlugins.initializePlugins();
     return processingSteps;
@@ -122,6 +124,7 @@ public SourceVersion getSupportedSourceVersion() {
         BindingMethodValidatorsModule.class,
         IncorrectlyInstalledBindsMethodsValidator.Module.class,
         ProcessingStepsModule.class,
+        SystemComponentsModule.class
       })
   interface ProcessorComponent {
     void inject(ComponentProcessor processor);
@@ -184,7 +187,9 @@ Builder testingPlugins(
 
   @Override
   protected void postRound(RoundEnvironment roundEnv) {
-    if (!roundEnv.processingOver()) {
+    if (roundEnv.processingOver()) {
+      daggerStatistics.processingStopped();
+    } else {
       try {
         injectBindingRegistry.generateSourcesForRequiredBindings(
             factoryGenerator, membersInjectorGenerator);
diff --git a/java/dagger/internal/codegen/DaggerStatistics.java b/java/dagger/internal/codegen/DaggerStatistics.java
new file mode 100644
index 000000000..a103f0287
--- /dev/null
+++ b/java/dagger/internal/codegen/DaggerStatistics.java
@@ -0,0 +1,46 @@
+/*
+ * Copyright (C) 2018 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.internal.codegen;
+
+import com.google.common.base.Preconditions;
+import com.google.common.base.Stopwatch;
+import com.google.common.base.Ticker;
+import javax.inject.Inject;
+import javax.inject.Singleton;
+
+@Singleton // for state sharing
+final class DaggerStatistics {
+
+  private final Stopwatch totalRuntimeStopwatch;
+
+  @Inject
+  DaggerStatistics(
+      Ticker ticker) {
+    totalRuntimeStopwatch = Stopwatch.createUnstarted(ticker);
+  }
+
+  void processingStarted() {
+    Preconditions.checkState(!totalRuntimeStopwatch.isRunning());
+    totalRuntimeStopwatch.start();
+  }
+
+  void processingStopped() {
+    Preconditions.checkState(totalRuntimeStopwatch.isRunning());
+    totalRuntimeStopwatch.stop();
+
+  }
+}
diff --git a/java/dagger/internal/codegen/SystemComponentsModule.java b/java/dagger/internal/codegen/SystemComponentsModule.java
new file mode 100644
index 000000000..3f59b240f
--- /dev/null
+++ b/java/dagger/internal/codegen/SystemComponentsModule.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2018 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.internal.codegen;
+
+import com.google.common.base.Ticker;
+import dagger.Module;
+import dagger.Provides;
+
+/** Module to provide system-level dependencies (such as time-related objects). */
+@Module
+interface SystemComponentsModule {
+
+  @Provides
+  static Ticker ticker() {
+    return Ticker.systemTicker();
+  }
+}
