diff --git a/java/dagger/internal/DoubleCheck.java b/java/dagger/internal/DoubleCheck.java
index e4a074b40..675a343aa 100644
--- a/java/dagger/internal/DoubleCheck.java
+++ b/java/dagger/internal/DoubleCheck.java
@@ -65,7 +65,9 @@ public T get() {
   }
 
   /** Returns a {@link Provider} that caches the value from the given delegate provider. */
-  public static <T> Provider<T> provider(Provider<T> delegate) {
+  // This method is declared this way instead of "<T> Provider<T> provider(Provider<T> delegate)"
+  // to work around an Eclipse type inference bug: https://github.com/google/dagger/issues/949.
+  public static <P extends Provider<T>, T> Provider<T> provider(P delegate) {
     checkNotNull(delegate);
     if (delegate instanceof DoubleCheck) {
       /* This should be a rare case, but if we have a scoped @Binds that delegates to a scoped
@@ -76,7 +78,9 @@ public T get() {
   }
 
   /** Returns a {@link Lazy} that caches the value from the given provider. */
-  public static <T> Lazy<T> lazy(Provider<T> provider) {
+  // This method is declared this way instead of "<T> Lazy<T> lazy(Provider<T> delegate)"
+  // to work around an Eclipse type inference bug: https://github.com/google/dagger/issues/949.
+  public static <P extends Provider<T>, T> Lazy<T> lazy(P provider) {
     if (provider instanceof Lazy) {
       @SuppressWarnings("unchecked")
       final Lazy<T> lazy = (Lazy<T>) provider;
diff --git a/java/dagger/internal/SingleCheck.java b/java/dagger/internal/SingleCheck.java
index 45b1bd793..4c8b6c220 100644
--- a/java/dagger/internal/SingleCheck.java
+++ b/java/dagger/internal/SingleCheck.java
@@ -54,7 +54,9 @@ public T get() {
   }
 
   /** Returns a {@link Provider} that caches the value from the given delegate provider. */
-  public static <T> Provider<T> provider(Provider<T> provider) {
+  // This method is declared this way instead of "<T> Provider<T> provider(Provider<T> provider)" 
+  // to work around an Eclipse type inference bug: https://github.com/google/dagger/issues/949.
+  public static <P extends Provider<T>, T> Provider<T> provider(P provider) {
     // If a scoped @Binds delegates to a scoped binding, don't cache the value again.
     if (provider instanceof SingleCheck || provider instanceof DoubleCheck) {
       return provider;
