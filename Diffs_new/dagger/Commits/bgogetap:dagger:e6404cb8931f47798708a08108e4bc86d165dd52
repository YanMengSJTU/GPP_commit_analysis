diff --git a/java/dagger/internal/MemoizedSentinel.java b/java/dagger/internal/MemoizedSentinel.java
new file mode 100644
index 000000000..dd24dcd85
--- /dev/null
+++ b/java/dagger/internal/MemoizedSentinel.java
@@ -0,0 +1,20 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.internal;
+
+/** A sentinel used to memoize a scoped binding in a component. */
+public final class MemoizedSentinel {}
diff --git a/java/dagger/internal/codegen/AbstractComponentWriter.java b/java/dagger/internal/codegen/AbstractComponentWriter.java
index 74b426db4..782eb2e9f 100644
--- a/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -310,12 +310,6 @@ private void addReferenceReleasingProviderManagerFields() {
     referenceReleasingProviderManagerFields = fields.build();
   }
 
-  /**
-   * Returns {@code true} if {@code scope} is in {@link
-   * BindingGraph#scopesRequiringReleasableReferenceManagers()} for the root graph.
-   */
-  protected abstract boolean requiresReleasableReferences(Scope scope);
-
   private FieldSpec referenceReleasingProxyManagerField(Scope scope) {
     return componentField(
             REFERENCE_RELEASING_PROVIDER_MANAGER,
diff --git a/java/dagger/internal/codegen/BindingExpression.java b/java/dagger/internal/codegen/BindingExpression.java
index 08ff07a55..e55bd03e7 100644
--- a/java/dagger/internal/codegen/BindingExpression.java
+++ b/java/dagger/internal/codegen/BindingExpression.java
@@ -277,7 +277,7 @@ private BindingExpression inlineProvisionBindingExpression(
 
         case INJECTION:
         case PROVISION:
-          if (!provisionBinding.scope().isPresent()) {
+          if (canUseSimpleMethod(provisionBinding)) {
             return new SimpleMethodBindingExpression(
                 compilerOptions,
                 provisionBinding,
@@ -296,9 +296,16 @@ private BindingExpression inlineProvisionBindingExpression(
     }
 
     private boolean usePrivateMethod(ResolvedBindings resolvedBindings) {
-      // TODO(user): Implement private methods for scoped bindings
-      return !resolvedBindings.scope().isPresent()
-          && PRIVATE_METHOD_KINDS.contains(resolvedBindings.contributionBinding().bindingKind());
+      return PRIVATE_METHOD_KINDS.contains(resolvedBindings.contributionBinding().bindingKind());
+    }
+
+    private boolean canUseSimpleMethod(ContributionBinding binding) {
+      // Use the inlined form when in experimentalAndroidMode, as PrivateMethodBindingExpression
+      // implements scoping directly
+      // TODO(user): Also inline releasable references in experimentalAndroidMode
+      return !binding.scope().isPresent()
+          || (compilerOptions.experimentalAndroidMode()
+              && !generatedComponentModel.requiresReleasableReferences(binding.scope().get()));
     }
   }
 }
diff --git a/java/dagger/internal/codegen/ComponentWriter.java b/java/dagger/internal/codegen/ComponentWriter.java
index e0f8764a3..0d24e2b4a 100644
--- a/java/dagger/internal/codegen/ComponentWriter.java
+++ b/java/dagger/internal/codegen/ComponentWriter.java
@@ -230,7 +230,7 @@ private boolean canInstantiateAllRequirements() {
   }
 
   @Override
-  protected boolean requiresReleasableReferences(Scope scope) {
+  public boolean requiresReleasableReferences(Scope scope) {
     return graph.scopesRequiringReleasableReferenceManagers().contains(scope);
   }
 }
diff --git a/java/dagger/internal/codegen/GeneratedComponentModel.java b/java/dagger/internal/codegen/GeneratedComponentModel.java
index 634f80dec..6ce591a2c 100644
--- a/java/dagger/internal/codegen/GeneratedComponentModel.java
+++ b/java/dagger/internal/codegen/GeneratedComponentModel.java
@@ -62,4 +62,10 @@
    * object for a scope.
    */
   CodeBlock getReferenceReleasingProviderManagerExpression(Scope scope);
+
+  /**
+   * Returns {@code true} if {@code scope} is in {@link
+   * BindingGraph#scopesRequiringReleasableReferenceManagers()} for the root graph.
+   */
+  boolean requiresReleasableReferences(Scope scope);
 }
diff --git a/java/dagger/internal/codegen/PrivateMethodBindingExpression.java b/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
index fd49f95a2..730e0b522 100644
--- a/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
@@ -23,14 +23,18 @@
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
 import static com.squareup.javapoet.TypeSpec.anonymousClassBuilder;
 import static dagger.internal.codegen.ContributionBinding.FactoryCreationStrategy.SINGLETON_INSTANCE;
+import static dagger.internal.codegen.Scope.reusableScope;
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.PUBLIC;
+import static javax.lang.model.element.Modifier.VOLATILE;
 
 import com.google.auto.common.MoreTypes;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
+import com.squareup.javapoet.FieldSpec;
 import com.squareup.javapoet.TypeName;
 import com.squareup.javapoet.TypeSpec;
+import dagger.internal.MemoizedSentinel;
 import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
 import java.util.EnumMap;
 import java.util.Map;
@@ -50,6 +54,8 @@
   private final BindingExpression delegate;
   private final Map<DependencyRequest.Kind, String> methodNames =
       new EnumMap<>(DependencyRequest.Kind.class);
+  private final Map<DependencyRequest.Kind, String> fieldNames =
+      new EnumMap<>(DependencyRequest.Kind.class);
   private final ContributionBinding binding;
   private final CompilerOptions compilerOptions;
   private final DaggerTypes types;
@@ -76,7 +82,7 @@
   @Override
   CodeBlock getComponentMethodImplementation(DependencyRequest request, ClassName requestingClass) {
     checkArgument(request.bindingKey().equals(resolvedBindings().bindingKey()));
-    if (ignorePrivateMethodStrategy(request.kind())) {
+    if (!canInlineScope() && ignorePrivateMethodStrategy(request.kind())) {
       return delegate.getComponentMethodImplementation(request, requestingClass);
     }
 
@@ -90,7 +96,8 @@ CodeBlock getComponentMethodImplementation(DependencyRequest request, ClassName
   @Override
   Expression getDependencyExpression(
       DependencyRequest.Kind requestKind, ClassName requestingClass) {
-    if (ignorePrivateMethodStrategy(requestKind) || isNullaryProvisionMethod(requestKind)) {
+    if (!canInlineScope()
+        && (ignorePrivateMethodStrategy(requestKind) || isNullaryProvisionMethod(requestKind))) {
       return delegate.getDependencyExpression(requestKind, requestingClass);
     }
 
@@ -113,6 +120,7 @@ Expression getDependencyExpression(
     return Expression.create(returnType(requestKind), invocation);
   }
 
+  // TODO(user): Invert this method to return true if we are using the private method strategy.
   private boolean ignorePrivateMethodStrategy(DependencyRequest.Kind requestKind) {
     switch (requestKind) {
       case INSTANCE:
@@ -135,6 +143,13 @@ private boolean isNullaryProvisionMethod(DependencyRequest.Kind requestKind) {
         && !findComponentMethod(requestKind).isPresent();
   }
 
+  private boolean canInlineScope() {
+    // TODO(user): Enable for releasable references
+    return compilerOptions.experimentalAndroidMode()
+        && binding.scope().isPresent()
+        && !generatedComponentModel.requiresReleasableReferences(binding.scope().get());
+  }
+
   /** Returns the first component method associated with this request kind, if one exists. */
   private Optional<ComponentMethodDescriptor> findComponentMethod(
       DependencyRequest.Kind requestKind) {
@@ -195,6 +210,12 @@ private CodeBlock methodBody(DependencyRequest.Kind requestKind) {
             getDependencyExpression(DependencyRequest.Kind.PROVIDER, componentName).codeBlock();
         return CodeBlock.of("return $L;", FrameworkType.PROVIDER.to(requestKind, asProvider));
       case INSTANCE:
+        if (canInlineScope()) {
+          Scope scope = resolvedBindings().scope().get();
+          return scope.equals(reusableScope(elements))
+              ? singleCheck(requestKind) : doubleCheck(requestKind);
+        }
+        // fall through
       case PRODUCER:
       case FUTURE:
         return CodeBlock.of(
@@ -204,8 +225,56 @@ private CodeBlock methodBody(DependencyRequest.Kind requestKind) {
     }
   }
 
+  private CodeBlock singleCheck(DependencyRequest.Kind requestKind) {
+    String fieldName = getMemoizedFieldName(requestKind);
+    return CodeBlock.builder()
+        .beginControlFlow("if ($N instanceof $T)", fieldName, MemoizedSentinel.class)
+        .addStatement(
+            "$N = $L",
+            fieldName,
+            delegate.getDependencyExpression(requestKind, componentName).codeBlock())
+        .endControlFlow()
+        .addStatement("return ($T) $N", returnType(requestKind), fieldName)
+        .build();
+  }
+
+  private CodeBlock doubleCheck(DependencyRequest.Kind requestKind) {
+    String fieldName = getMemoizedFieldName(requestKind);
+    // add "this." if the fieldName clashes with the local variable name.
+    fieldName = fieldName.contentEquals("local") ? "this." + fieldName : fieldName;
+    return CodeBlock.builder()
+        .addStatement("$T local = $L", TypeName.OBJECT, fieldName)
+        .beginControlFlow("if (local instanceof $T)", MemoizedSentinel.class)
+        .beginControlFlow("synchronized (local)")
+        // TODO(user): benchmark to see if this is really faster than instanceof check?
+        .beginControlFlow("if (local == $L)", fieldName)
+        .addStatement(
+            "$L = $L",
+            fieldName,
+            delegate.getDependencyExpression(requestKind, componentName).codeBlock())
+        .endControlFlow()
+        .addStatement("local = $L", fieldName)
+        .endControlFlow()
+        .endControlFlow()
+        .addStatement("return ($T) local", returnType(requestKind))
+        .build();
+  }
+
+  private String getMemoizedFieldName(DependencyRequest.Kind requestKind) {
+    if (!fieldNames.containsKey(requestKind)) {
+      String name = generatedComponentModel.getUniqueFieldName(BindingVariableNamer.name(binding));
+      generatedComponentModel.addField(
+          FieldSpec.builder(TypeName.OBJECT, name, PRIVATE, VOLATILE)
+              .initializer("new $T()", MemoizedSentinel.class)
+              .build());
+      fieldNames.put(requestKind, name);
+    }
+    return fieldNames.get(requestKind);
+  }
+
   /** Returns a {@link TypeSpec} for an anonymous provider class. */
   private TypeSpec providerTypeSpec() {
+    // TODO(user): For scoped bindings that have already been created, use InstanceFactory?
     return anonymousClassBuilder("")
         .addSuperinterface(TypeName.get(returnType(DependencyRequest.Kind.PROVIDER)))
         .addMethod(
diff --git a/java/dagger/internal/codegen/SimpleMethodBindingExpression.java b/java/dagger/internal/codegen/SimpleMethodBindingExpression.java
index 993c8c537..f2857a374 100644
--- a/java/dagger/internal/codegen/SimpleMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/SimpleMethodBindingExpression.java
@@ -63,7 +63,6 @@
     checkArgument(
         provisionBinding.implicitDependencies().isEmpty(),
         "framework deps are not currently supported");
-    checkArgument(!provisionBinding.scope().isPresent());
     checkArgument(provisionBinding.bindingElement().isPresent());
     this.compilerOptions = compilerOptions;
     this.provisionBinding = provisionBinding;
diff --git a/java/dagger/internal/codegen/SubcomponentWriter.java b/java/dagger/internal/codegen/SubcomponentWriter.java
index 65a0bbcc7..88ab8ec4d 100644
--- a/java/dagger/internal/codegen/SubcomponentWriter.java
+++ b/java/dagger/internal/codegen/SubcomponentWriter.java
@@ -79,7 +79,7 @@ public CodeBlock getReferenceReleasingProviderManagerExpression(Scope scope) {
   }
 
   @Override
-  protected boolean requiresReleasableReferences(Scope scope) {
+  public boolean requiresReleasableReferences(Scope scope) {
     return parent.requiresReleasableReferences(scope);
   }
 
diff --git a/javatests/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
index af55c3707..f7426d43d 100644
--- a/javatests/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
@@ -19,6 +19,8 @@
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
 import static dagger.internal.codegen.CodeBlocks.stringLiteral;
+import static dagger.internal.codegen.CompilerMode.DEFAULT_MODE;
+import static dagger.internal.codegen.CompilerMode.EXPERIMENTAL_ANDROID_MODE;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
 import com.google.auto.common.MoreElements;
@@ -359,60 +361,109 @@ public void componentWithInvalidModule() {
         "  Provider<SomeInjectableType> someInjectableTypeProvider();",
         "}");
     JavaFileObject generatedComponent =
-        JavaFileObjects.forSourceLines(
-            "test.DaggerSimpleComponent",
-            "package test;",
-            "",
-            "import dagger.Lazy;",
-            "import dagger.internal.DoubleCheck;",
-            "import javax.annotation.Generated;",
-            "import javax.inject.Provider;",
-            "",
-            GENERATED_ANNOTATION,
-            "public final class DaggerSimpleComponent implements SimpleComponent {",
-            "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
-            "",
-            "  private DaggerSimpleComponent(Builder builder) {",
-            "    initialize(builder);",
-            "  }",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static SimpleComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
-            "  @SuppressWarnings(\"unchecked\")",
-            "  private void initialize(final Builder builder) {",
-            "    this.someInjectableTypeProvider =",
-            "        DoubleCheck.provider(SomeInjectableType_Factory.create());",
-            "  }",
-            "",
-            "  @Override",
-            "  public SomeInjectableType someInjectableType() {",
-            "    return someInjectableTypeProvider.get();",
-            "  }",
-            "",
-            "  @Override",
-            "  public Lazy<SomeInjectableType> lazySomeInjectableType() {",
-            "    return DoubleCheck.lazy(someInjectableTypeProvider);",
-            "  }",
-            "",
-            "  @Override",
-            "  public Provider<SomeInjectableType> someInjectableTypeProvider() {",
-            "    return someInjectableTypeProvider;",
-            "  }",
-            "",
-            "  public static final class Builder {",
-            "    private Builder() {}",
-            "",
-            "    public SimpleComponent build() {",
-            "      return new DaggerSimpleComponent(this);",
-            "    }",
-            "  }",
-            "}");
+        compilerMode
+            .javaFileBuilder("test.DaggerSimpleComponent")
+            .addLines(
+                "package test;",
+                "",
+                "import dagger.Lazy;",
+                "import dagger.internal.DoubleCheck;")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
+                "import dagger.internal.MemoizedSentinel;")
+            .addLines(
+                "import javax.annotation.Generated;",
+                "import javax.inject.Provider;",
+                "",
+                GENERATED_ANNOTATION,
+                "public final class DaggerSimpleComponent implements SimpleComponent {")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
+                "  private volatile Object someInjectableType = new MemoizedSentinel();",
+                "",
+                "  private DaggerSimpleComponent(Builder builder) {}")
+            .addLinesIn(
+                DEFAULT_MODE,
+                "  private Provider<SomeInjectableType> someInjectableTypeProvider;",
+                "",
+                "  private DaggerSimpleComponent(Builder builder) {",
+                "    initialize(builder);",
+                "  }")
+            .addLines(
+                "",
+                "  public static Builder builder() {",
+                "    return new Builder();",
+                "  }",
+                "",
+                "  public static SimpleComponent create() {",
+                "    return new Builder().build();",
+                "  }",
+                "")
+            .addLinesIn(
+                DEFAULT_MODE,
+                "  @SuppressWarnings(\"unchecked\")",
+                "  private void initialize(final Builder builder) {",
+                "    this.someInjectableTypeProvider =",
+                "        DoubleCheck.provider(SomeInjectableType_Factory.create());",
+                "  }",
+                "")
+            .addLines(
+                "  @Override",
+                "  public SomeInjectableType someInjectableType() {")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
+                "    Object local = someInjectableType;",
+                "    if (local instanceof MemoizedSentinel) {",
+                "      synchronized (local) {",
+                "        if (local == someInjectableType) {",
+                "          someInjectableType = new SomeInjectableType();",
+                "        }",
+                "        local = someInjectableType;",
+                "      }",
+                "    }",
+                "    return (SomeInjectableType) local;")
+            .addLinesIn(
+                DEFAULT_MODE,
+                "    return someInjectableTypeProvider.get();")
+            .addLines(
+                "  }",
+                "",
+                "  @Override",
+                "  public Lazy<SomeInjectableType> lazySomeInjectableType() {")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
+                "    return DoubleCheck.lazy(someInjectableTypeProvider());")
+            .addLinesIn(
+                DEFAULT_MODE,
+                "    return DoubleCheck.lazy(someInjectableTypeProvider);")
+            .addLines(
+                "  }",
+                "",
+                "  @Override",
+                "  public Provider<SomeInjectableType> someInjectableTypeProvider() {")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
+                "    return new Provider<SomeInjectableType>() {",
+                "      @Override",
+                "      public SomeInjectableType get() {",
+                "        return someInjectableType();",
+                "      }",
+                "    };")
+            .addLinesIn(
+                DEFAULT_MODE,
+                "    return someInjectableTypeProvider;")
+            .addLines(
+                "  }",
+                "",
+                "  public static final class Builder {",
+                "    private Builder() {}",
+                "",
+                "    public SimpleComponent build() {",
+                "      return new DaggerSimpleComponent(this);",
+                "    }",
+                "  }",
+                "}")
+            .build();
     Compilation compilation =
         daggerCompiler()
             .withOptions(compilerMode.javacopts())
diff --git a/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java b/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
index 1c52ce9ae..91d009302 100644
--- a/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
+++ b/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
@@ -17,19 +17,34 @@
 package dagger.internal.codegen;
 
 import static com.google.testing.compile.CompilationSubject.assertThat;
+import static dagger.internal.codegen.CompilerMode.DEFAULT_MODE;
+import static dagger.internal.codegen.CompilerMode.EXPERIMENTAL_ANDROID_MODE;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
 import com.google.testing.compile.Compilation;
 import com.google.testing.compile.CompilationSubject;
 import com.google.testing.compile.JavaFileObjects;
+import java.util.Collection;
 import javax.tools.JavaFileObject;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.junit.runners.JUnit4;
+import org.junit.runners.Parameterized;
+import org.junit.runners.Parameterized.Parameters;
 
-@RunWith(JUnit4.class)
+@RunWith(Parameterized.class)
 public class DelegateBindingExpressionTest {
+  @Parameters(name = "{0}")
+  public static Collection<Object[]> parameters() {
+    return CompilerMode.TEST_PARAMETERS;
+  }
+
+  private final CompilerMode compilerMode;
+
+  public DelegateBindingExpressionTest(CompilerMode compilerMode) {
+    this.compilerMode = compilerMode;
+  }
+
   private static final JavaFileObject REGULAR_SCOPED =
       JavaFileObjects.forSourceLines(
           "test.RegularScoped",
@@ -154,100 +169,162 @@ public void toDoubleCheck() {
     assertThatCompilationWithModule(module)
         .generatedSourceFile("test.DaggerTestComponent")
         .hasSourceEquivalentTo(
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import dagger.internal.DoubleCheck;",
-                "import dagger.internal.ReferenceReleasingProvider;",
-                "import dagger.internal.ReferenceReleasingProviderManager;",
-                "import dagger.internal.SingleCheck;",
-                "import dagger.releasablereferences.ReleasableReferenceManager;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private final ReferenceReleasingProviderManager customScopeReferences =",
-                "      new ReferenceReleasingProviderManager(ReleasableScoped.CustomScope.class);",
-                "  private Provider<RegularScoped> regularScopedProvider;",
-                "  private Provider<ReusableScoped> reusableScopedProvider;",
-                "  private Provider<Object> reusableProvider;",
-                "  private Provider<ReleasableScoped> releasableScopedProvider;",
-                "  private Provider<Object> releasableProvider;",
-                "  private Provider<Object> unscopedProvider;",
-                "  private Provider<ReleasableReferenceManager>",
-                "      forReleasableReferencesReleasableReferenceManagerProvider;",
-                "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.regularScopedProvider = ",
-                "        DoubleCheck.provider(RegularScoped_Factory.create());",
-                "    this.reusableScopedProvider = ",
-                "        SingleCheck.provider(ReusableScoped_Factory.create());",
-                "    this.reusableProvider = ",
-                "        DoubleCheck.provider((Provider) reusableScopedProvider);",
-                "    this.releasableScopedProvider =",
-                "        ReferenceReleasingProvider.create(",
-                "            ReleasableScoped_Factory.create(), customScopeReferences);",
-                "    this.releasableProvider = ",
-                "        DoubleCheck.provider((Provider) releasableScopedProvider);",
-                "    this.unscopedProvider = ",
-                "        DoubleCheck.provider((Provider) Unscoped_Factory.create());",
-                "    this.forReleasableReferencesReleasableReferenceManagerProvider =",
-                "        new Provider<ReleasableReferenceManager>() {",
-                "          @Override",
-                "          public ReleasableReferenceManager get() {",
-                "            return customScopeReferences;",
-                "          }",
-                "        };",
-                "  }",
-                "",
-                "  @Override",
-                "  public Object regular() {",
-                "    return regularScopedProvider.get();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Object reusable() {",
-                "    return reusableProvider.get();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Object releasable() {",
-                "    return releasableProvider.get();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Object unscoped() {",
-                "    return unscopedProvider.get();",
-                "  }",
-                "",
-                "  @Override",
-                "  public ReleasableReferenceManager releasableReferenceManager() {",
-                "    return forReleasableReferencesReleasableReferenceManagerProvider.get();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}"));
+            compilerMode
+                .javaFileBuilder("test.DaggerTestComponent")
+                .addLines(
+                    "package test;",
+                    "",
+                    "import dagger.internal.DoubleCheck;")
+                .addLinesIn(
+                    EXPERIMENTAL_ANDROID_MODE,
+                    "import dagger.internal.MemoizedSentinel;")
+                .addLines(
+                    "import dagger.internal.ReferenceReleasingProvider;",
+                    "import dagger.internal.ReferenceReleasingProviderManager;")
+                .addLinesIn(
+                    DEFAULT_MODE,
+                    "import dagger.internal.SingleCheck;")
+                .addLines(
+                    "import dagger.releasablereferences.ReleasableReferenceManager;",
+                    "import javax.annotation.Generated;",
+                    "import javax.inject.Provider;",
+                    "",
+                    GENERATED_ANNOTATION,
+                    "public final class DaggerTestComponent implements TestComponent {",
+                    "  private final ReferenceReleasingProviderManager customScopeReferences =",
+                    "      new ReferenceReleasingProviderManager(",
+                    "          ReleasableScoped.CustomScope.class);")
+                .addLinesIn(
+                    EXPERIMENTAL_ANDROID_MODE,
+                    "  private volatile Object regularScoped = new MemoizedSentinel();",
+                    "  private volatile Object reusableScoped = new MemoizedSentinel();")
+                .addLinesIn(
+                    DEFAULT_MODE,
+                    "  private Provider<RegularScoped> regularScopedProvider;",
+                    "  private Provider<ReusableScoped> reusableScopedProvider;")
+                .addLines(
+                    "  private Provider<Object> reusableProvider;",
+                    "  private Provider<ReleasableScoped> releasableScopedProvider;",
+                    "  private Provider<Object> releasableProvider;",
+                    "  private Provider<Object> unscopedProvider;",
+                    "  private Provider<ReleasableReferenceManager>",
+                    "      forReleasableReferencesReleasableReferenceManagerProvider;",
+                    "",
+                    "  private DaggerTestComponent(Builder builder) {",
+                    "    initialize(builder);",
+                    "  }",
+                    "",
+                    "  public static Builder builder() {",
+                    "    return new Builder();",
+                    "  }",
+                    "",
+                    "  public static TestComponent create() {",
+                    "    return new Builder().build();",
+                    "  }",
+                    "")
+                .addLinesIn(
+                    EXPERIMENTAL_ANDROID_MODE,
+                    "  private RegularScoped getRegularScoped() {",
+                    "    Object local = regularScoped;",
+                    "    if (local instanceof MemoizedSentinel) {",
+                    "      synchronized (local) {",
+                    "        if (local == regularScoped) {",
+                    "          regularScoped = new RegularScoped();",
+                    "        }",
+                    "        local = regularScoped;",
+                    "      }",
+                    "    }",
+                    "    return (RegularScoped) local;",
+                    "  }",
+                    "",
+                    "  private ReusableScoped getReusableScoped() {",
+                    "    if (reusableScoped instanceof MemoizedSentinel) {",
+                    "      reusableScoped = new ReusableScoped();",
+                    "    }",
+                    "    return (ReusableScoped) reusableScoped;",
+                    "  }",
+                    "",
+                    "  private Provider<ReusableScoped> getReusableScopedProvider() {",
+                    "    return new Provider<ReusableScoped>() {",
+                    "      @Override",
+                    "      public ReusableScoped get() {",
+                    "        return getReusableScoped();",
+                    "      }",
+                    "    };",
+                    "  }",
+                    "")
+                .addLines(
+                    "  @SuppressWarnings(\"unchecked\")",
+                    "  private void initialize(final Builder builder) {")
+                .addLinesIn(
+                    EXPERIMENTAL_ANDROID_MODE,
+                    "    this.reusableProvider = DoubleCheck.provider(",
+                    "        (Provider) getReusableScopedProvider());")
+                .addLinesIn(
+                    DEFAULT_MODE,
+                    "    this.regularScopedProvider = ",
+                    "        DoubleCheck.provider(RegularScoped_Factory.create());",
+                    "    this.reusableScopedProvider = ",
+                    "        SingleCheck.provider(ReusableScoped_Factory.create());",
+                    "    this.reusableProvider = DoubleCheck.provider(",
+                    "        (Provider) reusableScopedProvider);")
+                .addLines(
+                    "    this.releasableScopedProvider = ",
+                    "         ReferenceReleasingProvider.create(",
+                    "             ReleasableScoped_Factory.create(), customScopeReferences);",
+                    "    this.releasableProvider = DoubleCheck.provider(",
+                    "        (Provider) releasableScopedProvider);",
+                    "    this.unscopedProvider = DoubleCheck.provider(",
+                    "        (Provider) Unscoped_Factory.create());",
+                    "    this.forReleasableReferencesReleasableReferenceManagerProvider =",
+                    "        new Provider<ReleasableReferenceManager>() {",
+                    "          @Override",
+                    "          public ReleasableReferenceManager get() {",
+                    "            return customScopeReferences;",
+                    "          }",
+                    "        };",
+                    "  }",
+                    "",
+                    "  @Override",
+                    "  public Object regular() {")
+                .addLinesIn(
+                    EXPERIMENTAL_ANDROID_MODE,
+                    "    return getRegularScoped();")
+                .addLinesIn(
+                    DEFAULT_MODE,
+                    "    return regularScopedProvider.get();")
+                .addLines(
+                    "  }",
+                    "",
+                    "  @Override",
+                    "  public Object reusable() {",
+                    "    return reusableProvider.get();",
+                    "  }",
+                    "",
+                    "  @Override",
+                    "  public Object releasable() {",
+                    "    return releasableProvider.get();",
+                    "  }",
+                    "",
+                    "  @Override",
+                    "  public Object unscoped() {",
+                    "    return unscopedProvider.get();",
+                    "  }",
+                    "",
+                    "  @Override",
+                    "  public ReleasableReferenceManager releasableReferenceManager() {",
+                    "    return forReleasableReferencesReleasableReferenceManagerProvider.get();",
+                    "  }",
+                    "",
+                    "  public static final class Builder {",
+                    "    private Builder() {}",
+                    "",
+                    "    public TestComponent build() {",
+                    "      return new DaggerTestComponent(this);",
+                    "    }",
+                    "  }",
+                    "}")
+                .build());
   }
 
   @Test
@@ -279,97 +356,151 @@ public void toSingleCheck() {
     assertThatCompilationWithModule(module)
         .generatedSourceFile("test.DaggerTestComponent")
         .hasSourceEquivalentTo(
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import dagger.internal.DoubleCheck;",
-                "import dagger.internal.ReferenceReleasingProvider;",
-                "import dagger.internal.ReferenceReleasingProviderManager;",
-                "import dagger.internal.SingleCheck;",
-                "import dagger.releasablereferences.ReleasableReferenceManager;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private final ReferenceReleasingProviderManager customScopeReferences =",
-                "      new ReferenceReleasingProviderManager(ReleasableScoped.CustomScope.class);",
-                "  private Provider<RegularScoped> regularScopedProvider;",
-                "  private Provider<ReusableScoped> reusableScopedProvider;",
-                "  private Provider<ReleasableScoped> releasableScopedProvider;",
-                "  private Provider<Object> releasableProvider;",
-                "  private Provider<Object> unscopedProvider;",
-                "  private Provider<ReleasableReferenceManager>",
-                "      forReleasableReferencesReleasableReferenceManagerProvider;",
-                "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.regularScopedProvider = ",
-                "        DoubleCheck.provider(RegularScoped_Factory.create());",
-                "    this.reusableScopedProvider = ",
-                "        SingleCheck.provider(ReusableScoped_Factory.create());",
-                "    this.releasableScopedProvider = ",
-                "       ReferenceReleasingProvider.create(",
-                "           ReleasableScoped_Factory.create(), customScopeReferences);",
-                "    this.releasableProvider = ",
-                "        SingleCheck.provider((Provider) releasableScopedProvider);",
-                "    this.unscopedProvider = ",
-                "        SingleCheck.provider((Provider) Unscoped_Factory.create());",
-                "    this.forReleasableReferencesReleasableReferenceManagerProvider =",
-                "        new Provider<ReleasableReferenceManager>() {",
-                "          @Override",
-                "          public ReleasableReferenceManager get() {",
-                "            return customScopeReferences;",
-                "          }",
-                "        };",
-                "  }",
-                "",
-                "  @Override",
-                "  public Object regular() {",
-                "    return regularScopedProvider.get();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Object reusable() {",
-                "    return reusableScopedProvider.get();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Object releasable() {",
-                "    return releasableProvider.get();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Object unscoped() {",
-                "    return unscopedProvider.get();",
-                "  }",
-                "",
-                "  @Override",
-                "  public ReleasableReferenceManager releasableReferenceManager() {",
-                "    return forReleasableReferencesReleasableReferenceManagerProvider.get();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}"));
+            compilerMode
+                .javaFileBuilder("test.DaggerTestComponent")
+                .addLines(
+                    "package test;",
+                    "")
+                .addLinesIn(
+                    EXPERIMENTAL_ANDROID_MODE,
+                    "import dagger.internal.MemoizedSentinel;")
+                .addLinesIn(
+                    DEFAULT_MODE,
+                    "import dagger.internal.DoubleCheck;")
+                .addLines(
+                    "import dagger.internal.ReferenceReleasingProvider;",
+                    "import dagger.internal.ReferenceReleasingProviderManager;",
+                    "import dagger.internal.SingleCheck;",
+                    "import dagger.releasablereferences.ReleasableReferenceManager;",
+                    "import javax.annotation.Generated;",
+                    "import javax.inject.Provider;",
+                    "",
+                    GENERATED_ANNOTATION,
+                    "public final class DaggerTestComponent implements TestComponent {",
+                    "  private final ReferenceReleasingProviderManager customScopeReferences =",
+                    "      new ReferenceReleasingProviderManager(",
+                    "          ReleasableScoped.CustomScope.class);")
+                .addLinesIn(
+                    EXPERIMENTAL_ANDROID_MODE,
+                    "  private volatile Object regularScoped = new MemoizedSentinel();",
+                    "  private volatile Object reusableScoped = new MemoizedSentinel();")
+                .addLinesIn(
+                    DEFAULT_MODE,
+                    "  private Provider<RegularScoped> regularScopedProvider;",
+                    "  private Provider<ReusableScoped> reusableScopedProvider;")
+                .addLines(
+                    "  private Provider<ReleasableScoped> releasableScopedProvider;",
+                    "  private Provider<Object> releasableProvider;",
+                    "  private Provider<Object> unscopedProvider;",
+                    "  private Provider<ReleasableReferenceManager>",
+                    "      forReleasableReferencesReleasableReferenceManagerProvider;",
+                    "",
+                    "  private DaggerTestComponent(Builder builder) {",
+                    "    initialize(builder);",
+                    "  }",
+                    "",
+                    "  public static Builder builder() {",
+                    "    return new Builder();",
+                    "  }",
+                    "",
+                    "  public static TestComponent create() {",
+                    "    return new Builder().build();",
+                    "  }",
+                    "")
+                .addLinesIn(
+                    EXPERIMENTAL_ANDROID_MODE,
+                    "  private RegularScoped getRegularScoped() {",
+                    "    Object local = regularScoped;",
+                    "    if (local instanceof MemoizedSentinel) {",
+                    "      synchronized (local) {",
+                    "        if (local == regularScoped) {",
+                    "          regularScoped = new RegularScoped();",
+                    "        }",
+                    "        local = regularScoped;",
+                    "      }",
+                    "    }",
+                    "    return (RegularScoped) local;",
+                    "  }",
+                    "",
+                    "  private ReusableScoped getReusableScoped() {",
+                    "    if (reusableScoped instanceof MemoizedSentinel) {",
+                    "      reusableScoped = new ReusableScoped();",
+                    "    }",
+                    "    return (ReusableScoped) reusableScoped;",
+                    "  }",
+                    "")
+                .addLines(
+                    "  @SuppressWarnings(\"unchecked\")",
+                    "  private void initialize(final Builder builder) {")
+                .addLinesIn(
+                    DEFAULT_MODE,
+                    "    this.regularScopedProvider = ",
+                    "        DoubleCheck.provider(RegularScoped_Factory.create());",
+                    "    this.reusableScopedProvider = ",
+                    "        SingleCheck.provider(ReusableScoped_Factory.create());")
+                .addLines(
+                    "    this.releasableScopedProvider = ",
+                    "         ReferenceReleasingProvider.create(",
+                    "             ReleasableScoped_Factory.create(), customScopeReferences);",
+                    "    this.releasableProvider = SingleCheck.provider(",
+                    "        (Provider) releasableScopedProvider);",
+                    "    this.unscopedProvider = SingleCheck.provider(",
+                    "        (Provider) Unscoped_Factory.create());",
+                    "    this.forReleasableReferencesReleasableReferenceManagerProvider =",
+                    "        new Provider<ReleasableReferenceManager>() {",
+                    "          @Override",
+                    "          public ReleasableReferenceManager get() {",
+                    "            return customScopeReferences;",
+                    "          }",
+                    "        };",
+                    "  }",
+                    "",
+                    "  @Override",
+                    "  public Object regular() {")
+                .addLinesIn(
+                    EXPERIMENTAL_ANDROID_MODE,
+                    "    return getRegularScoped();")
+                .addLinesIn(
+                    DEFAULT_MODE,
+                    "    return regularScopedProvider.get();")
+                .addLines(
+                    "  }",
+                    "",
+                    "  @Override",
+                    "  public Object reusable() {")
+                .addLinesIn(
+                    EXPERIMENTAL_ANDROID_MODE,
+                    "    return getReusableScoped();")
+                .addLinesIn(
+                    DEFAULT_MODE,
+                    "    return reusableScopedProvider.get();")
+                .addLines(
+                    "  }",
+                    "",
+                    "  @Override",
+                    "  public Object releasable() {",
+                    "    return releasableProvider.get();",
+                    "  }",
+                    "",
+                    "  @Override",
+                    "  public Object unscoped() {",
+                    "    return unscopedProvider.get();",
+                    "  }",
+                    "",
+                    "  @Override",
+                    "  public ReleasableReferenceManager releasableReferenceManager() {",
+                    "    return forReleasableReferencesReleasableReferenceManagerProvider.get();",
+                    "  }",
+                    "",
+                    "  public static final class Builder {",
+                    "    private Builder() {}",
+                    "",
+                    "    public TestComponent build() {",
+                    "      return new DaggerTestComponent(this);",
+                    "    }",
+                    "  }",
+                    "}")
+                .build());
   }
 
   @Test
@@ -400,95 +531,152 @@ public void toReleasableCheck() {
     assertThatCompilationWithModule(module)
         .generatedSourceFile("test.DaggerTestComponent")
         .hasSourceEquivalentTo(
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import dagger.internal.DoubleCheck;",
-                "import dagger.internal.ReferenceReleasingProvider;",
-                "import dagger.internal.ReferenceReleasingProviderManager;",
-                "import dagger.internal.SingleCheck;",
-                "import dagger.releasablereferences.ReleasableReferenceManager;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private final ReferenceReleasingProviderManager customScopeReferences =",
-                "      new ReferenceReleasingProviderManager(ReleasableScoped.CustomScope.class);",
-                "  private Provider<RegularScoped> regularScopedProvider;",
-                "  private Provider<ReusableScoped> reusableScopedProvider;",
-                "  private Provider<ReleasableScoped> releasableScopedProvider;",
-                "  private Provider<Object> unscopedProvider;",
-                "  private Provider<ReleasableReferenceManager>",
-                "      forReleasableReferencesReleasableReferenceManagerProvider;",
-                "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.regularScopedProvider = ",
-                "        DoubleCheck.provider(RegularScoped_Factory.create());",
-                "    this.reusableScopedProvider = ",
-                "        SingleCheck.provider(ReusableScoped_Factory.create());",
-                "    this.releasableScopedProvider = ",
-                "        ReferenceReleasingProvider.create(",
-                "            ReleasableScoped_Factory.create(), customScopeReferences);",
-                "    this.unscopedProvider = ",
-                "        ReferenceReleasingProvider.create(",
-                "            (Provider) Unscoped_Factory.create(), customScopeReferences);",
-                "    this.forReleasableReferencesReleasableReferenceManagerProvider =",
-                "        new Provider<ReleasableReferenceManager>() {",
-                "          @Override",
-                "          public ReleasableReferenceManager get() {",
-                "            return customScopeReferences;",
-                "          }",
-                "        };",
-                "  }",
-                "",
-                "  @Override",
-                "  public Object regular() {",
-                "    return regularScopedProvider.get();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Object reusable() {",
-                "    return reusableScopedProvider.get();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Object releasable() {",
-                "    return releasableScopedProvider.get();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Object unscoped() {",
-                "    return unscopedProvider.get();",
-                "  }",
-                "",
-                "  @Override",
-                "  public ReleasableReferenceManager releasableReferenceManager() {",
-                "    return forReleasableReferencesReleasableReferenceManagerProvider.get();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}"));
+            compilerMode
+                .javaFileBuilder("test.DaggerTestComponent")
+                .addLines(
+                    "package test;",
+                    "")
+                .addLinesIn(
+                    EXPERIMENTAL_ANDROID_MODE,
+                    "import dagger.internal.MemoizedSentinel;")
+                .addLinesIn(
+                    DEFAULT_MODE,
+                    "import dagger.internal.DoubleCheck;")
+                .addLines(
+                    "import dagger.internal.ReferenceReleasingProvider;",
+                    "import dagger.internal.ReferenceReleasingProviderManager;")
+                .addLinesIn(
+                    DEFAULT_MODE,
+                    "import dagger.internal.SingleCheck;")
+                .addLines(
+                    "import dagger.releasablereferences.ReleasableReferenceManager;",
+                    "import javax.annotation.Generated;",
+                    "import javax.inject.Provider;",
+                    "",
+                    GENERATED_ANNOTATION,
+                    "public final class DaggerTestComponent implements TestComponent {",
+                    "  private final ReferenceReleasingProviderManager customScopeReferences =",
+                    "      new ReferenceReleasingProviderManager(",
+                    "          ReleasableScoped.CustomScope.class);")
+                .addLinesIn(
+                    EXPERIMENTAL_ANDROID_MODE,
+                    "  private volatile Object regularScoped = new MemoizedSentinel();",
+                    "  private volatile Object reusableScoped = new MemoizedSentinel();")
+                .addLinesIn(
+                    DEFAULT_MODE,
+                    "  private Provider<RegularScoped> regularScopedProvider;",
+                    "  private Provider<ReusableScoped> reusableScopedProvider;")
+                .addLines(
+                    "  private Provider<ReleasableScoped> releasableScopedProvider;",
+                    "  private Provider<Object> unscopedProvider;",
+                    "  private Provider<ReleasableReferenceManager>",
+                    "      forReleasableReferencesReleasableReferenceManagerProvider;",
+                    "",
+                    "  private DaggerTestComponent(Builder builder) {",
+                    "    initialize(builder);",
+                    "  }",
+                    "",
+                    "  public static Builder builder() {",
+                    "    return new Builder();",
+                    "  }",
+                    "",
+                    "  public static TestComponent create() {",
+                    "    return new Builder().build();",
+                    "  }",
+                    "")
+                .addLinesIn(
+                    EXPERIMENTAL_ANDROID_MODE,
+                    "  private RegularScoped getRegularScoped() {",
+                    "    Object local = regularScoped;",
+                    "    if (local instanceof MemoizedSentinel) {",
+                    "      synchronized (local) {",
+                    "        if (local == regularScoped) {",
+                    "          regularScoped = new RegularScoped();",
+                    "        }",
+                    "        local = regularScoped;",
+                    "      }",
+                    "    }",
+                    "    return (RegularScoped) local;",
+                    "  }",
+                    "",
+                    "  private ReusableScoped getReusableScoped() {",
+                    "    if (reusableScoped instanceof MemoizedSentinel) {",
+                    "      reusableScoped = new ReusableScoped();",
+                    "    }",
+                    "    return (ReusableScoped) reusableScoped;",
+                    "  }",
+                    "")
+                .addLines(
+                    "  @SuppressWarnings(\"unchecked\")",
+                    "  private void initialize(final Builder builder) {")
+                .addLinesIn(
+                    DEFAULT_MODE,
+                    "    this.regularScopedProvider = ",
+                    "        DoubleCheck.provider(RegularScoped_Factory.create());",
+                    "    this.reusableScopedProvider = ",
+                    "        SingleCheck.provider(ReusableScoped_Factory.create());")
+                .addLines(
+                    "    this.releasableScopedProvider = ",
+                    "         ReferenceReleasingProvider.create(",
+                    "             ReleasableScoped_Factory.create(), customScopeReferences);",
+                    "    this.unscopedProvider =",
+                    "        ReferenceReleasingProvider.create(",
+                    "            (Provider) Unscoped_Factory.create(), customScopeReferences);",
+                    "    this.forReleasableReferencesReleasableReferenceManagerProvider =",
+                    "        new Provider<ReleasableReferenceManager>() {",
+                    "          @Override",
+                    "          public ReleasableReferenceManager get() {",
+                    "            return customScopeReferences;",
+                    "          }",
+                    "        };",
+                    "  }",
+                    "",
+                    "  @Override",
+                    "  public Object regular() {")
+                .addLinesIn(
+                    EXPERIMENTAL_ANDROID_MODE,
+                    "    return getRegularScoped();")
+                .addLinesIn(
+                    DEFAULT_MODE,
+                    "    return regularScopedProvider.get();")
+                .addLines(
+                    "  }",
+                    "",
+                    "  @Override",
+                    "  public Object reusable() {")
+                .addLinesIn(
+                    EXPERIMENTAL_ANDROID_MODE,
+                    "    return getReusableScoped();")
+                .addLinesIn(
+                    DEFAULT_MODE,
+                    "    return reusableScopedProvider.get();")
+                .addLines(
+                    "  }",
+                    "",
+                    "  @Override",
+                    "  public Object releasable() {",
+                    "    return releasableScopedProvider.get();",
+                    "  }",
+                    "",
+                    "  @Override",
+                    "  public Object unscoped() {",
+                    "    return unscopedProvider.get();",
+                    "  }",
+                    "",
+                    "  @Override",
+                    "  public ReleasableReferenceManager releasableReferenceManager() {",
+                    "    return forReleasableReferencesReleasableReferenceManagerProvider.get();",
+                    "  }",
+                    "",
+                    "  public static final class Builder {",
+                    "    private Builder() {}",
+                    "",
+                    "    public TestComponent build() {",
+                    "      return new DaggerTestComponent(this);",
+                    "    }",
+                    "  }",
+                    "}")
+                .build());
   }
 
   @Test
@@ -519,91 +707,148 @@ public void toUnscoped() {
     assertThatCompilationWithModule(module)
         .generatedSourceFile("test.DaggerTestComponent")
         .hasSourceEquivalentTo(
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import dagger.internal.DoubleCheck;",
-                "import dagger.internal.ReferenceReleasingProvider;",
-                "import dagger.internal.ReferenceReleasingProviderManager;",
-                "import dagger.internal.SingleCheck;",
-                "import dagger.releasablereferences.ReleasableReferenceManager;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private final ReferenceReleasingProviderManager customScopeReferences =",
-                "      new ReferenceReleasingProviderManager(ReleasableScoped.CustomScope.class);",
-                "  private Provider<RegularScoped> regularScopedProvider;",
-                "  private Provider<ReusableScoped> reusableScopedProvider;",
-                "  private Provider<ReleasableScoped> releasableScopedProvider;",
-                "  private Provider<ReleasableReferenceManager>",
-                "      forReleasableReferencesReleasableReferenceManagerProvider;",
-                "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.regularScopedProvider = ",
-                "        DoubleCheck.provider(RegularScoped_Factory.create());",
-                "    this.reusableScopedProvider = ",
-                "        SingleCheck.provider(ReusableScoped_Factory.create());",
-                "    this.releasableScopedProvider = ",
-                "         ReferenceReleasingProvider.create(",
-                "             ReleasableScoped_Factory.create(), customScopeReferences);",
-                "    this.forReleasableReferencesReleasableReferenceManagerProvider =",
-                "        new Provider<ReleasableReferenceManager>() {",
-                "          @Override",
-                "          public ReleasableReferenceManager get() {",
-                "            return customScopeReferences;",
-                "          }",
-                "        };",
-                "  }",
-                "",
-                "  @Override",
-                "  public Object regular() {",
-                "    return regularScopedProvider.get();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Object reusable() {",
-                "    return reusableScopedProvider.get();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Object releasable() {",
-                "    return releasableScopedProvider.get();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Object unscoped() {",
-                "    return new Unscoped();",
-                "  }",
-                "",
-                "  @Override",
-                "  public ReleasableReferenceManager releasableReferenceManager() {",
-                "    return forReleasableReferencesReleasableReferenceManagerProvider.get();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}"));
+            compilerMode
+                .javaFileBuilder("test.DaggerTestComponent")
+                .addLines(
+                    "package test;",
+                    "")
+                .addLinesIn(
+                    EXPERIMENTAL_ANDROID_MODE,
+                    "import dagger.internal.MemoizedSentinel;")
+                .addLinesIn(
+                    DEFAULT_MODE,
+                    "import dagger.internal.DoubleCheck;")
+                .addLines(
+                    "import dagger.internal.ReferenceReleasingProvider;",
+                    "import dagger.internal.ReferenceReleasingProviderManager;")
+                .addLinesIn(
+                    DEFAULT_MODE,
+                    "import dagger.internal.SingleCheck;")
+                .addLines(
+                    "import dagger.releasablereferences.ReleasableReferenceManager;",
+                    "import javax.annotation.Generated;",
+                    "import javax.inject.Provider;",
+                    "",
+                    GENERATED_ANNOTATION,
+                    "public final class DaggerTestComponent implements TestComponent {",
+                    "  private final ReferenceReleasingProviderManager customScopeReferences =",
+                    "      new ReferenceReleasingProviderManager(",
+                    "          ReleasableScoped.CustomScope.class);")
+                .addLinesIn(
+                    EXPERIMENTAL_ANDROID_MODE,
+                    "  private volatile Object regularScoped = new MemoizedSentinel();",
+                    "  private volatile Object reusableScoped = new MemoizedSentinel();")
+                .addLinesIn(
+                    DEFAULT_MODE,
+                    "  private Provider<RegularScoped> regularScopedProvider;",
+                    "  private Provider<ReusableScoped> reusableScopedProvider;")
+                .addLines(
+                    "  private Provider<ReleasableScoped> releasableScopedProvider;",
+                    "  private Provider<ReleasableReferenceManager>",
+                    "      forReleasableReferencesReleasableReferenceManagerProvider;",
+                    "",
+                    "  private DaggerTestComponent(Builder builder) {",
+                    "    initialize(builder);",
+                    "  }",
+                    "",
+                    "  public static Builder builder() {",
+                    "    return new Builder();",
+                    "  }",
+                    "",
+                    "  public static TestComponent create() {",
+                    "    return new Builder().build();",
+                    "  }",
+                    "")
+                .addLinesIn(
+                    EXPERIMENTAL_ANDROID_MODE,
+                    "  private RegularScoped getRegularScoped() {",
+                    "    Object local = regularScoped;",
+                    "    if (local instanceof MemoizedSentinel) {",
+                    "      synchronized (local) {",
+                    "        if (local == regularScoped) {",
+                    "          regularScoped = new RegularScoped();",
+                    "        }",
+                    "        local = regularScoped;",
+                    "      }",
+                    "    }",
+                    "    return (RegularScoped) local;",
+                    "  }",
+                    "",
+                    "  private ReusableScoped getReusableScoped() {",
+                    "    if (reusableScoped instanceof MemoizedSentinel) {",
+                    "      reusableScoped = new ReusableScoped();",
+                    "    }",
+                    "    return (ReusableScoped) reusableScoped;",
+                    "  }",
+                    "")
+                .addLines(
+                    "  @SuppressWarnings(\"unchecked\")",
+                    "  private void initialize(final Builder builder) {")
+                .addLinesIn(
+                    DEFAULT_MODE,
+                    "    this.regularScopedProvider = ",
+                    "        DoubleCheck.provider(RegularScoped_Factory.create());",
+                    "    this.reusableScopedProvider = ",
+                    "        SingleCheck.provider(ReusableScoped_Factory.create());")
+                .addLines(
+                    "    this.releasableScopedProvider = ",
+                    "         ReferenceReleasingProvider.create(",
+                    "             ReleasableScoped_Factory.create(), customScopeReferences);",
+                    "    this.forReleasableReferencesReleasableReferenceManagerProvider =",
+                    "        new Provider<ReleasableReferenceManager>() {",
+                    "          @Override",
+                    "          public ReleasableReferenceManager get() {",
+                    "            return customScopeReferences;",
+                    "          }",
+                    "        };",
+                    "  }",
+                    "",
+                    "  @Override",
+                    "  public Object regular() {")
+                .addLinesIn(
+                    EXPERIMENTAL_ANDROID_MODE,
+                    "    return getRegularScoped();")
+                .addLinesIn(
+                    DEFAULT_MODE,
+                    "    return regularScopedProvider.get();")
+                .addLines(
+                    "  }",
+                    "",
+                    "  @Override",
+                    "  public Object reusable() {")
+                .addLinesIn(
+                    EXPERIMENTAL_ANDROID_MODE,
+                    "    return getReusableScoped();")
+                .addLinesIn(
+                    DEFAULT_MODE,
+                    "    return reusableScopedProvider.get();")
+                .addLines(
+                    "  }",
+                    "",
+                    "  @Override",
+                    "  public Object releasable() {",
+                    "    return releasableScopedProvider.get();",
+                    "  }",
+                    "",
+                    "  @Override",
+                    "  public Object unscoped() {",
+                    "    return new Unscoped();",
+                    "  }",
+                    "",
+                    "  @Override",
+                    "  public ReleasableReferenceManager releasableReferenceManager() {",
+                    "    return forReleasableReferencesReleasableReferenceManagerProvider.get();",
+                    "  }",
+                    "",
+                    "  public static final class Builder {",
+                    "    private Builder() {}",
+                    "",
+                    "    public TestComponent build() {",
+                    "      return new DaggerTestComponent(this);",
+                    "    }",
+                    "  }",
+                    "}")
+                .build());
   }
 
   @Test
@@ -998,6 +1243,7 @@ public void inlineFactoryOfInacessibleType() {
   private CompilationSubject assertThatCompilationWithModule(JavaFileObject module) {
     Compilation compilation =
         daggerCompiler()
+            .withOptions(compilerMode.javacopts())
             .compile(
                 module,
                 COMPONENT,
diff --git a/javatests/dagger/internal/codegen/ElidedFactoriesTest.java b/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
index e4a1b25e3..69a502c03 100644
--- a/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
+++ b/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
@@ -179,17 +179,15 @@ public void simpleComponent_injectsProviderOf_dependsOnScoped() {
                 "test.DaggerSimpleComponent",
                 "package test;",
                 "",
-                "import dagger.internal.DoubleCheck;",
+                "import dagger.internal.MemoizedSentinel;",
                 "import javax.annotation.Generated;",
                 "import javax.inject.Provider;",
                 "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerSimpleComponent implements SimpleComponent {",
-                "  private Provider<ScopedType> scopedTypeProvider;",
+                "  private volatile Object scopedType = new MemoizedSentinel();",
                 "",
-                "  private DaggerSimpleComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
+                "  private DaggerSimpleComponent(Builder builder) {}",
                 "",
                 "  public static Builder builder() {",
                 "    return new Builder();",
@@ -199,8 +197,21 @@ public void simpleComponent_injectsProviderOf_dependsOnScoped() {
                 "    return new Builder().build();",
                 "  }",
                 "",
+                "  private ScopedType getScopedType() {",
+                "    Object local = scopedType;",
+                "    if (local instanceof MemoizedSentinel) {",
+                "      synchronized (local) {",
+                "        if (local == scopedType) {",
+                "          scopedType = new ScopedType();",
+                "        }",
+                "        local = scopedType;",
+                "      }",
+                "    }",
+                "    return (ScopedType) local;",
+                "  }",
+                "",
                 "  private DependsOnScoped getDependsOnScoped() {",
-                "    return new DependsOnScoped(scopedTypeProvider.get());",
+                "    return new DependsOnScoped(getScopedType());",
                 "  }",
                 "",
                 "  private Provider<DependsOnScoped> getDependsOnScopedProvider() {",
@@ -212,11 +223,6 @@ public void simpleComponent_injectsProviderOf_dependsOnScoped() {
                 "    };",
                 "  }",
                 "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.scopedTypeProvider = DoubleCheck.provider(ScopedType_Factory.create());",
-                "  }",
-                "",
                 "  @Override",
                 "  public NeedsProvider needsProvider() {",
                 "    return new NeedsProvider(getDependsOnScopedProvider());",
@@ -348,17 +354,14 @@ public void scopedBinding_onlyUsedInSubcomponent() {
                 "test.DaggerSimpleComponent",
                 "package test;",
                 "",
-                "import dagger.internal.DoubleCheck;",
+                "import dagger.internal.MemoizedSentinel;",
                 "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
                 "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerSimpleComponent implements SimpleComponent {",
-                "  private Provider<ScopedType> scopedTypeProvider;",
+                "  private volatile Object scopedType = new MemoizedSentinel();",
                 "",
-                "  private DaggerSimpleComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
+                "  private DaggerSimpleComponent(Builder builder) {}",
                 "",
                 "  public static Builder builder() {",
                 "    return new Builder();",
@@ -368,9 +371,17 @@ public void scopedBinding_onlyUsedInSubcomponent() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.scopedTypeProvider = DoubleCheck.provider(ScopedType_Factory.create());",
+                "  private ScopedType getScopedType() {",
+                "    Object local = scopedType;",
+                "    if (local instanceof MemoizedSentinel) {",
+                "      synchronized (local) {",
+                "        if (local == scopedType) {",
+                "          scopedType = new ScopedType();",
+                "        }",
+                "        local = scopedType;",
+                "      }",
+                "    }",
+                "    return (ScopedType) local;",
                 "  }",
                 "",
                 "  @Override",
@@ -391,8 +402,7 @@ public void scopedBinding_onlyUsedInSubcomponent() {
                 "",
                 "    @Override",
                 "    public DependsOnScoped dependsOnScoped() {",
-                "      return new DependsOnScoped(",
-                "          DaggerSimpleComponent.this.scopedTypeProvider.get());",
+                "      return new DependsOnScoped(DaggerSimpleComponent.this.getScopedType());",
                 "    }",
                 "  }",
                 "}");
diff --git a/javatests/dagger/internal/codegen/MembersInjectionTest.java b/javatests/dagger/internal/codegen/MembersInjectionTest.java
index 4738d1f7e..ffc08f211 100644
--- a/javatests/dagger/internal/codegen/MembersInjectionTest.java
+++ b/javatests/dagger/internal/codegen/MembersInjectionTest.java
@@ -21,9 +21,12 @@
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 import static com.google.testing.compile.JavaSourcesSubject.assertThat;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
+import static dagger.internal.codegen.CompilerMode.DEFAULT_MODE;
+import static dagger.internal.codegen.CompilerMode.EXPERIMENTAL_ANDROID_MODE;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
 import static dagger.internal.codegen.ErrorMessages.INJECT_INTO_PRIVATE_CLASS;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.NPE_FROM_PROVIDES_METHOD;
 import static javax.tools.StandardLocation.CLASS_OUTPUT;
 
 import com.google.common.base.Joiner;
@@ -1402,73 +1405,118 @@ public void accessibleRawType_ofInaccessibleType() {
             .compile(inaccessible, inaccessiblesModule, usesInaccessibles, component);
     assertThat(compilation).succeeded();
     JavaFileObject generatedComponent =
-        JavaFileObjects.forSourceLines(
-            "other.DaggerTestComponent",
-            "package test;",
-            "",
-            "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-            "import dagger.internal.DoubleCheck;",
-            "import dagger.internal.Preconditions;",
-            "import java.util.List;",
-            "import javax.annotation.Generated;",
-            "import javax.inject.Provider;",
-            "import other.InaccessiblesModule;",
-            "import other.InaccessiblesModule_InaccessiblesFactory;",
-            "import other.UsesInaccessibles;",
-            "import other.UsesInaccessibles_Factory;",
-            "import other.UsesInaccessibles_MembersInjector;",
-            "",
-            GENERATED_ANNOTATION,
-            "public final class DaggerTestComponent implements TestComponent {",
-            "  @SuppressWarnings(\"rawtypes\")",
-            "  private Provider inaccessiblesProvider;",
-            "",
-            "  private DaggerTestComponent(Builder builder) {",
-            "    initialize(builder);",
-            "  }",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static TestComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
-            "  @SuppressWarnings(\"unchecked\")",
-            "  private void initialize(final Builder builder) {",
-            "    this.inaccessiblesProvider =",
-            "        DoubleCheck.provider(InaccessiblesModule_InaccessiblesFactory.create());",
-            "  }",
-            "",
-            "  @Override",
-            "  public UsesInaccessibles usesInaccessibles() {",
-            "    return injectUsesInaccessibles(",
-            "        UsesInaccessibles_Factory.newUsesInaccessibles());",
-            "  }",
-            "",
-            "  @CanIgnoreReturnValue",
-            "  private UsesInaccessibles injectUsesInaccessibles(",
-            "        UsesInaccessibles instance) {",
-            "    UsesInaccessibles_MembersInjector.injectInaccessibles(",
-            "        instance, (List) inaccessiblesProvider.get());",
-            "    return instance;",
-            "  }",
-            "",
-            "  public static final class Builder {",
-            "    private Builder() {}",
-            "",
-            "    public TestComponent build() {",
-            "      return new DaggerTestComponent(this);",
-            "    }",
-            "",
-            "    @Deprecated",
-            "    public Builder inaccessiblesModule(InaccessiblesModule inaccessiblesModule) {",
-            "      Preconditions.checkNotNull(inaccessiblesModule);",
-            "      return this;",
-            "    }",
-            "  }",
-            "}");
+        compilerMode
+            .javaFileBuilder("test.DaggerTestComponent")
+            .addLines(
+                "package test;",
+                "",
+                "import com.google.errorprone.annotations.CanIgnoreReturnValue;")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
+                "import dagger.internal.MemoizedSentinel;")
+            .addLinesIn(
+                DEFAULT_MODE,
+                "import dagger.internal.DoubleCheck;")
+            .addLines(
+                "import dagger.internal.Preconditions;",
+                "import java.util.List;",
+                "import javax.annotation.Generated;")
+            .addLinesIn(
+                DEFAULT_MODE,
+                "import javax.inject.Provider;")
+            .addLines(
+                "import other.InaccessiblesModule;",
+                "import other.InaccessiblesModule_InaccessiblesFactory;",
+                "import other.UsesInaccessibles;",
+                "import other.UsesInaccessibles_Factory;",
+                "import other.UsesInaccessibles_MembersInjector;",
+                "",
+                GENERATED_ANNOTATION,
+                "public final class DaggerTestComponent implements TestComponent {")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
+                "  private volatile Object listOfInaccessible = new MemoizedSentinel();",
+                "",
+                "  private DaggerTestComponent(Builder builder) {}")
+            .addLinesIn(
+                DEFAULT_MODE,
+                "  @SuppressWarnings(\"rawtypes\")",
+                "  private Provider inaccessiblesProvider;",
+                "",
+                "  private DaggerTestComponent(Builder builder) {",
+                "    initialize(builder);",
+                "  }")
+            .addLines(
+                "",
+                "  public static Builder builder() {",
+                "    return new Builder();",
+                "  }",
+                "",
+                "  public static TestComponent create() {",
+                "    return new Builder().build();",
+                "  }",
+                "")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
+                "  private List getListOfInaccessible() {",
+                "    Object local = listOfInaccessible;",
+                "    if (local instanceof MemoizedSentinel) {",
+                "      synchronized (local) {",
+                "        if (local == listOfInaccessible) {",
+                "          listOfInaccessible =",
+                "              Preconditions.checkNotNull(",
+                "                  InaccessiblesModule_InaccessiblesFactory.proxyInaccessibles(),",
+                "                  " + NPE_FROM_PROVIDES_METHOD + ");",
+                "        }",
+                "        local = listOfInaccessible;",
+                "      }",
+                "    }",
+                "    return (List) local;",
+                "  }")
+            .addLinesIn(
+                DEFAULT_MODE,
+                "  @SuppressWarnings(\"unchecked\")",
+                "  private void initialize(final Builder builder) {",
+                "    this.inaccessiblesProvider =",
+                "        DoubleCheck.provider(InaccessiblesModule_InaccessiblesFactory.create());",
+                "  }")
+            .addLines(
+                "",
+                "  @Override",
+                "  public UsesInaccessibles usesInaccessibles() {",
+                "    return injectUsesInaccessibles(",
+                "        UsesInaccessibles_Factory.newUsesInaccessibles());",
+                "  }",
+                "",
+                "  @CanIgnoreReturnValue",
+                "  private UsesInaccessibles injectUsesInaccessibles(",
+                "        UsesInaccessibles instance) {",
+                "    UsesInaccessibles_MembersInjector.injectInaccessibles(")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
+                "        instance, (List) getListOfInaccessible());")
+            .addLinesIn(
+                DEFAULT_MODE,
+                "        instance, (List) inaccessiblesProvider.get());")
+            .addLines(
+                "    return instance;",
+                "  }",
+                "",
+                "  public static final class Builder {",
+                "    private Builder() {}",
+                "",
+                "    public TestComponent build() {",
+                "      return new DaggerTestComponent(this);",
+                "    }",
+                "",
+                "    @Deprecated",
+                "    public Builder inaccessiblesModule(InaccessiblesModule inaccessiblesModule) {",
+                "      Preconditions.checkNotNull(inaccessiblesModule);",
+                "      return this;",
+                "    }",
+                "  }",
+                "}")
+            .build();
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
         .hasSourceEquivalentTo(generatedComponent);
diff --git a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
index 8e3f0f5f9..a9e9e6e6e 100644
--- a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -227,8 +227,8 @@ public void simpleComponent() {
                 "package test;",
                 "",
                 "import com.google.common.util.concurrent.ListenableFuture;",
-                "import dagger.internal.DoubleCheck;",
                 "import dagger.internal.InstanceFactory;",
+                "import dagger.internal.MemoizedSentinel;",
                 "import dagger.internal.Preconditions;",
                 "import dagger.internal.SetFactory;",
                 "import dagger.producers.Producer;",
@@ -241,10 +241,11 @@ public void simpleComponent() {
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestClass_SimpleComponent",
                 "    implements TestClass.SimpleComponent {",
+                "  private volatile Object productionImplementationExecutor =",
+                "      new MemoizedSentinel();",
                 "  private TestClass.BModule bModule;",
-                "  private Provider<Executor> executorProvider2;",
+                "  private volatile Object productionComponentMonitor = new MemoizedSentinel();",
                 "  private Provider<TestClass.SimpleComponent> simpleComponentProvider;",
-                "  private Provider<ProductionComponentMonitor> monitorProvider;",
                 "  private Producer<TestClass.B> bProducer;",
                 "  private Producer<TestClass.A> aProducer;",
                 "",
@@ -260,12 +261,58 @@ public void simpleComponent() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private Provider<Executor> getProductionExecutorProvider() {",
+                "  private Executor getProductionImplementationExecutor() {",
+                "    Object local = productionImplementationExecutor;",
+                "    if (local instanceof MemoizedSentinel) {",
+                "      synchronized (local) {",
+                "        if (local == productionImplementationExecutor) {",
+                "          productionImplementationExecutor =",
+                "              Preconditions.checkNotNull(",
+                "                  TestClass_SimpleComponent_ProductionExecutorModule.executor(",
+                "                      Preconditions.checkNotNull(",
+                "                          bModule.executor(),",
+                "                          " + NPE_FROM_PROVIDES_METHOD + ")),",
+                "                  " + NPE_FROM_PROVIDES_METHOD + ");",
+                "        }",
+                "        local = productionImplementationExecutor;",
+                "      }",
+                "    }",
+                "    return (Executor) local;",
+                "  }",
+                "",
+                "  private Provider<Executor> getProductionImplementationExecutorProvider() {",
                 "    return new Provider<Executor>() {",
                 "      @Override",
                 "      public Executor get() {",
-                "        return Preconditions.checkNotNull(",
-                "            bModule.executor(), " + NPE_FROM_PROVIDES_METHOD + ");",
+                "        return getProductionImplementationExecutor();",
+                "      }",
+                "    };",
+                "  }",
+                "",
+                "  private ProductionComponentMonitor getProductionComponentMonitor() {",
+                "    Object local = productionComponentMonitor;",
+                "    if (local instanceof MemoizedSentinel) {",
+                "      synchronized (local) {",
+                "        if (local == productionComponentMonitor) {",
+                "          productionComponentMonitor =",
+                "              Preconditions.checkNotNull(",
+                "                  TestClass_SimpleComponent_MonitoringModule.monitor(",
+                "                      simpleComponentProvider,",
+                "                      SetFactory.<ProductionComponentMonitor.Factory>empty()),",
+                "                  " + NPE_FROM_PROVIDES_METHOD + ");",
+                "        }",
+                "        local = productionComponentMonitor;",
+                "      }",
+                "    }",
+                "    return (ProductionComponentMonitor) local;",
+                "  }",
+                "",
+                "  private Provider<ProductionComponentMonitor>",
+                "      getProductionComponentMonitorProvider() {",
+                "    return new Provider<ProductionComponentMonitor>() {",
+                "      @Override",
+                "      public ProductionComponentMonitor get() {",
+                "        return getProductionComponentMonitor();",
                 "      }",
                 "    };",
                 "  }",
@@ -291,21 +338,15 @@ public void simpleComponent() {
                 "  @SuppressWarnings(\"unchecked\")",
                 "  private void initialize(final Builder builder) {",
                 "    this.bModule = builder.bModule;",
-                "    this.executorProvider2 =",
-                "        DoubleCheck.provider(",
-                "            TestClass_SimpleComponent_ProductionExecutorModule_ExecutorFactory",
-                "                .create(getProductionExecutorProvider()));",
                 "    this.simpleComponentProvider =",
                 "        InstanceFactory.<TestClass.SimpleComponent>create(this);",
-                "    this.monitorProvider =",
-                "        DoubleCheck.provider(",
-                "            TestClass_SimpleComponent_MonitoringModule_MonitorFactory.create(",
-                "                simpleComponentProvider,",
-                "                SetFactory.<ProductionComponentMonitor.Factory>empty()));",
                 "    this.bProducer = Producers.producerFromProvider(getBProvider());",
                 "    this.aProducer =",
                 "        new TestClass_AModule_AFactory(",
-                "            builder.aModule, executorProvider2, monitorProvider, getBProducer());",
+                "            builder.aModule,",
+                "            getProductionImplementationExecutorProvider(),",
+                "            getProductionComponentMonitorProvider(),",
+                "            getBProducer());",
                 "  }",
                 "",
                 "  @Override",
diff --git a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
index 42b11eec8..b673cd958 100644
--- a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
+++ b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
@@ -19,6 +19,8 @@
 import static com.google.common.truth.Truth.assertAbout;
 import static com.google.testing.compile.JavaSourcesSubject.assertThat;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
+import static dagger.internal.codegen.CompilerMode.DEFAULT_MODE;
+import static dagger.internal.codegen.CompilerMode.EXPERIMENTAL_ANDROID_MODE;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 import static dagger.internal.codegen.GeneratedLines.NPE_FROM_PROVIDES_METHOD;
 
@@ -385,95 +387,162 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
             "}");
 
     JavaFileObject generatedComponent =
-        JavaFileObjects.forSourceLines(
-            "test.DaggerParentComponent",
-            "package test;",
-            "",
-            "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-            "import dagger.internal.DoubleCheck;",
-            "import dagger.internal.Preconditions;",
-            "import javax.annotation.Generated;",
-            "import javax.inject.Provider;",
-            "",
-            GENERATED_ANNOTATION,
-            "public final class DaggerParentComponent implements ParentComponent {",
-            "  private Provider<Dep1> dep1Provider;",
-            "  private Provider<Dep2> dep2Provider;",
-            "",
-            "  private DaggerParentComponent(Builder builder) {",
-            "    initialize(builder);",
-            "  }",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static ParentComponent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
-            "  @SuppressWarnings(\"unchecked\")",
-            "  private void initialize(final Builder builder) {",
-            "    this.dep1Provider = DoubleCheck.provider(Dep1_Factory.create());",
-            "    this.dep2Provider = DoubleCheck.provider(Dep2_Factory.create());",
-            "  }",
-            "",
-            "  @Override",
-            "  public Dep1 getDep1() {",
-            "    return dep1Provider.get();",
-            "  }",
-            "",
-            "  @Override",
-            "  public Dep2 getDep2() {",
-            "    return dep2Provider.get();",
-            "  }",
-            "",
-            "  @Override",
-            "  public ChildComponent childComponent() {",
-            "    return new ChildComponentImpl();",
-            "  }",
-            "",
-            "  public static final class Builder {",
-            "    private Builder() {}",
-            "",
-            "    public ParentComponent build() {",
-            "      return new DaggerParentComponent(this);",
-            "    }",
-            "  }",
-            "",
-            "  private final class ChildComponentImpl implements ChildComponent {",
-            "    private final ChildModule childModule;",
-            "",
-            "    private ChildComponentImpl() {",
-            "      this.childModule = new ChildModule();",
-            "    }",
-            "",
-            "    private NeedsDep1 getNeedsDep1() {",
-            "      return new NeedsDep1(DaggerParentComponent.this.dep1Provider.get());",
-            "    }",
-            "",
-            "    private A getA() {",
-            "      return injectA(",
-            "          A_Factory.newA(",
-            "              getNeedsDep1(),",
-            "              DaggerParentComponent.this.dep1Provider.get(),",
-            "              DaggerParentComponent.this.dep2Provider.get()));",
-            "    }",
-            "",
-            "    @Override",
-            "    public Object getObject() {",
-            "      return Preconditions.checkNotNull(",
-            "          childModule.provideObject(getA()),",
-            "          " + NPE_FROM_PROVIDES_METHOD + ");",
-            "    }",
-            "",
-            "    @CanIgnoreReturnValue",
-            "    private A injectA(A instance) {",
-            "      A_MembersInjector.injectMethodA(instance);",
-            "      return instance;",
-            "    }",
-            "  }",
-            "}");
+        compilerMode
+            .javaFileBuilder("test.DaggerParentComponent")
+            .addLines(
+                "package test;",
+                "",
+                "import com.google.errorprone.annotations.CanIgnoreReturnValue;")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
+                "import dagger.internal.MemoizedSentinel;")
+            .addLinesIn(
+                DEFAULT_MODE,
+                "import dagger.internal.DoubleCheck;")
+            .addLines(
+                "import dagger.internal.Preconditions;",
+                "import javax.annotation.Generated;")
+            .addLinesIn(
+                DEFAULT_MODE,
+                "import javax.inject.Provider;")
+            .addLines(
+                "",
+                GENERATED_ANNOTATION,
+                "public final class DaggerParentComponent implements ParentComponent {")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
+                "  private volatile Object dep1 = new MemoizedSentinel();",
+                "  private volatile Object dep2 = new MemoizedSentinel();",
+                "",
+                "  private DaggerParentComponent(Builder builder) {}")
+            .addLinesIn(
+                DEFAULT_MODE,
+                "  private Provider<Dep1> dep1Provider;",
+                "  private Provider<Dep2> dep2Provider;",
+                "",
+                "  private DaggerParentComponent(Builder builder) {",
+                "    initialize(builder);",
+                "  }")
+            .addLines(
+                "",
+                "  public static Builder builder() {",
+                "    return new Builder();",
+                "  }",
+                "",
+                "  public static ParentComponent create() {",
+                "    return new Builder().build();",
+                "  }",
+                "")
+            .addLinesIn(
+                DEFAULT_MODE,
+                "  @SuppressWarnings(\"unchecked\")",
+                "  private void initialize(final Builder builder) {",
+                "    this.dep1Provider = DoubleCheck.provider(Dep1_Factory.create());",
+                "    this.dep2Provider = DoubleCheck.provider(Dep2_Factory.create());",
+                "  }",
+                "")
+            .addLines(
+                "  @Override",
+                "  public Dep1 getDep1() {")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
+                "   Object local = dep1;",
+                "    if (local instanceof MemoizedSentinel) {",
+                "      synchronized (local) {",
+                "        if (local == dep1) {",
+                "          dep1 = injectDep1(Dep1_Factory.newDep1());",
+                "        }",
+                "        local = dep1;",
+                "      }",
+                "    }",
+                "    return (Dep1) local;")
+            .addLinesIn(
+                DEFAULT_MODE,
+                "    return dep1Provider.get();")
+            .addLines(
+                "  }",
+                "",
+                "  @Override",
+                "  public Dep2 getDep2() {")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
+                "   Object local = dep2;",
+                "    if (local instanceof MemoizedSentinel) {",
+                "      synchronized (local) {",
+                "        if (local == dep2) {",
+                "          dep2 = injectDep2(Dep2_Factory.newDep2());",
+                "        }",
+                "        local = dep2;",
+                "      }",
+                "    }",
+                "    return (Dep2) local;")
+            .addLinesIn(
+                DEFAULT_MODE,
+                "    return dep2Provider.get();")
+            .addLines(
+                "  }",
+                "",
+                "  @Override",
+                "  public ChildComponent childComponent() {",
+                "    return new ChildComponentImpl();",
+                "  }",
+                "")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
+                "  @CanIgnoreReturnValue",
+                "  private Dep1 injectDep1(Dep1 instance) {",
+                "    Dep1_MembersInjector.injectDep1Method(instance);",
+                "    return instance;",
+                "  }",
+                "",
+                "  @CanIgnoreReturnValue",
+                "  private Dep2 injectDep2(Dep2 instance) {",
+                "    Dep2_MembersInjector.injectDep2Method(instance);",
+                "    return instance;",
+                "  }")
+            .addLines(
+                "  public static final class Builder {",
+                "    private Builder() {}",
+                "",
+                "    public ParentComponent build() {",
+                "      return new DaggerParentComponent(this);",
+                "    }",
+                "  }",
+                "",
+                "  private final class ChildComponentImpl implements ChildComponent {",
+                "    private final ChildModule childModule;",
+                "",
+                "    private ChildComponentImpl() {",
+                "      this.childModule = new ChildModule();",
+                "    }",
+                "",
+                "    private NeedsDep1 getNeedsDep1() {",
+                "      return new NeedsDep1(DaggerParentComponent.this.getDep1());",
+                "    }",
+                "",
+                "    private A getA() {",
+                "      return injectA(",
+                "          A_Factory.newA(",
+                "              getNeedsDep1(),",
+                "              DaggerParentComponent.this.getDep1(),",
+                "              DaggerParentComponent.this.getDep2()));",
+                "    }",
+                "",
+                "    @Override",
+                "    public Object getObject() {",
+                "      return Preconditions.checkNotNull(",
+                "          childModule.provideObject(getA()),",
+                "          " + NPE_FROM_PROVIDES_METHOD + ");",
+                "    }",
+                "",
+                "    @CanIgnoreReturnValue",
+                "    private A injectA(A instance) {",
+                "      A_MembersInjector.injectMethodA(instance);",
+                "      return instance;",
+                "    }",
+                "  }",
+                "}")
+            .build();
     assertAbout(javaSources())
         .that(
             ImmutableList.of(
