diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index 20cebe311..45e950aee 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -39,6 +39,7 @@ CODEGEN_SHARED_DEPS = [
     "@google_bazel_common//third_party/java/auto:service",
     "@google_bazel_common//third_party/java/auto:value",
     "@google_bazel_common//third_party/java/auto:common",
+    "@google_bazel_common//third_party/java/checker_framework_annotations",
     "@google_bazel_common//third_party/java/error_prone:annotations",
     "@google_bazel_common//third_party/java/google_java_format",
     "@google_bazel_common//third_party/java/javapoet",
diff --git a/java/dagger/internal/codegen/DiagnosticReporterFactory.java b/java/dagger/internal/codegen/DiagnosticReporterFactory.java
index cdbdcff03..ada013b0d 100644
--- a/java/dagger/internal/codegen/DiagnosticReporterFactory.java
+++ b/java/dagger/internal/codegen/DiagnosticReporterFactory.java
@@ -68,6 +68,7 @@
 import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
 import javax.tools.Diagnostic;
+import org.checkerframework.checker.nullness.compatqual.NullableDecl;
 
 /** A factory for {@link DiagnosticReporter}s. */
 // TODO(ronshapiro): If multiple plugins print errors on the same node/edge, should we condense the
@@ -229,7 +230,9 @@ private Node source(Edge edge) {
     }
 
     void printMessage(
-        Diagnostic.Kind diagnosticKind, CharSequence message, Element elementToReport) {
+        Diagnostic.Kind diagnosticKind,
+        CharSequence message,
+        @NullableDecl Element elementToReport) {
       if (graph.isModuleBindingGraph()) {
         if (compilerOptions.moduleBindingValidationType().equals(NONE)) {
           return;
@@ -244,7 +247,7 @@ void printMessage(
 
       // TODO(ronshapiro): should we create a HashSet out of elementEncloses() so we don't
       // need to do an O(n) contains() each time?
-      if (!elementEncloses(rootComponent, elementToReport)) {
+      if (elementToReport != null && !elementEncloses(rootComponent, elementToReport)) {
         appendBracketPrefix(fullMessage, elementToString(elementToReport));
         elementToReport = rootComponent;
       }
diff --git a/java/dagger/spi/BUILD b/java/dagger/spi/BUILD
index fb4fcc148..9c045824c 100644
--- a/java/dagger/spi/BUILD
+++ b/java/dagger/spi/BUILD
@@ -28,7 +28,7 @@ filegroup(
     srcs = glob(["*.java"]),
 )
 
-load("//tools:maven.bzl", "pom_file", "POM_VERSION")
+load("//tools:maven.bzl", "POM_VERSION", "pom_file")
 
 java_library(
     name = "spi",
diff --git a/javatests/dagger/spi/FailingPlugin.java b/javatests/dagger/spi/FailingPlugin.java
index 39623355b..8fd0e359d 100644
--- a/javatests/dagger/spi/FailingPlugin.java
+++ b/javatests/dagger/spi/FailingPlugin.java
@@ -31,7 +31,10 @@
   @Override
   public Set<String> supportedOptions() {
     return ImmutableSet.of(
-        "error_on_binding", "error_on_dependency", "error_on_component", "error_on_subcomponents");
+        "error_on_binding",
+        "error_on_dependency",
+        "error_on_component",
+        "error_on_subcomponents");
   }
 
   @Override
@@ -80,6 +83,7 @@ public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticR
           .forEach(
               edge -> diagnosticReporter.reportDependency(ERROR, edge, "Bad Dependency: %s", edge));
     }
+
   }
 
   @Override
