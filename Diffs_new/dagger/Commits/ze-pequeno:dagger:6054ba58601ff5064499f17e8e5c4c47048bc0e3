diff --git a/javatests/dagger/functional/cycle/LongCycleTest.java b/javatests/dagger/functional/cycle/LongCycleTest.java
index 4c986b2ac..a6244b181 100644
--- a/javatests/dagger/functional/cycle/LongCycleTest.java
+++ b/javatests/dagger/functional/cycle/LongCycleTest.java
@@ -17,6 +17,7 @@
 package dagger.functional.cycle;
 
 import static com.google.common.truth.Truth.assertThat;
+import static com.google.common.truth.Truth.assertWithMessage;
 import static com.google.common.truth.TruthJUnit.assume;
 import static java.util.Arrays.stream;
 
@@ -50,6 +51,8 @@ public void longCycleHasMoreThanOneInitializeMethod() {
         stream(DaggerLongCycle_LongCycleComponent.class.getDeclaredMethods())
             .map(Method::getName)
             .anyMatch(name -> name.equals("initialize2"));
-    assertThat(hasInitialize2).named("LongCycleComponent impl has an initialize2 method").isTrue();
+    assertWithMessage("LongCycleComponent impl has an initialize2 method")
+        .that(hasInitialize2)
+        .isTrue();
   }
 }
diff --git a/javatests/dagger/functional/producers/cancellation/ProducerTester.java b/javatests/dagger/functional/producers/cancellation/ProducerTester.java
index 61ddaef35..35cf8e902 100644
--- a/javatests/dagger/functional/producers/cancellation/ProducerTester.java
+++ b/javatests/dagger/functional/producers/cancellation/ProducerTester.java
@@ -17,7 +17,7 @@
 package dagger.functional.producers.cancellation;
 
 import static com.google.common.base.Preconditions.checkNotNull;
-import static com.google.common.truth.Truth.assertThat;
+import static com.google.common.truth.Truth.assertWithMessage;
 
 import com.google.common.collect.ImmutableSet;
 import com.google.common.util.concurrent.AbstractFuture;
@@ -93,7 +93,7 @@ Only assertNotCancelled(String... nodes) {
   /** Asserts that no nodes in this tester have been started. */
   void assertNoStartedNodes() {
     for (TestFuture future : futures.values()) {
-      assertThat(future.isStarted()).named("%s is started", future).isFalse();
+      assertWithMessage("%s is started", future).that(future.isStarted()).isFalse();
     }
   }
 
@@ -101,7 +101,7 @@ private Only assertAboutNodes(Predicate<? super TestFuture> assertion, String...
     ImmutableSet.Builder<TestFuture> builder = ImmutableSet.builder();
     for (String node : nodes) {
       TestFuture future = getOrCreate(node);
-      assertThat(assertion.test(future)).named("%s is %s", future, assertion).isTrue();
+      assertWithMessage("%s is %s", future, assertion).that(assertion.test(future)).isTrue();
       builder.add(future);
     }
     return new Only(builder.build(), assertion);
@@ -128,7 +128,7 @@ private Only assertAboutNodes(Predicate<? super TestFuture> assertion, String...
     void only() {
       for (TestFuture future : futures.values()) {
         if (!expected.contains(future)) {
-          assertThat(assertion.test(future)).named("%s is %s", future, assertion).isFalse();
+          assertWithMessage("%s is %s", future, assertion).that(assertion.test(future)).isFalse();
         }
       }
     }
diff --git a/javatests/dagger/internal/codegen/KeyFactoryTest.java b/javatests/dagger/internal/codegen/KeyFactoryTest.java
index f1b48550c..b0c0a9f97 100644
--- a/javatests/dagger/internal/codegen/KeyFactoryTest.java
+++ b/javatests/dagger/internal/codegen/KeyFactoryTest.java
@@ -17,6 +17,7 @@
 package dagger.internal.codegen;
 
 import static com.google.common.truth.Truth.assertThat;
+import static com.google.common.truth.Truth.assertWithMessage;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import com.google.auto.common.MoreTypes;
@@ -252,7 +253,7 @@ static String provideQualifiedString() {
     assertThat(intType.getKind().isPrimitive()).isTrue();
     TypeMirror integerType = integerMethod.getReturnType();
     assertThat(integerType.getKind().isPrimitive()).isFalse();
-    assertThat(types.isSameType(intType, integerType)).named("type equality").isFalse();
+    assertWithMessage("type equality").that(types.isSameType(intType, integerType)).isFalse();
     Key intKey = keyFactory.forProvidesMethod(intMethod, primitiveHolder);
     Key integerKey = keyFactory.forProvidesMethod(integerMethod, boxedPrimitiveHolder);
     assertThat(intKey).isEqualTo(integerKey);
