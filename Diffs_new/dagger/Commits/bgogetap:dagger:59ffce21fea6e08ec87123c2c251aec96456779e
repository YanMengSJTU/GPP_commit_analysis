diff --git a/java/dagger/internal/codegen/ComponentHjarProcessingStep.java b/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
index ab8c9ac9e..5a2371cab 100644
--- a/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
+++ b/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
@@ -22,7 +22,7 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.squareup.javapoet.MethodSpec.constructorBuilder;
 import static dagger.internal.codegen.ComponentGenerator.componentName;
-import static dagger.internal.codegen.DaggerStreams.toImmutableSet;
+import static dagger.internal.codegen.ComponentProcessingStep.getElementsFromAnnotations;
 import static dagger.internal.codegen.TypeSpecs.addSupertype;
 import static javax.lang.model.element.Modifier.ABSTRACT;
 import static javax.lang.model.element.Modifier.FINAL;
@@ -42,9 +42,11 @@
 import com.squareup.javapoet.TypeName;
 import com.squareup.javapoet.TypeSpec;
 import dagger.BindsInstance;
+import dagger.Component;
 import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
 import dagger.internal.codegen.ComponentDescriptor.Factory;
 import dagger.internal.codegen.ComponentValidator.ComponentValidationReport;
+import dagger.producers.ProductionComponent;
 import java.lang.annotation.Annotation;
 import java.util.Optional;
 import java.util.Set;
@@ -74,8 +76,6 @@
  * entirely.
  */
 final class ComponentHjarProcessingStep implements ProcessingStep {
-
-  private final ComponentDescriptor.Kind componentKind;
   private final Elements elements;
   private final Types types;
   private final Filer filer;
@@ -84,14 +84,12 @@
   private final ComponentDescriptor.Factory componentDescriptorFactory;
 
   ComponentHjarProcessingStep(
-      ComponentDescriptor.Kind componentKind,
       Elements elements,
       Types types,
       Filer filer,
       Messager messager,
       ComponentValidator componentValidator,
       Factory componentDescriptorFactory) {
-    this.componentKind = componentKind;
     this.elements = elements;
     this.types = types;
     this.filer = filer;
@@ -101,24 +99,20 @@
   }
 
   @Override
-  public Set<? extends Class<? extends Annotation>> annotations() {
-    return ImmutableSet.<Class<? extends Annotation>>builder()
-        .add(componentKind.annotationType())
-        .addAll(
-            componentKind
-                .subcomponentKinds()
-                .stream()
-                .flatMap(kind -> Stream.of(kind.annotationType(), kind.builderAnnotationType()))
-                .collect(toImmutableSet()))
-        .build();
+  public Set<Class<? extends Annotation>> annotations() {
+    return ImmutableSet.of(Component.class, ProductionComponent.class);
   }
 
   @Override
-  public Set<Element> process(
+  public ImmutableSet<Element> process(
       SetMultimap<Class<? extends Annotation>, Element> elementsByAnnotation) {
     ImmutableSet.Builder<Element> rejectedElements = ImmutableSet.builder();
 
-    for (Element element : elementsByAnnotation.get(componentKind.annotationType())) {
+    ImmutableSet<Element> componentElements =
+        getElementsFromAnnotations(
+            elementsByAnnotation, Component.class, ProductionComponent.class);
+
+    for (Element element : componentElements) {
       TypeElement componentTypeElement = MoreElements.asType(element);
       try {
         // TODO(ronshapiro): component validation might not be necessary. We should measure it and
diff --git a/java/dagger/internal/codegen/ComponentProcessingStep.java b/java/dagger/internal/codegen/ComponentProcessingStep.java
index 46b07dce3..302ba5afb 100644
--- a/java/dagger/internal/codegen/ComponentProcessingStep.java
+++ b/java/dagger/internal/codegen/ComponentProcessingStep.java
@@ -19,14 +19,12 @@
 import com.google.auto.common.BasicAnnotationProcessor.ProcessingStep;
 import com.google.auto.common.MoreElements;
 import com.google.common.base.Predicates;
-import com.google.common.collect.FluentIterable;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Multimaps;
 import com.google.common.collect.SetMultimap;
 import dagger.Component;
 import dagger.Subcomponent;
-import dagger.internal.codegen.ComponentDescriptor.Factory;
 import dagger.internal.codegen.ComponentValidator.ComponentValidationReport;
 import dagger.producers.ProductionComponent;
 import dagger.producers.ProductionSubcomponent;
@@ -36,7 +34,6 @@
 import javax.annotation.processing.Messager;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
-import javax.tools.Diagnostic.Kind;
 
 /**
  * A {@link ProcessingStep} that is responsible for dealing with a component or production component
@@ -45,7 +42,6 @@
  * @author Gregory Kick
  */
 final class ComponentProcessingStep implements ProcessingStep {
-  private final ComponentDescriptor.Kind componentKind;
   private final Messager messager;
   private final ComponentValidator componentValidator;
   private final ComponentValidator subcomponentValidator;
@@ -57,17 +53,15 @@
   private final ComponentGenerator componentGenerator;
 
   ComponentProcessingStep(
-      ComponentDescriptor.Kind componentKind,
       Messager messager,
       ComponentValidator componentValidator,
       ComponentValidator subcomponentValidator,
       BuilderValidator builderValidator,
       ComponentHierarchyValidator componentHierarchyValidator,
       BindingGraphValidator bindingGraphValidator,
-      Factory componentDescriptorFactory,
+      ComponentDescriptor.Factory componentDescriptorFactory,
       BindingGraph.Factory bindingGraphFactory,
       ComponentGenerator componentGenerator) {
-    this.componentKind = componentKind;
     this.messager = messager;
     this.componentValidator = componentValidator;
     this.subcomponentValidator = subcomponentValidator;
@@ -93,30 +87,32 @@
   }
 
   @Override
-  public final ImmutableSet<Element> process(
+  public ImmutableSet<Element> process(
       SetMultimap<Class<? extends Annotation>, Element> elementsByAnnotation) {
     ImmutableSet.Builder<Element> rejectedElements = ImmutableSet.builder();
 
-    Map<Element, ValidationReport<TypeElement>> builderReportsByComponent =
-        processBuilders(elementsByAnnotation.get(componentKind.builderAnnotationType()));
-    Set<Element> subcomponentBuilderElements =
+    ImmutableSet<Element> componentElements =
+        getElementsFromAnnotations(
+            elementsByAnnotation, Component.class, ProductionComponent.class);
+    ImmutableSet<Element> componentBuilderElements =
+        getElementsFromAnnotations(
+            elementsByAnnotation, Component.Builder.class, ProductionComponent.Builder.class);
+
+    ImmutableSet<Element> subcomponentElements =
         getElementsFromAnnotations(
-            elementsByAnnotation,
-            FluentIterable.from(componentKind.subcomponentKinds())
-                .transform(ComponentDescriptor.Kind::builderAnnotationType)
-                .toSet());
+            elementsByAnnotation, Subcomponent.class, ProductionSubcomponent.class);
+    ImmutableSet<Element> subcomponentBuilderElements =
+        getElementsFromAnnotations(
+            elementsByAnnotation, Subcomponent.Builder.class, ProductionSubcomponent.Builder.class);
+
+    Map<Element, ValidationReport<TypeElement>> builderReportsByComponent =
+        processBuilders(componentBuilderElements);
     Map<Element, ValidationReport<TypeElement>> builderReportsBySubcomponent =
         processBuilders(subcomponentBuilderElements);
-    Set<Element> subcomponentElements =
-        getElementsFromAnnotations(
-            elementsByAnnotation,
-            FluentIterable.from(componentKind.subcomponentKinds())
-                .transform(ComponentDescriptor.Kind::annotationType)
-                .toSet());
     Map<Element, ValidationReport<TypeElement>> reportsBySubcomponent =
         processSubcomponents(subcomponentElements, subcomponentBuilderElements);
 
-    for (Element element : elementsByAnnotation.get(componentKind.annotationType())) {
+    for (Element element : componentElements) {
       TypeElement componentTypeElement = MoreElements.asType(element);
       try {
         ComponentValidationReport validationReport =
@@ -154,11 +150,12 @@ private void generateComponent(BindingGraph bindingGraph) {
     componentGenerator.generate(bindingGraph, messager);
   }
 
-  private ImmutableSet<Element> getElementsFromAnnotations(
+  static ImmutableSet<Element> getElementsFromAnnotations(
       final SetMultimap<Class<? extends Annotation>, Element> elementsByAnnotation,
-      ImmutableSet<? extends Class<? extends Annotation>> annotations) {
+      Class<? extends Annotation>... annotations) {
     return ImmutableSet.copyOf(
-        Multimaps.filterKeys(elementsByAnnotation, Predicates.in(annotations)).values());
+        Multimaps.filterKeys(elementsByAnnotation, Predicates.in(ImmutableSet.copyOf(annotations)))
+            .values());
   }
 
   private Map<Element, ValidationReport<TypeElement>> processBuilders(
diff --git a/java/dagger/internal/codegen/ComponentProcessor.java b/java/dagger/internal/codegen/ComponentProcessor.java
index 61cd5f1e3..89297f22b 100644
--- a/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/java/dagger/internal/codegen/ComponentProcessor.java
@@ -189,32 +189,21 @@ public SourceVersion getSupportedSourceVersion() {
             dependencyRequestFormatter,
             keyFactory);
 
-    class ComponentProcessingStepFactory {
-      ProcessingStep create(ComponentDescriptor.Kind componentKind) {
-        if (compilerOptions.headerCompilation()) {
-          return new ComponentHjarProcessingStep(
-              componentKind,
-              elements,
-              types,
-              filer,
-              messager,
-              componentValidator,
-              componentDescriptorFactory);
-        } else {
-          return new ComponentProcessingStep(
-              componentKind,
-              messager,
-              componentValidator,
-              subcomponentValidator,
-              builderValidator,
-              componentHierarchyValidator,
-              bindingGraphValidator,
-              componentDescriptorFactory,
-              bindingGraphFactory,
-              componentGenerator);
-        }
-      }
-    }
+    ProcessingStep componentProcessingStep =
+        compilerOptions.headerCompilation()
+            ? new ComponentHjarProcessingStep(
+                elements, types, filer, messager, componentValidator, componentDescriptorFactory)
+            : new ComponentProcessingStep(
+                messager,
+                componentValidator,
+                subcomponentValidator,
+                builderValidator,
+                componentHierarchyValidator,
+                bindingGraphValidator,
+                componentDescriptorFactory,
+                bindingGraphFactory,
+                componentGenerator);
+
     return ImmutableList.of(
         new MapKeyProcessingStep(
             messager, types, mapKeyValidator, annotationCreatorGenerator, unwrappedMapKeyGenerator),
@@ -227,7 +216,6 @@ ProcessingStep create(ComponentDescriptor.Kind componentKind) {
         new MultibindingAnnotationsProcessingStep(messager),
         new BindsInstanceProcessingStep(messager),
         moduleProcessingStep(messager, moduleValidator, provisionBindingFactory, factoryGenerator),
-        new ComponentProcessingStepFactory().create(ComponentDescriptor.Kind.COMPONENT),
         producerModuleProcessingStep(
             messager,
             moduleValidator,
@@ -235,7 +223,7 @@ ProcessingStep create(ComponentDescriptor.Kind componentKind) {
             factoryGenerator,
             productionBindingFactory,
             producerFactoryGenerator),
-        new ComponentProcessingStepFactory().create(ComponentDescriptor.Kind.PRODUCTION_COMPONENT),
+        componentProcessingStep,
         new BindingMethodProcessingStep(messager, anyBindingMethodValidator));
   }
 
