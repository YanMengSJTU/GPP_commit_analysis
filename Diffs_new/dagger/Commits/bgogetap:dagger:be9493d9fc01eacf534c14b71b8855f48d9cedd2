diff --git a/java/dagger/internal/codegen/InnerSwitchingProviders.java b/java/dagger/internal/codegen/InnerSwitchingProviders.java
index 388d315f0..c4e968da1 100644
--- a/java/dagger/internal/codegen/InnerSwitchingProviders.java
+++ b/java/dagger/internal/codegen/InnerSwitchingProviders.java
@@ -88,17 +88,17 @@ public Key key() {
     }
 
     @Override
-    public Expression getProviderExpression(ClassName switchType, int switchId) {
+    public Expression getProviderExpression(ClassName switchingProviderClass, int switchId) {
       TypeMirror instanceType = types.accessibleType(binding.contributedType(), requestingClass);
       return Expression.create(
           types.wrapType(instanceType, Provider.class),
-          CodeBlock.of("new $T<>($L)", switchType, switchId));
+          CodeBlock.of("new $T<>($L)", switchingProviderClass, switchId));
     }
 
     @Override
-    public Expression getReturnExpression() {
+    public Expression getReturnExpression(ClassName switchingProviderClass) {
       return componentBindingExpressions.getDependencyExpression(
-          bindingRequest(binding.key(), INSTANCE), requestingClass);
+          bindingRequest(binding.key(), INSTANCE), switchingProviderClass);
     }
   }
 }
diff --git a/java/dagger/internal/codegen/StaticSwitchingProviders.java b/java/dagger/internal/codegen/StaticSwitchingProviders.java
index 6a8492011..2951ed0cc 100644
--- a/java/dagger/internal/codegen/StaticSwitchingProviders.java
+++ b/java/dagger/internal/codegen/StaticSwitchingProviders.java
@@ -105,7 +105,7 @@ public Key key() {
     }
 
     @Override
-    public Expression getProviderExpression(ClassName switchType, int switchId) {
+    public Expression getProviderExpression(ClassName switchingProviderClass, int switchId) {
       TypeMirror accessibleType = types.accessibleType(binding.contributedType(), owningComponent);
       // Java 7 type inference can't figure out that instance in
       // DoubleCheck.provider(new SwitchingProvider<>()) is Provider<T> and not Provider<Object>
@@ -120,20 +120,20 @@ public Expression getProviderExpression(ClassName switchType, int switchId) {
 
       return Expression.create(
           types.wrapType(accessibleType, Provider.class),
-          CodeBlock.of("new $T<$L>($L)", switchType, typeParameter, arguments));
+          CodeBlock.of("new $T<$L>($L)", switchingProviderClass, typeParameter, arguments));
     }
 
     @Override
-    public Expression getReturnExpression() {
+    public Expression getReturnExpression(ClassName switchingProviderClass) {
       return Expression.create(
           binding.contributedType(),
           CodeBlock.of(
               "$T.provideInstance($L)",
               generatedClassNameForBinding(binding),
-              getMethodArguments()));
+              getMethodArguments(switchingProviderClass)));
     }
 
-    private CodeBlock getMethodArguments() {
+    private CodeBlock getMethodArguments(ClassName switchingProviderClass) {
       int i = 0;
       ImmutableList.Builder<CodeBlock> arguments = ImmutableList.builder();
       if (binding.requiresModuleInstance()) {
@@ -143,7 +143,7 @@ private CodeBlock getMethodArguments() {
       for (FrameworkDependency dependency : binding.frameworkDependencies()) {
         TypeMirror type =
             componentBindingExpressions
-                .getDependencyExpression(bindingRequest(dependency), owningComponent)
+                .getDependencyExpression(bindingRequest(dependency), switchingProviderClass)
                 .type();
         arguments.add(argument(type, i++));
       }
diff --git a/java/dagger/internal/codegen/SwitchingProviders.java b/java/dagger/internal/codegen/SwitchingProviders.java
index ba4dbc671..a444a6c69 100644
--- a/java/dagger/internal/codegen/SwitchingProviders.java
+++ b/java/dagger/internal/codegen/SwitchingProviders.java
@@ -61,13 +61,13 @@
     Key key();
 
     /** Returns the {@link Expression} that returns the provided instance for this case. */
-    Expression getReturnExpression();
+    Expression getReturnExpression(ClassName switchingProviderClass);
 
     /**
      * Returns the {@link Expression} that returns the {@code SwitchProvider} instance for this
      * case.
      */
-    Expression getProviderExpression(ClassName switchType, int switchId);
+    Expression getProviderExpression(ClassName switchingProviderClass, int switchId);
   }
 
   /**
@@ -147,7 +147,8 @@ Expression getProviderExpression(SwitchCase switchCase) {
     }
 
     private CodeBlock createSwitchCaseCodeBlock(SwitchCase switchCase) {
-      CodeBlock instanceCodeBlock = switchCase.getReturnExpression().box(types).codeBlock();
+      CodeBlock instanceCodeBlock =
+          switchCase.getReturnExpression(switchingProviderType).box(types).codeBlock();
 
       return CodeBlock.builder()
           // TODO(user): Is there something else more useful than the key?
diff --git a/javatests/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
index 43603c3e8..8e1a0fc6c 100644
--- a/javatests/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
@@ -385,7 +385,7 @@ public ComponentProcessorTest(CompilerMode compilerMode) {
                 "    @Override",
                 "    public T get() {",
                 "      switch (id) {",
-                "        case 0: return (T) someInjectableType();",
+                "        case 0: return (T) DaggerSimpleComponent.this.someInjectableType();",
                 "        default: throw new AssertionError(id);",
                 "      }",
                 "    }",
@@ -1286,7 +1286,8 @@ public void testDefaultPackage() {
                 "        case 0:",
                 "          return (T)",
                 "              Preconditions.checkNotNull(",
-                "                  aComponent.a(), " + NPE_FROM_COMPONENT_METHOD + ");",
+                "                  DaggerBComponent.this.aComponent.a(),",
+                "                  " + NPE_FROM_COMPONENT_METHOD + ");",
                 "        default:",
                 "          throw new AssertionError(id);",
                 "      }",
diff --git a/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java b/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
index 15260e76c..e9a2679bc 100644
--- a/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
+++ b/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
@@ -1167,7 +1167,7 @@ public void providerWhenBindsScopeGreaterThanDependencyScope() {
                     "    @Override",
                     "    public T get() {",
                     "      switch (id) {",
-                    "        case 0: return (T) getObject2();",
+                    "        case 0: return (T) DaggerTestComponent.this.getObject2();",
                     "        default: throw new AssertionError(id);",
                     "      }",
                     "    }",
diff --git a/javatests/dagger/internal/codegen/ElidedFactoriesTest.java b/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
index cae7c0506..26df21a09 100644
--- a/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
+++ b/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
@@ -250,7 +250,7 @@ public void simpleComponent_injectsProviderOf_dependsOnScoped() {
                 "    @Override",
                 "    public T get() {",
                 "      switch (id) {",
-                "        case 0: return (T) getDependsOnScoped();",
+                "        case 0: return (T) DaggerSimpleComponent.this.getDependsOnScoped();",
                 "        default: throw new AssertionError(id);",
                 "      }",
                 "    }",
diff --git a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index 05b4dc671..996987bad 100644
--- a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -185,13 +185,14 @@ public void mapBindingsWithEnumKey() {
                 "    public T get() {",
                 "      switch (id) {",
                 "        case 0:",
-                "            return (T) getMapOfPathEnumAndProviderOfHandler();",
+                "            return (T) DaggerTestComponent.this",
+                "                 .getMapOfPathEnumAndProviderOfHandler();",
                 "        case 1:",
                 "            return (T) MapModuleOne_ProvideAdminHandlerFactory",
-                "                .proxyProvideAdminHandler(mapModuleOne);",
+                "                .proxyProvideAdminHandler(DaggerTestComponent.this.mapModuleOne);",
                 "        case 2:",
                 "            return (T) MapModuleTwo_ProvideLoginHandlerFactory",
-                "                .proxyProvideLoginHandler(mapModuleTwo);",
+                "                .proxyProvideLoginHandler(DaggerTestComponent.this.mapModuleTwo);",
                 "        default: throw new AssertionError(id);",
                 "      }",
                 "    }",
@@ -590,13 +591,14 @@ public void mapBindingsWithStringKey() {
                 "    public T get() {",
                 "      switch (id) {",
                 "        case 0:",
-                "            return (T) getMapOfStringAndProviderOfHandler();",
+                "            return (T) DaggerTestComponent.this",
+                "                 .getMapOfStringAndProviderOfHandler();",
                 "        case 1:",
                 "            return (T) MapModuleOne_ProvideAdminHandlerFactory",
-                "                .proxyProvideAdminHandler(mapModuleOne);",
+                "                .proxyProvideAdminHandler(DaggerTestComponent.this.mapModuleOne);",
                 "        case 2:",
                 "            return (T) MapModuleTwo_ProvideLoginHandlerFactory",
-                "                .proxyProvideLoginHandler(mapModuleTwo);",
+                "                .proxyProvideLoginHandler(DaggerTestComponent.this.mapModuleTwo);",
                 "        default: throw new AssertionError(id);",
                 "      }",
                 "    }",
@@ -798,13 +800,14 @@ public void mapBindingsWithWrappedKey() {
                 "    public T get() {",
                 "      switch (id) {",
                 "        case 0:",
-                "            return (T) getMapOfWrappedClassKeyAndProviderOfHandler();",
+                "            return (T) DaggerTestComponent.this",
+                "                 .getMapOfWrappedClassKeyAndProviderOfHandler();",
                 "        case 1:",
                 "            return (T) MapModuleOne_ProvideAdminHandlerFactory",
-                "                .proxyProvideAdminHandler(mapModuleOne);",
+                "                .proxyProvideAdminHandler(DaggerTestComponent.this.mapModuleOne);",
                 "        case 2:",
                 "            return (T) MapModuleTwo_ProvideLoginHandlerFactory",
-                "                .proxyProvideLoginHandler(mapModuleTwo);",
+                "                .proxyProvideLoginHandler(DaggerTestComponent.this.mapModuleTwo);",
                 "        default: throw new AssertionError(id);",
                 "      }",
                 "    }",
@@ -981,7 +984,7 @@ public void mapBindingsWithNonProviderValue() {
                 "    @Override",
                 "    public T get() {",
                 "      switch (id) {",
-                "        case 0: return (T) getMapOfPathEnumAndHandler();",
+                "        case 0: return (T) DaggerTestComponent.this.getMapOfPathEnumAndHandler();",
                 "        default: throw new AssertionError(id);",
                 "      }",
                 "    }",
diff --git a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
index 13d821039..2173deec4 100644
--- a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -405,9 +405,12 @@ public void simpleComponent() {
                 "    @Override",
                 "    public T get() {",
                 "      switch (id) {",
-                "        case 0: return (T) getProductionImplementationExecutor();",
-                "        case 1: return (T) getProductionComponentMonitor();",
-                "        case 2: return (T) getB();",
+                "        case 0: return (T) DaggerTestClass_SimpleComponent.this",
+                "            .getProductionImplementationExecutor();",
+                "        case 1: return (T)",
+                "            DaggerTestClass_SimpleComponent.this.getProductionComponentMonitor();",
+                "        case 2: return (T)",
+                "            DaggerTestClass_SimpleComponent.this.getB();",
                 "        default: throw new AssertionError(id);",
                 "      }",
                 "    }",
diff --git a/javatests/dagger/internal/codegen/SwitchingProviderTest.java b/javatests/dagger/internal/codegen/SwitchingProviderTest.java
index 721d322a1..dd213798a 100644
--- a/javatests/dagger/internal/codegen/SwitchingProviderTest.java
+++ b/javatests/dagger/internal/codegen/SwitchingProviderTest.java
@@ -373,7 +373,7 @@ public void scopedBinds() {
                 "    public T get() {",
                 "      switch (id) {",
                 "        case 0:",
-                "          return (T) getCharSequence();",
+                "          return (T) DaggerTestComponent.this.getCharSequence();",
                 "        default:",
                 "          throw new AssertionError(id);",
                 "      }",
