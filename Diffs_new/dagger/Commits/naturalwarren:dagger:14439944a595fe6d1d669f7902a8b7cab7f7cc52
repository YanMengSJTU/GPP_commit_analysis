diff --git a/compiler/src/it/functional-tests/src/main/java/test/builder/PrivateConstructors.java b/compiler/src/it/functional-tests/src/main/java/test/builder/PrivateConstructors.java
new file mode 100644
index 000000000..ccba16b74
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/builder/PrivateConstructors.java
@@ -0,0 +1,44 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package test.builder;
+
+import dagger.Component;
+import dagger.Module;
+import dagger.Provides;
+
+final class PrivateConstructors {
+  @Module
+  static final class M {
+    @Provides
+    static String provideString() {
+      return "str";
+    }
+
+    private M() {}
+  }
+
+  @Component(modules = M.class)
+  interface C {
+    String string();
+
+    @Component.Builder
+    interface Builder {
+      // M should not be required, even though the constructor is inaccessible
+      C build();
+    }
+  }
+}
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
index 26c5d8755..d68d86975 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
@@ -91,6 +91,7 @@
 import dagger.MapKey;
 import dagger.internal.codegen.ComponentDescriptor.BuilderRequirementMethod;
 import dagger.internal.codegen.ComponentDescriptor.BuilderSpec;
+import dagger.internal.codegen.ComponentRequirement.NullPolicy;
 import dagger.internal.codegen.ContributionType.HasContributionType;
 import dagger.releasablereferences.CanReleaseReferences;
 import dagger.releasablereferences.ForReleasableReferences;
@@ -354,7 +355,8 @@ private void validateBuilders(BindingGraph graph) {
       Set<ComponentRequirement> availableDependencies = graph.availableDependencies();
       Set<ComponentRequirement> requiredDependencies =
           Sets.filter(
-              availableDependencies, input -> !componentCanMakeNewInstances(input.typeElement()));
+              availableDependencies,
+              input -> input.nullPolicy(elements, types).equals(NullPolicy.THROW));
       final BuilderSpec spec = componentDesc.builderSpec().get();
       ImmutableSet<BuilderRequirementMethod> declaredSetters =
           spec.requirementMethods()
