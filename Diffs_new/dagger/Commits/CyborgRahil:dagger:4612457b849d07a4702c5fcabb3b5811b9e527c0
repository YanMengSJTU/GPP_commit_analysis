diff --git a/java/dagger/internal/GenerationOptions.java b/java/dagger/internal/GenerationOptions.java
new file mode 100644
index 000000000..996cd1d89
--- /dev/null
+++ b/java/dagger/internal/GenerationOptions.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2018 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.internal;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Target;
+
+/**
+ * Metadata annotation for base subcomponent implementations in ahead-of-time compilations. This
+ * propagates any compiler options related to code generation so that later compilations can
+ * recreate the model of the generated code of superclass implementations.
+ */
+@Target(ElementType.TYPE)
+public @interface GenerationOptions {
+  boolean fastInit();
+}
diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index a06c0b1ac..34184725a 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -263,6 +263,7 @@ java_library(
         "FrameworkFieldInitializer.java",
         "FrameworkInstanceBindingExpression.java",
         "FrameworkInstanceSupplier.java",
+        "GenerationCompilerOptions.java",
         "GwtCompatibility.java",
         "HjarSourceFileGenerator.java",
         "ImmediateFutureBindingExpression.java",
@@ -345,6 +346,7 @@ java_library(
         "ComponentProcessingStep.java",
         "ComponentProcessor.java",
         "CurrentImplementationSubcomponent.java",
+        "GenerationOptionsModule.java",
         "InjectBindingRegistryImpl.java",
         "InjectBindingRegistryModule.java",
         "InjectProcessingStep.java",
diff --git a/java/dagger/internal/codegen/CompilerOptions.java b/java/dagger/internal/codegen/CompilerOptions.java
index 717b3b167..de3127dd6 100644
--- a/java/dagger/internal/codegen/CompilerOptions.java
+++ b/java/dagger/internal/codegen/CompilerOptions.java
@@ -33,6 +33,8 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import com.google.errorprone.annotations.CheckReturnValue;
+import com.squareup.javapoet.AnnotationSpec;
+import dagger.internal.GenerationOptions;
 import dagger.producers.Produces;
 import java.util.Arrays;
 import java.util.Map;
@@ -111,6 +113,26 @@ static CompilerOptions create(ProcessingEnvironment processingEnv) {
     return builder.build();
   }
 
+  abstract Builder toBuilder();
+
+  /**
+   * Creates a new {@link CompilerOptions} from the serialized {@link GenerationOptions} of a base
+   * component implementation.
+   */
+  CompilerOptions withGenerationOptions(GenerationOptions generationOptions) {
+    return toBuilder().fastInit(generationOptions.fastInit()).build();
+  }
+
+  /**
+   * Returns an {@link GenerationOptions} annotation that serializes any options for this
+   * compilation that should be reused in future compilations.
+   */
+  AnnotationSpec toGenerationOptionsAnnotation() {
+    return AnnotationSpec.builder(GenerationOptions.class)
+        .addMember("fastInit", "$L", fastInit())
+        .build();
+  }
+
   @AutoValue.Builder
   @CanIgnoreReturnValue
   interface Builder {
diff --git a/java/dagger/internal/codegen/ComponentBindingExpressions.java b/java/dagger/internal/codegen/ComponentBindingExpressions.java
index 00c2e3ea3..4c4cc7b69 100644
--- a/java/dagger/internal/codegen/ComponentBindingExpressions.java
+++ b/java/dagger/internal/codegen/ComponentBindingExpressions.java
@@ -79,7 +79,7 @@
       OptionalFactories optionalFactories,
       DaggerTypes types,
       DaggerElements elements,
-      CompilerOptions compilerOptions) {
+      @GenerationCompilerOptions CompilerOptions compilerOptions) {
     this.parent = parent;
     this.graph = graph;
     this.componentImplementation = componentImplementation;
diff --git a/java/dagger/internal/codegen/ComponentImplementation.java b/java/dagger/internal/codegen/ComponentImplementation.java
index 05307919b..199400ff0 100644
--- a/java/dagger/internal/codegen/ComponentImplementation.java
+++ b/java/dagger/internal/codegen/ComponentImplementation.java
@@ -36,6 +36,7 @@
 import com.google.common.collect.MultimapBuilder;
 import com.google.common.collect.SetMultimap;
 import com.google.common.collect.Sets;
+import com.squareup.javapoet.AnnotationSpec;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.FieldSpec;
@@ -430,6 +431,11 @@ void addMethods(MethodSpecKind methodKind, Iterable<MethodSpec> methodSpecs) {
     methodSpecsMap.putAll(methodKind, methodSpecs);
   }
 
+  /** Adds the given annotation to the component. */
+  void addAnnotation(AnnotationSpec annotation) {
+    component.addAnnotation(annotation);
+  }
+
   /**
    * Adds the given method to the component. In this case, the method represents an encapsulation of
    * a modifiable binding between implementations of a subcomponent. This is only relevant for
diff --git a/java/dagger/internal/codegen/ComponentImplementationBuilder.java b/java/dagger/internal/codegen/ComponentImplementationBuilder.java
index 1532c2c8a..8b4022ae6 100644
--- a/java/dagger/internal/codegen/ComponentImplementationBuilder.java
+++ b/java/dagger/internal/codegen/ComponentImplementationBuilder.java
@@ -142,6 +142,11 @@ final ComponentImplementation build() {
       addCancellationListenerImplementation();
     }
 
+    if (componentImplementation.isAbstract()
+        && !componentImplementation.baseImplementation().isPresent()) {
+      componentImplementation.addAnnotation(compilerOptions.toGenerationOptionsAnnotation());
+    }
+
     done = true;
     return componentImplementation;
   }
diff --git a/java/dagger/internal/codegen/CurrentImplementationSubcomponent.java b/java/dagger/internal/codegen/CurrentImplementationSubcomponent.java
index 361e5a123..c78d60d87 100644
--- a/java/dagger/internal/codegen/CurrentImplementationSubcomponent.java
+++ b/java/dagger/internal/codegen/CurrentImplementationSubcomponent.java
@@ -27,7 +27,7 @@
  * ComponentImplementation} instance. Each child {@link ComponentImplementation} will have its own
  * instance of {@link CurrentImplementationSubcomponent}.
  */
-@Subcomponent
+@Subcomponent(modules = GenerationOptionsModule.class)
 @PerComponentImplementation
 interface CurrentImplementationSubcomponent {
   RootComponentImplementationBuilder rootComponentBuilder();
diff --git a/java/dagger/internal/codegen/GenerationCompilerOptions.java b/java/dagger/internal/codegen/GenerationCompilerOptions.java
new file mode 100644
index 000000000..1b14a7eb7
--- /dev/null
+++ b/java/dagger/internal/codegen/GenerationCompilerOptions.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2018 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.internal.codegen;
+
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+import java.lang.annotation.Retention;
+import javax.inject.Qualifier;
+
+/**
+ * A {@link Qualifier} for bindings associated with the serialization/deserialization of {@link
+ * dagger.internal.GenerationOptions}.
+ */
+@Retention(RUNTIME)
+@Qualifier
+@interface GenerationCompilerOptions {}
diff --git a/java/dagger/internal/codegen/GenerationOptionsModule.java b/java/dagger/internal/codegen/GenerationOptionsModule.java
new file mode 100644
index 000000000..144fc9213
--- /dev/null
+++ b/java/dagger/internal/codegen/GenerationOptionsModule.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (C) 2018 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.internal.codegen;
+
+import dagger.Module;
+import dagger.Provides;
+import dagger.internal.GenerationOptions;
+
+/** Adds bindings for serializing and rereading {@link GenerationOptions}. */
+@Module
+interface GenerationOptionsModule {
+  @Provides
+  @PerComponentImplementation
+  @GenerationCompilerOptions
+  static CompilerOptions generationOptions(
+      CompilerOptions defaultOptions,
+      ComponentImplementation componentImplementation,
+      DaggerElements elements) {
+    return componentImplementation
+        .baseImplementation()
+        .map(baseImplementation -> elements.getTypeElement(baseImplementation.name()))
+        .map(typeElement -> typeElement.getAnnotation(GenerationOptions.class))
+        .map(defaultOptions::withGenerationOptions)
+        .orElse(defaultOptions);
+  }
+}
diff --git a/java/dagger/internal/codegen/HjarSourceFileGenerator.java b/java/dagger/internal/codegen/HjarSourceFileGenerator.java
index 9e3a14c60..5c363225a 100644
--- a/java/dagger/internal/codegen/HjarSourceFileGenerator.java
+++ b/java/dagger/internal/codegen/HjarSourceFileGenerator.java
@@ -66,14 +66,14 @@ Element originatingElement(T input) {
     TypeSpec.Builder skeleton =
         classBuilder(completeType.name)
             .addSuperinterfaces(completeType.superinterfaces)
-            .addTypeVariables(completeType.typeVariables);
+            .addTypeVariables(completeType.typeVariables)
+            .addModifiers(completeType.modifiers.toArray(new Modifier[0]))
+            .addAnnotations(completeType.annotations);
 
     if (!completeType.superclass.equals(ClassName.OBJECT)) {
       skeleton.superclass(completeType.superclass);
     }
 
-    completeType.modifiers.forEach(skeleton::addModifiers);
-
     completeType.methodSpecs.stream()
         .filter(method -> !method.modifiers.contains(PRIVATE) || method.isConstructor())
         .map(this::skeletonMethod)
@@ -110,6 +110,7 @@ private MethodSpec skeletonMethod(MethodSpec completeMethod) {
         .addParameters(completeMethod.parameters)
         .addExceptions(completeMethod.exceptions)
         .varargs(completeMethod.varargs)
+        .addAnnotations(completeMethod.annotations)
         .build();
   }
 
@@ -118,6 +119,7 @@ private FieldSpec skeletonField(FieldSpec completeField) {
             completeField.type,
             completeField.name,
             completeField.modifiers.toArray(new Modifier[0]))
+        .addAnnotations(completeField.annotations)
         .build();
   }
 }
diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsMultibindingsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsMultibindingsTest.java
index 079b5a0d8..d77112d8c 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsMultibindingsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsMultibindingsTest.java
@@ -23,6 +23,7 @@
 import static dagger.internal.codegen.Compilers.compilerWithOptions;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.GENERATION_OPTIONS_ANNOTATION;
 import static dagger.internal.codegen.GeneratedLines.IMPORT_GENERATED_ANNOTATION;
 
 import com.google.common.collect.ImmutableList;
@@ -73,10 +74,11 @@ public void setMultibindings_contributionsInLeaf() {
             "package test;",
             "",
             "import com.google.common.collect.ImmutableSet;",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Set;",
-            "",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -115,8 +117,10 @@ public void setMultibindings_contributionsInAncestorOnly() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -163,10 +167,11 @@ public void setMultibindings_contributionsInAncestorOnly() {
             "package test;",
             "",
             "import com.google.common.collect.ImmutableSet;",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Set;",
-            "",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -232,9 +237,11 @@ public void setMultibindings_contributionsInLeafAndAncestor() {
             "package test;",
             "",
             "import com.google.common.collect.ImmutableSet;",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Set;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -288,9 +295,11 @@ public void setMultibindings_contributionsInLeafAndAncestor() {
             "package test;",
             "",
             "import com.google.common.collect.ImmutableSet;",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Set;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -358,9 +367,11 @@ public void setMultibindings_contributionsInLeafAndGrandAncestor() {
             "package test;",
             "",
             "import com.google.common.collect.ImmutableSet;",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Set;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -395,8 +406,10 @@ public void setMultibindings_contributionsInLeafAndGrandAncestor() {
             "test.DaggerAncestor",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -448,9 +461,11 @@ public void setMultibindings_contributionsInLeafAndGrandAncestor() {
             "package test;",
             "",
             "import com.google.common.collect.ImmutableSet;",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Set;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerGrandAncestor implements GrandAncestor {",
             "  protected DaggerGrandAncestor() {}",
@@ -520,9 +535,11 @@ public void setMultibindings_nonComponentMethodDependency() {
             "package test;",
             "",
             "import com.google.common.collect.ImmutableSet;",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Set;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -578,10 +595,11 @@ public void setMultibindings_nonComponentMethodDependency() {
             "package test;",
             "",
             "import com.google.common.collect.ImmutableSet;",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Set;",
-            "",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -626,8 +644,10 @@ public void setMultibindings_newSubclass() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -679,9 +699,11 @@ public void setMultibindings_newSubclass() {
             "package test;",
             "",
             "import com.google.common.collect.ImmutableSet;",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Set;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -754,9 +776,11 @@ public void setMultibinding_requestedAsInstanceInLeaf_requestedAsFrameworkInstan
             "package test;",
             "",
             "import com.google.common.collect.ImmutableSet;",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Set;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -809,11 +833,13 @@ public void setMultibinding_requestedAsInstanceInLeaf_requestedAsFrameworkInstan
             "test.DaggerAncestor",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             "import dagger.internal.SetFactory;",
             "import java.util.Set;",
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -898,11 +924,13 @@ public void setMultibindings_contributionsInLeafAndAncestor_frameworkInstances()
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             "import dagger.internal.SetFactory;",
             "import java.util.Set;",
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  private Provider<Set<InEachSubcomponent>> setOfInEachSubcomponentProvider;",
@@ -969,11 +997,13 @@ public void setMultibindings_contributionsInLeafAndAncestor_frameworkInstances()
             "package test;",
             "",
             "import dagger.internal.DelegateFactory;",
+            "import dagger.internal.GenerationOptions;",
             "import dagger.internal.SetFactory;",
             "import java.util.Set;",
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -1055,9 +1085,11 @@ public void mapMultibindings_contributionsInLeaf() {
             "package test;",
             "",
             "import com.google.common.collect.ImmutableMap;",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Map;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -1097,8 +1129,10 @@ public void mapMultibindings_contributionsInAncestorOnly() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -1145,10 +1179,11 @@ public void mapMultibindings_contributionsInAncestorOnly() {
             "package test;",
             "",
             "import com.google.common.collect.ImmutableMap;",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Map;",
-            "",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -1211,9 +1246,11 @@ public void mapMultibindings_contributionsInLeafAndAncestor() {
             "package test;",
             "",
             "import com.google.common.collect.ImmutableMap;",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Map;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -1266,9 +1303,11 @@ public void mapMultibindings_contributionsInLeafAndAncestor() {
             "package test;",
             "",
             "import com.google.common.collect.ImmutableMap;",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Map;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -1334,11 +1373,13 @@ public void mapMultibindings_contributionsInLeafAndAncestor_frameworkInstance()
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             "import dagger.internal.MapFactory;",
             "import java.util.Map;",
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  private Provider<Map<String, InEachSubcomponent>> ",
@@ -1406,11 +1447,13 @@ public void mapMultibindings_contributionsInLeafAndAncestor_frameworkInstance()
             "package test;",
             "",
             "import dagger.internal.DelegateFactory;",
+            "import dagger.internal.GenerationOptions;",
             "import dagger.internal.MapFactory;",
             "import java.util.Map;",
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -1494,9 +1537,11 @@ public void mapMultibindings_contributionsInLeafAndGrandAncestor() {
             "package test;",
             "",
             "import com.google.common.collect.ImmutableMap;",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Map;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -1529,8 +1574,10 @@ public void mapMultibindings_contributionsInLeafAndGrandAncestor() {
             "test.DaggerAncestor",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -1581,9 +1628,11 @@ public void mapMultibindings_contributionsInLeafAndGrandAncestor() {
             "package test;",
             "",
             "import com.google.common.collect.ImmutableMap;",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Map;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerGrandAncestor implements GrandAncestor {",
             "  protected DaggerGrandAncestor() {}",
@@ -1655,10 +1704,12 @@ public void mapMultibindings_contributionsInLeafAndAncestorWithoutGuava() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Collections;",
             "import java.util.Map",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -1710,10 +1761,12 @@ public void mapMultibindings_contributionsInLeafAndAncestorWithoutGuava() {
             "test.DaggerAncestor",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             "import dagger.internal.MapBuilder;",
             "import java.util.Map;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -1782,9 +1835,11 @@ public void mapMultibinding_requestedAsInstanceInLeaf_requestedAsFrameworkInstan
             "package test;",
             "",
             "import com.google.common.collect.ImmutableMap;",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Map;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -1837,11 +1892,13 @@ public void mapMultibinding_requestedAsInstanceInLeaf_requestedAsFrameworkInstan
             "test.DaggerAncestor",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             "import dagger.internal.MapFactory;",
             "import java.util.Map;",
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -1917,9 +1974,11 @@ public void emptyMultibinds_set() {
             "package test;",
             "",
             "import com.google.common.collect.ImmutableSet;",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Set;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -1968,9 +2027,11 @@ public void emptyMultibinds_set() {
             "package test;",
             "",
             "import com.google.common.collect.ImmutableSet;",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Set;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -2027,11 +2088,13 @@ public void emptyMultibinds_set_frameworkInstance() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             "import dagger.internal.SetFactory;",
             "import java.util.Set;",
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -2080,11 +2143,13 @@ public void emptyMultibinds_set_frameworkInstance() {
             "package test;",
             "",
             "import dagger.internal.DelegateFactory;",
+            "import dagger.internal.GenerationOptions;",
             "import dagger.internal.SetFactory;",
             "import java.util.Set;",
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -2156,9 +2221,11 @@ public void emptyMultibinds_map() {
             "package test;",
             "",
             "import com.google.common.collect.ImmutableMap;",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Map;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -2209,9 +2276,11 @@ public void emptyMultibinds_map() {
             "package test;",
             "",
             "import com.google.common.collect.ImmutableMap;",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Map;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -2268,11 +2337,13 @@ public void emptyMultibinds_map_frameworkInstance() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             "import dagger.internal.MapFactory;",
             "import java.util.Map;",
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -2323,11 +2394,13 @@ public void emptyMultibinds_map_frameworkInstance() {
             "package test;",
             "",
             "import dagger.internal.DelegateFactory;",
+            "import dagger.internal.GenerationOptions;",
             "import dagger.internal.MapFactory;",
             "import java.util.Map;",
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -2400,9 +2473,11 @@ public void bindsMissingDep_Multibindings() {
             "package test;",
             "",
             "import com.google.common.collect.ImmutableSet;",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Set;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -2501,6 +2576,7 @@ public void multibindingsAndFastInit() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "@GenerationOptions(fastInit = true)",
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
index 14ecc2bb1..f5147826c 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
@@ -20,6 +20,7 @@
 import static dagger.internal.codegen.CompilerMode.AHEAD_OF_TIME_SUBCOMPONENTS_MODE;
 import static dagger.internal.codegen.Compilers.compilerWithOptions;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
+import static dagger.internal.codegen.GeneratedLines.GENERATION_OPTIONS_ANNOTATION;
 import static dagger.internal.codegen.GeneratedLines.IMPORT_GENERATED_ANNOTATION;
 
 import com.google.common.collect.ImmutableList;
@@ -58,8 +59,10 @@ public void missingBindings_fromComponentMethod() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -98,8 +101,10 @@ public void missingBindings_fromComponentMethod() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -150,8 +155,10 @@ public void missingBindings_dependsOnBindingWithMatchingComponentMethod() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -197,8 +204,10 @@ public void missingBindings_dependsOnMissingBinding() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -244,8 +253,10 @@ public void missingBindings_dependsOnMissingBinding() {
             "test.DaggerAncestor",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -329,8 +340,10 @@ public void missingBindings_satisfiedInGreatAncestor() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerGreatAncestor implements GreatAncestor {",
             "  protected DaggerGreatAncestor() {}",
@@ -384,8 +397,11 @@ public void moduleInstanceDependency() {
         JavaFileObjects.forSourceLines(
             "test.DaggerLeaf",
             "package test;",
+            "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -418,8 +434,11 @@ public void moduleInstanceDependency() {
         JavaFileObjects.forSourceLines(
             "test.DaggerAncestor",
             "package test;",
+            "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -449,6 +468,7 @@ public void moduleInstanceDependency() {
         JavaFileObjects.forSourceLines(
             "test.DaggerAncestor",
             "package test;",
+            "",
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
@@ -540,8 +560,11 @@ public void moduleInstanceDependency_withModuleParams() {
         JavaFileObjects.forSourceLines(
             "test.DaggerLeaf",
             "package test;",
+            "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -574,8 +597,11 @@ public void moduleInstanceDependency_withModuleParams() {
         JavaFileObjects.forSourceLines(
             "test.DaggerAncestor",
             "package test;",
+            "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -686,8 +712,10 @@ public void generatedInstanceBinding() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -715,8 +743,11 @@ public void generatedInstanceBinding() {
         JavaFileObjects.forSourceLines(
             "test.DaggerAncestor",
             "package test;",
+            "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -746,6 +777,7 @@ public void generatedInstanceBinding() {
         JavaFileObjects.forSourceLines(
             "test.DaggerRoot",
             "package test;",
+            "",
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
@@ -849,8 +881,10 @@ public void prunedGeneratedInstanceBinding() {
             "test.DaggerMaybeLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerMaybeLeaf implements MaybeLeaf {",
             "  protected DaggerMaybeLeaf() {}",
@@ -902,6 +936,7 @@ public void prunedGeneratedInstanceBinding() {
         JavaFileObjects.forSourceLines(
             "test.DaggerRoot",
             "package test;",
+            "",
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
@@ -996,9 +1031,11 @@ public void optionalBindings_boundAndSatisfiedInSameSubcomponent() {
             "test.DaggerSub",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Optional;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerSub implements Sub {",
             "  protected DaggerSub() {}",
@@ -1049,9 +1086,11 @@ public void optionalBindings_satisfiedInAncestor() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Optional;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -1097,9 +1136,11 @@ public void optionalBindings_satisfiedInAncestor() {
             "test.DaggerAncestor",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Optional;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -1155,9 +1196,11 @@ public void optionalBindings_satisfiedInGrandAncestor() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Optional;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -1189,8 +1232,10 @@ public void optionalBindings_satisfiedInGrandAncestor() {
             "test.DaggerAncestor",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -1235,9 +1280,11 @@ public void optionalBindings_satisfiedInGrandAncestor() {
             "test.DaggerGreatAncestor",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Optional;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerGreatAncestor implements GreatAncestor {",
             "  protected DaggerGreatAncestor() {}",
@@ -1305,9 +1352,11 @@ public void optionalBindings_nonComponentMethodDependencySatisfiedInAncestor() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Optional;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -1360,9 +1409,11 @@ public void optionalBindings_nonComponentMethodDependencySatisfiedInAncestor() {
             "test.DaggerAncestor",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Optional;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -1405,8 +1456,10 @@ public void optionalBindings_boundInAncestorAndSatisfiedInGrandAncestor() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -1445,9 +1498,11 @@ public void optionalBindings_boundInAncestorAndSatisfiedInGrandAncestor() {
             "test.DaggerAncestor",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Optional;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -1497,9 +1552,11 @@ public void optionalBindings_boundInAncestorAndSatisfiedInGrandAncestor() {
             "test.DaggerGrandAncestor",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Optional;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerGrandAncestor implements GrandAncestor {",
             "  protected DaggerGrandAncestor() {}",
@@ -1556,8 +1613,10 @@ public void provisionOverInjection_providedInAncestor() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -1605,8 +1664,10 @@ public void provisionOverInjection_providedInAncestor() {
             "test.DaggerAncestor",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -1657,8 +1718,10 @@ public void provisionOverInjection_providedInGrandAncestor() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -1692,8 +1755,10 @@ public void provisionOverInjection_providedInGrandAncestor() {
             "test.DaggerAncestor",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -1738,8 +1803,10 @@ public void provisionOverInjection_providedInGrandAncestor() {
             "test.DaggerGrandAncestor",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerGrandAncestor implements GrandAncestor {",
             "  protected DaggerGrandAncestor() {}",
@@ -1804,8 +1871,10 @@ public void provisionOverInjection_indirectDependency() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -1857,8 +1926,10 @@ public void provisionOverInjection_indirectDependency() {
             "test.DaggerAncestor",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -1913,8 +1984,10 @@ public void provisionOverInjection_prunedIndirectDependency() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -2063,8 +2136,10 @@ public void provisionOverInjection_prunedDirectDependency_prunedInConcreteImplem
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -2210,8 +2285,10 @@ public void provisionOverInjection_prunedDirectDependency_prunedInAbstractImplem
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -2261,8 +2338,10 @@ public void provisionOverInjection_prunedDirectDependency_prunedInAbstractImplem
             "test.DaggerAncestor",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -2393,6 +2472,7 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             "package test;",
             "",
             "import com.google.common.util.concurrent.ListenableFuture;",
+            "import dagger.internal.GenerationOptions;",
             "import dagger.producers.Producer;",
             "import dagger.producers.internal.CancellationListener;",
             "import dagger.producers.internal.Producers;",
@@ -2403,6 +2483,7 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf, CancellationListener {",
             "  private Producer<Set<Response>> responsesEntryPoint;",
@@ -2537,6 +2618,7 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
         JavaFileObjects.forSourceLines(
             "test.DaggerRoot",
             "package test;",
+            "",
             "import dagger.internal.DoubleCheck;",
             "import dagger.internal.InstanceFactory;",
             "import dagger.internal.SetFactory;",
@@ -2686,10 +2768,12 @@ public void lazyOfModifiableBinding() {
             "",
             "import dagger.Lazy;",
             "import dagger.internal.DoubleCheck;",
+            "import dagger.internal.GenerationOptions;",
             "import dagger.internal.ProviderOfLazy;",
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -2740,9 +2824,11 @@ public void lazyOfModifiableBinding() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -2812,9 +2898,11 @@ public void missingBindingAccessInLeafAndAncestor() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  private Provider<DependsOnMissing> testProvider;",
@@ -2899,11 +2987,13 @@ public void missingBindingAccessInLeafAndAncestor() {
             "",
             "import com.google.common.collect.ImmutableSet;",
             "import dagger.internal.DelegateFactory;",
+            "import dagger.internal.GenerationOptions;",
             "import dagger.internal.SetFactory;",
             "import java.util.Set;",
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -3039,9 +3129,11 @@ public void subcomponentBuilders() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             "import dagger.internal.Preconditions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  private Integer bindsInstance;",
@@ -3136,9 +3228,11 @@ public void subcomponentBuilders() {
             "package test;",
             "",
             "import com.google.common.collect.ImmutableSet;",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Set;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -3317,8 +3411,10 @@ public void subcomponentBuilders_moduleWithUnusedInstanceBindings() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  private ModuleWithUsedBinding moduleWithUsedBinding;",
@@ -3465,9 +3561,11 @@ public void subcomponentBuilders_repeatedModule() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             "import dagger.internal.Preconditions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  private RepeatedModule repeatedModule;",
@@ -3625,8 +3723,10 @@ public void bindsWithMissingDependency() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -3750,8 +3850,10 @@ public void bindsWithMissingDependency_pruned() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -3889,6 +3991,7 @@ public void modifiedProducerFromProvider() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             "import dagger.producers.Producer;",
             "import dagger.producers.internal.CancellationListener;",
             "import dagger.producers.internal.Producers;",
@@ -3898,6 +4001,7 @@ public void modifiedProducerFromProvider() {
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf, CancellationListener {",
             "  private Producer<DependsOnModifiedProducerFromProvider>",
@@ -4157,9 +4261,11 @@ public void modifiableBindingMethods_namesDedupedAcrossImplementations() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             "import foo.Thing;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -4214,9 +4320,11 @@ public void modifiableBindingMethods_namesDedupedAcrossImplementations() {
             "",
             "import bar.Thing;",
             "import com.google.common.collect.ImmutableSet;",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Set;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -4307,8 +4415,10 @@ public void subcomponentInducedFromAncestor() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerMaybeLeaf implements MaybeLeaf {",
             "  protected DaggerMaybeLeaf() {}",
@@ -4355,9 +4465,11 @@ public void subcomponentInducedFromAncestor() {
             "package test;",
             "",
             "import com.google.common.collect.ImmutableSet;",
+            "import dagger.internal.GenerationOptions;",
             "import java.util.Set;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
@@ -4436,8 +4548,10 @@ public void rootScopedAtInjectConstructor_effectivelyMissingInSubcomponent() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -4528,8 +4642,10 @@ public void prunedModuleWithInstanceState() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
@@ -4647,9 +4763,11 @@ public void modifiableCycles() {
             "package test;",
             "",
             "import dagger.internal.DelegateFactory;",
+            "import dagger.internal.GenerationOptions;",
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  private Provider<A> aProvider;",
@@ -4764,6 +4882,7 @@ public void componentBuilderFields_consistencyAcrossImplementations() {
             "",
             "import a.Mod;",
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerHasUnusedModuleLeaf implements HasUnusedModuleLeaf {",
             "  public abstract static class Builder implements HasUnusedModuleLeaf.Builder {",
@@ -4822,7 +4941,6 @@ public void componentBuilderFields_consistencyAcrossImplementations() {
     assertThat(compilation)
         .generatedSourceFile("test.DaggerRoot")
         .containsElementsIn(generatedRoot);
-
   }
 
   @Test
@@ -4871,6 +4989,7 @@ public void dependencyExpressionCasting() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  @Override",
@@ -4912,6 +5031,7 @@ public void multipleComponentMethodsForSameBindingRequest() {
             "test.DaggerLeaf",
             "package test;",
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  @Override",
@@ -5007,6 +5127,7 @@ public void boundInstanceUsedOnlyInInitialize() {
             IMPORT_GENERATED_ANNOTATION,
             "import javax.inject.Provider;",
             "",
+            GENERATION_OPTIONS_ANNOTATION,
             GENERATED_ANNOTATION,
             "public abstract class DaggerSub implements Sub {",
             "  private Provider<String> stringProvider;",
diff --git a/javatests/dagger/internal/codegen/GeneratedLines.java b/javatests/dagger/internal/codegen/GeneratedLines.java
index 2d79e4a47..ce8fdabab 100644
--- a/javatests/dagger/internal/codegen/GeneratedLines.java
+++ b/javatests/dagger/internal/codegen/GeneratedLines.java
@@ -34,6 +34,8 @@
           ? "import javax.annotation.Generated;"
           : "import javax.annotation.processing.Generated;";
 
+  static final String GENERATION_OPTIONS_ANNOTATION = "@GenerationOptions(fastInit = false)";
+
   private static boolean isBeforeJava9() {
     try {
       Class.forName("java.lang.Module");
