diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index 84fd17dac..93bad3b07 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -276,7 +276,9 @@ java_library(
         "ProducerCreationExpression.java",
         "ProducerFactoryGenerator.java",
         "ProducerFromProviderCreationExpression.java",
+        "ProducerInstanceBindingExpression.java",
         "ProductionExecutorModuleGenerator.java",
+        "ProviderInstanceBindingExpression.java",
         "ReferenceReleasingManagerFields.java",
         "ReleasableReferenceManagerProviderCreationExpression.java",
         "ReleasableReferenceManagerSetProviderCreationExpression.java",
diff --git a/java/dagger/internal/codegen/ComponentBindingExpressions.java b/java/dagger/internal/codegen/ComponentBindingExpressions.java
index 8ecf741e7..20fa93c4d 100644
--- a/java/dagger/internal/codegen/ComponentBindingExpressions.java
+++ b/java/dagger/internal/codegen/ComponentBindingExpressions.java
@@ -365,17 +365,23 @@ private FrameworkInstanceBindingExpression frameworkInstanceBindingExpression(
         resolvedBindings.scope().isPresent()
             ? scope(resolvedBindings, frameworkInstanceCreationExpression(resolvedBindings))
             : frameworkInstanceCreationExpression(resolvedBindings);
-    return new FrameworkInstanceBindingExpression(
-        resolvedBindings,
-        requestKind,
-        this,
-        resolvedBindings.bindingType().frameworkType(),
+    FrameworkInstanceSupplier frameworkInstanceSupplier =
         staticMethod.isPresent()
             ? staticMethod::get
             : new FrameworkFieldInitializer(
-                generatedComponentModel, resolvedBindings, frameworkInstanceCreationExpression),
-        types,
-        elements);
+                generatedComponentModel, resolvedBindings, frameworkInstanceCreationExpression);
+
+    FrameworkType frameworkType = resolvedBindings.bindingType().frameworkType();
+    switch (frameworkType) {
+      case PROVIDER:
+        return new ProviderInstanceBindingExpression(
+            resolvedBindings, requestKind, this, frameworkInstanceSupplier, types, elements);
+      case PRODUCER:
+        return new ProducerInstanceBindingExpression(
+            resolvedBindings, requestKind, this, frameworkInstanceSupplier, types, elements);
+      default:
+        throw new AssertionError("invalid framework type: " + frameworkType);
+    }
   }
 
   private FrameworkInstanceCreationExpression scope(
@@ -544,11 +550,10 @@ private BindingExpression providerBindingExpression(ResolvedBindings resolvedBin
   private FrameworkInstanceBindingExpression producerFromProviderBindingExpression(
       ResolvedBindings resolvedBindings, RequestKind requestKind) {
     checkArgument(resolvedBindings.bindingType().frameworkType().equals(FrameworkType.PROVIDER));
-    return new FrameworkInstanceBindingExpression(
+    return new ProducerInstanceBindingExpression(
         resolvedBindings,
         requestKind,
         this,
-        FrameworkType.PRODUCER,
         new FrameworkFieldInitializer(
             generatedComponentModel,
             resolvedBindings,
diff --git a/java/dagger/internal/codegen/FrameworkInstanceBindingExpression.java b/java/dagger/internal/codegen/FrameworkInstanceBindingExpression.java
index b5016819c..8e9eef7a3 100644
--- a/java/dagger/internal/codegen/FrameworkInstanceBindingExpression.java
+++ b/java/dagger/internal/codegen/FrameworkInstanceBindingExpression.java
@@ -28,12 +28,11 @@
 import javax.lang.model.util.Elements;
 
 /** A binding expression that uses an instance of a {@link FrameworkType}. */
-final class FrameworkInstanceBindingExpression extends BindingExpression {
+abstract class FrameworkInstanceBindingExpression extends BindingExpression {
   private final ResolvedBindings resolvedBindings;
   private final RequestKind requestKind;
   private final ComponentBindingExpressions componentBindingExpressions;
   private final FrameworkInstanceSupplier frameworkInstanceSupplier;
-  private final FrameworkType frameworkType;
   private final DaggerTypes types;
   private final Elements elements;
 
@@ -41,14 +40,12 @@
       ResolvedBindings resolvedBindings,
       RequestKind requestKind,
       ComponentBindingExpressions componentBindingExpressions,
-      FrameworkType frameworkType,
       FrameworkInstanceSupplier frameworkInstanceSupplier,
       DaggerTypes types,
       Elements elements) {
     this.resolvedBindings = checkNotNull(resolvedBindings);
     this.requestKind = checkNotNull(requestKind);
     this.componentBindingExpressions = checkNotNull(componentBindingExpressions);
-    this.frameworkType = checkNotNull(frameworkType);
     this.frameworkInstanceSupplier = checkNotNull(frameworkInstanceSupplier);
     this.types = checkNotNull(types);
     this.elements = checkNotNull(elements);
@@ -62,7 +59,7 @@
    */
   @Override
   Expression getDependencyExpression(ClassName requestingClass) {
-    if (requestKind.equals(frameworkRequestKind())) {
+    if (requestKind.equals(frameworkType().requestKind())) {
       MemberSelect memberSelect = frameworkInstanceSupplier.memberSelect();
       TypeMirror contributedType = resolvedBindings.contributionBinding().contributedType();
       TypeMirror expressionType =
@@ -78,24 +75,16 @@ Expression getDependencyExpression(ClassName requestingClass) {
     // example, the expression for RequestKind.LAZY is a composite of the expression for a
     // RequestKind.PROVIDER (the framework type):
     //    lazyExpression = DoubleCheck.lazy(providerExpression);
-    return frameworkType.to(
-        requestKind,
-        componentBindingExpressions.getDependencyExpression(
-            resolvedBindings.key(), frameworkRequestKind(), requestingClass),
-        types);
+    return frameworkType()
+        .to(
+            requestKind,
+            componentBindingExpressions.getDependencyExpression(
+                resolvedBindings.key(), frameworkType().requestKind(), requestingClass),
+            types);
   }
 
-  /** Returns the request kind that matches the framework type. */
-  private RequestKind frameworkRequestKind() {
-    switch (frameworkType) {
-      case PROVIDER:
-        return RequestKind.PROVIDER;
-      case PRODUCER:
-        return RequestKind.PRODUCER;
-      default:
-        throw new AssertionError(frameworkType);
-    }
-  }
+  /** Returns the framework type for the binding. */
+  protected abstract FrameworkType frameworkType();
 
   /**
    * Returns {@code true} if a factory is created inline each time it is requested. For example, in
diff --git a/java/dagger/internal/codegen/FrameworkType.java b/java/dagger/internal/codegen/FrameworkType.java
index 8f5fcf767..2d4b4e16f 100644
--- a/java/dagger/internal/codegen/FrameworkType.java
+++ b/java/dagger/internal/codegen/FrameworkType.java
@@ -40,6 +40,11 @@
 enum FrameworkType {
   /** A {@link Provider}. */
   PROVIDER {
+    @Override
+    RequestKind requestKind() {
+      return RequestKind.PROVIDER;
+    }
+
     @Override
     CodeBlock to(RequestKind requestKind, CodeBlock from) {
       switch (requestKind) {
@@ -97,6 +102,11 @@ Expression to(RequestKind requestKind, Expression from, DaggerTypes types) {
 
   /** A {@link Producer}. */
   PRODUCER {
+    @Override
+    RequestKind requestKind() {
+      return RequestKind.PRODUCER;
+    }
+
     @Override
     CodeBlock to(RequestKind requestKind, CodeBlock from) {
       switch (requestKind) {
@@ -133,6 +143,11 @@ Expression to(RequestKind requestKind, Expression from, DaggerTypes types) {
   // TODO(ronshapiro): Remove this once MembersInjectionBinding no longer extends Binding
   /** A {@link MembersInjector}. */
   MEMBERS_INJECTOR {
+    @Override
+    RequestKind requestKind() {
+      return RequestKind.MEMBERS_INJECTION;
+    }
+
     @Override
     CodeBlock to(RequestKind requestKind, CodeBlock from) {
       throw new UnsupportedOperationException(requestKind.toString());
@@ -145,6 +160,9 @@ Expression to(RequestKind requestKind, Expression from, DaggerTypes types) {
   },
   ;
 
+  /** Returns the {@link RequestKind} matching this framework type. */
+  abstract RequestKind requestKind();
+
   /**
    * Returns a {@link CodeBlock} that evaluates to a requested object given an expression that
    * evaluates to an instance of this framework type.
diff --git a/java/dagger/internal/codegen/ProducerInstanceBindingExpression.java b/java/dagger/internal/codegen/ProducerInstanceBindingExpression.java
new file mode 100644
index 000000000..49e57b101
--- /dev/null
+++ b/java/dagger/internal/codegen/ProducerInstanceBindingExpression.java
@@ -0,0 +1,45 @@
+/*
+ * Copyright (C) 2018 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.internal.codegen;
+
+import dagger.model.RequestKind;
+import javax.lang.model.util.Elements;
+
+/** Binding expression for producer instances. */
+final class ProducerInstanceBindingExpression extends FrameworkInstanceBindingExpression {
+
+  ProducerInstanceBindingExpression(
+      ResolvedBindings resolvedBindings,
+      RequestKind requestKind,
+      ComponentBindingExpressions componentBindingExpressions,
+      FrameworkInstanceSupplier frameworkInstanceSupplier,
+      DaggerTypes types,
+      Elements elements) {
+    super(
+        resolvedBindings,
+        requestKind,
+        componentBindingExpressions,
+        frameworkInstanceSupplier,
+        types,
+        elements);
+  }
+
+  @Override
+  protected FrameworkType frameworkType() {
+    return FrameworkType.PRODUCER;
+  }
+}
diff --git a/java/dagger/internal/codegen/ProviderInstanceBindingExpression.java b/java/dagger/internal/codegen/ProviderInstanceBindingExpression.java
new file mode 100644
index 000000000..ce653fbad
--- /dev/null
+++ b/java/dagger/internal/codegen/ProviderInstanceBindingExpression.java
@@ -0,0 +1,45 @@
+/*
+ * Copyright (C) 2018 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.internal.codegen;
+
+import dagger.model.RequestKind;
+import javax.lang.model.util.Elements;
+
+/** Binding expression for provider instances. */
+final class ProviderInstanceBindingExpression extends FrameworkInstanceBindingExpression {
+
+  ProviderInstanceBindingExpression(
+      ResolvedBindings resolvedBindings,
+      RequestKind requestKind,
+      ComponentBindingExpressions componentBindingExpressions,
+      FrameworkInstanceSupplier frameworkInstanceSupplier,
+      DaggerTypes types,
+      Elements elements) {
+    super(
+        resolvedBindings,
+        requestKind,
+        componentBindingExpressions,
+        frameworkInstanceSupplier,
+        types,
+        elements);
+  }
+
+  @Override
+  protected FrameworkType frameworkType() {
+    return FrameworkType.PROVIDER;
+  }
+}
