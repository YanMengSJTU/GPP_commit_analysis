diff --git a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
index 24d6744e6..ba5274f35 100644
--- a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -342,11 +342,9 @@ protected void addBuilder() {
 
     Optional<BuilderSpec> builderSpec = graph.componentDescriptor().builderSpec();
     if (builderSpec.isPresent()) {
-      componentBuilder.addModifiers(PUBLIC);
       addSupertype(componentBuilder, builderSpec.get().builderDefinitionType());
     } else {
       componentBuilder
-          .addModifiers(PUBLIC)
           .addMethod(constructorBuilder().addModifiers(PRIVATE).build());
     }
 
@@ -384,7 +382,7 @@ protected void addBuilder() {
     }
 
     for (ContributionBinding contributionBinding : graph.delegateRequirements()) {
-      createDelegateFieldAndMethod(builderName(), componentBuilder, contributionBinding, delegateFieldNames);
+      createDelegateFieldAndMethod(builderName(), componentBuilder, contributionBinding, delegateFieldNames, false);
     }
 
     return builderFields.build();
diff --git a/compiler/src/main/java/dagger/internal/codegen/ApplicationGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ApplicationGenerator.java
new file mode 100644
index 000000000..e540d4b73
--- /dev/null
+++ b/compiler/src/main/java/dagger/internal/codegen/ApplicationGenerator.java
@@ -0,0 +1,103 @@
+package dagger.internal.codegen;
+
+import com.google.auto.common.MoreTypes;
+import com.squareup.javapoet.*;
+import dagger.Component;
+
+import javax.annotation.processing.Filer;
+import javax.lang.model.element.*;
+import javax.lang.model.type.DeclaredType;
+import javax.lang.model.util.Elements;
+import javax.lang.model.util.Types;
+import java.util.*;
+
+/**
+ * Created by Andy on 18.05.2017.
+ */
+public class ApplicationGenerator extends SourceFileGenerator<DI>{
+
+    private Types types;
+    private Elements elements;
+    private final BindingGraph.Factory bindingGraphFactory;
+    private final ComponentDescriptor.Factory componentDescriptorFactory;
+
+    public ApplicationGenerator(Filer filer, Types types, Elements elements, BindingGraph.Factory bindingGraphFactory, ComponentDescriptor.Factory componentDescriptorFactory) {
+        super(filer, elements);
+        this.types = types;
+        this.elements = elements;
+        this.bindingGraphFactory = bindingGraphFactory;
+        this.componentDescriptorFactory = componentDescriptorFactory;
+    }
+
+    @Override
+    ClassName nameGeneratedType(DI input) {
+        return ClassName.get(input.getAppClass()).topLevelClassName().peerClass("DaggerApplication");
+    }
+
+    @Override
+    Optional<? extends Element> getElementForErrorReporting(DI input) {
+        return Optional.ofNullable(input.getAppClass());
+    }
+
+    @Override
+    Optional<TypeSpec.Builder> write(ClassName generatedTypeName, DI di) {
+        final TypeSpec.Builder builder = TypeSpec.classBuilder(generatedTypeName);
+        TypeName superclass = ClassName.bestGuess("android.app.Application");
+        builder.addModifiers(Modifier.PUBLIC).superclass(superclass);
+        builder.addSuperinterface(ClassName.bestGuess("injector.InjectorSpec"));
+        final Set<TypeElement> components = di.getComponents();
+
+        final ClassName injectorType = ClassName.bestGuess("injector.Injector");
+        builder.addField(injectorType, "injector", Modifier.PRIVATE);
+
+        for (TypeElement component : components) {
+            final SpecComponentInfo componentInfo = ComponentInfo.forSpec(component, componentDescriptorFactory, bindingGraphFactory);
+            final List<MethodSpec.Builder> methodBuilders = componentInfo.getMethods();
+            for (MethodSpec.Builder methodBuilder : methodBuilders) {
+                List<CodeBlock> blocks = new ArrayList<>();
+                blocks.add(CodeBlock.of("$L", "return builder"));
+                /*final List<ParameterSpec> parameters = methodBuilder.build().parameters;
+                if (parameters.size() > 1) {
+                    for (ParameterSpec parameter : parameters.subList(1, parameters.size() - 1)) {
+                        blocks.add(CodeBlock.of(".$L($L)", parameter.name, parameter.name));
+                    }
+                }*/
+                final CodeBlock collect = blocks.stream().collect(CodeBlocks.joiningCodeBlocks("\n"));
+                methodBuilder.addStatement("$L", collect);
+                final MethodSpec build = methodBuilder.build();
+                builder.addMethod(build);
+            }
+        }
+
+        final Optional<ExecutableElement> onCreateMethod = findOnCreateMethod(di.getAppClass());
+        if (onCreateMethod.isPresent()) {
+            final MethodSpec.Builder overriding = MethodSpec.overriding(onCreateMethod.get());
+            overriding.addStatement("this.injector = new $T(this)", injectorType);
+            overriding.addStatement("super.onCreate()");
+            builder.addMethod(overriding.build());
+        }
+
+        builder.addMethod(MethodSpec.methodBuilder("getInjector")
+                .addModifiers(Modifier.PUBLIC)
+                .returns(injectorType)
+                .addStatement("return this.injector")
+                .build());
+
+        return Optional.ofNullable(builder);
+    }
+
+    private java.util.Optional<ExecutableElement> findOnCreateMethod(TypeElement applicationClass) {
+        final java.util.Optional<ExecutableElement> onCreateMethod = applicationClass.getEnclosedElements().stream()
+                .filter(e -> e.getKind() == ElementKind.METHOD)
+                .map(e -> (ExecutableElement) e)
+                .filter(e -> e.getSimpleName().toString().equals("onCreate"))
+                .findFirst();
+        final com.google.common.base.Optional<DeclaredType> declaredTypeOptional = MoreTypes.nonObjectSuperclass(types, elements, MoreTypes.asDeclared(applicationClass.asType()));
+        if (!onCreateMethod.isPresent() && declaredTypeOptional.isPresent()) {
+            return findOnCreateMethod(MoreTypes.asTypeElement(declaredTypeOptional.get()));
+        }
+        else
+            return onCreateMethod;
+    }
+
+}
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentInfo.java b/compiler/src/main/java/dagger/internal/codegen/ComponentInfo.java
index 1e94307dc..477766118 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentInfo.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentInfo.java
@@ -24,11 +24,11 @@
     protected final BindingGraph bindingGraph;
     protected List<ComponentInfo> infos = new ArrayList<>();
 
-    public static ComponentInfo forSpec(TypeElement component, ComponentDescriptor.Factory componentDescriptorFactory, BindingGraph.Factory bindingGraphFactory) {
+    public static SpecComponentInfo forSpec(TypeElement component, ComponentDescriptor.Factory componentDescriptorFactory, BindingGraph.Factory bindingGraphFactory) {
         return createSpecComponentInfo(component, componentDescriptorFactory, bindingGraphFactory);
     }
 
-    public static ComponentInfo forGenerator(TypeElement component, ComponentDescriptor.Factory componentDescriptorFactory, BindingGraph.Factory bindingGraphFactory) {
+    public static GeneratorComponentInfo forGenerator(TypeElement component, ComponentDescriptor.Factory componentDescriptorFactory, BindingGraph.Factory bindingGraphFactory) {
         return createGeneratorComponentInfo(component, componentDescriptorFactory, bindingGraphFactory);
     }
 
@@ -59,33 +59,33 @@ private static void createTriggerSubcomponentInfo(BindingGraph bindingGraph, Com
         }
     }
 
-    private static ComponentInfo createSpecComponentInfo(TypeElement component,
+    private static SpecComponentInfo createSpecComponentInfo(TypeElement component,
                                                          ComponentDescriptor.Factory componentDescriptorFactory,
                                                          BindingGraph.Factory bindingGraphFactory) {
         final ComponentDescriptor descriptor = componentDescriptorFactory.forComponent(component);
         final BindingGraph bindingGraph = bindingGraphFactory.create(descriptor);
-        final ComponentInfo componentMethodOverrider = new SpecComponentInfo(component, descriptor, bindingGraph);
+        final SpecComponentInfo componentMethodOverrider = new SpecComponentInfo(component, descriptor, bindingGraph);
         createSpecSubcomponentInfo(descriptor, bindingGraphFactory, componentMethodOverrider);
         return componentMethodOverrider;
     }
 
-    private static void createSpecSubcomponentInfo(ComponentDescriptor descriptor, BindingGraph.Factory bindingGraphFactory, ComponentInfo componentMethodOverrider) {
+    private static void createSpecSubcomponentInfo(ComponentDescriptor descriptor, BindingGraph.Factory bindingGraphFactory, SpecComponentInfo componentMethodOverrider) {
         final ImmutableSet<ComponentDescriptor> subcomponents = descriptor.subcomponents();
         for (ComponentDescriptor subcomponentDescriptor : subcomponents) {
             final BindingGraph bindingGraph = bindingGraphFactory.create(subcomponentDescriptor);
-            final ComponentInfo subcomponentOverrider =
+            final SpecComponentInfo subcomponentOverrider =
                     new SpecComponentInfo(subcomponentDescriptor.componentDefinitionType(), subcomponentDescriptor, bindingGraph);
             componentMethodOverrider.add(subcomponentOverrider);
             createSpecSubcomponentInfo(subcomponentDescriptor, bindingGraphFactory, subcomponentOverrider);
         }
     }
 
-    private static ComponentInfo createGeneratorComponentInfo(TypeElement component,
+    private static GeneratorComponentInfo createGeneratorComponentInfo(TypeElement component,
                                                      ComponentDescriptor.Factory componentDescriptorFactory,
                                                      BindingGraph.Factory bindingGraphFactory) {
         final ComponentDescriptor descriptor = componentDescriptorFactory.forComponent(component);
         final BindingGraph bindingGraph = bindingGraphFactory.create(descriptor);
-        final ComponentInfo componentInfo = new GeneratorComponentInfo(component, descriptor, bindingGraph);
+        final GeneratorComponentInfo componentInfo = new GeneratorComponentInfo(component, descriptor, bindingGraph);
         for (BindingGraph subGraph : bindingGraph.subgraphs()) {
             final ComponentDescriptor subDescriptor = subGraph.componentDescriptor();
             componentInfo.add(new GeneratorComponentInfo(subDescriptor.componentDefinitionType(), subDescriptor, subGraph));
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
index 6bb5dd98d..32b1303f3 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
@@ -291,7 +291,8 @@ public SourceVersion getSupportedSourceVersion() {
                     bindingGraphFactory,
                     componentDescriptorFactory,
                     new DependencySpecGenerator(filer, elements, componentDescriptorFactory, bindingGraphFactory),
-                    new DependencyInjectorGenerator(filer, elements, bindingGraphFactory, componentDescriptorFactory)
+                    new DependencyInjectorGenerator(filer, elements, bindingGraphFactory, componentDescriptorFactory),
+                    new ApplicationGenerator(filer, types, elements, bindingGraphFactory, componentDescriptorFactory)
             )
     );
   }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/ComponentWriter.java
index 9b40783a7..d0e949abc 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentWriter.java
@@ -173,7 +173,7 @@ protected void addBuilderClass(TypeSpec builder) {
 
   @Override
   protected void addFactoryMethods() {
-    if (canInstantiateAllRequirements()) {
+    /*if (canInstantiateAllRequirements()) {
       CharSequence buildMethodName =
           graph.componentDescriptor().builderSpec().isPresent()
               ? graph.componentDescriptor().builderSpec().get().buildMethod().getSimpleName()
@@ -184,7 +184,7 @@ protected void addFactoryMethods() {
               .addModifiers(PUBLIC, STATIC)
               .addStatement("return builder().$L()", buildMethodName)
               .build());
-    }
+    }*/
   }
 
   /** {@code true} if all of the graph's required dependencies can be automatically constructed. */
diff --git a/compiler/src/main/java/dagger/internal/codegen/Decorator.java b/compiler/src/main/java/dagger/internal/codegen/Decorator.java
index aac848ff9..5292d151e 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Decorator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Decorator.java
@@ -36,7 +36,7 @@ ClassName nameGeneratedType(BindingGraph input) {
 
     private ClassName getClassName(BindingGraph input) {
         final TypeElement component = input.componentDescriptor().componentDefinitionType();
-        return ClassName.bestGuess("factories." + component.getSimpleName().toString() + "Decorator");
+        return ClassName.get(component).topLevelClassName().peerClass(component.getSimpleName().toString() + "Decorator");
     }
 
     @Override
@@ -53,12 +53,14 @@ private ClassName getClassName(BindingGraph input) {
 
         builder.addField(appClass, "app", Modifier.PRIVATE);
 
-        addDecoratorType(builder, generatedTypeName, daggerBuilderClassName, input);
+        TypeName builderClassName = ClassName.get(input.componentDescriptor().builderSpec().get().builderDefinitionType());
+
+        addDecoratorType(builder, generatedTypeName, daggerBuilderClassName, builderClassName, input);
 
         return Optional.of(builder);
     }
 
-    private void addDecoratorType(TypeSpec.Builder builder, ClassName returnType, String className, BindingGraph bindingGraph) {
+    private void addDecoratorType(TypeSpec.Builder builder, ClassName returnType, String className, TypeName builderClassName, BindingGraph bindingGraph) {
 
         builder.addModifiers(Modifier.PUBLIC);
         builder.addMethod(MethodSpec.constructorBuilder()
@@ -68,13 +70,17 @@ private void addDecoratorType(TypeSpec.Builder builder, ClassName returnType, St
                 .build());
 
         List<CodeBlock> statements = new ArrayList<>();
+        final ClassName name = ClassName.bestGuess(className);
+        statements.add(CodeBlock.of("$T impl = ($T) builder;", name, name));
         for (ContributionBinding contributionBinding : bindingGraph.delegateRequirements()) {
-            Util.createDelegateFieldAndMethod(returnType, builder, contributionBinding, new HashMap<>(1));
+            Util.createDelegateFieldAndMethod(returnType, builder, contributionBinding, new HashMap<>(1), true);
             final String delegateFieldName = Util.getDelegateFieldName(contributionBinding.key());
             final ClassName delegateTypeName = Util.getDelegateTypeName(contributionBinding.key());
-            statements.add(CodeBlock.of("builder.$L(this.$L);", Util.getDelegateMethodName(delegateTypeName), delegateFieldName));
+            statements.add(CodeBlock.of("impl.$L(this.$L);", Util.getDelegateMethodName(delegateTypeName), delegateFieldName));
         }
 
+        statements.add(CodeBlock.of("return impl;"));
+
         builder.addMethod(MethodSpec.methodBuilder("and")
                 .addModifiers(Modifier.PUBLIC)
                 .addStatement("return app")
@@ -83,9 +89,9 @@ private void addDecoratorType(TypeSpec.Builder builder, ClassName returnType, St
 
         builder.addMethod(MethodSpec.methodBuilder("decorate")
                 .addModifiers(Modifier.PUBLIC)
-                .addParameter(ClassName.bestGuess(className), "builder")
+                .addParameter(builderClassName, "builder")
                 .addCode("$L", statements.stream().collect(CodeBlocks.joiningCodeBlocks("\n")))
-                .returns(void.class)
+                .returns(builderClassName)
                 .build());
     }
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/DependencyInjectorGenerator.java b/compiler/src/main/java/dagger/internal/codegen/DependencyInjectorGenerator.java
index c968d3832..01ff7c587 100644
--- a/compiler/src/main/java/dagger/internal/codegen/DependencyInjectorGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/DependencyInjectorGenerator.java
@@ -45,7 +45,7 @@ ClassName nameGeneratedType(DI input) {
     @Override
     Optional<TypeSpec.Builder> write(ClassName generatedTypeName, DI input) {
         final TypeSpec.Builder builder = TypeSpec.classBuilder(generatedTypeName).addModifiers(Modifier.PUBLIC);
-        final ClassName appType = ClassName.get(input.getAppClass());
+        final ClassName appType = ClassName.get(input.getAppClass()).topLevelClassName().peerClass("DaggerApplication");
         builder.addMethod(MethodSpec.constructorBuilder()
                 .addModifiers(Modifier.PUBLIC)
                 .addParameter(appType, "app")
@@ -53,7 +53,7 @@ ClassName nameGeneratedType(DI input) {
                 .build());
         builder.addField(appType, "app", Modifier.PRIVATE);
         for (TypeElement typeElement : input.getComponents()) {
-            final ComponentInfo info = ComponentInfo.forGenerator(typeElement, componentDescriptorFactory, bindingGraphFactory);
+            final GeneratorComponentInfo info = ComponentInfo.forGenerator(typeElement, componentDescriptorFactory, bindingGraphFactory);
             info.process(builder);
         }
         return Optional.of(builder);
diff --git a/compiler/src/main/java/dagger/internal/codegen/GeneratorComponentInfo.java b/compiler/src/main/java/dagger/internal/codegen/GeneratorComponentInfo.java
index db756fc13..c2235b862 100644
--- a/compiler/src/main/java/dagger/internal/codegen/GeneratorComponentInfo.java
+++ b/compiler/src/main/java/dagger/internal/codegen/GeneratorComponentInfo.java
@@ -69,11 +69,13 @@ public void process(TypeSpec.Builder builder) {
                 final ComponentRequirement requirement = requirementMethod.requirement();
                 final TypeElement typeElement = requirement.typeElement();
                 final boolean hasNotOnlyNoArgConstructor = hasNotOnlyNoArgConstructor(typeElement, requirement.autoCreate());
+                final String methodName = requirementMethod.method().getSimpleName().toString();
                 if ((requirement.kind() == ComponentRequirement.Kind.MODULE &&
                         hasNotOnlyNoArgConstructor) || requirement.kind() != ComponentRequirement.Kind.MODULE) {
-                    statementParams.add(CodeBlock.of("$L", simpleVariableName(typeElement)));
+                    //statementParams.add(CodeBlock.of("$L", simpleVariableName(typeElement)));
+                    moduleConstructorStatements.add(CodeBlock.of(".$L($L)",
+                            methodName, simpleVariableName(typeElement)));
                 }else if (requirement.kind() == ComponentRequirement.Kind.MODULE && !hasNotOnlyNoArgConstructor) {
-                    final String methodName = requirementMethod.method().getSimpleName().toString();
                     moduleConstructorStatements.add(CodeBlock.of(".$L(new $T())",
                             methodName, ClassName.get(requirement.typeElement())));
                 }
@@ -82,12 +84,14 @@ public void process(TypeSpec.Builder builder) {
             for (ModuleDescriptor moduleDescriptor : descriptor.modules()) {
                 final TypeElement typeElement = moduleDescriptor.moduleElement();
                 if (hasNotOnlyNoArgConstructor(typeElement, autoCreate(typeElement))) {
-                    statementParams.add(CodeBlock.of("$L", simpleVariableName(typeElement)));
+                    final String variableName = simpleVariableName(typeElement);
+                    moduleConstructorStatements.add(CodeBlock.of(".$L($L)", variableName, variableName));
                 }
             }
 
             for (TypeElement typeElement : descriptor.dependencies()) {
-                statementParams.add(CodeBlock.of("$L", simpleVariableName(typeElement)));
+                final String variableName = simpleVariableName(typeElement);
+                moduleConstructorStatements.add(CodeBlock.of(".$L($L)", variableName, variableName));
             }
         }
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectorGenerator.java b/compiler/src/main/java/dagger/internal/codegen/InjectorGenerator.java
index 56e89d4a1..05c5a8181 100644
--- a/compiler/src/main/java/dagger/internal/codegen/InjectorGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/InjectorGenerator.java
@@ -106,17 +106,20 @@ private void createDecoratorClass(TypeSpec.Builder builder, MethodSpec.Builder m
     }
 
     private java.util.Optional<ExecutableElement> findOnCreateMethod(TypeElement applicationClass) {
+
         final java.util.Optional<ExecutableElement> onCreateMethod = applicationClass.getEnclosedElements().stream()
                 .filter(e -> e.getKind() == ElementKind.METHOD)
                 .map(e -> (ExecutableElement) e)
                 .filter(e -> e.getSimpleName().toString().equals("onCreate"))
                 .findFirst();
-        final com.google.common.base.Optional<DeclaredType> declaredTypeOptional = MoreTypes.nonObjectSuperclass(types, elements, MoreTypes.asDeclared(applicationClass.asType()));
-        if (!onCreateMethod.isPresent() && declaredTypeOptional.isPresent()) {
-            return findOnCreateMethod(MoreTypes.asTypeElement(declaredTypeOptional.get()));
+        if (!onCreateMethod.isPresent()) {
+            final com.google.common.base.Optional<DeclaredType> declaredTypeOptional = MoreTypes.nonObjectSuperclass(types, elements, MoreTypes.asDeclared(applicationClass.asType()));
+            if (declaredTypeOptional.isPresent()) {
+                return findOnCreateMethod(MoreTypes.asTypeElement(declaredTypeOptional.get()));
+            }
         }
-        else
-            return onCreateMethod;
+
+        return onCreateMethod;
     }
 
     @Override
diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectorProcessingStep.java b/compiler/src/main/java/dagger/internal/codegen/InjectorProcessingStep.java
index 66ca481e8..513d188e0 100644
--- a/compiler/src/main/java/dagger/internal/codegen/InjectorProcessingStep.java
+++ b/compiler/src/main/java/dagger/internal/codegen/InjectorProcessingStep.java
@@ -35,6 +35,7 @@
     private final ComponentDescriptor.Factory componentDescriptorFactory;
     private DependencySpecGenerator dependencySpecGenerator;
     private DependencyInjectorGenerator dependencyInjectorGenerator;
+    private ApplicationGenerator applicationGenerator;
     private Map<TypeElement, ExecutableElement> componentMethodMap;
     private Map<TypeElement, ExecutableElement> moduleMethodMap;
     private Map<TypeElement, ExecutableElement> subcomponentMethodMap;
@@ -47,7 +48,8 @@ public InjectorProcessingStep(Types types, Messager messager,
                                   ComponentDescriptor.Kind component, BindingGraph.Factory bindingGraphFactory,
                                   ComponentDescriptor.Factory componentDescriptorFactory,
                                   DependencySpecGenerator dependencySpecGenerator,
-                                  DependencyInjectorGenerator dependencyInjectorGenerator) {
+                                  DependencyInjectorGenerator dependencyInjectorGenerator,
+                                  ApplicationGenerator applicationGenerator) {
         this.types = types;
         this.messager = messager;
         this.injectorGenerator = injectorGenerator;
@@ -56,6 +58,7 @@ public InjectorProcessingStep(Types types, Messager messager,
         this.componentDescriptorFactory = componentDescriptorFactory;
         this.dependencySpecGenerator = dependencySpecGenerator;
         this.dependencyInjectorGenerator = dependencyInjectorGenerator;
+        this.applicationGenerator = applicationGenerator;
     }
 
     @Override
@@ -118,6 +121,7 @@ public InjectorProcessingStep(Types types, Messager messager,
         }
         if (rejectedElements.isEmpty()) {
             final DI di = new DI(appClass, components, injectorTypeList);
+            this.applicationGenerator.generate(di, messager);
             this.dependencyInjectorGenerator.generate(di, messager);
             this.dependencySpecGenerator.generate(components, messager);
             this.injectorGenerator.generate(di, messager);
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProvidingMethodOverrider.java b/compiler/src/main/java/dagger/internal/codegen/ProvidingMethodOverrider.java
index 9e68702fd..cef08cc54 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProvidingMethodOverrider.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProvidingMethodOverrider.java
@@ -61,7 +61,7 @@ public void process(TypeSpec.Builder builder, ClassName generatedTypeName, Map<K
         this.getBindingGraph().resolvedBindings().values().forEach(resolvedBindings -> {
             if (!resolvedBindings.isEmpty() && resolvedBindings.bindingType() == BindingType.PROVISION && Util.bindingSupportsTestDelegate(resolvedBindings.contributionBinding())) {
                 if (!delegateFieldNames.containsKey(resolvedBindings.key())) {
-                    createDelegateFieldAndMethod(generatedTypeName, builder, resolvedBindings, delegateFieldNames);
+                    createDelegateFieldAndMethod(generatedTypeName, builder, resolvedBindings.contributionBinding(), delegateFieldNames, true);
                 }
             }
         });
diff --git a/compiler/src/main/java/dagger/internal/codegen/SpecComponentInfo.java b/compiler/src/main/java/dagger/internal/codegen/SpecComponentInfo.java
index 8159ab845..3364a07eb 100644
--- a/compiler/src/main/java/dagger/internal/codegen/SpecComponentInfo.java
+++ b/compiler/src/main/java/dagger/internal/codegen/SpecComponentInfo.java
@@ -25,8 +25,14 @@ protected SpecComponentInfo(TypeElement component, ComponentDescriptor descripto
     public void process(TypeSpec.Builder builder) {
         super.process(builder);
 
+        final MethodSpec.Builder methodBuilder = buildMethod();
+        methodBuilder.addModifiers(Modifier.ABSTRACT);
+        builder.addMethod(methodBuilder.build());
+    }
+
+    protected MethodSpec.Builder buildMethod() {
         final MethodSpec.Builder methodBuilder = MethodSpec.methodBuilder(simpleVariableName(component))
-                .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT);
+                .addModifiers(Modifier.PUBLIC);
 
         ClassName builderClassName = getBuilderClassName(component);
         methodBuilder.returns(builderClassName);
@@ -41,22 +47,32 @@ public void process(TypeSpec.Builder builder) {
                 final ComponentRequirement requirement = requirementMethod.requirement();
                 final TypeElement typeElement = requirement.typeElement();
                 if ((requirement.kind() == ComponentRequirement.Kind.MODULE && hasNotOnlyNoArgConstructor(typeElement, requirement.autoCreate())) || requirement.kind() != ComponentRequirement.Kind.MODULE) {
-                    parameterSpecs.add(ParameterSpec.builder(ClassName.get(typeElement), simpleVariableName(typeElement)).build());
+                    //parameterSpecs.add(ParameterSpec.builder(ClassName.get(typeElement), simpleVariableName(typeElement)).build());
                 }
             }
         } else {
             for (ModuleDescriptor moduleDescriptor : descriptor.modules()) {
                 final TypeElement typeElement = moduleDescriptor.moduleElement();
                 if (hasNotOnlyNoArgConstructor(typeElement, autoCreate(typeElement))) {
-                    parameterSpecs.add(ParameterSpec.builder(ClassName.get(typeElement), simpleVariableName(typeElement)).build());
+                    //parameterSpecs.add(ParameterSpec.builder(ClassName.get(typeElement), simpleVariableName(typeElement)).build());
                 }
             }
 
             for (TypeElement typeElement : descriptor.dependencies()) {
-                parameterSpecs.add(ParameterSpec.builder(ClassName.get(typeElement), simpleVariableName(typeElement)).build());
+                //parameterSpecs.add(ParameterSpec.builder(ClassName.get(typeElement), simpleVariableName(typeElement)).build());
             }
         }
 
-        builder.addMethod(methodBuilder.addParameters(parameterSpecs).build());
+        methodBuilder.addParameters(parameterSpecs);
+        return methodBuilder;
+    }
+
+    public List<MethodSpec.Builder> getMethods() {
+        List<MethodSpec.Builder> methodSpecs = new ArrayList<>();
+        for (ComponentInfo info : infos) {
+            methodSpecs.addAll(((SpecComponentInfo)info).getMethods());
+        }
+        methodSpecs.add(buildMethod());
+        return methodSpecs;
     }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/TriggerComponentInfo.java b/compiler/src/main/java/dagger/internal/codegen/TriggerComponentInfo.java
index ab17af175..c05f4dcbb 100644
--- a/compiler/src/main/java/dagger/internal/codegen/TriggerComponentInfo.java
+++ b/compiler/src/main/java/dagger/internal/codegen/TriggerComponentInfo.java
@@ -45,7 +45,7 @@ public void process(TypeSpec.Builder builder) {
 
         parameterSpecs.add(builderParameter);
 
-        if(descriptor.builderSpec().isPresent()) {
+/*        if(descriptor.builderSpec().isPresent()) {
             final ComponentDescriptor.BuilderSpec builderSpec = descriptor.builderSpec().get();
             for (ComponentDescriptor.BuilderRequirementMethod builderRequirementMethod : builderSpec.requirementMethods()) {
                 final ComponentRequirement requirement = builderRequirementMethod.requirement();
@@ -62,11 +62,11 @@ public void process(TypeSpec.Builder builder) {
                     parameterSpecs.add(ParameterSpec.builder(ClassName.get(typeElement), simpleVariableName(typeElement)).build());
                 }
             }
-        }
+        }*/
 
         methodBuilder.addParameters(parameterSpecs);
 
-        final List<CodeBlock> params = parameterSpecs.stream()
+        /*final List<CodeBlock> params = parameterSpecs.stream()
                 .map(parameterSpec -> CodeBlock.of("$L", parameterSpec.name))
                 .collect(Collectors.toList());
 
@@ -80,7 +80,11 @@ public void process(TypeSpec.Builder builder) {
 
         methodBuilder.addStatement("this.$L.decorate(componentBuilder)", decoratorName);
 
-        methodBuilder.addStatement("return componentBuilder");
+        methodBuilder.addStatement("return componentBuilder");*/
+
+        final String decoratorName = Util.lowerCaseFirstLetter(component.getSimpleName().toString()) + "Decorator";
+
+        methodBuilder.addStatement("return this.$L.decorate(super.$L(builder))", decoratorName, methodName);
 
         builder.addMethod(methodBuilder.build());
     }
diff --git a/compiler/src/main/java/dagger/internal/codegen/Util.java b/compiler/src/main/java/dagger/internal/codegen/Util.java
index d6206b8ed..9d89396bf 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Util.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Util.java
@@ -540,6 +540,7 @@ public static void createDelegateField(TypeSpec.Builder classBuilder, Contributi
                 final String delegateFieldName = Util.getDelegateFieldName(binding.key());
                 final ClassName delegateType = getDelegateTypeName(binding.key());
                 final FieldSpec.Builder builder = FieldSpec.builder(delegateType, delegateFieldName);
+                builder.addModifiers(Modifier.PRIVATE);
                 delegateFieldNames.put(binding.key(), delegateFieldName);
                 final FieldSpec fieldSpec = builder.build();
                 classBuilder.addField(fieldSpec);
@@ -548,18 +549,22 @@ public static void createDelegateField(TypeSpec.Builder classBuilder, Contributi
         }
     }
 
-    public static void createDelegateFieldAndMethod(ClassName generatedTypeName, TypeSpec.Builder classBuilder, ContributionBinding binding, Map<Key, String> delegateFieldNames) {
+    public static void createDelegateFieldAndMethod(ClassName generatedTypeName, TypeSpec.Builder classBuilder, ContributionBinding binding, Map<Key, String> delegateFieldNames, boolean publicMethod) {
         try {
             if (bindingSupportsTestDelegate(binding)) {
                 final String delegateFieldName = Util.getDelegateFieldName(binding.key());
                 final ClassName delegateType = getDelegateTypeName(binding.key());
                 final FieldSpec.Builder builder = FieldSpec.builder(delegateType, delegateFieldName);
+                builder.addModifiers(Modifier.PRIVATE);
                 delegateFieldNames.put(binding.key(), delegateFieldName);
                 final FieldSpec fieldSpec = builder.build();
                 classBuilder.addField(fieldSpec);
                 final String methodName = getDelegateMethodName(delegateType);
-                classBuilder.addMethod(MethodSpec.methodBuilder(methodName)
-                        .addModifiers(Modifier.PUBLIC)
+                final MethodSpec.Builder delegateMethodBuilder = MethodSpec.methodBuilder(methodName);
+                if (publicMethod) {
+                    delegateMethodBuilder.addModifiers(Modifier.PUBLIC);
+                }
+                classBuilder.addMethod(delegateMethodBuilder
                         .returns(generatedTypeName)
                         .addParameter(delegateType, delegateFieldName)
                         .addStatement("this.$N = $L", fieldSpec, CodeBlock.of(delegateFieldName))
@@ -604,8 +609,8 @@ public static String getDelegateMethodName(ClassName delegateType) {
     public static ClassName getDaggerComponentClassName(ClassName componentDefinitionClassName) {
        String componentName =
                 "Dagger" + Joiner.on('_').join(componentDefinitionClassName.simpleNames());
-        componentDefinitionClassName = ClassName.bestGuess("factories." + componentName);
-        return componentDefinitionClassName;//componentDefinitionClassName.topLevelClassName().peerClass(componentName);
+        //componentDefinitionClassName = ClassName.bestGuess("factories." + componentName);
+        return componentDefinitionClassName.topLevelClassName().peerClass(componentName);
     }
 
     public static ClassName getDaggerComponentClassName(Element component) {
diff --git a/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/AbstractActivityComponent.java b/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/AbstractActivityComponent.java
index 35f578d6c..70fbde88b 100644
--- a/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/AbstractActivityComponent.java
+++ b/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/AbstractActivityComponent.java
@@ -27,4 +27,10 @@
 @Component(dependencies = ApplicationComponent.class, modules = ActivityModule.class)
 public interface AbstractActivityComponent {
   Activity activity(); // Expose the activity to sub-graphs.
+  @Component.Builder
+  interface Builder {
+    Builder moduleActivity(ActivityModule module);
+    Builder component(ApplicationComponent component);
+    AbstractActivityComponent build();
+  }
 }
diff --git a/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/ApplicationComponent.java b/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/ApplicationComponent.java
index e57f8cea7..6bd3bef59 100644
--- a/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/ApplicationComponent.java
+++ b/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/ApplicationComponent.java
@@ -18,6 +18,7 @@
 
 import android.app.Application;
 import android.location.LocationManager;
+import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import dagger.Component;
 import javax.inject.Singleton;
 
@@ -31,4 +32,9 @@
   // Exported for child-components.
   Application application();
   LocationManager locationManager();
+  @Component.Builder
+  interface Builder {
+    Builder module(DemoApplicationModule module);
+    ApplicationComponent build();
+  }
 }
diff --git a/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/DemoApplication.java b/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/DemoApplication.java
index 2ef7da478..cbee801ef 100644
--- a/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/DemoApplication.java
+++ b/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/DemoApplication.java
@@ -24,15 +24,11 @@
 import dagger.Provides;
 import dagger.ProvidesComponent;
 import dagger.ProvidesModule;
-import factories.DaggerAbstractActivityComponent;
-import factories.DaggerApplicationComponent;
-import factories.DaggerFragmentComponent;
-import factories.DaggerHomeComponent;
 import injector.InjectorSpec;
 
 import javax.inject.Inject;
 
-public class DemoApplication extends Application implements InjectorSpec {
+public class DemoApplication extends DaggerApplication {
   private ApplicationComponent applicationComponent;
 
   // TODO(cgruber): Figure out a better example of something one might inject into the app.
@@ -41,7 +37,7 @@
   @Override public void onCreate() {
     super.onCreate();
     applicationComponent = DaggerApplicationComponent.builder()
-        .demoApplicationModule(new DemoApplicationModule(this))
+        .module(new DemoApplicationModule(this))
         .build();
   }
 
@@ -49,31 +45,4 @@ public ApplicationComponent component() {
     return applicationComponent;
   }
 
-  @Override
-  public DaggerFragmentComponent.Builder fragmentComponent(DaggerFragmentComponent.Builder builder,
-                                                           AbstractActivityComponent abstractActivityComponent) {
-    return builder.abstractActivityComponent(abstractActivityComponent);
-  }
-
-  @Override
-  public DaggerAbstractActivityComponent.Builder abstractActivityComponent(DaggerAbstractActivityComponent.Builder builder,
-                                                                           ActivityModule activityModule,
-                                                                           ApplicationComponent applicationComponent) {
-    return builder.applicationComponent(applicationComponent).activityModule(activityModule);
-  }
-
-  @Override
-  public DaggerHomeComponent.Builder homeComponent(DaggerHomeComponent.Builder builder, ActivityModule activityModule, ApplicationComponent applicationComponent) {
-    return null;
-  }
-
-  @Override
-  public DaggerApplicationComponent.Builder applicationComponent(DaggerApplicationComponent.Builder builder, DemoApplicationModule demoApplicationModule) {
-    return null;
-  }
-
-  @Override
-  public injector.Injector getInjector() {
-    return null;
-  }
 }
diff --git a/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/FragmentComponent.java b/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/FragmentComponent.java
index 8fff0004c..948451a46 100644
--- a/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/FragmentComponent.java
+++ b/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/FragmentComponent.java
@@ -5,4 +5,9 @@
 @PerFragment
 @Component(dependencies = AbstractActivityComponent.class)
 public interface FragmentComponent {
+    @Component.Builder
+    interface Builder {
+        Builder component(AbstractActivityComponent component);
+        FragmentComponent build();
+    }
 }
diff --git a/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/ui/HomeActivity.java b/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/ui/HomeActivity.java
index 2c31d5318..150610739 100644
--- a/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/ui/HomeActivity.java
+++ b/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/ui/HomeActivity.java
@@ -23,7 +23,6 @@
 import com.example.dagger.activitygraphs.DemoApplication;
 import com.example.dagger.activitygraphs.SomeClass;
 import dagger.Lazy;
-import factories.DaggerHomeComponent;
 
 import javax.inject.Inject;
 import javax.inject.Named;
@@ -49,8 +48,8 @@
   HomeComponent component() {
     if (component == null) {
       component = DaggerHomeComponent.builder()
-          .applicationComponent(((DemoApplication) getApplication()).component())
-          .activityModule(new ActivityModule(this))
+          .componentApplication(((DemoApplication) getApplication()).component())
+          .moduleActivity(new ActivityModule(this))
           .build();
     }
     return component;
diff --git a/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/ui/HomeComponent.java b/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/ui/HomeComponent.java
index 57b9b894b..604bd4ae7 100644
--- a/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/ui/HomeComponent.java
+++ b/examples/android-activity-graphs/src/main/java/com/example/dagger/activitygraphs/ui/HomeComponent.java
@@ -27,4 +27,10 @@
 public interface HomeComponent extends AbstractActivityComponent {
   void inject(HomeActivity homeActivity);
   void inject(HomeFragment homeFragment);
+  @Component.Builder
+  interface Builder {
+    Builder moduleActivity(ActivityModule activityModule);
+    Builder componentApplication(ApplicationComponent component);
+    HomeComponent build();
+  }
 }
diff --git a/examples/android-simple/src/main/java/com/example/dagger/simple/Components.java b/examples/android-simple/src/main/java/com/example/dagger/simple/Components.java
index 85e702a66..624c95874 100644
--- a/examples/android-simple/src/main/java/com/example/dagger/simple/Components.java
+++ b/examples/android-simple/src/main/java/com/example/dagger/simple/Components.java
@@ -13,6 +13,8 @@
         //void inject(DemoApplication1 application);
         void inject(HomeActivity homeActivity);
         void inject(DemoActivity demoActivity);
+        void inject(DemoApplication1 app);
+
         @Component.Builder
         interface Builder {
             Builder androidModule(AndroidModule module);
diff --git a/examples/android-simple/src/main/java/com/example/dagger/simple/DemoApplication1.java b/examples/android-simple/src/main/java/com/example/dagger/simple/DemoApplication1.java
index 12a65a4f9..fec7c8c32 100644
--- a/examples/android-simple/src/main/java/com/example/dagger/simple/DemoApplication1.java
+++ b/examples/android-simple/src/main/java/com/example/dagger/simple/DemoApplication1.java
@@ -16,40 +16,25 @@
 
 package com.example.dagger.simple;
 
-import android.app.Application;
 import android.location.LocationManager;
-import factories.DaggerComponents_ApplicationComponent;
-import injector.Injector;
-import injector.InjectorSpec;
-
 import javax.inject.Inject;
 import javax.inject.Named;
 
-public class DemoApplication1 extends Application implements InjectorSpec{
+public class DemoApplication1 extends DaggerApplication{
 
   @Inject LocationManager locationManager; // for some reason.
   @Inject @Named("apiKey") String someString;
   @Inject @Named("apiKey1") String anotherString;
   private Components.ApplicationComponent component;
- // private Injector injector = new Injector(this);
 
   @Override public void onCreate() {
     super.onCreate();
-    //component = injector.applicationComponent(new AndroidModule(this), new SingletonModule());
-    //component.inject(this);
+    component = getInjector().applicationComponent(new AndroidModule(this));
+    component.inject(this);
   }
 
   public Components.ApplicationComponent component() {
     return component;
   }
 
-  @Override
-  public Components.ApplicationComponent.Builder applicationComponent(Components.ApplicationComponent.Builder builder, AndroidModule androidModule) {
-    return builder.androidModule(androidModule);
-  }
-
-  @Override
-  public Injector getInjector() {
-    return null;
-  }
 }
diff --git a/examples/simple/src/main/java/android/app/Application.java b/examples/simple/src/main/java/android/app/Application.java
new file mode 100644
index 000000000..b6196d26c
--- /dev/null
+++ b/examples/simple/src/main/java/android/app/Application.java
@@ -0,0 +1,9 @@
+package android.app;
+
+public class Application {
+
+    public void onCreate() {
+
+    }
+
+}
diff --git a/examples/simple/src/main/java/coffee/App.java b/examples/simple/src/main/java/coffee/App.java
index 3f329d94d..08390d926 100644
--- a/examples/simple/src/main/java/coffee/App.java
+++ b/examples/simple/src/main/java/coffee/App.java
@@ -1,37 +1,9 @@
 package coffee;
 
-import dagger.Injector;
-import dagger.ProvidesComponent;
-import dagger.ProvidesModule;
-import dagger.ProvidesSubcomponent;
-import factories.DaggerCoffeeApp_Coffee;
-import injector.InjectorSpec;
-
-public class App implements InjectorSpec {
-
-    @Override
-    public CoffeeApp.Bleu2.Builder bleu2(CoffeeApp.Bleu2.Builder builder, BModule bModule) {
-        return builder.someModule(bModule);
-    }
+public class App extends DaggerApplication {
 
     @Override
-    public CoffeeApp.Bleu.Builder bleu(CoffeeApp.Bleu.Builder builder, AModule aModule, BModule bModule) {
-        return builder.moduleA(aModule).moduleB(bModule);
-    }
-
-    @Override
-    public CoffeeApp.Coffee.Builder coffee(CoffeeApp.Coffee.Builder builder, DripCoffeeModule dripCoffeeModule) {
-        return builder.dripCoffeeModule(dripCoffeeModule);
-    }
-
     public void onCreate() {
-
+        super.onCreate();
     }
-
-    @Override
-    public injector.Injector getInjector() {
-        return new injector.Injector(this);
-    }
-
-
 }
diff --git a/examples/simple/src/main/java/coffee/CoffeeApp.java b/examples/simple/src/main/java/coffee/CoffeeApp.java
index bc83db8c4..0116bb75d 100644
--- a/examples/simple/src/main/java/coffee/CoffeeApp.java
+++ b/examples/simple/src/main/java/coffee/CoffeeApp.java
@@ -4,7 +4,6 @@
 import dagger.Module;
 import dagger.ProvidesModule;
 import dagger.Subcomponent;
-import factories.DaggerCoffeeApp_Coffee;
 
 import javax.inject.Named;
 import javax.inject.Singleton;
