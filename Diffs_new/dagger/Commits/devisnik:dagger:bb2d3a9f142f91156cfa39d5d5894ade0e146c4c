diff --git a/BUILD b/BUILD
index be3588f0a..9dcfc2168 100644
--- a/BUILD
+++ b/BUILD
@@ -39,23 +39,6 @@ java_library(
     ],
 )
 
-load("//tools:jarjar.bzl", "jarjar_library")
-
-genrule(
-    name = "rules_file",
-    outs = ["rules_file.txt"],
-    cmd = "echo \"rule com.google.auto.common.** dagger.shaded.auto.common.@1\" > $@",
-)
-
-jarjar_library(
-    name = "shaded_compiler",
-    rules_file = ":rules_file.txt",
-    deps = [
-        "//compiler",
-        "@com_google_auto_auto_common//jar",
-    ],
-)
-
 android_library(
     name = "android",
     exported_plugins = ["//java/dagger/android/processor:plugin"],
@@ -70,6 +53,26 @@ android_library(
     ],
 )
 
+load("//tools:jarjar.bzl", "jarjar_library")
+
+jarjar_library(
+    name = "shaded_compiler",
+    rules_file = "shade_rules.txt",
+    deps = [
+        "//compiler",
+        "@com_google_auto_auto_common//jar",
+    ],
+)
+
+jarjar_library(
+    name = "shaded_android_processor",
+    rules_file = "shade_rules.txt",
+    deps = [
+        "//java/dagger/android/processor",
+        "@com_google_auto_auto_common//jar",
+    ],
+)
+
 load("//tools:javadoc.bzl", "javadoc_library")
 
 # coalesced javadocs used for the gh-pages site
diff --git a/shade_rules.txt b/shade_rules.txt
new file mode 100644
index 000000000..968e53209
--- /dev/null
+++ b/shade_rules.txt
@@ -0,0 +1 @@
+rule com.google.auto.common.** dagger.shaded.auto.common.@1
diff --git a/third_party/BUILD b/third_party/BUILD
index e07597903..4ea8dd35b 100644
--- a/third_party/BUILD
+++ b/third_party/BUILD
@@ -36,7 +36,7 @@ java_library(
 
 java_library(
     name = "error_prone_annotations",
-    tags = ["compile_time_dep"],
+    tags = ["maven:compile_only"],
     exports = ["@com_google_errorprone_error_prone_annotations//jar"],
 )
 
@@ -68,6 +68,7 @@ java_library(
 
 java_library(
     name = "auto_common",
+    tags = ["maven:shaded"],
     exports = ["@com_google_auto_auto_common//jar"],
 )
 
@@ -101,7 +102,7 @@ java_library(
         ":auto_value_processor",
         ":auto_annotation_processor",
     ],
-    tags = ["compile_time_dep"],
+    tags = ["maven:compile_only"],
     exports = [
         ":jsr_250",
         "@com_google_auto_value_auto_value//jar",
@@ -142,7 +143,7 @@ java_plugin(
 java_library(
     name = "auto_service",
     exported_plugins = [":auto_service_processor"],
-    tags = ["compile_time_dep"],
+    tags = ["maven:compile_only"],
     exports = ["@com_google_auto_service_auto_service//jar"],
 )
 
diff --git a/util/execute-deploy.sh b/util/execute-deploy.sh
index fa5fc978c..db530e381 100755
--- a/util/execute-deploy.sh
+++ b/util/execute-deploy.sh
@@ -73,7 +73,7 @@ deploy_library \
   dagger-android-support.pom.xml
 
 deploy_library \
-  java/dagger/android/processor/libprocessor.jar \
+  shaded_android_processor.jar
   java/dagger/android/processor/libprocessor-src.jar \
   java/dagger/android/processor/processor-javadoc.jar \
   dagger-android-processor.pom.xml
diff --git a/util/maven/generate_poms.py b/util/maven/generate_poms.py
index 7254ec46b..ab65551ce 100644
--- a/util/maven/generate_poms.py
+++ b/util/maven/generate_poms.py
@@ -28,8 +28,9 @@ def _shell(command):
 
 def deps_of(label):
   return _shell(
-      """bazel query 'let deps = labels(deps, {0}) in
-      $deps except attr(tags, compile_time_dep, $deps)'""".format(label))
+      """bazel query 'let deps = labels(deps, {0})in $deps
+      except attr(tags, "maven:(compile_only|shaded)", $deps)
+      '""".format(label))
 
 def exports_for(label):
   return _shell('bazel query "labels(exports, %s)"' % label)
@@ -82,8 +83,28 @@ def pom_deps(label):
     },
 }
 
+
+def dependencies_comparator(first, second):
+  if first == second:
+    return 0
+
+  first = first.split(':')
+  second = second.split(':')
+
+  if first[0] == GROUP and second[0] != GROUP:
+    return -1
+  if second[0] == GROUP and first[0] != GROUP:
+    return 1
+
+  # Compare each item in the list: first sort by group, then artifact
+  if first < second:
+    return -1
+  else:
+    return 1
+
 class UnknownDependencyException(Exception): pass
 
+
 def main():
   if len(sys.argv) < 3:
     print 'Usage: %s <version> <target_for_pom>...' % sys.argv[0]
@@ -113,12 +134,9 @@ def artifact_for_dep(label):
   for arg in sys.argv[2:]:
     metadata = METADATA[arg]
     with open('%s.pom.xml' % metadata['artifact'], 'w') as pom_file:
-      pom_file.write(
-          generate_pom(
-              artifacts[arg],
-              metadata,
-              map(artifact_for_dep, pom_deps(arg)),
-              version))
+      deps = map(artifact_for_dep, pom_deps(arg))
+      deps.sort(cmp=dependencies_comparator)
+      pom_file.write(generate_pom(artifacts[arg], metadata, deps, version))
 
 if __name__ == '__main__':
   main()
