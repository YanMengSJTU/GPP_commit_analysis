diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 5c871aaca..3842b7130 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -43,7 +43,6 @@
 
 import java.io.IOException;
 import java.util.EnumSet;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
@@ -237,7 +236,7 @@ private void writeMembersInjectorFields(JavaWriter writer,
     writer.emitEmptyLine();
   }
 
-  private void writeConstructor(final JavaWriter writer,
+  private void writeConstructor(final JavaWriter writer,  
       ImmutableList<FrameworkKey> initializationOrdering,
       ImmutableSetMultimap<Key, ProvisionBinding> resolvedProvisionBindings,
       ImmutableMap<Key, MembersInjectionBinding> resolvedMembersInjectionBindings,
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
index 82a9f343a..7d97374e6 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
@@ -59,6 +59,7 @@
 
   @Override
   public synchronized void init(ProcessingEnvironment processingEnv) {
+    System.out.println("Entering componentprocessor init");
     super.init(processingEnv);
 
     Messager messager = processingEnv.getMessager();
@@ -119,7 +120,9 @@ public synchronized void init(ProcessingEnvironment processingEnv) {
 
   @Override
   public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
+    System.out.println("Entering componentProcessor process");
     for (ProcessingStep processingStep : processingSteps) {
+      System.out.println("Begin to process processingStep: " + processingStep.toString());
       processingStep.process(annotations, roundEnv);
     }
     return false;
diff --git a/compiler/src/main/java/dagger/internal/codegen/Key.java b/compiler/src/main/java/dagger/internal/codegen/Key.java
index 8c82ca3cb..3fc086fd3 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Key.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Key.java
@@ -145,7 +145,7 @@ Key forProvidesMethod(ExecutableElement e) {
         case MAP:
           ImmutableSet<? extends AnnotationMirror> annotationmirrors = getMapKey(e);
           Map<? extends ExecutableElement, ? extends AnnotationValue> map = annotationmirrors.iterator().next().getElementValues();
-          AnnotationValueVisitor<Object, Void> v1 = 
+          AnnotationValueVisitor<Object, Void> mapKeyVisitor = 
               new SimpleAnnotationValueVisitor6<Object, Void>() {
             @Override public TypeElement visitEnumConstant(VariableElement c, Void p) {
               return (TypeElement) c.getEnclosingElement();
@@ -154,7 +154,7 @@ Key forProvidesMethod(ExecutableElement e) {
               return elements.getTypeElement(String.class.getCanonicalName());
             }
           };
-          TypeElement keyTypeElement = (TypeElement) map.entrySet().iterator().next().getValue().accept(v1, null);
+          TypeElement keyTypeElement = (TypeElement) map.entrySet().iterator().next().getValue().accept(mapKeyVisitor, null);
           TypeMirror valueType = types.getDeclaredType(getProviderElement(), returnType);
           TypeMirror mapType = types.getDeclaredType(getMapElement(), keyTypeElement.asType(), valueType);
           return new AutoValue_Key(rewrap(qualifier), MoreTypes.equivalence().wrap(mapType));
diff --git a/core/src/main/java/dagger/internal/MapProviderFactory.java b/core/src/main/java/dagger/internal/MapProviderFactory.java
index 96a480384..cede1d34a 100644
--- a/core/src/main/java/dagger/internal/MapProviderFactory.java
+++ b/core/src/main/java/dagger/internal/MapProviderFactory.java
@@ -4,7 +4,6 @@
 
 import java.util.LinkedHashMap;
 import java.util.Map;
-import java.util.Set;
 
 import javax.inject.Provider;
 
