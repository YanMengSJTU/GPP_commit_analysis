diff --git a/java/dagger/internal/codegen/AbstractComponentWriter.java b/java/dagger/internal/codegen/AbstractComponentWriter.java
index 26ebfdfbf..3046f488e 100644
--- a/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -400,7 +400,9 @@ private void implementInterfaceMethods() {
           } else {
             interfaceMethod.addStatement(
                 "return $L",
-                bindingExpressions.getDependencyExpression(interfaceRequest, name).codeBlock());
+                bindingExpressions
+                    .getComponentMethodExpression(interfaceRequest, name)
+                    .codeBlock());
           }
           interfaceMethods.add(interfaceMethod.build());
         }
diff --git a/java/dagger/internal/codegen/BindingExpression.java b/java/dagger/internal/codegen/BindingExpression.java
index 58506f405..473297338 100644
--- a/java/dagger/internal/codegen/BindingExpression.java
+++ b/java/dagger/internal/codegen/BindingExpression.java
@@ -16,6 +16,7 @@
 
 package dagger.internal.codegen;
 
+import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
 import static dagger.internal.codegen.AnnotationSpecs.Suppression.RAWTYPES;
 import static dagger.internal.codegen.MemberSelect.staticMemberSelect;
@@ -49,6 +50,15 @@ final ResolvedBindings resolvedBindings() {
   abstract Expression getDependencyExpression(
       DependencyRequest.Kind requestKind, ClassName requestingClass);
 
+  /** Returns an expression for the implementation of a component method with the given request. */
+  // TODO(dpb): Consider using ComponentMethodDescriptor instead of DependencyRequest?
+  // TODO(dpb): Consider renaming to getComponentMethodImplementation and include "return ... ;"?
+  Expression getComponentMethodExpression(DependencyRequest request, ClassName requestingClass) {
+    checkArgument(request.bindingKey().equals(resolvedBindings().bindingKey()));
+    // By default, just delegate to #getDependencyExpression().
+    return getDependencyExpression(request.kind(), requestingClass);
+  }
+
   /** Factory for building a {@link BindingExpression}. */
   static final class Factory {
     private final CompilerOptions compilerOptions;
diff --git a/java/dagger/internal/codegen/ComponentBindingExpressions.java b/java/dagger/internal/codegen/ComponentBindingExpressions.java
index 7bb9312f7..11a1bd6e1 100644
--- a/java/dagger/internal/codegen/ComponentBindingExpressions.java
+++ b/java/dagger/internal/codegen/ComponentBindingExpressions.java
@@ -117,6 +117,17 @@ Expression getDependencyArgumentExpression(
     return dependencyExpression;
   }
 
+  /**
+   * Returns an expression for the implementation of a component method with the given request.
+   *
+   * @throws IllegalStateException if there is no binding expression that satisfies the dependency
+   *     request
+   */
+  Expression getComponentMethodExpression(DependencyRequest request, ClassName requestingClass) {
+    return getBindingExpression(request.bindingKey())
+        .getComponentMethodExpression(request, requestingClass);
+  }
+
   private BindingExpression getBindingExpression(BindingKey bindingKey) {
     for (Map<BindingKey, BindingExpression> bindingExpressionsMap : bindingExpressionsMaps) {
       BindingExpression expression = bindingExpressionsMap.get(bindingKey);
diff --git a/java/dagger/internal/codegen/PrivateMethodBindingExpression.java b/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
index 09a4e6bbf..8a77093b4 100644
--- a/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
@@ -20,6 +20,7 @@
 import static com.google.common.base.CaseFormat.LOWER_CAMEL;
 import static com.google.common.base.CaseFormat.UPPER_CAMEL;
 import static com.google.common.base.CaseFormat.UPPER_UNDERSCORE;
+import static com.google.common.base.Preconditions.checkArgument;
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
 import static com.squareup.javapoet.TypeSpec.anonymousClassBuilder;
 import static javax.lang.model.element.Modifier.PRIVATE;
@@ -30,8 +31,10 @@
 import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.TypeName;
 import com.squareup.javapoet.TypeSpec;
+import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
 import java.util.EnumMap;
 import java.util.Map;
+import java.util.Optional;
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.Elements;
@@ -67,14 +70,29 @@
     this.elements = elements;
   }
 
+  @Override
+  Expression getComponentMethodExpression(DependencyRequest request, ClassName requestingClass) {
+    checkArgument(request.bindingKey().equals(resolvedBindings().bindingKey()));
+    return findComponentMethod(request.kind())
+            .map(method -> method.dependencyRequest().get().equals(request))
+            .orElse(false)
+        ? Expression.create(returnType(request.kind()), methodBody(request.kind()))
+        : getDependencyExpression(request.kind(), requestingClass);
+  }
+
   @Override
   Expression getDependencyExpression(
       DependencyRequest.Kind requestKind, ClassName requestingClass) {
-    // TODO(user): we should just use the component method if one matches instead of creating one.
     if (!methodNames.containsKey(requestKind)) {
-      String name = generatedComponentModel.getUniqueMethodName(methodName(requestKind));
+      Optional<ComponentMethodDescriptor> componentMethod = findComponentMethod(requestKind);
+      String name =
+          componentMethod.isPresent()
+              ? componentMethod.get().methodElement().getSimpleName().toString()
+              : generatedComponentModel.getUniqueMethodName(methodName(requestKind));
       methodNames.put(requestKind, name);
-      createMethod(name, requestKind);
+      if (!componentMethod.isPresent()) {
+        createMethod(name, requestKind);
+      }
     }
 
     CodeBlock invocation =
@@ -84,6 +102,29 @@ Expression getDependencyExpression(
     return Expression.create(returnType(requestKind), invocation);
   }
 
+  /** Returns the first component method associated with this request kind, if one exists. */
+  private Optional<ComponentMethodDescriptor> findComponentMethod(
+      DependencyRequest.Kind requestKind) {
+    // There could be multiple component methods with the same request key and kind.
+    // We arbitrarily choose the first one, and designate it to contain the implementation code.
+    return resolvedBindings()
+        .owningComponent()
+        .componentMethods()
+        .stream()
+        .filter(method -> componentMethodMatchesRequestBindingKeyAndKind(method, requestKind))
+        .findFirst();
+  }
+
+  /** Returns true if the component method matches the dependency request binding key and kind. */
+  private boolean componentMethodMatchesRequestBindingKeyAndKind(
+      ComponentMethodDescriptor componentMethod, DependencyRequest.Kind requestKind) {
+    return componentMethod
+        .dependencyRequest()
+        .filter(request -> request.bindingKey().equals(resolvedBindings().bindingKey()))
+        .filter(request -> request.kind().equals(requestKind))
+        .isPresent();
+  }
+
   /** Creates the no-arg method used for dependency expressions. */
   private void createMethod(String name, DependencyRequest.Kind requestKind) {
     // TODO(user): Consider when we can make this method static.
diff --git a/javatests/dagger/internal/codegen/ComponentBuilderTest.java b/javatests/dagger/internal/codegen/ComponentBuilderTest.java
index b152c20b9..53ec28fa8 100644
--- a/javatests/dagger/internal/codegen/ComponentBuilderTest.java
+++ b/javatests/dagger/internal/codegen/ComponentBuilderTest.java
@@ -76,78 +76,37 @@ public void testEmptyBuilder() {
             "     SimpleComponent build();",
             "  }",
             "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerSimpleComponent",
-                "package test;",
-                "",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerSimpleComponent implements SimpleComponent {",
-                "  private DaggerSimpleComponent(Builder builder) {}",
-                "",
-                "  public static SimpleComponent.Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static SimpleComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private SomeInjectableType getSomeInjectableTypeInstance() {",
-                "    return new SomeInjectableType();",
-                "  }",
-                "",
-                "  @Override",
-                "  public SomeInjectableType someInjectableType() {",
-                "    return getSomeInjectableTypeInstance();",
-                "  }",
-                "",
-                "  private static final class Builder implements SimpleComponent.Builder {",
-                "    @Override",
-                "    public SimpleComponent build() {",
-                "      return new DaggerSimpleComponent(this);",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerSimpleComponent",
-                "package test;",
-                "",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerSimpleComponent implements SimpleComponent {",
-                "  private DaggerSimpleComponent(Builder builder) {}",
-                "",
-                "  public static SimpleComponent.Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static SimpleComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public SomeInjectableType someInjectableType() {",
-                "    return new SomeInjectableType();",
-                "  }",
-                "",
-                "  private static final class Builder implements SimpleComponent.Builder {",
-                "    @Override",
-                "    public SimpleComponent build() {",
-                "      return new DaggerSimpleComponent(this);",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerSimpleComponent",
+            "package test;",
+            "",
+            "import javax.annotation.Generated;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerSimpleComponent implements SimpleComponent {",
+            "  private DaggerSimpleComponent(Builder builder) {}",
+            "",
+            "  public static SimpleComponent.Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static SimpleComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public SomeInjectableType someInjectableType() {",
+            "    return new SomeInjectableType();",
+            "  }",
+            "",
+            "  private static final class Builder implements SimpleComponent.Builder {",
+            "    @Override",
+            "    public SimpleComponent build() {",
+            "      return new DaggerSimpleComponent(this);",
+            "    }",
+            "  }",
+            "}");
     Compilation compilation =
         daggerCompiler()
             .withOptions(compilerMode.javacopts())
@@ -190,122 +149,59 @@ public void testUsesBuildAndSetterNames() {
             "    TestComponent create();",
             "  }",
             "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import dagger.internal.Preconditions;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private TestModule testModule;",
-                "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static TestComponent.Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().create();",
-                "  }",
-                "",
-                "  private String getStringInstance() {",
-                "    return Preconditions.checkNotNull(",
-                "        testModule.string()," + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.testModule = builder.testModule;",
-                "  }",
-                "",
-                "  @Override",
-                "  public String string() {",
-                "    return getStringInstance();",
-                "  }",
-                "",
-                "  private static final class Builder implements TestComponent.Builder {",
-                "    private TestModule testModule;",
-                "",
-                "    @Override",
-                "    public TestComponent create() {",
-                "      if (testModule == null) {",
-                "        this.testModule = new TestModule();",
-                "      }",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    @Override",
-                "    public Builder setTestModule(TestModule testModule) {",
-                "      this.testModule = Preconditions.checkNotNull(testModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import dagger.internal.Preconditions;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private TestModule testModule;",
-                "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static TestComponent.Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().create();",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.testModule = builder.testModule;",
-                "  }",
-                "",
-                "  @Override",
-                "  public String string() {",
-                "    return Preconditions.checkNotNull(",
-                "        testModule.string()," + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
-                "  private static final class Builder implements TestComponent.Builder {",
-                "    private TestModule testModule;",
-                "",
-                "    @Override",
-                "    public TestComponent create() {",
-                "      if (testModule == null) {",
-                "        this.testModule = new TestModule();",
-                "      }",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    @Override",
-                "    public Builder setTestModule(TestModule testModule) {",
-                "      this.testModule = Preconditions.checkNotNull(testModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerTestComponent",
+            "package test;",
+            "",
+            "import dagger.internal.Preconditions;",
+            "import javax.annotation.Generated;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerTestComponent implements TestComponent {",
+            "  private TestModule testModule;",
+            "",
+            "  private DaggerTestComponent(Builder builder) {",
+            "    initialize(builder);",
+            "  }",
+            "",
+            "  public static TestComponent.Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static TestComponent create() {",
+            "    return new Builder().create();",
+            "  }",
+            "",
+            "  @SuppressWarnings(\"unchecked\")",
+            "  private void initialize(final Builder builder) {",
+            "    this.testModule = builder.testModule;",
+            "  }",
+            "",
+            "  @Override",
+            "  public String string() {",
+            "    return Preconditions.checkNotNull(",
+            "        testModule.string()," + NPE_FROM_PROVIDES_METHOD + ");",
+            "  }",
+            "",
+            "  private static final class Builder implements TestComponent.Builder {",
+            "    private TestModule testModule;",
+            "",
+            "    @Override",
+            "    public TestComponent create() {",
+            "      if (testModule == null) {",
+            "        this.testModule = new TestModule();",
+            "      }",
+            "      return new DaggerTestComponent(this);",
+            "    }",
+            "",
+            "    @Override",
+            "    public Builder setTestModule(TestModule testModule) {",
+            "      this.testModule = Preconditions.checkNotNull(testModule);",
+            "      return this;",
+            "    }",
+            "  }",
+            "}");
     Compilation compilation =
         daggerCompiler().withOptions(compilerMode.javacopts()).compile(moduleFile, componentFile);
     assertThat(compilation).succeeded();
@@ -359,150 +255,71 @@ public void testIgnoresModulesNotInApi() {
             "    TestComponent build();",
             "  }",
             "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import dagger.internal.Preconditions;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private TestModule1 testModule1;",
-                "  private TestModule2 testModule2;",
-                "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static TestComponent.Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private String getStringInstance() {",
-                "    return Preconditions.checkNotNull(",
-                "        testModule1.string()," + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
-                "  private Integer getIntegerInstance() {",
-                "    return Preconditions.checkNotNull(",
-                "        testModule2.integer()," + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.testModule1 = builder.testModule1;",
-                "    this.testModule2 = builder.testModule2;",
-                "  }",
-                "",
-                "  @Override",
-                "  public String string() {",
-                "    return getStringInstance();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Integer integer() {",
-                "    return getIntegerInstance();",
-                "  }",
-                "",
-                "  private static final class Builder implements TestComponent.Builder {",
-                "    private TestModule1 testModule1;",
-                "    private TestModule2 testModule2;",
-                "",
-                "    @Override",
-                "    public TestComponent build() {",
-                "      if (testModule1 == null) {",
-                "        this.testModule1 = new TestModule1();",
-                "      }",
-                "      if (testModule2 == null) {",
-                "        this.testModule2 = new TestModule2();",
-                "      }",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    @Override",
-                "    public Builder testModule1(TestModule1 testModule1) {",
-                "      this.testModule1 = Preconditions.checkNotNull(testModule1);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import dagger.internal.Preconditions;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private TestModule1 testModule1;",
-                "  private TestModule2 testModule2;",
-                "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static TestComponent.Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.testModule1 = builder.testModule1;",
-                "    this.testModule2 = builder.testModule2;",
-                "  }",
-                "",
-                "  @Override",
-                "  public String string() {",
-                "    return Preconditions.checkNotNull(",
-                "        testModule1.string()," + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
-                "  @Override",
-                "  public Integer integer() {",
-                "    return Preconditions.checkNotNull(",
-                "        testModule2.integer()," + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
-                "  private static final class Builder implements TestComponent.Builder {",
-                "    private TestModule1 testModule1;",
-                "    private TestModule2 testModule2;",
-                "",
-                "    @Override",
-                "    public TestComponent build() {",
-                "      if (testModule1 == null) {",
-                "        this.testModule1 = new TestModule1();",
-                "      }",
-                "      if (testModule2 == null) {",
-                "        this.testModule2 = new TestModule2();",
-                "      }",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    @Override",
-                "    public Builder testModule1(TestModule1 testModule1) {",
-                "      this.testModule1 = Preconditions.checkNotNull(testModule1);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerTestComponent",
+            "package test;",
+            "",
+            "import dagger.internal.Preconditions;",
+            "import javax.annotation.Generated;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerTestComponent implements TestComponent {",
+            "  private TestModule1 testModule1;",
+            "  private TestModule2 testModule2;",
+            "",
+            "  private DaggerTestComponent(Builder builder) {",
+            "    initialize(builder);",
+            "  }",
+            "",
+            "  public static TestComponent.Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static TestComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @SuppressWarnings(\"unchecked\")",
+            "  private void initialize(final Builder builder) {",
+            "    this.testModule1 = builder.testModule1;",
+            "    this.testModule2 = builder.testModule2;",
+            "  }",
+            "",
+            "  @Override",
+            "  public String string() {",
+            "    return Preconditions.checkNotNull(",
+            "        testModule1.string()," + NPE_FROM_PROVIDES_METHOD + ");",
+            "  }",
+            "",
+            "  @Override",
+            "  public Integer integer() {",
+            "    return Preconditions.checkNotNull(",
+            "        testModule2.integer()," + NPE_FROM_PROVIDES_METHOD + ");",
+            "  }",
+            "",
+            "  private static final class Builder implements TestComponent.Builder {",
+            "    private TestModule1 testModule1;",
+            "    private TestModule2 testModule2;",
+            "",
+            "    @Override",
+            "    public TestComponent build() {",
+            "      if (testModule1 == null) {",
+            "        this.testModule1 = new TestModule1();",
+            "      }",
+            "      if (testModule2 == null) {",
+            "        this.testModule2 = new TestModule2();",
+            "      }",
+            "      return new DaggerTestComponent(this);",
+            "    }",
+            "",
+            "    @Override",
+            "    public Builder testModule1(TestModule1 testModule1) {",
+            "      this.testModule1 = Preconditions.checkNotNull(testModule1);",
+            "      return this;",
+            "    }",
+            "  }",
+            "}");
     Compilation compilation =
         daggerCompiler()
             .withOptions(compilerMode.javacopts())
diff --git a/javatests/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
index d92a7b115..bf4784cb1 100644
--- a/javatests/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
@@ -298,36 +298,24 @@ public void componentWithInvalidModule() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private SomeInjectableType getSomeInjectableTypeInstance() {",
-                "    return new SomeInjectableType();",
-                "  }",
-                "",
-                "  private Provider<SomeInjectableType> getSomeInjectableTypeProvider() {",
-                "    return new Provider<SomeInjectableType>() {",
-                "      @Override",
-                "      public SomeInjectableType get() {",
-                "        return getSomeInjectableTypeInstance();",
-                "      }",
-                "    };",
-                "  }",
-                "",
-                "  private Lazy<SomeInjectableType> getSomeInjectableTypeLazy() {",
-                "    return DoubleCheck.lazy(getSomeInjectableTypeProvider());",
-                "  }",
-                "",
                 "  @Override",
                 "  public SomeInjectableType someInjectableType() {",
-                "    return getSomeInjectableTypeInstance();",
+                "    return new SomeInjectableType();",
                 "  }",
                 "",
                 "  @Override",
                 "  public Lazy<SomeInjectableType> lazySomeInjectableType() {",
-                "    return getSomeInjectableTypeLazy();",
+                "    return DoubleCheck.lazy(someInjectableTypeProvider());",
                 "  }",
                 "",
                 "  @Override",
                 "  public Provider<SomeInjectableType> someInjectableTypeProvider() {",
-                "    return getSomeInjectableTypeProvider();",
+                "    return new Provider<SomeInjectableType>() {",
+                "      @Override",
+                "      public SomeInjectableType get() {",
+                "        return someInjectableType();",
+                "      }",
+                "    };",
                 "  }",
                 "",
                 "  public static final class Builder {",
@@ -532,13 +520,9 @@ public void componentWithInvalidModule() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private OuterType.A getAInstance() {",
-                "    return new OuterType.A();",
-                "  }",
-                "",
                 "  @Override",
                 "  public OuterType.A a() {",
-                "    return getAInstance();",
+                "    return new OuterType.A();",
                 "  }",
                 "",
                 "  @Override",
@@ -548,7 +532,7 @@ public void componentWithInvalidModule() {
                 "",
                 "  @CanIgnoreReturnValue",
                 "  private OuterType.B injectB(OuterType.B instance) {",
-                "    OuterType_B_MembersInjector.injectA(instance, getAInstance());",
+                "    OuterType_B_MembersInjector.injectA(instance, a());",
                 "    return instance;",
                 "  }",
                 "",
@@ -696,10 +680,6 @@ public void componentWithInvalidModule() {
                 "        testModule.b(getCInstance()), " + NPE_FROM_PROVIDES_METHOD + ");",
                 "  }",
                 "",
-                "  private A getAInstance() {",
-                "    return new A(getBInstance());",
-                "  }",
-                "",
                 "  @SuppressWarnings(\"unchecked\")",
                 "  private void initialize(final Builder builder) {",
                 "    this.testModule = builder.testModule;",
@@ -707,7 +687,7 @@ public void componentWithInvalidModule() {
                 "",
                 "  @Override",
                 "  public A a() {",
-                "    return getAInstance();",
+                "    return new A(getBInstance());",
                 "  }",
                 "",
                 "  public static final class Builder {",
@@ -879,13 +859,9 @@ public void componentWithAbstractModule() {
                 "        TestModule.b(getCInstance()), " + NPE_FROM_PROVIDES_METHOD + ");",
                 "  }",
                 "",
-                "  private A getAInstance() {",
-                "    return new A(getBInstance());",
-                "  }",
-                "",
                 "  @Override",
                 "  public A a() {",
-                "    return getAInstance();",
+                "    return new A(getBInstance());",
                 "  }",
                 "",
                 "  public static final class Builder {",
@@ -1210,98 +1186,48 @@ public void subcomponentNotGeneratedIfNotUsedInGraph() {
             "  }",
             "}");
 
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerParent",
-                "package test;",
-                "",
-                "import dagger.internal.Preconditions;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerParent implements Parent {",
-                "  private DaggerParent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static Parent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private String getStringInstance() {",
-                "    return Preconditions.checkNotNull(",
-                "        ParentModule.notSubcomponent(), " + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
-                "  @Override",
-                "  public String notSubcomponent() {",
-                "    return getStringInstance();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public Parent build() {",
-                "      return new DaggerParent(this);",
-                "    }",
-                "",
-                "    @Deprecated",
-                "    public Builder parentModule(ParentModule parentModule) {",
-                "      Preconditions.checkNotNull(parentModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerParent",
-                "package test;",
-                "",
-                "import dagger.internal.Preconditions;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerParent implements Parent {",
-                "",
-                "  private DaggerParent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static Parent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public String notSubcomponent() {",
-                "    return Preconditions.checkNotNull(",
-                "        ParentModule.notSubcomponent(), " + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "",
-                "    private Builder() {}",
-                "",
-                "    public Parent build() {",
-                "      return new DaggerParent(this);",
-                "    }",
-                "",
-                "    @Deprecated",
-                "    public Builder parentModule(ParentModule parentModule) {",
-                "      Preconditions.checkNotNull(parentModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerParent",
+            "package test;",
+            "",
+            "import dagger.internal.Preconditions;",
+            "import javax.annotation.Generated;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerParent implements Parent {",
+            "",
+            "  private DaggerParent(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static Parent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public String notSubcomponent() {",
+            "    return Preconditions.checkNotNull(",
+            "        ParentModule.notSubcomponent(), " + NPE_FROM_PROVIDES_METHOD + ");",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "",
+            "    private Builder() {}",
+            "",
+            "    public Parent build() {",
+            "      return new DaggerParent(this);",
+            "    }",
+            "",
+            "    @Deprecated",
+            "    public Builder parentModule(ParentModule parentModule) {",
+            "      Preconditions.checkNotNull(parentModule);",
+            "      return this;",
+            "    }",
+            "  }",
+            "}");
     Compilation compilation =
         daggerCompiler()
             .withOptions(compilerMode.javacopts())
@@ -1506,6 +1432,92 @@ public void testDefaultPackage() {
         "  SomeInjectableType someInjectableType();",
         "  Provider<SimpleComponent> selfProvider();",
         "}");
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerSimpleComponent",
+            "package test;",
+            "",
+            "import dagger.internal.InstanceFactory;",
+            "import javax.annotation.Generated;",
+            "import javax.inject.Provider;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerSimpleComponent implements SimpleComponent {",
+            "  private Provider<SimpleComponent> simpleComponentProvider;",
+            "",
+            "  private DaggerSimpleComponent(Builder builder) {",
+            "    initialize(builder);",
+            "  }",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static SimpleComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @SuppressWarnings(\"unchecked\")",
+            "  private void initialize(final Builder builder) {",
+            "    this.simpleComponentProvider = InstanceFactory.<SimpleComponent>create(this);",
+            "  }",
+            "",
+            "  @Override",
+            "  public SomeInjectableType someInjectableType() {",
+            "    return new SomeInjectableType(this)",
+            "  }",
+            "",
+            "  @Override",
+            "  public Provider<SimpleComponent> selfProvider() {",
+            "    return simpleComponentProvider;",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {",
+            "    }",
+            "",
+            "    public SimpleComponent build() {",
+            "      return new DaggerSimpleComponent(this);",
+            "    }",
+            "  }",
+            "}");
+    Compilation compilation =
+        daggerCompiler()
+            .withOptions(compilerMode.javacopts())
+            .compile(injectableTypeFile, componentFile);
+    assertThat(compilation).succeeded();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerSimpleComponent")
+        .hasSourceEquivalentTo(generatedComponent);
+  }
+
+  @Test public void membersInjectionInsideProvision() {
+    JavaFileObject injectableTypeFile = JavaFileObjects.forSourceLines("test.SomeInjectableType",
+        "package test;",
+        "",
+        "import javax.inject.Inject;",
+        "",
+        "final class SomeInjectableType {",
+        "  @Inject SomeInjectableType() {}",
+        "}");
+    JavaFileObject injectedTypeFile = JavaFileObjects.forSourceLines("test.SomeInjectedType",
+        "package test;",
+        "",
+        "import javax.inject.Inject;",
+        "",
+        "final class SomeInjectedType {",
+        "  @Inject SomeInjectableType injectedField;",
+        "  @Inject SomeInjectedType() {}",
+        "}");
+    JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
+        "package test;",
+        "",
+        "import dagger.Component;",
+        "",
+        "@Component",
+        "interface SimpleComponent {",
+        "  SomeInjectedType createAndInject();",
+        "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
       case EXPERIMENTAL_ANDROID:
@@ -1514,17 +1526,12 @@ public void testDefaultPackage() {
                 "test.DaggerSimpleComponent",
                 "package test;",
                 "",
-                "import dagger.internal.InstanceFactory;",
+                "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
                 "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
                 "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerSimpleComponent implements SimpleComponent {",
-                "  private Provider<SimpleComponent> simpleComponentProvider;",
-                "",
-                "  private DaggerSimpleComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
+                "  private DaggerSimpleComponent(Builder builder) {}",
                 "",
                 "  public static Builder builder() {",
                 "    return new Builder();",
@@ -1535,22 +1542,20 @@ public void testDefaultPackage() {
                 "  }",
                 "",
                 "  private SomeInjectableType getSomeInjectableTypeInstance() {",
-                "    return new SomeInjectableType(this);",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.simpleComponentProvider = InstanceFactory.<SimpleComponent>create(this);",
+                "    return new SomeInjectableType();",
                 "  }",
                 "",
                 "  @Override",
-                "  public SomeInjectableType someInjectableType() {",
-                "    return getSomeInjectableTypeInstance();",
+                "  public SomeInjectedType createAndInject() {",
+                "    return injectSomeInjectedType(",
+                "        SomeInjectedType_Factory.newSomeInjectedType());",
                 "  }",
                 "",
-                "  @Override",
-                "  public Provider<SimpleComponent> selfProvider() {",
-                "    return simpleComponentProvider;",
+                "  @CanIgnoreReturnValue",
+                "  private SomeInjectedType injectSomeInjectedType(SomeInjectedType instance) {",
+                "    SomeInjectedType_MembersInjector.injectInjectedField(",
+                "        instance, getSomeInjectableTypeInstance());",
+                "    return instance;",
                 "  }",
                 "",
                 "  public static final class Builder {",
@@ -1568,17 +1573,12 @@ public void testDefaultPackage() {
                 "test.DaggerSimpleComponent",
                 "package test;",
                 "",
-                "import dagger.internal.InstanceFactory;",
+                "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
                 "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
                 "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerSimpleComponent implements SimpleComponent {",
-                "  private Provider<SimpleComponent> simpleComponentProvider;",
-                "",
-                "  private DaggerSimpleComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
+                "  private DaggerSimpleComponent(Builder builder) {}",
                 "",
                 "  public static Builder builder() {",
                 "    return new Builder();",
@@ -1588,153 +1588,17 @@ public void testDefaultPackage() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.simpleComponentProvider = InstanceFactory.<SimpleComponent>create(this);",
-                "  }",
-                "",
                 "  @Override",
-                "  public SomeInjectableType someInjectableType() {",
-                "    return new SomeInjectableType(this)",
+                "  public SomeInjectedType createAndInject() {",
+                "    return injectSomeInjectedType(",
+                "        SomeInjectedType_Factory.newSomeInjectedType());",
                 "  }",
                 "",
-                "  @Override",
-                "  public Provider<SimpleComponent> selfProvider() {",
-                "    return simpleComponentProvider;",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {",
-                "    }",
-                "",
-                "    public SimpleComponent build() {",
-                "      return new DaggerSimpleComponent(this);",
-                "    }",
-                "  }",
-                "}");
-    }
-    Compilation compilation =
-        daggerCompiler()
-            .withOptions(compilerMode.javacopts())
-            .compile(injectableTypeFile, componentFile);
-    assertThat(compilation).succeeded();
-    assertThat(compilation)
-        .generatedSourceFile("test.DaggerSimpleComponent")
-        .hasSourceEquivalentTo(generatedComponent);
-  }
-
-  @Test public void membersInjectionInsideProvision() {
-    JavaFileObject injectableTypeFile = JavaFileObjects.forSourceLines("test.SomeInjectableType",
-        "package test;",
-        "",
-        "import javax.inject.Inject;",
-        "",
-        "final class SomeInjectableType {",
-        "  @Inject SomeInjectableType() {}",
-        "}");
-    JavaFileObject injectedTypeFile = JavaFileObjects.forSourceLines("test.SomeInjectedType",
-        "package test;",
-        "",
-        "import javax.inject.Inject;",
-        "",
-        "final class SomeInjectedType {",
-        "  @Inject SomeInjectableType injectedField;",
-        "  @Inject SomeInjectedType() {}",
-        "}");
-    JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.SimpleComponent",
-        "package test;",
-        "",
-        "import dagger.Component;",
-        "",
-        "@Component",
-        "interface SimpleComponent {",
-        "  SomeInjectedType createAndInject();",
-        "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerSimpleComponent",
-                "package test;",
-                "",
-                "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerSimpleComponent implements SimpleComponent {",
-                "  private DaggerSimpleComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static SimpleComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private SomeInjectableType getSomeInjectableTypeInstance() {",
-                "    return new SomeInjectableType();",
-                "  }",
-                "",
-                "  private SomeInjectedType getSomeInjectedTypeInstance() {",
-                "    return injectSomeInjectedType(",
-                "        SomeInjectedType_Factory.newSomeInjectedType());",
-                "  }",
-                "",
-                "  @Override",
-                "  public SomeInjectedType createAndInject() {",
-                "    return getSomeInjectedTypeInstance();",
-                "  }",
-                "",
-                "  @CanIgnoreReturnValue",
-                "  private SomeInjectedType injectSomeInjectedType(SomeInjectedType instance) {",
-                "    SomeInjectedType_MembersInjector.injectInjectedField(",
-                "        instance, getSomeInjectableTypeInstance());",
-                "    return instance;",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public SimpleComponent build() {",
-                "      return new DaggerSimpleComponent(this);",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerSimpleComponent",
-                "package test;",
-                "",
-                "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerSimpleComponent implements SimpleComponent {",
-                "  private DaggerSimpleComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static SimpleComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public SomeInjectedType createAndInject() {",
-                "    return injectSomeInjectedType(",
-                "        SomeInjectedType_Factory.newSomeInjectedType());",
-                "  }",
-                "",
-                "  @CanIgnoreReturnValue",
-                "  private SomeInjectedType injectSomeInjectedType(SomeInjectedType instance) {",
-                "    SomeInjectedType_MembersInjector.injectInjectedField(",
-                "        instance, new SomeInjectableType());",
-                "    return instance;",
+                "  @CanIgnoreReturnValue",
+                "  private SomeInjectedType injectSomeInjectedType(SomeInjectedType instance) {",
+                "    SomeInjectedType_MembersInjector.injectInjectedField(",
+                "        instance, new SomeInjectableType());",
+                "    return instance;",
                 "  }",
                 "",
                 "  public static final class Builder {",
@@ -1780,81 +1644,39 @@ public void testDefaultPackage() {
         "interface SimpleComponent {",
         "  SomeInjectableType someInjectableType();",
         "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerSimpleComponent",
-                "package test;",
-                "",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerSimpleComponent implements SimpleComponent {",
-                "  private DaggerSimpleComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static SimpleComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private SomeInjectableType getSomeInjectableTypeInstance() {",
-                "    return new SomeInjectableType();",
-                "  }",
-                "",
-                "  @Override",
-                "  public SomeInjectableType someInjectableType() {",
-                "    return getSomeInjectableTypeInstance();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public SimpleComponent build() {",
-                "      return new DaggerSimpleComponent(this);",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerSimpleComponent",
-                "package test;",
-                "",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerSimpleComponent implements SimpleComponent {",
-                "  private DaggerSimpleComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static SimpleComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public SomeInjectableType someInjectableType() {",
-                "    return new SomeInjectableType();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {",
-                "    }",
-                "",
-                "    public SimpleComponent build() {",
-                "      return new DaggerSimpleComponent(this);",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerSimpleComponent",
+            "package test;",
+            "",
+            "import javax.annotation.Generated;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerSimpleComponent implements SimpleComponent {",
+            "  private DaggerSimpleComponent(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static SimpleComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public SomeInjectableType someInjectableType() {",
+            "    return new SomeInjectableType();",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {",
+            "    }",
+            "",
+            "    public SimpleComponent build() {",
+            "      return new DaggerSimpleComponent(this);",
+            "    }",
+            "  }",
+            "}");
     Compilation compilation =
         daggerCompiler()
             .withOptions(compilerMode.javacopts())
@@ -1901,145 +1723,71 @@ public void testDefaultPackage() {
         "interface BComponent {",
         "  B b();",
         "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerBComponent",
-                "package test;",
-                "",
-                "import dagger.internal.Preconditions;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerBComponent implements BComponent {",
-                "  private Provider<A> aProvider;",
-                "",
-                "  private DaggerBComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  private B getBInstance() {",
-                "    return new B(aProvider);",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.aProvider = new test_AComponent_a(builder.aComponent);",
-                "  }",
-                "",
-                "  @Override",
-                "  public B b() {",
-                "    return getBInstance();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private AComponent aComponent;",
-                "",
-                "    private Builder() {}",
-                "",
-                "    public BComponent build() {",
-                "      if (aComponent == null) {",
-                "        throw new IllegalStateException(AComponent.class.getCanonicalName()",
-                "            + \" must be set\");",
-                "      }",
-                "      return new DaggerBComponent(this);",
-                "    }",
-                "",
-                "    public Builder aComponent(AComponent aComponent) {",
-                "      this.aComponent = Preconditions.checkNotNull(aComponent);",
-                "      return this;",
-                "    }",
-                "  }",
-                "",
-                "  private static class test_AComponent_a implements Provider<A> {",
-                "    private final AComponent aComponent;",
-                "",
-                "    test_AComponent_a(AComponent aComponent) {",
-                "      this.aComponent = aComponent;",
-                "    }",
-                "",
-                "    @Override",
-                "    public A get() {",
-                "      return Preconditions.checkNotNull(",
-                "          aComponent.a(), " + NPE_FROM_COMPONENT_METHOD + ");",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerBComponent",
-                "package test;",
-                "",
-                "import dagger.internal.Preconditions;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerBComponent implements BComponent {",
-                "  private Provider<A> aProvider;",
-                "",
-                "  private DaggerBComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.aProvider = new test_AComponent_a(builder.aComponent);",
-                "  }",
-                "",
-                "  @Override",
-                "  public B b() {",
-                "    return new B(aProvider);",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private AComponent aComponent;",
-                "",
-                "    private Builder() {",
-                "    }",
-                "",
-                "    public BComponent build() {",
-                "      if (aComponent == null) {",
-                "        throw new IllegalStateException(AComponent.class.getCanonicalName()",
-                "            + \" must be set\");",
-                "      }",
-                "      return new DaggerBComponent(this);",
-                "    }",
-                "",
-                "    public Builder aComponent(AComponent aComponent) {",
-                "      this.aComponent = Preconditions.checkNotNull(aComponent);",
-                "      return this;",
-                "    }",
-                "  }",
-                "",
-                "  private static class test_AComponent_a implements Provider<A> {",
-                "    private final AComponent aComponent;",
-                "    ",
-                "    test_AComponent_a(AComponent aComponent) {",
-                "        this.aComponent = aComponent;",
-                "    }",
-                "    ",
-                "    @Override()",
-                "    public A get() {",
-                "      return Preconditions.checkNotNull(",
-                "          aComponent.a(), " + NPE_FROM_COMPONENT_METHOD + ");",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerBComponent",
+            "package test;",
+            "",
+            "import dagger.internal.Preconditions;",
+            "import javax.annotation.Generated;",
+            "import javax.inject.Provider;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerBComponent implements BComponent {",
+            "  private Provider<A> aProvider;",
+            "",
+            "  private DaggerBComponent(Builder builder) {",
+            "    initialize(builder);",
+            "  }",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  @SuppressWarnings(\"unchecked\")",
+            "  private void initialize(final Builder builder) {",
+            "    this.aProvider = new test_AComponent_a(builder.aComponent);",
+            "  }",
+            "",
+            "  @Override",
+            "  public B b() {",
+            "    return new B(aProvider);",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private AComponent aComponent;",
+            "",
+            "    private Builder() {",
+            "    }",
+            "",
+            "    public BComponent build() {",
+            "      if (aComponent == null) {",
+            "        throw new IllegalStateException(AComponent.class.getCanonicalName()",
+            "            + \" must be set\");",
+            "      }",
+            "      return new DaggerBComponent(this);",
+            "    }",
+            "",
+            "    public Builder aComponent(AComponent aComponent) {",
+            "      this.aComponent = Preconditions.checkNotNull(aComponent);",
+            "      return this;",
+            "    }",
+            "  }",
+            "",
+            "  private static class test_AComponent_a implements Provider<A> {",
+            "    private final AComponent aComponent;",
+            "    ",
+            "    test_AComponent_a(AComponent aComponent) {",
+            "        this.aComponent = aComponent;",
+            "    }",
+            "    ",
+            "    @Override()",
+            "    public A get() {",
+            "      return Preconditions.checkNotNull(",
+            "          aComponent.a(), " + NPE_FROM_COMPONENT_METHOD + ");",
+            "    }",
+            "  }",
+            "}");
     Compilation compilation =
         daggerCompiler()
             .withOptions(compilerMode.javacopts())
@@ -2092,169 +1840,80 @@ public void testDefaultPackage() {
         "  A a();",
         "  other.test.A otherA();",
         "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import dagger.internal.Preconditions;",
-                "import javax.annotation.Generated;",
-                "import other.test.TestModule_AFactory;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private TestModule testModule;",
-                "",
-                "  private other.test.TestModule testModule2;",
-                "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private A getAInstance() {",
-                "    return Preconditions.checkNotNull(",
-                "        testModule.a(), " + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
-                "  private other.test.A getAInstance2() {",
-                "    return Preconditions.checkNotNull(",
-                "        TestModule_AFactory.proxyA(testModule2),"
-                    + NPE_FROM_PROVIDES_METHOD
-                    + ");",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.testModule = builder.testModule;",
-                "    this.testModule2 = builder.testModule2;",
-                "  }",
-                "",
-                "  @Override",
-                "  public A a() {",
-                "    return getAInstance();",
-                "  }",
-                "",
-                "  @Override",
-                "  public other.test.A otherA() {",
-                "    return getAInstance2();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private TestModule testModule;",
-                "",
-                "    private other.test.TestModule testModule2;",
-                "",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      if (testModule == null) {",
-                "        this.testModule = new TestModule();",
-                "      }",
-                "      if (testModule2 == null) {",
-                "        this.testModule2 = new other.test.TestModule();",
-                "      }",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    public Builder testModule(TestModule testModule) {",
-                "      this.testModule = Preconditions.checkNotNull(testModule);",
-                "      return this;",
-                "    }",
-                "",
-                "    public Builder testModule(other.test.TestModule testModule) {",
-                "      this.testModule2 = Preconditions.checkNotNull(testModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import dagger.internal.Preconditions;",
-                "import javax.annotation.Generated;",
-                "import other.test.TestModule_AFactory;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private TestModule testModule;",
-                "  private other.test.TestModule testModule2;",
-                "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.testModule = builder.testModule;",
-                "    this.testModule2 = builder.testModule2;",
-                "  }",
-                "",
-                "  @Override",
-                "  public A a() {",
-                "    return Preconditions.checkNotNull(",
-                "        testModule.a(), " + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
-                "  @Override",
-                "  public other.test.A otherA() {",
-                "    return Preconditions.checkNotNull(",
-                "        TestModule_AFactory.proxyA(testModule2), "
-                    + NPE_FROM_PROVIDES_METHOD
-                    + ");",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private TestModule testModule;",
-                "    private other.test.TestModule testModule2;",
-                "",
-                "    private Builder() {",
-                "    }",
-                "",
-                "    public TestComponent build() {",
-                "      if (testModule == null) {",
-                "        this.testModule = new TestModule();",
-                "      }",
-                "      if (testModule2 == null) {",
-                "        this.testModule2 = new other.test.TestModule();",
-                "      }",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    public Builder testModule(TestModule testModule) {",
-                "      this.testModule = Preconditions.checkNotNull(testModule);",
-                "      return this;",
-                "    }",
-                "",
-                "    public Builder testModule(other.test.TestModule testModule) {",
-                "      this.testModule2 = Preconditions.checkNotNull(testModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerTestComponent",
+            "package test;",
+            "",
+            "import dagger.internal.Preconditions;",
+            "import javax.annotation.Generated;",
+            "import other.test.TestModule_AFactory;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerTestComponent implements TestComponent {",
+            "  private TestModule testModule;",
+            "  private other.test.TestModule testModule2;",
+            "",
+            "  private DaggerTestComponent(Builder builder) {",
+            "    initialize(builder);",
+            "  }",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static TestComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @SuppressWarnings(\"unchecked\")",
+            "  private void initialize(final Builder builder) {",
+            "    this.testModule = builder.testModule;",
+            "    this.testModule2 = builder.testModule2;",
+            "  }",
+            "",
+            "  @Override",
+            "  public A a() {",
+            "    return Preconditions.checkNotNull(",
+            "        testModule.a(), " + NPE_FROM_PROVIDES_METHOD + ");",
+            "  }",
+            "",
+            "  @Override",
+            "  public other.test.A otherA() {",
+            "    return Preconditions.checkNotNull(",
+            "        TestModule_AFactory.proxyA(testModule2), "
+                + NPE_FROM_PROVIDES_METHOD
+                + ");",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private TestModule testModule;",
+            "    private other.test.TestModule testModule2;",
+            "",
+            "    private Builder() {",
+            "    }",
+            "",
+            "    public TestComponent build() {",
+            "      if (testModule == null) {",
+            "        this.testModule = new TestModule();",
+            "      }",
+            "      if (testModule2 == null) {",
+            "        this.testModule2 = new other.test.TestModule();",
+            "      }",
+            "      return new DaggerTestComponent(this);",
+            "    }",
+            "",
+            "    public Builder testModule(TestModule testModule) {",
+            "      this.testModule = Preconditions.checkNotNull(testModule);",
+            "      return this;",
+            "    }",
+            "",
+            "    public Builder testModule(other.test.TestModule testModule) {",
+            "      this.testModule2 = Preconditions.checkNotNull(testModule);",
+            "      return this;",
+            "    }",
+            "  }",
+            "}");
     Compilation compilation =
         daggerCompiler()
             .withOptions(compilerMode.javacopts())
@@ -2333,35 +1992,22 @@ public void testDefaultPackage() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private C getCInstance() {",
-                "    return new C();",
-                "  }",
-                "",
                 "  private B getBInstance() {",
-                "    return new B(getCInstance());",
-                "  }",
-                "",
-                "  private A getAInstance() {",
-                "    return new A(getBInstance());",
-                "  }",
-                "",
-                "  private X getXInstance() {",
-                "    return new X(getCInstance());",
+                "    return new B(c());",
                 "  }",
-                "",
                 "  @Override",
                 "  public A a() {",
-                "    return getAInstance();",
+                "    return new A(getBInstance());",
                 "  }",
                 "",
                 "  @Override",
                 "  public C c() {",
-                "    return getCInstance();",
+                "    return new C();",
                 "  }",
                 "",
                 "  @Override",
                 "  public X x() {",
-                "    return getXInstance();",
+                "    return new X(c());",
                 "  }",
                 "",
                 "  public static final class Builder {",
@@ -2469,80 +2115,38 @@ public void testDefaultPackage() {
         "@Component",
         "interface SimpleComponent extends SupertypeA, SupertypeB {",
         "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerSimpleComponent",
-                "package test;",
-                "",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerSimpleComponent implements SimpleComponent {",
-                "  private DaggerSimpleComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static SimpleComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private SomeInjectableType getSomeInjectableTypeInstance() {",
-                "    return new SomeInjectableType();",
-                "  }",
-                "",
-                "  @Override",
-                "  public SomeInjectableType someInjectableType() {",
-                "    return getSomeInjectableTypeInstance();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public SimpleComponent build() {",
-                "      return new DaggerSimpleComponent(this);",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerSimpleComponent",
-                "package test;",
-                "",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerSimpleComponent implements SimpleComponent {",
-                "  private DaggerSimpleComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static SimpleComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public SomeInjectableType someInjectableType() {",
-                "    return new SomeInjectableType();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public SimpleComponent build() {",
-                "      return new DaggerSimpleComponent(this);",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerSimpleComponent",
+            "package test;",
+            "",
+            "import javax.annotation.Generated;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerSimpleComponent implements SimpleComponent {",
+            "  private DaggerSimpleComponent(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static SimpleComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public SomeInjectableType someInjectableType() {",
+            "    return new SomeInjectableType();",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {}",
+            "",
+            "    public SimpleComponent build() {",
+            "      return new DaggerSimpleComponent(this);",
+            "    }",
+            "  }",
+            "}");
     Compilation compilation =
         daggerCompiler()
             .withOptions(compilerMode.javacopts())
@@ -2598,81 +2202,39 @@ public void testDefaultPackage() {
         "interface ComponentWithDep {",
         "  SomeInjectableType someInjectableType();",
         "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerSimpleComponent",
-                "package test;",
-                "",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerSimpleComponent implements SimpleComponent {",
-                "  private DaggerSimpleComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static SimpleComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private SomeInjectableType getSomeInjectableTypeInstance() {",
-                "    return new SomeInjectableType();",
-                "  }",
-                "",
-                "  @Override",
-                "  public SomeInjectableType someInjectableType() {",
-                "    return getSomeInjectableTypeInstance();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public SimpleComponent build() {",
-                "      return new DaggerSimpleComponent(this);",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerSimpleComponent",
-                "package test;",
-                "",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerSimpleComponent implements SimpleComponent {",
-                "  private DaggerSimpleComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static SimpleComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public SomeInjectableType someInjectableType() {",
-                "    return new SomeInjectableType();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {",
-                "    }",
-                "",
-                "    public SimpleComponent build() {",
-                "      return new DaggerSimpleComponent(this);",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerSimpleComponent",
+            "package test;",
+            "",
+            "import javax.annotation.Generated;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerSimpleComponent implements SimpleComponent {",
+            "  private DaggerSimpleComponent(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static SimpleComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public SomeInjectableType someInjectableType() {",
+            "    return new SomeInjectableType();",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {",
+            "    }",
+            "",
+            "    public SimpleComponent build() {",
+            "      return new DaggerSimpleComponent(this);",
+            "    }",
+            "  }",
+            "}");
     Compilation compilation =
         daggerCompiler()
             .withOptions(compilerMode.javacopts())
@@ -3496,14 +3058,10 @@ public void nullIncorrectlyReturnedFromNonNullableInlinedProvider() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private String getStringInstance() {",
-                "    return Preconditions.checkNotNull(",
-                "        TestModule.nonNullableString(), " + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
                 "  @Override",
                 "  public String nonNullableString() {",
-                "    return getStringInstance();",
+                "    return Preconditions.checkNotNull(",
+                "        TestModule.nonNullableString(), " + NPE_FROM_PROVIDES_METHOD + ");",
                 "  }",
                 "",
                 "  @Override",
@@ -3513,7 +3071,7 @@ public void nullIncorrectlyReturnedFromNonNullableInlinedProvider() {
                 "",
                 "  @CanIgnoreReturnValue",
                 "  private InjectsMember injectInjectsMember(InjectsMember instance) {",
-                "    InjectsMember_MembersInjector.injectMember(instance, getStringInstance());",
+                "    InjectsMember_MembersInjector.injectMember(instance, nonNullableString());",
                 "    return instance;",
                 "  }",
                 "",
@@ -3671,13 +3229,9 @@ public void nullCheckingIgnoredWhenProviderReturnsPrimitive() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private int getIntegerInstance() {",
-                "    return TestModule.primitiveInteger();",
-                "  }",
-                "",
                 "  @Override",
                 "  public Integer nonNullableInteger() {",
-                "    return getIntegerInstance();",
+                "    return TestModule.primitiveInteger();",
                 "  }",
                 "",
                 "  @Override",
@@ -3687,7 +3241,7 @@ public void nullCheckingIgnoredWhenProviderReturnsPrimitive() {
                 "",
                 "  @CanIgnoreReturnValue",
                 "  private InjectsMember injectInjectsMember(InjectsMember instance) {",
-                "    InjectsMember_MembersInjector.injectMember(instance, getIntegerInstance());",
+                "    InjectsMember_MembersInjector.injectMember(instance, nonNullableInteger());",
                 "    return instance;",
                 "  }",
                 "",
diff --git a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
index 9613e4104..73a19ad62 100644
--- a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
+++ b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
@@ -186,160 +186,76 @@ public void instanceModuleMethod() {
             .withOptions(compilerMode.javacopts())
             .compile(module, otherPackageModule, component);
     assertThat(compilation).succeeded();
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import dagger.internal.Preconditions;",
-                "import javax.annotation.Generated;",
-                "import other.OtherPackageModule;",
-                "import other.OtherPackageModule_LFactory;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private ParentModule parentModule;",
-                "  private OtherPackageModule otherPackageModule;",
-                "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private int getIntegerInstance() {",
-                "    return parentModule.i();",
-                "  }",
-                "",
-                "  private long getLongInstance() {",
-                "    return OtherPackageModule_LFactory.proxyL(otherPackageModule);",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.parentModule = builder.parentModule;",
-                "    this.otherPackageModule = builder.otherPackageModule;",
-                "  }",
-                "",
-                "  @Override",
-                "  public int i() {",
-                "    return getIntegerInstance();",
-                "  }",
-                "",
-                "  @Override",
-                "  public long l() {",
-                "    return getLongInstance();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private ParentModule parentModule;",
-                "    private OtherPackageModule otherPackageModule;",
-                "",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      if (parentModule == null) {",
-                "        this.parentModule = new ParentModule();",
-                "      }",
-                "      if (otherPackageModule == null) {",
-                "        this.otherPackageModule = new OtherPackageModule();",
-                "      }",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    public Builder parentModule(ParentModule parentModule) {",
-                "      this.parentModule = Preconditions.checkNotNull(parentModule);",
-                "      return this;",
-                "    }",
-                "",
-                "    public Builder otherPackageModule(OtherPackageModule otherPackageModule) {",
-                "      this.otherPackageModule = Preconditions.checkNotNull(otherPackageModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import dagger.internal.Preconditions;",
-                "import javax.annotation.Generated;",
-                "import other.OtherPackageModule;",
-                "import other.OtherPackageModule_LFactory;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private ParentModule parentModule;",
-                "  private OtherPackageModule otherPackageModule;",
-                "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.parentModule = builder.parentModule;",
-                "    this.otherPackageModule = builder.otherPackageModule;",
-                "  }",
-                "",
-                "  @Override",
-                "  public int i() {",
-                "    return parentModule.i();",
-                "  }",
-                "",
-                "  @Override",
-                "  public long l() {",
-                "    return OtherPackageModule_LFactory.proxyL(otherPackageModule);",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private ParentModule parentModule;",
-                "    private OtherPackageModule otherPackageModule;",
-                "",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      if (parentModule == null) {",
-                "        this.parentModule = new ParentModule();",
-                "      }",
-                "      if (otherPackageModule == null) {",
-                "        this.otherPackageModule = new OtherPackageModule();",
-                "      }",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    public Builder parentModule(ParentModule parentModule) {",
-                "      this.parentModule = Preconditions.checkNotNull(parentModule);",
-                "      return this;",
-                "    }",
-                "",
-                "    public Builder otherPackageModule(OtherPackageModule otherPackageModule) {",
-                "      this.otherPackageModule = Preconditions.checkNotNull(otherPackageModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerTestComponent",
+            "package test;",
+            "",
+            "import dagger.internal.Preconditions;",
+            "import javax.annotation.Generated;",
+            "import other.OtherPackageModule;",
+            "import other.OtherPackageModule_LFactory;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerTestComponent implements TestComponent {",
+            "  private ParentModule parentModule;",
+            "  private OtherPackageModule otherPackageModule;",
+            "",
+            "  private DaggerTestComponent(Builder builder) {",
+            "    initialize(builder);",
+            "  }",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static TestComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @SuppressWarnings(\"unchecked\")",
+            "  private void initialize(final Builder builder) {",
+            "    this.parentModule = builder.parentModule;",
+            "    this.otherPackageModule = builder.otherPackageModule;",
+            "  }",
+            "",
+            "  @Override",
+            "  public int i() {",
+            "    return parentModule.i();",
+            "  }",
+            "",
+            "  @Override",
+            "  public long l() {",
+            "    return OtherPackageModule_LFactory.proxyL(otherPackageModule);",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private ParentModule parentModule;",
+            "    private OtherPackageModule otherPackageModule;",
+            "",
+            "    private Builder() {}",
+            "",
+            "    public TestComponent build() {",
+            "      if (parentModule == null) {",
+            "        this.parentModule = new ParentModule();",
+            "      }",
+            "      if (otherPackageModule == null) {",
+            "        this.otherPackageModule = new OtherPackageModule();",
+            "      }",
+            "      return new DaggerTestComponent(this);",
+            "    }",
+            "",
+            "    public Builder parentModule(ParentModule parentModule) {",
+            "      this.parentModule = Preconditions.checkNotNull(parentModule);",
+            "      return this;",
+            "    }",
+            "",
+            "    public Builder otherPackageModule(OtherPackageModule otherPackageModule) {",
+            "      this.otherPackageModule = Preconditions.checkNotNull(otherPackageModule);",
+            "      return this;",
+            "    }",
+            "  }",
+            "}");
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
         .hasSourceEquivalentTo(generatedComponent);
@@ -583,15 +499,6 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "        " + NPE_FROM_PROVIDES_METHOD + ");",
                 "  }",
                 "",
-                "  private Provider<Object> getObjectProvider() {",
-                "    return new Provider<Object>() {",
-                "      @Override",
-                "      public Object get() {",
-                "        return getObjectInstance();",
-                "      }",
-                "    };",
-                "  }",
-                "",
                 "  @SuppressWarnings(\"unchecked\")",
                 "  private void initialize(final Builder builder) {",
                 "    this.parentModule = builder.parentModule;",
@@ -599,7 +506,12 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "",
                 "  @Override",
                 "  public Provider<Object> dependsOnMultibinding() {",
-                "    return getObjectProvider();",
+                "    return new Provider<Object>() {",
+                "      @Override",
+                "      public Object get() {",
+                "        return getObjectInstance();",
+                "      }",
+                "    };",
                 "  }",
                 "",
                 "  @Override",
@@ -646,7 +558,8 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "          " + NPE_FROM_PROVIDES_METHOD + ");",
                 "    }",
                 "",
-                "    private Provider<Object> getObjectProvider() {",
+                "    @Override",
+                "    public Provider<Object> dependsOnMultibinding() {",
                 "      return new Provider<Object>() {",
                 "        @Override",
                 "        public Object get() {",
@@ -654,11 +567,6 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "        }",
                 "      };",
                 "    }",
-                "",
-                "    @Override",
-                "    public Provider<Object> dependsOnMultibinding() {",
-                "      return getObjectProvider();",
-                "    }",
                 "  }",
                 "}");
         break;
diff --git a/javatests/dagger/internal/codegen/ElidedFactoriesTest.java b/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
index 9278d0378..2727502b6 100644
--- a/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
+++ b/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
@@ -102,13 +102,9 @@ public void simpleComponent() {
                 "    return new InjectedType();",
                 "  }",
                 "",
-                "  private DependsOnInjected getDependsOnInjectedInstance() {",
-                "    return new DependsOnInjected(getInjectedTypeInstance());",
-                "  }",
-                "",
                 "  @Override",
                 "  public DependsOnInjected dependsOnInjected() {",
-                "    return getDependsOnInjectedInstance();",
+                "    return new DependsOnInjected(getInjectedTypeInstance());",
                 "  }",
                 "",
                 "  public static final class Builder {",
@@ -257,10 +253,6 @@ public void simpleComponent_injectsProviderOf_dependsOnScoped() {
                 "    };",
                 "  }",
                 "",
-                "  private NeedsProvider getNeedsProviderInstance() {",
-                "    return new NeedsProvider(getDependsOnScopedProvider());",
-                "  }",
-                "",
                 "  @SuppressWarnings(\"unchecked\")",
                 "  private void initialize(final Builder builder) {",
                 "    this.scopedTypeProvider = DoubleCheck.provider(ScopedType_Factory.create());",
@@ -268,7 +260,7 @@ public void simpleComponent_injectsProviderOf_dependsOnScoped() {
                 "",
                 "  @Override",
                 "  public NeedsProvider needsProvider() {",
-                "    return getNeedsProviderInstance();",
+                "    return new NeedsProvider(getDependsOnScopedProvider());",
                 "  }",
                 "",
                 "  public static final class Builder {",
@@ -438,14 +430,10 @@ public void scopedBinding_onlyUsedInSubcomponent() {
                 "  private final class SubImpl implements Sub {",
                 "    private SubImpl() {}",
                 "",
-                "    private DependsOnScoped getDependsOnScopedInstance() {",
-                "      return new DependsOnScoped(",
-                "          DaggerSimpleComponent.this.scopedTypeProvider.get());",
-                "    }",
-                "",
                 "    @Override",
                 "    public DependsOnScoped dependsOnScoped() {",
-                "      return getDependsOnScopedInstance();",
+                "      return new DependsOnScoped(",
+                "          DaggerSimpleComponent.this.scopedTypeProvider.get());",
                 "    }",
                 "  }",
                 "}");
diff --git a/javatests/dagger/internal/codegen/InaccessibleTypeTest.java b/javatests/dagger/internal/codegen/InaccessibleTypeTest.java
index c338e05f3..1f82d6f0d 100644
--- a/javatests/dagger/internal/codegen/InaccessibleTypeTest.java
+++ b/javatests/dagger/internal/codegen/InaccessibleTypeTest.java
@@ -127,18 +127,14 @@ public InaccessibleTypeTest(CompilerMode compilerMode) {
                 "    return NonPublicClass2_Factory.newNonPublicClass2(getNoDepClassInstance());",
                 "  }",
                 "",
-                "  private PublicClass getPublicClassInstance() {",
+                "  @Override",
+                "  public PublicClass publicClass() {",
                 "    return PublicClass_Factory.newPublicClass(",
                 "        getNonPublicClass1Instance(), ",
                 "        getNonPublicClass2Instance(), ",
                 "        getNoDepClassInstance());",
                 "  }",
                 "",
-                "  @Override",
-                "  public PublicClass publicClass() {",
-                "    return getPublicClassInstance();",
-                "  }",
-                "",
                 "  public static final class Builder {",
                 "    private Builder() {}",
                 "",
diff --git a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index 4299abdc9..214513499 100644
--- a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -1464,125 +1464,61 @@ public void injectMapWithoutMapBinding() {
         "interface TestComponent {",
         "  Map<String, String> dispatcher();",
         "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private MapModule mapModule;",
-                "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private Map<String, String> getMapOfStringAndStringInstance() {",
-                "    return Preconditions.checkNotNull(",
-                "        mapModule.provideAMap(), " + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.mapModule = builder.mapModule;",
-                "  }",
-                "",
-                "  @Override",
-                "  public Map<String, String> dispatcher() {",
-                "    return getMapOfStringAndStringInstance();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private MapModule mapModule;",
-                "",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      if (mapModule == null) {",
-                "        this.mapModule = new MapModule();",
-                "      }",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    public Builder mapModule(MapModule mapModule) {",
-                "      this.mapModule = Preconditions.checkNotNull(mapModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private MapModule mapModule;",
-                "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.mapModule = builder.mapModule;",
-                "  }",
-                "",
-                "  @Override",
-                "  public Map<String, String> dispatcher() {",
-                "    return Preconditions.checkNotNull(",
-                "        mapModule.provideAMap(), " + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private MapModule mapModule;",
-                "",
-                "    private Builder() {",
-                "    }",
-                "",
-                "    public TestComponent build() {",
-                "      if (mapModule == null) {",
-                "        this.mapModule = new MapModule();",
-                "      }",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    public Builder mapModule(MapModule mapModule) {",
-                "      this.mapModule = Preconditions.checkNotNull(mapModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerTestComponent",
+            "package test;",
+            "",
+            "import dagger.internal.Preconditions;",
+            "import java.util.Map;",
+            "import javax.annotation.Generated;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerTestComponent implements TestComponent {",
+            "  private MapModule mapModule;",
+            "",
+            "  private DaggerTestComponent(Builder builder) {",
+            "    initialize(builder);",
+            "  }",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static TestComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @SuppressWarnings(\"unchecked\")",
+            "  private void initialize(final Builder builder) {",
+            "    this.mapModule = builder.mapModule;",
+            "  }",
+            "",
+            "  @Override",
+            "  public Map<String, String> dispatcher() {",
+            "    return Preconditions.checkNotNull(",
+            "        mapModule.provideAMap(), " + NPE_FROM_PROVIDES_METHOD + ");",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private MapModule mapModule;",
+            "",
+            "    private Builder() {",
+            "    }",
+            "",
+            "    public TestComponent build() {",
+            "      if (mapModule == null) {",
+            "        this.mapModule = new MapModule();",
+            "      }",
+            "      return new DaggerTestComponent(this);",
+            "    }",
+            "",
+            "    public Builder mapModule(MapModule mapModule) {",
+            "      this.mapModule = Preconditions.checkNotNull(mapModule);",
+            "      return this;",
+            "    }",
+            "  }",
+            "}");
     assertAbout(javaSources())
         .that(ImmutableList.of(mapModuleFile, componentFile))
         .withCompilerOptions(compilerMode.javacopts())
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
index 061b39b13..1e7c745ad 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
@@ -341,90 +341,43 @@ public void inaccessible() {
             "interface TestComponent {",
             "  UsesInaccessible usesInaccessible();",
             "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import java.util.Collections;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "import other.UsesInaccessible;",
-                "import other.UsesInaccessible_Factory;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private UsesInaccessible getUsesInaccessibleInstance() {",
-                "    return UsesInaccessible_Factory.newUsesInaccessible(",
-                "        (Map) Collections.emptyMap());",
-                "  }",
-                "",
-                "  @Override",
-                "  public UsesInaccessible usesInaccessible() {",
-                "    return getUsesInaccessibleInstance();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import java.util.Collections;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "import other.UsesInaccessible;",
-                "import other.UsesInaccessible_Factory;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public UsesInaccessible usesInaccessible() {",
-                "    return UsesInaccessible_Factory.newUsesInaccessible(",
-                "        (Map) Collections.emptyMap());",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerTestComponent",
+            "package test;",
+            "",
+            "import java.util.Collections;",
+            "import java.util.Map;",
+            "import javax.annotation.Generated;",
+            "import other.UsesInaccessible;",
+            "import other.UsesInaccessible_Factory;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerTestComponent implements TestComponent {",
+            "  private DaggerTestComponent(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static TestComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public UsesInaccessible usesInaccessible() {",
+            "    return UsesInaccessible_Factory.newUsesInaccessible(",
+            "        (Map) Collections.emptyMap());",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {}",
+            "",
+            "    public TestComponent build() {",
+            "      return new DaggerTestComponent(this);",
+            "    }",
+            "  }",
+            "}");
     Compilation compilation =
         daggerCompilerWithoutGuava().compile(module, inaccessible, usesInaccessible, componentFile);
     assertThat(compilation).succeeded();
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
index 6eadd389f..d5cea7ba4 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
@@ -512,88 +512,42 @@ public void inaccessible() {
             "interface TestComponent {",
             "  UsesInaccessible usesInaccessible();",
             "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.common.collect.ImmutableMap;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "import other.UsesInaccessible;",
-                "import other.UsesInaccessible_Factory;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private UsesInaccessible getUsesInaccessibleInstance() {",
-                "    return UsesInaccessible_Factory.newUsesInaccessible((Map) ImmutableMap.of());",
-                "  }",
-                "",
-                "  @Override",
-                "  public UsesInaccessible usesInaccessible() {",
-                "    return getUsesInaccessibleInstance();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.common.collect.ImmutableMap;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "import other.UsesInaccessible;",
-                "import other.UsesInaccessible_Factory;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public UsesInaccessible usesInaccessible() {",
-                "    return UsesInaccessible_Factory.newUsesInaccessible((Map) ImmutableMap.of());",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerTestComponent",
+            "package test;",
+            "",
+            "import com.google.common.collect.ImmutableMap;",
+            "import java.util.Map;",
+            "import javax.annotation.Generated;",
+            "import other.UsesInaccessible;",
+            "import other.UsesInaccessible_Factory;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerTestComponent implements TestComponent {",
+            "  private DaggerTestComponent(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static TestComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public UsesInaccessible usesInaccessible() {",
+            "    return UsesInaccessible_Factory.newUsesInaccessible((Map) ImmutableMap.of());",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {}",
+            "",
+            "    public TestComponent build() {",
+            "      return new DaggerTestComponent(this);",
+            "    }",
+            "  }",
+            "}");
     Compilation compilation =
         daggerCompiler()
             .withOptions(compilerMode.javacopts())
diff --git a/javatests/dagger/internal/codegen/MembersInjectionTest.java b/javatests/dagger/internal/codegen/MembersInjectionTest.java
index 4100bdcea..e72aeee10 100644
--- a/javatests/dagger/internal/codegen/MembersInjectionTest.java
+++ b/javatests/dagger/internal/codegen/MembersInjectionTest.java
@@ -81,81 +81,39 @@ public void parentClass_noInjectedMembers() {
         "interface TestComponent {",
         "  Child child();",
         "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private Child getChildInstance() {",
-                "    return new Child();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Child child() {",
-                "    return getChildInstance();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Child child() {",
-                "    return new Child();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {",
-                "    }",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerTestComponent",
+            "package test;",
+            "",
+            "import javax.annotation.Generated;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerTestComponent implements TestComponent {",
+            "  private DaggerTestComponent(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static TestComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public Child child() {",
+            "    return new Child();",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {",
+            "    }",
+            "",
+            "    public TestComponent build() {",
+            "      return new DaggerTestComponent(this);",
+            "    }",
+            "  }",
+            "}");
     assertAbout(javaSources())
         .that(ImmutableList.of(childFile, parentFile, componentFile))
         .withCompilerOptions(compilerMode.javacopts())
@@ -227,13 +185,9 @@ public void parentClass_injectedMembersInSupertype() {
                 "    return new Dep();",
                 "  }",
                 "",
-                "  private Child getChildInstance() {",
-                "    return injectChild(Child_Factory.newChild());",
-                "  }",
-                "",
                 "  @Override",
                 "  public Child child() {",
-                "    return getChildInstance();",
+                "    return injectChild(Child_Factory.newChild());",
                 "  }",
                 "",
                 "  @CanIgnoreReturnValue",
@@ -1414,14 +1368,10 @@ public void accessibility() {
                 "    return injectInaccessible(Inaccessible_Factory.newInaccessible());",
                 "  }",
                 "",
-                "  private UsesInaccessible getUsesInaccessibleInstance() {",
-                "    return UsesInaccessible_Factory.newUsesInaccessible(",
-                "        getInaccessibleInstance());",
-                "  }",
-                "",
                 "  @Override",
                 "  public UsesInaccessible usesInaccessible() {",
-                "    return getUsesInaccessibleInstance();",
+                "    return UsesInaccessible_Factory.newUsesInaccessible(",
+                "        getInaccessibleInstance());",
                 "  }",
                 "",
                 // TODO(ronshapiro): if possible, it would be great to rename "instance", but we
@@ -1559,151 +1509,74 @@ public void accessibleRawType_ofInaccessibleType() {
             .withOptions(compilerMode.javacopts())
             .compile(inaccessible, inaccessiblesModule, usesInaccessibles, component);
     assertThat(compilation).succeeded();
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "other.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-                "import dagger.internal.DoubleCheck;",
-                "import dagger.internal.Preconditions;",
-                "import java.util.List;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "import other.InaccessiblesModule;",
-                "import other.InaccessiblesModule_InaccessiblesFactory;",
-                "import other.UsesInaccessibles;",
-                "import other.UsesInaccessibles_Factory;",
-                "import other.UsesInaccessibles_MembersInjector;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  @SuppressWarnings(\"rawtypes\")",
-                "  private Provider inaccessiblesProvider;",
-                "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private UsesInaccessibles getUsesInaccessiblesInstance() {",
-                "    return injectUsesInaccessibles(",
-                "        UsesInaccessibles_Factory.newUsesInaccessibles());",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.inaccessiblesProvider =",
-                "        DoubleCheck.provider(InaccessiblesModule_InaccessiblesFactory.create());",
-                "  }",
-                "",
-                "  @Override",
-                "  public UsesInaccessibles usesInaccessibles() {",
-                "    return getUsesInaccessiblesInstance();",
-                "  }",
-                "",
-                "  @CanIgnoreReturnValue",
-                "  private UsesInaccessibles injectUsesInaccessibles(UsesInaccessibles instance) {",
-                "    UsesInaccessibles_MembersInjector.injectInaccessibles(",
-                "        instance, (List) inaccessiblesProvider.get());",
-                "    return instance;",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    @Deprecated",
-                "    public Builder inaccessiblesModule(InaccessiblesModule inaccessiblesModule) {",
-                "      Preconditions.checkNotNull(inaccessiblesModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "other.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-                "import dagger.internal.DoubleCheck;",
-                "import dagger.internal.Preconditions;",
-                "import java.util.List;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "import other.InaccessiblesModule;",
-                "import other.InaccessiblesModule_InaccessiblesFactory;",
-                "import other.UsesInaccessibles;",
-                "import other.UsesInaccessibles_Factory;",
-                "import other.UsesInaccessibles_MembersInjector;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  @SuppressWarnings(\"rawtypes\")",
-                "  private Provider inaccessiblesProvider;",
-                "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.inaccessiblesProvider =",
-                "        DoubleCheck.provider(InaccessiblesModule_InaccessiblesFactory.create());",
-                "  }",
-                "",
-                "  @Override",
-                "  public UsesInaccessibles usesInaccessibles() {",
-                "    return injectUsesInaccessibles(",
-                "        UsesInaccessibles_Factory.newUsesInaccessibles());",
-                "  }",
-                "",
-                "  @CanIgnoreReturnValue",
-                "  private UsesInaccessibles injectUsesInaccessibles(",
-                "        UsesInaccessibles instance) {",
-                "    UsesInaccessibles_MembersInjector.injectInaccessibles(",
-                "        instance, (List) inaccessiblesProvider.get());",
-                "    return instance;",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    @Deprecated",
-                "    public Builder inaccessiblesModule(InaccessiblesModule inaccessiblesModule) {",
-                "      Preconditions.checkNotNull(inaccessiblesModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "other.DaggerTestComponent",
+            "package test;",
+            "",
+            "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
+            "import dagger.internal.DoubleCheck;",
+            "import dagger.internal.Preconditions;",
+            "import java.util.List;",
+            "import javax.annotation.Generated;",
+            "import javax.inject.Provider;",
+            "import other.InaccessiblesModule;",
+            "import other.InaccessiblesModule_InaccessiblesFactory;",
+            "import other.UsesInaccessibles;",
+            "import other.UsesInaccessibles_Factory;",
+            "import other.UsesInaccessibles_MembersInjector;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerTestComponent implements TestComponent {",
+            "  @SuppressWarnings(\"rawtypes\")",
+            "  private Provider inaccessiblesProvider;",
+            "",
+            "  private DaggerTestComponent(Builder builder) {",
+            "    initialize(builder);",
+            "  }",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static TestComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @SuppressWarnings(\"unchecked\")",
+            "  private void initialize(final Builder builder) {",
+            "    this.inaccessiblesProvider =",
+            "        DoubleCheck.provider(InaccessiblesModule_InaccessiblesFactory.create());",
+            "  }",
+            "",
+            "  @Override",
+            "  public UsesInaccessibles usesInaccessibles() {",
+            "    return injectUsesInaccessibles(",
+            "        UsesInaccessibles_Factory.newUsesInaccessibles());",
+            "  }",
+            "",
+            "  @CanIgnoreReturnValue",
+            "  private UsesInaccessibles injectUsesInaccessibles(",
+            "        UsesInaccessibles instance) {",
+            "    UsesInaccessibles_MembersInjector.injectInaccessibles(",
+            "        instance, (List) inaccessiblesProvider.get());",
+            "    return instance;",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {}",
+            "",
+            "    public TestComponent build() {",
+            "      return new DaggerTestComponent(this);",
+            "    }",
+            "",
+            "    @Deprecated",
+            "    public Builder inaccessiblesModule(InaccessiblesModule inaccessiblesModule) {",
+            "      Preconditions.checkNotNull(inaccessiblesModule);",
+            "      return this;",
+            "    }",
+            "  }",
+            "}");
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
         .hasSourceEquivalentTo(generatedComponent);
@@ -1805,13 +1678,9 @@ public void publicSupertypeHiddenSubtype() {
                 "    return injectSubtype(Subtype_Factory.newSubtype());",
                 "  }",
                 "",
-                "  private InjectsSubtype getInjectsSubtypeInstance() {",
-                "    return InjectsSubtype_Factory.newInjectsSubtype(getSubtypeInstance());",
-                "  }",
-                "",
                 "  @Override",
                 "  public InjectsSubtype injectsSubtype() {",
-                "    return getInjectsSubtypeInstance();",
+                "    return InjectsSubtype_Factory.newInjectsSubtype(getSubtypeInstance());",
                 "  }",
                 "",
                 "  @CanIgnoreReturnValue",
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
index 32348e69a..5fc1dad3f 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
@@ -316,7 +316,8 @@ public void inaccessible() {
                 "        " + NPE_FROM_PROVIDES + ");",
                 "  }",
                 "",
-                "  private UsesInaccessible getUsesInaccessibleInstance() {",
+                "  @Override",
+                "  public UsesInaccessible usesInaccessible() {",
                 "    return UsesInaccessible_Factory.newUsesInaccessible(",
                 "        (Set) Collections.emptySet(),",
                 "        (Set) SetBuilder.newSetBuilder(1)",
@@ -324,11 +325,6 @@ public void inaccessible() {
                 "            .build());",
                 "  }",
                 "",
-                "  @Override",
-                "  public UsesInaccessible usesInaccessible() {",
-                "    return getUsesInaccessibleInstance();",
-                "  }",
-                "",
                 "  public static final class Builder {",
                 "    private Builder() {}",
                 "",
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
index 6926ab023..2b1947990 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
@@ -337,17 +337,13 @@ public void inaccessible() {
                 "        " + NPE_FROM_PROVIDES + ");",
                 "  }",
                 "",
-                "  private UsesInaccessible getUsesInaccessibleInstance() {",
+                "  @Override",
+                "  public UsesInaccessible usesInaccessible() {",
                 "    return UsesInaccessible_Factory.newUsesInaccessible(",
                 "        (Set) ImmutableSet.of(),",
                 "        (Set) ImmutableSet.copyOf(getSetOfInaccessible2Instance()));",
                 "  }",
                 "",
-                "  @Override",
-                "  public UsesInaccessible usesInaccessible() {",
-                "    return getUsesInaccessibleInstance();",
-                "  }",
-                "",
                 "  public static final class Builder {",
                 "    private Builder() {}",
                 "",
diff --git a/javatests/dagger/internal/codegen/SubcomponentBuilderRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/SubcomponentBuilderRequestFulfillmentTest.java
index 4284b5b18..6705212b8 100644
--- a/javatests/dagger/internal/codegen/SubcomponentBuilderRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/SubcomponentBuilderRequestFulfillmentTest.java
@@ -81,112 +81,54 @@ public void testInlinedSubcomponentBuilders_componentMethod() {
             "  UsesSubcomponent usesSubcomponent();",
             "}");
 
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerC",
-                "package test;",
-                "",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerC implements C {",
-                "  private DaggerC(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static C create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private UsesSubcomponent getUsesSubcomponentInstance() {",
-                "    return new UsesSubcomponent(new SubBuilder());",
-                "  }",
-                "",
-                "  @Override",
-                "  public Sub.Builder sBuilder() {",
-                "    return new SubBuilder();",
-                "  }",
-                "",
-                "  @Override",
-                "  public UsesSubcomponent usesSubcomponent() {",
-                "    return getUsesSubcomponentInstance();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public C build() {",
-                "      return new DaggerC(this);",
-                "    }",
-                "  }",
-                "",
-                "  private final class SubBuilder implements Sub.Builder {",
-                "    @Override",
-                "    public Sub build() {",
-                "      return new SubImpl(this);",
-                "    }",
-                "  }",
-                "",
-                "  private final class SubImpl implements Sub {",
-                "    private SubImpl(SubBuilder builder) {}",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerC",
-                "package test;",
-                "",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerC implements C {",
-                "  private DaggerC(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static C create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Sub.Builder sBuilder() {",
-                "    return new SubBuilder();",
-                "  }",
-                "",
-                "  @Override",
-                "  public UsesSubcomponent usesSubcomponent() {",
-                "    return new UsesSubcomponent(new SubBuilder());",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public C build() {",
-                "      return new DaggerC(this);",
-                "    }",
-                "  }",
-                "",
-                "  private final class SubBuilder implements Sub.Builder {",
-                "    @Override",
-                "    public Sub build() {",
-                "      return new SubImpl(this);",
-                "    }",
-                "  }",
-                "",
-                "  private final class SubImpl implements Sub {",
-                "    private SubImpl(SubBuilder builder) {}",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerC",
+            "package test;",
+            "",
+            "import javax.annotation.Generated;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerC implements C {",
+            "  private DaggerC(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static C create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public Sub.Builder sBuilder() {",
+            "    return new SubBuilder();",
+            "  }",
+            "",
+            "  @Override",
+            "  public UsesSubcomponent usesSubcomponent() {",
+            "    return new UsesSubcomponent(new SubBuilder());",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {}",
+            "",
+            "    public C build() {",
+            "      return new DaggerC(this);",
+            "    }",
+            "  }",
+            "",
+            "  private final class SubBuilder implements Sub.Builder {",
+            "    @Override",
+            "    public Sub build() {",
+            "      return new SubImpl(this);",
+            "    }",
+            "  }",
+            "",
+            "  private final class SubImpl implements Sub {",
+            "    private SubImpl(SubBuilder builder) {}",
+            "  }",
+            "}");
 
     Compilation compilation =
         daggerCompiler()
diff --git a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
index 94ba7f33b..b5fe1dd72 100644
--- a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
+++ b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
@@ -463,17 +463,13 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
                 "              DaggerParentComponent.this.dep2Provider.get()));",
                 "    }",
                 "",
-                "    private Object getObjectInstance() {",
+                "    @Override",
+                "    public Object getObject() {",
                 "      return Preconditions.checkNotNull(",
                 "          childModule.provideObject(getAInstance()),",
                 "          " + NPE_FROM_PROVIDES_METHOD + ");",
                 "    }",
                 "",
-                "    @Override",
-                "    public Object getObject() {",
-                "      return getObjectInstance();",
-                "    }",
-                "",
                 "    @CanIgnoreReturnValue",
                 "    private A injectA(A instance) {",
                 "      A_MembersInjector.injectMethodA(instance);",
