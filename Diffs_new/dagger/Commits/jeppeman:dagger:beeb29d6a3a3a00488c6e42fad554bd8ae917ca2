diff --git a/java/dagger/internal/codegen/ModuleValidator.java b/java/dagger/internal/codegen/ModuleValidator.java
index f12dffbe7..cf235283f 100644
--- a/java/dagger/internal/codegen/ModuleValidator.java
+++ b/java/dagger/internal/codegen/ModuleValidator.java
@@ -16,6 +16,7 @@
 
 package dagger.internal.codegen;
 
+import static com.google.auto.common.AnnotationMirrors.getAnnotatedAnnotations;
 import static com.google.auto.common.MoreElements.isAnnotationPresent;
 import static com.google.auto.common.Visibility.PRIVATE;
 import static com.google.auto.common.Visibility.PUBLIC;
@@ -71,6 +72,7 @@
 import java.util.Optional;
 import java.util.Set;
 import javax.inject.Inject;
+import javax.inject.Scope;
 import javax.inject.Singleton;
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.AnnotationValue;
@@ -211,6 +213,7 @@ void addKnownModules(Collection<TypeElement> modules) {
     validateModifiers(module, builder);
     validateReferencedModules(module, moduleKind, builder);
     validateReferencedSubcomponents(module, moduleKind, builder);
+    validateNoScopeAnnotationsOnModuleElement(module, moduleKind, builder);
 
     return builder.build();
   }
@@ -490,6 +493,20 @@ private void validateModuleVisibility(
     }
   }
 
+  private void validateNoScopeAnnotationsOnModuleElement(
+      TypeElement module,
+      ModuleDescriptor.Kind moduleKind,
+      ValidationReport.Builder<TypeElement> report) {
+    for (AnnotationMirror scope : getAnnotatedAnnotations(module, Scope.class)) {
+      report.addError(
+          String.format(
+              "@%ss cannot be scoped. Did you mean to scope a method instead?",
+              moduleKind.moduleAnnotation().getSimpleName()),
+          module,
+          scope);
+    }
+  }
+
   private static String formatListForErrorMessage(List<?> things) {
     switch (things.size()) {
       case 0:
diff --git a/javatests/dagger/internal/codegen/ModuleValidatorTest.java b/javatests/dagger/internal/codegen/ModuleValidatorTest.java
index a25c53ad0..e31630aac 100644
--- a/javatests/dagger/internal/codegen/ModuleValidatorTest.java
+++ b/javatests/dagger/internal/codegen/ModuleValidatorTest.java
@@ -21,6 +21,7 @@
 import static dagger.internal.codegen.Compilers.daggerCompiler;
 import static dagger.internal.codegen.DaggerModuleMethodSubject.Factory.assertThatModuleMethod;
 
+import com.google.testing.compile.Compilation;
 import com.google.testing.compile.JavaFileObjects;
 import dagger.Module;
 import dagger.producers.ProducerModule;
@@ -279,4 +280,25 @@ public void invalidIncludedModule() {
         .inFile(module)
         .onLine(5);
   }
+
+  @Test
+  public void scopeOnModule() {
+    JavaFileObject badModule =
+        JavaFileObjects.forSourceLines(
+            "test.BadModule",
+            "package test;",
+            "",
+            "import dagger.Module;",
+            "import javax.inject.Singleton;",
+            "",
+            "@Singleton",
+            "@Module",
+            "interface BadModule {}");
+    Compilation compilation = daggerCompiler().compile(badModule);
+    assertThat(compilation).failed();
+    assertThat(compilation)
+        .hadErrorContaining("@Modules cannot be scoped")
+        .inFile(badModule)
+        .onLineContaining("@Singleton");
+  }
 }
