diff --git a/java/dagger/internal/codegen/CompilerOptions.java b/java/dagger/internal/codegen/CompilerOptions.java
index b26146583..d657a15fc 100644
--- a/java/dagger/internal/codegen/CompilerOptions.java
+++ b/java/dagger/internal/codegen/CompilerOptions.java
@@ -189,6 +189,8 @@ Builder warnIfInjectionFactoryNotGeneratedUpstream(
 
   static final String FLOATING_BINDS_METHODS_KEY = "dagger.floatingBindsMethods";
 
+  static final String GRADLE_INCREMENTAL = "dagger.gradle.incremental";
+
   static final ImmutableSet<String> SUPPORTED_OPTIONS =
       ImmutableSet.of(
           FAST_INIT,
@@ -202,7 +204,8 @@ Builder warnIfInjectionFactoryNotGeneratedUpstream(
           WARN_IF_INJECTION_FACTORY_NOT_GENERATED_UPSTREAM_KEY,
           IGNORE_PRIVATE_AND_STATIC_INJECTION_FOR_COMPONENT,
           AHEAD_OF_TIME_COMPONENTS_KEY,
-          FLOATING_BINDS_METHODS_KEY);
+          FLOATING_BINDS_METHODS_KEY,
+          GRADLE_INCREMENTAL);
 
   private static boolean fastInitEnabled(ProcessingEnvironment processingEnv) {
     return valueOf(
diff --git a/java/dagger/internal/codegen/ComponentProcessor.java b/java/dagger/internal/codegen/ComponentProcessor.java
index cd9ec57c5..4af57560a 100644
--- a/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/java/dagger/internal/codegen/ComponentProcessor.java
@@ -93,7 +93,7 @@ public SourceVersion getSupportedSourceVersion() {
     options.addAll(CompilerOptions.SUPPORTED_OPTIONS);
     options.addAll(spiPlugins.allSupportedOptions());
     options.addAll(validationPlugins.allSupportedOptions());
-    if (processingEnv.getOptions().containsKey("dagger.gradle.incremental")) {
+    if (processingEnv.getOptions().containsKey(CompilerOptions.GRADLE_INCREMENTAL)) {
       options.add("org.gradle.annotation.processing.isolating");
     }
     return options.build();
