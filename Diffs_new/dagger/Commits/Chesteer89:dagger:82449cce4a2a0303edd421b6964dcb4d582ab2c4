diff --git a/java/dagger/android/AndroidInjection.java b/java/dagger/android/AndroidInjection.java
index 102a42910..caf733d8a 100644
--- a/java/dagger/android/AndroidInjection.java
+++ b/java/dagger/android/AndroidInjection.java
@@ -198,5 +198,42 @@ public static void inject(ContentProvider contentProvider) {
     contentProviderInjector.inject(contentProvider);
   }
 
+  /**
+   * Injects {@code view} if an associated {@link AndroidInjector} implementation can be found,
+   * otherwise throws an {@link IllegalArgumentException}.
+   *
+   * @throws RuntimeException if the {@link View} doesn't implement {@link
+   *     HasActivityInjector}.
+   */
+  public static void inject(View view) {
+    checkNotNull(view, "view");
+    Activity activity = getViewActivity(view);
+    if (!(application instanceof HasViewInjector)) {
+      throw new RuntimeException(
+              String.format(
+                      "%s does not implement %s",
+                      activity.getClass().getCanonicalName(),
+                      HasViewInjector.class.getCanonicalName()));
+    }
+
+    AndroidInjector<View> viewInjector =
+            ((HasViewInjector) activity).viewInjector();
+    checkNotNull(viewInjector, "%s.viewInjector() returned null", activity.getClass());
+
+    viewInjector.inject(view);
+  }
+
+  public static Activity getViewActivity(View view) {
+      // https://android.googlesource.com/platform/frameworks/support/+/03e0f3daf3c97ee95cd78b2f07bc9c1be05d43db/v7/mediarouter/src/android/support/v7/app/MediaRouteButton.java#276
+      Context context = getContext();
+      while (context instanceof ContextWrapper) {
+        if (context instanceof Activity) {
+          return (Activity)context;
+        }
+        context = ((ContextWrapper) context).getBaseContext();
+      }
+      throw new IllegalStateException("Context does not stem from an activity: " + getContext());
+  }
+
   private AndroidInjection() {}
 }
diff --git a/java/dagger/android/AndroidInjectionModule.java b/java/dagger/android/AndroidInjectionModule.java
index 4e496f86b..339821bf4 100644
--- a/java/dagger/android/AndroidInjectionModule.java
+++ b/java/dagger/android/AndroidInjectionModule.java
@@ -35,5 +35,8 @@
   @Multibinds
   abstract Map<String, AndroidInjector.Factory<?>> stringKeyedInjectorFactories();
 
+  @Multibinds
+  abstract Map<Class<View>, AndroidInjector.Factory<View>> viewInjectorFactories():
+
   private AndroidInjectionModule() {}
 }
diff --git a/java/dagger/android/DaggerApplication.java b/java/dagger/android/DaggerApplication.java
index ca9ea4344..16e0804d7 100644
--- a/java/dagger/android/DaggerApplication.java
+++ b/java/dagger/android/DaggerApplication.java
@@ -38,13 +38,15 @@
         HasFragmentInjector,
         HasServiceInjector,
         HasBroadcastReceiverInjector,
-        HasContentProviderInjector {
+        HasContentProviderInjector,
+        HasViewInjector {
 
   @Inject DispatchingAndroidInjector<Activity> activityInjector;
   @Inject DispatchingAndroidInjector<BroadcastReceiver> broadcastReceiverInjector;
   @Inject DispatchingAndroidInjector<Fragment> fragmentInjector;
   @Inject DispatchingAndroidInjector<Service> serviceInjector;
   @Inject DispatchingAndroidInjector<ContentProvider> contentProviderInjector;
+  @Inject DispatchingAndroidInjector<View> viewInjector;
   private volatile boolean needToInject = true;
 
   @Override
@@ -91,23 +93,51 @@ void setInjected() {
     needToInject = false;
   }
 
+  public DispatchingAndroidInjector<Activity> dispatchingActivityInjector() {
+    return activityInjector;
+  }
+
+  public DispatchingAndroidInjector<Fragment> dispatchingFragmentInjector() {
+    return fragmentInjector;
+  }
+
+  public DispatchingAndroidInjector<BroadcastReceiver> dispatchingBroadcastReceiverInjector() {
+    return broadcastReceiverInjector;
+  }
+
+  public DispatchingAndroidInjector<Service> dispatchingServiceInjector() {
+    return serviceInjector;
+  }
+
+  // injectIfNecessary is called here but not on the other *Injector() methods because it is the
+  // only one that should be called (in AndroidInjection.inject(ContentProvider)) before
+  // Application.onCreate()
+  public DispatchingAndroidInjector<ContentProvider> dispatchingContentProviderInjector() {
+    injectIfNecessary();
+    return contentProviderInjector;
+  }
+
+  public DispatchingAndroidInjector<View> dispatchingViewInjector() {
+    return viewInjector;
+  }
+
   @Override
-  public DispatchingAndroidInjector<Activity> activityInjector() {
+  public AndroidInjector<Activity> activityInjector() {
     return activityInjector;
   }
 
   @Override
-  public DispatchingAndroidInjector<Fragment> fragmentInjector() {
+  public AndroidInjector<Fragment> fragmentInjector() {
     return fragmentInjector;
   }
 
   @Override
-  public DispatchingAndroidInjector<BroadcastReceiver> broadcastReceiverInjector() {
+  public AndroidInjector<BroadcastReceiver> broadcastReceiverInjector() {
     return broadcastReceiverInjector;
   }
 
   @Override
-  public DispatchingAndroidInjector<Service> serviceInjector() {
+  public AndroidInjector<Service> serviceInjector() {
     return serviceInjector;
   }
 
@@ -119,4 +149,9 @@ void setInjected() {
     injectIfNecessary();
     return contentProviderInjector;
   }
+
+  @Override
+  public AndroidInjector<View> viewInjector() {
+    return viewInjector;
+  }
 }
diff --git a/java/dagger/android/HasViewInjector.java b/java/dagger/android/HasViewInjector.java
new file mode 100644
index 000000000..cfbab34b0
--- /dev/null
+++ b/java/dagger/android/HasViewInjector.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright (C) 2016 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android;
+
+import android.app.Activity;
+import dagger.internal.Beta;
+
+/** Provides an {@link AndroidInjector} of {@link View}s. */
+@Beta
+public interface HasActivityInjector {
+
+  /** Returns an {@link AndroidInjector} of {@link View}s. */
+  AndroidInjector<View> viewInjector();
+}
