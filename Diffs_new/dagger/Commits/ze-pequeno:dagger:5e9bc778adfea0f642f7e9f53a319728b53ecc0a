diff --git a/java/dagger/internal/codegen/ComponentCreatorAnnotation.java b/java/dagger/internal/codegen/ComponentCreatorAnnotation.java
index 4bc4ab269..31bbfab34 100644
--- a/java/dagger/internal/codegen/ComponentCreatorAnnotation.java
+++ b/java/dagger/internal/codegen/ComponentCreatorAnnotation.java
@@ -17,112 +17,134 @@
 package dagger.internal.codegen;
 
 import static com.google.auto.common.MoreElements.isAnnotationPresent;
-import static dagger.internal.codegen.ComponentCreatorKind.BUILDER;
-import static dagger.internal.codegen.ComponentCreatorKind.FACTORY;
-import static dagger.internal.codegen.ComponentKind.COMPONENT;
-import static dagger.internal.codegen.ComponentKind.PRODUCTION_COMPONENT;
-import static dagger.internal.codegen.ComponentKind.PRODUCTION_SUBCOMPONENT;
-import static dagger.internal.codegen.ComponentKind.SUBCOMPONENT;
+import static com.google.common.base.Ascii.toUpperCase;
 import static dagger.internal.codegen.DaggerStreams.toImmutableSet;
+import static dagger.internal.codegen.DaggerStreams.valuesOf;
+import static java.util.stream.Collectors.mapping;
 
-import com.google.auto.value.AutoValue;
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
-import com.google.common.collect.Maps;
 import dagger.Component;
 import dagger.Subcomponent;
 import dagger.producers.ProductionComponent;
 import dagger.producers.ProductionSubcomponent;
 import java.lang.annotation.Annotation;
-import java.util.Set;
+import java.util.stream.Collector;
+import java.util.stream.Stream;
 import javax.lang.model.element.TypeElement;
 
-/**
- * Simple representation of an annotation for a component creator type. Each annotation is for a
- * specific component kind and creator kind.
- */
-@AutoValue
-abstract class ComponentCreatorAnnotation {
-
-  private static final ImmutableMap<Class<? extends Annotation>, ComponentCreatorAnnotation>
-      ANNOTATIONS =
-          Maps.uniqueIndex(
-              ImmutableList.of(
-                  create(Component.Builder.class, COMPONENT, BUILDER),
-                  create(Component.Factory.class, COMPONENT, FACTORY),
-                  create(Subcomponent.Builder.class, SUBCOMPONENT, BUILDER),
-                  create(Subcomponent.Factory.class, SUBCOMPONENT, FACTORY),
-                  create(ProductionComponent.Builder.class, PRODUCTION_COMPONENT, BUILDER),
-                  create(ProductionComponent.Factory.class, PRODUCTION_COMPONENT, FACTORY),
-                  create(ProductionSubcomponent.Builder.class, PRODUCTION_SUBCOMPONENT, BUILDER),
-                  create(ProductionSubcomponent.Factory.class, PRODUCTION_SUBCOMPONENT, FACTORY)),
-              ComponentCreatorAnnotation::annotation);
-
-  /** Returns the set of all component creator annotations. */
+/** Simple representation of a component creator annotation type. */
+enum ComponentCreatorAnnotation {
+  COMPONENT_BUILDER(Component.Builder.class),
+  COMPONENT_FACTORY(Component.Factory.class),
+  SUBCOMPONENT_BUILDER(Subcomponent.Builder.class),
+  SUBCOMPONENT_FACTORY(Subcomponent.Factory.class),
+  PRODUCTION_COMPONENT_BUILDER(ProductionComponent.Builder.class),
+  PRODUCTION_COMPONENT_FACTORY(ProductionComponent.Factory.class),
+  PRODUCTION_SUBCOMPONENT_BUILDER(ProductionSubcomponent.Builder.class),
+  PRODUCTION_SUBCOMPONENT_FACTORY(ProductionSubcomponent.Factory.class),
+  ;
+
+  private final Class<? extends Annotation> annotation;
+  private final ComponentCreatorKind creatorKind;
+  private final Class<? extends Annotation> componentAnnotation;
+
+  ComponentCreatorAnnotation(Class<? extends Annotation> annotation) {
+    this.annotation = annotation;
+    this.creatorKind = ComponentCreatorKind.valueOf(toUpperCase(annotation.getSimpleName()));
+    this.componentAnnotation = (Class<? extends Annotation>) annotation.getEnclosingClass();
+  }
+
+  /** The actual annotation type. */
+  Class<? extends Annotation> annotation() {
+    return annotation;
+  }
+
+  /** The component annotation type that encloses this creator annotation type. */
+  final Class<? extends Annotation> componentAnnotation() {
+    return componentAnnotation;
+  }
+
+  /** Returns {@code true} if the creator annotation is for a subcomponent. */
+  final boolean isSubcomponentCreatorAnnotation() {
+    return componentAnnotation().getSimpleName().endsWith("Subcomponent");
+  }
+
+  /**
+   * Returns {@code true} if the creator annotation is for a production component or subcomponent.
+   */
+  final boolean isProductionCreatorAnnotation() {
+    return componentAnnotation().getSimpleName().startsWith("Production");
+  }
+
+  /** The creator kind the annotation is associated with. */
+  // TODO(dpb): Remove ComponentCreatorKind.
+  ComponentCreatorKind creatorKind() {
+    return creatorKind;
+  }
+
+  @Override
+  public final String toString() {
+    return annotation().getName();
+  }
+
+  /** Returns all component creator annotations. */
   static ImmutableSet<Class<? extends Annotation>> allCreatorAnnotations() {
-    return ANNOTATIONS.keySet();
+    return stream().collect(toAnnotationClasses());
   }
 
-  /** Returns all creator annotations for the given {@code componentKind}. */
-  static ImmutableSet<Class<? extends Annotation>> creatorAnnotationsFor(
-      ComponentKind componentKind) {
-    return creatorAnnotationsFor(ImmutableSet.of(componentKind));
+  /** Returns all root component creator annotations. */
+  static ImmutableSet<Class<? extends Annotation>> rootComponentCreatorAnnotations() {
+    return stream()
+        .filter(
+            componentCreatorAnnotation ->
+                !componentCreatorAnnotation.isSubcomponentCreatorAnnotation())
+        .collect(toAnnotationClasses());
   }
 
-  /** Returns all creator annotations for any of the given {@code componentKinds}. */
-  static ImmutableSet<Class<? extends Annotation>> creatorAnnotationsFor(
-      Set<ComponentKind> componentKinds) {
-    return ANNOTATIONS.values().stream()
-        .filter(annotation -> componentKinds.contains(annotation.componentKind()))
-        .map(ComponentCreatorAnnotation::annotation)
-        .collect(toImmutableSet());
+  /** Returns all subcomponent creator annotations. */
+  static ImmutableSet<Class<? extends Annotation>> subcomponentCreatorAnnotations() {
+    return stream()
+        .filter(
+            componentCreatorAnnotation ->
+                componentCreatorAnnotation.isSubcomponentCreatorAnnotation())
+        .collect(toAnnotationClasses());
+  }
+
+  /** Returns all production component creator annotations. */
+  static ImmutableSet<Class<? extends Annotation>> productionCreatorAnnotations() {
+    return stream()
+        .filter(
+            componentCreatorAnnotation ->
+                componentCreatorAnnotation.isProductionCreatorAnnotation())
+        .collect(toAnnotationClasses());
   }
 
   /** Returns the legal creator annotations for the given {@code componentAnnotation}. */
   static ImmutableSet<Class<? extends Annotation>> creatorAnnotationsFor(
       ComponentAnnotation componentAnnotation) {
-    return ANNOTATIONS.values().stream()
+    return stream()
         .filter(
             creatorAnnotation ->
                 creatorAnnotation
                     .componentAnnotation()
                     .getSimpleName()
                     .equals(componentAnnotation.simpleName()))
-        .map(ComponentCreatorAnnotation::annotation)
-        .collect(toImmutableSet());
+        .collect(toAnnotationClasses());
   }
 
   /** Returns all creator annotations present on the given {@code type}. */
   static ImmutableSet<ComponentCreatorAnnotation> getCreatorAnnotations(TypeElement type) {
-    return ImmutableSet.copyOf(
-        Maps.filterKeys(ANNOTATIONS, annotation -> isAnnotationPresent(type, annotation)).values());
-  }
-
-  /** The actual annotation. */
-  abstract Class<? extends Annotation> annotation();
-
-  /** The component annotation type that encloses this creator annotation type. */
-  final Class<? extends Annotation> componentAnnotation() {
-    return (Class<? extends Annotation>) annotation().getEnclosingClass();
+    return stream()
+        .filter(cca -> isAnnotationPresent(type, cca.annotation()))
+        .collect(toImmutableSet());
   }
 
-  /** The component kind the annotation is associated with. */
-  abstract ComponentKind componentKind();
-
-  /** The creator kind the annotation is associated with. */
-  abstract ComponentCreatorKind creatorKind();
-
-  @Override
-  public final String toString() {
-    return annotation().getName();
+  private static Stream<ComponentCreatorAnnotation> stream() {
+    return valuesOf(ComponentCreatorAnnotation.class);
   }
 
-  private static ComponentCreatorAnnotation create(
-      Class<? extends Annotation> annotation,
-      ComponentKind componentKind,
-      ComponentCreatorKind componentCreatorKind) {
-    return new AutoValue_ComponentCreatorAnnotation(
-        annotation, componentKind, componentCreatorKind);
+  private static Collector<ComponentCreatorAnnotation, ?, ImmutableSet<Class<? extends Annotation>>>
+      toAnnotationClasses() {
+    return mapping(ComponentCreatorAnnotation::annotation, toImmutableSet());
   }
 }
diff --git a/java/dagger/internal/codegen/ComponentCreatorValidator.java b/java/dagger/internal/codegen/ComponentCreatorValidator.java
index 97268779d..4a80f9499 100644
--- a/java/dagger/internal/codegen/ComponentCreatorValidator.java
+++ b/java/dagger/internal/codegen/ComponentCreatorValidator.java
@@ -69,14 +69,11 @@
 
     // creatorAnnotations should never be empty because the validate method should only ever be
     // called for types that have been found to have some creator annotation
-    ComponentCreatorAnnotation annotation = getOnlyElement(creatorAnnotations);
-    ComponentCreatorMessages messages = ErrorMessages.creatorMessagesFor(annotation);
-
-    ComponentKind componentKind = annotation.componentKind();
-    ComponentCreatorKind creatorKind = annotation.creatorKind();
+    ComponentCreatorAnnotation creatorAnnotation = getOnlyElement(creatorAnnotations);
+    ComponentCreatorMessages messages = ErrorMessages.creatorMessagesFor(creatorAnnotation);
 
     Element componentElement = type.getEnclosingElement();
-    if (!isAnnotationPresent(componentElement, componentKind.annotation())) {
+    if (!isAnnotationPresent(componentElement, creatorAnnotation.componentAnnotation())) {
       report.addError(messages.mustBeInComponent());
     }
 
@@ -84,7 +81,7 @@
     // messages will be bogus.
     if (validateIsClassOrInterface(type, report, messages)) {
       validateTypeRequirements(type, report, messages);
-      switch (creatorKind) {
+      switch (creatorAnnotation.creatorKind()) {
         case FACTORY:
           validateFactory(type, report, componentElement, messages);
           break;
diff --git a/java/dagger/internal/codegen/ComponentProcessingStep.java b/java/dagger/internal/codegen/ComponentProcessingStep.java
index 0a6610f81..32d7d9152 100644
--- a/java/dagger/internal/codegen/ComponentProcessingStep.java
+++ b/java/dagger/internal/codegen/ComponentProcessingStep.java
@@ -21,9 +21,8 @@
 import static dagger.internal.codegen.ComponentAnnotation.rootComponentAnnotations;
 import static dagger.internal.codegen.ComponentAnnotation.subcomponentAnnotations;
 import static dagger.internal.codegen.ComponentCreatorAnnotation.allCreatorAnnotations;
-import static dagger.internal.codegen.ComponentCreatorAnnotation.creatorAnnotationsFor;
-import static dagger.internal.codegen.ComponentKind.rootComponentKinds;
-import static dagger.internal.codegen.ComponentKind.subcomponentKinds;
+import static dagger.internal.codegen.ComponentCreatorAnnotation.rootComponentCreatorAnnotations;
+import static dagger.internal.codegen.ComponentCreatorAnnotation.subcomponentCreatorAnnotations;
 import static java.util.Collections.disjoint;
 
 import com.google.auto.common.BasicAnnotationProcessor.ProcessingStep;
@@ -100,15 +99,13 @@
     subcomponentElements =
         getElementsFromAnnotations(elementsByAnnotation, subcomponentAnnotations());
     subcomponentCreatorElements =
-        getElementsFromAnnotations(
-            elementsByAnnotation, creatorAnnotationsFor(subcomponentKinds()));
+        getElementsFromAnnotations(elementsByAnnotation, subcomponentCreatorAnnotations());
 
     ImmutableSet.Builder<Element> rejectedElements = ImmutableSet.builder();
 
     creatorReportsByComponent =
         processCreators(
-            getElementsFromAnnotations(
-                elementsByAnnotation, creatorAnnotationsFor(rootComponentKinds())),
+            getElementsFromAnnotations(elementsByAnnotation, rootComponentCreatorAnnotations()),
             rejectedElements);
     creatorReportsBySubcomponent = processCreators(subcomponentCreatorElements, rejectedElements);
     reportsBySubcomponent =
diff --git a/java/dagger/internal/codegen/ComponentValidator.java b/java/dagger/internal/codegen/ComponentValidator.java
index a0da261b2..7285dacc8 100644
--- a/java/dagger/internal/codegen/ComponentValidator.java
+++ b/java/dagger/internal/codegen/ComponentValidator.java
@@ -24,9 +24,12 @@
 import static com.google.common.base.Verify.verify;
 import static com.google.common.collect.Iterables.getOnlyElement;
 import static com.google.common.collect.Multimaps.asMap;
+import static com.google.common.collect.Sets.intersection;
 import static dagger.internal.codegen.ComponentAnnotation.anyComponentAnnotation;
 import static dagger.internal.codegen.ComponentAnnotation.componentAnnotation;
 import static dagger.internal.codegen.ComponentCreatorAnnotation.creatorAnnotationsFor;
+import static dagger.internal.codegen.ComponentCreatorAnnotation.productionCreatorAnnotations;
+import static dagger.internal.codegen.ComponentCreatorAnnotation.subcomponentCreatorAnnotations;
 import static dagger.internal.codegen.ComponentKind.annotationsFor;
 import static dagger.internal.codegen.ConfigurationAnnotations.enclosedAnnotatedTypes;
 import static dagger.internal.codegen.ConfigurationAnnotations.getTransitiveModules;
@@ -176,7 +179,7 @@ public ComponentValidationReport validate(
     }
 
     ImmutableList<DeclaredType> creators =
-        creatorAnnotationsFor(componentKind).stream()
+        creatorAnnotationsFor(componentAnnotation).stream()
             .flatMap(annotation -> enclosedAnnotatedTypes(subject, annotation).stream())
             .collect(toImmutableList());
     if (creators.size() > 1) {
@@ -219,7 +222,11 @@ public ComponentValidationReport validate(
                           .collect(toImmutableSet()));
               Optional<AnnotationMirror> subcomponentCreatorAnnotation =
                   checkForAnnotations(
-                      returnType, creatorAnnotationsFor(componentKind.legalSubcomponentKinds()));
+                      returnType,
+                      componentAnnotation.isProduction()
+                          ? intersection(
+                              subcomponentCreatorAnnotations(), productionCreatorAnnotations())
+                          : subcomponentCreatorAnnotations());
               if (subcomponentAnnotation.isPresent()) {
                 referencedSubcomponents.put(MoreTypes.asElement(returnType), method);
                 validateSubcomponentMethod(
diff --git a/java/dagger/internal/codegen/ConfigurationAnnotations.java b/java/dagger/internal/codegen/ConfigurationAnnotations.java
index 8e39ca761..eee7c8bff 100644
--- a/java/dagger/internal/codegen/ConfigurationAnnotations.java
+++ b/java/dagger/internal/codegen/ConfigurationAnnotations.java
@@ -20,8 +20,7 @@
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.collect.Iterables.consumingIterable;
 import static dagger.internal.codegen.ComponentAnnotation.subcomponentAnnotation;
-import static dagger.internal.codegen.ComponentCreatorAnnotation.creatorAnnotationsFor;
-import static dagger.internal.codegen.ComponentKind.subcomponentKinds;
+import static dagger.internal.codegen.ComponentCreatorAnnotation.subcomponentCreatorAnnotations;
 import static dagger.internal.codegen.DaggerElements.isAnyAnnotationPresent;
 import static dagger.internal.codegen.ModuleAnnotation.moduleAnnotation;
 import static dagger.internal.codegen.MoreAnnotationMirrors.getTypeListValue;
@@ -65,7 +64,7 @@
   }
 
   static boolean isSubcomponentCreator(Element element) {
-    return isAnyAnnotationPresent(element, creatorAnnotationsFor(subcomponentKinds()));
+    return isAnyAnnotationPresent(element, subcomponentCreatorAnnotations());
   }
 
   // Dagger 1 support.
diff --git a/java/dagger/internal/codegen/ErrorMessages.java b/java/dagger/internal/codegen/ErrorMessages.java
index c53cec21a..4195e1a20 100644
--- a/java/dagger/internal/codegen/ErrorMessages.java
+++ b/java/dagger/internal/codegen/ErrorMessages.java
@@ -16,7 +16,6 @@
 
 package dagger.internal.codegen;
 
-import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Joiner;
 import com.google.common.collect.ImmutableMap;
 import java.util.Set;
@@ -53,26 +52,27 @@ static ComponentMessages componentMessagesFor(ComponentKind componentKind) {
 
   static ComponentMessages componentMessagesFor(ComponentAnnotation componentAnnotation) {
     return new ComponentMessages(
-        componentAnnotation.isProduction()
-            ? componentAnnotation.isSubcomponent() ? PRODUCTION.andThen(SUBCOMPONENT) : PRODUCTION
-            : componentAnnotation.isSubcomponent() ? SUBCOMPONENT : UnaryOperator.identity());
+        transformation(componentAnnotation.isProduction(), componentAnnotation.isSubcomponent()));
   }
 
   static ComponentCreatorMessages creatorMessagesFor(ComponentCreatorAnnotation creatorAnnotation) {
-    return creatorMessagesFor(creatorAnnotation.componentKind(), creatorAnnotation.creatorKind());
-  }
-
-  @VisibleForTesting
-  static ComponentCreatorMessages creatorMessagesFor(
-      ComponentKind componentKind, ComponentCreatorKind creatorKind) {
-    Function<String, String> transformation = COMPONENT_TRANSFORMATIONS.get(componentKind);
-    switch (creatorKind) {
+    Function<String, String> transformation =
+        transformation(
+            creatorAnnotation.isProductionCreatorAnnotation(),
+            creatorAnnotation.isSubcomponentCreatorAnnotation());
+    switch (creatorAnnotation.creatorKind()) {
       case BUILDER:
         return new BuilderMessages(transformation);
       case FACTORY:
         return new FactoryMessages(transformation);
     }
-    throw new AssertionError();
+    throw new AssertionError(creatorAnnotation);
+  }
+
+  private static Function<String, String> transformation(
+      boolean isProduction, boolean isSubcomponent) {
+    Function<String, String> transformation = isProduction ? PRODUCTION : UnaryOperator.identity();
+    return isSubcomponent ? transformation.andThen(SUBCOMPONENT) : transformation;
   }
 
   private abstract static class Messages {
diff --git a/javatests/dagger/internal/codegen/ComponentBuilderTest.java b/javatests/dagger/internal/codegen/ComponentBuilderTest.java
index 97966e27a..66c54bd4e 100644
--- a/javatests/dagger/internal/codegen/ComponentBuilderTest.java
+++ b/javatests/dagger/internal/codegen/ComponentBuilderTest.java
@@ -18,8 +18,7 @@
 
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
-import static dagger.internal.codegen.ComponentCreatorKind.BUILDER;
-import static dagger.internal.codegen.ComponentKind.COMPONENT;
+import static dagger.internal.codegen.ComponentCreatorAnnotation.COMPONENT_BUILDER;
 import static dagger.internal.codegen.ErrorMessages.creatorMessagesFor;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
@@ -47,7 +46,7 @@ public ComponentBuilderTest(CompilerMode compilerMode) {
   }
 
   private static final ErrorMessages.ComponentCreatorMessages MSGS =
-      creatorMessagesFor(COMPONENT, BUILDER);
+      creatorMessagesFor(COMPONENT_BUILDER);
 
   @Test
   public void testUsesBuildAndSetterNames() {
diff --git a/javatests/dagger/internal/codegen/ComponentCreatorTest.java b/javatests/dagger/internal/codegen/ComponentCreatorTest.java
index 9d716370d..9571b4b7c 100644
--- a/javatests/dagger/internal/codegen/ComponentCreatorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentCreatorTest.java
@@ -16,10 +16,13 @@
 
 package dagger.internal.codegen;
 
+import static com.google.common.collect.Sets.immutableEnumSet;
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static dagger.internal.codegen.CompilerMode.DEFAULT_MODE;
 import static dagger.internal.codegen.CompilerMode.FAST_INIT_MODE;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
+import static dagger.internal.codegen.ComponentCreatorAnnotation.COMPONENT_BUILDER;
+import static dagger.internal.codegen.ComponentCreatorAnnotation.COMPONENT_FACTORY;
 import static dagger.internal.codegen.ComponentCreatorKind.BUILDER;
 import static dagger.internal.codegen.ComponentCreatorKind.FACTORY;
 import static dagger.internal.codegen.ComponentKind.COMPONENT;
@@ -33,7 +36,6 @@
 import com.google.testing.compile.Compilation;
 import com.google.testing.compile.JavaFileObjects;
 import java.util.Collection;
-import java.util.EnumSet;
 import java.util.List;
 import java.util.Set;
 import javax.tools.JavaFileObject;
@@ -49,13 +51,14 @@
   public static Collection<Object[]> parameters() {
     Set<List<Object>> params =
         Sets.<Object>cartesianProduct(
-            Sets.immutableEnumSet(DEFAULT_MODE, FAST_INIT_MODE),
-            EnumSet.allOf(ComponentCreatorKind.class));
+            immutableEnumSet(DEFAULT_MODE, FAST_INIT_MODE),
+            immutableEnumSet(COMPONENT_BUILDER, COMPONENT_FACTORY));
     return ImmutableList.copyOf(Iterables.transform(params, Collection::toArray));
   }
 
-  public ComponentCreatorTest(CompilerMode compilerMode, ComponentCreatorKind creatorKind) {
-    super(compilerMode, COMPONENT, creatorKind);
+  public ComponentCreatorTest(
+      CompilerMode compilerMode, ComponentCreatorAnnotation componentCreatorAnnotation) {
+    super(compilerMode, componentCreatorAnnotation);
   }
 
   @Test
diff --git a/javatests/dagger/internal/codegen/ComponentCreatorTestHelper.java b/javatests/dagger/internal/codegen/ComponentCreatorTestHelper.java
index 13d3b39de..2ee120ea2 100644
--- a/javatests/dagger/internal/codegen/ComponentCreatorTestHelper.java
+++ b/javatests/dagger/internal/codegen/ComponentCreatorTestHelper.java
@@ -40,10 +40,10 @@
   protected final ErrorMessages.ComponentCreatorMessages messages;
 
   ComponentCreatorTestHelper(
-      CompilerMode compilerMode, ComponentKind componentKind, ComponentCreatorKind creatorKind) {
+      CompilerMode compilerMode, ComponentCreatorAnnotation componentCreatorAnnotation) {
     this.compilerMode = compilerMode;
-    this.creatorKind = creatorKind;
-    this.messages = creatorMessagesFor(componentKind, creatorKind);
+    this.creatorKind = componentCreatorAnnotation.creatorKind();
+    this.messages = creatorMessagesFor(componentCreatorAnnotation);
   }
 
   // For tests where code for both builders and factories can be largely equivalent, i.e. when there
diff --git a/javatests/dagger/internal/codegen/ComponentFactoryTest.java b/javatests/dagger/internal/codegen/ComponentFactoryTest.java
index aadc5ec57..66741267b 100644
--- a/javatests/dagger/internal/codegen/ComponentFactoryTest.java
+++ b/javatests/dagger/internal/codegen/ComponentFactoryTest.java
@@ -18,8 +18,7 @@
 
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
-import static dagger.internal.codegen.ComponentCreatorKind.FACTORY;
-import static dagger.internal.codegen.ComponentKind.COMPONENT;
+import static dagger.internal.codegen.ComponentCreatorAnnotation.COMPONENT_FACTORY;
 import static dagger.internal.codegen.ErrorMessages.creatorMessagesFor;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
@@ -47,7 +46,7 @@ public ComponentFactoryTest(CompilerMode compilerMode) {
   }
 
   private static final ErrorMessages.ComponentCreatorMessages MSGS =
-      creatorMessagesFor(COMPONENT, FACTORY);
+      creatorMessagesFor(COMPONENT_FACTORY);
 
   @Test
   public void testUsesParameterNames() {
diff --git a/javatests/dagger/internal/codegen/SubcomponentBuilderValidationTest.java b/javatests/dagger/internal/codegen/SubcomponentBuilderValidationTest.java
index 3df8a7e71..5dab4c488 100644
--- a/javatests/dagger/internal/codegen/SubcomponentBuilderValidationTest.java
+++ b/javatests/dagger/internal/codegen/SubcomponentBuilderValidationTest.java
@@ -18,8 +18,7 @@
 
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
-import static dagger.internal.codegen.ComponentCreatorKind.BUILDER;
-import static dagger.internal.codegen.ComponentKind.SUBCOMPONENT;
+import static dagger.internal.codegen.ComponentCreatorAnnotation.SUBCOMPONENT_BUILDER;
 import static dagger.internal.codegen.ErrorMessages.creatorMessagesFor;
 
 import com.google.testing.compile.Compilation;
@@ -34,7 +33,7 @@
 public class SubcomponentBuilderValidationTest {
 
   private static final ErrorMessages.ComponentCreatorMessages MSGS =
-      creatorMessagesFor(SUBCOMPONENT, BUILDER);
+      creatorMessagesFor(SUBCOMPONENT_BUILDER);
 
   @Test
   public void testMoreThanOneArgFails() {
diff --git a/javatests/dagger/internal/codegen/SubcomponentCreatorRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/SubcomponentCreatorRequestFulfillmentTest.java
index 16ecdefd0..d02676f37 100644
--- a/javatests/dagger/internal/codegen/SubcomponentCreatorRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/SubcomponentCreatorRequestFulfillmentTest.java
@@ -16,19 +16,20 @@
 
 package dagger.internal.codegen;
 
+import static com.google.common.collect.Sets.cartesianProduct;
+import static com.google.common.collect.Sets.immutableEnumSet;
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static dagger.internal.codegen.CompilerMode.DEFAULT_MODE;
 import static dagger.internal.codegen.CompilerMode.FAST_INIT_MODE;
-import static dagger.internal.codegen.ComponentKind.SUBCOMPONENT;
+import static dagger.internal.codegen.ComponentCreatorAnnotation.SUBCOMPONENT_BUILDER;
+import static dagger.internal.codegen.ComponentCreatorAnnotation.SUBCOMPONENT_FACTORY;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 import static dagger.internal.codegen.GeneratedLines.IMPORT_GENERATED_ANNOTATION;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
-import com.google.common.collect.Sets;
 import com.google.testing.compile.Compilation;
 import java.util.Collection;
-import java.util.EnumSet;
 import java.util.List;
 import java.util.Set;
 import javax.tools.JavaFileObject;
@@ -42,15 +43,15 @@
   @Parameters(name = "compilerMode={0}, creatorKind={1}")
   public static Collection<Object[]> parameters() {
     Set<List<Object>> params =
-        Sets.<Object>cartesianProduct(
-            Sets.immutableEnumSet(DEFAULT_MODE, FAST_INIT_MODE),
-            EnumSet.allOf(ComponentCreatorKind.class));
+        cartesianProduct(
+            immutableEnumSet(DEFAULT_MODE, FAST_INIT_MODE),
+            immutableEnumSet(SUBCOMPONENT_FACTORY, SUBCOMPONENT_BUILDER));
     return ImmutableList.copyOf(Iterables.transform(params, Collection::toArray));
   }
 
   public SubcomponentCreatorRequestFulfillmentTest(
-      CompilerMode compilerMode, ComponentCreatorKind creatorKind) {
-    super(compilerMode, SUBCOMPONENT, creatorKind);
+      CompilerMode compilerMode, ComponentCreatorAnnotation componentCreatorAnnotation) {
+    super(compilerMode, componentCreatorAnnotation);
   }
 
   @Test
diff --git a/javatests/dagger/internal/codegen/SubcomponentCreatorValidationTest.java b/javatests/dagger/internal/codegen/SubcomponentCreatorValidationTest.java
index 6246a473e..b5753d470 100644
--- a/javatests/dagger/internal/codegen/SubcomponentCreatorValidationTest.java
+++ b/javatests/dagger/internal/codegen/SubcomponentCreatorValidationTest.java
@@ -18,6 +18,8 @@
 
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static dagger.internal.codegen.CompilerMode.DEFAULT_MODE;
+import static dagger.internal.codegen.ComponentCreatorAnnotation.SUBCOMPONENT_BUILDER;
+import static dagger.internal.codegen.ComponentCreatorAnnotation.SUBCOMPONENT_FACTORY;
 import static dagger.internal.codegen.ComponentCreatorKind.BUILDER;
 import static dagger.internal.codegen.ComponentCreatorKind.FACTORY;
 import static dagger.internal.codegen.ComponentKind.SUBCOMPONENT;
@@ -40,11 +42,11 @@
 public class SubcomponentCreatorValidationTest extends ComponentCreatorTestHelper {
   @Parameters(name = "creatorKind={0}")
   public static Collection<Object[]> parameters() {
-    return ImmutableList.copyOf(new Object[][] {{BUILDER}, {FACTORY}});
+    return ImmutableList.copyOf(new Object[][] {{SUBCOMPONENT_BUILDER}, {SUBCOMPONENT_FACTORY}});
   }
 
-  public SubcomponentCreatorValidationTest(ComponentCreatorKind creatorKind) {
-    super(DEFAULT_MODE, SUBCOMPONENT, creatorKind);
+  public SubcomponentCreatorValidationTest(ComponentCreatorAnnotation componentCreatorAnnotation) {
+    super(DEFAULT_MODE, componentCreatorAnnotation);
   }
 
   @Test
