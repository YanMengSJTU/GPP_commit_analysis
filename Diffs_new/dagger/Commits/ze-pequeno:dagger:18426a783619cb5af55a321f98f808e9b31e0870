diff --git a/java/dagger/internal/codegen/ProducerFactoryGenerator.java b/java/dagger/internal/codegen/ProducerFactoryGenerator.java
index e311bedf9..16e5cd923 100644
--- a/java/dagger/internal/codegen/ProducerFactoryGenerator.java
+++ b/java/dagger/internal/codegen/ProducerFactoryGenerator.java
@@ -17,6 +17,7 @@
 package dagger.internal.codegen;
 
 import static com.google.common.base.Preconditions.checkArgument;
+import static com.google.common.base.Verify.verifyNotNull;
 import static com.squareup.javapoet.ClassName.OBJECT;
 import static com.squareup.javapoet.MethodSpec.constructorBuilder;
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
@@ -76,15 +77,18 @@
  */
 final class ProducerFactoryGenerator extends SourceFileGenerator<ProductionBinding> {
   private final CompilerOptions compilerOptions;
+  private final KeyFactory keyFactory;
 
   @Inject
   ProducerFactoryGenerator(
       Filer filer,
       Elements elements,
       SourceVersion sourceVersion,
-      CompilerOptions compilerOptions) {
+      CompilerOptions compilerOptions,
+      KeyFactory keyFactory) {
     super(filer, elements, sourceVersion);
     this.compilerOptions = compilerOptions;
+    this.keyFactory = keyFactory;
   }
 
   @Override
@@ -133,15 +137,23 @@ ClassName nameGeneratedType(ProductionBinding binding) {
                     TypeName.get(binding.bindingTypeElement().get().asType())))
             : Optional.empty();
 
+    String monitorParameterName = null;
     for (Map.Entry<Key, FrameworkField> entry :
         generateBindingFieldsForDependencies(binding).entrySet()) {
       Key key = entry.getKey();
       FrameworkField bindingField = entry.getValue();
+      String fieldName = uniqueFieldNames.getUniqueName(bindingField.name());
+      if (key.equals(keyFactory.forProductionComponentMonitor())) {
+        monitorParameterName = fieldName;
+        constructorBuilder.addParameter(bindingField.type(), monitorParameterName);
+        continue;
+      }
+
       FieldSpec field =
           addFieldAndConstructorParameter(
               factoryBuilder,
               constructorBuilder,
-              uniqueFieldNames.getUniqueName(bindingField.name()),
+              fieldName,
               bindingField.type());
       fieldsBuilder.put(key, field);
     }
@@ -149,7 +161,7 @@ ClassName nameGeneratedType(ProductionBinding binding) {
 
     constructorBuilder.addStatement(
         "super($N, $L)",
-        fields.get(binding.monitorRequest().get().key()),
+        verifyNotNull(monitorParameterName),
         producerTokenConstruction(generatedTypeName, binding));
 
     if (binding.requiresModuleInstance()) {
diff --git a/javatests/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java b/javatests/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
index 2f6b7f370..2242560ed 100644
--- a/javatests/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
+++ b/javatests/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
@@ -376,8 +376,6 @@ public void publicModuleNonPublicIncludes() {
             "    implements AsyncFunction<Void, String>, Executor {",
             "  private final TestModule module;",
             "  private final Provider<Executor> executorProvider;",
-            "  private final ",
-            "      Provider<ProductionComponentMonitor> productionComponentMonitorProvider;",
             "",
             "  public TestModule_ProduceStringFactory(",
             "      TestModule module,",
@@ -388,7 +386,6 @@ public void publicModuleNonPublicIncludes() {
             "        ProducerToken.create(TestModule_ProduceStringFactory.class));",
             "    this.module = module;",
             "    this.executorProvider = executorProvider;",
-            "    this.productionComponentMonitorProvider = productionComponentMonitorProvider;",
             "  }",
             "",
             "  @Override protected ListenableFuture<String> compute() {",
@@ -460,8 +457,6 @@ public void singleProducesMethodNoArgsFutureWithProducerName() {
             "    implements AsyncFunction<Void, String>, Executor {",
             "  private final TestModule module;",
             "  private final Provider<Executor> executorProvider;",
-            "  private final ",
-            "      Provider<ProductionComponentMonitor> productionComponentMonitorProvider;",
             "",
             "  public TestModule_ProduceStringFactory(",
             "      TestModule module,",
@@ -472,7 +467,6 @@ public void singleProducesMethodNoArgsFutureWithProducerName() {
             "        ProducerToken.create(\"test.TestModule#produceString\"));",
             "    this.module = module;",
             "    this.executorProvider = executorProvider;",
-            "    this.productionComponentMonitorProvider = productionComponentMonitorProvider;",
             "  }",
             "",
             "  @Override protected ListenableFuture<String> compute() {",
