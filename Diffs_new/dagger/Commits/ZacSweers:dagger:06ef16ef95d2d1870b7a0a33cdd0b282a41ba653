diff --git a/java/dagger/model/testing/BindingGraphSubject.java b/java/dagger/model/testing/BindingGraphSubject.java
index 83475eb84..dc17c1dd5 100644
--- a/java/dagger/model/testing/BindingGraphSubject.java
+++ b/java/dagger/model/testing/BindingGraphSubject.java
@@ -36,8 +36,11 @@ public static BindingGraphSubject assertThat(BindingGraph bindingGraph) {
     return assertAbout(BindingGraphSubject::new).that(bindingGraph);
   }
 
+  private final BindingGraph actual;
+
   private BindingGraphSubject(FailureMetadata metadata, @NullableDecl BindingGraph actual) {
     super(metadata, actual);
+    this.actual = actual;
   }
 
   /**
@@ -90,7 +93,7 @@ private BindingSubject bindingWithKeyString(String keyString) {
   }
 
   private ImmutableSet<Binding> getBindingNodes(String keyString) {
-    return actual().bindings().stream()
+    return actual.bindings().stream()
         .filter(binding -> binding.key().toString().equals(keyString))
         .collect(toImmutableSet());
   }
@@ -106,8 +109,11 @@ private static String keyString(String qualifier, String type) {
   /** A Truth subject for a {@link Binding}. */
   public final class BindingSubject extends Subject<BindingSubject, Binding> {
 
+    private final Binding actual;
+
     BindingSubject(FailureMetadata metadata, @NullableDecl Binding actual) {
       super(metadata, actual);
+      this.actual = actual;
     }
 
     /**
@@ -131,14 +137,14 @@ public void dependsOnBindingWithKey(String qualifier, String type) {
     }
 
     private void dependsOnBindingWithKeyString(String keyString) {
-      if (actualBindingGraph().requestedBindings(actual()).stream()
+      if (actualBindingGraph().requestedBindings(actual).stream()
           .noneMatch(binding -> binding.key().toString().equals(keyString))) {
         failWithActual("expected to depend on binding with key", keyString);
       }
     }
 
     private BindingGraph actualBindingGraph() {
-      return BindingGraphSubject.this.actual();
+      return BindingGraphSubject.this.actual;
     }
   }
 }
diff --git a/javatests/dagger/internal/codegen/DaggerModuleMethodSubject.java b/javatests/dagger/internal/codegen/DaggerModuleMethodSubject.java
index c01da44c2..1fcf7bc3a 100644
--- a/javatests/dagger/internal/codegen/DaggerModuleMethodSubject.java
+++ b/javatests/dagger/internal/codegen/DaggerModuleMethodSubject.java
@@ -74,6 +74,7 @@ public DaggerModuleMethodSubject createSubject(FailureMetadata failureMetadata,
     }
   }
 
+  private final String actual;
   private final ImmutableList.Builder<String> imports =
       new ImmutableList.Builder<String>()
           .add(
@@ -89,6 +90,7 @@ public DaggerModuleMethodSubject createSubject(FailureMetadata failureMetadata,
 
   private DaggerModuleMethodSubject(FailureMetadata failureMetadata, String subject) {
     super(failureMetadata, subject);
+    this.actual = subject;
   }
 
   /**
@@ -155,7 +157,7 @@ void hasError(String errorSubstring) {
   }
 
   private int methodLine(String source) {
-    String beforeMethod = source.substring(0, source.indexOf(actual()));
+    String beforeMethod = source.substring(0, source.indexOf(actual));
     int methodLine = 1;
     for (int nextNewlineIndex = beforeMethod.indexOf('\n');
         nextNewlineIndex >= 0;
@@ -174,7 +176,7 @@ private String moduleSource() {
       writer.println(importLine);
     }
     writer.println();
-    writer.printf(declaration, "TestModule", "\n" + actual() + "\n");
+    writer.printf(declaration, "TestModule", "\n" + actual + "\n");
     writer.println();
     return stringWriter.toString();
   }
