diff --git a/java/dagger/android/AndroidInjection.java b/java/dagger/android/AndroidInjection.java
index eb1be1d8f..a3d92d858 100644
--- a/java/dagger/android/AndroidInjection.java
+++ b/java/dagger/android/AndroidInjection.java
@@ -23,6 +23,7 @@
 import android.app.Fragment;
 import android.app.Service;
 import android.content.BroadcastReceiver;
+import android.content.ContentProvider;
 import android.content.Context;
 import android.util.Log;
 import dagger.internal.Beta;
@@ -174,5 +175,33 @@ public static void inject(BroadcastReceiver broadcastReceiver, Context context)
     broadcastReceiverInjector.inject(broadcastReceiver);
   }
 
+  /**
+   * Injects {@code contentProvider} if an associated {@link AndroidInjector} implementation can be
+   * found, otherwise throws an {@link IllegalArgumentException}.
+   *
+   * @throws RuntimeException if the {@link Application} doesn't implement {@link
+   *     HasContentProviderInjector}.
+   */
+  public static void inject(ContentProvider contentProvider) {
+    checkNotNull(contentProvider, "contentProvider");
+    Application application = (Application) contentProvider.getContext().getApplicationContext();
+    if (!(application instanceof HasContentProviderInjector)) {
+      throw new RuntimeException(
+          String.format(
+              "%s does not implement %s",
+              application.getClass().getCanonicalName(),
+              HasContentProviderInjector.class.getCanonicalName()));
+    }
+
+    AndroidInjector<ContentProvider> contentProviderInjector =
+        ((HasContentProviderInjector) application).contentProviderInjector();
+    checkNotNull(
+        contentProviderInjector,
+        "%s.contentProviderInjector() returned null",
+        application.getClass().getCanonicalName());
+
+    contentProviderInjector.inject(contentProvider);
+  }
+
   private AndroidInjection() {}
 }
diff --git a/java/dagger/android/ContentProviderKey.java b/java/dagger/android/ContentProviderKey.java
new file mode 100644
index 000000000..891821c89
--- /dev/null
+++ b/java/dagger/android/ContentProviderKey.java
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android;
+
+import static java.lang.annotation.ElementType.METHOD;
+
+import android.content.ContentProvider;
+import dagger.MapKey;
+import dagger.internal.Beta;
+import java.lang.annotation.Target;
+
+/** {@link MapKey} annotation to key bindings by a type of a {@link ContentProvider}. */
+@Beta
+@MapKey
+@Target(METHOD)
+public @interface ContentProviderKey {
+  Class<? extends ContentProvider> value();
+}
diff --git a/java/dagger/android/DaggerApplication.java b/java/dagger/android/DaggerApplication.java
new file mode 100644
index 000000000..4ea81b468
--- /dev/null
+++ b/java/dagger/android/DaggerApplication.java
@@ -0,0 +1,122 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android;
+
+import android.app.Activity;
+import android.app.Application;
+import android.app.Fragment;
+import android.app.Service;
+import android.content.BroadcastReceiver;
+import android.content.ContentProvider;
+import com.google.errorprone.annotations.ForOverride;
+import dagger.internal.Beta;
+import javax.inject.Inject;
+
+/**
+ * An {@link Application} that injects its members and can be used to inject {@link Activity}s,
+ * {@link Fragment}s, {@link Service}s, {@link BroadcastReceiver}s and {@link ContentProvider}s
+ * attached to it. Injection is performed in {@link #onCreate()} or the first call to {@link
+ * AndroidInjection#inject(ContentProvider)}, whichever happens first.
+ */
+@Beta
+public abstract class DaggerApplication extends Application
+    implements HasActivityInjector,
+        HasFragmentInjector,
+        HasServiceInjector,
+        HasBroadcastReceiverInjector,
+        HasContentProviderInjector {
+
+  @Inject DispatchingAndroidInjector<Activity> activityInjector;
+  @Inject DispatchingAndroidInjector<BroadcastReceiver> broadcastReceiverInjector;
+  @Inject DispatchingAndroidInjector<Fragment> fragmentInjector;
+  @Inject DispatchingAndroidInjector<Service> serviceInjector;
+  @Inject DispatchingAndroidInjector<ContentProvider> contentProviderInjector;
+  private volatile boolean needToInject = true;
+
+  @Override
+  public void onCreate() {
+    super.onCreate();
+    injectIfNecessary();
+  }
+
+  /**
+   * Implementations should return an {@link AndroidInjector} for the concrete {@link
+   * DaggerApplication}. Typically, that injector is a {@link dagger.Component}.
+   */
+  @ForOverride
+  protected abstract AndroidInjector<? extends DaggerApplication> applicationInjector();
+
+  /**
+   * Lazily injects the {@link DaggerApplication}'s members. Injection cannot be performed in {@link
+   * Application#onCreate()} since {@link android.content.ContentProvider}s' {@link
+   * android.content.ContentProvider#onCreate() onCreate()} method will be called first and might
+   * need injected members on the application. Injection is not performed in the the constructor, as
+   * that may result in members-injection methods being called before the constructor has completed,
+   * allowing for a partially-constructed instance to escape.
+   */
+  private void injectIfNecessary() {
+    if (needToInject) {
+      synchronized (this) {
+        if (needToInject) {
+          @SuppressWarnings("unchecked")
+          AndroidInjector<DaggerApplication> applicationInjector =
+              (AndroidInjector<DaggerApplication>) applicationInjector();
+          applicationInjector.inject(this);
+          if (needToInject) {
+            throw new IllegalStateException(
+                "The AndroidInjector returned from applicationInjector() did not inject the "
+                    + "DaggerApplication");
+          }
+        }
+      }
+    }
+  }
+
+  @Inject
+  void setInjected() {
+    needToInject = false;
+  }
+
+  @Override
+  public DispatchingAndroidInjector<Activity> activityInjector() {
+    return activityInjector;
+  }
+
+  @Override
+  public DispatchingAndroidInjector<Fragment> fragmentInjector() {
+    return fragmentInjector;
+  }
+
+  @Override
+  public DispatchingAndroidInjector<BroadcastReceiver> broadcastReceiverInjector() {
+    return broadcastReceiverInjector;
+  }
+
+  @Override
+  public DispatchingAndroidInjector<Service> serviceInjector() {
+    return serviceInjector;
+  }
+
+  // injectIfNecessary is called here but not on the other *Injector() methods because it is the
+  // only one that should be called (in AndroidInjection.inject(ContentProvider)) before
+  // Application.onCreate()
+  @Override
+  public AndroidInjector<ContentProvider> contentProviderInjector() {
+    injectIfNecessary();
+    return contentProviderInjector;
+  }
+}
diff --git a/java/dagger/android/DaggerBroadcastReceiver.java b/java/dagger/android/DaggerBroadcastReceiver.java
index 601c5a31e..430604a46 100644
--- a/java/dagger/android/DaggerBroadcastReceiver.java
+++ b/java/dagger/android/DaggerBroadcastReceiver.java
@@ -20,6 +20,7 @@
 import android.content.Context;
 import android.content.Intent;
 import android.support.annotation.CallSuper;
+import dagger.internal.Beta;
 
 /**
  * A {@link BroadcastReceiver} that injects its members in the first call to {@link
@@ -38,6 +39,7 @@
  * <p>Subclasses should override {@link #onReceive(Context, Intent)} and call {@code
  * super.onReceive(context, intent)} immediately to ensure injection is performed immediately.
  */
+@Beta
 public abstract class DaggerBroadcastReceiver extends BroadcastReceiver {
   @CallSuper
   @Override
diff --git a/java/dagger/android/DaggerContentProvider.java b/java/dagger/android/DaggerContentProvider.java
new file mode 100644
index 000000000..4aad4859a
--- /dev/null
+++ b/java/dagger/android/DaggerContentProvider.java
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android;
+
+import android.content.ContentProvider;
+import android.support.annotation.CallSuper;
+import dagger.internal.Beta;
+
+/** A {@link ContentProvider} that injects its members in {@link #onCreate()}. */
+@Beta
+public abstract class DaggerContentProvider extends ContentProvider {
+  @CallSuper
+  @Override
+  public boolean onCreate() {
+    AndroidInjection.inject(this);
+    return true;
+  }
+}
diff --git a/java/dagger/android/DaggerIntentService.java b/java/dagger/android/DaggerIntentService.java
index 865d18948..7d9dabb12 100644
--- a/java/dagger/android/DaggerIntentService.java
+++ b/java/dagger/android/DaggerIntentService.java
@@ -17,8 +17,10 @@
 package dagger.android;
 
 import android.app.IntentService;
+import dagger.internal.Beta;
 
 /** An {@link IntentService} that injects its members in {@link #onCreate()}. */
+@Beta
 public abstract class DaggerIntentService extends IntentService {
   public DaggerIntentService(String name) {
     super(name);
diff --git a/java/dagger/android/DaggerService.java b/java/dagger/android/DaggerService.java
index 8b37c1b76..cfc6d6b57 100644
--- a/java/dagger/android/DaggerService.java
+++ b/java/dagger/android/DaggerService.java
@@ -17,8 +17,10 @@
 package dagger.android;
 
 import android.app.Service;
+import dagger.internal.Beta;
 
 /** A {@link Service} that injects its members in {@link #onCreate()}. */
+@Beta
 public abstract class DaggerService extends Service {
   @Override
   public void onCreate() {
diff --git a/java/dagger/android/HasContentProviderInjector.java b/java/dagger/android/HasContentProviderInjector.java
new file mode 100644
index 000000000..997ddb88c
--- /dev/null
+++ b/java/dagger/android/HasContentProviderInjector.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright (C) 2016 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android;
+
+import android.content.ContentProvider;
+import dagger.internal.Beta;
+
+/** Provides an {@link AndroidInjector} of {@link ContentProvider}s. */
+@Beta
+public interface HasContentProviderInjector {
+
+  /** Returns an {@link AndroidInjector} of {@link ContentProvider}s. */
+  AndroidInjector<ContentProvider> contentProviderInjector();
+}
diff --git a/java/dagger/android/support/DaggerApplication.java b/java/dagger/android/support/DaggerApplication.java
new file mode 100644
index 000000000..294d2aad4
--- /dev/null
+++ b/java/dagger/android/support/DaggerApplication.java
@@ -0,0 +1,42 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android.support;
+
+import android.support.v4.app.Fragment;
+import dagger.android.AndroidInjector;
+import dagger.android.DispatchingAndroidInjector;
+import javax.inject.Inject;
+
+/**
+ * An {@link android.app.Application} that injects its members and can be used to inject {@link
+ * android.app.Activity}s, {@linkplain android.app.Fragment framework fragments}, {@linkplain
+ * Fragment support fragments}, {@link android.app.Service}s, {@link
+ * android.content.BroadcastReceiver}s, and {@link android.content.ContentProvider}s attached to it.
+ */
+public abstract class DaggerApplication extends dagger.android.DaggerApplication
+    implements HasSupportFragmentInjector {
+
+  @Inject DispatchingAndroidInjector<Fragment> supportFragmentInjector;
+
+  @Override
+  protected abstract AndroidInjector<? extends DaggerApplication> applicationInjector();
+
+  @Override
+  public DispatchingAndroidInjector<Fragment> supportFragmentInjector() {
+    return supportFragmentInjector;
+  }
+}
diff --git a/javatests/dagger/android/support/functional/AllControllersAreDirectChildrenOfApplication.java b/javatests/dagger/android/support/functional/AllControllersAreDirectChildrenOfApplication.java
index a72e82961..f3779bf0c 100644
--- a/javatests/dagger/android/support/functional/AllControllersAreDirectChildrenOfApplication.java
+++ b/javatests/dagger/android/support/functional/AllControllersAreDirectChildrenOfApplication.java
@@ -17,9 +17,9 @@
 package dagger.android.support.functional;
 
 import android.app.Activity;
-import android.app.Application;
 import android.app.Service;
 import android.content.BroadcastReceiver;
+import android.content.ContentProvider;
 import android.support.v4.app.Fragment;
 import dagger.Binds;
 import dagger.Component;
@@ -29,53 +29,30 @@
 import dagger.android.ActivityKey;
 import dagger.android.AndroidInjector;
 import dagger.android.BroadcastReceiverKey;
-import dagger.android.DispatchingAndroidInjector;
-import dagger.android.HasActivityInjector;
-import dagger.android.HasBroadcastReceiverInjector;
-import dagger.android.HasServiceInjector;
+import dagger.android.ContentProviderKey;
 import dagger.android.ServiceKey;
 import dagger.android.support.AndroidSupportInjectionModule;
+import dagger.android.support.DaggerApplication;
 import dagger.android.support.FragmentKey;
 import dagger.android.support.functional.AllControllersAreDirectChildrenOfApplication.ApplicationComponent.BroadcastReceiverSubcomponent.BroadcastReceiverModule;
+import dagger.android.support.functional.AllControllersAreDirectChildrenOfApplication.ApplicationComponent.ContentProviderSubcomponent.ContentProviderModule;
 import dagger.android.support.functional.AllControllersAreDirectChildrenOfApplication.ApplicationComponent.IntentServiceSubcomponent.IntentServiceModule;
 import dagger.android.support.functional.AllControllersAreDirectChildrenOfApplication.ApplicationComponent.ServiceSubcomponent.ServiceModule;
 import dagger.multibindings.IntoMap;
 import dagger.multibindings.IntoSet;
-import javax.inject.Inject;
 
-public final class AllControllersAreDirectChildrenOfApplication extends Application
-    implements HasActivityInjector, HasServiceInjector, HasBroadcastReceiverInjector {
-  @Inject DispatchingAndroidInjector<Activity> activityInjector;
-  @Inject DispatchingAndroidInjector<Service> serviceInjector;
-  @Inject DispatchingAndroidInjector<BroadcastReceiver> broadcastReceiverInjector;
+public final class AllControllersAreDirectChildrenOfApplication extends DaggerApplication {
 
   @Override
-  public void onCreate() {
-    super.onCreate();
-    DaggerAllControllersAreDirectChildrenOfApplication_ApplicationComponent.create().inject(this);
-  }
-
-  @Override
-  public AndroidInjector<Activity> activityInjector() {
-    return activityInjector;
-  }
-
-  @Override
-  public AndroidInjector<Service> serviceInjector() {
-    return serviceInjector;
-  }
-
-  @Override
-  public AndroidInjector<BroadcastReceiver> broadcastReceiverInjector() {
-    return broadcastReceiverInjector;
+  protected AndroidInjector<AllControllersAreDirectChildrenOfApplication> applicationInjector() {
+    return DaggerAllControllersAreDirectChildrenOfApplication_ApplicationComponent.create();
   }
 
   @Component(
     modules = {ApplicationComponent.ApplicationModule.class, AndroidSupportInjectionModule.class}
   )
-  interface ApplicationComponent {
-    void inject(AllControllersAreDirectChildrenOfApplication application);
-
+  interface ApplicationComponent
+      extends AndroidInjector<AllControllersAreDirectChildrenOfApplication> {
     @Module(
       subcomponents = {
         ActivitySubcomponent.class,
@@ -84,6 +61,7 @@ public void onCreate() {
         ServiceSubcomponent.class,
         IntentServiceSubcomponent.class,
         BroadcastReceiverSubcomponent.class,
+        ContentProviderSubcomponent.class
       }
     )
     abstract class ApplicationModule {
@@ -115,19 +93,25 @@ public void onCreate() {
       @IntoMap
       @ServiceKey(TestService.class)
       abstract AndroidInjector.Factory<? extends Service> bindFactoryForService(
-          ServiceSubcomponent.Builder b);
+          ServiceSubcomponent.Builder builder);
 
       @Binds
       @IntoMap
       @ServiceKey(TestIntentService.class)
       abstract AndroidInjector.Factory<? extends Service> bindFactoryForIntentService(
-          IntentServiceSubcomponent.Builder b);
+          IntentServiceSubcomponent.Builder builder);
 
       @Binds
       @IntoMap
       @BroadcastReceiverKey(TestBroadcastReceiver.class)
       abstract AndroidInjector.Factory<? extends BroadcastReceiver> bindFactoryForBroadcastReceiver(
-          BroadcastReceiverSubcomponent.Builder b);
+          BroadcastReceiverSubcomponent.Builder builder);
+
+      @Binds
+      @IntoMap
+      @ContentProviderKey(TestContentProvider.class)
+      abstract AndroidInjector.Factory<? extends ContentProvider> bindFactoryForContentProvider(
+          ContentProviderSubcomponent.Builder builder);
     }
 
     @Subcomponent(modules = ActivitySubcomponent.ActivityModule.class)
@@ -219,5 +203,20 @@ public void onCreate() {
         }
       }
     }
+
+    @Subcomponent(modules = ContentProviderModule.class)
+    interface ContentProviderSubcomponent extends AndroidInjector<TestContentProvider> {
+      @Subcomponent.Builder
+      abstract class Builder extends AndroidInjector.Builder<TestContentProvider> {}
+
+      @Module
+      abstract class ContentProviderModule {
+        @Provides
+        @IntoSet
+        static Class<?> addToComponentHierarchy() {
+          return ContentProviderSubcomponent.class;
+        }
+      }
+    }
   }
 }
diff --git a/javatests/dagger/android/support/functional/ComponentStructureFollowsControllerStructureApplication.java b/javatests/dagger/android/support/functional/ComponentStructureFollowsControllerStructureApplication.java
index 527d69f37..6e60b4f92 100644
--- a/javatests/dagger/android/support/functional/ComponentStructureFollowsControllerStructureApplication.java
+++ b/javatests/dagger/android/support/functional/ComponentStructureFollowsControllerStructureApplication.java
@@ -17,9 +17,9 @@
 package dagger.android.support.functional;
 
 import android.app.Activity;
-import android.app.Application;
 import android.app.Service;
 import android.content.BroadcastReceiver;
+import android.content.ContentProvider;
 import android.support.v4.app.Fragment;
 import dagger.Binds;
 import dagger.Component;
@@ -29,60 +29,39 @@
 import dagger.android.ActivityKey;
 import dagger.android.AndroidInjector;
 import dagger.android.BroadcastReceiverKey;
-import dagger.android.DispatchingAndroidInjector;
-import dagger.android.HasActivityInjector;
-import dagger.android.HasBroadcastReceiverInjector;
-import dagger.android.HasServiceInjector;
+import dagger.android.ContentProviderKey;
 import dagger.android.ServiceKey;
 import dagger.android.support.AndroidSupportInjectionModule;
+import dagger.android.support.DaggerApplication;
 import dagger.android.support.FragmentKey;
 import dagger.android.support.functional.ComponentStructureFollowsControllerStructureApplication.ApplicationComponent.BroadcastReceiverSubcomponent.BroadcastReceiverModule;
+import dagger.android.support.functional.ComponentStructureFollowsControllerStructureApplication.ApplicationComponent.ContentProviderSubcomponent.ContentProviderModule;
 import dagger.android.support.functional.ComponentStructureFollowsControllerStructureApplication.ApplicationComponent.IntentServiceSubcomponent.IntentServiceModule;
 import dagger.android.support.functional.ComponentStructureFollowsControllerStructureApplication.ApplicationComponent.ServiceSubcomponent.ServiceModule;
 import dagger.multibindings.IntoMap;
 import dagger.multibindings.IntoSet;
-import javax.inject.Inject;
 
-public final class ComponentStructureFollowsControllerStructureApplication extends Application
-    implements HasActivityInjector, HasServiceInjector, HasBroadcastReceiverInjector {
-  @Inject DispatchingAndroidInjector<Activity> activityInjector;
-  @Inject DispatchingAndroidInjector<Service> serviceInjector;
-  @Inject DispatchingAndroidInjector<BroadcastReceiver> broadcastReceiverInjector;
+public final class ComponentStructureFollowsControllerStructureApplication
+    extends DaggerApplication {
 
   @Override
-  public void onCreate() {
-    super.onCreate();
-    DaggerComponentStructureFollowsControllerStructureApplication_ApplicationComponent.create()
-        .inject(this);
-  }
-
-  @Override
-  public AndroidInjector<Activity> activityInjector() {
-    return activityInjector;
-  }
-
-  @Override
-  public AndroidInjector<Service> serviceInjector() {
-    return serviceInjector;
-  }
-
-  @Override
-  public AndroidInjector<BroadcastReceiver> broadcastReceiverInjector() {
-    return broadcastReceiverInjector;
+  protected AndroidInjector<? extends DaggerApplication> applicationInjector() {
+    return DaggerComponentStructureFollowsControllerStructureApplication_ApplicationComponent
+        .create();
   }
 
   @Component(
     modules = {ApplicationComponent.ApplicationModule.class, AndroidSupportInjectionModule.class}
   )
-  interface ApplicationComponent {
-    void inject(ComponentStructureFollowsControllerStructureApplication application);
-
+  interface ApplicationComponent
+      extends AndroidInjector<ComponentStructureFollowsControllerStructureApplication> {
     @Module(
       subcomponents = {
         ActivitySubcomponent.class,
         ServiceSubcomponent.class,
         IntentServiceSubcomponent.class,
         BroadcastReceiverSubcomponent.class,
+        ContentProviderSubcomponent.class,
       }
     )
     abstract class ApplicationModule {
@@ -102,19 +81,25 @@ public void onCreate() {
       @IntoMap
       @ServiceKey(TestService.class)
       abstract AndroidInjector.Factory<? extends Service> bindFactoryForService(
-          ServiceSubcomponent.Builder b);
+          ServiceSubcomponent.Builder builder);
 
       @Binds
       @IntoMap
       @ServiceKey(TestIntentService.class)
       abstract AndroidInjector.Factory<? extends Service> bindFactoryForIntentService(
-          IntentServiceSubcomponent.Builder b);
+          IntentServiceSubcomponent.Builder builder);
 
       @Binds
       @IntoMap
       @BroadcastReceiverKey(TestBroadcastReceiver.class)
       abstract AndroidInjector.Factory<? extends BroadcastReceiver> bindFactoryForBroadcastReceiver(
-          BroadcastReceiverSubcomponent.Builder b);
+          BroadcastReceiverSubcomponent.Builder builder);
+
+      @Binds
+      @IntoMap
+      @ContentProviderKey(TestContentProvider.class)
+      abstract AndroidInjector.Factory<? extends ContentProvider> bindFactoryForContentProvider(
+          ContentProviderSubcomponent.Builder builder);
     }
 
     @Subcomponent(modules = ActivitySubcomponent.ActivityModule.class)
@@ -218,5 +203,20 @@ public void onCreate() {
         }
       }
     }
+
+    @Subcomponent(modules = ContentProviderModule.class)
+    interface ContentProviderSubcomponent extends AndroidInjector<TestContentProvider> {
+      @Subcomponent.Builder
+      abstract class Builder extends AndroidInjector.Builder<TestContentProvider> {}
+
+      @Module
+      abstract class ContentProviderModule {
+        @Provides
+        @IntoSet
+        static Class<?> addToComponentHierarchy() {
+          return ContentProviderSubcomponent.class;
+        }
+      }
+    }
   }
 }
diff --git a/javatests/dagger/android/support/functional/InjectorsTest.java b/javatests/dagger/android/support/functional/InjectorsTest.java
index bf3a85b73..fe26ff507 100644
--- a/javatests/dagger/android/support/functional/InjectorsTest.java
+++ b/javatests/dagger/android/support/functional/InjectorsTest.java
@@ -42,6 +42,7 @@
   private TestService service;
   private TestIntentService intentService;
   private TestBroadcastReceiver broadcastReceiver;
+  private TestContentProvider contentProvider;
 
   @Before
   public void setUp() {
@@ -59,6 +60,8 @@ public void setUp() {
 
     broadcastReceiver = new TestBroadcastReceiver();
     broadcastReceiver.onReceive(RuntimeEnvironment.application, new Intent());
+
+    contentProvider = Robolectric.setupContentProvider(TestContentProvider.class);
   }
 
   @Test
@@ -106,6 +109,12 @@ public void componentStructureFollowsControllerStructure() {
             ComponentStructureFollowsControllerStructureApplication.ApplicationComponent
                 .BroadcastReceiverSubcomponent.class);
 
+    assertThat(contentProvider.componentHierarchy)
+        .containsExactly(
+            ComponentStructureFollowsControllerStructureApplication.ApplicationComponent.class,
+            ComponentStructureFollowsControllerStructureApplication.ApplicationComponent
+                .ContentProviderSubcomponent.class);
+
     changeConfiguration();
   }
 
@@ -131,8 +140,8 @@ public void AllControllersAreDirectChildrenOfApplication() {
     assertThat(service.componentHierarchy)
         .containsExactly(
             AllControllersAreDirectChildrenOfApplication.ApplicationComponent.class,
-            AllControllersAreDirectChildrenOfApplication.ApplicationComponent
-                .ServiceSubcomponent.class);
+            AllControllersAreDirectChildrenOfApplication.ApplicationComponent.ServiceSubcomponent
+                .class);
     assertThat(intentService.componentHierarchy)
         .containsExactly(
             AllControllersAreDirectChildrenOfApplication.ApplicationComponent.class,
@@ -145,6 +154,12 @@ public void AllControllersAreDirectChildrenOfApplication() {
             AllControllersAreDirectChildrenOfApplication.ApplicationComponent
                 .BroadcastReceiverSubcomponent.class);
 
+    assertThat(contentProvider.componentHierarchy)
+        .containsExactly(
+            AllControllersAreDirectChildrenOfApplication.ApplicationComponent.class,
+            AllControllersAreDirectChildrenOfApplication.ApplicationComponent
+                .ContentProviderSubcomponent.class);
+
     changeConfiguration();
   }
 
diff --git a/javatests/dagger/android/support/functional/TestContentProvider.java b/javatests/dagger/android/support/functional/TestContentProvider.java
new file mode 100644
index 000000000..1668ce647
--- /dev/null
+++ b/javatests/dagger/android/support/functional/TestContentProvider.java
@@ -0,0 +1,59 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.android.support.functional;
+
+import android.content.ContentValues;
+import android.database.Cursor;
+import android.net.Uri;
+import android.support.annotation.Nullable;
+import dagger.android.DaggerContentProvider;
+import java.util.Set;
+import javax.inject.Inject;
+
+public final class TestContentProvider extends DaggerContentProvider {
+  @Inject
+  Set<Class<?>> componentHierarchy;
+
+  @Nullable
+  @Override
+  public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs,
+      String sortOrder) {
+    throw new UnsupportedOperationException();
+  }
+
+  @Nullable
+  @Override
+  public String getType(Uri uri) {
+    throw new UnsupportedOperationException();
+  }
+
+  @Nullable
+  @Override
+  public Uri insert(Uri uri, ContentValues values) {
+    throw new UnsupportedOperationException();
+  }
+
+  @Override
+  public int delete(Uri uri, String selection, String[] selectionArgs) {
+    throw new UnsupportedOperationException();
+  }
+
+  @Override
+  public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {
+    throw new UnsupportedOperationException();
+  }
+}
