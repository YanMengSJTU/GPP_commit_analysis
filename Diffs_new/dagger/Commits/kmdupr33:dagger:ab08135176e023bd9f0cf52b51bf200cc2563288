diff --git a/java/dagger/internal/codegen/ContributionBinding.java b/java/dagger/internal/codegen/ContributionBinding.java
index 670675768..d8b94516b 100644
--- a/java/dagger/internal/codegen/ContributionBinding.java
+++ b/java/dagger/internal/codegen/ContributionBinding.java
@@ -25,6 +25,7 @@
 import static javax.lang.model.element.Modifier.ABSTRACT;
 import static javax.lang.model.element.Modifier.STATIC;
 
+import com.google.auto.common.MoreElements;
 import com.google.auto.common.MoreTypes;
 import com.google.common.base.Equivalence;
 import com.google.common.base.Equivalence.Wrapper;
@@ -182,6 +183,18 @@ boolean requiresModuleInstance() {
     return !modifiers.contains(ABSTRACT) && !modifiers.contains(STATIC);
   }
 
+  /**
+   * Returns {@code true} if {@link #bindingElement()} is present and is a method that returns a
+   * primitive type.
+   */
+  boolean contributesPrimitiveType() {
+    return bindingElement().isPresent()
+        && MoreElements.asExecutable(bindingElement().get())
+            .getReturnType()
+            .getKind()
+            .isPrimitive();
+  }
+
   /**
    * The strategy for getting an instance of a factory for a {@link ContributionBinding}.
    */
diff --git a/java/dagger/internal/codegen/PrivateMethodBindingExpression.java b/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
index 85611d8d5..f85659e82 100644
--- a/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
@@ -86,14 +86,9 @@ private MethodSpec createMethod(DependencyRequest.Kind requestKind) {
   }
 
   private TypeName returnType() {
-    // TODO(user): pull ProvisionBinding.providesPrimitiveType() up to ContributionBinding.
-    if (binding.bindingElement().isPresent()) {
-      TypeMirror moduleReturnType = asExecutable(binding.bindingElement().get()).getReturnType();
-      if (moduleReturnType.getKind().isPrimitive()) {
-        return TypeName.get(moduleReturnType);
-      }
-    }
-    return instanceType;
+    return binding.contributesPrimitiveType()
+        ? TypeName.get(asExecutable(binding.bindingElement().get()).getReturnType())
+        : instanceType;
   }
 
   /** Returns the canonical name for a no-arg dependency expression method. */
diff --git a/java/dagger/internal/codegen/ProvisionBinding.java b/java/dagger/internal/codegen/ProvisionBinding.java
index 67168ce5a..466def54d 100644
--- a/java/dagger/internal/codegen/ProvisionBinding.java
+++ b/java/dagger/internal/codegen/ProvisionBinding.java
@@ -105,23 +105,15 @@ private static Builder builder() {
         .provisionDependencies(ImmutableSet.of())
         .injectionSites(ImmutableSortedSet.of());
   }
-  
+
   abstract Builder toBuilder();
 
   boolean shouldCheckForNull(CompilerOptions compilerOptions) {
-    return !providesPrimitiveType()
+    return !contributesPrimitiveType()
         && !nullableType().isPresent()
         && compilerOptions.doCheckForNulls();
   }
 
-  private boolean providesPrimitiveType() {
-    return bindingElement().isPresent()
-        && MoreElements.asExecutable(bindingElement().get())
-            .getReturnType()
-            .getKind()
-            .isPrimitive();
-  }
-
   @AutoValue.Builder
   @CanIgnoreReturnValue
   abstract static class Builder extends ContributionBinding.Builder<Builder> {
