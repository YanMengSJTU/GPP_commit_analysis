diff --git a/java/dagger/internal/codegen/Key.java b/java/dagger/internal/codegen/Key.java
index 97057dabf..50d12bcc4 100644
--- a/java/dagger/internal/codegen/Key.java
+++ b/java/dagger/internal/codegen/Key.java
@@ -230,7 +230,7 @@ Key withoutMultibindingContributionIdentifier() {
   }
 
   boolean isValidMembersInjectionKey() {
-    return !qualifier().isPresent() && !type().getKind().equals(TypeKind.WILDCARD);
+    return !qualifier().isPresent() && type().getKind().equals(TypeKind.DECLARED);
   }
 
   /**
diff --git a/javatests/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
index cd4dba515..18e02de4b 100644
--- a/javatests/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
@@ -2185,6 +2185,26 @@ public void testDefaultPackage() {
             "test.B<? extends test.A> cannot be provided without an @Provides-annotated method");
   }
 
+  // https://github.com/google/dagger/issues/630
+  @Test
+  public void arrayKeyRequiresAtProvides() {
+    JavaFileObject component =
+        JavaFileObjects.forSourceLines(
+            "test.TestComponent",
+            "package test;",
+            "",
+            "import dagger.Component;",
+            "",
+            "@Component",
+            "interface TestComponent {",
+            "  String[] array();",
+            "}");
+    Compilation compilation = daggerCompiler().compile(component);
+    assertThat(compilation).failed();
+    assertThat(compilation)
+        .hadErrorContaining("String[] cannot be provided without an @Provides-annotated method");
+  }
+
   @Test
   public void componentImplicitlyDependsOnGeneratedType() {
     JavaFileObject injectableTypeFile = JavaFileObjects.forSourceLines("test.SomeInjectableType",
