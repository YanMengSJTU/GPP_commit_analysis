diff --git a/roadmap.md b/roadmap.md
index 5e05feb0a..2e06bbfaf 100644
--- a/roadmap.md
+++ b/roadmap.md
@@ -7,31 +7,6 @@ Updated: 2016-08
 
 This document outlines our planned features and team efforts.
 
-## Reference-releasing scopes
-
-When a binding is scoped, the generated component executes that
-binding (by calling the `@Provides` method or `@Inject` constructor) at most
-once (using double-checked locking) until the component instance is destroyed
-and caches the returned object for reuse during that lifetime.
-
-In environments with scarce memory, such as Android, it may be useful to let the
-cached values for some user-specified scoped providers be cleared under memory
-pressure.
-
-Reference-releasing scopes will provide an API by which:
-
-1.  Users may specify for a given scope that its providers should be able to
-    switch between a weak reference and a strong reference for their cached
-    values.
-
-1.  A component will have a hook to switch between strong references and weak
-    references for the providers within a given scope.
-
-Then, we will provide an Android-specific adpater by which reference-releasing
-scopes can coordinate with [`onTrimMemory(int)`] to ensure that Dagger
-components release references whenever an Android application finds itself under
-memory pressure.
-
 ## Adding subcomponents via modules
 
 While the logical structure of the component/subcomponent relationship is
diff --git a/semantics/advanced.md b/semantics/advanced.md
index faffab296..f0982ffc4 100644
--- a/semantics/advanced.md
+++ b/semantics/advanced.md
@@ -515,29 +515,3 @@ A -> B -> C -> D
 
 and suppose that a `@Reusable` binding is used in `D` and `G`. Then the binding
 is treated as being scoped in `B`.
-
-### Releasable scope
-
-Sometimes, you might only use a scope for performance reasons, not correctness.
-That is, you want some expensive objects to be optimistically cached, but you
-don't require this for the correctness of the application. In this case, in low
-memory environments, it can be useful to "release" those scoped objects (and
-allow them to be re-constructed), trading some CPU for memory.
-
-Dagger allows a scope to be annotated `@CanReleaseReferences`, which declares
-all scoped objects in this scope "releasable". When a scope is so annotated, a
-qualified `ReleasableReferenceManager` is available for injection:
-
-```java
-@ForReleasableReferences(MyScope.class) ReleasableReferenceManager
-```
-
-When the application would like to release some memory (e.g., it detects somehow
-that is in a low-memory situation), it may call
-`ReleasableReferenceManager#releaseStrongReferences()`, which changes all
-references from the component to scoped objects from strong to weak. This allows
-the garbage collector to collect these objects, if it chooses.
-
-If, later, the application decides it no longer is so memory constrained, it may
-call `ReleasableReferenceManager#restoreStrongReferences()` to revert the
-remaining (uncollected) weak references to strong references.
diff --git a/users-guide.md b/users-guide.md
index 898578f70..f400f4683 100644
--- a/users-guide.md
+++ b/users-guide.md
@@ -335,53 +335,6 @@ class CoffeeFilter {
 
 ```
 
-### Releasable references
-
-_**DEPRECATED:** This feature is deprecated and scheduled for removal in July
-2018._
-
-When a binding uses a scope annotation, that means that the component object
-holds a reference to the bound object until the component object itself is
-garbage-collected. In memory-sensitive environments such as Android, you may
-want to let scoped objects that are not currently being used be deleted during
-garbage collection when the application is under memory pressure.
-
-In that case, you can define a scope and annotate it with
-[`@CanReleaseReferences`].
-
-```java
-@Documented
-@Retention(RUNTIME)
-@CanReleaseReferences
-@Scope
-public @interface MyScope {}
-```
-
-When you determine that you want to allow objects held in that scope to be
-deleted during garbage collection if they're not currently being used by some
-other object, you can inject a [`ReleasableReferenceManager`] object for your
-scope and call `releaseStrongReferences()` on it, which will make the component
-hold a [`WeakReference`] to the object instead of a strong reference:
-
-```java
-@Inject @ForReleasableReferences(MyScope.class)
-ReleasableReferenceManager myScopeReferenceManager;
-
-void lowMemory() {
-  myScopeReferenceManager.releaseStrongReferences();
-}
-```
-
-If you determine that the memory pressure has receded, then you can restore the
-strong references for any cached objects that have not yet been deleted during
-garbage collection by calling `restoreStrongReferences()`:
-
-```java
-void highMemory() {
-  myScopeReferenceManager.restoreStrongReferences();
-}
-```
-
 ### Lazy injections
 
 Sometimes you need an object to be instantiated lazily.  For any binding `T`,
@@ -646,7 +599,6 @@ limitations under the License.
 [`@BindsOptionalOf`]: https://google.github.io/dagger/api/latest/dagger/BindsOptionalOf.html
 [BindsInstance]: https://google.github.io/dagger/api/latest/dagger/BindsInstance.html
 [Builder Pattern]: http://en.wikipedia.org/wiki/Builder_pattern
-[`@CanReleaseReferences`]: https://google.github.io/dagger/api/latest/dagger/releasablereferences/CanReleaseReferences.html
 [CoffeeMaker Example]: https://github.com/google/dagger/tree/master/examples/simple/src/main/java/coffee
 [Component#dependencies]: https://google.github.io/dagger/api/latest/dagger/Component.html#dependencies--
 [Component#provision-methods]: https://google.github.io/dagger/api/latest/dagger/Component.html#provision-methods
@@ -668,7 +620,6 @@ limitations under the License.
 [Provider]: http://docs.oracle.com/javaee/7/api/javax/inject/Provider.html
 [Provides]: https://google.github.io/dagger/api/latest/dagger/Provides.html
 [Qualifier]: http://docs.oracle.com/javaee/7/api/javax/inject/Qualifier.html
-[`ReleasableReferenceManager`]: https://google.github.io/dagger/api/latest/dagger/releasablereferences/ReleasableReferenceManager.html
 [`@Reusable`]: https://google.github.io/dagger/api/latest/dagger/Reusable.html
 [Scope]: http://docs.oracle.com/javaee/7/api/javax/inject/Scope.html
 [Singleton]: http://docs.oracle.com/javaee/7/api/javax/inject/Singleton.html
