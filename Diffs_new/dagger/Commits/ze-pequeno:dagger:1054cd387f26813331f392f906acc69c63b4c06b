diff --git a/javatests/dagger/producers/monitoring/TimingProductionComponentMonitorTest.java b/javatests/dagger/producers/monitoring/TimingProductionComponentMonitorTest.java
index 449b5a6e7..e6b3a8ec1 100644
--- a/javatests/dagger/producers/monitoring/TimingProductionComponentMonitorTest.java
+++ b/javatests/dagger/producers/monitoring/TimingProductionComponentMonitorTest.java
@@ -16,7 +16,7 @@
 
 package dagger.producers.monitoring;
 
-import static org.mockito.Mockito.any;
+import static org.mockito.ArgumentMatchers.nullable;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
@@ -46,7 +46,7 @@
   @Before
   public void setUp() {
     MockitoAnnotations.initMocks(this);
-    when(productionComponentTimingRecorderFactory.create(any(Object.class)))
+    when(productionComponentTimingRecorderFactory.create(nullable(Object.class)))
         .thenReturn(productionComponentTimingRecorder);
     when(
             productionComponentTimingRecorder.producerTimingRecorderFor(
diff --git a/javatests/dagger/producers/monitoring/TimingRecordersTest.java b/javatests/dagger/producers/monitoring/TimingRecordersTest.java
index 4e5d74f0a..ef72f24b6 100644
--- a/javatests/dagger/producers/monitoring/TimingRecordersTest.java
+++ b/javatests/dagger/producers/monitoring/TimingRecordersTest.java
@@ -17,8 +17,8 @@
 package dagger.producers.monitoring;
 
 import static com.google.common.truth.Truth.assertThat;
-import static org.mockito.Mockito.any;
-import static org.mockito.Mockito.anyLong;
+import static org.mockito.ArgumentMatchers.anyLong;
+import static org.mockito.ArgumentMatchers.nullable;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
@@ -73,7 +73,8 @@ public void zeroRecordersReturnsNoOp() {
 
   @Test
   public void singleRecorder_nullProductionComponentTimingRecorder() {
-    when(mockProductionComponentTimingRecorderFactory.create(any(Object.class))).thenReturn(null);
+    when(mockProductionComponentTimingRecorderFactory.create(nullable(Object.class)))
+        .thenReturn(null);
     ProductionComponentTimingRecorder.Factory factory =
         TimingRecorders.delegatingProductionComponentTimingRecorderFactory(
             ImmutableList.of(mockProductionComponentTimingRecorderFactory));
@@ -83,7 +84,7 @@ public void singleRecorder_nullProductionComponentTimingRecorder() {
 
   @Test
   public void singleRecorder_throwingProductionComponentTimingRecorderFactory() {
-    when(mockProductionComponentTimingRecorderFactory.create(any(Object.class)))
+    when(mockProductionComponentTimingRecorderFactory.create(nullable(Object.class)))
         .thenThrow(new RuntimeException("monkey"));
     ProductionComponentTimingRecorder.Factory factory =
         TimingRecorders.delegatingProductionComponentTimingRecorderFactory(
@@ -94,9 +95,10 @@ public void singleRecorder_throwingProductionComponentTimingRecorderFactory() {
 
   @Test
   public void singleRecorder_nullProducerTimingRecorder() {
-    when(mockProductionComponentTimingRecorderFactory.create(any(Object.class)))
+    when(mockProductionComponentTimingRecorderFactory.create(nullable(Object.class)))
         .thenReturn(mockProductionComponentTimingRecorder);
-    when(mockProductionComponentTimingRecorder.producerTimingRecorderFor(any(ProducerToken.class)))
+    when(mockProductionComponentTimingRecorder.producerTimingRecorderFor(
+            nullable(ProducerToken.class)))
         .thenReturn(null);
     ProductionComponentTimingRecorder.Factory factory =
         TimingRecorders.delegatingProductionComponentTimingRecorderFactory(
@@ -108,9 +110,10 @@ public void singleRecorder_nullProducerTimingRecorder() {
 
   @Test
   public void singleRecorder_throwingProductionComponentTimingRecorder() {
-    when(mockProductionComponentTimingRecorderFactory.create(any(Object.class)))
+    when(mockProductionComponentTimingRecorderFactory.create(nullable(Object.class)))
         .thenReturn(mockProductionComponentTimingRecorder);
-    when(mockProductionComponentTimingRecorder.producerTimingRecorderFor(any(ProducerToken.class)))
+    when(mockProductionComponentTimingRecorder.producerTimingRecorderFor(
+            nullable(ProducerToken.class)))
         .thenThrow(new RuntimeException("monkey"));
     ProductionComponentTimingRecorder.Factory factory =
         TimingRecorders.delegatingProductionComponentTimingRecorderFactory(
@@ -183,9 +186,12 @@ public void singleRecorder_throwingProducerTimingRecorderSuccess() {
 
   @Test
   public void multipleRecorders_nullProductionComponentTimingRecorders() {
-    when(mockProductionComponentTimingRecorderFactoryA.create(any(Object.class))).thenReturn(null);
-    when(mockProductionComponentTimingRecorderFactoryB.create(any(Object.class))).thenReturn(null);
-    when(mockProductionComponentTimingRecorderFactoryC.create(any(Object.class))).thenReturn(null);
+    when(mockProductionComponentTimingRecorderFactoryA.create(nullable(Object.class)))
+        .thenReturn(null);
+    when(mockProductionComponentTimingRecorderFactoryB.create(nullable(Object.class)))
+        .thenReturn(null);
+    when(mockProductionComponentTimingRecorderFactoryC.create(nullable(Object.class)))
+        .thenReturn(null);
     ProductionComponentTimingRecorder.Factory factory =
         TimingRecorders.delegatingProductionComponentTimingRecorderFactory(
             ImmutableList.of(
@@ -198,11 +204,11 @@ public void multipleRecorders_nullProductionComponentTimingRecorders() {
 
   @Test
   public void multipleRecorders_throwingProductionComponentTimingRecorderFactories() {
-    when(mockProductionComponentTimingRecorderFactoryA.create(any(Object.class)))
+    when(mockProductionComponentTimingRecorderFactoryA.create(nullable(Object.class)))
         .thenThrow(new RuntimeException("monkey"));
-    when(mockProductionComponentTimingRecorderFactoryB.create(any(Object.class)))
+    when(mockProductionComponentTimingRecorderFactoryB.create(nullable(Object.class)))
         .thenThrow(new RuntimeException("monkey"));
-    when(mockProductionComponentTimingRecorderFactoryC.create(any(Object.class)))
+    when(mockProductionComponentTimingRecorderFactoryC.create(nullable(Object.class)))
         .thenThrow(new RuntimeException("monkey"));
     ProductionComponentTimingRecorder.Factory factory =
         TimingRecorders.delegatingProductionComponentTimingRecorderFactory(
@@ -216,11 +222,14 @@ public void multipleRecorders_throwingProductionComponentTimingRecorderFactories
 
   @Test
   public void multipleRecorders_someNullProductionComponentTimingRecorders() {
-    when(mockProductionComponentTimingRecorderFactoryA.create(any(Object.class)))
+    when(mockProductionComponentTimingRecorderFactoryA.create(nullable(Object.class)))
         .thenReturn(mockProductionComponentTimingRecorderA);
-    when(mockProductionComponentTimingRecorderFactoryB.create(any(Object.class))).thenReturn(null);
-    when(mockProductionComponentTimingRecorderFactoryC.create(any(Object.class))).thenReturn(null);
-    when(mockProductionComponentTimingRecorderA.producerTimingRecorderFor(any(ProducerToken.class)))
+    when(mockProductionComponentTimingRecorderFactoryB.create(nullable(Object.class)))
+        .thenReturn(null);
+    when(mockProductionComponentTimingRecorderFactoryC.create(nullable(Object.class)))
+        .thenReturn(null);
+    when(mockProductionComponentTimingRecorderA.producerTimingRecorderFor(
+            nullable(ProducerToken.class)))
         .thenReturn(mockProducerTimingRecorderA);
     ProductionComponentTimingRecorder.Factory factory =
         TimingRecorders.delegatingProductionComponentTimingRecorderFactory(
@@ -243,13 +252,14 @@ public void multipleRecorders_someNullProductionComponentTimingRecorders() {
 
   @Test
   public void multipleRecorders_someThrowingProductionComponentTimingRecorderFactories() {
-    when(mockProductionComponentTimingRecorderFactoryA.create(any(Object.class)))
+    when(mockProductionComponentTimingRecorderFactoryA.create(nullable(Object.class)))
         .thenReturn(mockProductionComponentTimingRecorderA);
-    when(mockProductionComponentTimingRecorderFactoryB.create(any(Object.class)))
+    when(mockProductionComponentTimingRecorderFactoryB.create(nullable(Object.class)))
         .thenThrow(new RuntimeException("monkey"));
-    when(mockProductionComponentTimingRecorderFactoryC.create(any(Object.class)))
+    when(mockProductionComponentTimingRecorderFactoryC.create(nullable(Object.class)))
         .thenThrow(new RuntimeException("monkey"));
-    when(mockProductionComponentTimingRecorderA.producerTimingRecorderFor(any(ProducerToken.class)))
+    when(mockProductionComponentTimingRecorderA.producerTimingRecorderFor(
+            nullable(ProducerToken.class)))
         .thenReturn(mockProducerTimingRecorderA);
     ProductionComponentTimingRecorder.Factory factory =
         TimingRecorders.delegatingProductionComponentTimingRecorderFactory(
@@ -338,24 +348,28 @@ public void multipleRecorders_someThrowingProducerTimingRecordersSuccess() {
   }
 
   private void setUpNormalSingleRecorder() {
-    when(mockProductionComponentTimingRecorderFactory.create(any(Object.class)))
+    when(mockProductionComponentTimingRecorderFactory.create(nullable(Object.class)))
         .thenReturn(mockProductionComponentTimingRecorder);
-    when(mockProductionComponentTimingRecorder.producerTimingRecorderFor(any(ProducerToken.class)))
+    when(mockProductionComponentTimingRecorder.producerTimingRecorderFor(
+            nullable(ProducerToken.class)))
         .thenReturn(mockProducerTimingRecorder);
   }
 
   private void setUpNormalMultipleRecorders() {
-    when(mockProductionComponentTimingRecorderFactoryA.create(any(Object.class)))
+    when(mockProductionComponentTimingRecorderFactoryA.create(nullable(Object.class)))
         .thenReturn(mockProductionComponentTimingRecorderA);
-    when(mockProductionComponentTimingRecorderFactoryB.create(any(Object.class)))
+    when(mockProductionComponentTimingRecorderFactoryB.create(nullable(Object.class)))
         .thenReturn(mockProductionComponentTimingRecorderB);
-    when(mockProductionComponentTimingRecorderFactoryC.create(any(Object.class)))
+    when(mockProductionComponentTimingRecorderFactoryC.create(nullable(Object.class)))
         .thenReturn(mockProductionComponentTimingRecorderC);
-    when(mockProductionComponentTimingRecorderA.producerTimingRecorderFor(any(ProducerToken.class)))
+    when(mockProductionComponentTimingRecorderA.producerTimingRecorderFor(
+            nullable(ProducerToken.class)))
         .thenReturn(mockProducerTimingRecorderA);
-    when(mockProductionComponentTimingRecorderB.producerTimingRecorderFor(any(ProducerToken.class)))
+    when(mockProductionComponentTimingRecorderB.producerTimingRecorderFor(
+            nullable(ProducerToken.class)))
         .thenReturn(mockProducerTimingRecorderB);
-    when(mockProductionComponentTimingRecorderC.producerTimingRecorderFor(any(ProducerToken.class)))
+    when(mockProductionComponentTimingRecorderC.producerTimingRecorderFor(
+            nullable(ProducerToken.class)))
         .thenReturn(mockProducerTimingRecorderC);
   }
 }
diff --git a/javatests/dagger/producers/monitoring/internal/MonitorsTest.java b/javatests/dagger/producers/monitoring/internal/MonitorsTest.java
index 47ccccb2c..513de23e4 100644
--- a/javatests/dagger/producers/monitoring/internal/MonitorsTest.java
+++ b/javatests/dagger/producers/monitoring/internal/MonitorsTest.java
@@ -17,7 +17,7 @@
 package dagger.producers.monitoring.internal;
 
 import static com.google.common.truth.Truth.assertThat;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.nullable;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
@@ -65,7 +65,7 @@ public void zeroMonitorsReturnsNoOp() {
 
   @Test
   public void singleMonitor_nullProductionComponentMonitor() {
-    when(mockProductionComponentMonitorFactory.create(any(Object.class))).thenReturn(null);
+    when(mockProductionComponentMonitorFactory.create(nullable(Object.class))).thenReturn(null);
     ProductionComponentMonitor.Factory factory =
         Monitors.delegatingProductionComponentMonitorFactory(
             ImmutableList.of(mockProductionComponentMonitorFactory));
@@ -76,7 +76,7 @@ public void singleMonitor_nullProductionComponentMonitor() {
   public void singleMonitor_throwingProductionComponentMonitorFactory() {
     doThrow(new RuntimeException("monkey"))
         .when(mockProductionComponentMonitorFactory)
-        .create(any(Object.class));
+        .create(nullable(Object.class));
     ProductionComponentMonitor.Factory factory =
         Monitors.delegatingProductionComponentMonitorFactory(
             ImmutableList.of(mockProductionComponentMonitorFactory));
@@ -85,9 +85,9 @@ public void singleMonitor_throwingProductionComponentMonitorFactory() {
 
   @Test
   public void singleMonitor_nullProducerMonitor() {
-    when(mockProductionComponentMonitorFactory.create(any(Object.class)))
+    when(mockProductionComponentMonitorFactory.create(nullable(Object.class)))
         .thenReturn(mockProductionComponentMonitor);
-    when(mockProductionComponentMonitor.producerMonitorFor(any(ProducerToken.class)))
+    when(mockProductionComponentMonitor.producerMonitorFor(nullable(ProducerToken.class)))
         .thenReturn(null);
     ProductionComponentMonitor.Factory factory =
         Monitors.delegatingProductionComponentMonitorFactory(
@@ -99,11 +99,11 @@ public void singleMonitor_nullProducerMonitor() {
 
   @Test
   public void singleMonitor_throwingProductionComponentMonitor() {
-    when(mockProductionComponentMonitorFactory.create(any(Object.class)))
+    when(mockProductionComponentMonitorFactory.create(nullable(Object.class)))
         .thenReturn(mockProductionComponentMonitor);
     doThrow(new RuntimeException("monkey"))
         .when(mockProductionComponentMonitor)
-        .producerMonitorFor(any(ProducerToken.class));
+        .producerMonitorFor(nullable(ProducerToken.class));
     ProductionComponentMonitor.Factory factory =
         Monitors.delegatingProductionComponentMonitorFactory(
             ImmutableList.of(mockProductionComponentMonitorFactory));
@@ -164,7 +164,9 @@ public void singleMonitor_throwingProducerMonitorSuccess() {
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitor).requested();
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitor).methodStarting();
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitor).methodFinished();
-    doThrow(new RuntimeException("monkey")).when(mockProducerMonitor).succeeded(any(Object.class));
+    doThrow(new RuntimeException("monkey"))
+        .when(mockProducerMonitor)
+        .succeeded(nullable(Object.class));
     ProductionComponentMonitor.Factory factory =
         Monitors.delegatingProductionComponentMonitorFactory(
             ImmutableList.of(mockProductionComponentMonitorFactory));
@@ -191,7 +193,9 @@ public void singleMonitor_throwingProducerMonitorFailure() {
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitor).requested();
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitor).methodStarting();
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitor).methodFinished();
-    doThrow(new RuntimeException("monkey")).when(mockProducerMonitor).failed(any(Throwable.class));
+    doThrow(new RuntimeException("monkey"))
+        .when(mockProducerMonitor)
+        .failed(nullable(Throwable.class));
     ProductionComponentMonitor.Factory factory =
         Monitors.delegatingProductionComponentMonitorFactory(
             ImmutableList.of(mockProductionComponentMonitorFactory));
@@ -214,9 +218,9 @@ public void singleMonitor_throwingProducerMonitorFailure() {
 
   @Test
   public void multipleMonitors_nullProductionComponentMonitors() {
-    when(mockProductionComponentMonitorFactoryA.create(any(Object.class))).thenReturn(null);
-    when(mockProductionComponentMonitorFactoryB.create(any(Object.class))).thenReturn(null);
-    when(mockProductionComponentMonitorFactoryC.create(any(Object.class))).thenReturn(null);
+    when(mockProductionComponentMonitorFactoryA.create(nullable(Object.class))).thenReturn(null);
+    when(mockProductionComponentMonitorFactoryB.create(nullable(Object.class))).thenReturn(null);
+    when(mockProductionComponentMonitorFactoryC.create(nullable(Object.class))).thenReturn(null);
     ProductionComponentMonitor.Factory factory =
         Monitors.delegatingProductionComponentMonitorFactory(
             ImmutableList.of(
@@ -230,13 +234,13 @@ public void multipleMonitors_nullProductionComponentMonitors() {
   public void multipleMonitors_throwingProductionComponentMonitorFactories() {
     doThrow(new RuntimeException("monkey"))
         .when(mockProductionComponentMonitorFactoryA)
-        .create(any(Object.class));
+        .create(nullable(Object.class));
     doThrow(new RuntimeException("monkey"))
         .when(mockProductionComponentMonitorFactoryB)
-        .create(any(Object.class));
+        .create(nullable(Object.class));
     doThrow(new RuntimeException("monkey"))
         .when(mockProductionComponentMonitorFactoryC)
-        .create(any(Object.class));
+        .create(nullable(Object.class));
     ProductionComponentMonitor.Factory factory =
         Monitors.delegatingProductionComponentMonitorFactory(
             ImmutableList.of(
@@ -248,11 +252,11 @@ public void multipleMonitors_throwingProductionComponentMonitorFactories() {
 
   @Test
   public void multipleMonitors_someNullProductionComponentMonitors() {
-    when(mockProductionComponentMonitorFactoryA.create(any(Object.class)))
+    when(mockProductionComponentMonitorFactoryA.create(nullable(Object.class)))
         .thenReturn(mockProductionComponentMonitorA);
-    when(mockProductionComponentMonitorFactoryB.create(any(Object.class))).thenReturn(null);
-    when(mockProductionComponentMonitorFactoryC.create(any(Object.class))).thenReturn(null);
-    when(mockProductionComponentMonitorA.producerMonitorFor(any(ProducerToken.class)))
+    when(mockProductionComponentMonitorFactoryB.create(nullable(Object.class))).thenReturn(null);
+    when(mockProductionComponentMonitorFactoryC.create(nullable(Object.class))).thenReturn(null);
+    when(mockProductionComponentMonitorA.producerMonitorFor(nullable(ProducerToken.class)))
         .thenReturn(mockProducerMonitorA);
     ProductionComponentMonitor.Factory factory =
         Monitors.delegatingProductionComponentMonitorFactory(
@@ -280,15 +284,15 @@ public void multipleMonitors_someNullProductionComponentMonitors() {
 
   @Test
   public void multipleMonitors_someThrowingProductionComponentMonitorFactories() {
-    when(mockProductionComponentMonitorFactoryA.create(any(Object.class)))
+    when(mockProductionComponentMonitorFactoryA.create(nullable(Object.class)))
         .thenReturn(mockProductionComponentMonitorA);
     doThrow(new RuntimeException("monkey"))
         .when(mockProductionComponentMonitorFactoryB)
-        .create(any(Object.class));
+        .create(nullable(Object.class));
     doThrow(new RuntimeException("monkey"))
         .when(mockProductionComponentMonitorFactoryC)
-        .create(any(Object.class));
-    when(mockProductionComponentMonitorA.producerMonitorFor(any(ProducerToken.class)))
+        .create(nullable(Object.class));
+    when(mockProductionComponentMonitorA.producerMonitorFor(nullable(ProducerToken.class)))
         .thenReturn(mockProducerMonitorA);
     ProductionComponentMonitor.Factory factory =
         Monitors.delegatingProductionComponentMonitorFactory(
@@ -390,7 +394,9 @@ public void multipleMonitors_someThrowingProducerMonitorsSuccess() {
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitorA).requested();
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitorA).methodStarting();
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitorB).methodFinished();
-    doThrow(new RuntimeException("monkey")).when(mockProducerMonitorC).succeeded(any(Object.class));
+    doThrow(new RuntimeException("monkey"))
+        .when(mockProducerMonitorC)
+        .succeeded(nullable(Object.class));
     ProductionComponentMonitor.Factory factory =
         Monitors.delegatingProductionComponentMonitorFactory(
             ImmutableList.of(
@@ -429,7 +435,9 @@ public void multipleMonitors_someThrowingProducerMonitorsFailure() {
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitorA).requested();
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitorA).methodStarting();
     doThrow(new RuntimeException("monkey")).when(mockProducerMonitorB).methodFinished();
-    doThrow(new RuntimeException("monkey")).when(mockProducerMonitorC).failed(any(Throwable.class));
+    doThrow(new RuntimeException("monkey"))
+        .when(mockProducerMonitorC)
+        .failed(nullable(Throwable.class));
     ProductionComponentMonitor.Factory factory =
         Monitors.delegatingProductionComponentMonitorFactory(
             ImmutableList.of(
@@ -463,24 +471,24 @@ public void multipleMonitors_someThrowingProducerMonitorsFailure() {
   }
 
   private void setUpNormalSingleMonitor() {
-    when(mockProductionComponentMonitorFactory.create(any(Object.class)))
+    when(mockProductionComponentMonitorFactory.create(nullable(Object.class)))
         .thenReturn(mockProductionComponentMonitor);
-    when(mockProductionComponentMonitor.producerMonitorFor(any(ProducerToken.class)))
+    when(mockProductionComponentMonitor.producerMonitorFor(nullable(ProducerToken.class)))
         .thenReturn(mockProducerMonitor);
   }
 
   private void setUpNormalMultipleMonitors() {
-    when(mockProductionComponentMonitorFactoryA.create(any(Object.class)))
+    when(mockProductionComponentMonitorFactoryA.create(nullable(Object.class)))
         .thenReturn(mockProductionComponentMonitorA);
-    when(mockProductionComponentMonitorFactoryB.create(any(Object.class)))
+    when(mockProductionComponentMonitorFactoryB.create(nullable(Object.class)))
         .thenReturn(mockProductionComponentMonitorB);
-    when(mockProductionComponentMonitorFactoryC.create(any(Object.class)))
+    when(mockProductionComponentMonitorFactoryC.create(nullable(Object.class)))
         .thenReturn(mockProductionComponentMonitorC);
-    when(mockProductionComponentMonitorA.producerMonitorFor(any(ProducerToken.class)))
+    when(mockProductionComponentMonitorA.producerMonitorFor(nullable(ProducerToken.class)))
         .thenReturn(mockProducerMonitorA);
-    when(mockProductionComponentMonitorB.producerMonitorFor(any(ProducerToken.class)))
+    when(mockProductionComponentMonitorB.producerMonitorFor(nullable(ProducerToken.class)))
         .thenReturn(mockProducerMonitorB);
-    when(mockProductionComponentMonitorC.producerMonitorFor(any(ProducerToken.class)))
+    when(mockProductionComponentMonitorC.producerMonitorFor(nullable(ProducerToken.class)))
         .thenReturn(mockProducerMonitorC);
   }
 }
