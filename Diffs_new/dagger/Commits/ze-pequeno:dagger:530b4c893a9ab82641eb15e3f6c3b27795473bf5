diff --git a/javatests/dagger/android/support/functional/InjectorsTest.java b/javatests/dagger/android/support/functional/InjectorsTest.java
index e66d70261..c5cb15026 100644
--- a/javatests/dagger/android/support/functional/InjectorsTest.java
+++ b/javatests/dagger/android/support/functional/InjectorsTest.java
@@ -232,7 +232,7 @@ public void usesGeneratedModules() {
     TestActivityWithScope activityWithScope =
         Robolectric.setupActivity(TestActivityWithScope.class);
     assertThat(activityWithScope.scopedStringProvider.get())
-        .isSameAs(activityWithScope.scopedStringProvider.get());
+        .isSameInstanceAs(activityWithScope.scopedStringProvider.get());
 
     OuterClass.TestInnerClassActivity innerClassActivity =
         Robolectric.setupActivity(OuterClass.TestInnerClassActivity.class);
diff --git a/javatests/dagger/functional/BasicTest.java b/javatests/dagger/functional/BasicTest.java
index 0745cb652..80fc5e675 100644
--- a/javatests/dagger/functional/BasicTest.java
+++ b/javatests/dagger/functional/BasicTest.java
@@ -83,30 +83,31 @@
   }
 
   @Theory public void primitiveArrays(BasicComponent basicComponent) {
-    assertThat(basicComponent.getByteArray()).isSameAs(BOUND_BYTE_ARRAY);
-    assertThat(basicComponent.getCharArray()).isSameAs(BOUND_CHAR_ARRAY);
-    assertThat(basicComponent.getShortArray()).isSameAs(BOUND_SHORT_ARRAY);
-    assertThat(basicComponent.getIntArray()).isSameAs(BOUND_INT_ARRAY);
-    assertThat(basicComponent.getLongArray()).isSameAs(BOUND_LONG_ARRAY);
-    assertThat(basicComponent.getBooleanArray()).isSameAs(BOUND_BOOLEAN_ARRAY);
-    assertThat(basicComponent.getFloatArray()).isSameAs(BOUND_FLOAT_ARRAY);
-    assertThat(basicComponent.getDoubleArray()).isSameAs(BOUND_DOUBLE_ARRAY);
+    assertThat(basicComponent.getByteArray()).isSameInstanceAs(BOUND_BYTE_ARRAY);
+    assertThat(basicComponent.getCharArray()).isSameInstanceAs(BOUND_CHAR_ARRAY);
+    assertThat(basicComponent.getShortArray()).isSameInstanceAs(BOUND_SHORT_ARRAY);
+    assertThat(basicComponent.getIntArray()).isSameInstanceAs(BOUND_INT_ARRAY);
+    assertThat(basicComponent.getLongArray()).isSameInstanceAs(BOUND_LONG_ARRAY);
+    assertThat(basicComponent.getBooleanArray()).isSameInstanceAs(BOUND_BOOLEAN_ARRAY);
+    assertThat(basicComponent.getFloatArray()).isSameInstanceAs(BOUND_FLOAT_ARRAY);
+    assertThat(basicComponent.getDoubleArray()).isSameInstanceAs(BOUND_DOUBLE_ARRAY);
   }
 
   @Theory public void primitiveArrayProviders(BasicComponent basicComponent) {
-    assertThat(basicComponent.getByteArrayProvider().get()).isSameAs(BOUND_BYTE_ARRAY);
-    assertThat(basicComponent.getCharArrayProvider().get()).isSameAs(BOUND_CHAR_ARRAY);
-    assertThat(basicComponent.getShortArrayProvider().get()).isSameAs(BOUND_SHORT_ARRAY);
-    assertThat(basicComponent.getIntArrayProvider().get()).isSameAs(BOUND_INT_ARRAY);
-    assertThat(basicComponent.getLongArrayProvider().get()).isSameAs(BOUND_LONG_ARRAY);
-    assertThat(basicComponent.getBooleanArrayProvider().get()).isSameAs(BOUND_BOOLEAN_ARRAY);
-    assertThat(basicComponent.getFloatArrayProvider().get()).isSameAs(BOUND_FLOAT_ARRAY);
-    assertThat(basicComponent.getDoubleArrayProvider().get()).isSameAs(BOUND_DOUBLE_ARRAY);
+    assertThat(basicComponent.getByteArrayProvider().get()).isSameInstanceAs(BOUND_BYTE_ARRAY);
+    assertThat(basicComponent.getCharArrayProvider().get()).isSameInstanceAs(BOUND_CHAR_ARRAY);
+    assertThat(basicComponent.getShortArrayProvider().get()).isSameInstanceAs(BOUND_SHORT_ARRAY);
+    assertThat(basicComponent.getIntArrayProvider().get()).isSameInstanceAs(BOUND_INT_ARRAY);
+    assertThat(basicComponent.getLongArrayProvider().get()).isSameInstanceAs(BOUND_LONG_ARRAY);
+    assertThat(basicComponent.getBooleanArrayProvider().get())
+        .isSameInstanceAs(BOUND_BOOLEAN_ARRAY);
+    assertThat(basicComponent.getFloatArrayProvider().get()).isSameInstanceAs(BOUND_FLOAT_ARRAY);
+    assertThat(basicComponent.getDoubleArrayProvider().get()).isSameInstanceAs(BOUND_DOUBLE_ARRAY);
   }
 
   @Theory public void noOpMembersInjection(BasicComponent basicComponent) {
     Object object = new Object();
-    assertThat(basicComponent.noOpMembersInjection(object)).isSameAs(object);
+    assertThat(basicComponent.noOpMembersInjection(object)).isSameInstanceAs(object);
   }
 
   @Theory public void basicObject_noDeps(BasicComponent basicComponent) {
@@ -131,8 +132,8 @@ public void providerOfLazy(BasicComponent basicComponent) {
     Lazy<InjectedThing> lazyInjectedThing1 = lazyInjectedThingProvider.get();
     Lazy<InjectedThing> lazyInjectedThing2 = lazyInjectedThingProvider.get();
     assertThat(lazyInjectedThing2).isNotSameInstanceAs(lazyInjectedThing1);
-    assertThat(lazyInjectedThing1.get()).isSameAs(lazyInjectedThing1.get());
-    assertThat(lazyInjectedThing2.get()).isSameAs(lazyInjectedThing2.get());
+    assertThat(lazyInjectedThing1.get()).isSameInstanceAs(lazyInjectedThing1.get());
+    assertThat(lazyInjectedThing2.get()).isSameInstanceAs(lazyInjectedThing2.get());
     assertThat(lazyInjectedThing2.get()).isNotSameInstanceAs(lazyInjectedThing1.get());
   }
 }
diff --git a/javatests/dagger/functional/GenericTest.java b/javatests/dagger/functional/GenericTest.java
index d1a09de39..3e4a2717e 100644
--- a/javatests/dagger/functional/GenericTest.java
+++ b/javatests/dagger/functional/GenericTest.java
@@ -130,11 +130,11 @@
   @Test public void singletonScopesAppliesToEachResolvedType() {
     SingletonGenericComponent component = DaggerSingletonGenericComponent.create();
     ScopedGeneric<A> a = component.scopedGenericA();
-    assertThat(a).isSameAs(component.scopedGenericA());
+    assertThat(a).isSameInstanceAs(component.scopedGenericA());
     assertThat(a.t).isNotNull();
 
     ScopedGeneric<B> b = component.scopedGenericB();
-    assertThat(b).isSameAs(component.scopedGenericB());
+    assertThat(b).isSameInstanceAs(component.scopedGenericB());
     assertThat(b.t).isNotNull();
 
     assertThat(a).isNotSameInstanceAs(b);
@@ -144,10 +144,10 @@
   public void scopedSimpleGenerics() {
     SingletonGenericComponent component = DaggerSingletonGenericComponent.create();
     ScopedSimpleGeneric<A> a = component.scopedSimpleGenericA();
-    assertThat(a).isSameAs(component.scopedSimpleGenericA());
+    assertThat(a).isSameInstanceAs(component.scopedSimpleGenericA());
 
     ScopedSimpleGeneric<B> b = component.scopedSimpleGenericB();
-    assertThat(b).isSameAs(component.scopedSimpleGenericB());
+    assertThat(b).isSameInstanceAs(component.scopedSimpleGenericB());
 
     assertThat(a).isNotSameInstanceAs(b);
   }
diff --git a/javatests/dagger/functional/LazyMapsTest.java b/javatests/dagger/functional/LazyMapsTest.java
index a3e289a4c..a441653b1 100644
--- a/javatests/dagger/functional/LazyMapsTest.java
+++ b/javatests/dagger/functional/LazyMapsTest.java
@@ -36,7 +36,7 @@ public void mapOfLazies() {
 
     String firstGet = laziesMap.get("key").get();
     assertThat(firstGet).isEqualTo("value-1");
-    assertThat(firstGet).isSameAs(laziesMap.get("key").get());
+    assertThat(firstGet).isSameInstanceAs(laziesMap.get("key").get());
 
     assertThat(component.mapOfLazy().get("key").get()).isEqualTo("value-2");
   }
diff --git a/javatests/dagger/functional/ReusableTest.java b/javatests/dagger/functional/ReusableTest.java
index 3c0f91a32..221b28891 100644
--- a/javatests/dagger/functional/ReusableTest.java
+++ b/javatests/dagger/functional/ReusableTest.java
@@ -33,15 +33,15 @@ public void testReusable() {
     ChildTwo childTwo = parent.childTwo();
 
     Object reusableInParent = parent.reusableInParent();
-    assertThat(parent.reusableInParent()).isSameAs(reusableInParent);
-    assertThat(childOne.reusableInParent()).isSameAs(reusableInParent);
-    assertThat(childTwo.reusableInParent()).isSameAs(reusableInParent);
+    assertThat(parent.reusableInParent()).isSameInstanceAs(reusableInParent);
+    assertThat(childOne.reusableInParent()).isSameInstanceAs(reusableInParent);
+    assertThat(childTwo.reusableInParent()).isSameInstanceAs(reusableInParent);
 
     Object reusableFromChildOne = childOne.reusableInChild();
-    assertThat(childOne.reusableInChild()).isSameAs(reusableFromChildOne);
+    assertThat(childOne.reusableInChild()).isSameInstanceAs(reusableFromChildOne);
 
     Object reusableFromChildTwo = childTwo.reusableInChild();
-    assertThat(childTwo.reusableInChild()).isSameAs(reusableFromChildTwo);
+    assertThat(childTwo.reusableInChild()).isSameInstanceAs(reusableFromChildTwo);
 
     assertThat(reusableFromChildTwo).isNotSameInstanceAs(reusableFromChildOne);
   }
diff --git a/javatests/dagger/functional/binds/BindsTest.java b/javatests/dagger/functional/binds/BindsTest.java
index 11695bcfe..999c30327 100644
--- a/javatests/dagger/functional/binds/BindsTest.java
+++ b/javatests/dagger/functional/binds/BindsTest.java
@@ -44,7 +44,7 @@ public void bindDelegates() {
   @Test
   public void bindWithScope() {
     assertThat(component.qualifiedFooOfStrings())
-        .isSameAs(component.qualifiedFooOfStrings());
+        .isSameInstanceAs(component.qualifiedFooOfStrings());
   }
 
   @Test
diff --git a/javatests/dagger/functional/cycle/DoubleCheckCycleTest.java b/javatests/dagger/functional/cycle/DoubleCheckCycleTest.java
index f6c2818f4..b77ee3ea1 100644
--- a/javatests/dagger/functional/cycle/DoubleCheckCycleTest.java
+++ b/javatests/dagger/functional/cycle/DoubleCheckCycleTest.java
@@ -95,7 +95,7 @@ public void testNonReentrant() {
     assertThat(callCount.get()).isEqualTo(1);
     Object second = component.getObject();
     assertThat(callCount.get()).isEqualTo(1);
-    assertThat(first).isSameAs(second);
+    assertThat(first).isSameInstanceAs(second);
   }
 
   @Test
@@ -122,7 +122,7 @@ public void testReentrant() {
     assertThat(callCount.get()).isEqualTo(2);
     Object second = component.getReentrantObject();
     assertThat(callCount.get()).isEqualTo(2);
-    assertThat(first).isSameAs(second);
+    assertThat(first).isSameInstanceAs(second);
   }
 
   @Test
diff --git a/javatests/dagger/functional/factory/FactoryMixedParametersTest.java b/javatests/dagger/functional/factory/FactoryMixedParametersTest.java
index 3c8e2ca78..733c673fd 100644
--- a/javatests/dagger/functional/factory/FactoryMixedParametersTest.java
+++ b/javatests/dagger/functional/factory/FactoryMixedParametersTest.java
@@ -66,7 +66,7 @@ public void mixedArgComponent() {
     assertThat(component.getDouble()).isEqualTo(3.0);
     assertThat(component.object()).isEqualTo("bar");
     assertThat(component.getLong()).isEqualTo(2L);
-    assertThat(component.randomProvider().get()).isSameAs(random);
-    assertThat(component.randomProvider().get()).isSameAs(random);
+    assertThat(component.randomProvider().get()).isSameInstanceAs(random);
+    assertThat(component.randomProvider().get()).isSameInstanceAs(random);
   }
 }
diff --git a/javatests/dagger/functional/producers/ProducerFactoryTest.java b/javatests/dagger/functional/producers/ProducerFactoryTest.java
index 7b6520351..c85e34231 100644
--- a/javatests/dagger/functional/producers/ProducerFactoryTest.java
+++ b/javatests/dagger/functional/producers/ProducerFactoryTest.java
@@ -155,7 +155,7 @@ public void failureMonitor() throws Exception {
       producer.get().get();
       fail();
     } catch (ExecutionException e) {
-      assertThat(e).hasCauseThat().isSameAs(t);
+      assertThat(e).hasCauseThat().isSameInstanceAs(t);
       order.verify(monitor).failed(t);
     }
 
diff --git a/javatests/dagger/functional/producers/binds/BindsProducersTest.java b/javatests/dagger/functional/producers/binds/BindsProducersTest.java
index a8c61fee4..0949f022d 100644
--- a/javatests/dagger/functional/producers/binds/BindsProducersTest.java
+++ b/javatests/dagger/functional/producers/binds/BindsProducersTest.java
@@ -46,7 +46,7 @@ public void bindDelegates() throws Exception {
   @Test
   public void bindWithScope() throws Exception {
     assertThat(component.qualifiedFooOfStrings().get())
-        .isSameAs(component.qualifiedFooOfStrings().get());
+        .isSameInstanceAs(component.qualifiedFooOfStrings().get());
   }
 
   @Test
diff --git a/javatests/dagger/functional/producers/monitoring/MonitoringTest.java b/javatests/dagger/functional/producers/monitoring/MonitoringTest.java
index 3c01198e5..543835f60 100644
--- a/javatests/dagger/functional/producers/monitoring/MonitoringTest.java
+++ b/javatests/dagger/functional/producers/monitoring/MonitoringTest.java
@@ -153,7 +153,7 @@ public void basicMonitoringWithFailure() throws Exception {
       output.get();
       fail();
     } catch (ExecutionException e) {
-      assertThat(Throwables.getRootCause(e)).isSameAs(cause);
+      assertThat(Throwables.getRootCause(e)).isSameInstanceAs(cause);
     }
   }
 
diff --git a/javatests/dagger/functional/producers/provisions/ProvisionsTest.java b/javatests/dagger/functional/producers/provisions/ProvisionsTest.java
index 06f307432..47ed2a295 100644
--- a/javatests/dagger/functional/producers/provisions/ProvisionsTest.java
+++ b/javatests/dagger/functional/producers/provisions/ProvisionsTest.java
@@ -31,6 +31,6 @@
   public void provisionsOnlyAreHeldInOneProducer() throws Exception {
     TestComponent component = DaggerProvisions_TestComponent.create();
     Output output = component.output().get();
-    assertThat(output.injectedClass1).isSameAs(output.injectedClass2);
+    assertThat(output.injectedClass1).isSameInstanceAs(output.injectedClass2);
   }
 }
diff --git a/javatests/dagger/functional/producers/scope/ScopeTest.java b/javatests/dagger/functional/producers/scope/ScopeTest.java
index aaa4219b5..9cfd2c2bb 100644
--- a/javatests/dagger/functional/producers/scope/ScopeTest.java
+++ b/javatests/dagger/functional/producers/scope/ScopeTest.java
@@ -29,6 +29,6 @@
   public void scope() throws Exception {
     SetComponent component = DaggerSetComponent.create();
     assertThat(component.set().get()).hasSize(1);
-    assertThat(component.scopedObject()).isSameAs(component.scopedObject());
+    assertThat(component.scopedObject()).isSameInstanceAs(component.scopedObject());
   }
 }
diff --git a/javatests/dagger/functional/subcomponent/SubcomponentTest.java b/javatests/dagger/functional/subcomponent/SubcomponentTest.java
index 428de643d..c34de0a2b 100644
--- a/javatests/dagger/functional/subcomponent/SubcomponentTest.java
+++ b/javatests/dagger/functional/subcomponent/SubcomponentTest.java
@@ -53,21 +53,22 @@ public SubcomponentTest(ParentGetters parentGetters, ChildComponent childCompone
   @Test
   public void scopePropagatesUpward_class() {
     assertThat(childComponent.requiresSingleton().singletonType())
-        .isSameAs(childComponent.requiresSingleton().singletonType());
+        .isSameInstanceAs(childComponent.requiresSingleton().singletonType());
     assertThat(childComponent.requiresSingleton().singletonType())
-        .isSameAs(childComponent.newGrandchildComponent().requiresSingleton().singletonType());
+        .isSameInstanceAs(
+            childComponent.newGrandchildComponent().requiresSingleton().singletonType());
   }
 
   @Test
   public void scopePropagatesUpward_provides() {
-    assertThat(childComponent
-        .requiresSingleton().unscopedTypeBoundAsSingleton())
-            .isSameAs(childComponent
-                .requiresSingleton().unscopedTypeBoundAsSingleton());
-    assertThat(childComponent
-        .requiresSingleton().unscopedTypeBoundAsSingleton())
-            .isSameAs(childComponent.newGrandchildComponent()
-                .requiresSingleton().unscopedTypeBoundAsSingleton());
+    assertThat(childComponent.requiresSingleton().unscopedTypeBoundAsSingleton())
+        .isSameInstanceAs(childComponent.requiresSingleton().unscopedTypeBoundAsSingleton());
+    assertThat(childComponent.requiresSingleton().unscopedTypeBoundAsSingleton())
+        .isSameInstanceAs(
+            childComponent
+                .newGrandchildComponent()
+                .requiresSingleton()
+                .unscopedTypeBoundAsSingleton());
   }
 
   @Test
@@ -88,11 +89,9 @@ public void multibindingContributions() {
   public void unscopedProviders() {
     assume().that(System.getProperty("dagger.mode")).doesNotContain("FastInit");
     assertThat(parentGetters.getUnscopedTypeProvider())
-        .isSameAs(childComponent.getUnscopedTypeProvider());
+        .isSameInstanceAs(childComponent.getUnscopedTypeProvider());
     assertThat(parentGetters.getUnscopedTypeProvider())
-        .isSameAs(childComponent
-            .newGrandchildComponent()
-            .getUnscopedTypeProvider());
+        .isSameInstanceAs(childComponent.newGrandchildComponent().getUnscopedTypeProvider());
   }
 
   @Test
diff --git a/javatests/dagger/functional/subcomponent/repeat/RepeatedModuleTest.java b/javatests/dagger/functional/subcomponent/repeat/RepeatedModuleTest.java
index 7b447ebc1..9bf3a3938 100644
--- a/javatests/dagger/functional/subcomponent/repeat/RepeatedModuleTest.java
+++ b/javatests/dagger/functional/subcomponent/repeat/RepeatedModuleTest.java
@@ -37,7 +37,7 @@ public void initializeParentComponent() {
   public void repeatedModuleHasSameStateInSubcomponent() {
     SubcomponentWithRepeatedModule childComponent =
         parentComponent.newChildComponentBuilder().build();
-    assertThat(parentComponent.state()).isSameAs(childComponent.state());
+    assertThat(parentComponent.state()).isSameInstanceAs(childComponent.state());
   }
 
   @Test
@@ -46,7 +46,7 @@ public void repeatedModuleHasSameStateInGrandchildSubcomponent() {
         parentComponent.newChildComponentWithoutRepeatedModule();
     SubcomponentWithRepeatedModule grandchildComponent =
         childComponent.newGrandchildBuilder().build();
-    assertThat(parentComponent.state()).isSameAs(grandchildComponent.state());
+    assertThat(parentComponent.state()).isSameInstanceAs(grandchildComponent.state());
   }
 
   @Test
diff --git a/javatests/dagger/internal/DoubleCheckTest.java b/javatests/dagger/internal/DoubleCheckTest.java
index 20abbe566..e36c1bcee 100644
--- a/javatests/dagger/internal/DoubleCheckTest.java
+++ b/javatests/dagger/internal/DoubleCheckTest.java
@@ -63,13 +63,13 @@ public void lazy_nullPointerException() {
   @Test
   public void doubleWrapping_provider() {
     assertThat(DoubleCheck.provider(DOUBLE_CHECK_OBJECT_PROVIDER))
-        .isSameAs(DOUBLE_CHECK_OBJECT_PROVIDER);
+        .isSameInstanceAs(DOUBLE_CHECK_OBJECT_PROVIDER);
   }
 
   @Test
   public void doubleWrapping_lazy() {
     assertThat(DoubleCheck.lazy(DOUBLE_CHECK_OBJECT_PROVIDER))
-        .isSameAs(DOUBLE_CHECK_OBJECT_PROVIDER);
+        .isSameInstanceAs(DOUBLE_CHECK_OBJECT_PROVIDER);
   }
 
   @Test
@@ -142,7 +142,7 @@ public Object get() {
        return object;
      });
     doubleCheckReference.set(doubleCheck);
-    assertThat(doubleCheck.get()).isSameAs(object);
+    assertThat(doubleCheck.get()).isSameInstanceAs(object);
   }
 
   @Test public void reentranceReturningDifferentInstances_throwsIllegalStateException() {
@@ -165,6 +165,6 @@ public Object get() {
   @Test
   public void instanceFactoryAsLazyDoesNotWrap() {
     Factory<Object> factory = InstanceFactory.create(new Object());
-    assertThat(DoubleCheck.lazy(factory)).isSameAs(factory);
+    assertThat(DoubleCheck.lazy(factory)).isSameInstanceAs(factory);
   }
 }
diff --git a/javatests/dagger/internal/codegen/ExpressionTest.java b/javatests/dagger/internal/codegen/ExpressionTest.java
index e6fe0d115..3b1ce1121 100644
--- a/javatests/dagger/internal/codegen/ExpressionTest.java
+++ b/javatests/dagger/internal/codegen/ExpressionTest.java
@@ -53,7 +53,7 @@ public void castTo() {
 
     Expression castTo = expression.castTo(supertype);
 
-    assertThat(castTo.type()).isSameAs(supertype);
+    assertThat(castTo.type()).isSameInstanceAs(supertype);
     assertThat(castTo.codeBlock().toString())
         .isEqualTo(
             "(dagger.internal.codegen.ExpressionTest.Supertype) "
diff --git a/javatests/dagger/producers/ProducedTest.java b/javatests/dagger/producers/ProducedTest.java
index c2028f2f6..5804141cc 100644
--- a/javatests/dagger/producers/ProducedTest.java
+++ b/javatests/dagger/producers/ProducedTest.java
@@ -35,7 +35,7 @@
     Object o = new Object();
     assertThat(Produced.successful(5).get()).isEqualTo(5);
     assertThat(Produced.successful("monkey").get()).isEqualTo("monkey");
-    assertThat(Produced.successful(o).get()).isSameAs(o);
+    assertThat(Produced.successful(o).get()).isSameInstanceAs(o);
   }
 
   @Test public void failedProduced() {
@@ -44,7 +44,7 @@
       Produced.failed(cause).get();
       fail();
     } catch (ExecutionException e) {
-      assertThat(e).hasCauseThat().isSameAs(cause);
+      assertThat(e).hasCauseThat().isSameInstanceAs(cause);
     }
   }
 
diff --git a/javatests/dagger/producers/internal/AbstractProducesMethodProducerTest.java b/javatests/dagger/producers/internal/AbstractProducesMethodProducerTest.java
index ab09ace2e..b29cb3c0d 100644
--- a/javatests/dagger/producers/internal/AbstractProducesMethodProducerTest.java
+++ b/javatests/dagger/producers/internal/AbstractProducesMethodProducerTest.java
@@ -101,7 +101,7 @@ public void monitor_failure() throws Exception {
       future.get();
       fail();
     } catch (ExecutionException e) {
-      assertThat(e).hasCauseThat().isSameAs(t);
+      assertThat(e).hasCauseThat().isSameInstanceAs(t);
     }
     verify(monitor).failed(t);
     verifyNoMoreInteractions(monitor);
diff --git a/javatests/dagger/producers/internal/MapOfProducerProducerTest.java b/javatests/dagger/producers/internal/MapOfProducerProducerTest.java
index 11fa2d3d2..f4be15c01 100644
--- a/javatests/dagger/producers/internal/MapOfProducerProducerTest.java
+++ b/javatests/dagger/producers/internal/MapOfProducerProducerTest.java
@@ -61,7 +61,7 @@ public void failingContributionDoesNotFailMap() throws Exception {
       map.get(42).get().get();
       fail();
     } catch (ExecutionException e) {
-      assertThat(e).hasCauseThat().isSameAs(cause);
+      assertThat(e).hasCauseThat().isSameInstanceAs(cause);
     }
   }
 }
diff --git a/javatests/dagger/producers/internal/MapProducerTest.java b/javatests/dagger/producers/internal/MapProducerTest.java
index 72bd9eb9a..f74bc4150 100644
--- a/javatests/dagger/producers/internal/MapProducerTest.java
+++ b/javatests/dagger/producers/internal/MapProducerTest.java
@@ -55,7 +55,7 @@ public void failingContribution() throws Exception {
       mapProducer.get().get();
       fail();
     } catch (ExecutionException e) {
-      assertThat(e).hasCauseThat().isSameAs(cause);
+      assertThat(e).hasCauseThat().isSameInstanceAs(cause);
     }
   }
 }
diff --git a/javatests/dagger/producers/monitoring/TimingRecordersTest.java b/javatests/dagger/producers/monitoring/TimingRecordersTest.java
index ef0f21872..4e5d74f0a 100644
--- a/javatests/dagger/producers/monitoring/TimingRecordersTest.java
+++ b/javatests/dagger/producers/monitoring/TimingRecordersTest.java
@@ -67,7 +67,8 @@ public void zeroRecordersReturnsNoOp() {
     ProductionComponentTimingRecorder.Factory factory =
         TimingRecorders.delegatingProductionComponentTimingRecorderFactory(
             ImmutableList.<ProductionComponentTimingRecorder.Factory>of());
-    assertThat(factory).isSameAs(TimingRecorders.noOpProductionComponentTimingRecorderFactory());
+    assertThat(factory)
+        .isSameInstanceAs(TimingRecorders.noOpProductionComponentTimingRecorderFactory());
   }
 
   @Test
@@ -77,7 +78,7 @@ public void singleRecorder_nullProductionComponentTimingRecorder() {
         TimingRecorders.delegatingProductionComponentTimingRecorderFactory(
             ImmutableList.of(mockProductionComponentTimingRecorderFactory));
     assertThat(factory.create(new Object()))
-        .isSameAs(TimingRecorders.noOpProductionComponentTimingRecorder());
+        .isSameInstanceAs(TimingRecorders.noOpProductionComponentTimingRecorder());
   }
 
   @Test
@@ -88,7 +89,7 @@ public void singleRecorder_throwingProductionComponentTimingRecorderFactory() {
         TimingRecorders.delegatingProductionComponentTimingRecorderFactory(
             ImmutableList.of(mockProductionComponentTimingRecorderFactory));
     assertThat(factory.create(new Object()))
-        .isSameAs(TimingRecorders.noOpProductionComponentTimingRecorder());
+        .isSameInstanceAs(TimingRecorders.noOpProductionComponentTimingRecorder());
   }
 
   @Test
@@ -102,7 +103,7 @@ public void singleRecorder_nullProducerTimingRecorder() {
             ImmutableList.of(mockProductionComponentTimingRecorderFactory));
     ProductionComponentTimingRecorder recorder = factory.create(new Object());
     assertThat(recorder.producerTimingRecorderFor(ProducerToken.create(Object.class)))
-        .isSameAs(ProducerTimingRecorder.noOp());
+        .isSameInstanceAs(ProducerTimingRecorder.noOp());
   }
 
   @Test
@@ -116,7 +117,7 @@ public void singleRecorder_throwingProductionComponentTimingRecorder() {
             ImmutableList.of(mockProductionComponentTimingRecorderFactory));
     ProductionComponentTimingRecorder recorder = factory.create(new Object());
     assertThat(recorder.producerTimingRecorderFor(ProducerToken.create(Object.class)))
-        .isSameAs(ProducerTimingRecorder.noOp());
+        .isSameInstanceAs(ProducerTimingRecorder.noOp());
   }
 
   @Test
@@ -192,7 +193,7 @@ public void multipleRecorders_nullProductionComponentTimingRecorders() {
                 mockProductionComponentTimingRecorderFactoryB,
                 mockProductionComponentTimingRecorderFactoryC));
     assertThat(factory.create(new Object()))
-        .isSameAs(TimingRecorders.noOpProductionComponentTimingRecorder());
+        .isSameInstanceAs(TimingRecorders.noOpProductionComponentTimingRecorder());
   }
 
   @Test
@@ -210,7 +211,7 @@ public void multipleRecorders_throwingProductionComponentTimingRecorderFactories
                 mockProductionComponentTimingRecorderFactoryB,
                 mockProductionComponentTimingRecorderFactoryC));
     assertThat(factory.create(new Object()))
-        .isSameAs(TimingRecorders.noOpProductionComponentTimingRecorder());
+        .isSameInstanceAs(TimingRecorders.noOpProductionComponentTimingRecorder());
   }
 
   @Test
diff --git a/javatests/dagger/producers/monitoring/internal/MonitorsTest.java b/javatests/dagger/producers/monitoring/internal/MonitorsTest.java
index 5ed6b9d6e..47ccccb2c 100644
--- a/javatests/dagger/producers/monitoring/internal/MonitorsTest.java
+++ b/javatests/dagger/producers/monitoring/internal/MonitorsTest.java
@@ -60,7 +60,7 @@ public void zeroMonitorsReturnsNoOp() {
     ProductionComponentMonitor.Factory factory =
         Monitors.delegatingProductionComponentMonitorFactory(
             ImmutableList.<ProductionComponentMonitor.Factory>of());
-    assertThat(factory).isSameAs(ProductionComponentMonitor.Factory.noOp());
+    assertThat(factory).isSameInstanceAs(ProductionComponentMonitor.Factory.noOp());
   }
 
   @Test
@@ -69,7 +69,7 @@ public void singleMonitor_nullProductionComponentMonitor() {
     ProductionComponentMonitor.Factory factory =
         Monitors.delegatingProductionComponentMonitorFactory(
             ImmutableList.of(mockProductionComponentMonitorFactory));
-    assertThat(factory.create(new Object())).isSameAs(ProductionComponentMonitor.noOp());
+    assertThat(factory.create(new Object())).isSameInstanceAs(ProductionComponentMonitor.noOp());
   }
 
   @Test
@@ -80,7 +80,7 @@ public void singleMonitor_throwingProductionComponentMonitorFactory() {
     ProductionComponentMonitor.Factory factory =
         Monitors.delegatingProductionComponentMonitorFactory(
             ImmutableList.of(mockProductionComponentMonitorFactory));
-    assertThat(factory.create(new Object())).isSameAs(ProductionComponentMonitor.noOp());
+    assertThat(factory.create(new Object())).isSameInstanceAs(ProductionComponentMonitor.noOp());
   }
 
   @Test
@@ -94,7 +94,7 @@ public void singleMonitor_nullProducerMonitor() {
             ImmutableList.of(mockProductionComponentMonitorFactory));
     ProductionComponentMonitor monitor = factory.create(new Object());
     assertThat(monitor.producerMonitorFor(ProducerToken.create(Object.class)))
-        .isSameAs(ProducerMonitor.noOp());
+        .isSameInstanceAs(ProducerMonitor.noOp());
   }
 
   @Test
@@ -109,7 +109,7 @@ public void singleMonitor_throwingProductionComponentMonitor() {
             ImmutableList.of(mockProductionComponentMonitorFactory));
     ProductionComponentMonitor monitor = factory.create(new Object());
     assertThat(monitor.producerMonitorFor(ProducerToken.create(Object.class)))
-        .isSameAs(ProducerMonitor.noOp());
+        .isSameInstanceAs(ProducerMonitor.noOp());
   }
 
   @Test
@@ -223,7 +223,7 @@ public void multipleMonitors_nullProductionComponentMonitors() {
                 mockProductionComponentMonitorFactoryA,
                 mockProductionComponentMonitorFactoryB,
                 mockProductionComponentMonitorFactoryC));
-    assertThat(factory.create(new Object())).isSameAs(ProductionComponentMonitor.noOp());
+    assertThat(factory.create(new Object())).isSameInstanceAs(ProductionComponentMonitor.noOp());
   }
 
   @Test
@@ -243,7 +243,7 @@ public void multipleMonitors_throwingProductionComponentMonitorFactories() {
                 mockProductionComponentMonitorFactoryA,
                 mockProductionComponentMonitorFactoryB,
                 mockProductionComponentMonitorFactoryC));
-    assertThat(factory.create(new Object())).isSameAs(ProductionComponentMonitor.noOp());
+    assertThat(factory.create(new Object())).isSameInstanceAs(ProductionComponentMonitor.noOp());
   }
 
   @Test
