diff --git a/java/dagger/internal/codegen/CompilerOptions.java b/java/dagger/internal/codegen/CompilerOptions.java
index b2310e392..d1aa53c90 100644
--- a/java/dagger/internal/codegen/CompilerOptions.java
+++ b/java/dagger/internal/codegen/CompilerOptions.java
@@ -48,6 +48,19 @@
    */
   abstract boolean experimentalAndroidMode();
 
+  /**
+   * Returns true if the experimental Android mode 2 is enabled.
+   *
+   * <p><b>Warning: Do Not use! This flag is for internal, experimental use only!</b>
+   *
+   * <p>Issues related to this flag will not be supported. This flag could break your build,
+   * or cause other unknown issues at runtime.
+   *
+   * <p>If enabled, the generated code will try to reduce class loading due to providers by using
+   * a single {@code Provider} class to replace all factory classes.
+   */
+  abstract boolean experimentalAndroidMode2();
+
   abstract boolean writeProducerNameInToken();
 
   abstract Diagnostic.Kind nullableValidationKind();
@@ -80,6 +93,8 @@ static CompilerOptions create(ProcessingEnvironment processingEnv, DaggerElement
         .headerCompilation(processingEnv.getOptions().containsKey(HEADER_COMPILATION))
         .experimentalAndroidMode(
             experimentalAndroidModeFeatureStatus(processingEnv).equals(FeatureStatus.ENABLED))
+        .experimentalAndroidMode2(
+            experimentalAndroidMode2FeatureStatus(processingEnv).equals(FeatureStatus.ENABLED))
         .writeProducerNameInToken(
             writeProducerNameInTokenFeatureStatus(processingEnv).equals(FeatureStatus.ENABLED))
         .nullableValidationKind(nullableValidationType(processingEnv).diagnosticKind().get())
@@ -107,6 +122,8 @@ static CompilerOptions create(ProcessingEnvironment processingEnv, DaggerElement
 
     Builder experimentalAndroidMode(boolean experimentalAndroidMode);
 
+    Builder experimentalAndroidMode2(boolean experimentalAndroidMode2);
+
     Builder writeProducerNameInToken(boolean writeProducerNameInToken);
 
     Builder nullableValidationKind(Diagnostic.Kind kind);
@@ -132,6 +149,8 @@ Builder warnIfInjectionFactoryNotGeneratedUpstream(
 
   static final String EXPERIMENTAL_ANDROID_MODE = "dagger.experimentalAndroidMode";
 
+  static final String EXPERIMENTAL_ANDROID_MODE2 = "dagger.experimentalAndroidMode2";
+
   static final String WRITE_PRODUCER_NAME_IN_TOKEN_KEY = "dagger.writeProducerNameInToken";
 
   static final String DISABLE_INTER_COMPONENT_SCOPE_VALIDATION_KEY =
@@ -180,6 +199,15 @@ private static FeatureStatus experimentalAndroidModeFeatureStatus(
         EnumSet.allOf(FeatureStatus.class));
   }
 
+  private static FeatureStatus experimentalAndroidMode2FeatureStatus(
+      ProcessingEnvironment processingEnv) {
+    return valueOf(
+        processingEnv,
+        EXPERIMENTAL_ANDROID_MODE2,
+        FeatureStatus.DISABLED,
+        EnumSet.allOf(FeatureStatus.class));
+  }
+
   private static FeatureStatus writeProducerNameInTokenFeatureStatus(
       ProcessingEnvironment processingEnv) {
     return valueOf(
diff --git a/java/dagger/internal/codegen/KytheBindingGraphFactory.java b/java/dagger/internal/codegen/KytheBindingGraphFactory.java
index ba65f8ed4..894e86fdd 100644
--- a/java/dagger/internal/codegen/KytheBindingGraphFactory.java
+++ b/java/dagger/internal/codegen/KytheBindingGraphFactory.java
@@ -105,6 +105,7 @@ private static BindingGraphFactory createBindingGraphFactory(
             .scopeCycleValidationType(ValidationType.NONE)
             .warnIfInjectionFactoryNotGeneratedUpstream(false)
             .experimentalAndroidMode(false)
+            .experimentalAndroidMode2(false)
             .aheadOfTimeComponents(false)
             .build();
 
diff --git a/test_defs.bzl b/test_defs.bzl
index 1b42eb466..ddffe1667 100644
--- a/test_defs.bzl
+++ b/test_defs.bzl
@@ -16,6 +16,7 @@
 # The key will be appended to the generated test names to ensure uniqueness.
 BUILD_VARIANTS = {
     "ExperimentalAndroidMode": ["-Adagger.experimentalAndroidMode=enabled"],
+    "ExperimentalAndroidMode2": ["-Adagger.experimentalAndroidMode2=enabled"],
     "ExperimentalAheadOfTimeComponents": ["-Adagger.experimentalAheadOfTimeComponents=enabled"],
     "ExperimentalAndroidModeAndAheadOfTimeComponents": ["-Adagger.experimentalAndroidMode=enabled",
                                                         "-Adagger.experimentalAheadOfTimeComponents=enabled"],
