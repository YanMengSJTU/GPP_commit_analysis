diff --git a/BUILD b/BUILD
index 4e8b7c4ac..f0abdeb48 100644
--- a/BUILD
+++ b/BUILD
@@ -58,7 +58,6 @@ jarjar_library(
     jars = [
         "//java/dagger/internal/codegen:binding_graph_validation",
         "//java/dagger/internal/codegen:processor",
-        "//java/dagger/internal/codegen:validation",
         "//java/dagger/internal/codegen:writing",
         "//java/dagger/internal/codegen/base",
         "//java/dagger/internal/codegen/binding",
@@ -67,6 +66,7 @@ jarjar_library(
         "//java/dagger/internal/codegen/javapoet",
         "//java/dagger/internal/codegen/langmodel",
         "//java/dagger/internal/codegen/statistics",
+        "//java/dagger/internal/codegen/validation",
         "//java/dagger/model:internal-proxies",
         "//java/dagger/errorprone",
         "@com_google_auto_auto_common//jar",
@@ -79,7 +79,6 @@ jarjar_library(
     jars = [
         "//java/dagger/internal/codegen:libbinding_graph_validation-src.jar",
         "//java/dagger/internal/codegen:libprocessor-src.jar",
-        "//java/dagger/internal/codegen:libvalidation-src.jar",
         "//java/dagger/internal/codegen:libwriting-src.jar",
         "//java/dagger/internal/codegen/base:libbase-src.jar",
         "//java/dagger/internal/codegen/binding:libbinding-src.jar",
@@ -88,6 +87,7 @@ jarjar_library(
         "//java/dagger/internal/codegen/javapoet:libjavapoet-src.jar",
         "//java/dagger/internal/codegen/langmodel:liblangmodel-src.jar",
         "//java/dagger/internal/codegen/statistics:libstatistics-src.jar",
+        "//java/dagger/internal/codegen/validation:libvalidation-src.jar",
         # TODO(ronshapiro): is there a generated src.jar for protos in Bazel?
         "//java/dagger/errorprone:liberrorprone-src.jar",
     ],
diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index 768adab2b..44fb3b599 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -71,54 +71,6 @@ java_library(
     ],
 )
 
-# Code related to validating the user-written Dagger code
-java_library(
-    name = "validation",
-    srcs = [
-        "AnyBindingMethodValidator.java",
-        "BindingElementValidator.java",
-        "BindingGraphPlugins.java",
-        "BindingGraphValidator.java",
-        "BindingMethodProcessingStep.java",
-        "BindingMethodValidator.java",
-        "BindsInstanceElementValidator.java",
-        "BindsInstanceMethodValidator.java",
-        "BindsInstanceParameterValidator.java",
-        "BindsInstanceProcessingStep.java",
-        "BindsMethodValidator.java",
-        "BindsOptionalOfMethodValidator.java",
-        "ComponentCreatorValidator.java",
-        "ComponentDescriptorValidator.java",
-        "ComponentHierarchyValidator.java",
-        "ComponentValidator.java",
-        "DependencyRequestValidator.java",
-        "DiagnosticReporterFactory.java",
-        "InjectValidator.java",
-        "MapKeyValidator.java",
-        "MembersInjectionValidator.java",
-        "ModuleValidator.java",
-        "MonitoringModuleGenerator.java",
-        "MonitoringModuleProcessingStep.java",
-        "MultibindingAnnotationsProcessingStep.java",
-        "MultibindsMethodValidator.java",
-        "ProducesMethodValidator.java",
-        "ProvidesMethodValidator.java",
-        "TypeCheckingProcessingStep.java",
-        "Validation.java",
-        "ValidationReport.java",
-    ],
-    plugins = CODEGEN_PLUGINS,
-    tags = ["maven:merged"],
-    deps = CODEGEN_DEPS + [
-        "//java/dagger/internal/codegen/base",
-        "//java/dagger/internal/codegen/binding",
-        "//java/dagger/internal/codegen/compileroption",
-        "//java/dagger/internal/codegen/extension",
-        "//java/dagger/internal/codegen/javapoet",
-        "//java/dagger/internal/codegen/langmodel",
-    ],
-)
-
 java_library(
     name = "binding_graph_validation",
     srcs = [
@@ -136,12 +88,12 @@ java_library(
     plugins = CODEGEN_PLUGINS,
     tags = ["maven:merged"],
     deps = CODEGEN_DEPS + [
-        ":validation",
         "//java/dagger/internal/codegen/base",
         "//java/dagger/internal/codegen/binding",
         "//java/dagger/internal/codegen/compileroption",
         "//java/dagger/internal/codegen/extension",
         "//java/dagger/internal/codegen/langmodel",
+        "//java/dagger/internal/codegen/validation",
     ],
 )
 
@@ -232,7 +184,6 @@ java_library(
     name = "processor",
     srcs = [
         "BindingGraphValidationModule.java",
-        "BindingMethodValidatorsModule.java",
         "ComponentCreatorImplementationFactory.java",
         "ComponentGenerator.java",
         "ComponentHjarProcessingStep.java",
@@ -258,7 +209,6 @@ java_library(
     deps = CODEGEN_DEPS + [
         ":binding_graph_validation",
         ":writing",
-        ":validation",
         "//java/dagger/internal/codegen/base",
         "//java/dagger/internal/codegen/binding",
         "//java/dagger/internal/codegen/compileroption",
@@ -266,6 +216,7 @@ java_library(
         "//java/dagger/internal/codegen/javapoet",
         "//java/dagger/internal/codegen/langmodel",
         "//java/dagger/internal/codegen/statistics",
+        "//java/dagger/internal/codegen/validation",
         "@google_bazel_common//third_party/java/incap",
     ],
 )
@@ -278,7 +229,6 @@ pom_file(
         ":processor",
         ":binding_graph_validation",
         ":writing",
-        ":validation",
         "//java/dagger/internal/codegen/base",
         "//java/dagger/internal/codegen/binding",
         "//java/dagger/internal/codegen/compileroption",
@@ -286,6 +236,7 @@ pom_file(
         "//java/dagger/internal/codegen/javapoet",
         "//java/dagger/internal/codegen/langmodel",
         "//java/dagger/internal/codegen/statistics",
+        "//java/dagger/internal/codegen/validation",
     ],
 )
 
@@ -361,6 +312,7 @@ java_library(
         "//java/dagger/internal/codegen/langmodel",
         "//java/dagger/internal/codegen/javapoet",
         "//java/dagger/internal/codegen/statistics",
+        "//java/dagger/internal/codegen/validation",
         "@google_bazel_common//third_party/java/incap",
     ],
 )
diff --git a/java/dagger/internal/codegen/BindingGraphValidationModule.java b/java/dagger/internal/codegen/BindingGraphValidationModule.java
index 63e1fa255..8ddf44bc7 100644
--- a/java/dagger/internal/codegen/BindingGraphValidationModule.java
+++ b/java/dagger/internal/codegen/BindingGraphValidationModule.java
@@ -18,6 +18,7 @@
 
 import dagger.Binds;
 import dagger.Module;
+import dagger.internal.codegen.validation.Validation;
 import dagger.multibindings.IntoSet;
 import dagger.spi.BindingGraphPlugin;
 
diff --git a/java/dagger/internal/codegen/ComponentHjarProcessingStep.java b/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
index 73fd74857..5e66904f7 100644
--- a/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
+++ b/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
@@ -41,7 +41,6 @@
 import com.squareup.javapoet.TypeName;
 import com.squareup.javapoet.TypeSpec;
 import dagger.BindsInstance;
-import dagger.internal.codegen.ComponentValidator.ComponentValidationReport;
 import dagger.internal.codegen.base.SourceFileGenerator;
 import dagger.internal.codegen.binding.BindingGraph;
 import dagger.internal.codegen.binding.ComponentCreatorDescriptor;
@@ -52,6 +51,9 @@
 import dagger.internal.codegen.binding.MethodSignature;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
+import dagger.internal.codegen.validation.ComponentValidator;
+import dagger.internal.codegen.validation.ComponentValidator.ComponentValidationReport;
+import dagger.internal.codegen.validation.TypeCheckingProcessingStep;
 import dagger.producers.internal.CancellationListener;
 import java.lang.annotation.Annotation;
 import java.util.Optional;
diff --git a/java/dagger/internal/codegen/ComponentProcessingStep.java b/java/dagger/internal/codegen/ComponentProcessingStep.java
index 342611a79..7c4679cfa 100644
--- a/java/dagger/internal/codegen/ComponentProcessingStep.java
+++ b/java/dagger/internal/codegen/ComponentProcessingStep.java
@@ -34,7 +34,6 @@
 import com.google.common.collect.Multimaps;
 import com.google.common.collect.SetMultimap;
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
-import dagger.internal.codegen.ComponentValidator.ComponentValidationReport;
 import dagger.internal.codegen.base.SourceFileGenerator;
 import dagger.internal.codegen.binding.BindingGraph;
 import dagger.internal.codegen.binding.BindingGraphConverter;
@@ -42,6 +41,13 @@
 import dagger.internal.codegen.binding.ComponentDescriptor;
 import dagger.internal.codegen.binding.ComponentDescriptorFactory;
 import dagger.internal.codegen.compileroption.CompilerOptions;
+import dagger.internal.codegen.validation.BindingGraphValidator;
+import dagger.internal.codegen.validation.ComponentCreatorValidator;
+import dagger.internal.codegen.validation.ComponentDescriptorValidator;
+import dagger.internal.codegen.validation.ComponentValidator;
+import dagger.internal.codegen.validation.ComponentValidator.ComponentValidationReport;
+import dagger.internal.codegen.validation.TypeCheckingProcessingStep;
+import dagger.internal.codegen.validation.ValidationReport;
 import java.lang.annotation.Annotation;
 import java.util.HashMap;
 import java.util.Map;
diff --git a/java/dagger/internal/codegen/ComponentProcessor.java b/java/dagger/internal/codegen/ComponentProcessor.java
index ba8608cf1..6d60008c7 100644
--- a/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/java/dagger/internal/codegen/ComponentProcessor.java
@@ -42,6 +42,12 @@
 import dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions;
 import dagger.internal.codegen.statistics.DaggerStatisticsCollectingProcessingStep;
 import dagger.internal.codegen.statistics.DaggerStatisticsCollector;
+import dagger.internal.codegen.validation.BindingGraphPlugins;
+import dagger.internal.codegen.validation.BindingMethodProcessingStep;
+import dagger.internal.codegen.validation.BindingMethodValidatorsModule;
+import dagger.internal.codegen.validation.BindsInstanceProcessingStep;
+import dagger.internal.codegen.validation.MonitoringModuleProcessingStep;
+import dagger.internal.codegen.validation.MultibindingAnnotationsProcessingStep;
 import dagger.spi.BindingGraphPlugin;
 import java.util.Arrays;
 import java.util.Optional;
diff --git a/java/dagger/internal/codegen/InjectBindingRegistryImpl.java b/java/dagger/internal/codegen/InjectBindingRegistryImpl.java
index 89f0fccb4..fc1c2f1c0 100644
--- a/java/dagger/internal/codegen/InjectBindingRegistryImpl.java
+++ b/java/dagger/internal/codegen/InjectBindingRegistryImpl.java
@@ -46,6 +46,8 @@
 import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
+import dagger.internal.codegen.validation.InjectValidator;
+import dagger.internal.codegen.validation.ValidationReport;
 import dagger.model.Key;
 import java.util.ArrayDeque;
 import java.util.Deque;
diff --git a/java/dagger/internal/codegen/InjectBindingValidator.java b/java/dagger/internal/codegen/InjectBindingValidator.java
index 183d16200..9e41529c9 100644
--- a/java/dagger/internal/codegen/InjectBindingValidator.java
+++ b/java/dagger/internal/codegen/InjectBindingValidator.java
@@ -19,7 +19,9 @@
 import static dagger.model.BindingKind.INJECTION;
 
 import com.google.auto.common.MoreTypes;
-import dagger.internal.codegen.ValidationReport.Item;
+import dagger.internal.codegen.validation.InjectValidator;
+import dagger.internal.codegen.validation.ValidationReport;
+import dagger.internal.codegen.validation.ValidationReport.Item;
 import dagger.model.BindingGraph;
 import dagger.spi.BindingGraphPlugin;
 import dagger.spi.DiagnosticReporter;
diff --git a/java/dagger/internal/codegen/InjectProcessingStep.java b/java/dagger/internal/codegen/InjectProcessingStep.java
index 6ce76d4e9..496b09a5b 100644
--- a/java/dagger/internal/codegen/InjectProcessingStep.java
+++ b/java/dagger/internal/codegen/InjectProcessingStep.java
@@ -19,6 +19,7 @@
 import com.google.auto.common.MoreElements;
 import com.google.common.collect.ImmutableSet;
 import dagger.internal.codegen.binding.InjectBindingRegistry;
+import dagger.internal.codegen.validation.TypeCheckingProcessingStep;
 import java.lang.annotation.Annotation;
 import java.util.Set;
 import javax.inject.Inject;
diff --git a/java/dagger/internal/codegen/MapKeyProcessingStep.java b/java/dagger/internal/codegen/MapKeyProcessingStep.java
index 53927590c..c85757b59 100644
--- a/java/dagger/internal/codegen/MapKeyProcessingStep.java
+++ b/java/dagger/internal/codegen/MapKeyProcessingStep.java
@@ -24,6 +24,9 @@
 import com.google.common.collect.ImmutableSet;
 import dagger.MapKey;
 import dagger.internal.codegen.langmodel.DaggerTypes;
+import dagger.internal.codegen.validation.MapKeyValidator;
+import dagger.internal.codegen.validation.TypeCheckingProcessingStep;
+import dagger.internal.codegen.validation.ValidationReport;
 import java.lang.annotation.Annotation;
 import java.util.Set;
 import javax.annotation.processing.Messager;
diff --git a/java/dagger/internal/codegen/ModuleProcessingStep.java b/java/dagger/internal/codegen/ModuleProcessingStep.java
index 20bd575a5..464d0bb70 100644
--- a/java/dagger/internal/codegen/ModuleProcessingStep.java
+++ b/java/dagger/internal/codegen/ModuleProcessingStep.java
@@ -35,6 +35,9 @@
 import dagger.internal.codegen.binding.DelegateDeclaration.Factory;
 import dagger.internal.codegen.binding.ProductionBinding;
 import dagger.internal.codegen.binding.ProvisionBinding;
+import dagger.internal.codegen.validation.ModuleValidator;
+import dagger.internal.codegen.validation.TypeCheckingProcessingStep;
+import dagger.internal.codegen.validation.ValidationReport;
 import dagger.producers.ProducerModule;
 import dagger.producers.Produces;
 import java.lang.annotation.Annotation;
diff --git a/java/dagger/internal/codegen/SpiModule.java b/java/dagger/internal/codegen/SpiModule.java
index a8f13e1a1..00dd81618 100644
--- a/java/dagger/internal/codegen/SpiModule.java
+++ b/java/dagger/internal/codegen/SpiModule.java
@@ -24,6 +24,7 @@
 import com.google.common.collect.ImmutableSet;
 import dagger.Module;
 import dagger.Provides;
+import dagger.internal.codegen.validation.BindingGraphValidator;
 import dagger.spi.BindingGraphPlugin;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
diff --git a/java/dagger/internal/codegen/base/BUILD b/java/dagger/internal/codegen/base/BUILD
index 9d3ac7bfe..bfdca2d88 100644
--- a/java/dagger/internal/codegen/base/BUILD
+++ b/java/dagger/internal/codegen/base/BUILD
@@ -19,33 +19,7 @@ package(default_visibility = ["//:src"])
 
 java_library(
     name = "base",
-    srcs = [
-        "ClearableCache.java",
-        "ComponentAnnotation.java",
-        "ContributionType.java",
-        "DiagnosticFormatting.java",
-        "ElementFormatter.java",
-        "Formatter.java",
-        "FrameworkTypes.java",
-        "InjectionAnnotations.java",
-        "Keys.java",
-        "MapKeyAccessibility.java",
-        "MapType.java",
-        "ModuleAnnotation.java",
-        "MoreAnnotationMirrors.java",
-        "MoreAnnotationValues.java",
-        "MultibindingAnnotations.java",
-        "OptionalType.java",
-        "RequestKinds.java",
-        "Scopes.java",
-        "SetType.java",
-        "SimpleAnnotationMirror.java",
-        "SimpleTypeAnnotationValue.java",
-        "SourceFileGenerationException.java",
-        "SourceFileGenerator.java",
-        "UniqueNameSet.java",
-        "Util.java",
-    ],
+    srcs = glob(["*.java"]),
     plugins = ["//java/dagger/internal/codegen/bootstrap"],
     tags = ["maven:merged"],
     deps = [
diff --git a/java/dagger/internal/codegen/base/ContributionType.java b/java/dagger/internal/codegen/base/ContributionType.java
index 22571e16c..7451cf5f2 100644
--- a/java/dagger/internal/codegen/base/ContributionType.java
+++ b/java/dagger/internal/codegen/base/ContributionType.java
@@ -51,8 +51,9 @@ public boolean isMultibinding() {
   /**
    * The contribution type from a binding element's annotations. Presumes a well-formed binding
    * element (at most one of @IntoSet, @IntoMap, @ElementsIntoSet and @Provides.type). {@link
-   * dagger.internal.codegen.BindingMethodValidator} and {@link
-   * dagger.internal.codegen.BindsInstanceProcessingStep} validate correctness on their own.
+   * dagger.internal.codegen.validation.BindingMethodValidator} and {@link
+   * dagger.internal.codegen.validation.BindsInstanceProcessingStep} validate correctness on their
+   * own.
    */
   public static ContributionType fromBindingElement(Element element) {
     if (isAnnotationPresent(element, IntoMap.class)) {
diff --git a/java/dagger/internal/codegen/binding/BindingGraphFactory.java b/java/dagger/internal/codegen/binding/BindingGraphFactory.java
index e9cacbe63..4934d265d 100644
--- a/java/dagger/internal/codegen/binding/BindingGraphFactory.java
+++ b/java/dagger/internal/codegen/binding/BindingGraphFactory.java
@@ -254,7 +254,8 @@ private boolean shouldIncludeImplicitProductionModules(
 
   /**
    * Returns a descriptor for a generated module that handles monitoring for production components.
-   * This module is generated in the {@link dagger.internal.codegen.MonitoringModuleProcessingStep}.
+   * This module is generated in the {@link
+   * dagger.internal.codegen.validation.MonitoringModuleProcessingStep}.
    *
    * @throws TypeNotPresentException if the module has not been generated yet. This will cause the
    *     processor to retry in a later processing round.
diff --git a/java/dagger/internal/codegen/binding/BindsTypeChecker.java b/java/dagger/internal/codegen/binding/BindsTypeChecker.java
index bed5521f1..aba6ceb3b 100644
--- a/java/dagger/internal/codegen/binding/BindsTypeChecker.java
+++ b/java/dagger/internal/codegen/binding/BindsTypeChecker.java
@@ -34,8 +34,8 @@
 
 /**
  * Checks the assignability of one type to another, given a {@link ContributionType} context. This
- * is used by {@link dagger.internal.codegen.BindsMethodValidator} to validate that the right-hand-
- * side of a {@link dagger.Binds} method is valid, as well as in {@link
+ * is used by {@link dagger.internal.codegen.validation.BindsMethodValidator} to validate that the
+ * right-hand- side of a {@link dagger.Binds} method is valid, as well as in {@link
  * dagger.internal.codegen.DelegateBindingExpression} when the right-hand-side in generated code
  * might be an erased type due to accessibility.
  */
diff --git a/java/dagger/internal/codegen/compileroption/BUILD b/java/dagger/internal/codegen/compileroption/BUILD
index b9eab50cb..b83e4bf97 100644
--- a/java/dagger/internal/codegen/compileroption/BUILD
+++ b/java/dagger/internal/codegen/compileroption/BUILD
@@ -19,14 +19,7 @@ package(default_visibility = ["//:src"])
 
 java_library(
     name = "compileroption",
-    srcs = [
-        "CompilerOptions.java",
-        "FeatureStatus.java",
-        "JavacPluginCompilerOptions.java",
-        "ProcessingEnvironmentCompilerOptions.java",
-        "ProcessingOptions.java",
-        "ValidationType.java",
-    ],
+    srcs = glob(["*.java"]),
     plugins = ["//java/dagger/internal/codegen/bootstrap"],
     tags = ["maven:merged"],
     deps = [
diff --git a/java/dagger/internal/codegen/extension/BUILD b/java/dagger/internal/codegen/extension/BUILD
index bc7128662..c94dcff97 100644
--- a/java/dagger/internal/codegen/extension/BUILD
+++ b/java/dagger/internal/codegen/extension/BUILD
@@ -20,11 +20,7 @@ package(default_visibility = ["//:src"])
 
 java_library(
     name = "extension",
-    srcs = [
-        "DaggerGraphs.java",
-        "DaggerStreams.java",
-        "Optionals.java",
-    ],
+    srcs = glob(["*.java"]),
     plugins = ["//java/dagger/internal/codegen/bootstrap"],
     tags = ["maven:merged"],
     deps = [
diff --git a/java/dagger/internal/codegen/statistics/BUILD b/java/dagger/internal/codegen/statistics/BUILD
index cf09aad3b..f72dfb91d 100644
--- a/java/dagger/internal/codegen/statistics/BUILD
+++ b/java/dagger/internal/codegen/statistics/BUILD
@@ -19,12 +19,7 @@ package(default_visibility = ["//:src"])
 
 java_library(
     name = "statistics",
-    srcs = [
-        "DaggerStatistics.java",
-        "DaggerStatisticsCollectingProcessingStep.java",
-        "DaggerStatisticsCollector.java",
-        "DaggerStatisticsRecorder.java",
-    ],
+    srcs = glob(["*.java"]),
     plugins = ["//java/dagger/internal/codegen/bootstrap"],
     tags = ["maven:merged"],
     deps = [
diff --git a/java/dagger/internal/codegen/AnyBindingMethodValidator.java b/java/dagger/internal/codegen/validation/AnyBindingMethodValidator.java
similarity index 98%
rename from java/dagger/internal/codegen/AnyBindingMethodValidator.java
rename to java/dagger/internal/codegen/validation/AnyBindingMethodValidator.java
index 6baea0515..1e327f3aa 100644
--- a/java/dagger/internal/codegen/AnyBindingMethodValidator.java
+++ b/java/dagger/internal/codegen/validation/AnyBindingMethodValidator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import static com.google.auto.common.MoreElements.isAnnotationPresent;
 import static com.google.common.collect.Iterables.getOnlyElement;
diff --git a/java/dagger/internal/codegen/validation/BUILD b/java/dagger/internal/codegen/validation/BUILD
new file mode 100644
index 000000000..729f30632
--- /dev/null
+++ b/java/dagger/internal/codegen/validation/BUILD
@@ -0,0 +1,44 @@
+# Copyright (C) 2019 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Description:
+#   Code related to validating the user-written Dagger code
+
+package(default_visibility = ["//:src"])
+
+java_library(
+    name = "validation",
+    srcs = glob(["*.java"]),
+    plugins = ["//java/dagger/internal/codegen/bootstrap"],
+    tags = ["maven:merged"],
+    deps = [
+        "//java/dagger:core",
+        "//java/dagger/internal/codegen/base",
+        "//java/dagger/internal/codegen/binding",
+        "//java/dagger/internal/codegen/compileroption",
+        "//java/dagger/internal/codegen/extension",
+        "//java/dagger/internal/codegen/javapoet",
+        "//java/dagger/internal/codegen/langmodel",
+        "//java/dagger/model",
+        "//java/dagger/producers",
+        "//java/dagger/spi",
+        "@google_bazel_common//third_party/java/auto:common",
+        "@google_bazel_common//third_party/java/auto:value",
+        "@google_bazel_common//third_party/java/checker_framework_annotations",
+        "@google_bazel_common//third_party/java/error_prone:annotations",
+        "@google_bazel_common//third_party/java/guava",
+        "@google_bazel_common//third_party/java/javapoet",
+        "@google_bazel_common//third_party/java/jsr330_inject",
+    ],
+)
diff --git a/java/dagger/internal/codegen/BindingElementValidator.java b/java/dagger/internal/codegen/validation/BindingElementValidator.java
similarity index 99%
rename from java/dagger/internal/codegen/BindingElementValidator.java
rename to java/dagger/internal/codegen/validation/BindingElementValidator.java
index 5e5a8c17c..9d5282fb7 100644
--- a/java/dagger/internal/codegen/BindingElementValidator.java
+++ b/java/dagger/internal/codegen/validation/BindingElementValidator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import static com.google.common.base.Verify.verifyNotNull;
 import static dagger.internal.codegen.base.InjectionAnnotations.getQualifiers;
@@ -53,7 +53,7 @@
 import javax.lang.model.type.TypeMirror;
 
 /** A validator for elements that represent binding declarations. */
-abstract class BindingElementValidator<E extends Element> {
+public abstract class BindingElementValidator<E extends Element> {
   private final Class<? extends Annotation> bindingAnnotation;
   private final AllowsMultibindings allowsMultibindings;
   private final AllowsScoping allowsScoping;
diff --git a/java/dagger/internal/codegen/BindingGraphPlugins.java b/java/dagger/internal/codegen/validation/BindingGraphPlugins.java
similarity index 93%
rename from java/dagger/internal/codegen/BindingGraphPlugins.java
rename to java/dagger/internal/codegen/validation/BindingGraphPlugins.java
index 16ea6cb40..6e9f41969 100644
--- a/java/dagger/internal/codegen/BindingGraphPlugins.java
+++ b/java/dagger/internal/codegen/validation/BindingGraphPlugins.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableSet;
 
@@ -31,7 +31,7 @@
 import javax.inject.Inject;
 
 /** Initializes {@link BindingGraphPlugin}s. */
-final class BindingGraphPlugins {
+public final class BindingGraphPlugins {
   private final ImmutableSet<BindingGraphPlugin> plugins;
   private final Filer filer;
   private final DaggerTypes types;
@@ -54,7 +54,7 @@
   }
 
   /** Returns {@link BindingGraphPlugin#supportedOptions()} from all the plugins. */
-  ImmutableSet<String> allSupportedOptions() {
+  public ImmutableSet<String> allSupportedOptions() {
     return plugins.stream()
         .flatMap(plugin -> plugin.supportedOptions().stream())
         .collect(toImmutableSet());
@@ -62,7 +62,7 @@
 
   /** Initializes the plugins. */
   // TODO(ronshapiro): Should we validate the uniqueness of plugin names?
-  void initializePlugins() {
+  public void initializePlugins() {
     plugins.forEach(this::initializePlugin);
   }
 
diff --git a/java/dagger/internal/codegen/BindingGraphValidator.java b/java/dagger/internal/codegen/validation/BindingGraphValidator.java
similarity index 90%
rename from java/dagger/internal/codegen/BindingGraphValidator.java
rename to java/dagger/internal/codegen/validation/BindingGraphValidator.java
index df17b15b5..5646b7359 100644
--- a/java/dagger/internal/codegen/BindingGraphValidator.java
+++ b/java/dagger/internal/codegen/validation/BindingGraphValidator.java
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 import static javax.tools.Diagnostic.Kind.ERROR;
 
 import com.google.common.collect.ImmutableSet;
-import dagger.internal.codegen.DiagnosticReporterFactory.DiagnosticReporterImpl;
+import dagger.internal.codegen.validation.DiagnosticReporterFactory.DiagnosticReporterImpl;
 import dagger.model.BindingGraph;
 import dagger.spi.BindingGraphPlugin;
 import java.util.Set;
@@ -29,7 +29,7 @@
 
 /** Validates a {@link BindingGraph}. */
 @Singleton
-final class BindingGraphValidator {
+public final class BindingGraphValidator {
   private final ImmutableSet<BindingGraphPlugin> validationPlugins;
   private final ImmutableSet<BindingGraphPlugin> externalPlugins;
   private final DiagnosticReporterFactory diagnosticReporterFactory;
@@ -45,7 +45,7 @@
   }
 
   /** Returns {@code true} if no errors are reported for {@code graph}. */
-  boolean isValid(BindingGraph graph) {
+  public boolean isValid(BindingGraph graph) {
     return isValid(validationPlugins, graph) && isValid(externalPlugins, graph);
   }
 
diff --git a/java/dagger/internal/codegen/BindingMethodProcessingStep.java b/java/dagger/internal/codegen/validation/BindingMethodProcessingStep.java
similarity index 92%
rename from java/dagger/internal/codegen/BindingMethodProcessingStep.java
rename to java/dagger/internal/codegen/validation/BindingMethodProcessingStep.java
index e6c4f8ed3..10aec063f 100644
--- a/java/dagger/internal/codegen/BindingMethodProcessingStep.java
+++ b/java/dagger/internal/codegen/validation/BindingMethodProcessingStep.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import static com.google.common.base.Preconditions.checkArgument;
 
@@ -27,7 +27,8 @@
 import javax.lang.model.element.ExecutableElement;
 
 /** A step that validates all binding methods that were not validated while processing modules. */
-final class BindingMethodProcessingStep extends TypeCheckingProcessingStep<ExecutableElement> {
+public final class BindingMethodProcessingStep
+    extends TypeCheckingProcessingStep<ExecutableElement> {
 
   private final Messager messager;
   private final AnyBindingMethodValidator anyBindingMethodValidator;
diff --git a/java/dagger/internal/codegen/BindingMethodValidator.java b/java/dagger/internal/codegen/validation/BindingMethodValidator.java
similarity index 99%
rename from java/dagger/internal/codegen/BindingMethodValidator.java
rename to java/dagger/internal/codegen/validation/BindingMethodValidator.java
index 21c05ccd2..87b68b4f2 100644
--- a/java/dagger/internal/codegen/BindingMethodValidator.java
+++ b/java/dagger/internal/codegen/validation/BindingMethodValidator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import static dagger.internal.codegen.langmodel.DaggerElements.isAnyAnnotationPresent;
 import static java.util.stream.Collectors.joining;
diff --git a/java/dagger/internal/codegen/BindingMethodValidatorsModule.java b/java/dagger/internal/codegen/validation/BindingMethodValidatorsModule.java
similarity index 94%
rename from java/dagger/internal/codegen/BindingMethodValidatorsModule.java
rename to java/dagger/internal/codegen/validation/BindingMethodValidatorsModule.java
index 28a272d10..08afbc81f 100644
--- a/java/dagger/internal/codegen/BindingMethodValidatorsModule.java
+++ b/java/dagger/internal/codegen/validation/BindingMethodValidatorsModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import static com.google.common.collect.Maps.uniqueIndex;
 
@@ -31,7 +31,7 @@
  * BindingMethodValidator#methodAnnotation()}.
  */
 @Module
-interface BindingMethodValidatorsModule {
+public interface BindingMethodValidatorsModule {
   @Provides
   static ImmutableMap<Class<? extends Annotation>, BindingMethodValidator> indexValidators(
       Set<BindingMethodValidator> validators) {
diff --git a/java/dagger/internal/codegen/BindsInstanceElementValidator.java b/java/dagger/internal/codegen/validation/BindsInstanceElementValidator.java
similarity index 96%
rename from java/dagger/internal/codegen/BindsInstanceElementValidator.java
rename to java/dagger/internal/codegen/validation/BindsInstanceElementValidator.java
index 9249c8ec5..07fe4edc5 100644
--- a/java/dagger/internal/codegen/BindsInstanceElementValidator.java
+++ b/java/dagger/internal/codegen/validation/BindsInstanceElementValidator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import dagger.BindsInstance;
 import javax.lang.model.element.Element;
diff --git a/java/dagger/internal/codegen/BindsInstanceMethodValidator.java b/java/dagger/internal/codegen/validation/BindsInstanceMethodValidator.java
similarity index 98%
rename from java/dagger/internal/codegen/BindsInstanceMethodValidator.java
rename to java/dagger/internal/codegen/validation/BindsInstanceMethodValidator.java
index 9d5fa4865..af1cadcbd 100644
--- a/java/dagger/internal/codegen/BindsInstanceMethodValidator.java
+++ b/java/dagger/internal/codegen/validation/BindsInstanceMethodValidator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import static com.google.common.collect.Iterables.getOnlyElement;
 import static dagger.internal.codegen.base.ComponentAnnotation.anyComponentAnnotation;
diff --git a/java/dagger/internal/codegen/BindsInstanceParameterValidator.java b/java/dagger/internal/codegen/validation/BindsInstanceParameterValidator.java
similarity index 98%
rename from java/dagger/internal/codegen/BindsInstanceParameterValidator.java
rename to java/dagger/internal/codegen/validation/BindsInstanceParameterValidator.java
index b2dc8d878..0bb691ff6 100644
--- a/java/dagger/internal/codegen/BindsInstanceParameterValidator.java
+++ b/java/dagger/internal/codegen/validation/BindsInstanceParameterValidator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import static javax.lang.model.element.ElementKind.METHOD;
 import static javax.lang.model.element.Modifier.ABSTRACT;
diff --git a/java/dagger/internal/codegen/BindsInstanceProcessingStep.java b/java/dagger/internal/codegen/validation/BindsInstanceProcessingStep.java
similarity index 93%
rename from java/dagger/internal/codegen/BindsInstanceProcessingStep.java
rename to java/dagger/internal/codegen/validation/BindsInstanceProcessingStep.java
index 4c222a9ac..0e79b910f 100644
--- a/java/dagger/internal/codegen/BindsInstanceProcessingStep.java
+++ b/java/dagger/internal/codegen/validation/BindsInstanceProcessingStep.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import com.google.auto.common.MoreElements;
 import com.google.common.collect.ImmutableSet;
@@ -29,7 +29,7 @@
  * Processing step that validates that the {@code BindsInstance} annotation is applied to the
  * correct elements.
  */
-final class BindsInstanceProcessingStep extends TypeCheckingProcessingStep<Element> {
+public final class BindsInstanceProcessingStep extends TypeCheckingProcessingStep<Element> {
   private final BindsInstanceMethodValidator methodValidator;
   private final BindsInstanceParameterValidator parameterValidator;
   private final Messager messager;
diff --git a/java/dagger/internal/codegen/BindsMethodValidator.java b/java/dagger/internal/codegen/validation/BindsMethodValidator.java
similarity index 88%
rename from java/dagger/internal/codegen/BindsMethodValidator.java
rename to java/dagger/internal/codegen/validation/BindsMethodValidator.java
index 410f28d8d..ce8f6c484 100644
--- a/java/dagger/internal/codegen/BindsMethodValidator.java
+++ b/java/dagger/internal/codegen/validation/BindsMethodValidator.java
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
-import static dagger.internal.codegen.BindingElementValidator.AllowsMultibindings.ALLOWS_MULTIBINDINGS;
-import static dagger.internal.codegen.BindingElementValidator.AllowsScoping.ALLOWS_SCOPING;
-import static dagger.internal.codegen.BindingMethodValidator.Abstractness.MUST_BE_ABSTRACT;
-import static dagger.internal.codegen.BindingMethodValidator.ExceptionSuperclass.NO_EXCEPTIONS;
+import static dagger.internal.codegen.validation.BindingElementValidator.AllowsMultibindings.ALLOWS_MULTIBINDINGS;
+import static dagger.internal.codegen.validation.BindingElementValidator.AllowsScoping.ALLOWS_SCOPING;
+import static dagger.internal.codegen.validation.BindingMethodValidator.Abstractness.MUST_BE_ABSTRACT;
+import static dagger.internal.codegen.validation.BindingMethodValidator.ExceptionSuperclass.NO_EXCEPTIONS;
 
 import com.google.auto.common.MoreTypes;
 import com.google.common.collect.ImmutableSet;
diff --git a/java/dagger/internal/codegen/BindsOptionalOfMethodValidator.java b/java/dagger/internal/codegen/validation/BindsOptionalOfMethodValidator.java
similarity index 86%
rename from java/dagger/internal/codegen/BindsOptionalOfMethodValidator.java
rename to java/dagger/internal/codegen/validation/BindsOptionalOfMethodValidator.java
index aaf8d074a..8c3b21c04 100644
--- a/java/dagger/internal/codegen/BindsOptionalOfMethodValidator.java
+++ b/java/dagger/internal/codegen/validation/BindsOptionalOfMethodValidator.java
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
-import static dagger.internal.codegen.BindingElementValidator.AllowsMultibindings.NO_MULTIBINDINGS;
-import static dagger.internal.codegen.BindingElementValidator.AllowsScoping.NO_SCOPING;
-import static dagger.internal.codegen.BindingMethodValidator.Abstractness.MUST_BE_ABSTRACT;
-import static dagger.internal.codegen.BindingMethodValidator.ExceptionSuperclass.NO_EXCEPTIONS;
 import static dagger.internal.codegen.base.InjectionAnnotations.getQualifiers;
 import static dagger.internal.codegen.base.InjectionAnnotations.injectedConstructors;
 import static dagger.internal.codegen.base.Keys.isValidImplicitProvisionKey;
+import static dagger.internal.codegen.validation.BindingElementValidator.AllowsMultibindings.NO_MULTIBINDINGS;
+import static dagger.internal.codegen.validation.BindingElementValidator.AllowsScoping.NO_SCOPING;
+import static dagger.internal.codegen.validation.BindingMethodValidator.Abstractness.MUST_BE_ABSTRACT;
+import static dagger.internal.codegen.validation.BindingMethodValidator.ExceptionSuperclass.NO_EXCEPTIONS;
 
 import com.google.auto.common.MoreElements;
 import com.google.auto.common.MoreTypes;
diff --git a/java/dagger/internal/codegen/ComponentCreatorValidator.java b/java/dagger/internal/codegen/validation/ComponentCreatorValidator.java
similarity index 99%
rename from java/dagger/internal/codegen/ComponentCreatorValidator.java
rename to java/dagger/internal/codegen/validation/ComponentCreatorValidator.java
index 53528a42c..b997836a3 100644
--- a/java/dagger/internal/codegen/ComponentCreatorValidator.java
+++ b/java/dagger/internal/codegen/validation/ComponentCreatorValidator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import static com.google.auto.common.MoreElements.isAnnotationPresent;
 import static com.google.common.collect.Iterables.getOnlyElement;
@@ -47,7 +47,7 @@
 import javax.lang.model.util.ElementFilter;
 
 /** Validates types annotated with component creator annotations. */
-final class ComponentCreatorValidator {
+public final class ComponentCreatorValidator {
 
   private final DaggerElements elements;
   private final DaggerTypes types;
diff --git a/java/dagger/internal/codegen/ComponentDescriptorValidator.java b/java/dagger/internal/codegen/validation/ComponentDescriptorValidator.java
similarity index 99%
rename from java/dagger/internal/codegen/ComponentDescriptorValidator.java
rename to java/dagger/internal/codegen/validation/ComponentDescriptorValidator.java
index dc1844542..e888ef63e 100644
--- a/java/dagger/internal/codegen/ComponentDescriptorValidator.java
+++ b/java/dagger/internal/codegen/validation/ComponentDescriptorValidator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import static com.google.auto.common.MoreTypes.asDeclared;
 import static com.google.common.base.Preconditions.checkNotNull;
@@ -86,7 +86,7 @@
  * </ul>
  */
 // TODO(dpb): Combine with ComponentHierarchyValidator.
-final class ComponentDescriptorValidator {
+public final class ComponentDescriptorValidator {
 
   private final DaggerElements elements;
   private final DaggerTypes types;
@@ -108,7 +108,7 @@
     this.componentHierarchyValidator = componentHierarchyValidator;
   }
 
-  ValidationReport<TypeElement> validate(ComponentDescriptor component) {
+  public ValidationReport<TypeElement> validate(ComponentDescriptor component) {
     ComponentValidation validation = new ComponentValidation(component);
     validation.visitComponent(component);
     validation.report(component).addSubreport(componentHierarchyValidator.validate(component));
diff --git a/java/dagger/internal/codegen/ComponentHierarchyValidator.java b/java/dagger/internal/codegen/validation/ComponentHierarchyValidator.java
similarity index 99%
rename from java/dagger/internal/codegen/ComponentHierarchyValidator.java
rename to java/dagger/internal/codegen/validation/ComponentHierarchyValidator.java
index b44e33c03..ca4754354 100644
--- a/java/dagger/internal/codegen/ComponentHierarchyValidator.java
+++ b/java/dagger/internal/codegen/validation/ComponentHierarchyValidator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import static com.google.common.base.Functions.constant;
 import static com.google.common.base.Predicates.and;
diff --git a/java/dagger/internal/codegen/ComponentValidator.java b/java/dagger/internal/codegen/validation/ComponentValidator.java
similarity index 98%
rename from java/dagger/internal/codegen/ComponentValidator.java
rename to java/dagger/internal/codegen/validation/ComponentValidator.java
index f62d739ea..dd1064d26 100644
--- a/java/dagger/internal/codegen/ComponentValidator.java
+++ b/java/dagger/internal/codegen/validation/ComponentValidator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import static com.google.auto.common.MoreElements.asType;
 import static com.google.auto.common.MoreElements.getLocalAndInheritedMethods;
@@ -91,7 +91,7 @@
  * Performs superficial validation of the contract of the {@link Component} and {@link
  * ProductionComponent} annotations.
  */
-final class ComponentValidator {
+public final class ComponentValidator {
   private final DaggerElements elements;
   private final DaggerTypes types;
   private final ModuleValidator moduleValidator;
@@ -121,11 +121,12 @@
     this.dependencyRequestFactory = dependencyRequestFactory;
   }
 
+  /** A {@plainlink ValidationReport validation report} for a component and its subcomponents. */
   @AutoValue
-  abstract static class ComponentValidationReport {
-    abstract ImmutableSet<Element> referencedSubcomponents();
+  public abstract static class ComponentValidationReport {
+    public abstract ImmutableSet<Element> referencedSubcomponents();
 
-    abstract ValidationReport<TypeElement> report();
+    public abstract ValidationReport<TypeElement> report();
   }
 
   /**
diff --git a/java/dagger/internal/codegen/DependencyRequestValidator.java b/java/dagger/internal/codegen/validation/DependencyRequestValidator.java
similarity index 98%
rename from java/dagger/internal/codegen/DependencyRequestValidator.java
rename to java/dagger/internal/codegen/validation/DependencyRequestValidator.java
index 14239fdab..d11a0609c 100644
--- a/java/dagger/internal/codegen/DependencyRequestValidator.java
+++ b/java/dagger/internal/codegen/validation/DependencyRequestValidator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import static dagger.internal.codegen.base.InjectionAnnotations.getQualifiers;
 import static dagger.internal.codegen.base.RequestKinds.extractKeyType;
diff --git a/java/dagger/internal/codegen/DiagnosticReporterFactory.java b/java/dagger/internal/codegen/validation/DiagnosticReporterFactory.java
similarity index 99%
rename from java/dagger/internal/codegen/DiagnosticReporterFactory.java
rename to java/dagger/internal/codegen/validation/DiagnosticReporterFactory.java
index fdc4039ba..3148b7b69 100644
--- a/java/dagger/internal/codegen/DiagnosticReporterFactory.java
+++ b/java/dagger/internal/codegen/validation/DiagnosticReporterFactory.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import static com.google.auto.common.MoreTypes.asTypeElement;
 import static com.google.common.base.Predicates.equalTo;
diff --git a/java/dagger/internal/codegen/InjectValidator.java b/java/dagger/internal/codegen/validation/InjectValidator.java
similarity index 96%
rename from java/dagger/internal/codegen/InjectValidator.java
rename to java/dagger/internal/codegen/validation/InjectValidator.java
index b06268e63..e5105be79 100644
--- a/java/dagger/internal/codegen/InjectValidator.java
+++ b/java/dagger/internal/codegen/validation/InjectValidator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import static com.google.auto.common.MoreElements.isAnnotationPresent;
 import static dagger.internal.codegen.base.InjectionAnnotations.getQualifiers;
@@ -53,7 +53,7 @@
  * A {@linkplain ValidationReport validator} for {@link Inject}-annotated elements and the types
  * that contain them.
  */
-final class InjectValidator {
+public final class InjectValidator {
   private final DaggerTypes types;
   private final DaggerElements elements;
   private final CompilerOptions compilerOptions;
@@ -87,7 +87,7 @@ private InjectValidator(
    * rejecting optionally-specified JSR 330 behavior that Dagger doesn't support (unless {@code
    * -Adagger.ignorePrivateAndStaticInjectionForComponent=enabled} was set in the javac options).
    */
-  InjectValidator whenGeneratingCode() {
+  public InjectValidator whenGeneratingCode() {
     return compilerOptions.ignorePrivateAndStaticInjectionForComponent()
         ? this
         : new InjectValidator(
@@ -98,7 +98,7 @@ InjectValidator whenGeneratingCode() {
             Optional.of(Diagnostic.Kind.ERROR));
   }
 
-  ValidationReport<TypeElement> validateConstructor(ExecutableElement constructorElement) {
+  public ValidationReport<TypeElement> validateConstructor(ExecutableElement constructorElement) {
     ValidationReport.Builder<TypeElement> builder =
         ValidationReport.about(MoreElements.asType(constructorElement.getEnclosingElement()));
     if (constructorElement.getModifiers().contains(PRIVATE)) {
@@ -234,7 +234,7 @@ private void validateDependencyRequest(
     dependencyRequestValidator.checkNotProducer(builder, parameter);
   }
 
-  ValidationReport<TypeElement> validateMembersInjectionType(TypeElement typeElement) {
+  public ValidationReport<TypeElement> validateMembersInjectionType(TypeElement typeElement) {
     // TODO(beder): This element might not be currently compiled, so this error message could be
     // left in limbo. Find an appropriate way to display the error message in that case.
     ValidationReport.Builder<TypeElement> builder = ValidationReport.about(typeElement);
@@ -271,7 +271,7 @@ private void validateDependencyRequest(
     return builder.build();
   }
 
-  ValidationReport<TypeElement> validateType(TypeElement typeElement) {
+  public ValidationReport<TypeElement> validateType(TypeElement typeElement) {
     ValidationReport.Builder<TypeElement> builder = ValidationReport.about(typeElement);
     ValidationReport<TypeElement> membersInjectionReport =
         validateMembersInjectionType(typeElement);
@@ -290,7 +290,7 @@ private void validateDependencyRequest(
     return builder.build();
   }
 
-  boolean isValidType(TypeMirror type) {
+  public boolean isValidType(TypeMirror type) {
     if (!type.getKind().equals(DECLARED)) {
       return true;
     }
diff --git a/java/dagger/internal/codegen/MapKeyValidator.java b/java/dagger/internal/codegen/validation/MapKeyValidator.java
similarity index 94%
rename from java/dagger/internal/codegen/MapKeyValidator.java
rename to java/dagger/internal/codegen/validation/MapKeyValidator.java
index f2568efdc..6aa514710 100644
--- a/java/dagger/internal/codegen/MapKeyValidator.java
+++ b/java/dagger/internal/codegen/validation/MapKeyValidator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import static javax.lang.model.util.ElementFilter.methodsIn;
 
@@ -31,7 +31,7 @@
  * A validator for {@link MapKey} annotations.
  */
 // TODO(dpb,gak): Should unwrapped MapKeys be required to have their single member be named "value"?
-final class MapKeyValidator {
+public final class MapKeyValidator {
   private final DaggerElements elements;
 
   @Inject
@@ -39,7 +39,7 @@
     this.elements = elements;
   }
 
-  ValidationReport<Element> validate(Element element) {
+  public ValidationReport<Element> validate(Element element) {
     ValidationReport.Builder<Element> builder = ValidationReport.about(element);
     List<ExecutableElement> members = methodsIn(((TypeElement) element).getEnclosedElements());
     if (members.isEmpty()) {
diff --git a/java/dagger/internal/codegen/MembersInjectionValidator.java b/java/dagger/internal/codegen/validation/MembersInjectionValidator.java
similarity index 99%
rename from java/dagger/internal/codegen/MembersInjectionValidator.java
rename to java/dagger/internal/codegen/validation/MembersInjectionValidator.java
index c0fa7c62a..75abfc0b2 100644
--- a/java/dagger/internal/codegen/MembersInjectionValidator.java
+++ b/java/dagger/internal/codegen/validation/MembersInjectionValidator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static dagger.internal.codegen.base.InjectionAnnotations.getQualifiers;
diff --git a/java/dagger/internal/codegen/ModuleValidator.java b/java/dagger/internal/codegen/validation/ModuleValidator.java
similarity index 99%
rename from java/dagger/internal/codegen/ModuleValidator.java
rename to java/dagger/internal/codegen/validation/ModuleValidator.java
index 29d8365b7..92c53b541 100644
--- a/java/dagger/internal/codegen/ModuleValidator.java
+++ b/java/dagger/internal/codegen/validation/ModuleValidator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import static com.google.auto.common.AnnotationMirrors.getAnnotatedAnnotations;
 import static com.google.auto.common.Visibility.PRIVATE;
@@ -94,7 +94,7 @@
 
 /** A {@linkplain ValidationReport validator} for {@link Module}s or {@link ProducerModule}s. */
 @Singleton
-final class ModuleValidator {
+public final class ModuleValidator {
   private static final ImmutableSet<Class<? extends Annotation>> SUBCOMPONENT_TYPES =
       ImmutableSet.of(Subcomponent.class, ProductionSubcomponent.class);
   private static final ImmutableSet<Class<? extends Annotation>> SUBCOMPONENT_CREATOR_TYPES =
@@ -162,12 +162,12 @@
    * validating} any module or {@linkplain #validateReferencedModules(TypeElement, AnnotationMirror,
    * ImmutableSet, Set) component}.
    */
-  void addKnownModules(Collection<TypeElement> modules) {
+  public void addKnownModules(Collection<TypeElement> modules) {
     knownModules.addAll(modules);
   }
 
   /** Returns a validation report for a module type. */
-  ValidationReport<TypeElement> validate(TypeElement module) {
+  public ValidationReport<TypeElement> validate(TypeElement module) {
     return validate(module, new HashSet<>());
   }
 
diff --git a/java/dagger/internal/codegen/MonitoringModuleGenerator.java b/java/dagger/internal/codegen/validation/MonitoringModuleGenerator.java
similarity index 98%
rename from java/dagger/internal/codegen/MonitoringModuleGenerator.java
rename to java/dagger/internal/codegen/validation/MonitoringModuleGenerator.java
index 38abc8626..5a3239c03 100644
--- a/java/dagger/internal/codegen/MonitoringModuleGenerator.java
+++ b/java/dagger/internal/codegen/validation/MonitoringModuleGenerator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import static com.squareup.javapoet.MethodSpec.constructorBuilder;
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
diff --git a/java/dagger/internal/codegen/MonitoringModuleProcessingStep.java b/java/dagger/internal/codegen/validation/MonitoringModuleProcessingStep.java
similarity index 92%
rename from java/dagger/internal/codegen/MonitoringModuleProcessingStep.java
rename to java/dagger/internal/codegen/validation/MonitoringModuleProcessingStep.java
index 55ae57941..5d4c64e39 100644
--- a/java/dagger/internal/codegen/MonitoringModuleProcessingStep.java
+++ b/java/dagger/internal/codegen/validation/MonitoringModuleProcessingStep.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import com.google.auto.common.MoreElements;
 import com.google.common.collect.ImmutableSet;
@@ -30,7 +30,7 @@
  * A processing step that is responsible for generating a special module for a {@link
  * ProductionComponent} or {@link ProductionSubcomponent}.
  */
-final class MonitoringModuleProcessingStep extends TypeCheckingProcessingStep<TypeElement> {
+public final class MonitoringModuleProcessingStep extends TypeCheckingProcessingStep<TypeElement> {
   private final Messager messager;
   private final MonitoringModuleGenerator monitoringModuleGenerator;
 
diff --git a/java/dagger/internal/codegen/MultibindingAnnotationsProcessingStep.java b/java/dagger/internal/codegen/validation/MultibindingAnnotationsProcessingStep.java
similarity index 95%
rename from java/dagger/internal/codegen/MultibindingAnnotationsProcessingStep.java
rename to java/dagger/internal/codegen/validation/MultibindingAnnotationsProcessingStep.java
index 2bb0a7e37..fd75eac24 100644
--- a/java/dagger/internal/codegen/MultibindingAnnotationsProcessingStep.java
+++ b/java/dagger/internal/codegen/validation/MultibindingAnnotationsProcessingStep.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import static dagger.internal.codegen.langmodel.DaggerElements.getAnnotationMirror;
 import static javax.tools.Diagnostic.Kind.ERROR;
@@ -34,7 +34,7 @@
  * Processing step that verifies that {@link IntoSet}, {@link ElementsIntoSet} and {@link IntoMap}
  * are not present on non-binding methods.
  */
-final class MultibindingAnnotationsProcessingStep
+public final class MultibindingAnnotationsProcessingStep
     extends TypeCheckingProcessingStep<ExecutableElement> {
   private final AnyBindingMethodValidator anyBindingMethodValidator;
   private final Messager messager;
diff --git a/java/dagger/internal/codegen/MultibindsMethodValidator.java b/java/dagger/internal/codegen/validation/MultibindsMethodValidator.java
similarity index 87%
rename from java/dagger/internal/codegen/MultibindsMethodValidator.java
rename to java/dagger/internal/codegen/validation/MultibindsMethodValidator.java
index d8c5e7c7f..4619abe65 100644
--- a/java/dagger/internal/codegen/MultibindsMethodValidator.java
+++ b/java/dagger/internal/codegen/validation/MultibindsMethodValidator.java
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
-import static dagger.internal.codegen.BindingElementValidator.AllowsMultibindings.NO_MULTIBINDINGS;
-import static dagger.internal.codegen.BindingElementValidator.AllowsScoping.NO_SCOPING;
-import static dagger.internal.codegen.BindingMethodValidator.Abstractness.MUST_BE_ABSTRACT;
-import static dagger.internal.codegen.BindingMethodValidator.ExceptionSuperclass.NO_EXCEPTIONS;
 import static dagger.internal.codegen.base.FrameworkTypes.isFrameworkType;
+import static dagger.internal.codegen.validation.BindingElementValidator.AllowsMultibindings.NO_MULTIBINDINGS;
+import static dagger.internal.codegen.validation.BindingElementValidator.AllowsScoping.NO_SCOPING;
+import static dagger.internal.codegen.validation.BindingMethodValidator.Abstractness.MUST_BE_ABSTRACT;
+import static dagger.internal.codegen.validation.BindingMethodValidator.ExceptionSuperclass.NO_EXCEPTIONS;
 
 import com.google.auto.common.MoreTypes;
 import com.google.common.collect.ImmutableSet;
diff --git a/java/dagger/internal/codegen/ProducesMethodValidator.java b/java/dagger/internal/codegen/validation/ProducesMethodValidator.java
similarity index 90%
rename from java/dagger/internal/codegen/ProducesMethodValidator.java
rename to java/dagger/internal/codegen/validation/ProducesMethodValidator.java
index 34e412c0e..ee997db8f 100644
--- a/java/dagger/internal/codegen/ProducesMethodValidator.java
+++ b/java/dagger/internal/codegen/validation/ProducesMethodValidator.java
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import static com.google.common.collect.Iterables.getOnlyElement;
-import static dagger.internal.codegen.BindingElementValidator.AllowsMultibindings.ALLOWS_MULTIBINDINGS;
-import static dagger.internal.codegen.BindingElementValidator.AllowsScoping.NO_SCOPING;
-import static dagger.internal.codegen.BindingMethodValidator.Abstractness.MUST_BE_CONCRETE;
-import static dagger.internal.codegen.BindingMethodValidator.ExceptionSuperclass.EXCEPTION;
+import static dagger.internal.codegen.validation.BindingElementValidator.AllowsMultibindings.ALLOWS_MULTIBINDINGS;
+import static dagger.internal.codegen.validation.BindingElementValidator.AllowsScoping.NO_SCOPING;
+import static dagger.internal.codegen.validation.BindingMethodValidator.Abstractness.MUST_BE_CONCRETE;
+import static dagger.internal.codegen.validation.BindingMethodValidator.ExceptionSuperclass.EXCEPTION;
 
 import com.google.auto.common.MoreTypes;
 import com.google.common.util.concurrent.ListenableFuture;
diff --git a/java/dagger/internal/codegen/ProvidesMethodValidator.java b/java/dagger/internal/codegen/validation/ProvidesMethodValidator.java
similarity index 82%
rename from java/dagger/internal/codegen/ProvidesMethodValidator.java
rename to java/dagger/internal/codegen/validation/ProvidesMethodValidator.java
index 01e71ae09..dfeecddeb 100644
--- a/java/dagger/internal/codegen/ProvidesMethodValidator.java
+++ b/java/dagger/internal/codegen/validation/ProvidesMethodValidator.java
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
-import static dagger.internal.codegen.BindingElementValidator.AllowsMultibindings.ALLOWS_MULTIBINDINGS;
-import static dagger.internal.codegen.BindingElementValidator.AllowsScoping.ALLOWS_SCOPING;
-import static dagger.internal.codegen.BindingMethodValidator.Abstractness.MUST_BE_CONCRETE;
-import static dagger.internal.codegen.BindingMethodValidator.ExceptionSuperclass.RUNTIME_EXCEPTION;
+import static dagger.internal.codegen.validation.BindingElementValidator.AllowsMultibindings.ALLOWS_MULTIBINDINGS;
+import static dagger.internal.codegen.validation.BindingElementValidator.AllowsScoping.ALLOWS_SCOPING;
+import static dagger.internal.codegen.validation.BindingMethodValidator.Abstractness.MUST_BE_CONCRETE;
+import static dagger.internal.codegen.validation.BindingMethodValidator.ExceptionSuperclass.RUNTIME_EXCEPTION;
 
 import com.google.common.collect.ImmutableSet;
 import dagger.Module;
diff --git a/java/dagger/internal/codegen/TypeCheckingProcessingStep.java b/java/dagger/internal/codegen/validation/TypeCheckingProcessingStep.java
similarity index 91%
rename from java/dagger/internal/codegen/TypeCheckingProcessingStep.java
rename to java/dagger/internal/codegen/validation/TypeCheckingProcessingStep.java
index 00769b228..57867f13b 100644
--- a/java/dagger/internal/codegen/TypeCheckingProcessingStep.java
+++ b/java/dagger/internal/codegen/validation/TypeCheckingProcessingStep.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
@@ -31,10 +31,10 @@
  * TypeNotPresentException} is thrown.
  */
 // TODO(dpb): Contribute to auto-common.
-abstract class TypeCheckingProcessingStep<E extends Element> implements ProcessingStep {
+public abstract class TypeCheckingProcessingStep<E extends Element> implements ProcessingStep {
   private final Function<Element, E> downcaster;
 
-  TypeCheckingProcessingStep(Function<Element, E> downcaster) {
+  protected TypeCheckingProcessingStep(Function<Element, E> downcaster) {
     this.downcaster = checkNotNull(downcaster);
   }
 
diff --git a/java/dagger/internal/codegen/Validation.java b/java/dagger/internal/codegen/validation/Validation.java
similarity index 92%
rename from java/dagger/internal/codegen/Validation.java
rename to java/dagger/internal/codegen/validation/Validation.java
index f6a4b3f4d..620b0f041 100644
--- a/java/dagger/internal/codegen/Validation.java
+++ b/java/dagger/internal/codegen/validation/Validation.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
@@ -28,4 +28,4 @@
 @Documented
 @Retention(RetentionPolicy.RUNTIME)
 @Qualifier
-@interface Validation {}
+public @interface Validation {}
diff --git a/java/dagger/internal/codegen/ValidationReport.java b/java/dagger/internal/codegen/validation/ValidationReport.java
similarity index 88%
rename from java/dagger/internal/codegen/ValidationReport.java
rename to java/dagger/internal/codegen/validation/ValidationReport.java
index 86fff5690..62f34e14d 100644
--- a/java/dagger/internal/codegen/ValidationReport.java
+++ b/java/dagger/internal/codegen/validation/ValidationReport.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.validation;
 
 import static dagger.internal.codegen.base.ElementFormatter.elementToString;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableSet;
@@ -37,19 +37,19 @@
 
 /** A collection of issues to report for source code. */
 @AutoValue
-abstract class ValidationReport<T extends Element> {
+public abstract class ValidationReport<T extends Element> {
 
   /**
    * The subject of the report. Should be an element within a compilation unit being processed by
    * this compilation task.
    */
-  abstract T subject();
+  public abstract T subject();
 
   /** The items to report for the {@linkplain #subject() subject}. */
   abstract ImmutableSet<Item> items();
 
   /** Returns the {@link #items()} from this report and all transitive subreports. */
-  ImmutableSet<Item> allItems() {
+  public ImmutableSet<Item> allItems() {
     return allReports()
         .stream()
         .flatMap(report -> report.items().stream())
@@ -77,7 +77,7 @@
    * Returns {@code true} if there are no errors in this report or any subreports and {@link
    * #markedDirty()} is {@code false}.
    */
-  boolean isClean() {
+  public boolean isClean() {
     if (markedDirty()) {
       return false;
     }
@@ -105,7 +105,7 @@ boolean isClean() {
    * being compiled, associates the message with the subject itself and prepends a reference to the
    * item's element.
    */
-  void printMessagesTo(Messager messager) {
+  public void printMessagesTo(Messager messager) {
     for (Item item : items()) {
       if (isEnclosedIn(subject(), item.element())) {
         if (item.annotation().isPresent()) {
@@ -144,21 +144,23 @@ private static boolean isEnclosedIn(Element parent, Element child) {
     return false;
   }
 
+  /** Metadata about a {@link ValidationReport} item. */
   @AutoValue
-  static abstract class Item {
-    abstract String message();
-    abstract Kind kind();
-    abstract Element element();
-    abstract Optional<AnnotationMirror> annotation();
+  public abstract static class Item {
+    public abstract String message();
+    public abstract Kind kind();
+    public abstract Element element();
+    public abstract Optional<AnnotationMirror> annotation();
     abstract Optional<AnnotationValue> annotationValue();
   }
 
-  static <T extends Element> Builder<T> about(T subject) {
+  public static <T extends Element> Builder<T> about(T subject) {
     return new Builder<>(subject);
   }
 
+  /** A {@link ValidationReport} builder. */
   @CanIgnoreReturnValue
-  static final class Builder<T extends Element> {
+  public static final class Builder<T extends Element> {
     private final T subject;
     private final ImmutableSet.Builder<Item> items = ImmutableSet.builder();
     private final ImmutableSet.Builder<ValidationReport<?>> subreports = ImmutableSet.builder();
@@ -178,19 +180,19 @@ T getSubject() {
       return this;
     }
 
-    Builder<T> addError(String message) {
+    public Builder<T> addError(String message) {
       return addError(message, subject);
     }
 
-    Builder<T> addError(String message, Element element) {
+    public Builder<T> addError(String message, Element element) {
       return addItem(message, ERROR, element);
     }
 
-    Builder<T> addError(String message, Element element, AnnotationMirror annotation) {
+    public Builder<T> addError(String message, Element element, AnnotationMirror annotation) {
       return addItem(message, ERROR, element, annotation);
     }
 
-    Builder<T> addError(
+    public Builder<T> addError(
         String message,
         Element element,
         AnnotationMirror annotation,
@@ -274,13 +276,13 @@ void markDirty() {
       this.markedDirty = true;
     }
 
-    Builder<T> addSubreport(ValidationReport<?> subreport) {
+    public Builder<T> addSubreport(ValidationReport<?> subreport) {
       subreports.add(subreport);
       return this;
     }
 
     @CheckReturnValue
-    ValidationReport<T> build() {
+    public ValidationReport<T> build() {
       return new AutoValue_ValidationReport<>(
           subject, items.build(), subreports.build(), markedDirty);
     }
diff --git a/javatests/dagger/internal/codegen/BUILD b/javatests/dagger/internal/codegen/BUILD
index 707b19cd6..d3344662d 100644
--- a/javatests/dagger/internal/codegen/BUILD
+++ b/javatests/dagger/internal/codegen/BUILD
@@ -30,13 +30,13 @@ GenJavaTests(
         "//java/dagger/internal/codegen:binding_graph_validation",
         "//java/dagger/internal/codegen:package_info",
         "//java/dagger/internal/codegen:processor",
-        "//java/dagger/internal/codegen:validation",
         "//java/dagger/internal/codegen:writing",
         "//java/dagger/internal/codegen/base",
         "//java/dagger/internal/codegen/binding",
         "//java/dagger/internal/codegen/compileroption",
         "//java/dagger/internal/codegen/javapoet",
         "//java/dagger/internal/codegen/langmodel",
+        "//java/dagger/internal/codegen/validation",
         "//java/dagger/model",
         "//java/dagger/model/testing",
         "//java/dagger/producers",
diff --git a/javatests/dagger/internal/codegen/BindsOptionalOfMethodValidationTest.java b/javatests/dagger/internal/codegen/BindsOptionalOfMethodValidationTest.java
index fa44a6e3d..ca3e5e412 100644
--- a/javatests/dagger/internal/codegen/BindsOptionalOfMethodValidationTest.java
+++ b/javatests/dagger/internal/codegen/BindsOptionalOfMethodValidationTest.java
@@ -37,7 +37,7 @@
 import org.junit.runners.Parameterized;
 import org.junit.runners.Parameterized.Parameters;
 
-/** Tests {@link BindsOptionalOfMethodValidator}. */
+/** Tests {@link dagger.internal.codegen.validation.BindsOptionalOfMethodValidator}. */
 @RunWith(Parameterized.class)
 public class BindsOptionalOfMethodValidationTest {
   @Parameters(name = "{0}")
diff --git a/javatests/dagger/internal/codegen/ValidationReportTest.java b/javatests/dagger/internal/codegen/ValidationReportTest.java
index b0f2f2fe1..d1c3a2e3c 100644
--- a/javatests/dagger/internal/codegen/ValidationReportTest.java
+++ b/javatests/dagger/internal/codegen/ValidationReportTest.java
@@ -23,7 +23,8 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.testing.compile.Compilation;
 import com.google.testing.compile.JavaFileObjects;
-import dagger.internal.codegen.ValidationReport.Builder;
+import dagger.internal.codegen.validation.ValidationReport;
+import dagger.internal.codegen.validation.ValidationReport.Builder;
 import java.util.Set;
 import javax.annotation.processing.AbstractProcessor;
 import javax.annotation.processing.RoundEnvironment;
