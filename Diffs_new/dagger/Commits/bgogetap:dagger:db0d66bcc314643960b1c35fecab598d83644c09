diff --git a/java/dagger/internal/codegen/ComponentImplementationFactory.java b/java/dagger/internal/codegen/ComponentImplementationFactory.java
index 7a45c2029..01d81cf1b 100644
--- a/java/dagger/internal/codegen/ComponentImplementationFactory.java
+++ b/java/dagger/internal/codegen/ComponentImplementationFactory.java
@@ -688,14 +688,14 @@ void addInterfaceMethods() {
         // Since we're overriding a subcomponent implementation we add to its implementation given
         // an expanded binding graph.
 
-        // Override modifiable binding methods.
-        for (ModifiableBindingMethod modifiableBindingMethod :
-            componentImplementation.getModifiableBindingMethods()) {
+        ComponentImplementation superclassImplementation =
+            componentImplementation.superclassImplementation().get();
+        for (ModifiableBindingMethod superclassModifiableBindingMethod :
+            superclassImplementation.getModifiableBindingMethods()) {
           bindingExpressions
               .modifiableBindingExpressions()
-              .getModifiableBindingMethod(modifiableBindingMethod)
-              .ifPresent(
-                  method -> componentImplementation.addImplementedModifiableBindingMethod(method));
+              .reimplementedModifiableBindingMethod(superclassModifiableBindingMethod)
+              .ifPresent(componentImplementation::addImplementedModifiableBindingMethod);
         }
       } else {
         super.addInterfaceMethods();
diff --git a/java/dagger/internal/codegen/ModifiableBindingExpressions.java b/java/dagger/internal/codegen/ModifiableBindingExpressions.java
index a21ec8e26..f302d1869 100644
--- a/java/dagger/internal/codegen/ModifiableBindingExpressions.java
+++ b/java/dagger/internal/codegen/ModifiableBindingExpressions.java
@@ -16,6 +16,7 @@
 
 package dagger.internal.codegen;
 
+import static com.google.common.base.Preconditions.checkState;
 import static com.google.common.collect.Iterables.getOnlyElement;
 import static dagger.internal.codegen.BindingRequest.bindingRequest;
 import static javax.lang.model.element.Modifier.FINAL;
@@ -80,9 +81,12 @@ ModifiableBindingType registerComponentMethodIfModifiable(
    * implementation of this subcomponent. Returns {@link Optional#empty()} when the binding cannot
    * or should not be modified by the current binding graph.
    */
-  Optional<ModifiableBindingMethod> getModifiableBindingMethod(
+  Optional<ModifiableBindingMethod> reimplementedModifiableBindingMethod(
       ModifiableBindingMethod modifiableBindingMethod) {
-    if (shouldModifyKnownBinding(modifiableBindingMethod)) {
+    checkState(componentImplementation.superclassImplementation().isPresent());
+    if (modifiableBindingTypeChanged(modifiableBindingMethod)
+        || shouldModifyImplementation(
+            modifiableBindingMethod.type(), modifiableBindingMethod.request())) {
       MethodSpec baseMethod = modifiableBindingMethod.methodSpec();
       boolean markMethodFinal =
           knownModifiableBindingWillBeFinalized(modifiableBindingMethod)
@@ -123,7 +127,7 @@ private boolean knownModifiableBindingWillBeFinalized(
     }
     return modifiableBindingWillBeFinalized(
         newModifiableBindingType,
-        shouldModifyBinding(newModifiableBindingType, modifiableBindingMethod.request()));
+        shouldModifyImplementation(newModifiableBindingType, modifiableBindingMethod.request()));
   }
 
   /**
@@ -134,7 +138,7 @@ private boolean knownModifiableBindingWillBeFinalized(
   private boolean newModifiableBindingWillBeFinalized(
       ModifiableBindingType modifiableBindingType, BindingRequest request) {
     return modifiableBindingWillBeFinalized(
-        modifiableBindingType, shouldModifyBinding(modifiableBindingType, request));
+        modifiableBindingType, shouldModifyImplementation(modifiableBindingType, request));
   }
 
   /**
@@ -300,26 +304,21 @@ private ModifiableBindingType getModifiableBindingType(BindingRequest request) {
   }
 
   /**
-   * Returns true if the current binding graph can, and should, modify a binding by overriding a
-   * modifiable binding method.
+   * Returns true if the modifiable binding type of a {@code modifiableBindingMethod}'s request is
+   * different in this implementation from what it was in the super implementation.
    */
-  private boolean shouldModifyKnownBinding(ModifiableBindingMethod modifiableBindingMethod) {
+  private boolean modifiableBindingTypeChanged(ModifiableBindingMethod modifiableBindingMethod) {
+    checkState(componentImplementation.superclassImplementation().isPresent());
     ModifiableBindingType newModifiableBindingType =
         getModifiableBindingType(modifiableBindingMethod.request());
-    if (!newModifiableBindingType.equals(modifiableBindingMethod.type())) {
-      // It is possible that a binding can change types, in which case we should always modify the
-      // binding.
-      return true;
-    }
-    return shouldModifyBinding(modifiableBindingMethod.type(), modifiableBindingMethod.request());
+    return !newModifiableBindingType.equals(modifiableBindingMethod.type());
   }
 
   /**
    * Returns true if the current binding graph can, and should, modify a binding by overriding a
    * modifiable binding method.
    */
-  // TODO(b/72748365): should this be called shouldModifyRequest() or shouldModifyBindingRequest()?
-  private boolean shouldModifyBinding(
+  private boolean shouldModifyImplementation(
       ModifiableBindingType modifiableBindingType, BindingRequest request) {
     if (request.requestKind().isPresent()) {
       switch (request.requestKind().get()) {
