diff --git a/java/dagger/internal/codegen/ComponentBuilderImplementation.java b/java/dagger/internal/codegen/ComponentBuilderImplementation.java
index 68691a356..7d9428297 100644
--- a/java/dagger/internal/codegen/ComponentBuilderImplementation.java
+++ b/java/dagger/internal/codegen/ComponentBuilderImplementation.java
@@ -24,6 +24,7 @@
 import static javax.lang.model.element.Modifier.ABSTRACT;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PRIVATE;
+import static javax.lang.model.element.Modifier.PROTECTED;
 import static javax.lang.model.element.Modifier.PUBLIC;
 import static javax.lang.model.element.Modifier.STATIC;
 import static javax.lang.model.type.TypeKind.VOID;
@@ -113,7 +114,11 @@ ComponentBuilderImplementation create() {
       }
       if (builderSpec().isPresent()) {
         if (componentImplementation.isAbstract()) {
-          componentBuilderClass.addModifiers(PUBLIC);
+          // The component builder class of a top-level component implementation in ahead-of-tim
+          // subcomponents mode must be public, not protected, because the builder's subclass will
+          // be a sibling of the component subclass implementation, not nested.
+          componentBuilderClass.addModifiers(
+              componentImplementation.isNested() ? PROTECTED : PUBLIC);
         } else {
           componentBuilderClass.addModifiers(PRIVATE);
         }
diff --git a/java/dagger/internal/codegen/ComponentImplementationFactory.java b/java/dagger/internal/codegen/ComponentImplementationFactory.java
index af7acf5dc..7a45c2029 100644
--- a/java/dagger/internal/codegen/ComponentImplementationFactory.java
+++ b/java/dagger/internal/codegen/ComponentImplementationFactory.java
@@ -409,7 +409,7 @@ final ComponentImplementation abstractInnerSubcomponent(ComponentDescriptor chil
           componentImplementation,
           child,
           Optional.of(getChildSuperclassImplementation(child)),
-          PUBLIC,
+          PROTECTED,
           componentImplementation.isAbstract() ? ABSTRACT : FINAL);
     }
 
diff --git a/java/dagger/internal/codegen/ModifiableAbstractMethodBindingExpression.java b/java/dagger/internal/codegen/ModifiableAbstractMethodBindingExpression.java
index 9b2b336c9..c414bd12a 100644
--- a/java/dagger/internal/codegen/ModifiableAbstractMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/ModifiableAbstractMethodBindingExpression.java
@@ -17,7 +17,7 @@
 package dagger.internal.codegen;
 
 import static javax.lang.model.element.Modifier.ABSTRACT;
-import static javax.lang.model.element.Modifier.PUBLIC;
+import static javax.lang.model.element.Modifier.PROTECTED;
 
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
@@ -88,7 +88,7 @@ private void addUnimplementedMethod() {
           modifiableBindingType,
           request,
           MethodSpec.methodBuilder(methodName.get())
-              .addModifiers(PUBLIC, ABSTRACT)
+              .addModifiers(PROTECTED, ABSTRACT)
               .returns(TypeName.get(returnType))
               .build(),
           false /* finalized */);
diff --git a/java/dagger/internal/codegen/ModifiableBindingExpressions.java b/java/dagger/internal/codegen/ModifiableBindingExpressions.java
index 14ce801c3..a21ec8e26 100644
--- a/java/dagger/internal/codegen/ModifiableBindingExpressions.java
+++ b/java/dagger/internal/codegen/ModifiableBindingExpressions.java
@@ -19,6 +19,7 @@
 import static com.google.common.collect.Iterables.getOnlyElement;
 import static dagger.internal.codegen.BindingRequest.bindingRequest;
 import static javax.lang.model.element.Modifier.FINAL;
+import static javax.lang.model.element.Modifier.PROTECTED;
 import static javax.lang.model.element.Modifier.PUBLIC;
 
 import com.google.common.collect.ImmutableSet;
@@ -91,7 +92,7 @@ ModifiableBindingType registerComponentMethodIfModifiable(
           ModifiableBindingMethod.implement(
               modifiableBindingMethod,
               MethodSpec.methodBuilder(baseMethod.name)
-                  .addModifiers(PUBLIC)
+                  .addModifiers(baseMethod.modifiers.contains(PUBLIC) ? PUBLIC : PROTECTED)
                   .addModifiers(markMethodFinal ? ImmutableSet.of(FINAL) : ImmutableSet.of())
                   .returns(baseMethod.returnType)
                   .addAnnotation(Override.class)
diff --git a/java/dagger/internal/codegen/ModifiableConcreteMethodBindingExpression.java b/java/dagger/internal/codegen/ModifiableConcreteMethodBindingExpression.java
index 54dd3d7ad..efecb4a5d 100644
--- a/java/dagger/internal/codegen/ModifiableConcreteMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/ModifiableConcreteMethodBindingExpression.java
@@ -20,7 +20,7 @@
 import static com.google.common.base.Preconditions.checkState;
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
 import static javax.lang.model.element.Modifier.PRIVATE;
-import static javax.lang.model.element.Modifier.PUBLIC;
+import static javax.lang.model.element.Modifier.PROTECTED;
 
 import com.squareup.javapoet.TypeName;
 import dagger.internal.codegen.ModifiableBindingMethods.ModifiableBindingMethod;
@@ -37,7 +37,7 @@
   private final ModifiableBindingType modifiableBindingType;
   private final BindingMethodImplementation methodImplementation;
   private final ComponentImplementation componentImplementation;
-  private final boolean bindingFinalized;
+  private final boolean bindingCannotBeModified;
   private Optional<String> methodName;
 
   ModifiableConcreteMethodBindingExpression(
@@ -47,7 +47,7 @@
       BindingMethodImplementation methodImplementation,
       ComponentImplementation componentImplementation,
       Optional<ModifiableBindingMethod> matchingModifiableBindingMethod,
-      boolean bindingFinalized,
+      boolean bindingCannotBeModified,
       DaggerTypes types) {
     super(methodImplementation, componentImplementation, matchingModifiableBindingMethod, types);
     this.binding = resolvedBindings.contributionBinding();
@@ -55,7 +55,7 @@
     this.modifiableBindingType = checkNotNull(modifiableBindingType);
     this.methodImplementation = checkNotNull(methodImplementation);
     this.componentImplementation = checkNotNull(componentImplementation);
-    this.bindingFinalized = bindingFinalized;
+    this.bindingCannotBeModified = bindingCannotBeModified;
     this.methodName =
         matchingModifiableBindingMethod.map(modifiableMethod -> modifiableMethod.methodSpec().name);
   }
@@ -69,11 +69,11 @@ protected void addMethod() {
           modifiableBindingType,
           request,
           methodBuilder(methodName.get())
-              .addModifiers(bindingFinalized ? PRIVATE : PUBLIC)
+              .addModifiers(bindingCannotBeModified ? PRIVATE : PROTECTED)
               .returns(TypeName.get(methodImplementation.returnType()))
               .addCode(methodImplementation.body())
               .build(),
-          bindingFinalized);
+          bindingCannotBeModified);
     }
   }
 
diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
index 467fec178..3cffd7b87 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
@@ -100,7 +100,7 @@ public void missingBindings_fromComponentMethod() {
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    protected LeafImpl() { super(); }",
             "",
             "    @Override",
@@ -205,7 +205,7 @@ public void missingBindings_dependsOnMissingBinding() {
             "        getMissingInLeaf());",
             "  }",
             "",
-            "  public abstract Object getMissingInLeaf();",
+            "  protected abstract Object getMissingInLeaf();",
             "}");
     Compilation compilation = compile(filesToCompile.build());
     assertThat(compilation).succeededWithoutWarnings();
@@ -247,11 +247,11 @@ public void missingBindings_dependsOnMissingBinding() {
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    protected LeafImpl() { super(); }",
             "",
             "    @Override",
-            "    public final Object getMissingInLeaf() {",
+            "    protected final Object getMissingInLeaf() {",
             "      return AncestorModule_SatisfiedInAncestorFactory.proxySatisfiedInAncestor();",
             "    }",
             "  }",
@@ -332,14 +332,14 @@ public void missingBindings_satisfiedInGreatAncestor() {
             "public abstract class DaggerGreatAncestor implements GreatAncestor {",
             "  protected DaggerGreatAncestor() {}",
             "",
-            "  public abstract class AncestorImpl extends DaggerAncestor {",
+            "  protected abstract class AncestorImpl extends DaggerAncestor {",
             "    protected AncestorImpl() { super(); }",
             "",
-            "    public abstract class LeafImpl extends DaggerAncestor.LeafImpl {",
+            "    protected abstract class LeafImpl extends DaggerAncestor.LeafImpl {",
             "      protected LeafImpl() { super(); }",
             "",
             "      @Override",
-            "      public final Object getMissingInLeaf() {",
+            "      protected final Object getMissingInLeaf() {",
             "        return SatisfiesMissingBindingModule_SatisfyFactory.proxySatisfy();",
             "      }",
             "    }",
@@ -430,7 +430,7 @@ public void moduleInstanceDependency() {
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    protected LeafImpl() {",
             "      super();",
             "    }",
@@ -484,7 +484,7 @@ public void moduleInstanceDependency() {
             "    }",
             "  }",
             "",
-            "  public final class AncestorImpl extends DaggerAncestor {",
+            "  protected final class AncestorImpl extends DaggerAncestor {",
             "    private AncestorImpl() {",
             "      super();",
             "    }",
@@ -494,7 +494,7 @@ public void moduleInstanceDependency() {
             "      return new LeafImpl();",
             "    }",
             "",
-            "    public final class LeafImpl extends DaggerAncestor.LeafImpl {",
+            "    protected final class LeafImpl extends DaggerAncestor.LeafImpl {",
             "      private TestModule testModule;",
             "",
             "      private LeafImpl() {",
@@ -604,7 +604,7 @@ public void moduleInstanceDependency_withModuleParams() {
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    protected LeafImpl() {",
             "      super();",
             "    }",
@@ -660,7 +660,7 @@ public void moduleInstanceDependency_withModuleParams() {
             "    }",
             "  }",
             "",
-            "  public final class AncestorImpl extends DaggerAncestor {",
+            "  protected final class AncestorImpl extends DaggerAncestor {",
             "    private AncestorImpl() {",
             "      super();",
             "    }",
@@ -670,7 +670,7 @@ public void moduleInstanceDependency_withModuleParams() {
             "      return new LeafImpl(module);",
             "    }",
             "",
-            "    public final class LeafImpl extends DaggerAncestor.LeafImpl {",
+            "    protected final class LeafImpl extends DaggerAncestor.LeafImpl {",
             "      private TestModule testModule;",
             "",
             "      private LeafImpl(TestModule module) {",
@@ -755,9 +755,9 @@ public void generatedInstanceBinding() {
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafBuilder extends DaggerLeaf.Builder {}",
+            "  protected abstract class LeafBuilder extends DaggerLeaf.Builder {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    protected LeafImpl(LeafBuilder builder) {",
             "      super(builder);",
             "    }",
@@ -811,7 +811,7 @@ public void generatedInstanceBinding() {
             "    }",
             "  }",
             "",
-            "  public final class AncestorImpl extends DaggerAncestor {",
+            "  protected final class AncestorImpl extends DaggerAncestor {",
             "    private AncestorImpl() {",
             "      super();",
             "    }",
@@ -828,7 +828,7 @@ public void generatedInstanceBinding() {
             "      }",
             "    }",
             "",
-            "    public final class LeafImpl extends DaggerAncestor.LeafImpl {",
+            "    protected final class LeafImpl extends DaggerAncestor.LeafImpl {",
             "      private LeafImpl(LeafBuilder builder) {",
             "        super(builder);",
             "      }",
@@ -995,7 +995,7 @@ public void optionalBindings_satisfiedInAncestor() {
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    protected LeafImpl() { super(); }",
             "",
             "    @Override",
@@ -1086,7 +1086,7 @@ public void optionalBindings_satisfiedInGrandAncestor() {
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    protected LeafImpl() { super(); }",
             "  }",
             "}");
@@ -1133,10 +1133,10 @@ public void optionalBindings_satisfiedInGrandAncestor() {
             "public abstract class DaggerGreatAncestor implements GreatAncestor {",
             "  protected DaggerGreatAncestor() {}",
             "",
-            "  public abstract class AncestorImpl extends DaggerAncestor {",
+            "  protected abstract class AncestorImpl extends DaggerAncestor {",
             "    protected AncestorImpl() { super(); }",
             "",
-            "    public abstract class LeafImpl extends DaggerAncestor.LeafImpl {",
+            "    protected abstract class LeafImpl extends DaggerAncestor.LeafImpl {",
             "      protected LeafImpl() { super(); }",
             "",
             "      @Override",
@@ -1211,7 +1211,7 @@ public void optionalBindings_nonComponentMethodDependencySatisfiedInAncestor() {
             "            getOptionalOfSatisfiedInAncestor());",
             "  }",
             "",
-            "  public Optional<SatisfiedInAncestor> getOptionalOfSatisfiedInAncestor() {",
+            "  protected Optional<SatisfiedInAncestor> getOptionalOfSatisfiedInAncestor() {",
             "    return Optional.<SatisfiedInAncestor>empty();",
             "  }",
             "}");
@@ -1258,11 +1258,12 @@ public void optionalBindings_nonComponentMethodDependencySatisfiedInAncestor() {
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    protected LeafImpl() { super(); }",
             "",
             "    @Override",
-            "    public final Optional<SatisfiedInAncestor> getOptionalOfSatisfiedInAncestor() {",
+            "    protected final Optional<SatisfiedInAncestor>",
+            "        getOptionalOfSatisfiedInAncestor() {",
             "      return Optional.of(",
             "          AncestorModule_SatisfiedInAncestorFactory.proxySatisfiedInAncestor());",
             "    }",
@@ -1343,7 +1344,7 @@ public void optionalBindings_boundInAncestorAndSatisfiedInGrandAncestor() {
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    protected LeafImpl() { super(); }",
             "",
             "    @Override",
@@ -1395,10 +1396,10 @@ public void optionalBindings_boundInAncestorAndSatisfiedInGrandAncestor() {
             "public abstract class DaggerGrandAncestor implements GrandAncestor {",
             "  protected DaggerGrandAncestor() {}",
             "",
-            "  public abstract class AncestorImpl extends DaggerAncestor {",
+            "  protected abstract class AncestorImpl extends DaggerAncestor {",
             "    protected AncestorImpl() { super(); }",
             "",
-            "    public abstract class LeafImpl extends DaggerAncestor.LeafImpl {",
+            "    protected abstract class LeafImpl extends DaggerAncestor.LeafImpl {",
             "      protected LeafImpl() { super(); }",
             "",
             "      @Override",
@@ -1554,7 +1555,7 @@ public void setMultibindings_contributionsInAncestorOnly() {
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    protected LeafImpl() { super(); }",
             "",
             "    @Override",
@@ -1678,7 +1679,7 @@ public void setMultibindings_contributionsInLeafAndAncestor() {
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    protected LeafImpl() { super(); }",
             "",
             "    @Override",
@@ -1784,7 +1785,7 @@ public void setMultibindings_contributionsInLeafAndGrandAncestor() {
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    protected LeafImpl() { super(); }",
             "  }",
             "}");
@@ -1838,7 +1839,7 @@ public void setMultibindings_contributionsInLeafAndGrandAncestor() {
             "public abstract class DaggerGrandAncestor implements GrandAncestor {",
             "  protected DaggerGrandAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    protected LeafImpl() {",
             "      super();",
             "    }",
@@ -1918,7 +1919,7 @@ public void setMultibindings_nonComponentMethodDependency() {
             "        .proxyProvidesRequresInAllSubcomponentsSet(getSetOfInAllSubcomponents());",
             "  }",
             "",
-            "  public Set<InAllSubcomponents> getSetOfInAllSubcomponents() {",
+            "  protected Set<InAllSubcomponents> getSetOfInAllSubcomponents() {",
             "    return ImmutableSet.<InAllSubcomponents>of(",
             "        LeafModule_ProvideInAllSubcomponentsFactory",
             "            .proxyProvideInAllSubcomponents());",
@@ -1971,11 +1972,11 @@ public void setMultibindings_nonComponentMethodDependency() {
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    protected LeafImpl() { super(); }",
             "",
             "    @Override",
-            "    public Set<InAllSubcomponents> getSetOfInAllSubcomponents() {",
+            "    protected Set<InAllSubcomponents> getSetOfInAllSubcomponents() {",
             "      return ImmutableSet.<InAllSubcomponents>builderWithExpectedSize(2)",
             "          .add(AncestorModule_ProvideInAllSubcomponentsFactory",
             "              .proxyProvideInAllSubcomponents())",
@@ -2076,12 +2077,12 @@ public void setMultibindings_newSubclass() {
             "        .proxyProvideRequiresInAncestorSet(getSetOfInAncestor());",
             "  }",
             "",
-            "  public Set<InAncestor> getSetOfInAncestor() {",
+            "  protected Set<InAncestor> getSetOfInAncestor() {",
             "    return ImmutableSet.<InAncestor>of(",
             "        AncestorModule_ProvideInAncestorFactory.proxyProvideInAncestor());",
             "  }",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    protected LeafImpl() { super(); }",
             "",
             "    @Override",
@@ -2203,7 +2204,7 @@ public void setMultibinding_requestedAsInstanceInLeaf_requestedAsFrameworkInstan
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    private Provider<Set<Multibound>> setOfMultiboundProvider;",
             "",
             "    protected LeafImpl() { ",
@@ -2222,7 +2223,7 @@ public void setMultibinding_requestedAsInstanceInLeaf_requestedAsFrameworkInstan
             "              .build();",
             "    }",
             "",
-            "    public Provider<Set<Multibound>> getSetOfMultiboundProvider() {",
+            "    protected Provider<Set<Multibound>> getSetOfMultiboundProvider() {",
             "      return setOfMultiboundProvider;",
             "    }",
             "",
@@ -2365,7 +2366,7 @@ public void setMultibindings_contributionsInLeafAndAncestor_frameworkInstances()
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    private Provider<Set<InEachSubcomponent>> setOfInEachSubcomponentProvider = ",
             "        new DelegateFactory<>();",
             "",
@@ -2543,7 +2544,7 @@ public void mapMultibindings_contributionsInAncestorOnly() {
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    protected LeafImpl() { super(); }",
             "",
             "    @Override",
@@ -2663,7 +2664,7 @@ public void mapMultibindings_contributionsInLeafAndAncestor() {
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    protected LeafImpl() { super(); }",
             "",
             "    @Override",
@@ -2805,7 +2806,7 @@ public void mapMultibindings_contributionsInLeafAndAncestor_frameworkInstance()
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    private Provider<Map<String, InEachSubcomponent>> ",
             "      mapOfStringAndInEachSubcomponentProvider = new DelegateFactory<>();",
             "",
@@ -2928,7 +2929,7 @@ public void mapMultibindings_contributionsInLeafAndGrandAncestor() {
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    protected LeafImpl() { super(); }",
             "  }",
             "}");
@@ -2981,10 +2982,10 @@ public void mapMultibindings_contributionsInLeafAndGrandAncestor() {
             "public abstract class DaggerGrandAncestor implements GrandAncestor {",
             "  protected DaggerGrandAncestor() {}",
             "",
-            "  public abstract class AncestorImpl extends DaggerAncestor {",
+            "  protected abstract class AncestorImpl extends DaggerAncestor {",
             "    protected AncestorImpl() { super(); }",
             "",
-            "    public abstract class LeafImpl extends DaggerAncestor.LeafImpl {",
+            "    protected abstract class LeafImpl extends DaggerAncestor.LeafImpl {",
             "      protected LeafImpl() { super(); }",
             "",
             "      @Override",
@@ -3111,7 +3112,7 @@ public void mapMultibindings_contributionsInLeafAndAncestorWithoutGuava() {
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    protected LeafImpl() {",
             "      super();",
             "    }",
@@ -3241,7 +3242,7 @@ public void mapMultibinding_requestedAsInstanceInLeaf_requestedAsFrameworkInstan
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    private Provider<Map<Integer, Multibound>> mapOfIntegerAndMultiboundProvider;",
             "",
             "    protected LeafImpl() { ",
@@ -3260,7 +3261,7 @@ public void mapMultibinding_requestedAsInstanceInLeaf_requestedAsFrameworkInstan
             "              .build();",
             "    }",
             "",
-            "    public Provider<Map<Integer, Multibound>> ",
+            "    protected Provider<Map<Integer, Multibound>> ",
             "        getMapOfIntegerAndMultiboundProvider() {",
             "      return mapOfIntegerAndMultiboundProvider;",
             "    }",
@@ -3373,7 +3374,7 @@ public void emptyMultibinds_set() {
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    protected LeafImpl() { super(); }",
             "",
             "    @Override",
@@ -3487,7 +3488,7 @@ public void emptyMultibinds_set_frameworkInstance() {
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    private Provider<Set<Multibound>> setOfMultiboundProvider =",
             "        new DelegateFactory<>();",
             "",
@@ -3617,7 +3618,7 @@ public void emptyMultibinds_map() {
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    protected LeafImpl() { super(); }",
             "",
             "    @Override",
@@ -3733,7 +3734,7 @@ public void emptyMultibinds_map_frameworkInstance() {
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    private Provider<Map<Integer, Multibound>> mapOfIntegerAndMultiboundProvider =",
             "        new DelegateFactory<>()",
             "",
@@ -3808,7 +3809,7 @@ public void provisionOverInjection_providedInAncestor() {
             "    return new ProvidedInAncestor(getString());",
             "  }",
             "",
-            "  public abstract String getString();",
+            "  protected abstract String getString();",
             "}");
     Compilation compilation = compile(filesToCompile.build());
     assertThat(compilation).succeededWithoutWarnings();
@@ -3852,7 +3853,7 @@ public void provisionOverInjection_providedInAncestor() {
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    protected LeafImpl() { super(); }",
             "",
             "    @Override",
@@ -3909,7 +3910,7 @@ public void provisionOverInjection_providedInGrandAncestor() {
             "    return new ProvidedInGrandAncestor(getString());",
             "  }",
             "",
-            "  public abstract String getString();",
+            "  protected abstract String getString();",
             "}");
     Compilation compilation = compile(filesToCompile.build());
     assertThat(compilation).succeededWithoutWarnings();
@@ -3939,7 +3940,7 @@ public void provisionOverInjection_providedInGrandAncestor() {
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    protected LeafImpl() { super(); }",
             "  }",
             "}");
@@ -3985,10 +3986,10 @@ public void provisionOverInjection_providedInGrandAncestor() {
             "public abstract class DaggerGrandAncestor implements GrandAncestor {",
             "  protected DaggerGrandAncestor() {}",
             "",
-            "  public abstract class AncestorImpl extends DaggerAncestor {",
+            "  protected abstract class AncestorImpl extends DaggerAncestor {",
             "    protected AncestorImpl() { super(); }",
             "",
-            "    public abstract class LeafImpl extends DaggerAncestor.LeafImpl {",
+            "    protected abstract class LeafImpl extends DaggerAncestor.LeafImpl {",
             "      protected LeafImpl() { super(); }",
             "",
             "      @Override",
@@ -4056,9 +4057,9 @@ public void provisionOverInjection_indirectDependency() {
             "    return new InjectedInLeaf(getProvidedInAncestor());",
             "  }",
             "",
-            "  public abstract String getString();",
+            "  protected abstract String getString();",
             "",
-            "  public ProvidedInAncestor getProvidedInAncestor() {",
+            "  protected ProvidedInAncestor getProvidedInAncestor() {",
             "    return new ProvidedInAncestor(getString());",
             "  }",
             "}");
@@ -4104,13 +4105,13 @@ public void provisionOverInjection_indirectDependency() {
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    protected LeafImpl() {",
             "      super();",
             "    }",
             "",
             "    @Override",
-            "    public final ProvidedInAncestor getProvidedInAncestor() {",
+            "    protected final ProvidedInAncestor getProvidedInAncestor() {",
             "      return AncestorModule_ProvideProvidedInAncestorFactory",
             "          .proxyProvideProvidedInAncestor();",
             "    }",
@@ -4168,7 +4169,7 @@ public void provisionOverInjection_prunedIndirectDependency() {
             "        getPrunedDependency());",
             "  }",
             "",
-            "  public abstract Object getPrunedDependency();",
+            "  protected abstract Object getPrunedDependency();",
             "}");
     Compilation compilation = compile(filesToCompile.build());
     assertThat(compilation).succeededWithoutWarnings();
@@ -4240,13 +4241,13 @@ public void provisionOverInjection_prunedIndirectDependency() {
             "    }",
             "  }",
             "",
-            "  public final class LeafImpl extends DaggerLeaf {",
+            "  protected final class LeafImpl extends DaggerLeaf {",
             "    private LeafImpl() {",
             "      super();",
             "    }",
             "",
             "    @Override",
-            "    public Object getPrunedDependency() {",
+            "    protected Object getPrunedDependency() {",
             "      throw new UnsupportedOperationException(",
             "          \"This binding is not part of the final binding graph. The key was \"",
             "              + \"requested by a binding that was believed to possibly be part of \"",
@@ -4356,14 +4357,15 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             "    return responsesEntryPoint.get();",
             "  }",
             "",
-            "  public abstract Provider<Executor> getProductionImplementationExecutorProvider();",
+            "  protected abstract Provider<Executor>",
+            "      getProductionImplementationExecutorProvider();",
             "",
-            "  public abstract Provider<ProductionComponentMonitor>",
+            "  protected abstract Provider<ProductionComponentMonitor>",
             "      getProductionComponentMonitorProvider();",
             "",
-            "  public abstract Producer getResponseDependencyProducer();",
+            "  protected abstract Producer getResponseDependencyProducer();",
             "",
-            "  public Producer<Set<Response>> getSetOfResponseProducer() {",
+            "  protected Producer<Set<Response>> getSetOfResponseProducer() {",
             "    return setOfResponseProducer;",
             "  }",
             "",
@@ -4394,7 +4396,7 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             "import java.util.concurrent.Executor;",
             "",
             "@Module",
-            "public final class ExecutorModule {",
+            "final class ExecutorModule {",
             "  @Provides",
             "  @Production",
             "  Executor executor() {",
@@ -4566,7 +4568,7 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             "    }",
             "  }",
             "",
-            "  public final class LeafImpl extends DaggerLeaf implements CancellationListener {",
+            "  protected final class LeafImpl extends DaggerLeaf implements CancellationListener {",
             "    private Producer<Set<Response>> setOfResponseProducer = new DelegateProducer<>();",
             "",
             "    private LeafImpl(LeafBuilder builder) {",
@@ -4587,23 +4589,23 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             "    }",
             "",
             "    @Override",
-            "    public Provider<Executor> getProductionImplementationExecutorProvider() {",
+            "    protected Provider<Executor> getProductionImplementationExecutorProvider() {",
             "      return DaggerRoot.this.productionImplementationExecutorProvider;",
             "    }",
             "",
             "    @Override",
-            "    public Provider<ProductionComponentMonitor>",
+            "    protected Provider<ProductionComponentMonitor>",
             "        getProductionComponentMonitorProvider() {",
             "      return DaggerRoot.this.monitorProvider;",
             "    }",
             "",
             "    @Override",
-            "    public Producer getResponseDependencyProducer() {",
+            "    protected Producer getResponseDependencyProducer() {",
             "      return DaggerRoot.this.responseDependencyProducer;",
             "    }",
             "",
             "    @Override",
-            "    public Producer<Set<Response>> getSetOfResponseProducer() {",
+            "    protected Producer<Set<Response>> getSetOfResponseProducer() {",
             "      return setOfResponseProducer;",
             "    }",
             "",
@@ -4657,7 +4659,7 @@ public void lazyOfModifiableBinding() {
             "public abstract class DaggerLeaf implements Leaf {",
             "  protected DaggerLeaf() {}",
             "",
-            "  public abstract Provider<MissingInLeaf> missingInLeafProvider();",
+            "  protected abstract Provider<MissingInLeaf> missingInLeafProvider();",
             "",
             "  @Override",
             "  public final Lazy<MissingInLeaf> lazy() {",
@@ -4709,11 +4711,11 @@ public void lazyOfModifiableBinding() {
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    protected LeafImpl() { super(); }",
             "",
             "    @Override",
-            "    public abstract Provider<MissingInLeaf> missingInLeafProvider() {",
+            "    protected abstract Provider<MissingInLeaf> missingInLeafProvider() {",
             "      return AncestorModule_SatisfiedInAncestorFactory.create();",
             "    }",
             "  }",
@@ -4807,10 +4809,10 @@ public void missingBindingAccessInLeafAndAncestor() {
             "    return testProvider;",
             "  }",
             "",
-            "  public abstract Object getMissing();",
-            "  public abstract Provider getMissingProvider();",
-            "  public abstract Object getProvidedInAncestor_InducesSetBinding();",
-            "  public abstract Provider getProvidedInAncestor_InducesSetBindingProvider();",
+            "  protected abstract Object getMissing();",
+            "  protected abstract Provider getMissingProvider();",
+            "  protected abstract Object getProvidedInAncestor_InducesSetBinding();",
+            "  protected abstract Provider getProvidedInAncestor_InducesSetBindingProvider();",
             "}");
     Compilation compilation = compile(filesToCompile.build());
     assertThat(compilation).succeededWithoutWarnings();
@@ -4868,7 +4870,7 @@ public void missingBindingAccessInLeafAndAncestor() {
             "public abstract class DaggerAncestor implements Ancestor {",
             "  protected DaggerAncestor() {}",
             "",
-            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "  protected abstract class LeafImpl extends DaggerLeaf {",
             "    private LeafModule_UnresolvedSetBindingFactory unresolvedSetBindingProvider;",
             "",
             "    private Provider<Set<Object>> setOfObjectProvider;",
@@ -4908,23 +4910,23 @@ public void missingBindingAccessInLeafAndAncestor() {
 
             "    }",
             "",
-            "    public Set<Object> getSetOfObject() {",
+            "    protected Set<Object> getSetOfObject() {",
             "      return ImmutableSet.<Object>of(",
             "          AncestorModule_SetContributionFactory.proxySetContribution(), getObject());",
             "    }",
             "",
             "    @Override",
-            "    public final Object getProvidedInAncestor_InducesSetBinding() {",
+            "    protected final Object getProvidedInAncestor_InducesSetBinding() {",
             "      return AncestorModule_ProvidedInAncestorFactory.proxyProvidedInAncestor(",
             "          getSetOfObject());",
             "    }",
             "",
-            "    public Provider<Set<Object>> getSetOfObjectProvider() {",
+            "    protected Provider<Set<Object>> getSetOfObjectProvider() {",
             "      return setOfObjectProvider;",
             "    }",
             "",
             "    @Override",
-            "    public final Provider getProvidedInAncestor_InducesSetBindingProvider() {",
+            "    protected final Provider getProvidedInAncestor_InducesSetBindingProvider() {",
             "      return providedInAncestorProvider;",
             "    }",
             "  }",
