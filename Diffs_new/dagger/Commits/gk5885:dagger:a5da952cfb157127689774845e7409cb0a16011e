diff --git a/subcomponents.md b/subcomponents.md
index a7e446b98..34d036d26 100644
--- a/subcomponents.md
+++ b/subcomponents.md
@@ -97,7 +97,32 @@ class BoundInServerComponent {
 }
 ```
 
-> TODO(dpb): Describe subcomponent builders.
+### Subcomponent builders
+
+You can also define a builder for your subcomponent, similarly to how
+[component builders] are defined.
+
+```java
+@Component(modules = {ServerModule.class, AuthModule.class})
+interface ServerComponent {
+  Server server();
+  SessionComponent.Builder sessionComponentBuilder();
+}
+
+@Subcomponent(modules = SessionModule.class)
+interface SessionComponent {
+  @Subcomponent.Builder
+  interface Builder {
+    Builder sessionModule(SessionModule sessionModule);
+    SessionComponent build();
+  }
+}
+
+ServerComponent serverComponent = DaggerServerComponent.create();
+SessionComponent sessionComponent = serverComponent.sessionComponentBuilder()
+    .sessionModule(new SessionModule(…))
+    .build();
+```
 
 ## Subcomponents and scope
 
@@ -207,16 +232,119 @@ some conflicting bindings.
 
 ### Extending multibindings
 
-> TODO(dpb)
+Like other bindings, [multibindings](multibindings) in a parent component are
+visible to bindings in subcomponents. But subcomponents can also add
+multibindings to maps and sets bound in their parent. Any such additional
+contributions are visible only to bindings within the subcomponent or its
+subcomponents, and are not visible within the parent.
 
-### Sharing modules with parents
+```java
+@Component(modules = ParentModule.class)
+interface Parent {
+  Map<String, Int> map();
+  Set<String> set();
 
-> TODO(dpb)
+  Child child();
+}
+
+@Module
+class ParentModule {
+  @Provides(type = MAP)
+  @StringKey("one") static int one() {
+    return 1;
+  }
+
+  @Provides(type = MAP)
+  @StringKey("two") static int two() {
+    return 2;
+  }
+
+  @Provides(type = SET)
+  static String a() {
+    return "a"
+  }
+
+  @Provides(type = SET)
+  static String b() {
+    return "b"
+  }
+}
+
+@Subcomponent(modules = Child.class)
+interface Child {
+  Map<String, String> map();
+  Set<String> set();
+}
+
+@Module
+class ChildModule {
+  @Provides(type = MAP)
+  @StringKey("three") static int three() {
+    return 3;
+  }
+
+  @Provides(type = MAP)
+  @StringKey("four") static int four() {
+    return 4;
+  }
+
+  @Provides(type = SET)
+  static String c() {
+    return "c"
+  }
+
+  @Provides(type = SET)
+  static String d() {
+    return "d"
+  }
+}
+
+Parent parent = DaggerParent.create();
+Child child = parent.child();
+assertThat(parent.map().keySet()).containsExactly("one", "two");
+assertThat(child.map().keySet()).containsExactly("one", "two", "three", "four");
+assertThat(parent.set()).containsExactly("a", "b");
+assertThat(child.set()).containsExactly("a", "b", "c", "d");
+```
+
+### Repeated modules
+
+When the same module type is installed in a component and any of its
+subcomponents, then each of those components will automatically use the same
+instance of the module. This means that it is an error if a subcomponent factory
+method includes a repeated module as a parameter or if you call a subcomponent
+builder method for a repeated module. (The latter cannot be checked at compile
+time, and is a runtime error.)
+
+```java
+@Component(modules = {RepeatedModule.class, …})
+interface ComponentOne {
+  ComponentTwo componentTwo(RepeatedModule repeatedModule); // COMPILE ERROR!
+  ComponentThree.Builder componentThreeBuilder();
+}
+
+@Subcomponent(modules = {RepeatedModule.class, …})
+interface ComponentTwo { … }
+
+@Subcomponent(modules = {RepeatedModule.class, …})
+interface ComponentThree {
+  @Subcomponent.Builder
+  interface Builder {
+    Builder repeatedModule(RepeatedModule repeatedModule);
+    ComponentThree build();
+  }
+}
+
+DaggerComponentOne.create().componentThreeBuilder()
+    .repeatedModule(new RepeatedModule()) // UnsupportedOperationException!
+    .build();
+```
 
 <!-- References -->
 
 
 [`@Component`]: http://google.github.io/dagger/api/latest/dagger/Component.html
+[component builders]: http://google.github.io/dagger/api/latest/dagger/Component.Builder.html
 [component-methods]: http://google.github.io/dagger/api/latest/dagger/Component.html#component-methods
 [component-subcomponents]: http://google.github.io/dagger/api/latest/dagger/Component.html#subcomponents
 [`@Inject`]: http://docs.oracle.com/javaee/7/api/javax/inject/Inject.html
@@ -226,3 +354,5 @@ some conflicting bindings.
 [`@Singleton`]: http://docs.oracle.com/javaee/7/api/javax/inject/Singleton.html
 [`@Subcomponent`]: http://google.github.io/dagger/api/latest/dagger/Subcomponent.html
 
+
+
