diff --git a/javatests/dagger/functional/nullables/NullabilityTest.java b/javatests/dagger/functional/nullables/NullabilityTest.java
index 8db577bb8..6706ece06 100644
--- a/javatests/dagger/functional/nullables/NullabilityTest.java
+++ b/javatests/dagger/functional/nullables/NullabilityTest.java
@@ -35,7 +35,9 @@
       component.nullFoo();
       fail();
     } catch (NullPointerException npe) {
-      assertThat(npe).hasMessage("Cannot return null from a non-@Nullable @Provides method");
+      assertThat(npe)
+          .hasMessageThat()
+          .isEqualTo("Cannot return null from a non-@Nullable @Provides method");
     }
 
     // set number to non-null so we can create
@@ -106,7 +108,9 @@
       component.number();
       fail();
     } catch (NullPointerException npe) {
-      assertThat(npe).hasMessage("Cannot return null from a non-@Nullable component method");
+      assertThat(npe)
+          .hasMessageThat()
+          .isEqualTo("Cannot return null from a non-@Nullable component method");
     }
   }
 
@@ -120,8 +124,12 @@ private void validate(boolean fromProvides,
       numberProvider.get();
       fail();
     } catch (NullPointerException npe) {
-      assertThat(npe).hasMessage("Cannot return null from a non-@Nullable "
-          + (fromProvides ? "@Provides" : "component") + " method");
+      assertThat(npe)
+          .hasMessageThat()
+          .isEqualTo(
+              "Cannot return null from a non-@Nullable "
+                  + (fromProvides ? "@Provides" : "component")
+                  + " method");
     }
     assertThat(stringProvider.get()).isNull();
   }
diff --git a/javatests/dagger/functional/producers/multibindings/MultibindingTest.java b/javatests/dagger/functional/producers/multibindings/MultibindingTest.java
index 9e5568baa..81daa8841 100644
--- a/javatests/dagger/functional/producers/multibindings/MultibindingTest.java
+++ b/javatests/dagger/functional/producers/multibindings/MultibindingTest.java
@@ -85,7 +85,7 @@ public void setBindingOfProducedWithFailures() throws Exception {
     }
     assertThat(successes).containsExactly("singleton", "double", "ton");
     assertThat(failures).hasSize(1);
-    assertThat(Iterables.getOnlyElement(failures).getCause()).hasMessage("monkey");
+    assertThat(Iterables.getOnlyElement(failures).getCause()).hasMessageThat().isEqualTo("monkey");
   }
 
   @Test
@@ -131,7 +131,7 @@ public void mapBindingWithFailures() throws Exception {
       multibindingComponent.possiblyThrowingMap().get();
       fail();
     } catch (ExecutionException e) {
-      assertThat(e.getCause()).hasMessage("monkey");
+      assertThat(e.getCause()).hasMessageThat().isEqualTo("monkey");
     }
   }
 
@@ -149,7 +149,7 @@ public void mapOfProducerBindingWithFailures() throws Exception {
       future.get();
       fail();
     } catch (ExecutionException e) {
-      assertThat(e.getCause()).hasMessage("monkey");
+      assertThat(e.getCause()).hasMessageThat().isEqualTo("monkey");
     }
   }
 
@@ -167,7 +167,7 @@ public void mapOfProducedBindingWithFailures() throws Exception {
       produced.get();
       fail();
     } catch (ExecutionException e) {
-      assertThat(e.getCause()).hasMessage("monkey");
+      assertThat(e.getCause()).hasMessageThat().isEqualTo("monkey");
     }
   }
 
diff --git a/javatests/dagger/functional/subcomponent/repeat/RepeatedModuleTest.java b/javatests/dagger/functional/subcomponent/repeat/RepeatedModuleTest.java
index 1d7740b8a..7b447ebc1 100644
--- a/javatests/dagger/functional/subcomponent/repeat/RepeatedModuleTest.java
+++ b/javatests/dagger/functional/subcomponent/repeat/RepeatedModuleTest.java
@@ -58,7 +58,8 @@ public void repeatedModuleBuilderThrowsInSubcomponent() {
       fail();
     } catch (UnsupportedOperationException expected) {
       assertThat(expected)
-          .hasMessage(
+          .hasMessageThat()
+          .isEqualTo(
               "dagger.functional.subcomponent.repeat.RepeatedModule cannot be set "
                   + "because it is inherited from the enclosing component");
     }
@@ -75,7 +76,8 @@ public void repeatedModuleBuilderThrowsInGrandchildSubcomponent() {
       fail();
     } catch (UnsupportedOperationException expected) {
       assertThat(expected)
-          .hasMessage(
+          .hasMessageThat()
+          .isEqualTo(
               "dagger.functional.subcomponent.repeat.RepeatedModule cannot be set "
                   + "because it is inherited from the enclosing component");
     }
diff --git a/javatests/dagger/producers/internal/ProducersTest.java b/javatests/dagger/producers/internal/ProducersTest.java
index 8c4a256b2..b6a5480f5 100644
--- a/javatests/dagger/producers/internal/ProducersTest.java
+++ b/javatests/dagger/producers/internal/ProducersTest.java
@@ -49,7 +49,9 @@
     ListenableFuture<String> future = Futures.immediateFailedFuture(new RuntimeException("monkey"));
     ListenableFuture<Produced<String>> producedFuture = Producers.createFutureProduced(future);
     assertThat(producedFuture.isDone()).isTrue();
-    assertThat(getProducedException(producedFuture.get()).getCause()).hasMessage("monkey");
+    assertThat(getProducedException(producedFuture.get()).getCause())
+        .hasMessageThat()
+        .isEqualTo("monkey");
   }
 
   @Test public void createFutureProduced_cancelPropagatesBackwards() throws Exception {
@@ -94,7 +96,7 @@
       setFuture.get();
       fail();
     } catch (ExecutionException e) {
-      assertThat(e.getCause()).hasMessage("monkey");
+      assertThat(e.getCause()).hasMessageThat().isEqualTo("monkey");
     }
   }
 
@@ -120,7 +122,7 @@ public void allAsSet_failure() throws Exception {
       future.get();
       fail();
     } catch (ExecutionException e) {
-      assertThat(e.getCause()).hasMessage("gorilla");
+      assertThat(e.getCause()).hasMessageThat().isEqualTo("gorilla");
     }
   }
 
