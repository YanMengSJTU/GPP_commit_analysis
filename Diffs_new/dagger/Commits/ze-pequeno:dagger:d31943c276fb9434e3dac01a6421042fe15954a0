diff --git a/java/dagger/internal/codegen/DaggerElements.java b/java/dagger/internal/codegen/DaggerElements.java
index e9e505213..9313a7247 100644
--- a/java/dagger/internal/codegen/DaggerElements.java
+++ b/java/dagger/internal/codegen/DaggerElements.java
@@ -122,9 +122,7 @@ static String elementToString(Element element) {
         public String visitExecutable(ExecutableElement executableElement, Void aVoid) {
           return enclosingTypeAndMemberName(executableElement)
               .append(
-                  executableElement
-                      .getParameters()
-                      .stream()
+                  executableElement.getParameters().stream()
                       .map(parameter -> parameter.asType().toString())
                       .collect(joining(", ", "(", ")")))
               .toString();
@@ -161,10 +159,11 @@ protected String defaultAction(Element element, Void aVoid) {
         }
 
         private StringBuilder enclosingTypeAndMemberName(Element element) {
-          return new StringBuilder()
-              .append(element.getEnclosingElement().accept(this, null))
-              .append('.')
-              .append(element.getSimpleName());
+          StringBuilder name = new StringBuilder(element.getEnclosingElement().accept(this, null));
+          if (!element.getSimpleName().contentEquals("<init>")) {
+            name.append('.').append(element.getSimpleName());
+          }
+          return name;
         }
       };
 
diff --git a/java/dagger/internal/codegen/DependencyRequestFormatter.java b/java/dagger/internal/codegen/DependencyRequestFormatter.java
index 4ccf8aa18..7ad57c181 100644
--- a/java/dagger/internal/codegen/DependencyRequestFormatter.java
+++ b/java/dagger/internal/codegen/DependencyRequestFormatter.java
@@ -40,25 +40,21 @@
 import javax.lang.model.util.ElementKindVisitor8;
 
 /**
- * Formats a {@link DependencyRequest} into a {@link String} suitable for an error message listing
- * a chain of dependencies.
- * 
+ * Formats a {@link DependencyRequest} into a {@link String} suitable for an error message listing a
+ * chain of dependencies.
+ *
  * <dl>
- * <dt>For component provision methods
- * <dd>{@code @Qualifier SomeType is provided at\n    ComponentType.method()}
- * 
- * <dt>For component injection methods
- * <dd>{@code SomeType is injected at\n    ComponentType.method(foo)}
- * 
- * <dt>For parameters to {@link Provides @Provides}, {@link Produces @Produces}, or
- * {@link Inject @Inject} methods:
- * <dd>{@code @Qualified ResolvedType is injected at\n    EnclosingType.method([…, ]param[, …])}
- * 
- * <dt>For parameters to {@link Inject @Inject} constructors:
- * <dd>{@code @Qualified ResolvedType is injected at\n    EnclosingType.<init>([…, ]param[, …])}
- * 
- * <dt>For {@link Inject @Inject} fields:
- * <dd>{@code @Qualified ResolvedType is injected at\n    EnclosingType.field}
+ *   <dt>For component provision methods
+ *   <dd>{@code @Qualifier SomeType is provided at\n ComponentType.method()}
+ *   <dt>For component injection methods
+ *   <dd>{@code SomeType is injected at\n ComponentType.method(foo)}
+ *   <dt>For parameters to {@link Provides @Provides}, {@link Produces @Produces}, or {@link
+ *       Inject @Inject} methods:
+ *   <dd>{@code @Qualified ResolvedType is injected at\n EnclosingType.method([…, ]param[, …])}
+ *   <dt>For parameters to {@link Inject @Inject} constructors:
+ *   <dd>{@code @Qualified ResolvedType is injected at\n EnclosingType([…, ]param[, …])}
+ *   <dt>For {@link Inject @Inject} fields:
+ *   <dd>{@code @Qualified ResolvedType is injected at\n EnclosingType.field}
  * </dl>
  */
 final class DependencyRequestFormatter extends Formatter<DependencyRequest> {
diff --git a/java/dagger/internal/codegen/MethodSignatureFormatter.java b/java/dagger/internal/codegen/MethodSignatureFormatter.java
index 67535572c..ad79fa5af 100644
--- a/java/dagger/internal/codegen/MethodSignatureFormatter.java
+++ b/java/dagger/internal/codegen/MethodSignatureFormatter.java
@@ -95,11 +95,16 @@ private String format(
       }
       builder.append(' ');
     }
-    builder.append(nameOfType(methodType.getReturnType()));
-    builder.append(' ');
-    builder.append(declaringType.getQualifiedName());
-    builder.append('.');
-    builder.append(method.getSimpleName());
+    if (method.getSimpleName().contentEquals("<init>")) {
+      builder.append(declaringType.getQualifiedName());
+    } else {
+      builder
+          .append(nameOfType(methodType.getReturnType()))
+          .append(' ')
+          .append(declaringType.getQualifiedName())
+          .append('.')
+          .append(method.getSimpleName());
+    }
     builder.append('(');
     checkState(method.getParameters().size() == methodType.getParameterTypes().size());
     Iterator<? extends VariableElement> parameters = method.getParameters().iterator();
diff --git a/javatests/dagger/internal/codegen/DependencyCycleValidationTest.java b/javatests/dagger/internal/codegen/DependencyCycleValidationTest.java
index 9fcaeacf7..67d6b304e 100644
--- a/javatests/dagger/internal/codegen/DependencyCycleValidationTest.java
+++ b/javatests/dagger/internal/codegen/DependencyCycleValidationTest.java
@@ -64,11 +64,11 @@
             message(
                 "Found a dependency cycle:",
                 "    test.Outer.C is injected at",
-                "        test.Outer.A.<init>(cParam)",
+                "        test.Outer.A(cParam)",
                 "    test.Outer.A is injected at",
-                "        test.Outer.B.<init>(aParam)",
+                "        test.Outer.B(aParam)",
                 "    test.Outer.B is injected at",
-                "        test.Outer.C.<init>(bParam)",
+                "        test.Outer.C(bParam)",
                 "    test.Outer.C is provided at",
                 "        test.Outer.CComponent.getC()"))
         .inFile(component)
@@ -116,13 +116,13 @@
             message(
                 "Found a dependency cycle:",
                 "    test.Outer.C is injected at",
-                "        test.Outer.A.<init>(cParam)",
+                "        test.Outer.A(cParam)",
                 "    test.Outer.A is injected at",
-                "        test.Outer.B.<init>(aParam)",
+                "        test.Outer.B(aParam)",
                 "    test.Outer.B is injected at",
-                "        test.Outer.C.<init>(bParam)",
+                "        test.Outer.C(bParam)",
                 "    test.Outer.C is injected at",
-                "        test.Outer.D.<init>(cParam)",
+                "        test.Outer.D(cParam)",
                 "    test.Outer.D is provided at",
                 "        test.Outer.DComponent.getD()"))
         .inFile(component)
@@ -181,11 +181,11 @@ public void cyclicDependencyNotBrokenByMapBinding() {
                 "    test.Outer.C is injected at",
                 "        test.Outer.CModule.c(c)",
                 "    java.util.Map<java.lang.String,test.Outer.C> is injected at",
-                "        test.Outer.A.<init>(cMap)",
+                "        test.Outer.A(cMap)",
                 "    test.Outer.A is injected at",
-                "        test.Outer.B.<init>(aParam)",
+                "        test.Outer.B(aParam)",
                 "    test.Outer.B is injected at",
-                "        test.Outer.C.<init>(bParam)",
+                "        test.Outer.C(bParam)",
                 "    test.Outer.C is provided at",
                 "        test.Outer.CComponent.getC()"))
         .inFile(component)
@@ -242,11 +242,11 @@ public void cyclicDependencyWithSetBinding() {
                 "    test.Outer.C is injected at",
                 "        test.Outer.CModule.c(c)",
                 "    java.util.Set<test.Outer.C> is injected at",
-                "        test.Outer.A.<init>(cSet)",
+                "        test.Outer.A(cSet)",
                 "    test.Outer.A is injected at",
-                "        test.Outer.B.<init>(aParam)",
+                "        test.Outer.B(aParam)",
                 "    test.Outer.B is injected at",
-                "        test.Outer.C.<init>(bParam)",
+                "        test.Outer.C(bParam)",
                 "    test.Outer.C is provided at",
                 "        test.Outer.CComponent.getC()"))
         .inFile(component)
@@ -296,13 +296,13 @@ public void falsePositiveCyclicDependencyIndirectionDetected() {
             message(
                 "Found a dependency cycle:",
                 "    test.Outer.C is injected at",
-                "        test.Outer.A.<init>(cParam)",
+                "        test.Outer.A(cParam)",
                 "    test.Outer.A is injected at",
-                "        test.Outer.B.<init>(aParam)",
+                "        test.Outer.B(aParam)",
                 "    test.Outer.B is injected at",
-                "        test.Outer.C.<init>(bParam)",
+                "        test.Outer.C(bParam)",
                 "    javax.inject.Provider<test.Outer.C> is injected at",
-                "        test.Outer.D.<init>(cParam)",
+                "        test.Outer.D(cParam)",
                 "    test.Outer.D is provided at",
                 "        test.Outer.DComponent.getD()"))
         .inFile(component)
diff --git a/javatests/dagger/internal/codegen/MissingBindingValidationTest.java b/javatests/dagger/internal/codegen/MissingBindingValidationTest.java
index 66e81a8c7..661379459 100644
--- a/javatests/dagger/internal/codegen/MissingBindingValidationTest.java
+++ b/javatests/dagger/internal/codegen/MissingBindingValidationTest.java
@@ -305,7 +305,7 @@ public void genericInjectClassWithWildcardDependencies() {
             message(
                 "test.TestClass.A cannot be provided without an @Provides-annotated method.",
                 "    test.TestClass.A is injected at",
-                "        test.TestClass.B.<init>(a)",
+                "        test.TestClass.B(a)",
                 "    test.TestClass.B is injected at",
                 "        test.TestClass.C.b",
                 "    test.TestClass.C is injected at",
@@ -360,7 +360,7 @@ public void bindsMethodAppearsInTrace() {
                 "java.lang.String cannot be provided without an @Inject constructor or an "
                     + "@Provides-annotated method.",
                 "    java.lang.String is injected at",
-                "        TestImplementation.<init>(missingBinding)",
+                "        TestImplementation(missingBinding)",
                 "    TestImplementation is injected at",
                 "        TestModule.bindTestInterface(implementation)",
                 "    TestInterface is provided at",
@@ -413,11 +413,11 @@ public void bindsMethodAppearsInTrace() {
             message(
                 "java.util.List cannot be provided without an @Provides-annotated method.",
                 "    java.util.List is injected at",
-                "        test.TestClass.<init>(list)",
+                "        test.TestClass(list)",
                 "    test.TestClass is injected at",
-                "        test.Generic.<init>(t)",
+                "        test.Generic(t)",
                 "    test.Generic<test.TestClass> is injected at",
-                "        test.UsesTest.<init>(genericTestClass)",
+                "        test.UsesTest(genericTestClass)",
                 "    test.UsesTest is provided at",
                 "        test.TestComponent.usesTest()"));
   }
@@ -467,11 +467,11 @@ public void bindsMethodAppearsInTrace() {
             message(
                 "java.util.List cannot be provided without an @Provides-annotated method.",
                 "    java.util.List is injected at",
-                "        test.TestClass.<init>(list)",
+                "        test.TestClass(list)",
                 "    test.TestClass is injected at",
                 "        test.Generic.t",
                 "    test.Generic<test.TestClass> is injected at",
-                "        test.UsesTest.<init>(genericTestClass)",
+                "        test.UsesTest(genericTestClass)",
                 "    test.UsesTest is provided at",
                 "        test.TestComponent.usesTest()"));
   }
diff --git a/javatests/dagger/spi/FailingPlugin.java b/javatests/dagger/spi/FailingPlugin.java
index a8ccf5b2d..71c1ed793 100644
--- a/javatests/dagger/spi/FailingPlugin.java
+++ b/javatests/dagger/spi/FailingPlugin.java
@@ -45,19 +45,23 @@ public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticR
       String key = options.get("error_on_binding");
       bindingGraph.bindingNodes().stream()
           .filter(node -> node.key().toString().equals(key))
-          .forEach(node -> diagnosticReporter.reportBinding(ERROR, node, "Bad Binding!"));
+          .forEach(node -> diagnosticReporter.reportBinding(ERROR, node, "Bad Binding: %s", node));
     }
 
     if (options.containsKey("error_on_component")) {
-      diagnosticReporter.reportComponent(ERROR, bindingGraph.rootComponentNode(), "Bad Component!");
+      diagnosticReporter.reportComponent(
+          ERROR,
+          bindingGraph.rootComponentNode(),
+          "Bad Component: %s",
+          bindingGraph.rootComponentNode());
     }
 
     if (options.containsKey("error_on_subcomponents")) {
-      bindingGraph
-          .componentNodes()
-          .stream()
+      bindingGraph.componentNodes().stream()
           .filter(node -> !node.componentPath().atRoot())
-          .forEach(node -> diagnosticReporter.reportComponent(ERROR, node, "Bad Subcomponent!"));
+          .forEach(
+              node ->
+                  diagnosticReporter.reportComponent(ERROR, node, "Bad Subcomponent: %s", node));
     }
 
     if (options.containsKey("error_on_dependency")) {
@@ -70,7 +74,8 @@ public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticR
                       .get()
                       .getSimpleName()
                       .contentEquals(dependency))
-          .forEach(edge -> diagnosticReporter.reportDependency(ERROR, edge, "Bad Dependency!"));
+          .forEach(
+              edge -> diagnosticReporter.reportDependency(ERROR, edge, "Bad Dependency: %s", edge));
     }
   }
 
diff --git a/javatests/dagger/spi/SpiPluginTest.java b/javatests/dagger/spi/SpiPluginTest.java
index fd4d9d9fe..0492304a7 100644
--- a/javatests/dagger/spi/SpiPluginTest.java
+++ b/javatests/dagger/spi/SpiPluginTest.java
@@ -64,7 +64,7 @@ public void dependencyTraceAtBinding() {
     assertThat(compilation)
         .hadErrorContaining(
             message(
-                "[FailingPlugin] Bad Binding!",
+                "[FailingPlugin] Bad Binding: @Inject test.Foo()",
                 "    test.Foo is provided at",
                 "        test.TestComponent.foo()"))
         .inFile(component)
@@ -152,7 +152,7 @@ public void dependencyTraceAtDependencyRequest() {
     assertThat(compilationFactory.compilationWithErrorOnDependency("entryPoint"))
         .hadErrorContaining(
             message(
-                "[FailingPlugin] Bad Dependency!",
+                "[FailingPlugin] Bad Dependency: test.TestComponent.entryPoint() (entry point)",
                 "    test.EntryPoint is provided at",
                 "        test.TestComponent.entryPoint()"))
         .inFile(component)
@@ -160,9 +160,9 @@ public void dependencyTraceAtDependencyRequest() {
     assertThat(compilationFactory.compilationWithErrorOnDependency("dup1"))
         .hadErrorContaining(
             message(
-                "[FailingPlugin] Bad Dependency!",
+                "[FailingPlugin] Bad Dependency: test.EntryPoint(…, dup1, …)",
                 "    test.Duplicated is injected at",
-                "        test.EntryPoint.<init>(…, dup1, …)",
+                "        test.EntryPoint(…, dup1, …)",
                 "    test.EntryPoint is provided at",
                 "        test.TestComponent.entryPoint()"))
         .inFile(component)
@@ -170,9 +170,9 @@ public void dependencyTraceAtDependencyRequest() {
     assertThat(compilationFactory.compilationWithErrorOnDependency("dup2"))
         .hadErrorContaining(
             message(
-                "[FailingPlugin] Bad Dependency!",
+                "[FailingPlugin] Bad Dependency: test.EntryPoint(…, dup2)",
                 "    test.Duplicated is injected at",
-                "        test.EntryPoint.<init>(…, dup2)",
+                "        test.EntryPoint(…, dup2)",
                 "    test.EntryPoint is provided at",
                 "        test.TestComponent.entryPoint()"))
         .inFile(component)
@@ -183,11 +183,11 @@ public void dependencyTraceAtDependencyRequest() {
     assertThat(inFooDepCompilation)
         .hadErrorContaining(
             message(
-                "[FailingPlugin] Bad Dependency!",
+                "[FailingPlugin] Bad Dependency: test.Foo(inFooDep)",
                 "    test.Duplicated is injected at",
-                "        test.Foo.<init>(inFooDep)",
+                "        test.Foo(inFooDep)",
                 "    test.Foo is injected at",
-                "        test.EntryPoint.<init>(foo, …)",
+                "        test.EntryPoint(foo, …)",
                 "    test.EntryPoint is provided at",
                 "        test.TestComponent.entryPoint()",
                 "The following other entry points also depend on it:",
@@ -246,7 +246,8 @@ public void dependencyTraceAtDependencyRequest_subcomponents() {
     assertThat(compilationFactory.compilationWithErrorOnDependency("childEntryPoint"))
         .hadErrorContaining(
             message(
-                "[FailingPlugin] Bad Dependency!",
+                "[FailingPlugin] Bad Dependency: "
+                    + "test.TestSubcomponent.childEntryPoint() (entry point)",
                 "    test.EntryPoint is provided at",
                 "        test.TestSubcomponent.childEntryPoint()"
                     + " [test.TestComponent → test.TestSubcomponent]"))
@@ -259,9 +260,9 @@ public void dependencyTraceAtDependencyRequest_subcomponents() {
             //         test.TestComponent
             // TODO(dpb): Or invert the order: Child → Parent
             message(
-                "[FailingPlugin] Bad Dependency!",
+                "[FailingPlugin] Bad Dependency: test.EntryPoint(foo)",
                 "    test.Foo is injected at",
-                "        test.EntryPoint.<init>(foo)",
+                "        test.EntryPoint(foo)",
                 "    test.EntryPoint is provided at",
                 "        test.TestSubcomponent.childEntryPoint() "
                     + "[test.TestComponent → test.TestSubcomponent]"))
@@ -288,7 +289,7 @@ public void errorOnComponent() {
             .compile(component);
     assertThat(compilation).failed();
     assertThat(compilation)
-        .hadErrorContaining("[FailingPlugin] Bad Component!")
+        .hadErrorContaining("[FailingPlugin] Bad Component: test.TestComponent")
         .inFile(component)
         .onLineContaining("interface TestComponent");
   }
@@ -324,7 +325,8 @@ public void errorOnSubcomponent() {
     assertThat(compilation).failed();
     assertThat(compilation)
         .hadErrorContaining(
-            "[FailingPlugin] Bad Subcomponent! [test.TestComponent → test.TestSubcomponent]")
+            "[FailingPlugin] Bad Subcomponent: test.TestComponent → test.TestSubcomponent "
+                + "[test.TestComponent → test.TestSubcomponent]")
         .inFile(component)
         .onLineContaining("interface TestComponent");
   }
@@ -431,13 +433,13 @@ public void shortestPathToBindingExistsThroughSubcomponentBuilder() {
     assertThat(compilation)
         .hadErrorContaining(
             message(
-                "[FailingPlugin] Bad Binding!",
+                "[FailingPlugin] Bad Binding: @Inject test.ExposedOnSubcomponent()",
                 "    test.ExposedOnSubcomponent is injected at",
-                "        test.Chain3.<init>(exposedOnSubcomponent)",
+                "        test.Chain3(exposedOnSubcomponent)",
                 "    test.Chain3 is injected at",
-                "        test.Chain2.<init>(chain)",
+                "        test.Chain2(chain)",
                 "    test.Chain2 is injected at",
-                "        test.Chain1.<init>(chain)",
+                "        test.Chain1(chain)",
                 "    test.Chain1 is provided at",
                 "        test.TestComponent.chain()",
                 "The following other entry points also depend on it:",
