diff --git a/java/dagger/internal/codegen/ComponentProcessingStep.java b/java/dagger/internal/codegen/ComponentProcessingStep.java
index 4a723e901..7a0cf5bf1 100644
--- a/java/dagger/internal/codegen/ComponentProcessingStep.java
+++ b/java/dagger/internal/codegen/ComponentProcessingStep.java
@@ -17,6 +17,7 @@
 package dagger.internal.codegen;
 
 import static javax.lang.model.util.ElementFilter.typesIn;
+import static javax.tools.Diagnostic.Kind.ERROR;
 
 import com.google.auto.common.BasicAnnotationProcessor.ProcessingStep;
 import com.google.auto.common.MoreElements;
@@ -29,7 +30,7 @@
 import dagger.Component;
 import dagger.Subcomponent;
 import dagger.internal.codegen.ComponentValidator.ComponentValidationReport;
-import dagger.internal.codegen.DiagnosticReporterFactory.ErrorCountingDiagnosticReporter;
+import dagger.internal.codegen.DiagnosticReporterFactory.DiagnosticReporterImpl;
 import dagger.producers.ProductionComponent;
 import dagger.producers.ProductionSubcomponent;
 import dagger.spi.BindingGraphPlugin;
@@ -41,6 +42,7 @@
 import javax.inject.Inject;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
+import javax.tools.Diagnostic;
 
 /**
  * A {@link ProcessingStep} that is responsible for dealing with a component or production component
@@ -149,23 +151,9 @@
           continue;
         }
         BindingGraph bindingGraph = bindingGraphFactory.create(componentDescriptor);
-        ValidationReport<TypeElement> graphReport = bindingGraphValidator.validate(bindingGraph);
-        graphReport.printMessagesTo(messager);
-        if (!graphReport.isClean()) {
-          continue;
-        }
-
-        if (!validationPlugins.isEmpty() || !spiPlugins.isEmpty()) {
-          dagger.model.BindingGraph modelGraph = bindingGraphConverter.convert(bindingGraph);
-          boolean reportedErrors =
-              executePlugins(modelGraph, validationPlugins)
-                  || executePlugins(modelGraph, spiPlugins);
-          if (reportedErrors) {
-            continue;
-          }
+        if (isValid(bindingGraph)) {
+          generateComponent(bindingGraph);
         }
-
-        generateComponent(bindingGraph);
       } catch (TypeNotPresentException e) {
         rejectedElements.add(componentTypeElement);
       }
@@ -173,23 +161,34 @@
     return rejectedElements.build();
   }
 
+  private boolean isValid(BindingGraph bindingGraph) {
+    ValidationReport<TypeElement> graphReport = bindingGraphValidator.validate(bindingGraph);
+    graphReport.printMessagesTo(messager);
+
+    dagger.model.BindingGraph modelGraph = bindingGraphConverter.convert(bindingGraph);
+    if (executePlugins(modelGraph, validationPlugins).contains(ERROR) || !graphReport.isClean()) {
+      return false;
+    }
+    return !executePlugins(modelGraph, spiPlugins).contains(ERROR);
+  }
+
   /**
    * Calls {@link BindingGraphPlugin#visitGraph(dagger.model.BindingGraph, DiagnosticReporter)} on
    * each of {@code plugins}.
    *
-   * @return {@code true} if any plugin reported errors
+   * @return the kinds of diagnostics that were reported
    */
-  private boolean executePlugins(
+  private ImmutableSet<Diagnostic.Kind> executePlugins(
       dagger.model.BindingGraph graph, Iterable<BindingGraphPlugin> plugins) {
     // TODO(ronshapiro): Should we validate the uniqueness of plugin names?
-    boolean reportedErrors = false;
+    ImmutableSet.Builder<Diagnostic.Kind> diagnosticKinds = ImmutableSet.builder();
     for (BindingGraphPlugin plugin : plugins) {
-      ErrorCountingDiagnosticReporter reporter = diagnosticReporterFactory.reporter(graph, plugin);
+      DiagnosticReporterImpl reporter = diagnosticReporterFactory.reporter(graph, plugin);
       plugin.visitGraph(graph, reporter);
-      reportedErrors |= reporter.reportedErrors();
+      diagnosticKinds.addAll(reporter.reportedDiagnosticKinds());
     }
 
-    return reportedErrors;
+    return diagnosticKinds.build();
   }
 
   private void generateComponent(BindingGraph bindingGraph) {
diff --git a/java/dagger/internal/codegen/DiagnosticReporterFactory.java b/java/dagger/internal/codegen/DiagnosticReporterFactory.java
index 5fe2b85e5..e952bca98 100644
--- a/java/dagger/internal/codegen/DiagnosticReporterFactory.java
+++ b/java/dagger/internal/codegen/DiagnosticReporterFactory.java
@@ -19,9 +19,9 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.collect.Lists.asList;
 import static dagger.internal.codegen.DaggerGraphs.shortestPath;
-import static javax.tools.Diagnostic.Kind.ERROR;
 
 import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Sets;
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
@@ -58,26 +58,30 @@
   }
 
   /** Creates a reporter for a binding graph and a plugin. */
-  ErrorCountingDiagnosticReporter reporter(BindingGraph graph, BindingGraphPlugin plugin) {
-    return new ErrorCountingDiagnosticReporter(graph, plugin.pluginName());
+  DiagnosticReporterImpl reporter(BindingGraph graph, BindingGraphPlugin plugin) {
+    return new DiagnosticReporterImpl(graph, plugin.pluginName());
   }
 
-  /** A {@link DiagnosticReporter} that can tell how many errors were reported. */
-  class ErrorCountingDiagnosticReporter implements DiagnosticReporter {
-    private final dagger.model.BindingGraph graph;
+  /**
+   * A {@link DiagnosticReporter} that keeps track of which {@linkplain Diagnostic.Kind kinds} of
+   * diagnostics were reported.
+   */
+  final class DiagnosticReporterImpl implements DiagnosticReporter {
+    private final BindingGraph graph;
     private final String plugin;
     private final TypeElement rootComponent;
-    private boolean reportedErrors;
+    private final ImmutableSet.Builder<Diagnostic.Kind> reportedDiagnosticKinds =
+        ImmutableSet.builder();
 
-    ErrorCountingDiagnosticReporter(dagger.model.BindingGraph graph, String plugin) {
+    DiagnosticReporterImpl(BindingGraph graph, String plugin) {
       this.graph = graph;
       this.plugin = plugin;
       this.rootComponent = graph.rootComponentNode().componentPath().currentComponent();
     }
 
-    /** Returns whether any errors were reported. */
-    boolean reportedErrors() {
-      return reportedErrors;
+    /** Returns which {@linkplain Diagnostic.Kind kinds} of diagnostics were reported. */
+    ImmutableSet<Diagnostic.Kind> reportedDiagnosticKinds() {
+      return reportedDiagnosticKinds.build();
     }
 
     @Override
@@ -214,9 +218,7 @@ private void printAtEntryPoint(
 
     private void printMessage(
         Diagnostic.Kind diagnosticKind, CharSequence message, Element elementToReport) {
-      if (diagnosticKind.equals(ERROR)) {
-        reportedErrors = true;
-      }
+      reportedDiagnosticKinds.add(diagnosticKind);
       messager.printMessage(diagnosticKind, message, elementToReport);
     }
 
