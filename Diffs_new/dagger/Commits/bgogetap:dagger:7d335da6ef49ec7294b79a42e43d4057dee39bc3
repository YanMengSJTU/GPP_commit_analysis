diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index cb5f9d974..88de072ae 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -200,6 +200,7 @@ java_library(
     name = "internal_validation",
     srcs = [
         "BindingGraphValidationModule.java",
+        "InjectBindingValidation.java",
         "MapMultibindingValidation.java",
         "MembersInjectionBindingValidation.java",
         "NonNullableRequestForNullableBindingValidation.java",
diff --git a/java/dagger/internal/codegen/BindingGraphValidationModule.java b/java/dagger/internal/codegen/BindingGraphValidationModule.java
index 8cc72275e..b3f6afa42 100644
--- a/java/dagger/internal/codegen/BindingGraphValidationModule.java
+++ b/java/dagger/internal/codegen/BindingGraphValidationModule.java
@@ -25,6 +25,11 @@
 @Module
 interface BindingGraphValidationModule {
 
+  @Binds
+  @IntoSet
+  @Validation
+  BindingGraphPlugin injectBinding(InjectBindingValidation validation);
+
   @Binds
   @IntoSet
   @Validation
diff --git a/java/dagger/internal/codegen/BindingGraphValidator.java b/java/dagger/internal/codegen/BindingGraphValidator.java
index ada129508..7121ceb47 100644
--- a/java/dagger/internal/codegen/BindingGraphValidator.java
+++ b/java/dagger/internal/codegen/BindingGraphValidator.java
@@ -120,7 +120,6 @@
   private final Elements elements;
   private final DaggerTypes types;
   private final CompilerOptions compilerOptions;
-  private final InjectValidator injectValidator;
   private final InjectBindingRegistry injectBindingRegistry;
   private final BindingDeclarationFormatter bindingDeclarationFormatter;
   private final MethodSignatureFormatter methodSignatureFormatter;
@@ -132,7 +131,6 @@
       Elements elements,
       DaggerTypes types,
       CompilerOptions compilerOptions,
-      InjectValidator injectValidator,
       InjectBindingRegistry injectBindingRegistry,
       BindingDeclarationFormatter bindingDeclarationFormatter,
       MethodSignatureFormatter methodSignatureFormatter,
@@ -141,7 +139,6 @@
     this.elements = elements;
     this.types = types;
     this.compilerOptions = compilerOptions;
-    this.injectValidator = injectValidator.whenGeneratingCode();
     this.injectBindingRegistry = injectBindingRegistry;
     this.bindingDeclarationFormatter = bindingDeclarationFormatter;
     this.methodSignatureFormatter = methodSignatureFormatter;
@@ -604,14 +601,6 @@ protected void visitResolvedBindings(ResolvedBindings resolvedBindings) {
       protected void visitContributionBinding(
           ContributionBinding binding, ComponentDescriptor owningComponent) {
         checkBindingScope(binding, owningComponent);
-        if (binding.kind().equals(INJECTION)) {
-          TypeMirror type = binding.key().type();
-          ValidationReport<TypeElement> report =
-              injectValidator.validateType(MoreTypes.asTypeElement(type));
-          if (!report.isClean()) {
-            report(currentGraph()).addSubreport(report);
-          }
-        }
         if (compilerOptions.usesProducers()) {
           // TODO(dpb,beder): Validate this during @Inject/@Provides/@Produces validation.
           // Only the Dagger-specific binding may depend on the production executor.
@@ -992,8 +981,7 @@ private String formatContributionType(ContributionType type) {
         return "Set";
       case UNIQUE:
         return "Unique";
-      default:
-        throw new IllegalStateException("Unknown binding type: " + type);
     }
+    throw new AssertionError(type);
   }
 }
diff --git a/java/dagger/internal/codegen/InjectBindingValidation.java b/java/dagger/internal/codegen/InjectBindingValidation.java
new file mode 100644
index 000000000..373a37f73
--- /dev/null
+++ b/java/dagger/internal/codegen/InjectBindingValidation.java
@@ -0,0 +1,61 @@
+/*
+ * Copyright (C) 2018 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.internal.codegen;
+
+import static dagger.model.BindingKind.INJECTION;
+
+import com.google.auto.common.MoreTypes;
+import dagger.internal.codegen.ValidationReport.Item;
+import dagger.model.BindingGraph;
+import dagger.model.BindingGraph.BindingNode;
+import dagger.spi.BindingGraphPlugin;
+import dagger.spi.DiagnosticReporter;
+import javax.inject.Inject;
+import javax.lang.model.element.TypeElement;
+
+/** Validates bindings from {@code @Inject}-annotated constructors. */
+final class InjectBindingValidation implements BindingGraphPlugin {
+
+  private final InjectValidator injectValidator;
+
+  @Inject
+  InjectBindingValidation(InjectValidator injectValidator) {
+    this.injectValidator = injectValidator.whenGeneratingCode();
+  }
+
+  @Override
+  public String pluginName() {
+    return "Dagger/InjectBinding";
+  }
+
+  @Override
+  public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticReporter) {
+    bindingGraph
+        .bindingNodes()
+        .stream()
+        .filter(node -> node.binding().kind().equals(INJECTION)) // TODO(dpb): Move to BindingGraph
+        .forEach(node -> validateInjectionBinding(node, diagnosticReporter));
+  }
+
+  private void validateInjectionBinding(BindingNode node, DiagnosticReporter diagnosticReporter) {
+    ValidationReport<TypeElement> typeReport =
+        injectValidator.validateType(MoreTypes.asTypeElement(node.binding().key().type()));
+    for (Item item : typeReport.allItems()) {
+      diagnosticReporter.reportBinding(item.kind(), node, item.message());
+    }
+  }
+}
diff --git a/java/dagger/internal/codegen/ValidationReport.java b/java/dagger/internal/codegen/ValidationReport.java
index ede2bfd0d..9fd2c734a 100644
--- a/java/dagger/internal/codegen/ValidationReport.java
+++ b/java/dagger/internal/codegen/ValidationReport.java
@@ -16,12 +16,14 @@
 
 package dagger.internal.codegen;
 
+import static dagger.internal.codegen.DaggerStreams.toImmutableSet;
 import static javax.tools.Diagnostic.Kind.ERROR;
 import static javax.tools.Diagnostic.Kind.NOTE;
 import static javax.tools.Diagnostic.Kind.WARNING;
 
 import com.google.auto.value.AutoValue;
 import com.google.common.collect.ImmutableSet;
+import com.google.common.graph.Traverser;
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import com.google.errorprone.annotations.CheckReturnValue;
 import java.util.Optional;
@@ -30,7 +32,7 @@
 import javax.lang.model.element.AnnotationValue;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
-import javax.lang.model.util.SimpleElementVisitor6;
+import javax.lang.model.util.SimpleElementVisitor8;
 import javax.tools.Diagnostic;
 import javax.tools.Diagnostic.Kind;
 
@@ -47,9 +49,25 @@
   /** The items to report for the {@linkplain #subject() subject}. */
   abstract ImmutableSet<Item> items();
 
+  /** Returns the {@link #items()} from this report and all transitive subreports. */
+  ImmutableSet<Item> allItems() {
+    return allReports()
+        .stream()
+        .flatMap(report -> report.items().stream())
+        .collect(toImmutableSet());
+  }
+
   /** Other reports associated with this one. */
   abstract ImmutableSet<ValidationReport<?>> subreports();
 
+  private static final Traverser<ValidationReport<?>> SUBREPORTS =
+      Traverser.forTree(ValidationReport::subreports);
+
+  /** Returns this report and all transitive subreports. */
+  ImmutableSet<ValidationReport<?>> allReports() {
+    return ImmutableSet.copyOf(SUBREPORTS.depthFirstPreOrder(this));
+  }
+
   /** Returns {@code true} if there are no errors in this report or any subreports. */
   boolean isClean() {
     for (Item item : items()) {
@@ -106,7 +124,7 @@ void printMessagesTo(Messager messager) {
 
   private static String elementString(Element element) {
     return element.accept(
-        new SimpleElementVisitor6<String, Void>() {
+        new SimpleElementVisitor8<String, Void>() {
           @Override
           protected String defaultAction(Element e, Void p) {
             return e.toString();
@@ -114,7 +132,7 @@ protected String defaultAction(Element e, Void p) {
 
           @Override
           public String visitExecutable(ExecutableElement e, Void p) {
-            return e.getEnclosingElement().accept(this, null) + '.' + e.toString();
+            return e.getEnclosingElement().accept(this, null) + '.' + e;
           }
         },
         null);
