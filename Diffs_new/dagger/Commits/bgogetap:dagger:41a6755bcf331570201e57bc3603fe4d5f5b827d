diff --git a/java/dagger/grpc/server/processor/GrpcServiceModel.java b/java/dagger/grpc/server/processor/GrpcServiceModel.java
index bb18cfafc..65d690368 100644
--- a/java/dagger/grpc/server/processor/GrpcServiceModel.java
+++ b/java/dagger/grpc/server/processor/GrpcServiceModel.java
@@ -32,6 +32,7 @@
 import java.util.Optional;
 import javax.annotation.processing.Messager;
 import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.SourceVersion;
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.AnnotationValue;
 import javax.lang.model.element.AnnotationValueVisitor;
@@ -48,6 +49,7 @@
 
   private final Types types;
   private final Elements elements;
+  private final SourceVersion sourceVersion;
   private final Messager messager;
   final TypeElement serviceImplementation;
   final ClassName serviceImplementationClassName;
@@ -60,6 +62,7 @@
   GrpcServiceModel(ProcessingEnvironment processingEnv, TypeElement serviceImplementation) {
     this.types = processingEnv.getTypeUtils();
     this.elements = processingEnv.getElementUtils();
+    this.sourceVersion = processingEnv.getSourceVersion();
     this.messager = processingEnv.getMessager();
     this.serviceImplementation = serviceImplementation;
     this.serviceImplementationClassName = ClassName.get(serviceImplementation);
@@ -115,6 +118,7 @@ protected final TypeElement grpcClass() {
   protected final Optional<AnnotationSpec> generatedAnnotation() {
     return generatedAnnotationSpec(
         elements,
+        sourceVersion,
         GrpcService.class,
         String.format(
             "@%s annotation on %s",
diff --git a/java/dagger/internal/codegen/AnnotationCreatorGenerator.java b/java/dagger/internal/codegen/AnnotationCreatorGenerator.java
index 37b8fb74c..859fbf8c5 100644
--- a/java/dagger/internal/codegen/AnnotationCreatorGenerator.java
+++ b/java/dagger/internal/codegen/AnnotationCreatorGenerator.java
@@ -42,6 +42,7 @@
 import java.util.Set;
 import javax.annotation.processing.Filer;
 import javax.inject.Inject;
+import javax.lang.model.SourceVersion;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ElementKind;
 import javax.lang.model.element.ExecutableElement;
@@ -80,8 +81,8 @@
 class AnnotationCreatorGenerator extends SourceFileGenerator<TypeElement> {
 
   @Inject
-  AnnotationCreatorGenerator(Filer filer, Elements elements) {
-    super(filer, elements);
+  AnnotationCreatorGenerator(Filer filer, Elements elements, SourceVersion sourceVersion) {
+    super(filer, elements, sourceVersion);
   }
 
   @Override
diff --git a/java/dagger/internal/codegen/ComponentGenerator.java b/java/dagger/internal/codegen/ComponentGenerator.java
index 53aa68f28..c57e43e6c 100644
--- a/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/java/dagger/internal/codegen/ComponentGenerator.java
@@ -24,6 +24,7 @@
 import java.util.Optional;
 import javax.annotation.processing.Filer;
 import javax.inject.Inject;
+import javax.lang.model.SourceVersion;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.util.Elements;
@@ -44,10 +45,11 @@
   ComponentGenerator(
       Filer filer,
       Elements elements,
+      SourceVersion sourceVersion,
       DaggerTypes types,
       KeyFactory keyFactory,
       CompilerOptions compilerOptions) {
-    super(filer, elements);
+    super(filer, elements, sourceVersion);
     this.types = types;
     this.elements = elements;
     this.keyFactory = keyFactory;
diff --git a/java/dagger/internal/codegen/ComponentHjarProcessingStep.java b/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
index 7313784ba..5185c4b5e 100644
--- a/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
+++ b/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
@@ -53,6 +53,7 @@
 import javax.annotation.processing.Filer;
 import javax.annotation.processing.Messager;
 import javax.inject.Inject;
+import javax.lang.model.SourceVersion;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
@@ -76,6 +77,7 @@
  */
 final class ComponentHjarProcessingStep implements ProcessingStep {
   private final Elements elements;
+  private final SourceVersion sourceVersion;
   private final Types types;
   private final Filer filer;
   private final Messager messager;
@@ -85,12 +87,14 @@
   @Inject
   ComponentHjarProcessingStep(
       Elements elements,
+      SourceVersion sourceVersion,
       Types types,
       Filer filer,
       Messager messager,
       ComponentValidator componentValidator,
       Factory componentDescriptorFactory) {
     this.elements = elements;
+    this.sourceVersion = sourceVersion;
     this.types = types;
     this.filer = filer;
     this.messager = messager;
@@ -123,7 +127,7 @@
             componentValidator.validate(componentTypeElement, ImmutableSet.of(), ImmutableSet.of());
         validationReport.report().printMessagesTo(messager);
         if (validationReport.report().isClean()) {
-          new EmptyComponentGenerator(filer, elements)
+          new EmptyComponentGenerator(filer, elements, sourceVersion)
               .generate(componentDescriptorFactory.forComponent(componentTypeElement), messager);
         }
       } catch (TypeNotPresentException e) {
@@ -134,8 +138,8 @@
   }
 
   private final class EmptyComponentGenerator extends SourceFileGenerator<ComponentDescriptor> {
-    EmptyComponentGenerator(Filer filer, Elements elements) {
-      super(filer, elements);
+    EmptyComponentGenerator(Filer filer, Elements elements, SourceVersion sourceVersion) {
+      super(filer, elements, sourceVersion);
     }
 
     @Override
diff --git a/java/dagger/internal/codegen/ComponentProcessor.java b/java/dagger/internal/codegen/ComponentProcessor.java
index a7b072ee3..6bdadc1b4 100644
--- a/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/java/dagger/internal/codegen/ComponentProcessor.java
@@ -80,6 +80,7 @@ public SourceVersion getSupportedSourceVersion() {
         DaggerComponentProcessor_ProcessorComponent.builder()
             .types(processingEnv.getTypeUtils())
             .elements(elements)
+            .sourceVersion(processingEnv.getSourceVersion())
             .messager(messager)
             .processingOptions(processingEnv.getOptions())
             .compilerOptions(compilerOptions);
@@ -115,6 +116,10 @@ public SourceVersion getSupportedSourceVersion() {
       @BindsInstance Builder filer(Filer filer);
       @BindsInstance Builder types(Types types);
       @BindsInstance Builder elements(Elements elements);
+
+      @BindsInstance
+      Builder sourceVersion(SourceVersion sourceVersion);
+
       @BindsInstance Builder compilerOptions(CompilerOptions compilerOptions);
       @BindsInstance Builder processingOptions(@ProcessingOptions Map<String, String> options);
       @CheckReturnValue ProcessorComponent build();
diff --git a/java/dagger/internal/codegen/FactoryGenerator.java b/java/dagger/internal/codegen/FactoryGenerator.java
index 63c0a65e7..59376cdf9 100644
--- a/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/java/dagger/internal/codegen/FactoryGenerator.java
@@ -60,6 +60,7 @@
 import java.util.Optional;
 import javax.annotation.processing.Filer;
 import javax.inject.Inject;
+import javax.lang.model.SourceVersion;
 import javax.lang.model.element.Element;
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
@@ -79,9 +80,10 @@
   FactoryGenerator(
       Filer filer,
       Elements elements,
+      SourceVersion sourceVersion,
       Types types,
       CompilerOptions compilerOptions) {
-    super(filer, elements);
+    super(filer, elements, sourceVersion);
     this.types = types;
     this.compilerOptions = compilerOptions;
   }
diff --git a/java/dagger/internal/codegen/MembersInjectorGenerator.java b/java/dagger/internal/codegen/MembersInjectorGenerator.java
index 220aead53..7f319f23d 100644
--- a/java/dagger/internal/codegen/MembersInjectorGenerator.java
+++ b/java/dagger/internal/codegen/MembersInjectorGenerator.java
@@ -55,6 +55,7 @@
 import java.util.Optional;
 import javax.annotation.processing.Filer;
 import javax.inject.Inject;
+import javax.lang.model.SourceVersion;
 import javax.lang.model.element.Element;
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
@@ -69,8 +70,9 @@
   private final Types types;
 
   @Inject
-  MembersInjectorGenerator(Filer filer, Elements elements, Types types) {
-    super(filer, elements);
+  MembersInjectorGenerator(
+      Filer filer, Elements elements, SourceVersion sourceVersion, Types types) {
+    super(filer, elements, sourceVersion);
     this.types = types;
   }
 
diff --git a/java/dagger/internal/codegen/MonitoringModuleGenerator.java b/java/dagger/internal/codegen/MonitoringModuleGenerator.java
index ae4798728..d80dccdc4 100644
--- a/java/dagger/internal/codegen/MonitoringModuleGenerator.java
+++ b/java/dagger/internal/codegen/MonitoringModuleGenerator.java
@@ -38,6 +38,7 @@
 import java.util.Optional;
 import javax.annotation.processing.Filer;
 import javax.inject.Inject;
+import javax.lang.model.SourceVersion;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.util.Elements;
@@ -46,8 +47,8 @@
 final class MonitoringModuleGenerator extends SourceFileGenerator<TypeElement> {
 
   @Inject
-  MonitoringModuleGenerator(Filer filer, Elements elements) {
-    super(filer, elements);
+  MonitoringModuleGenerator(Filer filer, Elements elements, SourceVersion sourceVersion) {
+    super(filer, elements, sourceVersion);
   }
 
   @Override
diff --git a/java/dagger/internal/codegen/ProducerFactoryGenerator.java b/java/dagger/internal/codegen/ProducerFactoryGenerator.java
index 3b3703291..bdbe8c29d 100644
--- a/java/dagger/internal/codegen/ProducerFactoryGenerator.java
+++ b/java/dagger/internal/codegen/ProducerFactoryGenerator.java
@@ -67,6 +67,7 @@
 import java.util.Optional;
 import javax.annotation.processing.Filer;
 import javax.inject.Inject;
+import javax.lang.model.SourceVersion;
 import javax.lang.model.element.Element;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.Elements;
@@ -84,8 +85,12 @@
 
   @Inject
   ProducerFactoryGenerator(
-      Filer filer, Elements elements, Types types, CompilerOptions compilerOptions) {
-    super(filer, elements);
+      Filer filer,
+      Elements elements,
+      SourceVersion sourceVersion,
+      Types types,
+      CompilerOptions compilerOptions) {
+    super(filer, elements, sourceVersion);
     this.types = types;
     this.compilerOptions = compilerOptions;
   }
diff --git a/java/dagger/internal/codegen/ProductionExecutorModuleGenerator.java b/java/dagger/internal/codegen/ProductionExecutorModuleGenerator.java
index b0693491b..118edd5a9 100644
--- a/java/dagger/internal/codegen/ProductionExecutorModuleGenerator.java
+++ b/java/dagger/internal/codegen/ProductionExecutorModuleGenerator.java
@@ -33,6 +33,7 @@
 import java.util.concurrent.Executor;
 import javax.annotation.processing.Filer;
 import javax.inject.Inject;
+import javax.lang.model.SourceVersion;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.util.Elements;
@@ -42,8 +43,8 @@
 final class ProductionExecutorModuleGenerator extends SourceFileGenerator<TypeElement> {
 
   @Inject
-  ProductionExecutorModuleGenerator(Filer filer, Elements elements) {
-    super(filer, elements);
+  ProductionExecutorModuleGenerator(Filer filer, Elements elements, SourceVersion sourceVersion) {
+    super(filer, elements, sourceVersion);
   }
 
   @Override
diff --git a/java/dagger/internal/codegen/SourceFileGenerator.java b/java/dagger/internal/codegen/SourceFileGenerator.java
index ecc39df36..5b2506478 100644
--- a/java/dagger/internal/codegen/SourceFileGenerator.java
+++ b/java/dagger/internal/codegen/SourceFileGenerator.java
@@ -27,6 +27,7 @@
 import java.util.Optional;
 import javax.annotation.processing.Filer;
 import javax.annotation.processing.Messager;
+import javax.lang.model.SourceVersion;
 import javax.lang.model.element.Element;
 import javax.lang.model.util.Elements;
 
@@ -42,10 +43,12 @@
 
   private final Filer filer;
   private final Elements elements;
+  private final SourceVersion sourceVersion;
 
-  SourceFileGenerator(Filer filer, Elements elements) {
+  SourceFileGenerator(Filer filer, Elements elements, SourceVersion sourceVersion) {
     this.filer = checkNotNull(filer);
     this.elements = checkNotNull(elements);
+    this.sourceVersion = checkNotNull(sourceVersion);
   }
 
   /**
@@ -81,7 +84,7 @@ void generate(T input) throws SourceFileGenerationException {
   private JavaFile buildJavaFile(
       ClassName generatedTypeName, TypeSpec.Builder typeSpecBuilder) {
     Optional<AnnotationSpec> generatedAnnotation =
-        generatedAnnotation(elements)
+        generatedAnnotation(elements, sourceVersion)
             .map(
                 annotation ->
                     AnnotationSpec.builder(ClassName.get(annotation))
diff --git a/java/dagger/internal/codegen/UnwrappedMapKeyGenerator.java b/java/dagger/internal/codegen/UnwrappedMapKeyGenerator.java
index 23d2d6e1d..ac1f761f4 100644
--- a/java/dagger/internal/codegen/UnwrappedMapKeyGenerator.java
+++ b/java/dagger/internal/codegen/UnwrappedMapKeyGenerator.java
@@ -20,6 +20,7 @@
 import java.util.Set;
 import javax.annotation.processing.Filer;
 import javax.inject.Inject;
+import javax.lang.model.SourceVersion;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.util.Elements;
 
@@ -55,8 +56,8 @@
 final class UnwrappedMapKeyGenerator extends AnnotationCreatorGenerator {
 
   @Inject
-  UnwrappedMapKeyGenerator(Filer filer, Elements elements) {
-    super(filer, elements);
+  UnwrappedMapKeyGenerator(Filer filer, Elements elements, SourceVersion sourceVersion) {
+    super(filer, elements, sourceVersion);
   }
 
   @Override
