diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 3dafc2e70..bbe4bdb46 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -42,7 +42,9 @@
 import dagger.internal.SetFactory;
 
 import java.io.IOException;
+import java.util.Collection;
 import java.util.EnumSet;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
@@ -51,6 +53,8 @@
 import javax.annotation.Generated;
 import javax.annotation.processing.Filer;
 import javax.inject.Provider;
+import javax.lang.model.element.AnnotationMirror;
+import javax.lang.model.element.AnnotationValue;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.Modifier;
@@ -69,6 +73,7 @@
 import static dagger.Provides.Type.SET;
 import static dagger.Provides.Type.SET_VALUES;
 import static dagger.internal.codegen.DependencyRequest.Kind.MEMBERS_INJECTOR;
+import static dagger.internal.codegen.InjectionAnnotations.getMapKey;
 import static dagger.internal.codegen.ProvisionBinding.Kind.COMPONENT;
 import static dagger.internal.codegen.ProvisionBinding.Kind.PROVISION;
 import static dagger.internal.codegen.SourceFiles.collectImportsFromDependencies;
@@ -133,6 +138,9 @@ void write(ClassName componentName, JavaWriter writer, ComponentDescriptor input
 
     ImmutableSetMultimap<Key, ProvisionBinding> resolvedProvisionBindings =
         input.resolvedProvisionBindings();
+    
+    
+    
     ImmutableMap<Key, MembersInjectionBinding> resolvedMembersInjectionBindings =
         input.resolvedMembersInjectionBindings();
 
@@ -278,13 +286,24 @@ public String apply(TypeElement input) {
               Joiner.on(",\n").join(setFactoryParameters.build()));
         } else if ((mapBinding = ProvisionBinding.isMapBindingCollection(bindings)) == true) {
           ImmutableList.Builder<String> mapFactoryParameters = ImmutableList.builder();
+          mapFactoryParameters.add(providerNames.get(key));
           for (ProvisionBinding binding : bindings) {
+            ImmutableSet<? extends AnnotationMirror> annotationmirrors = getMapKey(binding.bindingElement());
+            Map<? extends ExecutableElement, ? extends AnnotationValue> map = annotationmirrors.iterator().next().getElementValues();
+            System.out.println("Here the value is " + map.entrySet().iterator().next().getValue());
+            mapFactoryParameters.add(map.entrySet().iterator().next().getValue().toString());
             mapFactoryParameters.add(initializeFactoryForBinding(
                 writer, binding, moduleNames, providerNames,membersInjectorNames));
           }
-          writer.emitStatement("this.%s = MapProviderFactory.create(%n%s)",
-              providerNames.get(key),
-              Joiner.on(",\n").join(mapFactoryParameters.build()));
+          Object[] mapFactoryPara = mapFactoryParameters.build().toArray();
+          StringBuilder mapPattern = new StringBuilder("this.%s = MapProviderFactory.create(MapProviderFactory.builder()");
+          for (int i = 0; i < mapFactoryParameters.build().size() - 1; i += 2) {
+            mapPattern.append("%n.put(%s, (Provider)%s)");
+          }
+          mapPattern.append(".build())");
+          System.out.println("Pattern:" + mapPattern);
+          writer.emitStatement(mapPattern.toString(),
+              mapFactoryPara);
         } else if (ProvisionBinding.isNotACollection(setBinding, mapBinding, bindings)) {
           ProvisionBinding binding = Iterables.getOnlyElement(bindings);
           writer.emitStatement("this.%s = %s",
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index 58c142b75..4e109a9d4 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -104,11 +104,10 @@
         "interface TestComponent {",
         "  Map<PathEnum, Provider<Handler>> dispatcher();",
         "}");
-    JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
-        "test.Dagger_TestComponent",
+    JavaFileObject generatedComponent = JavaFileObjects.forSourceLines("test.Dagger_TestComponent",
         "package test;",
         "",
-        "import dagger.internal.MapFactory;",
+        "import dagger.internal.MapProviderFactory;",
         "import java.util.Map;",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
@@ -213,20 +212,24 @@
         "interface TestComponent {",
         "  Map<String, Provider<Handler>> dispatcher();",
         "}");
-    JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
-        "test.Dagger_TestComponent",
+    JavaFileObject generatedComponent = JavaFileObjects.forSourceLines("test.Dagger_TestComponent",
         "package test;",
         "",
-        "import dagger.internal.MapFactory;",
+        "import dagger.internal.MapProviderFactory;",
         "import java.util.Map;",
         "import javax.annotation.Generated;",
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_TestComponent implements TestComponent {",
+        "public final class Dagger_TestComponent",
+        "    implements TestComponent {",
         "  private final MapModuleOne mapModuleOne;",
         "  private final MapModuleTwo mapModuleTwo;",
-        "  private final Provider<Map<EnumKey.PathEnum, Provider<Handler>>> mapOfStringHandlerProvider;",
+        "/**",
+        " * Key{type=java.util.Map<java.lang.String,javax.inject.Provider<test.Handler>>}",
+        " */",
+        "  private final Provider<Map<EnumKey.PathEnum, Provider<Handler>>> mapOfStringAndProviderOfHandlerProvider;",
+        "",
         "",
         "  public Dagger_TestComponent(MapModuleOne mapModuleOne, MapModuleTwo mapModuleTwo) {",
         "    if (mapModuleOne == null) {",
@@ -237,19 +240,22 @@
         "      throw new NullPointerException(\"mapModuleTwo\");",
         "    }",
         "    this.mapModuleTwo = mapModuleTwo;",
-        "    this.mapOfStringHandlerProvider = MapFactoryFactory.build()",
-        "        .put(\"admin\", new ProviderAdminHandlerFactory(mapModuleOne))",
-        "        .put(\"login\", new ProviderLoginHandlerFactory(mapModuleTwo));",
+        "    this.mapOfStringAndProviderOfHandlerProvider = MapProviderFactory.builder()",
+        "        .put(\"Admin\", new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
+        "        .put(\"Login\", new MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo)).build();",
         "  }",
         "",
         "  @Override public Map<String, Provider<Handler>> dispatcher() {",
         "    return mapOfStringHandlerProvider.get();",
         "  }",
         "}");
+    
+    
     ASSERT.about(javaSources())
         .that(ImmutableList.of(mapModuleOneFile, mapModuleTwoFile, stringKeyFile,HandlerFile, LoginHandlerFile, AdminHandlerFile, componentFile))
         .processedWith(new ComponentProcessor())
-        .compilesWithoutError();
-        //.and().generatesSources(generatedComponent);
+        .compilesWithoutError()
+        .and().generatesSources(generatedComponent);
   }
+  
 }
diff --git a/core/src/main/java/dagger/internal/MapProviderFactory.java b/core/src/main/java/dagger/internal/MapProviderFactory.java
index cede1d34a..9cac496b7 100644
--- a/core/src/main/java/dagger/internal/MapProviderFactory.java
+++ b/core/src/main/java/dagger/internal/MapProviderFactory.java
@@ -1,9 +1,13 @@
 package dagger.internal;
 
+import com.google.common.collect.ImmutableMap;
+
 import dagger.Factory;
 
+import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
+import java.util.Set;
 
 import javax.inject.Provider;
 
@@ -13,25 +17,28 @@
  * @param <K>
  */
 public class MapProviderFactory<K, V> implements Factory<Map<K, Provider<V>>>{
- // private final Map<K, V> contributingProviders;
-  public static <K, V, T> Factory<Map<K, Provider<V>>> create(Provider<T> first,
-      @SuppressWarnings("unchecked") Provider<T>... rest) {
-        return null;
+  
+  public static <K, V> Factory<Map<K, Provider<V>>> create(ImmutableMap<K, Provider<V>> map) {
+    return new MapProviderFactory<K, V>();
     
   }
   
-  public static <K, V> Factory<Map<K, Provider<V>>> build(Map<K, V> map) {
-    return null;
+  public static <K, V> ImmutableMap.Builder<K, Provider<V>> builder() {
+    //TODO (houcy)
+    return ImmutableMap.<K, Provider<V>>builder();
   }
   
+  
+  
+  
+  private MapProviderFactory() {
+    
+  }
   @Override
   public Map<K, Provider<V>> get() {
-    return null;
+    Map m = new HashMap<K, Provider<V>>();
+    return m;
   }
   
-  public static <K, V> Map<K, V> builder() {
-    //TODO (houcy)
-    Map<K, V> result = new LinkedHashMap<K, V>();
-    return result; 
-  }
+  
 }
