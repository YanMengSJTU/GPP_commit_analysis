diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectionAnnotations.java b/compiler/src/main/java/dagger/internal/codegen/InjectionAnnotations.java
index 408dc8d7f..57ad2be05 100644
--- a/compiler/src/main/java/dagger/internal/codegen/InjectionAnnotations.java
+++ b/compiler/src/main/java/dagger/internal/codegen/InjectionAnnotations.java
@@ -15,19 +15,23 @@
  */
 package dagger.internal.codegen;
 
+import static com.google.common.base.Preconditions.checkNotNull;
+
 import com.google.common.base.Optional;
 import com.google.common.base.Predicate;
 import com.google.common.collect.FluentIterable;
 import com.google.common.collect.ImmutableSet;
+
+import dagger.MapKey;
+
 import java.lang.annotation.Annotation;
 import java.util.List;
+
 import javax.inject.Qualifier;
 import javax.inject.Scope;
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.Element;
 
-import static com.google.common.base.Preconditions.checkNotNull;
-
 /**
  * Utilities relating to annotations defined in the {@code javax.inject} package.
  *
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index 5e656dd9a..8046ba280 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -56,7 +56,7 @@
         "}");
     JavaFileObject enumKeyFile = JavaFileObjects.forSourceLines("test.EnumKey", 
         "package test;",
-        "import dagger.internal.codegen.MapKey;",
+        "import dagger.MapKey;",
         "import java.lang.annotation.Retention;",
         "import static java.lang.annotation.RetentionPolicy.RUNTIME;",
         "",
@@ -177,7 +177,7 @@
         "}");
     JavaFileObject stringKeyFile = JavaFileObjects.forSourceLines("test.StringKey", 
         "package test;",
-        "import dagger.internal.codegen.MapKey;",
+        "import dagger.MapKey;",
         "import java.lang.annotation.Retention;",
         "import static java.lang.annotation.RetentionPolicy.RUNTIME;",
         "",
diff --git a/core/src/main/java/dagger/Component.java b/core/src/main/java/dagger/Component.java
index 43f33329a..130891c03 100644
--- a/core/src/main/java/dagger/Component.java
+++ b/core/src/main/java/dagger/Component.java
@@ -62,5 +62,5 @@
    * A list of classes annotated with {@link Module} whose bindings are used to generate the
    * component implementation.
    */
-  Class<?>[] modules() default {};
+  Class<?>[] modules() default { };
 }
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapKey.java b/core/src/main/java/dagger/MapKey.java
similarity index 83%
rename from compiler/src/test/java/dagger/internal/codegen/MapKey.java
rename to core/src/main/java/dagger/MapKey.java
index eea433ee6..9ffa141c1 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapKey.java
+++ b/core/src/main/java/dagger/MapKey.java
@@ -1,4 +1,4 @@
-package dagger.internal.codegen;
+package dagger;
 
 import static java.lang.annotation.ElementType.ANNOTATION_TYPE;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
@@ -10,4 +10,4 @@
 @Target(ANNOTATION_TYPE)
 @Retention(RUNTIME)
 @Documented
-public @interface MapKey {}
+public @interface MapKey { }
diff --git a/core/src/main/java/dagger/internal/MapProviderFactory.java b/core/src/main/java/dagger/internal/MapProviderFactory.java
index 60ebdb8f1..a403fdfbe 100644
--- a/core/src/main/java/dagger/internal/MapProviderFactory.java
+++ b/core/src/main/java/dagger/internal/MapProviderFactory.java
@@ -1,9 +1,9 @@
 package dagger.internal;
 
-import com.google.common.collect.ImmutableMap;
-
 import dagger.Factory;
 
+import java.util.Collections;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 import javax.inject.Provider;
@@ -13,37 +13,38 @@
  * @param <V>
  * @param <K>
  */
-public class MapProviderFactory<K, V> implements Factory<Map<K, Provider<V>>>{
-  private final ImmutableMap<K, Provider<V>> contributingMap;
- 
-  
+public class MapProviderFactory<K, V> implements Factory<Map<K, Provider<V>>> {
+  private final LinkedHashMap<K, Provider<V>> contributingMap;
+
+
   public static class Builder<K, V> {
     private final int size;
-    private final ImmutableMap.Builder<K, Provider<V>> mapBuilder;
-    
+    private final LinkedHashMap<K, Provider<V>> mapBuilder;
+
     public Builder(int size) {
       this.size = size;
-      this.mapBuilder = new ImmutableMap.Builder<K, Provider<V>>();
+      this.mapBuilder = new LinkedHashMap<K, Provider<V>>(size);
     }
     public MapProviderFactory<K, V> build() {
-      return new MapProviderFactory<K, V>(this.mapBuilder.build());
+      return new MapProviderFactory<K, V>(this.mapBuilder);
     }
-    
+
     public Builder<K, V> put(K k, Provider<V> pv) {
       this.mapBuilder.put(k, pv);
       return this;
     }
   }
- 
+
   public static <K, V> Builder<K, V> builder(int size) {
     return new Builder<K, V>(size);
-    
   }
-  private MapProviderFactory(ImmutableMap<K, Provider<V>> contributingMap) {
+
+  private MapProviderFactory(LinkedHashMap<K, Provider<V>> contributingMap) {
     this.contributingMap = contributingMap;
   }
+
   @Override
   public Map<K, Provider<V>> get() {
-    return this.contributingMap;
+    return Collections.unmodifiableMap(contributingMap);
   }
 }
