diff --git a/java/dagger/producers/Producers.java b/java/dagger/producers/Producers.java
new file mode 100644
index 000000000..1c8da03d9
--- /dev/null
+++ b/java/dagger/producers/Producers.java
@@ -0,0 +1,66 @@
+/*
+ * Copyright (C) 2014 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.producers;
+
+import com.google.common.util.concurrent.Futures;
+import com.google.common.util.concurrent.ListenableFuture;
+import dagger.internal.Beta;
+import dagger.producers.internal.CancellableProducer;
+import dagger.producers.internal.CancellationListener;
+
+/** Utility methods to create {@link Producer}s. */
+@Beta
+public final class Producers {
+  /** Returns a producer that succeeds with the given value. */
+  public static <T> Producer<T> immediateProducer(final T value) {
+    return new ImmediateProducer<>(Futures.immediateFuture(value));
+  }
+
+  /** Returns a producer that fails with the given exception. */
+  public static <T> Producer<T> immediateFailedProducer(final Throwable throwable) {
+    return new ImmediateProducer<>(Futures.<T>immediateFailedFuture(throwable));
+  }
+
+  /** A {@link CancellableProducer} with an immediate result. */
+  private static final class ImmediateProducer<T> implements CancellableProducer<T> {
+    private final ListenableFuture<T> future;
+
+    ImmediateProducer(ListenableFuture<T> future) {
+      this.future = future;
+    }
+
+    @Override
+    public ListenableFuture<T> get() {
+      return future;
+    }
+
+    @Override
+    public void cancel(boolean mayInterruptIfRunning) {}
+
+    @Override
+    public Producer<T> newDependencyView() {
+      return this;
+    }
+
+    @Override
+    public Producer<T> newEntryPointView(CancellationListener cancellationListener) {
+      return this;
+    }
+  }
+
+  private Producers() {}
+}
diff --git a/java/dagger/producers/internal/MapOfProducerProducer.java b/java/dagger/producers/internal/MapOfProducerProducer.java
index ce6a7949f..ad57c99a8 100644
--- a/java/dagger/producers/internal/MapOfProducerProducer.java
+++ b/java/dagger/producers/internal/MapOfProducerProducer.java
@@ -103,7 +103,7 @@ private Builder(int size) {
 
   private Producer<Map<K, Producer<V>>> newTransformedValuesView(
       Function<Producer<V>, Producer<V>> valueTransformationFunction) {
-    return Producers.<Map<K, Producer<V>>>immediateProducer(
+    return dagger.producers.Producers.<Map<K, Producer<V>>>immediateProducer(
         ImmutableMap.copyOf(Maps.transformValues(contributingMap, valueTransformationFunction)));
   }
 
diff --git a/java/dagger/producers/internal/Producers.java b/java/dagger/producers/internal/Producers.java
index b50a95ef2..cc42c41bb 100644
--- a/java/dagger/producers/internal/Producers.java
+++ b/java/dagger/producers/internal/Producers.java
@@ -207,7 +207,7 @@ public static void cancel(Producer<?> producer, boolean mayInterruptIfRunning) {
   }
 
   private static final Producer<Map<Object, Object>> EMPTY_MAP_PRODUCER =
-      Producers.<Map<Object, Object>>immediateProducer(ImmutableMap.of());
+      dagger.producers.Producers.<Map<Object, Object>>immediateProducer(ImmutableMap.of());
 
   @SuppressWarnings("unchecked") // safe contravariant cast
   public static <K, V> Producer<Map<K, V>> emptyMapProducer() {
diff --git a/java/dagger/producers/internal/SetProducer.java b/java/dagger/producers/internal/SetProducer.java
index 687b9ee3c..c0196ae3f 100644
--- a/java/dagger/producers/internal/SetProducer.java
+++ b/java/dagger/producers/internal/SetProducer.java
@@ -39,7 +39,7 @@
  */
 public final class SetProducer<T> extends AbstractProducer<Set<T>> {
   private static final Producer<Set<Object>> EMPTY_PRODUCER =
-      Producers.<Set<Object>>immediateProducer(ImmutableSet.<Object>of());
+      dagger.producers.Producers.<Set<Object>>immediateProducer(ImmutableSet.<Object>of());
 
   @SuppressWarnings({"unchecked", "rawtypes"}) // safe covariant cast
   public static <T> Producer<Set<T>> empty() {
diff --git a/javatests/dagger/producers/internal/MapOfProducerProducerTest.java b/javatests/dagger/producers/internal/MapOfProducerProducerTest.java
index fe285ed5c..3420ffcb6 100644
--- a/javatests/dagger/producers/internal/MapOfProducerProducerTest.java
+++ b/javatests/dagger/producers/internal/MapOfProducerProducerTest.java
@@ -20,6 +20,7 @@
 import static org.junit.Assert.fail;
 
 import dagger.producers.Producer;
+import dagger.producers.Producers;
 import java.util.Map;
 import java.util.concurrent.ExecutionException;
 import org.junit.Test;
diff --git a/javatests/dagger/producers/internal/MapProducerTest.java b/javatests/dagger/producers/internal/MapProducerTest.java
index d1e314f18..d94c4625b 100644
--- a/javatests/dagger/producers/internal/MapProducerTest.java
+++ b/javatests/dagger/producers/internal/MapProducerTest.java
@@ -20,6 +20,7 @@
 import static org.junit.Assert.fail;
 
 import dagger.producers.Producer;
+import dagger.producers.Producers;
 import java.util.Map;
 import java.util.concurrent.ExecutionException;
 import org.junit.Test;
diff --git a/javatests/dagger/producers/internal/SetOfProducedProducerTest.java b/javatests/dagger/producers/internal/SetOfProducedProducerTest.java
index 8588bf485..e189c0838 100644
--- a/javatests/dagger/producers/internal/SetOfProducedProducerTest.java
+++ b/javatests/dagger/producers/internal/SetOfProducedProducerTest.java
@@ -23,6 +23,7 @@
 import com.google.common.collect.Sets;
 import dagger.producers.Produced;
 import dagger.producers.Producer;
+import dagger.producers.Producers;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.Set;
diff --git a/javatests/dagger/producers/internal/SetProducerTest.java b/javatests/dagger/producers/internal/SetProducerTest.java
index 12d293ce1..0788242c4 100644
--- a/javatests/dagger/producers/internal/SetProducerTest.java
+++ b/javatests/dagger/producers/internal/SetProducerTest.java
@@ -22,6 +22,7 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.common.util.concurrent.ListenableFuture;
 import dagger.producers.Producer;
+import dagger.producers.Producers;
 import java.util.Collections;
 import java.util.Set;
 import java.util.concurrent.ExecutionException;
