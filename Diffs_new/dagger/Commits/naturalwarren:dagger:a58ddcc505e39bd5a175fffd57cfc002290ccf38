diff --git a/compiler/BUILD b/compiler/BUILD
index 191c3b30b..5297ac105 100644
--- a/compiler/BUILD
+++ b/compiler/BUILD
@@ -25,8 +25,6 @@ COMPILER_SRCS = glob(
 
 COMPILER_PLUGINS = [
     # TODO(cgruber): Enable Beta checker.
-    # "",
-    # "",
 ]
 
 COMPILER_SHARED_DEPS = [
diff --git a/core/BUILD b/core/BUILD
index 568e19db1..bd2407ecd 100644
--- a/core/BUILD
+++ b/core/BUILD
@@ -24,8 +24,6 @@ java_library(
     name = "core",
     plugins = [
         # TODO(cgruber): Enable Beta checker.
-        # "",
-        #"",
     ],
     exports = ["//core/src/main/java/dagger:core"],
 )
diff --git a/core/src/main/java/dagger/MapKey.java b/core/src/main/java/dagger/MapKey.java
index 6b00d98f1..ebc28b311 100644
--- a/core/src/main/java/dagger/MapKey.java
+++ b/core/src/main/java/dagger/MapKey.java
@@ -26,9 +26,8 @@
 import java.util.Map;
 
 /**
- * Identifies annotation types that are used to associate keys with values returned by
- * {@linkplain Provides provider methods} in order to compose a {@linkplain
- * dagger.multibindings.IntoMap map}.
+ * Identifies annotation types that are used to associate keys with values returned by {@linkplain
+ * Provides provider methods} in order to compose a {@linkplain dagger.multibindings.IntoMap map}.
  *
  * <p>Every provider method annotated with {@code @Provides} and {@code @IntoMap} must also have an
  * annotation that identifies the key for that map entry. That annotation's type must be annotated
@@ -36,8 +35,8 @@
  *
  * <p>Typically, the key annotation has a single member, whose value is used as the map key.
  *
- * <p>For example, to add an entry to a {@code Map<SomeEnum, Integer>} with key
- * {@code SomeEnum.FOO}, you could use an annotation called {@code @SomeEnumKey}:
+ * <p>For example, to add an entry to a {@code Map<SomeEnum, Integer>} with key {@code
+ * SomeEnum.FOO}, you could use an annotation called {@code @SomeEnumKey}:
  *
  * <pre><code>
  * {@literal @}MapKey
@@ -65,7 +64,7 @@
  *
  * <p>If {@code unwrapValue} is true, the annotation's single member can be any type except an
  * array.
- * 
+ *
  * <p>See {@link dagger.multibindings} for standard unwrapped map key annotations for keys that are
  * boxed primitives, strings, or classes.
  *
@@ -102,8 +101,7 @@
  * <p>(Note that there must be a class {@code MyMapKeyImpl} that implements {@code MyMapKey} in
  * order to call {@link Map#get(Object)} on the provided map.)
  *
- * @see <a href="https://google.github.io/dagger/multibindings#map-multibindings">Map
- *      multibinding</a>
+ * @see <a href="https://google.github.io/dagger/multibindings#map-multibindings">Map multibinding</a>
  */
 @Documented
 @Target(ANNOTATION_TYPE)
diff --git a/core/src/main/java/dagger/internal/ReferenceReleasingProvider.java b/core/src/main/java/dagger/internal/ReferenceReleasingProvider.java
index ee106b282..30a9cb4b5 100644
--- a/core/src/main/java/dagger/internal/ReferenceReleasingProvider.java
+++ b/core/src/main/java/dagger/internal/ReferenceReleasingProvider.java
@@ -28,14 +28,14 @@
  * <p>The provider can be in any one of four states at a time:
  *
  * <ul>
- * <li>In <b>uninitialized</b> state, the provider's strong reference and its weak reference are
- *     both {@code null}.
- * <li>In <b>cleared</b> state, the strong reference is {@code null}, and the weak reference's value
- *     is {@code null}.
- * <li>In <b>strong-reference</b> state, the strong reference refers to the stored object, and the
- *     weak reference is {@code null}.
- * <li>In <b>weak-reference</b> state, the strong reference is {@code null}, and the weak
- *     reference's value is not {@code null}.
+ *   <li>In <b>uninitialized</b> state, the provider's strong reference and its weak reference are
+ *       both {@code null}.
+ *   <li>In <b>cleared</b> state, the strong reference is {@code null}, and the weak reference's
+ *       value is {@code null}.
+ *   <li>In <b>strong-reference</b> state, the strong reference refers to the stored object, and the
+ *       weak reference is {@code null}.
+ *   <li>In <b>weak-reference</b> state, the strong reference is {@code null}, and the weak
+ *       reference's value is not {@code null}.
  * </ul>
  *
  * <p>The provider starts in <b>uninitialized</b> state.
@@ -54,8 +54,7 @@
  *
  * <p><img src="doc-files/ReferenceReleasingProvider-statemachine.png">
  *
- * @see <a href="https://google.github.io/dagger/users-guide.html#releasable-references">Releasable
- *     references</a>
+ * @see <a href="https://google.github.io/dagger/users-guide.html#releasable-references">Releasable references</a>
  */
 @GwtIncompatible
 public final class ReferenceReleasingProvider<T> implements Provider<T> {
diff --git a/core/src/main/java/dagger/internal/ReferenceReleasingProviderManager.java b/core/src/main/java/dagger/internal/ReferenceReleasingProviderManager.java
index 68741c150..9be7c342a 100644
--- a/core/src/main/java/dagger/internal/ReferenceReleasingProviderManager.java
+++ b/core/src/main/java/dagger/internal/ReferenceReleasingProviderManager.java
@@ -29,8 +29,7 @@
  * A {@link ReleasableReferenceManager} that forwards calls to a dynamic set of weakly-referenced
  * {@link ReferenceReleasingProvider}s.
  *
- * @see <a href="https://google.github.io/dagger/users-guide.html#releasable-references">Releasable
- *     references</a>
+ * @see <a href="https://google.github.io/dagger/users-guide.html#releasable-references">Releasable references</a>
  */
 @GwtIncompatible
 public final class ReferenceReleasingProviderManager implements ReleasableReferenceManager {
diff --git a/core/src/main/java/dagger/multibindings/ElementsIntoSet.java b/core/src/main/java/dagger/multibindings/ElementsIntoSet.java
index 687ad1b1c..72cc86d1d 100644
--- a/core/src/main/java/dagger/multibindings/ElementsIntoSet.java
+++ b/core/src/main/java/dagger/multibindings/ElementsIntoSet.java
@@ -28,8 +28,7 @@
  * Set<T>} produced from the accumulation of values will be immutable. An example use is to provide
  * a default empty set binding, which is otherwise not possible using {@link IntoSet}.
  *
- * @see <a href="https://google.github.io/dagger/multibindings#set-multibindings">Set
- *      multibinding</a>
+ * @see <a href="https://google.github.io/dagger/multibindings#set-multibindings">Set multibinding</a>
  */
 @Documented
 @Target(METHOD)
diff --git a/core/src/main/java/dagger/multibindings/IntoMap.java b/core/src/main/java/dagger/multibindings/IntoMap.java
index 4621eae99..c34d6a89e 100644
--- a/core/src/main/java/dagger/multibindings/IntoMap.java
+++ b/core/src/main/java/dagger/multibindings/IntoMap.java
@@ -25,13 +25,12 @@
 import java.lang.annotation.Target;
 
 /**
- * The method's return type forms the type argument for the value of a
- * {@code Map<K, Provider<V>>}, and the combination of the annotated key and the returned value
- * is contributed to the map as a key/value pair. The {@code Map<K, Provider<V>>} produced from
- * the accumulation of values will be immutable.
+ * The method's return type forms the type argument for the value of a {@code Map<K, Provider<V>>},
+ * and the combination of the annotated key and the returned value is contributed to the map as a
+ * key/value pair. The {@code Map<K, Provider<V>>} produced from the accumulation of values will be
+ * immutable.
  *
- * @see <a href="https://google.github.io/dagger/multibindings#map-multibindings">Map
- *      multibinding</a>
+ * @see <a href="https://google.github.io/dagger/multibindings#map-multibindings">Map multibinding</a>
  */
 @Documented
 @Target(METHOD)
diff --git a/core/src/main/java/dagger/multibindings/IntoSet.java b/core/src/main/java/dagger/multibindings/IntoSet.java
index 95aebaafb..f42860f67 100644
--- a/core/src/main/java/dagger/multibindings/IntoSet.java
+++ b/core/src/main/java/dagger/multibindings/IntoSet.java
@@ -24,13 +24,11 @@
 import java.lang.annotation.Target;
 
 /**
- * The method's return type forms the generic type argument of a {@code Set<T>}, and the
- * returned value is contributed to the set. The object graph will pass dependencies to the
- * method as parameters. The {@code Set<T>} produced from the accumulation of values will be
- * immutable.
+ * The method's return type forms the generic type argument of a {@code Set<T>}, and the returned
+ * value is contributed to the set. The object graph will pass dependencies to the method as
+ * parameters. The {@code Set<T>} produced from the accumulation of values will be immutable.
  *
- * @see <a href="https://google.github.io/dagger/multibindings#set-multibindings">Set
- *      multibinding</a>
+ * @see <a href="https://google.github.io/dagger/multibindings#set-multibindings">Set multibinding</a>
  */
 @Documented
 @Target(METHOD)
diff --git a/core/src/main/java/dagger/multibindings/package-info.java b/core/src/main/java/dagger/multibindings/package-info.java
index a9e49d2f9..e806d9ec6 100644
--- a/core/src/main/java/dagger/multibindings/package-info.java
+++ b/core/src/main/java/dagger/multibindings/package-info.java
@@ -18,8 +18,6 @@
  * This package contains the API by which Dagger allows you to bind several objects into a
  * collection that can be injected without depending directly on each of the individual bindings.
  *
- * @see <a href="https://google.github.io/dagger/multibindings">Multibindings in the Dagger
- *      User's Guide</a>
+ * @see <a href="https://google.github.io/dagger/multibindings">Multibindings in the Dagger User's Guide</a>
  */
-
 package dagger.multibindings;
diff --git a/core/src/main/java/dagger/package-info.java b/core/src/main/java/dagger/package-info.java
index ec4a9a15f..a5dd42987 100644
--- a/core/src/main/java/dagger/package-info.java
+++ b/core/src/main/java/dagger/package-info.java
@@ -15,21 +15,19 @@
  */
 
 /**
- * This package contains the public API for the <a href="https://google.github.io/dagger/">Dagger
- * 2</a> dependency injection framework.  By building upon
- * <a href="https://jcp.org/en/jsr/detail?id=330">JSR 330</a>, Dagger 2 provides an
- * annotation-driven API for dependency injection whose implementation is entirely generated at
- * compile time by <a href="http://en.wikipedia.org/wiki/Java_annotation#Processing">annotation
- * processors</a>.
+ * This package contains the public API for the <a href="https://google.github.io/dagger/">Dagger 2</a> dependency
+ * injection framework. By building upon <a href="https://jcp.org/en/jsr/detail?id=330">JSR 330</a>,
+ * Dagger 2 provides an annotation-driven API for dependency injection whose implementation is
+ * entirely generated at compile time by <a
+ * href="http://en.wikipedia.org/wiki/Java_annotation#Processing">annotation processors</a>.
  *
  * <p>The entry point into the API is the {@link Component}, which annotates abstract types for
- * Dagger 2 to implement.  The dependency graph is configured using using annotations such as
- * {@link Module}, {@link Provides} and {@link javax.inject.Inject}.
+ * Dagger 2 to implement. The dependency graph is configured using using annotations such as {@link
+ * Module}, {@link Provides} and {@link javax.inject.Inject}.
  *
  * <p>{@code dagger.internal.codegen.ComponentProcessor} is the processor responsible for generating
- * the implementation.  Dagger uses the annotation procesor
- * {@linkplain java.util.ServiceLoader service loader} to automatically configure the processor, so
- * explict build configuration shouldn't be necessary.
+ * the implementation. Dagger uses the annotation procesor {@linkplain java.util.ServiceLoader
+ * service loader} to automatically configure the processor, so explict build configuration
+ * shouldn't be necessary.
  */
-
 package dagger;
diff --git a/core/src/main/java/dagger/releasablereferences/CanReleaseReferences.java b/core/src/main/java/dagger/releasablereferences/CanReleaseReferences.java
index 696b400ec..a0890af3d 100644
--- a/core/src/main/java/dagger/releasablereferences/CanReleaseReferences.java
+++ b/core/src/main/java/dagger/releasablereferences/CanReleaseReferences.java
@@ -26,8 +26,8 @@
 /**
  * Annotates {@linkplain javax.inject.Scope scope annotations} to indicate that references to
  * objects stored within that scope can be <a
- * href="https://google.github.io/dagger/users-guide.html#releasable-references">released</a> during
- * the lifetime of the scope.
+ * href="https://google.github.io/dagger/users-guide.html#releasable-references">released</a> during the lifetime
+ * of the scope.
  *
  * <p>A scope can release references if it is annotated with {@code CanReleaseReferences} or if it
  * is annotated with an annotation that itself is annotated with {@code CanReleaseReferences}.
diff --git a/core/src/main/java/dagger/releasablereferences/ForReleasableReferences.java b/core/src/main/java/dagger/releasablereferences/ForReleasableReferences.java
index 7408f2c51..e11adb227 100644
--- a/core/src/main/java/dagger/releasablereferences/ForReleasableReferences.java
+++ b/core/src/main/java/dagger/releasablereferences/ForReleasableReferences.java
@@ -68,8 +68,7 @@
  * <p><b>Note:</b>Releasable references uses Java's {@link java.lang.ref.WeakReference}, and so is
  * not compatible with <a href="http://www.gwtproject.org/">GWT</a>.
  *
- * @see <a href="https://google.github.io/dagger/users-guide.html#releasable-references">Releasable
- *     references</a>
+ * @see <a href="https://google.github.io/dagger/users-guide.html#releasable-references">Releasable references</a>
  * @since 2.8
  */
 @Beta
diff --git a/core/src/main/java/dagger/releasablereferences/ReleasableReferenceManager.java b/core/src/main/java/dagger/releasablereferences/ReleasableReferenceManager.java
index c6b6e4c4f..0c5acf050 100644
--- a/core/src/main/java/dagger/releasablereferences/ReleasableReferenceManager.java
+++ b/core/src/main/java/dagger/releasablereferences/ReleasableReferenceManager.java
@@ -23,9 +23,8 @@
 import javax.inject.Provider;
 
 /**
- * An object that can <a
- * href="https://google.github.io/dagger/users-guide.html#releasable-references">release or restore
- * strong references</a> held in a {@link CanReleaseReferences @CanReleaseReferences} scope.
+ * An object that can <a href="https://google.github.io/dagger/users-guide.html#releasable-references">release or
+ * restore strong references</a> held in a {@link CanReleaseReferences @CanReleaseReferences} scope.
  *
  * <p>Your top-level component can provide a {@link
  * ForReleasableReferences @ForReleasableReferences(Foo.class)} {@link ReleasableReferenceManager}
diff --git a/core/src/main/java/dagger/releasablereferences/package-info.java b/core/src/main/java/dagger/releasablereferences/package-info.java
index 28d422215..a306bdbdc 100644
--- a/core/src/main/java/dagger/releasablereferences/package-info.java
+++ b/core/src/main/java/dagger/releasablereferences/package-info.java
@@ -15,14 +15,13 @@
  */
 
 /**
- * This package contains the API by which Dagger allows you
- * <a href="https://google.github.io/dagger/users-guide.html#releasable-references">release
- * references</a> held within some scopes.
- * 
+ * This package contains the API by which Dagger allows you <a
+ * href="https://google.github.io/dagger/users-guide.html#releasable-references">release references</a> held within
+ * some scopes.
+ *
  * <p><b>Note:</b>Releasable references uses Java's {@link java.lang.ref.WeakReference}, and so is
  * not compatible with <a href="http://www.gwtproject.org/">GWT</a>.
  *
  * @since 2.8
  */
-
 package dagger.releasablereferences;
diff --git a/java/dagger/android/AndroidInjector.java b/java/dagger/android/AndroidInjector.java
index 69787c96d..df778e2d5 100644
--- a/java/dagger/android/AndroidInjector.java
+++ b/java/dagger/android/AndroidInjector.java
@@ -34,8 +34,7 @@
  */
 @Beta
 @DoNotMock(
-    "Faked versions of AndroidInjector are much clearer than a mock. See "
-        + "https://google.github.io/dagger/testing")
+    "Faked versions of AndroidInjector are much clearer than a mock. See https://google.github.io/dagger/testing")
 public interface AndroidInjector<T> {
 
   /** Injects the members of {@code instance}. */
diff --git a/java/dagger/android/processor/AndroidMapKeyValidator.java b/java/dagger/android/processor/AndroidMapKeyValidator.java
index eedc504c0..ae9c08dce 100644
--- a/java/dagger/android/processor/AndroidMapKeyValidator.java
+++ b/java/dagger/android/processor/AndroidMapKeyValidator.java
@@ -56,8 +56,6 @@
  * dagger.android.support} methods.
  */
 final class AndroidMapKeyValidator implements ProcessingStep {
-  private static final String LINK_TO_DOCS = "google.github.io/dagger/android";
-
   private final Elements elements;
   private final Types types;
   private final Messager messager;
@@ -148,8 +146,8 @@ private void validateMethod(Class<? extends Annotation> annotation, ExecutableEl
       messager.printMessage(
           Kind.ERROR,
           String.format(
-              "@%s methods should bind %s, not %s. See %s",
-              annotation.getCanonicalName(), intendedReturnType, returnType, LINK_TO_DOCS),
+              "@%s methods should bind %s, not %s. See https://google.github.io/dagger/android",
+              annotation.getCanonicalName(), intendedReturnType, returnType),
           method);
     }
 
diff --git a/producers/BUILD b/producers/BUILD
index 19af093b6..1fd2de12e 100644
--- a/producers/BUILD
+++ b/producers/BUILD
@@ -37,8 +37,6 @@ java_library(
     javacopts = PRE_JAVA_8_INFERENCE_OPTS + SOURCE_7_TARGET_7 + DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
     plugins = [
         # TODO(cgruber): Enable Beta checker.
-        # "",
-        #"",
     ],
     exports = [
         # TODO(dpb): Don't export any of Guava.
diff --git a/producers/src/main/java/dagger/producers/package-info.java b/producers/src/main/java/dagger/producers/package-info.java
index 5b6ed814d..4e4f61747 100644
--- a/producers/src/main/java/dagger/producers/package-info.java
+++ b/producers/src/main/java/dagger/producers/package-info.java
@@ -17,13 +17,10 @@
 /**
  * This package contains the public API for Dagger 2's producer functionality.
  *
- * <p>Dagger Producers is an extension to Dagger that implements asynchronous
- * dependency injection in Java.
- *
- * <p>Extended documentation on Dagger Producers can be found at
- * <a href="https://google.github.io/dagger/producers">
- * google.github.io/dagger/producers</a>.
+ * <p>Dagger Producers is an extension to Dagger that implements asynchronous dependency injection
+ * in Java.
  *
+ * <p>Extended documentation on Dagger Producers can be found at <a
+ * href="https://google.github.io/dagger/producers">google.github.io/dagger/producers</a>.
  */
-
 package dagger.producers;
