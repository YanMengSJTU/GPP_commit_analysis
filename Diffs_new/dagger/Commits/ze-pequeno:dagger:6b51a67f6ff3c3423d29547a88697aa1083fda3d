diff --git a/java/dagger/BUILD b/java/dagger/BUILD
index 5f5cfbf67..3485431d4 100644
--- a/java/dagger/BUILD
+++ b/java/dagger/BUILD
@@ -30,7 +30,9 @@ java_library(
     javacopts = SOURCE_7_TARGET_7 + DOCLINT_HTML_AND_SYNTAX,
     tags = ["maven_coordinates=com.google.dagger:dagger:" + POM_VERSION],
     exports = ["@google_bazel_common//third_party/java/jsr330_inject"],
-    deps = ["@google_bazel_common//third_party/java/jsr330_inject"],
+    deps = [
+        "@google_bazel_common//third_party/java/jsr330_inject",
+    ],
 )
 
 pom_file(
diff --git a/java/dagger/internal/codegen/CompilerOptions.java b/java/dagger/internal/codegen/CompilerOptions.java
index 85b276b06..bae025a9b 100644
--- a/java/dagger/internal/codegen/CompilerOptions.java
+++ b/java/dagger/internal/codegen/CompilerOptions.java
@@ -45,7 +45,9 @@
 import java.util.stream.Stream;
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.annotation.processing.Processor;
+import javax.lang.model.element.TypeElement;
 import javax.tools.Diagnostic;
+import javax.tools.Diagnostic.Kind;
 
 /** A collection of options that dictate how the compiler will run. */
 @AutoValue
@@ -97,18 +99,27 @@ boolean doCheckForNulls() {
 
   abstract ValidationType moduleBindingValidationType();
 
+  /** Returns the binding {@link ValidationType} for the element. */
+  ValidationType moduleBindingValidationType(TypeElement element) {
+    return moduleBindingValidationType();
+  }
+
+  abstract ImmutableSet<String> javacOptions();
+
   abstract Diagnostic.Kind moduleHasDifferentScopesDiagnosticKind();
 
   abstract ValidationType explicitBindingConflictsWithInjectValidationType();
 
   static Builder builder() {
     return new AutoValue_CompilerOptions.Builder()
+        .javacOptions(ImmutableSet.of())
         .headerCompilation(false)
         .useGradleIncrementalProcessing(false);
   }
 
   static CompilerOptions create(ProcessingEnvironment processingEnv) {
-    Builder builder = new AutoValue_CompilerOptions.Builder();
+    Builder builder = new AutoValue_CompilerOptions.Builder()
+        .javacOptions(processingEnv.getOptions().keySet());
     for (Option option : concat(allOf(Feature.class), allOf(Validation.class))) {
       option.set(builder, processingEnv);
     }
@@ -138,6 +149,8 @@ AnnotationSpec toGenerationOptionsAnnotation() {
   @AutoValue.Builder
   @CanIgnoreReturnValue
   interface Builder {
+    Builder javacOptions(Set<String> javacOptions);
+
     Builder usesProducers(boolean usesProduces);
 
     Builder headerCompilation(boolean headerCompilation);
diff --git a/java/dagger/internal/codegen/DiagnosticReporterFactory.java b/java/dagger/internal/codegen/DiagnosticReporterFactory.java
index ada013b0d..e8839544b 100644
--- a/java/dagger/internal/codegen/DiagnosticReporterFactory.java
+++ b/java/dagger/internal/codegen/DiagnosticReporterFactory.java
@@ -234,11 +234,12 @@ void printMessage(
         CharSequence message,
         @NullableDecl Element elementToReport) {
       if (graph.isModuleBindingGraph()) {
-        if (compilerOptions.moduleBindingValidationType().equals(NONE)) {
+        ValidationType validationType = compilerOptions.moduleBindingValidationType(rootComponent);
+        if (validationType.equals(NONE)) {
           return;
         }
         if (diagnosticKind.equals(ERROR)) {
-          diagnosticKind = compilerOptions.moduleBindingValidationType().diagnosticKind().get();
+          diagnosticKind = validationType.diagnosticKind().get();
         }
       }
       reportedDiagnosticKinds.add(diagnosticKind);
diff --git a/java/dagger/internal/codegen/ModuleValidator.java b/java/dagger/internal/codegen/ModuleValidator.java
index 403a32136..fa738689f 100644
--- a/java/dagger/internal/codegen/ModuleValidator.java
+++ b/java/dagger/internal/codegen/ModuleValidator.java
@@ -225,7 +225,7 @@ void addKnownModules(Collection<TypeElement> modules) {
     validateSelfCycles(module, builder);
 
     if (builder.build().isClean()
-        && !compilerOptions.moduleBindingValidationType().equals(ValidationType.NONE)) {
+        && !compilerOptions.moduleBindingValidationType(module).equals(ValidationType.NONE)) {
       validateModuleBindings(module, builder);
     }
 
