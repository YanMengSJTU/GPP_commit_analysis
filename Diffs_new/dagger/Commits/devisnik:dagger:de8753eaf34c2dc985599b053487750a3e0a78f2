diff --git a/java/dagger/internal/codegen/ComponentProcessor.java b/java/dagger/internal/codegen/ComponentProcessor.java
index 3128fa4ce..1e4ea5b4f 100644
--- a/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/java/dagger/internal/codegen/ComponentProcessor.java
@@ -16,9 +16,6 @@
 
 package dagger.internal.codegen;
 
-import static dagger.internal.codegen.ModuleProcessingStep.moduleProcessingStep;
-import static dagger.internal.codegen.ModuleProcessingStep.producerModuleProcessingStep;
-
 import com.google.auto.common.BasicAnnotationProcessor;
 import com.google.auto.service.AutoService;
 import com.google.common.collect.ImmutableList;
@@ -235,8 +232,7 @@ public SourceVersion getSupportedSourceVersion() {
         new ProductionExecutorModuleProcessingStep(messager, productionExecutorModuleGenerator),
         new MultibindingAnnotationsProcessingStep(messager),
         new BindsInstanceProcessingStep(messager),
-        moduleProcessingStep(messager, moduleValidator, provisionBindingFactory, factoryGenerator),
-        producerModuleProcessingStep(
+        new ModuleProcessingStep(
             messager,
             moduleValidator,
             provisionBindingFactory,
diff --git a/java/dagger/internal/codegen/ModuleProcessingStep.java b/java/dagger/internal/codegen/ModuleProcessingStep.java
index 28bac6826..87ca7ffb4 100644
--- a/java/dagger/internal/codegen/ModuleProcessingStep.java
+++ b/java/dagger/internal/codegen/ModuleProcessingStep.java
@@ -41,70 +41,32 @@
  * methods.
  */
 final class ModuleProcessingStep implements ProcessingStep {
-
-  /**
-   * A {@link ProcessingStep} for {@code @Module} classes that generates factories for
-   * {@code @Provides} methods.
-   */
-  static ModuleProcessingStep moduleProcessingStep(
-      Messager messager,
-      ModuleValidator moduleValidator,
-      ProvisionBinding.Factory provisionBindingFactory,
-      FactoryGenerator factoryGenerator) {
-    return new ModuleProcessingStep(
-        messager,
-        Module.class,
-        moduleValidator,
-        ImmutableSet.of(
-            new ProvisionModuleMethodFactoryGenerator(provisionBindingFactory, factoryGenerator)));
-  }
-
-  /**
-   * A {@link ProcessingStep} for {@code @ProducerModule} classes that generates factories for
-   * {@code @Provides} and {@code @Produces} methods.
-   */
-  static ModuleProcessingStep producerModuleProcessingStep(
-      Messager messager,
-      ModuleValidator moduleValidator,
-      ProvisionBinding.Factory provisionBindingFactory,
-      FactoryGenerator factoryGenerator,
-      ProductionBinding.Factory productionBindingFactory,
-      ProducerFactoryGenerator producerFactoryGenerator) {
-    return new ModuleProcessingStep(
-        messager,
-        ProducerModule.class,
-        moduleValidator,
-        ImmutableSet.of(
-            new ProvisionModuleMethodFactoryGenerator(provisionBindingFactory, factoryGenerator),
-            new ProductionModuleMethodFactoryGenerator(
-                productionBindingFactory, producerFactoryGenerator)));
-  }
-
   private final Messager messager;
-  private final Class<? extends Annotation> moduleAnnotation;
   private final ModuleValidator moduleValidator;
-  private final ImmutableSet<ModuleMethodFactoryGenerator> moduleMethodFactoryGenerators;
+  private final ProvisionBinding.Factory provisionBindingFactory;
+  private final FactoryGenerator factoryGenerator;
+  private final ProductionBinding.Factory productionBindingFactory;
+  private final ProducerFactoryGenerator producerFactoryGenerator;
   private final Set<TypeElement> processedModuleElements = Sets.newLinkedHashSet();
 
-  /**
-   * Creates a new processing step.
-   *
-   * @param moduleAnnotation the annotation on the module class
-   */
   ModuleProcessingStep(
       Messager messager,
-      Class<? extends Annotation> moduleAnnotation,
       ModuleValidator moduleValidator,
-      ImmutableSet<ModuleMethodFactoryGenerator> moduleMethodFactoryGenerators) {
+      ProvisionBinding.Factory provisionBindingFactory,
+      FactoryGenerator factoryGenerator,
+      ProductionBinding.Factory productionBindingFactory,
+      ProducerFactoryGenerator producerFactoryGenerator) {
     this.messager = messager;
-    this.moduleAnnotation = moduleAnnotation;
     this.moduleValidator = moduleValidator;
-    this.moduleMethodFactoryGenerators = moduleMethodFactoryGenerators;
+    this.provisionBindingFactory = provisionBindingFactory;
+    this.factoryGenerator = factoryGenerator;
+    this.productionBindingFactory = productionBindingFactory;
+    this.producerFactoryGenerator = producerFactoryGenerator;
   }
 
   @Override
   public Set<? extends Class<? extends Annotation>> annotations() {
-    return ImmutableSet.of(moduleAnnotation);
+    return ImmutableSet.of(Module.class, ProducerModule.class);
   }
 
   @Override
@@ -125,69 +87,14 @@ private void processModule(TypeElement module) {
     report.printMessagesTo(messager);
     if (report.isClean()) {
       for (ExecutableElement method : methodsIn(module.getEnclosedElements())) {
-        for (ModuleMethodFactoryGenerator generator : moduleMethodFactoryGenerators) {
-          if (isAnnotationPresent(method, generator.factoryMethodAnnotation())) {
-            generator.generate(method, module, messager);
-          }
+        if (isAnnotationPresent(method, Provides.class)) {
+          factoryGenerator.generate(
+              provisionBindingFactory.forProvidesMethod(method, module), messager);
+        } else if (isAnnotationPresent(method, Produces.class)) {
+          producerFactoryGenerator.generate(
+              productionBindingFactory.forProducesMethod(method, module), messager);
         }
       }
     }
   }
-
-  interface ModuleMethodFactoryGenerator {
-    /** Binding method annotation for which factories should be generated. */
-    Class<? extends Annotation> factoryMethodAnnotation();
-
-    /** Generates the factory source file for the given method and module. */
-    void generate(ExecutableElement method, TypeElement moduleElement, Messager messager);
-  }
-
-  private static final class ProvisionModuleMethodFactoryGenerator
-      implements ModuleMethodFactoryGenerator {
-
-    private final ProvisionBinding.Factory provisionBindingFactory;
-    private final FactoryGenerator factoryGenerator;
-
-    ProvisionModuleMethodFactoryGenerator(
-        ProvisionBinding.Factory provisionBindingFactory, FactoryGenerator factoryGenerator) {
-      this.provisionBindingFactory = provisionBindingFactory;
-      this.factoryGenerator = factoryGenerator;
-    }
-
-    @Override
-    public Class<? extends Annotation> factoryMethodAnnotation() {
-      return Provides.class;
-    }
-
-    @Override
-    public void generate(ExecutableElement method, TypeElement moduleElement, Messager messager) {
-      factoryGenerator.generate(
-          provisionBindingFactory.forProvidesMethod(method, moduleElement), messager);
-    }
-  }
-
-  private static final class ProductionModuleMethodFactoryGenerator
-      implements ModuleMethodFactoryGenerator {
-
-    private final ProductionBinding.Factory productionBindingFactory;
-    private final ProducerFactoryGenerator producerFactoryGenerator;
-
-    ProductionModuleMethodFactoryGenerator(
-        ProductionBinding.Factory productionBindingFactory,
-        ProducerFactoryGenerator productionFactoryGenerator) {
-      this.productionBindingFactory = productionBindingFactory;
-      this.producerFactoryGenerator = productionFactoryGenerator;
-    }
-
-    @Override
-    public Class<? extends Annotation> factoryMethodAnnotation() {
-      return Produces.class;
-    }
-
-    @Override
-    public void generate(ExecutableElement method, TypeElement moduleElement, Messager messager) {
-      producerFactoryGenerator.generate(
-          productionBindingFactory.forProducesMethod(method, moduleElement), messager);
-    }
-  }
 }
