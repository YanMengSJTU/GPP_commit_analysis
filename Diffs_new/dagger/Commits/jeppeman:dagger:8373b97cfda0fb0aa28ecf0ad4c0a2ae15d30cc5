diff --git a/java/dagger/internal/codegen/ComponentProcessingStep.java b/java/dagger/internal/codegen/ComponentProcessingStep.java
index 8a93ce0a7..4a3273d6c 100644
--- a/java/dagger/internal/codegen/ComponentProcessingStep.java
+++ b/java/dagger/internal/codegen/ComponentProcessingStep.java
@@ -123,30 +123,34 @@
             componentValidator.validate(
                 componentTypeElement, subcomponentElements, subcomponentBuilderElements);
         validationReport.report().printMessagesTo(messager);
-        if (isClean(
+        if (!isClean(
             validationReport,
             builderReportsByComponent,
             reportsBySubcomponent,
             builderReportsBySubcomponent)) {
-          ComponentDescriptor componentDescriptor =
-              componentDescriptorFactory.forComponent(componentTypeElement);
-          ValidationReport<TypeElement> hierarchyReport =
-              componentHierarchyValidator.validate(componentDescriptor);
-          hierarchyReport.printMessagesTo(messager);
-          if (hierarchyReport.isClean()) {
-            BindingGraph bindingGraph = bindingGraphFactory.create(componentDescriptor);
-            ValidationReport<TypeElement> graphReport =
-                bindingGraphValidator.validate(bindingGraph);
-            graphReport.printMessagesTo(messager);
-            if (graphReport.isClean()) {
-              if (!bindingGraphPlugins.isEmpty()) {
-                BindingNetwork bindingNetwork = BindingNetwork.create(bindingGraph);
-                bindingGraphPlugins.forEach(plugin -> plugin.visitGraph(bindingNetwork));
-              }
-              generateComponent(bindingGraph);
-            }
-          }
+          continue;
         }
+        ComponentDescriptor componentDescriptor =
+            componentDescriptorFactory.forComponent(componentTypeElement);
+        ValidationReport<TypeElement> hierarchyReport =
+            componentHierarchyValidator.validate(componentDescriptor);
+        hierarchyReport.printMessagesTo(messager);
+        if (!hierarchyReport.isClean()) {
+          continue;
+        }
+        BindingGraph bindingGraph = bindingGraphFactory.create(componentDescriptor);
+        ValidationReport<TypeElement> graphReport = bindingGraphValidator.validate(bindingGraph);
+        graphReport.printMessagesTo(messager);
+        if (!graphReport.isClean()) {
+          continue;
+        }
+
+        if (!bindingGraphPlugins.isEmpty()) {
+          BindingNetwork bindingNetwork = BindingNetwork.create(bindingGraph);
+          bindingGraphPlugins.forEach(plugin -> plugin.visitGraph(bindingNetwork));
+        }
+
+        generateComponent(bindingGraph);
       } catch (TypeNotPresentException e) {
         rejectedElements.add(componentTypeElement);
       }
