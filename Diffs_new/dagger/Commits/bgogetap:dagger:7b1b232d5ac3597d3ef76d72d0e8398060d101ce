diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index 049222a27..462b10e45 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -249,6 +249,7 @@ java_library(
         "ComponentRequirementBindingExpression.java",
         "ComponentRequirementField.java",
         "ComponentRequirementFields.java",
+        "DeferredModifiableBindingExpression.java",
         "DelegateBindingExpression.java",
         "DelegatingFrameworkInstanceCreationExpression.java",
         "DependencyMethodProducerCreationExpression.java",
@@ -259,7 +260,6 @@ java_library(
         "FrameworkFieldInitializer.java",
         "FrameworkInstanceBindingExpression.java",
         "FrameworkInstanceSupplier.java",
-        "GeneratedInstanceBindingExpression.java",
         "GwtCompatibility.java",
         "HjarSourceFileGenerator.java",
         "ImmediateFutureBindingExpression.java",
diff --git a/java/dagger/internal/codegen/GeneratedInstanceBindingExpression.java b/java/dagger/internal/codegen/DeferredModifiableBindingExpression.java
similarity index 57%
rename from java/dagger/internal/codegen/GeneratedInstanceBindingExpression.java
rename to java/dagger/internal/codegen/DeferredModifiableBindingExpression.java
index 1e295d84e..a92015f67 100644
--- a/java/dagger/internal/codegen/GeneratedInstanceBindingExpression.java
+++ b/java/dagger/internal/codegen/DeferredModifiableBindingExpression.java
@@ -15,40 +15,49 @@
  */
 
 package dagger.internal.codegen;
+import static com.google.common.base.Preconditions.checkNotNull;
 
 import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
 import dagger.internal.codegen.ModifiableBindingMethods.ModifiableBindingMethod;
 import java.util.Optional;
 
 /**
- * An {@link ModifiableAbstractMethodBindingExpression} for a binding that requires an instance of a
- * generated type. This expression is used in abstract implementations of a subcomponent when there
- * are no concrete definitions of generated types available. The (unimplemented) method is added to
- * the {@code GeneratedComponentModel} when this dependency expression is requested. The method is
- * overridden when generating the concrete implementation of an ancestor component.
+ * A {@link ModifiableAbstractMethodBindingExpression} for a binding that exists but is not ready to
+ * be expressed in this compilation unit and should be deferred until a future compilation.
+ * Generates a method that will be implemented in the future compilation.
+ *
+ * <p>A deferred modifiable binding expression is used when:
+ *
+ * <ul>
+ *   <li>The generated code for a binding requires an instance of a type that is generated in the
+ *       root component compilation unit.
+ *   <li>A {@linkplain ModifiableBindingType#BINDS_METHOD_WITH_MISSING_DEPENDENCY {@code @Binds}
+ *       method's dependency is missing} in a subcomponent.
+ * </ul>
  */
-final class GeneratedInstanceBindingExpression extends ModifiableAbstractMethodBindingExpression {
+final class DeferredModifiableBindingExpression extends ModifiableAbstractMethodBindingExpression {
   private final ComponentImplementation componentImplementation;
   private final ContributionBinding binding;
   private final BindingRequest request;
 
-  GeneratedInstanceBindingExpression(
+  DeferredModifiableBindingExpression(
       ComponentImplementation componentImplementation,
-      ResolvedBindings resolvedBindings,
+      ModifiableBindingType modifiableBindingType,
+      ContributionBinding binding,
       BindingRequest request,
       Optional<ModifiableBindingMethod> matchingModifiableBindingMethod,
       Optional<ComponentMethodDescriptor> matchingComponentMethod,
       DaggerTypes types) {
     super(
         componentImplementation,
-        ModifiableBindingType.GENERATED_INSTANCE,
+        modifiableBindingType,
         request,
         matchingModifiableBindingMethod,
         matchingComponentMethod,
         types);
-    this.componentImplementation = componentImplementation;
-    this.binding = resolvedBindings.contributionBinding();
-    this.request = request;
+    this.componentImplementation = checkNotNull(componentImplementation);
+    this.binding = checkNotNull(binding);
+    this.request = checkNotNull(request);
   }
 
   @Override
diff --git a/java/dagger/internal/codegen/ModifiableBindingExpressions.java b/java/dagger/internal/codegen/ModifiableBindingExpressions.java
index cd7e90f4e..854e08545 100644
--- a/java/dagger/internal/codegen/ModifiableBindingExpressions.java
+++ b/java/dagger/internal/codegen/ModifiableBindingExpressions.java
@@ -28,6 +28,7 @@
 import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
 import dagger.internal.codegen.ModifiableBindingMethods.ModifiableBindingMethod;
 import dagger.model.BindingKind;
+import dagger.model.DependencyRequest;
 import dagger.model.Scope;
 import java.util.Optional;
 
@@ -150,6 +151,7 @@ private boolean modifiableBindingWillBeFinalized(
       ModifiableBindingType modifiableBindingType, boolean modifyingBinding) {
     switch (modifiableBindingType) {
       case MISSING:
+      case BINDS_METHOD_WITH_MISSING_DEPENDENCY:
       case GENERATED_INSTANCE:
       case OPTIONAL:
       case INJECTION:
@@ -196,11 +198,12 @@ private BindingExpression createModifiableBindingExpression(
     switch (type) {
       case GENERATED_INSTANCE:
         // If the subcomponent is abstract then we need to define an (un-implemented)
-        // GeneratedInstanceBindingExpression.
+        // DeferredModifiableBindingExpression.
         if (componentImplementation.isAbstract()) {
-          return new GeneratedInstanceBindingExpression(
+          return new DeferredModifiableBindingExpression(
               componentImplementation,
-              resolvedBindings,
+              type,
+              resolvedBindings.contributionBinding(),
               request,
               matchingModifiableBindingMethod,
               matchingComponentMethod,
@@ -228,6 +231,17 @@ private BindingExpression createModifiableBindingExpression(
         // graph with its superclass implementation's graph to detect pruned dependency branches.
         return new PrunedConcreteMethodBindingExpression();
 
+      case BINDS_METHOD_WITH_MISSING_DEPENDENCY:
+        checkState(componentImplementation.isAbstract());
+        return new DeferredModifiableBindingExpression(
+            componentImplementation,
+            type,
+            resolvedBindings.contributionBinding(),
+            request,
+            matchingModifiableBindingMethod,
+            matchingComponentMethod,
+            types);
+
       case OPTIONAL:
       case MULTIBINDING:
       case INJECTION:
@@ -281,12 +295,7 @@ ModifiableBindingType getModifiableBindingType(BindingRequest request) {
               .contributionBindings()
               .get(getOnlyElement(binding.dependencies()).key())
               .isEmpty()) {
-        // There's not much to do for @Binds bindings if the dependency is missing - at best, if the
-        // dependency is a weaker scope/unscoped, we save only a few lines that implement the
-        // scoping. But it's also possible, if the dependency is the same or stronger scope, that
-        // no extra code is necessary, in which case we'd be overriding a method that just returns
-        // another.
-        return ModifiableBindingType.MISSING;
+        return ModifiableBindingType.BINDS_METHOD_WITH_MISSING_DEPENDENCY;
       }
 
       if (binding.kind().equals(BindingKind.OPTIONAL) && binding.dependencies().isEmpty()) {
@@ -378,6 +387,7 @@ private boolean shouldModifyImplementation(
     switch (modifiableBindingType) {
       case GENERATED_INSTANCE:
         return !componentImplementation.isAbstract();
+
       case MISSING:
         // TODO(b/117833324): investigate beder@'s comment about having intermediate component
         // ancestors satisfy missing bindings of their children with their own missing binding
@@ -389,16 +399,25 @@ private boolean shouldModifyImplementation(
         // implementation is concrete then it is assumed to be part of a dependency that would have
         // been passively pruned when implementing the full component hierarchy.
         return resolvableBinding(request) || !componentImplementation.isAbstract();
+
+      case BINDS_METHOD_WITH_MISSING_DEPENDENCY:
+        DependencyRequest dependency =
+            getOnlyElement(resolvedBindings.contributionBinding().dependencies());
+        return !graph.contributionBindings().get(dependency.key()).isEmpty();
+
       case OPTIONAL:
         // Only override optional binding methods if we have a non-empty binding.
         return !resolvedBindings.contributionBinding().dependencies().isEmpty();
+
       case MULTIBINDING:
         // Only modify a multibinding if there are new contributions.
         return !componentImplementation
             .superclassContributionsMade(request)
             .containsAll(resolvedBindings.contributionBinding().dependencies());
+
       case INJECTION:
         return !resolvedBindings.contributionBinding().kind().equals(BindingKind.INJECTION);
+
       case MODULE_INSTANCE:
         // At the moment we have no way of detecting whether a new module instance is installed and
         // the implementation has changed, so we implement the binding once in the base
@@ -406,11 +425,13 @@ private boolean shouldModifyImplementation(
         // component.
         return !componentImplementation.superclassImplementation().isPresent()
             || !componentImplementation.isAbstract();
+
       case PRODUCTION:
         // TODO(b/117833324): Profile this to see if this check is slow
         return !resolvedBindings
             .owningComponent()
             .equals(componentImplementation.componentDescriptor());
+
       default:
         throw new IllegalStateException(
             String.format(
diff --git a/java/dagger/internal/codegen/ModifiableBindingType.java b/java/dagger/internal/codegen/ModifiableBindingType.java
index 18a39b133..96fe7633d 100644
--- a/java/dagger/internal/codegen/ModifiableBindingType.java
+++ b/java/dagger/internal/codegen/ModifiableBindingType.java
@@ -103,6 +103,16 @@
    * {@code @Produces} methods as modifiable.
    */
   PRODUCTION,
+
+  /**
+   * A {@link dagger.Binds} method whose dependency is {@link #MISSING}.
+   *
+   * <p>There's not much to do for @Binds bindings if the dependency is missing - at best, if the
+   * dependency is a weaker scope/unscoped, we save only a few lines that implement the scoping. But
+   * it's also possible, if the dependency is the same or stronger scope, that no extra code is
+   * necessary, in which case we'd be overriding a method that just returns another.
+   */
+  BINDS_METHOD_WITH_MISSING_DEPENDENCY,
   ;
 
   private static final ImmutableSet<ModifiableBindingType> TYPES_WITH_BASE_CLASS_IMPLEMENTATIONS =
diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
index 283ea1a46..a74095d5e 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
@@ -5676,6 +5676,263 @@ public void subcomponentBuilders_repeatedModule() {
         .hasSourceEquivalentTo(generatedRoot);
   }
 
+  @Test
+  public void bindsWithMissingDependency() {
+    ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
+    createAncillaryClasses(filesToCompile, "MissingInLeaf");
+    filesToCompile.add(
+        JavaFileObjects.forSourceLines(
+            "test.LeafModule",
+            "package test;",
+            "",
+            "import dagger.Module;",
+            "import dagger.Binds;",
+            "",
+            "@Module",
+            "interface LeafModule {",
+            "  @Binds Object missingBindsDependency(MissingInLeaf missing);",
+            "}"),
+        JavaFileObjects.forSourceLines(
+            "test.Leaf",
+            "package test;",
+            "",
+            "import dagger.Subcomponent;",
+            "",
+            "@Subcomponent(modules = LeafModule.class)",
+            "interface Leaf {",
+            "  Object bindsWithMissingDependencyInLeaf();",
+            "}"));
+    JavaFileObject generatedLeaf =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerLeaf",
+            "package test;",
+            "",
+            IMPORT_GENERATED_ANNOTATION,
+            "",
+            GENERATED_ANNOTATION,
+            "public abstract class DaggerLeaf implements Leaf {",
+            "  protected DaggerLeaf() {}",
+            "}");
+    Compilation compilation = compile(filesToCompile.build());
+    assertThat(compilation).succeededWithoutWarnings();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerLeaf")
+        .hasSourceEquivalentTo(generatedLeaf);
+
+    filesToCompile.add(
+        JavaFileObjects.forSourceLines(
+            "test.MissingInLeafModule",
+            "package test;",
+            "",
+            "import dagger.Module;",
+            "import dagger.Provides;",
+            "",
+            "@Module",
+            "interface MissingInLeafModule {",
+            "  @Provides",
+            "  static MissingInLeaf boundInRoot() {",
+            "    return new MissingInLeaf();",
+            "  }",
+            "}"),
+        JavaFileObjects.forSourceLines(
+            "test.Root",
+            "package test;",
+            "",
+            "import dagger.Component;",
+            "",
+            "@Component(modules = MissingInLeafModule.class)",
+            "interface Root {",
+            "  Leaf leaf();",
+            "}"));
+    JavaFileObject generatedRoot =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerRoot",
+            "package test;",
+            "",
+            IMPORT_GENERATED_ANNOTATION,
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerRoot implements Root {",
+            "  private DaggerRoot(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static Root create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public Leaf leaf() {",
+            "    return new LeafImpl();",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {}",
+            "",
+            "    public Root build() {",
+            "      return new DaggerRoot(this);",
+            "    }",
+            "  }",
+            "",
+            "  protected final class LeafImpl extends DaggerLeaf {",
+            "    private LeafImpl() {}",
+            "",
+            "    @Override",
+            "    public Object bindsWithMissingDependencyInLeaf() {",
+            "      return MissingInLeafModule_BoundInRootFactory.proxyBoundInRoot();",
+            "    }",
+            "  }",
+            "}");
+    compilation = compile(filesToCompile.build());
+    assertThat(compilation).succeededWithoutWarnings();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerRoot")
+        .hasSourceEquivalentTo(generatedRoot);
+  }
+
+  @Test
+  public void bindsWithMissingDependency_pruned() {
+    ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
+    createAncillaryClasses(filesToCompile, "MissingInLeaf");
+    filesToCompile.add(
+        JavaFileObjects.forSourceLines(
+            "test.LeafModule",
+            "package test;",
+            "",
+            "import dagger.Module;",
+            "import dagger.Binds;",
+            "",
+            "@Module",
+            "interface LeafModule {",
+            "  @Binds Object missingBindsDependency(MissingInLeaf missing);",
+            "}"),
+        JavaFileObjects.forSourceLines(
+            "test.DependsOnBindsWithMissingDep",
+            "package test;",
+            "",
+            "import javax.inject.Inject;",
+            "",
+            "class DependsOnBindsWithMissingDep {",
+            "  @Inject DependsOnBindsWithMissingDep(Object bindsWithMissingDep) {}",
+            "}"),
+        JavaFileObjects.forSourceLines(
+            "test.Leaf",
+            "package test;",
+            "",
+            "import dagger.Subcomponent;",
+            "",
+            "@Subcomponent(modules = LeafModule.class)",
+            "interface Leaf {",
+            "  DependsOnBindsWithMissingDep DependsOnBindsWithMissingDep();",
+            "}"));
+    JavaFileObject generatedLeaf =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerLeaf",
+            "package test;",
+            "",
+            IMPORT_GENERATED_ANNOTATION,
+            "",
+            GENERATED_ANNOTATION,
+            "public abstract class DaggerLeaf implements Leaf {",
+            "  protected DaggerLeaf() {}",
+            "",
+            "  @Override",
+            "  public DependsOnBindsWithMissingDep DependsOnBindsWithMissingDep() {",
+            "    return new DependsOnBindsWithMissingDep(getObject());",
+            "  }",
+            "",
+            "  protected abstract Object getObject();",
+            "}");
+    Compilation compilation = compile(filesToCompile.build());
+    assertThat(compilation).succeededWithoutWarnings();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerLeaf")
+        .hasSourceEquivalentTo(generatedLeaf);
+
+    filesToCompile.add(
+        JavaFileObjects.forSourceLines(
+            "test.PrunesInjectConstructorModule",
+            "package test;",
+            "",
+            "import dagger.Module;",
+            "import dagger.Provides;",
+            "",
+            "@Module",
+            "interface PrunesInjectConstructorModule {",
+            "  @Provides",
+            "  static DependsOnBindsWithMissingDep pruneInjectConstructor() {",
+            "    return new DependsOnBindsWithMissingDep(new Object());",
+            "  }",
+            "}"),
+        JavaFileObjects.forSourceLines(
+            "test.Root",
+            "package test;",
+            "",
+            "import dagger.Component;",
+            "",
+            "@Component(modules = PrunesInjectConstructorModule.class)",
+            "interface Root {",
+            "  Leaf leaf();",
+            "}"));
+    JavaFileObject generatedRoot =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerRoot",
+            "package test;",
+            "",
+            IMPORT_GENERATED_ANNOTATION,
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerRoot implements Root {",
+            "  private DaggerRoot(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static Root create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public Leaf leaf() {",
+            "    return new LeafImpl();",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {}",
+            "",
+            "    public Root build() {",
+            "      return new DaggerRoot(this);",
+            "    }",
+            "  }",
+            "",
+            "  protected final class LeafImpl extends DaggerLeaf {",
+            "    private LeafImpl() {}",
+            "",
+            "    @Override",
+            "    protected Object getObject() {",
+            "      throw new UnsupportedOperationException(",
+            "          \"This binding is not part of the final binding graph. The key was \"",
+            "              + \"requested by a binding that was believed to possibly be part of \"",
+            "              + \"the graph, but is no longer requested.\");",
+            "    }",
+            "",
+            "    @Override",
+            "    public DependsOnBindsWithMissingDep DependsOnBindsWithMissingDep() {",
+            "      return PrunesInjectConstructorModule_PruneInjectConstructorFactory",
+            "          .proxyPruneInjectConstructor();",
+            "    }",
+            "  }",
+            "}");
+    compilation = compile(filesToCompile.build());
+    assertThat(compilation).succeededWithoutWarnings();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerRoot")
+        .hasSourceEquivalentTo(generatedRoot);
+  }
+
   private void createAncillaryClasses(
       ImmutableList.Builder<JavaFileObject> filesBuilder, String... ancillaryClasses) {
     for (String className : ancillaryClasses) {
