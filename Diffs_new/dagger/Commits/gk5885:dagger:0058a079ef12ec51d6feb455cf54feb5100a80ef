diff --git a/multibindings.md b/multibindings.md
index 81cfa38a2..4fdbd9e1a 100644
--- a/multibindings.md
+++ b/multibindings.md
@@ -43,20 +43,6 @@ class MyModuleB {
 }
 ```
 
-If no `type = SET` or `type = SET_VALUES` multibindings exist for a set, then
-depending on that set is an error. If you want to allow an empty set, then add a
-`type = SET_VALUES` method that returns an empty set.
-
-```java
-@Module
-class MyEmptySetModule {
-  @Provides(type = SET_VALUES)
-  static Set<Foo> primeEmptyFooSet() {
-    return Collections.emptySet();
-  }
-}
-```
-
 Now a binding in that component can depend on the set:
 
 ```java
@@ -329,6 +315,48 @@ class MyProviderMapModule {
 }
 ```
 
+## Declaring multibindings
+
+You can declare that a multibound set or map is bound by nesting a
+[`@Multibindings`]-annotated interface within a module, with methods that return
+the sets or maps you want to declare.
+
+You do not have to use [`@Multibindings`] for sets or maps that have at least
+one contribution, but you do have to declare them if they may be empty.[^empty-set-values]
+
+[^empty-set-values]:
+    For empty sets only, as an alternative, you can add a [`@Provides(type =
+    SET_VALUES)`] method that returns an empty set:
+
+    ```java
+    @Module
+    class MyEmptySetModule {
+      @Provides(type = SET_VALUES)
+      static Set<Foo> primeEmptyFooSet() {
+        return Collections.emptySet();
+      }
+    }
+    ```
+
+```java
+@Module
+class MyModule {
+  @Multibindings
+  interface MyMultibindings {
+    Set<Foo> aSet();
+    @MyQualifier Set<Foo> aQualifiedSet();
+    Map<String, Foo> aMap();
+    @MyQualifier Map<String, Foo> aQualifiedMap();
+  }
+}
+```
+
+All methods on the interface and any supertypes (except for methods on `Object`)
+are used to declare multibindings. The names of the interface and its methods
+are ignored. A given set or map multibinding can be declared any number of times
+without error. Dagger never implements the interface or calls any of its
+methods.
+
 ## Inherited subcomponent multibindings
 
 A binding in a subcomponent can depend on a multibound set or map from its
@@ -432,6 +460,7 @@ class ChildModule {
 [`@AutoAnnotation`]: https://github.com/google/auto/blob/master/value/src/main/java/com/google/auto/value/AutoAnnotation.java
 [`dagger.mapkeys`]: http://google.github.io/dagger/api/latest/dagger/mapkeys/package-summary.html
 [`@MapKey`]: http://google.github.io/dagger/api/latest/dagger/MapKey.html
+[`@Multibindings`]: http://google.github.io/dagger/api/latest/dagger/Multibindings.html
 [`@Provides(type = MAP)`]: http://google.github.io/dagger/api/latest/dagger/Provides.Type.html#MAP
 [`@Provides(type = SET)`]: http://google.github.io/dagger/api/latest/dagger/Provides.Type.html#SET
 [`@Provides(type = SET_VALUES)`]: http://google.github.io/dagger/api/latest/dagger/Provides.Type.html#SET_VALUES
