diff --git a/java/dagger/internal/codegen/BindingGraph.java b/java/dagger/internal/codegen/BindingGraph.java
index b0ab9d324..200b0647a 100644
--- a/java/dagger/internal/codegen/BindingGraph.java
+++ b/java/dagger/internal/codegen/BindingGraph.java
@@ -49,7 +49,7 @@
 import com.google.common.collect.Maps;
 import com.google.common.collect.Multimaps;
 import com.google.common.collect.Sets;
-import com.google.common.collect.TreeTraverser;
+import com.google.common.graph.Traverser;
 import dagger.MembersInjector;
 import dagger.Reusable;
 import dagger.Subcomponent;
@@ -182,13 +182,8 @@ TypeElement componentType() {
     return FluentIterable.from(ownedModules()).transform(ModuleDescriptor::moduleElement).toSet();
   }
 
-  private static final TreeTraverser<BindingGraph> SUBGRAPH_TRAVERSER =
-      new TreeTraverser<BindingGraph>() {
-        @Override
-        public Iterable<BindingGraph> children(BindingGraph node) {
-          return node.subgraphs();
-        }
-      };
+  private static final Traverser<BindingGraph> SUBGRAPH_TRAVERSER =
+      Traverser.forTree(BindingGraph::subgraphs);
 
   /**
    * The types for which the component needs instances.
@@ -203,7 +198,7 @@ TypeElement componentType() {
   @Memoized
   ImmutableSet<ComponentRequirement> componentRequirements() {
     ImmutableSet.Builder<ComponentRequirement> requirements = ImmutableSet.builder();
-    StreamSupport.stream(SUBGRAPH_TRAVERSER.preOrderTraversal(this).spliterator(), false)
+    StreamSupport.stream(SUBGRAPH_TRAVERSER.depthFirstPreOrder(this).spliterator(), false)
         .flatMap(graph -> graph.contributionBindings().values().stream())
         .flatMap(bindings -> bindings.contributionBindings().stream())
         .filter(ContributionBinding::requiresModuleInstance)
@@ -229,10 +224,10 @@ TypeElement componentType() {
     }
     return requirements.build();
   }
+
   /** Returns the {@link ComponentDescriptor}s for this component and its subcomponents. */
   ImmutableSet<ComponentDescriptor> componentDescriptors() {
-    return SUBGRAPH_TRAVERSER
-        .preOrderTraversal(this)
+    return FluentIterable.from(SUBGRAPH_TRAVERSER.depthFirstPreOrder(this))
         .transform(BindingGraph::componentDescriptor)
         .toSet();
   }
diff --git a/java/dagger/internal/codegen/ComponentDescriptor.java b/java/dagger/internal/codegen/ComponentDescriptor.java
index ba2b0fbc8..ce32ebfc4 100644
--- a/java/dagger/internal/codegen/ComponentDescriptor.java
+++ b/java/dagger/internal/codegen/ComponentDescriptor.java
@@ -45,7 +45,7 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Sets;
-import com.google.common.collect.TreeTraverser;
+import com.google.common.graph.Traverser;
 import com.squareup.javapoet.ClassName;
 import dagger.BindsInstance;
 import dagger.Component;
@@ -342,22 +342,16 @@ private static void addTransitiveModules(
    */
   ImmutableSet<Scope> releasableReferencesScopes() {
     return kind().equals(Kind.COMPONENT)
-        ? SUBCOMPONENT_TRAVERSER
-            .breadthFirstTraversal(this)
+        ? FluentIterable.from(SUBCOMPONENT_TRAVERSER.breadthFirst(this))
             .transformAndConcat(ComponentDescriptor::scopes)
             .filter(Scope::canReleaseReferences)
             .toSet()
         : ImmutableSet.<Scope>of();
   }
 
-  /** {@link TreeTraverser} for the subcomponent tree. */
-  private static final TreeTraverser<ComponentDescriptor> SUBCOMPONENT_TRAVERSER =
-      new TreeTraverser<ComponentDescriptor>() {
-        @Override
-        public Iterable<ComponentDescriptor> children(ComponentDescriptor node) {
-          return node.subcomponents();
-        }
-      };
+  /** {@link Traverser} for the subcomponent tree. */
+  private static final Traverser<ComponentDescriptor> SUBCOMPONENT_TRAVERSER =
+      Traverser.forTree(ComponentDescriptor::subcomponents);
 
   /** A function that returns all {@link #scopes()} of its input. */
   @AutoValue
