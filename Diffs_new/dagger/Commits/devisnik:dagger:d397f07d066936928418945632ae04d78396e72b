diff --git a/java/dagger/internal/codegen/ComponentProcessingStep.java b/java/dagger/internal/codegen/ComponentProcessingStep.java
index 4821a400e..589fafa29 100644
--- a/java/dagger/internal/codegen/ComponentProcessingStep.java
+++ b/java/dagger/internal/codegen/ComponentProcessingStep.java
@@ -47,7 +47,6 @@
 final class ComponentProcessingStep implements ProcessingStep {
   private final Messager messager;
   private final ComponentValidator componentValidator;
-  private final ComponentValidator subcomponentValidator;
   private final BuilderValidator builderValidator;
   private final ComponentHierarchyValidator componentHierarchyValidator;
   private final BindingGraphValidator bindingGraphValidator;
@@ -59,7 +58,6 @@
   ComponentProcessingStep(
       Messager messager,
       ComponentValidator componentValidator,
-      ComponentValidator subcomponentValidator,
       BuilderValidator builderValidator,
       ComponentHierarchyValidator componentHierarchyValidator,
       BindingGraphValidator bindingGraphValidator,
@@ -69,7 +67,6 @@
       Iterable<BindingGraphPlugin> bindingGraphPlugins) {
     this.messager = messager;
     this.componentValidator = componentValidator;
-    this.subcomponentValidator = subcomponentValidator;
     this.builderValidator = builderValidator;
     this.componentHierarchyValidator = componentHierarchyValidator;
     this.bindingGraphValidator = bindingGraphValidator;
@@ -184,8 +181,9 @@ private void generateComponent(BindingGraph bindingGraph) {
       Set<? extends Element> subcomponentBuilderElements) {
     Map<Element, ValidationReport<TypeElement>> reportsBySubcomponent = Maps.newHashMap();
     for (Element element : subcomponentElements) {
-      ComponentValidationReport report = subcomponentValidator.validate(
-          MoreElements.asType(element), subcomponentElements, subcomponentBuilderElements);
+      ComponentValidationReport report =
+          componentValidator.validate(
+              MoreElements.asType(element), subcomponentElements, subcomponentBuilderElements);
       report.report().printMessagesTo(messager);
       reportsBySubcomponent.put(element, report.report());
     }
diff --git a/java/dagger/internal/codegen/ComponentProcessor.java b/java/dagger/internal/codegen/ComponentProcessor.java
index 1e4ea5b4f..319640070 100644
--- a/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/java/dagger/internal/codegen/ComponentProcessor.java
@@ -116,12 +116,8 @@ public SourceVersion getSupportedSourceVersion() {
             anyBindingMethodValidator,
             methodSignatureFormatter);
     BuilderValidator builderValidator = new BuilderValidator(elements, types);
-    ComponentValidator subcomponentValidator =
-        ComponentValidator.createForSubcomponent(
-            elements, types, moduleValidator, builderValidator);
     ComponentValidator componentValidator =
-        ComponentValidator.createForComponent(
-            elements, types, moduleValidator, subcomponentValidator, builderValidator);
+        new ComponentValidator(elements, types, moduleValidator, builderValidator);
     MapKeyValidator mapKeyValidator = new MapKeyValidator(elements);
 
     DependencyRequestFactory dependencyRequestFactory =
@@ -213,7 +209,6 @@ public SourceVersion getSupportedSourceVersion() {
             : new ComponentProcessingStep(
                 messager,
                 componentValidator,
-                subcomponentValidator,
                 builderValidator,
                 componentHierarchyValidator,
                 bindingGraphValidator,
diff --git a/java/dagger/internal/codegen/ComponentValidator.java b/java/dagger/internal/codegen/ComponentValidator.java
index c90f459df..f4f626fb5 100644
--- a/java/dagger/internal/codegen/ComponentValidator.java
+++ b/java/dagger/internal/codegen/ComponentValidator.java
@@ -72,50 +72,17 @@
   private final Elements elements;
   private final Types types;
   private final ModuleValidator moduleValidator;
-  private final ComponentValidator subcomponentValidator;
-  private final BuilderValidator subcomponentBuilderValidator;
+  private final BuilderValidator builderValidator;
 
-  private ComponentValidator(
+  ComponentValidator(
       Elements elements,
       Types types,
       ModuleValidator moduleValidator,
-      BuilderValidator subcomponentBuilderValidator) {
+      BuilderValidator builderValidator) {
     this.elements = elements;
     this.types = types;
     this.moduleValidator = moduleValidator;
-    this.subcomponentValidator = this;
-    this.subcomponentBuilderValidator = subcomponentBuilderValidator;
-  }
-
-  private ComponentValidator(
-      Elements elements,
-      Types types,
-      ModuleValidator moduleValidator,
-      ComponentValidator subcomponentValidator,
-      BuilderValidator subcomponentBuilderValidator) {
-    this.elements = elements;
-    this.types = types;
-    this.moduleValidator = moduleValidator;
-    this.subcomponentValidator = subcomponentValidator;
-    this.subcomponentBuilderValidator = subcomponentBuilderValidator;
-  }
-
-  static ComponentValidator createForComponent(
-      Elements elements,
-      Types types,
-      ModuleValidator moduleValidator,
-      ComponentValidator subcomponentValidator,
-      BuilderValidator subcomponentBuilderValidator) {
-    return new ComponentValidator(
-        elements, types, moduleValidator, subcomponentValidator, subcomponentBuilderValidator);
-  }
-
-  static ComponentValidator createForSubcomponent(
-      Elements elements,
-      Types types,
-      ModuleValidator moduleValidator,
-      BuilderValidator subcomponentBuilderValidator) {
-    return new ComponentValidator(elements, types, moduleValidator, subcomponentBuilderValidator);
+    this.builderValidator = builderValidator;
   }
 
   @AutoValue
@@ -266,7 +233,7 @@ public ComponentValidationReport validate(
     for (Element subcomponent :
         Sets.difference(referencedSubcomponents.keySet(), validatedSubcomponents)) {
       ComponentValidationReport subreport =
-          subcomponentValidator.validate(
+          validate(
               MoreElements.asType(subcomponent),
               validatedSubcomponents,
               validatedSubcomponentBuilders);
@@ -368,7 +335,7 @@ private void validateSubcomponentBuilderMethod(
       // TODO(sameb): The builder validator right now assumes the element is being compiled
       // in this pass, which isn't true here.  We should change error messages to spit out
       // this method as the subject and add the original subject to the message output.
-      builder.addItems(subcomponentBuilderValidator.validate(builderElement).items());
+      builder.addItems(builderValidator.validate(builderElement).items());
     }
   }
 
