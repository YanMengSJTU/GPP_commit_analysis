diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
index 66a88b83a..2f724ecc9 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
@@ -33,226 +33,320 @@
 @RunWith(JUnit4.class)
 public final class AheadOfTimeSubcomponentsTest {
   @Test
-  public void missingBindings() {
+  public void missingBindings_fromComponentMethod() {
     ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
-    createAncillaryClasses(
-        filesToCompile,
-        "InGrandChild",
-        "InChild",
-        "RequiresInChild",
-        "NonComponentMethodInChild",
-        "RequiresNonComponentMethodInChild",
-        "RequiresRequiresNonComponentMethodInChild");
-
+    createAncillaryClasses(filesToCompile, "MissingInLeaf");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
-            "test.GreatGrandchild",
+            "test.Leaf",
             "package test;",
             "",
             "import dagger.Subcomponent;",
             "",
-            "@Subcomponent(modules = GreatGrandchildModule.class)",
-            "interface GreatGrandchild {",
-            "  RequiresInChild requiresComponentMethodMissingBinding();",
-            "  RequiresRequiresNonComponentMethodInChild",
-            "      requiresNonComponentMethodMissingBinding();",
-            "  InGrandChild satisfiedByGrandchild();",
-            "  InChild satisfiedByChild();",
+            "@Subcomponent",
+            "interface Leaf {",
+            "  MissingInLeaf missingFromComponentMethod();",
             "}"));
+    JavaFileObject generatedLeaf =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerLeaf",
+            "package test;",
+            "",
+            IMPORT_GENERATED_ANNOTATION,
+            "",
+            GENERATED_ANNOTATION,
+            "public abstract class DaggerLeaf implements Leaf {",
+            "  protected DaggerLeaf() {}",
+            "}");
+    Compilation compilation = compile(filesToCompile.build());
+    assertThat(compilation).succeededWithoutWarnings();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerLeaf")
+        .hasSourceEquivalentTo(generatedLeaf);
 
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
-            "test.GreatGrandchildModule",
+            "test.AncestorModule",
             "package test;",
             "",
             "import dagger.Module;",
             "import dagger.Provides;",
             "",
             "@Module",
-            "class GreatGrandchildModule {",
-            "  @Provides static RequiresInChild provideRequiresInChild(InChild inChild) {",
-            "    return new RequiresInChild();",
-            "  }",
+            "class AncestorModule {",
+            "  @Provides",
+            "  static MissingInLeaf satisfiedInAncestor() { return new MissingInLeaf(); }",
+            "}"),
+        JavaFileObjects.forSourceLines(
+            "test.Ancestor",
+            "package test;",
             "",
-            "  @Provides static RequiresRequiresNonComponentMethodInChild",
-            "      provideRequiresRequiresNonComponentMethodInChild(",
-            "          RequiresNonComponentMethodInChild requiresNonComponentMethodInChild) {",
-            "    return new RequiresRequiresNonComponentMethodInChild();",
-            "  }",
+            "import dagger.Subcomponent;",
+            "",
+            "@Subcomponent(modules = AncestorModule.class)",
+            "interface Ancestor {",
+            "  Leaf leaf();",
             "}"));
-
-    JavaFileObject generatedGreatGrandchild =
+    JavaFileObject generatedAncestor =
         JavaFileObjects.forSourceLines(
-            "test.DaggerGreatGrandchild",
+            "test.DaggerLeaf",
             "package test;",
+            "",
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "public abstract class DaggerGreatGrandchild implements GreatGrandchild {",
-            "  protected DaggerGreatGrandchild() {}",
+            "public abstract class DaggerAncestor implements Ancestor {",
+            "  protected DaggerAncestor() {}",
             "",
-            "  @Override",
-            "  public RequiresInChild requiresComponentMethodMissingBinding() {",
-            "    return GreatGrandchildModule_ProvideRequiresInChildFactory",
-            "        .proxyProvideRequiresInChild(satisfiedByChild());",
+            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "    protected LeafImpl() { super(); }",
+            "",
+            "    @Override",
+            "    public MissingInLeaf missingFromComponentMethod() {",
+            "      return AncestorModule_SatisfiedInAncestorFactory.proxySatisfiedInAncestor();",
+            "    }",
             "  }",
+            "}");
+    compilation = compile(filesToCompile.build());
+    assertThat(compilation).succeededWithoutWarnings();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerAncestor")
+        .hasSourceEquivalentTo(generatedAncestor);
+  }
+
+  @Test
+  public void missingBindings_dependsOnBindingWithMatchingComponentMethod() {
+    ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
+    createAncillaryClasses(filesToCompile, "MissingInLeaf");
+    filesToCompile.add(
+        JavaFileObjects.forSourceLines(
+            "test.Leaf",
+            "package test;",
+            "",
+            "import dagger.Subcomponent;",
+            "",
+            "@Subcomponent",
+            "interface Leaf {",
+            "  MissingInLeaf missingComponentMethod();",
+            "  DependsOnComponentMethod dependsOnComponentMethod();",
+            "}"),
+        JavaFileObjects.forSourceLines(
+            "test.DependsOnComponentMethod",
+            "package test;",
+            "",
+            "import javax.inject.Inject;",
+            "",
+            "class DependsOnComponentMethod {",
+            "  @Inject DependsOnComponentMethod(MissingInLeaf missingInLeaf) {}",
+            "}"));
+    JavaFileObject generatedLeaf =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerLeaf",
+            "package test;",
+            "",
+            IMPORT_GENERATED_ANNOTATION,
+            "",
+            GENERATED_ANNOTATION,
+            "public abstract class DaggerLeaf implements Leaf {",
+            "  protected DaggerLeaf() {}",
             "",
             "  @Override",
-            "  public RequiresRequiresNonComponentMethodInChild",
-            "      requiresNonComponentMethodMissingBinding() {",
-            "    return",
-            "        GreatGrandchildModule_ProvideRequiresRequiresNonComponentMethodInChildFactory",
-            "        .proxyProvideRequiresRequiresNonComponentMethodInChild(",
-            "            getRequiresNonComponentMethodInChild());",
+            "  public DependsOnComponentMethod dependsOnComponentMethod() {",
+            "    return new DependsOnComponentMethod(missingComponentMethod());",
             "  }",
-            "",
-            "  public abstract RequiresNonComponentMethodInChild",
-            "      getRequiresNonComponentMethodInChild();",
             "}");
+    Compilation compilation = compile(filesToCompile.build());
+    assertThat(compilation).succeededWithoutWarnings();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerLeaf")
+        .hasSourceEquivalentTo(generatedLeaf);
+  }
 
+  @Test
+  public void missingBindings_dependsOnMissingBinding() {
+    ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
+    createAncillaryClasses(filesToCompile, "MissingInLeaf");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
-            "test.Grandchild",
+            "test.Leaf",
             "package test;",
             "",
             "import dagger.Subcomponent;",
             "",
-            "@Subcomponent(modules = GrandchildModule.class)",
-            "interface Grandchild {",
-            "  GreatGrandchild greatGrandchild();",
+            "@Subcomponent",
+            "interface Leaf {",
+            "  DependsOnMissingBinding dependsOnMissingBinding();",
+            "}"),
+        JavaFileObjects.forSourceLines(
+            "test.DependsOnMissingBinding",
+            "package test;",
+            "",
+            "import javax.inject.Inject;",
+            "",
+            "class DependsOnMissingBinding {",
+            "  @Inject DependsOnMissingBinding(MissingInLeaf missing) {}",
             "}"));
+    JavaFileObject generatedLeaf =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerLeaf",
+            "package test;",
+            "",
+            IMPORT_GENERATED_ANNOTATION,
+            "",
+            GENERATED_ANNOTATION,
+            "public abstract class DaggerLeaf implements Leaf {",
+            "  protected DaggerLeaf() {}",
+            "",
+            "  @Override",
+            "  public DependsOnMissingBinding dependsOnMissingBinding() {",
+            "    return new DependsOnMissingBinding(getMissingInLeaf());",
+            "  }",
+            "",
+            "  public abstract MissingInLeaf getMissingInLeaf();",
+            "}");
+    Compilation compilation = compile(filesToCompile.build());
+    assertThat(compilation).succeededWithoutWarnings();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerLeaf")
+        .hasSourceEquivalentTo(generatedLeaf);
 
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
-            "test.GrandchildModule",
+            "test.AncestorModule",
             "package test;",
             "",
             "import dagger.Module;",
             "import dagger.Provides;",
             "",
             "@Module",
-            "class GrandchildModule {",
-            "  @Provides static InGrandChild provideInGrandChild() { return new InGrandChild(); }",
+            "class AncestorModule {",
+            "  @Provides",
+            "  static MissingInLeaf satisfiedInAncestor() { return new MissingInLeaf(); }",
+            "}"),
+        JavaFileObjects.forSourceLines(
+            "test.Ancestor",
+            "package test;",
             "",
-            "  @Provides static RequiresNonComponentMethodInChild",
-            "      provideRequiresNonComponentMethodInChild(",
-            "          NonComponentMethodInChild nonComponentMethodInChild) {",
-            "    return new RequiresNonComponentMethodInChild();",
-            "  }",
+            "import dagger.Subcomponent;",
+            "",
+            "@Subcomponent(modules = AncestorModule.class)",
+            "interface Ancestor {",
+            "  Leaf leaf();",
             "}"));
-
-    JavaFileObject generatedGrandchild =
+    JavaFileObject generatedAncestor =
         JavaFileObjects.forSourceLines(
-            "test.DaggerGrandchild",
+            "test.DaggerLeaf",
             "package test;",
+            "",
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "public abstract class DaggerGrandchild implements Grandchild {",
-            "  protected DaggerGrandchild() {}",
-            "",
-            "  private RequiresNonComponentMethodInChild getRequiresNonComponentMethodInChild() {",
-            "    return GrandchildModule_ProvideRequiresNonComponentMethodInChildFactory",
-            "        .proxyProvideRequiresNonComponentMethodInChild(",
-            "            getNonComponentMethodInChild());",
-            "  }",
-            "",
-            "  public abstract NonComponentMethodInChild getNonComponentMethodInChild();",
-            "",
-            "  public abstract class GreatGrandchildImpl extends DaggerGreatGrandchild {",
-            "    protected GreatGrandchildImpl() {",
-            "      super();",
-            "    }",
+            "public abstract class DaggerAncestor implements Ancestor {",
+            "  protected DaggerAncestor() {}",
             "",
-            "    @Override",
-            "    public RequiresNonComponentMethodInChild getRequiresNonComponentMethodInChild() {",
-            "      return DaggerGrandchild.this.getRequiresNonComponentMethodInChild();",
-            "    }",
+            "  public abstract class LeafImpl extends DaggerLeaf {",
+            "    protected LeafImpl() { super(); }",
             "",
             "    @Override",
-            "    public InGrandChild satisfiedByGrandchild() {",
-            "      return GrandchildModule_ProvideInGrandChildFactory.proxyProvideInGrandChild();",
+            "    public MissingInLeaf getMissingInLeaf() {",
+            "      return AncestorModule_SatisfiedInAncestorFactory.proxySatisfiedInAncestor();",
             "    }",
             "  }",
             "}");
+    compilation = compile(filesToCompile.build());
+    assertThat(compilation).succeededWithoutWarnings();
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerAncestor")
+        .hasSourceEquivalentTo(generatedAncestor);
+  }
 
+  @Test
+  public void missingBindings_satisfiedInGreatAncestor() {
+    ImmutableList.Builder<JavaFileObject> filesToCompile = ImmutableList.builder();
+    createAncillaryClasses(filesToCompile, "MissingInLeaf");
     filesToCompile.add(
         JavaFileObjects.forSourceLines(
-            "test.Child",
+            "test.Leaf",
             "package test;",
             "",
             "import dagger.Subcomponent;",
             "",
-            "@Subcomponent(modules = ChildModule.class)",
-            "interface Child {",
-            "  Grandchild grandchild();",
-            "}"));
-
-    filesToCompile.add(
+            "@Subcomponent",
+            "interface Leaf {",
+            "  DependsOnMissingBinding dependsOnMissingBinding();",
+            "}"),
         JavaFileObjects.forSourceLines(
-            "test.ChildModule",
+            "test.DependsOnMissingBinding",
+            "package test;",
+            "",
+            "import javax.inject.Inject;",
+            "",
+            "class DependsOnMissingBinding {",
+            "  @Inject DependsOnMissingBinding(MissingInLeaf missing) {}",
+            "}"),
+        JavaFileObjects.forSourceLines(
+            "test.Ancestor",
+            "package test;",
+            "",
+            "import dagger.Subcomponent;",
+            "",
+            "@Subcomponent",
+            "interface Ancestor {",
+            "  Leaf leaf();",
+            "}"),
+        JavaFileObjects.forSourceLines(
+            "test.GreatAncestor",
+            "package test;",
+            "",
+            "import dagger.Subcomponent;",
+            "",
+            "@Subcomponent(modules = SatisfiesMissingBindingModule.class)",
+            "interface GreatAncestor {",
+            "  Ancestor ancestor();",
+            "}"),
+        JavaFileObjects.forSourceLines(
+            "test.SatisfiesMissingBindingModule",
             "package test;",
             "",
             "import dagger.Module;",
             "import dagger.Provides;",
             "",
             "@Module",
-            "class ChildModule {",
-            "  @Provides static InChild provideInChild() { return new InChild(); }",
-            "  @Provides static NonComponentMethodInChild provideNonComponentMethodInChild() {",
-            "      return new NonComponentMethodInChild();",
-            "  }",
+            "class SatisfiesMissingBindingModule {",
+            "  @Provides",
+            "  static MissingInLeaf satisfy() { return new MissingInLeaf(); }",
             "}"));
-
-    JavaFileObject generatedChild =
+    // DaggerLeaf+DaggerAncestor generated types are ignored - they're not the focus of this test
+    // and are tested elsewhere
+    JavaFileObject generatedGreatAncestor =
         JavaFileObjects.forSourceLines(
-            "test.DaggerChild",
+            "test.DaggerLeaf",
             "package test;",
+            "",
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "public abstract class DaggerChild implements Child {",
-            "  protected DaggerChild() {}",
-            "",
-            "  public abstract class GrandchildImpl extends DaggerGrandchild {",
-            "    protected GrandchildImpl() {",
-            "      super();",
-            "    }",
+            "public abstract class DaggerGreatAncestor implements GreatAncestor {",
+            "  protected DaggerGreatAncestor() {}",
             "",
-            "    @Override",
-            "    public NonComponentMethodInChild getNonComponentMethodInChild() {",
-            "      return ChildModule_ProvideNonComponentMethodInChildFactory",
-            "          .proxyProvideNonComponentMethodInChild();",
-            "    }",
+            "  public abstract class AncestorImpl extends DaggerAncestor {",
+            "    protected AncestorImpl() { super(); }",
             "",
-            "    public abstract class GreatGrandchildImpl extends",
-            "        DaggerGrandchild.GreatGrandchildImpl {",
-            "      protected GreatGrandchildImpl() {",
-            "        super();",
-            "      }",
+            "    public abstract class LeafImpl extends DaggerAncestor.LeafImpl {",
+            "      protected LeafImpl() { super(); }",
             "",
             "      @Override",
-            "      public InChild satisfiedByChild() {",
-            "        return ChildModule_ProvideInChildFactory.proxyProvideInChild();",
+            "      public MissingInLeaf getMissingInLeaf() {",
+            "        return SatisfiesMissingBindingModule_SatisfyFactory.proxySatisfy();",
             "      }",
             "    }",
             "  }",
             "}");
-
-    Compilation compilation =
-        daggerCompiler()
-            .withOptions(AHEAD_OF_TIME_SUBCOMPONENTS_MODE.javacopts())
-            .compile(filesToCompile.build());
+    Compilation compilation = compile(filesToCompile.build());
     assertThat(compilation).succeededWithoutWarnings();
     assertThat(compilation)
-        .generatedSourceFile("test.DaggerGreatGrandchild")
-        .hasSourceEquivalentTo(generatedGreatGrandchild);
-    assertThat(compilation)
-        .generatedSourceFile("test.DaggerGrandchild")
-        .hasSourceEquivalentTo(generatedGrandchild);
-    assertThat(compilation)
-        .generatedSourceFile("test.DaggerChild")
-        .hasSourceEquivalentTo(generatedChild);
+        .generatedSourceFile("test.DaggerGreatAncestor")
+        .hasSourceEquivalentTo(generatedGreatAncestor);
   }
 
   @Test
