diff --git a/java/dagger/internal/codegen/ComponentImplementation.java b/java/dagger/internal/codegen/ComponentImplementation.java
index 626e51213..d435e3086 100644
--- a/java/dagger/internal/codegen/ComponentImplementation.java
+++ b/java/dagger/internal/codegen/ComponentImplementation.java
@@ -27,6 +27,8 @@
 import static dagger.internal.codegen.ComponentCreatorKind.BUILDER;
 import static java.util.stream.Collectors.toList;
 import static javax.lang.model.element.Modifier.ABSTRACT;
+import static javax.lang.model.element.Modifier.FINAL;
+import static javax.lang.model.element.Modifier.PUBLIC;
 
 import com.google.auto.value.AutoValue;
 import com.google.common.base.Supplier;
@@ -170,6 +172,7 @@ static ConfigureInitializationMethod create(
     abstract ImmutableSet<ComponentRequirement> parameters();
   }
 
+  private final ComponentDescriptor componentDescriptor;
   private final BindingGraph graph;
   private final ClassName name;
   private final NestingKind nestingKind;
@@ -200,7 +203,8 @@ static ConfigureInitializationMethod create(
   private Optional<ConfigureInitializationMethod> configureInitializationMethod = Optional.empty();
   private final Map<ComponentRequirement, String> modifiableModuleMethods = new LinkedHashMap<>();
 
-  ComponentImplementation(
+  private ComponentImplementation(
+      ComponentDescriptor componentDescriptor,
       BindingGraph graph,
       ClassName name,
       NestingKind nestingKind,
@@ -208,6 +212,7 @@ static ConfigureInitializationMethod create(
       SubcomponentNames subcomponentNames,
       Modifier... modifiers) {
     checkName(name, nestingKind);
+    this.componentDescriptor = componentDescriptor;
     this.graph = graph;
     this.name = name;
     this.nestingKind = nestingKind;
@@ -217,17 +222,34 @@ static ConfigureInitializationMethod create(
     this.subcomponentNames = subcomponentNames;
   }
 
-  ComponentImplementation(
-      ComponentImplementation parent,
+  /** Returns a component implementation for a top-level component. */
+  static ComponentImplementation topLevelComponentImplementation(
+      BindingGraph graph,
+      ClassName name,
+      SubcomponentNames subcomponentNames) {
+    return new ComponentImplementation(
+        graph.componentDescriptor(),
+        graph,
+        name,
+        NestingKind.TOP_LEVEL,
+        Optional.empty(), // superclass implementation
+        subcomponentNames,
+        PUBLIC,
+        graph.componentDescriptor().isSubcomponent() ? ABSTRACT : FINAL);
+  }
+
+  /** Returns a component implementation that is a child of the current implementation. */
+  ComponentImplementation childComponentImplementation(
       BindingGraph graph,
       Optional<ComponentImplementation> superclassImplementation,
       Modifier... modifiers) {
-    this(
+    return new ComponentImplementation(
+        graph.componentDescriptor(),
         graph,
-        parent.getSubcomponentName(graph.componentDescriptor()),
+        getSubcomponentName(graph.componentDescriptor()),
         NestingKind.MEMBER,
         superclassImplementation,
-        parent.subcomponentNames,
+        subcomponentNames,
         modifiers);
   }
 
@@ -256,7 +278,7 @@ BindingGraph graph() {
 
   /** Returns the descriptor for the component being generated. */
   ComponentDescriptor componentDescriptor() {
-    return graph.componentDescriptor();
+    return componentDescriptor;
   }
 
   /** Returns the name of the component. */
diff --git a/java/dagger/internal/codegen/ComponentImplementationBuilder.java b/java/dagger/internal/codegen/ComponentImplementationBuilder.java
index a5198ba57..abd4342eb 100644
--- a/java/dagger/internal/codegen/ComponentImplementationBuilder.java
+++ b/java/dagger/internal/codegen/ComponentImplementationBuilder.java
@@ -364,8 +364,7 @@ private ComponentImplementation buildChildImplementation(BindingGraph childGraph
 
   /** Creates an inner abstract subcomponent implementation. */
   private ComponentImplementation abstractInnerSubcomponent(BindingGraph childGraph) {
-    return new ComponentImplementation(
-        componentImplementation,
+    return componentImplementation.childComponentImplementation(
         childGraph,
         Optional.of(
             componentImplementationFactory.findChildSuperclassImplementation(
@@ -376,8 +375,7 @@ private ComponentImplementation abstractInnerSubcomponent(BindingGraph childGrap
 
   /** Creates a concrete inner subcomponent implementation. */
   private ComponentImplementation concreteSubcomponent(BindingGraph childGraph) {
-    return new ComponentImplementation(
-        componentImplementation,
+    return componentImplementation.childComponentImplementation(
         childGraph,
         Optional.empty(), // superclassImplementation
         PRIVATE,
diff --git a/java/dagger/internal/codegen/ComponentImplementationFactory.java b/java/dagger/internal/codegen/ComponentImplementationFactory.java
index fac5ba9f4..5ecdac02d 100644
--- a/java/dagger/internal/codegen/ComponentImplementationFactory.java
+++ b/java/dagger/internal/codegen/ComponentImplementationFactory.java
@@ -19,17 +19,12 @@
 import static com.google.common.base.Preconditions.checkState;
 import static dagger.internal.codegen.ComponentGenerator.componentName;
 import static dagger.internal.codegen.Util.reentrantComputeIfAbsent;
-import static javax.lang.model.element.Modifier.ABSTRACT;
-import static javax.lang.model.element.Modifier.FINAL;
-import static javax.lang.model.element.Modifier.PUBLIC;
 
-import com.squareup.javapoet.ClassName;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Optional;
 import javax.inject.Inject;
 import javax.inject.Singleton;
-import javax.lang.model.element.NestingKind;
 import javax.lang.model.element.TypeElement;
 
 /** Factory for {@link ComponentImplementation}s. */
@@ -68,7 +63,10 @@ ComponentImplementation createComponentImplementation(BindingGraph bindingGraph)
 
   private ComponentImplementation createComponentImplementationUncached(BindingGraph bindingGraph) {
     ComponentImplementation componentImplementation =
-        topLevelImplementation(componentName(bindingGraph.componentTypeElement()), bindingGraph);
+        ComponentImplementation.topLevelComponentImplementation(
+            bindingGraph,
+            componentName(bindingGraph.componentTypeElement()),
+            new SubcomponentNames(bindingGraph, keyFactory));
     // TODO(dpb): explore using optional bindings for the "parent" bindings
     CurrentImplementationSubcomponent currentImplementationSubcomponent =
         topLevelImplementationComponentBuilder
@@ -94,18 +92,6 @@ private ComponentImplementation createComponentImplementationUncached(BindingGra
     }
   }
 
-  /** Creates a root component or top-level abstract subcomponent implementation. */
-  ComponentImplementation topLevelImplementation(ClassName name, BindingGraph graph) {
-    return new ComponentImplementation(
-        graph,
-        name,
-        NestingKind.TOP_LEVEL,
-        Optional.empty(), // superclassImplementation
-        new SubcomponentNames(graph, keyFactory),
-        PUBLIC,
-        graph.componentDescriptor().isSubcomponent() ? ABSTRACT : FINAL);
-  }
-
   /** Returns the superclass of the child nested within a superclass of the parent component. */
   ComponentImplementation findChildSuperclassImplementation(
       ComponentDescriptor child, ComponentImplementation parentImplementation) {
