diff --git a/multibindings.md b/multibindings.md
index 02b473434..92b85d49f 100644
--- a/multibindings.md
+++ b/multibindings.md
@@ -88,7 +88,7 @@ class MyModuleC {
 @Module
 class MyModuleD {
   @Provides
-  static FooSetUser provideFooSetUser(@MyQualifier Set<Foo> foos) { … }
+  static FooSetUser provideFooSetUser(@MyQualifier Set<Foo> foos) { ... }
 }
 ```
 
@@ -261,16 +261,16 @@ transform into a non-multibound map.
 @Module
 class MyModule {
   @Provides @IntoSet
-  static Map.Entry<Foo, Bar> entryOne(…) {
-    Foo key = …;
-    Bar value = …;
+  static Map.Entry<Foo, Bar> entryOne(...) {
+    Foo key = ...;
+    Bar value = ...;
     return new SimpleImmutableEntry(key, value);
   }
 
   @Provides @IntoSet
-  static Map.Entry<Foo, Bar> entryTwo(…) {
-    Foo key = …;
-    Bar value = …;
+  static Map.Entry<Foo, Bar> entryTwo(...) {
+    Foo key = ...;
+    Bar value = ...;
     return new SimpleImmutableEntry(key, value);
   }
 }
@@ -299,7 +299,7 @@ class MyModule {
   @Provides @IntoSet
   static Map.Entry<Foo, Provider<Bar>> entry(
       Provider<BarSubclass> barSubclassProvider) {
-    Foo key = …;
+    Foo key = ...;
     return new SimpleImmutableEntry(key, barSubclassProvider);
   }
 }
@@ -309,7 +309,7 @@ class MyProviderMapModule {
   @Provides
   static Map<Foo, Provider<Bar>> fooBarProviderMap(
       Set<Map.Entry<Foo, Provider<Bar>>> entries) {
-    return …;
+    return ...;
   }
 }
 ```
diff --git a/producers.md b/producers.md
index f91c38b92..8341b3aa5 100644
--- a/producers.md
+++ b/producers.md
@@ -157,12 +157,12 @@ in [ordinary Dagger](multibindings.md). For example:
 ```java
 @ProducerModule
 final class UserDataModule {
-  @Produces @IntoSet static ListenableFuture<Data> standardData(…) { … }
-  @Produces @IntoSet static ListenableFuture<Data> extraData(…) { … }
-  @Produces @IntoSet static Data synchronousData(…) { … }
-  @Produces @ElementsIntoSet static Set<ListenableFuture<Data>> rest(…) { … }
+  @Produces @IntoSet static ListenableFuture<Data> standardData(...) { ... }
+  @Produces @IntoSet static ListenableFuture<Data> extraData(...) { ... }
+  @Produces @IntoSet static Data synchronousData(...) { ... }
+  @Produces @ElementsIntoSet static Set<ListenableFuture<Data>> rest(...) { ... }
 
-  @Produces static … collect(Set<Data> data) { … }
+  @Produces static ... collect(Set<Data> data) { ... }
 }
 ```
 
@@ -182,10 +182,10 @@ Map multibindings are similar to set multibindings:
 @ProducerModule
 final class DispatchModule {
   @Produces @IntoMap @DispatchPath("/user")
-  static ListenableFuture<Html> dispatchUser(…) { … }
+  static ListenableFuture<Html> dispatchUser(...) { ... }
 
   @Produces @IntoMap @DispatchPath("/settings")
-  static ListenableFuture<Html> dispatchSettings(…) { … }
+  static ListenableFuture<Html> dispatchSettings(...) { ... }
 
   @Produces
   static ListenableFuture<Html> dispatch(
@@ -237,7 +237,8 @@ interface RequestComponent {
 
 @ProducerModule
 final class UserDataModule {
-  @Produces static ListenableFuture<UserData> userData(Request request, …) { … }
+  @Produces static ListenableFuture<UserData> userData(
+      Request request, ...) { ... }
 }
 
 @ProductionComponent(
diff --git a/subcomponents.md b/subcomponents.md
index 734c74ffa..eecb36836 100644
--- a/subcomponents.md
+++ b/subcomponents.md
@@ -123,13 +123,13 @@ interface RootComponent {
 }
 
 @RootScope @Subcomponent
-interface BadChildComponent {…}
+interface BadChildComponent {...}
 
 @ChildScope @Subcomponent
-interface SiblingComponentOne {…}
+interface SiblingComponentOne {...}
 
 @ChildScope @Subcomponent
-interface SiblingComponentTwo {…}
+interface SiblingComponentTwo {...}
 ```
 
 Because a subcomponent is created from within its parent, its lifetime is
@@ -156,10 +156,10 @@ interface SessionComponent {
 }
 
 @RequestScope @Subcomponent
-interface FooRequestComponent {…}
+interface FooRequestComponent {...}
 
 @RequestScope @Subcomponent
-interface BarRequestComponent {…}
+interface BarRequestComponent {...}
 ```
 
 ## Subcomponents for encapsulation
@@ -325,16 +325,16 @@ method defines a repeated module as a parameter. (The former cannot be checked
 at compile time, and is thus a runtime error.)
 
 ```java
-@Component(modules = {RepeatedModule.class, …})
+@Component(modules = {RepeatedModule.class, ...})
 interface ComponentOne {
   ComponentTwo componentTwo(RepeatedModule repeatedModule); // COMPILE ERROR!
   ComponentThree.Builder componentThreeBuilder();
 }
 
-@Subcomponent(modules = {RepeatedModule.class, …})
-interface ComponentTwo { … }
+@Subcomponent(modules = {RepeatedModule.class, ...})
+interface ComponentTwo { ... }
 
-@Subcomponent(modules = {RepeatedModule.class, …})
+@Subcomponent(modules = {RepeatedModule.class, ...})
 interface ComponentThree {
   @Subcomponent.Builder
   interface Builder {
