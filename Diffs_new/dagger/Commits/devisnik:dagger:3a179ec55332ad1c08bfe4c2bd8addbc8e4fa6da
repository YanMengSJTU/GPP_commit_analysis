diff --git a/BUILD b/BUILD
index 9dcfc2168..a526844fa 100644
--- a/BUILD
+++ b/BUILD
@@ -27,7 +27,7 @@ py_test(
 
 java_library(
     name = "dagger_with_compiler",
-    exported_plugins = ["//compiler:component-codegen"],
+    exported_plugins = ["//java/dagger/internal/codegen:component-codegen"],
     exports = ["//core"],
 )
 
@@ -59,7 +59,7 @@ jarjar_library(
     name = "shaded_compiler",
     rules_file = "shade_rules.txt",
     deps = [
-        "//compiler",
+        "//java/dagger/internal/codegen",
         "@com_google_auto_auto_common//jar",
     ],
 )
diff --git a/WORKSPACE b/WORKSPACE
index 598f2c3cb..61e33ef0a 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -143,6 +143,12 @@ maven_jar(
     sha1 = "9d591b5a66eda81f0b88cf1c748ab8853d99b18b",
 )
 
+maven_jar(
+    name = "com_google_truth_extensions_truth_java8_extension",
+    artifact = "com.google.truth.extensions:truth-java8-extension:0.30",
+    sha1 = "f3bb5e49001a9b575bcdef9aa8417b6d1ef35509",
+)
+
 maven_jar(
     name = "com_squareup_javapoet",
     artifact = "com.squareup:javapoet:1.7.0",
diff --git a/compiler/src/main/java/dagger/internal/codegen/ValidationType.java b/compiler/src/main/java/dagger/internal/codegen/ValidationType.java
deleted file mode 100644
index eb9f27109..000000000
--- a/compiler/src/main/java/dagger/internal/codegen/ValidationType.java
+++ /dev/null
@@ -1,41 +0,0 @@
-/*
-* Copyright (C) 2015 The Dagger Authors.
-*
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-* http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
-
-package dagger.internal.codegen;
-
-import java.util.Optional;
-import javax.tools.Diagnostic;
-
-/**
- * Allows options to control how component process validates things such as scope cycles
- * or nullability.
- */
-enum ValidationType {
-  ERROR,
-  WARNING,
-  NONE;
-
-  Optional<Diagnostic.Kind> diagnosticKind() {
-    switch (this) {
-      case ERROR:
-        return Optional.of(Diagnostic.Kind.ERROR);
-      case WARNING:
-        return Optional.of(Diagnostic.Kind.WARNING);
-      default:
-        return Optional.empty();
-    }
-  }
-}
diff --git a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java b/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
deleted file mode 100644
index 67beb03dd..000000000
--- a/compiler/src/test/java/dagger/tests/integration/operation/PrimitiveInjectionTest.java
+++ /dev/null
@@ -1,139 +0,0 @@
-/**
- * Copyright (C) 2013 The Dagger Authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package dagger.tests.integration.operation;
-
-import static com.google.common.truth.Truth.assertAbout;
-import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
-import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
-import static java.util.Arrays.asList;
-
-import com.google.testing.compile.JavaFileObjects;
-import dagger.internal.codegen.ComponentProcessor;
-import javax.tools.JavaFileObject;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.JUnit4;
-
-@RunWith(JUnit4.class)
-public final class PrimitiveInjectionTest {
-
-  // TODO(cgruber): Use @test.ForTest to qualify primitives once qualifier equivalence is working.
-  /*
-  JavaFileObject annotation = JavaFileObjects.forSourceLines("test.ForTest",
-      "package test;",
-      "import javax.inject.Qualifier;",
-      "@Qualifier",
-      "public @interface ForTest {",
-      "}");
-  */
-
-  // TODO(cgruber): Expand test to support more primitive types when b/15512877 is fixed.
-  JavaFileObject primitiveInjectable = JavaFileObjects.forSourceLines("test.PrimitiveInjectable",
-      "package test;",
-      "import javax.inject.Inject;",
-      "class PrimitiveInjectable {",
-      "  @Inject PrimitiveInjectable(int ignored) {}",
-      "}");
-
-  JavaFileObject primitiveModule =
-      JavaFileObjects.forSourceLines(
-          "test.PrimitiveModule",
-          "package test;",
-          "import dagger.Module;",
-          "import dagger.Provides;",
-          "@Module",
-          "class PrimitiveModule {",
-          "  @Provides static int primitiveInt() { return Integer.MAX_VALUE; }",
-          "}");
-
-  JavaFileObject component = JavaFileObjects.forSourceLines("test.PrimitiveComponent",
-      "package test;",
-      "import dagger.Component;",
-      "import dagger.Provides;",
-      "@Component(modules = PrimitiveModule.class)",
-      "interface PrimitiveComponent {",
-      "  int primitiveInt();",
-      "  PrimitiveInjectable primitiveInjectable();",
-      "}");
-
-  JavaFileObject expectedComponent =
-      JavaFileObjects.forSourceLines(
-          "test.DaggerPrimitiveComponent",
-          "package test;",
-          "",
-          "import dagger.internal.Preconditions;",
-          "import javax.annotation.Generated;",
-          "import javax.inject.Provider;",
-          "",
-          GENERATED_ANNOTATION,
-          "public final class DaggerPrimitiveComponent implements PrimitiveComponent {",
-          "  private Provider<PrimitiveInjectable> primitiveInjectableProvider;",
-          "",
-          "  private DaggerPrimitiveComponent(Builder builder) {",
-          "    assert builder != null;",
-          "    initialize(builder);",
-          "  }",
-          "",
-          "  public static Builder builder() {",
-          "    return new Builder();",
-          "  }",
-          "",
-          "  public static PrimitiveComponent create() {",
-          "    return new Builder().build();",
-          "  }",
-          "",
-          "  @SuppressWarnings(\"unchecked\")",
-          "  private void initialize(final Builder builder) {",
-          "    this.primitiveInjectableProvider = PrimitiveInjectable_Factory.create(",
-          "        PrimitiveModule_PrimitiveIntFactory.create());",
-          "  }",
-          "",
-          "  @Override",
-          "  public int primitiveInt() {",
-          "    return PrimitiveModule.primitiveInt();",
-          "  }",
-          "",
-          "  @Override",
-          "  public PrimitiveInjectable primitiveInjectable() {",
-          "    return new PrimitiveInjectable(PrimitiveModule.primitiveInt());",
-          "  }",
-          "",
-          "  public static final class Builder {",
-          "",
-          "    private Builder() {}",
-          "",
-          "    public PrimitiveComponent build() {",
-          "      return new DaggerPrimitiveComponent(this);",
-          "    }",
-          "",
-          "    @Deprecated",
-          "    public Builder primitiveModule(PrimitiveModule primitiveModule) {",
-          "      Preconditions.checkNotNull(primitiveModule);",
-          "      return this;",
-          "    }",
-          "  }",
-          "}");
-
-  @Test public void primitiveArrayTypesAllInjected() {
-    assertAbout(javaSources())
-        .that(asList(component, primitiveInjectable, primitiveModule))
-        .processedWith(new ComponentProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(expectedComponent);
-  }
-}
diff --git a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java b/java/dagger/internal/codegen/AbstractComponentWriter.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
rename to java/dagger/internal/codegen/AbstractComponentWriter.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/Accessibility.java b/java/dagger/internal/codegen/Accessibility.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/Accessibility.java
rename to java/dagger/internal/codegen/Accessibility.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/AnnotationCreatorGenerator.java b/java/dagger/internal/codegen/AnnotationCreatorGenerator.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/AnnotationCreatorGenerator.java
rename to java/dagger/internal/codegen/AnnotationCreatorGenerator.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/AnnotationExpression.java b/java/dagger/internal/codegen/AnnotationExpression.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/AnnotationExpression.java
rename to java/dagger/internal/codegen/AnnotationExpression.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/AnnotationSpecs.java b/java/dagger/internal/codegen/AnnotationSpecs.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/AnnotationSpecs.java
rename to java/dagger/internal/codegen/AnnotationSpecs.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/AnyBindingMethodValidator.java b/java/dagger/internal/codegen/AnyBindingMethodValidator.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/AnyBindingMethodValidator.java
rename to java/dagger/internal/codegen/AnyBindingMethodValidator.java
diff --git a/compiler/BUILD b/java/dagger/internal/codegen/BUILD
similarity index 56%
rename from compiler/BUILD
rename to java/dagger/internal/codegen/BUILD
index 5297ac105..1f622da9f 100644
--- a/compiler/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -19,15 +19,15 @@ package(default_visibility = ["//:src"])
 
 load("//:build_defs.bzl", "DOCLINT_HTML_AND_SYNTAX", "DOCLINT_REFERENCES")
 
-COMPILER_SRCS = glob(
-    ["src/main/java/**/*.java"],
+CODEGEN_SRCS = glob(
+    ["*.java"],
 )
 
-COMPILER_PLUGINS = [
+CODEGEN_PLUGINS = [
     # TODO(cgruber): Enable Beta checker.
 ]
 
-COMPILER_SHARED_DEPS = [
+CODEGEN_SHARED_DEPS = [
     "//third_party:auto_service",
     "//third_party:auto_value",
     "//third_party:auto_common",
@@ -42,11 +42,11 @@ COMPILER_SHARED_DEPS = [
 ]
 
 java_library(
-    name = "compiler",
-    srcs = COMPILER_SRCS,
+    name = "codegen",
+    srcs = CODEGEN_SRCS,
     javacopts = DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
-    plugins = COMPILER_PLUGINS,
-    deps = COMPILER_SHARED_DEPS + [
+    plugins = CODEGEN_PLUGINS,
+    deps = CODEGEN_SHARED_DEPS + [
         "//third_party:guava",
     ],
 )
@@ -54,50 +54,15 @@ java_library(
 load("//tools:javadoc.bzl", "javadoc_library")
 
 javadoc_library(
-    name = "compiler-javadoc",
-    srcs = COMPILER_SRCS,
+    name = "codegen-javadoc",
+    srcs = CODEGEN_SRCS,
     root_packages = ["dagger.internal.codegen"],
-    deps = [":compiler"],
+    deps = [":codegen"],
 )
 
 java_plugin(
     name = "component-codegen",
     generates_api = 1,
     processor_class = "dagger.internal.codegen.ComponentProcessor",
-    deps = [":compiler"],
-)
-
-load("//:test_defs.bzl", "GenJavaTests")
-
-GenJavaTests(
-    name = "compiler_tests",
-    srcs = glob(["src/test/java/**/*.java"]),
-    javacopts = DOCLINT_HTML_AND_SYNTAX,
-    plugins = [":component-codegen"],
-    deps = [
-        ":compiler",
-        "//core",
-        "//producers",
-        "//third_party:auto_common",
-        "//third_party:auto_value",
-        "//third_party:compile_testing",
-        "//third_party:guava",
-        "//third_party:javapoet",
-        "//third_party:jsr330_inject",
-        "//third_party:junit",
-        "//third_party:mockito",
-        "//third_party:truth",
-    ],
-)
-
-test_suite(name = "AllTests")
-
-test_suite(
-    name = "UnitAndFunctionalTests",
-    tests = [
-        ":AllTests",
-        "//compiler/src/it/functional-tests:AllTests",
-        "//compiler/src/it/producers-functional-tests:AllTests",
-        "//compiler/src/it/tck:AllTests",
-    ],
+    deps = [":codegen"],
 )
diff --git a/compiler/src/main/java/dagger/internal/codegen/Binding.java b/java/dagger/internal/codegen/Binding.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/Binding.java
rename to java/dagger/internal/codegen/Binding.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingDeclaration.java b/java/dagger/internal/codegen/BindingDeclaration.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/BindingDeclaration.java
rename to java/dagger/internal/codegen/BindingDeclaration.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingDeclarationFormatter.java b/java/dagger/internal/codegen/BindingDeclarationFormatter.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/BindingDeclarationFormatter.java
rename to java/dagger/internal/codegen/BindingDeclarationFormatter.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java b/java/dagger/internal/codegen/BindingGraph.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
rename to java/dagger/internal/codegen/BindingGraph.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java b/java/dagger/internal/codegen/BindingGraphValidator.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/BindingGraphValidator.java
rename to java/dagger/internal/codegen/BindingGraphValidator.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingKey.java b/java/dagger/internal/codegen/BindingKey.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/BindingKey.java
rename to java/dagger/internal/codegen/BindingKey.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingMethodProcessingStep.java b/java/dagger/internal/codegen/BindingMethodProcessingStep.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/BindingMethodProcessingStep.java
rename to java/dagger/internal/codegen/BindingMethodProcessingStep.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingMethodValidator.java b/java/dagger/internal/codegen/BindingMethodValidator.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/BindingMethodValidator.java
rename to java/dagger/internal/codegen/BindingMethodValidator.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingType.java b/java/dagger/internal/codegen/BindingType.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/BindingType.java
rename to java/dagger/internal/codegen/BindingType.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingTypeMapper.java b/java/dagger/internal/codegen/BindingTypeMapper.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/BindingTypeMapper.java
rename to java/dagger/internal/codegen/BindingTypeMapper.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingVariableNamer.java b/java/dagger/internal/codegen/BindingVariableNamer.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/BindingVariableNamer.java
rename to java/dagger/internal/codegen/BindingVariableNamer.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindsInstanceProcessingStep.java b/java/dagger/internal/codegen/BindsInstanceProcessingStep.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/BindsInstanceProcessingStep.java
rename to java/dagger/internal/codegen/BindsInstanceProcessingStep.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindsMethodValidator.java b/java/dagger/internal/codegen/BindsMethodValidator.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/BindsMethodValidator.java
rename to java/dagger/internal/codegen/BindsMethodValidator.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/BindsOptionalOfMethodValidator.java b/java/dagger/internal/codegen/BindsOptionalOfMethodValidator.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/BindsOptionalOfMethodValidator.java
rename to java/dagger/internal/codegen/BindsOptionalOfMethodValidator.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/BuilderValidator.java b/java/dagger/internal/codegen/BuilderValidator.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/BuilderValidator.java
rename to java/dagger/internal/codegen/BuilderValidator.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/CanReleaseReferencesProcessingStep.java b/java/dagger/internal/codegen/CanReleaseReferencesProcessingStep.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/CanReleaseReferencesProcessingStep.java
rename to java/dagger/internal/codegen/CanReleaseReferencesProcessingStep.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/CanReleaseReferencesValidator.java b/java/dagger/internal/codegen/CanReleaseReferencesValidator.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/CanReleaseReferencesValidator.java
rename to java/dagger/internal/codegen/CanReleaseReferencesValidator.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/CodeBlocks.java b/java/dagger/internal/codegen/CodeBlocks.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/CodeBlocks.java
rename to java/dagger/internal/codegen/CodeBlocks.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/CompilerOptions.java b/java/dagger/internal/codegen/CompilerOptions.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/CompilerOptions.java
rename to java/dagger/internal/codegen/CompilerOptions.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java b/java/dagger/internal/codegen/ComponentDescriptor.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ComponentDescriptor.java
rename to java/dagger/internal/codegen/ComponentDescriptor.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/java/dagger/internal/codegen/ComponentGenerator.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
rename to java/dagger/internal/codegen/ComponentGenerator.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentHierarchyValidator.java b/java/dagger/internal/codegen/ComponentHierarchyValidator.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ComponentHierarchyValidator.java
rename to java/dagger/internal/codegen/ComponentHierarchyValidator.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessingStep.java b/java/dagger/internal/codegen/ComponentProcessingStep.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ComponentProcessingStep.java
rename to java/dagger/internal/codegen/ComponentProcessingStep.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java b/java/dagger/internal/codegen/ComponentProcessor.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
rename to java/dagger/internal/codegen/ComponentProcessor.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentRequirement.java b/java/dagger/internal/codegen/ComponentRequirement.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ComponentRequirement.java
rename to java/dagger/internal/codegen/ComponentRequirement.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentTreeTraverser.java b/java/dagger/internal/codegen/ComponentTreeTraverser.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ComponentTreeTraverser.java
rename to java/dagger/internal/codegen/ComponentTreeTraverser.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentValidator.java b/java/dagger/internal/codegen/ComponentValidator.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ComponentValidator.java
rename to java/dagger/internal/codegen/ComponentValidator.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentWriter.java b/java/dagger/internal/codegen/ComponentWriter.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ComponentWriter.java
rename to java/dagger/internal/codegen/ComponentWriter.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ConfigurationAnnotations.java b/java/dagger/internal/codegen/ConfigurationAnnotations.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ConfigurationAnnotations.java
rename to java/dagger/internal/codegen/ConfigurationAnnotations.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ContributionBinding.java b/java/dagger/internal/codegen/ContributionBinding.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ContributionBinding.java
rename to java/dagger/internal/codegen/ContributionBinding.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ContributionType.java b/java/dagger/internal/codegen/ContributionType.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ContributionType.java
rename to java/dagger/internal/codegen/ContributionType.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/DaggerElements.java b/java/dagger/internal/codegen/DaggerElements.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/DaggerElements.java
rename to java/dagger/internal/codegen/DaggerElements.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/DaggerTypes.java b/java/dagger/internal/codegen/DaggerTypes.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/DaggerTypes.java
rename to java/dagger/internal/codegen/DaggerTypes.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/DelegateDeclaration.java b/java/dagger/internal/codegen/DelegateDeclaration.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/DelegateDeclaration.java
rename to java/dagger/internal/codegen/DelegateDeclaration.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java b/java/dagger/internal/codegen/DependencyRequest.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/DependencyRequest.java
rename to java/dagger/internal/codegen/DependencyRequest.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/DependencyRequestFormatter.java b/java/dagger/internal/codegen/DependencyRequestFormatter.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/DependencyRequestFormatter.java
rename to java/dagger/internal/codegen/DependencyRequestFormatter.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/DependencyVariableNamer.java b/java/dagger/internal/codegen/DependencyVariableNamer.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/DependencyVariableNamer.java
rename to java/dagger/internal/codegen/DependencyVariableNamer.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ErrorMessages.java b/java/dagger/internal/codegen/ErrorMessages.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ErrorMessages.java
rename to java/dagger/internal/codegen/ErrorMessages.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java b/java/dagger/internal/codegen/FactoryGenerator.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
rename to java/dagger/internal/codegen/FactoryGenerator.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/FeatureStatus.java b/java/dagger/internal/codegen/FeatureStatus.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/FeatureStatus.java
rename to java/dagger/internal/codegen/FeatureStatus.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ForReleasableReferencesValidator.java b/java/dagger/internal/codegen/ForReleasableReferencesValidator.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ForReleasableReferencesValidator.java
rename to java/dagger/internal/codegen/ForReleasableReferencesValidator.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/Formatter.java b/java/dagger/internal/codegen/Formatter.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/Formatter.java
rename to java/dagger/internal/codegen/Formatter.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/FrameworkDependency.java b/java/dagger/internal/codegen/FrameworkDependency.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/FrameworkDependency.java
rename to java/dagger/internal/codegen/FrameworkDependency.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/FrameworkField.java b/java/dagger/internal/codegen/FrameworkField.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/FrameworkField.java
rename to java/dagger/internal/codegen/FrameworkField.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/FrameworkType.java b/java/dagger/internal/codegen/FrameworkType.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/FrameworkType.java
rename to java/dagger/internal/codegen/FrameworkType.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/FrameworkTypes.java b/java/dagger/internal/codegen/FrameworkTypes.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/FrameworkTypes.java
rename to java/dagger/internal/codegen/FrameworkTypes.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/HasBindingMembers.java b/java/dagger/internal/codegen/HasBindingMembers.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/HasBindingMembers.java
rename to java/dagger/internal/codegen/HasBindingMembers.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectBindingRegistry.java b/java/dagger/internal/codegen/InjectBindingRegistry.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/InjectBindingRegistry.java
rename to java/dagger/internal/codegen/InjectBindingRegistry.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectProcessingStep.java b/java/dagger/internal/codegen/InjectProcessingStep.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/InjectProcessingStep.java
rename to java/dagger/internal/codegen/InjectProcessingStep.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectValidator.java b/java/dagger/internal/codegen/InjectValidator.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/InjectValidator.java
rename to java/dagger/internal/codegen/InjectValidator.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/InjectionAnnotations.java b/java/dagger/internal/codegen/InjectionAnnotations.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/InjectionAnnotations.java
rename to java/dagger/internal/codegen/InjectionAnnotations.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/Key.java b/java/dagger/internal/codegen/Key.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/Key.java
rename to java/dagger/internal/codegen/Key.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/KeyFormatter.java b/java/dagger/internal/codegen/KeyFormatter.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/KeyFormatter.java
rename to java/dagger/internal/codegen/KeyFormatter.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/MapKeyProcessingStep.java b/java/dagger/internal/codegen/MapKeyProcessingStep.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/MapKeyProcessingStep.java
rename to java/dagger/internal/codegen/MapKeyProcessingStep.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/MapKeyValidator.java b/java/dagger/internal/codegen/MapKeyValidator.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/MapKeyValidator.java
rename to java/dagger/internal/codegen/MapKeyValidator.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/MapKeys.java b/java/dagger/internal/codegen/MapKeys.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/MapKeys.java
rename to java/dagger/internal/codegen/MapKeys.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/MapType.java b/java/dagger/internal/codegen/MapType.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/MapType.java
rename to java/dagger/internal/codegen/MapType.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/MemberSelect.java b/java/dagger/internal/codegen/MemberSelect.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/MemberSelect.java
rename to java/dagger/internal/codegen/MemberSelect.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java b/java/dagger/internal/codegen/MembersInjectionBinding.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java
rename to java/dagger/internal/codegen/MembersInjectionBinding.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java b/java/dagger/internal/codegen/MembersInjectorGenerator.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/MembersInjectorGenerator.java
rename to java/dagger/internal/codegen/MembersInjectorGenerator.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/MembersInjectorRequestFulfillment.java b/java/dagger/internal/codegen/MembersInjectorRequestFulfillment.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/MembersInjectorRequestFulfillment.java
rename to java/dagger/internal/codegen/MembersInjectorRequestFulfillment.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/MethodSignature.java b/java/dagger/internal/codegen/MethodSignature.java
similarity index 68%
rename from compiler/src/main/java/dagger/internal/codegen/MethodSignature.java
rename to java/dagger/internal/codegen/MethodSignature.java
index c510e091c..0c1fae7f6 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MethodSignature.java
+++ b/java/dagger/internal/codegen/MethodSignature.java
@@ -1,3 +1,19 @@
+/*
+ * Copyright (C) 2014 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
 package dagger.internal.codegen;
 
 import static com.google.common.base.Preconditions.checkNotNull;
diff --git a/compiler/src/main/java/dagger/internal/codegen/MethodSignatureFormatter.java b/java/dagger/internal/codegen/MethodSignatureFormatter.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/MethodSignatureFormatter.java
rename to java/dagger/internal/codegen/MethodSignatureFormatter.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/MissingBindingSuggestions.java b/java/dagger/internal/codegen/MissingBindingSuggestions.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/MissingBindingSuggestions.java
rename to java/dagger/internal/codegen/MissingBindingSuggestions.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ModuleDescriptor.java b/java/dagger/internal/codegen/ModuleDescriptor.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ModuleDescriptor.java
rename to java/dagger/internal/codegen/ModuleDescriptor.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ModuleProcessingStep.java b/java/dagger/internal/codegen/ModuleProcessingStep.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ModuleProcessingStep.java
rename to java/dagger/internal/codegen/ModuleProcessingStep.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ModuleValidator.java b/java/dagger/internal/codegen/ModuleValidator.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ModuleValidator.java
rename to java/dagger/internal/codegen/ModuleValidator.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleGenerator.java b/java/dagger/internal/codegen/MonitoringModuleGenerator.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/MonitoringModuleGenerator.java
rename to java/dagger/internal/codegen/MonitoringModuleGenerator.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/MonitoringModuleProcessingStep.java b/java/dagger/internal/codegen/MonitoringModuleProcessingStep.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/MonitoringModuleProcessingStep.java
rename to java/dagger/internal/codegen/MonitoringModuleProcessingStep.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/MoreAnnotationMirrors.java b/java/dagger/internal/codegen/MoreAnnotationMirrors.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/MoreAnnotationMirrors.java
rename to java/dagger/internal/codegen/MoreAnnotationMirrors.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/MoreAnnotationValues.java b/java/dagger/internal/codegen/MoreAnnotationValues.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/MoreAnnotationValues.java
rename to java/dagger/internal/codegen/MoreAnnotationValues.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/MultibindingAnnotations.java b/java/dagger/internal/codegen/MultibindingAnnotations.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/MultibindingAnnotations.java
rename to java/dagger/internal/codegen/MultibindingAnnotations.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/MultibindingAnnotationsProcessingStep.java b/java/dagger/internal/codegen/MultibindingAnnotationsProcessingStep.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/MultibindingAnnotationsProcessingStep.java
rename to java/dagger/internal/codegen/MultibindingAnnotationsProcessingStep.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/MultibindingDeclaration.java b/java/dagger/internal/codegen/MultibindingDeclaration.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/MultibindingDeclaration.java
rename to java/dagger/internal/codegen/MultibindingDeclaration.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/MultibindsMethodValidator.java b/java/dagger/internal/codegen/MultibindsMethodValidator.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/MultibindsMethodValidator.java
rename to java/dagger/internal/codegen/MultibindsMethodValidator.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/OptionalBindingDeclaration.java b/java/dagger/internal/codegen/OptionalBindingDeclaration.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/OptionalBindingDeclaration.java
rename to java/dagger/internal/codegen/OptionalBindingDeclaration.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/OptionalFactories.java b/java/dagger/internal/codegen/OptionalFactories.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/OptionalFactories.java
rename to java/dagger/internal/codegen/OptionalFactories.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/OptionalType.java b/java/dagger/internal/codegen/OptionalType.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/OptionalType.java
rename to java/dagger/internal/codegen/OptionalType.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/Optionals.java b/java/dagger/internal/codegen/Optionals.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/Optionals.java
rename to java/dagger/internal/codegen/Optionals.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java b/java/dagger/internal/codegen/ProducerFactoryGenerator.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ProducerFactoryGenerator.java
rename to java/dagger/internal/codegen/ProducerFactoryGenerator.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProducerFieldRequestFulfillment.java b/java/dagger/internal/codegen/ProducerFieldRequestFulfillment.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ProducerFieldRequestFulfillment.java
rename to java/dagger/internal/codegen/ProducerFieldRequestFulfillment.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProducesMethodValidator.java b/java/dagger/internal/codegen/ProducesMethodValidator.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ProducesMethodValidator.java
rename to java/dagger/internal/codegen/ProducesMethodValidator.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProductionBinding.java b/java/dagger/internal/codegen/ProductionBinding.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ProductionBinding.java
rename to java/dagger/internal/codegen/ProductionBinding.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProductionExecutorModuleGenerator.java b/java/dagger/internal/codegen/ProductionExecutorModuleGenerator.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ProductionExecutorModuleGenerator.java
rename to java/dagger/internal/codegen/ProductionExecutorModuleGenerator.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProductionExecutorModuleProcessingStep.java b/java/dagger/internal/codegen/ProductionExecutorModuleProcessingStep.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ProductionExecutorModuleProcessingStep.java
rename to java/dagger/internal/codegen/ProductionExecutorModuleProcessingStep.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProviderFieldRequestFulfillment.java b/java/dagger/internal/codegen/ProviderFieldRequestFulfillment.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ProviderFieldRequestFulfillment.java
rename to java/dagger/internal/codegen/ProviderFieldRequestFulfillment.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProvidesMethodValidator.java b/java/dagger/internal/codegen/ProvidesMethodValidator.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ProvidesMethodValidator.java
rename to java/dagger/internal/codegen/ProvidesMethodValidator.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java b/java/dagger/internal/codegen/ProvisionBinding.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java
rename to java/dagger/internal/codegen/ProvisionBinding.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/Proxies.java b/java/dagger/internal/codegen/Proxies.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/Proxies.java
rename to java/dagger/internal/codegen/Proxies.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/RequestFulfillment.java b/java/dagger/internal/codegen/RequestFulfillment.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/RequestFulfillment.java
rename to java/dagger/internal/codegen/RequestFulfillment.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/RequestFulfillmentRegistry.java b/java/dagger/internal/codegen/RequestFulfillmentRegistry.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/RequestFulfillmentRegistry.java
rename to java/dagger/internal/codegen/RequestFulfillmentRegistry.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java b/java/dagger/internal/codegen/ResolvedBindings.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ResolvedBindings.java
rename to java/dagger/internal/codegen/ResolvedBindings.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/Scope.java b/java/dagger/internal/codegen/Scope.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/Scope.java
rename to java/dagger/internal/codegen/Scope.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/SetType.java b/java/dagger/internal/codegen/SetType.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/SetType.java
rename to java/dagger/internal/codegen/SetType.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/SimpleAnnotationMirror.java b/java/dagger/internal/codegen/SimpleAnnotationMirror.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/SimpleAnnotationMirror.java
rename to java/dagger/internal/codegen/SimpleAnnotationMirror.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/SimpleMethodRequestFulfillment.java b/java/dagger/internal/codegen/SimpleMethodRequestFulfillment.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/SimpleMethodRequestFulfillment.java
rename to java/dagger/internal/codegen/SimpleMethodRequestFulfillment.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/SimpleTypeAnnotationValue.java b/java/dagger/internal/codegen/SimpleTypeAnnotationValue.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/SimpleTypeAnnotationValue.java
rename to java/dagger/internal/codegen/SimpleTypeAnnotationValue.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/SourceFileGenerationException.java b/java/dagger/internal/codegen/SourceFileGenerationException.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/SourceFileGenerationException.java
rename to java/dagger/internal/codegen/SourceFileGenerationException.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/SourceFileGenerator.java b/java/dagger/internal/codegen/SourceFileGenerator.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/SourceFileGenerator.java
rename to java/dagger/internal/codegen/SourceFileGenerator.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/SourceFiles.java b/java/dagger/internal/codegen/SourceFiles.java
similarity index 96%
rename from compiler/src/main/java/dagger/internal/codegen/SourceFiles.java
rename to java/dagger/internal/codegen/SourceFiles.java
index 3a8906faf..1d73fb369 100644
--- a/compiler/src/main/java/dagger/internal/codegen/SourceFiles.java
+++ b/java/dagger/internal/codegen/SourceFiles.java
@@ -1,15 +1,17 @@
 /*
  * Copyright (C) 2014 The Dagger Authors.
  *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
- * in compliance with the License. You may obtain a copy of the License at
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
  *
  * http://www.apache.org/licenses/LICENSE-2.0
  *
- * Unless required by applicable law or agreed to in writing, software distributed under the License
- * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
- * or implied. See the License for the specific language governing permissions and limitations under
- * the License.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 package dagger.internal.codegen;
diff --git a/compiler/src/main/java/dagger/internal/codegen/SubcomponentDeclaration.java b/java/dagger/internal/codegen/SubcomponentDeclaration.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/SubcomponentDeclaration.java
rename to java/dagger/internal/codegen/SubcomponentDeclaration.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/SubcomponentWriter.java b/java/dagger/internal/codegen/SubcomponentWriter.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/SubcomponentWriter.java
rename to java/dagger/internal/codegen/SubcomponentWriter.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/TypeNames.java b/java/dagger/internal/codegen/TypeNames.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/TypeNames.java
rename to java/dagger/internal/codegen/TypeNames.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/TypeSpecs.java b/java/dagger/internal/codegen/TypeSpecs.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/TypeSpecs.java
rename to java/dagger/internal/codegen/TypeSpecs.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/UniqueNameSet.java b/java/dagger/internal/codegen/UniqueNameSet.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/UniqueNameSet.java
rename to java/dagger/internal/codegen/UniqueNameSet.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/UnwrappedMapKeyGenerator.java b/java/dagger/internal/codegen/UnwrappedMapKeyGenerator.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/UnwrappedMapKeyGenerator.java
rename to java/dagger/internal/codegen/UnwrappedMapKeyGenerator.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/Util.java b/java/dagger/internal/codegen/Util.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/Util.java
rename to java/dagger/internal/codegen/Util.java
diff --git a/compiler/src/main/java/dagger/internal/codegen/ValidationReport.java b/java/dagger/internal/codegen/ValidationReport.java
similarity index 100%
rename from compiler/src/main/java/dagger/internal/codegen/ValidationReport.java
rename to java/dagger/internal/codegen/ValidationReport.java
diff --git a/java/dagger/internal/codegen/ValidationType.java b/java/dagger/internal/codegen/ValidationType.java
new file mode 100644
index 000000000..5d19dc17a
--- /dev/null
+++ b/java/dagger/internal/codegen/ValidationType.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.internal.codegen;
+
+import java.util.Optional;
+import javax.tools.Diagnostic;
+
+/**
+ * Allows options to control how component process validates things such as scope cycles
+ * or nullability.
+ */
+enum ValidationType {
+  ERROR,
+  WARNING,
+  NONE;
+
+  Optional<Diagnostic.Kind> diagnosticKind() {
+    switch (this) {
+      case ERROR:
+        return Optional.of(Diagnostic.Kind.ERROR);
+      case WARNING:
+        return Optional.of(Diagnostic.Kind.WARNING);
+      default:
+        return Optional.empty();
+    }
+  }
+}
diff --git a/compiler/src/main/java/dagger/internal/codegen/package-info.java b/java/dagger/internal/codegen/package-info.java
similarity index 99%
rename from compiler/src/main/java/dagger/internal/codegen/package-info.java
rename to java/dagger/internal/codegen/package-info.java
index 0490adb8a..a80cc02be 100644
--- a/compiler/src/main/java/dagger/internal/codegen/package-info.java
+++ b/java/dagger/internal/codegen/package-info.java
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 @CheckReturnValue
 package dagger.internal.codegen;
 
diff --git a/compiler/src/it/guava-functional-tests/BUILD b/javatests/dagger/functional/guava/BUILD
similarity index 59%
rename from compiler/src/it/guava-functional-tests/BUILD
rename to javatests/dagger/functional/guava/BUILD
index a94af72b1..d7c0c7389 100644
--- a/compiler/src/it/guava-functional-tests/BUILD
+++ b/javatests/dagger/functional/guava/BUILD
@@ -17,30 +17,14 @@
 
 package(default_visibility = ["//:src"])
 
-load("//:build_defs.bzl", "DOCLINT_HTML_AND_SYNTAX", "PRE_JAVA_8_INFERENCE_OPTS")
-
-java_library(
-    name = "code_under_test",
-    testonly = 1,
-    srcs = glob(["src/main/java/**/*.java"]),
-    javacopts = PRE_JAVA_8_INFERENCE_OPTS + DOCLINT_HTML_AND_SYNTAX,
-    deps = [
-        "//:dagger_with_compiler",
-        "//third_party:auto_value",
-        "//third_party:guava",
-        "//third_party:jsr330_inject",
-        "//third_party:junit",
-    ],
-)
-
+load("//:build_defs.bzl", "DOCLINT_HTML_AND_SYNTAX")
 load("//:test_defs.bzl", "GenJavaTests")
 
 GenJavaTests(
-    name = "guava_functional_tests",
-    srcs = glob(["src/test/java/**/*.java"]),
-    javacopts = PRE_JAVA_8_INFERENCE_OPTS + DOCLINT_HTML_AND_SYNTAX,
+    name = "guava_tests",
+    srcs = glob(["**/*.java"]),
+    javacopts = DOCLINT_HTML_AND_SYNTAX,
     deps = [
-        ":code_under_test",
         "//:dagger_with_compiler",
         "//third_party:auto_value",
         "//third_party:guava",
@@ -49,5 +33,3 @@ GenJavaTests(
         "//third_party:truth",
     ],
 )
-
-test_suite(name = "AllTests")
diff --git a/compiler/src/it/guava-functional-tests/src/main/java/test/optional/OptionalBindingComponents.java b/javatests/dagger/functional/guava/OptionalBindingComponents.java
similarity index 99%
rename from compiler/src/it/guava-functional-tests/src/main/java/test/optional/OptionalBindingComponents.java
rename to javatests/dagger/functional/guava/OptionalBindingComponents.java
index 33d6918b9..548b2bcc2 100644
--- a/compiler/src/it/guava-functional-tests/src/main/java/test/optional/OptionalBindingComponents.java
+++ b/javatests/dagger/functional/guava/OptionalBindingComponents.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.optional;
+package dagger.functional.guava;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
diff --git a/compiler/src/it/guava-functional-tests/src/test/java/test/optional/OptionalBindingComponentsAbsentTest.java b/javatests/dagger/functional/guava/OptionalBindingComponentsAbsentTest.java
similarity index 94%
rename from compiler/src/it/guava-functional-tests/src/test/java/test/optional/OptionalBindingComponentsAbsentTest.java
rename to javatests/dagger/functional/guava/OptionalBindingComponentsAbsentTest.java
index 491cf85e7..d563acea8 100644
--- a/compiler/src/it/guava-functional-tests/src/test/java/test/optional/OptionalBindingComponentsAbsentTest.java
+++ b/javatests/dagger/functional/guava/OptionalBindingComponentsAbsentTest.java
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package test.optional;
+package dagger.functional.guava;
 
 import static com.google.common.truth.Truth.assertThat;
 
+import dagger.functional.guava.OptionalBindingComponents.AbsentOptionalBindingComponent;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
-import test.optional.OptionalBindingComponents.AbsentOptionalBindingComponent;
 
 /** Tests for absent optional bindings. */
 @RunWith(JUnit4.class)
diff --git a/compiler/src/it/guava-functional-tests/src/test/java/test/optional/OptionalBindingComponentsPresentTest.java b/javatests/dagger/functional/guava/OptionalBindingComponentsPresentTest.java
similarity index 90%
rename from compiler/src/it/guava-functional-tests/src/test/java/test/optional/OptionalBindingComponentsPresentTest.java
rename to javatests/dagger/functional/guava/OptionalBindingComponentsPresentTest.java
index 448329092..cc0832a93 100644
--- a/compiler/src/it/guava-functional-tests/src/test/java/test/optional/OptionalBindingComponentsPresentTest.java
+++ b/javatests/dagger/functional/guava/OptionalBindingComponentsPresentTest.java
@@ -14,18 +14,18 @@
  * limitations under the License.
  */
 
-package test.optional;
+package dagger.functional.guava;
 
 import static com.google.common.truth.Truth.assertThat;
-import static test.optional.OptionalBindingComponents.Value.QUALIFIED_VALUE;
-import static test.optional.OptionalBindingComponents.Value.VALUE;
+import static dagger.functional.guava.OptionalBindingComponents.Value.QUALIFIED_VALUE;
+import static dagger.functional.guava.OptionalBindingComponents.Value.VALUE;
 
 import com.google.common.collect.ImmutableList;
+import dagger.functional.guava.OptionalBindingComponents.OptionalBindingComponent;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 import org.junit.runners.Parameterized.Parameters;
-import test.optional.OptionalBindingComponents.OptionalBindingComponent;
 
 /** Tests for present optional bindings. */
 @RunWith(Parameterized.class)
diff --git a/compiler/src/it/guava-functional-tests/src/main/java/test/optional/a/OptionalBindingComponentsWithInaccessibleTypes.java b/javatests/dagger/functional/guava/a/OptionalBindingComponentsWithInaccessibleTypes.java
similarity index 78%
rename from compiler/src/it/guava-functional-tests/src/main/java/test/optional/a/OptionalBindingComponentsWithInaccessibleTypes.java
rename to javatests/dagger/functional/guava/a/OptionalBindingComponentsWithInaccessibleTypes.java
index c3beaef79..28a67346c 100644
--- a/compiler/src/it/guava-functional-tests/src/main/java/test/optional/a/OptionalBindingComponentsWithInaccessibleTypes.java
+++ b/javatests/dagger/functional/guava/a/OptionalBindingComponentsWithInaccessibleTypes.java
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package test.optional.a;
+package dagger.functional.guava.a;
 
 import dagger.Component;
-import test.optional.OptionalBindingComponents.ConcreteBindingModule;
-import test.optional.OptionalBindingComponents.OptionalBindingComponent;
-import test.optional.OptionalBindingComponents.OptionalBindingModule;
+import dagger.functional.guava.OptionalBindingComponents.ConcreteBindingModule;
+import dagger.functional.guava.OptionalBindingComponents.OptionalBindingComponent;
+import dagger.functional.guava.OptionalBindingComponents.OptionalBindingModule;
 
 final class OptionalBindingComponentsWithInaccessibleTypes {
 
diff --git a/compiler/src/it/guava-functional-tests/src/test/java/test/optional/a/OptionalBindingComponentsWithInaccessibleTypesTest.java b/javatests/dagger/functional/guava/a/OptionalBindingComponentsWithInaccessibleTypesTest.java
similarity index 96%
rename from compiler/src/it/guava-functional-tests/src/test/java/test/optional/a/OptionalBindingComponentsWithInaccessibleTypesTest.java
rename to javatests/dagger/functional/guava/a/OptionalBindingComponentsWithInaccessibleTypesTest.java
index ed655022f..6be593cbd 100644
--- a/compiler/src/it/guava-functional-tests/src/test/java/test/optional/a/OptionalBindingComponentsWithInaccessibleTypesTest.java
+++ b/javatests/dagger/functional/guava/a/OptionalBindingComponentsWithInaccessibleTypesTest.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package test.optional.a;
+package dagger.functional.guava.a;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
diff --git a/javatests/dagger/functional/jdk8/BUILD b/javatests/dagger/functional/jdk8/BUILD
new file mode 100644
index 000000000..5cb4013bd
--- /dev/null
+++ b/javatests/dagger/functional/jdk8/BUILD
@@ -0,0 +1,36 @@
+# Copyright (C) 2017 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Description:
+#   Functional tests for Dagger that depend on Guava
+
+package(default_visibility = ["//:src"])
+
+load("//:build_defs.bzl", "DOCLINT_HTML_AND_SYNTAX")
+load("//:test_defs.bzl", "GenJavaTests")
+
+GenJavaTests(
+    name = "jdk8_tests",
+    srcs = glob(["**/*.java"]),
+    javacopts = DOCLINT_HTML_AND_SYNTAX,
+    test_only_deps = [
+        "//third_party:guava",
+        "//third_party:junit",
+        "//third_party:truth8",
+    ],
+    deps = [
+        "//:dagger_with_compiler",
+        "//third_party:auto_value",
+    ],
+)
diff --git a/javatests/dagger/functional/jdk8/OptionalBindingComponents.java b/javatests/dagger/functional/jdk8/OptionalBindingComponents.java
new file mode 100644
index 000000000..04fafa2bd
--- /dev/null
+++ b/javatests/dagger/functional/jdk8/OptionalBindingComponents.java
@@ -0,0 +1,133 @@
+/*
+ * Copyright (C) 2016 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional.jdk8;
+
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+import com.google.auto.value.AutoValue;
+import dagger.BindsOptionalOf;
+import dagger.Component;
+import dagger.Lazy;
+import dagger.Module;
+import dagger.Provides;
+import dagger.Subcomponent;
+import java.lang.annotation.Retention;
+import java.util.Optional;
+import javax.inject.Inject;
+import javax.inject.Provider;
+import javax.inject.Qualifier;
+
+/** Classes to support testing {@code BindsOptionalOf} functionality. */
+public final class OptionalBindingComponents {
+
+  /** A qualifier. */
+  @Qualifier
+  @Retention(RUNTIME)
+  public @interface SomeQualifier {}
+
+  /** A value object that contains various optionally-bound objects. */
+  @AutoValue
+  public abstract static class Values {
+    abstract Optional<Value> optionalInstance();
+
+    abstract Optional<Provider<Value>> optionalProvider();
+
+    abstract Optional<Lazy<Value>> optionalLazy();
+
+    abstract Optional<Provider<Lazy<Value>>> optionalLazyProvider();
+  }
+
+  // Default access so that it's inaccessible to OptionalBindingComponentsWithInaccessibleTypes.
+  enum Value {
+    VALUE,
+    QUALIFIED_VALUE
+  }
+
+  static final class InjectedThing {
+    @Inject
+    InjectedThing() {}
+  }
+
+  /** Binds optionals and {@link Values}. */
+  @Module
+  public abstract static class OptionalBindingModule {
+    @BindsOptionalOf
+    abstract Value value();
+
+    @BindsOptionalOf
+    @SomeQualifier abstract Value qualifiedValue();
+
+    // Valid because it's qualified.
+    @BindsOptionalOf
+    @SomeQualifier abstract InjectedThing qualifiedInjectedThing();
+
+    @Provides
+    static Values values(
+        Optional<Value> optionalInstance,
+        Optional<Provider<Value>> optionalProvider,
+        Optional<Lazy<Value>> optionalLazy,
+        Optional<Provider<Lazy<Value>>> optionalLazyProvider) {
+      return new AutoValue_OptionalBindingComponents_Values(
+          optionalInstance, optionalProvider, optionalLazy, optionalLazyProvider);
+    }
+
+    @Provides
+    @SomeQualifier
+    static Values qualifiedValues(
+        @SomeQualifier Optional<Value> optionalInstance,
+        @SomeQualifier Optional<Provider<Value>> optionalProvider,
+        @SomeQualifier Optional<Lazy<Value>> optionalLazy,
+        @SomeQualifier Optional<Provider<Lazy<Value>>> optionalLazyProvider) {
+      return new AutoValue_OptionalBindingComponents_Values(
+          optionalInstance, optionalProvider, optionalLazy, optionalLazyProvider);
+    }
+  }
+
+  /** Binds {@link Value}. */
+  @Module
+  public abstract static class ConcreteBindingModule {
+    /** @param cycle to demonstrate that optional {@link Provider} injection can break cycles */
+    @Provides
+    static Value value(Optional<Provider<Value>> cycle) {
+      return Value.VALUE;
+    }
+
+    @Provides
+    @SomeQualifier static Value qualifiedValue() {
+      return Value.QUALIFIED_VALUE;
+    }
+  }
+
+  /** Interface for components used to test optional bindings. */
+  public interface OptionalBindingComponent {
+    Values values();
+
+    @SomeQualifier
+    Values qualifiedValues();
+  }
+
+  @Component(modules = OptionalBindingModule.class)
+  interface EmptyOptionalBindingComponent extends OptionalBindingComponent {
+    PresentOptionalBindingSubcomponent presentChild();
+  }
+
+  @Component(modules = {OptionalBindingModule.class, ConcreteBindingModule.class})
+  interface PresentOptionalBindingComponent extends OptionalBindingComponent {}
+
+  @Subcomponent(modules = ConcreteBindingModule.class)
+  interface PresentOptionalBindingSubcomponent extends OptionalBindingComponent {}
+}
diff --git a/javatests/dagger/functional/jdk8/OptionalBindingComponentsEmptyTest.java b/javatests/dagger/functional/jdk8/OptionalBindingComponentsEmptyTest.java
new file mode 100644
index 000000000..21bdd3c85
--- /dev/null
+++ b/javatests/dagger/functional/jdk8/OptionalBindingComponentsEmptyTest.java
@@ -0,0 +1,76 @@
+/*
+ * Copyright (C) 2016 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional.jdk8;
+
+import static com.google.common.truth.Truth8.assertThat;
+
+import dagger.functional.jdk8.OptionalBindingComponents.EmptyOptionalBindingComponent;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+
+/** Tests for absent optional bindings. */
+@RunWith(JUnit4.class)
+public final class OptionalBindingComponentsEmptyTest {
+  private EmptyOptionalBindingComponent component;
+
+  @Before
+  public void setUp() {
+    component = DaggerOptionalBindingComponents_EmptyOptionalBindingComponent.create();
+  }
+
+  @Test
+  public void optional() {
+    assertThat(component.values().optionalInstance()).isEmpty();
+  }
+
+  @Test
+  public void optionalProvider() {
+    assertThat(component.values().optionalProvider()).isEmpty();
+  }
+
+  @Test
+  public void optionalLazy() {
+    assertThat(component.values().optionalLazy()).isEmpty();
+  }
+
+  @Test
+  public void optionalLazyProvider() {
+    assertThat(component.values().optionalLazyProvider()).isEmpty();
+  }
+
+  @Test
+  public void qualifiedOptional() {
+    assertThat(component.qualifiedValues().optionalInstance()).isEmpty();
+  }
+
+  @Test
+  public void qualifiedOptionalProvider() {
+    assertThat(component.qualifiedValues().optionalProvider()).isEmpty();
+  }
+
+  @Test
+  public void qualifiedOptionalLazy() {
+    assertThat(component.qualifiedValues().optionalLazy()).isEmpty();
+  }
+
+  @Test
+  public void qualifiedOptionalLazyProvider() {
+    assertThat(component.qualifiedValues().optionalLazyProvider()).isEmpty();
+  }
+}
diff --git a/javatests/dagger/functional/jdk8/OptionalBindingComponentsPresentTest.java b/javatests/dagger/functional/jdk8/OptionalBindingComponentsPresentTest.java
new file mode 100644
index 000000000..f2a52ad80
--- /dev/null
+++ b/javatests/dagger/functional/jdk8/OptionalBindingComponentsPresentTest.java
@@ -0,0 +1,86 @@
+/*
+ * Copyright (C) 2016 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional.jdk8;
+
+import static com.google.common.truth.Truth.assertThat;
+import static com.google.common.truth.Truth8.assertThat;
+import static dagger.functional.jdk8.OptionalBindingComponents.Value.QUALIFIED_VALUE;
+import static dagger.functional.jdk8.OptionalBindingComponents.Value.VALUE;
+
+import com.google.common.collect.ImmutableList;
+import dagger.functional.jdk8.OptionalBindingComponents.OptionalBindingComponent;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+import org.junit.runners.Parameterized.Parameters;
+
+/** Tests for present optional bindings. */
+@RunWith(Parameterized.class)
+public final class OptionalBindingComponentsPresentTest {
+
+  @Parameters(name = "{0}")
+  public static Iterable<Object[]> parameters() {
+    return ImmutableList.copyOf(
+        new Object[][] {
+          {DaggerOptionalBindingComponents_PresentOptionalBindingComponent.create()},
+          {DaggerOptionalBindingComponents_EmptyOptionalBindingComponent.create().presentChild()},
+        });
+  }
+
+  private final OptionalBindingComponent component;
+
+  public OptionalBindingComponentsPresentTest(OptionalBindingComponent component) {
+    this.component = component;
+  }
+
+  @Test
+  public void optionalProvider() {
+    assertThat(component.values().optionalProvider().get().get()).isEqualTo(VALUE);
+  }
+
+  @Test
+  public void optionalLazy() {
+    assertThat(component.values().optionalLazy().get().get()).isEqualTo(VALUE);
+  }
+
+  @Test
+  public void optionalLazyProvider() {
+    assertThat(component.values().optionalLazyProvider().get().get().get()).isEqualTo(VALUE);
+  }
+
+  @Test
+  public void qualifiedOptional() {
+    assertThat(component.qualifiedValues().optionalInstance()).hasValue(QUALIFIED_VALUE);
+  }
+
+  @Test
+  public void qualifiedOptionalProvider() {
+    assertThat(component.qualifiedValues().optionalProvider().get().get())
+        .isEqualTo(QUALIFIED_VALUE);
+  }
+
+  @Test
+  public void qualifiedOptionalLazy() {
+    assertThat(component.qualifiedValues().optionalLazy().get().get()).isEqualTo(QUALIFIED_VALUE);
+  }
+
+  @Test
+  public void qualifiedOptionalLazyProvider() {
+    assertThat(component.qualifiedValues().optionalLazyProvider().get().get().get())
+        .isEqualTo(QUALIFIED_VALUE);
+  }
+}
diff --git a/javatests/dagger/functional/jdk8/a/OptionalBindingComponentsWithInaccessibleTypes.java b/javatests/dagger/functional/jdk8/a/OptionalBindingComponentsWithInaccessibleTypes.java
new file mode 100644
index 000000000..e4abbb696
--- /dev/null
+++ b/javatests/dagger/functional/jdk8/a/OptionalBindingComponentsWithInaccessibleTypes.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2016 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional.jdk8.a;
+
+import dagger.Component;
+import dagger.functional.jdk8.OptionalBindingComponents.ConcreteBindingModule;
+import dagger.functional.jdk8.OptionalBindingComponents.OptionalBindingComponent;
+import dagger.functional.jdk8.OptionalBindingComponents.OptionalBindingModule;
+
+final class OptionalBindingComponentsWithInaccessibleTypes {
+
+  @Component(modules = OptionalBindingModule.class)
+  interface EmptyOptionalBindingComponent extends OptionalBindingComponent {}
+
+  @Component(modules = {OptionalBindingModule.class, ConcreteBindingModule.class})
+  interface PresentOptionalBindingComponent extends OptionalBindingComponent {}
+}
diff --git a/javatests/dagger/functional/jdk8/a/OptionalBindingComponentsWithInaccessibleTypesTest.java b/javatests/dagger/functional/jdk8/a/OptionalBindingComponentsWithInaccessibleTypesTest.java
new file mode 100644
index 000000000..8e2687a36
--- /dev/null
+++ b/javatests/dagger/functional/jdk8/a/OptionalBindingComponentsWithInaccessibleTypesTest.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2016 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional.jdk8.a;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+
+/** Tests for optional bindings that include types inaccessible to the component. */
+@RunWith(JUnit4.class)
+public class OptionalBindingComponentsWithInaccessibleTypesTest {
+  @Test
+  public void components() {
+    DaggerOptionalBindingComponentsWithInaccessibleTypes_EmptyOptionalBindingComponent.create();
+    DaggerOptionalBindingComponentsWithInaccessibleTypes_PresentOptionalBindingComponent.create();
+  }
+}
diff --git a/compiler/src/test/java/dagger/internal/codegen/AccessibilityTest.java b/javatests/dagger/internal/codegen/AccessibilityTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/AccessibilityTest.java
rename to javatests/dagger/internal/codegen/AccessibilityTest.java
diff --git a/javatests/dagger/internal/codegen/BUILD b/javatests/dagger/internal/codegen/BUILD
new file mode 100644
index 000000000..8d01c4864
--- /dev/null
+++ b/javatests/dagger/internal/codegen/BUILD
@@ -0,0 +1,41 @@
+# Copyright (C) 2017 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Description:
+#   Tests for the Dagger compiler/codegen
+
+package(default_visibility = ["//:src"])
+
+load("//:build_defs.bzl", "DOCLINT_HTML_AND_SYNTAX")
+load("//:test_defs.bzl", "GenJavaTests")
+
+GenJavaTests(
+    name = "compiler_tests",
+    srcs = glob(["*.java"]),
+    javacopts = DOCLINT_HTML_AND_SYNTAX,
+    deps = [
+        "//core",
+        "//java/dagger/internal/codegen",
+        "//producers",
+        "//third_party:auto_common",
+        "//third_party:auto_value",
+        "//third_party:compile_testing",
+        "//third_party:guava",
+        "//third_party:javapoet",
+        "//third_party:jsr330_inject",
+        "//third_party:junit",
+        "//third_party:mockito",
+        "//third_party:truth",
+    ],
+)
diff --git a/compiler/src/test/java/dagger/internal/codegen/BindingTypeMapperTest.java b/javatests/dagger/internal/codegen/BindingTypeMapperTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/BindingTypeMapperTest.java
rename to javatests/dagger/internal/codegen/BindingTypeMapperTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/BindsMethodValidatorTest.java b/javatests/dagger/internal/codegen/BindsMethodValidatorTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/BindsMethodValidatorTest.java
rename to javatests/dagger/internal/codegen/BindsMethodValidatorTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/BindsOptionalOfMethodValidatorTest.java b/javatests/dagger/internal/codegen/BindsOptionalOfMethodValidatorTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/BindsOptionalOfMethodValidatorTest.java
rename to javatests/dagger/internal/codegen/BindsOptionalOfMethodValidatorTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/CanReleaseReferencesValidatorTest.java b/javatests/dagger/internal/codegen/CanReleaseReferencesValidatorTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/CanReleaseReferencesValidatorTest.java
rename to javatests/dagger/internal/codegen/CanReleaseReferencesValidatorTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/CodeBlocksTest.java b/javatests/dagger/internal/codegen/CodeBlocksTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/CodeBlocksTest.java
rename to javatests/dagger/internal/codegen/CodeBlocksTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/Compilers.java b/javatests/dagger/internal/codegen/Compilers.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/Compilers.java
rename to javatests/dagger/internal/codegen/Compilers.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java b/javatests/dagger/internal/codegen/ComponentBuilderTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/ComponentBuilderTest.java
rename to javatests/dagger/internal/codegen/ComponentBuilderTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentHierarchyValidatorTest.java b/javatests/dagger/internal/codegen/ComponentHierarchyValidatorTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/ComponentHierarchyValidatorTest.java
rename to javatests/dagger/internal/codegen/ComponentHierarchyValidatorTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
rename to javatests/dagger/internal/codegen/ComponentProcessorTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/DaggerModuleMethodSubject.java b/javatests/dagger/internal/codegen/DaggerModuleMethodSubject.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/DaggerModuleMethodSubject.java
rename to javatests/dagger/internal/codegen/DaggerModuleMethodSubject.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/ErrorMessagesTest.java b/javatests/dagger/internal/codegen/ErrorMessagesTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/ErrorMessagesTest.java
rename to javatests/dagger/internal/codegen/ErrorMessagesTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/ForReleasableReferencesValidatorTest.java b/javatests/dagger/internal/codegen/ForReleasableReferencesValidatorTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/ForReleasableReferencesValidatorTest.java
rename to javatests/dagger/internal/codegen/ForReleasableReferencesValidatorTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/FrameworkFieldTest.java b/javatests/dagger/internal/codegen/FrameworkFieldTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/FrameworkFieldTest.java
rename to javatests/dagger/internal/codegen/FrameworkFieldTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/GeneratedLines.java b/javatests/dagger/internal/codegen/GeneratedLines.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/GeneratedLines.java
rename to javatests/dagger/internal/codegen/GeneratedLines.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/GraphValidationScopingTest.java b/javatests/dagger/internal/codegen/GraphValidationScopingTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/GraphValidationScopingTest.java
rename to javatests/dagger/internal/codegen/GraphValidationScopingTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/GraphValidationTest.java b/javatests/dagger/internal/codegen/GraphValidationTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/GraphValidationTest.java
rename to javatests/dagger/internal/codegen/GraphValidationTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/InaccessibleTypeTest.java b/javatests/dagger/internal/codegen/InaccessibleTypeTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/InaccessibleTypeTest.java
rename to javatests/dagger/internal/codegen/InaccessibleTypeTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java b/javatests/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
rename to javatests/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/KeyTest.java b/javatests/dagger/internal/codegen/KeyTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/KeyTest.java
rename to javatests/dagger/internal/codegen/KeyTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
rename to javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java b/javatests/dagger/internal/codegen/MapKeyProcessorTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/MapKeyProcessorTest.java
rename to javatests/dagger/internal/codegen/MapKeyProcessorTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java b/javatests/dagger/internal/codegen/MembersInjectionTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/MembersInjectionTest.java
rename to javatests/dagger/internal/codegen/MembersInjectionTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/MethodSignatureFormatterTest.java b/javatests/dagger/internal/codegen/MethodSignatureFormatterTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/MethodSignatureFormatterTest.java
rename to javatests/dagger/internal/codegen/MethodSignatureFormatterTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/MissingBindingSuggestionsTest.java b/javatests/dagger/internal/codegen/MissingBindingSuggestionsTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/MissingBindingSuggestionsTest.java
rename to javatests/dagger/internal/codegen/MissingBindingSuggestionsTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java b/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
rename to javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/ModuleValidatorTest.java b/javatests/dagger/internal/codegen/ModuleValidatorTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/ModuleValidatorTest.java
rename to javatests/dagger/internal/codegen/ModuleValidatorTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/MultibindingTest.java b/javatests/dagger/internal/codegen/MultibindingTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/MultibindingTest.java
rename to javatests/dagger/internal/codegen/MultibindingTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/MultibindsValidatorTest.java b/javatests/dagger/internal/codegen/MultibindsValidatorTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/MultibindsValidatorTest.java
rename to javatests/dagger/internal/codegen/MultibindsValidatorTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/MultipleRequestTest.java b/javatests/dagger/internal/codegen/MultipleRequestTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/MultipleRequestTest.java
rename to javatests/dagger/internal/codegen/MultipleRequestTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java b/javatests/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
similarity index 99%
rename from compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
rename to javatests/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
index ce65429c3..066ed9792 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
+++ b/javatests/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 // TODO(beder): Merge the error-handling tests with the ModuleFactoryGeneratorTest.
 package dagger.internal.codegen;
 
diff --git a/compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/ProductionComponentProcessorTest.java
rename to javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/ProductionGraphValidationTest.java b/javatests/dagger/internal/codegen/ProductionGraphValidationTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/ProductionGraphValidationTest.java
rename to javatests/dagger/internal/codegen/ProductionGraphValidationTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/RepeatedModuleValidationTest.java b/javatests/dagger/internal/codegen/RepeatedModuleValidationTest.java
similarity index 87%
rename from compiler/src/test/java/dagger/internal/codegen/RepeatedModuleValidationTest.java
rename to javatests/dagger/internal/codegen/RepeatedModuleValidationTest.java
index 978dc6b3e..4fc74d811 100644
--- a/compiler/src/test/java/dagger/internal/codegen/RepeatedModuleValidationTest.java
+++ b/javatests/dagger/internal/codegen/RepeatedModuleValidationTest.java
@@ -1,3 +1,19 @@
+/*
+ * Copyright (C) 2015 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
 package dagger.internal.codegen;
 
 import static com.google.common.truth.Truth.assertAbout;
diff --git a/compiler/src/test/java/dagger/internal/codegen/SourceFilesTest.java b/javatests/dagger/internal/codegen/SourceFilesTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/SourceFilesTest.java
rename to javatests/dagger/internal/codegen/SourceFilesTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/SubcomponentBuilderValidationTest.java b/javatests/dagger/internal/codegen/SubcomponentBuilderValidationTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/SubcomponentBuilderValidationTest.java
rename to javatests/dagger/internal/codegen/SubcomponentBuilderValidationTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/SubcomponentValidationTest.java b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/SubcomponentValidationTest.java
rename to javatests/dagger/internal/codegen/SubcomponentValidationTest.java
diff --git a/compiler/src/test/java/dagger/internal/codegen/ValidationReportTest.java b/javatests/dagger/internal/codegen/ValidationReportTest.java
similarity index 100%
rename from compiler/src/test/java/dagger/internal/codegen/ValidationReportTest.java
rename to javatests/dagger/internal/codegen/ValidationReportTest.java
diff --git a/test_defs.bzl b/test_defs.bzl
index bd81669a9..59c1e826c 100644
--- a/test_defs.bzl
+++ b/test_defs.bzl
@@ -12,15 +12,23 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-def GenJavaTests(name, srcs, deps, plugins = None, javacopts = None):
-  _GenTests(native.java_library, native.java_test, name, srcs, deps, plugins, javacopts)
+def GenJavaTests(name, srcs, deps, test_only_deps = None, plugins = None, javacopts = None):
+  _GenTests(
+      native.java_library, native.java_test, name, srcs, deps, test_only_deps, plugins, javacopts)
 
-def GenRobolectricTests(name, srcs, deps, plugins = None, javacopts = None):
+def GenRobolectricTests(name, srcs, deps, test_only_deps = None, plugins = None, javacopts = None):
   # TODO(ronshapiro): enable these when Bazel supports robolectric tests
   pass
 
 def _GenTests(
-    library_rule_type, test_rule_type, name, srcs, deps, plugins = None, javacopts = None):
+    library_rule_type,
+    test_rule_type,
+    name,
+    srcs,
+    deps,
+    test_only_deps = None,
+    plugins = None,
+    javacopts = None):
   test_files = []
   supporting_files = []
   for src in srcs:
@@ -29,7 +37,10 @@ def _GenTests(
     else:
       supporting_files.append(src)
 
-  test_deps = [] + deps
+  if not test_only_deps:
+    test_only_deps = []
+
+  test_deps = test_only_deps + deps
   if len(supporting_files) > 0:
     supporting_files_name = name + "_lib"
     test_deps.append(":" + supporting_files_name)
diff --git a/third_party/BUILD b/third_party/BUILD
index 4ea8dd35b..da55423a3 100644
--- a/third_party/BUILD
+++ b/third_party/BUILD
@@ -55,6 +55,15 @@ java_library(
     exports = ["@com_google_truth_truth//jar"],
 )
 
+java_library(
+    name = "truth8",
+    testonly = 1,
+    exports = [
+        ":truth",
+        "@com_google_truth_extensions_truth_java8_extension//jar",
+    ],
+)
+
 java_library(
     name = "guava",
     exports = ["@com_google_guava_guava//jar"],
diff --git a/util/execute-deploy.sh b/util/execute-deploy.sh
index 388d213a4..e7d2c106a 100755
--- a/util/execute-deploy.sh
+++ b/util/execute-deploy.sh
@@ -8,7 +8,7 @@ EXTRA_MAVEN_ARGS=$5
 
 python $(dirname $0)/maven/generate_poms.py $VERSION_NAME \
   //core/src/main/java/dagger:core \
-  //compiler:compiler \
+  //java/dagger/internal/codegen:codegen \
   //producers:producers \
   //java/dagger/android:android \
   //java/dagger/android/support:support \
@@ -51,8 +51,8 @@ deploy_library \
 
 deploy_library \
   shaded_compiler.jar \
-  compiler/libcompiler-src.jar \
-  compiler/compiler-javadoc.jar \
+  java/dagger/internal/codegen/libcodegen-src.jar \
+  java/dagger/internal/codegen/codegen-javadoc.jar \
   dagger-compiler.pom.xml
 
 deploy_library \
diff --git a/util/maven/generate_poms.py b/util/maven/generate_poms.py
index ab65551ce..79a1497d7 100644
--- a/util/maven/generate_poms.py
+++ b/util/maven/generate_poms.py
@@ -59,7 +59,7 @@ def pom_deps(label):
         'artifact': 'dagger',
         'alias': '//core:core',
     },
-    '//compiler:compiler': {
+    '//java/dagger/internal/codegen:codegen': {
         'name': 'Dagger Compiler',
         'artifact': 'dagger-compiler',
     },
