diff --git a/core/src/main/java/dagger/ObjectGraph.java b/core/src/main/java/dagger/ObjectGraph.java
index b695195d9..a99c69503 100644
--- a/core/src/main/java/dagger/ObjectGraph.java
+++ b/core/src/main/java/dagger/ObjectGraph.java
@@ -168,11 +168,12 @@ private static ObjectGraph makeGraph(DaggerObjectGraph base, Loader plugin, Obje
       Map<String, Class<?>> injectableTypes = new LinkedHashMap<String, Class<?>>();
       Map<Class<?>, StaticInjection> staticInjections
           = new LinkedHashMap<Class<?>, StaticInjection>();
+      //why only setbinding? it is the basebinding part
       StandardBindings baseBindings =
-          (base == null) ? new StandardBindings() : new StandardBindings(base.setBindings);  //why only setbinding? it is the basebinding part
+          (base == null) ? new StandardBindings() : new StandardBindings(base.setBindings);
       BindingsGroup overrideBindings = new OverridesBindings();
-
-      Map<ModuleAdapter<?>, Object> loadedModules = Modules.loadModules(plugin, modules); //load all the modules into the loadedModules
+      //load all the modules into the loadedModules
+      Map<ModuleAdapter<?>, Object> loadedModules = Modules.loadModules(plugin, modules);
       for (Entry<ModuleAdapter<?>, Object> loadedModule : loadedModules.entrySet()) {
         // moduleadapter Extracts bindings from an {@code @Module}-annotated class.
         ModuleAdapter<Object> moduleAdapter = (ModuleAdapter<Object>) loadedModule.getKey();
diff --git a/core/src/test/java/dagger/internal/TestingModuleAdapter.java b/core/src/test/java/dagger/internal/TestingModuleAdapter.java
index b5d54f095..c2577dc9d 100644
--- a/core/src/test/java/dagger/internal/TestingModuleAdapter.java
+++ b/core/src/test/java/dagger/internal/TestingModuleAdapter.java
@@ -109,6 +109,13 @@ private void handleSetBindings(BindingsGroup bindings, M module, Method method,
         new ReflectiveProvidesBinding<M>(
             method, providerKey, moduleClass.getName(), module, library));
   }
+  
+  private void handleMapBindings(BindingsGroup bindings, M module, Method method,
+      String mapKey, String providerKey, boolean library) {
+    SetBinding.<M>add(bindings, mapKey,
+        new ReflectiveProvidesBinding<M>(
+            method, providerKey, moduleClass.getName(), module, library));
+  }
 
   @Override public M newModule() {
     try {
diff --git a/examples/android-activity-graphs/.gitignore b/examples/android-activity-graphs/.gitignore
new file mode 100644
index 000000000..c71ea97ab
--- /dev/null
+++ b/examples/android-activity-graphs/.gitignore
@@ -0,0 +1 @@
+/.apt_generated/
diff --git a/examples/simple/.gitignore b/examples/simple/.gitignore
new file mode 100644
index 000000000..c71ea97ab
--- /dev/null
+++ b/examples/simple/.gitignore
@@ -0,0 +1 @@
+/.apt_generated/
diff --git a/examples/simple/src/main/java/coffee/DripCoffeeModule.java b/examples/simple/src/main/java/coffee/DripCoffeeModule.java
index 555ebb6e8..cb2abff06 100644
--- a/examples/simple/src/main/java/coffee/DripCoffeeModule.java
+++ b/examples/simple/src/main/java/coffee/DripCoffeeModule.java
@@ -6,7 +6,7 @@
 
 
 @Module(
-    injects = CoffeeApp.class,
+ //   injects = CoffeeApp.class,
     includes = PumpModule.class
 )
 class DripCoffeeModule {
diff --git a/examples/simple/src/main/java/coffee/Flavor.java b/examples/simple/src/main/java/coffee/Flavor.java
new file mode 100644
index 000000000..aec746df8
--- /dev/null
+++ b/examples/simple/src/main/java/coffee/Flavor.java
@@ -0,0 +1,14 @@
+package coffee;
+
+/**
+ * TODO: Insert description here. (generated by houcy)
+ */
+public class Flavor {
+  String name;
+  Flavor(String s) {
+    this.name = s;
+  }
+  @Override public String toString() {
+    return this.name;
+  }
+}
diff --git a/examples/simple/src/main/java/coffee/PumpModule.java b/examples/simple/src/main/java/coffee/PumpModule.java
index b064cea65..a7f1aa407 100644
--- a/examples/simple/src/main/java/coffee/PumpModule.java
+++ b/examples/simple/src/main/java/coffee/PumpModule.java
@@ -3,7 +3,7 @@
 import dagger.Module;
 import dagger.Provides;
 
-@Module(complete = false, library = true)
+@Module(complete = false, library = true, injects = CoffeeApp.class)
 class PumpModule {
   @Provides Pump providePump(Thermosiphon pump) {
     return pump;
