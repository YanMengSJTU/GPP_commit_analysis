diff --git a/java/dagger/android/AndroidInjector.java b/java/dagger/android/AndroidInjector.java
index 260ecd231..d2b9dec7c 100644
--- a/java/dagger/android/AndroidInjector.java
+++ b/java/dagger/android/AndroidInjector.java
@@ -25,11 +25,12 @@
  * android.app.Activity} or {@link android.app.Fragment}).
  *
  * <p>Commonly implemented by {@link dagger.Subcomponent}-annotated types whose {@link
- * dagger.Subcomponent.Builder} extends {@link Builder}.
+ * dagger.Subcomponent.Factory} extends {@link Factory}.
  *
  * @param <T> a concrete subtype of a core Android type
  * @see AndroidInjection
  * @see DispatchingAndroidInjector
+ * @see ContributesAndroidInjector
  */
 @Beta
 public interface AndroidInjector<T> {
@@ -47,7 +48,7 @@
      * Creates an {@link AndroidInjector} for {@code instance}. This should be the same instance
      * that will be passed to {@link #inject(Object)}.
      */
-    AndroidInjector<T> create(T instance);
+    AndroidInjector<T> create(@BindsInstance T instance);
   }
 
   /**
@@ -55,7 +56,10 @@
    * Factory}.
    *
    * @param <T> the concrete type to be injected
+   * @deprecated Prefer {@link Factory} now that components can have {@link dagger.Component.Factory
+   *     factories} instead of builders
    */
+  @Deprecated
   abstract class Builder<T> implements AndroidInjector.Factory<T> {
     @Override
     public final AndroidInjector<T> create(T instance) {
diff --git a/java/dagger/android/processor/ContributesAndroidInjectorGenerator.java b/java/dagger/android/processor/ContributesAndroidInjectorGenerator.java
index d25e7b444..bae454b4e 100644
--- a/java/dagger/android/processor/ContributesAndroidInjectorGenerator.java
+++ b/java/dagger/android/processor/ContributesAndroidInjectorGenerator.java
@@ -45,7 +45,6 @@
 import dagger.Binds;
 import dagger.Module;
 import dagger.Subcomponent;
-import dagger.Subcomponent.Builder;
 import dagger.android.AndroidInjectionKey;
 import dagger.android.AndroidInjector;
 import dagger.android.ContributesAndroidInjector;
@@ -114,7 +113,7 @@ private void generate(AndroidInjectorDescriptor descriptor) {
 
     String baseName = descriptor.injectedType().simpleName();
     ClassName subcomponentName = moduleName.nestedClass(baseName + "Subcomponent");
-    ClassName subcomponentBuilderName = subcomponentName.nestedClass("Builder");
+    ClassName subcomponentFactoryName = subcomponentName.nestedClass("Factory");
 
     TypeSpec.Builder module =
         classBuilder(moduleName)
@@ -124,8 +123,8 @@ private void generate(AndroidInjectorDescriptor descriptor) {
                     .addMember("subcomponents", "$T.class", subcomponentName)
                     .build())
             .addModifiers(PUBLIC, ABSTRACT)
-            .addMethod(bindAndroidInjectorFactory(descriptor, subcomponentBuilderName))
-            .addType(subcomponent(descriptor, subcomponentName, subcomponentBuilderName))
+            .addMethod(bindAndroidInjectorFactory(descriptor, subcomponentFactoryName))
+            .addType(subcomponent(descriptor, subcomponentName, subcomponentFactoryName))
             .addMethod(constructorBuilder().addModifiers(PRIVATE).build());
     generatedAnnotationSpec(elements, sourceVersion, AndroidProcessor.class)
         .ifPresent(module::addAnnotation);
@@ -169,7 +168,7 @@ private AnnotationSpec androidInjectorMapKey(AndroidInjectorDescriptor descripto
   private TypeSpec subcomponent(
       AndroidInjectorDescriptor descriptor,
       ClassName subcomponentName,
-      ClassName subcomponentBuilderName) {
+      ClassName subcomponentFactoryName) {
     AnnotationSpec.Builder subcomponentAnnotation = AnnotationSpec.builder(Subcomponent.class);
     for (ClassName module : descriptor.modules()) {
       subcomponentAnnotation.addMember("modules", CodeBlock.of("$T.class", module));
@@ -180,16 +179,17 @@ private TypeSpec subcomponent(
         .addAnnotation(subcomponentAnnotation.build())
         .addAnnotations(descriptor.scopes())
         .addSuperinterface(parameterizedTypeName(AndroidInjector.class, descriptor.injectedType()))
-        .addType(subcomponentBuilder(descriptor, subcomponentBuilderName))
+        .addType(subcomponentFactory(descriptor, subcomponentFactoryName))
         .build();
   }
 
-  private TypeSpec subcomponentBuilder(
-      AndroidInjectorDescriptor descriptor, ClassName subcomponentBuilderName) {
-    return classBuilder(subcomponentBuilderName)
-        .addAnnotation(Builder.class)
-        .addModifiers(PUBLIC, ABSTRACT, STATIC)
-        .superclass(parameterizedTypeName(AndroidInjector.Builder.class, descriptor.injectedType()))
+  private TypeSpec subcomponentFactory(
+      AndroidInjectorDescriptor descriptor, ClassName subcomponentFactoryName) {
+    return interfaceBuilder(subcomponentFactoryName)
+        .addAnnotation(Subcomponent.Factory.class)
+        .addModifiers(PUBLIC, STATIC)
+        .addSuperinterface(
+            parameterizedTypeName(AndroidInjector.Factory.class, descriptor.injectedType()))
         .build();
   }
 
