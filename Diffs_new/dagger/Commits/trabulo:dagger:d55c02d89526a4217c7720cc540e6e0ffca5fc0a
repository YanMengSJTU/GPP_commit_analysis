diff --git a/java/dagger/internal/DoubleCheck.java b/java/dagger/internal/DoubleCheck.java
index 6313bb0db..ea07528bf 100644
--- a/java/dagger/internal/DoubleCheck.java
+++ b/java/dagger/internal/DoubleCheck.java
@@ -62,7 +62,7 @@ public T get() {
    */
   public static Object reentrantCheck(Object currentInstance, Object newInstance) {
     boolean isReentrant = !(currentInstance == UNINITIALIZED
-        // This check is needed for AndroidMode's implementation, which uses MemoizedSentinel types.
+        // This check is needed for fastInit's implementation, which uses MemoizedSentinel types.
         || currentInstance instanceof MemoizedSentinel);
 
     if (isReentrant && currentInstance != newInstance) {
diff --git a/java/dagger/internal/codegen/CompilerOptions.java b/java/dagger/internal/codegen/CompilerOptions.java
index 7d97e2a26..af450bc0a 100644
--- a/java/dagger/internal/codegen/CompilerOptions.java
+++ b/java/dagger/internal/codegen/CompilerOptions.java
@@ -35,20 +35,14 @@
   abstract boolean usesProducers();
 
   /**
-   * Returns true if the experimental Android mode is enabled.
+   * Returns true if the fast initialization flag, {@code fastInit}, is enabled.
    *
-   * <p><b>Warning: Do Not use! This flag is for internal, experimental use only!</b>
-   *
-   * <p>Issues related to this flag will not be supported. This flag could break your build, cause
-   * memory leaks in your app, or cause other unknown issues at runtime.
-   *
-   * <p>If enabled, the generated code will attempt to more aggressively inline creation logic for
-   * bindings inside of the component rather than in a separate factory class. Enabling this flag
-   * should reduced the class loading and the number of eagerly initialized fields, at the cost of
-   * potential memory leaks and higher per-provision instantiation time. Due to very slow
-   * classloading on Android, these trade-offs are potentially advantageous.
+   * <p>If enabled, the generated code will attempt to optimize for fast component initialization.
+   * This is done by reducing the number of factory classes loaded during initialization and the
+   * number of eagerly initialized fields at the cost of potential memory leaks and higher
+   * per-provision instantiation time.
    */
-  abstract boolean experimentalAndroidMode();
+  abstract boolean fastInit();
 
   /**
    * Returns true if the experimental Android mode 2 is enabled.
@@ -91,15 +85,14 @@ static Builder builder() {
 
   static CompilerOptions create(ProcessingEnvironment processingEnv, DaggerElements elements) {
     checkState(
-        !(experimentalAndroidModeFeatureStatus(processingEnv).equals(FeatureStatus.ENABLED)
+        !(fastInitEnabled(processingEnv)
             && experimentalAndroidMode2FeatureStatus(processingEnv).equals(FeatureStatus.ENABLED)),
-        "experimentalAndroidMode and experimentalAndroidMode2 cannot be used together.");
+        "fastInit/experimentalAndroidMode and experimentalAndroidMode2 cannot be used together.");
 
     return builder()
         .usesProducers(elements.getTypeElement(Produces.class) != null)
         .headerCompilation(processingEnv.getOptions().containsKey(HEADER_COMPILATION))
-        .experimentalAndroidMode(
-            experimentalAndroidModeFeatureStatus(processingEnv).equals(FeatureStatus.ENABLED))
+        .fastInit(fastInitEnabled(processingEnv))
         .experimentalAndroidMode2(
             experimentalAndroidMode2FeatureStatus(processingEnv).equals(FeatureStatus.ENABLED))
         .writeProducerNameInToken(
@@ -127,7 +120,7 @@ static CompilerOptions create(ProcessingEnvironment processingEnv, DaggerElement
 
     Builder headerCompilation(boolean headerCompilation);
 
-    Builder experimentalAndroidMode(boolean experimentalAndroidMode);
+    Builder fastInit(boolean fastInit);
 
     Builder experimentalAndroidMode2(boolean experimentalAndroidMode2);
 
@@ -154,6 +147,9 @@ Builder warnIfInjectionFactoryNotGeneratedUpstream(
 
   private static final String HEADER_COMPILATION = "experimental_turbine_hjar";
 
+  static final String FAST_INIT = "dagger.fastInit";
+
+  // TODO(user): Remove once all usages are migrated to FAST_INIT.
   static final String EXPERIMENTAL_ANDROID_MODE = "dagger.experimentalAndroidMode";
 
   static final String EXPERIMENTAL_ANDROID_MODE2 = "dagger.experimentalAndroidMode2";
@@ -186,6 +182,7 @@ Builder warnIfInjectionFactoryNotGeneratedUpstream(
 
   static final ImmutableSet<String> SUPPORTED_OPTIONS =
       ImmutableSet.of(
+          FAST_INIT,
           EXPERIMENTAL_ANDROID_MODE,
           HEADER_COMPILATION,
           WRITE_PRODUCER_NAME_IN_TOKEN_KEY,
@@ -197,13 +194,19 @@ Builder warnIfInjectionFactoryNotGeneratedUpstream(
           IGNORE_PRIVATE_AND_STATIC_INJECTION_FOR_COMPONENT,
           AHEAD_OF_TIME_COMPONENTS_KEY);
 
-  private static FeatureStatus experimentalAndroidModeFeatureStatus(
-      ProcessingEnvironment processingEnv) {
+  private static boolean fastInitEnabled(ProcessingEnvironment processingEnv) {
     return valueOf(
-        processingEnv,
-        EXPERIMENTAL_ANDROID_MODE,
-        FeatureStatus.DISABLED,
-        EnumSet.allOf(FeatureStatus.class));
+            processingEnv,
+            FAST_INIT,
+            FeatureStatus.DISABLED,
+            EnumSet.allOf(FeatureStatus.class))
+        .equals(FeatureStatus.ENABLED)
+      || valueOf(
+            processingEnv,
+            EXPERIMENTAL_ANDROID_MODE,
+            FeatureStatus.DISABLED,
+            EnumSet.allOf(FeatureStatus.class))
+        .equals(FeatureStatus.ENABLED);
   }
 
   private static FeatureStatus experimentalAndroidMode2FeatureStatus(
diff --git a/java/dagger/internal/codegen/ComponentBindingExpressions.java b/java/dagger/internal/codegen/ComponentBindingExpressions.java
index 8b0ffc20e..e87e6f558 100644
--- a/java/dagger/internal/codegen/ComponentBindingExpressions.java
+++ b/java/dagger/internal/codegen/ComponentBindingExpressions.java
@@ -442,9 +442,9 @@ private BindingExpression provisionBindingExpression(
    * <p>{@code @Binds} bindings that don't {@linkplain #needsCaching(ResolvedBindings) need to be
    * cached} can use a {@link DelegateBindingExpression}.
    *
-   * <p>In Android mode, use an {@link InnerSwitchingProviders inner switching provider} unless that
-   * provider's case statement will simply call {@code get()} on another {@link Provider} (in which
-   * case, just use that Provider directly).
+   * <p>In fastInit mode, use an {@link InnerSwitchingProviders inner switching provider} unless
+   * that provider's case statement will simply call {@code get()} on another {@link Provider} (in
+   * which case, just use that Provider directly).
    *
    * <p>Otherwise, return a {@link FrameworkInstanceBindingExpression}.
    */
@@ -453,7 +453,7 @@ private BindingExpression providerBindingExpression(ResolvedBindings resolvedBin
         && !needsCaching(resolvedBindings)) {
       return new DelegateBindingExpression(
           resolvedBindings, RequestKind.PROVIDER, this, types, elements);
-    } else if (compilerOptions.experimentalAndroidMode()
+    } else if (compilerOptions.fastInit()
         && frameworkInstanceCreationExpression(resolvedBindings).useInnerSwitchingProvider()
         && !(instanceBindingExpression(resolvedBindings)
         instanceof DerivedFromProviderBindingExpression)) {
@@ -496,7 +496,7 @@ private FrameworkInstanceBindingExpression producerFromProviderBindingExpression
    * <p>In default mode, we can use direct expressions for bindings that don't need to be cached in
    * a reference-releasing scope.
    *
-   * <p>In Android mode, we can use direct expressions unless the binding needs to be cached.
+   * <p>In fastInit mode, we can use direct expressions unless the binding needs to be cached.
    */
   private BindingExpression instanceBindingExpression(ResolvedBindings resolvedBindings) {
     Optional<BindingExpression> maybeDirectInstanceExpression =
@@ -594,14 +594,13 @@ private BindingExpression instanceBindingExpression(ResolvedBindings resolvedBin
   /**
    * Returns {@code true} if the binding should use the static factory creation strategy.
    *
-   * In default mode, we always use the static factory creation strategy. In Android mode, we
-   * prefer to use the SwitchingProvider than the static factories to reduce class loading; however,
-   * we allow static factories that can reused across multiple bindings, e.g. {@code MapFactory} or
-   * {@code SetFactory}.
+   * In default mode, we always use the static factory creation strategy. In fastInit mode, we
+   * prefer to use a SwitchingProvider instead of static factories in order to reduce class loading;
+   * however, we allow static factories that can reused across multiple bindings, e.g.
+   * {@code MapFactory} or {@code SetFactory}.
    */
   private boolean useStaticFactoryCreation(ContributionBinding binding) {
-    return !(compilerOptions.experimentalAndroidMode2()
-            || compilerOptions.experimentalAndroidMode())
+    return !(compilerOptions.experimentalAndroidMode2() || compilerOptions.fastInit())
         || binding.kind().equals(MULTIBOUND_MAP)
         || binding.kind().equals(MULTIBOUND_SET);
   }
@@ -611,14 +610,13 @@ private boolean useStaticFactoryCreation(ContributionBinding binding) {
    * binding. If the binding doesn't {@linkplain #needsCaching(ResolvedBindings) need to be cached},
    * we can.
    *
-   * <p>In Android mode, we can use a direct expression even if the binding {@linkplain
+   * <p>In fastInit mode, we can use a direct expression even if the binding {@linkplain
    * #needsCaching(ResolvedBindings) needs to be cached} as long as it's not in a
    * reference-releasing scope.
    */
   private boolean canUseDirectInstanceExpression(ResolvedBindings resolvedBindings) {
     return !needsCaching(resolvedBindings)
-        || (compilerOptions.experimentalAndroidMode()
-            && !requiresReleasableReferences(resolvedBindings));
+        || (compilerOptions.fastInit() && !requiresReleasableReferences(resolvedBindings));
   }
 
   /**
@@ -669,7 +667,7 @@ private BindingMethodImplementation methodImplementation(
       ResolvedBindings resolvedBindings,
       RequestKind requestKind,
       BindingExpression bindingExpression) {
-    if (compilerOptions.experimentalAndroidMode()) {
+    if (compilerOptions.fastInit()) {
       if (requestKind.equals(RequestKind.PROVIDER)) {
         return new SingleCheckedMethodImplementation(
             resolvedBindings, requestKind, bindingExpression, types, generatedComponentModel);
@@ -702,7 +700,7 @@ private boolean needsCaching(ResolvedBindings resolvedBindings) {
     return true;
   }
 
-  // TODO(user): Enable releasable references in experimentalAndroidMode
+  // TODO(user): Enable releasable references in fastInit
   private boolean requiresReleasableReferences(ResolvedBindings resolvedBindings) {
     return resolvedBindings.scope().isPresent()
         && referenceReleasingManagerFields.requiresReleasableReferences(
diff --git a/java/dagger/internal/codegen/KytheBindingGraphFactory.java b/java/dagger/internal/codegen/KytheBindingGraphFactory.java
index 894e86fdd..9380285e8 100644
--- a/java/dagger/internal/codegen/KytheBindingGraphFactory.java
+++ b/java/dagger/internal/codegen/KytheBindingGraphFactory.java
@@ -104,7 +104,7 @@ private static BindingGraphFactory createBindingGraphFactory(
             .ignorePrivateAndStaticInjectionForComponent(false)
             .scopeCycleValidationType(ValidationType.NONE)
             .warnIfInjectionFactoryNotGeneratedUpstream(false)
-            .experimentalAndroidMode(false)
+            .fastInit(false)
             .experimentalAndroidMode2(false)
             .aheadOfTimeComponents(false)
             .build();
diff --git a/javatests/dagger/functional/ComponentWithReusableBindings.java b/javatests/dagger/functional/ComponentWithReusableBindings.java
index acd9e93ff..afad0d75f 100644
--- a/javatests/dagger/functional/ComponentWithReusableBindings.java
+++ b/javatests/dagger/functional/ComponentWithReusableBindings.java
@@ -43,7 +43,7 @@
   // b/77150738
   int primitive();
 
-  // b/77150738: This is used as a regression test for Android mode with SwitchingProvider. In
+  // b/77150738: This is used as a regression test for fastInit mode's switching providers. In
   // particular, it occurs when a @Provides method returns the boxed type but the component method
   // returns the unboxed type, and the instance is requested from a SwitchingProvider.
   boolean unboxedPrimitive();
diff --git a/javatests/dagger/functional/cycle/LongCycleTest.java b/javatests/dagger/functional/cycle/LongCycleTest.java
index 37e5e90fc..95fdf05e9 100644
--- a/javatests/dagger/functional/cycle/LongCycleTest.java
+++ b/javatests/dagger/functional/cycle/LongCycleTest.java
@@ -43,10 +43,10 @@ public void longCycle() {
    */
   @Test
   public void longCycleHasMoreThanOneInitializeMethod() throws NoSuchMethodException {
-    assume().that(System.getProperty("dagger.mode")).isNotEqualTo("ExperimentalAndroidMode");
+    assume().that(System.getProperty("dagger.mode")).isNotEqualTo("FastInit");
     assume()
         .that(System.getProperty("dagger.mode"))
-        .isNotEqualTo("ExperimentalAndroidModeAndAheadOfTimeComponents");
+        .isNotEqualTo("FastInitAndAheadOfTimeComponents");
     DaggerLongCycle_LongCycleComponent.class
         .getDeclaredMethod("initialize2", DaggerLongCycle_LongCycleComponent.Builder.class);
   }
diff --git a/javatests/dagger/functional/subcomponent/SubcomponentTest.java b/javatests/dagger/functional/subcomponent/SubcomponentTest.java
index 73562b8d4..26da5f1c5 100644
--- a/javatests/dagger/functional/subcomponent/SubcomponentTest.java
+++ b/javatests/dagger/functional/subcomponent/SubcomponentTest.java
@@ -86,10 +86,10 @@ public void multibindingContributions() {
 
   @Test
   public void unscopedProviders() {
-    assume().that(System.getProperty("dagger.mode")).isNotEqualTo("ExperimentalAndroidMode");
+    assume().that(System.getProperty("dagger.mode")).isNotEqualTo("FastInit");
     assume()
         .that(System.getProperty("dagger.mode"))
-        .isNotEqualTo("ExperimentalAndroidModeAndAheadOfTimeComponents");
+        .isNotEqualTo("FastInitAndAheadOfTimeComponents");
     assertThat(parentGetters.getUnscopedTypeProvider())
         .isSameAs(childComponent.getUnscopedTypeProvider());
     assertThat(parentGetters.getUnscopedTypeProvider())
diff --git a/javatests/dagger/internal/codegen/CompilerMode.java b/javatests/dagger/internal/codegen/CompilerMode.java
index 33aaff116..2173c2639 100644
--- a/javatests/dagger/internal/codegen/CompilerMode.java
+++ b/javatests/dagger/internal/codegen/CompilerMode.java
@@ -22,14 +22,12 @@
 /** The configuration options for compiler modes. */
 enum CompilerMode {
   DEFAULT_MODE,
-  EXPERIMENTAL_ANDROID_MODE("-Adagger.experimentalAndroidMode=enabled");
+  FAST_INIT_MODE("-Adagger.fastInit=enabled");
 
   /** Returns the compiler modes as a list of parameters for parameterized tests */
   static final ImmutableList<Object[]> TEST_PARAMETERS =
       ImmutableList.copyOf(
-          new Object[][] {
-            {CompilerMode.DEFAULT_MODE}, {CompilerMode.EXPERIMENTAL_ANDROID_MODE},
-          });
+          new Object[][] {{CompilerMode.DEFAULT_MODE}, {CompilerMode.FAST_INIT_MODE}});
 
   private final ImmutableList<String> javacopts;
 
diff --git a/javatests/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
index 45b14c379..f140cbf5c 100644
--- a/javatests/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
@@ -19,7 +19,7 @@
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
 import static dagger.internal.codegen.CompilerMode.DEFAULT_MODE;
-import static dagger.internal.codegen.CompilerMode.EXPERIMENTAL_ANDROID_MODE;
+import static dagger.internal.codegen.CompilerMode.FAST_INIT_MODE;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 import static dagger.internal.codegen.GeneratedLines.IMPORT_GENERATED_ANNOTATION;
@@ -193,7 +193,7 @@ public ComponentProcessorTest(CompilerMode compilerMode) {
                 GENERATED_ANNOTATION,
                 "public final class DaggerSimpleComponent implements SimpleComponent {")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "  private volatile Provider<SomeInjectableType> someInjectableTypeProvider;")
             .addLines(
                 "  private DaggerSimpleComponent(Builder builder) {}",
@@ -217,7 +217,7 @@ public ComponentProcessorTest(CompilerMode compilerMode) {
                 DEFAULT_MODE, //
                 "    return DoubleCheck.lazy(SomeInjectableType_Factory.create());")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "    return DoubleCheck.lazy(someInjectableTypeProvider());")
             .addLines(
                 "  }",
@@ -228,7 +228,7 @@ public ComponentProcessorTest(CompilerMode compilerMode) {
                 DEFAULT_MODE, //
                 "    return SomeInjectableType_Factory.create();")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE, //
+                FAST_INIT_MODE, //
                 "    Object local = someInjectableTypeProvider;",
                 "    if (local == null) {",
                 "      local = new SwitchingProvider<>(0);",
@@ -246,7 +246,7 @@ public ComponentProcessorTest(CompilerMode compilerMode) {
                 "    }",
                 "  }")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "  private final class SwitchingProvider<T> implements Provider<T> {",
                 "    private final int id;",
                 "",
@@ -310,7 +310,7 @@ public ComponentProcessorTest(CompilerMode compilerMode) {
                 GENERATED_ANNOTATION,
                 "public final class DaggerSimpleComponent implements SimpleComponent {")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "  private volatile Object someInjectableType = new MemoizedSentinel();",
                 "  private volatile Provider<SomeInjectableType> someInjectableTypeProvider;")
             .addLinesIn(
@@ -327,7 +327,7 @@ public ComponentProcessorTest(CompilerMode compilerMode) {
                 "  @Override", //
                 "  public SomeInjectableType someInjectableType() {")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "    Object local = someInjectableType;",
                 "    if (local instanceof MemoizedSentinel) {",
                 "      synchronized (local) {",
@@ -352,7 +352,7 @@ public ComponentProcessorTest(CompilerMode compilerMode) {
                 DEFAULT_MODE, //
                 "    return DoubleCheck.lazy(someInjectableTypeProvider);")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "    return DoubleCheck.lazy(someInjectableTypeProvider());")
             .addLines(
                 "  }",
@@ -360,7 +360,7 @@ public ComponentProcessorTest(CompilerMode compilerMode) {
                 "  @Override",
                 "  public Provider<SomeInjectableType> someInjectableTypeProvider() {")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE, //
+                FAST_INIT_MODE, //
                 "    Object local = someInjectableTypeProvider;",
                 "    if (local == null) {",
                 "      local = new SwitchingProvider<>(0);",
@@ -373,7 +373,7 @@ public ComponentProcessorTest(CompilerMode compilerMode) {
             .addLines( //
                 "  }")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "  private final class SwitchingProvider<T> implements Provider<T> {",
                 "    private final int id;",
                 "",
@@ -1209,7 +1209,7 @@ public void testDefaultPackage() {
                 DEFAULT_MODE,
                 "  private test_AComponent_a aProvider;")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "  private volatile Provider<A> aProvider;",
                 "  private AComponent aComponent;",
                 "",
@@ -1228,7 +1228,7 @@ public void testDefaultPackage() {
                 DEFAULT_MODE,
                 "    this.aProvider = new test_AComponent_a(builder.aComponent);")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "    this.aComponent = builder.aComponent;")
             .addLines(
                 "  }",
@@ -1239,7 +1239,7 @@ public void testDefaultPackage() {
                 DEFAULT_MODE,
                 "    return new B(aProvider);")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "    return new B(getAProvider());")
             .addLines(
                 "  }",
@@ -1277,7 +1277,7 @@ public void testDefaultPackage() {
                 "  }",
                 "}")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "  private final class SwitchingProvider<T> implements Provider<T> {",
                 "    @SuppressWarnings(\"unchecked\")",
                 "    @Override",
diff --git a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
index 962e5e11d..8148f4ccd 100644
--- a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
+++ b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
@@ -363,7 +363,7 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
             "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
+      case FAST_INIT_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
diff --git a/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java b/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
index 8ed23d776..15260e76c 100644
--- a/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
+++ b/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
@@ -18,7 +18,7 @@
 
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static dagger.internal.codegen.CompilerMode.DEFAULT_MODE;
-import static dagger.internal.codegen.CompilerMode.EXPERIMENTAL_ANDROID_MODE;
+import static dagger.internal.codegen.CompilerMode.FAST_INIT_MODE;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
@@ -177,7 +177,7 @@ public void toDoubleCheck() {
                     GENERATED_ANNOTATION,
                     "public final class DaggerTestComponent implements TestComponent {")
                 .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
+                    FAST_INIT_MODE,
                     "  private volatile Object regularScoped = new MemoizedSentinel();",
                     "  private volatile ReusableScoped reusableScoped;",
                     "",
@@ -275,7 +275,7 @@ public void toSingleCheck() {
                     GENERATED_ANNOTATION,
                     "public final class DaggerTestComponent implements TestComponent {")
                 .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
+                    FAST_INIT_MODE,
                     "  private volatile Object regularScoped = new MemoizedSentinel();",
                     "  private volatile ReusableScoped reusableScoped;",
                     "",
@@ -370,7 +370,7 @@ public void toReleasableCheck() {
                     GENERATED_ANNOTATION,
                     "public final class DaggerTestComponent implements TestComponent {")
                 .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
+                    FAST_INIT_MODE,
                     "  private volatile Object regularScoped = new MemoizedSentinel();",
                     "  private volatile ReusableScoped reusableScoped;",
                     "  private volatile Provider<Unscoped> unscopedProvider;",
@@ -426,7 +426,7 @@ public void toReleasableCheck() {
                     "        ReferenceReleasingProvider.create(",
                     "            (Provider) Unscoped_Factory.create(), customScopeReferences);")
                 .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
+                    FAST_INIT_MODE,
                     "    this.unscopedProvider2 =",
                     "        ReferenceReleasingProvider.create(",
                     "            (Provider) getUnscopedProvider(), customScopeReferences);")
@@ -440,7 +440,7 @@ public void toReleasableCheck() {
                     "        };",
                     "  }")
                 .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
+                    FAST_INIT_MODE,
                     "  private final class SwitchingProvider<T> implements Provider<T> {",
                     "    @SuppressWarnings(\"unchecked\")",
                     "    @Override",
@@ -491,7 +491,7 @@ public void toUnscoped() {
                     GENERATED_ANNOTATION,
                     "public final class DaggerTestComponent implements TestComponent {")
                 .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
+                    FAST_INIT_MODE,
                     "  private volatile Object regularScoped = new MemoizedSentinel();",
                     "  private volatile ReusableScoped reusableScoped;",
                     "",
@@ -619,7 +619,7 @@ public void castNeeded_rawTypes_Provider_get() {
                     "    return (Supertype) subtypeProvider.get();",
                     "  }")
                 .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
+                    FAST_INIT_MODE,
                     "  private volatile Object subtype = new MemoizedSentinel();",
                     "",
                     "  private Object getSubtype() {",
@@ -725,7 +725,7 @@ public void noCast_rawTypes_Provider_get_toInaccessibleType() {
                     "  }",
                     "}")
                 .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
+                    FAST_INIT_MODE,
                     "  private volatile Object subtype = new MemoizedSentinel();",
                     "",
                     "  private Object getSubtype() {",
@@ -817,7 +817,7 @@ public void castedToRawType() {
                     "  }",
                     "}")
                 .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
+                    FAST_INIT_MODE,
                     "  private volatile Provider<String> provideStringProvider;",
                     "",
                     "  private Provider<String> getStringProvider() {",
@@ -918,7 +918,7 @@ public void doubleBinds() {
                     "  }",
                     "}")
                 .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
+                    FAST_INIT_MODE,
                     "  private volatile Provider<String> provideStringProvider;",
                     "",
                     "  private Provider<String> getStringProvider() {",
@@ -1021,7 +1021,7 @@ public void inlineFactoryOfInacessibleType() {
                     "  }",
                     "}")
                 .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
+                    FAST_INIT_MODE,
                     "  private volatile Provider subtypeProvider;",
                     "",
                     "  private Provider getSubtypeProvider() {",
@@ -1124,7 +1124,7 @@ public void providerWhenBindsScopeGreaterThanDependencyScope() {
                     "  }",
                     "}")
                 .addLinesIn(
-                    EXPERIMENTAL_ANDROID_MODE,
+                    FAST_INIT_MODE,
                     "  private volatile Provider<Object> bindStringProvider;",
                     "  private volatile Object object = new MemoizedSentinel();",
                     "  private volatile String string;",
diff --git a/javatests/dagger/internal/codegen/ElidedFactoriesTest.java b/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
index 9de7df603..cae7c0506 100644
--- a/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
+++ b/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
@@ -174,7 +174,7 @@ public void simpleComponent_injectsProviderOf_dependsOnScoped() {
             "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
+      case FAST_INIT_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerSimpleComponent",
@@ -368,7 +368,7 @@ public void scopedBinding_onlyUsedInSubcomponent() {
 
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
+      case FAST_INIT_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerSimpleComponent",
diff --git a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index 0f8d95789..05b4dc671 100644
--- a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -122,7 +122,7 @@ public void mapBindingsWithEnumKey() {
         "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
+      case FAST_INIT_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
@@ -527,7 +527,7 @@ public void mapBindingsWithStringKey() {
         "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
+      case FAST_INIT_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
@@ -725,7 +725,7 @@ public void mapBindingsWithWrappedKey() {
         "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
+      case FAST_INIT_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
@@ -937,7 +937,7 @@ public void mapBindingsWithNonProviderValue() {
         "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
+      case FAST_INIT_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
index 547ad4ea8..7d6f62ccc 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
@@ -18,7 +18,7 @@
 
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static dagger.internal.codegen.CompilerMode.DEFAULT_MODE;
-import static dagger.internal.codegen.CompilerMode.EXPERIMENTAL_ANDROID_MODE;
+import static dagger.internal.codegen.CompilerMode.FAST_INIT_MODE;
 import static dagger.internal.codegen.Compilers.CLASS_PATH_WITHOUT_GUAVA_OPTION;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
@@ -95,7 +95,7 @@ public void mapBindings() {
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "  private volatile Provider<Integer> provideIntProvider;",
                 "  private volatile Provider<Long> provideLong0Provider;",
                 "  private volatile Provider<Long> provideLong1Provider;",
@@ -159,7 +159,7 @@ public void mapBindings() {
                 DEFAULT_MODE, //
                 "        0, MapModule_ProvideIntFactory.create());")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "        0, getMapOfIntegerAndProviderOfIntegerProvider());")
             .addLines(
                 "  }",
@@ -182,14 +182,14 @@ public void mapBindings() {
                 "        .put(1L, MapModule_ProvideLong1Factory.create())",
                 "        .put(2L, MapModule_ProvideLong2Factory.create())")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "        .put(0L, getMapOfLongAndProviderOfLongProvider())",
                 "        .put(1L, getMapOfLongAndProviderOfLongProvider2())",
                 "        .put(2L, getMapOfLongAndProviderOfLongProvider3())")
             .addLines( //
                 "        .build();", "  }")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "  private final class SwitchingProvider<T> implements Provider<T> {",
                 "    private final int id;",
                 "",
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
index 672c074e4..8d1b25dee 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
@@ -18,7 +18,7 @@
 
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static dagger.internal.codegen.CompilerMode.DEFAULT_MODE;
-import static dagger.internal.codegen.CompilerMode.EXPERIMENTAL_ANDROID_MODE;
+import static dagger.internal.codegen.CompilerMode.FAST_INIT_MODE;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
@@ -130,7 +130,7 @@ public void mapBindings() {
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "  private volatile Provider<Integer> provideIntProvider;",
                 "  private volatile Provider<Long> provideLong0Provider;",
                 "  private volatile Provider<Long> provideLong1Provider;",
@@ -194,7 +194,7 @@ public void mapBindings() {
                 DEFAULT_MODE, //
                 "        0, MapModule_ProvideIntFactory.create());")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "        0, getMapOfIntegerAndProviderOfIntegerProvider());")
             .addLines(
                 "  }",
@@ -216,7 +216,7 @@ public void mapBindings() {
                 "      1L, MapModule_ProvideLong1Factory.create(),",
                 "      2L, MapModule_ProvideLong2Factory.create());")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "      0L, getMapOfLongAndProviderOfLongProvider(),",
                 "      1L, getMapOfLongAndProviderOfLongProvider2(),",
                 "      2L, getMapOfLongAndProviderOfLongProvider3());")
@@ -230,7 +230,7 @@ public void mapBindings() {
                 "",
                 "  private final class SubImpl implements Sub {")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "    private volatile Provider<Long> provideLong3Provider;",
                 "    private volatile Provider<Long> provideLong4Provider;",
                 "    private volatile Provider<Long> provideLong5Provider;",
@@ -287,7 +287,7 @@ public void mapBindings() {
                 "          .put(4L, SubcomponentMapModule_ProvideLong4Factory.create())",
                 "          .put(5L, SubcomponentMapModule_ProvideLong5Factory.create())")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "          .put(0L, DaggerTestComponent.this",
                 "              .getMapOfLongAndProviderOfLongProvider())",
                 "          .put(1L, DaggerTestComponent.this",
@@ -300,7 +300,7 @@ public void mapBindings() {
             .addLines( //
                 "          .build();", "    }")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "    private final class SwitchingProvider<T> implements Provider<T> {",
                 "      private final int id;",
                 "",
diff --git a/javatests/dagger/internal/codegen/MembersInjectionTest.java b/javatests/dagger/internal/codegen/MembersInjectionTest.java
index 2a7fd2194..cc78863a9 100644
--- a/javatests/dagger/internal/codegen/MembersInjectionTest.java
+++ b/javatests/dagger/internal/codegen/MembersInjectionTest.java
@@ -21,7 +21,7 @@
 import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
 import static dagger.internal.codegen.CompilerMode.DEFAULT_MODE;
-import static dagger.internal.codegen.CompilerMode.EXPERIMENTAL_ANDROID_MODE;
+import static dagger.internal.codegen.CompilerMode.FAST_INIT_MODE;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 import static dagger.internal.codegen.GeneratedLines.IMPORT_GENERATED_ANNOTATION;
@@ -1362,7 +1362,7 @@ public void accessibleRawType_ofInaccessibleType() {
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "  private volatile Object listOfInaccessible = new MemoizedSentinel();",
                 "",
                 "  private List getListOfInaccessible() {",
@@ -1402,7 +1402,7 @@ public void accessibleRawType_ofInaccessibleType() {
                 "        UsesInaccessibles instance) {",
                 "    UsesInaccessibles_MembersInjector.injectInaccessibles(")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "        instance, (List) getListOfInaccessible());")
             .addLinesIn(
                 DEFAULT_MODE,
diff --git a/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
index 4da7f6b5e..563a7c283 100644
--- a/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
@@ -18,7 +18,7 @@
 
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static dagger.internal.codegen.CompilerMode.DEFAULT_MODE;
-import static dagger.internal.codegen.CompilerMode.EXPERIMENTAL_ANDROID_MODE;
+import static dagger.internal.codegen.CompilerMode.FAST_INIT_MODE;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
@@ -113,7 +113,7 @@ public void inlinedOptionalBindings() {
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "  private volatile Provider<Maybe> provideMaybeProvider;",
                 "",
                 "  private Provider<Maybe> getMaybeProvider() {",
@@ -138,7 +138,7 @@ public void inlinedOptionalBindings() {
                 DEFAULT_MODE,
                 "        Maybe_MaybeModule_ProvideMaybeFactory.create()));")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "        getMaybeProvider()));")
             .addLines(
                 "  }",
@@ -154,7 +154,7 @@ public void inlinedOptionalBindings() {
                 "    return Optional.<Provider<Lazy<DefinitelyNot>>>absent();",
                 "  }")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "  private final class SwitchingProvider<T> implements Provider<T> {",
                 "    private final int id;",
                 "",
diff --git a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
index b7fa898ca..8c3299960 100644
--- a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -215,7 +215,7 @@ public void simpleComponent() {
             "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
+      case FAST_INIT_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestClass_SimpleComponent",
diff --git a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
index 5e02bd637..0d74314ed 100644
--- a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
+++ b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
@@ -18,7 +18,7 @@
 
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static dagger.internal.codegen.CompilerMode.DEFAULT_MODE;
-import static dagger.internal.codegen.CompilerMode.EXPERIMENTAL_ANDROID_MODE;
+import static dagger.internal.codegen.CompilerMode.FAST_INIT_MODE;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 import static dagger.internal.codegen.GeneratedLines.IMPORT_GENERATED_ANNOTATION;
@@ -408,7 +408,7 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
                 "  @Override", //
                 "  public Dep1 getDep1() {")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "   Object local = dep1;",
                 "    if (local instanceof MemoizedSentinel) {",
                 "      synchronized (local) {",
@@ -429,7 +429,7 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
                 "  @Override",
                 "  public Dep2 getDep2() {")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "   Object local = dep2;",
                 "    if (local instanceof MemoizedSentinel) {",
                 "      synchronized (local) {",
@@ -453,7 +453,7 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
                 "  }",
                 "")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "  @CanIgnoreReturnValue",
                 "  private Dep1 injectDep1(Dep1 instance) {",
                 "    Dep1_MembersInjector.injectDep1Method(instance);",
@@ -480,7 +480,7 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
                 "      return new NeedsDep1(DaggerParentComponent.this.dep1Provider.get());",
                 "    }")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "    private NeedsDep1 getNeedsDep1() {",
                 "      return new NeedsDep1(DaggerParentComponent.this.getDep1());",
                 "    }")
@@ -494,7 +494,7 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
                 "              DaggerParentComponent.this.dep1Provider.get(),",
                 "              DaggerParentComponent.this.dep2Provider.get()));")
             .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                FAST_INIT_MODE,
                 "              DaggerParentComponent.this.getDep1(),",
                 "              DaggerParentComponent.this.getDep2()));")
             .addLines(
diff --git a/javatests/dagger/internal/codegen/SwitchingProviderTest.java b/javatests/dagger/internal/codegen/SwitchingProviderTest.java
index bb2a3316c..721d322a1 100644
--- a/javatests/dagger/internal/codegen/SwitchingProviderTest.java
+++ b/javatests/dagger/internal/codegen/SwitchingProviderTest.java
@@ -596,6 +596,6 @@ public void optionals() {
   private Compiler compilerWithAndroidMode() {
     return javac()
         .withProcessors(new ComponentProcessor())
-        .withOptions(CompilerMode.EXPERIMENTAL_ANDROID_MODE.javacopts());
+        .withOptions(CompilerMode.FAST_INIT_MODE.javacopts());
   }
 }
diff --git a/test_defs.bzl b/test_defs.bzl
index ddffe1667..8757733c9 100644
--- a/test_defs.bzl
+++ b/test_defs.bzl
@@ -15,11 +15,11 @@
 # Defines a set of build variants and the list of extra javacopts to build with.
 # The key will be appended to the generated test names to ensure uniqueness.
 BUILD_VARIANTS = {
-    "ExperimentalAndroidMode": ["-Adagger.experimentalAndroidMode=enabled"],
+    "FastInit": ["-Adagger.fastInit=enabled"],
     "ExperimentalAndroidMode2": ["-Adagger.experimentalAndroidMode2=enabled"],
     "ExperimentalAheadOfTimeComponents": ["-Adagger.experimentalAheadOfTimeComponents=enabled"],
-    "ExperimentalAndroidModeAndAheadOfTimeComponents": ["-Adagger.experimentalAndroidMode=enabled",
-                                                        "-Adagger.experimentalAheadOfTimeComponents=enabled"],
+    "FastInitAndAheadOfTimeComponents": ["-Adagger.fastInit=enabled",
+                                         "-Adagger.experimentalAheadOfTimeComponents=enabled"],
 }
 
 # TODO(user): split into two functions for functional vs non-functional tests?
