diff --git a/dagger-1-migration.md b/dagger-1-migration.md
index 0873913ff..dc11079f3 100644
--- a/dagger-1-migration.md
+++ b/dagger-1-migration.md
@@ -3,13 +3,12 @@ layout: default
 title: Migrating from Dagger 1
 ---
 
-# Migrating from Dagger 1
-
 While Dagger 1 and Dagger 2 are similar in many ways, one is not a drop-in
 replacement for the other.  This guide will highlight both the API and
 conceptual differences between the two versions and provide recommended patterns
 for migrating.
 
+
 ## Injected types
 
 Dagger 2 continues to rely on [JSR 330] for declaring injection sites. All of
diff --git a/multibindings.md b/multibindings.md
index 915a557e8..81cfa38a2 100644
--- a/multibindings.md
+++ b/multibindings.md
@@ -3,9 +3,6 @@ layout: default
 title: Multibindings
 ---
 
-# Multibindings
-
-
 Dagger allows you to bind several objects into a collection even when the
 objects are bound in different modules using mutlbindings. Dagger assembles the
 collection so that application code can inject it without depending directly on
@@ -16,7 +13,6 @@ where several modules can contribute individual plugin interface implementations
 so that a central class can use the entire set of plugins. Or you could have
 several modules contribute individual service providers to a map, keyed by name.
 
-[TOC]
 
 ## Set multibindings {#set-multibindings}
 
diff --git a/producers.md b/producers.md
index 6ded8b2da..ebc991b9f 100644
--- a/producers.md
+++ b/producers.md
@@ -3,12 +3,12 @@ layout: default
 title: Producers
 ---
 
-# Producers
-
-
 Dagger Producers is an extension to Dagger that implements
 asynchronous dependency injection in Java.
 
+
+## Overview
+
 This document assumes familiarity with the [Dagger 2 API][Dagger 2] and with
 Guavaâ€™s [ListenableFuture][ListenableFuture].
 
diff --git a/subcomponents.md b/subcomponents.md
index af7e654f4..4b4ffc115 100644
--- a/subcomponents.md
+++ b/subcomponents.md
@@ -3,9 +3,6 @@ layout: default
 title: Subcomponents
 ---
 
-# Subcomponents
-
-
 Subcomponents are components that inherit and extend the object graph of a
 parent component. You can use them to partition your application's object graph
 into subgraphs either to encapsulate different parts of your application from
@@ -20,6 +17,7 @@ subcomponent depend on objects bound in sibling subcomponents.
 In other words, the object graph of a subcomponent's parent component is a
 subgraph of the object graph of the subcomponent itself.
 
+
 ## Declaring a subcomponent
 
 Just like for top-level components, you create a subcomponent by writing an
diff --git a/users-guide.md b/users-guide.md
index 390b6140c..e08dc37aa 100644
--- a/users-guide.md
+++ b/users-guide.md
@@ -3,9 +3,6 @@ layout: default
 title: User's Guide
 ---
 
-# User's Guide
-
-
 The best classes in any application are the ones that do stuff: the
 `BarcodeDecoder`, the `KoopaPhysicsEngine`, and the `AudioStreamer`. These
 classes have dependencies; perhaps a `BarcodeCameraFinder`,
@@ -31,6 +28,7 @@ Dependency injection isn't just for testing. It also makes it easy to create
 `DevLoggingModule` during development and `ProdLoggingModule` in production to
 get the right behavior in each situation.
 
+
 ## Why Dagger 2 is Different
 
 [Dependency injection][DI] frameworks have existed for years with a whole
