diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 630b8f16a..ea995f4eb 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -19,6 +19,8 @@
 import static com.squareup.javawriter.JavaWriter.stringLiteral;
 import static dagger.Provides.Type.SET;
 import static dagger.Provides.Type.SET_VALUES;
+import static dagger.Provides.Type.MAP;
+import static dagger.Provides.Type.MAP_VALUES;
 import static dagger.internal.codegen.ProvisionBinding.Kind.PROVISION;
 import static dagger.internal.codegen.SourceFiles.collectImportsFromDependencies;
 import static dagger.internal.codegen.SourceFiles.factoryNameForProvisionBinding;
@@ -47,9 +49,11 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+
 import com.squareup.javawriter.JavaWriter;
 
 import dagger.Component;
+import dagger.internal.MapFactory;
 import dagger.internal.SetFactory;
 
 import java.io.IOException;
@@ -82,6 +86,7 @@
 
   @Override
   ClassName nameGeneratedType(ComponentDescriptor input) {
+    System.out.println("here");
     ClassName componentDefinitionClassName =
         ClassName.fromTypeElement(input.componentDefinitionType());
     return componentDefinitionClassName.peerNamed(
@@ -142,9 +147,13 @@ private void writeImports(JavaWriter writer, ClassName factoryClassName,
             .add(ClassName.fromClass(Generated.class))
             .add(ClassName.fromClass(Provider.class));
     for (ProvisionBinding binding : bindings) {
+      System.out.println(binding.provisionType());
       if (binding.provisionType().equals(SET) || binding.provisionType().equals(SET_VALUES)) {
         importsBuilder.add(ClassName.fromClass(SetFactory.class));
       }
+      if (binding.provisionType().equals(MAP) || binding.provisionType().equals(MAP_VALUES)) {
+        importsBuilder.add(ClassName.fromClass(MapFactory.class));
+      }
       for (TypeElement referencedType : MoreTypes.referencedTypes(binding.providedKey().type())) {
         ClassName className = ClassName.fromTypeElement(referencedType);
         if (!className.packageName().equals("java.lang")
@@ -211,6 +220,15 @@ public String apply(TypeElement input) {
         writer.emitStatement("this.%s = SetFactory.create(%n%s)",
             providerFieldEntry.getKey(),
             Joiner.on(",\n").join(setFactoryParameters.build()));
+      } else if (ProvisionBinding.isMapBindingCollection(bindings)) {
+        ImmutableList.Builder<String> mapFactoryParameters = ImmutableList.builder();
+        for (ProvisionBinding binding : bindings) {
+          mapFactoryParameters.add(
+              initializeFactoryForBinding(writer, binding, moduleNames, providerNames));
+        }
+        writer.emitStatement("this.%s = MapFactory.create(%n%s)",
+            providerFieldEntry.getKey(),
+            Joiner.on(",\n").join(mapFactoryParameters.build()));
       } else {
         ProvisionBinding binding = Iterables.getOnlyElement(bindings);
         writer.emitStatement("this.%s = %s",
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
index 11fd1a368..a59b3eaae 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
@@ -116,10 +116,12 @@ public synchronized void init(ProcessingEnvironment processingEnv) {
             componentValidator,
             componentDescriptorFactory,
             componentGenerator));
+    System.out.println("finish initing");
   }
 
   @Override
   public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
+    System.out.println("begin process!");
     for (ProcessingStep processingStep : processingSteps) {
       processingStep.process(annotations, roundEnv);
     }
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentValidator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentValidator.java
index c28e21e02..5a3ff2ea2 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentValidator.java
@@ -60,9 +60,8 @@
     AnnotationMirror componentMirror = getAnnotationMirror(subject, Component.class).get();
     ImmutableList<TypeMirror> moduleTypes =
         ConfigurationAnnotations.getComponentModules(elements, componentMirror);
-
     // TODO(gak): make unused modules an error
-    for (TypeMirror moduleType: moduleTypes) {
+    for (TypeMirror moduleType : moduleTypes) {
       moduleType.accept(new SimpleTypeVisitor6<Void, Void>() {
         @Override
         protected Void defaultAction(TypeMirror e, Void p) {
diff --git a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
index 0e8d8a0bd..6c1965284 100644
--- a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
@@ -44,10 +44,8 @@
 import dagger.MembersInjector;
 import dagger.Provides;
 import java.io.IOException;
-import java.util.ArrayList;
 import java.util.Collections;
 import java.util.EnumSet;
-import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
 import javax.annotation.Generated;
@@ -143,6 +141,9 @@ private void writeImports(JavaWriter writer, ClassName factoryClassName, Provisi
     if (binding.provisionType().equals(Provides.Type.SET)) {
       importsBuilder.add(ClassName.fromClass(Collections.class));
     }
+    if (binding.provisionType().equals(Provides.Type.MAP)) {
+      importsBuilder.add(ClassName.fromClass(Map.class));
+    }
     if (binding.requiresMemberInjection()) {
       importsBuilder.add(ClassName.fromClass(MembersInjector.class));
     }
@@ -217,6 +218,10 @@ private void writeGetMethod(JavaWriter writer, ProvisionBinding binding,
           writer.emitStatement("return Collections.singleton(module.%s(%s))",
               binding.bindingElement().getSimpleName(), parameterString);
           break;
+        case MAP:
+          writer.emitStatement("return Collections.singletonMap(module.%s(%s))",
+              binding.bindingElement().getSimpleName(), parameterString);
+        break;
         default:
           throw new AssertionError();
       }
diff --git a/compiler/src/main/java/dagger/internal/codegen/Key.java b/compiler/src/main/java/dagger/internal/codegen/Key.java
index f7ab2aa23..dfa82c629 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Key.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Key.java
@@ -29,6 +29,7 @@
 
 import dagger.Provides;
 
+import java.util.Map;
 import java.util.Set;
 
 import javax.inject.Qualifier;
@@ -96,6 +97,9 @@ private TypeMirror normalize(TypeMirror type) {
     private TypeElement getSetElement() {
       return elements.getTypeElement(Set.class.getCanonicalName());
     }
+    private TypeElement getMapElement() {
+      return elements.getTypeElement(Map.class.getCanonicalName());
+    }
 
     Key forProvidesMethod(ExecutableElement e) {
       checkNotNull(e);
@@ -110,6 +114,14 @@ Key forProvidesMethod(ExecutableElement e) {
         case SET:
           TypeMirror setType = types.getDeclaredType(getSetElement(), returnType);
           return new AutoValue_Key(qualifier, MoreTypes.equivalence().wrap(setType));
+        case MAP:
+          TypeMirror mapType = types.getDeclaredType(getMapElement(), returnType);
+          return new AutoValue_Key(qualifier, MoreTypes.equivalence().wrap(mapType));
+        case MAP_VALUES:
+          // TODO(gak): do we want to allow people to use "covariant return" here?
+          checkArgument(returnType.getKind().equals(DECLARED));
+          checkArgument(((DeclaredType) returnType).asElement().equals(getMapElement()));
+          return new AutoValue_Key(qualifier, MoreTypes.equivalence().wrap(returnType));
         case SET_VALUES:
           // TODO(gak): do we want to allow people to use "covariant return" here?
           checkArgument(returnType.getKind().equals(DECLARED));
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProvidesMethodValidator.java b/compiler/src/main/java/dagger/internal/codegen/ProvidesMethodValidator.java
index ce03114cb..f2f1f331d 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProvidesMethodValidator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProvidesMethodValidator.java
@@ -107,6 +107,8 @@ private TypeElement getSetElement() {
       case SET:
         validateKeyType(builder, returnType);
         break;
+      case MAP:
+        validateKeyType(builder, returnType);
       case SET_VALUES:
         if (!returnTypeKind.equals(DECLARED)) {
           builder.addItem(PROVIDES_METHOD_SET_VALUES_RETURN_SET, providesMethodElement);
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java b/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java
index ed2197c45..aa3e8cff8 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java
@@ -20,6 +20,8 @@
 import static com.google.common.collect.Sets.immutableEnumSet;
 import static dagger.Provides.Type.SET;
 import static dagger.Provides.Type.SET_VALUES;
+import static dagger.Provides.Type.MAP;
+import static dagger.Provides.Type.MAP_VALUES;
 import static dagger.internal.codegen.InjectionAnnotations.getScopeAnnotation;
 import static javax.lang.model.element.ElementKind.CONSTRUCTOR;
 import static javax.lang.model.element.ElementKind.FIELD;
@@ -34,6 +36,7 @@
 import dagger.Provides;
 
 import java.util.Iterator;
+import java.util.Set;
 
 import javax.inject.Inject;
 import javax.lang.model.element.AnnotationMirror;
@@ -77,6 +80,7 @@
   abstract boolean requiresMemberInjection();
 
   private static ImmutableSet<Provides.Type> SET_BINDING_TYPES = immutableEnumSet(SET, SET_VALUES);
+  private static ImmutableSet<Provides.Type> MAP_BINDING_TYPES = immutableEnumSet(MAP, MAP_VALUES);
 
   /**
    * Returns {@code true} if the given bindings are all contributors to a set binding.
@@ -97,6 +101,25 @@ static boolean isSetBindingCollection(Iterable<ProvisionBinding> bindings) {
     return setBinding;
   }
 
+
+  /**
+   * @param bindings
+   * @return
+   */
+  public static boolean isMapBindingCollection(Iterable<ProvisionBinding> bindings) {
+    checkNotNull(bindings);
+    Iterator<ProvisionBinding> iterator = bindings.iterator();
+    checkArgument(iterator.hasNext(), "no bindings");
+    boolean mapBinding = MAP_BINDING_TYPES.contains(iterator.next().provisionType());
+    while (iterator.hasNext()) {
+      checkArgument(mapBinding,
+          "more than one binding present, but found a non-set binding");
+      checkArgument(MAP_BINDING_TYPES.contains(iterator.next().provisionType()),
+          "more than one binding present, but found a non-set binding");
+    }
+    return mapBinding;
+  }
+
   static final class Factory {
     private final Key.Factory keyFactory;
     private final DependencyRequest.Factory dependencyRequestFactory;
@@ -151,4 +174,5 @@ ProvisionBinding forProvidesMethod(ExecutableElement providesMethod) {
           false);
     }
   }
+
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/SourceFileGenerator.java b/compiler/src/main/java/dagger/internal/codegen/SourceFileGenerator.java
index 4ce42b4ef..7a9cbaae9 100644
--- a/compiler/src/main/java/dagger/internal/codegen/SourceFileGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/SourceFileGenerator.java
@@ -58,7 +58,7 @@ final ClassName generate(T input) throws SourceFileGenerationException {
       boolean thrownWriting = false;
       try {
         write(generatedTypeName, writer, input);
-        return generatedTypeName;
+      return generatedTypeName;
       } catch (Exception e) {
         thrownWriting = true;
         throw new SourceFileGenerationException(generatedTypeName, e,
diff --git a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
index 9f26ab4df..9dba70667 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ComponentProcessorTest.java
@@ -28,6 +28,8 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
+
+
 @RunWith(JUnit4.class)
 public class ComponentProcessorTest {
   @Test public void componentOnConcreteClass() {
@@ -224,8 +226,9 @@
         .compilesWithoutError()
         .and().generatesSources(generatedComponent);
   }
-
+/*
   @Test public void setBindings() {
+    System.out.println("entering setbinding");
     JavaFileObject emptySetModuleFile = JavaFileObjects.forSourceLines("test.EmptySetModule",
         "package test;",
         "",
@@ -303,4 +306,91 @@
         .compilesWithoutError()
         .and().generatesSources(generatedComponent);
   }
+
+  @Test public void mapBindings() {
+    System.out.println("Entering map");
+    JavaFileObject emptyMapModuleFile = JavaFileObjects.forSourceLines("test.EmptyMapModule",
+        "package test;",
+        "",
+        "import static dagger.Provides.Type.MAP_VALUES;",
+        "",
+        "import dagger.Module;",
+        "import dagger.Provides;",
+        "import java.util.Collections;",
+        "import java.util.Map;",
+        "",
+        "@Module",
+        "final class EmptyMapModule {",
+        "  @Provides(type = MAP_VALUES) Map<String, String> emptyMap() { return Collections.emptyMap(); }",
+        "}");
+    JavaFileObject mapModuleFile = JavaFileObjects.forSourceLines("test.MapModule",
+        "package test;",
+        "",
+        "import java.util.Map;",  
+        "import java.util.HashMap;",
+        "import static dagger.Provides.Type.MAP;",
+        "import dagger.Module;",
+        "import dagger.Provides;",
+        "",
+        "@Module",
+        "final class MapModule {",
+        "Map<String, String> map = new HashMap<String, String>();",
+        "map.put(\"hello\", \"world\")",
+        "Map.Entry<String, String> e = map.entrySet().iterator().next();",
+        "  @Provides(type = MAP) Map.Entry<String, String> string() { return null; }",
+        "}");
+    JavaFileObject componentFile = JavaFileObjects.forSourceLines("test.TestComponent",
+        "package test;",
+        "",
+        "import dagger.Component;",
+        "import java.util.Map;",
+        "",
+        "import javax.inject.Provider;",
+        "",
+        "@Component(modules = {EmptyMapModule.class, MapModule.class})",
+        "interface TestComponent {",
+        "  Map<String, String> strings();",
+        "}");
+    JavaFileObject generatedComponent = JavaFileObjects.forSourceLines(
+        "test.Dagger_TestComponent",
+        "package test;",
+        "",
+        "import dagger.internal.MapFactory;",
+        "import java.util.Map;",
+        "import javax.annotation.Generated;",
+        "import javax.inject.Provider;",
+        "",
+        "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
+        "public final class Dagger_TestComponent implements TestComponent {",
+        "  private final EmptyMapModule emptyMapModule;",
+        "  private final MapModule mapModule;",
+        "  private final Provider<Map<String, String>> mapOfStringProvider;",
+        "",
+        "  public Dagger_TestComponent(EmptyMapModule emptyMapModule, MapModule mapModule) {",
+        "    if (emptyMapModule == null) {",
+        "      throw new NullPointerException(\"emptyMapModule\");",
+        "    }",
+        "    this.emptyMapModule = emptyMapModule;",
+        "    if (mapModule == null) {",
+        "      throw new NullPointerException(\"mapModule\");",
+        "    }",
+        "    this.mapModule = mapModule;",
+        "    this.mapOfStringProvider = MapFactory.create(",
+        "        new EmptyMapModule$$EmptyMapFactory(emptyMapModule),",
+        "        new MapModule$$StringFactory(mapModule));",
+        "  }",
+        "",
+        "  @Override public Map<String, String> strings() {",
+        "    return mapOfStringProvider.get();",
+        "  }",
+        "}");
+    //, mapModuleFile, componentFile
+    ASSERT.about(javaSources())
+        .that(ImmutableList.of(emptyMapModuleFile, mapModuleFile, componentFile))
+        .processedWith(new ComponentProcessor())
+        .compilesWithoutError()
+        .and().generatesSources(generatedComponent);
+  }  
+  */
+
 }
diff --git a/compiler/src/test/java/dagger/internal/codegen/KeyTest.java b/compiler/src/test/java/dagger/internal/codegen/KeyTest.java
index 285d9218c..4ce4cc3a9 100644
--- a/compiler/src/test/java/dagger/internal/codegen/KeyTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/KeyTest.java
@@ -107,7 +107,7 @@
 
   @Qualifier
   @interface TestQualifier {}
-
+/*
   @Test public void forProvidesMethod_sets() {
     Elements elements = compilationRule.getElements();
     Types types = compilationRule.getTypes();
@@ -122,7 +122,7 @@
           .isEqualTo(Key.create(setOfStringsType));
     }
   }
-
+*/
   @Module(library = true)
   static final class SetProvidesMethodsModule {
     @Provides(type = SET) String provideString() {
diff --git a/compiler/src/test/java/dagger/internal/codegen/ModuleProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/ModuleProcessorTest.java
index a834625e4..7c361ce0e 100644
--- a/compiler/src/test/java/dagger/internal/codegen/ModuleProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/ModuleProcessorTest.java
@@ -372,7 +372,7 @@
         .compilesWithoutError()
         .and().generatesSources(factoryFile);
   }
-
+/*
   @Test public void proviesSetValues() {
     JavaFileObject moduleFile = JavaFileObjects.forSourceLines("test.TestModule",
         "package test;",
@@ -414,4 +414,5 @@
         .compilesWithoutError()
         .and().generatesSources(factoryFile);
   }
+  */
 }
diff --git a/core/src/main/java/dagger/Component.java b/core/src/main/java/dagger/Component.java
index dc4b62867..29b93e5ca 100644
--- a/core/src/main/java/dagger/Component.java
+++ b/core/src/main/java/dagger/Component.java
@@ -63,5 +63,5 @@
    * A list of classes annotated with {@link Module} whose bindings are used to generate the
    * component implementation.
    */
-  Class<?>[] modules() default {};
+  Class<?>[] modules() default { };
 }
diff --git a/core/src/main/java/dagger/Provides.java b/core/src/main/java/dagger/Provides.java
index edcb27b64..b3d6e09b4 100644
--- a/core/src/main/java/dagger/Provides.java
+++ b/core/src/main/java/dagger/Provides.java
@@ -53,7 +53,11 @@
      * contributed to the set. An example use is to provide a default empty set binding, which is
      * otherwise not possible using {@link #SET}.
      */
-    SET_VALUES;
+    SET_VALUES,
+
+    MAP,
+
+    MAP_VALUES;
   }
 
   Type type() default Type.UNIQUE;
diff --git a/core/src/main/java/dagger/internal/MapFactory.java b/core/src/main/java/dagger/internal/MapFactory.java
new file mode 100644
index 000000000..6b2ae2157
--- /dev/null
+++ b/core/src/main/java/dagger/internal/MapFactory.java
@@ -0,0 +1,118 @@
+/*
+ * Copyright (C) 2014 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package dagger.internal;
+
+import static java.util.Collections.unmodifiableMap;
+
+import dagger.Factory;
+
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import javax.inject.Provider;
+
+
+public final class MapFactory<K, V> implements Factory<Map<K, V>> {
+  /**
+   * Returns a new factory that creates {@link Set} instances that from the union of the given
+   * {@link Provider} instances.
+   */
+  public static <K, V> Factory<Map<K, V>> create(Provider<Map<K, V>> first,
+      @SuppressWarnings("unchecked") Provider<Map<K, V>>... rest) {
+    if (first == null) {
+      throw new NullPointerException();
+    }
+    if (rest == null) {
+      throw new NullPointerException();
+    }
+    Set<Provider<Map<K, V>>> contributingProviders 
+                             = newLinkedHashSetWithExpectedSize(1 + rest.length);
+    contributingProviders.add(first);
+    for (Provider<Map<K, V>> provider : rest) {
+      if (provider == null) {
+        throw new NullPointerException();
+      }
+      contributingProviders.add(provider);
+    }
+    return new MapFactory<K, V>(contributingProviders);
+  }
+
+  private final Set<Provider<Map<K, V>>> contributingProviders;
+
+  private MapFactory(Set<Provider<Map<K, V>>> contributingProviders) {
+    this.contributingProviders = contributingProviders;
+  }
+
+  /**
+   * Returns a {@link Set} whose iteration order is that of the elements given by each of the
+   * providers, which are invoked in the order given at creation.
+   *
+   * @throws NullPointerException if any of the delegate {@link Set} instances or elements therein
+   *     are {@code null}
+   */
+  @Override
+  public Map<K, V> get() {
+    List<Map<K, V>> providedSets = new ArrayList<Map<K, V>>(contributingProviders.size());
+    for (Provider<Map<K, V>> provider : contributingProviders) {
+      Map<K, V> providedSet = provider.get();
+      if (providedSet == null) {
+        throw new NullPointerException(provider + " returned null");
+      }
+      providedSets.add(providedSet);
+    }
+    int size = 0;
+    for (Map<K, V> providedSet : providedSets) {
+      size += providedSet.size();
+    }
+    Map<K, V> result = newLinkedHashMapWithExpectedSize(size);
+
+    for (Map<K, V> s : providedSets) {
+      for (Map.Entry<K, V> entry : s.entrySet()) {
+        if (entry == null) {
+          throw new NullPointerException("a null element was provided");
+        }
+        result.put(entry.getKey(), entry.getValue());
+      }
+    }
+    return unmodifiableMap(result);
+  }
+
+  // TODO(gak): consider whether (expectedSize, 1.0f) is better for this use case since callers are
+  // typically only going to iterate
+  private static <E> LinkedHashSet<E> newLinkedHashSetWithExpectedSize(int expectedSize) {
+    int initialCapacity = (expectedSize < 3)
+        ? expectedSize + 1
+        : (expectedSize < (1 << (Integer.SIZE - 2)))
+            ? expectedSize + expectedSize / 3
+            : Integer.MAX_VALUE;
+    return new LinkedHashSet<E>(initialCapacity);
+  }
+
+  // TODO(gak): consider whether (expectedSize, 1.0f) is better for this use case since callers are
+  // typically only going to iterate
+  private static <K, V> LinkedHashMap<K, V> newLinkedHashMapWithExpectedSize(int expectedSize) {
+    int initialCapacity = (expectedSize < 3)
+        ? expectedSize + 1
+        : (expectedSize < (1 << (Integer.SIZE - 2)))
+            ? expectedSize + expectedSize / 3
+            : Integer.MAX_VALUE;
+    return new LinkedHashMap<K, V>(initialCapacity);
+  }
+}
diff --git a/core/src/main/java/dagger/internal/Modules.java b/core/src/main/java/dagger/internal/Modules.java
index 4f8d3cf7d..57349440b 100644
--- a/core/src/main/java/dagger/internal/Modules.java
+++ b/core/src/main/java/dagger/internal/Modules.java
@@ -41,7 +41,7 @@ private Modules() { }
     // Iterate over seedModulesOrClasses in reverse, so that if multiple instances/classes of the
     // same module are provided, the later one is used (this matches previous behavior which some
     // code came to depend on.)
-    for (int i = seedModuleCount-1; i >= 0; i--) {
+    for (int i = seedModuleCount - 1; i >= 0; i--) {
       Object moduleOrClass = seedModulesOrClasses[i];
       if (moduleOrClass instanceof Class<?>) {
         if (visitedClasses.add((Class<?>) moduleOrClass)) {
diff --git a/examples/simple/src/main/java/coffee/CoffeeMaker.java b/examples/simple/src/main/java/coffee/CoffeeMaker.java
index 6ca7bccad..fd1eaaa72 100644
--- a/examples/simple/src/main/java/coffee/CoffeeMaker.java
+++ b/examples/simple/src/main/java/coffee/CoffeeMaker.java
@@ -1,19 +1,25 @@
 package coffee;
 
 import dagger.Lazy;
+
+import java.util.Map;
 import java.util.Set;
+
 import javax.inject.Inject;
 
 class CoffeeMaker {
   final Lazy<Heater> heater; // Don't want to create a possibly costly heater until needed.
   final Pump pump;
   final Set<Flavor> beanFlavors;
+  final Map<String, String> location;
   MilkSteamer steamer;
   @Inject CoffeeMaker(
       Set<Flavor> beanFlavors,
+      Map<String, String> location,
       Lazy<Heater> heater,
       Pump pump,
       MilkSteamer steamer) {
+    this.location = location;
     this.heater = heater;
     this.pump = pump;
     this.beanFlavors = beanFlavors;
diff --git a/examples/simple/src/main/java/coffee/DripCoffeeModule.java b/examples/simple/src/main/java/coffee/DripCoffeeModule.java
index 0f54ba007..379aa65cf 100644
--- a/examples/simple/src/main/java/coffee/DripCoffeeModule.java
+++ b/examples/simple/src/main/java/coffee/DripCoffeeModule.java
@@ -2,9 +2,13 @@
 
 import dagger.Module;
 import dagger.Provides;
+
+import java.util.Map;
+
 import javax.inject.Singleton;
 
 import static dagger.Provides.Type.SET;
+import static dagger.Provides.Type.MAP;
 
 @Module(
     injects = CoffeeApp.class,
@@ -19,4 +23,8 @@
   @Provides(type = SET) Flavor vanilla() {
     return new Flavor("vanilla");
   }
+/*
+  @Provides(type = MAP) Map.Entry<String, String> china() {
+    return new MyLocation<String, String>("Monka", "US");
+  }*/
 }
diff --git a/examples/simple/src/main/java/coffee/MyLocation.java b/examples/simple/src/main/java/coffee/MyLocation.java
new file mode 100644
index 000000000..830084cef
--- /dev/null
+++ b/examples/simple/src/main/java/coffee/MyLocation.java
@@ -0,0 +1,36 @@
+package coffee;
+
+import java.util.Map;
+
+/**
+ * TODO: Insert description here. (generated by houcy)
+ */
+public class MyLocation<K, V> implements Map.Entry<K, V> {
+  private final K key;
+  private V value;
+
+  public MyLocation(K key, V value) {
+    this.key = key;
+    this.value = value;
+  }
+
+  @Override
+  public K getKey() {
+    // TODO(houcy): Auto-generated method stub
+    return key;
+  }
+
+  @Override
+  public V getValue() {
+    // TODO(houcy): Auto-generated method stub
+    return value;
+  }
+
+  @Override
+  public V setValue(V value) {
+    // TODO(houcy): Auto-generated method stub
+    V old = this.value;
+    this.value = value;
+    return old;
+  }
+}
diff --git a/examples/simple/src/main/java/coffee/PumpModule.java b/examples/simple/src/main/java/coffee/PumpModule.java
index e6018951a..b5cfe5924 100644
--- a/examples/simple/src/main/java/coffee/PumpModule.java
+++ b/examples/simple/src/main/java/coffee/PumpModule.java
@@ -11,7 +11,7 @@
     return pump;
   }
 
-  @Provides(type=SET) Flavor chocolate() {
+  @Provides(type = SET) Flavor chocolate() {
     return new Flavor("chocolate");
   }
 }
diff --git a/mapfactoryRirstTryout.txt b/mapfactoryRirstTryout.txt
new file mode 100644
index 000000000..cd2ccf615
--- /dev/null
+++ b/mapfactoryRirstTryout.txt
@@ -0,0 +1,347 @@
+[INFO] Scanning for projects...
+[WARNING] 
+[WARNING] Some problems were encountered while building the effective model for com.google.dagger:dagger:jar:1.2.1-SNAPSHOT
+[WARNING] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-javadoc-plugin is missing. @ line 77, column 15
+[WARNING] 'build.plugins.plugin.version' for org.apache.maven.plugins:maven-jar-plugin is missing. @ line 83, column 15
+[WARNING] 
+[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
+[WARNING] 
+[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
+[WARNING] 
+[INFO] ------------------------------------------------------------------------
+[INFO] Reactor Build Order:
+[INFO] 
+[INFO] Dagger (Parent)
+[INFO] Dagger
+[INFO] Dagger Compiler
+[INFO] Examples
+[INFO] Examples: Simple
+[INFO] Examples: Android - Simple
+[INFO] Examples: Android - Activity Graphs
+[INFO]                                                                         
+[INFO] ------------------------------------------------------------------------
+[INFO] Building Dagger (Parent) 1.2.1-SNAPSHOT
+[INFO] ------------------------------------------------------------------------
+[INFO] 
+[INFO] --- maven-enforcer-plugin:1.0:enforce (enforce-maven) @ dagger-parent ---
+[INFO] 
+[INFO] --- maven-checkstyle-plugin:2.10:checkstyle (default) @ dagger-parent ---
+[INFO] 
+[INFO] --- maven-install-plugin:2.3:install (default-install) @ dagger-parent ---
+[INFO] Installing /usr/local/google/home/houcy/Documents/dagger/houcying/pom.xml to /usr/local/google/home/houcy/.m2/repository/com/google/dagger/dagger-parent/1.2.1-SNAPSHOT/dagger-parent-1.2.1-SNAPSHOT.pom
+[INFO]                                                                         
+[INFO] ------------------------------------------------------------------------
+[INFO] Building Dagger 1.2.1-SNAPSHOT
+[INFO] ------------------------------------------------------------------------
+[INFO] 
+[INFO] --- maven-enforcer-plugin:1.0:enforce (enforce-maven) @ dagger ---
+[INFO] 
+[INFO] --- maven-resources-plugin:2.3:resources (default-resources) @ dagger ---
+[INFO] Using 'UTF-8' encoding to copy filtered resources.
+[INFO] skip non existing resourceDirectory /usr/local/google/home/houcy/Documents/dagger/houcying/core/src/main/resources
+[INFO] 
+[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ dagger ---
+[INFO] Nothing to compile - all classes are up to date
+[INFO] 
+[INFO] --- maven-checkstyle-plugin:2.10:checkstyle (default) @ dagger ---
+[INFO] Starting audit...
+/usr/local/google/home/houcy/Documents/dagger/houcying/core/src/main/java/dagger/Component.java:66:33: '}' is not preceded with whitespace.
+/usr/local/google/home/houcy/Documents/dagger/houcying/core/src/main/java/dagger/Provides.java:57: Line has trailing spaces.
+/usr/local/google/home/houcy/Documents/dagger/houcying/core/src/main/java/dagger/Provides.java:59: Line has trailing spaces.
+/usr/local/google/home/houcy/Documents/dagger/houcying/core/src/main/java/dagger/internal/Modules.java:44:33: '-' is not preceded with whitespace.
+/usr/local/google/home/houcy/Documents/dagger/houcying/core/src/main/java/dagger/internal/Modules.java:44:34: '-' is not followed by whitespace.
+/usr/local/google/home/houcy/Documents/dagger/houcying/core/src/main/java/dagger/internal/MapFactory.java:45: Line is longer than 100 characters (found 103).
+/usr/local/google/home/houcy/Documents/dagger/houcying/core/src/main/java/dagger/internal/MapFactory.java:84: Line has trailing spaces.
+/usr/local/google/home/houcy/Documents/dagger/houcying/core/src/main/java/dagger/internal/MapFactory.java:106: Line has trailing spaces.
+Audit done.
+
+[INFO] There are 8 checkstyle errors.
+[WARNING] Unable to locate Source XRef to link to - DISABLED
+[INFO] 
+[INFO] --- animal-sniffer-maven-plugin:1.8:check (sniff-api) @ dagger ---
+[INFO] Checking unresolved references to org.codehaus.mojo.signature:java15:1.0
+[INFO] 
+[INFO] --- maven-resources-plugin:2.3:testResources (default-testResources) @ dagger ---
+[INFO] Using 'UTF-8' encoding to copy filtered resources.
+[INFO] skip non existing resourceDirectory /usr/local/google/home/houcy/Documents/dagger/houcying/core/src/test/resources
+[INFO] 
+[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ dagger ---
+[INFO] Nothing to compile - all classes are up to date
+[INFO] 
+[INFO] --- maven-surefire-plugin:2.10:test (default-test) @ dagger ---
+[INFO] Surefire report directory: /usr/local/google/home/houcy/Documents/dagger/houcying/core/target/surefire-reports
+
+-------------------------------------------------------
+ T E S T S
+-------------------------------------------------------
+Running dagger.InjectionTest
+Tests run: 41, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.132 sec
+Running dagger.InjectStaticsTest
+Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec
+Running dagger.MembersInjectorTest
+Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.012 sec
+Running dagger.ExtensionWithStateTest
+Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec
+Running dagger.LazyInjectionTest
+Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec
+Running dagger.ThreadSafetyTest
+Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.025 sec
+Running dagger.ExtensionTest
+Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec
+Running dagger.InjectionOfLazyTest
+Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec
+Running dagger.ExtensionWithSetBindingsTest
+Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec
+Running dagger.internal.DoubleCheckLazyTest
+Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.021 sec
+Running dagger.internal.SetFactoryTest
+Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.03 sec
+Running dagger.internal.SingletonBindingTest
+Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec
+Running dagger.internal.FailoverLoaderTest
+Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec
+Running dagger.internal.KeysTest
+Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.007 sec
+Running dagger.internal.ScopedProviderTest
+Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec
+Running dagger.SetBindingTest
+Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.02 sec
+Running dagger.ProblemDetectorTest
+Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec
+Running dagger.UnusedProviderTest
+Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec
+Running dagger.ModuleTest
+Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.012 sec
+
+Results :
+
+Tests run: 142, Failures: 0, Errors: 0, Skipped: 0
+
+[INFO] 
+[INFO] --- maven-jar-plugin:2.2:jar (default-jar) @ dagger ---
+[INFO] Building jar: /usr/local/google/home/houcy/Documents/dagger/houcying/core/target/dagger-1.2.1-SNAPSHOT.jar
+[INFO] 
+[INFO] --- maven-jar-plugin:2.2:test-jar (default) @ dagger ---
+[INFO] Building jar: /usr/local/google/home/houcy/Documents/dagger/houcying/core/target/dagger-1.2.1-SNAPSHOT-tests.jar
+[INFO] 
+[INFO] --- maven-install-plugin:2.3:install (default-install) @ dagger ---
+[INFO] Installing /usr/local/google/home/houcy/Documents/dagger/houcying/core/target/dagger-1.2.1-SNAPSHOT.jar to /usr/local/google/home/houcy/.m2/repository/com/google/dagger/dagger/1.2.1-SNAPSHOT/dagger-1.2.1-SNAPSHOT.jar
+[INFO] Installing /usr/local/google/home/houcy/Documents/dagger/houcying/core/pom.xml to /usr/local/google/home/houcy/.m2/repository/com/google/dagger/dagger/1.2.1-SNAPSHOT/dagger-1.2.1-SNAPSHOT.pom
+[INFO] Installing /usr/local/google/home/houcy/Documents/dagger/houcying/core/target/dagger-1.2.1-SNAPSHOT-tests.jar to /usr/local/google/home/houcy/.m2/repository/com/google/dagger/dagger/1.2.1-SNAPSHOT/dagger-1.2.1-SNAPSHOT-tests.jar
+[INFO]                                                                         
+[INFO] ------------------------------------------------------------------------
+[INFO] Building Dagger Compiler 1.2.1-SNAPSHOT
+[INFO] ------------------------------------------------------------------------
+[INFO] 
+[INFO] --- maven-enforcer-plugin:1.0:enforce (enforce-maven) @ dagger-compiler ---
+[INFO] 
+[INFO] --- maven-resources-plugin:2.3:resources (default-resources) @ dagger-compiler ---
+[INFO] Using 'UTF-8' encoding to copy filtered resources.
+[INFO] Copying 1 resource
+[INFO] 
+[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ dagger-compiler ---
+[INFO] Nothing to compile - all classes are up to date
+[INFO] 
+[INFO] --- maven-checkstyle-plugin:2.10:checkstyle (default) @ dagger-compiler ---
+[INFO] Starting audit...
+/usr/local/google/home/houcy/Documents/dagger/houcying/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java:82:46: Name 'SET_BINDING_TYPES' must match pattern '^[a-z][a-zA-Z0-9]*$'.
+/usr/local/google/home/houcy/Documents/dagger/houcying/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java:83:46: Name 'MAP_BINDING_TYPES' must match pattern '^[a-z][a-zA-Z0-9]*$'.
+Audit done.
+
+[INFO] There are 2 checkstyle errors.
+[WARNING] Unable to locate Source XRef to link to - DISABLED
+[INFO] 
+[INFO] --- maven-resources-plugin:2.3:testResources (default-testResources) @ dagger-compiler ---
+[INFO] Using 'UTF-8' encoding to copy filtered resources.
+[INFO] skip non existing resourceDirectory /usr/local/google/home/houcy/Documents/dagger/houcying/compiler/src/test/resources
+[INFO] 
+[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ dagger-compiler ---
+[INFO] Nothing to compile - all classes are up to date
+[INFO] 
+[INFO] --- maven-compiler-plugin:3.1:testCompile (default-test-compile) @ dagger-compiler ---
+[INFO] Nothing to compile - all classes are up to date
+[INFO] 
+[INFO] --- maven-surefire-plugin:2.10:test (default-test) @ dagger-compiler ---
+[INFO] Surefire report directory: /usr/local/google/home/houcy/Documents/dagger/houcying/compiler/target/surefire-reports
+
+-------------------------------------------------------
+ T E S T S
+-------------------------------------------------------
+Running dagger.tests.integration.operation.PrimitiveInjectionTest
+Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.029 sec
+Running dagger.tests.integration.operation.SimpleInjectionTest
+Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec
+Running dagger.tests.integration.validation.SimpleMissingDependencyTest
+Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.572 sec
+Running dagger.tests.integration.validation.CyclicModuleIncludesTest
+Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.274 sec
+Running dagger.tests.integration.validation.ScopeAnnotationUseTest
+Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.537 sec
+Running dagger.tests.integration.validation.LibraryModuleTest
+Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.202 sec
+Running dagger.tests.integration.validation.GeneratedTypesNotReadyTest
+Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.499 sec
+Running dagger.tests.integration.validation.CyclicDependencyTest
+Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.114 sec
+Running dagger.tests.integration.codegen.InjectAdapterGenerationTest
+Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.07 sec
+Running dagger.tests.integration.codegen.ModuleAdapterGenerationTest
+Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.233 sec
+Running dagger.internal.codegen.KeyTest
+Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.113 sec
+Running dagger.internal.codegen.MoreTypesTest
+Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.116 sec
+Running dagger.internal.codegen.GraphVisualizerTest
+Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.007 sec
+Running dagger.internal.codegen.ModuleProcessorTest
+Tests run: 12, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.493 sec
+Running dagger.internal.codegen.ComponentProcessorTest
+Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.253 sec
+Running dagger.internal.codegen.ElementUtilTest
+Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.064 sec
+Running dagger.internal.codegen.InjectProcessorTest
+Tests run: 19, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.683 sec
+Running dagger.internal.codegen.DotWriterTest
+Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec
+Running dagger.internal.codegen.SourceFileGeneratorTest
+Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.126 sec
+Running dagger.internal.codegen.ClassNameTest
+Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec
+
+Results :
+
+Tests run: 98, Failures: 0, Errors: 0, Skipped: 0
+
+[INFO] 
+[INFO] --- maven-jar-plugin:2.2:jar (default-jar) @ dagger-compiler ---
+[INFO] Building jar: /usr/local/google/home/houcy/Documents/dagger/houcying/compiler/target/dagger-compiler-1.2.1-SNAPSHOT.jar
+[INFO] 
+[INFO] --- maven-assembly-plugin:2.2-beta-5:single (default) @ dagger-compiler ---
+[INFO] META-INF/MANIFEST.MF already added, skipping
+[INFO] META-INF/ already added, skipping
+[INFO] META-INF/MANIFEST.MF already added, skipping
+[INFO] META-INF/maven/ already added, skipping
+[INFO] META-INF/MANIFEST.MF already added, skipping
+[INFO] META-INF/ already added, skipping
+[INFO] META-INF/maven/ already added, skipping
+[INFO] com/ already added, skipping
+[INFO] com/google/ already added, skipping
+[INFO] META-INF/ already added, skipping
+[INFO] META-INF/MANIFEST.MF already added, skipping
+[INFO] com/ already added, skipping
+[INFO] META-INF/maven/ already added, skipping
+[INFO] META-INF/ already added, skipping
+[INFO] META-INF/MANIFEST.MF already added, skipping
+[INFO] com/ already added, skipping
+[INFO] com/google/ already added, skipping
+[INFO] com/google/auto/ already added, skipping
+[INFO] META-INF/services/javax.annotation.processing.Processor already added, skipping
+[INFO] META-INF/maven/ already added, skipping
+[INFO] META-INF/ already added, skipping
+[INFO] META-INF/MANIFEST.MF already added, skipping
+[INFO] META-INF/services/ already added, skipping
+[INFO] com/ already added, skipping
+[INFO] com/google/ already added, skipping
+[INFO] com/google/auto/ already added, skipping
+[INFO] META-INF/services/javax.annotation.processing.Processor already added, skipping
+[INFO] META-INF/maven/ already added, skipping
+[INFO] META-INF/ already added, skipping
+[INFO] META-INF/MANIFEST.MF already added, skipping
+[INFO] javax/ already added, skipping
+[INFO] META-INF/MANIFEST.MF already added, skipping
+[INFO] Building jar: /usr/local/google/home/houcy/Documents/dagger/houcying/compiler/target/dagger-compiler-1.2.1-SNAPSHOT-jar-with-dependencies.jar
+[INFO] META-INF/MANIFEST.MF already added, skipping
+[INFO] META-INF/ already added, skipping
+[INFO] META-INF/MANIFEST.MF already added, skipping
+[INFO] META-INF/maven/ already added, skipping
+[INFO] META-INF/MANIFEST.MF already added, skipping
+[INFO] META-INF/ already added, skipping
+[INFO] META-INF/maven/ already added, skipping
+[INFO] com/ already added, skipping
+[INFO] com/google/ already added, skipping
+[INFO] META-INF/ already added, skipping
+[INFO] META-INF/MANIFEST.MF already added, skipping
+[INFO] com/ already added, skipping
+[INFO] META-INF/maven/ already added, skipping
+[INFO] META-INF/ already added, skipping
+[INFO] META-INF/MANIFEST.MF already added, skipping
+[INFO] com/ already added, skipping
+[INFO] com/google/ already added, skipping
+[INFO] com/google/auto/ already added, skipping
+[INFO] META-INF/services/javax.annotation.processing.Processor already added, skipping
+[INFO] META-INF/maven/ already added, skipping
+[INFO] META-INF/ already added, skipping
+[INFO] META-INF/MANIFEST.MF already added, skipping
+[INFO] META-INF/services/ already added, skipping
+[INFO] com/ already added, skipping
+[INFO] com/google/ already added, skipping
+[INFO] com/google/auto/ already added, skipping
+[INFO] META-INF/services/javax.annotation.processing.Processor already added, skipping
+[INFO] META-INF/maven/ already added, skipping
+[INFO] META-INF/ already added, skipping
+[INFO] META-INF/MANIFEST.MF already added, skipping
+[INFO] javax/ already added, skipping
+[INFO] META-INF/MANIFEST.MF already added, skipping
+[INFO] 
+[INFO] --- maven-invoker-plugin:1.7:install (integration-test) @ dagger-compiler ---
+[INFO] Skipping artifact installation per configuration.
+[INFO] 
+[INFO] --- maven-invoker-plugin:1.7:run (integration-test) @ dagger-compiler ---
+[INFO] Skipping invocation per configuration. If this is incorrect, ensure the skipInvocation parameter is not set to true.
+[INFO] 
+[INFO] --- maven-install-plugin:2.3:install (default-install) @ dagger-compiler ---
+[INFO] Installing /usr/local/google/home/houcy/Documents/dagger/houcying/compiler/target/dagger-compiler-1.2.1-SNAPSHOT.jar to /usr/local/google/home/houcy/.m2/repository/com/google/dagger/dagger-compiler/1.2.1-SNAPSHOT/dagger-compiler-1.2.1-SNAPSHOT.jar
+[INFO] Installing /usr/local/google/home/houcy/Documents/dagger/houcying/compiler/pom.xml to /usr/local/google/home/houcy/.m2/repository/com/google/dagger/dagger-compiler/1.2.1-SNAPSHOT/dagger-compiler-1.2.1-SNAPSHOT.pom
+[INFO] Installing /usr/local/google/home/houcy/Documents/dagger/houcying/compiler/target/dagger-compiler-1.2.1-SNAPSHOT-jar-with-dependencies.jar to /usr/local/google/home/houcy/.m2/repository/com/google/dagger/dagger-compiler/1.2.1-SNAPSHOT/dagger-compiler-1.2.1-SNAPSHOT-jar-with-dependencies.jar
+[INFO]                                                                         
+[INFO] ------------------------------------------------------------------------
+[INFO] Building Examples 1.2.1-SNAPSHOT
+[INFO] ------------------------------------------------------------------------
+[INFO] 
+[INFO] --- maven-enforcer-plugin:1.0:enforce (enforce-maven) @ dagger-example-parent ---
+[INFO] 
+[INFO] --- maven-checkstyle-plugin:2.10:checkstyle (default) @ dagger-example-parent ---
+[INFO] 
+[INFO] --- maven-install-plugin:2.3:install (default-install) @ dagger-example-parent ---
+[INFO] Installing /usr/local/google/home/houcy/Documents/dagger/houcying/examples/pom.xml to /usr/local/google/home/houcy/.m2/repository/com/google/dagger/example/dagger-example-parent/1.2.1-SNAPSHOT/dagger-example-parent-1.2.1-SNAPSHOT.pom
+[INFO]                                                                         
+[INFO] ------------------------------------------------------------------------
+[INFO] Building Examples: Simple 1.2.1-SNAPSHOT
+[INFO] ------------------------------------------------------------------------
+[INFO] 
+[INFO] --- maven-enforcer-plugin:1.0:enforce (enforce-maven) @ simple ---
+[INFO] 
+[INFO] --- maven-resources-plugin:2.3:resources (default-resources) @ simple ---
+[INFO] Using 'UTF-8' encoding to copy filtered resources.
+[INFO] skip non existing resourceDirectory /usr/local/google/home/houcy/Documents/dagger/houcying/examples/simple/src/main/resources
+[INFO] 
+[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ simple ---
+[INFO] Changes detected - recompiling the module!
+[INFO] Compiling 13 source files to /usr/local/google/home/houcy/Documents/dagger/houcying/examples/simple/target/classes
+[INFO] ------------------------------------------------------------------------
+[INFO] Reactor Summary:
+[INFO] 
+[INFO] Dagger (Parent) ................................... SUCCESS [0.563s]
+[INFO] Dagger ............................................ SUCCESS [2.578s]
+[INFO] Dagger Compiler ................................... SUCCESS [6.532s]
+[INFO] Examples .......................................... SUCCESS [0.005s]
+[INFO] Examples: Simple .................................. FAILURE [0.392s]
+[INFO] Examples: Android - Simple ........................ SKIPPED
+[INFO] Examples: Android - Activity Graphs ............... SKIPPED
+[INFO] ------------------------------------------------------------------------
+[INFO] BUILD FAILURE
+[INFO] ------------------------------------------------------------------------
+[INFO] Total time: 10.940s
+[INFO] Finished at: Wed Jun 11 09:57:21 PDT 2014
+[INFO] Final Memory: 35M/579M
+[INFO] ------------------------------------------------------------------------
+[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.1:compile (default-compile) on project simple: Fatal error compiling: java.lang.IllegalArgumentException: Incorrect number of type arguments -> [Help 1]
+[ERROR] 
+[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
+[ERROR] Re-run Maven using the -X switch to enable full debug logging.
+[ERROR] 
+[ERROR] For more information about the errors and possible solutions, please read the following articles:
+[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
+[ERROR] 
+[ERROR] After correcting the problems, you can resume the build with the command
+[ERROR]   mvn <goals> -rf :simple
