diff --git a/dagger-1-migration.md b/dagger-1-migration.md
index 1a76a1702..4ad6a0fc3 100644
--- a/dagger-1-migration.md
+++ b/dagger-1-migration.md
@@ -12,12 +12,10 @@ for migrating.
 
 ## Injected types
 
-Dagger 2 continues to rely on [JSR 330](https://jcp.org/en/jsr/detail?id=330)
-for declaring injection sites. All of the
-[types of injection](http://docs.oracle.com/javaee/6/api/javax/inject/Inject.html)
-supported by Dagger 1 (field and constructor) continue to be supported by Dagger
-2, but Dagger 2 supports method injection as well. Dagger 2 ***does not***
-support static injection.
+Dagger 2 continues to rely on [JSR 330] for declaring injection sites. All of
+the [types of injection][Inject] supported by Dagger 1 (field and constructor)
+continue to be supported by Dagger 2, but Dagger 2 supports method injection
+as well. Dagger 2 ***does not*** support static injection.
 
 ## Framework types
 
@@ -192,13 +190,14 @@ error.
 [Component-modules]: /api/latest/dagger/Component.html#modules()
 [component-relationships]: /api/latest/dagger/Component.html#component-relationships
 [component-subcomponents]: /api/latest/dagger/Component.html#subcomponents
+[Inject]: http://docs.oracle.com/javaee/7/api/javax/inject/Inject.html
+[JSR 330]: https://jcp.org/en/jsr/detail?id=330
 [Lazy]: /api/latest/dagger/Lazy.html
 [MembersInjector]: /api/latest/dagger/MembersInjector.html
 [Module]: /api/latest/dagger/Module.html
-[Provides]: /api/latest/dagger/Provides.html
-[Subcomponent]: /api/latest/dagger/Subcomponent.html
-
-
 [Provider]: http://docs.oracle.com/javaee/7/api/javax/inject/Provider.html
+[Provides]: /api/latest/dagger/Provides.html
 [Scope]: http://docs.oracle.com/javaee/7/api/javax/inject/Scope.html
 [Singleton]: http://docs.oracle.com/javaee/7/api/javax/inject/Singleton.html
+[Subcomponent]: /api/latest/dagger/Subcomponent.html
+
diff --git a/users-guide.md b/users-guide.md
index 305862f69..390b6140c 100644
--- a/users-guide.md
+++ b/users-guide.md
@@ -21,9 +21,7 @@ Dagger is a replacement for these `FactoryFactory` classes that implements the
 boilerplate. It allows you to focus on the interesting classes. Declare
 dependencies, specify how to satisfy them, and ship your app.
 
-By building on standard
-[`javax.inject`](http://docs.oracle.com/javaee/7/api/javax/inject/package-summary.html)
-annotations ([JSR 330](https://jcp.org/en/jsr/detail?id=330)), each class is
+By building on standard [`javax.inject`] annotations ([JSR 330]), each class is
 **easy to test**. You don't need a bunch of boilerplate just to swap the
 `RpcCreditCardService` out for a `FakeCreditCardService`.
 
@@ -41,22 +39,20 @@ Dagger 2 is the first to **implement the full stack with generated code**. The
 guiding principle is to generate code that mimics the code that a user might
 have hand-written to ensure that dependency injection is as simple, traceable
 and performant as it can be. For more background on the design, watch
-[this talk](https://www.youtube.com/watch?v=oK_XtfXPkqw)
-([slides](https://docs.google.com/presentation/d/1fby5VeGU9CN8zjw4lAb2QPPsKRxx6mSwCe9q7ECNSJQ/pub?start=false&loop=false&delayms=3000))
-by [+Gregory Kick](https://google.com/+GregoryKick/).
+[this talk](https://youtu.be/oK_XtfXPkqw) ([slides][Dagger Talk Slides]) by
+[+Gregory Kick].
 
 ## Using Dagger
 
 We'll demonstrate dependency injection and Dagger by building a coffee maker.
 For complete sample code that you can compile and run, see Dagger's
-[coffee example](https://github.com/google/dagger/tree/master/examples/simple/src/main/java/coffee).
+[coffee example][CoffeeMaker example].
 
 ### Declaring Dependencies
 
 Dagger constructs instances of your application classes and satisfies their
-dependencies. It uses the
-[`javax.inject.Inject`](http://docs.oracle.com/javaee/7/api/javax/inject/Inject.html)
-annotation to identify which constructors and fields it is interested in.
+dependencies. It uses the [`javax.inject.Inject`] annotation to identify
+which constructors and fields it is interested in.
 
 Use `@Inject` to annotate the constructor that Dagger should use to create
 instances of a class. When a new instance is requested, Dagger will obtain the
@@ -153,13 +149,12 @@ classes are named with a `Module` suffix.
 
 The `@Inject` and `@Provides`-annotated classes form a graph of objects, linked
 by their dependencies. Calling code like an application's `main` method or an
-Android
-[`Application`](http://developer.android.com/reference/android/app/Application.html)
-accesses that graph via a well-defined set of roots. In Dagger 2, that set is
-defined by an interface with methods that have no arguments and return the
-desired type. By applying the [`@Component`][Component] annotation to such an
-interface and passing the [module][Module] types to the `modules` parameter,
-Dagger 2 then fully generates an implementation of that contract.
+Android [`Application`][Android Application] accesses that graph via a
+well-defined set of roots. In Dagger 2, that set is defined by an interface with
+methods that have no arguments and return the desired type. By applying the
+[`@Component`][Component] annotation to such an interface and passing the
+[module][Module] types to the `modules` parameter, Dagger 2 then fully generates
+an implementation of that contract.
 
 ```java
 @Component(modules = DripCoffeeModule.class)
@@ -170,8 +165,8 @@ interface CoffeeShop {
 
 The implementation has the same name as the interface prefixed with `Dagger`.
 Obtain an instance by invoking the `builder()` method on that implementation and
-use the returned [builder](http://en.wikipedia.org/wiki/Builder_pattern) to set
-dependencies and `build()` a new instance.
+use the returned [builder][Builder Pattern] to set dependencies and `build()` a
+new instance.
 
 ```java
 CoffeeShop coffeeShop = DaggerCoffeeShop.builder()
@@ -317,12 +312,11 @@ class BigCoffeeMaker {
 
 ***Note:*** Injecting `Provider<T>` has the possibility of creating confusing
    code, and may be a design smell of mis-scoped or mis-structured objects in
-   your graph.  Often you will want to use a
-   [factory](http://en.wikipedia.org/wiki/Factory_(object-oriented_programming))
-   or a `Lazy<T>` or re-organize the lifetimes and structure of your code to be
-   able to just inject a `T`.  Injecting `Provider<T>` can, however, be a life
-   saver in some cases.  A common use is when you must use a legacy architecture
-   that doesn't line up with your object's natural lifetimes (e.g. servlets are
+   your graph.  Often you will want to use a [factory][Factory Pattern] or a
+   `Lazy<T>` or re-organize the lifetimes and structure of your code to be able
+   to just inject a `T`.  Injecting `Provider<T>` can, however, be a life saver
+   in some cases.  A common use is when you must use a legacy architecture that
+   doesn't line up with your object's natural lifetimes (e.g. servlets are
    singletons by design, but only are valid in the context of request-specfic
    data).
 
@@ -373,11 +367,9 @@ Dependencies may not have multiple qualifier annotations.
 
 ### Compile-time Validation
 
-The Dagger
-[annotation processor](http://docs.oracle.com/javase/6/docs/api/javax/annotation/processing/package-summary.html)
-is strict and will cause a compiler error if any bindings are invalid or
-incomplete. For example, this module is installed in a component, which is
-missing a binding for `Executor`:
+The Dagger [annotation processor][Annotation Processor] is strict and will cause
+a compiler error if any bindings are invalid or incomplete. For example, this
+module is installed in a component, which is missing a binding for `Executor`:
 
 ```java
 @Module
@@ -461,17 +453,30 @@ See the License for the specific language governing permissions and
 limitations under the License.
 ```
 
+<!-- References -->
+
+
+[Android Application]: http://developer.android.com/reference/android/app/Application.html
+[Annotation Processor]: http://docs.oracle.com/javase/6/docs/api/javax/annotation/processing/package-summary.html
+[Builder Pattern]: http://en.wikipedia.org/wiki/Builder_pattern
+[CoffeeMaker Example]: https://github.com/google/dagger/tree/master/examples/simple/src/main/java/coffee
 [Component]: /api/latest/dagger/Component.html
+[Dagger Talk Slides]: https://docs.google.com/presentation/d/1fby5VeGU9CN8zjw4lAb2QPPsKRxx6mSwCe9q7ECNSJQ/pub?start=false&loop=false&delayms=3000
 [DI]: http://en.wikipedia.org/wiki/Dependency_injection
+[Documented]: http://docs.oracle.com/javase/7/docs/api/java/lang/annotation/Documented.html
+[Factory Pattern]: https://en.wikipedia.org/wiki/Factory_(object-oriented_programming)
+[JSR 330]: https://jcp.org/en/jsr/detail?id=330
+[`javax.inject`]: http://docs.oracle.com/javaee/7/api/javax/inject/package-summary.html
+[`javax.inject.Inject`]: http://docs.oracle.com/javaee/7/api/javax/inject/Inject.html
 [Lazy]: /api/latest/dagger/Lazy.html
 [Module]: /api/latest/dagger/Module.html
-[Provides]: /api/latest/dagger/Provides.html
-
-
-
-[Documented]: http://docs.oracle.com/javase/7/docs/api/java/lang/annotation/Documented.html
 [Named]: http://docs.oracle.com/javaee/7/api/javax/inject/Named.html
 [Provider]: http://docs.oracle.com/javaee/7/api/javax/inject/Provider.html
+[Provides]: /api/latest/dagger/Provides.htm
 [Qualifier]: http://docs.oracle.com/javaee/7/api/javax/inject/Qualifier.html
 [Scope]: http://docs.oracle.com/javaee/7/api/javax/inject/Scope.html
 [Singleton]: http://docs.oracle.com/javaee/7/api/javax/inject/Singleton.html
+[+Gregory Kick]: https://google.com/+GregoryKick/
+
+
+
