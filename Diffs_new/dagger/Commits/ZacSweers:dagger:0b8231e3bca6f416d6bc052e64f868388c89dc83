diff --git a/javatests/dagger/internal/codegen/CompilerMode.java b/javatests/dagger/internal/codegen/CompilerMode.java
index 3b4a2e8ea..33aaff116 100644
--- a/javatests/dagger/internal/codegen/CompilerMode.java
+++ b/javatests/dagger/internal/codegen/CompilerMode.java
@@ -21,14 +21,14 @@
 
 /** The configuration options for compiler modes. */
 enum CompilerMode {
-  DEFAULT,
-  EXPERIMENTAL_ANDROID("-Adagger.experimentalAndroidMode=enabled");
+  DEFAULT_MODE,
+  EXPERIMENTAL_ANDROID_MODE("-Adagger.experimentalAndroidMode=enabled");
 
   /** Returns the compiler modes as a list of parameters for parameterized tests */
   static final ImmutableList<Object[]> TEST_PARAMETERS =
       ImmutableList.copyOf(
           new Object[][] {
-            {CompilerMode.DEFAULT}, {CompilerMode.EXPERIMENTAL_ANDROID},
+            {CompilerMode.DEFAULT_MODE}, {CompilerMode.EXPERIMENTAL_ANDROID_MODE},
           });
 
   private final ImmutableList<String> javacopts;
@@ -41,4 +41,12 @@ private CompilerMode(String... javacopts) {
   FluentIterable<String> javacopts() {
     return FluentIterable.from(javacopts);
   }
+
+  /**
+   * Returns a {@link JavaFileBuilder} that builds {@link javax.tools.JavaFileObject}s for this
+   * mode.
+   */
+  JavaFileBuilder javaFileBuilder(String qualifiedName) {
+    return new JavaFileBuilder(this, qualifiedName);
+  }
 }
diff --git a/javatests/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
index 08946fdec..4b08f2547 100644
--- a/javatests/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
@@ -19,6 +19,8 @@
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
 import static dagger.internal.codegen.CodeBlocks.stringLiteral;
+import static dagger.internal.codegen.CompilerMode.DEFAULT_MODE;
+import static dagger.internal.codegen.CompilerMode.EXPERIMENTAL_ANDROID_MODE;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
 import com.google.auto.common.MoreElements;
@@ -273,12 +275,11 @@ public void componentWithInvalidModule() {
         "  Lazy<SomeInjectableType> lazySomeInjectableType();",
         "  Provider<SomeInjectableType> someInjectableTypeProvider();",
         "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerSimpleComponent",
+
+    JavaFileObject generatedComponent =
+        compilerMode
+            .javaFileBuilder("test.DaggerSimpleComponent")
+            .addLines(
                 "package test;",
                 "",
                 "import dagger.Lazy;",
@@ -301,8 +302,9 @@ public void componentWithInvalidModule() {
                 "  @Override",
                 "  public SomeInjectableType someInjectableType() {",
                 "    return new SomeInjectableType();",
-                "  }",
-                "",
+                "  }")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
                 "  @Override",
                 "  public Lazy<SomeInjectableType> lazySomeInjectableType() {",
                 "    return DoubleCheck.lazy(someInjectableTypeProvider());",
@@ -316,45 +318,9 @@ public void componentWithInvalidModule() {
                 "        return someInjectableType();",
                 "      }",
                 "    };",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public SimpleComponent build() {",
-                "      return new DaggerSimpleComponent(this);",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerSimpleComponent",
-                "package test;",
-                "",
-                "import dagger.Lazy;",
-                "import dagger.internal.DoubleCheck;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerSimpleComponent implements SimpleComponent {",
-                "  private DaggerSimpleComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static SimpleComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public SomeInjectableType someInjectableType() {",
-                "    return new SomeInjectableType();",
-                "  }",
-                "",
+                "  }")
+            .addLinesIn(
+                DEFAULT_MODE,
                 "  @Override",
                 "  public Lazy<SomeInjectableType> lazySomeInjectableType() {",
                 "    return DoubleCheck.lazy(SomeInjectableType_Factory.create());",
@@ -363,18 +329,18 @@ public void componentWithInvalidModule() {
                 "  @Override",
                 "  public Provider<SomeInjectableType> someInjectableTypeProvider() {",
                 "    return SomeInjectableType_Factory.create();",
-                "  }",
-                "",
+                "  }")
+            .addLines(
                 "  public static final class Builder {",
-                "    private Builder() {",
-                "    }",
+                "    private Builder() {}",
                 "",
                 "    public SimpleComponent build() {",
                 "      return new DaggerSimpleComponent(this);",
                 "    }",
                 "  }",
-                "}");
-    }
+                "}")
+            .build();
+
     Compilation compilation =
         daggerCompiler()
             .withOptions(compilerMode.javacopts())
@@ -496,12 +462,10 @@ public void componentWithInvalidModule() {
         "  }",
         "}");
 
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerOuterType_SimpleComponent",
+    JavaFileObject generatedComponent =
+        compilerMode
+            .javaFileBuilder("test.DaggerOuterType_SimpleComponent")
+            .addLines(
                 "package test;",
                 "",
                 "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
@@ -528,61 +492,22 @@ public void componentWithInvalidModule() {
                 "  @Override",
                 "  public void inject(OuterType.B b) {",
                 "    injectB(b);",
-                "  }",
-                "",
+                "  }")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
                 "  @CanIgnoreReturnValue",
                 "  private OuterType.B injectB(OuterType.B instance) {",
                 "    OuterType_B_MembersInjector.injectA(instance, a());",
                 "    return instance;",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public OuterType.SimpleComponent build() {",
-                "      return new DaggerOuterType_SimpleComponent(this);",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerOuterType_SimpleComponent",
-                "package test;",
-                "",
-                "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerOuterType_SimpleComponent",
-                "    implements OuterType.SimpleComponent {",
-                "  private DaggerOuterType_SimpleComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static OuterType.SimpleComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public OuterType.A a() {",
-                "    return new OuterType.A();",
-                "  }",
-                "",
-                "  @Override",
-                "  public void inject(OuterType.B b) {",
-                "    injectB(b);",
-                "  }",
-                "",
+                "}")
+            .addLinesIn(
+                DEFAULT_MODE,
                 "  @CanIgnoreReturnValue",
                 "  private OuterType.B injectB(OuterType.B instance) {",
                 "    OuterType_B_MembersInjector.injectA(instance, new OuterType.A());",
                 "    return instance;",
-                "  }",
-                "",
+                "  }")
+            .addLines(
                 "  public static final class Builder {",
                 "    private Builder() {",
                 "    }",
@@ -591,8 +516,9 @@ public void componentWithInvalidModule() {
                 "      return new DaggerOuterType_SimpleComponent(this);",
                 "    }",
                 "  }",
-                "}");
-    }
+                "}")
+            .build();
+
     Compilation compilation =
         daggerCompiler().withOptions(compilerMode.javacopts()).compile(nestedTypesFile);
     assertThat(compilation).succeeded();
@@ -644,12 +570,11 @@ public void componentWithInvalidModule() {
         "interface TestComponent {",
         "  A a();",
         "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
+
+    JavaFileObject generatedComponent =
+        compilerMode
+            .javaFileBuilder("test.DaggerTestComponent")
+            .addLines(
                 "package test;",
                 "",
                 "import dagger.internal.Preconditions;",
@@ -669,8 +594,9 @@ public void componentWithInvalidModule() {
                 "",
                 "  public static TestComponent create() {",
                 "    return new Builder().build();",
-                "  }",
-                "",
+                "  }")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
                 "  private C getCInstance() {",
                 "    return new C();",
                 "  }",
@@ -688,52 +614,9 @@ public void componentWithInvalidModule() {
                 "  @Override",
                 "  public A a() {",
                 "    return new A(getBInstance());",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private TestModule testModule;",
-                "",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      if (testModule == null) {",
-                "        this.testModule = new TestModule();",
-                "      }",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "",
-                "    public Builder testModule(TestModule testModule) {",
-                "      this.testModule = Preconditions.checkNotNull(testModule);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import dagger.internal.Preconditions;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private TestModule testModule;",
-                "",
-                "  private DaggerTestComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
+                "  }")
+            .addLinesIn(
+                DEFAULT_MODE,
                 "  @SuppressWarnings(\"unchecked\")",
                 "  private void initialize(final Builder builder) {",
                 "    this.testModule = builder.testModule;",
@@ -743,13 +626,12 @@ public void componentWithInvalidModule() {
                 "  public A a() {",
                 "    return new A(Preconditions.checkNotNull(",
                 "        testModule.b(new C()), " + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "",
+                "  }")
+            .addLines(
                 "  public static final class Builder {",
                 "    private TestModule testModule;",
                 "",
-                "    private Builder() {",
-                "    }",
+                "    private Builder() {}",
                 "",
                 "    public TestComponent build() {",
                 "      if (testModule == null) {",
@@ -763,8 +645,9 @@ public void componentWithInvalidModule() {
                 "      return this;",
                 "    }",
                 "  }",
-                "}");
-    }
+                "}")
+            .build();
+
     Compilation compilation =
         daggerCompiler()
             .withOptions(compilerMode.javacopts())
@@ -827,12 +710,11 @@ public void componentWithAbstractModule() {
             "interface TestComponent {",
             "  A a();",
             "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
+
+    JavaFileObject generatedComponent =
+        compilerMode
+            .javaFileBuilder("test.DaggerTestComponent")
+            .addLines(
                 "package test;",
                 "",
                 "import dagger.internal.Preconditions;",
@@ -848,8 +730,9 @@ public void componentWithAbstractModule() {
                 "",
                 "  public static TestComponent create() {",
                 "    return new Builder().build();",
-                "  }",
-                "",
+                "  }")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
                 "  private C getCInstance() {",
                 "    return new C();",
                 "  }",
@@ -862,46 +745,16 @@ public void componentWithAbstractModule() {
                 "  @Override",
                 "  public A a() {",
                 "    return new A(getBInstance());",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import dagger.internal.Preconditions;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
+                "  }")
+            .addLinesIn(
+                DEFAULT_MODE,
                 "  @Override",
                 "  public A a() {",
                 "    return new A(Preconditions.checkNotNull(",
                 "        TestModule.b(new C()), " + NPE_FROM_PROVIDES_METHOD + "));",
-                "  }",
-                "",
+                "  }")
+            .addLines(
                 "  public static final class Builder {",
-                "",
                 "    private Builder() {",
                 "    }",
                 "",
@@ -909,8 +762,9 @@ public void componentWithAbstractModule() {
                 "      return new DaggerTestComponent(this);",
                 "    }",
                 "  }",
-                "}");
-    }
+                "}")
+            .build();
+
     Compilation compilation =
         daggerCompiler()
             .withOptions(compilerMode.javacopts())
@@ -1300,12 +1154,11 @@ public void testDefaultPackage() {
         "  void inject(SomeInjectedType instance);",
         "  SomeInjectedType injectAndReturn(SomeInjectedType instance);",
         "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerSimpleComponent",
+
+    JavaFileObject generatedComponent =
+        compilerMode
+            .javaFileBuilder("test.DaggerSimpleComponent")
+            .addLines(
                 "package test;",
                 "",
                 "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
@@ -1321,8 +1174,9 @@ public void testDefaultPackage() {
                 "",
                 "  public static SimpleComponent create() {",
                 "    return new Builder().build();",
-                "  }",
-                "",
+                "  }")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
                 "  private SomeInjectableType getSomeInjectableTypeInstance() {",
                 "    return new SomeInjectableType();",
                 "  }",
@@ -1342,38 +1196,9 @@ public void testDefaultPackage() {
                 "    SomeInjectedType_MembersInjector.injectInjectedField(",
                 "        instance, getSomeInjectableTypeInstance());",
                 "    return instance;",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public SimpleComponent build() {",
-                "      return new DaggerSimpleComponent(this);",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerSimpleComponent",
-                "package test;",
-                "",
-                "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerSimpleComponent implements SimpleComponent {",
-                "  private DaggerSimpleComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static SimpleComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
+                "  }")
+            .addLinesIn(
+                DEFAULT_MODE,
                 "  @Override",
                 "  public void inject(SomeInjectedType instance) {",
                 "    injectSomeInjectedType(instance);",
@@ -1389,8 +1214,8 @@ public void testDefaultPackage() {
                 "    SomeInjectedType_MembersInjector.injectInjectedField(",
                 "        instance, new SomeInjectableType());",
                 "    return instance;",
-                "  }",
-                "",
+                "  }")
+            .addLines(
                 "  public static final class Builder {",
                 "    private Builder() {",
                 "    }",
@@ -1399,8 +1224,9 @@ public void testDefaultPackage() {
                 "      return new DaggerSimpleComponent(this);",
                 "    }",
                 "  }",
-                "}");
-    }
+                "}")
+            .build();
+
     Compilation compilation =
         daggerCompiler()
             .withOptions(compilerMode.javacopts())
@@ -1518,12 +1344,11 @@ public void testDefaultPackage() {
         "interface SimpleComponent {",
         "  SomeInjectedType createAndInject();",
         "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerSimpleComponent",
+
+    JavaFileObject generatedComponent =
+        compilerMode
+            .javaFileBuilder("test.DaggerSimpleComponent")
+            .addLines(
                 "package test;",
                 "",
                 "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
@@ -1539,8 +1364,9 @@ public void testDefaultPackage() {
                 "",
                 "  public static SimpleComponent create() {",
                 "    return new Builder().build();",
-                "  }",
-                "",
+                "  }")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
                 "  private SomeInjectableType getSomeInjectableTypeInstance() {",
                 "    return new SomeInjectableType();",
                 "  }",
@@ -1556,38 +1382,9 @@ public void testDefaultPackage() {
                 "    SomeInjectedType_MembersInjector.injectInjectedField(",
                 "        instance, getSomeInjectableTypeInstance());",
                 "    return instance;",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public SimpleComponent build() {",
-                "      return new DaggerSimpleComponent(this);",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerSimpleComponent",
-                "package test;",
-                "",
-                "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerSimpleComponent implements SimpleComponent {",
-                "  private DaggerSimpleComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static SimpleComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
+                "  }")
+            .addLinesIn(
+                DEFAULT_MODE,
                 "  @Override",
                 "  public SomeInjectedType createAndInject() {",
                 "    return injectSomeInjectedType(",
@@ -1599,8 +1396,8 @@ public void testDefaultPackage() {
                 "    SomeInjectedType_MembersInjector.injectInjectedField(",
                 "        instance, new SomeInjectableType());",
                 "    return instance;",
-                "  }",
-                "",
+                "  }")
+            .addLines(
                 "  public static final class Builder {",
                 "    private Builder() {",
                 "    }",
@@ -1609,8 +1406,9 @@ public void testDefaultPackage() {
                 "      return new DaggerSimpleComponent(this);",
                 "    }",
                 "  }",
-                "}");
-    }
+                "}")
+            .build();
+
     Compilation compilation =
         daggerCompiler()
             .withOptions(compilerMode.javacopts())
@@ -1984,134 +1782,69 @@ public void testDefaultPackage() {
             "interface BComponent {",
             "  InjectedType injectedType();",
             "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerBComponent",
-                "package test;",
-                "",
-                "import dagger.internal.Preconditions;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerBComponent implements BComponent {",
-                "  private AComponent aComponent;",
-                "",
-                "  private DaggerBComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static BComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.aComponent = builder.aComponent;",
-                "  }",
-                "",
-                "  @Override",
-                "  public InjectedType injectedType() {",
-                "    return new InjectedType(",
-                "        Preconditions.checkNotNull(",
-                "            aComponent.someStringInjection(),",
-                "            \"Cannot return null from a non-@Nullable component method\"),",
-                "        aComponent.someIntInjection(),",
-                "        aComponent,",
-                "        Preconditions.checkNotNull(",
-                "            aComponent.someClassInjection(),",
-                "            \"Cannot return null from a non-@Nullable component method\"));",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private AComponent aComponent;",
-                "",
-                "    private Builder() {}",
-                "",
-                "    public BComponent build() {",
-                "      if (aComponent == null) {",
-                "        throw new IllegalStateException(",
-                "            AComponent.class.getCanonicalName() + \" must be set\");",
-                "      }",
-                "      return new DaggerBComponent(this);",
-                "    }",
-                "",
-                "    public Builder aComponent(AComponent aComponent) {",
-                "      this.aComponent = Preconditions.checkNotNull(aComponent);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerBComponent",
-                "package test;",
-                "",
-                "import dagger.internal.Preconditions;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerBComponent implements BComponent {",
-                "  private AComponent aComponent;",
-                "",
-                "  private DaggerBComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static BComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.aComponent = builder.aComponent;",
-                "  }",
-                "",
-                "  @Override",
-                "  public InjectedType injectedType() {",
-                "    return new InjectedType(",
-                "        Preconditions.checkNotNull(",
-                "            aComponent.someStringInjection(),",
-                "            \"Cannot return null from a non-@Nullable component method\"),",
-                "        aComponent.someIntInjection(),",
-                "        aComponent,",
-                "        Preconditions.checkNotNull(",
-                "            aComponent.someClassInjection(),",
-                "            \"Cannot return null from a non-@Nullable component method\"));",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private AComponent aComponent;",
-                "",
-                "    private Builder() {}",
-                "",
-                "    public BComponent build() {",
-                "      if (aComponent == null) {",
-                "        throw new IllegalStateException(",
-                "            AComponent.class.getCanonicalName() + \" must be set\");",
-                "      }",
-                "      return new DaggerBComponent(this);",
-                "    }",
-                "",
-                "    public Builder aComponent(AComponent aComponent) {",
-                "      this.aComponent = Preconditions.checkNotNull(aComponent);",
-                "      return this;",
-                "    }",
-                "  }",
-                "}");
-    }
+
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerBComponent",
+            "package test;",
+            "",
+            "import dagger.internal.Preconditions;",
+            "import javax.annotation.Generated;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerBComponent implements BComponent {",
+            "  private AComponent aComponent;",
+            "",
+            "  private DaggerBComponent(Builder builder) {",
+            "    initialize(builder);",
+            "  }",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static BComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @SuppressWarnings(\"unchecked\")",
+            "  private void initialize(final Builder builder) {",
+            "    this.aComponent = builder.aComponent;",
+            "  }",
+            "",
+            "  @Override",
+            "  public InjectedType injectedType() {",
+            "    return new InjectedType(",
+            "        Preconditions.checkNotNull(",
+            "            aComponent.someStringInjection(),",
+            "            \"Cannot return null from a non-@Nullable component method\"),",
+            "        aComponent.someIntInjection(),",
+            "        aComponent,",
+            "        Preconditions.checkNotNull(",
+            "            aComponent.someClassInjection(),",
+            "            \"Cannot return null from a non-@Nullable component method\"));",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private AComponent aComponent;",
+            "",
+            "    private Builder() {}",
+            "",
+            "    public BComponent build() {",
+            "      if (aComponent == null) {",
+            "        throw new IllegalStateException(",
+            "            AComponent.class.getCanonicalName() + \" must be set\");",
+            "      }",
+            "      return new DaggerBComponent(this);",
+            "    }",
+            "",
+            "    public Builder aComponent(AComponent aComponent) {",
+            "      this.aComponent = Preconditions.checkNotNull(aComponent);",
+            "      return this;",
+            "    }",
+            "  }",
+            "}");
+
     Compilation compilation =
         daggerCompiler()
             .withOptions(compilerMode.javacopts())
@@ -2168,12 +1901,11 @@ public void testDefaultPackage() {
         "  C c();",
         "  X x();",
         "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
+
+    JavaFileObject generatedComponent =
+        compilerMode
+            .javaFileBuilder("test.DaggerTestComponent")
+            .addLines(
                 "package test;",
                 "",
                 "import javax.annotation.Generated;",
@@ -2188,8 +1920,9 @@ public void testDefaultPackage() {
                 "",
                 "  public static TestComponent create() {",
                 "    return new Builder().build();",
-                "  }",
-                "",
+                "  }")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
                 "  private B getBInstance() {",
                 "    return new B(c());",
                 "  }",
@@ -2206,37 +1939,9 @@ public void testDefaultPackage() {
                 "  @Override",
                 "  public X x() {",
                 "    return new X(c());",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
+                "  }")
+            .addLinesIn(
+                DEFAULT_MODE,
                 "  @Override",
                 "  public A a() {",
                 "    return new A(new B(new C()));",
@@ -2250,8 +1955,8 @@ public void testDefaultPackage() {
                 "  @Override",
                 "  public X x() {",
                 "    return new X(new C());",
-                "  }",
-                "",
+                "  }")
+            .addLines(
                 "  public static final class Builder {",
                 "    private Builder() {",
                 "    }",
@@ -2260,8 +1965,9 @@ public void testDefaultPackage() {
                 "      return new DaggerTestComponent(this);",
                 "    }",
                 "  }",
-                "}");
-    }
+                "}")
+            .build();
+
     Compilation compilation =
         daggerCompiler()
             .withOptions(compilerMode.javacopts())
@@ -3232,12 +2938,11 @@ public void nullIncorrectlyReturnedFromNonNullableInlinedProvider() {
                 "    return TestModule.nonNullableString();",
                 "  }",
                 "}"));
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
+
+    JavaFileObject generatedComponent =
+        compilerMode
+            .javaFileBuilder("test.DaggerTestComponent")
+            .addLines(
                 "package test;",
                 "",
                 "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
@@ -3265,55 +2970,16 @@ public void nullIncorrectlyReturnedFromNonNullableInlinedProvider() {
                 "  @Override",
                 "  public void inject(InjectsMember member) {",
                 "    injectInjectsMember(member);",
-                "  }",
-                "",
+                "  }")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
                 "  @CanIgnoreReturnValue",
                 "  private InjectsMember injectInjectsMember(InjectsMember instance) {",
                 "    InjectsMember_MembersInjector.injectMember(instance, nonNullableString());",
                 "    return instance;",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-                "import dagger.internal.Preconditions",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public String nonNullableString() {",
-                "    return Preconditions.checkNotNull(",
-                "        TestModule.nonNullableString(), " + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }",
-                "  @Override",
-                "  public void inject(InjectsMember member) {",
-                "    injectInjectsMember(member);",
-                "  }",
-                "",
+                "  }")
+            .addLinesIn(
+                DEFAULT_MODE,
                 "  @CanIgnoreReturnValue",
                 "  private InjectsMember injectInjectsMember(InjectsMember instance) {",
                 "    InjectsMember_MembersInjector.injectMember(",
@@ -3321,8 +2987,8 @@ public void nullIncorrectlyReturnedFromNonNullableInlinedProvider() {
                 "        Preconditions.checkNotNull(",
                 "            TestModule.nonNullableString(), " + NPE_FROM_PROVIDES_METHOD + "));",
                 "    return instance;",
-                "  }",
-                "",
+                "  }")
+            .addLines(
                 "  public static final class Builder {",
                 "    private Builder() {}",
                 "",
@@ -3330,8 +2996,9 @@ public void nullIncorrectlyReturnedFromNonNullableInlinedProvider() {
                 "      return new DaggerTestComponent(this);",
                 "    }",
                 "  }",
-                "}");
-    }
+                "}")
+            .build();
+
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
         .hasSourceEquivalentTo(generatedComponent);
@@ -3404,12 +3071,11 @@ public void nullCheckingIgnoredWhenProviderReturnsPrimitive() {
                 "    return TestModule.primitiveInteger();",
                 "  }",
                 "}"));
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
+
+    JavaFileObject generatedComponent =
+        compilerMode
+            .javaFileBuilder("test.DaggerTestComponent")
+            .addLines(
                 "package test;",
                 "",
                 "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
@@ -3435,61 +3101,23 @@ public void nullCheckingIgnoredWhenProviderReturnsPrimitive() {
                 "  @Override",
                 "  public void inject(InjectsMember member) {",
                 "    injectInjectsMember(member);",
-                "  }",
-                "",
+                "  }")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
                 "  @CanIgnoreReturnValue",
                 "  private InjectsMember injectInjectsMember(InjectsMember instance) {",
                 "    InjectsMember_MembersInjector.injectMember(instance, nonNullableInteger());",
                 "    return instance;",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Integer nonNullableInteger() {",
-                "    return TestModule.primitiveInteger();",
-                "  }",
-                "",
-                "  @Override",
-                "  public void inject(InjectsMember member) {",
-                "    injectInjectsMember(member);",
-                "  }",
-                "",
+                "  }")
+            .addLinesIn(
+                DEFAULT_MODE,
                 "  @CanIgnoreReturnValue",
                 "  private InjectsMember injectInjectsMember(InjectsMember instance) {",
                 "    InjectsMember_MembersInjector.injectMember(",
                 "        instance, TestModule.primitiveInteger());",
                 "    return instance;",
-                "  }",
-                "",
+                "  }")
+            .addLines(
                 "  public static final class Builder {",
                 "    private Builder() {}",
                 "",
@@ -3497,8 +3125,9 @@ public void nullCheckingIgnoredWhenProviderReturnsPrimitive() {
                 "      return new DaggerTestComponent(this);",
                 "    }",
                 "  }",
-                "}");
-    }
+                "}")
+            .build();
+
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
         .hasSourceEquivalentTo(generatedComponent);
diff --git a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
index 73a19ad62..91c9fc3aa 100644
--- a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
+++ b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
@@ -460,7 +460,7 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
             "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
diff --git a/javatests/dagger/internal/codegen/ElidedFactoriesTest.java b/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
index 2727502b6..9ecb01d75 100644
--- a/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
+++ b/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
@@ -78,7 +78,7 @@ public void simpleComponent() {
             "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerSimpleComponent",
@@ -214,7 +214,7 @@ public void simpleComponent_injectsProviderOf_dependsOnScoped() {
             "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerSimpleComponent",
@@ -383,7 +383,7 @@ public void scopedBinding_onlyUsedInSubcomponent() {
 
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerSimpleComponent",
diff --git a/javatests/dagger/internal/codegen/InaccessibleTypeTest.java b/javatests/dagger/internal/codegen/InaccessibleTypeTest.java
index 1f82d6f0d..2aea035a3 100644
--- a/javatests/dagger/internal/codegen/InaccessibleTypeTest.java
+++ b/javatests/dagger/internal/codegen/InaccessibleTypeTest.java
@@ -89,7 +89,7 @@ public InaccessibleTypeTest(CompilerMode compilerMode) {
         "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
@@ -269,7 +269,7 @@ public InaccessibleTypeTest(CompilerMode compilerMode) {
         "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
diff --git a/javatests/dagger/internal/codegen/JavaFileBuilder.java b/javatests/dagger/internal/codegen/JavaFileBuilder.java
new file mode 100644
index 000000000..9f2ef2797
--- /dev/null
+++ b/javatests/dagger/internal/codegen/JavaFileBuilder.java
@@ -0,0 +1,64 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.internal.codegen;
+
+import static com.google.common.base.Preconditions.checkArgument;
+import static com.google.common.base.Preconditions.checkNotNull;
+
+import com.google.common.collect.ImmutableList;
+import com.google.testing.compile.JavaFileObjects;
+import javax.tools.JavaFileObject;
+
+/**
+ * A fluent API to build a {@link JavaFileObject} appropriate for the current {@linkplain
+ * CompilerMode compiler mode}.
+ *
+ * <p>After creating a builder, you can add lines to the file. Call {@link #addLines(String...)} to
+ * add lines irrespective of the compiler mode. If you want to add different lines for each mode,
+ * call {@link #addLinesIn(CompilerMode, String...)}.
+ */
+final class JavaFileBuilder {
+  private final CompilerMode compilerMode;
+  private final String qualifiedName;
+  private final ImmutableList.Builder<String> sourceLines = ImmutableList.builder();
+
+  /** Creates a builder for a file whose top level type has a given qualified name. */
+  JavaFileBuilder(CompilerMode compilerMode, String qualifiedName) {
+    checkArgument(!qualifiedName.isEmpty());
+    this.compilerMode = checkNotNull(compilerMode);
+    this.qualifiedName = qualifiedName;
+  }
+
+  /** Adds lines no matter what the {@link CompilerMode} is. */
+  JavaFileBuilder addLines(String... lines) {
+    sourceLines.add(lines);
+    return this;
+  }
+
+  /** Adds lines if in the given mode. */
+  JavaFileBuilder addLinesIn(CompilerMode mode, String... lines) {
+    if (compilerMode.equals(mode)) {
+      sourceLines.add(lines);
+    }
+    return this;
+  }
+
+  /** Builds the {@link JavaFileObject}. */
+  JavaFileObject build() {
+    return JavaFileObjects.forSourceLines(qualifiedName, sourceLines.build());
+  }
+}
diff --git a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index 214513499..c8490473d 100644
--- a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -127,7 +127,7 @@ public void mapBindingsWithEnumKey() {
         "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
@@ -672,7 +672,7 @@ public void mapBindingsWithStringKey() {
         "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
@@ -948,7 +948,7 @@ public void mapBindingsWithWrappedKey() {
         "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
@@ -1234,7 +1234,7 @@ public void mapBindingsWithNonProviderValue() {
         "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
index 1e7c745ad..89bb431d6 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
@@ -89,7 +89,7 @@ public void mapBindings() {
         "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
@@ -430,7 +430,7 @@ public void subcomponentOmitsInheritedBindings() {
             "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerParent",
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
index d5cea7ba4..606d17427 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
@@ -122,7 +122,7 @@ public void mapBindings() {
             "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
@@ -601,7 +601,7 @@ public void subcomponentOmitsInheritedBindings() {
             "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerParent",
diff --git a/javatests/dagger/internal/codegen/MapKeyProcessorTest.java b/javatests/dagger/internal/codegen/MapKeyProcessorTest.java
index fc1da0395..da7631351 100644
--- a/javatests/dagger/internal/codegen/MapKeyProcessorTest.java
+++ b/javatests/dagger/internal/codegen/MapKeyProcessorTest.java
@@ -225,7 +225,7 @@ public void mapKeyComponentFileWithDisorderedKeyField() {
         "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
@@ -503,7 +503,7 @@ public void mapKeyComponentFileWithDefaultField() {
         "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
diff --git a/javatests/dagger/internal/codegen/MembersInjectionTest.java b/javatests/dagger/internal/codegen/MembersInjectionTest.java
index e72aeee10..80fca28d1 100644
--- a/javatests/dagger/internal/codegen/MembersInjectionTest.java
+++ b/javatests/dagger/internal/codegen/MembersInjectionTest.java
@@ -160,7 +160,7 @@ public void parentClass_injectedMembersInSupertype() {
         "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
@@ -1334,7 +1334,7 @@ public void accessibility() {
                 "}"));
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
@@ -1643,7 +1643,7 @@ public void publicSupertypeHiddenSubtype() {
     assertThat(compilation).succeeded();
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
diff --git a/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
index 35480e2ab..bc985529b 100644
--- a/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
@@ -105,7 +105,7 @@ public void inlinedOptionalBindings() {
             "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
@@ -309,7 +309,7 @@ public void requestForFuture() {
             "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
diff --git a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
index 16b2b56c0..f2eedcc25 100644
--- a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -220,7 +220,7 @@ public void simpleComponent() {
             "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestClass_SimpleComponent",
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
index 5fc1dad3f..ee22f4534 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
@@ -94,7 +94,7 @@ public void setBindings() {
         "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
@@ -283,7 +283,7 @@ public void inaccessible() {
             "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
@@ -433,7 +433,7 @@ public void subcomponentOmitsInheritedBindings() {
             "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerParent",
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
index 2b1947990..a552437af 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
@@ -97,7 +97,7 @@ public void setBindings() {
         "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
@@ -305,7 +305,7 @@ public void inaccessible() {
             "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
@@ -451,7 +451,7 @@ public void subcomponentOmitsInheritedBindings() {
             "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerParent",
@@ -600,7 +600,7 @@ public void productionComponents() {
         "}");
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
diff --git a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
index b5fe1dd72..9ec77f71a 100644
--- a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
+++ b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
@@ -386,7 +386,7 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
 
     JavaFileObject generatedComponent;
     switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID:
+      case EXPERIMENTAL_ANDROID_MODE:
         generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerParentComponent",
