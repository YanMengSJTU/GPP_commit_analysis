diff --git a/javatests/dagger/android/BUILD b/javatests/dagger/android/BUILD
index 7a3e2d6cd..8fa3dc303 100644
--- a/javatests/dagger/android/BUILD
+++ b/javatests/dagger/android/BUILD
@@ -33,18 +33,3 @@ GenRobolectricTests(
         "@google_bazel_common//third_party/java/truth",
     ],
 )
-
-GenRobolectricTests(
-    name = "android_tests_with_aot",
-    srcs = glob(["*.java"]),
-    javacopts = DOCLINT_HTML_AND_SYNTAX,
-    manifest_values = {"minSdkVersion": "17"},
-    with_aot = True,
-    deps = [
-        "//:dagger_with_compiler",
-        "//java/dagger/android",
-        "@google_bazel_common//third_party/java/guava",
-        "@google_bazel_common//third_party/java/junit",
-        "@google_bazel_common//third_party/java/truth",
-    ],
-)
diff --git a/javatests/dagger/android/support/BUILD b/javatests/dagger/android/support/BUILD
index c51d94fbe..9b87d849b 100644
--- a/javatests/dagger/android/support/BUILD
+++ b/javatests/dagger/android/support/BUILD
@@ -35,20 +35,3 @@ GenRobolectricTests(
         "@google_bazel_common//third_party/java/truth",
     ],
 )
-
-GenRobolectricTests(
-    name = "android-support-tests-with-aot",
-    srcs = glob(["*.java"]),
-    javacopts = DOCLINT_HTML_AND_SYNTAX,
-    with_aot = True,
-    deps = [
-        "//:dagger_with_compiler",
-        "//java/dagger/android",
-        "//java/dagger/android/support",
-        "@androidsdk//com.android.support:appcompat-v7-25.0.0",
-        "@androidsdk//com.android.support:support-fragment-25.0.0",
-        "@google_bazel_common//third_party/java/guava",
-        "@google_bazel_common//third_party/java/junit",
-        "@google_bazel_common//third_party/java/truth",
-    ],
-)
diff --git a/javatests/dagger/android/support/functional/BUILD b/javatests/dagger/android/support/functional/BUILD
index 0c1cb7db3..8f899178f 100644
--- a/javatests/dagger/android/support/functional/BUILD
+++ b/javatests/dagger/android/support/functional/BUILD
@@ -51,18 +51,3 @@ GenRobolectricTests(
         "@google_bazel_common//third_party/java/truth",
     ],
 )
-
-GenRobolectricTests(
-    name = "functional_tests_with_aot",
-    srcs = glob(["*Test.java"]),
-    with_aot = True,
-    deps = [
-        ":functional",
-        "//:android",
-        "//:android-support",
-        "//:dagger_with_compiler",
-        "@androidsdk//com.android.support:support-fragment-25.0.0",
-        "@google_bazel_common//third_party/java/junit",
-        "@google_bazel_common//third_party/java/truth",
-    ],
-)
diff --git a/javatests/dagger/functional/BUILD b/javatests/dagger/functional/BUILD
index 306109bed..bf6e066cb 100644
--- a/javatests/dagger/functional/BUILD
+++ b/javatests/dagger/functional/BUILD
@@ -49,30 +49,3 @@ GenJavaTests(
         "@google_bazel_common//third_party/java/jsr330_inject",
     ],
 )
-
-GenJavaTests(
-    name = "functional_tests_with_aot",
-    srcs = glob(
-        ["**/*.java"],
-        exclude = [
-            "HjarTest.java",
-        ],
-    ),
-    javacopts = DOCLINT_HTML_AND_SYNTAX,
-    lib_javacopts = SOURCE_7_TARGET_7,
-    # NOTE: This should not depend on Guava or jsr305 to ensure that Dagger can be
-    # used without Guava and jsr305 deps.
-    test_only_deps = [
-        "@google_bazel_common//third_party/java/guava:testlib",
-        "@google_bazel_common//third_party/java/guava",
-        "@google_bazel_common//third_party/java/truth",
-        "@google_bazel_common//third_party/java/junit",
-    ],
-    with_aot = True,
-    deps = [
-        "//:dagger_with_compiler",
-        "@google_bazel_common//third_party/java/auto:factory",
-        "@google_bazel_common//third_party/java/auto:value",
-        "@google_bazel_common//third_party/java/jsr330_inject",
-    ],
-)
diff --git a/javatests/dagger/functional/cycle/LongCycleTest.java b/javatests/dagger/functional/cycle/LongCycleTest.java
index 511580ba4..fa62a7dac 100644
--- a/javatests/dagger/functional/cycle/LongCycleTest.java
+++ b/javatests/dagger/functional/cycle/LongCycleTest.java
@@ -43,7 +43,7 @@ public void longCycle() {
    */
   @Test
   public void longCycleHasMoreThanOneInitializeMethod() throws NoSuchMethodException {
-    assume().that(System.getProperty("dagger.mode")).isNotEqualTo("FastInit");
+    assume().that(System.getProperty("dagger.mode")).doesNotContain("FastInit");
     DaggerLongCycle_LongCycleComponent.class
         .getDeclaredMethod("initialize2", DaggerLongCycle_LongCycleComponent.Builder.class);
   }
diff --git a/javatests/dagger/functional/guava/BUILD b/javatests/dagger/functional/guava/BUILD
index 3dacd5494..66492eb74 100644
--- a/javatests/dagger/functional/guava/BUILD
+++ b/javatests/dagger/functional/guava/BUILD
@@ -34,19 +34,3 @@ GenJavaTests(
         "@google_bazel_common//third_party/java/truth",
     ],
 )
-
-GenJavaTests(
-    name = "guava_tests_with_aot",
-    srcs = glob(["**/*.java"]),
-    javacopts = DOCLINT_HTML_AND_SYNTAX,
-    with_aot = True,
-    deps = [
-        "//:dagger_with_compiler",
-        "@google_bazel_common//third_party/java/auto:value",
-        "@google_bazel_common//third_party/java/guava",
-        "@google_bazel_common//third_party/java/jsr305_annotations",
-        "@google_bazel_common//third_party/java/jsr330_inject",
-        "@google_bazel_common//third_party/java/junit",
-        "@google_bazel_common//third_party/java/truth",
-    ],
-)
diff --git a/javatests/dagger/functional/jdk8/BUILD b/javatests/dagger/functional/jdk8/BUILD
index bcab113fe..6b76ba3a7 100644
--- a/javatests/dagger/functional/jdk8/BUILD
+++ b/javatests/dagger/functional/jdk8/BUILD
@@ -35,20 +35,3 @@ GenJavaTests(
         "@google_bazel_common//third_party/java/jsr305_annotations",
     ],
 )
-
-GenJavaTests(
-    name = "jdk8_tests_with_aot",
-    srcs = glob(["**/*.java"]),
-    javacopts = DOCLINT_HTML_AND_SYNTAX,
-    test_only_deps = [
-        "@google_bazel_common//third_party/java/guava",
-        "@google_bazel_common//third_party/java/junit",
-        "@google_bazel_common//third_party/java/truth:truth8",
-    ],
-    with_aot = True,
-    deps = [
-        "//:dagger_with_compiler",
-        "@google_bazel_common//third_party/java/auto:value",
-        "@google_bazel_common//third_party/java/jsr305_annotations",
-    ],
-)
diff --git a/javatests/dagger/functional/producers/BUILD b/javatests/dagger/functional/producers/BUILD
index 3be99c262..2b3db633f 100644
--- a/javatests/dagger/functional/producers/BUILD
+++ b/javatests/dagger/functional/producers/BUILD
@@ -41,21 +41,4 @@ GenJavaTests(
     ],
 )
 
-GenJavaTests(
-    name = "producers-functional-tests-with-aot",
-    srcs = glob(["**/*.java"]),
-    javacopts = SOURCE_7_TARGET_7 + DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
-    with_aot = True,
-    deps = [
-        "//:producers_with_compiler",
-        "@google_bazel_common//third_party/java/auto:value",
-        "@google_bazel_common//third_party/java/guava",
-        "@google_bazel_common//third_party/java/jsr305_annotations",
-        "@google_bazel_common//third_party/java/jsr330_inject",
-        "@google_bazel_common//third_party/java/junit",
-        "@google_bazel_common//third_party/java/mockito",
-        "@google_bazel_common//third_party/java/truth",
-    ],
-)
-
 test_suite(name = "AllTests")
diff --git a/javatests/dagger/functional/subcomponent/SubcomponentTest.java b/javatests/dagger/functional/subcomponent/SubcomponentTest.java
index b93a4df56..428de643d 100644
--- a/javatests/dagger/functional/subcomponent/SubcomponentTest.java
+++ b/javatests/dagger/functional/subcomponent/SubcomponentTest.java
@@ -86,7 +86,7 @@ public void multibindingContributions() {
 
   @Test
   public void unscopedProviders() {
-    assume().that(System.getProperty("dagger.mode")).isNotEqualTo("FastInit");
+    assume().that(System.getProperty("dagger.mode")).doesNotContain("FastInit");
     assertThat(parentGetters.getUnscopedTypeProvider())
         .isSameAs(childComponent.getUnscopedTypeProvider());
     assertThat(parentGetters.getUnscopedTypeProvider())
diff --git a/javatests/dagger/functional/tck/BUILD b/javatests/dagger/functional/tck/BUILD
index 1d153b608..7526bf097 100644
--- a/javatests/dagger/functional/tck/BUILD
+++ b/javatests/dagger/functional/tck/BUILD
@@ -40,21 +40,3 @@ GenJavaTests(
         "@google_bazel_common//third_party/java/junit",
     ],
 )
-
-GenJavaTests(
-    name = "tck_tests_with_aot",
-    srcs = glob(["*.java"]),
-    javacopts = DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
-    lib_javacopts = [
-        "-Adagger.privateMemberValidation=warning",
-        "-Adagger.staticMemberValidation=warning",
-        "-Adagger.ignorePrivateAndStaticInjectionForComponent=enabled",
-    ],
-    with_aot = True,
-    deps = [
-        "//:dagger_with_compiler",
-        "@google_bazel_common//third_party/java/jsr330_inject",
-        "@google_bazel_common//third_party/java/jsr330_inject:tck",
-        "@google_bazel_common//third_party/java/junit",
-    ],
-)
diff --git a/test_defs.bzl b/test_defs.bzl
index 9b1168803..a21fbd823 100644
--- a/test_defs.bzl
+++ b/test_defs.bzl
@@ -18,15 +18,8 @@
 BUILD_VARIANTS = {
     "FastInit": ["-Adagger.fastInit=enabled"],
     "ExperimentalAndroidMode2": ["-Adagger.experimentalAndroidMode2=enabled"],
-}
-
-# TODO(b/72748365): Revert cl/215561379 and cl/217211240 when all functional tests are passing for
-# AOT.
-AOT_BUILD_VARIANTS = {
-    "": [
-        "-Adagger.experimentalAheadOfTimeSubcomponents=enabled",
-    ],
-    "FastInit": [
+    "AheadOfTimeSubcomponents": ["-Adagger.experimentalAheadOfTimeSubcomponents=enabled"],
+    "FastInitAndAheadOfTimeSubcomponents": [
         "-Adagger.fastInit=enabled",
         "-Adagger.experimentalAheadOfTimeSubcomponents=enabled",
     ],
@@ -43,15 +36,13 @@ def GenJavaTests(
         javacopts = None,
         lib_javacopts = None,
         test_javacopts = None,
-        functional = True,
-        with_aot = False):
+        functional = True):
     _GenTests(
         native.java_library,
         native.java_test,
         name,
         srcs,
         deps,
-        with_aot,
         test_only_deps,
         plugins,
         javacopts,
@@ -69,8 +60,7 @@ def GenRobolectricTests(
         javacopts = None,
         lib_javacopts = None,
         test_javacopts = None,
-        manifest_values = None,
-        with_aot = False):
+        manifest_values = None):
     # TODO(ronshapiro): enable these with these instructions:
     # https://docs.bazel.build/versions/master/be/android.html#android_local_test_examples
     # We probably want to import all of Robolectric's dependencies into bazel-common because there
@@ -83,7 +73,6 @@ def _GenTests(
         name,
         srcs,
         deps,
-        with_aot,
         test_only_deps = None,
         plugins = None,
         javacopts = None,
@@ -91,24 +80,22 @@ def _GenTests(
         test_javacopts = None,
         functional = True,
         test_kwargs = {}):
-    if not with_aot:
-        _gen_tests(
-            library_rule_type,
-            test_rule_type,
-            name,
-            srcs,
-            deps,
-            test_only_deps,
-            plugins,
-            javacopts,
-            lib_javacopts,
-            test_javacopts,
-            test_kwargs = test_kwargs,
-        )
+    _gen_tests(
+        library_rule_type,
+        test_rule_type,
+        name,
+        srcs,
+        deps,
+        test_only_deps,
+        plugins,
+        javacopts,
+        lib_javacopts,
+        test_javacopts,
+        test_kwargs = test_kwargs,
+    )
 
     if functional:
-        build_variants = AOT_BUILD_VARIANTS if with_aot else BUILD_VARIANTS
-        for (variant_name, extra_javacopts) in build_variants.items():
+        for (variant_name, extra_javacopts) in BUILD_VARIANTS.items():
             variant_javacopts = (javacopts or []) + extra_javacopts
             _gen_tests(
                 library_rule_type,
@@ -123,7 +110,6 @@ def _GenTests(
                 test_javacopts,
                 variant_name,
                 test_kwargs = test_kwargs,
-                with_aot = with_aot,
             )
 
 def _gen_tests(
@@ -138,9 +124,8 @@ def _gen_tests(
         lib_javacopts,
         test_javacopts,
         variant_name = None,
-        test_kwargs = {},
-        with_aot = None):
-    if variant_name and len(variant_name):
+        test_kwargs = {}):
+    if variant_name:
         suffix = "_" + variant_name
         tags = [variant_name]
 
@@ -184,12 +169,8 @@ def _gen_tests(
         if package_name.find("javatests/") != -1:
             prefix_path = "javatests/"
         test_class = (package_name + "/" + test_name).rpartition(prefix_path)[2].replace("/", ".")
-        test_rule_name = test_name
-        if with_aot:
-            test_rule_name += "_with_aot"
-        test_rule_name += suffix
         test_rule_type(
-            name = test_rule_name,
+            name = test_name + suffix,
             srcs = [test_file],
             javacopts = (javacopts or []) + (test_javacopts or []),
             jvm_flags = jvm_flags,
