diff --git a/java/dagger/internal/codegen/ModifiableBindingExpressions.java b/java/dagger/internal/codegen/ModifiableBindingExpressions.java
index 7ec0e1d79..cf44f4540 100644
--- a/java/dagger/internal/codegen/ModifiableBindingExpressions.java
+++ b/java/dagger/internal/codegen/ModifiableBindingExpressions.java
@@ -17,8 +17,10 @@
 package dagger.internal.codegen;
 
 import static dagger.internal.codegen.BindingRequest.bindingRequest;
+import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PUBLIC;
 
+import com.google.common.collect.ImmutableSet;
 import com.squareup.javapoet.MethodSpec;
 import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
 import dagger.internal.codegen.ModifiableBindingMethods.ModifiableBindingMethod;
@@ -77,13 +79,16 @@ ModifiableBindingType registerComponentMethodIfModifiable(
       ModifiableBindingMethod modifiableBindingMethod) {
     if (shouldModifyKnownBinding(modifiableBindingMethod)) {
       MethodSpec baseMethod = modifiableBindingMethod.methodSpec();
+      boolean markMethodFinal =
+          knownModifiableBindingWillBeFinalized(modifiableBindingMethod)
+              // no need to mark the method final if the component implementation will be final
+              && generatedComponentModel.isAbstract();
       return Optional.of(
           ModifiableBindingMethod.implement(
               modifiableBindingMethod,
               MethodSpec.methodBuilder(baseMethod.name)
                   .addModifiers(PUBLIC)
-                  // TODO(b/72748365): Mark method as final if binding should not be further
-                  // modified.
+                  .addModifiers(markMethodFinal ? ImmutableSet.of(FINAL) : ImmutableSet.of())
                   .returns(baseMethod.returnType)
                   .addAnnotation(Override.class)
                   .addCode(
@@ -92,7 +97,7 @@ ModifiableBindingType registerComponentMethodIfModifiable(
                           .getModifiableBindingMethodImplementation(
                               modifiableBindingMethod, generatedComponentModel))
                   .build(),
-              knownModifiableBindingWillBeFinalized(modifiableBindingMethod)));
+              markMethodFinal));
     }
     return Optional.empty();
   }
diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
index 395de0436..b5b3f8184 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
@@ -103,7 +103,7 @@ public void missingBindings_fromComponentMethod() {
             "    protected LeafImpl() { super(); }",
             "",
             "    @Override",
-            "    public MissingInLeaf missingFromComponentMethod() {",
+            "    public final MissingInLeaf missingFromComponentMethod() {",
             "      return AncestorModule_SatisfiedInAncestorFactory.proxySatisfiedInAncestor();",
             "    }",
             "  }",
@@ -249,7 +249,7 @@ public void missingBindings_dependsOnMissingBinding() {
             "    protected LeafImpl() { super(); }",
             "",
             "    @Override",
-            "    public MissingInLeaf getMissingInLeaf() {",
+            "    public final MissingInLeaf getMissingInLeaf() {",
             "      return AncestorModule_SatisfiedInAncestorFactory.proxySatisfiedInAncestor();",
             "    }",
             "  }",
@@ -337,7 +337,7 @@ public void missingBindings_satisfiedInGreatAncestor() {
             "      protected LeafImpl() { super(); }",
             "",
             "      @Override",
-            "      public MissingInLeaf getMissingInLeaf() {",
+            "      public final MissingInLeaf getMissingInLeaf() {",
             "        return SatisfiesMissingBindingModule_SatisfyFactory.proxySatisfy();",
             "      }",
             "    }",
@@ -991,7 +991,7 @@ public void optionalBindings_satisfiedInAncestor() {
             "    protected LeafImpl() { super(); }",
             "",
             "    @Override",
-            "    public Optional<SatisfiedInAncestor> satisfiedInAncestor() {",
+            "    public final Optional<SatisfiedInAncestor> satisfiedInAncestor() {",
             "      return Optional.of(AncestorModule_SatisfiedInAncestorFactory",
             "          .proxySatisfiedInAncestor());",
             "    }",
@@ -1132,7 +1132,7 @@ public void optionalBindings_satisfiedInGrandAncestor() {
             "      protected LeafImpl() { super(); }",
             "",
             "      @Override",
-            "      public Optional<SatisfiedInGrandAncestor> satisfiedInGrandAncestor() {",
+            "      public final Optional<SatisfiedInGrandAncestor> satisfiedInGrandAncestor() {",
             "        return Optional.of(",
             "            GreatAncestorModule_SatisfiedInGrandAncestorFactory",
             "                .proxySatisfiedInGrandAncestor());",
@@ -1196,7 +1196,8 @@ public void optionalBindings_nonComponentMethodDependencySatisfiedInAncestor() {
             "  protected DaggerLeaf() {}",
             "",
             "  @Override",
-            "  public RequiresOptionalSatisfiedInAncestor requiresOptionalSatisfiedInAncestor() {",
+            "  public RequiresOptionalSatisfiedInAncestor",
+            "      requiresOptionalSatisfiedInAncestor() {",
             "    return LeafModule_ProvideRequiresOptionalSatisfiedInAncestorFactory",
             "        .proxyProvideRequiresOptionalSatisfiedInAncestor(",
             "            getOptionalOfSatisfiedInAncestor());",
@@ -1253,7 +1254,7 @@ public void optionalBindings_nonComponentMethodDependencySatisfiedInAncestor() {
             "    protected LeafImpl() { super(); }",
             "",
             "    @Override",
-            "    public Optional<SatisfiedInAncestor> getOptionalOfSatisfiedInAncestor() {",
+            "    public final Optional<SatisfiedInAncestor> getOptionalOfSatisfiedInAncestor() {",
             "      return Optional.of(",
             "          AncestorModule_SatisfiedInAncestorFactory.proxySatisfiedInAncestor());",
             "    }",
@@ -1393,7 +1394,7 @@ public void optionalBindings_boundInAncestorAndSatisfiedInGrandAncestor() {
             "      protected LeafImpl() { super(); }",
             "",
             "      @Override",
-            "      public Optional<SatisfiedInGrandAncestor>",
+            "      public final Optional<SatisfiedInGrandAncestor>",
             "          boundInAncestorSatisfiedInGrandAncestor() {",
             "        return Optional.of(",
             "            GrandAncestorModule_ProvideSatisfiedInGrandAncestorFactory",
@@ -2210,7 +2211,7 @@ public void setMultibindings_newSubclass() {
             "    protected LeafImpl() { super(); }",
             "",
             "    @Override",
-            "    public RequiresInAncestorSet missingWithSetDependency() {",
+            "    public final RequiresInAncestorSet missingWithSetDependency() {",
             "      return DaggerAncestor.this.getRequiresInAncestorSet();",
             "    }",
             "  }",
@@ -2876,7 +2877,7 @@ public void provisionOverInjection_providedInAncestor() {
             "    protected LeafImpl() { super(); }",
             "",
             "    @Override",
-            "    public ProvidedInAncestor injectedInLeaf() {",
+            "    public final ProvidedInAncestor injectedInLeaf() {",
             "      return AncestorModule_ProvideProvidedInAncestorFactory",
             "          .proxyProvideProvidedInAncestor();",
             "    }",
@@ -3012,7 +3013,7 @@ public void provisionOverInjection_providedInGrandAncestor() {
             "      protected LeafImpl() { super(); }",
             "",
             "      @Override",
-            "      public ProvidedInGrandAncestor injectedInLeaf() {",
+            "      public final ProvidedInGrandAncestor injectedInLeaf() {",
             "        return GrandAncestorModule_ProvideProvidedInGrandAncestorFactory",
             "            .proxyProvideProvidedInGrandAncestor();",
             "      }",
@@ -3130,7 +3131,7 @@ public void provisionOverInjection_indirectDependency() {
             "    }",
             "",
             "    @Override",
-            "    public ProvidedInAncestor getProvidedInAncestor() {",
+            "    public final ProvidedInAncestor getProvidedInAncestor() {",
             "      return AncestorModule_ProvideProvidedInAncestorFactory",
             "          .proxyProvideProvidedInAncestor();",
             "    }",
