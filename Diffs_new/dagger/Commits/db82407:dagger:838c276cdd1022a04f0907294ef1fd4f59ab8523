diff --git a/examples/pom.xml b/examples/pom.xml
index 708635f1a..7e809b403 100644
--- a/examples/pom.xml
+++ b/examples/pom.xml
@@ -31,6 +31,8 @@
 
   <modules>
     <module>simple</module>
+    <module>simple2</module>
+    <module>simple3</module>
     <module>android-simple</module>
     <module>android-activity-graphs</module>
   </modules>
diff --git a/examples/simple2/pom.xml b/examples/simple2/pom.xml
new file mode 100644
index 000000000..067f96764
--- /dev/null
+++ b/examples/simple2/pom.xml
@@ -0,0 +1,46 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ Copyright (C) 2012 Square, Inc.
+
+  Licensed under the Apache License, Version 2.0 (the "License");
+  you may not use this file except in compliance with the License.
+  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+
+  <parent>
+    <groupId>com.google.dagger.example</groupId>
+    <artifactId>dagger-example-parent</artifactId>
+    <version>2.1-SNAPSHOT</version>
+  </parent>
+
+  <artifactId>simple2</artifactId>
+  <name>Examples: Simple2</name>
+
+  <properties>
+      <dagger.version>${project.version}</dagger.version>
+  </properties>
+
+  <dependencies>
+    <dependency>
+      <groupId>com.google.dagger</groupId>
+      <artifactId>dagger</artifactId>
+      <version>${dagger.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>com.google.dagger</groupId>
+      <artifactId>dagger-compiler</artifactId>
+      <version>${dagger.version}</version>
+      <optional>true</optional>
+    </dependency>
+  </dependencies>
+</project>
diff --git a/examples/simple2/src/main/java/coffee2/CoffeeApp.java b/examples/simple2/src/main/java/coffee2/CoffeeApp.java
new file mode 100644
index 000000000..3cffffb2c
--- /dev/null
+++ b/examples/simple2/src/main/java/coffee2/CoffeeApp.java
@@ -0,0 +1,19 @@
+package coffee2;
+
+import dagger.Component;
+import javax.inject.Singleton;
+
+import coffee2.DaggerCoffeeApp_Coffee;
+
+public class CoffeeApp {
+  @Singleton
+  @Component(modules = { DripCoffeeModule.class })
+  public interface Coffee {
+    CoffeeMaker maker();
+  }
+
+  public static void main(String[] args) {
+    Coffee coffee = DaggerCoffeeApp_Coffee.builder().build();
+    coffee.maker().brew();
+  }
+}
diff --git a/examples/simple2/src/main/java/coffee2/CoffeeMaker.java b/examples/simple2/src/main/java/coffee2/CoffeeMaker.java
new file mode 100644
index 000000000..2da65dd53
--- /dev/null
+++ b/examples/simple2/src/main/java/coffee2/CoffeeMaker.java
@@ -0,0 +1,26 @@
+package coffee2;
+
+import dagger.Lazy;
+import javax.inject.Inject;
+import javax.inject.Named;
+
+class CoffeeMaker {
+	private final Lazy<Heater> heater; // Create a possibly costly heater only when we use it.
+	private final Pump pump;
+
+	@Inject
+	CoffeeMaker(//
+			@Named("water")
+			Lazy<Heater> heater, //
+			Pump pump) {
+		this.heater = heater;
+		this.pump = pump;
+	}
+
+	public void brew() {
+		heater.get().on();
+		pump.pump();
+		System.out.println(" [_]P coffee2! [_]P ");
+		heater.get().off();
+	}
+}
diff --git a/examples/simple2/src/main/java/coffee2/DripCoffeeModule.java b/examples/simple2/src/main/java/coffee2/DripCoffeeModule.java
new file mode 100644
index 000000000..6d9b10c89
--- /dev/null
+++ b/examples/simple2/src/main/java/coffee2/DripCoffeeModule.java
@@ -0,0 +1,17 @@
+package coffee2;
+
+import dagger.Module;
+import dagger.Provides;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+@Module(includes = PumpModule.class)
+class DripCoffeeModule {
+	@Provides
+	@Singleton
+	@Named("water")
+	Heater provideHeater() {
+		return new ElectricHeater();
+	}
+}
diff --git a/examples/simple2/src/main/java/coffee2/ElectricHeater.java b/examples/simple2/src/main/java/coffee2/ElectricHeater.java
new file mode 100644
index 000000000..f67cf75bc
--- /dev/null
+++ b/examples/simple2/src/main/java/coffee2/ElectricHeater.java
@@ -0,0 +1,18 @@
+package coffee2;
+
+class ElectricHeater implements Heater {
+  boolean heating;
+
+  @Override public void on() {
+    System.out.println("~ ~ ~ heating ~ ~ ~");
+    this.heating = true;
+  }
+
+  @Override public void off() {
+    this.heating = false;
+  }
+
+  @Override public boolean isHot() {
+    return heating;
+  }
+}
diff --git a/examples/simple2/src/main/java/coffee2/Heater.java b/examples/simple2/src/main/java/coffee2/Heater.java
new file mode 100644
index 000000000..cc4d3a417
--- /dev/null
+++ b/examples/simple2/src/main/java/coffee2/Heater.java
@@ -0,0 +1,7 @@
+package coffee2;
+
+interface Heater {
+  void on();
+  void off();
+  boolean isHot();
+}
diff --git a/examples/simple2/src/main/java/coffee2/Pump.java b/examples/simple2/src/main/java/coffee2/Pump.java
new file mode 100644
index 000000000..a0640a6ec
--- /dev/null
+++ b/examples/simple2/src/main/java/coffee2/Pump.java
@@ -0,0 +1,5 @@
+package coffee2;
+
+interface Pump {
+  void pump();
+}
diff --git a/examples/simple2/src/main/java/coffee2/PumpModule.java b/examples/simple2/src/main/java/coffee2/PumpModule.java
new file mode 100644
index 000000000..45b2286fa
--- /dev/null
+++ b/examples/simple2/src/main/java/coffee2/PumpModule.java
@@ -0,0 +1,11 @@
+package coffee2;
+
+import dagger.Module;
+import dagger.Provides;
+
+@Module
+class PumpModule {
+  @Provides Pump providePump(Thermosiphon pump) {
+    return pump;
+  }
+}
diff --git a/examples/simple2/src/main/java/coffee2/Thermosiphon.java b/examples/simple2/src/main/java/coffee2/Thermosiphon.java
new file mode 100644
index 000000000..54b3a32bc
--- /dev/null
+++ b/examples/simple2/src/main/java/coffee2/Thermosiphon.java
@@ -0,0 +1,19 @@
+package coffee2;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+class Thermosiphon implements Pump {
+  private final Heater heater;
+
+  @Inject @Named("water")
+  Thermosiphon(Heater heater) {
+    this.heater = heater;
+  }
+
+  @Override public void pump() {
+    if (heater.isHot()) {
+      System.out.println("=> => pumping => =>");
+    }
+  }
+}
diff --git a/examples/simple3/pom.xml b/examples/simple3/pom.xml
new file mode 100644
index 000000000..2ba6dc90f
--- /dev/null
+++ b/examples/simple3/pom.xml
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ Copyright (C) 2012 Square, Inc.
+
+  Licensed under the Apache License, Version 2.0 (the "License");
+  you may not use this file except in compliance with the License.
+  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+
+  <parent>
+    <groupId>com.google.dagger.example</groupId>
+    <artifactId>dagger-example-parent</artifactId>
+    <version>2.1-SNAPSHOT</version>
+  </parent>
+
+  <artifactId>simple3</artifactId>
+  <name>Examples: Simple3</name>
+
+  <dependencies>
+    <dependency>
+      <groupId>com.google.dagger</groupId>
+      <artifactId>dagger</artifactId>
+      <version>${project.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>com.google.dagger</groupId>
+      <artifactId>dagger-compiler</artifactId>
+      <version>${project.version}</version>
+      <optional>true</optional>
+    </dependency>
+  </dependencies>
+</project>
diff --git a/examples/simple3/src/main/java/coffee3/ElectricHeater.java b/examples/simple3/src/main/java/coffee3/ElectricHeater.java
new file mode 100644
index 000000000..a35149699
--- /dev/null
+++ b/examples/simple3/src/main/java/coffee3/ElectricHeater.java
@@ -0,0 +1,27 @@
+package coffee3;
+
+class ElectricHeater implements Heater {
+  boolean heating;
+  private String type;
+  
+  public ElectricHeater() {
+	  this("");
+  }
+
+  public ElectricHeater(String type) {
+	  this.type = type;
+  }
+
+  @Override public void on() {
+    System.out.printf("~ ~ ~ heating(%s) ~ ~ ~\n", type);
+    this.heating = true;
+  }
+
+  @Override public void off() {
+    this.heating = false;
+  }
+
+  @Override public boolean isHot() {
+    return heating;
+  }
+}
diff --git a/examples/simple3/src/main/java/coffee3/ExpensiveCoffeeApp.java b/examples/simple3/src/main/java/coffee3/ExpensiveCoffeeApp.java
new file mode 100644
index 000000000..36f7dba69
--- /dev/null
+++ b/examples/simple3/src/main/java/coffee3/ExpensiveCoffeeApp.java
@@ -0,0 +1,17 @@
+package coffee3;
+
+import dagger.Component;
+import javax.inject.Singleton;
+
+public class ExpensiveCoffeeApp {
+  @Singleton
+  @Component(modules = { ExpensiveCoffeeModule.class })
+  public interface Coffee {
+    ExpensiveCoffeeMaker maker();
+  }
+
+  public static void main(String[] args) {
+    Coffee coffee = DaggerExpensiveCoffeeApp_Coffee.builder().build();
+    coffee.maker().brew();
+  }
+}
diff --git a/examples/simple3/src/main/java/coffee3/ExpensiveCoffeeMaker.java b/examples/simple3/src/main/java/coffee3/ExpensiveCoffeeMaker.java
new file mode 100644
index 000000000..5a3300a17
--- /dev/null
+++ b/examples/simple3/src/main/java/coffee3/ExpensiveCoffeeMaker.java
@@ -0,0 +1,31 @@
+package coffee3;
+
+import dagger.Lazy;
+import javax.inject.Inject;
+import javax.inject.Named;
+
+// uses field injection, rather than constructor injection
+class ExpensiveCoffeeMaker {
+	@Inject
+	@Named("water")
+	Lazy<Heater> waterHeater;
+
+	@Inject
+	@Named("hot plate")
+	Lazy<Heater> hotplateHeater;
+
+	@Inject
+	Pump pump;
+
+	@Inject
+	ExpensiveCoffeeMaker() {
+	}
+
+	public void brew() {
+		waterHeater.get().on();
+		hotplateHeater.get().on();
+		pump.pump();
+		System.out.println(" [_]P coffee3! [_]P ");
+		waterHeater.get().off();
+	}
+}
diff --git a/examples/simple3/src/main/java/coffee3/ExpensiveCoffeeModule.java b/examples/simple3/src/main/java/coffee3/ExpensiveCoffeeModule.java
new file mode 100644
index 000000000..08a0315f6
--- /dev/null
+++ b/examples/simple3/src/main/java/coffee3/ExpensiveCoffeeModule.java
@@ -0,0 +1,24 @@
+package coffee3;
+
+import dagger.Module;
+import dagger.Provides;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+@Module(includes = PumpModule.class)
+class ExpensiveCoffeeModule {
+	@Provides
+	@Singleton
+	@Named("hot plate")
+	Heater provideHotplateHeater() {
+		return new ElectricHeater("hot plate");
+	}
+
+	@Provides
+	@Singleton
+	@Named("water")
+	Heater provideWaterHeater() {
+		return new ElectricHeater("water");
+	}
+}
diff --git a/examples/simple3/src/main/java/coffee3/Heater.java b/examples/simple3/src/main/java/coffee3/Heater.java
new file mode 100644
index 000000000..8664c7a89
--- /dev/null
+++ b/examples/simple3/src/main/java/coffee3/Heater.java
@@ -0,0 +1,7 @@
+package coffee3;
+
+interface Heater {
+  void on();
+  void off();
+  boolean isHot();
+}
diff --git a/examples/simple3/src/main/java/coffee3/Pump.java b/examples/simple3/src/main/java/coffee3/Pump.java
new file mode 100644
index 000000000..635dc69d3
--- /dev/null
+++ b/examples/simple3/src/main/java/coffee3/Pump.java
@@ -0,0 +1,5 @@
+package coffee3;
+
+interface Pump {
+  void pump();
+}
diff --git a/examples/simple3/src/main/java/coffee3/PumpModule.java b/examples/simple3/src/main/java/coffee3/PumpModule.java
new file mode 100644
index 000000000..b4194d057
--- /dev/null
+++ b/examples/simple3/src/main/java/coffee3/PumpModule.java
@@ -0,0 +1,11 @@
+package coffee3;
+
+import dagger.Module;
+import dagger.Provides;
+
+@Module
+class PumpModule {
+  @Provides Pump providePump(Thermosiphon pump) {
+    return pump;
+  }
+}
diff --git a/examples/simple3/src/main/java/coffee3/Thermosiphon.java b/examples/simple3/src/main/java/coffee3/Thermosiphon.java
new file mode 100644
index 000000000..76e4e5dcc
--- /dev/null
+++ b/examples/simple3/src/main/java/coffee3/Thermosiphon.java
@@ -0,0 +1,19 @@
+package coffee3;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+class Thermosiphon implements Pump {
+  private final Heater heater;
+
+  @Inject @Named("water")
+  Thermosiphon(Heater heater) {
+    this.heater = heater;
+  }
+
+  @Override public void pump() {
+    if (heater.isHot()) {
+      System.out.println("=> => pumping => =>");
+    }
+  }
+}
