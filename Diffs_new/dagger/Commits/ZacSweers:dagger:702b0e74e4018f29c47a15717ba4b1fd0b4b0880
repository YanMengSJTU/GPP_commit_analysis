diff --git a/java/dagger/internal/codegen/AbstractComponentWriter.java b/java/dagger/internal/codegen/AbstractComponentWriter.java
index d4aa47f43..8b917b8b7 100644
--- a/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -38,7 +38,6 @@
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.type.TypeKind.VOID;
 
-import com.google.auto.common.MoreElements;
 import com.google.auto.common.MoreTypes;
 import com.google.common.base.MoreObjects;
 import com.google.common.collect.ImmutableMap;
@@ -358,15 +357,13 @@ private void implementInterfaceMethods() {
         graph.componentDescriptor().componentMethods()) {
       if (componentMethod.dependencyRequest().isPresent()) {
         DependencyRequest interfaceRequest = componentMethod.dependencyRequest().get();
-        ExecutableElement methodElement =
-            MoreElements.asExecutable(componentMethod.methodElement());
+        ExecutableElement methodElement = componentMethod.methodElement();
         ExecutableType requestType =
             MoreTypes.asExecutable(types.asMemberOf(componentType, methodElement));
         MethodSignature signature =
             MethodSignature.fromExecutableType(
                 methodElement.getSimpleName().toString(), requestType);
-        if (!interfaceMethodSignatures.contains(signature)) {
-          interfaceMethodSignatures.add(signature);
+        if (interfaceMethodSignatures.add(signature)) {
           MethodSpec.Builder interfaceMethod =
               MethodSpec.overriding(methodElement, componentType, types);
           List<? extends VariableElement> parameters = methodElement.getParameters();
diff --git a/java/dagger/internal/codegen/BindingExpression.java b/java/dagger/internal/codegen/BindingExpression.java
index 34e9583fd..7dd85e4df 100644
--- a/java/dagger/internal/codegen/BindingExpression.java
+++ b/java/dagger/internal/codegen/BindingExpression.java
@@ -207,19 +207,12 @@ private BindingExpression create(
         case PROVISION:
           if (!provisionBinding.scope().isPresent()
               && provisionBinding.bindingElement().isPresent()) {
-            Optional<ComponentRequirement> moduleRequirement =
-                provisionBinding.requiresModuleInstance()
-                    ? Optional.of(
-                        ComponentRequirement.forModule(
-                            provisionBinding.contributingModule().get().asType()))
-                    : Optional.empty();
             return new SimpleMethodBindingExpression(
                 compilerOptions,
                 provisionBinding,
                 bindingExpression,
                 componentBindingExpressions,
                 generatedComponentModel,
-                moduleRequirement,
                 componentRequirementFields);
           }
           // fall through
diff --git a/java/dagger/internal/codegen/SimpleMethodBindingExpression.java b/java/dagger/internal/codegen/SimpleMethodBindingExpression.java
index de83e7b65..4586c3d83 100644
--- a/java/dagger/internal/codegen/SimpleMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/SimpleMethodBindingExpression.java
@@ -31,6 +31,7 @@
 import com.squareup.javapoet.TypeName;
 import dagger.internal.codegen.InjectionMethods.ProvisionMethod;
 import java.util.Optional;
+import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.type.DeclaredType;
 
@@ -43,7 +44,6 @@
   private final ProvisionBinding provisionBinding;
   private final ComponentBindingExpressions componentBindingExpressions;
   private final GeneratedComponentModel generatedComponentModel;
-  private final Optional<ComponentRequirement> moduleRequirement;
   private final ComponentRequirementFields componentRequirementFields;
 
   SimpleMethodBindingExpression(
@@ -52,7 +52,6 @@
       BindingExpression delegate,
       ComponentBindingExpressions componentBindingExpressions,
       GeneratedComponentModel generatedComponentModel,
-      Optional<ComponentRequirement> moduleRequirement,
       ComponentRequirementFields componentRequirementFields) {
     super(delegate);
     checkArgument(
@@ -64,7 +63,6 @@
     this.provisionBinding = provisionBinding;
     this.componentBindingExpressions = componentBindingExpressions;
     this.generatedComponentModel = generatedComponentModel;
-    this.moduleRequirement = moduleRequirement;
     this.componentRequirementFields = componentRequirementFields;
   }
 
@@ -150,7 +148,14 @@ private CodeBlock injectMembers(CodeBlock instance) {
   }
 
   private Optional<CodeBlock> moduleReference(ClassName requestingClass) {
-    return moduleRequirement.map(
-        requirement -> componentRequirementFields.getExpression(requirement, requestingClass));
+    return provisionBinding.requiresModuleInstance()
+        ? provisionBinding
+            .contributingModule()
+            .map(Element::asType)
+            .map(ComponentRequirement::forModule)
+            .map(
+                requirement ->
+                    componentRequirementFields.getExpression(requirement, requestingClass))
+        : Optional.empty();
   }
 }
