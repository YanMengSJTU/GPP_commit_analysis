diff --git a/WORKSPACE b/WORKSPACE
index c819ffb7e..311809ed2 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -73,8 +73,8 @@ maven_jar(
 
 maven_jar(
     name = "com_google_auto_auto_common",
-    artifact = "com.google.auto:auto-common:0.8",
-    sha1 = "c6f7af0e57b9d69d81b05434ef9f3c5610d498c4",
+    artifact = "com.google.auto:auto-common:0.9",
+    sha1 = "766dd79e7e81cfefec890ffd6d63aa2807538def",
 )
 
 maven_jar(
diff --git a/java/dagger/internal/codegen/SourceFileGenerator.java b/java/dagger/internal/codegen/SourceFileGenerator.java
index 0c1b01ccc..4c592a062 100644
--- a/java/dagger/internal/codegen/SourceFileGenerator.java
+++ b/java/dagger/internal/codegen/SourceFileGenerator.java
@@ -18,13 +18,13 @@
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
+import com.google.auto.common.GeneratedAnnotationSpecs;
 import com.google.common.base.Throwables;
 import com.squareup.javapoet.AnnotationSpec;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.JavaFile;
 import com.squareup.javapoet.TypeSpec;
 import java.util.Optional;
-import javax.annotation.Generated;
 import javax.annotation.processing.Filer;
 import javax.annotation.processing.Messager;
 import javax.lang.model.element.Element;
@@ -40,18 +40,19 @@
 abstract class SourceFileGenerator<T> {
   private static final String GENERATED_COMMENTS = "https://google.github.io/dagger";
 
-  private static final AnnotationSpec GENERATED =
-      AnnotationSpec.builder(Generated.class)
-          .addMember("value", "$S", "dagger.internal.codegen.ComponentProcessor")
-          .addMember("comments", "$S", GENERATED_COMMENTS)
-          .build();
-
   private final Filer filer;
-  private final boolean generatedAnnotationAvailable;
+  private final Optional<AnnotationSpec> generatedAnnotationSpec;
 
   SourceFileGenerator(Filer filer, Elements elements) {
     this.filer = checkNotNull(filer);
-    generatedAnnotationAvailable = elements.getTypeElement("javax.annotation.Generated") != null;
+    Class<?> processor = null;
+    try {
+      processor = Class.forName("dagger.internal.codegen.ComponentProcessor.class");
+    } catch (ClassNotFoundException e) {
+      // cannot happen
+    }
+    this.generatedAnnotationSpec =
+        GeneratedAnnotationSpecs.generatedAnnotationSpec(elements, processor, GENERATED_COMMENTS);
   }
 
   /**
@@ -86,13 +87,13 @@ void generate(T input) throws SourceFileGenerationException {
 
   private JavaFile buildJavaFile(
       ClassName generatedTypeName, TypeSpec.Builder typeSpecBuilder) {
-    if (generatedAnnotationAvailable) {
-      typeSpecBuilder.addAnnotation(GENERATED);
+    if (generatedAnnotationSpec.isPresent()) {
+      typeSpecBuilder.addAnnotation(generatedAnnotationSpec.get());
     }
     JavaFile.Builder javaFileBuilder =
         JavaFile.builder(generatedTypeName.packageName(), typeSpecBuilder.build())
             .skipJavaLangImports(true);
-    if (!generatedAnnotationAvailable) {
+    if (!generatedAnnotationSpec.isPresent()) {
       javaFileBuilder.addFileComment("Generated by Dagger ($L).", GENERATED_COMMENTS);
     }
     return javaFileBuilder.build();
