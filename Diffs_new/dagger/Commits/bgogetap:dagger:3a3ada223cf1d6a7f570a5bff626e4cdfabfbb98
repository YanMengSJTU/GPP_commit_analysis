diff --git a/java/dagger/internal/codegen/BindingExpression.java b/java/dagger/internal/codegen/BindingExpression.java
index 6eab1cd10..d09347897 100644
--- a/java/dagger/internal/codegen/BindingExpression.java
+++ b/java/dagger/internal/codegen/BindingExpression.java
@@ -170,7 +170,7 @@ private BindingExpression create(
           inlineProvisionBindingExpression(frameworkInstanceBindingExpression);
 
       // TODO(user): Implement private methods for scoped bindings
-      if (compilerOptions.experimentalAndroidMode() && !resolvedBindings.scope().isPresent()) {
+      if (!resolvedBindings.scope().isPresent()) {
         switch (resolvedBindings.contributionBinding().bindingKind()) {
           // TODO(user): Consider using PrivateMethodBindingExpression for other/all BEs?
           case SYNTHETIC_MULTIBOUND_SET:
@@ -188,6 +188,7 @@ private BindingExpression create(
                 componentName,
                 generatedComponentModel,
                 inlineBindingExpression,
+                compilerOptions,
                 types,
                 elements);
           default:
diff --git a/java/dagger/internal/codegen/PrivateMethodBindingExpression.java b/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
index 3625f1b06..cd85424b9 100644
--- a/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
@@ -51,6 +51,7 @@
   private final Map<DependencyRequest.Kind, String> methodNames =
       new EnumMap<>(DependencyRequest.Kind.class);
   private final ContributionBinding binding;
+  private final CompilerOptions compilerOptions;
   private final DaggerTypes types;
   private final Elements elements;
 
@@ -59,6 +60,7 @@
       ClassName componentName,
       GeneratedComponentModel generatedComponentModel,
       BindingExpression delegate,
+      CompilerOptions compilerOptions,
       DaggerTypes types,
       Elements elements) {
     super(resolvedBindings);
@@ -66,6 +68,7 @@
     this.generatedComponentModel = generatedComponentModel;
     this.delegate = delegate;
     binding = resolvedBindings.contributionBinding();
+    this.compilerOptions = compilerOptions;
     this.types = types;
     this.elements = elements;
   }
@@ -73,6 +76,10 @@
   @Override
   Expression getComponentMethodExpression(DependencyRequest request, ClassName requestingClass) {
     checkArgument(request.bindingKey().equals(resolvedBindings().bindingKey()));
+    if (ignorePrivateMethodStrategy(request.kind())) {
+      return delegate.getDependencyExpression(request.kind(), requestingClass);
+    }
+
     return findComponentMethod(request.kind())
             .map(method -> method.dependencyRequest().get().equals(request))
             .orElse(false)
@@ -83,14 +90,12 @@ Expression getComponentMethodExpression(DependencyRequest request, ClassName req
   @Override
   Expression getDependencyExpression(
       DependencyRequest.Kind requestKind, ClassName requestingClass) {
-    Optional<ComponentMethodDescriptor> componentMethod = findComponentMethod(requestKind);
-    if (requestKind.equals(DependencyRequest.Kind.INSTANCE)
-        && binding.dependencies().isEmpty()
-        && !componentMethod.isPresent()) {
+    if (ignorePrivateMethodStrategy(requestKind) || isNullaryProvisionMethod(requestKind)) {
       return delegate.getDependencyExpression(requestKind, requestingClass);
     }
 
     if (!methodNames.containsKey(requestKind)) {
+      Optional<ComponentMethodDescriptor> componentMethod = findComponentMethod(requestKind);
       String name =
           componentMethod.isPresent()
               ? componentMethod.get().methodElement().getSimpleName().toString()
@@ -108,6 +113,17 @@ Expression getDependencyExpression(
     return Expression.create(returnType(requestKind), invocation);
   }
 
+  private boolean ignorePrivateMethodStrategy(DependencyRequest.Kind requestKind) {
+    return !compilerOptions.experimentalAndroidMode()
+        && !requestKind.equals(DependencyRequest.Kind.INSTANCE);
+  }
+
+  private boolean isNullaryProvisionMethod(DependencyRequest.Kind requestKind) {
+    return requestKind.equals(DependencyRequest.Kind.INSTANCE)
+        && binding.dependencies().isEmpty()
+        && !findComponentMethod(requestKind).isPresent();
+  }
+
   /** Returns the first component method associated with this request kind, if one exists. */
   private Optional<ComponentMethodDescriptor> findComponentMethod(
       DependencyRequest.Kind requestKind) {
diff --git a/javatests/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
index b67a93cb6..e30569fe3 100644
--- a/javatests/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
@@ -302,35 +302,35 @@ public void componentWithInvalidModule() {
                 "  @Override",
                 "  public SomeInjectableType someInjectableType() {",
                 "    return new SomeInjectableType();",
-                "  }")
+                "  }",
+                "",
+                "  @Override",
+                "  public Lazy<SomeInjectableType> lazySomeInjectableType() {")
             .addLinesIn(
                 EXPERIMENTAL_ANDROID_MODE,
-                "  @Override",
-                "  public Lazy<SomeInjectableType> lazySomeInjectableType() {",
-                "    return DoubleCheck.lazy(someInjectableTypeProvider());",
+                "    return DoubleCheck.lazy(someInjectableTypeProvider());")
+            .addLinesIn(
+                DEFAULT_MODE,
+                "    return DoubleCheck.lazy(SomeInjectableType_Factory.create());")
+            .addLines(
                 "  }",
                 "",
                 "  @Override",
-                "  public Provider<SomeInjectableType> someInjectableTypeProvider() {",
+                "  public Provider<SomeInjectableType> someInjectableTypeProvider() {")
+            .addLinesIn(
+                EXPERIMENTAL_ANDROID_MODE,
                 "    return new Provider<SomeInjectableType>() {",
                 "      @Override",
                 "      public SomeInjectableType get() {",
                 "        return someInjectableType();",
                 "      }",
-                "    };",
-                "  }")
+                "    };")
             .addLinesIn(
                 DEFAULT_MODE,
-                "  @Override",
-                "  public Lazy<SomeInjectableType> lazySomeInjectableType() {",
-                "    return DoubleCheck.lazy(SomeInjectableType_Factory.create());",
+                "    return SomeInjectableType_Factory.create();")
+            .addLines(
                 "  }",
                 "",
-                "  @Override",
-                "  public Provider<SomeInjectableType> someInjectableTypeProvider() {",
-                "    return SomeInjectableType_Factory.create();",
-                "  }")
-            .addLines(
                 "  public static final class Builder {",
                 "    private Builder() {}",
                 "",
@@ -492,22 +492,14 @@ public void componentWithInvalidModule() {
                 "  @Override",
                 "  public void inject(OuterType.B b) {",
                 "    injectB(b);",
-                "  }")
-            .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                "  }",
+                "",
                 "  @CanIgnoreReturnValue",
                 "  private OuterType.B injectB(OuterType.B instance) {",
                 "    OuterType_B_MembersInjector.injectA(instance, a());",
                 "    return instance;",
-                "}")
-            .addLinesIn(
-                DEFAULT_MODE,
-                "  @CanIgnoreReturnValue",
-                "  private OuterType.B injectB(OuterType.B instance) {",
-                "    OuterType_B_MembersInjector.injectA(instance, new OuterType.A());",
-                "    return instance;",
-                "  }")
-            .addLines(
+                "}",
+                "",
                 "  public static final class Builder {",
                 "    private Builder() {",
                 "    }",
@@ -594,9 +586,8 @@ public void componentWithInvalidModule() {
                 "",
                 "  public static TestComponent create() {",
                 "    return new Builder().build();",
-                "  }")
-            .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                "  }",
+                "",
                 "  private B getBInstance() {",
                 "    return Preconditions.checkNotNull(",
                 "        testModule.b(new C()), " + NPE_FROM_PROVIDES_METHOD + ");",
@@ -610,20 +601,8 @@ public void componentWithInvalidModule() {
                 "  @Override",
                 "  public A a() {",
                 "    return new A(getBInstance());",
-                "  }")
-            .addLinesIn(
-                DEFAULT_MODE,
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.testModule = builder.testModule;",
                 "  }",
                 "",
-                "  @Override",
-                "  public A a() {",
-                "    return new A(Preconditions.checkNotNull(",
-                "        testModule.b(new C()), " + NPE_FROM_PROVIDES_METHOD + ");",
-                "  }")
-            .addLines(
                 "  public static final class Builder {",
                 "    private TestModule testModule;",
                 "",
@@ -726,9 +705,8 @@ public void componentWithAbstractModule() {
                 "",
                 "  public static TestComponent create() {",
                 "    return new Builder().build();",
-                "  }")
-            .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                "  }",
+                "",
                 "  private B getBInstance() {",
                 "    return Preconditions.checkNotNull(",
                 "        TestModule.b(new C()), " + NPE_FROM_PROVIDES_METHOD + ");",
@@ -737,15 +715,8 @@ public void componentWithAbstractModule() {
                 "  @Override",
                 "  public A a() {",
                 "    return new A(getBInstance());",
-                "  }")
-            .addLinesIn(
-                DEFAULT_MODE,
-                "  @Override",
-                "  public A a() {",
-                "    return new A(Preconditions.checkNotNull(",
-                "        TestModule.b(new C()), " + NPE_FROM_PROVIDES_METHOD + "));",
-                "  }")
-            .addLines(
+                "  }",
+                "",
                 "  public static final class Builder {",
                 "    private Builder() {",
                 "    }",
@@ -1869,9 +1840,7 @@ public void testDefaultPackage() {
                 "",
                 "  public static TestComponent create() {",
                 "    return new Builder().build();",
-                "  }")
-            .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                "  }",
                 "  private B getBInstance() {",
                 "    return new B(c());",
                 "  }",
@@ -1888,24 +1857,8 @@ public void testDefaultPackage() {
                 "  @Override",
                 "  public X x() {",
                 "    return new X(c());",
-                "  }")
-            .addLinesIn(
-                DEFAULT_MODE,
-                "  @Override",
-                "  public A a() {",
-                "    return new A(new B(new C()));",
-                "  }",
-                "",
-                "  @Override",
-                "  public C c() {",
-                "    return new C();",
                 "  }",
                 "",
-                "  @Override",
-                "  public X x() {",
-                "    return new X(new C());",
-                "  }")
-            .addLines(
                 "  public static final class Builder {",
                 "    private Builder() {",
                 "    }",
@@ -2919,25 +2872,13 @@ public void nullIncorrectlyReturnedFromNonNullableInlinedProvider() {
                 "  @Override",
                 "  public void inject(InjectsMember member) {",
                 "    injectInjectsMember(member);",
-                "  }")
-            .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                "  }",
+                "",
                 "  @CanIgnoreReturnValue",
                 "  private InjectsMember injectInjectsMember(InjectsMember instance) {",
                 "    InjectsMember_MembersInjector.injectMember(instance, nonNullableString());",
                 "    return instance;",
-                "  }")
-            .addLinesIn(
-                DEFAULT_MODE,
-                "  @CanIgnoreReturnValue",
-                "  private InjectsMember injectInjectsMember(InjectsMember instance) {",
-                "    InjectsMember_MembersInjector.injectMember(",
-                "        instance,",
-                "        Preconditions.checkNotNull(",
-                "            TestModule.nonNullableString(), " + NPE_FROM_PROVIDES_METHOD + "));",
-                "    return instance;",
-                "  }")
-            .addLines(
+                "  }",
                 "  public static final class Builder {",
                 "    private Builder() {}",
                 "",
@@ -3050,23 +2991,14 @@ public void nullCheckingIgnoredWhenProviderReturnsPrimitive() {
                 "  @Override",
                 "  public void inject(InjectsMember member) {",
                 "    injectInjectsMember(member);",
-                "  }")
-            .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
+                "  }",
+                "",
                 "  @CanIgnoreReturnValue",
                 "  private InjectsMember injectInjectsMember(InjectsMember instance) {",
                 "    InjectsMember_MembersInjector.injectMember(instance, nonNullableInteger());",
                 "    return instance;",
-                "  }")
-            .addLinesIn(
-                DEFAULT_MODE,
-                "  @CanIgnoreReturnValue",
-                "  private InjectsMember injectInjectsMember(InjectsMember instance) {",
-                "    InjectsMember_MembersInjector.injectMember(",
-                "        instance, TestModule.primitiveInteger());",
-                "    return instance;",
-                "  }")
-            .addLines(
+                "  }",
+                "",
                 "  public static final class Builder {",
                 "    private Builder() {}",
                 "",
diff --git a/javatests/dagger/internal/codegen/InaccessibleTypeTest.java b/javatests/dagger/internal/codegen/InaccessibleTypeTest.java
index cbcbce28f..11fdaca02 100644
--- a/javatests/dagger/internal/codegen/InaccessibleTypeTest.java
+++ b/javatests/dagger/internal/codegen/InaccessibleTypeTest.java
@@ -87,105 +87,56 @@ public InaccessibleTypeTest(CompilerMode compilerMode) {
         "interface TestComponent {",
         "  PublicClass publicClass();",
         "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import foreign.NoDepClass_Factory;",
-                "import foreign.NonPublicClass1_Factory;",
-                "import foreign.NonPublicClass2_Factory;",
-                "import foreign.PublicClass;",
-                "import foreign.PublicClass_Factory;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private Object getNonPublicClass1Instance() {",
-                "    return NonPublicClass1_Factory.newNonPublicClass1(",
-                "        NoDepClass_Factory.newNoDepClass());",
-                "  }",
-                "",
-                "  private Object getNonPublicClass2Instance() {",
-                "    return NonPublicClass2_Factory.newNonPublicClass2(",
-                "        NoDepClass_Factory.newNoDepClass());",
-                "  }",
-                "",
-                "  @Override",
-                "  public PublicClass publicClass() {",
-                "    return PublicClass_Factory.newPublicClass(",
-                "        getNonPublicClass1Instance(), ",
-                "        getNonPublicClass2Instance(), ",
-                "        NoDepClass_Factory.newNoDepClass());",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import foreign.NoDepClass_Factory;",
-                "import foreign.NonPublicClass1_Factory;",
-                "import foreign.NonPublicClass2_Factory;",
-                "import foreign.PublicClass;",
-                "import foreign.PublicClass_Factory;",
-                "import javax.annotation.Generated;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public PublicClass publicClass() {",
-                "    return PublicClass_Factory.newPublicClass(",
-                "        NonPublicClass1_Factory.newNonPublicClass1(",
-                "            NoDepClass_Factory.newNoDepClass()),",
-                "        NonPublicClass2_Factory.newNonPublicClass2(",
-                "            NoDepClass_Factory.newNoDepClass()),",
-                "        NoDepClass_Factory.newNoDepClass());",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {",
-                "    }",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerTestComponent",
+            "package test;",
+            "",
+            "import foreign.NoDepClass_Factory;",
+            "import foreign.NonPublicClass1_Factory;",
+            "import foreign.NonPublicClass2_Factory;",
+            "import foreign.PublicClass;",
+            "import foreign.PublicClass_Factory;",
+            "import javax.annotation.Generated;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerTestComponent implements TestComponent {",
+            "  private DaggerTestComponent(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static TestComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  private Object getNonPublicClass1Instance() {",
+            "    return NonPublicClass1_Factory.newNonPublicClass1(",
+            "        NoDepClass_Factory.newNoDepClass());",
+            "  }",
+            "",
+            "  private Object getNonPublicClass2Instance() {",
+            "    return NonPublicClass2_Factory.newNonPublicClass2(",
+            "        NoDepClass_Factory.newNoDepClass());",
+            "  }",
+            "",
+            "  @Override",
+            "  public PublicClass publicClass() {",
+            "    return PublicClass_Factory.newPublicClass(",
+            "        getNonPublicClass1Instance(), ",
+            "        getNonPublicClass2Instance(), ",
+            "        NoDepClass_Factory.newNoDepClass());",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {}",
+            "",
+            "    public TestComponent build() {",
+            "      return new DaggerTestComponent(this);",
+            "    }",
+            "  }",
+            "}");
     assertAbout(javaSources())
         .that(
             ImmutableList.of(
diff --git a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index 2a3b4ec10..752e7194b 100644
--- a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -466,6 +466,11 @@ public void mapBindingsWithInaccessibleKeys() {
                 "    return new Builder().build();",
                 "  }",
                 "",
+                "  private Map getMapOfPackagePrivateEnumAndIntegerInstance() {",
+                "    return ImmutableMap.of(",
+                "        MapModule_EnumKeyFactory.mapKey(), MapModule.enumKey());",
+                "  }",
+                "",
                 "  @SuppressWarnings(\"unchecked\")",
                 "  private void initialize(final Builder builder) {",
                 "    this.mapOfClassOfAndIntegerProvider =",
@@ -505,8 +510,7 @@ public void mapBindingsWithInaccessibleKeys() {
                 "",
                 "  @Override",
                 "  public Object inaccessibleEnum() {",
-                "    return ImmutableMap.of(",
-                "        MapModule_EnumKeyFactory.mapKey(), MapModule.enumKey());",
+                "    return getMapOfPackagePrivateEnumAndIntegerInstance();",
                 "  }",
                 "",
                 "  @Override",
diff --git a/javatests/dagger/internal/codegen/MembersInjectionTest.java b/javatests/dagger/internal/codegen/MembersInjectionTest.java
index 8c51d630a..208bb3e40 100644
--- a/javatests/dagger/internal/codegen/MembersInjectionTest.java
+++ b/javatests/dagger/internal/codegen/MembersInjectionTest.java
@@ -1284,115 +1284,59 @@ public void accessibility() {
                 "    ((Inaccessible) instance).method((Foo) foo);",
                 "  }",
                 "}"));
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-                "import javax.annotation.Generated;",
-                "import other.Foo_Factory;",
-                "import other.Inaccessible_Factory;",
-                "import other.Inaccessible_MembersInjector;",
-                "import other.UsesInaccessible;",
-                "import other.UsesInaccessible_Factory;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private Object getInaccessibleInstance() {",
-                "    return injectInaccessible(Inaccessible_Factory.newInaccessible());",
-                "  }",
-                "",
-                "  @Override",
-                "  public UsesInaccessible usesInaccessible() {",
-                "    return UsesInaccessible_Factory.newUsesInaccessible(",
-                "        getInaccessibleInstance());",
-                "  }",
-                "",
-                // TODO(ronshapiro): if possible, it would be great to rename "instance", but we
-                // need to make sure that this doesn't conflict with any framework field in this or
-                // any parent component
-                "  @CanIgnoreReturnValue",
-                "  private Object injectInaccessible(Object instance) {",
-                "    Inaccessible_MembersInjector.injectFoo(instance, Foo_Factory.newFoo());",
-                "    Inaccessible_MembersInjector.injectMethod(instance, Foo_Factory.newFoo());",
-                "    return instance;",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-                "import javax.annotation.Generated;",
-                "import other.Foo_Factory;",
-                "import other.Inaccessible_Factory;",
-                "import other.Inaccessible_MembersInjector;",
-                "import other.UsesInaccessible;",
-                "import other.UsesInaccessible_Factory;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public UsesInaccessible usesInaccessible() {",
-                "    return UsesInaccessible_Factory.newUsesInaccessible(",
-                "        injectInaccessible(Inaccessible_Factory.newInaccessible()));",
-                "  }",
-                "",
-                // TODO(ronshapiro): if possible, it would be great to rename "instance", but we
-                // need to make sure that this doesn't conflict with any framework field in this or
-                // any parent component
-                "  @CanIgnoreReturnValue",
-                "  private Object injectInaccessible(Object instance) {",
-                "    Inaccessible_MembersInjector.injectFoo(instance, Foo_Factory.newFoo());",
-                "    Inaccessible_MembersInjector.injectMethod(",
-                "        instance, Foo_Factory.newFoo());",
-                "    return instance;",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerTestComponent",
+            "package test;",
+            "",
+            "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
+            "import javax.annotation.Generated;",
+            "import other.Foo_Factory;",
+            "import other.Inaccessible_Factory;",
+            "import other.Inaccessible_MembersInjector;",
+            "import other.UsesInaccessible;",
+            "import other.UsesInaccessible_Factory;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerTestComponent implements TestComponent {",
+            "  private DaggerTestComponent(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static TestComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  private Object getInaccessibleInstance() {",
+            "    return injectInaccessible(Inaccessible_Factory.newInaccessible());",
+            "  }",
+            "",
+            "  @Override",
+            "  public UsesInaccessible usesInaccessible() {",
+            "    return UsesInaccessible_Factory.newUsesInaccessible(",
+            "        getInaccessibleInstance());",
+            "  }",
+            "",
+            // TODO(ronshapiro): if possible, it would be great to rename "instance", but we
+            // need to make sure that this doesn't conflict with any framework field in this or
+            // any parent component
+            "  @CanIgnoreReturnValue",
+            "  private Object injectInaccessible(Object instance) {",
+            "    Inaccessible_MembersInjector.injectFoo(instance, Foo_Factory.newFoo());",
+            "    Inaccessible_MembersInjector.injectMethod(instance, Foo_Factory.newFoo());",
+            "    return instance;",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {}",
+            "",
+            "    public TestComponent build() {",
+            "      return new DaggerTestComponent(this);",
+            "    }",
+            "  }",
+            "}");
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
         .hasSourceEquivalentTo(generatedComponent);
@@ -1589,109 +1533,57 @@ public void publicSupertypeHiddenSubtype() {
             .withOptions(compilerMode.javacopts())
             .compile(foo, supertype, subtype, injectsSubtype, component);
     assertThat(compilation).succeeded();
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-                "import javax.annotation.Generated;",
-                "import other.Foo_Factory;",
-                "import other.InjectsSubtype;",
-                "import other.InjectsSubtype_Factory;",
-                "import other.Subtype_Factory;",
-                "import other.Supertype;",
-                "import other.Supertype_MembersInjector;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private Object getSubtypeInstance() {",
-                "    return injectSubtype(Subtype_Factory.newSubtype());",
-                "  }",
-                "",
-                "  @Override",
-                "  public InjectsSubtype injectsSubtype() {",
-                "    return InjectsSubtype_Factory.newInjectsSubtype(getSubtypeInstance());",
-                "  }",
-                "",
-                "  @CanIgnoreReturnValue",
-                "  private Object injectSubtype(Object instance) {",
-                "    Supertype_MembersInjector.injectT(",
-                "        (Supertype) instance, Foo_Factory.newFoo());",
-                "    return instance;",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-                "import javax.annotation.Generated;",
-                "import other.Foo_Factory;",
-                "import other.InjectsSubtype;",
-                "import other.InjectsSubtype_Factory;",
-                "import other.Subtype_Factory;",
-                "import other.Supertype;",
-                "import other.Supertype_MembersInjector;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public InjectsSubtype injectsSubtype() {",
-                "    return InjectsSubtype_Factory.newInjectsSubtype(",
-                "        injectSubtype(Subtype_Factory.newSubtype()));",
-                "  }",
-                "",
-                "  @CanIgnoreReturnValue",
-                "  private Object injectSubtype(Object instance) {",
-                "    Supertype_MembersInjector.injectT(",
-                "        (Supertype) instance, Foo_Factory.newFoo());",
-                "    return instance;",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerTestComponent",
+            "package test;",
+            "",
+            "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
+            "import javax.annotation.Generated;",
+            "import other.Foo_Factory;",
+            "import other.InjectsSubtype;",
+            "import other.InjectsSubtype_Factory;",
+            "import other.Subtype_Factory;",
+            "import other.Supertype;",
+            "import other.Supertype_MembersInjector;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerTestComponent implements TestComponent {",
+            "  private DaggerTestComponent(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static TestComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  private Object getSubtypeInstance() {",
+            "    return injectSubtype(Subtype_Factory.newSubtype());",
+            "  }",
+            "",
+            "  @Override",
+            "  public InjectsSubtype injectsSubtype() {",
+            "    return InjectsSubtype_Factory.newInjectsSubtype(getSubtypeInstance());",
+            "  }",
+            "",
+            "  @CanIgnoreReturnValue",
+            "  private Object injectSubtype(Object instance) {",
+            "    Supertype_MembersInjector.injectT(",
+            "        (Supertype) instance, Foo_Factory.newFoo());",
+            "    return instance;",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {}",
+            "",
+            "    public TestComponent build() {",
+            "      return new DaggerTestComponent(this);",
+            "    }",
+            "  }",
+            "}");
+
     assertThat(compilation)
         .generatedSourceFile("test.DaggerTestComponent")
         .hasSourceEquivalentTo(generatedComponent);
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
index a58eea147..c7e076e17 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
@@ -215,106 +215,55 @@ public void inaccessible() {
             "interface TestComponent {",
             "  UsesInaccessible usesInaccessible();",
             "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import dagger.internal.Preconditions;",
-                "import dagger.internal.SetBuilder;",
-                "import java.util.Collections;",
-                "import java.util.Set;",
-                "import javax.annotation.Generated;",
-                "import other.TestModule_EmptySetFactory;",
-                "import other.UsesInaccessible;",
-                "import other.UsesInaccessible_Factory;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private Set getSetOfInaccessible2Instance() {",
-                "    return SetBuilder.newSetBuilder(1)",
-                "        .addAll(Preconditions.checkNotNull(",
-                "            TestModule_EmptySetFactory.proxyEmptySet(),",
-                "            " + NPE_FROM_PROVIDES + "))",
-                "        .build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public UsesInaccessible usesInaccessible() {",
-                "    return UsesInaccessible_Factory.newUsesInaccessible(",
-                "        (Set) Collections.emptySet(),",
-                "        (Set) getSetOfInaccessible2Instance());",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import dagger.internal.Preconditions;",
-                "import dagger.internal.SetBuilder;",
-                "import java.util.Collections;",
-                "import java.util.Set;",
-                "import javax.annotation.Generated;",
-                "import other.TestModule_EmptySetFactory;",
-                "import other.UsesInaccessible;",
-                "import other.UsesInaccessible_Factory;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public UsesInaccessible usesInaccessible() {",
-                "    return UsesInaccessible_Factory.newUsesInaccessible(",
-                "        (Set) Collections.emptySet(),",
-                "        (Set) SetBuilder.newSetBuilder(1)",
-                "            .addAll(Preconditions.checkNotNull(",
-                "                TestModule_EmptySetFactory.proxyEmptySet(),",
-                "                " + NPE_FROM_PROVIDES + "))",
-                "            .build());",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerTestComponent",
+            "package test;",
+            "",
+            "import dagger.internal.Preconditions;",
+            "import dagger.internal.SetBuilder;",
+            "import java.util.Collections;",
+            "import java.util.Set;",
+            "import javax.annotation.Generated;",
+            "import other.TestModule_EmptySetFactory;",
+            "import other.UsesInaccessible;",
+            "import other.UsesInaccessible_Factory;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerTestComponent implements TestComponent {",
+            "  private DaggerTestComponent(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static TestComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  private Set getSetOfInaccessible2Instance() {",
+            "    return SetBuilder.newSetBuilder(1)",
+            "        .addAll(Preconditions.checkNotNull(",
+            "            TestModule_EmptySetFactory.proxyEmptySet(),",
+            "            " + NPE_FROM_PROVIDES + "))",
+            "        .build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public UsesInaccessible usesInaccessible() {",
+            "    return UsesInaccessible_Factory.newUsesInaccessible(",
+            "        (Set) Collections.emptySet(),",
+            "        (Set) getSetOfInaccessible2Instance());",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {}",
+            "",
+            "    public TestComponent build() {",
+            "      return new DaggerTestComponent(this);",
+            "    }",
+            "  }",
+            "}");
     Compilation compilation =
         daggerCompilerWithoutGuava()
             .compile(module, inaccessible, inaccessible2, usesInaccessible, componentFile);
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
index 671554590..efbd88644 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
@@ -227,102 +227,53 @@ public void inaccessible() {
             "interface TestComponent {",
             "  UsesInaccessible usesInaccessible();",
             "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.common.collect.ImmutableSet;",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Set;",
-                "import javax.annotation.Generated;",
-                "import other.TestModule_EmptySetFactory;",
-                "import other.UsesInaccessible;",
-                "import other.UsesInaccessible_Factory;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private Set getSetOfInaccessible2Instance() {",
-                "    return ImmutableSet.copyOf(",
-                "        Preconditions.checkNotNull(",
-                "            TestModule_EmptySetFactory.proxyEmptySet(),",
-                "            " + NPE_FROM_PROVIDES + "));",
-                "  }",
-                "",
-                "  @Override",
-                "  public UsesInaccessible usesInaccessible() {",
-                "    return UsesInaccessible_Factory.newUsesInaccessible(",
-                "        (Set) ImmutableSet.of(),",
-                "        (Set) getSetOfInaccessible2Instance());",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.common.collect.ImmutableSet;",
-                "import dagger.internal.Preconditions;",
-                "import java.util.Set;",
-                "import javax.annotation.Generated;",
-                "import other.TestModule_EmptySetFactory;",
-                "import other.UsesInaccessible;",
-                "import other.UsesInaccessible_Factory;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public UsesInaccessible usesInaccessible() {",
-                "    return UsesInaccessible_Factory.newUsesInaccessible(",
-                "        (Set) ImmutableSet.of(),",
-                "        (Set) ImmutableSet.copyOf(",
-                "            Preconditions.checkNotNull(",
-                "                TestModule_EmptySetFactory.proxyEmptySet(),",
-                "                " + NPE_FROM_PROVIDES + ")));",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerTestComponent",
+            "package test;",
+            "",
+            "import com.google.common.collect.ImmutableSet;",
+            "import dagger.internal.Preconditions;",
+            "import java.util.Set;",
+            "import javax.annotation.Generated;",
+            "import other.TestModule_EmptySetFactory;",
+            "import other.UsesInaccessible;",
+            "import other.UsesInaccessible_Factory;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerTestComponent implements TestComponent {",
+            "  private DaggerTestComponent(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static TestComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  private Set getSetOfInaccessible2Instance() {",
+            "    return ImmutableSet.copyOf(",
+            "        Preconditions.checkNotNull(",
+            "            TestModule_EmptySetFactory.proxyEmptySet(),",
+            "            " + NPE_FROM_PROVIDES + "));",
+            "  }",
+            "",
+            "  @Override",
+            "  public UsesInaccessible usesInaccessible() {",
+            "    return UsesInaccessible_Factory.newUsesInaccessible(",
+            "        (Set) ImmutableSet.of(),",
+            "        (Set) getSetOfInaccessible2Instance());",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {}",
+            "",
+            "    public TestComponent build() {",
+            "      return new DaggerTestComponent(this);",
+            "    }",
+            "  }",
+            "}");
     Compilation compilation =
         daggerCompiler()
             .withOptions(compilerMode.javacopts())
diff --git a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
index 9ec77f71a..d9c7de008 100644
--- a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
+++ b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
@@ -384,187 +384,96 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
             "  @Inject public void dep2Method() { }",
             "}");
 
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerParentComponent",
-                "package test;",
-                "",
-                "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-                "import dagger.internal.DoubleCheck;",
-                "import dagger.internal.Preconditions;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerParentComponent implements ParentComponent {",
-                "  private Provider<Dep1> dep1Provider;",
-                "  private Provider<Dep2> dep2Provider;",
-                "",
-                "  private DaggerParentComponent(Builder builder) {",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static ParentComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {",
-                "    this.dep1Provider = DoubleCheck.provider(Dep1_Factory.create());",
-                "    this.dep2Provider = DoubleCheck.provider(Dep2_Factory.create());",
-                "  }",
-                "",
-                "  @Override",
-                "  public Dep1 getDep1() {",
-                "    return dep1Provider.get();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Dep2 getDep2() {",
-                "    return dep2Provider.get();",
-                "  }",
-                "",
-                "  @Override",
-                "  public ChildComponent childComponent() {",
-                "    return new ChildComponentImpl();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public ParentComponent build() {",
-                "      return new DaggerParentComponent(this);",
-                "    }",
-                "  }",
-                "",
-                "  private final class ChildComponentImpl implements ChildComponent {",
-                "    private final ChildModule childModule;",
-                "",
-                "    private ChildComponentImpl() {",
-                "      this.childModule = new ChildModule();",
-                "    }",
-                "",
-                "    private NeedsDep1 getNeedsDep1Instance() {",
-                "      return new NeedsDep1(DaggerParentComponent.this.dep1Provider.get());",
-                "    }",
-                "",
-                "    private A getAInstance() {",
-                "      return injectA(",
-                "          A_Factory.newA(",
-                "              getNeedsDep1Instance(),",
-                "              DaggerParentComponent.this.dep1Provider.get(),",
-                "              DaggerParentComponent.this.dep2Provider.get()));",
-                "    }",
-                "",
-                "    @Override",
-                "    public Object getObject() {",
-                "      return Preconditions.checkNotNull(",
-                "          childModule.provideObject(getAInstance()),",
-                "          " + NPE_FROM_PROVIDES_METHOD + ");",
-                "    }",
-                "",
-                "    @CanIgnoreReturnValue",
-                "    private A injectA(A instance) {",
-                "      A_MembersInjector.injectMethodA(instance);",
-                "      return instance;",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerParentComponent",
-                "package test;",
-                "",
-                "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
-                "import dagger.internal.DoubleCheck;",
-                "import dagger.internal.Preconditions;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerParentComponent implements ParentComponent {",
-                "  private Provider<Dep1> dep1Provider;",
-                "  private Provider<Dep2> dep2Provider;",
-                "",
-                "  private DaggerParentComponent(Builder builder) {  ",
-                "    initialize(builder);",
-                "  }",
-                "",
-                "  public static Builder builder() {  ",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static ParentComponent create() {  ",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @SuppressWarnings(\"unchecked\")",
-                "  private void initialize(final Builder builder) {  ",
-                "    this.dep1Provider = DoubleCheck.provider(Dep1_Factory.create());",
-                "    this.dep2Provider = DoubleCheck.provider(Dep2_Factory.create());",
-                "  }",
-                "",
-                "  @Override",
-                "  public Dep1 getDep1() {  ",
-                "    return dep1Provider.get();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Dep2 getDep2() {  ",
-                "    return dep2Provider.get();",
-                "  }",
-                "",
-                "  @Override",
-                "  public ChildComponent childComponent() {  ",
-                "    return new ChildComponentImpl();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {  ",
-                "    }",
-                "  ",
-                "    public ParentComponent build() {  ",
-                "      return new DaggerParentComponent(this);",
-                "    }",
-                "  }",
-                "",
-                "  private final class ChildComponentImpl implements ChildComponent {",
-                "    private final ChildModule childModule;",
-                "  ",
-                "    private ChildComponentImpl() {  ",
-                "      this.childModule = new ChildModule();",
-                "    }",
-                "  ",
-                "    @Override",
-                "    public Object getObject() {  ",
-                "      return Preconditions.checkNotNull(",
-                "          childModule.provideObject(",
-                "              injectA(",
-                "                  A_Factory.newA(",
-                "                      new NeedsDep1(",
-                "                          DaggerParentComponent.this.dep1Provider.get()),",
-                "                      DaggerParentComponent.this.dep1Provider.get(),",
-                "                      DaggerParentComponent.this.dep2Provider.get()))),",
-                "          " + NPE_FROM_PROVIDES_METHOD + ");",
-                "    }",
-                "",
-                "    @CanIgnoreReturnValue",
-                "    private A injectA(A instance) {",
-                "      A_MembersInjector.injectMethodA(instance);",
-                "      return instance;",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerParentComponent",
+            "package test;",
+            "",
+            "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
+            "import dagger.internal.DoubleCheck;",
+            "import dagger.internal.Preconditions;",
+            "import javax.annotation.Generated;",
+            "import javax.inject.Provider;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerParentComponent implements ParentComponent {",
+            "  private Provider<Dep1> dep1Provider;",
+            "  private Provider<Dep2> dep2Provider;",
+            "",
+            "  private DaggerParentComponent(Builder builder) {",
+            "    initialize(builder);",
+            "  }",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static ParentComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @SuppressWarnings(\"unchecked\")",
+            "  private void initialize(final Builder builder) {",
+            "    this.dep1Provider = DoubleCheck.provider(Dep1_Factory.create());",
+            "    this.dep2Provider = DoubleCheck.provider(Dep2_Factory.create());",
+            "  }",
+            "",
+            "  @Override",
+            "  public Dep1 getDep1() {",
+            "    return dep1Provider.get();",
+            "  }",
+            "",
+            "  @Override",
+            "  public Dep2 getDep2() {",
+            "    return dep2Provider.get();",
+            "  }",
+            "",
+            "  @Override",
+            "  public ChildComponent childComponent() {",
+            "    return new ChildComponentImpl();",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {}",
+            "",
+            "    public ParentComponent build() {",
+            "      return new DaggerParentComponent(this);",
+            "    }",
+            "  }",
+            "",
+            "  private final class ChildComponentImpl implements ChildComponent {",
+            "    private final ChildModule childModule;",
+            "",
+            "    private ChildComponentImpl() {",
+            "      this.childModule = new ChildModule();",
+            "    }",
+            "",
+            "    private NeedsDep1 getNeedsDep1Instance() {",
+            "      return new NeedsDep1(DaggerParentComponent.this.dep1Provider.get());",
+            "    }",
+            "",
+            "    private A getAInstance() {",
+            "      return injectA(",
+            "          A_Factory.newA(",
+            "              getNeedsDep1Instance(),",
+            "              DaggerParentComponent.this.dep1Provider.get(),",
+            "              DaggerParentComponent.this.dep2Provider.get()));",
+            "    }",
+            "",
+            "    @Override",
+            "    public Object getObject() {",
+            "      return Preconditions.checkNotNull(",
+            "          childModule.provideObject(getAInstance()),",
+            "          " + NPE_FROM_PROVIDES_METHOD + ");",
+            "    }",
+            "",
+            "    @CanIgnoreReturnValue",
+            "    private A injectA(A instance) {",
+            "      A_MembersInjector.injectMethodA(instance);",
+            "      return instance;",
+            "    }",
+            "  }",
+            "}");
     assertAbout(javaSources())
         .that(
             ImmutableList.of(
