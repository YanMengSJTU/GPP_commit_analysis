diff --git a/java/dagger/internal/codegen/BindingExpression.java b/java/dagger/internal/codegen/BindingExpression.java
index d09347897..aa52b5322 100644
--- a/java/dagger/internal/codegen/BindingExpression.java
+++ b/java/dagger/internal/codegen/BindingExpression.java
@@ -175,12 +175,6 @@ private BindingExpression create(
           // TODO(user): Consider using PrivateMethodBindingExpression for other/all BEs?
           case SYNTHETIC_MULTIBOUND_SET:
           case SYNTHETIC_MULTIBOUND_MAP:
-            // TODO(user): Consider also inlining SET and Map INSTANCE bindings with only 1 dep.
-            if (resolvedBindings.contributionBinding().dependencies().isEmpty()) {
-              // Empty multibindings should just inline static singleton instances.
-              break;
-            }
-            // fall through
           case INJECTION:
           case PROVISION:
             return new PrivateMethodBindingExpression(
diff --git a/java/dagger/internal/codegen/PrivateMethodBindingExpression.java b/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
index cd85424b9..58ad71c2e 100644
--- a/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
@@ -23,6 +23,7 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
 import static com.squareup.javapoet.TypeSpec.anonymousClassBuilder;
+import static dagger.internal.codegen.ContributionBinding.FactoryCreationStrategy.SINGLETON_INSTANCE;
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.PUBLIC;
 
@@ -114,12 +115,23 @@ Expression getDependencyExpression(
   }
 
   private boolean ignorePrivateMethodStrategy(DependencyRequest.Kind requestKind) {
-    return !compilerOptions.experimentalAndroidMode()
-        && !requestKind.equals(DependencyRequest.Kind.INSTANCE);
+    switch (requestKind) {
+      case INSTANCE:
+      case FUTURE:
+        return false;
+      case PROVIDER:
+      case LAZY:
+      case PROVIDER_OF_LAZY:
+        return !compilerOptions.experimentalAndroidMode()
+            || binding.factoryCreationStrategy().equals(SINGLETON_INSTANCE);
+      default:
+        return !compilerOptions.experimentalAndroidMode();
+    }
   }
 
   private boolean isNullaryProvisionMethod(DependencyRequest.Kind requestKind) {
-    return requestKind.equals(DependencyRequest.Kind.INSTANCE)
+    return (requestKind.equals(DependencyRequest.Kind.INSTANCE)
+            || requestKind.equals(DependencyRequest.Kind.FUTURE))
         && binding.dependencies().isEmpty()
         && !findComponentMethod(requestKind).isPresent();
   }
diff --git a/javatests/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
index e30569fe3..d0b117488 100644
--- a/javatests/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
@@ -19,8 +19,6 @@
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
 import static dagger.internal.codegen.CodeBlocks.stringLiteral;
-import static dagger.internal.codegen.CompilerMode.DEFAULT_MODE;
-import static dagger.internal.codegen.CompilerMode.EXPERIMENTAL_ANDROID_MODE;
 import static dagger.internal.codegen.GeneratedLines.GENERATED_ANNOTATION;
 
 import com.google.auto.common.MoreElements;
@@ -305,30 +303,13 @@ public void componentWithInvalidModule() {
                 "  }",
                 "",
                 "  @Override",
-                "  public Lazy<SomeInjectableType> lazySomeInjectableType() {")
-            .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
-                "    return DoubleCheck.lazy(someInjectableTypeProvider());")
-            .addLinesIn(
-                DEFAULT_MODE,
-                "    return DoubleCheck.lazy(SomeInjectableType_Factory.create());")
-            .addLines(
+                "  public Lazy<SomeInjectableType> lazySomeInjectableType() {",
+                "    return DoubleCheck.lazy(SomeInjectableType_Factory.create());",
                 "  }",
                 "",
                 "  @Override",
-                "  public Provider<SomeInjectableType> someInjectableTypeProvider() {")
-            .addLinesIn(
-                EXPERIMENTAL_ANDROID_MODE,
-                "    return new Provider<SomeInjectableType>() {",
-                "      @Override",
-                "      public SomeInjectableType get() {",
-                "        return someInjectableType();",
-                "      }",
-                "    };")
-            .addLinesIn(
-                DEFAULT_MODE,
-                "    return SomeInjectableType_Factory.create();")
-            .addLines(
+                "  public Provider<SomeInjectableType> someInjectableTypeProvider() {",
+                "    return SomeInjectableType_Factory.create();",
                 "  }",
                 "",
                 "  public static final class Builder {",
@@ -498,7 +479,7 @@ public void componentWithInvalidModule() {
                 "  private OuterType.B injectB(OuterType.B instance) {",
                 "    OuterType_B_MembersInjector.injectA(instance, a());",
                 "    return instance;",
-                "}",
+                "  }",
                 "",
                 "  public static final class Builder {",
                 "    private Builder() {",
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
index fbeb8941b..1b4dc4f27 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
@@ -87,189 +87,76 @@ public void mapBindings() {
         "  Map<Long, Long> longs();",
         "  Map<Long, Provider<Long>> providerLongs();",
         "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import dagger.internal.MapBuilder;",
-                "import java.util.Collections;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private Provider<Integer> getMapOfIntegerAndProviderOfIntegerProvider() {",
-                "    return new Provider<Integer>() {",
-                "      @Override",
-                "      public Integer get() {",
-                "        return MapModule.provideInt();",
-                "      }",
-                "    };",
-                "  }",
-                "",
-                "  private Provider<Long> getMapOfLongAndProviderOfLongProvider() {",
-                "    return new Provider<Long>() {",
-                "      @Override",
-                "      public Long get() {",
-                "        return MapModule.provideLong0();",
-                "      }",
-                "    };",
-                "  }",
-                "",
-                "  private Provider<Long> getMapOfLongAndProviderOfLongProvider2() {",
-                "    return new Provider<Long>() {",
-                "      @Override",
-                "      public Long get() {",
-                "        return MapModule.provideLong1();",
-                "      }",
-                "    };",
-                "  }",
-                "",
-                "  private Provider<Long> getMapOfLongAndProviderOfLongProvider3() {",
-                "    return new Provider<Long>() {",
-                "      @Override",
-                "      public Long get() {",
-                "        return MapModule.provideLong2();",
-                "      }",
-                "    };",
-                "  }",
-                "",
-                "  @Override",
-                "  public Map<String, String> strings() {",
-                "    return Collections.<String, String>emptyMap();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Map<String, Provider<String>> providerStrings() {",
-                "    return Collections.<String, Provider<String>>emptyMap();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Map<Integer, Integer> ints() {",
-                "    return Collections.<Integer, Integer>singletonMap(",
-                "        0, MapModule.provideInt());",
-                "  }",
-                "",
-                "  @Override",
-                "  public Map<Integer, Provider<Integer>> providerInts() {",
-                "    return Collections.<Integer, Provider<Integer>>singletonMap(",
-                "        0, getMapOfIntegerAndProviderOfIntegerProvider());",
-                "  }",
-                "",
-                "  @Override",
-                "  public Map<Long, Long> longs() {",
-                "    return MapBuilder.<Long, Long>newMapBuilder(3)",
-                "        .put(0L, MapModule.provideLong0())",
-                "        .put(1L, MapModule.provideLong1())",
-                "        .put(2L, MapModule.provideLong2())",
-                "        .build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Map<Long, Provider<Long>> providerLongs() {",
-                "    return MapBuilder.<Long, Provider<Long>>newMapBuilder(3)",
-                "        .put(0L, getMapOfLongAndProviderOfLongProvider())",
-                "        .put(1L, getMapOfLongAndProviderOfLongProvider2())",
-                "        .put(2L, getMapOfLongAndProviderOfLongProvider3())",
-                "        .build();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import dagger.internal.MapBuilder;",
-                "import java.util.Collections;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Map<String, String> strings() {",
-                "    return Collections.<String, String>emptyMap();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Map<String, Provider<String>> providerStrings() {",
-                "    return Collections.<String, Provider<String>>emptyMap();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Map<Integer, Integer> ints() {",
-                "    return Collections.<Integer, Integer>singletonMap(0, MapModule.provideInt());",
-                "  }",
-                "",
-                "  @Override",
-                "  public Map<Integer, Provider<Integer>> providerInts() {",
-                "    return Collections.<Integer, Provider<Integer>>singletonMap(",
-                "        0, MapModule_ProvideIntFactory.create());",
-                "  }",
-                "",
-                "  @Override",
-                "  public Map<Long, Long> longs() {",
-                "    return MapBuilder.<Long, Long>newMapBuilder(3)",
-                "        .put(0L, MapModule.provideLong0())",
-                "        .put(1L, MapModule.provideLong1())",
-                "        .put(2L, MapModule.provideLong2())",
-                "        .build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Map<Long, Provider<Long>> providerLongs() {",
-                "    return MapBuilder.<Long, Provider<Long>>newMapBuilder(3)",
-                "        .put(0L, MapModule_ProvideLong0Factory.create())",
-                "        .put(1L, MapModule_ProvideLong1Factory.create())",
-                "        .put(2L, MapModule_ProvideLong2Factory.create())",
-                "        .build();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerTestComponent",
+            "package test;",
+            "",
+            "import dagger.internal.MapBuilder;",
+            "import java.util.Collections;",
+            "import java.util.Map;",
+            "import javax.annotation.Generated;",
+            "import javax.inject.Provider;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerTestComponent implements TestComponent {",
+            "  private DaggerTestComponent(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static TestComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public Map<String, String> strings() {",
+            "    return Collections.<String, String>emptyMap();",
+            "  }",
+            "",
+            "  @Override",
+            "  public Map<String, Provider<String>> providerStrings() {",
+            "    return Collections.<String, Provider<String>>emptyMap();",
+            "  }",
+            "",
+            "  @Override",
+            "  public Map<Integer, Integer> ints() {",
+            "    return Collections.<Integer, Integer>singletonMap(0, MapModule.provideInt());",
+            "  }",
+            "",
+            "  @Override",
+            "  public Map<Integer, Provider<Integer>> providerInts() {",
+            "    return Collections.<Integer, Provider<Integer>>singletonMap(",
+            "        0, MapModule_ProvideIntFactory.create());",
+            "  }",
+            "",
+            "  @Override",
+            "  public Map<Long, Long> longs() {",
+            "    return MapBuilder.<Long, Long>newMapBuilder(3)",
+            "        .put(0L, MapModule.provideLong0())",
+            "        .put(1L, MapModule.provideLong1())",
+            "        .put(2L, MapModule.provideLong2())",
+            "        .build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public Map<Long, Provider<Long>> providerLongs() {",
+            "    return MapBuilder.<Long, Provider<Long>>newMapBuilder(3)",
+            "        .put(0L, MapModule_ProvideLong0Factory.create())",
+            "        .put(1L, MapModule_ProvideLong1Factory.create())",
+            "        .put(2L, MapModule_ProvideLong2Factory.create())",
+            "        .build();",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {}",
+            "",
+            "    public TestComponent build() {",
+            "      return new DaggerTestComponent(this);",
+            "    }",
+            "  }",
+            "}");
     Compilation compilation = daggerCompilerWithoutGuava().compile(mapModuleFile, componentFile);
     assertThat(compilation).succeeded();
     assertThat(compilation)
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
index ce512fefa..94e393fac 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
@@ -120,202 +120,7 @@ public void mapBindings() {
             "  Map<Long, Long> longs();",
             "  Map<Long, Provider<Long>> providerLongs();",
             "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.common.collect.ImmutableMap;",
-                "import java.util.Map;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private Provider<Integer> getMapOfIntegerAndProviderOfIntegerProvider() {",
-                "    return new Provider<Integer>() {",
-                "      @Override",
-                "      public Integer get() {",
-                "        return MapModule.provideInt();",
-                "      }",
-                "    };",
-                "  }",
-                "",
-                "  private Provider<Long> getMapOfLongAndProviderOfLongProvider() {",
-                "    return new Provider<Long>() {",
-                "      @Override",
-                "      public Long get() {",
-                "        return MapModule.provideLong0();",
-                "      }",
-                "    };",
-                "  }",
-                "",
-                "  private Provider<Long> getMapOfLongAndProviderOfLongProvider2() {",
-                "    return new Provider<Long>() {",
-                "      @Override",
-                "      public Long get() {",
-                "        return MapModule.provideLong1();",
-                "      }",
-                "    };",
-                "  }",
-                "",
-                "  private Provider<Long> getMapOfLongAndProviderOfLongProvider3() {",
-                "    return new Provider<Long>() {",
-                "      @Override",
-                "      public Long get() {",
-                "        return MapModule.provideLong2();",
-                "      }",
-                "    };",
-                "  }",
-                "",
-                "  @Override",
-                "  public Map<String, String> strings() {",
-                "    return ImmutableMap.<String, String>of();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Map<String, Provider<String>> providerStrings() {",
-                "    return ImmutableMap.<String, Provider<String>>of();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Map<Integer, Integer> ints() {",
-                "    return ImmutableMap.<Integer, Integer>of(0, MapModule.provideInt());",
-                "  }",
-                "",
-                "  @Override",
-                "  public Map<Integer, Provider<Integer>> providerInts() {",
-                "    return ImmutableMap.<Integer, Provider<Integer>>of(",
-                "        0, getMapOfIntegerAndProviderOfIntegerProvider());",
-                "  }",
-                "",
-                "  @Override",
-                "  public Map<Long, Long> longs() {",
-                "    return ImmutableMap.<Long, Long>of(",
-                "        0L, MapModule.provideLong0(),",
-                "        1L, MapModule.provideLong1(),",
-                "        2L, MapModule.provideLong2());",
-                "  }",
-                "",
-                "  @Override",
-                "  public Map<Long, Provider<Long>> providerLongs() {",
-                "    return ImmutableMap.<Long, Provider<Long>>of(",
-                "        0L, getMapOfLongAndProviderOfLongProvider(),",
-                "        1L, getMapOfLongAndProviderOfLongProvider2(),",
-                "        2L, getMapOfLongAndProviderOfLongProvider3());",
-                "  }",
-                "",
-                "  @Override",
-                "  public Sub sub() {",
-                "    return new SubImpl();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "",
-                "  private final class SubImpl implements Sub {",
-                "    private SubImpl() {}",
-                "",
-                "    private Provider<Long> getMapOfLongAndProviderOfLongProvider() {",
-                "      return new Provider<Long>() {",
-                "        @Override",
-                "        public Long get() {",
-                "          return MapModule.provideLong0();",
-                "        }",
-                "      };",
-                "    }",
-                "",
-                "    private Provider<Long> getMapOfLongAndProviderOfLongProvider2() {",
-                "      return new Provider<Long>() {",
-                "        @Override",
-                "        public Long get() {",
-                "          return MapModule.provideLong1();",
-                "        }",
-                "      };",
-                "    }",
-                "",
-                "    private Provider<Long> getMapOfLongAndProviderOfLongProvider3() {",
-                "      return new Provider<Long>() {",
-                "        @Override",
-                "        public Long get() {",
-                "          return MapModule.provideLong2();",
-                "        }",
-                "      };",
-                "    }",
-                "",
-                "    private Provider<Long> getMapOfLongAndProviderOfLongProvider4() {",
-                "      return new Provider<Long>() {",
-                "        @Override",
-                "        public Long get() {",
-                "          return SubcomponentMapModule.provideLong3();",
-                "        }",
-                "      };",
-                "    }",
-                "",
-                "    private Provider<Long> getMapOfLongAndProviderOfLongProvider5() {",
-                "      return new Provider<Long>() {",
-                "        @Override",
-                "        public Long get() {",
-                "          return SubcomponentMapModule.provideLong4();",
-                "        }",
-                "      };",
-                "    }",
-                "",
-                "    private Provider<Long> getMapOfLongAndProviderOfLongProvider6() {",
-                "      return new Provider<Long>() {",
-                "        @Override",
-                "        public Long get() {",
-                "          return SubcomponentMapModule.provideLong5();",
-                "        }",
-                "      };",
-                "    }",
-                "",
-                "    @Override",
-                "    public Map<Long, Long> longs() {",
-                "      return ImmutableMap.<Long, Long>builder()",
-                "          .put(0L, MapModule.provideLong0())",
-                "          .put(1L, MapModule.provideLong1())",
-                "          .put(2L, MapModule.provideLong2())",
-                "          .put(3L, SubcomponentMapModule.provideLong3())",
-                "          .put(4L, SubcomponentMapModule.provideLong4())",
-                "          .put(5L, SubcomponentMapModule.provideLong5())",
-                "          .build();",
-                "    }",
-                "",
-                "    @Override",
-                "    public Map<Long, Provider<Long>> providerLongs() {",
-                "      return ImmutableMap.<Long, Provider<Long>>builder()",
-                "          .put(0L, getMapOfLongAndProviderOfLongProvider())",
-                "          .put(1L, getMapOfLongAndProviderOfLongProvider2())",
-                "          .put(2L, getMapOfLongAndProviderOfLongProvider3())",
-                "          .put(3L, getMapOfLongAndProviderOfLongProvider4())",
-                "          .put(4L, getMapOfLongAndProviderOfLongProvider5())",
-                "          .put(5L, getMapOfLongAndProviderOfLongProvider6())",
-                "          .build();",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
+    JavaFileObject generatedComponent =
             JavaFileObjects.forSourceLines(
                 "test.DaggerTestComponent",
                 "package test;",
@@ -415,7 +220,6 @@ public void mapBindings() {
                 "    }",
                 "  }",
                 "}");
-    }
     Compilation compilation =
         daggerCompiler()
             .withOptions(compilerMode.javacopts())
diff --git a/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
index dae6ceb48..4ad8f8211 100644
--- a/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
@@ -103,141 +103,65 @@ public void inlinedOptionalBindings() {
             "  Optional<DefinitelyNot> definitelyNot();",
             "  Optional<Provider<Lazy<DefinitelyNot>>> providerOfLazyOfDefinitelyNot();",
             "}");
-    JavaFileObject generatedComponent;
-    switch (compilerMode) {
-      case EXPERIMENTAL_ANDROID_MODE:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.common.base.Optional;",
-                "import dagger.Lazy;",
-                "import dagger.internal.Preconditions;",
-                "import dagger.internal.ProviderOfLazy;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "import other.DefinitelyNot;",
-                "import other.Maybe;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  private Provider<Maybe> getMaybeProvider() {",
-                "    return new Provider<Maybe>() {",
-                "      @Override",
-                "      public Maybe get() {",
-                "        return Preconditions.checkNotNull(",
-                "            Maybe.MaybeModule.provideMaybe(), " + NPE_FROM_PROVIDES + ");",
-                "      }",
-                "    };",
-                "  }",
-                "",
-                "  private Provider<Lazy<Maybe>> getMaybeProviderOfLazy() {",
-                "    return ProviderOfLazy.create(getMaybeProvider());",
-                "  }",
-                "",
-                "  @Override",
-                "  public Optional<Maybe> maybe() {",
-                "    return Optional.of(Preconditions.checkNotNull(",
-                "        Maybe.MaybeModule.provideMaybe()," + NPE_FROM_PROVIDES + "));",
-                "  }",
-                "",
-                "  @Override",
-                "  public Optional<Provider<Lazy<Maybe>>> providerOfLazyOfMaybe() {",
-                "    return Optional.of(getMaybeProviderOfLazy());",
-                "  }",
-                "",
-                "  @Override",
-                "  public Optional<DefinitelyNot> definitelyNot() {",
-                "    return Optional.absent();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Optional<Provider<Lazy<DefinitelyNot>>>",
-                "        providerOfLazyOfDefinitelyNot() {",
-                "    return Optional.absent();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-        break;
-      default:
-        generatedComponent =
-            JavaFileObjects.forSourceLines(
-                "test.DaggerTestComponent",
-                "package test;",
-                "",
-                "import com.google.common.base.Optional;",
-                "import dagger.Lazy;",
-                "import dagger.internal.Preconditions;",
-                "import dagger.internal.ProviderOfLazy;",
-                "import javax.annotation.Generated;",
-                "import javax.inject.Provider;",
-                "import other.DefinitelyNot;",
-                "import other.Maybe;",
-                "import other.Maybe_MaybeModule_ProvideMaybeFactory;",
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerTestComponent implements TestComponent {",
-                "  private DaggerTestComponent(Builder builder) {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static TestComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Optional<Maybe> maybe() {",
-                "    return Optional.of(",
-                "        Preconditions.checkNotNull(",
-                "            Maybe.MaybeModule.provideMaybe(), " + NPE_FROM_PROVIDES + "));",
-                "  }",
-                "",
-                "  @Override",
-                "  public Optional<Provider<Lazy<Maybe>>> providerOfLazyOfMaybe() {",
-                "    return Optional.of(",
-                "        ProviderOfLazy.create(Maybe_MaybeModule_ProvideMaybeFactory.create()));",
-                "  }",
-                "",
-                "  @Override",
-                "  public Optional<DefinitelyNot> definitelyNot() {",
-                "    return Optional.absent();",
-                "  }",
-                "",
-                "  @Override",
-                "  public Optional<Provider<Lazy<DefinitelyNot>>>",
-                "      providerOfLazyOfDefinitelyNot() {",
-                "    return Optional.absent();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public TestComponent build() {",
-                "      return new DaggerTestComponent(this);",
-                "    }",
-                "  }",
-                "}");
-    }
+    JavaFileObject generatedComponent =
+        JavaFileObjects.forSourceLines(
+            "test.DaggerTestComponent",
+            "package test;",
+            "",
+            "import com.google.common.base.Optional;",
+            "import dagger.Lazy;",
+            "import dagger.internal.Preconditions;",
+            "import dagger.internal.ProviderOfLazy;",
+            "import javax.annotation.Generated;",
+            "import javax.inject.Provider;",
+            "import other.DefinitelyNot;",
+            "import other.Maybe;",
+            "import other.Maybe_MaybeModule_ProvideMaybeFactory;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerTestComponent implements TestComponent {",
+            "  private DaggerTestComponent(Builder builder) {}",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static TestComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public Optional<Maybe> maybe() {",
+            "    return Optional.of(",
+            "        Preconditions.checkNotNull(",
+            "            Maybe.MaybeModule.provideMaybe(), " + NPE_FROM_PROVIDES + "));",
+            "  }",
+            "",
+            "  @Override",
+            "  public Optional<Provider<Lazy<Maybe>>> providerOfLazyOfMaybe() {",
+            "    return Optional.of(",
+            "        ProviderOfLazy.create(Maybe_MaybeModule_ProvideMaybeFactory.create()));",
+            "  }",
+            "",
+            "  @Override",
+            "  public Optional<DefinitelyNot> definitelyNot() {",
+            "    return Optional.absent();",
+            "  }",
+            "",
+            "  @Override",
+            "  public Optional<Provider<Lazy<DefinitelyNot>>>",
+            "      providerOfLazyOfDefinitelyNot() {",
+            "    return Optional.absent();",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {}",
+            "",
+            "    public TestComponent build() {",
+            "      return new DaggerTestComponent(this);",
+            "    }",
+            "  }",
+            "}");
     Compilation compilation =
         daggerCompiler()
             .withOptions(compilerMode.javacopts())
