diff --git a/java/dagger/internal/codegen/Binding.java b/java/dagger/internal/codegen/Binding.java
index 9c9da715f..d34aee6bd 100644
--- a/java/dagger/internal/codegen/Binding.java
+++ b/java/dagger/internal/codegen/Binding.java
@@ -29,7 +29,6 @@
 import com.google.common.collect.ImmutableSetMultimap;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
-import dagger.internal.codegen.BindingType.HasBindingType;
 import dagger.model.Key;
 import dagger.model.Scope;
 import java.util.Collection;
@@ -54,12 +53,15 @@
  * @author Gregory Kick
  * @since 2.0
  */
-abstract class Binding extends BindingDeclaration implements HasBindingType {
+abstract class Binding extends BindingDeclaration {
 
   /** The {@link Key} that is provided by this binding. */
   @Override
   public abstract Key key();
 
+  /** The {@link BindingType} of this binding. */
+  abstract BindingType bindingType();
+
   /**
    * The explicit set of {@link DependencyRequest dependencies} required to satisfy this binding as
    * defined by the user-defined injection sites.
diff --git a/java/dagger/internal/codegen/BindingDeclaration.java b/java/dagger/internal/codegen/BindingDeclaration.java
index dcf441221..31655ad93 100644
--- a/java/dagger/internal/codegen/BindingDeclaration.java
+++ b/java/dagger/internal/codegen/BindingDeclaration.java
@@ -18,13 +18,16 @@
 
 import static dagger.internal.codegen.DaggerElements.ENCLOSING_TYPE_ELEMENT;
 
-import dagger.internal.codegen.Keys.HasKey;
+import dagger.model.Key;
 import java.util.Optional;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
 
 /** An object that declares or specifies a binding. */
-abstract class BindingDeclaration implements HasKey {
+abstract class BindingDeclaration {
+
+  /** The {@link Key} of this declaration. */
+  abstract Key key();
 
   /**
    * The {@link Element} that declares the binding. Absent for bindings without identifying
diff --git a/java/dagger/internal/codegen/BindingGraph.java b/java/dagger/internal/codegen/BindingGraph.java
index bb2412ceb..8b113d845 100644
--- a/java/dagger/internal/codegen/BindingGraph.java
+++ b/java/dagger/internal/codegen/BindingGraph.java
@@ -29,7 +29,6 @@
 import static dagger.internal.codegen.ContributionBinding.Kind.SYNTHETIC_MULTIBOUND_KINDS;
 import static dagger.internal.codegen.ContributionBinding.Kind.SYNTHETIC_OPTIONAL_BINDING;
 import static dagger.internal.codegen.DaggerStreams.toImmutableSet;
-import static dagger.internal.codegen.Keys.indexByKey;
 import static dagger.internal.codegen.Util.reentrantComputeIfAbsent;
 import static java.util.function.Predicate.isEqual;
 import static javax.lang.model.element.Modifier.ABSTRACT;
@@ -46,6 +45,7 @@
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
+import com.google.common.collect.Multimaps;
 import com.google.common.collect.Sets;
 import com.google.common.collect.TreeTraverser;
 import dagger.MembersInjector;
@@ -54,7 +54,6 @@
 import dagger.internal.codegen.ComponentDescriptor.BuilderRequirementMethod;
 import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
 import dagger.internal.codegen.ContributionBinding.Kind;
-import dagger.internal.codegen.Keys.HasKey;
 import dagger.model.Key;
 import dagger.model.RequestKind;
 import dagger.model.Scope;
@@ -647,7 +646,7 @@ private boolean multibindingsRequireProduction(
           return true;
         }
         return Iterables.any(multibindingContributions,
-            hasBindingType -> hasBindingType.bindingType().equals(BindingType.PRODUCTION));
+            binding -> binding.bindingType().equals(BindingType.PRODUCTION));
       }
 
       private Optional<ProvisionBinding> syntheticSubcomponentBuilderBinding(
@@ -1144,7 +1143,7 @@ private boolean hasLocallyPresentOptionalBinding(ResolvedBindings resolvedBindin
      * A multimap of those {@code declarations} that are multibinding contribution declarations,
      * indexed by the key of the set or map to which they contribute.
      */
-    static <T extends HasKey>
+    static <T extends BindingDeclaration>
         ImmutableSetMultimap<Key, T> multibindingContributionsByMultibindingKey(
             Iterable<T> declarations) {
       ImmutableSetMultimap.Builder<Key, T> builder = ImmutableSetMultimap.builder();
@@ -1162,4 +1161,10 @@ private boolean hasLocallyPresentOptionalBinding(ResolvedBindings resolvedBindin
       return builder.build();
     }
   }
+
+  /** Indexes {@code bindingDeclarations} by {@link BindingDeclaration#key()}. */
+  private static <T extends BindingDeclaration> ImmutableSetMultimap<Key, T> indexByKey(
+      Iterable<T> declarations) {
+    return ImmutableSetMultimap.copyOf(Multimaps.index(declarations, BindingDeclaration::key));
+  }
 }
diff --git a/java/dagger/internal/codegen/BindingGraphValidator.java b/java/dagger/internal/codegen/BindingGraphValidator.java
index e51652b92..ad2716298 100644
--- a/java/dagger/internal/codegen/BindingGraphValidator.java
+++ b/java/dagger/internal/codegen/BindingGraphValidator.java
@@ -1193,7 +1193,7 @@ private boolean doesPathRequireProvisionOnly() {
       private FluentIterable<ContributionBinding> provisionsDependingOnLatestRequest() {
         return FluentIterable.from(dependentBindings())
             .filter(ContributionBinding.class)
-            .filter(PROVISION::isOfType);
+            .filter(binding -> binding.bindingType().equals(BindingType.PROVISION));
       }
 
       private String formatCurrentDependencyRequestKey() {
diff --git a/java/dagger/internal/codegen/BindingType.java b/java/dagger/internal/codegen/BindingType.java
index 60e4ad0ec..696f00e76 100644
--- a/java/dagger/internal/codegen/BindingType.java
+++ b/java/dagger/internal/codegen/BindingType.java
@@ -38,19 +38,9 @@
   PRODUCTION(Producer.class, FrameworkType.PRODUCER),
   ;
 
-  boolean isOfType(HasBindingType hasBindingType) {
-    return this.equals(hasBindingType.bindingType());
-  }
-
   static final ImmutableSet<BindingType> CONTRIBUTION_TYPES =
       Sets.immutableEnumSet(PROVISION, PRODUCTION);
 
-  /** An object that is associated with a {@link BindingType}. */
-  interface HasBindingType {
-
-    /** The binding type of this object. */
-    BindingType bindingType();
-  }
   private final Class<?> frameworkClass;
   private final FrameworkType frameworkType;
 
diff --git a/java/dagger/internal/codegen/ComponentProcessor.java b/java/dagger/internal/codegen/ComponentProcessor.java
index bebe6aa95..52b2e03c4 100644
--- a/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/java/dagger/internal/codegen/ComponentProcessor.java
@@ -137,7 +137,7 @@ public SourceVersion getSupportedSourceVersion() {
     ProductionBinding.Factory productionBindingFactory =
         new ProductionBinding.Factory(types, keyFactory, dependencyRequestFactory);
     MultibindingDeclaration.Factory multibindingDeclarationFactory =
-        new MultibindingDeclaration.Factory(elements, types, keyFactory);
+        new MultibindingDeclaration.Factory(types, keyFactory);
     SubcomponentDeclaration.Factory subcomponentDeclarationFactory =
         new SubcomponentDeclaration.Factory(keyFactory);
 
diff --git a/java/dagger/internal/codegen/Keys.java b/java/dagger/internal/codegen/Keys.java
index b9ef5bf0d..8c85ac2d4 100644
--- a/java/dagger/internal/codegen/Keys.java
+++ b/java/dagger/internal/codegen/Keys.java
@@ -18,8 +18,6 @@
 
 import com.google.auto.common.MoreElements;
 import com.google.auto.common.MoreTypes;
-import com.google.common.collect.ImmutableSetMultimap;
-import com.google.common.collect.Multimaps;
 import dagger.model.Key;
 import java.util.Optional;
 import javax.lang.model.element.AnnotationMirror;
@@ -34,19 +32,6 @@
 
 /** Utility methods related to {@link Key}s. */
 final class Keys {
-  /** An object that is associated with a {@link Key}. */
-  interface HasKey {
-    /** The key associated with this object. */
-    Key key();
-  }
-
-  /**
-   * Indexes {@code haveKeys} by {@link HasKey#key()}.
-   */
-  static <T extends HasKey> ImmutableSetMultimap<Key, T> indexByKey(Iterable<T> haveKeys) {
-    return ImmutableSetMultimap.copyOf(Multimaps.index(haveKeys, HasKey::key));
-  }
-
   static boolean isValidMembersInjectionKey(Key key) {
     return !key.qualifier().isPresent()
         && !key.multibindingContributionIdentifier().isPresent()
diff --git a/java/dagger/internal/codegen/KytheBindingGraphFactory.java b/java/dagger/internal/codegen/KytheBindingGraphFactory.java
index 11eb37f5c..bfe023170 100644
--- a/java/dagger/internal/codegen/KytheBindingGraphFactory.java
+++ b/java/dagger/internal/codegen/KytheBindingGraphFactory.java
@@ -70,7 +70,7 @@
     ProductionBinding.Factory productionBindingFactory =
         new ProductionBinding.Factory(types, keyFactory, dependencyRequestFactory);
     MultibindingDeclaration.Factory multibindingDeclarationFactory =
-        new MultibindingDeclaration.Factory(elements, types, keyFactory);
+        new MultibindingDeclaration.Factory(types, keyFactory);
     DelegateDeclaration.Factory bindingDelegateDeclarationFactory =
         new DelegateDeclaration.Factory(types, keyFactory, dependencyRequestFactory);
     SubcomponentDeclaration.Factory subcomponentDeclarationFactory =
diff --git a/java/dagger/internal/codegen/MultibindingDeclaration.java b/java/dagger/internal/codegen/MultibindingDeclaration.java
index fbaf99c67..dead425db 100644
--- a/java/dagger/internal/codegen/MultibindingDeclaration.java
+++ b/java/dagger/internal/codegen/MultibindingDeclaration.java
@@ -22,7 +22,6 @@
 import com.google.auto.common.MoreTypes;
 import com.google.auto.value.AutoValue;
 import dagger.Module;
-import dagger.internal.codegen.BindingType.HasBindingType;
 import dagger.internal.codegen.ContributionType.HasContributionType;
 import dagger.model.Key;
 import dagger.multibindings.Multibinds;
@@ -37,7 +36,6 @@
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.ExecutableType;
 import javax.lang.model.type.TypeMirror;
-import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 
 /**
@@ -46,8 +44,7 @@
  * method annotated with {@link Multibinds @Multibinds}.
  */
 @AutoValue
-abstract class MultibindingDeclaration extends BindingDeclaration
-    implements HasBindingType, HasContributionType {
+abstract class MultibindingDeclaration extends BindingDeclaration implements HasContributionType {
 
   /**
    * The map or set key whose availability is declared. For maps, this will be {@code Map<K, F<V>>},
@@ -69,19 +66,16 @@
    * is enclosed in a {@link Module @Module}, or {@link BindingType#PROVISION} if it is nested in a
    * {@link ProducerModule @ProducerModule}.
    */
-  @Override
-  public abstract BindingType bindingType();
+  abstract BindingType bindingType();
 
   /**
    * A factory for {@link MultibindingDeclaration}s.
    */
   static final class Factory {
-    private final Elements elements;
     private final Types types;
     private final KeyFactory keyFactory;
 
-    Factory(Elements elements, Types types, KeyFactory keyFactory) {
-      this.elements = elements;
+    Factory(Types types, KeyFactory keyFactory) {
       this.types = types;
       this.keyFactory = keyFactory;
     }
diff --git a/java/dagger/internal/codegen/ResolvedBindings.java b/java/dagger/internal/codegen/ResolvedBindings.java
index cef7c74a3..938ca1ac3 100644
--- a/java/dagger/internal/codegen/ResolvedBindings.java
+++ b/java/dagger/internal/codegen/ResolvedBindings.java
@@ -28,9 +28,7 @@
 import com.google.common.collect.ImmutableSetMultimap;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Multimap;
-import dagger.internal.codegen.BindingType.HasBindingType;
 import dagger.internal.codegen.ContributionType.HasContributionType;
-import dagger.internal.codegen.Keys.HasKey;
 import dagger.model.Key;
 import dagger.model.Scope;
 import java.util.Optional;
@@ -42,7 +40,7 @@
  * @author Gregory Kick
  */
 @AutoValue
-abstract class ResolvedBindings implements HasBindingType, HasContributionType, HasKey {
+abstract class ResolvedBindings implements HasContributionType {
   /**
    * The binding key for which the {@link #bindings()} have been resolved.
    */
@@ -67,8 +65,7 @@
    */
   abstract ImmutableMap<ComponentDescriptor, MembersInjectionBinding> allMembersInjectionBindings();
 
-  @Override
-  public Key key() {
+  final Key key() {
     return bindingKey().key();
   }
   
@@ -262,8 +259,7 @@ ContributionBinding contributionBinding() {
    *
    * @throws IllegalStateException if {@link #isEmpty()} or the binding types conflict
    */
-  @Override
-  public BindingType bindingType() {
+  final BindingType bindingType() {
     checkState(!isEmpty(), "empty bindings for %s", bindingKey());
     if (bindings().isEmpty()
         && (!multibindingDeclarations().isEmpty() || !subcomponentDeclarations().isEmpty())) {
@@ -277,7 +273,7 @@ public BindingType bindingType() {
 
   /** The binding types for {@link #bindings()}. */
   ImmutableSet<BindingType> bindingTypes() {
-    return bindings().stream().map(HasBindingType::bindingType).collect(toImmutableSet());
+    return bindings().stream().map(Binding::bindingType).collect(toImmutableSet());
   }
 
   /**
