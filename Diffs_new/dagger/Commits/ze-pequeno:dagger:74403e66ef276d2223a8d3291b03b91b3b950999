diff --git a/java/dagger/internal/codegen/ProducerFactoryGenerator.java b/java/dagger/internal/codegen/ProducerFactoryGenerator.java
index 6d292cfc5..e311bedf9 100644
--- a/java/dagger/internal/codegen/ProducerFactoryGenerator.java
+++ b/java/dagger/internal/codegen/ProducerFactoryGenerator.java
@@ -202,10 +202,7 @@ ClassName nameGeneratedType(ProductionBinding binding) {
             .addExceptions(getThrownTypeNames(binding.thrownTypes()))
             .addCode(
                 getInvocationCodeBlock(
-                    generatedTypeName,
-                    binding,
-                    providedTypeName,
-                    futureTransform.parameterCodeBlocks()));
+                    binding, providedTypeName, futureTransform.parameterCodeBlocks()));
     if (futureTransform.hasUncheckedCast()) {
       applyMethodBuilder.addAnnotation(AnnotationSpecs.suppressWarnings(UNCHECKED));
     }
@@ -378,7 +375,11 @@ TypeName applyArgType() {
 
     @Override
     String applyArgName() {
-      return asyncDependency.requestElement().get().getSimpleName().toString();
+      String argName = asyncDependency.requestElement().get().getSimpleName().toString();
+      if (argName.equals("module")) {
+        return "moduleArg";
+      }
+      return argName;
     }
 
     @Override
@@ -494,7 +495,6 @@ private static TypeName asyncDependencyType(DependencyRequest dependency) {
    * @param parameterCodeBlocks The code blocks for all the parameters to the producer method.
    */
   private CodeBlock getInvocationCodeBlock(
-      ClassName generatedTypeName,
       ProductionBinding binding,
       TypeName providedTypeName,
       ImmutableList<CodeBlock> parameterCodeBlocks) {
@@ -502,7 +502,7 @@ private CodeBlock getInvocationCodeBlock(
         CodeBlock.of(
             "$L.$L($L)",
             binding.requiresModuleInstance()
-                ? CodeBlock.of("$T.this.module", generatedTypeName)
+                ? "module"
                 : CodeBlock.of("$T", ClassName.get(binding.bindingTypeElement().get())),
             binding.bindingElement().get().getSimpleName(),
             makeParametersCodeBlock(parameterCodeBlocks));
diff --git a/javatests/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java b/javatests/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
index bbbb9c5f1..2f6b7f370 100644
--- a/javatests/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
+++ b/javatests/dagger/internal/codegen/ProducerModuleFactoryGeneratorTest.java
@@ -400,7 +400,7 @@ public void publicModuleNonPublicIncludes() {
             "  @Override public ListenableFuture<String> apply(Void ignoredVoidArg) {",
             "    monitor.methodStarting();",
             "    try {",
-            "      return TestModule_ProduceStringFactory.this.module.produceString();",
+            "      return module.produceString();",
             "    } finally {",
             "      monitor.methodFinished();",
             "    }",
@@ -484,7 +484,7 @@ public void singleProducesMethodNoArgsFutureWithProducerName() {
             "  @Override public ListenableFuture<String> apply(Void ignoredVoidArg) {",
             "    monitor.methodStarting();",
             "    try {",
-            "      return TestModule_ProduceStringFactory.this.module.produceString();",
+            "      return module.produceString();",
             "    } finally {",
             "      monitor.methodFinished();",
             "    }",
