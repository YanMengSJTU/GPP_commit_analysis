diff --git a/java/dagger/internal/codegen/BindingGraphConverter.java b/java/dagger/internal/codegen/BindingGraphConverter.java
index f32d78db0..4d3ad971b 100644
--- a/java/dagger/internal/codegen/BindingGraphConverter.java
+++ b/java/dagger/internal/codegen/BindingGraphConverter.java
@@ -17,6 +17,7 @@
 package dagger.internal.codegen;
 
 import static com.google.auto.common.MoreTypes.asTypeElement;
+import static dagger.internal.codegen.BindingRequest.bindingRequest;
 import static dagger.internal.codegen.DaggerGraphs.unreachableNodes;
 import static dagger.internal.codegen.DaggerStreams.instancesOf;
 import static dagger.internal.codegen.DaggerStreams.presentValues;
@@ -176,7 +177,7 @@ private ResolvedBindings resolvedDependencies(
       return componentTreePath()
           .pathFromRootToAncestor(source.componentPath().currentComponent())
           .currentGraph()
-          .resolvedBindings(BindingRequest.forDependencyRequest(dependencyRequest));
+          .resolvedBindings(bindingRequest(dependencyRequest));
     }
 
     /** Adds a binding node and edges for all its dependencies. */
diff --git a/java/dagger/internal/codegen/BindingRequest.java b/java/dagger/internal/codegen/BindingRequest.java
index d15683e79..e10dae3f5 100644
--- a/java/dagger/internal/codegen/BindingRequest.java
+++ b/java/dagger/internal/codegen/BindingRequest.java
@@ -34,15 +34,15 @@
 abstract class BindingRequest {
 
   /** Creates a {@link BindingRequest} for the given {@link DependencyRequest}. */
-  static BindingRequest forDependencyRequest(DependencyRequest dependencyRequest) {
-    return forDependencyRequest(dependencyRequest.key(), dependencyRequest.kind());
+  static BindingRequest bindingRequest(DependencyRequest dependencyRequest) {
+    return bindingRequest(dependencyRequest.key(), dependencyRequest.kind());
   }
 
   /**
    * Creates a {@link BindingRequest} for a normal dependency request for the given {@link Key} and
    * {@link RequestKind}.
    */
-  static BindingRequest forDependencyRequest(Key key, RequestKind requestKind) {
+  static BindingRequest bindingRequest(Key key, RequestKind requestKind) {
     // When there's a request that has a 1:1 mapping to a FrameworkType, the request should be
     // associated with that FrameworkType as well, because we want to ensure that if a request
     // comes in for that as a dependency first and as a framework instance later, they resolve to
@@ -59,14 +59,14 @@ static BindingRequest forDependencyRequest(Key key, RequestKind requestKind) {
    * Creates a {@link BindingRequest} for a request for a framework instance for the given {@link
    * Key} with the given {@link FrameworkType}.
    */
-  static BindingRequest forFrameworkDependency(Key key, FrameworkType frameworkType) {
+  static BindingRequest bindingRequest(Key key, FrameworkType frameworkType) {
     return new AutoValue_BindingRequest(
         key, Optional.of(frameworkType.requestKind()), Optional.of(frameworkType));
   }
 
   /** Creates a {@link BindingRequest} for the given {@link FrameworkDependency}. */
-  static BindingRequest forFrameworkDependency(FrameworkDependency frameworkDependency) {
-    return forFrameworkDependency(frameworkDependency.key(), frameworkDependency.frameworkType());
+  static BindingRequest bindingRequest(FrameworkDependency frameworkDependency) {
+    return bindingRequest(frameworkDependency.key(), frameworkDependency.frameworkType());
   }
 
   /** Returns the {@link Key} for the requested binding. */
diff --git a/java/dagger/internal/codegen/ComponentBindingExpressions.java b/java/dagger/internal/codegen/ComponentBindingExpressions.java
index 3d0d4c8c9..9a8ee1dfa 100644
--- a/java/dagger/internal/codegen/ComponentBindingExpressions.java
+++ b/java/dagger/internal/codegen/ComponentBindingExpressions.java
@@ -21,6 +21,7 @@
 import static com.google.common.base.Preconditions.checkState;
 import static dagger.internal.codegen.Accessibility.isRawTypeAccessible;
 import static dagger.internal.codegen.Accessibility.isTypeAccessibleFrom;
+import static dagger.internal.codegen.BindingRequest.bindingRequest;
 import static dagger.internal.codegen.BindingType.MEMBERS_INJECTION;
 import static dagger.internal.codegen.CodeBlocks.makeParametersCodeBlock;
 import static dagger.internal.codegen.DelegateBindingExpression.isBindsScopeStrongerThanDependencyScope;
@@ -43,7 +44,6 @@
 import dagger.internal.codegen.ModifiableBindingMethods.ModifiableBindingMethod;
 import dagger.model.BindingKind;
 import dagger.model.DependencyRequest;
-import dagger.model.Key;
 import dagger.model.RequestKind;
 import java.util.HashMap;
 import java.util.Map;
@@ -147,59 +147,13 @@ ComponentBindingExpressions forChildComponent(
   }
 
   /**
-   * Returns an expression that evaluates to the value of a dependency request for a binding owned
-   * by this component or an ancestor.
-   *
-   * @param requestingClass the class that will contain the expression
-   * @throws IllegalStateException if there is no binding expression that satisfies the dependency
-   *     request
-   */
-  Expression getDependencyExpression(Key key, RequestKind requestKind, ClassName requestingClass) {
-    return getDependencyExpression(
-        BindingRequest.forDependencyRequest(key, requestKind), requestingClass);
-  }
-
-  /**
-   * Returns an expression that evaluates to the value of a dependency request for a binding owned
-   * by this component or an ancestor.
-   *
-   * @param requestingClass the class that will contain the expression
-   * @throws IllegalStateException if there is no binding expression that satisfies the dependency
-   *     request
-   */
-  Expression getDependencyExpression(DependencyRequest request, ClassName requestingClass) {
-    return getDependencyExpression(BindingRequest.forDependencyRequest(request), requestingClass);
-  }
-
-  /**
-   * Returns an expression that evaluates to the value of a framework dependency for a binding owned
-   * in this component or an ancestor.
-   *
-   * @param requestingClass the class that will contain the expression
-   * @throws IllegalStateException if there is no binding expression that satisfies the dependency
-   *     request
-   */
-  Expression getDependencyExpression(
-      FrameworkDependency frameworkDependency, ClassName requestingClass) {
-    return getDependencyExpression(
-        BindingRequest.forFrameworkDependency(frameworkDependency), requestingClass);
-  }
-
-  /**
-   * Returns an expression that evaluates to the value of a framework request for a binding owned by
+   * Returns an expression that evaluates to the value of a binding request for a binding owned by
    * this component or an ancestor.
    *
    * @param requestingClass the class that will contain the expression
-   * @throws IllegalStateException if there is no binding expression that satisfies the framework
-   *     request
+   * @throws IllegalStateException if there is no binding expression that satisfies the request
    */
-  Expression getDependencyExpression(
-      Key key, FrameworkType frameworkType, ClassName requestingClass) {
-    return getDependencyExpression(
-        BindingRequest.forFrameworkDependency(key, frameworkType), requestingClass);
-  }
-
-  private Expression getDependencyExpression(BindingRequest request, ClassName requestingClass) {
+  Expression getDependencyExpression(BindingRequest request, ClassName requestingClass) {
     return getBindingExpression(request).getDependencyExpression(requestingClass);
   }
 
@@ -221,10 +175,11 @@ CodeBlock getCreateMethodArgumentsCodeBlock(ContributionBinding binding) {
               generatedComponentModel.name()));
     }
 
-    binding
-        .frameworkDependencies()
-        .stream()
-        .map(dependency -> getDependencyExpression(dependency, generatedComponentModel.name()))
+    binding.frameworkDependencies().stream()
+        .map(BindingRequest::bindingRequest)
+        .map(
+            request ->
+                getDependencyExpression(request, generatedComponentModel.name()))
         .map(Expression::codeBlock)
         .forEach(arguments::add);
 
@@ -241,12 +196,12 @@ CodeBlock getCreateMethodArgumentsCodeBlock(ContributionBinding binding) {
    *
    * @param requestingClass the class that will contain the expression
    */
-  // TODO(b/64024402) Merge with getDependencyExpression(DependencyRequest, ClassName) if possible.
   Expression getDependencyArgumentExpression(
       DependencyRequest dependencyRequest, ClassName requestingClass) {
 
     TypeMirror dependencyType = dependencyRequest.key().type();
-    Expression dependencyExpression = getDependencyExpression(dependencyRequest, requestingClass);
+    Expression dependencyExpression =
+        getDependencyExpression(bindingRequest(dependencyRequest), requestingClass);
 
     if (dependencyRequest.kind().equals(RequestKind.INSTANCE)
         && !isTypeAccessibleFrom(dependencyType, requestingClass.packageName())
@@ -263,8 +218,7 @@ Expression getDependencyArgumentExpression(
    */
   Optional<MethodSpec> getComponentMethod(ComponentMethodDescriptor componentMethod) {
     checkArgument(componentMethod.dependencyRequest().isPresent());
-    BindingRequest request =
-        BindingRequest.forDependencyRequest(componentMethod.dependencyRequest().get());
+    BindingRequest request = bindingRequest(componentMethod.dependencyRequest().get());
     MethodSpec method =
         MethodSpec.overriding(
                 componentMethod.methodElement(),
@@ -778,7 +732,7 @@ private BindingExpression providerBindingExpression(ResolvedBindings resolvedBin
             instanceof DerivedFromFrameworkInstanceBindingExpression)) {
       return wrapInMethod(
           resolvedBindings,
-          BindingRequest.forDependencyRequest(resolvedBindings.key(), RequestKind.PROVIDER),
+          bindingRequest(resolvedBindings.key(), RequestKind.PROVIDER),
           innerSwitchingProviders.newBindingExpression(resolvedBindings.contributionBinding()));
     }
     return frameworkInstanceBindingExpression(resolvedBindings);
@@ -824,7 +778,7 @@ private BindingExpression instanceBindingExpression(ResolvedBindings resolvedBin
               || needsCaching(resolvedBindings)
           ? wrapInMethod(
               resolvedBindings,
-              BindingRequest.forDependencyRequest(resolvedBindings.key(), RequestKind.INSTANCE),
+              bindingRequest(resolvedBindings.key(), RequestKind.INSTANCE),
               directInstanceExpression)
           : directInstanceExpression;
     }
@@ -1014,7 +968,7 @@ private boolean doesComponentMethodMatch(
       ComponentMethodDescriptor componentMethod, BindingRequest request) {
     return componentMethod
         .dependencyRequest()
-        .map(BindingRequest::forDependencyRequest)
+        .map(BindingRequest::bindingRequest)
         .filter(request::equals)
         .isPresent();
   }
diff --git a/java/dagger/internal/codegen/ComponentTreeTraverser.java b/java/dagger/internal/codegen/ComponentTreeTraverser.java
index 0c12a68c4..7f99bf1d6 100644
--- a/java/dagger/internal/codegen/ComponentTreeTraverser.java
+++ b/java/dagger/internal/codegen/ComponentTreeTraverser.java
@@ -25,6 +25,7 @@
 import static com.google.common.collect.Iterables.indexOf;
 import static com.google.common.collect.Iterables.skip;
 import static com.google.common.collect.Multimaps.asMap;
+import static dagger.internal.codegen.BindingRequest.bindingRequest;
 import static dagger.internal.codegen.DaggerStreams.toImmutableSet;
 import static java.util.Spliterator.ORDERED;
 import static java.util.Spliterator.SIZED;
@@ -393,7 +394,7 @@ protected void visitBinding(Binding binding, ComponentDescriptor owningComponent
     private void nextDependencyRequest(
         DependencyRequest dependencyRequest, BindingGraph bindingGraph) {
       ResolvedBindings resolvedBindings =
-          bindingGraph.resolvedBindings(BindingRequest.forDependencyRequest(dependencyRequest));
+          bindingGraph.resolvedBindings(bindingRequest(dependencyRequest));
       dependencyRequestPath.addLast(dependencyRequest);
       resolvedBindingsPath.addLast(resolvedBindings);
       // Don't add the key of a members injection request, as it doesn't participate in cycles
diff --git a/java/dagger/internal/codegen/DaggerKythePlugin.java b/java/dagger/internal/codegen/DaggerKythePlugin.java
index ab5341ae6..df1b16afb 100644
--- a/java/dagger/internal/codegen/DaggerKythePlugin.java
+++ b/java/dagger/internal/codegen/DaggerKythePlugin.java
@@ -19,6 +19,8 @@
 // the regular kythe/java tree.
 package dagger.internal.codegen;
 
+import static dagger.internal.codegen.BindingRequest.bindingRequest;
+
 import com.google.auto.service.AutoService;
 import com.google.common.collect.Iterables;
 import com.google.devtools.kythe.analyzers.base.EntrySet;
@@ -98,7 +100,7 @@ private void addEdgesForDependencyRequest(
     if (!dependency.requestElement().isPresent()) {
       return;
     }
-    BindingRequest request = BindingRequest.forDependencyRequest(targetKey, dependency.kind());
+    BindingRequest request = bindingRequest(targetKey, dependency.kind());
     ResolvedBindings resolvedBindings = graph.resolvedBindings(request);
     for (Binding binding : resolvedBindings.bindings()) {
       if (binding.bindingElement().isPresent()) {
diff --git a/java/dagger/internal/codegen/DelegateBindingExpression.java b/java/dagger/internal/codegen/DelegateBindingExpression.java
index 702b3342f..aaafe6f87 100644
--- a/java/dagger/internal/codegen/DelegateBindingExpression.java
+++ b/java/dagger/internal/codegen/DelegateBindingExpression.java
@@ -20,6 +20,7 @@
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.collect.Iterables.getOnlyElement;
 import static dagger.internal.codegen.Accessibility.isTypeAccessibleFrom;
+import static dagger.internal.codegen.BindingRequest.bindingRequest;
 import static dagger.internal.codegen.RequestKinds.requestType;
 import static dagger.model.BindingKind.DELEGATE;
 
@@ -71,7 +72,8 @@ static boolean isBindsScopeStrongerThanDependencyScope(
   Expression getDependencyExpression(ClassName requestingClass) {
     Expression delegateExpression =
         componentBindingExpressions.getDependencyExpression(
-            getOnlyElement(binding.dependencies()).key(), requestKind, requestingClass);
+            bindingRequest(getOnlyElement(binding.dependencies()).key(), requestKind),
+            requestingClass);
 
     TypeMirror contributedType = binding.contributedType();
     switch (requestKind) {
diff --git a/java/dagger/internal/codegen/DelegatingFrameworkInstanceCreationExpression.java b/java/dagger/internal/codegen/DelegatingFrameworkInstanceCreationExpression.java
index 63521c07f..e5f71ee72 100644
--- a/java/dagger/internal/codegen/DelegatingFrameworkInstanceCreationExpression.java
+++ b/java/dagger/internal/codegen/DelegatingFrameworkInstanceCreationExpression.java
@@ -18,6 +18,7 @@
 
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.collect.Iterables.getOnlyElement;
+import static dagger.internal.codegen.BindingRequest.bindingRequest;
 
 import com.squareup.javapoet.CodeBlock;
 import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
@@ -44,7 +45,8 @@ public CodeBlock creationExpression() {
     FrameworkDependency frameworkDependency = getOnlyElement(binding.frameworkDependencies());
     return CodeBlocks.cast(
         componentBindingExpressions
-            .getDependencyExpression(frameworkDependency, generatedComponentModel.name())
+            .getDependencyExpression(
+                bindingRequest(frameworkDependency), generatedComponentModel.name())
             .codeBlock(),
         frameworkDependency.frameworkClass());
   }
diff --git a/java/dagger/internal/codegen/DerivedFromFrameworkInstanceBindingExpression.java b/java/dagger/internal/codegen/DerivedFromFrameworkInstanceBindingExpression.java
index adcd17acf..20f73deec 100644
--- a/java/dagger/internal/codegen/DerivedFromFrameworkInstanceBindingExpression.java
+++ b/java/dagger/internal/codegen/DerivedFromFrameworkInstanceBindingExpression.java
@@ -17,6 +17,7 @@
 package dagger.internal.codegen;
 
 import static com.google.common.base.Preconditions.checkNotNull;
+import static dagger.internal.codegen.BindingRequest.bindingRequest;
 
 import com.squareup.javapoet.ClassName;
 import dagger.model.Key;
@@ -48,7 +49,8 @@
   Expression getDependencyExpression(ClassName requestingClass) {
     return frameworkType.to(
         requestKind,
-        componentBindingExpressions.getDependencyExpression(key, frameworkType, requestingClass),
+        componentBindingExpressions.getDependencyExpression(
+            bindingRequest(key, frameworkType), requestingClass),
         types);
   }
 }
diff --git a/java/dagger/internal/codegen/ImmediateFutureBindingExpression.java b/java/dagger/internal/codegen/ImmediateFutureBindingExpression.java
index 661063425..d4e082021 100644
--- a/java/dagger/internal/codegen/ImmediateFutureBindingExpression.java
+++ b/java/dagger/internal/codegen/ImmediateFutureBindingExpression.java
@@ -17,6 +17,7 @@
 package dagger.internal.codegen;
 
 import static com.google.common.base.Preconditions.checkNotNull;
+import static dagger.internal.codegen.BindingRequest.bindingRequest;
 
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
@@ -50,7 +51,7 @@ Expression getDependencyExpression(ClassName requestingClass) {
   private CodeBlock instanceExpression(ClassName requestingClass) {
     Expression expression =
         componentBindingExpressions.getDependencyExpression(
-            key, RequestKind.INSTANCE, requestingClass);
+            bindingRequest(key, RequestKind.INSTANCE), requestingClass);
     // Java 7 type inference is not as strong as in Java 8, and therefore some generated code must
     // cast.
     //
diff --git a/java/dagger/internal/codegen/InnerSwitchingProviders.java b/java/dagger/internal/codegen/InnerSwitchingProviders.java
index c3c590e3f..388d315f0 100644
--- a/java/dagger/internal/codegen/InnerSwitchingProviders.java
+++ b/java/dagger/internal/codegen/InnerSwitchingProviders.java
@@ -17,6 +17,7 @@
 package dagger.internal.codegen;
 
 import static com.squareup.javapoet.MethodSpec.constructorBuilder;
+import static dagger.internal.codegen.BindingRequest.bindingRequest;
 import static dagger.model.RequestKind.INSTANCE;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PRIVATE;
@@ -97,7 +98,7 @@ public Expression getProviderExpression(ClassName switchType, int switchId) {
     @Override
     public Expression getReturnExpression() {
       return componentBindingExpressions.getDependencyExpression(
-          binding.key(), INSTANCE, requestingClass);
+          bindingRequest(binding.key(), INSTANCE), requestingClass);
     }
   }
 }
diff --git a/java/dagger/internal/codegen/MapBindingExpression.java b/java/dagger/internal/codegen/MapBindingExpression.java
index 4884d2b49..b5fe89095 100644
--- a/java/dagger/internal/codegen/MapBindingExpression.java
+++ b/java/dagger/internal/codegen/MapBindingExpression.java
@@ -19,6 +19,7 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.collect.Iterables.getOnlyElement;
 import static dagger.internal.codegen.Accessibility.isTypeAccessibleFrom;
+import static dagger.internal.codegen.BindingRequest.bindingRequest;
 import static dagger.internal.codegen.CodeBlocks.toParametersCodeBlock;
 import static dagger.internal.codegen.MapKeys.getMapKeyExpression;
 import static dagger.model.BindingKind.MULTIBOUND_MAP;
@@ -134,7 +135,7 @@ private CodeBlock keyAndValueExpression(DependencyRequest dependency, ClassName
         "$L, $L",
         getMapKeyExpression(dependencies.get(dependency), requestingClass, elements),
         componentBindingExpressions
-            .getDependencyExpression(dependency, requestingClass)
+            .getDependencyExpression(bindingRequest(dependency), requestingClass)
             .codeBlock());
   }
 
diff --git a/java/dagger/internal/codegen/MapFactoryCreationExpression.java b/java/dagger/internal/codegen/MapFactoryCreationExpression.java
index 3e61293b7..a931d185d 100644
--- a/java/dagger/internal/codegen/MapFactoryCreationExpression.java
+++ b/java/dagger/internal/codegen/MapFactoryCreationExpression.java
@@ -17,6 +17,7 @@
 package dagger.internal.codegen;
 
 import static com.google.common.base.Preconditions.checkNotNull;
+import static dagger.internal.codegen.BindingRequest.bindingRequest;
 import static dagger.internal.codegen.MapKeys.getMapKeyExpression;
 import static dagger.internal.codegen.SourceFiles.mapFactoryClassName;
 
@@ -83,7 +84,8 @@ public CodeBlock creationExpression() {
           graph.contributionBindings().get(frameworkDependency.key()).contributionBinding();
       CodeBlock value =
           componentBindingExpressions
-              .getDependencyExpression(frameworkDependency, generatedComponentModel.name())
+              .getDependencyExpression(
+                  bindingRequest(frameworkDependency), generatedComponentModel.name())
               .codeBlock();
       builder.add(
           ".put($L, $L)",
diff --git a/java/dagger/internal/codegen/MultibindingExpression.java b/java/dagger/internal/codegen/MultibindingExpression.java
index fdfd525cd..337802ec1 100644
--- a/java/dagger/internal/codegen/MultibindingExpression.java
+++ b/java/dagger/internal/codegen/MultibindingExpression.java
@@ -17,6 +17,7 @@
 package dagger.internal.codegen;
 
 import static com.google.common.base.Preconditions.checkState;
+import static dagger.internal.codegen.BindingRequest.bindingRequest;
 
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Sets;
@@ -75,7 +76,7 @@ Expression getDependencyExpression(ClassName requestingClass) {
     if (generatedComponentModel.supermodel().isPresent()) {
       Optional<ModifiableBindingMethod> method =
           generatedComponentModel.getModifiableBindingMethod(
-              BindingRequest.forDependencyRequest(binding.key(), RequestKind.INSTANCE));
+              bindingRequest(binding.key(), RequestKind.INSTANCE));
       checkState(
           method.isPresent(),
           "Generating a multibinding super method call when no method has been registered for the "
diff --git a/java/dagger/internal/codegen/OptionalBindingExpression.java b/java/dagger/internal/codegen/OptionalBindingExpression.java
index 68941dd0f..682978522 100644
--- a/java/dagger/internal/codegen/OptionalBindingExpression.java
+++ b/java/dagger/internal/codegen/OptionalBindingExpression.java
@@ -18,6 +18,7 @@
 
 import static com.google.common.collect.Iterables.getOnlyElement;
 import static dagger.internal.codegen.Accessibility.isTypeAccessibleFrom;
+import static dagger.internal.codegen.BindingRequest.bindingRequest;
 
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
@@ -63,7 +64,7 @@ Expression getDependencyExpression(ClassName requestingClass) {
 
     CodeBlock dependencyExpression =
         componentBindingExpressions
-            .getDependencyExpression(dependency, requestingClass)
+            .getDependencyExpression(bindingRequest(dependency), requestingClass)
             .codeBlock();
 
     // If the dependency type is inaccessible, then we have to use Optional.<Object>of(...), or else
diff --git a/java/dagger/internal/codegen/OptionalFactoryInstanceCreationExpression.java b/java/dagger/internal/codegen/OptionalFactoryInstanceCreationExpression.java
index cffcbc83e..074167da4 100644
--- a/java/dagger/internal/codegen/OptionalFactoryInstanceCreationExpression.java
+++ b/java/dagger/internal/codegen/OptionalFactoryInstanceCreationExpression.java
@@ -17,6 +17,7 @@
 package dagger.internal.codegen;
 
 import static com.google.common.collect.Iterables.getOnlyElement;
+import static dagger.internal.codegen.BindingRequest.bindingRequest;
 
 import com.squareup.javapoet.CodeBlock;
 import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
@@ -51,7 +52,8 @@ public CodeBlock creationExpression() {
             binding,
             componentBindingExpressions
                 .getDependencyExpression(
-                    getOnlyElement(binding.frameworkDependencies()), generatedComponentModel.name())
+                    bindingRequest(getOnlyElement(binding.frameworkDependencies())),
+                    generatedComponentModel.name())
                 .codeBlock());
   }
 
diff --git a/java/dagger/internal/codegen/ProducerFromProviderCreationExpression.java b/java/dagger/internal/codegen/ProducerFromProviderCreationExpression.java
index d35e6c2a0..d4f6d8587 100644
--- a/java/dagger/internal/codegen/ProducerFromProviderCreationExpression.java
+++ b/java/dagger/internal/codegen/ProducerFromProviderCreationExpression.java
@@ -17,6 +17,7 @@
 package dagger.internal.codegen;
 
 import static com.google.common.base.Preconditions.checkNotNull;
+import static dagger.internal.codegen.BindingRequest.bindingRequest;
 
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
@@ -46,7 +47,7 @@ public CodeBlock creationExpression() {
         RequestKind.PRODUCER,
         componentBindingExpressions
             .getDependencyExpression(
-                FrameworkDependency.create(binding.key(), FrameworkType.PROVIDER),
+                bindingRequest(binding.key(), FrameworkType.PROVIDER),
                 generatedComponentModel.name())
             .codeBlock());
   }
diff --git a/java/dagger/internal/codegen/SetBindingExpression.java b/java/dagger/internal/codegen/SetBindingExpression.java
index d1f73dd29..ffb2d7b58 100644
--- a/java/dagger/internal/codegen/SetBindingExpression.java
+++ b/java/dagger/internal/codegen/SetBindingExpression.java
@@ -18,6 +18,7 @@
 
 import static com.google.common.collect.Iterables.getOnlyElement;
 import static dagger.internal.codegen.Accessibility.isTypeAccessibleFrom;
+import static dagger.internal.codegen.BindingRequest.bindingRequest;
 import static dagger.internal.codegen.CodeBlocks.toParametersCodeBlock;
 import static javax.lang.model.util.ElementFilter.methodsIn;
 
@@ -133,7 +134,7 @@ private DeclaredType immutableSetType() {
   private CodeBlock getContributionExpression(
       DependencyRequest dependency, ClassName requestingClass) {
     return componentBindingExpressions
-        .getDependencyExpression(dependency, requestingClass)
+        .getDependencyExpression(bindingRequest(dependency), requestingClass)
         .codeBlock();
   }
 
diff --git a/java/dagger/internal/codegen/SetFactoryCreationExpression.java b/java/dagger/internal/codegen/SetFactoryCreationExpression.java
index 94975680f..302a41097 100644
--- a/java/dagger/internal/codegen/SetFactoryCreationExpression.java
+++ b/java/dagger/internal/codegen/SetFactoryCreationExpression.java
@@ -17,6 +17,7 @@
 package dagger.internal.codegen;
 
 import static com.google.common.base.Preconditions.checkNotNull;
+import static dagger.internal.codegen.BindingRequest.bindingRequest;
 import static dagger.internal.codegen.SourceFiles.setFactoryClassName;
 
 import com.squareup.javapoet.CodeBlock;
@@ -78,7 +79,8 @@ public CodeBlock creationExpression() {
 
       CodeBlock argument =
           componentBindingExpressions
-              .getDependencyExpression(frameworkDependency, generatedComponentModel.name())
+              .getDependencyExpression(
+                  bindingRequest(frameworkDependency), generatedComponentModel.name())
               .codeBlock();
       builderMethodCalls.add(
           ".$L($L)",
diff --git a/java/dagger/internal/codegen/StaticSwitchingProviders.java b/java/dagger/internal/codegen/StaticSwitchingProviders.java
index f0918dec4..6a8492011 100644
--- a/java/dagger/internal/codegen/StaticSwitchingProviders.java
+++ b/java/dagger/internal/codegen/StaticSwitchingProviders.java
@@ -19,6 +19,7 @@
 import static com.squareup.javapoet.ClassName.OBJECT;
 import static com.squareup.javapoet.MethodSpec.constructorBuilder;
 import static com.squareup.javapoet.TypeName.INT;
+import static dagger.internal.codegen.BindingRequest.bindingRequest;
 import static dagger.internal.codegen.CodeBlocks.makeParametersCodeBlock;
 import static dagger.internal.codegen.CodeBlocks.toParametersCodeBlock;
 import static dagger.internal.codegen.SourceFiles.generatedClassNameForBinding;
@@ -141,7 +142,9 @@ private CodeBlock getMethodArguments() {
 
       for (FrameworkDependency dependency : binding.frameworkDependencies()) {
         TypeMirror type =
-            componentBindingExpressions.getDependencyExpression(dependency, owningComponent).type();
+            componentBindingExpressions
+                .getDependencyExpression(bindingRequest(dependency), owningComponent)
+                .type();
         arguments.add(argument(type, i++));
       }
       return makeParametersCodeBlock(arguments.build());
