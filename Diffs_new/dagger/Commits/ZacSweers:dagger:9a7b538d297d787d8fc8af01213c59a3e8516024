diff --git a/BUILD b/BUILD
index 1b8837e73..cfad792d0 100644
--- a/BUILD
+++ b/BUILD
@@ -62,6 +62,7 @@ jarjar_library(
         "//java/dagger/internal/codegen:processor",
         "//java/dagger/internal/codegen:validation",
         "//java/dagger/internal/codegen:writing",
+        "//java/dagger/internal/codegen/compileroption",
         "//java/dagger/internal/codegen/javapoet",
         "//java/dagger/internal/codegen/langmodel",
         "//java/dagger/internal/codegen/statistics",
@@ -82,6 +83,7 @@ jarjar_library(
         "//java/dagger/internal/codegen:libprocessor-src.jar",
         "//java/dagger/internal/codegen:libvalidation-src.jar",
         "//java/dagger/internal/codegen:libwriting-src.jar",
+        "//java/dagger/internal/codegen/compileroption:libcompileroption-src.jar",
         "//java/dagger/internal/codegen/javapoet:libjavapoet-src.jar",
         "//java/dagger/internal/codegen/langmodel:liblangmodel-src.jar",
         "//java/dagger/internal/codegen/statistics:libstatistics-src.jar",
diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index 390c5fdec..32a0d9276 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -67,14 +67,11 @@ java_library(
     name = "base",
     srcs = [
         "ClearableCache.java",
-        "CompilerOptions.java",
         "ComponentAnnotation.java",
         "ContributionType.java",
         "DiagnosticFormatting.java",
         "ElementFormatter.java",
-        "FeatureStatus.java",
         "Formatter.java",
-        "ForwardingCompilerOptions.java",
         "FrameworkTypes.java",
         "InjectionAnnotations.java",
         "Keys.java",
@@ -85,8 +82,6 @@ java_library(
         "MoreAnnotationValues.java",
         "MultibindingAnnotations.java",
         "OptionalType.java",
-        "ProcessingEnvironmentCompilerOptions.java",
-        "ProcessingOptions.java",
         "RequestKinds.java",
         "Scopes.java",
         "SetType.java",
@@ -97,7 +92,6 @@ java_library(
         "TypeCheckingProcessingStep.java",
         "UniqueNameSet.java",
         "Util.java",
-        "ValidationType.java",
         "package-info.java",
     ],
     plugins = CODEGEN_PLUGINS,
@@ -168,6 +162,7 @@ java_library(
     tags = ["maven:merged"],
     deps = CODEGEN_DEPS + [
         ":base",
+        "//java/dagger/internal/codegen/compileroption",
         "//java/dagger/internal/codegen/langmodel",
         "//java/dagger/internal/codegen/javapoet",
     ],
@@ -211,6 +206,7 @@ java_library(
     deps = CODEGEN_DEPS + [
         ":base",
         ":binding",
+        "//java/dagger/internal/codegen/compileroption",
         "//java/dagger/internal/codegen/langmodel",
     ],
 )
@@ -235,6 +231,7 @@ java_library(
         ":base",
         ":binding",
         ":validation",
+        "//java/dagger/internal/codegen/compileroption",
         "//java/dagger/internal/codegen/langmodel",
     ],
 )
@@ -315,6 +312,7 @@ java_library(
     deps = CODEGEN_DEPS + [
         ":base",
         ":binding",
+        "//java/dagger/internal/codegen/compileroption",
         "//java/dagger/internal/codegen/javapoet",
         "//java/dagger/internal/codegen/langmodel",
         "//java/dagger/internal/codegen/statistics",
@@ -355,6 +353,7 @@ java_library(
         ":binding_graph_validation",
         ":writing",
         ":validation",
+        "//java/dagger/internal/codegen/compileroption",
         "//java/dagger/internal/codegen/javapoet",
         "//java/dagger/internal/codegen/langmodel",
         "//java/dagger/internal/codegen/statistics",
@@ -385,8 +384,8 @@ java_library(
     deps = [
         ":base",
         ":javac",
-        ":processor",
         "//java/dagger:core",
+        "//java/dagger/internal/codegen/compileroption",
         "//java/dagger/internal/codegen/langmodel",
     ],
 )
@@ -442,6 +441,7 @@ java_library(
     javacopts = DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
     plugins = CODEGEN_PLUGINS,
     deps = CODEGEN_DEPS + [
+        "//java/dagger/internal/codegen/compileroption",
         "//java/dagger/internal/codegen/langmodel",
         "//java/dagger/internal/codegen/javapoet",
         "//java/dagger/internal/codegen/statistics",
diff --git a/java/dagger/internal/codegen/BindingGraphPlugins.java b/java/dagger/internal/codegen/BindingGraphPlugins.java
index 1d89199c7..16ea6cb40 100644
--- a/java/dagger/internal/codegen/BindingGraphPlugins.java
+++ b/java/dagger/internal/codegen/BindingGraphPlugins.java
@@ -21,6 +21,7 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+import dagger.internal.codegen.compileroption.ProcessingOptions;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import dagger.spi.BindingGraphPlugin;
diff --git a/java/dagger/internal/codegen/BindingGraphStatisticsCollector.java b/java/dagger/internal/codegen/BindingGraphStatisticsCollector.java
index 129647fff..3ea336437 100644
--- a/java/dagger/internal/codegen/BindingGraphStatisticsCollector.java
+++ b/java/dagger/internal/codegen/BindingGraphStatisticsCollector.java
@@ -41,7 +41,7 @@
   private boolean isInjected;
 
   @Singleton
-  @Component(modules = JavacPluginModule.class)
+  @Component(modules = {InjectBindingRegistryModule.class, JavacPluginModule.class})
   interface Injector {
     void inject(BindingGraphStatisticsCollector collector);
 
diff --git a/java/dagger/internal/codegen/ComponentBindingExpressions.java b/java/dagger/internal/codegen/ComponentBindingExpressions.java
index 84daadb1e..8022f0248 100644
--- a/java/dagger/internal/codegen/ComponentBindingExpressions.java
+++ b/java/dagger/internal/codegen/ComponentBindingExpressions.java
@@ -39,6 +39,7 @@
 import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
 import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
 import dagger.internal.codegen.MethodBindingExpression.MethodImplementationStrategy;
+import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.internal.codegen.javapoet.Expression;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
diff --git a/java/dagger/internal/codegen/ComponentDescriptorValidator.java b/java/dagger/internal/codegen/ComponentDescriptorValidator.java
index f86747c8e..74dc17037 100644
--- a/java/dagger/internal/codegen/ComponentDescriptorValidator.java
+++ b/java/dagger/internal/codegen/ComponentDescriptorValidator.java
@@ -43,6 +43,8 @@
 import com.google.common.collect.Sets;
 import dagger.internal.codegen.ComponentRequirement.NullPolicy;
 import dagger.internal.codegen.ErrorMessages.ComponentCreatorMessages;
+import dagger.internal.codegen.compileroption.CompilerOptions;
+import dagger.internal.codegen.compileroption.ValidationType;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import dagger.model.Scope;
diff --git a/java/dagger/internal/codegen/ComponentHierarchyValidator.java b/java/dagger/internal/codegen/ComponentHierarchyValidator.java
index e19690543..9c6c2631b 100644
--- a/java/dagger/internal/codegen/ComponentHierarchyValidator.java
+++ b/java/dagger/internal/codegen/ComponentHierarchyValidator.java
@@ -38,6 +38,7 @@
 import com.google.common.collect.SetMultimap;
 import com.google.common.collect.Sets;
 import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
+import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.model.Scope;
 import java.util.Collection;
 import java.util.Formatter;
diff --git a/java/dagger/internal/codegen/ComponentImplementation.java b/java/dagger/internal/codegen/ComponentImplementation.java
index c2a4a32e6..c5bc1230e 100644
--- a/java/dagger/internal/codegen/ComponentImplementation.java
+++ b/java/dagger/internal/codegen/ComponentImplementation.java
@@ -40,6 +40,7 @@
 import com.squareup.javapoet.FieldSpec;
 import com.squareup.javapoet.MethodSpec;
 import com.squareup.javapoet.TypeSpec;
+import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.internal.codegen.javapoet.TypeSpecs;
 import dagger.model.Key;
 import dagger.model.RequestKind;
diff --git a/java/dagger/internal/codegen/ComponentImplementationBuilder.java b/java/dagger/internal/codegen/ComponentImplementationBuilder.java
index c19acdede..4a762a3aa 100644
--- a/java/dagger/internal/codegen/ComponentImplementationBuilder.java
+++ b/java/dagger/internal/codegen/ComponentImplementationBuilder.java
@@ -54,6 +54,7 @@
 import com.squareup.javapoet.TypeSpec;
 import dagger.internal.Preconditions;
 import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
+import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.internal.codegen.javapoet.AnnotationSpecs;
 import dagger.internal.codegen.javapoet.CodeBlocks;
 import dagger.internal.codegen.langmodel.DaggerElements;
diff --git a/java/dagger/internal/codegen/ComponentImplementationFactory.java b/java/dagger/internal/codegen/ComponentImplementationFactory.java
index 13de2f473..3d3289bb4 100644
--- a/java/dagger/internal/codegen/ComponentImplementationFactory.java
+++ b/java/dagger/internal/codegen/ComponentImplementationFactory.java
@@ -19,6 +19,7 @@
 import static dagger.internal.codegen.ComponentGenerator.componentName;
 import static dagger.internal.codegen.Util.reentrantComputeIfAbsent;
 
+import dagger.internal.codegen.compileroption.CompilerOptions;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Optional;
diff --git a/java/dagger/internal/codegen/ComponentProcessingStep.java b/java/dagger/internal/codegen/ComponentProcessingStep.java
index 8643ab010..4e593aebe 100644
--- a/java/dagger/internal/codegen/ComponentProcessingStep.java
+++ b/java/dagger/internal/codegen/ComponentProcessingStep.java
@@ -23,7 +23,7 @@
 import static dagger.internal.codegen.ComponentCreatorAnnotation.allCreatorAnnotations;
 import static dagger.internal.codegen.ComponentCreatorAnnotation.rootComponentCreatorAnnotations;
 import static dagger.internal.codegen.ComponentCreatorAnnotation.subcomponentCreatorAnnotations;
-import static dagger.internal.codegen.ValidationType.NONE;
+import static dagger.internal.codegen.compileroption.ValidationType.NONE;
 import static java.util.Collections.disjoint;
 
 import com.google.auto.common.BasicAnnotationProcessor.ProcessingStep;
@@ -35,6 +35,7 @@
 import com.google.common.collect.SetMultimap;
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import dagger.internal.codegen.ComponentValidator.ComponentValidationReport;
+import dagger.internal.codegen.compileroption.CompilerOptions;
 import java.lang.annotation.Annotation;
 import java.util.HashMap;
 import java.util.Map;
diff --git a/java/dagger/internal/codegen/ComponentProcessor.java b/java/dagger/internal/codegen/ComponentProcessor.java
index 0d32cbf76..cc4e97f5c 100644
--- a/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/java/dagger/internal/codegen/ComponentProcessor.java
@@ -32,6 +32,8 @@
 import dagger.Module;
 import dagger.Provides;
 import dagger.internal.codegen.SpiModule.TestingPlugins;
+import dagger.internal.codegen.compileroption.CompilerOptions;
+import dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions;
 import dagger.internal.codegen.statistics.DaggerStatisticsCollectingProcessingStep;
 import dagger.internal.codegen.statistics.DaggerStatisticsCollector;
 import dagger.spi.BindingGraphPlugin;
diff --git a/java/dagger/internal/codegen/ComponentProvisionBindingExpression.java b/java/dagger/internal/codegen/ComponentProvisionBindingExpression.java
index 4a134507e..8feb81305 100644
--- a/java/dagger/internal/codegen/ComponentProvisionBindingExpression.java
+++ b/java/dagger/internal/codegen/ComponentProvisionBindingExpression.java
@@ -21,6 +21,7 @@
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
 import dagger.internal.Preconditions;
+import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.internal.codegen.javapoet.Expression;
 
 /** A binding expression for component provision methods. */
diff --git a/java/dagger/internal/codegen/DaggerKythePlugin.java b/java/dagger/internal/codegen/DaggerKythePlugin.java
index 5a685ef26..393773967 100644
--- a/java/dagger/internal/codegen/DaggerKythePlugin.java
+++ b/java/dagger/internal/codegen/DaggerKythePlugin.java
@@ -179,7 +179,7 @@ public void run(
   }
 
   @Singleton
-  @Component(modules = JavacPluginModule.class)
+  @Component(modules = {InjectBindingRegistryModule.class, JavacPluginModule.class})
   interface PluginComponent {
     void inject(DaggerKythePlugin plugin);
 
diff --git a/java/dagger/internal/codegen/DependencyMethodProviderCreationExpression.java b/java/dagger/internal/codegen/DependencyMethodProviderCreationExpression.java
index 853248121..7c8170898 100644
--- a/java/dagger/internal/codegen/DependencyMethodProviderCreationExpression.java
+++ b/java/dagger/internal/codegen/DependencyMethodProviderCreationExpression.java
@@ -33,6 +33,7 @@
 import com.squareup.javapoet.MethodSpec;
 import com.squareup.javapoet.TypeName;
 import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
+import dagger.internal.codegen.compileroption.CompilerOptions;
 import javax.lang.model.element.Element;
 
 /**
diff --git a/java/dagger/internal/codegen/DependsOnProductionExecutorValidator.java b/java/dagger/internal/codegen/DependsOnProductionExecutorValidator.java
index ad09d720c..3ff55e866 100644
--- a/java/dagger/internal/codegen/DependsOnProductionExecutorValidator.java
+++ b/java/dagger/internal/codegen/DependsOnProductionExecutorValidator.java
@@ -19,6 +19,7 @@
 import static dagger.internal.codegen.extension.DaggerStreams.instancesOf;
 import static javax.tools.Diagnostic.Kind.ERROR;
 
+import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.model.BindingGraph;
 import dagger.model.BindingGraph.MaybeBinding;
 import dagger.model.Key;
diff --git a/java/dagger/internal/codegen/DiagnosticReporterFactory.java b/java/dagger/internal/codegen/DiagnosticReporterFactory.java
index 9699a66ec..803bf991f 100644
--- a/java/dagger/internal/codegen/DiagnosticReporterFactory.java
+++ b/java/dagger/internal/codegen/DiagnosticReporterFactory.java
@@ -25,7 +25,7 @@
 import static com.google.common.collect.Iterables.transform;
 import static com.google.common.collect.Lists.asList;
 import static dagger.internal.codegen.ElementFormatter.elementToString;
-import static dagger.internal.codegen.ValidationType.NONE;
+import static dagger.internal.codegen.compileroption.ValidationType.NONE;
 import static dagger.internal.codegen.extension.DaggerGraphs.shortestPath;
 import static dagger.internal.codegen.extension.DaggerStreams.instancesOf;
 import static dagger.internal.codegen.extension.DaggerStreams.presentValues;
@@ -49,6 +49,8 @@
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Table;
 import com.google.errorprone.annotations.FormatMethod;
+import dagger.internal.codegen.compileroption.CompilerOptions;
+import dagger.internal.codegen.compileroption.ValidationType;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import dagger.model.BindingGraph;
 import dagger.model.BindingGraph.ChildFactoryMethodEdge;
diff --git a/java/dagger/internal/codegen/DuplicateBindingsValidator.java b/java/dagger/internal/codegen/DuplicateBindingsValidator.java
index 7b5d6b518..d770ba2c9 100644
--- a/java/dagger/internal/codegen/DuplicateBindingsValidator.java
+++ b/java/dagger/internal/codegen/DuplicateBindingsValidator.java
@@ -37,6 +37,7 @@
 import com.google.common.collect.Multimap;
 import com.google.common.collect.Multimaps;
 import com.google.common.collect.Sets;
+import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.model.Binding;
 import dagger.model.BindingGraph;
 import dagger.model.BindingKind;
diff --git a/java/dagger/internal/codegen/FactoryGenerator.java b/java/dagger/internal/codegen/FactoryGenerator.java
index 5d53c1f85..2ea4b7495 100644
--- a/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/java/dagger/internal/codegen/FactoryGenerator.java
@@ -56,6 +56,7 @@
 import dagger.internal.Preconditions;
 import dagger.internal.codegen.InjectionMethods.InjectionSiteMethod;
 import dagger.internal.codegen.InjectionMethods.ProvisionMethod;
+import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.internal.codegen.javapoet.CodeBlocks;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
diff --git a/java/dagger/internal/codegen/ForwardingCompilerOptions.java b/java/dagger/internal/codegen/ForwardingCompilerOptions.java
deleted file mode 100644
index 5442f4d2f..000000000
--- a/java/dagger/internal/codegen/ForwardingCompilerOptions.java
+++ /dev/null
@@ -1,107 +0,0 @@
-/*
- * Copyright (C) 2019 The Dagger Authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package dagger.internal.codegen;
-
-import static com.google.common.base.Preconditions.checkNotNull;
-
-import javax.lang.model.element.TypeElement;
-import javax.tools.Diagnostic;
-
-/** A {@link CompilerOptions} object that delegates to another one. */
-class ForwardingCompilerOptions extends CompilerOptions {
-
-  private final CompilerOptions delegate;
-
-  ForwardingCompilerOptions(CompilerOptions delegate) {
-    this.delegate = checkNotNull(delegate);
-  }
-
-  @Override
-  boolean usesProducers() {
-    return delegate.usesProducers();
-  }
-
-  @Override
-  boolean fastInit() {
-    return delegate.fastInit();
-  }
-
-  @Override
-  boolean formatGeneratedSource() {
-    return delegate.formatGeneratedSource();
-  }
-
-  @Override
-  boolean writeProducerNameInToken() {
-    return delegate.writeProducerNameInToken();
-  }
-
-  @Override
-  Diagnostic.Kind nullableValidationKind() {
-    return delegate.nullableValidationKind();
-  }
-
-  @Override
-  Diagnostic.Kind privateMemberValidationKind() {
-    return delegate.privateMemberValidationKind();
-  }
-
-  @Override
-  Diagnostic.Kind staticMemberValidationKind() {
-    return delegate.staticMemberValidationKind();
-  }
-
-  @Override
-  boolean ignorePrivateAndStaticInjectionForComponent() {
-    return delegate.ignorePrivateAndStaticInjectionForComponent();
-  }
-
-  @Override
-  ValidationType scopeCycleValidationType() {
-    return delegate.scopeCycleValidationType();
-  }
-
-  @Override
-  boolean warnIfInjectionFactoryNotGeneratedUpstream() {
-    return delegate.warnIfInjectionFactoryNotGeneratedUpstream();
-  }
-
-  @Override
-  boolean headerCompilation() {
-    return delegate.headerCompilation();
-  }
-
-  @Override
-  boolean useGradleIncrementalProcessing() {
-    return delegate.useGradleIncrementalProcessing();
-  }
-
-  @Override
-  ValidationType fullBindingGraphValidationType(TypeElement element) {
-    return delegate.fullBindingGraphValidationType(element);
-  }
-
-  @Override
-  Diagnostic.Kind moduleHasDifferentScopesDiagnosticKind() {
-    return delegate.moduleHasDifferentScopesDiagnosticKind();
-  }
-
-  @Override
-  ValidationType explicitBindingConflictsWithInjectValidationType() {
-    return delegate.explicitBindingConflictsWithInjectValidationType();
-  }
-}
diff --git a/java/dagger/internal/codegen/IncompatiblyScopedBindingsValidator.java b/java/dagger/internal/codegen/IncompatiblyScopedBindingsValidator.java
index d649e46ab..ccff75eca 100644
--- a/java/dagger/internal/codegen/IncompatiblyScopedBindingsValidator.java
+++ b/java/dagger/internal/codegen/IncompatiblyScopedBindingsValidator.java
@@ -26,6 +26,7 @@
 import com.google.auto.common.MoreElements;
 import com.google.common.collect.ImmutableSetMultimap;
 import com.google.common.collect.Multimaps;
+import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.model.Binding;
 import dagger.model.BindingGraph;
 import dagger.model.BindingGraph.ComponentNode;
diff --git a/java/dagger/internal/codegen/InjectBindingRegistryImpl.java b/java/dagger/internal/codegen/InjectBindingRegistryImpl.java
index 45dc391e4..77636c1fd 100644
--- a/java/dagger/internal/codegen/InjectBindingRegistryImpl.java
+++ b/java/dagger/internal/codegen/InjectBindingRegistryImpl.java
@@ -35,6 +35,7 @@
 import dagger.Component;
 import dagger.MembersInjector;
 import dagger.Provides;
+import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import dagger.model.Key;
diff --git a/java/dagger/internal/codegen/InjectValidator.java b/java/dagger/internal/codegen/InjectValidator.java
index d3c4ce8d9..d15cb52e6 100644
--- a/java/dagger/internal/codegen/InjectValidator.java
+++ b/java/dagger/internal/codegen/InjectValidator.java
@@ -29,6 +29,7 @@
 import com.google.auto.common.MoreElements;
 import com.google.auto.common.MoreTypes;
 import com.google.common.collect.ImmutableSet;
+import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.internal.codegen.langmodel.Accessibility;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
diff --git a/java/dagger/internal/codegen/InjectionMethods.java b/java/dagger/internal/codegen/InjectionMethods.java
index 8525bcf4e..494381d70 100644
--- a/java/dagger/internal/codegen/InjectionMethods.java
+++ b/java/dagger/internal/codegen/InjectionMethods.java
@@ -43,6 +43,7 @@
 import com.squareup.javapoet.ParameterSpec;
 import com.squareup.javapoet.TypeName;
 import dagger.internal.codegen.MembersInjectionBinding.InjectionSite;
+import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.internal.codegen.javapoet.Expression;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
diff --git a/java/dagger/internal/codegen/JavacPluginModule.java b/java/dagger/internal/codegen/JavacPluginModule.java
index 91d7991cc..0877321da 100644
--- a/java/dagger/internal/codegen/JavacPluginModule.java
+++ b/java/dagger/internal/codegen/JavacPluginModule.java
@@ -16,15 +16,14 @@
 
 package dagger.internal.codegen;
 
-import static dagger.internal.codegen.ValidationType.NONE;
-import static javax.tools.Diagnostic.Kind.NOTE;
-
 import com.sun.tools.javac.model.JavacElements;
 import com.sun.tools.javac.model.JavacTypes;
 import com.sun.tools.javac.util.Context;
 import dagger.Binds;
 import dagger.Module;
 import dagger.Provides;
+import dagger.internal.codegen.compileroption.CompilerOptions;
+import dagger.internal.codegen.compileroption.JavacPluginCompilerOptions;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import javax.annotation.processing.Messager;
@@ -32,7 +31,6 @@
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.AnnotationValue;
 import javax.lang.model.element.Element;
-import javax.lang.model.element.TypeElement;
 import javax.lang.model.util.Types;
 import javax.tools.Diagnostic;
 
@@ -40,87 +38,10 @@
  * A module that provides a {@link BindingGraphFactory} and {@link ComponentDescriptorFactory} for
  * use in {@code javac} plugins. Requires a binding for the {@code javac} {@link Context}.
  */
-@Module(includes = InjectBindingRegistryModule.class)
+@Module
 abstract class JavacPluginModule {
-  @Provides
-  static CompilerOptions compilerOptions() {
-    return new CompilerOptions() {
-      @Override
-      boolean usesProducers() {
-        return true;
-      }
-
-      @Override
-      boolean fastInit() {
-        return false;
-      }
-
-      @Override
-      boolean formatGeneratedSource() {
-        return false;
-      }
-
-      @Override
-      boolean writeProducerNameInToken() {
-        return true;
-      }
-
-      @Override
-      Diagnostic.Kind nullableValidationKind() {
-        return NOTE;
-      }
-
-      @Override
-      Diagnostic.Kind privateMemberValidationKind() {
-        return NOTE;
-      }
-
-      @Override
-      Diagnostic.Kind staticMemberValidationKind() {
-        return NOTE;
-      }
-
-      @Override
-      boolean ignorePrivateAndStaticInjectionForComponent() {
-        return false;
-      }
-
-      @Override
-      ValidationType scopeCycleValidationType() {
-        return NONE;
-      }
-
-      @Override
-      boolean warnIfInjectionFactoryNotGeneratedUpstream() {
-        return false;
-      }
-
-      @Override
-      boolean headerCompilation() {
-        return false;
-      }
-
-      @Override
-      boolean useGradleIncrementalProcessing() {
-        return false;
-      }
-
-      @Override
-      ValidationType fullBindingGraphValidationType(TypeElement element) {
-        return NONE;
-      }
-
-      @Override
-      Diagnostic.Kind moduleHasDifferentScopesDiagnosticKind() {
-        return NOTE;
-      }
-
-      @Override
-      ValidationType explicitBindingConflictsWithInjectValidationType() {
-        return NONE;
-      }
-    };
-  }
+  @Binds
+  abstract CompilerOptions compilerOptions(JavacPluginCompilerOptions compilerOptions);
 
   @Binds
   abstract Messager messager(NullMessager nullMessager);
diff --git a/java/dagger/internal/codegen/ModuleValidator.java b/java/dagger/internal/codegen/ModuleValidator.java
index a98561bfd..73682c1b6 100644
--- a/java/dagger/internal/codegen/ModuleValidator.java
+++ b/java/dagger/internal/codegen/ModuleValidator.java
@@ -31,7 +31,7 @@
 import static dagger.internal.codegen.MoreAnnotationMirrors.simpleName;
 import static dagger.internal.codegen.MoreAnnotationValues.asType;
 import static dagger.internal.codegen.Util.reentrantComputeIfAbsent;
-import static dagger.internal.codegen.ValidationType.NONE;
+import static dagger.internal.codegen.compileroption.ValidationType.NONE;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableSet;
 import static dagger.internal.codegen.langmodel.DaggerElements.getAnnotationMirror;
 import static dagger.internal.codegen.langmodel.DaggerElements.isAnyAnnotationPresent;
@@ -54,6 +54,7 @@
 import com.google.errorprone.annotations.FormatMethod;
 import dagger.Module;
 import dagger.Subcomponent;
+import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import dagger.model.BindingGraph;
diff --git a/java/dagger/internal/codegen/NullableBindingValidator.java b/java/dagger/internal/codegen/NullableBindingValidator.java
index 65fe3f2de..4b68b3adb 100644
--- a/java/dagger/internal/codegen/NullableBindingValidator.java
+++ b/java/dagger/internal/codegen/NullableBindingValidator.java
@@ -23,6 +23,7 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
+import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.model.BindingGraph;
 import dagger.model.BindingGraph.DependencyEdge;
 import dagger.spi.BindingGraphPlugin;
diff --git a/java/dagger/internal/codegen/ProcessingEnvironmentModule.java b/java/dagger/internal/codegen/ProcessingEnvironmentModule.java
index 1c40eddbe..7bac0b1c5 100644
--- a/java/dagger/internal/codegen/ProcessingEnvironmentModule.java
+++ b/java/dagger/internal/codegen/ProcessingEnvironmentModule.java
@@ -22,6 +22,9 @@
 import dagger.Module;
 import dagger.Provides;
 import dagger.Reusable;
+import dagger.internal.codegen.compileroption.CompilerOptions;
+import dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions;
+import dagger.internal.codegen.compileroption.ProcessingOptions;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.statistics.DaggerStatisticsRecorder;
 import java.util.Map;
diff --git a/java/dagger/internal/codegen/ProducerFactoryGenerator.java b/java/dagger/internal/codegen/ProducerFactoryGenerator.java
index d857ec9cb..4f1f63166 100644
--- a/java/dagger/internal/codegen/ProducerFactoryGenerator.java
+++ b/java/dagger/internal/codegen/ProducerFactoryGenerator.java
@@ -58,6 +58,7 @@
 import com.squareup.javapoet.ParameterizedTypeName;
 import com.squareup.javapoet.TypeName;
 import com.squareup.javapoet.TypeSpec;
+import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.internal.codegen.javapoet.AnnotationSpecs;
 import dagger.internal.codegen.javapoet.AnnotationSpecs.Suppression;
 import dagger.internal.codegen.javapoet.TypeNames;
diff --git a/java/dagger/internal/codegen/ProvisionBinding.java b/java/dagger/internal/codegen/ProvisionBinding.java
index 694b209d6..22a18ddf5 100644
--- a/java/dagger/internal/codegen/ProvisionBinding.java
+++ b/java/dagger/internal/codegen/ProvisionBinding.java
@@ -26,6 +26,7 @@
 import com.google.common.collect.ImmutableSortedSet;
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import dagger.internal.codegen.MembersInjectionBinding.InjectionSite;
+import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.model.BindingKind;
 import dagger.model.DependencyRequest;
 import dagger.model.Key;
diff --git a/java/dagger/internal/codegen/SimpleMethodBindingExpression.java b/java/dagger/internal/codegen/SimpleMethodBindingExpression.java
index 1eddca53f..9fea33653 100644
--- a/java/dagger/internal/codegen/SimpleMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/SimpleMethodBindingExpression.java
@@ -31,6 +31,7 @@
 import com.squareup.javapoet.MethodSpec;
 import com.squareup.javapoet.TypeName;
 import dagger.internal.codegen.InjectionMethods.ProvisionMethod;
+import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.internal.codegen.javapoet.Expression;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
diff --git a/java/dagger/internal/codegen/SourceFileGeneratorsModule.java b/java/dagger/internal/codegen/SourceFileGeneratorsModule.java
index c32262adc..739748778 100644
--- a/java/dagger/internal/codegen/SourceFileGeneratorsModule.java
+++ b/java/dagger/internal/codegen/SourceFileGeneratorsModule.java
@@ -22,6 +22,7 @@
 import dagger.internal.codegen.SourceFileGeneratorsModule.MembersInjectionModule;
 import dagger.internal.codegen.SourceFileGeneratorsModule.ProductionModule;
 import dagger.internal.codegen.SourceFileGeneratorsModule.ProvisionModule;
+import dagger.internal.codegen.compileroption.CompilerOptions;
 import javax.lang.model.element.TypeElement;
 
 @Module(
diff --git a/java/dagger/internal/codegen/compileroption/BUILD b/java/dagger/internal/codegen/compileroption/BUILD
new file mode 100644
index 000000000..b9eab50cb
--- /dev/null
+++ b/java/dagger/internal/codegen/compileroption/BUILD
@@ -0,0 +1,42 @@
+# Copyright (C) 2019 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Description:
+#   Sources related to compiler options.
+
+package(default_visibility = ["//:src"])
+
+java_library(
+    name = "compileroption",
+    srcs = [
+        "CompilerOptions.java",
+        "FeatureStatus.java",
+        "JavacPluginCompilerOptions.java",
+        "ProcessingEnvironmentCompilerOptions.java",
+        "ProcessingOptions.java",
+        "ValidationType.java",
+    ],
+    plugins = ["//java/dagger/internal/codegen/bootstrap"],
+    tags = ["maven:merged"],
+    deps = [
+        "//java/dagger:core",
+        "//java/dagger/internal/codegen/extension",
+        "//java/dagger/producers",
+        "@bazel_tools//tools/jdk:langtools-neverlink",
+        "@google_bazel_common//third_party/java/auto:common",
+        "@google_bazel_common//third_party/java/google_java_format",
+        "@google_bazel_common//third_party/java/guava",
+        "@google_bazel_common//third_party/java/jsr330_inject",
+    ],
+)
diff --git a/java/dagger/internal/codegen/CompilerOptions.java b/java/dagger/internal/codegen/compileroption/CompilerOptions.java
similarity index 62%
rename from java/dagger/internal/codegen/CompilerOptions.java
rename to java/dagger/internal/codegen/compileroption/CompilerOptions.java
index 32e1c07b7..d3565be21 100644
--- a/java/dagger/internal/codegen/CompilerOptions.java
+++ b/java/dagger/internal/codegen/compileroption/CompilerOptions.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.compileroption;
 
 import javax.lang.model.element.TypeElement;
 import javax.tools.Diagnostic;
 
 /** A collection of options that dictate how the compiler will run. */
-abstract class CompilerOptions {
-  abstract boolean usesProducers();
+public abstract class CompilerOptions {
+  public abstract boolean usesProducers();
 
   /**
    * Returns true if the fast initialization flag, {@code fastInit}, is enabled.
@@ -31,21 +31,21 @@
    * number of eagerly initialized fields at the cost of potential memory leaks and higher
    * per-provision instantiation time.
    */
-  abstract boolean fastInit();
+  public abstract boolean fastInit();
 
-  abstract boolean formatGeneratedSource();
+  public abstract boolean formatGeneratedSource();
 
-  abstract boolean writeProducerNameInToken();
+  public abstract boolean writeProducerNameInToken();
 
-  abstract Diagnostic.Kind nullableValidationKind();
+  public abstract Diagnostic.Kind nullableValidationKind();
 
-  final boolean doCheckForNulls() {
+  public final boolean doCheckForNulls() {
     return nullableValidationKind().equals(Diagnostic.Kind.ERROR);
   }
 
-  abstract Diagnostic.Kind privateMemberValidationKind();
+  public abstract Diagnostic.Kind privateMemberValidationKind();
 
-  abstract Diagnostic.Kind staticMemberValidationKind();
+  public abstract Diagnostic.Kind staticMemberValidationKind();
 
   /**
    * If {@code true}, Dagger will generate factories and components even if some members-injected
@@ -54,24 +54,24 @@ final boolean doCheckForNulls() {
    * <p>This should only ever be enabled by the TCK tests. Disabling this validation could lead to
    * generating code that does not compile.
    */
-  abstract boolean ignorePrivateAndStaticInjectionForComponent();
+  public abstract boolean ignorePrivateAndStaticInjectionForComponent();
 
-  abstract ValidationType scopeCycleValidationType();
+  public abstract ValidationType scopeCycleValidationType();
 
-  abstract boolean warnIfInjectionFactoryNotGeneratedUpstream();
+  public abstract boolean warnIfInjectionFactoryNotGeneratedUpstream();
 
-  abstract boolean headerCompilation();
+  public abstract boolean headerCompilation();
 
-  abstract boolean useGradleIncrementalProcessing();
+  public abstract boolean useGradleIncrementalProcessing();
 
   /**
    * Returns the validation that should be done for the full binding graph for the element.
    *
    * @throws IllegalArgumentException if {@code element} is not a module or (sub)component
    */
-  abstract ValidationType fullBindingGraphValidationType(TypeElement element);
+  public abstract ValidationType fullBindingGraphValidationType(TypeElement element);
 
-  abstract Diagnostic.Kind moduleHasDifferentScopesDiagnosticKind();
+  public abstract Diagnostic.Kind moduleHasDifferentScopesDiagnosticKind();
 
-  abstract ValidationType explicitBindingConflictsWithInjectValidationType();
+  public abstract ValidationType explicitBindingConflictsWithInjectValidationType();
 }
diff --git a/java/dagger/internal/codegen/FeatureStatus.java b/java/dagger/internal/codegen/compileroption/FeatureStatus.java
similarity index 90%
rename from java/dagger/internal/codegen/FeatureStatus.java
rename to java/dagger/internal/codegen/compileroption/FeatureStatus.java
index 9ff254e2c..d989679b8 100644
--- a/java/dagger/internal/codegen/FeatureStatus.java
+++ b/java/dagger/internal/codegen/compileroption/FeatureStatus.java
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.compileroption;
 
 /** Allows options to control how features in component processing are enabled. */
-enum FeatureStatus {
+public enum FeatureStatus {
   ENABLED,
   DISABLED;
 }
diff --git a/java/dagger/internal/codegen/compileroption/JavacPluginCompilerOptions.java b/java/dagger/internal/codegen/compileroption/JavacPluginCompilerOptions.java
new file mode 100644
index 000000000..475e992fd
--- /dev/null
+++ b/java/dagger/internal/codegen/compileroption/JavacPluginCompilerOptions.java
@@ -0,0 +1,106 @@
+/*
+ * Copyright (C) 2019 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.internal.codegen.compileroption;
+
+import static dagger.internal.codegen.compileroption.ValidationType.NONE;
+import static javax.tools.Diagnostic.Kind.NOTE;
+
+import javax.inject.Inject;
+import javax.lang.model.element.TypeElement;
+import javax.tools.Diagnostic;
+
+/** {@link CompilerOptions} for Javac plugins (e.g. for Dagger statistics or Kythe). */
+public final class JavacPluginCompilerOptions extends CompilerOptions {
+
+  @Inject
+  JavacPluginCompilerOptions() {}
+
+  @Override
+  public boolean usesProducers() {
+    return true;
+  }
+
+  @Override
+  public boolean fastInit() {
+    return false;
+  }
+
+  @Override
+  public boolean formatGeneratedSource() {
+    return false;
+  }
+
+  @Override
+  public boolean writeProducerNameInToken() {
+    return true;
+  }
+
+  @Override
+  public Diagnostic.Kind nullableValidationKind() {
+    return NOTE;
+  }
+
+  @Override
+  public Diagnostic.Kind privateMemberValidationKind() {
+    return NOTE;
+  }
+
+  @Override
+  public Diagnostic.Kind staticMemberValidationKind() {
+    return NOTE;
+  }
+
+  @Override
+  public boolean ignorePrivateAndStaticInjectionForComponent() {
+    return false;
+  }
+
+  @Override
+  public ValidationType scopeCycleValidationType() {
+    return NONE;
+  }
+
+  @Override
+  public boolean warnIfInjectionFactoryNotGeneratedUpstream() {
+    return false;
+  }
+
+  @Override
+  public boolean headerCompilation() {
+    return false;
+  }
+
+  @Override
+  public boolean useGradleIncrementalProcessing() {
+    return false;
+  }
+
+  @Override
+  public ValidationType fullBindingGraphValidationType(TypeElement element) {
+    return NONE;
+  }
+
+  @Override
+  public Diagnostic.Kind moduleHasDifferentScopesDiagnosticKind() {
+    return NOTE;
+  }
+
+  @Override
+  public ValidationType explicitBindingConflictsWithInjectValidationType() {
+    return NONE;
+  }
+}
diff --git a/java/dagger/internal/codegen/ProcessingEnvironmentCompilerOptions.java b/java/dagger/internal/codegen/compileroption/ProcessingEnvironmentCompilerOptions.java
similarity index 77%
rename from java/dagger/internal/codegen/ProcessingEnvironmentCompilerOptions.java
rename to java/dagger/internal/codegen/compileroption/ProcessingEnvironmentCompilerOptions.java
index a719621ad..46c450a22 100644
--- a/java/dagger/internal/codegen/ProcessingEnvironmentCompilerOptions.java
+++ b/java/dagger/internal/codegen/compileroption/ProcessingEnvironmentCompilerOptions.java
@@ -14,34 +14,34 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.compileroption;
 
 import static com.google.common.base.CaseFormat.LOWER_CAMEL;
 import static com.google.common.base.CaseFormat.UPPER_UNDERSCORE;
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.collect.Sets.immutableEnumSet;
-import static dagger.internal.codegen.FeatureStatus.DISABLED;
-import static dagger.internal.codegen.FeatureStatus.ENABLED;
-import static dagger.internal.codegen.ProcessingEnvironmentCompilerOptions.Feature.EXPERIMENTAL_AHEAD_OF_TIME_SUBCOMPONENTS;
-import static dagger.internal.codegen.ProcessingEnvironmentCompilerOptions.Feature.EXPERIMENTAL_ANDROID_MODE;
-import static dagger.internal.codegen.ProcessingEnvironmentCompilerOptions.Feature.FAST_INIT;
-import static dagger.internal.codegen.ProcessingEnvironmentCompilerOptions.Feature.FLOATING_BINDS_METHODS;
-import static dagger.internal.codegen.ProcessingEnvironmentCompilerOptions.Feature.FORMAT_GENERATED_SOURCE;
-import static dagger.internal.codegen.ProcessingEnvironmentCompilerOptions.Feature.IGNORE_PRIVATE_AND_STATIC_INJECTION_FOR_COMPONENT;
-import static dagger.internal.codegen.ProcessingEnvironmentCompilerOptions.Feature.WARN_IF_INJECTION_FACTORY_NOT_GENERATED_UPSTREAM;
-import static dagger.internal.codegen.ProcessingEnvironmentCompilerOptions.Feature.WRITE_PRODUCER_NAME_IN_TOKEN;
-import static dagger.internal.codegen.ProcessingEnvironmentCompilerOptions.KeyOnlyOption.HEADER_COMPILATION;
-import static dagger.internal.codegen.ProcessingEnvironmentCompilerOptions.KeyOnlyOption.USE_GRADLE_INCREMENTAL_PROCESSING;
-import static dagger.internal.codegen.ProcessingEnvironmentCompilerOptions.Validation.DISABLE_INTER_COMPONENT_SCOPE_VALIDATION;
-import static dagger.internal.codegen.ProcessingEnvironmentCompilerOptions.Validation.EXPLICIT_BINDING_CONFLICTS_WITH_INJECT;
-import static dagger.internal.codegen.ProcessingEnvironmentCompilerOptions.Validation.FULL_BINDING_GRAPH_VALIDATION;
-import static dagger.internal.codegen.ProcessingEnvironmentCompilerOptions.Validation.MODULE_HAS_DIFFERENT_SCOPES_VALIDATION;
-import static dagger.internal.codegen.ProcessingEnvironmentCompilerOptions.Validation.NULLABLE_VALIDATION;
-import static dagger.internal.codegen.ProcessingEnvironmentCompilerOptions.Validation.PRIVATE_MEMBER_VALIDATION;
-import static dagger.internal.codegen.ProcessingEnvironmentCompilerOptions.Validation.STATIC_MEMBER_VALIDATION;
-import static dagger.internal.codegen.ValidationType.ERROR;
-import static dagger.internal.codegen.ValidationType.NONE;
-import static dagger.internal.codegen.ValidationType.WARNING;
+import static dagger.internal.codegen.compileroption.FeatureStatus.DISABLED;
+import static dagger.internal.codegen.compileroption.FeatureStatus.ENABLED;
+import static dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions.Feature.EXPERIMENTAL_AHEAD_OF_TIME_SUBCOMPONENTS;
+import static dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions.Feature.EXPERIMENTAL_ANDROID_MODE;
+import static dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions.Feature.FAST_INIT;
+import static dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions.Feature.FLOATING_BINDS_METHODS;
+import static dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions.Feature.FORMAT_GENERATED_SOURCE;
+import static dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions.Feature.IGNORE_PRIVATE_AND_STATIC_INJECTION_FOR_COMPONENT;
+import static dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions.Feature.WARN_IF_INJECTION_FACTORY_NOT_GENERATED_UPSTREAM;
+import static dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions.Feature.WRITE_PRODUCER_NAME_IN_TOKEN;
+import static dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions.KeyOnlyOption.HEADER_COMPILATION;
+import static dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions.KeyOnlyOption.USE_GRADLE_INCREMENTAL_PROCESSING;
+import static dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions.Validation.DISABLE_INTER_COMPONENT_SCOPE_VALIDATION;
+import static dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions.Validation.EXPLICIT_BINDING_CONFLICTS_WITH_INJECT;
+import static dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions.Validation.FULL_BINDING_GRAPH_VALIDATION;
+import static dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions.Validation.MODULE_HAS_DIFFERENT_SCOPES_VALIDATION;
+import static dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions.Validation.NULLABLE_VALIDATION;
+import static dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions.Validation.PRIVATE_MEMBER_VALIDATION;
+import static dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions.Validation.STATIC_MEMBER_VALIDATION;
+import static dagger.internal.codegen.compileroption.ValidationType.ERROR;
+import static dagger.internal.codegen.compileroption.ValidationType.NONE;
+import static dagger.internal.codegen.compileroption.ValidationType.WARNING;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableSet;
 import static java.util.stream.Collectors.joining;
 import static java.util.stream.Stream.concat;
@@ -62,9 +62,10 @@
 import javax.lang.model.element.TypeElement;
 import javax.tools.Diagnostic;
 
-final class ProcessingEnvironmentCompilerOptions extends CompilerOptions {
+/** {@link CompilerOptions} for the given {@link ProcessingEnvironment}. */
+public final class ProcessingEnvironmentCompilerOptions extends CompilerOptions {
   /** Returns a valid {@link CompilerOptions} parsed from the processing environment. */
-  static CompilerOptions create(ProcessingEnvironment processingEnvironment) {
+  public static CompilerOptions create(ProcessingEnvironment processingEnvironment) {
     return new ProcessingEnvironmentCompilerOptions(processingEnvironment).checkValid();
   }
 
@@ -78,68 +79,68 @@ private ProcessingEnvironmentCompilerOptions(ProcessingEnvironment processingEnv
   }
 
   @Override
-  boolean usesProducers() {
+  public boolean usesProducers() {
     return processingEnvironment.getElementUtils().getTypeElement(Produces.class.getCanonicalName())
         != null;
   }
 
   @Override
-  boolean headerCompilation() {
+  public boolean headerCompilation() {
     return isEnabled(HEADER_COMPILATION);
   }
 
   @Override
-  boolean fastInit() {
+  public boolean fastInit() {
     return isEnabled(FAST_INIT);
   }
 
   @Override
-  boolean formatGeneratedSource() {
+  public boolean formatGeneratedSource() {
     return isEnabled(FORMAT_GENERATED_SOURCE);
   }
 
   @Override
-  boolean writeProducerNameInToken() {
+  public boolean writeProducerNameInToken() {
     return isEnabled(WRITE_PRODUCER_NAME_IN_TOKEN);
   }
 
   @Override
-  Diagnostic.Kind nullableValidationKind() {
+  public Diagnostic.Kind nullableValidationKind() {
     return diagnosticKind(NULLABLE_VALIDATION);
   }
 
   @Override
-  Diagnostic.Kind privateMemberValidationKind() {
+  public Diagnostic.Kind privateMemberValidationKind() {
     return diagnosticKind(PRIVATE_MEMBER_VALIDATION);
   }
 
   @Override
-  Diagnostic.Kind staticMemberValidationKind() {
+  public Diagnostic.Kind staticMemberValidationKind() {
     return diagnosticKind(STATIC_MEMBER_VALIDATION);
   }
 
   @Override
-  boolean ignorePrivateAndStaticInjectionForComponent() {
+  public boolean ignorePrivateAndStaticInjectionForComponent() {
     return isEnabled(IGNORE_PRIVATE_AND_STATIC_INJECTION_FOR_COMPONENT);
   }
 
   @Override
-  ValidationType scopeCycleValidationType() {
+  public ValidationType scopeCycleValidationType() {
     return parseOption(DISABLE_INTER_COMPONENT_SCOPE_VALIDATION);
   }
 
   @Override
-  boolean warnIfInjectionFactoryNotGeneratedUpstream() {
+  public boolean warnIfInjectionFactoryNotGeneratedUpstream() {
     return isEnabled(WARN_IF_INJECTION_FACTORY_NOT_GENERATED_UPSTREAM);
   }
 
   @Override
-  boolean useGradleIncrementalProcessing() {
+  public boolean useGradleIncrementalProcessing() {
     return isEnabled(USE_GRADLE_INCREMENTAL_PROCESSING);
   }
 
   @Override
-  ValidationType fullBindingGraphValidationType(TypeElement element) {
+  public ValidationType fullBindingGraphValidationType(TypeElement element) {
     return fullBindingGraphValidationType();
   }
 
@@ -148,12 +149,12 @@ private ValidationType fullBindingGraphValidationType() {
   }
 
   @Override
-  Diagnostic.Kind moduleHasDifferentScopesDiagnosticKind() {
+  public Diagnostic.Kind moduleHasDifferentScopesDiagnosticKind() {
     return diagnosticKind(MODULE_HAS_DIFFERENT_SCOPES_VALIDATION);
   }
 
   @Override
-  ValidationType explicitBindingConflictsWithInjectValidationType() {
+  public ValidationType explicitBindingConflictsWithInjectValidationType() {
     return parseOption(EXPLICIT_BINDING_CONFLICTS_WITH_INJECT);
   }
 
@@ -356,7 +357,7 @@ private static String optionName(Enum<? extends EnumOption<?>> option) {
   }
 
   /** The supported command-line options. */
-  static ImmutableSet<String> supportedOptions() {
+  public static ImmutableSet<String> supportedOptions() {
     // need explicit type parameter to avoid a runtime stream error
     return Stream.<CommandLineOption[]>of(
             KeyOnlyOption.values(), Feature.values(), Validation.values())
diff --git a/java/dagger/internal/codegen/ProcessingOptions.java b/java/dagger/internal/codegen/compileroption/ProcessingOptions.java
similarity index 91%
rename from java/dagger/internal/codegen/ProcessingOptions.java
rename to java/dagger/internal/codegen/compileroption/ProcessingOptions.java
index 105452a6f..39c47288b 100644
--- a/java/dagger/internal/codegen/ProcessingOptions.java
+++ b/java/dagger/internal/codegen/compileroption/ProcessingOptions.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.compileroption;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
@@ -27,4 +27,4 @@
  */
 @Retention(RUNTIME)
 @Qualifier
-@interface ProcessingOptions {}
+public @interface ProcessingOptions {}
diff --git a/java/dagger/internal/codegen/ValidationType.java b/java/dagger/internal/codegen/compileroption/ValidationType.java
similarity index 84%
rename from java/dagger/internal/codegen/ValidationType.java
rename to java/dagger/internal/codegen/compileroption/ValidationType.java
index 5d19dc17a..d7be4ca65 100644
--- a/java/dagger/internal/codegen/ValidationType.java
+++ b/java/dagger/internal/codegen/compileroption/ValidationType.java
@@ -14,21 +14,21 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.compileroption;
 
 import java.util.Optional;
 import javax.tools.Diagnostic;
 
 /**
- * Allows options to control how component process validates things such as scope cycles
- * or nullability.
+ * Allows options to control how component process validates things such as scope cycles or
+ * nullability.
  */
-enum ValidationType {
+public enum ValidationType {
   ERROR,
   WARNING,
   NONE;
 
-  Optional<Diagnostic.Kind> diagnosticKind() {
+  public Optional<Diagnostic.Kind> diagnosticKind() {
     switch (this) {
       case ERROR:
         return Optional.of(Diagnostic.Kind.ERROR);
diff --git a/java/dagger/internal/codegen/extension/Optionals.java b/java/dagger/internal/codegen/extension/Optionals.java
index eec75f335..57494a2f3 100644
--- a/java/dagger/internal/codegen/extension/Optionals.java
+++ b/java/dagger/internal/codegen/extension/Optionals.java
@@ -43,8 +43,7 @@
   @SafeVarargs
   public static <T> Optional<T> firstPresent(
       Optional<T> first, Optional<T> second, Optional<T>... rest) {
-    return asList(first, second, rest)
-        .stream()
+    return asList(first, second, rest).stream()
         .filter(Optional::isPresent)
         .findFirst()
         .orElse(Optional.empty());
diff --git a/javatests/dagger/internal/codegen/BUILD b/javatests/dagger/internal/codegen/BUILD
index da1ef9cff..90cc2db08 100644
--- a/javatests/dagger/internal/codegen/BUILD
+++ b/javatests/dagger/internal/codegen/BUILD
@@ -33,6 +33,7 @@ GenJavaTests(
         "//java/dagger/internal/codegen:processor",
         "//java/dagger/internal/codegen:validation",
         "//java/dagger/internal/codegen:writing",
+        "//java/dagger/internal/codegen/compileroption",
         "//java/dagger/internal/codegen/javapoet",
         "//java/dagger/internal/codegen/langmodel",
         "//java/dagger/model",
