diff --git a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
index ca8ee0287..f39142f2f 100644
--- a/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
+++ b/compiler/src/main/java/dagger/internal/codegen/BindingGraph.java
@@ -484,12 +484,11 @@ ResolvedBindings lookUpBindings(BindingKey bindingKey) {
             ImmutableSet<OptionalBindingDeclaration> optionalBindingDeclarations =
                 optionalBindingDeclarationsBuilder.build();
 
-            ImmutableSet.Builder<Optional<ContributionBinding>> maybeContributionBindings =
-                ImmutableSet.builder();
+            ImmutableSet.Builder<Optional<ContributionBinding>> maybeContributionBindings = ImmutableSet.builder();
             maybeContributionBindings.add(syntheticMapOfValuesBinding(requestKey));
             maybeContributionBindings.add(
-                syntheticMultibinding(
-                    requestKey, multibindingContributions, multibindingDeclarations));
+                syntheticMultibinding(requestKey, multibindingContributions, multibindingDeclarations)
+            );
             syntheticSubcomponentBuilderBinding(subcomponentDeclarations)
                 .ifPresent(
                     binding -> {
diff --git a/compiler/src/main/java/dagger/internal/codegen/Key.java b/compiler/src/main/java/dagger/internal/codegen/Key.java
index f2f3f1399..1ce870a54 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Key.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Key.java
@@ -16,7 +16,6 @@
 
 package dagger.internal.codegen;
 
-import static com.google.auto.common.MoreElements.asPackage;
 import static com.google.auto.common.MoreElements.isAnnotationPresent;
 import static com.google.auto.common.MoreTypes.asExecutable;
 import static com.google.auto.common.MoreTypes.isType;
@@ -30,7 +29,7 @@
 import static dagger.internal.codegen.MoreAnnotationMirrors.unwrapOptionalEquivalence;
 import static dagger.internal.codegen.MoreAnnotationMirrors.wrapOptionalInEquivalence;
 import static dagger.internal.codegen.Optionals.firstPresent;
-import static dagger.internal.codegen.Util.toImmutableSet;
+import static dagger.internal.codegen.Util.*;
 import static javax.lang.model.element.ElementKind.METHOD;
 
 import com.google.auto.common.AnnotationMirrors;
@@ -199,64 +198,155 @@ public String toString() {
 
     public ClassName getDelegateTypeName() {
       final TypeMirror returnType = bindingMethod.getReturnType();
-      final Named annotation = bindingMethod.getAnnotation(Named.class);
-      final ClassName name = ClassName.bestGuess(Util.typeToString(returnType));
-      final String packageName = name.packageName();
-      if (annotation != null) {
-          return ClassName.bestGuess("swagger" + "." + capitalizeFirstLetter(annotation.value()) + "Delegate");
-      }else {
-        final java.util.Optional<? extends AnnotationMirror> annotationMirror = getAnnotationMirror(bindingMethod);
-        if(annotationMirror.isPresent()) {
-          String capitalizedAnnotationValue = getCapitalizedAnnotationValue(annotationMirror.get());
-          if (isInteger(capitalizedAnnotationValue)) {
-            final String annotationName = annotationMirror.get().getAnnotationType().asElement().getSimpleName().toString();
-            capitalizedAnnotationValue = annotationName + capitalizedAnnotationValue;
-          }
-          return ClassName.bestGuess("swagger" + "." + capitalizedAnnotationValue + "In" + contributingModule.getSimpleName().toString() + "Delegate");
-        }else {
-          return ClassName.bestGuess("swagger" + "." + capitalizeFirstLetter(bindingMethod.getSimpleName().toString()) + "For" + contributingModule.getSimpleName().toString() + "Delegate");
+
+      // find qualifier annotations
+      final Optional<? extends AnnotationMirror> qualifier = bindingMethod.getAnnotationMirrors().stream()
+              .filter(this::hasQualifierAnnotation)
+              .findFirst();
+
+      // find mapkey annotations
+      final Optional<? extends AnnotationMirror> mapKey = bindingMethod.getAnnotationMirrors().stream()
+              .filter(this::hasMapKeyAnnotation)
+              .findFirst();
+
+      Optional<String> mapValue = Optional.empty();
+      Optional<String> qualifierValue = Optional.empty();
+
+      String simpleMapKeyName = "";
+      String simpleMapValueName = "";
+      String simpleQualifierName = "";
+      String simpleQualifierValue = "";
+
+      if (mapKey.isPresent()) {
+        mapValue = mapKey.get().getElementValues().entrySet().stream()
+                .filter(e -> e.getKey().getSimpleName().toString().equals("value"))
+                .map(e -> e.getValue().getValue().toString().replace(".", "_"))
+                .findFirst();
+        simpleMapKeyName = MoreAnnotationMirrors.simpleName(qualifier.get()).toString();
+        if (mapValue.isPresent()) {
+          simpleMapValueName = mapValue.get();
         }
       }
-    }
 
-    private boolean isInteger(String str) {
-      try{
-        Integer.parseInt(str);
-        return true;
-      } catch (Exception e) {
-        return false;
+      if (qualifier.isPresent()) {
+        qualifierValue = qualifier.get().getElementValues().entrySet().stream()
+                .filter(e -> e.getKey().getSimpleName().toString().equals("value"))
+                .filter(e -> e.getKey().getReturnType().toString().equals(String.class.getName()))
+                .map(e -> e.getValue().getValue().toString())
+                .findFirst();
+        simpleQualifierName = MoreAnnotationMirrors.simpleName(qualifier.get()).toString();
+        if (qualifierValue.isPresent()) {
+          simpleQualifierValue = qualifierValue.get();
+        }
       }
+
+      StringBuilder sb = new StringBuilder();
+      sb.append(capitalize(simpleMapKeyName));
+      sb.append(capitalize(simpleMapValueName));
+      if (qualifier.isPresent()) {
+        sb.append(capitalize(simpleQualifierName));
+        if (!simpleQualifierValue.isEmpty()) {
+          sb.append(capitalize(simpleQualifierValue));
+        }else {
+          sb.append(capitalize(extractClassName(typeToString(returnType))));
+        }
+      }else {
+        sb.append(capitalize(extractClassName(typeToString(returnType))));
+      }
+
+      return ClassName.bestGuess(String.format("delegates.%sDelegate", sb.toString()));
+
     }
 
     public String getDelegateFieldName() {
       final TypeMirror returnType = bindingMethod.getReturnType();
-      final Named annotation = bindingMethod.getAnnotation(Named.class);
-      if (annotation != null) {
-        return Util.lowerCaseFirstLetter(annotation.value())  + "Delegate";
-      }else {
-        final java.util.Optional<? extends AnnotationMirror> annotationMirror = getAnnotationMirror(returnType);
-        if(annotationMirror.isPresent()) {
-          return Util.lowerCaseFirstLetter(getCapitalizedAnnotationValue(annotationMirror.get())) + "Delegate";
+
+      // find qualifier annotations
+      final Optional<? extends AnnotationMirror> qualifier = bindingMethod.getAnnotationMirrors().stream()
+              .filter(this::hasQualifierAnnotation)
+              .findFirst();
+
+      // find mapkey annotations
+      final Optional<? extends AnnotationMirror> mapKey = bindingMethod.getAnnotationMirrors().stream()
+              .filter(this::hasMapKeyAnnotation)
+              .findFirst();
+
+      Optional<String> mapValue = Optional.empty();
+      Optional<String> qualifierValue = Optional.empty();
+
+      String simpleMapKeyName = "";
+      String simpleMapValueName = "";
+      String simpleQualifierName = "";
+      String simpleQualifierValue = "";
+
+      if (mapKey.isPresent()) {
+        mapValue = mapKey.get().getElementValues().entrySet().stream()
+                .filter(e -> e.getKey().getSimpleName().contentEquals("value"))
+                .map(e -> e.getValue().getValue().toString().replace(".", "_"))
+                .findFirst();
+        simpleMapKeyName = MoreAnnotationMirrors.simpleName(qualifier.get()).toString();
+        if (mapValue.isPresent()) {
+          simpleMapValueName = mapValue.get();
+        }
+      }
+
+      if (qualifier.isPresent()) {
+        qualifierValue = qualifier.get().getElementValues().entrySet().stream()
+                .filter(e -> e.getKey().getSimpleName().contentEquals("value"))
+                .filter(e -> e.getKey().getReturnType().toString().equals(String.class.getName()))
+                .map(e -> e.getValue().getValue().toString())
+                .findFirst();
+        simpleQualifierName = MoreAnnotationMirrors.simpleName(qualifier.get()).toString();
+        if (qualifierValue.isPresent()) {
+          simpleQualifierValue = qualifierValue.get();
+        }
+      }
+
+      StringBuilder sb = new StringBuilder();
+      sb.append(lowerCaseFirstLetter(simpleMapKeyName));
+      sb.append(transformValue(simpleMapValueName, sb));
+      if (qualifier.isPresent()) {
+        sb.append(transformValue(simpleQualifierName, sb));
+        if (!simpleQualifierValue.isEmpty()) {
+          sb.append(transformValue(simpleQualifierValue, sb));
         }else {
-          return bindingMethod.getSimpleName().toString() + "For" + contributingModule.getSimpleName().toString() + "Delegate";
+          sb.append(transformValue(extractClassName(typeToString(returnType)), sb));
         }
+      }else {
+        sb.append(transformValue(extractClassName(typeToString(returnType)), sb));
       }
+
+      return sb.toString();
+    }
+
+    protected String transformValue(String simpleMapValueName, StringBuilder sb) {
+      return sb.length() == 0 ? lowerCaseFirstLetter(simpleMapValueName) : capitalize(simpleMapValueName);
+    }
+
+    private boolean hasMapKeyAnnotation(AnnotationMirror o) {
+      return o.getAnnotationType().getAnnotationMirrors().stream()
+              .anyMatch(annotation -> annotation.getAnnotationType().toString().equals(MapKey.class.getName()));
+    }
+
+    private boolean hasQualifierAnnotation(AnnotationMirror o) {
+      return o.getAnnotationType().getAnnotationMirrors().stream()
+              .anyMatch(annotation -> annotation.getAnnotationType().toString().equals(Qualifier.class.getName()));
     }
 
     private static String getCapitalizedAnnotationValue(AnnotationMirror annotation) {
       final Map<? extends ExecutableElement, ? extends AnnotationValue> elementValues = annotation.getElementValues();
       for (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : elementValues.entrySet()) {
-        if (entry.getKey().getSimpleName().toString().equals("value")) {
+        if (entry.getKey().getSimpleName().contentEquals("value")) {
           final String original = entry.getValue().getValue().toString();
           if (!original.isEmpty()) {
-            return capitalizeFirstLetter(original);
+            return capitalize(original);
           }
         }
       }
       throw new IllegalStateException("value not found");
     }
 
-    private static String capitalizeFirstLetter(String original) {
+    private static String capitalize(String original) {
       if (original == null || original.length() == 0) {
         return original;
       }
diff --git a/compiler/src/main/java/dagger/internal/codegen/Util.java b/compiler/src/main/java/dagger/internal/codegen/Util.java
index 16422a565..563d575a6 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Util.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Util.java
@@ -289,45 +289,94 @@ public static String convertDataClassToString(TypeMirror dataClass) {
     }
 
     static ClassName getDelegateTypeName(Key key) {
-        if (!key.multibindingContributionIdentifier().isPresent()) {
-            if (key.qualifier().isPresent()) {
-                final java.util.Optional<String> qualifier = key.qualifier().get().getElementValues().values().stream()
-                        .map((java.util.function.Function<AnnotationValue, String>) annotationValue -> annotationValue.getValue().toString())
-                        .findFirst();
-                if (qualifier.isPresent()) {
-                    final PackageElement packageElement = getPackage(MoreTypes.asElement(key.type()));
-                    final String classNameString = "delegates" + "." + capitalize(qualifier.get()) + "Delegate";
-                    return ClassName.bestGuess(classNameString);
-                }
+
+        if (key.multibindingContributionIdentifier().isPresent()) {
+            final Key.MultibindingContributionIdentifier identifier = key.multibindingContributionIdentifier().get();
+            return identifier.getDelegateTypeName();
+        }
+
+        final TypeMirror returnType = key.type();
+
+        // find qualifier annotations
+        final Optional<? extends AnnotationMirror> qualifier = key.qualifier();
+
+        String simpleQualifierName = "";
+        String simpleQualifierValue = "";
+
+        if (qualifier.isPresent()) {
+            Optional<String> qualifierValue = qualifier.get().getElementValues().entrySet().stream()
+                    .filter(e -> e.getKey().getSimpleName().contentEquals("value"))
+                    .filter(e -> e.getKey().getReturnType().toString().equals(String.class.getName()))
+                    .map(e -> e.getValue().getValue().toString())
+                    .findFirst();
+            simpleQualifierName = MoreAnnotationMirrors.simpleName(qualifier.get()).toString();
+            if (qualifierValue.isPresent()) {
+                simpleQualifierValue = qualifierValue.get();
             }
-            final TypeName typeName = ClassName.get(key.type());
-            if (typeName instanceof ClassName) {
-                final String s = ((ClassName) typeName).simpleName();
-                return ClassName.bestGuess("delegates" +  "." + s + "Delegate");
+        }
+
+        StringBuilder sb = new StringBuilder();
+        if (qualifier.isPresent()) {
+            sb.append(capitalize(simpleQualifierName));
+            if (!simpleQualifierValue.isEmpty()) {
+                sb.append(capitalize(simpleQualifierValue));
+            }else {
+                sb.append(capitalize(extractClassName(typeToString(returnType))));
             }
-            final ClassName name = ClassName.bestGuess(typeToString(key.type()));
-            return ClassName.bestGuess("delegates." + name.simpleName() + "Delegate");
+        }else {
+            sb.append(capitalize(extractClassName(typeToString(returnType))));
         }
-        return key.multibindingContributionIdentifier().get().getDelegateTypeName();
-    }
 
-    private static String extractPackageName(TypeMirror type) {
-        return getPackage(MoreTypes.asElement(type)).getSimpleName().toString();
+        final ClassName name = ClassName.bestGuess(String.format("delegates.%sDelegate", sb.toString()));
+        return name;
     }
 
     static String getDelegateFieldName(Key key) {
-        if (!key.multibindingContributionIdentifier().isPresent()) {
-            if (key.qualifier().isPresent()) {
-                final java.util.Optional<String> qualifier = key.qualifier().get().getElementValues().values().stream()
-                        .map((java.util.function.Function<AnnotationValue, String>) annotationValue -> annotationValue.getValue().toString())
-                        .findFirst();
-                if (qualifier.isPresent()) {
-                    return lowerCaseFirstLetter(qualifier.get()) + "Delegate";
-                }
+
+        if (key.multibindingContributionIdentifier().isPresent()) {
+            final Key.MultibindingContributionIdentifier identifier = key.multibindingContributionIdentifier().get();
+            return identifier.getDelegateFieldName();
+        }
+
+        final TypeMirror returnType = key.type();
+
+        // find qualifier annotations
+        final Optional<? extends AnnotationMirror> qualifier = key.qualifier();
+
+        Optional<String> qualifierValue = Optional.empty();
+
+        String simpleQualifierName = "";
+        String simpleQualifierValue = "";
+
+        if (qualifier.isPresent()) {
+            qualifierValue = qualifier.get().getElementValues().entrySet().stream()
+                    .filter(e -> e.getKey().getSimpleName().toString().equals("value"))
+                    .filter(e -> e.getKey().getReturnType().toString().equals(String.class.getName()))
+                    .map(e -> e.getValue().getValue().toString())
+                    .findFirst();
+            simpleQualifierName = MoreAnnotationMirrors.simpleName(qualifier.get()).toString();
+            if (qualifierValue.isPresent()) {
+                simpleQualifierValue = qualifierValue.get();
             }
-            return toParameterName(extractClassName(typeToString(key.type()))) + "Delegate";
         }
-        return key.multibindingContributionIdentifier().get().getDelegateFieldName();
+
+        StringBuilder sb = new StringBuilder();
+        if (qualifier.isPresent()) {
+            sb.append(lowerCaseFirstLetter(simpleQualifierName));
+            if (!simpleQualifierValue.isEmpty()) {
+                sb.append(transformValue(simpleQualifierValue, sb));
+            }else {
+                sb.append(transformValue(extractClassName(typeToString(returnType)), sb));
+            }
+        }else {
+            sb.append(lowerCaseFirstLetter(extractClassName(typeToString(returnType))));
+        }
+
+        return sb.toString();
+    }
+
+    private static String transformValue(String simpleMapValueName, StringBuilder sb) {
+        return sb.length() == 0 ? lowerCaseFirstLetter(simpleMapValueName) : capitalize(simpleMapValueName);
     }
 
     /**
