diff --git a/java/dagger/internal/codegen/DaggerKythePlugin.java b/java/dagger/internal/codegen/DaggerKythePlugin.java
index fd5cbccf4..349536e97 100644
--- a/java/dagger/internal/codegen/DaggerKythePlugin.java
+++ b/java/dagger/internal/codegen/DaggerKythePlugin.java
@@ -70,6 +70,7 @@ public Void visitClassDef(JCClassDecl tree, Void p) {
   private void addNodesForGraph(BindingGraph graph) {
     addDependencyEdges(graph);
     addModuleEdges(graph);
+    addChildComponentEdges(graph);
 
     graph.subgraphs().forEach(this::addNodesForGraph);
   }
@@ -163,6 +164,22 @@ private void addModuleEdges(BindingGraph graph) {
     }
   }
 
+  private void addChildComponentEdges(BindingGraph graph) {
+    Optional<VName> componentNode = jvmNode(graph.componentType());
+    if (!componentNode.isPresent()) {
+      logger.warning("Missing JVM node for component: " + graph.componentType());
+      return;
+    }
+    for (BindingGraph subgraph : graph.subgraphs()) {
+      Optional<VName> subcomponentNode = jvmNode(subgraph.componentType());
+      if (subcomponentNode.isPresent()) {
+        emitEdge(componentNode.get(), "/inject/childcomponent", subcomponentNode.get());
+      } else {
+        logger.warning("Missing JVM node for subcomponent: " + subgraph.componentType());
+      }
+    }
+  }
+
   private Optional<VName> jvmNode(Element element) {
     return kytheGraph.getJvmNode((Symbol) element).map(KytheNode::getVName);
   }
