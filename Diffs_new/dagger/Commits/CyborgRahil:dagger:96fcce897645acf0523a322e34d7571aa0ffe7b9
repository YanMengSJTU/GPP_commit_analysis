diff --git a/java/dagger/internal/codegen/DependencyMethodProviderCreationExpression.java b/java/dagger/internal/codegen/DependencyMethodProviderCreationExpression.java
index 485f389ab..ca050e693 100644
--- a/java/dagger/internal/codegen/DependencyMethodProviderCreationExpression.java
+++ b/java/dagger/internal/codegen/DependencyMethodProviderCreationExpression.java
@@ -33,7 +33,6 @@
 import com.squareup.javapoet.MethodSpec;
 import com.squareup.javapoet.TypeName;
 import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
-import java.util.Optional;
 import javax.lang.model.element.Element;
 
 /**
@@ -123,9 +122,4 @@ private ComponentRequirement dependency() {
   private Element provisionMethod() {
     return binding.bindingElement().get();
   }
-
-  @Override
-  public Optional<TypeName> specificType() {
-    return Optional.of(factoryClassName());
-  }
 }
diff --git a/java/dagger/internal/codegen/FrameworkFieldInitializer.java b/java/dagger/internal/codegen/FrameworkFieldInitializer.java
index da349b8a8..b69e3b2f2 100644
--- a/java/dagger/internal/codegen/FrameworkFieldInitializer.java
+++ b/java/dagger/internal/codegen/FrameworkFieldInitializer.java
@@ -43,14 +43,6 @@
     /** Returns the expression to use to assign to the component field for the binding. */
     CodeBlock creationExpression();
 
-    /**
-     * Returns the type of the creation expression when it is a specific factory type. This
-     * implementation returns {@link Optional#empty()}.
-     */
-    default Optional<TypeName> specificType() {
-      return Optional.empty();
-    }
-
     /**
      * Returns the framework class to use for the field, if different from the one implied by the
      * binding. This implementation returns {@link Optional#empty()}.
@@ -148,26 +140,14 @@ private FieldSpec getOrCreateField() {
         FrameworkField.forResolvedBindings(
             resolvedBindings, frameworkInstanceCreationExpression.alternativeFrameworkClass());
 
-    TypeName fieldType;
-    boolean rawTypeUsed = false;
-    if (!isReplacingSuperclassFrameworkInstance()
-        && !fieldInitializationState.equals(InitializationState.DELEGATED)
-        && specificType().isPresent()) {
-      // For some larger components, this causes javac to compile much faster by getting the
-      // field type to exactly match the type of the expression being assigned to it.
-      fieldType = specificType().get();
-    } else if (useRawType) {
-      fieldType = contributionBindingField.type().rawType;
-      rawTypeUsed = true;
-    } else {
-      fieldType = contributionBindingField.type();
-    }
+    TypeName fieldType =
+        useRawType ? contributionBindingField.type().rawType : contributionBindingField.type();
 
     FieldSpec.Builder contributionField =
         FieldSpec.builder(
             fieldType, componentImplementation.getUniqueFieldName(contributionBindingField.name()));
     contributionField.addModifiers(PRIVATE);
-    if (rawTypeUsed) {
+    if (useRawType) {
       contributionField.addAnnotation(AnnotationSpecs.suppressWarnings(RAWTYPES));
     }
 
@@ -215,12 +195,6 @@ private boolean isProvider() {
             .orElse(true);
   }
 
-  /** Returns the type of the instance when it is a specific factory type. */
-  @Override
-  public Optional<TypeName> specificType() {
-    return frameworkInstanceCreationExpression.specificType();
-  }
-
   /** Initialization state for a factory field. */
   private enum InitializationState {
     /** The field is {@code null}. */
diff --git a/java/dagger/internal/codegen/FrameworkInstanceBindingExpression.java b/java/dagger/internal/codegen/FrameworkInstanceBindingExpression.java
index d832ca432..870aef9b8 100644
--- a/java/dagger/internal/codegen/FrameworkInstanceBindingExpression.java
+++ b/java/dagger/internal/codegen/FrameworkInstanceBindingExpression.java
@@ -54,8 +54,7 @@ Expression getDependencyExpression(ClassName requestingClass) {
     MemberSelect memberSelect = frameworkInstanceSupplier.memberSelect();
     TypeMirror contributedType = resolvedBindings.contributionBinding().contributedType();
     TypeMirror expressionType =
-        frameworkInstanceSupplier.specificType().isPresent()
-                || isTypeAccessibleFrom(contributedType, requestingClass.packageName())
+        isTypeAccessibleFrom(contributedType, requestingClass.packageName())
                 || isInlinedFactoryCreation(memberSelect)
             ? types.wrapType(contributedType, frameworkType().frameworkClass())
             : rawFrameworkType();
diff --git a/java/dagger/internal/codegen/FrameworkInstanceSupplier.java b/java/dagger/internal/codegen/FrameworkInstanceSupplier.java
index d7392a6a7..4c45630a3 100644
--- a/java/dagger/internal/codegen/FrameworkInstanceSupplier.java
+++ b/java/dagger/internal/codegen/FrameworkInstanceSupplier.java
@@ -16,16 +16,8 @@
 
 package dagger.internal.codegen;
 
-import com.squareup.javapoet.TypeName;
-import java.util.Optional;
-
 /** An object that supplies a {@link MemberSelect} for a framework instance. */
 interface FrameworkInstanceSupplier {
   /** Returns a {@link MemberSelect}, with possible side effects on the first call. */
   MemberSelect memberSelect();
-
-  /** The framework instance is of this specific subtype. */
-  default Optional<TypeName> specificType() {
-    return Optional.empty();
-  }
 }
diff --git a/java/dagger/internal/codegen/InjectionOrProvisionProviderCreationExpression.java b/java/dagger/internal/codegen/InjectionOrProvisionProviderCreationExpression.java
index a2ba0e0c4..fdb225f63 100644
--- a/java/dagger/internal/codegen/InjectionOrProvisionProviderCreationExpression.java
+++ b/java/dagger/internal/codegen/InjectionOrProvisionProviderCreationExpression.java
@@ -21,9 +21,7 @@
 import static dagger.model.BindingKind.INJECTION;
 
 import com.squareup.javapoet.CodeBlock;
-import com.squareup.javapoet.TypeName;
 import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
-import java.util.Optional;
 import javax.inject.Provider;
 
 /**
@@ -61,9 +59,4 @@ public CodeBlock creationExpression() {
       return createFactory;
     }
   }
-
-  @Override
-  public Optional<TypeName> specificType() {
-    return Optional.of(generatedClassNameForBinding(binding));
-  }
 }
diff --git a/java/dagger/internal/codegen/ProducerCreationExpression.java b/java/dagger/internal/codegen/ProducerCreationExpression.java
index 05d74f8d0..1dd7a1c4b 100644
--- a/java/dagger/internal/codegen/ProducerCreationExpression.java
+++ b/java/dagger/internal/codegen/ProducerCreationExpression.java
@@ -20,9 +20,7 @@
 import static dagger.internal.codegen.SourceFiles.generatedClassNameForBinding;
 
 import com.squareup.javapoet.CodeBlock;
-import com.squareup.javapoet.TypeName;
 import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
-import java.util.Optional;
 
 /**
  * A {@link dagger.producers.Producer} creation expression for a {@link
@@ -47,9 +45,4 @@ public CodeBlock creationExpression() {
         generatedClassNameForBinding(binding),
         componentBindingExpressions.getCreateMethodArgumentsCodeBlock(binding));
   }
-
-  @Override
-  public Optional<TypeName> specificType() {
-    return Optional.of(generatedClassNameForBinding(binding));
-  }
 }
diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
index 148c06834..18bf1a6c4 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
@@ -4743,9 +4743,7 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf, CancellationListener {",
             "  private Producer<Set<Response>> responsesEntryPoint;",
-            "",
-            "  private ResponseProducerModule_ResponseFactory responseProducer;",
-            "",
+            "  private Producer<Response> responseProducer;",
             "  private Producer<Set<Response>> setOfResponseProducer;",
             "",
             "  protected DaggerLeaf() {}",
@@ -4897,15 +4895,10 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             GENERATED_ANNOTATION,
             "public final class DaggerRoot implements Root, CancellationListener {",
             "  private Provider<Executor> productionImplementationExecutorProvider;",
-            "",
             "  private Provider<Root> rootProvider;",
-            "",
             "  private Provider<ProductionComponentMonitor> monitorProvider;",
-            "",
-            "  private ResponseDependencyProducerModule_ResponseDependencyFactory",
-            "      responseDependencyProducer;",
-            "",
-            "  private RootMultibindingModule_ResponseFactory responseProducer;",
+            "  private Producer<ResponseDependency> responseDependencyProducer;",
+            "  private Producer<Response> responseProducer;",
             "",
             "  private DaggerRoot(Builder builder) {",
             "    initialize(builder);",
@@ -5054,8 +5047,7 @@ public void producesMethodInstalledInLeafAndAncestor() {
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf, CancellationListener {",
             "  private Producer<Object> producerEntryPoint;",
-            "",
-            "  private InstalledInLeafAndAncestorModule_ProducerFactory producerProducer;",
+            "  private Producer<Object> producerProducer;",
             "",
             "  protected DaggerLeaf() {}",
             "",
@@ -5125,7 +5117,7 @@ public void producesMethodInstalledInLeafAndAncestor() {
             "",
             GENERATED_ANNOTATION,
             "public abstract class DaggerAncestor implements Ancestor, CancellationListener {",
-            "  private InstalledInLeafAndAncestorModule_ProducerFactory producerProducer;",
+            "  private Producer<Object> producerProducer;",
             "",
             "  protected DaggerAncestor() {}",
             "",
@@ -5339,7 +5331,7 @@ public void missingBindingAccessInLeafAndAncestor() {
             "",
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
-            "  private LeafModule_TestFactory testProvider;",
+            "  private Provider<DependsOnMissing> testProvider;",
             "",
             "  protected DaggerLeaf() {}",
             "",
@@ -5429,10 +5421,8 @@ public void missingBindingAccessInLeafAndAncestor() {
             "  protected DaggerAncestor() {}",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
-            "    private LeafModule_UnresolvedSetBindingFactory unresolvedSetBindingProvider;",
-            "",
+            "    private Provider<Object> unresolvedSetBindingProvider;",
             "    private Provider<Set<Object>> setOfObjectProvider;",
-            "",
             "    private Provider<ProvidedInAncestor_InducesSetBinding> ",
             "        providedInAncestorProvider = ",
             "            new DelegateFactory<>();",
@@ -5462,7 +5452,6 @@ public void missingBindingAccessInLeafAndAncestor() {
             "      DelegateFactory.setDelegate(",
             "          providedInAncestorProvider,",
             "          AncestorModule_ProvidedInAncestorFactory.create(getSetOfObjectProvider()));",
-
             "    }",
             "",
             "    protected Set<Object> getSetOfObject() {",
@@ -5486,7 +5475,7 @@ public void missingBindingAccessInLeafAndAncestor() {
             "      return providedInAncestorProvider;",
             "    }",
             "  }",
-           "}");
+            "}");
     compilation = compile(filesToCompile.build());
     assertThat(compilation).succeededWithoutWarnings();
     assertThat(compilation)
@@ -6417,7 +6406,7 @@ public void modifiedProducerFromProvider() {
             "public abstract class DaggerLeaf implements Leaf, CancellationListener {",
             "  private Producer<DependsOnModifiedProducerFromProvider>",
             "      dependsOnModifiedProducerFromProviderEntryPoint;",
-            "  private LeafModule_DependsOnModifiedFactory dependsOnModifiedProducer;",
+            "  private Producer<DependsOnModifiedProducerFromProvider> dependsOnModifiedProducer;",
             "",
             "  protected DaggerLeaf() {}",
             "",
@@ -7234,7 +7223,7 @@ public void modifiableCycles() {
             GENERATED_ANNOTATION,
             "public abstract class DaggerLeaf implements Leaf {",
             "  private Provider<A> aProvider;",
-            "  private B_Factory bProvider;",
+            "  private Provider<B> bProvider;",
             "",
             "  protected DaggerLeaf() {}",
             "",
diff --git a/javatests/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
index 174807f48..b91d6b750 100644
--- a/javatests/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
@@ -1201,7 +1201,7 @@ public void testDefaultPackage() {
                 "public final class DaggerBComponent implements BComponent {")
             .addLinesIn(
                 DEFAULT_MODE,
-                "  private test_AComponent_a aProvider;")
+                "  private Provider<A> aProvider;")
             .addLinesIn(
                 FAST_INIT_MODE,
                 "  private volatile Provider<A> aProvider;",
diff --git a/javatests/dagger/internal/codegen/ElidedFactoriesTest.java b/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
index 9c9838bfd..07f29f56b 100644
--- a/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
+++ b/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
@@ -270,7 +270,8 @@ public void simpleComponent_injectsProviderOf_dependsOnScoped() {
                 GENERATED_ANNOTATION,
                 "public final class DaggerSimpleComponent implements SimpleComponent {",
                 "  private Provider<ScopedType> scopedTypeProvider;",
-                "  private DependsOnScoped_Factory dependsOnScopedProvider;",
+                "  private Provider<DependsOnScoped> dependsOnScopedProvider;",
+                "",
                 "  private DaggerSimpleComponent(Builder builder) {",
                 "    initialize(builder);",
                 "  }",
diff --git a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index 0c9e7979d..e32b46042 100644
--- a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -207,8 +207,8 @@ public void mapBindingsWithEnumKey() {
                 "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
-                "  private MapModuleOne_ProvideAdminHandlerFactory provideAdminHandlerProvider;",
-                "  private MapModuleTwo_ProvideLoginHandlerFactory provideLoginHandlerProvider;",
+                "  private Provider<Handler> provideAdminHandlerProvider;",
+                "  private Provider<Handler> provideLoginHandlerProvider;",
                 "  private Provider<Map<PathEnum, Provider<Handler>>>",
                 "      mapOfPathEnumAndProviderOfHandlerProvider;",
                 "",
@@ -613,8 +613,8 @@ public void mapBindingsWithStringKey() {
                 "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
-                "  private MapModuleOne_ProvideAdminHandlerFactory provideAdminHandlerProvider;",
-                "  private MapModuleTwo_ProvideLoginHandlerFactory provideLoginHandlerProvider;",
+                "  private Provider<Handler> provideAdminHandlerProvider;",
+                "  private Provider<Handler> provideLoginHandlerProvider;",
                 "  private Provider<Map<String, Provider<Handler>>>",
                 "      mapOfStringAndProviderOfHandlerProvider;",
                 "",
@@ -819,8 +819,8 @@ public void mapBindingsWithWrappedKey() {
                 "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
-                "  private MapModuleOne_ProvideAdminHandlerFactory provideAdminHandlerProvider;",
-                "  private MapModuleTwo_ProvideLoginHandlerFactory provideLoginHandlerProvider;",
+                "  private Provider<Handler> provideAdminHandlerProvider;",
+                "  private Provider<Handler> provideLoginHandlerProvider;",
                 "  private Provider<Map<WrappedClassKey, Provider<Handler>>>",
                 "      mapOfWrappedClassKeyAndProviderOfHandlerProvider;",
                 "",
@@ -996,8 +996,8 @@ public void mapBindingsWithNonProviderValue() {
                 "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
-                "  private MapModuleOne_ProvideAdminHandlerFactory provideAdminHandlerProvider;",
-                "  private MapModuleTwo_ProvideLoginHandlerFactory provideLoginHandlerProvider;",
+                "  private Provider<Handler> provideAdminHandlerProvider;",
+                "  private Provider<Handler> provideLoginHandlerProvider;",
                 "  private Provider<Map<PathEnum, Handler>> mapOfPathEnumAndHandlerProvider;",
                 "",
                 "  @SuppressWarnings(\"unchecked\")",
diff --git a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
index 3bb87e666..37983fe60 100644
--- a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -261,7 +261,7 @@ public void simpleComponent() {
                 "  private Producer<TestClass.A> aEntryPoint;",
                 "  private Provider<TestClass.SimpleComponent> simpleComponentProvider;",
                 "  private Producer<TestClass.B> bProducer;",
-                "  private TestClass_AModule_AFactory aProducer;",
+                "  private Producer<TestClass.A> aProducer;",
                 "",
                 "  private DaggerTestClass_SimpleComponent(Builder builder) {",
                 "    this.bModule = builder.bModule;",
@@ -443,14 +443,13 @@ public void simpleComponent() {
                 "public final class DaggerTestClass_SimpleComponent",
                 "    implements TestClass.SimpleComponent, CancellationListener {",
                 "  private Producer<TestClass.A> aEntryPoint;",
-                "  private TestClass_BModule_ExecutorFactory executorProvider;",
+                "  private Provider<Executor> executorProvider;",
                 "  private Provider<Executor> productionImplementationExecutorProvider;",
                 "  private Provider<TestClass.SimpleComponent> simpleComponentProvider;",
                 "  private Provider<ProductionComponentMonitor> monitorProvider;",
-                "  private TestClass_BModule_BFactory bProvider;",
+                "  private Provider<TestClass.B> bProvider;",
                 "  private Producer<TestClass.B> bProducer;",
-                "",
-                "  private TestClass_AModule_AFactory aProducer;",
+                "  private Producer<TestClass.A> aProducer;",
                 "",
                 "  private DaggerTestClass_SimpleComponent(Builder builder) {",
                 "    initialize(builder);",
