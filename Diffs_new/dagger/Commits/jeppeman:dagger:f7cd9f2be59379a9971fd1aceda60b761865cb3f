diff --git a/java/dagger/internal/codegen/MissingBindingValidation.java b/java/dagger/internal/codegen/MissingBindingValidation.java
index 5ce5f9bab..811c5624a 100644
--- a/java/dagger/internal/codegen/MissingBindingValidation.java
+++ b/java/dagger/internal/codegen/MissingBindingValidation.java
@@ -194,7 +194,7 @@ private boolean typeHasInjectionSites(Key key) {
               "There is no binding for %s because no component in %s's component hierarchy is "
                   + "annotated with %s. The available reference-releasing scopes are %s.",
               key,
-              graph.rootComponentNode().toString(),
+              graph.rootComponentNode().componentPath().currentComponent().getQualifiedName(),
               getReadableSource(scope),
               releasableReferencesScopes(graph).map(Scopes::getReadableSource).collect(toList())));
     }
diff --git a/javatests/dagger/internal/codegen/BindingGraphCapturer.java b/javatests/dagger/internal/codegen/BindingGraphCapturer.java
index b06b504b0..503fd47f4 100644
--- a/javatests/dagger/internal/codegen/BindingGraphCapturer.java
+++ b/javatests/dagger/internal/codegen/BindingGraphCapturer.java
@@ -32,7 +32,14 @@
 
   @Override
   public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticReporter) {
-    bindingGraphs.put(bindingGraph.rootComponentNode().toString(), bindingGraph);
+    bindingGraphs.put(
+        bindingGraph
+            .rootComponentNode()
+            .componentPath()
+            .currentComponent()
+            .getQualifiedName()
+            .toString(),
+        bindingGraph);
   }
 
   /** Returns a map of binding graphs, indexed by the canonical name of the root component type. */
