diff --git a/java/dagger/internal/codegen/BindingGraphConverter.java b/java/dagger/internal/codegen/BindingGraphConverter.java
index 4d3ad971b..ed2e0abe7 100644
--- a/java/dagger/internal/codegen/BindingGraphConverter.java
+++ b/java/dagger/internal/codegen/BindingGraphConverter.java
@@ -29,7 +29,6 @@
 import com.google.common.graph.MutableNetwork;
 import com.google.common.graph.Network;
 import com.google.common.graph.NetworkBuilder;
-import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
 import dagger.model.BindingGraph.BindingNode;
 import dagger.model.BindingGraph.ComponentNode;
 import dagger.model.BindingGraph.DependencyEdge;
@@ -105,10 +104,6 @@ protected void visitComponent(BindingGraph graph) {
 
       network.addNode(currentComponent);
 
-      for (ComponentMethodDescriptor method : graph.componentDescriptor().entryPointMethods()) {
-        addDependencyEdges(currentComponent, method.dependencyRequest().get());
-      }
-
       for (ResolvedBindings resolvedBindings : graph.resolvedBindings()) {
         for (BindingNode node : bindingNodes(resolvedBindings)) {
           addBindingNode(node);
@@ -129,6 +124,12 @@ protected void visitComponent(BindingGraph graph) {
       parentComponent = grandparentComponent;
     }
 
+    @Override
+    protected void visitEntryPoint(DependencyRequest entryPoint, BindingGraph graph) {
+      addDependencyEdges(currentComponent, entryPoint);
+      super.visitEntryPoint(entryPoint, graph);
+    }
+
     @Override
     protected void visitSubcomponentFactoryMethod(
         BindingGraph graph, BindingGraph parent, ExecutableElement factoryMethod) {
diff --git a/java/dagger/internal/codegen/BindingGraphFactory.java b/java/dagger/internal/codegen/BindingGraphFactory.java
index 318f334bc..5e61db699 100644
--- a/java/dagger/internal/codegen/BindingGraphFactory.java
+++ b/java/dagger/internal/codegen/BindingGraphFactory.java
@@ -47,10 +47,10 @@
 import dagger.Reusable;
 import dagger.internal.codegen.ComponentDescriptor.BuilderRequirementMethod;
 import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
-import dagger.internal.codegen.ComponentDescriptor.ComponentMethodKind;
 import dagger.model.ComponentPath;
 import dagger.model.DependencyRequest;
 import dagger.model.Key;
+import dagger.model.RequestKind;
 import dagger.model.Scope;
 import dagger.producers.Produced;
 import dagger.producers.Producer;
@@ -177,14 +177,11 @@ private BindingGraph create(
             indexBindingDeclarationsByKey(subcomponentDeclarations.build()),
             indexBindingDeclarationsByKey(delegatesBuilder.build()),
             indexBindingDeclarationsByKey(optionalsBuilder.build()));
-    for (ComponentMethodDescriptor componentMethod : componentDescriptor.componentMethods()) {
-      if (componentMethod.kind().equals(ComponentMethodKind.MEMBERS_INJECTION)) {
-        requestResolver.resolveMembersInjectionMethod(componentMethod);
+    for (DependencyRequest entryPoint : componentDescriptor.entryPoints()) {
+      if (entryPoint.kind().equals(RequestKind.MEMBERS_INJECTION)) {
+        requestResolver.resolveMembersInjection(entryPoint.key());
       } else {
-        Optional<DependencyRequest> componentMethodRequest = componentMethod.dependencyRequest();
-        if (componentMethodRequest.isPresent()) {
-          requestResolver.resolve(componentMethodRequest.get().key());
-        }
+        requestResolver.resolve(entryPoint.key());
       }
     }
 
@@ -835,9 +832,7 @@ private ComponentPath componentPath(Resolver destination) {
       }
     }
 
-    private void resolveMembersInjectionMethod(ComponentMethodDescriptor componentMethod) {
-      checkArgument(componentMethod.kind().equals(ComponentMethodKind.MEMBERS_INJECTION));
-      Key key = componentMethod.dependencyRequest().get().key();
+    private void resolveMembersInjection(Key key) {
       ResolvedBindings bindings = lookUpMembersInjectionBinding(key);
       resolveDependencies(bindings);
       resolvedMembersInjectionBindings.put(key, bindings);
diff --git a/java/dagger/internal/codegen/ComponentTreeTraverser.java b/java/dagger/internal/codegen/ComponentTreeTraverser.java
index 7f99bf1d6..8dbd1e72f 100644
--- a/java/dagger/internal/codegen/ComponentTreeTraverser.java
+++ b/java/dagger/internal/codegen/ComponentTreeTraverser.java
@@ -39,10 +39,10 @@
 import com.google.common.collect.Iterators;
 import com.google.common.collect.LinkedHashMultiset;
 import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
-import dagger.internal.codegen.ComponentDescriptor.ComponentMethodKind;
 import dagger.model.ComponentPath;
 import dagger.model.DependencyRequest;
 import dagger.model.Key;
+import dagger.model.RequestKind;
 import java.util.ArrayDeque;
 import java.util.Deque;
 import java.util.HashSet;
@@ -66,8 +66,8 @@
  * component in the tree, and {@link #visitSubcomponentFactoryMethod(BindingGraph, BindingGraph,
  * ExecutableElement)} to perform custom logic at each subcomponent factory method.
  *
- * <p>Subclasses can override {@link #bindingGraphTraverser(ComponentTreePath,
- * ComponentMethodDescriptor)} to traverse each entry point within each component in the tree.
+ * <p>Subclasses can override {@link #bindingGraphTraverser(ComponentTreePath, DependencyRequest)}
+ * to traverse each entry point within each component in the tree.
  */
 public class ComponentTreeTraverser {
 
@@ -106,8 +106,8 @@ public final void traverseComponents() {
    * <ol>
    *   <li>If this component is installed in its parent by a subcomponent factory method, calls
    *       {@link #visitSubcomponentFactoryMethod(BindingGraph, BindingGraph, ExecutableElement)}.
-   *   <li>For each entry point in the component, calls {@link
-   *       #visitEntryPoint(ComponentMethodDescriptor, BindingGraph)}.
+   *   <li>For each entry point in the component, calls {@link #visitEntryPoint(DependencyRequest,
+   *       BindingGraph)}.
    *   <li>For each child component, calls {@link #visitComponent(BindingGraph)}, updating the
    *       traversal state.
    * </ol>
@@ -128,9 +128,8 @@ protected void visitComponent(BindingGraph graph) {
       }
     }
 
-    for (ComponentMethodDescriptor entryPointMethod :
-        graph.componentDescriptor().entryPointMethods()) {
-      visitEntryPoint(entryPointMethod, graph);
+    for (DependencyRequest entryPoint : graph.componentDescriptor().entryPoints()) {
+      visitEntryPoint(entryPoint, graph);
     }
 
     for (BindingGraph child : graph.subgraphs()) {
@@ -164,13 +163,13 @@ protected void visitSubcomponentFactoryMethod(
    * standard order.
    *
    * <p>This implementation passes the entry point and the current component tree path to {@link
-   * #bindingGraphTraverser(ComponentTreePath, ComponentMethodDescriptor)}, and calls {@link
+   * #bindingGraphTraverser(ComponentTreePath, DependencyRequest)}, and calls {@link
    * BindingGraphTraverser#traverseDependencies()} on the returned object.
    *
    * @param graph the graph for the component that contains the entry point
    */
-  protected void visitEntryPoint(ComponentMethodDescriptor entryPointMethod, BindingGraph graph) {
-    bindingGraphTraverser(componentTreePath(), entryPointMethod).traverseDependencies();
+  protected void visitEntryPoint(DependencyRequest entryPoint, BindingGraph graph) {
+    bindingGraphTraverser(componentTreePath(), entryPoint).traverseDependencies();
   }
 
   /**
@@ -181,11 +180,10 @@ protected void visitEntryPoint(ComponentMethodDescriptor entryPointMethod, Bindi
    *
    * @param componentPath the path from the root component to the component that includes the entry
    *     point
-   * @param entryPointMethod the entry point method
    */
   protected BindingGraphTraverser bindingGraphTraverser(
-      ComponentTreePath componentPath, ComponentMethodDescriptor entryPointMethod) {
-    return new NoOpBindingGraphTraverser(componentPath, entryPointMethod);
+      ComponentTreePath componentPath, DependencyRequest entryPoint) {
+    return new NoOpBindingGraphTraverser(componentPath, entryPoint);
   }
 
   /**
@@ -205,7 +203,7 @@ protected final ComponentTreePath componentTreePath() {
   public static class BindingGraphTraverser {
 
     private final ComponentTreePath componentTreePath;
-    private final ComponentMethodDescriptor entryPointMethod;
+    private final DependencyRequest entryPoint;
     private final Deque<DependencyRequest> dependencyRequestPath = new ArrayDeque<>();
     private final Deque<ResolvedBindings> resolvedBindingsPath = new ArrayDeque<>();
     private final LinkedHashMultiset<Key> keysInPath = LinkedHashMultiset.create();
@@ -216,12 +214,11 @@ protected final ComponentTreePath componentTreePath() {
      *
      * @param componentPath the path from the root component to the component that includes the
      *     entry point to be traversed
-     * @param entryPointMethod the entry point method to be traversed
+     * @param entryPoint the entry point to be traversed
      */
-    public BindingGraphTraverser(
-        ComponentTreePath componentPath, ComponentMethodDescriptor entryPointMethod) {
+    public BindingGraphTraverser(ComponentTreePath componentPath, DependencyRequest entryPoint) {
       this.componentTreePath = componentPath;
-      this.entryPointMethod = entryPointMethod;
+      this.entryPoint = entryPoint;
     }
 
     /**
@@ -235,7 +232,7 @@ public void traverseDependencies() {
       checkState(resolvedBindingsPath.isEmpty());
       checkState(keysInPath.isEmpty());
       checkState(visitedDependencyRequests.isEmpty());
-      nextDependencyRequest(entryPointMethod.dependencyRequest().get(), currentGraph());
+      nextDependencyRequest(entryPoint, currentGraph());
     }
 
     /**
@@ -413,12 +410,12 @@ private void nextDependencyRequest(
     }
 
     /**
-     * Returns {@code true} if {@code dependencyRequest} is the {@link #entryPointMethod}'s request
-     * and the entry point is a members injection method.
+     * Returns {@code true} if {@code dependencyRequest} is the {@link #entryPoint} and it's a
+     * members injection method.
      */
     private boolean isComponentMembersInjectionRequest(DependencyRequest dependencyRequest) {
-      return entryPointMethod.kind().equals(ComponentMethodKind.MEMBERS_INJECTION)
-          && entryPointMethod.dependencyRequest().get().equals(dependencyRequest);
+      return dependencyRequest.kind().equals(RequestKind.MEMBERS_INJECTION)
+          && dependencyRequest.equals(entryPoint);
     }
 
     /**
@@ -499,7 +496,7 @@ protected final ResolvedBindings resolvedBindings() {
      * @throws IllegalStateException if this object is not currently traversing dependencies
      */
     protected final Element entryPointElement() {
-      return entryPointMethod.dependencyRequest().get().requestElement().get();
+      return entryPoint.requestElement().get();
     }
 
     /**
@@ -543,8 +540,8 @@ protected final DependencyTrace cycleDependencyTrace() {
   /** A traverser that does nothing. */
   private static final class NoOpBindingGraphTraverser extends BindingGraphTraverser {
     private NoOpBindingGraphTraverser(
-        ComponentTreePath componentPath, ComponentMethodDescriptor entryPointMethod) {
-      super(componentPath, entryPointMethod);
+        ComponentTreePath componentPath, DependencyRequest entryPoint) {
+      super(componentPath, entryPoint);
     }
 
     @Override
