diff --git a/java/dagger/internal/codegen/ComponentRequirementExpressions.java b/java/dagger/internal/codegen/ComponentRequirementExpressions.java
index c06f1323d..df2ef39c7 100644
--- a/java/dagger/internal/codegen/ComponentRequirementExpressions.java
+++ b/java/dagger/internal/codegen/ComponentRequirementExpressions.java
@@ -25,6 +25,7 @@
 import static dagger.internal.codegen.ComponentImplementation.FieldSpecKind.COMPONENT_REQUIREMENT_FIELD;
 import static dagger.internal.codegen.ModuleProxies.newModuleInstance;
 import static javax.lang.model.element.Modifier.ABSTRACT;
+import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.PROTECTED;
 
@@ -151,7 +152,7 @@ private ComponentRequirementExpression createField(ComponentRequirement requirem
     private final ComponentRequirement componentRequirement;
     protected final ComponentImplementation componentImplementation;
     protected final String fieldName;
-    private final Supplier<MemberSelect> field = memoize(this::createField);
+    private final Supplier<MemberSelect> field = memoize(this::addField);
 
     private AbstractField(
         ComponentRequirement componentRequirement,
@@ -175,15 +176,23 @@ public CodeBlock getExpression(ClassName requestingClass) {
       return field.get().getExpressionFor(requestingClass);
     }
 
-    private MemberSelect createField() {
-      FieldSpec field =
-          FieldSpec.builder(TypeName.get(componentRequirement.type()), fieldName, PRIVATE).build();
+    private MemberSelect addField() {
+      FieldSpec field = createField();
       componentImplementation.addField(COMPONENT_REQUIREMENT_FIELD, field);
       componentImplementation.addComponentRequirementInitialization(
           componentRequirement, fieldInitialization(field));
       return MemberSelect.localField(componentImplementation.name(), fieldName);
     }
 
+    private FieldSpec createField() {
+      FieldSpec.Builder field =
+          FieldSpec.builder(TypeName.get(componentRequirement.type()), fieldName, PRIVATE);
+      if (!componentImplementation.isAbstract()) {
+        field.addModifiers(FINAL);
+      }
+      return field.build();
+    }
+
     /** Returns the {@link CodeBlock} that initializes the component field during construction. */
     abstract CodeBlock fieldInitialization(FieldSpec componentField);
   }
diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
index 7285efc33..0581ddeac 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
@@ -485,7 +485,7 @@ public void moduleInstanceDependency() {
             "    }",
             "",
             "    protected final class LeafImpl extends DaggerAncestor.LeafImpl {",
-            "      private TestModule testModule;",
+            "      private final TestModule testModule;",
             "",
             "      private LeafImpl() {",
             "        this.testModule = new TestModule();",
@@ -644,7 +644,7 @@ public void moduleInstanceDependency_withModuleParams() {
             "    }",
             "",
             "    protected final class LeafImpl extends DaggerAncestor.LeafImpl {",
-            "      private TestModule testModule;",
+            "      private final TestModule testModule;",
             "",
             "      private LeafImpl(TestModule module) {",
             "        this.testModule = module;",
@@ -3240,7 +3240,7 @@ public void subcomponentBuilders() {
             "    }",
             "",
             "    protected final class LeafImpl extends DaggerAncestor.LeafImpl {",
-            "      private LeafModule leafModule;",
+            "      private final LeafModule leafModule;",
             "",
             "      private LeafImpl(",
             "          LeafModule leafModuleParam,",
@@ -3406,7 +3406,7 @@ public void subcomponentBuilders_moduleWithUnusedInstanceBindings() {
             "  }",
             "",
             "  protected final class LeafImpl extends DaggerLeaf {",
-            "    private ModuleWithUsedBinding moduleWithUsedBinding;",
+            "    private final ModuleWithUsedBinding moduleWithUsedBinding;",
             "",
             "    private LeafImpl(ModuleWithUsedBinding moduleWithUsedBindingParam) {",
             "      this.moduleWithUsedBinding = moduleWithUsedBindingParam;",
@@ -3524,7 +3524,7 @@ public void subcomponentBuilders_repeatedModule() {
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerRoot implements Root {",
-            "  private RepeatedModule repeatedModule;",
+            "  private final RepeatedModule repeatedModule;",
             "",
             "  private DaggerRoot(RepeatedModule repeatedModuleParam) {",
             "    this.repeatedModule = repeatedModuleParam;",
diff --git a/javatests/dagger/internal/codegen/ComponentBuilderTest.java b/javatests/dagger/internal/codegen/ComponentBuilderTest.java
index c4d97cd7e..90f4e737f 100644
--- a/javatests/dagger/internal/codegen/ComponentBuilderTest.java
+++ b/javatests/dagger/internal/codegen/ComponentBuilderTest.java
@@ -222,8 +222,8 @@ public void testIgnoresModulesNotInApi() {
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
-            "  private TestModule1 testModule1;",
-            "  private TestModule2 testModule2;",
+            "  private final TestModule1 testModule1;",
+            "  private final TestModule2 testModule2;",
             "",
             "  private DaggerTestComponent(",
             "      TestModule1 testModule1Param,",
@@ -408,7 +408,7 @@ public void testBuilderBindsInstanceNoCreateGenerated() {
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerSimpleComponent implements SimpleComponent {",
-            "  private Object object;",
+            "  private final Object object;",
             "",
             "  private DaggerSimpleComponent(Object objectParam) {",
             "    this.object = objectParam;",
diff --git a/javatests/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
index 6da22a0ac..68e6037a9 100644
--- a/javatests/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
@@ -508,7 +508,7 @@ public ComponentProcessorTest(CompilerMode compilerMode) {
                 "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
-                "  private TestModule testModule;",
+                "  private final TestModule testModule;",
                 "",
                 "  private DaggerTestComponent(TestModule testModuleParam) {",
                 "    this.testModule = testModuleParam;",
@@ -1206,7 +1206,7 @@ public void testDefaultPackage() {
             .addLinesIn(
                 FAST_INIT_MODE,
                 "  private volatile Provider<A> aProvider;",
-                "  private AComponent aComponent;",
+                "  private final AComponent aComponent;",
                 "",
                 "  private DaggerBComponent(AComponent aComponentParam) {",
                 "    this.aComponent = aComponentParam;",
@@ -1345,8 +1345,8 @@ public void testDefaultPackage() {
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
-            "  private TestModule testModule;",
-            "  private other.test.TestModule testModule2;",
+            "  private final TestModule testModule;",
+            "  private final other.test.TestModule testModule2;",
             "",
             "  private DaggerTestComponent(",
             "      TestModule testModuleParam,",
@@ -1471,7 +1471,7 @@ public void testDefaultPackage() {
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerBComponent implements BComponent {",
-            "  private AComponent aComponent;",
+            "  private final AComponent aComponent;",
             "",
             "  private DaggerBComponent(AComponent aComponentParam) {",
             "    this.aComponent = aComponentParam;",
diff --git a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
index b61434d20..d9543c178 100644
--- a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
+++ b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
@@ -78,8 +78,8 @@ public void bindsInstance() {
                 "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
-                "  private Integer i;",
-                "  private List<String> list;",
+                "  private final Integer i;",
+                "  private final List<String> list;",
                 "",
                 "  private DaggerTestComponent(Integer iParam, List<String> listParam) {",
                 "    this.i = iParam;",
@@ -176,8 +176,8 @@ public void instanceModuleMethod() {
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
-            "  private ParentModule parentModule;",
-            "  private OtherPackageModule otherPackageModule;",
+            "  private final ParentModule parentModule;",
+            "  private final OtherPackageModule otherPackageModule;",
             "",
             "  @Override",
             "  public int i() {",
@@ -249,7 +249,7 @@ public void componentInstances() {
                 "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
-                "  private Dep dep;",
+                "  private final Dep dep;",
                 "",
                 "  private DaggerTestComponent(Dep depParam) {",
                 "    this.dep = depParam;",
@@ -363,7 +363,7 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
-                "  private ParentModule parentModule;",
+                "  private final ParentModule parentModule;",
                 "",
                 "  private DaggerTestComponent(ParentModule parentModuleParam) {",
                 "    this.parentModule = parentModuleParam;",
@@ -391,7 +391,7 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "",
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
-                "  private ParentModule parentModule;",
+                "  private final ParentModule parentModule;",
                 "",
                 "  private DaggerTestComponent(ParentModule parentModuleParam) {",
                 "    this.parentModule = parentModuleParam;",
diff --git a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index 84aa60ddf..d087ccfee 100644
--- a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -134,8 +134,8 @@ public void mapBindingsWithEnumKey() {
                 "  private volatile Provider<Handler> provideLoginHandlerProvider;",
                 "  private volatile Provider<Map<PathEnum, Provider<Handler>>>",
                 "      mapOfPathEnumAndProviderOfHandlerProvider;",
-                "  private MapModuleOne mapModuleOne;",
-                "  private MapModuleTwo mapModuleTwo;",
+                "  private final MapModuleOne mapModuleOne;",
+                "  private final MapModuleTwo mapModuleTwo;",
                 "",
                 "  private Provider<Handler> getProvideAdminHandlerProvider() {",
                 "    Object local = provideAdminHandlerProvider;",
@@ -542,8 +542,8 @@ public void mapBindingsWithStringKey() {
                 "  private volatile Provider<Handler> provideLoginHandlerProvider;",
                 "  private volatile Provider<Map<String, Provider<Handler>>>",
                 "      mapOfStringAndProviderOfHandlerProvider;",
-                "  private MapModuleOne mapModuleOne;",
-                "  private MapModuleTwo mapModuleTwo;",
+                "  private final MapModuleOne mapModuleOne;",
+                "  private final MapModuleTwo mapModuleTwo;",
                 "",
                 "  private Provider<Handler> getProvideAdminHandlerProvider() {",
                 "    Object local = provideAdminHandlerProvider;",
@@ -743,8 +743,8 @@ public void mapBindingsWithWrappedKey() {
                 "  private volatile Provider<Handler> provideLoginHandlerProvider;",
                 "  private volatile Provider<Map<WrappedClassKey, Provider<Handler>>>",
                 "      mapOfWrappedClassKeyAndProviderOfHandlerProvider;",
-                "  private MapModuleOne mapModuleOne;",
-                "  private MapModuleTwo mapModuleTwo;",
+                "  private final MapModuleOne mapModuleOne;",
+                "  private final MapModuleTwo mapModuleTwo;",
                 "",
                 "  private DaggerTestComponent(",
                 "      MapModuleOne mapModuleOneParam,",
@@ -955,8 +955,8 @@ public void mapBindingsWithNonProviderValue() {
                 "public final class DaggerTestComponent implements TestComponent {",
                 "  private volatile Provider<Map<PathEnum, Handler>>",
                 "      mapOfPathEnumAndHandlerProvider;",
-                "  private MapModuleOne mapModuleOne;",
-                "  private MapModuleTwo mapModuleTwo;",
+                "  private final MapModuleOne mapModuleOne;",
+                "  private final MapModuleTwo mapModuleTwo;",
                 "",
                 "  private Map<PathEnum, Handler> getMapOfPathEnumAndHandler() {",
                 "    return ImmutableMap.<PathEnum, Handler>of(",
@@ -1082,7 +1082,7 @@ public void injectMapWithoutMapBinding() {
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
-            "  private MapModule mapModule;",
+            "  private final MapModule mapModule;",
             "",
             "  @Override",
             "  public Map<String, String> dispatcher() {",
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
index a5d854893..c76bbc18c 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
@@ -339,7 +339,7 @@ public void subcomponentOmitsInheritedBindings() {
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerParent implements Parent {",
-            "  private ParentModule parentModule;",
+            "  private final ParentModule parentModule;",
             "",
             "  private final class ChildImpl implements Child {",
             "    @Override",
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
index 79e7e8af9..b80ef0b87 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
@@ -467,7 +467,7 @@ public void subcomponentOmitsInheritedBindings() {
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerParent implements Parent {",
-            "  private ParentModule parentModule;",
+            "  private final ParentModule parentModule;",
             "",
             "  private final class ChildImpl implements Child {",
             "    @Override",
diff --git a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
index 42e34aa7a..568de6b38 100644
--- a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -257,7 +257,7 @@ public void simpleComponent() {
                 "  private volatile Object productionComponentMonitor = new MemoizedSentinel();",
                 "  private volatile Provider<ProductionComponentMonitor> monitorProvider;",
                 "  private volatile Provider<TestClass.B> bProvider;",
-                "  private TestClass.BModule bModule;",
+                "  private final TestClass.BModule bModule;",
                 "  private Producer<TestClass.A> aEntryPoint;",
                 "  private Provider<TestClass.SimpleComponent> simpleComponentProvider;",
                 "  private Producer<TestClass.B> bProducer;",
diff --git a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
index 9b0bcfa88..eb3d77261 100644
--- a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
+++ b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
@@ -537,7 +537,7 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
             .addLines(
                 "",
                 "  private final class ChildComponentImpl implements ChildComponent {",
-                "    private ChildModule childModule;",
+                "    private final ChildModule childModule;",
                 "",
                 "    private ChildComponentImpl() {",
                 "      this.childModule = new ChildModule();",
