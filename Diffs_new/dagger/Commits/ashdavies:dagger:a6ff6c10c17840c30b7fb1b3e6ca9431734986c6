diff --git a/java/dagger/internal/codegen/AbstractComponentWriter.java b/java/dagger/internal/codegen/AbstractComponentWriter.java
index 8ba636373..da72571e7 100644
--- a/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -27,7 +27,6 @@
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
 import static com.squareup.javapoet.TypeSpec.anonymousClassBuilder;
 import static com.squareup.javapoet.TypeSpec.classBuilder;
-import static dagger.internal.codegen.Accessibility.isRawTypeAccessible;
 import static dagger.internal.codegen.Accessibility.isTypeAccessibleFrom;
 import static dagger.internal.codegen.AnnotationSpecs.Suppression.UNCHECKED;
 import static dagger.internal.codegen.BindingKey.contribution;
@@ -55,7 +54,6 @@
 import static dagger.internal.codegen.TypeNames.SINGLE_CHECK;
 import static dagger.internal.codegen.TypeNames.TYPED_RELEASABLE_REFERENCE_MANAGER_DECORATOR;
 import static dagger.internal.codegen.TypeNames.providerOf;
-import static dagger.internal.codegen.TypeNames.rawTypeName;
 import static dagger.internal.codegen.Util.toImmutableList;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PRIVATE;
@@ -512,7 +510,7 @@ private void implementInterfaceMethods() {
                   "return $N($N)", getMembersInjectionMethod(binding.key()), parameter);
             }
           } else {
-            interfaceMethod.addStatement("return $L", getRequestFulfillment(interfaceRequest));
+            interfaceMethod.addStatement("return $L", getDependencyExpression(interfaceRequest));
           }
           interfaceMethods.add(interfaceMethod.build());
         }
@@ -599,7 +597,7 @@ private void writeInitializeAndInterfaceMethods() {
   @Override
   public CodeBlock getFieldInitialization(FrameworkInstanceBindingExpression bindingExpression) {
     if (bindingExpression.isProducerFromProvider()) {
-      return getRequestFulfillment(
+      return getDependencyExpression(
           FrameworkDependency.create(bindingExpression.bindingKey(), PRODUCTION));
     }
 
@@ -622,7 +620,7 @@ private CodeBlock contributionBindingInitialization(BindingExpression bindingExp
             CodeBlock.of(
                 "($T) $L",
                 binding.bindingType().frameworkClass(),
-                getRequestFulfillment(getOnlyElement(binding.frameworkDependencies())));
+                getDependencyExpression(getOnlyElement(binding.frameworkDependencies())));
         return decorateForScope(delegatingCodeBlock, binding.scope());
       case SINGLETON_INSTANCE:
         checkState(binding.scope().isPresent());
@@ -679,7 +677,9 @@ private MethodSpec membersInjectionMethod(Key key) {
             instance,
             membersInjectedType,
             types,
-            request -> getRequestFulfillmentWithPossibleRawtypeCast(request, name)));
+            request ->
+                getBindingExpression(request.bindingKey())
+                    .getDependencyArgumentExpression(request, name)));
     method.addStatement("return $L", instance);
 
     return method.build();
@@ -885,7 +885,7 @@ private CodeBlock factoryForContributionBindingInitialization(ContributionBindin
         return CodeBlock.of(
             "$T.create($L)",
             mapFactoryClassName(binding),
-            getRequestFulfillment(frameworkDependency));
+            getDependencyExpression(frameworkDependency));
 
       case SYNTHETIC_MULTIBOUND_SET:
         return factoryForSetMultibindingInitialization(binding);
@@ -951,8 +951,8 @@ private CodeBlock membersInjectorForBindingInitialization(MembersInjectionBindin
   private CodeBlock getDependencyArgument(FrameworkDependency frameworkDependency) {
     return isProducerFromProvider(frameworkDependency)
         ? getProducerFromProviderBindingExpression(frameworkDependency)
-            .getSnippetForFrameworkDependency(frameworkDependency, name)
-        : getRequestFulfillment(frameworkDependency);
+            .getDependencyExpression(frameworkDependency, name)
+        : getDependencyExpression(frameworkDependency);
   }
 
   private CodeBlock factoryForSetMultibindingInitialization(ContributionBinding binding) {
@@ -1173,30 +1173,13 @@ private CodeBlock factoryForSyntheticOptionalBindingInitialization(ContributionB
     }
   }
 
-  private CodeBlock getRequestFulfillment(FrameworkDependency frameworkDependency) {
+  private CodeBlock getDependencyExpression(FrameworkDependency frameworkDependency) {
     return getBindingExpression(frameworkDependency.bindingKey())
-        .getSnippetForFrameworkDependency(frameworkDependency, name);
+        .getDependencyExpression(frameworkDependency, name);
   }
 
-  private CodeBlock getRequestFulfillment(DependencyRequest dependencyRequest) {
+  private CodeBlock getDependencyExpression(DependencyRequest dependencyRequest) {
     return getBindingExpression(dependencyRequest.bindingKey())
-        .getSnippetForDependencyRequest(dependencyRequest, name);
-  }
-
-  // TODO(b/64024402) Consider if this can be merged with getRequestFulfillment(DR) above
-  @Override
-  public CodeBlock getRequestFulfillmentWithPossibleRawtypeCast(
-      DependencyRequest dependencyRequest, ClassName requestingClass) {
-    // This is not simply getRequestFulfillment(dependencyRequest), as that method always uses
-    // `name` as `requestingClass`, while this one does not.
-    CodeBlock snippet =
-        getBindingExpression(dependencyRequest.bindingKey())
-            .getSnippetForDependencyRequest(dependencyRequest, requestingClass);
-
-    TypeMirror requestElementType = dependencyRequest.requestElement().get().asType();
-    return isTypeAccessibleFrom(requestElementType, requestingClass.packageName())
-        || !isRawTypeAccessible(requestElementType, requestingClass.packageName())
-        ? snippet
-        : CodeBlock.of("($T) $L", rawTypeName(TypeName.get(requestElementType)), snippet);
+        .getDependencyExpression(dependencyRequest, name);
   }
 }
diff --git a/java/dagger/internal/codegen/BindingExpression.java b/java/dagger/internal/codegen/BindingExpression.java
index 0aa1cc973..720da39e7 100644
--- a/java/dagger/internal/codegen/BindingExpression.java
+++ b/java/dagger/internal/codegen/BindingExpression.java
@@ -17,16 +17,21 @@
 package dagger.internal.codegen;
 
 import static com.google.common.base.Preconditions.checkNotNull;
+import static dagger.internal.codegen.Accessibility.isRawTypeAccessible;
+import static dagger.internal.codegen.Accessibility.isTypeAccessibleFrom;
 import static dagger.internal.codegen.AnnotationSpecs.Suppression.RAWTYPES;
 import static dagger.internal.codegen.MemberSelect.staticMemberSelect;
 import static dagger.internal.codegen.TypeNames.PRODUCER;
+import static dagger.internal.codegen.TypeNames.rawTypeName;
 import static javax.lang.model.element.Modifier.PRIVATE;
 
 import com.google.common.collect.ImmutableMap;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.FieldSpec;
+import com.squareup.javapoet.TypeName;
 import java.util.Optional;
+import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.Elements;
 
 /** The code expressions to declare, initialize, and/or access a binding in a component. */
@@ -43,19 +48,45 @@ final BindingKey bindingKey() {
   }
 
   /**
-   * Returns the {@link CodeBlock} that implements the operation represented by the {@link
-   * DependencyRequest request} from the {@code requestingClass}.
+   * Returns an expression that evaluates to the value of a dependency request.
+   *
+   * @param requestingClass the class that will contain the expression
    */
-  abstract CodeBlock getSnippetForDependencyRequest(
-      DependencyRequest request, ClassName requestingClass);
+  abstract CodeBlock getDependencyExpression(DependencyRequest request, ClassName requestingClass);
 
   /**
-   * Returns the {@link CodeBlock} that references the {@link FrameworkDependency} as accessed from
-   * the {@code requestingClass}.
+   * Returns an expression that evaluates to the value of a framework dependency.
+   *
+   * @param requestingClass the class that will contain the expression
    */
-  abstract CodeBlock getSnippetForFrameworkDependency(
+  abstract CodeBlock getDependencyExpression(
       FrameworkDependency frameworkDependency, ClassName requestingClass);
 
+  /**
+   * Returns an expression that evaluates to the value of a dependency request, for passing to a
+   * binding method, an {@code @Inject}-annotated constructor or member, or a proxy for one.
+   *
+   * <p>If the method is a generated static {@link InjectionMethods injection method}, each
+   * parameter will be {@link Object} if the dependency's raw type is inaccessible. If that is the
+   * case for this dependency, the returned expression will use a cast to evaluate to the raw type.
+   *
+   * @param requestingClass the class that will contain the expression
+   */
+  // TODO(b/64024402) Merge with getDependencyExpression(DependencyRequest, ClassName) if possible.
+  CodeBlock getDependencyArgumentExpression(
+      DependencyRequest dependencyRequest, ClassName requestingClass) {
+    CodeBlock.Builder argument = CodeBlock.builder();
+
+    TypeMirror dependencyType = dependencyRequest.key().type();
+    if (!isTypeAccessibleFrom(dependencyType, requestingClass.packageName())
+        && isRawTypeAccessible(dependencyType, requestingClass.packageName())) {
+      argument.add("($T) ", rawTypeName(TypeName.get(dependencyType)));
+    }
+
+    argument.add(getDependencyExpression(dependencyRequest, requestingClass));
+    return argument.build();
+  }
+
   /** Factory for building a {@link BindingExpression}. */
   static final class Factory {
     private final CompilerOptions compilerOptions;
diff --git a/java/dagger/internal/codegen/HasBindingExpressions.java b/java/dagger/internal/codegen/HasBindingExpressions.java
index b27705f0e..3a0d3bbc3 100644
--- a/java/dagger/internal/codegen/HasBindingExpressions.java
+++ b/java/dagger/internal/codegen/HasBindingExpressions.java
@@ -16,7 +16,6 @@
 
 package dagger.internal.codegen;
 
-import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.FieldSpec;
 import com.squareup.javapoet.MethodSpec;
@@ -35,14 +34,6 @@
   @Nullable
   BindingExpression getBindingExpression(BindingKey bindingKey);
 
-  /**
-   * If the type is accessible, use the snippet. If only the raw type is accessible, cast it to the
-   * raw type. If the raw type is inaccessible, the proxy will have an Object method
-   * parameter, so we can again, just use the snippet.
-   */
-  CodeBlock getRequestFulfillmentWithPossibleRawtypeCast(
-      DependencyRequest dependencyRequest, ClassName requestingClass);
-
   /** Returns the expression used to initialize a binding expression field. */
   CodeBlock getFieldInitialization(FrameworkInstanceBindingExpression bindingExpression);
 
diff --git a/java/dagger/internal/codegen/MembersInjectorBindingExpression.java b/java/dagger/internal/codegen/MembersInjectorBindingExpression.java
index 11851938e..a620f0dab 100644
--- a/java/dagger/internal/codegen/MembersInjectorBindingExpression.java
+++ b/java/dagger/internal/codegen/MembersInjectorBindingExpression.java
@@ -34,14 +34,13 @@
   }
 
   @Override
-  public CodeBlock getSnippetForDependencyRequest(
-      DependencyRequest request, ClassName requestingClass) {
+  CodeBlock getDependencyExpression(DependencyRequest request, ClassName requestingClass) {
     checkArgument(request.kind().equals(Kind.MEMBERS_INJECTOR));
     return getFrameworkTypeInstance(requestingClass);
   }
 
   @Override
-  CodeBlock getSnippetForFrameworkDependency(
+  CodeBlock getDependencyExpression(
       FrameworkDependency frameworkDependency, ClassName requestingClass) {
     checkArgument(frameworkDependency.bindingType().equals(BindingType.MEMBERS_INJECTION));
     return getFrameworkTypeInstance(requestingClass);
diff --git a/java/dagger/internal/codegen/OptionalBindingExpression.java b/java/dagger/internal/codegen/OptionalBindingExpression.java
index 822e0afe7..34cbc3dc3 100644
--- a/java/dagger/internal/codegen/OptionalBindingExpression.java
+++ b/java/dagger/internal/codegen/OptionalBindingExpression.java
@@ -41,7 +41,7 @@
   }
 
   @Override
-  CodeBlock getSimpleInvocation(DependencyRequest request, ClassName requestingClass) {
+  CodeBlock getInstanceDependencyExpression(DependencyRequest request, ClassName requestingClass) {
     OptionalType optionalType = OptionalType.from(binding.key());
     OptionalKind optionalKind = optionalType.kind();
     if (binding.dependencies().isEmpty()) {
@@ -58,7 +58,7 @@ CodeBlock getSimpleInvocation(DependencyRequest request, ClassName requestingCla
     CodeBlock dependencyExpression =
         hasBindingExpressions
             .getBindingExpression(dependency.bindingKey())
-            .getSnippetForDependencyRequest(dependency, requestingClass);
+            .getDependencyExpression(dependency, requestingClass);
 
     // If the dependency type is inaccessible, then we have to use Optional.<Object>of(...), or else
     // we will get "incompatible types: inference variable has incompatible bounds.
diff --git a/java/dagger/internal/codegen/ProducerBindingExpression.java b/java/dagger/internal/codegen/ProducerBindingExpression.java
index a39365dda..208a408a1 100644
--- a/java/dagger/internal/codegen/ProducerBindingExpression.java
+++ b/java/dagger/internal/codegen/ProducerBindingExpression.java
@@ -38,13 +38,12 @@
   }
 
   @Override
-  CodeBlock getSnippetForDependencyRequest(
-      DependencyRequest request, ClassName requestingClass) {
+  CodeBlock getDependencyExpression(DependencyRequest request, ClassName requestingClass) {
     return FrameworkType.PRODUCER.to(request.kind(), getFrameworkTypeInstance(requestingClass));
   }
 
   @Override
-  CodeBlock getSnippetForFrameworkDependency(
+  CodeBlock getDependencyExpression(
       FrameworkDependency frameworkDependency, ClassName requestingClass) {
     checkArgument(
         frameworkDependency.bindingType().equals(PRODUCTION),
diff --git a/java/dagger/internal/codegen/ProviderBindingExpression.java b/java/dagger/internal/codegen/ProviderBindingExpression.java
index accd39148..107b47027 100644
--- a/java/dagger/internal/codegen/ProviderBindingExpression.java
+++ b/java/dagger/internal/codegen/ProviderBindingExpression.java
@@ -19,7 +19,6 @@
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.FieldSpec;
-import dagger.producers.internal.Producers;
 import java.util.Optional;
 
 final class ProviderBindingExpression extends FrameworkInstanceBindingExpression {
@@ -32,12 +31,12 @@
   }
 
   @Override
-  CodeBlock getSnippetForDependencyRequest(DependencyRequest request, ClassName requestingClass) {
+  CodeBlock getDependencyExpression(DependencyRequest request, ClassName requestingClass) {
     return FrameworkType.PROVIDER.to(request.kind(), getFrameworkTypeInstance(requestingClass));
   }
 
   @Override
-  CodeBlock getSnippetForFrameworkDependency(
+  CodeBlock getDependencyExpression(
       FrameworkDependency frameworkDependency, ClassName requestingClass) {
     switch (frameworkDependency.bindingType()) {
       case PROVISION:
@@ -45,10 +44,8 @@ CodeBlock getSnippetForFrameworkDependency(
       case MEMBERS_INJECTION:
         throw new IllegalArgumentException();
       case PRODUCTION:
-        return CodeBlock.of(
-            "$T.producerFromProvider($L)",
-            Producers.class,
-            getFrameworkTypeInstance(requestingClass));
+        return FrameworkType.PROVIDER.to(
+            DependencyRequest.Kind.PRODUCER, getFrameworkTypeInstance(requestingClass));
       default:
         throw new AssertionError();
     }
diff --git a/java/dagger/internal/codegen/SetBindingExpression.java b/java/dagger/internal/codegen/SetBindingExpression.java
index d0ca01526..d94660cb1 100644
--- a/java/dagger/internal/codegen/SetBindingExpression.java
+++ b/java/dagger/internal/codegen/SetBindingExpression.java
@@ -27,7 +27,6 @@
 import dagger.internal.SetBuilder;
 import java.util.Collections;
 import java.util.Set;
-import java.util.function.Function;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.Elements;
 
@@ -55,13 +54,7 @@
   }
 
   @Override
-  CodeBlock getSimpleInvocation(DependencyRequest request, ClassName requestingClass) {
-    Function<DependencyRequest, CodeBlock> getRequestFulfillmentForDependency =
-        dependency ->
-            hasBindingExpressions
-                .getBindingExpression(dependency.bindingKey())
-                .getSnippetForDependencyRequest(dependency, requestingClass);
-
+  CodeBlock getInstanceDependencyExpression(DependencyRequest request, ClassName requestingClass) {
     // TODO(ronshapiro): We should also make an ImmutableSet version of SetFactory
     boolean isImmutableSetAvailable = isImmutableSetAvailable();
     // TODO(ronshapiro, gak): Use Sets.immutableEnumSet() if it's available?
@@ -74,7 +67,7 @@ CodeBlock getSimpleInvocation(DependencyRequest request, ClassName requestingCla
               binding
                   .dependencies()
                   .stream()
-                  .map(getRequestFulfillmentForDependency)
+                  .map(dependency -> getContributionExpression(dependency, requestingClass))
                   .collect(toParametersCodeBlock()))
           .build();
     }
@@ -85,16 +78,15 @@ CodeBlock getSimpleInvocation(DependencyRequest request, ClassName requestingCla
       case 1:
         {
           DependencyRequest dependency = getOnlyElement(binding.dependencies());
-          CodeBlock dependencySnippet =
-              getRequestFulfillmentForDependency(dependency, requestingClass);
+          CodeBlock contributionExpression = getContributionExpression(dependency, requestingClass);
           if (isSingleValue(dependency)) {
             return collectionsStaticFactoryInvocation(
-                request, requestingClass, CodeBlock.of("singleton($L)", dependencySnippet));
+                request, requestingClass, CodeBlock.of("singleton($L)", contributionExpression));
           } else if (isImmutableSetAvailable) {
             return CodeBlock.builder()
                 .add("$T.", ImmutableSet.class)
                 .add(maybeTypeParameter(request, requestingClass))
-                .add("copyOf($L)", dependencySnippet)
+                .add("copyOf($L)", contributionExpression)
                 .build();
           }
         }
@@ -112,19 +104,17 @@ CodeBlock getSimpleInvocation(DependencyRequest request, ClassName requestingCla
         for (DependencyRequest dependency : binding.dependencies()) {
           String builderMethod = isSingleValue(dependency) ? "add" : "addAll";
           instantiation.add(
-              ".$L($L)",
-              builderMethod,
-              getRequestFulfillmentForDependency(dependency, requestingClass));
+              ".$L($L)", builderMethod, getContributionExpression(dependency, requestingClass));
         }
         return instantiation.add(".build()").build();
     }
   }
 
-  private CodeBlock getRequestFulfillmentForDependency(
+  private CodeBlock getContributionExpression(
       DependencyRequest dependency, ClassName requestingClass) {
     return hasBindingExpressions
         .getBindingExpression(dependency.bindingKey())
-        .getSnippetForDependencyRequest(dependency, requestingClass);
+        .getDependencyExpression(dependency, requestingClass);
   }
 
   private static CodeBlock collectionsStaticFactoryInvocation(
diff --git a/java/dagger/internal/codegen/SimpleInvocationBindingExpression.java b/java/dagger/internal/codegen/SimpleInvocationBindingExpression.java
index 644b4308c..62eee5ff4 100644
--- a/java/dagger/internal/codegen/SimpleInvocationBindingExpression.java
+++ b/java/dagger/internal/codegen/SimpleInvocationBindingExpression.java
@@ -32,7 +32,13 @@
     this.delegate = delegate;
   }
 
-  abstract CodeBlock getSimpleInvocation(DependencyRequest request, ClassName requestingClass);
+  /**
+   * Returns an expression that evaluates to an instance of a dependency.
+   *
+   * @param requestingClass the class that will contain the expression
+   */
+  abstract CodeBlock getInstanceDependencyExpression(
+      DependencyRequest request, ClassName requestingClass);
 
   /**
    * Java 7 type inference is not as strong as in Java 8, and therefore some generated code must
@@ -46,25 +52,24 @@ protected CodeBlock explicitTypeParameter(ClassName requestingClass) {
   }
 
   @Override
-  final CodeBlock getSnippetForDependencyRequest(
-      DependencyRequest request, ClassName requestingClass) {
+  final CodeBlock getDependencyExpression(DependencyRequest request, ClassName requestingClass) {
     switch (request.kind()) {
       case INSTANCE:
-        return getSimpleInvocation(request, requestingClass);
+        return getInstanceDependencyExpression(request, requestingClass);
       case FUTURE:
         return CodeBlock.builder()
             .add("$T.", Futures.class)
             .add(explicitTypeParameter(requestingClass))
-            .add("immediateFuture($L)", getSimpleInvocation(request, requestingClass))
+            .add("immediateFuture($L)", getInstanceDependencyExpression(request, requestingClass))
             .build();
       default:
-        return delegate.getSnippetForDependencyRequest(request, requestingClass);
+        return delegate.getDependencyExpression(request, requestingClass);
     }
   }
 
   @Override
-  final CodeBlock getSnippetForFrameworkDependency(
+  final CodeBlock getDependencyExpression(
       FrameworkDependency frameworkDependency, ClassName requestingClass) {
-    return delegate.getSnippetForFrameworkDependency(frameworkDependency, requestingClass);
+    return delegate.getDependencyExpression(frameworkDependency, requestingClass);
   }
 }
diff --git a/java/dagger/internal/codegen/SimpleMethodBindingExpression.java b/java/dagger/internal/codegen/SimpleMethodBindingExpression.java
index ecb895a57..bb72db0ba 100644
--- a/java/dagger/internal/codegen/SimpleMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/SimpleMethodBindingExpression.java
@@ -63,7 +63,7 @@
   }
 
   @Override
-  CodeBlock getSimpleInvocation(DependencyRequest request, ClassName requestingClass) {
+  CodeBlock getInstanceDependencyExpression(DependencyRequest request, ClassName requestingClass) {
     return requiresInjectionMethod(provisionBinding, requestingClass.packageName())
         ? invokeInjectionMethod(requestingClass)
         : invokeMethod(requestingClass);
@@ -115,8 +115,9 @@ private CodeBlock invokeInjectionMethod(ClassName requestingClass) {
   }
 
   private CodeBlock dependencyArgument(DependencyRequest dependency, ClassName requestingClass) {
-    return hasBindingExpressions.getRequestFulfillmentWithPossibleRawtypeCast(
-        dependency, requestingClass);
+    return hasBindingExpressions
+        .getBindingExpression(dependency.bindingKey())
+        .getDependencyArgumentExpression(dependency, requestingClass);
   }
 
   private CodeBlock maybeCheckForNulls(CodeBlock methodCall) {
diff --git a/java/dagger/internal/codegen/SubcomponentBuilderBindingExpression.java b/java/dagger/internal/codegen/SubcomponentBuilderBindingExpression.java
index 0fa51950f..53fd28b94 100644
--- a/java/dagger/internal/codegen/SubcomponentBuilderBindingExpression.java
+++ b/java/dagger/internal/codegen/SubcomponentBuilderBindingExpression.java
@@ -28,7 +28,7 @@
   }
 
   @Override
-  CodeBlock getSimpleInvocation(DependencyRequest request, ClassName requestingClass) {
+  CodeBlock getInstanceDependencyExpression(DependencyRequest request, ClassName requestingClass) {
     return CodeBlock.of("new $LBuilder()", subcomponentBuilderName);
   }
 }
