diff --git a/core/src/main/java/dagger/MapKey.java b/core/src/main/java/dagger/MapKey.java
index ebc28b311..89307be15 100644
--- a/core/src/main/java/dagger/MapKey.java
+++ b/core/src/main/java/dagger/MapKey.java
@@ -19,7 +19,6 @@
 import static java.lang.annotation.ElementType.ANNOTATION_TYPE;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
-import dagger.internal.Beta;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
@@ -106,7 +105,6 @@
 @Documented
 @Target(ANNOTATION_TYPE)
 @Retention(RUNTIME)
-@Beta
 public @interface MapKey {
   /**
    * True to use the value of the single member of the annotated annotation as the map key; false
diff --git a/core/src/main/java/dagger/multibindings/ClassKey.java b/core/src/main/java/dagger/multibindings/ClassKey.java
index 22a055827..ac255457c 100644
--- a/core/src/main/java/dagger/multibindings/ClassKey.java
+++ b/core/src/main/java/dagger/multibindings/ClassKey.java
@@ -20,7 +20,6 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import dagger.MapKey;
-import dagger.internal.Beta;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
@@ -31,7 +30,6 @@
  * <p>If your map's keys can be constrained, consider using a custom annotation instead, with a
  * member whose type is {@code Class<? extends Something>}.
  */
-@Beta
 @Documented
 @Target(METHOD)
 @Retention(RUNTIME)
diff --git a/core/src/main/java/dagger/multibindings/IntKey.java b/core/src/main/java/dagger/multibindings/IntKey.java
index 12ebc10d9..55e79a1bf 100644
--- a/core/src/main/java/dagger/multibindings/IntKey.java
+++ b/core/src/main/java/dagger/multibindings/IntKey.java
@@ -20,13 +20,11 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import dagger.MapKey;
-import dagger.internal.Beta;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
 /** A {@link MapKey} annotation for maps with {@code int} keys. */
-@Beta
 @Documented
 @Target(METHOD)
 @Retention(RUNTIME)
diff --git a/core/src/main/java/dagger/multibindings/IntoMap.java b/core/src/main/java/dagger/multibindings/IntoMap.java
index c34d6a89e..3066b5801 100644
--- a/core/src/main/java/dagger/multibindings/IntoMap.java
+++ b/core/src/main/java/dagger/multibindings/IntoMap.java
@@ -19,7 +19,6 @@
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
-import dagger.internal.Beta;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
@@ -35,5 +34,4 @@
 @Documented
 @Target(METHOD)
 @Retention(RUNTIME)
-@Beta
 public @interface IntoMap {}
diff --git a/core/src/main/java/dagger/multibindings/LongKey.java b/core/src/main/java/dagger/multibindings/LongKey.java
index a8d6ab64e..71d0fe116 100644
--- a/core/src/main/java/dagger/multibindings/LongKey.java
+++ b/core/src/main/java/dagger/multibindings/LongKey.java
@@ -20,13 +20,11 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import dagger.MapKey;
-import dagger.internal.Beta;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
 /** A {@link MapKey} annotation for maps with {@code long} keys. */
-@Beta
 @Documented
 @Target(METHOD)
 @Retention(RUNTIME)
diff --git a/core/src/main/java/dagger/multibindings/Multibinds.java b/core/src/main/java/dagger/multibindings/Multibinds.java
index 82b615687..1517b2698 100644
--- a/core/src/main/java/dagger/multibindings/Multibinds.java
+++ b/core/src/main/java/dagger/multibindings/Multibinds.java
@@ -19,7 +19,6 @@
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
-import dagger.internal.Beta;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
@@ -35,10 +34,10 @@
  *
  * <pre><code>
  *   {@literal @Module} abstract class MyModule {
- *     {@literal @Multibinds Set<Foo> aSet();}
- *     {@literal @Multibinds @MyQualifier Set<Foo> aQualifiedSet();}
- *     {@literal @Multibinds Map<String, Foo> aMap();}
- *     {@literal @Multibinds @MyQualifier Map<String, Foo> aQualifiedMap();}
+ *     {@literal @Multibinds abstract Set<Foo> aSet();}
+ *     {@literal @Multibinds abstract @MyQualifier Set<Foo> aQualifiedSet();}
+ *     {@literal @Multibinds abstract Map<String, Foo> aMap();}
+ *     {@literal @Multibinds abstract @MyQualifier Map<String, Foo> aQualifiedMap();}
  *
  *     {@literal @Provides}
  *     {@literal static Object usesMultibindings(Set<Foo> set, @MyQualifier Map<String, Foo> map}) {
@@ -54,5 +53,4 @@
 @Documented
 @Target(METHOD)
 @Retention(RUNTIME)
-@Beta
 public @interface Multibinds {}
diff --git a/core/src/main/java/dagger/multibindings/StringKey.java b/core/src/main/java/dagger/multibindings/StringKey.java
index 40d48c87c..5dad8e3e9 100644
--- a/core/src/main/java/dagger/multibindings/StringKey.java
+++ b/core/src/main/java/dagger/multibindings/StringKey.java
@@ -20,13 +20,11 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import dagger.MapKey;
-import dagger.internal.Beta;
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
 /** A {@link MapKey} annotation for maps with {@link String} keys. */
-@Beta
 @Documented
 @Target(METHOD)
 @Retention(RUNTIME)
diff --git a/producers/src/main/java/dagger/producers/internal/MapOfProducedProducer.java b/producers/src/main/java/dagger/producers/internal/MapOfProducedProducer.java
index 7aace23a2..7fe2ce488 100644
--- a/producers/src/main/java/dagger/producers/internal/MapOfProducedProducer.java
+++ b/producers/src/main/java/dagger/producers/internal/MapOfProducedProducer.java
@@ -26,7 +26,6 @@
 import com.google.common.util.concurrent.AsyncFunction;
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
-import dagger.internal.Beta;
 import dagger.producers.Produced;
 import dagger.producers.Producer;
 import java.util.List;
@@ -39,7 +38,6 @@
  *
  * @author Jesse Beder
  */
-@Beta
 public final class MapOfProducedProducer<K, V> extends AbstractProducer<Map<K, Produced<V>>> {
   private final Producer<Map<K, Producer<V>>> mapProducerProducer;
 
diff --git a/producers/src/main/java/dagger/producers/internal/MapOfProducerProducer.java b/producers/src/main/java/dagger/producers/internal/MapOfProducerProducer.java
index 216966e75..5eef863c3 100644
--- a/producers/src/main/java/dagger/producers/internal/MapOfProducerProducer.java
+++ b/producers/src/main/java/dagger/producers/internal/MapOfProducerProducer.java
@@ -23,7 +23,6 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
-import dagger.internal.Beta;
 import dagger.producers.Producer;
 import java.util.Map;
 import javax.inject.Provider;
@@ -34,7 +33,6 @@
  *
  * @author Jesse Beder
  */
-@Beta
 public final class MapOfProducerProducer<K, V> extends AbstractProducer<Map<K, Producer<V>>> {
   private static final MapOfProducerProducer<Object, Object> EMPTY =
       new MapOfProducerProducer<Object, Object>(ImmutableMap.<Object, Producer<Object>>of());
diff --git a/producers/src/main/java/dagger/producers/internal/MapProducer.java b/producers/src/main/java/dagger/producers/internal/MapProducer.java
index 33eb76e8c..1a13b9d53 100644
--- a/producers/src/main/java/dagger/producers/internal/MapProducer.java
+++ b/producers/src/main/java/dagger/producers/internal/MapProducer.java
@@ -26,7 +26,6 @@
 import com.google.common.util.concurrent.AsyncFunction;
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
-import dagger.internal.Beta;
 import dagger.producers.Producer;
 import java.util.List;
 import java.util.Map;
@@ -37,7 +36,6 @@
  *
  * @author Jesse Beder
  */
-@Beta
 public final class MapProducer<K, V> extends AbstractProducer<Map<K, V>> {
   private final Producer<Map<K, Producer<V>>> mapProducerProducer;
 
