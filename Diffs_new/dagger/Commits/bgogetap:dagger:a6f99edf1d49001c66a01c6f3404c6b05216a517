diff --git a/BUILD b/BUILD
index 6b395fdf0..f4b389a90 100644
--- a/BUILD
+++ b/BUILD
@@ -109,6 +109,7 @@ javadoc_library(
         "//java/dagger/android/support:support-srcs",
         "//java/dagger/grpc/server:javadoc-srcs",
         "//java/dagger/grpc/server/processor:javadoc-srcs",
+        "//java/dagger/model:model-srcs",
         "//java/dagger/producers:producers-srcs",
     ],
     android_api_level = 26,
@@ -126,6 +127,7 @@ javadoc_library(
         "//java/dagger/android/support",
         "//java/dagger/grpc/server",
         "//java/dagger/grpc/server/processor",
+        "//java/dagger/model",
         "//java/dagger/producers",
     ],
 )
diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index cf030e84e..7b0c0011d 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -50,6 +50,7 @@ CODEGEN_SHARED_DEPS = [
     "//third_party:jsr330_inject",
     "//java/dagger:core",
     "//java/dagger/producers",
+    "//java/dagger/model",
 ]
 
 CODEGEN_DEPS = CODEGEN_SHARED_DEPS + [
@@ -62,6 +63,7 @@ java_library(
     srcs = [
         "Accessibility.java",
         "AnnotationSpecs.java",
+        "BindingKey.java",
         "CodeBlocks.java",
         "CompilerOptions.java",
         "ContributionType.java",
@@ -71,13 +73,18 @@ java_library(
         "Expression.java",
         "FeatureStatus.java",
         "ForwardingNetwork.java",
+        "FrameworkTypes.java",
         "InjectionAnnotations.java",
+        "Keys.java",
         "MapKeyAccessibility.java",
+        "MapType.java",
         "MethodSignature.java",
         "MoreAnnotationMirrors.java",
         "MoreAnnotationValues.java",
         "MultibindingAnnotations.java",
+        "OptionalType.java",
         "Optionals.java",
+        "SetType.java",
         "SimpleAnnotationMirror.java",
         "SimpleTypeAnnotationValue.java",
         "SourceFileGenerationException.java",  # Used in :writing and :processor
@@ -102,8 +109,7 @@ java_library(
         "Binding.java",
         "BindingDeclaration.java",
         "BindingGraph.java",
-        "BindingGraphPlugin.java",  # TODO(ronshapiro): this should move to it's own spi target
-        "BindingKey.java",
+        "BindingGraphPlugin.java",  # TODO(ronshapiro): this should move to it's own model target
         "BindingNetwork.java",
         "BindingType.java",
         "BindingTypeMapper.java",
@@ -121,23 +127,17 @@ java_library(
         "FrameworkDependency.java",
         "FrameworkField.java",  # Used by SourceFiles
         "FrameworkType.java",
-        "FrameworkTypes.java",
         "InjectBindingRegistry.java",
-        "Key.java",
         "KeyFactory.java",
-        "Keys.java",
         "MapKeys.java",
-        "MapType.java",
         "MembersInjectionBinding.java",
         "ModuleDescriptor.java",
         "MultibindingDeclaration.java",
         "OptionalBindingDeclaration.java",
-        "OptionalType.java",
         "ProductionBinding.java",
         "ProvisionBinding.java",
         "ResolvedBindings.java",
         "Scope.java",
-        "SetType.java",
         "SourceFiles.java",  # Consider splitting this up?
         "SubcomponentDeclaration.java",
     ],
@@ -272,6 +272,7 @@ java_library(
         ":processor",
         ":validation",
         "//java/dagger:core",
+        "//java/dagger/model",
         "//java/dagger/producers",
         "//third_party:auto_common",
         "//third_party:auto_service",
diff --git a/java/dagger/internal/codegen/Binding.java b/java/dagger/internal/codegen/Binding.java
index 93dc514f6..3906bfe4a 100644
--- a/java/dagger/internal/codegen/Binding.java
+++ b/java/dagger/internal/codegen/Binding.java
@@ -30,6 +30,7 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import dagger.internal.codegen.BindingType.HasBindingType;
+import dagger.model.Key;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
diff --git a/java/dagger/internal/codegen/BindingGraph.java b/java/dagger/internal/codegen/BindingGraph.java
index 72ed65725..c0e10a3a3 100644
--- a/java/dagger/internal/codegen/BindingGraph.java
+++ b/java/dagger/internal/codegen/BindingGraph.java
@@ -51,6 +51,7 @@
 import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
 import dagger.internal.codegen.ContributionBinding.Kind;
 import dagger.internal.codegen.Keys.HasKey;
+import dagger.model.Key;
 import dagger.producers.Produced;
 import dagger.producers.Producer;
 import dagger.releasablereferences.CanReleaseReferences;
@@ -1149,7 +1150,13 @@ private boolean hasLocallyPresentOptionalBinding(ResolvedBindings resolvedBindin
       ImmutableSetMultimap.Builder<Key, T> builder = ImmutableSetMultimap.builder();
       for (T declaration : declarations) {
         if (declaration.key().multibindingContributionIdentifier().isPresent()) {
-          builder.put(declaration.key().withoutMultibindingContributionIdentifier(), declaration);
+          builder.put(
+              declaration
+                  .key()
+                  .toBuilder()
+                  .multibindingContributionIdentifier(Optional.empty())
+                  .build(),
+              declaration);
         }
       }
       return builder.build();
diff --git a/java/dagger/internal/codegen/BindingGraphValidator.java b/java/dagger/internal/codegen/BindingGraphValidator.java
index 4d0a9c9b4..142b17995 100644
--- a/java/dagger/internal/codegen/BindingGraphValidator.java
+++ b/java/dagger/internal/codegen/BindingGraphValidator.java
@@ -96,6 +96,7 @@
 import dagger.internal.codegen.ComponentDescriptor.BuilderSpec;
 import dagger.internal.codegen.ComponentRequirement.NullPolicy;
 import dagger.internal.codegen.ContributionType.HasContributionType;
+import dagger.model.Key;
 import dagger.releasablereferences.CanReleaseReferences;
 import dagger.releasablereferences.ForReleasableReferences;
 import dagger.releasablereferences.ReleasableReferenceManager;
diff --git a/java/dagger/internal/codegen/BindingKey.java b/java/dagger/internal/codegen/BindingKey.java
index 59e1d1aea..c90ceb92e 100644
--- a/java/dagger/internal/codegen/BindingKey.java
+++ b/java/dagger/internal/codegen/BindingKey.java
@@ -17,6 +17,7 @@
 package dagger.internal.codegen;
 
 import com.google.auto.value.AutoValue;
+import dagger.model.Key;
 
 /**
  * A value object that pairs a {@link Key} with the style of its binding (i.e., whether it's a
diff --git a/java/dagger/internal/codegen/BindingVariableNamer.java b/java/dagger/internal/codegen/BindingVariableNamer.java
index 496ef8e08..1660327ee 100644
--- a/java/dagger/internal/codegen/BindingVariableNamer.java
+++ b/java/dagger/internal/codegen/BindingVariableNamer.java
@@ -20,6 +20,7 @@
 import static com.google.common.base.CaseFormat.UPPER_CAMEL;
 import static dagger.internal.codegen.ConfigurationAnnotations.isSubcomponentBuilder;
 
+import dagger.model.Key;
 import java.util.Iterator;
 import javax.lang.model.element.Element;
 import javax.lang.model.type.ArrayType;
diff --git a/java/dagger/internal/codegen/ComponentRequirement.java b/java/dagger/internal/codegen/ComponentRequirement.java
index 22c1b4c6e..5c3e72922 100644
--- a/java/dagger/internal/codegen/ComponentRequirement.java
+++ b/java/dagger/internal/codegen/ComponentRequirement.java
@@ -32,6 +32,7 @@
 import dagger.Binds;
 import dagger.BindsOptionalOf;
 import dagger.Provides;
+import dagger.model.Key;
 import dagger.multibindings.Multibinds;
 import dagger.producers.Produces;
 import java.util.Optional;
@@ -171,7 +172,7 @@ static ComponentRequirement forModule(TypeMirror type) {
   static ComponentRequirement forBinding(Key key, boolean nullable, String variableName) {
     return new AutoValue_ComponentRequirement(
         Kind.BINDING,
-        key.wrappedType(),
+        MoreTypes.equivalence().wrap(key.type()),
         nullable ? Optional.of(NullPolicy.ALLOW) : Optional.empty(),
         Optional.of(key),
         variableName);
diff --git a/java/dagger/internal/codegen/ContributionBinding.java b/java/dagger/internal/codegen/ContributionBinding.java
index ee18be5b7..bba475bb9 100644
--- a/java/dagger/internal/codegen/ContributionBinding.java
+++ b/java/dagger/internal/codegen/ContributionBinding.java
@@ -38,6 +38,7 @@
 import dagger.MapKey;
 import dagger.Provides;
 import dagger.internal.codegen.ContributionType.HasContributionType;
+import dagger.model.Key;
 import dagger.producers.Produces;
 import java.util.Optional;
 import java.util.Set;
diff --git a/java/dagger/internal/codegen/DaggerKythePlugin.java b/java/dagger/internal/codegen/DaggerKythePlugin.java
index 574119996..c8176ac47 100644
--- a/java/dagger/internal/codegen/DaggerKythePlugin.java
+++ b/java/dagger/internal/codegen/DaggerKythePlugin.java
@@ -41,6 +41,7 @@
 import com.sun.tools.javac.tree.JCTree.JCClassDecl;
 import com.sun.tools.javac.tree.JCTree.JCCompilationUnit;
 import com.sun.tools.javac.util.Context;
+import dagger.model.Key;
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ElementKind;
diff --git a/java/dagger/internal/codegen/DependencyRequest.java b/java/dagger/internal/codegen/DependencyRequest.java
index ccc4902b5..8da134335 100644
--- a/java/dagger/internal/codegen/DependencyRequest.java
+++ b/java/dagger/internal/codegen/DependencyRequest.java
@@ -43,6 +43,7 @@
 import dagger.Lazy;
 import dagger.MembersInjector;
 import dagger.Provides;
+import dagger.model.Key;
 import dagger.producers.Produced;
 import dagger.producers.Producer;
 import java.util.List;
diff --git a/java/dagger/internal/codegen/DependencyRequestFormatter.java b/java/dagger/internal/codegen/DependencyRequestFormatter.java
index 345db195a..13a5a3dc1 100644
--- a/java/dagger/internal/codegen/DependencyRequestFormatter.java
+++ b/java/dagger/internal/codegen/DependencyRequestFormatter.java
@@ -29,6 +29,7 @@
 import dagger.Lazy;
 import dagger.Provides;
 import dagger.internal.codegen.ComponentTreeTraverser.DependencyTrace;
+import dagger.model.Key;
 import dagger.producers.Produces;
 import java.util.List;
 import java.util.Optional;
diff --git a/java/dagger/internal/codegen/FrameworkInstanceBindingExpression.java b/java/dagger/internal/codegen/FrameworkInstanceBindingExpression.java
index 98685dbe3..a9198e1e7 100644
--- a/java/dagger/internal/codegen/FrameworkInstanceBindingExpression.java
+++ b/java/dagger/internal/codegen/FrameworkInstanceBindingExpression.java
@@ -22,6 +22,7 @@
 import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.FieldSpec;
 import dagger.internal.codegen.MemberSelect.MemberSelectSupplier;
+import dagger.model.Key;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.Elements;
diff --git a/java/dagger/internal/codegen/InjectBindingRegistry.java b/java/dagger/internal/codegen/InjectBindingRegistry.java
index b389cd34c..94bc4a178 100644
--- a/java/dagger/internal/codegen/InjectBindingRegistry.java
+++ b/java/dagger/internal/codegen/InjectBindingRegistry.java
@@ -19,6 +19,7 @@
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import dagger.Component;
 import dagger.Provides;
+import dagger.model.Key;
 import java.util.Optional;
 import javax.inject.Inject;
 import javax.lang.model.element.ExecutableElement;
diff --git a/java/dagger/internal/codegen/InjectBindingRegistryImpl.java b/java/dagger/internal/codegen/InjectBindingRegistryImpl.java
index 050514d63..cff37c9cd 100644
--- a/java/dagger/internal/codegen/InjectBindingRegistryImpl.java
+++ b/java/dagger/internal/codegen/InjectBindingRegistryImpl.java
@@ -34,6 +34,7 @@
 import com.squareup.javapoet.ClassName;
 import dagger.Component;
 import dagger.Provides;
+import dagger.model.Key;
 import java.util.ArrayDeque;
 import java.util.Deque;
 import java.util.Map;
diff --git a/java/dagger/internal/codegen/KeyFactory.java b/java/dagger/internal/codegen/KeyFactory.java
index dc3a1382b..1fa2d4429 100644
--- a/java/dagger/internal/codegen/KeyFactory.java
+++ b/java/dagger/internal/codegen/KeyFactory.java
@@ -36,7 +36,8 @@
 import com.google.common.util.concurrent.ListenableFuture;
 import dagger.Binds;
 import dagger.BindsOptionalOf;
-import dagger.internal.codegen.Key.MultibindingContributionIdentifier;
+import dagger.model.Key;
+import dagger.model.Key.MultibindingContributionIdentifier;
 import dagger.multibindings.Multibinds;
 import dagger.producers.Produced;
 import dagger.producers.Producer;
@@ -266,13 +267,13 @@ Key forQualifiedType(Optional<AnnotationMirror> qualifier, TypeMirror type) {
 
   Key forProductionExecutor() {
     return Key.builder(getClassElement(Executor.class).asType())
-        .qualifier(getClassElement(Production.class))
+        .qualifier(SimpleAnnotationMirror.of(getClassElement(Production.class)))
         .build();
   }
 
   Key forProductionImplementationExecutor() {
     return Key.builder(getClassElement(Executor.class).asType())
-        .qualifier(getClassElement(ProductionImplementation.class))
+        .qualifier(SimpleAnnotationMirror.of(getClassElement(ProductionImplementation.class)))
         .build();
   }
 
diff --git a/java/dagger/internal/codegen/KeyVNameFactory.java b/java/dagger/internal/codegen/KeyVNameFactory.java
index 6f48d47dd..e22c7a14a 100644
--- a/java/dagger/internal/codegen/KeyVNameFactory.java
+++ b/java/dagger/internal/codegen/KeyVNameFactory.java
@@ -27,6 +27,7 @@
 import com.google.devtools.kythe.analyzers.java.Plugin.KytheGraph;
 import com.google.devtools.kythe.proto.Storage.VName;
 import com.sun.tools.javac.code.Symbol.ClassSymbol;
+import dagger.model.Key;
 import java.util.EnumMap;
 import javax.lang.model.type.ArrayType;
 import javax.lang.model.type.DeclaredType;
diff --git a/java/dagger/internal/codegen/Keys.java b/java/dagger/internal/codegen/Keys.java
index 2e457c7a3..64760d562 100644
--- a/java/dagger/internal/codegen/Keys.java
+++ b/java/dagger/internal/codegen/Keys.java
@@ -20,6 +20,7 @@
 import com.google.auto.common.MoreTypes;
 import com.google.common.collect.ImmutableSetMultimap;
 import com.google.common.collect.Multimaps;
+import dagger.model.Key;
 import java.util.Optional;
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.ElementKind;
diff --git a/java/dagger/internal/codegen/KytheFormatting.java b/java/dagger/internal/codegen/KytheFormatting.java
index 187df4935..2c926978f 100644
--- a/java/dagger/internal/codegen/KytheFormatting.java
+++ b/java/dagger/internal/codegen/KytheFormatting.java
@@ -20,6 +20,7 @@
 
 import com.google.auto.common.MoreTypes;
 import com.squareup.javapoet.CodeBlock;
+import dagger.model.Key;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
diff --git a/java/dagger/internal/codegen/MapType.java b/java/dagger/internal/codegen/MapType.java
index 55c55eb1f..c7e51e047 100644
--- a/java/dagger/internal/codegen/MapType.java
+++ b/java/dagger/internal/codegen/MapType.java
@@ -22,6 +22,7 @@
 import com.google.auto.common.MoreTypes;
 import com.google.auto.value.AutoValue;
 import com.google.common.base.Equivalence;
+import dagger.model.Key;
 import java.util.Map;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeMirror;
diff --git a/java/dagger/internal/codegen/MembersInjectionBinding.java b/java/dagger/internal/codegen/MembersInjectionBinding.java
index 3dd9dd496..07f99f555 100644
--- a/java/dagger/internal/codegen/MembersInjectionBinding.java
+++ b/java/dagger/internal/codegen/MembersInjectionBinding.java
@@ -33,6 +33,7 @@
 import com.google.common.collect.ImmutableSortedSet;
 import com.google.common.collect.LinkedHashMultimap;
 import com.google.common.collect.SetMultimap;
+import dagger.model.Key;
 import java.util.ArrayList;
 import java.util.Comparator;
 import java.util.HashSet;
diff --git a/java/dagger/internal/codegen/MembersInjectionMethods.java b/java/dagger/internal/codegen/MembersInjectionMethods.java
index 9f12e08ef..3b785c90a 100644
--- a/java/dagger/internal/codegen/MembersInjectionMethods.java
+++ b/java/dagger/internal/codegen/MembersInjectionMethods.java
@@ -32,6 +32,7 @@
 import com.squareup.javapoet.TypeName;
 import dagger.internal.codegen.InjectionMethods.InjectionSiteMethod;
 import dagger.internal.codegen.MembersInjectionBinding.InjectionSite;
+import dagger.model.Key;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import javax.lang.model.element.Name;
diff --git a/java/dagger/internal/codegen/MultibindingDeclaration.java b/java/dagger/internal/codegen/MultibindingDeclaration.java
index c35d8cff9..fbaf99c67 100644
--- a/java/dagger/internal/codegen/MultibindingDeclaration.java
+++ b/java/dagger/internal/codegen/MultibindingDeclaration.java
@@ -24,6 +24,7 @@
 import dagger.Module;
 import dagger.internal.codegen.BindingType.HasBindingType;
 import dagger.internal.codegen.ContributionType.HasContributionType;
+import dagger.model.Key;
 import dagger.multibindings.Multibinds;
 import dagger.producers.Producer;
 import dagger.producers.ProducerModule;
diff --git a/java/dagger/internal/codegen/OptionalBindingDeclaration.java b/java/dagger/internal/codegen/OptionalBindingDeclaration.java
index 08897ab39..2f32a7090 100644
--- a/java/dagger/internal/codegen/OptionalBindingDeclaration.java
+++ b/java/dagger/internal/codegen/OptionalBindingDeclaration.java
@@ -21,6 +21,7 @@
 
 import com.google.auto.value.AutoValue;
 import dagger.BindsOptionalOf;
+import dagger.model.Key;
 import java.util.Optional;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
diff --git a/java/dagger/internal/codegen/OptionalType.java b/java/dagger/internal/codegen/OptionalType.java
index cd7896ef1..0fdbf685d 100644
--- a/java/dagger/internal/codegen/OptionalType.java
+++ b/java/dagger/internal/codegen/OptionalType.java
@@ -26,6 +26,7 @@
 import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.ParameterizedTypeName;
 import com.squareup.javapoet.TypeName;
+import dagger.model.Key;
 import java.util.Optional;
 import javax.lang.model.element.Name;
 import javax.lang.model.type.DeclaredType;
diff --git a/java/dagger/internal/codegen/ProductionBinding.java b/java/dagger/internal/codegen/ProductionBinding.java
index 45ac29ce5..93a8ee445 100644
--- a/java/dagger/internal/codegen/ProductionBinding.java
+++ b/java/dagger/internal/codegen/ProductionBinding.java
@@ -30,6 +30,7 @@
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import com.google.errorprone.annotations.CheckReturnValue;
+import dagger.model.Key;
 import dagger.producers.Producer;
 import java.util.Optional;
 import java.util.stream.Stream;
diff --git a/java/dagger/internal/codegen/ProviderOrProducerFieldInitializer.java b/java/dagger/internal/codegen/ProviderOrProducerFieldInitializer.java
index e1c3ca94f..3897b3925 100644
--- a/java/dagger/internal/codegen/ProviderOrProducerFieldInitializer.java
+++ b/java/dagger/internal/codegen/ProviderOrProducerFieldInitializer.java
@@ -61,6 +61,7 @@
 import com.squareup.javapoet.TypeSpec;
 import dagger.internal.InstanceFactory;
 import dagger.internal.TypedReleasableReferenceManagerDecorator;
+import dagger.model.Key;
 import dagger.producers.Produced;
 import dagger.producers.Producer;
 import dagger.releasablereferences.ForReleasableReferences;
diff --git a/java/dagger/internal/codegen/ProvisionBinding.java b/java/dagger/internal/codegen/ProvisionBinding.java
index fca2144b0..f70755edb 100644
--- a/java/dagger/internal/codegen/ProvisionBinding.java
+++ b/java/dagger/internal/codegen/ProvisionBinding.java
@@ -39,6 +39,7 @@
 import com.google.errorprone.annotations.CheckReturnValue;
 import dagger.internal.codegen.ComponentDescriptor.BuilderRequirementMethod;
 import dagger.internal.codegen.MembersInjectionBinding.InjectionSite;
+import dagger.model.Key;
 import java.util.Optional;
 import javax.inject.Inject;
 import javax.inject.Provider;
diff --git a/java/dagger/internal/codegen/ResolvedBindings.java b/java/dagger/internal/codegen/ResolvedBindings.java
index f3787d23b..7d2ad6ff7 100644
--- a/java/dagger/internal/codegen/ResolvedBindings.java
+++ b/java/dagger/internal/codegen/ResolvedBindings.java
@@ -31,6 +31,7 @@
 import dagger.internal.codegen.BindingType.HasBindingType;
 import dagger.internal.codegen.ContributionType.HasContributionType;
 import dagger.internal.codegen.Keys.HasKey;
+import dagger.model.Key;
 import java.util.Optional;
 
 /**
diff --git a/java/dagger/internal/codegen/SetType.java b/java/dagger/internal/codegen/SetType.java
index 180fc66fb..e4fa58469 100644
--- a/java/dagger/internal/codegen/SetType.java
+++ b/java/dagger/internal/codegen/SetType.java
@@ -21,6 +21,7 @@
 import com.google.auto.common.MoreTypes;
 import com.google.auto.value.AutoValue;
 import com.google.common.base.Equivalence;
+import dagger.model.Key;
 import java.util.Set;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeMirror;
diff --git a/java/dagger/internal/codegen/SubcomponentDeclaration.java b/java/dagger/internal/codegen/SubcomponentDeclaration.java
index 5c6832ae3..af557adf6 100644
--- a/java/dagger/internal/codegen/SubcomponentDeclaration.java
+++ b/java/dagger/internal/codegen/SubcomponentDeclaration.java
@@ -24,6 +24,7 @@
 import com.google.auto.common.MoreTypes;
 import com.google.auto.value.AutoValue;
 import com.google.common.collect.ImmutableSet;
+import dagger.model.Key;
 import java.util.Optional;
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.ExecutableElement;
diff --git a/java/dagger/model/BUILD b/java/dagger/model/BUILD
new file mode 100644
index 000000000..9ea405c9f
--- /dev/null
+++ b/java/dagger/model/BUILD
@@ -0,0 +1,50 @@
+# Copyright (C) 2017 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Description:
+#   Dagger's core APIs exposed for plugins
+
+package(default_visibility = ["//:src"])
+
+load(
+    "//:build_defs.bzl",
+    "DOCLINT_HTML_AND_SYNTAX",
+    "DOCLINT_REFERENCES",
+)
+
+filegroup(
+    name = "model-srcs",
+    srcs = glob(["*.java"]),
+)
+
+java_library(
+    name = "model",
+    srcs = [":model-srcs"],
+    javacopts = DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
+    deps = [
+        "//third_party:auto_common",
+        "//third_party:auto_value",
+        "//third_party:guava",
+        "//third_party:jsr330_inject",
+    ],
+)
+
+load("//tools:javadoc.bzl", "javadoc_library")
+
+javadoc_library(
+    name = "model-javadoc",
+    srcs = [":model-srcs"],
+    root_packages = ["dagger.model"],
+    deps = [":model"],
+)
diff --git a/java/dagger/internal/codegen/Key.java b/java/dagger/model/Key.java
similarity index 66%
rename from java/dagger/internal/codegen/Key.java
rename to java/dagger/model/Key.java
index 03fe77ef0..cdc9e4514 100644
--- a/java/dagger/internal/codegen/Key.java
+++ b/java/dagger/model/Key.java
@@ -14,33 +14,44 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.model;
 
 import static com.google.common.base.Preconditions.checkNotNull;
-import static dagger.internal.codegen.MoreAnnotationMirrors.unwrapOptionalEquivalence;
-import static dagger.internal.codegen.MoreAnnotationMirrors.wrapOptionalInEquivalence;
 
 import com.google.auto.common.AnnotationMirrors;
 import com.google.auto.common.MoreTypes;
 import com.google.auto.value.AutoValue;
 import com.google.auto.value.extension.memoized.Memoized;
 import com.google.common.base.Equivalence;
+import com.google.common.base.Equivalence.Wrapper;
 import com.google.common.base.Joiner;
 import java.util.Optional;
-import javax.inject.Qualifier;
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.TypeMirror;
 
 /**
- * Represents a unique combination of {@linkplain TypeMirror type} and
- * {@linkplain Qualifier qualifier} to which binding can occur.
- *
- * @author Gregory Kick
+ * A {@linkplain TypeMirror type} and an optional {@linkplain javax.inject.Qualifier qualifier} that
+ * is the lookup key for a binding.
  */
 @AutoValue
-abstract class Key {
+public abstract class Key {
+  /**
+   * A {@link javax.inject.Qualifier} annotation that provides a unique namespace prefix
+   * for the type of this key.
+   */
+  public final Optional<AnnotationMirror> qualifier() {
+    return wrappedQualifier().map(Wrapper::get);
+  }
+
+  /**
+   * The type represented by this key.
+   */
+  public final TypeMirror type() {
+    return wrappedType().get();
+  }
+
   /**
    * A {@link javax.inject.Qualifier} annotation that provides a unique namespace prefix
    * for the type of this key.
@@ -63,30 +74,38 @@
    * Distinguishes keys for multibinding contributions that share a {@link #type()} and {@link
    * #qualifier()}.
    *
-   * <p>Each multibound map and set has a {@linkplain
-   * ProvisionBinding.Factory#syntheticMultibinding(Key, Iterable) synthetic multibinding} that
-   * depends on the specific contributions to that map or set using keys that identify those
-   * multibinding contributions.
+   * <p>Each multibound map and set has a synthetic multibinding that depends on the specific
+   * contributions to that map or set using keys that identify those multibinding contributions.
    *
    * <p>Absent except for multibinding contributions.
    */
-  abstract Optional<MultibindingContributionIdentifier> multibindingContributionIdentifier();
-  
-  abstract Builder toBuilder();
+  public abstract Optional<MultibindingContributionIdentifier> multibindingContributionIdentifier();
+
+  /** Returns a {@link Builder} that inherits the properties of this key. */
+  public abstract Builder toBuilder();
 
   @Memoized
   @Override
   public abstract int hashCode();
 
-  static Builder builder(TypeMirror type) {
+  @Override
+  public final String toString() {
+    return Joiner.on(' ')
+        .skipNulls()
+        .join(qualifier().orElse(null), type(), multibindingContributionIdentifier().orElse(null));
+  }
+
+  /** Returns a builder for {@link Key}s. */
+  public static Builder builder(TypeMirror type) {
     return new AutoValue_Key.Builder().type(type);
   }
 
+  /** A builder for {@link Key}s. */
   @AutoValue.Builder
-  abstract static class Builder {
+  public abstract static class Builder {
     abstract Builder wrappedType(Equivalence.Wrapper<TypeMirror> wrappedType);
 
-    Builder type(TypeMirror type) {
+    public final Builder type(TypeMirror type) {
       return wrappedType(MoreTypes.equivalence().wrap(checkNotNull(type)));
     }
 
@@ -95,37 +114,38 @@ abstract Builder wrappedQualifier(
 
     abstract Builder wrappedQualifier(Equivalence.Wrapper<AnnotationMirror> wrappedQualifier);
 
-    Builder qualifier(AnnotationMirror qualifier) {
+    public final Builder qualifier(AnnotationMirror qualifier) {
       return wrappedQualifier(AnnotationMirrors.equivalence().wrap(checkNotNull(qualifier)));
     }
 
-    Builder qualifier(Optional<AnnotationMirror> qualifier) {
-      return wrappedQualifier(wrapOptionalInEquivalence(checkNotNull(qualifier)));
-    }
-
-    Builder qualifier(TypeElement annotationType) {
-      return qualifier(SimpleAnnotationMirror.of(annotationType));
+    public final Builder qualifier(Optional<AnnotationMirror> qualifier) {
+      return wrappedQualifier(checkNotNull(qualifier).map(AnnotationMirrors.equivalence()::wrap));
     }
 
-    abstract Builder multibindingContributionIdentifier(
+    public abstract Builder multibindingContributionIdentifier(
         Optional<MultibindingContributionIdentifier> identifier);
 
-    abstract Builder multibindingContributionIdentifier(
+    public abstract Builder multibindingContributionIdentifier(
         MultibindingContributionIdentifier identifier);
 
-    abstract Key build();
+    public abstract Key build();
   }
   
   /**
    * An object that identifies a multibinding contribution method and the module class that
    * contributes it to the graph.
    *
-   * @see Key#multibindingContributionIdentifier()
+   * @see #multibindingContributionIdentifier()
    */
-  static final class MultibindingContributionIdentifier {
+  public static final class MultibindingContributionIdentifier {
     private final String identifierString;
 
-    MultibindingContributionIdentifier(
+    /**
+     * @deprecated This is only meant to be called from code in {@code dagger.internal.codegen}.
+     * It is not part of a specified API and may change at any point.
+     */
+    @Deprecated
+    public MultibindingContributionIdentifier(
         ExecutableElement bindingMethod, TypeElement contributingModule) {
       this.identifierString =
           String.format(
@@ -155,40 +175,4 @@ public int hashCode() {
       return identifierString.hashCode();
     }
   }
-
-  /**
-   * A {@link javax.inject.Qualifier} annotation that provides a unique namespace prefix
-   * for the type of this key.
-   */
-  Optional<AnnotationMirror> qualifier() {
-    return unwrapOptionalEquivalence(wrappedQualifier());
-  }
-
-  /**
-   * The type represented by this key.
-   */
-  TypeMirror type() {
-    return wrappedType().get();
-  }
-
-  /**
-   * A key whose {@link #qualifier()} and {@link #type()} are equivalent to this one's, but without
-   * a {@link #multibindingContributionIdentifier()}.
-   */
-  Key withoutMultibindingContributionIdentifier() {
-    return toBuilder().multibindingContributionIdentifier(Optional.empty()).build();
-  }
-
-  /**
-   * {@inheritDoc}
-   *
-   * <p>The returned string is equal to another key's if and only if this key is {@link
-   * #equals(Object)} to it.
-   */
-  @Override
-  public String toString() {
-    return Joiner.on(' ')
-        .skipNulls()
-        .join(qualifier().orElse(null), type(), multibindingContributionIdentifier().orElse(null));
-  }
 }
diff --git a/javatests/dagger/internal/codegen/BUILD b/javatests/dagger/internal/codegen/BUILD
index 005d11044..ed1de0917 100644
--- a/javatests/dagger/internal/codegen/BUILD
+++ b/javatests/dagger/internal/codegen/BUILD
@@ -32,6 +32,7 @@ GenJavaTests(
         "//java/dagger/internal/codegen:processor",
         "//java/dagger/internal/codegen:validation",
         "//java/dagger/internal/codegen:writing",
+        "//java/dagger/model",
         "//java/dagger/producers",
         "//third_party:auto_common",
         "//third_party:auto_value",
diff --git a/javatests/dagger/internal/codegen/KeyTest.java b/javatests/dagger/internal/codegen/KeyFactoryTest.java
similarity index 93%
rename from javatests/dagger/internal/codegen/KeyTest.java
rename to javatests/dagger/internal/codegen/KeyFactoryTest.java
index 42e6fd66c..4bf8b4498 100644
--- a/javatests/dagger/internal/codegen/KeyTest.java
+++ b/javatests/dagger/internal/codegen/KeyFactoryTest.java
@@ -24,7 +24,8 @@
 import com.google.testing.compile.CompilationRule;
 import dagger.Module;
 import dagger.Provides;
-import dagger.internal.codegen.Key.MultibindingContributionIdentifier;
+import dagger.model.Key;
+import dagger.model.Key.MultibindingContributionIdentifier;
 import dagger.multibindings.ElementsIntoSet;
 import dagger.multibindings.IntoSet;
 import dagger.producers.ProducerModule;
@@ -50,7 +51,7 @@
  * Tests {@link Key}.
  */
 @RunWith(JUnit4.class)
-public class KeyTest {
+public class KeyFactoryTest {
   @Rule public CompilationRule compilationRule = new CompilationRule();
 
   private Elements elements;
@@ -71,7 +72,7 @@
     Key key =
         keyFactory.forInjectConstructorWithResolvedType(constructor.getEnclosingElement().asType());
     assertThat(key).isEqualTo(Key.builder(typeElement.asType()).build());
-    assertThat(key.toString()).isEqualTo("dagger.internal.codegen.KeyTest.InjectedClass");
+    assertThat(key.toString()).isEqualTo("dagger.internal.codegen.KeyFactoryTest.InjectedClass");
   }
 
   static final class InjectedClass {
@@ -108,11 +109,12 @@
     Key key = keyFactory.forProvidesMethod(providesMethod, moduleElement);
     assertThat(MoreTypes.equivalence().wrap(key.qualifier().get().getAnnotationType()))
         .isEqualTo(MoreTypes.equivalence().wrap(qualifierElement.asType()));
-    assertThat(key.wrappedType()).isEqualTo(MoreTypes.equivalence().wrap(stringType));
+    assertThat(MoreTypes.equivalence().wrap(key.type()))
+        .isEqualTo(MoreTypes.equivalence().wrap(stringType));
     assertThat(key.toString())
         .isEqualTo(
-            "@dagger.internal.codegen.KeyTest.TestQualifier("
-                + "{@dagger.internal.codegen.KeyTest.InnerAnnotation}) java.lang.String");
+            "@dagger.internal.codegen.KeyFactoryTest.TestQualifier("
+                + "{@dagger.internal.codegen.KeyFactoryTest.InnerAnnotation}) java.lang.String");
   }
 
   @Test public void qualifiedKeyEquivalents() {
@@ -133,8 +135,8 @@
     assertThat(provisionKey).isEqualTo(injectionKey);
     assertThat(injectionKey.toString())
         .isEqualTo(
-            "@dagger.internal.codegen.KeyTest.TestQualifier("
-                + "{@dagger.internal.codegen.KeyTest.InnerAnnotation}) java.lang.String");
+            "@dagger.internal.codegen.KeyFactoryTest.TestQualifier("
+                + "{@dagger.internal.codegen.KeyFactoryTest.InnerAnnotation}) java.lang.String");
   }
 
   @Module
@@ -176,7 +178,7 @@ String provideQualifiedString() {
           .isEqualTo(
               String.format(
                   "java.util.Set<java.lang.String> "
-                      + "dagger.internal.codegen.KeyTest.SetProvidesMethodsModule#%s",
+                      + "dagger.internal.codegen.KeyFactoryTest.SetProvidesMethodsModule#%s",
                   providesMethod.getSimpleName()));
     }
   }
@@ -270,7 +272,7 @@ String provideQualifiedString() {
           .isEqualTo(
               String.format(
                   "java.util.Set<java.lang.String> "
-                      + "dagger.internal.codegen.KeyTest.SetProducesMethodsModule#%s",
+                      + "dagger.internal.codegen.KeyFactoryTest.SetProducesMethodsModule#%s",
                   producesMethod.getSimpleName()));
     }
   }
diff --git a/util/execute-deploy.sh b/util/execute-deploy.sh
index ad25d1aef..c9bc8b93e 100755
--- a/util/execute-deploy.sh
+++ b/util/execute-deploy.sh
@@ -12,6 +12,7 @@ python $(dirname $0)/maven/generate_poms.py $VERSION_NAME \
   //gwt:gwt \
   //java/dagger/internal/codegen:processor \
   //java/dagger/producers:producers \
+  //java/dagger/model:model \
   //java/dagger/android:android \
   //java/dagger/android:libandroid.jar \
   //java/dagger/android/support:libsupport.jar \
@@ -73,6 +74,12 @@ deploy_library \
   java/dagger/producers/producers-javadoc.jar \
   dagger-producers.pom.xml
 
+deploy_library \
+  java/dagger/model/libmodel.jar \
+  java/dagger/model/libmodel-src.jar \
+  java/dagger/model/model-javadoc.jar \
+  dagger-spi.pom.xml
+
 deploy_library \
   java/dagger/android/android.aar \
   java/dagger/android/libandroid-src.jar \
diff --git a/util/maven/generate_poms.py b/util/maven/generate_poms.py
index 010e0e19a..8b448bece 100644
--- a/util/maven/generate_poms.py
+++ b/util/maven/generate_poms.py
@@ -73,6 +73,10 @@ def pom_deps(label):
         'name': 'Dagger Producers',
         'artifact': 'dagger-producers',
     },
+    '//java/dagger/model:model': {
+        'name': 'Dagger SPI',
+        'artifact': 'dagger-spi',
+    },
     '//java/dagger/android:android': {
         'name': 'Dagger Android',
         'artifact': 'dagger-android',
