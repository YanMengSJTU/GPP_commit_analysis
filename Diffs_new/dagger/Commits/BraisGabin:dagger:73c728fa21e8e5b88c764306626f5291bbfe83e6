diff --git a/BUILD b/BUILD
index 02e575aa6..c9f10e92d 100644
--- a/BUILD
+++ b/BUILD
@@ -65,6 +65,7 @@ jarjar_library(
         "//java/dagger/internal/codegen:writing",
         "//java/dagger/internal/codegen/javapoet",
         "//java/dagger/internal/codegen/langmodel",
+        "//java/dagger/internal/codegen/statistics",
         "//java/dagger/model:internal-proxies",
         "//java/dagger/errorprone",
         "@com_google_auto_auto_common//jar",
@@ -84,6 +85,7 @@ jarjar_library(
         "//java/dagger/internal/codegen:libwriting-src.jar",
         "//java/dagger/internal/codegen/javapoet:libjavapoet-src.jar",
         "//java/dagger/internal/codegen/langmodel:liblangmodel-src.jar",
+        "//java/dagger/internal/codegen/statistics:libstatistics-src.jar",
         # TODO(ronshapiro): is there a generated src.jar for protos in Bazel?
         "//java/dagger/errorprone:liberrorprone-src.jar",
     ],
diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index 53ece68e6..e9a41d6c2 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -86,10 +86,6 @@ java_library(
         "CompilerOptions.java",
         "ComponentAnnotation.java",
         "ContributionType.java",
-        "DaggerStatistics.java",
-        "DaggerStatisticsCollectingProcessingStep.java",
-        "DaggerStatisticsCollector.java",
-        "DaggerStatisticsRecorder.java",
         "DiagnosticFormatting.java",
         "ElementFormatter.java",
         "FeatureStatus.java",
@@ -338,6 +334,7 @@ java_library(
         ":binding",
         "//java/dagger/internal/codegen/javapoet",
         "//java/dagger/internal/codegen/langmodel",
+        "//java/dagger/internal/codegen/statistics",
     ],
 )
 
@@ -377,6 +374,7 @@ java_library(
         ":validation",
         "//java/dagger/internal/codegen/javapoet",
         "//java/dagger/internal/codegen/langmodel",
+        "//java/dagger/internal/codegen/statistics",
         "@google_bazel_common//third_party/java/incap",
     ],
 )
@@ -463,6 +461,7 @@ java_library(
     deps = CODEGEN_DEPS + [
         "//java/dagger/internal/codegen/langmodel",
         "//java/dagger/internal/codegen/javapoet",
+        "//java/dagger/internal/codegen/statistics",
         "@google_bazel_common//third_party/java/incap",
     ],
 )
diff --git a/java/dagger/internal/codegen/ComponentProcessor.java b/java/dagger/internal/codegen/ComponentProcessor.java
index e73f69e52..0d32cbf76 100644
--- a/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/java/dagger/internal/codegen/ComponentProcessor.java
@@ -32,6 +32,8 @@
 import dagger.Module;
 import dagger.Provides;
 import dagger.internal.codegen.SpiModule.TestingPlugins;
+import dagger.internal.codegen.statistics.DaggerStatisticsCollectingProcessingStep;
+import dagger.internal.codegen.statistics.DaggerStatisticsCollector;
 import dagger.spi.BindingGraphPlugin;
 import java.util.Arrays;
 import java.util.Optional;
diff --git a/java/dagger/internal/codegen/FactoryGenerator.java b/java/dagger/internal/codegen/FactoryGenerator.java
index 31fe2007a..543540a9f 100644
--- a/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/java/dagger/internal/codegen/FactoryGenerator.java
@@ -59,6 +59,7 @@
 import dagger.internal.codegen.javapoet.CodeBlocks;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
+import dagger.internal.codegen.statistics.DaggerStatisticsCollector;
 import dagger.model.Key;
 import java.util.List;
 import java.util.Optional;
diff --git a/java/dagger/internal/codegen/MembersInjectorGenerator.java b/java/dagger/internal/codegen/MembersInjectorGenerator.java
index 4ad709011..952e1c74a 100644
--- a/java/dagger/internal/codegen/MembersInjectorGenerator.java
+++ b/java/dagger/internal/codegen/MembersInjectorGenerator.java
@@ -52,6 +52,7 @@
 import dagger.internal.codegen.MembersInjectionBinding.InjectionSite;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
+import dagger.internal.codegen.statistics.DaggerStatisticsCollector;
 import dagger.model.Key;
 import java.util.Map.Entry;
 import java.util.Optional;
diff --git a/java/dagger/internal/codegen/ProcessingEnvironmentModule.java b/java/dagger/internal/codegen/ProcessingEnvironmentModule.java
index 173057438..1c40eddbe 100644
--- a/java/dagger/internal/codegen/ProcessingEnvironmentModule.java
+++ b/java/dagger/internal/codegen/ProcessingEnvironmentModule.java
@@ -23,6 +23,7 @@
 import dagger.Provides;
 import dagger.Reusable;
 import dagger.internal.codegen.langmodel.DaggerElements;
+import dagger.internal.codegen.statistics.DaggerStatisticsRecorder;
 import java.util.Map;
 import java.util.Optional;
 import javax.annotation.processing.Filer;
diff --git a/java/dagger/internal/codegen/statistics/BUILD b/java/dagger/internal/codegen/statistics/BUILD
new file mode 100644
index 000000000..cf09aad3b
--- /dev/null
+++ b/java/dagger/internal/codegen/statistics/BUILD
@@ -0,0 +1,38 @@
+# Copyright (C) 2017 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Description:
+#   Dagger-specific extensions for statistics.
+
+package(default_visibility = ["//:src"])
+
+java_library(
+    name = "statistics",
+    srcs = [
+        "DaggerStatistics.java",
+        "DaggerStatisticsCollectingProcessingStep.java",
+        "DaggerStatisticsCollector.java",
+        "DaggerStatisticsRecorder.java",
+    ],
+    plugins = ["//java/dagger/internal/codegen/bootstrap"],
+    tags = ["maven:merged"],
+    deps = [
+        "//java/dagger:core",
+        "@google_bazel_common//third_party/java/auto:common",
+        "@google_bazel_common//third_party/java/auto:value",
+        "@google_bazel_common//third_party/java/error_prone:annotations",
+        "@google_bazel_common//third_party/java/guava",
+        "@google_bazel_common//third_party/java/jsr330_inject",
+    ],
+)
diff --git a/java/dagger/internal/codegen/DaggerStatistics.java b/java/dagger/internal/codegen/statistics/DaggerStatistics.java
similarity index 89%
rename from java/dagger/internal/codegen/DaggerStatistics.java
rename to java/dagger/internal/codegen/statistics/DaggerStatistics.java
index 5a2f0efea..b7f9feed3 100644
--- a/java/dagger/internal/codegen/DaggerStatistics.java
+++ b/java/dagger/internal/codegen/statistics/DaggerStatistics.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.statistics;
 
 import com.google.auto.common.BasicAnnotationProcessor.ProcessingStep;
 import com.google.auto.value.AutoValue;
@@ -26,7 +26,7 @@
 
 /** Statistics collected over the course of Dagger annotation processing. */
 @AutoValue
-abstract class DaggerStatistics {
+public abstract class DaggerStatistics {
   /** Returns a new {@link Builder}. */
   static Builder builder() {
     return new AutoValue_DaggerStatistics.Builder();
@@ -38,16 +38,16 @@ static Builder builder() {
   }
 
   /** Total time spent in Dagger annotation processing. */
-  abstract Duration totalProcessingTime();
+  public abstract Duration totalProcessingTime();
 
   /** List of statistics for processing rounds that the Dagger processor handled. */
-  abstract ImmutableList<RoundStatistics> rounds();
+  public abstract ImmutableList<RoundStatistics> rounds();
 
   /** Records the number of {@code @Inject} constructor factories generated in this compilation. */
-  abstract int injectFactoriesGenerated();
+  public abstract int injectFactoriesGenerated();
 
   /** Records the number of {@link dagger.MembersInjector}s generated in this compilation. */
-  abstract int membersInjectorsGenerated();
+  public abstract int membersInjectorsGenerated();
 
   /** Builder for {@link DaggerStatistics}. */
   @AutoValue.Builder
@@ -79,9 +79,9 @@ final Builder addRound(RoundStatistics round) {
 
   /** Statistics for each processing step in a single processing round. */
   @AutoValue
-  abstract static class RoundStatistics {
+  public abstract static class RoundStatistics {
     /** Map of processing step class to duration of that step for this round. */
-    abstract ImmutableMap<Class<? extends ProcessingStep>, Duration> stepDurations();
+    public abstract ImmutableMap<Class<? extends ProcessingStep>, Duration> stepDurations();
 
     /** Builder for {@link RoundStatistics}. */
     @AutoValue.Builder
diff --git a/java/dagger/internal/codegen/DaggerStatisticsCollectingProcessingStep.java b/java/dagger/internal/codegen/statistics/DaggerStatisticsCollectingProcessingStep.java
similarity index 90%
rename from java/dagger/internal/codegen/DaggerStatisticsCollectingProcessingStep.java
rename to java/dagger/internal/codegen/statistics/DaggerStatisticsCollectingProcessingStep.java
index 51f6fc3b0..7aa37c44b 100644
--- a/java/dagger/internal/codegen/DaggerStatisticsCollectingProcessingStep.java
+++ b/java/dagger/internal/codegen/statistics/DaggerStatisticsCollectingProcessingStep.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.statistics;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
@@ -28,12 +28,12 @@
  * {@link ProcessingStep} that delegates to another {@code ProcessingStep} and collects timing
  * statistics for each processing round for that step.
  */
-final class DaggerStatisticsCollectingProcessingStep implements ProcessingStep {
+public final class DaggerStatisticsCollectingProcessingStep implements ProcessingStep {
 
   private final ProcessingStep delegate;
   private final DaggerStatisticsCollector statisticsCollector;
 
-  DaggerStatisticsCollectingProcessingStep(
+  public DaggerStatisticsCollectingProcessingStep(
       ProcessingStep delegate, DaggerStatisticsCollector statisticsCollector) {
     this.delegate = checkNotNull(delegate);
     this.statisticsCollector = checkNotNull(statisticsCollector);
diff --git a/java/dagger/internal/codegen/DaggerStatisticsCollector.java b/java/dagger/internal/codegen/statistics/DaggerStatisticsCollector.java
similarity index 92%
rename from java/dagger/internal/codegen/DaggerStatisticsCollector.java
rename to java/dagger/internal/codegen/statistics/DaggerStatisticsCollector.java
index 52eb12b86..282f7c7cd 100644
--- a/java/dagger/internal/codegen/DaggerStatisticsCollector.java
+++ b/java/dagger/internal/codegen/statistics/DaggerStatisticsCollector.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.statistics;
 
 import static com.google.common.base.Preconditions.checkState;
 import static java.util.concurrent.TimeUnit.NANOSECONDS;
@@ -31,7 +31,7 @@
 
 /** Collects {@link DaggerStatistics} over the course of Dagger annotation processing. */
 @Singleton // for state sharing
-final class DaggerStatisticsCollector {
+public final class DaggerStatisticsCollector {
 
   private final Ticker ticker;
   private final Stopwatch totalRuntimeStopwatch;
@@ -52,7 +52,7 @@
   }
 
   /** Called when Dagger annotation processing starts. */
-  void processingStarted() {
+  public void processingStarted() {
     checkState(!totalRuntimeStopwatch.isRunning());
     totalRuntimeStopwatch.start();
   }
@@ -72,13 +72,13 @@ void stepFinished(ProcessingStep step) {
   }
 
   /** Called when Dagger finishes a processing round. */
-  void roundFinished() {
+  public void roundFinished() {
     statisticsBuilder.addRound(roundBuilder.build());
     roundBuilder = DaggerStatistics.roundBuilder();
   }
 
   /** Called when Dagger annotation processing completes. */
-  void processingStopped() {
+  public void processingStopped() {
     checkState(totalRuntimeStopwatch.isRunning());
     totalRuntimeStopwatch.stop();
     statisticsBuilder
@@ -90,11 +90,11 @@ void processingStopped() {
         recorder -> recorder.recordStatistics(statisticsBuilder.build()));
   }
 
-  void recordInjectFactoryGenerated() {
+  public void recordInjectFactoryGenerated() {
     injectFactoriesGenerated++;
   }
 
-  void recordMembersInjectorGenerated() {
+  public void recordMembersInjectorGenerated() {
     membersInjectorsGenerated++;
   }
 
diff --git a/java/dagger/internal/codegen/DaggerStatisticsRecorder.java b/java/dagger/internal/codegen/statistics/DaggerStatisticsRecorder.java
similarity index 89%
rename from java/dagger/internal/codegen/DaggerStatisticsRecorder.java
rename to java/dagger/internal/codegen/statistics/DaggerStatisticsRecorder.java
index 66f41d110..f607822c3 100644
--- a/java/dagger/internal/codegen/DaggerStatisticsRecorder.java
+++ b/java/dagger/internal/codegen/statistics/DaggerStatisticsRecorder.java
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.statistics;
 
 /** Records collected {@link DaggerStatistics}. */
-interface DaggerStatisticsRecorder {
+public interface DaggerStatisticsRecorder {
   /** Records the given {@code statistics}. */
   void recordStatistics(DaggerStatistics statistics);
 }
