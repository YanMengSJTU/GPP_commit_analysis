diff --git a/core/src/main/java/dagger/internal/BindingsGroup.java b/core/src/main/java/dagger/internal/BindingsGroup.java
index d2052162f..4b5d978d4 100644
--- a/core/src/main/java/dagger/internal/BindingsGroup.java
+++ b/core/src/main/java/dagger/internal/BindingsGroup.java
@@ -30,7 +30,7 @@
 
   public abstract Binding<?> contributeSetBinding(String key, SetBinding<?> value);
   
-  public abstract Binding<?> contributeMapBinding(String key, MapBinding<?> value);
+  public abstract Binding<?> contributeMapBinding(String key, MapBinding<?, ?> value);
 
   public Binding<?> contributeProvidesBinding(String key, ProvidesBinding<?> value) {
     return put(key, value);
diff --git a/core/src/main/java/dagger/internal/MapBinding.java b/core/src/main/java/dagger/internal/MapBinding.java
index a4427a6db..d19e24607 100644
--- a/core/src/main/java/dagger/internal/MapBinding.java
+++ b/core/src/main/java/dagger/internal/MapBinding.java
@@ -18,38 +18,42 @@
 
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Map.Entry;
 import java.util.Set;
 
 /**
  * A {@code Binding<T>} which contains contributors (other bindings marked with
  * {@code @Provides} {@code @OneOf}), to which it delegates provision
  * requests on an as-needed basis.
+ * @param <V>
+ * @param <K>
  */
-public final class MapBinding<T> extends Binding<Set<T>> {
+public final class MapBinding<K, V> extends Binding<Map<K, V>> {
 
-  public static <T> void add(BindingsGroup bindings, String setKey, Binding<?> binding) {
+  public static <K, V> void add(BindingsGroup bindings, String setKey, Binding<?> binding) {
     prepareMapBinding(bindings, setKey, binding).contributors.add(Linker.scope(binding));
   }
 
   @SuppressWarnings("unchecked")
-  private static <T> MapBinding<T> prepareMapBinding(
+  private static <K, V> MapBinding<K, V> prepareMapBinding(
       BindingsGroup bindings, String setKey, Binding<?> binding) {
     Binding<?> previous = bindings.get(setKey);
-    MapBinding<T> MapBinding;
+    MapBinding<K, V> MapBinding;
     if (previous instanceof MapBinding) {
-      MapBinding = (MapBinding<T>) previous;
+      MapBinding = (MapBinding<K, V>) previous;
       MapBinding.setLibrary(MapBinding.library() && binding.library());
       return MapBinding;
     } else if (previous != null) {
       throw new IllegalArgumentException("Duplicate:\n    " + previous + "\n    " + binding);
     } else {
-      MapBinding = new MapBinding<T>(setKey, binding.requiredBy);
+      MapBinding = new MapBinding<K, V>(setKey, binding.requiredBy);
       MapBinding.setLibrary(binding.library());
       bindings.contributeMapBinding(setKey, MapBinding);
-      return (MapBinding<T>) bindings.get(setKey); // BindingMap.put() copies MapBindings.
+      return (MapBinding<K, V>) bindings.get(setKey); // BindingMap.put() copies MapBindings.
     }
   }
 
@@ -57,7 +61,7 @@
    * A {@link MapBinding} with whose contributing bindings this set-binding provides a union
    * view.
    */
-  private final MapBinding<T> parent;
+  private final MapBinding<K, V> parent;
 
   /**
    * A {@link Set} of {@link Binding} instances which contribute values to the injected set.
@@ -78,7 +82,7 @@ public MapBinding(String key, Object requiredBy) {
    * Creates a new {@code MapBinding} with all of the contributing bindings of the provided
    * original {@code MapBinding}.
    */
-  public MapBinding(MapBinding<T> original) {
+  public MapBinding(MapBinding<K, V> original) {
     super(original.provideKey, null, false, original.requiredBy);
     parent = original;
     this.setLibrary(original.library());
@@ -94,23 +98,23 @@ public MapBinding(MapBinding<T> original) {
 
   public int size() {
     int size = 0;
-    for (MapBinding<T> binding = this; binding != null; binding = binding.parent) {
+    for (MapBinding<K, V> binding = this; binding != null; binding = binding.parent) {
       size += binding.contributors.size();
     }
     return size;
   }
 
   @SuppressWarnings("unchecked") // Only Binding<T> and Set<T> are added to contributors.
-  @Override public Set<T> get() {
-    List<T> result = new ArrayList<T>();
-    for (MapBinding<T> MapBinding = this; MapBinding != null; MapBinding = MapBinding.parent) {
+  @Override public Map<K, V> get() {
+    Map<K, V> result = new HashMap<K, V>();
+    for (MapBinding<K, V> MapBinding = this; MapBinding != null; MapBinding = MapBinding.parent) {
       for (int i = 0, size = MapBinding.contributors.size(); i < size; i++) {
         Binding<?> contributor = MapBinding.contributors.get(i);
         Object contribution = contributor.get(); // Let runtime exceptions through.
-        if (contributor.provideKey.equals(provideKey)) {
-          result.addAll((Set<T>) contribution);
+        if (contributor.provideKey.equals(provideKey)) {        //?????? 
+          result.addAll((Map<K, V>) contribution);
         } else {
-          result.add((T) contribution);
+          result.add((Entry<K, V>) contribution);
         }
       }
     }
