diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index 45597b0f4..b661e96c9 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -232,11 +232,11 @@ java_library(
         "ComponentGenerator.java",
         "ComponentInstanceBindingExpression.java",
         "ComponentMethodBindingExpression.java",
+        "ComponentModelBuilder.java",
         "ComponentProvisionBindingExpression.java",
         "ComponentRequirementBindingExpression.java",
         "ComponentRequirementField.java",
         "ComponentRequirementFields.java",
-        "ComponentWriter.java",
         "DelegateBindingExpression.java",
         "DelegatingFrameworkInstanceCreationExpression.java",
         "DependencyMethodProducerCreationExpression.java",
diff --git a/java/dagger/internal/codegen/ComponentGenerator.java b/java/dagger/internal/codegen/ComponentGenerator.java
index 1b8086dfe..4420d6332 100644
--- a/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/java/dagger/internal/codegen/ComponentGenerator.java
@@ -70,7 +70,8 @@ static ClassName componentName(TypeElement componentDefinitionType) {
   @Override
   Optional<TypeSpec.Builder> write(ClassName componentName, BindingGraph input) {
     return Optional.of(
-        ComponentWriter.writeComponent(
-            types, elements, keyFactory, compilerOptions, componentName, input));
+        ComponentModelBuilder.buildComponentModel(
+                types, elements, keyFactory, compilerOptions, componentName, input)
+            .generate());
   }
 }
diff --git a/java/dagger/internal/codegen/ComponentHjarProcessingStep.java b/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
index fbbd0718a..3e08b80a9 100644
--- a/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
+++ b/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
@@ -72,7 +72,7 @@
  * compilation succeeded.
  *
  * <p>The components emitted by this processing step include all of the API elements exposed by the
- * normal {@link ComponentWriter}. Method bodies are omitted as Turbine ignores them entirely.
+ * normal step. Method bodies are omitted as Turbine ignores them entirely.
  */
 final class ComponentHjarProcessingStep implements ProcessingStep {
   private final Elements elements;
@@ -188,7 +188,7 @@ ClassName nameGeneratedType(ComponentDescriptor input) {
       }
 
       DeclaredType componentType = MoreTypes.asDeclared(componentElement.asType());
-      // TODO(ronshapiro): unify with AbstractComponentWriter
+      // TODO(ronshapiro): unify with ComponentModelBuilder
       Set<MethodSignature> methodSignatures =
           Sets.newHashSetWithExpectedSize(componentDescriptor.componentMethods().size());
       componentDescriptor
diff --git a/java/dagger/internal/codegen/ComponentWriter.java b/java/dagger/internal/codegen/ComponentModelBuilder.java
similarity index 89%
rename from java/dagger/internal/codegen/ComponentWriter.java
rename to java/dagger/internal/codegen/ComponentModelBuilder.java
index dbeea6565..237c3bfa1 100644
--- a/java/dagger/internal/codegen/ComponentWriter.java
+++ b/java/dagger/internal/codegen/ComponentModelBuilder.java
@@ -53,9 +53,9 @@
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.util.Elements;
 
-/** Creates the implementation class for a component or subcomponent. */
-abstract class ComponentWriter {
-  static TypeSpec.Builder writeComponent(
+/** Builds the model for an implementation of a component or subcomponent. */
+abstract class ComponentModelBuilder {
+  static GeneratedComponentModel buildComponentModel(
       DaggerTypes types,
       DaggerElements elements,
       KeyFactory keyFactory,
@@ -79,7 +79,7 @@
             types,
             elements,
             compilerOptions);
-    return new RootComponentWriter(
+    return new RootComponentModelBuilder(
             types,
             elements,
             graph,
@@ -89,33 +89,30 @@
             bindingExpressions,
             componentRequirementFields,
             builder)
-        .write();
+        .build();
   }
 
-  private static TypeSpec writeSubcomponent(ComponentWriter parent, BindingGraph childGraph) {
-    ClassName parentName = parent.generatedComponentModel.name();
+  private GeneratedComponentModel buildSubcomponentModel(BindingGraph childGraph) {
+    ClassName parentName = generatedComponentModel.name();
     ClassName childName =
-        parentName.nestedClass(
-            parent.subcomponentNames.get(childGraph.componentDescriptor()) + "Impl");
+        parentName.nestedClass(subcomponentNames.get(childGraph.componentDescriptor()) + "Impl");
     GeneratedComponentModel childGeneratedComponentModel =
         GeneratedComponentModel.forSubcomponent(childName);
     Optional<ComponentBuilder> childBuilder =
-        ComponentBuilder.create(
-            childName, childGraph, parent.subcomponentNames, parent.elements, parent.types);
+        ComponentBuilder.create(childName, childGraph, subcomponentNames, elements, types);
     ComponentRequirementFields childComponentRequirementFields =
-        parent.componentRequirementFields.forChildComponent(
+        componentRequirementFields.forChildComponent(
             childGraph, childGeneratedComponentModel, childBuilder);
     ComponentBindingExpressions childBindingExpressions =
-        parent.bindingExpressions.forChildComponent(
+        bindingExpressions.forChildComponent(
             childGraph, childGeneratedComponentModel, childComponentRequirementFields);
-    return new SubcomponentWriter(
-            parent,
+    return new SubComponentModelBuilder(
+            this,
             childGraph,
             childGeneratedComponentModel,
             childBindingExpressions,
             childComponentRequirementFields,
             childBuilder)
-        .write()
         .build();
   }
 
@@ -130,7 +127,7 @@ private static TypeSpec writeSubcomponent(ComponentWriter parent, BindingGraph c
   private final Optional<ComponentBuilder> builder;
   private boolean done;
 
-  private ComponentWriter(
+  private ComponentModelBuilder(
       DaggerTypes types,
       Elements elements,
       BindingGraph graph,
@@ -152,12 +149,15 @@ private ComponentWriter(
   }
 
   /**
-   * Constructs a {@link TypeSpec.Builder} that models the {@link BindingGraph} for this component.
-   * This is only intended to be called once (and will throw on successive invocations). If the
-   * component must be regenerated, use a new instance.
+   * Returns a {@link GeneratedComponentModel} for this component. This is only intended to be
+   * called once (and will throw on successive invocations). If the component must be regenerated,
+   * use a new instance.
    */
-  protected final TypeSpec.Builder write() {
-    checkState(!done, "ComponentWriter has already been generated.");
+  protected final GeneratedComponentModel build() {
+    checkState(
+        !done,
+        "ComponentModelBuilder has already built the GeneratedComponentModel for [%s].",
+        generatedComponentModel.name());
     generatedComponentModel.addSupertype(graph.componentType());
     builder.map(ComponentBuilder::typeSpec).ifPresent(this::addBuilderClass);
 
@@ -171,7 +171,7 @@ private ComponentWriter(
     addConstructor();
 
     done = true;
-    return generatedComponentModel.generate();
+    return generatedComponentModel;
   }
 
   /**
@@ -203,7 +203,7 @@ private MethodSignature getMethodSignature(ComponentMethodDescriptor method) {
 
   private void addSubcomponents() {
     for (BindingGraph subgraph : graph.subgraphs()) {
-      generatedComponentModel.addType(SUBCOMPONENT, writeSubcomponent(this, subgraph));
+      generatedComponentModel.addSubcomponent(buildSubcomponentModel(subgraph));
     }
   }
 
@@ -264,11 +264,9 @@ private void addConstructor() {
     }
   }
 
-  /**
-   * Creates the implementation class for the root component.
-   */
-  private static final class RootComponentWriter extends ComponentWriter {
-    RootComponentWriter(
+  /** Builds the model for the root component. */
+  private static final class RootComponentModelBuilder extends ComponentModelBuilder {
+    RootComponentModelBuilder(
         DaggerTypes types,
         Elements elements,
         BindingGraph graph,
@@ -334,14 +332,12 @@ private boolean canInstantiateAllRequirements() {
     }
   }
 
-  /**
-   * Creates the nested implementation class for a subcomponent.
-   */
-  private static final class SubcomponentWriter extends ComponentWriter {
-    private final ComponentWriter parent;
+  /** Builds the model for a nested subcomponent. */
+  private static final class SubComponentModelBuilder extends ComponentModelBuilder {
+    private final ComponentModelBuilder parent;
 
-    SubcomponentWriter(
-        ComponentWriter parent,
+    SubComponentModelBuilder(
+        ComponentModelBuilder parent,
         BindingGraph graph,
         GeneratedComponentModel generatedComponentModel,
         ComponentBindingExpressions bindingExpressions,
diff --git a/java/dagger/internal/codegen/GeneratedComponentModel.java b/java/dagger/internal/codegen/GeneratedComponentModel.java
index 636b5a181..3476160e1 100644
--- a/java/dagger/internal/codegen/GeneratedComponentModel.java
+++ b/java/dagger/internal/codegen/GeneratedComponentModel.java
@@ -179,6 +179,11 @@ void addTypes(TypeSpecKind typeKind, Iterable<TypeSpec> typeSpecs) {
     typeSpecsMap.putAll(typeKind, typeSpecs);
   }
 
+  void addSubcomponent(GeneratedComponentModel subcomponentModel) {
+    // TODO(user): Hold a reference to each subcomponent model.
+    addType(TypeSpecKind.SUBCOMPONENT, subcomponentModel.generate().build());
+  }
+
   /** Adds a {@link Supplier} for the SwitchingProvider for the component. */
   void addSwitchingProvider(Supplier<TypeSpec> typeSpecSupplier) {
     switchingProviderSupplier.add(typeSpecSupplier);
