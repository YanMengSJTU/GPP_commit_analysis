diff --git a/java/dagger/internal/codegen/ProductionExecutorModuleGenerator.java b/java/dagger/internal/codegen/ProductionExecutorModuleGenerator.java
index f9f8e69a6..5368cd24f 100644
--- a/java/dagger/internal/codegen/ProductionExecutorModuleGenerator.java
+++ b/java/dagger/internal/codegen/ProductionExecutorModuleGenerator.java
@@ -17,15 +17,16 @@
 package dagger.internal.codegen;
 
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
-import static com.squareup.javapoet.TypeSpec.interfaceBuilder;
-import static javax.lang.model.element.Modifier.ABSTRACT;
-import static javax.lang.model.element.Modifier.PUBLIC;
+import static com.squareup.javapoet.TypeSpec.classBuilder;
+import static javax.lang.model.element.Modifier.FINAL;
+import static javax.lang.model.element.Modifier.STATIC;
 
+import com.squareup.javapoet.AnnotationSpec;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.ParameterSpec;
 import com.squareup.javapoet.TypeSpec;
-import dagger.Binds;
 import dagger.Module;
+import dagger.Provides;
 import dagger.producers.Production;
 import dagger.producers.ProductionScope;
 import dagger.producers.internal.ProductionImplementation;
@@ -57,19 +58,23 @@ ClassName nameGeneratedType(TypeElement componentElement) {
   @Override
   Optional<TypeSpec.Builder> write(ClassName generatedTypeName, TypeElement componentElement) {
     return Optional.of(
-        interfaceBuilder(generatedTypeName)
-            .addAnnotation(Module.class)
+        classBuilder(generatedTypeName)
+            .addAnnotation(
+                AnnotationSpec.builder(Module.class)
+                    .build())
+            .addModifiers(FINAL)
             .addMethod(
                 methodBuilder("executor")
                     .returns(Executor.class)
-                    .addAnnotation(Binds.class)
-                    .addModifiers(PUBLIC, ABSTRACT)
+                    .addModifiers(STATIC)
+                    .addAnnotation(Provides.class)
                     .addAnnotation(ProductionScope.class)
                     .addAnnotation(ProductionImplementation.class)
                     .addParameter(
                         ParameterSpec.builder(Executor.class, "executor")
                             .addAnnotation(Production.class)
                             .build())
+                    .addStatement("return executor")
                     .build()));
   }
 }
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
index 0631bdf66..0b10fa4b8 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
@@ -454,6 +454,7 @@ public void productionComponents() {
             "import com.google.common.collect.ImmutableMap;",
             "import com.google.common.util.concurrent.Futures;",
             "import com.google.common.util.concurrent.ListenableFuture;",
+            "import dagger.internal.Preconditions;",
             "import java.util.Map;",
             "import javax.annotation.Generated;",
             "",
@@ -481,6 +482,14 @@ public void productionComponents() {
             "    public TestComponent build() {",
             "      return new DaggerTestComponent(this);",
             "    }",
+            "",
+            "    @Deprecated",
+            "    public Builder testComponent_ProductionExecutorModule(",
+            "        TestComponent_ProductionExecutorModule",
+            "            testComponent_ProductionExecutorModule) {",
+            "      Preconditions.checkNotNull(testComponent_ProductionExecutorModule);",
+            "      return this;",
+            "    }",
             "  }",
             "}");
     Compilation compilation =
diff --git a/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
index 2e135895a..fe75207cf 100644
--- a/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
@@ -255,6 +255,14 @@ public void requestForFuture() {
             "    public TestComponent build() {",
             "      return new DaggerTestComponent(this);",
             "    }",
+            "",
+            "    @Deprecated",
+            "    public Builder testComponent_ProductionExecutorModule(",
+            "        TestComponent_ProductionExecutorModule",
+            "            testComponent_ProductionExecutorModule) {",
+            "      Preconditions.checkNotNull(testComponent_ProductionExecutorModule);",
+            "      return this;",
+            "    }",
             "  }",
             "}");
     Compilation compilation =
diff --git a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
index 1dc3b23d3..0ff883892 100644
--- a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -242,7 +242,10 @@ public void simpleComponent() {
             "  private void initialize(final Builder builder) {",
             "    this.executorProvider =",
             "        TestClass_BModule_ExecutorFactory.create(builder.bModule);",
-            "     this.executorProvider2 = DoubleCheck.provider((Provider) executorProvider);",
+            "     this.executorProvider2 =",
+            "         DoubleCheck.provider(",
+            "             TestClass_SimpleComponent_ProductionExecutorModule_ExecutorFactory",
+            "                 .create(executorProvider));",
             "    this.simpleComponentProvider = ",
             "        InstanceFactory.<TestClass.SimpleComponent>create(this);",
             "    this.monitorProvider =",
@@ -291,6 +294,14 @@ public void simpleComponent() {
             "      this.bModule = Preconditions.checkNotNull(bModule);",
             "      return this;",
             "    }",
+            "",
+            "    @Deprecated",
+            "    public Builder testClass_SimpleComponent_ProductionExecutorModule(",
+            "        TestClass_SimpleComponent_ProductionExecutorModule",
+            "        testClass_SimpleComponent_ProductionExecutorModule) {",
+            "      Preconditions.checkNotNull(testClass_SimpleComponent_ProductionExecutorModule);",
+            "      return this;",
+            "    }",
             "}");
     assertAbout(javaSource()).that(component)
         .processedWith(new ComponentProcessor())
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
index 25d7a8038..8de07ec85 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
@@ -431,6 +431,14 @@ public void productionComponents() {
             "    public TestComponent build() {",
             "      return new DaggerTestComponent(this);",
             "    }",
+            "",
+            "    @Deprecated",
+            "    public Builder testComponent_ProductionExecutorModule(",
+            "        TestComponent_ProductionExecutorModule",
+            "            testComponent_ProductionExecutorModule) {",
+            "      Preconditions.checkNotNull(testComponent_ProductionExecutorModule);",
+            "      return this;",
+            "    }",
             "  }",
             "}");
     Compilation compilation =
