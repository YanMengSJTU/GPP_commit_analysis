diff --git a/users-guide.md b/users-guide.md
index 789457742..305862f69 100644
--- a/users-guide.md
+++ b/users-guide.md
@@ -179,6 +179,21 @@ CoffeeShop coffeeShop = DaggerCoffeeShop.builder()
     .build();
 ```
 
+_Note_: If your `@Component` is not a top-level type, the generated component's
+name will be include its enclosing types' names, joined with an underscore. For
+example, this code:
+
+```java
+class Foo {
+  static class Bar {
+    @Component
+    interface BazComponent {}
+  }
+}
+```
+
+would generate a component named `DaggerFoo_Bar_BazComponent`.
+
 Any module with an accessible default constructor can be elided as the builder
 will construct an instance automatically if none is set.  And for any module
 whose `@Provides` methods are all static, the implementation doesn't need an
@@ -392,9 +407,11 @@ validation.
 ### Compile-time Code Generation
 
 Dagger's annotation processor may also generate source files with names like
-`CoffeeMaker$$Factory.java` or `CoffeeMaker$$MembersInjector.java`. These files
+`CoffeeMaker_Factory.java` or `CoffeeMaker_MembersInjector.java`. These files
 are Dagger implementation details. You shouldn't need to use them directly,
-though they can be handy when step-debugging through an injection.
+though they can be handy when step-debugging through an injection. The only
+generated types you should refer to in your code are the ones Prefixed with
+Dagger for your component.
 
 ## Using Dagger In Your Build
 
