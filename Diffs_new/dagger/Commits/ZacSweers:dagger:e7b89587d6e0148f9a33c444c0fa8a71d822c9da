diff --git a/java/dagger/internal/codegen/BindingGraphFactory.java b/java/dagger/internal/codegen/BindingGraphFactory.java
index aaf2606dd..62219192b 100644
--- a/java/dagger/internal/codegen/BindingGraphFactory.java
+++ b/java/dagger/internal/codegen/BindingGraphFactory.java
@@ -73,18 +73,17 @@
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
-import javax.lang.model.util.Elements;
 
 /** A factory for {@link BindingGraph} objects. */
 final class BindingGraphFactory {
-  private final Elements elements;
+  private final DaggerElements elements;
   private final InjectBindingRegistry injectBindingRegistry;
   private final KeyFactory keyFactory;
   private final BindingFactory bindingFactory;
 
   @Inject
   BindingGraphFactory(
-      Elements elements,
+      DaggerElements elements,
       InjectBindingRegistry injectBindingRegistry,
       KeyFactory keyFactory,
       BindingFactory bindingFactory) {
diff --git a/java/dagger/internal/codegen/BindingMethodValidator.java b/java/dagger/internal/codegen/BindingMethodValidator.java
index 4e92813c9..5fa4c2d8a 100644
--- a/java/dagger/internal/codegen/BindingMethodValidator.java
+++ b/java/dagger/internal/codegen/BindingMethodValidator.java
@@ -65,13 +65,12 @@
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
-import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 
 /** A validator for methods that represent binding declarations. */
 abstract class BindingMethodValidator {
 
-  private final Elements elements;
+  private final DaggerElements elements;
   private final Types types;
   private final Class<? extends Annotation> methodAnnotation;
   private final ImmutableSet<? extends Class<? extends Annotation>> enclosingElementAnnotations;
@@ -88,7 +87,7 @@
    *     with this annotation
    */
   protected BindingMethodValidator(
-      Elements elements,
+      DaggerElements elements,
       Types types,
       Class<? extends Annotation> methodAnnotation,
       Class<? extends Annotation> enclosingElementAnnotation,
@@ -113,7 +112,7 @@ protected BindingMethodValidator(
    *     annotated with one of these annotations
    */
   protected BindingMethodValidator(
-      Elements elements,
+      DaggerElements elements,
       Types types,
       Class<? extends Annotation> methodAnnotation,
       Iterable<? extends Class<? extends Annotation>> enclosingElementAnnotations,
@@ -445,8 +444,7 @@ protected void checkThrows(
         BindingMethodValidator validator, ValidationReport.Builder<ExecutableElement> builder) {
       TypeMirror exceptionSupertype =
           validator.elements.getTypeElement(superclass.getCanonicalName()).asType();
-      TypeMirror errorType =
-          validator.elements.getTypeElement(Error.class.getCanonicalName()).asType();
+      TypeMirror errorType = validator.elements.getTypeElement(Error.class).asType();
       for (TypeMirror thrownType : builder.getSubject().getThrownTypes()) {
         if (!validator.types.isSubtype(thrownType, exceptionSupertype)
             && !validator.types.isSubtype(thrownType, errorType)) {
diff --git a/java/dagger/internal/codegen/BindsMethodValidator.java b/java/dagger/internal/codegen/BindsMethodValidator.java
index 0d63a1568..84d1bdcc5 100644
--- a/java/dagger/internal/codegen/BindsMethodValidator.java
+++ b/java/dagger/internal/codegen/BindsMethodValidator.java
@@ -33,7 +33,6 @@
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.TypeMirror;
-import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 
 /**
@@ -44,7 +43,7 @@
   private final BindsTypeChecker bindsTypeChecker;
 
   @Inject
-  BindsMethodValidator(Elements elements, Types types) {
+  BindsMethodValidator(DaggerElements elements, Types types) {
     super(
         elements,
         types,
diff --git a/java/dagger/internal/codegen/BindsOptionalOfMethodValidator.java b/java/dagger/internal/codegen/BindsOptionalOfMethodValidator.java
index e7a6501d4..1d9772eff 100644
--- a/java/dagger/internal/codegen/BindsOptionalOfMethodValidator.java
+++ b/java/dagger/internal/codegen/BindsOptionalOfMethodValidator.java
@@ -34,7 +34,6 @@
 import javax.inject.Inject;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.type.TypeMirror;
-import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 
 /** A validator for {@link BindsOptionalOf} methods. */
@@ -43,7 +42,7 @@
   private final Types types;
 
   @Inject
-  BindsOptionalOfMethodValidator(Elements elements, Types types) {
+  BindsOptionalOfMethodValidator(DaggerElements elements, Types types) {
     super(
         elements,
         types,
diff --git a/java/dagger/internal/codegen/BindsTypeChecker.java b/java/dagger/internal/codegen/BindsTypeChecker.java
index 9ddff45df..4e48810e1 100644
--- a/java/dagger/internal/codegen/BindsTypeChecker.java
+++ b/java/dagger/internal/codegen/BindsTypeChecker.java
@@ -29,7 +29,6 @@
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeMirror;
-import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 
 /**
@@ -40,10 +39,10 @@
  */
 final class BindsTypeChecker {
   private final Types types;
-  private final Elements elements;
+  private final DaggerElements elements;
 
   @Inject
-  BindsTypeChecker(Types types, Elements elements) {
+  BindsTypeChecker(Types types, DaggerElements elements) {
     this.types = types;
     this.elements = elements;
   }
@@ -94,11 +93,11 @@ private TypeMirror methodParameterType(DeclaredType type, String methodName) {
   }
 
   private TypeElement setElement() {
-    return elements.getTypeElement(Set.class.getName());
+    return elements.getTypeElement(Set.class);
   }
 
   private TypeElement mapElement() {
-    return elements.getTypeElement(Map.class.getName());
+    return elements.getTypeElement(Map.class);
   }
 
   private TypeMirror unboundedWildcard() {
diff --git a/java/dagger/internal/codegen/CompilerOptions.java b/java/dagger/internal/codegen/CompilerOptions.java
index b54490c8f..f649c7a24 100644
--- a/java/dagger/internal/codegen/CompilerOptions.java
+++ b/java/dagger/internal/codegen/CompilerOptions.java
@@ -24,7 +24,6 @@
 import java.util.Map;
 import java.util.Set;
 import javax.annotation.processing.ProcessingEnvironment;
-import javax.lang.model.util.Elements;
 import javax.tools.Diagnostic;
 import javax.tools.Diagnostic.Kind;
 
@@ -66,12 +65,12 @@ static Builder builder() {
     return new AutoValue_CompilerOptions.Builder().headerCompilation(false);
   }
 
-  static CompilerOptions create(ProcessingEnvironment processingEnv, Elements elements) {
+  static CompilerOptions create(ProcessingEnvironment processingEnv, DaggerElements elements) {
     return builder()
-        .usesProducers(elements.getTypeElement(Produces.class.getCanonicalName()) != null)
+        .usesProducers(elements.getTypeElement(Produces.class) != null)
         .headerCompilation(processingEnv.getOptions().containsKey(HEADER_COMPILATION))
-        .experimentalAndroidMode(experimentalAndroidMode(processingEnv)
-            .equals(FeatureStatus.ENABLED))
+        .experimentalAndroidMode(
+            experimentalAndroidMode(processingEnv).equals(FeatureStatus.ENABLED))
         .writeProducerNameInToken(
             writeProducerNameInToken(processingEnv).equals(FeatureStatus.ENABLED))
         .nullableValidationKind(nullableValidationType(processingEnv).diagnosticKind().get())
diff --git a/java/dagger/internal/codegen/ComponentBindingExpressions.java b/java/dagger/internal/codegen/ComponentBindingExpressions.java
index 2d036839f..a164dd644 100644
--- a/java/dagger/internal/codegen/ComponentBindingExpressions.java
+++ b/java/dagger/internal/codegen/ComponentBindingExpressions.java
@@ -48,7 +48,6 @@
 import java.util.Optional;
 import javax.inject.Provider;
 import javax.lang.model.type.TypeMirror;
-import javax.lang.model.util.Elements;
 
 /** A central repository of code expressions used to access any binding available to a component. */
 final class ComponentBindingExpressions {
@@ -65,7 +64,7 @@
   private final ReferenceReleasingManagerFields referenceReleasingManagerFields;
   private final OptionalFactories optionalFactories;
   private final DaggerTypes types;
-  private final Elements elements;
+  private final DaggerElements elements;
   private final CompilerOptions compilerOptions;
   private final MembersInjectionMethods membersInjectionMethods;
   private final Table<Key, RequestKind, BindingExpression> expressions = HashBasedTable.create();
@@ -77,7 +76,7 @@
       ComponentRequirementFields componentRequirementFields,
       OptionalFactories optionalFactories,
       DaggerTypes types,
-      Elements elements,
+      DaggerElements elements,
       CompilerOptions compilerOptions) {
     this(
         Optional.empty(),
@@ -101,7 +100,7 @@ private ComponentBindingExpressions(
       ReferenceReleasingManagerFields referenceReleasingManagerFields,
       OptionalFactories optionalFactories,
       DaggerTypes types,
-      Elements elements,
+      DaggerElements elements,
       CompilerOptions compilerOptions) {
     this.parent = parent;
     this.graph = graph;
diff --git a/java/dagger/internal/codegen/ComponentDescriptor.java b/java/dagger/internal/codegen/ComponentDescriptor.java
index ce32ebfc4..3d6099a85 100644
--- a/java/dagger/internal/codegen/ComponentDescriptor.java
+++ b/java/dagger/internal/codegen/ComponentDescriptor.java
@@ -72,7 +72,6 @@
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.ExecutableType;
 import javax.lang.model.type.TypeMirror;
-import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 
 /**
@@ -739,16 +738,14 @@ private ModuleDescriptor descriptorForProductionExecutorModule(
   private static final ImmutableSet<String> NON_CONTRIBUTING_OBJECT_METHOD_NAMES =
       ImmutableSet.of("toString", "hashCode", "clone", "getClass");
 
-  static boolean isComponentContributionMethod(Elements elements, ExecutableElement method) {
+  static boolean isComponentContributionMethod(DaggerElements elements, ExecutableElement method) {
     return method.getParameters().isEmpty()
         && !method.getReturnType().getKind().equals(VOID)
-        && !elements
-            .getTypeElement(Object.class.getCanonicalName())
-            .equals(method.getEnclosingElement())
+        && !elements.getTypeElement(Object.class).equals(method.getEnclosingElement())
         && !NON_CONTRIBUTING_OBJECT_METHOD_NAMES.contains(method.getSimpleName().toString());
   }
 
-  static boolean isComponentProductionMethod(Elements elements, ExecutableElement method) {
+  static boolean isComponentProductionMethod(DaggerElements elements, ExecutableElement method) {
     return isComponentContributionMethod(elements, method) && isFutureType(method.getReturnType());
   }
 }
diff --git a/java/dagger/internal/codegen/ComponentGenerator.java b/java/dagger/internal/codegen/ComponentGenerator.java
index 51ae0fde4..74cdcd007 100644
--- a/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/java/dagger/internal/codegen/ComponentGenerator.java
@@ -27,7 +27,6 @@
 import javax.lang.model.SourceVersion;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
-import javax.lang.model.util.Elements;
 
 /**
  * Generates the implementation of the abstract types annotated with {@link Component}.
@@ -37,14 +36,14 @@
  */
 final class ComponentGenerator extends SourceFileGenerator<BindingGraph> {
   private final DaggerTypes types;
-  private final Elements elements;
+  private final DaggerElements elements;
   private final KeyFactory keyFactory;
   private final CompilerOptions compilerOptions;
 
   @Inject
   ComponentGenerator(
       Filer filer,
-      Elements elements,
+      DaggerElements elements,
       SourceVersion sourceVersion,
       DaggerTypes types,
       KeyFactory keyFactory,
diff --git a/java/dagger/internal/codegen/ComponentValidator.java b/java/dagger/internal/codegen/ComponentValidator.java
index 3b2896296..16ca3ac22 100644
--- a/java/dagger/internal/codegen/ComponentValidator.java
+++ b/java/dagger/internal/codegen/ComponentValidator.java
@@ -59,7 +59,6 @@
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.ExecutableType;
 import javax.lang.model.type.TypeMirror;
-import javax.lang.model.util.Elements;
 import javax.lang.model.util.SimpleTypeVisitor6;
 import javax.lang.model.util.Types;
 
@@ -70,14 +69,14 @@
  * @author Gregory Kick
  */
 final class ComponentValidator {
-  private final Elements elements;
+  private final DaggerElements elements;
   private final Types types;
   private final ModuleValidator moduleValidator;
   private final BuilderValidator builderValidator;
 
   @Inject
   ComponentValidator(
-      Elements elements,
+      DaggerElements elements,
       Types types,
       ModuleValidator moduleValidator,
       BuilderValidator builderValidator) {
diff --git a/java/dagger/internal/codegen/ComponentWriter.java b/java/dagger/internal/codegen/ComponentWriter.java
index e33b42572..bd3246ba6 100644
--- a/java/dagger/internal/codegen/ComponentWriter.java
+++ b/java/dagger/internal/codegen/ComponentWriter.java
@@ -65,7 +65,7 @@
 abstract class ComponentWriter {
   static TypeSpec.Builder writeComponent(
       DaggerTypes types,
-      Elements elements,
+      DaggerElements elements,
       KeyFactory keyFactory,
       CompilerOptions compilerOptions,
       ClassName name,
diff --git a/java/dagger/internal/codegen/ConfigurationAnnotations.java b/java/dagger/internal/codegen/ConfigurationAnnotations.java
index e8fe4538d..a2bf673c4 100644
--- a/java/dagger/internal/codegen/ConfigurationAnnotations.java
+++ b/java/dagger/internal/codegen/ConfigurationAnnotations.java
@@ -50,7 +50,6 @@
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
-import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 
 /**
@@ -166,15 +165,15 @@ static boolean isSubcomponentBuilder(Element element) {
 
   /**
    * Returns the full set of modules transitively {@linkplain Module#includes included} from the
-   * given seed modules.  If a module is malformed and a type listed in {@link Module#includes}
-   * is not annotated with {@link Module}, it is ignored.
+   * given seed modules. If a module is malformed and a type listed in {@link Module#includes} is
+   * not annotated with {@link Module}, it is ignored.
    *
    * @deprecated Use {@link ComponentDescriptor#transitiveModules}.
    */
   @Deprecated
   static ImmutableSet<TypeElement> getTransitiveModules(
-      Types types, Elements elements, Iterable<TypeElement> seedModules) {
-    TypeMirror objectType = elements.getTypeElement(Object.class.getCanonicalName()).asType();
+      Types types, DaggerElements elements, Iterable<TypeElement> seedModules) {
+    TypeMirror objectType = elements.getTypeElement(Object.class).asType();
     Queue<TypeElement> moduleQueue = new ArrayDeque<>();
     Iterables.addAll(moduleQueue, seedModules);
     Set<TypeElement> moduleElements = Sets.newLinkedHashSet();
diff --git a/java/dagger/internal/codegen/DaggerElements.java b/java/dagger/internal/codegen/DaggerElements.java
index a62a2f5c4..4f98d4abe 100644
--- a/java/dagger/internal/codegen/DaggerElements.java
+++ b/java/dagger/internal/codegen/DaggerElements.java
@@ -73,6 +73,16 @@
         .toSet();
   }
 
+  /** Returns the type element for a class. */
+  TypeElement getTypeElement(Class<?> clazz) {
+    return getTypeElement(clazz.getCanonicalName());
+  }
+
+  @Override
+  public TypeElement getTypeElement(CharSequence name) {
+    return elements.getTypeElement(name);
+  }
+
   /**
    * A visitor that returns the input or the closest enclosing element that is a
    * {@link TypeElement}.
@@ -205,11 +215,6 @@ public PackageElement getPackageElement(CharSequence name) {
     return elements.getPackageElement(name);
   }
 
-  @Override
-  public TypeElement getTypeElement(CharSequence name) {
-    return elements.getTypeElement(name);
-  }
-
   @Override
   public Map<? extends ExecutableElement, ? extends AnnotationValue> getElementValuesWithDefaults(
       AnnotationMirror a) {
diff --git a/java/dagger/internal/codegen/DaggerTypes.java b/java/dagger/internal/codegen/DaggerTypes.java
index cf161f6b2..bf0b69ad6 100644
--- a/java/dagger/internal/codegen/DaggerTypes.java
+++ b/java/dagger/internal/codegen/DaggerTypes.java
@@ -28,7 +28,6 @@
 import com.squareup.javapoet.ClassName;
 import java.util.List;
 import java.util.Optional;
-import javax.annotation.processing.ProcessingEnvironment;
 import javax.inject.Inject;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
@@ -43,7 +42,6 @@
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.type.TypeVariable;
 import javax.lang.model.type.WildcardType;
-import javax.lang.model.util.Elements;
 import javax.lang.model.util.SimpleTypeVisitor8;
 import javax.lang.model.util.Types;
 
@@ -51,18 +49,14 @@
 final class DaggerTypes implements Types {
 
   private final Types types;
-  private final Elements elements;
+  private final DaggerElements elements;
 
   @Inject
-  DaggerTypes(Types types, Elements elements) {
+  DaggerTypes(Types types, DaggerElements elements) {
     this.types = checkNotNull(types);
     this.elements = checkNotNull(elements);
   }
 
-  DaggerTypes(ProcessingEnvironment processingEnv) {
-    this(processingEnv.getTypeUtils(), processingEnv.getElementUtils());
-  }
-
   /**
    * Returns the non-{@link Object} superclass of the type with the proper type parameters. An empty
    * {@link Optional} is returned if there is no non-{@link Object} superclass.
@@ -94,8 +88,7 @@ TypeMirror unwrapType(TypeMirror type) {
    *     type argument.
    */
   TypeMirror unwrapTypeOrObject(TypeMirror type) {
-    return unwrapTypeOrDefault(
-        type, elements.getTypeElement(Object.class.getCanonicalName()).asType());
+    return unwrapTypeOrDefault(type, elements.getTypeElement(Object.class).asType());
   }
 
   private TypeMirror unwrapTypeOrDefault(TypeMirror type, TypeMirror defaultType) {
@@ -150,7 +143,7 @@ protected final TypeMirror accessibleType(TypeMirror type, ClassName requestingC
         && Accessibility.isRawTypeAccessible(type, requestingClass.packageName())) {
       return getDeclaredType(MoreTypes.asTypeElement(type));
     } else {
-      return elements.getTypeElement(Object.class.getName()).asType();
+      return elements.getTypeElement(Object.class).asType();
     }
   }
 
diff --git a/java/dagger/internal/codegen/DelegateBindingExpression.java b/java/dagger/internal/codegen/DelegateBindingExpression.java
index a23b685ce..702b3342f 100644
--- a/java/dagger/internal/codegen/DelegateBindingExpression.java
+++ b/java/dagger/internal/codegen/DelegateBindingExpression.java
@@ -27,7 +27,6 @@
 import dagger.model.RequestKind;
 import dagger.model.Scope;
 import javax.lang.model.type.TypeMirror;
-import javax.lang.model.util.Elements;
 
 /** A {@link BindingExpression} for {@code @Binds} methods. */
 final class DelegateBindingExpression extends BindingExpression {
@@ -42,7 +41,7 @@
       RequestKind requestKind,
       ComponentBindingExpressions componentBindingExpressions,
       DaggerTypes types,
-      Elements elements) {
+      DaggerElements elements) {
     this.binding = checkNotNull(resolvedBindings.contributionBinding());
     this.requestKind = checkNotNull(requestKind);
     this.componentBindingExpressions = checkNotNull(componentBindingExpressions);
diff --git a/java/dagger/internal/codegen/InjectValidator.java b/java/dagger/internal/codegen/InjectValidator.java
index 232ee923a..ff8a91afc 100644
--- a/java/dagger/internal/codegen/InjectValidator.java
+++ b/java/dagger/internal/codegen/InjectValidator.java
@@ -60,7 +60,6 @@
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.ElementFilter;
-import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 import javax.tools.Diagnostic;
 
@@ -73,18 +72,18 @@
  */
 final class InjectValidator {
   private final Types types;
-  private final Elements elements;
+  private final DaggerElements elements;
   private final CompilerOptions compilerOptions;
   private final Optional<Diagnostic.Kind> privateAndStaticInjectionDiagnosticKind;
 
   @Inject
-  InjectValidator(Types types, Elements elements, CompilerOptions compilerOptions) {
+  InjectValidator(Types types, DaggerElements elements, CompilerOptions compilerOptions) {
     this(types, elements, compilerOptions, Optional.empty());
   }
 
   private InjectValidator(
       Types types,
-      Elements elements,
+      DaggerElements elements,
       CompilerOptions compilerOptions,
       Optional<Diagnostic.Kind> privateAndStaticInjectionDiagnosticKind) {
     this.types = types;
@@ -324,9 +323,8 @@ boolean isValidType(TypeMirror type) {
 
   /** Returns true if the given method element declares a checked exception. */
   private boolean throwsCheckedExceptions(ExecutableElement methodElement) {
-    TypeMirror runtimeExceptionType =
-        elements.getTypeElement(RuntimeException.class.getCanonicalName()).asType();
-    TypeMirror errorType = elements.getTypeElement(Error.class.getCanonicalName()).asType();
+    TypeMirror runtimeExceptionType = elements.getTypeElement(RuntimeException.class).asType();
+    TypeMirror errorType = elements.getTypeElement(Error.class).asType();
     for (TypeMirror thrownType : methodElement.getThrownTypes()) {
       if (!types.isSubtype(thrownType, runtimeExceptionType)
           && !types.isSubtype(thrownType, errorType)) {
diff --git a/java/dagger/internal/codegen/KytheBindingGraphFactory.java b/java/dagger/internal/codegen/KytheBindingGraphFactory.java
index 5dbee8373..25189bd1b 100644
--- a/java/dagger/internal/codegen/KytheBindingGraphFactory.java
+++ b/java/dagger/internal/codegen/KytheBindingGraphFactory.java
@@ -41,7 +41,7 @@
 
   KytheBindingGraphFactory(Types types, Elements elements) {
     DaggerElements daggerElements = new DaggerElements(elements, types);
-    DaggerTypes daggerTypes = new DaggerTypes(types, elements);
+    DaggerTypes daggerTypes = new DaggerTypes(types, daggerElements);
     this.componentDescriptorFactory = createComponentDescriptorFactory(daggerElements, daggerTypes);
     this.bindingGraphFactory = createBindingGraphFactory(daggerTypes, daggerElements);
   }
diff --git a/java/dagger/internal/codegen/MapBindingExpression.java b/java/dagger/internal/codegen/MapBindingExpression.java
index e8edefc87..7521b4428 100644
--- a/java/dagger/internal/codegen/MapBindingExpression.java
+++ b/java/dagger/internal/codegen/MapBindingExpression.java
@@ -33,7 +33,6 @@
 import java.util.Collections;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeMirror;
-import javax.lang.model.util.Elements;
 
 /** A {@link BindingExpression} for multibound maps. */
 final class MapBindingExpression extends SimpleInvocationBindingExpression {
@@ -44,14 +43,14 @@
   private final ImmutableMap<DependencyRequest, ContributionBinding> dependencies;
   private final ComponentBindingExpressions componentBindingExpressions;
   private final DaggerTypes types;
-  private final Elements elements;
+  private final DaggerElements elements;
 
   MapBindingExpression(
       ResolvedBindings resolvedBindings,
       BindingGraph graph,
       ComponentBindingExpressions componentBindingExpressions,
       DaggerTypes types,
-      Elements elements) {
+      DaggerElements elements) {
     super(resolvedBindings);
     this.binding = (ProvisionBinding) resolvedBindings.contributionBinding();
     BindingKind bindingKind = this.binding.kind();
@@ -117,9 +116,7 @@ Expression getDependencyExpression(ClassName requestingClass) {
   private DeclaredType immutableMapType() {
     MapType mapType = MapType.from(binding.key());
     return types.getDeclaredType(
-        elements.getTypeElement(ImmutableMap.class.getName()),
-        mapType.keyType(),
-        mapType.valueType());
+        elements.getTypeElement(ImmutableMap.class), mapType.keyType(), mapType.valueType());
   }
 
   private CodeBlock keyAndValueExpression(DependencyRequest dependency, ClassName requestingClass) {
@@ -151,6 +148,6 @@ private CodeBlock maybeTypeParameters(ClassName requestingClass) {
   }
 
   private boolean isImmutableMapAvailable() {
-    return elements.getTypeElement(ImmutableMap.class.getCanonicalName()) != null;
+    return elements.getTypeElement(ImmutableMap.class) != null;
   }
 }
diff --git a/java/dagger/internal/codegen/MembersInjectionMethods.java b/java/dagger/internal/codegen/MembersInjectionMethods.java
index 9d40f485b..36108cfa2 100644
--- a/java/dagger/internal/codegen/MembersInjectionMethods.java
+++ b/java/dagger/internal/codegen/MembersInjectionMethods.java
@@ -37,7 +37,6 @@
 import javax.lang.model.element.Name;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.TypeMirror;
-import javax.lang.model.util.Elements;
 
 /** Manages the member injection methods for a component. */
 final class MembersInjectionMethods {
@@ -45,14 +44,14 @@
   private final GeneratedComponentModel generatedComponentModel;
   private final ComponentBindingExpressions bindingExpressions;
   private final BindingGraph graph;
-  private final Elements elements;
+  private final DaggerElements elements;
   private final DaggerTypes types;
 
   MembersInjectionMethods(
       GeneratedComponentModel generatedComponentModel,
       ComponentBindingExpressions bindingExpressions,
       BindingGraph graph,
-      Elements elements,
+      DaggerElements elements,
       DaggerTypes types) {
     this.generatedComponentModel = checkNotNull(generatedComponentModel);
     this.bindingExpressions = checkNotNull(bindingExpressions);
@@ -77,7 +76,7 @@ private MethodSpec membersInjectionMethod(Key key) {
     TypeMirror membersInjectedType =
         isTypeAccessibleFrom(keyType, generatedComponentModel.name().packageName())
             ? keyType
-            : elements.getTypeElement("java.lang.Object").asType();
+            : elements.getTypeElement(Object.class).asType();
     TypeName membersInjectedTypeName = TypeName.get(membersInjectedType);
     Name bindingTypeName = binding.bindingTypeElement().get().getSimpleName();
     // TODO(ronshapiro): include type parameters in this name e.g. injectFooOfT, and outer class
diff --git a/java/dagger/internal/codegen/ModuleValidator.java b/java/dagger/internal/codegen/ModuleValidator.java
index cf235283f..fafbb6629 100644
--- a/java/dagger/internal/codegen/ModuleValidator.java
+++ b/java/dagger/internal/codegen/ModuleValidator.java
@@ -83,7 +83,6 @@
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.ElementFilter;
-import javax.lang.model.util.Elements;
 import javax.lang.model.util.SimpleTypeVisitor6;
 import javax.lang.model.util.SimpleTypeVisitor8;
 import javax.lang.model.util.Types;
@@ -116,7 +115,7 @@
   }
 
   private final Types types;
-  private final Elements elements;
+  private final DaggerElements elements;
   private final AnyBindingMethodValidator anyBindingMethodValidator;
   private final MethodSignatureFormatter methodSignatureFormatter;
   private final Map<TypeElement, ValidationReport<TypeElement>> cache = new HashMap<>();
@@ -125,7 +124,7 @@
   @Inject
   ModuleValidator(
       Types types,
-      Elements elements,
+      DaggerElements elements,
       AnyBindingMethodValidator anyBindingMethodValidator,
       MethodSignatureFormatter methodSignatureFormatter) {
     this.types = types;
@@ -409,7 +408,7 @@ private void validateProvidesOverrides(
     // a method marked @Provides in Parent, and "c" because Child is defining an @Provides
     // method that overrides Parent.
     TypeElement currentClass = subject;
-    TypeMirror objectType = elements.getTypeElement(Object.class.getCanonicalName()).asType();
+    TypeMirror objectType = elements.getTypeElement(Object.class).asType();
     // We keep track of methods that failed so we don't spam with multiple failures.
     Set<ExecutableElement> failedMethods = Sets.newHashSet();
     while (!types.isSameType(currentClass.getSuperclass(), objectType)) {
diff --git a/java/dagger/internal/codegen/MultibindsMethodValidator.java b/java/dagger/internal/codegen/MultibindsMethodValidator.java
index fe91086f2..f780e9423 100644
--- a/java/dagger/internal/codegen/MultibindsMethodValidator.java
+++ b/java/dagger/internal/codegen/MultibindsMethodValidator.java
@@ -31,7 +31,6 @@
 import javax.inject.Inject;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.type.TypeMirror;
-import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 
 /** A validator for {@link Multibinds} methods. */
@@ -39,7 +38,7 @@
 
   /** Creates a validator for {@link Multibinds @Multibinds} methods. */
   @Inject
-  MultibindsMethodValidator(Elements elements, Types types) {
+  MultibindsMethodValidator(DaggerElements elements, Types types) {
     super(
         elements,
         types,
diff --git a/java/dagger/internal/codegen/ProducesMethodValidator.java b/java/dagger/internal/codegen/ProducesMethodValidator.java
index 69e889a56..b2904370f 100644
--- a/java/dagger/internal/codegen/ProducesMethodValidator.java
+++ b/java/dagger/internal/codegen/ProducesMethodValidator.java
@@ -38,7 +38,6 @@
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeMirror;
-import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 
 /**
@@ -50,7 +49,7 @@
 final class ProducesMethodValidator extends BindingMethodValidator {
 
   @Inject
-  ProducesMethodValidator(Elements elements, Types types) {
+  ProducesMethodValidator(DaggerElements elements, Types types) {
     super(
         elements,
         types,
diff --git a/java/dagger/internal/codegen/ProvidesMethodValidator.java b/java/dagger/internal/codegen/ProvidesMethodValidator.java
index 6f1e6d76d..5cf812204 100644
--- a/java/dagger/internal/codegen/ProvidesMethodValidator.java
+++ b/java/dagger/internal/codegen/ProvidesMethodValidator.java
@@ -28,7 +28,6 @@
 import javax.inject.Inject;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.VariableElement;
-import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 
 /**
@@ -40,7 +39,7 @@
 final class ProvidesMethodValidator extends BindingMethodValidator {
 
   @Inject
-  ProvidesMethodValidator(Elements elements, Types types) {
+  ProvidesMethodValidator(DaggerElements elements, Types types) {
     super(
         elements,
         types,
diff --git a/java/dagger/internal/codegen/SetBindingExpression.java b/java/dagger/internal/codegen/SetBindingExpression.java
index 7833282e8..860df769b 100644
--- a/java/dagger/internal/codegen/SetBindingExpression.java
+++ b/java/dagger/internal/codegen/SetBindingExpression.java
@@ -28,7 +28,6 @@
 import java.util.Collections;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeMirror;
-import javax.lang.model.util.Elements;
 
 /** A binding expression for multibound sets. */
 final class SetBindingExpression extends SimpleInvocationBindingExpression {
@@ -36,14 +35,14 @@
   private final BindingGraph graph;
   private final ComponentBindingExpressions componentBindingExpressions;
   private final DaggerTypes types;
-  private final Elements elements;
+  private final DaggerElements elements;
 
   SetBindingExpression(
       ResolvedBindings resolvedBindings,
       BindingGraph graph,
       ComponentBindingExpressions componentBindingExpressions,
       DaggerTypes types,
-      Elements elements) {
+      DaggerElements elements) {
     super(resolvedBindings);
     this.binding = (ProvisionBinding) resolvedBindings.contributionBinding();
     this.graph = graph;
@@ -117,8 +116,7 @@ Expression getDependencyExpression(ClassName requestingClass) {
 
   private DeclaredType immutableSetType() {
     return types.getDeclaredType(
-        elements.getTypeElement(ImmutableSet.class.getName()),
-        SetType.from(binding.key()).elementType());
+        elements.getTypeElement(ImmutableSet.class), SetType.from(binding.key()).elementType());
   }
 
   private CodeBlock getContributionExpression(
@@ -156,6 +154,6 @@ private boolean isSingleValue(DependencyRequest dependency) {
   }
 
   private boolean isImmutableSetAvailable() {
-    return elements.getTypeElement(ImmutableSet.class.getCanonicalName()) != null;
+    return elements.getTypeElement(ImmutableSet.class) != null;
   }
 }
diff --git a/java/dagger/internal/codegen/SimpleMethodBindingExpression.java b/java/dagger/internal/codegen/SimpleMethodBindingExpression.java
index 6809643ae..9e615c9db 100644
--- a/java/dagger/internal/codegen/SimpleMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/SimpleMethodBindingExpression.java
@@ -35,7 +35,6 @@
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeMirror;
-import javax.lang.model.util.Elements;
 
 /**
  * A binding expression that invokes methods or constructors directly (without attempting to scope)
@@ -47,7 +46,7 @@
   private final ComponentBindingExpressions componentBindingExpressions;
   private final MembersInjectionMethods membersInjectionMethods;
   private final ComponentRequirementFields componentRequirementFields;
-  private final Elements elements;
+  private final DaggerElements elements;
 
   SimpleMethodBindingExpression(
       ResolvedBindings resolvedBindings,
@@ -55,7 +54,7 @@
       ComponentBindingExpressions componentBindingExpressions,
       MembersInjectionMethods membersInjectionMethods,
       ComponentRequirementFields componentRequirementFields,
-      Elements elements) {
+      DaggerElements elements) {
     super(resolvedBindings);
     this.compilerOptions = compilerOptions;
     this.provisionBinding = (ProvisionBinding) resolvedBindings.contributionBinding();
@@ -144,7 +143,7 @@ private Expression injectMembers(CodeBlock instance) {
     MethodSpec membersInjectionMethod = membersInjectionMethods.getOrCreate(provisionBinding.key());
     TypeMirror returnType =
         membersInjectionMethod.returnType.equals(TypeName.OBJECT)
-            ? elements.getTypeElement(Object.class.getCanonicalName()).asType()
+            ? elements.getTypeElement(Object.class).asType()
             : provisionBinding.key().type();
     return Expression.create(returnType, CodeBlock.of("$N($L)", membersInjectionMethod, instance));
   }
diff --git a/javatests/dagger/internal/codegen/KeyFactoryTest.java b/javatests/dagger/internal/codegen/KeyFactoryTest.java
index fe3112867..c011c7093 100644
--- a/javatests/dagger/internal/codegen/KeyFactoryTest.java
+++ b/javatests/dagger/internal/codegen/KeyFactoryTest.java
@@ -39,7 +39,6 @@
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.ElementFilter;
-import javax.lang.model.util.Elements;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -53,13 +52,13 @@
 public class KeyFactoryTest {
   @Rule public CompilationRule compilationRule = new CompilationRule();
 
-  private Elements elements;
+  private DaggerElements elements;
   private DaggerTypes types;
   private KeyFactory keyFactory;
 
   @Before public void setUp() {
-    this.elements = compilationRule.getElements();
-    this.types = new DaggerTypes(compilationRule.getTypes(), compilationRule.getElements());
+    this.elements = new DaggerElements(compilationRule.getElements(), compilationRule.getTypes());
+    this.types = new DaggerTypes(compilationRule.getTypes(), elements);
     this.keyFactory = new KeyFactory(types, elements);
   }
 
