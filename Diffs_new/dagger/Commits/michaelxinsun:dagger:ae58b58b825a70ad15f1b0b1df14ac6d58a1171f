diff --git a/java/dagger/internal/codegen/SetBindingExpression.java b/java/dagger/internal/codegen/SetBindingExpression.java
index d53cd05bc..998090fe3 100644
--- a/java/dagger/internal/codegen/SetBindingExpression.java
+++ b/java/dagger/internal/codegen/SetBindingExpression.java
@@ -56,7 +56,7 @@
   Expression getDependencyExpression(ClassName requestingClass) {
     // TODO(ronshapiro): We should also make an ImmutableSet version of SetFactory
     boolean isImmutableSetAvailable = isImmutableSetAvailable();
-    boolean isBuilderWithExpectedSizeAvailable = isBuilderWithExpectedSizeAvailable();
+    boolean isImmutableSetBuilderWithExpectedSizeAvailable = isImmutableSetBuilderWithExpectedSizeAvailable();
     // TODO(ronshapiro, gak): Use Sets.immutableEnumSet() if it's available?
     if (isImmutableSetAvailable && binding.dependencies().stream().allMatch(this::isSingleValue)) {
       return Expression.create(
@@ -100,7 +100,7 @@ Expression getDependencyExpression(ClassName requestingClass) {
             .add("$T.", isImmutableSetAvailable ? ImmutableSet.class : SetBuilder.class)
             .add(maybeTypeParameter(requestingClass));
         if (isImmutableSetAvailable) {
-          if (isBuilderWithExpectedSizeAvailable) {
+          if (isImmutableSetBuilderWithExpectedSizeAvailable) {
             instantiation.add("builderWithExpectedSize($L)", binding.dependencies().size());
           } else {
             instantiation.add("builder()");
@@ -163,7 +163,7 @@ private boolean isImmutableSetAvailable() {
     return elements.getTypeElement(ImmutableSet.class) != null;
   }
 
-  private boolean isBuilderWithExpectedSizeAvailable() {
+  private boolean isImmutableSetBuilderWithExpectedSizeAvailable() {
     return methodsIn(elements.getTypeElement(ImmutableSet.class).getEnclosedElements())
         .stream()
         .anyMatch(method -> method.getSimpleName().contentEquals("builderWithExpectedSize"));
