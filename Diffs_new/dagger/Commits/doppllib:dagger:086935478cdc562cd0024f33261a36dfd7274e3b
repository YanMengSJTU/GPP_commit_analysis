diff --git a/java/dagger/internal/codegen/BindingGraph.java b/java/dagger/internal/codegen/BindingGraph.java
index cf41126a6..14b9c7d07 100644
--- a/java/dagger/internal/codegen/BindingGraph.java
+++ b/java/dagger/internal/codegen/BindingGraph.java
@@ -801,7 +801,6 @@ private boolean isResolvedInParent(BindingKey bindingKey, ContributionBinding bi
 
         for (Resolver requestResolver : getResolverLineage().reverse()) {
           if (requestResolver.explicitBindingsSet.contains(binding)
-              || requestResolver.delegateDeclarations.containsKey(binding.key())
               || requestResolver.subcomponentDeclarations.containsKey(binding.key())) {
             return Optional.of(requestResolver);
           }
diff --git a/javatests/dagger/functional/producers/binds/BindsProductionScopedOnlyUsedInChild.java b/javatests/dagger/functional/producers/binds/BindsProductionScopedOnlyUsedInChild.java
deleted file mode 100644
index d225fe733..000000000
--- a/javatests/dagger/functional/producers/binds/BindsProductionScopedOnlyUsedInChild.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/*
- * Copyright (C) 2017 The Dagger Authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package dagger.functional.producers.binds;
-
-import dagger.Binds;
-import dagger.BindsInstance;
-import dagger.Module;
-import dagger.Provides;
-import dagger.producers.ProductionComponent;
-import dagger.producers.ProductionScope;
-import dagger.producers.ProductionSubcomponent;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.util.concurrent.atomic.AtomicInteger;
-import javax.inject.Qualifier;
-
-final class BindsProductionScopedOnlyUsedInChild {
-  interface Scoped {}
-
-  static class Unscoped implements Scoped {}
-
-  @Module
-  abstract static class ParentModule {
-    @Provides
-    static Unscoped unscoped(AtomicInteger counter) {
-      counter.incrementAndGet();
-      return new Unscoped();
-    }
-
-    @Binds
-    @ProductionScope
-    abstract Scoped to(Unscoped unscoped);
-  }
-
-  @ProductionComponent(modules = ParentModule.class)
-  interface Parent {
-    Child child();
-
-    @ProductionComponent.Builder
-    interface Builder {
-      @BindsInstance
-      Builder counter(AtomicInteger atomicInteger);
-
-      Parent build();
-    }
-  }
-
-  @Module
-  abstract static class ChildModule {
-    @Binds
-    @ProductionScope
-    @InChild
-    abstract Scoped to(Unscoped unscoped);
-  }
-
-  @ProductionSubcomponent(modules = ChildModule.class)
-  interface Child {
-    Scoped scopedInParent();
-    @InChild Scoped scopedInChild();
-  }
-
-  @Retention(RetentionPolicy.RUNTIME)
-  @Qualifier
-  @interface InChild {}
-}
diff --git a/javatests/dagger/functional/producers/binds/BindsProductionScopedOnlyUsedInChildTest.java b/javatests/dagger/functional/producers/binds/BindsProductionScopedOnlyUsedInChildTest.java
deleted file mode 100644
index efa9f954f..000000000
--- a/javatests/dagger/functional/producers/binds/BindsProductionScopedOnlyUsedInChildTest.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * Copyright (C) 2017 The Dagger Authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package dagger.functional.producers.binds;
-
-import static com.google.common.truth.Truth.assertThat;
-
-import dagger.functional.producers.binds.BindsProductionScopedOnlyUsedInChild.Child;
-import dagger.functional.producers.binds.BindsProductionScopedOnlyUsedInChild.Parent;
-import java.util.concurrent.atomic.AtomicInteger;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.JUnit4;
-
-@RunWith(JUnit4.class)
-public class BindsProductionScopedOnlyUsedInChildTest {
-  @Test
-  public void unscopedExecutor_effectivelyScoped() {
-    AtomicInteger counter = new AtomicInteger();
-    Parent parent =
-        DaggerBindsProductionScopedOnlyUsedInChild_Parent.builder().counter(counter).build();
-    Child child = parent.child();
-
-    child.scopedInParent(); // first time the parent-scoped binding is created
-    assertThat(counter.get()).isEqualTo(1);
-    child.scopedInParent(); // already scoped
-    assertThat(counter.get()).isEqualTo(1);
-
-    child.scopedInChild(); // first time the child scoped binding is created
-    assertThat(counter.get()).isEqualTo(2);
-    child.scopedInChild(); // already scoped
-    assertThat(counter.get()).isEqualTo(2);
-
-    Child secondChild = parent.child();
-    secondChild.scopedInParent(); // still scoped from the parent, no expected differences
-    assertThat(counter.get()).isEqualTo(2); // second child syndrome?
-    secondChild.scopedInChild(); // first time scopedInChild is created from the new child
-    assertThat(counter.get()).isEqualTo(3);
-    secondChild.scopedInChild();
-    assertThat(counter.get()).isEqualTo(3);
-  }
-}
