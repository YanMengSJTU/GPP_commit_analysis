diff --git a/java/dagger/internal/codegen/writing/FactoryGenerator.java b/java/dagger/internal/codegen/writing/FactoryGenerator.java
index 0eecaedff..bc45d85b3 100644
--- a/java/dagger/internal/codegen/writing/FactoryGenerator.java
+++ b/java/dagger/internal/codegen/writing/FactoryGenerator.java
@@ -211,11 +211,16 @@ private void addCreateMethod(ProvisionBinding binding, TypeSpec.Builder factoryB
         if (!bindingTypeElementTypeVariableNames(binding).isEmpty()) {
           // If the factory has type parameters, ignore them in the field declaration & initializer
           instanceFieldBuilder.addAnnotation(suppressWarnings(RAWTYPES));
-
           createMethodBuilder.addAnnotation(suppressWarnings(UNCHECKED));
         }
-        createMethodBuilder.addStatement("return INSTANCE");
-        factoryBuilder.addField(instanceFieldBuilder.build());
+
+        ClassName instanceHolderName = nameGeneratedType(binding).nestedClass("InstanceHolder");
+        createMethodBuilder.addStatement("return $T.INSTANCE", instanceHolderName);
+        factoryBuilder.addType(
+            TypeSpec.classBuilder(instanceHolderName)
+                .addModifiers(PRIVATE, STATIC, FINAL)
+                .addField(instanceFieldBuilder.build())
+                .build());
         break;
       case CLASS_CONSTRUCTOR:
         List<ParameterSpec> params = constructorParams(binding);
diff --git a/javatests/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java b/javatests/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
index 8ec202454..58acf54e3 100644
--- a/javatests/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
+++ b/javatests/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
@@ -240,9 +240,6 @@
             "",
             GENERATED_CODE_ANNOTATIONS,
             "public final class GenericClass_Factory<T> implements Factory<GenericClass<T>> {",
-            "  @SuppressWarnings(\"rawtypes\")",
-            "  private static final GenericClass_Factory INSTANCE = new GenericClass_Factory();",
-            "",
             "  @Override",
             "  public GenericClass<T> get() {",
             "    return newInstance();",
@@ -250,12 +247,17 @@
             "",
             "  @SuppressWarnings(\"unchecked\")",
             "  public static <T> GenericClass_Factory<T> create() {",
-            "    return INSTANCE;",
+            "    return InstanceHolder.INSTANCE;",
             "  }",
             "",
             "  public static <T> GenericClass<T> newInstance() {",
             "    return new GenericClass<T>();",
             "  }",
+            "",
+            "  private static final class InstanceHolder {",
+            "    @SuppressWarnings(\"rawtypes\")",
+            "    private static final GenericClass_Factory INSTANCE = new GenericClass_Factory();",
+            "  }",
             "}");
     assertAbout(javaSource()).that(file)
         .processedWith(new ComponentProcessor())
@@ -1399,19 +1401,21 @@ public void noDeps() {
             "",
             GENERATED_CODE_ANNOTATIONS,
             "public final class SimpleType_Factory implements Factory<SimpleType> {",
-            "  private static final SimpleType_Factory INSTANCE = new SimpleType_Factory();",
-            "",
             "  @Override public SimpleType get() {",
             "    return newInstance();",
             "  }",
             "",
             "  public static SimpleType_Factory create() {",
-            "    return INSTANCE;",
+            "    return InstanceHolder.INSTANCE;",
             "  }",
             "",
             "  public static SimpleType newInstance() {",
             "    return new SimpleType();",
             "  }",
+            "",
+            "  private static final class InstanceHolder {",
+            "    private static final SimpleType_Factory INSTANCE = new SimpleType_Factory();",
+            "  }",
             "}");
     assertAbout(javaSource())
         .that(simpleType)
@@ -1445,19 +1449,21 @@ public void noDeps() {
             "",
             GENERATED_CODE_ANNOTATIONS,
             "public final class OuterType_A_Factory implements Factory<OuterType.A> {",
-            "  private static final OuterType_A_Factory INSTANCE = new OuterType_A_Factory();",
-            "",
             "  @Override public OuterType.A get() {",
             "    return newInstance();",
             "  }",
             "",
             "  public static OuterType_A_Factory create() {",
-            "    return INSTANCE;",
+            "    return InstanceHolder.INSTANCE;",
             "  }",
             "",
             "  public static OuterType.A newInstance() {",
             "    return new OuterType.A();",
             "  }",
+            "",
+            "  private static final class InstanceHolder {",
+            "    private static final OuterType_A_Factory INSTANCE = new OuterType_A_Factory();",
+            "  }",
             "}");
     assertAbout(javaSources()).that(ImmutableList.of(nestedTypesFile))
         .processedWith(new ComponentProcessor())
diff --git a/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java b/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
index d30d395d5..8cc79809a 100644
--- a/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
+++ b/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
@@ -1114,22 +1114,24 @@ public void genericSubclassedModule() {
             GENERATED_CODE_ANNOTATIONS,
             "public final class ParameterizedModule_ProvideMapStringNumberFactory",
             "    implements Factory<Map<String, Number>> {",
-            "  private static final ParameterizedModule_ProvideMapStringNumberFactory INSTANCE =",
-            "      new ParameterizedModule_ProvideMapStringNumberFactory();",
-            "",
             "  @Override",
             "  public Map<String, Number> get() {",
             "    return provideMapStringNumber();",
             "  }",
             "",
             "  public static ParameterizedModule_ProvideMapStringNumberFactory create() {",
-            "    return INSTANCE;",
+            "    return InstanceHolder.INSTANCE;",
             "  }",
             "",
             "  public static Map<String, Number> provideMapStringNumber() {",
             "    return Preconditions.checkNotNull(ParameterizedModule.provideMapStringNumber(),",
             "        " + NPE_FROM_PROVIDES_METHOD + ");",
             "  }",
+            "",
+            "  private static final class InstanceHolder {",
+            "    private static final ParameterizedModule_ProvideMapStringNumberFactory INSTANCE =",
+            "        new ParameterizedModule_ProvideMapStringNumberFactory();",
+            "  }",
             "}");
 
     JavaFileObject provideNonGenericTypeFactory =
@@ -1144,22 +1146,24 @@ public void genericSubclassedModule() {
             GENERATED_CODE_ANNOTATIONS,
             "public final class ParameterizedModule_ProvideNonGenericTypeFactory",
             "    implements Factory<Object> {",
-            "  private static final ParameterizedModule_ProvideNonGenericTypeFactory INSTANCE = ",
-            "      new ParameterizedModule_ProvideNonGenericTypeFactory();",
-            "",
             "  @Override",
             "  public Object get() {",
             "    return provideNonGenericType();",
             "  }",
             "",
             "  public static ParameterizedModule_ProvideNonGenericTypeFactory create() {",
-            "    return INSTANCE;",
+            "    return InstanceHolder.INSTANCE;",
             "  }",
             "",
             "  public static Object provideNonGenericType() {",
             "    return Preconditions.checkNotNull(ParameterizedModule.provideNonGenericType(),",
             "        " + NPE_FROM_PROVIDES_METHOD + ");",
             "  }",
+            "",
+            "  private static final class InstanceHolder {",
+            "    private static final ParameterizedModule_ProvideNonGenericTypeFactory INSTANCE =",
+            "        new ParameterizedModule_ProvideNonGenericTypeFactory();",
+            "  }",
             "}");
 
     JavaFileObject provideNonGenericTypeWithDepsFactory =
@@ -1418,7 +1422,7 @@ public void proxyMethodsConflictWithOtherFactoryMethods() {
                 "  }",
                 "",
                 "  public static TestModule_GetFactory create() {",
-                "    return INSTANCE;",
+                "    return InstanceHolder.INSTANCE;",
                 "  }",
                 "",
                 "  public static int proxyGet() {",
@@ -1441,7 +1445,7 @@ public void proxyMethodsConflictWithOtherFactoryMethods() {
                 "  }",
                 "",
                 "  public static TestModule_CreateFactory create() {",
-                "    return INSTANCE;",
+                "    return InstanceHolder.INSTANCE;",
                 "  }",
                 "",
                 "  public static boolean proxyCreate() {",
