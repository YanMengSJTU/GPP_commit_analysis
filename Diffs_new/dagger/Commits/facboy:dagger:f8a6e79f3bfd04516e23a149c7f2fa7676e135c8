diff --git a/java/dagger/internal/codegen/BindingGraphConverter.java b/java/dagger/internal/codegen/BindingGraphConverter.java
index 3902743d8..bbc0eef36 100644
--- a/java/dagger/internal/codegen/BindingGraphConverter.java
+++ b/java/dagger/internal/codegen/BindingGraphConverter.java
@@ -21,7 +21,6 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.collect.Iterables.concat;
 import static dagger.internal.codegen.DaggerStreams.instancesOf;
-import static dagger.model.BindingGraphProxies.bindingNode;
 import static dagger.model.BindingGraphProxies.childFactoryMethodEdge;
 import static dagger.model.BindingGraphProxies.componentNode;
 import static dagger.model.BindingGraphProxies.dependencyEdge;
@@ -106,7 +105,7 @@ protected void visitBinding(Binding binding, ComponentDescriptor owningComponent
       // TODO(dpb): Should we visit only bindings owned by the current component, since other
       // bindings will be visited in the parent?
       Node previous = current;
-      current = newBindingNode(resolvedBindings(), binding, owningComponent);
+      current = bindingNode(resolvedBindings(), binding, owningComponent);
       network.addNode(current);
       if (binding instanceof ContributionBinding) {
         ContributionBinding contributionBinding = (ContributionBinding) binding;
@@ -148,7 +147,7 @@ private ComponentNode subcomponentNode(
       return childNode;
     }
 
-    private BindingNode newBindingNode(
+    private BindingNode bindingNode(
         ResolvedBindings resolvedBindings, Binding binding, ComponentDescriptor owningComponent) {
       ImmutableList.Builder<Element> associatedDeclarations = ImmutableList.builder();
       for (BindingDeclaration declaration :
@@ -158,7 +157,7 @@ private BindingNode newBindingNode(
               resolvedBindings.subcomponentDeclarations())) {
         associatedDeclarations.add(declaration.bindingElement().get());
       }
-      return bindingNode(
+      return BindingGraphProxies.bindingNode(
           componentTreePath().pathFromRootToAncestor(owningComponent).toComponentPath(),
           binding,
           associatedDeclarations.build());
diff --git a/java/dagger/model/BindingGraph.java b/java/dagger/model/BindingGraph.java
index ab089c6a1..40a579e4f 100644
--- a/java/dagger/model/BindingGraph.java
+++ b/java/dagger/model/BindingGraph.java
@@ -30,6 +30,7 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.common.graph.ImmutableNetwork;
 import com.google.common.graph.Network;
+import com.google.errorprone.annotations.DoNotMock;
 import dagger.BindsOptionalOf;
 import dagger.Module;
 import dagger.model.BindingGraph.Edge;
@@ -290,30 +291,21 @@ public String toString() {
    * A <b>binding node</b> in the binding graph. If a binding is owned by more than one component,
    * there is one binding node for that binding for every owning component.
    */
-  // TODO(dpb): Should this be a value type?
-  public static final class BindingNode implements Node {
-
-    private final ComponentPath component;
-    private final Binding binding;
-    private final ImmutableSet<Element> associatedDeclarations;
-
-    BindingNode(
+  @AutoValue
+  @DoNotMock("Use Dagger-supplied implementations")
+  public abstract static class BindingNode implements Node {
+    static BindingNode create(
         ComponentPath component, Binding binding, Iterable<Element> associatedDeclarations) {
-      this.component = component;
-      this.binding = binding;
-      this.associatedDeclarations = ImmutableSet.copyOf(associatedDeclarations);
+      return new AutoValue_BindingGraph_BindingNode(
+          component, binding, ImmutableSet.copyOf(associatedDeclarations));
     }
 
     /** The component that owns the {@link #binding()}. */
     @Override
-    public ComponentPath componentPath() {
-      return component;
-    }
+    public abstract ComponentPath componentPath();
 
     /** The binding. */
-    public Binding binding() {
-      return binding;
-    }
+    public abstract Binding binding();
 
     /**
      * The {@link Element}s (other than the binding's {@link Binding#bindingElement()}) that are
@@ -325,18 +317,7 @@ public Binding binding() {
      *   <li>{@linkplain Multibinds multibinding} declarations
      * </ul>
      */
-    public ImmutableSet<Element> associatedDeclarations() {
-      return associatedDeclarations;
-    }
-
-    @Override
-    public String toString() {
-      return toStringHelper(this)
-          .add("component", component)
-          .add("binding", binding)
-          .add("associatedDeclarations", associatedDeclarations)
-          .toString();
-    }
+    public abstract ImmutableSet<Element> associatedDeclarations();
   }
 
   /**
diff --git a/java/dagger/model/BindingGraphProxies.java b/java/dagger/model/BindingGraphProxies.java
index 2e5cd83b7..a6aa9f570 100644
--- a/java/dagger/model/BindingGraphProxies.java
+++ b/java/dagger/model/BindingGraphProxies.java
@@ -42,7 +42,7 @@ public static BindingGraph bindingGraph(Network<Node, Edge> network) {
   /** Creates a new {@link BindingNode}. */
   public static BindingNode bindingNode(
       ComponentPath component, Binding binding, Iterable<Element> associatedDeclarations) {
-    return new BindingNode(component, binding, associatedDeclarations);
+    return BindingNode.create(component, binding, associatedDeclarations);
   }
 
   /** Creates a new {@link ComponentNode}. */
