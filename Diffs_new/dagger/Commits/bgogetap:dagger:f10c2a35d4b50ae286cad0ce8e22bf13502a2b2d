diff --git a/java/dagger/android/ActivityKey.java b/java/dagger/android/ActivityKey.java
index 22b94171d..772ff1b7f 100644
--- a/java/dagger/android/ActivityKey.java
+++ b/java/dagger/android/ActivityKey.java
@@ -24,11 +24,17 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Target;
 
-/** {@link MapKey} annotation to key bindings by a type of an {@link Activity}. */
+/**
+ * {@link MapKey} annotation to key bindings by a type of an {@link Activity}.
+ *
+ * @deprecated Use {@link dagger.multibindings.ClassKey} instead. See <a
+ *     href="https://google.github.io/dagger/android">https://google.github.io/dagger/android</a>.
+ */
 @Beta
 @MapKey
 @Documented
 @Target(METHOD)
+@Deprecated
 public @interface ActivityKey {
   Class<? extends Activity> value();
 }
diff --git a/java/dagger/android/BUILD b/java/dagger/android/BUILD
index 6dfa1c5e3..a88d16e3e 100644
--- a/java/dagger/android/BUILD
+++ b/java/dagger/android/BUILD
@@ -23,7 +23,7 @@ load(
     "DOCLINT_REFERENCES",
     "SOURCE_7_TARGET_7",
 )
-load("//tools:maven.bzl", "pom_file", "POM_VERSION")
+load("//tools:maven.bzl", "POM_VERSION", "pom_file")
 
 # Work around b/70476182 which prevents Kythe from connecting :producers to the .java files it
 # contains.
diff --git a/java/dagger/android/BroadcastReceiverKey.java b/java/dagger/android/BroadcastReceiverKey.java
index 653de8f35..db2974a0e 100644
--- a/java/dagger/android/BroadcastReceiverKey.java
+++ b/java/dagger/android/BroadcastReceiverKey.java
@@ -24,11 +24,17 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Target;
 
-/** {@link MapKey} annotation to key bindings by a type of a {@link BroadcastReceiver}. */
+/**
+ * {@link MapKey} annotation to key bindings by a type of a {@link BroadcastReceiver}
+ *
+ * @deprecated Use {@link dagger.multibindings.ClassKey} instead. See <a
+ *     href="https://google.github.io/dagger/android">https://google.github.io/dagger/android</a>.
+ */
 @Beta
 @MapKey
 @Documented
 @Target(METHOD)
+@Deprecated
 public @interface BroadcastReceiverKey {
   Class<? extends BroadcastReceiver> value();
 }
diff --git a/java/dagger/android/ContentProviderKey.java b/java/dagger/android/ContentProviderKey.java
index 9f12e44d8..44123a4c6 100644
--- a/java/dagger/android/ContentProviderKey.java
+++ b/java/dagger/android/ContentProviderKey.java
@@ -24,11 +24,17 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Target;
 
-/** {@link MapKey} annotation to key bindings by a type of a {@link ContentProvider}. */
+/**
+ * {@link MapKey} annotation to key bindings by a type of a {@link ContentProvider}.
+ *
+ * @deprecated Use {@link dagger.multibindings.ClassKey} instead. See <a
+ *     href="https://google.github.io/dagger/android">https://google.github.io/dagger/android</a>.
+ */
 @Beta
 @MapKey
 @Documented
 @Target(METHOD)
+@Deprecated
 public @interface ContentProviderKey {
   Class<? extends ContentProvider> value();
 }
diff --git a/java/dagger/android/FragmentKey.java b/java/dagger/android/FragmentKey.java
index 3372a0645..9c987dce8 100644
--- a/java/dagger/android/FragmentKey.java
+++ b/java/dagger/android/FragmentKey.java
@@ -24,11 +24,17 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Target;
 
-/** {@link MapKey} annotation to key bindings by a type of a {@link Fragment}. */
+/**
+ * {@link MapKey} annotation to key bindings by a type of a {@link Fragment}.
+ *
+ * @deprecated Use {@link dagger.multibindings.ClassKey} instead. See <a
+ *     href="https://google.github.io/dagger/android">https://google.github.io/dagger/android</a>.
+ */
 @Beta
 @MapKey
 @Documented
 @Target(METHOD)
+@Deprecated
 public @interface FragmentKey {
   Class<? extends Fragment> value();
 }
diff --git a/java/dagger/android/ServiceKey.java b/java/dagger/android/ServiceKey.java
index 834868c53..7bd88ce9d 100644
--- a/java/dagger/android/ServiceKey.java
+++ b/java/dagger/android/ServiceKey.java
@@ -24,11 +24,17 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Target;
 
-/** {@link MapKey} annotation to key bindings by a type of a {@link Service}. */
+/**
+ * {@link MapKey} annotation to key bindings by a type of a {@link Service}.
+ *
+ * @deprecated Use {@link dagger.multibindings.ClassKey} instead. See <a
+ *     href="https://google.github.io/dagger/android">https://google.github.io/dagger/android</a>.
+ */
 @Beta
 @MapKey
 @Documented
 @Target(METHOD)
+@Deprecated
 public @interface ServiceKey {
   Class<? extends Service> value();
 }
diff --git a/java/dagger/android/processor/AndroidMapKeyValidator.java b/java/dagger/android/processor/AndroidMapKeyValidator.java
index 653534e8a..4003918de 100644
--- a/java/dagger/android/processor/AndroidMapKeyValidator.java
+++ b/java/dagger/android/processor/AndroidMapKeyValidator.java
@@ -26,7 +26,9 @@
 import com.google.auto.common.BasicAnnotationProcessor.ProcessingStep;
 import com.google.auto.common.MoreElements;
 import com.google.auto.common.MoreTypes;
+import com.google.common.base.Equivalence;
 import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.Lists;
 import com.google.common.collect.SetMultimap;
 import dagger.Binds;
 import dagger.MapKey;
@@ -44,6 +46,7 @@
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeMirror;
+import javax.lang.model.type.WildcardType;
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 import javax.tools.Diagnostic.Kind;
@@ -130,36 +133,35 @@ private void validateMethod(Class<? extends Annotation> annotation, ExecutableEl
    */
   private void validateReturnTypeMatchesMapKey(
       ExecutableElement method, Class<? extends Annotation> mapKeyType) {
-    TypeMirror returnType = method.getReturnType();
-    DeclaredType boundedInjectorFactoryType =
-        injectorFactoryOf(types.getWildcardType(frameworkTypeForMapKey(method), null));
-    DeclaredType unboundedInjectorFactoryType =
-        injectorFactoryOf(types.getWildcardType(null, null));
-
-    // first check the original return type format, AndroidInjector.Factory<? extends FRAMEWORK>.
-    // This should match all map keys besides ClassKey.
-    boolean isValidReturnType =
-        mapKeyType != ClassKey.class
-            && MoreTypes.equivalence().equivalent(returnType, boundedInjectorFactoryType);
-
-    // if the first check fails, check if the return type matches the new, all-encompassing
-    // multibindings: AndroidInjector.Factory<?>. This is only supported for ClassKey (which has an
-    // unbounded Class<?> return type) or AndroidInjectionKey
-    isValidReturnType |=
-        ((mapKeyType == ClassKey.class || mapKeyType == AndroidInjectionKey.class)
-            && MoreTypes.equivalence().equivalent(returnType, unboundedInjectorFactoryType));
-
-    if (!isValidReturnType) {
-      String subject =
-          mapKeyType.equals(AndroidInjectionKey.class)
-              ? method.toString()
-              : String.format("@%s methods", mapKeyType.getCanonicalName());
+    WildcardType any = types.getWildcardType(null, null);
+    WildcardType anyExtendsFrameworkType =
+        types.getWildcardType(frameworkTypeForMapKey(method), null);
+
+    if (mapKeyType == ClassKey.class) {
+      validateReturnType(method, injectorFactoryOf(any));
+    } else if (mapKeyType == AndroidInjectionKey.class) {
+      validateReturnType(
+          method,
+          injectorFactoryOf(any) ,
+          injectorFactoryOf(anyExtendsFrameworkType));
+    } else {
+      validateReturnType(method, injectorFactoryOf(anyExtendsFrameworkType));
+    }
+  }
 
+  private void validateReturnType(
+      ExecutableElement method,
+      DeclaredType idealReturnType,
+      DeclaredType... otherPossibleReturnTypes) {
+    Equivalence<TypeMirror> equivalence = MoreTypes.equivalence();
+    TypeMirror returnType = method.getReturnType();
+    if (Lists.asList(idealReturnType, otherPossibleReturnTypes).stream()
+        .noneMatch(validReturnType -> equivalence.equivalent(validReturnType, returnType))) {
       messager.printMessage(
           Kind.ERROR,
           String.format(
               "%s should bind %s, not %s. See https://google.github.io/dagger/android",
-              subject, boundedInjectorFactoryType, returnType),
+              method, idealReturnType, returnType),
           method);
     }
   }
diff --git a/java/dagger/android/support/FragmentKey.java b/java/dagger/android/support/FragmentKey.java
index 902574be2..090e34da9 100644
--- a/java/dagger/android/support/FragmentKey.java
+++ b/java/dagger/android/support/FragmentKey.java
@@ -24,11 +24,17 @@
 import java.lang.annotation.Documented;
 import java.lang.annotation.Target;
 
-/** {@link MapKey} annotation to key bindings by a type of a {@link Fragment}. */
+/**
+ * {@link MapKey} annotation to key bindings by a type of a {@link Fragment}.
+ *
+ * @deprecated Use {@link dagger.multibindings.ClassKey} instead. See <a
+ *     href="https://google.github.io/dagger/android">https://google.github.io/dagger/android</a>.
+ */
 @Beta
 @MapKey
 @Documented
 @Target(METHOD)
+@Deprecated
 public @interface FragmentKey {
   Class<? extends Fragment> value();
 }
diff --git a/javatests/dagger/android/DispatchingAndroidInjectorTest.java b/javatests/dagger/android/DispatchingAndroidInjectorTest.java
index bf4241245..d0306b8ce 100644
--- a/javatests/dagger/android/DispatchingAndroidInjectorTest.java
+++ b/javatests/dagger/android/DispatchingAndroidInjectorTest.java
@@ -21,7 +21,10 @@
 
 import android.app.Activity;
 import com.google.common.collect.ImmutableMap;
+import dagger.android.AndroidInjector.Factory;
 import dagger.android.DispatchingAndroidInjector.InvalidInjectorBindingException;
+import java.util.Map;
+import javax.inject.Provider;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
@@ -34,11 +37,8 @@
   @Test
   public void withClassKeys() {
     DispatchingAndroidInjector<Activity> dispatchingAndroidInjector =
-        new DispatchingAndroidInjector<>(
-            ImmutableMap.of(FooActivity.class, FooInjector.Factory::new),
-            ImmutableMap.of(),
-            ImmutableMap.of(),
-            ImmutableMap.of());
+        newDispatchingAndroidInjector(
+            ImmutableMap.of(FooActivity.class, FooInjector.Factory::new), ImmutableMap.of());
 
     FooActivity activity = Robolectric.setupActivity(FooActivity.class);
     assertThat(dispatchingAndroidInjector.maybeInject(activity)).isTrue();
@@ -47,11 +47,9 @@ public void withClassKeys() {
   @Test
   public void withStringKeys() {
     DispatchingAndroidInjector<Activity> dispatchingAndroidInjector =
-        new DispatchingAndroidInjector<>(
+        newDispatchingAndroidInjector(
             ImmutableMap.of(),
-            ImmutableMap.of(FooActivity.class.getName(), FooInjector.Factory::new),
-            ImmutableMap.of(),
-            ImmutableMap.of());
+            ImmutableMap.of(FooActivity.class.getName(), FooInjector.Factory::new));
 
     FooActivity activity = Robolectric.setupActivity(FooActivity.class);
     assertThat(dispatchingAndroidInjector.maybeInject(activity)).isTrue();
@@ -60,11 +58,9 @@ public void withStringKeys() {
   @Test
   public void withMixedKeys() {
     DispatchingAndroidInjector<Activity> dispatchingAndroidInjector =
-        new DispatchingAndroidInjector<>(
+        newDispatchingAndroidInjector(
             ImmutableMap.of(FooActivity.class, FooInjector.Factory::new),
-            ImmutableMap.of(BarActivity.class.getName(), BarInjector.Factory::new),
-            ImmutableMap.of(),
-            ImmutableMap.of());
+            ImmutableMap.of(BarActivity.class.getName(), BarInjector.Factory::new));
 
     FooActivity fooActivity = Robolectric.setupActivity(FooActivity.class);
     assertThat(dispatchingAndroidInjector.maybeInject(fooActivity)).isTrue();
@@ -75,8 +71,7 @@ public void withMixedKeys() {
   @Test
   public void maybeInject_returnsFalse_ifNoMatchingInjectorExists() {
     DispatchingAndroidInjector<Activity> dispatchingAndroidInjector =
-        new DispatchingAndroidInjector<>(
-            ImmutableMap.of(), ImmutableMap.of(), ImmutableMap.of(), ImmutableMap.of());
+        newDispatchingAndroidInjector(ImmutableMap.of(), ImmutableMap.of());
 
     BarActivity activity = Robolectric.setupActivity(BarActivity.class);
     assertThat(dispatchingAndroidInjector.maybeInject(activity)).isFalse();
@@ -85,11 +80,8 @@ public void maybeInject_returnsFalse_ifNoMatchingInjectorExists() {
   @Test
   public void throwsIfFactoryCreateReturnsNull() {
     DispatchingAndroidInjector<Activity> dispatchingAndroidInjector =
-        new DispatchingAndroidInjector<>(
-            ImmutableMap.of(FooActivity.class, () -> null),
-            ImmutableMap.of(),
-            ImmutableMap.of(),
-            ImmutableMap.of());
+        newDispatchingAndroidInjector(
+            ImmutableMap.of(FooActivity.class, () -> null), ImmutableMap.of());
     FooActivity activity = Robolectric.setupActivity(FooActivity.class);
 
     try {
@@ -102,11 +94,8 @@ public void throwsIfFactoryCreateReturnsNull() {
   @Test
   public void throwsIfClassMismatched() {
     DispatchingAndroidInjector<Activity> dispatchingAndroidInjector =
-        new DispatchingAndroidInjector<>(
-            ImmutableMap.of(FooActivity.class, BarInjector.Factory::new),
-            ImmutableMap.of(),
-            ImmutableMap.of(),
-            ImmutableMap.of());
+        newDispatchingAndroidInjector(
+            ImmutableMap.of(FooActivity.class, BarInjector.Factory::new), ImmutableMap.of());
     FooActivity activity = Robolectric.setupActivity(FooActivity.class);
 
     try {
@@ -116,6 +105,17 @@ public void throwsIfClassMismatched() {
     }
   }
 
+  private static <T> DispatchingAndroidInjector<T> newDispatchingAndroidInjector(
+      Map<Class<?>, Provider<Factory<?>>> injectorFactoriesWithClassKeys,
+      Map<String, Provider<AndroidInjector.Factory<?>>>
+          injectorFactoriesWithStringKeys) {
+    return new DispatchingAndroidInjector<>(
+        injectorFactoriesWithClassKeys,
+        injectorFactoriesWithStringKeys ,
+        ImmutableMap.of(),
+        ImmutableMap.of());
+  }
+
   static class FooActivity extends Activity {}
 
   static class BarActivity extends Activity {}
diff --git a/javatests/dagger/android/processor/AndroidMapKeyValidatorTest.java b/javatests/dagger/android/processor/AndroidMapKeyValidatorTest.java
index 7e2199aec..024a70418 100644
--- a/javatests/dagger/android/processor/AndroidMapKeyValidatorTest.java
+++ b/javatests/dagger/android/processor/AndroidMapKeyValidatorTest.java
@@ -87,15 +87,14 @@ public void rawFactoryType() {
         moduleWithMethod(
             "@Binds",
             "@IntoMap",
-            "@ActivityKey(FooActivity.class)",
+            "@ClassKey(FooActivity.class)",
             "abstract AndroidInjector.Factory bindRawFactory(FooActivity.Factory factory);");
     Compilation compilation = compile(module, FOO_ACTIVITY);
     assertThat(compilation).failed();
     assertThat(compilation)
         .hadErrorContaining(
-            "@dagger.android.ActivityKey methods should bind "
-                + "dagger.android.AndroidInjector.Factory<? extends android.app.Activity>, not "
-                + "dagger.android.AndroidInjector.Factory");
+            "should bind dagger.android.AndroidInjector.Factory<?>, "
+                + "not dagger.android.AndroidInjector.Factory");
   }
 
   @Test
@@ -104,15 +103,14 @@ public void rawBuilderType() {
         moduleWithMethod(
             "@Binds",
             "@IntoMap",
-            "@ActivityKey(FooActivity.class)",
+            "@ClassKey(FooActivity.class)",
             "abstract AndroidInjector.Builder bindRawBuilder(FooActivity.Builder builder);");
     Compilation compilation = compile(module, FOO_ACTIVITY);
     assertThat(compilation).failed();
     assertThat(compilation)
         .hadErrorContaining(
-            "@dagger.android.ActivityKey methods should bind "
-                + "dagger.android.AndroidInjector.Factory<? extends android.app.Activity>, not "
-                + "dagger.android.AndroidInjector.Builder");
+            "should bind dagger.android.AndroidInjector.Factory<?>, "
+                + "not dagger.android.AndroidInjector.Builder");
   }
 
   @Test
@@ -121,16 +119,15 @@ public void bindsToBuilderNotFactory() {
         moduleWithMethod(
             "@Binds",
             "@IntoMap",
-            "@ActivityKey(FooActivity.class)",
-            "abstract AndroidInjector.Builder<? extends Activity> bindBuilder(",
+            "@ClassKey(FooActivity.class)",
+            "abstract AndroidInjector.Builder<?> bindBuilder(",
             "    FooActivity.Builder builder);");
     Compilation compilation = compile(module, FOO_ACTIVITY);
     assertThat(compilation).failed();
     assertThat(compilation)
         .hadErrorContaining(
-            "@dagger.android.ActivityKey methods should bind "
-                + "dagger.android.AndroidInjector.Factory<? extends android.app.Activity>, not "
-                + "dagger.android.AndroidInjector.Builder<? extends android.app.Activity>");
+            "should bind dagger.android.AndroidInjector.Factory<?>, not "
+                + "dagger.android.AndroidInjector.Builder<?>");
   }
 
   @Test
@@ -139,18 +136,16 @@ public void providesToBuilderNotFactory() {
         moduleWithMethod(
             "@Provides",
             "@IntoMap",
-            "@ActivityKey(FooActivity.class)",
-            "static AndroidInjector.Builder<? extends Activity> bindBuilder(",
-            "    FooActivity.Builder builder) {",
+            "@ClassKey(FooActivity.class)",
+            "static AndroidInjector.Builder<?> bindBuilder(FooActivity.Builder builder) {",
             "  return builder;",
             "}");
     Compilation compilation = compile(module, FOO_ACTIVITY);
     assertThat(compilation).failed();
     assertThat(compilation)
         .hadErrorContaining(
-            "@dagger.android.ActivityKey methods should bind "
-                + "dagger.android.AndroidInjector.Factory<? extends android.app.Activity>, not "
-                + "dagger.android.AndroidInjector.Builder<? extends android.app.Activity>");
+            "should bind dagger.android.AndroidInjector.Factory<?>, not "
+                + "dagger.android.AndroidInjector.Builder<?>");
   }
 
   @Test
@@ -166,9 +161,8 @@ public void mapKeyDoesntMatchCoreType() {
     assertThat(compilation).failed();
     assertThat(compilation)
         .hadErrorContaining(
-            "@dagger.android.FragmentKey methods should bind "
-                + "dagger.android.AndroidInjector.Factory<? extends android.app.Fragment>, not "
-                + "dagger.android.AndroidInjector.Factory<? extends android.app.Activity>");
+            "should bind dagger.android.AndroidInjector.Factory<? extends android.app.Fragment>, "
+                + "not dagger.android.AndroidInjector.Factory<? extends android.app.Activity>");
     assertThat(compilation)
         .hadErrorContaining(
             "test.FooActivity.Builder does not implement AndroidInjector<test.BazFragment>")
@@ -189,8 +183,7 @@ public void mapKeyDoesntMatchCoreType_AndroidInjectionKey() {
     assertThat(compilation).failed();
     assertThat(compilation)
         .hadErrorContaining(
-            "bindWrongFrameworkType(test.FooActivity.Builder) should bind "
-                + "dagger.android.AndroidInjector.Factory<? extends android.app.Fragment>, not "
+            "should bind dagger.android.AndroidInjector.Factory<?>, not "
                 + "dagger.android.AndroidInjector.Factory<? extends android.app.Activity>");
     assertThat(compilation)
         .hadErrorContaining(
@@ -224,9 +217,8 @@ public void mapKeyDoesntMatchCoreType_supportFragments() {
     assertThat(compilation).failed();
     assertThat(compilation)
         .hadErrorContaining(
-            "@dagger.android.FragmentKey methods should bind "
-                + "dagger.android.AndroidInjector.Factory<? extends android.app.Fragment>, not "
-                + "dagger.android.AndroidInjector.Factory<? extends "
+            "should bind dagger.android.AndroidInjector.Factory<? extends android.app.Fragment>, "
+                + "not dagger.android.AndroidInjector.Factory<? extends "
                 + "android.support.v4.app.Fragment>");
     assertThat(compilation)
         .hadErrorContaining(
@@ -241,15 +233,14 @@ public void bindsToConcreteTypeInsteadOfWildcard() {
         moduleWithMethod(
             "@Binds",
             "@IntoMap",
-            "@ActivityKey(FooActivity.class)",
+            "@ClassKey(FooActivity.class)",
             "abstract AndroidInjector.Builder<FooActivity> bindBuilder(",
             "    FooActivity.Builder builder);");
     Compilation compilation = compile(module, FOO_ACTIVITY);
     assertThat(compilation).failed();
     assertThat(compilation)
         .hadErrorContaining(
-            "@dagger.android.ActivityKey methods should bind "
-                + "dagger.android.AndroidInjector.Factory<? extends android.app.Activity>, not "
+            "should bind dagger.android.AndroidInjector.Factory<?>, not "
                 + "dagger.android.AndroidInjector.Builder<test.FooActivity>");
   }
 
@@ -259,7 +250,7 @@ public void bindsToBaseTypeInsteadOfWildcard() {
         moduleWithMethod(
             "@Binds",
             "@IntoMap",
-            "@ActivityKey(FooActivity.class)",
+            "@ClassKey(FooActivity.class)",
             "abstract AndroidInjector.Builder<Activity> bindBuilder(",
             "    FooActivity.Builder builder);");
     Compilation compilation = compile(module, FOO_ACTIVITY);
@@ -306,16 +297,27 @@ public void bindsCorrectType_AndroidInjectionKey() {
     assertThat(compilation).succeededWithoutWarnings();
   }
 
+  @Test
+  public void bindsCorrectType_AndroidInjectionKey_unbounded() {
+    JavaFileObject module =
+        moduleWithMethod(
+            "@Binds",
+            "@IntoMap",
+            "@AndroidInjectionKey(\"test.FooActivity\")",
+            "abstract AndroidInjector.Factory<?> bindCorrectType(FooActivity.Builder builder);");
+    Compilation compilation = compile(module, FOO_ACTIVITY);
+    assertThat(compilation).succeededWithoutWarnings();
+  }
+
   @Test
   public void bindsWithScope() {
     JavaFileObject module =
         moduleWithMethod(
             "@Binds",
             "@IntoMap",
-            "@ActivityKey(FooActivity.class)",
+            "@ClassKey(FooActivity.class)",
             "@Singleton",
-            "abstract AndroidInjector.Factory<? extends Activity> bindWithScope(",
-            "    FooActivity.Builder builder);");
+            "abstract AndroidInjector.Factory<?> bindWithScope(FooActivity.Builder builder);");
     Compilation compilation = compile(module, FOO_ACTIVITY);
     assertThat(compilation).failed();
     assertThat(compilation).hadErrorContaining("should not be scoped");
@@ -328,10 +330,9 @@ public void bindsWithScope_suppressWarnings() {
             "@SuppressWarnings(\"dagger.android.ScopedInjectorFactory\")",
             "@Binds",
             "@IntoMap",
-            "@ActivityKey(FooActivity.class)",
+            "@ClassKey(FooActivity.class)",
             "@Singleton",
-            "abstract AndroidInjector.Factory<? extends Activity> bindWithScope(",
-            "    FooActivity.Builder builder);");
+            "abstract AndroidInjector.Factory<?> bindWithScope(FooActivity.Builder builder);");
     Compilation compilation = compile(module, FOO_ACTIVITY);
     assertThat(compilation).succeededWithoutWarnings();
   }
@@ -342,9 +343,8 @@ public void mismatchedMapKey_bindsFactory() {
         moduleWithMethod(
             "@Binds",
             "@IntoMap",
-            "@ActivityKey(BarActivity.class)",
-            "abstract AndroidInjector.Factory<?> mismatchedFactory(",
-            "    FooActivity.Factory factory);");
+            "@ClassKey(BarActivity.class)",
+            "abstract AndroidInjector.Factory<?> mismatchedFactory(FooActivity.Factory factory);");
     Compilation compilation = compile(module, FOO_ACTIVITY, BAR_ACTIVITY);
     assertThat(compilation).failed();
     assertThat(compilation)
@@ -360,9 +360,8 @@ public void mismatchedMapKey_bindsBuilder() {
         moduleWithMethod(
             "@Binds",
             "@IntoMap",
-            "@ActivityKey(BarActivity.class)",
-            "abstract AndroidInjector.Factory<? extends Activity> mismatchedBuilder(",
-            "    FooActivity.Builder builder);");
+            "@ClassKey(BarActivity.class)",
+            "abstract AndroidInjector.Factory<?> mismatchedBuilder(FooActivity.Builder builder);");
     Compilation compilation = compile(module, FOO_ACTIVITY, BAR_ACTIVITY);
     assertThat(compilation).failed();
     assertThat(compilation)
@@ -379,8 +378,7 @@ public void mismatchedMapKey_bindsBuilder_androidInjectionKey() {
             "@Binds",
             "@IntoMap",
             "@AndroidInjectionKey(\"test.BarActivity\")",
-            "abstract AndroidInjector.Factory<? extends Activity> mismatchedBuilder(",
-            "    FooActivity.Builder builder);");
+            "abstract AndroidInjector.Factory<?> mismatchedBuilder(FooActivity.Builder builder);");
     Compilation compilation = compile(module, FOO_ACTIVITY, BAR_ACTIVITY);
     assertThat(compilation).failed();
     assertThat(compilation)
@@ -396,9 +394,8 @@ public void mismatchedMapKey_providesBuilder() {
         moduleWithMethod(
             "@Provides",
             "@IntoMap",
-            "@ActivityKey(BarActivity.class)",
-            "static AndroidInjector.Factory<? extends Activity> mismatchedBuilder(",
-            "    FooActivity.Builder builder) {",
+            "@ClassKey(BarActivity.class)",
+            "static AndroidInjector.Factory<?> mismatchedBuilder(FooActivity.Builder builder) {",
             "  return builder;",
             "}");
     Compilation compilation = compile(module, FOO_ACTIVITY, BAR_ACTIVITY);
@@ -411,7 +408,7 @@ public void bindsQualifier_ignoresChecks() {
         moduleWithMethod(
             "@Binds",
             "@IntoMap",
-            "@ActivityKey(FooActivity.class)",
+            "@ClassKey(FooActivity.class)",
             "@Named(\"unused\")",
             // normally this should fail, since it is binding to a Builder not a Factory
             "abstract AndroidInjector.Builder<?> bindsBuilderWithQualifier(",
@@ -426,7 +423,7 @@ public void bindToPrimitive() {
         moduleWithMethod(
             "@Binds",
             "@IntoMap",
-            "@ActivityKey(FooActivity.class)",
+            "@AndroidInjectionKey(\"test.FooActivity\")",
             "abstract int bindInt(@Named(\"unused\") int otherInt);");
     Compilation compilation = compile(module, FOO_ACTIVITY);
     assertThat(compilation).succeededWithoutWarnings();
@@ -438,7 +435,7 @@ public void bindToNonFrameworkClass() {
         moduleWithMethod(
             "@Binds",
             "@IntoMap",
-            "@ActivityKey(FooActivity.class)",
+            "@AndroidInjectionKey(\"test.FooActivity\")",
             "abstract Number bindInt(Integer integer);");
     Compilation compilation = compile(module, FOO_ACTIVITY);
     assertThat(compilation).succeededWithoutWarnings();
@@ -450,7 +447,7 @@ public void invalidBindsMethod() {
         moduleWithMethod(
             "@Binds",
             "@IntoMap",
-            "@ActivityKey(FooActivity.class)",
+            "@ClassKey(FooActivity.class)",
             "abstract AndroidInjector.Factory<?> bindCorrectType(",
             "    FooActivity.Builder builder, FooActivity.Builder builder2);");
     Compilation compilation = compile(module, FOO_ACTIVITY);
diff --git a/javatests/dagger/android/processor/DuplicateAndroidInjectorsCheckerTest.java b/javatests/dagger/android/processor/DuplicateAndroidInjectorsCheckerTest.java
index f0ef97eaf..fac8789fa 100644
--- a/javatests/dagger/android/processor/DuplicateAndroidInjectorsCheckerTest.java
+++ b/javatests/dagger/android/processor/DuplicateAndroidInjectorsCheckerTest.java
@@ -87,6 +87,7 @@ public void conflictingMapKeys() {
             "  @AndroidInjectionKey(\"test.TestActivity\")",
             "  AndroidInjector.Factory<? extends Activity> boundedStringKey(",
             "      TestInjectorFactory factory);",
+
             "}");
     JavaFileObject component =
         JavaFileObjects.forSourceLines(
@@ -115,6 +116,7 @@ public void conflictingMapKeys() {
     assertThat(compilation).hadErrorContaining("stringKey(test.TestInjectorFactory)");
     assertThat(compilation).hadErrorContaining("boundedClassKey(test.TestInjectorFactory)");
     assertThat(compilation).hadErrorContaining("boundedStringKey(test.TestInjectorFactory)");
+
     assertThat(compilation).hadErrorCount(1);
   }
 }
