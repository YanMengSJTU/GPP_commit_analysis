diff --git a/java/dagger/internal/codegen/BindingType.java b/java/dagger/internal/codegen/BindingType.java
index 696f00e76..2aefe4522 100644
--- a/java/dagger/internal/codegen/BindingType.java
+++ b/java/dagger/internal/codegen/BindingType.java
@@ -26,27 +26,24 @@
 import javax.inject.Provider;
 
 /** Whether a binding or declaration is for provision, production, or a {@link MembersInjector}. */
-// TODO(dpb): Merge with FrameworkType?
 enum BindingType {
   /** A binding with this type is a {@link ProvisionBinding}. */
-  PROVISION(Provider.class, FrameworkType.PROVIDER),
+  PROVISION(Provider.class),
 
   /** A binding with this type is a {@link MembersInjectionBinding}. */
-  MEMBERS_INJECTION(MembersInjector.class, FrameworkType.MEMBERS_INJECTOR),
+  MEMBERS_INJECTION(MembersInjector.class),
 
   /** A binding with this type is a {@link ProductionBinding}. */
-  PRODUCTION(Producer.class, FrameworkType.PRODUCER),
+  PRODUCTION(Producer.class),
   ;
 
   static final ImmutableSet<BindingType> CONTRIBUTION_TYPES =
       Sets.immutableEnumSet(PROVISION, PRODUCTION);
 
   private final Class<?> frameworkClass;
-  private final FrameworkType frameworkType;
 
-  private BindingType(Class<?> frameworkClass, FrameworkType frameworkType) {
+  BindingType(Class<?> frameworkClass) {
     this.frameworkClass = frameworkClass;
-    this.frameworkType = frameworkType;
   }
 
   /** The framework class associated with bindings of this type. */
@@ -54,11 +51,6 @@ private BindingType(Class<?> frameworkClass, FrameworkType frameworkType) {
     return frameworkClass;
   }
 
-  /** The framework type used to represent bindings of this type. */
-  FrameworkType frameworkType() {
-    return frameworkType;
-  }
-
   /** Returns the {@link #frameworkClass()} parameterized with a type. */
   ParameterizedTypeName frameworkClassOf(TypeName valueType) {
     return ParameterizedTypeName.get(ClassName.get(frameworkClass()), valueType);
diff --git a/java/dagger/internal/codegen/ComponentBindingExpressions.java b/java/dagger/internal/codegen/ComponentBindingExpressions.java
index 3516812b6..c47747d0c 100644
--- a/java/dagger/internal/codegen/ComponentBindingExpressions.java
+++ b/java/dagger/internal/codegen/ComponentBindingExpressions.java
@@ -336,7 +336,7 @@ private BindingExpression createBindingExpression(
           return frameworkInstanceBindingExpression(resolvedBindings);
         } else {
           return new DerivedFromFrameworkInstanceBindingExpression(
-              resolvedBindings, requestKind, this, types);
+              resolvedBindings, FrameworkType.PRODUCER, requestKind, this, types);
         }
 
       default:
@@ -464,16 +464,15 @@ private FrameworkInstanceBindingExpression frameworkInstanceBindingExpression(
             : new FrameworkFieldInitializer(
                 generatedComponentModel, resolvedBindings, frameworkInstanceCreationExpression);
 
-    FrameworkType frameworkType = resolvedBindings.bindingType().frameworkType();
-    switch (frameworkType) {
-      case PROVIDER:
+    switch (resolvedBindings.bindingType()) {
+      case PROVISION:
         return new ProviderInstanceBindingExpression(
             resolvedBindings, frameworkInstanceSupplier, types, elements);
-      case PRODUCER:
+      case PRODUCTION:
         return new ProducerInstanceBindingExpression(
             resolvedBindings, frameworkInstanceSupplier, types, elements);
       default:
-        throw new AssertionError("invalid framework type: " + frameworkType);
+        throw new AssertionError("invalid binding type: " + resolvedBindings.bindingType());
     }
   }
 
@@ -593,7 +592,7 @@ private BindingExpression provisionBindingExpression(
       case PRODUCED:
       case PROVIDER_OF_LAZY:
         return new DerivedFromFrameworkInstanceBindingExpression(
-            resolvedBindings, requestKind, this, types);
+            resolvedBindings, FrameworkType.PROVIDER, requestKind, this, types);
 
       case PRODUCER:
         return producerFromProviderBindingExpression(resolvedBindings);
@@ -643,7 +642,7 @@ private BindingExpression providerBindingExpression(ResolvedBindings resolvedBin
    */
   private FrameworkInstanceBindingExpression producerFromProviderBindingExpression(
       ResolvedBindings resolvedBindings) {
-    checkArgument(resolvedBindings.bindingType().frameworkType().equals(FrameworkType.PROVIDER));
+    checkArgument(resolvedBindings.bindingType().equals(BindingType.PROVISION));
     return new ProducerInstanceBindingExpression(
         resolvedBindings,
         new FrameworkFieldInitializer(
@@ -679,7 +678,7 @@ private BindingExpression instanceBindingExpression(ResolvedBindings resolvedBin
           : directInstanceExpression;
     }
     return new DerivedFromFrameworkInstanceBindingExpression(
-        resolvedBindings, RequestKind.INSTANCE, this, types);
+        resolvedBindings, FrameworkType.PROVIDER, RequestKind.INSTANCE, this, types);
   }
 
   /**
diff --git a/java/dagger/internal/codegen/DerivedFromFrameworkInstanceBindingExpression.java b/java/dagger/internal/codegen/DerivedFromFrameworkInstanceBindingExpression.java
index 86a1ba903..97f4aba2a 100644
--- a/java/dagger/internal/codegen/DerivedFromFrameworkInstanceBindingExpression.java
+++ b/java/dagger/internal/codegen/DerivedFromFrameworkInstanceBindingExpression.java
@@ -33,12 +33,13 @@
 
   DerivedFromFrameworkInstanceBindingExpression(
       ResolvedBindings resolvedBindings,
+      FrameworkType frameworkType,
       RequestKind requestKind,
       ComponentBindingExpressions componentBindingExpressions,
       DaggerTypes types) {
     this.key = resolvedBindings.key();
     this.requestKind = checkNotNull(requestKind);
-    this.frameworkType = resolvedBindings.bindingType().frameworkType();
+    this.frameworkType = checkNotNull(frameworkType);
     this.componentBindingExpressions = checkNotNull(componentBindingExpressions);
     this.types = checkNotNull(types);
   }
diff --git a/java/dagger/internal/codegen/FrameworkType.java b/java/dagger/internal/codegen/FrameworkType.java
index 2d4b4e16f..46585ae21 100644
--- a/java/dagger/internal/codegen/FrameworkType.java
+++ b/java/dagger/internal/codegen/FrameworkType.java
@@ -25,7 +25,6 @@
 import com.google.common.util.concurrent.ListenableFuture;
 import com.squareup.javapoet.CodeBlock;
 import dagger.Lazy;
-import dagger.MembersInjector;
 import dagger.internal.DoubleCheck;
 import dagger.internal.ProviderOfLazy;
 import dagger.model.DependencyRequest;
@@ -139,25 +138,6 @@ Expression to(RequestKind requestKind, Expression from, DaggerTypes types) {
       }
     }
   },
-
-  // TODO(ronshapiro): Remove this once MembersInjectionBinding no longer extends Binding
-  /** A {@link MembersInjector}. */
-  MEMBERS_INJECTOR {
-    @Override
-    RequestKind requestKind() {
-      return RequestKind.MEMBERS_INJECTION;
-    }
-
-    @Override
-    CodeBlock to(RequestKind requestKind, CodeBlock from) {
-      throw new UnsupportedOperationException(requestKind.toString());
-    }
-
-    @Override
-    Expression to(RequestKind requestKind, Expression from, DaggerTypes types) {
-      throw new UnsupportedOperationException(requestKind.toString());
-    }
-  },
   ;
 
   /** Returns the {@link RequestKind} matching this framework type. */
