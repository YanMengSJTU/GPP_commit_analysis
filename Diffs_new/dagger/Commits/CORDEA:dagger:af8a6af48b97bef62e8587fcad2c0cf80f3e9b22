diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index 22c8c58a9..e35315cf3 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -311,7 +311,6 @@ java_library(
         "SimpleInvocationBindingExpression.java",
         "SimpleMethodBindingExpression.java",
         "SingleCheckedMethodImplementation.java",
-        "StaticSwitchingProviders.java",
         "SubcomponentBuilderBindingExpression.java",
         "SubcomponentBuilderProviderCreationExpression.java",
         "SubcomponentNames.java",
diff --git a/java/dagger/internal/codegen/CompilerOptions.java b/java/dagger/internal/codegen/CompilerOptions.java
index 44deb0b6a..717b3b167 100644
--- a/java/dagger/internal/codegen/CompilerOptions.java
+++ b/java/dagger/internal/codegen/CompilerOptions.java
@@ -18,7 +18,6 @@
 
 import static com.google.common.base.CaseFormat.LOWER_CAMEL;
 import static com.google.common.base.CaseFormat.UPPER_UNDERSCORE;
-import static com.google.common.base.Preconditions.checkState;
 import static com.google.common.collect.Iterables.concat;
 import static com.google.common.collect.Sets.immutableEnumSet;
 import static dagger.internal.codegen.DaggerStreams.toImmutableSet;
@@ -59,19 +58,6 @@
    */
   abstract boolean fastInit();
 
-  /**
-   * Returns true if the experimental Android mode 2 is enabled.
-   *
-   * <p><b>Warning: Do Not use! This flag is for internal, experimental use only!</b>
-   *
-   * <p>Issues related to this flag will not be supported. This flag could break your build,
-   * or cause other unknown issues at runtime.
-   *
-   * <p>If enabled, the generated code will try to reduce class loading due to providers by using
-   * a single {@code Provider} class to replace all factory classes.
-   */
-  abstract boolean experimentalAndroidMode2();
-
   abstract boolean formatGeneratedSource();
 
   abstract boolean writeProducerNameInToken();
@@ -122,14 +108,7 @@ static CompilerOptions create(ProcessingEnvironment processingEnv) {
     for (Option option : concat(allOf(Feature.class), allOf(Validation.class))) {
       option.set(builder, processingEnv);
     }
-    return builder.build().validate();
-  }
-
-  CompilerOptions validate() {
-    checkState(
-        !(fastInit() && experimentalAndroidMode2()),
-        "fastInit and experimentalAndroidMode2 cannot be used together.");
-    return this;
+    return builder.build();
   }
 
   @AutoValue.Builder
@@ -141,8 +120,6 @@ CompilerOptions validate() {
 
     Builder fastInit(boolean fastInit);
 
-    Builder experimentalAndroidMode2(boolean experimentalAndroidMode2);
-
     Builder formatGeneratedSource(boolean formatGeneratedSource);
 
     Builder writeProducerNameInToken(boolean writeProducerNameInToken);
@@ -213,8 +190,6 @@ public void set(Builder builder, ProcessingEnvironment processingEnvironment) {
       }
     },
 
-    EXPERIMENTAL_ANDROID_MODE2(Builder::experimentalAndroidMode2),
-
     FORMAT_GENERATED_SOURCE(Builder::formatGeneratedSource, ENABLED),
 
     WRITE_PRODUCER_NAME_IN_TOKEN(Builder::writeProducerNameInToken),
diff --git a/java/dagger/internal/codegen/ComponentBindingExpressions.java b/java/dagger/internal/codegen/ComponentBindingExpressions.java
index dad02af46..0c89e24e9 100644
--- a/java/dagger/internal/codegen/ComponentBindingExpressions.java
+++ b/java/dagger/internal/codegen/ComponentBindingExpressions.java
@@ -66,7 +66,6 @@
   private final CompilerOptions compilerOptions;
   private final MembersInjectionMethods membersInjectionMethods;
   private final InnerSwitchingProviders innerSwitchingProviders;
-  private final StaticSwitchingProviders staticSwitchingProviders;
   private final ModifiableBindingExpressions modifiableBindingExpressions;
   private final Map<BindingRequest, BindingExpression> expressions = new HashMap<>();
 
@@ -75,7 +74,6 @@
       BindingGraph graph,
       ComponentImplementation componentImplementation,
       ComponentRequirementExpressions componentRequirementExpressions,
-      StaticSwitchingProviders staticSwitchingProviders,
       OptionalFactories optionalFactories,
       DaggerTypes types,
       DaggerElements elements,
@@ -92,7 +90,6 @@
         new MembersInjectionMethods(componentImplementation, this, graph, elements, types);
     this.innerSwitchingProviders =
         new InnerSwitchingProviders(componentImplementation, this, types);
-    this.staticSwitchingProviders = staticSwitchingProviders;
     this.modifiableBindingExpressions =
         new ModifiableBindingExpressions(
             parent.map(cbe -> cbe.modifiableBindingExpressions),
@@ -328,9 +325,7 @@ private FrameworkInstanceCreationExpression frameworkInstanceCreationExpression(
 
       case INJECTION:
       case PROVISION:
-        return compilerOptions.experimentalAndroidMode2()
-            ? staticSwitchingProviders.newCreationExpression(binding, this)
-            : new InjectionOrProvisionProviderCreationExpression(binding, this);
+        return new InjectionOrProvisionProviderCreationExpression(binding, this);
 
       case COMPONENT_PRODUCTION:
         return new DependencyMethodProducerCreationExpression(
@@ -584,7 +579,7 @@ private BindingExpression instanceBindingExpression(ResolvedBindings resolvedBin
    * MapFactory} or {@code SetFactory}.
    */
   private boolean useStaticFactoryCreation(ContributionBinding binding) {
-    return !(compilerOptions.experimentalAndroidMode2() || compilerOptions.fastInit())
+    return !compilerOptions.fastInit()
         || binding.kind().equals(MULTIBOUND_MAP)
         || binding.kind().equals(MULTIBOUND_SET);
   }
diff --git a/java/dagger/internal/codegen/FactoryGenerator.java b/java/dagger/internal/codegen/FactoryGenerator.java
index dbbe0e22a..39613119f 100644
--- a/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/java/dagger/internal/codegen/FactoryGenerator.java
@@ -24,7 +24,6 @@
 import static dagger.internal.codegen.AnnotationSpecs.Suppression.UNCHECKED;
 import static dagger.internal.codegen.AnnotationSpecs.suppressWarnings;
 import static dagger.internal.codegen.CodeBlocks.makeParametersCodeBlock;
-import static dagger.internal.codegen.CodeBlocks.toParametersCodeBlock;
 import static dagger.internal.codegen.ContributionBinding.FactoryCreationStrategy.DELEGATE;
 import static dagger.internal.codegen.ContributionBinding.FactoryCreationStrategy.SINGLETON_INSTANCE;
 import static dagger.internal.codegen.GwtCompatibility.gwtIncompatibleAnnotation;
@@ -116,7 +115,6 @@ Element originatingElement(ProvisionBinding binding) {
 
     addConstructorAndFields(binding, factoryBuilder);
     factoryBuilder.addMethod(getMethod(binding));
-    factoryBuilder.addMethod(provideInstanceMethod(binding));
     addCreateMethod(binding, factoryBuilder);
 
     factoryBuilder.addMethod(
@@ -214,33 +212,12 @@ private void addCreateMethod(ProvisionBinding binding, TypeSpec.Builder factoryB
   }
 
   private MethodSpec getMethod(ProvisionBinding binding) {
-    MethodSpec.Builder methodBuilder =
+    TypeName providedTypeName = providedTypeName(binding);
+    MethodSpec.Builder getMethod =
         methodBuilder("get")
             .addAnnotation(Override.class)
             .addModifiers(PUBLIC)
-            .returns(providedTypeName(binding))
-            .addStatement(
-                "return provideInstance($L)",
-                constructorParams(binding)
-                    .stream()
-                    .map(parameter -> CodeBlock.of("$N", parameter))
-                    .collect(toParametersCodeBlock()));
-
-    binding
-        .nullableType()
-        .ifPresent(nullableType -> CodeBlocks.addAnnotation(methodBuilder, nullableType));
-
-    return methodBuilder.build();
-  }
-
-  private MethodSpec provideInstanceMethod(ProvisionBinding binding) {
-    TypeName providedTypeName = providedTypeName(binding);
-    MethodSpec.Builder provideInstanceMethod =
-        methodBuilder("provideInstance")
-            .returns(providedTypeName)
-            .addTypeVariables(bindingTypeElementTypeVariableNames(binding))
-            .addParameters(constructorParams(binding))
-            .addModifiers(PUBLIC, STATIC);
+            .returns(providedTypeName);
 
     ImmutableMap<Key, FieldSpec> frameworkFields = frameworkFields(binding);
     CodeBlock parametersCodeBlock =
@@ -250,8 +227,8 @@ private MethodSpec provideInstanceMethod(ProvisionBinding binding) {
     if (binding.kind().equals(PROVISION)) {
       binding
           .nullableType()
-          .ifPresent(nullableType -> CodeBlocks.addAnnotation(provideInstanceMethod, nullableType));
-      provideInstanceMethod.addStatement(
+          .ifPresent(nullableType -> CodeBlocks.addAnnotation(getMethod, nullableType));
+      getMethod.addStatement(
           "return $L",
           ProvisionMethod.invoke(
               binding,
@@ -266,7 +243,7 @@ private MethodSpec provideInstanceMethod(ProvisionBinding binding) {
               elements));
     } else if (!binding.injectionSites().isEmpty()) {
       CodeBlock instance = CodeBlock.of("instance");
-      provideInstanceMethod
+      getMethod
           .addStatement("$1T $2L = new $1T($3L)", providedTypeName, instance, parametersCodeBlock)
           .addCode(
               InjectionSiteMethod.invokeAll(
@@ -279,10 +256,10 @@ private MethodSpec provideInstanceMethod(ProvisionBinding binding) {
                   elements))
           .addStatement("return $L", instance);
     } else {
-      provideInstanceMethod.addStatement(
+      getMethod.addStatement(
           "return new $T($L)", providedTypeName, parametersCodeBlock);
     }
-    return provideInstanceMethod.build();
+    return getMethod.build();
   }
 
   private static TypeName providedTypeName(ProvisionBinding binding) {
diff --git a/java/dagger/internal/codegen/JavacPluginModule.java b/java/dagger/internal/codegen/JavacPluginModule.java
index 51653a804..b53fda139 100644
--- a/java/dagger/internal/codegen/JavacPluginModule.java
+++ b/java/dagger/internal/codegen/JavacPluginModule.java
@@ -52,13 +52,11 @@ static CompilerOptions compilerOptions() {
         .scopeCycleValidationType(NONE)
         .warnIfInjectionFactoryNotGeneratedUpstream(false)
         .fastInit(false)
-        .experimentalAndroidMode2(false)
         .aheadOfTimeSubcomponents(false)
         .moduleBindingValidationType(NONE)
         .moduleHasDifferentScopesDiagnosticKind(NOTE)
         .explicitBindingConflictsWithInjectValidationType(NONE)
-        .build()
-        .validate();
+        .build();
   }
 
   @Binds
diff --git a/java/dagger/internal/codegen/StaticSwitchingProviders.java b/java/dagger/internal/codegen/StaticSwitchingProviders.java
deleted file mode 100644
index 2eec4310e..000000000
--- a/java/dagger/internal/codegen/StaticSwitchingProviders.java
+++ /dev/null
@@ -1,166 +0,0 @@
-/*
- * Copyright (C) 2018 The Dagger Authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package dagger.internal.codegen;
-
-import static com.squareup.javapoet.ClassName.OBJECT;
-import static com.squareup.javapoet.MethodSpec.constructorBuilder;
-import static com.squareup.javapoet.TypeName.INT;
-import static dagger.internal.codegen.BindingRequest.bindingRequest;
-import static dagger.internal.codegen.CodeBlocks.makeParametersCodeBlock;
-import static dagger.internal.codegen.CodeBlocks.toParametersCodeBlock;
-import static dagger.internal.codegen.SourceFiles.generatedClassNameForBinding;
-import static javax.lang.model.element.Modifier.FINAL;
-import static javax.lang.model.element.Modifier.PRIVATE;
-import static javax.lang.model.element.Modifier.STATIC;
-
-import com.google.common.collect.ImmutableList;
-import com.squareup.javapoet.ArrayTypeName;
-import com.squareup.javapoet.ClassName;
-import com.squareup.javapoet.CodeBlock;
-import com.squareup.javapoet.TypeName;
-import com.squareup.javapoet.TypeSpec;
-import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
-import dagger.model.Key;
-import java.util.stream.Stream;
-import javax.inject.Inject;
-import javax.inject.Provider;
-import javax.lang.model.type.TypeMirror;
-
-/**
- * Generates {@linkplain BindingExpression binding expressions} for a binding that is represented by
- * a static {@code SwitchingProvider} class.
- *
- * <p>Currently, the generated {@code SwitchingProvider} class is generated as a static nested class
- * in the root component. Ideally, each component would get its own {@code SwitchingProvider}, but
- * since the subcomponents are inner classes they cannot contain static classes.
- */
-@PerGeneratedFile
-final class StaticSwitchingProviders extends SwitchingProviders {
-  private final DaggerTypes types;
-  private final ClassName owningComponent;
-
-  @Inject
-  StaticSwitchingProviders(
-      @TopLevel ComponentImplementation componentImplementation, DaggerTypes types) {
-    super(componentImplementation, types);
-    this.types = types;
-    this.owningComponent = componentImplementation.name();
-  }
-
-  /**
-   * Returns the {@link FrameworkInstanceCreationExpression} for a binding that satisfies a {@link
-   * Provider} requests with a static {@code SwitchingProvider} class.
-   */
-  FrameworkInstanceCreationExpression newCreationExpression(
-      ContributionBinding binding, ComponentBindingExpressions componentBindingExpressions) {
-    return new FrameworkInstanceCreationExpression() {
-      @Override
-      public CodeBlock creationExpression() {
-        return getProviderExpression(new SwitchCase(binding, componentBindingExpressions))
-            .codeBlock();
-      }
-    };
-  }
-
-  @Override
-  protected TypeSpec createSwitchingProviderType(TypeSpec.Builder builder) {
-    return builder
-        .addModifiers(PRIVATE, FINAL, STATIC)
-        .addField(INT, "id", PRIVATE, FINAL)
-        .addField(ArrayTypeName.of(OBJECT), "dependencies", PRIVATE, FINAL)
-        .addMethod(
-            constructorBuilder()
-                .addParameter(INT, "id")
-                .addParameter(ArrayTypeName.of(OBJECT), "dependencies")
-                .varargs()
-                .addStatement("this.id = id")
-                .addStatement("this.dependencies = dependencies")
-                .build())
-        .build();
-  }
-
-  private final class SwitchCase implements SwitchingProviders.SwitchCase {
-    private final ComponentBindingExpressions componentBindingExpressions;
-    private final ContributionBinding binding;
-
-    SwitchCase(
-        ContributionBinding binding, ComponentBindingExpressions componentBindingExpressions) {
-      this.binding = binding;
-      this.componentBindingExpressions = componentBindingExpressions;
-    }
-
-    @Override
-    public Key key() {
-      return binding.key();
-    }
-
-    @Override
-    public Expression getProviderExpression(ClassName switchingProviderClass, int switchId) {
-      TypeMirror accessibleType = types.accessibleType(binding.contributedType(), owningComponent);
-      // Java 7 type inference can't figure out that instance in
-      // DoubleCheck.provider(new SwitchingProvider<>()) is Provider<T> and not Provider<Object>
-      CodeBlock typeParameter = CodeBlock.of("$T", accessibleType);
-
-      CodeBlock arguments =
-          Stream.of(
-                  CodeBlock.of("$L", switchId),
-                  componentBindingExpressions.getCreateMethodArgumentsCodeBlock(binding))
-              .filter(codeBlock -> !codeBlock.isEmpty())
-              .collect(toParametersCodeBlock());
-
-      return Expression.create(
-          types.wrapType(accessibleType, Provider.class),
-          CodeBlock.of("new $T<$L>($L)", switchingProviderClass, typeParameter, arguments));
-    }
-
-    @Override
-    public Expression getReturnExpression(ClassName switchingProviderClass) {
-      return Expression.create(
-          binding.contributedType(),
-          CodeBlock.of(
-              "$T.provideInstance($L)",
-              generatedClassNameForBinding(binding),
-              getMethodArguments(switchingProviderClass)));
-    }
-
-    private CodeBlock getMethodArguments(ClassName switchingProviderClass) {
-      int i = 0;
-      ImmutableList.Builder<CodeBlock> arguments = ImmutableList.builder();
-      if (binding.requiresModuleInstance()) {
-        arguments.add(argument(binding.contributingModule().get().asType(), i++));
-      }
-
-      for (FrameworkDependency dependency : binding.frameworkDependencies()) {
-        TypeMirror type =
-            componentBindingExpressions
-                .getDependencyExpression(bindingRequest(dependency), switchingProviderClass)
-                .type();
-        arguments.add(argument(type, i++));
-      }
-      return makeParametersCodeBlock(arguments.build());
-    }
-
-    private CodeBlock argument(TypeMirror type, int index) {
-      CodeBlock.Builder builder = CodeBlock.builder();
-      TypeName accessibleType = TypeName.get(types.accessibleType(type, owningComponent));
-      if (!accessibleType.equals(ClassName.OBJECT)) {
-        builder.add("($T) ", accessibleType);
-      }
-      return builder.add("dependencies[$L]", index).build();
-    }
-  }
-}
diff --git a/java/dagger/internal/codegen/SwitchingProviders.java b/java/dagger/internal/codegen/SwitchingProviders.java
index adb6b54b1..f1fe85776 100644
--- a/java/dagger/internal/codegen/SwitchingProviders.java
+++ b/java/dagger/internal/codegen/SwitchingProviders.java
@@ -47,6 +47,8 @@
  * <p>The provider expression request will be satisfied by a single generated {@code Provider} inner
  * class that can provide instances for all types by switching on an id.
  */
+// TODO(ronshapiro): either merge this with InnerSwitchingProviders, or repurpose this for
+// SwitchingProducers
 abstract class SwitchingProviders {
   /**
    * Defines the {@linkplain Expression expressions} for a switch case in a {@code SwitchProvider}
diff --git a/javatests/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
index ea4711bbc..174807f48 100644
--- a/javatests/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
@@ -2227,10 +2227,6 @@ public void nullIncorrectlyReturnedFromNonNullableInlinedProvider() {
                 "    implements Factory<String> {",
                 "  @Override",
                 "  public String get() {",
-                "    return provideInstance();",
-                "  }",
-                "",
-                "  public static String provideInstance() {",
                 "    return proxyNonNullableString();",
                 "  }",
                 "",
@@ -2323,10 +2319,6 @@ public void nullCheckingIgnoredWhenProviderReturnsPrimitive() {
                 "",
                 "  @Override",
                 "  public Integer get() {",
-                "    return provideInstance();",
-                "  }",
-                "",
-                "  public static Integer provideInstance() {",
                 "    return proxyPrimitiveInteger();",
                 "  }",
                 "",
diff --git a/javatests/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java b/javatests/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
index a852752e2..a107cc293 100644
--- a/javatests/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
+++ b/javatests/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
@@ -147,10 +147,6 @@
             "",
             "  @Override",
             "  public GenericClass<T> get() {",
-            "    return provideInstance(tProvider);",
-            "  }",
-            "",
-            "  public static <T> GenericClass<T> provideInstance(Provider<T> tProvider) {",
             "    return new GenericClass<T>(tProvider.get());",
             "  }",
             "",
@@ -203,11 +199,6 @@
             "",
             "  @Override",
             "  public GenericClass<A, B> get() {",
-            "    return provideInstance(aProvider, bProvider);",
-            "  }",
-            "",
-            "  public static <A, B> GenericClass<A, B>  provideInstance(",
-            "      Provider<A> aProvider, Provider<B> bProvider) {",
             "    GenericClass<A, B> instance = new GenericClass<A, B>();",
             "    GenericClass_MembersInjector.injectA(instance, aProvider.get());",
             "    GenericClass_MembersInjector.injectRegister(instance, bProvider.get());",
@@ -253,10 +244,6 @@
             "",
             "  @Override",
             "  public GenericClass<T> get() {",
-            "    return provideInstance();",
-            "  }",
-            "",
-            "  public static <T> GenericClass<T> provideInstance() {",
             "    return new GenericClass<T>();",
             "  }",
             "",
@@ -305,11 +292,6 @@
             "",
             "  @Override",
             "  public GenericClass<A, B> get() {",
-            "    return provideInstance(aProvider, bProvider);",
-            "  }",
-            "",
-            "  public static <A, B> GenericClass<A, B> provideInstance(",
-            "      Provider<A> aProvider, Provider<B> bProvider) {",
             "    return new GenericClass<A, B>(aProvider.get(), bProvider.get());",
             "  }",
             "",
@@ -369,13 +351,6 @@
             "",
             "  @Override",
             "  public GenericClass<A, B, C> get() {",
-            "    return provideInstance(aProvider, bProvider, cProvider);",
-            "  }",
-            "",
-            "  public static <A extends Number & Comparable<A>,",
-            "      B extends List<? extends String>,",
-            "      C extends List<? super String>> GenericClass<A, B, C> provideInstance(",
-            "          Provider<A> aProvider, Provider<B> bProvider, Provider<C> cProvider) {",
             "    return new GenericClass<A, B, C>(",
             "        aProvider.get(), bProvider.get(), cProvider.get());",
             "  }",
@@ -452,22 +427,6 @@
             "",
             "  @Override",
             "  public GenericClass<A, B> get() {",
-            "    return provideInstance(",
-            "        aAndA2AndPaAndLaProvider,",
-            "        qaProvider,",
-            "        sAndS2AndPsAndLsProvider,",
-            "        qsProvider,",
-            "        bAndB2AndPbAndLbProvider,",
-            "        qbProvider);",
-            "  }",
-            "",
-            "  public static <A, B> GenericClass<A, B> provideInstance(",
-            "      Provider<A> aAndA2AndPaAndLaProvider,",
-            "      Provider<A> qaProvider,",
-            "      Provider<String> sAndS2AndPsAndLsProvider,",
-            "      Provider<String> qsProvider,",
-            "      Provider<B> bAndB2AndPbAndLbProvider,",
-            "      Provider<B> qbProvider) {",
             "    return new GenericClass<A, B>(",
             "      aAndA2AndPaAndLaProvider.get(),",
             "      aAndA2AndPaAndLaProvider.get(),",
@@ -1073,10 +1032,6 @@
             "  }",
             "",
             "  @Override public InjectConstructor get() {",
-            "    return provideInstance(sProvider);",
-            "  }",
-            "",
-            "  public static InjectConstructor provideInstance(Provider<String> sProvider) {",
             "    return new InjectConstructor(sProvider.get());",
             "  }",
             "",
@@ -1122,10 +1077,6 @@
             "  }",
             "",
             "  @Override public AllInjections get() {",
-            "    return provideInstance(sProvider);",
-            "  }",
-            "",
-            "  public static AllInjections provideInstance(Provider<String> sProvider) {",
             "    AllInjections instance = new AllInjections(sProvider.get());",
             "    AllInjections_MembersInjector.injectS(instance, sProvider.get());",
             "    AllInjections_MembersInjector.injectS2(instance, sProvider.get());",
@@ -1178,11 +1129,6 @@ public void wildcardDependency() {
             "  }",
             "",
             "  @Override public InjectConstructor get() {",
-            "    return provideInstance(objectsProvider);",
-            "  }",
-            "",
-            "  public static InjectConstructor provideInstance(",
-            "      Provider<List<?>> objectsProvider) {",
             "    return new InjectConstructor(objectsProvider.get());",
             "  }",
             "",
@@ -1235,11 +1181,6 @@ public void basicNameCollision() {
             "  }",
             "",
             "  @Override public InjectConstructor get() {",
-            "    return provideInstance(factoryProvider);",
-            "  }",
-            "",
-            "  public static InjectConstructor provideInstance(",
-            "      Provider<other.pkg.Factory> factoryProvider) {",
             "    return new InjectConstructor(factoryProvider.get());",
             "  }",
             "",
@@ -1297,11 +1238,6 @@ public void nestedNameCollision() {
             "  }",
             "",
             "  @Override public InjectConstructor get() {",
-            "    return provideInstance(factoryProvider);",
-            "  }",
-            "",
-            "  public static InjectConstructor provideInstance(",
-            "      Provider<Outer.Factory> factoryProvider) {",
             "    return new InjectConstructor(factoryProvider.get());",
             "  }",
             "",
@@ -1364,12 +1300,6 @@ public void samePackageNameCollision() {
             "  }",
             "",
             "  @Override public InjectConstructor get() {",
-            "    return provideInstance(otherPackageProvider, samePackageProvider);",
-            "  }",
-            "",
-            "  public static InjectConstructor provideInstance(",
-            "      Provider<other.pkg.CommonName> otherPackageProvider,",
-            "      Provider<CommonName> samePackageProvider) {",
             "    return new InjectConstructor(",
             "        otherPackageProvider.get(), samePackageProvider.get());",
             "  }",
@@ -1415,10 +1345,6 @@ public void noDeps() {
             "  private static final SimpleType_Factory INSTANCE = new SimpleType_Factory();",
             "",
             "  @Override public SimpleType get() {",
-            "    return provideInstance();",
-            "  }",
-            "",
-            "  public static SimpleType provideInstance() {",
             "    return new SimpleType();",
             "  }",
             "",
@@ -1465,10 +1391,6 @@ public void noDeps() {
             "  private static final OuterType_A_Factory INSTANCE = new OuterType_A_Factory();",
             "",
             "  @Override public OuterType.A get() {",
-            "    return provideInstance();",
-            "  }",
-            "",
-            "  public static OuterType.A provideInstance() {",
             "    return new OuterType.A();",
             "  }",
             "",
diff --git a/javatests/dagger/internal/codegen/MembersInjectionTest.java b/javatests/dagger/internal/codegen/MembersInjectionTest.java
index bb6029fab..824f4a46e 100644
--- a/javatests/dagger/internal/codegen/MembersInjectionTest.java
+++ b/javatests/dagger/internal/codegen/MembersInjectionTest.java
@@ -1145,11 +1145,6 @@ public void injectsPrimitive() {
             "",
             "  @Override",
             "  public InjectedType get() {",
-            "    return provideInstance(boxedIntAndPrimitiveIntProvider);",
-            "  }",
-            "",
-            "  public static InjectedType provideInstance(",
-            "      Provider<Integer> boxedIntAndPrimitiveIntProvider) {",
             "    InjectedType instance = new InjectedType();",
             "    InjectedType_MembersInjector.injectPrimitiveInt(",
             "        instance, boxedIntAndPrimitiveIntProvider.get());",
diff --git a/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java b/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
index ca9cc9550..953193267 100644
--- a/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
+++ b/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
@@ -1,3 +1,4 @@
+
 /*
  * Copyright (C) 2014 The Dagger Authors.
  *
@@ -252,10 +253,6 @@ public void providesMethodReturnsProduced() {
             "  }",
             "",
             "  @Override public String get() {",
-            "    return provideInstance(module);",
-            "  }",
-            "",
-            "  public static String provideInstance(TestModule module) {",
             "    return proxyProvideString(module);",
             "  }",
             "",
@@ -304,10 +301,6 @@ public void providesMethodReturnsProduced() {
             "  }",
             "",
             "  @Override public String get() {",
-            "    return provideInstance(module);",
-            "  }",
-            "",
-            "  public static String provideInstance(TestModule module) {",
             "    return proxyProvideString(module);",
             "  }",
             "",
@@ -356,11 +349,6 @@ public void providesMethodReturnsProduced() {
             "  @Override",
             "  @Nullable",
             "  public String get() {",
-            "    return provideInstance(module);",
-            "  }",
-            "",
-            "  @Nullable",
-            "  public static String provideInstance(TestModule module) {",
             "    return proxyProvideString(module);",
             "  }",
             "",
@@ -444,14 +432,6 @@ public void providesMethodReturnsProduced() {
             "  }",
             "",
             "  @Override public List<Object> get() {",
-            "    return provideInstance(module, aProvider, bProvider, xInjectorProvider);",
-            "  }",
-            "",
-            "  public static List<Object> provideInstance(",
-            "      TestModule module,",
-            "      Provider<Object> aProvider,",
-            "      Provider<Object> bProvider,",
-            "      Provider<MembersInjector<X>> xInjectorProvider) {",
             "    return proxyProvideObjects(",
             "        module, aProvider.get(), bProvider.get(), xInjectorProvider.get());",
             "  }",
@@ -511,10 +491,6 @@ public void providesMethodReturnsProduced() {
             "  }",
             "",
             "  @Override public String get() {",
-            "    return provideInstance(module);",
-            "  }",
-            "",
-            "  public static String provideInstance(TestModule module) {",
             "    return proxyProvideString(module);",
             "  }",
             "",
@@ -571,10 +547,6 @@ public void providesMethodReturnsProduced() {
             "  }",
             "",
             "  @Override public List<List<?>> get() {",
-            "    return provideInstance(module);",
-            "  }",
-            "",
-            "  public static List<List<?>> provideInstance(TestModule module) {",
             "    return proxyProvideWildcardList(module);",
             "  }",
             "",
@@ -627,10 +599,6 @@ public void providesMethodReturnsProduced() {
             "  }",
             "",
             "  @Override public Set<String> get() {",
-            "    return provideInstance(module);",
-            "  }",
-            "",
-            "  public static Set<String> provideInstance(TestModule module) {",
             "    return proxyProvideStrings(module);",
             "  }",
             "",
@@ -937,11 +905,6 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public List<B> get() {  ",
-            "    return provideInstance(module, bProvider);",
-            "  }",
-            "",
-            "  public static <A extends CharSequence, B, C extends Number & Comparable<C>>",
-            "      List<B> provideInstance(ParentModule<A, B, C> module, Provider<B> bProvider) {",
             "    return proxyProvideListB(module, bProvider.get());",
             "  }",
             "",
@@ -981,11 +944,6 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public B get() {  ",
-            "    return provideInstance(module, bProvider);",
-            "  }",
-            "",
-            "  public static <A extends CharSequence, B, C extends Number & Comparable<C>>",
-            "      B provideInstance(ParentModule<A, B, C> module, Provider<B> bProvider) {",
             "    return proxyProvideBElement(module, bProvider.get());",
             "  }",
             "",
@@ -1026,11 +984,6 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public B get() {  ",
-            "    return provideInstance(module, bProvider);",
-            "  }",
-            "",
-            "  public static <A extends CharSequence, B, C extends Number & Comparable<C>>",
-            "      B provideInstance(ParentModule<A, B, C> module, Provider<B> bProvider) {",
             "    return proxyProvideBEntry(module, bProvider.get());",
             "  }",
             "",
@@ -1067,10 +1020,6 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public Number get() {  ",
-            "    return provideInstance(module);",
-            "  }",
-            "",
-            "  public static Number provideInstance(ChildNumberModule module) {",
             "    return proxyProvideNumber(module);",
             "  }",
             "",
@@ -1104,10 +1053,6 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public Integer get() {  ",
-            "    return provideInstance(module);",
-            "  }",
-            "",
-            "  public static Integer provideInstance(ChildIntegerModule module) {",
             "    return proxyProvideInteger(module);",
             "  }",
             "",
@@ -1179,10 +1124,6 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public Map<String, Number> get() {",
-            "    return provideInstance();",
-            "  }",
-            "",
-            "  public static Map<String, Number> provideInstance() {",
             "    return proxyProvideMapStringNumber();",
             "  }",
             "",
@@ -1213,10 +1154,6 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public Object get() {",
-            "    return provideInstance();",
-            "  }",
-            "",
-            "  public static Object provideInstance() {",
             "    return proxyProvideNonGenericType();",
             "  }",
             "",
@@ -1252,10 +1189,6 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public String get() {",
-            "    return provideInstance(oProvider);",
-            "  }",
-            "",
-            "  public static String provideInstance(Provider<Object> oProvider) {",
             "    return proxyProvideNonGenericTypeWithDeps(oProvider.get());",
             "  }",
             "",
diff --git a/test_defs.bzl b/test_defs.bzl
index 32ba9e65d..f72927a0a 100644
--- a/test_defs.bzl
+++ b/test_defs.bzl
@@ -17,7 +17,6 @@
 # The key will be appended to the generated test names to ensure uniqueness.
 BUILD_VARIANTS = {
     "FastInit": ["-Adagger.fastInit=enabled"],
-    "ExperimentalAndroidMode2": ["-Adagger.experimentalAndroidMode2=enabled"],
     "AheadOfTimeSubcomponents": ["-Adagger.experimentalAheadOfTimeSubcomponents=enabled"],
     "FastInitAndAheadOfTimeSubcomponents": [
         "-Adagger.fastInit=enabled",
