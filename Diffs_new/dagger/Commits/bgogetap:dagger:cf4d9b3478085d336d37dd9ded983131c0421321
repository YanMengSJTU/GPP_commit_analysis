diff --git a/java/dagger/internal/codegen/ModuleValidator.java b/java/dagger/internal/codegen/ModuleValidator.java
index c801ec300..9f94bce3d 100644
--- a/java/dagger/internal/codegen/ModuleValidator.java
+++ b/java/dagger/internal/codegen/ModuleValidator.java
@@ -21,6 +21,8 @@
 import static com.google.auto.common.Visibility.PRIVATE;
 import static com.google.auto.common.Visibility.PUBLIC;
 import static com.google.auto.common.Visibility.effectiveVisibilityOfElement;
+import static com.google.common.collect.Iterables.getOnlyElement;
+import static dagger.internal.codegen.ComponentCreatorAnnotation.getCreatorAnnotations;
 import static dagger.internal.codegen.ConfigurationAnnotations.getModules;
 import static dagger.internal.codegen.ConfigurationAnnotations.getSubcomponentAnnotation;
 import static dagger.internal.codegen.ConfigurationAnnotations.getSubcomponentCreator;
@@ -84,8 +86,12 @@
 final class ModuleValidator {
   private static final ImmutableSet<Class<? extends Annotation>> SUBCOMPONENT_TYPES =
       ImmutableSet.of(Subcomponent.class, ProductionSubcomponent.class);
-  private static final ImmutableSet<Class<? extends Annotation>> SUBCOMPONENT_BUILDER_TYPES =
-      ImmutableSet.of(Subcomponent.Builder.class, ProductionSubcomponent.Builder.class);
+  private static final ImmutableSet<Class<? extends Annotation>> SUBCOMPONENT_CREATOR_TYPES =
+      ImmutableSet.of(
+          Subcomponent.Builder.class,
+          Subcomponent.Factory.class,
+          ProductionSubcomponent.Builder.class,
+          ProductionSubcomponent.Factory.class);
   private static final Optional<Class<?>> ANDROID_PROCESSOR;
   private static final String CONTRIBUTES_ANDROID_INJECTOR_NAME =
       "dagger.android.ContributesAndroidInjector";
@@ -264,8 +270,8 @@ public Void visitDeclared(DeclaredType declaredType, Void aVoid) {
                         attributeType, moduleAnnotation.annotation(), builder);
                   } else {
                     builder.addError(
-                        isAnyAnnotationPresent(attributeType, SUBCOMPONENT_BUILDER_TYPES)
-                            ? moduleSubcomponentsIncludesBuilder(attributeType)
+                        isAnyAnnotationPresent(attributeType, SUBCOMPONENT_CREATOR_TYPES)
+                            ? moduleSubcomponentsIncludesCreator(attributeType)
                             : moduleSubcomponentsIncludesNonSubcomponent(attributeType),
                         subject,
                         moduleAnnotation.annotation(),
@@ -284,14 +290,17 @@ private static String moduleSubcomponentsIncludesNonSubcomponent(TypeElement not
         + " is not a @Subcomponent or @ProductionSubcomponent";
   }
 
-  private static String moduleSubcomponentsIncludesBuilder(
+  private static String moduleSubcomponentsIncludesCreator(
       TypeElement moduleSubcomponentsAttribute) {
     TypeElement subcomponentType =
         MoreElements.asType(moduleSubcomponentsAttribute.getEnclosingElement());
+    ComponentCreatorAnnotation creatorAnnotation =
+        getOnlyElement(getCreatorAnnotations(moduleSubcomponentsAttribute));
     return String.format(
-        "%s is a @%s.Builder. Did you mean to use %s?",
+        "%s is a @%s.%s. Did you mean to use %s?",
         moduleSubcomponentsAttribute.getQualifiedName(),
         simpleName(getSubcomponentAnnotation(subcomponentType).get()),
+        creatorAnnotation.creatorKind().typeName(),
         subcomponentType.getQualifiedName());
   }
 
@@ -303,17 +312,21 @@ private static void validateSubcomponentHasBuilder(
       return;
     }
     builder.addError(
-        moduleSubcomponentsDoesntHaveBuilder(subcomponentAttribute, moduleAnnotation),
+        moduleSubcomponentsDoesntHaveCreator(subcomponentAttribute, moduleAnnotation),
         builder.getSubject(),
         moduleAnnotation);
   }
 
-  private static String moduleSubcomponentsDoesntHaveBuilder(
+  private static String moduleSubcomponentsDoesntHaveCreator(
       TypeElement subcomponent, AnnotationMirror moduleAnnotation) {
+    String subcomponentAnnotation =
+        simpleName(getSubcomponentAnnotation(subcomponent).get()).toString();
     return String.format(
-        "%s doesn't have a @%s.Builder, which is required when used with @%s.subcomponents",
+        "%s doesn't have a @%s.Builder or @%s.Factory, which is required when used with "
+            + "@%s.subcomponents",
         subcomponent.getQualifiedName(),
-        simpleName(getSubcomponentAnnotation(subcomponent).get()),
+        subcomponentAnnotation,
+        subcomponentAnnotation,
         simpleName(moduleAnnotation));
   }
 
diff --git a/javatests/dagger/internal/codegen/ModuleValidationTest.java b/javatests/dagger/internal/codegen/ModuleValidationTest.java
index 9823c097d..649649ad8 100644
--- a/javatests/dagger/internal/codegen/ModuleValidationTest.java
+++ b/javatests/dagger/internal/codegen/ModuleValidationTest.java
@@ -127,6 +127,40 @@ public void moduleSubcomponents_listsSubcomponentBuilder() {
         .onLine(5);
   }
 
+  @Test
+  public void moduleSubcomponents_listsSubcomponentFactory() {
+    JavaFileObject module =
+        JavaFileObjects.forSourceLines(
+            "test.TestModule",
+            "package test;",
+            "",
+            moduleType.importStatement(),
+            "",
+            moduleType.annotationWithSubcomponent("Sub.Factory.class"),
+            "class TestModule {}");
+    JavaFileObject subcomponent =
+        JavaFileObjects.forSourceLines(
+            "test.Sub",
+            "package test;",
+            "",
+            "import dagger.Subcomponent;",
+            "",
+            "@Subcomponent",
+            "interface Sub {",
+            "  @Subcomponent.Factory",
+            "  interface Factory {",
+            "    Sub creator();",
+            "  }",
+            "}");
+    Compilation compilation = daggerCompiler().compile(module, subcomponent);
+    assertThat(compilation).failed();
+    assertThat(compilation)
+        .hadErrorContaining(
+            "test.Sub.Factory is a @Subcomponent.Factory. Did you mean to use test.Sub?")
+        .inFile(module)
+        .onLine(5);
+  }
+
   @Test
   public void moduleSubcomponents_listsProductionSubcomponentBuilder() {
     JavaFileObject module =
@@ -162,7 +196,41 @@ public void moduleSubcomponents_listsProductionSubcomponentBuilder() {
   }
 
   @Test
-  public void moduleSubcomponents_noSubcomponentBuilder() {
+  public void moduleSubcomponents_listsProductionSubcomponentFactory() {
+    JavaFileObject module =
+        JavaFileObjects.forSourceLines(
+            "test.TestModule",
+            "package test;",
+            "",
+            moduleType.importStatement(),
+            "",
+            moduleType.annotationWithSubcomponent("Sub.Factory.class"),
+            "class TestModule {}");
+    JavaFileObject subcomponent =
+        JavaFileObjects.forSourceLines(
+            "test.Sub",
+            "package test;",
+            "",
+            "import dagger.producers.ProductionSubcomponent;",
+            "",
+            "@ProductionSubcomponent",
+            "interface Sub {",
+            "  @ProductionSubcomponent.Factory",
+            "  interface Factory {",
+            "    Sub create();",
+            "  }",
+            "}");
+    Compilation compilation = daggerCompiler().compile(module, subcomponent);
+    assertThat(compilation).failed();
+    assertThat(compilation)
+        .hadErrorContaining(
+            "test.Sub.Factory is a @ProductionSubcomponent.Factory. Did you mean to use test.Sub?")
+        .inFile(module)
+        .onLine(5);
+  }
+
+  @Test
+  public void moduleSubcomponents_noSubcomponentCreator() {
     JavaFileObject module =
         JavaFileObjects.forSourceLines(
             "test.TestModule",
@@ -185,8 +253,8 @@ public void moduleSubcomponents_noSubcomponentBuilder() {
     assertThat(compilation).failed();
     assertThat(compilation)
         .hadErrorContaining(
-            "test.NoBuilder doesn't have a @Subcomponent.Builder, which is required when used "
-                + "with @"
+            "test.NoBuilder doesn't have a @Subcomponent.Builder or @Subcomponent.Factory, which "
+                + "is required when used with @"
                 + moduleType.simpleName()
                 + ".subcomponents")
         .inFile(module)
@@ -194,7 +262,7 @@ public void moduleSubcomponents_noSubcomponentBuilder() {
   }
 
   @Test
-  public void moduleSubcomponents_noProductionSubcomponentBuilder() {
+  public void moduleSubcomponents_noProductionSubcomponentCreator() {
     JavaFileObject module =
         JavaFileObjects.forSourceLines(
             "test.TestModule",
@@ -217,8 +285,8 @@ public void moduleSubcomponents_noProductionSubcomponentBuilder() {
     assertThat(compilation).failed();
     assertThat(compilation)
         .hadErrorContaining(
-            "test.NoBuilder doesn't have a @ProductionSubcomponent.Builder, which is required "
-                + "when used with @"
+            "test.NoBuilder doesn't have a @ProductionSubcomponent.Builder or "
+                + "@ProductionSubcomponent.Factory, which is required when used with @"
                 + moduleType.simpleName()
                 + ".subcomponents")
         .inFile(module)
