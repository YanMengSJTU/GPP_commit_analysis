diff --git a/compiler/src/main/java/dagger/internal/codegen/TriggerComponentInfo.java b/compiler/src/main/java/dagger/internal/codegen/TriggerComponentInfo.java
index 5e2717a68..669c05d01 100644
--- a/compiler/src/main/java/dagger/internal/codegen/TriggerComponentInfo.java
+++ b/compiler/src/main/java/dagger/internal/codegen/TriggerComponentInfo.java
@@ -13,9 +13,8 @@
 public class TriggerComponentInfo extends ComponentInfo {
 
     private static final String DECORATOR = "Decorator";
-    private static final String METHODNAME_DECORATE = "decorate";
-
     private BindingGraph bindingGraph;
+    private static final String METHODNAME_DECORATE = "decorate";
 
     protected TriggerComponentInfo(TypeElement typeElement, ComponentDescriptor descriptor,
                                    BindingGraph bindingGraph) {
@@ -59,36 +58,56 @@ protected ParameterSpec getBuilderParameterSpec(ClassName builderClassName) {
     }
 
     public static String resolveBuilderName(BindingGraph.Factory bindingGraphFactory, ComponentDescriptor descriptor) {
+
+        ComponentDescriptor topDescriptor = getTopDescriptor(descriptor);
+        final BindingGraph parentGraph = bindingGraphFactory.create(topDescriptor);
+        final ImmutableBiMap<ComponentDescriptor, String> subcomponentNamesMap =
+                new ComponentWriter.UniqueSubcomponentNamesGenerator(parentGraph).generate();
+
         if (descriptor.kind() == ComponentDescriptor.Kind.COMPONENT) {
             final ClassName daggerComponentClassName = Util.getDaggerComponentClassName(descriptor.componentDefinitionType());
             return daggerComponentClassName.packageName() + "." + daggerComponentClassName.simpleName() + ".Builder";
         }else if (descriptor.kind() == ComponentDescriptor.Kind.SUBCOMPONENT) {
-            return resolveSubcomponentBuilderName(bindingGraphFactory, descriptor);
+            return resolveSubcomponentBuilderName(subcomponentNamesMap, descriptor);
         }else {
             throw new IllegalStateException(String.format("Unknown component kind: %s", descriptor.kind()));
         }
     }
 
-    protected static String resolveSubcomponentBuilderName(BindingGraph.Factory bindingGraphFactory, ComponentDescriptor descriptor) {
-        final ComponentDescriptor parentDescriptor = descriptor.getParentDescriptor();
-        final String parentClassName = internalResolveClassName(parentDescriptor, bindingGraphFactory);
-        final BindingGraph parentGraph = bindingGraphFactory.create(parentDescriptor);
-        final ImmutableBiMap<ComponentDescriptor, String> subcomponentNamesMap =
-                new ComponentWriter.UniqueSubcomponentNamesGenerator(parentGraph).generate();
+    private static ComponentDescriptor getTopDescriptor(ComponentDescriptor descriptor) {
+        while(descriptor.getParentDescriptor() != null) {
+            descriptor = descriptor.getParentDescriptor();
+        }
+        return descriptor;
+    }
+
+    protected static String resolveSubcomponentBuilderName(ImmutableBiMap<ComponentDescriptor, String> subcomponentNamesMap,
+                                                           ComponentDescriptor descriptor) {
+        final String parentClassName = internalResolveClassName(subcomponentNamesMap, descriptor.getParentDescriptor());
         final String subcomponentName = subcomponentNamesMap.get(descriptor);
         if (subcomponentName == null) {
             final String name = descriptor.componentDefinitionType().getQualifiedName().toString();
             throw new NullPointerException(String.format("Name for Subcomponent '%s' not found", name));
         }
-        return builderImplString(parentClassName, subcomponentName);
+        final String name = descriptor.componentDefinitionType().getSimpleName().toString();
+        return parentClassName + "." + name + "Builder";
+    }
+
+    private static String internalResolveClassName(ImmutableBiMap<ComponentDescriptor, String> subcomponentNamesMap,
+                                                   ComponentDescriptor descriptor) {
+        return internalResolveClassName("", subcomponentNamesMap, descriptor);
     }
 
-    private static String internalResolveClassName(ComponentDescriptor descriptor, BindingGraph.Factory bindingGraphFactory) {
+    private static String internalResolveClassName(String parentClassName,
+                                                   ImmutableBiMap<ComponentDescriptor, String> subcomponentNamesMap,
+                                                   ComponentDescriptor descriptor) {
         if (descriptor.kind() == ComponentDescriptor.Kind.COMPONENT) {
             final ClassName daggerComponentClassName = Util.getDaggerComponentClassName(descriptor.componentDefinitionType());
             return classNameToString(daggerComponentClassName);
         }else if (descriptor.kind() == ComponentDescriptor.Kind.SUBCOMPONENT) {
-            return resolveSubcomponentBuilderName(bindingGraphFactory, descriptor);
+            final String name = subcomponentNamesMap.get(descriptor);
+            parentClassName = builderImplString(parentClassName, name);
+            return internalResolveClassName(parentClassName, subcomponentNamesMap, descriptor.getParentDescriptor());
         }else {
             throw new IllegalStateException(String.format("Unknown component kind: %s", descriptor.kind()));
         }
