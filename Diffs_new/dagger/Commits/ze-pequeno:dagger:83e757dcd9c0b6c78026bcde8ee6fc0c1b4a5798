diff --git a/java/dagger/internal/codegen/binding/ComponentDescriptor.java b/java/dagger/internal/codegen/binding/ComponentDescriptor.java
index 1c4804f68..a7e4cc4f3 100644
--- a/java/dagger/internal/codegen/binding/ComponentDescriptor.java
+++ b/java/dagger/internal/codegen/binding/ComponentDescriptor.java
@@ -45,8 +45,6 @@
 import dagger.model.Scope;
 import dagger.producers.CancellationPolicy;
 import dagger.producers.ProductionComponent;
-import java.util.HashMap;
-import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.stream.Stream;
@@ -240,25 +238,21 @@ final ComponentDescriptor getChildComponentWithBuilderType(TypeElement builderTy
 
   public abstract ImmutableSet<ComponentMethodDescriptor> componentMethods();
 
-  /**
-   * Returns the component method associated with this binding request, if one exists.
-   *
-   * <p>If multiple component methods are associated with the binding request, this method will
-   * always return the same (unspecified) one.
-   */
-  public Optional<ComponentMethodDescriptor> matchingComponentMethod(BindingRequest request) {
-    return Optional.ofNullable(componentMethodsMap().get(request));
+  /** Returns the first component method associated with this binding request, if one exists. */
+  public Optional<ComponentMethodDescriptor> firstMatchingComponentMethod(BindingRequest request) {
+    return componentMethods().stream()
+        .filter(method -> doesComponentMethodMatch(method, request))
+        .findFirst();
   }
 
-  @Memoized
-  protected ImmutableMap<BindingRequest, ComponentMethodDescriptor> componentMethodsMap() {
-    Map<BindingRequest, ComponentMethodDescriptor> componentMethodsMap = new HashMap<>();
-    for (ComponentMethodDescriptor componentMethod : componentMethods()) {
-      componentMethod.dependencyRequest()
-          .map(BindingRequest::bindingRequest)
-          .ifPresent(bindingRequest -> componentMethodsMap.put(bindingRequest, componentMethod));
-    }
-    return ImmutableMap.copyOf(componentMethodsMap);
+  /** Returns true if the component method matches the binding request. */
+  private static boolean doesComponentMethodMatch(
+      ComponentMethodDescriptor componentMethod, BindingRequest request) {
+    return componentMethod
+        .dependencyRequest()
+        .map(BindingRequest::bindingRequest)
+        .filter(request::equals)
+        .isPresent();
   }
 
   /** The entry point methods on the component type. Each has a {@link DependencyRequest}. */
diff --git a/java/dagger/internal/codegen/writing/ComponentBindingExpressions.java b/java/dagger/internal/codegen/writing/ComponentBindingExpressions.java
index 7f501ae99..8cd4f233d 100644
--- a/java/dagger/internal/codegen/writing/ComponentBindingExpressions.java
+++ b/java/dagger/internal/codegen/writing/ComponentBindingExpressions.java
@@ -610,7 +610,7 @@ BindingExpression wrapInMethod(
     MethodImplementationStrategy methodImplementationStrategy =
         methodImplementationStrategy(binding, request);
     Optional<ComponentMethodDescriptor> matchingComponentMethod =
-        graph.componentDescriptor().matchingComponentMethod(request);
+        graph.componentDescriptor().firstMatchingComponentMethod(request);
 
     if (matchingComponentMethod.isPresent()) {
       ComponentMethodDescriptor componentMethod = matchingComponentMethod.get();
diff --git a/java/dagger/internal/codegen/writing/MethodBindingExpression.java b/java/dagger/internal/codegen/writing/MethodBindingExpression.java
index a81592bee..7f82d04c2 100644
--- a/java/dagger/internal/codegen/writing/MethodBindingExpression.java
+++ b/java/dagger/internal/codegen/writing/MethodBindingExpression.java
@@ -153,7 +153,7 @@ protected TypeMirror returnType() {
   }
 
   private Optional<ComponentMethodDescriptor> matchingComponentMethod() {
-    return componentImplementation.componentDescriptor().matchingComponentMethod(request);
+    return componentImplementation.componentDescriptor().firstMatchingComponentMethod(request);
   }
 
   /** Strateg for implementing the body of this method. */
