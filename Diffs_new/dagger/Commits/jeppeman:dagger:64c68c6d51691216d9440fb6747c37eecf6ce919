diff --git a/java/dagger/internal/codegen/ComponentRequirementFields.java b/java/dagger/internal/codegen/ComponentRequirementFields.java
index afa33828d..1eaceda3e 100644
--- a/java/dagger/internal/codegen/ComponentRequirementFields.java
+++ b/java/dagger/internal/codegen/ComponentRequirementFields.java
@@ -86,20 +86,11 @@ private ComponentRequirementField getField(ComponentRequirement componentRequire
   /**
    * Adds a component requirement field for a single component requirement owned by this component.
    */
+  // TODO(user): remove this method and create ComponentRequirementFields lazily, on demand.
   void add(ComponentRequirementField field) {
     componentRequirementFieldsMaps.get(0).put(field.componentRequirement(), field);
   }
 
-  /**
-   * Returns {@code true} if the component that owns this {@link ComponentRequirementFields} has a
-   * registered {@link ComponentRequirementField} for {@code componentRequirement}.
-   */
-  boolean contains(ComponentRequirement componentRequirement) {
-    return componentRequirementFieldsMaps
-        .stream()
-        .anyMatch(map -> map.containsKey(componentRequirement));
-  }
-
   private static Map<ComponentRequirement, ComponentRequirementField>
       newComponentRequirementsMap() {
     return new HashMap<>();
diff --git a/java/dagger/internal/codegen/SubcomponentWriter.java b/java/dagger/internal/codegen/SubcomponentWriter.java
index ab6b26951..26d52d99f 100644
--- a/java/dagger/internal/codegen/SubcomponentWriter.java
+++ b/java/dagger/internal/codegen/SubcomponentWriter.java
@@ -16,37 +16,30 @@
 
 package dagger.internal.codegen;
 
+import static com.google.auto.common.MoreTypes.asDeclared;
+import static com.google.auto.common.MoreTypes.asExecutable;
+import static com.google.auto.common.MoreTypes.asTypeElement;
 import static com.google.common.base.CaseFormat.LOWER_CAMEL;
-import static com.google.common.base.Preconditions.checkState;
-import static com.squareup.javapoet.MethodSpec.methodBuilder;
-import static dagger.internal.codegen.CodeBlocks.makeParametersCodeBlock;
+import static dagger.internal.codegen.CodeBlocks.toParametersCodeBlock;
+import static dagger.internal.codegen.DaggerStreams.toImmutableSet;
 import static dagger.internal.codegen.GeneratedComponentModel.FieldSpecKind.COMPONENT_REQUIREMENT_FIELD;
 import static dagger.internal.codegen.GeneratedComponentModel.MethodSpecKind.COMPONENT_METHOD;
 import static dagger.internal.codegen.GeneratedComponentModel.TypeSpecKind.SUBCOMPONENT;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PRIVATE;
-import static javax.lang.model.element.Modifier.PUBLIC;
 
-import com.google.auto.common.MoreTypes;
 import com.google.common.base.CaseFormat;
-import com.google.common.base.Predicates;
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.Sets;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.FieldSpec;
 import com.squareup.javapoet.MethodSpec;
-import com.squareup.javapoet.TypeName;
 import com.squareup.javapoet.TypeSpec;
 import dagger.internal.Preconditions;
-import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
-import java.util.List;
 import java.util.Optional;
 import java.util.Set;
+import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
-import javax.lang.model.element.VariableElement;
-import javax.lang.model.type.ExecutableType;
-import javax.lang.model.type.TypeMirror;
+import javax.lang.model.type.DeclaredType;
 
 /**
  * Creates the nested implementation class for a subcomponent.
@@ -59,7 +52,7 @@
    * The parent's factory method to create this subcomponent, or {@link Optional#empty()} if the
    * subcomponent was added via {@link dagger.Module#subcomponents()}.
    */
-  private final Optional<ComponentMethodDescriptor> subcomponentFactoryMethod;
+  private final Optional<ExecutableElement> subcomponentFactoryMethod;
 
   SubcomponentWriter(AbstractComponentWriter parent, BindingGraph graph) {
     super(
@@ -70,12 +63,13 @@
     this.parent = parent;
     this.subcomponentFactoryMethod =
         Optional.ofNullable(
-            parent
-                .graph
-                .componentDescriptor()
-                .subcomponentsByFactoryMethod()
-                .inverse()
-                .get(graph.componentDescriptor()));
+                parent
+                    .graph
+                    .componentDescriptor()
+                    .subcomponentsByFactoryMethod()
+                    .inverse()
+                    .get(graph.componentDescriptor()))
+            .map(method -> method.methodElement());
   }
 
   private static GeneratedComponentModel subcomponentModel(
@@ -86,18 +80,6 @@ private static GeneratedComponentModel subcomponentModel(
     return GeneratedComponentModel.forSubcomponent(name);
   }
 
-  private ExecutableType resolvedSubcomponentFactoryMethod() {
-    checkState(
-        subcomponentFactoryMethod.isPresent(),
-        "%s does not have a factory method for %s",
-        parent.graph.componentType(),
-        graph.componentType());
-    return MoreTypes.asExecutable(
-        types.asMemberOf(
-            MoreTypes.asDeclared(parent.graph.componentType().asType()),
-            subcomponentFactoryMethod.get().methodElement()));
-  }
-
   @Override
   protected void addBuilderClass(TypeSpec builder) {
     parent.generatedComponentModel.addType(SUBCOMPONENT, builder);
@@ -105,86 +87,75 @@ protected void addBuilderClass(TypeSpec builder) {
 
   @Override
   protected void addFactoryMethods() {
-    if (!subcomponentFactoryMethod.isPresent()
-        || !subcomponentFactoryMethod.get().kind().isSubcomponentKind()) {
-      // subcomponent builder methods are implemented in
-      // AbstractComponentWriter.implementInterfaceMethods
-      return;
-    }
-    MethodSpec.Builder componentMethod =
-        methodBuilder(subcomponentFactoryMethod.get().methodElement().getSimpleName().toString())
-            .addModifiers(PUBLIC)
-            .addAnnotation(Override.class);
-    ExecutableType resolvedMethod = resolvedSubcomponentFactoryMethod();
-    componentMethod.returns(ClassName.get(resolvedMethod.getReturnType()));
-    writeSubcomponentWithoutBuilder(componentMethod, resolvedMethod);
-    parent.generatedComponentModel.addMethod(COMPONENT_METHOD, componentMethod.build());
+    subcomponentFactoryMethod.ifPresent(this::createSubcomponentFactoryMethod);
   }
 
-  private void writeSubcomponentWithoutBuilder(
-      MethodSpec.Builder componentMethod, ExecutableType resolvedMethod) {
-    ImmutableList.Builder<CodeBlock> subcomponentConstructorParameters = ImmutableList.builder();
-    List<? extends VariableElement> params =
-        subcomponentFactoryMethod.get().methodElement().getParameters();
-    List<? extends TypeMirror> paramTypes = resolvedMethod.getParameterTypes();
-    for (int i = 0; i < params.size(); i++) {
-      VariableElement moduleVariable = params.get(i);
-      TypeElement moduleTypeElement = MoreTypes.asTypeElement(paramTypes.get(i));
-      ComponentRequirement componentRequirement =
-          ComponentRequirement.forModule(moduleTypeElement.asType());
-      TypeName moduleType = TypeName.get(paramTypes.get(i));
-      componentMethod.addParameter(moduleType, moduleVariable.getSimpleName().toString());
-      if (!componentRequirementFields.contains(componentRequirement)) {
-        String preferredModuleName =
-            CaseFormat.UPPER_CAMEL.to(LOWER_CAMEL, moduleTypeElement.getSimpleName().toString());
-        FieldSpec contributionField =
-            componentField(ClassName.get(moduleTypeElement), preferredModuleName)
-                .addModifiers(PRIVATE, FINAL)
-                .build();
-        generatedComponentModel.addField(COMPONENT_REQUIREMENT_FIELD, contributionField);
-
-        constructor
-            .addParameter(moduleType, contributionField.name)
+  private void createSubcomponentFactoryMethod(ExecutableElement factoryMethod) {
+    parent.generatedComponentModel.addMethod(
+        COMPONENT_METHOD,
+        MethodSpec.overriding(factoryMethod, parentType(), types)
             .addStatement(
-                "this.$1N = $2T.checkNotNull($1N)", contributionField, Preconditions.class);
-
-        componentRequirementFields.add(
-            ComponentRequirementField.componentField(
-                componentRequirement, contributionField, generatedComponentModel.name()));
-        subcomponentConstructorParameters.add(
-            CodeBlock.of("$L", moduleVariable.getSimpleName()));
-      }
+                "return new $T($L)",
+                generatedComponentModel.name(),
+                factoryMethod
+                    .getParameters()
+                    .stream()
+                    .map(param -> CodeBlock.of("$L", param.getSimpleName()))
+                    .collect(toParametersCodeBlock()))
+            .build());
+
+    writeSubcomponentConstructorFor(factoryMethod);
+  }
+
+  private void writeSubcomponentConstructorFor(ExecutableElement factoryMethod) {
+    Set<ComponentRequirement> modules =
+        asExecutable(types.asMemberOf(parentType(), factoryMethod))
+            .getParameterTypes()
+            .stream()
+            .map(param -> ComponentRequirement.forModule(asTypeElement(param).asType()))
+            .collect(toImmutableSet());
+
+    for (ComponentRequirement module : modules) {
+      FieldSpec field = createSubcomponentModuleField(module);
+      constructor
+          .addParameter(field.type, field.name)
+          .addStatement("this.$1N = $2T.checkNotNull($1N)", field, Preconditions.class);
     }
 
-    Set<ComponentRequirement> uninitializedModules =
-        Sets.filter(
-            graph.componentRequirements(),
-            Predicates.not(componentRequirementFields::contains));
-
-    for (ComponentRequirement componentRequirement : uninitializedModules) {
-      checkState(componentRequirement.kind().equals(ComponentRequirement.Kind.MODULE));
-      TypeElement moduleType = componentRequirement.typeElement();
-      String preferredModuleName =
-          CaseFormat.UPPER_CAMEL.to(LOWER_CAMEL, moduleType.getSimpleName().toString());
-      FieldSpec contributionField =
-          componentField(ClassName.get(moduleType), preferredModuleName)
-              .addModifiers(PRIVATE, FINAL)
-              .build();
-      generatedComponentModel.addField(COMPONENT_REQUIREMENT_FIELD, contributionField);
-      constructor.addStatement("this.$N = new $T()", contributionField, ClassName.get(moduleType));
-      componentRequirementFields.add(
-          ComponentRequirementField.componentField(
-              componentRequirement, contributionField, generatedComponentModel.name()));
+    Set<ComponentRequirement> remainingModules =
+        graph
+            .componentRequirements()
+            .stream()
+            .filter(requirement -> requirement.kind().equals(ComponentRequirement.Kind.MODULE))
+            .filter(requirement -> !modules.contains(requirement))
+            .collect(toImmutableSet());
+
+    for (ComponentRequirement module : remainingModules) {
+      FieldSpec field = createSubcomponentModuleField(module);
+      constructor.addStatement("this.$N = new $T()", field, field.type);
     }
+  }
 
-    componentMethod.addStatement(
-        "return new $T($L)",
-        generatedComponentModel.name(),
-        makeParametersCodeBlock(subcomponentConstructorParameters.build()));
+  // TODO(user): We shouldn't have to create these manually. They should be created lazily
+  // by ComponentRequirementFields, similar to how it's done for ComponentBindingExpressions.
+  private FieldSpec createSubcomponentModuleField(ComponentRequirement module) {
+    TypeElement moduleElement = module.typeElement();
+    String fieldName =
+        generatedComponentModel.getUniqueFieldName(
+            CaseFormat.UPPER_CAMEL.to(LOWER_CAMEL, moduleElement.getSimpleName().toString()));
+    FieldSpec contributionField =
+        FieldSpec.builder(ClassName.get(moduleElement), fieldName)
+            .addModifiers(PRIVATE, FINAL).build();
+
+    generatedComponentModel.addField(COMPONENT_REQUIREMENT_FIELD, contributionField);
+    componentRequirementFields.add(
+        ComponentRequirementField.componentField(
+            module, contributionField, generatedComponentModel.name()));
+
+    return contributionField;
   }
 
-  /** Creates a {@link FieldSpec.Builder} with a unique name based off of {@code name}. */
-  private final FieldSpec.Builder componentField(TypeName type, String name) {
-    return FieldSpec.builder(type, generatedComponentModel.getUniqueFieldName(name));
+  private DeclaredType parentType() {
+    return asDeclared(parent.graph.componentType().asType());
   }
 }
