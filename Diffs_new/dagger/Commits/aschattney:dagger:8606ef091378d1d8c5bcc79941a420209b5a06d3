diff --git a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
index 32688123b..2f4f57451 100644
--- a/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/compiler/src/main/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -462,8 +462,10 @@ protected void addBuilder() {
     }
 
     for (ContributionBinding contributionBinding : graph.delegateRequirements()) {
-      createDelegateFieldAndMethod(builderName(), componentBuilder, contributionBinding, delegateFieldNames, false);
-      createMockFieldAndMethod(builderName(), componentBuilder, contributionBinding, mockFieldNames, false);
+      if (forTests || Util.generateTestDelegate(contributionBinding)) {
+        createDelegateFieldAndMethod(builderName(), componentBuilder, contributionBinding, delegateFieldNames, false);
+        createMockFieldAndMethod(builderName(), componentBuilder, contributionBinding, mockFieldNames, false);
+      }
     }
 
     return builderFields.build();
@@ -770,7 +772,7 @@ private boolean useRawType(Optional<String> bindingPackage) {
    * this method returns the static member select that returns the factory or no-op members
    * injector.
    */
-  private static Optional<MemberSelect> staticMemberSelect(ResolvedBindings resolvedBindings) {
+  private Optional<MemberSelect> staticMemberSelect(ResolvedBindings resolvedBindings) {
     BindingKey bindingKey = resolvedBindings.bindingKey();
     switch (bindingKey.kind()) {
       case CONTRIBUTION:
@@ -801,7 +803,7 @@ private boolean useRawType(Optional<String> bindingPackage) {
                   List<? extends TypeMirror> typeArguments =
                       ((DeclaredType) bindingKey.key().type()).getTypeArguments();
                   return Optional.of(MemberSelect.parameterizedFactoryCreateMethod(
-                      generatedClassNameForBinding(contributionBinding), typeArguments));
+                      this.generatedClassNameForBinding(contributionBinding), typeArguments));
                 }
               }
               // fall through
@@ -809,7 +811,7 @@ private boolean useRawType(Optional<String> bindingPackage) {
             default:
               return Optional.of(
                   staticMethod(
-                      generatedClassNameForBinding(contributionBinding), CodeBlock.of("create()")));
+                      this.generatedClassNameForBinding(contributionBinding), CodeBlock.of("create()")));
           }
         }
         break;
@@ -829,6 +831,14 @@ private boolean useRawType(Optional<String> bindingPackage) {
     return Optional.empty();
   }
 
+  protected ClassName generatedClassNameForBinding(ContributionBinding contributionBinding) {
+    if (forTests && !contributionBinding.contributedType().toString().contains("DispatchingAndroidInjector")) {
+      return SourceFiles.generatedTestClassNameForBinding(contributionBinding);
+    }else {
+      return SourceFiles.generatedClassNameForBinding(contributionBinding);
+    }
+  }
+
   /**
    * A static member select for an empty set factory. Calls {@link SetFactory#empty()}, {@link
    * SetProducer#empty()}, or {@link SetOfProducedProducer#empty()}, depending on the set
@@ -1340,7 +1350,7 @@ private CodeBlock initializeFactoryForContributionBinding(ContributionBinding bi
 
         final CodeBlock parameter = getComponentContributionExpression(ComponentRequirement.forBinding(binding));
         CodeBlock parameterDecision;
-        if (delegateFieldName != null && bindingSupportsTestDelegate(binding)) {
+        if (delegateFieldName != null) {
           parameterDecision = CodeBlock.of("builder.$L == null ? $L : builder.$L.get()", delegateFieldName, parameter, delegateFieldName);
         }else {
           parameterDecision = CodeBlock.of("$L", parameter);
@@ -1373,7 +1383,7 @@ private CodeBlock initializeFactoryForContributionBinding(ContributionBinding bi
           CodeBlock factoryCreate =
               CodeBlock.of(
                   "$T.create($L)",
-                  generatedClassNameForBinding(binding),
+                  this.generatedClassNameForBinding(binding),
                   makeParametersCodeBlock(arguments));
 
           // If scoping a parameterized factory for an @Inject class, Java 7 cannot always infer the
@@ -1422,7 +1432,7 @@ private CodeBlock initializeFactoryForContributionBinding(ContributionBinding bi
 
           return CodeBlock.of(
               "new $T($L)",
-              generatedClassNameForBinding(binding),
+              this.generatedClassNameForBinding(binding),
               makeParametersCodeBlock(arguments));
         }
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/ContributionBinding.java b/compiler/src/main/java/dagger/internal/codegen/ContributionBinding.java
index 36745f9e0..4aefcc80d 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ContributionBinding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ContributionBinding.java
@@ -63,6 +63,8 @@
 
   abstract boolean genericParameter();
 
+  abstract boolean generateTestDelegate();
+
   abstract boolean ignoreStubGeneration();
 
   abstract Optional<Equivalence.Wrapper<AnnotationMirror>> wrappedMapKey();
@@ -302,5 +304,7 @@ final TypeMirror contributedType() {
     abstract B wrappedMapKey(Optional<Equivalence.Wrapper<AnnotationMirror>> wrappedMapKey);
 
     abstract B bindingKind(ContributionBinding.Kind kind);
+
+    abstract B generateTestDelegate(boolean generate);
   }
 }
diff --git a/compiler/src/main/java/dagger/internal/codegen/Decorator.java b/compiler/src/main/java/dagger/internal/codegen/Decorator.java
index 553714088..8f3719b52 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Decorator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Decorator.java
@@ -117,7 +117,9 @@ private void addDecoratorType(TypeSpec.Builder builder, String className, TypeNa
             if (counter == 0) {
                 createFieldAndMethodImplementations(builder, bindingGraph, delegateRequirements);
             }
-            apply(delegateRequirements, statements, CodeBlock.builder(), name);
+            if (appConfigProvider.get().debug()) {
+                apply(delegateRequirements, statements, CodeBlock.builder(), name);
+            }
             if (appConfigProvider.get().generateExtendedComponents()) {
                 applyTest(delegateRequirements, statements, CodeBlock.builder(), testName);
             }
diff --git a/compiler/src/main/java/dagger/internal/codegen/DecoratorGenerator.java b/compiler/src/main/java/dagger/internal/codegen/DecoratorGenerator.java
index 1235a55b8..221e0a795 100644
--- a/compiler/src/main/java/dagger/internal/codegen/DecoratorGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/DecoratorGenerator.java
@@ -83,7 +83,7 @@ ClassName nameGeneratedType(DI input) {
     private MethodSpec createMethod(BindingGraph graph, ClassName testAppClassName) {
         final String componentName = graph.componentDescriptor().componentDefinitionType().getSimpleName().toString();
         final ClassName className = Decorator.className(graph);
-        final String methodName = Util.lowerCaseFirstLetter(className.simpleName().replaceAll("Decorator$", ""));
+        final String methodName = Util.lowerCaseFirstLetter(className.simpleName().replaceAll("DecoratorImpl$", ""));
         final TypeName accessorName = Decorator.getAccessorTypeName(testAppClassName, componentName);
         return MethodSpec.methodBuilder(methodName)
                 .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)
diff --git a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
index 1ab2ae6b6..f1c3176d5 100644
--- a/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/FactoryGenerator.java
@@ -97,7 +97,7 @@
   }
 
   protected boolean shouldCheckForDelegate(ContributionBinding binding) {
-    return Util.bindingSupportsTestDelegate(binding);
+    return Util.generateTestDelegate(binding);
   }
 
   @Override
@@ -159,13 +159,15 @@ ClassName nameGeneratedType(ProvisionBinding binding) {
                   constructorBuilder.get(),
                   false
           );
-          addConstructorParameterAndTypeField(
-                  Util.providerOf(binding),
-                  getMockFieldName(binding.key()),
-                  factoryBuilder,
-                  constructorBuilder.get(),
-                  false
-          );
+          if (!binding.dependencies().isEmpty()) {
+            addConstructorParameterAndTypeField(
+                    Util.providerOf(binding),
+                    getMockFieldName(binding.key()),
+                    factoryBuilder,
+                    constructorBuilder.get(),
+                    false
+            );
+          }
         }
         if (binding.requiresModuleInstance()) {
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProductionBinding.java b/compiler/src/main/java/dagger/internal/codegen/ProductionBinding.java
index a63dc8e5a..6399866b9 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProductionBinding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProductionBinding.java
@@ -104,6 +104,8 @@ private static Builder builder() {
     return new AutoValue_ProductionBinding.Builder()
         .explicitDependencies(ImmutableList.<DependencyRequest>of())
         .genericParameter(false)
+        .ignoreStubGeneration(true)
+        .generateTestDelegate(false)
         .thrownTypes(ImmutableList.<TypeMirror>of());
   }
 
diff --git a/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java b/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java
index 9a1b85d0c..2878b7ed2 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ProvisionBinding.java
@@ -88,6 +88,7 @@ private static Builder builder() {
     return new AutoValue_ProvisionBinding.Builder()
         .genericParameter(false)
         .ignoreStubGeneration(true)
+        .generateTestDelegate(false)
         .explicitDependencies(ImmutableSet.<DependencyRequest>of());
   }
   
@@ -157,11 +158,13 @@ ProvisionBinding forInjectConstructor(
       Optional<DependencyRequest> membersInjectionRequest =
           membersInjectionRequest(enclosingCxtorType);
 
+      final boolean ignoreStubGeneration = constructorElement.getAnnotation(AllowStubGeneration.class) == null;
       ProvisionBinding.Builder builder =
           ProvisionBinding.builder()
               .contributionType(ContributionType.UNIQUE)
               .bindingElement(constructorElement)
-              .ignoreStubGeneration(constructorElement.getAnnotation(AllowStubGeneration.class) == null)
+              .ignoreStubGeneration(ignoreStubGeneration)
+              .generateTestDelegate(!ignoreStubGeneration && appConfigProvider.get().debug())
               .key(key)
               .explicitDependencies(dependencies)
               .membersInjectionRequest(membersInjectionRequest)
@@ -207,10 +210,12 @@ ProvisionBinding forProvidesMethod(
           dependencyRequestFactory.forRequiredResolvedVariables(
               providesMethod.getParameters(),
               resolvedMethod.getParameterTypes());
+      final boolean ignoreStubGeneration = genericParameter || providesMethod.getAnnotation(AllowStubGeneration.class) == null;
       return ProvisionBinding.builder()
           .contributionType(ContributionType.fromBindingMethod(providesMethod))
           .bindingElement(providesMethod)
-          .ignoreStubGeneration(genericParameter || providesMethod.getAnnotation(AllowStubGeneration.class) == null)
+          .ignoreStubGeneration(ignoreStubGeneration)
+          .generateTestDelegate(!ignoreStubGeneration && (appConfigProvider.get().debug()))
           .contributingModule(contributedBy)
           .key(key)
           .genericParameter(genericParameter)
@@ -285,10 +290,12 @@ ProvisionBinding forBuilderBinding(BuilderRequirementMethod method) {
       checkArgument(builderMethod.getKind().equals(METHOD));
       checkArgument(builderMethod.getParameters().size() == 1);
       VariableElement parameterElement = Iterables.getOnlyElement(builderMethod.getParameters());
+      final boolean ignoreStubGeneration = builderMethod.getAnnotation(AllowStubGeneration.class) == null;
       return ProvisionBinding.builder()
           .contributionType(ContributionType.UNIQUE)
           .bindingElement(builderMethod)
-          .ignoreStubGeneration(builderMethod.getAnnotation(AllowStubGeneration.class) == null)
+          .ignoreStubGeneration(ignoreStubGeneration)
+          .generateTestDelegate(!ignoreStubGeneration && (appConfigProvider.get().debug()))
           .key(method.requirement().key().get())
           .nullableType(ConfigurationAnnotations.getNullableType(parameterElement))
           .bindingKind(Kind.BUILDER_BINDING)
@@ -302,9 +309,11 @@ ProvisionBinding forSubcomponentBuilderMethod(
       checkArgument(subcomponentBuilderMethod.getParameters().isEmpty());
       DeclaredType declaredContainer = asDeclared(contributedBy.asType());
       final DependencyRequest request = dependencyRequestFactory.plantDependency(application);
+      final boolean ignoreStubGeneration = subcomponentBuilderMethod.getAnnotation(AllowStubGeneration.class) == null;
       return ProvisionBinding.builder()
           .contributionType(ContributionType.UNIQUE)
-          .ignoreStubGeneration(subcomponentBuilderMethod.getAnnotation(AllowStubGeneration.class) == null)
+          .ignoreStubGeneration(ignoreStubGeneration)
+          .generateTestDelegate(!ignoreStubGeneration && (appConfigProvider.get().debug()))
           .bindingElement(subcomponentBuilderMethod)
           .key(keyFactory.forSubcomponentBuilderMethod(subcomponentBuilderMethod, declaredContainer))
           .bindingKind(Kind.SUBCOMPONENT_BUILDER)
diff --git a/compiler/src/main/java/dagger/internal/codegen/StubGenerator.java b/compiler/src/main/java/dagger/internal/codegen/StubGenerator.java
index 746faa745..60c7f21eb 100644
--- a/compiler/src/main/java/dagger/internal/codegen/StubGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/StubGenerator.java
@@ -13,6 +13,7 @@
 import java.util.*;
 import static dagger.internal.codegen.SourceFiles.generateBindingFieldsForDependencies;
 import static dagger.internal.codegen.TypeNames.*;
+import static dagger.internal.codegen.Util.bindingSupportsTestDelegate;
 
 
 public class StubGenerator extends SourceFileGenerator<ProvisionBinding> {
@@ -39,9 +40,8 @@ ClassName nameGeneratedType(ProvisionBinding input) {
 
     @Override
     Optional<TypeSpec.Builder> write(ClassName generatedTypeName, ProvisionBinding input) {
-
         final String o = generatedTypeName.packageName() + "." + generatedTypeName.simpleName();
-        if (generated.contains(o) || !Util.generateTestDelegate(input)) {
+        if (generated.contains(o) || !bindingSupportsTestDelegate(input)) {
             return Optional.empty();
         }
         generated.add(o);
diff --git a/compiler/src/main/java/dagger/internal/codegen/TestFactoryGenerator.java b/compiler/src/main/java/dagger/internal/codegen/TestFactoryGenerator.java
index 8515df31d..020c8f248 100644
--- a/compiler/src/main/java/dagger/internal/codegen/TestFactoryGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/TestFactoryGenerator.java
@@ -22,7 +22,7 @@
 
     @Override
     protected boolean shouldCheckForDelegate(ContributionBinding binding) {
-        return Util.generateTestDelegate(binding);
+        return Util.bindingSupportsTestDelegate(binding);
     }
 
     @Override
diff --git a/compiler/src/main/java/dagger/internal/codegen/TriggerComponentInfo.java b/compiler/src/main/java/dagger/internal/codegen/TriggerComponentInfo.java
index 72c0866b4..7dd43bc69 100644
--- a/compiler/src/main/java/dagger/internal/codegen/TriggerComponentInfo.java
+++ b/compiler/src/main/java/dagger/internal/codegen/TriggerComponentInfo.java
@@ -49,7 +49,7 @@ protected TriggerComponentInfo(TypeElement typeElement, ComponentDescriptor desc
     }
 
     protected String getDecoratorFieldName(TypeElement component) {
-        return lowerCaseFirstLetter(component.getSimpleName().toString()) + DECORATOR;
+        return lowerCaseFirstLetter(component.getSimpleName().toString()) + DECORATOR + "Impl";
     }
 
     protected boolean noActionRequired(List<String> ids) {
diff --git a/compiler/src/main/java/dagger/internal/codegen/Util.java b/compiler/src/main/java/dagger/internal/codegen/Util.java
index 52e17c445..ddb533f6b 100644
--- a/compiler/src/main/java/dagger/internal/codegen/Util.java
+++ b/compiler/src/main/java/dagger/internal/codegen/Util.java
@@ -692,24 +692,16 @@ public static void createMockInstanceMethod(TypeName generatedTypeName, TypeSpec
     public static void createMockMethodImplementation(TypeName generatedTypeName, TypeSpec.Builder classBuilder, ContributionBinding binding) {
         try {
             if (bindingSupportsTestDelegate(binding)) {
-                final String delegateFieldName = Util.getDelegateFieldName(binding.key());
-                final ClassName delegateType = getDelegateTypeName(binding.key());
-                final TypeName contributedTypeName = ClassName.get(binding.contributedType());
-                final ParameterizedTypeName providerType = ParameterizedTypeName.get(ClassName.get(Provider.class), contributedTypeName);
-                final String methodName = getDelegateMethodName(delegateType);
-                final MethodSpec.Builder delegateMethodBuilder = MethodSpec.methodBuilder(methodName);
-                delegateMethodBuilder.addModifiers(Modifier.PUBLIC);
-                final CodeBlock params = createParametersCodeBlock(binding);
-                classBuilder.addMethod(delegateMethodBuilder
+                final String mockFieldName = Util.getMockFieldName(binding.key());
+                final ClassName delegateType = getMockTypeName(binding.key());
+                final String methodName = getMockMethodName(delegateType);
+                final TypeName providerType = providerOf(binding);
+                final MethodSpec.Builder mockMethodBuilder = MethodSpec.methodBuilder(methodName);
+                mockMethodBuilder.addModifiers(Modifier.PUBLIC);
+                classBuilder.addMethod(mockMethodBuilder
                         .returns(generatedTypeName)
                         .addParameter(providerType, "provider", Modifier.FINAL)
-                        .addStatement("this.$L = new $T() {\n" +
-                                "   public $T get($L) { \n" +
-                                "       return provider.get();\n" +
-                                "   }\n" +
-                                "};", delegateFieldName, delegateType,
-                                contributedTypeName,
-                                     params)
+                        .addStatement("this.$L = provider", mockFieldName)
                         .addStatement("return this")
                         .build());
             }
@@ -803,7 +795,7 @@ public static void createMockFieldAndMethod(TypeName generatedTypeName, TypeSpec
                 mockFieldNames.put(binding.key(), mockFieldName);
                 final FieldSpec fieldSpec = builder.build();
                 classBuilder.addField(fieldSpec);
-                final String methodName = getDelegateMethodName(delegateType);
+                final String methodName = getMockMethodName(delegateType);
                 final MethodSpec.Builder delegateMethodBuilder = MethodSpec.methodBuilder(methodName);
                 if (publicMethod) {
                     delegateMethodBuilder.addModifiers(Modifier.PUBLIC);
@@ -820,7 +812,7 @@ public static void createMockFieldAndMethod(TypeName generatedTypeName, TypeSpec
     }
 
     static TypeName providerOf(ContributionBinding binding) {
-        return ParameterizedTypeName.get(ClassName.get(Provider.class), ClassName.get(binding.key().type()));
+        return ParameterizedTypeName.get(ClassName.get(Provider.class), ClassName.get(binding.contributedType()));
     }
 
     public static String getProvisionMethodName(ContributionBinding binding) {
@@ -856,15 +848,14 @@ public static ClassName getDaggerComponentClassName(Element component) {
     public static final ClassName TYPENAME_DAGGER_ANDROID_APPLICATION = TYPENAME_ANDROID_APPLICATION.topLevelClassName().peerClass("DaggerApplication");
 
     public static boolean generateTestDelegate(ContributionBinding binding) {
-        return bindingCanBeProvidedInTest(binding) && !binding.genericParameter() && !binding.ignoreStubGeneration();
+        return bindingCanBeProvidedInTest(binding) && binding.generateTestDelegate();
     }
 
     public static void createMockField(TypeSpec.Builder classBuilder, ContributionBinding binding) {
         try {
             if (bindingSupportsTestDelegate(binding)) {
-                final String delegateFieldName = Util.getMockFieldName(binding.key());
-                final ClassName delegateType = getMockTypeName(binding.key());
-                final FieldSpec.Builder builder = FieldSpec.builder(delegateType, delegateFieldName);
+                final String mockFieldName = Util.getMockFieldName(binding.key());
+                final FieldSpec.Builder builder = FieldSpec.builder(providerOf(binding), mockFieldName);
                 builder.addModifiers(Modifier.PRIVATE);
                 final FieldSpec fieldSpec = builder.build();
                 classBuilder.addField(fieldSpec);
@@ -873,6 +864,6 @@ public static void createMockField(TypeSpec.Builder classBuilder, ContributionBi
     }
 
     static String getMockMethodName(ClassName mockTypeName) {
-        return "with" + mockTypeName.simpleName().replaceAll("Delegate$", "Mock");
+        return "with" + mockTypeName.simpleName().replaceAll("Delegate$", "").replaceAll("Mock$", "");
     }
 }
