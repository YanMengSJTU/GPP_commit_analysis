diff --git a/java/dagger/android/processor/BUILD b/java/dagger/android/processor/BUILD
index 94caad6a1..7b2948fc7 100644
--- a/java/dagger/android/processor/BUILD
+++ b/java/dagger/android/processor/BUILD
@@ -23,6 +23,7 @@ load(
     "DOCLINT_REFERENCES",
 )
 load("//tools:maven.bzl", "pom_file", "POM_VERSION")
+load("//tools:simple_jar.bzl", "simple_jar")
 
 filegroup(
     name = "srcs",
@@ -33,6 +34,7 @@ java_library(
     name = "processor",
     srcs = [":srcs"],
     javacopts = DOCLINT_HTML_AND_SYNTAX + DOCLINT_REFERENCES,
+    resource_jars = [":processor_manifest_files.jar"],
     tags = ["maven_coordinates=com.google.dagger:dagger-android-processor:" + POM_VERSION],
     deps = [
         "@google_bazel_common//third_party/java/guava",
@@ -69,6 +71,11 @@ java_import(
     visibility = ["//visibility:private"],
 )
 
+simple_jar(
+    name = "processor_manifest_files",
+    srcs = glob(["META-INF/**"]),
+)
+
 pom_file(
     name = "pom",
     artifact_id = "dagger-android-processor",
diff --git a/java/dagger/android/processor/META-INF/gradle/incremental.annotation.processors b/java/dagger/android/processor/META-INF/gradle/incremental.annotation.processors
new file mode 100644
index 000000000..22b8a9509
--- /dev/null
+++ b/java/dagger/android/processor/META-INF/gradle/incremental.annotation.processors
@@ -0,0 +1 @@
+dagger.android.processor.AndroidProcessor,isolating
diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index 9fad8ca54..e269fdb8e 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -19,6 +19,7 @@ package(default_visibility = ["//:src"])
 
 load("//:build_defs.bzl", "DOCLINT_HTML_AND_SYNTAX", "DOCLINT_REFERENCES")
 load("//tools:maven.bzl", "pom_file", "POM_VERSION")
+load("//tools:simple_jar.bzl", "simple_jar")
 
 EXPERIMENTAL_VISUALIZER_SRCS = ["BindingNetworkVisualizer.java"]
 
@@ -305,6 +306,11 @@ java_library(
     ],
 )
 
+simple_jar(
+    name = "processor_manifest_files",
+    srcs = glob(["META-INF/**"]),
+)
+
 # The processor's "main", if you will
 java_library(
     name = "processor",
@@ -330,6 +336,7 @@ java_library(
         "ProductionExecutorModuleProcessingStep.java",
     ],
     plugins = CODEGEN_PLUGINS,
+    resource_jars = [":processor_manifest_files.jar"],
     tags = ["maven_coordinates=com.google.dagger:dagger-compiler:" + POM_VERSION],
     deps = CODEGEN_DEPS + [
         ":base",
diff --git a/java/dagger/internal/codegen/ComponentProcessor.java b/java/dagger/internal/codegen/ComponentProcessor.java
index bd3a9129b..cd9ec57c5 100644
--- a/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/java/dagger/internal/codegen/ComponentProcessor.java
@@ -93,6 +93,9 @@ public SourceVersion getSupportedSourceVersion() {
     options.addAll(CompilerOptions.SUPPORTED_OPTIONS);
     options.addAll(spiPlugins.allSupportedOptions());
     options.addAll(validationPlugins.allSupportedOptions());
+    if (processingEnv.getOptions().containsKey("dagger.gradle.incremental")) {
+      options.add("org.gradle.annotation.processing.isolating");
+    }
     return options.build();
   }
 
diff --git a/java/dagger/internal/codegen/META-INF/gradle/incremental.annotation.processors b/java/dagger/internal/codegen/META-INF/gradle/incremental.annotation.processors
new file mode 100644
index 000000000..db550fe97
--- /dev/null
+++ b/java/dagger/internal/codegen/META-INF/gradle/incremental.annotation.processors
@@ -0,0 +1 @@
+dagger.internal.codegen.ComponentProcessor,dynamic
diff --git a/tools/simple_jar.bzl b/tools/simple_jar.bzl
new file mode 100644
index 000000000..71b3f7b1e
--- /dev/null
+++ b/tools/simple_jar.bzl
@@ -0,0 +1,31 @@
+# Copyright (C) 2018 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+"""Macro for creating a jar from a set of flat files"""
+
+def simple_jar(name, srcs):
+    """Creates a jar out of a set of flat files"""
+
+    # TODO(dpb): consider creating a Fileset() under the hood to support srcs from different
+    # directories
+    native.genrule(
+        name = name,
+        srcs = srcs,
+        outs = ["%s.jar" % name],
+        cmd = """
+        OUT="$$(pwd)/$@"
+        cd {package_name}
+        zip "$$OUT" -r * &> /dev/null
+        """.format(package_name = native.package_name()),
+    )
