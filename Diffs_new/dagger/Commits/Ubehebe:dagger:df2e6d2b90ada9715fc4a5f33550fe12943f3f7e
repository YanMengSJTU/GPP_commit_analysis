diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
index 3cffd7b87..5626dd471 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
@@ -4399,7 +4399,7 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             "final class ExecutorModule {",
             "  @Provides",
             "  @Production",
-            "  Executor executor() {",
+            "  static Executor executor() {",
             "    return MoreExecutors.directExecutor();",
             "  }",
             "}"),
@@ -4418,6 +4418,11 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             "  })",
             "interface Root {",
             "  Leaf.Builder leaf();",
+            "",
+            "  @ProductionComponent.Builder",
+            "  interface Builder {",
+            "    Root build();",
+            "  }",
             "}"),
         JavaFileObjects.forSourceLines(
             "test.ResponseDependencyProducerModule",
@@ -4457,7 +4462,6 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             "package test;",
             "import dagger.internal.DoubleCheck;",
             "import dagger.internal.InstanceFactory;",
-            "import dagger.internal.Preconditions;",
             "import dagger.internal.SetFactory;",
             "import dagger.producers.Producer;",
             "import dagger.producers.internal.CancellationListener;",
@@ -4472,8 +4476,6 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             "",
             GENERATED_ANNOTATION,
             "public final class DaggerRoot implements Root, CancellationListener {",
-            "  private ExecutorModule_ExecutorFactory executorProvider;",
-            "",
             "  private Provider<Executor> productionImplementationExecutorProvider;",
             "",
             "  private Provider<Root> rootProvider;",
@@ -4489,7 +4491,7 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             "    initialize(builder);",
             "  }",
             "",
-            "  public static Builder builder() {",
+            "  public static Root.Builder builder() {",
             "    return new Builder();",
             "  }",
             "",
@@ -4499,10 +4501,8 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             "",
             "  @SuppressWarnings(\"unchecked\")",
             "  private void initialize(final Builder builder) {",
-            "    this.executorProvider =",
-            "        ExecutorModule_ExecutorFactory.create(builder.executorModule);",
             "    this.productionImplementationExecutorProvider =",
-            "        DoubleCheck.provider((Provider) executorProvider);",
+            "        DoubleCheck.provider((Provider) ExecutorModule_ExecutorFactory.create());",
             "    this.rootProvider = InstanceFactory.create((Root) this);",
             "    this.monitorProvider =",
             "        DoubleCheck.provider(",
@@ -4528,37 +4528,11 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             "    Producers.cancel(responseDependencyProducer, mayInterruptIfRunning);",
             "  }",
             "",
-            "  public static final class Builder {",
-            "    private ExecutorModule executorModule;",
-            "",
-            "    private Builder() {}",
-            "",
+            "  private static final class Builder implements Root.Builder {",
+            "    @Override",
             "    public Root build() {",
-            "      if (executorModule == null) {",
-            "        this.executorModule = new ExecutorModule();",
-            "      }",
             "      return new DaggerRoot(this);",
             "    }",
-            "",
-            // TODO(b/72748365): define a builder so these methods can be omitted
-            "    public Builder executorModule(ExecutorModule executorModule) {",
-            "      this.executorModule = Preconditions.checkNotNull(executorModule);",
-            "      return this;",
-            "    }",
-            "",
-            "    @Deprecated",
-            "    public Builder responseDependencyProducerModule(",
-            "        ResponseDependencyProducerModule responseDependencyProducerModule) {",
-            "      Preconditions.checkNotNull(responseDependencyProducerModule);",
-            "      return this;",
-            "    }",
-            "",
-            "    @Deprecated",
-            "    public Builder rootMultibindingModule(",
-            "        RootMultibindingModule rootMultibindingModule) {",
-            "      Preconditions.checkNotNull(rootMultibindingModule);",
-            "      return this;",
-            "    }",
             "  }",
             "",
             "  private final class LeafBuilder extends DaggerLeaf.Builder {",
