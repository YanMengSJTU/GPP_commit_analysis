diff --git a/java/dagger/internal/codegen/SetBindingExpression.java b/java/dagger/internal/codegen/SetBindingExpression.java
index faaa36985..bf9d74bf0 100644
--- a/java/dagger/internal/codegen/SetBindingExpression.java
+++ b/java/dagger/internal/codegen/SetBindingExpression.java
@@ -55,8 +55,8 @@
   @Override
   Expression getDependencyExpression(ClassName requestingClass) {
     // TODO(ronshapiro): We should also make an ImmutableSet version of SetFactory
-    boolean isImmutableSetAvailable = isImmutableSetAvailable();
     boolean isImmutableSetBuilderWithExpectedSizeAvailable = isImmutableSetBuilderWithExpectedSizeAvailable();
+    boolean isImmutableSetAvailable = isImmutableSetAvailable();
     // TODO(ronshapiro, gak): Use Sets.immutableEnumSet() if it's available?
     if (isImmutableSetAvailable && binding.dependencies().stream().allMatch(this::isSingleValue)) {
       return Expression.create(
@@ -157,10 +157,6 @@ private boolean isSingleValue(DependencyRequest dependency) {
         .equals(ContributionType.SET);
   }
 
-  private boolean isImmutableSetAvailable() {
-    return elements.getTypeElement(ImmutableSet.class) != null;
-  }
-
   private boolean isImmutableSetBuilderWithExpectedSizeAvailable() {
     if (isImmutableSetAvailable()) {
       return methodsIn(elements.getTypeElement(ImmutableSet.class).getEnclosedElements())
@@ -169,4 +165,8 @@ private boolean isImmutableSetBuilderWithExpectedSizeAvailable() {
     }
     return false;
   }
+
+  private boolean isImmutableSetAvailable() {
+    return elements.getTypeElement(ImmutableSet.class) != null;
+  }
 }
