diff --git a/subcomponents.md b/subcomponents.md
index 4b4ffc115..2ed6952a4 100644
--- a/subcomponents.md
+++ b/subcomponents.md
@@ -122,6 +122,57 @@ SessionComponent sessionComponent = serverComponent.sessionComponentBuilder()
     .build();
 ```
 
+#### Injecting subcomponent builders
+
+Like the component itself, subcomponent builders are bound in the graph and can
+be injected, too. So instead of injecting the component and calling the subcomponent
+builder method on it, you can inject the builder itself:
+
+```java
+  /** Injecting the subcomponent builder. This is simpler than what's below. */
+  class SessionStarterInjectingSubcomponentBuilder {
+    private final SessionComponent.Builder sessionComponentBuilder;
+    
+    @Inject SessionStarterInjectingSubcomponentBuilder(
+        SessionComponent.Builder sessionComponentBuilder) {
+      this.sessionComponentBuilder = sessionComponentBuilder;
+    }
+    
+    Session startSession() {
+      return sessionComponentBuilder
+          .sessionModule(new SessionModule(…))
+          .build()
+          .session();
+    }
+  }
+
+  /**
+   * Injecting the component and calling the factory method. Not as simple as
+   * what's above.
+   */
+  class SessionStarterInjectingComponent {
+    private final ServerComponent serverComponent;
+    
+    @Inject SessionStarterInjectingComponent(ServerComponent serverComponent) {
+      this.serverComponent = serverComponent;
+    }
+
+    Session startSession() {
+      return serverComponent.sessionComponentBuilder()
+          .sessionModule(new SessionModule(…))
+          .build()
+          .session();
+    }
+  }
+```
+
+Note that `SessionStarterInjectingSubcomponentBuilder` doesn't refer to
+`ServerComponent` at all.
+
+<!-- TODO(dpb):
+     Describe the "subcomponent framework" pattern in detail elsewhere.
+-->
+
 ## Subcomponents and scope
 
 <!-- TODO(dpb,gak): Describe scopes independently from subcomponents. -->
