diff --git a/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java b/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java
index ae7943a1d..3269e23a2 100644
--- a/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java
+++ b/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java
@@ -133,10 +133,8 @@ ComponentCreatorImplementation build() {
       setSupertype();
       addFields();
       addConstructor();
-      addFactoryMethod();
-      // TODO(ronshapiro): this should be switched with addFactoryMethod(), but that currently
-      // breaks compile-testing tests that rely on the order of the methods
       addSetterMethods();
+      addFactoryMethod();
       return ComponentCreatorImplementation.create(
           componentCreatorClass.build(),
           componentImplementation.getCreatorName(),
diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
index 7e7753987..12a77379e 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
@@ -4321,15 +4321,15 @@ public void provisionOverInjection_prunedIndirectDependency() {
             "  public static final class Builder {",
             "    private Builder() {}",
             "",
-            "    public Root build() {",
-            "      return new DaggerRoot();",
-            "    }",
-            "",
             "    @Deprecated",
             "    public Builder rootModule(RootModule rootModule) {",
             "      Preconditions.checkNotNull(rootModule);",
             "      return this;",
             "    }",
+            "",
+            "    public Root build() {",
+            "      return new DaggerRoot();",
+            "    }",
             "  }",
             "",
             "  protected final class LeafImpl extends DaggerLeaf {",
@@ -4474,15 +4474,15 @@ public void provisionOverInjection_prunedDirectDependency_prunedInConcreteImplem
             "  public static final class Builder {",
             "    private Builder() {}",
             "",
-            "    public Root build() {",
-            "      return new DaggerRoot();",
-            "    }",
-            "",
             "    @Deprecated",
             "    public Builder rootModule(RootModule rootModule) {",
             "      Preconditions.checkNotNull(rootModule);",
             "      return this;",
             "    }",
+            "",
+            "    public Root build() {",
+            "      return new DaggerRoot();",
+            "    }",
             "  }",
             "",
             "  protected final class LeafImpl extends DaggerLeaf {",
@@ -6060,32 +6060,32 @@ public void subcomponentBuilders_repeatedModule() {
             "",
             "    private Builder() {}",
             "",
+            "    public Builder repeatedModule(RepeatedModule repeatedModule) {",
+            "      this.repeatedModule = Preconditions.checkNotNull(repeatedModule);",
+            "      return this;",
+            "    }",
+            "",
             "    public Root build() {",
             "      if (repeatedModule == null) {",
             "        this.repeatedModule = new RepeatedModule();",
             "      }",
             "      return new DaggerRoot(repeatedModule);",
             "    }",
-            "",
-            "    public Builder repeatedModule(RepeatedModule repeatedModule) {",
-            "      this.repeatedModule = Preconditions.checkNotNull(repeatedModule);",
-            "      return this;",
-            "    }",
             "  }",
             "",
             "  private final class LeafBuilder extends DaggerLeaf.Builder {",
             "    @Override",
-            "    public Leaf build() {",
-            "      return new LeafImpl();",
-            "    }",
-            "",
-            "    @Override",
             "    public LeafBuilder repeatedModule(RepeatedModule repeatedModule) {",
             "      throw new UnsupportedOperationException(",
             "        String.format(",
             "          \"%s cannot be set because it is inherited from the enclosing component\",",
             "          RepeatedModule.class.getCanonicalName()));",
             "    }",
+            "",
+            "    @Override",
+            "    public Leaf build() {",
+            "      return new LeafImpl();",
+            "    }",
             "  }",
             "",
             "  protected final class LeafImpl extends DaggerLeaf {",
diff --git a/javatests/dagger/internal/codegen/ComponentBuilderTest.java b/javatests/dagger/internal/codegen/ComponentBuilderTest.java
index 58001f61a..c4d97cd7e 100644
--- a/javatests/dagger/internal/codegen/ComponentBuilderTest.java
+++ b/javatests/dagger/internal/codegen/ComponentBuilderTest.java
@@ -145,18 +145,18 @@ public void testUsesBuildAndSetterNames() {
             "    private TestModule testModule;",
             "",
             "    @Override",
+            "    public Builder setTestModule(TestModule testModule) {",
+            "      this.testModule = Preconditions.checkNotNull(testModule);",
+            "      return this;",
+            "    }",
+            "",
+            "    @Override",
             "    public TestComponent create() {",
             "      if (testModule == null) {",
             "        this.testModule = new TestModule();",
             "      }",
             "      return new DaggerTestComponent(testModule);",
             "    }",
-            "",
-            "    @Override",
-            "    public Builder setTestModule(TestModule testModule) {",
-            "      this.testModule = Preconditions.checkNotNull(testModule);",
-            "      return this;",
-            "    }",
             "  }",
             "}");
     Compilation compilation =
@@ -255,6 +255,12 @@ public void testIgnoresModulesNotInApi() {
             "    private TestModule2 testModule2;",
             "",
             "    @Override",
+            "    public Builder testModule1(TestModule1 testModule1) {",
+            "      this.testModule1 = Preconditions.checkNotNull(testModule1);",
+            "      return this;",
+            "    }",
+            "",
+            "    @Override",
             "    public TestComponent build() {",
             "      if (testModule1 == null) {",
             "        this.testModule1 = new TestModule1();",
@@ -264,12 +270,6 @@ public void testIgnoresModulesNotInApi() {
             "      }",
             "      return new DaggerTestComponent(testModule1, testModule2);",
             "    }",
-            "",
-            "    @Override",
-            "    public Builder testModule1(TestModule1 testModule1) {",
-            "      this.testModule1 = Preconditions.checkNotNull(testModule1);",
-            "      return this;",
-            "    }",
             "  }",
             "}");
     Compilation compilation =
@@ -427,16 +427,16 @@ public void testBuilderBindsInstanceNoCreateGenerated() {
             "    private Object object;",
             "",
             "    @Override",
-            "    public SimpleComponent build() {",
-            "      Preconditions.checkBuilderRequirement(object, Object.class);",
-            "      return new DaggerSimpleComponent(object);",
-            "    }",
-            "",
-            "    @Override",
             "    public Builder object(Object object) {",
             "      this.object = Preconditions.checkNotNull(object);",
             "      return this;",
             "    }",
+            "",
+            "    @Override",
+            "    public SimpleComponent build() {",
+            "      Preconditions.checkBuilderRequirement(object, Object.class);",
+            "      return new DaggerSimpleComponent(object);",
+            "    }",
             "  }",
             "}");
 
diff --git a/javatests/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
index 51f24ea56..6da22a0ac 100644
--- a/javatests/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
@@ -526,17 +526,17 @@ public ComponentProcessorTest(CompilerMode compilerMode) {
                 "  public static final class Builder {",
                 "    private TestModule testModule;",
                 "",
+                "    public Builder testModule(TestModule testModule) {",
+                "      this.testModule = Preconditions.checkNotNull(testModule);",
+                "      return this;",
+                "    }",
+                "",
                 "    public TestComponent build() {",
                 "      if (testModule == null) {",
                 "        this.testModule = new TestModule();",
                 "      }",
                 "      return new DaggerTestComponent(testModule);",
                 "    }",
-                "",
-                "    public Builder testModule(TestModule testModule) {",
-                "      this.testModule = Preconditions.checkNotNull(testModule);",
-                "      return this;",
-                "    }",
                 "  }",
                 "}")
             .build();
@@ -711,9 +711,6 @@ public void componentWithAbstractModule() {
         GENERATED_ANNOTATION,
         "public final class DaggerTestComponent implements TestComponent {",
         "  public static final class Builder {",
-        "    public TestComponent build() {",
-        "      return new DaggerTestComponent();",
-        "    }",
         "",
         "    @Deprecated",
         "    public Builder testModule(TestModule testModule) {",
@@ -750,6 +747,10 @@ public void componentWithAbstractModule() {
         "      Preconditions.checkNotNull(refByDep)",
         "      return this;",
         "    }",
+        "",
+        "    public TestComponent build() {",
+        "      return new DaggerTestComponent();",
+        "    }",
         "  }",
         "}");
     Compilation compilation =
@@ -914,15 +915,15 @@ public void subcomponentNotGeneratedIfNotUsedInGraph() {
             "",
             "    private Builder() {}",
             "",
-            "    public Parent build() {",
-            "      return new DaggerParent();",
-            "    }",
-            "",
             "    @Deprecated",
             "    public Builder parentModule(ParentModule parentModule) {",
             "      Preconditions.checkNotNull(parentModule);",
             "      return this;",
             "    }",
+            "",
+            "    public Parent build() {",
+            "      return new DaggerParent();",
+            "    }",
             "  }",
             "}");
     Compilation compilation =
@@ -1241,15 +1242,15 @@ public void testDefaultPackage() {
                 "  public static final class Builder {",
                 "    private AComponent aComponent;",
                 "",
-                "    public BComponent build() {",
-                "      Preconditions.checkBuilderRequirement(aComponent, AComponent.class);",
-                "      return new DaggerBComponent(aComponent);",
-                "    }",
-                "",
                 "    public Builder aComponent(AComponent aComponent) {",
                 "      this.aComponent = Preconditions.checkNotNull(aComponent);",
                 "      return this;",
                 "    }",
+                "",
+                "    public BComponent build() {",
+                "      Preconditions.checkBuilderRequirement(aComponent, AComponent.class);",
+                "      return new DaggerBComponent(aComponent);",
+                "    }",
                 "  }")
             .addLinesIn(
                 DEFAULT_MODE,
@@ -1368,16 +1369,6 @@ public void testDefaultPackage() {
             "    private TestModule testModule;",
             "    private other.test.TestModule testModule2;",
             "",
-            "    public TestComponent build() {",
-            "      if (testModule == null) {",
-            "        this.testModule = new TestModule();",
-            "      }",
-            "      if (testModule2 == null) {",
-            "        this.testModule2 = new other.test.TestModule();",
-            "      }",
-            "      return new DaggerTestComponent(testModule, testModule2);",
-            "    }",
-            "",
             "    public Builder testModule(TestModule testModule) {",
             "      this.testModule = Preconditions.checkNotNull(testModule);",
             "      return this;",
@@ -1387,6 +1378,16 @@ public void testDefaultPackage() {
             "      this.testModule2 = Preconditions.checkNotNull(testModule);",
             "      return this;",
             "    }",
+            "",
+            "    public TestComponent build() {",
+            "      if (testModule == null) {",
+            "        this.testModule = new TestModule();",
+            "      }",
+            "      if (testModule2 == null) {",
+            "        this.testModule2 = new other.test.TestModule();",
+            "      }",
+            "      return new DaggerTestComponent(testModule, testModule2);",
+            "    }",
             "  }",
             "}");
     Compilation compilation =
@@ -2097,15 +2098,15 @@ public void unusedSubcomponents_dontResolveExtraBindingsInParentComponents() {
             "  public static final class Builder {",
             "    private Builder() {}",
             "",
-            "    public Parent build() {",
-            "      return new DaggerParent();",
-            "    }",
-            "",
             "    @Deprecated",
             "    public Builder testModule(TestModule testModule) {",
             "      Preconditions.checkNotNull(testModule);",
             "      return this;",
             "    }",
+            "",
+            "    public Parent build() {",
+            "      return new DaggerParent();",
+            "    }",
             "  }",
             "}");
 
diff --git a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
index 6f36cb62b..b61434d20 100644
--- a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
+++ b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
@@ -101,13 +101,6 @@ public void bindsInstance() {
                 "    private List<String> list;",
                 "",
                 "    @Override",
-                "    public TestComponent build() {",
-                "      Preconditions.checkBuilderRequirement(i, Integer.class);",
-                "      Preconditions.checkBuilderRequirement(list, List.class);",
-                "      return new DaggerTestComponent(i, list);",
-                "    }",
-                "",
-                "    @Override",
                 "    public Builder i(int i) {",
                 "      this.i = Preconditions.checkNotNull(i);",
                 "      return this;",
@@ -118,6 +111,13 @@ public void bindsInstance() {
                 "      this.list = Preconditions.checkNotNull(list);",
                 "      return this;",
                 "    }",
+                "",
+                "    @Override",
+                "    public TestComponent build() {",
+                "      Preconditions.checkBuilderRequirement(i, Integer.class);",
+                "      Preconditions.checkBuilderRequirement(list, List.class);",
+                "      return new DaggerTestComponent(i, list);",
+                "    }",
                 "  }",
                 "}"));
   }
diff --git a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
index 2a685f1c3..8e5d582dd 100644
--- a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -380,16 +380,6 @@ public void simpleComponent() {
                 "",
                 "    private Builder() {}",
                 "",
-                "    public TestClass.SimpleComponent build() {",
-                "      if (aModule == null) {",
-                "        this.aModule = new TestClass.AModule();",
-                "      }",
-                "      if (bModule == null) {",
-                "        this.bModule = new TestClass.BModule();",
-                "      }",
-                "      return new DaggerTestClass_SimpleComponent(aModule, bModule);",
-                "    }",
-                "",
                 "    public Builder aModule(TestClass.AModule aModule) {",
                 "      this.aModule = Preconditions.checkNotNull(aModule);",
                 "      return this;",
@@ -399,6 +389,16 @@ public void simpleComponent() {
                 "      this.bModule = Preconditions.checkNotNull(bModule);",
                 "      return this;",
                 "    }",
+                "",
+                "    public TestClass.SimpleComponent build() {",
+                "      if (aModule == null) {",
+                "        this.aModule = new TestClass.AModule();",
+                "      }",
+                "      if (bModule == null) {",
+                "        this.bModule = new TestClass.BModule();",
+                "      }",
+                "      return new DaggerTestClass_SimpleComponent(aModule, bModule);",
+                "    }",
                 "  }",
                 "",
                 "  private final class SwitchingProvider<T> implements Provider<T> {",
@@ -512,16 +512,6 @@ public void simpleComponent() {
                 "",
                 "    private Builder() {}",
                 "",
-                "    public TestClass.SimpleComponent build() {",
-                "      if (aModule == null) {",
-                "        this.aModule = new TestClass.AModule();",
-                "      }",
-                "      if (bModule == null) {",
-                "        this.bModule = new TestClass.BModule();",
-                "      }",
-                "      return new DaggerTestClass_SimpleComponent(aModule, bModule);",
-                "    }",
-                "",
                 "    public Builder aModule(TestClass.AModule aModule) {",
                 "      this.aModule = Preconditions.checkNotNull(aModule);",
                 "      return this;",
@@ -531,6 +521,16 @@ public void simpleComponent() {
                 "      this.bModule = Preconditions.checkNotNull(bModule);",
                 "      return this;",
                 "    }",
+                "",
+                "    public TestClass.SimpleComponent build() {",
+                "      if (aModule == null) {",
+                "        this.aModule = new TestClass.AModule();",
+                "      }",
+                "      if (bModule == null) {",
+                "        this.bModule = new TestClass.BModule();",
+                "      }",
+                "      return new DaggerTestClass_SimpleComponent(aModule, bModule);",
+                "    }",
                 "  }",
                 "}");
     }
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
index d3eb767b2..f94021e67 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
@@ -286,15 +286,15 @@ public void subcomponentOmitsInheritedBindings() {
             "  public static final class Builder {",
             "    private Builder() {}",
             "",
-            "    public Parent build() {",
-            "      return new DaggerParent();",
-            "    }",
-            "",
             "    @Deprecated",
             "    public Builder parentModule(ParentModule parentModule) {",
             "      Preconditions.checkNotNull(parentModule);",
             "      return this;",
             "    }",
+            "",
+            "    public Parent build() {",
+            "      return new DaggerParent();",
+            "    }",
             "  }",
             "",
             "  private final class ChildImpl implements Child {",
