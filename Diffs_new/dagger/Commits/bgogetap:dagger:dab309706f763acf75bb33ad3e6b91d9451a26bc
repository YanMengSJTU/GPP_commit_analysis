diff --git a/java/dagger/internal/codegen/ComponentHjarProcessingStep.java b/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
index 5e8566d39..6fdcc77a4 100644
--- a/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
+++ b/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
@@ -43,6 +43,7 @@
 import dagger.BindsInstance;
 import dagger.internal.codegen.ComponentDescriptor.Factory;
 import dagger.internal.codegen.ComponentValidator.ComponentValidationReport;
+import dagger.producers.internal.CancellationListener;
 import java.lang.annotation.Annotation;
 import java.util.Optional;
 import java.util.Set;
@@ -188,6 +189,12 @@ Element originatingElement(ComponentDescriptor input) {
                   generatedComponent.addMethod(
                       emptyComponentMethod(componentElement, method.methodElement())));
 
+      if (componentDescriptor.kind().isProducer()) {
+        generatedComponent
+            .addSuperinterface(ClassName.get(CancellationListener.class))
+            .addMethod(onProducerFutureCancelledMethod());
+      }
+
       return Optional.of(generatedComponent);
     }
   }
@@ -253,4 +260,11 @@ private MethodSpec createMethod(ComponentDescriptor componentDescriptor) {
         .returns(ClassName.get(componentDescriptor.typeElement()))
         .build();
   }
+
+  private MethodSpec onProducerFutureCancelledMethod() {
+    return MethodSpec.methodBuilder("onProducerFutureCancelled")
+        .addModifiers(PUBLIC)
+        .addParameter(TypeName.BOOLEAN, "mayInterruptIfRunning")
+        .build();
+  }
 }
diff --git a/javatests/dagger/android/BUILD b/javatests/dagger/android/BUILD
index 8fa3dc303..5bc3f454c 100644
--- a/javatests/dagger/android/BUILD
+++ b/javatests/dagger/android/BUILD
@@ -23,6 +23,7 @@ load("//:test_defs.bzl", "GenRobolectricTests")
 GenRobolectricTests(
     name = "android_tests",
     srcs = glob(["*.java"]),
+    functional = False,
     javacopts = DOCLINT_HTML_AND_SYNTAX,
     manifest_values = {"minSdkVersion": "17"},
     deps = [
diff --git a/javatests/dagger/android/support/BUILD b/javatests/dagger/android/support/BUILD
index 9b87d849b..6d8f43bb0 100644
--- a/javatests/dagger/android/support/BUILD
+++ b/javatests/dagger/android/support/BUILD
@@ -23,6 +23,7 @@ load("//:test_defs.bzl", "GenRobolectricTests")
 GenRobolectricTests(
     name = "android-support-tests",
     srcs = glob(["*.java"]),
+    functional = False,
     javacopts = DOCLINT_HTML_AND_SYNTAX,
     deps = [
         "//:dagger_with_compiler",
diff --git a/javatests/dagger/android/support/functional/BUILD b/javatests/dagger/android/support/functional/BUILD
index 8f899178f..ffb93618e 100644
--- a/javatests/dagger/android/support/functional/BUILD
+++ b/javatests/dagger/android/support/functional/BUILD
@@ -48,6 +48,7 @@ GenRobolectricTests(
         "//:dagger_with_compiler",
         "@androidsdk//com.android.support:support-fragment-25.0.0",
         "@google_bazel_common//third_party/java/junit",
+        "@google_bazel_common//third_party/java/robolectric",
         "@google_bazel_common//third_party/java/truth",
     ],
 )
diff --git a/javatests/dagger/functional/BUILD b/javatests/dagger/functional/BUILD
index bf6e066cb..f417bec06 100644
--- a/javatests/dagger/functional/BUILD
+++ b/javatests/dagger/functional/BUILD
@@ -28,9 +28,6 @@ GenJavaTests(
     name = "functional_tests",
     srcs = glob(
         ["**/*.java"],
-        exclude = [
-            "HjarTest.java",
-        ],
     ),
     javacopts = DOCLINT_HTML_AND_SYNTAX,
     lib_javacopts = SOURCE_7_TARGET_7,
diff --git a/test_defs.bzl b/test_defs.bzl
index a21fbd823..32ba9e65d 100644
--- a/test_defs.bzl
+++ b/test_defs.bzl
@@ -60,6 +60,7 @@ def GenRobolectricTests(
         javacopts = None,
         lib_javacopts = None,
         test_javacopts = None,
+        functional = True,
         manifest_values = None):
     # TODO(ronshapiro): enable these with these instructions:
     # https://docs.bazel.build/versions/master/be/android.html#android_local_test_examples
@@ -91,6 +92,7 @@ def _GenTests(
         javacopts,
         lib_javacopts,
         test_javacopts,
+        functional,
         test_kwargs = test_kwargs,
     )
 
@@ -108,6 +110,7 @@ def _GenTests(
                 variant_javacopts,
                 lib_javacopts,
                 test_javacopts,
+                functional,
                 variant_name,
                 test_kwargs = test_kwargs,
             )
@@ -123,6 +126,7 @@ def _gen_tests(
         javacopts,
         lib_javacopts,
         test_javacopts,
+        functional,
         variant_name = None,
         test_kwargs = {}):
     if variant_name:
@@ -161,6 +165,8 @@ def _gen_tests(
             tags = tags,
             deps = deps,
         )
+        if functional:
+            _hjar_test(supporting_files_name, tags)
 
     for test_file in test_files:
         test_name = test_file.replace(".java", "")
@@ -180,3 +186,7 @@ def _gen_tests(
             deps = test_deps,
             **test_kwargs
         )
+
+
+def _hjar_test(name, tags):
+    pass
