diff --git a/java/dagger/internal/Preconditions.java b/java/dagger/internal/Preconditions.java
index 7b64da1a5..714a3535e 100644
--- a/java/dagger/internal/Preconditions.java
+++ b/java/dagger/internal/Preconditions.java
@@ -85,5 +85,16 @@
     return reference;
   }
 
+  /**
+   * Checks that the component builder field {@code requirement} has been initialized.
+   *
+   * @throws IllegalStateException if {@code requirement is null}
+   */
+  public static <T> void checkBuilderRequirement(T requirement, Class<T> clazz) {
+    if (requirement == null) {
+      throw new IllegalStateException(clazz.getCanonicalName() + " must be set");
+    }
+  }
+
   private Preconditions() {}
 }
diff --git a/java/dagger/internal/codegen/ComponentBuilderImplementation.java b/java/dagger/internal/codegen/ComponentBuilderImplementation.java
index 7d9428297..1de19cc43 100644
--- a/java/dagger/internal/codegen/ComponentBuilderImplementation.java
+++ b/java/dagger/internal/codegen/ComponentBuilderImplementation.java
@@ -200,14 +200,13 @@ MethodSpec buildMethod(ImmutableMap<ComponentRequirement, FieldSpec> builderFiel
                     .endControlFlow();
                 break;
               case THROW:
-                buildMethod
-                    .beginControlFlow("if ($N == null)", field)
-                    .addStatement(
-                        "throw new $T($T.class.getCanonicalName() + $S)",
-                        IllegalStateException.class,
-                        TypeNames.rawTypeName(field.type),
-                        " must be set")
-                    .endControlFlow();
+                // TODO(cgdecker,ronshapiro): ideally this should use the key instead of a class for
+                // @BindsInstance requirements, but that's not easily proguardable.
+                buildMethod.addStatement(
+                    "$T.checkBuilderRequirement($N, $T.class)",
+                    Preconditions.class,
+                    field,
+                    TypeNames.rawTypeName(field.type));
                 break;
               case ALLOW:
                 break;
diff --git a/javatests/dagger/internal/codegen/ComponentBuilderTest.java b/javatests/dagger/internal/codegen/ComponentBuilderTest.java
index d04c359a7..e66d2a66b 100644
--- a/javatests/dagger/internal/codegen/ComponentBuilderTest.java
+++ b/javatests/dagger/internal/codegen/ComponentBuilderTest.java
@@ -436,10 +436,7 @@ public void testBuilderBindsInstanceNoCreateGenerated() {
             "",
             "    @Override",
             "    public SimpleComponent build() {",
-            "      if (object == null) {",
-            "        throw new IllegalStateException(",
-            "            Object.class.getCanonicalName() + \" must be set\")",
-            "      }",
+            "      Preconditions.checkBuilderRequirement(object, Object.class);",
             "      return new DaggerSimpleComponent(this);",
             "    }",
             "",
diff --git a/javatests/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
index 8e1a0fc6c..4005e463c 100644
--- a/javatests/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
@@ -1248,10 +1248,7 @@ public void testDefaultPackage() {
                 "    private AComponent aComponent;",
                 "",
                 "    public BComponent build() {",
-                "      if (aComponent == null) {",
-                "        throw new IllegalStateException(AComponent.class.getCanonicalName()",
-                "            + \" must be set\");",
-                "      }",
+                "      Preconditions.checkBuilderRequirement(aComponent, AComponent.class);",
                 "      return new DaggerBComponent(this);",
                 "    }",
                 "",
diff --git a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
index 8148f4ccd..fe5104df6 100644
--- a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
+++ b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
@@ -103,14 +103,8 @@ public void bindsInstance() {
                 "",
                 "    @Override",
                 "    public TestComponent build() {",
-                "      if (i == null) {",
-                "        throw new IllegalStateException(",
-                "            Integer.class.getCanonicalName() + \" must be set\");",
-                "      }",
-                "      if (list == null) {",
-                "        throw new IllegalStateException(",
-                "            List.class.getCanonicalName() + \" must be set\");",
-                "      }",
+                "      Preconditions.checkBuilderRequirement(i, Integer.class);",
+                "      Preconditions.checkBuilderRequirement(list, List.class);",
                 "      return new DaggerTestComponent(this);",
                 "    }",
                 "",
