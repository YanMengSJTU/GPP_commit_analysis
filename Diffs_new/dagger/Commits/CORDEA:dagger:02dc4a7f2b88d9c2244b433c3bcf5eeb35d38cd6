diff --git a/BUILD b/BUILD
index cd0e40c54..1e91418de 100644
--- a/BUILD
+++ b/BUILD
@@ -64,6 +64,7 @@ jarjar_library(
         "//java/dagger/internal/codegen:validation",
         "//java/dagger/internal/codegen:writing",
         "//java/dagger/model:internal-proxies",
+        "//java/dagger/errorprone",
         "@com_google_auto_auto_common//jar",
     ],
     rules = SHADE_RULES,
@@ -79,6 +80,7 @@ jarjar_library(
         "//java/dagger/internal/codegen:libshared-with-spi-src.jar",
         "//java/dagger/internal/codegen:libvalidation-src.jar",
         "//java/dagger/internal/codegen:libwriting-src.jar",
+        "//java/dagger/errorprone:liberrorprone-src.jar",
     ],
 )
 
diff --git a/WORKSPACE b/WORKSPACE
index 0edc52013..1647e4bdd 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -14,8 +14,8 @@
 
 http_archive(
     name = "google_bazel_common",
-    strip_prefix = "bazel-common-b3778739a9c67eaefe0725389f03cf821392ac67",
-    urls = ["https://github.com/google/bazel-common/archive/b3778739a9c67eaefe0725389f03cf821392ac67.zip"],
+    strip_prefix = "bazel-common-c0a6655a70fb389dbb6473989450df0c86447ec3",
+    urls = ["https://github.com/google/bazel-common/archive/c0a6655a70fb389dbb6473989450df0c86447ec3.zip"],
 )
 
 load("@google_bazel_common//:workspace_defs.bzl", "google_common_workspace_rules")
diff --git a/java/dagger/errorprone/AndroidInjectorBindingMigrator.java b/java/dagger/errorprone/AndroidInjectorBindingMigrator.java
new file mode 100644
index 000000000..91c26b6ec
--- /dev/null
+++ b/java/dagger/errorprone/AndroidInjectorBindingMigrator.java
@@ -0,0 +1,105 @@
+/*
+ * Copyright (C) 2018 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.errorprone;
+
+import static com.google.common.collect.Iterables.getOnlyElement;
+import static com.google.errorprone.BugPattern.SeverityLevel.SUGGESTION;
+import static com.google.errorprone.util.ASTHelpers.getSymbol;
+import static com.google.errorprone.util.ASTHelpers.getType;
+import static com.google.errorprone.util.ASTHelpers.hasAnnotation;
+
+import com.google.errorprone.BugPattern;
+import com.google.errorprone.BugPattern.ProvidesFix;
+import com.google.errorprone.VisitorState;
+import com.google.errorprone.bugpatterns.BugChecker;
+import com.google.errorprone.bugpatterns.BugChecker.MethodTreeMatcher;
+import com.google.errorprone.fixes.SuggestedFix;
+import com.google.errorprone.matchers.Description;
+import com.sun.source.tree.AnnotationTree;
+import com.sun.source.tree.MethodTree;
+import com.sun.tools.javac.code.Symbol;
+import com.sun.tools.javac.code.Type;
+import com.sun.tools.javac.code.Type.ClassType;
+import com.sun.tools.javac.code.Type.WildcardType;
+import com.sun.tools.javac.code.Types;
+import dagger.multibindings.ClassKey;
+import dagger.multibindings.IntoMap;
+
+/** A refactoring to update AndroidInjector bindings to their new form. */
+@BugPattern(
+    name = "AndroidInjectorBindingMigrator",
+    providesFix = ProvidesFix.REQUIRES_HUMAN_ATTENTION,
+    summary = "A refactoring to update AndroidInjector bindings to their new form.",
+    explanation =
+        "dagger.android is migrating the mechanism used to bind AndroidInjectors. This refactoring "
+            + "will migrate usages of the `dagger.android` class-based map keys to "
+            + "`@dagger.multibindings.ClassKey` and also modify the return type of those binding "
+            + "methods to AndroidInjector.Factory<?> (from AndroidInjector.Factory<? "
+            + "extends Activity>).",
+    severity = SUGGESTION)
+public final class AndroidInjectorBindingMigrator extends BugChecker implements MethodTreeMatcher {
+  private static final String ANDROID_INJECTOR_FACTORY = "dagger.android.AndroidInjector$Factory";
+  private static final String CLASS_KEY = ClassKey.class.getName();
+  private static final String ANDROID_INJECTION_KEY = "dagger.android.AndroidInjectionKey";
+
+  @Override
+  public Description matchMethod(MethodTree tree, VisitorState state) {
+    if (!hasAnnotation(tree, IntoMap.class, state)) {
+      return Description.NO_MATCH;
+    }
+
+    Symbol androidInjectorFactory = state.getSymbolFromString(ANDROID_INJECTOR_FACTORY);
+
+    if (androidInjectorFactory == null) {
+      return Description.NO_MATCH;
+    }
+
+    SuggestedFix.Builder suggestedFix = SuggestedFix.builder();
+    Types types = state.getTypes();
+
+    if (!androidInjectorFactory.equals(getSymbol(tree.getReturnType()))) {
+      return Description.NO_MATCH;
+    }
+
+    ClassType bindingType = (ClassType) getType(tree.getReturnType());
+    if (bindingType.isParameterized()) {
+      Type typeParameter = getOnlyElement(bindingType.getTypeArguments());
+      if (typeParameter instanceof WildcardType
+          && ((WildcardType) typeParameter).getExtendsBound() != null) {
+        suggestedFix.replace(tree.getReturnType(), "AndroidInjector.Factory<?>");
+      }
+    }
+
+    Type classKey = state.getTypeFromString(CLASS_KEY);
+    Type androidInjectionKey = state.getTypeFromString(ANDROID_INJECTION_KEY);
+    for (AnnotationTree annotationTree : tree.getModifiers().getAnnotations()) {
+      Type annotationType = getType(annotationTree.getAnnotationType());
+
+      if (hasAnnotation(annotationType.tsym, "dagger.MapKey", state)
+          && !types.isSameType(annotationType, classKey)
+          && !types.isSameType(annotationType, androidInjectionKey)) {
+        suggestedFix.replace(annotationTree.getAnnotationType(), "ClassKey").addImport(CLASS_KEY);
+      }
+    }
+
+    if (suggestedFix.isEmpty()) {
+      return Description.NO_MATCH;
+    }
+
+    return buildDescription(tree).addFix(suggestedFix.build()).build();
+  }
+}
diff --git a/java/dagger/errorprone/BUILD b/java/dagger/errorprone/BUILD
new file mode 100644
index 000000000..8f49edec0
--- /dev/null
+++ b/java/dagger/errorprone/BUILD
@@ -0,0 +1,15 @@
+# Description:
+#   ErrorProne refactorings and static analysis for Dagger
+
+package(default_visibility = ["//:src"])
+
+java_library(
+    name = "errorprone",
+    srcs = glob(["*.java"]),
+    deps = [
+        "//java/dagger:core",
+        "@google_bazel_common//third_party/java/error_prone:check_api",
+        "@google_bazel_common//third_party/java/guava",
+        "@local_jdk//:lib/tools.jar",
+    ],
+)
