diff --git a/BUILD b/BUILD
index f0abdeb48..8f830e1a5 100644
--- a/BUILD
+++ b/BUILD
@@ -56,17 +56,17 @@ SHADE_RULES = ["rule com.google.auto.common.** dagger.shaded.auto.common.@1"]
 jarjar_library(
     name = "shaded_compiler",
     jars = [
-        "//java/dagger/internal/codegen:binding_graph_validation",
         "//java/dagger/internal/codegen:processor",
-        "//java/dagger/internal/codegen:writing",
         "//java/dagger/internal/codegen/base",
         "//java/dagger/internal/codegen/binding",
+        "//java/dagger/internal/codegen/bindinggraphvalidation",
         "//java/dagger/internal/codegen/compileroption",
         "//java/dagger/internal/codegen/extension",
         "//java/dagger/internal/codegen/javapoet",
         "//java/dagger/internal/codegen/langmodel",
         "//java/dagger/internal/codegen/statistics",
         "//java/dagger/internal/codegen/validation",
+        "//java/dagger/internal/codegen/writing",
         "//java/dagger/model:internal-proxies",
         "//java/dagger/errorprone",
         "@com_google_auto_auto_common//jar",
@@ -77,17 +77,17 @@ jarjar_library(
 jarjar_library(
     name = "shaded_compiler_src",
     jars = [
-        "//java/dagger/internal/codegen:libbinding_graph_validation-src.jar",
         "//java/dagger/internal/codegen:libprocessor-src.jar",
-        "//java/dagger/internal/codegen:libwriting-src.jar",
         "//java/dagger/internal/codegen/base:libbase-src.jar",
         "//java/dagger/internal/codegen/binding:libbinding-src.jar",
+        "//java/dagger/internal/codegen/bindinggraphvalidation:libbindinggraphvalidation-src.jar",
         "//java/dagger/internal/codegen/compileroption:libcompileroption-src.jar",
         "//java/dagger/internal/codegen/extension:libextension-src.jar",
         "//java/dagger/internal/codegen/javapoet:libjavapoet-src.jar",
         "//java/dagger/internal/codegen/langmodel:liblangmodel-src.jar",
         "//java/dagger/internal/codegen/statistics:libstatistics-src.jar",
         "//java/dagger/internal/codegen/validation:libvalidation-src.jar",
+        "//java/dagger/internal/codegen/writing:libwriting-src.jar",
         # TODO(ronshapiro): is there a generated src.jar for protos in Bazel?
         "//java/dagger/errorprone:liberrorprone-src.jar",
     ],
diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index 44fb3b599..2e9af5eee 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -71,119 +71,10 @@ java_library(
     ],
 )
 
-java_library(
-    name = "binding_graph_validation",
-    srcs = [
-        "DependencyCycleValidator.java",
-        "DependsOnProductionExecutorValidator.java",
-        "DuplicateBindingsValidator.java",
-        "IncompatiblyScopedBindingsValidator.java",
-        "InjectBindingValidator.java",
-        "MapMultibindingValidator.java",
-        "MissingBindingValidator.java",
-        "NullableBindingValidator.java",
-        "ProvisionDependencyOnProducerBindingValidator.java",
-        "SubcomponentFactoryMethodValidator.java",
-    ],
-    plugins = CODEGEN_PLUGINS,
-    tags = ["maven:merged"],
-    deps = CODEGEN_DEPS + [
-        "//java/dagger/internal/codegen/base",
-        "//java/dagger/internal/codegen/binding",
-        "//java/dagger/internal/codegen/compileroption",
-        "//java/dagger/internal/codegen/extension",
-        "//java/dagger/internal/codegen/langmodel",
-        "//java/dagger/internal/codegen/validation",
-    ],
-)
-
-# Classes that assemble the model of the generated code and write to the Filer
-java_library(
-    name = "writing",
-    srcs = [
-        "AnnotationCreatorGenerator.java",
-        "AnonymousProviderCreationExpression.java",
-        "BindingExpression.java",
-        "ComponentBindingExpressions.java",
-        "ComponentCreatorImplementation.java",
-        "ComponentImplementation.java",
-        "ComponentInstanceBindingExpression.java",
-        "ComponentMethodBindingExpression.java",
-        "ComponentProvisionBindingExpression.java",
-        "ComponentRequirementBindingExpression.java",
-        "ComponentRequirementExpression.java",
-        "ComponentRequirementExpressions.java",
-        "DelegateBindingExpression.java",
-        "DelegatingFrameworkInstanceCreationExpression.java",
-        "DependencyMethodProducerCreationExpression.java",
-        "DependencyMethodProviderCreationExpression.java",
-        "DerivedFromFrameworkInstanceBindingExpression.java",
-        "FactoryGenerator.java",
-        "FrameworkFieldInitializer.java",
-        "FrameworkInstanceBindingExpression.java",
-        "FrameworkInstanceSupplier.java",
-        "GwtCompatibility.java",
-        "HjarSourceFileGenerator.java",
-        "ImmediateFutureBindingExpression.java",
-        "InaccessibleMapKeyProxyGenerator.java",
-        "InjectionMethod.java",
-        "InjectionMethods.java",
-        "InjectionOrProvisionProviderCreationExpression.java",
-        "InnerSwitchingProviders.java",
-        "InstanceFactoryCreationExpression.java",
-        "MapBindingExpression.java",
-        "MapFactoryCreationExpression.java",
-        "MemberSelect.java",
-        "MembersInjectionBindingExpression.java",
-        "MembersInjectionMethods.java",
-        "MembersInjectorGenerator.java",
-        "MembersInjectorProviderCreationExpression.java",
-        "MethodBindingExpression.java",
-        "ModuleConstructorProxyGenerator.java",
-        "ModuleGenerator.java",
-        "ModuleProxies.java",
-        "MultibindingFactoryCreationExpression.java",
-        "OptionalBindingExpression.java",
-        "OptionalFactories.java",
-        "OptionalFactoryInstanceCreationExpression.java",
-        "ParentComponent.java",
-        "PerComponentImplementation.java",
-        "PerGeneratedFile.java",
-        "PrivateMethodBindingExpression.java",
-        "ProducerCreationExpression.java",
-        "ProducerEntryPointView.java",
-        "ProducerFactoryGenerator.java",
-        "ProducerFromProviderCreationExpression.java",
-        "ProducerNodeInstanceBindingExpression.java",
-        "ProviderInstanceBindingExpression.java",
-        "SetBindingExpression.java",
-        "SetFactoryCreationExpression.java",
-        "SimpleInvocationBindingExpression.java",
-        "SimpleMethodBindingExpression.java",
-        "SubcomponentCreatorBindingExpression.java",
-        "SubcomponentNames.java",
-        "SwitchingProviders.java",
-        "TopLevel.java",
-        "UnwrappedMapKeyGenerator.java",
-    ],
-    plugins = CODEGEN_PLUGINS,
-    tags = ["maven:merged"],
-    deps = CODEGEN_DEPS + [
-        "//java/dagger/internal/codegen/base",
-        "//java/dagger/internal/codegen/binding",
-        "//java/dagger/internal/codegen/compileroption",
-        "//java/dagger/internal/codegen/extension",
-        "//java/dagger/internal/codegen/javapoet",
-        "//java/dagger/internal/codegen/langmodel",
-        "//java/dagger/internal/codegen/statistics",
-    ],
-)
-
 # The processor's "main", if you will
 java_library(
     name = "processor",
     srcs = [
-        "BindingGraphValidationModule.java",
         "ComponentCreatorImplementationFactory.java",
         "ComponentGenerator.java",
         "ComponentHjarProcessingStep.java",
@@ -207,16 +98,16 @@ java_library(
     plugins = CODEGEN_PLUGINS,
     tags = ["maven_coordinates=com.google.dagger:dagger-compiler:" + POM_VERSION],
     deps = CODEGEN_DEPS + [
-        ":binding_graph_validation",
-        ":writing",
         "//java/dagger/internal/codegen/base",
         "//java/dagger/internal/codegen/binding",
+        "//java/dagger/internal/codegen/bindinggraphvalidation",
         "//java/dagger/internal/codegen/compileroption",
         "//java/dagger/internal/codegen/extension",
         "//java/dagger/internal/codegen/javapoet",
         "//java/dagger/internal/codegen/langmodel",
         "//java/dagger/internal/codegen/statistics",
         "//java/dagger/internal/codegen/validation",
+        "//java/dagger/internal/codegen/writing",
         "@google_bazel_common//third_party/java/incap",
     ],
 )
@@ -227,16 +118,16 @@ pom_file(
     artifact_name = "Dagger Compiler",
     targets = [
         ":processor",
-        ":binding_graph_validation",
-        ":writing",
         "//java/dagger/internal/codegen/base",
         "//java/dagger/internal/codegen/binding",
+        "//java/dagger/internal/codegen/bindinggraphvalidation",
         "//java/dagger/internal/codegen/compileroption",
         "//java/dagger/internal/codegen/extension",
         "//java/dagger/internal/codegen/javapoet",
         "//java/dagger/internal/codegen/langmodel",
         "//java/dagger/internal/codegen/statistics",
         "//java/dagger/internal/codegen/validation",
+        "//java/dagger/internal/codegen/writing",
     ],
 )
 
@@ -307,12 +198,14 @@ java_library(
     deps = CODEGEN_DEPS + [
         "//java/dagger/internal/codegen/base",
         "//java/dagger/internal/codegen/binding",
+        "//java/dagger/internal/codegen/bindinggraphvalidation",
         "//java/dagger/internal/codegen/compileroption",
         "//java/dagger/internal/codegen/extension",
         "//java/dagger/internal/codegen/langmodel",
         "//java/dagger/internal/codegen/javapoet",
         "//java/dagger/internal/codegen/statistics",
         "//java/dagger/internal/codegen/validation",
+        "//java/dagger/internal/codegen/writing",
         "@google_bazel_common//third_party/java/incap",
     ],
 )
diff --git a/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java b/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java
index d8c4fd389..6b3a9f25e 100644
--- a/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java
+++ b/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java
@@ -52,6 +52,9 @@
 import dagger.internal.codegen.javapoet.TypeNames;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
+import dagger.internal.codegen.writing.ComponentCreatorImplementation;
+import dagger.internal.codegen.writing.ComponentImplementation;
+import dagger.internal.codegen.writing.ModuleProxies;
 import java.util.Optional;
 import java.util.Set;
 import javax.inject.Inject;
@@ -61,7 +64,7 @@
 import javax.lang.model.type.TypeKind;
 
 /** Factory for creating {@link ComponentCreatorImplementation} instances. */
-final class ComponentCreatorImplementationFactory {
+public final class ComponentCreatorImplementationFactory {
 
   private final DaggerElements elements;
   private final DaggerTypes types;
diff --git a/java/dagger/internal/codegen/ComponentGenerator.java b/java/dagger/internal/codegen/ComponentGenerator.java
index 026b03401..f5c529fdc 100644
--- a/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/java/dagger/internal/codegen/ComponentGenerator.java
@@ -25,6 +25,7 @@
 import dagger.internal.codegen.base.SourceFileGenerator;
 import dagger.internal.codegen.binding.BindingGraph;
 import dagger.internal.codegen.langmodel.DaggerElements;
+import dagger.internal.codegen.writing.ComponentImplementation;
 import java.util.Optional;
 import javax.annotation.processing.Filer;
 import javax.inject.Inject;
diff --git a/java/dagger/internal/codegen/ComponentImplementationBuilder.java b/java/dagger/internal/codegen/ComponentImplementationBuilder.java
index 8a7b60ab7..4e2b7faa0 100644
--- a/java/dagger/internal/codegen/ComponentImplementationBuilder.java
+++ b/java/dagger/internal/codegen/ComponentImplementationBuilder.java
@@ -21,18 +21,18 @@
 import static com.google.common.base.Preconditions.checkState;
 import static com.squareup.javapoet.MethodSpec.constructorBuilder;
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
-import static dagger.internal.codegen.ComponentImplementation.MethodSpecKind.BUILDER_METHOD;
-import static dagger.internal.codegen.ComponentImplementation.MethodSpecKind.CANCELLATION_LISTENER_METHOD;
-import static dagger.internal.codegen.ComponentImplementation.MethodSpecKind.COMPONENT_METHOD;
-import static dagger.internal.codegen.ComponentImplementation.MethodSpecKind.CONSTRUCTOR;
-import static dagger.internal.codegen.ComponentImplementation.MethodSpecKind.INITIALIZE_METHOD;
-import static dagger.internal.codegen.ComponentImplementation.TypeSpecKind.COMPONENT_CREATOR;
-import static dagger.internal.codegen.ComponentImplementation.TypeSpecKind.SUBCOMPONENT;
 import static dagger.internal.codegen.binding.BindingRequest.bindingRequest;
 import static dagger.internal.codegen.binding.ComponentCreatorKind.BUILDER;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableList;
 import static dagger.internal.codegen.javapoet.AnnotationSpecs.Suppression.UNCHECKED;
 import static dagger.internal.codegen.javapoet.CodeBlocks.parameterNames;
+import static dagger.internal.codegen.writing.ComponentImplementation.MethodSpecKind.BUILDER_METHOD;
+import static dagger.internal.codegen.writing.ComponentImplementation.MethodSpecKind.CANCELLATION_LISTENER_METHOD;
+import static dagger.internal.codegen.writing.ComponentImplementation.MethodSpecKind.COMPONENT_METHOD;
+import static dagger.internal.codegen.writing.ComponentImplementation.MethodSpecKind.CONSTRUCTOR;
+import static dagger.internal.codegen.writing.ComponentImplementation.MethodSpecKind.INITIALIZE_METHOD;
+import static dagger.internal.codegen.writing.ComponentImplementation.TypeSpecKind.COMPONENT_CREATOR;
+import static dagger.internal.codegen.writing.ComponentImplementation.TypeSpecKind.SUBCOMPONENT;
 import static dagger.producers.CancellationPolicy.Propagation.PROPAGATE;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PRIVATE;
@@ -65,6 +65,11 @@
 import dagger.internal.codegen.javapoet.CodeBlocks;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
+import dagger.internal.codegen.writing.ComponentBindingExpressions;
+import dagger.internal.codegen.writing.ComponentCreatorImplementation;
+import dagger.internal.codegen.writing.ComponentImplementation;
+import dagger.internal.codegen.writing.ComponentRequirementExpressions;
+import dagger.internal.codegen.writing.ParentComponent;
 import dagger.model.Key;
 import dagger.producers.internal.CancellationListener;
 import dagger.producers.internal.Producers;
diff --git a/java/dagger/internal/codegen/ComponentImplementationFactory.java b/java/dagger/internal/codegen/ComponentImplementationFactory.java
index 742a044f9..8a7c2ea8e 100644
--- a/java/dagger/internal/codegen/ComponentImplementationFactory.java
+++ b/java/dagger/internal/codegen/ComponentImplementationFactory.java
@@ -23,6 +23,8 @@
 import dagger.internal.codegen.binding.BindingGraph;
 import dagger.internal.codegen.binding.KeyFactory;
 import dagger.internal.codegen.compileroption.CompilerOptions;
+import dagger.internal.codegen.writing.ComponentImplementation;
+import dagger.internal.codegen.writing.SubcomponentNames;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Optional;
diff --git a/java/dagger/internal/codegen/ComponentProcessor.java b/java/dagger/internal/codegen/ComponentProcessor.java
index 6d60008c7..9309b0c62 100644
--- a/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/java/dagger/internal/codegen/ComponentProcessor.java
@@ -38,6 +38,7 @@
 import dagger.internal.codegen.binding.InjectBindingRegistry;
 import dagger.internal.codegen.binding.MembersInjectionBinding;
 import dagger.internal.codegen.binding.ProvisionBinding;
+import dagger.internal.codegen.bindinggraphvalidation.BindingGraphValidationModule;
 import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.internal.codegen.compileroption.ProcessingEnvironmentCompilerOptions;
 import dagger.internal.codegen.statistics.DaggerStatisticsCollectingProcessingStep;
@@ -71,12 +72,10 @@
   private final Optional<ImmutableSet<BindingGraphPlugin>> testingPlugins;
 
   @Inject InjectBindingRegistry injectBindingRegistry;
-  @Inject
-  SourceFileGenerator<ProvisionBinding> factoryGenerator;
+  @Inject SourceFileGenerator<ProvisionBinding> factoryGenerator;
   @Inject SourceFileGenerator<MembersInjectionBinding> membersInjectorGenerator;
   @Inject ImmutableList<ProcessingStep> processingSteps;
   @Inject BindingGraphPlugins bindingGraphPlugins;
-  @Inject CompilerOptions compilerOptions;
   @Inject DaggerStatisticsCollector statisticsCollector;
   @Inject Set<ClearableCache> clearableCaches;
 
diff --git a/java/dagger/internal/codegen/CurrentImplementationSubcomponent.java b/java/dagger/internal/codegen/CurrentImplementationSubcomponent.java
index 19d83b7ab..fe407de4f 100644
--- a/java/dagger/internal/codegen/CurrentImplementationSubcomponent.java
+++ b/java/dagger/internal/codegen/CurrentImplementationSubcomponent.java
@@ -21,6 +21,11 @@
 import dagger.internal.codegen.ComponentImplementationBuilder.RootComponentImplementationBuilder;
 import dagger.internal.codegen.ComponentImplementationBuilder.SubcomponentImplementationBuilder;
 import dagger.internal.codegen.binding.BindingGraph;
+import dagger.internal.codegen.writing.ComponentBindingExpressions;
+import dagger.internal.codegen.writing.ComponentImplementation;
+import dagger.internal.codegen.writing.ComponentRequirementExpressions;
+import dagger.internal.codegen.writing.ParentComponent;
+import dagger.internal.codegen.writing.PerComponentImplementation;
 import java.util.Optional;
 
 /**
diff --git a/java/dagger/internal/codegen/MapKeyProcessingStep.java b/java/dagger/internal/codegen/MapKeyProcessingStep.java
index c85757b59..50693da14 100644
--- a/java/dagger/internal/codegen/MapKeyProcessingStep.java
+++ b/java/dagger/internal/codegen/MapKeyProcessingStep.java
@@ -27,6 +27,8 @@
 import dagger.internal.codegen.validation.MapKeyValidator;
 import dagger.internal.codegen.validation.TypeCheckingProcessingStep;
 import dagger.internal.codegen.validation.ValidationReport;
+import dagger.internal.codegen.writing.AnnotationCreatorGenerator;
+import dagger.internal.codegen.writing.UnwrappedMapKeyGenerator;
 import java.lang.annotation.Annotation;
 import java.util.Set;
 import javax.annotation.processing.Messager;
diff --git a/java/dagger/internal/codegen/ModuleProcessingStep.java b/java/dagger/internal/codegen/ModuleProcessingStep.java
index 464d0bb70..90082bbb2 100644
--- a/java/dagger/internal/codegen/ModuleProcessingStep.java
+++ b/java/dagger/internal/codegen/ModuleProcessingStep.java
@@ -38,6 +38,8 @@
 import dagger.internal.codegen.validation.ModuleValidator;
 import dagger.internal.codegen.validation.TypeCheckingProcessingStep;
 import dagger.internal.codegen.validation.ValidationReport;
+import dagger.internal.codegen.writing.InaccessibleMapKeyProxyGenerator;
+import dagger.internal.codegen.writing.ModuleGenerator;
 import dagger.producers.ProducerModule;
 import dagger.producers.Produces;
 import java.lang.annotation.Annotation;
diff --git a/java/dagger/internal/codegen/SourceFileGeneratorsModule.java b/java/dagger/internal/codegen/SourceFileGeneratorsModule.java
index 2aff685de..c65c48d5a 100644
--- a/java/dagger/internal/codegen/SourceFileGeneratorsModule.java
+++ b/java/dagger/internal/codegen/SourceFileGeneratorsModule.java
@@ -28,6 +28,12 @@
 import dagger.internal.codegen.binding.ProductionBinding;
 import dagger.internal.codegen.binding.ProvisionBinding;
 import dagger.internal.codegen.compileroption.CompilerOptions;
+import dagger.internal.codegen.writing.FactoryGenerator;
+import dagger.internal.codegen.writing.HjarSourceFileGenerator;
+import dagger.internal.codegen.writing.MembersInjectorGenerator;
+import dagger.internal.codegen.writing.ModuleConstructorProxyGenerator;
+import dagger.internal.codegen.writing.ModuleGenerator;
+import dagger.internal.codegen.writing.ProducerFactoryGenerator;
 import javax.lang.model.element.TypeElement;
 
 @Module(
diff --git a/java/dagger/internal/codegen/TopLevelImplementationComponent.java b/java/dagger/internal/codegen/TopLevelImplementationComponent.java
index 306c05de2..9c2c1cace 100644
--- a/java/dagger/internal/codegen/TopLevelImplementationComponent.java
+++ b/java/dagger/internal/codegen/TopLevelImplementationComponent.java
@@ -19,6 +19,9 @@
 import dagger.BindsInstance;
 import dagger.Module;
 import dagger.Subcomponent;
+import dagger.internal.codegen.writing.ComponentImplementation;
+import dagger.internal.codegen.writing.PerGeneratedFile;
+import dagger.internal.codegen.writing.TopLevel;
 
 /**
  * A shared subcomponent for a top-level {@link ComponentImplementation} and any nested child
diff --git a/java/dagger/internal/codegen/binding/AnnotationExpression.java b/java/dagger/internal/codegen/binding/AnnotationExpression.java
index 6b470919a..de0aea586 100644
--- a/java/dagger/internal/codegen/binding/AnnotationExpression.java
+++ b/java/dagger/internal/codegen/binding/AnnotationExpression.java
@@ -40,7 +40,7 @@
 
 /**
  * Returns an expression creating an instance of the visited annotation type. Its parameter must be
- * a class as generated by {@link dagger.internal.codegen.AnnotationCreatorGenerator}.
+ * a class as generated by {@link dagger.internal.codegen.writing.AnnotationCreatorGenerator}.
  *
  * <p>Note that {@link AnnotationValue#toString()} is the source-code representation of the value
  * <em>when used in an annotation</em>, which is not always the same as the representation needed
diff --git a/java/dagger/internal/codegen/binding/BindsTypeChecker.java b/java/dagger/internal/codegen/binding/BindsTypeChecker.java
index aba6ceb3b..fde437926 100644
--- a/java/dagger/internal/codegen/binding/BindsTypeChecker.java
+++ b/java/dagger/internal/codegen/binding/BindsTypeChecker.java
@@ -36,8 +36,8 @@
  * Checks the assignability of one type to another, given a {@link ContributionType} context. This
  * is used by {@link dagger.internal.codegen.validation.BindsMethodValidator} to validate that the
  * right-hand- side of a {@link dagger.Binds} method is valid, as well as in {@link
- * dagger.internal.codegen.DelegateBindingExpression} when the right-hand-side in generated code
- * might be an erased type due to accessibility.
+ * dagger.internal.codegen.writing.DelegateBindingExpression} when the right-hand-side in generated
+ * code might be an erased type due to accessibility.
  */
 public final class BindsTypeChecker {
   private final DaggerTypes types;
diff --git a/java/dagger/internal/codegen/bindinggraphvalidation/BUILD b/java/dagger/internal/codegen/bindinggraphvalidation/BUILD
new file mode 100644
index 000000000..930d3c00e
--- /dev/null
+++ b/java/dagger/internal/codegen/bindinggraphvalidation/BUILD
@@ -0,0 +1,41 @@
+# Copyright (C) 2019 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Description:
+#   Classes related to BindingGraph validation.
+
+package(default_visibility = ["//:src"])
+
+java_library(
+    name = "bindinggraphvalidation",
+    srcs = glob(["*.java"]),
+    plugins = ["//java/dagger/internal/codegen/bootstrap"],
+    tags = ["maven:merged"],
+    deps = [
+        "//java/dagger:core",
+        "//java/dagger/internal/codegen/base",
+        "//java/dagger/internal/codegen/binding",
+        "//java/dagger/internal/codegen/compileroption",
+        "//java/dagger/internal/codegen/extension",
+        "//java/dagger/internal/codegen/langmodel",
+        "//java/dagger/internal/codegen/validation",
+        "//java/dagger/model",
+        "//java/dagger/producers",
+        "//java/dagger/spi",
+        "@google_bazel_common//third_party/java/auto:common",
+        "@google_bazel_common//third_party/java/auto:value",
+        "@google_bazel_common//third_party/java/guava",
+        "@google_bazel_common//third_party/java/jsr330_inject",
+    ],
+)
diff --git a/java/dagger/internal/codegen/BindingGraphValidationModule.java b/java/dagger/internal/codegen/bindinggraphvalidation/BindingGraphValidationModule.java
similarity index 95%
rename from java/dagger/internal/codegen/BindingGraphValidationModule.java
rename to java/dagger/internal/codegen/bindinggraphvalidation/BindingGraphValidationModule.java
index 8ddf44bc7..13566f898 100644
--- a/java/dagger/internal/codegen/BindingGraphValidationModule.java
+++ b/java/dagger/internal/codegen/bindinggraphvalidation/BindingGraphValidationModule.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.bindinggraphvalidation;
 
 import dagger.Binds;
 import dagger.Module;
@@ -24,7 +24,7 @@
 
 /** Binds the set of {@link BindingGraphPlugin}s used to implement Dagger validation. */
 @Module
-interface BindingGraphValidationModule {
+public interface BindingGraphValidationModule {
 
   @Binds
   @IntoSet
diff --git a/java/dagger/internal/codegen/DependencyCycleValidator.java b/java/dagger/internal/codegen/bindinggraphvalidation/DependencyCycleValidator.java
similarity index 99%
rename from java/dagger/internal/codegen/DependencyCycleValidator.java
rename to java/dagger/internal/codegen/bindinggraphvalidation/DependencyCycleValidator.java
index 2010a4169..5e2aa0cd0 100644
--- a/java/dagger/internal/codegen/DependencyCycleValidator.java
+++ b/java/dagger/internal/codegen/bindinggraphvalidation/DependencyCycleValidator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.bindinggraphvalidation;
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.collect.Iterables.getLast;
diff --git a/java/dagger/internal/codegen/DependsOnProductionExecutorValidator.java b/java/dagger/internal/codegen/bindinggraphvalidation/DependsOnProductionExecutorValidator.java
similarity index 94%
rename from java/dagger/internal/codegen/DependsOnProductionExecutorValidator.java
rename to java/dagger/internal/codegen/bindinggraphvalidation/DependsOnProductionExecutorValidator.java
index 8ee814052..7be407eef 100644
--- a/java/dagger/internal/codegen/DependsOnProductionExecutorValidator.java
+++ b/java/dagger/internal/codegen/bindinggraphvalidation/DependsOnProductionExecutorValidator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.bindinggraphvalidation;
 
 import static dagger.internal.codegen.extension.DaggerStreams.instancesOf;
 import static javax.tools.Diagnostic.Kind.ERROR;
@@ -32,7 +32,7 @@
  * Reports an error on all bindings that depend explicitly on the {@code @Production Executor} key.
  */
 // TODO(dpb,beder): Validate this during @Inject/@Provides/@Produces validation.
-final class DependsOnProductionExecutorValidator implements BindingGraphPlugin {
+public final class DependsOnProductionExecutorValidator implements BindingGraphPlugin {
   private final CompilerOptions compilerOptions;
   private final KeyFactory keyFactory;
 
diff --git a/java/dagger/internal/codegen/DuplicateBindingsValidator.java b/java/dagger/internal/codegen/bindinggraphvalidation/DuplicateBindingsValidator.java
similarity index 99%
rename from java/dagger/internal/codegen/DuplicateBindingsValidator.java
rename to java/dagger/internal/codegen/bindinggraphvalidation/DuplicateBindingsValidator.java
index bc3a3227e..823ce8d45 100644
--- a/java/dagger/internal/codegen/DuplicateBindingsValidator.java
+++ b/java/dagger/internal/codegen/bindinggraphvalidation/DuplicateBindingsValidator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.bindinggraphvalidation;
 
 import static com.google.common.base.Verify.verify;
 import static com.google.common.collect.Iterables.getOnlyElement;
diff --git a/java/dagger/internal/codegen/IncompatiblyScopedBindingsValidator.java b/java/dagger/internal/codegen/bindinggraphvalidation/IncompatiblyScopedBindingsValidator.java
similarity index 99%
rename from java/dagger/internal/codegen/IncompatiblyScopedBindingsValidator.java
rename to java/dagger/internal/codegen/bindinggraphvalidation/IncompatiblyScopedBindingsValidator.java
index 03371eaee..a01dbaf62 100644
--- a/java/dagger/internal/codegen/IncompatiblyScopedBindingsValidator.java
+++ b/java/dagger/internal/codegen/bindinggraphvalidation/IncompatiblyScopedBindingsValidator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.bindinggraphvalidation;
 
 import static dagger.internal.codegen.base.Formatter.INDENT;
 import static dagger.internal.codegen.base.Scopes.getReadableSource;
diff --git a/java/dagger/internal/codegen/InjectBindingValidator.java b/java/dagger/internal/codegen/bindinggraphvalidation/InjectBindingValidator.java
similarity index 97%
rename from java/dagger/internal/codegen/InjectBindingValidator.java
rename to java/dagger/internal/codegen/bindinggraphvalidation/InjectBindingValidator.java
index 9e41529c9..fe1c3e044 100644
--- a/java/dagger/internal/codegen/InjectBindingValidator.java
+++ b/java/dagger/internal/codegen/bindinggraphvalidation/InjectBindingValidator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.bindinggraphvalidation;
 
 import static dagger.model.BindingKind.INJECTION;
 
diff --git a/java/dagger/internal/codegen/MapMultibindingValidator.java b/java/dagger/internal/codegen/bindinggraphvalidation/MapMultibindingValidator.java
similarity index 99%
rename from java/dagger/internal/codegen/MapMultibindingValidator.java
rename to java/dagger/internal/codegen/bindinggraphvalidation/MapMultibindingValidator.java
index 8a909f11b..481c6d82b 100644
--- a/java/dagger/internal/codegen/MapMultibindingValidator.java
+++ b/java/dagger/internal/codegen/bindinggraphvalidation/MapMultibindingValidator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.bindinggraphvalidation;
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.collect.Multimaps.filterKeys;
diff --git a/java/dagger/internal/codegen/MissingBindingValidator.java b/java/dagger/internal/codegen/bindinggraphvalidation/MissingBindingValidator.java
similarity index 98%
rename from java/dagger/internal/codegen/MissingBindingValidator.java
rename to java/dagger/internal/codegen/bindinggraphvalidation/MissingBindingValidator.java
index a9dfdce76..7334cd9c8 100644
--- a/java/dagger/internal/codegen/MissingBindingValidator.java
+++ b/java/dagger/internal/codegen/bindinggraphvalidation/MissingBindingValidator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.bindinggraphvalidation;
 
 import static com.google.common.base.Verify.verify;
 import static dagger.internal.codegen.base.Keys.isValidImplicitProvisionKey;
diff --git a/java/dagger/internal/codegen/NullableBindingValidator.java b/java/dagger/internal/codegen/bindinggraphvalidation/NullableBindingValidator.java
similarity index 93%
rename from java/dagger/internal/codegen/NullableBindingValidator.java
rename to java/dagger/internal/codegen/bindinggraphvalidation/NullableBindingValidator.java
index 4b68b3adb..2a5fec52a 100644
--- a/java/dagger/internal/codegen/NullableBindingValidator.java
+++ b/java/dagger/internal/codegen/bindinggraphvalidation/NullableBindingValidator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.bindinggraphvalidation;
 
 import static dagger.internal.codegen.extension.DaggerStreams.instancesOf;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableList;
@@ -34,7 +34,7 @@
  * Reports errors or warnings (depending on the {@code -Adagger.nullableValidation} value) for each
  * non-nullable dependency request that is satisfied by a nullable binding.
  */
-final class NullableBindingValidator implements BindingGraphPlugin {
+public final class NullableBindingValidator implements BindingGraphPlugin {
 
   private final CompilerOptions compilerOptions;
 
@@ -77,7 +77,7 @@ public String pluginName() {
   }
 
   @VisibleForTesting
-  static String nullableToNonNullable(String key, String binding) {
+  public static String nullableToNonNullable(String key, String binding) {
     return String.format("%s is not nullable, but is being provided by %s", key, binding);
   }
 }
diff --git a/java/dagger/internal/codegen/ProvisionDependencyOnProducerBindingValidator.java b/java/dagger/internal/codegen/bindinggraphvalidation/ProvisionDependencyOnProducerBindingValidator.java
similarity index 98%
rename from java/dagger/internal/codegen/ProvisionDependencyOnProducerBindingValidator.java
rename to java/dagger/internal/codegen/bindinggraphvalidation/ProvisionDependencyOnProducerBindingValidator.java
index 2bbf084fb..7d742f96f 100644
--- a/java/dagger/internal/codegen/ProvisionDependencyOnProducerBindingValidator.java
+++ b/java/dagger/internal/codegen/bindinggraphvalidation/ProvisionDependencyOnProducerBindingValidator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.bindinggraphvalidation;
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Verify.verify;
diff --git a/java/dagger/internal/codegen/SubcomponentFactoryMethodValidator.java b/java/dagger/internal/codegen/bindinggraphvalidation/SubcomponentFactoryMethodValidator.java
similarity index 99%
rename from java/dagger/internal/codegen/SubcomponentFactoryMethodValidator.java
rename to java/dagger/internal/codegen/bindinggraphvalidation/SubcomponentFactoryMethodValidator.java
index 018560e73..9d8c2e494 100644
--- a/java/dagger/internal/codegen/SubcomponentFactoryMethodValidator.java
+++ b/java/dagger/internal/codegen/bindinggraphvalidation/SubcomponentFactoryMethodValidator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.bindinggraphvalidation;
 
 import static com.google.auto.common.MoreTypes.asDeclared;
 import static com.google.auto.common.MoreTypes.asExecutable;
diff --git a/java/dagger/internal/codegen/AnnotationCreatorGenerator.java b/java/dagger/internal/codegen/writing/AnnotationCreatorGenerator.java
similarity index 98%
rename from java/dagger/internal/codegen/AnnotationCreatorGenerator.java
rename to java/dagger/internal/codegen/writing/AnnotationCreatorGenerator.java
index d16768693..c047e9e0e 100644
--- a/java/dagger/internal/codegen/AnnotationCreatorGenerator.java
+++ b/java/dagger/internal/codegen/writing/AnnotationCreatorGenerator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.squareup.javapoet.MethodSpec.constructorBuilder;
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
@@ -78,7 +78,7 @@
  *   }
  * </pre>
  */
-class AnnotationCreatorGenerator extends SourceFileGenerator<TypeElement> {
+public class AnnotationCreatorGenerator extends SourceFileGenerator<TypeElement> {
   private static final ClassName AUTO_ANNOTATION =
       ClassName.get("com.google.auto.value", "AutoAnnotation");
 
diff --git a/java/dagger/internal/codegen/AnonymousProviderCreationExpression.java b/java/dagger/internal/codegen/writing/AnonymousProviderCreationExpression.java
similarity index 94%
rename from java/dagger/internal/codegen/AnonymousProviderCreationExpression.java
rename to java/dagger/internal/codegen/writing/AnonymousProviderCreationExpression.java
index 8b9ca7cc9..b1237ca75 100644
--- a/java/dagger/internal/codegen/AnonymousProviderCreationExpression.java
+++ b/java/dagger/internal/codegen/writing/AnonymousProviderCreationExpression.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static dagger.internal.codegen.binding.BindingRequest.bindingRequest;
 import static dagger.internal.codegen.javapoet.CodeBlocks.anonymousProvider;
@@ -22,10 +22,10 @@
 
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
-import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
 import dagger.internal.codegen.binding.BindingRequest;
 import dagger.internal.codegen.binding.ContributionBinding;
 import dagger.internal.codegen.javapoet.Expression;
+import dagger.internal.codegen.writing.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
 
 /**
  * A {@link javax.inject.Provider} creation expression for an anonymous inner class whose
diff --git a/java/dagger/internal/codegen/writing/BUILD b/java/dagger/internal/codegen/writing/BUILD
new file mode 100644
index 000000000..d8177a1db
--- /dev/null
+++ b/java/dagger/internal/codegen/writing/BUILD
@@ -0,0 +1,43 @@
+# Copyright (C) 2019 The Dagger Authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# Description:
+#   Classes that assemble the model of the generated code and write to the Filer
+
+package(default_visibility = ["//:src"])
+
+java_library(
+    name = "writing",
+    srcs = glob(["*.java"]),
+    plugins = ["//java/dagger/internal/codegen/bootstrap"],
+    tags = ["maven:merged"],
+    deps = [
+        "//java/dagger:core",
+        "//java/dagger/internal/codegen/base",
+        "//java/dagger/internal/codegen/binding",
+        "//java/dagger/internal/codegen/compileroption",
+        "//java/dagger/internal/codegen/extension",
+        "//java/dagger/internal/codegen/javapoet",
+        "//java/dagger/internal/codegen/langmodel",
+        "//java/dagger/internal/codegen/statistics",
+        "//java/dagger/model",
+        "//java/dagger/producers",
+        "@google_bazel_common//third_party/java/auto:common",
+        "@google_bazel_common//third_party/java/auto:value",
+        "@google_bazel_common//third_party/java/error_prone:annotations",
+        "@google_bazel_common//third_party/java/guava",
+        "@google_bazel_common//third_party/java/javapoet",
+        "@google_bazel_common//third_party/java/jsr330_inject",
+    ],
+)
diff --git a/java/dagger/internal/codegen/BindingExpression.java b/java/dagger/internal/codegen/writing/BindingExpression.java
similarity index 98%
rename from java/dagger/internal/codegen/BindingExpression.java
rename to java/dagger/internal/codegen/writing/BindingExpression.java
index 6d9621900..16e7c7306 100644
--- a/java/dagger/internal/codegen/BindingExpression.java
+++ b/java/dagger/internal/codegen/writing/BindingExpression.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
diff --git a/java/dagger/internal/codegen/ComponentBindingExpressions.java b/java/dagger/internal/codegen/writing/ComponentBindingExpressions.java
similarity index 97%
rename from java/dagger/internal/codegen/ComponentBindingExpressions.java
rename to java/dagger/internal/codegen/writing/ComponentBindingExpressions.java
index 8d9af2d78..8cd4f233d 100644
--- a/java/dagger/internal/codegen/ComponentBindingExpressions.java
+++ b/java/dagger/internal/codegen/writing/ComponentBindingExpressions.java
@@ -14,19 +14,19 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.base.Verify.verify;
-import static dagger.internal.codegen.DelegateBindingExpression.isBindsScopeStrongerThanDependencyScope;
-import static dagger.internal.codegen.MemberSelect.staticFactoryCreation;
 import static dagger.internal.codegen.binding.BindingRequest.bindingRequest;
 import static dagger.internal.codegen.javapoet.CodeBlocks.makeParametersCodeBlock;
 import static dagger.internal.codegen.javapoet.TypeNames.DOUBLE_CHECK;
 import static dagger.internal.codegen.javapoet.TypeNames.SINGLE_CHECK;
 import static dagger.internal.codegen.langmodel.Accessibility.isRawTypeAccessible;
 import static dagger.internal.codegen.langmodel.Accessibility.isTypeAccessibleFrom;
+import static dagger.internal.codegen.writing.DelegateBindingExpression.isBindsScopeStrongerThanDependencyScope;
+import static dagger.internal.codegen.writing.MemberSelect.staticFactoryCreation;
 import static dagger.model.BindingKind.DELEGATE;
 import static dagger.model.BindingKind.MULTIBOUND_MAP;
 import static dagger.model.BindingKind.MULTIBOUND_SET;
@@ -36,8 +36,6 @@
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.MethodSpec;
-import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
-import dagger.internal.codegen.MethodBindingExpression.MethodImplementationStrategy;
 import dagger.internal.codegen.binding.Binding;
 import dagger.internal.codegen.binding.BindingGraph;
 import dagger.internal.codegen.binding.BindingRequest;
@@ -54,6 +52,8 @@
 import dagger.internal.codegen.javapoet.Expression;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
+import dagger.internal.codegen.writing.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
+import dagger.internal.codegen.writing.MethodBindingExpression.MethodImplementationStrategy;
 import dagger.model.DependencyRequest;
 import dagger.model.Key;
 import dagger.model.RequestKind;
@@ -67,7 +67,7 @@
 
 /** A central repository of code expressions used to access any binding available to a component. */
 @PerComponentImplementation
-final class ComponentBindingExpressions {
+public final class ComponentBindingExpressions {
   // TODO(dpb,ronshapiro): refactor this and ComponentRequirementExpressions into a
   // HierarchicalComponentMap<K, V>, or perhaps this use a flattened ImmutableMap, built from its
   // parents? If so, maybe make BindingExpression.Factory create it.
@@ -118,7 +118,7 @@
    * @param requestingClass the class that will contain the expression
    * @throws IllegalStateException if there is no binding expression that satisfies the request
    */
-  Expression getDependencyExpression(BindingRequest request, ClassName requestingClass) {
+  public Expression getDependencyExpression(BindingRequest request, ClassName requestingClass) {
     return getBindingExpression(request).getDependencyExpression(requestingClass);
   }
 
@@ -199,7 +199,7 @@ Expression getDependencyArgumentExpression(
   }
 
   /** Returns the implementation of a component method. */
-  MethodSpec getComponentMethod(ComponentMethodDescriptor componentMethod) {
+  public MethodSpec getComponentMethod(ComponentMethodDescriptor componentMethod) {
     checkArgument(componentMethod.dependencyRequest().isPresent());
     BindingRequest request = bindingRequest(componentMethod.dependencyRequest().get());
     MethodSpec.Builder method =
diff --git a/java/dagger/internal/codegen/ComponentCreatorImplementation.java b/java/dagger/internal/codegen/writing/ComponentCreatorImplementation.java
similarity index 80%
rename from java/dagger/internal/codegen/ComponentCreatorImplementation.java
rename to java/dagger/internal/codegen/writing/ComponentCreatorImplementation.java
index d604958b6..f9d218b90 100644
--- a/java/dagger/internal/codegen/ComponentCreatorImplementation.java
+++ b/java/dagger/internal/codegen/writing/ComponentCreatorImplementation.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import com.google.auto.value.AutoValue;
 import com.google.common.collect.ImmutableMap;
@@ -25,21 +25,19 @@
 
 /** The implementation of a component creator type. */
 @AutoValue
-abstract class ComponentCreatorImplementation {
+public abstract class ComponentCreatorImplementation {
 
   /** Creates a new {@link ComponentCreatorImplementation}. */
-  static ComponentCreatorImplementation create(
-      TypeSpec spec,
-      ClassName name,
-      ImmutableMap<ComponentRequirement, FieldSpec> fields) {
+  public static ComponentCreatorImplementation create(
+      TypeSpec spec, ClassName name, ImmutableMap<ComponentRequirement, FieldSpec> fields) {
     return new AutoValue_ComponentCreatorImplementation(spec, name, fields);
   }
 
   /** The type spec for the creator implementation. */
-  abstract TypeSpec spec();
+  public abstract TypeSpec spec();
 
   /** The name of the creator implementation class. */
-  abstract ClassName name();
+  public abstract ClassName name();
 
   /** All fields that are present in this implementation. */
   abstract ImmutableMap<ComponentRequirement, FieldSpec> fields();
diff --git a/java/dagger/internal/codegen/ComponentImplementation.java b/java/dagger/internal/codegen/writing/ComponentImplementation.java
similarity index 91%
rename from java/dagger/internal/codegen/ComponentImplementation.java
rename to java/dagger/internal/codegen/writing/ComponentImplementation.java
index b8cdf2dca..832a9acec 100644
--- a/java/dagger/internal/codegen/ComponentImplementation.java
+++ b/java/dagger/internal/codegen/writing/ComponentImplementation.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.CaseFormat.LOWER_CAMEL;
 import static com.google.common.base.CaseFormat.UPPER_CAMEL;
@@ -65,9 +65,9 @@
 import javax.lang.model.type.TypeMirror;
 
 /** The implementation of a component type. */
-final class ComponentImplementation {
+public final class ComponentImplementation {
   /** A type of field that this component can contain. */
-  enum FieldSpecKind {
+  public enum FieldSpecKind {
 
     /** A field required by the component, e.g. module instances. */
     COMPONENT_REQUIREMENT_FIELD,
@@ -88,7 +88,7 @@
   /** A type of method that this component can contain. */
   // TODO(user, dpb): Change the oder to constructor, initialize, component, then private
   // (including MIM and AOM—why treat those separately?).
-  enum MethodSpecKind {
+  public enum MethodSpecKind {
     /** The component constructor. */
     CONSTRUCTOR,
 
@@ -119,7 +119,7 @@
   }
 
   /** A type of nested class that this component can contain. */
-  enum TypeSpecKind {
+  public enum TypeSpecKind {
     /** A factory class for a present optional binding. */
     PRESENT_FACTORY,
 
@@ -177,7 +177,7 @@ private ComponentImplementation(
   }
 
   /** Returns a component implementation for a top-level component. */
-  static ComponentImplementation topLevelComponentImplementation(
+  public static ComponentImplementation topLevelComponentImplementation(
       BindingGraph graph,
       ClassName name,
       SubcomponentNames subcomponentNames,
@@ -204,7 +204,8 @@ static ComponentImplementation topLevelComponentImplementation(
   }
 
   /** Returns a component implementation that is a child of the current implementation. */
-  ComponentImplementation childComponentImplementation(BindingGraph graph, Modifier... modifiers) {
+  public ComponentImplementation childComponentImplementation(
+      BindingGraph graph, Modifier... modifiers) {
     return new ComponentImplementation(
         graph.componentDescriptor(),
         graph,
@@ -236,32 +237,33 @@ private static void checkName(ClassName name, NestingKind nestingKind) {
   // TODO(ronshapiro): see if we can remove this method and instead inject it in the objects that
   // need it.
   /** Returns the binding graph for the component being generated. */
-  BindingGraph graph() {
+  public BindingGraph graph() {
     return graph;
   }
 
   /** Returns the descriptor for the component being generated. */
-  ComponentDescriptor componentDescriptor() {
+  public ComponentDescriptor componentDescriptor() {
     return componentDescriptor;
   }
 
   /** Returns the name of the component. */
-  ClassName name() {
+  public ClassName name() {
     return name;
   }
 
   /** Returns whether or not the implementation is nested within another class. */
-  boolean isNested() {
+  public boolean isNested() {
     return nestingKind.isNested();
   }
 
-  void setCreatorImplementation(Optional<ComponentCreatorImplementation> creatorImplementation) {
+  public void setCreatorImplementation(
+      Optional<ComponentCreatorImplementation> creatorImplementation) {
     checkState(
         this.creatorImplementation == null, "setCreatorImplementation has already been called");
     this.creatorImplementation = creatorImplementation;
   }
 
-  Optional<ComponentCreatorImplementation> creatorImplementation() {
+  public Optional<ComponentCreatorImplementation> creatorImplementation() {
     checkState(creatorImplementation != null, "setCreatorImplementation has not been called yet");
     return creatorImplementation;
   }
@@ -283,7 +285,7 @@ private ComponentCreatorKind creatorKind() {
    * Returns the name of the creator class for this component. It will be a sibling of this
    * generated class unless this is a top-level component, in which case it will be nested.
    */
-  ClassName getCreatorName() {
+  public ClassName getCreatorName() {
     return isNested()
         ? name.peerClass(subcomponentNames().getCreatorName(componentDescriptor()))
         : name.nestedClass(creatorKind().typeName());
@@ -317,39 +319,34 @@ boolean isTypeAccessible(TypeMirror type) {
   }
 
   /** Adds the given super type to the component. */
-  void addSupertype(TypeElement supertype) {
+  public void addSupertype(TypeElement supertype) {
     TypeSpecs.addSupertype(component, supertype);
   }
 
   // TODO(dpb): Consider taking FieldSpec, and returning identical FieldSpec with unique name?
   /** Adds the given field to the component. */
-  void addField(FieldSpecKind fieldKind, FieldSpec fieldSpec) {
+  public void addField(FieldSpecKind fieldKind, FieldSpec fieldSpec) {
     fieldSpecsMap.put(fieldKind, fieldSpec);
   }
 
-  /** Adds the given fields to the component. */
-  void addFields(FieldSpecKind fieldKind, Iterable<FieldSpec> fieldSpecs) {
-    fieldSpecsMap.putAll(fieldKind, fieldSpecs);
-  }
-
   // TODO(dpb): Consider taking MethodSpec, and returning identical MethodSpec with unique name?
   /** Adds the given method to the component. */
-  void addMethod(MethodSpecKind methodKind, MethodSpec methodSpec) {
+  public void addMethod(MethodSpecKind methodKind, MethodSpec methodSpec) {
     methodSpecsMap.put(methodKind, methodSpec);
   }
 
   /** Adds the given annotation to the component. */
-  void addAnnotation(AnnotationSpec annotation) {
+  public void addAnnotation(AnnotationSpec annotation) {
     component.addAnnotation(annotation);
   }
 
   /** Adds the given type to the component. */
-  void addType(TypeSpecKind typeKind, TypeSpec typeSpec) {
+  public void addType(TypeSpecKind typeKind, TypeSpec typeSpec) {
     typeSpecsMap.put(typeKind, typeSpec);
   }
 
   /** Adds the type generated from the given child implementation. */
-  void addChild(ComponentDescriptor child, ComponentImplementation childImplementation) {
+  public void addChild(ComponentDescriptor child, ComponentImplementation childImplementation) {
     childImplementations.put(child.typeElement(), childImplementation);
     addType(TypeSpecKind.SUBCOMPONENT, childImplementation.generate().build());
   }
@@ -383,7 +380,7 @@ String getUniqueFieldName(String name) {
   }
 
   /** Returns a new, unique method name for the component based on the given name. */
-  String getUniqueMethodName(String name) {
+  public String getUniqueMethodName(String name) {
     return componentMethodNames.getUniqueName(name);
   }
 
@@ -406,18 +403,18 @@ private String uniqueMethodName(BindingRequest request, String bindingName) {
    * Gets the parameter name to use for the given requirement for this component, starting with the
    * given base name if no parameter name has already been selected for the requirement.
    */
-  String getParameterName(ComponentRequirement requirement, String baseName) {
+  public String getParameterName(ComponentRequirement requirement, String baseName) {
     return componentRequirementParameterNames.computeIfAbsent(
         requirement, r -> getUniqueFieldName(baseName));
   }
 
   /** Claims a new method name for the component. Does nothing if method name already exists. */
-  void claimMethodName(CharSequence name) {
+  public void claimMethodName(CharSequence name) {
     componentMethodNames.claim(name);
   }
 
   /** Returns the list of {@link CodeBlock}s that need to go in the initialize method. */
-  ImmutableList<CodeBlock> getInitializations() {
+  public ImmutableList<CodeBlock> getInitializations() {
     return ImmutableList.copyOf(initializations);
   }
 
@@ -433,7 +430,7 @@ void claimMethodName(CharSequence name) {
    */
   // TODO(cgdecker): can these be inlined with getInitializations() now that we've turned down
   // ahead-of-time subcomponents?
-  ImmutableList<CodeBlock> getComponentRequirementInitializations() {
+  public ImmutableList<CodeBlock> getComponentRequirementInitializations() {
     return ImmutableList.copyOf(componentRequirementInitializations);
   }
 
@@ -441,12 +438,12 @@ void claimMethodName(CharSequence name) {
    * Returns the list of producer {@link Key}s that need cancellation statements in the cancellation
    * listener method.
    */
-  ImmutableList<Key> getCancellableProducerKeys() {
+  public ImmutableList<Key> getCancellableProducerKeys() {
     return ImmutableList.copyOf(cancellableProducerKeys);
   }
 
   /** Generates the component and returns the resulting {@link TypeSpec.Builder}. */
-  TypeSpec.Builder generate() {
+  public TypeSpec.Builder generate() {
     fieldSpecsMap.asMap().values().forEach(component::addFields);
     methodSpecsMap.asMap().values().forEach(component::addMethods);
     typeSpecsMap.asMap().values().forEach(component::addTypes);
diff --git a/java/dagger/internal/codegen/ComponentInstanceBindingExpression.java b/java/dagger/internal/codegen/writing/ComponentInstanceBindingExpression.java
similarity index 97%
rename from java/dagger/internal/codegen/ComponentInstanceBindingExpression.java
rename to java/dagger/internal/codegen/writing/ComponentInstanceBindingExpression.java
index e77e6d089..9fa10c6e0 100644
--- a/java/dagger/internal/codegen/ComponentInstanceBindingExpression.java
+++ b/java/dagger/internal/codegen/writing/ComponentInstanceBindingExpression.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
diff --git a/java/dagger/internal/codegen/ComponentMethodBindingExpression.java b/java/dagger/internal/codegen/writing/ComponentMethodBindingExpression.java
similarity index 98%
rename from java/dagger/internal/codegen/ComponentMethodBindingExpression.java
rename to java/dagger/internal/codegen/writing/ComponentMethodBindingExpression.java
index 9643329ba..7fa9aa3ed 100644
--- a/java/dagger/internal/codegen/ComponentMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/writing/ComponentMethodBindingExpression.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
diff --git a/java/dagger/internal/codegen/ComponentProvisionBindingExpression.java b/java/dagger/internal/codegen/writing/ComponentProvisionBindingExpression.java
similarity index 98%
rename from java/dagger/internal/codegen/ComponentProvisionBindingExpression.java
rename to java/dagger/internal/codegen/writing/ComponentProvisionBindingExpression.java
index 7d6aa7ec8..0ba07641d 100644
--- a/java/dagger/internal/codegen/ComponentProvisionBindingExpression.java
+++ b/java/dagger/internal/codegen/writing/ComponentProvisionBindingExpression.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
diff --git a/java/dagger/internal/codegen/ComponentRequirementBindingExpression.java b/java/dagger/internal/codegen/writing/ComponentRequirementBindingExpression.java
similarity index 97%
rename from java/dagger/internal/codegen/ComponentRequirementBindingExpression.java
rename to java/dagger/internal/codegen/writing/ComponentRequirementBindingExpression.java
index 6d9b94568..299f27974 100644
--- a/java/dagger/internal/codegen/ComponentRequirementBindingExpression.java
+++ b/java/dagger/internal/codegen/writing/ComponentRequirementBindingExpression.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import com.squareup.javapoet.ClassName;
 import dagger.internal.codegen.binding.ComponentRequirement;
diff --git a/java/dagger/internal/codegen/ComponentRequirementExpression.java b/java/dagger/internal/codegen/writing/ComponentRequirementExpression.java
similarity index 98%
rename from java/dagger/internal/codegen/ComponentRequirementExpression.java
rename to java/dagger/internal/codegen/writing/ComponentRequirementExpression.java
index 8c0ec6488..13008b8eb 100644
--- a/java/dagger/internal/codegen/ComponentRequirementExpression.java
+++ b/java/dagger/internal/codegen/writing/ComponentRequirementExpression.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
diff --git a/java/dagger/internal/codegen/ComponentRequirementExpressions.java b/java/dagger/internal/codegen/writing/ComponentRequirementExpressions.java
similarity index 97%
rename from java/dagger/internal/codegen/ComponentRequirementExpressions.java
rename to java/dagger/internal/codegen/writing/ComponentRequirementExpressions.java
index 2562e949b..592b86503 100644
--- a/java/dagger/internal/codegen/ComponentRequirementExpressions.java
+++ b/java/dagger/internal/codegen/writing/ComponentRequirementExpressions.java
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.base.Suppliers.memoize;
-import static dagger.internal.codegen.ComponentImplementation.FieldSpecKind.COMPONENT_REQUIREMENT_FIELD;
-import static dagger.internal.codegen.ModuleProxies.newModuleInstance;
+import static dagger.internal.codegen.writing.ComponentImplementation.FieldSpecKind.COMPONENT_REQUIREMENT_FIELD;
+import static dagger.internal.codegen.writing.ModuleProxies.newModuleInstance;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PRIVATE;
 
@@ -43,7 +43,7 @@
  * a component.
  */
 @PerComponentImplementation
-final class ComponentRequirementExpressions {
+public final class ComponentRequirementExpressions {
 
   // TODO(dpb,ronshapiro): refactor this and ComponentBindingExpressions into a
   // HierarchicalComponentMap<K, V>, or perhaps this use a flattened ImmutableMap, built from its
diff --git a/java/dagger/internal/codegen/DelegateBindingExpression.java b/java/dagger/internal/codegen/writing/DelegateBindingExpression.java
similarity index 97%
rename from java/dagger/internal/codegen/DelegateBindingExpression.java
rename to java/dagger/internal/codegen/writing/DelegateBindingExpression.java
index 5854fd4fd..ecdc8f288 100644
--- a/java/dagger/internal/codegen/DelegateBindingExpression.java
+++ b/java/dagger/internal/codegen/writing/DelegateBindingExpression.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
@@ -35,7 +35,7 @@
 import dagger.model.RequestKind;
 import javax.lang.model.type.TypeMirror;
 
-/** A {@link BindingExpression} for {@code @Binds} methods. */
+/** A {@link dagger.internal.codegen.writing.BindingExpression} for {@code @Binds} methods. */
 final class DelegateBindingExpression extends BindingExpression {
   private final ContributionBinding binding;
   private final RequestKind requestKind;
diff --git a/java/dagger/internal/codegen/DelegatingFrameworkInstanceCreationExpression.java b/java/dagger/internal/codegen/writing/DelegatingFrameworkInstanceCreationExpression.java
similarity index 93%
rename from java/dagger/internal/codegen/DelegatingFrameworkInstanceCreationExpression.java
rename to java/dagger/internal/codegen/writing/DelegatingFrameworkInstanceCreationExpression.java
index 40852693d..a7f9556d9 100644
--- a/java/dagger/internal/codegen/DelegatingFrameworkInstanceCreationExpression.java
+++ b/java/dagger/internal/codegen/writing/DelegatingFrameworkInstanceCreationExpression.java
@@ -14,16 +14,16 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.collect.Iterables.getOnlyElement;
 import static dagger.internal.codegen.binding.BindingRequest.bindingRequest;
 
 import com.squareup.javapoet.CodeBlock;
-import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
 import dagger.internal.codegen.binding.ContributionBinding;
 import dagger.internal.codegen.javapoet.CodeBlocks;
+import dagger.internal.codegen.writing.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
 import dagger.model.DependencyRequest;
 
 /** A framework instance creation expression for a {@link dagger.Binds @Binds} binding. */
diff --git a/java/dagger/internal/codegen/DependencyMethodProducerCreationExpression.java b/java/dagger/internal/codegen/writing/DependencyMethodProducerCreationExpression.java
similarity index 97%
rename from java/dagger/internal/codegen/DependencyMethodProducerCreationExpression.java
rename to java/dagger/internal/codegen/writing/DependencyMethodProducerCreationExpression.java
index e251c11db..5ac1e8f6b 100644
--- a/java/dagger/internal/codegen/DependencyMethodProducerCreationExpression.java
+++ b/java/dagger/internal/codegen/writing/DependencyMethodProducerCreationExpression.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
@@ -29,10 +29,10 @@
 import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.FieldSpec;
 import com.squareup.javapoet.TypeName;
-import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
 import dagger.internal.codegen.binding.BindingGraph;
 import dagger.internal.codegen.binding.ComponentRequirement;
 import dagger.internal.codegen.binding.ContributionBinding;
+import dagger.internal.codegen.writing.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
 
 /**
  * A {@link dagger.producers.Producer} creation expression for a production method on a production
diff --git a/java/dagger/internal/codegen/DependencyMethodProviderCreationExpression.java b/java/dagger/internal/codegen/writing/DependencyMethodProviderCreationExpression.java
similarity index 95%
rename from java/dagger/internal/codegen/DependencyMethodProviderCreationExpression.java
rename to java/dagger/internal/codegen/writing/DependencyMethodProviderCreationExpression.java
index 8bc07b039..5a40c0206 100644
--- a/java/dagger/internal/codegen/DependencyMethodProviderCreationExpression.java
+++ b/java/dagger/internal/codegen/writing/DependencyMethodProviderCreationExpression.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.squareup.javapoet.MethodSpec.constructorBuilder;
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
 import static com.squareup.javapoet.TypeSpec.classBuilder;
-import static dagger.internal.codegen.ComponentImplementation.TypeSpecKind.COMPONENT_PROVISION_FACTORY;
 import static dagger.internal.codegen.javapoet.TypeNames.providerOf;
+import static dagger.internal.codegen.writing.ComponentImplementation.TypeSpecKind.COMPONENT_PROVISION_FACTORY;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.PUBLIC;
@@ -32,12 +32,12 @@
 import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.MethodSpec;
 import com.squareup.javapoet.TypeName;
-import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
 import dagger.internal.codegen.binding.BindingGraph;
 import dagger.internal.codegen.binding.ComponentRequirement;
 import dagger.internal.codegen.binding.ContributionBinding;
 import dagger.internal.codegen.binding.ProvisionBinding;
 import dagger.internal.codegen.compileroption.CompilerOptions;
+import dagger.internal.codegen.writing.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
 import javax.lang.model.element.Element;
 
 /**
diff --git a/java/dagger/internal/codegen/DerivedFromFrameworkInstanceBindingExpression.java b/java/dagger/internal/codegen/writing/DerivedFromFrameworkInstanceBindingExpression.java
similarity index 98%
rename from java/dagger/internal/codegen/DerivedFromFrameworkInstanceBindingExpression.java
rename to java/dagger/internal/codegen/writing/DerivedFromFrameworkInstanceBindingExpression.java
index 61d7b1d7b..6e5dca84e 100644
--- a/java/dagger/internal/codegen/DerivedFromFrameworkInstanceBindingExpression.java
+++ b/java/dagger/internal/codegen/writing/DerivedFromFrameworkInstanceBindingExpression.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 import static dagger.internal.codegen.binding.BindingRequest.bindingRequest;
diff --git a/java/dagger/internal/codegen/FactoryGenerator.java b/java/dagger/internal/codegen/writing/FactoryGenerator.java
similarity index 97%
rename from java/dagger/internal/codegen/FactoryGenerator.java
rename to java/dagger/internal/codegen/writing/FactoryGenerator.java
index 433b0ec97..98cc208cf 100644
--- a/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/java/dagger/internal/codegen/writing/FactoryGenerator.java
@@ -14,14 +14,13 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.collect.Maps.transformValues;
 import static com.squareup.javapoet.MethodSpec.constructorBuilder;
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
 import static com.squareup.javapoet.TypeSpec.classBuilder;
-import static dagger.internal.codegen.GwtCompatibility.gwtIncompatibleAnnotation;
 import static dagger.internal.codegen.binding.ContributionBinding.FactoryCreationStrategy.DELEGATE;
 import static dagger.internal.codegen.binding.ContributionBinding.FactoryCreationStrategy.SINGLETON_INSTANCE;
 import static dagger.internal.codegen.binding.SourceFiles.bindingTypeElementTypeVariableNames;
@@ -35,6 +34,7 @@
 import static dagger.internal.codegen.javapoet.AnnotationSpecs.suppressWarnings;
 import static dagger.internal.codegen.javapoet.CodeBlocks.makeParametersCodeBlock;
 import static dagger.internal.codegen.javapoet.TypeNames.factoryOf;
+import static dagger.internal.codegen.writing.GwtCompatibility.gwtIncompatibleAnnotation;
 import static dagger.model.BindingKind.INJECTION;
 import static dagger.model.BindingKind.PROVISION;
 import static javax.lang.model.element.Modifier.FINAL;
@@ -54,8 +54,6 @@
 import com.squareup.javapoet.TypeSpec;
 import dagger.internal.Factory;
 import dagger.internal.Preconditions;
-import dagger.internal.codegen.InjectionMethods.InjectionSiteMethod;
-import dagger.internal.codegen.InjectionMethods.ProvisionMethod;
 import dagger.internal.codegen.base.SourceFileGenerator;
 import dagger.internal.codegen.base.UniqueNameSet;
 import dagger.internal.codegen.binding.ProvisionBinding;
@@ -64,6 +62,8 @@
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import dagger.internal.codegen.statistics.DaggerStatisticsCollector;
+import dagger.internal.codegen.writing.InjectionMethods.InjectionSiteMethod;
+import dagger.internal.codegen.writing.InjectionMethods.ProvisionMethod;
 import dagger.model.DependencyRequest;
 import java.util.List;
 import java.util.Optional;
@@ -76,7 +76,7 @@
  * Generates {@link Factory} implementations from {@link ProvisionBinding} instances for {@link
  * Inject} constructors.
  */
-final class FactoryGenerator extends SourceFileGenerator<ProvisionBinding> {
+public final class FactoryGenerator extends SourceFileGenerator<ProvisionBinding> {
   private final DaggerTypes types;
   private final DaggerElements elements;
   private final CompilerOptions compilerOptions;
diff --git a/java/dagger/internal/codegen/FrameworkFieldInitializer.java b/java/dagger/internal/codegen/writing/FrameworkFieldInitializer.java
similarity index 98%
rename from java/dagger/internal/codegen/FrameworkFieldInitializer.java
rename to java/dagger/internal/codegen/writing/FrameworkFieldInitializer.java
index f32a6b1b4..14f3136af 100644
--- a/java/dagger/internal/codegen/FrameworkFieldInitializer.java
+++ b/java/dagger/internal/codegen/writing/FrameworkFieldInitializer.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkNotNull;
-import static dagger.internal.codegen.ComponentImplementation.FieldSpecKind.FRAMEWORK_FIELD;
 import static dagger.internal.codegen.javapoet.AnnotationSpecs.Suppression.RAWTYPES;
+import static dagger.internal.codegen.writing.ComponentImplementation.FieldSpecKind.FRAMEWORK_FIELD;
 import static javax.lang.model.element.Modifier.PRIVATE;
 
 import com.squareup.javapoet.ClassName;
diff --git a/java/dagger/internal/codegen/FrameworkInstanceBindingExpression.java b/java/dagger/internal/codegen/writing/FrameworkInstanceBindingExpression.java
similarity index 98%
rename from java/dagger/internal/codegen/FrameworkInstanceBindingExpression.java
rename to java/dagger/internal/codegen/writing/FrameworkInstanceBindingExpression.java
index 23bed3dd7..56a6ef3d6 100644
--- a/java/dagger/internal/codegen/FrameworkInstanceBindingExpression.java
+++ b/java/dagger/internal/codegen/writing/FrameworkInstanceBindingExpression.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 import static dagger.internal.codegen.langmodel.Accessibility.isTypeAccessibleFrom;
diff --git a/java/dagger/internal/codegen/FrameworkInstanceSupplier.java b/java/dagger/internal/codegen/writing/FrameworkInstanceSupplier.java
similarity index 95%
rename from java/dagger/internal/codegen/FrameworkInstanceSupplier.java
rename to java/dagger/internal/codegen/writing/FrameworkInstanceSupplier.java
index 4c45630a3..cc0e136f0 100644
--- a/java/dagger/internal/codegen/FrameworkInstanceSupplier.java
+++ b/java/dagger/internal/codegen/writing/FrameworkInstanceSupplier.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 /** An object that supplies a {@link MemberSelect} for a framework instance. */
 interface FrameworkInstanceSupplier {
diff --git a/java/dagger/internal/codegen/GwtCompatibility.java b/java/dagger/internal/codegen/writing/GwtCompatibility.java
similarity index 97%
rename from java/dagger/internal/codegen/GwtCompatibility.java
rename to java/dagger/internal/codegen/writing/GwtCompatibility.java
index bcbe4b7cf..2df6a998a 100644
--- a/java/dagger/internal/codegen/GwtCompatibility.java
+++ b/java/dagger/internal/codegen/writing/GwtCompatibility.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkArgument;
 
diff --git a/java/dagger/internal/codegen/HjarSourceFileGenerator.java b/java/dagger/internal/codegen/writing/HjarSourceFileGenerator.java
similarity index 95%
rename from java/dagger/internal/codegen/HjarSourceFileGenerator.java
rename to java/dagger/internal/codegen/writing/HjarSourceFileGenerator.java
index d0fe93849..340ee17ca 100644
--- a/java/dagger/internal/codegen/HjarSourceFileGenerator.java
+++ b/java/dagger/internal/codegen/writing/HjarSourceFileGenerator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.squareup.javapoet.MethodSpec.constructorBuilder;
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
@@ -34,7 +34,7 @@
  * A source file generator that only writes the relevant code necessary for Bazel to create a
  * correct header (ABI) jar.
  */
-final class HjarSourceFileGenerator<T> extends SourceFileGenerator<T> {
+public final class HjarSourceFileGenerator<T> extends SourceFileGenerator<T> {
   private final SourceFileGenerator<T> delegate;
 
   private HjarSourceFileGenerator(SourceFileGenerator<T> delegate) {
@@ -42,7 +42,7 @@ private HjarSourceFileGenerator(SourceFileGenerator<T> delegate) {
     this.delegate = delegate;
   }
 
-  static <T> SourceFileGenerator<T> wrap(SourceFileGenerator<T> delegate) {
+  public static <T> SourceFileGenerator<T> wrap(SourceFileGenerator<T> delegate) {
     return new HjarSourceFileGenerator<>(delegate);
   }
 
diff --git a/java/dagger/internal/codegen/ImmediateFutureBindingExpression.java b/java/dagger/internal/codegen/writing/ImmediateFutureBindingExpression.java
similarity index 98%
rename from java/dagger/internal/codegen/ImmediateFutureBindingExpression.java
rename to java/dagger/internal/codegen/writing/ImmediateFutureBindingExpression.java
index 84790e0ef..dcd02faef 100644
--- a/java/dagger/internal/codegen/ImmediateFutureBindingExpression.java
+++ b/java/dagger/internal/codegen/writing/ImmediateFutureBindingExpression.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 import static dagger.internal.codegen.binding.BindingRequest.bindingRequest;
diff --git a/java/dagger/internal/codegen/InaccessibleMapKeyProxyGenerator.java b/java/dagger/internal/codegen/writing/InaccessibleMapKeyProxyGenerator.java
similarity index 94%
rename from java/dagger/internal/codegen/InaccessibleMapKeyProxyGenerator.java
rename to java/dagger/internal/codegen/writing/InaccessibleMapKeyProxyGenerator.java
index 5fd30ad50..29e180be8 100644
--- a/java/dagger/internal/codegen/InaccessibleMapKeyProxyGenerator.java
+++ b/java/dagger/internal/codegen/writing/InaccessibleMapKeyProxyGenerator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.squareup.javapoet.MethodSpec.constructorBuilder;
 import static com.squareup.javapoet.TypeSpec.classBuilder;
@@ -39,7 +39,8 @@
  * Generates a class that exposes a non-{@code public} {@link
  * ContributionBinding#mapKeyAnnotation()} @MapKey} annotation.
  */
-final class InaccessibleMapKeyProxyGenerator extends SourceFileGenerator<ContributionBinding> {
+public final class InaccessibleMapKeyProxyGenerator
+    extends SourceFileGenerator<ContributionBinding> {
   private final DaggerTypes types;
   private final DaggerElements elements;
 
diff --git a/java/dagger/internal/codegen/InjectionMethod.java b/java/dagger/internal/codegen/writing/InjectionMethod.java
similarity index 99%
rename from java/dagger/internal/codegen/InjectionMethod.java
rename to java/dagger/internal/codegen/writing/InjectionMethod.java
index 5fc447d48..105ec1fb1 100644
--- a/java/dagger/internal/codegen/InjectionMethod.java
+++ b/java/dagger/internal/codegen/writing/InjectionMethod.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
diff --git a/java/dagger/internal/codegen/InjectionMethods.java b/java/dagger/internal/codegen/writing/InjectionMethods.java
similarity index 99%
rename from java/dagger/internal/codegen/InjectionMethods.java
rename to java/dagger/internal/codegen/writing/InjectionMethods.java
index bd6517cbe..7f13404e1 100644
--- a/java/dagger/internal/codegen/InjectionMethods.java
+++ b/java/dagger/internal/codegen/writing/InjectionMethods.java
@@ -14,12 +14,11 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.CaseFormat.LOWER_CAMEL;
 import static com.google.common.base.CaseFormat.UPPER_CAMEL;
 import static com.google.common.base.Preconditions.checkArgument;
-import static dagger.internal.codegen.FactoryGenerator.checkNotNullProvidesMethod;
 import static dagger.internal.codegen.base.RequestKinds.requestTypeName;
 import static dagger.internal.codegen.binding.ConfigurationAnnotations.getNullableType;
 import static dagger.internal.codegen.binding.SourceFiles.generatedClassNameForBinding;
@@ -31,6 +30,7 @@
 import static dagger.internal.codegen.langmodel.Accessibility.isRawTypeAccessible;
 import static dagger.internal.codegen.langmodel.Accessibility.isRawTypePubliclyAccessible;
 import static dagger.internal.codegen.langmodel.Accessibility.isTypeAccessibleFrom;
+import static dagger.internal.codegen.writing.FactoryGenerator.checkNotNullProvidesMethod;
 import static java.util.stream.Collectors.toList;
 import static javax.lang.model.element.Modifier.STATIC;
 import static javax.lang.model.type.TypeKind.VOID;
diff --git a/java/dagger/internal/codegen/InjectionOrProvisionProviderCreationExpression.java b/java/dagger/internal/codegen/writing/InjectionOrProvisionProviderCreationExpression.java
similarity index 94%
rename from java/dagger/internal/codegen/InjectionOrProvisionProviderCreationExpression.java
rename to java/dagger/internal/codegen/writing/InjectionOrProvisionProviderCreationExpression.java
index a0039a583..b5135b057 100644
--- a/java/dagger/internal/codegen/InjectionOrProvisionProviderCreationExpression.java
+++ b/java/dagger/internal/codegen/writing/InjectionOrProvisionProviderCreationExpression.java
@@ -14,16 +14,16 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 import static dagger.internal.codegen.binding.SourceFiles.generatedClassNameForBinding;
 import static dagger.model.BindingKind.INJECTION;
 
 import com.squareup.javapoet.CodeBlock;
-import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
 import dagger.internal.codegen.binding.ContributionBinding;
 import dagger.internal.codegen.javapoet.CodeBlocks;
+import dagger.internal.codegen.writing.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
 import javax.inject.Provider;
 
 /**
diff --git a/java/dagger/internal/codegen/InnerSwitchingProviders.java b/java/dagger/internal/codegen/writing/InnerSwitchingProviders.java
similarity index 98%
rename from java/dagger/internal/codegen/InnerSwitchingProviders.java
rename to java/dagger/internal/codegen/writing/InnerSwitchingProviders.java
index 077e5f2d5..c2f9893b7 100644
--- a/java/dagger/internal/codegen/InnerSwitchingProviders.java
+++ b/java/dagger/internal/codegen/writing/InnerSwitchingProviders.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.squareup.javapoet.MethodSpec.constructorBuilder;
 import static dagger.internal.codegen.binding.BindingRequest.bindingRequest;
diff --git a/java/dagger/internal/codegen/InstanceFactoryCreationExpression.java b/java/dagger/internal/codegen/writing/InstanceFactoryCreationExpression.java
similarity index 92%
rename from java/dagger/internal/codegen/InstanceFactoryCreationExpression.java
rename to java/dagger/internal/codegen/writing/InstanceFactoryCreationExpression.java
index c9b26d755..a7d6685be 100644
--- a/java/dagger/internal/codegen/InstanceFactoryCreationExpression.java
+++ b/java/dagger/internal/codegen/writing/InstanceFactoryCreationExpression.java
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
 import com.squareup.javapoet.CodeBlock;
 import dagger.internal.InstanceFactory;
-import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
+import dagger.internal.codegen.writing.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
 import java.util.function.Supplier;
 
 /**
diff --git a/java/dagger/internal/codegen/MapBindingExpression.java b/java/dagger/internal/codegen/writing/MapBindingExpression.java
similarity index 99%
rename from java/dagger/internal/codegen/MapBindingExpression.java
rename to java/dagger/internal/codegen/writing/MapBindingExpression.java
index 00eb84e90..e0b162fe4 100644
--- a/java/dagger/internal/codegen/MapBindingExpression.java
+++ b/java/dagger/internal/codegen/writing/MapBindingExpression.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.collect.Iterables.getOnlyElement;
diff --git a/java/dagger/internal/codegen/MapFactoryCreationExpression.java b/java/dagger/internal/codegen/writing/MapFactoryCreationExpression.java
similarity index 98%
rename from java/dagger/internal/codegen/MapFactoryCreationExpression.java
rename to java/dagger/internal/codegen/writing/MapFactoryCreationExpression.java
index 85d1f3053..2f23c59a3 100644
--- a/java/dagger/internal/codegen/MapFactoryCreationExpression.java
+++ b/java/dagger/internal/codegen/writing/MapFactoryCreationExpression.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 import static dagger.internal.codegen.binding.MapKeys.getMapKeyExpression;
diff --git a/java/dagger/internal/codegen/MemberSelect.java b/java/dagger/internal/codegen/writing/MemberSelect.java
similarity index 99%
rename from java/dagger/internal/codegen/MemberSelect.java
rename to java/dagger/internal/codegen/writing/MemberSelect.java
index 7e0a2b889..b04e21be0 100644
--- a/java/dagger/internal/codegen/MemberSelect.java
+++ b/java/dagger/internal/codegen/writing/MemberSelect.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 import static dagger.internal.codegen.binding.ContributionBinding.FactoryCreationStrategy.SINGLETON_INSTANCE;
diff --git a/java/dagger/internal/codegen/MembersInjectionBindingExpression.java b/java/dagger/internal/codegen/writing/MembersInjectionBindingExpression.java
similarity index 98%
rename from java/dagger/internal/codegen/MembersInjectionBindingExpression.java
rename to java/dagger/internal/codegen/writing/MembersInjectionBindingExpression.java
index 80503ed3a..abf9d03d3 100644
--- a/java/dagger/internal/codegen/MembersInjectionBindingExpression.java
+++ b/java/dagger/internal/codegen/writing/MembersInjectionBindingExpression.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.collect.Iterables.getOnlyElement;
 import static javax.lang.model.type.TypeKind.VOID;
diff --git a/java/dagger/internal/codegen/MembersInjectionMethods.java b/java/dagger/internal/codegen/writing/MembersInjectionMethods.java
similarity index 96%
rename from java/dagger/internal/codegen/MembersInjectionMethods.java
rename to java/dagger/internal/codegen/writing/MembersInjectionMethods.java
index 9b9d0094f..137674b02 100644
--- a/java/dagger/internal/codegen/MembersInjectionMethods.java
+++ b/java/dagger/internal/codegen/writing/MembersInjectionMethods.java
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
-import static dagger.internal.codegen.ComponentImplementation.MethodSpecKind.MEMBERS_INJECTION_METHOD;
 import static dagger.internal.codegen.base.Util.reentrantComputeIfAbsent;
 import static dagger.internal.codegen.langmodel.Accessibility.isTypeAccessibleFrom;
+import static dagger.internal.codegen.writing.ComponentImplementation.MethodSpecKind.MEMBERS_INJECTION_METHOD;
 import static javax.lang.model.element.Modifier.PRIVATE;
 
 import com.google.common.collect.ImmutableSet;
@@ -29,7 +29,6 @@
 import com.squareup.javapoet.MethodSpec;
 import com.squareup.javapoet.ParameterSpec;
 import com.squareup.javapoet.TypeName;
-import dagger.internal.codegen.InjectionMethods.InjectionSiteMethod;
 import dagger.internal.codegen.binding.Binding;
 import dagger.internal.codegen.binding.BindingGraph;
 import dagger.internal.codegen.binding.MembersInjectionBinding;
@@ -38,6 +37,7 @@
 import dagger.internal.codegen.binding.ResolvedBindings;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
+import dagger.internal.codegen.writing.InjectionMethods.InjectionSiteMethod;
 import dagger.model.Key;
 import java.util.LinkedHashMap;
 import java.util.Map;
diff --git a/java/dagger/internal/codegen/MembersInjectorGenerator.java b/java/dagger/internal/codegen/writing/MembersInjectorGenerator.java
similarity index 96%
rename from java/dagger/internal/codegen/MembersInjectorGenerator.java
rename to java/dagger/internal/codegen/writing/MembersInjectorGenerator.java
index 574e94a7c..e9dcc342b 100644
--- a/java/dagger/internal/codegen/MembersInjectorGenerator.java
+++ b/java/dagger/internal/codegen/writing/MembersInjectorGenerator.java
@@ -14,13 +14,12 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkState;
 import static com.squareup.javapoet.MethodSpec.constructorBuilder;
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
 import static com.squareup.javapoet.TypeSpec.classBuilder;
-import static dagger.internal.codegen.GwtCompatibility.gwtIncompatibleAnnotation;
 import static dagger.internal.codegen.binding.SourceFiles.bindingTypeElementTypeVariableNames;
 import static dagger.internal.codegen.binding.SourceFiles.frameworkFieldUsages;
 import static dagger.internal.codegen.binding.SourceFiles.generateBindingFieldsForDependencies;
@@ -32,6 +31,7 @@
 import static dagger.internal.codegen.javapoet.CodeBlocks.toParametersCodeBlock;
 import static dagger.internal.codegen.javapoet.TypeNames.membersInjectorOf;
 import static dagger.internal.codegen.langmodel.Accessibility.isTypeAccessibleFrom;
+import static dagger.internal.codegen.writing.GwtCompatibility.gwtIncompatibleAnnotation;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.PUBLIC;
@@ -48,7 +48,6 @@
 import com.squareup.javapoet.TypeSpec;
 import com.squareup.javapoet.TypeVariableName;
 import dagger.MembersInjector;
-import dagger.internal.codegen.InjectionMethods.InjectionSiteMethod;
 import dagger.internal.codegen.base.SourceFileGenerator;
 import dagger.internal.codegen.base.UniqueNameSet;
 import dagger.internal.codegen.binding.FrameworkField;
@@ -57,6 +56,7 @@
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
 import dagger.internal.codegen.statistics.DaggerStatisticsCollector;
+import dagger.internal.codegen.writing.InjectionMethods.InjectionSiteMethod;
 import dagger.model.DependencyRequest;
 import java.util.Map.Entry;
 import java.util.Optional;
@@ -68,7 +68,7 @@
 /**
  * Generates {@link MembersInjector} implementations from {@link MembersInjectionBinding} instances.
  */
-final class MembersInjectorGenerator extends SourceFileGenerator<MembersInjectionBinding> {
+public final class MembersInjectorGenerator extends SourceFileGenerator<MembersInjectionBinding> {
   private final DaggerTypes types;
   private final DaggerElements elements;
   private final DaggerStatisticsCollector statisticsCollector;
diff --git a/java/dagger/internal/codegen/MembersInjectorProviderCreationExpression.java b/java/dagger/internal/codegen/writing/MembersInjectorProviderCreationExpression.java
similarity index 94%
rename from java/dagger/internal/codegen/MembersInjectorProviderCreationExpression.java
rename to java/dagger/internal/codegen/writing/MembersInjectorProviderCreationExpression.java
index a478e9496..57c7d8b64 100644
--- a/java/dagger/internal/codegen/MembersInjectorProviderCreationExpression.java
+++ b/java/dagger/internal/codegen/writing/MembersInjectorProviderCreationExpression.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.collect.Iterables.getOnlyElement;
@@ -24,8 +24,8 @@
 
 import com.google.auto.common.MoreTypes;
 import com.squareup.javapoet.CodeBlock;
-import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
 import dagger.internal.codegen.binding.ProvisionBinding;
+import dagger.internal.codegen.writing.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
 import javax.lang.model.type.TypeMirror;
 
 /** A {@code Provider<MembersInjector<Foo>>} creation expression. */
diff --git a/java/dagger/internal/codegen/MethodBindingExpression.java b/java/dagger/internal/codegen/writing/MethodBindingExpression.java
similarity index 98%
rename from java/dagger/internal/codegen/MethodBindingExpression.java
rename to java/dagger/internal/codegen/writing/MethodBindingExpression.java
index 8a8554b95..7f82d04c2 100644
--- a/java/dagger/internal/codegen/MethodBindingExpression.java
+++ b/java/dagger/internal/codegen/writing/MethodBindingExpression.java
@@ -14,10 +14,10 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkNotNull;
-import static dagger.internal.codegen.ComponentImplementation.FieldSpecKind.PRIVATE_METHOD_SCOPED_FIELD;
+import static dagger.internal.codegen.writing.ComponentImplementation.FieldSpecKind.PRIVATE_METHOD_SCOPED_FIELD;
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.VOLATILE;
 
diff --git a/java/dagger/internal/codegen/ModuleConstructorProxyGenerator.java b/java/dagger/internal/codegen/writing/ModuleConstructorProxyGenerator.java
similarity index 91%
rename from java/dagger/internal/codegen/ModuleConstructorProxyGenerator.java
rename to java/dagger/internal/codegen/writing/ModuleConstructorProxyGenerator.java
index df484cbd9..a3d8ae951 100644
--- a/java/dagger/internal/codegen/ModuleConstructorProxyGenerator.java
+++ b/java/dagger/internal/codegen/writing/ModuleConstructorProxyGenerator.java
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.squareup.javapoet.MethodSpec.constructorBuilder;
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
 import static com.squareup.javapoet.TypeSpec.classBuilder;
-import static dagger.internal.codegen.ModuleProxies.nonPublicNullaryConstructor;
 import static dagger.internal.codegen.binding.ModuleKind.checkIsModule;
+import static dagger.internal.codegen.writing.ModuleProxies.nonPublicNullaryConstructor;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.PUBLIC;
@@ -39,12 +39,12 @@
 
 /**
  * Generates a {@code public static} method that calls {@code new SomeModule()} for modules that
- * don't have {@linkplain ModuleProxies#nonPublicNullaryConstructor(TypeElement,
- * DaggerElements) publicly accessible constructors}.
+ * don't have {@linkplain ModuleProxies#nonPublicNullaryConstructor(TypeElement, DaggerElements)
+ * publicly accessible constructors}.
  */
 // TODO(dpb): See if this can become a SourceFileGenerator<ModuleDescriptor> instead. Doing so may
 // cause ModuleProcessingStep to defer elements multiple times.
-final class ModuleConstructorProxyGenerator extends SourceFileGenerator<TypeElement> {
+public final class ModuleConstructorProxyGenerator extends SourceFileGenerator<TypeElement> {
   private final DaggerElements elements;
 
   @Inject
diff --git a/java/dagger/internal/codegen/ModuleGenerator.java b/java/dagger/internal/codegen/writing/ModuleGenerator.java
similarity index 91%
rename from java/dagger/internal/codegen/ModuleGenerator.java
rename to java/dagger/internal/codegen/writing/ModuleGenerator.java
index f5caacee3..afd0e997a 100644
--- a/java/dagger/internal/codegen/ModuleGenerator.java
+++ b/java/dagger/internal/codegen/writing/ModuleGenerator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
@@ -25,4 +25,4 @@
 /** Qualifier for a {@link SourceFileGenerator} for modules. */
 @Qualifier
 @Retention(RUNTIME)
-@interface ModuleGenerator {}
+public @interface ModuleGenerator {}
diff --git a/java/dagger/internal/codegen/ModuleProxies.java b/java/dagger/internal/codegen/writing/ModuleProxies.java
similarity index 96%
rename from java/dagger/internal/codegen/ModuleProxies.java
rename to java/dagger/internal/codegen/writing/ModuleProxies.java
index 82fe78584..13c4f222d 100644
--- a/java/dagger/internal/codegen/ModuleProxies.java
+++ b/java/dagger/internal/codegen/writing/ModuleProxies.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static dagger.internal.codegen.langmodel.Accessibility.isElementAccessibleFrom;
 import static javax.lang.model.element.Modifier.ABSTRACT;
@@ -33,7 +33,7 @@
 import javax.lang.model.element.TypeElement;
 
 /** Convenience methods for generating and using module constructor proxy methods. */
-final class ModuleProxies {
+public final class ModuleProxies {
   /** The name of the class that hosts the module constructor proxy method. */
   static ClassName constructorProxyTypeName(TypeElement moduleElement) {
     ModuleKind.checkIsModule(moduleElement);
@@ -69,7 +69,7 @@ static ClassName constructorProxyTypeName(TypeElement moduleElement) {
    * constructor if it's accessible from {@code requestingClass} or else by invoking the
    * constructor's generated proxy method.
    */
-  static CodeBlock newModuleInstance(
+  public static CodeBlock newModuleInstance(
       TypeElement moduleElement, ClassName requestingClass, DaggerElements elements) {
     ModuleKind.checkIsModule(moduleElement);
     String packageName = requestingClass.packageName();
diff --git a/java/dagger/internal/codegen/MultibindingFactoryCreationExpression.java b/java/dagger/internal/codegen/writing/MultibindingFactoryCreationExpression.java
similarity index 95%
rename from java/dagger/internal/codegen/MultibindingFactoryCreationExpression.java
rename to java/dagger/internal/codegen/writing/MultibindingFactoryCreationExpression.java
index a39530eb0..64e008ee1 100644
--- a/java/dagger/internal/codegen/MultibindingFactoryCreationExpression.java
+++ b/java/dagger/internal/codegen/writing/MultibindingFactoryCreationExpression.java
@@ -14,15 +14,15 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
 import com.squareup.javapoet.CodeBlock;
-import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
 import dagger.internal.codegen.binding.BindingRequest;
 import dagger.internal.codegen.binding.ContributionBinding;
 import dagger.internal.codegen.javapoet.CodeBlocks;
+import dagger.internal.codegen.writing.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
 import dagger.model.DependencyRequest;
 
 /** An abstract factory creation expression for multibindings. */
diff --git a/java/dagger/internal/codegen/OptionalBindingExpression.java b/java/dagger/internal/codegen/writing/OptionalBindingExpression.java
similarity index 98%
rename from java/dagger/internal/codegen/OptionalBindingExpression.java
rename to java/dagger/internal/codegen/writing/OptionalBindingExpression.java
index 07e7c283a..4faf3fa6f 100644
--- a/java/dagger/internal/codegen/OptionalBindingExpression.java
+++ b/java/dagger/internal/codegen/writing/OptionalBindingExpression.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.collect.Iterables.getOnlyElement;
 import static dagger.internal.codegen.binding.BindingRequest.bindingRequest;
diff --git a/java/dagger/internal/codegen/OptionalFactories.java b/java/dagger/internal/codegen/writing/OptionalFactories.java
similarity index 98%
rename from java/dagger/internal/codegen/OptionalFactories.java
rename to java/dagger/internal/codegen/writing/OptionalFactories.java
index c3d67264a..2d809633f 100644
--- a/java/dagger/internal/codegen/OptionalFactories.java
+++ b/java/dagger/internal/codegen/writing/OptionalFactories.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.CaseFormat.UPPER_CAMEL;
 import static com.google.common.base.CaseFormat.UPPER_UNDERSCORE;
@@ -24,9 +24,6 @@
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
 import static com.squareup.javapoet.TypeSpec.anonymousClassBuilder;
 import static com.squareup.javapoet.TypeSpec.classBuilder;
-import static dagger.internal.codegen.ComponentImplementation.FieldSpecKind.ABSENT_OPTIONAL_FIELD;
-import static dagger.internal.codegen.ComponentImplementation.MethodSpecKind.ABSENT_OPTIONAL_METHOD;
-import static dagger.internal.codegen.ComponentImplementation.TypeSpecKind.PRESENT_FACTORY;
 import static dagger.internal.codegen.base.RequestKinds.requestTypeName;
 import static dagger.internal.codegen.javapoet.AnnotationSpecs.Suppression.RAWTYPES;
 import static dagger.internal.codegen.javapoet.AnnotationSpecs.Suppression.UNCHECKED;
@@ -34,6 +31,9 @@
 import static dagger.internal.codegen.javapoet.TypeNames.abstractProducerOf;
 import static dagger.internal.codegen.javapoet.TypeNames.listenableFutureOf;
 import static dagger.internal.codegen.javapoet.TypeNames.providerOf;
+import static dagger.internal.codegen.writing.ComponentImplementation.FieldSpecKind.ABSENT_OPTIONAL_FIELD;
+import static dagger.internal.codegen.writing.ComponentImplementation.MethodSpecKind.ABSENT_OPTIONAL_METHOD;
+import static dagger.internal.codegen.writing.ComponentImplementation.TypeSpecKind.PRESENT_FACTORY;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.PUBLIC;
diff --git a/java/dagger/internal/codegen/OptionalFactoryInstanceCreationExpression.java b/java/dagger/internal/codegen/writing/OptionalFactoryInstanceCreationExpression.java
similarity index 94%
rename from java/dagger/internal/codegen/OptionalFactoryInstanceCreationExpression.java
rename to java/dagger/internal/codegen/writing/OptionalFactoryInstanceCreationExpression.java
index 38232cb40..593921ef9 100644
--- a/java/dagger/internal/codegen/OptionalFactoryInstanceCreationExpression.java
+++ b/java/dagger/internal/codegen/writing/OptionalFactoryInstanceCreationExpression.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.collect.Iterables.getOnlyElement;
 import static dagger.internal.codegen.binding.BindingRequest.bindingRequest;
 
 import com.squareup.javapoet.CodeBlock;
-import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
 import dagger.internal.codegen.binding.ContributionBinding;
+import dagger.internal.codegen.writing.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
 
 /**
  * A {@link FrameworkInstanceCreationExpression} for {@link dagger.model.BindingKind#OPTIONAL
diff --git a/java/dagger/internal/codegen/ParentComponent.java b/java/dagger/internal/codegen/writing/ParentComponent.java
similarity index 87%
rename from java/dagger/internal/codegen/ParentComponent.java
rename to java/dagger/internal/codegen/writing/ParentComponent.java
index 2d2b583e4..20b946e35 100644
--- a/java/dagger/internal/codegen/ParentComponent.java
+++ b/java/dagger/internal/codegen/writing/ParentComponent.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
@@ -22,9 +22,9 @@
 import javax.inject.Qualifier;
 
 /**
- * A {@link Qualifier} for bindings that are associated with a component implementation's
- * parent component.
+ * A {@link Qualifier} for bindings that are associated with a component implementation's parent
+ * component.
  */
 @Retention(RUNTIME)
 @Qualifier
-@interface ParentComponent {}
+public @interface ParentComponent {}
diff --git a/java/dagger/internal/codegen/PerComponentImplementation.java b/java/dagger/internal/codegen/writing/PerComponentImplementation.java
similarity index 90%
rename from java/dagger/internal/codegen/PerComponentImplementation.java
rename to java/dagger/internal/codegen/writing/PerComponentImplementation.java
index 5d4ba1807..80888df42 100644
--- a/java/dagger/internal/codegen/PerComponentImplementation.java
+++ b/java/dagger/internal/codegen/writing/PerComponentImplementation.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
@@ -24,4 +24,4 @@
 /** A {@link Scope} that encompasses a single component implementation. */
 @Retention(RUNTIME)
 @Scope
-@interface PerComponentImplementation {}
+public @interface PerComponentImplementation {}
diff --git a/java/dagger/internal/codegen/PerGeneratedFile.java b/java/dagger/internal/codegen/writing/PerGeneratedFile.java
similarity index 92%
rename from java/dagger/internal/codegen/PerGeneratedFile.java
rename to java/dagger/internal/codegen/writing/PerGeneratedFile.java
index c30e67a5e..c1fcaf769 100644
--- a/java/dagger/internal/codegen/PerGeneratedFile.java
+++ b/java/dagger/internal/codegen/writing/PerGeneratedFile.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
@@ -27,4 +27,4 @@
  */
 @Retention(RUNTIME)
 @Scope
-@interface PerGeneratedFile {}
+public @interface PerGeneratedFile {}
diff --git a/java/dagger/internal/codegen/PrivateMethodBindingExpression.java b/java/dagger/internal/codegen/writing/PrivateMethodBindingExpression.java
similarity index 95%
rename from java/dagger/internal/codegen/PrivateMethodBindingExpression.java
rename to java/dagger/internal/codegen/writing/PrivateMethodBindingExpression.java
index 617c6c922..b0f7fa43c 100644
--- a/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/writing/PrivateMethodBindingExpression.java
@@ -14,12 +14,12 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.base.Preconditions.checkState;
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
-import static dagger.internal.codegen.ComponentImplementation.MethodSpecKind.PRIVATE_METHOD;
+import static dagger.internal.codegen.writing.ComponentImplementation.MethodSpecKind.PRIVATE_METHOD;
 import static javax.lang.model.element.Modifier.PRIVATE;
 
 import com.squareup.javapoet.TypeName;
diff --git a/java/dagger/internal/codegen/ProducerCreationExpression.java b/java/dagger/internal/codegen/writing/ProducerCreationExpression.java
similarity index 92%
rename from java/dagger/internal/codegen/ProducerCreationExpression.java
rename to java/dagger/internal/codegen/writing/ProducerCreationExpression.java
index 148ff5356..0d1ccf3b8 100644
--- a/java/dagger/internal/codegen/ProducerCreationExpression.java
+++ b/java/dagger/internal/codegen/writing/ProducerCreationExpression.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 import static dagger.internal.codegen.binding.SourceFiles.generatedClassNameForBinding;
 
 import com.squareup.javapoet.CodeBlock;
-import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
 import dagger.internal.codegen.binding.ContributionBinding;
+import dagger.internal.codegen.writing.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
 
 /**
  * A {@link dagger.producers.Producer} creation expression for a {@link
diff --git a/java/dagger/internal/codegen/ProducerEntryPointView.java b/java/dagger/internal/codegen/writing/ProducerEntryPointView.java
similarity index 94%
rename from java/dagger/internal/codegen/ProducerEntryPointView.java
rename to java/dagger/internal/codegen/writing/ProducerEntryPointView.java
index 06930e45b..c58f4e0bf 100644
--- a/java/dagger/internal/codegen/ProducerEntryPointView.java
+++ b/java/dagger/internal/codegen/writing/ProducerEntryPointView.java
@@ -14,9 +14,9 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
-import static dagger.internal.codegen.ComponentImplementation.FieldSpecKind.FRAMEWORK_FIELD;
+import static dagger.internal.codegen.writing.ComponentImplementation.FieldSpecKind.FRAMEWORK_FIELD;
 import static javax.lang.model.element.Modifier.PRIVATE;
 
 import com.squareup.javapoet.CodeBlock;
@@ -49,7 +49,7 @@
    * Producer} or {@link com.google.common.util.concurrent.ListenableFuture}.
    *
    * <p>This is intended to be a replacement implementation for {@link
-   * BindingExpression#getDependencyExpressionForComponentMethod(ComponentMethodDescriptor,
+   * dagger.internal.codegen.writing.BindingExpression#getDependencyExpressionForComponentMethod(ComponentMethodDescriptor,
    * ComponentImplementation)}, and in cases where {@link Optional#empty()} is returned, callers
    * should call {@code super.getDependencyExpressionForComponentMethod()}.
    */
diff --git a/java/dagger/internal/codegen/ProducerFactoryGenerator.java b/java/dagger/internal/codegen/writing/ProducerFactoryGenerator.java
similarity index 98%
rename from java/dagger/internal/codegen/ProducerFactoryGenerator.java
rename to java/dagger/internal/codegen/writing/ProducerFactoryGenerator.java
index f4d550228..5029204d8 100644
--- a/java/dagger/internal/codegen/ProducerFactoryGenerator.java
+++ b/java/dagger/internal/codegen/writing/ProducerFactoryGenerator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Verify.verifyNotNull;
@@ -22,7 +22,6 @@
 import static com.squareup.javapoet.MethodSpec.constructorBuilder;
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
 import static com.squareup.javapoet.TypeSpec.classBuilder;
-import static dagger.internal.codegen.GwtCompatibility.gwtIncompatibleAnnotation;
 import static dagger.internal.codegen.binding.SourceFiles.bindingTypeElementTypeVariableNames;
 import static dagger.internal.codegen.binding.SourceFiles.generateBindingFieldsForDependencies;
 import static dagger.internal.codegen.binding.SourceFiles.generatedClassNameForBinding;
@@ -39,6 +38,7 @@
 import static dagger.internal.codegen.javapoet.TypeNames.listOf;
 import static dagger.internal.codegen.javapoet.TypeNames.listenableFutureOf;
 import static dagger.internal.codegen.javapoet.TypeNames.producedOf;
+import static dagger.internal.codegen.writing.GwtCompatibility.gwtIncompatibleAnnotation;
 import static java.util.stream.Collectors.joining;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PRIVATE;
@@ -87,7 +87,7 @@
 import javax.lang.model.type.TypeMirror;
 
 /** Generates {@link Producer} implementations from {@link ProductionBinding} instances. */
-final class ProducerFactoryGenerator extends SourceFileGenerator<ProductionBinding> {
+public final class ProducerFactoryGenerator extends SourceFileGenerator<ProductionBinding> {
   private final CompilerOptions compilerOptions;
   private final KeyFactory keyFactory;
 
diff --git a/java/dagger/internal/codegen/ProducerFromProviderCreationExpression.java b/java/dagger/internal/codegen/writing/ProducerFromProviderCreationExpression.java
similarity index 94%
rename from java/dagger/internal/codegen/ProducerFromProviderCreationExpression.java
rename to java/dagger/internal/codegen/writing/ProducerFromProviderCreationExpression.java
index 19a39094b..9b0d4e8ba 100644
--- a/java/dagger/internal/codegen/ProducerFromProviderCreationExpression.java
+++ b/java/dagger/internal/codegen/writing/ProducerFromProviderCreationExpression.java
@@ -14,17 +14,17 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 import static dagger.internal.codegen.binding.BindingRequest.bindingRequest;
 
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
-import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
 import dagger.internal.codegen.binding.ContributionBinding;
 import dagger.internal.codegen.binding.FrameworkType;
 import dagger.internal.codegen.javapoet.TypeNames;
+import dagger.internal.codegen.writing.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
 import dagger.model.RequestKind;
 import dagger.producers.Producer;
 import java.util.Optional;
diff --git a/java/dagger/internal/codegen/ProducerNodeInstanceBindingExpression.java b/java/dagger/internal/codegen/writing/ProducerNodeInstanceBindingExpression.java
similarity index 98%
rename from java/dagger/internal/codegen/ProducerNodeInstanceBindingExpression.java
rename to java/dagger/internal/codegen/writing/ProducerNodeInstanceBindingExpression.java
index a5f0f119a..0d3f7e876 100644
--- a/java/dagger/internal/codegen/ProducerNodeInstanceBindingExpression.java
+++ b/java/dagger/internal/codegen/writing/ProducerNodeInstanceBindingExpression.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
diff --git a/java/dagger/internal/codegen/ProviderInstanceBindingExpression.java b/java/dagger/internal/codegen/writing/ProviderInstanceBindingExpression.java
similarity index 97%
rename from java/dagger/internal/codegen/ProviderInstanceBindingExpression.java
rename to java/dagger/internal/codegen/writing/ProviderInstanceBindingExpression.java
index 9a7c07693..400c6a259 100644
--- a/java/dagger/internal/codegen/ProviderInstanceBindingExpression.java
+++ b/java/dagger/internal/codegen/writing/ProviderInstanceBindingExpression.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import dagger.internal.codegen.binding.ContributionBinding;
 import dagger.internal.codegen.binding.FrameworkType;
diff --git a/java/dagger/internal/codegen/SetBindingExpression.java b/java/dagger/internal/codegen/writing/SetBindingExpression.java
similarity index 99%
rename from java/dagger/internal/codegen/SetBindingExpression.java
rename to java/dagger/internal/codegen/writing/SetBindingExpression.java
index 4aa8b03e3..bce6383c4 100644
--- a/java/dagger/internal/codegen/SetBindingExpression.java
+++ b/java/dagger/internal/codegen/writing/SetBindingExpression.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.collect.Iterables.getOnlyElement;
 import static dagger.internal.codegen.binding.BindingRequest.bindingRequest;
diff --git a/java/dagger/internal/codegen/SetFactoryCreationExpression.java b/java/dagger/internal/codegen/writing/SetFactoryCreationExpression.java
similarity index 98%
rename from java/dagger/internal/codegen/SetFactoryCreationExpression.java
rename to java/dagger/internal/codegen/writing/SetFactoryCreationExpression.java
index f2d1da51c..a4700a9ee 100644
--- a/java/dagger/internal/codegen/SetFactoryCreationExpression.java
+++ b/java/dagger/internal/codegen/writing/SetFactoryCreationExpression.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 import static dagger.internal.codegen.binding.SourceFiles.setFactoryClassName;
diff --git a/java/dagger/internal/codegen/SimpleInvocationBindingExpression.java b/java/dagger/internal/codegen/writing/SimpleInvocationBindingExpression.java
similarity index 96%
rename from java/dagger/internal/codegen/SimpleInvocationBindingExpression.java
rename to java/dagger/internal/codegen/writing/SimpleInvocationBindingExpression.java
index 10e74b0fc..f2062f4e8 100644
--- a/java/dagger/internal/codegen/SimpleInvocationBindingExpression.java
+++ b/java/dagger/internal/codegen/writing/SimpleInvocationBindingExpression.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
diff --git a/java/dagger/internal/codegen/SimpleMethodBindingExpression.java b/java/dagger/internal/codegen/writing/SimpleMethodBindingExpression.java
similarity index 97%
rename from java/dagger/internal/codegen/SimpleMethodBindingExpression.java
rename to java/dagger/internal/codegen/writing/SimpleMethodBindingExpression.java
index 0cf79f0fc..062ec8658 100644
--- a/java/dagger/internal/codegen/SimpleMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/writing/SimpleMethodBindingExpression.java
@@ -14,14 +14,14 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.auto.common.MoreElements.asExecutable;
 import static com.google.common.base.Preconditions.checkArgument;
-import static dagger.internal.codegen.InjectionMethods.ProvisionMethod.requiresInjectionMethod;
 import static dagger.internal.codegen.javapoet.CodeBlocks.toParametersCodeBlock;
 import static dagger.internal.codegen.javapoet.TypeNames.rawTypeName;
 import static dagger.internal.codegen.langmodel.Accessibility.isTypeAccessibleFrom;
+import static dagger.internal.codegen.writing.InjectionMethods.ProvisionMethod.requiresInjectionMethod;
 
 import com.google.auto.common.MoreTypes;
 import com.google.common.collect.ImmutableMap;
@@ -30,13 +30,13 @@
 import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.MethodSpec;
 import com.squareup.javapoet.TypeName;
-import dagger.internal.codegen.InjectionMethods.ProvisionMethod;
 import dagger.internal.codegen.binding.ComponentRequirement;
 import dagger.internal.codegen.binding.ProvisionBinding;
 import dagger.internal.codegen.compileroption.CompilerOptions;
 import dagger.internal.codegen.javapoet.Expression;
 import dagger.internal.codegen.langmodel.DaggerElements;
 import dagger.internal.codegen.langmodel.DaggerTypes;
+import dagger.internal.codegen.writing.InjectionMethods.ProvisionMethod;
 import dagger.model.DependencyRequest;
 import java.util.Optional;
 import java.util.function.Function;
diff --git a/java/dagger/internal/codegen/SubcomponentCreatorBindingExpression.java b/java/dagger/internal/codegen/writing/SubcomponentCreatorBindingExpression.java
similarity index 97%
rename from java/dagger/internal/codegen/SubcomponentCreatorBindingExpression.java
rename to java/dagger/internal/codegen/writing/SubcomponentCreatorBindingExpression.java
index ab39c60ac..3099048e6 100644
--- a/java/dagger/internal/codegen/SubcomponentCreatorBindingExpression.java
+++ b/java/dagger/internal/codegen/writing/SubcomponentCreatorBindingExpression.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import com.squareup.javapoet.ClassName;
 import dagger.internal.codegen.binding.ContributionBinding;
diff --git a/java/dagger/internal/codegen/SubcomponentNames.java b/java/dagger/internal/codegen/writing/SubcomponentNames.java
similarity index 98%
rename from java/dagger/internal/codegen/SubcomponentNames.java
rename to java/dagger/internal/codegen/writing/SubcomponentNames.java
index 5b1ef3768..c9fa902ab 100644
--- a/java/dagger/internal/codegen/SubcomponentNames.java
+++ b/java/dagger/internal/codegen/writing/SubcomponentNames.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static dagger.internal.codegen.extension.DaggerStreams.toImmutableMap;
@@ -45,13 +45,13 @@
  * Holds the unique simple names for all subcomponents, keyed by their {@link ComponentDescriptor}
  * and {@link Key} of the subcomponent builder.
  */
-final class SubcomponentNames {
+public final class SubcomponentNames {
   private static final Splitter QUALIFIED_NAME_SPLITTER = Splitter.on('.');
 
   private final ImmutableMap<ComponentDescriptor, String> namesByDescriptor;
   private final ImmutableMap<Key, ComponentDescriptor> descriptorsByCreatorKey;
 
-  SubcomponentNames(BindingGraph graph, KeyFactory keyFactory) {
+  public SubcomponentNames(BindingGraph graph, KeyFactory keyFactory) {
     this.namesByDescriptor = namesByDescriptor(graph);
     this.descriptorsByCreatorKey = descriptorsByCreatorKey(keyFactory, namesByDescriptor.keySet());
   }
diff --git a/java/dagger/internal/codegen/SwitchingProviders.java b/java/dagger/internal/codegen/writing/SwitchingProviders.java
similarity index 99%
rename from java/dagger/internal/codegen/SwitchingProviders.java
rename to java/dagger/internal/codegen/writing/SwitchingProviders.java
index 6b7ba4c7a..3bbe3e09c 100644
--- a/java/dagger/internal/codegen/SwitchingProviders.java
+++ b/java/dagger/internal/codegen/writing/SwitchingProviders.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.collect.Iterables.getLast;
diff --git a/java/dagger/internal/codegen/TopLevel.java b/java/dagger/internal/codegen/writing/TopLevel.java
similarity index 92%
rename from java/dagger/internal/codegen/TopLevel.java
rename to java/dagger/internal/codegen/writing/TopLevel.java
index 4f456f25a..ce7190745 100644
--- a/java/dagger/internal/codegen/TopLevel.java
+++ b/java/dagger/internal/codegen/writing/TopLevel.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
@@ -26,4 +26,4 @@
  */
 @Retention(RUNTIME)
 @Qualifier
-@interface TopLevel {}
+public @interface TopLevel {}
diff --git a/java/dagger/internal/codegen/UnwrappedMapKeyGenerator.java b/java/dagger/internal/codegen/writing/UnwrappedMapKeyGenerator.java
similarity index 94%
rename from java/dagger/internal/codegen/UnwrappedMapKeyGenerator.java
rename to java/dagger/internal/codegen/writing/UnwrappedMapKeyGenerator.java
index 2b7b02c5b..f07b882b2 100644
--- a/java/dagger/internal/codegen/UnwrappedMapKeyGenerator.java
+++ b/java/dagger/internal/codegen/writing/UnwrappedMapKeyGenerator.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package dagger.internal.codegen;
+package dagger.internal.codegen.writing;
 
 import dagger.MapKey;
 import dagger.internal.codegen.langmodel.DaggerElements;
@@ -53,7 +53,7 @@
  *   }
  * </pre>
  */
-final class UnwrappedMapKeyGenerator extends AnnotationCreatorGenerator {
+public final class UnwrappedMapKeyGenerator extends AnnotationCreatorGenerator {
 
   @Inject
   UnwrappedMapKeyGenerator(Filer filer, DaggerElements elements, SourceVersion sourceVersion) {
diff --git a/javatests/dagger/internal/codegen/BUILD b/javatests/dagger/internal/codegen/BUILD
index d3344662d..86e7b6fc0 100644
--- a/javatests/dagger/internal/codegen/BUILD
+++ b/javatests/dagger/internal/codegen/BUILD
@@ -27,16 +27,16 @@ GenJavaTests(
     javacopts = DOCLINT_HTML_AND_SYNTAX,
     deps = [
         "//java/dagger:core",
-        "//java/dagger/internal/codegen:binding_graph_validation",
         "//java/dagger/internal/codegen:package_info",
         "//java/dagger/internal/codegen:processor",
-        "//java/dagger/internal/codegen:writing",
         "//java/dagger/internal/codegen/base",
         "//java/dagger/internal/codegen/binding",
+        "//java/dagger/internal/codegen/bindinggraphvalidation",
         "//java/dagger/internal/codegen/compileroption",
         "//java/dagger/internal/codegen/javapoet",
         "//java/dagger/internal/codegen/langmodel",
         "//java/dagger/internal/codegen/validation",
+        "//java/dagger/internal/codegen/writing",
         "//java/dagger/model",
         "//java/dagger/model/testing",
         "//java/dagger/producers",
diff --git a/javatests/dagger/internal/codegen/NullableBindingValidationTest.java b/javatests/dagger/internal/codegen/NullableBindingValidationTest.java
index 24d563643..bc0b303d8 100644
--- a/javatests/dagger/internal/codegen/NullableBindingValidationTest.java
+++ b/javatests/dagger/internal/codegen/NullableBindingValidationTest.java
@@ -19,7 +19,7 @@
 import static com.google.testing.compile.CompilationSubject.assertThat;
 import static com.google.testing.compile.Compiler.javac;
 import static dagger.internal.codegen.Compilers.daggerCompiler;
-import static dagger.internal.codegen.NullableBindingValidator.nullableToNonNullable;
+import static dagger.internal.codegen.bindinggraphvalidation.NullableBindingValidator.nullableToNonNullable;
 
 import com.google.testing.compile.Compilation;
 import com.google.testing.compile.JavaFileObjects;
