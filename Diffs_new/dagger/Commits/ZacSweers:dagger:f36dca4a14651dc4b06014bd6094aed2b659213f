diff --git a/java/dagger/MapKey.java b/java/dagger/MapKey.java
index 89307be15..46dbf939b 100644
--- a/java/dagger/MapKey.java
+++ b/java/dagger/MapKey.java
@@ -100,7 +100,7 @@
  * <p>(Note that there must be a class {@code MyMapKeyImpl} that implements {@code MyMapKey} in
  * order to call {@link Map#get(Object)} on the provided map.)
  *
- * @see <a href="https://google.github.io/dagger/multibindings#map-multibindings">Map multibinding</a>
+ * @see <a href="https://dagger.dev/multibindings#map-multibindings">Map multibinding</a>
  */
 @Documented
 @Target(ANNOTATION_TYPE)
diff --git a/java/dagger/Reusable.java b/java/dagger/Reusable.java
index f2419d596..2cb68aa28 100644
--- a/java/dagger/Reusable.java
+++ b/java/dagger/Reusable.java
@@ -29,7 +29,7 @@
  * <p>{@code @Reusable} is useful when you want to limit the number of provisions of a type, but
  * there is no specific lifetime over which there must be only one instance.
  *
- * @see <a href="https://google.github.io/dagger/users-guide#reusable-scope">Reusable Scope</a>
+ * @see <a href="https://dagger.dev/users-guide#reusable-scope">Reusable Scope</a>
  */
 @Documented
 @Beta
diff --git a/java/dagger/android/ContributesAndroidInjector.java b/java/dagger/android/ContributesAndroidInjector.java
index 76492d1fc..5aa9312bd 100644
--- a/java/dagger/android/ContributesAndroidInjector.java
+++ b/java/dagger/android/ContributesAndroidInjector.java
@@ -32,7 +32,7 @@
  * a concrete Android framework type (e.g. {@code FooActivity}, {@code BarFragment}, {@code
  * MyService}, etc). The method should have no parameters.
  *
- * <p>For more information, see <a href="https://google.github.io/dagger/android">the docs</a>
+ * <p>For more information, see <a href="https://dagger.dev/android">the docs</a>
  */
 @Documented
 @Retention(RUNTIME)
diff --git a/java/dagger/android/processor/AndroidMapKeyValidator.java b/java/dagger/android/processor/AndroidMapKeyValidator.java
index 4cdcd2a5c..f6e808ac6 100644
--- a/java/dagger/android/processor/AndroidMapKeyValidator.java
+++ b/java/dagger/android/processor/AndroidMapKeyValidator.java
@@ -131,7 +131,7 @@ private void validateReturnType(ExecutableElement method) {
       messager.printMessage(
           Kind.ERROR,
           String.format(
-              "%s should bind %s, not %s. See https://google.github.io/dagger/android",
+              "%s should bind %s, not %s. See https://dagger.dev/android",
               method, requiredReturnType, returnType),
           method);
     }
diff --git a/java/dagger/grpc/server/README.md b/java/dagger/grpc/server/README.md
index c8d027ccc..5fe8d5c2f 100644
--- a/java/dagger/grpc/server/README.md
+++ b/java/dagger/grpc/server/README.md
@@ -1,10 +1,10 @@
 # Dagger-gRPC on the Server
 
 This package contains the public types used to create gRPC server applications
-using https://google.github.io/dagger.
+using https://dagger.dev.
 
 It is maintained by the Dagger team.
 
 It is in development, and is planned for open-source release as part of Dagger.
 
-See user documentation at https://google.github.io/dagger/grpc.
+See user documentation at https://dagger.dev/grpc.
diff --git a/java/dagger/grpc/server/processor/GrpcServiceProcessor.java b/java/dagger/grpc/server/processor/GrpcServiceProcessor.java
index 58495e2f1..e361fdbde 100644
--- a/java/dagger/grpc/server/processor/GrpcServiceProcessor.java
+++ b/java/dagger/grpc/server/processor/GrpcServiceProcessor.java
@@ -40,7 +40,7 @@
 /**
  * Generates code from types annotated with {@link GrpcService @GrpcService}.
  *
- * @see <a href="https://google.github.io/dagger/grpc">https://google.github.io/dagger/grpc</a>
+ * @see <a href="https://dagger.dev/grpc">https://dagger.dev/grpc</a>
  */
 @AutoService(Processor.class)
 public class GrpcServiceProcessor extends BasicAnnotationProcessor implements ProcessingStep {
diff --git a/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java b/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java
index 3ebc36897..4f06b900a 100644
--- a/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java
+++ b/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java
@@ -256,7 +256,7 @@ private MethodSpec noopSetterMethod(ComponentRequirement requirement) {
           .addAnnotation(Deprecated.class)
           .addJavadoc(
               "@deprecated This module is declared, but an instance is not used in the component. "
-                  + "This method is a no-op. For more, see https://google.github.io/dagger/unused-modules.\n")
+                  + "This method is a no-op. For more, see https://dagger.dev/unused-modules.\n")
           .addStatement("$T.checkNotNull($N)", Preconditions.class, parameter);
       return maybeReturnThis(method);
     }
diff --git a/java/dagger/internal/codegen/DuplicateBindingsValidator.java b/java/dagger/internal/codegen/DuplicateBindingsValidator.java
index c1515e590..3eed45fdb 100644
--- a/java/dagger/internal/codegen/DuplicateBindingsValidator.java
+++ b/java/dagger/internal/codegen/DuplicateBindingsValidator.java
@@ -206,7 +206,7 @@ private void reportExplicitBindingConflictsWithInject(
             .append(formatWithComponentPath(explicitBinding))
             .append(
                 "\nThis condition was never validated before, and will soon be an error. "
-                    + "See https://google.github.io/dagger/conflicting-inject.");
+                    + "See https://dagger.dev/conflicting-inject.");
 
     diagnosticReporter.reportBinding(diagnosticKind, explicitBinding, message.toString());
   }
diff --git a/java/dagger/internal/codegen/SourceFileGenerator.java b/java/dagger/internal/codegen/SourceFileGenerator.java
index 06d230c2a..7dddc2fcd 100644
--- a/java/dagger/internal/codegen/SourceFileGenerator.java
+++ b/java/dagger/internal/codegen/SourceFileGenerator.java
@@ -39,7 +39,7 @@
  * @param <T> The input type from which source is to be generated.
  */
 abstract class SourceFileGenerator<T> {
-  private static final String GENERATED_COMMENTS = "https://google.github.io/dagger";
+  private static final String GENERATED_COMMENTS = "https://dagger.dev";
 
   private final Filer filer;
   private final DaggerElements elements;
diff --git a/java/dagger/model/BindingGraph.java b/java/dagger/model/BindingGraph.java
index ef45f5d3b..748bf3825 100644
--- a/java/dagger/model/BindingGraph.java
+++ b/java/dagger/model/BindingGraph.java
@@ -124,7 +124,7 @@ public final boolean isModuleBindingGraph() {
    * the component, or {@code false} if it is a reachable binding graph, which contains only
    * bindings that are reachable from at least one {@linkplain #entryPointEdges() entry point}.
    *
-   * @see <a href="https://google.github.io/dagger/compiler-options#full-binding-graph-validation">Full binding
+   * @see <a href="https://dagger.dev/compiler-options#full-binding-graph-validation">Full binding
    *     graph validation</a>
    */
   public abstract boolean isFullBindingGraph();
diff --git a/java/dagger/multibindings/ElementsIntoSet.java b/java/dagger/multibindings/ElementsIntoSet.java
index 72cc86d1d..5ed68c675 100644
--- a/java/dagger/multibindings/ElementsIntoSet.java
+++ b/java/dagger/multibindings/ElementsIntoSet.java
@@ -28,7 +28,7 @@
  * Set<T>} produced from the accumulation of values will be immutable. An example use is to provide
  * a default empty set binding, which is otherwise not possible using {@link IntoSet}.
  *
- * @see <a href="https://google.github.io/dagger/multibindings#set-multibindings">Set multibinding</a>
+ * @see <a href="https://dagger.dev/multibindings#set-multibindings">Set multibinding</a>
  */
 @Documented
 @Target(METHOD)
diff --git a/java/dagger/multibindings/IntoMap.java b/java/dagger/multibindings/IntoMap.java
index 3066b5801..d7602297a 100644
--- a/java/dagger/multibindings/IntoMap.java
+++ b/java/dagger/multibindings/IntoMap.java
@@ -29,7 +29,7 @@
  * key/value pair. The {@code Map<K, Provider<V>>} produced from the accumulation of values will be
  * immutable.
  *
- * @see <a href="https://google.github.io/dagger/multibindings#map-multibindings">Map multibinding</a>
+ * @see <a href="https://dagger.dev/multibindings#map-multibindings">Map multibinding</a>
  */
 @Documented
 @Target(METHOD)
diff --git a/java/dagger/multibindings/IntoSet.java b/java/dagger/multibindings/IntoSet.java
index f42860f67..b4fdcc4aa 100644
--- a/java/dagger/multibindings/IntoSet.java
+++ b/java/dagger/multibindings/IntoSet.java
@@ -28,7 +28,7 @@
  * value is contributed to the set. The object graph will pass dependencies to the method as
  * parameters. The {@code Set<T>} produced from the accumulation of values will be immutable.
  *
- * @see <a href="https://google.github.io/dagger/multibindings#set-multibindings">Set multibinding</a>
+ * @see <a href="https://dagger.dev/multibindings#set-multibindings">Set multibinding</a>
  */
 @Documented
 @Target(METHOD)
diff --git a/java/dagger/multibindings/Multibinds.java b/java/dagger/multibindings/Multibinds.java
index 1517b2698..e37b39e9b 100644
--- a/java/dagger/multibindings/Multibinds.java
+++ b/java/dagger/multibindings/Multibinds.java
@@ -48,7 +48,7 @@
  * <p>A given set or map multibinding can be declared any number of times without error. Dagger
  * never implements or calls any {@code @Multibinds} methods.
  *
- * @see <a href="https://google.github.io/dagger/multibindings">Multibindings</a>
+ * @see <a href="https://dagger.dev/multibindings">Multibindings</a>
  */
 @Documented
 @Target(METHOD)
diff --git a/java/dagger/multibindings/package-info.java b/java/dagger/multibindings/package-info.java
index e806d9ec6..d6fe1e1de 100644
--- a/java/dagger/multibindings/package-info.java
+++ b/java/dagger/multibindings/package-info.java
@@ -18,6 +18,6 @@
  * This package contains the API by which Dagger allows you to bind several objects into a
  * collection that can be injected without depending directly on each of the individual bindings.
  *
- * @see <a href="https://google.github.io/dagger/multibindings">Multibindings in the Dagger User's Guide</a>
+ * @see <a href="https://dagger.dev/multibindings">Multibindings in the Dagger User's Guide</a>
  */
 package dagger.multibindings;
diff --git a/java/dagger/package-info.java b/java/dagger/package-info.java
index 99cd44bad..b680a85d6 100644
--- a/java/dagger/package-info.java
+++ b/java/dagger/package-info.java
@@ -15,7 +15,7 @@
  */
 
 /**
- * This package contains the public API for the <a href="https://google.github.io/dagger/">Dagger 2</a> dependency
+ * This package contains the public API for the <a href="https://dagger.dev/">Dagger 2</a> dependency
  * injection framework. By building upon <a href="https://jcp.org/en/jsr/detail?id=330">JSR 330</a>,
  * Dagger 2 provides an annotation-driven API for dependency injection whose implementation is
  * entirely generated at compile time by <a
diff --git a/java/dagger/producers/package-info.java b/java/dagger/producers/package-info.java
index 10185ef19..9693ae9b7 100644
--- a/java/dagger/producers/package-info.java
+++ b/java/dagger/producers/package-info.java
@@ -21,6 +21,6 @@
  * in Java.
  *
  * <p>Extended documentation on Dagger Producers can be found at <a
- * href="https://google.github.io/dagger/producers">https://google.github.io/dagger/producers</a>.
+ * href="https://dagger.dev/producers">https://dagger.dev/producers</a>.
  */
 package dagger.producers;
diff --git a/javatests/dagger/internal/codegen/GeneratedLines.java b/javatests/dagger/internal/codegen/GeneratedLines.java
index 900ac7610..2aa17acd1 100644
--- a/javatests/dagger/internal/codegen/GeneratedLines.java
+++ b/javatests/dagger/internal/codegen/GeneratedLines.java
@@ -27,7 +27,7 @@
   public static final String GENERATED_ANNOTATION =
      "@Generated("
         + "value = \"dagger.internal.codegen.ComponentProcessor\", "
-        + "comments = \"https://google.github.io/dagger\")";
+        + "comments = \"https://dagger.dev\")";
 
   public static final String IMPORT_GENERATED_ANNOTATION =
       isBeforeJava9()
