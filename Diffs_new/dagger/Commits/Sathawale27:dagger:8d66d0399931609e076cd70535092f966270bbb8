diff --git a/java/dagger/internal/codegen/CompilerOptions.java b/java/dagger/internal/codegen/CompilerOptions.java
index e8fb60eeb..b2310e392 100644
--- a/java/dagger/internal/codegen/CompilerOptions.java
+++ b/java/dagger/internal/codegen/CompilerOptions.java
@@ -68,6 +68,8 @@ boolean doCheckForNulls() {
 
   abstract boolean headerCompilation();
 
+  abstract boolean aheadOfTimeComponents();
+
   static Builder builder() {
     return new AutoValue_CompilerOptions.Builder().headerCompilation(false);
   }
@@ -92,6 +94,8 @@ static CompilerOptions create(ProcessingEnvironment processingEnv, DaggerElement
         .warnIfInjectionFactoryNotGeneratedUpstream(
             warnIfInjectionFactoryNotGeneratedUpstreamFeatureStatus(processingEnv)
                 .equals(FeatureStatus.ENABLED))
+        .aheadOfTimeComponents(
+            aheadOfTimeComponentsFeatureStatus(processingEnv).equals(FeatureStatus.ENABLED))
         .build();
   }
 
@@ -119,6 +123,8 @@ Builder ignorePrivateAndStaticInjectionForComponent(
     Builder warnIfInjectionFactoryNotGeneratedUpstream(
         boolean warnIfInjectionFactoryNotGeneratedUpstream);
 
+    Builder aheadOfTimeComponents(boolean aheadOfTimeComponents);
+
     CompilerOptions build();
   }
 
@@ -150,6 +156,8 @@ Builder warnIfInjectionFactoryNotGeneratedUpstream(
   static final String IGNORE_PRIVATE_AND_STATIC_INJECTION_FOR_COMPONENT =
       "dagger.ignorePrivateAndStaticInjectionForComponent";
 
+  static final String AHEAD_OF_TIME_COMPONENTS_KEY = "dagger.experimentalAheadOfTimeComponents";
+
   static final ImmutableSet<String> SUPPORTED_OPTIONS =
       ImmutableSet.of(
           EXPERIMENTAL_ANDROID_MODE,
@@ -160,7 +168,8 @@ Builder warnIfInjectionFactoryNotGeneratedUpstream(
           PRIVATE_MEMBER_VALIDATION_TYPE_KEY,
           STATIC_MEMBER_VALIDATION_TYPE_KEY,
           WARN_IF_INJECTION_FACTORY_NOT_GENERATED_UPSTREAM_KEY,
-          IGNORE_PRIVATE_AND_STATIC_INJECTION_FOR_COMPONENT);
+          IGNORE_PRIVATE_AND_STATIC_INJECTION_FOR_COMPONENT,
+          AHEAD_OF_TIME_COMPONENTS_KEY);
 
   private static FeatureStatus experimentalAndroidModeFeatureStatus(
       ProcessingEnvironment processingEnv) {
@@ -230,6 +239,15 @@ private static FeatureStatus warnIfInjectionFactoryNotGeneratedUpstreamFeatureSt
         EnumSet.allOf(FeatureStatus.class));
   }
 
+  private static FeatureStatus aheadOfTimeComponentsFeatureStatus(
+      ProcessingEnvironment processingEnv) {
+    return valueOf(
+        processingEnv,
+        AHEAD_OF_TIME_COMPONENTS_KEY,
+        FeatureStatus.DISABLED,
+        EnumSet.allOf(FeatureStatus.class));
+  }
+
   private static <T extends Enum<T>> T valueOf(
       ProcessingEnvironment processingEnv, String key, T defaultValue, Set<T> validValues) {
     Map<String, String> options = processingEnv.getOptions();
diff --git a/java/dagger/internal/codegen/KytheBindingGraphFactory.java b/java/dagger/internal/codegen/KytheBindingGraphFactory.java
index 25189bd1b..4b6d1aad1 100644
--- a/java/dagger/internal/codegen/KytheBindingGraphFactory.java
+++ b/java/dagger/internal/codegen/KytheBindingGraphFactory.java
@@ -103,6 +103,7 @@ private static BindingGraphFactory createBindingGraphFactory(
             .scopeCycleValidationType(ValidationType.NONE)
             .warnIfInjectionFactoryNotGeneratedUpstream(false)
             .experimentalAndroidMode(false)
+            .aheadOfTimeComponents(false)
             .build();
 
     BindingFactory bindingFactory =
diff --git a/javatests/dagger/functional/cycle/LongCycleTest.java b/javatests/dagger/functional/cycle/LongCycleTest.java
index 75bfad460..37e5e90fc 100644
--- a/javatests/dagger/functional/cycle/LongCycleTest.java
+++ b/javatests/dagger/functional/cycle/LongCycleTest.java
@@ -44,6 +44,9 @@ public void longCycle() {
   @Test
   public void longCycleHasMoreThanOneInitializeMethod() throws NoSuchMethodException {
     assume().that(System.getProperty("dagger.mode")).isNotEqualTo("ExperimentalAndroidMode");
+    assume()
+        .that(System.getProperty("dagger.mode"))
+        .isNotEqualTo("ExperimentalAndroidModeAndAheadOfTimeComponents");
     DaggerLongCycle_LongCycleComponent.class
         .getDeclaredMethod("initialize2", DaggerLongCycle_LongCycleComponent.Builder.class);
   }
diff --git a/javatests/dagger/functional/subcomponent/SubcomponentTest.java b/javatests/dagger/functional/subcomponent/SubcomponentTest.java
index 84c11f896..73562b8d4 100644
--- a/javatests/dagger/functional/subcomponent/SubcomponentTest.java
+++ b/javatests/dagger/functional/subcomponent/SubcomponentTest.java
@@ -87,6 +87,9 @@ public void multibindingContributions() {
   @Test
   public void unscopedProviders() {
     assume().that(System.getProperty("dagger.mode")).isNotEqualTo("ExperimentalAndroidMode");
+    assume()
+        .that(System.getProperty("dagger.mode"))
+        .isNotEqualTo("ExperimentalAndroidModeAndAheadOfTimeComponents");
     assertThat(parentGetters.getUnscopedTypeProvider())
         .isSameAs(childComponent.getUnscopedTypeProvider());
     assertThat(parentGetters.getUnscopedTypeProvider())
diff --git a/test_defs.bzl b/test_defs.bzl
index cee81b3d9..ee8cb2ade 100644
--- a/test_defs.bzl
+++ b/test_defs.bzl
@@ -16,6 +16,9 @@
 # The key will be appended to the generated test names to ensure uniqueness.
 BUILD_VARIANTS = {
     "ExperimentalAndroidMode": ["-Adagger.experimentalAndroidMode=enabled"],
+    "ExperimentalAheadOfTimeComponents": ["-Adagger.experimentalAheadOfTimeComponents=enabled"],
+    "ExperimentalAndroidModeAndAheadOfTimeComponents": ["-Adagger.experimentalAndroidMode=enabled",
+                                                        "-Adagger.experimentalAheadOfTimeComponents=enabled"],
 }
 
 # TODO(user): split into two functions for functional vs non-functional tests?
@@ -37,9 +40,9 @@ def _GenTests(library_rule_type, test_rule_type, name, srcs, deps, test_only_dep
 
   if functional:
     for (variant_name, extra_lib_javacopts) in BUILD_VARIANTS.items():
-      lib_javacopts = (lib_javacopts or []) + extra_lib_javacopts
+      variant_lib_javacopts = (lib_javacopts or []) + extra_lib_javacopts
       _gen_tests(library_rule_type, test_rule_type, name, srcs, deps, test_only_deps,
-                 plugins, javacopts, lib_javacopts, test_javacopts, variant_name)
+                 plugins, javacopts, variant_lib_javacopts, test_javacopts, variant_name)
 
 def _gen_tests(library_rule_type, test_rule_type, name, srcs, deps, test_only_deps,
                plugins, javacopts, lib_javacopts, test_javacopts, variant_name=None):
