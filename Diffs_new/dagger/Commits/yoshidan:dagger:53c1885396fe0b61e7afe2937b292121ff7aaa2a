diff --git a/compiler/install.sh b/compiler/install.sh
index e69de29bb..63d794a58 100644
--- a/compiler/install.sh
+++ b/compiler/install.sh
@@ -0,0 +1,4 @@
+JAVA_HOME="/Applications/Android Studio.app/Contents/jre/jdk/Contents/Home"
+mvn clean source:jar install
+cp -R -f /Users/01005901/.m2/repository/com/google/dagger/dagger-compiler/2.9-p2 /Applications/Android\ Studio.app/Contents/gradle/m2repository/com/google/dagger/dagger-compiler
+
diff --git a/compiler/pom.xml b/compiler/pom.xml
index f97ddc83e..22be18e7c 100644
--- a/compiler/pom.xml
+++ b/compiler/pom.xml
@@ -28,17 +28,18 @@
   <description>
     Tools to generate Dagger injection and module adapters from annotated code and validate them.
   </description>
+  <version>2.9-p2</version>
 
   <dependencies>
     <dependency>
       <groupId>${project.groupId}</groupId>
       <artifactId>dagger</artifactId>
-      <version>${project.version}</version>
+      <version>2.9</version>
     </dependency>
     <dependency>
       <groupId>${project.groupId}</groupId>
       <artifactId>dagger-producers</artifactId>
-      <version>${project.version}</version>
+      <version>2.9</version>
     </dependency>
     <dependency>
       <groupId>com.google.auto</groupId>
@@ -80,7 +81,7 @@
       <groupId>${project.groupId}</groupId>
       <artifactId>dagger</artifactId>
       <classifier>tests</classifier>
-      <version>${project.version}</version>
+      <version>2.9</version>
       <scope>test</scope>
     </dependency>
     <dependency>
@@ -149,7 +150,7 @@
           <cloneProjectsTo>${project.build.directory}/it</cloneProjectsTo>
           <cloneClean>true</cloneClean>
           <profiles>
-            <profile>!sonatype-oss-release</profile>
+           <profile>!sonatype-oss-release</profile>
           </profiles>
           <pomIncludes>
             <pomInclude>*/pom.xml</pomInclude>
@@ -158,7 +159,7 @@
           <streamLogs>true</streamLogs>
         </configuration>
         <executions>
-          <execution>
+         <execution>
             <id>integration-test</id>
             <goals>
               <goal>install</goal>
diff --git a/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java b/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java
index d80cac503..add578edb 100644
--- a/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java
+++ b/compiler/src/main/java/dagger/internal/codegen/MembersInjectionBinding.java
@@ -219,23 +219,22 @@ MembersInjectionBinding forInjectedType(
         final DeclaredType type = currentType.get();
         ancestors.add(MoreElements.asType(type.asElement()));
         for (Element enclosedElement : type.asElement().getEnclosedElements()) {
-          if(shouldBeInjected(enclosedElement)) {
-            Optional<InjectionSite> maybeInjectionSite =
-                    injectionSiteVisitor.visit(enclosedElement, type);
-            if (maybeInjectionSite.isPresent()) {
-              InjectionSite injectionSite = maybeInjectionSite.get();
-              if (shouldBeInjected(injectionSite.element(), overriddenMethodMap)) {
-                injectionSites.add(injectionSite);
+
+              if (shouldBeInjected(enclosedElement, overriddenMethodMap,type)) {
+                Optional<InjectionSite> maybeInjectionSite =
+                        injectionSiteVisitor.visit(enclosedElement, type);
+                if (maybeInjectionSite.isPresent()) {
+                  injectionSites.add(maybeInjectionSite.get());
+                }
               }
-              if (injectionSite.kind().equals(InjectionSite.Kind.METHOD)) {
+              if (enclosedElement.getKind() == ElementKind.METHOD) {
                 ExecutableElement injectionSiteMethod =
-                        MoreElements.asExecutable(injectionSite.element());
+                        MoreElements.asExecutable(enclosedElement);
                 overriddenMethodMap.put(
                         injectionSiteMethod.getSimpleName().toString(), injectionSiteMethod);
               }
-            }
+
           }
-        }
       }
       return ImmutableSortedSet.copyOf(
           // supertypes before subtypes
@@ -251,14 +250,14 @@ MembersInjectionBinding forInjectedType(
           injectionSites);
     }
 
-    private boolean shouldBeInjected(Element injectionSite){
-      return isAnnotationPresent(injectionSite, Inject.class)
-              && !injectionSite.getModifiers().contains(PRIVATE)
-              && !injectionSite.getModifiers().contains(STATIC);
-    }
-
     private boolean shouldBeInjected(
-            Element injectionSite, SetMultimap<String, ExecutableElement> overriddenMethodMap) {
+            Element injectionSite, SetMultimap<String, ExecutableElement> overriddenMethodMap,DeclaredType type) {
+
+      if(!isAnnotationPresent(injectionSite, Inject.class)
+              || injectionSite.getModifiers().contains(PRIVATE)
+              || injectionSite.getModifiers().contains(STATIC)){
+        return false;
+      }
 
       if (injectionSite.getKind().isField()) { // Inject all fields (self and ancestors)
         return true;
@@ -272,8 +271,12 @@ private boolean shouldBeInjected(
       TypeElement injectionSiteType = MoreElements.asType(injectionSite.getEnclosingElement());
       for (ExecutableElement method :
           overriddenMethodMap.get(injectionSiteMethod.getSimpleName().toString())) {
-        if (elements.overrides(method, injectionSiteMethod, injectionSiteType)) {
-          return false;
+
+        Optional<InjectionSite> maybeInjectionSite = injectionSiteVisitor.visit(method, type);
+        if (maybeInjectionSite.isPresent()) {
+          if (elements.overrides(method, injectionSiteMethod, injectionSiteType)) {
+            return false;
+          }
         }
       }
       return true;
