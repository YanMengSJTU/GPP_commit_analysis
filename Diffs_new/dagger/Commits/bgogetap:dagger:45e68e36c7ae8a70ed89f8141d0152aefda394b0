diff --git a/java/dagger/internal/codegen/AbstractComponentWriter.java b/java/dagger/internal/codegen/AbstractComponentWriter.java
index 87783e133..84b999ddd 100644
--- a/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -1211,13 +1211,11 @@ private CodeBlock initializeFactoryForSyntheticOptionalBinding(ContributionBindi
 
   private CodeBlock getRequestFulfillment(FrameworkDependency frameworkDependency) {
     return getBindingExpression(frameworkDependency.bindingKey())
-        .requestFulfillment()
         .getSnippetForFrameworkDependency(frameworkDependency, name);
   }
 
   private CodeBlock getRequestFulfillment(DependencyRequest dependencyRequest) {
     return getBindingExpression(dependencyRequest.bindingKey())
-        .requestFulfillment()
         .getSnippetForDependencyRequest(dependencyRequest, name);
   }
 }
diff --git a/java/dagger/internal/codegen/BindingExpression.java b/java/dagger/internal/codegen/BindingExpression.java
index 39d44078a..c271b2f4b 100644
--- a/java/dagger/internal/codegen/BindingExpression.java
+++ b/java/dagger/internal/codegen/BindingExpression.java
@@ -20,8 +20,6 @@
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.base.Preconditions.checkState;
 import static com.google.common.base.Verify.verify;
-import static dagger.internal.codegen.ContributionBinding.Kind.INJECTION;
-import static dagger.internal.codegen.ContributionBinding.Kind.PROVISION;
 import static dagger.internal.codegen.MemberSelect.staticMemberSelect;
 
 import com.google.common.collect.ImmutableList;
@@ -34,10 +32,9 @@
 import java.util.function.BiConsumer;
 
 /** The code expressions to declare, initialize, and/or access a binding in a component. */
-final class BindingExpression {
-  private final BindingKey bindingKey;
+final class BindingExpression extends RequestFulfillment {
   private final Optional<FieldSpec> fieldSpec;
-  private final RequestFulfillment requestFulfillment;
+  private final RequestFulfillment requestFulfillmentDelegate;
   private Optional<CodeBlock> initializeDeferredBindingFields = Optional.empty();
   private Optional<CodeBlock> initializeField = Optional.empty();
   private InitializationState fieldInitializationState = InitializationState.UNINITIALIZED;
@@ -76,7 +73,6 @@
     BindingExpression forField(ResolvedBindings resolvedBindings, FieldSpec fieldSpec) {
       MemberSelect memberSelect = MemberSelect.localField(componentName, fieldSpec.name);
       return new BindingExpression(
-          resolvedBindings.bindingKey(),
           createRequestFulfillment(resolvedBindings, memberSelect),
           Optional.of(fieldSpec));
     }
@@ -87,7 +83,6 @@ BindingExpression forField(ResolvedBindings resolvedBindings, FieldSpec fieldSpe
       return memberSelect.map(
           value ->
               new BindingExpression(
-                  resolvedBindings.bindingKey(),
                   createRequestFulfillment(resolvedBindings, value),
                   Optional.empty()));
     }
@@ -141,17 +136,12 @@ private RequestFulfillment createRequestFulfillment(
   }
 
   private BindingExpression(
-      BindingKey bindingKey, RequestFulfillment requestFulfillment, Optional<FieldSpec> fieldSpec) {
-    this.bindingKey = bindingKey;
-    this.requestFulfillment = requestFulfillment;
+      RequestFulfillment requestFulfillmentDelegate, Optional<FieldSpec> fieldSpec) {
+    super(requestFulfillmentDelegate.bindingKey());
+    this.requestFulfillmentDelegate = requestFulfillmentDelegate;
     this.fieldSpec = fieldSpec;
   }
 
-  /** Returns the binding key associated with this binding expression. */
-  BindingKey bindingKey() {
-    return bindingKey;
-  }
-
   /** Returns true if this binding expression has a field spec. */
   boolean hasFieldSpec() {
     return fieldSpec.isPresent();
@@ -163,9 +153,16 @@ String fieldName() {
     return fieldSpec.get().name;
   }
 
-  /** Returns a request fulfillment for satisfying dependency requests for this expression. */
-  RequestFulfillment requestFulfillment() {
-    return requestFulfillment;
+  @Override
+  CodeBlock getSnippetForDependencyRequest(DependencyRequest request, ClassName requestingClass) {
+    return requestFulfillmentDelegate.getSnippetForDependencyRequest(request, requestingClass);
+  }
+
+  @Override
+  CodeBlock getSnippetForFrameworkDependency(
+      FrameworkDependency frameworkDependency, ClassName requestingClass) {
+    return requestFulfillmentDelegate.getSnippetForFrameworkDependency(
+        frameworkDependency, requestingClass);
   }
 
   /** Returns this field's field spec, if it has one. */
diff --git a/java/dagger/internal/codegen/SetBindingRequestFulfillment.java b/java/dagger/internal/codegen/SetBindingRequestFulfillment.java
index 9fe7c7962..f5368e52e 100644
--- a/java/dagger/internal/codegen/SetBindingRequestFulfillment.java
+++ b/java/dagger/internal/codegen/SetBindingRequestFulfillment.java
@@ -90,7 +90,6 @@ private CodeBlock getRequestFulfillmentForDependency(
       DependencyRequest dependency, ClassName requestingClass) {
     return hasBindingExpressions
         .getBindingExpression(dependency.bindingKey())
-        .requestFulfillment()
         .getSnippetForDependencyRequest(dependency, requestingClass);
   }
 
diff --git a/java/dagger/internal/codegen/SimpleMethodRequestFulfillment.java b/java/dagger/internal/codegen/SimpleMethodRequestFulfillment.java
index f5187bef9..bb17c1504 100644
--- a/java/dagger/internal/codegen/SimpleMethodRequestFulfillment.java
+++ b/java/dagger/internal/codegen/SimpleMethodRequestFulfillment.java
@@ -118,7 +118,6 @@ private CodeBlock invokeProxyMethod(ClassName requestingClass) {
   private CodeBlock getDependencySnippet(ClassName requestingClass, DependencyRequest request) {
     return hasBindingExpressions
         .getBindingExpression(request.bindingKey())
-        .requestFulfillment()
         .getSnippetForDependencyRequest(request, requestingClass);
   }
 }
