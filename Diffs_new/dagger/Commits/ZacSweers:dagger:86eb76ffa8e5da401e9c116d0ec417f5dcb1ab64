diff --git a/java/dagger/internal/codegen/binding/BindingGraphConverter.java b/java/dagger/internal/codegen/binding/BindingGraphConverter.java
index 9add1250d..245c1a555 100644
--- a/java/dagger/internal/codegen/binding/BindingGraphConverter.java
+++ b/java/dagger/internal/codegen/binding/BindingGraphConverter.java
@@ -41,6 +41,8 @@
 import dagger.model.DependencyRequest;
 import java.util.ArrayDeque;
 import java.util.Deque;
+import java.util.HashSet;
+import java.util.Set;
 import javax.inject.Inject;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
@@ -105,6 +107,7 @@ private ComponentNode rootComponentNode(Network<Node, Edge> network) {
     private final BindingDeclarationFormatter bindingDeclarationFormatter;
     private final MutableNetwork<Node, Edge> network =
         NetworkBuilder.directed().allowsParallelEdges(true).allowsSelfLoops(true).build();
+    private final Set<BindingNode> bindings = new HashSet<>();
 
     /** Constructs a converter for a root (component, not subcomponent) binding graph. */
     private Converter(BindingDeclarationFormatter bindingDeclarationFormatter) {
@@ -152,9 +155,11 @@ private void visitComponent(BindingGraph graph, ComponentNode parentComponent) {
 
       for (ResolvedBindings resolvedBindings : graph.resolvedBindings()) {
         for (BindingNode binding : bindingNodes(resolvedBindings)) {
-          network.addNode(binding);
-          for (DependencyRequest dependencyRequest : binding.dependencies()) {
-            addDependencyEdges(binding, dependencyRequest);
+          if (bindings.add(binding)) {
+            network.addNode(binding);
+            for (DependencyRequest dependencyRequest : binding.dependencies()) {
+              addDependencyEdges(binding, dependencyRequest);
+            }
           }
           if (binding.kind().equals(SUBCOMPONENT_CREATOR)
               && binding.componentPath().equals(currentComponent.componentPath())) {
