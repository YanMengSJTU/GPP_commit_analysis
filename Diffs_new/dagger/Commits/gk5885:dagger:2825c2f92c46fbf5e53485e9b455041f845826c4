diff --git a/dagger-1-migration.md b/dagger-1-migration.md
index 555867714..2fcef355b 100644
--- a/dagger-1-migration.md
+++ b/dagger-1-migration.md
@@ -19,7 +19,7 @@ Dagger 2 [modules][Module] are very similar to Dagger 1 modules, but reduce much
 
 ### Module Properties
 
-The primary differences between the two stem from the fact that _graph validation_ is no longer performed on a per-module basis. In Dagger 1 terms, Dagger 2 modules are all declared as `complete = false` and `library = true`, but since that is most permissive for validation those `complete`, `library` and `addsTo` can just be removed when migrating.
+The primary differences between the two stem from the fact that _graph validation_ is no longer performed on a per-module basis. In Dagger 1 terms, Dagger 2 modules are all declared as `complete = false` and `library = true`, but since that is most permissive for validation `complete`, `library` and `addsTo` can just be removed when migrating.
 
 Modules are no longer the mechanism for declaring which types can be accessed by calling code.  So, the `injects` and `staticInjections` properties can be removed as well.
 
@@ -80,13 +80,13 @@ interface MyComponent {
 }
 ```
 
-More detail about defining component methods can be found in the [`Component`][Component] javadocs.
+More detail about defining components can be found in the [`Component`][Component] javadocs.
 
 ### Instantiating the component
 
 The final task is to instantiate the component implementation. The Dagger 2 annotation processor generates implementations that have the same name as the component interface prepended with `Dagger`. For the `MyComponent` interface, the generated component is named `DaggerMyComponent`.
 
-For component implementations that don't have module _instances_ to pass, instantiating the component is as simple as invoking the `create()` method. In this example, `ModuleThree` was passed as an instance, so the component's builder is used instead.
+For component implementations that don't have module _instances_ to pass, instantiating the component is as simple as invoking the `create()` method. In this example, `ModuleThree` is passed as an instance, so the component's builder is used instead.
 
 ```java
 MyComponent myComponent = DaggerMyComponent.builder()
