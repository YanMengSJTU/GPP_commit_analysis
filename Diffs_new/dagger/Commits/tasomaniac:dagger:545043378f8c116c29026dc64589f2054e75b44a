diff --git a/index.md b/index.md
index cc4c41fad..5a1d314cb 100644
--- a/index.md
+++ b/index.md
@@ -111,10 +111,10 @@ interface CoffeeShop {
 }
 ```
 
-The implementation has the same name as the interface prefixed with `Dagger_`.  Obtain an instance by invoking the `builder()` method on that implementation and use the returned [builder](http://en.wikipedia.org/wiki/Builder_pattern) to set dependencies and `build()` a new instance.
+The implementation has the same name as the interface prefixed with `Dagger`.  Obtain an instance by invoking the `builder()` method on that implementation and use the returned [builder](http://en.wikipedia.org/wiki/Builder_pattern) to set dependencies and `build()` a new instance.
 
 ```java
-CoffeeShop coffeeShop = Dagger_CoffeeShop.builder()
+CoffeeShop coffeeShop = DaggerCoffeeShop.builder()
     .dripCoffeeModule(new DripCoffeeModule())
     .build();
 ```
@@ -122,7 +122,7 @@ CoffeeShop coffeeShop = Dagger_CoffeeShop.builder()
 Any module with an accessible default constructor can be elided as the builder will construct an instance automatically if none is set.  If all dependencies can be constructed in that manner, the generated implementation will also have a `create()` method that can be used to get a new instance without having to deal with the builder.
 
 ```java
-CoffeeShop coffeeShop = Dagger_CoffeeShop.create();
+CoffeeShop coffeeShop = DaggerCoffeeShop.create();
 ```
 
 Now, our `CoffeeApp` can simply use the Dagger-generated implementation of `CoffeeShop` to get a fully-injected `CoffeeMaker`.
@@ -130,7 +130,7 @@ Now, our `CoffeeApp` can simply use the Dagger-generated implementation of `Coff
 ```java
 public class CoffeeApp {
   public static void main(String[] args) {
-    CoffeeShop coffeeShop = Dagger_CoffeeShop.create();
+    CoffeeShop coffeeShop = DaggerCoffeeShop.create();
     coffeeShop.maker().brew();
   }
 }
