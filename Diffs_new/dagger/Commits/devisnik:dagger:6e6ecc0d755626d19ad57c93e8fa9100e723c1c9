diff --git a/java/dagger/internal/codegen/BindingExpression.java b/java/dagger/internal/codegen/BindingExpression.java
index efc6560ce..46a74b0cb 100644
--- a/java/dagger/internal/codegen/BindingExpression.java
+++ b/java/dagger/internal/codegen/BindingExpression.java
@@ -169,6 +169,40 @@ private BindingExpression create(
         return frameworkInstanceBindingExpression;
       }
 
+      BindingExpression inlineBindingExpression =
+          inlineProvisionBindingExpression(frameworkInstanceBindingExpression);
+
+      // TODO(user): Implement private methods for scoped bindings
+      if (compilerOptions.experimentalAndroidMode() && !resolvedBindings.scope().isPresent()) {
+        switch (resolvedBindings.contributionBinding().bindingKind()) {
+          // TODO(user): Consider using PrivateMethodBindingExpression for other/all BEs?
+          case SYNTHETIC_MULTIBOUND_SET:
+          case SYNTHETIC_MULTIBOUND_MAP:
+            // TODO(user): Consider also inlining SET and Map INSTANCE bindings with only 1 dep.
+            if (resolvedBindings.contributionBinding().dependencies().isEmpty()) {
+              // Empty multibindings should just inline static singleton instances.
+              break;
+            }
+            // fall through
+          case INJECTION:
+          case PROVISION:
+            return new PrivateMethodBindingExpression(
+                resolvedBindings,
+                componentName,
+                generatedComponentModel,
+                inlineBindingExpression,
+                types,
+                elements);
+          default:
+            break;
+        }
+      }
+      return inlineBindingExpression;
+    }
+
+    private BindingExpression inlineProvisionBindingExpression(
+        FrameworkInstanceBindingExpression frameworkInstanceBindingExpression) {
+      ResolvedBindings resolvedBindings = frameworkInstanceBindingExpression.resolvedBindings();
       BindingExpression bindingExpression =
           new ProviderOrProducerBindingExpression(
               frameworkInstanceBindingExpression,
@@ -241,25 +275,15 @@ private BindingExpression create(
         case INJECTION:
         case PROVISION:
           if (!provisionBinding.scope().isPresent()) {
-            BindingExpression simpleMethodBindingExpression =
-                new SimpleMethodBindingExpression(
-                    compilerOptions,
-                    provisionBinding,
-                    bindingExpression,
-                    componentBindingExpressions,
-                    generatedComponentModel,
-                    componentRequirementFields,
-                    types,
-                    elements);
-            return compilerOptions.experimentalAndroidMode()
-                ? new PrivateMethodBindingExpression(
-                    resolvedBindings,
-                    componentName,
-                    generatedComponentModel,
-                    simpleMethodBindingExpression,
-                    types,
-                    elements)
-                : simpleMethodBindingExpression;
+            return new SimpleMethodBindingExpression(
+                compilerOptions,
+                provisionBinding,
+                bindingExpression,
+                componentBindingExpressions,
+                generatedComponentModel,
+                componentRequirementFields,
+                types,
+                elements);
           }
           // fall through
 
diff --git a/java/dagger/internal/codegen/DaggerTypes.java b/java/dagger/internal/codegen/DaggerTypes.java
index dc7b386ae..3eb7e12d8 100644
--- a/java/dagger/internal/codegen/DaggerTypes.java
+++ b/java/dagger/internal/codegen/DaggerTypes.java
@@ -22,12 +22,9 @@
 
 import com.google.auto.common.MoreElements;
 import com.google.auto.common.MoreTypes;
-import dagger.Lazy;
-import dagger.producers.Producer;
 import java.util.List;
 import java.util.Optional;
 import javax.annotation.processing.ProcessingEnvironment;
-import javax.inject.Provider;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.ArrayType;
@@ -119,26 +116,6 @@ DeclaredType rewrapType(TypeMirror type, Class<?> wrappingClass) {
     }
   }
 
-  /** Returns a type mirror for {@code Lazy<T>} given a type mirror for {@code T}. */
-  TypeMirror lazyOf(TypeMirror typeMirror) {
-    return wrapType(typeMirror, Lazy.class);
-  }
-
-  /** Returns a type mirror for {@code Provider<T>} given a type mirror for {@code T}. */
-  TypeMirror providerOf(TypeMirror typeMirror) {
-    return wrapType(typeMirror, Provider.class);
-  }
-
-  /** Returns a type mirror for {@code Producer<T>} given a type mirror for {@code T}. */
-  TypeMirror producerOf(TypeMirror typeMirror) {
-    return wrapType(typeMirror, Producer.class);
-  }
-
-  /** Returns a type mirror for {@code Provider<Lazy<T>>} given a type mirror for {@code T}. */
-  TypeMirror providerOfLazyOf(TypeMirror typeMirror) {
-    return providerOf(lazyOf(typeMirror));
-  }
-
   // Implementation of Types methods, delegating to types.
 
   @Override
diff --git a/java/dagger/internal/codegen/PrivateMethodBindingExpression.java b/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
index 8a77093b4..2b14fbe00 100644
--- a/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
@@ -139,27 +139,9 @@ private void createMethod(String name, DependencyRequest.Kind requestKind) {
 
   /** Returns the return type for the dependency request. */
   private TypeMirror returnType(DependencyRequest.Kind requestKind) {
-    // TODO(user): use DR.Kind.type() when that CL is submitted.
-    switch (requestKind) {
-      case INSTANCE:
-        return binding.contributesPrimitiveType()
-            ? asExecutable(binding.bindingElement().get()).getReturnType()
-            : instanceType();
-      case LAZY:
-        return accessibleType(types.lazyOf(instanceType()));
-      case PROVIDER_OF_LAZY:
-        return accessibleType(types.providerOfLazyOf(instanceType()));
-      case PROVIDER:
-        return accessibleType(types.providerOf(instanceType()));
-      case PRODUCER:
-        return accessibleType(types.producerOf(instanceType()));
-      default:
-        throw new AssertionError("Unhandled DependencyRequest: " + requestKind);
-    }
-  }
-
-  private TypeMirror instanceType() {
-    return accessibleType(binding.contributedType());
+    return binding.contributesPrimitiveType() && requestKind.equals(DependencyRequest.Kind.INSTANCE)
+        ? asExecutable(binding.bindingElement().get()).getReturnType()
+        : accessibleType(requestKind.type(binding.contributedType(), types));
   }
 
   /** Returns the method body for the dependency request. */
@@ -179,6 +161,7 @@ private CodeBlock methodBody(DependencyRequest.Kind requestKind) {
             getDependencyExpression(DependencyRequest.Kind.PROVIDER, componentName).codeBlock());
       case INSTANCE:
       case PRODUCER:
+      case FUTURE:
         return delegate.getDependencyExpression(requestKind, componentName).codeBlock();
       default:
         throw new AssertionError("Unhandled DependencyRequest: " + requestKind);
@@ -193,7 +176,7 @@ private TypeSpec providerTypeSpec() {
             methodBuilder("get")
                 .addAnnotation(Override.class)
                 .addModifiers(PUBLIC)
-                .returns(TypeName.get(instanceType()))
+                .returns(TypeName.get(accessibleType(binding.contributedType())))
                 .addStatement(
                     "return $L",
                     getDependencyExpression(DependencyRequest.Kind.INSTANCE, componentName)
diff --git a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
index 91c9fc3aa..e00a7858a 100644
--- a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
+++ b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
@@ -468,6 +468,7 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "",
                 "import com.google.common.collect.ImmutableSet;",
                 "import dagger.internal.Preconditions;",
+                "import java.util.Set;",
                 "import javax.annotation.Generated;",
                 "import javax.inject.Provider;",
                 "",
@@ -492,10 +493,13 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "        ParentModule.contribution(), " + NPE_FROM_PROVIDES_METHOD + ");",
                 "  }",
                 "",
+                "  private Set<Object> getSetOfObjectInstance() {",
+                "    return ImmutableSet.<Object>of(getObjectInstance2());",
+                "  }",
+                "",
                 "  private Object getObjectInstance() {",
                 "    return Preconditions.checkNotNull(",
-                "        parentModule.reliesOnMultibinding(",
-                "            ImmutableSet.<Object>of(getObjectInstance2())),",
+                "        parentModule.reliesOnMultibinding(getSetOfObjectInstance()),",
                 "        " + NPE_FROM_PROVIDES_METHOD + ");",
                 "  }",
                 "",
@@ -550,11 +554,14 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "          ChildModule.contribution(), " + NPE_FROM_PROVIDES_METHOD + ");",
                 "    }",
                 "",
+                "    private Set<Object> getSetOfObjectInstance() {",
+                "      return ImmutableSet.<Object>of(getObjectInstance2(), getObjectInstance3());",
+                "    }",
+                "",
                 "    private Object getObjectInstance() {",
                 "      return Preconditions.checkNotNull(",
                 "          DaggerTestComponent.this.parentModule.reliesOnMultibinding(",
-                "              ImmutableSet.<Object>of(",
-                "                  getObjectInstance2(), getObjectInstance3())),",
+                "              getSetOfObjectInstance()),",
                 "          " + NPE_FROM_PROVIDES_METHOD + ");",
                 "    }",
                 "",
diff --git a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index c8490473d..ae1c95c5c 100644
--- a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -133,7 +133,7 @@ public void mapBindingsWithEnumKey() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                "import dagger.internal.MapProviderFactory;",
+                "import com.google.common.collect.ImmutableMap;",
                 "import dagger.internal.Preconditions;",
                 "import java.util.Map;",
                 "import javax.annotation.Generated;",
@@ -145,9 +145,6 @@ public void mapBindingsWithEnumKey() {
                 "",
                 "  private MapModuleTwo mapModuleTwo;",
                 "",
-                "  private Provider<Map<PathEnum, Provider<Handler>>>",
-                "      mapOfPathEnumAndProviderOfHandlerProvider;",
-                "",
                 "  private DaggerTestComponent(Builder builder) {",
                 "    initialize(builder);",
                 "  }",
@@ -160,7 +157,7 @@ public void mapBindingsWithEnumKey() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private Handler getMapOfPathEnumAndProviderOfHandlerInstance() {",
+                "  private Handler getMapOfPathEnumAndProviderOfHandlerInstance2() {",
                 "    return Preconditions.checkNotNull(",
                 "        mapModuleOne.provideAdminHandler(),",
                 "        " + NPE_FROM_PROVIDES_METHOD + ");",
@@ -170,12 +167,12 @@ public void mapBindingsWithEnumKey() {
                 "    return new Provider<Handler>() {",
                 "      @Override",
                 "      public Handler get() {",
-                "        return getMapOfPathEnumAndProviderOfHandlerInstance();",
+                "        return getMapOfPathEnumAndProviderOfHandlerInstance2();",
                 "      }",
                 "    };",
                 "  }",
                 "",
-                "  private Handler getMapOfPathEnumAndProviderOfHandlerInstance2() {",
+                "  private Handler getMapOfPathEnumAndProviderOfHandlerInstance3() {",
                 "    return Preconditions.checkNotNull(",
                 "        mapModuleTwo.provideLoginHandler(),",
                 "        " + NPE_FROM_PROVIDES_METHOD + ");",
@@ -185,25 +182,32 @@ public void mapBindingsWithEnumKey() {
                 "    return new Provider<Handler>() {",
                 "      @Override",
                 "      public Handler get() {",
-                "        return getMapOfPathEnumAndProviderOfHandlerInstance2();",
+                "        return getMapOfPathEnumAndProviderOfHandlerInstance3();",
                 "      }",
                 "    };",
                 "  }",
                 "",
+                "  private Map<PathEnum, Provider<Handler>>",
+                "        getMapOfPathEnumAndProviderOfHandlerInstance() {",
+                "    return ImmutableMap.<PathEnum, Provider<Handler>>of(",
+                "        PathEnum.ADMIN, getMapOfPathEnumAndProviderOfHandlerProvider(),",
+                "        PathEnum.LOGIN, getMapOfPathEnumAndProviderOfHandlerProvider2());",
+                "  }",
+                "",
                 "  @SuppressWarnings(\"unchecked\")",
                 "  private void initialize(final Builder builder) {",
                 "    this.mapModuleOne = builder.mapModuleOne;",
                 "    this.mapModuleTwo = builder.mapModuleTwo;",
-                "    this.mapOfPathEnumAndProviderOfHandlerProvider =",
-                "        MapProviderFactory.<PathEnum, Handler>builder(2)",
-                "            .put(PathEnum.ADMIN, getMapOfPathEnumAndProviderOfHandlerProvider())",
-                "            .put(PathEnum.LOGIN, getMapOfPathEnumAndProviderOfHandlerProvider2())",
-                "            .build();",
                 "  }",
                 "",
                 "  @Override",
                 "  public Provider<Map<PathEnum, Provider<Handler>>> dispatcher() {",
-                "    return mapOfPathEnumAndProviderOfHandlerProvider;",
+                "    return new Provider<Map<PathEnum, Provider<Handler>>>() {",
+                "      @Override",
+                "      public Map<PathEnum, Provider<Handler>> get() {",
+                "        return getMapOfPathEnumAndProviderOfHandlerInstance();",
+                "      }",
+                "    };",
                 "  }",
                 "",
                 "  public static final class Builder {",
@@ -678,7 +682,7 @@ public void mapBindingsWithStringKey() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                "import dagger.internal.MapProviderFactory;",
+                "import com.google.common.collect.ImmutableMap;",
                 "import dagger.internal.Preconditions;",
                 "import java.util.Map;",
                 "import javax.annotation.Generated;",
@@ -690,9 +694,6 @@ public void mapBindingsWithStringKey() {
                 "",
                 "  private MapModuleTwo mapModuleTwo;",
                 "",
-                "  private Provider<Map<String, Provider<Handler>>>",
-                "      mapOfStringAndProviderOfHandlerProvider;",
-                "",
                 "  private DaggerTestComponent(Builder builder) {",
                 "    initialize(builder);",
                 "  }",
@@ -705,7 +706,7 @@ public void mapBindingsWithStringKey() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private Handler getMapOfStringAndProviderOfHandlerInstance() {",
+                "  private Handler getMapOfStringAndProviderOfHandlerInstance2() {",
                 "    return Preconditions.checkNotNull(",
                 "        mapModuleOne.provideAdminHandler(),",
                 "        " + NPE_FROM_PROVIDES_METHOD + ");",
@@ -715,12 +716,12 @@ public void mapBindingsWithStringKey() {
                 "    return new Provider<Handler>() {",
                 "      @Override",
                 "      public Handler get() {",
-                "        return getMapOfStringAndProviderOfHandlerInstance();",
+                "        return getMapOfStringAndProviderOfHandlerInstance2();",
                 "      }",
                 "    };",
                 "  }",
                 "",
-                "  private Handler getMapOfStringAndProviderOfHandlerInstance2() {",
+                "  private Handler getMapOfStringAndProviderOfHandlerInstance3() {",
                 "    return Preconditions.checkNotNull(",
                 "        mapModuleTwo.provideLoginHandler(),",
                 "        " + NPE_FROM_PROVIDES_METHOD + ");",
@@ -730,25 +731,32 @@ public void mapBindingsWithStringKey() {
                 "    return new Provider<Handler>() {",
                 "      @Override",
                 "      public Handler get() {",
-                "        return getMapOfStringAndProviderOfHandlerInstance2();",
+                "        return getMapOfStringAndProviderOfHandlerInstance3();",
                 "      }",
                 "    };",
                 "  }",
                 "",
+                "  private Map<String, Provider<Handler>>",
+                "        getMapOfStringAndProviderOfHandlerInstance() {",
+                "    return ImmutableMap.<String, Provider<Handler>>of(",
+                "        \"Admin\", getMapOfStringAndProviderOfHandlerProvider(),",
+                "        \"Login\", getMapOfStringAndProviderOfHandlerProvider2());",
+                "  }",
+                "",
                 "  @SuppressWarnings(\"unchecked\")",
                 "  private void initialize(final Builder builder) {",
                 "    this.mapModuleOne = builder.mapModuleOne;",
                 "    this.mapModuleTwo = builder.mapModuleTwo;",
-                "    this.mapOfStringAndProviderOfHandlerProvider =",
-                "        MapProviderFactory.<String, Handler>builder(2)",
-                "            .put(\"Admin\", getMapOfStringAndProviderOfHandlerProvider())",
-                "            .put(\"Login\", getMapOfStringAndProviderOfHandlerProvider2())",
-                "            .build();",
                 "  }",
                 "",
                 "  @Override",
                 "  public Provider<Map<String, Provider<Handler>>> dispatcher() {",
-                "    return mapOfStringAndProviderOfHandlerProvider;",
+                "    return new Provider<Map<String, Provider<Handler>>>() {",
+                "      @Override",
+                "      public Map<String, Provider<Handler>> get() {",
+                "        return getMapOfStringAndProviderOfHandlerInstance();",
+                "      }",
+                "    };",
                 "  }",
                 "",
                 "  public static final class Builder {",
@@ -954,7 +962,7 @@ public void mapBindingsWithWrappedKey() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                "import dagger.internal.MapProviderFactory;",
+                "import com.google.common.collect.ImmutableMap;",
                 "import dagger.internal.Preconditions;",
                 "import java.util.Map;",
                 "import javax.annotation.Generated;",
@@ -966,9 +974,6 @@ public void mapBindingsWithWrappedKey() {
                 "",
                 "  private MapModuleTwo mapModuleTwo;",
                 "",
-                "  private Provider<Map<WrappedClassKey, Provider<Handler>>>",
-                "      mapOfWrappedClassKeyAndProviderOfHandlerProvider;",
-                "",
                 "  private DaggerTestComponent(Builder builder) {",
                 "    initialize(builder);",
                 "  }",
@@ -981,7 +986,7 @@ public void mapBindingsWithWrappedKey() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private Handler getMapOfWrappedClassKeyAndProviderOfHandlerInstance() {",
+                "  private Handler getMapOfWrappedClassKeyAndProviderOfHandlerInstance2() {",
                 "    return Preconditions.checkNotNull(",
                 "        mapModuleOne.provideAdminHandler(),",
                 "        " + NPE_FROM_PROVIDES_METHOD + ");",
@@ -992,12 +997,12 @@ public void mapBindingsWithWrappedKey() {
                 "    return new Provider<Handler>() {",
                 "      @Override",
                 "      public Handler get() {",
-                "        return getMapOfWrappedClassKeyAndProviderOfHandlerInstance();",
+                "        return getMapOfWrappedClassKeyAndProviderOfHandlerInstance2();",
                 "      }",
                 "    };",
                 "  }",
                 "",
-                "  private Handler getMapOfWrappedClassKeyAndProviderOfHandlerInstance2() {",
+                "  private Handler getMapOfWrappedClassKeyAndProviderOfHandlerInstance3() {",
                 "    return Preconditions.checkNotNull(",
                 "        mapModuleTwo.provideLoginHandler(),",
                 "        " + NPE_FROM_PROVIDES_METHOD + ");",
@@ -1008,29 +1013,34 @@ public void mapBindingsWithWrappedKey() {
                 "    return new Provider<Handler>() {",
                 "      @Override",
                 "      public Handler get() {",
-                "        return getMapOfWrappedClassKeyAndProviderOfHandlerInstance2();",
+                "        return getMapOfWrappedClassKeyAndProviderOfHandlerInstance3();",
                 "      }",
                 "    };",
                 "  }",
                 "",
+                "  private Map<WrappedClassKey, Provider<Handler>>",
+                "      getMapOfWrappedClassKeyAndProviderOfHandlerInstance() {",
+                "    return ImmutableMap.<WrappedClassKey, Provider<Handler>>of(",
+                "        WrappedClassKeyCreator.createWrappedClassKey(Integer.class),",
+                "        getMapOfWrappedClassKeyAndProviderOfHandlerProvider(),",
+                "        WrappedClassKeyCreator.createWrappedClassKey(Long.class),",
+                "        getMapOfWrappedClassKeyAndProviderOfHandlerProvider2());",
+                "  }",
+                "",
                 "  @SuppressWarnings(\"unchecked\")",
                 "  private void initialize(final Builder builder) {",
                 "    this.mapModuleOne = builder.mapModuleOne;",
                 "    this.mapModuleTwo = builder.mapModuleTwo;",
-                "    this.mapOfWrappedClassKeyAndProviderOfHandlerProvider =",
-                "        MapProviderFactory.<WrappedClassKey, Handler>builder(2)",
-                "            .put(",
-                "                WrappedClassKeyCreator.createWrappedClassKey(Integer.class),",
-                "                getMapOfWrappedClassKeyAndProviderOfHandlerProvider())",
-                "            .put(",
-                "                WrappedClassKeyCreator.createWrappedClassKey(Long.class),",
-                "                getMapOfWrappedClassKeyAndProviderOfHandlerProvider2())",
-                "            .build();",
                 "  }",
                 "",
                 "  @Override",
                 "  public Provider<Map<WrappedClassKey, Provider<Handler>>> dispatcher() {",
-                "    return mapOfWrappedClassKeyAndProviderOfHandlerProvider;",
+                "    return new Provider<Map<WrappedClassKey, Provider<Handler>>>() {",
+                "      @Override",
+                "      public Map<WrappedClassKey, Provider<Handler>> get() {",
+                "        return getMapOfWrappedClassKeyAndProviderOfHandlerInstance();",
+                "      }",
+                "    };",
                 "  }",
                 "",
                 "  public static final class Builder {",
@@ -1240,7 +1250,7 @@ public void mapBindingsWithNonProviderValue() {
                 "test.DaggerTestComponent",
                 "package test;",
                 "",
-                "import dagger.internal.MapFactory;",
+                "import com.google.common.collect.ImmutableMap;",
                 "import dagger.internal.Preconditions;",
                 "import java.util.Map;",
                 "import javax.annotation.Generated;",
@@ -1252,8 +1262,6 @@ public void mapBindingsWithNonProviderValue() {
                 "",
                 "  private MapModuleTwo mapModuleTwo;",
                 "",
-                "  private Provider<Map<PathEnum, Handler>> mapOfPathEnumAndHandlerProvider;",
-                "",
                 "  private DaggerTestComponent(Builder builder) {",
                 "    initialize(builder);",
                 "  }",
@@ -1272,44 +1280,32 @@ public void mapBindingsWithNonProviderValue() {
                 "        " + NPE_FROM_PROVIDES_METHOD + ");",
                 "  }",
                 "",
-                "  private Provider<Handler> getMapOfPathEnumAndProviderOfHandlerProvider() {",
-                "    return new Provider<Handler>() {",
-                "      @Override",
-                "      public Handler get() {",
-                "        return getMapOfPathEnumAndProviderOfHandlerInstance();",
-                "      }",
-                "    };",
-                "  }",
-                "",
                 "  private Handler getMapOfPathEnumAndProviderOfHandlerInstance2() {",
                 "    return Preconditions.checkNotNull(",
                 "        mapModuleTwo.provideLoginHandler(),",
                 "        " + NPE_FROM_PROVIDES_METHOD + ");",
                 "  }",
                 "",
-                "  private Provider<Handler> getMapOfPathEnumAndProviderOfHandlerProvider2() {",
-                "    return new Provider<Handler>() {",
-                "      @Override",
-                "      public Handler get() {",
-                "        return getMapOfPathEnumAndProviderOfHandlerInstance2();",
-                "      }",
-                "    };",
+                "  private Map<PathEnum, Handler> getMapOfPathEnumAndHandlerInstance() {",
+                "    return ImmutableMap.<PathEnum, Handler>of(",
+                "        PathEnum.ADMIN, getMapOfPathEnumAndProviderOfHandlerInstance(),",
+                "        PathEnum.LOGIN, getMapOfPathEnumAndProviderOfHandlerInstance2());",
                 "  }",
                 "",
                 "  @SuppressWarnings(\"unchecked\")",
                 "  private void initialize(final Builder builder) {",
                 "    this.mapModuleOne = builder.mapModuleOne;",
                 "    this.mapModuleTwo = builder.mapModuleTwo;",
-                "    this.mapOfPathEnumAndHandlerProvider =",
-                "        MapFactory.<PathEnum, Handler>builder(2)",
-                "            .put(PathEnum.ADMIN, getMapOfPathEnumAndProviderOfHandlerProvider())",
-                "            .put(PathEnum.LOGIN, getMapOfPathEnumAndProviderOfHandlerProvider2())",
-                "            .build();",
                 "  }",
                 "",
                 "  @Override",
                 "  public Provider<Map<PathEnum, Handler>> dispatcher() {",
-                "    return mapOfPathEnumAndHandlerProvider;",
+                "    return new Provider<Map<PathEnum, Handler>>() {",
+                "      @Override",
+                "      public Map<PathEnum, Handler> get() {",
+                "        return getMapOfPathEnumAndHandlerInstance();",
+                "      }",
+                "    };",
                 "  }",
                 "",
                 "  public static final class Builder {",
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
index ee22f4534..79006cb76 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
@@ -310,19 +310,23 @@ public void inaccessible() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private Set getSetOfInaccessible2Instance() {",
+                "  private Set getSetOfInaccessible2Instance2() {",
                 "    return Preconditions.checkNotNull(",
                 "        TestModule_EmptySetFactory.proxyEmptySet(),",
                 "        " + NPE_FROM_PROVIDES + ");",
                 "  }",
                 "",
+                "  private Set getSetOfInaccessible2Instance() {",
+                "    return SetBuilder.newSetBuilder(1)",
+                "        .addAll(getSetOfInaccessible2Instance2())",
+                "        .build();",
+                "  }",
+                "",
                 "  @Override",
                 "  public UsesInaccessible usesInaccessible() {",
                 "    return UsesInaccessible_Factory.newUsesInaccessible(",
                 "        (Set) Collections.emptySet(),",
-                "        (Set) SetBuilder.newSetBuilder(1)",
-                "            .addAll(getSetOfInaccessible2Instance())",
-                "            .build());",
+                "        (Set) getSetOfInaccessible2Instance());",
                 "  }",
                 "",
                 "  public static final class Builder {",
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
index a552437af..bb980c6a3 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
@@ -331,17 +331,21 @@ public void inaccessible() {
                 "    return new Builder().build();",
                 "  }",
                 "",
-                "  private Set getSetOfInaccessible2Instance() {",
+                "  private Set getSetOfInaccessible2Instance2() {",
                 "    return Preconditions.checkNotNull(",
                 "        TestModule_EmptySetFactory.proxyEmptySet(),",
                 "        " + NPE_FROM_PROVIDES + ");",
                 "  }",
                 "",
+                "  private Set getSetOfInaccessible2Instance() {",
+                "    return ImmutableSet.copyOf(getSetOfInaccessible2Instance2());",
+                "  }",
+                "",
                 "  @Override",
                 "  public UsesInaccessible usesInaccessible() {",
                 "    return UsesInaccessible_Factory.newUsesInaccessible(",
                 "        (Set) ImmutableSet.of(),",
-                "        (Set) ImmutableSet.copyOf(getSetOfInaccessible2Instance()));",
+                "        (Set) getSetOfInaccessible2Instance());",
                 "  }",
                 "",
                 "  public static final class Builder {",
