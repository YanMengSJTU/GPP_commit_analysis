diff --git a/java/dagger/example/spi/BindingGraphVisualizer.java b/java/dagger/example/spi/BindingGraphVisualizer.java
index bdaff2bf9..43a8ca009 100644
--- a/java/dagger/example/spi/BindingGraphVisualizer.java
+++ b/java/dagger/example/spi/BindingGraphVisualizer.java
@@ -38,7 +38,7 @@
 import dagger.model.BindingKind;
 import dagger.model.ComponentPath;
 import dagger.spi.BindingGraphPlugin;
-import dagger.spi.ValidationItem;
+import dagger.spi.DiagnosticReporter;
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.util.ArrayList;
@@ -91,7 +91,7 @@ public void initFiler(Filer filer) {
           "/set312/12");
 
   @Override
-  public List<ValidationItem> visitGraph(BindingGraph bindingGraph) {
+  public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticReporter) {
     TypeElement componentElement =
         bindingGraph.rootComponentNode().componentPath().currentComponent();
     DotGraph graph = new NodesGraph(bindingGraph).graph();
@@ -110,7 +110,6 @@ public void initFiler(Filer filer) {
     } catch (IOException e) {
       throw new RuntimeException(e);
     }
-    return ImmutableList.of();
   }
 
   private abstract static class Indented {
diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index 609ae1654..e3748bfa2 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -284,13 +284,13 @@ java_library(
         "ComponentHjarProcessingStep.java",
         "ComponentProcessingStep.java",
         "ComponentProcessor.java",
+        "DiagnosticReporterFactory.java",
         "InjectBindingRegistryImpl.java",
         "InjectProcessingStep.java",
         "MapKeyProcessingStep.java",
         "ModuleProcessingStep.java",
         "ProcessingOptions.java",
         "ProductionExecutorModuleProcessingStep.java",
-        "SpiDiagnosticReporter.java",
     ],
     plugins = CODEGEN_PLUGINS,
     deps = CODEGEN_DEPS + [
diff --git a/java/dagger/internal/codegen/ComponentProcessingStep.java b/java/dagger/internal/codegen/ComponentProcessingStep.java
index 3e63f3a10..247bda1d5 100644
--- a/java/dagger/internal/codegen/ComponentProcessingStep.java
+++ b/java/dagger/internal/codegen/ComponentProcessingStep.java
@@ -17,28 +17,24 @@
 package dagger.internal.codegen;
 
 import static javax.lang.model.util.ElementFilter.typesIn;
-import static javax.tools.Diagnostic.Kind.ERROR;
 
 import com.google.auto.common.BasicAnnotationProcessor.ProcessingStep;
 import com.google.auto.common.MoreElements;
 import com.google.common.base.Predicates;
 import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableListMultimap;
 import com.google.common.collect.ImmutableSet;
-import com.google.common.collect.ListMultimap;
 import com.google.common.collect.Maps;
-import com.google.common.collect.MultimapBuilder;
 import com.google.common.collect.Multimaps;
 import com.google.common.collect.SetMultimap;
 import dagger.Component;
 import dagger.Subcomponent;
 import dagger.internal.codegen.ComponentValidator.ComponentValidationReport;
+import dagger.internal.codegen.DiagnosticReporterFactory.ErrorCountingDiagnosticReporter;
 import dagger.producers.ProductionComponent;
 import dagger.producers.ProductionSubcomponent;
 import dagger.spi.BindingGraphPlugin;
-import dagger.spi.ValidationItem;
+import dagger.spi.DiagnosticReporter;
 import java.lang.annotation.Annotation;
-import java.util.Collection;
 import java.util.Map;
 import java.util.Set;
 import javax.annotation.processing.Messager;
@@ -60,7 +56,7 @@
   private final BindingGraphFactory bindingGraphFactory;
   private final ComponentGenerator componentGenerator;
   private final ImmutableList<BindingGraphPlugin> bindingGraphPlugins;
-  private final SpiDiagnosticReporter spiDiagnosticReporter;
+  private final DiagnosticReporterFactory diagnosticReporterFactory;
 
   @Inject
   ComponentProcessingStep(
@@ -73,7 +69,7 @@
       BindingGraphFactory bindingGraphFactory,
       ComponentGenerator componentGenerator,
       ImmutableList<BindingGraphPlugin> bindingGraphPlugins,
-      SpiDiagnosticReporter spiDiagnosticReporter) {
+      DiagnosticReporterFactory diagnosticReporterFactory) {
     this.messager = messager;
     this.componentValidator = componentValidator;
     this.builderValidator = builderValidator;
@@ -83,7 +79,7 @@
     this.bindingGraphFactory = bindingGraphFactory;
     this.componentGenerator = componentGenerator;
     this.bindingGraphPlugins = bindingGraphPlugins;
-    this.spiDiagnosticReporter = spiDiagnosticReporter;
+    this.diagnosticReporterFactory = diagnosticReporterFactory;
   }
 
   @Override
@@ -154,9 +150,8 @@
         }
 
         if (!bindingGraphPlugins.isEmpty()) {
-          Collection<ValidationItem> items =
-              executePlugins(BindingGraphConverter.convert(bindingGraph));
-          if (items.stream().anyMatch(item -> item.diagnosticKind().equals(ERROR))) {
+          boolean reportedErrors = executePlugins(BindingGraphConverter.convert(bindingGraph));
+          if (reportedErrors) {
             continue;
           }
         }
@@ -170,25 +165,21 @@
   }
 
   /**
-   * Calls {@link BindingGraphPlugin#visitGraph(dagger.model.BindingGraph)} on each of {@code
-   * bindingGraphPlugins} and reports any extra validation return from the plugins to the {@link
-   * Messager}.
+   * Calls {@link BindingGraphPlugin#visitGraph(dagger.model.BindingGraph, DiagnosticReporter)} on
+   * each of {@code bindingGraphPlugins}.
    *
-   * @return every {@link ValidationItem} returned by the plugins
+   * @return {@code true} if any plugin reported errors
    */
-  private Collection<ValidationItem> executePlugins(dagger.model.BindingGraph graph) {
+  private boolean executePlugins(dagger.model.BindingGraph graph) {
     // TODO(ronshapiro): Should we validate the uniqueness of plugin names?
-    ListMultimap<String, ValidationItem> items =
-        MultimapBuilder.linkedHashKeys().arrayListValues().build();
+    boolean reportedErrors = false;
     for (BindingGraphPlugin plugin : bindingGraphPlugins) {
-      items.putAll(plugin.pluginName(), plugin.visitGraph(graph));
+      ErrorCountingDiagnosticReporter reporter = diagnosticReporterFactory.reporter(graph, plugin);
+      plugin.visitGraph(graph, reporter);
+      reportedErrors |= reporter.reportedErrors();
     }
 
-    if (!items.isEmpty()) {
-      spiDiagnosticReporter.report(graph, ImmutableListMultimap.copyOf(items));
-    }
-
-    return items.values();
+    return reportedErrors;
   }
 
   private void generateComponent(BindingGraph bindingGraph) {
diff --git a/java/dagger/internal/codegen/SpiDiagnosticReporter.java b/java/dagger/internal/codegen/DiagnosticReporterFactory.java
similarity index 50%
rename from java/dagger/internal/codegen/SpiDiagnosticReporter.java
rename to java/dagger/internal/codegen/DiagnosticReporterFactory.java
index 6d4aaae50..5fe2b85e5 100644
--- a/java/dagger/internal/codegen/SpiDiagnosticReporter.java
+++ b/java/dagger/internal/codegen/DiagnosticReporterFactory.java
@@ -17,138 +17,164 @@
 package dagger.internal.codegen;
 
 import static com.google.common.base.Preconditions.checkArgument;
+import static com.google.common.collect.Lists.asList;
 import static dagger.internal.codegen.DaggerGraphs.shortestPath;
+import static javax.tools.Diagnostic.Kind.ERROR;
 
 import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableListMultimap;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Sets;
+import com.google.errorprone.annotations.CanIgnoreReturnValue;
+import com.google.errorprone.annotations.FormatMethod;
+import dagger.model.BindingGraph;
 import dagger.model.BindingGraph.BindingNode;
 import dagger.model.BindingGraph.ComponentNode;
 import dagger.model.BindingGraph.DependencyEdge;
 import dagger.model.BindingGraph.Edge;
 import dagger.model.BindingGraph.Node;
 import dagger.model.DependencyRequest;
-import dagger.spi.ValidationItem;
-import java.util.Map.Entry;
-import java.util.Optional;
+import dagger.spi.BindingGraphPlugin;
+import dagger.spi.DiagnosticReporter;
 import java.util.Set;
 import javax.annotation.processing.Messager;
 import javax.inject.Inject;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
+import javax.tools.Diagnostic;
 
-/**
- * Reports the validation items from {@link
- * dagger.spi.BindingGraphPlugin#visitGraph(dagger.model.BindingGraph) binding graph plugins} and
- * reports them to the {@link Messager}.
- */
+/** A factory for {@link DiagnosticReporter}s. */
 // TODO(ronshapiro): If multiple plugins print errors on the same node/edge, should we condense the
 // messages and only print the dependency trace once?
-final class SpiDiagnosticReporter {
+final class DiagnosticReporterFactory {
   private final Messager messager;
   private final DependencyRequestFormatter dependencyRequestFormatter;
 
   @Inject
-  SpiDiagnosticReporter(
-      Messager messager,
-      DependencyRequestFormatter dependencyRequestFormatter) {
+  DiagnosticReporterFactory(
+      Messager messager, DependencyRequestFormatter dependencyRequestFormatter) {
     this.messager = messager;
     this.dependencyRequestFormatter = dependencyRequestFormatter;
 
   }
 
-  /** Reports the {@link ValidationItem}s to the {@link Messager}. */
-  void report(
-      dagger.model.BindingGraph graph, ImmutableListMultimap<String, ValidationItem> items) {
-    for (Entry<String, ValidationItem> entry : items.entries()) {
-      new Worker(graph, entry.getKey(), entry.getValue()).report();
-    }
+  /** Creates a reporter for a binding graph and a plugin. */
+  ErrorCountingDiagnosticReporter reporter(BindingGraph graph, BindingGraphPlugin plugin) {
+    return new ErrorCountingDiagnosticReporter(graph, plugin.pluginName());
   }
 
-  // TODO(dpb): Consider making one Worker per graph/plugin, and calling
-  // items.forEach(worker::report) instead of Worker per item
-  private class Worker {
+  /** A {@link DiagnosticReporter} that can tell how many errors were reported. */
+  class ErrorCountingDiagnosticReporter implements DiagnosticReporter {
     private final dagger.model.BindingGraph graph;
     private final String plugin;
-    private final ValidationItem item;
     private final TypeElement rootComponent;
+    private boolean reportedErrors;
 
-    Worker(dagger.model.BindingGraph graph, String plugin, ValidationItem item) {
+    ErrorCountingDiagnosticReporter(dagger.model.BindingGraph graph, String plugin) {
       this.graph = graph;
       this.plugin = plugin;
-      this.item = item;
       this.rootComponent = graph.rootComponentNode().componentPath().currentComponent();
     }
 
-    /**
-     * Reports the supplied diagnostic with extra context for users to the {@link Messager}. For
-     * example, if a {@link ValidationItem} is reported on a {@link BindingNode}, a dependency trace
-     * will be appended to the diagnostic message.
-     */
-    private void report() {
-      if (isInstance(item.node(), ComponentNode.class)) {
-        reportComponent((ComponentNode) item.node().get());
-      } else if (isInstance(item.node(), BindingNode.class)) {
-        reportBinding((BindingNode) item.node().get());
-      } else if (isInstance(item.edge(), DependencyEdge.class)) {
-        reportDependencyRequest((DependencyEdge) item.edge().get());
-      } else {
-        throw new AssertionError("Unknown ValidationItem kind: " + item);
-      }
+    /** Returns whether any errors were reported. */
+    boolean reportedErrors() {
+      return reportedErrors;
     }
 
-    private void reportComponent(ComponentNode node) {
-      CharSequence message = messageBuilder();
-      if (!node.componentPath().currentComponent().equals(rootComponent)) {
-        message = appendComponentPath(message, node);
+    @Override
+    public void reportComponent(
+        Diagnostic.Kind diagnosticKind, ComponentNode componentNode, String messageFormat) {
+      StringBuilder messageBuilder = messagePrefix(messageFormat);
+      if (!componentNode.componentPath().currentComponent().equals(rootComponent)) {
+        appendComponentPath(messageBuilder, componentNode);
       }
-      messager.printMessage(item.diagnosticKind(), message, rootComponent);
+      printMessage(diagnosticKind, messageBuilder, rootComponent);
+    }
+
+    @Override
+    @FormatMethod
+    public void reportComponent(
+        Diagnostic.Kind diagnosticKind,
+        ComponentNode componentNode,
+        String messageFormat,
+        Object firstArg,
+        Object... moreArgs) {
+      reportComponent(
+          diagnosticKind, componentNode, formatMessage(messageFormat, firstArg, moreArgs));
     }
 
-    private void reportBinding(BindingNode targetNode) {
+    @Override
+    public void reportBinding(
+        Diagnostic.Kind diagnosticKind, BindingNode bindingNode, String message) {
       // TODO(ronshapiro): should this also include the binding element?
-      reportAtEntryPointsWithDependencyTrace(targetNode, messageBuilder());
+      reportAtEntryPointsWithDependencyTrace(diagnosticKind, messagePrefix(message), bindingNode);
     }
 
-    private void reportDependencyRequest(DependencyEdge edge) {
-      StringBuilder message =
-          messageBuilder()
+    @Override
+    public void reportBinding(
+        Diagnostic.Kind diagnosticKind,
+        BindingNode bindingNode,
+        String messageFormat,
+        Object firstArg,
+        Object... moreArgs) {
+      reportBinding(diagnosticKind, bindingNode, formatMessage(messageFormat, firstArg, moreArgs));
+    }
+
+    @Override
+    public void reportDependency(
+        Diagnostic.Kind diagnosticKind, DependencyEdge dependencyEdge, String message) {
+      StringBuilder messageBuilder =
+          messagePrefix(message)
               .append('\n')
-              .append(dependencyRequestFormatter.format(edge.dependencyRequest()));
+              .append(dependencyRequestFormatter.format(dependencyEdge.dependencyRequest()));
 
-      if (edge.isEntryPoint()) {
-        printAtEntryPoint(edge, message);
+      if (dependencyEdge.isEntryPoint()) {
+        printAtEntryPoint(diagnosticKind, messageBuilder, dependencyEdge);
       } else {
-        BindingNode sourceNode = (BindingNode) graph.incidentNodes(edge).source();
-        reportAtEntryPointsWithDependencyTrace(sourceNode, message);
+        BindingNode sourceNode = (BindingNode) graph.incidentNodes(dependencyEdge).source();
+        reportAtEntryPointsWithDependencyTrace(diagnosticKind, messageBuilder, sourceNode);
       }
     }
 
+    @Override
+    public void reportDependency(
+        Diagnostic.Kind diagnosticKind,
+        DependencyEdge dependencyEdge,
+        String messageFormat,
+        Object firstArg,
+        Object... moreArgs) {
+      reportDependency(
+          diagnosticKind, dependencyEdge, formatMessage(messageFormat, firstArg, moreArgs));
+    }
+
+    private String formatMessage(String messageFormat, Object firstArg, Object[] moreArgs) {
+      return String.format(messageFormat, asList(firstArg, moreArgs).toArray());
+    }
+
     /**
      * For each entry point that depends on {@code targetNode}, appends the {@link
      * #dependencyTrace(DependencyEdge, BindingNode)} to the binding onto {@code message} and prints
      * to the messager.
      */
     private void reportAtEntryPointsWithDependencyTrace(
-        BindingNode targetNode, CharSequence baseMessage) {
-      for (DependencyEdge entryPoint : graph.entryPointEdgesDependingOnBindingNode(targetNode)) {
+        Diagnostic.Kind diagnosticKind, CharSequence message, BindingNode bindingNode) {
+      for (DependencyEdge entryPoint : graph.entryPointEdgesDependingOnBindingNode(bindingNode)) {
         printAtEntryPoint(
-            entryPoint,
-            new StringBuilder(baseMessage).append(dependencyTrace(entryPoint, targetNode)));
+            diagnosticKind,
+            new StringBuilder(message).append(dependencyTrace(entryPoint, bindingNode)),
+            entryPoint);
       }
     }
 
     // TODO(ronshapiro): Adding a DependencyPath type to dagger.model could be useful, i.e.
     // bindingGraph.shortestPathFromEntryPoint(DependencyEdge, BindingNode)
-    private CharSequence dependencyTrace(DependencyEdge entryPoint, BindingNode targetNode) {
+    private CharSequence dependencyTrace(DependencyEdge entryPoint, BindingNode bindingNode) {
       checkArgument(entryPoint.isEntryPoint());
       Node entryPointBinding = graph.incidentNodes(entryPoint).target();
       ImmutableList<Node> shortestPath =
           shortestPath(
               node -> Sets.filter(graph.successors(node), BindingNode.class::isInstance),
               entryPointBinding,
-              targetNode);
+              bindingNode);
 
       StringBuilder trace = new StringBuilder(shortestPath.size() * 100 /* a guess heuristic */);
       for (int i = shortestPath.size() - 1; i > 0; i--) {
@@ -168,7 +194,8 @@ private CharSequence dependencyTrace(DependencyEdge entryPoint, BindingNode targ
      * Prints {@code message} at {@code entryPoint}'s element if it is defined in the {@code
      * rootComponent}, otherwise at the root component.
      */
-    private void printAtEntryPoint(DependencyEdge entryPoint, CharSequence message) {
+    private void printAtEntryPoint(
+        Diagnostic.Kind diagnosticKind, CharSequence message, DependencyEdge entryPoint) {
       checkArgument(entryPoint.isEntryPoint());
       Element entryPointElement = entryPoint.dependencyRequest().requestElement().get();
       Element elementToReport =
@@ -180,21 +207,26 @@ private void printAtEntryPoint(DependencyEdge entryPoint, CharSequence message)
 
       Node component = graph.incidentNodes(entryPoint).source();
       if (!component.equals(graph.rootComponentNode())) {
-        message = appendComponentPath(message, component);
+        message = appendComponentPath(new StringBuilder(message), component);
       }
-      messager.printMessage(item.diagnosticKind(), message, elementToReport);
+      printMessage(diagnosticKind, message, elementToReport);
     }
 
-    private CharSequence appendComponentPath(CharSequence message, Node node) {
-      return new StringBuilder(message).append("\ncomponent path: ").append(node.componentPath());
+    private void printMessage(
+        Diagnostic.Kind diagnosticKind, CharSequence message, Element elementToReport) {
+      if (diagnosticKind.equals(ERROR)) {
+        reportedErrors = true;
+      }
+      messager.printMessage(diagnosticKind, message, elementToReport);
     }
 
-    private StringBuilder messageBuilder() {
-      return new StringBuilder(String.format("[%s] ", plugin)).append(item.message());
+    @CanIgnoreReturnValue
+    private StringBuilder appendComponentPath(StringBuilder message, Node node) {
+      return message.append("\ncomponent path: ").append(node.componentPath());
     }
-  }
 
-  private static boolean isInstance(Optional<?> optional, Class<?> clazz) {
-    return optional.filter(clazz::isInstance).isPresent();
+    private StringBuilder messagePrefix(String message) {
+      return new StringBuilder(String.format("[%s] ", plugin)).append(message);
+    }
   }
 }
diff --git a/java/dagger/spi/BindingGraphPlugin.java b/java/dagger/spi/BindingGraphPlugin.java
index 5d495045b..aa1d57ddb 100644
--- a/java/dagger/spi/BindingGraphPlugin.java
+++ b/java/dagger/spi/BindingGraphPlugin.java
@@ -18,13 +18,10 @@
 
 import dagger.model.BindingGraph;
 import java.util.Collections;
-import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import javax.annotation.processing.Filer;
 import javax.annotation.processing.Messager;
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.annotation.processing.Processor;
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 
@@ -35,23 +32,24 @@
  */
 public interface BindingGraphPlugin {
   /**
-   * Called once for each valid root binding graph encountered by the Dagger processor.
-   *
-   * @return items used to print notes, warnings, and errors about the binding graph to the {@link
-   *     Messager}
+   * Called once for each valid root binding graph encountered by the Dagger processor. May report
+   * diagnostics using {@code diagnosticReporter}.
    */
-  List<ValidationItem> visitGraph(BindingGraph bindingGraph);
+  void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticReporter);
 
   /**
    * Initializes this plugin with a {@link Filer} that it can use to write Java or other files based
    * on the binding graph. This will be called once per instance of this plugin, before any graph is
-   * {@linkplain #visitGraph(BindingGraph) visited}.
+   * {@linkplain #visitGraph(BindingGraph, DiagnosticReporter) visited}.
+   *
+   * @see javax.annotation.processing.ProcessingEnvironment#getFiler()
    */
   default void initFiler(Filer filer) {}
 
   /**
    * Initializes this plugin with a {@link Types} instance. This will be called once per instance of
-   * this plugin, before any graph is {@linkplain #visitGraph(BindingGraph) visited}.
+   * this plugin, before any graph is {@linkplain #visitGraph(BindingGraph, DiagnosticReporter)
+   * visited}.
    *
    * @see javax.annotation.processing.ProcessingEnvironment#getTypeUtils()
    */
@@ -59,7 +57,8 @@ default void initTypes(Types types) {}
 
   /**
    * Initializes this plugin with a {@link Elements} instance. This will be called once per instance
-   * of this plugin, before any graph is {@linkplain #visitGraph(BindingGraph) visited}.
+   * of this plugin, before any graph is {@linkplain #visitGraph(BindingGraph, DiagnosticReporter)
+   * visited}.
    *
    * @see javax.annotation.processing.ProcessingEnvironment#getTypeUtils()
    */
@@ -68,16 +67,17 @@ default void initElements(Elements elements) {}
   /**
    * Initializes this plugin with a filtered view of the options passed on the {@code javac}
    * command-line for all keys from {@link #supportedOptions()}. This will be called once per
-   * instance of this plugin, before any graph is {@linkplain #visitGraph(BindingGraph) visited}.
+   * instance of this plugin, before any graph is {@linkplain #visitGraph(BindingGraph,
+   * DiagnosticReporter) visited}.
    *
-   * @see ProcessingEnvironment#getOptions()
+   * @see javax.annotation.processing.ProcessingEnvironment#getOptions()
    */
   default void initOptions(Map<String, String> options) {}
 
   /**
    * Returns the annotation-processing options that this plugin uses to configure behavior.
    *
-   * @see Processor#getSupportedOptions()
+   * @see javax.annotation.processing.Processor#getSupportedOptions()
    */
   default Set<String> supportedOptions() {
     return Collections.emptySet();
diff --git a/java/dagger/spi/DiagnosticReporter.java b/java/dagger/spi/DiagnosticReporter.java
new file mode 100644
index 000000000..05e1d3fba
--- /dev/null
+++ b/java/dagger/spi/DiagnosticReporter.java
@@ -0,0 +1,85 @@
+/*
+ * Copyright (C) 2018 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.spi;
+
+import com.google.errorprone.annotations.FormatMethod;
+import dagger.model.BindingGraph;
+import dagger.model.BindingGraph.BindingNode;
+import dagger.model.BindingGraph.ComponentNode;
+import dagger.model.BindingGraph.DependencyEdge;
+import javax.tools.Diagnostic;
+
+/**
+ * An object that {@link BindingGraphPlugin}s can use to report diagnostics while visiting a {@link
+ * BindingGraph}.
+ */
+public interface DiagnosticReporter {
+  /**
+   * Reports a diagnostic for a component. For non-root components, includes information about the
+   * path from the root component.
+   */
+  void reportComponent(Diagnostic.Kind diagnosticKind, ComponentNode componentNode, String message);
+
+  /**
+   * Reports a diagnostic for a component. For non-root components, includes information about the
+   * path from the root component.
+   */
+  @FormatMethod
+  void reportComponent(
+      Diagnostic.Kind diagnosticKind,
+      ComponentNode componentNode,
+      String messageFormat,
+      Object firstArg,
+      Object... moreArgs);
+
+  /**
+   * Reports a diagnostic for a binding. Includes information about how the binding is reachable
+   * from entry points.
+   */
+  void reportBinding(Diagnostic.Kind diagnosticKind, BindingNode bindingNode, String message);
+
+  /**
+   * Reports a diagnostic for a binding. Includes information about how the binding is reachable
+   * from entry points.
+   */
+  @FormatMethod
+  void reportBinding(
+      Diagnostic.Kind diagnosticKind,
+      BindingNode bindingNode,
+      String messageFormat,
+      Object firstArg,
+      Object... moreArgs);
+
+  /**
+   * Reports a diagnostic for a dependency. Includes information about how the dependency is
+   * reachable from entry points.
+   */
+  void reportDependency(
+      Diagnostic.Kind diagnosticKind, DependencyEdge dependencyEdge, String message);
+
+  /**
+   * Reports a diagnostic for a dependency. Includes information about how the dependency is
+   * reachable from entry points.
+   */
+  @FormatMethod
+  void reportDependency(
+      Diagnostic.Kind diagnosticKind,
+      DependencyEdge dependencyEdge,
+      String messageFormat,
+      Object firstArg,
+      Object... moreArgs);
+}
diff --git a/java/dagger/spi/ValidationItem.java b/java/dagger/spi/ValidationItem.java
deleted file mode 100644
index bacc8e94d..000000000
--- a/java/dagger/spi/ValidationItem.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
- * Copyright (C) 2018 The Dagger Authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package dagger.spi;
-
-import com.google.auto.value.AutoValue;
-import com.google.errorprone.annotations.DoNotMock;
-import dagger.model.BindingGraph.DependencyEdge;
-import dagger.model.BindingGraph.Edge;
-import dagger.model.BindingGraph.Node;
-import java.util.Optional;
-import javax.annotation.processing.Messager;
-import javax.tools.Diagnostic;
-
-/**
- * A single item that is reported by {@link BindingGraphPlugin}s. Dagger will use these to print
- * diagnostics to the {@link Messager} with any pertinent information, such as a dependency trace.
- */
-@AutoValue
-@DoNotMock("Use ValidationItem.create() instead")
-public abstract class ValidationItem {
-  /** Creates a validation item on {@code node}. */
-  public static ValidationItem create(Diagnostic.Kind diagnosticKind, Node node, String message) {
-    return new AutoValue_ValidationItem(
-        diagnosticKind, Optional.of(node), Optional.empty(), message);
-  }
-
-  /** Creates a validation item on {@code edge}. */
-  public static ValidationItem create(
-      Diagnostic.Kind diagnosticKind, DependencyEdge edge, String message) {
-    return new AutoValue_ValidationItem(
-        diagnosticKind, Optional.empty(), Optional.of(edge), message);
-  }
-
-  public abstract Diagnostic.Kind diagnosticKind();
-
-  /**
-   * This method is only intended to be used by Dagger's implementation and may not remain part of
-   * the official API.
-   */
-  // TODO(ronshapiro): consider having a mechanism by which users can report an entire subgraph as a
-  // ValidationItem instead of a single node/edge.
-  public abstract Optional<Node> node();
-
-  /**
-   * This method is only intended to be used by Dagger's implementation and may not remain part of
-   * the official API.
-   */
-  public abstract Optional<Edge> edge();
-
-  public abstract String message();
-}
diff --git a/javatests/dagger/functional/spi/TestPlugin.java b/javatests/dagger/functional/spi/TestPlugin.java
index 9f1369fd4..360bc20ff 100644
--- a/javatests/dagger/functional/spi/TestPlugin.java
+++ b/javatests/dagger/functional/spi/TestPlugin.java
@@ -20,16 +20,14 @@
 
 import com.google.auto.service.AutoService;
 import com.google.common.base.Joiner;
-import com.google.common.collect.ImmutableList;
 import com.squareup.javapoet.ClassName;
 import dagger.model.BindingGraph;
 import dagger.model.BindingGraph.ComponentNode;
 import dagger.spi.BindingGraphPlugin;
-import dagger.spi.ValidationItem;
+import dagger.spi.DiagnosticReporter;
 import java.io.IOException;
 import java.io.UncheckedIOException;
 import java.io.Writer;
-import java.util.List;
 import java.util.Properties;
 import javax.annotation.processing.Filer;
 
@@ -43,7 +41,7 @@ public void initFiler(Filer filer) {
   }
 
   @Override
-  public List<ValidationItem> visitGraph(BindingGraph bindingGraph) {
+  public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticReporter) {
     Properties properties = new Properties();
     int i = 0;
     for (ComponentNode node : bindingGraph.componentNodes()) {
@@ -52,7 +50,6 @@ public void initFiler(Filer filer) {
     }
 
     write(bindingGraph, properties);
-    return ImmutableList.of();
   }
 
   private void write(BindingGraph bindingGraph, Properties properties) {
diff --git a/javatests/dagger/spi/FailingPlugin.java b/javatests/dagger/spi/FailingPlugin.java
index 50bcf573a..e8bd6a446 100644
--- a/javatests/dagger/spi/FailingPlugin.java
+++ b/javatests/dagger/spi/FailingPlugin.java
@@ -16,11 +16,9 @@
 
 package dagger.spi;
 
-import static com.google.common.collect.ImmutableList.toImmutableList;
 import static javax.tools.Diagnostic.Kind.ERROR;
 
 import com.google.auto.service.AutoService;
-import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 import dagger.model.BindingGraph;
 import java.util.Map;
@@ -42,34 +40,32 @@ public void initOptions(Map<String, String> options) {
   }
 
   @Override
-  public ImmutableList<ValidationItem> visitGraph(BindingGraph bindingGraph) {
+  public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticReporter) {
     if (options.containsKey("error_on_binding")) {
       String key = options.get("error_on_binding");
-      return bindingGraph
+      bindingGraph
           .bindingNodes()
           .stream()
           .filter(node -> node.binding().key().toString().equals(key))
-          .map(node -> ValidationItem.create(ERROR, node, "Bad Binding!"))
-          .collect(toImmutableList());
+          .forEach(node -> diagnosticReporter.reportBinding(ERROR, node, "Bad %s!", "Binding"));
     }
 
     if (options.containsKey("error_on_component")) {
-      return ImmutableList.of(
-          ValidationItem.create(ERROR, bindingGraph.rootComponentNode(), "Bad Component!"));
+      diagnosticReporter.reportComponent(
+          ERROR, bindingGraph.rootComponentNode(), "Bad %s!", "Component");
     }
 
     if (options.containsKey("error_on_subcomponents")) {
-      return bindingGraph
+      bindingGraph
           .componentNodes()
           .stream()
           .filter(node -> !node.componentPath().atRoot())
-          .map(node -> ValidationItem.create(ERROR, node, "Bad Subcomponent!"))
-          .collect(toImmutableList());
+          .forEach(node -> diagnosticReporter.reportComponent(ERROR, node, "Bad Subcomponent!"));
     }
 
     if (options.containsKey("error_on_dependency")) {
       String dependency = options.get("error_on_dependency");
-      return bindingGraph
+      bindingGraph
           .dependencyEdges()
           .stream()
           .filter(
@@ -79,11 +75,9 @@ public void initOptions(Map<String, String> options) {
                       .get()
                       .getSimpleName()
                       .contentEquals(dependency))
-          .map(edge -> ValidationItem.create(ERROR, edge, "Bad Dependency!"))
-          .collect(toImmutableList());
+          .forEach(
+              edge -> diagnosticReporter.reportDependency(ERROR, edge, "Bad %s!", "Dependency"));
     }
-
-    return ImmutableList.of();
   }
 
   @Override
diff --git a/javatests/dagger/spi/SpiPluginTest.java b/javatests/dagger/spi/SpiPluginTest.java
index 517a95976..be63d8217 100644
--- a/javatests/dagger/spi/SpiPluginTest.java
+++ b/javatests/dagger/spi/SpiPluginTest.java
@@ -177,7 +177,7 @@ public void dependencyTraceAtDependencyRequest() {
                 "          test.TestComponent.entryPoint()"))
         .inFile(component)
         .onLineContaining("EntryPoint entryPoint();");
-    // Note that this compilation results in one ValidationItem being reported twice since there are
+    // Note that this compilation results in one error being reported twice since there are
     // two entry points that depend on test.Foo
     Compilation inFooDepCompilation =
         compilationFactory.compilationWithErrorOnDependency("inFooDep");
