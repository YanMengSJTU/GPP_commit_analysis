diff --git a/java/dagger/internal/codegen/ModuleValidator.java b/java/dagger/internal/codegen/ModuleValidator.java
index b93033a96..229cf3c59 100644
--- a/java/dagger/internal/codegen/ModuleValidator.java
+++ b/java/dagger/internal/codegen/ModuleValidator.java
@@ -116,6 +116,7 @@
   private final BindingGraphFactory bindingGraphFactory;
   private final BindingGraphConverter bindingGraphConverter;
   private final BindingGraphPlugins moduleValidationPlugins;
+  private final BindingGraphPlugins spiPlugins;
   private final CompilerOptions compilerOptions;
   private final Map<TypeElement, ValidationReport<TypeElement>> cache = new HashMap<>();
   private final Set<TypeElement> knownModules = new HashSet<>();
@@ -130,6 +131,7 @@
       BindingGraphFactory bindingGraphFactory,
       BindingGraphConverter bindingGraphConverter,
       @ModuleValidation BindingGraphPlugins moduleValidationPlugins,
+      BindingGraphPlugins spiPlugins,
       CompilerOptions compilerOptions) {
     this.types = types;
     this.elements = elements;
@@ -139,6 +141,7 @@
     this.bindingGraphFactory = bindingGraphFactory;
     this.bindingGraphConverter = bindingGraphConverter;
     this.moduleValidationPlugins = moduleValidationPlugins;
+    this.spiPlugins = spiPlugins;
     this.compilerOptions = compilerOptions;
   }
 
@@ -592,7 +595,8 @@ private void validateModuleBindings(
     BindingGraph bindingGraph =
         bindingGraphConverter.convert(
             bindingGraphFactory.create(componentDescriptorFactory.forTypeElement(module)));
-    if (moduleValidationPlugins.pluginsReportErrors(bindingGraph)) {
+    if (moduleValidationPlugins.pluginsReportErrors(bindingGraph)
+        || spiPlugins.pluginsReportErrors(bindingGraph)) {
       // Since the plugins use a DiagnosticReporter to report errors, the ValdiationReport won't
       // have any Items for them. We have to tell the ValidationReport that some errors were
       // reported for the subject.
diff --git a/javatests/dagger/spi/SpiPluginTest.java b/javatests/dagger/spi/SpiPluginTest.java
index 0492304a7..e0a78b2e0 100644
--- a/javatests/dagger/spi/SpiPluginTest.java
+++ b/javatests/dagger/spi/SpiPluginTest.java
@@ -31,6 +31,39 @@
 
 @RunWith(JUnit4.class)
 public final class SpiPluginTest {
+  @Test
+  public void moduleBinding() {
+    JavaFileObject module =
+        JavaFileObjects.forSourceLines(
+            "test.TestModule",
+            "package test;",
+            "",
+            "import dagger.Module;",
+            "import dagger.Provides;",
+            "",
+            "@Module",
+            "interface TestModule {",
+            "  @Provides",
+            "  static int provideInt() {",
+            "    return 0;",
+            "  }",
+            "}");
+
+    Compilation compilation =
+        javac()
+            .withProcessors(new ComponentProcessor())
+            .withOptions(
+                "-Aerror_on_binding=java.lang.Integer",
+                "-Adagger.moduleBindingValidation=ERROR")
+            .compile(module);
+    assertThat(compilation).failed();
+    assertThat(compilation)
+        .hadErrorContaining(
+            message("[FailingPlugin] Bad Binding: @Provides int test.TestModule.provideInt()"))
+        .inFile(module)
+        .onLineContaining("interface TestModule");
+  }
+
   @Test
   public void dependencyTraceAtBinding() {
     JavaFileObject foo =
