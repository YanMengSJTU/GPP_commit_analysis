diff --git a/java/dagger/internal/codegen/ComponentCreatorDescriptor.java b/java/dagger/internal/codegen/ComponentCreatorDescriptor.java
index a6ff3ab96..5fcba0ab0 100644
--- a/java/dagger/internal/codegen/ComponentCreatorDescriptor.java
+++ b/java/dagger/internal/codegen/ComponentCreatorDescriptor.java
@@ -202,13 +202,14 @@ private static ComponentRequirement requirement(
       VariableElement parameter,
       TypeMirror type,
       DependencyRequestFactory dependencyRequestFactory) {
-    boolean methodIsBindsInstance = isAnnotationPresent(method, BindsInstance.class);
-    if (methodIsBindsInstance || isAnnotationPresent(parameter, BindsInstance.class)) {
+    Element bindsInstanceElement =
+        isAnnotationPresent(method, BindsInstance.class)
+            ? method
+            : (isAnnotationPresent(parameter, BindsInstance.class) ? parameter : null);
+    if (bindsInstanceElement != null) {
       DependencyRequest request =
           dependencyRequestFactory.forRequiredResolvedVariable(parameter, type);
-      // Validation already ensured that only setter methods have @BindsInstance, so name the
-      // variable for the method in that case. Otherwise, name the variable for the parameter.
-      String variableName = (methodIsBindsInstance ? method : parameter).getSimpleName().toString();
+      String variableName = bindsInstanceElement.getSimpleName().toString();
       return ComponentRequirement.forBoundInstance(
           request.key(), request.isNullable(), variableName);
     }
diff --git a/java/dagger/internal/codegen/ComponentCreatorValidator.java b/java/dagger/internal/codegen/ComponentCreatorValidator.java
index 3dfbcf6e5..97268779d 100644
--- a/java/dagger/internal/codegen/ComponentCreatorValidator.java
+++ b/java/dagger/internal/codegen/ComponentCreatorValidator.java
@@ -19,7 +19,6 @@
 import static com.google.auto.common.MoreElements.isAnnotationPresent;
 import static com.google.common.collect.Iterables.getOnlyElement;
 import static dagger.internal.codegen.ComponentCreatorAnnotation.getCreatorAnnotations;
-import static dagger.internal.codegen.DaggerElements.isAnyAnnotationPresent;
 import static javax.lang.model.element.Modifier.ABSTRACT;
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.STATIC;
@@ -224,8 +223,21 @@ private void validateSetterMethod(
 
     validateNotGeneric(method, report, messages);
 
-    if (!isAnyAnnotationPresent(method, BindsInstance.class)
-        && method.getParameters().get(0).asType().getKind().isPrimitive()) {
+    VariableElement parameter = method.getParameters().get(0);
+
+    boolean methodIsBindsInstance = isAnnotationPresent(method, BindsInstance.class);
+    boolean parameterIsBindsInstance = isAnnotationPresent(parameter, BindsInstance.class);
+    boolean bindsInstance = methodIsBindsInstance || parameterIsBindsInstance;
+
+    if (methodIsBindsInstance && parameterIsBindsInstance) {
+      error(
+          report,
+          method,
+          messages.bindsInstanceNotAllowedOnBothSetterMethodAndParameter(),
+          messages.inheritedBindsInstanceNotAllowedOnBothSetterMethodAndParameter());
+    }
+
+    if (!bindsInstance && parameter.asType().getKind().isPrimitive()) {
       error(
           report,
           method,
diff --git a/java/dagger/internal/codegen/ComponentHjarProcessingStep.java b/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
index fe9d33e7d..a8d68696b 100644
--- a/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
+++ b/java/dagger/internal/codegen/ComponentHjarProcessingStep.java
@@ -30,7 +30,6 @@
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.element.Modifier.PUBLIC;
 import static javax.lang.model.element.Modifier.STATIC;
-import static javax.lang.model.util.ElementFilter.methodsIn;
 
 import com.google.auto.common.MoreElements;
 import com.google.auto.common.MoreTypes;
@@ -230,10 +229,22 @@ private MethodSpec privateConstructor() {
 
   private boolean hasBindsInstanceMethods(ComponentDescriptor componentDescriptor) {
     return componentDescriptor.creatorDescriptor().isPresent()
-        && methodsIn(
-                elements.getAllMembers(componentDescriptor.creatorDescriptor().get().typeElement()))
+        && elements
+            .getUnimplementedMethods(componentDescriptor.creatorDescriptor().get().typeElement())
             .stream()
-            .anyMatch(method -> isAnnotationPresent(method, BindsInstance.class));
+            .anyMatch(method -> isBindsInstance(method));
+  }
+
+  private static boolean isBindsInstance(ExecutableElement method) {
+    if (isAnnotationPresent(method, BindsInstance.class)) {
+      return true;
+    }
+
+    if (method.getParameters().size() == 1) {
+      return isAnnotationPresent(method.getParameters().get(0), BindsInstance.class);
+    }
+
+    return false;
   }
 
   private MethodSpec builderSetterMethod(
diff --git a/java/dagger/internal/codegen/ErrorMessages.java b/java/dagger/internal/codegen/ErrorMessages.java
index c1ec23238..c53cec21a 100644
--- a/java/dagger/internal/codegen/ErrorMessages.java
+++ b/java/dagger/internal/codegen/ErrorMessages.java
@@ -212,6 +212,15 @@ final String factoryMethodReturnsSupertypeWithMissingMethods(
           component.getQualifiedName(),
           Joiner.on(", ").join(additionalMethods));
     }
+
+    final String bindsInstanceNotAllowedOnBothSetterMethodAndParameter() {
+      return process("@Component.Builder setter methods may not have @BindsInstance on both the "
+          + "method and its parameter; choose one or the other");
+    }
+
+    final String inheritedBindsInstanceNotAllowedOnBothSetterMethodAndParameter() {
+      return bindsInstanceNotAllowedOnBothSetterMethodAndParameter() + ". Inherited method: %s";
+    }
   }
 
   private static final class BuilderMessages extends ComponentCreatorMessages {
diff --git a/javatests/dagger/functional/builder/BuilderBindsInstanceParameterTest.java b/javatests/dagger/functional/builder/BuilderBindsInstanceParameterTest.java
new file mode 100644
index 000000000..f2f44b23c
--- /dev/null
+++ b/javatests/dagger/functional/builder/BuilderBindsInstanceParameterTest.java
@@ -0,0 +1,59 @@
+/*
+ * Copyright (C) 2019 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional.builder;
+
+import static com.google.common.truth.Truth.assertThat;
+
+import dagger.BindsInstance;
+import dagger.Component;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+
+/**
+ * Tests that {@code @BindsInstance} works when applied to the parameter of a builder's setter
+ * method.
+ */
+@RunWith(JUnit4.class)
+public final class BuilderBindsInstanceParameterTest {
+
+  @Component
+  interface TestComponent {
+    String s();
+
+    int i();
+
+    @Component.Builder
+    interface Builder {
+      Builder s(@BindsInstance String s);
+
+      Builder i(@BindsInstance int i);
+
+      TestComponent build();
+    }
+  }
+
+  @Test
+  public void builder_bindsInstanceOnParameter_allowed() {
+    TestComponent component = DaggerBuilderBindsInstanceParameterTest_TestComponent.builder()
+        .s("hello")
+        .i(42)
+        .build();
+    assertThat(component.s()).isEqualTo("hello");
+    assertThat(component.i()).isEqualTo(42);
+  }
+}
diff --git a/javatests/dagger/internal/codegen/ComponentBuilderTest.java b/javatests/dagger/internal/codegen/ComponentBuilderTest.java
index f918971bd..97966e27a 100644
--- a/javatests/dagger/internal/codegen/ComponentBuilderTest.java
+++ b/javatests/dagger/internal/codegen/ComponentBuilderTest.java
@@ -294,4 +294,73 @@ public void testGenericsOnInheritedSetterMethodFails() {
         .inFile(componentFile)
         .onLineContaining("interface Builder");
   }
+
+  @Test
+  public void testBindsInstanceNotAllowedOnBothSetterAndParameter() {
+    JavaFileObject componentFile =
+        JavaFileObjects.forSourceLines(
+            "test.SimpleComponent",
+            "package test;",
+            "",
+            "import dagger.BindsInstance;",
+            "import dagger.Component;",
+            "",
+            "@Component",
+            "abstract class SimpleComponent {",
+            "  abstract String s();",
+            "",
+            "  @Component.Builder",
+            "  interface Builder {",
+            "    @BindsInstance",
+            "    Builder s(@BindsInstance String s);",
+            "",
+            "    SimpleComponent build();",
+            "  }",
+            "}");
+
+    Compilation compilation =
+        daggerCompiler().withOptions(compilerMode.javacopts()).compile(componentFile);
+    assertThat(compilation).failed();
+    assertThat(compilation)
+        .hadErrorContaining(MSGS.bindsInstanceNotAllowedOnBothSetterMethodAndParameter())
+        .inFile(componentFile)
+        .onLineContaining("Builder s(");
+  }
+
+  @Test
+  public void testBindsInstanceNotAllowedOnBothSetterAndParameter_inherited() {
+    JavaFileObject componentFile =
+        JavaFileObjects.forSourceLines(
+            "test.SimpleComponent",
+            "package test;",
+            "",
+            "import dagger.BindsInstance;",
+            "import dagger.Component;",
+            "",
+            "@Component",
+            "abstract class SimpleComponent {",
+            "  abstract String s();",
+            "",
+            "  interface BuilderParent<B extends BuilderParent> {",
+            "    @BindsInstance",
+            "    B s(@BindsInstance String s);",
+            "  }",
+            "",
+            "  @Component.Builder",
+            "  interface Builder extends BuilderParent<Builder> {",
+            "    SimpleComponent build();",
+            "  }",
+            "}");
+
+    Compilation compilation =
+        daggerCompiler().withOptions(compilerMode.javacopts()).compile(componentFile);
+    assertThat(compilation).failed();
+    assertThat(compilation)
+        .hadErrorContaining(
+            String.format(
+                MSGS.inheritedBindsInstanceNotAllowedOnBothSetterMethodAndParameter(),
+                "s(java.lang.String)"))
+        .inFile(componentFile)
+        .onLineContaining("Builder extends BuilderParent<Builder>");
+  }
 }
