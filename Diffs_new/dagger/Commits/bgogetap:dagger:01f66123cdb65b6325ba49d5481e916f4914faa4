diff --git a/java/dagger/internal/codegen/BindingGraphConverter.java b/java/dagger/internal/codegen/BindingGraphConverter.java
index b57955b62..c132cb379 100644
--- a/java/dagger/internal/codegen/BindingGraphConverter.java
+++ b/java/dagger/internal/codegen/BindingGraphConverter.java
@@ -207,11 +207,9 @@ private void addBinding(BindingNode binding) {
     }
 
     private BindingNode bindingNode(
-        ResolvedBindings resolvedBindings, Binding binding, ComponentDescriptor owningComponent) {
+        ResolvedBindings resolvedBindings, Binding binding, TypeElement owningComponent) {
       return BindingNode.create(
-          componentTreePath()
-              .pathFromRootToAncestor(owningComponent.typeElement())
-              .toComponentPath(),
+          componentTreePath().pathFromRootToAncestor(owningComponent).toComponentPath(),
           binding,
           associatedDeclaringElements(resolvedBindings),
           () -> bindingDeclarationFormatter.format(binding));
@@ -228,7 +226,7 @@ private BindingNode bindingNode(
     private MissingBinding missingBindingNode(ResolvedBindings dependencies) {
       return BindingGraphProxies.missingBindingNode(
           componentTreePath()
-              .pathFromRootToAncestor(dependencies.owningComponent().typeElement())
+              .pathFromRootToAncestor(dependencies.resolvingComponent())
               .toComponentPath(),
           dependencies.key());
     }
diff --git a/java/dagger/internal/codegen/BindingGraphFactory.java b/java/dagger/internal/codegen/BindingGraphFactory.java
index 4146964ec..ce54ac903 100644
--- a/java/dagger/internal/codegen/BindingGraphFactory.java
+++ b/java/dagger/internal/codegen/BindingGraphFactory.java
@@ -213,7 +213,7 @@ private BindingGraph create(
         requestResolver.getResolvedContributionBindings();
     for (ResolvedBindings resolvedBindings : resolvedContributionBindingsMap.values()) {
       verify(
-          resolvedBindings.owningComponent().equals(componentDescriptor),
+          resolvedBindings.resolvingComponent().equals(componentDescriptor.typeElement()),
           "%s is not owned by %s",
           resolvedBindings,
           componentDescriptor);
@@ -557,10 +557,9 @@ private ContributionBinding createDelegateBinding(DelegateDeclaration delegateDe
     // but should it? We're currently conflating the two all over the place and it would be good
     // to unify, or if it's necessary, clarify why with docs+tests. Specifically, should we also
     // be checking these for keysMatchingRequest?
-    private ImmutableSetMultimap<ComponentDescriptor, ContributionBinding>
-        indexBindingsByOwningComponent(
-            Key requestKey, Iterable<? extends ContributionBinding> bindings) {
-      ImmutableSetMultimap.Builder<ComponentDescriptor, ContributionBinding> index =
+    private ImmutableSetMultimap<TypeElement, ContributionBinding> indexBindingsByOwningComponent(
+        Key requestKey, Iterable<? extends ContributionBinding> bindings) {
+      ImmutableSetMultimap.Builder<TypeElement, ContributionBinding> index =
           ImmutableSetMultimap.builder();
       for (ContributionBinding binding : bindings) {
         index.put(getOwningComponent(requestKey, binding), binding);
@@ -578,14 +577,14 @@ private ContributionBinding createDelegateBinding(DelegateDeclaration delegateDe
      * multibinding contributions in the parent, and returns the parent-resolved {@link
      * ResolvedBindings#owningComponent(ContributionBinding)}.
      */
-    private ComponentDescriptor getOwningComponent(Key requestKey, ContributionBinding binding) {
+    private TypeElement getOwningComponent(Key requestKey, ContributionBinding binding) {
       if (isResolvedInParent(requestKey, binding)
           && !new LocalDependencyChecker().dependsOnLocalBindings(binding)) {
         ResolvedBindings parentResolvedBindings =
             parentResolver.get().resolvedContributionBindings.get(requestKey);
         return parentResolvedBindings.owningComponent(binding);
       } else {
-        return componentDescriptor;
+        return componentDescriptor.typeElement();
       }
     }
 
@@ -870,11 +869,11 @@ void resolve(Key key) {
     }
 
     /**
-     * {@link #resolve(Key) Resolves} each of the dependencies of the {@link
-     * ResolvedBindings#ownedBindings() owned bindings} of {@code resolvedBindings}.
+     * {@link #resolve(Key) Resolves} each of the dependencies of the bindings owned by this
+     * component.
      */
     private void resolveDependencies(ResolvedBindings resolvedBindings) {
-      for (Binding binding : resolvedBindings.ownedBindings()) {
+      for (Binding binding : resolvedBindings.bindingsOwnedBy(componentDescriptor)) {
         for (DependencyRequest dependency : binding.dependencies()) {
           resolve(dependency.key());
         }
diff --git a/java/dagger/internal/codegen/ComponentBindingExpressions.java b/java/dagger/internal/codegen/ComponentBindingExpressions.java
index 8c47d59c6..00c2e3ea3 100644
--- a/java/dagger/internal/codegen/ComponentBindingExpressions.java
+++ b/java/dagger/internal/codegen/ComponentBindingExpressions.java
@@ -224,7 +224,8 @@ BindingExpression getBindingExpression(BindingRequest request) {
         modifiableBindingExpressions.maybeCreateModifiableBindingExpression(request);
     if (!expression.isPresent()) {
       ResolvedBindings resolvedBindings = graph.resolvedBindings(request);
-      if (resolvedBindings != null && !resolvedBindings.ownedBindings().isEmpty()) {
+      if (resolvedBindings != null
+          && !resolvedBindings.bindingsOwnedBy(graph.componentDescriptor()).isEmpty()) {
         expression = Optional.of(createBindingExpression(resolvedBindings, request));
       }
     }
diff --git a/java/dagger/internal/codegen/ModifiableBindingExpressions.java b/java/dagger/internal/codegen/ModifiableBindingExpressions.java
index 07f622791..41885c096 100644
--- a/java/dagger/internal/codegen/ModifiableBindingExpressions.java
+++ b/java/dagger/internal/codegen/ModifiableBindingExpressions.java
@@ -426,7 +426,8 @@ private boolean resolvableBinding(BindingRequest request) {
   /** Returns true if the binding can be resolved by the graph for this component. */
   private boolean resolvedInThisComponent(BindingRequest request) {
     ResolvedBindings resolvedBindings = graph.resolvedBindings(request);
-    return resolvedBindings != null && !resolvedBindings.ownedBindings().isEmpty();
+    return resolvedBindings != null
+        && !resolvedBindings.bindingsOwnedBy(graph.componentDescriptor()).isEmpty();
   }
 
   /**
diff --git a/java/dagger/internal/codegen/ResolvedBindings.java b/java/dagger/internal/codegen/ResolvedBindings.java
index e4421d5d8..f88cbaf06 100644
--- a/java/dagger/internal/codegen/ResolvedBindings.java
+++ b/java/dagger/internal/codegen/ResolvedBindings.java
@@ -33,6 +33,7 @@
 import dagger.model.Key;
 import dagger.model.Scope;
 import java.util.Optional;
+import javax.lang.model.element.TypeElement;
 
 /**
  * The collection of bindings that have been resolved for a key. For valid graphs, contains exactly
@@ -51,21 +52,22 @@
    */
   abstract Key key();
 
-  /** The component in which the bindings in {@link #ownedBindings()}, were resolved. */
-  abstract ComponentDescriptor owningComponent();
+  /** The component in which these bindings were resolved. */
+  abstract TypeElement resolvingComponent();
 
   /**
-   * The contribution bindings for {@link #key()} that were resolved in {@link #owningComponent()}
-   * or its ancestor components, indexed by the component in which the binding was resolved.
+   * The contribution bindings for {@link #key()} that were resolved in {@link
+   * #resolvingComponent()} or its ancestor components, indexed by the component that owns the
+   * binding.
    */
-  abstract ImmutableSetMultimap<ComponentDescriptor, ContributionBinding> allContributionBindings();
+  abstract ImmutableSetMultimap<TypeElement, ContributionBinding> allContributionBindings();
 
   /**
    * The members-injection bindings for {@link #key()} that were resolved in {@link
-   * #owningComponent()} or its ancestor components, indexed by the component in which the binding
-   * was resolved.
+   * #resolvingComponent()} or its ancestor components, indexed by the component that owns the
+   * binding.
    */
-  abstract ImmutableMap<ComponentDescriptor, MembersInjectionBinding> allMembersInjectionBindings();
+  abstract ImmutableMap<TypeElement, MembersInjectionBinding> allMembersInjectionBindings();
 
   /** The multibinding declarations for {@link #key()}. */
   abstract ImmutableSet<MultibindingDeclaration> multibindingDeclarations();
@@ -87,16 +89,14 @@
   @Override
   public abstract boolean equals(Object other);
 
-  /**
-   * All bindings for {@link #key()}, indexed by the component in which the binding was resolved.
-   */
-  final ImmutableSetMultimap<ComponentDescriptor, ? extends Binding> allBindings() {
+  /** All bindings for {@link #key()}, indexed by the component that owns the binding. */
+  final ImmutableSetMultimap<TypeElement, ? extends Binding> allBindings() {
     return !allMembersInjectionBindings().isEmpty()
         ? allMembersInjectionBindings().asMultimap()
         : allContributionBindings();
   }
 
-  /** All bindings for {@link #key()}, regardless of in which component they were resolved. */
+  /** All bindings for {@link #key()}, regardless of which component owns them. */
   final ImmutableSet<? extends Binding> bindings() {
     return ImmutableSet.copyOf(allBindings().values());
   }
@@ -122,9 +122,9 @@ final boolean isEmpty() {
         && subcomponentDeclarations().isEmpty();
   }
 
-  /** All bindings for {@link #key()} that were resolved in {@link #owningComponent()}. */
-  ImmutableSet<? extends Binding> ownedBindings() {
-    return allBindings().get(owningComponent());
+  /** All bindings for {@link #key()} that are owned by a component. */
+  ImmutableSet<? extends Binding> bindingsOwnedBy(ComponentDescriptor component) {
+    return allBindings().get(component.typeElement());
   }
 
   /**
@@ -136,7 +136,7 @@ final boolean isEmpty() {
   }
 
   /** The component that owns {@code binding}. */
-  final ComponentDescriptor owningComponent(ContributionBinding binding) {
+  final TypeElement owningComponent(ContributionBinding binding) {
     checkArgument(
         contributionBindings().contains(binding),
         "binding is not resolved for %s: %s",
@@ -161,13 +161,13 @@ final ComponentDescriptor owningComponent(ContributionBinding binding) {
   static ResolvedBindings forContributionBindings(
       Key key,
       ComponentDescriptor owningComponent,
-      Multimap<ComponentDescriptor, ? extends ContributionBinding> contributionBindings,
+      Multimap<TypeElement, ContributionBinding> contributionBindings,
       Iterable<MultibindingDeclaration> multibindings,
       Iterable<SubcomponentDeclaration> subcomponentDeclarations,
       Iterable<OptionalBindingDeclaration> optionalBindingDeclarations) {
     return new AutoValue_ResolvedBindings(
         key,
-        owningComponent,
+        owningComponent.typeElement(),
         ImmutableSetMultimap.copyOf(contributionBindings),
         ImmutableMap.of(),
         ImmutableSet.copyOf(multibindings),
@@ -184,9 +184,9 @@ static ResolvedBindings forMembersInjectionBinding(
       MembersInjectionBinding ownedMembersInjectionBinding) {
     return new AutoValue_ResolvedBindings(
         key,
-        owningComponent,
+        owningComponent.typeElement(),
         ImmutableSetMultimap.of(),
-        ImmutableMap.of(owningComponent, ownedMembersInjectionBinding),
+        ImmutableMap.of(owningComponent.typeElement(), ownedMembersInjectionBinding),
         ImmutableSet.of(),
         ImmutableSet.of(),
         ImmutableSet.of());
@@ -198,7 +198,7 @@ static ResolvedBindings forMembersInjectionBinding(
   static ResolvedBindings noBindings(Key key, ComponentDescriptor owningComponent) {
     return new AutoValue_ResolvedBindings(
         key,
-        owningComponent,
+        owningComponent.typeElement(),
         ImmutableSetMultimap.of(),
         ImmutableMap.of(),
         ImmutableSet.of(),
@@ -207,13 +207,13 @@ static ResolvedBindings noBindings(Key key, ComponentDescriptor owningComponent)
   }
 
   /**
-   * Returns a {@code ResolvedBindings} with the same {@link #key()} and {@link #bindings()}
-   * as this one, but no {@link #ownedBindings()}.
+   * Returns a {@code ResolvedBindings} with the same {@link #key()} and {@link #allBindings()} as
+   * this one, but whose {@link #resolvingComponent()} is changed.
    */
-  ResolvedBindings asInheritedIn(ComponentDescriptor owningComponent) {
+  ResolvedBindings asInheritedIn(ComponentDescriptor resolvingComponent) {
     return new AutoValue_ResolvedBindings(
         key(),
-        owningComponent,
+        resolvingComponent.typeElement(),
         allContributionBindings(),
         allMembersInjectionBindings(),
         multibindingDeclarations(),
