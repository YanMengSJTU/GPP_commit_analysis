diff --git a/java/dagger/internal/codegen/ModifiableBindingExpressions.java b/java/dagger/internal/codegen/ModifiableBindingExpressions.java
index 5b7338127..02b7abeaf 100644
--- a/java/dagger/internal/codegen/ModifiableBindingExpressions.java
+++ b/java/dagger/internal/codegen/ModifiableBindingExpressions.java
@@ -16,6 +16,7 @@
 
 package dagger.internal.codegen;
 
+import static com.google.common.collect.Iterables.getOnlyElement;
 import static dagger.internal.codegen.BindingRequest.bindingRequest;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PUBLIC;
@@ -256,6 +257,19 @@ private ModifiableBindingType getModifiableBindingType(BindingRequest request) {
         return ModifiableBindingType.GENERATED_INSTANCE;
       }
 
+      if (binding.kind().equals(BindingKind.DELEGATE)
+          && graph
+              .contributionBindings()
+              .get(getOnlyElement(binding.dependencies()).key())
+              .isEmpty()) {
+        // There's not much to do for @Binds bindings if the dependency is missing - at best, if the
+        // dependency is a weaker scope/unscoped, we save only a few lines that implement the
+        // scoping. But it's also possible, if the dependency is the same or stronger scope, that
+        // no extra code is necessary, in which case we'd be overriding a method that just returns
+        // another.
+        return ModifiableBindingType.MISSING;
+      }
+
       if (binding.kind().equals(BindingKind.OPTIONAL) && binding.dependencies().isEmpty()) {
         // only empty optional bindings can be modified
         return ModifiableBindingType.OPTIONAL;
diff --git a/javatests/dagger/functional/aot/ScopedBindsWithMissingDependency.java b/javatests/dagger/functional/aot/ScopedBindsWithMissingDependency.java
new file mode 100644
index 000000000..2723ac0d0
--- /dev/null
+++ b/javatests/dagger/functional/aot/ScopedBindsWithMissingDependency.java
@@ -0,0 +1,55 @@
+/*
+ * Copyright (C) 2018 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.functional.aot;
+
+import dagger.Binds;
+import dagger.Module;
+import dagger.Reusable;
+import dagger.Subcomponent;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import javax.inject.Scope;
+
+/**
+ * A regression test for ahead-of-time subcomponents mode where a scoped {@link Binds} method whose
+ * dependency was missing in a partial subcomponent implementation threw an exception in the
+ * processor.
+ */
+final class ScopedBindsWithMissingDependency {
+
+  @Retention(RetentionPolicy.RUNTIME)
+  @Scope
+  @interface CustomScope {}
+
+  @Module
+  interface ScopedBindsWithMissingDependencyModule {
+    @Binds
+    @CustomScope
+    Object bindsCustomScopeToMissingDep(String missingDependency);
+
+    @Binds
+    @Reusable
+    CharSequence bindsReusableScopeToMissingDep(String missingDependency);
+  }
+
+  @CustomScope
+  @Subcomponent(modules = ScopedBindsWithMissingDependencyModule.class)
+  interface HasScopedBindsWithMissingDependency {
+    Object customScopedBindsWithMissingDependency();
+    CharSequence reusableScopedBindsWithMissingDependency();
+  }
+}
