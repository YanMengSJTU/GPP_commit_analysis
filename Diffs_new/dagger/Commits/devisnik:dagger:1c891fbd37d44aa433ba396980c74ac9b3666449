diff --git a/java/dagger/internal/codegen/FactoryGenerator.java b/java/dagger/internal/codegen/FactoryGenerator.java
index 0b973fd63..fe0fec709 100644
--- a/java/dagger/internal/codegen/FactoryGenerator.java
+++ b/java/dagger/internal/codegen/FactoryGenerator.java
@@ -246,7 +246,7 @@ ClassName nameGeneratedType(ProvisionBinding binding) {
               parametersCodeBlock);
       getMethodBuilder.addStatement(
           "return $L",
-          !binding.nullableType().isPresent() && compilerOptions.doCheckForNulls()
+          binding.shouldCheckForNull(compilerOptions)
               ? checkNotNullProvidesMethod(methodCall)
               : methodCall);
     } else if (!binding.injectionSites().isEmpty()) {
diff --git a/java/dagger/internal/codegen/ProvisionBinding.java b/java/dagger/internal/codegen/ProvisionBinding.java
index 003520dbc..5eeca8d52 100644
--- a/java/dagger/internal/codegen/ProvisionBinding.java
+++ b/java/dagger/internal/codegen/ProvisionBinding.java
@@ -108,6 +108,20 @@ private static Builder builder() {
   
   abstract Builder toBuilder();
 
+  boolean shouldCheckForNull(CompilerOptions compilerOptions) {
+    return !providesPrimitiveType()
+        && !nullableType().isPresent()
+        && compilerOptions.doCheckForNulls();
+  }
+
+  private boolean providesPrimitiveType() {
+    return bindingElement().isPresent()
+        && MoreElements.asExecutable(bindingElement().get())
+            .getReturnType()
+            .getKind()
+            .isPrimitive();
+  }
+
   @AutoValue.Builder
   @CanIgnoreReturnValue
   abstract static class Builder extends ContributionBinding.Builder<Builder> {
diff --git a/java/dagger/internal/codegen/SimpleMethodBindingExpression.java b/java/dagger/internal/codegen/SimpleMethodBindingExpression.java
index c53a9164d..ecb895a57 100644
--- a/java/dagger/internal/codegen/SimpleMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/SimpleMethodBindingExpression.java
@@ -121,8 +121,7 @@ private CodeBlock dependencyArgument(DependencyRequest dependency, ClassName req
 
   private CodeBlock maybeCheckForNulls(CodeBlock methodCall) {
     return !provisionBinding.bindingKind().equals(INJECTION)
-            && !provisionBinding.nullableType().isPresent()
-            && compilerOptions.doCheckForNulls()
+            && provisionBinding.shouldCheckForNull(compilerOptions)
         ? checkNotNullProvidesMethod(methodCall)
         : methodCall;
   }
diff --git a/javatests/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
index b13957443..695ff9441 100644
--- a/javatests/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
@@ -2610,6 +2610,121 @@ public void nullIncorrectlyReturnedFromNonNullableInlinedProvider() {
                 "}"));
   }
 
+  @Test
+  public void nullCheckingIgnoredWhenProviderReturnsPrimitive() {
+    Compilation compilation =
+        daggerCompiler()
+            .compile(
+                JavaFileObjects.forSourceLines(
+                    "test.TestModule",
+                    "package test;",
+                    "",
+                    "import dagger.Module;",
+                    "import dagger.Provides;",
+                    "",
+                    "@Module",
+                    "public abstract class TestModule {",
+                    "  @Provides static int primitiveInteger() { return 1; }",
+                    "}"),
+                JavaFileObjects.forSourceLines(
+                    "test.InjectsMember",
+                    "package test;",
+                    "",
+                    "import javax.inject.Inject;",
+                    "",
+                    "public class InjectsMember {",
+                    "  @Inject Integer member;",
+                    "}"),
+                JavaFileObjects.forSourceLines(
+                    "test.TestComponent",
+                    "package test;",
+                    "",
+                    "import dagger.Component;",
+                    "",
+                    "@Component(modules = TestModule.class)",
+                    "interface TestComponent {",
+                    "  Integer nonNullableInteger();",
+                    "  void inject(InjectsMember member);",
+                    "}"));
+    assertThat(compilation).succeededWithoutWarnings();
+    assertThat(compilation)
+        .generatedSourceFile("test.TestModule_PrimitiveIntegerFactory")
+        .hasSourceEquivalentTo(
+            JavaFileObjects.forSourceLines(
+                "test.TestModule_PrimitiveIntegerFactory",
+                "package test;",
+                "",
+                "import dagger.internal.Factory;",
+                "import javax.annotation.Generated;",
+                "",
+                GENERATED_ANNOTATION,
+                "public final class TestModule_PrimitiveIntegerFactory",
+                "    implements Factory<Integer> {",
+                "  private static final TestModule_PrimitiveIntegerFactory INSTANCE =",
+                "      new TestModule_PrimitiveIntegerFactory();",
+                "",
+                "  @Override",
+                "  public Integer get() {",
+                "    return TestModule.primitiveInteger();",
+                "  }",
+                "",
+                "  public static Factory<Integer> create() {",
+                "    return INSTANCE;",
+                "  }",
+                "",
+                "  public static int proxyPrimitiveInteger() {",
+                "    return TestModule.primitiveInteger();",
+                "  }",
+                "}"));
+    assertThat(compilation)
+        .generatedSourceFile("test.DaggerTestComponent")
+        .hasSourceEquivalentTo(
+            JavaFileObjects.forSourceLines(
+                "test.DaggerTestComponent",
+                "package test;",
+                "",
+                "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
+                "import javax.annotation.Generated;",
+                "",
+                GENERATED_ANNOTATION,
+                "public final class DaggerTestComponent implements TestComponent {",
+                "  private DaggerTestComponent(Builder builder) {}",
+                "",
+                "  public static Builder builder() {",
+                "    return new Builder();",
+                "  }",
+                "",
+                "  public static TestComponent create() {",
+                "    return new Builder().build();",
+                "  }",
+                "",
+                "  @Override",
+                "  public Integer nonNullableInteger() {",
+                "    return TestModule.primitiveInteger();",
+                "  }",
+                "",
+                "  @Override",
+                "  public void inject(InjectsMember member) {",
+                "    injectInjectsMember(member);",
+                "  }",
+                "",
+                "  @CanIgnoreReturnValue",
+                "  private InjectsMember injectInjectsMember(InjectsMember instance) {",
+                "    InjectsMember_MembersInjector.injectMember(",
+                "        instance, TestModule.primitiveInteger());",
+                "    return instance;",
+                "  }",
+                "",
+                "  public static final class Builder {",
+                "    private Builder() {}",
+                "",
+                "    public TestComponent build() {",
+                "      return new DaggerTestComponent(this);",
+                "    }",
+                "  }",
+                "}"));
+  }
+
   private static Compiler daggerCompiler(Processor... extraProcessors) {
     return javac().withProcessors(Lists.asList(new ComponentProcessor(), extraProcessors));
   }
