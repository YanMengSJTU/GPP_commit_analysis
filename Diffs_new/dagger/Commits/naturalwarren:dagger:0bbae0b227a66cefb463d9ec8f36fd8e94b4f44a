diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/membersinject/ChildComponent.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/membersinject/ChildComponent.java
new file mode 100644
index 000000000..143200025
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/membersinject/ChildComponent.java
@@ -0,0 +1,8 @@
+package test.subcomponent.membersinject;
+
+import dagger.Subcomponent;
+
+@Subcomponent(modules = ChildModule.class)
+interface ChildComponent {
+    void inject(Injected injected);
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/membersinject/ChildModule.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/membersinject/ChildModule.java
new file mode 100644
index 000000000..7e3e53cdb
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/membersinject/ChildModule.java
@@ -0,0 +1,14 @@
+package test.subcomponent.membersinject;
+
+import dagger.Module;
+import dagger.Provides;
+import dagger.multibindings.IntoSet;
+
+@Module
+abstract class ChildModule {
+    @IntoSet
+    @Provides
+    static String string() {
+        return "child";
+    }
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/membersinject/Injected.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/membersinject/Injected.java
new file mode 100644
index 000000000..a317e94b1
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/membersinject/Injected.java
@@ -0,0 +1,8 @@
+package test.subcomponent.membersinject;
+
+import java.util.Set;
+import javax.inject.Inject;
+
+class Injected {
+    @Inject Set<String> string;
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/membersinject/ParentComponent.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/membersinject/ParentComponent.java
new file mode 100644
index 000000000..20574e1aa
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/membersinject/ParentComponent.java
@@ -0,0 +1,9 @@
+package test.subcomponent.membersinject;
+
+import dagger.Component;
+
+@Component(modules = ParentModule.class)
+interface ParentComponent {
+    ChildComponent child();
+    void inject(Injected injected);
+}
diff --git a/compiler/src/it/functional-tests/src/main/java/test/subcomponent/membersinject/ParentModule.java b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/membersinject/ParentModule.java
new file mode 100644
index 000000000..cb896a393
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/main/java/test/subcomponent/membersinject/ParentModule.java
@@ -0,0 +1,14 @@
+package test.subcomponent.membersinject;
+
+import dagger.Module;
+import dagger.Provides;
+import dagger.multibindings.IntoSet;
+
+@Module
+abstract class ParentModule {
+    @IntoSet
+    @Provides
+    static String string() {
+        return "parent";
+    }
+}
diff --git a/compiler/src/it/functional-tests/src/test/java/test/subcomponent/membersinject/SubcomponentMembersInjectTest.java b/compiler/src/it/functional-tests/src/test/java/test/subcomponent/membersinject/SubcomponentMembersInjectTest.java
new file mode 100644
index 000000000..b20f54cff
--- /dev/null
+++ b/compiler/src/it/functional-tests/src/test/java/test/subcomponent/membersinject/SubcomponentMembersInjectTest.java
@@ -0,0 +1,20 @@
+package test.subcomponent.membersinject;
+
+import static com.google.common.truth.Truth.assertThat;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+
+@RunWith(JUnit4.class)
+public class SubcomponentMembersInjectTest {
+
+    @Test public void injectCorrectWhenBothComponentsPerformMultiboundMembersInjection() {
+        Injected injectedByParent = new Injected();
+        DaggerParentComponent.create().inject(injectedByParent);
+        Injected injectedByChild = new Injected();
+        DaggerParentComponent.create().child().inject(injectedByChild);
+
+        assertThat(injectedByChild.string).isNotEqualTo(injectedByParent.string);
+    }
+}
diff --git a/javatests/dagger/internal/codegen/GraphValidationTest.java b/javatests/dagger/internal/codegen/GraphValidationTest.java
index e2b457dd2..0d3e1278b 100644
--- a/javatests/dagger/internal/codegen/GraphValidationTest.java
+++ b/javatests/dagger/internal/codegen/GraphValidationTest.java
@@ -2385,158 +2385,6 @@ public void subcomponentGeneratedCorrectlyWhenBothComponentsPerformMembersInject
         .generatesSources(generatedComponent);
   }
 
-  @Test
-  public void subcomponentGeneratedCorrectlyWhenBothComponentsPerformMultiboundMembersInjection() {
-    JavaFileObject parent =
-        JavaFileObjects.forSourceLines(
-            "test.Parent",
-            "package test;",
-            "",
-            "import dagger.Component;",
-            "import dagger.Module;",
-            "import dagger.Provides;",
-            "import dagger.multibindings.IntoSet;",
-            "",
-            "@Component(modules = Parent.ParentModule.class)",
-            "interface Parent {",
-            "  Child child();",
-            "  void inject(Injected injected);",
-            "",
-            "  @Module",
-            "  static class ParentModule {",
-            "    @Provides @IntoSet static Object object() {",
-            "      return \"parent\";",
-            "    }",
-            "  }",
-            "}");
-    JavaFileObject child =
-        JavaFileObjects.forSourceLines(
-            "test.Child",
-            "package test;",
-            "",
-            "import dagger.Module;",
-            "import dagger.Provides;",
-            "import dagger.Subcomponent;",
-            "import dagger.multibindings.IntoSet;",
-            "",
-            "@Subcomponent(modules = Child.ChildModule.class)",
-            "interface Child {",
-            "  void inject(Injected injected);",
-            "",
-            "  @Module",
-            "  static class ChildModule {",
-            "    @Provides @IntoSet static Object object() {",
-            "      return \"child\";",
-            "    }",
-            "  }",
-            "}");
-    JavaFileObject injected =
-        JavaFileObjects.forSourceLines(
-            "test.Injected",
-            "package test;",
-            "",
-            "import javax.inject.Inject;",
-            "import java.util.Set;",
-            "",
-            "final class Injected {",
-            "  @Inject Set<Object> object;",
-            "}");
-    JavaFileObject generatedComponent =
-        JavaFileObjects.forSourceLines(
-            "test.DaggerParent",
-            "package test;",
-            "",
-            "import dagger.MembersInjector;",
-            "import dagger.internal.Preconditions;",
-            "import dagger.internal.SetFactory",
-            "import java.util.Set",
-            "import javax.annotation.Generated;",
-            "import javax.inject.Provider",
-            "",
-            GENERATED_ANNOTATION,
-            "public final class DaggerParent implements Parent {",
-            "  private Provider<Set<Object>> setOfObjectProvider;",
-            "  private MembersInjector<Injected> injectedMembersInjector;",
-            "",
-            "  private DaggerParent(Builder builder) {",
-            "    assert builder != null;",
-            "    initialize(builder);",
-            "  }",
-            "",
-            "  public static Builder builder() {",
-            "    return new Builder();",
-            "  }",
-            "",
-            "  public static Parent create() {",
-            "    return new Builder().build();",
-            "  }",
-            "",
-            "  @SuppressWarnings(\"unchecked\")",
-            "  private void initialize(final Builder builder) {",
-            "    this.setOfObjectProvider = SetFactory.<Object>builder(1, 0)",
-            "        .addProvider(Parent_ParentModule_ObjectFactory.create())",
-            "        .build();",
-            "    this.injectedMembersInjector = Injected_MembersInjector",
-            "        .create(setOfObjectProvider);",
-            "  }",
-            "",
-            "  @Override",
-            "  public void inject(Injected injected) {",
-            "    injectedMembersInjector.injectMembers(injected);",
-            "  }",
-            "",
-            "  @Override",
-            "  public Child child() {",
-            "    return new ChildImpl();",
-            "  }",
-            "",
-            "  public static final class Builder {",
-            "    private Builder() {}",
-            "",
-            "    public Parent build() {",
-            "      return new DaggerParent(this);",
-            "    }",
-            "",
-            "    @Deprecated",
-            "    public Builder parentModule(Parent.ParentModule parentModule) {",
-            "      Preconditions.checkNotNull(parentModule);",
-            "      return this;",
-            "    }",
-            "  }",
-            "",
-            "  private final class ChildImpl implements Child {",
-            "    private Provider<Set<Object>> setOfObjectProvider;",
-            "    private MembersInjector<Injected> injectedMembersInjector;",
-            "",
-            "    private ChildImpl() {",
-            "      initialize();",
-            "    }",
-            "",
-            "    @SuppressWarnings(\"unchecked\")",
-            "    private void initialize() {",
-            "      this.setOfObjectProvider = SetFactory.<Object>builder(2, 0)",
-            "          .addProvider(Parent_ParentModule_ObjectFactory.create())",
-            "          .addProvider(Child_ChildModule_ObjectFactory.create())",
-            "          .build();",
-            "",
-            "      this.injectedMembersInjector = Injected_MembersInjector",
-            "          .create(setOfObjectProvider);",
-            "    }",
-            "",
-            "    @Override",
-            "    public void inject(Injected injected) {",
-            "      injectedMembersInjector.injectMembers(injected);",
-            "    }",
-            "  }",
-            "}");
-    assertAbout(javaSources())
-        .that(ImmutableList.of(parent, child, injected))
-        .processedWith(new ComponentProcessor())
-        .compilesWithoutError()
-        .and()
-        .generatesSources(generatedComponent);
-  }
-
   @Test
   public void bindingUsedOnlyInSubcomponentDependsOnBindingOnlyInSubcomponent() {
     JavaFileObject parent =
