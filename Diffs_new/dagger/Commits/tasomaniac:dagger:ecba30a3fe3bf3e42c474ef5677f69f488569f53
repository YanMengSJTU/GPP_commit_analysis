diff --git a/java/dagger/internal/codegen/ComponentWriter.java b/java/dagger/internal/codegen/ComponentWriter.java
index 2c439f24f..f1c8b9b0f 100644
--- a/java/dagger/internal/codegen/ComponentWriter.java
+++ b/java/dagger/internal/codegen/ComponentWriter.java
@@ -19,25 +19,30 @@
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
 import static com.squareup.javapoet.TypeSpec.classBuilder;
 import static dagger.internal.codegen.TypeSpecs.addSupertype;
+import static java.lang.Character.isUpperCase;
+import static java.lang.String.format;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PUBLIC;
 import static javax.lang.model.element.Modifier.STATIC;
 
+import com.google.common.base.CharMatcher;
 import com.google.common.base.Joiner;
 import com.google.common.base.Splitter;
 import com.google.common.collect.ImmutableBiMap;
 import com.google.common.collect.ImmutableListMultimap;
+import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Multimaps;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.MethodSpec;
 import com.squareup.javapoet.TypeSpec;
 import java.util.Collection;
+import java.util.Iterator;
 import java.util.LinkedHashMap;
-import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
 import javax.lang.model.element.Name;
+import javax.lang.model.element.TypeElement;
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 
@@ -76,7 +81,7 @@
     private final BindingGraph graph;
     private final ImmutableListMultimap<String, ComponentDescriptor>
         componentDescriptorsBySimpleName;
-    private final ImmutableListMultimap<ComponentDescriptor, String> componentQualifiedNamePieces;
+    private final ImmutableMap<ComponentDescriptor, Namer> componentNamers;
 
     private UniqueSubcomponentNamesGenerator(BindingGraph graph) {
       this.graph = graph;
@@ -85,7 +90,7 @@ private UniqueSubcomponentNamesGenerator(BindingGraph graph) {
               graph.componentDescriptors(),
               componentDescriptor ->
                   componentDescriptor.componentDefinitionType().getSimpleName().toString());
-      componentQualifiedNamePieces = qualifiedNames(graph.componentDescriptors());
+      componentNamers = qualifiedNames(graph.componentDescriptors());
     }
 
     private ImmutableBiMap<ComponentDescriptor, String> generate() {
@@ -102,36 +107,77 @@ private UniqueSubcomponentNamesGenerator(BindingGraph graph) {
     private ImmutableBiMap<ComponentDescriptor, String> disambiguateConflictingSimpleNames(
         Collection<ComponentDescriptor> components) {
       Map<String, ComponentDescriptor> generatedSimpleNames = new LinkedHashMap<>();
-      // The ending condition is when there is a unique simple name generated for every element
-      // in components. The sizes should be equivalent (with one generated name per component).
-      for (int levels = 0; generatedSimpleNames.size() != components.size(); levels++) {
+
+      // Let's see if we can get away with using simpleName() everywhere.
+      for (ComponentDescriptor component : components) {
+        Namer namer = componentNamers.get(component);
+        if (generatedSimpleNames.containsKey(namer.simpleName())) {
+          break;
+        }
+        generatedSimpleNames.put(namer.simpleName(), component);
+      }
+
+      if (generatedSimpleNames.size() != components.size()) {
+        // Simple approach didn't work out, let's use more complicated names.
+        // We keep them small to fix https://github.com/google/dagger/issues/421.
         generatedSimpleNames.clear();
+        UniqueNameSet nameSet = new UniqueNameSet();
         for (ComponentDescriptor component : components) {
-          List<String> pieces = componentQualifiedNamePieces.get(component);
-          String simpleName =
-              QUALIFIED_NAME_JOINER.join(
-                  pieces.subList(Math.max(0, pieces.size() - levels - 1), pieces.size()));
-          ComponentDescriptor conflict = generatedSimpleNames.put(simpleName, component);
-          if (conflict != null) {
-            // if the map previously contained an entry for the same simple name, stop early since
-            // 2+ subcomponent descriptors will have the same simple name
-            break;
-          }
+          Namer namer = componentNamers.get(component);
+          String simpleName = namer.simpleName();
+          String basePrefix = namer.uniquingPrefix();
+          generatedSimpleNames.put(format("%s_%s", nameSet.getUniqueName(basePrefix), simpleName),
+              component);
         }
       }
       return ImmutableBiMap.copyOf(generatedSimpleNames).inverse();
     }
 
-    private static ImmutableListMultimap<ComponentDescriptor, String> qualifiedNames(
+    private static ImmutableMap<ComponentDescriptor, Namer> qualifiedNames(
         Iterable<ComponentDescriptor> componentDescriptors) {
-      ImmutableListMultimap.Builder<ComponentDescriptor, String> builder =
-          ImmutableListMultimap.builder();
+      ImmutableMap.Builder<ComponentDescriptor, Namer> builder = ImmutableMap.builder();
       for (ComponentDescriptor component : componentDescriptors) {
-        Name qualifiedName = component.componentDefinitionType().getQualifiedName();
-        builder.putAll(component, QUALIFIED_NAME_SPLITTER.split(qualifiedName));
+        builder.put(component, new Namer(component.componentDefinitionType()));
       }
       return builder.build();
     }
+
+    private static final class Namer {
+      final TypeElement typeElement;
+
+      Namer(TypeElement typeElement) {
+        this.typeElement = typeElement;
+      }
+
+      String simpleName() {
+        return typeElement.getSimpleName().toString();
+      }
+
+      /** Returns a prefix that could make {@link #simpleName()} more unique. */
+      String uniquingPrefix() {
+        String containerName = typeElement.getEnclosingElement().getSimpleName().toString();
+
+        // If parent element looks like a class, use its initials as a prefix.
+        if (!containerName.isEmpty() && isUpperCase(containerName.charAt(0))) {
+          return CharMatcher.javaLowerCase().removeFrom(containerName);
+        }
+
+        // Not in a normally named class. Prefix with the initials of the elements leading here.
+        Name qualifiedName = typeElement.getQualifiedName();
+        Iterator<String> pieces = QUALIFIED_NAME_SPLITTER.split(qualifiedName).iterator();
+        StringBuilder b = new StringBuilder();
+
+        while (pieces.hasNext()) {
+          String next = pieces.next();
+          if (pieces.hasNext()) {
+            b.append(next.charAt(0));
+          }
+        }
+
+        // Note that a top level class in the root package will be prefixed "$_".
+        return b.length() > 0 ? b.toString() : "$";
+      }
+    }
   }
 
   @Override
diff --git a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
index 976864df8..225918e9a 100644
--- a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
+++ b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
@@ -533,7 +533,7 @@ public void multipleSubcomponentsWithSameSimpleNamesCanExistInSameComponent() {
             "",
             "  @Override",
             "  public Foo.Sub newFooSubcomponent() {",
-            "    return new Foo_SubImpl();",
+            "    return new F_SubImpl();",
             "  }",
             "",
             "  @Override",
@@ -549,26 +549,26 @@ public void multipleSubcomponentsWithSameSimpleNamesCanExistInSameComponent() {
             "    }",
             "  }",
             "",
-            "  private final class Foo_SubImpl implements Foo.Sub {",
+            "  private final class F_SubImpl implements Foo.Sub {",
             "",
-            "    private Foo_SubImpl() {}",
+            "    private F_SubImpl() {}",
             "",
             "    @Override",
             "    public Bar.Sub newBarSubcomponent() {",
-            "      return new Bar_SubImpl();",
+            "      return new B_SubImpl();",
             "    }",
             "",
-            "    private final class Bar_SubImpl implements Bar.Sub {",
+            "    private final class B_SubImpl implements Bar.Sub {",
             "",
-            "      private Bar_SubImpl() {}",
+            "      private B_SubImpl() {}",
             "",
             "      @Override",
             "      public Sub newSubcomponentInSubpackage() {",
-            "        return new subpackage_SubImpl();",
+            "        return new ts_SubImpl();",
             "      }",
             "",
-            "      private final class subpackage_SubImpl implements Sub {",
-            "        private subpackage_SubImpl() {}",
+            "      private final class ts_SubImpl implements Sub {",
+            "        private ts_SubImpl() {}",
             "      }",
             "    }",
             "  }",
@@ -640,7 +640,7 @@ public void subcomponentSimpleNamesDisambiguated() {
             "",
             "  @Override",
             "  public Sub newSubcomponent() {",
-            "    return new test_SubImpl();",
+            "    return new t_SubImpl();",
             "  }",
             "",
             "  public static final class Builder {",
@@ -651,18 +651,18 @@ public void subcomponentSimpleNamesDisambiguated() {
             "    }",
             "  }",
             "",
-            "  private final class test_SubImpl implements Sub {",
+            "  private final class t_SubImpl implements Sub {",
             "",
-            "    private test_SubImpl() {}",
+            "    private t_SubImpl() {}",
             "",
             "    @Override",
             "    public test.deep.many.levels.that.match.test.Sub newDeepSubcomponent() {",
-            "      return new match_test_SubImpl();",
+            "      return new tdmltmt_SubImpl();",
             "    }",
             "",
-            "    private final class match_test_SubImpl implements ",
+            "    private final class tdmltmt_SubImpl implements ",
             "        test.deep.many.levels.that.match.test.Sub {",
-            "      private match_test_SubImpl() {}",
+            "      private tdmltmt_SubImpl() {}",
             "    }",
             "  }",
             "}");
@@ -675,6 +675,90 @@ public void subcomponentSimpleNamesDisambiguated() {
         .generatesSources(componentGeneratedFile);
   }
 
+  @Test
+  public void subcomponentSimpleNamesDisambiguatedInRoot() {
+    JavaFileObject parent =
+        JavaFileObjects.forSourceLines(
+            "ParentComponent",
+            "import dagger.Component;",
+            "",
+            "@Component",
+            "interface ParentComponent {",
+            "  Sub newSubcomponent();",
+            "}");
+    JavaFileObject sub =
+        JavaFileObjects.forSourceLines(
+            "Sub",
+            "import dagger.Subcomponent;",
+            "",
+            "@Subcomponent interface Sub {",
+            "  test.deep.many.levels.that.match.test.Sub newDeepSubcomponent();",
+            "}");
+    JavaFileObject deepSub =
+        JavaFileObjects.forSourceLines(
+            "test.deep.many.levels.that.match.test.Sub",
+            "package test.deep.many.levels.that.match.test;",
+            "",
+            "import dagger.Subcomponent;",
+            "",
+            "@Subcomponent public interface Sub {}");
+
+    JavaFileObject componentGeneratedFile =
+        JavaFileObjects.forSourceLines(
+            "DaggerParentComponent",
+            "import javax.annotation.Generated;",
+            "",
+            GENERATED_ANNOTATION,
+            "public final class DaggerParentComponent implements ParentComponent {",
+            "  private DaggerParentComponent(Builder builder) {",
+            "    assert builder != null;",
+            "  }",
+            "",
+            "  public static Builder builder() {",
+            "    return new Builder();",
+            "  }",
+            "",
+            "  public static ParentComponent create() {",
+            "    return new Builder().build();",
+            "  }",
+            "",
+            "  @Override",
+            "  public Sub newSubcomponent() {",
+            "    return new $_SubImpl();",
+            "  }",
+            "",
+            "  public static final class Builder {",
+            "    private Builder() {}",
+            "",
+            "    public ParentComponent build() {",
+            "      return new DaggerParentComponent(this);",
+            "    }",
+            "  }",
+            "",
+            "  private final class $_SubImpl implements Sub {",
+            "    private $_SubImpl() {}",
+            "",
+            "    @Override",
+            "    public test.deep.many.levels.that.match.test.Sub newDeepSubcomponent() {",
+            "      return new tdmltmt_SubImpl();",
+            "    }",
+            "",
+            "    private final class tdmltmt_SubImpl implements ",
+            "        test.deep.many.levels.that.match.test.Sub {",
+            "      private tdmltmt_SubImpl() {}",
+            "    }",
+            "  }",
+            "}",
+            "");
+
+    assertAbout(javaSources())
+        .that(ImmutableList.of(parent, sub, deepSub))
+        .processedWith(new ComponentProcessor())
+        .compilesWithoutError()
+        .and()
+        .generatesSources(componentGeneratedFile);
+  }
+
   @Test
   public void subcomponentImplNameUsesFullyQualifiedClassNameIfNecessary() {
     JavaFileObject parent =
@@ -738,12 +822,12 @@ public void subcomponentImplNameUsesFullyQualifiedClassNameIfNecessary() {
             "",
             "  @Override",
             "  public E.F.Sub top1() {",
-            "    return new top1_a_b_c_d_E_F_SubImpl();",
+            "    return new F_SubImpl();",
             "  }",
             "",
             "  @Override",
             "  public top2.a.b.c.d.E.F.Sub top2() {",
-            "    return new top2_a_b_c_d_E_F_SubImpl();",
+            "    return new F2_SubImpl();",
             "  }",
             "",
             "  public static final class Builder {",
@@ -754,11 +838,11 @@ public void subcomponentImplNameUsesFullyQualifiedClassNameIfNecessary() {
             "    }",
             "  }",
             "",
-            "  private final class top1_a_b_c_d_E_F_SubImpl implements E.F.Sub {",
-            "    private top1_a_b_c_d_E_F_SubImpl() {}",
+            "  private final class F_SubImpl implements E.F.Sub {",
+            "    private F_SubImpl() {}",
             "  }",
-            "  private final class top2_a_b_c_d_E_F_SubImpl implements top2.a.b.c.d.E.F.Sub {",
-            "    private top2_a_b_c_d_E_F_SubImpl() {}",
+            "  private final class F2_SubImpl implements top2.a.b.c.d.E.F.Sub {",
+            "    private F2_SubImpl() {}",
             "  }",
             "}");
 
@@ -817,7 +901,7 @@ public void parentComponentNameShouldNotBeDisambiguatedWhenItConflictsWithASubco
             "",
             "  @Override",
             "  public Foo.C newFooC() {",
-            "    return new Foo_CImpl();",
+            "    return new F_CImpl();",
             "  }",
             "",
             "  public static final class Builder {",
@@ -828,8 +912,8 @@ public void parentComponentNameShouldNotBeDisambiguatedWhenItConflictsWithASubco
             "    }",
             "  }",
             "",
-            "  private final class Foo_CImpl implements Foo.C {",
-            "    private Foo_CImpl() {}",
+            "  private final class F_CImpl implements Foo.C {",
+            "    private F_CImpl() {}",
             "  }",
             "}");
 
@@ -909,7 +993,7 @@ public void subcomponentBuilderNamesShouldNotConflict() {
             "        new dagger.internal.Factory<C.Foo.Sub.Builder>() {",
             "          @Override",
             "          public C.Foo.Sub.Builder get() {",
-            "            return new Foo_SubBuilder();",
+            "            return new F_SubBuilder();",
             "          }",
             "        };",
             "",
@@ -917,7 +1001,7 @@ public void subcomponentBuilderNamesShouldNotConflict() {
             "        new dagger.internal.Factory<C.Bar.Sub.Builder>() {",
             "          @Override",
             "          public C.Bar.Sub.Builder get() {",
-            "            return new Bar_SubBuilder();",
+            "            return new B_SubBuilder();",
             "          }",
             "        };",
             "  }",
@@ -940,28 +1024,28 @@ public void subcomponentBuilderNamesShouldNotConflict() {
             "    }",
             "  }",
             "",
-            "  private final class Foo_SubBuilder implements C.Foo.Sub.Builder {",
+            "  private final class F_SubBuilder implements C.Foo.Sub.Builder {",
             "    @Override",
             "    public C.Foo.Sub build() {",
-            "      return new Foo_SubImpl(this);",
+            "      return new F_SubImpl(this);",
             "    }",
             "  }",
             "",
-            "  private final class Foo_SubImpl implements C.Foo.Sub {",
-            "    private Foo_SubImpl(Foo_SubBuilder builder) {",
+            "  private final class F_SubImpl implements C.Foo.Sub {",
+            "    private F_SubImpl(F_SubBuilder builder) {",
             "      assert builder != null;",
             "    }",
             "  }",
             "",
-            "  private final class Bar_SubBuilder implements C.Bar.Sub.Builder {",
+            "  private final class B_SubBuilder implements C.Bar.Sub.Builder {",
             "    @Override",
             "    public C.Bar.Sub build() {",
-            "      return new Bar_SubImpl(this);",
+            "      return new B_SubImpl(this);",
             "    }",
             "  }",
             "",
-            "  private final class Bar_SubImpl implements C.Bar.Sub {",
-            "    private Bar_SubImpl(Bar_SubBuilder builder) {",
+            "  private final class B_SubImpl implements C.Bar.Sub {",
+            "    private B_SubImpl(B_SubBuilder builder) {",
             "      assert builder != null;",
             "    }",
             "  }",
