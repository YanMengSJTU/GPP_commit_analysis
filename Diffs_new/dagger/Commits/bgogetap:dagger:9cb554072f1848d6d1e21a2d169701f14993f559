diff --git a/java/dagger/internal/codegen/CompilerOptions.java b/java/dagger/internal/codegen/CompilerOptions.java
index 5c2647571..87141ff2b 100644
--- a/java/dagger/internal/codegen/CompilerOptions.java
+++ b/java/dagger/internal/codegen/CompilerOptions.java
@@ -126,7 +126,7 @@ static CompilerOptions create(ProcessingEnvironment processingEnv) {
   CompilerOptions validate() {
     checkState(
         !(fastInit() && experimentalAndroidMode2()),
-        "fastInit/experimentalAndroidMode and experimentalAndroidMode2 cannot be used together.");
+        "fastInit and experimentalAndroidMode2 cannot be used together.");
     return this;
   }
 
@@ -200,17 +200,15 @@ public String toString() {
       }
     },
 
-    FAST_INIT(Builder::fastInit) {
+    FAST_INIT(Builder::fastInit),
+
+    EXPERIMENTAL_ANDROID_MODE((builder, ignoredValue) -> {}) {
       @Override
-      boolean isEnabled(ProcessingEnvironment processingEnvironment) {
-        return super.isEnabled(processingEnvironment)
-            || EXPERIMENTAL_ANDROID_MODE.isEnabled(processingEnvironment);
+      public void set(Builder builder, ProcessingEnvironment processingEnvironment) {
+        noLongerRecognizedWarning(processingEnvironment);
       }
     },
 
-    // TODO(user): Remove once all usages are migrated to FAST_INIT.
-    EXPERIMENTAL_ANDROID_MODE((builder, enabled) -> {}),
-
     EXPERIMENTAL_ANDROID_MODE2(Builder::experimentalAndroidMode2),
 
     FORMAT_GENERATED_SOURCE(Builder::formatGeneratedSource, ENABLED),
@@ -226,15 +224,9 @@ boolean isEnabled(ProcessingEnvironment processingEnvironment) {
     EXPERIMENTAL_AHEAD_OF_TIME_SUBCOMPONENTS(Builder::aheadOfTimeSubcomponents),
 
     FLOATING_BINDS_METHODS((builder, ignoredValue) -> {}) {
-     @Override
+      @Override
       public void set(Builder builder, ProcessingEnvironment processingEnvironment) {
-        if (processingEnvironment.getOptions().containsKey(toString())) {
-          processingEnvironment
-            .getMessager()
-            .printMessage(
-                Diagnostic.Kind.WARNING,
-                toString() + " is no longer a recognized option by Dagger");
-        }
+        noLongerRecognizedWarning(processingEnvironment);
       }
     },
 
@@ -293,6 +285,17 @@ boolean isEnabled(ProcessingEnvironment processingEnvironment) {
     public String toString() {
       return optionName(name());
     }
+
+    void noLongerRecognizedWarning(ProcessingEnvironment processingEnvironment) {
+      if (processingEnvironment.getOptions().containsKey(toString())) {
+          processingEnvironment
+            .getMessager()
+            .printMessage(
+                Diagnostic.Kind.WARNING,
+                toString() + " is no longer a recognized option by Dagger");
+      }
+    }
+
   }
 
   /** The diagnostic kind or validation type for a kind of validation. */
