diff --git a/multibindings.md b/multibindings.md
index 3bf1cf69f..538b2f867 100644
--- a/multibindings.md
+++ b/multibindings.md
@@ -16,14 +16,13 @@ several modules contribute individual service providers to a map, keyed by name.
 
 ## Set multibindings
 
-In order to contribute one element to an injectable multibound set, add a method
-to a module that returns an element and is annotated with
-[`@Provides(type = SET)`]:
+In order to contribute one element to an injectable multibound set, add an
+[`@IntoSet`] annotation to your module method:
 
 ```java
 @Module
 class MyModuleA {
-  @Provides(type = SET)
+  @Provides @IntoSet
   static String provideOneString(DepA depA, DepB depB) {
     return "ABC";
   }
@@ -31,12 +30,12 @@ class MyModuleA {
 ```
 
 You can also contribute several elements at one time by adding a module method
-that returns a subset and is annotated with [`@Provides(type = SET_VALUES)`]:
+that returns a subset and is annotated with [`@ElementsIntoSet`]:
 
 ```java
 @Module
 class MyModuleB {
-  @Provides(type = SET_VALUES)
+  @Provides @ElementsIntoSet
   static Set<String> provideSomeStrings(DepA depA, DepB depB) {
     return new HashSet<String>(Arrays.asList("DEF", "GHI"));
   }
@@ -79,7 +78,7 @@ with the qualifier:
 ```java
 @Module
 class MyModuleC {
-  @Provides(type = SET)
+  @Provides @IntoSet
   @MyQualifier
   static Foo provideOneFoo(DepA depA, DepB depB) {
     return new Foo(depA, depB);
@@ -99,10 +98,10 @@ Dagger lets you use multibindings to contribute entries to an injectable map as
 long as the map keys are known at compile time.
 
 To contribute an entry to a multibound map, add a method to a module that
-returns the value and is annotated with [`@Provides(type = MAP)`] and with
+returns the value and is annotated with [`@IntoMap`] and with
 another custom annotation that specifies the map key for that entry. To
-contribute an entry to a qualified multibound map, annotate each `@Provides(type
-= MAP)` method with the qualifier.
+contribute an entry to a qualified multibound map, annotate each `@IntoMap`
+method with the qualifier.
 
 Then you can inject either the map itself (`Map<K, V>`) or a map containing
 value providers (`Map<K, Provider<V>>`). The latter is useful when you don't
@@ -118,13 +117,13 @@ the standard annotations in [`dagger.mapkeys`]:
 ```java
 @Module
 class MyModule {
-  @Provides(type = MAP)
+  @Provides @IntoMap
   @StringKey("foo")
   static Long provideFooValue() {
     return 100L;
   }
 
-  @Provides(type = MAP)
+  @Provides @IntoMap
   @ClassKey(Thing.class)
   static String provideThingValue() {
     return "value for Thing";
@@ -166,13 +165,13 @@ enum MyEnum {
 
 @Module
 class MyModule {
-  @Provides(type = MAP)
+  @Provides @IntoMap
   @MyEnumKey(MyEnum.ABC)
   static String provideABCValue() {
     return "value for ABC";
   }
 
-  @Provides(type = MAP)
+  @Provides @IntoMap
   @MyNumberClassKey(BigDecimal.class)
   static String provideBigDecimalValue() {
     return "value for BigDecimal";
@@ -213,7 +212,7 @@ well.
 
 @Module
 class MyModule {
-  @Provides(type = MAP)
+  @Provides @IntoMap
   @MyKey(name = "abc", implementingClass = Abc.class, thresholds = {1, 5, 10})
   static String provideAbc1510Value() {
     return "foo";
@@ -261,14 +260,14 @@ transform into a non-multibound map.
 ```java
 @Module
 class MyModule {
-  @Provides(type = SET)
+  @Provides @IntoSet
   static Map.Entry<Foo, Bar> entryOne(…) {
     Foo key = …;
     Bar value = …;
     return new SimpleImmutableEntry(key, value);
   }
 
-  @Provides(type = SET)
+  @Provides @IntoSet
   static Map.Entry<Foo, Bar> entryTwo(…) {
     Foo key = …;
     Bar value = …;
@@ -297,7 +296,7 @@ your non-multibound map can have `Provider` values.
 ```java
 @Module
 class MyModule {
-  @Provides(type = SET)
+  @Provides @IntoSet
   static Map.Entry<Foo, Provider<Bar>> entry(
       Provider<BarSubclass> barSubclassProvider) {
     Foo key = …;
@@ -345,15 +344,15 @@ methods.
 
 <!-- TODO(dpb): Render as footnote once Github supports them. -->
 
-### Alternative: `SET_VALUES` returning an empty set
+### Alternative: `@ElementsIntoSet` returning an empty set
 
-For empty sets only, as an alternative, you can add a [`@Provides(type =
-SET_VALUES)`] method that returns an empty set:
+For empty sets only, as an alternative, you can add a [`@ElementsIntoSet`]
+method that returns an empty set:
 
 ```java
 @Module
 class MyEmptySetModule {
-  @Provides(type = SET_VALUES)
+  @Provides @ElementsIntoSet
   static Set<Foo> primeEmptyFooSet() {
     return Collections.emptySet();
   }
@@ -385,23 +384,23 @@ interface ParentComponent {
 
 @Module
 class ParentModule {
-  @Provides(type = SET)
+  @Provides @IntoSet
   static String string1() {
     "parent string 1";
   }
 
-  @Provides(type = SET)
+  @Provides @IntoSet
   static String string2() {
     "parent string 2";
   }
 
-  @Provides(type = MAP)
+  @Provides @IntoMap
   @StringKey("a")
   static String stringA() {
     "parent string A";
   }
 
-  @Provides(type = MAP)
+  @Provides @IntoMap
   @StringKey("b")
   static String stringB() {
     "parent string B";
@@ -416,23 +415,23 @@ interface ChildComponent {
 
 @Module
 class ChildModule {
-  @Provides(type = SET)
+  @Provides @IntoSet
   static String string3() {
     "child string 3";
   }
 
-  @Provides(type = SET)
+  @Provides @IntoSet
   static String string4() {
     "child string 4";
   }
 
-  @Provides(type = MAP)
+  @Provides @IntoMap
   @StringKey("c")
   static String stringC() {
     "child string C";
   }
 
-  @Provides(type = MAP)
+  @Provides @IntoMap
   @StringKey("d")
   static String stringD() {
     "child string D";
@@ -458,11 +457,11 @@ class ChildModule {
 
 [`@AutoAnnotation`]: https://github.com/google/auto/blob/master/value/src/main/java/com/google/auto/value/AutoAnnotation.java
 [`dagger.mapkeys`]: http://google.github.io/dagger/api/latest/dagger/mapkeys/package-summary.html
+[`@ElementsIntoSet`]: http://google.github.io/dagger/api/latest/dagger/multibindings/ElementsIntoSet.html
+[`@IntoMap`]: http://google.github.io/dagger/api/latest/dagger/multibindings/IntoMap.html
+[`@IntoSet`]: http://google.github.io/dagger/api/latest/dagger/multibindings/IntoSet.html
 [`@MapKey`]: http://google.github.io/dagger/api/latest/dagger/MapKey.html
 [`@Multibindings`]: http://google.github.io/dagger/api/latest/dagger/Multibindings.html
-[`@Provides(type = MAP)`]: http://google.github.io/dagger/api/latest/dagger/Provides.Type.html#MAP
-[`@Provides(type = SET)`]: http://google.github.io/dagger/api/latest/dagger/Provides.Type.html#SET
-[`@Provides(type = SET_VALUES)`]: http://google.github.io/dagger/api/latest/dagger/Provides.Type.html#SET_VALUES
 
 
 
diff --git a/producers.md b/producers.md
index 576d6bb07..e28e95ba4 100644
--- a/producers.md
+++ b/producers.md
@@ -157,10 +157,10 @@ in [ordinary Dagger](multibindings.md). For example:
 ```java
 @ProducerModule
 final class UserDataModule {
-  @Produces(type = SET) static ListenableFuture<Data> standardData(…) { … }
-  @Produces(type = SET) static ListenableFuture<Data> extraData(…) { … }
-  @Produces(type = SET) static Data synchronousData(…) { … }
-  @Produces(type = SET_VALUES) static Set<ListenableFuture<Data>> rest(…) { … }
+  @Produces @IntoSet static ListenableFuture<Data> standardData(…) { … }
+  @Produces @IntoSet static ListenableFuture<Data> extraData(…) { … }
+  @Produces @IntoSet static Data synchronousData(…) { … }
+  @Produces @ElementsIntoSet static Set<ListenableFuture<Data>> rest(…) { … }
 
   @Produces static … collect(Set<Data> data) { … }
 }
@@ -181,10 +181,10 @@ Map multibindings are similar to set multibindings:
 
 @ProducerModule
 final class DispatchModule {
-  @Produces(type = MAP) @DispatchPath("/user")
+  @Produces @IntoMap @DispatchPath("/user")
   static ListenableFuture<Html> dispatchUser(…) { … }
 
-  @Produces(type = MAP) @DispatchPath("/settings")
+  @Produces @IntoMap @DispatchPath("/settings")
   static ListenableFuture<Html> dispatchSettings(…) { … }
 
   @Produces
@@ -280,7 +280,7 @@ example:
 ```java
 @Module
 final class MyMonitorModule {
-  @Provides(type = SET)
+  @Provides @IntoSet
   static ProductionComponentMonitor.Factory provideMonitorFactory(
       MyProductionComponentMonitor.Factory monitorFactory) {
     return monitorFactory;
diff --git a/subcomponents.md b/subcomponents.md
index 20f1e8d2c..e1a4fbb53 100644
--- a/subcomponents.md
+++ b/subcomponents.md
@@ -296,22 +296,22 @@ interface Parent {
 
 @Module
 class ParentModule {
-  @Provides(type = MAP)
+  @Provides @IntoMap
   @StringKey("one") static int one() {
     return 1;
   }
 
-  @Provides(type = MAP)
+  @Provides @IntoMap
   @StringKey("two") static int two() {
     return 2;
   }
 
-  @Provides(type = SET)
+  @Provides @IntoSet
   static String a() {
     return "a"
   }
 
-  @Provides(type = SET)
+  @Provides @IntoSet
   static String b() {
     return "b"
   }
@@ -325,22 +325,22 @@ interface Child {
 
 @Module
 class ChildModule {
-  @Provides(type = MAP)
+  @Provides @IntoMap
   @StringKey("three") static int three() {
     return 3;
   }
 
-  @Provides(type = MAP)
+  @Provides @IntoMap
   @StringKey("four") static int four() {
     return 4;
   }
 
-  @Provides(type = SET)
+  @Provides @IntoSet
   static String c() {
     return "c"
   }
 
-  @Provides(type = SET)
+  @Provides @IntoSet
   static String d() {
     return "d"
   }
