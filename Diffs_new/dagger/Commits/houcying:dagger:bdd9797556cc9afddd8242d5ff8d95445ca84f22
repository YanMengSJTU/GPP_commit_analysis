diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
index 3d231edf9..d03d00bf3 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentGenerator.java
@@ -55,15 +55,21 @@
 import javax.inject.Provider;
 import javax.lang.model.element.AnnotationMirror;
 import javax.lang.model.element.AnnotationValue;
+import javax.lang.model.element.AnnotationValueVisitor;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.Name;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
+import javax.lang.model.type.DeclaredType;
+import javax.lang.model.type.PrimitiveType;
 import javax.lang.model.type.TypeKind;
 import javax.lang.model.type.TypeMirror;
+import javax.lang.model.type.TypeVisitor;
 import javax.lang.model.util.Elements;
+import javax.lang.model.util.SimpleAnnotationValueVisitor6;
+import javax.lang.model.util.SimpleTypeVisitor6;
 import javax.lang.model.util.Types;
 
 import static com.google.common.base.CaseFormat.LOWER_CAMEL;
@@ -286,33 +292,45 @@ public String apply(TypeElement input) {
               Joiner.on(",\n").join(setFactoryParameters.build()));
         } else if ((mapBinding = ProvisionBinding.isMapBindingCollection(bindings)) == true) {
           ImmutableList.Builder<String> mapFactoryParameters = ImmutableList.builder();
-          mapFactoryParameters.add(providerNames.get(key));
-          boolean isFirst = true;
+          mapFactoryParameters.add(providerNames.get(key)); 
+         
+          boolean isFirstBinding = true;
           for (ProvisionBinding binding : bindings) {
-            ImmutableSet<? extends AnnotationMirror> annotationmirrors = getMapKey(binding.bindingElement());
+            ExecutableElement e = (ExecutableElement) binding.bindingElement();
+            ImmutableSet<? extends AnnotationMirror> annotationmirrors = getMapKey(e);
             Map<? extends ExecutableElement, ? extends AnnotationValue> map = annotationmirrors.iterator().next().getElementValues();
-            System.out.println("Here the value is " + map.entrySet().iterator().next().getValue());
+            if (isFirstBinding) {
+              Key s = binding.providedKey();
+              TypeVisitor<Object, Void> typeVisitor =  new SimpleTypeVisitor6<Object, Void>(){
+                @Override public List<? extends TypeMirror> visitDeclared(DeclaredType t,
+                    Void p) {
+                      return t.getTypeArguments();
+                }
+              };
+              String size = Integer.toString(bindings.size());
+              List<? extends TypeMirror> mapArgs = (List<? extends TypeMirror>) s.type().accept(typeVisitor, null);
+              TypeMirror keyType =  mapArgs.get(0);
+              List<? extends TypeMirror> mapValueArgs = (List<? extends TypeMirror>) mapArgs.get(1).accept(typeVisitor, null);
+              TypeMirror valueType = mapValueArgs.get(0);
+
+              mapFactoryParameters.add(keyType.toString());
+              mapFactoryParameters.add(valueType.toString()); 
+              mapFactoryParameters.add(size);
+
+              isFirstBinding = false;
+            }
             mapFactoryParameters.add(map.entrySet().iterator().next().getValue().toString());
             mapFactoryParameters.add(initializeFactoryForBinding(
                 writer, binding, moduleNames, providerNames,membersInjectorNames));
-            if (isFirst) {
-              mapFactoryParameters.add(map.entrySet().iterator().next().getValue().toString());
-              mapFactoryParameters.add(initializeFactoryForBinding(
-                  writer, binding, moduleNames, providerNames,membersInjectorNames));
-              isFirst = false;
-            }
           }
           
-          Object[] mapFactoryPara = mapFactoryParameters.build().toArray();
-         
-          StringBuilder mapPattern = new StringBuilder("this.%s = MapProviderFactory.create(MapProviderFactory.builder(%s, %s)");
-          for (int i = 0; i < mapFactoryParameters.build().size() - 3; i += 2) {
-            mapPattern.append("%n.put(%s, (Provider)%s)");
+          StringBuilder mapPattern = new StringBuilder("this.%s = MapProviderFactory.<%s, %s>builder(%s)");
+          for (int i = 0; i < mapFactoryParameters.build().size() - 4; i += 2) {
+            mapPattern.append("%n.put(%s, %s)");
           }
-          mapPattern.append(".build())");
-          System.out.println("Pattern:" + mapPattern);
+          mapPattern.append("%n.build()");
           writer.emitStatement(mapPattern.toString(),
-              mapFactoryPara);
+              mapFactoryParameters.build().toArray());  
         } else if (ProvisionBinding.isNotACollection(setBinding, mapBinding, bindings)) {
           ProvisionBinding binding = Iterables.getOnlyElement(bindings);
           writer.emitStatement("this.%s = %s",
diff --git a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
index 21c5ba659..82a9f343a 100644
--- a/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
+++ b/compiler/src/main/java/dagger/internal/codegen/ComponentProcessor.java
@@ -120,7 +120,6 @@ public synchronized void init(ProcessingEnvironment processingEnv) {
   @Override
   public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
     for (ProcessingStep processingStep : processingSteps) {
-      System.out.println("Begin to process processingStep: " + processingStep.toString());
       processingStep.process(annotations, roundEnv);
     }
     return false;
diff --git a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index 29a052d39..5e656dd9a 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -113,36 +113,41 @@
         "import javax.inject.Provider;",
         "",
         "@Generated(\"dagger.internal.codegen.ComponentProcessor\")",
-        "public final class Dagger_TestComponent implements TestComponent {",
+        "public final class Dagger_TestComponent",
+        "    implements TestComponent {",
         "  private final MapModuleOne mapModuleOne;",
         "  private final MapModuleTwo mapModuleTwo;",
-        "  private final Provider<Map<PathEnum, Provider<Handler>>> mapOfEnumHandlerProvider;",
+        "  /**",
+        "   * Key{type=java.util.Map<test.PathEnum,javax.inject.Provider<test.Handler>>}",
+        "   */",
+        "  private final Provider<Map<PathEnum, Provider<Handler>>> mapOfPathEnumAndProviderOfHandlerProvider;",
+        "",
         "",
         "  public Dagger_TestComponent(MapModuleOne mapModuleOne, MapModuleTwo mapModuleTwo) {",
         "    if (mapModuleOne == null) {",
         "      throw new NullPointerException(\"mapModuleOne\");",
         "    }",
         "    this.mapModuleOne = mapModuleOne;",
-        "    if (mapModuletwo == null) {",
+        "    if (mapModuleTwo == null) {",
         "      throw new NullPointerException(\"mapModuleTwo\");",
         "    }",
         "    this.mapModuleTwo = mapModuleTwo;", 
-        "    this.mapOfEnumHandlerProvider = MapProviderFactory.builder()",
-        "        .put(PathEnum.ADMIN, new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
-        "        .put(PathEnum.LOGIN, MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo))",
+        "    this.mapOfPathEnumAndProviderOfHandlerProvider = MapProviderFactory.<test.PathEnum, test.Handler>builder(2)",
+        "        .put(test.PathEnum.ADMIN, new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
+        "        .put(test.PathEnum.LOGIN, new MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo))",
         "        .build();",
-        "",
         "  }",
         "",
-        "  @Override public Map<PathEnum, Provider<Handler>> dispatcher() {",
-        "    return mapOfEnumHandlerProvider.get();",
+        "  @Override",
+        "  public Map<PathEnum, Provider<Handler>> dispatcher() {",
+        "    return mapOfPathEnumAndProviderOfHandlerProvider.get();",
         "  }",
         "}");
     ASSERT.about(javaSources())
         .that(ImmutableList.of(mapModuleOneFile, mapModuleTwoFile, enumKeyFile, pathEnumFile, HandlerFile, LoginHandlerFile, AdminHandlerFile, componentFile))
         .processedWith(new ComponentProcessor())
-        .compilesWithoutError();
-        //.and().generatesSources(generatedComponent);
+        .compilesWithoutError()
+        .and().generatesSources(generatedComponent);
   }
  
   @Test public void mapBindingsWithStringKey() {
@@ -168,7 +173,7 @@
         "",
         "@Module",
         "final class MapModuleTwo {",
-        "  @Provides(type = MAP) @StringKey(\"login\") Handler provideLoginHandler() { return new LoginHandler(); }",
+        "  @Provides(type = MAP) @StringKey(\"Login\") Handler provideLoginHandler() { return new LoginHandler(); }",
         "}");
     JavaFileObject stringKeyFile = JavaFileObjects.forSourceLines("test.StringKey", 
         "package test;",
@@ -225,10 +230,10 @@
         "    implements TestComponent {",
         "  private final MapModuleOne mapModuleOne;",
         "  private final MapModuleTwo mapModuleTwo;",
-        "/**",
-        " * Key{type=java.util.Map<java.lang.String,javax.inject.Provider<test.Handler>>}",
-        " */",
-        "  private final Provider<Map<EnumKey.PathEnum, Provider<Handler>>> mapOfStringAndProviderOfHandlerProvider;",
+        "  /**",
+        "   * Key{type=java.util.Map<java.lang.String,javax.inject.Provider<test.Handler>>}",
+        "   */",
+        "  private final Provider<Map<String, Provider<Handler>>> mapOfStringAndProviderOfHandlerProvider;",
         "",
         "",
         "  public Dagger_TestComponent(MapModuleOne mapModuleOne, MapModuleTwo mapModuleTwo) {",
@@ -236,17 +241,19 @@
         "      throw new NullPointerException(\"mapModuleOne\");",
         "    }",
         "    this.mapModuleOne = mapModuleOne;",
-        "    if (mapModuletwo == null) {",
+        "    if (mapModuleTwo == null) {",
         "      throw new NullPointerException(\"mapModuleTwo\");",
         "    }",
         "    this.mapModuleTwo = mapModuleTwo;",
-        "    this.mapOfStringAndProviderOfHandlerProvider = MapProviderFactory.builder()",
+        "    this.mapOfStringAndProviderOfHandlerProvider = MapProviderFactory.<java.lang.String, test.Handler>builder(2)",
         "        .put(\"Admin\", new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
-        "        .put(\"Login\", new MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo)).build();",
+        "        .put(\"Login\", new MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo))",
+        "        .build();",
         "  }",
         "",
-        "  @Override public Map<String, Provider<Handler>> dispatcher() {",
-        "    return mapOfStringHandlerProvider.get();",
+        "  @Override",
+        "  public Map<String, Provider<Handler>> dispatcher() {",
+        "    return mapOfStringAndProviderOfHandlerProvider.get();",
         "  }",
         "}");
     
@@ -254,8 +261,8 @@
     ASSERT.about(javaSources())
         .that(ImmutableList.of(mapModuleOneFile, mapModuleTwoFile, stringKeyFile,HandlerFile, LoginHandlerFile, AdminHandlerFile, componentFile))
         .processedWith(new ComponentProcessor())
-        .compilesWithoutError();
-    //    .and().generatesSources(generatedComponent);
+        .compilesWithoutError()
+        .and().generatesSources(generatedComponent);
   }
   
 }
diff --git a/core/src/main/java/dagger/internal/MapProviderFactory.java b/core/src/main/java/dagger/internal/MapProviderFactory.java
index 6efe04691..817780c7e 100644
--- a/core/src/main/java/dagger/internal/MapProviderFactory.java
+++ b/core/src/main/java/dagger/internal/MapProviderFactory.java
@@ -22,15 +22,25 @@
     return new MapProviderFactory<K, V>();
   }
   
-  public static <K, V> ImmutableMap.Builder<K, Provider<V>> builder(K k, Provider<V> pv) {
-    //TODO (houcy)
-    return ImmutableMap.<K, Provider<V>>builder();
-    //OR return new ImmutableMap.Builder<K, Provider<V>>();
+  public static class Builder<K, V> {
+    private final int size;
+    
+    public Builder(int size) {
+      this.size = size;  
+    }
+    public MapProviderFactory<K, V> build() {
+      return null;
+    }
+    
+    public Builder<K, V> put(K k, Provider<V> pv) {
+      return null;
+    }
+  }
+ 
+  public static <K, V> Builder<K, V> builder(int size) {
+    return null;
+    
   }
-  
-  
-  
-  
   private MapProviderFactory() {
     
   }
