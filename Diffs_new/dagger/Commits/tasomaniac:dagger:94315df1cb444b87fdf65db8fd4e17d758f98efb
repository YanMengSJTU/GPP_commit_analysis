diff --git a/testing.md b/testing.md
index 577eef3bb..f4352b204 100644
--- a/testing.md
+++ b/testing.md
@@ -47,10 +47,11 @@ application to operate normally. That approach lends itself to having one (or
 maybe a small finite number) of test configurations, where the test
 configuration replaces some of the bindings in the prod configuration.
 
-### Option 1: Override bindings by subclassing modules
+### Option 1: Override bindings by subclassing modules (don’t do this!)
 
 The simplest way to replace bindings in a testing component is to override
-modules’ `@Provides` methods in a subclass.
+modules’ `@Provides` methods in a subclass. (But see [below](#do-not-override)
+for problems.)
 
 When you create an instance of your Dagger component, you pass in instances of
 the modules it uses. (You do not have to pass instances for modules with no-arg
@@ -81,6 +82,7 @@ MyApplicationComponent testingComponent = DaggerMyApplicationComponent.builder()
     .build();
 ```
 
+<a name=do-not-override></a>
 But there are limitations to this approach:
 
 *   Using a module subclass cannot change the static shape of the binding graph:
