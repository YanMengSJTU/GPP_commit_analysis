diff --git a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index d6ecbf761..58c142b75 100644
--- a/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/compiler/src/test/java/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -15,33 +15,17 @@
  */
 package dagger.internal.codegen;
 
-import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
 import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
 import static org.truth0.Truth.ASSERT;
 
 import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap;
 import com.google.testing.compile.JavaFileObjects;
 
-import dagger.Factory;
-import dagger.Module;
-import dagger.Provides;
-
-import static dagger.Provides.Type.MAP;
-
-import javax.inject.Provider;
-import javax.inject.Qualifier;
-import javax.tools.JavaFileObject;
-
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 
-import java.lang.annotation.Documented;
-import java.lang.annotation.Retention;
-import java.util.Map;
+import javax.tools.JavaFileObject;
 
 @RunWith(JUnit4.class)
 public class MapBindingComponentProcessorTest {
@@ -56,7 +40,7 @@
         "",
         "@Module",
         "final class MapModuleOne {",
-        "  @Provides(type = MAP) @EnumKey(PathEnum.Admin) Handler provideAdminHandler() { return new AdminHandler(); }",
+        "  @Provides(type = MAP) @EnumKey(PathEnum.ADMIN) Handler provideAdminHandler() { return new AdminHandler(); }",
         "}");
     JavaFileObject mapModuleTwoFile = JavaFileObjects.forSourceLines("test.MapModuleTwo",
         "package test;",
@@ -68,7 +52,7 @@
         "",
         "@Module",
         "final class MapModuleTwo {",
-        "  @Provides(type = MAP) @EnumKey(PathEnum.Login) Handler provideLoginHandler() { return new LoginHandler(); }",
+        "  @Provides(type = MAP) @EnumKey(PathEnum.LOGIN) Handler provideLoginHandler() { return new LoginHandler(); }",
         "}");
     JavaFileObject enumKeyFile = JavaFileObjects.forSourceLines("test.EnumKey", 
         "package test;",
@@ -85,8 +69,8 @@
         "package test;",
         "",
         "public enum PathEnum {",
-        "    Admin,",
-        "    Login;",
+        "    ADMIN,",
+        "    LOGIN;",
         "}");
     
     JavaFileObject HandlerFile = JavaFileObjects.forSourceLines("test.Handler", 
@@ -145,8 +129,8 @@
         "    }",
         "    this.mapModuleTwo = mapModuleTwo;", 
         "    this.mapOfEnumHandlerProvider = MapProviderFactory.builder()",
-        "        .put(PathEnum.Admin, new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
-        "        .put(PathEnum.Login, MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo))",
+        "        .put(PathEnum.ADMIN, new MapModuleOne$$ProvideAdminHandlerFactory(mapModuleOne))",
+        "        .put(PathEnum.LOGIN, MapModuleTwo$$ProvideLoginHandlerFactory(mapModuleTwo))",
         "        .build();",
         "",
         "  }",
