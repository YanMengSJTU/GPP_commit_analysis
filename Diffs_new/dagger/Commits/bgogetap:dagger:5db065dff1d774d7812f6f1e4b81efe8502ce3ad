diff --git a/java/dagger/internal/codegen/ComponentBindingExpressions.java b/java/dagger/internal/codegen/ComponentBindingExpressions.java
index a9587470c..4cb230f17 100644
--- a/java/dagger/internal/codegen/ComponentBindingExpressions.java
+++ b/java/dagger/internal/codegen/ComponentBindingExpressions.java
@@ -23,7 +23,6 @@
 import static dagger.internal.codegen.Accessibility.isTypeAccessibleFrom;
 import static dagger.internal.codegen.BindingType.MEMBERS_INJECTION;
 import static dagger.internal.codegen.CodeBlocks.makeParametersCodeBlock;
-import static dagger.internal.codegen.DaggerStreams.toImmutableList;
 import static dagger.internal.codegen.DelegateBindingExpression.isBindsScopeStrongerThanDependencyScope;
 import static dagger.internal.codegen.MemberSelect.staticFactoryCreation;
 import static dagger.internal.codegen.SourceFiles.membersInjectorNameForType;
@@ -177,15 +176,31 @@ Expression getDependencyExpression(
   }
 
   /**
-   * Returns the expressions for each of the given {@linkplain FrameworkDependency framework
-   * dependencies}.
+   * Returns the {@link CodeBlock} for the method argmuments used with the factory {@code create()}
+   * method for the given {@link ContributionBinding binding}.
    */
-  ImmutableList<CodeBlock> getDependencyExpressions(
-      ImmutableList<FrameworkDependency> frameworkDependencies, ClassName requestingClass) {
-    return frameworkDependencies
+  CodeBlock getCreateMethodArgumentsCodeBlock(ContributionBinding binding) {
+    return makeParametersCodeBlock(getCreateMethodArgumentsCodeBlocks(binding));
+  }
+
+  private ImmutableList<CodeBlock> getCreateMethodArgumentsCodeBlocks(ContributionBinding binding) {
+    ImmutableList.Builder<CodeBlock> arguments = ImmutableList.builder();
+
+    if (binding.requiresModuleInstance()) {
+      arguments.add(
+          componentRequirementFields.getExpressionDuringInitialization(
+              ComponentRequirement.forModule(binding.contributingModule().get().asType()),
+              generatedComponentModel.name()));
+    }
+
+    binding
+        .frameworkDependencies()
         .stream()
-        .map(dependency -> getDependencyExpression(dependency, requestingClass).codeBlock())
-        .collect(toImmutableList());
+        .map(dependency -> getDependencyExpression(dependency, generatedComponentModel.name()))
+        .map(Expression::codeBlock)
+        .forEach(arguments::add);
+
+    return arguments.build();
   }
 
   /**
@@ -333,16 +348,14 @@ private FrameworkInstanceCreationExpression frameworkInstanceCreationExpression(
 
       case INJECTION:
       case PROVISION:
-        return new InjectionOrProvisionProviderCreationExpression(
-            binding, generatedComponentModel, this, componentRequirementFields);
+        return new InjectionOrProvisionProviderCreationExpression(binding, this);
 
       case COMPONENT_PRODUCTION:
         return new DependencyMethodProducerCreationExpression(
             binding, generatedComponentModel, componentRequirementFields, graph);
 
       case PRODUCTION:
-        return new ProducerCreationExpression(
-            binding, generatedComponentModel, this, componentRequirementFields);
+        return new ProducerCreationExpression(binding, this);
 
       case MULTIBOUND_SET:
         return new SetFactoryCreationExpression(binding, generatedComponentModel, this, graph);
@@ -389,9 +402,7 @@ private FrameworkInstanceCreationExpression frameworkInstanceCreationExpression(
                   CodeBlock.of(
                       "$T.create($L)",
                       membersInjectorNameForType(MoreTypes.asTypeElement(membersInjectedType)),
-                      makeParametersCodeBlock(
-                          getDependencyExpressions(
-                              binding.frameworkDependencies(), generatedComponentModel.name()))));
+                      getCreateMethodArgumentsCodeBlock(binding)));
         }
 
       default:
diff --git a/java/dagger/internal/codegen/InjectionOrProvisionProviderCreationExpression.java b/java/dagger/internal/codegen/InjectionOrProvisionProviderCreationExpression.java
index 5f52f221e..f80c0831e 100644
--- a/java/dagger/internal/codegen/InjectionOrProvisionProviderCreationExpression.java
+++ b/java/dagger/internal/codegen/InjectionOrProvisionProviderCreationExpression.java
@@ -17,15 +17,12 @@
 package dagger.internal.codegen;
 
 import static com.google.common.base.Preconditions.checkNotNull;
-import static dagger.internal.codegen.CodeBlocks.makeParametersCodeBlock;
 import static dagger.internal.codegen.SourceFiles.generatedClassNameForBinding;
 import static dagger.model.BindingKind.INJECTION;
 
-import com.google.common.collect.Lists;
 import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.TypeName;
 import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
-import java.util.List;
 import java.util.Optional;
 
 /**
@@ -38,40 +35,21 @@
     implements FrameworkInstanceCreationExpression {
 
   private final ContributionBinding binding;
-  private final GeneratedComponentModel generatedComponentModel;
   private final ComponentBindingExpressions componentBindingExpressions;
-  private final ComponentRequirementFields componentRequirementFields;
 
   InjectionOrProvisionProviderCreationExpression(
-      ContributionBinding binding,
-      GeneratedComponentModel generatedComponentModel,
-      ComponentBindingExpressions componentBindingExpressions,
-      ComponentRequirementFields componentRequirementFields) {
+      ContributionBinding binding, ComponentBindingExpressions componentBindingExpressions) {
     this.binding = checkNotNull(binding);
-    this.generatedComponentModel = checkNotNull(generatedComponentModel);
     this.componentBindingExpressions = checkNotNull(componentBindingExpressions);
-    this.componentRequirementFields = checkNotNull(componentRequirementFields);
   }
 
   @Override
   public CodeBlock creationExpression() {
-    List<CodeBlock> arguments =
-        Lists.newArrayListWithCapacity(binding.explicitDependencies().size() + 1);
-    if (binding.requiresModuleInstance()) {
-      arguments.add(
-          componentRequirementFields.getExpressionDuringInitialization(
-              ComponentRequirement.forModule(binding.contributingModule().get().asType()),
-              generatedComponentModel.name()));
-    }
-    arguments.addAll(
-        componentBindingExpressions.getDependencyExpressions(
-            binding.frameworkDependencies(), generatedComponentModel.name()));
-
     CodeBlock createFactory =
         CodeBlock.of(
             "$T.create($L)",
             generatedClassNameForBinding(binding),
-            makeParametersCodeBlock(arguments));
+            componentBindingExpressions.getCreateMethodArgumentsCodeBlock(binding));
 
     // When scoping a parameterized factory for an @Inject class, Java 7 cannot always infer the
     // type properly, so cast to a raw framework type before scoping.
diff --git a/java/dagger/internal/codegen/MembersInjectorProviderCreationExpression.java b/java/dagger/internal/codegen/MembersInjectorProviderCreationExpression.java
index 59390521b..eecadefca 100644
--- a/java/dagger/internal/codegen/MembersInjectorProviderCreationExpression.java
+++ b/java/dagger/internal/codegen/MembersInjectorProviderCreationExpression.java
@@ -18,7 +18,6 @@
 
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.collect.Iterables.getOnlyElement;
-import static dagger.internal.codegen.CodeBlocks.makeParametersCodeBlock;
 import static dagger.internal.codegen.SourceFiles.membersInjectorNameForType;
 import static dagger.internal.codegen.TypeNames.INSTANCE_FACTORY;
 import static dagger.internal.codegen.TypeNames.MEMBERS_INJECTORS;
@@ -32,16 +31,13 @@
 final class MembersInjectorProviderCreationExpression
     implements FrameworkInstanceCreationExpression {
 
-  private final GeneratedComponentModel generatedComponentModel;
   private final ComponentBindingExpressions componentBindingExpressions;
   private final ContributionBinding binding;
 
   MembersInjectorProviderCreationExpression(
       ContributionBinding binding,
-      GeneratedComponentModel generatedComponentModel,
       ComponentBindingExpressions componentBindingExpressions) {
     this.binding = checkNotNull(binding);
-    this.generatedComponentModel = checkNotNull(generatedComponentModel);
     this.componentBindingExpressions = checkNotNull(componentBindingExpressions);
   }
 
@@ -56,9 +52,7 @@ public CodeBlock creationExpression() {
             : CodeBlock.of(
                 "$T.create($L)",
                 membersInjectorNameForType(MoreTypes.asTypeElement(membersInjectedType)),
-                makeParametersCodeBlock(
-                    componentBindingExpressions.getDependencyExpressions(
-                        binding.frameworkDependencies(), generatedComponentModel.name())));
+                componentBindingExpressions.getCreateMethodArgumentsCodeBlock(binding));
 
     // TODO(ronshapiro): consider adding a MembersInjectorBindingExpression to return this directly
     // (as it's rarely requested as a Provider).
diff --git a/java/dagger/internal/codegen/ProducerCreationExpression.java b/java/dagger/internal/codegen/ProducerCreationExpression.java
index 696f6d638..56e82a804 100644
--- a/java/dagger/internal/codegen/ProducerCreationExpression.java
+++ b/java/dagger/internal/codegen/ProducerCreationExpression.java
@@ -17,14 +17,11 @@
 package dagger.internal.codegen;
 
 import static com.google.common.base.Preconditions.checkNotNull;
-import static dagger.internal.codegen.CodeBlocks.makeParametersCodeBlock;
 import static dagger.internal.codegen.SourceFiles.generatedClassNameForBinding;
 
-import com.google.common.collect.Lists;
 import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.TypeName;
 import dagger.internal.codegen.FrameworkFieldInitializer.FrameworkInstanceCreationExpression;
-import java.util.List;
 import java.util.Optional;
 
 /**
@@ -34,37 +31,21 @@
 // TODO(dpb): Resolve with InjectionOrProvisionProviderCreationExpression.
 final class ProducerCreationExpression implements FrameworkInstanceCreationExpression {
 
-  private final GeneratedComponentModel generatedComponentModel;
   private final ComponentBindingExpressions componentBindingExpressions;
-  private final ComponentRequirementFields componentRequirementFields;
   private final ContributionBinding binding;
 
   ProducerCreationExpression(
-      ContributionBinding binding,
-      GeneratedComponentModel generatedComponentModel,
-      ComponentBindingExpressions componentBindingExpressions,
-      ComponentRequirementFields componentRequirementFields) {
+      ContributionBinding binding, ComponentBindingExpressions componentBindingExpressions) {
     this.binding = checkNotNull(binding);
-    this.generatedComponentModel = checkNotNull(generatedComponentModel);
     this.componentBindingExpressions = checkNotNull(componentBindingExpressions);
-    this.componentRequirementFields = checkNotNull(componentRequirementFields);
   }
 
   @Override
   public CodeBlock creationExpression() {
-    List<CodeBlock> arguments = Lists.newArrayListWithCapacity(binding.dependencies().size() + 2);
-    if (binding.requiresModuleInstance()) {
-      arguments.add(
-          componentRequirementFields.getExpressionDuringInitialization(
-              ComponentRequirement.forModule(binding.contributingModule().get().asType()),
-              generatedComponentModel.name()));
-    }
-    arguments.addAll(
-        componentBindingExpressions.getDependencyExpressions(
-            binding.frameworkDependencies(), generatedComponentModel.name()));
-
     return CodeBlock.of(
-        "new $T($L)", generatedClassNameForBinding(binding), makeParametersCodeBlock(arguments));
+        "new $T($L)",
+        generatedClassNameForBinding(binding),
+        componentBindingExpressions.getCreateMethodArgumentsCodeBlock(binding));
   }
 
   @Override
