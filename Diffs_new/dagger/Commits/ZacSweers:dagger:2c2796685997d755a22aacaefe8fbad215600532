diff --git a/java/dagger/internal/codegen/AbstractComponentWriter.java b/java/dagger/internal/codegen/AbstractComponentWriter.java
index 3a03dbafc..d389d1101 100644
--- a/java/dagger/internal/codegen/AbstractComponentWriter.java
+++ b/java/dagger/internal/codegen/AbstractComponentWriter.java
@@ -18,14 +18,12 @@
 
 import static com.google.auto.common.MoreElements.getLocalAndInheritedMethods;
 import static com.google.common.base.Preconditions.checkState;
-import static com.google.common.collect.Iterables.getOnlyElement;
 import static com.squareup.javapoet.MethodSpec.constructorBuilder;
 import static com.squareup.javapoet.MethodSpec.methodBuilder;
 import static dagger.internal.codegen.AnnotationSpecs.Suppression.UNCHECKED;
 import static dagger.internal.codegen.TypeSpecs.addSupertype;
 import static javax.lang.model.element.Modifier.FINAL;
 import static javax.lang.model.element.Modifier.PRIVATE;
-import static javax.lang.model.type.TypeKind.VOID;
 
 import com.google.auto.common.MoreTypes;
 import com.google.common.collect.ImmutableMap;
@@ -35,7 +33,6 @@
 import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.FieldSpec;
 import com.squareup.javapoet.MethodSpec;
-import com.squareup.javapoet.ParameterSpec;
 import com.squareup.javapoet.TypeName;
 import com.squareup.javapoet.TypeSpec;
 import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
@@ -44,7 +41,6 @@
 import java.util.Optional;
 import java.util.Set;
 import javax.lang.model.element.ExecutableElement;
-import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.ExecutableType;
 import javax.lang.model.util.Elements;
@@ -248,7 +244,6 @@ private void implementInterfaceMethods() {
     for (ComponentMethodDescriptor componentMethod :
         graph.componentDescriptor().componentMethods()) {
       if (componentMethod.dependencyRequest().isPresent()) {
-        DependencyRequest interfaceRequest = componentMethod.dependencyRequest().get();
         ExecutableElement methodElement = componentMethod.methodElement();
         ExecutableType requestType =
             MoreTypes.asExecutable(types.asMemberOf(componentType, methodElement));
@@ -258,32 +253,9 @@ private void implementInterfaceMethods() {
         if (interfaceMethodSignatures.add(signature)) {
           MethodSpec.Builder interfaceMethod =
               MethodSpec.overriding(methodElement, componentType, types);
-          List<? extends VariableElement> parameters = methodElement.getParameters();
-          if (interfaceRequest.kind().equals(DependencyRequest.Kind.MEMBERS_INJECTOR)
-              && !parameters.isEmpty() /* i.e. it's not a request for a MembersInjector<T> */) {
-            ParameterSpec parameter = ParameterSpec.get(getOnlyElement(parameters));
-            MembersInjectionBinding binding =
-                graph
-                    .resolvedBindings()
-                    .get(interfaceRequest.bindingKey())
-                    .membersInjectionBinding()
-                    .get();
-            if (requestType.getReturnType().getKind().equals(VOID)) {
-              if (!binding.injectionSites().isEmpty()) {
-                interfaceMethod.addStatement(
-                    "$N($N)", membersInjectionMethods.getOrCreate(binding.key()), parameter);
-              }
-            } else if (binding.injectionSites().isEmpty()) {
-              interfaceMethod.addStatement("return $N", parameter);
-            } else {
-              interfaceMethod.addStatement(
-                  "return $N($N)", membersInjectionMethods.getOrCreate(binding.key()), parameter);
-            }
-          } else {
-            interfaceMethod.addCode(
-                bindingExpressions.getComponentMethodImplementation(
-                    interfaceRequest, generatedComponentModel.name()));
-          }
+          interfaceMethod.addCode(
+              bindingExpressions.getComponentMethodImplementation(
+                  componentMethod, generatedComponentModel.name()));
           interfaceMethods.add(interfaceMethod.build());
         }
       }
diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index 8950e61b2..17aa0d36a 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -204,6 +204,7 @@ java_library(
         "InjectionMethods.java",
         "MapBindingExpression.java",
         "MemberSelect.java",
+        "MembersInjectionBindingExpression.java",
         "MembersInjectionMethods.java",
         "MembersInjectorGenerator.java",
         "MonitoringModuleGenerator.java",
diff --git a/java/dagger/internal/codegen/BindingExpression.java b/java/dagger/internal/codegen/BindingExpression.java
index 745a713e7..567d08866 100644
--- a/java/dagger/internal/codegen/BindingExpression.java
+++ b/java/dagger/internal/codegen/BindingExpression.java
@@ -31,6 +31,7 @@
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.FieldSpec;
+import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
 import java.util.EnumSet;
 import java.util.Optional;
 import javax.lang.model.util.Elements;
@@ -58,8 +59,9 @@ abstract Expression getDependencyExpression(
       DependencyRequest.Kind requestKind, ClassName requestingClass);
 
   /** Returns an expression for the implementation of a component method with the given request. */
-  // TODO(dpb): Consider using ComponentMethodDescriptor instead of DependencyRequest?
-  CodeBlock getComponentMethodImplementation(DependencyRequest request, ClassName requestingClass) {
+  CodeBlock getComponentMethodImplementation(
+      ComponentMethodDescriptor componentMethod, ClassName requestingClass) {
+    DependencyRequest request = componentMethod.dependencyRequest().get();
     checkArgument(request.bindingKey().equals(resolvedBindings().bindingKey()));
     // By default, just delegate to #getDependencyExpression().
     CodeBlock expression = getDependencyExpression(request.kind(), requestingClass).codeBlock();
@@ -174,10 +176,21 @@ private BindingExpression create(
           FrameworkInstanceBindingExpression.create(
               resolvedBindings, memberSelect, frameworkFieldInitializer, types, elements);
 
-      if (!resolvedBindings.bindingType().equals(BindingType.PROVISION)) {
-        return frameworkInstanceBindingExpression;
+      switch (resolvedBindings.bindingType()) {
+        case MEMBERS_INJECTION:
+          return new MembersInjectionBindingExpression(
+              frameworkInstanceBindingExpression,
+              generatedComponentModel,
+              membersInjectionMethods);
+        case PROVISION:
+          return provisionBindingExpression(frameworkInstanceBindingExpression);
+        default:
+          return frameworkInstanceBindingExpression;
       }
+    }
 
+    private BindingExpression provisionBindingExpression(
+        FrameworkInstanceBindingExpression frameworkInstanceBindingExpression) {
       BindingExpression bindingExpression =
           new ProviderOrProducerBindingExpression(
               frameworkInstanceBindingExpression,
@@ -186,6 +199,7 @@ private BindingExpression create(
       BindingExpression inlineBindingExpression =
           inlineProvisionBindingExpression(bindingExpression);
 
+      ResolvedBindings resolvedBindings = frameworkInstanceBindingExpression.resolvedBindings();
       if (usePrivateMethod(resolvedBindings.contributionBinding())) {
         return new PrivateMethodBindingExpression(
             resolvedBindings,
diff --git a/java/dagger/internal/codegen/ComponentBindingExpressions.java b/java/dagger/internal/codegen/ComponentBindingExpressions.java
index 697296592..f54bbe641 100644
--- a/java/dagger/internal/codegen/ComponentBindingExpressions.java
+++ b/java/dagger/internal/codegen/ComponentBindingExpressions.java
@@ -23,6 +23,7 @@
 import com.google.common.collect.ImmutableList;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
+import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
 import java.util.HashMap;
 import java.util.Map;
 import javax.lang.model.type.TypeMirror;
@@ -124,9 +125,10 @@ Expression getDependencyArgumentExpression(
    * @throws IllegalStateException if there is no binding expression that satisfies the dependency
    *     request
    */
-  CodeBlock getComponentMethodImplementation(DependencyRequest request, ClassName requestingClass) {
-    return getBindingExpression(request.bindingKey())
-        .getComponentMethodImplementation(request, requestingClass);
+  CodeBlock getComponentMethodImplementation(
+      ComponentMethodDescriptor componentMethod, ClassName requestingClass) {
+    return getBindingExpression(componentMethod.dependencyRequest().get().bindingKey())
+        .getComponentMethodImplementation(componentMethod, requestingClass);
   }
 
   private BindingExpression getBindingExpression(BindingKey bindingKey) {
diff --git a/java/dagger/internal/codegen/DependencyRequest.java b/java/dagger/internal/codegen/DependencyRequest.java
index 51b173142..7ef78de72 100644
--- a/java/dagger/internal/codegen/DependencyRequest.java
+++ b/java/dagger/internal/codegen/DependencyRequest.java
@@ -484,14 +484,6 @@ DependencyRequest forComponentMembersInjectionMethod(ExecutableElement membersIn
           .build();
     }
 
-    DependencyRequest forMembersInjectedType(DeclaredType type) {
-      return DependencyRequest.builder()
-          .kind(Kind.MEMBERS_INJECTOR)
-          .key(keyFactory.forMembersInjectedType(type))
-          .requestElement(type.asElement())
-          .build();
-    }
-
     DependencyRequest forProductionImplementationExecutor() {
       Key key = keyFactory.forProductionImplementationExecutor();
       return DependencyRequest.builder()
diff --git a/java/dagger/internal/codegen/MembersInjectionBindingExpression.java b/java/dagger/internal/codegen/MembersInjectionBindingExpression.java
new file mode 100644
index 000000000..6539f44d9
--- /dev/null
+++ b/java/dagger/internal/codegen/MembersInjectionBindingExpression.java
@@ -0,0 +1,86 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.internal.codegen;
+
+import static com.google.common.base.Preconditions.checkArgument;
+import static com.google.common.collect.Iterables.getOnlyElement;
+import static javax.lang.model.type.TypeKind.VOID;
+
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
+import com.squareup.javapoet.ParameterSpec;
+import dagger.internal.codegen.ComponentDescriptor.ComponentMethodDescriptor;
+import java.util.List;
+import javax.lang.model.element.ExecutableElement;
+import javax.lang.model.element.VariableElement;
+
+/** A binding expression that can wrap another */
+final class MembersInjectionBindingExpression extends BindingExpression {
+  private final FrameworkInstanceBindingExpression membersInjectorField;
+  private final GeneratedComponentModel generatedComponentModel;
+  private final MembersInjectionBinding binding;
+  private final MembersInjectionMethods membersInjectionMethods;
+
+  MembersInjectionBindingExpression(
+      FrameworkInstanceBindingExpression membersInjectorField,
+      GeneratedComponentModel generatedComponentModel,
+      MembersInjectionMethods membersInjectionMethods) {
+    super(membersInjectorField.resolvedBindings());
+    checkArgument(resolvedBindings().bindingKey().kind().equals(BindingKey.Kind.MEMBERS_INJECTION));
+    this.membersInjectorField = membersInjectorField;
+    this.generatedComponentModel = generatedComponentModel;
+    this.binding = resolvedBindings().membersInjectionBinding().get();
+    this.membersInjectionMethods = membersInjectionMethods;
+  }
+
+  @Override
+  Expression getDependencyExpression(
+      DependencyRequest.Kind requestKind, ClassName requestingClass) {
+    checkArgument(requestKind.equals(DependencyRequest.Kind.MEMBERS_INJECTOR));
+    return membersInjectorField.getDependencyExpression(requestKind, requestingClass);
+  }
+
+  @Override
+  CodeBlock getComponentMethodImplementation(
+      ComponentMethodDescriptor componentMethod, ClassName requestingClass) {
+    DependencyRequest request = componentMethod.dependencyRequest().get();
+    checkArgument(request.bindingKey().equals(resolvedBindings().bindingKey()));
+    checkArgument(request.kind().equals(DependencyRequest.Kind.MEMBERS_INJECTOR));
+
+    ExecutableElement methodElement = componentMethod.methodElement();
+    List<? extends VariableElement> parameters = methodElement.getParameters();
+    if (parameters.isEmpty() /* i.e. it's a request for a MembersInjector<T> */) {
+      return membersInjectorField
+          .getComponentMethodImplementation(componentMethod, generatedComponentModel.name());
+    }
+
+    ParameterSpec parameter = ParameterSpec.get(getOnlyElement(parameters));
+    if (binding.injectionSites().isEmpty()) {
+      return methodElement.getReturnType().getKind().equals(VOID)
+          ? CodeBlock.of("")
+          : CodeBlock.of("return $N;", parameter);
+    } else {
+      return methodElement.getReturnType().getKind().equals(VOID)
+          ? CodeBlock.of("$L;", membersInjectionInvocation(parameter))
+          : CodeBlock.of("return $L;", membersInjectionInvocation(parameter));
+    }
+  }
+
+  CodeBlock membersInjectionInvocation(ParameterSpec target) {
+    return CodeBlock.of("$N($N)", membersInjectionMethods.getOrCreate(binding.key()), target);
+  }
+}
diff --git a/java/dagger/internal/codegen/PrivateMethodBindingExpression.java b/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
index aa221dcb4..4efb8b89c 100644
--- a/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
+++ b/java/dagger/internal/codegen/PrivateMethodBindingExpression.java
@@ -80,17 +80,19 @@
   }
 
   @Override
-  CodeBlock getComponentMethodImplementation(DependencyRequest request, ClassName requestingClass) {
+  CodeBlock getComponentMethodImplementation(
+      ComponentMethodDescriptor componentMethod, ClassName requestingClass) {
+    DependencyRequest request = componentMethod.dependencyRequest().get();
     checkArgument(request.bindingKey().equals(resolvedBindings().bindingKey()));
     if (!canInlineScope() && ignorePrivateMethodStrategy(request.kind())) {
-      return delegate.getComponentMethodImplementation(request, requestingClass);
+      return delegate.getComponentMethodImplementation(componentMethod, requestingClass);
     }
 
     return findComponentMethod(request.kind())
-            .map(method -> method.dependencyRequest().get().equals(request))
+            .map(method -> method.equals(componentMethod))
             .orElse(false)
         ? methodBody(request.kind())
-        : super.getComponentMethodImplementation(request, requestingClass);
+        : super.getComponentMethodImplementation(componentMethod, requestingClass);
   }
 
   @Override
