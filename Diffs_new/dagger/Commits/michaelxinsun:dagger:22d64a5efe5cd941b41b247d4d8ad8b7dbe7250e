diff --git a/java/dagger/internal/codegen/MapBindingExpression.java b/java/dagger/internal/codegen/MapBindingExpression.java
index a3836092a..7dd426345 100644
--- a/java/dagger/internal/codegen/MapBindingExpression.java
+++ b/java/dagger/internal/codegen/MapBindingExpression.java
@@ -69,7 +69,7 @@
   Expression getDependencyExpression(ClassName requestingClass) {
     // TODO(ronshapiro): We should also make an ImmutableMap version of MapFactory
     boolean isImmutableMapAvailable = isImmutableMapAvailable();
-    boolean isBuilderWithExpectedSizeAvailable = isBuilderWithExpectedSizeAvailable();
+    boolean isImmutableMapBuilderWithExpectedSizeAvailable = isImmutableMapBuilderWithExpectedSizeAvailable();
     // TODO(ronshapiro, gak): Use Maps.immutableEnumMap() if it's available?
     if (isImmutableMapAvailable && dependencies.size() <= MAX_IMMUTABLE_MAP_OF_KEY_VALUE_PAIRS) {
       return Expression.create(
@@ -101,7 +101,7 @@ Expression getDependencyExpression(ClassName requestingClass) {
             .add("$T.", isImmutableMapAvailable ? ImmutableMap.class : MapBuilder.class)
             .add(maybeTypeParameters(requestingClass));
         if (isImmutableMapAvailable) {
-          if (isBuilderWithExpectedSizeAvailable) {
+          if (isImmutableMapBuilderWithExpectedSizeAvailable) {
             instantiation.add("builderWithExpectedSize($L)", dependencies.size());
           } else {
             instantiation.add("builder()");
@@ -156,7 +156,7 @@ private boolean isImmutableMapAvailable() {
     return elements.getTypeElement(ImmutableMap.class) != null;
   }
 
-  private boolean isBuilderWithExpectedSizeAvailable() {
+  private boolean isImmutableMapBuilderWithExpectedSizeAvailable() {
     return methodsIn(elements.getTypeElement(ImmutableMap.class).getEnclosedElements())
         .stream()
         .anyMatch(method -> method.getSimpleName().contentEquals("builderWithExpectedSize"));
