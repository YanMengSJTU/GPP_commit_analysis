diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index 900881163..27db8d202 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -236,7 +236,6 @@ java_library(
         "BindingExpression.java",
         "BindingMethodImplementation.java",
         "ComponentBindingExpressions.java",
-        "ComponentBuilder.java",
         "ComponentInstanceBindingExpression.java",
         "ComponentMethodBindingExpression.java",
         "ComponentProvisionBindingExpression.java",
@@ -253,6 +252,7 @@ java_library(
         "FrameworkFieldInitializer.java",
         "FrameworkInstanceBindingExpression.java",
         "FrameworkInstanceSupplier.java",
+        "GeneratedComponentBuilderModel.java",
         "GeneratedComponentModel.java",
         "GeneratedInstanceBindingExpression.java",
         "GwtCompatibility.java",
diff --git a/java/dagger/internal/codegen/ComponentModelBuilder.java b/java/dagger/internal/codegen/ComponentModelBuilder.java
index 0b19d9010..a1d1627d6 100644
--- a/java/dagger/internal/codegen/ComponentModelBuilder.java
+++ b/java/dagger/internal/codegen/ComponentModelBuilder.java
@@ -72,10 +72,12 @@ static GeneratedComponentModel buildComponentModel(
     }
     SubcomponentNames subcomponentNames = new SubcomponentNames(graph, keyFactory);
     OptionalFactories optionalFactories = new OptionalFactories(generatedComponentModel);
-    Optional<ComponentBuilder> builder =
-        ComponentBuilder.create(generatedComponentModel, graph, subcomponentNames, elements, types);
+    Optional<GeneratedComponentBuilderModel> generatedComponentBuilderModel =
+        GeneratedComponentBuilderModel.create(
+            generatedComponentModel, graph, subcomponentNames, elements, types);
     ComponentRequirementFields componentRequirementFields =
-        new ComponentRequirementFields(graph, generatedComponentModel, builder);
+        new ComponentRequirementFields(
+            graph, generatedComponentModel, generatedComponentBuilderModel);
     ComponentBindingExpressions bindingExpressions =
         new ComponentBindingExpressions(
             graph,
@@ -102,7 +104,7 @@ static GeneratedComponentModel buildComponentModel(
               optionalFactories,
               bindingExpressions,
               componentRequirementFields,
-              builder,
+              generatedComponentBuilderModel,
               bindingGraphFactory,
               compilerOptions)
           .build();
@@ -117,7 +119,7 @@ static GeneratedComponentModel buildComponentModel(
               optionalFactories,
               bindingExpressions,
               componentRequirementFields,
-              builder,
+              generatedComponentBuilderModel,
               bindingGraphFactory,
               compilerOptions)
           .build();
@@ -133,7 +135,7 @@ static GeneratedComponentModel buildComponentModel(
   private final ComponentRequirementFields componentRequirementFields;
   private final GeneratedComponentModel generatedComponentModel;
   private final OptionalFactories optionalFactories;
-  private final Optional<ComponentBuilder> builder;
+  private final Optional<GeneratedComponentBuilderModel> generatedComponentBuilderModel;
   private final BindingGraphFactory bindingGraphFactory;
   private final CompilerOptions compilerOptions;
   private boolean done;
@@ -148,7 +150,7 @@ private ComponentModelBuilder(
       OptionalFactories optionalFactories,
       ComponentBindingExpressions bindingExpressions,
       ComponentRequirementFields componentRequirementFields,
-      Optional<ComponentBuilder> builder,
+      Optional<GeneratedComponentBuilderModel> generatedComponentBuilderModel,
       BindingGraphFactory bindingGraphFactory,
       CompilerOptions compilerOptions) {
     this.types = types;
@@ -160,7 +162,7 @@ private ComponentModelBuilder(
     this.optionalFactories = optionalFactories;
     this.bindingExpressions = bindingExpressions;
     this.componentRequirementFields = componentRequirementFields;
-    this.builder = builder;
+    this.generatedComponentBuilderModel = generatedComponentBuilderModel;
     this.bindingGraphFactory = bindingGraphFactory;
     this.compilerOptions = compilerOptions;
   }
@@ -176,7 +178,9 @@ protected final GeneratedComponentModel build() {
         "ComponentModelBuilder has already built the GeneratedComponentModel for [%s].",
         generatedComponentModel.name());
     setSupertype();
-    builder.map(ComponentBuilder::typeSpec).ifPresent(this::addBuilderClass);
+    generatedComponentBuilderModel
+        .map(GeneratedComponentBuilderModel::typeSpec)
+        .ifPresent(this::addBuilderClass);
 
     getLocalAndInheritedMethods(
             graph.componentDescriptor().componentDefinitionType(), types, elements)
@@ -249,10 +253,11 @@ private GeneratedComponentModel buildAbstractInnerSubcomponentModel(BindingGraph
         getSubcomponentSupermodel(childGraph.componentDescriptor());
     GeneratedComponentModel childModel =
         GeneratedComponentModel.forAbstractSubcomponent(childName, supermodel);
-    Optional<ComponentBuilder> childBuilder =
-        ComponentBuilder.create(childModel, childGraph, subcomponentNames, elements, types);
+    Optional<GeneratedComponentBuilderModel> childBuilderModel =
+        GeneratedComponentBuilderModel.create(
+            childModel, childGraph, subcomponentNames, elements, types);
     ComponentRequirementFields childComponentRequirementFields =
-        componentRequirementFields.forChildComponent(childGraph, childModel, childBuilder);
+        componentRequirementFields.forChildComponent(childGraph, childModel, childBuilderModel);
     ComponentBindingExpressions childBindingExpressions =
         bindingExpressions.forChildComponent(
             childGraph, childModel, childComponentRequirementFields);
@@ -267,7 +272,7 @@ private GeneratedComponentModel buildAbstractInnerSubcomponentModel(BindingGraph
             optionalFactories,
             childBindingExpressions,
             childComponentRequirementFields,
-            childBuilder,
+            childBuilderModel,
             bindingGraphFactory,
             compilerOptions)
         .build();
@@ -310,10 +315,11 @@ private GeneratedComponentModel buildSubcomponentModel(BindingGraph childGraph)
     ClassName childName =
         parentName.nestedClass(subcomponentNames.get(childGraph.componentDescriptor()) + "Impl");
     GeneratedComponentModel childModel = GeneratedComponentModel.forSubcomponent(childName);
-    Optional<ComponentBuilder> childBuilder =
-        ComponentBuilder.create(childModel, childGraph, subcomponentNames, elements, types);
+    Optional<GeneratedComponentBuilderModel> childBuilderModel =
+        GeneratedComponentBuilderModel.create(
+            childModel, childGraph, subcomponentNames, elements, types);
     ComponentRequirementFields childComponentRequirementFields =
-        componentRequirementFields.forChildComponent(childGraph, childModel, childBuilder);
+        componentRequirementFields.forChildComponent(childGraph, childModel, childBuilderModel);
     ComponentBindingExpressions childBindingExpressions =
         bindingExpressions.forChildComponent(
             childGraph, childModel, childComponentRequirementFields);
@@ -323,7 +329,7 @@ private GeneratedComponentModel buildSubcomponentModel(BindingGraph childGraph)
             childModel,
             childBindingExpressions,
             childComponentRequirementFields,
-            childBuilder)
+            childBuilderModel)
         .build();
   }
 
@@ -386,8 +392,9 @@ private void addConstructor() {
 
   /** Returns the list of {@link ParameterSpec}s for the constructor. */
   private ImmutableList<ParameterSpec> constructorParameters() {
-    if (builder.isPresent()) {
-      return ImmutableList.of(ParameterSpec.builder(builder.get().name(), "builder").build());
+    if (generatedComponentBuilderModel.isPresent()) {
+      return ImmutableList.of(
+          ParameterSpec.builder(generatedComponentBuilderModel.get().name(), "builder").build());
     } else if (graph.factoryMethod().isPresent()) {
       return getFactoryMethodParameterSpecs(graph);
     } else if (generatedComponentModel.isAbstract() && !generatedComponentModel.isNested()) {
@@ -410,7 +417,7 @@ private void addConstructor() {
         OptionalFactories optionalFactories,
         ComponentBindingExpressions bindingExpressions,
         ComponentRequirementFields componentRequirementFields,
-        Optional<ComponentBuilder> builder,
+        Optional<GeneratedComponentBuilderModel> generatedComponentBuilderModel,
         BindingGraphFactory bindingGraphFactory,
         CompilerOptions compilerOptions) {
       super(
@@ -423,7 +430,7 @@ private void addConstructor() {
           optionalFactories,
           bindingExpressions,
           componentRequirementFields,
-          builder,
+          generatedComponentBuilderModel,
           bindingGraphFactory,
           compilerOptions);
     }
@@ -443,8 +450,8 @@ protected void addFactoryMethods() {
               .returns(
                   builderSpec().isPresent()
                       ? ClassName.get(builderSpec().get().builderDefinitionType())
-                      : super.builder.get().name())
-              .addStatement("return new $T()", super.builder.get().name())
+                      : super.generatedComponentBuilderModel.get().name())
+              .addStatement("return new $T()", super.generatedComponentBuilderModel.get().name())
               .build();
       super.generatedComponentModel.addMethod(BUILDER_METHOD, builderFactoryMethod);
       if (canInstantiateAllRequirements()) {
@@ -485,7 +492,7 @@ private boolean canInstantiateAllRequirements() {
         GeneratedComponentModel generatedComponentModel,
         ComponentBindingExpressions bindingExpressions,
         ComponentRequirementFields componentRequirementFields,
-        Optional<ComponentBuilder> builder) {
+        Optional<GeneratedComponentBuilderModel> generatedComponentBuilderModel) {
       super(
           parent.types,
           parent.elements,
@@ -496,7 +503,7 @@ private boolean canInstantiateAllRequirements() {
           parent.optionalFactories,
           bindingExpressions,
           componentRequirementFields,
-          builder,
+          generatedComponentBuilderModel,
           parent.bindingGraphFactory,
           parent.compilerOptions);
       this.parent = parent;
@@ -550,7 +557,7 @@ private DeclaredType parentType() {
         OptionalFactories optionalFactories,
         ComponentBindingExpressions bindingExpressions,
         ComponentRequirementFields componentRequirementFields,
-        Optional<ComponentBuilder> builder,
+        Optional<GeneratedComponentBuilderModel> generatedComponentBuilderModel,
         BindingGraphFactory bindingGraphFactory,
         CompilerOptions compilerOptions) {
       super(
@@ -563,7 +570,7 @@ private DeclaredType parentType() {
           optionalFactories,
           bindingExpressions,
           componentRequirementFields,
-          builder,
+          generatedComponentBuilderModel,
           bindingGraphFactory,
           compilerOptions);
       this.parent = parent;
diff --git a/java/dagger/internal/codegen/ComponentRequirementFields.java b/java/dagger/internal/codegen/ComponentRequirementFields.java
index 62d6aa6fc..cef581b07 100644
--- a/java/dagger/internal/codegen/ComponentRequirementFields.java
+++ b/java/dagger/internal/codegen/ComponentRequirementFields.java
@@ -47,33 +47,33 @@
       new HashMap<>();
   private final BindingGraph graph;
   private final GeneratedComponentModel generatedComponentModel;
-  private final Optional<ComponentBuilder> componentBuilder;
+  private final Optional<GeneratedComponentBuilderModel> generatedComponentBuilderModel;
 
   private ComponentRequirementFields(
       Optional<ComponentRequirementFields> parent,
       BindingGraph graph,
       GeneratedComponentModel generatedComponentModel,
-      Optional<ComponentBuilder> componentBuilder) {
+      Optional<GeneratedComponentBuilderModel> generatedComponentBuilderModel) {
     this.parent = parent;
     this.graph = graph;
     this.generatedComponentModel = generatedComponentModel;
-    this.componentBuilder = componentBuilder;
+    this.generatedComponentBuilderModel = generatedComponentBuilderModel;
   }
 
   ComponentRequirementFields(
       BindingGraph graph,
       GeneratedComponentModel generatedComponentModel,
-      Optional<ComponentBuilder> componentBuilder) {
-    this(Optional.empty(), graph, generatedComponentModel, componentBuilder);
+      Optional<GeneratedComponentBuilderModel> generatedComponentBuilderModel) {
+    this(Optional.empty(), graph, generatedComponentModel, generatedComponentBuilderModel);
   }
 
   /** Returns a new object representing the fields available from a child component of this one. */
   ComponentRequirementFields forChildComponent(
       BindingGraph graph,
       GeneratedComponentModel generatedComponentModel,
-      Optional<ComponentBuilder> componentBuilder) {
+      Optional<GeneratedComponentBuilderModel> generatedComponentBuilderModel) {
     return new ComponentRequirementFields(
-        Optional.of(this), graph, generatedComponentModel, componentBuilder);
+        Optional.of(this), graph, generatedComponentModel, generatedComponentBuilderModel);
   }
 
   /**
@@ -110,8 +110,9 @@ ComponentRequirementField getField(ComponentRequirement componentRequirement) {
 
   /** Returns a {@link ComponentRequirementField} for a {@link ComponentRequirement}. */
   private ComponentRequirementField create(ComponentRequirement requirement) {
-    if (componentBuilder.isPresent()) {
-      FieldSpec builderField = componentBuilder.get().builderFields().get(requirement);
+    if (generatedComponentBuilderModel.isPresent()) {
+      FieldSpec builderField =
+          generatedComponentBuilderModel.get().builderFields().get(requirement);
       return new BuilderField(requirement, generatedComponentModel, builderField);
     } else if (graph.factoryMethod().isPresent()
         && graph.factoryMethodParameters().containsKey(requirement)) {
diff --git a/java/dagger/internal/codegen/ComponentBuilder.java b/java/dagger/internal/codegen/GeneratedComponentBuilderModel.java
similarity index 98%
rename from java/dagger/internal/codegen/ComponentBuilder.java
rename to java/dagger/internal/codegen/GeneratedComponentBuilderModel.java
index d4ad5fd5f..f544f5bf4 100644
--- a/java/dagger/internal/codegen/ComponentBuilder.java
+++ b/java/dagger/internal/codegen/GeneratedComponentBuilderModel.java
@@ -50,12 +50,12 @@
 import javax.lang.model.util.Types;
 
 /** Models the generated code for a component builder. */
-final class ComponentBuilder {
+final class GeneratedComponentBuilderModel {
   private final TypeSpec typeSpec;
   private final ClassName name;
   private final ImmutableMap<ComponentRequirement, FieldSpec> builderFields;
 
-  private ComponentBuilder(
+  private GeneratedComponentBuilderModel(
       TypeSpec typeSpec,
       ClassName name,
       ImmutableMap<ComponentRequirement, FieldSpec> builderFields) {
@@ -76,7 +76,7 @@ ClassName name() {
     return builderFields;
   }
 
-  static Optional<ComponentBuilder> create(
+  static Optional<GeneratedComponentBuilderModel> create(
       GeneratedComponentModel generatedComponentModel,
       BindingGraph graph,
       SubcomponentNames subcomponentNames,
@@ -127,7 +127,7 @@ private static boolean hasBuilder(ComponentDescriptor component) {
       this.types = types;
     }
 
-    ComponentBuilder create() {
+    GeneratedComponentBuilderModel create() {
       if (builderSpec().isPresent()) {
         if (generatedComponentModel.isAbstract()) {
           builder.addModifiers(PROTECTED);
@@ -154,7 +154,7 @@ ComponentBuilder create() {
           // compile-testing tests that rely on the order of the methods
           .addMethods(builderMethods(builderFields));
 
-      return new ComponentBuilder(builder.build(), builderName, builderFields);
+      return new GeneratedComponentBuilderModel(builder.build(), builderName, builderFields);
     }
 
     /** Set the superclass being extended or interface being implemented for this builder. */
