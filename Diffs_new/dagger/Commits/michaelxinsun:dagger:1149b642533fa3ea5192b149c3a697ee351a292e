diff --git a/java/dagger/internal/codegen/MapBindingExpression.java b/java/dagger/internal/codegen/MapBindingExpression.java
index 625cd7a24..dfc4c5dd1 100644
--- a/java/dagger/internal/codegen/MapBindingExpression.java
+++ b/java/dagger/internal/codegen/MapBindingExpression.java
@@ -68,8 +68,8 @@
   @Override
   Expression getDependencyExpression(ClassName requestingClass) {
     // TODO(ronshapiro): We should also make an ImmutableMap version of MapFactory
-    boolean isImmutableMapAvailable = isImmutableMapAvailable();
     boolean isImmutableMapBuilderWithExpectedSizeAvailable = isImmutableMapBuilderWithExpectedSizeAvailable();
+    boolean isImmutableMapAvailable = isImmutableMapAvailable();
     // TODO(ronshapiro, gak): Use Maps.immutableEnumMap() if it's available?
     if (isImmutableMapAvailable && dependencies.size() <= MAX_IMMUTABLE_MAP_OF_KEY_VALUE_PAIRS) {
       return Expression.create(
@@ -150,10 +150,6 @@ private CodeBlock maybeTypeParameters(ClassName requestingClass) {
         : CodeBlock.of("");
   }
 
-  private boolean isImmutableMapAvailable() {
-    return elements.getTypeElement(ImmutableMap.class) != null;
-  }
-
   private boolean isImmutableMapBuilderWithExpectedSizeAvailable() {
     if (isImmutableMapAvailable()) {
       return methodsIn(elements.getTypeElement(ImmutableMap.class).getEnclosedElements())
@@ -162,4 +158,8 @@ private boolean isImmutableMapBuilderWithExpectedSizeAvailable() {
     }
     return false;
   }
+
+  private boolean isImmutableMapAvailable() {
+    return elements.getTypeElement(ImmutableMap.class) != null;
+  }
 }
