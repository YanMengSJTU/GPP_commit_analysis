diff --git a/java/dagger/internal/codegen/BindingFactory.java b/java/dagger/internal/codegen/BindingFactory.java
index 5517e8440..808bd9627 100644
--- a/java/dagger/internal/codegen/BindingFactory.java
+++ b/java/dagger/internal/codegen/BindingFactory.java
@@ -547,9 +547,6 @@ MembersInjectionBinding membersInjectionBinding(
             .flatMap(injectionSite -> injectionSite.dependencies().stream())
             .collect(toImmutableSet());
 
-    Optional<Key> parentKey =
-        types.nonObjectSuperclass(declaredType).map(keyFactory::forMembersInjectedType);
-
     Key key = keyFactory.forMembersInjectedType(declaredType);
     TypeElement typeElement = MoreElements.asType(declaredType.asElement());
     return new AutoValue_MembersInjectionBinding(
@@ -560,8 +557,7 @@ MembersInjectionBinding membersInjectionBinding(
             ? Optional.of(
                 membersInjectionBinding(asDeclared(typeElement.asType()), Optional.empty()))
             : Optional.empty(),
-        injectionSites,
-        parentKey);
+        injectionSites);
   }
 
   private final ElementVisitor<Optional<InjectionSite>, DeclaredType> injectionSiteVisitor =
diff --git a/java/dagger/internal/codegen/InjectBindingRegistryImpl.java b/java/dagger/internal/codegen/InjectBindingRegistryImpl.java
index 6688749f8..add4c7669 100644
--- a/java/dagger/internal/codegen/InjectBindingRegistryImpl.java
+++ b/java/dagger/internal/codegen/InjectBindingRegistryImpl.java
@@ -271,8 +271,10 @@ private void registerBinding(MembersInjectionBinding binding, boolean warnIfNotA
     if (report.isClean()) {
       MembersInjectionBinding binding = bindingFactory.membersInjectionBinding(type, resolvedType);
       registerBinding(binding, warnIfNotAlreadyGenerated);
-      if (binding.parentKey().isPresent() && !binding.injectionSites().isEmpty()) {
-        getOrFindMembersInjectionBinding(binding.parentKey().get());
+      for (Optional<DeclaredType> supertype = types.nonObjectSuperclass(type);
+          supertype.isPresent();
+          supertype = types.nonObjectSuperclass(supertype.get())) {
+        getOrFindMembersInjectionBinding(keyFactory.forMembersInjectedType(supertype.get()));
       }
       return Optional.of(binding);
     }
diff --git a/java/dagger/internal/codegen/MembersInjectionBinding.java b/java/dagger/internal/codegen/MembersInjectionBinding.java
index 81f3f99f2..81dd05b5f 100644
--- a/java/dagger/internal/codegen/MembersInjectionBinding.java
+++ b/java/dagger/internal/codegen/MembersInjectionBinding.java
@@ -25,7 +25,6 @@
 import com.google.common.collect.ImmutableSortedSet;
 import dagger.model.BindingKind;
 import dagger.model.DependencyRequest;
-import dagger.model.Key;
 import java.util.Optional;
 import javax.inject.Inject;
 import javax.lang.model.element.Element;
@@ -55,12 +54,6 @@
   /** The set of individual sites where {@link Inject} is applied. */
   abstract ImmutableSortedSet<InjectionSite> injectionSites();
 
-  /**
-   * The {@link Key} for the non-object superclass of {@link #bindingElement()}. Absent if
-   * {@link #bindingElement()} is a direct subclass of {@link Object}. 
-   */
-  abstract Optional<Key> parentKey();
-
   @Override
   BindingType bindingType() {
     return BindingType.MEMBERS_INJECTION;
