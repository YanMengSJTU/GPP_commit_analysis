diff --git a/java/dagger/internal/DelegateFactory.java b/java/dagger/internal/DelegateFactory.java
index 4ec047ca8..416c2a172 100644
--- a/java/dagger/internal/DelegateFactory.java
+++ b/java/dagger/internal/DelegateFactory.java
@@ -16,6 +16,8 @@
 
 package dagger.internal;
 
+import static dagger.internal.Preconditions.checkNotNull;
+
 import javax.inject.Provider;
 
 /**
@@ -34,14 +36,26 @@ public T get() {
     return delegate.get();
   }
 
+  // TODO(ronshapiro): remove this once we can reasonably expect generated code is no longer using
+  // this method
+  @Deprecated
   public void setDelegatedProvider(Provider<T> delegate) {
-    if (delegate == null) {
-      throw new IllegalArgumentException();
-    }
-    if (this.delegate != null) {
+    setDelegate(this, delegate);
+  }
+
+  /**
+   * Sets {@code delegateFactory}'s delegate provider to {@code delegate}.
+   *
+   * <p>{@code delegateFactory} must be an instance of {@link DelegateFactory}, otherwise this
+   * method will throw a {@link ClassCastException}.
+   */
+  public static <T> void setDelegate(Provider<T> delegateFactory, Provider<T> delegate) {
+    checkNotNull(delegate);
+    DelegateFactory<T> asDelegateFactory = (DelegateFactory<T>) delegateFactory;
+    if (asDelegateFactory.delegate != null) {
       throw new IllegalStateException();
     }
-    this.delegate = delegate;
+    asDelegateFactory.delegate = delegate;
   }
 }
 
diff --git a/java/dagger/internal/codegen/FrameworkFieldInitializer.java b/java/dagger/internal/codegen/FrameworkFieldInitializer.java
index ae81fe58a..da349b8a8 100644
--- a/java/dagger/internal/codegen/FrameworkFieldInitializer.java
+++ b/java/dagger/internal/codegen/FrameworkFieldInitializer.java
@@ -107,29 +107,10 @@ private void initializeField() {
         CodeBlock fieldInitialization = frameworkInstanceCreationExpression.creationExpression();
         CodeBlock initCode = CodeBlock.of("this.$N = $L;", getOrCreateField(), fieldInitialization);
 
-        if (isReplacingSuperclassFrameworkInstance()) {
-          // TODO(ronshapiro): can we have DELEGATED share this branch? If we allow the FieldSpec
-          // to be modified in the ComponentImplementation, we can give it the same initializer to a
-          // delegate factory
-          CodeBlock delegateFactoryVariable = CodeBlock.of("$NDelegate", fieldSpec);
-          // TODO(ronshapiro): Use a type parameter here. Or even better, can a static method that
-          // accepts the delegate factory and the delegated instance infer the type parameters?
-          // And then we also don't need a cast.
-          codeBuilder
-              .add("$1T $2L = ($1T) $3N;", delegateType(), delegateFactoryVariable, fieldSpec)
-              .add(
-                  "$L.$N($L);",
-                  delegateFactoryVariable,
-                  setDelegateMethodName(),
-                  fieldInitialization);
-        } else if (fieldInitializationState == InitializationState.DELEGATED) {
-          // If we were recursively invoked, set the delegate factory as part of our initialization
-          CodeBlock delegateFactoryVariable = CodeBlock.of("$NDelegate", fieldSpec);
-          codeBuilder
-              .add(
-                  "$1T $2L = ($1T) $3N;", DelegateFactory.class, delegateFactoryVariable, fieldSpec)
-              .add(initCode)
-              .add("$L.setDelegatedProvider($N);", delegateFactoryVariable, fieldSpec);
+        if (isReplacingSuperclassFrameworkInstance()
+            || fieldInitializationState == InitializationState.DELEGATED) {
+          codeBuilder.add(
+              "$T.setDelegate($N, $L);", delegateType(), fieldSpec, fieldInitialization);
         } else {
           codeBuilder.add(initCode);
         }
@@ -142,7 +123,7 @@ private void initializeField() {
         // We were recursively invoked, so create a delegate factory instead
         fieldInitializationState = InitializationState.DELEGATED;
         componentImplementation.addInitialization(
-            CodeBlock.of("this.$N = new $T<>();", getOrCreateField(), DelegateFactory.class));
+            CodeBlock.of("this.$N = new $T<>();", getOrCreateField(), delegateType()));
         break;
 
       case DELEGATED:
@@ -226,10 +207,6 @@ private boolean isReplacingSuperclassFrameworkInstance() {
     return isProvider() ? DelegateFactory.class : DelegateProducer.class;
   }
 
-  private String setDelegateMethodName() {
-    return isProvider() ? "setDelegatedProvider" : "setDelegatedProducer";
-  }
-
   private boolean isProvider() {
     return resolvedBindings.bindingType().equals(BindingType.PROVISION)
         && frameworkInstanceCreationExpression
diff --git a/java/dagger/producers/internal/DelegateProducer.java b/java/dagger/producers/internal/DelegateProducer.java
index 896c3669a..55ab3a705 100644
--- a/java/dagger/producers/internal/DelegateProducer.java
+++ b/java/dagger/producers/internal/DelegateProducer.java
@@ -16,6 +16,8 @@
 
 package dagger.producers.internal;
 
+import static dagger.internal.Preconditions.checkNotNull;
+
 import com.google.common.util.concurrent.ListenableFuture;
 import dagger.internal.DoubleCheck;
 import dagger.producers.Producer;
@@ -33,14 +35,26 @@
     return delegate.get();
   }
 
+  // TODO(ronshapiro): remove this once we can reasonably expect generated code is no longer using
+  // this method
+  @Deprecated
   public void setDelegatedProducer(Producer<T> delegate) {
-    if (delegate == null) {
-      throw new IllegalArgumentException();
-    }
-    if (this.delegate != null) {
+    setDelegate(this, delegate);
+  }
+
+  /**
+   * Sets {@code delegateProducer}'s delegate producer to {@code delegate}.
+   *
+   * <p>{@code delegateProducer} must be an instance of {@link DelegateProducer}, otherwise this
+   * method will throw a {@link ClassCastException}.
+   */
+  public static <T> void setDelegate(Producer<T> delegateProducer, Producer<T> delegate) {
+    checkNotNull(delegate);
+    DelegateProducer<T> asDelegateProducer = (DelegateProducer<T>) delegateProducer;
+    if (asDelegateProducer.delegate != null) {
       throw new IllegalStateException();
     }
-    this.delegate = (CancellableProducer<T>) (CancellableProducer) delegate;
+    asDelegateProducer.delegate = (CancellableProducer<T>) delegate;
   }
 
   @Override
diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
index 80e621a0b..71ee8d5aa 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
@@ -2514,9 +2514,8 @@ public void setMultibindings_contributionsInLeafAndAncestor_frameworkInstances()
             "",
             "    @SuppressWarnings(\"unchecked\")",
             "    private void initialize() {",
-            "      DelegateFactory setOfInEachSubcomponentProviderDelegate =",
-            "          (DelegateFactory) setOfInEachSubcomponentProvider;",
-            "      setOfInEachSubcomponentProviderDelegate.setDelegatedProvider(",
+            "      DelegateFactory.setDelegate(",
+            "          setOfInEachSubcomponentProvider,",
             "          SetFactory.<InEachSubcomponent>builder(0, 2)",
             "              .addCollectionProvider(super.contributionsInEachSubcomponent())",
             "              .addCollectionProvider(",
@@ -2952,9 +2951,8 @@ public void mapMultibindings_contributionsInLeafAndAncestor_frameworkInstance()
             "",
             "    @SuppressWarnings(\"unchecked\")",
             "    private void initialize() { ",
-            "      DelegateFactory mapOfStringAndInEachSubcomponentProviderDelegate =",
-            "          (DelegateFactory) mapOfStringAndInEachSubcomponentProvider;",
-            "      mapOfStringAndInEachSubcomponentProviderDelegate.setDelegatedProvider(",
+            "      DelegateFactory.setDelegate(",
+            "          mapOfStringAndInEachSubcomponentProvider,",
             "          MapFactory.<String, InEachSubcomponent>builder(2)",
             "              .putAll(super.contributionsInEachSubcomponent())",
             "              .put(",
@@ -3625,9 +3623,8 @@ public void emptyMultibinds_set_frameworkInstance() {
             "",
             "    @SuppressWarnings(\"unchecked\")",
             "    private void initialize() {",
-            "      DelegateFactory setOfMultiboundProviderDelegate = ",
-            "          (DelegateFactory) setOfMultiboundProvider;",
-            "      setOfMultiboundProviderDelegate.setDelegatedProvider(",
+            "      DelegateFactory.setDelegate(",
+            "          setOfMultiboundProvider,",
             "          SetFactory.<Multibound>builder(1, 0)",
             "              .addProvider(AncestorModule_FromAncestorFactory.create())",
             "              .build());",
@@ -3869,9 +3866,8 @@ public void emptyMultibinds_map_frameworkInstance() {
             "",
             "    @SuppressWarnings(\"unchecked\")",
             "    private void initialize() {",
-            "      DelegateFactory mapOfIntegerAndMultiboundProviderDelegate =",
-            "          (DelegateFactory) mapOfIntegerAndMultiboundProvider;",
-            "      mapOfIntegerAndMultiboundProviderDelegate.setDelegatedProvider(",
+            "      DelegateFactory.setDelegate(",
+            "          mapOfIntegerAndMultiboundProvider,",
             "          MapFactory.<Integer, Multibound>builder(1)",
             "              .put(111, AncestorModule_FromAncestorFactory.create())",
             "              .build());",
@@ -5004,9 +5000,8 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             "",
             "    @SuppressWarnings(\"unchecked\")",
             "    private void initialize(final LeafBuilder builder) {",
-            "      DelegateProducer setOfResponseProducerDelegate = ",
-            "          (DelegateProducer) setOfResponseProducer;",
-            "      setOfResponseProducerDelegate.setDelegatedProducer(",
+            "      DelegateProducer.setDelegate(",
+            "          setOfResponseProducer,",
             "          SetProducer.<Response>builder(1, 1)",
             "              .addCollectionProducer(super.getSetOfResponseProducer())",
             "              .addProducer(DaggerRoot.this.responseProducer)",
@@ -5492,9 +5487,8 @@ public void missingBindingAccessInLeafAndAncestor() {
             "              .addProvider(AncestorModule_SetContributionFactory.create())",
             "              .addProvider(unresolvedSetBindingProvider)",
             "              .build();",
-            "      DelegateFactory providedInAncestorProviderDelegate =",
-            "          (DelegateFactory) providedInAncestorProvider;",
-            "      providedInAncestorProviderDelegate.setDelegatedProvider(",
+            "      DelegateFactory.setDelegate(",
+            "          providedInAncestorProvider,",
             "          AncestorModule_ProvidedInAncestorFactory.create(getSetOfObjectProvider()));",
 
             "    }",
@@ -6621,14 +6615,13 @@ public void modifiedProducerFromProvider() {
             "",
             "    @SuppressWarnings(\"unchecked\")",
             "    private void initialize() {",
-            "      DelegateFactory productionImplementationExecutorProviderDelegate =",
-            "          (DelegateFactory) productionImplementationExecutorProvider;",
-            "      productionImplementationExecutorProviderDelegate.setDelegatedProvider(",
+            "      DelegateFactory.setDelegate(",
+            "          productionImplementationExecutorProvider,",
             "          DoubleCheck.provider(",
-            "          (Provider) RootModule_ProductionExecutorFactory.create()));",
+            "              (Provider) RootModule_ProductionExecutorFactory.create()));",
             "      this.leafProvider = InstanceFactory.create((Leaf) this);",
-            "      DelegateFactory monitorProviderDelegate = (DelegateFactory) monitorProvider;",
-            "      monitorProviderDelegate.setDelegatedProvider(",
+            "      DelegateFactory.setDelegate(",
+            "          monitorProvider,",
             "          DoubleCheck.provider(",
             "              Leaf_MonitoringModule_MonitorFactory.create(",
             "                  leafProvider, getSetOfFactoryProvider())));",
@@ -6636,9 +6629,8 @@ public void modifiedProducerFromProvider() {
             "          SetFactory.<String>builder(1, 0)",
             "              .addProvider(RootModule_InduceModificationInLeafFactory.create())",
             "              .build();",
-            "      DelegateProducer setOfStringProducerDelegate = ",
-            "          (DelegateProducer) setOfStringProducer;",
-            "      setOfStringProducerDelegate.setDelegatedProducer(",
+            "      DelegateProducer.setDelegate(",
+            "          setOfStringProducer,",
             "          Producers.producerFromProvider(getSetOfStringProvider()));",
             "    }",
             "",
