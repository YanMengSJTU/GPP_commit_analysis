diff --git a/java/dagger/internal/SetBuilder.java b/java/dagger/internal/SetBuilder.java
index 16bc589f7..41a2fc721 100644
--- a/java/dagger/internal/SetBuilder.java
+++ b/java/dagger/internal/SetBuilder.java
@@ -16,6 +16,8 @@
 
 package dagger.internal;
 
+import static dagger.internal.Preconditions.checkNotNull;
+
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
@@ -28,6 +30,8 @@
  * must be created in one fluent statement for inlined request fulfillments.
  */
 public final class SetBuilder<T> {
+  private static final String SET_CONTRIBUTIONS_CANNOT_BE_NULL =
+      "Set contributions cannot be null";
   private final List<T> contributions;
 
   private SetBuilder(int estimatedSize) {
@@ -44,11 +48,14 @@ private SetBuilder(int estimatedSize) {
   }
 
   public SetBuilder<T> add(T t) {
-    contributions.add(t);
+    contributions.add(checkNotNull(t, SET_CONTRIBUTIONS_CANNOT_BE_NULL));
     return this;
   }
 
   public SetBuilder<T> addAll(Collection<? extends T> collection) {
+    for (T item : collection) {
+      checkNotNull(item, SET_CONTRIBUTIONS_CANNOT_BE_NULL);
+    }
     contributions.addAll(collection);
     return this;
   }
diff --git a/javatests/dagger/internal/SetBuilderTest.java b/javatests/dagger/internal/SetBuilderTest.java
new file mode 100644
index 000000000..ac7831234
--- /dev/null
+++ b/javatests/dagger/internal/SetBuilderTest.java
@@ -0,0 +1,62 @@
+/*
+ * Copyright (C) 2017 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.internal;
+
+import static org.junit.Assert.fail;
+
+import java.util.Arrays;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+
+@RunWith(JUnit4.class)
+public class SetBuilderTest {
+  private SetBuilder<String> setBuilder;
+
+  @Before
+  public void setUp() {
+    setBuilder = SetBuilder.newSetBuilder(1);
+  }
+
+  @Test
+  public void addNull() {
+    try {
+      setBuilder.add(null);
+      fail();
+    } catch (NullPointerException expected) {
+    }
+  }
+
+  @Test
+  public void addNullCollection() {
+    try {
+      setBuilder.addAll(null);
+      fail();
+    } catch (NullPointerException expected) {
+    }
+  }
+
+  @Test
+  public void addNullElement() {
+    try {
+      setBuilder.addAll(Arrays.asList("hello", null, "world"));
+      fail();
+    } catch (NullPointerException expected) {
+    }
+  }
+}
