diff --git a/java/dagger/internal/codegen/AnyBindingMethodValidator.java b/java/dagger/internal/codegen/AnyBindingMethodValidator.java
index a8a483e11..7b338ea1f 100644
--- a/java/dagger/internal/codegen/AnyBindingMethodValidator.java
+++ b/java/dagger/internal/codegen/AnyBindingMethodValidator.java
@@ -21,6 +21,7 @@
 import static com.google.common.collect.Maps.uniqueIndex;
 import static dagger.internal.codegen.DaggerElements.isAnyAnnotationPresent;
 import static dagger.internal.codegen.ErrorMessages.tooManyBindingMethodAnnotations;
+import static dagger.internal.codegen.Util.reentrantComputeIfAbsent;
 import static dagger.internal.codegen.Util.toImmutableSet;
 import static java.util.Arrays.asList;
 
@@ -69,7 +70,7 @@ boolean isBindingMethod(ExecutableElement method) {
    *     #methodAnnotations() binding method annotation}
    */
   ValidationReport<ExecutableElement> validate(ExecutableElement method) {
-    return reports.computeIfAbsent(method, this::validateUncached);
+    return reentrantComputeIfAbsent(reports, method, this::validateUncached);
   }
 
   /**
diff --git a/java/dagger/internal/codegen/BindingGraph.java b/java/dagger/internal/codegen/BindingGraph.java
index b412d80c3..25feb5b0b 100644
--- a/java/dagger/internal/codegen/BindingGraph.java
+++ b/java/dagger/internal/codegen/BindingGraph.java
@@ -28,6 +28,7 @@
 import static dagger.internal.codegen.ContributionBinding.Kind.SYNTHETIC_OPTIONAL_BINDING;
 import static dagger.internal.codegen.Key.indexByKey;
 import static dagger.internal.codegen.Scope.reusableScope;
+import static dagger.internal.codegen.Util.reentrantComputeIfAbsent;
 import static dagger.internal.codegen.Util.toImmutableSet;
 import static java.util.function.Predicate.isEqual;
 import static javax.lang.model.element.Modifier.ABSTRACT;
@@ -1033,8 +1034,10 @@ boolean dependsOnLocalBindings(BindingKey bindingKey) {
           if (!cycleChecker.add(bindingKey)) {
             return false;
           }
-          return bindingKeyDependsOnLocalBindingsCache.computeIfAbsent(
-              bindingKey, this::dependsOnLocalBindingsUncached);
+          return reentrantComputeIfAbsent(
+              bindingKeyDependsOnLocalBindingsCache,
+              bindingKey,
+              this::dependsOnLocalBindingsUncached);
         }
 
         private boolean dependsOnLocalBindingsUncached(BindingKey bindingKey) {
@@ -1071,8 +1074,8 @@ boolean dependsOnLocalBindings(Binding binding) {
           if (!cycleChecker.add(binding)) {
             return false;
           }
-          return bindingDependsOnLocalBindingsCache.computeIfAbsent(
-              binding, this::dependsOnLocalBindingsUncached);
+          return reentrantComputeIfAbsent(
+              bindingDependsOnLocalBindingsCache, binding, this::dependsOnLocalBindingsUncached);
         }
 
         private boolean dependsOnLocalBindingsUncached(Binding binding) {
diff --git a/java/dagger/internal/codegen/BindingGraphValidator.java b/java/dagger/internal/codegen/BindingGraphValidator.java
index 8f5ac605e..9e3b31781 100644
--- a/java/dagger/internal/codegen/BindingGraphValidator.java
+++ b/java/dagger/internal/codegen/BindingGraphValidator.java
@@ -63,6 +63,7 @@
 import static dagger.internal.codegen.Scope.reusableScope;
 import static dagger.internal.codegen.Scope.scopesOf;
 import static dagger.internal.codegen.Util.componentCanMakeNewInstances;
+import static dagger.internal.codegen.Util.reentrantComputeIfAbsent;
 import static dagger.internal.codegen.Util.toImmutableSet;
 import static java.util.stream.Collectors.groupingBy;
 import static java.util.stream.Collectors.joining;
@@ -187,7 +188,8 @@ protected BindingGraphTraverser bindingGraphTraverser(
 
     /** Returns the report builder for a (sub)component. */
     private ValidationReport.Builder<TypeElement> report(BindingGraph graph) {
-      return reports.computeIfAbsent(
+      return reentrantComputeIfAbsent(
+          reports,
           graph.componentDescriptor(),
           descriptor -> ValidationReport.about(descriptor.componentDefinitionType()));
     }
diff --git a/java/dagger/internal/codegen/BindingMethodValidator.java b/java/dagger/internal/codegen/BindingMethodValidator.java
index 0b5f96b09..29495b0c9 100644
--- a/java/dagger/internal/codegen/BindingMethodValidator.java
+++ b/java/dagger/internal/codegen/BindingMethodValidator.java
@@ -39,6 +39,7 @@
 import static dagger.internal.codegen.ErrorMessages.MULTIPLE_MULTIBINDING_ANNOTATIONS_ON_METHOD;
 import static dagger.internal.codegen.InjectionAnnotations.getQualifiers;
 import static dagger.internal.codegen.MapKeys.getMapKeys;
+import static dagger.internal.codegen.Util.reentrantComputeIfAbsent;
 import static javax.lang.model.element.Modifier.ABSTRACT;
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.type.TypeKind.ARRAY;
@@ -135,7 +136,7 @@ protected BindingMethodValidator(
 
   /** Returns a {@link ValidationReport} for {@code method}. */
   final ValidationReport<ExecutableElement> validate(ExecutableElement method) {
-    return cache.computeIfAbsent(method, this::validateUncached);
+    return reentrantComputeIfAbsent(cache, method, this::validateUncached);
   }
 
   private ValidationReport<ExecutableElement> validateUncached(ExecutableElement m) {
diff --git a/java/dagger/internal/codegen/ModuleValidator.java b/java/dagger/internal/codegen/ModuleValidator.java
index 0339287b2..0b8e293ea 100644
--- a/java/dagger/internal/codegen/ModuleValidator.java
+++ b/java/dagger/internal/codegen/ModuleValidator.java
@@ -37,6 +37,7 @@
 import static dagger.internal.codegen.ErrorMessages.REFERENCED_MODULE_MUST_NOT_HAVE_TYPE_PARAMS;
 import static dagger.internal.codegen.ErrorMessages.REFERENCED_MODULE_NOT_ANNOTATED;
 import static dagger.internal.codegen.MoreAnnotationValues.asType;
+import static dagger.internal.codegen.Util.reentrantComputeIfAbsent;
 import static dagger.internal.codegen.Util.toImmutableSet;
 import static java.util.EnumSet.noneOf;
 import static java.util.stream.Collectors.joining;
@@ -128,7 +129,7 @@ void addKnownModules(Collection<TypeElement> modules) {
 
   /** Returns a validation report for a module type. */
   ValidationReport<TypeElement> validate(TypeElement module) {
-    return cache.computeIfAbsent(module, this::validateUncached);
+    return reentrantComputeIfAbsent(cache, module, this::validateUncached);
   }
 
   private ValidationReport<TypeElement> validateUncached(TypeElement module) {
diff --git a/java/dagger/internal/codegen/Util.java b/java/dagger/internal/codegen/Util.java
index 60c3df38f..821ab513c 100644
--- a/java/dagger/internal/codegen/Util.java
+++ b/java/dagger/internal/codegen/Util.java
@@ -25,6 +25,8 @@
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
+import java.util.Map;
+import java.util.function.Function;
 import java.util.stream.Collector;
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
@@ -102,5 +104,21 @@ private static boolean requiresEnclosingInstance(TypeElement typeElement) {
     return collectingAndThen(toList(), ImmutableSet::copyOf);
   }
 
+  /**
+   * A version of {@link Map#computeIfAbsent(Object, Function)} that allows {@code mappingFunction}
+   * to update {@code map}.
+   */
+  static <K, V> V reentrantComputeIfAbsent(
+      Map<K, V> map, K key, Function<? super K, ? extends V> mappingFunction) {
+    V value = map.get(key);
+    if (value == null) {
+      value = mappingFunction.apply(key);
+      if (value != null) {
+        map.put(key, value);
+      }
+    }
+    return value;
+  }
+
   private Util() {}
 }
