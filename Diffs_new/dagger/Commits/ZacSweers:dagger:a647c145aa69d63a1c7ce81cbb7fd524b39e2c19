diff --git a/java/dagger/internal/codegen/ModuleValidator.java b/java/dagger/internal/codegen/ModuleValidator.java
index ae3160413..74841e48d 100644
--- a/java/dagger/internal/codegen/ModuleValidator.java
+++ b/java/dagger/internal/codegen/ModuleValidator.java
@@ -505,9 +505,10 @@ private void validateModuleVisibility(
     ModuleAnnotation moduleAnnotation =
         moduleAnnotation(getAnnotationMirror(moduleElement, moduleKind.annotation()).get());
     Visibility moduleVisibility = Visibility.ofElement(moduleElement);
+    Visibility moduleEffectiveVisibility = effectiveVisibilityOfElement(moduleElement);
     if (moduleVisibility.equals(PRIVATE)) {
       reportBuilder.addError("Modules cannot be private.", moduleElement);
-    } else if (effectiveVisibilityOfElement(moduleElement).equals(PRIVATE)) {
+    } else if (moduleEffectiveVisibility.equals(PRIVATE)) {
       reportBuilder.addError("Modules cannot be enclosed in private types.", moduleElement);
     }
 
@@ -518,7 +519,7 @@ private void validateModuleVisibility(
         throw new IllegalStateException("Local classes shouldn't show up in the processor");
       case MEMBER:
       case TOP_LEVEL:
-        if (moduleVisibility.equals(PUBLIC)) {
+        if (moduleEffectiveVisibility.equals(PUBLIC)) {
           ImmutableSet<TypeElement> invalidVisibilityIncludes =
               getModuleIncludesWithInvalidVisibility(moduleAnnotation);
           if (!invalidVisibilityIncludes.isEmpty()) {
