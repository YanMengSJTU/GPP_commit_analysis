diff --git a/java/dagger/internal/codegen/BindingMethodValidator.java b/java/dagger/internal/codegen/BindingMethodValidator.java
index 5fa4c2d8a..7a764f082 100644
--- a/java/dagger/internal/codegen/BindingMethodValidator.java
+++ b/java/dagger/internal/codegen/BindingMethodValidator.java
@@ -40,6 +40,7 @@
 import static dagger.internal.codegen.InjectionAnnotations.getQualifiers;
 import static dagger.internal.codegen.MapKeys.getMapKeys;
 import static dagger.internal.codegen.Util.reentrantComputeIfAbsent;
+import static java.util.stream.Collectors.joining;
 import static javax.lang.model.element.Modifier.ABSTRACT;
 import static javax.lang.model.element.Modifier.PRIVATE;
 import static javax.lang.model.type.TypeKind.ARRAY;
@@ -47,8 +48,6 @@
 import static javax.lang.model.type.TypeKind.TYPEVAR;
 import static javax.lang.model.type.TypeKind.VOID;
 
-import com.google.common.base.Joiner;
-import com.google.common.collect.FluentIterable;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
 import com.google.errorprone.annotations.OverridingMethodsMustInvokeSuper;
@@ -168,9 +167,10 @@ private void checkEnclosingElement(ValidationReport.Builder<ExecutableElement> b
       builder.addError(
           formatErrorMessage(
               BINDING_METHOD_NOT_IN_MODULE,
-              FluentIterable.from(enclosingElementAnnotations)
-                  .transform(Class::getSimpleName)
-                  .join(Joiner.on(" or @"))));
+              enclosingElementAnnotations
+                  .stream()
+                  .map(Class::getSimpleName)
+                  .collect(joining(" or @"))));
     }
   }
 
diff --git a/java/dagger/internal/codegen/ComponentDescriptor.java b/java/dagger/internal/codegen/ComponentDescriptor.java
index 601f4b327..d6b7141b1 100644
--- a/java/dagger/internal/codegen/ComponentDescriptor.java
+++ b/java/dagger/internal/codegen/ComponentDescriptor.java
@@ -545,7 +545,8 @@ private ComponentDescriptor create(
 
       ImmutableSet<Scope> scopes = scopesOf(componentDefinitionType);
       if (kind.isProducer()) {
-        scopes = FluentIterable.from(scopes).append(productionScope(elements)).toSet();
+        scopes =
+            ImmutableSet.<Scope>builder().addAll(scopes).add(productionScope(elements)).build();
       }
 
       return new AutoValue_ComponentDescriptor(
diff --git a/java/dagger/internal/codegen/ComponentTreeTraverser.java b/java/dagger/internal/codegen/ComponentTreeTraverser.java
index 816d4c89a..6d02accc7 100644
--- a/java/dagger/internal/codegen/ComponentTreeTraverser.java
+++ b/java/dagger/internal/codegen/ComponentTreeTraverser.java
@@ -32,7 +32,6 @@
 import static java.util.stream.Collectors.toList;
 
 import com.google.auto.value.AutoValue;
-import com.google.common.collect.FluentIterable;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
@@ -639,7 +638,8 @@ ComponentTreePath pathFromRootToAncestor(ComponentDescriptor ancestor) {
     ComponentTreePath childPath(TypeElement subcomponent) {
       for (BindingGraph child : currentGraph().subgraphs()) {
         if (child.componentType().equals(subcomponent)) {
-          return create(FluentIterable.from(graphsInPath()).append(child));
+          return create(
+              ImmutableList.<BindingGraph>builder().addAll(graphsInPath()).add(child).build());
         }
       }
       throw new IllegalArgumentException(
