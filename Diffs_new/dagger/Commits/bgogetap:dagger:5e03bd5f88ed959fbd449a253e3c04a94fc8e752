diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index 93bad3b07..fd952ef94 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -242,7 +242,7 @@ java_library(
         "DelegatingFrameworkInstanceCreationExpression.java",
         "DependencyMethodProducerCreationExpression.java",
         "DependencyMethodProviderCreationExpression.java",
-        "DerivedFromProviderBindingExpression.java",
+        "DerivedFromFrameworkInstanceBindingExpression.java",
         "DoubleCheckedMethodImplementation.java",
         "FactoryGenerator.java",
         "FrameworkFieldInitializer.java",
diff --git a/java/dagger/internal/codegen/ComponentBindingExpressions.java b/java/dagger/internal/codegen/ComponentBindingExpressions.java
index 20fa93c4d..f8a9d654c 100644
--- a/java/dagger/internal/codegen/ComponentBindingExpressions.java
+++ b/java/dagger/internal/codegen/ComponentBindingExpressions.java
@@ -312,7 +312,12 @@ private BindingExpression createBindingExpression(
         return provisionBindingExpression(resolvedBindings, requestKind);
 
       case PRODUCTION:
-        return frameworkInstanceBindingExpression(resolvedBindings, requestKind);
+        if (requestKind.equals(RequestKind.PRODUCER)) {
+          return frameworkInstanceBindingExpression(resolvedBindings);
+        } else {
+          return new DerivedFromFrameworkInstanceBindingExpression(
+              resolvedBindings, requestKind, this, types);
+        }
 
       default:
         throw new AssertionError(resolvedBindings);
@@ -355,7 +360,7 @@ private boolean resolvedInThisComponent(Key key, RequestKind requestKind) {
    * or a {@link dagger.producers.Producer} for production bindings.
    */
   private FrameworkInstanceBindingExpression frameworkInstanceBindingExpression(
-      ResolvedBindings resolvedBindings, RequestKind requestKind) {
+      ResolvedBindings resolvedBindings) {
     // TODO(user): Consider merging the static factory creation logic into CreationExpressions?
     Optional<MemberSelect> staticMethod =
         useStaticFactoryCreation(resolvedBindings.contributionBinding())
@@ -375,10 +380,10 @@ private FrameworkInstanceBindingExpression frameworkInstanceBindingExpression(
     switch (frameworkType) {
       case PROVIDER:
         return new ProviderInstanceBindingExpression(
-            resolvedBindings, requestKind, this, frameworkInstanceSupplier, types, elements);
+            resolvedBindings, frameworkInstanceSupplier, types, elements);
       case PRODUCER:
         return new ProducerInstanceBindingExpression(
-            resolvedBindings, requestKind, this, frameworkInstanceSupplier, types, elements);
+            resolvedBindings, frameworkInstanceSupplier, types, elements);
       default:
         throw new AssertionError("invalid framework type: " + frameworkType);
     }
@@ -499,10 +504,11 @@ private BindingExpression provisionBindingExpression(
       case LAZY:
       case PRODUCED:
       case PROVIDER_OF_LAZY:
-        return new DerivedFromProviderBindingExpression(resolvedBindings, requestKind, this, types);
+        return new DerivedFromFrameworkInstanceBindingExpression(
+            resolvedBindings, requestKind, this, types);
 
       case PRODUCER:
-        return producerFromProviderBindingExpression(resolvedBindings, requestKind);
+        return producerFromProviderBindingExpression(resolvedBindings);
 
       case FUTURE:
         return new ImmediateFutureBindingExpression(resolvedBindings, this, types);
@@ -534,13 +540,13 @@ private BindingExpression providerBindingExpression(ResolvedBindings resolvedBin
     } else if (compilerOptions.fastInit()
         && frameworkInstanceCreationExpression(resolvedBindings).useInnerSwitchingProvider()
         && !(instanceBindingExpression(resolvedBindings)
-        instanceof DerivedFromProviderBindingExpression)) {
+            instanceof DerivedFromFrameworkInstanceBindingExpression)) {
       return wrapInMethod(
           resolvedBindings,
           RequestKind.PROVIDER,
           innerSwitchingProviders.newBindingExpression(resolvedBindings.contributionBinding()));
     }
-    return frameworkInstanceBindingExpression(resolvedBindings, RequestKind.PROVIDER);
+    return frameworkInstanceBindingExpression(resolvedBindings);
   }
 
   /**
@@ -548,12 +554,10 @@ private BindingExpression providerBindingExpression(ResolvedBindings resolvedBin
    * provision binding.
    */
   private FrameworkInstanceBindingExpression producerFromProviderBindingExpression(
-      ResolvedBindings resolvedBindings, RequestKind requestKind) {
+      ResolvedBindings resolvedBindings) {
     checkArgument(resolvedBindings.bindingType().frameworkType().equals(FrameworkType.PROVIDER));
     return new ProducerInstanceBindingExpression(
         resolvedBindings,
-        requestKind,
-        this,
         new FrameworkFieldInitializer(
             generatedComponentModel,
             resolvedBindings,
@@ -586,7 +590,7 @@ private BindingExpression instanceBindingExpression(ResolvedBindings resolvedBin
           ? wrapInMethod(resolvedBindings, RequestKind.INSTANCE, directInstanceExpression)
           : directInstanceExpression;
     }
-    return new DerivedFromProviderBindingExpression(
+    return new DerivedFromFrameworkInstanceBindingExpression(
         resolvedBindings, RequestKind.INSTANCE, this, types);
   }
 
diff --git a/java/dagger/internal/codegen/DerivedFromProviderBindingExpression.java b/java/dagger/internal/codegen/DerivedFromFrameworkInstanceBindingExpression.java
similarity index 78%
rename from java/dagger/internal/codegen/DerivedFromProviderBindingExpression.java
rename to java/dagger/internal/codegen/DerivedFromFrameworkInstanceBindingExpression.java
index 2dfa992f5..86a1ba903 100644
--- a/java/dagger/internal/codegen/DerivedFromProviderBindingExpression.java
+++ b/java/dagger/internal/codegen/DerivedFromFrameworkInstanceBindingExpression.java
@@ -22,31 +22,33 @@
 import dagger.model.Key;
 import dagger.model.RequestKind;
 
-/** A binding expression that depends on the expression for the {@link RequestKind#PROVIDER}. */
-final class DerivedFromProviderBindingExpression extends BindingExpression {
+/** A binding expression that depends on a framework instance. */
+final class DerivedFromFrameworkInstanceBindingExpression extends BindingExpression {
 
   private final Key key;
   private final RequestKind requestKind;
+  private final FrameworkType frameworkType;
   private final ComponentBindingExpressions componentBindingExpressions;
   private final DaggerTypes types;
 
-  DerivedFromProviderBindingExpression(
+  DerivedFromFrameworkInstanceBindingExpression(
       ResolvedBindings resolvedBindings,
       RequestKind requestKind,
       ComponentBindingExpressions componentBindingExpressions,
       DaggerTypes types) {
     this.key = resolvedBindings.key();
     this.requestKind = checkNotNull(requestKind);
+    this.frameworkType = resolvedBindings.bindingType().frameworkType();
     this.componentBindingExpressions = checkNotNull(componentBindingExpressions);
     this.types = checkNotNull(types);
   }
 
   @Override
   Expression getDependencyExpression(ClassName requestingClass) {
-    return FrameworkType.PROVIDER.to(
+    return frameworkType.to(
         requestKind,
         componentBindingExpressions.getDependencyExpression(
-            key, RequestKind.PROVIDER, requestingClass),
+            key, frameworkType.requestKind(), requestingClass),
         types);
   }
 }
diff --git a/java/dagger/internal/codegen/FrameworkInstanceBindingExpression.java b/java/dagger/internal/codegen/FrameworkInstanceBindingExpression.java
index 8e9eef7a3..0bfb42709 100644
--- a/java/dagger/internal/codegen/FrameworkInstanceBindingExpression.java
+++ b/java/dagger/internal/codegen/FrameworkInstanceBindingExpression.java
@@ -22,65 +22,45 @@
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.CodeBlock;
 import com.squareup.javapoet.FieldSpec;
-import dagger.model.RequestKind;
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.TypeMirror;
 import javax.lang.model.util.Elements;
 
-/** A binding expression that uses an instance of a {@link FrameworkType}. */
+/** A binding expression that uses a {@link FrameworkType} field. */
 abstract class FrameworkInstanceBindingExpression extends BindingExpression {
   private final ResolvedBindings resolvedBindings;
-  private final RequestKind requestKind;
-  private final ComponentBindingExpressions componentBindingExpressions;
   private final FrameworkInstanceSupplier frameworkInstanceSupplier;
   private final DaggerTypes types;
   private final Elements elements;
 
   FrameworkInstanceBindingExpression(
       ResolvedBindings resolvedBindings,
-      RequestKind requestKind,
-      ComponentBindingExpressions componentBindingExpressions,
       FrameworkInstanceSupplier frameworkInstanceSupplier,
       DaggerTypes types,
       Elements elements) {
     this.resolvedBindings = checkNotNull(resolvedBindings);
-    this.requestKind = checkNotNull(requestKind);
-    this.componentBindingExpressions = checkNotNull(componentBindingExpressions);
     this.frameworkInstanceSupplier = checkNotNull(frameworkInstanceSupplier);
     this.types = checkNotNull(types);
     this.elements = checkNotNull(elements);
   }
 
   /**
-   * The expression for the framework instance for this binding. If the instance comes from a
-   * component field, it will be {@link GeneratedComponentModel#addInitialization(CodeBlock)
-   * initialized} and {@link GeneratedComponentModel#addField(GeneratedComponentModel.FieldSpecKind,
-   * FieldSpec) added} to the component the first time this method is invoked.
+   * The expression for the framework instance for this binding. The field will be {@link
+   * GeneratedComponentModel#addInitialization(CodeBlock) initialized} and {@link
+   * GeneratedComponentModel#addField(GeneratedComponentModel.FieldSpecKind, FieldSpec) added} to
+   * the component the first time this method is invoked.
    */
   @Override
   Expression getDependencyExpression(ClassName requestingClass) {
-    if (requestKind.equals(frameworkType().requestKind())) {
-      MemberSelect memberSelect = frameworkInstanceSupplier.memberSelect();
-      TypeMirror contributedType = resolvedBindings.contributionBinding().contributedType();
-      TypeMirror expressionType =
-          frameworkInstanceSupplier.specificType().isPresent()
-                  || isTypeAccessibleFrom(contributedType, requestingClass.packageName())
-                  || isInlinedFactoryCreation(memberSelect)
-              ? types.wrapType(contributedType, resolvedBindings.frameworkClass())
-              : rawFrameworkType();
-      return Expression.create(expressionType, memberSelect.getExpressionFor(requestingClass));
-    }
-
-    // The following expressions form a composite with the expression for the framework type. For
-    // example, the expression for RequestKind.LAZY is a composite of the expression for a
-    // RequestKind.PROVIDER (the framework type):
-    //    lazyExpression = DoubleCheck.lazy(providerExpression);
-    return frameworkType()
-        .to(
-            requestKind,
-            componentBindingExpressions.getDependencyExpression(
-                resolvedBindings.key(), frameworkType().requestKind(), requestingClass),
-            types);
+    MemberSelect memberSelect = frameworkInstanceSupplier.memberSelect();
+    TypeMirror contributedType = resolvedBindings.contributionBinding().contributedType();
+    TypeMirror expressionType =
+        frameworkInstanceSupplier.specificType().isPresent()
+                || isTypeAccessibleFrom(contributedType, requestingClass.packageName())
+                || isInlinedFactoryCreation(memberSelect)
+            ? types.wrapType(contributedType, resolvedBindings.frameworkClass())
+            : rawFrameworkType();
+    return Expression.create(expressionType, memberSelect.getExpressionFor(requestingClass));
   }
 
   /** Returns the framework type for the binding. */
diff --git a/java/dagger/internal/codegen/ProducerInstanceBindingExpression.java b/java/dagger/internal/codegen/ProducerInstanceBindingExpression.java
index 49e57b101..e4481c2eb 100644
--- a/java/dagger/internal/codegen/ProducerInstanceBindingExpression.java
+++ b/java/dagger/internal/codegen/ProducerInstanceBindingExpression.java
@@ -16,7 +16,6 @@
 
 package dagger.internal.codegen;
 
-import dagger.model.RequestKind;
 import javax.lang.model.util.Elements;
 
 /** Binding expression for producer instances. */
@@ -24,15 +23,11 @@
 
   ProducerInstanceBindingExpression(
       ResolvedBindings resolvedBindings,
-      RequestKind requestKind,
-      ComponentBindingExpressions componentBindingExpressions,
       FrameworkInstanceSupplier frameworkInstanceSupplier,
       DaggerTypes types,
       Elements elements) {
     super(
         resolvedBindings,
-        requestKind,
-        componentBindingExpressions,
         frameworkInstanceSupplier,
         types,
         elements);
diff --git a/java/dagger/internal/codegen/ProviderInstanceBindingExpression.java b/java/dagger/internal/codegen/ProviderInstanceBindingExpression.java
index ce653fbad..1f277ac66 100644
--- a/java/dagger/internal/codegen/ProviderInstanceBindingExpression.java
+++ b/java/dagger/internal/codegen/ProviderInstanceBindingExpression.java
@@ -16,7 +16,6 @@
 
 package dagger.internal.codegen;
 
-import dagger.model.RequestKind;
 import javax.lang.model.util.Elements;
 
 /** Binding expression for provider instances. */
@@ -24,15 +23,11 @@
 
   ProviderInstanceBindingExpression(
       ResolvedBindings resolvedBindings,
-      RequestKind requestKind,
-      ComponentBindingExpressions componentBindingExpressions,
       FrameworkInstanceSupplier frameworkInstanceSupplier,
       DaggerTypes types,
       Elements elements) {
     super(
         resolvedBindings,
-        requestKind,
-        componentBindingExpressions,
         frameworkInstanceSupplier,
         types,
         elements);
