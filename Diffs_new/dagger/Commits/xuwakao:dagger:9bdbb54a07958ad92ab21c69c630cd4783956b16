diff --git a/java/dagger/android/AndroidInjection.java b/java/dagger/android/AndroidInjection.java
index 990bd9208..eb1be1d8f 100644
--- a/java/dagger/android/AndroidInjection.java
+++ b/java/dagger/android/AndroidInjection.java
@@ -33,26 +33,25 @@
   private static final String TAG = "dagger.android";
 
   /**
-   * Injects {@code activity} if an associated {@link AndroidInjector.Factory} implementation can be
-   * found, otherwise throws an {@link IllegalArgumentException}.
+   * Injects {@code activity} if an associated {@link AndroidInjector} implementation can be found,
+   * otherwise throws an {@link IllegalArgumentException}.
    *
    * @throws RuntimeException if the {@link Application} doesn't implement {@link
-   *     HasDispatchingActivityInjector}, or if no {@code AndroidInjector.Factory<? extends
-   *     Activity>} is bound for {@code activity}.
+   *     HasActivityInjector}.
    */
   public static void inject(Activity activity) {
     checkNotNull(activity, "activity");
     Application application = activity.getApplication();
-    if (!(application instanceof HasDispatchingActivityInjector)) {
+    if (!(application instanceof HasActivityInjector)) {
       throw new RuntimeException(
           String.format(
               "%s does not implement %s",
               application.getClass().getCanonicalName(),
-              HasDispatchingActivityInjector.class.getCanonicalName()));
+              HasActivityInjector.class.getCanonicalName()));
     }
 
-    DispatchingAndroidInjector<Activity> activityInjector =
-        ((HasDispatchingActivityInjector) application).activityInjector();
+    AndroidInjector<Activity> activityInjector =
+        ((HasActivityInjector) application).activityInjector();
     checkNotNull(
         activityInjector,
         "%s.activityInjector() returned null",
@@ -62,87 +61,82 @@ public static void inject(Activity activity) {
   }
 
   /**
-   * Injects {@code fragment} if an associated {@link AndroidInjector.Factory} implementation can be
-   * found, otherwise throws an {@link IllegalArgumentException}.
+   * Injects {@code fragment} if an associated {@link AndroidInjector} implementation can be found,
+   * otherwise throws an {@link IllegalArgumentException}.
    *
-   * <p>Uses the following algorithm to find the appropriate {@code
-   * DispatchingAndroidInjector<Fragment>} to inject {@code fragment}:
+   * <p>Uses the following algorithm to find the appropriate {@code AndroidInjector<Fragment>} to
+   * use to inject {@code fragment}:
    *
    * <ol>
    *   <li>Walks the parent-fragment hierarchy to find the a fragment that implements {@link
-   *       HasDispatchingFragmentInjector}, and if none do
+   *       HasFragmentInjector}, and if none do
    *   <li>Uses the {@code fragment}'s {@link Fragment#getActivity() activity} if it implements
-   *       {@link HasDispatchingFragmentInjector}, and if not
-   *   <li>Uses the {@link android.app.Application} if it implements {@link
-   *       HasDispatchingFragmentInjector}.
+   *       {@link HasFragmentInjector}, and if not
+   *   <li>Uses the {@link android.app.Application} if it implements {@link HasFragmentInjector}.
    * </ol>
    *
-   * If none of them implement {@link HasDispatchingFragmentInjector}, a {@link
-   * IllegalArgumentException} is thrown.
+   * If none of them implement {@link HasFragmentInjector}, a {@link IllegalArgumentException} is
+   * thrown.
    *
-   * @throws IllegalArgumentException if no {@code AndroidInjector.Factory<? extends Fragment>} is
-   *     bound for {@code fragment}.
+   * @throws IllegalArgumentException if no parent fragment, activity, or application implements
+   *     {@link HasFragmentInjector}.
    */
   public static void inject(Fragment fragment) {
     checkNotNull(fragment, "fragment");
-    HasDispatchingFragmentInjector hasDispatchingFragmentInjector =
-        findHasFragmentInjector(fragment);
+    HasFragmentInjector hasFragmentInjector = findHasFragmentInjector(fragment);
     Log.d(
         TAG,
         String.format(
             "An injector for %s was found in %s",
             fragment.getClass().getCanonicalName(),
-            hasDispatchingFragmentInjector.getClass().getCanonicalName()));
+            hasFragmentInjector.getClass().getCanonicalName()));
 
-    DispatchingAndroidInjector<Fragment> fragmentInjector =
-        hasDispatchingFragmentInjector.fragmentInjector();
+    AndroidInjector<Fragment> fragmentInjector = hasFragmentInjector.fragmentInjector();
     checkNotNull(
         fragmentInjector,
         "%s.fragmentInjector() returned null",
-        hasDispatchingFragmentInjector.getClass().getCanonicalName());
+        hasFragmentInjector.getClass().getCanonicalName());
 
     fragmentInjector.inject(fragment);
   }
 
-  private static HasDispatchingFragmentInjector findHasFragmentInjector(Fragment fragment) {
+  private static HasFragmentInjector findHasFragmentInjector(Fragment fragment) {
     Fragment parentFragment = fragment;
     while ((parentFragment = parentFragment.getParentFragment()) != null) {
-      if (parentFragment instanceof HasDispatchingFragmentInjector) {
-        return (HasDispatchingFragmentInjector) parentFragment;
+      if (parentFragment instanceof HasFragmentInjector) {
+        return (HasFragmentInjector) parentFragment;
       }
     }
     Activity activity = fragment.getActivity();
-    if (activity instanceof HasDispatchingFragmentInjector) {
-      return (HasDispatchingFragmentInjector) activity;
+    if (activity instanceof HasFragmentInjector) {
+      return (HasFragmentInjector) activity;
     }
-    if (activity.getApplication() instanceof HasDispatchingFragmentInjector) {
-      return (HasDispatchingFragmentInjector) activity.getApplication();
+    if (activity.getApplication() instanceof HasFragmentInjector) {
+      return (HasFragmentInjector) activity.getApplication();
     }
     throw new IllegalArgumentException(
         String.format("No injector was found for %s", fragment.getClass().getCanonicalName()));
   }
 
   /**
-   * Injects {@code service} if an associated {@link AndroidInjector.Factory} implementation can be
-   * found, otherwise throws an {@link IllegalArgumentException}.
+   * Injects {@code service} if an associated {@link AndroidInjector} implementation can be found,
+   * otherwise throws an {@link IllegalArgumentException}.
    *
    * @throws RuntimeException if the {@link Application} doesn't implement {@link
-   *     HasDispatchingServiceInjector}, or if no {@code AndroidInjector.Factory<? extends Service>}
-   *     is bound for {@code service}.
+   *     HasServiceInjector}.
    */
   public static void inject(Service service) {
     checkNotNull(service, "service");
     Application application = service.getApplication();
-    if (!(application instanceof HasDispatchingServiceInjector)) {
+    if (!(application instanceof HasServiceInjector)) {
       throw new RuntimeException(
           String.format(
               "%s does not implement %s",
               application.getClass().getCanonicalName(),
-              HasDispatchingServiceInjector.class.getCanonicalName()));
+              HasServiceInjector.class.getCanonicalName()));
     }
 
-    DispatchingAndroidInjector<Service> serviceInjector =
-        ((HasDispatchingServiceInjector) application).serviceInjector();
+    AndroidInjector<Service> serviceInjector = ((HasServiceInjector) application).serviceInjector();
     checkNotNull(
         serviceInjector,
         "%s.serviceInjector() returned null",
@@ -152,28 +146,26 @@ public static void inject(Service service) {
   }
 
   /**
-   * Injects {@code broadcastReceiver} if an associated {@link AndroidInjector.Factory}
-   * implementation can be found, otherwise throws an {@link IllegalArgumentException}.
+   * Injects {@code broadcastReceiver} if an associated {@link AndroidInjector} implementation can
+   * be found, otherwise throws an {@link IllegalArgumentException}.
    *
    * @throws RuntimeException if the {@link Application} from {@link
-   *     Context#getApplicationContext()} doesn't implement {@link
-   *     HasDispatchingBroadcastReceiverInjector}, or if no {@code AndroidInjector.Factory<? extends
-   *     BroadcastReceiver>} is bound for {@code broadcastReceiver}.
+   *     Context#getApplicationContext()} doesn't implement {@link HasBroadcastReceiverInjector}.
    */
   public static void inject(BroadcastReceiver broadcastReceiver, Context context) {
     checkNotNull(broadcastReceiver, "broadcastReceiver");
     checkNotNull(context, "context");
     Application application = (Application) context.getApplicationContext();
-    if (!(application instanceof HasDispatchingBroadcastReceiverInjector)) {
+    if (!(application instanceof HasBroadcastReceiverInjector)) {
       throw new RuntimeException(
           String.format(
               "%s does not implement %s",
               application.getClass().getCanonicalName(),
-              HasDispatchingBroadcastReceiverInjector.class.getCanonicalName()));
+              HasBroadcastReceiverInjector.class.getCanonicalName()));
     }
 
-    DispatchingAndroidInjector<BroadcastReceiver> broadcastReceiverInjector =
-        ((HasDispatchingBroadcastReceiverInjector) application).broadcastReceiverInjector();
+    AndroidInjector<BroadcastReceiver> broadcastReceiverInjector =
+        ((HasBroadcastReceiverInjector) application).broadcastReceiverInjector();
     checkNotNull(
         broadcastReceiverInjector,
         "%s.broadcastReceiverInjector() returned null",
diff --git a/java/dagger/android/DaggerActivity.java b/java/dagger/android/DaggerActivity.java
index f08c02a7b..ff18ed174 100644
--- a/java/dagger/android/DaggerActivity.java
+++ b/java/dagger/android/DaggerActivity.java
@@ -27,7 +27,7 @@
  * inject {@link Fragment}s attached to it.
  */
 @Beta
-public abstract class DaggerActivity extends Activity implements HasDispatchingFragmentInjector {
+public abstract class DaggerActivity extends Activity implements HasFragmentInjector {
 
   @Inject DispatchingAndroidInjector<Fragment> fragmentInjector;
 
@@ -38,7 +38,7 @@ protected void onCreate(Bundle savedInstanceState) {
   }
 
   @Override
-  public DispatchingAndroidInjector<Fragment> fragmentInjector() {
+  public AndroidInjector<Fragment> fragmentInjector() {
     return fragmentInjector;
   }
 }
diff --git a/java/dagger/android/DaggerFragment.java b/java/dagger/android/DaggerFragment.java
index d7b552f76..df0b0d6d5 100644
--- a/java/dagger/android/DaggerFragment.java
+++ b/java/dagger/android/DaggerFragment.java
@@ -27,7 +27,7 @@
  * members will be injected again.
  */
 @Beta
-public abstract class DaggerFragment extends Fragment implements HasDispatchingFragmentInjector {
+public abstract class DaggerFragment extends Fragment implements HasFragmentInjector {
 
   @Inject DispatchingAndroidInjector<Fragment> childFragmentInjector;
 
@@ -38,7 +38,7 @@ public void onAttach(Context context) {
   }
 
   @Override
-  public DispatchingAndroidInjector<Fragment> fragmentInjector() {
+  public AndroidInjector<Fragment> fragmentInjector() {
     return childFragmentInjector;
   }
 }
diff --git a/java/dagger/android/DispatchingAndroidInjector.java b/java/dagger/android/DispatchingAndroidInjector.java
index 277b83b9e..1a9584f4b 100644
--- a/java/dagger/android/DispatchingAndroidInjector.java
+++ b/java/dagger/android/DispatchingAndroidInjector.java
@@ -40,7 +40,7 @@
  * @param <T> the core Android type to be injected
  */
 @Beta
-public final class DispatchingAndroidInjector<T> {
+public final class DispatchingAndroidInjector<T> implements AndroidInjector<T> {
   private static final String NO_SUPERTYPES_BOUND_FORMAT =
       "No injector factory bound for Class<%s>";
   private static final String SUPERTYPES_BOUND_FORMAT =
@@ -99,6 +99,7 @@ public boolean maybeInject(T instance) {
    * @throws IllegalArgumentException if no {@link AndroidInjector.Factory} is bound for {@code
    *     instance}
    */
+  @Override
   public void inject(T instance) {
     boolean wasInjected = maybeInject(instance);
     if (!wasInjected) {
diff --git a/java/dagger/android/HasDispatchingActivityInjector.java b/java/dagger/android/HasActivityInjector.java
similarity index 72%
rename from java/dagger/android/HasDispatchingActivityInjector.java
rename to java/dagger/android/HasActivityInjector.java
index 680139d89..136bbad68 100644
--- a/java/dagger/android/HasDispatchingActivityInjector.java
+++ b/java/dagger/android/HasActivityInjector.java
@@ -19,10 +19,10 @@
 import android.app.Activity;
 import dagger.internal.Beta;
 
-/** Provides a {@link DispatchingAndroidInjector} of {@link Activity}s. */
+/** Provides an {@link AndroidInjector} of {@link Activity}s. */
 @Beta
-public interface HasDispatchingActivityInjector {
+public interface HasActivityInjector {
 
-  /** Returns a {@link DispatchingAndroidInjector} of {@link Activity}s. */
-  DispatchingAndroidInjector<Activity> activityInjector();
+  /** Returns an {@link AndroidInjector} of {@link Activity}s. */
+  AndroidInjector<Activity> activityInjector();
 }
diff --git a/java/dagger/android/HasDispatchingBroadcastReceiverInjector.java b/java/dagger/android/HasBroadcastReceiverInjector.java
similarity index 69%
rename from java/dagger/android/HasDispatchingBroadcastReceiverInjector.java
rename to java/dagger/android/HasBroadcastReceiverInjector.java
index aa21d3e10..b2aa99211 100644
--- a/java/dagger/android/HasDispatchingBroadcastReceiverInjector.java
+++ b/java/dagger/android/HasBroadcastReceiverInjector.java
@@ -19,10 +19,10 @@
 import android.content.BroadcastReceiver;
 import dagger.internal.Beta;
 
-/** Provides a {@link DispatchingAndroidInjector} of {@link BroadcastReceiver}s. */
+/** Provides an {@link AndroidInjector} of {@link BroadcastReceiver}s. */
 @Beta
-public interface HasDispatchingBroadcastReceiverInjector {
+public interface HasBroadcastReceiverInjector {
 
-  /** Returns a {@link DispatchingAndroidInjector} of {@link BroadcastReceiver}s. */
-  DispatchingAndroidInjector<BroadcastReceiver> broadcastReceiverInjector();
+  /** Returns an {@link AndroidInjector} of {@link BroadcastReceiver}s. */
+  AndroidInjector<BroadcastReceiver> broadcastReceiverInjector();
 }
diff --git a/java/dagger/android/HasDispatchingFragmentInjector.java b/java/dagger/android/HasFragmentInjector.java
similarity index 72%
rename from java/dagger/android/HasDispatchingFragmentInjector.java
rename to java/dagger/android/HasFragmentInjector.java
index f7d223a76..564f32d5d 100644
--- a/java/dagger/android/HasDispatchingFragmentInjector.java
+++ b/java/dagger/android/HasFragmentInjector.java
@@ -19,10 +19,10 @@
 import android.app.Fragment;
 import dagger.internal.Beta;
 
-/** Provides a {@link DispatchingAndroidInjector} of {@link Fragment}s. */
+/** Provides an {@link AndroidInjector} of {@link Fragment}s. */
 @Beta
-public interface HasDispatchingFragmentInjector {
+public interface HasFragmentInjector {
 
-  /** Returns a {@link DispatchingAndroidInjector} of {@link Fragment}s. */
-  DispatchingAndroidInjector<Fragment> fragmentInjector();
+  /** Returns an {@link AndroidInjector} of {@link Fragment}s. */
+  AndroidInjector<Fragment> fragmentInjector();
 }
diff --git a/java/dagger/android/HasDispatchingServiceInjector.java b/java/dagger/android/HasServiceInjector.java
similarity index 73%
rename from java/dagger/android/HasDispatchingServiceInjector.java
rename to java/dagger/android/HasServiceInjector.java
index b25dd77bf..d1c6a6c2a 100644
--- a/java/dagger/android/HasDispatchingServiceInjector.java
+++ b/java/dagger/android/HasServiceInjector.java
@@ -19,10 +19,10 @@
 import android.app.Service;
 import dagger.internal.Beta;
 
-/** Provides a {@link DispatchingAndroidInjector} of {@link Service}s. */
+/** Provides an {@link AndroidInjector} of {@link Service}s. */
 @Beta
-public interface HasDispatchingServiceInjector {
+public interface HasServiceInjector {
 
-  /** Returns a {@link DispatchingAndroidInjector} of {@link Service}s. */
-  DispatchingAndroidInjector<Service> serviceInjector();
+  /** Returns an {@link AndroidInjector} of {@link Service}s. */
+  AndroidInjector<Service> serviceInjector();
 }
diff --git a/java/dagger/android/support/AndroidSupportInjection.java b/java/dagger/android/support/AndroidSupportInjection.java
index 64e3537e2..6a22fbd52 100644
--- a/java/dagger/android/support/AndroidSupportInjection.java
+++ b/java/dagger/android/support/AndroidSupportInjection.java
@@ -21,7 +21,7 @@
 import android.app.Activity;
 import android.support.v4.app.Fragment;
 import android.util.Log;
-import dagger.android.DispatchingAndroidInjector;
+import dagger.android.AndroidInjector;
 import dagger.internal.Beta;
 
 /** Injects core Android types from support libraries. */
@@ -30,61 +30,60 @@
   private static final String TAG = "dagger.android.support";
 
   /**
-   * Injects {@code fragment} if an associated {@link dagger.android.AndroidInjector.Factory}
-   * implementation can be found, otherwise throws an {@link IllegalArgumentException}.
+   * Injects {@code fragment} if an associated {@link dagger.android.AndroidInjector} implementation
+   * can be found, otherwise throws an {@link IllegalArgumentException}.
    *
-   * <p>Uses the following algorithm to find the appropriate {@code
-   * DispatchingAndroidInjector<Fragment>} to inject {@code fragment}:
+   * <p>Uses the following algorithm to find the appropriate {@code AndroidInjector<Fragment>} to
+   * use to inject {@code fragment}:
    *
    * <ol>
    *   <li>Walks the parent-fragment hierarchy to find the a fragment that implements {@link
-   *       HasDispatchingSupportFragmentInjector}, and if none do
+   *       HasSupportFragmentInjector}, and if none do
    *   <li>Uses the {@code fragment}'s {@link Fragment#getActivity() activity} if it implements
-   *       {@link HasDispatchingSupportFragmentInjector}, and if not
+   *       {@link HasSupportFragmentInjector}, and if not
    *   <li>Uses the {@link android.app.Application} if it implements {@link
-   *       HasDispatchingSupportFragmentInjector}.
+   *       HasSupportFragmentInjector}.
    * </ol>
    *
-   * If none of them implement {@link HasDispatchingSupportFragmentInjector}, a {@link
+   * If none of them implement {@link HasSupportFragmentInjector}, a {@link
    * IllegalArgumentException} is thrown.
    *
-   * @throws IllegalArgumentException if no {@code AndroidInjector.Factory<Fragment, ?>} is bound
-   *     for {@code fragment}.
+   * @throws IllegalArgumentException if no parent fragment, activity, or application implements
+   *     {@link HasSupportFragmentInjector}.
    */
   public static void inject(Fragment fragment) {
     checkNotNull(fragment, "fragment");
-    HasDispatchingSupportFragmentInjector hasDispatchingSupportFragmentInjector =
-        findHasFragmentInjector(fragment);
+    HasSupportFragmentInjector hasSupportFragmentInjector = findHasFragmentInjector(fragment);
     Log.d(
         TAG,
         String.format(
             "An injector for %s was found in %s",
             fragment.getClass().getCanonicalName(),
-            hasDispatchingSupportFragmentInjector.getClass().getCanonicalName()));
+            hasSupportFragmentInjector.getClass().getCanonicalName()));
 
-    DispatchingAndroidInjector<Fragment> fragmentInjector =
-        hasDispatchingSupportFragmentInjector.supportFragmentInjector();
+    AndroidInjector<Fragment> fragmentInjector =
+        hasSupportFragmentInjector.supportFragmentInjector();
     checkNotNull(
         fragmentInjector,
         "%s.supportFragmentInjector() returned null",
-        hasDispatchingSupportFragmentInjector.getClass().getCanonicalName());
+        hasSupportFragmentInjector.getClass().getCanonicalName());
 
     fragmentInjector.inject(fragment);
   }
 
-  private static HasDispatchingSupportFragmentInjector findHasFragmentInjector(Fragment fragment) {
+  private static HasSupportFragmentInjector findHasFragmentInjector(Fragment fragment) {
     Fragment parentFragment = fragment;
     while ((parentFragment = parentFragment.getParentFragment()) != null) {
-      if (parentFragment instanceof HasDispatchingSupportFragmentInjector) {
-        return (HasDispatchingSupportFragmentInjector) parentFragment;
+      if (parentFragment instanceof HasSupportFragmentInjector) {
+        return (HasSupportFragmentInjector) parentFragment;
       }
     }
     Activity activity = fragment.getActivity();
-    if (activity instanceof HasDispatchingSupportFragmentInjector) {
-      return (HasDispatchingSupportFragmentInjector) activity;
+    if (activity instanceof HasSupportFragmentInjector) {
+      return (HasSupportFragmentInjector) activity;
     }
-    if (activity.getApplication() instanceof HasDispatchingSupportFragmentInjector) {
-      return (HasDispatchingSupportFragmentInjector) activity.getApplication();
+    if (activity.getApplication() instanceof HasSupportFragmentInjector) {
+      return (HasSupportFragmentInjector) activity.getApplication();
     }
     throw new IllegalArgumentException(
         String.format("No injector was found for %s", fragment.getClass().getCanonicalName()));
diff --git a/java/dagger/android/support/DaggerAppCompatActivity.java b/java/dagger/android/support/DaggerAppCompatActivity.java
index f1b403362..adfe4db85 100644
--- a/java/dagger/android/support/DaggerAppCompatActivity.java
+++ b/java/dagger/android/support/DaggerAppCompatActivity.java
@@ -20,8 +20,9 @@
 import android.support.v4.app.Fragment;
 import android.support.v7.app.AppCompatActivity;
 import dagger.android.AndroidInjection;
+import dagger.android.AndroidInjector;
 import dagger.android.DispatchingAndroidInjector;
-import dagger.android.HasDispatchingFragmentInjector;
+import dagger.android.HasFragmentInjector;
 import dagger.internal.Beta;
 import javax.inject.Inject;
 
@@ -31,7 +32,7 @@
  */
 @Beta
 public abstract class DaggerAppCompatActivity extends AppCompatActivity
-    implements HasDispatchingFragmentInjector, HasDispatchingSupportFragmentInjector {
+    implements HasFragmentInjector, HasSupportFragmentInjector {
 
   @Inject DispatchingAndroidInjector<Fragment> supportFragmentInjector;
   @Inject DispatchingAndroidInjector<android.app.Fragment> frameworkFragmentInjector;
@@ -43,12 +44,12 @@ protected void onCreate(Bundle savedInstanceState) {
   }
 
   @Override
-  public DispatchingAndroidInjector<Fragment> supportFragmentInjector() {
+  public AndroidInjector<Fragment> supportFragmentInjector() {
     return supportFragmentInjector;
   }
 
   @Override
-  public DispatchingAndroidInjector<android.app.Fragment> fragmentInjector() {
+  public AndroidInjector<android.app.Fragment> fragmentInjector() {
     return frameworkFragmentInjector;
   }
 }
diff --git a/java/dagger/android/support/DaggerFragment.java b/java/dagger/android/support/DaggerFragment.java
index b21f85968..c7335a88b 100644
--- a/java/dagger/android/support/DaggerFragment.java
+++ b/java/dagger/android/support/DaggerFragment.java
@@ -18,6 +18,7 @@
 
 import android.content.Context;
 import android.support.v4.app.Fragment;
+import dagger.android.AndroidInjector;
 import dagger.android.DispatchingAndroidInjector;
 import dagger.internal.Beta;
 import javax.inject.Inject;
@@ -28,8 +29,7 @@
  * members will be injected again.
  */
 @Beta
-public abstract class DaggerFragment extends Fragment implements
-    HasDispatchingSupportFragmentInjector {
+public abstract class DaggerFragment extends Fragment implements HasSupportFragmentInjector {
 
   @Inject DispatchingAndroidInjector<Fragment> childFragmentInjector;
 
@@ -40,7 +40,7 @@ public void onAttach(Context context) {
   }
 
   @Override
-  public DispatchingAndroidInjector<Fragment> supportFragmentInjector() {
+  public AndroidInjector<Fragment> supportFragmentInjector() {
     return childFragmentInjector;
   }
 }
diff --git a/java/dagger/android/support/HasDispatchingSupportFragmentInjector.java b/java/dagger/android/support/HasSupportFragmentInjector.java
similarity index 68%
rename from java/dagger/android/support/HasDispatchingSupportFragmentInjector.java
rename to java/dagger/android/support/HasSupportFragmentInjector.java
index 088854468..e80609ec5 100644
--- a/java/dagger/android/support/HasDispatchingSupportFragmentInjector.java
+++ b/java/dagger/android/support/HasSupportFragmentInjector.java
@@ -17,13 +17,13 @@
 package dagger.android.support;
 
 import android.support.v4.app.Fragment;
-import dagger.android.DispatchingAndroidInjector;
+import dagger.android.AndroidInjector;
 import dagger.internal.Beta;
 
-/** Provides a {@link DispatchingAndroidInjector} of {@link Fragment}s. */
+/** Provides an {@link AndroidInjector} of {@link Fragment}s. */
 @Beta
-public interface HasDispatchingSupportFragmentInjector {
+public interface HasSupportFragmentInjector {
 
-  /** Returns a {@link DispatchingAndroidInjector} of {@link Fragment}s. */
-  DispatchingAndroidInjector<Fragment> supportFragmentInjector();
+  /** Returns an {@link AndroidInjector} of {@link Fragment}s. */
+  AndroidInjector<Fragment> supportFragmentInjector();
 }
diff --git a/javatests/dagger/android/AndroidInjectionTest.java b/javatests/dagger/android/AndroidInjectionTest.java
index 43fb06242..ec5be117b 100644
--- a/javatests/dagger/android/AndroidInjectionTest.java
+++ b/javatests/dagger/android/AndroidInjectionTest.java
@@ -22,9 +22,7 @@
 import android.app.Activity;
 import android.app.Application;
 import android.app.Fragment;
-import com.google.common.collect.ImmutableMap;
 import org.robolectric.RobolectricTestRunner;
-import dagger.android.AndroidInjector.Factory;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
@@ -41,24 +39,19 @@
     String tag;
   }
 
-  private static DispatchingAndroidInjector<Fragment> dispatchingFragmentInjector(String tag) {
-    return new DispatchingAndroidInjector<>(
-        ImmutableMap.of(
-            InjectableFragment.class,
-            () ->
-                new Factory<InjectableFragment>() {
-                  @Override
-                  public AndroidInjector<InjectableFragment> create(InjectableFragment fragment) {
-                    return f -> f.tag = tag;
-                  }
-                }));
+  private static AndroidInjector<Fragment> fakeFragmentInjector(String tag) {
+    return instance -> {
+      if (instance instanceof InjectableFragment) {
+        ((InjectableFragment) instance).tag = tag;
+      }
+    };
   }
 
   public static class ApplicationInjectsFragment extends Application
-      implements HasDispatchingFragmentInjector {
+      implements HasFragmentInjector {
     @Override
-    public DispatchingAndroidInjector<Fragment> fragmentInjector() {
-      return dispatchingFragmentInjector("injected by app");
+    public AndroidInjector<Fragment> fragmentInjector() {
+      return fakeFragmentInjector("injected by app");
     }
   }
 
@@ -74,11 +67,10 @@ public void fragmentInjectedByApplication() {
     assertThat(fragment.tag).isEqualTo("injected by app");
   }
 
-  public static class ActivityInjectsFragment extends Activity
-      implements HasDispatchingFragmentInjector {
+  public static class ActivityInjectsFragment extends Activity implements HasFragmentInjector {
     @Override
-    public DispatchingAndroidInjector<Fragment> fragmentInjector() {
-      return dispatchingFragmentInjector("injected by activity");
+    public AndroidInjector<Fragment> fragmentInjector() {
+      return fakeFragmentInjector("injected by activity");
     }
   }
 
@@ -95,10 +87,10 @@ public void fragmentInjectedByActivity() {
   }
 
   public static class ParentFragmentInjectsChildFragment extends Fragment
-      implements HasDispatchingFragmentInjector {
+      implements HasFragmentInjector {
     @Override
-    public DispatchingAndroidInjector<Fragment> fragmentInjector() {
-      return dispatchingFragmentInjector("injected by parent fragment");
+    public AndroidInjector<Fragment> fragmentInjector() {
+      return fakeFragmentInjector("injected by parent fragment");
     }
   }
 
@@ -121,7 +113,7 @@ public void fragmentInjectedByParentFragment() {
   }
 
   @Test
-  public void injectActivity_applicationDoesntImplementHasDispatchingActivityInjector() {
+  public void injectActivity_applicationDoesntImplementHasActivityInjector() {
     Activity activity = Robolectric.setupActivity(Activity.class);
 
     try {
@@ -130,12 +122,12 @@ public void injectActivity_applicationDoesntImplementHasDispatchingActivityInjec
     } catch (Exception e) {
       assertThat(e)
           .hasMessageThat()
-          .contains("Application does not implement dagger.android.HasDispatchingActivityInjector");
+          .contains("Application does not implement dagger.android.HasActivityInjector");
     }
   }
 
   @Test
-  public void injectFragment_hasDispatchingFragmentInjectorNotFound() {
+  public void injectFragment_hasFragmentInjectorNotFound() {
     Fragment fragment = new Fragment();
     FragmentTestUtil.startFragment(fragment);
 
@@ -148,21 +140,21 @@ public void injectFragment_hasDispatchingFragmentInjectorNotFound() {
   }
 
   private static class ApplicationReturnsNull extends Application
-      implements HasDispatchingActivityInjector, HasDispatchingFragmentInjector {
+      implements HasActivityInjector, HasFragmentInjector {
     @Override
-    public DispatchingAndroidInjector<Activity> activityInjector() {
+    public AndroidInjector<Activity> activityInjector() {
       return null;
     }
 
     @Override
-    public DispatchingAndroidInjector<Fragment> fragmentInjector() {
+    public AndroidInjector<Fragment> fragmentInjector() {
       return null;
     }
   }
 
   @Test
   @Config(manifest = Config.NONE, application = ApplicationReturnsNull.class)
-  public void dispatchingAndroidInjector_returnsNull() {
+  public void activityInjector_returnsNull() {
     Activity activity = Robolectric.setupActivity(Activity.class);
 
     try {
@@ -175,7 +167,7 @@ public void dispatchingAndroidInjector_returnsNull() {
 
   @Test
   @Config(manifest = Config.NONE, application = ApplicationReturnsNull.class)
-  public void dispatchingFragmentInjector_returnsNull() {
+  public void fragmentInjector_returnsNull() {
     Fragment fragment = new Fragment();
     FragmentTestUtil.startFragment(fragment);
 
diff --git a/javatests/dagger/android/support/AndroidSupportInjectionTest.java b/javatests/dagger/android/support/AndroidSupportInjectionTest.java
index 87593af4c..243bc38de 100644
--- a/javatests/dagger/android/support/AndroidSupportInjectionTest.java
+++ b/javatests/dagger/android/support/AndroidSupportInjectionTest.java
@@ -22,7 +22,7 @@
 import android.app.Application;
 import android.support.v4.app.Fragment;
 import org.robolectric.RobolectricTestRunner;
-import dagger.android.DispatchingAndroidInjector;
+import dagger.android.AndroidInjector;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
@@ -45,16 +45,16 @@ public void injectFragment_simpleApplication() {
   }
 
   private static class ApplicationReturnsNull extends Application
-      implements HasDispatchingSupportFragmentInjector {
+      implements HasSupportFragmentInjector {
     @Override
-    public DispatchingAndroidInjector<Fragment> supportFragmentInjector() {
+    public AndroidInjector<Fragment> supportFragmentInjector() {
       return null;
     }
   }
 
   @Test
   @Config(manifest = Config.NONE, application = ApplicationReturnsNull.class)
-  public void dispatchingFragmentInjector_returnsNull() {
+  public void fragmentInjector_returnsNull() {
     Fragment fragment = new Fragment();
     SupportFragmentTestUtil.startFragment(fragment);
 
diff --git a/javatests/dagger/android/support/functional/AllControllersAreDirectChildrenOfApplication.java b/javatests/dagger/android/support/functional/AllControllersAreDirectChildrenOfApplication.java
index f595e3a74..a72e82961 100644
--- a/javatests/dagger/android/support/functional/AllControllersAreDirectChildrenOfApplication.java
+++ b/javatests/dagger/android/support/functional/AllControllersAreDirectChildrenOfApplication.java
@@ -30,9 +30,9 @@
 import dagger.android.AndroidInjector;
 import dagger.android.BroadcastReceiverKey;
 import dagger.android.DispatchingAndroidInjector;
-import dagger.android.HasDispatchingActivityInjector;
-import dagger.android.HasDispatchingBroadcastReceiverInjector;
-import dagger.android.HasDispatchingServiceInjector;
+import dagger.android.HasActivityInjector;
+import dagger.android.HasBroadcastReceiverInjector;
+import dagger.android.HasServiceInjector;
 import dagger.android.ServiceKey;
 import dagger.android.support.AndroidSupportInjectionModule;
 import dagger.android.support.FragmentKey;
@@ -44,9 +44,7 @@
 import javax.inject.Inject;
 
 public final class AllControllersAreDirectChildrenOfApplication extends Application
-    implements HasDispatchingActivityInjector,
-        HasDispatchingServiceInjector,
-        HasDispatchingBroadcastReceiverInjector {
+    implements HasActivityInjector, HasServiceInjector, HasBroadcastReceiverInjector {
   @Inject DispatchingAndroidInjector<Activity> activityInjector;
   @Inject DispatchingAndroidInjector<Service> serviceInjector;
   @Inject DispatchingAndroidInjector<BroadcastReceiver> broadcastReceiverInjector;
@@ -58,17 +56,17 @@ public void onCreate() {
   }
 
   @Override
-  public DispatchingAndroidInjector<Activity> activityInjector() {
+  public AndroidInjector<Activity> activityInjector() {
     return activityInjector;
   }
 
   @Override
-  public DispatchingAndroidInjector<Service> serviceInjector() {
+  public AndroidInjector<Service> serviceInjector() {
     return serviceInjector;
   }
 
   @Override
-  public DispatchingAndroidInjector<BroadcastReceiver> broadcastReceiverInjector() {
+  public AndroidInjector<BroadcastReceiver> broadcastReceiverInjector() {
     return broadcastReceiverInjector;
   }
 
diff --git a/javatests/dagger/android/support/functional/ComponentStructureFollowsControllerStructureApplication.java b/javatests/dagger/android/support/functional/ComponentStructureFollowsControllerStructureApplication.java
index 705b9b3a6..527d69f37 100644
--- a/javatests/dagger/android/support/functional/ComponentStructureFollowsControllerStructureApplication.java
+++ b/javatests/dagger/android/support/functional/ComponentStructureFollowsControllerStructureApplication.java
@@ -30,9 +30,9 @@
 import dagger.android.AndroidInjector;
 import dagger.android.BroadcastReceiverKey;
 import dagger.android.DispatchingAndroidInjector;
-import dagger.android.HasDispatchingActivityInjector;
-import dagger.android.HasDispatchingBroadcastReceiverInjector;
-import dagger.android.HasDispatchingServiceInjector;
+import dagger.android.HasActivityInjector;
+import dagger.android.HasBroadcastReceiverInjector;
+import dagger.android.HasServiceInjector;
 import dagger.android.ServiceKey;
 import dagger.android.support.AndroidSupportInjectionModule;
 import dagger.android.support.FragmentKey;
@@ -44,9 +44,7 @@
 import javax.inject.Inject;
 
 public final class ComponentStructureFollowsControllerStructureApplication extends Application
-    implements HasDispatchingActivityInjector,
-        HasDispatchingServiceInjector,
-        HasDispatchingBroadcastReceiverInjector {
+    implements HasActivityInjector, HasServiceInjector, HasBroadcastReceiverInjector {
   @Inject DispatchingAndroidInjector<Activity> activityInjector;
   @Inject DispatchingAndroidInjector<Service> serviceInjector;
   @Inject DispatchingAndroidInjector<BroadcastReceiver> broadcastReceiverInjector;
@@ -59,17 +57,17 @@ public void onCreate() {
   }
 
   @Override
-  public DispatchingAndroidInjector<Activity> activityInjector() {
+  public AndroidInjector<Activity> activityInjector() {
     return activityInjector;
   }
 
   @Override
-  public DispatchingAndroidInjector<Service> serviceInjector() {
+  public AndroidInjector<Service> serviceInjector() {
     return serviceInjector;
   }
 
   @Override
-  public DispatchingAndroidInjector<BroadcastReceiver> broadcastReceiverInjector() {
+  public AndroidInjector<BroadcastReceiver> broadcastReceiverInjector() {
     return broadcastReceiverInjector;
   }
 
