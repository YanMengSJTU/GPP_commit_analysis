diff --git a/java/dagger/internal/codegen/BindingExpression.java b/java/dagger/internal/codegen/BindingExpression.java
index 6ef9ab6c8..34e9583fd 100644
--- a/java/dagger/internal/codegen/BindingExpression.java
+++ b/java/dagger/internal/codegen/BindingExpression.java
@@ -166,11 +166,13 @@ private BindingExpression create(
       switch (provisionBinding.bindingKind()) {
         case COMPONENT:
           return new ComponentInstanceBindingExpression(bindingExpression, componentName);
+
         case COMPONENT_DEPENDENCY:
           return new BoundInstanceBindingExpression(
               bindingExpression,
               ComponentRequirement.forDependency(provisionBinding.key().type()),
               componentRequirementFields);
+
         case COMPONENT_PROVISION:
           return new ComponentProvisionBindingExpression(
               bindingExpression,
@@ -178,23 +180,29 @@ private BindingExpression create(
               graph,
               componentRequirementFields,
               compilerOptions);
+
         case SUBCOMPONENT_BUILDER:
           return new SubcomponentBuilderBindingExpression(
               bindingExpression, subcomponentNames.get(resolvedBindings.bindingKey()));
+
         case SYNTHETIC_MULTIBOUND_SET:
           return new SetBindingExpression(
               provisionBinding, graph, componentBindingExpressions, bindingExpression, elements);
+
         case SYNTHETIC_MULTIBOUND_MAP:
           return new MapBindingExpression(
               provisionBinding, graph, componentBindingExpressions, bindingExpression, elements);
+
         case SYNTHETIC_OPTIONAL_BINDING:
           return new OptionalBindingExpression(
               provisionBinding, bindingExpression, componentBindingExpressions);
+
         case BUILDER_BINDING:
               return new BoundInstanceBindingExpression(
                   bindingExpression,
                   ComponentRequirement.forBinding(provisionBinding),
                   componentRequirementFields);
+
         case INJECTION:
         case PROVISION:
           if (!provisionBinding.scope().isPresent()
@@ -215,6 +223,7 @@ private BindingExpression create(
                 componentRequirementFields);
           }
           // fall through
+
         default:
           return bindingExpression;
       }
