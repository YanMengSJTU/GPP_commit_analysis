diff --git a/java/dagger/internal/codegen/InjectionMethods.java b/java/dagger/internal/codegen/InjectionMethods.java
index dbce62d14..e0fecc017 100644
--- a/java/dagger/internal/codegen/InjectionMethods.java
+++ b/java/dagger/internal/codegen/InjectionMethods.java
@@ -92,6 +92,11 @@
    * </code></pre>
    */
   static final class ProvisionMethod {
+    /**
+     * Names of methods that are already defined in factories and shouldn't be used for the proxy
+     * method name.
+     */
+    private static final ImmutableSet<String> BANNED_PROXY_NAMES = ImmutableSet.of("get", "create");
 
     /**
      * Returns a method that invokes the binding's {@linkplain ProvisionBinding#bindingElement()
@@ -200,9 +205,12 @@ private static boolean areParametersAssignable(
     private static String methodName(ExecutableElement method) {
       switch (method.getKind()) {
         case CONSTRUCTOR:
-          return "new" + method.getEnclosingElement().getSimpleName();
+          return "newInstance";
         case METHOD:
-          return "proxy" + LOWER_CAMEL.to(UPPER_CAMEL, method.getSimpleName().toString());
+          String methodName = method.getSimpleName().toString();
+          return BANNED_PROXY_NAMES.contains(methodName)
+              ? "proxy" + LOWER_CAMEL.to(UPPER_CAMEL, methodName)
+              : methodName;
         default:
           throw new AssertionError(method);
       }
diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsMultibindingsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsMultibindingsTest.java
index d77112d8c..a12abb888 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsMultibindingsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsMultibindingsTest.java
@@ -86,7 +86,7 @@ public void setMultibindings_contributionsInLeaf() {
             "  @Override",
             "  public Set<InLeaf> contributionsInLeaf() {",
             "    return ImmutableSet.<InLeaf>of(",
-            "        LeafModule_ProvideInLeafFactory.proxyProvideInLeaf());",
+            "        LeafModule_ProvideInLeafFactory.provideInLeaf());",
             "  }",
             "}");
     Compilation compilation = compile(filesToCompile.build());
@@ -182,7 +182,7 @@ public void setMultibindings_contributionsInAncestorOnly() {
             "    @Override",
             "    public Set<InAncestor> contributionsInAncestor() {",
             "      return ImmutableSet.<InAncestor>copyOf(",
-            "          AncestorModule_ProvideInAncestorsFactory.proxyProvideInAncestors());",
+            "          AncestorModule_ProvideInAncestorsFactory.provideInAncestors());",
             "    }",
             "  }",
             "}");
@@ -249,8 +249,8 @@ public void setMultibindings_contributionsInLeafAndAncestor() {
             "  @Override",
             "  public Set<InEachSubcomponent> contributionsInEachSubcomponent() {",
             "    return ImmutableSet.<InEachSubcomponent>of(",
-            "        LeafModule_ProvideInLeafFactory.proxyProvideInLeaf(),",
-            "        LeafModule_ProvideAnotherInLeafFactory.proxyProvideAnotherInLeaf());",
+            "        LeafModule_ProvideInLeafFactory.provideInLeaf(),",
+            "        LeafModule_ProvideAnotherInLeafFactory.provideAnotherInLeaf());",
             "  }",
             "}");
     Compilation compilation = compile(filesToCompile.build());
@@ -310,7 +310,7 @@ public void setMultibindings_contributionsInLeafAndAncestor() {
             "    @Override",
             "    public Set<InEachSubcomponent> contributionsInEachSubcomponent() {",
             "      return ImmutableSet.<InEachSubcomponent>builderWithExpectedSize(3)",
-            "          .addAll(AncestorModule_ProvideInAncestorFactory.proxyProvideInAncestor())",
+            "          .addAll(AncestorModule_ProvideInAncestorFactory.provideInAncestor())",
             "          .addAll(super.contributionsInEachSubcomponent())",
             "          .build();",
             "    }",
@@ -379,8 +379,8 @@ public void setMultibindings_contributionsInLeafAndGrandAncestor() {
             "  @Override",
             "  public Set<InLeafAndGrandAncestor> contributionsInLeafAndGrandAncestor() {",
             "    return ImmutableSet.<InLeafAndGrandAncestor>of(",
-            "        LeafModule_ProvideInLeafFactory.proxyProvideInLeaf(),",
-            "        LeafModule_ProvideAnotherInLeafFactory.proxyProvideAnotherInLeaf());",
+            "        LeafModule_ProvideInLeafFactory.provideInLeaf(),",
+            "        LeafModule_ProvideAnotherInLeafFactory.provideAnotherInLeaf());",
             "  }",
             "}");
     Compilation compilation = compile(filesToCompile.build());
@@ -477,7 +477,7 @@ public void setMultibindings_contributionsInLeafAndGrandAncestor() {
             "    public Set<InLeafAndGrandAncestor> contributionsInLeafAndGrandAncestor() {",
             "      return ImmutableSet.<InLeafAndGrandAncestor>builderWithExpectedSize(3)",
             "          .addAll(GrandAncestorModule_ProvideInGrandAncestorFactory",
-            "              .proxyProvideInGrandAncestor())",
+            "              .provideInGrandAncestor())",
             "          .addAll(super.contributionsInLeafAndGrandAncestor())",
             "          .build();",
             "    }",
@@ -547,13 +547,13 @@ public void setMultibindings_nonComponentMethodDependency() {
             "  @Override",
             "  public RequresInAllSubcomponentsSet requiresNonComponentMethod() {",
             "    return LeafModule_ProvidesRequresInAllSubcomponentsSetFactory",
-            "        .proxyProvidesRequresInAllSubcomponentsSet(getSetOfInAllSubcomponents());",
+            "        .providesRequresInAllSubcomponentsSet(getSetOfInAllSubcomponents());",
             "  }",
             "",
             "  protected Set getSetOfInAllSubcomponents() {",
             "    return ImmutableSet.<InAllSubcomponents>of(",
             "        LeafModule_ProvideInAllSubcomponentsFactory",
-            "            .proxyProvideInAllSubcomponents());",
+            "            .provideInAllSubcomponents());",
             "  }",
             "}");
     Compilation compilation = compile(filesToCompile.build());
@@ -611,7 +611,7 @@ public void setMultibindings_nonComponentMethodDependency() {
             "    protected Set getSetOfInAllSubcomponents() {",
             "      return ImmutableSet.<InAllSubcomponents>builderWithExpectedSize(2)",
             "          .add(AncestorModule_ProvideInAllSubcomponentsFactory",
-            "              .proxyProvideInAllSubcomponents())",
+            "              .provideInAllSubcomponents())",
             "          .addAll(super.getSetOfInAllSubcomponents())",
             "          .build();",
             "    }",
@@ -710,12 +710,12 @@ public void setMultibindings_newSubclass() {
             "",
             "  private RequiresInAncestorSet getRequiresInAncestorSet() {",
             "    return AncestorModule_ProvideRequiresInAncestorSetFactory",
-            "        .proxyProvideRequiresInAncestorSet(getSetOfInAncestor());",
+            "        .provideRequiresInAncestorSet(getSetOfInAncestor());",
             "  }",
             "",
             "  protected Set getSetOfInAncestor() {",
             "    return ImmutableSet.<InAncestor>of(",
-            "        AncestorModule_ProvideInAncestorFactory.proxyProvideInAncestor());",
+            "        AncestorModule_ProvideInAncestorFactory.provideInAncestor());",
             "  }",
             "",
             "  protected abstract class LeafImpl extends DaggerLeaf {",
@@ -788,7 +788,7 @@ public void setMultibinding_requestedAsInstanceInLeaf_requestedAsFrameworkInstan
             "  @Override",
             "  public Set<Multibound> instance() {",
             "    return ImmutableSet.<Multibound>of(",
-            "        LeafModule_ContributionFactory.proxyContribution());",
+            "        LeafModule_ContributionFactory.contribution());",
             "  }",
             "}");
     Compilation compilation = compile(filesToCompile.build());
@@ -868,7 +868,7 @@ public void setMultibinding_requestedAsInstanceInLeaf_requestedAsFrameworkInstan
             "    @Override",
             "    public final MissingInLeaf_WillDependOnFrameworkInstance ",
             "        willDependOnFrameworkInstance() {",
-            "      return AncestorModule_ProvidedInAncestorFactory.proxyProvidedInAncestor(",
+            "      return AncestorModule_ProvidedInAncestorFactory.providedInAncestor(",
             "          getSetOfMultiboundProvider());",
             "    }",
             "  }",
@@ -1098,7 +1098,7 @@ public void mapMultibindings_contributionsInLeaf() {
             "  public Map<String, InLeaf> contributionsInLeaf() {",
             "    return ImmutableMap.<String, InLeaf>of(",
             "        \"leafmodule\",",
-            "        LeafModule_ProvideInLeafFactory.proxyProvideInLeaf());",
+            "        LeafModule_ProvideInLeafFactory.provideInLeaf());",
             "  }",
             "}");
     Compilation compilation = compile(filesToCompile.build());
@@ -1194,7 +1194,7 @@ public void mapMultibindings_contributionsInAncestorOnly() {
             "    @Override",
             "    public Map<String, InAncestor> contributionsInAncestor() {",
             "      return ImmutableMap.<String, InAncestor>of(\"ancestormodule\",",
-            "          AncestorModule_ProvideInAncestorFactory.proxyProvideInAncestor());",
+            "          AncestorModule_ProvideInAncestorFactory.provideInAncestor());",
             "    }",
             "  }",
             "}");
@@ -1258,7 +1258,7 @@ public void mapMultibindings_contributionsInLeafAndAncestor() {
             "  @Override",
             "  public Map<String, InEachSubcomponent> contributionsInEachSubcomponent() {",
             "    return ImmutableMap.<String, InEachSubcomponent>of(",
-            "        \"leafmodule\", LeafModule_ProvideInLeafFactory.proxyProvideInLeaf());",
+            "        \"leafmodule\", LeafModule_ProvideInLeafFactory.provideInLeaf());",
             "  }",
             "}");
     Compilation compilation = compile(filesToCompile.build());
@@ -1319,7 +1319,7 @@ public void mapMultibindings_contributionsInLeafAndAncestor() {
             "    public Map<String, InEachSubcomponent> contributionsInEachSubcomponent() {",
             "      return ImmutableMap.<String, InEachSubcomponent>builderWithExpectedSize(2)",
             "          .put(\"ancestormodule\",",
-            "              AncestorModule_ProvideInAncestorFactory.proxyProvideInAncestor())",
+            "              AncestorModule_ProvideInAncestorFactory.provideInAncestor())",
             "          .putAll(super.contributionsInEachSubcomponent())",
             "          .build();",
             "    }",
@@ -1549,7 +1549,7 @@ public void mapMultibindings_contributionsInLeafAndGrandAncestor() {
             "  @Override",
             "  public Map<String, InLeafAndGrandAncestor> contributionsInLeafAndGrandAncestor() {",
             "    return ImmutableMap.<String, InLeafAndGrandAncestor>of(",
-            "        \"leafmodule\", LeafModule_ProvideInLeafFactory.proxyProvideInLeaf());",
+            "        \"leafmodule\", LeafModule_ProvideInLeafFactory.provideInLeaf());",
             "  }",
             "}");
     Compilation compilation = compile(filesToCompile.build());
@@ -1650,7 +1650,7 @@ public void mapMultibindings_contributionsInLeafAndGrandAncestor() {
             "            ImmutableMap.<String, InLeafAndGrandAncestor>builderWithExpectedSize(2)",
             "                .put(\"grandancestormodule\",",
             "                    GrandAncestorModule_ProvideInGrandAncestorFactory",
-            "                        .proxyProvideInGrandAncestor())",
+            "                        .provideInGrandAncestor())",
             "                .putAll(super.contributionsInLeafAndGrandAncestor())",
             "                .build();",
             "      }",
@@ -1717,7 +1717,7 @@ public void mapMultibindings_contributionsInLeafAndAncestorWithoutGuava() {
             "  @Override",
             "  public Map<String, InEachSubcomponent> contributionsInEachSubcomponent() {",
             "    return Collections.<String, InEachSubcomponent>singletonMap(",
-            "        \"leafmodule\", LeafModule_ProvideInLeafFactory.proxyProvideInLeaf());",
+            "        \"leafmodule\", LeafModule_ProvideInLeafFactory.provideInLeaf());",
             "  }",
             "}");
     Compilation compilation = compileWithoutGuava(filesToCompile.build());
@@ -1778,7 +1778,7 @@ public void mapMultibindings_contributionsInLeafAndAncestorWithoutGuava() {
             "    public Map<String, InEachSubcomponent> contributionsInEachSubcomponent() {",
             "      return MapBuilder.<String, InEachSubcomponent>newMapBuilder(2)",
             "          .put(\"ancestormodule\",",
-            "              AncestorModule_ProvideInAncestorFactory.proxyProvideInAncestor())",
+            "              AncestorModule_ProvideInAncestorFactory.provideInAncestor())",
             "          .putAll(super.contributionsInEachSubcomponent())",
             "          .build();",
             "    }",
@@ -1847,7 +1847,7 @@ public void mapMultibinding_requestedAsInstanceInLeaf_requestedAsFrameworkInstan
             "  @Override",
             "  public Map<Integer, Multibound> instance() {",
             "    return ImmutableMap.<Integer, Multibound>of(",
-            "        111, LeafModule_ContributionFactory.proxyContribution());",
+            "        111, LeafModule_ContributionFactory.contribution());",
             "  }",
             "}");
     Compilation compilation = compile(filesToCompile.build());
@@ -1927,7 +1927,7 @@ public void mapMultibinding_requestedAsInstanceInLeaf_requestedAsFrameworkInstan
             "    @Override",
             "    public final MissingInLeaf_WillDependOnFrameworkInstance ",
             "        willDependOnFrameworkInstance() {",
-            "      return AncestorModule_ProvidedInAncestorFactory.proxyProvidedInAncestor(",
+            "      return AncestorModule_ProvidedInAncestorFactory.providedInAncestor(",
             "          getMapOfIntegerAndMultiboundProvider());",
             "    }",
             "  }",
@@ -2042,7 +2042,7 @@ public void emptyMultibinds_set() {
             "    @Override",
             "    public Set<Multibound> set() {",
             "      return ImmutableSet.<Multibound>of(",
-            "          AncestorModule_FromAncestorFactory.proxyFromAncestor());",
+            "          AncestorModule_FromAncestorFactory.fromAncestor());",
             "    }",
             "  }",
             "}");
@@ -2291,7 +2291,7 @@ public void emptyMultibinds_map() {
             "    @Override",
             "    public Map<Integer, Multibound> map() {",
             "      return ImmutableMap.<Integer, Multibound>of(",
-            "          111, AncestorModule_FromAncestorFactory.proxyFromAncestor());",
+            "          111, AncestorModule_FromAncestorFactory.fromAncestor());",
             "    }",
             "  }",
             "}");
@@ -2587,7 +2587,7 @@ public void multibindingsAndFastInit() {
             "      synchronized (local) {",
             "        local = setContribution;",
             "        if (local instanceof MemoizedSentinel) {",
-            "          local = MultibindingModule_SetContributionFactory.proxySetContribution();",
+            "          local = MultibindingModule_SetContributionFactory.setContribution();",
             "          setContribution = DoubleCheck.reentrantCheck(setContribution, local);",
             "        }",
             "      }",
@@ -2601,7 +2601,7 @@ public void multibindingsAndFastInit() {
             "      synchronized (local) {",
             "        local = mapContribution;",
             "        if (local instanceof MemoizedSentinel) {",
-            "          local = MultibindingModule_MapContributionFactory.proxyMapContribution();",
+            "          local = MultibindingModule_MapContributionFactory.mapContribution();",
             "          mapContribution = DoubleCheck.reentrantCheck(mapContribution, local);",
             "        }",
             "      }",
diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
index b1b0d3752..d9bcdebc0 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
@@ -114,7 +114,7 @@ public void missingBindings_fromComponentMethod() {
             "",
             "    @Override",
             "    public final MissingInLeaf missingFromComponentMethod() {",
-            "      return AncestorModule_SatisfiedInAncestorFactory.proxySatisfiedInAncestor();",
+            "      return AncestorModule_SatisfiedInAncestorFactory.satisfiedInAncestor();",
             "    }",
             "  }",
             "}");
@@ -266,7 +266,7 @@ public void missingBindings_dependsOnMissingBinding() {
             "",
             "    @Override",
             "    protected final Object getMissingInLeaf() {",
-            "      return AncestorModule_SatisfiedInAncestorFactory.proxySatisfiedInAncestor();",
+            "      return AncestorModule_SatisfiedInAncestorFactory.satisfiedInAncestor();",
             "    }",
             "  }",
             "}");
@@ -356,7 +356,7 @@ public void missingBindings_satisfiedInGreatAncestor() {
             "",
             "      @Override",
             "      protected final Object getMissingInLeaf() {",
-            "        return SatisfiesMissingBindingModule_SatisfyFactory.proxySatisfy();",
+            "        return SatisfiesMissingBindingModule_SatisfyFactory.satisfy();",
             "      }",
             "    }",
             "  }",
@@ -408,7 +408,7 @@ public void moduleInstanceDependency() {
             "",
             "  @Override",
             "  public String string() {",
-            "    return TestModule_ProvideStringFactory.proxyProvideString(testModule());",
+            "    return TestModule_ProvideStringFactory.provideString(testModule());",
             "  }",
             "",
             "  protected abstract TestModule testModule();",
@@ -975,7 +975,7 @@ public void prunedGeneratedInstanceBinding() {
             "    @Override",
             "    public DependsOnPrunedSubcomponentBuilder dependsOnPrunedSubcomponentBuilder() {",
             "      return PrunesGeneratedInstanceModule_PruneGeneratedInstanceFactory",
-            "          .proxyPruneGeneratedInstance();",
+            "          .pruneGeneratedInstance();",
             "    }",
             "  }",
             "}");
@@ -1044,7 +1044,7 @@ public void optionalBindings_boundAndSatisfiedInSameSubcomponent() {
             "  public Optional<SatisfiedInSub> satisfiedInSub() {",
             "    return Optional.of(",
             "        BindsSatisfiedInSubModule_ProvideSatisfiedInSubFactory",
-            "            .proxyProvideSatisfiedInSub());",
+            "            .provideSatisfiedInSub());",
             "  }",
             "}");
     Compilation compilation = compile(filesToCompile.build());
@@ -1151,7 +1151,7 @@ public void optionalBindings_satisfiedInAncestor() {
             "    @Override",
             "    public final Optional<SatisfiedInAncestor> satisfiedInAncestor() {",
             "      return Optional.of(AncestorModule_SatisfiedInAncestorFactory",
-            "          .proxySatisfiedInAncestor());",
+            "          .satisfiedInAncestor());",
             "    }",
             "",
             "  }",
@@ -1299,7 +1299,7 @@ public void optionalBindings_satisfiedInGrandAncestor() {
             "      public final Optional<SatisfiedInGrandAncestor> satisfiedInGrandAncestor() {",
             "        return Optional.of(",
             "            GreatAncestorModule_SatisfiedInGrandAncestorFactory",
-            "                .proxySatisfiedInGrandAncestor());",
+            "                .satisfiedInGrandAncestor());",
             "      }",
             "    }",
             "  }",
@@ -1365,7 +1365,7 @@ public void optionalBindings_nonComponentMethodDependencySatisfiedInAncestor() {
             "  public RequiresOptionalSatisfiedInAncestor",
             "      requiresOptionalSatisfiedInAncestor() {",
             "    return LeafModule_ProvideRequiresOptionalSatisfiedInAncestorFactory",
-            "        .proxyProvideRequiresOptionalSatisfiedInAncestor(",
+            "        .provideRequiresOptionalSatisfiedInAncestor(",
             "            getOptionalOfSatisfiedInAncestor());",
             "  }",
             "",
@@ -1424,7 +1424,7 @@ public void optionalBindings_nonComponentMethodDependencySatisfiedInAncestor() {
             "    @Override",
             "    protected final Optional getOptionalOfSatisfiedInAncestor() {",
             "      return Optional.of(",
-            "          AncestorModule_SatisfiedInAncestorFactory.proxySatisfiedInAncestor());",
+            "          AncestorModule_SatisfiedInAncestorFactory.satisfiedInAncestor());",
             "    }",
             "  }",
             "}");
@@ -1572,7 +1572,7 @@ public void optionalBindings_boundInAncestorAndSatisfiedInGrandAncestor() {
             "          boundInAncestorSatisfiedInGrandAncestor() {",
             "        return Optional.of(",
             "            GrandAncestorModule_ProvideSatisfiedInGrandAncestorFactory",
-            "                .proxyProvideSatisfiedInGrandAncestor());",
+            "                .provideSatisfiedInGrandAncestor());",
             "      }",
             "    }",
             "  }",
@@ -1678,7 +1678,7 @@ public void provisionOverInjection_providedInAncestor() {
             "    @Override",
             "    public final ProvidedInAncestor injectedInLeaf() {",
             "      return AncestorModule_ProvideProvidedInAncestorFactory",
-            "          .proxyProvideProvidedInAncestor();",
+            "          .provideProvidedInAncestor();",
             "    }",
             "  }",
             "}");
@@ -1820,7 +1820,7 @@ public void provisionOverInjection_providedInGrandAncestor() {
             "      @Override",
             "      public final ProvidedInGrandAncestor injectedInLeaf() {",
             "        return GrandAncestorModule_ProvideProvidedInGrandAncestorFactory",
-            "            .proxyProvideProvidedInGrandAncestor();",
+            "            .provideProvidedInGrandAncestor();",
             "      }",
             "    }",
             "  }",
@@ -1940,7 +1940,7 @@ public void provisionOverInjection_indirectDependency() {
             "    @Override",
             "    protected final Object getProvidedInAncestor() {",
             "      return AncestorModule_ProvideProvidedInAncestorFactory",
-            "          .proxyProvideProvidedInAncestor();",
+            "          .provideProvidedInAncestor();",
             "    }",
             "}");
     compilation = compile(filesToCompile.build());
@@ -2080,7 +2080,7 @@ public void provisionOverInjection_prunedIndirectDependency() {
             "    @Override",
             "    public InjectsPrunedDependency injectsPrunedDependency() {",
             "      return RootModule_InjectsPrunedDependencyFactory",
-            "          .proxyInjectsPrunedDependency();",
+            "          .injectsPrunedDependency();",
             "    }",
             "  }",
             "}");
@@ -2229,7 +2229,7 @@ public void provisionOverInjection_prunedDirectDependency_prunedInConcreteImplem
             "    @Override",
             "    public InjectsPrunedDependency injectsPrunedDependency() {",
             "      return RootModule_InjectsPrunedDependencyFactory",
-            "          .proxyInjectsPrunedDependency();",
+            "          .injectsPrunedDependency();",
             "    }",
             "  }",
             "}");
@@ -2352,7 +2352,7 @@ public void provisionOverInjection_prunedDirectDependency_prunedInAbstractImplem
             "    @Override",
             "    public final InjectsPrunedDependency injectsPrunedDependency() {",
             "      return AncestorModule_InjectsPrunedDependencyFactory",
-            "          .proxyInjectsPrunedDependency();",
+            "          .injectsPrunedDependency();",
             "    }",
             "  }",
             "}");
@@ -2922,7 +2922,7 @@ public void missingBindingAccessInLeafAndAncestor() {
             "",
             "  @Override",
             "  public DependsOnMissing instance() {",
-            "    return LeafModule_TestFactory.proxyTest(",
+            "    return LeafModule_TestFactory.test(",
             // TODO(b/117833324): remove these unnecessary casts
             "        (Missing) getMissing(),",
             "        getMissingProvider(),",
@@ -3014,7 +3014,7 @@ public void missingBindingAccessInLeafAndAncestor() {
             "    }",
             "",
             "    private Object getUnresolvedSetBinding() {",
-            "      return LeafModule_UnresolvedSetBindingFactory.proxyUnresolvedSetBinding(",
+            "      return LeafModule_UnresolvedSetBindingFactory.unresolvedSetBinding(",
             // TODO(b/117833324): remove this unnecessary cast
             "          (Missing) getMissing(), getMissingProvider());",
             "    }",
@@ -3035,13 +3035,13 @@ public void missingBindingAccessInLeafAndAncestor() {
             "",
             "    protected Set<Object> getSetOfObject() {",
             "      return ImmutableSet.<Object>of(",
-            "          AncestorModule_SetContributionFactory.proxySetContribution(),",
+            "          AncestorModule_SetContributionFactory.setContribution(),",
             "          getUnresolvedSetBinding());",
             "    }",
             "",
             "    @Override",
             "    protected final Object getProvidedInAncestor_InducesSetBinding() {",
-            "      return AncestorModule_ProvidedInAncestorFactory.proxyProvidedInAncestor(",
+            "      return AncestorModule_ProvidedInAncestorFactory.providedInAncestor(",
             "          getSetOfObject());",
             "    }",
             "",
@@ -3154,7 +3154,7 @@ public void subcomponentBuilders() {
             "",
             "  @Override",
             "  public Object fromModule() {",
-            "    return LeafModule_FromModuleFactory.proxyFromModule(leafModule());",
+            "    return LeafModule_FromModuleFactory.fromModule(leafModule());",
             "  }",
             "",
             "  protected LeafModule leafModule() {",
@@ -3257,7 +3257,7 @@ public void subcomponentBuilders() {
             "    @Override",
             "    public final InducesDependenciesOnBuilderFields",
             "        inducesDependenciesOnBuilderFields() {",
-            "      return MultibindingInducingModule_InduceFactory.proxyInduce(getSetOfString());",
+            "      return MultibindingInducingModule_InduceFactory.induce(getSetOfString());",
             "    }",
             "  }",
             "}");
@@ -3431,7 +3431,7 @@ public void subcomponentBuilders_moduleWithUnusedInstanceBindings() {
             "",
             "  @Override",
             "  public Used used() {",
-            "    return ModuleWithUsedBinding_UsedFactory.proxyUsed(",
+            "    return ModuleWithUsedBinding_UsedFactory.used(",
             "        moduleWithUsedBinding());",
             "  }",
             "",
@@ -3814,7 +3814,7 @@ public void bindsWithMissingDependency() {
             "",
             "    @Override",
             "    public Object bindsWithMissingDependencyInLeaf() {",
-            "      return MissingInLeafModule_BoundInRootFactory.proxyBoundInRoot();",
+            "      return MissingInLeafModule_BoundInRootFactory.boundInRoot();",
             "    }",
             "  }",
             "}");
@@ -3954,7 +3954,7 @@ public void bindsWithMissingDependency_pruned() {
             "    @Override",
             "    public DependsOnBindsWithMissingDep DependsOnBindsWithMissingDep() {",
             "      return PrunesInjectConstructorModule_PruneInjectConstructorFactory",
-            "          .proxyPruneInjectConstructor();",
+            "          .pruneInjectConstructor();",
             "    }",
             "  }",
             "}");
@@ -4287,7 +4287,7 @@ public void modifiableBindingMethods_namesDedupedAcrossImplementations() {
             "",
             "  @Override",
             "  public CharSequence inducesFoo() {",
-            "    return LeafModule_DepOnFooThingFactory.proxyDepOnFooThing(getThing());",
+            "    return LeafModule_DepOnFooThingFactory.depOnFooThing(getThing());",
             "  }",
             "",
             "  protected abstract Thing getThing();",
@@ -4348,7 +4348,7 @@ public void modifiableBindingMethods_namesDedupedAcrossImplementations() {
             "    protected LeafImpl() {}",
             "",
             "    private Runnable getDepOnBarThing() {",
-            "      return LeafModule_DepOnBarThingFactory.proxyDepOnBarThing(getThing2());",
+            "      return LeafModule_DepOnBarThingFactory.depOnBarThing(getThing2());",
             "    }",
             "",
             "    protected abstract Thing getThing2();",
@@ -4359,7 +4359,7 @@ public void modifiableBindingMethods_namesDedupedAcrossImplementations() {
             "",
             "    @Override",
             "    public final WillInduceSetOfRunnable willInduceSetOfRunnable() {",
-            "      return AncestorModule_InduceFactory.proxyInduce(getSetOfRunnable());",
+            "      return AncestorModule_InduceFactory.induce(getSetOfRunnable());",
             "    }",
             "  }",
             "}");
@@ -4493,7 +4493,7 @@ public void subcomponentInducedFromAncestor() {
             "    protected MaybeLeafImpl() {}",
             "",
             "    private Object getInducedSet() {",
-            "      return InducedSubcomponentModule_InducedSetFactory.proxyInducedSet(",
+            "      return InducedSubcomponentModule_InducedSetFactory.inducedSet(",
             // TODO(b/117833324): remove this unnecessary cast
             "          (InducedSubcomponent.Builder) getInducedSubcomponentBuilder());",
             "    }",
@@ -4506,7 +4506,7 @@ public void subcomponentInducedFromAncestor() {
             "",
             "    @Override",
             "    public final Inducer inducer() {",
-            "      return AncestorModule_InducerFactory.proxyInducer(getSetOfObject());",
+            "      return AncestorModule_InducerFactory.inducer(getSetOfObject());",
             "    }",
             "",
             "    protected abstract class InducedSubcomponentImpl extends",
@@ -4667,7 +4667,7 @@ public void prunedModuleWithInstanceState() {
             "",
             "  @Override",
             "  public Modified modified() {",
-            "    return new Modified(LeafModule_PrunedFactory.proxyPruned(leafModule()));",
+            "    return new Modified(LeafModule_PrunedFactory.pruned(leafModule()));",
             "  }",
             "",
             "  protected abstract LeafModule leafModule();",
@@ -4719,7 +4719,7 @@ public void prunedModuleWithInstanceState() {
             "  protected final class LeafImpl extends DaggerLeaf {",
             "    @Override",
             "    public Modified modified() {",
-            "      return RootModule_ModifiedFactory.proxyModified();",
+            "      return RootModule_ModifiedFactory.modified();",
             "    }",
             "",
             "    @Override",
@@ -5011,7 +5011,7 @@ public void dependencyExpressionCasting() {
             "  @Override",
             "  public Parameterized<ModifiableNonPublicSubclass> ",
             "      parameterizedWithNonPublicSubtype() {",
-            "    return Parameterized_Factory.newParameterized(",
+            "    return Parameterized_Factory.newInstance(",
             "        (ModifiableNonPublicSubclass) getModifiableNonPublicSubclass());",
             "  }",
             "",
@@ -5099,7 +5099,7 @@ public void multipleComponentMethodsForSameBindingRequest() {
             "",
             "    @Override",
             "    public String string1() {",
-            "      return RootModule_StringFactory.proxyString();",
+            "      return RootModule_StringFactory.string();",
             "    }",
             "  }",
             "}");
diff --git a/javatests/dagger/internal/codegen/ComponentBuilderTest.java b/javatests/dagger/internal/codegen/ComponentBuilderTest.java
index 0552b3bbe..6f2d66b2b 100644
--- a/javatests/dagger/internal/codegen/ComponentBuilderTest.java
+++ b/javatests/dagger/internal/codegen/ComponentBuilderTest.java
@@ -242,12 +242,12 @@ public void testIgnoresModulesNotInApi() {
             "",
             "  @Override",
             "  public String string() {",
-            "    return TestModule1_StringFactory.proxyString(testModule1);",
+            "    return TestModule1_StringFactory.string(testModule1);",
             "  }",
             "",
             "  @Override",
             "  public Integer integer() {",
-            "    return TestModule2_IntegerFactory.proxyInteger(testModule2);",
+            "    return TestModule2_IntegerFactory.integer(testModule2);",
             "  }",
             "",
             "  private static final class Builder implements TestComponent.Builder {",
diff --git a/javatests/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
index 696cae84e..bdf8a87af 100644
--- a/javatests/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
@@ -515,7 +515,7 @@ public ComponentProcessorTest(CompilerMode compilerMode) {
                 "  }",
                 "",
                 "  private B getB() {",
-                "    return TestModule_BFactory.proxyB(testModule, new C());",
+                "    return TestModule_BFactory.b(testModule, new C());",
                 "  }",
                 "",
                 "  @Override",
@@ -613,7 +613,7 @@ public void componentWithAbstractModule() {
                 GENERATED_ANNOTATION,
                 "public final class DaggerTestComponent implements TestComponent {",
                 "  private B getB() {",
-                "    return TestModule_BFactory.proxyB(new C());",
+                "    return TestModule_BFactory.b(new C());",
                 "  }",
                 "",
                 "  @Override",
@@ -908,7 +908,7 @@ public void subcomponentNotGeneratedIfNotUsedInGraph() {
             "",
             "  @Override",
             "  public String notSubcomponent() {",
-            "    return ParentModule_NotSubcomponentFactory.proxyNotSubcomponent();",
+            "    return ParentModule_NotSubcomponentFactory.notSubcomponent();",
             "  }",
             "",
             "  public static final class Builder {",
@@ -1134,7 +1134,7 @@ public void testDefaultPackage() {
                 "  @Override",
                 "  public SomeInjectedType createAndInject() {",
                 "    return injectSomeInjectedType(",
-                "        SomeInjectedType_Factory.newSomeInjectedType());",
+                "        SomeInjectedType_Factory.newInstance());",
                 "  }",
                 "",
                 "  @CanIgnoreReturnValue",
@@ -1357,12 +1357,12 @@ public void testDefaultPackage() {
             "",
             "  @Override",
             "  public A a() {",
-            "    return TestModule_AFactory.proxyA(testModule);",
+            "    return TestModule_AFactory.a(testModule);",
             "  }",
             "",
             "  @Override",
             "  public other.test.A otherA() {",
-            "    return other.test.TestModule_AFactory.proxyA(testModule2);",
+            "    return other.test.TestModule_AFactory.a(testModule2);",
             "  }",
             "",
             "  public static final class Builder {",
@@ -2230,10 +2230,10 @@ public void nullIncorrectlyReturnedFromNonNullableInlinedProvider() {
                 "    implements Factory<String> {",
                 "  @Override",
                 "  public String get() {",
-                "    return proxyNonNullableString();",
+                "    return nonNullableString();",
                 "  }",
                 "",
-                "  public static String proxyNonNullableString() {",
+                "  public static String nonNullableString() {",
                 "    return Preconditions.checkNotNull(",
                 "        TestModule.nonNullableString(), " + NPE_FROM_PROVIDES_METHOD + ");",
                 "  }",
@@ -2249,7 +2249,7 @@ public void nullIncorrectlyReturnedFromNonNullableInlinedProvider() {
                 "public final class DaggerTestComponent implements TestComponent {",
                 "  @Override",
                 "  public String nonNullableString() {",
-                "    return TestModule_NonNullableStringFactory.proxyNonNullableString());",
+                "    return TestModule_NonNullableStringFactory.nonNullableString());",
                 "  }",
                 "",
                 "  @Override",
@@ -2260,7 +2260,7 @@ public void nullIncorrectlyReturnedFromNonNullableInlinedProvider() {
                 "  @CanIgnoreReturnValue",
                 "  private InjectsMember injectInjectsMember(InjectsMember instance) {",
                 "    InjectsMember_MembersInjector.injectMember(instance,",
-                "        TestModule_NonNullableStringFactory.proxyNonNullableString());",
+                "        TestModule_NonNullableStringFactory.nonNullableString());",
                 "    return instance;",
                 "  }",
                 "}")
@@ -2322,10 +2322,10 @@ public void nullCheckingIgnoredWhenProviderReturnsPrimitive() {
                 "",
                 "  @Override",
                 "  public Integer get() {",
-                "    return proxyPrimitiveInteger();",
+                "    return primitiveInteger();",
                 "  }",
                 "",
-                "  public static int proxyPrimitiveInteger() {",
+                "  public static int primitiveInteger() {",
                 "    return TestModule.primitiveInteger();",
                 "  }",
                 "}"));
@@ -2415,7 +2415,7 @@ public void privateMethodUsedOnlyInChildDoesNotUseQualifiedThis() {
             GENERATED_ANNOTATION,
             "public final class DaggerParent implements Parent {",
             "  private String getString() {",
-            "    return TestModule_StringFactory.proxyString(numberProvider.get());",
+            "    return TestModule_StringFactory.string(numberProvider.get());",
             "  }",
             "}");
 
@@ -2557,7 +2557,7 @@ public void justInTimeAtInjectConstructor_hasGeneratedQualifier() {
             // that if the qualifier type hasn't been generated, a duplicate binding error will be
             // reported, since the annotation won't be recognized as a qualifier and instead as an
             // ordinary annotation.
-            "    return new Injected(TestModule_QualifiedFactory.proxyQualified());",
+            "    return new Injected(TestModule_QualifiedFactory.qualified());",
             "  }",
             "}");
 
@@ -2629,7 +2629,7 @@ public void moduleHasGeneratedQualifier() {
             // Ensure that the unqualified @Provides method is used. It's also probably more likely
             // if the qualifier hasn't been generated, a duplicate binding exception will be thrown
             // since the annotation won't be considered a qualifier
-            "    return TestModule_UnqualifiedFactory.proxyUnqualified();",
+            "    return TestModule_UnqualifiedFactory.unqualified();",
             "  }",
             "}");
 
diff --git a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
index d9543c178..3375d7aa5 100644
--- a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
+++ b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
@@ -186,7 +186,7 @@ public void instanceModuleMethod() {
             "",
             "  @Override",
             "  public long l() {",
-            "    return OtherPackageModule_LFactory.proxyL(otherPackageModule);",
+            "    return OtherPackageModule_LFactory.l(otherPackageModule);",
             "  }",
             "}");
     assertThat(compilation)
@@ -372,12 +372,12 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "  private final class TestSubcomponentImpl implements TestSubcomponent {",
                 "    private Set<Object> getSetOfObject() {",
                 "      return ImmutableSet.<Object>of(",
-                "          ParentModule_ContributionFactory.proxyContribution(),",
-                "          ChildModule_ContributionFactory.proxyContribution());",
+                "          ParentModule_ContributionFactory.contribution(),",
+                "          ChildModule_ContributionFactory.contribution());",
                 "    }",
                 "",
                 "    private Object getObject() {",
-                "      return ParentModule_ReliesOnMultibindingFactory.proxyReliesOnMultibinding(",
+                "      return ParentModule_ReliesOnMultibindingFactory.reliesOnMultibinding(",
                 "          DaggerTestComponent.this.parentModule, getSetOfObject());",
                 "    }",
                 "  }",
diff --git a/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java b/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
index 998eb1ac0..fd20350d4 100644
--- a/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
+++ b/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
@@ -428,7 +428,7 @@ public void castNeeded_rawTypes_Provider_get() {
                     "      synchronized (local) {",
                     "        local = subtype;",
                     "        if (local instanceof MemoizedSentinel) {",
-                    "          local = Subtype_Factory.newSubtype();",
+                    "          local = Subtype_Factory.newInstance();",
                     "          subtype = DoubleCheck.reentrantCheck(subtype, local);",
                     "        }",
                     "      }",
@@ -521,7 +521,7 @@ public void noCast_rawTypes_Provider_get_toInaccessibleType() {
                     "  @Override",
                     "  public UsesSupertype usesSupertype() {",
                     //   can't cast the provider.get() to a type that's not accessible
-                    "    return UsesSupertype_Factory.newUsesSupertype(subtypeProvider.get());",
+                    "    return UsesSupertype_Factory.newInstance(subtypeProvider.get());",
                     "  }",
                     "}")
                 .addLinesIn(
@@ -534,7 +534,7 @@ public void noCast_rawTypes_Provider_get_toInaccessibleType() {
                     "      synchronized (local) {",
                     "        local = subtype;",
                     "        if (local instanceof MemoizedSentinel) {",
-                    "          local = Subtype_Factory.newSubtype();",
+                    "          local = Subtype_Factory.newInstance();",
                     "          subtype = DoubleCheck.reentrantCheck(subtype, local);",
                     "        }",
                     "      }",
@@ -544,7 +544,7 @@ public void noCast_rawTypes_Provider_get_toInaccessibleType() {
                     "",
                     "  @Override",
                     "  public UsesSupertype usesSupertype() {",
-                    "    return UsesSupertype_Factory.newUsesSupertype(getSubtype());",
+                    "    return UsesSupertype_Factory.newInstance(getSubtype());",
                     "  }")
                 .build());
   }
@@ -645,7 +645,7 @@ public void castedToRawType() {
                     "    public T get() {",
                     "      switch (id) {",
                     "        case 0:",
-                    "            return (T) TestModule_ProvideStringFactory.proxyProvideString();",
+                    "            return (T) TestModule_ProvideStringFactory.provideString();",
                     "        default:",
                     "            throw new AssertionError(id);",
                     "      }",
@@ -746,7 +746,7 @@ public void doubleBinds() {
                     "    public T get() {",
                     "      switch (id) {",
                     "        case 0:",
-                    "            return (T) TestModule_ProvideStringFactory.proxyProvideString();",
+                    "            return (T) TestModule_ProvideStringFactory.provideString();",
                     "        default:",
                     "            throw new AssertionError(id);",
                     "      }",
@@ -843,7 +843,7 @@ public void inlineFactoryOfInacessibleType() {
                     "    @Override",
                     "    public T get() {",
                     "      switch (id) {",
-                    "        case 0: return (T) Subtype_Factory.newSubtype();",
+                    "        case 0: return (T) Subtype_Factory.newInstance();",
                     "        default: throw new AssertionError(id);",
                     "      }",
                     "    }",
@@ -932,7 +932,7 @@ public void providerWhenBindsScopeGreaterThanDependencyScope() {
                     "  private String getString() {",
                     "    Object local = string;",
                     "    if (local == null) {",
-                    "      local = TestModule_ProvideStringFactory.proxyProvideString();",
+                    "      local = TestModule_ProvideStringFactory.provideString();",
                     "      string = (String) local;",
                     "    }",
                     "    return (String) local;",
diff --git a/javatests/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java b/javatests/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
index a107cc293..e6e970648 100644
--- a/javatests/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
+++ b/javatests/dagger/internal/codegen/InjectConstructorFactoryGeneratorTest.java
@@ -154,7 +154,7 @@
             "    return new GenericClass_Factory<T>(tProvider);",
             "  }",
             "",
-            "  public static <T> GenericClass<T> newGenericClass(T t) {",
+            "  public static <T> GenericClass<T> newInstance(T t) {",
             "    return new GenericClass<T>(t);",
             "  }",
             "}");
@@ -210,7 +210,7 @@
             "    return new GenericClass_Factory<A, B>(aProvider, bProvider);",
             "  }",
             "",
-            "  public static <A, B> GenericClass<A, B> newGenericClass() {",
+            "  public static <A, B> GenericClass<A, B> newInstance() {",
             "    return new GenericClass<A, B>();",
             "  }",
             "}");
@@ -252,7 +252,7 @@
             "    return INSTANCE;",
             "  }",
             "",
-            "  public static <T> GenericClass<T> newGenericClass() {",
+            "  public static <T> GenericClass<T> newInstance() {",
             "    return new GenericClass<T>();",
             "  }",
             "}");
@@ -300,7 +300,7 @@
             "    return new GenericClass_Factory<A, B>(aProvider, bProvider);",
             "  }",
             "",
-            "  public static <A, B> GenericClass<A, B> newGenericClass(A a, B b) {",
+            "  public static <A, B> GenericClass<A, B> newInstance(A a, B b) {",
             "    return new GenericClass<A, B>(a, b);",
             "  }",
             "}");
@@ -366,7 +366,7 @@
             "          A extends Number & Comparable<A>,",
             "          B extends List<? extends String>,",
             "          C extends List<? super String>>",
-            "      GenericClass<A, B, C> newGenericClass(A a, B b, C c) {",
+            "      GenericClass<A, B, C> newInstance(A a, B b, C c) {",
             "    return new GenericClass<A, B, C>(a, b, c);",
             "  }",
             "}");
@@ -461,7 +461,7 @@
             "        qbProvider);",
             "  }",
             "",
-            "  public static <A, B> GenericClass<A, B> newGenericClass(",
+            "  public static <A, B> GenericClass<A, B> newInstance(",
             "      A a,",
             "      A a2,",
             "      Provider<A> pa,",
@@ -1039,7 +1039,7 @@
             "    return new InjectConstructor_Factory(sProvider);",
             "  }",
             "",
-            "  public static InjectConstructor newInjectConstructor(String s) {",
+            "  public static InjectConstructor newInstance(String s) {",
             "    return new InjectConstructor(s);",
             "  }",
             "}");
@@ -1087,7 +1087,7 @@
             "    return new AllInjections_Factory(sProvider);",
             "  }",
             "",
-            "  public static AllInjections newAllInjections(String s) {",
+            "  public static AllInjections newInstance(String s) {",
             "     return new AllInjections(s);",
             "   }",
             "}");
@@ -1137,7 +1137,7 @@ public void wildcardDependency() {
             "    return new InjectConstructor_Factory(objectsProvider);",
             "  }",
             "",
-            "  public static InjectConstructor newInjectConstructor(List<?> objects) {",
+            "  public static InjectConstructor newInstance(List<?> objects) {",
             "    return new InjectConstructor(objects);",
             "  }",
             "}");
@@ -1189,7 +1189,7 @@ public void basicNameCollision() {
             "    return new InjectConstructor_Factory(factoryProvider);",
             "  }",
             "",
-            "  public static InjectConstructor newInjectConstructor(",
+            "  public static InjectConstructor newInstance(",
             "      other.pkg.Factory factory) {",
             "    return new InjectConstructor(factory);",
             "  }",
@@ -1246,7 +1246,7 @@ public void nestedNameCollision() {
             "    return new InjectConstructor_Factory(factoryProvider);",
             "  }",
             "",
-            "  public static InjectConstructor newInjectConstructor(",
+            "  public static InjectConstructor newInstance(",
             "      Outer.Factory factory) {",
             "    return new InjectConstructor(factory);",
             "  }",
@@ -1310,7 +1310,7 @@ public void samePackageNameCollision() {
             "    return new InjectConstructor_Factory(otherPackageProvider, samePackageProvider);",
             "  }",
             "",
-            "  public static InjectConstructor newInjectConstructor(",
+            "  public static InjectConstructor newInstance(",
             "      other.pkg.CommonName otherPackage, CommonName samePackage) {",
             "    return new InjectConstructor(otherPackage, samePackage);",
             "  }",
@@ -1352,7 +1352,7 @@ public void noDeps() {
             "    return INSTANCE;",
             "  }",
             "",
-            "  public static SimpleType newSimpleType() {",
+            "  public static SimpleType newInstance() {",
             "    return new SimpleType();",
             "  }",
             "}");
@@ -1398,7 +1398,7 @@ public void noDeps() {
             "    return INSTANCE;",
             "  }",
             "",
-            "  public static OuterType.A newA() {",
+            "  public static OuterType.A newInstance() {",
             "    return new OuterType.A();",
             "  }",
             "}");
diff --git a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index d915b419c..4cb93a9cb 100644
--- a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -189,10 +189,10 @@ public void mapBindingsWithEnumKey() {
                 "                 .getMapOfPathEnumAndProviderOfHandler();",
                 "        case 1:",
                 "            return (T) MapModuleOne_ProvideAdminHandlerFactory",
-                "                .proxyProvideAdminHandler(DaggerTestComponent.this.mapModuleOne);",
+                "                .provideAdminHandler(DaggerTestComponent.this.mapModuleOne);",
                 "        case 2:",
                 "            return (T) MapModuleTwo_ProvideLoginHandlerFactory",
-                "                .proxyProvideLoginHandler(DaggerTestComponent.this.mapModuleTwo);",
+                "                .provideLoginHandler(DaggerTestComponent.this.mapModuleTwo);",
                 "        default: throw new AssertionError(id);",
                 "      }",
                 "    }",
@@ -597,10 +597,10 @@ public void mapBindingsWithStringKey() {
                 "                 .getMapOfStringAndProviderOfHandler();",
                 "        case 1:",
                 "            return (T) MapModuleOne_ProvideAdminHandlerFactory",
-                "                .proxyProvideAdminHandler(DaggerTestComponent.this.mapModuleOne);",
+                "                .provideAdminHandler(DaggerTestComponent.this.mapModuleOne);",
                 "        case 2:",
                 "            return (T) MapModuleTwo_ProvideLoginHandlerFactory",
-                "                .proxyProvideLoginHandler(DaggerTestComponent.this.mapModuleTwo);",
+                "                .provideLoginHandler(DaggerTestComponent.this.mapModuleTwo);",
                 "        default: throw new AssertionError(id);",
                 "      }",
                 "    }",
@@ -807,10 +807,10 @@ public void mapBindingsWithWrappedKey() {
                 "                 .getMapOfWrappedClassKeyAndProviderOfHandler();",
                 "        case 1:",
                 "            return (T) MapModuleOne_ProvideAdminHandlerFactory",
-                "                .proxyProvideAdminHandler(DaggerTestComponent.this.mapModuleOne);",
+                "                .provideAdminHandler(DaggerTestComponent.this.mapModuleOne);",
                 "        case 2:",
                 "            return (T) MapModuleTwo_ProvideLoginHandlerFactory",
-                "                .proxyProvideLoginHandler(DaggerTestComponent.this.mapModuleTwo);",
+                "                .provideLoginHandler(DaggerTestComponent.this.mapModuleTwo);",
                 "        default: throw new AssertionError(id);",
                 "      }",
                 "    }",
@@ -961,10 +961,10 @@ public void mapBindingsWithNonProviderValue() {
                 "  private Map<PathEnum, Handler> getMapOfPathEnumAndHandler() {",
                 "    return ImmutableMap.<PathEnum, Handler>of(",
                 "        PathEnum.ADMIN,",
-                "        MapModuleOne_ProvideAdminHandlerFactory.proxyProvideAdminHandler(",
+                "        MapModuleOne_ProvideAdminHandlerFactory.provideAdminHandler(",
                 "            mapModuleOne),",
                 "        PathEnum.LOGIN,",
-                "        MapModuleTwo_ProvideLoginHandlerFactory.proxyProvideLoginHandler(",
+                "        MapModuleTwo_ProvideLoginHandlerFactory.provideLoginHandler(",
                 "            mapModuleTwo));",
                 "  }",
                 "",
@@ -1086,7 +1086,7 @@ public void injectMapWithoutMapBinding() {
             "",
             "  @Override",
             "  public Map<String, String> dispatcher() {",
-            "    return MapModule_ProvideAMapFactory.proxyProvideAMap(mapModule);",
+            "    return MapModule_ProvideAMapFactory.provideAMap(mapModule);",
             "  }",
             "}");
     Compilation compilation =
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
index c76bbc18c..174ada87c 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
@@ -278,7 +278,7 @@ public void inaccessible() {
             "public final class DaggerTestComponent implements TestComponent {",
             "  @Override",
             "  public UsesInaccessible usesInaccessible() {",
-            "    return UsesInaccessible_Factory.newUsesInaccessible(",
+            "    return UsesInaccessible_Factory.newInstance(",
             "        (Map) Collections.emptyMap());",
             "  }",
             "}");
@@ -346,7 +346,7 @@ public void subcomponentOmitsInheritedBindings() {
             "    public Map<String, Object> objectMap() {",
             "      return Collections.<String, Object>singletonMap(",
             "          \"parent key\",",
-            "          ParentModule_ParentKeyObjectFactory.proxyParentKeyObject(",
+            "          ParentModule_ParentKeyObjectFactory.parentKeyObject(",
             "              DaggerParent.this.parentModule));",
             "    }",
             "  }",
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
index b80ef0b87..5b0ab6f6f 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
@@ -406,7 +406,7 @@ public void inaccessible() {
             "public final class DaggerTestComponent implements TestComponent {",
             "  @Override",
             "  public UsesInaccessible usesInaccessible() {",
-            "    return UsesInaccessible_Factory.newUsesInaccessible((Map) ImmutableMap.of());",
+            "    return UsesInaccessible_Factory.newInstance((Map) ImmutableMap.of());",
             "  }",
             "}");
     Compilation compilation =
@@ -474,7 +474,7 @@ public void subcomponentOmitsInheritedBindings() {
             "    public Map<String, Object> objectMap() {",
             "      return ImmutableMap.<String, Object>of(",
             "          \"parent key\",",
-            "          ParentModule_ParentKeyObjectFactory.proxyParentKeyObject(",
+            "          ParentModule_ParentKeyObjectFactory.parentKeyObject(",
             "              DaggerParent.this.parentModule));",
             "    }",
             "  }",
diff --git a/javatests/dagger/internal/codegen/MembersInjectionTest.java b/javatests/dagger/internal/codegen/MembersInjectionTest.java
index 9dd924bb0..88a7706ed 100644
--- a/javatests/dagger/internal/codegen/MembersInjectionTest.java
+++ b/javatests/dagger/internal/codegen/MembersInjectionTest.java
@@ -151,7 +151,7 @@ public void parentClass_injectedMembersInSupertype() {
             "public final class DaggerTestComponent implements TestComponent {",
             "  @Override",
             "  public Child child() {",
-            "    return injectChild(Child_Factory.newChild());",
+            "    return injectChild(Child_Factory.newInstance());",
             "  }",
             "",
             "  @CanIgnoreReturnValue",
@@ -1158,7 +1158,7 @@ public void injectsPrimitive() {
             "    return new InjectedType_Factory(boxedIntAndPrimitiveIntProvider);",
             "  }",
             "",
-            "  public static InjectedType newInjectedType() {",
+            "  public static InjectedType newInstance() {",
             "    return new InjectedType();",
             "  }",
             "}");
@@ -1279,12 +1279,12 @@ public void accessibility() {
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
             "  private Object getInaccessible() {",
-            "    return injectInaccessible(Inaccessible_Factory.newInaccessible());",
+            "    return injectInaccessible(Inaccessible_Factory.newInstance());",
             "  }",
             "",
             "  @Override",
             "  public UsesInaccessible usesInaccessible() {",
-            "    return UsesInaccessible_Factory.newUsesInaccessible(",
+            "    return UsesInaccessible_Factory.newInstance(",
             "        getInaccessible());",
             "  }",
             "",
@@ -1293,8 +1293,8 @@ public void accessibility() {
             // any parent component
             "  @CanIgnoreReturnValue",
             "  private Object injectInaccessible(Object instance) {",
-            "    Inaccessible_MembersInjector.injectFoo(instance, Foo_Factory.newFoo());",
-            "    Inaccessible_MembersInjector.injectMethod(instance, Foo_Factory.newFoo());",
+            "    Inaccessible_MembersInjector.injectFoo(instance, Foo_Factory.newInstance());",
+            "    Inaccessible_MembersInjector.injectMethod(instance, Foo_Factory.newInstance());",
             "    return instance;",
             "  }",
             "}");
@@ -1387,7 +1387,7 @@ public void accessibleRawType_ofInaccessibleType() {
                 "      synchronized (local) {",
                 "        local = listOfInaccessible;",
                 "        if (local instanceof MemoizedSentinel) {",
-                "          local = InaccessiblesModule_InaccessiblesFactory.proxyInaccessibles();",
+                "          local = InaccessiblesModule_InaccessiblesFactory.inaccessibles();",
                 "          listOfInaccessible =",
                 "              DoubleCheck.reentrantCheck(listOfInaccessible, local);",
                 "        }",
@@ -1410,7 +1410,7 @@ public void accessibleRawType_ofInaccessibleType() {
                 "  @Override",
                 "  public UsesInaccessibles usesInaccessibles() {",
                 "    return injectUsesInaccessibles(",
-                "        UsesInaccessibles_Factory.newUsesInaccessibles());",
+                "        UsesInaccessibles_Factory.newInstance());",
                 "  }",
                 "",
                 "  @CanIgnoreReturnValue",
@@ -1508,18 +1508,18 @@ public void publicSupertypeHiddenSubtype() {
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
             "  private Object getSubtype() {",
-            "    return injectSubtype(Subtype_Factory.newSubtype());",
+            "    return injectSubtype(Subtype_Factory.newInstance());",
             "  }",
             "",
             "  @Override",
             "  public InjectsSubtype injectsSubtype() {",
-            "    return InjectsSubtype_Factory.newInjectsSubtype(getSubtype());",
+            "    return InjectsSubtype_Factory.newInstance(getSubtype());",
             "  }",
             "",
             "  @CanIgnoreReturnValue",
             "  private Object injectSubtype(Object instance) {",
             "    Supertype_MembersInjector.injectT(",
-            "        (Supertype) instance, Foo_Factory.newFoo());",
+            "        (Supertype) instance, Foo_Factory.newInstance());",
             "    return instance;",
             "  }",
             "}");
diff --git a/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java b/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
index 953193267..294838c24 100644
--- a/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
+++ b/javatests/dagger/internal/codegen/ModuleFactoryGeneratorTest.java
@@ -253,14 +253,14 @@ public void providesMethodReturnsProduced() {
             "  }",
             "",
             "  @Override public String get() {",
-            "    return proxyProvideString(module);",
+            "    return provideString(module);",
             "  }",
             "",
             "  public static TestModule_ProvideStringFactory create(TestModule module) {",
             "    return new TestModule_ProvideStringFactory(module);",
             "  }",
             "",
-            "  public static String proxyProvideString(TestModule instance) {",
+            "  public static String provideString(TestModule instance) {",
             "    return Preconditions.checkNotNull(",
             "        instance.provideString(), " + NPE_FROM_PROVIDES_METHOD + ");",
             "  }",
@@ -301,14 +301,14 @@ public void providesMethodReturnsProduced() {
             "  }",
             "",
             "  @Override public String get() {",
-            "    return proxyProvideString(module);",
+            "    return provideString(module);",
             "  }",
             "",
             "  public static TestModule_ProvideStringFactory create(TestModule module) {",
             "    return new TestModule_ProvideStringFactory(module);",
             "  }",
             "",
-            "  public static String proxyProvideString(TestModule instance) {",
+            "  public static String provideString(TestModule instance) {",
             "    return instance.provideString();",
             "  }",
             "}");
@@ -349,7 +349,7 @@ public void providesMethodReturnsProduced() {
             "  @Override",
             "  @Nullable",
             "  public String get() {",
-            "    return proxyProvideString(module);",
+            "    return provideString(module);",
             "  }",
             "",
             "  public static TestModule_ProvideStringFactory create(TestModule module) {",
@@ -357,7 +357,7 @@ public void providesMethodReturnsProduced() {
             "  }",
             "",
             "  @Nullable",
-            "  public static String proxyProvideString(TestModule instance) {",
+            "  public static String provideString(TestModule instance) {",
             "    return instance.provideString();",
             "  }",
             "}");
@@ -432,7 +432,7 @@ public void providesMethodReturnsProduced() {
             "  }",
             "",
             "  @Override public List<Object> get() {",
-            "    return proxyProvideObjects(",
+            "    return provideObjects(",
             "        module, aProvider.get(), bProvider.get(), xInjectorProvider.get());",
             "  }",
             "",
@@ -445,7 +445,7 @@ public void providesMethodReturnsProduced() {
             "        module, aProvider, bProvider, xInjectorProvider);",
             "  }",
             "",
-            "  public static List<Object> proxyProvideObjects(",
+            "  public static List<Object> provideObjects(",
             "      TestModule instance, Object a, Object b, MembersInjector<X> xInjector) {",
             "    return Preconditions.checkNotNull(",
             "        instance.provideObjects(a, b, xInjector), " + NPE_FROM_PROVIDES_METHOD + ");",
@@ -491,14 +491,14 @@ public void providesMethodReturnsProduced() {
             "  }",
             "",
             "  @Override public String get() {",
-            "    return proxyProvideString(module);",
+            "    return provideString(module);",
             "  }",
             "",
             "  public static TestModule_ProvideStringFactory create(TestModule module) {",
             "    return new TestModule_ProvideStringFactory(module);",
             "  }",
             "",
-            "  public static String proxyProvideString(TestModule instance) {",
+            "  public static String provideString(TestModule instance) {",
             "    return Preconditions.checkNotNull(instance.provideString(), "
                 + NPE_FROM_PROVIDES_METHOD
                 + ");",
@@ -547,14 +547,14 @@ public void providesMethodReturnsProduced() {
             "  }",
             "",
             "  @Override public List<List<?>> get() {",
-            "    return proxyProvideWildcardList(module);",
+            "    return provideWildcardList(module);",
             "  }",
             "",
             "  public static TestModule_ProvideWildcardListFactory create(TestModule module) {",
             "    return new TestModule_ProvideWildcardListFactory(module);",
             "  }",
             "",
-            "  public static List<List<?>> proxyProvideWildcardList(TestModule instance) {",
+            "  public static List<List<?>> provideWildcardList(TestModule instance) {",
             "    return Preconditions.checkNotNull(",
             "        instance.provideWildcardList(), " + NPE_FROM_PROVIDES_METHOD + ");",
             "  }",
@@ -599,14 +599,14 @@ public void providesMethodReturnsProduced() {
             "  }",
             "",
             "  @Override public Set<String> get() {",
-            "    return proxyProvideStrings(module);",
+            "    return provideStrings(module);",
             "  }",
             "",
             "  public static TestModule_ProvideStringsFactory create(TestModule module) {",
             "    return new TestModule_ProvideStringsFactory(module);",
             "  }",
             "",
-            "  public static Set<String> proxyProvideStrings(TestModule instance) {",
+            "  public static Set<String> provideStrings(TestModule instance) {",
             "    return Preconditions.checkNotNull(",
             "        instance.provideStrings(), " + NPE_FROM_PROVIDES_METHOD + ");",
             "  }",
@@ -905,7 +905,7 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public List<B> get() {  ",
-            "    return proxyProvideListB(module, bProvider.get());",
+            "    return provideListB(module, bProvider.get());",
             "  }",
             "",
             "  public static <A extends CharSequence, B, C extends Number & Comparable<C>>",
@@ -915,7 +915,7 @@ public void genericSubclassedModule() {
             "  }",
             "",
             "  public static <A extends CharSequence, B, C extends Number & Comparable<C>> List<B>",
-            "      proxyProvideListB(ParentModule<A, B, C> instance, B b) {",
+            "      provideListB(ParentModule<A, B, C> instance, B b) {",
             "    return Preconditions.checkNotNull(",
             "        instance.provideListB(b), " + NPE_FROM_PROVIDES_METHOD + ");",
             "  }",
@@ -944,7 +944,7 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public B get() {  ",
-            "    return proxyProvideBElement(module, bProvider.get());",
+            "    return provideBElement(module, bProvider.get());",
             "  }",
             "",
             "  public static <A extends CharSequence, B, C extends Number & Comparable<C>>",
@@ -954,7 +954,7 @@ public void genericSubclassedModule() {
             "  }",
             "",
             "  public static <A extends CharSequence, B, C extends Number & Comparable<C>>",
-            "      B proxyProvideBElement(",
+            "      B provideBElement(",
             "          ParentModule<A, B, C> instance, B b) {",
             "    return Preconditions.checkNotNull(",
             "        instance.provideBElement(b), " + NPE_FROM_PROVIDES_METHOD + ");",
@@ -984,7 +984,7 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public B get() {  ",
-            "    return proxyProvideBEntry(module, bProvider.get());",
+            "    return provideBEntry(module, bProvider.get());",
             "  }",
             "",
             "  public static <A extends CharSequence, B, C extends Number & Comparable<C>>",
@@ -994,7 +994,7 @@ public void genericSubclassedModule() {
             "  }",
             "",
             "  public static <A extends CharSequence, B, C extends Number & Comparable<C>>",
-            "      B proxyProvideBEntry(",
+            "      B provideBEntry(",
             "          ParentModule<A, B, C> instance, B b) {",
             "    return Preconditions.checkNotNull(",
             "        instance.provideBEntry(b), " + NPE_FROM_PROVIDES_METHOD + ");",
@@ -1020,7 +1020,7 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public Number get() {  ",
-            "    return proxyProvideNumber(module);",
+            "    return provideNumber(module);",
             "  }",
             "",
             "  public static ChildNumberModule_ProvideNumberFactory create(",
@@ -1028,7 +1028,7 @@ public void genericSubclassedModule() {
             "    return new ChildNumberModule_ProvideNumberFactory(module);",
             "  }",
             "",
-            "  public static Number proxyProvideNumber(ChildNumberModule instance) {",
+            "  public static Number provideNumber(ChildNumberModule instance) {",
             "    return Preconditions.checkNotNull(",
             "        instance.provideNumber(), " + NPE_FROM_PROVIDES_METHOD + ");",
             "  }",
@@ -1053,7 +1053,7 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public Integer get() {  ",
-            "    return proxyProvideInteger(module);",
+            "    return provideInteger(module);",
             "  }",
             "",
             "  public static ChildIntegerModule_ProvideIntegerFactory create(",
@@ -1061,7 +1061,7 @@ public void genericSubclassedModule() {
             "    return new ChildIntegerModule_ProvideIntegerFactory(module);",
             "  }",
             "",
-            "  public static Integer proxyProvideInteger(ChildIntegerModule instance) {",
+            "  public static Integer provideInteger(ChildIntegerModule instance) {",
             "    return Preconditions.checkNotNull(",
             "        instance.provideInteger(), " + NPE_FROM_PROVIDES_METHOD + ");",
             "  }",
@@ -1124,14 +1124,14 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public Map<String, Number> get() {",
-            "    return proxyProvideMapStringNumber();",
+            "    return provideMapStringNumber();",
             "  }",
             "",
             "  public static ParameterizedModule_ProvideMapStringNumberFactory create() {",
             "    return INSTANCE;",
             "  }",
             "",
-            "  public static Map<String, Number> proxyProvideMapStringNumber() {",
+            "  public static Map<String, Number> provideMapStringNumber() {",
             "    return Preconditions.checkNotNull(ParameterizedModule.provideMapStringNumber(),",
             "        " + NPE_FROM_PROVIDES_METHOD + ");",
             "  }",
@@ -1154,14 +1154,14 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public Object get() {",
-            "    return proxyProvideNonGenericType();",
+            "    return provideNonGenericType();",
             "  }",
             "",
             "  public static ParameterizedModule_ProvideNonGenericTypeFactory create() {",
             "    return INSTANCE;",
             "  }",
             "",
-            "  public static Object proxyProvideNonGenericType() {",
+            "  public static Object provideNonGenericType() {",
             "    return Preconditions.checkNotNull(ParameterizedModule.provideNonGenericType(),",
             "        " + NPE_FROM_PROVIDES_METHOD + ");",
             "  }",
@@ -1189,7 +1189,7 @@ public void genericSubclassedModule() {
             "",
             "  @Override",
             "  public String get() {",
-            "    return proxyProvideNonGenericTypeWithDeps(oProvider.get());",
+            "    return provideNonGenericTypeWithDeps(oProvider.get());",
             "  }",
             "",
             "  public static ParameterizedModule_ProvideNonGenericTypeWithDepsFactory create(",
@@ -1197,7 +1197,7 @@ public void genericSubclassedModule() {
             "    return new ParameterizedModule_ProvideNonGenericTypeWithDepsFactory(oProvider);",
             "  }",
             "",
-            "  public static String proxyProvideNonGenericTypeWithDeps(Object o) {",
+            "  public static String provideNonGenericTypeWithDeps(Object o) {",
             "    return Preconditions.checkNotNull(",
             "        ParameterizedModule.provideNonGenericTypeWithDeps(o),",
             "        " + NPE_FROM_PROVIDES_METHOD + ");",
@@ -1387,6 +1387,74 @@ public void providesMethodMultipleScopes() {
         .hadErrorContaining("Produced may only be injected in @Produces methods");
   }
 
+  @Test
+  public void proxyMethodsConflictWithOtherFactoryMethods() {
+    JavaFileObject module =
+        JavaFileObjects.forSourceLines(
+            "test.TestModule",
+            "package test;",
+            "",
+            "import dagger.Module;",
+            "import dagger.Provides;",
+            "",
+            "@Module",
+            "interface TestModule {",
+            "  @Provides",
+            "  static int get() { return 1; }",
+            "",
+            "  @Provides",
+            "  static boolean create() { return true; }",
+            "}");
+
+    Compilation compilation = daggerCompiler().compile(module);
+    assertThat(compilation).succeededWithoutWarnings();
+    assertThat(compilation)
+        .generatedSourceFile("test.TestModule_GetFactory")
+        .containsElementsIn(
+            JavaFileObjects.forSourceLines(
+                "test.TestModule_GetFactory",
+                "package test;",
+                "",
+                GENERATED_ANNOTATION,
+                "public final class TestModule_GetFactory implements Factory<Integer> {",
+                "  @Override",
+                "  public Integer get() {",
+                "    return proxyGet();",
+                "  }",
+                "",
+                "  public static TestModule_GetFactory create() {",
+                "    return INSTANCE;",
+                "  }",
+                "",
+                "  public static int proxyGet() {",
+                "    return TestModule.get();",
+                "  }",
+                "}"));
+
+    assertThat(compilation)
+        .generatedSourceFile("test.TestModule_CreateFactory")
+        .containsElementsIn(
+            JavaFileObjects.forSourceLines(
+                "test.TestModule_CreateFactory",
+                "package test;",
+                "",
+                GENERATED_ANNOTATION,
+                "public final class TestModule_CreateFactory implements Factory<Boolean> {",
+                "  @Override",
+                "  public Boolean get() {",
+                "    return proxyCreate();",
+                "  }",
+                "",
+                "  public static TestModule_CreateFactory create() {",
+                "    return INSTANCE;",
+                "  }",
+                "",
+                "  public static boolean proxyCreate() {",
+                "    return TestModule.create();",
+                "  }",
+                "}"));
+  }
+
   private static final String BINDS_METHOD = "@Binds abstract Foo bindFoo(FooImpl impl);";
   private static final String MULTIBINDS_METHOD = "@Multibinds abstract Set<Foo> foos();";
   private static final String STATIC_PROVIDES_METHOD =
diff --git a/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
index 338b62eb1..2803b217c 100644
--- a/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
@@ -128,7 +128,7 @@ public void inlinedOptionalBindings() {
                 "  @Override",
                 "  public Optional<Maybe> maybe() {",
                 "    return Optional.of(",
-                "        Maybe_MaybeModule_ProvideMaybeFactory.proxyProvideMaybe());",
+                "        Maybe_MaybeModule_ProvideMaybeFactory.provideMaybe());",
                 "  }",
                 "",
                 "  @Override",
@@ -167,7 +167,7 @@ public void inlinedOptionalBindings() {
                 "    public T get() {",
                 "      switch (id) {",
                 "        case 0:",
-                "          return (T) Maybe_MaybeModule_ProvideMaybeFactory.proxyProvideMaybe();",
+                "          return (T) Maybe_MaybeModule_ProvideMaybeFactory.provideMaybe();",
                 "        default:",
                 "          throw new AssertionError(id);",
                 "      }",
@@ -254,7 +254,7 @@ public void requestForFuture() {
             "  @Override",
             "  public ListenableFuture<Optional<Maybe>> maybe() {",
             "    return Futures.immediateFuture(",
-            "        Optional.of(Maybe_MaybeModule_ProvideMaybeFactory.proxyProvideMaybe()));",
+            "        Optional.of(Maybe_MaybeModule_ProvideMaybeFactory.provideMaybe()));",
             "  }",
             "",
             "  @Override",
diff --git a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
index ac916eadc..8c29e5005 100644
--- a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -285,7 +285,7 @@ public void simpleComponent() {
                 "        local = productionImplementationExecutor;",
                 "        if (local instanceof MemoizedSentinel) {",
                 "          local =",
-                "              TestClass_BModule_ExecutorFactory.proxyExecutor(bModule);",
+                "              TestClass_BModule_ExecutorFactory.executor(bModule);",
                 "          productionImplementationExecutor =",
                 "              DoubleCheck.reentrantCheck(",
                 "                  productionImplementationExecutor, local);",
@@ -312,7 +312,7 @@ public void simpleComponent() {
                 "        if (local instanceof MemoizedSentinel) {",
                 "          local =",
                 "              TestClass_SimpleComponent_MonitoringModule_MonitorFactory",
-                "                  .proxyMonitor(",
+                "                  .monitor(",
                 "                      simpleComponentProvider,",
                 "                      SetFactory.<ProductionComponentMonitor.Factory>empty());",
                 "          productionComponentMonitor =",
@@ -335,7 +335,7 @@ public void simpleComponent() {
                 "  }",
                 "",
                 "  private TestClass.B getB() {",
-                "    return TestClass_BModule_BFactory.proxyB(bModule, new TestClass.C());",
+                "    return TestClass_BModule_BFactory.b(bModule, new TestClass.C());",
                 "  }",
                 "",
                 "  private Provider<TestClass.B> getBProvider() {",
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
index f94021e67..890ceb804 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
@@ -101,8 +101,8 @@ public void setBindings() {
             "  @Override",
             "  public Set<String> strings() {",
             "    return SetBuilder.<String>newSetBuilder(2)",
-            "        .addAll(EmptySetModule_EmptySetFactory.proxyEmptySet())",
-            "        .add(SetModule_StringFactory.proxyString())",
+            "        .addAll(EmptySetModule_EmptySetFactory.emptySet())",
+            "        .add(SetModule_StringFactory.string())",
             "        .build();",
             "  }",
             "",
@@ -195,13 +195,13 @@ public void inaccessible() {
             "public final class DaggerTestComponent implements TestComponent {",
             "  private Set getSetOfInaccessible2() {",
             "    return SetBuilder.newSetBuilder(1)",
-            "        .addAll(TestModule_EmptySetFactory.proxyEmptySet())",
+            "        .addAll(TestModule_EmptySetFactory.emptySet())",
             "        .build();",
             "  }",
             "",
             "  @Override",
             "  public UsesInaccessible usesInaccessible() {",
-            "    return UsesInaccessible_Factory.newUsesInaccessible(",
+            "    return UsesInaccessible_Factory.newInstance(",
             "        (Set) Collections.emptySet(),",
             "        (Set) getSetOfInaccessible2());",
             "  }",
@@ -303,7 +303,7 @@ public void subcomponentOmitsInheritedBindings() {
             "    @Override",
             "    public Set<Object> objectSet() {",
             "      return Collections.<Object>singleton(",
-            "          ParentModule_ParentObjectFactory.proxyParentObject());",
+            "          ParentModule_ParentObjectFactory.parentObject());",
             "    }",
             "  }",
             "}");
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
index f49e89b44..d39e60b8d 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
@@ -104,8 +104,8 @@ public void setBindings() {
             "  @Override",
             "  public Set<String> strings() {",
             "    return ImmutableSet.<String>builderWithExpectedSize(2)",
-            "        .addAll(EmptySetModule_EmptySetFactory.proxyEmptySet())",
-            "        .add(SetModule_StringFactory.proxyString())",
+            "        .addAll(EmptySetModule_EmptySetFactory.emptySet())",
+            "        .add(SetModule_StringFactory.string())",
             "        .build();",
             "  }",
             "",
@@ -118,7 +118,7 @@ public void setBindings() {
             "  public Set<Integer> onlyContributionIsElementsIntoSet() {",
             "    return ImmutableSet.<Integer>copyOf(",
             "        EmptySetModule_OnlyContributionIsElementsIntoSetFactory",
-            "            .proxyOnlyContributionIsElementsIntoSet());",
+            "            .onlyContributionIsElementsIntoSet());",
             "  }",
             "}");
     Compilation compilation =
@@ -206,12 +206,12 @@ public void inaccessible() {
             GENERATED_ANNOTATION,
             "public final class DaggerTestComponent implements TestComponent {",
             "  private Set getSetOfInaccessible2() {",
-            "    return ImmutableSet.copyOf(TestModule_EmptySetFactory.proxyEmptySet());",
+            "    return ImmutableSet.copyOf(TestModule_EmptySetFactory.emptySet());",
             "  }",
             "",
             "  @Override",
             "  public UsesInaccessible usesInaccessible() {",
-            "    return UsesInaccessible_Factory.newUsesInaccessible(",
+            "    return UsesInaccessible_Factory.newInstance(",
             "        (Set) ImmutableSet.of(),",
             "        (Set) getSetOfInaccessible2());",
             "  }",
@@ -280,7 +280,7 @@ public void subcomponentOmitsInheritedBindings() {
             "    @Override",
             "    public Set<Object> objectSet() {",
             "      return ImmutableSet.<Object>of(",
-            "          ParentModule_ParentObjectFactory.proxyParentObject());",
+            "          ParentModule_ParentObjectFactory.parentObject());",
             "    }",
             "  }",
             "}");
@@ -348,7 +348,7 @@ public void productionComponents() {
             "",
             "  private Set<String> getSetOfString() {",
             "    return ImmutableSet.<String>copyOf(",
-            "        EmptySetModule_EmptySetFactory.proxyEmptySet());",
+            "        EmptySetModule_EmptySetFactory.emptySet());",
             "  }",
             "",
             "  @Override",
diff --git a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
index eb3d77261..66ae11fdf 100644
--- a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
+++ b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
@@ -483,7 +483,7 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
                 "      synchronized (local) {",
                 "        local = dep1;",
                 "        if (local instanceof MemoizedSentinel) {",
-                "          local = injectDep1(Dep1_Factory.newDep1());",
+                "          local = injectDep1(Dep1_Factory.newInstance());",
                 "          dep1 = DoubleCheck.reentrantCheck(dep1, local);",
                 "        }",
                 "      }",
@@ -504,7 +504,7 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
                 "      synchronized (local) {",
                 "        local = dep2;",
                 "        if (local instanceof MemoizedSentinel) {",
-                "          local = injectDep2(Dep2_Factory.newDep2());",
+                "          local = injectDep2(Dep2_Factory.newInstance());",
                 "          dep2 = DoubleCheck.reentrantCheck(dep2, local);",
                 "        }",
                 "      }",
@@ -556,7 +556,7 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
             .addLines(
                 "    private A getA() {",
                 "      return injectA(",
-                "          A_Factory.newA(",
+                "          A_Factory.newInstance(",
                 "              getNeedsDep1(),")
             .addLinesIn(
                 DEFAULT_MODE,
@@ -571,7 +571,7 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
                 "",
                 "    @Override",
                 "    public Object getObject() {",
-                "      return ChildModule_ProvideObjectFactory.proxyProvideObject(",
+                "      return ChildModule_ProvideObjectFactory.provideObject(",
                 "          childModule, getA());",
                 "    }",
                 "",
@@ -612,7 +612,7 @@ public void multipleSubcomponentsWithSameSimpleNamesCanExistInSameComponent() {
             "",
             "@Component",
             "interface ParentComponent {",
-            "  Foo.Sub newFooSubcomponent();",
+            "  Foo.Sub newInstanceSubcomponent();",
             "  NoConflict newNoConflictSubcomponent();",
             "}");
     JavaFileObject foo =
@@ -666,7 +666,7 @@ public void multipleSubcomponentsWithSameSimpleNamesCanExistInSameComponent() {
             GENERATED_ANNOTATION,
             "public final class DaggerParentComponent implements ParentComponent {",
             "  @Override",
-            "  public Foo.Sub newFooSubcomponent() {",
+            "  public Foo.Sub newInstanceSubcomponent() {",
             "    return new F_SubImpl();",
             "  }",
             "",
@@ -927,7 +927,7 @@ public void parentComponentNameShouldNotBeDisambiguatedWhenItConflictsWithASubco
             "",
             "@Component",
             "interface C {",
-            "  test.Foo.C newFooC();",
+            "  test.Foo.C newInstanceC();",
             "}");
     JavaFileObject subcomponentWithSameSimpleNameAsParent =
         JavaFileObjects.forSourceLines(
@@ -948,7 +948,7 @@ public void parentComponentNameShouldNotBeDisambiguatedWhenItConflictsWithASubco
             GENERATED_ANNOTATION,
             "public final class DaggerC implements C {",
             "  @Override",
-            "  public Foo.C newFooC() {",
+            "  public Foo.C newInstanceC() {",
             "    return new F_CImpl();",
             "  }",
             "",
diff --git a/javatests/dagger/internal/codegen/SwitchingProviderTest.java b/javatests/dagger/internal/codegen/SwitchingProviderTest.java
index 887c75091..932daf4a3 100644
--- a/javatests/dagger/internal/codegen/SwitchingProviderTest.java
+++ b/javatests/dagger/internal/codegen/SwitchingProviderTest.java
@@ -277,7 +277,7 @@ public void unscopedBinds() {
                 "    public T get() {",
                 "      switch (id) {",
                 "        case 0:",
-                "          return (T) TestModule_SFactory.proxyS();",
+                "          return (T) TestModule_SFactory.s();",
                 "        default:",
                 "          throw new AssertionError(id);",
                 "      }",
@@ -344,7 +344,7 @@ public void scopedBinds() {
                 "      synchronized (local) {",
                 "        local = charSequence;",
                 "        if (local instanceof MemoizedSentinel) {",
-                "          local = TestModule_SFactory.proxyS();",
+                "          local = TestModule_SFactory.s();",
                 "          charSequence = DoubleCheck.reentrantCheck(charSequence, local);",
                 "        }",
                 "      }",
@@ -583,7 +583,7 @@ public void optionals() {
                 "    public T get() {",
                 "      switch (id) {",
                 "        case 0: // java.util.Optional<test.Present>",
-                "          return (T) Optional.of(TestModule_PFactory.proxyP());",
+                "          return (T) Optional.of(TestModule_PFactory.p());",
                 "        default:",
                 "          throw new AssertionError(id);",
                 "      }",
