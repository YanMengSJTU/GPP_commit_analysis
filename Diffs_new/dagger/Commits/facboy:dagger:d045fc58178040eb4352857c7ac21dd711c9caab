diff --git a/java/dagger/internal/codegen/BUILD b/java/dagger/internal/codegen/BUILD
index b73e8e97b..900881163 100644
--- a/java/dagger/internal/codegen/BUILD
+++ b/java/dagger/internal/codegen/BUILD
@@ -128,6 +128,7 @@ java_library(
         "BindingType.java",
         "BindingVariableNamer.java",  # needed by FrameworkField
         "BindsTypeChecker.java",
+        "ChildFactoryMethodEdgeImpl.java",
         "ComponentDescriptor.java",
         "ComponentNodeImpl.java",
         "ComponentRequirement.java",
@@ -135,6 +136,7 @@ java_library(
         "ConfigurationAnnotations.java",  # Uses ModuleDescriptors
         "ContributionBinding.java",
         "DelegateDeclaration.java",
+        "DependencyEdgeImpl.java",
         "DependencyRequestFactory.java",
         "DependencyVariableNamer.java",  # Used by SourceFiles
         "ErrorMessages.java",  # Consider splitting this up as it pulls in too much
@@ -154,6 +156,7 @@ java_library(
         "ProvisionBinding.java",
         "ResolvedBindings.java",
         "SourceFiles.java",  # Consider splitting this up?
+        "SubcomponentBuilderBindingEdgeImpl.java",
         "SubcomponentDeclaration.java",
     ],
     plugins = CODEGEN_PLUGINS,
diff --git a/java/dagger/internal/codegen/BindingGraphConverter.java b/java/dagger/internal/codegen/BindingGraphConverter.java
index b1e942bec..f32d78db0 100644
--- a/java/dagger/internal/codegen/BindingGraphConverter.java
+++ b/java/dagger/internal/codegen/BindingGraphConverter.java
@@ -21,9 +21,6 @@
 import static dagger.internal.codegen.DaggerStreams.instancesOf;
 import static dagger.internal.codegen.DaggerStreams.presentValues;
 import static dagger.internal.codegen.DaggerStreams.toImmutableSet;
-import static dagger.model.BindingGraphProxies.childFactoryMethodEdge;
-import static dagger.model.BindingGraphProxies.dependencyEdge;
-import static dagger.model.BindingGraphProxies.subcomponentBuilderBindingEdge;
 import static dagger.model.BindingKind.SUBCOMPONENT_BUILDER;
 
 import com.google.common.collect.ImmutableSet;
@@ -119,7 +116,8 @@ protected void visitComponent(BindingGraph graph) {
             network.addEdge(
                 node,
                 subcomponentNode(node.key().type(), graph),
-                subcomponentBuilderBindingEdge(subcomponentDeclaringModules(resolvedBindings)));
+                new SubcomponentBuilderBindingEdgeImpl(
+                    subcomponentDeclaringModules(resolvedBindings)));
           }
         }
       }
@@ -133,7 +131,8 @@ protected void visitComponent(BindingGraph graph) {
     @Override
     protected void visitSubcomponentFactoryMethod(
         BindingGraph graph, BindingGraph parent, ExecutableElement factoryMethod) {
-      network.addEdge(parentComponent, currentComponent, childFactoryMethodEdge(factoryMethod));
+      network.addEdge(
+          parentComponent, currentComponent, new ChildFactoryMethodEdgeImpl(factoryMethod));
       super.visitSubcomponentFactoryMethod(graph, parent, factoryMethod);
     }
 
@@ -157,7 +156,9 @@ private void addDependencyEdge(
       network.addNode(dependency);
       if (!hasDependencyEdge(source, dependency, dependencyRequest)) {
         network.addEdge(
-            source, dependency, dependencyEdge(dependencyRequest, source instanceof ComponentNode));
+            source,
+            dependency,
+            new DependencyEdgeImpl(dependencyRequest, source instanceof ComponentNode));
       }
     }
 
diff --git a/java/dagger/internal/codegen/ChildFactoryMethodEdgeImpl.java b/java/dagger/internal/codegen/ChildFactoryMethodEdgeImpl.java
new file mode 100644
index 000000000..8a81017f5
--- /dev/null
+++ b/java/dagger/internal/codegen/ChildFactoryMethodEdgeImpl.java
@@ -0,0 +1,42 @@
+/*
+ * Copyright (C) 2018 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.internal.codegen;
+
+import static dagger.internal.codegen.DaggerElements.elementToString;
+
+import dagger.model.BindingGraph.ChildFactoryMethodEdge;
+import javax.lang.model.element.ExecutableElement;
+
+/** An implementation of {@link ChildFactoryMethodEdge}. */
+final class ChildFactoryMethodEdgeImpl implements ChildFactoryMethodEdge {
+
+  private final ExecutableElement factoryMethod;
+
+  ChildFactoryMethodEdgeImpl(ExecutableElement factoryMethod) {
+    this.factoryMethod = factoryMethod;
+  }
+
+  @Override
+  public ExecutableElement factoryMethod() {
+    return factoryMethod;
+  }
+
+  @Override
+  public String toString() {
+    return elementToString(factoryMethod);
+  }
+}
diff --git a/java/dagger/internal/codegen/DependencyEdgeImpl.java b/java/dagger/internal/codegen/DependencyEdgeImpl.java
new file mode 100644
index 000000000..b777251af
--- /dev/null
+++ b/java/dagger/internal/codegen/DependencyEdgeImpl.java
@@ -0,0 +1,55 @@
+/*
+ * Copyright (C) 2018 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.internal.codegen;
+
+import dagger.model.BindingGraph.DependencyEdge;
+import dagger.model.DependencyRequest;
+
+/** An implementation of {@link DependencyEdge}. */
+final class DependencyEdgeImpl implements DependencyEdge {
+
+  private final DependencyRequest dependencyRequest;
+  private final boolean entryPoint;
+
+  DependencyEdgeImpl(DependencyRequest dependencyRequest, boolean entryPoint) {
+    this.dependencyRequest = dependencyRequest;
+    this.entryPoint = entryPoint;
+  }
+
+  @Override
+  public DependencyRequest dependencyRequest() {
+    return dependencyRequest;
+  }
+
+  @Override
+  public boolean isEntryPoint() {
+    return entryPoint;
+  }
+
+  @Override
+  public String toString() {
+    String string =
+        dependencyRequest
+            .requestElement()
+            .map(DaggerElements::elementToString)
+            .orElseGet(
+                () ->
+                    "synthetic request for "
+                        + dependencyRequest.kind().format(dependencyRequest.key()));
+    return entryPoint ? string + " (entry point)" : string;
+  }
+}
diff --git a/java/dagger/internal/codegen/SubcomponentBuilderBindingEdgeImpl.java b/java/dagger/internal/codegen/SubcomponentBuilderBindingEdgeImpl.java
new file mode 100644
index 000000000..3035def7c
--- /dev/null
+++ b/java/dagger/internal/codegen/SubcomponentBuilderBindingEdgeImpl.java
@@ -0,0 +1,49 @@
+/*
+ * Copyright (C) 2018 The Dagger Authors.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package dagger.internal.codegen;
+
+import static com.google.common.collect.Iterables.getOnlyElement;
+import static java.util.stream.Collectors.joining;
+
+import com.google.common.collect.ImmutableSet;
+import dagger.model.BindingGraph.SubcomponentBuilderBindingEdge;
+import javax.lang.model.element.TypeElement;
+
+/** An implementation of {@link SubcomponentBuilderBindingEdge}. */
+final class SubcomponentBuilderBindingEdgeImpl implements SubcomponentBuilderBindingEdge {
+
+  private final ImmutableSet<TypeElement> declaringModules;
+
+  SubcomponentBuilderBindingEdgeImpl(Iterable<TypeElement> declaringModules) {
+    this.declaringModules = ImmutableSet.copyOf(declaringModules);
+  }
+
+  @Override
+  public ImmutableSet<TypeElement> declaringModules() {
+    return declaringModules;
+  }
+
+  @Override
+  public String toString() {
+    return "subcomponent declared by "
+        + (declaringModules.size() == 1
+            ? getOnlyElement(declaringModules).getQualifiedName()
+            : declaringModules.stream()
+                .map(TypeElement::getQualifiedName)
+                .collect(joining(", ", "{", "}")));
+  }
+}
diff --git a/java/dagger/model/BindingGraph.java b/java/dagger/model/BindingGraph.java
index 8c59f3b76..7c724d787 100644
--- a/java/dagger/model/BindingGraph.java
+++ b/java/dagger/model/BindingGraph.java
@@ -16,7 +16,6 @@
 
 package dagger.model;
 
-import static com.google.common.base.MoreObjects.toStringHelper;
 import static com.google.common.base.Verify.verify;
 import static com.google.common.collect.Sets.intersection;
 import static com.google.common.graph.Graphs.inducedSubgraph;
@@ -240,56 +239,21 @@ public ComponentNode rootComponentNode() {
    * <p>For dependencies on missing bindings, the target node is a {@link MissingBindingNode}.
    * Otherwise the target node is a {@link BindingNode}.
    */
-  public static final class DependencyEdge implements Edge {
-
-    private final DependencyRequest dependencyRequest;
-    private final boolean entryPoint;
-
-    DependencyEdge(DependencyRequest dependencyRequest, boolean entryPoint) {
-      this.dependencyRequest = dependencyRequest;
-      this.entryPoint = entryPoint;
-    }
-
+  public interface DependencyEdge extends Edge {
     /** The dependency request. */
-    public DependencyRequest dependencyRequest() {
-      return dependencyRequest;
-    }
+    DependencyRequest dependencyRequest();
 
     /** Returns {@code true} if this edge represents an entry point. */
-    public boolean isEntryPoint() {
-      return entryPoint;
-    }
-
-    @Override
-    public String toString() {
-      return toStringHelper(this)
-          .add("dependencyRequest", dependencyRequest)
-          .add("entryPoint", entryPoint)
-          .toString();
-    }
+    boolean isEntryPoint();
   }
 
   /**
    * An edge that represents a subcomponent factory method linking a parent component to a child
    * subcomponent.
    */
-  public static final class ChildFactoryMethodEdge implements Edge {
-
-    private final ExecutableElement factoryMethod;
-
-    ChildFactoryMethodEdge(ExecutableElement factoryMethod) {
-      this.factoryMethod = factoryMethod;
-    }
-
+  public interface ChildFactoryMethodEdge extends Edge {
     /** The subcomponent factory method element. */
-    public ExecutableElement factoryMethod() {
-      return factoryMethod;
-    }
-
-    @Override
-    public String toString() {
-      return toStringHelper(this).add("factoryMethod", factoryMethod).toString();
-    }
+    ExecutableElement factoryMethod();
   }
 
   /**
@@ -299,27 +263,13 @@ public String toString() {
    * the {@linkplain com.google.common.graph.EndpointPair#target() target node} is a {@link
    * ComponentNode} for the child subcomponent.
    */
-  public static final class SubcomponentBuilderBindingEdge implements Edge {
-
-    private final ImmutableSet<TypeElement> declaringModules;
-
-    SubcomponentBuilderBindingEdge(Iterable<TypeElement> declaringModules) {
-      this.declaringModules = ImmutableSet.copyOf(declaringModules);
-    }
-
+  public interface SubcomponentBuilderBindingEdge extends Edge {
     /**
      * The modules that {@linkplain Module#subcomponents() declare the subcomponent} that generated
      * this edge. Empty if the parent component has a subcomponent builder method and there are no
      * declaring modules.
      */
-    public ImmutableSet<TypeElement> declaringModules() {
-      return declaringModules;
-    }
-
-    @Override
-    public String toString() {
-      return toStringHelper(this).add("declaringModules", declaringModules).toString();
-    }
+    ImmutableSet<TypeElement> declaringModules();
   }
 
   /** A node in the binding graph. Either a {@link BindingNode} or a {@link ComponentNode}. */
diff --git a/java/dagger/model/BindingGraphProxies.java b/java/dagger/model/BindingGraphProxies.java
index 9c3b60150..1e3ec5637 100644
--- a/java/dagger/model/BindingGraphProxies.java
+++ b/java/dagger/model/BindingGraphProxies.java
@@ -17,14 +17,9 @@
 package dagger.model;
 
 import com.google.common.graph.Network;
-import dagger.model.BindingGraph.ChildFactoryMethodEdge;
-import dagger.model.BindingGraph.DependencyEdge;
 import dagger.model.BindingGraph.Edge;
 import dagger.model.BindingGraph.MissingBindingNode;
 import dagger.model.BindingGraph.Node;
-import dagger.model.BindingGraph.SubcomponentBuilderBindingEdge;
-import javax.lang.model.element.ExecutableElement;
-import javax.lang.model.element.TypeElement;
 
 /**
  * Exposes package-private constructors to the {@code dagger.internal.codegen} package. <em>This
@@ -42,22 +37,5 @@ public static MissingBindingNode missingBindingNode(ComponentPath component, Key
     return MissingBindingNode.create(component, key);
   }
 
-  /** Creates a new {@link DependencyEdge}. */
-  public static DependencyEdge dependencyEdge(
-      DependencyRequest dependencyRequest, boolean entryPoint) {
-    return new DependencyEdge(dependencyRequest, entryPoint);
-  }
-
-  /** Creates a new {@link ChildFactoryMethodEdge}. */
-  public static ChildFactoryMethodEdge childFactoryMethodEdge(ExecutableElement factoryMethod) {
-    return new ChildFactoryMethodEdge(factoryMethod);
-  }
-
-  /** Creates a new {@link SubcomponentBuilderBindingEdge}. */
-  public static SubcomponentBuilderBindingEdge subcomponentBuilderBindingEdge(
-      Iterable<TypeElement> declaringModules) {
-    return new SubcomponentBuilderBindingEdge(declaringModules);
-  }
-
   private BindingGraphProxies() {}
 }
diff --git a/java/dagger/model/RequestKind.java b/java/dagger/model/RequestKind.java
index 2f3c75734..74a434633 100644
--- a/java/dagger/model/RequestKind.java
+++ b/java/dagger/model/RequestKind.java
@@ -16,6 +16,9 @@
 
 package dagger.model;
 
+import static com.google.common.base.CaseFormat.UPPER_CAMEL;
+import static com.google.common.base.CaseFormat.UPPER_UNDERSCORE;
+
 import dagger.Lazy;
 import dagger.producers.Produced;
 import dagger.producers.Producer;
@@ -42,8 +45,8 @@
   PROVIDER_OF_LAZY,
 
   /**
-   * A request for a members injection. E.g. {@code void inject(FooType);}. Can only be requested by
-   * component interfaces.
+   * A request for a members injection. E.g. {@code void injectMembers(FooType);}. Can only be
+   * requested by component interfaces.
    */
   MEMBERS_INJECTION,
 
@@ -59,4 +62,24 @@
    */
   FUTURE,
   ;
+
+  /** Returns a string that represents requests of this kind for a key. */
+  public String format(Key key) {
+    switch (this) {
+      case INSTANCE:
+        return key.toString();
+
+      case PROVIDER_OF_LAZY:
+        return String.format("Provider<Lazy<%s>>", key);
+
+      case MEMBERS_INJECTION:
+        return String.format("injectMembers(%s)", key);
+
+      case FUTURE:
+        return String.format("ListenableFuture<%s>", key);
+
+      default:
+        return String.format("%s<%s>", UPPER_UNDERSCORE.to(UPPER_CAMEL, name()), key);
+    }
+  }
 }
