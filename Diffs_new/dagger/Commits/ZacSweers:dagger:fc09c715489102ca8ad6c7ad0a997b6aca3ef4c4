diff --git a/java/dagger/internal/codegen/Scopes.java b/java/dagger/internal/codegen/Scopes.java
index a6376dc34..4bbb06d34 100644
--- a/java/dagger/internal/codegen/Scopes.java
+++ b/java/dagger/internal/codegen/Scopes.java
@@ -68,12 +68,9 @@ private static Scope scope(Elements elements, Class<? extends Annotation> scopeA
    *
    * <p>It's readable source because it has had common package prefixes removed, e.g.
    * {@code @javax.inject.Singleton} is returned as {@code @Singleton}.
-   *
-   * <p>Does not return any annotation values, since {@link javax.inject.Scope @Scope} annotations
-   * are not supposed to have any.
    */
   static String getReadableSource(Scope scope) {
-    return stripCommonTypePrefixes("@" + scope.scopeAnnotationElement().getQualifiedName());
+    return stripCommonTypePrefixes(scope.toString());
   }
 
   /** Returns all of the associated scopes for a source code element. */
diff --git a/javatests/dagger/internal/codegen/GraphValidationScopingTest.java b/javatests/dagger/internal/codegen/GraphValidationScopingTest.java
index 85ca1a8fd..d4f5b6340 100644
--- a/javatests/dagger/internal/codegen/GraphValidationScopingTest.java
+++ b/javatests/dagger/internal/codegen/GraphValidationScopingTest.java
@@ -90,6 +90,17 @@
         "",
         "@Scope",
         "@interface PerTest {}");
+    JavaFileObject scopeWithAttribute =
+        JavaFileObjects.forSourceLines(
+            "test.Per",
+            "package test;",
+            "",
+            "import javax.inject.Scope;",
+            "",
+            "@Scope",
+            "@interface Per {",
+            "  Class<?> value();",
+            "}");
     JavaFileObject typeFile = JavaFileObjects.forSourceLines("test.ScopedType",
         "package test;",
         "",
@@ -97,7 +108,7 @@
         "",
         "@PerTest", // incompatible scope
         "class ScopedType {",
-        "  @Inject ScopedType(String s, long l, float f) {}",
+        "  @Inject ScopedType(String s, long l, float f, boolean b) {}",
         "}");
     JavaFileObject moduleFile = JavaFileObjects.forSourceLines("test.ScopedModule",
         "package test;",
@@ -111,14 +122,17 @@
         "  @Provides @PerTest String string() { return \"a string\"; }", // incompatible scope
         "  @Provides long integer() { return 0L; }", // unscoped - valid
         "  @Provides @Singleton float floatingPoint() { return 0.0f; }", // same scope - valid
+        "  @Provides @Per(MyComponent.class) boolean bool() { return false; }", // incompatible
         "}");
     String errorMessage =
         "test.MyComponent scoped with @Singleton "
             + "may not reference bindings with different scopes:\n"
             + "      @test.PerTest class test.ScopedType\n"
-            + "      @Provides @test.PerTest String test.ScopedModule.string()";
+            + "      @Provides @test.PerTest String test.ScopedModule.string()\n"
+            + "      @Provides @test.Per(test.MyComponent.class) boolean test.ScopedModule.bool()";
     Compilation compilation =
-        daggerCompiler().compile(componentFile, scopeFile, typeFile, moduleFile);
+        daggerCompiler()
+            .compile(componentFile, scopeFile, scopeWithAttribute, typeFile, moduleFile);
     assertThat(compilation).failed();
     assertThat(compilation).hadErrorContaining(errorMessage);
   }
