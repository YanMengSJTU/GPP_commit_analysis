diff --git a/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java b/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java
index c60612581..13f79c9d3 100644
--- a/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java
+++ b/java/dagger/internal/codegen/ComponentCreatorImplementationFactory.java
@@ -167,15 +167,15 @@ final ComponentDescriptor componentDescriptor() {
     }
 
     private void setModifiers() {
-      visibility().ifPresent(classBuilder::addModifiers);
+      classBuilder.addModifiers(visibility());
       if (!componentImplementation.isNested()) {
         classBuilder.addModifiers(STATIC);
       }
       classBuilder.addModifiers(componentImplementation.isAbstract() ? ABSTRACT : FINAL);
     }
 
-    /** Returns the visibility modifier the generated class should have, if any. */
-    protected abstract Optional<Modifier> visibility();
+    /** Returns the visibility modifier the generated class should have. */
+    protected abstract Modifier visibility();
 
     /** Sets the superclass being extended or interface being implemented for this creator. */
     protected abstract void setSupertype();
@@ -395,14 +395,14 @@ private CodeBlock newModuleInstance(ComponentRequirement requirement) {
     }
 
     @Override
-    protected Optional<Modifier> visibility() {
+    protected Modifier visibility() {
       if (componentImplementation.isAbstract()) {
         // The component creator class of a top-level component implementation in ahead-of-time
         // subcomponents mode must be public, not protected, because the creator's subclass will
         // be a sibling of the component subclass implementation, not nested.
-        return Optional.of(componentImplementation.isNested() ? PROTECTED : PUBLIC);
+        return componentImplementation.isNested() ? PROTECTED : PUBLIC;
       }
-      return Optional.of(PRIVATE);
+      return PRIVATE;
     }
 
     @Override
@@ -515,12 +515,8 @@ private boolean hasBaseCreatorImplementation() {
     }
 
     @Override
-    protected Optional<Modifier> visibility() {
-      return componentImplementation
-          .componentDescriptor()
-          .typeElement()
-          .getModifiers()
-          .contains(PUBLIC) ? Optional.of(PUBLIC) : Optional.empty();
+    protected Modifier visibility() {
+      return PUBLIC;
     }
 
     @Override
diff --git a/java/dagger/internal/codegen/ComponentImplementation.java b/java/dagger/internal/codegen/ComponentImplementation.java
index c9e8d8575..2c2acf41b 100644
--- a/java/dagger/internal/codegen/ComponentImplementation.java
+++ b/java/dagger/internal/codegen/ComponentImplementation.java
@@ -56,6 +56,7 @@
 import dagger.model.Key;
 import dagger.model.RequestKind;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.LinkedHashMap;
@@ -161,7 +162,8 @@
     /** Creates a new {@link ConfigureInitializationMethod}. */
     static ConfigureInitializationMethod create(
         MethodSpec spec, ImmutableSet<ComponentRequirement> parameters) {
-      return new AutoValue_ComponentImplementation_ConfigureInitializationMethod(spec, parameters);
+      return new AutoValue_ComponentImplementation_ConfigureInitializationMethod(
+          spec, parameters);
     }
 
     /** The spec for the method. */
@@ -214,17 +216,16 @@ private ComponentImplementation(
       Optional<ComponentImplementation> superclassImplementation,
       Optional<SubcomponentNames> subcomponentNames,
       CompilerOptions compilerOptions,
-      ImmutableSet<Modifier> modifiers) {
+      Modifier... modifiers) {
     checkName(name, nestingKind);
     this.compilerOptions = compilerOptions;
     this.componentDescriptor = componentDescriptor;
     this.graph = graph;
     this.name = name;
     this.nestingKind = nestingKind;
-    this.isAbstract = modifiers.contains(ABSTRACT);
+    this.isAbstract = Arrays.asList(modifiers).contains(ABSTRACT);
     this.superclassImplementation = superclassImplementation;
-    this.component = classBuilder(name);
-    modifiers.forEach(component::addModifiers);
+    this.component = classBuilder(name).addModifiers(modifiers);
     this.subcomponentNames = subcomponentNames;
   }
 
@@ -242,18 +243,8 @@ static ComponentImplementation topLevelComponentImplementation(
         Optional.empty(), // superclass implementation
         Optional.of(subcomponentNames),
         compilerOptions,
-        topLevelComponentImplementationModifiers(graph));
-  }
-
-  private static ImmutableSet<Modifier> topLevelComponentImplementationModifiers(
-      BindingGraph graph) {
-    ImmutableSet.Builder<Modifier> modifiers = ImmutableSet.builder();
-    if (graph.componentTypeElement().getModifiers().contains(PUBLIC)
-        || graph.componentDescriptor().isSubcomponent()) {
-      // TODO(ronshapiro): perhaps all generated components should be non-public?
-      modifiers.add(PUBLIC);
-    }
-    return modifiers.add(graph.componentDescriptor().isSubcomponent() ? ABSTRACT : FINAL).build();
+        PUBLIC,
+        graph.componentDescriptor().isSubcomponent() ? ABSTRACT : FINAL);
   }
 
   /** Returns a component implementation that is a child of the current implementation. */
@@ -269,7 +260,7 @@ ComponentImplementation childComponentImplementation(
         superclassImplementation,
         subcomponentNames,
         compilerOptions,
-        ImmutableSet.copyOf(modifiers));
+        modifiers);
   }
 
   /**
@@ -291,7 +282,8 @@ static ComponentImplementation forDeserializedComponent(
         superclassImplementation,
         Optional.empty(),
         compilerOptions,
-        ImmutableSet.of(PUBLIC, ABSTRACT));
+        PUBLIC,
+        ABSTRACT);
   }
 
   // TODO(dpb): Just determine the nesting kind from the name.
@@ -778,7 +770,8 @@ boolean hasInitializations() {
     Optional<ComponentImplementation> currentSuperImplementation = superclassImplementation;
     Set<Key> cancelledKeysFromSuperclass = new HashSet<>();
     while (currentSuperImplementation.isPresent()) {
-      cancelledKeysFromSuperclass.addAll(currentSuperImplementation.get().cancellableProducerKeys);
+      cancelledKeysFromSuperclass.addAll(
+          currentSuperImplementation.get().cancellableProducerKeys);
       currentSuperImplementation = currentSuperImplementation.get().superclassImplementation;
     }
     return Sets.difference(cancellableProducerKeys, cancelledKeysFromSuperclass)
diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsMultibindingsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsMultibindingsTest.java
index bb967b177..a02f7d32a 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsMultibindingsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsMultibindingsTest.java
@@ -1009,7 +1009,7 @@ public void missingMultibindingInLeaf_onlyContributionsInAncestor_notReModifiedI
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerRoot implements Root {",
+            "public final class DaggerRoot implements Root {",
             "  private DaggerRoot() {}",
             "",
             "  public static Builder builder() {",
@@ -1025,7 +1025,7 @@ public void missingMultibindingInLeaf_onlyContributionsInAncestor_notReModifiedI
             "    return new AncestorImpl();",
             "  }",
             "",
-            "  static final class Builder {",
+            "  public static final class Builder {",
             "    private Builder() {}",
             "",
             "    public Root build() {",
diff --git a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
index 1bd221a61..a651def68 100644
--- a/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
+++ b/javatests/dagger/internal/codegen/AheadOfTimeSubcomponentsTest.java
@@ -479,7 +479,7 @@ public void moduleInstanceDependency() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerRoot implements Root {",
+            "public final class DaggerRoot implements Root {",
             "  private DaggerRoot() {}",
             "",
             "  public static Builder builder() {",
@@ -495,7 +495,7 @@ public void moduleInstanceDependency() {
             "    return new AncestorImpl();",
             "  }",
             "",
-            "  static final class Builder {",
+            "  public static final class Builder {",
             "    private Builder() {}",
             "",
             "    public Root build() {",
@@ -643,7 +643,7 @@ public void moduleInstanceDependency_withModuleParams() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerRoot implements Root {",
+            "public final class DaggerRoot implements Root {",
             "  private DaggerRoot() {}",
             "",
             "  public static Builder builder() {",
@@ -659,7 +659,7 @@ public void moduleInstanceDependency_withModuleParams() {
             "    return new AncestorImpl();",
             "  }",
             "",
-            "  static final class Builder {",
+            "  public static final class Builder {",
             "    private Builder() {}",
             "",
             "    public Root build() {",
@@ -789,7 +789,7 @@ public void generatedInstanceBinding() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerRoot implements Root {",
+            "public final class DaggerRoot implements Root {",
             "  private DaggerRoot() {}",
             "",
             "  public static Builder builder() {",
@@ -805,7 +805,7 @@ public void generatedInstanceBinding() {
             "    return new AncestorImpl();",
             "  }",
             "",
-            "  static final class Builder {",
+            "  public static final class Builder {",
             "    private Builder() {}",
             "",
             "    public Root build() {",
@@ -948,7 +948,7 @@ public void prunedGeneratedInstanceBinding() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerRoot implements Root {",
+            "public final class DaggerRoot implements Root {",
             "  private DaggerRoot() {}",
             "",
             "  public static Builder builder() {",
@@ -964,7 +964,7 @@ public void prunedGeneratedInstanceBinding() {
             "    return new MaybeLeafImpl();",
             "  }",
             "",
-            "  static final class Builder {",
+            "  public static final class Builder {",
             "    private Builder() {}",
             "",
             "    public Root build() {",
@@ -2088,7 +2088,7 @@ public void provisionOverInjection_prunedIndirectDependency() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerRoot implements Root {",
+            "public final class DaggerRoot implements Root {",
             "  private DaggerRoot() {}",
             "",
             "  public static Builder builder() {",
@@ -2104,7 +2104,7 @@ public void provisionOverInjection_prunedIndirectDependency() {
             "    return new LeafImpl();",
             "  }",
             "",
-            "  static final class Builder {",
+            "  public static final class Builder {",
             "    private Builder() {}",
             "",
             "    @Deprecated",
@@ -2242,7 +2242,7 @@ public void provisionOverInjection_prunedDirectDependency_prunedInConcreteImplem
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerRoot implements Root {",
+            "public final class DaggerRoot implements Root {",
             "  private DaggerRoot() {}",
             "",
             "  public static Builder builder() {",
@@ -2258,7 +2258,7 @@ public void provisionOverInjection_prunedDirectDependency_prunedInConcreteImplem
             "    return new LeafImpl();",
             "  }",
             "",
-            "  static final class Builder {",
+            "  public static final class Builder {",
             "    private Builder() {}",
             "",
             "    @Deprecated",
@@ -2430,7 +2430,7 @@ public void provisionOverInjection_prunedDirectDependency_prunedInAbstractImplem
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerRoot implements Root {",
+            "public final class DaggerRoot implements Root {",
             "  private DaggerRoot() {}",
             "",
             "  public static Builder builder() {",
@@ -2446,7 +2446,7 @@ public void provisionOverInjection_prunedDirectDependency_prunedInAbstractImplem
             "    return new AncestorImpl();",
             "  }",
             "",
-            "  static final class Builder {",
+            "  public static final class Builder {",
             "    private Builder() {}",
             "",
             "    public Root build() {",
@@ -2681,7 +2681,7 @@ public void productionSubcomponentAndModifiableFrameworkInstance() {
             "import javax.inject.Provider;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerRoot implements Root, CancellationListener {",
+            "public final class DaggerRoot implements Root, CancellationListener {",
             "  private Provider<Executor> productionImplementationExecutorProvider;",
             "  private Provider<Root> rootProvider;",
             "  private Provider<ProductionComponentMonitor> monitorProvider;",
@@ -3341,7 +3341,7 @@ public void subcomponentBuilders() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerRoot implements Root {",
+            "public final class DaggerRoot implements Root {",
             "  private DaggerRoot() {}",
             "",
             "  public static Builder builder() {",
@@ -3357,7 +3357,7 @@ public void subcomponentBuilders() {
             "    return new AncestorImpl();",
             "  }",
             "",
-            "  static final class Builder {",
+            "  public static final class Builder {",
             "    private Builder() {}",
             "",
             "    public Root build() {",
@@ -3535,7 +3535,7 @@ public void subcomponentBuilders_moduleWithUnusedInstanceBindings() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerRoot implements Root {",
+            "public final class DaggerRoot implements Root {",
             "  private DaggerRoot() {}",
             "",
             "  public static Builder builder() {",
@@ -3551,7 +3551,7 @@ public void subcomponentBuilders_moduleWithUnusedInstanceBindings() {
             "    return new LeafBuilder();",
             "  }",
             "",
-            "  static final class Builder {",
+            "  public static final class Builder {",
             "    private Builder() {}",
             "",
             "    public Root build() {",
@@ -3690,7 +3690,7 @@ public void subcomponentBuilders_repeatedModule() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerRoot implements Root {",
+            "public final class DaggerRoot implements Root {",
             "  private final RepeatedModule repeatedModule;",
             "",
             "  private DaggerRoot(RepeatedModule repeatedModuleParam) {",
@@ -3710,7 +3710,7 @@ public void subcomponentBuilders_repeatedModule() {
             "    return new LeafBuilder();",
             "  }",
             "",
-            "  static final class Builder {",
+            "  public static final class Builder {",
             "    private RepeatedModule repeatedModule;",
             "",
             "    private Builder() {}",
@@ -3842,7 +3842,7 @@ public void bindsWithMissingDependency() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerRoot implements Root {",
+            "public final class DaggerRoot implements Root {",
             "  private DaggerRoot() {}",
             "",
             "  public static Builder builder() {",
@@ -3858,7 +3858,7 @@ public void bindsWithMissingDependency() {
             "    return new LeafImpl();",
             "  }",
             "",
-            "  static final class Builder {",
+            "  public static final class Builder {",
             "    private Builder() {}",
             "",
             "    public Root build() {",
@@ -3976,7 +3976,7 @@ public void bindsWithMissingDependency_pruned() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerRoot implements Root {",
+            "public final class DaggerRoot implements Root {",
             "  private DaggerRoot() {}",
             "",
             "  public static Builder builder() {",
@@ -3992,7 +3992,7 @@ public void bindsWithMissingDependency_pruned() {
             "    return new LeafImpl();",
             "  }",
             "",
-            "  static final class Builder {",
+            "  public static final class Builder {",
             "    private Builder() {}",
             "",
             "    public Root build() {",
@@ -4178,7 +4178,7 @@ public void modifiedProducerFromProvider() {
             "import javax.inject.Provider;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerRoot implements Root {",
+            "public final class DaggerRoot implements Root {",
             "  private DaggerRoot() {}",
             "",
             "  public static Builder builder() {",
@@ -4194,7 +4194,7 @@ public void modifiedProducerFromProvider() {
             "    return new LeafImpl();",
             "  }",
             "",
-            "  static final class Builder {",
+            "  public static final class Builder {",
             "    private Builder() {}",
             "",
             "    public Root build() {",
@@ -4665,7 +4665,7 @@ public void rootScopedAtInjectConstructor_effectivelyMissingInSubcomponent() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerRoot implements Root {",
+            "public final class DaggerRoot implements Root {",
             "  protected final class LeafImpl extends DaggerLeaf {",
             "    @Override",
             "    public AtInjectRootScoped shouldBeEffectivelyMissingInLeaf() {",
@@ -4779,7 +4779,7 @@ public void prunedModuleWithInstanceState() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerRoot implements Root {",
+            "public final class DaggerRoot implements Root {",
             "  protected final class LeafImpl extends DaggerLeaf {",
             "    @Override",
             "    public Modified modified() {",
@@ -4998,7 +4998,7 @@ public void componentBuilderFields_consistencyAcrossImplementations() {
             "import a.Mod;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerRoot implements Root {",
+            "public final class DaggerRoot implements Root {",
             "  private final class HasUnusedModuleLeafBuilder",
             "      extends DaggerHasUnusedModuleLeaf.Builder {",
             "    @Override",
@@ -5155,7 +5155,7 @@ public void multipleComponentMethodsForSameBindingRequest() {
             "package test;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerRoot implements Root {",
+            "public final class DaggerRoot implements Root {",
             "  protected final class LeafImpl extends DaggerLeaf {",
             "    private LeafImpl() {}",
             "",
@@ -5456,7 +5456,7 @@ public void castModifiableMethodAccessedInFinalImplementation() {
             "package test;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerRoot implements Root {",
+            "public final class DaggerRoot implements Root {",
             "  protected final class AncestorImpl extends DaggerAncestor {",
             "    protected final class LeafImpl extends DaggerAncestor.LeafImpl {",
             "      @Override",
@@ -5606,7 +5606,7 @@ public void injectInLeaf_ProductionInRoot() {
             "package test;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerRoot implements Root, CancellationListener {",
+            "public final class DaggerRoot implements Root, CancellationListener {",
             "  private Producer<Dependency> dependencyProducer;",
             "  private Producer<Injected> replaceInjectWithProducesProducer;",
             "",
diff --git a/javatests/dagger/internal/codegen/ComponentBuilderTest.java b/javatests/dagger/internal/codegen/ComponentBuilderTest.java
index f280bddfa..66c54bd4e 100644
--- a/javatests/dagger/internal/codegen/ComponentBuilderTest.java
+++ b/javatests/dagger/internal/codegen/ComponentBuilderTest.java
@@ -88,7 +88,7 @@ public void testUsesBuildAndSetterNames() {
             "import dagger.internal.Preconditions;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerTestComponent implements TestComponent {",
+            "public final class DaggerTestComponent implements TestComponent {",
             "  private static final class Builder implements TestComponent.Builder {",
             "    private TestModule testModule;",
             "",
diff --git a/javatests/dagger/internal/codegen/ComponentCreatorTest.java b/javatests/dagger/internal/codegen/ComponentCreatorTest.java
index 6f4ea8d70..9571b4b7c 100644
--- a/javatests/dagger/internal/codegen/ComponentCreatorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentCreatorTest.java
@@ -96,7 +96,7 @@ public void testEmptyCreator() {
             "package test;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerSimpleComponent implements SimpleComponent {",
+            "public final class DaggerSimpleComponent implements SimpleComponent {",
             "  private static final class Builder implements SimpleComponent.Builder {",
             "    @Override",
             "    public SimpleComponent build() {",
@@ -150,7 +150,7 @@ public void testCanInstantiateModulesUserCannotSet() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerTestComponent implements TestComponent {",
+            "public final class DaggerTestComponent implements TestComponent {",
             "  private final TestModule testModule;",
             "",
             "  private DaggerTestComponent(TestModule testModuleParam) {",
@@ -348,7 +348,7 @@ public void testCreatorWithBindsInstanceNoStaticCreateGenerated() {
                 IMPORT_GENERATED_ANNOTATION,
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerSimpleComponent implements SimpleComponent {",
+                "public final class DaggerSimpleComponent implements SimpleComponent {",
                 "  private final Object object;",
                 "",
                 "  private DaggerSimpleComponent(Object objectParam) {",
@@ -449,7 +449,7 @@ public void testCreatorWithPrimitiveBindsInstance() {
                 IMPORT_GENERATED_ANNOTATION,
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerSimpleComponent implements SimpleComponent {",
+                "public final class DaggerSimpleComponent implements SimpleComponent {",
                 "  private final Integer i;",
                 "",
                 "  private DaggerSimpleComponent(Integer iParam) {",
diff --git a/javatests/dagger/internal/codegen/ComponentFactoryTest.java b/javatests/dagger/internal/codegen/ComponentFactoryTest.java
index 403498bfc..66741267b 100644
--- a/javatests/dagger/internal/codegen/ComponentFactoryTest.java
+++ b/javatests/dagger/internal/codegen/ComponentFactoryTest.java
@@ -87,7 +87,7 @@ public void testUsesParameterNames() {
             "import dagger.internal.Preconditions;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerTestComponent implements TestComponent {",
+            "public final class DaggerTestComponent implements TestComponent {",
             "  private static final class Factory implements TestComponent.Factory {",
             "    @Override",
             "    public TestComponent newTestComponent(TestModule mod) {",
diff --git a/javatests/dagger/internal/codegen/ComponentProcessorTest.java b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
index 2b79b6f21..bdf8a87af 100644
--- a/javatests/dagger/internal/codegen/ComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ComponentProcessorTest.java
@@ -186,7 +186,7 @@ public ComponentProcessorTest(CompilerMode compilerMode) {
                 "import javax.inject.Provider;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerSimpleComponent implements SimpleComponent {")
+                "public final class DaggerSimpleComponent implements SimpleComponent {")
             .addLinesIn(
                 FAST_INIT_MODE,
                 "  private volatile Provider<SomeInjectableType> someInjectableTypeProvider;")
@@ -233,7 +233,7 @@ public ComponentProcessorTest(CompilerMode compilerMode) {
             .addLines(
                 "  }",
                 "",
-                "  static final class Builder {",
+                "  public static final class Builder {",
                 "    private Builder() {}",
                 "",
                 "    public SimpleComponent build() {",
@@ -303,7 +303,7 @@ public ComponentProcessorTest(CompilerMode compilerMode) {
                 "package test;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerSimpleComponent implements SimpleComponent {")
+                "public final class DaggerSimpleComponent implements SimpleComponent {")
             .addLinesIn(
                 FAST_INIT_MODE,
                 "  private volatile Object someInjectableType = new MemoizedSentinel();",
@@ -423,7 +423,7 @@ public ComponentProcessorTest(CompilerMode compilerMode) {
                 "package test;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerOuterType_SimpleComponent",
+                "public final class DaggerOuterType_SimpleComponent",
                 "    implements OuterType.SimpleComponent {",
                 "  private DaggerOuterType_SimpleComponent() {}",
                 "",
@@ -507,7 +507,7 @@ public ComponentProcessorTest(CompilerMode compilerMode) {
                 IMPORT_GENERATED_ANNOTATION,
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {",
+                "public final class DaggerTestComponent implements TestComponent {",
                 "  private final TestModule testModule;",
                 "",
                 "  private DaggerTestComponent(TestModule testModuleParam) {",
@@ -523,7 +523,7 @@ public ComponentProcessorTest(CompilerMode compilerMode) {
                 "    return new A(getB());",
                 "  }",
                 "",
-                "  static final class Builder {",
+                "  public static final class Builder {",
                 "    private TestModule testModule;",
                 "",
                 "    public Builder testModule(TestModule testModule) {",
@@ -611,7 +611,7 @@ public void componentWithAbstractModule() {
                 "package test;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {",
+                "public final class DaggerTestComponent implements TestComponent {",
                 "  private B getB() {",
                 "    return TestModule_BFactory.b(new C());",
                 "  }",
@@ -709,8 +709,8 @@ public void componentWithAbstractModule() {
         IMPORT_GENERATED_ANNOTATION,
         "",
         GENERATED_ANNOTATION,
-        "final class DaggerTestComponent implements TestComponent {",
-        "  static final class Builder {",
+        "public final class DaggerTestComponent implements TestComponent {",
+        "  public static final class Builder {",
         "",
         "    @Deprecated",
         "    public Builder testModule(TestModule testModule) {",
@@ -894,7 +894,7 @@ public void subcomponentNotGeneratedIfNotUsedInGraph() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerParent implements Parent {",
+            "public final class DaggerParent implements Parent {",
             "",
             "  private DaggerParent() {}",
             "",
@@ -911,7 +911,7 @@ public void subcomponentNotGeneratedIfNotUsedInGraph() {
             "    return ParentModule_NotSubcomponentFactory.notSubcomponent();",
             "  }",
             "",
-            "  static final class Builder {",
+            "  public static final class Builder {",
             "",
             "    private Builder() {}",
             "",
@@ -1008,7 +1008,7 @@ public void testDefaultPackage() {
                 "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerSimpleComponent implements SimpleComponent {",
+                "public final class DaggerSimpleComponent implements SimpleComponent {",
                 "  @Override",
                 "  public void inject(SomeInjectedType instance) {",
                 "    injectSomeInjectedType(instance);",
@@ -1065,7 +1065,7 @@ public void testDefaultPackage() {
             "package test;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerSimpleComponent implements SimpleComponent {",
+            "public final class DaggerSimpleComponent implements SimpleComponent {",
             "  private Provider<SimpleComponent> simpleComponentProvider;",
             "",
             "  @SuppressWarnings(\"unchecked\")",
@@ -1130,7 +1130,7 @@ public void testDefaultPackage() {
                 "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerSimpleComponent implements SimpleComponent {",
+                "public final class DaggerSimpleComponent implements SimpleComponent {",
                 "  @Override",
                 "  public SomeInjectedType createAndInject() {",
                 "    return injectSomeInjectedType(",
@@ -1199,7 +1199,7 @@ public void testDefaultPackage() {
                 "package test;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerBComponent implements BComponent {")
+                "public final class DaggerBComponent implements BComponent {")
             .addLinesIn(
                 DEFAULT_MODE,
                 "  private Provider<A> aProvider;")
@@ -1239,7 +1239,7 @@ public void testDefaultPackage() {
             .addLines(
                 "  }",
                 "",
-                "  static final class Builder {",
+                "  public static final class Builder {",
                 "    private AComponent aComponent;",
                 "",
                 "    public Builder aComponent(AComponent aComponent) {",
@@ -1344,7 +1344,7 @@ public void testDefaultPackage() {
             "package test;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerTestComponent implements TestComponent {",
+            "public final class DaggerTestComponent implements TestComponent {",
             "  private final TestModule testModule;",
             "  private final other.test.TestModule testModule2;",
             "",
@@ -1365,7 +1365,7 @@ public void testDefaultPackage() {
             "    return other.test.TestModule_AFactory.a(testModule2);",
             "  }",
             "",
-            "  static final class Builder {",
+            "  public static final class Builder {",
             "    private TestModule testModule;",
             "    private other.test.TestModule testModule2;",
             "",
@@ -1470,7 +1470,7 @@ public void testDefaultPackage() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerBComponent implements BComponent {",
+            "public final class DaggerBComponent implements BComponent {",
             "  private final AComponent aComponent;",
             "",
             "  private DaggerBComponent(AComponent aComponentParam) {",
@@ -1557,7 +1557,7 @@ public void testDefaultPackage() {
                 IMPORT_GENERATED_ANNOTATION,
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {",
+                "public final class DaggerTestComponent implements TestComponent {",
                 "  private B getB() {",
                 "    return new B(new C());",
                 "  }",
@@ -1638,7 +1638,7 @@ public void testDefaultPackage() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerSimpleComponent implements SimpleComponent {",
+            "public final class DaggerSimpleComponent implements SimpleComponent {",
             "  private DaggerSimpleComponent() {}",
             "",
             "  public static Builder builder() {",
@@ -1654,7 +1654,7 @@ public void testDefaultPackage() {
             "    return new SomeInjectableType();",
             "  }",
             "",
-            "  static final class Builder {",
+            "  public static final class Builder {",
             "    private Builder() {}",
             "",
             "    public SimpleComponent build() {",
@@ -1708,7 +1708,7 @@ public void testDefaultPackage() {
             "package test;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerSimpleComponent implements SimpleComponent {",
+            "public final class DaggerSimpleComponent implements SimpleComponent {",
             "  @Override",
             "  public SomeInjectableType someInjectableType() {",
             "    return new SomeInjectableType();",
@@ -2083,7 +2083,7 @@ public void unusedSubcomponents_dontResolveExtraBindingsInParentComponents() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerParent implements Parent {",
+            "public final class DaggerParent implements Parent {",
             "  private DaggerParent() {",
             "  }",
             "",
@@ -2095,7 +2095,7 @@ public void unusedSubcomponents_dontResolveExtraBindingsInParentComponents() {
             "    return new Builder().build();",
             "  }",
             "",
-            "  static final class Builder {",
+            "  public static final class Builder {",
             "    private Builder() {}",
             "",
             "    @Deprecated",
@@ -2246,7 +2246,7 @@ public void nullIncorrectlyReturnedFromNonNullableInlinedProvider() {
                 "package test;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {",
+                "public final class DaggerTestComponent implements TestComponent {",
                 "  @Override",
                 "  public String nonNullableString() {",
                 "    return TestModule_NonNullableStringFactory.nonNullableString());",
@@ -2337,7 +2337,7 @@ public void nullCheckingIgnoredWhenProviderReturnsPrimitive() {
                 "package test;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {",
+                "public final class DaggerTestComponent implements TestComponent {",
                 "  @Override",
                 "  public Integer nonNullableInteger() {",
                 "    return TestModule.primitiveInteger();",
@@ -2413,7 +2413,7 @@ public void privateMethodUsedOnlyInChildDoesNotUseQualifiedThis() {
             "test.DaggerParent",
             "package test;",
             GENERATED_ANNOTATION,
-            "final class DaggerParent implements Parent {",
+            "public final class DaggerParent implements Parent {",
             "  private String getString() {",
             "    return TestModule_StringFactory.string(numberProvider.get());",
             "  }",
@@ -2483,7 +2483,7 @@ public void componentMethodInChildCallsComponentMethodInParent() {
             "test.DaggerParent",
             "package test;",
             GENERATED_ANNOTATION,
-            "final class DaggerParent implements Parent {",
+            "public final class DaggerParent implements Parent {",
             "  private final class ChildImpl implements Child {",
             "    @Override",
             "    public String string() {",
@@ -2550,7 +2550,7 @@ public void justInTimeAtInjectConstructor_hasGeneratedQualifier() {
             "package test;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerTestComponent implements TestComponent {",
+            "public final class DaggerTestComponent implements TestComponent {",
             "  @Override",
             "  public Injected injected() {",
             // Ensure that the qualified @Provides method is used. It's also probably more likely
@@ -2623,7 +2623,7 @@ public void moduleHasGeneratedQualifier() {
             "package test;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerTestComponent implements TestComponent {",
+            "public final class DaggerTestComponent implements TestComponent {",
             "  @Override",
             "  public String unqualified() {",
             // Ensure that the unqualified @Provides method is used. It's also probably more likely
@@ -2654,50 +2654,6 @@ public void moduleHasGeneratedQualifier() {
         .containsElementsIn(generatedComponent);
   }
 
-  @Test
-  public void publicComponentType() {
-    JavaFileObject publicComponent =
-        JavaFileObjects.forSourceLines(
-            "test.PublicComponent",
-            "package test;",
-            "",
-            "import dagger.Component;",
-            "",
-            "@Component",
-            "public interface PublicComponent {}");
-    Compilation compilation = daggerCompiler().compile(publicComponent);
-    assertThat(compilation).succeeded();
-    assertThat(compilation)
-        .generatedSourceFile("test.DaggerPublicComponent")
-        .hasSourceEquivalentTo(
-            JavaFileObjects.forSourceLines(
-                "test.DaggerPublicComponent",
-                "package test;",
-                "",
-                IMPORT_GENERATED_ANNOTATION,
-                "",
-                GENERATED_ANNOTATION,
-                "public final class DaggerPublicComponent implements PublicComponent {",
-                "  private DaggerPublicComponent() {}",
-                "",
-                "  public static Builder builder() {",
-                "    return new Builder();",
-                "  }",
-                "",
-                "  public static PublicComponent create() {",
-                "    return new Builder().build();",
-                "  }",
-                "",
-                "  public static final class Builder {",
-                "    private Builder() {}",
-                "",
-                "    public PublicComponent build() {",
-                "      return new DaggerPublicComponent();",
-                "    }",
-                "  }",
-                "}"));
-  }
-
   /**
    * A {@link ComponentProcessor} that excludes elements using a {@link Predicate}.
    */
diff --git a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
index 85e2d7b9a..3375d7aa5 100644
--- a/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
+++ b/javatests/dagger/internal/codegen/ComponentRequirementFieldTest.java
@@ -77,7 +77,7 @@ public void bindsInstance() {
                 "package test;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {",
+                "public final class DaggerTestComponent implements TestComponent {",
                 "  private final Integer i;",
                 "  private final List<String> list;",
                 "",
@@ -175,7 +175,7 @@ public void instanceModuleMethod() {
             "import other.OtherPackageModule_LFactory;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerTestComponent implements TestComponent {",
+            "public final class DaggerTestComponent implements TestComponent {",
             "  private final ParentModule parentModule;",
             "  private final OtherPackageModule otherPackageModule;",
             "",
@@ -248,7 +248,7 @@ public void componentInstances() {
                 "package test;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {",
+                "public final class DaggerTestComponent implements TestComponent {",
                 "  private final Dep dep;",
                 "",
                 "  private DaggerTestComponent(Dep depParam) {",
@@ -362,7 +362,7 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "package test;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {",
+                "public final class DaggerTestComponent implements TestComponent {",
                 "  private final ParentModule parentModule;",
                 "",
                 "  private DaggerTestComponent(ParentModule parentModuleParam) {",
@@ -390,7 +390,7 @@ public void componentRequirementNeededInFactoryCreationOfSubcomponent() {
                 "package test;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {",
+                "public final class DaggerTestComponent implements TestComponent {",
                 "  private final ParentModule parentModule;",
                 "",
                 "  private DaggerTestComponent(ParentModule parentModuleParam) {",
diff --git a/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java b/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
index 2f4aecf85..fd20350d4 100644
--- a/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
+++ b/javatests/dagger/internal/codegen/DelegateBindingExpressionTest.java
@@ -145,7 +145,7 @@ public void toDoubleCheck() {
                     "package test;",
                     "",
                     GENERATED_ANNOTATION,
-                    "final class DaggerTestComponent implements TestComponent {")
+                    "public final class DaggerTestComponent implements TestComponent {")
                 .addLinesIn(
                     FAST_INIT_MODE,
                     "  private volatile Object regularScoped = new MemoizedSentinel();",
@@ -224,7 +224,7 @@ public void toSingleCheck() {
                     "package test;",
                     "",
                     GENERATED_ANNOTATION,
-                    "final class DaggerTestComponent implements TestComponent {")
+                    "public final class DaggerTestComponent implements TestComponent {")
                 .addLinesIn(
                     FAST_INIT_MODE,
                     "  private volatile Object regularScoped = new MemoizedSentinel();",
@@ -300,7 +300,7 @@ public void toUnscoped() {
                     "package test;",
                     "",
                     GENERATED_ANNOTATION,
-                    "final class DaggerTestComponent implements TestComponent {")
+                    "public final class DaggerTestComponent implements TestComponent {")
                 .addLinesIn(
                     FAST_INIT_MODE,
                     "  private volatile Object regularScoped = new MemoizedSentinel();",
@@ -403,7 +403,7 @@ public void castNeeded_rawTypes_Provider_get() {
                     "package test;",
                     "",
                     GENERATED_ANNOTATION,
-                    "final class DaggerTestComponent implements TestComponent {")
+                    "public final class DaggerTestComponent implements TestComponent {")
                 .addLinesIn(
                     DEFAULT_MODE,
                     "  @SuppressWarnings(\"rawtypes\")",
@@ -512,7 +512,7 @@ public void noCast_rawTypes_Provider_get_toInaccessibleType() {
                     "package test;",
                     "",
                     GENERATED_ANNOTATION,
-                    "final class DaggerTestComponent implements TestComponent {")
+                    "public final class DaggerTestComponent implements TestComponent {")
                 .addLinesIn(
                     DEFAULT_MODE,
                     "  @SuppressWarnings(\"rawtypes\")",
@@ -603,7 +603,7 @@ public void castedToRawType() {
                     "package test;",
                     "",
                     GENERATED_ANNOTATION,
-                    "final class DaggerTestComponent implements TestComponent {")
+                    "public final class DaggerTestComponent implements TestComponent {")
                 .addLinesIn(
                     DEFAULT_MODE,
                     "  @Override",
@@ -705,7 +705,7 @@ public void doubleBinds() {
                     "package test;",
                     "",
                     GENERATED_ANNOTATION,
-                    "final class DaggerTestComponent implements TestComponent {")
+                    "public final class DaggerTestComponent implements TestComponent {")
                 .addLinesIn(
                     DEFAULT_MODE,
                     "  @Override",
@@ -811,7 +811,7 @@ public void inlineFactoryOfInacessibleType() {
                     "package test;",
                     "",
                     GENERATED_ANNOTATION,
-                    "final class DaggerRequestsSubtypeAsProvider",
+                    "public final class DaggerRequestsSubtypeAsProvider",
                     "    implements RequestsSubtypeAsProvider {")
                 .addLinesIn(
                     DEFAULT_MODE,
@@ -904,7 +904,7 @@ public void providerWhenBindsScopeGreaterThanDependencyScope() {
                     "package test;",
                     "",
                     GENERATED_ANNOTATION,
-                    "final class DaggerTestComponent implements TestComponent {")
+                    "public final class DaggerTestComponent implements TestComponent {")
                 .addLinesIn(
                     DEFAULT_MODE,
                     "  private Provider<String> provideStringProvider;",
diff --git a/javatests/dagger/internal/codegen/ElidedFactoriesTest.java b/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
index 58ddb826a..f8a9ab554 100644
--- a/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
+++ b/javatests/dagger/internal/codegen/ElidedFactoriesTest.java
@@ -85,7 +85,7 @@ public void simpleComponent() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerSimpleComponent implements SimpleComponent {",
+            "public final class DaggerSimpleComponent implements SimpleComponent {",
             "  private DaggerSimpleComponent() {}",
             "",
             "  public static Builder builder() {",
@@ -101,7 +101,7 @@ public void simpleComponent() {
             "    return new DependsOnInjected(new InjectedType());",
             "  }",
             "",
-            "  static final class Builder {",
+            "  public static final class Builder {",
             "    private Builder() {",
             "    }",
             "",
@@ -186,7 +186,7 @@ public void simpleComponent_injectsProviderOf_dependsOnScoped() {
                 "import javax.inject.Provider;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerSimpleComponent implements SimpleComponent {",
+                "public final class DaggerSimpleComponent implements SimpleComponent {",
                 "  private volatile Object scopedType = new MemoizedSentinel();",
                 "  private volatile Provider<DependsOnScoped> dependsOnScopedProvider;",
                 "",
@@ -232,7 +232,7 @@ public void simpleComponent_injectsProviderOf_dependsOnScoped() {
                 "    return new NeedsProvider(getDependsOnScopedProvider());",
                 "  }",
                 "",
-                "  static final class Builder {",
+                "  public static final class Builder {",
                 "    private Builder() {}",
                 "",
                 "    public SimpleComponent build() {",
@@ -268,7 +268,7 @@ public void simpleComponent_injectsProviderOf_dependsOnScoped() {
                 "import javax.inject.Provider;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerSimpleComponent implements SimpleComponent {",
+                "public final class DaggerSimpleComponent implements SimpleComponent {",
                 "  private Provider<ScopedType> scopedTypeProvider;",
                 "  private Provider<DependsOnScoped> dependsOnScopedProvider;",
                 "",
@@ -296,7 +296,7 @@ public void simpleComponent_injectsProviderOf_dependsOnScoped() {
                 "    return new NeedsProvider(dependsOnScopedProvider);",
                 "  }",
                 "",
-                "  static final class Builder {",
+                "  public static final class Builder {",
                 "    private Builder() {",
                 "    }",
                 "",
@@ -380,7 +380,7 @@ public void scopedBinding_onlyUsedInSubcomponent() {
                 IMPORT_GENERATED_ANNOTATION,
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerSimpleComponent implements SimpleComponent {",
+                "public final class DaggerSimpleComponent implements SimpleComponent {",
                 "  private volatile Object scopedType = new MemoizedSentinel();",
                 "",
                 "  private DaggerSimpleComponent() {}",
@@ -412,7 +412,7 @@ public void scopedBinding_onlyUsedInSubcomponent() {
                 "    return new SubImpl();",
                 "  }",
                 "",
-                "  static final class Builder {",
+                "  public static final class Builder {",
                 "    private Builder() {}",
                 "",
                 "    public SimpleComponent build() {",
@@ -441,7 +441,7 @@ public void scopedBinding_onlyUsedInSubcomponent() {
                 "import javax.inject.Provider;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerSimpleComponent implements SimpleComponent {",
+                "public final class DaggerSimpleComponent implements SimpleComponent {",
                 "  private Provider<ScopedType> scopedTypeProvider;",
                 "",
                 "  private DaggerSimpleComponent() {",
@@ -466,7 +466,7 @@ public void scopedBinding_onlyUsedInSubcomponent() {
                 "    return new SubImpl();",
                 "  }",
                 "",
-                "  static final class Builder {",
+                "  public static final class Builder {",
                 "    private Builder() {}",
                 "",
                 "    public SimpleComponent build() {",
diff --git a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
index ad48712ec..4cb93a9cb 100644
--- a/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingComponentProcessorTest.java
@@ -129,7 +129,7 @@ public void mapBindingsWithEnumKey() {
                 "package test;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {",
+                "public final class DaggerTestComponent implements TestComponent {",
                 "  private final MapModuleOne mapModuleOne;",
                 "  private final MapModuleTwo mapModuleTwo;",
                 "  private volatile Provider<Handler> provideAdminHandlerProvider;",
@@ -206,7 +206,7 @@ public void mapBindingsWithEnumKey() {
                 "package test;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {",
+                "public final class DaggerTestComponent implements TestComponent {",
                 "  private Provider<Handler> provideAdminHandlerProvider;",
                 "  private Provider<Handler> provideLoginHandlerProvider;",
                 "  private Provider<Map<PathEnum, Provider<Handler>>>",
@@ -358,7 +358,7 @@ public void mapBindingsWithInaccessibleKeys() {
                 "package test;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {",
+                "public final class DaggerTestComponent implements TestComponent {",
                 "  private Provider<Map<Class<?>, Integer>> mapOfClassOfAndIntegerProvider;",
                 "",
                 "  @SuppressWarnings(\"rawtypes\")",
@@ -537,7 +537,7 @@ public void mapBindingsWithStringKey() {
                 "package test;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {",
+                "public final class DaggerTestComponent implements TestComponent {",
                 "  private final MapModuleOne mapModuleOne;",
                 "  private final MapModuleTwo mapModuleTwo;",
                 "  private volatile Provider<Handler> provideAdminHandlerProvider;",
@@ -614,7 +614,7 @@ public void mapBindingsWithStringKey() {
                 "package test;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {",
+                "public final class DaggerTestComponent implements TestComponent {",
                 "  private Provider<Handler> provideAdminHandlerProvider;",
                 "  private Provider<Handler> provideLoginHandlerProvider;",
                 "  private Provider<Map<String, Provider<Handler>>>",
@@ -738,7 +738,7 @@ public void mapBindingsWithWrappedKey() {
                 "package test;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {",
+                "public final class DaggerTestComponent implements TestComponent {",
                 "  private final MapModuleOne mapModuleOne;",
                 "  private final MapModuleTwo mapModuleTwo;",
                 "  private volatile Provider<Handler> provideAdminHandlerProvider;",
@@ -824,7 +824,7 @@ public void mapBindingsWithWrappedKey() {
                 "package test;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {",
+                "public final class DaggerTestComponent implements TestComponent {",
                 "  private Provider<Handler> provideAdminHandlerProvider;",
                 "  private Provider<Handler> provideLoginHandlerProvider;",
                 "  private Provider<Map<WrappedClassKey, Provider<Handler>>>",
@@ -952,7 +952,7 @@ public void mapBindingsWithNonProviderValue() {
                 "package test;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {",
+                "public final class DaggerTestComponent implements TestComponent {",
                 "  private final MapModuleOne mapModuleOne;",
                 "  private final MapModuleTwo mapModuleTwo;",
                 "  private volatile Provider<Map<PathEnum, Handler>>",
@@ -1003,7 +1003,7 @@ public void mapBindingsWithNonProviderValue() {
                 "package test;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {",
+                "public final class DaggerTestComponent implements TestComponent {",
                 "  private Provider<Handler> provideAdminHandlerProvider;",
                 "  private Provider<Handler> provideLoginHandlerProvider;",
                 "  private Provider<Map<PathEnum, Handler>> mapOfPathEnumAndHandlerProvider;",
@@ -1081,7 +1081,7 @@ public void injectMapWithoutMapBinding() {
             "package test;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerTestComponent implements TestComponent {",
+            "public final class DaggerTestComponent implements TestComponent {",
             "  private final MapModule mapModule;",
             "",
             "  @Override",
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
index 11f6bc13c..174ada87c 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionTest.java
@@ -93,7 +93,7 @@ public void mapBindings() {
                 "import dagger.internal.MapBuilder;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {")
+                "public final class DaggerTestComponent implements TestComponent {")
             .addLinesIn(
                 FAST_INIT_MODE,
                 "  private volatile Provider<Integer> provideIntProvider;",
@@ -275,7 +275,7 @@ public void inaccessible() {
             "import other.UsesInaccessible_Factory;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerTestComponent implements TestComponent {",
+            "public final class DaggerTestComponent implements TestComponent {",
             "  @Override",
             "  public UsesInaccessible usesInaccessible() {",
             "    return UsesInaccessible_Factory.newInstance(",
@@ -338,7 +338,7 @@ public void subcomponentOmitsInheritedBindings() {
             "package test;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerParent implements Parent {",
+            "public final class DaggerParent implements Parent {",
             "  private final ParentModule parentModule;",
             "",
             "  private final class ChildImpl implements Child {",
diff --git a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
index aa1a715aa..b8b63c03d 100644
--- a/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/MapBindingExpressionWithGuavaTest.java
@@ -129,7 +129,7 @@ public void mapBindings() {
                 "package test;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {")
+                "public final class DaggerTestComponent implements TestComponent {")
             .addLinesIn(
                 FAST_INIT_MODE,
                 "  private volatile Provider<Integer> provideIntProvider;",
@@ -404,7 +404,7 @@ public void inaccessible() {
             "import other.UsesInaccessible_Factory;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerTestComponent implements TestComponent {",
+            "public final class DaggerTestComponent implements TestComponent {",
             "  @Override",
             "  public UsesInaccessible usesInaccessible() {",
             "    return UsesInaccessible_Factory.newInstance((Map) ImmutableMap.of());",
@@ -467,7 +467,7 @@ public void subcomponentOmitsInheritedBindings() {
             "package test;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerParent implements Parent {",
+            "public final class DaggerParent implements Parent {",
             "  private final ParentModule parentModule;",
             "",
             "  private final class ChildImpl implements Child {",
@@ -523,7 +523,7 @@ public void productionComponents() {
             "import dagger.producers.internal.CancellationListener;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerTestComponent implements TestComponent, "
+            "public final class DaggerTestComponent implements TestComponent, "
                 + "CancellationListener {",
             "  @Override",
             "  public ListenableFuture<Map<String, String>> stringMap() {",
diff --git a/javatests/dagger/internal/codegen/MembersInjectionTest.java b/javatests/dagger/internal/codegen/MembersInjectionTest.java
index edaedaf19..88a7706ed 100644
--- a/javatests/dagger/internal/codegen/MembersInjectionTest.java
+++ b/javatests/dagger/internal/codegen/MembersInjectionTest.java
@@ -88,7 +88,7 @@ public void parentClass_noInjectedMembers() {
             "package test;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerTestComponent implements TestComponent {",
+            "public final class DaggerTestComponent implements TestComponent {",
             "  @Override",
             "  public Child child() {",
             "    return new Child();",
@@ -148,7 +148,7 @@ public void parentClass_injectedMembersInSupertype() {
             "import com.google.errorprone.annotations.CanIgnoreReturnValue;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerTestComponent implements TestComponent {",
+            "public final class DaggerTestComponent implements TestComponent {",
             "  @Override",
             "  public Child child() {",
             "    return injectChild(Child_Factory.newInstance());",
@@ -1277,7 +1277,7 @@ public void accessibility() {
             "import other.UsesInaccessible_Factory;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerTestComponent implements TestComponent {",
+            "public final class DaggerTestComponent implements TestComponent {",
             "  private Object getInaccessible() {",
             "    return injectInaccessible(Inaccessible_Factory.newInstance());",
             "  }",
@@ -1376,7 +1376,7 @@ public void accessibleRawType_ofInaccessibleType() {
                 "import other.UsesInaccessibles_MembersInjector;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {")
+                "public final class DaggerTestComponent implements TestComponent {")
             .addLinesIn(
                 FAST_INIT_MODE,
                 "  private volatile Object listOfInaccessible = new MemoizedSentinel();",
@@ -1506,7 +1506,7 @@ public void publicSupertypeHiddenSubtype() {
             "import other.Supertype_MembersInjector;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerTestComponent implements TestComponent {",
+            "public final class DaggerTestComponent implements TestComponent {",
             "  private Object getSubtype() {",
             "    return injectSubtype(Subtype_Factory.newInstance());",
             "  }",
diff --git a/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
index b76516616..731873550 100644
--- a/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/OptionalBindingRequestFulfillmentTest.java
@@ -111,7 +111,7 @@ public void inlinedOptionalBindings() {
                 "import com.google.common.base.Optional;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {")
+                "public final class DaggerTestComponent implements TestComponent {")
             .addLinesIn(
                 FAST_INIT_MODE,
                 "  private volatile Provider<Maybe> provideMaybeProvider;",
@@ -251,7 +251,8 @@ public void requestForFuture() {
             "import dagger.producers.internal.CancellationListener;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerTestComponent implements TestComponent, CancellationListener {",
+            "public final class DaggerTestComponent implements TestComponent, "
+                + "CancellationListener {",
             "  @Override",
             "  public ListenableFuture<Optional<Maybe>> maybe() {",
             "    return Futures.immediateFuture(",
diff --git a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
index 4568ca04d..8c29e5005 100644
--- a/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
+++ b/javatests/dagger/internal/codegen/ProductionComponentProcessorTest.java
@@ -249,7 +249,7 @@ public void simpleComponent() {
                 "import javax.inject.Provider;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestClass_SimpleComponent",
+                "public final class DaggerTestClass_SimpleComponent",
                 "    implements TestClass.SimpleComponent, CancellationListener {",
                 "  private final TestClass.BModule bModule;",
                 "  private volatile Object productionImplementationExecutor =",
@@ -374,7 +374,7 @@ public void simpleComponent() {
                 "    Producers.cancel(bProducer, mayInterruptIfRunning);",
                 "  }",
                 "",
-                "  static final class Builder {",
+                "  public static final class Builder {",
                 "    private TestClass.AModule aModule;",
                 "    private TestClass.BModule bModule;",
                 "",
@@ -444,7 +444,7 @@ public void simpleComponent() {
                 "import javax.inject.Provider;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestClass_SimpleComponent",
+                "public final class DaggerTestClass_SimpleComponent",
                 "    implements TestClass.SimpleComponent, CancellationListener {",
                 "  private Producer<TestClass.A> aEntryPoint;",
                 "  private Provider<Executor> executorProvider;",
@@ -506,7 +506,7 @@ public void simpleComponent() {
                 "    Producers.cancel(bProducer, mayInterruptIfRunning);",
                 "  }",
                 "",
-                "  static final class Builder {",
+                "  public static final class Builder {",
                 "    private TestClass.AModule aModule;",
                 "    private TestClass.BModule bModule;",
                 "",
@@ -652,7 +652,7 @@ public void productionScope_injectConstructor() {
                 .addLines(
                     "package test;",
                     GENERATED_ANNOTATION,
-                    "final class DaggerParent implements Parent, CancellationListener {",
+                    "public final class DaggerParent implements Parent, CancellationListener {",
                     "  private final class ChildImpl implements Child, CancellationListener {",
                     "    @Override",
                     "    public ProductionScoped productionScoped() {")
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
index 3fb0e9c7a..890ceb804 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentTest.java
@@ -97,7 +97,7 @@ public void setBindings() {
             "import dagger.internal.SetBuilder;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerTestComponent implements TestComponent {",
+            "public final class DaggerTestComponent implements TestComponent {",
             "  @Override",
             "  public Set<String> strings() {",
             "    return SetBuilder.<String>newSetBuilder(2)",
@@ -192,7 +192,7 @@ public void inaccessible() {
             "import other.UsesInaccessible_Factory;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerTestComponent implements TestComponent {",
+            "public final class DaggerTestComponent implements TestComponent {",
             "  private Set getSetOfInaccessible2() {",
             "    return SetBuilder.newSetBuilder(1)",
             "        .addAll(TestModule_EmptySetFactory.emptySet())",
@@ -267,7 +267,7 @@ public void subcomponentOmitsInheritedBindings() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerParent implements Parent {",
+            "public final class DaggerParent implements Parent {",
             "  private DaggerParent() {}",
             "",
             "  public static Builder builder() {",
@@ -283,7 +283,7 @@ public void subcomponentOmitsInheritedBindings() {
             "    return new ChildImpl();",
             "  }",
             "",
-            "  static final class Builder {",
+            "  public static final class Builder {",
             "    private Builder() {}",
             "",
             "    @Deprecated",
diff --git a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
index 7a4739385..d39e60b8d 100644
--- a/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
+++ b/javatests/dagger/internal/codegen/SetBindingRequestFulfillmentWithGuavaTest.java
@@ -100,7 +100,7 @@ public void setBindings() {
             "import com.google.common.collect.ImmutableSet;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerTestComponent implements TestComponent {",
+            "public final class DaggerTestComponent implements TestComponent {",
             "  @Override",
             "  public Set<String> strings() {",
             "    return ImmutableSet.<String>builderWithExpectedSize(2)",
@@ -204,7 +204,7 @@ public void inaccessible() {
             "import other.UsesInaccessible_Factory;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerTestComponent implements TestComponent {",
+            "public final class DaggerTestComponent implements TestComponent {",
             "  private Set getSetOfInaccessible2() {",
             "    return ImmutableSet.copyOf(TestModule_EmptySetFactory.emptySet());",
             "  }",
@@ -275,7 +275,7 @@ public void subcomponentOmitsInheritedBindings() {
             "import com.google.common.collect.ImmutableSet;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerParent implements Parent {",
+            "public final class DaggerParent implements Parent {",
             "  private final class ChildImpl implements Child {",
             "    @Override",
             "    public Set<Object> objectSet() {",
@@ -334,7 +334,7 @@ public void productionComponents() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerTestComponent implements TestComponent, "
+            "public final class DaggerTestComponent implements TestComponent, "
                 + "CancellationListener {",
             "  private DaggerTestComponent() {}",
             "",
@@ -359,7 +359,7 @@ public void productionComponents() {
             "  @Override",
             "  public void onProducerFutureCancelled(boolean mayInterruptIfRunning) {}",
             "",
-            "  static final class Builder {",
+            "  public static final class Builder {",
             "    private Builder() {}",
             "",
             "    public TestComponent build() {",
diff --git a/javatests/dagger/internal/codegen/SubcomponentCreatorRequestFulfillmentTest.java b/javatests/dagger/internal/codegen/SubcomponentCreatorRequestFulfillmentTest.java
index de0067f4a..d02676f37 100644
--- a/javatests/dagger/internal/codegen/SubcomponentCreatorRequestFulfillmentTest.java
+++ b/javatests/dagger/internal/codegen/SubcomponentCreatorRequestFulfillmentTest.java
@@ -101,7 +101,7 @@ public void testInlinedSubcomponentCreators_componentMethod() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerC implements C {",
+            "public final class DaggerC implements C {",
             "  @Override",
             "  public Sub.Builder sBuilder() {",
             "    return new SubBuilder();",
diff --git a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
index ad08160c5..66ae11fdf 100644
--- a/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
+++ b/javatests/dagger/internal/codegen/SubcomponentValidationTest.java
@@ -464,7 +464,7 @@ public void delegateFactoryNotCreatedForSubcomponentWhenProviderExistsInParent()
                 "package test;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerParentComponent implements ParentComponent {")
+                "public final class DaggerParentComponent implements ParentComponent {")
             .addLinesIn(
                 DEFAULT_MODE,
                 "  @SuppressWarnings(\"unchecked\")",
@@ -664,7 +664,7 @@ public void multipleSubcomponentsWithSameSimpleNamesCanExistInSameComponent() {
             "import test.subpackage.Sub;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerParentComponent implements ParentComponent {",
+            "public final class DaggerParentComponent implements ParentComponent {",
             "  @Override",
             "  public Foo.Sub newInstanceSubcomponent() {",
             "    return new F_SubImpl();",
@@ -675,7 +675,7 @@ public void multipleSubcomponentsWithSameSimpleNamesCanExistInSameComponent() {
             "    return new NoConflictImpl();",
             "  }",
             "",
-            "  static final class Builder {",
+            "  public static final class Builder {",
             "    public ParentComponent build() {",
             "      return new DaggerParentComponent();",
             "    }",
@@ -747,13 +747,13 @@ public void subcomponentSimpleNamesDisambiguated() {
             "package test;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerParentComponent implements ParentComponent {",
+            "public final class DaggerParentComponent implements ParentComponent {",
             "  @Override",
             "  public Sub newSubcomponent() {",
             "    return new t_SubImpl();",
             "  }",
             "",
-            "  static final class Builder {",
+            "  public static final class Builder {",
             "    public ParentComponent build() {",
             "      return new DaggerParentComponent();",
             "    }",
@@ -812,7 +812,7 @@ public void subcomponentSimpleNamesDisambiguatedInRoot() {
             "DaggerParentComponent",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerParentComponent implements ParentComponent {",
+            "public final class DaggerParentComponent implements ParentComponent {",
             "  @Override",
             "  public Sub newSubcomponent() {",
             "    return new $_SubImpl();",
@@ -889,7 +889,7 @@ public void subcomponentImplNameUsesFullyQualifiedClassNameIfNecessary() {
             "import top1.a.b.c.d.E;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerParentComponent implements ParentComponent {",
+            "public final class DaggerParentComponent implements ParentComponent {",
             "  @Override",
             "  public E.F.Sub top1() {",
             "    return new F_SubImpl();",
@@ -946,7 +946,7 @@ public void parentComponentNameShouldNotBeDisambiguatedWhenItConflictsWithASubco
             "package test;",
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerC implements C {",
+            "public final class DaggerC implements C {",
             "  @Override",
             "  public Foo.C newInstanceC() {",
             "    return new F_CImpl();",
@@ -1008,7 +1008,7 @@ public void subcomponentBuilderNamesShouldNotConflict() {
             IMPORT_GENERATED_ANNOTATION,
             "",
             GENERATED_ANNOTATION,
-            "final class DaggerC implements C {",
+            "public final class DaggerC implements C {",
             "  @Override",
             "  public C.Foo.Sub.Builder fooBuilder() {",
             "    return new F_SubBuilder();",
diff --git a/javatests/dagger/internal/codegen/SwitchingProviderTest.java b/javatests/dagger/internal/codegen/SwitchingProviderTest.java
index 2898f2e43..932daf4a3 100644
--- a/javatests/dagger/internal/codegen/SwitchingProviderTest.java
+++ b/javatests/dagger/internal/codegen/SwitchingProviderTest.java
@@ -69,7 +69,7 @@ public void switchingProviderTest() {
             "test.DaggerTestComponent",
                 "package test;",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {",
+                "public final class DaggerTestComponent implements TestComponent {",
                 "  private final class SwitchingProvider<T> implements Provider<T> {",
                 "    @SuppressWarnings(\"unchecked\")",
                 "    private T get0() {",
@@ -249,7 +249,7 @@ public void unscopedBinds() {
                 "package test;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {",
+                "public final class DaggerTestComponent implements TestComponent {",
                 "  private volatile Provider<String> sProvider;",
                 "",
                 "  private Provider<String> getStringProvider() {",
@@ -334,7 +334,7 @@ public void scopedBinds() {
                 "package test;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {",
+                "public final class DaggerTestComponent implements TestComponent {",
                 "  private volatile Object charSequence = new MemoizedSentinel();",
                 "  private volatile Provider<CharSequence> cProvider;",
                 "",
@@ -425,7 +425,7 @@ public void emptyMultibindings_avoidSwitchProviders() {
                 "package test;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {",
+                "public final class DaggerTestComponent implements TestComponent {",
                 "  @Override",
                 "  public Provider<Set<String>> setProvider() {",
                 "    return SetFactory.<String>empty();",
@@ -470,7 +470,7 @@ public void memberInjectors() {
                 "package test;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {",
+                "public final class DaggerTestComponent implements TestComponent {",
                 "  private Provider<MembersInjector<Foo>> fooMembersInjectorProvider;",
                 "",
                 "  @SuppressWarnings(\"unchecked\")",
@@ -541,7 +541,7 @@ public void optionals() {
                 "package test;",
                 "",
                 GENERATED_ANNOTATION,
-                "final class DaggerTestComponent implements TestComponent {",
+                "public final class DaggerTestComponent implements TestComponent {",
                 "  @SuppressWarnings(\"rawtypes\")",
                 "  private static final Provider ABSENT_JDK_OPTIONAL_PROVIDER =",
                 "      InstanceFactory.create(Optional.empty());",
