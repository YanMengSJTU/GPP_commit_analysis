diff --git a/java/dagger/internal/codegen/bindinggraphvalidation/DependencyCycleValidator.java b/java/dagger/internal/codegen/bindinggraphvalidation/DependencyCycleValidator.java
index 5e2aa0cd0..8e37efb99 100644
--- a/java/dagger/internal/codegen/bindinggraphvalidation/DependencyCycleValidator.java
+++ b/java/dagger/internal/codegen/bindinggraphvalidation/DependencyCycleValidator.java
@@ -34,6 +34,7 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
 import com.google.common.graph.EndpointPair;
+import com.google.common.graph.Graphs;
 import com.google.common.graph.ImmutableNetwork;
 import com.google.common.graph.MutableNetwork;
 import com.google.common.graph.NetworkBuilder;
@@ -76,6 +77,10 @@ public String pluginName() {
   public void visitGraph(BindingGraph bindingGraph, DiagnosticReporter diagnosticReporter) {
     ImmutableNetwork<Node, DependencyEdge> dependencyGraph =
         nonCycleBreakingDependencyGraph(bindingGraph);
+    // First check the graph for a cycle. If there is one, then we'll do more work to report where.
+    if (!Graphs.hasCycle(dependencyGraph)) {
+      return;
+    }
     // Check each endpoint pair only once, no matter how many parallel edges connect them.
     Set<EndpointPair<Node>> dependencyEndpointPairs = dependencyGraph.asGraph().edges();
     Set<EndpointPair<Node>> visited = newHashSetWithExpectedSize(dependencyEndpointPairs.size());
