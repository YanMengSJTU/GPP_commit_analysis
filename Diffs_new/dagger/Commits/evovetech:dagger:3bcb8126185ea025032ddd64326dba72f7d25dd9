diff --git a/java/dagger/android/processor/AndroidInjectorDescriptor.java b/java/dagger/android/processor/AndroidInjectorDescriptor.java
index 4c4b6379d..1deb3c3fd 100644
--- a/java/dagger/android/processor/AndroidInjectorDescriptor.java
+++ b/java/dagger/android/processor/AndroidInjectorDescriptor.java
@@ -33,7 +33,9 @@
 import com.squareup.javapoet.TypeName;
 import dagger.Module;
 import dagger.android.ContributesAndroidInjector;
+import java.lang.annotation.Annotation;
 import java.util.List;
+import java.util.Map;
 import java.util.Optional;
 import javax.annotation.processing.Messager;
 import javax.inject.Qualifier;
@@ -64,6 +66,9 @@
    */
   abstract ClassName frameworkType();
 
+  /** The {@link dagger.MapKey} type for the associated {@link #frameworkType()}. */
+  abstract ClassName mapKeyType();
+
   /** Scopes to apply to the generated {@link dagger.Subcomponent}. */
   abstract ImmutableSet<AnnotationSpec> scopes();
 
@@ -76,20 +81,6 @@
   /** Simple name of the {@link ContributesAndroidInjector} method. */
   abstract String methodName();
 
-  /**
-   * The {@link dagger.MapKey} annotation that groups {@link #frameworkType()}s, e.g.
-   * {@code @ActivityKey(MyActivity.class)}.
-   */
-  AnnotationSpec mapKeyAnnotation() {
-    String packageName =
-        frameworkType().packageName().contains(".support.")
-            ? "dagger.android.support"
-            : "dagger.android";
-    return AnnotationSpec.builder(ClassName.get(packageName, frameworkType().simpleName() + "Key"))
-        .addMember("value", "$T.class", injectedType())
-        .build();
-  }
-
   @AutoValue.Builder
   abstract static class Builder {
     abstract Builder injectedType(ClassName injectedType);
@@ -100,6 +91,8 @@ AnnotationSpec mapKeyAnnotation() {
 
     abstract Builder frameworkType(ClassName frameworkType);
 
+    abstract Builder mapKeyType(ClassName mapKeyType);
+
     abstract Builder enclosingModule(ClassName enclosingModule);
 
     abstract Builder methodName(String methodName);
@@ -142,14 +135,19 @@ AnnotationSpec mapKeyAnnotation() {
       builder.enclosingModule(ClassName.get(enclosingElement));
 
       TypeMirror injectedType = method.getReturnType();
-      Optional<TypeMirror> maybeFrameworkType =
+      Optional<? extends Class<? extends Annotation>> maybeMapKeyAnnotation =
           annotationsAndFrameworkTypes(elements)
-              .values()
+              .entrySet()
               .stream()
-              .filter(frameworkType -> types.isAssignable(injectedType, frameworkType))
+              .filter(entry -> types.isAssignable(injectedType, entry.getValue()))
+              .map(Map.Entry::getKey)
               .findFirst();
-      if (maybeFrameworkType.isPresent()) {
-        builder.frameworkType((ClassName) TypeName.get(maybeFrameworkType.get()));
+      if (maybeMapKeyAnnotation.isPresent()) {
+        Class<? extends Annotation> mapKeyAnnotation = maybeMapKeyAnnotation.get();
+        TypeMirror frameworkType = annotationsAndFrameworkTypes(elements).get(mapKeyAnnotation);
+        builder
+            .mapKeyType(ClassName.get(mapKeyAnnotation))
+            .frameworkType((ClassName) TypeName.get(frameworkType));
         if (MoreTypes.asDeclared(injectedType).getTypeArguments().isEmpty()) {
           builder.injectedType(ClassName.get(MoreTypes.asTypeElement(injectedType)));
         } else {
diff --git a/java/dagger/android/processor/ContributesAndroidInjectorGenerator.java b/java/dagger/android/processor/ContributesAndroidInjectorGenerator.java
index 5bf5d007f..2d1023abc 100644
--- a/java/dagger/android/processor/ContributesAndroidInjectorGenerator.java
+++ b/java/dagger/android/processor/ContributesAndroidInjectorGenerator.java
@@ -131,7 +131,10 @@ private MethodSpec bindAndroidInjectorFactory(
     return methodBuilder("bindAndroidInjectorFactory")
         .addAnnotation(Binds.class)
         .addAnnotation(IntoMap.class)
-        .addAnnotation(descriptor.mapKeyAnnotation())
+        .addAnnotation(
+            AnnotationSpec.builder(descriptor.mapKeyType())
+                .addMember("value", "$T.class", descriptor.injectedType())
+                .build())
         .addModifiers(ABSTRACT)
         .returns(
             parameterizedTypeName(
