diff --git a/java/dagger/internal/codegen/BindingDeclaration.java b/java/dagger/internal/codegen/BindingDeclaration.java
index ef19c6090..f85cd2194 100644
--- a/java/dagger/internal/codegen/BindingDeclaration.java
+++ b/java/dagger/internal/codegen/BindingDeclaration.java
@@ -31,7 +31,7 @@
    * The {@link Element} that declares the binding. Absent for bindings without identifying
    * declarations.
    */
-  abstract Optional<? extends Element> bindingElement();
+  abstract Optional<Element> bindingElement();
 
   /**
    * The type enclosing the {@link #bindingElement()}, or {@link Optional#empty()} if {@link
diff --git a/java/dagger/internal/codegen/DelegateDeclaration.java b/java/dagger/internal/codegen/DelegateDeclaration.java
index 3a99feba9..d0ae32b67 100644
--- a/java/dagger/internal/codegen/DelegateDeclaration.java
+++ b/java/dagger/internal/codegen/DelegateDeclaration.java
@@ -31,6 +31,7 @@
 import java.util.Optional;
 import javax.inject.Inject;
 import javax.lang.model.element.AnnotationMirror;
+import javax.lang.model.element.Element;
 import javax.lang.model.element.ExecutableElement;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.ExecutableType;
@@ -41,9 +42,6 @@
  */
 @AutoValue
 abstract class DelegateDeclaration extends BindingDeclaration implements HasContributionType {
-  @Override
-  abstract Optional<ExecutableElement> bindingElement();
-
   abstract DependencyRequest delegateRequest();
 
   abstract Optional<Equivalence.Wrapper<AnnotationMirror>> wrappedMapKey();
@@ -73,8 +71,8 @@ DelegateDeclaration create(
       return new AutoValue_DelegateDeclaration(
           ContributionType.fromBindingMethod(bindsMethod),
           keyFactory.forBindsMethod(bindsMethod, contributingModule),
+          Optional.<Element>of(bindsMethod),
           Optional.of(contributingModule),
-          Optional.of(bindsMethod),
           delegateRequest,
           wrapOptionalInEquivalence(getMapKey(bindsMethod)));
     }
diff --git a/java/dagger/internal/codegen/MembersInjectionBinding.java b/java/dagger/internal/codegen/MembersInjectionBinding.java
index 2b6c94040..b3e21edaf 100644
--- a/java/dagger/internal/codegen/MembersInjectionBinding.java
+++ b/java/dagger/internal/codegen/MembersInjectionBinding.java
@@ -37,7 +37,7 @@
 @AutoValue
 abstract class MembersInjectionBinding extends Binding {
   @Override
-  public Optional<TypeElement> bindingElement() {
+  public final Optional<Element> bindingElement() {
     return Optional.of(membersInjectedType());
   }
 
diff --git a/java/dagger/internal/codegen/SubcomponentDeclaration.java b/java/dagger/internal/codegen/SubcomponentDeclaration.java
index dad6bbeb0..e2bee5c8a 100644
--- a/java/dagger/internal/codegen/SubcomponentDeclaration.java
+++ b/java/dagger/internal/codegen/SubcomponentDeclaration.java
@@ -28,7 +28,7 @@
 import java.util.Optional;
 import javax.inject.Inject;
 import javax.lang.model.element.AnnotationMirror;
-import javax.lang.model.element.ExecutableElement;
+import javax.lang.model.element.Element;
 import javax.lang.model.element.TypeElement;
 
 /**
@@ -44,9 +44,6 @@
   @Override
   public abstract Key key();
 
-  @Override
-  abstract Optional<ExecutableElement > bindingElement();
-
   /**
    * The type element that defines the {@link dagger.Subcomponent} or {@link
    * dagger.producers.ProductionSubcomponent} for this declaration.
@@ -66,16 +63,16 @@
     ImmutableSet<SubcomponentDeclaration> forModule(TypeElement module) {
       ImmutableSet.Builder<SubcomponentDeclaration> declarations = ImmutableSet.builder();
       AnnotationMirror moduleAnnotation = getModuleAnnotation(module).get();
-      ExecutableElement subcomponentAttribute =
+      Element subcomponentAttribute =
           getAnnotationElementAndValue(moduleAnnotation, "subcomponents").getKey();
       for (TypeElement subcomponent :
           MoreTypes.asTypeElements(getModuleSubcomponents(moduleAnnotation))) {
         declarations.add(
             new AutoValue_SubcomponentDeclaration(
+                Optional.of(subcomponentAttribute),
                 Optional.of(module),
                 keyFactory.forSubcomponentBuilder(
                     getSubcomponentBuilder(subcomponent).get().asType()),
-                Optional.of(subcomponentAttribute),
                 subcomponent,
                 moduleAnnotation));
       }
diff --git a/java/dagger/model/Binding.java b/java/dagger/model/Binding.java
index 3e0cad0ab..0b0eed1be 100644
--- a/java/dagger/model/Binding.java
+++ b/java/dagger/model/Binding.java
@@ -46,11 +46,7 @@
    * contribute a synthetic binding, but since multiple {@code @Multibinds} methods can coexist in
    * the same component (and contribute to one single binding), it has no binding element.
    */
-  // TODO(ronshapiro): examine whether this wildcard+bound have any benefit. In the processor code,
-  // we never actually refer to the overridden bindingElement methods directly in a way which needs
-  // anything more than an Element. Removing the wildcard would allow for simpler user-written code
-  // when the binding element is passed to a method.
-  Optional<? extends Element> bindingElement();
+  Optional<Element> bindingElement();
 
   /**
    * The {@link TypeElement} of the module which contributes this binding. Absent for bindings that
