diff --git a/multibindings.md b/multibindings.md
index 14bca2fb0..4cc2020de 100644
--- a/multibindings.md
+++ b/multibindings.md
@@ -39,7 +39,7 @@ that returns a subset and is annotated with [`@Provides(type = SET_VALUES)`]:
 class MyModuleB {
   @Provides(type = SET_VALUES)
   static Set<String> provideSomeStrings(DepA depA, DepB depB) {
-    return new HashSet<Foo>(Arrays.asList("DEF", "GHI"));
+    return new HashSet<String>(Arrays.asList("DEF", "GHI"));
   }
 }
 ```
@@ -48,10 +48,10 @@ Now a binding in that component can depend on the set:
 
 ```java
 class Bar {
-  @Inject Bar(Set<Foo> foos) {
-    assert foos.contains("ABC");
-    assert foos.contains("DEF");
-    assert foos.contains("GHI");
+  @Inject Bar(Set<String> strings) {
+    assert strings.contains("ABC");
+    assert strings.contains("DEF");
+    assert strings.contains("GHI");
   }
 }
 ```
@@ -61,12 +61,12 @@ Or the component can provide the set:
 ```java
 @Component(modules = {MyModuleA.class, MyModuleB.class})
 interface MyComponent {
-  Set<Foo> foos();
+  Set<String> strings();
 }
 
 @Test void testMyComponent() {
   MyComponent myComponent = DaggerMyComponent.create();
-  assertThat(myComponent.foos()).containsExactly("ABC", "DEF", "GHI");
+  assertThat(myComponent.strings()).containsExactly("ABC", "DEF", "GHI");
 }
 ```
 
