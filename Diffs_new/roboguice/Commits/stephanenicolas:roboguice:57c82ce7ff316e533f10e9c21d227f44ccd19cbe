diff --git a/afterburner/src/main/java/afterburner/PostProcessor.java b/afterburner/src/main/java/afterburner/PostProcessor.java
index b3167b085..aa5f7545a 100644
--- a/afterburner/src/main/java/afterburner/PostProcessor.java
+++ b/afterburner/src/main/java/afterburner/PostProcessor.java
@@ -17,6 +17,7 @@
 import roboguice.inject.InjectFragment;
 import roboguice.inject.InjectView;
 import android.app.Activity;
+import android.app.Fragment;
 
 import com.github.drochetti.javassist.maven.ClassTransformer;
 
@@ -25,40 +26,41 @@
     @Override
     protected void applyTransformations(final CtClass classToTransform) throws Exception {
         // Actually you must test if it exists, but it's just an example...
-        System.out.println("Analysing "+classToTransform);
+        getLogger().debug("Analysing "+classToTransform);
         injectStuffInClass(classToTransform);
     }
 
+    @Override
+    protected boolean filter(CtClass candidateClass) throws Exception {
+        boolean isActivity = candidateClass.subclassOf(ClassPool.getDefault().get(Activity.class.getName()));
+        boolean hasAfterBurner = checkIfAfterBurnerAlreadyActive(candidateClass);
+
+        return isActivity && !hasAfterBurner;
+    }    
+
     private void injectStuffInClass(final CtClass classToTransform) throws NotFoundException, ClassNotFoundException, CannotCompileException {
-        boolean isActivity = classToTransform.subclassOf(ClassPool.getDefault().get(Activity.class.getName()));
-        boolean hasAfterBurner = checkIfAfterBurnerAlreadyActive(classToTransform);
-        if( isActivity && !hasAfterBurner ) {
-            int layoutId = getLayoutId(classToTransform);
-            final List<CtField> views = getAllInjectedFieldsForAnnotation(classToTransform, InjectView.class);
-            final List<CtField> fragments = getAllInjectedFieldsForAnnotation(classToTransform, InjectFragment.class);
-            if( views.isEmpty() && fragments.isEmpty() ) {
-                return;
-            }
-            CtMethod onCreateMethod = extractOnCreateMethod(classToTransform);
-            if( onCreateMethod != null ) {
-                DetectMethodCallEditor dectedSetContentViewEditor = new DetectMethodCallEditor(classToTransform, "setContentView");
-                onCreateMethod.instrument(dectedSetContentViewEditor);
-                boolean isCallingSetContentView = dectedSetContentViewEditor.isCallingMethod();
-                InjectorEditor injectorEditor = new InjectorEditor(classToTransform, fragments, views, layoutId, isCallingSetContentView);
-                onCreateMethod.instrument( injectorEditor);
-            } else {
-                classToTransform.addMethod( CtNewMethod.make(createOnCreateBody(classToTransform, views, fragments, layoutId)
-                                , classToTransform));
-            }
-            classToTransform.detach();
-            injectStuffInClass( classToTransform.getSuperclass() );
+        int layoutId = getLayoutId(classToTransform);
+        final List<CtField> views = getAllInjectedFieldsForAnnotation(classToTransform, InjectView.class);
+        final List<CtField> fragments = getAllInjectedFieldsForAnnotation(classToTransform, InjectFragment.class);
+        if( views.isEmpty() && fragments.isEmpty() ) {
+            return;
+        }
+        CtMethod onCreateMethod = extractOnCreateMethod(classToTransform);
+        if( onCreateMethod != null ) {
+            DetectMethodCallEditor dectedSetContentViewEditor = new DetectMethodCallEditor(classToTransform, "setContentView");
+            onCreateMethod.instrument(dectedSetContentViewEditor);
+            boolean isCallingSetContentView = dectedSetContentViewEditor.isCallingMethod();
+            InjectorEditor injectorEditor = new InjectorEditor(classToTransform, fragments, views, layoutId, isCallingSetContentView);
+            onCreateMethod.instrument( injectorEditor);
         } else {
-            //must be thrown, otherwise, breaks bytecode
-            throw new RuntimeException("Not an activity");
+            classToTransform.addMethod( CtNewMethod.make(createOnCreateBody(classToTransform, views, fragments, layoutId)
+                    , classToTransform));
         }
+        classToTransform.detach();
+        injectStuffInClass( classToTransform.getSuperclass() );
     }
 
-    private String createOnCreateBody(CtClass classToTransform, List<CtField> views, List<CtField> fragments, int layoutId) {
+    private String createOnCreateBody(CtClass classToTransform, List<CtField> views, List<CtField> fragments, int layoutId) throws ClassNotFoundException, NotFoundException {
         return "public void onCreate(android.os.Bundle bundle) { \n"
                 + "super.onCreate(bundle);\n"
                 + createInjectedBody(classToTransform, views, fragments, layoutId, false)
@@ -67,35 +69,28 @@ private String createOnCreateBody(CtClass classToTransform, List<CtField> views,
     }
 
     private CtMethod extractOnCreateMethod(final CtClass classToTransform) {
-        CtMethod onCreateMethod = null;
         try {
-            onCreateMethod = classToTransform.getDeclaredMethod("onCreate");
+            return classToTransform.getDeclaredMethod("onCreate");
         } catch (Exception e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
+            return null;
         }
-        return onCreateMethod;
     }
 
     private int getLayoutId(final CtClass classToTransform) {
-        int layoutId = -1;
         try {
-            layoutId = ((ContentView)classToTransform.getAnnotation(ContentView.class)).value();
+            return ((ContentView)classToTransform.getAnnotation(ContentView.class)).value();
         } catch (Exception e) {
-            e.printStackTrace();
+            return -1;
         }
-        return layoutId;
     }
 
     private boolean checkIfAfterBurnerAlreadyActive(final CtClass classToTransform) {
-        boolean hasAfterBurner = false;
         try {
             classToTransform.getDeclaredField("afterBurnerActive");
-            hasAfterBurner = true;
+            return true;
         } catch (Exception e) {
-            e.printStackTrace();
+            return false;
         }
-        return hasAfterBurner;
     }
 
     private void markAfterBurnerActiveInClass(final CtClass classToTransform) throws CannotCompileException {
@@ -107,40 +102,42 @@ private String injectContentView(int layoutId) {
         return "setContentView("+layoutId+");\n";
     }
 
-    private String injectFragmentStatements(List<CtField> fragments) {
+    private String injectFragmentStatements(List<CtField> fragments) throws ClassNotFoundException, NotFoundException {
         StringBuffer buffer = new StringBuffer();
-        try {
-            for( CtField field : fragments ) {
-                int id;
-                id = ((InjectFragment)field.getAnnotation(InjectFragment.class)).value();
-                buffer.append( field.getName() );
-                buffer.append( " = " );
-                buffer.append( '(' );
-                buffer.append( field.getType().getName() );
-                buffer.append( ')' );
-                buffer.append( "getFragmentManager().findFragmentById("+id+");\n" );
-            }
-        } catch (Exception e) {
-            e.printStackTrace();
+        for( CtField field : fragments ) {
+            int id = ((InjectFragment)field.getAnnotation(InjectFragment.class)).value();
+            String tag = ((InjectFragment)field.getAnnotation(InjectFragment.class)).tag();
+            boolean isUsingId = id != -1;
+            buffer.append( field.getName() );
+            buffer.append( " = " );
+            buffer.append( '(' );
+            CtClass fragmentType = field.getType();
+            buffer.append( fragmentType.getName() );
+            buffer.append( ')' );
+            boolean isUsingSupport = !fragmentType.subclassOf(ClassPool.getDefault().get(Fragment.class.getName()));
+            String getFragmentManagerString = isUsingSupport ? "getSupportFragmentManager()" : "getFragmentManager()";
+            String getFragmentString = isUsingId ? ".findFragmentById("+id+")" : ".findFragmentByTag("+tag+")";
+            buffer.append( getFragmentManagerString+getFragmentString+";\n" );
         }
         return buffer.toString();
     }
 
-    private String injectViewStatements(List<CtField> views) {
+    private String injectViewStatements(List<CtField> views) throws ClassNotFoundException, NotFoundException {
         StringBuffer buffer = new StringBuffer();
-        try {
-            for( CtField field : views ) {
-                int id;
-                id = ((InjectFragment)field.getAnnotation(InjectFragment.class)).value();
-                buffer.append( field.getName() );
-                buffer.append( " = " );
-                buffer.append( '(' );
-                buffer.append( field.getType().getName() );
-                buffer.append( ')' );
-                buffer.append( "findViewById("+id+");\n" );
-            }
-        } catch (Exception e) {
-            e.printStackTrace();
+        for( CtField field : views ) {
+            int id;
+            id = ((InjectView)field.getAnnotation(InjectView.class)).value();
+            String tag = ((InjectView)field.getAnnotation(InjectView.class)).tag();
+            boolean isUsingId = id != -1;
+
+            buffer.append( field.getName() );
+            buffer.append( " = " );
+            buffer.append( '(' );
+            buffer.append( field.getType().getName() );
+            buffer.append( ')' );
+
+            String findViewString = isUsingId ? "findViewById("+id+")" : "findViewByTag("+tag+")";
+            buffer.append( findViewString+";\n" );
         }
         return buffer.toString();
     }
@@ -148,9 +145,9 @@ private String injectViewStatements(List<CtField> views) {
     private List<CtField> getAllInjectedFieldsForAnnotation(CtClass clazz, Class<? extends Annotation> annotationClazz) {
         List<CtField> result = new ArrayList<CtField>();
         CtField[] allFields = clazz.getDeclaredFields();
-        System.out.println("Scanning fields in "+clazz.getName());
+        getLogger().debug("Scanning fields in "+clazz.getName());
         for (CtField field : allFields) {
-            System.out.println("Discovered field "+field.getName());
+            getLogger().debug("Discovered field "+field.getName());
             if( field.hasAnnotation(annotationClazz) ) {
                 result.add(field);
             }
@@ -158,7 +155,7 @@ private String injectViewStatements(List<CtField> views) {
         return result;
     }
 
-    private String createInjectedBody(CtClass classToTransform, List<CtField> views, List<CtField> fragments, int layoutId, boolean isCallingSetContentView) {
+    private String createInjectedBody(CtClass classToTransform, List<CtField> views, List<CtField> fragments, int layoutId, boolean isCallingSetContentView) throws ClassNotFoundException, NotFoundException {
         StringBuffer buffer = new StringBuffer();
         String message = String.format("Class %s has been enhanced.", classToTransform.getName());
         buffer.append("android.util.Log.d(\"RoboGuice post-processor\",\""+message+"\");\n");
@@ -194,17 +191,25 @@ private InjectorEditor(CtClass classToTransform, List<CtField> fragments, List<C
 
         @Override
         public void edit(MethodCall m) throws CannotCompileException {
-            System.out.println("method call "+m.getMethodName());
-            String insertionMethod = isCallingSetContentView ? "setContentView" : "onCreate";
-            if( m.getMethodName().equals(insertionMethod) ) {
-                System.out.println("insertion method "+m.getMethodName());
-
-                String string = "$_ = $proceed($$);\n"+createInjectedBody(m.getEnclosingClass(), views, fragments, layoutId, isCallingSetContentView );
-                System.out.println("Injected : " + string);
-
-                m.replace(string );
-                //mark class to avoid duplicate
-                markAfterBurnerActiveInClass(classToTransform);
+            try {
+                getLogger().debug("method call "+m.getMethodName());
+                String insertionMethod = isCallingSetContentView ? "setContentView" : "onCreate";
+                if( m.getMethodName().equals(insertionMethod) ) {
+                    getLogger().debug("insertion method "+m.getMethodName());
+
+                    String string;
+                    string = "$_ = $proceed($$);\n"+createInjectedBody(m.getEnclosingClass(), views, fragments, layoutId, isCallingSetContentView );
+                    getLogger().debug("Injected : " + string);
+
+                    m.replace(string );
+                    //mark class to avoid duplicate
+                    markAfterBurnerActiveInClass(classToTransform);
+                    getLogger().info("Class {} has been enhanced.", classToTransform.getName());
+                }
+            } catch (ClassNotFoundException e) {
+                throw new CannotCompileException("Class not found during class transformation",e);
+            } catch (NotFoundException e) {
+                throw new CannotCompileException("Annotation not found during class transformation",e);
             }
         }
 
