diff --git a/roboguice/.classpath b/roboguice/.classpath
index 940f9af00..5fad027e8 100644
--- a/roboguice/.classpath
+++ b/roboguice/.classpath
@@ -13,6 +13,7 @@
 			<attribute name="maven.pomderived" value="true"/>
 		</attributes>
 	</classpathentry>
+	<classpathentry kind="src" path="src/test/resources"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
@@ -26,5 +27,6 @@
 			<attribute name="maven.pomderived" value="true"/>
 		</attributes>
 	</classpathentry>
+	<classpathentry kind="lib" path="src/test/resources/test-resource.jar"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/roboguice/src/main/java/roboguice/java/inject/JavaResourceListener.java b/roboguice/src/main/java/roboguice/java/inject/JavaResourceListener.java
index 1bec80eea..4b3399415 100644
--- a/roboguice/src/main/java/roboguice/java/inject/JavaResourceListener.java
+++ b/roboguice/src/main/java/roboguice/java/inject/JavaResourceListener.java
@@ -42,7 +42,7 @@ public JavaResourceListener removeResourcePath( String... paths )
     
     public JavaResourceListener removeAllPaths()
     {
-        ResourceManager.instance().removeAllPaths();
+        ResourceManager.instance().reset();
         return this;
     }
     
diff --git a/roboguice/src/main/java/roboguice/java/util/ResourceManager.java b/roboguice/src/main/java/roboguice/java/util/ResourceManager.java
index a0e14b4b8..f29a69928 100644
--- a/roboguice/src/main/java/roboguice/java/util/ResourceManager.java
+++ b/roboguice/src/main/java/roboguice/java/util/ResourceManager.java
@@ -1,10 +1,16 @@
 package roboguice.java.util;
 
+import java.io.IOException;
 import java.io.InputStream;
+import java.net.URL;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.Comparator;
+import java.util.Enumeration;
 import java.util.HashMap;
-import java.util.HashSet;
+import java.util.LinkedHashSet;
+import java.util.List;
 import java.util.Map;
 import java.util.Properties;
 import java.util.Set;
@@ -12,14 +18,17 @@
 import roboguice.base.util.logging.Ln;
 import roboguice.java.inject.JavaResourceListener;
 
+import com.google.common.collect.Lists;
+
 public class ResourceManager {
 
-    private static final Set<String> resourcePaths = Collections.synchronizedSet( new HashSet<String>() );
+    private static final Set<String> resourcePaths = Collections.synchronizedSet( new LinkedHashSet<String>() );
     /*
      *           Key     - path to properties file
      *           Value   - properties object 
      */      
      private static final Map<String,Properties> properties = Collections.synchronizedMap( new HashMap<String,Properties>());
+     private static Comparator<URL> comparator;
      
      private static ResourceManager instance;
      
@@ -36,8 +45,8 @@ public static ResourceManager instance()
      public ResourceManager addResourcePath( String... paths )
      {
          if ( paths != null && paths.length > 0 )
-         {
-             resourcePaths.addAll( Arrays.asList(paths) );
+         {             
+             resourcePaths.addAll( Arrays.asList( paths ) );
              //don't add resource paths to map yet
              //Lazy init in JavaMemberResourceInjector
          }
@@ -45,11 +54,24 @@ public ResourceManager addResourcePath( String... paths )
          return this;
      }
      
+     public ResourceManager addComparator( Comparator<URL> comparator )
+     {
+         ResourceManager.comparator = comparator;
+         return this;
+     }
+
+     public ResourceManager removeComparator()
+     {
+         ResourceManager.comparator = null;
+         return this;
+     }
+     
      public ResourceManager removeResourcePath( String... paths )
      {
          if ( paths != null && paths.length > 0 )
          {
-             resourcePaths.removeAll(Arrays.asList(paths));
+             List<String> list = Arrays.asList(paths);
+            resourcePaths.removeAll(list);
              /*
               * Returns a Set view of the keys contained in this map. The set is backed by the map, so changes 
               * to the map are reflected in the set, and vice-versa. If the map is modified while an iteration 
@@ -58,41 +80,42 @@ public ResourceManager removeResourcePath( String... paths )
               * from the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations.
               *  It does not support the add or addAll operations.
               */
-             properties.keySet().removeAll(Arrays.asList(paths)); 
+             properties.keySet().removeAll(list); 
          }
          
          return this;
      }
      
-     public ResourceManager removeAllPaths()
+     public ResourceManager reset()
      {
          resourcePaths.clear();
+         properties.clear();
          return this;
      }
      
      public String getValue( String name )
      {
          String val = null;
+         
+         List<String> paths = Lists.reverse( new ArrayList<String>(resourcePaths) );
+         
          //Check cache first
-         for ( String resourcePath : properties.keySet() )
+         for ( String path : paths)
          {//for every resource path
-             
-             //get property
-             val = properties.get(resourcePath).getProperty( name );
-             
-             if ( val != null )
-             {//return if found
+             if ( properties.containsKey( path ) )
+             {
+                 //get property
+                 val = properties.get(path).getProperty( name );
                  
-                 return val;
+                 if ( val != null )
+                 {//return if found
+                     
+                     return val;
+                 }
              }
-             
-         }
-         
-         //No properties found in cache
-         //Start loading properties
-         for ( String resourcePath : resourcePaths )
-         {
-                 Properties prop = ResourceManager.instance().loadProperty(resourcePath);
+             else
+             {
+                 Properties prop = ResourceManager.instance().loadProperty(path);
                  
                  val = prop.getProperty( name );
                  
@@ -100,48 +123,66 @@ public String getValue( String name )
                  {
                      return val;
                  }
+             }
+             
          }
          
          return val;
      }
  
-     public Properties loadProperty(String propertyFile) {
-         
-         Properties property = new Properties();
-                 
-         InputStream in = JavaResourceListener.class.getClassLoader().getResourceAsStream( propertyFile );
-         try
-         {//and load the property file 
-             if ( in != null )
-             {
-                 property.load( in );
+    Properties loadProperty(String propertyFile) {
 
-                 //put resource path cache map into main cache
-                 properties.put(propertyFile, property);
-             } 
-             else
-             {
-                 Ln.w( "Could not find [%s] resource - can not inject any resources in specified file.", propertyFile );
-             }
-         }
-         catch ( Exception e )
-         {
-             Ln.e( e, "Error loading property file [%s]", propertyFile );
-         }
-         finally
-         {
-             try
-             {
-                 in.close();
-             }
-             catch ( Exception ex )
-             {
-                 // ignore
-             }
-         }
-         
-         return property;
-     }
+        Properties property = new Properties();
+
+        try 
+        {
+            Enumeration<URL> urls = JavaResourceListener.class.getClassLoader().getResources( propertyFile );
+            List<URL> allUrls = Collections.list(urls);
+            if ( comparator != null )
+            {
+                Collections.sort(allUrls, comparator);
+            }
+            
+            for( URL url : allUrls)
+            {//for each url
+                
+                InputStream in = url.openStream();
+                try 
+                {// and load the property file
+                    if ( in != null ) 
+                    {
+                        property.load( in );
+
+                        // put resource path cache map into main cache
+                        properties.put(propertyFile, property);
+                    } 
+                    else 
+                    {
+                        Ln.w( "Could not find [%s] resource - can not inject any resources in specified file.", propertyFile );
+                    }
+                } 
+                catch (Exception e) 
+                {
+                    Ln.e( e, "Error loading property file [%s]", propertyFile );
+                } 
+                finally 
+                {
+                    try 
+                    {
+                        in.close();
+                    } catch (Exception ex) 
+                    {
+                        // ignore
+                    }
+                }
+            }
+        } 
+        catch ( IOException e1 ) 
+        {
+            e1.printStackTrace();
+        }
+        return property;
+    }
      
      public static interface Callback
      {
diff --git a/roboguice/src/test/java/roboguice/java/util/ResourceManagerTest.java b/roboguice/src/test/java/roboguice/java/util/ResourceManagerTest.java
new file mode 100644
index 000000000..cb69c52ac
--- /dev/null
+++ b/roboguice/src/test/java/roboguice/java/util/ResourceManagerTest.java
@@ -0,0 +1,74 @@
+package roboguice.java.util;
+import static org.hamcrest.CoreMatchers.equalTo;
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+
+import java.net.URL;
+import java.util.Comparator;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import roboguice.base.util.logging.Ln;
+
+public class ResourceManagerTest {
+
+    @Before
+    public void setup()
+    {
+        ResourceManager.instance().reset();
+    }
+    
+    private Comparator<URL> comp = new Comparator<URL>() {
+
+        @Override
+        public int compare(URL lhs, URL rhs) {
+            Ln.i("lhs %s", lhs);
+            Ln.i("rhs %s", rhs);
+            return lhs.toString().contains(".jar") ? 1 : -1;
+        }
+    };
+    
+    @Test
+    public void testLoadProperties()
+    {//there is a jar "test-response.jar" that contains a "path1/resone.properties" file
+     //which servers as a second property file
+        ResourceManager.instance().addResourcePath( "path1/resone.properties");
+        
+        assertThat( ResourceManager.instance().getValue("firstFile"), is ( equalTo ( "value" ) ) );
+        assertThat( ResourceManager.instance().getValue("secondFile"), is ( equalTo ( "value" ) ) );
+    }
+    
+    @Test
+    public void testGetValueThatIsRepeated()
+    {
+        ResourceManager.instance().addResourcePath( "path2/restwo.properties");
+        //value in path2 should be expected
+        
+        assertThat( ResourceManager.instance().getValue("secondFile"), is( equalTo( "the_better_value" ) ) );
+    }
+    
+    @Test
+    public void testGettingValueFromNewResource()
+    {
+        ResourceManager.instance().addResourcePath( "path1/resone.properties");
+        assertThat( ResourceManager.instance().getValue("secondFile"), is ( equalTo ( "value" ) ) );
+        
+        ResourceManager.instance().addResourcePath( "path2/restwo.properties");
+        //value in path2 should be expected
+        
+        String value = ResourceManager.instance().getValue("secondFile");
+        assertThat( value, is( equalTo( "the_better_value" ) ) );
+    }
+    
+    @Test
+    public void testComparator()
+    {
+        ResourceManager.instance().addResourcePath( "path1/resone.properties");
+        ResourceManager.instance().addComparator(comp);
+        
+        Ln.w( ResourceManager.instance().getValue("file") );
+        
+        assertThat(ResourceManager.instance().getValue("file"), is(equalTo("first")));
+    }
+}
diff --git a/roboguice/src/test/resources/path1/resone.properties b/roboguice/src/test/resources/path1/resone.properties
new file mode 100644
index 000000000..31ad10e62
--- /dev/null
+++ b/roboguice/src/test/resources/path1/resone.properties
@@ -0,0 +1,2 @@
+secondFile=value
+file=second
\ No newline at end of file
diff --git a/roboguice/src/test/resources/path2/restwo.properties b/roboguice/src/test/resources/path2/restwo.properties
new file mode 100644
index 000000000..cad72d4e4
--- /dev/null
+++ b/roboguice/src/test/resources/path2/restwo.properties
@@ -0,0 +1 @@
+secondFile=the_better_value
\ No newline at end of file
diff --git a/roboguice/src/test/resources/test-resource.jar b/roboguice/src/test/resources/test-resource.jar
new file mode 100644
index 000000000..d105d19ff
Binary files /dev/null and b/roboguice/src/test/resources/test-resource.jar differ
