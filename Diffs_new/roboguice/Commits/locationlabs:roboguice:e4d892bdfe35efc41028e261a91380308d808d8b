diff --git a/roboguice/src/main/java/roboguice/inject/InjectView.java b/roboguice/src/main/java/roboguice/inject/InjectView.java
index b840fdb93..2d941781a 100644
--- a/roboguice/src/main/java/roboguice/inject/InjectView.java
+++ b/roboguice/src/main/java/roboguice/inject/InjectView.java
@@ -46,4 +46,5 @@
 public @interface InjectView {
     int value() default -1;
     String tag() default "";
+    String id() default "";
 }
diff --git a/roboguice/src/main/java/roboguice/inject/ViewListener.java b/roboguice/src/main/java/roboguice/inject/ViewListener.java
index 1b187c7dd..7503e5f21 100644
--- a/roboguice/src/main/java/roboguice/inject/ViewListener.java
+++ b/roboguice/src/main/java/roboguice/inject/ViewListener.java
@@ -167,11 +167,14 @@ protected void reallyInjectMemberViews(Object activityOrFragment) {
             try {
                 final InjectView injectView = (InjectView) annotation;
                 final int id = injectView.value();
+                final String id_string = injectView.id();
 
                 if( id>=0 )
                     view = fragmentClass!=null && fragmentClass.isInstance(activityOrFragment) ? ((View)fragmentGetViewMethod.invoke(activityOrFragment)).findViewById(id) : ((Activity)activityOrFragment).findViewById(id);
 
-                else
+                else if(!id_string.equals("") && (fragmentClass==null || !fragmentClass.isInstance(activityOrFragment))) 
+                   view = ((Activity)activityOrFragment).findViewById(getIdStringView((Activity)activityOrFragment, injectView.id()));
+                else 
                     view = fragmentClass!=null && fragmentClass.isInstance(activityOrFragment) ? ((View)fragmentGetViewMethod.invoke(activityOrFragment)).findViewWithTag(injectView.tag()) : ((Activity)activityOrFragment).getWindow().getDecorView().findViewWithTag(injectView.tag());
 
 
@@ -181,6 +184,9 @@ protected void reallyInjectMemberViews(Object activityOrFragment) {
                 field.setAccessible(true);
                 field.set(instance, view);
 
+            } catch (ClassNotFoundException e) {
+                throw new RuntimeException(e);
+
             } catch (IllegalAccessException e) {
                 throw new RuntimeException(e);
 
@@ -193,6 +199,23 @@ protected void reallyInjectMemberViews(Object activityOrFragment) {
             }
         }
 
+       protected int getIdStringView(Context context, String name) throws ClassNotFoundException, IllegalAccessException {
+          String pkg = context.getPackageName();
+          Class R = Class.forName(pkg+".R$id");
+          return getResId(name, context, R);
+       }
+
+       public static int getResId(String variableName, Context context, Class<?> c) throws IllegalAccessException {
+          try {
+             Field idField = c.getDeclaredField(variableName);
+             return idField.getInt(idField);
+          
+          } catch (NoSuchFieldException e) {
+             // will be caught by nullable check
+             return -1;
+          } 
+       }
+
         /**
          * This is when the view references are actually evaluated.
          * @param activityOrFragment an activity or fragment
