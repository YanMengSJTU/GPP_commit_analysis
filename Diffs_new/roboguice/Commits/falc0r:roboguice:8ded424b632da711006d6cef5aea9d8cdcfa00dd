diff --git a/guice/blender/src/com/google/inject/blender/GuiceAnnotationProcessor.java b/guice/blender/src/com/google/inject/blender/GuiceAnnotationProcessor.java
index 4f8e461eb..4a7dc8108 100644
--- a/guice/blender/src/com/google/inject/blender/GuiceAnnotationProcessor.java
+++ b/guice/blender/src/com/google/inject/blender/GuiceAnnotationProcessor.java
@@ -35,6 +35,7 @@
 public class GuiceAnnotationProcessor extends AbstractProcessor {
 
     public static final String TEMPLATE_ANNOTATION_DATABASE_PATH = "templates/AnnotationDatabaseImpl.vm";
+    private static final String GOOGLE_INJECT_FQCN = "com.google.inject.Inject"; 
 
     //TODO add a HashMap<String, Set<String>>
 
@@ -97,7 +98,8 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
                 }
             }
         }
-
+        
+        addAssistedInjectSupport();
 
         for( Map<String, Set<String>> entryAnnotationToclassesContainingInjectionPoints : mapAnnotationToMapClassContainingInjectionToInjectedFieldSet.values() ) {
             classesContainingInjectionPointsSet.addAll(entryAnnotationToclassesContainingInjectionPoints.keySet());
@@ -128,6 +130,14 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
 
         return true;
     }
+    
+    private void addAssistedInjectSupport() {
+        String factoryProviderClass = "com.google.inject.assistedinject.FactoryProvider2";
+        String injectedMethodName = "initialize";
+        String injectedParameterType = "com.google.inject.Injector";
+        String injectionPoint = addParameterTypeName(injectedMethodName, injectedParameterType);
+        addToInjectedMethods(GOOGLE_INJECT_FQCN, factoryProviderClass, injectionPoint);
+    }
 
     protected AnnotationDatabaseGenerator createAnnotationDatabaseGenerator() {
         AnnotationDatabaseGenerator annotationDatabaseGenerator = new AnnotationDatabaseGenerator();
@@ -169,7 +179,7 @@ private void addParameterToAnnotationDatabase(String annotationClassName, Elemen
         for( VariableElement variable : ((ExecutableElement)enclosing).getParameters() ) {
             String parameterTypeName = getTypeName(variable);
             bindableClasses.add( parameterTypeName );
-            injectionPointName += ":"+parameterTypeName;
+            injectionPointName = addParameterTypeName(injectionPointName, parameterTypeName);
         }
 
         TypeElement typeElementRequiringScanning = (TypeElement) ((ExecutableElement) injectionPoint.getEnclosingElement()).getEnclosingElement();
@@ -181,6 +191,10 @@ private void addParameterToAnnotationDatabase(String annotationClassName, Elemen
             addToInjectedMethods(annotationClassName, typeElementName, injectionPointName );
         }
     }
+    
+    private String addParameterTypeName(String injectionPointName, String parameterTypeName) {
+        return injectionPointName + ":" + parameterTypeName;
+    }
 
     private void addMethodOrConstructorToAnnotationDatabase(String annotationClassName, Element injectionPoint) {
         String injectionPointName = injectionPoint.getSimpleName().toString();
