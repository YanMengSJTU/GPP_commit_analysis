diff --git a/roboguice/src/main/java/roboguice/android/DroidGuice.java b/roboguice/src/main/java/roboguice/android/DroidGuice.java
index 02f59c7e0..56961015b 100644
--- a/roboguice/src/main/java/roboguice/android/DroidGuice.java
+++ b/roboguice/src/main/java/roboguice/android/DroidGuice.java
@@ -1,23 +1,22 @@
 package roboguice.android;
 
+import java.util.ArrayList;
+import java.util.WeakHashMap;
+
 import roboguice.android.config.DefaultRoboModule;
 import roboguice.android.event.EventManager;
-import roboguice.android.inject.*;
+import roboguice.android.inject.ContextScope;
+import roboguice.android.inject.ContextScopedRoboInjector;
+import roboguice.android.inject.RoboInjector;
+import roboguice.android.inject.ViewListener;
+import roboguice.base.RoboGuice;
 
-import android.app.Application;
-import android.content.Context;
-
-import com.google.inject.Guice;
 import com.google.inject.Injector;
 import com.google.inject.Module;
 import com.google.inject.Stage;
-import com.google.inject.spi.DefaultElementVisitor;
-import com.google.inject.spi.Element;
-import com.google.inject.spi.Elements;
-import com.google.inject.spi.StaticInjectionRequest;
 
-import java.util.ArrayList;
-import java.util.WeakHashMap;
+import android.app.Application;
+import android.content.Context;
 
 /**
  *
@@ -32,83 +31,38 @@
  * BUG hashmap should also key off of stage and modules list
  */
 
-public class DroidGuice {
-    public static Stage DEFAULT_STAGE = Stage.PRODUCTION;
-
-    protected static WeakHashMap<Application,Injector> injectors = new WeakHashMap<Application,Injector>();
-    protected static WeakHashMap<Application,ResourceListener> resourceListeners = new WeakHashMap<Application, ResourceListener>();
+public class DroidGuice extends RoboGuice<Application> {
+    
     protected static WeakHashMap<Application,ViewListener> viewListeners = new WeakHashMap<Application, ViewListener>();
     protected static int modulesResourceId = 0;
     
-    private DroidGuice() {
-    }
-
-    /**
-     * Return the cached Injector instance for this application, or create a new one if necessary.
-     */
-    public static Injector getBaseApplicationInjector(Application application) {
-        Injector rtrn = injectors.get(application);
-        if( rtrn!=null )
-            return rtrn;
-
-        synchronized (DroidGuice.class) {
-            rtrn = injectors.get(application);
-            if( rtrn!=null )
-                return rtrn;
-            
-            return setBaseApplicationInjector(application, DEFAULT_STAGE);
+    private static DroidGuice guice = null;
+    
+    public static DroidGuice instance()
+    {
+        if ( guice == null )
+        {
+            guice = new DroidGuice();
         }
+        
+        return guice;
     }
-
-    /**
-     * Return the cached Injector instance for this application, or create a new one if necessary.
-     * If specifying your own modules, you must include a DefaultRoboModule for most things to work properly.
-     * Do something like the following:
-     *
-     * RoboGuice.setAppliationInjector( app, RoboGuice.DEFAULT_STAGE, Modules.override(RoboGuice.newDefaultRoboModule(app)).with(new MyModule() );
-     *
-     * @see com.google.inject.util.Modules#override(com.google.inject.Module...)
-     * @see roboguice.android.DroidGuice#setBaseApplicationInjector(android.app.Application, com.google.inject.Stage, com.google.inject.Module...)
-     * @see roboguice.android.DroidGuice#newDefaultRoboModule(android.app.Application)
-     * @see roboguice.android.DroidGuice#DEFAULT_STAGE
-     *
-     * If using this method with test cases, be sure to call {@link roboguice.android.DroidGuice.util#reset()} in your test teardown methods
-     * to avoid polluting our other tests with your custom injector.  Don't do this in your real application though.
-     *
-     */
-    public static Injector setBaseApplicationInjector(final Application application, Stage stage, Module... modules) {
-
-        // Do a little rewriting on the modules first to
-        // add static resource injection
-        for(Element element : Elements.getElements(modules)) {
-            element.acceptVisitor(new DefaultElementVisitor<Void>() {
-                @Override
-                public Void visit(StaticInjectionRequest element) {
-                    getResourceListener(application).requestStaticInjection(element.getType());
-                    return null;
-                }
-            });
-        }
-
-        synchronized (DroidGuice.class) {
-            final Injector rtrn = Guice.createInjector(stage, modules);
-            injectors.put(application,rtrn);
-            return rtrn;
-        }
+    
+    private DroidGuice() {
     }
 
     /**
      * Allows the user to override the "roboguice_modules" resource name with some other identifier.
      * This is a static value.
      */
-    public static void setModulesResourceId(int modulesResourceId) {
+    public void setModulesResourceId(int modulesResourceId) {
         DroidGuice.modulesResourceId = modulesResourceId;
     }
 
     /**
      * Return the cached Injector instance for this application, or create a new one if necessary.
      */
-    public static Injector setBaseApplicationInjector(Application application, Stage stage) {
+    public Injector setBaseApplicationInjector(Application application, Stage stage) {
 
         synchronized (DroidGuice.class) {
             int id = modulesResourceId;
@@ -136,7 +90,7 @@ public static Injector setBaseApplicationInjector(Application application, Stage
                 throw new RuntimeException(e);
             }
 
-            final Injector rtrn = setBaseApplicationInjector(application, stage, modules.toArray(new Module[modules.size()]));
+            final Injector rtrn = setScopedInjector(application, stage, modules.toArray(new Module[modules.size()]));
             injectors.put(application,rtrn);
             return rtrn;
         }
@@ -144,44 +98,24 @@ public static Injector setBaseApplicationInjector(Application application, Stage
     }
 
 
-    public static RoboInjector getInjector(Context context) {
+    public RoboInjector getInjector(Context context) {
         final Application application = (Application)context.getApplicationContext();
-        return new ContextScopedRoboInjector(context, getBaseApplicationInjector(application), getViewListener(application));
+        return new ContextScopedRoboInjector(context, getScopedInjector(application), getViewListener(application));
     }
 
     /**
      * A shortcut for RoboGuice.getInjector(context).injectMembers(o);
      */
-    public static <T> T injectMembers( Context context, T t ) {
+    public <T> T injectMembers( Context context, T t ) {
         getInjector(context).injectMembers(t);
         return t;
     }
 
-
-    
-    public static DefaultRoboModule newDefaultRoboModule(final Application application) {
+    public DefaultRoboModule newDefaultRoboModule(final Application application) {
         return new DefaultRoboModule(application, new ContextScope(application), getViewListener(application), getResourceListener(application));
     }
 
-
-
-
-
-
-    protected static ResourceListener getResourceListener( Application application ) {
-        ResourceListener resourceListener = resourceListeners.get(application);
-        if( resourceListener==null ) {
-            synchronized (DroidGuice.class) {
-                if( resourceListener==null ) {
-                    resourceListener = new ResourceListener(application);
-                    resourceListeners.put(application,resourceListener);
-                }
-            }
-        }
-        return resourceListener;
-    }
-
-    protected static ViewListener getViewListener( final Application application ) {
+    protected ViewListener getViewListener( final Application application ) {
         ViewListener viewListener = viewListeners.get(application);
         if( viewListener==null ) {
             synchronized (DroidGuice.class) {
@@ -193,13 +127,6 @@ protected static ViewListener getViewListener( final Application application ) {
         }
         return viewListener;
     }
-
-    public static void destroyInjector(Context context) {
-        final RoboInjector injector = getInjector(context);
-        injector.getInstance(EventManager.class).destroy();
-        injectors.remove(context);
-    }
-    
     
     public static class util {
         private util() {}
@@ -209,8 +136,8 @@ private util() {}
          * It should not be called in a real application.
          */
         public static void reset() {
-            injectors.clear();
-            resourceListeners.clear();
+            guice.injectors.clear();
+            guice.resourceListeners.clear();
             viewListeners.clear();
         }
     }
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboAccountAuthenticatorActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboAccountAuthenticatorActivity.java
index 0913918ae..be1bc8357 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboAccountAuthenticatorActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboAccountAuthenticatorActivity.java
@@ -49,7 +49,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = DroidGuice.getInjector(this);
+        final RoboInjector injector = DroidGuice.instance().getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -101,7 +101,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                DroidGuice.destroyInjector(this);
+                DroidGuice.instance().destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -118,7 +118,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        DroidGuice.getInjector(this).injectViewMembers(this);
+        DroidGuice.instance().getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboActivity.java
index b59e94ec7..9f15178d7 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboActivity.java
@@ -73,7 +73,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = DroidGuice.getInjector(this);
+        final RoboInjector injector = DroidGuice.instance().getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -125,7 +125,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                DroidGuice.destroyInjector(this);
+                DroidGuice.instance().destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -142,7 +142,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        DroidGuice.getInjector(this).injectViewMembers(this);
+        DroidGuice.instance().getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboActivityGroup.java b/roboguice/src/main/java/roboguice/android/activity/RoboActivityGroup.java
index dac88a54c..9eb2d6969 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboActivityGroup.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboActivityGroup.java
@@ -50,7 +50,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = DroidGuice.getInjector(this);
+        final RoboInjector injector = DroidGuice.instance().getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -102,7 +102,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                DroidGuice.destroyInjector(this);
+                DroidGuice.instance().destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -119,7 +119,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        DroidGuice.getInjector(this).injectViewMembers(this);
+        DroidGuice.instance().getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboExpandableListActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboExpandableListActivity.java
index 16699ddda..073fd6e8b 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboExpandableListActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboExpandableListActivity.java
@@ -51,7 +51,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = DroidGuice.getInjector(this);
+        final RoboInjector injector = DroidGuice.instance().getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -103,7 +103,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                DroidGuice.destroyInjector(this);
+                DroidGuice.instance().destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -120,7 +120,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        DroidGuice.getInjector(this).injectViewMembers(this);
+        DroidGuice.instance().getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboFragmentActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboFragmentActivity.java
index 4b55476a6..3ac206dcd 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboFragmentActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboFragmentActivity.java
@@ -42,7 +42,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = DroidGuice.getInjector(this);
+        final RoboInjector injector = DroidGuice.instance().getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -94,7 +94,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                DroidGuice.destroyInjector(this);
+                DroidGuice.instance().destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -111,7 +111,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        DroidGuice.getInjector(this).injectViewMembers(this);
+        DroidGuice.instance().getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboLauncherActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboLauncherActivity.java
index 3a3a4b9ee..3b8f5ea34 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboLauncherActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboLauncherActivity.java
@@ -50,7 +50,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = DroidGuice.getInjector(this);
+        final RoboInjector injector = DroidGuice.instance().getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -102,7 +102,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                DroidGuice.destroyInjector(this);
+                DroidGuice.instance().destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -119,7 +119,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        DroidGuice.getInjector(this).injectViewMembers(this);
+        DroidGuice.instance().getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboListActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboListActivity.java
index af6035bda..f1d4d536c 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboListActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboListActivity.java
@@ -50,7 +50,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = DroidGuice.getInjector(this);
+        final RoboInjector injector = DroidGuice.instance().getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -102,7 +102,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                DroidGuice.destroyInjector(this);
+                DroidGuice.instance().destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -119,7 +119,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        DroidGuice.getInjector(this).injectViewMembers(this);
+        DroidGuice.instance().getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboMapActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboMapActivity.java
index 5906170ea..d2b92b3c9 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboMapActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboMapActivity.java
@@ -50,7 +50,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = DroidGuice.getInjector(this);
+        final RoboInjector injector = DroidGuice.instance().getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -102,7 +102,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                DroidGuice.destroyInjector(this);
+                DroidGuice.instance().destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -119,7 +119,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        DroidGuice.getInjector(this).injectViewMembers(this);
+        DroidGuice.instance().getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboPreferenceActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboPreferenceActivity.java
index 60c0aa87a..53a669ad1 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboPreferenceActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboPreferenceActivity.java
@@ -60,7 +60,7 @@
     /** {@inheritDoc } */
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = DroidGuice.getInjector(this);
+        final RoboInjector injector = DroidGuice.instance().getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         preferenceListener = injector.getInstance(PreferenceListener.class);
         injector.injectMembersWithoutViews(this);
@@ -72,7 +72,7 @@ protected void onCreate(Bundle savedInstanceState) {
     public void setPreferenceScreen(PreferenceScreen preferenceScreen) {
         super.setPreferenceScreen(preferenceScreen);
 
-        final ContextScope scope = DroidGuice.getInjector(this).getInstance(ContextScope.class);
+        final ContextScope scope = DroidGuice.instance().getInjector(this).getInstance(ContextScope.class);
         synchronized (ContextScope.class) {
             scope.enter(this);
             try {
@@ -128,7 +128,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                DroidGuice.destroyInjector(this);
+                DroidGuice.instance().destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -145,7 +145,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        DroidGuice.getInjector(this).injectViewMembers(this);
+        DroidGuice.instance().getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboSplashActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboSplashActivity.java
index 1b0e29e2c..2ddb65e33 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboSplashActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboSplashActivity.java
@@ -34,7 +34,7 @@ public void run() {
                 // Set the execution context for this thread in case the user
                 // want to use the injector
                 final Application app = getApplication();
-                DroidGuice.getBaseApplicationInjector(getApplication());
+                DroidGuice.instance().getScopedInjector(getApplication());
 
 
                 doStuffInBackground(app);
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboTabActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboTabActivity.java
index 09400f8a0..5052e751c 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboTabActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboTabActivity.java
@@ -50,7 +50,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = DroidGuice.getInjector(this);
+        final RoboInjector injector = DroidGuice.instance().getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -102,7 +102,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                DroidGuice.destroyInjector(this);
+                DroidGuice.instance().destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -119,7 +119,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        DroidGuice.getInjector(this).injectViewMembers(this);
+        DroidGuice.instance().getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/config/DefaultRoboModule.java b/roboguice/src/main/java/roboguice/android/config/DefaultRoboModule.java
index e1167a431..0a6ba6ef1 100644
--- a/roboguice/src/main/java/roboguice/android/config/DefaultRoboModule.java
+++ b/roboguice/src/main/java/roboguice/android/config/DefaultRoboModule.java
@@ -50,7 +50,7 @@
  * RoboGuice.setAppliationInjector( app, RoboGuice.DEFAULT_STAGE, Modules.override(RoboGuice.newDefaultRoboModule(app)).with(new MyModule() );
  *
  * @see com.google.inject.util.Modules#override(com.google.inject.Module...)
- * @see roboguice.android.DroidGuice#setBaseApplicationInjector(android.app.Application, com.google.inject.Stage, com.google.inject.Module...)
+ * @see roboguice.android.DroidGuice#setScopedInjector(android.app.Application, com.google.inject.Stage, com.google.inject.Module...)
  * @see roboguice.android.DroidGuice#newDefaultRoboModule(android.app.Application)
  * @see roboguice.android.DroidGuice#DEFAULT_STAGE
  *
diff --git a/roboguice/src/main/java/roboguice/android/content/RoboAsyncTaskLoader.java b/roboguice/src/main/java/roboguice/android/content/RoboAsyncTaskLoader.java
index 3d5cb08e1..4c914c0eb 100644
--- a/roboguice/src/main/java/roboguice/android/content/RoboAsyncTaskLoader.java
+++ b/roboguice/src/main/java/roboguice/android/content/RoboAsyncTaskLoader.java
@@ -13,7 +13,7 @@
 
     public RoboAsyncTaskLoader(Context context) {
         super(context);
-        DroidGuice.injectMembers(context, this);
+        DroidGuice.instance().injectMembers(context, this);
     }
     
 }
diff --git a/roboguice/src/main/java/roboguice/android/content/RoboContentProvider.java b/roboguice/src/main/java/roboguice/android/content/RoboContentProvider.java
index 027e8044a..e1e7a4264 100644
--- a/roboguice/src/main/java/roboguice/android/content/RoboContentProvider.java
+++ b/roboguice/src/main/java/roboguice/android/content/RoboContentProvider.java
@@ -14,7 +14,7 @@
 
     @Override
     public boolean onCreate() {
-        DroidGuice.getInjector(getContext()).injectMembers(this);
+        DroidGuice.instance().getInjector(getContext()).injectMembers(this);
         return true;
     }
 }
diff --git a/roboguice/src/main/java/roboguice/android/content/RoboLoader.java b/roboguice/src/main/java/roboguice/android/content/RoboLoader.java
index ccac06883..fead45d2e 100644
--- a/roboguice/src/main/java/roboguice/android/content/RoboLoader.java
+++ b/roboguice/src/main/java/roboguice/android/content/RoboLoader.java
@@ -13,7 +13,7 @@
 
     public RoboLoader(Context context) {
         super(context);
-        DroidGuice.injectMembers(context, this);
+        DroidGuice.instance().injectMembers(context, this);
     }
 
 }
diff --git a/roboguice/src/main/java/roboguice/android/fragment/RoboDialogFragment.java b/roboguice/src/main/java/roboguice/android/fragment/RoboDialogFragment.java
index 6557744f4..1f11636b0 100644
--- a/roboguice/src/main/java/roboguice/android/fragment/RoboDialogFragment.java
+++ b/roboguice/src/main/java/roboguice/android/fragment/RoboDialogFragment.java
@@ -10,12 +10,12 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        DroidGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        DroidGuice.instance().getInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        DroidGuice.getInjector(getActivity()).injectViewMembers(this);
+        DroidGuice.instance().getInjector(getActivity()).injectViewMembers(this);
     }
 }
diff --git a/roboguice/src/main/java/roboguice/android/fragment/RoboFragment.java b/roboguice/src/main/java/roboguice/android/fragment/RoboFragment.java
index 587fbb000..ff8e9d6f7 100644
--- a/roboguice/src/main/java/roboguice/android/fragment/RoboFragment.java
+++ b/roboguice/src/main/java/roboguice/android/fragment/RoboFragment.java
@@ -10,12 +10,12 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        DroidGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        DroidGuice.instance().getInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        DroidGuice.getInjector(getActivity()).injectViewMembers(this);
+        DroidGuice.instance().getInjector(getActivity()).injectViewMembers(this);
     }
 }
diff --git a/roboguice/src/main/java/roboguice/android/fragment/RoboListFragment.java b/roboguice/src/main/java/roboguice/android/fragment/RoboListFragment.java
index 26480c685..669eebb88 100644
--- a/roboguice/src/main/java/roboguice/android/fragment/RoboListFragment.java
+++ b/roboguice/src/main/java/roboguice/android/fragment/RoboListFragment.java
@@ -10,12 +10,12 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        DroidGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        DroidGuice.instance().getInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        DroidGuice.getInjector(getActivity()).injectViewMembers(this);
+        DroidGuice.instance().getInjector(getActivity()).injectViewMembers(this);
     }
 }
diff --git a/roboguice/src/main/java/roboguice/android/inject/ExtrasListener.java b/roboguice/src/main/java/roboguice/android/inject/ExtrasListener.java
index d9ac61a39..519420734 100644
--- a/roboguice/src/main/java/roboguice/android/inject/ExtrasListener.java
+++ b/roboguice/src/main/java/roboguice/android/inject/ExtrasListener.java
@@ -96,7 +96,7 @@ public void injectMembers(T instance) {
 
             value = extras.get(id);
 
-            value = convert(field, value, DroidGuice.getBaseApplicationInjector(activity.getApplication()));
+            value = convert(field, value, DroidGuice.instance().getScopedInjector(activity.getApplication()));
 
             /*
              * Please notice : null checking is done AFTER conversion. Having
diff --git a/roboguice/src/main/java/roboguice/android/receiver/RoboBroadcastReceiver.java b/roboguice/src/main/java/roboguice/android/receiver/RoboBroadcastReceiver.java
index 18d24653f..4159df99f 100644
--- a/roboguice/src/main/java/roboguice/android/receiver/RoboBroadcastReceiver.java
+++ b/roboguice/src/main/java/roboguice/android/receiver/RoboBroadcastReceiver.java
@@ -21,7 +21,7 @@
      */
     @Override
     public final void onReceive(Context context, Intent intent) {
-        final Injector injector = DroidGuice.getBaseApplicationInjector((Application) context.getApplicationContext());
+        final Injector injector = DroidGuice.instance().getScopedInjector((Application) context.getApplicationContext());
 
         injector.injectMembers(this);
         handleReceive(context, intent);
diff --git a/roboguice/src/main/java/roboguice/android/service/RoboIntentService.java b/roboguice/src/main/java/roboguice/android/service/RoboIntentService.java
index 5cb44cf68..1fc50158d 100644
--- a/roboguice/src/main/java/roboguice/android/service/RoboIntentService.java
+++ b/roboguice/src/main/java/roboguice/android/service/RoboIntentService.java
@@ -54,7 +54,7 @@ public RoboIntentService(String name) {
 
     @Override
     public void onCreate() {
-        final Injector injector = DroidGuice.getInjector(this);
+        final Injector injector = DroidGuice.instance().getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembers(this);
         super.onCreate();
@@ -75,7 +75,7 @@ public void onDestroy() {
                 eventManager.fire(new OnDestroyEvent() );
         } finally {
             try {
-                DroidGuice.destroyInjector(this);
+                DroidGuice.instance().destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
diff --git a/roboguice/src/main/java/roboguice/android/service/RoboService.java b/roboguice/src/main/java/roboguice/android/service/RoboService.java
index 8ab713726..6e4d5dbd0 100644
--- a/roboguice/src/main/java/roboguice/android/service/RoboService.java
+++ b/roboguice/src/main/java/roboguice/android/service/RoboService.java
@@ -58,7 +58,7 @@
 
     @Override
     public void onCreate() {
-        final Injector injector = DroidGuice.getInjector(this);
+        final Injector injector = DroidGuice.instance().getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembers(this);
         super.onCreate();
@@ -78,7 +78,7 @@ public void onDestroy() {
                 eventManager.fire(new OnDestroyEvent() );
         } finally {
             try {
-                DroidGuice.destroyInjector(this);
+                DroidGuice.instance().destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
diff --git a/roboguice/src/main/java/roboguice/android/util/RoboAsyncTask.java b/roboguice/src/main/java/roboguice/android/util/RoboAsyncTask.java
index c814a0762..fb96b2336 100644
--- a/roboguice/src/main/java/roboguice/android/util/RoboAsyncTask.java
+++ b/roboguice/src/main/java/roboguice/android/util/RoboAsyncTask.java
@@ -12,25 +12,25 @@
 
     protected RoboAsyncTask(Context context) {
         this.context = context;
-        DroidGuice.getInjector(context).injectMembers(this);
+        DroidGuice.instance().getInjector(context).injectMembers(this);
     }
 
     protected RoboAsyncTask(Context context, Handler handler) {
         super(handler);
         this.context = context;
-        DroidGuice.getInjector(context).injectMembers(this);
+        DroidGuice.instance().getInjector(context).injectMembers(this);
     }
 
     protected RoboAsyncTask(Context context, Handler handler, Executor executor) {
         super(handler, executor);
         this.context = context;
-        DroidGuice.getInjector(context).injectMembers(this);
+        DroidGuice.instance().getInjector(context).injectMembers(this);
     }
 
     protected RoboAsyncTask(Context context, Executor executor) {
         super(executor);
         this.context = context;
-        DroidGuice.getInjector(context).injectMembers(this);
+        DroidGuice.instance().getInjector(context).injectMembers(this);
     }
 
     public Context getContext() {
diff --git a/roboguice/src/main/java/roboguice/base/RoboGuice.java b/roboguice/src/main/java/roboguice/base/RoboGuice.java
new file mode 100644
index 000000000..418358238
--- /dev/null
+++ b/roboguice/src/main/java/roboguice/base/RoboGuice.java
@@ -0,0 +1,103 @@
+package roboguice.base;
+
+import java.util.WeakHashMap;
+
+import roboguice.android.inject.ResourceListener;
+
+import com.google.inject.Guice;
+import com.google.inject.Injector;
+import com.google.inject.Module;
+import com.google.inject.Stage;
+import com.google.inject.spi.DefaultElementVisitor;
+import com.google.inject.spi.Element;
+import com.google.inject.spi.Elements;
+import com.google.inject.spi.StaticInjectionRequest;
+
+/**
+ * 
+ * <!--
+ * RoboGuice.java
+ * -->
+ * TODO Description
+ * 
+ * @param <T> Injection scope
+ */
+public class RoboGuice<T>{
+    public static Stage DEFAULT_STAGE = Stage.PRODUCTION;
+    
+    protected WeakHashMap<T,Injector> injectors = new WeakHashMap<T,Injector>();
+    protected WeakHashMap<T,ResourceListener> resourceListeners = new WeakHashMap<T, ResourceListener>();
+    
+    public WeakHashMap<T, Injector> injectors()
+    {
+        return injectors;
+    }
+    
+    /**
+     * Return the cached Injector instance for this application, or create a new one if necessary.
+     */
+    public Injector getScopedInjector(T scopedObject ) {
+        Injector rtrn = injectors.get(scopedObject);
+        if( rtrn!=null )
+            return rtrn;
+
+        synchronized (RoboGuice.class) {
+            rtrn = injectors.get(scopedObject);
+            if( rtrn!=null )
+                return rtrn;
+            
+            return setScopedInjector(scopedObject, DEFAULT_STAGE);
+        }
+    }
+    
+    /**
+     * Return the cached Injector instance for this application, or create a new one if necessary.
+     * If specifying your own modules, you must include a DefaultRoboModule for most things to work properly.
+     * Do something like the following:
+     *
+     * RoboGuice.setAppliationInjector( app, RoboGuice.DEFAULT_STAGE, Modules.override(RoboGuice.newDefaultRoboModule(app)).with(new MyModule() );
+     *
+     * @see com.google.inject.util.Modules#override(com.google.inject.Module...)
+     * @see roboguice.android.DroidGuice#setScopedInjector(android.app.Application, com.google.inject.Stage, com.google.inject.Module...)
+     * @see roboguice.android.DroidGuice#newDefaultRoboModule(android.app.Application)
+     * @see roboguice.android.DroidGuice#DEFAULT_STAGE
+     *
+     * If using this method with test cases, be sure to call {@link roboguice.android.DroidGuice.util#reset()} in your test teardown methods
+     * to avoid polluting our other tests with your custom injector.  Don't do this in your real application though.
+     *
+     */
+    public Injector setScopedInjector(final T scopedObject, Stage stage, Module... modules) {
+
+        // Do a little rewriting on the modules first to
+        // add static resource injection
+        for(Element element : Elements.getElements(modules)) {
+            element.acceptVisitor(new DefaultElementVisitor<Void>() {
+                @Override
+                public Void visit(StaticInjectionRequest element) {
+                    getResourceListener(scopedObject).requestStaticInjection(element.getType());
+                    return null;
+                }
+            });
+        }
+
+        synchronized (RoboGuice.class) {
+            final Injector rtrn = Guice.createInjector(stage, modules);
+            injectors.put(scopedObject,rtrn);
+            return rtrn;
+        }
+    }
+    
+    protected ResourceListener getResourceListener( T scopedObject ) {
+        ResourceListener resourceListener = resourceListeners.get(scopedObject);
+        if( resourceListener==null ) {
+            synchronized (RoboGuice.class) {
+                if( resourceListener==null ) {
+                    //FIXME ResourceListener
+//                    resourceListener = new ResourceListener( application );
+                    resourceListeners.put(scopedObject,resourceListener);
+                }
+            }
+        }
+        return resourceListener;
+    }
+}
diff --git a/roboguice/src/test/java/roboguice/android/RoboGuiceTest.java b/roboguice/src/test/java/roboguice/android/RoboGuiceTest.java
index 2e6915b2c..a6d89a55e 100644
--- a/roboguice/src/test/java/roboguice/android/RoboGuiceTest.java
+++ b/roboguice/src/test/java/roboguice/android/RoboGuiceTest.java
@@ -19,31 +19,31 @@
     
     @Before
     public void setup() {
-        DroidGuice.injectors.clear();
+        DroidGuice.instance().injectors().clear();
     }
     
     @Test
     public void destroyInjectorShouldRemoveContext() {
         final Activity activity = new RoboActivity();
-        DroidGuice.getInjector(activity);
+        DroidGuice.instance().getInjector(activity);
         
-        assertThat(DroidGuice.injectors.size(), equalTo(1));
+        assertThat(DroidGuice.instance().injectors().size(), equalTo(1));
         
-        DroidGuice.destroyInjector(activity);
-        assertThat(DroidGuice.injectors.size(), equalTo(1));
+        DroidGuice.instance().destroyInjector(activity);
+        assertThat(DroidGuice.instance().injectors().size(), equalTo(1));
 
-        DroidGuice.destroyInjector(Robolectric.application);
-        assertThat(DroidGuice.injectors.size(), equalTo(0));
+        DroidGuice.instance().destroyInjector(Robolectric.application);
+        assertThat(DroidGuice.instance().injectors().size(), equalTo(0));
     }
 
     @Test
     public void resetShouldRemoveContext() {
         final Activity activity = new RoboActivity();
-        DroidGuice.getInjector(activity);
+        DroidGuice.instance().getInjector(activity);
         
-        assertThat(DroidGuice.injectors.size(), equalTo(1));
+        assertThat(DroidGuice.instance().injectors().size(), equalTo(1));
         
         DroidGuice.util.reset();
-        assertThat(DroidGuice.injectors.size(), equalTo(0));
+        assertThat(DroidGuice.instance().injectors().size(), equalTo(0));
     }
 }
diff --git a/roboguice/src/test/java/roboguice/android/activity/ActivityInjectionTest.java b/roboguice/src/test/java/roboguice/android/activity/ActivityInjectionTest.java
index 501ec8b35..2029ddc47 100644
--- a/roboguice/src/test/java/roboguice/android/activity/ActivityInjectionTest.java
+++ b/roboguice/src/test/java/roboguice/android/activity/ActivityInjectionTest.java
@@ -43,7 +43,7 @@
 
     @Before
     public void setup() {
-        DroidGuice.setBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, DroidGuice.newDefaultRoboModule(Robolectric.application), new ModuleA());
+        DroidGuice.instance().setScopedInjector(Robolectric.application, Stage.DEVELOPMENT, DroidGuice.instance().newDefaultRoboModule(Robolectric.application), new ModuleA());
         activity = new DummyActivity();
         activity.setIntent( new Intent(Robolectric.application,DummyActivity.class).putExtra("foobar","goober") );
         activity.onCreate(null);
@@ -87,21 +87,21 @@ public void shouldInjectActivityAndRoboActivity() {
 
     @Test(expected = ConfigurationException.class)
     public void shouldNotStaticallyInjectViews() {
-        DroidGuice.setBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, DroidGuice.newDefaultRoboModule(Robolectric.application), new ModuleB());
+        DroidGuice.instance().setScopedInjector(Robolectric.application, Stage.DEVELOPMENT, DroidGuice.instance().newDefaultRoboModule(Robolectric.application), new ModuleB());
         final B b = new B();
         b.onCreate(null);
     }
 
     @Test(expected = ConfigurationException.class)
     public void shouldNotStaticallyInjectExtras() {
-        DroidGuice.setBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, DroidGuice.newDefaultRoboModule(Robolectric.application), new ModuleD());
+        DroidGuice.instance().setScopedInjector(Robolectric.application, Stage.DEVELOPMENT, DroidGuice.instance().newDefaultRoboModule(Robolectric.application), new ModuleD());
         final D d = new D();
         d.onCreate(null);
     }
 
     @Test(expected = ConfigurationException.class)
     public void shouldNotStaticallyInjectPreferenceViews() {
-        DroidGuice.setBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, DroidGuice.newDefaultRoboModule(Robolectric.application), new ModuleC());
+        DroidGuice.instance().setScopedInjector(Robolectric.application, Stage.DEVELOPMENT, DroidGuice.instance().newDefaultRoboModule(Robolectric.application), new ModuleC());
         final C c = new C();
         c.onCreate(null);
     }
@@ -122,7 +122,7 @@ public void shouldAllowBackgroundThreadsToFinishUsingContextAfterOnDestroy() thr
 
         final BlockingQueue<Context> queue = new ArrayBlockingQueue<Context>(1);
         new Thread()  {
-            final Context context = DroidGuice.getInjector(ref.get()).getInstance(Context.class);
+            final Context context = DroidGuice.instance().getInjector(ref.get()).getInstance(Context.class);
 
             @Override
             public void run() {
@@ -153,7 +153,7 @@ public void shouldBeAbleToGetContextProvidersInBackgroundThreads() throws Except
         f.onCreate(null);
 
         final FutureTask<Context> future = new FutureTask<Context>(new Callable<Context>() {
-            final ContextScopedProvider<Context> contextProvider = DroidGuice.getInjector(f).getInstance(Key.get(new TypeLiteral<ContextScopedProvider<Context>>(){}));
+            final ContextScopedProvider<Context> contextProvider = DroidGuice.instance().getInjector(f).getInstance(Key.get(new TypeLiteral<ContextScopedProvider<Context>>(){}));
             
             @Override
             public Context call() throws Exception {
diff --git a/roboguice/src/test/java/roboguice/android/application/ApplicationInjectionTest.java b/roboguice/src/test/java/roboguice/android/application/ApplicationInjectionTest.java
index 854653801..2ec0cdd1e 100644
--- a/roboguice/src/test/java/roboguice/android/application/ApplicationInjectionTest.java
+++ b/roboguice/src/test/java/roboguice/android/application/ApplicationInjectionTest.java
@@ -49,7 +49,7 @@ public void shouldBeAbleToInjectContextScopedItemsIntoApplication() {
         @Override
         public void onCreate() {
             super.onCreate();
-            DroidGuice.getInjector(this).injectMembers(this);
+            DroidGuice.instance().getInjector(this).injectMembers(this);
         }
     }
 
@@ -59,7 +59,7 @@ public void onCreate() {
         @Override
         public void onCreate() {
             super.onCreate();
-            DroidGuice.getInjector(this).injectMembers(this);
+            DroidGuice.instance().getInjector(this).injectMembers(this);
         }
     }
 
diff --git a/roboguice/src/test/java/roboguice/android/event/ObservesTypeListenerTest.java b/roboguice/src/test/java/roboguice/android/event/ObservesTypeListenerTest.java
index 85618fd3c..43cb8600a 100644
--- a/roboguice/src/test/java/roboguice/android/event/ObservesTypeListenerTest.java
+++ b/roboguice/src/test/java/roboguice/android/event/ObservesTypeListenerTest.java
@@ -36,7 +36,7 @@
     @Before
     public void setup() throws NoSuchMethodException {
         app = Robolectric.application;
-        injector = DroidGuice.getInjector(app);
+        injector = DroidGuice.instance().getInjector(app);
 
         eventManager = injector.getInstance(EventManager.class);
 
diff --git a/roboguice/src/test/java/roboguice/android/inject/ContextScopeTest.java b/roboguice/src/test/java/roboguice/android/inject/ContextScopeTest.java
index 3ba54d59a..c48bcf989 100644
--- a/roboguice/src/test/java/roboguice/android/inject/ContextScopeTest.java
+++ b/roboguice/src/test/java/roboguice/android/inject/ContextScopeTest.java
@@ -42,7 +42,7 @@ public void shouldHaveContextInScopeMapAfterOnCreate() throws Exception {
 
     @Test
     public void shouldBeAbleToOpenMultipleScopes() {
-        final ContextScope scope = DroidGuice.getBaseApplicationInjector(Robolectric.application).getInstance(ContextScope.class);
+        final ContextScope scope = DroidGuice.instance().getScopedInjector(Robolectric.application).getInstance(ContextScope.class);
         final Activity a = new A();
         final Activity b = new B();
 
@@ -54,7 +54,7 @@ public void shouldBeAbleToOpenMultipleScopes() {
 
     @Test(expected = IllegalArgumentException.class)
     public void shouldNotBeAbleToExitTheWrongScope() {
-        final ContextScope scope = DroidGuice.getBaseApplicationInjector(Robolectric.application).getInstance(ContextScope.class);
+        final ContextScope scope = DroidGuice.instance().getScopedInjector(Robolectric.application).getInstance(ContextScope.class);
         final Activity a = new A();
         final Activity b = new B();
 
diff --git a/roboguice/src/test/java/roboguice/android/inject/SharedPreferencesProviderTest.java b/roboguice/src/test/java/roboguice/android/inject/SharedPreferencesProviderTest.java
index 4ff4ca933..7cf6a98a5 100644
--- a/roboguice/src/test/java/roboguice/android/inject/SharedPreferencesProviderTest.java
+++ b/roboguice/src/test/java/roboguice/android/inject/SharedPreferencesProviderTest.java
@@ -42,7 +42,7 @@ public void shouldInjectDefaultSharedPrefs() throws Exception {
 
     @Test
     public void shouldInjectNamedSharedPrefs() throws Exception {
-        DroidGuice.setBaseApplicationInjector(Robolectric.application,DroidGuice.DEFAULT_STAGE, DroidGuice.newDefaultRoboModule(Robolectric.application), new ModuleA() );
+        DroidGuice.instance().setScopedInjector(Robolectric.application,DroidGuice.DEFAULT_STAGE, DroidGuice.instance().newDefaultRoboModule(Robolectric.application), new ModuleA() );
         try {
             
             final A a = new A();
@@ -84,7 +84,7 @@ public void shouldFallbackOnOldDefaultIfPresent() throws Exception {
 
     @Test
     public void shouldNotFallbackOnOldDefaultIfNamedFileSpecified() throws Exception {
-        DroidGuice.setBaseApplicationInjector(Robolectric.application,DroidGuice.DEFAULT_STAGE, DroidGuice.newDefaultRoboModule(Robolectric.application), new ModuleA() );
+        DroidGuice.instance().setScopedInjector(Robolectric.application,DroidGuice.DEFAULT_STAGE, DroidGuice.instance().newDefaultRoboModule(Robolectric.application), new ModuleA() );
 
         final File oldDefault = new File("shared_prefs/default.xml");
         final File oldDir = new File("shared_prefs");
diff --git a/roboguice/src/test/java/roboguice/android/view/ViewInjectionTest.java b/roboguice/src/test/java/roboguice/android/view/ViewInjectionTest.java
index 022ccb34b..00e0ec410 100644
--- a/roboguice/src/test/java/roboguice/android/view/ViewInjectionTest.java
+++ b/roboguice/src/test/java/roboguice/android/view/ViewInjectionTest.java
@@ -154,7 +154,7 @@ public ViewA(Context context) {
                 ref.setId(101);
                 addView(ref);
 
-                DroidGuice.getInjector(getContext()).injectMembers(this);
+                DroidGuice.instance().getInjector(getContext()).injectMembers(this);
             }
 
         }
@@ -189,7 +189,7 @@ public ViewA(Context context) {
                 ref.setTag("101");
                 addView(ref);
 
-                DroidGuice.getInjector(getContext()).injectMembers(this);
+                DroidGuice.instance().getInjector(getContext()).injectMembers(this);
             }
 
         }
