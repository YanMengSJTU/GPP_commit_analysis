diff --git a/roboguice/src/main/java/roboguice/base/util/PropertyLoader.java b/roboguice/src/main/java/roboguice/base/util/PropertyLoader.java
index db72e5dc4..bf7e50806 100644
--- a/roboguice/src/main/java/roboguice/base/util/PropertyLoader.java
+++ b/roboguice/src/main/java/roboguice/base/util/PropertyLoader.java
@@ -24,10 +24,29 @@
      */
     public static List<URL> urlsFor( String resource, Comparator<URL> comparator )
     {
+        return urlsFor( resource, comparator, PropertyLoader.class );
+    }
+
+    /**
+     * Returns a list of {@link URL}s return from {@link ClassLoader#getResources(String)}
+     * sorted by the comparator given. If no comparator is given, order is not guaranteed.
+     * 
+     * @param resource The path of the resource to look for
+     * @param comparator The comparator to sort the resources by
+     * @param clazz ( Optional ) If set, resources will be searched for with this class
+     * @return A list of URLs sorted by the given comparator
+     */
+    public static List<URL> urlsFor( String resource, Comparator<URL> comparator, Class<?> clazz )
+    {
+        if ( clazz == null )
+        {
+            clazz = PropertyLoader.class;
+        }
+        
         List<URL> allUrls = new ArrayList<URL>();
         
         try {
-            Enumeration<URL> urls = PropertyLoader.class.getClassLoader().getResources( resource );
+            Enumeration<URL> urls = clazz.getClassLoader().getResources( resource );
             allUrls = Collections.list(urls);
             
             if ( comparator != null )
@@ -35,9 +54,9 @@
                 Collections.sort(allUrls, comparator);
             }
             
-            } catch (IOException e) {
-                Ln.e( e );
-            }
+        } catch (IOException e) {
+            Ln.e( e );
+        }
         
         return allUrls;
     }
@@ -47,15 +66,35 @@
      * 
      * @param propertyFile The location of the property file to load
      * @param property ( Optional ) If set, the propertyFile will be loaded into this property
+     * @param comparator (Optional ) If set, properties will be sorted by this comparator
      * @return The {@link Properties} that was loaded, {@code null} if there was an error loading the property
      */
     public static Properties loadProperty( String propertyFile, Properties property, Comparator<URL> comparator )
     {
+       return loadProperty(propertyFile, property, comparator, PropertyLoader.class );
+    }
+
+    /**
+     * Loads a property file into specific ( or new ) {@link Properties} object
+     * 
+     * @param propertyFile The location of the property file to load
+     * @param property ( Optional ) If set, the propertyFile will be loaded into this property
+     * @param comparator (Optional ) If set, properties will be sorted by this comparator
+     * @param clazz (Optional ) Used to load properties
+     * @return The {@link Properties} that was loaded, {@code null} if there was an error loading the property
+     */
+    public static Properties loadProperty( String propertyFile, Properties property, Comparator<URL> comparator, Class<?> clazz )
+    {
+        if ( clazz == null )
+        {
+            clazz = PropertyLoader.class;
+        }
+        
         boolean set = false;
         Properties tmp = property == null ? new Properties() : property;
-
+        
         List<URL> allUrls = urlsFor( propertyFile, comparator );
-    
+        
         for( URL url : allUrls)
         {//for each url
             
@@ -89,7 +128,7 @@ public static Properties loadProperty( String propertyFile, Properties property,
                 }
             }
         }
-            
+        
         return set ? tmp : null;
     }
 
