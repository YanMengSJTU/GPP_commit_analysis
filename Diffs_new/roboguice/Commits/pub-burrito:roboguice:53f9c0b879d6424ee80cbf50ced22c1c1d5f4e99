diff --git a/roboguice/src/main/java/roboguice/android/util/logging/AndroidBaseConfig.java b/roboguice/src/main/java/roboguice/android/util/logging/AndroidBaseConfig.java
index c081f6ae8..146f95cd6 100644
--- a/roboguice/src/main/java/roboguice/android/util/logging/AndroidBaseConfig.java
+++ b/roboguice/src/main/java/roboguice/android/util/logging/AndroidBaseConfig.java
@@ -2,6 +2,7 @@
 
 import roboguice.base.util.logging.BaseConfig;
 import roboguice.base.util.logging.Ln;
+import roboguice.base.util.logging.LogLevel;
 
 import com.google.inject.Inject;
 
@@ -19,7 +20,7 @@ public AndroidBaseConfig(Application context) {
         try {
             packageName = context.getPackageName();
             final int flags = context.getPackageManager().getApplicationInfo(packageName, 0).flags;
-            minimumLogLevel = (flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0 ? Log.VERBOSE : Log.INFO;
+            minimumLogLevel = (flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0 ? LogLevel.VERBOSE.logLevel() : LogLevel.INFO.logLevel();
             scope = packageName.toUpperCase();
 
             Ln.d("Configuring Logging, minimum log level is %s", Ln.logLevelToString(minimumLogLevel) );
@@ -28,4 +29,5 @@ public AndroidBaseConfig(Application context) {
             Log.e(packageName, "Error configuring logger", e);
         }
     }
+    
 }
diff --git a/roboguice/src/main/java/roboguice/base/util/logging/LogLevel.java b/roboguice/src/main/java/roboguice/base/util/logging/LogLevel.java
index 620eff789..933f84a77 100644
--- a/roboguice/src/main/java/roboguice/base/util/logging/LogLevel.java
+++ b/roboguice/src/main/java/roboguice/base/util/logging/LogLevel.java
@@ -2,12 +2,12 @@
 
 public enum LogLevel {
 
-    VERBOSE ( 2 ),
-    DEBUG   ( 3 ),
-    INFO    ( 4 ),
-    WARN    ( 5 ),
-    ERROR   ( 6 ),
-    ASSERT  ( 7 )
+    VERBOSE ( 0 ),
+    DEBUG   ( 1 ),
+    INFO    ( 2 ),
+    WARN    ( 3 ),
+    ERROR   ( 4 ),
+    ASSERT  ( 5 )
     ;
     
     private int logLevel;
diff --git a/roboguice/src/main/java/roboguice/java/util/logging/JavaBaseConfig.java b/roboguice/src/main/java/roboguice/java/util/logging/JavaBaseConfig.java
new file mode 100644
index 000000000..25b899e06
--- /dev/null
+++ b/roboguice/src/main/java/roboguice/java/util/logging/JavaBaseConfig.java
@@ -0,0 +1,98 @@
+package roboguice.java.util.logging;
+
+import org.apache.log4j.BasicConfigurator;
+import org.apache.log4j.Level;
+import org.apache.log4j.Logger;
+
+import roboguice.base.util.logging.BaseConfig;
+import roboguice.base.util.logging.LogLevel;
+
+import com.google.inject.Inject;
+
+public class JavaBaseConfig extends BaseConfig {
+
+    public Logger logger;
+    
+    @Inject
+    public JavaBaseConfig ( String name )
+    {
+        BasicConfigurator.configure();
+        logger = Logger.getLogger(name);
+        
+        logger.setLevel( Level.ALL );
+        
+        minimumLogLevel = JavaLogLevel.ALL.getLogLevel();
+    }
+    
+    @Override
+    public void setLoggingLevel(int level) {
+        super.setLoggingLevel(level);
+        
+        logger.setLevel( JavaLogLevel.forLogLevel(level) );
+    }
+    
+    static enum JavaLogLevel
+    {
+        ALL( Level.ALL ),
+        DEBUG( Level.DEBUG ),
+        WARN( Level.WARN ),
+        INFO( Level.INFO ), 
+        ERROR( Level.ERROR ),
+        TRACE( Level.TRACE )
+        ;
+
+        private Level level;
+        
+        private JavaLogLevel( Level level )
+        {
+            this.level = level;
+        }
+        
+        public int getLogLevel()
+        {
+            switch( this )
+            {
+                case ALL:
+                    return LogLevel.VERBOSE.logLevel();
+                case DEBUG:
+                    return LogLevel.DEBUG.logLevel();
+                case WARN:
+                    return LogLevel.WARN.logLevel();
+                case INFO:
+                    return LogLevel.INFO.logLevel();
+                case ERROR:
+                    return LogLevel.ERROR.logLevel();
+                case TRACE:
+                    return LogLevel.ASSERT.logLevel();
+                default:
+                    return LogLevel.VERBOSE.logLevel();
+            }
+        }
+        
+        public static Level forLogLevel( int level )
+        {
+            LogLevel match = null;
+            for ( LogLevel logLevel : LogLevel.values() )
+            {
+                if ( logLevel.logLevel() == level )
+                {
+                    match = logLevel;
+                    break;
+                }
+            }
+            
+            if ( match != null )
+            {
+                for ( JavaLogLevel logLevel : values() )
+                {
+                    if ( logLevel.getLogLevel() == level )
+                    {
+                        return logLevel.level;
+                    }
+                }
+            }
+            
+            return Level.ALL;
+        }
+    }
+}
diff --git a/roboguice/src/main/java/roboguice/java/util/logging/JavaPrint.java b/roboguice/src/main/java/roboguice/java/util/logging/JavaPrint.java
new file mode 100644
index 000000000..ebed3aaa5
--- /dev/null
+++ b/roboguice/src/main/java/roboguice/java/util/logging/JavaPrint.java
@@ -0,0 +1,13 @@
+package roboguice.java.util.logging;
+
+import roboguice.base.util.logging.Print;
+import roboguice.java.util.logging.JavaBaseConfig.JavaLogLevel;
+
+public class JavaPrint extends Print {
+
+    @Override
+    public int println(int priority, String msg) {
+        ( ( JavaBaseConfig ) config ).logger.log( JavaLogLevel.forLogLevel( priority ), msg );
+        return 0;
+    }
+}
