diff --git a/.gitignore b/.gitignore
index 93e84f9a1..afacb8262 100644
--- a/.gitignore
+++ b/.gitignore
@@ -20,6 +20,7 @@ local.properties
 #Eclipse files
 .project
 .classpath
+.checkstyle
 .settings/
 
 # IntelliJ IDEA files
diff --git a/.travis.yml b/.travis.yml
index 6ae120042..995d399b4 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -19,4 +19,4 @@ android:
 
 script:
     - echo "Travis branch is $TRAVIS_BRANCH"
-    - if [ "$TRAVIS_BRANCH" == "master" -a "TRAVIS_PULL_REQUEST" == "false" ] ; then mvn deploy -P guice --settings target/travis/settings.xml ; else mvn install -Pguice --settings target/travis/settings.xml ; fi
+    - if [ "$TRAVIS_BRANCH" == "master" -a "TRAVIS_PULL_REQUEST" == "false" ] ; then mvn deploy --settings target/travis/settings.xml ; else mvn install --settings target/travis/settings.xml ; fi
diff --git a/additional-tests/pom.xml b/additional-tests/pom.xml
index ab82aca6f..c0e7a31ae 100644
--- a/additional-tests/pom.xml
+++ b/additional-tests/pom.xml
@@ -9,7 +9,7 @@
 	<parent>
 		<groupId>org.roboguice</groupId>
 		<artifactId>roboguice-aggregator</artifactId>
-		<version>3.0-alpha-3-SNAPSHOT</version>
+		<version>3.0-alpha-4-SNAPSHOT</version>
 	</parent>
 
 	<dependencies>
diff --git a/additional-tests/src/test/java/roboguice/additionaltests/ConstructorModuleTest.java b/additional-tests/src/test/java/roboguice/additionaltests/ConstructorModuleTest.java
index 62959b2e8..62a759172 100644
--- a/additional-tests/src/test/java/roboguice/additionaltests/ConstructorModuleTest.java
+++ b/additional-tests/src/test/java/roboguice/additionaltests/ConstructorModuleTest.java
@@ -17,7 +17,7 @@ public void testShouldUseConstructorWithApplicationArgument() {
 		//GIVEN
 		Pojo instance = new Pojo();
 		//WHEN
-		RoboGuice.createBaseApplicationInjector(Robolectric.application).injectMembers(instance);
+		RoboGuice.getOrCreateBaseApplicationInjector(Robolectric.application).injectMembers(instance);
 		//THEN
 		//will only work if the TestModule could be loaded properly
 		assertThat( instance.getFoo(), notNullValue());
diff --git a/astroboy/AndroidManifest.xml b/astroboy/AndroidManifest.xml
index 97c638f98..3632a4bdb 100644
--- a/astroboy/AndroidManifest.xml
+++ b/astroboy/AndroidManifest.xml
@@ -22,9 +22,6 @@
         </activity>
         <activity android:name=".activity.FightForcesOfEvilActivity" />
 
-        <meta-data
-            android:name="roboguice.annotations.packages"
-            android:value="astroboy" />
     </application>
 
 </manifest>
\ No newline at end of file
diff --git a/astroboy/pom.xml b/astroboy/pom.xml
index a61d371c8..e71fee44d 100644
--- a/astroboy/pom.xml
+++ b/astroboy/pom.xml
@@ -9,7 +9,7 @@
 	<parent>
 		<groupId>org.roboguice</groupId>
 		<artifactId>roboguice-aggregator</artifactId>
-		<version>3.0-alpha-3-SNAPSHOT</version>
+		<version>3.0-alpha-4-SNAPSHOT</version>
 	</parent>
 
 	<dependencies>
@@ -84,9 +84,6 @@
 				<configuration>
 					<source>${java.version}</source>
 					<target>${java.version}</target>
-					<compilerArgs>
-						<arg>-AguiceAnnotationDatabasePackageName=astroboy</arg>
-					</compilerArgs>
 				</configuration>
 			</plugin>
 		</plugins>
diff --git a/astroboy/src/test/java/org/roboguice/astroboy/activity/AstroboyMasterConsoleTest.java b/astroboy/src/test/java/org/roboguice/astroboy/activity/AstroboyMasterConsoleTest.java
index 7ec57597b..7209baa35 100644
--- a/astroboy/src/test/java/org/roboguice/astroboy/activity/AstroboyMasterConsoleTest.java
+++ b/astroboy/src/test/java/org/roboguice/astroboy/activity/AstroboyMasterConsoleTest.java
@@ -33,9 +33,9 @@
     @Before
     public void setup() {
         // Override the default RoboGuice module
-    	astroboyMasterConsoleController = Robolectric.buildActivity(AstroboyMasterConsole.class);
-    	astroboyMasterConsole = astroboyMasterConsoleController.get();
-    	RoboGuice.overrideApplicationInjector(Robolectric.application, new MyTestModule());
+        astroboyMasterConsoleController = Robolectric.buildActivity(AstroboyMasterConsole.class);
+        astroboyMasterConsole = astroboyMasterConsoleController.get();
+        RoboGuice.overrideApplicationInjector(Robolectric.application, new MyTestModule());
         astroboyMasterConsoleController.create().start();
     }
 
@@ -47,16 +47,16 @@ public void teardown() {
 
     @Test
     public void clickOnBrushTeethTriggersRemoteControl() {
-    	astroboyMasterConsole.brushTeethButton.callOnClick();
-    	verify(astroboyRemoteControlMock).brushTeeth();
+        astroboyMasterConsole.brushTeethButton.callOnClick();
+        verify(astroboyRemoteControlMock).brushTeeth();
     }
 
 
     public class MyTestModule extends AbstractModule {
         @Override
         protected void configure() {
-        	bind(Vibrator.class).toInstance(vibratorMock);
-        	bind(Activity.class).toInstance(astroboyMasterConsole);
+            bind(Vibrator.class).toInstance(vibratorMock);
+            bind(Activity.class).toInstance(astroboyMasterConsole);
             bind(AstroboyRemoteControl.class).toInstance(astroboyRemoteControlMock);
         }
     }
diff --git a/astroboy/src/test/java/org/roboguice/astroboy/activity/FightForcesOfEvilTest.java b/astroboy/src/test/java/org/roboguice/astroboy/activity/FightForcesOfEvilTest.java
index 04939ad69..5b6f79fb2 100644
--- a/astroboy/src/test/java/org/roboguice/astroboy/activity/FightForcesOfEvilTest.java
+++ b/astroboy/src/test/java/org/roboguice/astroboy/activity/FightForcesOfEvilTest.java
@@ -27,7 +27,7 @@
     @Before
     public void setup() {
         // Override the default RoboGuice module
-    	RoboGuice.overrideApplicationInjector(Robolectric.application, new MyTestModule());
+        RoboGuice.overrideApplicationInjector(Robolectric.application, new MyTestModule());
     }
 
     @After
@@ -38,9 +38,9 @@ public void teardown() {
 
     @Test
     public void createTriggersPunch() throws InterruptedException {
-    	Robolectric.buildActivity(FightForcesOfEvilActivity.class).create().start();
-    	Thread.sleep(6*1000);
-    	verify(astroboyMock, Mockito.times(10)).punch();
+        Robolectric.buildActivity(FightForcesOfEvilActivity.class).create().start();
+        Thread.sleep(6*1000);
+        verify(astroboyMock, Mockito.times(10)).punch();
     }
 
 
diff --git a/astroboy/src/test/java/org/roboguice/astroboy/controller/Astroboy1Test.java b/astroboy/src/test/java/org/roboguice/astroboy/controller/Astroboy1Test.java
index 48ffba110..c084b6a27 100644
--- a/astroboy/src/test/java/org/roboguice/astroboy/controller/Astroboy1Test.java
+++ b/astroboy/src/test/java/org/roboguice/astroboy/controller/Astroboy1Test.java
@@ -29,7 +29,7 @@
     public void setup() {
        RoboGuice.setUseAnnotationDatabases(false);
        context = Robolectric.buildActivity(RoboActivity.class).create().get();
-       astroboy = RoboGuice.getInjector(context).getInstance(Astroboy.class);
+       astroboy = RoboGuice.createInjector(context).getInstance(Astroboy.class);
     }
 
     @Test
diff --git a/astroboy/src/test/java/org/roboguice/astroboy/controller/Astroboy2Test.java b/astroboy/src/test/java/org/roboguice/astroboy/controller/Astroboy2Test.java
index ad9af1740..ecb363653 100644
--- a/astroboy/src/test/java/org/roboguice/astroboy/controller/Astroboy2Test.java
+++ b/astroboy/src/test/java/org/roboguice/astroboy/controller/Astroboy2Test.java
@@ -50,7 +50,7 @@ public void teardown() {
     public void brushingTeethShouldCausePhoneToVibrate() {
 
         // get the astroboy instance
-        final Astroboy astroboy = RoboGuice.getInjector(context).getInstance(Astroboy.class);
+        final Astroboy astroboy = RoboGuice.createInjector(context).getInstance(Astroboy.class);
 
         // do the thing
         astroboy.brushTeeth();
diff --git a/astroboy/src/test/java/org/roboguice/astroboy/controller/Astroboy3Test.java b/astroboy/src/test/java/org/roboguice/astroboy/controller/Astroboy3Test.java
index d35ce78e9..d49271be6 100644
--- a/astroboy/src/test/java/org/roboguice/astroboy/controller/Astroboy3Test.java
+++ b/astroboy/src/test/java/org/roboguice/astroboy/controller/Astroboy3Test.java
@@ -40,7 +40,7 @@ public void teardown() {
     public void brushingTeethShouldCausePhoneToVibrate() {
 
         // get the astroboy instance
-        final Astroboy astroboy = RoboGuice.getInjector(Robolectric.application).getInstance(Astroboy.class);
+        final Astroboy astroboy = RoboGuice.createInjector(Robolectric.application).getInstance(Astroboy.class);
 
         // do the thing
         astroboy.brushTeeth();
diff --git a/pom.xml b/pom.xml
index d3415df3d..bb952dd38 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
 	<groupId>org.roboguice</groupId>
 	<artifactId>roboguice-aggregator</artifactId>
 	<name>Aggregator</name>
-	<version>3.0-alpha-3-SNAPSHOT</version>
+	<version>3.0-alpha-4-SNAPSHOT</version>
 	<packaging>pom</packaging>
 
 	<prerequisites>
@@ -12,6 +12,7 @@
 	</prerequisites>
 
 	<modules>
+		<module>guice</module>
 		<module>roboblender</module>
 		<module>roboguice</module>
 		<module>additional-tests</module>
@@ -321,15 +322,4 @@
 			</plugin>
 		</plugins>
 	</build>
-	
-	<profiles>
-	    <profile>
-	        <!-- To build Guice fork as well -->
-	        <id>guice</id>
-	        <modules>
-	            <module>guice</module>
-	        </modules>
-	    </profile>
-	</profiles>
-
 </project>
diff --git a/roboblender/pom.xml b/roboblender/pom.xml
index a51c7c278..8f2386ec8 100644
--- a/roboblender/pom.xml
+++ b/roboblender/pom.xml
@@ -10,7 +10,7 @@
 	<parent>
 		<groupId>org.roboguice</groupId>
 		<artifactId>roboguice-aggregator</artifactId>
-		<version>3.0-alpha-3-SNAPSHOT</version>
+		<version>3.0-alpha-4-SNAPSHOT</version>
 	</parent>
 
 	<properties>
diff --git a/roboguice/.checkstyle b/roboguice/.checkstyle
deleted file mode 100644
index 6199c9e51..000000000
--- a/roboguice/.checkstyle
+++ /dev/null
@@ -1,10 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<fileset-config file-format-version="1.2.0" simple-config="false" sync-formatter="true">
-  <local-check-config name="roboguice_checks" location="/Users/Administrateur/git/roboguice/roboguice_checks.xml" type="external" description="">
-    <additional-data name="protect-config-file" value="false"/>
-  </local-check-config>
-  <fileset name="all" enabled="true" check-config-name="roboguice_checks" local="true">
-    <file-match-pattern match-pattern="src/main/java/.*.*/.*.java$" include-pattern="true"/>
-  </fileset>
-</fileset-config>
diff --git a/roboguice/.classpath b/roboguice/.classpath
deleted file mode 100644
index fd7ad7fbd..000000000
--- a/roboguice/.classpath
+++ /dev/null
@@ -1,26 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" output="target/classes" path="src/main/java">
-		<attributes>
-			<attribute name="optional" value="true"/>
-			<attribute name="maven.pomderived" value="true"/>
-		</attributes>
-	</classpathentry>
-	<classpathentry kind="src" output="target/test-classes" path="src/test/java">
-		<attributes>
-			<attribute name="optional" value="true"/>
-			<attribute name="maven.pomderived" value="true"/>
-		</attributes>
-	</classpathentry>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6">
-		<attributes>
-			<attribute name="maven.pomderived" value="true"/>
-		</attributes>
-	</classpathentry>
-	<classpathentry kind="con" path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER">
-		<attributes>
-			<attribute name="maven.pomderived" value="true"/>
-		</attributes>
-	</classpathentry>
-	<classpathentry kind="output" path="target/classes"/>
-</classpath>
diff --git a/roboguice/dependency-reduced-pom.xml b/roboguice/dependency-reduced-pom.xml
index 44e6229c3..1f8b69a61 100644
--- a/roboguice/dependency-reduced-pom.xml
+++ b/roboguice/dependency-reduced-pom.xml
@@ -3,7 +3,7 @@
   <parent>
     <artifactId>roboguice-aggregator</artifactId>
     <groupId>org.roboguice</groupId>
-    <version>3.0-alpha-3-SNAPSHOT</version>
+    <version>3.0-alpha-4-SNAPSHOT</version>
   </parent>
   <modelVersion>4.0.0</modelVersion>
   <artifactId>roboguice</artifactId>
@@ -169,7 +169,7 @@
     <dependency>
       <groupId>org.roboguice</groupId>
       <artifactId>roboblender</artifactId>
-      <version>3.0-alpha-3-SNAPSHOT</version>
+      <version>3.0-alpha-4-SNAPSHOT</version>
       <scope>provided</scope>
       <exclusions>
         <exclusion>
diff --git a/roboguice/pom.xml b/roboguice/pom.xml
index d7f60f44f..a799e3237 100644
--- a/roboguice/pom.xml
+++ b/roboguice/pom.xml
@@ -8,7 +8,7 @@
 	<parent>
 		<groupId>org.roboguice</groupId>
 		<artifactId>roboguice-aggregator</artifactId>
-		<version>3.0-alpha-3-SNAPSHOT</version>
+		<version>3.0-alpha-4-SNAPSHOT</version>
 	</parent>
 
 	<dependencies>
diff --git a/roboguice/src/main/java/roboguice/RoboGuice.java b/roboguice/src/main/java/roboguice/RoboGuice.java
index 88b764f5c..8cb9e8d83 100644
--- a/roboguice/src/main/java/roboguice/RoboGuice.java
+++ b/roboguice/src/main/java/roboguice/RoboGuice.java
@@ -40,7 +40,7 @@
  * There are two types of injectors:
  *
  * 1. The base application injector, which is not typically used directly by the user.
- * 2. The ContextScopedInjector, which is obtained by calling {@link #getInjector(android.content.Context)}, and knows about
+ * 2. The ContextScopedInjector, which is obtained by calling {@link #createInjector(android.content.Context)}, and knows about
  *    your current context, whether it's an activity, service, or something else.
  * 
  * BUG hashmap should also key off of stage and modules list
@@ -76,7 +76,7 @@ private RoboGuice() {
     /**
      * Return the cached Injector instance for this application, or create a new one if necessary.
      */
-    public static Injector createBaseApplicationInjector(Application application) {
+    public static Injector getOrCreateBaseApplicationInjector(Application application) {
         Injector rtrn = injectors.get(application);
         if( rtrn!=null )
             return rtrn;
@@ -86,7 +86,7 @@ public static Injector createBaseApplicationInjector(Application application) {
             if( rtrn!=null )
                 return rtrn;
 
-            return createBaseApplicationInjector(application, DEFAULT_STAGE);
+            return getOrCreateBaseApplicationInjector(application, DEFAULT_STAGE);
         }
     }
 
@@ -106,7 +106,7 @@ public static Injector createBaseApplicationInjector(Application application) {
      * to avoid polluting our other tests with your custom injector.  Don't do this in your real application though.
      * <b>One of RoboGuice's entry points</b>.
      */
-    public static Injector createBaseApplicationInjector(final Application application, Stage stage, Module... modules ) {
+    public static Injector getOrCreateBaseApplicationInjector(final Application application, Stage stage, Module... modules ) {
         final Stopwatch stopwatch = new Stopwatch();
         synchronized (RoboGuice.class) {
             initializeAnnotationDatabaseFinderAndHierarchyTraversalFilterFactory(application);
@@ -121,7 +121,7 @@ public static Injector createBaseApplicationInjector(final Application applicati
      * RoboGuice.overrideApplicationInjector( app, new TestModule() );
      *
      * @see com.google.inject.util.Modules#override(com.google.inject.Module...)
-     * @see roboguice.RoboGuice#createBaseApplicationInjector(android.app.Application, com.google.inject.Stage, com.google.inject.Module...)
+     * @see roboguice.RoboGuice#getOrCreateBaseApplicationInjector(android.app.Application, com.google.inject.Stage, com.google.inject.Module...)
      * @see roboguice.RoboGuice#newDefaultRoboModule(android.app.Application)
      * @see roboguice.RoboGuice#DEFAULT_STAGE
      *
@@ -130,7 +130,7 @@ public static Injector createBaseApplicationInjector(final Application applicati
      */
     public static Injector overrideApplicationInjector(final Application application,  Module... overrideModules) {
         synchronized (RoboGuice.class) {
-            final List<Module> baseModules = getModulesFromManifest(application);
+            final List<Module> baseModules = extractModulesFromManifest(application);
             final Injector rtrn = Guice.createInjector(DEFAULT_STAGE, Modules.override(baseModules).with(overrideModules));
             injectors.put(application,rtrn);
             return rtrn;
@@ -141,17 +141,17 @@ public static Injector overrideApplicationInjector(final Application application
      * Return the cached Injector instance for this application, or create a new one if necessary.
      * <b>One of RoboGuice's entry points</b>.
      */
-    public static Injector createBaseApplicationInjector(Application application, Stage stage) {
+    public static Injector getOrCreateBaseApplicationInjector(Application application, Stage stage) {
         final Stopwatch stopwatch = new Stopwatch();
 
         synchronized (RoboGuice.class) {
             initializeAnnotationDatabaseFinderAndHierarchyTraversalFilterFactory(application);
-            final List<Module> modules = getModulesFromManifest(application);
+            final List<Module> modules = extractModulesFromManifest(application);
             return createGuiceInjector(application, stage, stopwatch, modules.toArray(new Module[modules.size()]));
         }
     }
 
-    private static List<Module> getModulesFromManifest(Application application) {
+    private static List<Module> extractModulesFromManifest(Application application) {
         try {
             final ArrayList<Module> modules = new ArrayList<Module>();
 
@@ -191,16 +191,16 @@ private static Injector createGuiceInjector(final Application application, Stage
         }
     }
 
-    public static RoboInjector getInjector(Context context) {
+    public static RoboInjector createInjector(Context context) {
         final Application application = (Application)context.getApplicationContext();
-        return new ContextScopedRoboInjector(context, createBaseApplicationInjector(application));
+        return new ContextScopedRoboInjector(context, getOrCreateBaseApplicationInjector(application));
     }
 
     /**
      * A shortcut for RoboGuice.getInjector(context).injectMembers(o);
      */
     public static <T> T injectMembers( Context context, T t ) {
-        getInjector(context).injectMembers(t);
+        createInjector(context).injectMembers(t);
         return t;
     }
 
@@ -243,7 +243,7 @@ protected static ViewListener getViewListener( final Application application ) {
     }
 
     public static void destroyInjector(Context context) {
-        final RoboInjector injector = getInjector(context);
+        final RoboInjector injector = createInjector(context);
         injector.getInstance(EventManager.class).destroy();
         //noinspection SuspiciousMethodCalls
         injectors.remove(context); // it's okay, Context is an Application
diff --git a/roboguice/src/main/java/roboguice/activity/RoboAccountAuthenticatorActivity.java b/roboguice/src/main/java/roboguice/activity/RoboAccountAuthenticatorActivity.java
index b0bbfc261..4bf4ed1fc 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboAccountAuthenticatorActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboAccountAuthenticatorActivity.java
@@ -67,7 +67,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -142,7 +142,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 
diff --git a/roboguice/src/main/java/roboguice/activity/RoboActionBarActivity.java b/roboguice/src/main/java/roboguice/activity/RoboActionBarActivity.java
index 62c620dbc..4f1094450 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboActionBarActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboActionBarActivity.java
@@ -82,7 +82,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -157,7 +157,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onSupportContentChanged() {
         super.onSupportContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 
diff --git a/roboguice/src/main/java/roboguice/activity/RoboActivity.java b/roboguice/src/main/java/roboguice/activity/RoboActivity.java
index 9bc03e0f8..8ec38f15e 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboActivity.java
@@ -87,7 +87,7 @@
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         stopwatch = new Stopwatch();
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         stopwatch.resetAndLog("RoboActivity creation of injector");
         eventManager = injector.getInstance(EventManager.class);
         stopwatch.resetAndLog("RoboActivity creation of eventmanager");
@@ -167,7 +167,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 
@@ -210,8 +210,8 @@ protected static View injectOnCreateView(String name, Context context, Attribute
         try {
             final Constructor<?> constructor = Class.forName(name).getConstructor(Context.class, AttributeSet.class);
             final View view = (View) constructor.newInstance(context, attrs);
-            RoboGuice.getInjector(context).injectMembers(view);
-            RoboGuice.getInjector(context).injectViewMembers(view);
+            RoboGuice.createInjector(context).injectMembers(view);
+            RoboGuice.createInjector(context).injectViewMembers(view);
             return view;
         } catch (Exception e) {
             throw new RuntimeException(e);
diff --git a/roboguice/src/main/java/roboguice/activity/RoboActivityGroup.java b/roboguice/src/main/java/roboguice/activity/RoboActivityGroup.java
index 990f321ce..1568f91f2 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboActivityGroup.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboActivityGroup.java
@@ -69,7 +69,7 @@
     @Override
     @Deprecated
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -153,7 +153,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Deprecated
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 
diff --git a/roboguice/src/main/java/roboguice/activity/RoboExpandableListActivity.java b/roboguice/src/main/java/roboguice/activity/RoboExpandableListActivity.java
index 78e40225d..129f162ae 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboExpandableListActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboExpandableListActivity.java
@@ -66,7 +66,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -141,7 +141,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 
diff --git a/roboguice/src/main/java/roboguice/activity/RoboFragmentActivity.java b/roboguice/src/main/java/roboguice/activity/RoboFragmentActivity.java
index 038507641..fe9513392 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboFragmentActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboFragmentActivity.java
@@ -57,7 +57,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -132,7 +132,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 
diff --git a/roboguice/src/main/java/roboguice/activity/RoboLauncherActivity.java b/roboguice/src/main/java/roboguice/activity/RoboLauncherActivity.java
index 1720ade33..b02c19a93 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboLauncherActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboLauncherActivity.java
@@ -67,7 +67,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -142,7 +142,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 
diff --git a/roboguice/src/main/java/roboguice/activity/RoboListActivity.java b/roboguice/src/main/java/roboguice/activity/RoboListActivity.java
index ebf727600..a91beca02 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboListActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboListActivity.java
@@ -67,7 +67,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -142,7 +142,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 
diff --git a/roboguice/src/main/java/roboguice/activity/RoboMapActivity.java b/roboguice/src/main/java/roboguice/activity/RoboMapActivity.java
index 28d6d1a2e..4a1137bfb 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboMapActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboMapActivity.java
@@ -65,7 +65,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -140,7 +140,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 
diff --git a/roboguice/src/main/java/roboguice/activity/RoboPreferenceActivity.java b/roboguice/src/main/java/roboguice/activity/RoboPreferenceActivity.java
index 7be912057..b733fd6df 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboPreferenceActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboPreferenceActivity.java
@@ -77,7 +77,7 @@
     /** {@inheritDoc } */
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         preferenceListener = injector.getInstance(PreferenceListener.class);
         injector.injectMembersWithoutViews(this);
@@ -96,7 +96,7 @@ protected void onSaveInstanceState(Bundle outState) {
     public void setPreferenceScreen(PreferenceScreen preferenceScreen) {
         super.setPreferenceScreen(preferenceScreen);
 
-        final ContextScope scope = RoboGuice.getInjector(this).getInstance(ContextScope.class);
+        final ContextScope scope = RoboGuice.createInjector(this).getInstance(ContextScope.class);
         synchronized (ContextScope.class) {
             scope.enter(this);
             try {
@@ -169,7 +169,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 
diff --git a/roboguice/src/main/java/roboguice/activity/RoboSherlockAccountAuthenticatorActivity.java b/roboguice/src/main/java/roboguice/activity/RoboSherlockAccountAuthenticatorActivity.java
index e6acaec79..9547c3974 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboSherlockAccountAuthenticatorActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboSherlockAccountAuthenticatorActivity.java
@@ -63,7 +63,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -132,7 +132,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 
diff --git a/roboguice/src/main/java/roboguice/activity/RoboSherlockActivity.java b/roboguice/src/main/java/roboguice/activity/RoboSherlockActivity.java
index 3573f6549..f6ab50f73 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboSherlockActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboSherlockActivity.java
@@ -60,7 +60,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -129,7 +129,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 
diff --git a/roboguice/src/main/java/roboguice/activity/RoboSherlockFragmentActivity.java b/roboguice/src/main/java/roboguice/activity/RoboSherlockFragmentActivity.java
index 2baa8e34e..b123ac2ae 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboSherlockFragmentActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboSherlockFragmentActivity.java
@@ -44,7 +44,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -113,7 +113,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 
diff --git a/roboguice/src/main/java/roboguice/activity/RoboSherlockListActivity.java b/roboguice/src/main/java/roboguice/activity/RoboSherlockListActivity.java
index 0de5cc5bb..9a656bc35 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboSherlockListActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboSherlockListActivity.java
@@ -60,7 +60,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -129,7 +129,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 
diff --git a/roboguice/src/main/java/roboguice/activity/RoboSherlockPreferenceActivity.java b/roboguice/src/main/java/roboguice/activity/RoboSherlockPreferenceActivity.java
index 33310d2d3..6ad3e44e4 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboSherlockPreferenceActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboSherlockPreferenceActivity.java
@@ -64,7 +64,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         preferenceListener = injector.getInstance(PreferenceListener.class);
         injector.injectMembersWithoutViews(this);
@@ -77,7 +77,7 @@ protected void onCreate(Bundle savedInstanceState) {
     public void setPreferenceScreen(PreferenceScreen preferenceScreen) {
         super.setPreferenceScreen(preferenceScreen);
 
-        final ContextScope scope = RoboGuice.getInjector(this).getInstance(ContextScope.class);
+        final ContextScope scope = RoboGuice.createInjector(this).getInstance(ContextScope.class);
         synchronized (ContextScope.class) {
             scope.enter(this);
             try {
@@ -150,7 +150,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 
diff --git a/roboguice/src/main/java/roboguice/activity/RoboSplashActivity.java b/roboguice/src/main/java/roboguice/activity/RoboSplashActivity.java
index b70402043..645f50991 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboSplashActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboSplashActivity.java
@@ -36,7 +36,7 @@ public void run() {
                 // Set the execution context for this thread in case the user
                 // want to use the injector
                 final Application app = getApplication();
-                RoboGuice.createBaseApplicationInjector(getApplication());
+                RoboGuice.getOrCreateBaseApplicationInjector(getApplication());
 
 
                 doStuffInBackground(app);
diff --git a/roboguice/src/main/java/roboguice/activity/RoboTabActivity.java b/roboguice/src/main/java/roboguice/activity/RoboTabActivity.java
index daefa6acc..01b056b9e 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboTabActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboTabActivity.java
@@ -69,7 +69,7 @@
     @Override
     @Deprecated
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -153,7 +153,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Deprecated
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 
diff --git a/roboguice/src/main/java/roboguice/config/DefaultRoboModule.java b/roboguice/src/main/java/roboguice/config/DefaultRoboModule.java
index b4b4e0983..86029d7ba 100644
--- a/roboguice/src/main/java/roboguice/config/DefaultRoboModule.java
+++ b/roboguice/src/main/java/roboguice/config/DefaultRoboModule.java
@@ -82,7 +82,7 @@
  * RoboGuice.setAppliationInjector( app, RoboGuice.DEFAULT_STAGE, Modules.override(RoboGuice.newDefaultRoboModule(app)).with(new MyModule() );
  *
  * @see com.google.inject.util.Modules#override(com.google.inject.Module...)
- * @see roboguice.RoboGuice#createBaseApplicationInjector(android.app.Application, com.google.inject.Stage, com.google.inject.Module...)
+ * @see roboguice.RoboGuice#getOrCreateBaseApplicationInjector(android.app.Application, com.google.inject.Stage, com.google.inject.Module...)
  * @see roboguice.RoboGuice#newDefaultRoboModule(android.app.Application)
  * @see roboguice.RoboGuice#DEFAULT_STAGE
  *
diff --git a/roboguice/src/main/java/roboguice/content/RoboContentProvider.java b/roboguice/src/main/java/roboguice/content/RoboContentProvider.java
index 75abf8b01..1a7678748 100644
--- a/roboguice/src/main/java/roboguice/content/RoboContentProvider.java
+++ b/roboguice/src/main/java/roboguice/content/RoboContentProvider.java
@@ -14,7 +14,7 @@
 
     @Override
     public boolean onCreate() {
-        RoboGuice.getInjector(getContext()).injectMembers(this);
+        RoboGuice.createInjector(getContext()).injectMembers(this);
         return true;
     }
 }
diff --git a/roboguice/src/main/java/roboguice/fragment/RoboDialogFragment.java b/roboguice/src/main/java/roboguice/fragment/RoboDialogFragment.java
index c05cd9350..99ef013e9 100644
--- a/roboguice/src/main/java/roboguice/fragment/RoboDialogFragment.java
+++ b/roboguice/src/main/java/roboguice/fragment/RoboDialogFragment.java
@@ -15,12 +15,12 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        RoboGuice.createInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
+        RoboGuice.createInjector(getActivity()).injectViewMembers(this);
     }
 }
diff --git a/roboguice/src/main/java/roboguice/fragment/RoboFragment.java b/roboguice/src/main/java/roboguice/fragment/RoboFragment.java
index 7a894f39d..08d91f00d 100644
--- a/roboguice/src/main/java/roboguice/fragment/RoboFragment.java
+++ b/roboguice/src/main/java/roboguice/fragment/RoboFragment.java
@@ -15,12 +15,12 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        RoboGuice.createInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
+        RoboGuice.createInjector(getActivity()).injectViewMembers(this);
     }
 }
diff --git a/roboguice/src/main/java/roboguice/fragment/RoboListFragment.java b/roboguice/src/main/java/roboguice/fragment/RoboListFragment.java
index f62d5ec08..7588f98bd 100644
--- a/roboguice/src/main/java/roboguice/fragment/RoboListFragment.java
+++ b/roboguice/src/main/java/roboguice/fragment/RoboListFragment.java
@@ -15,12 +15,12 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        RoboGuice.createInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
+        RoboGuice.createInjector(getActivity()).injectViewMembers(this);
     }
 }
diff --git a/roboguice/src/main/java/roboguice/fragment/RoboSherlockDialogFragment.java b/roboguice/src/main/java/roboguice/fragment/RoboSherlockDialogFragment.java
index e880f9510..4642ea465 100644
--- a/roboguice/src/main/java/roboguice/fragment/RoboSherlockDialogFragment.java
+++ b/roboguice/src/main/java/roboguice/fragment/RoboSherlockDialogFragment.java
@@ -16,12 +16,12 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        RoboGuice.createInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
+        RoboGuice.createInjector(getActivity()).injectViewMembers(this);
     }
 }
diff --git a/roboguice/src/main/java/roboguice/fragment/RoboSherlockFragment.java b/roboguice/src/main/java/roboguice/fragment/RoboSherlockFragment.java
index 59144a46d..5cf7b7cdf 100644
--- a/roboguice/src/main/java/roboguice/fragment/RoboSherlockFragment.java
+++ b/roboguice/src/main/java/roboguice/fragment/RoboSherlockFragment.java
@@ -16,12 +16,12 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        RoboGuice.createInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
+        RoboGuice.createInjector(getActivity()).injectViewMembers(this);
     }
 }
diff --git a/roboguice/src/main/java/roboguice/fragment/RoboSherlockListFragment.java b/roboguice/src/main/java/roboguice/fragment/RoboSherlockListFragment.java
index 946ac822a..ce387f393 100644
--- a/roboguice/src/main/java/roboguice/fragment/RoboSherlockListFragment.java
+++ b/roboguice/src/main/java/roboguice/fragment/RoboSherlockListFragment.java
@@ -16,12 +16,12 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        RoboGuice.createInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
+        RoboGuice.createInjector(getActivity()).injectViewMembers(this);
     }
 }
diff --git a/roboguice/src/main/java/roboguice/fragment/provided/RoboDialogFragment.java b/roboguice/src/main/java/roboguice/fragment/provided/RoboDialogFragment.java
index c7eb0fa7e..8303e5f36 100644
--- a/roboguice/src/main/java/roboguice/fragment/provided/RoboDialogFragment.java
+++ b/roboguice/src/main/java/roboguice/fragment/provided/RoboDialogFragment.java
@@ -18,12 +18,12 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        RoboGuice.createInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
+        RoboGuice.createInjector(getActivity()).injectViewMembers(this);
     }
 }
diff --git a/roboguice/src/main/java/roboguice/fragment/provided/RoboFragment.java b/roboguice/src/main/java/roboguice/fragment/provided/RoboFragment.java
index 9a1bf753a..635bf2a13 100644
--- a/roboguice/src/main/java/roboguice/fragment/provided/RoboFragment.java
+++ b/roboguice/src/main/java/roboguice/fragment/provided/RoboFragment.java
@@ -18,12 +18,12 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        RoboGuice.createInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
+        RoboGuice.createInjector(getActivity()).injectViewMembers(this);
     }
 }
diff --git a/roboguice/src/main/java/roboguice/fragment/provided/RoboListFragment.java b/roboguice/src/main/java/roboguice/fragment/provided/RoboListFragment.java
index ac8f40f79..d90137789 100644
--- a/roboguice/src/main/java/roboguice/fragment/provided/RoboListFragment.java
+++ b/roboguice/src/main/java/roboguice/fragment/provided/RoboListFragment.java
@@ -18,12 +18,12 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        RoboGuice.createInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
+        RoboGuice.createInjector(getActivity()).injectViewMembers(this);
     }
 }
diff --git a/roboguice/src/main/java/roboguice/fragment/provided/RoboPreferenceFragment.java b/roboguice/src/main/java/roboguice/fragment/provided/RoboPreferenceFragment.java
index d2126efb0..ed7a5f5f1 100644
--- a/roboguice/src/main/java/roboguice/fragment/provided/RoboPreferenceFragment.java
+++ b/roboguice/src/main/java/roboguice/fragment/provided/RoboPreferenceFragment.java
@@ -18,12 +18,12 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        RoboGuice.createInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
+        RoboGuice.createInjector(getActivity()).injectViewMembers(this);
     }
 }
diff --git a/roboguice/src/main/java/roboguice/inject/ExtrasListener.java b/roboguice/src/main/java/roboguice/inject/ExtrasListener.java
index adbab3314..22381c621 100644
--- a/roboguice/src/main/java/roboguice/inject/ExtrasListener.java
+++ b/roboguice/src/main/java/roboguice/inject/ExtrasListener.java
@@ -61,7 +61,7 @@ public ExtrasListener(Provider<Context> contextProvider) {
         }
         Class<?> c = typeLiteral.getRawType();
         while( isWorthScanning(c)) {
-            Set<Field> allFields = null;
+            final Set<Field> allFields;
             try {
                 allFields = filter.getAllFields(InjectExtra.class.getName(), c);
             } catch (AnnotationFieldNotFoundException e) {
@@ -124,7 +124,7 @@ public void injectMembers(T instance) {
 
             value = extras.get(id);
 
-            value = convert(field, value, RoboGuice.createBaseApplicationInjector(activity.getApplication()));
+            value = convert(field, value, RoboGuice.getOrCreateBaseApplicationInjector(activity.getApplication()));
 
             /*
              * Please notice : null checking is done AFTER conversion. Having
diff --git a/roboguice/src/main/java/roboguice/inject/PreferenceListener.java b/roboguice/src/main/java/roboguice/inject/PreferenceListener.java
index a7835e03a..53155de85 100644
--- a/roboguice/src/main/java/roboguice/inject/PreferenceListener.java
+++ b/roboguice/src/main/java/roboguice/inject/PreferenceListener.java
@@ -59,7 +59,7 @@ public PreferenceListener(Provider<Context> contextProvider, Application applica
         }
         Class<?> c = typeLiteral.getRawType();
         while (isWorthScanning(c)) {
-            Set<Field> allFields = null;
+            final Set<Field> allFields;
             try {
                 allFields = filter.getAllFields(InjectPreference.class.getName(), c);
             } catch (AnnotationFieldNotFoundException e) {
diff --git a/roboguice/src/main/java/roboguice/receiver/RoboAppWidgetProvider.java b/roboguice/src/main/java/roboguice/receiver/RoboAppWidgetProvider.java
index 9e00bdcfa..92daaffb2 100644
--- a/roboguice/src/main/java/roboguice/receiver/RoboAppWidgetProvider.java
+++ b/roboguice/src/main/java/roboguice/receiver/RoboAppWidgetProvider.java
@@ -13,7 +13,7 @@
 
     @Override
     public final void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {
-        final Injector injector = RoboGuice.createBaseApplicationInjector((Application) context.getApplicationContext());
+        final Injector injector = RoboGuice.getOrCreateBaseApplicationInjector((Application) context.getApplicationContext());
 
         injector.injectMembers(this);
         onHandleUpdate(context, appWidgetManager, appWidgetIds);
diff --git a/roboguice/src/main/java/roboguice/receiver/RoboBroadcastReceiver.java b/roboguice/src/main/java/roboguice/receiver/RoboBroadcastReceiver.java
index a5ab78210..c5842019d 100644
--- a/roboguice/src/main/java/roboguice/receiver/RoboBroadcastReceiver.java
+++ b/roboguice/src/main/java/roboguice/receiver/RoboBroadcastReceiver.java
@@ -19,7 +19,7 @@
      */
     @Override
     public final void onReceive(Context context, Intent intent) {
-        RoboGuice.createBaseApplicationInjector((Application) context.getApplicationContext()).injectMembers(this);
+        RoboGuice.getOrCreateBaseApplicationInjector((Application) context.getApplicationContext()).injectMembers(this);
         handleReceive(context, intent);
     }
 
diff --git a/roboguice/src/main/java/roboguice/service/RoboIntentService.java b/roboguice/src/main/java/roboguice/service/RoboIntentService.java
index e97fcb4ba..ef96422c9 100644
--- a/roboguice/src/main/java/roboguice/service/RoboIntentService.java
+++ b/roboguice/src/main/java/roboguice/service/RoboIntentService.java
@@ -50,7 +50,7 @@ public RoboIntentService(String name) {
 
     @Override
     public void onCreate() {
-        final Injector injector = RoboGuice.getInjector(this);
+        final Injector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembers(this);
         super.onCreate();
diff --git a/roboguice/src/main/java/roboguice/service/RoboService.java b/roboguice/src/main/java/roboguice/service/RoboService.java
index a5265b8ec..b188b473b 100644
--- a/roboguice/src/main/java/roboguice/service/RoboService.java
+++ b/roboguice/src/main/java/roboguice/service/RoboService.java
@@ -52,7 +52,7 @@
 
     @Override
     public void onCreate() {
-        final Injector injector = RoboGuice.getInjector(this);
+        final Injector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembers(this);
         super.onCreate();
diff --git a/roboguice/src/main/java/roboguice/util/RoboAsyncTask.java b/roboguice/src/main/java/roboguice/util/RoboAsyncTask.java
index ced99dce2..43ad5c0df 100644
--- a/roboguice/src/main/java/roboguice/util/RoboAsyncTask.java
+++ b/roboguice/src/main/java/roboguice/util/RoboAsyncTask.java
@@ -13,25 +13,25 @@
 
     protected RoboAsyncTask(Context context) {
         this.context = context;
-        RoboGuice.getInjector(context).injectMembers(this);
+        RoboGuice.createInjector(context).injectMembers(this);
     }
 
     protected RoboAsyncTask(Context context, Handler handler) {
         super(handler);
         this.context = context;
-        RoboGuice.getInjector(context).injectMembers(this);
+        RoboGuice.createInjector(context).injectMembers(this);
     }
 
     protected RoboAsyncTask(Context context, Handler handler, Executor executor) {
         super(handler, executor);
         this.context = context;
-        RoboGuice.getInjector(context).injectMembers(this);
+        RoboGuice.createInjector(context).injectMembers(this);
     }
 
     protected RoboAsyncTask(Context context, Executor executor) {
         super(executor);
         this.context = context;
-        RoboGuice.getInjector(context).injectMembers(this);
+        RoboGuice.createInjector(context).injectMembers(this);
     }
 
     public Context getContext() {
diff --git a/roboguice/src/test/java/roboguice/RoboGuiceTest.java b/roboguice/src/test/java/roboguice/RoboGuiceTest.java
index 2b254414a..0d93fcdc1 100644
--- a/roboguice/src/test/java/roboguice/RoboGuiceTest.java
+++ b/roboguice/src/test/java/roboguice/RoboGuiceTest.java
@@ -27,7 +27,7 @@ public void setup() {
     @Test
     public void destroyInjectorShouldRemoveContext() {
         final Activity activity = Robolectric.buildActivity(RoboActivity.class).get();
-        RoboGuice.getInjector(activity);
+        RoboGuice.createInjector(activity);
 
         assertThat(RoboGuice.injectors.size(), equalTo(1));
 
@@ -41,7 +41,7 @@ public void destroyInjectorShouldRemoveContext() {
     @Test
     public void resetShouldRemoveContext() {
         final Activity activity = Robolectric.buildActivity(RoboActivity.class).get();
-        RoboGuice.getInjector(activity);
+        RoboGuice.createInjector(activity);
 
         assertThat(RoboGuice.injectors.size(), equalTo(1));
 
@@ -53,7 +53,7 @@ public void resetShouldRemoveContext() {
     @Test
     public void shouldOnlyCallConfigureOnce() {
         final int[] i = {0};
-        RoboGuice.createBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new AbstractModule() {
+        RoboGuice.getOrCreateBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new AbstractModule() {
             @Override
             protected void configure() {
                 ++i[0];
diff --git a/roboguice/src/test/java/roboguice/activity/ActivityInjectionTest.java b/roboguice/src/test/java/roboguice/activity/ActivityInjectionTest.java
index 91390ce15..a544e1795 100644
--- a/roboguice/src/test/java/roboguice/activity/ActivityInjectionTest.java
+++ b/roboguice/src/test/java/roboguice/activity/ActivityInjectionTest.java
@@ -58,7 +58,7 @@
 
     @Before
     public void setup() {
-        RoboGuice.createBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleA());
+        RoboGuice.getOrCreateBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleA());
         activity = Robolectric.buildActivity(DummyActivity.class).withIntent(new Intent(Robolectric.application,DummyActivity.class).putExtra("foobar","goober")).create().get();
     }
 
@@ -95,19 +95,19 @@ public void shouldInjectActivityAndRoboActivity() {
 
     @Test(expected = ConfigurationException.class)
     public void shouldNotStaticallyInjectViews() {
-        RoboGuice.createBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleB());
+        RoboGuice.getOrCreateBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleB());
         Robolectric.buildActivity(B.class).create().get();
     }
 
     @Test(expected = ConfigurationException.class)
     public void shouldNotStaticallyInjectExtras() {
-        RoboGuice.createBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleD());
+        RoboGuice.getOrCreateBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleD());
         Robolectric.buildActivity(D.class).create().get();
     }
 
     @Test(expected = ConfigurationException.class)
     public void shouldNotStaticallyInjectPreferenceViews() {
-        RoboGuice.createBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleC());
+        RoboGuice.getOrCreateBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleC());
         Robolectric.buildActivity(C.class).create().get();
     }
 
@@ -126,7 +126,7 @@ public void shouldAllowBackgroundThreadsToFinishUsingContextAfterOnDestroy() thr
 
         final BlockingQueue<Context> queue = new ArrayBlockingQueue<Context>(1);
         new Thread() {
-            final Context context = RoboGuice.getInjector(ref.get()).getInstance(Context.class);
+            final Context context = RoboGuice.createInjector(ref.get()).getInstance(Context.class);
 
             @Override
             public void run() {
@@ -161,7 +161,7 @@ public void shouldBeAbleToGetContextProvidersInBackgroundThreads() throws Except
         final F f = Robolectric.buildActivity(F.class).create().get();
 
         final FutureTask<Context> future = new FutureTask<Context>(new Callable<Context>() {
-            final ContextScopedProvider<Context> contextProvider = RoboGuice.getInjector(f).getInstance(Key.get(new TypeLiteral<ContextScopedProvider<Context>>(){}));
+            final ContextScopedProvider<Context> contextProvider = RoboGuice.createInjector(f).getInstance(Key.get(new TypeLiteral<ContextScopedProvider<Context>>(){}));
 
             @Override
             public Context call() throws Exception {
diff --git a/roboguice/src/test/java/roboguice/activity/SherlockActivityInjectionTest.java b/roboguice/src/test/java/roboguice/activity/SherlockActivityInjectionTest.java
index 468b14f5f..145e112f8 100644
--- a/roboguice/src/test/java/roboguice/activity/SherlockActivityInjectionTest.java
+++ b/roboguice/src/test/java/roboguice/activity/SherlockActivityInjectionTest.java
@@ -65,7 +65,7 @@
     @Before
     public void setup() {
         RoboGuice
-                .createBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleA());
+                .getOrCreateBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleA());
         ActionBarSherlock.registerImplementation(ActionBarSherlockRobolectric.class);
         Intent intent = new Intent(Robolectric.application, DummySherlockActivity.class).putExtra("foobar", "goober");
         activity = Robolectric.buildActivity(DummySherlockActivity.class).withIntent(intent).create().get();
@@ -105,7 +105,7 @@ public void shouldInjectActivityAndRoboSherlockActivity() {
     @Test(expected = ConfigurationException.class)
     public void shouldNotStaticallyInjectViews() {
         RoboGuice
-                .createBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleB());
+                .getOrCreateBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleB());
         @SuppressWarnings("unused")
         final B b = Robolectric.buildActivity(B.class).create().get();
     }
@@ -113,7 +113,7 @@ public void shouldNotStaticallyInjectViews() {
     @Test(expected = ConfigurationException.class)
     public void shouldNotStaticallyInjectExtras() {
         RoboGuice
-                .createBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleD());
+                .getOrCreateBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleD());
         @SuppressWarnings("unused")
         final D d = Robolectric.buildActivity(D.class).create().get();
     }
@@ -121,7 +121,7 @@ public void shouldNotStaticallyInjectExtras() {
     @Test(expected = ConfigurationException.class)
     public void shouldNotStaticallyInjectPreferenceViews() {
         RoboGuice
-                .createBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleC());
+                .getOrCreateBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleC());
         @SuppressWarnings("unused")
         final C c = Robolectric.buildActivity(C.class).create().get();
     }
@@ -139,7 +139,7 @@ public void shouldAllowBackgroundThreadsToFinishUsingContextAfterOnDestroy() thr
 
         final BlockingQueue<Context> queue = new ArrayBlockingQueue<Context>(1);
         new Thread() {
-            final Context context = RoboGuice.getInjector(ref.get()).getInstance(Context.class);
+            final Context context = RoboGuice.createInjector(ref.get()).getInstance(Context.class);
 
             @Override
             public void run() {
@@ -173,7 +173,7 @@ public void shouldBeAbleToGetContextProvidersInBackgroundThreads() throws Except
         final F f = Robolectric.buildActivity(F.class).create().get();
 
         final FutureTask<Context> future = new FutureTask<Context>(new Callable<Context>() {
-            final ContextScopedProvider<Context> contextProvider = RoboGuice.getInjector(f).getInstance(
+            final ContextScopedProvider<Context> contextProvider = RoboGuice.createInjector(f).getInstance(
                     Key.get(new TypeLiteral<ContextScopedProvider<Context>>() {
                     }));
 
diff --git a/roboguice/src/test/java/roboguice/application/ApplicationInjectionTest.java b/roboguice/src/test/java/roboguice/application/ApplicationInjectionTest.java
index 7972447f8..fc6caa3ab 100644
--- a/roboguice/src/test/java/roboguice/application/ApplicationInjectionTest.java
+++ b/roboguice/src/test/java/roboguice/application/ApplicationInjectionTest.java
@@ -55,7 +55,7 @@ public void shouldBeAbleToInjectContextScopedItemsIntoApplication() {
         @Override
         public void onCreate() {
             super.onCreate();
-            RoboGuice.getInjector(this).injectMembers(this);
+            RoboGuice.createInjector(this).injectMembers(this);
         }
 
         @Override
@@ -76,7 +76,7 @@ public PackageManager getPackageManager() {
         @Override
         public void onCreate() {
             super.onCreate();
-            RoboGuice.getInjector(this).injectMembers(this);
+            RoboGuice.createInjector(this).injectMembers(this);
         }
 
         @Override
diff --git a/roboguice/src/test/java/roboguice/event/ObservesTypeListenerTest.java b/roboguice/src/test/java/roboguice/event/ObservesTypeListenerTest.java
index 5a667c09d..f28ecfe1e 100644
--- a/roboguice/src/test/java/roboguice/event/ObservesTypeListenerTest.java
+++ b/roboguice/src/test/java/roboguice/event/ObservesTypeListenerTest.java
@@ -31,7 +31,7 @@
 
     @Before
     public void setup() throws NoSuchMethodException {
-        injector = RoboGuice.getInjector(Robolectric.application);
+        injector = RoboGuice.createInjector(Robolectric.application);
 
         eventManager = injector.getInstance(EventManager.class);
 
diff --git a/roboguice/src/test/java/roboguice/inject/ContextScopeTest.java b/roboguice/src/test/java/roboguice/inject/ContextScopeTest.java
index 1ffa93401..7a497003a 100644
--- a/roboguice/src/test/java/roboguice/inject/ContextScopeTest.java
+++ b/roboguice/src/test/java/roboguice/inject/ContextScopeTest.java
@@ -41,7 +41,7 @@ public void shouldHaveContextInScopeMapAfterOnCreate() throws Exception {
 
     @Test
     public void shouldBeAbleToOpenMultipleScopes() {
-        final ContextScope scope = RoboGuice.createBaseApplicationInjector(Robolectric.application).getInstance(ContextScope.class);
+        final ContextScope scope = RoboGuice.getOrCreateBaseApplicationInjector(Robolectric.application).getInstance(ContextScope.class);
         final Activity a = Robolectric.buildActivity(A.class).get();
         final Activity b = Robolectric.buildActivity(B.class).get();
 
@@ -53,7 +53,7 @@ public void shouldBeAbleToOpenMultipleScopes() {
 
     @Test(expected = IllegalArgumentException.class)
     public void shouldNotBeAbleToExitTheWrongScope() {
-        final ContextScope scope = RoboGuice.createBaseApplicationInjector(Robolectric.application).getInstance(ContextScope.class);
+        final ContextScope scope = RoboGuice.getOrCreateBaseApplicationInjector(Robolectric.application).getInstance(ContextScope.class);
         final Activity a = Robolectric.buildActivity(A.class).get();
         final Activity b = Robolectric.buildActivity(B.class).get();
 
diff --git a/roboguice/src/test/java/roboguice/inject/SharedPreferencesProviderTest.java b/roboguice/src/test/java/roboguice/inject/SharedPreferencesProviderTest.java
index 37c7896e6..1f0e99636 100644
--- a/roboguice/src/test/java/roboguice/inject/SharedPreferencesProviderTest.java
+++ b/roboguice/src/test/java/roboguice/inject/SharedPreferencesProviderTest.java
@@ -42,7 +42,7 @@ public void shouldInjectDefaultSharedPrefs() throws Exception {
 
     @Test
     public void shouldInjectNamedSharedPrefs() throws Exception {
-        RoboGuice.createBaseApplicationInjector(Robolectric.application,RoboGuice.DEFAULT_STAGE, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleA() );
+        RoboGuice.getOrCreateBaseApplicationInjector(Robolectric.application,RoboGuice.DEFAULT_STAGE, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleA() );
         try {
 
             final A a = Robolectric.buildActivity(A.class).create().get();
@@ -79,7 +79,7 @@ public void shouldFallbackOnOldDefaultIfPresent() throws Exception {
 
     @Test
     public void shouldNotFallbackOnOldDefaultIfNamedFileSpecified() throws Exception {
-        RoboGuice.createBaseApplicationInjector(Robolectric.application,RoboGuice.DEFAULT_STAGE, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleA() );
+        RoboGuice.getOrCreateBaseApplicationInjector(Robolectric.application,RoboGuice.DEFAULT_STAGE, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleA() );
 
         final File oldDefault = new File("shared_prefs/default.xml");
         final File oldDir = new File("shared_prefs");
diff --git a/roboguice/src/test/java/roboguice/view/ViewInjectionTest.java b/roboguice/src/test/java/roboguice/view/ViewInjectionTest.java
index dc9f5bfe9..0f1cc2fa0 100644
--- a/roboguice/src/test/java/roboguice/view/ViewInjectionTest.java
+++ b/roboguice/src/test/java/roboguice/view/ViewInjectionTest.java
@@ -157,8 +157,8 @@ public ViewA(Context context) {
                 ref.setId(101);
                 addView(ref);
 
-                RoboGuice.getInjector(getContext()).injectMembers(this);
-                RoboGuice.getInjector(getContext()).injectViewMembers(this);
+                RoboGuice.createInjector(getContext()).injectMembers(this);
+                RoboGuice.createInjector(getContext()).injectViewMembers(this);
             }
 
         }
@@ -193,7 +193,7 @@ public ViewA(Context context) {
                 ref.setTag("101");
                 addView(ref);
 
-                RoboGuice.getInjector(getContext()).injectMembers(this);
+                RoboGuice.createInjector(getContext()).injectMembers(this);
             }
 
         }
