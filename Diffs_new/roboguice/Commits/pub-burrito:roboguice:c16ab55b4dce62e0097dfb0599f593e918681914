diff --git a/roboguice/src/main/java/roboguice/android/config/DefaultRoboModule.java b/roboguice/src/main/java/roboguice/android/config/DefaultRoboModule.java
index cee2decc6..f46a057e7 100644
--- a/roboguice/src/main/java/roboguice/android/config/DefaultRoboModule.java
+++ b/roboguice/src/main/java/roboguice/android/config/DefaultRoboModule.java
@@ -80,11 +80,11 @@
 
     protected Application application;
     protected ContextScope contextScope;
-    protected ResourceListener resourceListener;
+    protected AndroidResourceListener resourceListener;
     protected ViewListener viewListener;
 
 
-    public DefaultRoboModule(final Application application, ContextScope contextScope, ViewListener viewListener, ResourceListener resourceListener) {
+    public DefaultRoboModule(final Application application, ContextScope contextScope, ViewListener viewListener, AndroidResourceListener resourceListener) {
 
 
         this.application = application;
diff --git a/roboguice/src/main/java/roboguice/android/inject/ResourceListener.java b/roboguice/src/main/java/roboguice/android/inject/AndroidResourceListener.java
similarity index 88%
rename from roboguice/src/main/java/roboguice/android/inject/ResourceListener.java
rename to roboguice/src/main/java/roboguice/android/inject/AndroidResourceListener.java
index 29f146178..ae5c45a53 100644
--- a/roboguice/src/main/java/roboguice/android/inject/ResourceListener.java
+++ b/roboguice/src/main/java/roboguice/android/inject/AndroidResourceListener.java
@@ -36,10 +36,10 @@
  * Resource listener.
  * @author Mike Burton
  */
-public class ResourceListener implements TypeListener {
+public class AndroidResourceListener implements TypeListener {
     protected Application application;
 
-    public ResourceListener(Application application) {
+    public AndroidResourceListener(Application application) {
         this.application = application;
     }
 
@@ -48,7 +48,7 @@ public ResourceListener(Application application) {
         for( Class<?> c = typeLiteral.getRawType(); c!=Object.class; c = c.getSuperclass() )
             for (Field field : c.getDeclaredFields())
                 if ( field.isAnnotationPresent(InjectResource.class) && !Modifier.isStatic(field.getModifiers()) )
-                    typeEncounter.register(new ResourceMembersInjector<I>(field, application, field.getAnnotation(InjectResource.class)));
+                    typeEncounter.register(new AndroidResourceMembersInjector<I>(field, application, field.getAnnotation(InjectResource.class)));
 
     }
 
@@ -59,7 +59,7 @@ public void requestStaticInjection(Class<?>... types) {
             for( ; c!=Object.class; c=c.getSuperclass() )
                 for (Field field : c.getDeclaredFields())
                     if (Modifier.isStatic(field.getModifiers()) && field.isAnnotationPresent(InjectResource.class))
-                        new ResourceMembersInjector(field, application, field.getAnnotation(InjectResource.class)).injectMembers(null);
+                        new AndroidResourceMembersInjector(field, application, field.getAnnotation(InjectResource.class)).injectMembers(null);
 
 
     }
@@ -72,13 +72,13 @@ public void requestStaticInjection(Class<?>... types) {
 
 
     
-    protected static class ResourceMembersInjector<T> implements MembersInjector<T> {
+    protected static class AndroidResourceMembersInjector<T> implements MembersInjector<T> {
 
         protected Field field;
         protected Application application;
         protected InjectResource annotation;
 
-        public ResourceMembersInjector(Field field, Application application, InjectResource annotation) {
+        public AndroidResourceMembersInjector(Field field, Application application, InjectResource annotation) {
             this.field = field;
             this.application = application;
             this.annotation = annotation;
diff --git a/roboguice/src/main/java/roboguice/base/RoboGuice.java b/roboguice/src/main/java/roboguice/base/RoboGuice.java
index ad20fbf9c..321b2a3e7 100644
--- a/roboguice/src/main/java/roboguice/base/RoboGuice.java
+++ b/roboguice/src/main/java/roboguice/base/RoboGuice.java
@@ -4,7 +4,7 @@
 import java.util.WeakHashMap;
 
 import roboguice.android.config.DefaultRoboModule;
-import roboguice.android.inject.ResourceListener;
+import roboguice.android.inject.AndroidResourceListener;
 import roboguice.base.event.EventManager;
 
 import com.google.inject.Guice;
@@ -31,7 +31,7 @@
     public static Stage DEFAULT_STAGE = Stage.PRODUCTION;
     
     protected WeakHashMap<S,Injector> injectors = new WeakHashMap<S,Injector>();
-    protected WeakHashMap<S,ResourceListener> resourceListeners = new WeakHashMap<S, ResourceListener>();
+    protected WeakHashMap<S,AndroidResourceListener> resourceListeners = new WeakHashMap<S, AndroidResourceListener>();
     
     public WeakHashMap<S, Injector> injectors()
     {
@@ -129,8 +129,8 @@ public Injector getInjector( O context )
     
     public abstract DefaultRoboModule newDefaultRoboModule( S app );
     
-    protected ResourceListener getResourceListener( S scopedObject ) {
-        ResourceListener resourceListener = resourceListeners.get(scopedObject);
+    protected AndroidResourceListener getResourceListener( S scopedObject ) {
+        AndroidResourceListener resourceListener = resourceListeners.get(scopedObject);
         if( resourceListener==null ) {
             synchronized (RoboGuice.class) {
                 if( resourceListener==null ) {
