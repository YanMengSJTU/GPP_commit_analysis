diff --git a/roboguice/src/main/java/roboguice/activity/RoboActivity.java b/roboguice/src/main/java/roboguice/activity/RoboActivity.java
index 488e5da5d..73f4d9b4c 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboActivity.java
@@ -199,7 +199,8 @@ protected static View injectOnCreateView(String name, Context context, Attribute
         try {
             final Constructor<?> constructor = Class.forName(name).getConstructor(Context.class, AttributeSet.class);
             final View view = (View) constructor.newInstance(context, attrs);
-            RoboGuice.injectMembers(context, view);
+            RoboGuice.getInjector(context).injectMembers(view);
+            RoboGuice.getInjector(context).injectViewMembers(view);
             return view;
         } catch (Exception e) {
             throw new RuntimeException(e);
diff --git a/roboguice/src/main/java/roboguice/inject/ViewListener.java b/roboguice/src/main/java/roboguice/inject/ViewListener.java
index 4c46160dc..dc27391d6 100644
--- a/roboguice/src/main/java/roboguice/inject/ViewListener.java
+++ b/roboguice/src/main/java/roboguice/inject/ViewListener.java
@@ -15,9 +15,14 @@
  */
 package roboguice.inject;
 
-import android.app.Activity;
-import android.content.Context;
-import android.view.View;
+import java.lang.annotation.Annotation;
+import java.lang.ref.WeakReference;
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+import java.util.ArrayList;
+import java.util.WeakHashMap;
+
+import javax.inject.Singleton;
 
 import roboguice.fragment.FragmentUtil;
 import roboguice.fragment.FragmentUtil.f;
@@ -28,13 +33,9 @@
 import com.google.inject.spi.TypeEncounter;
 import com.google.inject.spi.TypeListener;
 
-import javax.inject.Singleton;
-import java.lang.annotation.Annotation;
-import java.lang.ref.WeakReference;
-import java.lang.reflect.Field;
-import java.lang.reflect.Modifier;
-import java.util.ArrayList;
-import java.util.WeakHashMap;
+import android.app.Activity;
+import android.content.Context;
+import android.view.View;
 
 @Singleton
 @SuppressWarnings({"unchecked","PMD"})
@@ -49,7 +50,7 @@
                     if (Modifier.isStatic(field.getModifiers()))
                         throw new UnsupportedOperationException("Views may not be statically injected");
                     else if (!View.class.isAssignableFrom(field.getType()))
-                        throw new UnsupportedOperationException("You may only use @InjectView on fields descended from type View");
+                        throw new UnsupportedOperationException("You may only use @InjectView on fields that extend View");
                     else if (Context.class.isAssignableFrom(field.getDeclaringClass()) && !Activity.class.isAssignableFrom(field.getDeclaringClass()))
                         throw new UnsupportedOperationException("You may only use @InjectView in Activity contexts");
                     else {
@@ -120,7 +121,6 @@ public ViewMembersInjector(Field field, Annotation annotation, TypeEncounter<T>
                 this.fragUtils = utils;
                 this.fragManager = typeEncounter.getProvider(utils.fragmentManagerType());
             }
-
         }
 
         /**
@@ -132,7 +132,8 @@ public ViewMembersInjector(Field field, Annotation annotation, TypeEncounter<T>
         public void injectMembers(T instance) {
             synchronized (ViewMembersInjector.class) {
                 final Activity activity = activityProvider.get();
-                final Object key = fragUtils != null && fragUtils.fragmentType().isInstance(instance) ? instance : activity;
+                boolean isValidFragment = fragUtils != null && fragUtils.fragmentType().isInstance(instance);
+                final Object key = (isValidFragment || instance instanceof View) ? instance : activity;
                 if( key==null )
                     return;
 
@@ -148,7 +149,7 @@ public void injectMembers(T instance) {
             }
         }
 
-        public void reallyInjectMembers( Object activityOrFragment ) {
+        public void reallyInjectMembers(Object activityOrFragment ) {
             if( annotation instanceof InjectView )
                 reallyInjectMemberViews(activityOrFragment);
             else
@@ -157,53 +158,60 @@ public void reallyInjectMembers( Object activityOrFragment ) {
 
         /**
          * This is when the view references are actually evaluated.
-         *
-         * I don't like all the hacks I had to put into this method.  Instance is the object you're
-         * injecting into.  ActivityOrFragment is the activity or fragment that you're injecting
-         * views into.  Instance must equal activityOrFragment is activityOrFragment is a fragment,
-         * but they may differ if activityOrFragment is an activity.  They should be allowed to differ
-         * so that you can inject views into arbitrary objects, but I don't know how to determine whether
-         * to get the view from the fragment or the activity for an arbitrary object, so I'm artificially
-         * limiting injection targets to the fragment itself for fragments.
-         *
-         * @param activityOrFragment an activity or fragment
+         * @param target an activity or fragment or a view.
          */
-        protected void reallyInjectMemberViews(Object activityOrFragment) {
+        protected void reallyInjectMemberViews(Object target) {
 
-            final T instance = fragUtils != null && fragUtils.fragmentType().isInstance(activityOrFragment) ? (T)activityOrFragment : instanceRef.get();
+            boolean isValidFragment = fragUtils != null && fragUtils.fragmentType().isInstance(target);
+            final T instance = isValidFragment ? (T)target : instanceRef.get();
             if( instance==null )
                 return;
 
-            if( activityOrFragment instanceof Context && !(activityOrFragment instanceof Activity ))
-                throw new UnsupportedOperationException("Can't inject view into a non-Activity context");
-
             View view = null;
 
-            try {
-                final InjectView injectView = (InjectView) annotation;
-                final int id = injectView.value();
+            final InjectView injectView = (InjectView) annotation;
+            final int id = injectView.value();
 
-                if( id>=0 )
-                    view = fragUtils != null && fragUtils.fragmentType().isInstance(activityOrFragment) ? fragUtils.getView(activityOrFragment).findViewById(id) : ((Activity)activityOrFragment).findViewById(id);
+            //contains the view to inject, as a layout container, not nceseraily a data member.
+            View containerView = null;
 
-                else
-                    view = fragUtils !=null && fragUtils.fragmentType().isInstance(activityOrFragment) ? fragUtils.getView(activityOrFragment).findViewWithTag(injectView.tag()) : ((Activity)activityOrFragment).getWindow().getDecorView().findViewWithTag(injectView.tag());
+            containerView = extractContainerView(target, isValidFragment);
 
-                if (view == null && Nullable.notNullable(field))
-                    throw new NullPointerException(String.format("Can't inject null value into %s.%s when field is not @Nullable", field.getDeclaringClass(), field.getName()));
+            if( id>=0 ) {
+                view = containerView.findViewById(id);
+            } else {
+                view = containerView.findViewWithTag(injectView.tag());
+            }
+
+            if (view == null && Nullable.notNullable(field))
+                throw new NullPointerException(String.format("Can't inject null value into %s.%s when field is not @Nullable", field.getDeclaringClass(), field.getName()));
 
+            try {
                 field.setAccessible(true);
                 field.set(instance, view);
-
             } catch (IllegalAccessException e) {
                 throw new RuntimeException(e);
-
             }  catch (IllegalArgumentException f) {
                 throw new IllegalArgumentException(String.format("Can't assign %s value %s to %s field %s", view != null ? view.getClass() : "(null)", view,
                         field.getType(), field.getName()), f);
             }
         }
 
+        private View extractContainerView(Object target, boolean isValidFragment) {
+            View containerView;
+            if( isValidFragment ) {
+                containerView =  fragUtils.getView(target);
+            } else if( target instanceof View ) {
+                containerView = (View) target;
+            } else if( target instanceof Activity ) {
+                //it must be an activity so
+                containerView = ((Activity)target).getWindow().getDecorView();
+            } else {
+                throw new UnsupportedOperationException("Can't inject view into something that is not a Fragment, Activity or View.");
+            }
+            return containerView;
+        }
+
         /**
          * This is when the view references are actually evaluated.
          * @param activityOrFragment an activity or fragment
diff --git a/roboguice/src/test/java/roboguice/view/ViewInjectionTest.java b/roboguice/src/test/java/roboguice/view/ViewInjectionTest.java
index 60d975c8d..68cb59e7b 100644
--- a/roboguice/src/test/java/roboguice/view/ViewInjectionTest.java
+++ b/roboguice/src/test/java/roboguice/view/ViewInjectionTest.java
@@ -158,6 +158,7 @@ public ViewA(Context context) {
                 addView(ref);
 
                 RoboGuice.getInjector(getContext()).injectMembers(this);
+                RoboGuice.getInjector(getContext()).injectViewMembers(this);
             }
 
         }
