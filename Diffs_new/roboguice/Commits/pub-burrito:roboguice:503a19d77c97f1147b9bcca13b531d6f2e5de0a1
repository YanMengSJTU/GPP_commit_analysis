diff --git a/roboguice/src/main/java/roboguice/android/util/logging/AndroidBaseConfig.java b/roboguice/src/main/java/roboguice/android/util/logging/AndroidBaseConfig.java
index bd2a53a43..bbd4f25cc 100644
--- a/roboguice/src/main/java/roboguice/android/util/logging/AndroidBaseConfig.java
+++ b/roboguice/src/main/java/roboguice/android/util/logging/AndroidBaseConfig.java
@@ -1,7 +1,6 @@
 package roboguice.android.util.logging;
 
 import roboguice.base.util.logging.BaseConfig;
-import roboguice.base.util.logging.Ln;
 import roboguice.base.util.logging.LogLevel;
 
 import com.google.inject.Inject;
@@ -23,7 +22,7 @@ public AndroidBaseConfig(Application context) {
             minimumLogLevel = (flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0 ? LogLevel.VERBOSE : LogLevel.INFO;
             scope = packageName;
 
-            Ln.d("Configuring Logging, minimum log level is %s", Ln.logLevelToString(minimumLogLevel.logLevel()) );
+            //Ln.d("Configuring Logging, minimum log level is %s", Ln.logLevelToString(minimumLogLevel.logLevel()) );
 
         } catch( Exception e ) {
             Log.e(packageName, "Error configuring logger", e);
diff --git a/roboguice/src/main/java/roboguice/java/util/logging/JavaWriter.java b/roboguice/src/main/java/roboguice/java/util/logging/JavaWriter.java
index 9dcd92c23..a58942510 100644
--- a/roboguice/src/main/java/roboguice/java/util/logging/JavaWriter.java
+++ b/roboguice/src/main/java/roboguice/java/util/logging/JavaWriter.java
@@ -12,12 +12,12 @@
     @Override
     public int write( LogLevel priority, String tag, String msg ) {
         
-        logger(tag).log(level(priority), msg);
+        logger( tag ).log( level( priority ), msg );
         
         return 0;
     }
 
-    protected Logger logger(String tag) {
+    protected Logger logger( String tag ) {
         Logger logger = Logger.getLogger( tag );
         
         logger.setLevel( level( config.getLoggingLevel() ) );
@@ -25,7 +25,7 @@ protected Logger logger(String tag) {
         return logger;
     }
     
-    protected Level level(LogLevel priority) {
+    protected Level level( LogLevel priority ) {
         return JavaLogLevel.from( priority ).javaLevel();
     }
 
