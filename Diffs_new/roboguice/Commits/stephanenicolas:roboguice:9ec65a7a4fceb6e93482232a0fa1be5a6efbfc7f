diff --git a/roboguice/src/main/java/roboguice/RoboGuice.java b/roboguice/src/main/java/roboguice/RoboGuice.java
index 4f57e4990..ba38a6752 100644
--- a/roboguice/src/main/java/roboguice/RoboGuice.java
+++ b/roboguice/src/main/java/roboguice/RoboGuice.java
@@ -7,6 +7,7 @@
 import roboguice.event.EventManager;
 import roboguice.inject.ContextScope;
 import roboguice.inject.ContextScopedRoboInjector;
+import roboguice.inject.FragmentScope;
 import roboguice.inject.FragmentScopedRoboInjector;
 import roboguice.inject.ResourceListener;
 import roboguice.inject.RoboInjector;
@@ -162,7 +163,7 @@ public static RoboInjector getInjector(Object fragment) {
 
 
     public static DefaultRoboModule newDefaultRoboModule(final Application application) {
-        return new DefaultRoboModule(application, new ContextScope(application), getViewListener(application), getResourceListener(application));
+        return new DefaultRoboModule(application, new ContextScope(application), new FragmentScope(application), getViewListener(application), getResourceListener(application));
     }
 
     @SuppressWarnings("ConstantConditions")
diff --git a/roboguice/src/main/java/roboguice/config/DefaultRoboModule.java b/roboguice/src/main/java/roboguice/config/DefaultRoboModule.java
index 41430cf94..0e92df6b4 100644
--- a/roboguice/src/main/java/roboguice/config/DefaultRoboModule.java
+++ b/roboguice/src/main/java/roboguice/config/DefaultRoboModule.java
@@ -1,6 +1,46 @@
 package roboguice.config;
 
-import android.app.*;
+import roboguice.activity.RoboActivity;
+import roboguice.event.EventManager;
+import roboguice.event.ObservesTypeListener;
+import roboguice.event.eventListener.factory.EventListenerThreadingDecorator;
+import roboguice.fragment.FragmentUtil;
+import roboguice.inject.AccountManagerProvider;
+import roboguice.inject.AssetManagerProvider;
+import roboguice.inject.ContentResolverProvider;
+import roboguice.inject.ContextScope;
+import roboguice.inject.ContextScopedSystemServiceProvider;
+import roboguice.inject.ContextSingleton;
+import roboguice.inject.ExtrasListener;
+import roboguice.inject.FragmentScope;
+import roboguice.inject.FragmentSingleton;
+import roboguice.inject.HandlerProvider;
+import roboguice.inject.NullProvider;
+import roboguice.inject.PreferenceListener;
+import roboguice.inject.ResourceListener;
+import roboguice.inject.ResourcesProvider;
+import roboguice.inject.SharedPreferencesProvider;
+import roboguice.inject.SystemServiceProvider;
+import roboguice.inject.ViewListener;
+import roboguice.service.RoboService;
+import roboguice.util.Ln;
+import roboguice.util.LnImpl;
+import roboguice.util.LnInterface;
+import roboguice.util.Strings;
+
+import com.google.inject.AbstractModule;
+import com.google.inject.Provider;
+import com.google.inject.matcher.Matchers;
+import com.google.inject.name.Names;
+
+import android.app.Activity;
+import android.app.ActivityManager;
+import android.app.AlarmManager;
+import android.app.Application;
+import android.app.KeyguardManager;
+import android.app.NotificationManager;
+import android.app.SearchManager;
+import android.app.Service;
 import android.content.ContentResolver;
 import android.content.Context;
 import android.content.SharedPreferences;
@@ -25,23 +65,6 @@
 import android.view.WindowManager;
 import android.view.inputmethod.InputMethodManager;
 
-import com.google.inject.AbstractModule;
-import com.google.inject.Provider;
-import com.google.inject.matcher.Matchers;
-import com.google.inject.name.Names;
-
-import roboguice.activity.RoboActivity;
-import roboguice.event.EventManager;
-import roboguice.event.ObservesTypeListener;
-import roboguice.event.eventListener.factory.EventListenerThreadingDecorator;
-import roboguice.fragment.FragmentUtil;
-import roboguice.inject.*;
-import roboguice.service.RoboService;
-import roboguice.util.Ln;
-import roboguice.util.LnImpl;
-import roboguice.util.LnInterface;
-import roboguice.util.Strings;
-
 /**
  * A Module that provides bindings and configuration to use Guice on Android.
  * Used by {@link roboguice.RoboGuice}.
@@ -78,13 +101,12 @@
     protected ContextScope contextScope;
     protected ResourceListener resourceListener;
     protected ViewListener viewListener;
+    protected FragmentScope fragmentScope;
 
-
-    public DefaultRoboModule(final Application application, ContextScope contextScope, ViewListener viewListener, ResourceListener resourceListener) {
-
-
+    public DefaultRoboModule(final Application application, ContextScope contextScope, FragmentScope fragmentScope, ViewListener viewListener, ResourceListener resourceListener) {
         this.application = application;
         this.contextScope = contextScope;
+        this.fragmentScope = fragmentScope;
         this.viewListener = viewListener;
         this.resourceListener = resourceListener;
     }
@@ -130,8 +152,9 @@ protected void configure() {
 
         // ContextSingleton bindings
         bindScope(ContextSingleton.class, contextScope);
+        bindScope(FragmentSingleton.class, fragmentScope);
         bind(ContextScope.class).toInstance(contextScope);
-        bind(FragmentScope.class).toProvider(FragmentScopeProvider.class);
+        bind(FragmentScope.class).toInstance(fragmentScope);
         bind(AssetManager.class).toProvider(AssetManagerProvider.class);
         bind(Context.class).toProvider(NullProvider.<Context>instance()).in(ContextSingleton.class);
         bind(Activity.class).toProvider(NullProvider.<Activity>instance()).in(ContextSingleton.class);
diff --git a/roboguice/src/main/java/roboguice/fragment/RoboFragment.java b/roboguice/src/main/java/roboguice/fragment/RoboFragment.java
index 7a894f39d..efb6efecb 100644
--- a/roboguice/src/main/java/roboguice/fragment/RoboFragment.java
+++ b/roboguice/src/main/java/roboguice/fragment/RoboFragment.java
@@ -1,6 +1,12 @@
 package roboguice.fragment;
 
+import java.util.HashMap;
+import java.util.Map;
+
+import com.google.inject.Key;
+
 import roboguice.RoboGuice;
+import roboguice.util.RoboContext;
 
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
@@ -11,16 +17,24 @@
  * A RoboFragment will see all its members and views injected after {@link #onViewCreated(View, Bundle)}. 
  * @author Michael Burton
  */
-public abstract class RoboFragment extends Fragment {
+public abstract class RoboFragment extends Fragment implements RoboContext {
+    protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
+
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        RoboGuice.getInjector(this).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
+        RoboGuice.getInjector(this).injectViewMembers(this);
     }
+    
+    @Override
+    public Map<Key<?>, Object> getScopedObjectMap() {
+        return scopedObjects;
+    }
+
 }
diff --git a/roboguice/src/main/java/roboguice/inject/FragmentScope.java b/roboguice/src/main/java/roboguice/inject/FragmentScope.java
index f5302f0ea..254eafea0 100644
--- a/roboguice/src/main/java/roboguice/inject/FragmentScope.java
+++ b/roboguice/src/main/java/roboguice/inject/FragmentScope.java
@@ -27,7 +27,6 @@
 import com.google.inject.Scope;
 
 import android.app.Application;
-import android.content.Context;
 import android.content.ContextWrapper;
 
 /**
@@ -53,13 +52,12 @@
  */
 public class FragmentScope implements Scope {
     //Object is used here to accomodate both native and support Fragment 
-    protected ThreadLocal<Stack<WeakReference<Context>>> contextThreadLocal = new ThreadLocal<Stack<WeakReference<Context>>>();
+    protected ThreadLocal<Stack<WeakReference<Object>>> contextThreadLocal = new ThreadLocal<Stack<WeakReference<Object>>>();
     protected Map<Key<?>,Object> applicationScopedObjects = new HashMap<Key<?>, Object>();
     protected Application application;
 
     public FragmentScope(Application application) {
         this.application = application;
-        enter(application);
     }
 
     /**
@@ -71,16 +69,16 @@ public FragmentScope(Application application) {
      * @see FragmentScopedProvider
      * @param context the context to enter
      */
-    public void enter(Context context) {
+    public void enter(Object context) {
 
         // BUG synchronizing on FragmentScope.class may be overly conservative
         synchronized (FragmentScope.class) {
 
-            final Stack<WeakReference<Context>> stack = getContextStack();
+            final Stack<WeakReference<Object>> stack = getContextStack();
             final Map<Key<?>,Object> map = getScopedObjectMap(context);
 
             // Mark this thread as for this context
-            stack.push(new WeakReference<Context>(context));
+            stack.push(new WeakReference<Object>(context));
 
             // Add the context to the scope for key Context, Activity, etc.
             Class<?> c = context.getClass();
@@ -91,9 +89,9 @@ public void enter(Context context) {
         }
     }
 
-    public void exit(Context context) {
+    public void exit(Object context) {
         synchronized (FragmentScope.class) {
-            final Stack<WeakReference<Context>> stack = getContextStack();
+            final Stack<WeakReference<Object>> stack = getContextStack();
             final Object c = stack.pop().get();
             if( c!=null && c!=context )
                 throw new IllegalArgumentException(String.format("Scope for %s must be opened before it can be closed",context));
@@ -104,8 +102,8 @@ public void exit(Context context) {
         return new Provider<T>() {
             public T get() {
                 synchronized (FragmentScope.class) {
-                    final Stack<WeakReference<Context>> stack = getContextStack();
-                    final Context context = stack.peek().get(); // The context should never be finalized as long as the provider is still in memory
+                    final Stack<WeakReference<Object>> stack = getContextStack();
+                    final Object context = stack.peek().get(); // The context should never be finalized as long as the provider is still in memory
                     final Map<Key<?>, Object> objectsForScope = getScopedObjectMap(context);
                     if( objectsForScope==null )
                         return null;  // May want to consider throwing an exception here (if provider is used after onDestroy())
@@ -124,17 +122,17 @@ public T get() {
     }
 
 
-    public Stack<WeakReference<Context>> getContextStack() {
-        Stack<WeakReference<Context>> stack = contextThreadLocal.get();
+    public Stack<WeakReference<Object>> getContextStack() {
+        Stack<WeakReference<Object>> stack = contextThreadLocal.get();
         if( stack==null ) {
-            stack = new Stack<WeakReference<Context>>();
+            stack = new Stack<WeakReference<Object>>();
             contextThreadLocal.set(stack);
         }
         return stack;
     }
 
-    protected Map<Key<?>,Object> getScopedObjectMap(final Context origContext) {
-        Context context = origContext;
+    protected Map<Key<?>,Object> getScopedObjectMap(final Object origContext) {
+        Object context = origContext;
         while( !(context instanceof RoboContext) && !(context instanceof Application) && context instanceof ContextWrapper )
             context = ((ContextWrapper)context).getBaseContext();
 
@@ -144,7 +142,7 @@ public T get() {
 
 
         if( !(context instanceof RoboContext) )
-            throw new IllegalArgumentException(String.format("%s does not appear to belong to a RoboGuice context (instanceof RoboContext)",origContext));
+            throw new IllegalArgumentException(String.format("%s does not appear to be a RoboGuice context (instanceof RoboContext)",origContext));
 
         return ((RoboContext)context).getScopedObjectMap();
     }
diff --git a/roboguice/src/main/java/roboguice/inject/FragmentScopedRoboInjector.java b/roboguice/src/main/java/roboguice/inject/FragmentScopedRoboInjector.java
index f70452f22..d33d10308 100644
--- a/roboguice/src/main/java/roboguice/inject/FragmentScopedRoboInjector.java
+++ b/roboguice/src/main/java/roboguice/inject/FragmentScopedRoboInjector.java
@@ -19,39 +19,26 @@
 
 import android.app.Activity;
 import android.app.Fragment;
-import android.content.Context;
 
 public class FragmentScopedRoboInjector implements RoboInjector {
     protected Injector delegate;
-    protected Context context;
+    protected Object fragment;
     protected FragmentScope scope;
 
     public FragmentScopedRoboInjector(Object fragment, Injector activityInjector) {
         this.delegate = activityInjector;
-        this.context = getContext(fragment);
+        this.fragment = fragment;
         this.scope = delegate.getInstance(FragmentScope.class);
     }
     
-    private Context getContext(Object fragment) {
-        Context context;
-        if( fragment instanceof Fragment ) {
-            context = ((Fragment) fragment).getActivity();
-        } else if( fragment instanceof android.support.v4.app.Fragment ) {
-            context = ((android.support.v4.app.Fragment) fragment).getActivity();
-        } else {
-            throw new IllegalArgumentException(String.format("%s does not appear to belong to a RoboGuice context (instanceof RoboContext)",fragment));
-        }
-        return context;
-    }
-
     @Override
     public Injector createChildInjector(Iterable<? extends Module> modules) {
         synchronized (FragmentScope.class) {
-            scope.enter(context);
+            scope.enter(fragment);
             try {
                 return delegate.createChildInjector(modules);
             } finally {
-                scope.exit(context);
+                scope.exit(fragment);
             }
         }
     }
@@ -59,11 +46,11 @@ public Injector createChildInjector(Iterable<? extends Module> modules) {
     @Override
     public Injector createChildInjector(Module... modules) {
         synchronized (FragmentScope.class) {
-            scope.enter(context);
+            scope.enter(fragment);
             try {
                 return delegate.createChildInjector(modules);
             } finally {
-                scope.exit(context);
+                scope.exit(fragment);
             }
         }
     }
@@ -71,11 +58,11 @@ public Injector createChildInjector(Module... modules) {
     @Override
     public <T> List<Binding<T>> findBindingsByType(TypeLiteral<T> type) {
         synchronized (FragmentScope.class) {
-            scope.enter(context);
+            scope.enter(fragment);
             try {
                 return delegate.findBindingsByType(type);
             } finally {
-                scope.exit(context);
+                scope.exit(fragment);
             }
         }
     }
@@ -83,11 +70,11 @@ public Injector createChildInjector(Module... modules) {
     @Override
     public Map<Key<?>, Binding<?>> getAllBindings() {
         synchronized (FragmentScope.class) {
-            scope.enter(context);
+            scope.enter(fragment);
             try {
                 return delegate.getAllBindings();
             } finally {
-                scope.exit(context);
+                scope.exit(fragment);
             }
         }
     }
@@ -95,11 +82,11 @@ public Injector createChildInjector(Module... modules) {
     @Override
     public <T> Binding<T> getBinding(Key<T> key) {
         synchronized (FragmentScope.class) {
-            scope.enter(context);
+            scope.enter(fragment);
             try {
                 return delegate.getBinding(key);
             } finally {
-                scope.exit(context);
+                scope.exit(fragment);
             }
         }
     }
@@ -107,11 +94,11 @@ public Injector createChildInjector(Module... modules) {
     @Override
     public <T> Binding<T> getBinding(Class<T> type) {
         synchronized (FragmentScope.class) {
-            scope.enter(context);
+            scope.enter(fragment);
             try {
                 return delegate.getBinding(type);
             } finally {
-                scope.exit(context);
+                scope.exit(fragment);
             }
         }
     }
@@ -119,11 +106,11 @@ public Injector createChildInjector(Module... modules) {
     @Override
     public Map<Key<?>, Binding<?>> getBindings() {
         synchronized (FragmentScope.class) {
-            scope.enter(context);
+            scope.enter(fragment);
             try {
                 return delegate.getBindings();
             } finally {
-                scope.exit(context);
+                scope.exit(fragment);
             }
         }
     }
@@ -131,11 +118,11 @@ public Injector createChildInjector(Module... modules) {
     @Override
     public <T> Binding<T> getExistingBinding(Key<T> key) {
         synchronized (FragmentScope.class) {
-            scope.enter(context);
+            scope.enter(fragment);
             try {
                 return delegate.getExistingBinding(key);
             } finally {
-                scope.exit(context);
+                scope.exit(fragment);
             }
         }
     }
@@ -143,11 +130,11 @@ public Injector createChildInjector(Module... modules) {
     @Override
     public <T> T getInstance(Key<T> key) {
         synchronized (FragmentScope.class) {
-            scope.enter(context);
+            scope.enter(fragment);
             try {
                 return delegate.getInstance(key);
             } finally {
-                scope.exit(context);
+                scope.exit(fragment);
             }
         }
     }
@@ -155,11 +142,11 @@ public Injector createChildInjector(Module... modules) {
     @Override
     public <T> T getInstance(Class<T> type) {
         synchronized (FragmentScope.class) {
-            scope.enter(context);
+            scope.enter(fragment);
             try {
                 return delegate.getInstance(type);
             } finally {
-                scope.exit(context);
+                scope.exit(fragment);
             }
         }
     }
@@ -167,11 +154,11 @@ public Injector createChildInjector(Module... modules) {
     @Override
     public <T> MembersInjector<T> getMembersInjector(Class<T> type) {
         synchronized (FragmentScope.class) {
-            scope.enter(context);
+            scope.enter(fragment);
             try {
                 return delegate.getMembersInjector(type);
             } finally {
-                scope.exit(context);
+                scope.exit(fragment);
             }
         }
     }
@@ -179,11 +166,11 @@ public Injector createChildInjector(Module... modules) {
     @Override
     public <T> MembersInjector<T> getMembersInjector(TypeLiteral<T> typeLiteral) {
         synchronized (FragmentScope.class) {
-            scope.enter(context);
+            scope.enter(fragment);
             try {
                 return delegate.getMembersInjector(typeLiteral);
             } finally {
-                scope.exit(context);
+                scope.exit(fragment);
             }
         }
     }
@@ -191,11 +178,11 @@ public Injector createChildInjector(Module... modules) {
     @Override
     public Injector getParent() {
         synchronized (FragmentScope.class) {
-            scope.enter(context);
+            scope.enter(fragment);
             try {
                 return delegate.getParent();
             } finally {
-                scope.exit(context);
+                scope.exit(fragment);
             }
         }
     }
@@ -203,11 +190,11 @@ public Injector getParent() {
     @Override
     public <T> Provider<T> getProvider(Key<T> key) {
         synchronized (FragmentScope.class) {
-            scope.enter(context);
+            scope.enter(fragment);
             try {
                 return delegate.getProvider(key);
             } finally {
-                scope.exit(context);
+                scope.exit(fragment);
             }
         }
     }
@@ -215,11 +202,11 @@ public Injector getParent() {
     @Override
     public <T> Provider<T> getProvider(Class<T> type) {
         synchronized (FragmentScope.class) {
-            scope.enter(context);
+            scope.enter(fragment);
             try {
                 return delegate.getProvider(type);
             } finally {
-                scope.exit(context);
+                scope.exit(fragment);
             }
         }
     }
@@ -227,11 +214,11 @@ public Injector getParent() {
     @Override
     public Map<Class<? extends Annotation>, Scope> getScopeBindings() {
         synchronized (FragmentScope.class) {
-            scope.enter(context);
+            scope.enter(fragment);
             try {
                 return delegate.getScopeBindings();
             } finally {
-                scope.exit(context);
+                scope.exit(fragment);
             }
         }
     }
@@ -239,11 +226,11 @@ public Injector getParent() {
     @Override
     public Set<TypeConverterBinding> getTypeConverterBindings() {
         synchronized (FragmentScope.class) {
-            scope.enter(context);
+            scope.enter(fragment);
             try {
                 return delegate.getTypeConverterBindings();
             } finally {
-                scope.exit(context);
+                scope.exit(fragment);
             }
         }
     }
@@ -255,11 +242,11 @@ public void injectMembers(Object instance) {
 
     public void injectMembersWithoutViews( Object instance ) {
         synchronized (FragmentScope.class) {
-            scope.enter(context);
+            scope.enter(fragment);
             try {
                 delegate.injectMembers(instance);
             }finally {
-                scope.exit(context);
+                scope.exit(fragment);
             }
         }
     }
@@ -281,11 +268,11 @@ public void injectViewMembers(Fragment fragment) {
 
     private void injectViews(Object fragment) {
         synchronized (FragmentScope.class) {
-            scope.enter(context);
+            scope.enter(fragment);
             try {
                 ViewMembersInjector.injectViews(fragment);
             } finally {
-                scope.exit(context);
+                scope.exit(fragment);
             }
         }
     }
diff --git a/roboguice/src/main/java/roboguice/inject/FragmentSingleton.java b/roboguice/src/main/java/roboguice/inject/FragmentSingleton.java
new file mode 100644
index 000000000..101a29824
--- /dev/null
+++ b/roboguice/src/main/java/roboguice/inject/FragmentSingleton.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright 2009 Michael Burton
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions
+ * and limitations under the License.
+ */
+package roboguice.inject;
+
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.ElementType.TYPE;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import com.google.inject.ScopeAnnotation;
+
+/**
+ * Apply this to implementation classes when you want one instance per context
+ * instance.
+ *
+ * @author Mike Burton
+ */
+@Target( { TYPE, METHOD, FIELD })
+@Retention(RUNTIME)
+@ScopeAnnotation
+public @interface FragmentSingleton {
+}
diff --git a/roboguice/src/test/java/roboguice/fragment/FragmentInjectionTest.java b/roboguice/src/test/java/roboguice/fragment/FragmentInjectionTest.java
index 62c9f1473..1b57e5aab 100644
--- a/roboguice/src/test/java/roboguice/fragment/FragmentInjectionTest.java
+++ b/roboguice/src/test/java/roboguice/fragment/FragmentInjectionTest.java
@@ -12,6 +12,9 @@
 import org.robolectric.util.ActivityController;
 
 import roboguice.activity.RoboFragmentActivity;
+import roboguice.fragment.RoboFragment;
+import roboguice.inject.ContextSingleton;
+import roboguice.inject.FragmentSingleton;
 import roboguice.inject.InjectView;
 
 import com.google.inject.Inject;
@@ -85,15 +88,17 @@ public void shouldNotCrashWhenRotatingScreen() {
         assertNotNull(activityD2.fragmentRef.ref);
         assertThat(activityD2.fragmentRef.v, equalTo(activityD2.fragmentRef.ref));
     }
-    
+
     @Test
     public void shouldUseFragmentScopePerFragment() {
         final ActivityE activityE = Robolectric.buildActivity(ActivityE.class).create().start().resume().get();
 
-        assertNotNull(activityE.fragmentRef1.ref);
-        assertNotNull(activityE.fragmentRef2.ref);
-        assertThat(activityE.fragmentRef1.v, not(equalTo(activityE.fragmentRef2.v)));
         assertThat(activityE.fragmentRef1.foo, not(equalTo(activityE.fragmentRef2.foo)));
+        assertThat(activityE.fragmentRef1.bar, not(equalTo(activityE.fragmentRef2.bar)));
+        assertThat(activityE.fragmentRef1.qurtz, equalTo(activityE.fragmentRef2.qurtz));
+        assertThat(activityE.fragmentRef1.bar.foo, not(equalTo(activityE.fragmentRef2.bar.foo)));
+        assertThat(activityE.fragmentRef1.bar.foo, equalTo(activityE.fragmentRef1.foo));
+        assertThat(activityE.fragmentRef2.bar.foo, equalTo(activityE.fragmentRef2.foo));
     }
 
     public static class ActivityA extends RoboFragmentActivity {
@@ -201,7 +206,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
             }
         }
     }
-    
+
     public static class ActivityE extends RoboFragmentActivity {
         FragmentE fragmentRef1;
         FragmentE fragmentRef2;
@@ -217,19 +222,18 @@ protected void onCreate(Bundle savedInstanceState) {
         }
 
         public static class FragmentE extends RoboFragment {
-            @InjectView(101) View v;
-            View ref;
-            @Inject FooImpl foo;
-
-            @Override
-            public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-                ref = new View(getActivity());
-                ref.setId(101);
-                return ref;
-            }
+            @Inject Foo foo;
+            @Inject Bar bar;
+            @Inject Qurtz qurtz;
+        }
+        
+        @FragmentSingleton static class Foo {}
+        
+        static class Bar {
+            @Inject Foo foo;
         }
         
-        static class FooImpl {}
+        @ContextSingleton static class Qurtz {
+        }
     }
-
 }
diff --git a/roboguice/src/test/java/roboguice/fragment/provided/FragmentInjectionTest.java b/roboguice/src/test/java/roboguice/fragment/provided/FragmentInjectionTest.java
index 56723dca6..be924c4c5 100644
--- a/roboguice/src/test/java/roboguice/fragment/provided/FragmentInjectionTest.java
+++ b/roboguice/src/test/java/roboguice/fragment/provided/FragmentInjectionTest.java
@@ -1,6 +1,7 @@
 package roboguice.fragment.provided;
 
 import static org.hamcrest.CoreMatchers.equalTo;
+import static org.hamcrest.CoreMatchers.not;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertThat;
 
@@ -12,6 +13,9 @@
 import org.robolectric.util.ActivityController;
 
 import roboguice.activity.RoboActivity;
+import roboguice.fragment.provided.RoboFragment;
+import roboguice.inject.ContextSingleton;
+import roboguice.inject.FragmentSingleton;
 import roboguice.inject.InjectView;
 
 import com.google.inject.Inject;
@@ -85,8 +89,18 @@ public void shouldNotCrashWhenRotatingScreen() {
         assertNotNull(activity2.fragmentRef.ref);
         assertThat(activity2.fragmentRef.v, equalTo(activity2.fragmentRef.ref));
     }
-
-
+    
+    @Test
+    public void shouldUseFragmentScopePerFragment() {
+        final ActivityE activityE = Robolectric.buildActivity(ActivityE.class).create().start().resume().get();
+
+        assertThat(activityE.fragmentRef1.foo, not(equalTo(activityE.fragmentRef2.foo)));
+        assertThat(activityE.fragmentRef1.bar, not(equalTo(activityE.fragmentRef2.bar)));
+        assertThat(activityE.fragmentRef1.qurtz, equalTo(activityE.fragmentRef2.qurtz));
+        assertThat(activityE.fragmentRef1.bar.foo, not(equalTo(activityE.fragmentRef2.bar.foo)));
+        assertThat(activityE.fragmentRef1.bar.foo, equalTo(activityE.fragmentRef1.foo));
+        assertThat(activityE.fragmentRef2.bar.foo, equalTo(activityE.fragmentRef2.foo));
+    }
 
     public static class ActivityA extends RoboActivity {
         FragmentA fragmentRef;
@@ -98,7 +112,6 @@ protected void onCreate(Bundle savedInstanceState) {
             fragmentRef = new FragmentA();
             fragmentRef.onAttach(this);
             fragmentRef.onCreate(null);
-
         }
 
         public static class FragmentA extends RoboFragment {
@@ -107,15 +120,6 @@ protected void onCreate(Bundle savedInstanceState) {
 
             View ref;
 
-            @Override
-            public void onCreate(Bundle savedInstanceState) {
-                super.onCreate(savedInstanceState);
-            }
-            
-            @Override
-            public void onViewCreated(View view, Bundle savedInstanceState) {
-                super.onViewCreated(view, savedInstanceState);
-            }
             @Override
             public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
                 ref = new View(getActivity());
@@ -123,7 +127,6 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
                 return ref;
             }
         }
-
     }
 
 
@@ -159,7 +162,6 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
                 return viewRef;
             }
         }
-
     }
 
     public static class ActivityC extends RoboActivity {
@@ -173,7 +175,6 @@ protected void onCreate(Bundle savedInstanceState) {
             super.onCreate(savedInstanceState);
             setContentView( new View(this) );
 
-
             fragmentRef = new FragmentC();
             fragmentRef.onAttach(this);
             fragmentRef.onCreate(null);
@@ -212,16 +213,6 @@ protected void onCreate(Bundle savedInstanceState) {
             
         }
 
-        @Override
-        protected void onPause() {
-            super.onPause();
-        }
-
-        @Override
-        protected void onResume() {
-            super.onResume();
-        }
-
         public static class FragmentD extends RoboFragment {
             @InjectView(101) View v;
 
@@ -233,13 +224,39 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
                 ref.setId(101);
                 return ref;
             }
+        }
+    }
+    
+    public static class ActivityE extends RoboActivity {
+        FragmentE fragmentRef1;
+        FragmentE fragmentRef2;
 
-            @Override
-            public void onCreate(Bundle savedInstanceState) {
-                super.onCreate(savedInstanceState);
-            }
+        @Override
+        protected void onCreate(Bundle savedInstanceState) {
+            super.onCreate(savedInstanceState);
+            fragmentRef1 = new FragmentE();
+            fragmentRef1.onAttach(this);
+            fragmentRef1.onCreate(null);
+            fragmentRef2 = new FragmentE();
+            fragmentRef2.onAttach(this);
+            fragmentRef2.onCreate(null);
+            setContentView(new FrameLayout(this));
         }
 
+        public static class FragmentE extends RoboFragment {
+            @Inject Foo foo;
+            @Inject Bar bar;
+            @Inject Qurtz qurtz;
+        }
+        
+        @FragmentSingleton static class Foo {}
+        
+        static class Bar {
+            @Inject Foo foo;
+        }
+        
+        @ContextSingleton static class Qurtz {
+        }
     }
 
 }
diff --git a/roboguice/src/test/java/roboguice/view/ViewInjectionTest.java b/roboguice/src/test/java/roboguice/view/ViewInjectionTest.java
index ab6bbb528..2ef414ced 100644
--- a/roboguice/src/test/java/roboguice/view/ViewInjectionTest.java
+++ b/roboguice/src/test/java/roboguice/view/ViewInjectionTest.java
@@ -8,7 +8,6 @@
 import java.lang.ref.SoftReference;
 import java.util.ArrayList;
 
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
@@ -79,8 +78,6 @@ public void shouldNotHoldReferencesToContext() {
 
     }
 
-
-
     @Test
     public void shouldBeAbleToInjectReferencesToTaggedViews() {
         final D activity = Robolectric.buildActivity(D.class).create().get();
