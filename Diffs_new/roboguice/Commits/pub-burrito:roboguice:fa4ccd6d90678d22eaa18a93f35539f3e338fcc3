diff --git a/roboguice/src/main/java/roboguice/android/util/logging/AndroidBaseConfig.java b/roboguice/src/main/java/roboguice/android/util/logging/AndroidBaseConfig.java
index 146f95cd6..1296b178c 100644
--- a/roboguice/src/main/java/roboguice/android/util/logging/AndroidBaseConfig.java
+++ b/roboguice/src/main/java/roboguice/android/util/logging/AndroidBaseConfig.java
@@ -20,14 +20,13 @@ public AndroidBaseConfig(Application context) {
         try {
             packageName = context.getPackageName();
             final int flags = context.getPackageManager().getApplicationInfo(packageName, 0).flags;
-            minimumLogLevel = (flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0 ? LogLevel.VERBOSE.logLevel() : LogLevel.INFO.logLevel();
+            minimumLogLevel = (flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0 ? LogLevel.VERBOSE : LogLevel.INFO;
             scope = packageName.toUpperCase();
 
-            Ln.d("Configuring Logging, minimum log level is %s", Ln.logLevelToString(minimumLogLevel) );
+            Ln.d("Configuring Logging, minimum log level is %s", Ln.logLevelToString(minimumLogLevel.logLevel()) );
 
         } catch( Exception e ) {
             Log.e(packageName, "Error configuring logger", e);
         }
     }
-    
 }
diff --git a/roboguice/src/main/java/roboguice/android/util/logging/AndroidPrint.java b/roboguice/src/main/java/roboguice/android/util/logging/AndroidPrint.java
index 70ef60bce..9e5e29a76 100644
--- a/roboguice/src/main/java/roboguice/android/util/logging/AndroidPrint.java
+++ b/roboguice/src/main/java/roboguice/android/util/logging/AndroidPrint.java
@@ -1,5 +1,6 @@
 package roboguice.android.util.logging;
 
+import roboguice.base.util.logging.LogLevel;
 import roboguice.base.util.logging.Print;
 
 import android.util.Log;
@@ -8,7 +9,7 @@
 public class AndroidPrint extends Print {
     
     @Override
-    public int println(int priority, String msg ) {
-        return Log.println(priority,getScope(5), processMessage(msg));
+    public int println( LogLevel priority, String msg ) {
+        return Log.println(priority.logLevel(),getScope(5), processMessage(msg));
     }
 }
diff --git a/roboguice/src/main/java/roboguice/base/util/logging/BaseConfig.java b/roboguice/src/main/java/roboguice/base/util/logging/BaseConfig.java
index 9274c8b94..2cf3bbbdc 100644
--- a/roboguice/src/main/java/roboguice/base/util/logging/BaseConfig.java
+++ b/roboguice/src/main/java/roboguice/base/util/logging/BaseConfig.java
@@ -6,7 +6,7 @@
 
 public class BaseConfig implements Config {
 
-    protected int minimumLogLevel = LogLevel.VERBOSE.logLevel();
+    protected LogLevel minimumLogLevel = LogLevel.VERBOSE;
     protected String packageName = "";
     protected String scope = "";
     
@@ -15,18 +15,18 @@ public BaseConfig() {
             packageName = "";
             scope = packageName.toUpperCase();
 
-            Ln.d("Configuring Logging, minimum log level is %s", Ln.logLevelToString(minimumLogLevel) );
+            Ln.d("Configuring Logging, minimum log level is %s", Ln.logLevelToString(minimumLogLevel.logLevel()) );
 
         } catch( Exception e ) {
             Log.e(packageName, "Error configuring logger", e);
         }
     }
 
-    public int getLoggingLevel() {
+    public LogLevel getLoggingLevel() {
         return minimumLogLevel;
     }
 
-    public void setLoggingLevel(int level) {
+    public void setLoggingLevel(LogLevel level) {
         minimumLogLevel = level;
     }
     
diff --git a/roboguice/src/main/java/roboguice/base/util/logging/Config.java b/roboguice/src/main/java/roboguice/base/util/logging/Config.java
index 88f788124..e4e84cb07 100644
--- a/roboguice/src/main/java/roboguice/base/util/logging/Config.java
+++ b/roboguice/src/main/java/roboguice/base/util/logging/Config.java
@@ -1,6 +1,6 @@
 package roboguice.base.util.logging;
 
 public interface Config {
-    public int getLoggingLevel();
-    public void setLoggingLevel(int level);
+    public LogLevel getLoggingLevel();
+    public void setLoggingLevel(LogLevel level);
 }
diff --git a/roboguice/src/main/java/roboguice/base/util/logging/Ln.java b/roboguice/src/main/java/roboguice/base/util/logging/Ln.java
index a2d794cc0..cc9913b24 100644
--- a/roboguice/src/main/java/roboguice/base/util/logging/Ln.java
+++ b/roboguice/src/main/java/roboguice/base/util/logging/Ln.java
@@ -72,121 +72,121 @@ private Ln() {}
 
 
     public static int v(Throwable t) {
-        return config.getLoggingLevel() <= LogLevel.VERBOSE.logLevel() ? print.println(LogLevel.VERBOSE.logLevel(), getStackTraceString(t)) : 0;
+        return config.getLoggingLevel().logLevel() <= LogLevel.VERBOSE.logLevel() ? print.println(LogLevel.VERBOSE, getStackTraceString(t)) : 0;
     }
 
     public static int v(Object s1, Object... args) {
-        if( config.getLoggingLevel() > LogLevel.VERBOSE.logLevel() )
+        if( config.getLoggingLevel().logLevel() > LogLevel.VERBOSE.logLevel() )
             return 0;
 
         final String s = Strings.toString(s1);
         final String message = args.length>0 ? String.format(s,args) : s;
-        return print.println(LogLevel.VERBOSE.logLevel(), message);
+        return print.println(LogLevel.VERBOSE, message);
     }
 
     public static int v(Throwable throwable, Object s1, Object... args ) {
-        if( config.getLoggingLevel() > LogLevel.VERBOSE.logLevel() )
+        if( config.getLoggingLevel().logLevel() > LogLevel.VERBOSE.logLevel() )
             return 0;
 
         final String s = Strings.toString(s1);
         final String message = (args.length>0 ? String.format(s,args) : s) + '\n' + getStackTraceString(throwable);
-        return print.println(LogLevel.VERBOSE.logLevel(), message);
+        return print.println(LogLevel.VERBOSE, message);
     }
 
     public static int d(Throwable t) {
-        return config.getLoggingLevel() <= LogLevel.DEBUG.logLevel() ? print.println(LogLevel.DEBUG.logLevel(), getStackTraceString(t)) : 0;
+        return config.getLoggingLevel().logLevel() <= LogLevel.DEBUG.logLevel() ? print.println(LogLevel.DEBUG, getStackTraceString(t)) : 0;
     }
 
     public static int d(Object s1, Object... args) {
-        if( config.getLoggingLevel() > LogLevel.DEBUG.logLevel() )
+        if( config.getLoggingLevel().logLevel() > LogLevel.DEBUG.logLevel() )
             return 0;
 
         final String s = Strings.toString(s1);
         final String message = args.length>0 ? String.format(s,args) : s;
-        return print.println(LogLevel.DEBUG.logLevel(), message);
+        return print.println(LogLevel.DEBUG, message);
     }
 
     public static int d(Throwable throwable, Object s1, Object... args) {
-        if( config.getLoggingLevel() > LogLevel.DEBUG.logLevel() )
+        if( config.getLoggingLevel().logLevel() > LogLevel.DEBUG.logLevel() )
             return 0;
 
         final String s = Strings.toString(s1);
         final String message = (args.length>0 ? String.format(s,args) : s) + '\n' + getStackTraceString(throwable);
-        return print.println(LogLevel.DEBUG.logLevel(), message);
+        return print.println(LogLevel.DEBUG, message);
     }
 
     public static int i(Throwable t) {
-        return config.getLoggingLevel() <= LogLevel.INFO.logLevel() ? print.println(LogLevel.INFO.logLevel(), getStackTraceString(t)) : 0;
+        return config.getLoggingLevel().logLevel() <= LogLevel.INFO.logLevel() ? print.println(LogLevel.INFO, getStackTraceString(t)) : 0;
     }
 
     public static int i( Object s1, Object... args) {
-        if( config.getLoggingLevel() > LogLevel.INFO.logLevel() )
+        if( config.getLoggingLevel().logLevel() > LogLevel.INFO.logLevel() )
             return 0;
 
         final String s = Strings.toString(s1);
         final String message = args.length>0 ? String.format(s,args) : s;
-        return print.println(LogLevel.INFO.logLevel(), message);
+        return print.println(LogLevel.INFO, message);
     }
 
     public static int i(Throwable throwable, Object s1, Object... args) {
-        if( config.getLoggingLevel() > LogLevel.INFO.logLevel() )
+        if( config.getLoggingLevel().logLevel() > LogLevel.INFO.logLevel() )
             return 0;
 
         final String s = Strings.toString(s1);
         final String message = (args.length > 0 ? String.format(s, args) : s) + '\n' + getStackTraceString(throwable);
-        return print.println(LogLevel.INFO.logLevel(), message);
+        return print.println(LogLevel.INFO, message);
     }
 
     public static int w(Throwable t) {
-        return config.getLoggingLevel() <= LogLevel.WARN.logLevel() ? print.println(LogLevel.WARN.logLevel(), getStackTraceString(t)) : 0;
+        return config.getLoggingLevel().logLevel() <= LogLevel.WARN.logLevel() ? print.println(LogLevel.WARN, getStackTraceString(t)) : 0;
     }
 
     public static int w( Object s1, Object... args) {
-        if( config.getLoggingLevel() > LogLevel.WARN.logLevel() )
+        if( config.getLoggingLevel().logLevel() > LogLevel.WARN.logLevel() )
             return 0;
 
         final String s = Strings.toString(s1);
         final String message = args.length>0 ? String.format(s,args) : s;
-        return print.println(LogLevel.WARN.logLevel(), message);
+        return print.println(LogLevel.WARN, message);
     }
 
     public static int w( Throwable throwable, Object s1, Object... args) {
-        if( config.getLoggingLevel() > LogLevel.WARN.logLevel() )
+        if( config.getLoggingLevel().logLevel() > LogLevel.WARN.logLevel() )
             return 0;
 
         final String s = Strings.toString(s1);
         final String message = (args.length>0 ? String.format(s,args) : s) + '\n' + getStackTraceString(throwable);
-        return print.println(LogLevel.WARN.logLevel(), message);
+        return print.println(LogLevel.WARN, message);
     }
 
     public static int e(Throwable t) {
-        return config.getLoggingLevel() <= LogLevel.ERROR.logLevel() ? print.println(LogLevel.ERROR.logLevel(), getStackTraceString(t)) : 0;
+        return config.getLoggingLevel().logLevel() <= LogLevel.ERROR.logLevel() ? print.println(LogLevel.ERROR, getStackTraceString(t)) : 0;
     }
 
     public static int e( Object s1, Object... args) {
-        if( config.getLoggingLevel() > LogLevel.ERROR.logLevel() )
+        if( config.getLoggingLevel().logLevel() > LogLevel.ERROR.logLevel() )
             return 0;
 
         final String s = Strings.toString(s1);
         final String message = args.length>0 ? String.format(s,args) : s;
-        return print.println(LogLevel.ERROR.logLevel(), message);
+        return print.println(LogLevel.ERROR, message);
     }
 
     public static int e( Throwable throwable, Object s1, Object... args) {
-        if( config.getLoggingLevel() > LogLevel.ERROR.logLevel() )
+        if( config.getLoggingLevel().logLevel() > LogLevel.ERROR.logLevel() )
             return 0;
 
         final String s = Strings.toString(s1);
         final String message = (args.length>0 ? String.format(s,args) : s) + '\n' + getStackTraceString(throwable);
-        return print.println(LogLevel.ERROR.logLevel(), message);
+        return print.println(LogLevel.ERROR, message);
     }
 
     public static boolean isDebugEnabled() {
-        return config.getLoggingLevel() <= LogLevel.DEBUG.logLevel();
+        return config.getLoggingLevel().logLevel() <= LogLevel.DEBUG.logLevel();
     }
 
     public static boolean isVerboseEnabled() {
-        return config.getLoggingLevel() <= LogLevel.VERBOSE.logLevel();
+        return config.getLoggingLevel().logLevel() <= LogLevel.VERBOSE.logLevel();
     }
 
     public static Config getConfig() {
diff --git a/roboguice/src/main/java/roboguice/base/util/logging/Print.java b/roboguice/src/main/java/roboguice/base/util/logging/Print.java
index 42b60a8b8..04b11cd04 100644
--- a/roboguice/src/main/java/roboguice/base/util/logging/Print.java
+++ b/roboguice/src/main/java/roboguice/base/util/logging/Print.java
@@ -9,19 +9,19 @@
      */
     @Inject protected static BaseConfig config = new BaseConfig();
      
-    public int println(int priority, String msg )
+    public int println(LogLevel priority, String msg )
     {
         return 0;
     }
 
     protected String processMessage(String msg) {
-        if( config.getLoggingLevel() <= LogLevel.DEBUG.logLevel() )
+        if( config.getLoggingLevel().logLevel() <= LogLevel.DEBUG.logLevel() )
             msg = String.format("%s %s", Thread.currentThread().getName(), msg);
         return msg;
     }
 
     protected static String getScope(int skipDepth) {
-        if( config.getLoggingLevel() <= LogLevel.DEBUG.logLevel() ) {
+        if( config.getLoggingLevel().logLevel() <= LogLevel.DEBUG.logLevel() ) {
             final StackTraceElement trace = Thread.currentThread().getStackTrace()[skipDepth];
             return config.scope() + "/" + trace.getFileName() + ":" + trace.getLineNumber();
         }
diff --git a/roboguice/src/main/java/roboguice/java/util/logging/JavaBaseConfig.java b/roboguice/src/main/java/roboguice/java/util/logging/JavaBaseConfig.java
index 25b899e06..1e7fce0bf 100644
--- a/roboguice/src/main/java/roboguice/java/util/logging/JavaBaseConfig.java
+++ b/roboguice/src/main/java/roboguice/java/util/logging/JavaBaseConfig.java
@@ -18,81 +18,62 @@ public JavaBaseConfig ( String name )
     {
         BasicConfigurator.configure();
         logger = Logger.getLogger(name);
-        
+        //TODO add system prop to determine debug build from prod build
         logger.setLevel( Level.ALL );
         
         minimumLogLevel = JavaLogLevel.ALL.getLogLevel();
     }
     
     @Override
-    public void setLoggingLevel(int level) {
+    public void setLoggingLevel(LogLevel level) {
         super.setLoggingLevel(level);
         
-        logger.setLevel( JavaLogLevel.forLogLevel(level) );
+        logger.setLevel( JavaLogLevel.from( level ).javaLevel() );
     }
     
     static enum JavaLogLevel
     {
-        ALL( Level.ALL ),
+        ALL( Level.ALL, LogLevel.VERBOSE ),
         DEBUG( Level.DEBUG ),
         WARN( Level.WARN ),
         INFO( Level.INFO ), 
         ERROR( Level.ERROR ),
-        TRACE( Level.TRACE )
+        FATAL( Level.FATAL )
         ;
 
         private Level level;
+        private LogLevel logLevel;
         
         private JavaLogLevel( Level level )
         {
             this.level = level;
         }
         
-        public int getLogLevel()
+        private JavaLogLevel( Level level, LogLevel logLevel )
         {
-            switch( this )
-            {
-                case ALL:
-                    return LogLevel.VERBOSE.logLevel();
-                case DEBUG:
-                    return LogLevel.DEBUG.logLevel();
-                case WARN:
-                    return LogLevel.WARN.logLevel();
-                case INFO:
-                    return LogLevel.INFO.logLevel();
-                case ERROR:
-                    return LogLevel.ERROR.logLevel();
-                case TRACE:
-                    return LogLevel.ASSERT.logLevel();
-                default:
-                    return LogLevel.VERBOSE.logLevel();
-            }
+            this.level = level;
         }
         
-        public static Level forLogLevel( int level )
+        public LogLevel getLogLevel()
         {
-            LogLevel match = null;
-            for ( LogLevel logLevel : LogLevel.values() )
-            {
-                if ( logLevel.logLevel() == level )
-                {
-                    match = logLevel;
-                    break;
-                }
-            }
-            
-            if ( match != null )
+            return logLevel;
+        }
+        
+        public Level javaLevel()
+        {
+            return level;
+        }
+        
+        public static JavaLogLevel from( LogLevel canidate )
+        {
+            for ( JavaLogLevel level : JavaLogLevel.values() )
             {
-                for ( JavaLogLevel logLevel : values() )
+                if ( level.logLevel == canidate )
                 {
-                    if ( logLevel.getLogLevel() == level )
-                    {
-                        return logLevel.level;
-                    }
+                    return level;
                 }
             }
-            
-            return Level.ALL;
+            return ALL;
         }
     }
 }
diff --git a/roboguice/src/main/java/roboguice/java/util/logging/JavaPrint.java b/roboguice/src/main/java/roboguice/java/util/logging/JavaPrint.java
index ebed3aaa5..b497cc81d 100644
--- a/roboguice/src/main/java/roboguice/java/util/logging/JavaPrint.java
+++ b/roboguice/src/main/java/roboguice/java/util/logging/JavaPrint.java
@@ -1,13 +1,14 @@
 package roboguice.java.util.logging;
 
+import roboguice.base.util.logging.LogLevel;
 import roboguice.base.util.logging.Print;
 import roboguice.java.util.logging.JavaBaseConfig.JavaLogLevel;
 
 public class JavaPrint extends Print {
 
     @Override
-    public int println(int priority, String msg) {
-        ( ( JavaBaseConfig ) config ).logger.log( JavaLogLevel.forLogLevel( priority ), msg );
+    public int println(LogLevel priority, String msg) {
+        ( ( JavaBaseConfig ) config ).logger.log( JavaLogLevel.from( priority ).javaLevel(), msg );
         return 0;
     }
 }
