diff --git a/.travis.yml b/.travis.yml
index 1d1514426..4369d8632 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -20,5 +20,7 @@ before_install:
     - source ~/.android-sdk-installer/env
 
 script:
-    - if [ "$TRAVIS_BRANCH" == "master" ] ; then target=deploy ; else target=install ; fi
+    - echo "Building branch: $TRAVIS_BRANCH"
+    - echo "Pull Request number: $TRAVIS_PULL_REQUEST"
+    - if [ "$TRAVIS_BRANCH" == "master" -a -z "$TRAVIS_PULL_REQUEST" ] ; then target=deploy ; else target=install ; fi
     - mvn $target --settings target/travis/settings.xml
diff --git a/roboguice/src/test/java/roboguice/event/ContextObserverBase.java b/roboguice/src/test/java/roboguice/event/ContextObserverBase.java
index 6ba9a9dd7..7be9069e6 100644
--- a/roboguice/src/test/java/roboguice/event/ContextObserverBase.java
+++ b/roboguice/src/test/java/roboguice/event/ContextObserverBase.java
@@ -77,10 +77,12 @@ void baseObservesPackagePrivateEvent(@Observes EventTwo event) {
         triggerCalled(methods[2], EventTwo.class);
     }
 
+    @SuppressWarnings("unused")
     private void baseObservesPrivateEvent(@Observes EventOne event) {
         triggerCalled(methods[3], EventOne.class);
     }
 
+    @SuppressWarnings("unused")
     private void baseObservesPrivateEvent(@Observes EventTwo event) {
         triggerCalled(methods[3], EventTwo.class);
     }
@@ -109,7 +111,7 @@ void observesOverloadedPackagePrivateEvent(@Observes EventTwo event) {
         triggerCalled(OVERLOADED_METHOD, EventTwo.class);
     }
 
-    public void triggerCalled(String method, Class eventClass) {
+    public void triggerCalled(String method, Class<?> eventClass) {
         if (!callCount.containsKey(method)) {
             callCount.put(method, new HashMap<Class<?>, Integer>());
         }
diff --git a/roboguice/src/test/java/roboguice/event/ContextObserverTesterImpl.java b/roboguice/src/test/java/roboguice/event/ContextObserverTesterImpl.java
index 8e8ef9f62..f71a226d2 100644
--- a/roboguice/src/test/java/roboguice/event/ContextObserverTesterImpl.java
+++ b/roboguice/src/test/java/roboguice/event/ContextObserverTesterImpl.java
@@ -46,10 +46,12 @@ void observesPackagePrivateEvent(@Observes EventTwo event){
         triggerCalled(methods[2], EventOne.class);
     }
 
+    @SuppressWarnings("unused")
     private void observesPrivateEvent(@Observes EventOne event){
         triggerCalled(methods[3], EventOne.class);
     }
 
+    @SuppressWarnings("unused")
     private void observesPrivateEvent(@Observes EventTwo event){
         triggerCalled(methods[3], EventOne.class);
     }
diff --git a/roboguice/src/test/java/roboguice/event/EventManagerTest.java b/roboguice/src/test/java/roboguice/event/EventManagerTest.java
index edcf6f0db..e494afc4a 100644
--- a/roboguice/src/test/java/roboguice/event/EventManagerTest.java
+++ b/roboguice/src/test/java/roboguice/event/EventManagerTest.java
@@ -33,6 +33,7 @@ public void setup() throws NoSuchMethodException {
         event = new EventOne();
     }
 
+    @SuppressWarnings("rawtypes")
     @Test
     public void testRegistrationLifeCycle(){
         for(Method method : eventOneMethods){
diff --git a/roboguice/src/test/java/roboguice/event/eventListener/AsynchronousEventListenerDecoratorTest.java b/roboguice/src/test/java/roboguice/event/eventListener/AsynchronousEventListenerDecoratorTest.java
index 7fff55bb8..80f1c163a 100644
--- a/roboguice/src/test/java/roboguice/event/eventListener/AsynchronousEventListenerDecoratorTest.java
+++ b/roboguice/src/test/java/roboguice/event/eventListener/AsynchronousEventListenerDecoratorTest.java
@@ -24,6 +24,7 @@
     protected AsynchronousEventListenerDecorator<Object> decorator;
 
     @Before
+    @SuppressWarnings("unchecked")
     public void setup(){
         //noinspection unchecked
         eventListener = createMock(EventListener.class);
@@ -33,6 +34,7 @@ public void setup(){
 
     // Mike doesn't really understand what this test is doing
     @Test
+    @SuppressWarnings("deprecation")
     public void onEventTest(){
         reset(eventListener);
 
diff --git a/roboguice/src/test/java/roboguice/event/eventListener/EventListenerRunnableTest.java b/roboguice/src/test/java/roboguice/event/eventListener/EventListenerRunnableTest.java
index 551e6d254..d67bdc557 100644
--- a/roboguice/src/test/java/roboguice/event/eventListener/EventListenerRunnableTest.java
+++ b/roboguice/src/test/java/roboguice/event/eventListener/EventListenerRunnableTest.java
@@ -21,9 +21,11 @@
     protected EventOne event;
     protected EventListener<EventOne> eventListener;
 
+    @SuppressWarnings("rawtypes")
     protected EventListenerRunnable eventListenerRunnable;
 
     @Before
+    @SuppressWarnings("unchecked")
     public void setup(){
         //noinspection unchecked
         eventListener = createMock(EventListener.class);
diff --git a/roboguice/src/test/java/roboguice/event/eventListener/EventListenerThreadingDecoratorTest.java b/roboguice/src/test/java/roboguice/event/eventListener/EventListenerThreadingDecoratorTest.java
index 4ddc1b114..88c740ec1 100644
--- a/roboguice/src/test/java/roboguice/event/eventListener/EventListenerThreadingDecoratorTest.java
+++ b/roboguice/src/test/java/roboguice/event/eventListener/EventListenerThreadingDecoratorTest.java
@@ -28,6 +28,7 @@
     protected EventListener<Void> eventListener;
 
     @Before
+    @SuppressWarnings("unchecked")
     public void setup(){
 
         //noinspection unchecked
@@ -46,18 +47,21 @@ public void configure() {
     }
 
     @Test
+    @SuppressWarnings("rawtypes")
     public void buildCurrentThreadObserverTest(){
         final EventListener outputListener = eventListenerDecorator.decorate(EventThread.CURRENT, eventListener);
         assertEquals(eventListener, outputListener);
     }
 
     @Test
+    @SuppressWarnings("rawtypes")
     public void buildUIThreadObserverTest(){
         final EventListener outputListener = eventListenerDecorator.decorate(EventThread.UI, eventListener);
         assertEquals( eventListener, ((UIThreadEventListenerDecorator)outputListener).eventListener);
     }
 
     @Test
+    @SuppressWarnings("rawtypes")
     public void buildAsyncThreadObserverTest(){
         final EventListener outputListener = eventListenerDecorator.decorate(EventThread.BACKGROUND, eventListener);
         assertEquals( eventListener, ((AsynchronousEventListenerDecorator)outputListener).eventListener);
diff --git a/roboguice/src/test/java/roboguice/event/eventListener/RunnableAsyncTaskAdaptorTest.java b/roboguice/src/test/java/roboguice/event/eventListener/RunnableAsyncTaskAdaptorTest.java
index 4bdc153b5..55a6c103c 100644
--- a/roboguice/src/test/java/roboguice/event/eventListener/RunnableAsyncTaskAdaptorTest.java
+++ b/roboguice/src/test/java/roboguice/event/eventListener/RunnableAsyncTaskAdaptorTest.java
@@ -15,6 +15,7 @@
  */
 public class RunnableAsyncTaskAdaptorTest {
 
+    @SuppressWarnings("rawtypes")
     protected EventListenerRunnable runnable;
 
     protected RunnableAsyncTaskAdaptor runnableAdaptor;
diff --git a/roboguice/src/test/java/roboguice/fragment/provided/shadow/ShadowNativeFragmentActivity.java b/roboguice/src/test/java/roboguice/fragment/provided/shadow/ShadowNativeFragmentActivity.java
index 0924251c9..14d71168a 100644
--- a/roboguice/src/test/java/roboguice/fragment/provided/shadow/ShadowNativeFragmentActivity.java
+++ b/roboguice/src/test/java/roboguice/fragment/provided/shadow/ShadowNativeFragmentActivity.java
@@ -225,8 +225,8 @@ public void dump(String s, FileDescriptor fileDescriptor, PrintWriter printWrite
             }
 
 			//@Override
-			public boolean isDestroyed() {
-				// TODO Auto-generated method stub
+			@SuppressWarnings("unused")
+            public boolean isDestroyed() {
 				return false;
 			}
         };
diff --git a/roboguice/src/test/java/roboguice/inject/ProviderTest.java b/roboguice/src/test/java/roboguice/inject/ProviderTest.java
index a4cd2ef9d..a6b439537 100644
--- a/roboguice/src/test/java/roboguice/inject/ProviderTest.java
+++ b/roboguice/src/test/java/roboguice/inject/ProviderTest.java
@@ -40,6 +40,7 @@ public Context call() throws Exception {
     @Test
     public void shouldReturnProperContext() throws Exception {
         //noinspection UnusedDeclaration
+        @SuppressWarnings("unused")
         final B b = Robolectric.buildActivity(B.class).create().get();
 
         final C c = Robolectric.buildActivity(C.class).create().get();
diff --git a/roboguice/src/test/java/roboguice/view/ViewInjectionTest.java b/roboguice/src/test/java/roboguice/view/ViewInjectionTest.java
index 68cb59e7b..d1fe32912 100644
--- a/roboguice/src/test/java/roboguice/view/ViewInjectionTest.java
+++ b/roboguice/src/test/java/roboguice/view/ViewInjectionTest.java
@@ -36,7 +36,18 @@ public void shouldInjectViewsIntoActivitiesAndViews() {
         assertThat(activity.v, equalTo((View)activity.ref));
         assertThat(activity.v.w, equalTo(activity.v.ref));
     }
-
+    
+    @Test
+    public void shouldInjectViewsIntoViewsCreatedDynamically() {
+        final C activity = Robolectric.buildActivity(C.class).create().get();
+        //reset view A
+        activity.v = new C.ViewA(activity);
+        //manually inject
+        RoboGuice.injectMembers(activity, activity.v);
+        RoboGuice.getInjector(activity).injectViewMembers(activity.v);
+       
+        assertThat(activity.v.w, equalTo(activity.v.ref));
+    }
 
     @Test
     public void shouldBeAbleToInjectViewsIntoPojos() {
