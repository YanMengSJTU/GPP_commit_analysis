diff --git a/roboguice/src/main/java/roboguice/base/util/PropertyLoader.java b/roboguice/src/main/java/roboguice/base/util/PropertyLoader.java
new file mode 100644
index 000000000..e832091f1
--- /dev/null
+++ b/roboguice/src/main/java/roboguice/base/util/PropertyLoader.java
@@ -0,0 +1,98 @@
+package roboguice.base.util;
+
+import java.io.InputStream;
+import java.net.URL;
+import java.util.Properties;
+
+import roboguice.base.util.logging.Ln;
+
+public class PropertyLoader {
+
+    /**
+     * Loads a property file into specific ( or new ) {@link Properties} object
+     * 
+     * @param propertyFile The location of the property file to load
+     * @param property ( Optional ) If set, the propertyFile will be loaded into this property
+     * @return The {@link Properties} that was loaded, {@code null} if there was an error loading the property
+     */
+    public static Properties loadProperty( String propertyFile, Properties property )
+    {
+        boolean set = false;
+        Properties tmp = property == null ? new Properties() : property;
+
+        InputStream in = PropertyLoader.class.getResourceAsStream(propertyFile);
+        try 
+        {// and load the property file
+            if ( in != null ) 
+            {
+                tmp.load( in );
+                set = true;
+            } 
+            else 
+            {
+                Ln.w( "Could not find [%s] resource - can not inject any resources in specified file.", propertyFile );
+            }
+        } 
+        catch (Exception e) 
+        {
+            Ln.e( e, "Error loading property file [%s]", propertyFile );
+        } 
+        finally 
+        {
+            try 
+            {
+                in.close();
+            } catch (Exception ex) 
+            {
+                // ignore
+            }
+        }
+            
+        return set ? tmp : null;
+    }
+
+    /**
+     * Loads a property file into specific ( or new ) {@link Properties} object
+     * 
+     * @param propertyFile The {@link URL} of the property file to load
+     * @param property ( Optional ) If set, the propertyFile will be loaded into this property
+     * @return The {@link Properties} that was loaded, {@code null} if there was an error loading the property
+     */
+    public static Properties loadProperty( URL propertyFile, Properties property )
+    {
+        boolean set = false;
+        Properties tmp = property == null ? new Properties() : property;
+        InputStream in = null;
+        
+        try 
+        {// and load the property file
+            in = propertyFile.openStream();
+            
+            if ( in != null ) 
+            {
+                tmp.load( in );
+                set = true;
+            } 
+            else 
+            {
+                Ln.w( "Could not find [%s] resource - can not inject any resources in specified file.", propertyFile );
+            }
+        } 
+        catch (Exception e) 
+        {
+            Ln.e( e, "Error loading property file [%s]", propertyFile );
+        } 
+        finally 
+        {
+            try 
+            {
+                in.close();
+            } catch (Exception ex) 
+            {
+                // ignore
+            }
+        }
+        
+        return set ? tmp : null;
+    }
+}
diff --git a/roboguice/src/main/java/roboguice/java/JavaGuice.java b/roboguice/src/main/java/roboguice/java/JavaGuice.java
index 21dbd3c9b..6eceaedf2 100644
--- a/roboguice/src/main/java/roboguice/java/JavaGuice.java
+++ b/roboguice/src/main/java/roboguice/java/JavaGuice.java
@@ -1,6 +1,5 @@
 package roboguice.java;
 
-import java.io.InputStream;
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.Comparator;
@@ -8,7 +7,7 @@
 import java.util.Properties;
 
 import roboguice.base.RoboGuice;
-import roboguice.base.util.logging.Ln;
+import roboguice.base.util.PropertyLoader;
 import roboguice.java.config.JavaDefaultRoboModule;
 import roboguice.java.inject.JavaResourceListener;
 
@@ -24,38 +23,9 @@ private JavaGuice() {
     @Override
     protected List<Module> baseModules(String scopedObject) 
     {
-        Properties property = new Properties();
+        Properties property = PropertyLoader.loadProperty(scopedObject, null);
         
-        //scoped object should the directory to property file
-        InputStream in = JavaResourceListener.class.getClassLoader().getResourceAsStream( scopedObject );
-        try
-        {//and load the property file 
-            if ( in != null )
-            {
-                property.load( in );
-            } 
-            else
-            {
-                Ln.w( "Could not find [%s] resource - can not inject any resources in specified file.", scopedObject );
-            }
-        }
-        catch ( Exception e )
-        {
-            Ln.e( e, "Error loading property file [%s]", scopedObject );
-        }
-        finally
-        {
-            try
-            {
-                in.close();
-            }
-            catch ( Exception ex )
-            {
-                // ignore
-            }
-        }
-        
-        String custom_modules = (String) property.get(modulesResourceId);
+        String custom_modules = property != null ? (String) property.get(modulesResourceId) : null;
         final String[] moduleNames = custom_modules != null ? custom_modules.split( "," ) : new String[]{};
         
         final ArrayList<Module> modules = new ArrayList<Module>();
diff --git a/roboguice/src/main/java/roboguice/java/util/ResourceManager.java b/roboguice/src/main/java/roboguice/java/util/ResourceManager.java
index f29a69928..70d49d070 100644
--- a/roboguice/src/main/java/roboguice/java/util/ResourceManager.java
+++ b/roboguice/src/main/java/roboguice/java/util/ResourceManager.java
@@ -1,7 +1,6 @@
 package roboguice.java.util;
 
 import java.io.IOException;
-import java.io.InputStream;
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -15,7 +14,7 @@
 import java.util.Properties;
 import java.util.Set;
 
-import roboguice.base.util.logging.Ln;
+import roboguice.base.util.PropertyLoader;
 import roboguice.java.inject.JavaResourceListener;
 
 import com.google.common.collect.Lists;
@@ -146,34 +145,9 @@ Properties loadProperty(String propertyFile) {
             for( URL url : allUrls)
             {//for each url
                 
-                InputStream in = url.openStream();
-                try 
-                {// and load the property file
-                    if ( in != null ) 
-                    {
-                        property.load( in );
-
-                        // put resource path cache map into main cache
-                        properties.put(propertyFile, property);
-                    } 
-                    else 
-                    {
-                        Ln.w( "Could not find [%s] resource - can not inject any resources in specified file.", propertyFile );
-                    }
-                } 
-                catch (Exception e) 
-                {
-                    Ln.e( e, "Error loading property file [%s]", propertyFile );
-                } 
-                finally 
+                if ( PropertyLoader.loadProperty(url, property) != null )
                 {
-                    try 
-                    {
-                        in.close();
-                    } catch (Exception ex) 
-                    {
-                        // ignore
-                    }
+                    properties.put(propertyFile, property);
                 }
             }
         } 
diff --git a/roboguice/src/test/java/roboguice/java/util/ResourceManagerTest.java b/roboguice/src/test/java/roboguice/java/util/ResourceManagerTest.java
index cb69c52ac..8e5ebdf81 100644
--- a/roboguice/src/test/java/roboguice/java/util/ResourceManagerTest.java
+++ b/roboguice/src/test/java/roboguice/java/util/ResourceManagerTest.java
@@ -42,6 +42,7 @@ public void testLoadProperties()
     @Test
     public void testGetValueThatIsRepeated()
     {
+        ResourceManager.instance().addResourcePath( "path1/resone.properties");
         ResourceManager.instance().addResourcePath( "path2/restwo.properties");
         //value in path2 should be expected
         
