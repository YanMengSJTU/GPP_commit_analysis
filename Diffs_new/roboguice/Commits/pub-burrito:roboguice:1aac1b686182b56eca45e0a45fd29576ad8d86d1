diff --git a/roboguice/src/main/java/roboguice/android/DroidGuice.java b/roboguice/src/main/java/roboguice/android/DroidGuice.java
index 45530b961..d8bc6d18a 100644
--- a/roboguice/src/main/java/roboguice/android/DroidGuice.java
+++ b/roboguice/src/main/java/roboguice/android/DroidGuice.java
@@ -33,19 +33,7 @@
 public final class DroidGuice extends RoboGuice<Integer, Application, Context, AndroidDefaultRoboModule, AndroidResourceListener> {
     
     protected static WeakHashMap<Application,ViewListener> viewListeners = new WeakHashMap<Application, ViewListener>();
-    
-    private static DroidGuice guice = null;
-    
-    public static DroidGuice instance()
-    {
-        if ( guice == null )
-        {
-            guice = new DroidGuice();
-        }
-        
-        return guice;
-    }
-    
+
     private DroidGuice() {
     }
 
@@ -117,19 +105,4 @@ protected ViewListener getViewListener( final Application application ) {
         }
         return viewListener;
     }
-    
-    public static class util {
-        private util() {}
-
-        /**
-         * This method is provided to reset RoboGuice in testcases.
-         * It should not be called in a real application.
-         */
-        public static void reset() {
-            guice.injectors.clear();
-            guice.resourceListeners.clear();
-            viewListeners.clear();
-        }
-    }
-
 }
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboAccountAuthenticatorActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboAccountAuthenticatorActivity.java
index cc2757767..f80da96c3 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboAccountAuthenticatorActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboAccountAuthenticatorActivity.java
@@ -17,24 +17,35 @@
 
 package roboguice.android.activity;
 
+import java.util.HashMap;
+import java.util.Map;
+
 import roboguice.android.DroidGuice;
-import roboguice.android.activity.event.*;
+import roboguice.android.activity.event.OnActivityResultEvent;
+import roboguice.android.activity.event.OnConfigurationChangedEvent;
+import roboguice.android.activity.event.OnContentChangedEvent;
+import roboguice.android.activity.event.OnCreateEvent;
+import roboguice.android.activity.event.OnDestroyEvent;
+import roboguice.android.activity.event.OnNewIntentEvent;
+import roboguice.android.activity.event.OnPauseEvent;
+import roboguice.android.activity.event.OnRestartEvent;
+import roboguice.android.activity.event.OnResumeEvent;
+import roboguice.android.activity.event.OnStartEvent;
+import roboguice.android.activity.event.OnStopEvent;
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
 import roboguice.android.util.RoboContext;
+import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
 
+import com.google.inject.Inject;
+import com.google.inject.Key;
+
 import android.accounts.AccountAuthenticatorActivity;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
 
-import com.google.inject.Inject;
-import com.google.inject.Key;
-
-import java.util.HashMap;
-import java.util.Map;
-
 /**
  * A subclass of {@link AccountAuthenticatorActivity} that provides dependency injection
  * with RoboGuice.
@@ -49,7 +60,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = DroidGuice.instance().getInjector(this);
+        final RoboInjector injector = RoboGuice.<DroidGuice>instance().getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -101,7 +112,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                DroidGuice.instance().destroyInjector(this);
+                RoboGuice.<DroidGuice>instance().destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -118,7 +129,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        DroidGuice.instance().getInjector(this).injectViewMembers(this);
+        RoboGuice.<DroidGuice>instance().getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboActivity.java
index cf4399983..0d8124cf8 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboActivity.java
@@ -15,24 +15,35 @@
  */
 package roboguice.android.activity;
 
+import java.util.HashMap;
+import java.util.Map;
+
 import roboguice.android.DroidGuice;
-import roboguice.android.activity.event.*;
+import roboguice.android.activity.event.OnActivityResultEvent;
+import roboguice.android.activity.event.OnConfigurationChangedEvent;
+import roboguice.android.activity.event.OnContentChangedEvent;
+import roboguice.android.activity.event.OnCreateEvent;
+import roboguice.android.activity.event.OnDestroyEvent;
+import roboguice.android.activity.event.OnNewIntentEvent;
+import roboguice.android.activity.event.OnPauseEvent;
+import roboguice.android.activity.event.OnRestartEvent;
+import roboguice.android.activity.event.OnResumeEvent;
+import roboguice.android.activity.event.OnStartEvent;
+import roboguice.android.activity.event.OnStopEvent;
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
 import roboguice.android.util.RoboContext;
+import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
 
-import android.app.Activity;
-import android.content.Intent;
-import android.content.res.Configuration;
-import android.os.Bundle;
-
 import com.google.inject.Inject;
 import com.google.inject.Injector;
 import com.google.inject.Key;
 
-import java.util.HashMap;
-import java.util.Map;
+import android.app.Activity;
+import android.content.Intent;
+import android.content.res.Configuration;
+import android.os.Bundle;
 
 /**
  * A {@link RoboActivity} extends from {@link Activity} to provide dynamic
@@ -73,7 +84,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = DroidGuice.instance().getInjector(this);
+        final RoboInjector injector = RoboGuice.<DroidGuice>instance().getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -125,7 +136,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                DroidGuice.instance().destroyInjector(this);
+                RoboGuice.<DroidGuice>instance().destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -142,7 +153,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        DroidGuice.instance().getInjector(this).injectViewMembers(this);
+        RoboGuice.<DroidGuice>instance().getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboActivityGroup.java b/roboguice/src/main/java/roboguice/android/activity/RoboActivityGroup.java
index 67de600e4..b9a6a4676 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboActivityGroup.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboActivityGroup.java
@@ -15,24 +15,35 @@
  */
 package roboguice.android.activity;
 
+import java.util.HashMap;
+import java.util.Map;
+
 import roboguice.android.DroidGuice;
-import roboguice.android.activity.event.*;
+import roboguice.android.activity.event.OnActivityResultEvent;
+import roboguice.android.activity.event.OnConfigurationChangedEvent;
+import roboguice.android.activity.event.OnContentChangedEvent;
+import roboguice.android.activity.event.OnCreateEvent;
+import roboguice.android.activity.event.OnDestroyEvent;
+import roboguice.android.activity.event.OnNewIntentEvent;
+import roboguice.android.activity.event.OnPauseEvent;
+import roboguice.android.activity.event.OnRestartEvent;
+import roboguice.android.activity.event.OnResumeEvent;
+import roboguice.android.activity.event.OnStartEvent;
+import roboguice.android.activity.event.OnStopEvent;
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
 import roboguice.android.util.RoboContext;
+import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
 
+import com.google.inject.Inject;
+import com.google.inject.Key;
+
 import android.app.ActivityGroup;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
 
-import com.google.inject.Inject;
-import com.google.inject.Key;
-
-import java.util.HashMap;
-import java.util.Map;
-
 /**
  * A {@link RoboActivityGroup} extends from {@link ActivityGroup} to provide
  * dynamic injection of collaborators, using Google Guice.<br />
@@ -50,7 +61,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = DroidGuice.instance().getInjector(this);
+        final RoboInjector injector = RoboGuice.<DroidGuice>instance().getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -102,7 +113,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                DroidGuice.instance().destroyInjector(this);
+                RoboGuice.<DroidGuice>instance().destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -119,7 +130,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        DroidGuice.instance().getInjector(this).injectViewMembers(this);
+        RoboGuice.<DroidGuice>instance().getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboExpandableListActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboExpandableListActivity.java
index 6f686dc81..8273199fb 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboExpandableListActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboExpandableListActivity.java
@@ -15,24 +15,35 @@
  */
 package roboguice.android.activity;
 
+import java.util.HashMap;
+import java.util.Map;
+
 import roboguice.android.DroidGuice;
-import roboguice.android.activity.event.*;
+import roboguice.android.activity.event.OnActivityResultEvent;
+import roboguice.android.activity.event.OnConfigurationChangedEvent;
+import roboguice.android.activity.event.OnContentChangedEvent;
+import roboguice.android.activity.event.OnCreateEvent;
+import roboguice.android.activity.event.OnDestroyEvent;
+import roboguice.android.activity.event.OnNewIntentEvent;
+import roboguice.android.activity.event.OnPauseEvent;
+import roboguice.android.activity.event.OnRestartEvent;
+import roboguice.android.activity.event.OnResumeEvent;
+import roboguice.android.activity.event.OnStartEvent;
+import roboguice.android.activity.event.OnStopEvent;
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
 import roboguice.android.util.RoboContext;
+import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
 
+import com.google.inject.Inject;
+import com.google.inject.Key;
+
 import android.app.ExpandableListActivity;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
 
-import com.google.inject.Inject;
-import com.google.inject.Key;
-
-import java.util.HashMap;
-import java.util.Map;
-
 /**
  * A {@link RoboExpandableListActivity} extends from
  * {@link ExpandableListActivity} to provide dynamic injection of collaborators,
@@ -51,7 +62,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = DroidGuice.instance().getInjector(this);
+        final RoboInjector injector = RoboGuice.<DroidGuice>instance().getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -103,7 +114,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                DroidGuice.instance().destroyInjector(this);
+                RoboGuice.<DroidGuice>instance().destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -120,7 +131,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        DroidGuice.instance().getInjector(this).injectViewMembers(this);
+        RoboGuice.<DroidGuice>instance().getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboFragmentActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboFragmentActivity.java
index f6c3e77e2..35b310e2c 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboFragmentActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboFragmentActivity.java
@@ -15,24 +15,35 @@
  */
 package roboguice.android.activity;
 
+import java.util.HashMap;
+import java.util.Map;
+
 import roboguice.android.DroidGuice;
-import roboguice.android.activity.event.*;
+import roboguice.android.activity.event.OnActivityResultEvent;
+import roboguice.android.activity.event.OnConfigurationChangedEvent;
+import roboguice.android.activity.event.OnContentChangedEvent;
+import roboguice.android.activity.event.OnCreateEvent;
+import roboguice.android.activity.event.OnDestroyEvent;
+import roboguice.android.activity.event.OnNewIntentEvent;
+import roboguice.android.activity.event.OnPauseEvent;
+import roboguice.android.activity.event.OnRestartEvent;
+import roboguice.android.activity.event.OnResumeEvent;
+import roboguice.android.activity.event.OnStartEvent;
+import roboguice.android.activity.event.OnStopEvent;
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
 import roboguice.android.util.RoboContext;
+import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
 
+import com.google.inject.Inject;
+import com.google.inject.Key;
+
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
 import android.support.v4.app.FragmentActivity;
 
-import com.google.inject.Inject;
-import com.google.inject.Key;
-
-import java.util.HashMap;
-import java.util.Map;
-
 public class RoboFragmentActivity extends FragmentActivity implements RoboContext {
     protected EventManager eventManager;
     protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
@@ -42,7 +53,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = DroidGuice.instance().getInjector(this);
+        final RoboInjector injector = RoboGuice.<DroidGuice>instance().getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -94,7 +105,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                DroidGuice.instance().destroyInjector(this);
+                RoboGuice.<DroidGuice>instance().destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -111,7 +122,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        DroidGuice.instance().getInjector(this).injectViewMembers(this);
+        RoboGuice.<DroidGuice>instance().getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboLauncherActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboLauncherActivity.java
index 9422e5de4..b46d69260 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboLauncherActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboLauncherActivity.java
@@ -15,24 +15,35 @@
  */
 package roboguice.android.activity;
 
+import java.util.HashMap;
+import java.util.Map;
+
 import roboguice.android.DroidGuice;
-import roboguice.android.activity.event.*;
+import roboguice.android.activity.event.OnActivityResultEvent;
+import roboguice.android.activity.event.OnConfigurationChangedEvent;
+import roboguice.android.activity.event.OnContentChangedEvent;
+import roboguice.android.activity.event.OnCreateEvent;
+import roboguice.android.activity.event.OnDestroyEvent;
+import roboguice.android.activity.event.OnNewIntentEvent;
+import roboguice.android.activity.event.OnPauseEvent;
+import roboguice.android.activity.event.OnRestartEvent;
+import roboguice.android.activity.event.OnResumeEvent;
+import roboguice.android.activity.event.OnStartEvent;
+import roboguice.android.activity.event.OnStopEvent;
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
 import roboguice.android.util.RoboContext;
+import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
 
+import com.google.inject.Inject;
+import com.google.inject.Key;
+
 import android.app.LauncherActivity;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
 
-import com.google.inject.Inject;
-import com.google.inject.Key;
-
-import java.util.HashMap;
-import java.util.Map;
-
 /**
  * A {@link RoboLauncherActivity} extends from {@link LauncherActivity} to provide
  * dynamic injection of collaborators, using Google Guice.<br />
@@ -50,7 +61,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = DroidGuice.instance().getInjector(this);
+        final RoboInjector injector = RoboGuice.<DroidGuice>instance().getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -102,7 +113,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                DroidGuice.instance().destroyInjector(this);
+                RoboGuice.<DroidGuice>instance().destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -119,7 +130,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        DroidGuice.instance().getInjector(this).injectViewMembers(this);
+        RoboGuice.<DroidGuice>instance().getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboListActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboListActivity.java
index 7fead849b..330ef9176 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboListActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboListActivity.java
@@ -15,24 +15,35 @@
  */
 package roboguice.android.activity;
 
+import java.util.HashMap;
+import java.util.Map;
+
 import roboguice.android.DroidGuice;
-import roboguice.android.activity.event.*;
+import roboguice.android.activity.event.OnActivityResultEvent;
+import roboguice.android.activity.event.OnConfigurationChangedEvent;
+import roboguice.android.activity.event.OnContentChangedEvent;
+import roboguice.android.activity.event.OnCreateEvent;
+import roboguice.android.activity.event.OnDestroyEvent;
+import roboguice.android.activity.event.OnNewIntentEvent;
+import roboguice.android.activity.event.OnPauseEvent;
+import roboguice.android.activity.event.OnRestartEvent;
+import roboguice.android.activity.event.OnResumeEvent;
+import roboguice.android.activity.event.OnStartEvent;
+import roboguice.android.activity.event.OnStopEvent;
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
 import roboguice.android.util.RoboContext;
+import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
 
+import com.google.inject.Inject;
+import com.google.inject.Key;
+
 import android.app.ListActivity;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
 
-import com.google.inject.Inject;
-import com.google.inject.Key;
-
-import java.util.HashMap;
-import java.util.Map;
-
 /**
  * A {@link RoboListActivity} extends from {@link ListActivity} to provide
  * dynamic injection of collaborators, using Google Guice.<br />
@@ -50,7 +61,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = DroidGuice.instance().getInjector(this);
+        final RoboInjector injector = RoboGuice.<DroidGuice>instance().getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -102,7 +113,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                DroidGuice.instance().destroyInjector(this);
+                RoboGuice.<DroidGuice>instance().destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -119,7 +130,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        DroidGuice.instance().getInjector(this).injectViewMembers(this);
+        RoboGuice.<DroidGuice>instance().getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboMapActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboMapActivity.java
index b81de89da..5b9fade9e 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboMapActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboMapActivity.java
@@ -20,6 +20,7 @@
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
 import roboguice.android.util.RoboContext;
+import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
 
 import android.content.Intent;
@@ -50,7 +51,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = DroidGuice.instance().getInjector(this);
+        final RoboInjector injector = RoboGuice.<DroidGuice>instance().getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -102,7 +103,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                DroidGuice.instance().destroyInjector(this);
+                RoboGuice.<DroidGuice>instance().destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -119,7 +120,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        DroidGuice.instance().getInjector(this).injectViewMembers(this);
+        RoboGuice.<DroidGuice>instance().getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboPreferenceActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboPreferenceActivity.java
index 5402c133d..ebdb88778 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboPreferenceActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboPreferenceActivity.java
@@ -22,6 +22,7 @@
 import roboguice.android.inject.PreferenceListener;
 import roboguice.android.inject.RoboInjector;
 import roboguice.android.util.RoboContext;
+import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
 
 import android.content.Intent;
@@ -60,7 +61,7 @@
     /** {@inheritDoc } */
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = DroidGuice.instance().getInjector(this);
+        final RoboInjector injector = RoboGuice.<DroidGuice>instance().getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         preferenceListener = injector.getInstance(PreferenceListener.class);
         injector.injectMembersWithoutViews(this);
@@ -72,7 +73,7 @@ protected void onCreate(Bundle savedInstanceState) {
     public void setPreferenceScreen(PreferenceScreen preferenceScreen) {
         super.setPreferenceScreen(preferenceScreen);
 
-        final ContextScope scope = DroidGuice.instance().getInjector(this).getInstance(ContextScope.class);
+        final ContextScope scope = RoboGuice.<DroidGuice>instance().getInjector(this).getInstance(ContextScope.class);
         synchronized (ContextScope.class) {
             scope.enter(this);
             try {
@@ -128,7 +129,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                DroidGuice.instance().destroyInjector(this);
+                RoboGuice.<DroidGuice>instance().destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -145,7 +146,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        DroidGuice.instance().getInjector(this).injectViewMembers(this);
+        RoboGuice.<DroidGuice>instance().getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboSplashActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboSplashActivity.java
index 2ddb65e33..2f63d31c6 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboSplashActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboSplashActivity.java
@@ -1,6 +1,7 @@
 package roboguice.android.activity;
 
 import roboguice.android.DroidGuice;
+import roboguice.base.RoboGuice;
 
 import android.app.Activity;
 import android.app.Application;
@@ -34,7 +35,7 @@ public void run() {
                 // Set the execution context for this thread in case the user
                 // want to use the injector
                 final Application app = getApplication();
-                DroidGuice.instance().getScopedInjector(getApplication());
+                RoboGuice.<DroidGuice>instance().getScopedInjector(getApplication());
 
 
                 doStuffInBackground(app);
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboTabActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboTabActivity.java
index 911528812..c0e84ce7e 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboTabActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboTabActivity.java
@@ -20,6 +20,7 @@
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
 import roboguice.android.util.RoboContext;
+import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
 
 import android.app.TabActivity;
@@ -50,7 +51,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = DroidGuice.instance().getInjector(this);
+        final RoboInjector injector = RoboGuice.<DroidGuice>instance().getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -102,7 +103,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                DroidGuice.instance().destroyInjector(this);
+                RoboGuice.<DroidGuice>instance().destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -119,7 +120,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        DroidGuice.instance().getInjector(this).injectViewMembers(this);
+        RoboGuice.<DroidGuice>instance().getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/fragment/RoboDialogFragment.java b/roboguice/src/main/java/roboguice/android/fragment/RoboDialogFragment.java
index 1f11636b0..af3bba241 100644
--- a/roboguice/src/main/java/roboguice/android/fragment/RoboDialogFragment.java
+++ b/roboguice/src/main/java/roboguice/android/fragment/RoboDialogFragment.java
@@ -1,6 +1,7 @@
 package roboguice.android.fragment;
 
 import roboguice.android.DroidGuice;
+import roboguice.base.RoboGuice;
 
 import android.os.Bundle;
 import android.support.v4.app.DialogFragment;
@@ -10,12 +11,12 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        DroidGuice.instance().getInjector(getActivity()).injectMembersWithoutViews(this);
+        RoboGuice.<DroidGuice>instance().getInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        DroidGuice.instance().getInjector(getActivity()).injectViewMembers(this);
+        RoboGuice.<DroidGuice>instance().getInjector(getActivity()).injectViewMembers(this);
     }
 }
diff --git a/roboguice/src/main/java/roboguice/android/fragment/RoboFragment.java b/roboguice/src/main/java/roboguice/android/fragment/RoboFragment.java
index ff8e9d6f7..65f7ede31 100644
--- a/roboguice/src/main/java/roboguice/android/fragment/RoboFragment.java
+++ b/roboguice/src/main/java/roboguice/android/fragment/RoboFragment.java
@@ -1,6 +1,7 @@
 package roboguice.android.fragment;
 
 import roboguice.android.DroidGuice;
+import roboguice.base.RoboGuice;
 
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
@@ -10,12 +11,12 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        DroidGuice.instance().getInjector(getActivity()).injectMembersWithoutViews(this);
+        RoboGuice.<DroidGuice>instance().getInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        DroidGuice.instance().getInjector(getActivity()).injectViewMembers(this);
+        RoboGuice.<DroidGuice>instance().getInjector(getActivity()).injectViewMembers(this);
     }
 }
diff --git a/roboguice/src/main/java/roboguice/android/fragment/RoboListFragment.java b/roboguice/src/main/java/roboguice/android/fragment/RoboListFragment.java
index 669eebb88..351e4646d 100644
--- a/roboguice/src/main/java/roboguice/android/fragment/RoboListFragment.java
+++ b/roboguice/src/main/java/roboguice/android/fragment/RoboListFragment.java
@@ -1,6 +1,7 @@
 package roboguice.android.fragment;
 
 import roboguice.android.DroidGuice;
+import roboguice.base.RoboGuice;
 
 import android.os.Bundle;
 import android.support.v4.app.ListFragment;
@@ -10,12 +11,12 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        DroidGuice.instance().getInjector(getActivity()).injectMembersWithoutViews(this);
+        RoboGuice.<DroidGuice>instance().getInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        DroidGuice.instance().getInjector(getActivity()).injectViewMembers(this);
+        RoboGuice.<DroidGuice>instance().getInjector(getActivity()).injectViewMembers(this);
     }
 }
diff --git a/roboguice/src/main/java/roboguice/base/RoboGuice.java b/roboguice/src/main/java/roboguice/base/RoboGuice.java
index 7710a0615..fd9b4f390 100644
--- a/roboguice/src/main/java/roboguice/base/RoboGuice.java
+++ b/roboguice/src/main/java/roboguice/base/RoboGuice.java
@@ -1,5 +1,7 @@
 package roboguice.base;
 
+import java.lang.reflect.Field;
+import java.security.InvalidParameterException;
 import java.util.List;
 import java.util.WeakHashMap;
 
@@ -37,6 +39,46 @@
     protected WeakHashMap<S,Injector> injectors = new WeakHashMap<S,Injector>();
     protected WeakHashMap<S,L> resourceListeners = new WeakHashMap<S,L>();
     
+    @SuppressWarnings("rawtypes")
+    private static RoboGuice instance;
+    public static RoboGuiceType type;
+    
+    @SuppressWarnings({ "rawtypes", "unchecked" })
+    public static <T extends RoboGuice> T instance()
+    {
+        if ( instance == null )
+        {
+            try
+            {
+                if ( type == RoboGuiceType.JAVA )
+                {
+                    instance = (RoboGuice) Class.forName("roboguice.java.JavaGuice").newInstance();
+                }
+                else if ( type == RoboGuiceType.ANDROID )
+                {
+                    instance = (RoboGuice) Class.forName("roboguice.android.AndroidGuice").newInstance(); 
+                }
+                else
+                {
+                    throw new InvalidParameterException( "RoboGuice.type was not set, make sure it is not null before requesting an instance of RoboGuice");
+                }
+            }
+            catch ( Exception e )
+            {
+               new RuntimeException(e);
+            }
+        }
+        
+        return (T) instance;
+    }
+    
+    public static enum RoboGuiceType
+    {
+        JAVA,
+        ANDROID
+        ;
+    }
+    
     public WeakHashMap<S, Injector> injectors()
     {
         return injectors;
@@ -142,4 +184,33 @@ public Injector getInjector( O context )
     public abstract R newDefaultRoboModule( S scopeObject );
     
     protected abstract L getResourceListener( S scopedObject );
+    
+    public static class util {
+        private util() {}
+
+        /**
+         * This method is provided to reset RoboGuice in testcases.
+         * It should not be called in a real application.
+         */
+        @SuppressWarnings("rawtypes")
+        public static void reset() {
+            RoboGuice.instance().injectors.clear();
+            RoboGuice.instance().resourceListeners.clear();
+            
+            try
+            {
+                //doing through reflection to not have any dependencies on child class on RoboGuice
+                Field f = RoboGuice.instance().getClass().getField("viewListeners");
+                if ( RoboGuice.instance().getClass().getField("viewListeners") != null )
+                {
+                    f.setAccessible(true);
+                    ( (WeakHashMap) f.get( RoboGuice.instance() ) ).clear();
+                }
+            }
+            catch ( Exception e )
+            {
+                //ignore
+            }
+        }
+    }
 }
diff --git a/roboguice/src/main/java/roboguice/java/JavaGuice.java b/roboguice/src/main/java/roboguice/java/JavaGuice.java
index ec9151722..94f8752e6 100644
--- a/roboguice/src/main/java/roboguice/java/JavaGuice.java
+++ b/roboguice/src/main/java/roboguice/java/JavaGuice.java
@@ -15,18 +15,7 @@
 
 public final class JavaGuice extends RoboGuice<String, String, String, JavaDefaultRoboModule, JavaResourceListener> {
 
-    private static JavaGuice guice = null;
-    
-    public static JavaGuice instance()
-    {
-        if ( guice == null )
-        {
-            guice = new JavaGuice();
-        }
-        
-        return guice;
-    }
-    
+
     private JavaGuice() {
     }
     
