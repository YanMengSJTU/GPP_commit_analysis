diff --git a/roboguice/src/main/java/roboguice/android/util/Ln.java b/roboguice/src/main/java/roboguice/android/util/Ln.java
index 77f117346..2630ea0e5 100644
--- a/roboguice/src/main/java/roboguice/android/util/Ln.java
+++ b/roboguice/src/main/java/roboguice/android/util/Ln.java
@@ -4,10 +4,10 @@
 import java.io.StringWriter;
 import java.net.UnknownHostException;
 
-import roboguice.android.util.logging.AndroidBaseConfig;
-import roboguice.android.util.logging.Print;
+import roboguice.base.util.logging.BaseConfig;
 import roboguice.base.util.logging.Config;
 import roboguice.base.util.logging.LogLevel;
+import roboguice.base.util.logging.Print;
 
 import com.google.inject.Inject;
 
@@ -62,7 +62,7 @@
      * config is initially set to BaseConfig() with sensible defaults, then replaced
      * by BaseConfig(ContextSingleton) during guice static injection pass.
      */
-    @Inject protected static AndroidBaseConfig config = new AndroidBaseConfig();
+    @Inject protected static BaseConfig config = new BaseConfig();
 
     /**
      * print is initially set to Print(), then replaced by guice during
diff --git a/roboguice/src/main/java/roboguice/android/util/logging/AndroidPrint.java b/roboguice/src/main/java/roboguice/android/util/logging/AndroidPrint.java
index 590ca8b0d..70ef60bce 100644
--- a/roboguice/src/main/java/roboguice/android/util/logging/AndroidPrint.java
+++ b/roboguice/src/main/java/roboguice/android/util/logging/AndroidPrint.java
@@ -1,36 +1,14 @@
 package roboguice.android.util.logging;
 
-import com.google.inject.Inject;
-
-import roboguice.base.util.logging.LogLevel;
+import roboguice.base.util.logging.Print;
 
 import android.util.Log;
 
 /** Default implementation logs to android.util.Log */
-public class Print {
-    
-    /**
-     * config is initially set to BaseConfig() with sensible defaults, then replaced
-     * by BaseConfig(ContextSingleton) during guice static injection pass.
-     */
-    @Inject protected static AndroidBaseConfig config = new AndroidBaseConfig();
+public class AndroidPrint extends Print {
     
+    @Override
     public int println(int priority, String msg ) {
         return Log.println(priority,getScope(5), processMessage(msg));
     }
-
-    protected String processMessage(String msg) {
-        if( config.getLoggingLevel() <= LogLevel.DEBUG.logLevel() )
-            msg = String.format("%s %s", Thread.currentThread().getName(), msg);
-        return msg;
-    }
-
-    protected static String getScope(int skipDepth) {
-        if( config.getLoggingLevel() <= LogLevel.DEBUG.logLevel() ) {
-            final StackTraceElement trace = Thread.currentThread().getStackTrace()[skipDepth];
-            return config.scope() + "/" + trace.getFileName() + ":" + trace.getLineNumber();
-        }
-
-        return config.scope();
-    }
 }
diff --git a/roboguice/src/main/java/roboguice/base/util/logging/Print.java b/roboguice/src/main/java/roboguice/base/util/logging/Print.java
new file mode 100644
index 000000000..42b60a8b8
--- /dev/null
+++ b/roboguice/src/main/java/roboguice/base/util/logging/Print.java
@@ -0,0 +1,31 @@
+package roboguice.base.util.logging;
+
+import com.google.inject.Inject;
+
+public class Print {
+    /**
+     * config is initially set to BaseConfig() with sensible defaults, then replaced
+     * by BaseConfig(ContextSingleton) during guice static injection pass.
+     */
+    @Inject protected static BaseConfig config = new BaseConfig();
+     
+    public int println(int priority, String msg )
+    {
+        return 0;
+    }
+
+    protected String processMessage(String msg) {
+        if( config.getLoggingLevel() <= LogLevel.DEBUG.logLevel() )
+            msg = String.format("%s %s", Thread.currentThread().getName(), msg);
+        return msg;
+    }
+
+    protected static String getScope(int skipDepth) {
+        if( config.getLoggingLevel() <= LogLevel.DEBUG.logLevel() ) {
+            final StackTraceElement trace = Thread.currentThread().getStackTrace()[skipDepth];
+            return config.scope() + "/" + trace.getFileName() + ":" + trace.getLineNumber();
+        }
+
+        return config.scope();
+    }
+}
