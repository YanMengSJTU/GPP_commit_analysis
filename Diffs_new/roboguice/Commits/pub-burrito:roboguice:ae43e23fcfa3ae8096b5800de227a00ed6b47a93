diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboAccountAuthenticatorActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboAccountAuthenticatorActivity.java
index 2ee2ae959..5ba8ad0fe 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboAccountAuthenticatorActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboAccountAuthenticatorActivity.java
@@ -42,6 +42,7 @@
 import com.google.inject.Key;
 
 import android.accounts.AccountAuthenticatorActivity;
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
@@ -52,7 +53,7 @@
  *
  * @author Marcus Better
  */
-public class RoboAccountAuthenticatorActivity extends AccountAuthenticatorActivity implements RoboContext {
+public class RoboAccountAuthenticatorActivity extends AccountAuthenticatorActivity implements RoboContext<Context> {
     protected EventManager eventManager;
     protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
 
@@ -144,9 +145,4 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
         return scopedObjects;
     }
 
-    @Override
-    public String configurationLocation() {
-        // TODO Auto-generated method stub
-        return null;
-    }
 }
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboActivity.java
index f22344370..be265b9e0 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboActivity.java
@@ -41,6 +41,7 @@
 import com.google.inject.Key;
 
 import android.app.Activity;
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
@@ -76,7 +77,7 @@
  * 
  * @author Mike Burton
  */
-public class RoboActivity extends Activity implements RoboContext {
+public class RoboActivity extends Activity implements RoboContext<Context> {
     protected EventManager eventManager;
     protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
 
@@ -168,9 +169,4 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
         return scopedObjects;
     }
 
-    @Override
-    public String configurationLocation() {
-        // TODO Auto-generated method stub
-        return null;
-    }
 }
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboActivityGroup.java b/roboguice/src/main/java/roboguice/android/activity/RoboActivityGroup.java
index 0b21a3041..964d9a0d0 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboActivityGroup.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboActivityGroup.java
@@ -40,6 +40,7 @@
 import com.google.inject.Key;
 
 import android.app.ActivityGroup;
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
@@ -52,7 +53,7 @@
  * 
  * @author Toly Pochkin
  */
-public class RoboActivityGroup extends ActivityGroup implements RoboContext {
+public class RoboActivityGroup extends ActivityGroup implements RoboContext<Context> {
     protected EventManager eventManager;
     protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
 
@@ -145,10 +146,4 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
         return scopedObjects;
     }
 
-    @Override
-    public String configurationLocation() {
-        // TODO Auto-generated method stub
-        return null;
-    }
-
 }
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboExpandableListActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboExpandableListActivity.java
index e31a75e00..1a17ee3cb 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboExpandableListActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboExpandableListActivity.java
@@ -40,6 +40,7 @@
 import com.google.inject.Key;
 
 import android.app.ExpandableListActivity;
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
@@ -53,7 +54,7 @@
  * 
  * @author Mike Burton
  */
-public class RoboExpandableListActivity extends ExpandableListActivity implements RoboContext {
+public class RoboExpandableListActivity extends ExpandableListActivity implements RoboContext<Context> {
     protected EventManager eventManager;
     protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
 
@@ -146,10 +147,4 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
         return scopedObjects;
     }
 
-    @Override
-    public String configurationLocation() {
-        // TODO Auto-generated method stub
-        return null;
-    }
-
 }
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboFragmentActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboFragmentActivity.java
index 6c13e92f8..9d31b6487 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboFragmentActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboFragmentActivity.java
@@ -39,12 +39,13 @@
 import com.google.inject.Inject;
 import com.google.inject.Key;
 
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
 import android.support.v4.app.FragmentActivity;
 
-public class RoboFragmentActivity extends FragmentActivity implements RoboContext {
+public class RoboFragmentActivity extends FragmentActivity implements RoboContext<Context> {
     protected EventManager eventManager;
     protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
 
@@ -137,10 +138,4 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
         return scopedObjects;
     }
 
-    @Override
-    public String configurationLocation() {
-        // TODO Auto-generated method stub
-        return null;
-    }
-
 }
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboLauncherActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboLauncherActivity.java
index 4394f7899..4adf899f4 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboLauncherActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboLauncherActivity.java
@@ -40,6 +40,7 @@
 import com.google.inject.Key;
 
 import android.app.LauncherActivity;
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
@@ -52,7 +53,7 @@
  * 
  * @author Toly Pochkin
  */
-public class RoboLauncherActivity extends LauncherActivity implements RoboContext {
+public class RoboLauncherActivity extends LauncherActivity implements RoboContext<Context> {
     protected EventManager eventManager;
     protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
 
@@ -145,10 +146,4 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
         return scopedObjects;
     }
 
-    @Override
-    public String configurationLocation() {
-        // TODO Auto-generated method stub
-        return null;
-    }
-
 }
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboListActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboListActivity.java
index 15952795a..69e6dd885 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboListActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboListActivity.java
@@ -40,6 +40,7 @@
 import com.google.inject.Key;
 
 import android.app.ListActivity;
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
@@ -52,7 +53,7 @@
  * 
  * @author Mike Burton
  */
-public class RoboListActivity extends ListActivity implements RoboContext {
+public class RoboListActivity extends ListActivity implements RoboContext<Context> {
     protected EventManager eventManager;
     protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
 
@@ -145,10 +146,4 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
         return scopedObjects;
     }
 
-    @Override
-    public String configurationLocation() {
-        // TODO Auto-generated method stub
-        return null;
-    }
-
 }
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboMapActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboMapActivity.java
index afbf23573..6bef8945a 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboMapActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboMapActivity.java
@@ -40,6 +40,7 @@
 import com.google.inject.Inject;
 import com.google.inject.Key;
 
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
@@ -52,7 +53,7 @@
  * 
  * @author Mike Burton
  */
-public abstract class RoboMapActivity extends MapActivity implements RoboContext {
+public abstract class RoboMapActivity extends MapActivity implements RoboContext<Context> {
     protected EventManager eventManager;
     protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboPreferenceActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboPreferenceActivity.java
index 820ce8b0f..9538c001b 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboPreferenceActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboPreferenceActivity.java
@@ -30,8 +30,8 @@
 import roboguice.android.activity.event.OnResumeEvent;
 import roboguice.android.activity.event.OnStartEvent;
 import roboguice.android.activity.event.OnStopEvent;
-import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.AndroidContextScope;
+import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.PreferenceListener;
 import roboguice.android.inject.RoboInjector;
 import roboguice.base.RoboGuice;
@@ -41,6 +41,7 @@
 import com.google.inject.Inject;
 import com.google.inject.Key;
 
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
@@ -60,7 +61,7 @@
  * @author Rodrigo Damazio
  * @author Mike Burton
  */
-public abstract class RoboPreferenceActivity extends PreferenceActivity implements RoboContext {
+public abstract class RoboPreferenceActivity extends PreferenceActivity implements RoboContext<Context> {
     protected EventManager eventManager;
     protected PreferenceListener preferenceListener;
     protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboSplashActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboSplashActivity.java
index 2f63d31c6..0d5525508 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboSplashActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboSplashActivity.java
@@ -63,7 +63,6 @@ public void run() {
      * 
      * @param app
      */
-    @SuppressWarnings({"UnusedParameters"})
     protected void doStuffInBackground(Application app) {
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboTabActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboTabActivity.java
index 23f29f8d5..aebed50d2 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboTabActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboTabActivity.java
@@ -40,6 +40,7 @@
 import com.google.inject.Key;
 
 import android.app.TabActivity;
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
@@ -52,7 +53,7 @@
  * 
  * @author Toly Pochkin
  */
-public class RoboTabActivity extends TabActivity implements RoboContext {
+public class RoboTabActivity extends TabActivity implements RoboContext<Context> {
     protected EventManager eventManager;
     protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
 
@@ -145,10 +146,4 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
         return scopedObjects;
     }
 
-    @Override
-    public String configurationLocation() {
-        // TODO Auto-generated method stub
-        return null;
-    }
-
 }
diff --git a/roboguice/src/main/java/roboguice/android/content/RoboAsyncTaskLoader.java b/roboguice/src/main/java/roboguice/android/content/RoboAsyncTaskLoader.java
index 4c914c0eb..cc861267e 100644
--- a/roboguice/src/main/java/roboguice/android/content/RoboAsyncTaskLoader.java
+++ b/roboguice/src/main/java/roboguice/android/content/RoboAsyncTaskLoader.java
@@ -1,6 +1,7 @@
 package roboguice.android.content;
 
 import roboguice.android.DroidGuice;
+import roboguice.base.RoboGuice;
 
 import android.content.Context;
 import android.support.v4.content.AsyncTaskLoader;
@@ -13,7 +14,7 @@
 
     public RoboAsyncTaskLoader(Context context) {
         super(context);
-        DroidGuice.instance().injectMembers(context, this);
+        RoboGuice.<DroidGuice>instance().injectMembers(context, this);
     }
     
 }
diff --git a/roboguice/src/main/java/roboguice/android/content/RoboContentProvider.java b/roboguice/src/main/java/roboguice/android/content/RoboContentProvider.java
index e1e7a4264..e6f859dea 100644
--- a/roboguice/src/main/java/roboguice/android/content/RoboContentProvider.java
+++ b/roboguice/src/main/java/roboguice/android/content/RoboContentProvider.java
@@ -1,6 +1,7 @@
 package roboguice.android.content;
 
 import roboguice.android.DroidGuice;
+import roboguice.base.RoboGuice;
 
 import android.content.ContentProvider;
 
@@ -14,7 +15,7 @@
 
     @Override
     public boolean onCreate() {
-        DroidGuice.instance().getInjector(getContext()).injectMembers(this);
+        RoboGuice.<DroidGuice>instance().getInjector(getContext()).injectMembers(this);
         return true;
     }
 }
diff --git a/roboguice/src/main/java/roboguice/android/content/RoboLoader.java b/roboguice/src/main/java/roboguice/android/content/RoboLoader.java
index fead45d2e..04ab791e8 100644
--- a/roboguice/src/main/java/roboguice/android/content/RoboLoader.java
+++ b/roboguice/src/main/java/roboguice/android/content/RoboLoader.java
@@ -1,6 +1,7 @@
 package roboguice.android.content;
 
 import roboguice.android.DroidGuice;
+import roboguice.base.RoboGuice;
 
 import android.content.Context;
 import android.support.v4.content.Loader;
@@ -13,7 +14,7 @@
 
     public RoboLoader(Context context) {
         super(context);
-        DroidGuice.instance().injectMembers(context, this);
+        RoboGuice.<DroidGuice>instance().injectMembers(context, this);
     }
 
 }
diff --git a/roboguice/src/main/java/roboguice/android/event/javaassist/RuntimeSupport.java b/roboguice/src/main/java/roboguice/android/event/javaassist/RuntimeSupport.java
index 48f3221c6..55e445244 100644
--- a/roboguice/src/main/java/roboguice/android/event/javaassist/RuntimeSupport.java
+++ b/roboguice/src/main/java/roboguice/android/event/javaassist/RuntimeSupport.java
@@ -21,6 +21,7 @@
  * Runtime support routines that the classes generated by ProxyFactory use.
  *
  */
+@SuppressWarnings("rawtypes")
 public class RuntimeSupport {
 
     //Respectfully Borrowed from the JavaAssist library, trimmed for only needed pieces.
diff --git a/roboguice/src/main/java/roboguice/android/inject/AndroidContextScope.java b/roboguice/src/main/java/roboguice/android/inject/AndroidContextScope.java
index 3671fd31c..db599052e 100644
--- a/roboguice/src/main/java/roboguice/android/inject/AndroidContextScope.java
+++ b/roboguice/src/main/java/roboguice/android/inject/AndroidContextScope.java
@@ -53,6 +53,7 @@ public AndroidContextScope(Application application) {
         super(application, application);
     }
 
+    @SuppressWarnings("unchecked")
     @Override
     protected Map<Key<?>,Object> getScopedObjectMap(final Context origContext) {
         Context context = origContext;
@@ -67,6 +68,6 @@ public AndroidContextScope(Application application) {
         if( !(context instanceof RoboContext) )
             throw new IllegalArgumentException(String.format("%s does not appear to be a RoboGuice context (instanceof RoboContext)",origContext));
 
-        return ((RoboContext)context).getScopedObjectMap();
+        return ((RoboContext<Context>)context).getScopedObjectMap();
     }
 }
diff --git a/roboguice/src/main/java/roboguice/android/inject/AndroidContextScopedRoboInjector.java b/roboguice/src/main/java/roboguice/android/inject/AndroidContextScopedRoboInjector.java
index fb25b07ac..e885622b6 100644
--- a/roboguice/src/main/java/roboguice/android/inject/AndroidContextScopedRoboInjector.java
+++ b/roboguice/src/main/java/roboguice/android/inject/AndroidContextScopedRoboInjector.java
@@ -21,14 +21,6 @@
 import android.content.Context;
 import android.support.v4.app.Fragment;
 
-import com.google.inject.*;
-import com.google.inject.spi.TypeConverterBinding;
-
-import java.lang.annotation.Annotation;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
 public class AndroidContextScopedRoboInjector implements RoboInjector {
     protected Injector delegate;
     protected Context context;
diff --git a/roboguice/src/main/java/roboguice/android/inject/ContentViewListener.java b/roboguice/src/main/java/roboguice/android/inject/ContentViewListener.java
index fc400867b..fc6af9cc2 100644
--- a/roboguice/src/main/java/roboguice/android/inject/ContentViewListener.java
+++ b/roboguice/src/main/java/roboguice/android/inject/ContentViewListener.java
@@ -9,7 +9,6 @@
 import android.app.Activity;
 import android.content.Context;
 
-@SuppressWarnings("UnusedParameters")
 @ContextSingleton
 public class ContentViewListener {
     @Inject protected Activity activity;
diff --git a/roboguice/src/main/java/roboguice/android/inject/ExtrasListener.java b/roboguice/src/main/java/roboguice/android/inject/ExtrasListener.java
index 4ead36f14..d8921332a 100644
--- a/roboguice/src/main/java/roboguice/android/inject/ExtrasListener.java
+++ b/roboguice/src/main/java/roboguice/android/inject/ExtrasListener.java
@@ -21,6 +21,7 @@
 import java.util.Map;
 
 import roboguice.android.DroidGuice;
+import roboguice.base.RoboGuice;
 import roboguice.base.inject.Nullable;
 
 import com.google.inject.Binding;
@@ -102,7 +103,7 @@ public void injectMembers(T instance) {
 
             value = extras.get(id);
 
-            value = convert(field, value, DroidGuice.instance().getScopedInjector(activity.getApplication()));
+            value = convert(field, value, RoboGuice.<DroidGuice>instance().getScopedInjector(activity.getApplication()));
 
             /*
              * Please notice : null checking is done AFTER conversion. Having
@@ -131,7 +132,7 @@ public void injectMembers(T instance) {
             }
         }
 
-        @SuppressWarnings("unchecked")
+        @SuppressWarnings({ "unchecked", "rawtypes" })
         protected Object convert(Field field, Object value, Injector injector) {
 
             // Don't try to convert null or primitives
diff --git a/roboguice/src/main/java/roboguice/android/inject/ViewListener.java b/roboguice/src/main/java/roboguice/android/inject/ViewListener.java
index cb2a10818..58c3a6cad 100644
--- a/roboguice/src/main/java/roboguice/android/inject/ViewListener.java
+++ b/roboguice/src/main/java/roboguice/android/inject/ViewListener.java
@@ -41,8 +41,8 @@
 @Singleton
 public class ViewListener implements TypeListener {
     
-    protected static Class fragmentClass = null;
-    protected static Class fragmentManagerClass = null;
+    protected static Class<?> fragmentClass = null;
+    protected static Class<?> fragmentManagerClass = null;
     protected static Method fragmentGetViewMethod = null;
     protected static Method fragmentFindFragmentByIdMethod = null;
     protected static Method fragmentFindFragmentByTagMethod = null;
@@ -88,6 +88,7 @@ else if( Context.class.isAssignableFrom(field.getDeclaringClass()) && !Activity.
     /**
      * This class gets twice as many providers as necessary to do its job, look into optimizations in the future if this is a bottleneck
      */
+    @SuppressWarnings("rawtypes")
     public static class ViewMembersInjector<T> implements MembersInjector<T> {
         protected static WeakHashMap<Object,ArrayList<ViewMembersInjector<?>>> viewMembersInjectors = new WeakHashMap<Object, ArrayList<ViewMembersInjector<?>>>();
 
@@ -156,6 +157,7 @@ public void reallyInjectMembers( Object activityOrFragment ) {
          *
          * @param activityOrFragment an activity or fragment
          */
+        @SuppressWarnings("unchecked")
         protected void reallyInjectMemberViews(Object activityOrFragment) {
 
             final T instance = fragmentClass!=null && fragmentClass.isInstance(activityOrFragment) ? (T)activityOrFragment : instanceRef.get();
diff --git a/roboguice/src/main/java/roboguice/android/receiver/RoboBroadcastReceiver.java b/roboguice/src/main/java/roboguice/android/receiver/RoboBroadcastReceiver.java
index 95038647a..458253895 100644
--- a/roboguice/src/main/java/roboguice/android/receiver/RoboBroadcastReceiver.java
+++ b/roboguice/src/main/java/roboguice/android/receiver/RoboBroadcastReceiver.java
@@ -1,6 +1,7 @@
 package roboguice.android.receiver;
 
 import roboguice.android.DroidGuice;
+import roboguice.base.RoboGuice;
 
 import com.google.inject.Injector;
 
@@ -21,7 +22,7 @@
      */
     @Override
     public final void onReceive(Context context, Intent intent) {
-        final Injector injector = DroidGuice.instance().getScopedInjector((Application) context.getApplicationContext());
+        final Injector injector = RoboGuice.<DroidGuice>instance().getScopedInjector((Application) context.getApplicationContext());
 
         injector.injectMembers(this);
         handleReceive(context, intent);
@@ -34,7 +35,6 @@ public final void onReceive(Context context, Intent intent) {
      * @param context
      * @param intent
      */
-    @SuppressWarnings("UnusedParameters")
     protected void handleReceive(Context context, Intent intent) {
         // proper template method to handle the receive
     }
diff --git a/roboguice/src/main/java/roboguice/android/service/RoboIntentService.java b/roboguice/src/main/java/roboguice/android/service/RoboIntentService.java
index 55455ea35..53e712f23 100644
--- a/roboguice/src/main/java/roboguice/android/service/RoboIntentService.java
+++ b/roboguice/src/main/java/roboguice/android/service/RoboIntentService.java
@@ -8,6 +8,7 @@
 import roboguice.android.service.event.OnCreateEvent;
 import roboguice.android.service.event.OnDestroyEvent;
 import roboguice.android.service.event.OnStartEvent;
+import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
 import roboguice.base.util.RoboContext;
 
@@ -15,6 +16,7 @@
 import com.google.inject.Key;
 
 import android.app.IntentService;
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 
@@ -40,7 +42,7 @@
  *
  * @author Donn Felker
  */
-public abstract class RoboIntentService extends IntentService implements RoboContext {
+public abstract class RoboIntentService extends IntentService implements RoboContext<Context> {
 
     protected EventManager eventManager;
     protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
@@ -54,7 +56,7 @@ public RoboIntentService(String name) {
 
     @Override
     public void onCreate() {
-        final Injector injector = DroidGuice.instance().getInjector(this);
+        final Injector injector = RoboGuice.<DroidGuice>instance().getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembers(this);
         super.onCreate();
@@ -75,7 +77,7 @@ public void onDestroy() {
                 eventManager.fire(new OnDestroyEvent() );
         } finally {
             try {
-                DroidGuice.instance().destroyInjector(this);
+                RoboGuice.<DroidGuice>instance().destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
diff --git a/roboguice/src/main/java/roboguice/android/service/RoboService.java b/roboguice/src/main/java/roboguice/android/service/RoboService.java
index fbc567d54..401739e58 100644
--- a/roboguice/src/main/java/roboguice/android/service/RoboService.java
+++ b/roboguice/src/main/java/roboguice/android/service/RoboService.java
@@ -18,6 +18,7 @@
 import roboguice.android.service.event.OnCreateEvent;
 import roboguice.android.service.event.OnDestroyEvent;
 import roboguice.android.service.event.OnStartEvent;
+import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
 import roboguice.base.util.RoboContext;
 
@@ -25,6 +26,7 @@
 import com.google.inject.Key;
 
 import android.app.Service;
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 
@@ -51,14 +53,14 @@
  * @author Mike Burton
  * @author Christine Karman
  */
-public abstract class RoboService extends Service implements RoboContext {
+public abstract class RoboService extends Service implements RoboContext<Context> {
 
     protected EventManager eventManager;
     protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
 
     @Override
     public void onCreate() {
-        final Injector injector = DroidGuice.instance().getInjector(this);
+        final Injector injector = RoboGuice.<DroidGuice>instance().getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembers(this);
         super.onCreate();
@@ -78,7 +80,7 @@ public void onDestroy() {
                 eventManager.fire(new OnDestroyEvent() );
         } finally {
             try {
-                DroidGuice.instance().destroyInjector(this);
+                RoboGuice.<DroidGuice>instance().destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
diff --git a/roboguice/src/main/java/roboguice/android/util/RoboAsyncTask.java b/roboguice/src/main/java/roboguice/android/util/RoboAsyncTask.java
index 80499b588..c0852c18f 100644
--- a/roboguice/src/main/java/roboguice/android/util/RoboAsyncTask.java
+++ b/roboguice/src/main/java/roboguice/android/util/RoboAsyncTask.java
@@ -3,6 +3,7 @@
 import java.util.concurrent.Executor;
 
 import roboguice.android.DroidGuice;
+import roboguice.base.RoboGuice;
 
 import android.content.Context;
 import android.os.Handler;
@@ -12,25 +13,25 @@
 
     protected RoboAsyncTask(Context context) {
         this.context = context;
-        DroidGuice.instance().getInjector(context).injectMembers(this);
+        RoboGuice.<DroidGuice>instance().getInjector(context).injectMembers(this);
     }
 
     protected RoboAsyncTask(Context context, Handler handler) {
         super(handler);
         this.context = context;
-        DroidGuice.instance().getInjector(context).injectMembers(this);
+        RoboGuice.<DroidGuice>instance().getInjector(context).injectMembers(this);
     }
 
     protected RoboAsyncTask(Context context, Handler handler, Executor executor) {
         super(handler, executor);
         this.context = context;
-        DroidGuice.instance().getInjector(context).injectMembers(this);
+        RoboGuice.<DroidGuice>instance().getInjector(context).injectMembers(this);
     }
 
     protected RoboAsyncTask(Context context, Executor executor) {
         super(executor);
         this.context = context;
-        DroidGuice.instance().getInjector(context).injectMembers(this);
+        RoboGuice.<DroidGuice>instance().getInjector(context).injectMembers(this);
     }
 
     public Context getContext() {
diff --git a/roboguice/src/main/java/roboguice/android/util/SafeAsyncTask.java b/roboguice/src/main/java/roboguice/android/util/SafeAsyncTask.java
index 3207d6d44..cdadba4b9 100644
--- a/roboguice/src/main/java/roboguice/android/util/SafeAsyncTask.java
+++ b/roboguice/src/main/java/roboguice/android/util/SafeAsyncTask.java
@@ -118,7 +118,6 @@ protected void onPreExecute() throws Exception {}
      * @param t the result of {@link #call()}
      * @throws Exception, captured on passed to onException() if present.
      */
-    @SuppressWarnings({"UnusedDeclaration"})
     protected void onSuccess( ResultT t ) throws Exception {}
 
     /**
@@ -267,7 +266,7 @@ public Object call() throws Exception {
          * @param c the callable to post
          * @throws Exception on error
          */
-        protected void postToUiThreadAndWait( final Callable c ) throws Exception {
+        protected void postToUiThreadAndWait( final Callable<?> c ) throws Exception {
             final CountDownLatch latch = new CountDownLatch(1);
             final Exception[] exceptions = new Exception[1];
 
diff --git a/roboguice/src/main/java/roboguice/base/event/EventManager.java b/roboguice/src/main/java/roboguice/base/event/EventManager.java
index 404c39e5e..472993807 100644
--- a/roboguice/src/main/java/roboguice/base/event/EventManager.java
+++ b/roboguice/src/main/java/roboguice/base/event/EventManager.java
@@ -37,7 +37,7 @@
      * @param listener to be triggered
      * @param <T> event type
      */
-    public <T> void registerObserver( Class<T> event, EventListener listener ) {
+    public <T> void registerObserver( Class<T> event, EventListener<?> listener ) {
         Set<EventListener<?>> observers = registrations.get(event);
         if (observers == null) {
             observers = Collections.synchronizedSet(new LinkedHashSet<EventListener<?>>());
@@ -75,7 +75,7 @@
         //noinspection SynchronizationOnLocalVariableOrMethodParameter
         synchronized (observers) {
             for (Iterator<EventListener<?>> iterator = observers.iterator(); iterator.hasNext();) {
-                final EventListener registeredListener = iterator.next();
+                final EventListener<?> registeredListener = iterator.next();
                 if (registeredListener == listener) {
                     iterator.remove();
                     break;
@@ -99,9 +99,9 @@
         //noinspection SynchronizationOnLocalVariableOrMethodParameter
         synchronized (observers) {
             for (Iterator<EventListener<?>> iterator = observers.iterator(); iterator.hasNext();) {
-                final EventListener listener = iterator.next();
+                final EventListener<?> listener = iterator.next();
                 if( listener instanceof ObserverMethodListener ) {
-                    final ObserverMethodListener observer = ((ObserverMethodListener)listener);
+                    final ObserverMethodListener<?> observer = ((ObserverMethodListener<?>)listener);
                     if (observer.getInstance() == instance) {
                         iterator.remove();
                         break;
@@ -117,6 +117,7 @@
      *
      * @param event observed
      */
+    @SuppressWarnings({ "rawtypes", "unchecked" })
     public void fire(Object event) {
 
         final Set<EventListener<?>> observers = registrations.get(event.getClass());
diff --git a/roboguice/src/main/java/roboguice/base/event/ObserverMethodListener.java b/roboguice/src/main/java/roboguice/base/event/ObserverMethodListener.java
index a5f18ddbd..86acf9662 100644
--- a/roboguice/src/main/java/roboguice/base/event/ObserverMethodListener.java
+++ b/roboguice/src/main/java/roboguice/base/event/ObserverMethodListener.java
@@ -40,6 +40,7 @@ public Object getInstance() {
         return instance;
     }
 
+    @SuppressWarnings("rawtypes")
     @Override
     public boolean equals(Object o) {
         if (this == o) return true;
diff --git a/roboguice/src/main/java/roboguice/base/event/eventListener/javaassist/RuntimeSupport.java b/roboguice/src/main/java/roboguice/base/event/eventListener/javaassist/RuntimeSupport.java
index 752635327..e9460f64f 100644
--- a/roboguice/src/main/java/roboguice/base/event/eventListener/javaassist/RuntimeSupport.java
+++ b/roboguice/src/main/java/roboguice/base/event/eventListener/javaassist/RuntimeSupport.java
@@ -21,6 +21,7 @@
  * Runtime support routines that the classes generated by ProxyFactory use.
  *
  */
+@SuppressWarnings("rawtypes")
 public class RuntimeSupport {
 
     //Respectfully Borrowed from the JavaAssist library, trimmed for only needed pieces.
diff --git a/roboguice/src/main/java/roboguice/base/inject/ContextScopedProvider.java b/roboguice/src/main/java/roboguice/base/inject/ContextScopedProvider.java
index 4494885c9..3e56c8658 100644
--- a/roboguice/src/main/java/roboguice/base/inject/ContextScopedProvider.java
+++ b/roboguice/src/main/java/roboguice/base/inject/ContextScopedProvider.java
@@ -3,9 +3,9 @@
 import com.google.inject.Inject;
 import com.google.inject.Provider;
 
-import android.content.Context;
-
+@SuppressWarnings({"rawtypes", "unchecked"})
 public class ContextScopedProvider<A,C,T> {
+    
     @Inject protected RoboScope scope;
     @Inject protected Provider<T> provider;
 
diff --git a/roboguice/src/main/java/roboguice/base/util/RoboContext.java b/roboguice/src/main/java/roboguice/base/util/RoboContext.java
index 7aec1ead2..633e97283 100644
--- a/roboguice/src/main/java/roboguice/base/util/RoboContext.java
+++ b/roboguice/src/main/java/roboguice/base/util/RoboContext.java
@@ -4,8 +4,11 @@
 
 import com.google.inject.Key;
 
-public interface RoboContext {
+/**
+ * Represents a context by which injection can be scoped, so instances can be controlled by the current context (in case they are context singletons instead of normal singletons).
+ */
+public interface RoboContext<A> {
     Map<Key<?>,Object> getScopedObjectMap();
     
-    public String configurationLocation();
+    public A getApplicationContext();
 }
diff --git a/roboguice/src/main/java/roboguice/java/JavaGuice.java b/roboguice/src/main/java/roboguice/java/JavaGuice.java
index a35e02b4b..5b3e6787f 100644
--- a/roboguice/src/main/java/roboguice/java/JavaGuice.java
+++ b/roboguice/src/main/java/roboguice/java/JavaGuice.java
@@ -19,7 +19,7 @@
 import com.google.inject.Injector;
 import com.google.inject.Module;
 
-public final class JavaGuice extends RoboGuice<String, RoboApplication, RoboContext, JavaDefaultRoboModule, JavaResourceListener> {
+public final class JavaGuice extends RoboGuice<String, RoboApplication, RoboContext<RoboApplication>, JavaDefaultRoboModule, JavaResourceListener> {
 
     private JavaGuice() {
         modulesResourceId = "";
@@ -28,10 +28,10 @@ private JavaGuice() {
     @Override
     protected List<Module> baseModules(RoboApplication scopedObject) 
     {
-        List<URL> configMatches = PropertyLoader.urlsFor(scopedObject.configurationLocation(), null);
+        List<URL> configMatches = PropertyLoader.urlsFor(scopedObject.configurationPath(), null);
         Ln.v("Configuration files: %s", configMatches);
         
-        Properties property = PropertyLoader.loadProperty(scopedObject.configurationLocation(), new Properties(), null);
+        Properties property = PropertyLoader.loadProperty(scopedObject.configurationPath(), new Properties(), null);
         
         String custom_modules = property != null ? (String) property.get(modulesResourceId) : null;
         final String[] moduleNames = custom_modules != null ? custom_modules.split( "," ) : new String[]{};
@@ -55,8 +55,9 @@ private JavaGuice() {
     }
 
     @Override
-    public Injector getInjector(RoboContext scopedObject) {
-        return new JavaContextScopedRoboInjector(scopedObject, getScopedInjector( new RoboApplication(scopedObject) ) );
+    public Injector getInjector(RoboContext<RoboApplication> scopedObject) {
+        //FIXME: Get application from context
+        return new JavaContextScopedRoboInjector(scopedObject, getScopedInjector( scopedObject.getApplicationContext() ) );
     }
     
     @Override
diff --git a/roboguice/src/main/java/roboguice/java/config/JavaDefaultRoboModule.java b/roboguice/src/main/java/roboguice/java/config/JavaDefaultRoboModule.java
index cef6ad622..4e9a2c951 100644
--- a/roboguice/src/main/java/roboguice/java/config/JavaDefaultRoboModule.java
+++ b/roboguice/src/main/java/roboguice/java/config/JavaDefaultRoboModule.java
@@ -27,6 +27,7 @@ protected void configure() {
      // ContextSingleton bindings
         bindScope(ContextSingleton.class, contextScope);
         bind(RoboScope.class).toInstance(contextScope);
+        bind(JavaContextScope.class).toInstance(contextScope);
         
         bindListener(Matchers.any(), resourceListener);
         
diff --git a/roboguice/src/main/java/roboguice/java/inject/JavaContextScope.java b/roboguice/src/main/java/roboguice/java/inject/JavaContextScope.java
index be08f8a67..72b96acb5 100644
--- a/roboguice/src/main/java/roboguice/java/inject/JavaContextScope.java
+++ b/roboguice/src/main/java/roboguice/java/inject/JavaContextScope.java
@@ -42,14 +42,14 @@
  *
  * @see ContextScopedRoboInjector
  */
-public class JavaContextScope extends RoboScope<RoboApplication, RoboContext> {
+public class JavaContextScope extends RoboScope<RoboApplication, RoboContext<RoboApplication>> {
     
     public JavaContextScope(RoboApplication application) {
         super(application, application);
     }
 
     @Override
-    protected Map<Key<?>,Object> getScopedObjectMap(final RoboContext origContext) {
+    protected Map<Key<?>,Object> getScopedObjectMap(final RoboContext<RoboApplication> origContext) {
         
         // Special case for application so that users don't have to manually set up application subclasses
         if( origContext instanceof RoboApplication )
diff --git a/roboguice/src/main/java/roboguice/java/inject/JavaContextScopedRoboInjector.java b/roboguice/src/main/java/roboguice/java/inject/JavaContextScopedRoboInjector.java
index aac8f36b6..c4cc1a4c0 100644
--- a/roboguice/src/main/java/roboguice/java/inject/JavaContextScopedRoboInjector.java
+++ b/roboguice/src/main/java/roboguice/java/inject/JavaContextScopedRoboInjector.java
@@ -19,10 +19,10 @@
 
 public class JavaContextScopedRoboInjector implements Injector {
     protected Injector delegate;
-    protected RoboContext context;
+    protected RoboContext<RoboApplication> context;
     protected JavaContextScope scope;
 
-    public JavaContextScopedRoboInjector(RoboContext context, Injector applicationInjector ) {
+    public JavaContextScopedRoboInjector(RoboContext<RoboApplication> context, Injector applicationInjector ) {
         this.delegate = applicationInjector;
         this.context = context;
         this.scope = delegate.getInstance(JavaContextScope.class);
diff --git a/roboguice/src/main/java/roboguice/java/inject/RoboApplication.java b/roboguice/src/main/java/roboguice/java/inject/RoboApplication.java
index 64cdd23b2..27ec8b2e1 100644
--- a/roboguice/src/main/java/roboguice/java/inject/RoboApplication.java
+++ b/roboguice/src/main/java/roboguice/java/inject/RoboApplication.java
@@ -2,27 +2,22 @@
 
 import java.util.Map;
 
-import com.google.inject.Key;
-
 import roboguice.base.util.RoboContext;
 
-public class RoboApplication implements RoboContext {
+import com.google.inject.Key;
 
-    private String configurationLocation;
-    
-    public RoboApplication( String configurationLocation )
-    {
-        this.configurationLocation = configurationLocation;
-    }
+public class RoboApplication implements RoboContext<RoboApplication> {
+
+    private String configurationPath;
     
-    public RoboApplication( RoboContext ctx )
+    public RoboApplication( String configurationPath )
     {
-        configurationLocation = ctx.configurationLocation();
+        this.configurationPath = configurationPath;
     }
     
-    public String configurationLocation()
+    public String configurationPath()
     {
-        return configurationLocation;
+        return configurationPath;
     }
     
     @Override
@@ -30,4 +25,9 @@ public String configurationLocation()
         return null;
     }
 
+    @Override
+    public RoboApplication getApplicationContext() {
+        return this;
+    }
+
 }
diff --git a/roboguice/src/test/java/roboguice/android/activity/ActivityInjectionTest.java b/roboguice/src/test/java/roboguice/android/activity/ActivityInjectionTest.java
index a1b3f398d..719303e89 100644
--- a/roboguice/src/test/java/roboguice/android/activity/ActivityInjectionTest.java
+++ b/roboguice/src/test/java/roboguice/android/activity/ActivityInjectionTest.java
@@ -33,7 +33,6 @@
 import roboguice.base.RoboGuice.RoboGuiceType;
 import roboguice.base.inject.ContextScopedProvider;
 import roboguice.base.inject.InjectResource;
-import roboguice.base.inject.ResourceListener.RequestStaticResourceInjection;
 
 import com.google.inject.ConfigurationException;
 import com.google.inject.Inject;
@@ -153,7 +152,7 @@ public void run() {
         // Force an OoM
         // http://stackoverflow.com/questions/3785713/how-to-make-the-java-system-release-soft-references/3810234
         try {
-            @SuppressWarnings({"MismatchedQueryAndUpdateOfCollection"}) final ArrayList<Object[]> allocations = new ArrayList<Object[]>();
+            final ArrayList<Object[]> allocations = new ArrayList<Object[]>();
             //noinspection InfiniteLoopStatement
             while(true)
                 allocations.add( new Object[(int) Runtime.getRuntime().maxMemory()] );
diff --git a/roboguice/src/test/java/roboguice/android/application/ApplicationInjectionTest.java b/roboguice/src/test/java/roboguice/android/application/ApplicationInjectionTest.java
index 39f7856fe..542ffe72a 100644
--- a/roboguice/src/test/java/roboguice/android/application/ApplicationInjectionTest.java
+++ b/roboguice/src/test/java/roboguice/android/application/ApplicationInjectionTest.java
@@ -12,6 +12,7 @@
 
 import roboguice.android.DroidGuice;
 import roboguice.android.test.RobolectricRoboTestRunner;
+import roboguice.base.RoboGuice;
 
 import com.google.inject.Inject;
 
@@ -49,7 +50,7 @@ public void shouldBeAbleToInjectContextScopedItemsIntoApplication() {
         @Override
         public void onCreate() {
             super.onCreate();
-            DroidGuice.instance().getInjector(this).injectMembers(this);
+            RoboGuice.<DroidGuice>instance().getInjector(this).injectMembers(this);
         }
     }
 
@@ -59,7 +60,7 @@ public void onCreate() {
         @Override
         public void onCreate() {
             super.onCreate();
-            DroidGuice.instance().getInjector(this).injectMembers(this);
+            RoboGuice.<DroidGuice>instance().getInjector(this).injectMembers(this);
         }
     }
 
diff --git a/roboguice/src/test/java/roboguice/android/event/ContextObserverBase.java b/roboguice/src/test/java/roboguice/android/event/ContextObserverBase.java
index 79b564a46..84d683aa9 100644
--- a/roboguice/src/test/java/roboguice/android/event/ContextObserverBase.java
+++ b/roboguice/src/test/java/roboguice/android/event/ContextObserverBase.java
@@ -14,7 +14,7 @@
  *
  * @author John Ericksen
  */
-@SuppressWarnings({"UnusedParameters", "UnusedDeclaration"})
+@SuppressWarnings("unused")
 public class ContextObserverBase {
 
     private Map<String, Map<Class<?>, Integer>> callCount = new HashMap<String, Map<Class<?>, Integer>>();
@@ -117,7 +117,7 @@ void observesOverloadedPackagePrivateEvent(@Observes EventTwo event){
         triggerCalled(OVERLOADED_METHOD, EventTwo.class);
     }
 
-    public void triggerCalled(String method, Class eventClass) {
+    public void triggerCalled(String method, Class<?> eventClass) {
         if(!callCount.containsKey(method)){
             callCount.put(method, new HashMap<Class<?>, Integer>());
         }
diff --git a/roboguice/src/test/java/roboguice/android/event/ContextObserverTesterImpl.java b/roboguice/src/test/java/roboguice/android/event/ContextObserverTesterImpl.java
index 8dd8dcd43..10eac8bb2 100644
--- a/roboguice/src/test/java/roboguice/android/event/ContextObserverTesterImpl.java
+++ b/roboguice/src/test/java/roboguice/android/event/ContextObserverTesterImpl.java
@@ -9,6 +9,7 @@
  *
  * @author John Ericksen
  */
+@SuppressWarnings("unused")
 public class ContextObserverTesterImpl extends ContextObserverBase implements ContextObserverTester{
 
     public static final String[] methods = {
diff --git a/roboguice/src/test/java/roboguice/android/event/EventManagerTest.java b/roboguice/src/test/java/roboguice/android/event/EventManagerTest.java
index b3330e55a..0c2bcd1f3 100644
--- a/roboguice/src/test/java/roboguice/android/event/EventManagerTest.java
+++ b/roboguice/src/test/java/roboguice/android/event/EventManagerTest.java
@@ -35,10 +35,10 @@ public void setup() throws NoSuchMethodException {
     @Test
     public void testRegistrationLifeCycle(){
         for(Method method : eventOneMethods){
-            eventManager.registerObserver(EventOne.class, new ObserverMethodListener(tester, method));
+            eventManager.registerObserver(EventOne.class, new ObserverMethodListener<Object>(tester, method));
         }
         for(Method method : eventTwoMethods){
-            eventManager.registerObserver(EventTwo.class, new ObserverMethodListener(tester, method));
+            eventManager.registerObserver(EventTwo.class, new ObserverMethodListener<Object>(tester, method));
         }
 
         eventManager.fire(event);
diff --git a/roboguice/src/test/java/roboguice/android/event/ObservesTypeListenerTest.java b/roboguice/src/test/java/roboguice/android/event/ObservesTypeListenerTest.java
index 0fc005cc6..9a9da691e 100644
--- a/roboguice/src/test/java/roboguice/android/event/ObservesTypeListenerTest.java
+++ b/roboguice/src/test/java/roboguice/android/event/ObservesTypeListenerTest.java
@@ -10,6 +10,7 @@
 
 import roboguice.android.DroidGuice;
 import roboguice.android.test.RobolectricRoboTestRunner;
+import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
 
 import com.google.inject.Inject;
@@ -35,7 +36,7 @@
     @Before
     public void setup() throws NoSuchMethodException {
         app = Robolectric.application;
-        injector = DroidGuice.instance().getInjector(app);
+        injector = RoboGuice.<DroidGuice>instance().getInjector(app);
 
         eventManager = injector.getInstance(EventManager.class);
 
diff --git a/roboguice/src/test/java/roboguice/android/event/eventListener/AsynchronousEventListenerDecoratorTest.java b/roboguice/src/test/java/roboguice/android/event/eventListener/AsynchronousEventListenerDecoratorTest.java
index c60bce535..b68bcfe9f 100644
--- a/roboguice/src/test/java/roboguice/android/event/eventListener/AsynchronousEventListenerDecoratorTest.java
+++ b/roboguice/src/test/java/roboguice/android/event/eventListener/AsynchronousEventListenerDecoratorTest.java
@@ -23,6 +23,7 @@
     protected RunnableAsyncTaskAdaptor asyncTaskAdaptor;
     protected AsynchronousEventListenerDecorator<Object> decorator;
 
+    @SuppressWarnings("unchecked")
     @Before
     public void setup(){
         //noinspection unchecked
diff --git a/roboguice/src/test/java/roboguice/android/event/eventListener/EventListenerRunnableTest.java b/roboguice/src/test/java/roboguice/android/event/eventListener/EventListenerRunnableTest.java
index 697df6a12..fa83c7b89 100644
--- a/roboguice/src/test/java/roboguice/android/event/eventListener/EventListenerRunnableTest.java
+++ b/roboguice/src/test/java/roboguice/android/event/eventListener/EventListenerRunnableTest.java
@@ -16,6 +16,7 @@
  *
  * @author John Ericksen
  */
+@SuppressWarnings({"rawtypes", "unchecked"})
 public class EventListenerRunnableTest {
 
     protected EventOne event;
diff --git a/roboguice/src/test/java/roboguice/android/event/eventListener/EventListenerThreadingDecoratorTest.java b/roboguice/src/test/java/roboguice/android/event/eventListener/EventListenerThreadingDecoratorTest.java
index 557a663b4..876f1b241 100644
--- a/roboguice/src/test/java/roboguice/android/event/eventListener/EventListenerThreadingDecoratorTest.java
+++ b/roboguice/src/test/java/roboguice/android/event/eventListener/EventListenerThreadingDecoratorTest.java
@@ -22,6 +22,7 @@
  *
  * @author John Ericksen
  */
+@SuppressWarnings({"unchecked", "rawtypes"})
 public class EventListenerThreadingDecoratorTest {
 
     protected EventListenerThreadingDecorator eventListenerDecorator;
diff --git a/roboguice/src/test/java/roboguice/android/event/eventListener/RunnableAsyncTaskAdaptorTest.java b/roboguice/src/test/java/roboguice/android/event/eventListener/RunnableAsyncTaskAdaptorTest.java
index 3bd7f3733..562bc42b4 100644
--- a/roboguice/src/test/java/roboguice/android/event/eventListener/RunnableAsyncTaskAdaptorTest.java
+++ b/roboguice/src/test/java/roboguice/android/event/eventListener/RunnableAsyncTaskAdaptorTest.java
@@ -13,6 +13,7 @@
  *
  * @author John Ericksen
  */
+@SuppressWarnings("rawtypes")
 public class RunnableAsyncTaskAdaptorTest {
 
     protected EventListenerRunnable runnable;
diff --git a/roboguice/src/test/java/roboguice/android/inject/ContextScopeTest.java b/roboguice/src/test/java/roboguice/android/inject/ContextScopeTest.java
index 6306a6acd..2c013f299 100644
--- a/roboguice/src/test/java/roboguice/android/inject/ContextScopeTest.java
+++ b/roboguice/src/test/java/roboguice/android/inject/ContextScopeTest.java
@@ -10,8 +10,8 @@
 
 import roboguice.android.DroidGuice;
 import roboguice.android.activity.RoboActivity;
-import roboguice.android.inject.AndroidContextScope;
 import roboguice.android.test.RobolectricRoboTestRunner;
+import roboguice.base.RoboGuice;
 import roboguice.base.inject.ContextSingleton;
 
 import com.google.inject.Inject;
@@ -42,7 +42,7 @@ public void shouldHaveContextInScopeMapAfterOnCreate() throws Exception {
 
     @Test
     public void shouldBeAbleToOpenMultipleScopes() {
-        final AndroidContextScope scope = DroidGuice.instance().getScopedInjector(Robolectric.application).getInstance(AndroidContextScope.class);
+        final AndroidContextScope scope = RoboGuice.<DroidGuice>instance().getScopedInjector(Robolectric.application).getInstance(AndroidContextScope.class);
         final Activity a = new A();
         final Activity b = new B();
 
@@ -54,7 +54,7 @@ public void shouldBeAbleToOpenMultipleScopes() {
 
     @Test(expected = IllegalArgumentException.class)
     public void shouldNotBeAbleToExitTheWrongScope() {
-        final AndroidContextScope scope = DroidGuice.instance().getScopedInjector(Robolectric.application).getInstance(AndroidContextScope.class);
+        final AndroidContextScope scope = RoboGuice.<DroidGuice>instance().getScopedInjector(Robolectric.application).getInstance(AndroidContextScope.class);
         final Activity a = new A();
         final Activity b = new B();
 
diff --git a/roboguice/src/test/java/roboguice/android/inject/ExtrasListenerTest.java b/roboguice/src/test/java/roboguice/android/inject/ExtrasListenerTest.java
index d0fc18f21..219fd9924 100644
--- a/roboguice/src/test/java/roboguice/android/inject/ExtrasListenerTest.java
+++ b/roboguice/src/test/java/roboguice/android/inject/ExtrasListenerTest.java
@@ -61,12 +61,5 @@ public IBinder onBind(Intent intent) {
             return null;
         }
 
-        @Override
-        public String configurationLocation() {
-            // TODO Auto-generated method stub
-            return null;
-        }
-
-        
     }
 }
diff --git a/roboguice/src/test/java/roboguice/android/inject/SharedPreferencesProviderTest.java b/roboguice/src/test/java/roboguice/android/inject/SharedPreferencesProviderTest.java
index c4b18df28..4b612aa2c 100644
--- a/roboguice/src/test/java/roboguice/android/inject/SharedPreferencesProviderTest.java
+++ b/roboguice/src/test/java/roboguice/android/inject/SharedPreferencesProviderTest.java
@@ -16,6 +16,7 @@
 import roboguice.android.DroidGuice;
 import roboguice.android.activity.RoboActivity;
 import roboguice.android.test.RobolectricRoboTestRunner;
+import roboguice.base.RoboGuice;
 import roboguice.base.util.Strings;
 
 import com.google.inject.AbstractModule;
@@ -25,7 +26,6 @@
 import android.os.Bundle;
 import android.preference.PreferenceManager;
 
-@SuppressWarnings("ResultOfMethodCallIgnored")
 @RunWith(RobolectricRoboTestRunner.class)
 public class SharedPreferencesProviderTest {
 
@@ -43,7 +43,7 @@ public void shouldInjectDefaultSharedPrefs() throws Exception {
 
     @Test
     public void shouldInjectNamedSharedPrefs() throws Exception {
-        DroidGuice.instance().setScopedInjector(Robolectric.application,DroidGuice.DEFAULT_STAGE, DroidGuice.instance().newDefaultRoboModule(Robolectric.application), new ModuleA() );
+        RoboGuice.<DroidGuice>instance().setScopedInjector(Robolectric.application,DroidGuice.DEFAULT_STAGE, RoboGuice.<DroidGuice>instance().newDefaultRoboModule(Robolectric.application), new ModuleA() );
         try {
             
             final A a = new A();
@@ -85,7 +85,7 @@ public void shouldFallbackOnOldDefaultIfPresent() throws Exception {
 
     @Test
     public void shouldNotFallbackOnOldDefaultIfNamedFileSpecified() throws Exception {
-        DroidGuice.instance().setScopedInjector(Robolectric.application,DroidGuice.DEFAULT_STAGE, DroidGuice.instance().newDefaultRoboModule(Robolectric.application), new ModuleA() );
+        RoboGuice.<DroidGuice>instance().setScopedInjector(Robolectric.application,DroidGuice.DEFAULT_STAGE, RoboGuice.<DroidGuice>instance().newDefaultRoboModule(Robolectric.application), new ModuleA() );
 
         final File oldDefault = new File("shared_prefs/default.xml");
         final File oldDir = new File("shared_prefs");
diff --git a/roboguice/src/test/java/roboguice/android/service/ServiceInjectionTest.java b/roboguice/src/test/java/roboguice/android/service/ServiceInjectionTest.java
index 292c605f4..5b4a18d3e 100644
--- a/roboguice/src/test/java/roboguice/android/service/ServiceInjectionTest.java
+++ b/roboguice/src/test/java/roboguice/android/service/ServiceInjectionTest.java
@@ -50,12 +50,6 @@ public void shouldNotAllowViewsInServices() {
         public IBinder onBind(Intent intent) {
             return null;
         }
-
-        @Override
-        public String configurationLocation() {
-            // TODO Auto-generated method stub
-            return null;
-        }
     }
 
     static public class RoboIntentServiceA extends RoboIntentService {
@@ -68,12 +62,6 @@ public RoboIntentServiceA(String name) {
         @Override
         protected void onHandleIntent(Intent intent) {
         }
-
-        @Override
-        public String configurationLocation() {
-            // TODO Auto-generated method stub
-            return null;
-        }
     }
 
     static public class RoboServiceB extends RoboService {
@@ -83,12 +71,6 @@ public String configurationLocation() {
         public IBinder onBind(Intent intent) {
             return null;
         }
-
-        @Override
-        public String configurationLocation() {
-            // TODO Auto-generated method stub
-            return null;
-        }
     }
 
 }
diff --git a/roboguice/src/test/java/roboguice/android/view/ViewInjectionTest.java b/roboguice/src/test/java/roboguice/android/view/ViewInjectionTest.java
index 2436948ab..d52236901 100644
--- a/roboguice/src/test/java/roboguice/android/view/ViewInjectionTest.java
+++ b/roboguice/src/test/java/roboguice/android/view/ViewInjectionTest.java
@@ -15,6 +15,7 @@
 import roboguice.android.activity.RoboActivity;
 import roboguice.android.inject.InjectView;
 import roboguice.android.test.RobolectricRoboTestRunner;
+import roboguice.base.RoboGuice;
 
 import com.google.inject.Inject;
 
@@ -58,7 +59,7 @@ public void shouldNotHoldReferencesToContext() {
         // Force an OoM
         // http://stackoverflow.com/questions/3785713/how-to-make-the-java-system-release-soft-references/3810234
         try {
-            @SuppressWarnings({"MismatchedQueryAndUpdateOfCollection"}) final ArrayList<Object[]> allocations = new ArrayList<Object[]>();
+            final ArrayList<Object[]> allocations = new ArrayList<Object[]>();
             //noinspection InfiniteLoopStatement
             while(true)
                 allocations.add( new Object[(int) Runtime.getRuntime().maxMemory()] );
@@ -154,7 +155,7 @@ public ViewA(Context context) {
                 ref.setId(101);
                 addView(ref);
 
-                DroidGuice.instance().getInjector(getContext()).injectMembers(this);
+                RoboGuice.<DroidGuice>instance().getInjector(getContext()).injectMembers(this);
             }
 
         }
@@ -189,7 +190,7 @@ public ViewA(Context context) {
                 ref.setTag("101");
                 addView(ref);
 
-                DroidGuice.instance().getInjector(getContext()).injectMembers(this);
+                RoboGuice.<DroidGuice>instance().getInjector(getContext()).injectMembers(this);
             }
 
         }
