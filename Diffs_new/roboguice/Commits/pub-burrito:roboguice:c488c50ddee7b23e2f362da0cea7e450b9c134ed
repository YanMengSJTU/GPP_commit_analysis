diff --git a/roboguice/src/main/java/roboguice/base/util/PropertyLoader.java b/roboguice/src/main/java/roboguice/base/util/PropertyLoader.java
index 0f083956b..db72e5dc4 100644
--- a/roboguice/src/main/java/roboguice/base/util/PropertyLoader.java
+++ b/roboguice/src/main/java/roboguice/base/util/PropertyLoader.java
@@ -3,6 +3,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.URL;
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.Enumeration;
@@ -13,6 +14,34 @@
 
 public class PropertyLoader {
 
+    /**
+     * Returns a list of {@link URL}s return from {@link ClassLoader#getResources(String)}
+     * sorted by the comparator given. If no comparator is given, order is not guaranteed.
+     * 
+     * @param resource The path of the resource to look for
+     * @param comparator The comparator to sort the resources by
+     * @return A list of URLs sorted by the given comparator
+     */
+    public static List<URL> urlsFor( String resource, Comparator<URL> comparator )
+    {
+        List<URL> allUrls = new ArrayList<URL>();
+        
+        try {
+            Enumeration<URL> urls = PropertyLoader.class.getClassLoader().getResources( resource );
+            allUrls = Collections.list(urls);
+            
+            if ( comparator != null )
+            {
+                Collections.sort(allUrls, comparator);
+            }
+            
+            } catch (IOException e) {
+                Ln.e( e );
+            }
+        
+        return allUrls;
+    }
+    
     /**
      * Loads a property file into specific ( or new ) {@link Properties} object
      * 
@@ -25,53 +54,41 @@ public static Properties loadProperty( String propertyFile, Properties property,
         boolean set = false;
         Properties tmp = property == null ? new Properties() : property;
 
-        try 
-        {
-            Enumeration<URL> urls = PropertyLoader.class.getClassLoader().getResources( propertyFile );
-            List<URL> allUrls = Collections.list(urls);
-            if ( comparator != null )
-            {
-                Collections.sort(allUrls, comparator);
-            }
-        
-            for( URL url : allUrls)
-            {//for each url
+        List<URL> allUrls = urlsFor( propertyFile, comparator );
+    
+        for( URL url : allUrls)
+        {//for each url
+            
+            InputStream in = null;
+            try 
+            {//and load the property file
+                in = url.openStream();
                 
-                InputStream in = null;
-                try 
-                {//and load the property file
-                    in = url.openStream();
-                    
-                    if ( in != null )
-                    {
-                        tmp.load( in );
-                        set = true;
-                    } 
-                    else 
-                    {
-                        Ln.w( "Could not find [%s] resource - can not inject any resources in specified file.", propertyFile );
-                    }
-                } 
-                catch (Exception e) 
+                if ( in != null )
                 {
-                    Ln.e( e, "Error loading property file [%s]", propertyFile );
+                    tmp.load( in );
+                    set = true;
                 } 
-                finally 
+                else 
                 {
-                    try 
-                    {
-                        in.close();
-                    } catch (Exception ex) 
-                    {
-                        // ignore
-                    }
+                    Ln.w( "Could not find [%s] resource - can not inject any resources in specified file.", propertyFile );
+                }
+            } 
+            catch (Exception e) 
+            {
+                Ln.e( e, "Error loading property file [%s]", propertyFile );
+            } 
+            finally 
+            {
+                try 
+                {
+                    in.close();
+                } catch (Exception ex) 
+                {
+                    // ignore
                 }
             }
         }
-        catch ( IOException e1 ) 
-        {
-            Ln.e(e1);
-        }
             
         return set ? tmp : null;
     }
