diff --git a/roboguice/src/main/java/roboguice/android/DroidGuice.java b/roboguice/src/main/java/roboguice/android/DroidGuice.java
index 193497092..9e204a0ed 100644
--- a/roboguice/src/main/java/roboguice/android/DroidGuice.java
+++ b/roboguice/src/main/java/roboguice/android/DroidGuice.java
@@ -5,9 +5,9 @@
 import java.util.WeakHashMap;
 
 import roboguice.android.config.AndroidDefaultRoboModule;
+import roboguice.android.inject.AndroidContextScope;
+import roboguice.android.inject.AndroidContextScopedRoboInjector;
 import roboguice.android.inject.AndroidResourceListener;
-import roboguice.android.inject.ContextScope;
-import roboguice.android.inject.ContextScopedRoboInjector;
 import roboguice.android.inject.RoboInjector;
 import roboguice.android.inject.ViewListener;
 import roboguice.base.RoboGuice;
@@ -72,7 +72,7 @@ private DroidGuice() {
     @Override
     public RoboInjector getInjector( Context context ) {
         final Application application = (Application)context.getApplicationContext();
-        return new ContextScopedRoboInjector(context, getScopedInjector(application), getViewListener(application));
+        return new AndroidContextScopedRoboInjector(context, getScopedInjector(application), getViewListener(application));
     }
     
     @Override
@@ -91,7 +91,7 @@ protected AndroidResourceListener getResourceListener(Application application) {
 
     @Override
     public AndroidDefaultRoboModule newDefaultRoboModule( Application application ) {
-        return new AndroidDefaultRoboModule(application, new ContextScope(application), getViewListener(application), getResourceListener(application));
+        return new AndroidDefaultRoboModule(application, new AndroidContextScope(application), getViewListener(application), getResourceListener(application));
     }
 
     protected ViewListener getViewListener( final Application application ) {
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboAccountAuthenticatorActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboAccountAuthenticatorActivity.java
index 1bb5ae12e..2ee2ae959 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboAccountAuthenticatorActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboAccountAuthenticatorActivity.java
@@ -34,9 +34,9 @@
 import roboguice.android.activity.event.OnStopEvent;
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
-import roboguice.android.util.RoboContext;
 import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
+import roboguice.base.util.RoboContext;
 
 import com.google.inject.Inject;
 import com.google.inject.Key;
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboActivity.java
index 7f558bb12..f22344370 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboActivity.java
@@ -32,9 +32,9 @@
 import roboguice.android.activity.event.OnStopEvent;
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
-import roboguice.android.util.RoboContext;
 import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
+import roboguice.base.util.RoboContext;
 
 import com.google.inject.Inject;
 import com.google.inject.Injector;
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboActivityGroup.java b/roboguice/src/main/java/roboguice/android/activity/RoboActivityGroup.java
index 1ba795aa9..0b21a3041 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboActivityGroup.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboActivityGroup.java
@@ -32,9 +32,9 @@
 import roboguice.android.activity.event.OnStopEvent;
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
-import roboguice.android.util.RoboContext;
 import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
+import roboguice.base.util.RoboContext;
 
 import com.google.inject.Inject;
 import com.google.inject.Key;
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboExpandableListActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboExpandableListActivity.java
index b8ffb5ffb..e31a75e00 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboExpandableListActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboExpandableListActivity.java
@@ -32,9 +32,9 @@
 import roboguice.android.activity.event.OnStopEvent;
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
-import roboguice.android.util.RoboContext;
 import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
+import roboguice.base.util.RoboContext;
 
 import com.google.inject.Inject;
 import com.google.inject.Key;
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboFragmentActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboFragmentActivity.java
index 0bca01333..6c13e92f8 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboFragmentActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboFragmentActivity.java
@@ -32,9 +32,9 @@
 import roboguice.android.activity.event.OnStopEvent;
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
-import roboguice.android.util.RoboContext;
 import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
+import roboguice.base.util.RoboContext;
 
 import com.google.inject.Inject;
 import com.google.inject.Key;
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboLauncherActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboLauncherActivity.java
index 91a27c149..4394f7899 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboLauncherActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboLauncherActivity.java
@@ -32,9 +32,9 @@
 import roboguice.android.activity.event.OnStopEvent;
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
-import roboguice.android.util.RoboContext;
 import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
+import roboguice.base.util.RoboContext;
 
 import com.google.inject.Inject;
 import com.google.inject.Key;
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboListActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboListActivity.java
index 5fa98a48c..15952795a 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboListActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboListActivity.java
@@ -32,9 +32,9 @@
 import roboguice.android.activity.event.OnStopEvent;
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
-import roboguice.android.util.RoboContext;
 import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
+import roboguice.base.util.RoboContext;
 
 import com.google.inject.Inject;
 import com.google.inject.Key;
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboMapActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboMapActivity.java
index 843523a5d..afbf23573 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboMapActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboMapActivity.java
@@ -32,9 +32,9 @@
 import roboguice.android.activity.event.OnStopEvent;
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
-import roboguice.android.util.RoboContext;
 import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
+import roboguice.base.util.RoboContext;
 
 import com.google.android.maps.MapActivity;
 import com.google.inject.Inject;
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboPreferenceActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboPreferenceActivity.java
index e1b1c6d0e..820ce8b0f 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboPreferenceActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboPreferenceActivity.java
@@ -31,12 +31,12 @@
 import roboguice.android.activity.event.OnStartEvent;
 import roboguice.android.activity.event.OnStopEvent;
 import roboguice.android.inject.ContentViewListener;
-import roboguice.android.inject.ContextScope;
+import roboguice.android.inject.AndroidContextScope;
 import roboguice.android.inject.PreferenceListener;
 import roboguice.android.inject.RoboInjector;
-import roboguice.android.util.RoboContext;
 import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
+import roboguice.base.util.RoboContext;
 
 import com.google.inject.Inject;
 import com.google.inject.Key;
@@ -83,8 +83,8 @@ protected void onCreate(Bundle savedInstanceState) {
     public void setPreferenceScreen(PreferenceScreen preferenceScreen) {
         super.setPreferenceScreen(preferenceScreen);
 
-        final ContextScope scope = RoboGuice.<DroidGuice>instance().getInjector(this).getInstance(ContextScope.class);
-        synchronized (ContextScope.class) {
+        final AndroidContextScope scope = RoboGuice.<DroidGuice>instance().getInjector(this).getInstance(AndroidContextScope.class);
+        synchronized (AndroidContextScope.class) {
             scope.enter(this);
             try {
                 preferenceListener.injectPreferenceViews();
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboTabActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboTabActivity.java
index b37271506..23f29f8d5 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboTabActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboTabActivity.java
@@ -32,9 +32,9 @@
 import roboguice.android.activity.event.OnStopEvent;
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
-import roboguice.android.util.RoboContext;
 import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
+import roboguice.base.util.RoboContext;
 
 import com.google.inject.Inject;
 import com.google.inject.Key;
diff --git a/roboguice/src/main/java/roboguice/android/config/AndroidDefaultRoboModule.java b/roboguice/src/main/java/roboguice/android/config/AndroidDefaultRoboModule.java
index d1a26263b..82c290ea6 100644
--- a/roboguice/src/main/java/roboguice/android/config/AndroidDefaultRoboModule.java
+++ b/roboguice/src/main/java/roboguice/android/config/AndroidDefaultRoboModule.java
@@ -4,10 +4,10 @@
 import roboguice.android.event.ObservesTypeListener;
 import roboguice.android.event.eventListener.factory.EventListenerThreadingDecorator;
 import roboguice.android.inject.AccountManagerProvider;
+import roboguice.android.inject.AndroidContextScope;
 import roboguice.android.inject.AndroidResourceListener;
 import roboguice.android.inject.AssetManagerProvider;
 import roboguice.android.inject.ContentResolverProvider;
-import roboguice.android.inject.ContextScope;
 import roboguice.android.inject.ContextScopedSystemServiceProvider;
 import roboguice.android.inject.ExtrasListener;
 import roboguice.android.inject.FragmentManagerProvider;
@@ -24,6 +24,7 @@
 import roboguice.base.config.DefaultRoboModule;
 import roboguice.base.event.EventManager;
 import roboguice.base.inject.ContextSingleton;
+import roboguice.base.inject.RoboScope;
 import roboguice.base.util.Strings;
 import roboguice.base.util.logging.BaseConfig;
 import roboguice.base.util.logging.Ln;
@@ -107,11 +108,11 @@
 
 
     protected Application application;
-    protected ContextScope contextScope;
+    protected AndroidContextScope contextScope;
     protected ViewListener viewListener;
 
 
-    public AndroidDefaultRoboModule(final Application application, ContextScope contextScope, ViewListener viewListener, AndroidResourceListener resourceListener) {
+    public AndroidDefaultRoboModule(final Application application, AndroidContextScope contextScope, ViewListener viewListener, AndroidResourceListener resourceListener) {
         
         super(resourceListener);
         this.application = application;
@@ -149,11 +150,9 @@ protected void configure() {
         bind(ViewListener.class).toInstance(viewListener);
         bind(PreferenceListener.class).toInstance(preferenceListener);
 
-
-
         // ContextSingleton bindings
         bindScope(ContextSingleton.class, contextScope);
-        bind(ContextScope.class).toInstance(contextScope);
+        bind(RoboScope.class).toInstance(contextScope);
         bind(AssetManager.class).toProvider(AssetManagerProvider.class);
         bind(Context.class).toProvider(NullProvider.<Context>instance()).in(ContextSingleton.class);
         bind(Activity.class).toProvider(NullProvider.<Activity>instance()).in(ContextSingleton.class);
diff --git a/roboguice/src/main/java/roboguice/android/inject/AndroidContextScope.java b/roboguice/src/main/java/roboguice/android/inject/AndroidContextScope.java
new file mode 100644
index 000000000..3671fd31c
--- /dev/null
+++ b/roboguice/src/main/java/roboguice/android/inject/AndroidContextScope.java
@@ -0,0 +1,72 @@
+/*
+ * Copyright 2009 Michael Burton
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions
+ * and limitations under the License.
+ */
+package roboguice.android.inject;
+
+import java.util.Map;
+
+import roboguice.base.inject.RoboScope;
+import roboguice.base.util.RoboContext;
+
+import com.google.inject.Key;
+
+import android.app.Application;
+import android.content.Context;
+import android.content.ContextWrapper;
+
+/**
+ * Scopes the injector based on the current context.
+ *
+ * Any usage of this class must call #enter(Context) before performing any operations with the
+ * injector, and do so within a synchronized block on the ContextScope.class, eg:
+ *
+ * synchronized(ContextScope.class) {
+ *     scope.enter(context);
+ *
+ *     // do something, eg.
+ *     // injector.injectMembers(this);
+ * }
+ *
+ * If you're using ContextScopedRoboInjector (which is the RoboGuice default), this is done for you automatically.
+ *
+ * If you're trying to use a Provider, you must either use ContextScopedProvider instead, or do your own synchronization
+ * and scope.enter() call.
+ *
+ * @see ContextScopedRoboInjector
+ * @author Mike Burton
+ */
+public class AndroidContextScope extends RoboScope<Application, Context> {
+    
+    public AndroidContextScope(Application application) {
+        super(application, application);
+    }
+
+    @Override
+    protected Map<Key<?>,Object> getScopedObjectMap(final Context origContext) {
+        Context context = origContext;
+        while( !(context instanceof RoboContext) && !(context instanceof Application) && context instanceof ContextWrapper )
+            context = ((ContextWrapper)context).getBaseContext();
+
+        // Special case for application so that users don't have to manually set up application subclasses
+        if( context instanceof Application )
+            return applicationScopedObjects;
+
+
+        if( !(context instanceof RoboContext) )
+            throw new IllegalArgumentException(String.format("%s does not appear to be a RoboGuice context (instanceof RoboContext)",origContext));
+
+        return ((RoboContext)context).getScopedObjectMap();
+    }
+}
diff --git a/roboguice/src/main/java/roboguice/android/inject/ContextScopedRoboInjector.java b/roboguice/src/main/java/roboguice/android/inject/AndroidContextScopedRoboInjector.java
similarity index 81%
rename from roboguice/src/main/java/roboguice/android/inject/ContextScopedRoboInjector.java
rename to roboguice/src/main/java/roboguice/android/inject/AndroidContextScopedRoboInjector.java
index 3b1a23bb0..fb25b07ac 100644
--- a/roboguice/src/main/java/roboguice/android/inject/ContextScopedRoboInjector.java
+++ b/roboguice/src/main/java/roboguice/android/inject/AndroidContextScopedRoboInjector.java
@@ -21,22 +21,30 @@
 import android.content.Context;
 import android.support.v4.app.Fragment;
 
-public class ContextScopedRoboInjector implements RoboInjector {
+import com.google.inject.*;
+import com.google.inject.spi.TypeConverterBinding;
+
+import java.lang.annotation.Annotation;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+public class AndroidContextScopedRoboInjector implements RoboInjector {
     protected Injector delegate;
     protected Context context;
-    protected ContextScope scope;
+    protected AndroidContextScope scope;
     protected ViewListener viewListener;
 
-    public ContextScopedRoboInjector(Context context, Injector applicationInjector, ViewListener viewListener) {
+    public AndroidContextScopedRoboInjector(Context context, Injector applicationInjector, ViewListener viewListener) {
         this.delegate = applicationInjector;
         this.context = context;
         this.viewListener = viewListener;
-        this.scope = delegate.getInstance(ContextScope.class);
+        this.scope = delegate.getInstance(AndroidContextScope.class);
     }
 
     @Override
     public Injector createChildInjector(Iterable<? extends Module> modules) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.createChildInjector(modules);
@@ -48,7 +56,7 @@ public Injector createChildInjector(Iterable<? extends Module> modules) {
 
     @Override
     public Injector createChildInjector(Module... modules) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.createChildInjector(modules);
@@ -60,7 +68,7 @@ public Injector createChildInjector(Module... modules) {
 
     @Override
     public <T> List<Binding<T>> findBindingsByType(TypeLiteral<T> type) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.findBindingsByType(type);
@@ -72,7 +80,7 @@ public Injector createChildInjector(Module... modules) {
 
     @Override
     public Map<Key<?>, Binding<?>> getAllBindings() {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getAllBindings();
@@ -84,7 +92,7 @@ public Injector createChildInjector(Module... modules) {
 
     @Override
     public <T> Binding<T> getBinding(Key<T> key) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getBinding(key);
@@ -96,7 +104,7 @@ public Injector createChildInjector(Module... modules) {
 
     @Override
     public <T> Binding<T> getBinding(Class<T> type) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getBinding(type);
@@ -108,7 +116,7 @@ public Injector createChildInjector(Module... modules) {
 
     @Override
     public Map<Key<?>, Binding<?>> getBindings() {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getBindings();
@@ -120,7 +128,7 @@ public Injector createChildInjector(Module... modules) {
 
     @Override
     public <T> Binding<T> getExistingBinding(Key<T> key) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getExistingBinding(key);
@@ -132,7 +140,7 @@ public Injector createChildInjector(Module... modules) {
 
     @Override
     public <T> T getInstance(Key<T> key) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getInstance(key);
@@ -144,7 +152,7 @@ public Injector createChildInjector(Module... modules) {
 
     @Override
     public <T> T getInstance(Class<T> type) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getInstance(type);
@@ -156,7 +164,7 @@ public Injector createChildInjector(Module... modules) {
 
     @Override
     public <T> MembersInjector<T> getMembersInjector(Class<T> type) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getMembersInjector(type);
@@ -168,7 +176,7 @@ public Injector createChildInjector(Module... modules) {
 
     @Override
     public <T> MembersInjector<T> getMembersInjector(TypeLiteral<T> typeLiteral) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getMembersInjector(typeLiteral);
@@ -180,7 +188,7 @@ public Injector createChildInjector(Module... modules) {
 
     @Override
     public Injector getParent() {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getParent();
@@ -192,7 +200,7 @@ public Injector getParent() {
 
     @Override
     public <T> Provider<T> getProvider(Key<T> key) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getProvider(key);
@@ -204,7 +212,7 @@ public Injector getParent() {
 
     @Override
     public <T> Provider<T> getProvider(Class<T> type) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getProvider(type);
@@ -216,7 +224,7 @@ public Injector getParent() {
 
     @Override
     public Map<Class<? extends Annotation>, Scope> getScopeBindings() {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getScopeBindings();
@@ -228,7 +236,7 @@ public Injector getParent() {
 
     @Override
     public Set<TypeConverterBinding> getTypeConverterBindings() {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getTypeConverterBindings();
@@ -244,7 +252,7 @@ public void injectMembers(Object instance) {
     }
 
     public void injectMembersWithoutViews( Object instance ) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 delegate.injectMembers(instance);
@@ -256,7 +264,7 @@ public void injectMembersWithoutViews( Object instance ) {
 
     @Override
     public void injectViewMembers(Activity activity) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 if( context!=activity )
@@ -271,7 +279,7 @@ public void injectViewMembers(Activity activity) {
 
     @Override
     public void injectViewMembers(Fragment fragment) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 ViewMembersInjector.injectViews(fragment);
diff --git a/roboguice/src/main/java/roboguice/android/inject/PreferenceListener.java b/roboguice/src/main/java/roboguice/android/inject/PreferenceListener.java
index 096b767d4..e7f5c49a1 100644
--- a/roboguice/src/main/java/roboguice/android/inject/PreferenceListener.java
+++ b/roboguice/src/main/java/roboguice/android/inject/PreferenceListener.java
@@ -41,9 +41,9 @@
 
     protected Provider<Context> contextProvider;
     protected Application application;
-    protected ContextScope scope;
+    protected AndroidContextScope scope;
 
-    public PreferenceListener(Provider<Context> contextProvider, Application application, ContextScope scope) {
+    public PreferenceListener(Provider<Context> contextProvider, Application application, AndroidContextScope scope) {
         this.contextProvider = contextProvider;
         this.application = application;
         this.scope = scope;
@@ -76,10 +76,10 @@ public void injectPreferenceViews() {
         protected Field field;
         protected Provider<Context> contextProvider;
         protected InjectPreference annotation;
-        protected ContextScope scope;
+        protected AndroidContextScope scope;
         protected WeakReference<T> instanceRef;
 
-        public PreferenceMembersInjector(Field field, Provider<Context> contextProvider, InjectPreference annotation, ContextScope scope) {
+        public PreferenceMembersInjector(Field field, Provider<Context> contextProvider, InjectPreference annotation, AndroidContextScope scope) {
             this.field = field;
             this.annotation = annotation;
             this.contextProvider = contextProvider;
diff --git a/roboguice/src/main/java/roboguice/android/service/RoboIntentService.java b/roboguice/src/main/java/roboguice/android/service/RoboIntentService.java
index 01a3b8ca6..55455ea35 100644
--- a/roboguice/src/main/java/roboguice/android/service/RoboIntentService.java
+++ b/roboguice/src/main/java/roboguice/android/service/RoboIntentService.java
@@ -8,8 +8,8 @@
 import roboguice.android.service.event.OnCreateEvent;
 import roboguice.android.service.event.OnDestroyEvent;
 import roboguice.android.service.event.OnStartEvent;
-import roboguice.android.util.RoboContext;
 import roboguice.base.event.EventManager;
+import roboguice.base.util.RoboContext;
 
 import com.google.inject.Injector;
 import com.google.inject.Key;
diff --git a/roboguice/src/main/java/roboguice/android/service/RoboService.java b/roboguice/src/main/java/roboguice/android/service/RoboService.java
index 7d9a0e158..fbc567d54 100644
--- a/roboguice/src/main/java/roboguice/android/service/RoboService.java
+++ b/roboguice/src/main/java/roboguice/android/service/RoboService.java
@@ -18,8 +18,8 @@
 import roboguice.android.service.event.OnCreateEvent;
 import roboguice.android.service.event.OnDestroyEvent;
 import roboguice.android.service.event.OnStartEvent;
-import roboguice.android.util.RoboContext;
 import roboguice.base.event.EventManager;
+import roboguice.base.util.RoboContext;
 
 import com.google.inject.Injector;
 import com.google.inject.Key;
diff --git a/roboguice/src/main/java/roboguice/android/inject/ContextScopedProvider.java b/roboguice/src/main/java/roboguice/base/inject/ContextScopedProvider.java
similarity index 62%
rename from roboguice/src/main/java/roboguice/android/inject/ContextScopedProvider.java
rename to roboguice/src/main/java/roboguice/base/inject/ContextScopedProvider.java
index f34d41560..1211a7706 100644
--- a/roboguice/src/main/java/roboguice/android/inject/ContextScopedProvider.java
+++ b/roboguice/src/main/java/roboguice/base/inject/ContextScopedProvider.java
@@ -1,17 +1,16 @@
-package roboguice.android.inject;
+package roboguice.base.inject;
 
 import com.google.inject.Inject;
 import com.google.inject.Provider;
 
 import android.content.Context;
 
-
-public class ContextScopedProvider<T> {
-    @Inject protected ContextScope scope;
+public class ContextScopedProvider<A,C,T> {
+    @Inject protected RoboScope<A,C> scope;
     @Inject protected Provider<T> provider;
 
-    public T get(Context context) {
-        synchronized (ContextScope.class) {
+    public T get(C context) {
+        synchronized (RoboScope.class) {
             scope.enter(context);
             try {
                 return provider.get();
diff --git a/roboguice/src/main/java/roboguice/base/inject/RoboScope.java b/roboguice/src/main/java/roboguice/base/inject/RoboScope.java
new file mode 100644
index 000000000..31f1cd8f0
--- /dev/null
+++ b/roboguice/src/main/java/roboguice/base/inject/RoboScope.java
@@ -0,0 +1,98 @@
+package roboguice.base.inject;
+
+import java.lang.ref.WeakReference;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Stack;
+
+import roboguice.android.inject.AndroidContextScope;
+
+import com.google.inject.Key;
+import com.google.inject.Provider;
+import com.google.inject.Scope;
+
+public abstract class RoboScope<A, C> implements Scope
+{
+    protected ThreadLocal<Stack<WeakReference<C>>> contextThreadLocal = new ThreadLocal<Stack<WeakReference<C>>>();
+    protected Map<Key<?>,Object> applicationScopedObjects = new HashMap<Key<?>, Object>();
+    protected A application;
+
+    public RoboScope(A application, C context) {
+        this.application = application;
+        enter(context);
+    }
+
+    /**
+     * You MUST perform any injector operations inside a synchronized(ContextScope.class) block that starts with
+     * scope.enter(context) if working in a multithreaded environment
+     *
+     * @see AndroidContextScope
+     * @see ContextScopedRoboInjector
+     * @see ContextScopedProvider
+     * @param context the context to enter
+     */
+    public void enter(C context) {
+
+        // BUG synchronizing on ContextScope.class may be overly conservative
+        synchronized (AndroidContextScope.class) {
+
+            final Stack<WeakReference<C>> stack = getContextStack();
+            final Map<Key<?>,Object> map = getScopedObjectMap(context);
+
+            // Mark this thread as for this context
+            stack.push(new WeakReference<C>(context));
+
+            // Add the context to the scope for key Context, Activity, etc.
+            Class<?> c = context.getClass();
+            do {
+                map.put(Key.get(c), context);
+                c = c.getSuperclass();
+            } while( c!=Object.class );
+        }
+
+    }
+
+    public void exit(C context) {
+        synchronized (AndroidContextScope.class) {
+            final Stack<WeakReference<C>> stack = getContextStack();
+            final C c = stack.pop().get();
+            if( c!=null && c!=context )
+                throw new IllegalArgumentException(String.format("Scope for %s must be opened before it can be closed",context));
+        }
+    }
+
+    public <T> Provider<T> scope(final Key<T> key, final Provider<T> unscoped) {
+        return new Provider<T>() {
+            public T get() {
+                synchronized (AndroidContextScope.class) {
+                    final Stack<WeakReference<C>> stack = getContextStack();
+                    final C context = stack.peek().get(); // The context should never be finalized as long as the provider is still in memory
+                    final Map<Key<?>, Object> objectsForScope = getScopedObjectMap(context);
+                    if( objectsForScope==null )
+                        return null;  // May want to consider throwing an exception here (if provider is used after onDestroy())
+
+                    @SuppressWarnings({"unchecked"}) T current = (T) objectsForScope.get(key);
+                    if (current==null && !objectsForScope.containsKey(key)) {
+                        current = unscoped.get();
+                        objectsForScope.put(key, current);
+                    }
+
+                    return current;
+                }
+            }
+        };
+
+    }
+
+
+    public Stack<WeakReference<C>> getContextStack() {
+        Stack<WeakReference<C>> stack = contextThreadLocal.get();
+        if( stack==null ) {
+            stack = new Stack<WeakReference<C>>();
+            contextThreadLocal.set(stack);
+        }
+        return stack;
+    }
+
+    protected abstract Map<Key<?>,Object> getScopedObjectMap(final C origContext);
+}
diff --git a/roboguice/src/main/java/roboguice/android/util/RoboContext.java b/roboguice/src/main/java/roboguice/base/util/RoboContext.java
similarity index 84%
rename from roboguice/src/main/java/roboguice/android/util/RoboContext.java
rename to roboguice/src/main/java/roboguice/base/util/RoboContext.java
index 0a434f227..7aec1ead2 100644
--- a/roboguice/src/main/java/roboguice/android/util/RoboContext.java
+++ b/roboguice/src/main/java/roboguice/base/util/RoboContext.java
@@ -1,4 +1,4 @@
-package roboguice.android.util;
+package roboguice.base.util;
 
 import java.util.Map;
 
diff --git a/roboguice/src/main/java/roboguice/java/JavaGuice.java b/roboguice/src/main/java/roboguice/java/JavaGuice.java
index 8a0f2a8ed..16f74e05f 100644
--- a/roboguice/src/main/java/roboguice/java/JavaGuice.java
+++ b/roboguice/src/main/java/roboguice/java/JavaGuice.java
@@ -6,11 +6,12 @@
 import java.util.List;
 import java.util.Properties;
 
-import roboguice.android.util.RoboContext;
 import roboguice.base.RoboGuice;
 import roboguice.base.util.PropertyLoader;
 import roboguice.base.util.logging.Ln;
 import roboguice.java.config.JavaDefaultRoboModule;
+import roboguice.java.inject.JavaContextScope;
+import roboguice.java.inject.JavaContextScopedRoboInjector;
 import roboguice.java.inject.JavaResourceListener;
 import roboguice.java.inject.RoboApplication;
 
@@ -54,12 +55,12 @@ private JavaGuice() {
 
     @Override
     public Injector getInjector(RoboContext scopedObject) {
-        return getScopedInjector( new RoboApplication(scopedObject) );
+        return new JavaContextScopedRoboInjector(scopedObject, getScopedInjector( new RoboApplication(scopedObject) ) );
     }
     
     @Override
     public JavaDefaultRoboModule newDefaultRoboModule( RoboApplication scopedObject ) {
-        return new JavaDefaultRoboModule( getResourceListener(scopedObject) );
+        return new JavaDefaultRoboModule( new JavaContextScope(scopedObject), getResourceListener(scopedObject) );
     }
 
     public JavaGuice addResourcePath( RoboApplication scopedObject, String... paths )
diff --git a/roboguice/src/main/java/roboguice/java/config/JavaDefaultRoboModule.java b/roboguice/src/main/java/roboguice/java/config/JavaDefaultRoboModule.java
index 6faca7c79..cef6ad622 100644
--- a/roboguice/src/main/java/roboguice/java/config/JavaDefaultRoboModule.java
+++ b/roboguice/src/main/java/roboguice/java/config/JavaDefaultRoboModule.java
@@ -1,9 +1,12 @@
 package roboguice.java.config;
 
 import roboguice.base.config.DefaultRoboModule;
+import roboguice.base.inject.ContextSingleton;
+import roboguice.base.inject.RoboScope;
 import roboguice.base.util.logging.BaseConfig;
 import roboguice.base.util.logging.Ln;
 import roboguice.base.util.logging.Writer;
+import roboguice.java.inject.JavaContextScope;
 import roboguice.java.inject.JavaResourceListener;
 import roboguice.java.util.logging.JavaBaseConfig;
 import roboguice.java.util.logging.JavaWriter;
@@ -12,13 +15,19 @@
 
 public class JavaDefaultRoboModule extends DefaultRoboModule<JavaResourceListener> {
 
-    public JavaDefaultRoboModule(JavaResourceListener listener) {
+    private  JavaContextScope contextScope;
+    public JavaDefaultRoboModule( JavaContextScope contextScope, JavaResourceListener listener) {
         super(listener);
+        this.contextScope = contextScope;
     }
 
     @Override
     protected void configure() {
         
+     // ContextSingleton bindings
+        bindScope(ContextSingleton.class, contextScope);
+        bind(RoboScope.class).toInstance(contextScope);
+        
         bindListener(Matchers.any(), resourceListener);
         
         bind(BaseConfig.class).to(JavaBaseConfig.class);
diff --git a/roboguice/src/main/java/roboguice/java/inject/JavaContextScope.java b/roboguice/src/main/java/roboguice/java/inject/JavaContextScope.java
new file mode 100644
index 000000000..be08f8a67
--- /dev/null
+++ b/roboguice/src/main/java/roboguice/java/inject/JavaContextScope.java
@@ -0,0 +1,60 @@
+/*
+ * Copyright 2009 Michael Burton
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions
+ * and limitations under the License.
+ */
+package roboguice.java.inject;
+
+import java.util.Map;
+
+import roboguice.base.inject.RoboScope;
+import roboguice.base.util.RoboContext;
+
+import com.google.inject.Key;
+
+/**
+ * Scopes the injector based on the current context.
+ *
+ * Any usage of this class must call #enter(Context) before performing any operations with the
+ * injector, and do so within a synchronized block on the ContextScope.class, eg:
+ *
+ * synchronized(ContextScope.class) {
+ *     scope.enter(context);
+ *
+ *     // do something, eg.
+ *     // injector.injectMembers(this);
+ * }
+ *
+ * If you're using ContextScopedRoboInjector (which is the RoboGuice default), this is done for you automatically.
+ *
+ * If you're trying to use a Provider, you must either use ContextScopedProvider instead, or do your own synchronization
+ * and scope.enter() call.
+ *
+ * @see ContextScopedRoboInjector
+ */
+public class JavaContextScope extends RoboScope<RoboApplication, RoboContext> {
+    
+    public JavaContextScope(RoboApplication application) {
+        super(application, application);
+    }
+
+    @Override
+    protected Map<Key<?>,Object> getScopedObjectMap(final RoboContext origContext) {
+        
+        // Special case for application so that users don't have to manually set up application subclasses
+        if( origContext instanceof RoboApplication )
+            return applicationScopedObjects;
+
+        return origContext.getScopedObjectMap();
+    }
+}
diff --git a/roboguice/src/main/java/roboguice/java/inject/JavaContextScopedRoboInjector.java b/roboguice/src/main/java/roboguice/java/inject/JavaContextScopedRoboInjector.java
new file mode 100644
index 000000000..aac8f36b6
--- /dev/null
+++ b/roboguice/src/main/java/roboguice/java/inject/JavaContextScopedRoboInjector.java
@@ -0,0 +1,247 @@
+package roboguice.java.inject;
+
+import java.lang.annotation.Annotation;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import roboguice.base.util.RoboContext;
+
+import com.google.inject.Binding;
+import com.google.inject.Injector;
+import com.google.inject.Key;
+import com.google.inject.MembersInjector;
+import com.google.inject.Module;
+import com.google.inject.Provider;
+import com.google.inject.Scope;
+import com.google.inject.TypeLiteral;
+import com.google.inject.spi.TypeConverterBinding;
+
+public class JavaContextScopedRoboInjector implements Injector {
+    protected Injector delegate;
+    protected RoboContext context;
+    protected JavaContextScope scope;
+
+    public JavaContextScopedRoboInjector(RoboContext context, Injector applicationInjector ) {
+        this.delegate = applicationInjector;
+        this.context = context;
+        this.scope = delegate.getInstance(JavaContextScope.class);
+    }
+
+    @Override
+    public Injector createChildInjector(Iterable<? extends Module> modules) {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.createChildInjector(modules);
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public Injector createChildInjector(Module... modules) {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.createChildInjector(modules);
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public <T> List<Binding<T>> findBindingsByType(TypeLiteral<T> type) {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.findBindingsByType(type);
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public Map<Key<?>, Binding<?>> getAllBindings() {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getAllBindings();
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public <T> Binding<T> getBinding(Key<T> key) {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getBinding(key);
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public <T> Binding<T> getBinding(Class<T> type) {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getBinding(type);
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public Map<Key<?>, Binding<?>> getBindings() {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getBindings();
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public <T> Binding<T> getExistingBinding(Key<T> key) {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getExistingBinding(key);
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public <T> T getInstance(Key<T> key) {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getInstance(key);
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public <T> T getInstance(Class<T> type) {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getInstance(type);
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public <T> MembersInjector<T> getMembersInjector(Class<T> type) {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getMembersInjector(type);
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public <T> MembersInjector<T> getMembersInjector(TypeLiteral<T> typeLiteral) {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getMembersInjector(typeLiteral);
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public Injector getParent() {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getParent();
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public <T> Provider<T> getProvider(Key<T> key) {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getProvider(key);
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public <T> Provider<T> getProvider(Class<T> type) {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getProvider(type);
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public Map<Class<? extends Annotation>, Scope> getScopeBindings() {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getScopeBindings();
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public Set<TypeConverterBinding> getTypeConverterBindings() {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getTypeConverterBindings();
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public void injectMembers(Object instance) {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                delegate.injectMembers(instance);
+            }finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+}
diff --git a/roboguice/src/main/java/roboguice/java/inject/RoboApplication.java b/roboguice/src/main/java/roboguice/java/inject/RoboApplication.java
index 8bc73003f..64cdd23b2 100644
--- a/roboguice/src/main/java/roboguice/java/inject/RoboApplication.java
+++ b/roboguice/src/main/java/roboguice/java/inject/RoboApplication.java
@@ -4,7 +4,7 @@
 
 import com.google.inject.Key;
 
-import roboguice.android.util.RoboContext;
+import roboguice.base.util.RoboContext;
 
 public class RoboApplication implements RoboContext {
 
diff --git a/roboguice/src/test/java/roboguice/android/activity/ActivityInjectionTest.java b/roboguice/src/test/java/roboguice/android/activity/ActivityInjectionTest.java
index b5ad4c38a..2b8b22707 100644
--- a/roboguice/src/test/java/roboguice/android/activity/ActivityInjectionTest.java
+++ b/roboguice/src/test/java/roboguice/android/activity/ActivityInjectionTest.java
@@ -18,23 +18,22 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
 
 import roboguice.android.DroidGuice;
 import roboguice.android.activity.ActivityInjectionTest.ModuleA.A;
 import roboguice.android.activity.ActivityInjectionTest.ModuleB.B;
 import roboguice.android.activity.ActivityInjectionTest.ModuleC.C;
 import roboguice.android.activity.ActivityInjectionTest.ModuleD.D;
-import roboguice.android.inject.ContextScopedProvider;
 import roboguice.android.inject.InjectExtra;
 import roboguice.android.inject.InjectPreference;
 import roboguice.android.inject.InjectView;
 import roboguice.android.test.RobolectricRoboTestRunner;
-import roboguice.base.RoboGuice;
-import roboguice.base.RoboGuice.RoboGuiceType;
+import roboguice.base.inject.ContextScopedProvider;
 import roboguice.base.inject.InjectResource;
 import roboguice.base.inject.ResourceListener.RequestStaticResourceInjection;
 
+import com.xtremelabs.robolectric.Robolectric;
+
 import com.google.inject.ConfigurationException;
 import com.google.inject.Inject;
 import com.google.inject.Key;
@@ -172,7 +171,7 @@ public void shouldBeAbleToGetContextProvidersInBackgroundThreads() throws Except
         f.onCreate(null);
 
         final FutureTask<Context> future = new FutureTask<Context>(new Callable<Context>() {
-            final ContextScopedProvider<Context> contextProvider = DroidGuice.instance().getInjector(f).getInstance(Key.get(new TypeLiteral<ContextScopedProvider<Context>>(){}));
+            final ContextScopedProvider<Application, Context, Context> contextProvider = DroidGuice.instance().getInjector(f).getInstance(Key.get(new TypeLiteral<ContextScopedProvider<Application, Context, Context>>(){}));
             
             @Override
             public Context call() throws Exception {
diff --git a/roboguice/src/test/java/roboguice/android/inject/ContextScopeTest.java b/roboguice/src/test/java/roboguice/android/inject/ContextScopeTest.java
index 47bad337c..6306a6acd 100644
--- a/roboguice/src/test/java/roboguice/android/inject/ContextScopeTest.java
+++ b/roboguice/src/test/java/roboguice/android/inject/ContextScopeTest.java
@@ -10,6 +10,7 @@
 
 import roboguice.android.DroidGuice;
 import roboguice.android.activity.RoboActivity;
+import roboguice.android.inject.AndroidContextScope;
 import roboguice.android.test.RobolectricRoboTestRunner;
 import roboguice.base.inject.ContextSingleton;
 
@@ -41,7 +42,7 @@ public void shouldHaveContextInScopeMapAfterOnCreate() throws Exception {
 
     @Test
     public void shouldBeAbleToOpenMultipleScopes() {
-        final ContextScope scope = DroidGuice.instance().getScopedInjector(Robolectric.application).getInstance(ContextScope.class);
+        final AndroidContextScope scope = DroidGuice.instance().getScopedInjector(Robolectric.application).getInstance(AndroidContextScope.class);
         final Activity a = new A();
         final Activity b = new B();
 
@@ -53,7 +54,7 @@ public void shouldBeAbleToOpenMultipleScopes() {
 
     @Test(expected = IllegalArgumentException.class)
     public void shouldNotBeAbleToExitTheWrongScope() {
-        final ContextScope scope = DroidGuice.instance().getScopedInjector(Robolectric.application).getInstance(ContextScope.class);
+        final AndroidContextScope scope = DroidGuice.instance().getScopedInjector(Robolectric.application).getInstance(AndroidContextScope.class);
         final Activity a = new A();
         final Activity b = new B();
 
diff --git a/roboguice/src/test/java/roboguice/android/inject/ProviderTest.java b/roboguice/src/test/java/roboguice/android/inject/ProviderTest.java
index 48f52e43c..28d65e836 100644
--- a/roboguice/src/test/java/roboguice/android/inject/ProviderTest.java
+++ b/roboguice/src/test/java/roboguice/android/inject/ProviderTest.java
@@ -14,7 +14,9 @@
 
 import roboguice.android.activity.RoboActivity;
 import roboguice.android.test.RobolectricRoboTestRunner;
+import roboguice.base.inject.ContextScopedProvider;
 
+import android.app.Application;
 import android.content.Context;
 import android.os.Bundle;
 
@@ -63,7 +65,7 @@ public Context call() throws Exception {
 
 
     public static class A extends RoboActivity {
-        @Inject ContextScopedProvider<Context> contextProvider;
+        @Inject ContextScopedProvider<Application, Context, Context> contextProvider;
 
         @Override
         protected void onCreate(Bundle savedInstanceState) {
@@ -79,7 +81,7 @@ protected void onCreate(Bundle savedInstanceState) {
     }
 
     public static class C extends RoboActivity {
-        @Inject ContextScopedProvider<Context> contextProvider;
+        @Inject ContextScopedProvider<Application, Context, Context> contextProvider;
 
         @Override
         protected void onCreate(Bundle savedInstanceState) {
