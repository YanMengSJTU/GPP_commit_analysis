diff --git a/roboguice/.settings/org.eclipse.jdt.core.prefs b/roboguice/.settings/org.eclipse.jdt.core.prefs
index 11a9469b8..04adab01d 100644
--- a/roboguice/.settings/org.eclipse.jdt.core.prefs
+++ b/roboguice/.settings/org.eclipse.jdt.core.prefs
@@ -1,15 +1,15 @@
-#Thu Nov 26 08:51:00 PST 2009
 eclipse.preferences.version=1
 org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
 org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
-org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.compliance=1.6
 org.eclipse.jdt.core.compiler.debug.lineNumber=generate
 org.eclipse.jdt.core.compiler.debug.localVariable=generate
 org.eclipse.jdt.core.compiler.debug.sourceFile=generate
 org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
 org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
-org.eclipse.jdt.core.compiler.source=1.5
+org.eclipse.jdt.core.compiler.problem.forbiddenReference=warning
+org.eclipse.jdt.core.compiler.source=1.6
 org.eclipse.jdt.core.formatter.align_type_members_on_columns=false
 org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression=16
 org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant=16
diff --git a/roboguice/AndroidManifest.xml b/roboguice/AndroidManifest.xml
index 323eeb72f..d5ca21335 100644
--- a/roboguice/AndroidManifest.xml
+++ b/roboguice/AndroidManifest.xml
@@ -9,6 +9,6 @@
 
     <application android:icon="@drawable/icon" android:label="@string/app_name" >
     </application>
-    <uses-sdk android:minSdkVersion="3" />
+    <uses-sdk android:minSdkVersion="14" />
 
 </manifest>
diff --git a/roboguice/pom.xml b/roboguice/pom.xml
index 1ee0ee837..608cee729 100644
--- a/roboguice/pom.xml
+++ b/roboguice/pom.xml
@@ -3,7 +3,7 @@
     <groupId>org.roboguice</groupId>
     <artifactId>roboguice</artifactId>
     <name>RoboGuice</name>
-    <version>2.1-SNAPSHOT</version>
+    <version>2.1-ANDROID-4-SNAPSHOT</version>
     <description>A framework for using Google Guice dependency injection in Android.</description>
 
     <licenses>
@@ -106,13 +106,13 @@
         <dependency>
             <groupId>com.google.android</groupId>
             <artifactId>android</artifactId>
-            <version>2.1.2</version>
+            <version>4.0.1.2</version>
             <scope>provided</scope>
         </dependency>
         <dependency>
             <groupId>com.google.android</groupId>
             <artifactId>android-test</artifactId>
-            <version>2.1.2</version>
+            <version>4.0.1.2</version>
             <scope>provided</scope>
         </dependency>
         <dependency>
@@ -152,12 +152,6 @@
             <version>1.3.9</version>
             <scope>test</scope>
         </dependency>
-        <dependency>
-            <groupId>android.support</groupId>
-            <artifactId>compatibility-v4</artifactId>
-            <version>11</version>
-            <optional>true</optional>
-        </dependency>
 
     </dependencies>
 
diff --git a/roboguice/src/main/java/roboguice/activity/RoboFragmentActivity.java b/roboguice/src/main/java/roboguice/activity/RoboFragmentActivity.java
deleted file mode 100644
index 6e74f192a..000000000
--- a/roboguice/src/main/java/roboguice/activity/RoboFragmentActivity.java
+++ /dev/null
@@ -1,129 +0,0 @@
-/*
- * Copyright 2009 Michael Burton
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions
- * and limitations under the License.
- */
-package roboguice.activity;
-
-import roboguice.RoboGuice;
-import roboguice.activity.event.*;
-import roboguice.event.EventManager;
-import roboguice.inject.ContentViewListener;
-import roboguice.inject.RoboInjector;
-import roboguice.util.RoboContext;
-
-import android.content.Intent;
-import android.content.res.Configuration;
-import android.os.Bundle;
-import android.support.v4.app.FragmentActivity;
-
-import com.google.inject.Inject;
-import com.google.inject.Key;
-
-import java.util.HashMap;
-import java.util.Map;
-
-public class RoboFragmentActivity extends FragmentActivity implements RoboContext {
-    protected EventManager eventManager;
-    protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
-
-
-    @Inject ContentViewListener ignored; // BUG find a better place to put this
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
-        eventManager = injector.getInstance(EventManager.class);
-        injector.injectMembersWithoutViews(this);
-        super.onCreate(savedInstanceState);
-        eventManager.fire(new OnCreateEvent(savedInstanceState));
-    }
-
-    @Override
-    protected void onRestart() {
-        super.onRestart();
-        eventManager.fire(new OnRestartEvent());
-    }
-
-    @Override
-    protected void onStart() {
-        super.onStart();
-        eventManager.fire(new OnStartEvent());
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        eventManager.fire(new OnResumeEvent());
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-        eventManager.fire(new OnPauseEvent());
-    }
-
-    @Override
-    protected void onNewIntent( Intent intent ) {
-        super.onNewIntent(intent);
-        eventManager.fire(new OnNewIntentEvent());
-    }
-
-    @Override
-    protected void onStop() {
-        try {
-            eventManager.fire(new OnStopEvent());
-        } finally {
-            super.onStop();
-        }
-    }
-
-    @Override
-    protected void onDestroy() {
-        try {
-            eventManager.fire(new OnDestroyEvent());
-        } finally {
-            try {
-                RoboGuice.destroyInjector(this);
-            } finally {
-                super.onDestroy();
-            }
-        }
-    }
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        final Configuration currentConfig = getResources().getConfiguration();
-        super.onConfigurationChanged(newConfig);
-        eventManager.fire(new OnConfigurationChangedEvent(currentConfig, newConfig));
-    }
-
-    @Override
-    public void onContentChanged() {
-        super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
-        eventManager.fire(new OnContentChangedEvent());
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        eventManager.fire(new OnActivityResultEvent(requestCode, resultCode, data));
-    }
-
-    @Override
-    public Map<Key<?>, Object> getScopedObjectMap() {
-        return scopedObjects;
-    }
-
-}
diff --git a/roboguice/src/main/java/roboguice/content/RoboAsyncTaskLoader.java b/roboguice/src/main/java/roboguice/content/RoboAsyncTaskLoader.java
index cf4c42d91..910ea5d43 100644
--- a/roboguice/src/main/java/roboguice/content/RoboAsyncTaskLoader.java
+++ b/roboguice/src/main/java/roboguice/content/RoboAsyncTaskLoader.java
@@ -2,11 +2,12 @@
 
 import roboguice.RoboGuice;
 
+import android.content.AsyncTaskLoader;
 import android.content.Context;
-import android.support.v4.content.AsyncTaskLoader;
 
 /**
  * Provides injection to async task loaders.
+ * 
  * @author cherrydev
  */
 public abstract class RoboAsyncTaskLoader<D> extends AsyncTaskLoader<D> {
@@ -15,5 +16,5 @@ public RoboAsyncTaskLoader(Context context) {
         super(context);
         RoboGuice.injectMembers(context, this);
     }
-    
+
 }
diff --git a/roboguice/src/main/java/roboguice/content/RoboLoader.java b/roboguice/src/main/java/roboguice/content/RoboLoader.java
index 13718cc65..30e5759d8 100644
--- a/roboguice/src/main/java/roboguice/content/RoboLoader.java
+++ b/roboguice/src/main/java/roboguice/content/RoboLoader.java
@@ -3,13 +3,13 @@
 import roboguice.RoboGuice;
 
 import android.content.Context;
-import android.support.v4.content.Loader;
 
 /**
  * Provides injection to loaders.
+ * 
  * @author cherrydev
  */
-public abstract class RoboLoader<D> extends Loader<D> {
+public abstract class RoboLoader<D> extends android.content.Loader<D> {
 
     public RoboLoader(Context context) {
         super(context);
diff --git a/roboguice/src/main/java/roboguice/fragment/RoboDialogFragment.java b/roboguice/src/main/java/roboguice/fragment/RoboDialogFragment.java
index a795c5c87..b999f5b86 100644
--- a/roboguice/src/main/java/roboguice/fragment/RoboDialogFragment.java
+++ b/roboguice/src/main/java/roboguice/fragment/RoboDialogFragment.java
@@ -2,8 +2,8 @@
 
 import roboguice.RoboGuice;
 
+import android.app.DialogFragment;
 import android.os.Bundle;
-import android.support.v4.app.DialogFragment;
 import android.view.View;
 
 public abstract class RoboDialogFragment extends DialogFragment {
diff --git a/roboguice/src/main/java/roboguice/fragment/RoboFragment.java b/roboguice/src/main/java/roboguice/fragment/RoboFragment.java
index 88e4d2f9d..8faf2ddbc 100644
--- a/roboguice/src/main/java/roboguice/fragment/RoboFragment.java
+++ b/roboguice/src/main/java/roboguice/fragment/RoboFragment.java
@@ -2,8 +2,8 @@
 
 import roboguice.RoboGuice;
 
+import android.app.Fragment;
 import android.os.Bundle;
-import android.support.v4.app.Fragment;
 import android.view.View;
 
 public abstract class RoboFragment extends Fragment {
diff --git a/roboguice/src/main/java/roboguice/fragment/RoboListFragment.java b/roboguice/src/main/java/roboguice/fragment/RoboListFragment.java
index 896d2ee28..79c9dc3b5 100644
--- a/roboguice/src/main/java/roboguice/fragment/RoboListFragment.java
+++ b/roboguice/src/main/java/roboguice/fragment/RoboListFragment.java
@@ -2,8 +2,8 @@
 
 import roboguice.RoboGuice;
 
+import android.app.ListFragment;
 import android.os.Bundle;
-import android.support.v4.app.ListFragment;
 import android.view.View;
 
 public abstract class RoboListFragment extends ListFragment {
diff --git a/roboguice/src/main/java/roboguice/inject/ContextScopedRoboInjector.java b/roboguice/src/main/java/roboguice/inject/ContextScopedRoboInjector.java
index 84b773d3d..15a86598e 100644
--- a/roboguice/src/main/java/roboguice/inject/ContextScopedRoboInjector.java
+++ b/roboguice/src/main/java/roboguice/inject/ContextScopedRoboInjector.java
@@ -3,8 +3,8 @@
 import roboguice.inject.ViewListener.ViewMembersInjector;
 
 import android.app.Activity;
+import android.app.Fragment;
 import android.content.Context;
-import android.support.v4.app.Fragment;
 
 import com.google.inject.*;
 import com.google.inject.spi.TypeConverterBinding;
@@ -236,12 +236,12 @@ public void injectMembers(Object instance) {
         injectMembersWithoutViews(instance);
     }
 
-    public void injectMembersWithoutViews( Object instance ) {
+    public void injectMembersWithoutViews(Object instance) {
         synchronized (ContextScope.class) {
             scope.enter(context);
             try {
                 delegate.injectMembers(instance);
-            }finally {
+            } finally {
                 scope.exit(context);
             }
         }
@@ -252,7 +252,7 @@ public void injectViewMembers(Activity activity) {
         synchronized (ContextScope.class) {
             scope.enter(context);
             try {
-                if( context!=activity )
+                if (context != activity)
                     throw new UnsupportedOperationException("internal error, how did you get here?");
 
                 ViewMembersInjector.injectViews(activity);
diff --git a/roboguice/src/main/java/roboguice/inject/FragmentManagerProvider.java b/roboguice/src/main/java/roboguice/inject/FragmentManagerProvider.java
index fe8c30c76..181b94583 100644
--- a/roboguice/src/main/java/roboguice/inject/FragmentManagerProvider.java
+++ b/roboguice/src/main/java/roboguice/inject/FragmentManagerProvider.java
@@ -1,19 +1,20 @@
 package roboguice.inject;
 
 import android.app.Activity;
-import android.support.v4.app.FragmentActivity;
-import android.support.v4.app.FragmentManager;
+import android.app.FragmentManager;
 
 import com.google.inject.Inject;
 import com.google.inject.Provider;
 
 @ContextSingleton
 public class FragmentManagerProvider implements Provider<FragmentManager> {
-    @Inject protected Activity activity;
+    @Inject
+    protected Activity activity;
 
     @Override
     public FragmentManager get() {
-        // BUG only supports compat library at the moment.  Does not support honeycomb directly yet
-        return ((FragmentActivity)activity).getSupportFragmentManager();
+        // BUG only supports compat library at the moment. Does not support
+        // honeycomb directly yet
+        return ((Activity) activity).getFragmentManager();
     }
 }
diff --git a/roboguice/src/main/java/roboguice/inject/RoboInjector.java b/roboguice/src/main/java/roboguice/inject/RoboInjector.java
index 9823393fd..2e1358c6f 100644
--- a/roboguice/src/main/java/roboguice/inject/RoboInjector.java
+++ b/roboguice/src/main/java/roboguice/inject/RoboInjector.java
@@ -1,12 +1,14 @@
 package roboguice.inject;
 
 import android.app.Activity;
-import android.support.v4.app.Fragment;
+import android.app.Fragment;
 
 import com.google.inject.Injector;
 
 public interface RoboInjector extends Injector {
     void injectViewMembers(Activity activity);
+
     void injectViewMembers(Fragment fragment);
+
     void injectMembersWithoutViews(Object instance);
 }
diff --git a/roboguice/src/main/java/roboguice/test/shadow/ShadowFragment.java b/roboguice/src/main/java/roboguice/test/shadow/ShadowFragment.java
index 05e093654..62f35409b 100644
--- a/roboguice/src/main/java/roboguice/test/shadow/ShadowFragment.java
+++ b/roboguice/src/main/java/roboguice/test/shadow/ShadowFragment.java
@@ -4,18 +4,17 @@
 import com.xtremelabs.robolectric.internal.Implements;
 
 import android.app.Activity;
+import android.app.Fragment;
 import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentActivity;
 import android.view.View;
 
 @Implements(Fragment.class)
 public class ShadowFragment {
-    protected FragmentActivity activity;
+    protected Activity activity;
     protected View view;
 
     @Implementation
-    public FragmentActivity getActivity() {
+    public Activity getActivity() {
         return activity;
     }
 
@@ -25,12 +24,12 @@ public View getView() {
     }
 
     @Implementation
-    public void onViewCreated( View v, Bundle savedInstanceState ) {
+    public void onViewCreated(View v, Bundle savedInstanceState) {
         view = v;
     }
 
     @Implementation
-    public void onAttach( Activity a ) {
-        activity = (FragmentActivity)a;
+    public void onAttach(Activity a) {
+        activity = (Activity) a;
     }
 }
diff --git a/roboguice/src/main/java/roboguice/test/shadow/ShadowFragmentActivity.java b/roboguice/src/main/java/roboguice/test/shadow/ShadowFragmentActivity.java
index bb4d5f9e7..5350ac578 100644
--- a/roboguice/src/main/java/roboguice/test/shadow/ShadowFragmentActivity.java
+++ b/roboguice/src/main/java/roboguice/test/shadow/ShadowFragmentActivity.java
@@ -1,20 +1,22 @@
 package roboguice.test.shadow;
 
+import java.io.FileDescriptor;
+import java.io.PrintWriter;
+
 import com.xtremelabs.robolectric.internal.Implementation;
 import com.xtremelabs.robolectric.internal.Implements;
 import com.xtremelabs.robolectric.shadows.ShadowActivity;
 
+import android.app.Activity;
+import android.app.Fragment;
+import android.app.Fragment.SavedState;
+import android.app.FragmentManager;
+import android.app.FragmentManager.BackStackEntry;
+import android.app.FragmentManager.OnBackStackChangedListener;
+import android.app.FragmentTransaction;
 import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.Fragment.SavedState;
-import android.support.v4.app.FragmentActivity;
-import android.support.v4.app.FragmentManager;
-import android.support.v4.app.FragmentTransaction;
 
-import java.io.FileDescriptor;
-import java.io.PrintWriter;
-
-@Implements(FragmentActivity.class)
+@Implements(Activity.class)
 public class ShadowFragmentActivity extends ShadowActivity {
 
     @Implementation
@@ -225,5 +227,4 @@ public void dump(String s, FileDescriptor fileDescriptor, PrintWriter printWrite
         };
     }
 
-
 }
diff --git a/roboguice/src/test/java/roboguice/fragment/FragmentInjectionTest.java b/roboguice/src/test/java/roboguice/fragment/FragmentInjectionTest.java
index 95a918b14..53727c7cb 100644
--- a/roboguice/src/test/java/roboguice/fragment/FragmentInjectionTest.java
+++ b/roboguice/src/test/java/roboguice/fragment/FragmentInjectionTest.java
@@ -3,13 +3,14 @@
 import junit.framework.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import roboguice.activity.RoboFragmentActivity;
+
+import roboguice.activity.RoboActivity;
 import roboguice.inject.InjectView;
 import roboguice.test.RobolectricRoboTestRunner;
 
+import android.app.Activity;
 import android.content.Context;
 import android.os.Bundle;
-import android.support.v4.app.FragmentActivity;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -26,26 +27,25 @@
 
     @Test
     public void shadowFragmentActivityGetApplicationContextShouldNotReturnNull() {
-        Assert.assertNotNull(new FragmentActivity().getApplicationContext());
+        Assert.assertNotNull(new Activity().getApplicationContext());
     }
 
     @Test
     public void shouldInjectPojosAndViewsIntoFragments() {
         final ActivityA activity = new ActivityA();
         activity.onCreate(null);
-        activity.fragmentRef.onViewCreated(activity.fragmentRef.onCreateView(null,null,null), null);
+        activity.fragmentRef.onViewCreated(activity.fragmentRef.onCreateView(null, null, null), null);
 
         assertNotNull(activity.fragmentRef.ref);
         assertThat(activity.fragmentRef.v, equalTo(activity.fragmentRef.ref));
-        assertThat(activity.fragmentRef.context,equalTo((Context)activity));
+        assertThat(activity.fragmentRef.context, equalTo((Context) activity));
     }
 
-
     @Test
     public void shouldBeAbleToInjectViewsIntoActivityAndFragment() {
         final ActivityB activity = new ActivityB();
         activity.onCreate(null);
-        activity.fragmentRef.onViewCreated(activity.fragmentRef.onCreateView(null,null,null), null);
+        activity.fragmentRef.onViewCreated(activity.fragmentRef.onCreateView(null, null, null), null);
 
         assertNotNull(activity.fragmentRef.viewRef);
         assertNotNull(activity.viewRef);
@@ -53,15 +53,13 @@ public void shouldBeAbleToInjectViewsIntoActivityAndFragment() {
         assertThat(activity.v, equalTo(activity.viewRef));
     }
 
-
     @Test(expected = NullPointerException.class)
     public void shouldNotBeAbleToInjectFragmentViewsIntoActivity() {
         final ActivityC activity = new ActivityC();
         activity.onCreate(null);
-        activity.fragmentRef.onViewCreated(activity.fragmentRef.onCreateView(null,null,null), null);
+        activity.fragmentRef.onViewCreated(activity.fragmentRef.onCreateView(null, null, null), null);
     }
 
-
     @Test
     public void shouldNotCrashWhenRotatingScreen() {
         final ActivityD activity1 = new ActivityD();
@@ -69,7 +67,7 @@ public void shouldNotCrashWhenRotatingScreen() {
 
         activity1.onCreate(null);
         activity1.onResume();
-        activity1.fragmentRef.onViewCreated(activity1.fragmentRef.onCreateView(null,null,null), null);
+        activity1.fragmentRef.onViewCreated(activity1.fragmentRef.onCreateView(null, null, null), null);
 
         assertNotNull(activity1.fragmentRef.ref);
         assertThat(activity1.fragmentRef.v, equalTo(activity1.fragmentRef.ref));
@@ -78,15 +76,13 @@ public void shouldNotCrashWhenRotatingScreen() {
 
         activity2.onCreate(null); // crash here?
         activity2.onResume();
-        activity2.fragmentRef.onViewCreated(activity2.fragmentRef.onCreateView(null,null,null), null);
+        activity2.fragmentRef.onViewCreated(activity2.fragmentRef.onCreateView(null, null, null), null);
 
         assertNotNull(activity2.fragmentRef.ref);
         assertThat(activity2.fragmentRef.v, equalTo(activity2.fragmentRef.ref));
     }
 
-
-
-    public static class ActivityA extends RoboFragmentActivity {
+    public static class ActivityA extends RoboActivity {
         FragmentA fragmentRef;
 
         @Override
@@ -100,8 +96,10 @@ protected void onCreate(Bundle savedInstanceState) {
         }
 
         public static class FragmentA extends RoboFragment {
-            @InjectView(101) View v;
-            @Inject Context context;
+            @InjectView(101)
+            View v;
+            @Inject
+            Context context;
 
             View ref;
 
@@ -121,9 +119,9 @@ public void onCreate(Bundle savedInstanceState) {
 
     }
 
-
-    public static class ActivityB extends RoboFragmentActivity {
-        @InjectView(100) View v;
+    public static class ActivityB extends RoboActivity {
+        @InjectView(100)
+        View v;
 
         View viewRef;
         FragmentB fragmentRef;
@@ -132,7 +130,7 @@ public void onCreate(Bundle savedInstanceState) {
         protected void onCreate(Bundle savedInstanceState) {
             super.onCreate(savedInstanceState);
 
-            viewRef =  new View(this);
+            viewRef = new View(this);
             viewRef.setId(100);
             setContentView(viewRef);
 
@@ -143,7 +141,8 @@ protected void onCreate(Bundle savedInstanceState) {
         }
 
         public static class FragmentB extends RoboFragment {
-            @InjectView(101) View v;
+            @InjectView(101)
+            View v;
 
             View viewRef;
 
@@ -163,8 +162,9 @@ public void onCreate(Bundle savedInstanceState) {
 
     }
 
-    public static class ActivityC extends RoboFragmentActivity {
-        @InjectView(101) View v;
+    public static class ActivityC extends RoboActivity {
+        @InjectView(101)
+        View v;
 
         View viewRef;
         FragmentC fragmentRef;
@@ -172,8 +172,7 @@ public void onCreate(Bundle savedInstanceState) {
         @Override
         protected void onCreate(Bundle savedInstanceState) {
             super.onCreate(savedInstanceState);
-            setContentView( new View(this) );
-
+            setContentView(new View(this));
 
             fragmentRef = new FragmentC();
             fragmentRef.onAttach(this);
@@ -182,7 +181,8 @@ protected void onCreate(Bundle savedInstanceState) {
         }
 
         public static class FragmentC extends RoboFragment {
-            @InjectView(101) View v;
+            @InjectView(101)
+            View v;
 
             View viewRef;
 
@@ -196,9 +196,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
 
     }
 
-
-
-    public static class ActivityD extends RoboFragmentActivity {
+    public static class ActivityD extends RoboActivity {
         FragmentD fragmentRef;
 
         @Override
@@ -210,7 +208,7 @@ protected void onCreate(Bundle savedInstanceState) {
             fragmentRef.onCreate(null);
 
             setContentView(new FrameLayout(this));
-            
+
         }
 
         @Override
@@ -234,7 +232,8 @@ protected void onDestroy() {
         }
 
         public static class FragmentD extends RoboFragment {
-            @InjectView(101) View v;
+            @InjectView(101)
+            View v;
 
             View ref;
 
