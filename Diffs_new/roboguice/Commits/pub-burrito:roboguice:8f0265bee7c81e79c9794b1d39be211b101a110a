diff --git a/roboguice/src/main/java/roboguice/android/DroidGuice.java b/roboguice/src/main/java/roboguice/android/DroidGuice.java
index 193497092..9e204a0ed 100644
--- a/roboguice/src/main/java/roboguice/android/DroidGuice.java
+++ b/roboguice/src/main/java/roboguice/android/DroidGuice.java
@@ -5,9 +5,9 @@
 import java.util.WeakHashMap;
 
 import roboguice.android.config.AndroidDefaultRoboModule;
+import roboguice.android.inject.AndroidContextScope;
+import roboguice.android.inject.AndroidContextScopedRoboInjector;
 import roboguice.android.inject.AndroidResourceListener;
-import roboguice.android.inject.ContextScope;
-import roboguice.android.inject.ContextScopedRoboInjector;
 import roboguice.android.inject.RoboInjector;
 import roboguice.android.inject.ViewListener;
 import roboguice.base.RoboGuice;
@@ -72,7 +72,7 @@ private DroidGuice() {
     @Override
     public RoboInjector getInjector( Context context ) {
         final Application application = (Application)context.getApplicationContext();
-        return new ContextScopedRoboInjector(context, getScopedInjector(application), getViewListener(application));
+        return new AndroidContextScopedRoboInjector(context, getScopedInjector(application), getViewListener(application));
     }
     
     @Override
@@ -91,7 +91,7 @@ protected AndroidResourceListener getResourceListener(Application application) {
 
     @Override
     public AndroidDefaultRoboModule newDefaultRoboModule( Application application ) {
-        return new AndroidDefaultRoboModule(application, new ContextScope(application), getViewListener(application), getResourceListener(application));
+        return new AndroidDefaultRoboModule(application, new AndroidContextScope(application), getViewListener(application), getResourceListener(application));
     }
 
     protected ViewListener getViewListener( final Application application ) {
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboAccountAuthenticatorActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboAccountAuthenticatorActivity.java
index f80da96c3..5ba8ad0fe 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboAccountAuthenticatorActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboAccountAuthenticatorActivity.java
@@ -34,14 +34,15 @@
 import roboguice.android.activity.event.OnStopEvent;
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
-import roboguice.android.util.RoboContext;
 import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
+import roboguice.base.util.RoboContext;
 
 import com.google.inject.Inject;
 import com.google.inject.Key;
 
 import android.accounts.AccountAuthenticatorActivity;
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
@@ -52,7 +53,7 @@
  *
  * @author Marcus Better
  */
-public class RoboAccountAuthenticatorActivity extends AccountAuthenticatorActivity implements RoboContext {
+public class RoboAccountAuthenticatorActivity extends AccountAuthenticatorActivity implements RoboContext<Context> {
     protected EventManager eventManager;
     protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
 
@@ -143,4 +144,5 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
     public Map<Key<?>, Object> getScopedObjectMap() {
         return scopedObjects;
     }
+
 }
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboActivity.java
index 0d8124cf8..be265b9e0 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboActivity.java
@@ -32,15 +32,16 @@
 import roboguice.android.activity.event.OnStopEvent;
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
-import roboguice.android.util.RoboContext;
 import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
+import roboguice.base.util.RoboContext;
 
 import com.google.inject.Inject;
 import com.google.inject.Injector;
 import com.google.inject.Key;
 
 import android.app.Activity;
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
@@ -76,7 +77,7 @@
  * 
  * @author Mike Burton
  */
-public class RoboActivity extends Activity implements RoboContext {
+public class RoboActivity extends Activity implements RoboContext<Context> {
     protected EventManager eventManager;
     protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
 
@@ -167,4 +168,5 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
     public Map<Key<?>, Object> getScopedObjectMap() {
         return scopedObjects;
     }
+
 }
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboActivityGroup.java b/roboguice/src/main/java/roboguice/android/activity/RoboActivityGroup.java
index b9a6a4676..964d9a0d0 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboActivityGroup.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboActivityGroup.java
@@ -32,14 +32,15 @@
 import roboguice.android.activity.event.OnStopEvent;
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
-import roboguice.android.util.RoboContext;
 import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
+import roboguice.base.util.RoboContext;
 
 import com.google.inject.Inject;
 import com.google.inject.Key;
 
 import android.app.ActivityGroup;
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
@@ -52,7 +53,7 @@
  * 
  * @author Toly Pochkin
  */
-public class RoboActivityGroup extends ActivityGroup implements RoboContext {
+public class RoboActivityGroup extends ActivityGroup implements RoboContext<Context> {
     protected EventManager eventManager;
     protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboExpandableListActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboExpandableListActivity.java
index 8273199fb..1a17ee3cb 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboExpandableListActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboExpandableListActivity.java
@@ -32,14 +32,15 @@
 import roboguice.android.activity.event.OnStopEvent;
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
-import roboguice.android.util.RoboContext;
 import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
+import roboguice.base.util.RoboContext;
 
 import com.google.inject.Inject;
 import com.google.inject.Key;
 
 import android.app.ExpandableListActivity;
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
@@ -53,7 +54,7 @@
  * 
  * @author Mike Burton
  */
-public class RoboExpandableListActivity extends ExpandableListActivity implements RoboContext {
+public class RoboExpandableListActivity extends ExpandableListActivity implements RoboContext<Context> {
     protected EventManager eventManager;
     protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboFragmentActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboFragmentActivity.java
index 35b310e2c..9d31b6487 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboFragmentActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboFragmentActivity.java
@@ -32,19 +32,20 @@
 import roboguice.android.activity.event.OnStopEvent;
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
-import roboguice.android.util.RoboContext;
 import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
+import roboguice.base.util.RoboContext;
 
 import com.google.inject.Inject;
 import com.google.inject.Key;
 
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
 import android.support.v4.app.FragmentActivity;
 
-public class RoboFragmentActivity extends FragmentActivity implements RoboContext {
+public class RoboFragmentActivity extends FragmentActivity implements RoboContext<Context> {
     protected EventManager eventManager;
     protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboLauncherActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboLauncherActivity.java
index b46d69260..4adf899f4 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboLauncherActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboLauncherActivity.java
@@ -32,14 +32,15 @@
 import roboguice.android.activity.event.OnStopEvent;
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
-import roboguice.android.util.RoboContext;
 import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
+import roboguice.base.util.RoboContext;
 
 import com.google.inject.Inject;
 import com.google.inject.Key;
 
 import android.app.LauncherActivity;
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
@@ -52,7 +53,7 @@
  * 
  * @author Toly Pochkin
  */
-public class RoboLauncherActivity extends LauncherActivity implements RoboContext {
+public class RoboLauncherActivity extends LauncherActivity implements RoboContext<Context> {
     protected EventManager eventManager;
     protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboListActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboListActivity.java
index 330ef9176..69e6dd885 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboListActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboListActivity.java
@@ -32,14 +32,15 @@
 import roboguice.android.activity.event.OnStopEvent;
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
-import roboguice.android.util.RoboContext;
 import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
+import roboguice.base.util.RoboContext;
 
 import com.google.inject.Inject;
 import com.google.inject.Key;
 
 import android.app.ListActivity;
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
@@ -52,7 +53,7 @@
  * 
  * @author Mike Burton
  */
-public class RoboListActivity extends ListActivity implements RoboContext {
+public class RoboListActivity extends ListActivity implements RoboContext<Context> {
     protected EventManager eventManager;
     protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboMapActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboMapActivity.java
index 843523a5d..6bef8945a 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboMapActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboMapActivity.java
@@ -32,14 +32,15 @@
 import roboguice.android.activity.event.OnStopEvent;
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
-import roboguice.android.util.RoboContext;
 import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
+import roboguice.base.util.RoboContext;
 
 import com.google.android.maps.MapActivity;
 import com.google.inject.Inject;
 import com.google.inject.Key;
 
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
@@ -52,7 +53,7 @@
  * 
  * @author Mike Burton
  */
-public abstract class RoboMapActivity extends MapActivity implements RoboContext {
+public abstract class RoboMapActivity extends MapActivity implements RoboContext<Context> {
     protected EventManager eventManager;
     protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboPreferenceActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboPreferenceActivity.java
index e1b1c6d0e..9538c001b 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboPreferenceActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboPreferenceActivity.java
@@ -30,17 +30,18 @@
 import roboguice.android.activity.event.OnResumeEvent;
 import roboguice.android.activity.event.OnStartEvent;
 import roboguice.android.activity.event.OnStopEvent;
+import roboguice.android.inject.AndroidContextScope;
 import roboguice.android.inject.ContentViewListener;
-import roboguice.android.inject.ContextScope;
 import roboguice.android.inject.PreferenceListener;
 import roboguice.android.inject.RoboInjector;
-import roboguice.android.util.RoboContext;
 import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
+import roboguice.base.util.RoboContext;
 
 import com.google.inject.Inject;
 import com.google.inject.Key;
 
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
@@ -60,7 +61,7 @@
  * @author Rodrigo Damazio
  * @author Mike Burton
  */
-public abstract class RoboPreferenceActivity extends PreferenceActivity implements RoboContext {
+public abstract class RoboPreferenceActivity extends PreferenceActivity implements RoboContext<Context> {
     protected EventManager eventManager;
     protected PreferenceListener preferenceListener;
     protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
@@ -83,8 +84,8 @@ protected void onCreate(Bundle savedInstanceState) {
     public void setPreferenceScreen(PreferenceScreen preferenceScreen) {
         super.setPreferenceScreen(preferenceScreen);
 
-        final ContextScope scope = RoboGuice.<DroidGuice>instance().getInjector(this).getInstance(ContextScope.class);
-        synchronized (ContextScope.class) {
+        final AndroidContextScope scope = RoboGuice.<DroidGuice>instance().getInjector(this).getInstance(AndroidContextScope.class);
+        synchronized (AndroidContextScope.class) {
             scope.enter(this);
             try {
                 preferenceListener.injectPreferenceViews();
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboSplashActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboSplashActivity.java
index 2f63d31c6..0d5525508 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboSplashActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboSplashActivity.java
@@ -63,7 +63,6 @@ public void run() {
      * 
      * @param app
      */
-    @SuppressWarnings({"UnusedParameters"})
     protected void doStuffInBackground(Application app) {
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboTabActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboTabActivity.java
index 0b6fb1ec8..aebed50d2 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboTabActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboTabActivity.java
@@ -32,14 +32,15 @@
 import roboguice.android.activity.event.OnStopEvent;
 import roboguice.android.inject.ContentViewListener;
 import roboguice.android.inject.RoboInjector;
-import roboguice.android.util.RoboContext;
 import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
+import roboguice.base.util.RoboContext;
 
 import com.google.inject.Inject;
 import com.google.inject.Key;
 
 import android.app.TabActivity;
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
@@ -52,7 +53,7 @@
  * 
  * @author Toly Pochkin
  */
-public class RoboTabActivity extends TabActivity implements RoboContext {
+public class RoboTabActivity extends TabActivity implements RoboContext<Context> {
     protected EventManager eventManager;
     protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
 
diff --git a/roboguice/src/main/java/roboguice/android/config/AndroidDefaultRoboModule.java b/roboguice/src/main/java/roboguice/android/config/AndroidDefaultRoboModule.java
index d1a26263b..1db5409c3 100644
--- a/roboguice/src/main/java/roboguice/android/config/AndroidDefaultRoboModule.java
+++ b/roboguice/src/main/java/roboguice/android/config/AndroidDefaultRoboModule.java
@@ -4,10 +4,10 @@
 import roboguice.android.event.ObservesTypeListener;
 import roboguice.android.event.eventListener.factory.EventListenerThreadingDecorator;
 import roboguice.android.inject.AccountManagerProvider;
+import roboguice.android.inject.AndroidContextScope;
 import roboguice.android.inject.AndroidResourceListener;
 import roboguice.android.inject.AssetManagerProvider;
 import roboguice.android.inject.ContentResolverProvider;
-import roboguice.android.inject.ContextScope;
 import roboguice.android.inject.ContextScopedSystemServiceProvider;
 import roboguice.android.inject.ExtrasListener;
 import roboguice.android.inject.FragmentManagerProvider;
@@ -24,6 +24,7 @@
 import roboguice.base.config.DefaultRoboModule;
 import roboguice.base.event.EventManager;
 import roboguice.base.inject.ContextSingleton;
+import roboguice.base.inject.RoboScope;
 import roboguice.base.util.Strings;
 import roboguice.base.util.logging.BaseConfig;
 import roboguice.base.util.logging.Ln;
@@ -107,11 +108,11 @@
 
 
     protected Application application;
-    protected ContextScope contextScope;
+    protected AndroidContextScope contextScope;
     protected ViewListener viewListener;
 
 
-    public AndroidDefaultRoboModule(final Application application, ContextScope contextScope, ViewListener viewListener, AndroidResourceListener resourceListener) {
+    public AndroidDefaultRoboModule(final Application application, AndroidContextScope contextScope, ViewListener viewListener, AndroidResourceListener resourceListener) {
         
         super(resourceListener);
         this.application = application;
@@ -149,11 +150,10 @@ protected void configure() {
         bind(ViewListener.class).toInstance(viewListener);
         bind(PreferenceListener.class).toInstance(preferenceListener);
 
-
-
         // ContextSingleton bindings
         bindScope(ContextSingleton.class, contextScope);
-        bind(ContextScope.class).toInstance(contextScope);
+        bind(RoboScope.class).toInstance(contextScope);
+        bind(AndroidContextScope.class).toInstance(contextScope);
         bind(AssetManager.class).toProvider(AssetManagerProvider.class);
         bind(Context.class).toProvider(NullProvider.<Context>instance()).in(ContextSingleton.class);
         bind(Activity.class).toProvider(NullProvider.<Activity>instance()).in(ContextSingleton.class);
diff --git a/roboguice/src/main/java/roboguice/android/content/RoboAsyncTaskLoader.java b/roboguice/src/main/java/roboguice/android/content/RoboAsyncTaskLoader.java
index 4c914c0eb..cc861267e 100644
--- a/roboguice/src/main/java/roboguice/android/content/RoboAsyncTaskLoader.java
+++ b/roboguice/src/main/java/roboguice/android/content/RoboAsyncTaskLoader.java
@@ -1,6 +1,7 @@
 package roboguice.android.content;
 
 import roboguice.android.DroidGuice;
+import roboguice.base.RoboGuice;
 
 import android.content.Context;
 import android.support.v4.content.AsyncTaskLoader;
@@ -13,7 +14,7 @@
 
     public RoboAsyncTaskLoader(Context context) {
         super(context);
-        DroidGuice.instance().injectMembers(context, this);
+        RoboGuice.<DroidGuice>instance().injectMembers(context, this);
     }
     
 }
diff --git a/roboguice/src/main/java/roboguice/android/content/RoboContentProvider.java b/roboguice/src/main/java/roboguice/android/content/RoboContentProvider.java
index e1e7a4264..e6f859dea 100644
--- a/roboguice/src/main/java/roboguice/android/content/RoboContentProvider.java
+++ b/roboguice/src/main/java/roboguice/android/content/RoboContentProvider.java
@@ -1,6 +1,7 @@
 package roboguice.android.content;
 
 import roboguice.android.DroidGuice;
+import roboguice.base.RoboGuice;
 
 import android.content.ContentProvider;
 
@@ -14,7 +15,7 @@
 
     @Override
     public boolean onCreate() {
-        DroidGuice.instance().getInjector(getContext()).injectMembers(this);
+        RoboGuice.<DroidGuice>instance().getInjector(getContext()).injectMembers(this);
         return true;
     }
 }
diff --git a/roboguice/src/main/java/roboguice/android/content/RoboLoader.java b/roboguice/src/main/java/roboguice/android/content/RoboLoader.java
index fead45d2e..04ab791e8 100644
--- a/roboguice/src/main/java/roboguice/android/content/RoboLoader.java
+++ b/roboguice/src/main/java/roboguice/android/content/RoboLoader.java
@@ -1,6 +1,7 @@
 package roboguice.android.content;
 
 import roboguice.android.DroidGuice;
+import roboguice.base.RoboGuice;
 
 import android.content.Context;
 import android.support.v4.content.Loader;
@@ -13,7 +14,7 @@
 
     public RoboLoader(Context context) {
         super(context);
-        DroidGuice.instance().injectMembers(context, this);
+        RoboGuice.<DroidGuice>instance().injectMembers(context, this);
     }
 
 }
diff --git a/roboguice/src/main/java/roboguice/android/event/javaassist/RuntimeSupport.java b/roboguice/src/main/java/roboguice/android/event/javaassist/RuntimeSupport.java
index 48f3221c6..55e445244 100644
--- a/roboguice/src/main/java/roboguice/android/event/javaassist/RuntimeSupport.java
+++ b/roboguice/src/main/java/roboguice/android/event/javaassist/RuntimeSupport.java
@@ -21,6 +21,7 @@
  * Runtime support routines that the classes generated by ProxyFactory use.
  *
  */
+@SuppressWarnings("rawtypes")
 public class RuntimeSupport {
 
     //Respectfully Borrowed from the JavaAssist library, trimmed for only needed pieces.
diff --git a/roboguice/src/main/java/roboguice/android/inject/AndroidContextScope.java b/roboguice/src/main/java/roboguice/android/inject/AndroidContextScope.java
new file mode 100644
index 000000000..db599052e
--- /dev/null
+++ b/roboguice/src/main/java/roboguice/android/inject/AndroidContextScope.java
@@ -0,0 +1,73 @@
+/*
+ * Copyright 2009 Michael Burton
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions
+ * and limitations under the License.
+ */
+package roboguice.android.inject;
+
+import java.util.Map;
+
+import roboguice.base.inject.RoboScope;
+import roboguice.base.util.RoboContext;
+
+import com.google.inject.Key;
+
+import android.app.Application;
+import android.content.Context;
+import android.content.ContextWrapper;
+
+/**
+ * Scopes the injector based on the current context.
+ *
+ * Any usage of this class must call #enter(Context) before performing any operations with the
+ * injector, and do so within a synchronized block on the ContextScope.class, eg:
+ *
+ * synchronized(ContextScope.class) {
+ *     scope.enter(context);
+ *
+ *     // do something, eg.
+ *     // injector.injectMembers(this);
+ * }
+ *
+ * If you're using ContextScopedRoboInjector (which is the RoboGuice default), this is done for you automatically.
+ *
+ * If you're trying to use a Provider, you must either use ContextScopedProvider instead, or do your own synchronization
+ * and scope.enter() call.
+ *
+ * @see ContextScopedRoboInjector
+ * @author Mike Burton
+ */
+public class AndroidContextScope extends RoboScope<Application, Context> {
+    
+    public AndroidContextScope(Application application) {
+        super(application, application);
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    protected Map<Key<?>,Object> getScopedObjectMap(final Context origContext) {
+        Context context = origContext;
+        while( !(context instanceof RoboContext) && !(context instanceof Application) && context instanceof ContextWrapper )
+            context = ((ContextWrapper)context).getBaseContext();
+
+        // Special case for application so that users don't have to manually set up application subclasses
+        if( context instanceof Application )
+            return applicationScopedObjects;
+
+
+        if( !(context instanceof RoboContext) )
+            throw new IllegalArgumentException(String.format("%s does not appear to be a RoboGuice context (instanceof RoboContext)",origContext));
+
+        return ((RoboContext<Context>)context).getScopedObjectMap();
+    }
+}
diff --git a/roboguice/src/main/java/roboguice/android/inject/ContextScopedRoboInjector.java b/roboguice/src/main/java/roboguice/android/inject/AndroidContextScopedRoboInjector.java
similarity index 83%
rename from roboguice/src/main/java/roboguice/android/inject/ContextScopedRoboInjector.java
rename to roboguice/src/main/java/roboguice/android/inject/AndroidContextScopedRoboInjector.java
index 3b1a23bb0..e885622b6 100644
--- a/roboguice/src/main/java/roboguice/android/inject/ContextScopedRoboInjector.java
+++ b/roboguice/src/main/java/roboguice/android/inject/AndroidContextScopedRoboInjector.java
@@ -21,22 +21,22 @@
 import android.content.Context;
 import android.support.v4.app.Fragment;
 
-public class ContextScopedRoboInjector implements RoboInjector {
+public class AndroidContextScopedRoboInjector implements RoboInjector {
     protected Injector delegate;
     protected Context context;
-    protected ContextScope scope;
+    protected AndroidContextScope scope;
     protected ViewListener viewListener;
 
-    public ContextScopedRoboInjector(Context context, Injector applicationInjector, ViewListener viewListener) {
+    public AndroidContextScopedRoboInjector(Context context, Injector applicationInjector, ViewListener viewListener) {
         this.delegate = applicationInjector;
         this.context = context;
         this.viewListener = viewListener;
-        this.scope = delegate.getInstance(ContextScope.class);
+        this.scope = delegate.getInstance(AndroidContextScope.class);
     }
 
     @Override
     public Injector createChildInjector(Iterable<? extends Module> modules) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.createChildInjector(modules);
@@ -48,7 +48,7 @@ public Injector createChildInjector(Iterable<? extends Module> modules) {
 
     @Override
     public Injector createChildInjector(Module... modules) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.createChildInjector(modules);
@@ -60,7 +60,7 @@ public Injector createChildInjector(Module... modules) {
 
     @Override
     public <T> List<Binding<T>> findBindingsByType(TypeLiteral<T> type) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.findBindingsByType(type);
@@ -72,7 +72,7 @@ public Injector createChildInjector(Module... modules) {
 
     @Override
     public Map<Key<?>, Binding<?>> getAllBindings() {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getAllBindings();
@@ -84,7 +84,7 @@ public Injector createChildInjector(Module... modules) {
 
     @Override
     public <T> Binding<T> getBinding(Key<T> key) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getBinding(key);
@@ -96,7 +96,7 @@ public Injector createChildInjector(Module... modules) {
 
     @Override
     public <T> Binding<T> getBinding(Class<T> type) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getBinding(type);
@@ -108,7 +108,7 @@ public Injector createChildInjector(Module... modules) {
 
     @Override
     public Map<Key<?>, Binding<?>> getBindings() {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getBindings();
@@ -120,7 +120,7 @@ public Injector createChildInjector(Module... modules) {
 
     @Override
     public <T> Binding<T> getExistingBinding(Key<T> key) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getExistingBinding(key);
@@ -132,7 +132,7 @@ public Injector createChildInjector(Module... modules) {
 
     @Override
     public <T> T getInstance(Key<T> key) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getInstance(key);
@@ -144,7 +144,7 @@ public Injector createChildInjector(Module... modules) {
 
     @Override
     public <T> T getInstance(Class<T> type) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getInstance(type);
@@ -156,7 +156,7 @@ public Injector createChildInjector(Module... modules) {
 
     @Override
     public <T> MembersInjector<T> getMembersInjector(Class<T> type) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getMembersInjector(type);
@@ -168,7 +168,7 @@ public Injector createChildInjector(Module... modules) {
 
     @Override
     public <T> MembersInjector<T> getMembersInjector(TypeLiteral<T> typeLiteral) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getMembersInjector(typeLiteral);
@@ -180,7 +180,7 @@ public Injector createChildInjector(Module... modules) {
 
     @Override
     public Injector getParent() {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getParent();
@@ -192,7 +192,7 @@ public Injector getParent() {
 
     @Override
     public <T> Provider<T> getProvider(Key<T> key) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getProvider(key);
@@ -204,7 +204,7 @@ public Injector getParent() {
 
     @Override
     public <T> Provider<T> getProvider(Class<T> type) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getProvider(type);
@@ -216,7 +216,7 @@ public Injector getParent() {
 
     @Override
     public Map<Class<? extends Annotation>, Scope> getScopeBindings() {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getScopeBindings();
@@ -228,7 +228,7 @@ public Injector getParent() {
 
     @Override
     public Set<TypeConverterBinding> getTypeConverterBindings() {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 return delegate.getTypeConverterBindings();
@@ -244,7 +244,7 @@ public void injectMembers(Object instance) {
     }
 
     public void injectMembersWithoutViews( Object instance ) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 delegate.injectMembers(instance);
@@ -256,7 +256,7 @@ public void injectMembersWithoutViews( Object instance ) {
 
     @Override
     public void injectViewMembers(Activity activity) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 if( context!=activity )
@@ -271,7 +271,7 @@ public void injectViewMembers(Activity activity) {
 
     @Override
     public void injectViewMembers(Fragment fragment) {
-        synchronized (ContextScope.class) {
+        synchronized (AndroidContextScope.class) {
             scope.enter(context);
             try {
                 ViewMembersInjector.injectViews(fragment);
diff --git a/roboguice/src/main/java/roboguice/android/inject/ContentViewListener.java b/roboguice/src/main/java/roboguice/android/inject/ContentViewListener.java
index fc400867b..fc6af9cc2 100644
--- a/roboguice/src/main/java/roboguice/android/inject/ContentViewListener.java
+++ b/roboguice/src/main/java/roboguice/android/inject/ContentViewListener.java
@@ -9,7 +9,6 @@
 import android.app.Activity;
 import android.content.Context;
 
-@SuppressWarnings("UnusedParameters")
 @ContextSingleton
 public class ContentViewListener {
     @Inject protected Activity activity;
diff --git a/roboguice/src/main/java/roboguice/android/inject/ContextScope.java b/roboguice/src/main/java/roboguice/android/inject/ContextScope.java
deleted file mode 100644
index 39e3f8480..000000000
--- a/roboguice/src/main/java/roboguice/android/inject/ContextScope.java
+++ /dev/null
@@ -1,151 +0,0 @@
-/*
- * Copyright 2009 Michael Burton
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions
- * and limitations under the License.
- */
-package roboguice.android.inject;
-
-import java.lang.ref.WeakReference;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Stack;
-
-import roboguice.android.util.RoboContext;
-
-import com.google.inject.Key;
-import com.google.inject.Provider;
-import com.google.inject.Scope;
-
-import android.app.Application;
-import android.content.Context;
-import android.content.ContextWrapper;
-
-/**
- * Scopes the injector based on the current context.
- *
- * Any usage of this class must call #enter(Context) before performing any operations with the
- * injector, and do so within a synchronized block on the ContextScope.class, eg:
- *
- * synchronized(ContextScope.class) {
- *     scope.enter(context);
- *
- *     // do something, eg.
- *     // injector.injectMembers(this);
- * }
- *
- * If you're using ContextScopedRoboInjector (which is the RoboGuice default), this is done for you automatically.
- *
- * If you're trying to use a Provider, you must either use ContextScopedProvider instead, or do your own synchronization
- * and scope.enter() call.
- *
- * @see ContextScopedRoboInjector
- * @author Mike Burton
- */
-public class ContextScope implements Scope {
-    protected ThreadLocal<Stack<WeakReference<Context>>> contextThreadLocal = new ThreadLocal<Stack<WeakReference<Context>>>();
-    protected Map<Key<?>,Object> applicationScopedObjects = new HashMap<Key<?>, Object>();
-    protected Application application;
-
-    public ContextScope(Application application) {
-        this.application = application;
-        enter(application);
-    }
-
-    /**
-     * You MUST perform any injector operations inside a synchronized(ContextScope.class) block that starts with
-     * scope.enter(context) if working in a multithreaded environment
-     *
-     * @see ContextScope
-     * @see ContextScopedRoboInjector
-     * @see ContextScopedProvider
-     * @param context the context to enter
-     */
-    public void enter(Context context) {
-
-        // BUG synchronizing on ContextScope.class may be overly conservative
-        synchronized (ContextScope.class) {
-
-            final Stack<WeakReference<Context>> stack = getContextStack();
-            final Map<Key<?>,Object> map = getScopedObjectMap(context);
-
-            // Mark this thread as for this context
-            stack.push(new WeakReference<Context>(context));
-
-            // Add the context to the scope for key Context, Activity, etc.
-            Class<?> c = context.getClass();
-            do {
-                map.put(Key.get(c), context);
-                c = c.getSuperclass();
-            } while( c!=Object.class );
-        }
-
-    }
-
-    public void exit(Context context) {
-        synchronized (ContextScope.class) {
-            final Stack<WeakReference<Context>> stack = getContextStack();
-            final Context c = stack.pop().get();
-            if( c!=null && c!=context )
-                throw new IllegalArgumentException(String.format("Scope for %s must be opened before it can be closed",context));
-        }
-    }
-
-    public <T> Provider<T> scope(final Key<T> key, final Provider<T> unscoped) {
-        return new Provider<T>() {
-            public T get() {
-                synchronized (ContextScope.class) {
-                    final Stack<WeakReference<Context>> stack = getContextStack();
-                    final Context context = stack.peek().get(); // The context should never be finalized as long as the provider is still in memory
-                    final Map<Key<?>, Object> objectsForScope = getScopedObjectMap(context);
-                    if( objectsForScope==null )
-                        return null;  // May want to consider throwing an exception here (if provider is used after onDestroy())
-
-                    @SuppressWarnings({"unchecked"}) T current = (T) objectsForScope.get(key);
-                    if (current==null && !objectsForScope.containsKey(key)) {
-                        current = unscoped.get();
-                        objectsForScope.put(key, current);
-                    }
-
-                    return current;
-                }
-            }
-        };
-
-    }
-
-
-    public Stack<WeakReference<Context>> getContextStack() {
-        Stack<WeakReference<Context>> stack = contextThreadLocal.get();
-        if( stack==null ) {
-            stack = new Stack<WeakReference<Context>>();
-            contextThreadLocal.set(stack);
-        }
-        return stack;
-    }
-
-    protected Map<Key<?>,Object> getScopedObjectMap(final Context origContext) {
-        Context context = origContext;
-        while( !(context instanceof RoboContext) && !(context instanceof Application) && context instanceof ContextWrapper )
-            context = ((ContextWrapper)context).getBaseContext();
-
-        // Special case for application so that users don't have to manually set up application subclasses
-        if( context instanceof Application )
-            return applicationScopedObjects;
-
-
-        if( !(context instanceof RoboContext) )
-            throw new IllegalArgumentException(String.format("%s does not appear to be a RoboGuice context (instanceof RoboContext)",origContext));
-
-        return ((RoboContext)context).getScopedObjectMap();
-    }
-}
diff --git a/roboguice/src/main/java/roboguice/android/inject/ExtrasListener.java b/roboguice/src/main/java/roboguice/android/inject/ExtrasListener.java
index 4ead36f14..d8921332a 100644
--- a/roboguice/src/main/java/roboguice/android/inject/ExtrasListener.java
+++ b/roboguice/src/main/java/roboguice/android/inject/ExtrasListener.java
@@ -21,6 +21,7 @@
 import java.util.Map;
 
 import roboguice.android.DroidGuice;
+import roboguice.base.RoboGuice;
 import roboguice.base.inject.Nullable;
 
 import com.google.inject.Binding;
@@ -102,7 +103,7 @@ public void injectMembers(T instance) {
 
             value = extras.get(id);
 
-            value = convert(field, value, DroidGuice.instance().getScopedInjector(activity.getApplication()));
+            value = convert(field, value, RoboGuice.<DroidGuice>instance().getScopedInjector(activity.getApplication()));
 
             /*
              * Please notice : null checking is done AFTER conversion. Having
@@ -131,7 +132,7 @@ public void injectMembers(T instance) {
             }
         }
 
-        @SuppressWarnings("unchecked")
+        @SuppressWarnings({ "unchecked", "rawtypes" })
         protected Object convert(Field field, Object value, Injector injector) {
 
             // Don't try to convert null or primitives
diff --git a/roboguice/src/main/java/roboguice/android/inject/PreferenceListener.java b/roboguice/src/main/java/roboguice/android/inject/PreferenceListener.java
index 096b767d4..e7f5c49a1 100644
--- a/roboguice/src/main/java/roboguice/android/inject/PreferenceListener.java
+++ b/roboguice/src/main/java/roboguice/android/inject/PreferenceListener.java
@@ -41,9 +41,9 @@
 
     protected Provider<Context> contextProvider;
     protected Application application;
-    protected ContextScope scope;
+    protected AndroidContextScope scope;
 
-    public PreferenceListener(Provider<Context> contextProvider, Application application, ContextScope scope) {
+    public PreferenceListener(Provider<Context> contextProvider, Application application, AndroidContextScope scope) {
         this.contextProvider = contextProvider;
         this.application = application;
         this.scope = scope;
@@ -76,10 +76,10 @@ public void injectPreferenceViews() {
         protected Field field;
         protected Provider<Context> contextProvider;
         protected InjectPreference annotation;
-        protected ContextScope scope;
+        protected AndroidContextScope scope;
         protected WeakReference<T> instanceRef;
 
-        public PreferenceMembersInjector(Field field, Provider<Context> contextProvider, InjectPreference annotation, ContextScope scope) {
+        public PreferenceMembersInjector(Field field, Provider<Context> contextProvider, InjectPreference annotation, AndroidContextScope scope) {
             this.field = field;
             this.annotation = annotation;
             this.contextProvider = contextProvider;
diff --git a/roboguice/src/main/java/roboguice/android/inject/ViewListener.java b/roboguice/src/main/java/roboguice/android/inject/ViewListener.java
index cb2a10818..58c3a6cad 100644
--- a/roboguice/src/main/java/roboguice/android/inject/ViewListener.java
+++ b/roboguice/src/main/java/roboguice/android/inject/ViewListener.java
@@ -41,8 +41,8 @@
 @Singleton
 public class ViewListener implements TypeListener {
     
-    protected static Class fragmentClass = null;
-    protected static Class fragmentManagerClass = null;
+    protected static Class<?> fragmentClass = null;
+    protected static Class<?> fragmentManagerClass = null;
     protected static Method fragmentGetViewMethod = null;
     protected static Method fragmentFindFragmentByIdMethod = null;
     protected static Method fragmentFindFragmentByTagMethod = null;
@@ -88,6 +88,7 @@ else if( Context.class.isAssignableFrom(field.getDeclaringClass()) && !Activity.
     /**
      * This class gets twice as many providers as necessary to do its job, look into optimizations in the future if this is a bottleneck
      */
+    @SuppressWarnings("rawtypes")
     public static class ViewMembersInjector<T> implements MembersInjector<T> {
         protected static WeakHashMap<Object,ArrayList<ViewMembersInjector<?>>> viewMembersInjectors = new WeakHashMap<Object, ArrayList<ViewMembersInjector<?>>>();
 
@@ -156,6 +157,7 @@ public void reallyInjectMembers( Object activityOrFragment ) {
          *
          * @param activityOrFragment an activity or fragment
          */
+        @SuppressWarnings("unchecked")
         protected void reallyInjectMemberViews(Object activityOrFragment) {
 
             final T instance = fragmentClass!=null && fragmentClass.isInstance(activityOrFragment) ? (T)activityOrFragment : instanceRef.get();
diff --git a/roboguice/src/main/java/roboguice/android/receiver/RoboBroadcastReceiver.java b/roboguice/src/main/java/roboguice/android/receiver/RoboBroadcastReceiver.java
index 95038647a..458253895 100644
--- a/roboguice/src/main/java/roboguice/android/receiver/RoboBroadcastReceiver.java
+++ b/roboguice/src/main/java/roboguice/android/receiver/RoboBroadcastReceiver.java
@@ -1,6 +1,7 @@
 package roboguice.android.receiver;
 
 import roboguice.android.DroidGuice;
+import roboguice.base.RoboGuice;
 
 import com.google.inject.Injector;
 
@@ -21,7 +22,7 @@
      */
     @Override
     public final void onReceive(Context context, Intent intent) {
-        final Injector injector = DroidGuice.instance().getScopedInjector((Application) context.getApplicationContext());
+        final Injector injector = RoboGuice.<DroidGuice>instance().getScopedInjector((Application) context.getApplicationContext());
 
         injector.injectMembers(this);
         handleReceive(context, intent);
@@ -34,7 +35,6 @@ public final void onReceive(Context context, Intent intent) {
      * @param context
      * @param intent
      */
-    @SuppressWarnings("UnusedParameters")
     protected void handleReceive(Context context, Intent intent) {
         // proper template method to handle the receive
     }
diff --git a/roboguice/src/main/java/roboguice/android/service/RoboIntentService.java b/roboguice/src/main/java/roboguice/android/service/RoboIntentService.java
index 01a3b8ca6..53e712f23 100644
--- a/roboguice/src/main/java/roboguice/android/service/RoboIntentService.java
+++ b/roboguice/src/main/java/roboguice/android/service/RoboIntentService.java
@@ -8,13 +8,15 @@
 import roboguice.android.service.event.OnCreateEvent;
 import roboguice.android.service.event.OnDestroyEvent;
 import roboguice.android.service.event.OnStartEvent;
-import roboguice.android.util.RoboContext;
+import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
+import roboguice.base.util.RoboContext;
 
 import com.google.inject.Injector;
 import com.google.inject.Key;
 
 import android.app.IntentService;
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 
@@ -40,7 +42,7 @@
  *
  * @author Donn Felker
  */
-public abstract class RoboIntentService extends IntentService implements RoboContext {
+public abstract class RoboIntentService extends IntentService implements RoboContext<Context> {
 
     protected EventManager eventManager;
     protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
@@ -54,7 +56,7 @@ public RoboIntentService(String name) {
 
     @Override
     public void onCreate() {
-        final Injector injector = DroidGuice.instance().getInjector(this);
+        final Injector injector = RoboGuice.<DroidGuice>instance().getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembers(this);
         super.onCreate();
@@ -75,7 +77,7 @@ public void onDestroy() {
                 eventManager.fire(new OnDestroyEvent() );
         } finally {
             try {
-                DroidGuice.instance().destroyInjector(this);
+                RoboGuice.<DroidGuice>instance().destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
diff --git a/roboguice/src/main/java/roboguice/android/service/RoboService.java b/roboguice/src/main/java/roboguice/android/service/RoboService.java
index 7d9a0e158..401739e58 100644
--- a/roboguice/src/main/java/roboguice/android/service/RoboService.java
+++ b/roboguice/src/main/java/roboguice/android/service/RoboService.java
@@ -18,13 +18,15 @@
 import roboguice.android.service.event.OnCreateEvent;
 import roboguice.android.service.event.OnDestroyEvent;
 import roboguice.android.service.event.OnStartEvent;
-import roboguice.android.util.RoboContext;
+import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
+import roboguice.base.util.RoboContext;
 
 import com.google.inject.Injector;
 import com.google.inject.Key;
 
 import android.app.Service;
+import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 
@@ -51,14 +53,14 @@
  * @author Mike Burton
  * @author Christine Karman
  */
-public abstract class RoboService extends Service implements RoboContext {
+public abstract class RoboService extends Service implements RoboContext<Context> {
 
     protected EventManager eventManager;
     protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
 
     @Override
     public void onCreate() {
-        final Injector injector = DroidGuice.instance().getInjector(this);
+        final Injector injector = RoboGuice.<DroidGuice>instance().getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembers(this);
         super.onCreate();
@@ -78,7 +80,7 @@ public void onDestroy() {
                 eventManager.fire(new OnDestroyEvent() );
         } finally {
             try {
-                DroidGuice.instance().destroyInjector(this);
+                RoboGuice.<DroidGuice>instance().destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
diff --git a/roboguice/src/main/java/roboguice/android/util/RoboAsyncTask.java b/roboguice/src/main/java/roboguice/android/util/RoboAsyncTask.java
index 80499b588..c0852c18f 100644
--- a/roboguice/src/main/java/roboguice/android/util/RoboAsyncTask.java
+++ b/roboguice/src/main/java/roboguice/android/util/RoboAsyncTask.java
@@ -3,6 +3,7 @@
 import java.util.concurrent.Executor;
 
 import roboguice.android.DroidGuice;
+import roboguice.base.RoboGuice;
 
 import android.content.Context;
 import android.os.Handler;
@@ -12,25 +13,25 @@
 
     protected RoboAsyncTask(Context context) {
         this.context = context;
-        DroidGuice.instance().getInjector(context).injectMembers(this);
+        RoboGuice.<DroidGuice>instance().getInjector(context).injectMembers(this);
     }
 
     protected RoboAsyncTask(Context context, Handler handler) {
         super(handler);
         this.context = context;
-        DroidGuice.instance().getInjector(context).injectMembers(this);
+        RoboGuice.<DroidGuice>instance().getInjector(context).injectMembers(this);
     }
 
     protected RoboAsyncTask(Context context, Handler handler, Executor executor) {
         super(handler, executor);
         this.context = context;
-        DroidGuice.instance().getInjector(context).injectMembers(this);
+        RoboGuice.<DroidGuice>instance().getInjector(context).injectMembers(this);
     }
 
     protected RoboAsyncTask(Context context, Executor executor) {
         super(executor);
         this.context = context;
-        DroidGuice.instance().getInjector(context).injectMembers(this);
+        RoboGuice.<DroidGuice>instance().getInjector(context).injectMembers(this);
     }
 
     public Context getContext() {
diff --git a/roboguice/src/main/java/roboguice/android/util/RoboContext.java b/roboguice/src/main/java/roboguice/android/util/RoboContext.java
deleted file mode 100644
index 473c9285d..000000000
--- a/roboguice/src/main/java/roboguice/android/util/RoboContext.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package roboguice.android.util;
-
-import java.util.Map;
-
-import com.google.inject.Key;
-
-public interface RoboContext {
-    Map<Key<?>,Object> getScopedObjectMap();
-}
diff --git a/roboguice/src/main/java/roboguice/android/util/SafeAsyncTask.java b/roboguice/src/main/java/roboguice/android/util/SafeAsyncTask.java
index 3207d6d44..cdadba4b9 100644
--- a/roboguice/src/main/java/roboguice/android/util/SafeAsyncTask.java
+++ b/roboguice/src/main/java/roboguice/android/util/SafeAsyncTask.java
@@ -118,7 +118,6 @@ protected void onPreExecute() throws Exception {}
      * @param t the result of {@link #call()}
      * @throws Exception, captured on passed to onException() if present.
      */
-    @SuppressWarnings({"UnusedDeclaration"})
     protected void onSuccess( ResultT t ) throws Exception {}
 
     /**
@@ -267,7 +266,7 @@ public Object call() throws Exception {
          * @param c the callable to post
          * @throws Exception on error
          */
-        protected void postToUiThreadAndWait( final Callable c ) throws Exception {
+        protected void postToUiThreadAndWait( final Callable<?> c ) throws Exception {
             final CountDownLatch latch = new CountDownLatch(1);
             final Exception[] exceptions = new Exception[1];
 
diff --git a/roboguice/src/main/java/roboguice/base/event/EventManager.java b/roboguice/src/main/java/roboguice/base/event/EventManager.java
index 404c39e5e..472993807 100644
--- a/roboguice/src/main/java/roboguice/base/event/EventManager.java
+++ b/roboguice/src/main/java/roboguice/base/event/EventManager.java
@@ -37,7 +37,7 @@
      * @param listener to be triggered
      * @param <T> event type
      */
-    public <T> void registerObserver( Class<T> event, EventListener listener ) {
+    public <T> void registerObserver( Class<T> event, EventListener<?> listener ) {
         Set<EventListener<?>> observers = registrations.get(event);
         if (observers == null) {
             observers = Collections.synchronizedSet(new LinkedHashSet<EventListener<?>>());
@@ -75,7 +75,7 @@
         //noinspection SynchronizationOnLocalVariableOrMethodParameter
         synchronized (observers) {
             for (Iterator<EventListener<?>> iterator = observers.iterator(); iterator.hasNext();) {
-                final EventListener registeredListener = iterator.next();
+                final EventListener<?> registeredListener = iterator.next();
                 if (registeredListener == listener) {
                     iterator.remove();
                     break;
@@ -99,9 +99,9 @@
         //noinspection SynchronizationOnLocalVariableOrMethodParameter
         synchronized (observers) {
             for (Iterator<EventListener<?>> iterator = observers.iterator(); iterator.hasNext();) {
-                final EventListener listener = iterator.next();
+                final EventListener<?> listener = iterator.next();
                 if( listener instanceof ObserverMethodListener ) {
-                    final ObserverMethodListener observer = ((ObserverMethodListener)listener);
+                    final ObserverMethodListener<?> observer = ((ObserverMethodListener<?>)listener);
                     if (observer.getInstance() == instance) {
                         iterator.remove();
                         break;
@@ -117,6 +117,7 @@
      *
      * @param event observed
      */
+    @SuppressWarnings({ "rawtypes", "unchecked" })
     public void fire(Object event) {
 
         final Set<EventListener<?>> observers = registrations.get(event.getClass());
diff --git a/roboguice/src/main/java/roboguice/base/event/ObserverMethodListener.java b/roboguice/src/main/java/roboguice/base/event/ObserverMethodListener.java
index a5f18ddbd..86acf9662 100644
--- a/roboguice/src/main/java/roboguice/base/event/ObserverMethodListener.java
+++ b/roboguice/src/main/java/roboguice/base/event/ObserverMethodListener.java
@@ -40,6 +40,7 @@ public Object getInstance() {
         return instance;
     }
 
+    @SuppressWarnings("rawtypes")
     @Override
     public boolean equals(Object o) {
         if (this == o) return true;
diff --git a/roboguice/src/main/java/roboguice/base/event/eventListener/javaassist/RuntimeSupport.java b/roboguice/src/main/java/roboguice/base/event/eventListener/javaassist/RuntimeSupport.java
index 752635327..e9460f64f 100644
--- a/roboguice/src/main/java/roboguice/base/event/eventListener/javaassist/RuntimeSupport.java
+++ b/roboguice/src/main/java/roboguice/base/event/eventListener/javaassist/RuntimeSupport.java
@@ -21,6 +21,7 @@
  * Runtime support routines that the classes generated by ProxyFactory use.
  *
  */
+@SuppressWarnings("rawtypes")
 public class RuntimeSupport {
 
     //Respectfully Borrowed from the JavaAssist library, trimmed for only needed pieces.
diff --git a/roboguice/src/main/java/roboguice/android/inject/ContextScopedProvider.java b/roboguice/src/main/java/roboguice/base/inject/ContextScopedProvider.java
similarity index 55%
rename from roboguice/src/main/java/roboguice/android/inject/ContextScopedProvider.java
rename to roboguice/src/main/java/roboguice/base/inject/ContextScopedProvider.java
index f34d41560..3e56c8658 100644
--- a/roboguice/src/main/java/roboguice/android/inject/ContextScopedProvider.java
+++ b/roboguice/src/main/java/roboguice/base/inject/ContextScopedProvider.java
@@ -1,17 +1,16 @@
-package roboguice.android.inject;
+package roboguice.base.inject;
 
 import com.google.inject.Inject;
 import com.google.inject.Provider;
 
-import android.content.Context;
-
-
-public class ContextScopedProvider<T> {
-    @Inject protected ContextScope scope;
+@SuppressWarnings({"rawtypes", "unchecked"})
+public class ContextScopedProvider<A,C,T> {
+    
+    @Inject protected RoboScope scope;
     @Inject protected Provider<T> provider;
 
-    public T get(Context context) {
-        synchronized (ContextScope.class) {
+    public T get(C context) {
+        synchronized (RoboScope.class) {
             scope.enter(context);
             try {
                 return provider.get();
diff --git a/roboguice/src/main/java/roboguice/base/inject/RoboScope.java b/roboguice/src/main/java/roboguice/base/inject/RoboScope.java
new file mode 100644
index 000000000..0f82e5c03
--- /dev/null
+++ b/roboguice/src/main/java/roboguice/base/inject/RoboScope.java
@@ -0,0 +1,106 @@
+package roboguice.base.inject;
+
+import java.lang.ref.WeakReference;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Stack;
+
+import roboguice.android.inject.AndroidContextScope;
+
+import com.google.inject.Key;
+import com.google.inject.Provider;
+import com.google.inject.Scope;
+
+public abstract class RoboScope<A, C> implements Scope
+{
+    protected ThreadLocal<Stack<WeakReference<C>>> contextThreadLocal = new ThreadLocal<Stack<WeakReference<C>>>();
+    protected Map<Key<?>,Object> applicationScopedObjects = new HashMap<Key<?>, Object>();
+    protected A application;
+
+    public RoboScope(A application, C context) {
+        this.application = application;
+        enter(context);
+    }
+
+    /**
+     * You MUST perform any injector operations inside a synchronized(ContextScope.class) block that starts with
+     * scope.enter(context) if working in a multithreaded environment
+     *
+     * @see AndroidContextScope
+     * @see ContextScopedRoboInjector
+     * @see ContextScopedProvider
+     * @param context the context to enter
+     */
+    public void enter(C context) {
+
+        // BUG synchronizing on ContextScope.class may be overly conservative
+        synchronized (RoboScope.class) {
+
+            final Stack<WeakReference<C>> stack = getContextStack();
+            final Map<Key<?>,Object> map = getScopedObjectMap(context);
+
+            // Mark this thread as for this context
+            stack.push(new WeakReference<C>(context));
+
+            // Add the context to the scope for key Context, Activity, etc.
+            Class<?> c = context.getClass();
+            do {
+                map.put(Key.get(c), context);
+                c = c.getSuperclass();
+            } while( c!=Object.class );
+        }
+
+    }
+
+    public void exit(C context) {
+        synchronized (RoboScope.class) {
+            final Stack<WeakReference<C>> stack = getContextStack();
+            final C c = stack.pop().get();
+            if( c!=null && c!=context )
+                throw new IllegalArgumentException(String.format("Scope for %s must be opened before it can be closed",context));
+        }
+    }
+
+    public <T> Provider<T> scope(final Key<T> key, final Provider<T> unscoped) {
+        return new Provider<T>() {
+            @SuppressWarnings("unchecked")
+            public T get() {
+                synchronized (RoboScope.class) {
+                    final Stack<WeakReference<C>> stack = getContextStack();
+                    final C context = stack.peek().get(); // The context should never be finalized as long as the provider is still in memory
+                    final Map<Key<?>, Object> objectsForScope = getScopedObjectMap(context);
+                    if( objectsForScope==null )
+                        return null;  // May want to consider throwing an exception here (if provider is used after onDestroy())
+
+                    T current = (T) objectsForScope.get(key);
+                    if (current==null && !objectsForScope.containsKey(key) ) {
+                        if ( unscoped instanceof ContextScopedProvider )
+                        {
+                            current = ( ( ContextScopedProvider<A,C,T> ) unscoped).get(context);
+                        }
+                        else
+                        {
+                            current = unscoped.get();
+                        }
+                        objectsForScope.put(key, current);
+                    }
+
+                    return current;
+                }
+            }
+        };
+
+    }
+
+
+    public Stack<WeakReference<C>> getContextStack() {
+        Stack<WeakReference<C>> stack = contextThreadLocal.get();
+        if( stack==null ) {
+            stack = new Stack<WeakReference<C>>();
+            contextThreadLocal.set(stack);
+        }
+        return stack;
+    }
+
+    protected abstract Map<Key<?>,Object> getScopedObjectMap(final C origContext);
+}
diff --git a/roboguice/src/main/java/roboguice/base/util/RoboContext.java b/roboguice/src/main/java/roboguice/base/util/RoboContext.java
new file mode 100644
index 000000000..633e97283
--- /dev/null
+++ b/roboguice/src/main/java/roboguice/base/util/RoboContext.java
@@ -0,0 +1,14 @@
+package roboguice.base.util;
+
+import java.util.Map;
+
+import com.google.inject.Key;
+
+/**
+ * Represents a context by which injection can be scoped, so instances can be controlled by the current context (in case they are context singletons instead of normal singletons).
+ */
+public interface RoboContext<A> {
+    Map<Key<?>,Object> getScopedObjectMap();
+    
+    public A getApplicationContext();
+}
diff --git a/roboguice/src/main/java/roboguice/java/JavaGuice.java b/roboguice/src/main/java/roboguice/java/JavaGuice.java
index c4a4907c7..5b3e6787f 100644
--- a/roboguice/src/main/java/roboguice/java/JavaGuice.java
+++ b/roboguice/src/main/java/roboguice/java/JavaGuice.java
@@ -8,26 +8,30 @@
 
 import roboguice.base.RoboGuice;
 import roboguice.base.util.PropertyLoader;
+import roboguice.base.util.RoboContext;
 import roboguice.base.util.logging.Ln;
 import roboguice.java.config.JavaDefaultRoboModule;
+import roboguice.java.inject.JavaContextScope;
+import roboguice.java.inject.JavaContextScopedRoboInjector;
 import roboguice.java.inject.JavaResourceListener;
+import roboguice.java.inject.RoboApplication;
 
 import com.google.inject.Injector;
 import com.google.inject.Module;
 
-public final class JavaGuice extends RoboGuice<String, String, String, JavaDefaultRoboModule, JavaResourceListener> {
+public final class JavaGuice extends RoboGuice<String, RoboApplication, RoboContext<RoboApplication>, JavaDefaultRoboModule, JavaResourceListener> {
 
     private JavaGuice() {
         modulesResourceId = "";
     }
     
     @Override
-    protected List<Module> baseModules(String scopedObject) 
+    protected List<Module> baseModules(RoboApplication scopedObject) 
     {
-        List<URL> configMatches = PropertyLoader.urlsFor(scopedObject, null);
+        List<URL> configMatches = PropertyLoader.urlsFor(scopedObject.configurationPath(), null);
         Ln.v("Configuration files: %s", configMatches);
         
-        Properties property = PropertyLoader.loadProperty(scopedObject, new Properties(), null);
+        Properties property = PropertyLoader.loadProperty(scopedObject.configurationPath(), new Properties(), null);
         
         String custom_modules = property != null ? (String) property.get(modulesResourceId) : null;
         final String[] moduleNames = custom_modules != null ? custom_modules.split( "," ) : new String[]{};
@@ -51,29 +55,30 @@ private JavaGuice() {
     }
 
     @Override
-    public Injector getInjector(String scopedObject) {
-        return getScopedInjector( scopedObject );
+    public Injector getInjector(RoboContext<RoboApplication> scopedObject) {
+        //FIXME: Get application from context
+        return new JavaContextScopedRoboInjector(scopedObject, getScopedInjector( scopedObject.getApplicationContext() ) );
     }
     
     @Override
-    public JavaDefaultRoboModule newDefaultRoboModule( String scopedObject ) {
-        return new JavaDefaultRoboModule( getResourceListener(scopedObject) );
+    public JavaDefaultRoboModule newDefaultRoboModule( RoboApplication scopedObject ) {
+        return new JavaDefaultRoboModule( new JavaContextScope(scopedObject), getResourceListener(scopedObject) );
     }
 
-    public JavaGuice addResourcePath( String scopedObject, String... paths )
+    public JavaGuice addResourcePath( RoboApplication scopedObject, String... paths )
     {
         getResourceListener( scopedObject ).addResourcePath(paths);
         return this;
     }
     
-    public JavaGuice addResourceComparator( String scopedObject, Comparator<URL> comparator )
+    public JavaGuice addResourceComparator( RoboApplication scopedObject, Comparator<URL> comparator )
     {
         getResourceListener(scopedObject).addResourceComparator(comparator);
         return this;
     }
     
     @Override
-    protected JavaResourceListener getResourceListener(String scopedObject) {
+    protected JavaResourceListener getResourceListener(RoboApplication scopedObject) {
         
         JavaResourceListener resourceListener = resourceListeners.get(scopedObject);
         if( resourceListener==null ) {
diff --git a/roboguice/src/main/java/roboguice/java/config/JavaDefaultRoboModule.java b/roboguice/src/main/java/roboguice/java/config/JavaDefaultRoboModule.java
index 6faca7c79..4e9a2c951 100644
--- a/roboguice/src/main/java/roboguice/java/config/JavaDefaultRoboModule.java
+++ b/roboguice/src/main/java/roboguice/java/config/JavaDefaultRoboModule.java
@@ -1,9 +1,12 @@
 package roboguice.java.config;
 
 import roboguice.base.config.DefaultRoboModule;
+import roboguice.base.inject.ContextSingleton;
+import roboguice.base.inject.RoboScope;
 import roboguice.base.util.logging.BaseConfig;
 import roboguice.base.util.logging.Ln;
 import roboguice.base.util.logging.Writer;
+import roboguice.java.inject.JavaContextScope;
 import roboguice.java.inject.JavaResourceListener;
 import roboguice.java.util.logging.JavaBaseConfig;
 import roboguice.java.util.logging.JavaWriter;
@@ -12,13 +15,20 @@
 
 public class JavaDefaultRoboModule extends DefaultRoboModule<JavaResourceListener> {
 
-    public JavaDefaultRoboModule(JavaResourceListener listener) {
+    private  JavaContextScope contextScope;
+    public JavaDefaultRoboModule( JavaContextScope contextScope, JavaResourceListener listener) {
         super(listener);
+        this.contextScope = contextScope;
     }
 
     @Override
     protected void configure() {
         
+     // ContextSingleton bindings
+        bindScope(ContextSingleton.class, contextScope);
+        bind(RoboScope.class).toInstance(contextScope);
+        bind(JavaContextScope.class).toInstance(contextScope);
+        
         bindListener(Matchers.any(), resourceListener);
         
         bind(BaseConfig.class).to(JavaBaseConfig.class);
diff --git a/roboguice/src/main/java/roboguice/java/inject/JavaContextScope.java b/roboguice/src/main/java/roboguice/java/inject/JavaContextScope.java
new file mode 100644
index 000000000..72b96acb5
--- /dev/null
+++ b/roboguice/src/main/java/roboguice/java/inject/JavaContextScope.java
@@ -0,0 +1,60 @@
+/*
+ * Copyright 2009 Michael Burton
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions
+ * and limitations under the License.
+ */
+package roboguice.java.inject;
+
+import java.util.Map;
+
+import roboguice.base.inject.RoboScope;
+import roboguice.base.util.RoboContext;
+
+import com.google.inject.Key;
+
+/**
+ * Scopes the injector based on the current context.
+ *
+ * Any usage of this class must call #enter(Context) before performing any operations with the
+ * injector, and do so within a synchronized block on the ContextScope.class, eg:
+ *
+ * synchronized(ContextScope.class) {
+ *     scope.enter(context);
+ *
+ *     // do something, eg.
+ *     // injector.injectMembers(this);
+ * }
+ *
+ * If you're using ContextScopedRoboInjector (which is the RoboGuice default), this is done for you automatically.
+ *
+ * If you're trying to use a Provider, you must either use ContextScopedProvider instead, or do your own synchronization
+ * and scope.enter() call.
+ *
+ * @see ContextScopedRoboInjector
+ */
+public class JavaContextScope extends RoboScope<RoboApplication, RoboContext<RoboApplication>> {
+    
+    public JavaContextScope(RoboApplication application) {
+        super(application, application);
+    }
+
+    @Override
+    protected Map<Key<?>,Object> getScopedObjectMap(final RoboContext<RoboApplication> origContext) {
+        
+        // Special case for application so that users don't have to manually set up application subclasses
+        if( origContext instanceof RoboApplication )
+            return applicationScopedObjects;
+
+        return origContext.getScopedObjectMap();
+    }
+}
diff --git a/roboguice/src/main/java/roboguice/java/inject/JavaContextScopedRoboInjector.java b/roboguice/src/main/java/roboguice/java/inject/JavaContextScopedRoboInjector.java
new file mode 100644
index 000000000..c4cc1a4c0
--- /dev/null
+++ b/roboguice/src/main/java/roboguice/java/inject/JavaContextScopedRoboInjector.java
@@ -0,0 +1,247 @@
+package roboguice.java.inject;
+
+import java.lang.annotation.Annotation;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import roboguice.base.util.RoboContext;
+
+import com.google.inject.Binding;
+import com.google.inject.Injector;
+import com.google.inject.Key;
+import com.google.inject.MembersInjector;
+import com.google.inject.Module;
+import com.google.inject.Provider;
+import com.google.inject.Scope;
+import com.google.inject.TypeLiteral;
+import com.google.inject.spi.TypeConverterBinding;
+
+public class JavaContextScopedRoboInjector implements Injector {
+    protected Injector delegate;
+    protected RoboContext<RoboApplication> context;
+    protected JavaContextScope scope;
+
+    public JavaContextScopedRoboInjector(RoboContext<RoboApplication> context, Injector applicationInjector ) {
+        this.delegate = applicationInjector;
+        this.context = context;
+        this.scope = delegate.getInstance(JavaContextScope.class);
+    }
+
+    @Override
+    public Injector createChildInjector(Iterable<? extends Module> modules) {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.createChildInjector(modules);
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public Injector createChildInjector(Module... modules) {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.createChildInjector(modules);
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public <T> List<Binding<T>> findBindingsByType(TypeLiteral<T> type) {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.findBindingsByType(type);
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public Map<Key<?>, Binding<?>> getAllBindings() {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getAllBindings();
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public <T> Binding<T> getBinding(Key<T> key) {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getBinding(key);
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public <T> Binding<T> getBinding(Class<T> type) {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getBinding(type);
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public Map<Key<?>, Binding<?>> getBindings() {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getBindings();
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public <T> Binding<T> getExistingBinding(Key<T> key) {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getExistingBinding(key);
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public <T> T getInstance(Key<T> key) {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getInstance(key);
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public <T> T getInstance(Class<T> type) {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getInstance(type);
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public <T> MembersInjector<T> getMembersInjector(Class<T> type) {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getMembersInjector(type);
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public <T> MembersInjector<T> getMembersInjector(TypeLiteral<T> typeLiteral) {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getMembersInjector(typeLiteral);
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public Injector getParent() {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getParent();
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public <T> Provider<T> getProvider(Key<T> key) {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getProvider(key);
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public <T> Provider<T> getProvider(Class<T> type) {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getProvider(type);
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public Map<Class<? extends Annotation>, Scope> getScopeBindings() {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getScopeBindings();
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public Set<TypeConverterBinding> getTypeConverterBindings() {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                return delegate.getTypeConverterBindings();
+            } finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+    @Override
+    public void injectMembers(Object instance) {
+        synchronized (JavaContextScope.class) {
+            scope.enter(context);
+            try {
+                delegate.injectMembers(instance);
+            }finally {
+                scope.exit(context);
+            }
+        }
+    }
+
+}
diff --git a/roboguice/src/main/java/roboguice/java/inject/RoboApplication.java b/roboguice/src/main/java/roboguice/java/inject/RoboApplication.java
new file mode 100644
index 000000000..27ec8b2e1
--- /dev/null
+++ b/roboguice/src/main/java/roboguice/java/inject/RoboApplication.java
@@ -0,0 +1,33 @@
+package roboguice.java.inject;
+
+import java.util.Map;
+
+import roboguice.base.util.RoboContext;
+
+import com.google.inject.Key;
+
+public class RoboApplication implements RoboContext<RoboApplication> {
+
+    private String configurationPath;
+    
+    public RoboApplication( String configurationPath )
+    {
+        this.configurationPath = configurationPath;
+    }
+    
+    public String configurationPath()
+    {
+        return configurationPath;
+    }
+    
+    @Override
+    public Map<Key<?>, Object> getScopedObjectMap() {
+        return null;
+    }
+
+    @Override
+    public RoboApplication getApplicationContext() {
+        return this;
+    }
+
+}
diff --git a/roboguice/src/test/java/roboguice/android/activity/ActivityInjectionTest.java b/roboguice/src/test/java/roboguice/android/activity/ActivityInjectionTest.java
index b5ad4c38a..719303e89 100644
--- a/roboguice/src/test/java/roboguice/android/activity/ActivityInjectionTest.java
+++ b/roboguice/src/test/java/roboguice/android/activity/ActivityInjectionTest.java
@@ -25,15 +25,14 @@
 import roboguice.android.activity.ActivityInjectionTest.ModuleB.B;
 import roboguice.android.activity.ActivityInjectionTest.ModuleC.C;
 import roboguice.android.activity.ActivityInjectionTest.ModuleD.D;
-import roboguice.android.inject.ContextScopedProvider;
 import roboguice.android.inject.InjectExtra;
 import roboguice.android.inject.InjectPreference;
 import roboguice.android.inject.InjectView;
 import roboguice.android.test.RobolectricRoboTestRunner;
 import roboguice.base.RoboGuice;
 import roboguice.base.RoboGuice.RoboGuiceType;
+import roboguice.base.inject.ContextScopedProvider;
 import roboguice.base.inject.InjectResource;
-import roboguice.base.inject.ResourceListener.RequestStaticResourceInjection;
 
 import com.google.inject.ConfigurationException;
 import com.google.inject.Inject;
@@ -41,7 +40,6 @@
 import com.google.inject.Stage;
 import com.google.inject.TypeLiteral;
 
-import android.R;
 import android.app.Activity;
 import android.app.Application;
 import android.content.Context;
@@ -75,7 +73,7 @@ public void shouldInjectUsingDefaultConstructor() {
 
     @Test
     public void shouldInjectView() {
-        assertThat(activity.text1,is(activity.findViewById(R.id.text1)));
+        assertThat(activity.text1,is(activity.findViewById(android.R.id.text1)));
     }
 
     @Test
@@ -154,7 +152,7 @@ public void run() {
         // Force an OoM
         // http://stackoverflow.com/questions/3785713/how-to-make-the-java-system-release-soft-references/3810234
         try {
-            @SuppressWarnings({"MismatchedQueryAndUpdateOfCollection"}) final ArrayList<Object[]> allocations = new ArrayList<Object[]>();
+            final ArrayList<Object[]> allocations = new ArrayList<Object[]>();
             //noinspection InfiniteLoopStatement
             while(true)
                 allocations.add( new Object[(int) Runtime.getRuntime().maxMemory()] );
@@ -172,7 +170,7 @@ public void shouldBeAbleToGetContextProvidersInBackgroundThreads() throws Except
         f.onCreate(null);
 
         final FutureTask<Context> future = new FutureTask<Context>(new Callable<Context>() {
-            final ContextScopedProvider<Context> contextProvider = DroidGuice.instance().getInjector(f).getInstance(Key.get(new TypeLiteral<ContextScopedProvider<Context>>(){}));
+            final ContextScopedProvider<Application, Context, Context> contextProvider = DroidGuice.instance().getInjector(f).getInstance(Key.get(new TypeLiteral<ContextScopedProvider<Application, Context, Context>>(){}));
             
             @Override
             public Context call() throws Exception {
@@ -190,8 +188,8 @@ public Context call() throws Exception {
         @Inject protected String emptyString;
         @Inject protected Activity activity;
         @Inject protected RoboActivity roboActivity;
-        @InjectView(R.id.text1) protected TextView text1;
-        @InjectResource(R.string.cancel) protected String cancel;
+        @InjectView(android.R.id.text1) protected TextView text1;
+        @InjectResource(android.R.string.cancel) protected String cancel;
         @InjectExtra("foobar") protected String foobar;
 
         
@@ -203,11 +201,11 @@ protected void onCreate(Bundle savedInstanceState) {
 
             final TextView text1 = new TextView(this);
             root.addView(text1);
-            text1.setId(R.id.text1);
+            text1.setId(android.R.id.text1);
 
-            final LinearLayout included1 = addIncludedView(R.id.summary, R.string.ok);
+            final LinearLayout included1 = addIncludedView(android.R.id.summary, android.R.string.ok);
             root.addView(included1);
-            final LinearLayout included2 = addIncludedView(R.id.title, R.string.no);
+            final LinearLayout included2 = addIncludedView(android.R.id.title, android.R.string.no);
             root.addView(included2);
 
             setContentView(root);
@@ -219,13 +217,13 @@ protected LinearLayout addIncludedView(int includedRootId, int stringResId) {
 
             TextView textView = new TextView(this);
             container.addView(textView);
-            textView.setId(R.id.text2);
+            textView.setId(android.R.id.text2);
             textView.setText(stringResId);
             return container;
         }
     }
 
-    @RequestStaticResourceInjection( A.class )
+//    @RequestStaticResourceInjection( A.class )
     public static class ModuleA extends com.google.inject.AbstractModule {
         @Override
         protected void configure() {
diff --git a/roboguice/src/test/java/roboguice/android/application/ApplicationInjectionTest.java b/roboguice/src/test/java/roboguice/android/application/ApplicationInjectionTest.java
index 39f7856fe..542ffe72a 100644
--- a/roboguice/src/test/java/roboguice/android/application/ApplicationInjectionTest.java
+++ b/roboguice/src/test/java/roboguice/android/application/ApplicationInjectionTest.java
@@ -12,6 +12,7 @@
 
 import roboguice.android.DroidGuice;
 import roboguice.android.test.RobolectricRoboTestRunner;
+import roboguice.base.RoboGuice;
 
 import com.google.inject.Inject;
 
@@ -49,7 +50,7 @@ public void shouldBeAbleToInjectContextScopedItemsIntoApplication() {
         @Override
         public void onCreate() {
             super.onCreate();
-            DroidGuice.instance().getInjector(this).injectMembers(this);
+            RoboGuice.<DroidGuice>instance().getInjector(this).injectMembers(this);
         }
     }
 
@@ -59,7 +60,7 @@ public void onCreate() {
         @Override
         public void onCreate() {
             super.onCreate();
-            DroidGuice.instance().getInjector(this).injectMembers(this);
+            RoboGuice.<DroidGuice>instance().getInjector(this).injectMembers(this);
         }
     }
 
diff --git a/roboguice/src/test/java/roboguice/android/event/ContextObserverBase.java b/roboguice/src/test/java/roboguice/android/event/ContextObserverBase.java
index 79b564a46..84d683aa9 100644
--- a/roboguice/src/test/java/roboguice/android/event/ContextObserverBase.java
+++ b/roboguice/src/test/java/roboguice/android/event/ContextObserverBase.java
@@ -14,7 +14,7 @@
  *
  * @author John Ericksen
  */
-@SuppressWarnings({"UnusedParameters", "UnusedDeclaration"})
+@SuppressWarnings("unused")
 public class ContextObserverBase {
 
     private Map<String, Map<Class<?>, Integer>> callCount = new HashMap<String, Map<Class<?>, Integer>>();
@@ -117,7 +117,7 @@ void observesOverloadedPackagePrivateEvent(@Observes EventTwo event){
         triggerCalled(OVERLOADED_METHOD, EventTwo.class);
     }
 
-    public void triggerCalled(String method, Class eventClass) {
+    public void triggerCalled(String method, Class<?> eventClass) {
         if(!callCount.containsKey(method)){
             callCount.put(method, new HashMap<Class<?>, Integer>());
         }
diff --git a/roboguice/src/test/java/roboguice/android/event/ContextObserverTesterImpl.java b/roboguice/src/test/java/roboguice/android/event/ContextObserverTesterImpl.java
index 8dd8dcd43..10eac8bb2 100644
--- a/roboguice/src/test/java/roboguice/android/event/ContextObserverTesterImpl.java
+++ b/roboguice/src/test/java/roboguice/android/event/ContextObserverTesterImpl.java
@@ -9,6 +9,7 @@
  *
  * @author John Ericksen
  */
+@SuppressWarnings("unused")
 public class ContextObserverTesterImpl extends ContextObserverBase implements ContextObserverTester{
 
     public static final String[] methods = {
diff --git a/roboguice/src/test/java/roboguice/android/event/EventManagerTest.java b/roboguice/src/test/java/roboguice/android/event/EventManagerTest.java
index b3330e55a..0c2bcd1f3 100644
--- a/roboguice/src/test/java/roboguice/android/event/EventManagerTest.java
+++ b/roboguice/src/test/java/roboguice/android/event/EventManagerTest.java
@@ -35,10 +35,10 @@ public void setup() throws NoSuchMethodException {
     @Test
     public void testRegistrationLifeCycle(){
         for(Method method : eventOneMethods){
-            eventManager.registerObserver(EventOne.class, new ObserverMethodListener(tester, method));
+            eventManager.registerObserver(EventOne.class, new ObserverMethodListener<Object>(tester, method));
         }
         for(Method method : eventTwoMethods){
-            eventManager.registerObserver(EventTwo.class, new ObserverMethodListener(tester, method));
+            eventManager.registerObserver(EventTwo.class, new ObserverMethodListener<Object>(tester, method));
         }
 
         eventManager.fire(event);
diff --git a/roboguice/src/test/java/roboguice/android/event/ObservesTypeListenerTest.java b/roboguice/src/test/java/roboguice/android/event/ObservesTypeListenerTest.java
index 0fc005cc6..9a9da691e 100644
--- a/roboguice/src/test/java/roboguice/android/event/ObservesTypeListenerTest.java
+++ b/roboguice/src/test/java/roboguice/android/event/ObservesTypeListenerTest.java
@@ -10,6 +10,7 @@
 
 import roboguice.android.DroidGuice;
 import roboguice.android.test.RobolectricRoboTestRunner;
+import roboguice.base.RoboGuice;
 import roboguice.base.event.EventManager;
 
 import com.google.inject.Inject;
@@ -35,7 +36,7 @@
     @Before
     public void setup() throws NoSuchMethodException {
         app = Robolectric.application;
-        injector = DroidGuice.instance().getInjector(app);
+        injector = RoboGuice.<DroidGuice>instance().getInjector(app);
 
         eventManager = injector.getInstance(EventManager.class);
 
diff --git a/roboguice/src/test/java/roboguice/android/event/eventListener/AsynchronousEventListenerDecoratorTest.java b/roboguice/src/test/java/roboguice/android/event/eventListener/AsynchronousEventListenerDecoratorTest.java
index c60bce535..b68bcfe9f 100644
--- a/roboguice/src/test/java/roboguice/android/event/eventListener/AsynchronousEventListenerDecoratorTest.java
+++ b/roboguice/src/test/java/roboguice/android/event/eventListener/AsynchronousEventListenerDecoratorTest.java
@@ -23,6 +23,7 @@
     protected RunnableAsyncTaskAdaptor asyncTaskAdaptor;
     protected AsynchronousEventListenerDecorator<Object> decorator;
 
+    @SuppressWarnings("unchecked")
     @Before
     public void setup(){
         //noinspection unchecked
diff --git a/roboguice/src/test/java/roboguice/android/event/eventListener/EventListenerRunnableTest.java b/roboguice/src/test/java/roboguice/android/event/eventListener/EventListenerRunnableTest.java
index 697df6a12..fa83c7b89 100644
--- a/roboguice/src/test/java/roboguice/android/event/eventListener/EventListenerRunnableTest.java
+++ b/roboguice/src/test/java/roboguice/android/event/eventListener/EventListenerRunnableTest.java
@@ -16,6 +16,7 @@
  *
  * @author John Ericksen
  */
+@SuppressWarnings({"rawtypes", "unchecked"})
 public class EventListenerRunnableTest {
 
     protected EventOne event;
diff --git a/roboguice/src/test/java/roboguice/android/event/eventListener/EventListenerThreadingDecoratorTest.java b/roboguice/src/test/java/roboguice/android/event/eventListener/EventListenerThreadingDecoratorTest.java
index 557a663b4..876f1b241 100644
--- a/roboguice/src/test/java/roboguice/android/event/eventListener/EventListenerThreadingDecoratorTest.java
+++ b/roboguice/src/test/java/roboguice/android/event/eventListener/EventListenerThreadingDecoratorTest.java
@@ -22,6 +22,7 @@
  *
  * @author John Ericksen
  */
+@SuppressWarnings({"unchecked", "rawtypes"})
 public class EventListenerThreadingDecoratorTest {
 
     protected EventListenerThreadingDecorator eventListenerDecorator;
diff --git a/roboguice/src/test/java/roboguice/android/event/eventListener/RunnableAsyncTaskAdaptorTest.java b/roboguice/src/test/java/roboguice/android/event/eventListener/RunnableAsyncTaskAdaptorTest.java
index 3bd7f3733..562bc42b4 100644
--- a/roboguice/src/test/java/roboguice/android/event/eventListener/RunnableAsyncTaskAdaptorTest.java
+++ b/roboguice/src/test/java/roboguice/android/event/eventListener/RunnableAsyncTaskAdaptorTest.java
@@ -13,6 +13,7 @@
  *
  * @author John Ericksen
  */
+@SuppressWarnings("rawtypes")
 public class RunnableAsyncTaskAdaptorTest {
 
     protected EventListenerRunnable runnable;
diff --git a/roboguice/src/test/java/roboguice/android/inject/ContextScopeTest.java b/roboguice/src/test/java/roboguice/android/inject/ContextScopeTest.java
index 47bad337c..2c013f299 100644
--- a/roboguice/src/test/java/roboguice/android/inject/ContextScopeTest.java
+++ b/roboguice/src/test/java/roboguice/android/inject/ContextScopeTest.java
@@ -11,6 +11,7 @@
 import roboguice.android.DroidGuice;
 import roboguice.android.activity.RoboActivity;
 import roboguice.android.test.RobolectricRoboTestRunner;
+import roboguice.base.RoboGuice;
 import roboguice.base.inject.ContextSingleton;
 
 import com.google.inject.Inject;
@@ -41,7 +42,7 @@ public void shouldHaveContextInScopeMapAfterOnCreate() throws Exception {
 
     @Test
     public void shouldBeAbleToOpenMultipleScopes() {
-        final ContextScope scope = DroidGuice.instance().getScopedInjector(Robolectric.application).getInstance(ContextScope.class);
+        final AndroidContextScope scope = RoboGuice.<DroidGuice>instance().getScopedInjector(Robolectric.application).getInstance(AndroidContextScope.class);
         final Activity a = new A();
         final Activity b = new B();
 
@@ -53,7 +54,7 @@ public void shouldBeAbleToOpenMultipleScopes() {
 
     @Test(expected = IllegalArgumentException.class)
     public void shouldNotBeAbleToExitTheWrongScope() {
-        final ContextScope scope = DroidGuice.instance().getScopedInjector(Robolectric.application).getInstance(ContextScope.class);
+        final AndroidContextScope scope = RoboGuice.<DroidGuice>instance().getScopedInjector(Robolectric.application).getInstance(AndroidContextScope.class);
         final Activity a = new A();
         final Activity b = new B();
 
diff --git a/roboguice/src/test/java/roboguice/android/inject/ExtrasListenerTest.java b/roboguice/src/test/java/roboguice/android/inject/ExtrasListenerTest.java
index b97c1aa6b..219fd9924 100644
--- a/roboguice/src/test/java/roboguice/android/inject/ExtrasListenerTest.java
+++ b/roboguice/src/test/java/roboguice/android/inject/ExtrasListenerTest.java
@@ -61,6 +61,5 @@ public IBinder onBind(Intent intent) {
             return null;
         }
 
-        
     }
 }
diff --git a/roboguice/src/test/java/roboguice/android/inject/ProviderTest.java b/roboguice/src/test/java/roboguice/android/inject/ProviderTest.java
index 48f52e43c..28d65e836 100644
--- a/roboguice/src/test/java/roboguice/android/inject/ProviderTest.java
+++ b/roboguice/src/test/java/roboguice/android/inject/ProviderTest.java
@@ -14,7 +14,9 @@
 
 import roboguice.android.activity.RoboActivity;
 import roboguice.android.test.RobolectricRoboTestRunner;
+import roboguice.base.inject.ContextScopedProvider;
 
+import android.app.Application;
 import android.content.Context;
 import android.os.Bundle;
 
@@ -63,7 +65,7 @@ public Context call() throws Exception {
 
 
     public static class A extends RoboActivity {
-        @Inject ContextScopedProvider<Context> contextProvider;
+        @Inject ContextScopedProvider<Application, Context, Context> contextProvider;
 
         @Override
         protected void onCreate(Bundle savedInstanceState) {
@@ -79,7 +81,7 @@ protected void onCreate(Bundle savedInstanceState) {
     }
 
     public static class C extends RoboActivity {
-        @Inject ContextScopedProvider<Context> contextProvider;
+        @Inject ContextScopedProvider<Application, Context, Context> contextProvider;
 
         @Override
         protected void onCreate(Bundle savedInstanceState) {
diff --git a/roboguice/src/test/java/roboguice/android/inject/SharedPreferencesProviderTest.java b/roboguice/src/test/java/roboguice/android/inject/SharedPreferencesProviderTest.java
index c4b18df28..4b612aa2c 100644
--- a/roboguice/src/test/java/roboguice/android/inject/SharedPreferencesProviderTest.java
+++ b/roboguice/src/test/java/roboguice/android/inject/SharedPreferencesProviderTest.java
@@ -16,6 +16,7 @@
 import roboguice.android.DroidGuice;
 import roboguice.android.activity.RoboActivity;
 import roboguice.android.test.RobolectricRoboTestRunner;
+import roboguice.base.RoboGuice;
 import roboguice.base.util.Strings;
 
 import com.google.inject.AbstractModule;
@@ -25,7 +26,6 @@
 import android.os.Bundle;
 import android.preference.PreferenceManager;
 
-@SuppressWarnings("ResultOfMethodCallIgnored")
 @RunWith(RobolectricRoboTestRunner.class)
 public class SharedPreferencesProviderTest {
 
@@ -43,7 +43,7 @@ public void shouldInjectDefaultSharedPrefs() throws Exception {
 
     @Test
     public void shouldInjectNamedSharedPrefs() throws Exception {
-        DroidGuice.instance().setScopedInjector(Robolectric.application,DroidGuice.DEFAULT_STAGE, DroidGuice.instance().newDefaultRoboModule(Robolectric.application), new ModuleA() );
+        RoboGuice.<DroidGuice>instance().setScopedInjector(Robolectric.application,DroidGuice.DEFAULT_STAGE, RoboGuice.<DroidGuice>instance().newDefaultRoboModule(Robolectric.application), new ModuleA() );
         try {
             
             final A a = new A();
@@ -85,7 +85,7 @@ public void shouldFallbackOnOldDefaultIfPresent() throws Exception {
 
     @Test
     public void shouldNotFallbackOnOldDefaultIfNamedFileSpecified() throws Exception {
-        DroidGuice.instance().setScopedInjector(Robolectric.application,DroidGuice.DEFAULT_STAGE, DroidGuice.instance().newDefaultRoboModule(Robolectric.application), new ModuleA() );
+        RoboGuice.<DroidGuice>instance().setScopedInjector(Robolectric.application,DroidGuice.DEFAULT_STAGE, RoboGuice.<DroidGuice>instance().newDefaultRoboModule(Robolectric.application), new ModuleA() );
 
         final File oldDefault = new File("shared_prefs/default.xml");
         final File oldDir = new File("shared_prefs");
diff --git a/roboguice/src/test/java/roboguice/android/view/ViewInjectionTest.java b/roboguice/src/test/java/roboguice/android/view/ViewInjectionTest.java
index 2436948ab..d52236901 100644
--- a/roboguice/src/test/java/roboguice/android/view/ViewInjectionTest.java
+++ b/roboguice/src/test/java/roboguice/android/view/ViewInjectionTest.java
@@ -15,6 +15,7 @@
 import roboguice.android.activity.RoboActivity;
 import roboguice.android.inject.InjectView;
 import roboguice.android.test.RobolectricRoboTestRunner;
+import roboguice.base.RoboGuice;
 
 import com.google.inject.Inject;
 
@@ -58,7 +59,7 @@ public void shouldNotHoldReferencesToContext() {
         // Force an OoM
         // http://stackoverflow.com/questions/3785713/how-to-make-the-java-system-release-soft-references/3810234
         try {
-            @SuppressWarnings({"MismatchedQueryAndUpdateOfCollection"}) final ArrayList<Object[]> allocations = new ArrayList<Object[]>();
+            final ArrayList<Object[]> allocations = new ArrayList<Object[]>();
             //noinspection InfiniteLoopStatement
             while(true)
                 allocations.add( new Object[(int) Runtime.getRuntime().maxMemory()] );
@@ -154,7 +155,7 @@ public ViewA(Context context) {
                 ref.setId(101);
                 addView(ref);
 
-                DroidGuice.instance().getInjector(getContext()).injectMembers(this);
+                RoboGuice.<DroidGuice>instance().getInjector(getContext()).injectMembers(this);
             }
 
         }
@@ -189,7 +190,7 @@ public ViewA(Context context) {
                 ref.setTag("101");
                 addView(ref);
 
-                DroidGuice.instance().getInjector(getContext()).injectMembers(this);
+                RoboGuice.<DroidGuice>instance().getInjector(getContext()).injectMembers(this);
             }
 
         }
