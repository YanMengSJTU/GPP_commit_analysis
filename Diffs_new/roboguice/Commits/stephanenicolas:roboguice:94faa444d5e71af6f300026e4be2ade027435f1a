diff --git a/roboguice-plugin/src/main/groovy/org/roboguice/RoboGuicePlugin.groovy b/roboguice-plugin/src/main/groovy/org/roboguice/RoboGuicePlugin.groovy
index 6b8a8d057..117b04f52 100644
--- a/roboguice-plugin/src/main/groovy/org/roboguice/RoboGuicePlugin.groovy
+++ b/roboguice-plugin/src/main/groovy/org/roboguice/RoboGuicePlugin.groovy
@@ -4,10 +4,22 @@ import com.android.build.gradle.AppPlugin
 import com.android.build.gradle.LibraryPlugin
 import org.gradle.api.Plugin
 import org.gradle.api.Project
-import org.gradle.api.file.FileCollection
 import org.gradle.api.tasks.compile.JavaCompile
 
 /**
+ * The RoboGuice Gradle plugin helps creating roboguice based apps
+ * via gradle builds. It will :
+ * <ul>
+ *   <li> apply all needed dependencies to the project and its build :
+ *   <ul>
+ *     <li> for roboblender to optimize guice in depth;
+ *     <li> to configure byte code weaving used by RG 4 for injection of views, resources and extras.
+ *   </ul>
+ *   <li> manage the annotation database package name for sources and tests
+ *   <li> create the annotation database in the generated folder
+ * </ul>
+ * The plugin uses a DSL :
+ * @see RoboGuicePluginExtension
  * @author SNI
  */
 public class RoboGuicePlugin implements Plugin<Project> {
@@ -15,21 +27,17 @@ public class RoboGuicePlugin implements Plugin<Project> {
   public void apply(Project project) {
     def hasApp = project.plugins.withType(AppPlugin)
     def hasLib = project.plugins.withType(LibraryPlugin)
-    if(!hasApp && !hasLib) {
-      throw new IllegalStateException("Project is not android lib or app project. Roboguice plugin can't be applied.")
+    if (!hasApp && !hasLib) {
+      throw new IllegalStateException(
+          "Project is not android lib or app project. Roboguice plugin can't be applied.")
     }
 
-    def extension = getExtension()
-    def pluginExtension = getPluginExtension()
-    if (extension && pluginExtension) {
-      project.extensions.create(extension, pluginExtension)
-    }
+    project.extensions.create("roboguice", RoboGuicePluginExtension)
 
     final def log = project.logger
     final String LOG_TAG = this.getClass().getName()
 
     configure(project)
-    log.debug(LOG_TAG, "Project variant configured for RoboGuice.")
 
     final def variants
     if (hasApp) {
@@ -38,35 +46,56 @@ public class RoboGuicePlugin implements Plugin<Project> {
       variants = project.android.libraryVariants
     }
 
+    //create annotation database in generated folder to
+    //avoid it to be instrumented (which would fail)
     variants.all { variant ->
-      variant.javaCompile.options.compilerArgs += [
-          '-s', project.file('build/generated')
-      ]
+      variant.javaCompile.options.compilerArgs += ['-s', project.file('build/generated')]
+    }
+
+    project.tasks.withType(JavaCompile) { task ->
+      //create annotation databases according to roboguice extension
+      //at execution time.. http://stackoverflow.com/q/23962154/693752
+      final def roboguiceExtension = project.roboguice
+      String annotationDatabaseName = roboguiceExtension.annotationDatabasePackageName
+      String testAnnotationDatabaseName = roboguiceExtension.testAnnotationDatabasePackageName
 
-      JavaCompile javaCompile = variant.javaCompile
-      FileCollection classpathFileCollection = project.files(project.android.bootClasspath)
-      classpathFileCollection += javaCompile.classpath
+      if (annotationDatabaseName == null) {
+        testAnnotationDatabaseName = "test"
+      } else if (testAnnotationDatabaseName == null) {
+        testAnnotationDatabaseName = annotationDatabaseName + ".test"
+      }
 
-      println "Classpath " + classpathFileCollection
+      if (!task.name.contains('Test')) {
+        if (annotationDatabaseName != null) {
+          log.info(LOG_TAG,
+              "RoboBlender will process sources in package ${annotationDatabaseName}");
+          options.compilerArgs << "-AguiceAnnotationDatabasePackageName=${annotationDatabaseName}"
+        }
+      } else {
+        log.info(LOG_TAG,
+            "RoboBlender will process tests sources in package ${testAnnotationDatabaseName}");
+        options.compilerArgs << "-AguiceAnnotationDatabasePackageName=${testAnnotationDatabaseName}"
+      }
     }
   }
 
   protected void configure(Project project) {
+    //TODO add DSL switches
     project.plugins.apply('com.github.stephanenicolas.injectview')
     project.plugins.apply('com.github.stephanenicolas.injectresource')
     project.plugins.apply('com.github.stephanenicolas.injectextra')
+    log.info(LOG_TAG, "Project configured for RG byte code weaving injections.")
 
+    //TODO add DSL switch
     project.dependencies {
       provided 'org.roboguice:roboblender:4.0.0-SNAPSHOT'
-      compile 'org.roboguice:roboguice:4.0.0-SNAPSHOT'
     }
-  }
+    log.info(LOG_TAG, "Project configured for RoboBlender.")
 
-  protected Class getPluginExtension() {
-    RoboGuicePluginExtension
-  }
-
-  protected String getExtension() {
-    "roboguice"
+    //TODO add DSL switch
+    project.dependencies {
+      compile 'org.roboguice:roboguice:4.0.0-SNAPSHOT'
+    }
+    log.info(LOG_TAG, "Project configured for RoboGuice.")
   }
 }
diff --git a/roboguice-plugin/src/main/groovy/org/roboguice/RoboGuicePluginExtension.groovy b/roboguice-plugin/src/main/groovy/org/roboguice/RoboGuicePluginExtension.groovy
index e7fd68680..49e398da5 100644
--- a/roboguice-plugin/src/main/groovy/org/roboguice/RoboGuicePluginExtension.groovy
+++ b/roboguice-plugin/src/main/groovy/org/roboguice/RoboGuicePluginExtension.groovy
@@ -1,8 +1,16 @@
 package org.roboguice
 
 /**
+ * DSL for the {@link RoboGuicePlugin}.
  * @author SNI
  */
 public class RoboGuicePluginExtension {
-
+  /** The name of the annotation database package that
+   * RoboBlender will generate when processing main sources.
+   * If this property is null, the default package is used.*/
+  String annotationDatabasePackageName
+  /** The name of the annotation database package that
+   * RoboBlender will generate when processing main tests.
+   * By default ,this property is the source annotation database package name + ".test" */
+  String testAnnotationDatabasePackageName
 }
