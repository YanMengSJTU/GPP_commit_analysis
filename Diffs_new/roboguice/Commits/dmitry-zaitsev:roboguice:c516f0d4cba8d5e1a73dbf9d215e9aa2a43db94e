diff --git a/roboguice/src/main/java/roboguice/event/eventListener/ObserverMethodListener.java b/roboguice/src/main/java/roboguice/event/eventListener/ObserverMethodListener.java
index 97f1341fc..4e30ffb3f 100644
--- a/roboguice/src/main/java/roboguice/event/eventListener/ObserverMethodListener.java
+++ b/roboguice/src/main/java/roboguice/event/eventListener/ObserverMethodListener.java
@@ -1,5 +1,6 @@
 package roboguice.event.eventListener;
 
+import java.lang.ref.WeakReference;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
@@ -16,10 +17,10 @@
 public class ObserverMethodListener<T> implements EventListener<T> {
     protected String descriptor;
     protected Method method;
-    protected Object instance;
+    protected WeakReference<Object> instanceReference;
 
     public ObserverMethodListener(Object instance, Method method) {
-        this.instance = instance;
+        this.instanceReference = new WeakReference<Object>(instance);
         this.method = method;
         //This descriptor is used in the equals and hashcode method to compare
         //methods between super-classes, subclasses and interface declarations.
@@ -27,7 +28,18 @@ public ObserverMethodListener(Object instance, Method method) {
         method.setAccessible(true);
     }
 
+    /**
+     * Invokes observable method on instance for which it was registered
+     *
+     * @param event fired
+     */
     public void onEvent(Object event) {
+        final Object instance = getInstance();
+
+        if (instance == null) {
+            return;
+        }
+
         try {
             method.invoke(instance, event);
         } catch (InvocationTargetException e) {
@@ -37,8 +49,11 @@ public void onEvent(Object event) {
         }
     }
 
+    /**
+     * @return instance for which method was registered
+     */
     public Object getInstance() {
-        return instance;
+        return instanceReference.get();
     }
 
     @Override
@@ -48,13 +63,19 @@ public boolean equals(Object o) {
 
         ObserverMethodListener<?> that = (ObserverMethodListener<?>) o;
 
-        if (descriptor != null ? !descriptor.equals(that.descriptor) : that.descriptor != null) return false;
-        return !(instance != null ? !instance.equals(that.instance) : that.instance != null);
+        final Object instance = getInstance();
+        final Object thatInstance = that.getInstance();
+
+        if (descriptor != null ? !descriptor.equals(that.descriptor) : that.descriptor != null)
+            return false;
+        return !(instance != null ? !instance.equals(thatInstance) : thatInstance != null);
 
     }
 
     @Override
     public int hashCode() {
+        final Object instance = getInstance();
+
         int result = descriptor != null ? descriptor.hashCode() : 0;
         final int prime = 31;
         result = prime * result + (instance != null ? instance.hashCode() : 0);
