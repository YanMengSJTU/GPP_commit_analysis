diff --git a/roboguice/lib/guice-2.0-no_aop.jar b/roboguice/lib/guice-2.0-no_aop.jar
deleted file mode 100644
index 613aa6d6b..000000000
Binary files a/roboguice/lib/guice-2.0-no_aop.jar and /dev/null differ
diff --git a/roboguice/lib/guice-2.0-src.jar b/roboguice/lib/guice-2.0-src.jar
deleted file mode 100644
index 1b89d9727..000000000
Binary files a/roboguice/lib/guice-2.0-src.jar and /dev/null differ
diff --git a/roboguice/lib/guice-3.0-no_aop.jar b/roboguice/lib/guice-3.0-no_aop.jar
new file mode 100644
index 000000000..009f8abaf
Binary files /dev/null and b/roboguice/lib/guice-3.0-no_aop.jar differ
diff --git a/roboguice/lib/javax.inject-1.jar b/roboguice/lib/javax.inject-1.jar
new file mode 100644
index 000000000..b2a9d0bf7
Binary files /dev/null and b/roboguice/lib/javax.inject-1.jar differ
diff --git a/roboguice/lib/jsr305-1.3.9.jar b/roboguice/lib/jsr305-1.3.9.jar
new file mode 100644
index 000000000..a9afc6619
Binary files /dev/null and b/roboguice/lib/jsr305-1.3.9.jar differ
diff --git a/roboguice/src/main/java/roboguice/activity/RoboFragmentActivity.java b/roboguice/src/main/java/roboguice/activity/RoboFragmentActivity.java
index cef36bf3e..39f30c9ab 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboFragmentActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboFragmentActivity.java
@@ -30,7 +30,6 @@
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.os.Bundle;
-import android.support.v4.app.FragmentActivity;
 
 import com.google.inject.Inject;
 import com.google.inject.Key;
@@ -38,7 +37,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-public class RoboFragmentActivity extends FragmentActivity implements RoboContext {
+public class RoboFragmentActivity extends Activity implements RoboContext {
     protected EventManager eventManager;
     protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
 
diff --git a/roboguice/src/main/java/roboguice/activity/RoboSherlockAccountAuthenticatorActivity.java b/roboguice/src/main/java/roboguice/activity/RoboSherlockAccountAuthenticatorActivity.java
deleted file mode 100644
index 8a0e772c6..000000000
--- a/roboguice/src/main/java/roboguice/activity/RoboSherlockAccountAuthenticatorActivity.java
+++ /dev/null
@@ -1,138 +0,0 @@
-/*
- * Copyright 2009 Michael Burton
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions
- * and limitations under the License.
- */
-// derived from RoboActivity.java
-
-package roboguice.activity;
-
-import android.accounts.AccountAuthenticatorActivity;
-import android.app.Activity;
-import android.content.Intent;
-import android.content.res.Configuration;
-import android.os.Bundle;
-import com.google.inject.Inject;
-import com.google.inject.Key;
-import roboguice.RoboGuice;
-import roboguice.activity.event.*;
-import roboguice.context.event.OnConfigurationChangedEvent;
-import roboguice.context.event.OnCreateEvent;
-import roboguice.context.event.OnDestroyEvent;
-import roboguice.context.event.OnStartEvent;
-import roboguice.event.EventManager;
-import roboguice.inject.ContentViewListener;
-import roboguice.inject.RoboInjector;
-import roboguice.util.RoboContext;
-
-import java.util.HashMap;
-import java.util.Map;
-
-/**
- * A subclass of {@link AccountAuthenticatorActivity} that provides dependency injection
- * with RoboGuice.
- *
- * @author Marcus Better
- */
-public class RoboSherlockAccountAuthenticatorActivity extends SherlockAccountAuthenticatorActivity implements RoboContext {
-    protected EventManager eventManager;
-    protected HashMap<Key<?>, Object> scopedObjects = new HashMap<Key<?>, Object>();
-
-    @Inject ContentViewListener ignored; // BUG find a better place to put this
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
-        eventManager = injector.getInstance(EventManager.class);
-        injector.injectMembersWithoutViews(this);
-        super.onCreate(savedInstanceState);
-        eventManager.fire(new OnCreateEvent<Activity>(this,savedInstanceState));
-    }
-
-    @Override
-    protected void onRestart() {
-        super.onRestart();
-        eventManager.fire(new OnRestartEvent(this));
-    }
-
-    @Override
-    protected void onStart() {
-        super.onStart();
-        eventManager.fire(new OnStartEvent<Activity>(this));
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        eventManager.fire(new OnResumeEvent(this));
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-        eventManager.fire(new OnPauseEvent(this));
-    }
-
-    @Override
-    protected void onNewIntent( Intent intent ) {
-        super.onNewIntent(intent);
-        eventManager.fire(new OnNewIntentEvent(this));
-    }
-
-    @Override
-    protected void onStop() {
-        try {
-            eventManager.fire(new OnStopEvent(this));
-        } finally {
-            super.onStop();
-        }
-    }
-
-    @Override
-    protected void onDestroy() {
-        try {
-            eventManager.fire(new OnDestroyEvent<Activity>(this));
-        } finally {
-            try {
-                RoboGuice.destroyInjector(this);
-            } finally {
-                super.onDestroy();
-            }
-        }
-    }
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        final Configuration currentConfig = getResources().getConfiguration();
-        super.onConfigurationChanged(newConfig);
-        eventManager.fire(new OnConfigurationChangedEvent<Activity>(this, currentConfig, newConfig));
-    }
-
-    @Override
-    public void onContentChanged() {
-        super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
-        eventManager.fire(new OnContentChangedEvent(this));
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        eventManager.fire(new OnActivityResultEvent(this, requestCode, resultCode, data));
-    }
-
-    @Override
-    public Map<Key<?>, Object> getScopedObjectMap() {
-        return scopedObjects;
-    }
-}
diff --git a/roboguice/src/main/java/roboguice/activity/RoboSherlockActivity.java b/roboguice/src/main/java/roboguice/activity/RoboSherlockActivity.java
deleted file mode 100644
index 0e1e7c632..000000000
--- a/roboguice/src/main/java/roboguice/activity/RoboSherlockActivity.java
+++ /dev/null
@@ -1,142 +0,0 @@
-/*
- * Copyright 2012 Jake Wharton
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions
- * and limitations under the License.
- */
-package roboguice.activity;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.content.res.Configuration;
-import android.os.Bundle;
-
-import com.actionbarsherlock.app.SherlockActivity;
-import com.google.inject.Inject;
-import com.google.inject.Key;
-
-import roboguice.RoboGuice;
-import roboguice.activity.event.OnActivityResultEvent;
-import roboguice.activity.event.OnContentChangedEvent;
-import roboguice.activity.event.OnNewIntentEvent;
-import roboguice.activity.event.OnPauseEvent;
-import roboguice.activity.event.OnRestartEvent;
-import roboguice.activity.event.OnResumeEvent;
-import roboguice.activity.event.OnStopEvent;
-import roboguice.context.event.OnConfigurationChangedEvent;
-import roboguice.context.event.OnCreateEvent;
-import roboguice.context.event.OnDestroyEvent;
-import roboguice.context.event.OnStartEvent;
-import roboguice.event.EventManager;
-import roboguice.inject.ContentViewListener;
-import roboguice.inject.RoboInjector;
-import roboguice.util.RoboContext;
-
-import java.util.HashMap;
-import java.util.Map;
-
-/**
- * @author Roberto Tyley
- */
-public class RoboSherlockActivity extends SherlockActivity implements RoboContext {
-    protected EventManager eventManager;
-    protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>,Object>();
-
-    @Inject
-    ContentViewListener ignored; // BUG find a better place to put this
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
-        eventManager = injector.getInstance(EventManager.class);
-        injector.injectMembersWithoutViews(this);
-        super.onCreate(savedInstanceState);
-        eventManager.fire(new OnCreateEvent<Activity>(this,savedInstanceState));
-    }
-
-    @Override
-    protected void onRestart() {
-        super.onRestart();
-        eventManager.fire(new OnRestartEvent(this));
-    }
-
-    @Override
-    protected void onStart() {
-        super.onStart();
-        eventManager.fire(new OnStartEvent<Activity>(this));
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        eventManager.fire(new OnResumeEvent(this));
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-        eventManager.fire(new OnPauseEvent(this));
-    }
-
-    @Override
-    protected void onNewIntent( Intent intent ) {
-        super.onNewIntent(intent);
-        eventManager.fire(new OnNewIntentEvent(this));
-    }
-
-    @Override
-    protected void onStop() {
-        try {
-            eventManager.fire(new OnStopEvent(this));
-        } finally {
-            super.onStop();
-        }
-    }
-
-    @Override
-    protected void onDestroy() {
-        try {
-            eventManager.fire(new OnDestroyEvent<Activity>(this));
-        } finally {
-            try {
-                RoboGuice.destroyInjector(this);
-            } finally {
-                super.onDestroy();
-            }
-        }
-    }
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        final Configuration currentConfig = getResources().getConfiguration();
-        super.onConfigurationChanged(newConfig);
-        eventManager.fire(new OnConfigurationChangedEvent<Activity>(this,currentConfig, newConfig));
-    }
-
-    @Override
-    public void onContentChanged() {
-        super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
-        eventManager.fire(new OnContentChangedEvent(this));
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        eventManager.fire(new OnActivityResultEvent(this, requestCode, resultCode, data));
-    }
-
-    @Override
-    public Map<Key<?>, Object> getScopedObjectMap() {
-        return scopedObjects;
-    }
-}
diff --git a/roboguice/src/main/java/roboguice/activity/RoboSherlockFragmentActivity.java b/roboguice/src/main/java/roboguice/activity/RoboSherlockFragmentActivity.java
deleted file mode 100644
index d84b981a7..000000000
--- a/roboguice/src/main/java/roboguice/activity/RoboSherlockFragmentActivity.java
+++ /dev/null
@@ -1,122 +0,0 @@
-package roboguice.activity;
-
-import android.app.Activity;
-import android.os.Bundle;
-
-import com.actionbarsherlock.app.SherlockFragmentActivity;
-
-import roboguice.RoboGuice;
-import roboguice.activity.event.*;
-import roboguice.context.event.OnConfigurationChangedEvent;
-import roboguice.context.event.OnCreateEvent;
-import roboguice.context.event.OnDestroyEvent;
-import roboguice.context.event.OnStartEvent;
-import roboguice.event.EventManager;
-import roboguice.inject.ContentViewListener;
-import roboguice.inject.RoboInjector;
-import roboguice.util.RoboContext;
-
-import android.content.Intent;
-import android.content.res.Configuration;
-
-import com.google.inject.Inject;
-import com.google.inject.Key;
-
-import java.util.HashMap;
-import java.util.Map;
-
-/**
- * @author Roberto Tyley
- */
-public class RoboSherlockFragmentActivity extends SherlockFragmentActivity implements RoboContext {
-    protected EventManager eventManager;
-    protected HashMap<Key<?>, Object> scopedObjects = new HashMap<Key<?>, Object>();
-
-    @Inject ContentViewListener ignored; // BUG find a better place to put this
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
-        eventManager = injector.getInstance(EventManager.class);
-        injector.injectMembersWithoutViews(this);
-        super.onCreate(savedInstanceState);
-        eventManager.fire(new OnCreateEvent<Activity>(this,savedInstanceState));
-    }
-
-    @Override
-    protected void onRestart() {
-        super.onRestart();
-        eventManager.fire(new OnRestartEvent(this));
-    }
-
-    @Override
-    protected void onStart() {
-        super.onStart();
-        eventManager.fire(new OnStartEvent<Activity>(this));
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        eventManager.fire(new OnResumeEvent(this));
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-        eventManager.fire(new OnPauseEvent(this));
-    }
-
-    @Override
-    protected void onNewIntent( Intent intent ) {
-        super.onNewIntent(intent);
-        eventManager.fire(new OnNewIntentEvent(this));
-    }
-
-    @Override
-    protected void onStop() {
-        try {
-            eventManager.fire(new OnStopEvent(this));
-        } finally {
-            super.onStop();
-        }
-    }
-
-    @Override
-    protected void onDestroy() {
-        try {
-            eventManager.fire(new OnDestroyEvent<Activity>(this));
-        } finally {
-            try {
-                RoboGuice.destroyInjector(this);
-            } finally {
-                super.onDestroy();
-            }
-        }
-    }
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        final Configuration currentConfig = getResources().getConfiguration();
-        super.onConfigurationChanged(newConfig);
-        eventManager.fire(new OnConfigurationChangedEvent<Activity>(this,currentConfig, newConfig));
-    }
-
-    @Override
-    public void onContentChanged() {
-        super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
-        eventManager.fire(new OnContentChangedEvent(this));
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        eventManager.fire(new OnActivityResultEvent(this, requestCode, resultCode, data));
-    }
-
-    @Override
-    public Map<Key<?>, Object> getScopedObjectMap() {
-        return scopedObjects;
-    }
-}
diff --git a/roboguice/src/main/java/roboguice/activity/RoboSherlockListActivity.java b/roboguice/src/main/java/roboguice/activity/RoboSherlockListActivity.java
deleted file mode 100644
index 4e30de316..000000000
--- a/roboguice/src/main/java/roboguice/activity/RoboSherlockListActivity.java
+++ /dev/null
@@ -1,141 +0,0 @@
-/*
- * Copyright 2012 Jake Wharton
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions
- * and limitations under the License.
- */
-package roboguice.activity;
-
-import android.app.Activity;
-import roboguice.RoboGuice;
-import roboguice.activity.event.OnActivityResultEvent;
-import roboguice.activity.event.OnContentChangedEvent;
-import roboguice.activity.event.OnNewIntentEvent;
-import roboguice.activity.event.OnPauseEvent;
-import roboguice.activity.event.OnRestartEvent;
-import roboguice.activity.event.OnResumeEvent;
-import roboguice.activity.event.OnStopEvent;
-import roboguice.context.event.OnConfigurationChangedEvent;
-import roboguice.context.event.OnCreateEvent;
-import roboguice.context.event.OnDestroyEvent;
-import roboguice.context.event.OnStartEvent;
-import roboguice.event.EventManager;
-import roboguice.inject.ContentViewListener;
-import roboguice.inject.RoboInjector;
-import roboguice.util.RoboContext;
-import android.content.Intent;
-import android.content.res.Configuration;
-import android.os.Bundle;
-
-import com.actionbarsherlock.app.SherlockListActivity;
-import com.google.inject.Inject;
-import com.google.inject.Key;
-
-import java.util.HashMap;
-import java.util.Map;
-
-/**
- * @author Roberto Tyley
- */
-public class RoboSherlockListActivity extends SherlockListActivity implements RoboContext {
-    protected EventManager eventManager;
-    protected HashMap<Key<?>, Object> scopedObjects = new HashMap<Key<?>, Object>();
-
-    @Inject
-    ContentViewListener ignored; // BUG find a better place to put this
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
-        eventManager = injector.getInstance(EventManager.class);
-        injector.injectMembersWithoutViews(this);
-        super.onCreate(savedInstanceState);
-        eventManager.fire(new OnCreateEvent<Activity>(this,savedInstanceState));
-    }
-
-    @Override
-    protected void onRestart() {
-        super.onRestart();
-        eventManager.fire(new OnRestartEvent(this));
-    }
-
-    @Override
-    protected void onStart() {
-        super.onStart();
-        eventManager.fire(new OnStartEvent<Activity>(this));
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        eventManager.fire(new OnResumeEvent(this));
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-        eventManager.fire(new OnPauseEvent(this));
-    }
-
-    @Override
-    protected void onNewIntent( Intent intent ) {
-        super.onNewIntent(intent);
-        eventManager.fire(new OnNewIntentEvent(this));
-    }
-
-    @Override
-    protected void onStop() {
-        try {
-            eventManager.fire(new OnStopEvent(this));
-        } finally {
-            super.onStop();
-        }
-    }
-
-    @Override
-    protected void onDestroy() {
-        try {
-            eventManager.fire(new OnDestroyEvent<Activity>(this));
-        } finally {
-            try {
-                RoboGuice.destroyInjector(this);
-            } finally {
-                super.onDestroy();
-            }
-        }
-    }
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        final Configuration currentConfig = getResources().getConfiguration();
-        super.onConfigurationChanged(newConfig);
-        eventManager.fire(new OnConfigurationChangedEvent<Activity>(this,currentConfig, newConfig));
-    }
-
-    @Override
-    public void onContentChanged() {
-        super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
-        eventManager.fire(new OnContentChangedEvent(this));
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        eventManager.fire(new OnActivityResultEvent(this, requestCode, resultCode, data));
-    }
-
-    @Override
-    public Map<Key<?>, Object> getScopedObjectMap() {
-        return scopedObjects;
-    }
-}
diff --git a/roboguice/src/main/java/roboguice/activity/RoboSherlockPreferenceActivity.java b/roboguice/src/main/java/roboguice/activity/RoboSherlockPreferenceActivity.java
deleted file mode 100644
index 28f90ee8c..000000000
--- a/roboguice/src/main/java/roboguice/activity/RoboSherlockPreferenceActivity.java
+++ /dev/null
@@ -1,161 +0,0 @@
-/*
- * Copyright 2012 Jake Wharton
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions
- * and limitations under the License.
- */
-package roboguice.activity;
-
-import android.app.Activity;
-import roboguice.RoboGuice;
-import roboguice.activity.event.OnActivityResultEvent;
-import roboguice.activity.event.OnContentChangedEvent;
-import roboguice.activity.event.OnNewIntentEvent;
-import roboguice.activity.event.OnPauseEvent;
-import roboguice.activity.event.OnRestartEvent;
-import roboguice.activity.event.OnResumeEvent;
-import roboguice.activity.event.OnStopEvent;
-import roboguice.context.event.OnConfigurationChangedEvent;
-import roboguice.context.event.OnCreateEvent;
-import roboguice.context.event.OnDestroyEvent;
-import roboguice.context.event.OnStartEvent;
-import roboguice.event.EventManager;
-import roboguice.inject.ContentViewListener;
-import roboguice.inject.ContextScope;
-import roboguice.inject.PreferenceListener;
-import roboguice.inject.RoboInjector;
-import roboguice.util.RoboContext;
-import android.content.Intent;
-import android.content.res.Configuration;
-import android.os.Bundle;
-import android.preference.PreferenceScreen;
-
-import com.actionbarsherlock.app.SherlockPreferenceActivity;
-import com.google.inject.Inject;
-import com.google.inject.Key;
-
-import java.util.HashMap;
-import java.util.Map;
-
-/**
- * @author Roberto Tyley
- */
-public class RoboSherlockPreferenceActivity extends SherlockPreferenceActivity implements RoboContext {
-    protected EventManager eventManager;
-    protected PreferenceListener preferenceListener;
-    protected HashMap<Key<?>, Object> scopedObjects = new HashMap<Key<?>, Object>();
-
-    @Inject
-    ContentViewListener ignored; // BUG find a better place to put this
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
-        eventManager = injector.getInstance(EventManager.class);
-        preferenceListener = injector.getInstance(PreferenceListener.class);
-        injector.injectMembersWithoutViews(this);
-        super.onCreate(savedInstanceState);
-        eventManager.fire(new OnCreateEvent<Activity>(this,savedInstanceState));
-    }
-
-    @Override
-    public void setPreferenceScreen(PreferenceScreen preferenceScreen) {
-        super.setPreferenceScreen(preferenceScreen);
-
-        final ContextScope scope = RoboGuice.getInjector(this).getInstance(ContextScope.class);
-        synchronized (ContextScope.class) {
-            scope.enter(this);
-            try {
-                preferenceListener.injectPreferenceViews();
-            } finally {
-                scope.exit(this);
-            }
-        }
-    }
-
-    @Override
-    protected void onRestart() {
-        super.onRestart();
-        eventManager.fire(new OnRestartEvent(this));
-    }
-
-    @Override
-    protected void onStart() {
-        super.onStart();
-        eventManager.fire(new OnStartEvent<Activity>(this));
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        eventManager.fire(new OnResumeEvent(this));
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-        eventManager.fire(new OnPauseEvent(this));
-    }
-
-    @Override
-    protected void onNewIntent( Intent intent ) {
-        super.onNewIntent(intent);
-        eventManager.fire(new OnNewIntentEvent(this));
-    }
-
-    @Override
-    protected void onStop() {
-        try {
-            eventManager.fire(new OnStopEvent(this));
-        } finally {
-            super.onStop();
-        }
-    }
-
-    @Override
-    protected void onDestroy() {
-        try {
-            eventManager.fire(new OnDestroyEvent<Activity>(this));
-        } finally {
-            try {
-                RoboGuice.destroyInjector(this);
-            } finally {
-                super.onDestroy();
-            }
-        }
-    }
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        final Configuration currentConfig = getResources().getConfiguration();
-        super.onConfigurationChanged(newConfig);
-        eventManager.fire(new OnConfigurationChangedEvent<Activity>(this,currentConfig, newConfig));
-    }
-
-    @Override
-    public void onContentChanged() {
-        super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
-        eventManager.fire(new OnContentChangedEvent(this));
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        eventManager.fire(new OnActivityResultEvent(this, requestCode, resultCode, data));
-    }
-
-    @Override
-    public Map<Key<?>, Object> getScopedObjectMap() {
-        return scopedObjects;
-    }
-}
diff --git a/roboguice/src/main/java/roboguice/activity/SherlockAccountAuthenticatorActivity.java b/roboguice/src/main/java/roboguice/activity/SherlockAccountAuthenticatorActivity.java
deleted file mode 100644
index f13c15dcf..000000000
--- a/roboguice/src/main/java/roboguice/activity/SherlockAccountAuthenticatorActivity.java
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- * Copyright (C) 2009 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package roboguice.activity;
-
-import android.accounts.AccountAuthenticatorResponse;
-import android.accounts.AccountManager;
-import android.os.Bundle;
-import com.actionbarsherlock.app.SherlockActivity;
-
-/**
- * Base class for implementing an Activity that is used to help implement an
- * AbstractAccountAuthenticator. If the AbstractAccountAuthenticator needs to use an activity
- * to handle the request then it can have the activity extend SherlockAccountAuthenticatorActivity.
- * The AbstractAccountAuthenticator passes in the response to the intent using the following:
- * <pre>
- *      intent.putExtra({@link android.accounts.AccountManager#KEY_ACCOUNT_AUTHENTICATOR_RESPONSE}, response);
- * </pre>
- * The activity then sets the result that is to be handed to the response via
- * {@link #setAccountAuthenticatorResult(android.os.Bundle)}.
- * This result will be sent as the result of the request when the activity finishes. If this
- * is never set or if it is set to null then error {@link android.accounts.AccountManager#ERROR_CODE_CANCELED}
- * will be called on the response.
- */
-public class SherlockAccountAuthenticatorActivity extends SherlockActivity {
-    private AccountAuthenticatorResponse mAccountAuthenticatorResponse = null;
-    private Bundle mResultBundle = null;
-
-    /**
-     * Set the result that is to be sent as the result of the request that caused this
-     * Activity to be launched. If result is null or this method is never called then
-     * the request will be canceled.
-     * @param result this is returned as the result of the AbstractAccountAuthenticator request
-     */
-    public final void setAccountAuthenticatorResult(Bundle result) {
-        mResultBundle = result;
-    }
-
-    /**
-     * Retrieves the AccountAuthenticatorResponse from either the intent of the icicle, if the
-     * icicle is non-zero.
-     * @param icicle the save instance data of this Activity, may be null
-     */
-    protected void onCreate(Bundle icicle) {
-        super.onCreate(icicle);
-
-        mAccountAuthenticatorResponse =
-                getIntent().getParcelableExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE);
-
-        if (mAccountAuthenticatorResponse != null) {
-            mAccountAuthenticatorResponse.onRequestContinued();
-        }
-    }
-
-    /**
-     * Sends the result or a Constants.ERROR_CODE_CANCELED error if a result isn't present.
-     */
-    public void finish() {
-        if (mAccountAuthenticatorResponse != null) {
-            // send the result bundle back if set, otherwise send an error.
-            if (mResultBundle != null) {
-                mAccountAuthenticatorResponse.onResult(mResultBundle);
-            } else {
-                mAccountAuthenticatorResponse.onError(AccountManager.ERROR_CODE_CANCELED,
-                        "canceled");
-            }
-            mAccountAuthenticatorResponse = null;
-        }
-        super.finish();
-    }
-}
diff --git a/roboguice/src/main/java/roboguice/content/RoboAsyncTaskLoader.java b/roboguice/src/main/java/roboguice/content/RoboAsyncTaskLoader.java
index cf4c42d91..861ab58bb 100644
--- a/roboguice/src/main/java/roboguice/content/RoboAsyncTaskLoader.java
+++ b/roboguice/src/main/java/roboguice/content/RoboAsyncTaskLoader.java
@@ -2,8 +2,8 @@
 
 import roboguice.RoboGuice;
 
+import android.content.AsyncTaskLoader;
 import android.content.Context;
-import android.support.v4.content.AsyncTaskLoader;
 
 /**
  * Provides injection to async task loaders.
diff --git a/roboguice/src/main/java/roboguice/content/RoboLoader.java b/roboguice/src/main/java/roboguice/content/RoboLoader.java
index 13718cc65..d559fe291 100644
--- a/roboguice/src/main/java/roboguice/content/RoboLoader.java
+++ b/roboguice/src/main/java/roboguice/content/RoboLoader.java
@@ -3,7 +3,7 @@
 import roboguice.RoboGuice;
 
 import android.content.Context;
-import android.support.v4.content.Loader;
+import android.content.Loader;
 
 /**
  * Provides injection to loaders.
diff --git a/roboguice/src/main/java/roboguice/fragment/RoboDialogFragment.java b/roboguice/src/main/java/roboguice/fragment/RoboDialogFragment.java
index a795c5c87..b999f5b86 100644
--- a/roboguice/src/main/java/roboguice/fragment/RoboDialogFragment.java
+++ b/roboguice/src/main/java/roboguice/fragment/RoboDialogFragment.java
@@ -2,8 +2,8 @@
 
 import roboguice.RoboGuice;
 
+import android.app.DialogFragment;
 import android.os.Bundle;
-import android.support.v4.app.DialogFragment;
 import android.view.View;
 
 public abstract class RoboDialogFragment extends DialogFragment {
diff --git a/roboguice/src/main/java/roboguice/fragment/RoboFragment.java b/roboguice/src/main/java/roboguice/fragment/RoboFragment.java
index 88e4d2f9d..8faf2ddbc 100644
--- a/roboguice/src/main/java/roboguice/fragment/RoboFragment.java
+++ b/roboguice/src/main/java/roboguice/fragment/RoboFragment.java
@@ -2,8 +2,8 @@
 
 import roboguice.RoboGuice;
 
+import android.app.Fragment;
 import android.os.Bundle;
-import android.support.v4.app.Fragment;
 import android.view.View;
 
 public abstract class RoboFragment extends Fragment {
diff --git a/roboguice/src/main/java/roboguice/fragment/RoboListFragment.java b/roboguice/src/main/java/roboguice/fragment/RoboListFragment.java
index 896d2ee28..79c9dc3b5 100644
--- a/roboguice/src/main/java/roboguice/fragment/RoboListFragment.java
+++ b/roboguice/src/main/java/roboguice/fragment/RoboListFragment.java
@@ -2,8 +2,8 @@
 
 import roboguice.RoboGuice;
 
+import android.app.ListFragment;
 import android.os.Bundle;
-import android.support.v4.app.ListFragment;
 import android.view.View;
 
 public abstract class RoboListFragment extends ListFragment {
diff --git a/roboguice/src/main/java/roboguice/fragment/RoboSherlockDialogFragment.java b/roboguice/src/main/java/roboguice/fragment/RoboSherlockDialogFragment.java
deleted file mode 100644
index 572d6ab34..000000000
--- a/roboguice/src/main/java/roboguice/fragment/RoboSherlockDialogFragment.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package roboguice.fragment;
-
-import roboguice.RoboGuice;
-import android.os.Bundle;
-import android.view.View;
-
-import com.actionbarsherlock.app.SherlockDialogFragment;
-
-public abstract class RoboSherlockDialogFragment extends SherlockDialogFragment {
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
-    }
-
-    @Override
-    public void onViewCreated(View view, Bundle savedInstanceState) {
-        super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
-    }
-}
diff --git a/roboguice/src/main/java/roboguice/fragment/RoboSherlockFragment.java b/roboguice/src/main/java/roboguice/fragment/RoboSherlockFragment.java
deleted file mode 100644
index 77f09f9cb..000000000
--- a/roboguice/src/main/java/roboguice/fragment/RoboSherlockFragment.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package roboguice.fragment;
-
-import roboguice.RoboGuice;
-import android.os.Bundle;
-import android.view.View;
-
-import com.actionbarsherlock.app.SherlockFragment;
-
-public abstract class RoboSherlockFragment extends SherlockFragment {
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
-    }
-
-    @Override
-    public void onViewCreated(View view, Bundle savedInstanceState) {
-        super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
-    }
-}
diff --git a/roboguice/src/main/java/roboguice/fragment/RoboSherlockListFragment.java b/roboguice/src/main/java/roboguice/fragment/RoboSherlockListFragment.java
deleted file mode 100644
index a92dd8145..000000000
--- a/roboguice/src/main/java/roboguice/fragment/RoboSherlockListFragment.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package roboguice.fragment;
-
-import roboguice.RoboGuice;
-
-import android.os.Bundle;
-import android.view.View;
-
-import com.actionbarsherlock.app.SherlockListFragment;
-
-public abstract class RoboSherlockListFragment extends SherlockListFragment {
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
-    }
-
-    @Override
-    public void onViewCreated(View view, Bundle savedInstanceState) {
-        super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
-    }
-}
diff --git a/roboguice/src/main/java/roboguice/inject/ContextScopedRoboInjector.java b/roboguice/src/main/java/roboguice/inject/ContextScopedRoboInjector.java
index 84b773d3d..19854e755 100644
--- a/roboguice/src/main/java/roboguice/inject/ContextScopedRoboInjector.java
+++ b/roboguice/src/main/java/roboguice/inject/ContextScopedRoboInjector.java
@@ -3,8 +3,8 @@
 import roboguice.inject.ViewListener.ViewMembersInjector;
 
 import android.app.Activity;
+import android.app.Fragment;
 import android.content.Context;
-import android.support.v4.app.Fragment;
 
 import com.google.inject.*;
 import com.google.inject.spi.TypeConverterBinding;
diff --git a/roboguice/src/main/java/roboguice/inject/FragmentManagerProvider.java b/roboguice/src/main/java/roboguice/inject/FragmentManagerProvider.java
index fe8c30c76..b85966b04 100644
--- a/roboguice/src/main/java/roboguice/inject/FragmentManagerProvider.java
+++ b/roboguice/src/main/java/roboguice/inject/FragmentManagerProvider.java
@@ -1,8 +1,7 @@
 package roboguice.inject;
 
 import android.app.Activity;
-import android.support.v4.app.FragmentActivity;
-import android.support.v4.app.FragmentManager;
+import android.app.FragmentManager;
 
 import com.google.inject.Inject;
 import com.google.inject.Provider;
@@ -14,6 +13,6 @@
     @Override
     public FragmentManager get() {
         // BUG only supports compat library at the moment.  Does not support honeycomb directly yet
-        return ((FragmentActivity)activity).getSupportFragmentManager();
+        return activity.getFragmentManager();
     }
 }
diff --git a/roboguice/src/main/java/roboguice/inject/RoboInjector.java b/roboguice/src/main/java/roboguice/inject/RoboInjector.java
index 9823393fd..0cabdfbb7 100644
--- a/roboguice/src/main/java/roboguice/inject/RoboInjector.java
+++ b/roboguice/src/main/java/roboguice/inject/RoboInjector.java
@@ -1,7 +1,7 @@
 package roboguice.inject;
 
 import android.app.Activity;
-import android.support.v4.app.Fragment;
+import android.app.Fragment;
 
 import com.google.inject.Injector;
 
