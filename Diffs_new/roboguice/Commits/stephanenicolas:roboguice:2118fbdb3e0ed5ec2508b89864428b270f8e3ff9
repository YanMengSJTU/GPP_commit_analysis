diff --git a/afterburner/src/main/java/afterburner/PostProcessor.java b/afterburner/src/main/java/afterburner/PostProcessor.java
index aa524ba8c..57c199e2c 100644
--- a/afterburner/src/main/java/afterburner/PostProcessor.java
+++ b/afterburner/src/main/java/afterburner/PostProcessor.java
@@ -18,7 +18,6 @@
 import roboguice.inject.InjectView;
 import android.app.Activity;
 import android.app.Fragment;
-import android.os.Bundle;
 import android.view.View;
 
 import com.github.drochetti.javassist.maven.ClassTransformer;
@@ -30,8 +29,9 @@ protected boolean filter(CtClass candidateClass) throws Exception {
         boolean isActivity = candidateClass.subclassOf(ClassPool.getDefault().get(Activity.class.getName()));
         boolean isFragment = candidateClass.subclassOf(ClassPool.getDefault().get(Fragment.class.getName()));
         boolean isSupportFragment = candidateClass.subclassOf(ClassPool.getDefault().get(android.support.v4.app.Fragment.class.getName()));
+        boolean isView = candidateClass.subclassOf(ClassPool.getDefault().get(View.class.getName()));
         boolean hasAfterBurner = checkIfAfterBurnerAlreadyActive(candidateClass);
-        return !hasAfterBurner && (isActivity || isFragment || isSupportFragment);
+        return !hasAfterBurner && (isActivity || isFragment || isSupportFragment || isView);
     }
 
     @Override
@@ -41,10 +41,14 @@ protected void applyTransformations(final CtClass classToTransform) throws Excep
         boolean isActivity = classToTransform.subclassOf(ClassPool.getDefault().get(Activity.class.getName()));
         boolean isFragment = classToTransform.subclassOf(ClassPool.getDefault().get(Fragment.class.getName()));
         boolean isSupportFragment = classToTransform.subclassOf(ClassPool.getDefault().get(android.support.v4.app.Fragment.class.getName()));
+        boolean isView = classToTransform.subclassOf(ClassPool.getDefault().get(View.class.getName()));
+
         if (isActivity) {
             injectStuffInActivity(classToTransform);
         } else if (isFragment || isSupportFragment) {
             injectStuffInFragment(classToTransform);
+        } else if (isView) {
+            injectStuffInView(classToTransform);
         }
     }
 
@@ -66,7 +70,7 @@ private void injectStuffInActivity(final CtClass classToTransform) throws NotFou
             InjectorEditor injectorEditor = new InjectorEditor(classToTransform, fragments, views, layoutId, insertionMethod);
             onCreateMethod.instrument(injectorEditor);
         } else {
-            classToTransform.addMethod(CtNewMethod.make(createOnCreateBody(classToTransform, views, fragments, layoutId), classToTransform));
+            classToTransform.addMethod(CtNewMethod.make(createOnCreateMethod(classToTransform, views, fragments, layoutId), classToTransform));
         }
         classToTransform.detach();
         injectStuffInActivity(classToTransform.getSuperclass());
@@ -78,19 +82,46 @@ private void injectStuffInFragment(final CtClass classToTransform) throws NotFou
         if (views.isEmpty() && fragments.isEmpty()) {
             return;
         }
+        // create or complete onViewCreated
         CtMethod onViewCreatedMethod = extractExistingMethod(classToTransform, "onViewCreated");
         System.out.println("onViewCreatedMethod : " + onViewCreatedMethod);
         if (onViewCreatedMethod != null) {
             InjectorEditor injectorEditor = new InjectorEditor(classToTransform, fragments, views, -1, "onViewCreated");
             onViewCreatedMethod.instrument(injectorEditor);
         } else {
-            classToTransform.addMethod(CtNewMethod.make(createOnViewCreatedBody(classToTransform, views, fragments), classToTransform));
+            classToTransform.addMethod(CtNewMethod.make(createOnViewCreatedMethod(classToTransform, views, fragments), classToTransform));
+        }
+        // create or complete onDestroyView
+        CtMethod onDestroyViewMethod = extractExistingMethod(classToTransform, "onDestroyView");
+        System.out.println("onDestroyView : " + onDestroyViewMethod);
+        if (onDestroyViewMethod != null) {
+            InjectorEditor injectorEditor = new InjectorEditor(classToTransform, fragments, views, -1, "onDestroyView");
+            onDestroyViewMethod.instrument(injectorEditor);
+        } else {
+            classToTransform.addMethod(CtNewMethod.make(createOnDestroyViewMethod(classToTransform, views), classToTransform));
         }
         classToTransform.detach();
-        injectStuffInActivity(classToTransform.getSuperclass());
         injectStuffInFragment(classToTransform.getSuperclass());
     }
 
+    private void injectStuffInView(final CtClass classToTransform) throws NotFoundException, ClassNotFoundException, CannotCompileException {
+        final List<CtField> views = getAllInjectedFieldsForAnnotation(classToTransform, InjectView.class);
+        if (views.isEmpty()) {
+            return;
+        }
+        CtMethod onFinishInflate = extractExistingMethod(classToTransform, "onFinishInflate");
+        System.out.println("onFinishInflateMethod : " + onFinishInflate);
+        // there can't be no constructors in views
+        if (onFinishInflate != null) {
+            InjectorEditor injectorEditor = new InjectorEditor(classToTransform, new ArrayList<CtField>(), views, -1, "onFinishInflate");
+            onFinishInflate.instrument(injectorEditor);
+        } else {
+            classToTransform.addMethod(CtNewMethod.make(createOnFinishInflateMethod(classToTransform, views), classToTransform));
+        }
+        classToTransform.detach();
+        injectStuffInView(classToTransform.getSuperclass());
+    }
+
     private boolean checkIfMethodIsInvoked(final CtClass clazz, CtMethod withinMethod, String invokedMEthod) throws CannotCompileException {
         DetectMethodCallEditor dectectSetContentViewEditor = new DetectMethodCallEditor(clazz, invokedMEthod);
         withinMethod.instrument(dectectSetContentViewEditor);
@@ -98,15 +129,23 @@ private boolean checkIfMethodIsInvoked(final CtClass clazz, CtMethod withinMetho
         return isCallingSetContentView;
     }
 
-    private String createOnCreateBody(CtClass clazz, List<CtField> views, List<CtField> fragments, int layoutId) throws ClassNotFoundException, NotFoundException {
+    private String createOnCreateMethod(CtClass clazz, List<CtField> views, List<CtField> fragments, int layoutId) throws ClassNotFoundException, NotFoundException {
         return "public void onCreate(android.os.Bundle savedInstanceState) { \n" + "super.onCreate(savedInstanceState);\n" + createInjectedBody(clazz, views, fragments, layoutId) + "}";
     }
 
-    private String createOnViewCreatedBody(CtClass clazz, List<CtField> views, List<CtField> fragments) throws ClassNotFoundException, NotFoundException {
+    private String createOnViewCreatedMethod(CtClass clazz, List<CtField> views, List<CtField> fragments) throws ClassNotFoundException, NotFoundException {
         return "public void onViewCreated(android.view.View view, android.os.Bundle savedInstanceState) { \n" + "super.onViewCreated(view, savedInstanceState);\n"
                 + createInjectedBody(clazz, views, fragments, -1) + "}";
     }
 
+    private String createOnFinishInflateMethod(CtClass clazz, List<CtField> views) throws ClassNotFoundException, NotFoundException {
+        return "public void onFinishInflate() { \n" + "super.onFinishInflate();\n" + createInjectedBody(clazz, views) + "}";
+    }
+
+    private String createOnDestroyViewMethod(CtClass clazz, List<CtField> views) {
+        return "public void onDestroyView() { \n" + "super.onDestroyView();\n" + destroyViewStatements(clazz, views) + "}";
+    }
+
     private CtMethod extractExistingMethod(final CtClass classToTransform, String methodName) {
         try {
             return classToTransform.getDeclaredMethod(methodName);
@@ -185,6 +224,15 @@ private String injectViewStatements(CtClass classToTransform, List<CtField> view
         return buffer.toString();
     }
 
+    private String destroyViewStatements(CtClass classToTransform, List<CtField> viewsToInject) {
+        StringBuffer buffer = new StringBuffer();
+        for (CtField field : viewsToInject) {
+            buffer.append(field.getName());
+            buffer.append(" = null;\n");
+        }
+        return buffer.toString();
+    }
+
     private List<CtField> getAllInjectedFieldsForAnnotation(CtClass clazz, Class<? extends Annotation> annotationClazz) {
         List<CtField> result = new ArrayList<CtField>();
         CtField[] allFields = clazz.getDeclaredFields();
@@ -198,10 +246,15 @@ private String injectViewStatements(CtClass classToTransform, List<CtField> view
         return result;
     }
 
+    private String createInjectedBody(CtClass clazz, List<CtField> views) throws ClassNotFoundException, NotFoundException {
+        return createInjectedBody(clazz, views, new ArrayList<CtField>(), -1);
+    }
+
     private String createInjectedBody(CtClass clazz, List<CtField> views, List<CtField> fragments, int layoutId) throws ClassNotFoundException, NotFoundException {
         boolean isActivity = clazz.subclassOf(ClassPool.getDefault().get(Activity.class.getName()));
         boolean isFragment = clazz.subclassOf(ClassPool.getDefault().get(Fragment.class.getName()));
         boolean isSupportFragment = clazz.subclassOf(ClassPool.getDefault().get(android.support.v4.app.Fragment.class.getName()));
+        boolean isView = clazz.subclassOf(ClassPool.getDefault().get(View.class.getName()));
 
         StringBuffer buffer = new StringBuffer();
         String message = String.format("Class %s has been enhanced.", clazz.getName());
@@ -211,7 +264,7 @@ private String createInjectedBody(CtClass clazz, List<CtField> views, List<CtFie
             buffer.append(injectContentView(layoutId));
         }
         if (!views.isEmpty()) {
-            if (isActivity) {
+            if (isActivity || isView) {
                 buffer.append(injectViewStatements(clazz, views, "this"));
             } else if (isFragment || isSupportFragment) {
                 buffer.append(injectViewStatements(clazz, views, "$1"));
@@ -227,7 +280,7 @@ private String createInjectedBody(CtClass clazz, List<CtField> views, List<CtFie
         String string = buffer.toString();
         return string;
     }
-
+    
     private final class InjectorEditor extends ExprEditor {
         private final CtClass classToTransform;
         private final List<CtField> fragments;
