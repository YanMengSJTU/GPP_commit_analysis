diff --git a/roboguice/src/main/java/roboguice/test/RobolectricRoboTestRunner.java b/roboguice/src/main/java/roboguice/test/RobolectricRoboTestRunner.java
index 9bab7141b..cdbaaa9c2 100644
--- a/roboguice/src/main/java/roboguice/test/RobolectricRoboTestRunner.java
+++ b/roboguice/src/main/java/roboguice/test/RobolectricRoboTestRunner.java
@@ -1,15 +1,20 @@
 package roboguice.test;
 
+import java.io.File;
+
+import org.junit.runners.model.InitializationError;
+
+import roboguice.fragment.FragmentUtil;
+import roboguice.test.shadow.ShadowFragment;
+import roboguice.test.shadow.ShadowFragmentActivity;
+import roboguice.test.shadow.ShadowNativeFragment;
+import roboguice.test.shadow.ShadowNativeFragmentActivity;
+
 import com.xtremelabs.robolectric.Robolectric;
 import com.xtremelabs.robolectric.RobolectricConfig;
 import com.xtremelabs.robolectric.RobolectricTestRunner;
 import com.xtremelabs.robolectric.bytecode.ClassHandler;
 import com.xtremelabs.robolectric.bytecode.RobolectricClassLoader;
-import org.junit.runners.model.InitializationError;
-import roboguice.test.shadow.ShadowFragment;
-import roboguice.test.shadow.ShadowFragmentActivity;
-
-import java.io.File;
 
 public class RobolectricRoboTestRunner extends RobolectricTestRunner {
 
@@ -40,8 +45,14 @@ public RobolectricRoboTestRunner(Class<?> testClass, RobolectricConfig robolectr
     @Override
     protected void bindShadowClasses() {
         super.bindShadowClasses();
-        Robolectric.bindShadowClass(ShadowFragmentActivity.class);
-        Robolectric.bindShadowClass(ShadowFragment.class);
+        if(FragmentUtil.hasSupport) {
+            Robolectric.bindShadowClass(ShadowFragmentActivity.class);
+            Robolectric.bindShadowClass(ShadowFragment.class);
+        }
+        if(FragmentUtil.hasNative) {
+        	Robolectric.bindShadowClass(ShadowNativeFragmentActivity.class);
+            Robolectric.bindShadowClass(ShadowNativeFragment.class);
+        }
     }
 
 }
diff --git a/roboguice/src/main/java/roboguice/test/shadow/ShadowNativeFragment.java b/roboguice/src/main/java/roboguice/test/shadow/ShadowNativeFragment.java
new file mode 100644
index 000000000..94920c5c5
--- /dev/null
+++ b/roboguice/src/main/java/roboguice/test/shadow/ShadowNativeFragment.java
@@ -0,0 +1,35 @@
+package roboguice.test.shadow;
+
+import com.xtremelabs.robolectric.internal.Implementation;
+import com.xtremelabs.robolectric.internal.Implements;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.app.Fragment;
+import android.view.View;
+
+@Implements(Fragment.class)
+public class ShadowNativeFragment {
+    protected Activity activity;
+    protected View view;
+
+    @Implementation
+    public Activity getActivity() {
+        return activity;
+    }
+
+    @Implementation
+    public View getView() {
+        return view;
+    }
+
+    @Implementation
+    public void onViewCreated( View v, Bundle savedInstanceState ) {
+        view = v;
+    }
+
+    @Implementation
+    public void onAttach( Activity a ) {
+        activity = a;
+    }
+}
diff --git a/roboguice/src/main/java/roboguice/test/shadow/ShadowNativeFragmentActivity.java b/roboguice/src/main/java/roboguice/test/shadow/ShadowNativeFragmentActivity.java
new file mode 100644
index 000000000..a2d8e29d9
--- /dev/null
+++ b/roboguice/src/main/java/roboguice/test/shadow/ShadowNativeFragmentActivity.java
@@ -0,0 +1,236 @@
+package roboguice.test.shadow;
+
+import java.io.FileDescriptor;
+import java.io.PrintWriter;
+
+import com.xtremelabs.robolectric.internal.Implementation;
+import com.xtremelabs.robolectric.internal.Implements;
+import com.xtremelabs.robolectric.shadows.ShadowActivity;
+
+import android.app.Activity;
+import android.app.Fragment;
+import android.app.Fragment.SavedState;
+import android.app.FragmentManager;
+import android.app.FragmentTransaction;
+import android.os.Bundle;
+
+
+@Implements(Activity.class)
+public class ShadowNativeFragmentActivity extends ShadowActivity {
+
+    @Implementation
+    public FragmentManager getFragmentManager() {
+        return new FragmentManager() {
+            @Override
+            public void addOnBackStackChangedListener(OnBackStackChangedListener onBackStackChangedListener) {
+            }
+
+            @Override
+            public FragmentTransaction beginTransaction() {
+                return new FragmentTransaction() {
+                    @Override
+                    public FragmentTransaction add(Fragment fragment, String s) {
+                        return null;
+                    }
+
+                    @Override
+                    public FragmentTransaction add(int i, Fragment fragment) {
+                        return null;
+                    }
+
+                    @Override
+                    public FragmentTransaction add(int i, Fragment fragment, String s) {
+                        return null;
+                    }
+
+                    @Override
+                    public FragmentTransaction replace(int i, Fragment fragment) {
+                        return null;
+                    }
+
+                    @Override
+                    public FragmentTransaction replace(int i, Fragment fragment, String s) {
+                        return null;
+                    }
+
+                    @Override
+                    public FragmentTransaction remove(Fragment fragment) {
+                        return null;
+                    }
+
+                    @Override
+                    public FragmentTransaction hide(Fragment fragment) {
+                        return null;
+                    }
+
+                    @Override
+                    public FragmentTransaction show(Fragment fragment) {
+                        return null;
+                    }
+
+                    @Override
+                    public FragmentTransaction detach(Fragment fragment) {
+                        return null;
+                    }
+
+                    @Override
+                    public FragmentTransaction attach(Fragment fragment) {
+                        return null;
+                    }
+
+                    @Override
+                    public boolean isEmpty() {
+                        return false;
+                    }
+
+                    @Override
+                    public FragmentTransaction setCustomAnimations(int i, int i1) {
+                        return null;
+                    }
+
+                    @Override
+                    public FragmentTransaction setTransition(int i) {
+                        return null;
+                    }
+
+                    @Override
+                    public FragmentTransaction setTransitionStyle(int i) {
+                        return null;
+                    }
+
+                    @Override
+                    public FragmentTransaction addToBackStack(String s) {
+                        return null;
+                    }
+
+                    @Override
+                    public boolean isAddToBackStackAllowed() {
+                        return false;
+                    }
+
+                    @Override
+                    public FragmentTransaction disallowAddToBackStack() {
+                        return null;
+                    }
+
+                    @Override
+                    public FragmentTransaction setBreadCrumbTitle(int i) {
+                        return null;
+                    }
+
+                    @Override
+                    public FragmentTransaction setBreadCrumbTitle(CharSequence charSequence) {
+                        return null;
+                    }
+
+                    @Override
+                    public FragmentTransaction setBreadCrumbShortTitle(int i) {
+                        return null;
+                    }
+
+                    @Override
+                    public FragmentTransaction setBreadCrumbShortTitle(CharSequence charSequence) {
+                        return null;
+                    }
+
+                    @Override
+                    public int commit() {
+                        return 0;
+                    }
+
+                    @Override
+                    public int commitAllowingStateLoss() {
+                        return 0;
+                    }
+
+                    @Override
+                    public FragmentTransaction setCustomAnimations(int i, int i1, int i2, int i3) {
+                        return this;
+                    }
+                };
+            }
+
+            @Override
+            public boolean executePendingTransactions() {
+                return false;
+            }
+
+            @Override
+            public Fragment findFragmentById(int i) {
+                return null;
+            }
+
+            @Override
+            public Fragment findFragmentByTag(String s) {
+                return null;
+            }
+
+            @Override
+            public void popBackStack() {
+            }
+
+            @Override
+            public boolean popBackStackImmediate() {
+                return false;
+            }
+
+            @Override
+            public void popBackStack(String s, int i) {
+            }
+
+            @Override
+            public boolean popBackStackImmediate(String s, int i) {
+                return false;
+            }
+
+            @Override
+            public void popBackStack(int i, int i1) {
+            }
+
+            @Override
+            public boolean popBackStackImmediate(int i, int i1) {
+                return false;
+            }
+
+            @Override
+            public int getBackStackEntryCount() {
+                return 0;
+            }
+
+            @Override
+            public BackStackEntry getBackStackEntryAt(int i) {
+                return null;
+            }
+
+            @Override
+            public void removeOnBackStackChangedListener(OnBackStackChangedListener onBackStackChangedListener) {
+            }
+
+            @Override
+            public void putFragment(Bundle bundle, String s, Fragment fragment) {
+            }
+
+            @Override
+            public Fragment getFragment(Bundle bundle, String s) {
+                return null;
+            }
+
+            @Override
+            public SavedState saveFragmentInstanceState(Fragment fragment) {
+                return null;
+            }
+
+            @Override
+            public void dump(String s, FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strings) {
+            }
+
+			//@Override
+			public boolean isDestroyed() {
+				// TODO Auto-generated method stub
+				return false;
+			}
+        };
+    }
+
+
+}
diff --git a/roboguice/src/test/java/roboguice/fragment/provided/FragmentInjectionTest.java b/roboguice/src/test/java/roboguice/fragment/provided/FragmentInjectionTest.java
new file mode 100644
index 000000000..221744d20
--- /dev/null
+++ b/roboguice/src/test/java/roboguice/fragment/provided/FragmentInjectionTest.java
@@ -0,0 +1,235 @@
+package roboguice.fragment.provided;
+
+import static org.hamcrest.CoreMatchers.equalTo;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertThat;
+import junit.framework.Assert;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import roboguice.activity.RoboActivity;
+import roboguice.inject.InjectView;
+import roboguice.test.RobolectricRoboTestRunner;
+
+import com.google.inject.Inject;
+
+import android.app.Activity;
+import android.content.Context;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+
+@RunWith(RobolectricRoboTestRunner.class)
+public class FragmentInjectionTest {
+
+	@Test
+    public void shadowActivityGetApplicationContextShouldNotReturnNull() {
+        Assert.assertNotNull(new Activity().getApplicationContext());
+    }
+	
+    @Test
+    public void shouldInjectPojosAndViewsIntoFragments() {
+        final ActivityA activity = new ActivityA();
+        activity.onCreate(null);
+        activity.fragmentRef.onViewCreated(activity.fragmentRef.onCreateView(null,null,null), null);
+
+        assertNotNull(activity.fragmentRef.ref);
+        assertThat(activity.fragmentRef.v, equalTo(activity.fragmentRef.ref));
+        assertThat(activity.fragmentRef.context,equalTo((Context)activity));
+    }
+
+
+    @Test
+    public void shouldBeAbleToInjectViewsIntoActivityAndFragment() {
+        final ActivityB activity = new ActivityB();
+        activity.onCreate(null);
+        activity.fragmentRef.onViewCreated(activity.fragmentRef.onCreateView(null,null,null), null);
+
+        assertNotNull(activity.fragmentRef.viewRef);
+        assertNotNull(activity.viewRef);
+        assertThat(activity.fragmentRef.v, equalTo(activity.fragmentRef.viewRef));
+        assertThat(activity.v, equalTo(activity.viewRef));
+    }
+
+
+    @Test(expected = NullPointerException.class)
+    public void shouldNotBeAbleToInjectFragmentViewsIntoActivity() {
+        final ActivityC activity = new ActivityC();
+        activity.onCreate(null);
+        activity.fragmentRef.onViewCreated(activity.fragmentRef.onCreateView(null,null,null), null);
+    }
+
+
+    @Test
+    public void shouldNotCrashWhenRotatingScreen() {
+        final ActivityD activity1 = new ActivityD();
+        final ActivityD activity2 = new ActivityD();
+
+        activity1.onCreate(null);
+        activity1.onResume();
+        activity1.fragmentRef.onViewCreated(activity1.fragmentRef.onCreateView(null,null,null), null);
+
+        assertNotNull(activity1.fragmentRef.ref);
+        assertThat(activity1.fragmentRef.v, equalTo(activity1.fragmentRef.ref));
+
+        activity1.onPause();
+
+        activity2.onCreate(null); // crash here?
+        activity2.onResume();
+        activity2.fragmentRef.onViewCreated(activity2.fragmentRef.onCreateView(null,null,null), null);
+
+        assertNotNull(activity2.fragmentRef.ref);
+        assertThat(activity2.fragmentRef.v, equalTo(activity2.fragmentRef.ref));
+    }
+
+
+
+    public static class ActivityA extends RoboActivity {
+        FragmentA fragmentRef;
+
+        @Override
+        protected void onCreate(Bundle savedInstanceState) {
+            super.onCreate(savedInstanceState);
+
+            fragmentRef = new FragmentA();
+            fragmentRef.onAttach(this);
+            fragmentRef.onCreate(null);
+
+        }
+
+        public static class FragmentA extends RoboFragment {
+            @InjectView(101) View v;
+            @Inject Context context;
+
+            View ref;
+
+            @Override
+            public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+                ref = new View(getActivity());
+                ref.setId(101);
+                return ref;
+            }
+        }
+
+    }
+
+
+    public static class ActivityB extends RoboActivity {
+        @InjectView(100) View v;
+
+        View viewRef;
+        FragmentB fragmentRef;
+
+        @Override
+        protected void onCreate(Bundle savedInstanceState) {
+            super.onCreate(savedInstanceState);
+
+            viewRef =  new View(this);
+            viewRef.setId(100);
+            setContentView(viewRef);
+
+            fragmentRef = new FragmentB();
+            fragmentRef.onAttach(this);
+            fragmentRef.onCreate(null);
+
+        }
+
+        public static class FragmentB extends RoboFragment {
+            @InjectView(101) View v;
+
+            View viewRef;
+
+            @Override
+            public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+                viewRef = new View(getActivity());
+                viewRef.setId(101);
+                return viewRef;
+            }
+        }
+
+    }
+
+    public static class ActivityC extends RoboActivity {
+        @InjectView(101) View v;
+
+        View viewRef;
+        FragmentC fragmentRef;
+
+        @Override
+        protected void onCreate(Bundle savedInstanceState) {
+            super.onCreate(savedInstanceState);
+            setContentView( new View(this) );
+
+
+            fragmentRef = new FragmentC();
+            fragmentRef.onAttach(this);
+            fragmentRef.onCreate(null);
+
+        }
+
+        public static class FragmentC extends RoboFragment {
+            @InjectView(101) View v;
+
+            View viewRef;
+
+            @Override
+            public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+                viewRef = new View(getActivity());
+                viewRef.setId(101);
+                return viewRef;
+            }
+        }
+
+    }
+
+
+
+    public static class ActivityD extends RoboActivity {
+        FragmentD fragmentRef;
+
+        @Override
+        protected void onCreate(Bundle savedInstanceState) {
+            super.onCreate(savedInstanceState);
+
+            fragmentRef = new FragmentD();
+            fragmentRef.onAttach(this);
+            fragmentRef.onCreate(null);
+
+            setContentView(new FrameLayout(this));
+            
+        }
+
+        @Override
+        protected void onPause() {
+            super.onPause();
+        }
+
+        @Override
+        protected void onResume() {
+            super.onResume();
+        }
+
+        public static class FragmentD extends RoboFragment {
+            @InjectView(101) View v;
+
+            View ref;
+
+            @Override
+            public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+                ref = new View(getActivity());
+                ref.setId(101);
+                return ref;
+            }
+
+            @Override
+            public void onCreate(Bundle savedInstanceState) {
+                super.onCreate(savedInstanceState);
+            }
+        }
+
+    }
+
+}
