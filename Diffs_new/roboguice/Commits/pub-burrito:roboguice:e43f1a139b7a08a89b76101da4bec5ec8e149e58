diff --git a/roboguice/src/main/java/roboguice/android/RoboGuice.java b/roboguice/src/main/java/roboguice/android/DroidGuice.java
similarity index 91%
rename from roboguice/src/main/java/roboguice/android/RoboGuice.java
rename to roboguice/src/main/java/roboguice/android/DroidGuice.java
index 277433f30..02f59c7e0 100644
--- a/roboguice/src/main/java/roboguice/android/RoboGuice.java
+++ b/roboguice/src/main/java/roboguice/android/DroidGuice.java
@@ -31,8 +31,8 @@
  * 
  * BUG hashmap should also key off of stage and modules list
  */
-@SuppressWarnings({"ALL"})
-public class RoboGuice {
+
+public class DroidGuice {
     public static Stage DEFAULT_STAGE = Stage.PRODUCTION;
 
     protected static WeakHashMap<Application,Injector> injectors = new WeakHashMap<Application,Injector>();
@@ -40,7 +40,7 @@
     protected static WeakHashMap<Application,ViewListener> viewListeners = new WeakHashMap<Application, ViewListener>();
     protected static int modulesResourceId = 0;
     
-    private RoboGuice() {
+    private DroidGuice() {
     }
 
     /**
@@ -51,7 +51,7 @@ public static Injector getBaseApplicationInjector(Application application) {
         if( rtrn!=null )
             return rtrn;
 
-        synchronized (RoboGuice.class) {
+        synchronized (DroidGuice.class) {
             rtrn = injectors.get(application);
             if( rtrn!=null )
                 return rtrn;
@@ -68,11 +68,11 @@ public static Injector getBaseApplicationInjector(Application application) {
      * RoboGuice.setAppliationInjector( app, RoboGuice.DEFAULT_STAGE, Modules.override(RoboGuice.newDefaultRoboModule(app)).with(new MyModule() );
      *
      * @see com.google.inject.util.Modules#override(com.google.inject.Module...)
-     * @see roboguice.android.RoboGuice#setBaseApplicationInjector(android.app.Application, com.google.inject.Stage, com.google.inject.Module...)
-     * @see roboguice.android.RoboGuice#newDefaultRoboModule(android.app.Application)
-     * @see roboguice.android.RoboGuice#DEFAULT_STAGE
+     * @see roboguice.android.DroidGuice#setBaseApplicationInjector(android.app.Application, com.google.inject.Stage, com.google.inject.Module...)
+     * @see roboguice.android.DroidGuice#newDefaultRoboModule(android.app.Application)
+     * @see roboguice.android.DroidGuice#DEFAULT_STAGE
      *
-     * If using this method with test cases, be sure to call {@link roboguice.android.RoboGuice.util#reset()} in your test teardown methods
+     * If using this method with test cases, be sure to call {@link roboguice.android.DroidGuice.util#reset()} in your test teardown methods
      * to avoid polluting our other tests with your custom injector.  Don't do this in your real application though.
      *
      */
@@ -90,7 +90,7 @@ public Void visit(StaticInjectionRequest element) {
             });
         }
 
-        synchronized (RoboGuice.class) {
+        synchronized (DroidGuice.class) {
             final Injector rtrn = Guice.createInjector(stage, modules);
             injectors.put(application,rtrn);
             return rtrn;
@@ -102,7 +102,7 @@ public Void visit(StaticInjectionRequest element) {
      * This is a static value.
      */
     public static void setModulesResourceId(int modulesResourceId) {
-        RoboGuice.modulesResourceId = modulesResourceId;
+        DroidGuice.modulesResourceId = modulesResourceId;
     }
 
     /**
@@ -110,7 +110,7 @@ public static void setModulesResourceId(int modulesResourceId) {
      */
     public static Injector setBaseApplicationInjector(Application application, Stage stage) {
 
-        synchronized (RoboGuice.class) {
+        synchronized (DroidGuice.class) {
             int id = modulesResourceId;
             if (id == 0)
                 id = application.getResources().getIdentifier("roboguice_modules", "array", application.getPackageName());
@@ -171,7 +171,7 @@ public static DefaultRoboModule newDefaultRoboModule(final Application applicati
     protected static ResourceListener getResourceListener( Application application ) {
         ResourceListener resourceListener = resourceListeners.get(application);
         if( resourceListener==null ) {
-            synchronized (RoboGuice.class) {
+            synchronized (DroidGuice.class) {
                 if( resourceListener==null ) {
                     resourceListener = new ResourceListener(application);
                     resourceListeners.put(application,resourceListener);
@@ -184,7 +184,7 @@ protected static ResourceListener getResourceListener( Application application )
     protected static ViewListener getViewListener( final Application application ) {
         ViewListener viewListener = viewListeners.get(application);
         if( viewListener==null ) {
-            synchronized (RoboGuice.class) {
+            synchronized (DroidGuice.class) {
                 if( viewListener==null ) {
                     viewListener = new ViewListener();
                     viewListeners.put(application,viewListener);
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboAccountAuthenticatorActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboAccountAuthenticatorActivity.java
index 99c31c1f7..0913918ae 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboAccountAuthenticatorActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboAccountAuthenticatorActivity.java
@@ -17,7 +17,7 @@
 
 package roboguice.android.activity;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 import roboguice.android.activity.event.*;
 import roboguice.android.event.EventManager;
 import roboguice.android.inject.ContentViewListener;
@@ -49,7 +49,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = DroidGuice.getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -101,7 +101,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                RoboGuice.destroyInjector(this);
+                DroidGuice.destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -118,7 +118,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        DroidGuice.getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboActivity.java
index 90a5b9fcf..b59e94ec7 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboActivity.java
@@ -15,7 +15,7 @@
  */
 package roboguice.android.activity;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 import roboguice.android.activity.event.*;
 import roboguice.android.event.EventManager;
 import roboguice.android.inject.ContentViewListener;
@@ -73,7 +73,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = DroidGuice.getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -125,7 +125,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                RoboGuice.destroyInjector(this);
+                DroidGuice.destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -142,7 +142,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        DroidGuice.getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboActivityGroup.java b/roboguice/src/main/java/roboguice/android/activity/RoboActivityGroup.java
index d71ce085b..dac88a54c 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboActivityGroup.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboActivityGroup.java
@@ -15,7 +15,7 @@
  */
 package roboguice.android.activity;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 import roboguice.android.activity.event.*;
 import roboguice.android.event.EventManager;
 import roboguice.android.inject.ContentViewListener;
@@ -50,7 +50,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = DroidGuice.getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -102,7 +102,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                RoboGuice.destroyInjector(this);
+                DroidGuice.destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -119,7 +119,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        DroidGuice.getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboExpandableListActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboExpandableListActivity.java
index 2c9d0a49b..16699ddda 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboExpandableListActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboExpandableListActivity.java
@@ -15,7 +15,7 @@
  */
 package roboguice.android.activity;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 import roboguice.android.activity.event.*;
 import roboguice.android.event.EventManager;
 import roboguice.android.inject.ContentViewListener;
@@ -51,7 +51,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = DroidGuice.getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -103,7 +103,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                RoboGuice.destroyInjector(this);
+                DroidGuice.destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -120,7 +120,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        DroidGuice.getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboFragmentActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboFragmentActivity.java
index 87e1779e3..4b55476a6 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboFragmentActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboFragmentActivity.java
@@ -15,7 +15,7 @@
  */
 package roboguice.android.activity;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 import roboguice.android.activity.event.*;
 import roboguice.android.event.EventManager;
 import roboguice.android.inject.ContentViewListener;
@@ -42,7 +42,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = DroidGuice.getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -94,7 +94,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                RoboGuice.destroyInjector(this);
+                DroidGuice.destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -111,7 +111,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        DroidGuice.getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboLauncherActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboLauncherActivity.java
index 75c814e7f..3a3a4b9ee 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboLauncherActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboLauncherActivity.java
@@ -15,7 +15,7 @@
  */
 package roboguice.android.activity;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 import roboguice.android.activity.event.*;
 import roboguice.android.event.EventManager;
 import roboguice.android.inject.ContentViewListener;
@@ -50,7 +50,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = DroidGuice.getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -102,7 +102,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                RoboGuice.destroyInjector(this);
+                DroidGuice.destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -119,7 +119,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        DroidGuice.getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboListActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboListActivity.java
index 20014f784..af6035bda 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboListActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboListActivity.java
@@ -15,7 +15,7 @@
  */
 package roboguice.android.activity;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 import roboguice.android.activity.event.*;
 import roboguice.android.event.EventManager;
 import roboguice.android.inject.ContentViewListener;
@@ -50,7 +50,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = DroidGuice.getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -102,7 +102,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                RoboGuice.destroyInjector(this);
+                DroidGuice.destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -119,7 +119,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        DroidGuice.getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboMapActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboMapActivity.java
index ea1bb504d..5906170ea 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboMapActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboMapActivity.java
@@ -15,7 +15,7 @@
  */
 package roboguice.android.activity;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 import roboguice.android.activity.event.*;
 import roboguice.android.event.EventManager;
 import roboguice.android.inject.ContentViewListener;
@@ -50,7 +50,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = DroidGuice.getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -102,7 +102,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                RoboGuice.destroyInjector(this);
+                DroidGuice.destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -119,7 +119,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        DroidGuice.getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboPreferenceActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboPreferenceActivity.java
index fac78529d..60c0aa87a 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboPreferenceActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboPreferenceActivity.java
@@ -15,7 +15,7 @@
  */
 package roboguice.android.activity;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 import roboguice.android.activity.event.*;
 import roboguice.android.event.EventManager;
 import roboguice.android.inject.ContentViewListener;
@@ -60,7 +60,7 @@
     /** {@inheritDoc } */
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = DroidGuice.getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         preferenceListener = injector.getInstance(PreferenceListener.class);
         injector.injectMembersWithoutViews(this);
@@ -72,7 +72,7 @@ protected void onCreate(Bundle savedInstanceState) {
     public void setPreferenceScreen(PreferenceScreen preferenceScreen) {
         super.setPreferenceScreen(preferenceScreen);
 
-        final ContextScope scope = RoboGuice.getInjector(this).getInstance(ContextScope.class);
+        final ContextScope scope = DroidGuice.getInjector(this).getInstance(ContextScope.class);
         synchronized (ContextScope.class) {
             scope.enter(this);
             try {
@@ -128,7 +128,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                RoboGuice.destroyInjector(this);
+                DroidGuice.destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -145,7 +145,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        DroidGuice.getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboSplashActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboSplashActivity.java
index 53ecbad5d..1b0e29e2c 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboSplashActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboSplashActivity.java
@@ -1,6 +1,6 @@
 package roboguice.android.activity;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 
 import android.app.Activity;
 import android.app.Application;
@@ -34,7 +34,7 @@ public void run() {
                 // Set the execution context for this thread in case the user
                 // want to use the injector
                 final Application app = getApplication();
-                RoboGuice.getBaseApplicationInjector(getApplication());
+                DroidGuice.getBaseApplicationInjector(getApplication());
 
 
                 doStuffInBackground(app);
diff --git a/roboguice/src/main/java/roboguice/android/activity/RoboTabActivity.java b/roboguice/src/main/java/roboguice/android/activity/RoboTabActivity.java
index fc121c37c..09400f8a0 100644
--- a/roboguice/src/main/java/roboguice/android/activity/RoboTabActivity.java
+++ b/roboguice/src/main/java/roboguice/android/activity/RoboTabActivity.java
@@ -15,7 +15,7 @@
  */
 package roboguice.android.activity;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 import roboguice.android.activity.event.*;
 import roboguice.android.event.EventManager;
 import roboguice.android.inject.ContentViewListener;
@@ -50,7 +50,7 @@
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = DroidGuice.getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -102,7 +102,7 @@ protected void onDestroy() {
             eventManager.fire(new OnDestroyEvent());
         } finally {
             try {
-                RoboGuice.destroyInjector(this);
+                DroidGuice.destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
@@ -119,7 +119,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        DroidGuice.getInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent());
     }
 
diff --git a/roboguice/src/main/java/roboguice/android/config/DefaultRoboModule.java b/roboguice/src/main/java/roboguice/android/config/DefaultRoboModule.java
index 971b15622..e1167a431 100644
--- a/roboguice/src/main/java/roboguice/android/config/DefaultRoboModule.java
+++ b/roboguice/src/main/java/roboguice/android/config/DefaultRoboModule.java
@@ -42,7 +42,7 @@
 
 /**
  * A Module that provides bindings and configuration to use Guice on Android.
- * Used by {@link roboguice.android.RoboGuice}.
+ * Used by {@link roboguice.android.DroidGuice}.
  *
  * If you wish to add your own bindings, DO NOT subclass this class.  Instead, create a new
  * module that extends AbstractModule with your own bindings, then do something like the following:
@@ -50,9 +50,9 @@
  * RoboGuice.setAppliationInjector( app, RoboGuice.DEFAULT_STAGE, Modules.override(RoboGuice.newDefaultRoboModule(app)).with(new MyModule() );
  *
  * @see com.google.inject.util.Modules#override(com.google.inject.Module...)
- * @see roboguice.android.RoboGuice#setBaseApplicationInjector(android.app.Application, com.google.inject.Stage, com.google.inject.Module...)
- * @see roboguice.android.RoboGuice#newDefaultRoboModule(android.app.Application)
- * @see roboguice.android.RoboGuice#DEFAULT_STAGE
+ * @see roboguice.android.DroidGuice#setBaseApplicationInjector(android.app.Application, com.google.inject.Stage, com.google.inject.Module...)
+ * @see roboguice.android.DroidGuice#newDefaultRoboModule(android.app.Application)
+ * @see roboguice.android.DroidGuice#DEFAULT_STAGE
  *
  * @author Mike Burton
  */
diff --git a/roboguice/src/main/java/roboguice/android/content/RoboAsyncTaskLoader.java b/roboguice/src/main/java/roboguice/android/content/RoboAsyncTaskLoader.java
index 85c2a2265..3d5cb08e1 100644
--- a/roboguice/src/main/java/roboguice/android/content/RoboAsyncTaskLoader.java
+++ b/roboguice/src/main/java/roboguice/android/content/RoboAsyncTaskLoader.java
@@ -1,6 +1,6 @@
 package roboguice.android.content;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 
 import android.content.Context;
 import android.support.v4.content.AsyncTaskLoader;
@@ -13,7 +13,7 @@
 
     public RoboAsyncTaskLoader(Context context) {
         super(context);
-        RoboGuice.injectMembers(context, this);
+        DroidGuice.injectMembers(context, this);
     }
     
 }
diff --git a/roboguice/src/main/java/roboguice/android/content/RoboContentProvider.java b/roboguice/src/main/java/roboguice/android/content/RoboContentProvider.java
index 0bd7b2717..027e8044a 100644
--- a/roboguice/src/main/java/roboguice/android/content/RoboContentProvider.java
+++ b/roboguice/src/main/java/roboguice/android/content/RoboContentProvider.java
@@ -1,6 +1,6 @@
 package roboguice.android.content;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 
 import android.content.ContentProvider;
 
@@ -14,7 +14,7 @@
 
     @Override
     public boolean onCreate() {
-        RoboGuice.getInjector(getContext()).injectMembers(this);
+        DroidGuice.getInjector(getContext()).injectMembers(this);
         return true;
     }
 }
diff --git a/roboguice/src/main/java/roboguice/android/content/RoboLoader.java b/roboguice/src/main/java/roboguice/android/content/RoboLoader.java
index 7ff21bef1..ccac06883 100644
--- a/roboguice/src/main/java/roboguice/android/content/RoboLoader.java
+++ b/roboguice/src/main/java/roboguice/android/content/RoboLoader.java
@@ -1,6 +1,6 @@
 package roboguice.android.content;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 
 import android.content.Context;
 import android.support.v4.content.Loader;
@@ -13,7 +13,7 @@
 
     public RoboLoader(Context context) {
         super(context);
-        RoboGuice.injectMembers(context, this);
+        DroidGuice.injectMembers(context, this);
     }
 
 }
diff --git a/roboguice/src/main/java/roboguice/android/fragment/RoboDialogFragment.java b/roboguice/src/main/java/roboguice/android/fragment/RoboDialogFragment.java
index 9672a955e..6557744f4 100644
--- a/roboguice/src/main/java/roboguice/android/fragment/RoboDialogFragment.java
+++ b/roboguice/src/main/java/roboguice/android/fragment/RoboDialogFragment.java
@@ -1,6 +1,6 @@
 package roboguice.android.fragment;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 
 import android.os.Bundle;
 import android.support.v4.app.DialogFragment;
@@ -10,12 +10,12 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        DroidGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
+        DroidGuice.getInjector(getActivity()).injectViewMembers(this);
     }
 }
diff --git a/roboguice/src/main/java/roboguice/android/fragment/RoboFragment.java b/roboguice/src/main/java/roboguice/android/fragment/RoboFragment.java
index 472e12e95..587fbb000 100644
--- a/roboguice/src/main/java/roboguice/android/fragment/RoboFragment.java
+++ b/roboguice/src/main/java/roboguice/android/fragment/RoboFragment.java
@@ -1,6 +1,6 @@
 package roboguice.android.fragment;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
@@ -10,12 +10,12 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        DroidGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
+        DroidGuice.getInjector(getActivity()).injectViewMembers(this);
     }
 }
diff --git a/roboguice/src/main/java/roboguice/android/fragment/RoboListFragment.java b/roboguice/src/main/java/roboguice/android/fragment/RoboListFragment.java
index 98bacbb61..26480c685 100644
--- a/roboguice/src/main/java/roboguice/android/fragment/RoboListFragment.java
+++ b/roboguice/src/main/java/roboguice/android/fragment/RoboListFragment.java
@@ -1,6 +1,6 @@
 package roboguice.android.fragment;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 
 import android.os.Bundle;
 import android.support.v4.app.ListFragment;
@@ -10,12 +10,12 @@
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        DroidGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
+        DroidGuice.getInjector(getActivity()).injectViewMembers(this);
     }
 }
diff --git a/roboguice/src/main/java/roboguice/android/inject/ExtrasListener.java b/roboguice/src/main/java/roboguice/android/inject/ExtrasListener.java
index 4862e8a19..d9ac61a39 100644
--- a/roboguice/src/main/java/roboguice/android/inject/ExtrasListener.java
+++ b/roboguice/src/main/java/roboguice/android/inject/ExtrasListener.java
@@ -15,7 +15,7 @@
  */
 package roboguice.android.inject;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 
 import android.app.Activity;
 import android.content.Context;
@@ -96,7 +96,7 @@ public void injectMembers(T instance) {
 
             value = extras.get(id);
 
-            value = convert(field, value, RoboGuice.getBaseApplicationInjector(activity.getApplication()));
+            value = convert(field, value, DroidGuice.getBaseApplicationInjector(activity.getApplication()));
 
             /*
              * Please notice : null checking is done AFTER conversion. Having
diff --git a/roboguice/src/main/java/roboguice/android/receiver/RoboBroadcastReceiver.java b/roboguice/src/main/java/roboguice/android/receiver/RoboBroadcastReceiver.java
index 94cb8185f..18d24653f 100644
--- a/roboguice/src/main/java/roboguice/android/receiver/RoboBroadcastReceiver.java
+++ b/roboguice/src/main/java/roboguice/android/receiver/RoboBroadcastReceiver.java
@@ -1,6 +1,6 @@
 package roboguice.android.receiver;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 
 import android.app.Application;
 import android.content.BroadcastReceiver;
@@ -21,7 +21,7 @@
      */
     @Override
     public final void onReceive(Context context, Intent intent) {
-        final Injector injector = RoboGuice.getBaseApplicationInjector((Application) context.getApplicationContext());
+        final Injector injector = DroidGuice.getBaseApplicationInjector((Application) context.getApplicationContext());
 
         injector.injectMembers(this);
         handleReceive(context, intent);
diff --git a/roboguice/src/main/java/roboguice/android/service/RoboIntentService.java b/roboguice/src/main/java/roboguice/android/service/RoboIntentService.java
index 2dc9b055b..5cb44cf68 100644
--- a/roboguice/src/main/java/roboguice/android/service/RoboIntentService.java
+++ b/roboguice/src/main/java/roboguice/android/service/RoboIntentService.java
@@ -1,6 +1,6 @@
 package roboguice.android.service;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 import roboguice.android.event.EventManager;
 import roboguice.android.service.event.OnConfigurationChangedEvent;
 import roboguice.android.service.event.OnCreateEvent;
@@ -54,7 +54,7 @@ public RoboIntentService(String name) {
 
     @Override
     public void onCreate() {
-        final Injector injector = RoboGuice.getInjector(this);
+        final Injector injector = DroidGuice.getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembers(this);
         super.onCreate();
@@ -75,7 +75,7 @@ public void onDestroy() {
                 eventManager.fire(new OnDestroyEvent() );
         } finally {
             try {
-                RoboGuice.destroyInjector(this);
+                DroidGuice.destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
diff --git a/roboguice/src/main/java/roboguice/android/service/RoboService.java b/roboguice/src/main/java/roboguice/android/service/RoboService.java
index a8b0cf172..8ab713726 100644
--- a/roboguice/src/main/java/roboguice/android/service/RoboService.java
+++ b/roboguice/src/main/java/roboguice/android/service/RoboService.java
@@ -10,7 +10,7 @@
  */
 package roboguice.android.service;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 import roboguice.android.event.EventManager;
 import roboguice.android.service.event.OnConfigurationChangedEvent;
 import roboguice.android.service.event.OnCreateEvent;
@@ -58,7 +58,7 @@
 
     @Override
     public void onCreate() {
-        final Injector injector = RoboGuice.getInjector(this);
+        final Injector injector = DroidGuice.getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembers(this);
         super.onCreate();
@@ -78,7 +78,7 @@ public void onDestroy() {
                 eventManager.fire(new OnDestroyEvent() );
         } finally {
             try {
-                RoboGuice.destroyInjector(this);
+                DroidGuice.destroyInjector(this);
             } finally {
                 super.onDestroy();
             }
diff --git a/roboguice/src/main/java/roboguice/android/util/RoboAsyncTask.java b/roboguice/src/main/java/roboguice/android/util/RoboAsyncTask.java
index e6af2fd3b..c814a0762 100644
--- a/roboguice/src/main/java/roboguice/android/util/RoboAsyncTask.java
+++ b/roboguice/src/main/java/roboguice/android/util/RoboAsyncTask.java
@@ -1,6 +1,6 @@
 package roboguice.android.util;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 
 import android.content.Context;
 import android.os.Handler;
@@ -12,25 +12,25 @@
 
     protected RoboAsyncTask(Context context) {
         this.context = context;
-        RoboGuice.getInjector(context).injectMembers(this);
+        DroidGuice.getInjector(context).injectMembers(this);
     }
 
     protected RoboAsyncTask(Context context, Handler handler) {
         super(handler);
         this.context = context;
-        RoboGuice.getInjector(context).injectMembers(this);
+        DroidGuice.getInjector(context).injectMembers(this);
     }
 
     protected RoboAsyncTask(Context context, Handler handler, Executor executor) {
         super(handler, executor);
         this.context = context;
-        RoboGuice.getInjector(context).injectMembers(this);
+        DroidGuice.getInjector(context).injectMembers(this);
     }
 
     protected RoboAsyncTask(Context context, Executor executor) {
         super(executor);
         this.context = context;
-        RoboGuice.getInjector(context).injectMembers(this);
+        DroidGuice.getInjector(context).injectMembers(this);
     }
 
     public Context getContext() {
diff --git a/roboguice/src/test/java/roboguice/android/RoboGuiceTest.java b/roboguice/src/test/java/roboguice/android/RoboGuiceTest.java
index 339536639..2e6915b2c 100644
--- a/roboguice/src/test/java/roboguice/android/RoboGuiceTest.java
+++ b/roboguice/src/test/java/roboguice/android/RoboGuiceTest.java
@@ -5,7 +5,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 import roboguice.android.activity.RoboActivity;
 import roboguice.android.test.RobolectricRoboTestRunner;
 
@@ -19,31 +19,31 @@
     
     @Before
     public void setup() {
-        RoboGuice.injectors.clear();
+        DroidGuice.injectors.clear();
     }
     
     @Test
     public void destroyInjectorShouldRemoveContext() {
         final Activity activity = new RoboActivity();
-        RoboGuice.getInjector(activity);
+        DroidGuice.getInjector(activity);
         
-        assertThat(RoboGuice.injectors.size(), equalTo(1));
+        assertThat(DroidGuice.injectors.size(), equalTo(1));
         
-        RoboGuice.destroyInjector(activity);
-        assertThat(RoboGuice.injectors.size(), equalTo(1));
+        DroidGuice.destroyInjector(activity);
+        assertThat(DroidGuice.injectors.size(), equalTo(1));
 
-        RoboGuice.destroyInjector(Robolectric.application);
-        assertThat(RoboGuice.injectors.size(), equalTo(0));
+        DroidGuice.destroyInjector(Robolectric.application);
+        assertThat(DroidGuice.injectors.size(), equalTo(0));
     }
 
     @Test
     public void resetShouldRemoveContext() {
         final Activity activity = new RoboActivity();
-        RoboGuice.getInjector(activity);
+        DroidGuice.getInjector(activity);
         
-        assertThat(RoboGuice.injectors.size(), equalTo(1));
+        assertThat(DroidGuice.injectors.size(), equalTo(1));
         
-        RoboGuice.util.reset();
-        assertThat(RoboGuice.injectors.size(), equalTo(0));
+        DroidGuice.util.reset();
+        assertThat(DroidGuice.injectors.size(), equalTo(0));
     }
 }
diff --git a/roboguice/src/test/java/roboguice/android/activity/ActivityInjectionTest.java b/roboguice/src/test/java/roboguice/android/activity/ActivityInjectionTest.java
index d5a0ccb92..501ec8b35 100644
--- a/roboguice/src/test/java/roboguice/android/activity/ActivityInjectionTest.java
+++ b/roboguice/src/test/java/roboguice/android/activity/ActivityInjectionTest.java
@@ -4,7 +4,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 import roboguice.android.activity.RoboActivity;
 import roboguice.android.activity.ActivityInjectionTest.ModuleA.A;
 import roboguice.android.activity.ActivityInjectionTest.ModuleB.B;
@@ -43,7 +43,7 @@
 
     @Before
     public void setup() {
-        RoboGuice.setBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleA());
+        DroidGuice.setBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, DroidGuice.newDefaultRoboModule(Robolectric.application), new ModuleA());
         activity = new DummyActivity();
         activity.setIntent( new Intent(Robolectric.application,DummyActivity.class).putExtra("foobar","goober") );
         activity.onCreate(null);
@@ -87,21 +87,21 @@ public void shouldInjectActivityAndRoboActivity() {
 
     @Test(expected = ConfigurationException.class)
     public void shouldNotStaticallyInjectViews() {
-        RoboGuice.setBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleB());
+        DroidGuice.setBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, DroidGuice.newDefaultRoboModule(Robolectric.application), new ModuleB());
         final B b = new B();
         b.onCreate(null);
     }
 
     @Test(expected = ConfigurationException.class)
     public void shouldNotStaticallyInjectExtras() {
-        RoboGuice.setBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleD());
+        DroidGuice.setBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, DroidGuice.newDefaultRoboModule(Robolectric.application), new ModuleD());
         final D d = new D();
         d.onCreate(null);
     }
 
     @Test(expected = ConfigurationException.class)
     public void shouldNotStaticallyInjectPreferenceViews() {
-        RoboGuice.setBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleC());
+        DroidGuice.setBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, DroidGuice.newDefaultRoboModule(Robolectric.application), new ModuleC());
         final C c = new C();
         c.onCreate(null);
     }
@@ -122,7 +122,7 @@ public void shouldAllowBackgroundThreadsToFinishUsingContextAfterOnDestroy() thr
 
         final BlockingQueue<Context> queue = new ArrayBlockingQueue<Context>(1);
         new Thread()  {
-            final Context context = RoboGuice.getInjector(ref.get()).getInstance(Context.class);
+            final Context context = DroidGuice.getInjector(ref.get()).getInstance(Context.class);
 
             @Override
             public void run() {
@@ -153,7 +153,7 @@ public void shouldBeAbleToGetContextProvidersInBackgroundThreads() throws Except
         f.onCreate(null);
 
         final FutureTask<Context> future = new FutureTask<Context>(new Callable<Context>() {
-            final ContextScopedProvider<Context> contextProvider = RoboGuice.getInjector(f).getInstance(Key.get(new TypeLiteral<ContextScopedProvider<Context>>(){}));
+            final ContextScopedProvider<Context> contextProvider = DroidGuice.getInjector(f).getInstance(Key.get(new TypeLiteral<ContextScopedProvider<Context>>(){}));
             
             @Override
             public Context call() throws Exception {
diff --git a/roboguice/src/test/java/roboguice/android/application/ApplicationInjectionTest.java b/roboguice/src/test/java/roboguice/android/application/ApplicationInjectionTest.java
index 6ff939053..854653801 100644
--- a/roboguice/src/test/java/roboguice/android/application/ApplicationInjectionTest.java
+++ b/roboguice/src/test/java/roboguice/android/application/ApplicationInjectionTest.java
@@ -4,7 +4,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 import roboguice.android.test.RobolectricRoboTestRunner;
 
 import android.app.Application;
@@ -49,7 +49,7 @@ public void shouldBeAbleToInjectContextScopedItemsIntoApplication() {
         @Override
         public void onCreate() {
             super.onCreate();
-            RoboGuice.getInjector(this).injectMembers(this);
+            DroidGuice.getInjector(this).injectMembers(this);
         }
     }
 
@@ -59,7 +59,7 @@ public void onCreate() {
         @Override
         public void onCreate() {
             super.onCreate();
-            RoboGuice.getInjector(this).injectMembers(this);
+            DroidGuice.getInjector(this).injectMembers(this);
         }
     }
 
diff --git a/roboguice/src/test/java/roboguice/android/event/ObservesTypeListenerTest.java b/roboguice/src/test/java/roboguice/android/event/ObservesTypeListenerTest.java
index f14104d0b..85618fd3c 100644
--- a/roboguice/src/test/java/roboguice/android/event/ObservesTypeListenerTest.java
+++ b/roboguice/src/test/java/roboguice/android/event/ObservesTypeListenerTest.java
@@ -5,7 +5,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 import roboguice.android.event.EventManager;
 import roboguice.android.event.Observes;
 import roboguice.android.test.RobolectricRoboTestRunner;
@@ -36,7 +36,7 @@
     @Before
     public void setup() throws NoSuchMethodException {
         app = Robolectric.application;
-        injector = RoboGuice.getInjector(app);
+        injector = DroidGuice.getInjector(app);
 
         eventManager = injector.getInstance(EventManager.class);
 
diff --git a/roboguice/src/test/java/roboguice/android/inject/ContextScopeTest.java b/roboguice/src/test/java/roboguice/android/inject/ContextScopeTest.java
index 36ff63e56..3ba54d59a 100644
--- a/roboguice/src/test/java/roboguice/android/inject/ContextScopeTest.java
+++ b/roboguice/src/test/java/roboguice/android/inject/ContextScopeTest.java
@@ -4,7 +4,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 import roboguice.android.activity.RoboActivity;
 import roboguice.android.inject.ContextScope;
 import roboguice.android.inject.ContextSingleton;
@@ -42,7 +42,7 @@ public void shouldHaveContextInScopeMapAfterOnCreate() throws Exception {
 
     @Test
     public void shouldBeAbleToOpenMultipleScopes() {
-        final ContextScope scope = RoboGuice.getBaseApplicationInjector(Robolectric.application).getInstance(ContextScope.class);
+        final ContextScope scope = DroidGuice.getBaseApplicationInjector(Robolectric.application).getInstance(ContextScope.class);
         final Activity a = new A();
         final Activity b = new B();
 
@@ -54,7 +54,7 @@ public void shouldBeAbleToOpenMultipleScopes() {
 
     @Test(expected = IllegalArgumentException.class)
     public void shouldNotBeAbleToExitTheWrongScope() {
-        final ContextScope scope = RoboGuice.getBaseApplicationInjector(Robolectric.application).getInstance(ContextScope.class);
+        final ContextScope scope = DroidGuice.getBaseApplicationInjector(Robolectric.application).getInstance(ContextScope.class);
         final Activity a = new A();
         final Activity b = new B();
 
diff --git a/roboguice/src/test/java/roboguice/android/inject/SharedPreferencesProviderTest.java b/roboguice/src/test/java/roboguice/android/inject/SharedPreferencesProviderTest.java
index c9df79cab..4ff4ca933 100644
--- a/roboguice/src/test/java/roboguice/android/inject/SharedPreferencesProviderTest.java
+++ b/roboguice/src/test/java/roboguice/android/inject/SharedPreferencesProviderTest.java
@@ -5,7 +5,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 import roboguice.android.activity.RoboActivity;
 import roboguice.android.inject.SharedPreferencesName;
 import roboguice.android.test.RobolectricRoboTestRunner;
@@ -42,7 +42,7 @@ public void shouldInjectDefaultSharedPrefs() throws Exception {
 
     @Test
     public void shouldInjectNamedSharedPrefs() throws Exception {
-        RoboGuice.setBaseApplicationInjector(Robolectric.application,RoboGuice.DEFAULT_STAGE, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleA() );
+        DroidGuice.setBaseApplicationInjector(Robolectric.application,DroidGuice.DEFAULT_STAGE, DroidGuice.newDefaultRoboModule(Robolectric.application), new ModuleA() );
         try {
             
             final A a = new A();
@@ -55,7 +55,7 @@ public void shouldInjectNamedSharedPrefs() throws Exception {
             
             
         } finally {
-            RoboGuice.util.reset();
+            DroidGuice.util.reset();
         }
     }
     
@@ -84,7 +84,7 @@ public void shouldFallbackOnOldDefaultIfPresent() throws Exception {
 
     @Test
     public void shouldNotFallbackOnOldDefaultIfNamedFileSpecified() throws Exception {
-        RoboGuice.setBaseApplicationInjector(Robolectric.application,RoboGuice.DEFAULT_STAGE, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleA() );
+        DroidGuice.setBaseApplicationInjector(Robolectric.application,DroidGuice.DEFAULT_STAGE, DroidGuice.newDefaultRoboModule(Robolectric.application), new ModuleA() );
 
         final File oldDefault = new File("shared_prefs/default.xml");
         final File oldDir = new File("shared_prefs");
@@ -102,7 +102,7 @@ public void shouldNotFallbackOnOldDefaultIfNamedFileSpecified() throws Exception
             assertEquals("FOOBAR", f.get(a.prefs) );
 
         } finally {
-            RoboGuice.util.reset();
+            DroidGuice.util.reset();
             oldDefault.delete();
             oldDir.delete();
         }
diff --git a/roboguice/src/test/java/roboguice/android/view/ViewInjectionTest.java b/roboguice/src/test/java/roboguice/android/view/ViewInjectionTest.java
index d29a686b2..022ccb34b 100644
--- a/roboguice/src/test/java/roboguice/android/view/ViewInjectionTest.java
+++ b/roboguice/src/test/java/roboguice/android/view/ViewInjectionTest.java
@@ -4,7 +4,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import roboguice.android.RoboGuice;
+import roboguice.android.DroidGuice;
 import roboguice.android.activity.RoboActivity;
 import roboguice.android.inject.InjectView;
 import roboguice.android.test.RobolectricRoboTestRunner;
@@ -154,7 +154,7 @@ public ViewA(Context context) {
                 ref.setId(101);
                 addView(ref);
 
-                RoboGuice.getInjector(getContext()).injectMembers(this);
+                DroidGuice.getInjector(getContext()).injectMembers(this);
             }
 
         }
@@ -189,7 +189,7 @@ public ViewA(Context context) {
                 ref.setTag("101");
                 addView(ref);
 
-                RoboGuice.getInjector(getContext()).injectMembers(this);
+                DroidGuice.getInjector(getContext()).injectMembers(this);
             }
 
         }
