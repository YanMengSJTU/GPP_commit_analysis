diff --git a/roboguice/src/main/java/roboguice/base/RoboGuice.java b/roboguice/src/main/java/roboguice/base/RoboGuice.java
index 9df34a2a9..3b7c57c4d 100644
--- a/roboguice/src/main/java/roboguice/base/RoboGuice.java
+++ b/roboguice/src/main/java/roboguice/base/RoboGuice.java
@@ -4,7 +4,9 @@
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.security.InvalidParameterException;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 import java.util.WeakHashMap;
 
 import roboguice.base.config.DefaultRoboModule;
@@ -20,6 +22,9 @@
 import com.google.inject.spi.Elements;
 import com.google.inject.spi.StaticInjectionRequest;
 
+import edu.emory.mathcs.backport.java.util.Arrays;
+import edu.emory.mathcs.backport.java.util.Collections;
+
 /**
  * 
  * <!--
@@ -122,6 +127,10 @@ public Injector getScopedInjector(S scopedObject ) {
         }
     }
     
+    //FIXME: Remove hack once fixes are in place
+    @SuppressWarnings("unchecked")
+    private static Set<Class<?>> inspectedTypesForResourceInjection = Collections.synchronizedSet( new HashSet<Class<?>>() );
+    
     /**
      * Return the cached Injector instance for this application, or create a new one if necessary.
      * If specifying your own modules, you must include a DefaultRoboModule for most things to work properly.
@@ -142,16 +151,54 @@ public Injector setScopedInjector(final S scopedObject, Stage stage, Module... m
 
         // Do a little rewriting on the modules first to
         // add static resource injection
-        for(Element element : Elements.getElements(modules)) {
+        
+        System.out.println("Modules: " + modules.length);
+        System.out.println(" - " + Arrays.asList( modules ));
+        
+        System.out.println("Getting elements...");
+        
+        /*
+         * FIXME: According to https://code.google.com/p/roboguice/issues/detail?id=196
+         * This triggers .configure() on all modules, which will be triggered again below when calling .createInjector()
+         * This also increases depending on the number of modules available, so we might want to save the second, third trip, etc.
+         * by recording these elements internally on the AbstractModule and then when asking it to be configured again, 
+         * we just pull the already configured elements and avoid calling .configure() over and over for an already configured module for a given injector.
+         */
+        List<Element> moduleElements = Elements.getElements(modules);
+        
+        System.out.println("Elements: " + moduleElements.size());
+        
+        /*
+         */
+        for (Element element : moduleElements) {
+            System.out.println("- " + element);
+        }
+        
+        for(Element element : moduleElements) {
             element.acceptVisitor(new DefaultElementVisitor<Void>() {
                 @Override
                 public Void visit(StaticInjectionRequest element) {
-                    getResourceListener(scopedObject).requestStaticInjection(element.getType());
+                    
+                    Class<?> typeToInject = element.getType();
+                    
+                    if ( !inspectedTypesForResourceInjection.contains( typeToInject ) )
+                    {
+                        System.out.println("** StaticInjectionRequest: " + element + " - " + typeToInject);
+                        
+                        /*
+                         * FIXME: This causes us to reflectively scan every field in every class added to the static injection list to try and see if there's any with the InjectResource annotation, which can be costly.
+                         * Let's keep a separately list of StaticResourceInjectionRequests that are created by calling requestStaticResourceInjection, with only the guys we know have resources to be injected.
+                         */
+                        getResourceListener(scopedObject).requestStaticInjection(typeToInject);
+                        
+                        inspectedTypesForResourceInjection.add( typeToInject );
+                    }
+                    
                     return null;
                 }
             });
         }
-
+        
         synchronized (RoboGuice.class) {
             final Injector rtrn = Guice.createInjector(stage, modules);
             injectors.put(scopedObject,rtrn);
