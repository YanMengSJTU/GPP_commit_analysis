diff --git a/astroboy/src/main/java/org/roboguice/astroboy/activity/AstroboyMasterConsole.java b/astroboy/src/main/java/org/roboguice/astroboy/activity/AstroboyMasterConsole.java
index 4ea8e790a..07b6b28c5 100644
--- a/astroboy/src/main/java/org/roboguice/astroboy/activity/AstroboyMasterConsole.java
+++ b/astroboy/src/main/java/org/roboguice/astroboy/activity/AstroboyMasterConsole.java
@@ -60,7 +60,7 @@ public void onCreate(Bundle savedInstanceState) {
         ButterKnife.bind(this);
         RoboGuice.getInjector(this).injectMembers(this);
         long start = System.currentTimeMillis();
-        for (int i = 0; i < 100; i++) {
+        for (int i = 0; i < 10000; i++) {
             RoboGuice.getInjector(this).getInstance(A.class);
         }
         long end = System.currentTimeMillis();
diff --git a/guice/blender/resources/templates/AnnotationDatabaseImpl.vm b/guice/blender/resources/templates/AnnotationDatabaseImpl.vm
index 7b9eeabe9..68ca1560b 100644
--- a/guice/blender/resources/templates/AnnotationDatabaseImpl.vm
+++ b/guice/blender/resources/templates/AnnotationDatabaseImpl.vm
@@ -7,6 +7,7 @@ import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 import com.google.inject.AnnotationDatabase;
+import org.reflection_no_reflection.runtime.BaseReflector;
 
 public class AnnotationDatabaseImpl extends AnnotationDatabase {
 
@@ -105,7 +106,11 @@ public class AnnotationDatabaseImpl extends AnnotationDatabase {
 #foreach( $className in $injectedClasses )
         injectedClasses.add("$className");
 #end
-
     }
 
+    public void fillMapClassToReflector(HashMap<String, BaseReflector> mapClassToReflector) {
+#foreach( $className in $mapClassToReflector.keySet() )
+        mapClassToReflector.put("$className", $mapClassToReflector.get($className));
+#end
+    }
 }
diff --git a/guice/blender/src/com/google/inject/blender/AnnotationDatabaseGenerator.java b/guice/blender/src/com/google/inject/blender/AnnotationDatabaseGenerator.java
index f6c6cfb37..47d7ddc29 100644
--- a/guice/blender/src/com/google/inject/blender/AnnotationDatabaseGenerator.java
+++ b/guice/blender/src/com/google/inject/blender/AnnotationDatabaseGenerator.java
@@ -29,6 +29,7 @@
     private HashMap<String, Map<String, Set<String>>> mapAnnotationToMapClassWithInjectionNameToConstructorSet;
     private HashSet<String> classesContainingInjectionPointsSet;
     private HashSet<String> bindableClasses;
+    private HashMap<String, String> mapClassToReflector;
 
     public void generateAnnotationDatabase(JavaFileObject jfo) throws IOException {
 
@@ -68,6 +69,7 @@ protected VelocityContext createVelocityContext() {
         context.put("mapAnnotationToMapClassWithInjectionNameToMethodSet", mapAnnotationToMapClassWithInjectionNameToMethodSet);
         context.put("mapAnnotationToMapClassWithInjectionNameToConstructorSet", mapAnnotationToMapClassWithInjectionNameToConstructorSet);
         context.put("classesContainingInjectionPointsSet", classesContainingInjectionPointsSet);
+        context.put("mapClassToReflector", mapClassToReflector);
         context.put("injectedClasses", bindableClasses);
         return context;
     }
@@ -127,4 +129,8 @@ public void setClassesContainingInjectionPointsSet(HashSet<String> classesContai
     public void setBindableClasses(HashSet<String> bindableClasses) {
         this.bindableClasses = bindableClasses;
     }
+
+    public void setMapClassToReflector(HashMap<String, String> mapClassToReflector) {
+        this.mapClassToReflector = mapClassToReflector;
+    }
 }
diff --git a/guice/blender/src/com/google/inject/blender/GuiceAnnotationProcessor.java b/guice/blender/src/com/google/inject/blender/GuiceAnnotationProcessor.java
index c1658e4d5..743a2b50e 100644
--- a/guice/blender/src/com/google/inject/blender/GuiceAnnotationProcessor.java
+++ b/guice/blender/src/com/google/inject/blender/GuiceAnnotationProcessor.java
@@ -1,12 +1,10 @@
 package com.google.inject.blender;
 
 import java.io.IOException;
-import java.lang.String;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
-
 import javax.annotation.processing.AbstractProcessor;
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.annotation.processing.RoundEnvironment;
@@ -21,11 +19,11 @@
 import javax.lang.model.type.DeclaredType;
 import javax.lang.model.type.PrimitiveType;
 import javax.lang.model.type.TypeMirror;
-import javax.tools.Diagnostic;
 import javax.tools.JavaFileObject;
 
 /**
  * An annotation processor that detects classes that need to receive injections.
+ *
  * @author MikeBurton
  * @author SNI
  */
@@ -42,82 +40,85 @@
      * Maps each annotation name to an inner map.
      * The inner map maps classes (containing injection points) names to the list of injected field names.
      */
-    private HashMap<String, Map<String, Set<String>> > mapAnnotationToMapClassContainingInjectionToInjectedFieldSet;
+    private HashMap<String, Map<String, Set<String>>> mapAnnotationToMapClassContainingInjectionToInjectedFieldSet;
     /**
      * Maps each annotation name to an inner map.
      * The inner map maps classes (containing injection points) names to the list of injected method names and parameters classes.
      */
-    private HashMap<String, Map<String, Set<String>> > mapAnnotationToMapClassContainingInjectionToInjectedMethodSet;
+    private HashMap<String, Map<String, Set<String>>> mapAnnotationToMapClassContainingInjectionToInjectedMethodSet;
     /**
      * Maps each annotation name to an inner map.
      * The inner map maps classes (containing injection points) names to the list of injected constructors parameters classes.
      */
-    private HashMap<String, Map<String, Set<String>> > mapAnnotationToMapClassContainingInjectionToInjectedConstructorsSet;
+    private HashMap<String, Map<String, Set<String>>> mapAnnotationToMapClassContainingInjectionToInjectedConstructorsSet;
 
     /** Contains all classes that contain injection points. */
     private HashSet<String> classesContainingInjectionPointsSet = new HashSet<String>();
 
-    /** Contains all classes that can be injected into a class with injection points.*/
+    private HashMap<String, String> mapClassToReflector;
+
+    /** Contains all classes that can be injected into a class with injection points. */
     private HashSet<String> bindableClasses;
-    /** Name of the package to generate the annotation database into.*/
+    /** Name of the package to generate the annotation database into. */
     private String annotationDatabasePackageName;
 
     @Override
     public synchronized void init(ProcessingEnvironment processingEnv) {
         super.init(processingEnv);
         annotationDatabasePackageName = processingEnv.getOptions().get("guiceAnnotationDatabasePackageName");
-        mapAnnotationToMapClassContainingInjectionToInjectedFieldSet = new HashMap<String, Map<String,Set<String>> >();
-        mapAnnotationToMapClassContainingInjectionToInjectedMethodSet = new HashMap<String, Map<String,Set<String>> >();
-        mapAnnotationToMapClassContainingInjectionToInjectedConstructorsSet = new HashMap<String, Map<String,Set<String>> >();
+        mapAnnotationToMapClassContainingInjectionToInjectedFieldSet = new HashMap<String, Map<String, Set<String>>>();
+        mapAnnotationToMapClassContainingInjectionToInjectedMethodSet = new HashMap<String, Map<String, Set<String>>>();
+        mapAnnotationToMapClassContainingInjectionToInjectedConstructorsSet = new HashMap<String, Map<String, Set<String>>>();
+        mapClassToReflector = new HashMap<String, String>();
         bindableClasses = new HashSet<String>();
     }
 
     @Override
     public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
         // Not sure why, but sometimes we're getting called with an empty list of annotations.
-        if(annotations.isEmpty())
+        if (annotations.isEmpty()) {
             return false;
+        }
 
-        for( TypeElement annotation : annotations ) {
+        for (TypeElement annotation : annotations) {
             String annotationClassName = getTypeName(annotation);
             //merge the 2 inject annotations
-            if( "javax.inject.Inject".equals(annotationClassName) ) {
+            if ("javax.inject.Inject".equals(annotationClassName)) {
                 annotationClassName = "com.google.inject.Inject";
             }
 
-            for( Element injectionPoint : roundEnv.getElementsAnnotatedWith(annotation)) {
-                if( injectionPoint.getEnclosingElement() instanceof TypeElement && injectionPoint instanceof VariableElement ) {
+            for (Element injectionPoint : roundEnv.getElementsAnnotatedWith(annotation)) {
+                if (injectionPoint.getEnclosingElement() instanceof TypeElement && injectionPoint instanceof VariableElement) {
                     addFieldToAnnotationDatabase(annotationClassName, injectionPoint);
-                } else if( injectionPoint.getEnclosingElement() instanceof ExecutableElement && injectionPoint instanceof VariableElement ) {
+                } else if (injectionPoint.getEnclosingElement() instanceof ExecutableElement && injectionPoint instanceof VariableElement) {
                     addParameterToAnnotationDatabase(annotationClassName, injectionPoint);
-                } else if( injectionPoint instanceof ExecutableElement ) {
+                } else if (injectionPoint instanceof ExecutableElement) {
                     addMethodOrConstructorToAnnotationDatabase(annotationClassName, injectionPoint);
-                } else if( injectionPoint instanceof TypeElement ) {
+                } else if (injectionPoint instanceof TypeElement) {
                     addClassToAnnotationDatabase(injectionPoint);
                 }
             }
         }
 
-
-        for( Map<String, Set<String>> entryAnnotationToclassesContainingInjectionPoints : mapAnnotationToMapClassContainingInjectionToInjectedFieldSet.values() ) {
+        for (Map<String, Set<String>> entryAnnotationToclassesContainingInjectionPoints : mapAnnotationToMapClassContainingInjectionToInjectedFieldSet.values()) {
             classesContainingInjectionPointsSet.addAll(entryAnnotationToclassesContainingInjectionPoints.keySet());
         }
 
-        for( Map<String, Set<String>> entryAnnotationToclassesContainingInjectionPoints : mapAnnotationToMapClassContainingInjectionToInjectedMethodSet.values() ) {
+        for (Map<String, Set<String>> entryAnnotationToclassesContainingInjectionPoints : mapAnnotationToMapClassContainingInjectionToInjectedMethodSet.values()) {
             classesContainingInjectionPointsSet.addAll(entryAnnotationToclassesContainingInjectionPoints.keySet());
         }
 
-        for( Map<String, Set<String>> entryAnnotationToclassesContainingInjectionPoints : mapAnnotationToMapClassContainingInjectionToInjectedConstructorsSet.values() ) {
+        for (Map<String, Set<String>> entryAnnotationToclassesContainingInjectionPoints : mapAnnotationToMapClassContainingInjectionToInjectedConstructorsSet.values()) {
             classesContainingInjectionPointsSet.addAll(entryAnnotationToclassesContainingInjectionPoints.keySet());
         }
 
         JavaFileObject jfo;
         try {
             String className = "AnnotationDatabaseImpl";
-            if( annotationDatabasePackageName != null && !annotationDatabasePackageName.isEmpty() ) {
-                className = annotationDatabasePackageName+'.'+className;
+            if (annotationDatabasePackageName != null && !annotationDatabasePackageName.isEmpty()) {
+                className = annotationDatabasePackageName + '.' + className;
             }
-            jfo = processingEnv.getFiler().createSourceFile( className );
+            jfo = processingEnv.getFiler().createSourceFile(className);
             AnnotationDatabaseGenerator annotationDatabaseGenerator = createAnnotationDatabaseGenerator();
             configure(annotationDatabaseGenerator);
             annotationDatabaseGenerator.generateAnnotationDatabase(jfo);
@@ -142,6 +143,7 @@ protected void configure(AnnotationDatabaseGenerator annotationDatabaseGenerator
         annotationDatabaseGenerator.setMapAnnotationToMapClassWithInjectionNameToConstructorSet(mapAnnotationToMapClassContainingInjectionToInjectedConstructorsSet);
         annotationDatabaseGenerator.setMapAnnotationToMapClassWithInjectionNameToMethodSet(mapAnnotationToMapClassContainingInjectionToInjectedMethodSet);
         annotationDatabaseGenerator.setMapAnnotationToMapClassWithInjectionNameToFieldSet(mapAnnotationToMapClassContainingInjectionToInjectedFieldSet);
+        annotationDatabaseGenerator.setMapClassToReflector(mapClassToReflector);
     }
 
     private void addClassToAnnotationDatabase(Element injectionPoint) {
@@ -149,55 +151,68 @@ private void addClassToAnnotationDatabase(Element injectionPoint) {
         String typeElementName = getTypeName(typeElementRequiringScanning);
         //System.out.printf("Type: %s, is injected\n",typeElementName);
         classesContainingInjectionPointsSet.add(typeElementName);
+        addReflector(typeElementName);
     }
 
     private void addFieldToAnnotationDatabase(String annotationClassName, Element injectionPoint) {
         String injectionPointName;
         String injectedClassName = getTypeName(injectionPoint);
-        bindableClasses.add( injectedClassName );
+        bindableClasses.add(injectedClassName);
+
+        addReflector(injectedClassName);
+
         injectionPointName = injectionPoint.getSimpleName().toString();
 
         TypeElement typeElementRequiringScanning = (TypeElement) injectionPoint.getEnclosingElement();
         String typeElementName = getTypeName(typeElementRequiringScanning);
+        addReflector(typeElementName);
         //System.out.printf("Type: %s, injection: %s \n",typeElementName, injectionPointName);
         addToInjectedFields(annotationClassName, typeElementName, injectionPointName);
     }
 
+    private void addReflector(String clazzName) {
+        if (clazzName.startsWith("org.roboguice.astroboy")) {
+            String reflectorCreateInstanceStatement = "new " + clazzName + "$$Reflector()";
+            System.out.println("Reflector found for type " + clazzName);
+            mapClassToReflector.put(clazzName, reflectorCreateInstanceStatement);
+        }
+    }
+
     private void addParameterToAnnotationDatabase(String annotationClassName, Element injectionPoint) {
         Element enclosing = injectionPoint.getEnclosingElement();
         String injectionPointName = enclosing.getSimpleName().toString();
-        for( VariableElement variable : ((ExecutableElement)enclosing).getParameters() ) {
+        for (VariableElement variable : ((ExecutableElement) enclosing).getParameters()) {
             String parameterTypeName = getTypeName(variable);
-            bindableClasses.add( parameterTypeName );
-            injectionPointName += ":"+parameterTypeName;
+            bindableClasses.add(parameterTypeName);
+            injectionPointName += ":" + parameterTypeName;
         }
 
         TypeElement typeElementRequiringScanning = (TypeElement) ((ExecutableElement) injectionPoint.getEnclosingElement()).getEnclosingElement();
         String typeElementName = getTypeName(typeElementRequiringScanning);
         //System.out.printf("Type: %s, injection: %s \n",typeElementName, injectionPointName);
-        if( injectionPointName.startsWith("<init>") ) {
-            addToInjectedConstructors(annotationClassName, typeElementName, injectionPointName );
+        if (injectionPointName.startsWith("<init>")) {
+            addToInjectedConstructors(annotationClassName, typeElementName, injectionPointName);
         } else {
-            addToInjectedMethods(annotationClassName, typeElementName, injectionPointName );
+            addToInjectedMethods(annotationClassName, typeElementName, injectionPointName);
         }
     }
 
     private void addMethodOrConstructorToAnnotationDatabase(String annotationClassName, Element injectionPoint) {
         String injectionPointName = injectionPoint.getSimpleName().toString();
-        for( VariableElement variable : ((ExecutableElement)injectionPoint).getParameters() ) {
-            String parameterTypeName = getTypeName((TypeElement)((DeclaredType)variable.asType()).asElement());
-            bindableClasses.add( parameterTypeName );
-            injectionPointName += ":"+parameterTypeName;
+        for (VariableElement variable : ((ExecutableElement) injectionPoint).getParameters()) {
+            String parameterTypeName = getTypeName((TypeElement) ((DeclaredType) variable.asType()).asElement());
+            bindableClasses.add(parameterTypeName);
+            injectionPointName += ":" + parameterTypeName;
         }
 
         TypeElement typeElementRequiringScanning = (TypeElement) injectionPoint.getEnclosingElement();
         String typeElementName = getTypeName(typeElementRequiringScanning);
 
         //System.out.printf("Type: %s, injection: %s \n",typeElementName, injectionPointName);
-        if( injectionPointName.startsWith("<init>") ) {
-            addToInjectedConstructors(annotationClassName, typeElementName, injectionPointName );
+        if (injectionPointName.startsWith("<init>")) {
+            addToInjectedConstructors(annotationClassName, typeElementName, injectionPointName);
         } else {
-            addToInjectedMethods(annotationClassName, typeElementName, injectionPointName );
+            addToInjectedMethods(annotationClassName, typeElementName, injectionPointName);
         }
     }
 
@@ -213,9 +228,8 @@ protected void addToInjectedFields(String annotationClassName, String typeElemen
         addToInjectedMembers(annotationClassName, typeElementName, injectionPointName, mapAnnotationToMapClassContainingInjectionToInjectedFieldSet);
     }
 
-
     private String getTypeName(TypeElement typeElementRequiringScanning) {
-        if( typeElementRequiringScanning.getEnclosingElement() instanceof TypeElement ) {
+        if (typeElementRequiringScanning.getEnclosingElement() instanceof TypeElement) {
             return getTypeName(typeElementRequiringScanning.getEnclosingElement()) + "$" + typeElementRequiringScanning.getSimpleName().toString();
         } else {
             return typeElementRequiringScanning.getQualifiedName().toString();
@@ -225,23 +239,23 @@ private String getTypeName(TypeElement typeElementRequiringScanning) {
     private String getTypeName(Element injectionPoint) {
         String injectedClassName = null;
         final TypeMirror fieldTypeMirror = injectionPoint.asType();
-        if( fieldTypeMirror instanceof DeclaredType ) {
-            injectedClassName = getTypeName((TypeElement)((DeclaredType)fieldTypeMirror).asElement());
-        } else if( fieldTypeMirror instanceof PrimitiveType ) {
+        if (fieldTypeMirror instanceof DeclaredType) {
+            injectedClassName = getTypeName((TypeElement) ((DeclaredType) fieldTypeMirror).asElement());
+        } else if (fieldTypeMirror instanceof PrimitiveType) {
             injectedClassName = fieldTypeMirror.getKind().name();
         }
         return injectedClassName;
     }
 
-    private void addToInjectedMembers(String annotationClassName, String typeElementName, String injectionPointName, HashMap<String, Map<String, Set<String>> > mapAnnotationToMapClassWithInjectionNameToMembersSet) {
-        Map<String, Set<String>> mapClassWithInjectionNameToMemberSet = mapAnnotationToMapClassWithInjectionNameToMembersSet.get( annotationClassName );
-        if( mapClassWithInjectionNameToMemberSet == null ) {
+    private void addToInjectedMembers(String annotationClassName, String typeElementName, String injectionPointName, HashMap<String, Map<String, Set<String>>> mapAnnotationToMapClassWithInjectionNameToMembersSet) {
+        Map<String, Set<String>> mapClassWithInjectionNameToMemberSet = mapAnnotationToMapClassWithInjectionNameToMembersSet.get(annotationClassName);
+        if (mapClassWithInjectionNameToMemberSet == null) {
             mapClassWithInjectionNameToMemberSet = new HashMap<String, Set<String>>();
             mapAnnotationToMapClassWithInjectionNameToMembersSet.put(annotationClassName, mapClassWithInjectionNameToMemberSet);
         }
 
         Set<String> injectionPointNameSet = mapClassWithInjectionNameToMemberSet.get(typeElementName);
-        if( injectionPointNameSet == null ) {
+        if (injectionPointNameSet == null) {
             injectionPointNameSet = new HashSet<String>();
             mapClassWithInjectionNameToMemberSet.put(typeElementName, injectionPointNameSet);
         }
diff --git a/guice/core/pom.xml b/guice/core/pom.xml
index 76c7eb6be..ba7a73e32 100644
--- a/guice/core/pom.xml
+++ b/guice/core/pom.xml
@@ -16,7 +16,7 @@
   <dependencies>
     <dependency>
       <groupId>org.reflection_no_reflection</groupId>
-      <artifactId>generator</artifactId>
+      <artifactId>common-lib</artifactId>
       <version>1.0.0-SNAPSHOT</version>
     </dependency>
     <dependency>
diff --git a/guice/core/src/com/google/inject/AnnotationDatabase.java b/guice/core/src/com/google/inject/AnnotationDatabase.java
index 2c20d2eca..de731bb31 100644
--- a/guice/core/src/com/google/inject/AnnotationDatabase.java
+++ b/guice/core/src/com/google/inject/AnnotationDatabase.java
@@ -4,6 +4,7 @@
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
+import org.reflection_no_reflection.runtime.BaseReflector;
 
 public abstract class AnnotationDatabase {
     //TODO add the additional packages here and load database impl classes.
@@ -15,5 +16,6 @@ protected AnnotationDatabase() {}
     public abstract void fillAnnotationClassesAndConstructors(HashMap<String, Map<String, Set<String>>> mapAnnotationToMapClassWithInjectionNameToConstructorSet);
     public abstract void fillClassesContainingInjectionPointSet(HashSet<String> classesContainingInjectionPointsSet);
     public abstract void fillBindableClasses(HashSet<String> injectedClasses);
+    public abstract void fillMapClassToReflector(HashMap<String, BaseReflector> injectedClasses);
 
 }
diff --git a/guice/core/src/com/google/inject/AnnotationDatabaseFinder.java b/guice/core/src/com/google/inject/AnnotationDatabaseFinder.java
index 684f72a75..a684d9614 100644
--- a/guice/core/src/com/google/inject/AnnotationDatabaseFinder.java
+++ b/guice/core/src/com/google/inject/AnnotationDatabaseFinder.java
@@ -4,6 +4,7 @@
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
+import org.reflection_no_reflection.runtime.BaseReflector;
 
 /**
  * Finds all annotation databases. AnnotationDatabase can be generated using RoboGuice annotation compiler.
@@ -24,6 +25,8 @@
     private HashMap<String, Map<String, Set<String>>> mapAnnotationToMapClassContainingInjectionToInjectedFieldSet = new HashMap<String, Map<String, Set<String>>>();
     private HashMap<String, Map<String, Set<String>>> mapAnnotationToMapClassContainingInjectionToInjectedMethodSet = new HashMap<String, Map<String, Set<String>>>();
     private HashMap<String, Map<String, Set<String>>> mapAnnotationToMapClassContainingInjectionToInjectedConstructorSet = new HashMap<String, Map<String, Set<String>>>();
+    private HashMap<String, BaseReflector> mapClassToReflector = new HashMap<String, BaseReflector>();
+
     private HashSet<String> bindableClassesSet = new HashSet<String>();
 
     public AnnotationDatabaseFinder(String[] additionalPackageNames) {
@@ -63,7 +66,12 @@ public AnnotationDatabaseFinder(String[] additionalPackageNames) {
     public HashMap<String, Map<String, Set<String>>> getMapAnnotationToMapClassContainingInjectionToInjectedConstructorSet() {
         return mapAnnotationToMapClassContainingInjectionToInjectedConstructorSet;
     }
-    
+
+    public HashMap<String, BaseReflector> getMapClassToReflector() {
+        return mapClassToReflector;
+    }
+
+
     public Set<String> getBindableClassesSet() {
         return bindableClassesSet;
     }
@@ -81,6 +89,7 @@ private void addAnnotationDatabase(AnnotationDatabase annotationDatabase) {
         annotationDatabase.fillAnnotationClassesAndConstructors(mapAnnotationToMapClassContainingInjectionToInjectedConstructorSet);
         annotationDatabase.fillClassesContainingInjectionPointSet(classesContainingInjectionPointsSet);
         annotationDatabase.fillBindableClasses(bindableClassesSet);
+        annotationDatabase.fillMapClassToReflector(mapClassToReflector);
         //System.out.println(mapAnnotationToMapClassWithInjectionNameToMethodSet.toString());
     }
 
diff --git a/guice/core/src/com/google/inject/spi/InjectionPoint.java b/guice/core/src/com/google/inject/spi/InjectionPoint.java
index e4fab4ca4..475727379 100644
--- a/guice/core/src/com/google/inject/spi/InjectionPoint.java
+++ b/guice/core/src/com/google/inject/spi/InjectionPoint.java
@@ -109,7 +109,7 @@
         errors.throwConfigurationExceptionIfErrorsExist();
 
         dependencies = ImmutableList.<Dependency<?>>of(
-                newDependency(key, Nullability.allowsNull(annotations), -1));
+            newDependency(key, Nullability.allowsNull(annotations), -1));
     }
 
 
@@ -226,20 +226,9 @@ private static BaseReflector initReflector(TypeLiteral<?> declaringType) {
             return null;
         }
         Class c = declaringType.getRawType();
-        BaseReflector baseReflector = map.get(c);
-        if (baseReflector != null) {
-            return baseReflector;
-        }
-        try {
-            Class reflectorClass = Class.forName(c.getName()+"$$Reflector");
-            BaseReflector reflector = (BaseReflector) reflectorClass.newInstance();
-            map.put(c, reflector);
-            return reflector;
-        } catch (Exception e) {
-            e.printStackTrace();
-            System.out.println("Reflector could not be created for type " + declaringType);
-            return null;
-        }
+        final BaseReflector baseReflector = Guice.getAnnotationDatabaseFinder().getMapClassToReflector().get(c.getName());
+        System.out.println("Reflector for type " + declaringType + ": " + baseReflector);
+        return baseReflector;
     }
 
     /**
diff --git a/roboblender/src/main/resources/AnnotationDatabaseImpl.java b/roboblender/src/main/resources/AnnotationDatabaseImpl.java
index 1de756b6a..25e303694 100644
--- a/roboblender/src/main/resources/AnnotationDatabaseImpl.java
+++ b/roboblender/src/main/resources/AnnotationDatabaseImpl.java
@@ -7,6 +7,7 @@
 import java.util.Map;
 import java.util.Set;
 import com.google.inject.AnnotationDatabase;
+import org.reflection_no_reflection.runtime.BaseReflector;
 
 public class AnnotationDatabaseImpl extends AnnotationDatabase {
 
@@ -94,4 +95,10 @@ public void fillInjectableClasses(HashSet<String> injectedClasses) {
 #end
     }
 
+    public void fillMapClassToReflector(HashMap<String, BaseReflector> injectedClasses) {
+#foreach( $className in mapClassToReflector.keySet())
+        mapClassToReflector.put("$className", $mapClassToReflector.get($className));
+#end
+    }
+
 }
diff --git a/roboblender/src/main/resources/templates/RGAnnotationDatabaseImpl.vm b/roboblender/src/main/resources/templates/RGAnnotationDatabaseImpl.vm
index f8cbd7188..a01882ba4 100644
--- a/roboblender/src/main/resources/templates/RGAnnotationDatabaseImpl.vm
+++ b/roboblender/src/main/resources/templates/RGAnnotationDatabaseImpl.vm
@@ -7,6 +7,8 @@ import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 import com.google.inject.AnnotationDatabase;
+import org.reflection_no_reflection.runtime.BaseReflector;
+
 #if( $isUsingFragmentUtil )
 import roboguice.fragment.FragmentUtil;
 #end
@@ -120,4 +122,10 @@ public class AnnotationDatabaseImpl extends AnnotationDatabase {
 #end
     }
 
+      public void fillMapClassToReflector(HashMap<String, BaseReflector> mapClassToReflector) {
+#foreach( $className in $mapClassToReflector.keySet())
+            mapClassToReflector.put("$className", $mapClassToReflector.get($className));
+#end
+        }
+
 }
diff --git a/roboguice/pom.xml b/roboguice/pom.xml
index 89fc6da71..c7ecf0914 100644
--- a/roboguice/pom.xml
+++ b/roboguice/pom.xml
@@ -10,6 +10,10 @@
 		<version>4.0.0-RC1-SNAPSHOT</version>
 	</parent>
 
+	<properties>
+		<rnr.version>1.0.0-SNAPSHOT</rnr.version>
+	</properties>
+
 	<dependencies>
 		<!-- TEST DEPENDENCIES -->
 		<!-- http://stackoverflow.com/a/18463743/693752 -->
@@ -28,6 +32,11 @@
 			<optional>true</optional>
 			<scope>provided</scope>
 		</dependency>
+		<dependency>
+			<groupId>org.reflection_no_reflection</groupId>
+			<artifactId>common-lib</artifactId>
+			<version>${rnr.version}</version>
+		</dependency>
 		<dependency>
 			<groupId>com.google.android</groupId>
 			<artifactId>android</artifactId>
