diff --git a/roboguice/.classpath b/roboguice/.classpath
new file mode 100644
index 000000000..be3ff8e3f
--- /dev/null
+++ b/roboguice/.classpath
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="gen"/>
+	<classpathentry kind="src" path="src/main/java"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
+	<classpathentry kind="lib" path="lib/guice-2.0-no_aop.jar"/>
+	<classpathentry kind="output" path="bin/classes"/>
+</classpath>
diff --git a/roboguice/.project b/roboguice/.project
new file mode 100644
index 000000000..0094aa6a9
--- /dev/null
+++ b/roboguice/.project
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>roboguice2</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
diff --git a/roboguice/libs/android-support-v4.jar b/roboguice/libs/android-support-v4.jar
new file mode 100644
index 000000000..9056828a0
Binary files /dev/null and b/roboguice/libs/android-support-v4.jar differ
diff --git a/roboguice/lint.xml b/roboguice/lint.xml
new file mode 100644
index 000000000..ee0eead5b
--- /dev/null
+++ b/roboguice/lint.xml
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<lint>
+</lint>
\ No newline at end of file
diff --git a/roboguice/project.properties b/roboguice/project.properties
new file mode 100644
index 000000000..4ab125693
--- /dev/null
+++ b/roboguice/project.properties
@@ -0,0 +1,14 @@
+# This file is automatically generated by Android Tools.
+# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
+#
+# This file must be checked in Version Control Systems.
+#
+# To customize properties used by the Ant build system edit
+# "ant.properties", and override values to adapt the script to your
+# project structure.
+#
+# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
+#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
+
+# Project target.
+target=android-19
diff --git a/roboguice/src/main/java/roboguice/inject/ContextScopedRoboInjector.java b/roboguice/src/main/java/roboguice/inject/ContextScopedRoboInjector.java
index 84b773d3d..3b5f316d3 100644
--- a/roboguice/src/main/java/roboguice/inject/ContextScopedRoboInjector.java
+++ b/roboguice/src/main/java/roboguice/inject/ContextScopedRoboInjector.java
@@ -27,7 +27,7 @@ public ContextScopedRoboInjector(Context context, Injector applicationInjector,
         this.scope = delegate.getInstance(ContextScope.class);
     }
 
-    @Override
+
     public Injector createChildInjector(Iterable<? extends Module> modules) {
         synchronized (ContextScope.class) {
             scope.enter(context);
@@ -39,7 +39,7 @@ public Injector createChildInjector(Iterable<? extends Module> modules) {
         }
     }
 
-    @Override
+
     public Injector createChildInjector(Module... modules) {
         synchronized (ContextScope.class) {
             scope.enter(context);
@@ -51,7 +51,7 @@ public Injector createChildInjector(Module... modules) {
         }
     }
 
-    @Override
+
     public <T> List<Binding<T>> findBindingsByType(TypeLiteral<T> type) {
         synchronized (ContextScope.class) {
             scope.enter(context);
diff --git a/roboguice/src/main/java/roboguice/inject/FragmentManagerProvider.java b/roboguice/src/main/java/roboguice/inject/FragmentManagerProvider.java
index fe8c30c76..d7572d122 100644
--- a/roboguice/src/main/java/roboguice/inject/FragmentManagerProvider.java
+++ b/roboguice/src/main/java/roboguice/inject/FragmentManagerProvider.java
@@ -11,7 +11,7 @@
 public class FragmentManagerProvider implements Provider<FragmentManager> {
     @Inject protected Activity activity;
 
-    @Override
+
     public FragmentManager get() {
         // BUG only supports compat library at the moment.  Does not support honeycomb directly yet
         return ((FragmentActivity)activity).getSupportFragmentManager();
diff --git a/roboguice/src/main/java/roboguice/service/RoboIntentService.java b/roboguice/src/main/java/roboguice/service/RoboIntentService.java
index e2cf3eeaf..398236256 100644
--- a/roboguice/src/main/java/roboguice/service/RoboIntentService.java
+++ b/roboguice/src/main/java/roboguice/service/RoboIntentService.java
@@ -83,7 +83,7 @@ public void onConfigurationChanged(Configuration newConfig) {
         eventManager.fire(new OnConfigurationChangedEvent<Service>(this,currentConfig,newConfig) );
     }
 
-    @Override
+
     public Map<Key<?>, Object> getScopedObjectMap() {
         return scopedObjects;
     }
diff --git a/roboguice/src/main/java/roboguice/service/RoboService.java b/roboguice/src/main/java/roboguice/service/RoboService.java
index 095011053..61dc40c32 100644
--- a/roboguice/src/main/java/roboguice/service/RoboService.java
+++ b/roboguice/src/main/java/roboguice/service/RoboService.java
@@ -85,7 +85,7 @@ public void onConfigurationChanged(Configuration newConfig) {
         eventManager.fire(new OnConfigurationChangedEvent<Service>(this,currentConfig, newConfig) );
     }
 
-    @Override
+
     public Map<Key<?>, Object> getScopedObjectMap() {
         return scopedObjects;
     }
diff --git a/roboguice/src/main/java/roboguice/util/AndroidCallable.java b/roboguice/src/main/java/roboguice/util/AndroidCallable.java
index 5baa1454e..0de095e7a 100644
--- a/roboguice/src/main/java/roboguice/util/AndroidCallable.java
+++ b/roboguice/src/main/java/roboguice/util/AndroidCallable.java
@@ -15,7 +15,7 @@
      * Do not call this directly, pass this AndroidCallable to an Executor and this
      * your doInBackground method will be executed in the background thread.
      */
-    @Override
+
     public void run() {
         new AndroidCallableWrapper<ResultT>(null,this, creationLocation).run();
     }
@@ -23,12 +23,12 @@ public void run() {
     /**
      * {@inheritDoc}
      */
-    @Override
+
     public void onPreCall() throws Exception {}
 
     /**
      * {@inheritDoc}
      */
-    @Override
+
     public void onFinally() {}
 }
diff --git a/roboguice/src/main/java/roboguice/util/AndroidCallableWrapper.java b/roboguice/src/main/java/roboguice/util/AndroidCallableWrapper.java
index 03ff3f6f4..c12238979 100644
--- a/roboguice/src/main/java/roboguice/util/AndroidCallableWrapper.java
+++ b/roboguice/src/main/java/roboguice/util/AndroidCallableWrapper.java
@@ -26,7 +26,6 @@ public AndroidCallableWrapper(Handler handler, AndroidCallableI<ResultT> delegat
         this.handler = handler != null ? handler : new Handler(Looper.getMainLooper());
     }
 
-    @Override
     public void run() {
         ResultT result = null;
         Exception exception = null;
@@ -55,7 +54,6 @@ void beforeCall() throws Exception {
             public void run() {
                 try {
                     new Callable() {
-                        @Override
                         public Object call() throws Exception {
                             doOnPreCall();
                             return null;
@@ -79,7 +77,6 @@ public Object call() throws Exception {
 
     void afterCall(final ResultT result, final Exception e) {
         handler.post(new Runnable() {
-            @Override
             public void run() {
                 try {
                     if (e != null) {
diff --git a/roboguice/src/main/java/roboguice/util/LnImpl.java b/roboguice/src/main/java/roboguice/util/LnImpl.java
index 62fff83be..108ce66f8 100644
--- a/roboguice/src/main/java/roboguice/util/LnImpl.java
+++ b/roboguice/src/main/java/roboguice/util/LnImpl.java
@@ -36,12 +36,12 @@ public LnImpl(Application context) {
 
 
 
-    @Override
+
     public int v(Throwable t) {
         return getLoggingLevel() <= Log.VERBOSE ? println(Log.VERBOSE, Log.getStackTraceString(t)) : 0;
     }
 
-    @Override
+
     public int v(Object s1, Object... args) {
         if( getLoggingLevel()> Log.VERBOSE )
             return 0;
@@ -51,7 +51,7 @@ public int v(Object s1, Object... args) {
         return println(Log.VERBOSE, message);
     }
 
-    @Override
+
     public int v(Throwable throwable, Object s1, Object[] args) {
         if( getLoggingLevel()> Log.VERBOSE )
             return 0;
@@ -61,12 +61,12 @@ public int v(Throwable throwable, Object s1, Object[] args) {
         return println(Log.VERBOSE, message);
     }
 
-    @Override
+
     public int d(Throwable t) {
         return getLoggingLevel()<= Log.DEBUG ? println(Log.DEBUG, Log.getStackTraceString(t)) : 0;
     }
 
-    @Override
+
     public int d(Object s1, Object... args) {
         if( getLoggingLevel()> Log.DEBUG )
             return 0;
@@ -76,7 +76,7 @@ public int d(Object s1, Object... args) {
         return println(Log.DEBUG, message);
     }
 
-    @Override
+
     public int d(Throwable throwable, Object s1, Object... args) {
         if( getLoggingLevel()> Log.DEBUG )
             return 0;
@@ -86,12 +86,12 @@ public int d(Throwable throwable, Object s1, Object... args) {
         return println(Log.DEBUG, message);
     }
 
-    @Override
+
     public int i(Throwable t) {
         return getLoggingLevel()<= Log.INFO ? println(Log.INFO, Log.getStackTraceString(t)) : 0;
     }
 
-    @Override
+
     public int i(Throwable throwable, Object s1, Object... args) {
         if( getLoggingLevel()> Log.INFO )
             return 0;
@@ -101,7 +101,7 @@ public int i(Throwable throwable, Object s1, Object... args) {
         return println(Log.INFO, message);
     }
 
-    @Override
+
     public int i(Object s1, Object... args) {
         if( getLoggingLevel()> Log.INFO )
             return 0;
@@ -111,12 +111,12 @@ public int i(Object s1, Object... args) {
         return println(Log.INFO, message);
     }
 
-    @Override
+
     public int w(Throwable t) {
         return getLoggingLevel()<= Log.WARN ? println(Log.WARN, Log.getStackTraceString(t)) : 0;
     }
 
-    @Override
+ 
     public int w(Throwable throwable, Object s1, Object... args) {
         if( getLoggingLevel()> Log.WARN )
             return 0;
@@ -126,7 +126,7 @@ public int w(Throwable throwable, Object s1, Object... args) {
         return println(Log.WARN, message);
     }
 
-    @Override
+ 
     public int w(Object s1, Object... args) {
         if( getLoggingLevel()> Log.WARN )
             return 0;
@@ -136,12 +136,11 @@ public int w(Object s1, Object... args) {
         return println(Log.WARN, message);
     }
 
-    @Override
+
     public int e(Throwable t) {
         return getLoggingLevel()<= Log.ERROR ? println(Log.ERROR, Log.getStackTraceString(t)) : 0;
     }
 
-    @Override
     public int e(Throwable throwable, Object s1, Object... args) {
         if( getLoggingLevel()> Log.ERROR )
             return 0;
@@ -151,7 +150,7 @@ public int e(Throwable throwable, Object s1, Object... args) {
         return println(Log.ERROR, message);
     }
 
-    @Override
+  
     public int e(Object s1, Object... args) {
         if( getLoggingLevel()> Log.ERROR )
             return 0;
@@ -161,17 +160,17 @@ public int e(Object s1, Object... args) {
         return println(Log.ERROR, message);
     }
 
-    @Override
+ 
     public boolean isDebugEnabled() {
         return getLoggingLevel()<= Log.DEBUG;
     }
 
-    @Override
+  
     public boolean isVerboseEnabled() {
         return getLoggingLevel()<= Log.VERBOSE;
     }
 
-    @Override
+  
     public String logLevelToString(int loglevel) {
         switch( loglevel ) {
             case Log.VERBOSE:
diff --git a/roboguice/src/main/java/roboguice/util/SafeAsyncTask.java b/roboguice/src/main/java/roboguice/util/SafeAsyncTask.java
index 1407d90b8..4c2c1ea35 100644
--- a/roboguice/src/main/java/roboguice/util/SafeAsyncTask.java
+++ b/roboguice/src/main/java/roboguice/util/SafeAsyncTask.java
@@ -155,12 +155,12 @@ protected Runnable newTask() {
 
 
     public class SafeAsyncTaskAndroidCallable extends AndroidCallable<ResultT> {
-        @Override
+       
         public ResultT doInBackground() throws Exception {
             return call();
         }
 
-        @Override
+        
         public void onException(Exception e) {
             SafeAsyncTask.this.onException(e);
         }
@@ -179,7 +179,7 @@ public void onPreCall() {
             }
         }
 
-        @Override
+      
         public void onSuccess(ResultT result) {
             try {
                 SafeAsyncTask.this.onSuccess(result);
