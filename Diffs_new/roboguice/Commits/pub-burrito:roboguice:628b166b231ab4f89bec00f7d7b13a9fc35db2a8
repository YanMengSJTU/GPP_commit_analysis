diff --git a/roboguice/src/main/java/roboguice/android/DroidGuice.java b/roboguice/src/main/java/roboguice/android/DroidGuice.java
index 56961015b..e867e6a8b 100644
--- a/roboguice/src/main/java/roboguice/android/DroidGuice.java
+++ b/roboguice/src/main/java/roboguice/android/DroidGuice.java
@@ -1,19 +1,17 @@
 package roboguice.android;
 
 import java.util.ArrayList;
+import java.util.List;
 import java.util.WeakHashMap;
 
 import roboguice.android.config.DefaultRoboModule;
-import roboguice.android.event.EventManager;
 import roboguice.android.inject.ContextScope;
 import roboguice.android.inject.ContextScopedRoboInjector;
 import roboguice.android.inject.RoboInjector;
 import roboguice.android.inject.ViewListener;
 import roboguice.base.RoboGuice;
 
-import com.google.inject.Injector;
 import com.google.inject.Module;
-import com.google.inject.Stage;
 
 import android.app.Application;
 import android.content.Context;
@@ -31,7 +29,7 @@
  * BUG hashmap should also key off of stage and modules list
  */
 
-public class DroidGuice extends RoboGuice<Application> {
+public class DroidGuice extends RoboGuice<Application, Context, DefaultRoboModule> {
     
     protected static WeakHashMap<Application,ViewListener> viewListeners = new WeakHashMap<Application, ViewListener>();
     protected static int modulesResourceId = 0;
@@ -59,59 +57,45 @@ public void setModulesResourceId(int modulesResourceId) {
         DroidGuice.modulesResourceId = modulesResourceId;
     }
 
-    /**
-     * Return the cached Injector instance for this application, or create a new one if necessary.
-     */
-    public Injector setBaseApplicationInjector(Application application, Stage stage) {
-
-        synchronized (DroidGuice.class) {
-            int id = modulesResourceId;
-            if (id == 0)
-                id = application.getResources().getIdentifier("roboguice_modules", "array", application.getPackageName());
-
-            final String[] moduleNames = id>0 ? application.getResources().getStringArray(id) : new String[]{};
-            final ArrayList<Module> modules = new ArrayList<Module>();
-            final DefaultRoboModule defaultRoboModule = newDefaultRoboModule(application);
+    @Override
+    protected List<Module> baseModules(Application application) {
+        
+        int id = modulesResourceId;
+        if (id == 0)
+            id = application.getResources().getIdentifier("roboguice_modules", "array", application.getPackageName());
 
-            modules.add(defaultRoboModule);
+        final String[] moduleNames = id>0 ? application.getResources().getStringArray(id) : new String[]{};
+        final ArrayList<Module> modules = new ArrayList<Module>();
+        final DefaultRoboModule defaultRoboModule = newDefaultRoboModule(application);
 
-            try {
-                for (String name : moduleNames) {
-                    final Class<? extends Module> clazz = Class.forName(name).asSubclass(Module.class);
+        modules.add(defaultRoboModule);
 
-                    try {
-                        modules.add(clazz.getDeclaredConstructor(Context.class).newInstance(application));
-                    } catch( NoSuchMethodException ignored ) {
-                        modules.add( clazz.newInstance() );
-                    }
+        try {
+            for (String name : moduleNames) {
+                final Class<? extends Module> clazz = Class.forName(name).asSubclass(Module.class);
 
+                try {
+                    modules.add(clazz.getDeclaredConstructor(Context.class).newInstance(application));
+                } catch( NoSuchMethodException ignored ) {
+                    modules.add( clazz.newInstance() );
                 }
-            } catch (Exception e) {
-                throw new RuntimeException(e);
-            }
 
-            final Injector rtrn = setScopedInjector(application, stage, modules.toArray(new Module[modules.size()]));
-            injectors.put(application,rtrn);
-            return rtrn;
+            }
+        } catch (Exception e) {
+            throw new RuntimeException(e);
         }
-
+        
+        return modules;
     }
 
-
-    public RoboInjector getInjector(Context context) {
+    @Override
+    public RoboInjector getInjector( Context context ) {
         final Application application = (Application)context.getApplicationContext();
         return new ContextScopedRoboInjector(context, getScopedInjector(application), getViewListener(application));
     }
 
-    /**
-     * A shortcut for RoboGuice.getInjector(context).injectMembers(o);
-     */
-    public <T> T injectMembers( Context context, T t ) {
-        getInjector(context).injectMembers(t);
-        return t;
-    }
-
-    public DefaultRoboModule newDefaultRoboModule(final Application application) {
+    @Override
+    public DefaultRoboModule newDefaultRoboModule( Application application ) {
         return new DefaultRoboModule(application, new ContextScope(application), getViewListener(application), getResourceListener(application));
     }
 
diff --git a/roboguice/src/main/java/roboguice/base/RoboGuice.java b/roboguice/src/main/java/roboguice/base/RoboGuice.java
index 418358238..9e5b9a7da 100644
--- a/roboguice/src/main/java/roboguice/base/RoboGuice.java
+++ b/roboguice/src/main/java/roboguice/base/RoboGuice.java
@@ -1,7 +1,11 @@
 package roboguice.base;
 
+import java.util.List;
 import java.util.WeakHashMap;
 
+import roboguice.android.DroidGuice;
+import roboguice.android.config.DefaultRoboModule;
+import roboguice.android.event.EventManager;
 import roboguice.android.inject.ResourceListener;
 
 import com.google.inject.Guice;
@@ -20,15 +24,17 @@
  * -->
  * TODO Description
  * 
- * @param <T> Injection scope
+ * @param <S> Object which a main {@link Injector} is scoped to
+ * @param <O> Object which multiple {@link Injector}s are scoped bye
+ * @param <R> Specific {@link DefaultRoboModule} impl
  */
-public class RoboGuice<T>{
+public abstract class RoboGuice<S, O, R extends DefaultRoboModule>{
     public static Stage DEFAULT_STAGE = Stage.PRODUCTION;
     
-    protected WeakHashMap<T,Injector> injectors = new WeakHashMap<T,Injector>();
-    protected WeakHashMap<T,ResourceListener> resourceListeners = new WeakHashMap<T, ResourceListener>();
+    protected WeakHashMap<S,Injector> injectors = new WeakHashMap<S,Injector>();
+    protected WeakHashMap<S,ResourceListener> resourceListeners = new WeakHashMap<S, ResourceListener>();
     
-    public WeakHashMap<T, Injector> injectors()
+    public WeakHashMap<S, Injector> injectors()
     {
         return injectors;
     }
@@ -36,7 +42,7 @@
     /**
      * Return the cached Injector instance for this application, or create a new one if necessary.
      */
-    public Injector getScopedInjector(T scopedObject ) {
+    public Injector getScopedInjector(S scopedObject ) {
         Injector rtrn = injectors.get(scopedObject);
         if( rtrn!=null )
             return rtrn;
@@ -66,7 +72,7 @@ public Injector getScopedInjector(T scopedObject ) {
      * to avoid polluting our other tests with your custom injector.  Don't do this in your real application though.
      *
      */
-    public Injector setScopedInjector(final T scopedObject, Stage stage, Module... modules) {
+    public Injector setScopedInjector(final S scopedObject, Stage stage, Module... modules) {
 
         // Do a little rewriting on the modules first to
         // add static resource injection
@@ -87,7 +93,44 @@ public Void visit(StaticInjectionRequest element) {
         }
     }
     
-    protected ResourceListener getResourceListener( T scopedObject ) {
+    /**
+     * Return the cached Injector instance for this application, or create a new one if necessary.
+     */
+    public Injector setScopedInjector(S application, Stage stage) {
+
+        synchronized (DroidGuice.class) {
+            
+            List<Module> modules = baseModules(application);
+            final Injector rtrn = setScopedInjector(application, stage, modules.toArray(new Module[modules.size()]));
+            injectors.put(application,rtrn);
+            return rtrn;
+        }
+    }
+    
+    /**
+     * A shortcut for RoboGuice.getInjector(context).injectMembers(o);
+     */
+    public <Z> Z injectMembers( O context, Z s ) {
+        getInjector(context).injectMembers(s);
+        return s;
+    }
+    
+    protected abstract List<Module> baseModules( S application );
+    
+    public void destroyInjector(O context) {
+        final Injector injector = getInjector(context);
+        injector.getInstance(EventManager.class).destroy();
+        injectors.remove(context);
+    }
+    
+    public Injector getInjector( O context )
+    {
+        return Guice.createInjector(DEFAULT_STAGE);
+    }
+    
+    public abstract DefaultRoboModule newDefaultRoboModule( S app );
+    
+    protected ResourceListener getResourceListener( S scopedObject ) {
         ResourceListener resourceListener = resourceListeners.get(scopedObject);
         if( resourceListener==null ) {
             synchronized (RoboGuice.class) {
