diff --git a/.gitignore b/.gitignore
index cc842b101..5f0cb3ae3 100644
--- a/.gitignore
+++ b/.gitignore
@@ -22,6 +22,10 @@ local.properties
 .classpath
 .settings/
 
+#For this eclipse file see
+#roboguice/.settings/org.eclipse.jdt.core.prefs
+#see http://stackoverflow.com/a/15942199/693752
+
 # IntelliJ IDEA files
 *.iml
 .idea/
diff --git a/roboguice/.settings/org.eclipse.jdt.core.prefs b/roboguice/.settings/org.eclipse.jdt.core.prefs
index 687bd2b99..6ce0250b4 100644
--- a/roboguice/.settings/org.eclipse.jdt.core.prefs
+++ b/roboguice/.settings/org.eclipse.jdt.core.prefs
@@ -1,4 +1,10 @@
 eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.annotation.inheritNullAnnotations=disabled
+org.eclipse.jdt.core.compiler.annotation.missingNonNullByDefaultAnnotation=ignore
+org.eclipse.jdt.core.compiler.annotation.nonnull=org.eclipse.jdt.annotation.NonNull
+org.eclipse.jdt.core.compiler.annotation.nonnullbydefault=org.eclipse.jdt.annotation.NonNullByDefault
+org.eclipse.jdt.core.compiler.annotation.nullable=org.eclipse.jdt.annotation.Nullable
+org.eclipse.jdt.core.compiler.annotation.nullanalysis=disabled
 org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
 org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
 org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
@@ -6,9 +12,90 @@ org.eclipse.jdt.core.compiler.compliance=1.6
 org.eclipse.jdt.core.compiler.debug.lineNumber=generate
 org.eclipse.jdt.core.compiler.debug.localVariable=generate
 org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.annotationSuperInterface=warning
 org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.autoboxing=ignore
+org.eclipse.jdt.core.compiler.problem.comparingIdentical=warning
+org.eclipse.jdt.core.compiler.problem.deadCode=warning
+org.eclipse.jdt.core.compiler.problem.deprecation=warning
+org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode=disabled
+org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod=disabled
+org.eclipse.jdt.core.compiler.problem.discouragedReference=warning
+org.eclipse.jdt.core.compiler.problem.emptyStatement=ignore
 org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.problem.explicitlyClosedAutoCloseable=ignore
+org.eclipse.jdt.core.compiler.problem.fallthroughCase=ignore
+org.eclipse.jdt.core.compiler.problem.fatalOptionalError=disabled
+org.eclipse.jdt.core.compiler.problem.fieldHiding=ignore
+org.eclipse.jdt.core.compiler.problem.finalParameterBound=warning
+org.eclipse.jdt.core.compiler.problem.finallyBlockNotCompletingNormally=warning
 org.eclipse.jdt.core.compiler.problem.forbiddenReference=warning
+org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock=warning
+org.eclipse.jdt.core.compiler.problem.includeNullInfoFromAsserts=disabled
+org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod=warning
+org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch=warning
+org.eclipse.jdt.core.compiler.problem.indirectStaticAccess=ignore
+org.eclipse.jdt.core.compiler.problem.localVariableHiding=ignore
+org.eclipse.jdt.core.compiler.problem.methodWithConstructorName=warning
+org.eclipse.jdt.core.compiler.problem.missingDefaultCase=ignore
+org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation=ignore
+org.eclipse.jdt.core.compiler.problem.missingEnumCaseDespiteDefault=disabled
+org.eclipse.jdt.core.compiler.problem.missingHashCodeMethod=ignore
+org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation=ignore
+org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotationForInterfaceMethodImplementation=enabled
+org.eclipse.jdt.core.compiler.problem.missingSerialVersion=warning
+org.eclipse.jdt.core.compiler.problem.missingSynchronizedOnInheritedMethod=ignore
+org.eclipse.jdt.core.compiler.problem.noEffectAssignment=warning
+org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion=warning
+org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral=ignore
+org.eclipse.jdt.core.compiler.problem.nonnullParameterAnnotationDropped=warning
+org.eclipse.jdt.core.compiler.problem.nullAnnotationInferenceConflict=error
+org.eclipse.jdt.core.compiler.problem.nullReference=warning
+org.eclipse.jdt.core.compiler.problem.nullSpecViolation=error
+org.eclipse.jdt.core.compiler.problem.nullUncheckedConversion=warning
+org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod=warning
+org.eclipse.jdt.core.compiler.problem.parameterAssignment=ignore
+org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment=ignore
+org.eclipse.jdt.core.compiler.problem.potentialNullReference=ignore
+org.eclipse.jdt.core.compiler.problem.potentiallyUnclosedCloseable=ignore
+org.eclipse.jdt.core.compiler.problem.rawTypeReference=warning
+org.eclipse.jdt.core.compiler.problem.redundantNullAnnotation=warning
+org.eclipse.jdt.core.compiler.problem.redundantNullCheck=ignore
+org.eclipse.jdt.core.compiler.problem.redundantSpecificationOfTypeArguments=ignore
+org.eclipse.jdt.core.compiler.problem.redundantSuperinterface=ignore
+org.eclipse.jdt.core.compiler.problem.reportMethodCanBePotentiallyStatic=ignore
+org.eclipse.jdt.core.compiler.problem.reportMethodCanBeStatic=ignore
+org.eclipse.jdt.core.compiler.problem.specialParameterHidingField=disabled
+org.eclipse.jdt.core.compiler.problem.staticAccessReceiver=warning
+org.eclipse.jdt.core.compiler.problem.suppressOptionalErrors=disabled
+org.eclipse.jdt.core.compiler.problem.suppressWarnings=enabled
+org.eclipse.jdt.core.compiler.problem.syntacticNullAnalysisForFields=disabled
+org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation=ignore
+org.eclipse.jdt.core.compiler.problem.typeParameterHiding=warning
+org.eclipse.jdt.core.compiler.problem.unavoidableGenericTypeProblems=enabled
+org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation=warning
+org.eclipse.jdt.core.compiler.problem.unclosedCloseable=warning
+org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock=ignore
+org.eclipse.jdt.core.compiler.problem.unhandledWarningToken=ignore
+org.eclipse.jdt.core.compiler.problem.unnecessaryElse=ignore
+org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck=ignore
+org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess=ignore
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException=ignore
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionExemptExceptionAndThrowable=enabled
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionIncludeDocCommentReference=enabled
+org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionWhenOverriding=disabled
+org.eclipse.jdt.core.compiler.problem.unusedImport=warning
+org.eclipse.jdt.core.compiler.problem.unusedLabel=warning
+org.eclipse.jdt.core.compiler.problem.unusedLocal=warning
+org.eclipse.jdt.core.compiler.problem.unusedObjectAllocation=ignore
+org.eclipse.jdt.core.compiler.problem.unusedParameter=ignore
+org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference=enabled
+org.eclipse.jdt.core.compiler.problem.unusedParameterWhenImplementingAbstract=disabled
+org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete=disabled
+org.eclipse.jdt.core.compiler.problem.unusedPrivateMember=warning
+org.eclipse.jdt.core.compiler.problem.unusedTypeParameter=ignore
+org.eclipse.jdt.core.compiler.problem.unusedWarningToken=warning
+org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast=warning
 org.eclipse.jdt.core.compiler.source=1.6
 org.eclipse.jdt.core.formatter.align_type_members_on_columns=false
 org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression=16
diff --git a/roboguice/src/main/java/roboguice/RoboGuice.java b/roboguice/src/main/java/roboguice/RoboGuice.java
index 3e630ec78..d513c427e 100644
--- a/roboguice/src/main/java/roboguice/RoboGuice.java
+++ b/roboguice/src/main/java/roboguice/RoboGuice.java
@@ -146,6 +146,13 @@ public static RoboInjector getInjector(Context context) {
         return t;
     }
 
+    /**
+     * A shortcut for RoboGuice.getInjector(context).injectMembersWithoutViews(o);
+     */
+    public static <T> T injectMembersWithoutViews( Context context, T t ) {
+        getInjector(context).injectMembersWithoutViews(t);
+        return t;
+    }
 
     public static DefaultRoboModule newDefaultRoboModule(final Application application) {
         return new DefaultRoboModule(application, new ContextScope(application), getViewListener(application), getResourceListener(application));
diff --git a/roboguice/src/main/java/roboguice/activity/RoboAccountAuthenticatorActivity.java b/roboguice/src/main/java/roboguice/activity/RoboAccountAuthenticatorActivity.java
index 7bd82c2ab..59d4af6f6 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboAccountAuthenticatorActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboAccountAuthenticatorActivity.java
@@ -156,20 +156,21 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
 
     @Override
     public View onCreateView(String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(name, context, attrs);
+        }
     }
 
     @Override
     public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(parent, name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(parent, name, context, attrs);
+        }
     }
-
-
-
 }
diff --git a/roboguice/src/main/java/roboguice/activity/RoboActionBarActivity.java b/roboguice/src/main/java/roboguice/activity/RoboActionBarActivity.java
index 62c620dbc..b970613e9 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboActionBarActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboActionBarActivity.java
@@ -174,19 +174,21 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
 
     @Override
     public View onCreateView(String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(name, context, attrs);
+        }
     }
 
     @Override
     public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(parent, name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(parent, name, context, attrs);
+        }
     }
-
-
 }
diff --git a/roboguice/src/main/java/roboguice/activity/RoboActivity.java b/roboguice/src/main/java/roboguice/activity/RoboActivity.java
index 73f4d9b4c..7b02e0bed 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboActivity.java
@@ -15,7 +15,6 @@
  */
 package roboguice.activity;
 
-import java.lang.reflect.Constructor;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -174,37 +173,21 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
 
     @Override
     public View onCreateView(String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(name, context, attrs);
+        }
     }
 
     @Override
     public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(parent, name, context, attrs);
-    }
-
-    /**
-     * @return true if name begins with a lowercase character (indicating a package) and it doesn't start with com.android
-     */
-    protected static boolean shouldInjectOnCreateView(String name) {
-        return Character.isLowerCase(name.charAt(0)) && !name.startsWith("com.android") && !name.equals("fragment");
-    }
-
-    protected static View injectOnCreateView(String name, Context context, AttributeSet attrs) {
-        try {
-            final Constructor<?> constructor = Class.forName(name).getConstructor(Context.class, AttributeSet.class);
-            final View view = (View) constructor.newInstance(context, attrs);
-            RoboGuice.getInjector(context).injectMembers(view);
-            RoboGuice.getInjector(context).injectViewMembers(view);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
             return view;
-        } catch (Exception e) {
-            throw new RuntimeException(e);
+        } else {
+            return super.onCreateView(parent, name, context, attrs);
         }
     }
-
 }
diff --git a/roboguice/src/main/java/roboguice/activity/RoboActivityGroup.java b/roboguice/src/main/java/roboguice/activity/RoboActivityGroup.java
index bfa721b7a..42eb9f6c0 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboActivityGroup.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboActivityGroup.java
@@ -169,19 +169,21 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
 
     @Override
     public View onCreateView(String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(name, context, attrs);
+        }
     }
 
     @Override
     public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(parent, name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(parent, name, context, attrs);
+        }
     }
-
-
 }
diff --git a/roboguice/src/main/java/roboguice/activity/RoboExpandableListActivity.java b/roboguice/src/main/java/roboguice/activity/RoboExpandableListActivity.java
index 78e40225d..e3d0730e6 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboExpandableListActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboExpandableListActivity.java
@@ -158,20 +158,21 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
 
     @Override
     public View onCreateView(String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(name, context, attrs);
+        }
     }
 
     @Override
     public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(parent, name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(parent, name, context, attrs);
+        }
     }
-
-
-
 }
diff --git a/roboguice/src/main/java/roboguice/activity/RoboFragmentActivity.java b/roboguice/src/main/java/roboguice/activity/RoboFragmentActivity.java
index 038507641..02f6f5f13 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboFragmentActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboFragmentActivity.java
@@ -146,22 +146,23 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
     public Map<Key<?>, Object> getScopedObjectMap() {
         return scopedObjects;
     }
-
     @Override
     public View onCreateView(String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(name, context, attrs);
+        }
     }
 
     @Override
     public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(parent, name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(parent, name, context, attrs);
+        }
     }
-
-
 }
diff --git a/roboguice/src/main/java/roboguice/activity/RoboLauncherActivity.java b/roboguice/src/main/java/roboguice/activity/RoboLauncherActivity.java
index 91f2b0ec0..5b4a41922 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboLauncherActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboLauncherActivity.java
@@ -157,19 +157,21 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
 
     @Override
     public View onCreateView(String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(name, context, attrs);
+        }
     }
 
     @Override
     public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(parent, name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(parent, name, context, attrs);
+        }
     }
-
-
 }
diff --git a/roboguice/src/main/java/roboguice/activity/RoboListActivity.java b/roboguice/src/main/java/roboguice/activity/RoboListActivity.java
index 48c2d0bd3..c4634b119 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboListActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboListActivity.java
@@ -157,19 +157,21 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
 
     @Override
     public View onCreateView(String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(name, context, attrs);
+        }
     }
 
     @Override
     public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(parent, name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(parent, name, context, attrs);
+        }
     }
-
-
 }
diff --git a/roboguice/src/main/java/roboguice/activity/RoboMapActivity.java b/roboguice/src/main/java/roboguice/activity/RoboMapActivity.java
index 28d6d1a2e..423a59b55 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboMapActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboMapActivity.java
@@ -157,19 +157,21 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
 
     @Override
     public View onCreateView(String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(name, context, attrs);
+        }
     }
 
     @Override
     public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(parent, name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(parent, name, context, attrs);
+        }
     }
-
-
 }
diff --git a/roboguice/src/main/java/roboguice/activity/RoboPreferenceActivity.java b/roboguice/src/main/java/roboguice/activity/RoboPreferenceActivity.java
index ef12511f1..65c7712bd 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboPreferenceActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboPreferenceActivity.java
@@ -184,19 +184,21 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
 
     @Override
     public View onCreateView(String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(name, context, attrs);
+        }
     }
 
     @Override
     public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(parent, name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(parent, name, context, attrs);
+        }
     }
-
-
 }
diff --git a/roboguice/src/main/java/roboguice/activity/RoboSherlockAccountAuthenticatorActivity.java b/roboguice/src/main/java/roboguice/activity/RoboSherlockAccountAuthenticatorActivity.java
index e6acaec79..4c828abd7 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboSherlockAccountAuthenticatorActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboSherlockAccountAuthenticatorActivity.java
@@ -149,19 +149,21 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
 
     @Override
     public View onCreateView(String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(name, context, attrs);
+        }
     }
 
     @Override
     public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(parent, name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(parent, name, context, attrs);
+        }
     }
-
-
 }
diff --git a/roboguice/src/main/java/roboguice/activity/RoboSherlockActivity.java b/roboguice/src/main/java/roboguice/activity/RoboSherlockActivity.java
index 3573f6549..ee28ab70e 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboSherlockActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboSherlockActivity.java
@@ -146,19 +146,21 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
 
     @Override
     public View onCreateView(String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(name, context, attrs);
+        }
     }
 
     @Override
     public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(parent, name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(parent, name, context, attrs);
+        }
     }
-
-
 }
diff --git a/roboguice/src/main/java/roboguice/activity/RoboSherlockFragmentActivity.java b/roboguice/src/main/java/roboguice/activity/RoboSherlockFragmentActivity.java
index 2baa8e34e..cc2dfb2df 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboSherlockFragmentActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboSherlockFragmentActivity.java
@@ -130,19 +130,21 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
 
     @Override
     public View onCreateView(String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(name, context, attrs);
+        }
     }
 
     @Override
     public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(parent, name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(parent, name, context, attrs);
+        }
     }
-
-
 }
diff --git a/roboguice/src/main/java/roboguice/activity/RoboSherlockListActivity.java b/roboguice/src/main/java/roboguice/activity/RoboSherlockListActivity.java
index 0de5cc5bb..52a07af57 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboSherlockListActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboSherlockListActivity.java
@@ -146,19 +146,21 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
 
     @Override
     public View onCreateView(String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(name, context, attrs);
+        }
     }
 
     @Override
     public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(parent, name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(parent, name, context, attrs);
+        }
     }
-
-
 }
diff --git a/roboguice/src/main/java/roboguice/activity/RoboSherlockPreferenceActivity.java b/roboguice/src/main/java/roboguice/activity/RoboSherlockPreferenceActivity.java
index 2c950a8bf..1dfc763e2 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboSherlockPreferenceActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboSherlockPreferenceActivity.java
@@ -73,6 +73,7 @@ protected void onCreate(Bundle savedInstanceState) {
     }
 
     @Override
+    @SuppressWarnings("deprecation")
     public void setPreferenceScreen(PreferenceScreen preferenceScreen) {
         super.setPreferenceScreen(preferenceScreen);
 
@@ -166,19 +167,21 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
 
     @Override
     public View onCreateView(String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(name, context, attrs);
+        }
     }
 
     @Override
     public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(parent, name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(parent, name, context, attrs);
+        }
     }
-
-
 }
diff --git a/roboguice/src/main/java/roboguice/activity/RoboTabActivity.java b/roboguice/src/main/java/roboguice/activity/RoboTabActivity.java
index bdc718fe1..f7e392c2b 100644
--- a/roboguice/src/main/java/roboguice/activity/RoboTabActivity.java
+++ b/roboguice/src/main/java/roboguice/activity/RoboTabActivity.java
@@ -169,19 +169,21 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
 
     @Override
     public View onCreateView(String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(name, context, attrs);
+        }
     }
 
     @Override
     public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(parent, name, context, attrs);
+        View view = RoboGuice.getInjector(this).doInjectOnCreateViewIfNeeded(name, context, attrs);
+        if( view != null ) {
+            return view;
+        } else {
+            return super.onCreateView(parent, name, context, attrs);
+        }
     }
-
-
 }
diff --git a/roboguice/src/main/java/roboguice/event/EventManager.java b/roboguice/src/main/java/roboguice/event/EventManager.java
index 68446c23a..da00fc00a 100644
--- a/roboguice/src/main/java/roboguice/event/EventManager.java
+++ b/roboguice/src/main/java/roboguice/event/EventManager.java
@@ -42,6 +42,7 @@
      * @param listener to be triggered
      * @param <T> event type
      */
+    @SuppressWarnings({ "rawtypes"})
     public <T> void registerObserver( Class<T> event, EventListener listener ) {
         Set<EventListener<?>> observers = registrations.get(event);
         if (observers == null) {
@@ -71,6 +72,7 @@
      * @param listener to be unregistered
      * @param <T> event type
      */
+    @SuppressWarnings({ "rawtypes" })
     public <T> void unregisterObserver(Class<T> event, EventListener<T> listener ) {
 
         final Set<EventListener<?>> observers = registrations.get(event);
@@ -95,6 +97,7 @@
      * @param instance to be unregistered
      * @param event observed
      */
+    @SuppressWarnings({ "rawtypes" })
     public <T> void unregisterObserver(Object instance, Class<T> event) {
 
         final Set<EventListener<?>> observers = registrations.get(event);
@@ -122,6 +125,7 @@
      *
      * @param event observed
      */
+    @SuppressWarnings({ "rawtypes", "unchecked" })
     public void fire(Object event) {
 
         final Set<EventListener<?>> observers = registrations.get(event.getClass());
diff --git a/roboguice/src/main/java/roboguice/event/eventListener/AsynchronousEventListenerDecorator.java b/roboguice/src/main/java/roboguice/event/eventListener/AsynchronousEventListenerDecorator.java
index ffbdc785e..1cfe4b7c8 100644
--- a/roboguice/src/main/java/roboguice/event/eventListener/AsynchronousEventListenerDecorator.java
+++ b/roboguice/src/main/java/roboguice/event/eventListener/AsynchronousEventListenerDecorator.java
@@ -23,6 +23,7 @@ public AsynchronousEventListenerDecorator(Handler handler, EventListener<T> even
         this.eventListener = eventListener;
     }
 
+    @SuppressWarnings("deprecation")
     public void onEvent(T event) {
         new RunnableAsyncTaskAdaptor(handler, new EventListenerRunnable<T>(event, eventListener)).execute();
     }
diff --git a/roboguice/src/main/java/roboguice/event/eventListener/RunnableAsyncTaskAdaptor.java b/roboguice/src/main/java/roboguice/event/eventListener/RunnableAsyncTaskAdaptor.java
index c322139b6..4ac71ebc1 100644
--- a/roboguice/src/main/java/roboguice/event/eventListener/RunnableAsyncTaskAdaptor.java
+++ b/roboguice/src/main/java/roboguice/event/eventListener/RunnableAsyncTaskAdaptor.java
@@ -9,6 +9,7 @@
  *
 * @author John Ericksen
 */
+@SuppressWarnings("deprecation")
 public class RunnableAsyncTaskAdaptor extends SafeAsyncTask<Void> {
 
     protected Runnable runnable;
diff --git a/roboguice/src/main/java/roboguice/inject/ContextScopedRoboInjector.java b/roboguice/src/main/java/roboguice/inject/ContextScopedRoboInjector.java
index 938a5927b..8caa79bc9 100644
--- a/roboguice/src/main/java/roboguice/inject/ContextScopedRoboInjector.java
+++ b/roboguice/src/main/java/roboguice/inject/ContextScopedRoboInjector.java
@@ -1,6 +1,7 @@
 package roboguice.inject;
 
 import java.lang.annotation.Annotation;
+import java.lang.reflect.Constructor;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -18,6 +19,8 @@
 import com.google.inject.spi.TypeConverterBinding;
 
 import android.content.Context;
+import android.util.AttributeSet;
+import android.view.View;
 
 public class ContextScopedRoboInjector implements RoboInjector {
     protected Injector delegate;
@@ -261,4 +264,28 @@ public void injectViewMembers(Object instance) {
             }
         }
     }
+
+    @Override
+    public View doInjectOnCreateViewIfNeeded(String name, Context context, AttributeSet attrs) {
+        if (!shouldInjectOnCreateView(name))
+            return null;
+
+        try {
+            final Constructor<?> constructor = Class.forName(name).getConstructor(Context.class, AttributeSet.class);
+            final View view = (View) constructor.newInstance(context, attrs);
+            injectMembers(view);
+            injectViewMembers(view);
+            return view;
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    /**
+     * @return true if name begins with a lowercase character (indicating a package) and it doesn't start with com.android
+     * and it's not a fragment.
+     */
+    public boolean shouldInjectOnCreateView(String name) {
+        return Character.isLowerCase(name.charAt(0)) && !name.startsWith("com.android") && !name.equals("fragment");
+    }
 }
diff --git a/roboguice/src/main/java/roboguice/inject/PreferenceListener.java b/roboguice/src/main/java/roboguice/inject/PreferenceListener.java
index fc36b44fb..b9d958c7e 100644
--- a/roboguice/src/main/java/roboguice/inject/PreferenceListener.java
+++ b/roboguice/src/main/java/roboguice/inject/PreferenceListener.java
@@ -86,6 +86,7 @@ public void injectMembers(T instance) {
             registerPreferenceForInjection(this);
         }
 
+        @SuppressWarnings("deprecation")
         public void reallyInjectMembers() {
             final T instance = instanceRef.get();
             if( instance==null )
diff --git a/roboguice/src/main/java/roboguice/inject/RoboInjector.java b/roboguice/src/main/java/roboguice/inject/RoboInjector.java
index 4199c7d8e..d61502b5e 100644
--- a/roboguice/src/main/java/roboguice/inject/RoboInjector.java
+++ b/roboguice/src/main/java/roboguice/inject/RoboInjector.java
@@ -2,6 +2,10 @@
 
 import com.google.inject.Injector;
 
+import android.content.Context;
+import android.util.AttributeSet;
+import android.view.View;
+
 /**
  * Describes an enriched interface for RoboGuice injections.
  * Note to maintainers : this class should compile and be accessible to projects 
@@ -17,15 +21,25 @@
      *  <li> it can also be a Fragment (support or native)
      *  <li> it can also be a View (with nesting views)
      * </ul>
-     * Note that this method must be loosly typed in order to accomodate apps built without the support-library.
+     * Note that this method must be loosely typed in order to accomodate apps built without the support-library.
      * @param instance the Activity, Fragment or View.
      * @see {@link InjectView}.
      */
     void injectViewMembers(Object instance);
 
     /**
-     * Inject members, except views, in any kind of Ojbect.
+     * Inject members, except views, in any kind of Object.
      * @param instance a Java object that will receive RoboGuice injections.
      */
     void injectMembersWithoutViews(Object instance);
+
+    /**
+     * Will inject all members, inside a view if {@link #shouldInjectOnCreateView(String)} returns true.
+     * This method allows layout inflation and injection of inflated views from an activity.
+     * @param name the name of the class to instantiate.
+     * @param context the context to create the view.
+     * @param attrs the attributes used to create the view.
+     * @return the view with members (including views) injected.
+     */
+    View doInjectOnCreateViewIfNeeded(String name, Context context, AttributeSet attrs);
 }
diff --git a/roboguice/src/main/java/roboguice/inject/ViewListener.java b/roboguice/src/main/java/roboguice/inject/ViewListener.java
index dc27391d6..98cf09068 100644
--- a/roboguice/src/main/java/roboguice/inject/ViewListener.java
+++ b/roboguice/src/main/java/roboguice/inject/ViewListener.java
@@ -260,6 +260,7 @@ protected static void injectViews(Object activityOrFragment) {
                         viewMembersInjector.reallyInjectMembers(activityOrFragment);
             }
         }
+
     }
 
 }
diff --git a/roboguice/src/main/java/roboguice/util/AndroidCallableWrapper.java b/roboguice/src/main/java/roboguice/util/AndroidCallableWrapper.java
index ea34e24cb..eb99904ec 100644
--- a/roboguice/src/main/java/roboguice/util/AndroidCallableWrapper.java
+++ b/roboguice/src/main/java/roboguice/util/AndroidCallableWrapper.java
@@ -57,7 +57,7 @@ void beforeCall() throws Exception {
         handler.post(new Runnable() {
             public void run() {
                 try {
-                    new Callable() {
+                    new Callable<Object>() {
                         @Override
                         public Object call() throws Exception {
                             doOnPreCall();
@@ -125,8 +125,10 @@ protected void doOnFinally() {
     }
 
 
+    @java.lang.SuppressWarnings("rawtypes")
     static HashMap<Class<? extends AndroidCallableI>, Boolean> isPreCallOverriddenMap = new HashMap<Class<? extends AndroidCallableI>, Boolean>();
 
+    @java.lang.SuppressWarnings("rawtypes")
     static boolean isPreCallOverriden(Class<? extends AndroidCallableI> subClass) {
         try {
             Boolean tmp = isPreCallOverriddenMap.get(subClass);
diff --git a/roboguice/src/main/java/roboguice/util/RoboAsyncTask.java b/roboguice/src/main/java/roboguice/util/RoboAsyncTask.java
index 5c71f84fe..ced99dce2 100644
--- a/roboguice/src/main/java/roboguice/util/RoboAsyncTask.java
+++ b/roboguice/src/main/java/roboguice/util/RoboAsyncTask.java
@@ -7,6 +7,7 @@
 import android.content.Context;
 import android.os.Handler;
 
+@SuppressWarnings("deprecation")
 public abstract class RoboAsyncTask<ResultT> extends SafeAsyncTask<ResultT> {
     protected Context context;
 
diff --git a/roboguice/src/main/java/roboguice/util/SafeAsyncTask.java b/roboguice/src/main/java/roboguice/util/SafeAsyncTask.java
index 8ce7dbb02..9b54334c3 100644
--- a/roboguice/src/main/java/roboguice/util/SafeAsyncTask.java
+++ b/roboguice/src/main/java/roboguice/util/SafeAsyncTask.java
@@ -23,7 +23,6 @@
  * 
  * @param <ResultT>
  */
-@SuppressWarnings("deprecation")
 @Deprecated
 public abstract class SafeAsyncTask<ResultT> implements Callable<ResultT> {
     public static final int DEFAULT_POOL_SIZE = 25;
