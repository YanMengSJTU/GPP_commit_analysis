diff --git a/astroboy/src/main/java/org/roboguice/astroboy/activity/AstroboyMasterConsole.java b/astroboy/src/main/java/org/roboguice/astroboy/activity/AstroboyMasterConsole.java
index ce5f1e502..3e49b9b42 100644
--- a/astroboy/src/main/java/org/roboguice/astroboy/activity/AstroboyMasterConsole.java
+++ b/astroboy/src/main/java/org/roboguice/astroboy/activity/AstroboyMasterConsole.java
@@ -11,6 +11,7 @@
 import roboguice.event.EventManager;
 import roboguice.event.EventProducer;
 import roboguice.event.Observes;
+import roboguice.event.StickyEvent;
 import roboguice.inject.ContentView;
 import roboguice.inject.InjectView;
 import android.content.Intent;
@@ -87,7 +88,8 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
 
                 AstroSpeechEvent event = new AstroSpeechEvent(message);
                 eventManager.fire(event);
-                eventManager.registerProducer(AstroSpeechEvent.class, new AstroSpeechEventProducer(event));
+                // eventManager.registerProducer(AstroSpeechEvent.class, new
+                // AstroSpeechEventProducer(event));
                 return true;
             }
         });
@@ -143,6 +145,7 @@ private void detachFightForcesOfEvilFragment() {
         }
     }
 
+    @StickyEvent
     public class AstroSpeechEvent {
         private String message;
 
diff --git a/roboguice/.settings/org.eclipse.jdt.core.prefs b/roboguice/.settings/org.eclipse.jdt.core.prefs
index 11a9469b8..f4bb307f4 100644
--- a/roboguice/.settings/org.eclipse.jdt.core.prefs
+++ b/roboguice/.settings/org.eclipse.jdt.core.prefs
@@ -1,15 +1,14 @@
-#Thu Nov 26 08:51:00 PST 2009
 eclipse.preferences.version=1
 org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
 org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
-org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.compliance=1.6
 org.eclipse.jdt.core.compiler.debug.lineNumber=generate
 org.eclipse.jdt.core.compiler.debug.localVariable=generate
 org.eclipse.jdt.core.compiler.debug.sourceFile=generate
 org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
 org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
-org.eclipse.jdt.core.compiler.source=1.5
+org.eclipse.jdt.core.compiler.source=1.6
 org.eclipse.jdt.core.formatter.align_type_members_on_columns=false
 org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression=16
 org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant=16
diff --git a/roboguice/src/main/java/roboguice/event/EventManager.java b/roboguice/src/main/java/roboguice/event/EventManager.java
index 39b9a2c41..5a43d72c1 100644
--- a/roboguice/src/main/java/roboguice/event/EventManager.java
+++ b/roboguice/src/main/java/roboguice/event/EventManager.java
@@ -32,8 +32,9 @@
     protected Context context;
 
     protected Map<Class<?>, Set<EventListener<?>>> registrations = new HashMap<Class<?>, Set<EventListener<?>>>(); // synchronized
-                                                                                                                   // set
+    // set
     protected Map<Class<?>, EventProducer<?>> productions = new HashMap<Class<?>, EventProducer<?>>(); // synchronized
+    protected Map<Class<?>, Object> stickyEvents = new HashMap<Class<?>, Object>(); // synchronized
 
     // set
 
@@ -54,7 +55,16 @@
             registrations.put(event, observers);
         }
 
-        if (productions.get(event) != null) {
+        if (stickyEvents.get(event) != null) {
+            // we post a message that will be executed asap bu the main thread
+            // of this event manager's context
+            new Handler(context.getMainLooper()).post(new Runnable() {
+                @Override
+                public void run() {
+                    listener.onEvent(stickyEvents.get(event));
+                }
+            });
+        } else if (productions.get(event) != null) {
             // we post a message that will be executed asap bu the main thread
             // of this event manager's context
             new Handler(context.getMainLooper()).post(new Runnable() {
@@ -188,6 +198,10 @@ public void fire(Object event) {
             }
         }
 
+        if (event.getClass().isAnnotationPresent(StickyEvent.class)) {
+            stickyEvents.put(event.getClass(), event);
+        }
+
     }
 
     public void destroy() {
diff --git a/roboguice/src/main/java/roboguice/event/StickyEvent.java b/roboguice/src/main/java/roboguice/event/StickyEvent.java
new file mode 100644
index 000000000..e5a9c920a
--- /dev/null
+++ b/roboguice/src/main/java/roboguice/event/StickyEvent.java
@@ -0,0 +1,15 @@
+package roboguice.event;
+
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+/**
+ * //TODO
+ */
+@Retention(RUNTIME)
+@Target({ ElementType.TYPE })
+public @interface StickyEvent {
+}
diff --git a/roboguice/src/main/java/roboguice/service/RoboIntentService.java b/roboguice/src/main/java/roboguice/service/RoboIntentService.java
index 45f2593ca..b392bcf5e 100644
--- a/roboguice/src/main/java/roboguice/service/RoboIntentService.java
+++ b/roboguice/src/main/java/roboguice/service/RoboIntentService.java
@@ -1,10 +1,8 @@
 package roboguice.service;
 
-import android.app.IntentService;
-import android.content.Intent;
-import android.content.res.Configuration;
-import com.google.inject.Injector;
-import com.google.inject.Key;
+import java.util.HashMap;
+import java.util.Map;
+
 import roboguice.RoboGuice;
 import roboguice.event.EventManager;
 import roboguice.service.event.OnConfigurationChangedEvent;
@@ -13,64 +11,70 @@
 import roboguice.service.event.OnStartEvent;
 import roboguice.util.RoboContext;
 
-import java.util.HashMap;
-import java.util.Map;
+import com.google.inject.Injector;
+import com.google.inject.Key;
+
+import android.app.IntentService;
+import android.content.Intent;
+import android.content.res.Configuration;
 
 /**
- * A {@link RoboIntentService} extends from {@link IntentService} to provide dynamic
- * injection of collaborators, using Google Guice.<br /> <br />
+ * A {@link RoboIntentService} extends from {@link IntentService} to provide
+ * dynamic injection of collaborators, using Google Guice.<br />
+ * <br />
  * <p/>
- * Your own services that usually extend from {@link IntentService} should now extend from
- * {@link RoboIntentService}.<br /> <br />
+ * Your own services that usually extend from {@link IntentService} should now
+ * extend from {@link RoboIntentService}.<br />
+ * <br />
  * <p/>
- * If we didn't provide what you need, you have two options : either post an issue on <a
- * href="http://code.google.com/p/roboguice/issues/list">the bug tracker</a>, or
- * implement it yourself. Have a look at the source code of this class (
- * {@link RoboIntentService}), you won't have to write that much changes. And of
- * course, you are welcome to contribute and send your implementations to the
- * RoboGuice project.<br /> <br />
+ * If we didn't provide what you need, you have two options : either post an
+ * issue on <a href="http://code.google.com/p/roboguice/issues/list">the bug
+ * tracker</a>, or implement it yourself. Have a look at the source code of this
+ * class ( {@link RoboIntentService}), you won't have to write that much
+ * changes. And of course, you are welcome to contribute and send your
+ * implementations to the RoboGuice project.<br />
+ * <br />
  * <p/>
- * You can have access to the Guice
- * {@link Injector} at any time, by calling {@link #getInjector()}.<br />
+ * You can have access to the Guice {@link Injector} at any time, by calling
+ * {@link #getInjector()}.<br />
  * <p/>
  * However, you will not have access to ContextSingleton scoped beans until
- * {@link #onCreate()} is called. <br /> <br />
- *
+ * {@link #onCreate()} is called. <br />
+ * <br />
+ * 
  * @author Donn Felker
  */
 public abstract class RoboIntentService extends IntentService implements RoboContext {
 
     protected EventManager eventManager;
-    protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
-
-
+    protected HashMap<Key<?>, Object> scopedObjects = new HashMap<Key<?>, Object>();
 
     public RoboIntentService(String name) {
         super(name);
     }
 
-
     @Override
     public void onCreate() {
         final Injector injector = RoboGuice.getInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembers(this);
         super.onCreate();
-        eventManager.fire(new OnCreateEvent() );
+        eventManager.fire(new OnCreateEvent());
     }
 
     @Override
     public int onStartCommand(Intent intent, int flags, int startId) {
         final int startCont = super.onStartCommand(intent, flags, startId);
-        eventManager.fire(new OnStartEvent() );
+        eventManager.fire(new OnStartEvent());
         return startCont;
     }
 
     @Override
     public void onDestroy() {
         try {
-            if(eventManager!=null) // may be null during test: http://code.google.com/p/roboguice/issues/detail?id=140
-                eventManager.fire(new OnDestroyEvent() );
+            if (eventManager != null) {
+                eventManager.fire(new OnDestroyEvent());
+            }
         } finally {
             try {
                 RoboGuice.destroyInjector(this);
@@ -84,7 +88,7 @@ public void onDestroy() {
     public void onConfigurationChanged(Configuration newConfig) {
         final Configuration currentConfig = getResources().getConfiguration();
         super.onConfigurationChanged(newConfig);
-        eventManager.fire(new OnConfigurationChangedEvent(currentConfig,newConfig) );
+        eventManager.fire(new OnConfigurationChangedEvent(currentConfig, newConfig));
     }
 
     @Override
diff --git a/roboguice/src/main/java/roboguice/service/RoboService.java b/roboguice/src/main/java/roboguice/service/RoboService.java
index f3e808f71..5d3f85b20 100644
--- a/roboguice/src/main/java/roboguice/service/RoboService.java
+++ b/roboguice/src/main/java/roboguice/service/RoboService.java
@@ -10,11 +10,9 @@
  */
 package roboguice.service;
 
-import android.app.Service;
-import android.content.Intent;
-import android.content.res.Configuration;
-import com.google.inject.Injector;
-import com.google.inject.Key;
+import java.util.HashMap;
+import java.util.Map;
+
 import roboguice.RoboGuice;
 import roboguice.event.EventManager;
 import roboguice.service.event.OnConfigurationChangedEvent;
@@ -23,36 +21,44 @@
 import roboguice.service.event.OnStartEvent;
 import roboguice.util.RoboContext;
 
-import java.util.HashMap;
-import java.util.Map;
+import com.google.inject.Injector;
+import com.google.inject.Key;
+
+import android.app.Service;
+import android.content.Intent;
+import android.content.res.Configuration;
 
 /**
  * A {@link RoboService} extends from {@link Service} to provide dynamic
- * injection of collaborators, using Google Guice.<br /> <br />
+ * injection of collaborators, using Google Guice.<br />
+ * <br />
+ * 
+ * Your own services that usually extend from {@link Service} should now extend
+ * from {@link RoboService}.<br />
+ * <br />
+ * 
+ * If we didn't provide what you need, you have two options : either post an
+ * issue on <a href="http://code.google.com/p/roboguice/issues/list">the bug
+ * tracker</a>, or implement it yourself. Have a look at the source code of this
+ * class ( {@link RoboService}), you won't have to write that much changes. And
+ * of course, you are welcome to contribute and send your implementations to the
+ * RoboGuice project.<br />
+ * <br />
+ * 
+ * You can have access to the Guice {@link Injector} at any time, by calling
+ * {@link #getInjector()}.<br />
  * 
- * Your own services that usually extend from {@link Service} should now extend from
- * {@link RoboService}.<br /> <br />
- *
- * If we didn't provide what you need, you have two options : either post an issue on <a
- * href="http://code.google.com/p/roboguice/issues/list">the bug tracker</a>, or
- * implement it yourself. Have a look at the source code of this class (
- * {@link RoboService}), you won't have to write that much changes. And of
- * course, you are welcome to contribute and send your implementations to the
- * RoboGuice project.<br /> <br />
- *
- * You can have access to the Guice
- * {@link Injector} at any time, by calling {@link #getInjector()}.<br />
- *
  * However, you will not have access to ContextSingleton scoped beans until
- * {@link #onCreate()} is called. <br /> <br />
- *
+ * {@link #onCreate()} is called. <br />
+ * <br />
+ * 
  * @author Mike Burton
  * @author Christine Karman
  */
 public abstract class RoboService extends Service implements RoboContext {
 
     protected EventManager eventManager;
-    protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
+    protected HashMap<Key<?>, Object> scopedObjects = new HashMap<Key<?>, Object>();
 
     @Override
     public void onCreate() {
@@ -60,12 +66,12 @@ public void onCreate() {
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembers(this);
         super.onCreate();
-        eventManager.fire(new OnCreateEvent() );
+        eventManager.fire(new OnCreateEvent());
     }
 
     @Override
     public int onStartCommand(Intent intent, int flags, int startId) {
-        final int startCont = super.onStartCommand(intent,flags, startId);
+        final int startCont = super.onStartCommand(intent, flags, startId);
         eventManager.fire(new OnStartEvent());
         return startCont;
     }
@@ -73,8 +79,9 @@ public int onStartCommand(Intent intent, int flags, int startId) {
     @Override
     public void onDestroy() {
         try {
-            if(eventManager!=null) // may be null during test: http://code.google.com/p/roboguice/issues/detail?id=140
-                eventManager.fire(new OnDestroyEvent() );
+            if (eventManager != null) {
+                eventManager.fire(new OnDestroyEvent());
+            }
         } finally {
             try {
                 RoboGuice.destroyInjector(this);
@@ -88,7 +95,7 @@ public void onDestroy() {
     public void onConfigurationChanged(Configuration newConfig) {
         final Configuration currentConfig = getResources().getConfiguration();
         super.onConfigurationChanged(newConfig);
-        eventManager.fire(new OnConfigurationChangedEvent(currentConfig, newConfig) );
+        eventManager.fire(new OnConfigurationChangedEvent(currentConfig, newConfig));
     }
 
     @Override
