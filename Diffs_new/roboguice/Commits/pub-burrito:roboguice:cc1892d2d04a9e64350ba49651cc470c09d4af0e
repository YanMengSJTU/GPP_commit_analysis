diff --git a/roboguice/src/main/java/roboguice/android/inject/AndroidResourceListener.java b/roboguice/src/main/java/roboguice/android/inject/AndroidResourceListener.java
index b9f3cd20a..ed261a240 100644
--- a/roboguice/src/main/java/roboguice/android/inject/AndroidResourceListener.java
+++ b/roboguice/src/main/java/roboguice/android/inject/AndroidResourceListener.java
@@ -44,13 +44,13 @@ public AndroidResourceListener(Application application) {
     }
 
     @Override
-    protected <I> ResourceMemberInjector<I> newResourceMember(TypeLiteral<I> typeLiteral, Field field ) {
+    protected <I> ResourceMemberInjector<I> newResourceMemberInjector(TypeLiteral<I> typeLiteral, Field field ) {
         return new AndroidResourceMembersInjector<I>(field, application, field.getAnnotation(InjectResource.class));
     }
 
     @SuppressWarnings("rawtypes")
     @Override
-    protected ResourceMemberInjector newResourceMember( Field field ) {
+    protected ResourceMemberInjector newResourceMemberInjector( Field field ) {
         return new AndroidResourceMembersInjector(field, application, field.getAnnotation(InjectResource.class));
     }
 
diff --git a/roboguice/src/main/java/roboguice/base/inject/ResourceListener.java b/roboguice/src/main/java/roboguice/base/inject/ResourceListener.java
index b33082fc7..9e54a393c 100644
--- a/roboguice/src/main/java/roboguice/base/inject/ResourceListener.java
+++ b/roboguice/src/main/java/roboguice/base/inject/ResourceListener.java
@@ -18,7 +18,7 @@ public ResourceListener() {
         for( Class<?> c = typeLiteral.getRawType(); c!=Object.class; c = c.getSuperclass() )
             for (Field field : c.getDeclaredFields())
                 if ( field.isAnnotationPresent(InjectResource.class) && !Modifier.isStatic(field.getModifiers()) )
-                    typeEncounter.register( newResourceMember( typeLiteral, field ) );
+                    typeEncounter.register( newResourceMemberInjector( typeLiteral, field ) );
 
     }
 
@@ -29,14 +29,14 @@ public void requestStaticInjection(Class<?>... types) {
             for( ; c!=Object.class; c=c.getSuperclass() )
                 for (Field field : c.getDeclaredFields())
                     if (Modifier.isStatic(field.getModifiers()) && field.isAnnotationPresent(InjectResource.class))
-                        newResourceMember( field ).injectMembers(null);
+                        newResourceMemberInjector( field ).injectMembers(null);
 
     }
     
-    protected abstract <I> ResourceMemberInjector<I> newResourceMember( TypeLiteral<I> typeLiteral /*Here to figure out the type*/, Field field );
+    protected abstract <I> ResourceMemberInjector<I> newResourceMemberInjector( TypeLiteral<I> typeLiteral /*Here to figure out the type*/, Field field );
     
     @SuppressWarnings("rawtypes")
-    protected abstract ResourceMemberInjector newResourceMember( Field field );
+    protected abstract ResourceMemberInjector newResourceMemberInjector( Field field );
     
     
     protected static abstract class ResourceMemberInjector<T> implements MembersInjector<T>
diff --git a/roboguice/src/main/java/roboguice/java/inject/JavaResourceListener.java b/roboguice/src/main/java/roboguice/java/inject/JavaResourceListener.java
index 289edf97f..63574f1a8 100644
--- a/roboguice/src/main/java/roboguice/java/inject/JavaResourceListener.java
+++ b/roboguice/src/main/java/roboguice/java/inject/JavaResourceListener.java
@@ -18,13 +18,13 @@ public JavaResourceListener ( String... resourcePaths )
     }
     
     @Override
-    protected <I> ResourceMemberInjector<I> newResourceMember( TypeLiteral<I> typeLiteral, Field field ) {
+    protected <I> ResourceMemberInjector<I> newResourceMemberInjector( TypeLiteral<I> typeLiteral, Field field ) {
         return new JavaMemberResourceInjector<I>(field, field.getAnnotation(InjectResource.class) );
     }
 
     @SuppressWarnings( "rawtypes" )
     @Override
-    protected ResourceMemberInjector newResourceMember( Field field ) {
+    protected ResourceMemberInjector newResourceMemberInjector( Field field ) {
         return new JavaMemberResourceInjector( field, field.getAnnotation(InjectResource.class) );
     }
     
