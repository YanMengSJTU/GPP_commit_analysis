diff --git a/roboguice/.checkstyle b/.checkstyle
similarity index 100%
rename from roboguice/.checkstyle
rename to .checkstyle
diff --git a/roboguice/.externalToolBuilders/New_Builder.launch b/.externalToolBuilders/New_Builder.launch
similarity index 100%
rename from roboguice/.externalToolBuilders/New_Builder.launch
rename to .externalToolBuilders/New_Builder.launch
diff --git a/roboguice/AndroidManifest.xml b/AndroidManifest.xml
similarity index 100%
rename from roboguice/AndroidManifest.xml
rename to AndroidManifest.xml
diff --git a/roboguice/INSTALL.txt b/INSTALL.txt
similarity index 100%
rename from roboguice/INSTALL.txt
rename to INSTALL.txt
diff --git a/additional-tests/AndroidManifest.xml b/additional-tests/AndroidManifest.xml
deleted file mode 100644
index 416dff06a..000000000
--- a/additional-tests/AndroidManifest.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="roboguice.additionaltests" android:versionCode="1" android:versionName="0.1-SNAPSHOT">
-
-    <application android:label="Additional Tests">
-    </application>
-
-</manifest>
-
diff --git a/additional-tests/pom.xml b/additional-tests/pom.xml
deleted file mode 100644
index 3f771cd23..000000000
--- a/additional-tests/pom.xml
+++ /dev/null
@@ -1,134 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-	<modelVersion>4.0.0</modelVersion>
-	<artifactId>additional-tests</artifactId>
-	<packaging>apk</packaging>
-	<name>additional-tests</name>
-
-	<parent>
-		<groupId>org.roboguice</groupId>
-		<artifactId>roboguice-aggregator</artifactId>
-		<version>3.0-alpha-3-SNAPSHOT</version>
-	</parent>
-
-	<dependencies>
-		<!-- TEST DEPENDENCIES -->
-		<!-- http://stackoverflow.com/a/18463743/693752 -->
-
-		<dependency>
-			<groupId>junit</groupId>
-			<artifactId>junit</artifactId>
-			<scope>test</scope>
-		</dependency>
-	    
-		<!-- REGULAR DEPENDENCIES -->
-		<dependency>
-			<groupId>com.google.android</groupId>
-			<artifactId>android</artifactId>
-			<scope>provided</scope>
-		</dependency>
-		<dependency>  <!-- needed to prevent warnings in robolectric tests -->
-			<groupId>com.google.android.maps</groupId>
-			<artifactId>maps</artifactId>
-			<scope>provided</scope>
-			<optional>true</optional>
-		</dependency>
-		<dependency>
-			<groupId>org.roboguice</groupId>
-			<artifactId>roboguice</artifactId>
-			<version>${project.version}</version>
-		</dependency>
-		<dependency>
-			<groupId>com.google.inject</groupId>
-			<artifactId>guice</artifactId>
-			<classifier>no_aop</classifier>
-		</dependency>
-
-
-		<!-- TEST DEPENDENCIES -->
-		<dependency>
-			<groupId>org.robolectric</groupId>
-			<artifactId>robolectric</artifactId>
-			<scope>test</scope>
-		</dependency>
-		<dependency>
-			<groupId>org.mockito</groupId>
-			<artifactId>mockito-core</artifactId>
-			<scope>test</scope>
-		</dependency>
-	</dependencies>
-
-	<build>
-		<plugins>
-			<plugin>
-				<groupId>com.jayway.maven.plugins.android.generation2</groupId>
-				<artifactId>android-maven-plugin</artifactId>
-				<version>${android-maven-plugin.version}</version>
-				<configuration>
-					<androidManifestFile>${project.basedir}/AndroidManifest.xml</androidManifestFile>
-					<assetsDirectory>${project.basedir}/assets</assetsDirectory>
-					<resourceDirectory>${project.basedir}/res</resourceDirectory>
-					<nativeLibrariesDirectory>${project.basedir}/src/main/native</nativeLibrariesDirectory>
-					<sdk>
-						<platform>${android-build.version}</platform>
-					</sdk>
-					<generateApk>false</generateApk>
-					<undeployBeforeDeploy>true</undeployBeforeDeploy>
-				</configuration>
-				<extensions>true</extensions>
-			</plugin>
-
-			<plugin>
-				<artifactId>maven-compiler-plugin</artifactId>
-				<version>${maven-compiler-plugin.version}</version>
-				<configuration>
-					<source>${java.version}</source>
-					<target>${java.version}</target>
-				</configuration>
-			</plugin>
-		</plugins>
-		<pluginManagement>
-			<plugins>
-				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
-				<plugin>
-					<groupId>org.eclipse.m2e</groupId>
-					<artifactId>lifecycle-mapping</artifactId>
-					<version>1.0.0</version>
-					<configuration>
-						<lifecycleMappingMetadata>
-							<pluginExecutions>
-								<pluginExecution>
-									<pluginExecutionFilter>
-										<groupId>
-											com.jayway.maven.plugins.android.generation2
-										</groupId>
-										<artifactId>
-											android-maven-plugin
-										</artifactId>
-										<versionRange>
-											[3.8.2,)
-										</versionRange>
-										<goals>
-											<goal>consume-aar</goal>
-										</goals>
-									</pluginExecutionFilter>
-									<action>
-										<ignore></ignore>
-									</action>
-								</pluginExecution>
-							</pluginExecutions>
-						</lifecycleMappingMetadata>
-					</configuration>
-				</plugin>
-			</plugins>
-		</pluginManagement>
-	</build>
-
-	<repositories>
-		<repository>
-			<id>third.party.closed.source.repo</id>
-			<url>file://${basedir}/../maven_repo_3rd_party</url>
-		</repository>
-	</repositories>
-
-</project>
diff --git a/additional-tests/project.properties b/additional-tests/project.properties
deleted file mode 100644
index a3ee5ab64..000000000
--- a/additional-tests/project.properties
+++ /dev/null
@@ -1,14 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-17
diff --git a/additional-tests/res/layout/should_inject_custom_views.xml b/additional-tests/res/layout/should_inject_custom_views.xml
deleted file mode 100644
index f5ccbf0df..000000000
--- a/additional-tests/res/layout/should_inject_custom_views.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<roboguice.additionaltests.view.ShouldInjectCustomViewsView xmlns:android="http://schemas.android.com/apk/res/android"
-    android:id="@+id/shouldInjectCustomView"
-    android:layout_width="fill_parent"
-    android:layout_height="wrap_content"
-    />
diff --git a/additional-tests/src/test/java/roboguice/additionaltests/ViewInjectionTest.java b/additional-tests/src/test/java/roboguice/additionaltests/ViewInjectionTest.java
deleted file mode 100644
index 5e5815178..000000000
--- a/additional-tests/src/test/java/roboguice/additionaltests/ViewInjectionTest.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package roboguice.additionaltests;
-
-import android.content.Context;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import roboguice.activity.RoboActivity;
-import roboguice.additionaltests.view.ShouldInjectCustomViewsView;
-import roboguice.inject.ContentView;
-
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.junit.Assert.assertThat;
-
-/**
- * These tests require Android resources, so cannot be run
- * from the roboguice module (which is not an android project
- * and has no resource processing step)
- */
-@RunWith(RobolectricTestRunner.class)
-public class ViewInjectionTest {
-
-    @Test
-    public void shouldInjectCustomViews() {
-        final A a = Robolectric.buildActivity(A.class).create().get();
-        final ShouldInjectCustomViewsView customView = (ShouldInjectCustomViewsView) a.findViewById(R.id.shouldInjectCustomView);
-        assertThat(customView.context, equalTo((Context)a));
-        assertThat(customView.textView.getId(), equalTo(100));
-    }
-
-    @ContentView(R.layout.should_inject_custom_views)
-    public static class A extends RoboActivity {
-    }
-
-}
diff --git a/additional-tests/src/test/java/roboguice/additionaltests/view/ShouldInjectCustomViewsView.java b/additional-tests/src/test/java/roboguice/additionaltests/view/ShouldInjectCustomViewsView.java
deleted file mode 100644
index 7a0b4c4ed..000000000
--- a/additional-tests/src/test/java/roboguice/additionaltests/view/ShouldInjectCustomViewsView.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package roboguice.additionaltests.view;
-
-import android.content.Context;
-import android.util.AttributeSet;
-import android.widget.FrameLayout;
-import android.widget.TextView;
-import com.google.inject.Inject;
-import roboguice.inject.InjectView;
-
-public class ShouldInjectCustomViewsView extends FrameLayout {
-    @Inject public Context context;
-    @InjectView(100) public TextView textView;
-
-    public ShouldInjectCustomViewsView(Context context) {
-        this(context, null, 0);
-    }
-
-    public ShouldInjectCustomViewsView(Context context, AttributeSet attrs) {
-        this(context, attrs, 0);
-    }
-
-    public ShouldInjectCustomViewsView(Context context, AttributeSet attrs, int defStyle) {
-        super(context, attrs);
-        final TextView v = new TextView(context,attrs,defStyle);
-        v.setId(100);
-        addView(v);
-    }
-}
diff --git a/astroboy/AndroidManifest.xml b/astroboy/AndroidManifest.xml
deleted file mode 100644
index 3eed41987..000000000
--- a/astroboy/AndroidManifest.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="org.roboguice.astroboy" android:versionCode="1" android:versionName="0.1-SNAPSHOT">
-
-    <uses-sdk android:minSdkVersion="3"/>
-
-    <application android:icon="@drawable/icon" android:label="Astroboy Master Console">
-
-        <activity android:name=".activity.AstroboyMasterConsole">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN"/>
-                <category android:name="android.intent.category.LAUNCHER"/>
-            </intent-filter>
-        </activity>
-
-        <activity android:name=".activity.FightForcesOfEvilActivity"/>
-
-
-    </application>
-
-    <uses-permission android:name="android.permission.VIBRATE" />
-
-</manifest>
-
diff --git a/astroboy/pom.xml b/astroboy/pom.xml
deleted file mode 100644
index cdee1a71f..000000000
--- a/astroboy/pom.xml
+++ /dev/null
@@ -1,134 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-	<modelVersion>4.0.0</modelVersion>
-	<artifactId>astroboy</artifactId>
-	<packaging>apk</packaging>
-	<name>astroboy</name>
-
-	<parent>
-		<groupId>org.roboguice</groupId>
-		<artifactId>roboguice-aggregator</artifactId>
-		<version>3.0-alpha-3-SNAPSHOT</version>
-	</parent>
-
-	<dependencies>
-		<!-- TEST DEPENDENCIES -->
-		<!-- http://stackoverflow.com/a/18463743/693752 -->
-		<dependency>
-			<groupId>junit</groupId>
-			<artifactId>junit</artifactId>
-			<scope>test</scope>
-		</dependency>
-
-
-		<!-- DEPENDENCIES -->
-		<dependency>
-			<groupId>com.google.android</groupId>
-			<artifactId>android</artifactId>
-			<scope>provided</scope>
-		</dependency>
-		<dependency>  <!-- needed to prevent warnings in robolectric tests -->
-			<groupId>com.google.android.maps</groupId>
-			<artifactId>maps</artifactId>
-			<scope>provided</scope>
-			<optional>true</optional>
-		</dependency>
-		<dependency>
-			<groupId>org.roboguice</groupId>
-			<artifactId>roboguice</artifactId>
-			<version>${project.version}</version>
-		</dependency>
-		<dependency>
-			<groupId>com.google.inject</groupId>
-			<artifactId>guice</artifactId>
-			<classifier>no_aop</classifier>
-		</dependency>
-
-
-		<!-- TEST DEPENDENCIES -->
-		<dependency>
-			<groupId>org.robolectric</groupId>
-			<artifactId>robolectric</artifactId>
-			<scope>test</scope>
-		</dependency>
-		<dependency>
-			<groupId>org.mockito</groupId>
-			<artifactId>mockito-core</artifactId>
-			<scope>test</scope>
-		</dependency>
-	</dependencies>
-
-	<build>
-		<plugins>
-			<plugin>
-				<groupId>com.jayway.maven.plugins.android.generation2</groupId>
-				<artifactId>android-maven-plugin</artifactId>
-				<version>${android-maven-plugin.version}</version>
-				<configuration>
-					<androidManifestFile>${project.basedir}/AndroidManifest.xml</androidManifestFile>
-					<assetsDirectory>${project.basedir}/assets</assetsDirectory>
-					<resourceDirectory>${project.basedir}/res</resourceDirectory>
-					<nativeLibrariesDirectory>${project.basedir}/src/main/native</nativeLibrariesDirectory>
-					<sdk>
-						<platform>${android-build.version}</platform>
-					</sdk>
-					<undeployBeforeDeploy>true</undeployBeforeDeploy>
-				</configuration>
-				<extensions>true</extensions>
-			</plugin>
-			<plugin>
-				<artifactId>maven-compiler-plugin</artifactId>
-				<version>${maven-compiler-plugin.version}</version>
-				<configuration>
-					<source>${java.version}</source>
-					<target>${java.version}</target>
-				</configuration>
-			</plugin>
-		</plugins>
-
-		<pluginManagement>
-			<plugins>
-				<!--This plugin's configuration is used to store Eclipse m2e settings 
-					only. It has no influence on the Maven build itself. -->
-				<plugin>
-					<groupId>org.eclipse.m2e</groupId>
-					<artifactId>lifecycle-mapping</artifactId>
-					<version>${lifecycle-mapping-plugin.version}</version>
-					<configuration>
-						<lifecycleMappingMetadata>
-							<pluginExecutions>
-								<pluginExecution>
-									<pluginExecutionFilter>
-										<groupId>
-											com.jayway.maven.plugins.android.generation2
-										</groupId>
-										<artifactId>
-											android-maven-plugin
-										</artifactId>
-										<versionRange>
-											[${android-maven-plugin.version},)
-										</versionRange>
-										<goals>
-											<goal>consume-aar</goal>
-										</goals>
-									</pluginExecutionFilter>
-									<action>
-										<ignore />
-									</action>
-								</pluginExecution>
-							</pluginExecutions>
-						</lifecycleMappingMetadata>
-					</configuration>
-				</plugin>
-			</plugins>
-		</pluginManagement>
-	</build>
-
-	<repositories>
-		<repository>
-			<id>third.party.closed.source.repo</id>
-			<url>file://${basedir}/../maven_repo_3rd_party</url>
-		</repository>
-	</repositories>
-
-</project>
diff --git a/astroboy/project.properties b/astroboy/project.properties
deleted file mode 100644
index a3ee5ab64..000000000
--- a/astroboy/project.properties
+++ /dev/null
@@ -1,14 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-17
diff --git a/astroboy/res/anim/expletive_animation.xml b/astroboy/res/anim/expletive_animation.xml
deleted file mode 100644
index 9d11d8db3..000000000
--- a/astroboy/res/anim/expletive_animation.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<rotate
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:fromDegrees="0"
-    android:toDegrees="360"
-    android:pivotX="50%"
-    android:pivotY="50%"
-    android:repeatCount="infinite"
-    android:duration="500" />
diff --git a/astroboy/res/drawable-hdpi/icon.png b/astroboy/res/drawable-hdpi/icon.png
deleted file mode 100644
index cd436057f..000000000
Binary files a/astroboy/res/drawable-hdpi/icon.png and /dev/null differ
diff --git a/astroboy/res/drawable-ldpi/icon.png b/astroboy/res/drawable-ldpi/icon.png
deleted file mode 100644
index cd436057f..000000000
Binary files a/astroboy/res/drawable-ldpi/icon.png and /dev/null differ
diff --git a/astroboy/res/drawable-mdpi/icon.png b/astroboy/res/drawable-mdpi/icon.png
deleted file mode 100644
index cd436057f..000000000
Binary files a/astroboy/res/drawable-mdpi/icon.png and /dev/null differ
diff --git a/astroboy/res/layout/fight_evil.xml b/astroboy/res/layout/fight_evil.xml
deleted file mode 100644
index a44ecce67..000000000
--- a/astroboy/res/layout/fight_evil.xml
+++ /dev/null
@@ -1,15 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    >
-
-    <TextView
-        android:id="@+id/expletive"
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:gravity="center"
-        />
-
-</LinearLayout>
diff --git a/astroboy/res/layout/main.xml b/astroboy/res/layout/main.xml
deleted file mode 100644
index 11142cc4a..000000000
--- a/astroboy/res/layout/main.xml
+++ /dev/null
@@ -1,55 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    >
-    
-    <TextView
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:text="Welcome back, Doctor Tenma."
-        android:layout_marginBottom="20dp"
-        />
-
-    <TextView
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:text="Send a remote command to Astroboy:"
-        />
-
-    <EditText
-        android:id="@+id/say_text"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:hint="Say Something"
-        />
-
-    <Button
-        android:id="@+id/brush_teeth"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:text="Brush Teeth"
-        />
-
-    <Button
-        android:id="@+id/fight_evil"
-        android:tag="fightevil"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:text="Fight Forces of Evil"
-        />
-
-
-    <Button
-        android:id="@+id/self_destruct"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:layout_gravity="center"
-        android:text="Self Destruct"/>
-    
-    <org.roboguice.astroboy.view.CustomView 
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"/>"
-    
-</LinearLayout>
diff --git a/astroboy/res/layout/view_custom.xml b/astroboy/res/layout/view_custom.xml
deleted file mode 100644
index e1a89324d..000000000
--- a/astroboy/res/layout/view_custom.xml
+++ /dev/null
@@ -1,21 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:orientation="horizontal" >
-
-    <TextView
-        android:id="@+id/tv_status"
-        android:layout_width="0dp"
-        android:layout_weight="1"
-        android:layout_height="wrap_content"
-        android:layout_marginBottom="20dp"
-        android:text="TV is open" />
-
-    <Button
-        android:id="@+id/close_tv"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="Close TV" />
-
-</LinearLayout>
\ No newline at end of file
diff --git a/astroboy/res/values/strings.xml b/astroboy/res/values/strings.xml
deleted file mode 100644
index 5025c0f4f..000000000
--- a/astroboy/res/values/strings.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    <string name="app_name">Astroboy</string>
-</resources>
diff --git a/astroboy/src/main/java/org/roboguice/astroboy/activity/AstroboyMasterConsole.java b/astroboy/src/main/java/org/roboguice/astroboy/activity/AstroboyMasterConsole.java
deleted file mode 100644
index 7a4f0edc0..000000000
--- a/astroboy/src/main/java/org/roboguice/astroboy/activity/AstroboyMasterConsole.java
+++ /dev/null
@@ -1,99 +0,0 @@
-package org.roboguice.astroboy.activity;
-
-import org.roboguice.astroboy.R;
-import org.roboguice.astroboy.controller.AstroboyRemoteControl;
-import roboguice.activity.RoboActivity;
-import roboguice.inject.ContentView;
-import roboguice.inject.InjectView;
-
-import android.content.Intent;
-import android.os.Bundle;
-import android.os.Vibrator;
-import android.view.KeyEvent;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.TextView;
-import android.widget.TextView.OnEditorActionListener;
-
-import com.google.inject.Inject;
-
-
-/**
- * This activity uses an AstroboyRemoteControl to control Astroboy remotely!
- *
- * What you'll learn in this class:
- *   - How to use @InjectView as a typesafe version of findViewById()
- *   - How to inject plain old java objects as well (POJOs)
- *   - When injection happens
- *   - Some basics about injection, including when injection results in a call to
- *     an object's default constructor, versus when it does something "special"
- *     like call getSystemService()
- */
-@ContentView(R.layout.main)
-public class AstroboyMasterConsole extends RoboActivity {
-
-    // Various views that we inject into the activity.
-    // Equivalent to calling findViewById() in your onCreate(), except more succinct
-    @InjectView(R.id.self_destruct) Button selfDestructButton;
-    @InjectView(R.id.say_text)      EditText sayText;
-    @InjectView(R.id.brush_teeth)   Button brushTeethButton;
-    @InjectView(tag="fightevil")    Button fightEvilButton;     // we can also use tags if we want
-
-
-    // Standard Guice injection of Plain Old Java Objects (POJOs)
-    // Guice will find or create the appropriate instance of AstroboyRemoteControl for us
-    // Since we haven't specified a special binding for AstroboyRemoteControl, Guice
-    // will create a new instance for us using AstroboyRemoteControl's default constructor.
-    // Contrast this with Vibrator, which is an Android service that is pre-bound by RoboGuice.
-    // Injecting a Vibrator will return a new instance of a Vibrator obtained by calling
-    // context.getSystemService(VIBRATOR_SERVICE).  This is configured in DefaultRoboModule, which is
-    // used by default to configure every RoboGuice injector.
-    @Inject AstroboyRemoteControl remoteControl;
-    @Inject Vibrator vibrator;
-
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState); // @Inject, @InjectResource, and @InjectExtra injection happens during super.onCreate()
-
-        sayText.setOnEditorActionListener(new OnEditorActionListener() {
-            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
-
-                // Have the remoteControl tell Astroboy to say something
-                remoteControl.say(textView.getText().toString());
-                textView.setText(null);
-                return true;
-            }
-        });
-
-        brushTeethButton.setOnClickListener( new OnClickListener() {
-            public void onClick(View view) {
-                remoteControl.brushTeeth();
-            }
-        });
-
-        selfDestructButton.setOnClickListener( new OnClickListener() {
-            public void onClick(View view) {
-
-                // Self destruct the remoteControl
-                vibrator.vibrate(2000);
-                remoteControl.selfDestruct();
-            }
-        });
-
-        // Fighting the forces of evil deserves its own activity
-        fightEvilButton.setOnClickListener( new OnClickListener() {
-            public void onClick(View view) {
-                startActivity(new Intent(AstroboyMasterConsole.this, FightForcesOfEvilActivity.class));
-            }
-        });
-
-    }
-
-}
-
-
-
-
diff --git a/astroboy/src/main/java/org/roboguice/astroboy/activity/FightForcesOfEvilActivity.java b/astroboy/src/main/java/org/roboguice/astroboy/activity/FightForcesOfEvilActivity.java
deleted file mode 100644
index c9833f4d7..000000000
--- a/astroboy/src/main/java/org/roboguice/astroboy/activity/FightForcesOfEvilActivity.java
+++ /dev/null
@@ -1,79 +0,0 @@
-package org.roboguice.astroboy.activity;
-
-import org.roboguice.astroboy.R;
-import org.roboguice.astroboy.controller.Astroboy;
-import roboguice.activity.RoboActivity;
-import roboguice.inject.InjectResource;
-import roboguice.inject.InjectView;
-import roboguice.util.RoboAsyncTask;
-
-import android.content.Context;
-import android.os.Bundle;
-import android.view.animation.Animation;
-import android.widget.TextView;
-
-import javax.inject.Inject;
-import java.util.Random;
-
-/**
- * Things you'll learn in this class:
- *     - How to inject Resources
- *     - How to use RoboAsyncTask to do background tasks with injection
- *     - What it means to be a @Singleton
- */
-public class FightForcesOfEvilActivity extends RoboActivity {
-
-    @InjectView(R.id.expletive) TextView expletiveText;
-
-    // You can also inject resources such as Strings, Drawables, and Animations
-    @InjectResource(R.anim.expletive_animation) Animation expletiveAnimation;
-
-    // AstroboyRemoteControl is annotated as @ContextSingleton, so the instance
-    // we get in FightForcesOfEvilActivity will be a different instance than
-    // the one we got in AstroboyMasterConsole
-    //@Inject AstroboyRemoteControl remoteControl;
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.fight_evil);
-
-        expletiveText.setAnimation(expletiveAnimation);
-        expletiveAnimation.start();
-
-        // Throw some punches
-        for( int i=0; i<10; ++i )
-            new AsyncPunch(this) {
-                @Override
-                protected void onSuccess(String expletive) throws Exception {
-                    expletiveText.setText(expletive);
-                }
-
-                // We could also override onException() and onFinally() if we wanted
-                
-            }.execute();
-
-    }
-
-
-
-    // This class will call Astroboy.punch() in the background
-    public static class AsyncPunch extends RoboAsyncTask<String> {
-
-        // Because Astroboy is a @Singleton, this will be the same
-        // instance that we inject elsewhere in our app.
-        // Random of course will be a new instance of java.util.Random, since
-        // we haven't specified any special binding instructions anywhere
-        @Inject Astroboy astroboy;
-        @Inject Random random;
-
-        public AsyncPunch(Context context) {
-            super(context);
-        }
-
-        public String call() throws Exception {
-            Thread.sleep(random.nextInt(5*1000));
-            return astroboy.punch();
-        }
-    }
-}
diff --git a/astroboy/src/main/java/org/roboguice/astroboy/controller/Astroboy.java b/astroboy/src/main/java/org/roboguice/astroboy/controller/Astroboy.java
deleted file mode 100644
index 177aab40f..000000000
--- a/astroboy/src/main/java/org/roboguice/astroboy/controller/Astroboy.java
+++ /dev/null
@@ -1,52 +0,0 @@
-package org.roboguice.astroboy.controller;
-
-import android.app.Application;
-import android.os.Vibrator;
-import android.widget.Toast;
-
-import com.google.inject.Inject;
-import com.google.inject.Singleton;
-
-import java.util.Random;
-
-
-/**
- * What you'll learn in this class:
- *   - What it means to be a @Singleton
- *   - That Singletons must use Provider<Context> instead of Context to get
- *     the current context
- *   - Some basics about injection, including when injection results in a call to
- *     an object's default constructor, versus when it does something "special" like
- *     call getSystemService()
- */
-
-// There's only one Astroboy, so make it a @Singleton.
-// This means that there will be only one instance of Astroboy in the entire app.
-// Any class that requires an instance of Astroboy will get the same instance.
-// This also means this class needs to be thread safe, of course
-@Singleton
-public class Astroboy {
-
-    // Because Astroboy is a Singleton, we can't directly inject the current Context
-    // since the current context may change depending on what activity is using Astroboy
-    // at the time.  Instead we use the application context.
-    // Vibrator is bound to context.getSystemService(VIBRATOR_SERVICE) in DefaultRoboModule.
-    // Random has no special bindings, so Guice will create a new instance for us.
-    @Inject Application application;
-    @Inject Vibrator vibrator;
-    @Inject Random random;
-
-    public void say(String something) {
-        // Make a Toast, using the current context as returned by the Context Provider
-        Toast.makeText(application, "Astroboy says, \"" + something + "\"", Toast.LENGTH_LONG).show();
-    }
-
-    public void brushTeeth() {
-        vibrator.vibrate(new long[]{0, 200, 50, 200, 50, 200, 50, 200, 50, 200, 50, 200, 50, 200, 50, 200, 50, 200, 50, 200, 50, 200, 50,  }, -1);
-    }
-
-    public String punch() {
-        final String expletives[] = new String[]{"POW!", "BANG!", "KERPOW!", "OOF!"};
-        return expletives[random.nextInt(expletives.length)];
-    }
-}
diff --git a/astroboy/src/main/java/org/roboguice/astroboy/controller/AstroboyRemoteControl.java b/astroboy/src/main/java/org/roboguice/astroboy/controller/AstroboyRemoteControl.java
deleted file mode 100644
index 03f42a952..000000000
--- a/astroboy/src/main/java/org/roboguice/astroboy/controller/AstroboyRemoteControl.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package org.roboguice.astroboy.controller;
-
-import roboguice.inject.ContextSingleton;
-import roboguice.util.Ln;
-
-import android.app.Activity;
-import android.widget.Toast;
-
-import com.google.inject.Inject;
-
-/**
- * A class to control Astroboy remotely.
- *
- * This class uses the current context, so we must make it @ContextSingleton.
- * This means that there will be one AstroboyRemoteControl for every activity or
- * service that requires one.
- * Note that we actually ask for the Activity, rather than the Context (which is
- * the same thing), because we need access to some activity-related methods and this
- * saves us from having to downcast to an Activity manually.
- *
- * It also asks RoboGuice to inject the Astroboy instance so we can control him.
- *
- * What you'll learn in this class
- *   - What @ContextSingleton means and when to use it
- *   - How to inject an Activity instead of a Context (which is really the same thing)
- *   - How to use RoboGuice's convenient and flexible logging facility, Ln.
- */
-@ContextSingleton
-public class AstroboyRemoteControl {
-
-
-    // The Astroboy class has been decorated with @Singleton, so this instance of
-    // Astroboy will be the same instance used elsewhere in our app.
-    // Injecting an Activity is basically equivalent to "@Inject Context context",
-    // and thus also requires @ContextSingleton. If you wanted, you could also
-    // @Inject Application, Service, etc. wherever appropriate.
-    @Inject Astroboy astroboy;
-    @Inject Activity activity;
-
-
-
-    public void brushTeeth() {
-        // More info about logging available here: http://code.google.com/p/roboguice/wiki/Logging
-        Ln.d("Sent brushTeeth command to Astroboy");
-        astroboy.brushTeeth();
-    }
-
-    public void say( String something ) {
-        Ln.d("Sent say(%s) command to Astroboy",something);
-        astroboy.say(something);
-    }
-
-    public void selfDestruct() {
-        Toast.makeText(activity, "Your evil remote control has exploded! Now Astroboy is FREEEEEEEEEE!", Toast.LENGTH_LONG).show();
-        activity.finish();
-    }
-}
diff --git a/astroboy/src/main/java/org/roboguice/astroboy/view/CustomView.java b/astroboy/src/main/java/org/roboguice/astroboy/view/CustomView.java
deleted file mode 100644
index fc271d165..000000000
--- a/astroboy/src/main/java/org/roboguice/astroboy/view/CustomView.java
+++ /dev/null
@@ -1,50 +0,0 @@
-package org.roboguice.astroboy.view;
-
-import android.content.Context;
-import android.util.AttributeSet;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.widget.Button;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-import org.roboguice.astroboy.R;
-import roboguice.inject.InjectView;
-
-public class CustomView extends LinearLayout {
-
-    @InjectView(R.id.close_tv)
-    private Button buttonCloseTv;
-    @InjectView(R.id.tv_status)
-    private TextView textviewStatus;
-
-    public CustomView(Context context, AttributeSet attrs) {
-        super(context, attrs);
-        initializeView(context);
-    }
-
-    public CustomView(Context context) {
-        super(context);
-        initializeView(context);
-    }
-
-    public void initializeView(Context context) {
-        LayoutInflater.from(context).inflate(R.layout.view_custom, this, true);
-    }
-
-    @Override
-    protected void onAttachedToWindow() {
-        super.onAttachedToWindow();
-        buttonCloseTv.setOnClickListener(new OnClickListener() {
-
-            public void onClick(View v) {
-                textviewStatus.setText("Closed");
-            }
-        });
-        textviewStatus.setOnClickListener(new OnClickListener() {
-
-            public void onClick(View v) {
-                textviewStatus.setText("Open");
-            }
-        });
-    }
-}
diff --git a/astroboy/src/test/java/org/roboguice/astroboy/controller/Astroboy1Test.java b/astroboy/src/test/java/org/roboguice/astroboy/controller/Astroboy1Test.java
deleted file mode 100644
index ec5a0532a..000000000
--- a/astroboy/src/test/java/org/roboguice/astroboy/controller/Astroboy1Test.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package org.roboguice.astroboy.controller;
-
-import android.content.Context;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import roboguice.RoboGuice;
-import roboguice.activity.RoboActivity;
-
-import static org.junit.Assert.assertTrue;
-
-/**
- * A simple testcase that tests the {@link Astroboy} pojo.
- *
- * This test has no particularly complicated activity or context dependencies,
- * so we don't bother initializing the activity or really doing anything with it
- * at all.
- */
-@RunWith(RobolectricTestRunner.class)
-public class Astroboy1Test {
-    
-    protected Context context = Robolectric.buildActivity(RoboActivity.class).create().get();
-    protected Astroboy astroboy = RoboGuice.getInjector(context).getInstance(Astroboy.class);
-    
-    @Test
-    public void stringShouldEndInExclamationMark() {
-        assertTrue(astroboy.punch().endsWith("!"));
-    }
-}
diff --git a/astroboy/src/test/java/org/roboguice/astroboy/controller/Astroboy2Test.java b/astroboy/src/test/java/org/roboguice/astroboy/controller/Astroboy2Test.java
deleted file mode 100644
index 39dbd0c44..000000000
--- a/astroboy/src/test/java/org/roboguice/astroboy/controller/Astroboy2Test.java
+++ /dev/null
@@ -1,63 +0,0 @@
-package org.roboguice.astroboy.controller;
-
-import android.app.Application;
-import android.content.Context;
-import android.os.Vibrator;
-import com.google.inject.AbstractModule;
-import com.google.inject.util.Modules;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import roboguice.RoboGuice;
-import roboguice.activity.RoboActivity;
-
-import static org.mockito.Mockito.*;
-
-/**
- * A testcase that swaps in a TestVibrator to verify that
- * Astroboy's {@link org.roboguice.astroboy.controller.Astroboy#brushTeeth()} method
- * works properly.
- */
-public class Astroboy2Test {
-    protected Application application = mock(Application.class, RETURNS_DEEP_STUBS);
-    protected Context context = mock(RoboActivity.class, RETURNS_DEEP_STUBS);
-    protected Vibrator vibratorMock = mock(Vibrator.class);
-
-    @Before
-    public void setup() {
-        // Override the default RoboGuice module
-        RoboGuice.setBaseApplicationInjector(application, RoboGuice.DEFAULT_STAGE, Modules.override(RoboGuice.newDefaultRoboModule(application)).with(new MyTestModule()));
-
-        when(context.getApplicationContext()).thenReturn(application);
-        when(application.getApplicationContext()).thenReturn(application);
-
-    }
-    
-    @After
-    public void teardown() {
-        // Don't forget to tear down our custom injector to avoid polluting other test classes
-        RoboGuice.Util.reset();
-    }
-    
-    @Test
-    public void brushingTeethShouldCausePhoneToVibrate() {
-
-        // get the astroboy instance
-        final Astroboy astroboy = RoboGuice.getInjector(context).getInstance(Astroboy.class);
-
-        // do the thing
-        astroboy.brushTeeth();
-
-        // verify that by doing the thing, vibratorMock.vibrate was called
-        verify(vibratorMock).vibrate(new long[]{0, 200, 50, 200, 50, 200, 50, 200, 50, 200, 50, 200, 50, 200, 50, 200, 50, 200, 50, 200, 50, 200, 50},-1);
-
-    }
-
-
-    public class MyTestModule extends AbstractModule {
-        @Override
-        protected void configure() {
-            bind(Vibrator.class).toInstance(vibratorMock);
-        }
-    }
-}
diff --git a/roboguice/docs/apidocs/allclasses-frame.html b/docs/apidocs/allclasses-frame.html
similarity index 100%
rename from roboguice/docs/apidocs/allclasses-frame.html
rename to docs/apidocs/allclasses-frame.html
diff --git a/roboguice/docs/apidocs/allclasses-noframe.html b/docs/apidocs/allclasses-noframe.html
similarity index 100%
rename from roboguice/docs/apidocs/allclasses-noframe.html
rename to docs/apidocs/allclasses-noframe.html
diff --git a/roboguice/docs/apidocs/constant-values.html b/docs/apidocs/constant-values.html
similarity index 100%
rename from roboguice/docs/apidocs/constant-values.html
rename to docs/apidocs/constant-values.html
diff --git a/roboguice/docs/apidocs/deprecated-list.html b/docs/apidocs/deprecated-list.html
similarity index 100%
rename from roboguice/docs/apidocs/deprecated-list.html
rename to docs/apidocs/deprecated-list.html
diff --git a/roboguice/docs/apidocs/help-doc.html b/docs/apidocs/help-doc.html
similarity index 100%
rename from roboguice/docs/apidocs/help-doc.html
rename to docs/apidocs/help-doc.html
diff --git a/roboguice/docs/apidocs/index-all.html b/docs/apidocs/index-all.html
similarity index 100%
rename from roboguice/docs/apidocs/index-all.html
rename to docs/apidocs/index-all.html
diff --git a/roboguice/docs/apidocs/index.html b/docs/apidocs/index.html
similarity index 100%
rename from roboguice/docs/apidocs/index.html
rename to docs/apidocs/index.html
diff --git a/roboguice/docs/apidocs/overview-frame.html b/docs/apidocs/overview-frame.html
similarity index 100%
rename from roboguice/docs/apidocs/overview-frame.html
rename to docs/apidocs/overview-frame.html
diff --git a/roboguice/docs/apidocs/overview-summary.html b/docs/apidocs/overview-summary.html
similarity index 100%
rename from roboguice/docs/apidocs/overview-summary.html
rename to docs/apidocs/overview-summary.html
diff --git a/roboguice/docs/apidocs/overview-tree.html b/docs/apidocs/overview-tree.html
similarity index 100%
rename from roboguice/docs/apidocs/overview-tree.html
rename to docs/apidocs/overview-tree.html
diff --git a/roboguice/docs/apidocs/package-list b/docs/apidocs/package-list
similarity index 100%
rename from roboguice/docs/apidocs/package-list
rename to docs/apidocs/package-list
diff --git a/roboguice/docs/apidocs/resources/inherit.gif b/docs/apidocs/resources/inherit.gif
similarity index 100%
rename from roboguice/docs/apidocs/resources/inherit.gif
rename to docs/apidocs/resources/inherit.gif
diff --git a/roboguice/docs/apidocs/roboguice/activity/RoboAccountAuthenticatorActivity.html b/docs/apidocs/roboguice/activity/RoboAccountAuthenticatorActivity.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/RoboAccountAuthenticatorActivity.html
rename to docs/apidocs/roboguice/activity/RoboAccountAuthenticatorActivity.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/RoboActivity.html b/docs/apidocs/roboguice/activity/RoboActivity.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/RoboActivity.html
rename to docs/apidocs/roboguice/activity/RoboActivity.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/RoboActivityGroup.html b/docs/apidocs/roboguice/activity/RoboActivityGroup.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/RoboActivityGroup.html
rename to docs/apidocs/roboguice/activity/RoboActivityGroup.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/RoboExpandableListActivity.html b/docs/apidocs/roboguice/activity/RoboExpandableListActivity.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/RoboExpandableListActivity.html
rename to docs/apidocs/roboguice/activity/RoboExpandableListActivity.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/RoboLauncherActivity.html b/docs/apidocs/roboguice/activity/RoboLauncherActivity.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/RoboLauncherActivity.html
rename to docs/apidocs/roboguice/activity/RoboLauncherActivity.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/RoboListActivity.html b/docs/apidocs/roboguice/activity/RoboListActivity.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/RoboListActivity.html
rename to docs/apidocs/roboguice/activity/RoboListActivity.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/RoboMapActivity.html b/docs/apidocs/roboguice/activity/RoboMapActivity.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/RoboMapActivity.html
rename to docs/apidocs/roboguice/activity/RoboMapActivity.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/RoboPreferenceActivity.html b/docs/apidocs/roboguice/activity/RoboPreferenceActivity.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/RoboPreferenceActivity.html
rename to docs/apidocs/roboguice/activity/RoboPreferenceActivity.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/RoboSplashActivity.html b/docs/apidocs/roboguice/activity/RoboSplashActivity.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/RoboSplashActivity.html
rename to docs/apidocs/roboguice/activity/RoboSplashActivity.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/RoboTabActivity.html b/docs/apidocs/roboguice/activity/RoboTabActivity.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/RoboTabActivity.html
rename to docs/apidocs/roboguice/activity/RoboTabActivity.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/class-use/RoboAccountAuthenticatorActivity.html b/docs/apidocs/roboguice/activity/class-use/RoboAccountAuthenticatorActivity.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/class-use/RoboAccountAuthenticatorActivity.html
rename to docs/apidocs/roboguice/activity/class-use/RoboAccountAuthenticatorActivity.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/class-use/RoboActivity.html b/docs/apidocs/roboguice/activity/class-use/RoboActivity.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/class-use/RoboActivity.html
rename to docs/apidocs/roboguice/activity/class-use/RoboActivity.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/class-use/RoboActivityGroup.html b/docs/apidocs/roboguice/activity/class-use/RoboActivityGroup.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/class-use/RoboActivityGroup.html
rename to docs/apidocs/roboguice/activity/class-use/RoboActivityGroup.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/class-use/RoboExpandableListActivity.html b/docs/apidocs/roboguice/activity/class-use/RoboExpandableListActivity.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/class-use/RoboExpandableListActivity.html
rename to docs/apidocs/roboguice/activity/class-use/RoboExpandableListActivity.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/class-use/RoboLauncherActivity.html b/docs/apidocs/roboguice/activity/class-use/RoboLauncherActivity.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/class-use/RoboLauncherActivity.html
rename to docs/apidocs/roboguice/activity/class-use/RoboLauncherActivity.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/class-use/RoboListActivity.html b/docs/apidocs/roboguice/activity/class-use/RoboListActivity.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/class-use/RoboListActivity.html
rename to docs/apidocs/roboguice/activity/class-use/RoboListActivity.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/class-use/RoboMapActivity.html b/docs/apidocs/roboguice/activity/class-use/RoboMapActivity.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/class-use/RoboMapActivity.html
rename to docs/apidocs/roboguice/activity/class-use/RoboMapActivity.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/class-use/RoboPreferenceActivity.html b/docs/apidocs/roboguice/activity/class-use/RoboPreferenceActivity.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/class-use/RoboPreferenceActivity.html
rename to docs/apidocs/roboguice/activity/class-use/RoboPreferenceActivity.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/class-use/RoboSplashActivity.html b/docs/apidocs/roboguice/activity/class-use/RoboSplashActivity.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/class-use/RoboSplashActivity.html
rename to docs/apidocs/roboguice/activity/class-use/RoboSplashActivity.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/class-use/RoboTabActivity.html b/docs/apidocs/roboguice/activity/class-use/RoboTabActivity.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/class-use/RoboTabActivity.html
rename to docs/apidocs/roboguice/activity/class-use/RoboTabActivity.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/OnActivityResultEvent.html b/docs/apidocs/roboguice/activity/event/OnActivityResultEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/OnActivityResultEvent.html
rename to docs/apidocs/roboguice/activity/event/OnActivityResultEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/OnConfigurationChangedEvent.html b/docs/apidocs/roboguice/activity/event/OnConfigurationChangedEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/OnConfigurationChangedEvent.html
rename to docs/apidocs/roboguice/activity/event/OnConfigurationChangedEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/OnContentChangedEvent.html b/docs/apidocs/roboguice/activity/event/OnContentChangedEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/OnContentChangedEvent.html
rename to docs/apidocs/roboguice/activity/event/OnContentChangedEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/OnContentViewAvailableEvent.html b/docs/apidocs/roboguice/activity/event/OnContentViewAvailableEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/OnContentViewAvailableEvent.html
rename to docs/apidocs/roboguice/activity/event/OnContentViewAvailableEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/OnCreateEvent.html b/docs/apidocs/roboguice/activity/event/OnCreateEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/OnCreateEvent.html
rename to docs/apidocs/roboguice/activity/event/OnCreateEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/OnDestroyEvent.html b/docs/apidocs/roboguice/activity/event/OnDestroyEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/OnDestroyEvent.html
rename to docs/apidocs/roboguice/activity/event/OnDestroyEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/OnNewIntentEvent.html b/docs/apidocs/roboguice/activity/event/OnNewIntentEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/OnNewIntentEvent.html
rename to docs/apidocs/roboguice/activity/event/OnNewIntentEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/OnPauseEvent.html b/docs/apidocs/roboguice/activity/event/OnPauseEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/OnPauseEvent.html
rename to docs/apidocs/roboguice/activity/event/OnPauseEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/OnRestartEvent.html b/docs/apidocs/roboguice/activity/event/OnRestartEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/OnRestartEvent.html
rename to docs/apidocs/roboguice/activity/event/OnRestartEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/OnResumeEvent.html b/docs/apidocs/roboguice/activity/event/OnResumeEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/OnResumeEvent.html
rename to docs/apidocs/roboguice/activity/event/OnResumeEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/OnStartEvent.html b/docs/apidocs/roboguice/activity/event/OnStartEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/OnStartEvent.html
rename to docs/apidocs/roboguice/activity/event/OnStartEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/OnStopEvent.html b/docs/apidocs/roboguice/activity/event/OnStopEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/OnStopEvent.html
rename to docs/apidocs/roboguice/activity/event/OnStopEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/class-use/OnActivityResultEvent.html b/docs/apidocs/roboguice/activity/event/class-use/OnActivityResultEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/class-use/OnActivityResultEvent.html
rename to docs/apidocs/roboguice/activity/event/class-use/OnActivityResultEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/class-use/OnConfigurationChangedEvent.html b/docs/apidocs/roboguice/activity/event/class-use/OnConfigurationChangedEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/class-use/OnConfigurationChangedEvent.html
rename to docs/apidocs/roboguice/activity/event/class-use/OnConfigurationChangedEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/class-use/OnContentChangedEvent.html b/docs/apidocs/roboguice/activity/event/class-use/OnContentChangedEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/class-use/OnContentChangedEvent.html
rename to docs/apidocs/roboguice/activity/event/class-use/OnContentChangedEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/class-use/OnContentViewAvailableEvent.html b/docs/apidocs/roboguice/activity/event/class-use/OnContentViewAvailableEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/class-use/OnContentViewAvailableEvent.html
rename to docs/apidocs/roboguice/activity/event/class-use/OnContentViewAvailableEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/class-use/OnCreateEvent.html b/docs/apidocs/roboguice/activity/event/class-use/OnCreateEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/class-use/OnCreateEvent.html
rename to docs/apidocs/roboguice/activity/event/class-use/OnCreateEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/class-use/OnDestroyEvent.html b/docs/apidocs/roboguice/activity/event/class-use/OnDestroyEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/class-use/OnDestroyEvent.html
rename to docs/apidocs/roboguice/activity/event/class-use/OnDestroyEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/class-use/OnNewIntentEvent.html b/docs/apidocs/roboguice/activity/event/class-use/OnNewIntentEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/class-use/OnNewIntentEvent.html
rename to docs/apidocs/roboguice/activity/event/class-use/OnNewIntentEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/class-use/OnPauseEvent.html b/docs/apidocs/roboguice/activity/event/class-use/OnPauseEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/class-use/OnPauseEvent.html
rename to docs/apidocs/roboguice/activity/event/class-use/OnPauseEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/class-use/OnRestartEvent.html b/docs/apidocs/roboguice/activity/event/class-use/OnRestartEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/class-use/OnRestartEvent.html
rename to docs/apidocs/roboguice/activity/event/class-use/OnRestartEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/class-use/OnResumeEvent.html b/docs/apidocs/roboguice/activity/event/class-use/OnResumeEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/class-use/OnResumeEvent.html
rename to docs/apidocs/roboguice/activity/event/class-use/OnResumeEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/class-use/OnStartEvent.html b/docs/apidocs/roboguice/activity/event/class-use/OnStartEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/class-use/OnStartEvent.html
rename to docs/apidocs/roboguice/activity/event/class-use/OnStartEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/class-use/OnStopEvent.html b/docs/apidocs/roboguice/activity/event/class-use/OnStopEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/class-use/OnStopEvent.html
rename to docs/apidocs/roboguice/activity/event/class-use/OnStopEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/package-frame.html b/docs/apidocs/roboguice/activity/event/package-frame.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/package-frame.html
rename to docs/apidocs/roboguice/activity/event/package-frame.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/package-summary.html b/docs/apidocs/roboguice/activity/event/package-summary.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/package-summary.html
rename to docs/apidocs/roboguice/activity/event/package-summary.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/package-tree.html b/docs/apidocs/roboguice/activity/event/package-tree.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/package-tree.html
rename to docs/apidocs/roboguice/activity/event/package-tree.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/event/package-use.html b/docs/apidocs/roboguice/activity/event/package-use.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/event/package-use.html
rename to docs/apidocs/roboguice/activity/event/package-use.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/package-frame.html b/docs/apidocs/roboguice/activity/package-frame.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/package-frame.html
rename to docs/apidocs/roboguice/activity/package-frame.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/package-summary.html b/docs/apidocs/roboguice/activity/package-summary.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/package-summary.html
rename to docs/apidocs/roboguice/activity/package-summary.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/package-tree.html b/docs/apidocs/roboguice/activity/package-tree.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/package-tree.html
rename to docs/apidocs/roboguice/activity/package-tree.html
diff --git a/roboguice/docs/apidocs/roboguice/activity/package-use.html b/docs/apidocs/roboguice/activity/package-use.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/activity/package-use.html
rename to docs/apidocs/roboguice/activity/package-use.html
diff --git a/roboguice/docs/apidocs/roboguice/adapter/IterableAdapter.html b/docs/apidocs/roboguice/adapter/IterableAdapter.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/adapter/IterableAdapter.html
rename to docs/apidocs/roboguice/adapter/IterableAdapter.html
diff --git a/roboguice/docs/apidocs/roboguice/adapter/class-use/IterableAdapter.html b/docs/apidocs/roboguice/adapter/class-use/IterableAdapter.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/adapter/class-use/IterableAdapter.html
rename to docs/apidocs/roboguice/adapter/class-use/IterableAdapter.html
diff --git a/roboguice/docs/apidocs/roboguice/adapter/package-frame.html b/docs/apidocs/roboguice/adapter/package-frame.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/adapter/package-frame.html
rename to docs/apidocs/roboguice/adapter/package-frame.html
diff --git a/roboguice/docs/apidocs/roboguice/adapter/package-summary.html b/docs/apidocs/roboguice/adapter/package-summary.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/adapter/package-summary.html
rename to docs/apidocs/roboguice/adapter/package-summary.html
diff --git a/roboguice/docs/apidocs/roboguice/adapter/package-tree.html b/docs/apidocs/roboguice/adapter/package-tree.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/adapter/package-tree.html
rename to docs/apidocs/roboguice/adapter/package-tree.html
diff --git a/roboguice/docs/apidocs/roboguice/adapter/package-use.html b/docs/apidocs/roboguice/adapter/package-use.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/adapter/package-use.html
rename to docs/apidocs/roboguice/adapter/package-use.html
diff --git a/roboguice/docs/apidocs/roboguice/application/RoboApplication.html b/docs/apidocs/roboguice/application/RoboApplication.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/application/RoboApplication.html
rename to docs/apidocs/roboguice/application/RoboApplication.html
diff --git a/roboguice/docs/apidocs/roboguice/application/RoboInjectableApplication.html b/docs/apidocs/roboguice/application/RoboInjectableApplication.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/application/RoboInjectableApplication.html
rename to docs/apidocs/roboguice/application/RoboInjectableApplication.html
diff --git a/roboguice/docs/apidocs/roboguice/application/class-use/RoboApplication.html b/docs/apidocs/roboguice/application/class-use/RoboApplication.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/application/class-use/RoboApplication.html
rename to docs/apidocs/roboguice/application/class-use/RoboApplication.html
diff --git a/roboguice/docs/apidocs/roboguice/application/class-use/RoboInjectableApplication.html b/docs/apidocs/roboguice/application/class-use/RoboInjectableApplication.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/application/class-use/RoboInjectableApplication.html
rename to docs/apidocs/roboguice/application/class-use/RoboInjectableApplication.html
diff --git a/roboguice/docs/apidocs/roboguice/application/package-frame.html b/docs/apidocs/roboguice/application/package-frame.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/application/package-frame.html
rename to docs/apidocs/roboguice/application/package-frame.html
diff --git a/roboguice/docs/apidocs/roboguice/application/package-summary.html b/docs/apidocs/roboguice/application/package-summary.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/application/package-summary.html
rename to docs/apidocs/roboguice/application/package-summary.html
diff --git a/roboguice/docs/apidocs/roboguice/application/package-tree.html b/docs/apidocs/roboguice/application/package-tree.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/application/package-tree.html
rename to docs/apidocs/roboguice/application/package-tree.html
diff --git a/roboguice/docs/apidocs/roboguice/application/package-use.html b/docs/apidocs/roboguice/application/package-use.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/application/package-use.html
rename to docs/apidocs/roboguice/application/package-use.html
diff --git a/roboguice/docs/apidocs/roboguice/config/AbstractAndroidModule.html b/docs/apidocs/roboguice/config/AbstractAndroidModule.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/config/AbstractAndroidModule.html
rename to docs/apidocs/roboguice/config/AbstractAndroidModule.html
diff --git a/roboguice/docs/apidocs/roboguice/config/RoboModule.html b/docs/apidocs/roboguice/config/RoboModule.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/config/RoboModule.html
rename to docs/apidocs/roboguice/config/RoboModule.html
diff --git a/roboguice/docs/apidocs/roboguice/config/class-use/AbstractAndroidModule.html b/docs/apidocs/roboguice/config/class-use/AbstractAndroidModule.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/config/class-use/AbstractAndroidModule.html
rename to docs/apidocs/roboguice/config/class-use/AbstractAndroidModule.html
diff --git a/roboguice/docs/apidocs/roboguice/config/class-use/RoboModule.html b/docs/apidocs/roboguice/config/class-use/RoboModule.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/config/class-use/RoboModule.html
rename to docs/apidocs/roboguice/config/class-use/RoboModule.html
diff --git a/roboguice/docs/apidocs/roboguice/config/package-frame.html b/docs/apidocs/roboguice/config/package-frame.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/config/package-frame.html
rename to docs/apidocs/roboguice/config/package-frame.html
diff --git a/roboguice/docs/apidocs/roboguice/config/package-summary.html b/docs/apidocs/roboguice/config/package-summary.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/config/package-summary.html
rename to docs/apidocs/roboguice/config/package-summary.html
diff --git a/roboguice/docs/apidocs/roboguice/config/package-tree.html b/docs/apidocs/roboguice/config/package-tree.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/config/package-tree.html
rename to docs/apidocs/roboguice/config/package-tree.html
diff --git a/roboguice/docs/apidocs/roboguice/config/package-use.html b/docs/apidocs/roboguice/config/package-use.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/config/package-use.html
rename to docs/apidocs/roboguice/config/package-use.html
diff --git a/roboguice/docs/apidocs/roboguice/event/EventManager.NullEventManager.html b/docs/apidocs/roboguice/event/EventManager.NullEventManager.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/event/EventManager.NullEventManager.html
rename to docs/apidocs/roboguice/event/EventManager.NullEventManager.html
diff --git a/roboguice/docs/apidocs/roboguice/event/EventManager.ObserverReference.html b/docs/apidocs/roboguice/event/EventManager.ObserverReference.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/event/EventManager.ObserverReference.html
rename to docs/apidocs/roboguice/event/EventManager.ObserverReference.html
diff --git a/roboguice/docs/apidocs/roboguice/event/EventManager.html b/docs/apidocs/roboguice/event/EventManager.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/event/EventManager.html
rename to docs/apidocs/roboguice/event/EventManager.html
diff --git a/roboguice/docs/apidocs/roboguice/event/Observes.html b/docs/apidocs/roboguice/event/Observes.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/event/Observes.html
rename to docs/apidocs/roboguice/event/Observes.html
diff --git a/roboguice/docs/apidocs/roboguice/event/ObservesTypeListener.ContextObserverMethodInjector.html b/docs/apidocs/roboguice/event/ObservesTypeListener.ContextObserverMethodInjector.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/event/ObservesTypeListener.ContextObserverMethodInjector.html
rename to docs/apidocs/roboguice/event/ObservesTypeListener.ContextObserverMethodInjector.html
diff --git a/roboguice/docs/apidocs/roboguice/event/ObservesTypeListener.html b/docs/apidocs/roboguice/event/ObservesTypeListener.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/event/ObservesTypeListener.html
rename to docs/apidocs/roboguice/event/ObservesTypeListener.html
diff --git a/roboguice/docs/apidocs/roboguice/event/class-use/EventManager.NullEventManager.html b/docs/apidocs/roboguice/event/class-use/EventManager.NullEventManager.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/event/class-use/EventManager.NullEventManager.html
rename to docs/apidocs/roboguice/event/class-use/EventManager.NullEventManager.html
diff --git a/roboguice/docs/apidocs/roboguice/event/class-use/EventManager.ObserverReference.html b/docs/apidocs/roboguice/event/class-use/EventManager.ObserverReference.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/event/class-use/EventManager.ObserverReference.html
rename to docs/apidocs/roboguice/event/class-use/EventManager.ObserverReference.html
diff --git a/roboguice/docs/apidocs/roboguice/event/class-use/EventManager.html b/docs/apidocs/roboguice/event/class-use/EventManager.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/event/class-use/EventManager.html
rename to docs/apidocs/roboguice/event/class-use/EventManager.html
diff --git a/roboguice/docs/apidocs/roboguice/event/class-use/Observes.html b/docs/apidocs/roboguice/event/class-use/Observes.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/event/class-use/Observes.html
rename to docs/apidocs/roboguice/event/class-use/Observes.html
diff --git a/roboguice/docs/apidocs/roboguice/event/class-use/ObservesTypeListener.ContextObserverMethodInjector.html b/docs/apidocs/roboguice/event/class-use/ObservesTypeListener.ContextObserverMethodInjector.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/event/class-use/ObservesTypeListener.ContextObserverMethodInjector.html
rename to docs/apidocs/roboguice/event/class-use/ObservesTypeListener.ContextObserverMethodInjector.html
diff --git a/roboguice/docs/apidocs/roboguice/event/class-use/ObservesTypeListener.html b/docs/apidocs/roboguice/event/class-use/ObservesTypeListener.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/event/class-use/ObservesTypeListener.html
rename to docs/apidocs/roboguice/event/class-use/ObservesTypeListener.html
diff --git a/roboguice/docs/apidocs/roboguice/event/package-frame.html b/docs/apidocs/roboguice/event/package-frame.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/event/package-frame.html
rename to docs/apidocs/roboguice/event/package-frame.html
diff --git a/roboguice/docs/apidocs/roboguice/event/package-summary.html b/docs/apidocs/roboguice/event/package-summary.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/event/package-summary.html
rename to docs/apidocs/roboguice/event/package-summary.html
diff --git a/roboguice/docs/apidocs/roboguice/event/package-tree.html b/docs/apidocs/roboguice/event/package-tree.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/event/package-tree.html
rename to docs/apidocs/roboguice/event/package-tree.html
diff --git a/roboguice/docs/apidocs/roboguice/event/package-use.html b/docs/apidocs/roboguice/event/package-use.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/event/package-use.html
rename to docs/apidocs/roboguice/event/package-use.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/ActivityProvider.html b/docs/apidocs/roboguice/inject/ActivityProvider.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/ActivityProvider.html
rename to docs/apidocs/roboguice/inject/ActivityProvider.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/AssetManagerProvider.html b/docs/apidocs/roboguice/inject/AssetManagerProvider.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/AssetManagerProvider.html
rename to docs/apidocs/roboguice/inject/AssetManagerProvider.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/ContentResolverProvider.html b/docs/apidocs/roboguice/inject/ContentResolverProvider.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/ContentResolverProvider.html
rename to docs/apidocs/roboguice/inject/ContentResolverProvider.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/ContextScope.html b/docs/apidocs/roboguice/inject/ContextScope.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/ContextScope.html
rename to docs/apidocs/roboguice/inject/ContextScope.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/ContextScoped.html b/docs/apidocs/roboguice/inject/ContextScoped.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/ContextScoped.html
rename to docs/apidocs/roboguice/inject/ContextScoped.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/ExtraConverter.html b/docs/apidocs/roboguice/inject/ExtraConverter.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/ExtraConverter.html
rename to docs/apidocs/roboguice/inject/ExtraConverter.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/ExtrasListener.ExtrasMembersInjector.html b/docs/apidocs/roboguice/inject/ExtrasListener.ExtrasMembersInjector.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/ExtrasListener.ExtrasMembersInjector.html
rename to docs/apidocs/roboguice/inject/ExtrasListener.ExtrasMembersInjector.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/ExtrasListener.html b/docs/apidocs/roboguice/inject/ExtrasListener.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/ExtrasListener.html
rename to docs/apidocs/roboguice/inject/ExtrasListener.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/InjectExtra.html b/docs/apidocs/roboguice/inject/InjectExtra.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/InjectExtra.html
rename to docs/apidocs/roboguice/inject/InjectExtra.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/InjectPreference.html b/docs/apidocs/roboguice/inject/InjectPreference.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/InjectPreference.html
rename to docs/apidocs/roboguice/inject/InjectPreference.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/InjectResource.html b/docs/apidocs/roboguice/inject/InjectResource.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/InjectResource.html
rename to docs/apidocs/roboguice/inject/InjectResource.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/InjectView.html b/docs/apidocs/roboguice/inject/InjectView.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/InjectView.html
rename to docs/apidocs/roboguice/inject/InjectView.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/InjectorProvider.html b/docs/apidocs/roboguice/inject/InjectorProvider.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/InjectorProvider.html
rename to docs/apidocs/roboguice/inject/InjectorProvider.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/PreferenceListener.PreferenceMembersInjector.html b/docs/apidocs/roboguice/inject/PreferenceListener.PreferenceMembersInjector.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/PreferenceListener.PreferenceMembersInjector.html
rename to docs/apidocs/roboguice/inject/PreferenceListener.PreferenceMembersInjector.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/PreferenceListener.html b/docs/apidocs/roboguice/inject/PreferenceListener.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/PreferenceListener.html
rename to docs/apidocs/roboguice/inject/PreferenceListener.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/ResourceFactory.html b/docs/apidocs/roboguice/inject/ResourceFactory.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/ResourceFactory.html
rename to docs/apidocs/roboguice/inject/ResourceFactory.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/ResourceListener.ResourceMembersInjector.html b/docs/apidocs/roboguice/inject/ResourceListener.ResourceMembersInjector.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/ResourceListener.ResourceMembersInjector.html
rename to docs/apidocs/roboguice/inject/ResourceListener.ResourceMembersInjector.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/ResourceListener.html b/docs/apidocs/roboguice/inject/ResourceListener.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/ResourceListener.html
rename to docs/apidocs/roboguice/inject/ResourceListener.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/ResourcesProvider.html b/docs/apidocs/roboguice/inject/ResourcesProvider.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/ResourcesProvider.html
rename to docs/apidocs/roboguice/inject/ResourcesProvider.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/RoboApplicationProvider.html b/docs/apidocs/roboguice/inject/RoboApplicationProvider.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/RoboApplicationProvider.html
rename to docs/apidocs/roboguice/inject/RoboApplicationProvider.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/SharedPreferencesName.html b/docs/apidocs/roboguice/inject/SharedPreferencesName.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/SharedPreferencesName.html
rename to docs/apidocs/roboguice/inject/SharedPreferencesName.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/SharedPreferencesProvider.PreferencesNameHolder.html b/docs/apidocs/roboguice/inject/SharedPreferencesProvider.PreferencesNameHolder.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/SharedPreferencesProvider.PreferencesNameHolder.html
rename to docs/apidocs/roboguice/inject/SharedPreferencesProvider.PreferencesNameHolder.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/SharedPreferencesProvider.html b/docs/apidocs/roboguice/inject/SharedPreferencesProvider.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/SharedPreferencesProvider.html
rename to docs/apidocs/roboguice/inject/SharedPreferencesProvider.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/StaticTypeListener.html b/docs/apidocs/roboguice/inject/StaticTypeListener.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/StaticTypeListener.html
rename to docs/apidocs/roboguice/inject/StaticTypeListener.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/StringResourceFactory.html b/docs/apidocs/roboguice/inject/StringResourceFactory.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/StringResourceFactory.html
rename to docs/apidocs/roboguice/inject/StringResourceFactory.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/SystemServiceProvider.html b/docs/apidocs/roboguice/inject/SystemServiceProvider.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/SystemServiceProvider.html
rename to docs/apidocs/roboguice/inject/SystemServiceProvider.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/ViewListener.html b/docs/apidocs/roboguice/inject/ViewListener.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/ViewListener.html
rename to docs/apidocs/roboguice/inject/ViewListener.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/ActivityProvider.html b/docs/apidocs/roboguice/inject/class-use/ActivityProvider.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/ActivityProvider.html
rename to docs/apidocs/roboguice/inject/class-use/ActivityProvider.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/AssetManagerProvider.html b/docs/apidocs/roboguice/inject/class-use/AssetManagerProvider.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/AssetManagerProvider.html
rename to docs/apidocs/roboguice/inject/class-use/AssetManagerProvider.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/ContentResolverProvider.html b/docs/apidocs/roboguice/inject/class-use/ContentResolverProvider.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/ContentResolverProvider.html
rename to docs/apidocs/roboguice/inject/class-use/ContentResolverProvider.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/ContextScope.html b/docs/apidocs/roboguice/inject/class-use/ContextScope.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/ContextScope.html
rename to docs/apidocs/roboguice/inject/class-use/ContextScope.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/ContextScoped.html b/docs/apidocs/roboguice/inject/class-use/ContextScoped.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/ContextScoped.html
rename to docs/apidocs/roboguice/inject/class-use/ContextScoped.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/ExtraConverter.html b/docs/apidocs/roboguice/inject/class-use/ExtraConverter.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/ExtraConverter.html
rename to docs/apidocs/roboguice/inject/class-use/ExtraConverter.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/ExtrasListener.ExtrasMembersInjector.html b/docs/apidocs/roboguice/inject/class-use/ExtrasListener.ExtrasMembersInjector.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/ExtrasListener.ExtrasMembersInjector.html
rename to docs/apidocs/roboguice/inject/class-use/ExtrasListener.ExtrasMembersInjector.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/ExtrasListener.html b/docs/apidocs/roboguice/inject/class-use/ExtrasListener.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/ExtrasListener.html
rename to docs/apidocs/roboguice/inject/class-use/ExtrasListener.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/InjectExtra.html b/docs/apidocs/roboguice/inject/class-use/InjectExtra.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/InjectExtra.html
rename to docs/apidocs/roboguice/inject/class-use/InjectExtra.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/InjectPreference.html b/docs/apidocs/roboguice/inject/class-use/InjectPreference.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/InjectPreference.html
rename to docs/apidocs/roboguice/inject/class-use/InjectPreference.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/InjectResource.html b/docs/apidocs/roboguice/inject/class-use/InjectResource.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/InjectResource.html
rename to docs/apidocs/roboguice/inject/class-use/InjectResource.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/InjectView.html b/docs/apidocs/roboguice/inject/class-use/InjectView.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/InjectView.html
rename to docs/apidocs/roboguice/inject/class-use/InjectView.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/InjectorProvider.html b/docs/apidocs/roboguice/inject/class-use/InjectorProvider.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/InjectorProvider.html
rename to docs/apidocs/roboguice/inject/class-use/InjectorProvider.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/PreferenceListener.PreferenceMembersInjector.html b/docs/apidocs/roboguice/inject/class-use/PreferenceListener.PreferenceMembersInjector.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/PreferenceListener.PreferenceMembersInjector.html
rename to docs/apidocs/roboguice/inject/class-use/PreferenceListener.PreferenceMembersInjector.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/PreferenceListener.html b/docs/apidocs/roboguice/inject/class-use/PreferenceListener.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/PreferenceListener.html
rename to docs/apidocs/roboguice/inject/class-use/PreferenceListener.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/ResourceFactory.html b/docs/apidocs/roboguice/inject/class-use/ResourceFactory.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/ResourceFactory.html
rename to docs/apidocs/roboguice/inject/class-use/ResourceFactory.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/ResourceListener.ResourceMembersInjector.html b/docs/apidocs/roboguice/inject/class-use/ResourceListener.ResourceMembersInjector.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/ResourceListener.ResourceMembersInjector.html
rename to docs/apidocs/roboguice/inject/class-use/ResourceListener.ResourceMembersInjector.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/ResourceListener.html b/docs/apidocs/roboguice/inject/class-use/ResourceListener.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/ResourceListener.html
rename to docs/apidocs/roboguice/inject/class-use/ResourceListener.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/ResourcesProvider.html b/docs/apidocs/roboguice/inject/class-use/ResourcesProvider.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/ResourcesProvider.html
rename to docs/apidocs/roboguice/inject/class-use/ResourcesProvider.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/RoboApplicationProvider.html b/docs/apidocs/roboguice/inject/class-use/RoboApplicationProvider.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/RoboApplicationProvider.html
rename to docs/apidocs/roboguice/inject/class-use/RoboApplicationProvider.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/SharedPreferencesName.html b/docs/apidocs/roboguice/inject/class-use/SharedPreferencesName.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/SharedPreferencesName.html
rename to docs/apidocs/roboguice/inject/class-use/SharedPreferencesName.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/SharedPreferencesProvider.PreferencesNameHolder.html b/docs/apidocs/roboguice/inject/class-use/SharedPreferencesProvider.PreferencesNameHolder.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/SharedPreferencesProvider.PreferencesNameHolder.html
rename to docs/apidocs/roboguice/inject/class-use/SharedPreferencesProvider.PreferencesNameHolder.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/SharedPreferencesProvider.html b/docs/apidocs/roboguice/inject/class-use/SharedPreferencesProvider.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/SharedPreferencesProvider.html
rename to docs/apidocs/roboguice/inject/class-use/SharedPreferencesProvider.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/StaticTypeListener.html b/docs/apidocs/roboguice/inject/class-use/StaticTypeListener.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/StaticTypeListener.html
rename to docs/apidocs/roboguice/inject/class-use/StaticTypeListener.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/StringResourceFactory.html b/docs/apidocs/roboguice/inject/class-use/StringResourceFactory.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/StringResourceFactory.html
rename to docs/apidocs/roboguice/inject/class-use/StringResourceFactory.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/SystemServiceProvider.html b/docs/apidocs/roboguice/inject/class-use/SystemServiceProvider.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/SystemServiceProvider.html
rename to docs/apidocs/roboguice/inject/class-use/SystemServiceProvider.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/class-use/ViewListener.html b/docs/apidocs/roboguice/inject/class-use/ViewListener.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/class-use/ViewListener.html
rename to docs/apidocs/roboguice/inject/class-use/ViewListener.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/package-frame.html b/docs/apidocs/roboguice/inject/package-frame.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/package-frame.html
rename to docs/apidocs/roboguice/inject/package-frame.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/package-summary.html b/docs/apidocs/roboguice/inject/package-summary.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/package-summary.html
rename to docs/apidocs/roboguice/inject/package-summary.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/package-tree.html b/docs/apidocs/roboguice/inject/package-tree.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/package-tree.html
rename to docs/apidocs/roboguice/inject/package-tree.html
diff --git a/roboguice/docs/apidocs/roboguice/inject/package-use.html b/docs/apidocs/roboguice/inject/package-use.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/inject/package-use.html
rename to docs/apidocs/roboguice/inject/package-use.html
diff --git a/roboguice/docs/apidocs/roboguice/receiver/RoboBroadcastReceiver.html b/docs/apidocs/roboguice/receiver/RoboBroadcastReceiver.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/receiver/RoboBroadcastReceiver.html
rename to docs/apidocs/roboguice/receiver/RoboBroadcastReceiver.html
diff --git a/roboguice/docs/apidocs/roboguice/receiver/class-use/RoboBroadcastReceiver.html b/docs/apidocs/roboguice/receiver/class-use/RoboBroadcastReceiver.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/receiver/class-use/RoboBroadcastReceiver.html
rename to docs/apidocs/roboguice/receiver/class-use/RoboBroadcastReceiver.html
diff --git a/roboguice/docs/apidocs/roboguice/receiver/package-frame.html b/docs/apidocs/roboguice/receiver/package-frame.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/receiver/package-frame.html
rename to docs/apidocs/roboguice/receiver/package-frame.html
diff --git a/roboguice/docs/apidocs/roboguice/receiver/package-summary.html b/docs/apidocs/roboguice/receiver/package-summary.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/receiver/package-summary.html
rename to docs/apidocs/roboguice/receiver/package-summary.html
diff --git a/roboguice/docs/apidocs/roboguice/receiver/package-tree.html b/docs/apidocs/roboguice/receiver/package-tree.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/receiver/package-tree.html
rename to docs/apidocs/roboguice/receiver/package-tree.html
diff --git a/roboguice/docs/apidocs/roboguice/receiver/package-use.html b/docs/apidocs/roboguice/receiver/package-use.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/receiver/package-use.html
rename to docs/apidocs/roboguice/receiver/package-use.html
diff --git a/roboguice/docs/apidocs/roboguice/service/RoboIntentService.html b/docs/apidocs/roboguice/service/RoboIntentService.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/service/RoboIntentService.html
rename to docs/apidocs/roboguice/service/RoboIntentService.html
diff --git a/roboguice/docs/apidocs/roboguice/service/RoboService.html b/docs/apidocs/roboguice/service/RoboService.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/service/RoboService.html
rename to docs/apidocs/roboguice/service/RoboService.html
diff --git a/roboguice/docs/apidocs/roboguice/service/class-use/RoboIntentService.html b/docs/apidocs/roboguice/service/class-use/RoboIntentService.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/service/class-use/RoboIntentService.html
rename to docs/apidocs/roboguice/service/class-use/RoboIntentService.html
diff --git a/roboguice/docs/apidocs/roboguice/service/class-use/RoboService.html b/docs/apidocs/roboguice/service/class-use/RoboService.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/service/class-use/RoboService.html
rename to docs/apidocs/roboguice/service/class-use/RoboService.html
diff --git a/roboguice/docs/apidocs/roboguice/service/event/OnConfigurationChangedEvent.html b/docs/apidocs/roboguice/service/event/OnConfigurationChangedEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/service/event/OnConfigurationChangedEvent.html
rename to docs/apidocs/roboguice/service/event/OnConfigurationChangedEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/service/event/OnCreateEvent.html b/docs/apidocs/roboguice/service/event/OnCreateEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/service/event/OnCreateEvent.html
rename to docs/apidocs/roboguice/service/event/OnCreateEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/service/event/OnDestroyEvent.html b/docs/apidocs/roboguice/service/event/OnDestroyEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/service/event/OnDestroyEvent.html
rename to docs/apidocs/roboguice/service/event/OnDestroyEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/service/event/OnStartEvent.html b/docs/apidocs/roboguice/service/event/OnStartEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/service/event/OnStartEvent.html
rename to docs/apidocs/roboguice/service/event/OnStartEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/service/event/class-use/OnConfigurationChangedEvent.html b/docs/apidocs/roboguice/service/event/class-use/OnConfigurationChangedEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/service/event/class-use/OnConfigurationChangedEvent.html
rename to docs/apidocs/roboguice/service/event/class-use/OnConfigurationChangedEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/service/event/class-use/OnCreateEvent.html b/docs/apidocs/roboguice/service/event/class-use/OnCreateEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/service/event/class-use/OnCreateEvent.html
rename to docs/apidocs/roboguice/service/event/class-use/OnCreateEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/service/event/class-use/OnDestroyEvent.html b/docs/apidocs/roboguice/service/event/class-use/OnDestroyEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/service/event/class-use/OnDestroyEvent.html
rename to docs/apidocs/roboguice/service/event/class-use/OnDestroyEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/service/event/class-use/OnStartEvent.html b/docs/apidocs/roboguice/service/event/class-use/OnStartEvent.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/service/event/class-use/OnStartEvent.html
rename to docs/apidocs/roboguice/service/event/class-use/OnStartEvent.html
diff --git a/roboguice/docs/apidocs/roboguice/service/event/package-frame.html b/docs/apidocs/roboguice/service/event/package-frame.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/service/event/package-frame.html
rename to docs/apidocs/roboguice/service/event/package-frame.html
diff --git a/roboguice/docs/apidocs/roboguice/service/event/package-summary.html b/docs/apidocs/roboguice/service/event/package-summary.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/service/event/package-summary.html
rename to docs/apidocs/roboguice/service/event/package-summary.html
diff --git a/roboguice/docs/apidocs/roboguice/service/event/package-tree.html b/docs/apidocs/roboguice/service/event/package-tree.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/service/event/package-tree.html
rename to docs/apidocs/roboguice/service/event/package-tree.html
diff --git a/roboguice/docs/apidocs/roboguice/service/event/package-use.html b/docs/apidocs/roboguice/service/event/package-use.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/service/event/package-use.html
rename to docs/apidocs/roboguice/service/event/package-use.html
diff --git a/roboguice/docs/apidocs/roboguice/service/package-frame.html b/docs/apidocs/roboguice/service/package-frame.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/service/package-frame.html
rename to docs/apidocs/roboguice/service/package-frame.html
diff --git a/roboguice/docs/apidocs/roboguice/service/package-summary.html b/docs/apidocs/roboguice/service/package-summary.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/service/package-summary.html
rename to docs/apidocs/roboguice/service/package-summary.html
diff --git a/roboguice/docs/apidocs/roboguice/service/package-tree.html b/docs/apidocs/roboguice/service/package-tree.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/service/package-tree.html
rename to docs/apidocs/roboguice/service/package-tree.html
diff --git a/roboguice/docs/apidocs/roboguice/service/package-use.html b/docs/apidocs/roboguice/service/package-use.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/service/package-use.html
rename to docs/apidocs/roboguice/service/package-use.html
diff --git a/roboguice/docs/apidocs/roboguice/test/RoboActivityUnitTestCase.html b/docs/apidocs/roboguice/test/RoboActivityUnitTestCase.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/test/RoboActivityUnitTestCase.html
rename to docs/apidocs/roboguice/test/RoboActivityUnitTestCase.html
diff --git a/roboguice/docs/apidocs/roboguice/test/RoboUnitTestCase.html b/docs/apidocs/roboguice/test/RoboUnitTestCase.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/test/RoboUnitTestCase.html
rename to docs/apidocs/roboguice/test/RoboUnitTestCase.html
diff --git a/roboguice/docs/apidocs/roboguice/test/class-use/RoboActivityUnitTestCase.html b/docs/apidocs/roboguice/test/class-use/RoboActivityUnitTestCase.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/test/class-use/RoboActivityUnitTestCase.html
rename to docs/apidocs/roboguice/test/class-use/RoboActivityUnitTestCase.html
diff --git a/roboguice/docs/apidocs/roboguice/test/class-use/RoboUnitTestCase.html b/docs/apidocs/roboguice/test/class-use/RoboUnitTestCase.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/test/class-use/RoboUnitTestCase.html
rename to docs/apidocs/roboguice/test/class-use/RoboUnitTestCase.html
diff --git a/roboguice/docs/apidocs/roboguice/test/package-frame.html b/docs/apidocs/roboguice/test/package-frame.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/test/package-frame.html
rename to docs/apidocs/roboguice/test/package-frame.html
diff --git a/roboguice/docs/apidocs/roboguice/test/package-summary.html b/docs/apidocs/roboguice/test/package-summary.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/test/package-summary.html
rename to docs/apidocs/roboguice/test/package-summary.html
diff --git a/roboguice/docs/apidocs/roboguice/test/package-tree.html b/docs/apidocs/roboguice/test/package-tree.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/test/package-tree.html
rename to docs/apidocs/roboguice/test/package-tree.html
diff --git a/roboguice/docs/apidocs/roboguice/test/package-use.html b/docs/apidocs/roboguice/test/package-use.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/test/package-use.html
rename to docs/apidocs/roboguice/test/package-use.html
diff --git a/roboguice/docs/apidocs/roboguice/util/Ln.BaseConfig.html b/docs/apidocs/roboguice/util/Ln.BaseConfig.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/util/Ln.BaseConfig.html
rename to docs/apidocs/roboguice/util/Ln.BaseConfig.html
diff --git a/roboguice/docs/apidocs/roboguice/util/Ln.Config.html b/docs/apidocs/roboguice/util/Ln.Config.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/util/Ln.Config.html
rename to docs/apidocs/roboguice/util/Ln.Config.html
diff --git a/roboguice/docs/apidocs/roboguice/util/Ln.Print.html b/docs/apidocs/roboguice/util/Ln.Print.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/util/Ln.Print.html
rename to docs/apidocs/roboguice/util/Ln.Print.html
diff --git a/roboguice/docs/apidocs/roboguice/util/Ln.html b/docs/apidocs/roboguice/util/Ln.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/util/Ln.html
rename to docs/apidocs/roboguice/util/Ln.html
diff --git a/roboguice/docs/apidocs/roboguice/util/RoboAsyncTask.RoboTask.html b/docs/apidocs/roboguice/util/RoboAsyncTask.RoboTask.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/util/RoboAsyncTask.RoboTask.html
rename to docs/apidocs/roboguice/util/RoboAsyncTask.RoboTask.html
diff --git a/roboguice/docs/apidocs/roboguice/util/RoboAsyncTask.html b/docs/apidocs/roboguice/util/RoboAsyncTask.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/util/RoboAsyncTask.html
rename to docs/apidocs/roboguice/util/RoboAsyncTask.html
diff --git a/roboguice/docs/apidocs/roboguice/util/RoboLooperThread.html b/docs/apidocs/roboguice/util/RoboLooperThread.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/util/RoboLooperThread.html
rename to docs/apidocs/roboguice/util/RoboLooperThread.html
diff --git a/roboguice/docs/apidocs/roboguice/util/RoboThread.html b/docs/apidocs/roboguice/util/RoboThread.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/util/RoboThread.html
rename to docs/apidocs/roboguice/util/RoboThread.html
diff --git a/roboguice/docs/apidocs/roboguice/util/SafeAsyncTask.Task.html b/docs/apidocs/roboguice/util/SafeAsyncTask.Task.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/util/SafeAsyncTask.Task.html
rename to docs/apidocs/roboguice/util/SafeAsyncTask.Task.html
diff --git a/roboguice/docs/apidocs/roboguice/util/SafeAsyncTask.html b/docs/apidocs/roboguice/util/SafeAsyncTask.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/util/SafeAsyncTask.html
rename to docs/apidocs/roboguice/util/SafeAsyncTask.html
diff --git a/roboguice/docs/apidocs/roboguice/util/Strings.html b/docs/apidocs/roboguice/util/Strings.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/util/Strings.html
rename to docs/apidocs/roboguice/util/Strings.html
diff --git a/roboguice/docs/apidocs/roboguice/util/class-use/Ln.BaseConfig.html b/docs/apidocs/roboguice/util/class-use/Ln.BaseConfig.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/util/class-use/Ln.BaseConfig.html
rename to docs/apidocs/roboguice/util/class-use/Ln.BaseConfig.html
diff --git a/roboguice/docs/apidocs/roboguice/util/class-use/Ln.Config.html b/docs/apidocs/roboguice/util/class-use/Ln.Config.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/util/class-use/Ln.Config.html
rename to docs/apidocs/roboguice/util/class-use/Ln.Config.html
diff --git a/roboguice/docs/apidocs/roboguice/util/class-use/Ln.Print.html b/docs/apidocs/roboguice/util/class-use/Ln.Print.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/util/class-use/Ln.Print.html
rename to docs/apidocs/roboguice/util/class-use/Ln.Print.html
diff --git a/roboguice/docs/apidocs/roboguice/util/class-use/Ln.html b/docs/apidocs/roboguice/util/class-use/Ln.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/util/class-use/Ln.html
rename to docs/apidocs/roboguice/util/class-use/Ln.html
diff --git a/roboguice/docs/apidocs/roboguice/util/class-use/RoboAsyncTask.RoboTask.html b/docs/apidocs/roboguice/util/class-use/RoboAsyncTask.RoboTask.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/util/class-use/RoboAsyncTask.RoboTask.html
rename to docs/apidocs/roboguice/util/class-use/RoboAsyncTask.RoboTask.html
diff --git a/roboguice/docs/apidocs/roboguice/util/class-use/RoboAsyncTask.html b/docs/apidocs/roboguice/util/class-use/RoboAsyncTask.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/util/class-use/RoboAsyncTask.html
rename to docs/apidocs/roboguice/util/class-use/RoboAsyncTask.html
diff --git a/roboguice/docs/apidocs/roboguice/util/class-use/RoboLooperThread.html b/docs/apidocs/roboguice/util/class-use/RoboLooperThread.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/util/class-use/RoboLooperThread.html
rename to docs/apidocs/roboguice/util/class-use/RoboLooperThread.html
diff --git a/roboguice/docs/apidocs/roboguice/util/class-use/RoboThread.html b/docs/apidocs/roboguice/util/class-use/RoboThread.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/util/class-use/RoboThread.html
rename to docs/apidocs/roboguice/util/class-use/RoboThread.html
diff --git a/roboguice/docs/apidocs/roboguice/util/class-use/SafeAsyncTask.Task.html b/docs/apidocs/roboguice/util/class-use/SafeAsyncTask.Task.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/util/class-use/SafeAsyncTask.Task.html
rename to docs/apidocs/roboguice/util/class-use/SafeAsyncTask.Task.html
diff --git a/roboguice/docs/apidocs/roboguice/util/class-use/SafeAsyncTask.html b/docs/apidocs/roboguice/util/class-use/SafeAsyncTask.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/util/class-use/SafeAsyncTask.html
rename to docs/apidocs/roboguice/util/class-use/SafeAsyncTask.html
diff --git a/roboguice/docs/apidocs/roboguice/util/class-use/Strings.html b/docs/apidocs/roboguice/util/class-use/Strings.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/util/class-use/Strings.html
rename to docs/apidocs/roboguice/util/class-use/Strings.html
diff --git a/roboguice/docs/apidocs/roboguice/util/package-frame.html b/docs/apidocs/roboguice/util/package-frame.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/util/package-frame.html
rename to docs/apidocs/roboguice/util/package-frame.html
diff --git a/roboguice/docs/apidocs/roboguice/util/package-summary.html b/docs/apidocs/roboguice/util/package-summary.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/util/package-summary.html
rename to docs/apidocs/roboguice/util/package-summary.html
diff --git a/roboguice/docs/apidocs/roboguice/util/package-tree.html b/docs/apidocs/roboguice/util/package-tree.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/util/package-tree.html
rename to docs/apidocs/roboguice/util/package-tree.html
diff --git a/roboguice/docs/apidocs/roboguice/util/package-use.html b/docs/apidocs/roboguice/util/package-use.html
similarity index 100%
rename from roboguice/docs/apidocs/roboguice/util/package-use.html
rename to docs/apidocs/roboguice/util/package-use.html
diff --git a/roboguice/docs/apidocs/stylesheet.css b/docs/apidocs/stylesheet.css
similarity index 100%
rename from roboguice/docs/apidocs/stylesheet.css
rename to docs/apidocs/stylesheet.css
diff --git a/roboguice/lib/guice-2.0-no_aop.jar b/lib/guice-2.0-no_aop.jar
similarity index 100%
rename from roboguice/lib/guice-2.0-no_aop.jar
rename to lib/guice-2.0-no_aop.jar
diff --git a/roboguice/lib/guice-2.0-src.jar b/lib/guice-2.0-src.jar
similarity index 100%
rename from roboguice/lib/guice-2.0-src.jar
rename to lib/guice-2.0-src.jar
diff --git a/roboguice/lint.xml b/lint.xml
similarity index 100%
rename from roboguice/lint.xml
rename to lint.xml
diff --git a/maven_repo_3rd_party/README.txt b/maven_repo_3rd_party/README.txt
deleted file mode 100644
index eca1eb1d3..000000000
--- a/maven_repo_3rd_party/README.txt
+++ /dev/null
@@ -1,11 +0,0 @@
-to install dependencies in this repository, use a command like the following:
-
-mvn install:install-file -Dfile=~/Downloads/littlefluffytoys_r6.jar \
-                         -DgroupId=com.littlefluffytoys \
-                         -DartifactId=locationlibrary \
-                         -Dversion=r6 \
-                         -Dpackaging=jar \
-                         -DgeneratePom=true \
-                         -DcreateChecksum=true \
-                         -DlocalRepositoryPath=maven_repo_3rd_party
-
diff --git a/maven_repo_3rd_party/android/support/compatibility-v4/19/compatibility-v4-19-sources.jar b/maven_repo_3rd_party/android/support/compatibility-v4/19/compatibility-v4-19-sources.jar
deleted file mode 100644
index 1b98d761e..000000000
Binary files a/maven_repo_3rd_party/android/support/compatibility-v4/19/compatibility-v4-19-sources.jar and /dev/null differ
diff --git a/maven_repo_3rd_party/android/support/compatibility-v4/19/compatibility-v4-19.jar b/maven_repo_3rd_party/android/support/compatibility-v4/19/compatibility-v4-19.jar
deleted file mode 100644
index 9056828a0..000000000
Binary files a/maven_repo_3rd_party/android/support/compatibility-v4/19/compatibility-v4-19.jar and /dev/null differ
diff --git a/maven_repo_3rd_party/android/support/compatibility-v4/19/compatibility-v4-19.pom b/maven_repo_3rd_party/android/support/compatibility-v4/19/compatibility-v4-19.pom
deleted file mode 100644
index 96c34ffdb..000000000
--- a/maven_repo_3rd_party/android/support/compatibility-v4/19/compatibility-v4-19.pom
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
-    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
-  <modelVersion>4.0.0</modelVersion>
-  <groupId>android.support</groupId>
-  <artifactId>compatibility-v4</artifactId>
-  <version>19</version>
-  <description>POM was created from install:install-file</description>
-</project>
diff --git a/maven_repo_3rd_party/android/support/compatibility-v4/maven-metadata-local.xml.md5 b/maven_repo_3rd_party/android/support/compatibility-v4/maven-metadata-local.xml.md5
deleted file mode 100644
index 108055c6e..000000000
--- a/maven_repo_3rd_party/android/support/compatibility-v4/maven-metadata-local.xml.md5
+++ /dev/null
@@ -1 +0,0 @@
-2b1a5753b8f50698ae893812740dc8d7
\ No newline at end of file
diff --git a/maven_repo_3rd_party/android/support/compatibility-v4/maven-metadata-local.xml.sha1 b/maven_repo_3rd_party/android/support/compatibility-v4/maven-metadata-local.xml.sha1
deleted file mode 100644
index 8af48ce00..000000000
--- a/maven_repo_3rd_party/android/support/compatibility-v4/maven-metadata-local.xml.sha1
+++ /dev/null
@@ -1 +0,0 @@
-9f3495da86aff32776d14af0a3024ade183c595f
\ No newline at end of file
diff --git a/maven_repo_3rd_party/android/support/compatibility-v7-appcompat/19/compatibility-v7-appcompat-19-sources.jar b/maven_repo_3rd_party/android/support/compatibility-v7-appcompat/19/compatibility-v7-appcompat-19-sources.jar
deleted file mode 100644
index 9d9992735..000000000
Binary files a/maven_repo_3rd_party/android/support/compatibility-v7-appcompat/19/compatibility-v7-appcompat-19-sources.jar and /dev/null differ
diff --git a/maven_repo_3rd_party/android/support/compatibility-v7-appcompat/19/compatibility-v7-appcompat-19.apklib b/maven_repo_3rd_party/android/support/compatibility-v7-appcompat/19/compatibility-v7-appcompat-19.apklib
deleted file mode 100644
index d923fff75..000000000
Binary files a/maven_repo_3rd_party/android/support/compatibility-v7-appcompat/19/compatibility-v7-appcompat-19.apklib and /dev/null differ
diff --git a/maven_repo_3rd_party/android/support/compatibility-v7-appcompat/19/compatibility-v7-appcompat-19.jar b/maven_repo_3rd_party/android/support/compatibility-v7-appcompat/19/compatibility-v7-appcompat-19.jar
deleted file mode 100644
index fd1d984d0..000000000
Binary files a/maven_repo_3rd_party/android/support/compatibility-v7-appcompat/19/compatibility-v7-appcompat-19.jar and /dev/null differ
diff --git a/maven_repo_3rd_party/android/support/compatibility-v7-appcompat/19/compatibility-v7-appcompat-19.pom b/maven_repo_3rd_party/android/support/compatibility-v7-appcompat/19/compatibility-v7-appcompat-19.pom
deleted file mode 100644
index 733194836..000000000
--- a/maven_repo_3rd_party/android/support/compatibility-v7-appcompat/19/compatibility-v7-appcompat-19.pom
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
-    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
-  <modelVersion>4.0.0</modelVersion>
-  <groupId>android.support</groupId>
-  <artifactId>compatibility-v7-appcompat</artifactId>
-  <version>19</version>
-  <description>POM was created from install:install-file</description>
-</project>
diff --git a/maven_repo_3rd_party/android/support/compatibility-v7/19/compatibility-v7-19-sources.jar b/maven_repo_3rd_party/android/support/compatibility-v7/19/compatibility-v7-19-sources.jar
deleted file mode 100644
index fc028162a..000000000
Binary files a/maven_repo_3rd_party/android/support/compatibility-v7/19/compatibility-v7-19-sources.jar and /dev/null differ
diff --git a/maven_repo_3rd_party/android/support/compatibility-v7/19/compatibility-v7-19.apklib b/maven_repo_3rd_party/android/support/compatibility-v7/19/compatibility-v7-19.apklib
deleted file mode 100644
index 373c29067..000000000
Binary files a/maven_repo_3rd_party/android/support/compatibility-v7/19/compatibility-v7-19.apklib and /dev/null differ
diff --git a/maven_repo_3rd_party/android/support/compatibility-v7/19/compatibility-v7-19.jar b/maven_repo_3rd_party/android/support/compatibility-v7/19/compatibility-v7-19.jar
deleted file mode 100644
index 3695f890c..000000000
Binary files a/maven_repo_3rd_party/android/support/compatibility-v7/19/compatibility-v7-19.jar and /dev/null differ
diff --git a/maven_repo_3rd_party/android/support/compatibility-v7/19/compatibility-v7-19.pom b/maven_repo_3rd_party/android/support/compatibility-v7/19/compatibility-v7-19.pom
deleted file mode 100644
index d483460a1..000000000
--- a/maven_repo_3rd_party/android/support/compatibility-v7/19/compatibility-v7-19.pom
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
-    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
-  <modelVersion>4.0.0</modelVersion>
-  <groupId>android.support</groupId>
-  <artifactId>compatibility-v7</artifactId>
-  <version>19</version>
-  <description>POM was created from install:install-file</description>
-</project>
diff --git a/maven_repo_3rd_party/com/google/android/android/4.2.0.1/android-4.2.0.1.jar b/maven_repo_3rd_party/com/google/android/android/4.2.0.1/android-4.2.0.1.jar
deleted file mode 100644
index 13c253950..000000000
Binary files a/maven_repo_3rd_party/com/google/android/android/4.2.0.1/android-4.2.0.1.jar and /dev/null differ
diff --git a/maven_repo_3rd_party/com/google/android/android/4.2.0.1/android-4.2.0.1.jar.sha1 b/maven_repo_3rd_party/com/google/android/android/4.2.0.1/android-4.2.0.1.jar.sha1
deleted file mode 100644
index 2792c158c..000000000
--- a/maven_repo_3rd_party/com/google/android/android/4.2.0.1/android-4.2.0.1.jar.sha1
+++ /dev/null
@@ -1 +0,0 @@
-f3fec4e3d887c5bba177bd62933a8e9ee4b4403c
\ No newline at end of file
diff --git a/maven_repo_3rd_party/com/google/android/android/4.2.0.1/android-4.2.0.1.pom b/maven_repo_3rd_party/com/google/android/android/4.2.0.1/android-4.2.0.1.pom
deleted file mode 100644
index 4bdcd915f..000000000
--- a/maven_repo_3rd_party/com/google/android/android/4.2.0.1/android-4.2.0.1.pom
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
-    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
-  <modelVersion>4.0.0</modelVersion>
-  <groupId>com.google.android</groupId>
-  <artifactId>android</artifactId>
-  <version>4.2.0.1</version>
-  <description>POM was created from install:install-file</description>
-</project>
diff --git a/maven_repo_3rd_party/com/google/android/android/4.2.0.1/android-4.2.0.1.pom.sha1 b/maven_repo_3rd_party/com/google/android/android/4.2.0.1/android-4.2.0.1.pom.sha1
deleted file mode 100644
index 237f3a3a5..000000000
--- a/maven_repo_3rd_party/com/google/android/android/4.2.0.1/android-4.2.0.1.pom.sha1
+++ /dev/null
@@ -1 +0,0 @@
-f670f6e124d479fd596c952aa7c5918f50241a70
\ No newline at end of file
diff --git a/maven_repo_3rd_party/com/google/android/maps/maps/7_r1/maps-7_r1.jar b/maven_repo_3rd_party/com/google/android/maps/maps/7_r1/maps-7_r1.jar
deleted file mode 100644
index 0bb941400..000000000
Binary files a/maven_repo_3rd_party/com/google/android/maps/maps/7_r1/maps-7_r1.jar and /dev/null differ
diff --git a/maven_repo_3rd_party/com/google/android/maps/maps/7_r1/maps-7_r1.jar.md5 b/maven_repo_3rd_party/com/google/android/maps/maps/7_r1/maps-7_r1.jar.md5
deleted file mode 100644
index 257513b3f..000000000
--- a/maven_repo_3rd_party/com/google/android/maps/maps/7_r1/maps-7_r1.jar.md5
+++ /dev/null
@@ -1 +0,0 @@
-7eb8b83ef5013be78ebfdbdd1b0120a2
\ No newline at end of file
diff --git a/maven_repo_3rd_party/com/google/android/maps/maps/7_r1/maps-7_r1.jar.sha1 b/maven_repo_3rd_party/com/google/android/maps/maps/7_r1/maps-7_r1.jar.sha1
deleted file mode 100644
index 7244bdfa2..000000000
--- a/maven_repo_3rd_party/com/google/android/maps/maps/7_r1/maps-7_r1.jar.sha1
+++ /dev/null
@@ -1 +0,0 @@
-c49be8f6bab271911c80bee6d571bf107d29a369
\ No newline at end of file
diff --git a/maven_repo_3rd_party/com/google/android/maps/maps/7_r1/maps-7_r1.pom b/maven_repo_3rd_party/com/google/android/maps/maps/7_r1/maps-7_r1.pom
deleted file mode 100644
index de7035a2e..000000000
--- a/maven_repo_3rd_party/com/google/android/maps/maps/7_r1/maps-7_r1.pom
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
-    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
-  <modelVersion>4.0.0</modelVersion>
-  <groupId>com.google.android.maps</groupId>
-  <artifactId>maps</artifactId>
-  <version>7_r1</version>
-  <description>POM was created from install:install-file</description>
-</project>
diff --git a/maven_repo_3rd_party/com/google/android/maps/maps/7_r1/maps-7_r1.pom.md5 b/maven_repo_3rd_party/com/google/android/maps/maps/7_r1/maps-7_r1.pom.md5
deleted file mode 100644
index 5297382e1..000000000
--- a/maven_repo_3rd_party/com/google/android/maps/maps/7_r1/maps-7_r1.pom.md5
+++ /dev/null
@@ -1 +0,0 @@
-10b8c3a0714a15e402da78d5df5d17a2
\ No newline at end of file
diff --git a/maven_repo_3rd_party/com/google/android/maps/maps/7_r1/maps-7_r1.pom.sha1 b/maven_repo_3rd_party/com/google/android/maps/maps/7_r1/maps-7_r1.pom.sha1
deleted file mode 100644
index 9a13a2ce7..000000000
--- a/maven_repo_3rd_party/com/google/android/maps/maps/7_r1/maps-7_r1.pom.sha1
+++ /dev/null
@@ -1 +0,0 @@
-d85a82f776f1148401e751ef6a4e689eb4db2f87
\ No newline at end of file
diff --git a/maven_repo_3rd_party/com/google/android/maps/maps/maven-metadata-local.xml b/maven_repo_3rd_party/com/google/android/maps/maps/maven-metadata-local.xml
deleted file mode 100644
index c041d22ef..000000000
--- a/maven_repo_3rd_party/com/google/android/maps/maps/maven-metadata-local.xml
+++ /dev/null
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<metadata>
-  <groupId>com.google.android.maps</groupId>
-  <artifactId>maps</artifactId>
-  <versioning>
-    <release>7_r1</release>
-    <versions>
-      <version>7_r1</version>
-    </versions>
-    <lastUpdated>20121210201032</lastUpdated>
-  </versioning>
-</metadata>
diff --git a/maven_repo_3rd_party/com/google/android/maps/maps/maven-metadata-local.xml.md5 b/maven_repo_3rd_party/com/google/android/maps/maps/maven-metadata-local.xml.md5
deleted file mode 100644
index fb9d5359f..000000000
--- a/maven_repo_3rd_party/com/google/android/maps/maps/maven-metadata-local.xml.md5
+++ /dev/null
@@ -1 +0,0 @@
-3ffafad9fd9f3a7e438d06e10a65211f
\ No newline at end of file
diff --git a/maven_repo_3rd_party/com/google/android/maps/maps/maven-metadata-local.xml.sha1 b/maven_repo_3rd_party/com/google/android/maps/maps/maven-metadata-local.xml.sha1
deleted file mode 100644
index ad1121cae..000000000
--- a/maven_repo_3rd_party/com/google/android/maps/maps/maven-metadata-local.xml.sha1
+++ /dev/null
@@ -1 +0,0 @@
-8064b721c7e124911ab46ef26b88f5e6094522b3
\ No newline at end of file
diff --git a/pom.xml b/pom.xml
index f75aab117..de57f83e8 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1,324 +1,175 @@
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-	<modelVersion>4.0.0</modelVersion>
-	<groupId>org.roboguice</groupId>
-	<artifactId>roboguice-aggregator</artifactId>
-	<name>Aggregator</name>
-	<version>3.0-alpha-3-SNAPSHOT</version>
-	<packaging>pom</packaging>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
 
-	<prerequisites>
-		<maven>3.1.1</maven>
-	</prerequisites>
+  <parent>
+    <groupId>edu.asu.ying</groupId>
+    <artifactId>ying</artifactId>
+    <version>0.1.1</version>
+  </parent>
 
-	<modules>
-		<module>roboguice</module>
-		<module>additional-tests</module>
-		<module>astroboy</module>
-	</modules>
+  <groupId>org.roboguice</groupId>
+  <artifactId>roboguice</artifactId>
+  <version>0.1.1-SNAPSHOT</version>
+  <name>RoboGuice</name>
 
-	<parent>
-		<groupId>org.sonatype.oss</groupId>
-		<artifactId>oss-parent</artifactId>
-		<version>6</version>
-	</parent>
+  <prerequisites>
+    <maven>3.1.1</maven>
+  </prerequisites>
 
-	<licenses>
-		<license>
-			<name>Apache 2</name>
-			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
-		</license>
-	</licenses>
+  <licenses>
+    <license>
+      <name>Apache 2</name>
+      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
+    </license>
+  </licenses>
 
-	<url>http://roboguice.org</url>
-	<scm>
-		<url>https://github.com/roboguice/roboguice</url>
-		<connection>scm:git:https://github.com/roboguice/roboguice.git</connection>
-		<developerConnection>scm:git:https://github.com/roboguice/roboguice.git</developerConnection>
-		<tag>HEAD</tag>
-	</scm>
+  <url>http://roboguice.org</url>
+  <scm>
+    <url>https://github.com/osbolab/roboguice</url>
+    <connection>scm:git:https://github.com/osbolab/roboguice.git</connection>
+    <developerConnection>scm:git:svn://github.com/osbolab/roboguice.git</developerConnection>
+    <tag>HEAD</tag>
+  </scm>
 
-	<properties>
-		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-		<java.version>1.6</java.version>
+  <dependencies>
+    <!-- TEST DEPENDENCIES -->
+    <!-- http://stackoverflow.com/a/18463743/693752 -->
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <version>4.11</version>
+      <scope>test</scope>
+    </dependency>
 
-		<!-- PLUGINS -->
-		<android-maven-plugin.version>3.8.2</android-maven-plugin.version>
-		<maven-compiler-plugin.version>3.1</maven-compiler-plugin.version>
-		<lifecycle-mapping-plugin.version>1.0.0</lifecycle-mapping-plugin.version>
-		<maven-pmd-plugin.version>3.0.1</maven-pmd-plugin.version>
-		<findbugs-maven-plugin.version>2.5.2</findbugs-maven-plugin.version>
-		<maven-checkstyle-plugin.version>2.12.1</maven-checkstyle-plugin.version>
-		<maven-jar-plugin.version>2.4</maven-jar-plugin.version>
-		<maven-source-plugin.version>2.2.1</maven-source-plugin.version>
-		<maven-javadoc-plugin.version>2.9</maven-javadoc-plugin.version>
-		<jacoco-maven-plugin.version>0.6.2.201302030002</jacoco-maven-plugin.version>
-		<!-- LIBRARIES -->
-		<android-platform.version>4.1.1.4</android-platform.version>
-		<android-map.version>7_r1</android-map.version>
-		<android-build.version>19</android-build.version>
-		<guice.version>3.0</guice.version>
+    <!-- DEPENDENCIES -->
+    <dependency>
+      <groupId>android</groupId>
+      <artifactId>android</artifactId>
+      <version>4.4.2_r3</version>
+      <scope>provided</scope>
+    </dependency>
+    <dependency>
+      <groupId>com.google.android.maps</groupId>
+      <artifactId>maps</artifactId>
+      <version>19_r5</version>
+      <scope>provided</scope>
+      <optional>true</optional>
+    </dependency>
+    <dependency>
+      <groupId>com.android.support</groupId>
+      <artifactId>support-v4</artifactId>
+      <version>19.1.0</version>
+      <optional>true</optional>
+    </dependency>
+    <dependency>
+      <groupId>com.google.code.findbugs</groupId>
+      <artifactId>jsr305</artifactId>
+      <version>2.0.3</version>
+    </dependency>
+    <dependency>
+      <groupId>com.google.inject</groupId>
+      <artifactId>guice</artifactId>
+      <version>4.0-beta4</version>
+      <classifier>no_aop</classifier>
+    </dependency>
+  </dependencies>
 
-		<!--LIBRARIES -->
-		<android-map.version>7_r1</android-map.version>
-		<android-support-v4.version>19</android-support-v4.version>
-		<android-appcompat-v7.version>19</android-appcompat-v7.version>
-		<actionbarsherlock.version>4.2.0</actionbarsherlock.version>
-		<jsr305.version>2.0.3</jsr305.version>
-		<findbugs-annotations.version>1.0.0</findbugs-annotations.version>
-
-		<!--TESTING -->
-		<junit.version>4.11</junit.version>
-		<robolectric.version>2.2</robolectric.version>
-		<dexmaker.version>1.1</dexmaker.version>
-		<mockito.version>1.9.5</mockito.version>
-		<easymock.version>3.0</easymock.version>
-	</properties>
-
-	<dependencyManagement>
-		<dependencies>
-			<!-- TEST DEPENDENCIES -->
-			<!-- http://stackoverflow.com/a/18463743/693752 -->
-
-			<dependency>
-				<groupId>junit</groupId>
-				<artifactId>junit</artifactId>
-				<version>${junit.version}</version>
-				<scope>test</scope>
-			</dependency>
-
-			<!-- DEPENDENCIES -->
-			<dependency>
-				<groupId>com.google.android</groupId>
-				<artifactId>android</artifactId>
-				<version>${android-platform.version}</version>
-				<scope>provided</scope>
-			</dependency>
-			<dependency>
-				<groupId>com.google.android.maps</groupId>
-				<artifactId>maps</artifactId>
-				<version>${android-map.version}</version>
-				<scope>provided</scope>
-				<optional>true</optional>
-			</dependency>
-			<dependency>
-				<groupId>android.support</groupId>
-				<artifactId>compatibility-v4</artifactId>
-				<version>${android-support-v4.version}</version>
-				<optional>true</optional>
-			</dependency>
-			<dependency>
-				<groupId>android.support</groupId>
-				<artifactId>compatibility-v7-appcompat</artifactId>
-				<version>${android-appcompat-v7.version}</version>
-				<optional>true</optional>
-			</dependency>
-			<dependency>
-				<groupId>com.actionbarsherlock</groupId>
-				<artifactId>actionbarsherlock</artifactId>
-				<version>${actionbarsherlock.version}</version>
-				<type>jar</type>
-				<scope>provided</scope>
-				<optional>true</optional>
-			</dependency>
-			<dependency>
-				<groupId>com.google.code.findbugs</groupId>
-				<artifactId>jsr305</artifactId>
-				<version>${jsr305.version}</version>
-				<scope>test</scope>
-			</dependency>
-			<dependency>
-				<groupId>com.google.inject</groupId>
-				<artifactId>guice</artifactId>
-				<version>${guice.version}</version>
-				<classifier>no_aop</classifier>
-			</dependency>
-			<dependency>
-				<groupId>findbugs</groupId>
-				<artifactId>annotations</artifactId>
-				<version>${findbugs-annotations.version}</version>
-				<type>jar</type>
-			</dependency>
-
-			<!-- TEST DEPENDENCIES -->
-			<dependency>
-				<groupId>org.robolectric</groupId>
-				<artifactId>robolectric</artifactId>
-				<version>${robolectric.version}</version>
-				<scope>test</scope>
-			</dependency>
-			<dependency>
-				<groupId>org.easymock</groupId>
-				<artifactId>easymock</artifactId>
-				<version>${easymock.version}</version>
-				<scope>test</scope>
-			</dependency>
-			<dependency>
-				<groupId>org.mockito</groupId>
-				<artifactId>mockito-core</artifactId>
-				<version>${mockito.version}</version>
-				<scope>test</scope>
-			</dependency>
-			<dependency>
-				<groupId>com.google.dexmaker</groupId>
-				<artifactId>dexmaker</artifactId>
-				<version>${dexmaker.version}</version>
-				<scope>test</scope>
-			</dependency>
-		</dependencies>
-	</dependencyManagement>
-
-	<build>
-		<pluginManagement>
-			<plugins>
-				<plugin>
-					<groupId>org.apache.maven.plugins</groupId>
-					<artifactId>maven-checkstyle-plugin</artifactId>
-					<version>${maven-checkstyle-plugin.version}</version>
-					<configuration>
-						<configLocation>roboguice_checks.xml</configLocation>
-						<suppressionsLocation>roboguice_checks_suppressions.xml</suppressionsLocation>
-						<enableRulesSummary>false</enableRulesSummary>
-						<consoleOutput>true</consoleOutput>
-					</configuration>
-					<executions>
-						<execution>
-							<id>checkstyle-check</id>
-							<phase>process-sources</phase>
-							<goals>
-								<goal>check</goal>
-							</goals>
-						</execution>
-					</executions>
-				</plugin>
-				<plugin>
-					<groupId>org.codehaus.mojo</groupId>
-					<artifactId>findbugs-maven-plugin</artifactId>
-					<version>${findbugs-maven-plugin.version}</version>
-					<executions>
-						<execution>
-							<id>findbugs-check</id>
-							<phase>verify</phase>
-							<goals>
-								<goal>check</goal>
-							</goals>
-						</execution>
-					</executions>
-				</plugin>
-				<plugin>
-					<groupId>org.jacoco</groupId>
-					<artifactId>jacoco-maven-plugin</artifactId>
-					<version>${jacoco-maven-plugin.version}</version>
-					<executions>
-						<execution>
-							<goals>
-								<goal>prepare-agent</goal>
-							</goals>
-						</execution>
-						<execution>
-							<id>report</id>
-							<phase>prepare-package</phase>
-							<goals>
-								<goal>report</goal>
-							</goals>
-						</execution>
-					</executions>
-					<configuration>
-						<includes>
-							<include>roboguice/**</include>
-						</includes>
-					</configuration>
-				</plugin>
-				<!--This plugin's configuration is used to store Eclipse m2e settings 
-					only. It has no influence on the Maven build itself. -->
-				<plugin>
-					<groupId>org.eclipse.m2e</groupId>
-					<artifactId>lifecycle-mapping</artifactId>
-					<version>1.0.0</version>
-					<configuration>
-						<lifecycleMappingMetadata>
-							<pluginExecutions>
-								<pluginExecution>
-									<pluginExecutionFilter>
-										<groupId>
-											org.apache.maven.plugins
-										</groupId>
-										<artifactId>
-											maven-checkstyle-plugin
-										</artifactId>
-										<versionRange>
-											[${maven-checkstyle-plugin.version},)
-										</versionRange>
-										<goals>
-											<goal>check</goal>
-										</goals>
-									</pluginExecutionFilter>
-									<action>
-										<ignore />
-									</action>
-								</pluginExecution>
-								<pluginExecution>
-									<pluginExecutionFilter>
-										<groupId>org.apache.maven.plugins</groupId>
-										<artifactId>maven-enforcer-plugin</artifactId>
-										<versionRange>[1.0.0,)</versionRange>
-										<goals>
-											<goal>enforce</goal>
-										</goals>
-									</pluginExecutionFilter>
-									<action>
-										<ignore />
-									</action>
-								</pluginExecution>
-								<pluginExecution>
-									<pluginExecutionFilter>
-										<groupId>org.jacoco</groupId>
-										<artifactId>jacoco-maven-plugin</artifactId>
-										<versionRange>[${jacoco-maven-plugin.version},)</versionRange>
-										<goals>
-											<goal>prepare-agent</goal>
-											<goal>report</goal>
-										</goals>
-									</pluginExecutionFilter>
-									<action>
-										<ignore />
-									</action>
-								</pluginExecution>
-							</pluginExecutions>
-						</lifecycleMappingMetadata>
-					</configuration>
-				</plugin>
-				<plugin>
-					<groupId>org.apache.maven.plugins</groupId>
-					<artifactId>maven-pmd-plugin</artifactId>
-					<version>${maven-pmd-plugin.version}</version>
-					<configuration>
-						<targetJdk>1.5</targetJdk>
-					</configuration>
-					<executions>
-						<execution>
-							<id>pmd-check</id>
-							<goals>
-								<goal>check</goal>
-								<!-- Too many deduplications to check them 
-								<goal>cpd-check</goal> -->
-							</goals>
-						</execution>
-					</executions>
-				</plugin>
-			</plugins>
-		</pluginManagement>
-		
-		<plugins>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-release-plugin</artifactId>
-				<configuration>
-					<goals>deploy</goals>
-					<autoVersionSubmodules>true</autoVersionSubmodules>
-				</configuration>
-			</plugin>
-		</plugins>
-	</build>
+  <build>
+    <defaultGoal>package</defaultGoal>
+    <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <version>3.1</version>
+        <configuration>
+          <source>${project.java.sourceCompatibility}</source>
+          <target>${project.java.targetCompatibility}</target>
+        </configuration>
+      </plugin>
+      <plugin>
+        <groupId>com.jayway.maven.plugins.android.generation2</groupId>
+        <artifactId>android-maven-plugin</artifactId>
+        <version>4.0.0-SNAPSHOT</version>
+        <configuration>
+          <androidManifestFile>${project.basedir}/AndroidManifest.xml</androidManifestFile>
+          <resourceDirectory>${project.basedir}/res</resourceDirectory>
+          <sdk>
+            <platform>19</platform>
+          </sdk>
+          <generateApk>false</generateApk>
+          <lint>
+            <skip>false</skip>
+          </lint>
+        </configuration>
+        <executions>
+          <execution>
+            <id>lint-check</id>
+            <phase>verify</phase>
+            <goals>
+              <goal>lint</goal>
+            </goals>
+          </execution>
+        </executions>
+        <extensions>true</extensions>
+      </plugin>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-jar-plugin</artifactId>
+        <version>2.4</version>
+        <executions>
+          <execution>
+            <goals>
+              <goal>test-jar</goal>
+            </goals>
+          </execution>
+        </executions>
+      </plugin>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-release-plugin</artifactId>
+        <version>2.5</version>
+      </plugin>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-source-plugin</artifactId>
+        <version>2.2.1</version>
+        <executions>
+          <execution>
+            <id>attach-sources</id>
+            <phase>verify</phase>
+            <goals>
+              <goal>jar-no-fork</goal>
+            </goals>
+          </execution>
+        </executions>
+      </plugin>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-checkstyle-plugin</artifactId>
+        <version>2.12.1</version>
+      </plugin>
+      <plugin>
+        <groupId>org.codehaus.mojo</groupId>
+        <artifactId>findbugs-maven-plugin</artifactId>
+        <version>2.5.4</version>
+      </plugin>
+    </plugins>
+  </build>
 
+  <reporting>
+    <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-javadoc-plugin</artifactId>
+        <version>2.9.1</version>
+        <configuration>
+          <reportOutputDirectory>docs</reportOutputDirectory>
+          <destDir>apidocs</destDir>
+          <notimestamp>true</notimestamp>
+        </configuration>
+      </plugin>
+    </plugins>
+  </reporting>
 </project>
diff --git a/roboguice/res/values/empty b/res/values/empty
similarity index 100%
rename from roboguice/res/values/empty
rename to res/values/empty
diff --git a/roboguice/.classpath b/roboguice/.classpath
deleted file mode 100644
index fd7ad7fbd..000000000
--- a/roboguice/.classpath
+++ /dev/null
@@ -1,26 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" output="target/classes" path="src/main/java">
-		<attributes>
-			<attribute name="optional" value="true"/>
-			<attribute name="maven.pomderived" value="true"/>
-		</attributes>
-	</classpathentry>
-	<classpathentry kind="src" output="target/test-classes" path="src/test/java">
-		<attributes>
-			<attribute name="optional" value="true"/>
-			<attribute name="maven.pomderived" value="true"/>
-		</attributes>
-	</classpathentry>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6">
-		<attributes>
-			<attribute name="maven.pomderived" value="true"/>
-		</attributes>
-	</classpathentry>
-	<classpathentry kind="con" path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER">
-		<attributes>
-			<attribute name="maven.pomderived" value="true"/>
-		</attributes>
-	</classpathentry>
-	<classpathentry kind="output" path="target/classes"/>
-</classpath>
diff --git a/roboguice/.project b/roboguice/.project
deleted file mode 100644
index e4bd6967d..000000000
--- a/roboguice/.project
+++ /dev/null
@@ -1,29 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>roboguice</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>net.sf.eclipsecs.core.CheckstyleBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.m2e.core.maven2Builder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-		<nature>org.eclipse.m2e.core.maven2Nature</nature>
-		<nature>net.sf.eclipsecs.core.CheckstyleNature</nature>
-	</natures>
-</projectDescription>
diff --git a/roboguice/.settings/org.eclipse.core.resources.prefs b/roboguice/.settings/org.eclipse.core.resources.prefs
deleted file mode 100644
index f9fe34593..000000000
--- a/roboguice/.settings/org.eclipse.core.resources.prefs
+++ /dev/null
@@ -1,4 +0,0 @@
-eclipse.preferences.version=1
-encoding//src/main/java=UTF-8
-encoding//src/test/java=UTF-8
-encoding/<project>=UTF-8
diff --git a/roboguice/.settings/org.eclipse.jdt.core.prefs b/roboguice/.settings/org.eclipse.jdt.core.prefs
deleted file mode 100644
index 57fa66865..000000000
--- a/roboguice/.settings/org.eclipse.jdt.core.prefs
+++ /dev/null
@@ -1,385 +0,0 @@
-eclipse.preferences.version=1
-org.eclipse.jdt.core.compiler.annotation.inheritNullAnnotations=disabled
-org.eclipse.jdt.core.compiler.annotation.missingNonNullByDefaultAnnotation=ignore
-org.eclipse.jdt.core.compiler.annotation.nonnull=org.eclipse.jdt.annotation.NonNull
-org.eclipse.jdt.core.compiler.annotation.nonnullbydefault=org.eclipse.jdt.annotation.NonNullByDefault
-org.eclipse.jdt.core.compiler.annotation.nullable=org.eclipse.jdt.annotation.Nullable
-org.eclipse.jdt.core.compiler.annotation.nullanalysis=disabled
-org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
-org.eclipse.jdt.core.compiler.codegen.methodParameters=do not generate
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
-org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
-org.eclipse.jdt.core.compiler.compliance=1.6
-org.eclipse.jdt.core.compiler.debug.lineNumber=generate
-org.eclipse.jdt.core.compiler.debug.localVariable=generate
-org.eclipse.jdt.core.compiler.debug.sourceFile=generate
-org.eclipse.jdt.core.compiler.problem.annotationSuperInterface=warning
-org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
-org.eclipse.jdt.core.compiler.problem.autoboxing=ignore
-org.eclipse.jdt.core.compiler.problem.comparingIdentical=warning
-org.eclipse.jdt.core.compiler.problem.deadCode=warning
-org.eclipse.jdt.core.compiler.problem.deprecation=warning
-org.eclipse.jdt.core.compiler.problem.deprecationInDeprecatedCode=disabled
-org.eclipse.jdt.core.compiler.problem.deprecationWhenOverridingDeprecatedMethod=disabled
-org.eclipse.jdt.core.compiler.problem.discouragedReference=warning
-org.eclipse.jdt.core.compiler.problem.emptyStatement=ignore
-org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
-org.eclipse.jdt.core.compiler.problem.explicitlyClosedAutoCloseable=ignore
-org.eclipse.jdt.core.compiler.problem.fallthroughCase=ignore
-org.eclipse.jdt.core.compiler.problem.fatalOptionalError=disabled
-org.eclipse.jdt.core.compiler.problem.fieldHiding=ignore
-org.eclipse.jdt.core.compiler.problem.finalParameterBound=warning
-org.eclipse.jdt.core.compiler.problem.finallyBlockNotCompletingNormally=warning
-org.eclipse.jdt.core.compiler.problem.forbiddenReference=warning
-org.eclipse.jdt.core.compiler.problem.hiddenCatchBlock=warning
-org.eclipse.jdt.core.compiler.problem.includeNullInfoFromAsserts=disabled
-org.eclipse.jdt.core.compiler.problem.incompatibleNonInheritedInterfaceMethod=warning
-org.eclipse.jdt.core.compiler.problem.incompleteEnumSwitch=warning
-org.eclipse.jdt.core.compiler.problem.indirectStaticAccess=ignore
-org.eclipse.jdt.core.compiler.problem.localVariableHiding=ignore
-org.eclipse.jdt.core.compiler.problem.methodWithConstructorName=warning
-org.eclipse.jdt.core.compiler.problem.missingDefaultCase=ignore
-org.eclipse.jdt.core.compiler.problem.missingDeprecatedAnnotation=ignore
-org.eclipse.jdt.core.compiler.problem.missingEnumCaseDespiteDefault=disabled
-org.eclipse.jdt.core.compiler.problem.missingHashCodeMethod=ignore
-org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation=ignore
-org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotationForInterfaceMethodImplementation=enabled
-org.eclipse.jdt.core.compiler.problem.missingSerialVersion=warning
-org.eclipse.jdt.core.compiler.problem.missingSynchronizedOnInheritedMethod=ignore
-org.eclipse.jdt.core.compiler.problem.noEffectAssignment=warning
-org.eclipse.jdt.core.compiler.problem.noImplicitStringConversion=warning
-org.eclipse.jdt.core.compiler.problem.nonExternalizedStringLiteral=ignore
-org.eclipse.jdt.core.compiler.problem.nonnullParameterAnnotationDropped=warning
-org.eclipse.jdt.core.compiler.problem.nullAnnotationInferenceConflict=error
-org.eclipse.jdt.core.compiler.problem.nullReference=warning
-org.eclipse.jdt.core.compiler.problem.nullSpecViolation=error
-org.eclipse.jdt.core.compiler.problem.nullUncheckedConversion=warning
-org.eclipse.jdt.core.compiler.problem.overridingPackageDefaultMethod=warning
-org.eclipse.jdt.core.compiler.problem.parameterAssignment=ignore
-org.eclipse.jdt.core.compiler.problem.possibleAccidentalBooleanAssignment=ignore
-org.eclipse.jdt.core.compiler.problem.potentialNullReference=ignore
-org.eclipse.jdt.core.compiler.problem.potentiallyUnclosedCloseable=ignore
-org.eclipse.jdt.core.compiler.problem.rawTypeReference=warning
-org.eclipse.jdt.core.compiler.problem.redundantNullAnnotation=warning
-org.eclipse.jdt.core.compiler.problem.redundantNullCheck=ignore
-org.eclipse.jdt.core.compiler.problem.redundantSpecificationOfTypeArguments=ignore
-org.eclipse.jdt.core.compiler.problem.redundantSuperinterface=ignore
-org.eclipse.jdt.core.compiler.problem.reportMethodCanBePotentiallyStatic=ignore
-org.eclipse.jdt.core.compiler.problem.reportMethodCanBeStatic=ignore
-org.eclipse.jdt.core.compiler.problem.specialParameterHidingField=disabled
-org.eclipse.jdt.core.compiler.problem.staticAccessReceiver=warning
-org.eclipse.jdt.core.compiler.problem.suppressOptionalErrors=enabled
-org.eclipse.jdt.core.compiler.problem.suppressWarnings=enabled
-org.eclipse.jdt.core.compiler.problem.syntacticNullAnalysisForFields=disabled
-org.eclipse.jdt.core.compiler.problem.syntheticAccessEmulation=ignore
-org.eclipse.jdt.core.compiler.problem.typeParameterHiding=warning
-org.eclipse.jdt.core.compiler.problem.unavoidableGenericTypeProblems=enabled
-org.eclipse.jdt.core.compiler.problem.uncheckedTypeOperation=warning
-org.eclipse.jdt.core.compiler.problem.unclosedCloseable=warning
-org.eclipse.jdt.core.compiler.problem.undocumentedEmptyBlock=ignore
-org.eclipse.jdt.core.compiler.problem.unhandledWarningToken=ignore
-org.eclipse.jdt.core.compiler.problem.unnecessaryElse=ignore
-org.eclipse.jdt.core.compiler.problem.unnecessaryTypeCheck=ignore
-org.eclipse.jdt.core.compiler.problem.unqualifiedFieldAccess=ignore
-org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownException=ignore
-org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionExemptExceptionAndThrowable=enabled
-org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionIncludeDocCommentReference=enabled
-org.eclipse.jdt.core.compiler.problem.unusedDeclaredThrownExceptionWhenOverriding=disabled
-org.eclipse.jdt.core.compiler.problem.unusedImport=warning
-org.eclipse.jdt.core.compiler.problem.unusedLabel=warning
-org.eclipse.jdt.core.compiler.problem.unusedLocal=warning
-org.eclipse.jdt.core.compiler.problem.unusedObjectAllocation=ignore
-org.eclipse.jdt.core.compiler.problem.unusedParameter=ignore
-org.eclipse.jdt.core.compiler.problem.unusedParameterIncludeDocCommentReference=enabled
-org.eclipse.jdt.core.compiler.problem.unusedParameterWhenImplementingAbstract=disabled
-org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete=disabled
-org.eclipse.jdt.core.compiler.problem.unusedPrivateMember=warning
-org.eclipse.jdt.core.compiler.problem.unusedTypeParameter=ignore
-org.eclipse.jdt.core.compiler.problem.unusedWarningToken=warning
-org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast=warning
-org.eclipse.jdt.core.compiler.source=1.6
-org.eclipse.jdt.core.formatter.align_type_members_on_columns=false
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression=16
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation=0
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant=16
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call=16
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation=16
-org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression=16
-org.eclipse.jdt.core.formatter.alignment_for_assignment=0
-org.eclipse.jdt.core.formatter.alignment_for_binary_expression=16
-org.eclipse.jdt.core.formatter.alignment_for_compact_if=16
-org.eclipse.jdt.core.formatter.alignment_for_conditional_expression=80
-org.eclipse.jdt.core.formatter.alignment_for_enum_constants=0
-org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer=16
-org.eclipse.jdt.core.formatter.alignment_for_method_declaration=0
-org.eclipse.jdt.core.formatter.alignment_for_multiple_fields=16
-org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_resources_in_try=80
-org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation=16
-org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration=16
-org.eclipse.jdt.core.formatter.alignment_for_union_type_in_multicatch=16
-org.eclipse.jdt.core.formatter.blank_lines_after_imports=1
-org.eclipse.jdt.core.formatter.blank_lines_after_package=1
-org.eclipse.jdt.core.formatter.blank_lines_before_field=0
-org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration=0
-org.eclipse.jdt.core.formatter.blank_lines_before_imports=1
-org.eclipse.jdt.core.formatter.blank_lines_before_member_type=1
-org.eclipse.jdt.core.formatter.blank_lines_before_method=1
-org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk=1
-org.eclipse.jdt.core.formatter.blank_lines_before_package=0
-org.eclipse.jdt.core.formatter.blank_lines_between_import_groups=1
-org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations=1
-org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_array_initializer=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_block=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_block_in_case=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_enum_constant=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_lambda_body=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_method_declaration=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_switch=end_of_line
-org.eclipse.jdt.core.formatter.brace_position_for_type_declaration=end_of_line
-org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment=false
-org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment=false
-org.eclipse.jdt.core.formatter.comment.format_block_comments=true
-org.eclipse.jdt.core.formatter.comment.format_header=false
-org.eclipse.jdt.core.formatter.comment.format_html=true
-org.eclipse.jdt.core.formatter.comment.format_javadoc_comments=true
-org.eclipse.jdt.core.formatter.comment.format_line_comments=true
-org.eclipse.jdt.core.formatter.comment.format_source_code=true
-org.eclipse.jdt.core.formatter.comment.indent_parameter_description=true
-org.eclipse.jdt.core.formatter.comment.indent_root_tags=true
-org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags=insert
-org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter=insert
-org.eclipse.jdt.core.formatter.comment.line_length=80
-org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries=true
-org.eclipse.jdt.core.formatter.comment.new_lines_at_javadoc_boundaries=true
-org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments=false
-org.eclipse.jdt.core.formatter.compact_else_if=true
-org.eclipse.jdt.core.formatter.continuation_indentation=2
-org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer=2
-org.eclipse.jdt.core.formatter.disabling_tag=@formatter\:off
-org.eclipse.jdt.core.formatter.enabling_tag=@formatter\:on
-org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line=false
-org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column=true
-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header=true
-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header=true
-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header=true
-org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header=true
-org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases=true
-org.eclipse.jdt.core.formatter.indent_empty_lines=false
-org.eclipse.jdt.core.formatter.indent_statements_compare_to_block=true
-org.eclipse.jdt.core.formatter.indent_statements_compare_to_body=true
-org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases=true
-org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch=true
-org.eclipse.jdt.core.formatter.indentation.size=4
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_field=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_member=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_type=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_label=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_type_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing=insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement=do not insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body=insert
-org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter=insert
-org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator=insert
-org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_binary_operator=insert
-org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters=insert
-org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block=insert
-org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast=insert
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert=insert
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case=insert
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional=insert
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for=insert
-org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments=insert
-org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters=insert
-org.eclipse.jdt.core.formatter.insert_space_after_ellipsis=insert
-org.eclipse.jdt.core.formatter.insert_space_after_lambda_arrow=insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer=insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_try=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional=insert
-org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard=do not insert
-org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for=insert
-org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_try_resources=insert
-org.eclipse.jdt.core.formatter.insert_space_after_unary_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter=insert
-org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator=insert
-org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_binary_operator=insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer=insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_try=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert=insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional=insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for=insert
-org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_ellipsis=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_lambda_arrow=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_try=insert
-org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while=insert
-org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return=insert
-org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw=insert
-org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional=insert
-org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_semicolon=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_try_resources=do not insert
-org.eclipse.jdt.core.formatter.insert_space_before_unary_operator=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration=do not insert
-org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation=do not insert
-org.eclipse.jdt.core.formatter.join_lines_in_comments=true
-org.eclipse.jdt.core.formatter.join_wrapped_lines=true
-org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line=false
-org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line=false
-org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line=false
-org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line=false
-org.eclipse.jdt.core.formatter.lineSplit=160
-org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column=false
-org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column=false
-org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body=0
-org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve=1
-org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line=true
-org.eclipse.jdt.core.formatter.tabulation.char=space
-org.eclipse.jdt.core.formatter.tabulation.size=4
-org.eclipse.jdt.core.formatter.use_on_off_tags=false
-org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations=false
-org.eclipse.jdt.core.formatter.wrap_before_binary_operator=true
-org.eclipse.jdt.core.formatter.wrap_before_or_operator_multicatch=true
-org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested=true
diff --git a/roboguice/.settings/org.eclipse.jdt.ui.prefs b/roboguice/.settings/org.eclipse.jdt.ui.prefs
deleted file mode 100644
index 13a4feec1..000000000
--- a/roboguice/.settings/org.eclipse.jdt.ui.prefs
+++ /dev/null
@@ -1,63 +0,0 @@
-cleanup.add_default_serial_version_id=true
-cleanup.add_generated_serial_version_id=false
-cleanup.add_missing_annotations=true
-cleanup.add_missing_deprecated_annotations=true
-cleanup.add_missing_methods=false
-cleanup.add_missing_nls_tags=false
-cleanup.add_missing_override_annotations=true
-cleanup.add_missing_override_annotations_interface_methods=true
-cleanup.add_serial_version_id=false
-cleanup.always_use_blocks=true
-cleanup.always_use_parentheses_in_expressions=false
-cleanup.always_use_this_for_non_static_field_access=false
-cleanup.always_use_this_for_non_static_method_access=false
-cleanup.convert_functional_interfaces=false
-cleanup.convert_to_enhanced_for_loop=false
-cleanup.correct_indentation=false
-cleanup.format_source_code=false
-cleanup.format_source_code_changes_only=false
-cleanup.make_local_variable_final=true
-cleanup.make_parameters_final=false
-cleanup.make_private_fields_final=true
-cleanup.make_type_abstract_if_missing_method=false
-cleanup.make_variable_declarations_final=false
-cleanup.never_use_blocks=false
-cleanup.never_use_parentheses_in_expressions=true
-cleanup.organize_imports=true
-cleanup.qualify_static_field_accesses_with_declaring_class=false
-cleanup.qualify_static_member_accesses_through_instances_with_declaring_class=true
-cleanup.qualify_static_member_accesses_through_subtypes_with_declaring_class=true
-cleanup.qualify_static_member_accesses_with_declaring_class=true
-cleanup.qualify_static_method_accesses_with_declaring_class=false
-cleanup.remove_private_constructors=true
-cleanup.remove_trailing_whitespaces=false
-cleanup.remove_trailing_whitespaces_all=true
-cleanup.remove_trailing_whitespaces_ignore_empty=false
-cleanup.remove_unnecessary_casts=true
-cleanup.remove_unnecessary_nls_tags=true
-cleanup.remove_unused_imports=true
-cleanup.remove_unused_local_variables=false
-cleanup.remove_unused_private_fields=true
-cleanup.remove_unused_private_members=false
-cleanup.remove_unused_private_methods=true
-cleanup.remove_unused_private_types=true
-cleanup.sort_members=false
-cleanup.sort_members_all=false
-cleanup.use_anonymous_class_creation=false
-cleanup.use_blocks=true
-cleanup.use_blocks_only_for_return_and_throw=false
-cleanup.use_lambda=true
-cleanup.use_parentheses_in_expressions=false
-cleanup.use_this_for_non_static_field_access=false
-cleanup.use_this_for_non_static_field_access_only_if_necessary=true
-cleanup.use_this_for_non_static_method_access=false
-cleanup.use_this_for_non_static_method_access_only_if_necessary=true
-cleanup_profile=_eclipse-cs roboguice
-cleanup_settings_version=2
-eclipse.preferences.version=1
-formatter_profile=_eclipse-cs roboguice
-formatter_settings_version=12
-org.eclipse.jdt.ui.ignorelowercasenames=true
-org.eclipse.jdt.ui.importorder=java;javax;org;com;com.google;android;
-org.eclipse.jdt.ui.ondemandthreshold=99
-org.eclipse.jdt.ui.staticondemandthreshold=99
diff --git a/roboguice/.settings/org.eclipse.m2e.core.prefs b/roboguice/.settings/org.eclipse.m2e.core.prefs
deleted file mode 100644
index f897a7f1c..000000000
--- a/roboguice/.settings/org.eclipse.m2e.core.prefs
+++ /dev/null
@@ -1,4 +0,0 @@
-activeProfiles=
-eclipse.preferences.version=1
-resolveWorkspaceProjects=true
-version=1
diff --git a/roboguice/pom.xml b/roboguice/pom.xml
deleted file mode 100644
index 229d12f0b..000000000
--- a/roboguice/pom.xml
+++ /dev/null
@@ -1,203 +0,0 @@
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-	<modelVersion>4.0.0</modelVersion>
-	<artifactId>roboguice</artifactId>
-	<name>RoboGuice</name>
-	<description>A framework for using Google Guice dependency injection in Android.</description>
-
-	<parent>
-		<groupId>org.roboguice</groupId>
-		<artifactId>roboguice-aggregator</artifactId>
-		<version>3.0-alpha-3-SNAPSHOT</version>
-	</parent>
-
-	<dependencies>
-		<!-- TEST DEPENDENCIES -->
-		<!-- http://stackoverflow.com/a/18463743/693752 -->
-
-		<dependency>
-			<groupId>junit</groupId>
-			<artifactId>junit</artifactId>
-			<scope>test</scope>
-		</dependency>
-
-		<!-- DEPENDENCIES -->
-		<dependency>
-			<groupId>com.google.android</groupId>
-			<artifactId>android</artifactId>
-			<scope>provided</scope>
-		</dependency>
-		<dependency>
-			<groupId>com.google.android.maps</groupId>
-			<artifactId>maps</artifactId>
-			<scope>provided</scope>
-			<optional>true</optional>
-		</dependency>
-		<dependency>
-			<groupId>android.support</groupId>
-			<artifactId>compatibility-v4</artifactId>
-			<optional>true</optional>
-		</dependency>
-		<dependency>
-			<groupId>android.support</groupId>
-			<artifactId>compatibility-v7-appcompat</artifactId>
-			<optional>true</optional>
-		</dependency>
-		<dependency>
-			<groupId>com.actionbarsherlock</groupId>
-			<artifactId>actionbarsherlock</artifactId>
-			<type>jar</type>
-			<scope>provided</scope>
-			<optional>true</optional>
-		</dependency>
-		<dependency>
-			<groupId>com.google.code.findbugs</groupId>
-			<artifactId>jsr305</artifactId>
-			<scope>test</scope>
-		</dependency>
-		<dependency>
-			<groupId>com.google.inject</groupId>
-			<artifactId>guice</artifactId>
-			<classifier>no_aop</classifier>
-		</dependency>
-		<dependency>
-			<groupId>findbugs</groupId>
-			<artifactId>annotations</artifactId>
-			<type>jar</type>
-		</dependency>
-
-		<!-- TEST DEPENDENCIES -->
-		<dependency>
-			<groupId>org.robolectric</groupId>
-			<artifactId>robolectric</artifactId>
-			<scope>test</scope>
-		</dependency>
-		<dependency>
-			<groupId>org.easymock</groupId>
-			<artifactId>easymock</artifactId>
-			<scope>test</scope>
-		</dependency>
-		<dependency>
-			<groupId>org.mockito</groupId>
-			<artifactId>mockito-core</artifactId>
-			<scope>test</scope>
-		</dependency>
-		<dependency>
-			<groupId>com.google.dexmaker</groupId>
-			<artifactId>dexmaker</artifactId>
-			<scope>test</scope>
-		</dependency>
-	</dependencies>
-
-	<build>
-		<defaultGoal>package</defaultGoal>
-		<plugins>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-compiler-plugin</artifactId>
-				<version>${maven-compiler-plugin.version}</version>
-				<configuration>
-					<source>${java.version}</source>
-					<target>${java.version}</target>
-				</configuration>
-			</plugin>
-			<plugin>
-				<groupId>com.jayway.maven.plugins.android.generation2</groupId>
-				<artifactId>android-maven-plugin</artifactId>
-				<version>${android-maven-plugin.version}</version>
-				<configuration>
-					<androidManifestFile>${project.basedir}/AndroidManifest.xml</androidManifestFile>
-					<resourceDirectory>${project.basedir}/res</resourceDirectory>
-					<sdk>
-						<platform>${android-build.version}</platform>
-					</sdk>
-					<generateApk>false</generateApk>
-					<lint>
-						<skip>false</skip>
-					</lint>
-				</configuration>
-				<executions>
-					<execution>
-						<id>lint-check</id>
-						<phase>verify</phase>
-						<goals>
-							<goal>lint</goal>
-						</goals>
-					</execution>
-				</executions>
-				<extensions>true</extensions>
-			</plugin>
-
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-jar-plugin</artifactId>
-				<version>${maven-jar-plugin.version}</version>
-				<executions>
-					<execution>
-						<goals>
-							<goal>test-jar</goal>
-						</goals>
-					</execution>
-				</executions>
-			</plugin>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-release-plugin</artifactId>
-			</plugin>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-source-plugin</artifactId>
-				<version>${maven-source-plugin.version}</version>
-				<executions>
-					<execution>
-						<id>attach-sources</id>
-						<phase>verify</phase>
-						<goals>
-							<goal>jar-no-fork</goal>
-						</goals>
-					</execution>
-				</executions>
-			</plugin>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-checkstyle-plugin</artifactId>
-			</plugin>
-			<plugin>
-				<groupId>org.codehaus.mojo</groupId>
-				<artifactId>findbugs-maven-plugin</artifactId>
-			</plugin>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-pmd-plugin</artifactId>
-			</plugin>
-			<!-- http://intellectualcramps.wordpress.com/2013/08/18/code-coverage-of-robolectric-tests-using-jacoco/ -->
-			<plugin>
-				<groupId>org.jacoco</groupId>
-				<artifactId>jacoco-maven-plugin</artifactId>
-			</plugin>
-		</plugins>
-	</build>
-
-	<reporting>
-		<plugins>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-javadoc-plugin</artifactId>
-				<version>${maven-javadoc-plugin.version}</version>
-				<configuration>
-					<reportOutputDirectory>docs</reportOutputDirectory>
-					<destDir>apidocs</destDir>
-					<notimestamp>true</notimestamp>
-				</configuration>
-			</plugin>
-		</plugins>
-	</reporting>
-
-	<repositories>
-		<repository>
-			<id>third.party.closed.source.repo</id>
-			<url>file://${basedir}/../maven_repo_3rd_party</url>
-		</repository>
-	</repositories>
-
-</project>
diff --git a/roboguice/src/main/java/roboguice/RoboGuice.java b/roboguice/src/main/java/roboguice/RoboGuice.java
deleted file mode 100644
index 692c495a3..000000000
--- a/roboguice/src/main/java/roboguice/RoboGuice.java
+++ /dev/null
@@ -1,203 +0,0 @@
-package roboguice;
-
-import java.util.ArrayList;
-import java.util.WeakHashMap;
-
-import roboguice.config.DefaultRoboModule;
-import roboguice.event.EventManager;
-import roboguice.inject.ContextScope;
-import roboguice.inject.ContextScopedRoboInjector;
-import roboguice.inject.ResourceListener;
-import roboguice.inject.RoboInjector;
-import roboguice.inject.ViewListener;
-import roboguice.util.Strings;
-
-import com.google.inject.Guice;
-import com.google.inject.Injector;
-import com.google.inject.Module;
-import com.google.inject.Stage;
-
-import android.app.Application;
-import android.content.Context;
-import android.content.pm.ApplicationInfo;
-import android.content.pm.PackageManager;
-import android.os.Bundle;
-
-/**
- *
- * Manages injectors for RoboGuice applications.
- *
- * There are two types of injectors:
- *
- * 1. The base application injector, which is not typically used directly by the user.
- * 2. The ContextScopedInjector, which is obtained by calling {@link #getInjector(android.content.Context)}, and knows about
- *    your current context, whether it's an activity, service, or something else.
- * 
- * BUG hashmap should also key off of stage and modules list
- */
-public final class RoboGuice {
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings("MS_SHOULD_BE_FINAL")
-    @SuppressWarnings({"checkstyle:visibilitymodifier","checkstyle:staticvariablename"})
-    public static Stage DEFAULT_STAGE = Stage.PRODUCTION;
-
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="MS_SHOULD_BE_FINAL")
-    protected static WeakHashMap<Application,Injector> injectors = new WeakHashMap<Application,Injector>();
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="MS_SHOULD_BE_FINAL")
-    protected static WeakHashMap<Application,ResourceListener> resourceListeners = new WeakHashMap<Application, ResourceListener>();
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="MS_SHOULD_BE_FINAL")
-    protected static WeakHashMap<Application,ViewListener> viewListeners = new WeakHashMap<Application, ViewListener>();
-
-    private RoboGuice() {
-    }
-
-    /**
-     * Return the cached Injector instance for this application, or create a new one if necessary.
-     */
-    public static Injector getBaseApplicationInjector(Application application) {
-        Injector rtrn = injectors.get(application);
-        if( rtrn!=null )
-            return rtrn;
-
-        synchronized (RoboGuice.class) {
-            rtrn = injectors.get(application);
-            if( rtrn!=null )
-                return rtrn;
-            
-            return setBaseApplicationInjector(application, DEFAULT_STAGE);
-        }
-    }
-
-    /**
-     * Return the cached Injector instance for this application, or create a new one if necessary.
-     * If specifying your own modules, you must include a DefaultRoboModule for most things to work properly.
-     * Do something like the following:
-     *
-     * RoboGuice.setApplicationInjector( app, RoboGuice.DEFAULT_STAGE, Modules.override(RoboGuice.newDefaultRoboModule(app)).with(new MyModule() );
-     *
-     * @see com.google.inject.util.Modules#override(com.google.inject.Module...)
-     * @see roboguice.RoboGuice#setBaseApplicationInjector(android.app.Application, com.google.inject.Stage, com.google.inject.Module...)
-     * @see roboguice.RoboGuice#newDefaultRoboModule(android.app.Application)
-     * @see roboguice.RoboGuice#DEFAULT_STAGE
-     *
-     * If using this method with test cases, be sure to call {@link roboguice.RoboGuice.Util#reset()} in your test teardown methods
-     * to avoid polluting our other tests with your custom injector.  Don't do this in your real application though.
-     *
-     */
-    public static Injector setBaseApplicationInjector(final Application application, Stage stage, Module... modules) {
-        synchronized (RoboGuice.class) {
-            final Injector rtrn = Guice.createInjector(stage, modules);
-            injectors.put(application,rtrn);
-            return rtrn;
-        }
-    }
-
-    /**
-     * Return the cached Injector instance for this application, or create a new one if necessary.
-     */
-    public static Injector setBaseApplicationInjector(Application application, Stage stage) {
-
-        synchronized (RoboGuice.class) {
-
-            final ArrayList<Module> modules = new ArrayList<Module>();
-
-            try {
-                final ApplicationInfo ai = application.getPackageManager().getApplicationInfo(application.getPackageName(), PackageManager.GET_META_DATA);
-                final Bundle bundle = ai.metaData;
-                final String roboguiceModules = bundle!=null ? bundle.getString("roboguice.modules") : null;
-                final DefaultRoboModule defaultRoboModule = newDefaultRoboModule(application);
-                final String[] moduleNames = roboguiceModules!=null ? roboguiceModules.split("[\\s,]") : new String[]{};
-
-                modules.add(defaultRoboModule);
-
-                for (String name : moduleNames) {
-                    if( Strings.notEmpty(name)) {
-                        final Class<? extends Module> clazz = Class.forName(name).asSubclass(Module.class);
-                        try {
-                            modules.add(clazz.getDeclaredConstructor(Context.class).newInstance(application));
-                        } catch( NoSuchMethodException ignored ) {
-                            modules.add( clazz.newInstance() );
-                        }
-                    }
-                }
-
-            } catch (Exception e) {
-                throw new RuntimeException("Unable to instantiate your Module.  Check your roboguice.modules metadata in your AndroidManifest.xml",e);
-            }
-
-            final Injector rtrn = setBaseApplicationInjector(application, stage, modules.toArray(new Module[modules.size()]));
-            injectors.put(application,rtrn);
-            return rtrn;
-        }
-
-    }
-
-
-    public static RoboInjector getInjector(Context context) {
-        final Application application = (Application)context.getApplicationContext();
-        return new ContextScopedRoboInjector(context, getBaseApplicationInjector(application));
-    }
-
-    /**
-     * A shortcut for RoboGuice.getInjector(context).injectMembers(o);
-     */
-    public static <T> T injectMembers( Context context, T t ) {
-        getInjector(context).injectMembers(t);
-        return t;
-    }
-
-
-    public static DefaultRoboModule newDefaultRoboModule(final Application application) {
-        return new DefaultRoboModule(application, new ContextScope(application), getViewListener(application), getResourceListener(application));
-    }
-
-    @SuppressWarnings("ConstantConditions")
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="NP_LOAD_OF_KNOWN_NULL_VALUE", justification="Double check lock")
-    protected static ResourceListener getResourceListener( Application application ) {
-        ResourceListener resourceListener = resourceListeners.get(application);
-        if( resourceListener==null ) {
-            synchronized (RoboGuice.class) {
-                if( resourceListener==null ) {
-                    resourceListener = new ResourceListener(application);
-                    resourceListeners.put(application,resourceListener);
-                }
-            }
-        }
-        return resourceListener;
-    }
-
-    @SuppressWarnings("ConstantConditions")
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="NP_LOAD_OF_KNOWN_NULL_VALUE", justification="Double check lock")
-    protected static ViewListener getViewListener( final Application application ) {
-        ViewListener viewListener = viewListeners.get(application);
-        if( viewListener==null ) {
-            synchronized (RoboGuice.class) {
-                if( viewListener==null ) {
-                    viewListener = new ViewListener();
-                    viewListeners.put(application,viewListener);
-                }
-            }
-        }
-        return viewListener;
-    }
-
-    public static void destroyInjector(Context context) {
-        final RoboInjector injector = getInjector(context);
-        injector.getInstance(EventManager.class).destroy();
-        //noinspection SuspiciousMethodCalls
-        injectors.remove(context); // it's okay, Context is an Application
-    }
-
-    public static final class Util {
-        private Util() {}
-
-        /**
-         * This method is provided to reset RoboGuice in testcases.
-         * It should not be called in a real application.
-         */
-        public static void reset() {
-            injectors.clear();
-            resourceListeners.clear();
-            viewListeners.clear();
-        }
-    }
-}
diff --git a/roboguice/src/main/java/roboguice/activity/RoboActionBarActivity.java b/roboguice/src/main/java/roboguice/activity/RoboActionBarActivity.java
deleted file mode 100644
index 62c620dbc..000000000
--- a/roboguice/src/main/java/roboguice/activity/RoboActionBarActivity.java
+++ /dev/null
@@ -1,192 +0,0 @@
-/*
- * Copyright 2009 Michael Burton
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions
- * and limitations under the License.
- */
-package roboguice.activity;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import roboguice.RoboGuice;
-import roboguice.activity.event.OnActivityResultEvent;
-import roboguice.activity.event.OnContentChangedEvent;
-import roboguice.activity.event.OnNewIntentEvent;
-import roboguice.activity.event.OnPauseEvent;
-import roboguice.activity.event.OnRestartEvent;
-import roboguice.activity.event.OnResumeEvent;
-import roboguice.activity.event.OnSaveInstanceStateEvent;
-import roboguice.activity.event.OnStopEvent;
-import roboguice.context.event.OnConfigurationChangedEvent;
-import roboguice.context.event.OnCreateEvent;
-import roboguice.context.event.OnDestroyEvent;
-import roboguice.context.event.OnStartEvent;
-import roboguice.event.EventManager;
-import roboguice.inject.ContentViewListener;
-import roboguice.inject.RoboInjector;
-import roboguice.util.RoboContext;
-
-import com.google.inject.Inject;
-import com.google.inject.Key;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.res.Configuration;
-import android.os.Bundle;
-import android.support.v7.app.ActionBarActivity;
-import android.util.AttributeSet;
-import android.view.View;
-
-/**
- * A {@link RoboActivity} extends from {@link Activity} to provide dynamic
- * injection of collaborators, using Google Guice.<br />
- * <br />
- * Your own activities that usually extend from {@link Activity} should now
- * extend from {@link RoboActivity}.<br />
- * <br />
- * If your activities extend from subclasses of {@link Activity} provided by the
- * Android SDK, we provided Guice versions as well for the most used : see
- * {@link RoboExpandableListActivity}, {@link RoboListActivity}, and other
- * classes located in package <strong>roboguice.activity</strong>.<br />
- * <br />
- * If we didn't provide what you need, you have two options : either post an
- * issue on <a href="http://code.google.com/p/roboguice/issues/list">the bug
- * tracker</a>, or implement it yourself. Have a look at the source code of this
- * class ({@link RoboActivity}), you won't have to write that much changes. And
- * of course, you are welcome to contribute and send your implementations to the
- * RoboGuice project.<br />
- * <br />
- * Please be aware that collaborators are not injected into this until you call
- * {@link #setContentView(int)} (calling any of the overloads of this methods
- * will work).<br />
- * <br />
- *
- * @author Mike Burton
- */
-public class RoboActionBarActivity extends ActionBarActivity implements RoboContext {
-    protected EventManager eventManager;
-    protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
-
-    @Inject ContentViewListener ignored; // BUG find a better place to put this
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
-        eventManager = injector.getInstance(EventManager.class);
-        injector.injectMembersWithoutViews(this);
-        super.onCreate(savedInstanceState);
-        eventManager.fire(new OnCreateEvent<Activity>(this,savedInstanceState));
-    }
-
-    @Override
-    protected void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-        eventManager.fire(new OnSaveInstanceStateEvent(this, outState));
-    }
-
-    @Override
-    protected void onRestart() {
-        super.onRestart();
-        eventManager.fire(new OnRestartEvent(this));
-    }
-
-    @Override
-    protected void onStart() {
-        super.onStart();
-        eventManager.fire(new OnStartEvent<Activity>(this));
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        eventManager.fire(new OnResumeEvent(this));
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-        eventManager.fire(new OnPauseEvent(this));
-    }
-
-    @Override
-    protected void onNewIntent( Intent intent ) {
-        super.onNewIntent(intent);
-        eventManager.fire(new OnNewIntentEvent(this));
-    }
-
-    @Override
-    protected void onStop() {
-        try {
-            eventManager.fire(new OnStopEvent(this));
-        } finally {
-            super.onStop();
-        }
-    }
-
-    @Override
-    protected void onDestroy() {
-        try {
-            eventManager.fire(new OnDestroyEvent<Activity>(this));
-        } finally {
-            try {
-                RoboGuice.destroyInjector(this);
-            } finally {
-                super.onDestroy();
-            }
-        }
-    }
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        final Configuration currentConfig = getResources().getConfiguration();
-        super.onConfigurationChanged(newConfig);
-        eventManager.fire(new OnConfigurationChangedEvent<Activity>(this,currentConfig, newConfig));
-    }
-
-    @Override
-    public void onSupportContentChanged() {
-        super.onSupportContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
-        eventManager.fire(new OnContentChangedEvent(this));
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        eventManager.fire(new OnActivityResultEvent(this, requestCode, resultCode, data));
-    }
-
-    @Override
-    public Map<Key<?>, Object> getScopedObjectMap() {
-        return scopedObjects;
-    }
-
-    @Override
-    public View onCreateView(String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(name, context, attrs);
-    }
-
-    @Override
-    public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(parent, name, context, attrs);
-    }
-
-
-}
diff --git a/roboguice/src/main/java/roboguice/activity/RoboActivityGroup.java b/roboguice/src/main/java/roboguice/activity/RoboActivityGroup.java
deleted file mode 100644
index b04c23d63..000000000
--- a/roboguice/src/main/java/roboguice/activity/RoboActivityGroup.java
+++ /dev/null
@@ -1,190 +0,0 @@
-/*
- * Copyright 2009 Michael Burton
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions
- * and limitations under the License.
- */
-package roboguice.activity;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import roboguice.RoboGuice;
-import roboguice.activity.event.OnActivityResultEvent;
-import roboguice.activity.event.OnContentChangedEvent;
-import roboguice.activity.event.OnNewIntentEvent;
-import roboguice.activity.event.OnPauseEvent;
-import roboguice.activity.event.OnRestartEvent;
-import roboguice.activity.event.OnResumeEvent;
-import roboguice.activity.event.OnSaveInstanceStateEvent;
-import roboguice.activity.event.OnStopEvent;
-import roboguice.context.event.OnConfigurationChangedEvent;
-import roboguice.context.event.OnCreateEvent;
-import roboguice.context.event.OnDestroyEvent;
-import roboguice.context.event.OnStartEvent;
-import roboguice.event.EventManager;
-import roboguice.inject.ContentViewListener;
-import roboguice.inject.RoboInjector;
-import roboguice.util.RoboContext;
-
-import com.google.inject.Inject;
-import com.google.inject.Key;
-
-import android.annotation.TargetApi;
-import android.app.Activity;
-import android.app.ActivityGroup;
-import android.content.Context;
-import android.content.Intent;
-import android.content.res.Configuration;
-import android.os.Build;
-import android.os.Bundle;
-import android.util.AttributeSet;
-import android.view.View;
-
-/**
- * A {@link RoboActivityGroup} extends from {@link ActivityGroup} to provide
- * dynamic injection of collaborators, using Google Guice.<br />
- *
- * @see RoboActivity
- *
- * @author Toly Pochkin
- */
-@Deprecated
-public class RoboActivityGroup extends ActivityGroup implements RoboContext {
-    protected EventManager eventManager;
-    protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
-
-
-    @Inject ContentViewListener ignored; // BUG find a better place to put this
-
-    @Override
-    @Deprecated
-    protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
-        eventManager = injector.getInstance(EventManager.class);
-        injector.injectMembersWithoutViews(this);
-        super.onCreate(savedInstanceState);
-        eventManager.fire(new OnCreateEvent<Activity>(this,savedInstanceState));
-    }
-
-    @Override
-    protected void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-        eventManager.fire(new OnSaveInstanceStateEvent(this, outState));
-    }
-
-    @Override
-    @Deprecated
-    protected void onRestart() {
-        super.onRestart();
-        eventManager.fire(new OnRestartEvent(this));
-    }
-
-    @Override
-    @Deprecated
-    protected void onStart() {
-        super.onStart();
-        eventManager.fire(new OnStartEvent<Activity>(this));
-    }
-
-    @Override
-    @Deprecated
-    protected void onResume() {
-        super.onResume();
-        eventManager.fire(new OnResumeEvent(this));
-    }
-
-    @Override
-    @Deprecated
-    protected void onPause() {
-        super.onPause();
-        eventManager.fire(new OnPauseEvent(this));
-    }
-
-    @Override
-    @Deprecated
-    protected void onNewIntent( Intent intent ) {
-        super.onNewIntent(intent);
-        eventManager.fire(new OnNewIntentEvent(this));
-    }
-
-    @Override
-    @Deprecated
-    protected void onStop() {
-        try {
-            eventManager.fire(new OnStopEvent(this));
-        } finally {
-            super.onStop();
-        }
-    }
-
-    @Override
-    @Deprecated
-    protected void onDestroy() {
-        try {
-            eventManager.fire(new OnDestroyEvent<Activity>(this));
-        } finally {
-            try {
-                RoboGuice.destroyInjector(this);
-            } finally {
-                super.onDestroy();
-            }
-        }
-    }
-
-    @Override
-    @Deprecated
-    public void onConfigurationChanged(Configuration newConfig) {
-        final Configuration currentConfig = getResources().getConfiguration();
-        super.onConfigurationChanged(newConfig);
-        eventManager.fire(new OnConfigurationChangedEvent<Activity>(this,currentConfig, newConfig));
-    }
-
-    @Override
-    @Deprecated
-    public void onContentChanged() {
-        super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
-        eventManager.fire(new OnContentChangedEvent(this));
-    }
-
-    @Override
-    @Deprecated
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        eventManager.fire(new OnActivityResultEvent(this, requestCode, resultCode, data));
-    }
-
-    @Override
-    public Map<Key<?>, Object> getScopedObjectMap() {
-        return scopedObjects;
-    }
-
-    @Override
-    public View onCreateView(String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(name, context, attrs);
-    }
-
-    @Override
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
-    public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(parent, name, context, attrs);
-    }
-
-
-}
diff --git a/roboguice/src/main/java/roboguice/activity/RoboSherlockAccountAuthenticatorActivity.java b/roboguice/src/main/java/roboguice/activity/RoboSherlockAccountAuthenticatorActivity.java
deleted file mode 100644
index e6acaec79..000000000
--- a/roboguice/src/main/java/roboguice/activity/RoboSherlockAccountAuthenticatorActivity.java
+++ /dev/null
@@ -1,167 +0,0 @@
-/*
- * Copyright 2009 Michael Burton
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions
- * and limitations under the License.
- */
-// derived from RoboActivity.java
-
-package roboguice.activity;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import roboguice.RoboGuice;
-import roboguice.activity.event.OnActivityResultEvent;
-import roboguice.activity.event.OnContentChangedEvent;
-import roboguice.activity.event.OnNewIntentEvent;
-import roboguice.activity.event.OnPauseEvent;
-import roboguice.activity.event.OnRestartEvent;
-import roboguice.activity.event.OnResumeEvent;
-import roboguice.activity.event.OnStopEvent;
-import roboguice.context.event.OnConfigurationChangedEvent;
-import roboguice.context.event.OnCreateEvent;
-import roboguice.context.event.OnDestroyEvent;
-import roboguice.context.event.OnStartEvent;
-import roboguice.event.EventManager;
-import roboguice.inject.ContentViewListener;
-import roboguice.inject.RoboInjector;
-import roboguice.util.RoboContext;
-
-import com.google.inject.Inject;
-import com.google.inject.Key;
-
-import android.accounts.AccountAuthenticatorActivity;
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.res.Configuration;
-import android.os.Bundle;
-import android.util.AttributeSet;
-import android.view.View;
-
-/**
- * A subclass of {@link AccountAuthenticatorActivity} that provides dependency injection
- * with RoboGuice.
- *
- * @author Marcus Better
- */
-public class RoboSherlockAccountAuthenticatorActivity extends SherlockAccountAuthenticatorActivity implements RoboContext {
-    protected EventManager eventManager;
-    protected HashMap<Key<?>, Object> scopedObjects = new HashMap<Key<?>, Object>();
-
-    @Inject ContentViewListener ignored; // BUG find a better place to put this
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
-        eventManager = injector.getInstance(EventManager.class);
-        injector.injectMembersWithoutViews(this);
-        super.onCreate(savedInstanceState);
-        eventManager.fire(new OnCreateEvent<Activity>(this,savedInstanceState));
-    }
-
-    @Override
-    protected void onRestart() {
-        super.onRestart();
-        eventManager.fire(new OnRestartEvent(this));
-    }
-
-    @Override
-    protected void onStart() {
-        super.onStart();
-        eventManager.fire(new OnStartEvent<Activity>(this));
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        eventManager.fire(new OnResumeEvent(this));
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-        eventManager.fire(new OnPauseEvent(this));
-    }
-
-    @Override
-    protected void onNewIntent( Intent intent ) {
-        super.onNewIntent(intent);
-        eventManager.fire(new OnNewIntentEvent(this));
-    }
-
-    @Override
-    protected void onStop() {
-        try {
-            eventManager.fire(new OnStopEvent(this));
-        } finally {
-            super.onStop();
-        }
-    }
-
-    @Override
-    protected void onDestroy() {
-        try {
-            eventManager.fire(new OnDestroyEvent<Activity>(this));
-        } finally {
-            try {
-                RoboGuice.destroyInjector(this);
-            } finally {
-                super.onDestroy();
-            }
-        }
-    }
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        final Configuration currentConfig = getResources().getConfiguration();
-        super.onConfigurationChanged(newConfig);
-        eventManager.fire(new OnConfigurationChangedEvent<Activity>(this, currentConfig, newConfig));
-    }
-
-    @Override
-    public void onContentChanged() {
-        super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
-        eventManager.fire(new OnContentChangedEvent(this));
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        eventManager.fire(new OnActivityResultEvent(this, requestCode, resultCode, data));
-    }
-
-    @Override
-    public Map<Key<?>, Object> getScopedObjectMap() {
-        return scopedObjects;
-    }
-
-    @Override
-    public View onCreateView(String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(name, context, attrs);
-    }
-
-    @Override
-    public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(parent, name, context, attrs);
-    }
-
-
-}
diff --git a/roboguice/src/main/java/roboguice/activity/RoboSherlockActivity.java b/roboguice/src/main/java/roboguice/activity/RoboSherlockActivity.java
deleted file mode 100644
index 3573f6549..000000000
--- a/roboguice/src/main/java/roboguice/activity/RoboSherlockActivity.java
+++ /dev/null
@@ -1,164 +0,0 @@
-/*
- * Copyright 2012 Jake Wharton
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions
- * and limitations under the License.
- */
-package roboguice.activity;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import roboguice.RoboGuice;
-import roboguice.activity.event.OnActivityResultEvent;
-import roboguice.activity.event.OnContentChangedEvent;
-import roboguice.activity.event.OnNewIntentEvent;
-import roboguice.activity.event.OnPauseEvent;
-import roboguice.activity.event.OnRestartEvent;
-import roboguice.activity.event.OnResumeEvent;
-import roboguice.activity.event.OnStopEvent;
-import roboguice.context.event.OnConfigurationChangedEvent;
-import roboguice.context.event.OnCreateEvent;
-import roboguice.context.event.OnDestroyEvent;
-import roboguice.context.event.OnStartEvent;
-import roboguice.event.EventManager;
-import roboguice.inject.ContentViewListener;
-import roboguice.inject.RoboInjector;
-import roboguice.util.RoboContext;
-
-import com.actionbarsherlock.app.SherlockActivity;
-
-import com.google.inject.Inject;
-import com.google.inject.Key;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.res.Configuration;
-import android.os.Bundle;
-import android.util.AttributeSet;
-import android.view.View;
-
-/**
- * @author Roberto Tyley
- */
-public class RoboSherlockActivity extends SherlockActivity implements RoboContext {
-    protected EventManager eventManager;
-    protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>,Object>();
-
-    @Inject
-    ContentViewListener ignored; // BUG find a better place to put this
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
-        eventManager = injector.getInstance(EventManager.class);
-        injector.injectMembersWithoutViews(this);
-        super.onCreate(savedInstanceState);
-        eventManager.fire(new OnCreateEvent<Activity>(this,savedInstanceState));
-    }
-
-    @Override
-    protected void onRestart() {
-        super.onRestart();
-        eventManager.fire(new OnRestartEvent(this));
-    }
-
-    @Override
-    protected void onStart() {
-        super.onStart();
-        eventManager.fire(new OnStartEvent<Activity>(this));
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        eventManager.fire(new OnResumeEvent(this));
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-        eventManager.fire(new OnPauseEvent(this));
-    }
-
-    @Override
-    protected void onNewIntent( Intent intent ) {
-        super.onNewIntent(intent);
-        eventManager.fire(new OnNewIntentEvent(this));
-    }
-
-    @Override
-    protected void onStop() {
-        try {
-            eventManager.fire(new OnStopEvent(this));
-        } finally {
-            super.onStop();
-        }
-    }
-
-    @Override
-    protected void onDestroy() {
-        try {
-            eventManager.fire(new OnDestroyEvent<Activity>(this));
-        } finally {
-            try {
-                RoboGuice.destroyInjector(this);
-            } finally {
-                super.onDestroy();
-            }
-        }
-    }
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        final Configuration currentConfig = getResources().getConfiguration();
-        super.onConfigurationChanged(newConfig);
-        eventManager.fire(new OnConfigurationChangedEvent<Activity>(this,currentConfig, newConfig));
-    }
-
-    @Override
-    public void onContentChanged() {
-        super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
-        eventManager.fire(new OnContentChangedEvent(this));
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        eventManager.fire(new OnActivityResultEvent(this, requestCode, resultCode, data));
-    }
-
-    @Override
-    public Map<Key<?>, Object> getScopedObjectMap() {
-        return scopedObjects;
-    }
-
-    @Override
-    public View onCreateView(String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(name, context, attrs);
-    }
-
-    @Override
-    public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(parent, name, context, attrs);
-    }
-
-
-}
diff --git a/roboguice/src/main/java/roboguice/activity/RoboSherlockFragmentActivity.java b/roboguice/src/main/java/roboguice/activity/RoboSherlockFragmentActivity.java
deleted file mode 100644
index 2baa8e34e..000000000
--- a/roboguice/src/main/java/roboguice/activity/RoboSherlockFragmentActivity.java
+++ /dev/null
@@ -1,148 +0,0 @@
-package roboguice.activity;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import roboguice.RoboGuice;
-import roboguice.activity.event.OnActivityResultEvent;
-import roboguice.activity.event.OnContentChangedEvent;
-import roboguice.activity.event.OnNewIntentEvent;
-import roboguice.activity.event.OnPauseEvent;
-import roboguice.activity.event.OnRestartEvent;
-import roboguice.activity.event.OnResumeEvent;
-import roboguice.activity.event.OnStopEvent;
-import roboguice.context.event.OnConfigurationChangedEvent;
-import roboguice.context.event.OnCreateEvent;
-import roboguice.context.event.OnDestroyEvent;
-import roboguice.context.event.OnStartEvent;
-import roboguice.event.EventManager;
-import roboguice.inject.ContentViewListener;
-import roboguice.inject.RoboInjector;
-import roboguice.util.RoboContext;
-
-import com.actionbarsherlock.app.SherlockFragmentActivity;
-
-import com.google.inject.Inject;
-import com.google.inject.Key;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.res.Configuration;
-import android.os.Bundle;
-import android.util.AttributeSet;
-import android.view.View;
-
-/**
- * @author Roberto Tyley
- */
-public class RoboSherlockFragmentActivity extends SherlockFragmentActivity implements RoboContext {
-    protected EventManager eventManager;
-    protected HashMap<Key<?>, Object> scopedObjects = new HashMap<Key<?>, Object>();
-
-    @Inject ContentViewListener ignored; // BUG find a better place to put this
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
-        eventManager = injector.getInstance(EventManager.class);
-        injector.injectMembersWithoutViews(this);
-        super.onCreate(savedInstanceState);
-        eventManager.fire(new OnCreateEvent<Activity>(this,savedInstanceState));
-    }
-
-    @Override
-    protected void onRestart() {
-        super.onRestart();
-        eventManager.fire(new OnRestartEvent(this));
-    }
-
-    @Override
-    protected void onStart() {
-        super.onStart();
-        eventManager.fire(new OnStartEvent<Activity>(this));
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        eventManager.fire(new OnResumeEvent(this));
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-        eventManager.fire(new OnPauseEvent(this));
-    }
-
-    @Override
-    protected void onNewIntent( Intent intent ) {
-        super.onNewIntent(intent);
-        eventManager.fire(new OnNewIntentEvent(this));
-    }
-
-    @Override
-    protected void onStop() {
-        try {
-            eventManager.fire(new OnStopEvent(this));
-        } finally {
-            super.onStop();
-        }
-    }
-
-    @Override
-    protected void onDestroy() {
-        try {
-            eventManager.fire(new OnDestroyEvent<Activity>(this));
-        } finally {
-            try {
-                RoboGuice.destroyInjector(this);
-            } finally {
-                super.onDestroy();
-            }
-        }
-    }
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        final Configuration currentConfig = getResources().getConfiguration();
-        super.onConfigurationChanged(newConfig);
-        eventManager.fire(new OnConfigurationChangedEvent<Activity>(this,currentConfig, newConfig));
-    }
-
-    @Override
-    public void onContentChanged() {
-        super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
-        eventManager.fire(new OnContentChangedEvent(this));
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        eventManager.fire(new OnActivityResultEvent(this, requestCode, resultCode, data));
-    }
-
-    @Override
-    public Map<Key<?>, Object> getScopedObjectMap() {
-        return scopedObjects;
-    }
-
-    @Override
-    public View onCreateView(String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(name, context, attrs);
-    }
-
-    @Override
-    public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(parent, name, context, attrs);
-    }
-
-
-}
diff --git a/roboguice/src/main/java/roboguice/activity/RoboSherlockListActivity.java b/roboguice/src/main/java/roboguice/activity/RoboSherlockListActivity.java
deleted file mode 100644
index 0de5cc5bb..000000000
--- a/roboguice/src/main/java/roboguice/activity/RoboSherlockListActivity.java
+++ /dev/null
@@ -1,164 +0,0 @@
-/*
- * Copyright 2012 Jake Wharton
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions
- * and limitations under the License.
- */
-package roboguice.activity;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import roboguice.RoboGuice;
-import roboguice.activity.event.OnActivityResultEvent;
-import roboguice.activity.event.OnContentChangedEvent;
-import roboguice.activity.event.OnNewIntentEvent;
-import roboguice.activity.event.OnPauseEvent;
-import roboguice.activity.event.OnRestartEvent;
-import roboguice.activity.event.OnResumeEvent;
-import roboguice.activity.event.OnStopEvent;
-import roboguice.context.event.OnConfigurationChangedEvent;
-import roboguice.context.event.OnCreateEvent;
-import roboguice.context.event.OnDestroyEvent;
-import roboguice.context.event.OnStartEvent;
-import roboguice.event.EventManager;
-import roboguice.inject.ContentViewListener;
-import roboguice.inject.RoboInjector;
-import roboguice.util.RoboContext;
-
-import com.actionbarsherlock.app.SherlockListActivity;
-
-import com.google.inject.Inject;
-import com.google.inject.Key;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.res.Configuration;
-import android.os.Bundle;
-import android.util.AttributeSet;
-import android.view.View;
-
-/**
- * @author Roberto Tyley
- */
-public class RoboSherlockListActivity extends SherlockListActivity implements RoboContext {
-    protected EventManager eventManager;
-    protected HashMap<Key<?>, Object> scopedObjects = new HashMap<Key<?>, Object>();
-
-    @Inject
-    ContentViewListener ignored; // BUG find a better place to put this
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
-        eventManager = injector.getInstance(EventManager.class);
-        injector.injectMembersWithoutViews(this);
-        super.onCreate(savedInstanceState);
-        eventManager.fire(new OnCreateEvent<Activity>(this,savedInstanceState));
-    }
-
-    @Override
-    protected void onRestart() {
-        super.onRestart();
-        eventManager.fire(new OnRestartEvent(this));
-    }
-
-    @Override
-    protected void onStart() {
-        super.onStart();
-        eventManager.fire(new OnStartEvent<Activity>(this));
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        eventManager.fire(new OnResumeEvent(this));
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-        eventManager.fire(new OnPauseEvent(this));
-    }
-
-    @Override
-    protected void onNewIntent( Intent intent ) {
-        super.onNewIntent(intent);
-        eventManager.fire(new OnNewIntentEvent(this));
-    }
-
-    @Override
-    protected void onStop() {
-        try {
-            eventManager.fire(new OnStopEvent(this));
-        } finally {
-            super.onStop();
-        }
-    }
-
-    @Override
-    protected void onDestroy() {
-        try {
-            eventManager.fire(new OnDestroyEvent<Activity>(this));
-        } finally {
-            try {
-                RoboGuice.destroyInjector(this);
-            } finally {
-                super.onDestroy();
-            }
-        }
-    }
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        final Configuration currentConfig = getResources().getConfiguration();
-        super.onConfigurationChanged(newConfig);
-        eventManager.fire(new OnConfigurationChangedEvent<Activity>(this,currentConfig, newConfig));
-    }
-
-    @Override
-    public void onContentChanged() {
-        super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
-        eventManager.fire(new OnContentChangedEvent(this));
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        eventManager.fire(new OnActivityResultEvent(this, requestCode, resultCode, data));
-    }
-
-    @Override
-    public Map<Key<?>, Object> getScopedObjectMap() {
-        return scopedObjects;
-    }
-
-    @Override
-    public View onCreateView(String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(name, context, attrs);
-    }
-
-    @Override
-    public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(parent, name, context, attrs);
-    }
-
-
-}
diff --git a/roboguice/src/main/java/roboguice/activity/RoboSherlockPreferenceActivity.java b/roboguice/src/main/java/roboguice/activity/RoboSherlockPreferenceActivity.java
deleted file mode 100644
index 33310d2d3..000000000
--- a/roboguice/src/main/java/roboguice/activity/RoboSherlockPreferenceActivity.java
+++ /dev/null
@@ -1,185 +0,0 @@
-/*
- * Copyright 2012 Jake Wharton
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions
- * and limitations under the License.
- */
-package roboguice.activity;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import roboguice.RoboGuice;
-import roboguice.activity.event.OnActivityResultEvent;
-import roboguice.activity.event.OnContentChangedEvent;
-import roboguice.activity.event.OnNewIntentEvent;
-import roboguice.activity.event.OnPauseEvent;
-import roboguice.activity.event.OnRestartEvent;
-import roboguice.activity.event.OnResumeEvent;
-import roboguice.activity.event.OnStopEvent;
-import roboguice.context.event.OnConfigurationChangedEvent;
-import roboguice.context.event.OnCreateEvent;
-import roboguice.context.event.OnDestroyEvent;
-import roboguice.context.event.OnStartEvent;
-import roboguice.event.EventManager;
-import roboguice.inject.ContentViewListener;
-import roboguice.inject.ContextScope;
-import roboguice.inject.PreferenceListener;
-import roboguice.inject.RoboInjector;
-import roboguice.util.RoboContext;
-
-import com.actionbarsherlock.app.SherlockPreferenceActivity;
-
-import com.google.inject.Inject;
-import com.google.inject.Key;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.res.Configuration;
-import android.os.Bundle;
-import android.preference.PreferenceScreen;
-import android.util.AttributeSet;
-import android.view.View;
-
-/**
- * @author Roberto Tyley
- */
-public class RoboSherlockPreferenceActivity extends SherlockPreferenceActivity implements RoboContext {
-    protected EventManager eventManager;
-    protected PreferenceListener preferenceListener;
-    protected HashMap<Key<?>, Object> scopedObjects = new HashMap<Key<?>, Object>();
-
-    @Inject
-    ContentViewListener ignored; // BUG find a better place to put this
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
-        eventManager = injector.getInstance(EventManager.class);
-        preferenceListener = injector.getInstance(PreferenceListener.class);
-        injector.injectMembersWithoutViews(this);
-        super.onCreate(savedInstanceState);
-        eventManager.fire(new OnCreateEvent<Activity>(this,savedInstanceState));
-    }
-
-    @SuppressWarnings("deprecation")
-    @Override
-    public void setPreferenceScreen(PreferenceScreen preferenceScreen) {
-        super.setPreferenceScreen(preferenceScreen);
-
-        final ContextScope scope = RoboGuice.getInjector(this).getInstance(ContextScope.class);
-        synchronized (ContextScope.class) {
-            scope.enter(this);
-            try {
-                preferenceListener.injectPreferenceViews();
-            } finally {
-                scope.exit(this);
-            }
-        }
-    }
-
-    @Override
-    protected void onRestart() {
-        super.onRestart();
-        eventManager.fire(new OnRestartEvent(this));
-    }
-
-    @Override
-    protected void onStart() {
-        super.onStart();
-        eventManager.fire(new OnStartEvent<Activity>(this));
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-        eventManager.fire(new OnResumeEvent(this));
-    }
-
-    @Override
-    protected void onPause() {
-        super.onPause();
-        eventManager.fire(new OnPauseEvent(this));
-    }
-
-    @Override
-    protected void onNewIntent( Intent intent ) {
-        super.onNewIntent(intent);
-        eventManager.fire(new OnNewIntentEvent(this));
-    }
-
-    @Override
-    protected void onStop() {
-        try {
-            eventManager.fire(new OnStopEvent(this));
-        } finally {
-            super.onStop();
-        }
-    }
-
-    @Override
-    protected void onDestroy() {
-        try {
-            eventManager.fire(new OnDestroyEvent<Activity>(this));
-        } finally {
-            try {
-                RoboGuice.destroyInjector(this);
-            } finally {
-                super.onDestroy();
-            }
-        }
-    }
-
-    @Override
-    public void onConfigurationChanged(Configuration newConfig) {
-        final Configuration currentConfig = getResources().getConfiguration();
-        super.onConfigurationChanged(newConfig);
-        eventManager.fire(new OnConfigurationChangedEvent<Activity>(this,currentConfig, newConfig));
-    }
-
-    @Override
-    public void onContentChanged() {
-        super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
-        eventManager.fire(new OnContentChangedEvent(this));
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        eventManager.fire(new OnActivityResultEvent(this, requestCode, resultCode, data));
-    }
-
-    @Override
-    public Map<Key<?>, Object> getScopedObjectMap() {
-        return scopedObjects;
-    }
-
-    @Override
-    public View onCreateView(String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(name, context, attrs);
-    }
-
-    @Override
-    public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(parent, name, context, attrs);
-    }
-
-
-}
diff --git a/roboguice/src/main/java/roboguice/activity/RoboTabActivity.java b/roboguice/src/main/java/roboguice/activity/RoboTabActivity.java
deleted file mode 100644
index daefa6acc..000000000
--- a/roboguice/src/main/java/roboguice/activity/RoboTabActivity.java
+++ /dev/null
@@ -1,190 +0,0 @@
-/*
- * Copyright 2009 Michael Burton
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions
- * and limitations under the License.
- */
-package roboguice.activity;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import roboguice.RoboGuice;
-import roboguice.activity.event.OnActivityResultEvent;
-import roboguice.activity.event.OnContentChangedEvent;
-import roboguice.activity.event.OnNewIntentEvent;
-import roboguice.activity.event.OnPauseEvent;
-import roboguice.activity.event.OnRestartEvent;
-import roboguice.activity.event.OnResumeEvent;
-import roboguice.activity.event.OnSaveInstanceStateEvent;
-import roboguice.activity.event.OnStopEvent;
-import roboguice.context.event.OnConfigurationChangedEvent;
-import roboguice.context.event.OnCreateEvent;
-import roboguice.context.event.OnDestroyEvent;
-import roboguice.context.event.OnStartEvent;
-import roboguice.event.EventManager;
-import roboguice.inject.ContentViewListener;
-import roboguice.inject.RoboInjector;
-import roboguice.util.RoboContext;
-
-import com.google.inject.Inject;
-import com.google.inject.Key;
-
-import android.annotation.TargetApi;
-import android.app.Activity;
-import android.app.TabActivity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.res.Configuration;
-import android.os.Build;
-import android.os.Bundle;
-import android.util.AttributeSet;
-import android.view.View;
-
-/**
- * A {@link RoboTabActivity} extends from {@link TabActivity} to provide
- * dynamic injection of collaborators, using Google Guice.<br />
- *
- * @see RoboActivity
- *
- * @author Toly Pochkin
- */
-@Deprecated
-public class RoboTabActivity extends TabActivity implements RoboContext {
-    protected EventManager eventManager;
-    protected HashMap<Key<?>,Object> scopedObjects = new HashMap<Key<?>, Object>();
-
-
-    @Inject ContentViewListener ignored; // BUG find a better place to put this
-
-    @Override
-    @Deprecated
-    protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
-        eventManager = injector.getInstance(EventManager.class);
-        injector.injectMembersWithoutViews(this);
-        super.onCreate(savedInstanceState);
-        eventManager.fire(new OnCreateEvent<Activity>(this,savedInstanceState));
-    }
-
-    @Override
-    protected void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-        eventManager.fire(new OnSaveInstanceStateEvent(this,outState));
-    }
-
-    @Override
-    @Deprecated
-    protected void onRestart() {
-        super.onRestart();
-        eventManager.fire(new OnRestartEvent(this));
-    }
-
-    @Override
-    @Deprecated
-    protected void onStart() {
-        super.onStart();
-        eventManager.fire(new OnStartEvent<Activity>(this));
-    }
-
-    @Override
-    @Deprecated
-    protected void onResume() {
-        super.onResume();
-        eventManager.fire(new OnResumeEvent(this));
-    }
-
-    @Override
-    @Deprecated
-    protected void onPause() {
-        super.onPause();
-        eventManager.fire(new OnPauseEvent(this));
-    }
-
-    @Override
-    @Deprecated
-    protected void onNewIntent( Intent intent ) {
-        super.onNewIntent(intent);
-        eventManager.fire(new OnNewIntentEvent(this));
-    }
-
-    @Override
-    @Deprecated
-    protected void onStop() {
-        try {
-            eventManager.fire(new OnStopEvent(this));
-        } finally {
-            super.onStop();
-        }
-    }
-
-    @Override
-    @Deprecated
-    protected void onDestroy() {
-        try {
-            eventManager.fire(new OnDestroyEvent<Activity>(this));
-        } finally {
-            try {
-                RoboGuice.destroyInjector(this);
-            } finally {
-                super.onDestroy();
-            }
-        }
-    }
-
-    @Override
-    @Deprecated
-    public void onConfigurationChanged(Configuration newConfig) {
-        final Configuration currentConfig = getResources().getConfiguration();
-        super.onConfigurationChanged(newConfig);
-        eventManager.fire(new OnConfigurationChangedEvent<Activity>(this,currentConfig, newConfig));
-    }
-
-    @Override
-    @Deprecated
-    public void onContentChanged() {
-        super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
-        eventManager.fire(new OnContentChangedEvent(this));
-    }
-
-    @Override
-    @Deprecated
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        eventManager.fire(new OnActivityResultEvent(this, requestCode, resultCode, data));
-    }
-
-    @Override
-    public Map<Key<?>, Object> getScopedObjectMap() {
-        return scopedObjects;
-    }
-
-    @Override
-    public View onCreateView(String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(name, context, attrs);
-    }
-
-    @Override
-    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
-    public View onCreateView(View parent, String name, Context context, AttributeSet attrs) {
-        if (RoboActivity.shouldInjectOnCreateView(name))
-            return RoboActivity.injectOnCreateView(name, context, attrs);
-
-        return super.onCreateView(parent, name, context, attrs);
-    }
-
-
-}
diff --git a/roboguice/src/main/java/roboguice/activity/SherlockAccountAuthenticatorActivity.java b/roboguice/src/main/java/roboguice/activity/SherlockAccountAuthenticatorActivity.java
deleted file mode 100644
index 437e30e29..000000000
--- a/roboguice/src/main/java/roboguice/activity/SherlockAccountAuthenticatorActivity.java
+++ /dev/null
@@ -1,90 +0,0 @@
-/*
- * Copyright (C) 2009 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package roboguice.activity;
-
-import com.actionbarsherlock.app.SherlockActivity;
-
-import android.accounts.AccountAuthenticatorResponse;
-import android.accounts.AccountManager;
-import android.annotation.TargetApi;
-import android.os.Build;
-import android.os.Bundle;
-
-/**
- * Base class for implementing an Activity that is used to help implement an
- * AbstractAccountAuthenticator. If the AbstractAccountAuthenticator needs to use an activity
- * to handle the request then it can have the activity extend SherlockAccountAuthenticatorActivity.
- * The AbstractAccountAuthenticator passes in the response to the intent using the following:
- * <pre>
- *      intent.putExtra({@link android.accounts.AccountManager#KEY_ACCOUNT_AUTHENTICATOR_RESPONSE}, response);
- * </pre>
- * The activity then sets the result that is to be handed to the response via
- * {@link #setAccountAuthenticatorResult(android.os.Bundle)}.
- * This result will be sent as the result of the request when the activity finishes. If this
- * is never set or if it is set to null then error {@link android.accounts.AccountManager#ERROR_CODE_CANCELED}
- * will be called on the response.
- */
-@TargetApi(Build.VERSION_CODES.ECLAIR)
-public class SherlockAccountAuthenticatorActivity extends SherlockActivity {
-    private AccountAuthenticatorResponse mAccountAuthenticatorResponse = null;
-    private Bundle mResultBundle = null;
-
-    /**
-     * Set the result that is to be sent as the result of the request that caused this
-     * Activity to be launched. If result is null or this method is never called then
-     * the request will be canceled.
-     * @param result this is returned as the result of the AbstractAccountAuthenticator request
-     */
-    public final void setAccountAuthenticatorResult(Bundle result) {
-        mResultBundle = result;
-    }
-
-    /**
-     * Retrieves the AccountAuthenticatorResponse from either the intent of the icicle, if the
-     * icicle is non-zero.
-     * @param icicle the save instance data of this Activity, may be null
-     */
-    @Override
-    protected void onCreate(Bundle icicle) {
-        super.onCreate(icicle);
-
-        mAccountAuthenticatorResponse =
-                getIntent().getParcelableExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE);
-
-        if (mAccountAuthenticatorResponse != null) {
-            mAccountAuthenticatorResponse.onRequestContinued();
-        }
-    }
-
-    /**
-     * Sends the result or a Constants.ERROR_CODE_CANCELED error if a result isn't present.
-     */
-    @Override
-    public void finish() {
-        if (mAccountAuthenticatorResponse != null) {
-            // send the result bundle back if set, otherwise send an error.
-            if (mResultBundle != null) {
-                mAccountAuthenticatorResponse.onResult(mResultBundle);
-            } else {
-                mAccountAuthenticatorResponse.onError(AccountManager.ERROR_CODE_CANCELED,
-                        "canceled");
-            }
-            mAccountAuthenticatorResponse = null;
-        }
-        super.finish();
-    }
-}
diff --git a/roboguice/src/main/java/roboguice/fragment/FragmentUtil.java b/roboguice/src/main/java/roboguice/fragment/FragmentUtil.java
deleted file mode 100644
index 04347081d..000000000
--- a/roboguice/src/main/java/roboguice/fragment/FragmentUtil.java
+++ /dev/null
@@ -1,61 +0,0 @@
-package roboguice.fragment;
-
-import com.google.inject.Provider;
-
-import android.app.Activity;
-import android.view.View;
-
-/**
- * Fragment utility class, it's actual implementation will use native or support library v4 fragment's based 
- * on whether or not the underlying app uses support library or not.
- * @author Charles Munger
- */
-@SuppressWarnings({ "unchecked", "rawtypes","PMD" }) //Need an unchecked conversion 
-public final class FragmentUtil {
-    public static final String SUPPORT_PACKAGE = "android.support.v4.app.";
-    public static final String NATIVE_PACKAGE = "android.app.";
-
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings("MS_SHOULD_BE_REFACTORED_TO_BE_FINAL")
-    @SuppressWarnings({"checkstyle:visibilitymodifier","checkstyle:staticvariablename"})
-    public static f nativeFrag = null;
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings("MS_SHOULD_BE_REFACTORED_TO_BE_FINAL")
-    @SuppressWarnings({"checkstyle:visibilitymodifier","checkstyle:staticvariablename"})
-    public static f supportFrag = null;
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings("MS_SHOULD_BE_REFACTORED_TO_BE_FINAL")
-    @SuppressWarnings({"checkstyle:visibilitymodifier","checkstyle:staticvariablename"})
-    public static Class<? extends Activity> supportActivity = null;
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings("MS_SHOULD_BE_REFACTORED_TO_BE_FINAL")
-    @SuppressWarnings({"checkstyle:visibilitymodifier","checkstyle:staticvariablename"})
-    public static boolean hasNative = false;
-    @edu.umd.cs.findbugs.annotations.SuppressWarnings("MS_SHOULD_BE_REFACTORED_TO_BE_FINAL")
-    @SuppressWarnings({"checkstyle:visibilitymodifier","checkstyle:staticvariablename"})
-    public static boolean hasSupport = false;
-
-    @SuppressWarnings("checkstyle:typename")
-    public interface f<fragType,fragManagerType> {
-        View getView(fragType frag);
-        fragType findFragmentById(fragManagerType fm, int id);
-        fragType findFragmentByTag(fragManagerType fm, String tag);
-        Class<fragType> fragmentType();
-        Class<fragManagerType> fragmentManagerType();
-        Class<Provider<fragManagerType>> fragmentManagerProviderType();
-    }
-
-    static {
-        try {
-            nativeFrag = (f) Class.forName("roboguice.fragment.provided.NativeFragmentUtil").newInstance();
-            hasNative = nativeFrag != null;
-        } catch (Throwable e) {}
-
-        try {
-            supportFrag = (f) Class.forName("roboguice.fragment.support.SupportFragmentUtil").newInstance();
-            supportActivity = (Class<? extends Activity>) Class.forName(SUPPORT_PACKAGE+"FragmentActivity");
-            hasSupport = supportFrag != null && supportActivity != null;
-        } catch (Throwable e) {}
-    }
-
-    private FragmentUtil() {
-        //private utility class constructor
-    }
-}
-
diff --git a/roboguice/src/main/java/roboguice/fragment/RoboSherlockDialogFragment.java b/roboguice/src/main/java/roboguice/fragment/RoboSherlockDialogFragment.java
deleted file mode 100644
index e880f9510..000000000
--- a/roboguice/src/main/java/roboguice/fragment/RoboSherlockDialogFragment.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package roboguice.fragment;
-
-import roboguice.RoboGuice;
-
-import com.actionbarsherlock.app.SherlockDialogFragment;
-
-import android.os.Bundle;
-import android.view.View;
-
-/**
- * Provides an injected {@link SherlockDialogFragment} based on ActionBarSherlock's Dialog Fragments.
- * A RoboSherlockDialogFragment will see all its members and views injected after {@link #onViewCreated(View, Bundle)}. 
- * @author Michael Burton
- */
-public abstract class RoboSherlockDialogFragment extends SherlockDialogFragment {
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
-    }
-
-    @Override
-    public void onViewCreated(View view, Bundle savedInstanceState) {
-        super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
-    }
-}
diff --git a/roboguice/src/main/java/roboguice/fragment/RoboSherlockFragment.java b/roboguice/src/main/java/roboguice/fragment/RoboSherlockFragment.java
deleted file mode 100644
index 59144a46d..000000000
--- a/roboguice/src/main/java/roboguice/fragment/RoboSherlockFragment.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package roboguice.fragment;
-
-import roboguice.RoboGuice;
-
-import com.actionbarsherlock.app.SherlockFragment;
-
-import android.os.Bundle;
-import android.view.View;
-
-/**
- * Provides an injected {@link SherlockFragment} based on ActionBarSherlock's Fragments.
- * A RoboSherlockFragment will see all its members and views injected after {@link #onViewCreated(View, Bundle)}. 
- * @author Michael Burton
- */
-public abstract class RoboSherlockFragment extends SherlockFragment {
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
-    }
-
-    @Override
-    public void onViewCreated(View view, Bundle savedInstanceState) {
-        super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
-    }
-}
diff --git a/roboguice/src/main/java/roboguice/fragment/RoboSherlockListFragment.java b/roboguice/src/main/java/roboguice/fragment/RoboSherlockListFragment.java
deleted file mode 100644
index 946ac822a..000000000
--- a/roboguice/src/main/java/roboguice/fragment/RoboSherlockListFragment.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package roboguice.fragment;
-
-import roboguice.RoboGuice;
-
-import com.actionbarsherlock.app.SherlockListFragment;
-
-import android.os.Bundle;
-import android.view.View;
-
-/**
- * Provides an injected {@link SherlockListFragment} based on ActionBarSherlock's Fragments.
- * A RoboSherlockListFragment will see all its members and views injected after {@link #onViewCreated(View, Bundle)}. 
- * @author Michael Burton
- */
-public abstract class RoboSherlockListFragment extends SherlockListFragment {
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
-    }
-
-    @Override
-    public void onViewCreated(View view, Bundle savedInstanceState) {
-        super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
-    }
-}
diff --git a/roboguice/src/main/java/roboguice/inject/ViewListener.java b/roboguice/src/main/java/roboguice/inject/ViewListener.java
deleted file mode 100644
index 4c46160dc..000000000
--- a/roboguice/src/main/java/roboguice/inject/ViewListener.java
+++ /dev/null
@@ -1,257 +0,0 @@
-/*
- * Copyright 2009 Michael Burton
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions
- * and limitations under the License.
- */
-package roboguice.inject;
-
-import android.app.Activity;
-import android.content.Context;
-import android.view.View;
-
-import roboguice.fragment.FragmentUtil;
-import roboguice.fragment.FragmentUtil.f;
-
-import com.google.inject.MembersInjector;
-import com.google.inject.Provider;
-import com.google.inject.TypeLiteral;
-import com.google.inject.spi.TypeEncounter;
-import com.google.inject.spi.TypeListener;
-
-import javax.inject.Singleton;
-import java.lang.annotation.Annotation;
-import java.lang.ref.WeakReference;
-import java.lang.reflect.Field;
-import java.lang.reflect.Modifier;
-import java.util.ArrayList;
-import java.util.WeakHashMap;
-
-@Singleton
-@SuppressWarnings({"unchecked","PMD"})
-public class ViewListener implements TypeListener {
-       
-    @Override
-    public <I> void hear(TypeLiteral<I> typeLiteral, TypeEncounter<I> typeEncounter) {
-
-        for (Class<?> c = typeLiteral.getRawType(); c != Object.class; c = c.getSuperclass())
-            for (Field field : c.getDeclaredFields()) {
-                if (field.isAnnotationPresent(InjectView.class))
-                    if (Modifier.isStatic(field.getModifiers()))
-                        throw new UnsupportedOperationException("Views may not be statically injected");
-                    else if (!View.class.isAssignableFrom(field.getType()))
-                        throw new UnsupportedOperationException("You may only use @InjectView on fields descended from type View");
-                    else if (Context.class.isAssignableFrom(field.getDeclaringClass()) && !Activity.class.isAssignableFrom(field.getDeclaringClass()))
-                        throw new UnsupportedOperationException("You may only use @InjectView in Activity contexts");
-                    else {
-                        final f<?,?> utils = FragmentUtil.hasSupport 
-                                && (FragmentUtil.supportActivity.isAssignableFrom(field.getDeclaringClass())
-                                        || FragmentUtil.supportFrag.fragmentType().isAssignableFrom(field.getDeclaringClass()))
-                                        ? FragmentUtil.supportFrag : FragmentUtil.nativeFrag;
-
-                        typeEncounter.register(new ViewMembersInjector<I>(
-                                field, field.getAnnotation(InjectView.class),
-                                typeEncounter, utils));
-                    }
-
-                else if (field.isAnnotationPresent(InjectFragment.class))
-                    if (!FragmentUtil.hasNative && !FragmentUtil.hasSupport) {
-                        throw new RuntimeException(new ClassNotFoundException("No fragment classes were available"));
-                    } else if (Modifier.isStatic(field.getModifiers())) {
-                        throw new UnsupportedOperationException("Fragments may not be statically injected");
-
-                    } else {
-                        final boolean assignableFromNative = FragmentUtil.hasNative && FragmentUtil.nativeFrag.fragmentType().isAssignableFrom(field.getType());
-                        final boolean assignableFromSupport = FragmentUtil.hasSupport && FragmentUtil.supportFrag.fragmentType().isAssignableFrom(field.getType());
-                        final boolean isSupportActivity = FragmentUtil.hasSupport && FragmentUtil.supportActivity.isAssignableFrom(field.getDeclaringClass());
-                        final boolean isNativeActivity = !isSupportActivity && Activity.class.isAssignableFrom(field.getDeclaringClass());
-
-                        if (isNativeActivity && assignableFromNative || isSupportActivity && assignableFromSupport) {
-                            typeEncounter.register(new ViewMembersInjector<I>(field, field.getAnnotation(InjectFragment.class), typeEncounter, isNativeActivity ? FragmentUtil.nativeFrag:FragmentUtil.supportFrag));
-                        } else if (isNativeActivity && !assignableFromNative) {
-                            // Error messages - these filters are comprehensive. The
-                            // final else block will never execute.
-                            throw new UnsupportedOperationException(
-                                    "You may only use @InjectFragment in native activities if fields are descended from type android.app.Fragment");
-                        } else if (!isSupportActivity && !isNativeActivity) {
-                            throw new UnsupportedOperationException("You may only use @InjectFragment in Activity contexts");
-                        } else if (isSupportActivity && !assignableFromSupport) {
-                            throw new UnsupportedOperationException(
-                                    "You may only use @InjectFragment in support activities if fields are descended from type android.support.v4.app.Fragment");
-                        } else {
-                            throw new RuntimeException("This should never happen.");
-                        }
-                    }
-            }
-    }
-
-
-    /**
-     * This class gets twice as many providers as necessary to do its job, look into optimizations in the future if this is a bottleneck
-     */
-    public static class ViewMembersInjector<T> implements MembersInjector<T> {
-        @edu.umd.cs.findbugs.annotations.SuppressWarnings("MS_SHOULD_BE_FINAL")
-        protected static WeakHashMap<Object,ArrayList<ViewMembersInjector<?>>> viewMembersInjectors = new WeakHashMap<Object, ArrayList<ViewMembersInjector<?>>>();
-
-        protected Field field;
-        protected Annotation annotation;
-        protected WeakReference<T> instanceRef;
-        @SuppressWarnings("rawtypes")
-        protected FragmentUtil.f fragUtils;
-        @SuppressWarnings("rawtypes")
-        protected Provider fragManager;
-        protected Provider<Activity> activityProvider;
-
-        public ViewMembersInjector(Field field, Annotation annotation, TypeEncounter<T> typeEncounter, FragmentUtil.f<?,?> utils) {
-            this.field = field;
-            this.annotation = annotation;
-            this.activityProvider = typeEncounter.getProvider(Activity.class);
-
-            if( utils !=null ) {
-                this.fragUtils = utils;
-                this.fragManager = typeEncounter.getProvider(utils.fragmentManagerType());
-            }
-
-        }
-
-        /**
-         * This is called when instance is injected by guice.  Because the views may or may not be set up yet,
-         * we don't do the real view injection until later.
-         *
-         * @param instance the instance being injected by guice
-         */
-        public void injectMembers(T instance) {
-            synchronized (ViewMembersInjector.class) {
-                final Activity activity = activityProvider.get();
-                final Object key = fragUtils != null && fragUtils.fragmentType().isInstance(instance) ? instance : activity;
-                if( key==null )
-                    return;
-
-                // Add a view injector for the key
-                ArrayList<ViewMembersInjector<?>> injectors = viewMembersInjectors.get(key);
-                if( injectors==null ) {
-                    injectors = new ArrayList<ViewMembersInjector<?>>();
-                    viewMembersInjectors.put(key, injectors);
-                }
-                injectors.add(this);
-
-                this.instanceRef = new WeakReference<T>(instance);
-            }
-        }
-
-        public void reallyInjectMembers( Object activityOrFragment ) {
-            if( annotation instanceof InjectView )
-                reallyInjectMemberViews(activityOrFragment);
-            else
-                reallyInjectMemberFragments(activityOrFragment);
-        }
-
-        /**
-         * This is when the view references are actually evaluated.
-         *
-         * I don't like all the hacks I had to put into this method.  Instance is the object you're
-         * injecting into.  ActivityOrFragment is the activity or fragment that you're injecting
-         * views into.  Instance must equal activityOrFragment is activityOrFragment is a fragment,
-         * but they may differ if activityOrFragment is an activity.  They should be allowed to differ
-         * so that you can inject views into arbitrary objects, but I don't know how to determine whether
-         * to get the view from the fragment or the activity for an arbitrary object, so I'm artificially
-         * limiting injection targets to the fragment itself for fragments.
-         *
-         * @param activityOrFragment an activity or fragment
-         */
-        protected void reallyInjectMemberViews(Object activityOrFragment) {
-
-            final T instance = fragUtils != null && fragUtils.fragmentType().isInstance(activityOrFragment) ? (T)activityOrFragment : instanceRef.get();
-            if( instance==null )
-                return;
-
-            if( activityOrFragment instanceof Context && !(activityOrFragment instanceof Activity ))
-                throw new UnsupportedOperationException("Can't inject view into a non-Activity context");
-
-            View view = null;
-
-            try {
-                final InjectView injectView = (InjectView) annotation;
-                final int id = injectView.value();
-
-                if( id>=0 )
-                    view = fragUtils != null && fragUtils.fragmentType().isInstance(activityOrFragment) ? fragUtils.getView(activityOrFragment).findViewById(id) : ((Activity)activityOrFragment).findViewById(id);
-
-                else
-                    view = fragUtils !=null && fragUtils.fragmentType().isInstance(activityOrFragment) ? fragUtils.getView(activityOrFragment).findViewWithTag(injectView.tag()) : ((Activity)activityOrFragment).getWindow().getDecorView().findViewWithTag(injectView.tag());
-
-                if (view == null && Nullable.notNullable(field))
-                    throw new NullPointerException(String.format("Can't inject null value into %s.%s when field is not @Nullable", field.getDeclaringClass(), field.getName()));
-
-                field.setAccessible(true);
-                field.set(instance, view);
-
-            } catch (IllegalAccessException e) {
-                throw new RuntimeException(e);
-
-            }  catch (IllegalArgumentException f) {
-                throw new IllegalArgumentException(String.format("Can't assign %s value %s to %s field %s", view != null ? view.getClass() : "(null)", view,
-                        field.getType(), field.getName()), f);
-            }
-        }
-
-        /**
-         * This is when the view references are actually evaluated.
-         * @param activityOrFragment an activity or fragment
-         */
-        protected void reallyInjectMemberFragments(Object activityOrFragment) {
-
-            final T instance = instanceRef.get();
-            if( instance==null )
-                return;
-
-            if( activityOrFragment instanceof Context && !(activityOrFragment instanceof Activity ))
-                throw new UnsupportedOperationException("Can't inject fragment into a non-Activity context");
-
-            Object fragment = null;
-
-            try {
-                final InjectFragment injectFragment = (InjectFragment) annotation;
-                final int id = injectFragment.value();
-
-                if( id>=0 )
-                    fragment = fragUtils.findFragmentById(fragManager.get(), id);
-                else
-                    fragment = fragUtils.findFragmentByTag(fragManager.get(),injectFragment.tag());
-
-                if (fragment == null && Nullable.notNullable(field))
-                    throw new NullPointerException(String.format("Can't inject null value into %s.%s when field is not @Nullable", field.getDeclaringClass(), field.getName()));
-
-                field.setAccessible(true);
-                field.set(instance, fragment);
-
-            } catch (IllegalAccessException e) {
-                throw new RuntimeException(e);
-
-            } catch (IllegalArgumentException f) {
-                throw new IllegalArgumentException(String.format("Can't assign %s value %s to %s field %s", fragment != null ? fragment.getClass() : "(null)", fragment,
-                        field.getType(), field.getName()), f);
-            }
-        }
-
-        protected static void injectViews(Object activityOrFragment) {
-            synchronized ( ViewMembersInjector.class ) {
-
-                final ArrayList<ViewMembersInjector<?>> injectors = viewMembersInjectors.get(activityOrFragment);
-                if(injectors!=null)
-                    for(ViewMembersInjector<?> viewMembersInjector : injectors)
-                        viewMembersInjector.reallyInjectMembers(activityOrFragment);
-            }
-        }
-    }
-
-}
diff --git a/roboguice/src/main/java/roboguice/util/AndroidCallableWrapper.java b/roboguice/src/main/java/roboguice/util/AndroidCallableWrapper.java
deleted file mode 100644
index 4a04d898f..000000000
--- a/roboguice/src/main/java/roboguice/util/AndroidCallableWrapper.java
+++ /dev/null
@@ -1,146 +0,0 @@
-package roboguice.util;
-
-import java.util.HashMap;
-import java.util.concurrent.Callable;
-import java.util.concurrent.CountDownLatch;
-
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
-
-import android.os.Handler;
-import android.os.Looper;
-
-
-// TODO
-// - has no execute() method
-// - has no progress support
-// - has no onInterrupted support
-// - add retry support
-
-
-public class AndroidCallableWrapper<ResultT> implements Runnable {
-    protected Handler handler;
-    protected AndroidCallableI<ResultT> delegate;
-    protected StackTraceElement[] launchLocation;
-
-    @SuppressWarnings("MALICIOUS_CODE")
-    public AndroidCallableWrapper(Handler handler, AndroidCallableI<ResultT> delegate, StackTraceElement[] launchLocation ) {
-        this.delegate = delegate;
-        this.launchLocation = launchLocation;
-        this.handler = handler != null ? handler : new Handler(Looper.getMainLooper());
-    }
-
-    @java.lang.SuppressWarnings("unchecked")
-    @Override
-    public void run() {
-        ResultT result = null;
-        Exception exception = null;
-        try {
-            if (isPreCallOverriden((Class<? extends AndroidCallableI<?>>) delegate.getClass()))
-                beforeCall();
-
-            result = doDoInBackgroundThread();
-        } catch (Exception e) {
-            exception = e;
-        } finally {
-            afterCall(result, exception);
-        }
-    }
-
-
-    void beforeCall() throws Exception {
-        final CountDownLatch latch = new CountDownLatch(1);
-        final Exception[] exceptions = new Exception[1];
-
-        // Execute onSuccess in the UI thread, but wait
-        // for it to complete.
-        // If it throws an exception, capture that exception
-        // and rethrow it later.
-        handler.post(new Runnable() {
-            public void run() {
-                try {
-                    new Callable<Object>() {
-                        @Override
-                        public Object call() throws Exception {
-                            doOnPreCall();
-                            return null;
-                        }
-                    }.call();
-                } catch (Exception e) {
-                    exceptions[0] = e;
-                } finally {
-                    latch.countDown();
-                }
-            }
-        });
-
-        // Wait for onSuccess to finish
-        latch.await();
-
-        if (exceptions[0] != null)
-            throw exceptions[0];
-
-    }
-
-    void afterCall(final ResultT result, final Exception e) {
-        handler.post(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    if (e != null) {
-                        if( launchLocation!=null ) {
-                            final StackTraceElement[] stackTrace = e.getStackTrace();
-                            final StackTraceElement[] result = new StackTraceElement[stackTrace.length + launchLocation.length];
-                            System.arraycopy(stackTrace, 0, result, 0, stackTrace.length);
-                            System.arraycopy(launchLocation, 0, result, stackTrace.length, launchLocation.length);
-                            e.setStackTrace(result);
-                        }
-                        doOnException(e);
-                    } else {
-                        doOnSuccess(result);
-                    }
-                } finally {
-                    doOnFinally();
-                }
-            }
-        });
-    }
-
-    protected void doOnPreCall() throws Exception {
-        delegate.onPreCall();
-    }
-
-    protected ResultT doDoInBackgroundThread() throws Exception {
-        return delegate.doInBackground();
-    }
-
-    protected void doOnSuccess(ResultT result) {
-        delegate.onSuccess(result);
-    }
-
-    protected void doOnException(Exception e) {
-        delegate.onException(e);
-    }
-
-    protected void doOnFinally() {
-        delegate.onFinally();
-    }
-
-
-    static HashMap<Class<? extends AndroidCallableI<?>>, Boolean> isPreCallOverriddenMap = new HashMap<Class<? extends AndroidCallableI<?>>, Boolean>();
-
-    static boolean isPreCallOverriden(Class<? extends AndroidCallableI<?>> subClass) {
-        try {
-            Boolean tmp = isPreCallOverriddenMap.get(subClass);
-            if (tmp != null)
-                return tmp;
-
-            tmp = subClass.getMethod("onPreCall").getDeclaringClass() != AndroidCallableWrapper.class;
-            isPreCallOverriddenMap.put(subClass, tmp);
-            return tmp;
-
-        } catch (NoSuchMethodException e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-}
diff --git a/roboguice/src/main/java/roboguice/util/Ln.java b/roboguice/src/main/java/roboguice/util/Ln.java
deleted file mode 100644
index df630b12b..000000000
--- a/roboguice/src/main/java/roboguice/util/Ln.java
+++ /dev/null
@@ -1,148 +0,0 @@
-package roboguice.util;
-
-import com.google.inject.Inject;
-
-import edu.umd.cs.findbugs.annotations.SuppressWarnings;
-
-/**
- * A more natural android logging facility.
- *
- * WARNING: CHECK OUT COMMON PITFALLS BELOW
- *
- * Unlike {@link android.util.Log}, Log provides sensible defaults.
- * Debug and Verbose logging is enabled for applications that
- * have "android:debuggable=true" in their AndroidManifest.xml.
- * For apps built using SDK Tools r8 or later, this means any debug
- * build.  Release builds built with r8 or later will have verbose
- * and debug log messages turned off.
- *
- * The default tag is automatically set to your app's packagename,
- * and the current context (eg. activity, service, application, etc)
- * is appended as well.  You can add an additional parameter to the
- * tag using {@link #Log(String)}.
- *
- * Log-levels can be programatically overridden for specific instances
- * using {@link #Log(String, boolean, boolean)}.
- *
- * Log messages may optionally use {@link String#format(String, Object...)}
- * formatting, which will not be evaluated unless the log statement is output.
- * Additional parameters to the logging statement are treated as varrgs parameters
- * to {@link String#format(String, Object...)}
- *
- * Also, the current file and line is automatically appended to the tag
- * (this is only done if debug is enabled for performance reasons).
- *
- * COMMON PITFALLS:
- * * Make sure you put the exception FIRST in the call.  A common
- *   mistake is to place it last as is the android.util.Log convention,
- *   but then it will get treated as varargs parameter.
- * * vararg parameters are not appended to the log message!  You must
- *   insert them into the log message using %s or another similar
- *   format parameter
- *
- * Usage Examples:
- *
- * Ln.v("hello there");
- * Ln.d("%s %s", "hello", "there");
- * Ln.e( exception, "Error during some operation");
- * Ln.w( exception, "Error during %s operation", "some other");
- *
- *
- */
-@SuppressWarnings({"ImplicitArrayToString"})
-public final class Ln {
-
-    /**
-     * lnImpl is initially set to LnImpl() with sensible defaults, then replaced
-     * by whatever binding you choose during guice static injection pass.
-     */
-    @SuppressWarnings(value="MS_SHOULD_BE_FINAL")
-    @Inject(optional = true) protected static LnInterface lnImpl = new LnImpl();
-
-
-
-    private Ln() {}
-
-
-
-    public static int v(Throwable t) {
-        return lnImpl.v(t);
-    }
-
-    public static int v(Object s1, Object... args) {
-        return lnImpl.v(s1, args);
-    }
-
-    public static int v(Throwable throwable, Object s1, Object... args ) {
-        return lnImpl.v(throwable,s1,args);
-    }
-
-    public static int d(Throwable t) {
-        return lnImpl.d(t);
-    }
-
-    public static int d(Object s1, Object... args) {
-        return lnImpl.d(s1,args);
-    }
-
-    public static int d(Throwable throwable, Object s1, Object... args) {
-        return lnImpl.d(throwable, s1, args);
-    }
-
-    public static int i(Throwable t) {
-        return lnImpl.i(t);
-    }
-
-    public static int i( Object s1, Object... args) {
-        return lnImpl.i(s1, args);
-    }
-
-    public static int i(Throwable throwable, Object s1, Object... args) {
-        return lnImpl.i(throwable, s1, args);
-    }
-
-    public static int w(Throwable t) {
-        return lnImpl.w(t);
-    }
-
-    public static int w( Object s1, Object... args) {
-        return lnImpl.w(s1,args);
-    }
-
-    public static int w( Throwable throwable, Object s1, Object... args) {
-        return lnImpl.w(throwable,s1,args);
-    }
-
-    public static int e(Throwable t) {
-        return lnImpl.e(t);
-    }
-
-    public static int e( Object s1, Object... args) {
-        return lnImpl.e(s1,args);
-    }
-
-    public static int e( Throwable throwable, Object s1, Object... args) {
-        return lnImpl.e(throwable,s1,args);
-    }
-
-    public static boolean isDebugEnabled() {
-        return lnImpl.isDebugEnabled();
-    }
-
-    public static boolean isVerboseEnabled() {
-        return lnImpl.isVerboseEnabled();
-    }
-
-    public static int getLoggingLevel() {
-        return lnImpl.getLoggingLevel();
-    }
-
-    public static void setLoggingLevel(int level) {
-        lnImpl.setLoggingLevel(level);
-    }
-
-    public static String logLevelToString( int loglevel ) {
-        return lnImpl.logLevelToString(loglevel);
-    }
-
-}
diff --git a/roboguice/src/main/java/roboguice/util/Strings.java b/roboguice/src/main/java/roboguice/util/Strings.java
deleted file mode 100644
index e5be1b36a..000000000
--- a/roboguice/src/main/java/roboguice/util/Strings.java
+++ /dev/null
@@ -1,198 +0,0 @@
-package roboguice.util;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.Reader;
-import java.io.StringWriter;
-import java.io.Writer;
-import java.nio.charset.Charset;
-import java.security.InvalidParameterException;
-import java.security.MessageDigest;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Locale;
-import java.util.Map;
-
-public final class Strings {
-    private static final int DEFAULT_BUFFER_SIZE = 1024 * 4;
-
-    private Strings() {
-        // private utility class constructor
-    }
-
-    /**
-     * Like join, but allows for a distinct final delimiter. For english
-     * sentences such as "Alice, Bob and Charlie" use ", " and " and " as the
-     * delimiters.
-     *
-     * @param delimiter
-     *            usually ", "
-     * @param lastDelimiter
-     *            usually " and "
-     * @param objs
-     *            the objects
-     * @param <T>
-     *            the type
-     * @return a string
-     */
-    public static <T> String joinAnd(final String delimiter, final String lastDelimiter, final Collection<T> objs) {
-        if (objs == null || objs.isEmpty())
-            return "";
-
-        final Iterator<T> iter = objs.iterator();
-        final StringBuilder buffer = new StringBuilder(Strings.toString(iter.next()));
-        int i = 1;
-        while (iter.hasNext()) {
-            final T obj = iter.next();
-            if (notEmpty(obj))
-                buffer.append(++i == objs.size() ? lastDelimiter : delimiter).append(Strings.toString(obj));
-        }
-        return buffer.toString();
-    }
-
-    public static <T> String joinAnd(final String delimiter, final String lastDelimiter, final T... objs) {
-        return joinAnd(delimiter, lastDelimiter, Arrays.asList(objs));
-    }
-
-    public static <T> String join(final String delimiter, final Collection<T> objs) {
-        if (objs == null || objs.isEmpty())
-            return "";
-
-        final Iterator<T> iter = objs.iterator();
-        final StringBuilder buffer = new StringBuilder(Strings.toString(iter.next()));
-
-        while (iter.hasNext()) {
-            final T obj = iter.next();
-            if (notEmpty(obj))
-                buffer.append(delimiter).append(Strings.toString(obj));
-        }
-        return buffer.toString();
-    }
-
-    public static <T> String join(final String delimiter, final T... objects) {
-        return join(delimiter, Arrays.asList(objects));
-    }
-
-    public static String toString(InputStream input) {
-        StringWriter sw = new StringWriter();
-        copy(new InputStreamReader(input, Charset.forName("utf-8")), sw);
-        return sw.toString();
-    }
-
-    public static String toString(Reader input) {
-        StringWriter sw = new StringWriter();
-        copy(input, sw);
-        return sw.toString();
-    }
-
-    public static int copy(Reader input, Writer output) {
-        long count = copyLarge(input, output);
-        return count > Integer.MAX_VALUE ? -1 : (int) count;
-    }
-
-    public static long copyLarge(Reader input, Writer output) throws RuntimeException {
-        try {
-            char[] buffer = new char[DEFAULT_BUFFER_SIZE];
-            long count = 0;
-            int n;
-            while (-1 != (n = input.read(buffer))) {
-                output.write(buffer, 0, n);
-                count += n;
-            }
-            return count;
-        } catch (IOException e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    public static String toString(final Object o) {
-        return toString(o, "");
-    }
-
-    public static String toString(final Object o, final String def) {
-        return o == null ? def : o instanceof InputStream ? toString((InputStream) o) : o instanceof Reader ? toString((Reader) o) :
-                o instanceof Object[] ? Strings.join(", ", (Object[]) o) : o instanceof Collection ? Strings.join(", ", (Collection<?>) o) : o.toString();
-    }
-
-    public static boolean isEmpty(final Object o) {
-        return toString(o).trim().length() == 0;
-    }
-
-    public static boolean notEmpty(final Object o) {
-        return toString(o).trim().length() != 0;
-    }
-
-    public static String md5(String s) {
-        // http://stackoverflow.com/questions/1057041/difference-between-java-and-php5-md5-hash
-        // http://code.google.com/p/roboguice/issues/detail?id=89
-        try {
-
-            final byte[] hash = MessageDigest.getInstance("MD5").digest(s.getBytes("UTF-8"));
-            final StringBuilder hashString = new StringBuilder();
-
-            for (byte aHash : hash) {
-                String hex = Integer.toHexString(aHash);
-
-                if (hex.length() == 1) {
-                    hashString.append('0');
-                    hashString.append(hex.charAt(hex.length() - 1));
-                } else {
-                    hashString.append(hex.substring(hex.length() - 2));
-                }
-            }
-
-            return hashString.toString();
-
-        } catch (Exception e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    public static String capitalize(String s) {
-        final String c = Strings.toString(s);
-        return c.length() >= 2 ? c.substring(0, 1).toUpperCase(Locale.US) + c.substring(1) : c.length() >= 1 ? c.toUpperCase(Locale.US) : c;
-    }
-
-    public static boolean equals(Object a, Object b) {
-        return Strings.toString(a).equals(Strings.toString(b));
-    }
-
-    public static boolean equalsIgnoreCase(Object a, Object b) {
-        return Strings.toString(a).toLowerCase(Locale.US).equals(Strings.toString(b).toLowerCase(Locale.US));
-    }
-
-    public static String[] chunk(String str, int chunkSize) {
-        if (isEmpty(str) || chunkSize == 0)
-            return new String[0];
-
-        final int len = str.length();
-        final int arrayLen = (len - 1) / chunkSize + 1;
-        final String[] array = new String[arrayLen];
-        for (int i = 0; i < arrayLen; ++i)
-            array[i] = str.substring(i * chunkSize, i * chunkSize + chunkSize < len ? i * chunkSize + chunkSize : len);
-
-        return array;
-    }
-
-    public static String namedFormat(String str, Map<String, String> substitutions) {
-        for (Map.Entry<String,String> entry : substitutions.entrySet())
-            str = str.replace('$' + entry.getKey(), entry.getValue());
-
-        return str;
-    }
-
-    public static String namedFormat(String str, Object... nameValuePairs) {
-        if (nameValuePairs.length % 2 != 0)
-            throw new InvalidParameterException("You must include one value for each parameter");
-
-        final HashMap<String, String> map = new HashMap<String, String>(nameValuePairs.length / 2);
-        for (int i = 0; i < nameValuePairs.length; i += 2)
-            map.put(Strings.toString(nameValuePairs[i]), Strings.toString(nameValuePairs[i + 1]));
-
-        return namedFormat(str, map);
-    }
-
-}
diff --git a/roboguice/src/test/java/roboguice/R.java b/roboguice/src/test/java/roboguice/R.java
deleted file mode 100644
index 135845249..000000000
--- a/roboguice/src/test/java/roboguice/R.java
+++ /dev/null
@@ -1,7 +0,0 @@
-package roboguice;
-
-/**
- * Used by robolectric
- */
-public class R {
-}
diff --git a/roboguice/src/test/java/roboguice/RoboGuiceTest.java b/roboguice/src/test/java/roboguice/RoboGuiceTest.java
deleted file mode 100644
index 2b05f8582..000000000
--- a/roboguice/src/test/java/roboguice/RoboGuiceTest.java
+++ /dev/null
@@ -1,65 +0,0 @@
-package roboguice;
-
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.junit.Assert.assertThat;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-
-import roboguice.activity.RoboActivity;
-
-import com.google.inject.AbstractModule;
-import com.google.inject.Stage;
-
-import android.app.Activity;
-
-@RunWith(RobolectricTestRunner.class)
-public class RoboGuiceTest {
-
-    @Before
-    public void setup() {
-        RoboGuice.injectors.clear();
-    }
-
-    @Test
-    public void destroyInjectorShouldRemoveContext() {
-        final Activity activity = Robolectric.buildActivity(RoboActivity.class).get();
-        RoboGuice.getInjector(activity);
-
-        assertThat(RoboGuice.injectors.size(), equalTo(1));
-
-        RoboGuice.destroyInjector(activity);
-        assertThat(RoboGuice.injectors.size(), equalTo(1));
-
-        RoboGuice.destroyInjector(Robolectric.application);
-        assertThat(RoboGuice.injectors.size(), equalTo(0));
-    }
-
-    @Test
-    public void resetShouldRemoveContext() {
-        final Activity activity = Robolectric.buildActivity(RoboActivity.class).get();
-        RoboGuice.getInjector(activity);
-
-        assertThat(RoboGuice.injectors.size(), equalTo(1));
-
-        RoboGuice.Util.reset();
-        assertThat(RoboGuice.injectors.size(), equalTo(0));
-    }
-
-    // https://github.com/roboguice/roboguice/issues/87
-    @Test
-    public void shouldOnlyCallConfigureOnce() {
-        final int[] i = { 0 };
-        RoboGuice.setBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application),
-                new AbstractModule() {
-                    @Override
-                    protected void configure() {
-                        ++i[0];
-                    }
-                });
-        assertThat(i[0], equalTo(1));
-    }
-}
diff --git a/roboguice/src/test/java/roboguice/activity/ActivityInjectionTest.java b/roboguice/src/test/java/roboguice/activity/ActivityInjectionTest.java
deleted file mode 100644
index 9c2b04333..000000000
--- a/roboguice/src/test/java/roboguice/activity/ActivityInjectionTest.java
+++ /dev/null
@@ -1,292 +0,0 @@
-package roboguice.activity;
-
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertTrue;
-
-import java.lang.ref.SoftReference;
-import java.util.ArrayList;
-import java.util.concurrent.ArrayBlockingQueue;
-import java.util.concurrent.BlockingQueue;
-import java.util.concurrent.Callable;
-import java.util.concurrent.Executors;
-import java.util.concurrent.FutureTask;
-import java.util.concurrent.TimeUnit;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.util.ActivityController;
-
-import roboguice.RoboGuice;
-import roboguice.activity.ActivityInjectionTest.ModuleA.A;
-import roboguice.activity.ActivityInjectionTest.ModuleB.B;
-import roboguice.activity.ActivityInjectionTest.ModuleC.C;
-import roboguice.activity.ActivityInjectionTest.ModuleD.D;
-import roboguice.inject.ContextScopedProvider;
-import roboguice.inject.InjectExtra;
-import roboguice.inject.InjectPreference;
-import roboguice.inject.InjectResource;
-import roboguice.inject.InjectView;
-
-import com.google.inject.ConfigurationException;
-import com.google.inject.Inject;
-import com.google.inject.Key;
-import com.google.inject.Stage;
-import com.google.inject.TypeLiteral;
-
-import android.app.Activity;
-import android.app.Application;
-import android.content.Context;
-import android.content.Intent;
-import android.os.Bundle;
-import android.preference.Preference;
-import android.view.View;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-
-@RunWith(RobolectricTestRunner.class)
-public class ActivityInjectionTest {
-
-    protected DummyActivity activity;
-
-    @Before
-    public void setup() {
-        RoboGuice
-                .setBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleA());
-        activity = Robolectric.buildActivity(DummyActivity.class)
-                .withIntent(new Intent(Robolectric.application, DummyActivity.class).putExtra("foobar", "goober")).create().get();
-    }
-
-    @Test
-    public void shouldInjectUsingDefaultConstructor() {
-        assertThat(activity.emptyString, is(""));
-    }
-
-    @Test
-    public void shouldInjectView() {
-        assertThat(activity.text1, is(activity.findViewById(android.R.id.text1)));
-    }
-
-    @Test
-    public void shouldInjectStringResource() {
-        assertThat(activity.cancel, is("Cancel"));
-    }
-
-    @Test
-    public void shouldInjectExtras() {
-        assertThat(activity.foobar, is("goober"));
-    }
-
-    @Test
-    public void shouldStaticallyInject() {
-        assertThat(A.t, equalTo(""));
-    }
-
-    @Test
-    public void shouldInjectActivityAndRoboActivity() {
-        assertEquals(activity, activity.activity);
-        assertEquals(activity, activity.roboActivity);
-    }
-
-    @Test(expected = ConfigurationException.class)
-    public void shouldNotStaticallyInjectViews() {
-        RoboGuice
-                .setBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleB());
-        Robolectric.buildActivity(B.class).create().get();
-    }
-
-    @Test(expected = ConfigurationException.class)
-    public void shouldNotStaticallyInjectExtras() {
-        RoboGuice
-                .setBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleD());
-        Robolectric.buildActivity(D.class).create().get();
-    }
-
-    @Test(expected = ConfigurationException.class)
-    public void shouldNotStaticallyInjectPreferenceViews() {
-        RoboGuice
-                .setBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleC());
-        Robolectric.buildActivity(C.class).create().get();
-    }
-
-    @Test
-    public void shouldInjectApplication() {
-        final G g = Robolectric.buildActivity(G.class).create().get();
-        assertThat(g.application, equalTo(Robolectric.application));
-    }
-
-    @Test
-    public void shouldAllowBackgroundThreadsToFinishUsingContextAfterOnDestroy() throws Exception {
-        ActivityController<F> fController = Robolectric.buildActivity(F.class);
-        final SoftReference<F> ref = new SoftReference<F>(fController.get());
-        fController.create();
-        fController = null;
-
-        final BlockingQueue<Context> queue = new ArrayBlockingQueue<Context>(1);
-        new Thread() {
-            final Context context = RoboGuice.getInjector(ref.get()).getInstance(Context.class);
-
-            @Override
-            public void run() {
-                queue.add(context);
-            }
-        }.start();
-
-        ref.get().onDestroy();
-
-        // Force an OoM
-        // http://stackoverflow.com/questions/3785713/how-to-make-the-java-system-release-soft-references/3810234
-        boolean oomHappened = false;
-        try {
-            @SuppressWarnings({ "MismatchedQueryAndUpdateOfCollection" })
-            final ArrayList<Object[]> allocations = new ArrayList<Object[]>();
-            int size;
-            while ((size = Math.min(Math.abs((int) Runtime.getRuntime().freeMemory()), Integer.MAX_VALUE)) > 0)
-                allocations.add(new Object[size]);
-
-        } catch (OutOfMemoryError e) {
-            // great!
-            oomHappened = true;
-        }
-
-        assertTrue(oomHappened);
-        assertNotNull(queue.poll(10, TimeUnit.SECONDS));
-
-    }
-
-    @Test
-    public void shouldBeAbleToGetContextProvidersInBackgroundThreads() throws Exception {
-        final F f = Robolectric.buildActivity(F.class).create().get();
-
-        final FutureTask<Context> future = new FutureTask<Context>(new Callable<Context>() {
-            final ContextScopedProvider<Context> contextProvider = RoboGuice.getInjector(f).getInstance(
-                    Key.get(new TypeLiteral<ContextScopedProvider<Context>>() {
-                    }));
-
-            @Override
-            public Context call() throws Exception {
-                return contextProvider.get(f);
-            }
-
-        });
-
-        Executors.newSingleThreadExecutor().execute(future);
-
-        future.get();
-    }
-
-    public static class DummyActivity extends RoboActivity {
-        @Inject
-        protected String emptyString;
-        @Inject
-        protected Activity activity;
-        @Inject
-        protected RoboActivity roboActivity;
-        @InjectView(android.R.id.text1)
-        protected TextView text1;
-        @InjectResource(android.R.string.cancel)
-        protected String cancel;
-        @InjectExtra("foobar")
-        protected String foobar;
-
-        @Override
-        protected void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-
-            final LinearLayout root = new LinearLayout(this);
-
-            final TextView text1 = new TextView(this);
-            root.addView(text1);
-            text1.setId(android.R.id.text1);
-
-            final LinearLayout included1 = addIncludedView(android.R.id.summary, android.R.string.ok);
-            root.addView(included1);
-            final LinearLayout included2 = addIncludedView(android.R.id.title, android.R.string.no);
-            root.addView(included2);
-
-            setContentView(root);
-        }
-
-        protected LinearLayout addIncludedView(int includedRootId, int stringResId) {
-            LinearLayout container = new LinearLayout(this);
-            container.setId(includedRootId);
-
-            TextView textView = new TextView(this);
-            container.addView(textView);
-            textView.setId(android.R.id.text2);
-            textView.setText(stringResId);
-            return container;
-        }
-    }
-
-    public static class ModuleA extends com.google.inject.AbstractModule {
-        @Override
-        protected void configure() {
-            requestStaticInjection(A.class);
-        }
-
-        public static class A {
-            @InjectResource(android.R.string.cancel)
-            static String s;
-            @Inject
-            static String t;
-        }
-    }
-
-    public static class ModuleB extends com.google.inject.AbstractModule {
-        @Override
-        public void configure() {
-            requestStaticInjection(B.class);
-        }
-
-        public static class B extends RoboActivity {
-            @InjectView(0)
-            static View v;
-        }
-    }
-
-    public static class ModuleC extends com.google.inject.AbstractModule {
-        @Override
-        public void configure() {
-            requestStaticInjection(C.class);
-        }
-
-        public static class C extends RoboActivity {
-            @InjectPreference("xxx")
-            static Preference v;
-
-            @Override
-            protected void onCreate(Bundle savedInstanceState) {
-                super.onCreate(savedInstanceState);
-            }
-        }
-    }
-
-    public static class ModuleD extends com.google.inject.AbstractModule {
-        @Override
-        public void configure() {
-            requestStaticInjection(D.class);
-        }
-
-        public static class D extends RoboActivity{
-            @InjectExtra("xxx") static String s;
-        }
-    }
-
-    public static class F extends RoboActivity {}
-
-    public static class PojoA {
-        @InjectView(100)
-        View v;
-    }
-
-    public static class G extends RoboActivity {
-        @Inject Application application;
-    }
-}
diff --git a/roboguice/src/test/java/roboguice/activity/SherlockActivityInjectionTest.java b/roboguice/src/test/java/roboguice/activity/SherlockActivityInjectionTest.java
deleted file mode 100644
index fb76666fd..000000000
--- a/roboguice/src/test/java/roboguice/activity/SherlockActivityInjectionTest.java
+++ /dev/null
@@ -1,352 +0,0 @@
-package roboguice.activity;
-
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertTrue;
-import static org.robolectric.Robolectric.shadowOf;
-
-import java.lang.ref.SoftReference;
-import java.util.ArrayList;
-import java.util.concurrent.ArrayBlockingQueue;
-import java.util.concurrent.BlockingQueue;
-import java.util.concurrent.Callable;
-import java.util.concurrent.Executors;
-import java.util.concurrent.FutureTask;
-import java.util.concurrent.TimeUnit;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-
-import roboguice.RoboGuice;
-import roboguice.activity.SherlockActivityInjectionTest.ModuleA.A;
-import roboguice.activity.SherlockActivityInjectionTest.ModuleB.B;
-import roboguice.activity.SherlockActivityInjectionTest.ModuleC.C;
-import roboguice.activity.SherlockActivityInjectionTest.ModuleD.D;
-import roboguice.inject.ContextScopedProvider;
-import roboguice.inject.ContextSingleton;
-import roboguice.inject.InjectExtra;
-import roboguice.inject.InjectPreference;
-import roboguice.inject.InjectResource;
-import roboguice.inject.InjectView;
-import roboguice.inject.NullProvider;
-
-import com.actionbarsherlock.ActionBarSherlock;
-import com.actionbarsherlock.internal.ActionBarSherlockNative;
-
-import com.google.inject.ConfigurationException;
-import com.google.inject.Inject;
-import com.google.inject.Key;
-import com.google.inject.Stage;
-import com.google.inject.TypeLiteral;
-
-import android.app.Activity;
-import android.app.Application;
-import android.content.Context;
-import android.content.Intent;
-import android.os.Bundle;
-import android.preference.Preference;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-
-@RunWith(RobolectricTestRunner.class)
-public class SherlockActivityInjectionTest {
-
-    protected DummySherlockActivity activity;
-
-    @Before
-    public void setup() {
-        RoboGuice
-                .setBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleA());
-        ActionBarSherlock.registerImplementation(ActionBarSherlockRobolectric.class);
-        Intent intent = new Intent(Robolectric.application, DummySherlockActivity.class).putExtra("foobar", "goober");
-        activity = Robolectric.buildActivity(DummySherlockActivity.class).withIntent(intent).create().get();
-    }
-
-    @Test
-    public void shouldInjectUsingDefaultConstructor() {
-        assertThat(activity.emptyString, is(""));
-    }
-
-    @Test
-    public void shouldInjectView() {
-        assertThat(activity.text1, is(activity.findViewById(android.R.id.text1)));
-    }
-
-    @Test
-    public void shouldInjectStringResource() {
-        assertThat(activity.cancel, is("Cancel"));
-    }
-
-    @Test
-    public void shouldInjectExtras() {
-        assertThat(activity.foobar, is("goober"));
-    }
-
-    @Test
-    public void shouldStaticallyInject() {
-        assertThat(A.t, equalTo(""));
-    }
-
-    @Test
-    public void shouldInjectActivityAndRoboSherlockActivity() {
-        assertEquals(activity, activity.activity);
-        assertEquals(activity, activity.roboSherlockActivity);
-    }
-
-    @Test(expected = ConfigurationException.class)
-    public void shouldNotStaticallyInjectViews() {
-        RoboGuice
-                .setBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleB());
-        @SuppressWarnings("unused")
-        final B b = Robolectric.buildActivity(B.class).create().get();
-    }
-
-    @Test(expected = ConfigurationException.class)
-    public void shouldNotStaticallyInjectExtras() {
-        RoboGuice
-                .setBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleD());
-        @SuppressWarnings("unused")
-        final D d = Robolectric.buildActivity(D.class).create().get();
-    }
-
-    @Test(expected = ConfigurationException.class)
-    public void shouldNotStaticallyInjectPreferenceViews() {
-        RoboGuice
-                .setBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleC());
-        @SuppressWarnings("unused")
-        final C c = Robolectric.buildActivity(C.class).create().get();
-    }
-
-    @Test
-    public void shouldInjectApplication() {
-        final G g = Robolectric.buildActivity(G.class).create().get();
-
-        assertThat(g.application, equalTo(Robolectric.application));
-    }
-
-    @Test
-    public void shouldAllowBackgroundThreadsToFinishUsingContextAfterOnDestroy() throws Exception {
-        final SoftReference<F> ref = new SoftReference<F>(Robolectric.buildActivity(F.class).create().get());
-
-        final BlockingQueue<Context> queue = new ArrayBlockingQueue<Context>(1);
-        new Thread() {
-            final Context context = RoboGuice.getInjector(ref.get()).getInstance(Context.class);
-
-            @Override
-            public void run() {
-                queue.add(context);
-            }
-        }.start();
-
-        ref.get().onDestroy();
-
-        // Force an OoM
-        // http://stackoverflow.com/questions/3785713/how-to-make-the-java-system-release-soft-references/3810234
-        boolean oomHappened = false;
-        try {
-            @SuppressWarnings({ "MismatchedQueryAndUpdateOfCollection" })
-            final ArrayList<Object[]> allocations = new ArrayList<Object[]>();
-            int size;
-            while ((size = Math.min(Math.abs((int) Runtime.getRuntime().freeMemory()), Integer.MAX_VALUE)) > 0)
-                allocations.add(new Object[size]);
-
-        } catch (OutOfMemoryError e) {
-            // Yeah!
-            oomHappened = true;
-        }
-
-        assertTrue(oomHappened);
-        assertNotNull(queue.poll(10, TimeUnit.SECONDS));
-    }
-
-    @Test
-    public void shouldBeAbleToGetContextProvidersInBackgroundThreads() throws Exception {
-        final F f = Robolectric.buildActivity(F.class).create().get();
-
-        final FutureTask<Context> future = new FutureTask<Context>(new Callable<Context>() {
-            final ContextScopedProvider<Context> contextProvider = RoboGuice.getInjector(f).getInstance(
-                    Key.get(new TypeLiteral<ContextScopedProvider<Context>>() {
-                    }));
-
-            @Override
-            public Context call() throws Exception {
-                return contextProvider.get(f);
-            }
-        });
-
-        Executors.newSingleThreadExecutor().execute(future);
-
-        future.get();
-    }
-
-    public static class DummySherlockActivity extends RoboSherlockActivity {
-        @Inject
-        protected String emptyString;
-        @Inject
-        protected Activity activity;
-        @Inject
-        protected RoboSherlockActivity roboSherlockActivity;
-        @InjectView(android.R.id.text1)
-        protected TextView text1;
-        @InjectResource(android.R.string.cancel)
-        protected String cancel;
-        @InjectExtra("foobar")
-        protected String foobar;
-
-        @Override
-        protected void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-
-            final LinearLayout root = new LinearLayout(this);
-
-            final TextView text1 = new TextView(this);
-            root.addView(text1);
-            text1.setId(android.R.id.text1);
-
-            final LinearLayout included1 = addIncludedView(android.R.id.summary, android.R.string.ok);
-            root.addView(included1);
-            final LinearLayout included2 = addIncludedView(android.R.id.title, android.R.string.no);
-            root.addView(included2);
-
-            setContentView(root);
-        }
-
-        protected LinearLayout addIncludedView(int includedRootId, int stringResId) {
-            LinearLayout container = new LinearLayout(this);
-            container.setId(includedRootId);
-
-            TextView textView = new TextView(this);
-            container.addView(textView);
-            textView.setId(android.R.id.text2);
-            textView.setText(stringResId);
-            return container;
-        }
-    }
-
-    public static class BaseModule extends com.google.inject.AbstractModule {
-        @Override
-        protected void configure() {
-            bind(RoboSherlockActivity.class).toProvider(Key.get(new TypeLiteral<NullProvider<RoboSherlockActivity>>() {
-            })).in(ContextSingleton.class);
-        }
-    }
-
-    public static class ModuleA extends BaseModule {
-        @Override
-        protected void configure() {
-            super.configure();
-            requestStaticInjection(A.class);
-        }
-
-        public static class A {
-            @InjectResource(android.R.string.cancel)
-            static String s;
-            @Inject
-            static String t;
-        }
-    }
-
-    public static class ModuleB extends BaseModule {
-        @Override
-        protected void configure() {
-            super.configure();
-            requestStaticInjection(B.class);
-        }
-
-        public static class B extends RoboSherlockActivity {
-            @InjectView(0)
-            static View v;
-
-            @Override
-            protected void onCreate(Bundle savedInstanceState) {
-                super.onCreate(savedInstanceState);
-            }
-        }
-    }
-
-    public static class ModuleC extends BaseModule {
-        @Override
-        public void configure() {
-            super.configure();
-            requestStaticInjection(C.class);
-        }
-
-        public static class C extends RoboSherlockActivity {
-            @InjectPreference("xxx")
-            static Preference v;
-
-            @Override
-            protected void onCreate(Bundle savedInstanceState) {
-                super.onCreate(savedInstanceState);
-            }
-        }
-    }
-
-    public static class ModuleD extends BaseModule {
-        @Override
-        public void configure() {
-            super.configure();
-            requestStaticInjection(D.class);
-        }
-
-        public static class D extends RoboSherlockActivity {
-            @InjectExtra("xxx")
-            static String s;
-
-            @Override
-            protected void onCreate(Bundle savedInstanceState) {
-                super.onCreate(savedInstanceState);
-            }
-        }
-    }
-
-    public static class F extends RoboSherlockActivity {
-        @Override
-        protected void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-        }
-
-        @Override
-        protected void onDestroy() {
-            super.onDestroy();
-        }
-    }
-
-    public static class G extends RoboSherlockActivity {
-        @Inject
-        Application application;
-
-        @Override
-        protected void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-        }
-    }
-
-    @ActionBarSherlock.Implementation(api = 0)
-    public static class ActionBarSherlockRobolectric extends ActionBarSherlockNative {
-        public ActionBarSherlockRobolectric(Activity activity, int flags) {
-            super(activity, flags);
-        }
-
-        @Override
-        public void setContentView(int layoutResId) {
-            LayoutInflater layoutInflater = LayoutInflater.from(mActivity);
-            View contentView = layoutInflater.inflate(layoutResId, null);
-
-            shadowOf(mActivity).getWindow().setContentView(contentView);
-        }
-
-        @Override
-        public void setContentView(View view) {
-            shadowOf(mActivity).getWindow().setContentView(view);
-        }
-    }
-}
diff --git a/roboguice/src/test/java/roboguice/application/ApplicationInjectionTest.java b/roboguice/src/test/java/roboguice/application/ApplicationInjectionTest.java
deleted file mode 100644
index 12154f9d7..000000000
--- a/roboguice/src/test/java/roboguice/application/ApplicationInjectionTest.java
+++ /dev/null
@@ -1,77 +0,0 @@
-package roboguice.application;
-
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertThat;
-
-import java.util.Random;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-
-import roboguice.RoboGuice;
-
-import com.google.inject.Inject;
-
-import android.app.Application;
-import android.content.Context;
-
-@RunWith(RobolectricTestRunner.class)
-public class ApplicationInjectionTest {
-
-    @Test
-    public void shouldBeAbleToInjectIntoApplication() {
-        Robolectric.application = new AppA();
-        Robolectric.application.onCreate();
-
-        final AppA a = (AppA)Robolectric.application;
-        assertNotNull(a.random);
-    }
-
-
-    @Test
-    public void shouldBeAbleToInjectContextScopedItemsIntoApplication() {
-        Robolectric.application = new AppB();
-        Robolectric.application.onCreate();
-
-        final AppB a = (AppB)Robolectric.application;
-        assertThat( a.context, equalTo((Context)a) );
-    }
-
-
-
-
-    public static class AppA extends Application {
-        @Inject Random random;
-
-        @Override
-        public void onCreate() {
-            super.onCreate();
-            RoboGuice.getInjector(this).injectMembers(this);
-        }
-
-        @Override
-        public String getPackageName() {
-            return "org.robolectric.default";
-        }
-    }
-
-    public static class AppB extends Application {
-        @Inject Context context;
-
-        @Override
-        public void onCreate() {
-            super.onCreate();
-            RoboGuice.getInjector(this).injectMembers(this);
-        }
-
-        @Override
-        public String getPackageName() {
-            return "org.robolectric.default";
-        }
-    }
-
-
-}
diff --git a/roboguice/src/test/java/roboguice/event/ContextObserverBase.java b/roboguice/src/test/java/roboguice/event/ContextObserverBase.java
deleted file mode 100644
index 712edf179..000000000
--- a/roboguice/src/test/java/roboguice/event/ContextObserverBase.java
+++ /dev/null
@@ -1,138 +0,0 @@
-package roboguice.event;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-
-import java.lang.reflect.Method;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-/**
- * Base ContextSingleton Observer testing class exercising the various
- * implementation combinations.
- * 
- * @author John Ericksen
- */
-@SuppressWarnings({ "UnusedParameters", "UnusedDeclaration" })
-public class ContextObserverBase {
-
-    private Map<String, Map<Class<?>, Integer>> callCount = new HashMap<String, Map<Class<?>, Integer>>();
-
-    public void verifyCallCount(List<Method> methods, Class<?> event, int expectedCount) {
-        for (Method method : methods) {
-
-            assertTrue("Method: " + method.getName() + " was not called.", callCount.containsKey(method.getName()) || expectedCount == 0);
-
-            if (callCount.containsKey(method.getName())) {
-
-                Map<Class<?>, Integer> callCountClass = callCount.get(method.getName());
-
-                if (expectedCount > 0) {
-
-                    assertTrue("Event: " + event.getName() + " was not observed.", callCountClass.containsKey(event) || expectedCount == 0);
-
-                    if (callCountClass.containsKey(event)) {
-                        assertEquals("Call count was not expected", callCountClass.get(event).intValue(), expectedCount);
-                    }
-                }
-            }
-        }
-    }
-
-    public void reset() {
-        for (Map.Entry<String, Map<Class<?>, Integer>> callCountEntry : callCount.entrySet()) {
-            for (Map.Entry<Class<?>, Integer> callCountClassEntry : callCountEntry.getValue().entrySet()) {
-                callCountClassEntry.setValue(0);
-            }
-        }
-    }
-
-    public static final String[] methods = { "baseObservesEvent", "baseObservesProtectedEvent", "baseObservesPackagePrivateEvent", "baseObservesPrivateEvent", };
-
-    public static final String OVERLOADED_METHOD = "baseObservesOverloadedEvent";
-
-    public void baseObservesEvent(@Observes EventOne event) {
-        triggerCalled(methods[0], EventOne.class);
-    }
-
-    public void baseObservesEvent(@Observes EventTwo event) {
-        triggerCalled(methods[0], EventTwo.class);
-    }
-
-    protected void baseObservesProtectedEvent(@Observes EventOne event) {
-        triggerCalled(methods[1], EventOne.class);
-    }
-
-    protected void baseObservesProtectedEvent(@Observes EventTwo event) {
-        triggerCalled(methods[1], EventTwo.class);
-    }
-
-    void baseObservesPackagePrivateEvent(@Observes EventOne event) {
-        triggerCalled(methods[2], EventOne.class);
-    }
-
-    void baseObservesPackagePrivateEvent(@Observes EventTwo event) {
-        triggerCalled(methods[2], EventTwo.class);
-    }
-
-    @SuppressWarnings("unused")
-    //used by reflection like others
-    private void baseObservesPrivateEvent(@Observes EventOne event) {
-        triggerCalled(methods[3], EventOne.class);
-    }
-
-    @SuppressWarnings("unused")
-    //used by reflection like others
-    private void baseObservesPrivateEvent(@Observes EventTwo event) {
-        triggerCalled(methods[3], EventTwo.class);
-    }
-
-    public void observesOverloadedEvent(@Observes EventOne event) {
-        triggerCalled(OVERLOADED_METHOD, EventOne.class);
-    }
-
-    public void observesOverloadedEvent(@Observes EventTwo event) {
-        triggerCalled(OVERLOADED_METHOD, EventTwo.class);
-    }
-
-    protected void observesOverloadedProtectedEvent(@Observes EventOne event) {
-        triggerCalled(OVERLOADED_METHOD, EventOne.class);
-    }
-
-    protected void observesOverloadedProtectedEvent(@Observes EventTwo event) {
-        triggerCalled(OVERLOADED_METHOD, EventTwo.class);
-    }
-
-    void observesOverloadedPackagePrivateEvent(@Observes EventOne event) {
-        triggerCalled(OVERLOADED_METHOD, EventOne.class);
-    }
-
-    void observesOverloadedPackagePrivateEvent(@Observes EventTwo event) {
-        triggerCalled(OVERLOADED_METHOD, EventTwo.class);
-    }
-
-    @SuppressWarnings("rawtypes")
-    public void triggerCalled(String method, Class eventClass) {
-        if (!callCount.containsKey(method)) {
-            callCount.put(method, new HashMap<Class<?>, Integer>());
-        }
-        Map<Class<?>, Integer> callCountClass = callCount.get(method);
-
-        if (!callCountClass.containsKey(eventClass)) {
-            callCountClass.put(eventClass, 0);
-        }
-        callCountClass.put(eventClass, callCountClass.get(eventClass) + 1);
-    }
-
-    public static List<Method> getMethods(Class<?> eventClass) throws NoSuchMethodException {
-        List<Method> methodList = new ArrayList<Method>();
-
-        for (String method : ContextObserverBase.methods) {
-            methodList.add(ContextObserverBase.class.getDeclaredMethod(method, eventClass));
-        }
-
-        return methodList;
-    }
-}
diff --git a/roboguice/src/test/java/roboguice/event/ContextObserverTester.java b/roboguice/src/test/java/roboguice/event/ContextObserverTester.java
deleted file mode 100644
index 2d5461f22..000000000
--- a/roboguice/src/test/java/roboguice/event/ContextObserverTester.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package roboguice.event;
-
-/**
- * ContextSingleton Observer testing interface
- *
- * @author John Ericksen
- */
-public interface ContextObserverTester {
-
-    void observesImplementedEvent(@Observes EventOne event);
-
-    void observesImplementedEvent(@Observes EventTwo event);
-}
diff --git a/roboguice/src/test/java/roboguice/event/ContextObserverTesterImpl.java b/roboguice/src/test/java/roboguice/event/ContextObserverTesterImpl.java
deleted file mode 100644
index f71a226d2..000000000
--- a/roboguice/src/test/java/roboguice/event/ContextObserverTesterImpl.java
+++ /dev/null
@@ -1,102 +0,0 @@
-package roboguice.event;
-
-import java.lang.reflect.Method;
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * ContextSingleton Observer testing class exercising the various implementation combinations.
- *
- * @author John Ericksen
- */
-public class ContextObserverTesterImpl extends ContextObserverBase implements ContextObserverTester{
-
-    public static final String[] methods = {
-        "observesEvent",
-        "observesProtectedEvent",
-        "observesPackagePrivateEvent",
-        "observesPrivateEvent",
-        "observesOverloadedEvent",
-        "observesOverloadedProtectedEvent",
-        "observesOverloadedPackagePrivateEvent",
-        "observesImplementedEvent"
-    };
-
-    public void observesEvent(@Observes EventOne event){
-        triggerCalled(methods[0], EventOne.class);
-    }
-
-    public void observesEvent(@Observes EventTwo event){
-        triggerCalled(methods[0], EventOne.class);
-    }
-
-    protected void observesProtectedEvent(@Observes EventOne event){
-        triggerCalled(methods[1], EventOne.class);
-    }
-
-    protected void observesProtectedEvent(@Observes EventTwo event){
-        triggerCalled(methods[1], EventOne.class);
-    }
-
-    void observesPackagePrivateEvent(@Observes EventOne event){
-        triggerCalled(methods[2], EventOne.class);
-    }
-
-    void observesPackagePrivateEvent(@Observes EventTwo event){
-        triggerCalled(methods[2], EventOne.class);
-    }
-
-    @SuppressWarnings("unused")
-    private void observesPrivateEvent(@Observes EventOne event){
-        triggerCalled(methods[3], EventOne.class);
-    }
-
-    @SuppressWarnings("unused")
-    private void observesPrivateEvent(@Observes EventTwo event){
-        triggerCalled(methods[3], EventOne.class);
-    }
-
-    public void observesOverloadedEvent(EventOne event){
-        triggerCalled(methods[4], EventOne.class);
-    }
-
-    public void observesOverloadedEvent(EventTwo event){
-        triggerCalled(methods[4], EventTwo.class);
-    }
-
-    protected void observesOverloadedProtectedEvent(EventOne event){
-        triggerCalled(methods[5], EventOne.class);
-    }
-
-    protected void observesOverloadedProtectedEvent(EventTwo event){
-        triggerCalled(methods[5], EventTwo.class);
-    }
-
-    void observesOverloadedPackagePrivateEvent(EventOne event){
-        triggerCalled(methods[6], EventOne.class);
-    }
-
-    void observesOverloadedPackagePrivateEvent(EventTwo event){
-        triggerCalled(methods[6], EventTwo.class);
-    }
-
-    public void observesImplementedEvent(EventOne event){
-        triggerCalled(methods[7], EventOne.class);
-    }
-
-    public void observesImplementedEvent(EventTwo event){
-        triggerCalled(methods[7], EventTwo.class);
-    }
-
-    public static List<Method> getMethods(Class<?> eventClass) throws NoSuchMethodException {
-        List<Method> methodList = new ArrayList<Method>();
-
-        methodList.addAll(ContextObserverBase.getMethods(eventClass));
-
-        for(String method : ContextObserverTesterImpl.methods){
-            methodList.add(ContextObserverTesterImpl.class.getDeclaredMethod(method, eventClass));
-        }
-
-        return methodList;
-    }
-}
diff --git a/roboguice/src/test/java/roboguice/event/EventManagerTest.java b/roboguice/src/test/java/roboguice/event/EventManagerTest.java
deleted file mode 100644
index b5a76a821..000000000
--- a/roboguice/src/test/java/roboguice/event/EventManagerTest.java
+++ /dev/null
@@ -1,75 +0,0 @@
-package roboguice.event;
-
-import static org.mockito.Mockito.mock;
-
-import java.lang.reflect.Method;
-import java.util.List;
-
-import org.junit.Before;
-import org.junit.Test;
-
-import roboguice.event.eventListener.ObserverMethodListener;
-
-/**
- * Test class verifying eventManager functionality
- *
- * @author John Ericksen
- */
-public class EventManagerTest {
-
-    private EventManager eventManager;
-    private ContextObserverTesterImpl tester;
-    private List<Method> eventOneMethods;
-    private List<Method> eventTwoMethods;
-    private EventOne event;
-
-    @Before
-    public void setup() throws NoSuchMethodException {
-        eventManager = new EventManager();
-        tester = new ContextObserverTesterImpl();
-        eventOneMethods = ContextObserverTesterImpl.getMethods(EventOne.class);
-        eventTwoMethods = ContextObserverTesterImpl.getMethods(EventTwo.class);
-
-        event = new EventOne();
-    }
-
-    @Test
-    public void testRegistrationLifeCycle(){
-        for(Method method : eventOneMethods){
-            eventManager.registerObserver(EventOne.class, new ObserverMethodListener<EventOne>(tester, method));
-        }
-        for(Method method : eventTwoMethods){
-            eventManager.registerObserver(EventTwo.class, new ObserverMethodListener<EventTwo>(tester, method));
-        }
-
-        eventManager.fire(event);
-
-        tester.verifyCallCount(eventOneMethods, EventOne.class, 1);
-        tester.verifyCallCount(eventTwoMethods, EventTwo.class, 0);
-
-        //reset
-        tester.reset();
-
-        eventManager.unregisterObserver(tester, EventOne.class);
-        eventManager.unregisterObserver( tester, EventTwo.class);
-
-        eventManager.fire(event);
-
-        tester.verifyCallCount(eventOneMethods, EventOne.class, 0);
-        tester.verifyCallCount(eventTwoMethods, EventTwo.class, 0);
-    }
-
-    @Test
-    public void testShouldNotFailIfObserverIsRemovedInsideFire() throws Exception {
-        eventManager.registerObserver(EventOne.class, new EventListener<EventOne>() {
-            @Override
-            public void onEvent(EventOne event) {
-                // unregister self from manager
-                eventManager.unregisterObserver(EventOne.class, this);
-            }
-        });
-        eventManager.registerObserver(EventOne.class, mock(EventListener.class));
-
-        eventManager.fire(event);
-    }
-}
diff --git a/roboguice/src/test/java/roboguice/event/EventOne.java b/roboguice/src/test/java/roboguice/event/EventOne.java
deleted file mode 100644
index 0db91f43b..000000000
--- a/roboguice/src/test/java/roboguice/event/EventOne.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package roboguice.event;
-
-/**
- * Simple Test Event
- *
- * @author John Ericksen
- */
-public class EventOne {
-}
diff --git a/roboguice/src/test/java/roboguice/event/EventTwo.java b/roboguice/src/test/java/roboguice/event/EventTwo.java
deleted file mode 100644
index 6da3216df..000000000
--- a/roboguice/src/test/java/roboguice/event/EventTwo.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package roboguice.event;
-
-/**
- * Simple Test Event
- *
- * @author John Ericksen
- */
-public class EventTwo {
-}
diff --git a/roboguice/src/test/java/roboguice/event/ObserverReferenceTest.java b/roboguice/src/test/java/roboguice/event/ObserverReferenceTest.java
deleted file mode 100644
index ce1898682..000000000
--- a/roboguice/src/test/java/roboguice/event/ObserverReferenceTest.java
+++ /dev/null
@@ -1,121 +0,0 @@
-package roboguice.event;
-
-import static org.junit.Assert.assertEquals;
-
-import java.lang.reflect.Method;
-
-import org.junit.Before;
-import org.junit.Test;
-
-import roboguice.event.eventListener.ObserverMethodListener;
-
-/**
- * Test class exercising the ObserverReferences
- *
- * @author John Ericksen
- */
-public class ObserverReferenceTest {
-
-    protected EqualityTestClass test;
-    protected EqualityTestClass test2;
-    protected Method methodOneBase;
-    protected Method methodOne;
-    protected Method methodTwoBase;
-    protected Method methodTwo;
-
-
-    @Before
-    public void setup() throws NoSuchMethodException {
-        methodOne = EqualityTestClass.class.getDeclaredMethod("one", EventOne.class);
-        methodOneBase = EqualityTestOverrideClass.class.getDeclaredMethod("one", EventOne.class);
-        methodTwo = EqualityTestClass.class.getDeclaredMethod("two", EventTwo.class);
-        methodTwoBase = EqualityTestOverrideClass.class.getDeclaredMethod("two", EventTwo.class);
-
-        test =  new EqualityTestClass();
-        test2 = new EqualityTestClass();
-    }
-
-    @Test
-    public void testEquality() {
-
-        ObserverMethodListener<EqualityTestClass> observerRefOne = new ObserverMethodListener<EqualityTestClass>(test, methodOne);
-        ObserverMethodListener<EqualityTestClass> observerRefTwo = new ObserverMethodListener<EqualityTestClass>(test, methodOneBase);
-
-        assertEquals(observerRefOne, observerRefTwo);
-        assertEquals(observerRefOne.hashCode(), observerRefTwo.hashCode());
-    }
-
-    @Test
-    public void testEqualityOfSameGuts() {
-
-        ObserverMethodListener<EqualityTestClass> observerRefOne = new ObserverMethodListener<EqualityTestClass>(test, methodOne);
-        ObserverMethodListener<EqualityTestClass> observerRefTwo = new ObserverMethodListener<EqualityTestClass>(test, methodOne);
-
-        assertEquals(observerRefOne, observerRefTwo);
-        assertEquals(observerRefOne.hashCode(), observerRefTwo.hashCode());
-    }
-
-    @Test
-    public void testInequalityBetweenSameClass() {
-
-        ObserverMethodListener<EqualityTestClass> observerRefOne = new ObserverMethodListener<EqualityTestClass>(test, methodOne);
-        ObserverMethodListener<EqualityTestClass> observerRefTwo = new ObserverMethodListener<EqualityTestClass>(test, methodTwo);
-
-        assert !observerRefOne.equals(observerRefTwo) ;
-        assert !Integer.valueOf(observerRefOne.hashCode()).equals(observerRefTwo.hashCode());
-    }
-
-    @Test
-    public void testInequalityBetweenDifferentClass() {
-
-        ObserverMethodListener<EqualityTestClass> observerRefOne = new ObserverMethodListener<EqualityTestClass>(test, methodOne);
-        ObserverMethodListener<EqualityTestClass> observerRefTwo = new ObserverMethodListener<EqualityTestClass>(test, methodTwoBase);
-
-        assert !observerRefOne.equals(observerRefTwo) ;
-        assert !Integer.valueOf(observerRefOne.hashCode()).equals(observerRefTwo.hashCode());
-    }
-
-    @Test
-    public void testInequalityBetweenDifferentInstances() {
-
-        ObserverMethodListener<EqualityTestClass> observerRefOne = new ObserverMethodListener<EqualityTestClass>(test, methodOne);
-        ObserverMethodListener<EqualityTestClass> observerRefTwo = new ObserverMethodListener<EqualityTestClass>(test2, methodOne);
-
-        assert !observerRefOne.equals(observerRefTwo) ;
-        assert !Integer.valueOf(observerRefOne.hashCode()).equals(observerRefTwo.hashCode());
-    }
-
-    @Test
-    public void testInequalityBetweenDifferentInstancesAndDifferentMethods() {
-
-        ObserverMethodListener<EqualityTestClass> observerRefOne = new ObserverMethodListener<EqualityTestClass>(test, methodOne);
-        ObserverMethodListener<EqualityTestClass> observerRefTwo = new ObserverMethodListener<EqualityTestClass>(test2, methodTwoBase);
-
-        assert !observerRefOne.equals(observerRefTwo) ;
-        assert !Integer.valueOf(observerRefOne.hashCode()).equals(observerRefTwo.hashCode());
-    }
-
-    /*@Test
-    public void testEqualityBetweenDecoration() {
-
-        EventListener<EqualityTestClass> observerRefOne = new ObserverMethodListener<EqualityTestClass>(test, methodOne);
-        EventListener<EqualityTestClass> observerRefTwo = new AsynchronousEventListenerDecorator<EqualityTestClass>(
-                new ObserverMethodListener<EqualityTestClass>(test, methodOne), new RunnableAsyncTaskAdaptorFactory());
-
-        assert !observerRefOne.equals(observerRefTwo) ;
-        assert !Integer.valueOf(observerRefOne.hashCode()).equals(observerRefTwo.hashCode());
-    }*/
-
-    public class EqualityTestClass{
-
-        public void one(EventOne one){}
-
-        public void two(EventTwo two){}
-    }
-
-    public class EqualityTestOverrideClass extends EqualityTestClass{
-        public void one(EventOne one){}
-
-        public void two(EventTwo two){}
-    }
-}
diff --git a/roboguice/src/test/java/roboguice/event/ObservesTypeListenerTest.java b/roboguice/src/test/java/roboguice/event/ObservesTypeListenerTest.java
deleted file mode 100644
index 5a667c09d..000000000
--- a/roboguice/src/test/java/roboguice/event/ObservesTypeListenerTest.java
+++ /dev/null
@@ -1,67 +0,0 @@
-package roboguice.event;
-
-import java.lang.reflect.Method;
-import java.util.List;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-
-import roboguice.RoboGuice;
-
-import com.google.inject.Inject;
-import com.google.inject.Injector;
-
-import android.app.Activity;
-import android.content.Context;
-
-/**
- * @author John Ericksen
- */
-@RunWith(RobolectricTestRunner.class)
-public class ObservesTypeListenerTest {
-
-    protected EventManager eventManager;
-    protected Injector injector;
-    protected List<Method> eventOneMethods;
-    protected List<Method> eventTwoMethods;
-    protected Context context = new Activity();
-
-    @Before
-    public void setup() throws NoSuchMethodException {
-        injector = RoboGuice.getInjector(Robolectric.application);
-
-        eventManager = injector.getInstance(EventManager.class);
-
-        eventOneMethods = ContextObserverTesterImpl.getMethods(EventOne.class);
-        eventTwoMethods = ContextObserverTesterImpl.getMethods(EventTwo.class);
-    }
-
-    @Test
-    public void simulateInjection() {
-        final InjectedTestClass testClass = new InjectedTestClass();
-        injector.injectMembers(testClass);
-
-        eventManager.fire(new EventOne());
-
-        testClass.tester.verifyCallCount(eventOneMethods, EventOne.class, 1);
-        testClass.tester.verifyCallCount(eventTwoMethods, EventTwo.class, 0);
-    }
-
-    @Test(expected = RuntimeException.class)
-    public void invalidObservesMethodSignature(){
-        injector.getInstance(MalformedObserves.class);
-    }
-
-    public static class InjectedTestClass{
-        //CHECKSTYLE:OFF
-        @Inject protected ContextObserverTesterImpl tester;
-        //CHECKSTYLE:ON
-    }
-
-    public class MalformedObserves{
-        public void malformedObserves(int val, @Observes EventOne event){}
-    }
-}
diff --git a/roboguice/src/test/java/roboguice/event/eventListener/AsynchronousEventListenerDecoratorTest.java b/roboguice/src/test/java/roboguice/event/eventListener/AsynchronousEventListenerDecoratorTest.java
deleted file mode 100644
index 878e7257d..000000000
--- a/roboguice/src/test/java/roboguice/event/eventListener/AsynchronousEventListenerDecoratorTest.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package roboguice.event.eventListener;
-
-import static org.easymock.EasyMock.createMock;
-import static org.easymock.EasyMock.replay;
-import static org.easymock.EasyMock.reset;
-import static org.easymock.EasyMock.verify;
-
-import org.junit.Before;
-import org.junit.Test;
-
-import roboguice.event.EventListener;
-
-import android.os.Handler;
-
-/**
- * Tests for the AsynchronousEventListenerDecorator class
- *
- * @author John Ericksen
- */
-public class AsynchronousEventListenerDecoratorTest {
-
-    protected EventListener<Object> eventListener;
-    protected RunnableAsyncTaskAdaptor asyncTaskAdaptor;
-    protected AsynchronousEventListenerDecorator<Object> decorator;
-
-    @SuppressWarnings("unchecked")
-    @Before
-    public void setup(){
-        //noinspection unchecked
-        eventListener = createMock(EventListener.class);
-        asyncTaskAdaptor = createMock(RunnableAsyncTaskAdaptor.class);
-        decorator = new AsynchronousEventListenerDecorator<Object>(createMock(Handler.class),eventListener);
-    }
-
-    // Mike doesn't really understand what this test is doing
-    @SuppressWarnings("deprecation")
-    @Test
-    public void onEventTest(){
-        reset(eventListener);
-
-        asyncTaskAdaptor.execute();
-
-        replay(eventListener);
-
-        decorator.onEvent( new Object() );
-
-        verify(eventListener);
-    }
-}
diff --git a/roboguice/src/test/java/roboguice/event/eventListener/EventListenerRunnableTest.java b/roboguice/src/test/java/roboguice/event/eventListener/EventListenerRunnableTest.java
deleted file mode 100644
index e795caead..000000000
--- a/roboguice/src/test/java/roboguice/event/eventListener/EventListenerRunnableTest.java
+++ /dev/null
@@ -1,49 +0,0 @@
-package roboguice.event.eventListener;
-
-import static org.easymock.EasyMock.createMock;
-import static org.easymock.EasyMock.replay;
-import static org.easymock.EasyMock.reset;
-import static org.easymock.EasyMock.verify;
-
-import org.junit.Before;
-import org.junit.Test;
-
-import roboguice.event.EventListener;
-import roboguice.event.EventOne;
-
-/**
- * Tests for the EventListenerRunnable class
- *
- * @author John Ericksen
- */
-public class EventListenerRunnableTest {
-
-    protected EventOne event;
-    protected EventListener<EventOne> eventListener;
-
-    @SuppressWarnings("rawtypes")
-    protected EventListenerRunnable eventListenerRunnable;
-
-    @SuppressWarnings("unchecked")
-    @Before
-    public void setup(){
-        //noinspection unchecked
-        eventListener = createMock(EventListener.class);
-        event = new EventOne();
-
-        eventListenerRunnable = new EventListenerRunnable<EventOne>(event, eventListener);
-    }
-
-    @Test
-    public void runTest(){
-        reset(eventListener);
-
-        eventListener.onEvent(event);
-
-        replay(eventListener);
-
-        eventListenerRunnable.run();
-
-        verify(eventListener);
-    }
-}
diff --git a/roboguice/src/test/java/roboguice/event/eventListener/EventListenerThreadingDecoratorTest.java b/roboguice/src/test/java/roboguice/event/eventListener/EventListenerThreadingDecoratorTest.java
deleted file mode 100644
index df1d19499..000000000
--- a/roboguice/src/test/java/roboguice/event/eventListener/EventListenerThreadingDecoratorTest.java
+++ /dev/null
@@ -1,69 +0,0 @@
-package roboguice.event.eventListener;
-
-import static org.easymock.EasyMock.createMock;
-import static org.junit.Assert.assertEquals;
-
-import org.junit.Before;
-import org.junit.Test;
-
-import roboguice.event.EventListener;
-import roboguice.event.EventThread;
-import roboguice.event.eventListener.factory.EventListenerThreadingDecorator;
-
-import com.google.inject.AbstractModule;
-import com.google.inject.Guice;
-import com.google.inject.Injector;
-import com.google.inject.Module;
-
-import android.os.Handler;
-
-/**
- * Tests for the EventListenerThreadingDecorator class
- *
- * @author John Ericksen
- */
-public class EventListenerThreadingDecoratorTest {
-
-    protected EventListenerThreadingDecorator eventListenerDecorator;
-    protected EventListener<Void> eventListener;
-
-    @SuppressWarnings("unchecked")
-    @Before
-    public void setup(){
-
-        //noinspection unchecked
-        eventListener = createMock(EventListener.class);
-
-
-        final Module testFactoryModule = new AbstractModule() {
-            public void configure() {
-                bind(Handler.class).toInstance(createMock(Handler.class));
-            }
-        };
-
-        final Injector injector = Guice.createInjector(testFactoryModule);
-
-        eventListenerDecorator = injector.getInstance(EventListenerThreadingDecorator.class);
-    }
-
-    @SuppressWarnings("rawtypes")
-    @Test
-    public void buildCurrentThreadObserverTest(){
-        final EventListener outputListener = eventListenerDecorator.decorate(EventThread.CURRENT, eventListener);
-        assertEquals(eventListener, outputListener);
-    }
-
-    @SuppressWarnings("rawtypes")
-    @Test
-    public void buildUIThreadObserverTest(){
-        final EventListener outputListener = eventListenerDecorator.decorate(EventThread.UI, eventListener);
-        assertEquals( eventListener, ((UIThreadEventListenerDecorator)outputListener).eventListener);
-    }
-
-    @SuppressWarnings("rawtypes")
-    @Test
-    public void buildAsyncThreadObserverTest(){
-        final EventListener outputListener = eventListenerDecorator.decorate(EventThread.BACKGROUND, eventListener);
-        assertEquals( eventListener, ((AsynchronousEventListenerDecorator)outputListener).eventListener);
-    }
-}
diff --git a/roboguice/src/test/java/roboguice/event/eventListener/RunnableAsyncTaskAdaptorTest.java b/roboguice/src/test/java/roboguice/event/eventListener/RunnableAsyncTaskAdaptorTest.java
deleted file mode 100644
index 55a6c103c..000000000
--- a/roboguice/src/test/java/roboguice/event/eventListener/RunnableAsyncTaskAdaptorTest.java
+++ /dev/null
@@ -1,43 +0,0 @@
-package roboguice.event.eventListener;
-
-import static org.easymock.EasyMock.createMock;
-import static org.easymock.EasyMock.replay;
-import static org.easymock.EasyMock.reset;
-import static org.easymock.EasyMock.verify;
-
-import org.junit.Before;
-import org.junit.Test;
-
-/**
- * Tests for the RunnableAsyncTaskAdaptor class
- *
- * @author John Ericksen
- */
-public class RunnableAsyncTaskAdaptorTest {
-
-    @SuppressWarnings("rawtypes")
-    protected EventListenerRunnable runnable;
-
-    protected RunnableAsyncTaskAdaptor runnableAdaptor;
-
-    @Before
-    public void setup(){
-        runnable = createMock(EventListenerRunnable.class);
-
-        runnableAdaptor = new RunnableAsyncTaskAdaptor(runnable);
-    }
-
-    @Test
-    public void test() throws Exception {
-        reset(runnable);
-
-        runnable.run();
-
-        replay(runnable);
-
-        runnableAdaptor.call();
-
-        verify(runnable);
-    }
-
-}
diff --git a/roboguice/src/test/java/roboguice/fragment/FragmentInjectionTest.java b/roboguice/src/test/java/roboguice/fragment/FragmentInjectionTest.java
deleted file mode 100644
index a35e3ae02..000000000
--- a/roboguice/src/test/java/roboguice/fragment/FragmentInjectionTest.java
+++ /dev/null
@@ -1,217 +0,0 @@
-package roboguice.fragment;
-
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertThat;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.util.ActivityController;
-
-import roboguice.activity.RoboFragmentActivity;
-import roboguice.inject.InjectView;
-
-import com.google.inject.Inject;
-
-import android.content.Context;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.support.v4.app.FragmentActivity;
-import android.support.v4.app.FragmentManager;
-import android.support.v4.app.FragmentTransaction;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.FrameLayout;
-
-@RunWith(RobolectricTestRunner.class)
-public class FragmentInjectionTest {
-
-    // http://stackoverflow.com/questions/11333354/how-can-i-test-fragments-with-robolectric
-    protected static void startFragment( FragmentActivity activity, Fragment fragment ) {
-        final FragmentManager fragmentManager = activity.getSupportFragmentManager();
-        final FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();
-        fragmentTransaction.add(fragment, null);
-        fragmentTransaction.commit();
-
-    }
-
-
-    @Test
-    public void shouldInjectPojosAndViewsIntoFragments() {
-        final ActivityA activityA = Robolectric.buildActivity(ActivityA.class).create().start().resume().get();
-
-        assertNotNull(activityA.fragmentRef.ref);
-        assertThat(activityA.fragmentRef.v, equalTo(activityA.fragmentRef.ref));
-        assertThat(activityA.fragmentRef.context,equalTo((Context)activityA));
-    }
-
-
-    @Test
-    public void shouldBeAbleToInjectViewsIntoActivityAndFragment() {
-        final ActivityB activityB = Robolectric.buildActivity(ActivityB.class).create().start().resume().get();
-
-        assertNotNull(activityB.fragmentRef.viewRef);
-        assertNotNull(activityB.viewRef);
-        assertThat(activityB.fragmentRef.v, equalTo(activityB.fragmentRef.viewRef));
-        assertThat(activityB.v, equalTo(activityB.viewRef));
-    }
-
-
-    @Test(expected = NullPointerException.class)
-    public void shouldNotBeAbleToInjectFragmentViewsIntoActivity() {
-        Robolectric.buildActivity(ActivityC.class).create().start().resume().get();
-    }
-
-
-    @Test
-    public void shouldNotCrashWhenRotatingScreen() {
-        final ActivityController<ActivityD> activityD1Controller = Robolectric.buildActivity(ActivityD.class).create().resume();
-        final ActivityD activityD1 = activityD1Controller.get();
-
-        final ActivityController<ActivityD> activityD2Controller = Robolectric.buildActivity(ActivityD.class);
-        final ActivityD activityD2 = activityD2Controller.get();
-
-        assertNotNull(activityD1.fragmentRef.ref);
-        assertThat(activityD1.fragmentRef.v, equalTo(activityD1.fragmentRef.ref));
-
-        activityD1Controller.pause();
-
-        activityD2Controller.create().resume();
-
-        assertNotNull(activityD2.fragmentRef.ref);
-        assertThat(activityD2.fragmentRef.v, equalTo(activityD2.fragmentRef.ref));
-    }
-
-
-
-    public static class ActivityA extends RoboFragmentActivity {
-        FragmentA fragmentRef;
-
-        @Override
-        protected void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-
-//            fragmentRef = new FragmentA();
-//            fragmentRef.onAttach(this);
-//            fragmentRef.onCreate(null);
-            fragmentRef = new FragmentA();
-            startFragment(this, fragmentRef);
-
-        }
-
-        public static class FragmentA extends RoboFragment {
-            @InjectView(101) View v;
-            @Inject Context context;
-
-            View ref;
-
-            @Override
-            public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-                ref = new View(getActivity());
-                ref.setId(101);
-                return ref;
-            }
-        }
-
-    }
-
-
-    public static class ActivityB extends RoboFragmentActivity {
-        @InjectView(100) View v;
-
-        View viewRef;
-        FragmentB fragmentRef;
-
-        @Override
-        protected void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-
-            viewRef =  new View(this);
-            viewRef.setId(100);
-            setContentView(viewRef);
-
-            fragmentRef = new FragmentB();
-            startFragment(this, fragmentRef);
-        }
-
-        public static class FragmentB extends RoboFragment {
-            @InjectView(101) View v;
-
-            View viewRef;
-
-            @Override
-            public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-                viewRef = new View(getActivity());
-                viewRef.setId(101);
-                return viewRef;
-            }
-        }
-
-    }
-
-    public static class ActivityC extends RoboFragmentActivity {
-        @InjectView(101) View v;
-
-        View viewRef;
-        FragmentC fragmentRef;
-
-        @Override
-        protected void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-            setContentView( new View(this) );
-
-            fragmentRef = new FragmentC();
-            startFragment(this, fragmentRef);
-        }
-
-        public static class FragmentC extends RoboFragment {
-            @InjectView(101) View v;
-
-            View viewRef;
-
-            @Override
-            public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-                viewRef = new View(getActivity());
-                viewRef.setId(101);
-                return viewRef;
-            }
-        }
-
-    }
-
-
-
-    public static class ActivityD extends RoboFragmentActivity {
-        FragmentD fragmentRef;
-
-        @Override
-        protected void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-
-            fragmentRef = new FragmentD();
-            startFragment(this,fragmentRef);
-
-
-            setContentView(new FrameLayout(this));
-            
-        }
-
-        public static class FragmentD extends RoboFragment {
-            @InjectView(101) View v;
-
-            View ref;
-
-            @Override
-            public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-                ref = new View(getActivity());
-                ref.setId(101);
-                return ref;
-            }
-        }
-
-    }
-
-}
diff --git a/roboguice/src/test/java/roboguice/fragment/provided/FragmentInjectionTest.java b/roboguice/src/test/java/roboguice/fragment/provided/FragmentInjectionTest.java
deleted file mode 100644
index 56723dca6..000000000
--- a/roboguice/src/test/java/roboguice/fragment/provided/FragmentInjectionTest.java
+++ /dev/null
@@ -1,245 +0,0 @@
-package roboguice.fragment.provided;
-
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertThat;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.annotation.Config;
-import org.robolectric.util.ActivityController;
-
-import roboguice.activity.RoboActivity;
-import roboguice.inject.InjectView;
-
-import com.google.inject.Inject;
-
-import android.app.Activity;
-import android.content.Context;
-import android.os.Bundle;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.FrameLayout;
-
-@RunWith(RobolectricTestRunner.class)
-@Config(shadows= {roboguice.fragment.provided.shadow.ShadowNativeFragment.class, roboguice.fragment.provided.shadow.ShadowNativeFragmentActivity.class})
-public class FragmentInjectionTest {
-
-	@Test
-    public void shadowActivityGetApplicationContextShouldNotReturnNull() {
-        assertNotNull(new Activity().getApplicationContext());
-    }
-	
-    @Test
-    public void shouldInjectPojosAndViewsIntoFragments() {
-        final ActivityA activity = Robolectric.buildActivity(ActivityA.class).create().start().resume().get();
-        activity.fragmentRef.onViewCreated(activity.fragmentRef.onCreateView(null,null,null), null);
-
-        assertNotNull(activity.fragmentRef.ref);
-        assertThat(activity.fragmentRef.v, equalTo(activity.fragmentRef.ref));
-        assertThat(activity.fragmentRef.context,equalTo((Context)activity));
-    }
-
-
-    @Test
-    public void shouldBeAbleToInjectViewsIntoActivityAndFragment() {
-        final ActivityB activity = Robolectric.buildActivity(ActivityB.class).create().get();
-        activity.fragmentRef.onViewCreated(activity.fragmentRef.onCreateView(null,null,null), null);
-
-        assertNotNull(activity.fragmentRef.viewRef);
-        assertNotNull(activity.viewRef);
-        assertThat(activity.fragmentRef.v, equalTo(activity.fragmentRef.viewRef));
-        assertThat(activity.v, equalTo(activity.viewRef));
-    }
-
-
-    @Test(expected = NullPointerException.class)
-    public void shouldNotBeAbleToInjectFragmentViewsIntoActivity() {
-        final ActivityC activity = new ActivityC();
-        activity.onCreate(null);
-        activity.fragmentRef.onViewCreated(activity.fragmentRef.onCreateView(null,null,null), null);
-    }
-
-
-    @Test
-    public void shouldNotCrashWhenRotatingScreen() {
-        final ActivityController<ActivityD> activityD1Controller = Robolectric.buildActivity(ActivityD.class).create().resume();
-        final ActivityD activity1 = activityD1Controller.get();
-
-        final ActivityController<ActivityD> activityD2Controller = Robolectric.buildActivity(ActivityD.class);
-        final ActivityD activity2 = activityD2Controller.get();
-
-        activity1.fragmentRef.onViewCreated(activity1.fragmentRef.onCreateView(null,null,null), null);
-
-        assertNotNull(activity1.fragmentRef.ref);
-        assertThat(activity1.fragmentRef.v, equalTo(activity1.fragmentRef.ref));
-
-        activityD1Controller.pause();
-        activityD2Controller.create().resume();
-
-        activity2.fragmentRef.onViewCreated(activity2.fragmentRef.onCreateView(null,null,null), null);
-
-        assertNotNull(activity2.fragmentRef.ref);
-        assertThat(activity2.fragmentRef.v, equalTo(activity2.fragmentRef.ref));
-    }
-
-
-
-    public static class ActivityA extends RoboActivity {
-        FragmentA fragmentRef;
-
-        @Override
-        protected void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-
-            fragmentRef = new FragmentA();
-            fragmentRef.onAttach(this);
-            fragmentRef.onCreate(null);
-
-        }
-
-        public static class FragmentA extends RoboFragment {
-            @InjectView(101) View v;
-            @Inject Context context;
-
-            View ref;
-
-            @Override
-            public void onCreate(Bundle savedInstanceState) {
-                super.onCreate(savedInstanceState);
-            }
-            
-            @Override
-            public void onViewCreated(View view, Bundle savedInstanceState) {
-                super.onViewCreated(view, savedInstanceState);
-            }
-            @Override
-            public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-                ref = new View(getActivity());
-                ref.setId(101);
-                return ref;
-            }
-        }
-
-    }
-
-
-    public static class ActivityB extends RoboActivity {
-        @InjectView(100) View v;
-
-        View viewRef;
-        FragmentB fragmentRef;
-
-        @Override
-        protected void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-
-            viewRef =  new View(this);
-            viewRef.setId(100);
-            setContentView(viewRef);
-
-            fragmentRef = new FragmentB();
-            fragmentRef.onAttach(this);
-            fragmentRef.onCreate(null);
-
-        }
-
-        public static class FragmentB extends RoboFragment {
-            @InjectView(101) View v;
-
-            View viewRef;
-
-            @Override
-            public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-                viewRef = new View(getActivity());
-                viewRef.setId(101);
-                return viewRef;
-            }
-        }
-
-    }
-
-    public static class ActivityC extends RoboActivity {
-        @InjectView(101) View v;
-
-        View viewRef;
-        FragmentC fragmentRef;
-
-        @Override
-        protected void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-            setContentView( new View(this) );
-
-
-            fragmentRef = new FragmentC();
-            fragmentRef.onAttach(this);
-            fragmentRef.onCreate(null);
-
-        }
-
-        public static class FragmentC extends RoboFragment {
-            @InjectView(101) View v;
-
-            View viewRef;
-
-            @Override
-            public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-                viewRef = new View(getActivity());
-                viewRef.setId(101);
-                return viewRef;
-            }
-        }
-
-    }
-
-
-
-    public static class ActivityD extends RoboActivity {
-        FragmentD fragmentRef;
-
-        @Override
-        protected void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-
-            fragmentRef = new FragmentD();
-            fragmentRef.onAttach(this);
-            fragmentRef.onCreate(null);
-
-            setContentView(new FrameLayout(this));
-            
-        }
-
-        @Override
-        protected void onPause() {
-            super.onPause();
-        }
-
-        @Override
-        protected void onResume() {
-            super.onResume();
-        }
-
-        public static class FragmentD extends RoboFragment {
-            @InjectView(101) View v;
-
-            View ref;
-
-            @Override
-            public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-                ref = new View(getActivity());
-                ref.setId(101);
-                return ref;
-            }
-
-            @Override
-            public void onCreate(Bundle savedInstanceState) {
-                super.onCreate(savedInstanceState);
-            }
-        }
-
-    }
-
-}
diff --git a/roboguice/src/test/java/roboguice/fragment/provided/shadow/ShadowNativeFragment.java b/roboguice/src/test/java/roboguice/fragment/provided/shadow/ShadowNativeFragment.java
deleted file mode 100644
index 8913d15e3..000000000
--- a/roboguice/src/test/java/roboguice/fragment/provided/shadow/ShadowNativeFragment.java
+++ /dev/null
@@ -1,34 +0,0 @@
-package roboguice.fragment.provided.shadow;
-
-import org.robolectric.annotation.*;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.app.Fragment;
-import android.view.View;
-
-@Implements(Fragment.class)
-public class ShadowNativeFragment {
-    protected Activity activity;
-    protected View view;
-
-    @Implementation
-    public Activity getActivity() {
-        return activity;
-    }
-
-    @Implementation
-    public View getView() {
-        return view;
-    }
-
-    @Implementation
-    public void onViewCreated( View v, Bundle savedInstanceState ) {
-        view = v;
-    }
-
-    @Implementation
-    public void onAttach( Activity a ) {
-        activity = a;
-    }
-}
diff --git a/roboguice/src/test/java/roboguice/fragment/provided/shadow/ShadowNativeFragmentActivity.java b/roboguice/src/test/java/roboguice/fragment/provided/shadow/ShadowNativeFragmentActivity.java
deleted file mode 100644
index 6319f47ff..000000000
--- a/roboguice/src/test/java/roboguice/fragment/provided/shadow/ShadowNativeFragmentActivity.java
+++ /dev/null
@@ -1,231 +0,0 @@
-package roboguice.fragment.provided.shadow;
-
-import java.io.FileDescriptor;
-import java.io.PrintWriter;
-
-import org.robolectric.annotation.Implementation;
-import org.robolectric.annotation.Implements;
-import org.robolectric.shadows.ShadowActivity;
-
-import android.app.Activity;
-import android.app.Fragment;
-import android.app.Fragment.SavedState;
-import android.app.FragmentManager;
-import android.app.FragmentTransaction;
-import android.os.Bundle;
-
-
-@Implements(Activity.class)
-public class ShadowNativeFragmentActivity extends ShadowActivity {
-
-    @Implementation
-    public FragmentManager getFragmentManager() {
-        return new FragmentManager() {
-            @Override
-            public void addOnBackStackChangedListener(OnBackStackChangedListener onBackStackChangedListener) {
-            }
-
-            @Override
-            public FragmentTransaction beginTransaction() {
-                return new FragmentTransaction() {
-                    @Override
-                    public FragmentTransaction add(Fragment fragment, String s) {
-                        return null;
-                    }
-
-                    @Override
-                    public FragmentTransaction add(int i, Fragment fragment) {
-                        return null;
-                    }
-
-                    @Override
-                    public FragmentTransaction add(int i, Fragment fragment, String s) {
-                        return null;
-                    }
-
-                    @Override
-                    public FragmentTransaction replace(int i, Fragment fragment) {
-                        return null;
-                    }
-
-                    @Override
-                    public FragmentTransaction replace(int i, Fragment fragment, String s) {
-                        return null;
-                    }
-
-                    @Override
-                    public FragmentTransaction remove(Fragment fragment) {
-                        return null;
-                    }
-
-                    @Override
-                    public FragmentTransaction hide(Fragment fragment) {
-                        return null;
-                    }
-
-                    @Override
-                    public FragmentTransaction show(Fragment fragment) {
-                        return null;
-                    }
-
-                    @Override
-                    public FragmentTransaction detach(Fragment fragment) {
-                        return null;
-                    }
-
-                    @Override
-                    public FragmentTransaction attach(Fragment fragment) {
-                        return null;
-                    }
-
-                    @Override
-                    public boolean isEmpty() {
-                        return false;
-                    }
-
-                    @Override
-                    public FragmentTransaction setCustomAnimations(int i, int i1) {
-                        return null;
-                    }
-
-                    @Override
-                    public FragmentTransaction setTransition(int i) {
-                        return null;
-                    }
-
-                    @Override
-                    public FragmentTransaction setTransitionStyle(int i) {
-                        return null;
-                    }
-
-                    @Override
-                    public FragmentTransaction addToBackStack(String s) {
-                        return null;
-                    }
-
-                    @Override
-                    public boolean isAddToBackStackAllowed() {
-                        return false;
-                    }
-
-                    @Override
-                    public FragmentTransaction disallowAddToBackStack() {
-                        return null;
-                    }
-
-                    @Override
-                    public FragmentTransaction setBreadCrumbTitle(int i) {
-                        return null;
-                    }
-
-                    @Override
-                    public FragmentTransaction setBreadCrumbTitle(CharSequence charSequence) {
-                        return null;
-                    }
-
-                    @Override
-                    public FragmentTransaction setBreadCrumbShortTitle(int i) {
-                        return null;
-                    }
-
-                    @Override
-                    public FragmentTransaction setBreadCrumbShortTitle(CharSequence charSequence) {
-                        return null;
-                    }
-
-                    @Override
-                    public int commit() {
-                        return 0;
-                    }
-
-                    @Override
-                    public int commitAllowingStateLoss() {
-                        return 0;
-                    }
-
-                    @Override
-                    public FragmentTransaction setCustomAnimations(int i, int i1, int i2, int i3) {
-                        return this;
-                    }
-                };
-            }
-
-            @Override
-            public boolean executePendingTransactions() {
-                return false;
-            }
-
-            @Override
-            public Fragment findFragmentById(int i) {
-                return null;
-            }
-
-            @Override
-            public Fragment findFragmentByTag(String s) {
-                return null;
-            }
-
-            @Override
-            public void popBackStack() {
-            }
-
-            @Override
-            public boolean popBackStackImmediate() {
-                return false;
-            }
-
-            @Override
-            public void popBackStack(String s, int i) {
-            }
-
-            @Override
-            public boolean popBackStackImmediate(String s, int i) {
-                return false;
-            }
-
-            @Override
-            public void popBackStack(int i, int i1) {
-            }
-
-            @Override
-            public boolean popBackStackImmediate(int i, int i1) {
-                return false;
-            }
-
-            @Override
-            public int getBackStackEntryCount() {
-                return 0;
-            }
-
-            @Override
-            public BackStackEntry getBackStackEntryAt(int i) {
-                return null;
-            }
-
-            @Override
-            public void removeOnBackStackChangedListener(OnBackStackChangedListener onBackStackChangedListener) {
-            }
-
-            @Override
-            public void putFragment(Bundle bundle, String s, Fragment fragment) {
-            }
-
-            @Override
-            public Fragment getFragment(Bundle bundle, String s) {
-                return null;
-            }
-
-            @Override
-            public SavedState saveFragmentInstanceState(Fragment fragment) {
-                return null;
-            }
-
-            @Override
-            public void dump(String s, FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strings) {
-            }
-
-        };
-    }
-
-
-}
diff --git a/roboguice/src/test/java/roboguice/inject/ContextScopeTest.java b/roboguice/src/test/java/roboguice/inject/ContextScopeTest.java
deleted file mode 100644
index 2903ecb5d..000000000
--- a/roboguice/src/test/java/roboguice/inject/ContextScopeTest.java
+++ /dev/null
@@ -1,101 +0,0 @@
-package roboguice.inject;
-
-import static org.junit.Assert.assertTrue;
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.junit.Assert.assertThat;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.util.ActivityController;
-
-import roboguice.RoboGuice;
-import roboguice.activity.RoboActivity;
-
-import com.google.inject.Inject;
-import com.google.inject.Key;
-import com.google.inject.Singleton;
-
-import android.app.Activity;
-
-@RunWith(RobolectricTestRunner.class)
-public class ContextScopeTest {
-
-
-    @Test
-    public void shouldHaveContextInScopeMapAfterOnCreate() throws Exception {
-        final ActivityController<A> aController = Robolectric.buildActivity(A.class);
-        final A a = aController.get();
-
-        assertThat(a.getScopedObjectMap().size(), equalTo(0));
-        aController.create();
-
-        boolean found=false;
-        for( Object o : a.getScopedObjectMap().values() )
-            if( o==a )
-                found = true;
-
-        assertTrue("Couldn't find context in scope map", found);
-    }
-
-    @Test
-    public void shouldBeAbleToOpenMultipleScopes() {
-        final ContextScope scope = RoboGuice.getBaseApplicationInjector(Robolectric.application).getInstance(ContextScope.class);
-        final Activity a = Robolectric.buildActivity(A.class).get();
-        final Activity b = Robolectric.buildActivity(B.class).get();
-
-        scope.enter(a);
-        scope.enter(b);
-        scope.exit(b);
-        scope.exit(a);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void shouldNotBeAbleToExitTheWrongScope() {
-        final ContextScope scope = RoboGuice.getBaseApplicationInjector(Robolectric.application).getInstance(ContextScope.class);
-        final Activity a = Robolectric.buildActivity(A.class).get();
-        final Activity b = Robolectric.buildActivity(B.class).get();
-
-        scope.enter(a);
-        scope.enter(b);
-        scope.exit(a);
-    }
-
-    @Test
-    public void shouldHaveTwoItemsInScopeMapAfterOnCreate() throws Exception {
-        final ActivityController<B> bController = Robolectric.buildActivity(B.class);
-        final B b = bController.get();
-
-        assertThat(b.getScopedObjectMap().size(), equalTo(0));
-        bController.create();
-
-        boolean found=false;
-        for( Object o : b.getScopedObjectMap().values() )
-            if( o==b )
-                found = true;
-
-        assertTrue("Couldn't find context in scope map", found);
-        assertTrue(b.getScopedObjectMap().containsKey(Key.get(C.class)));
-    }
-
-    public static class A extends RoboActivity {
-    }
-
-    public static class B extends RoboActivity {
-        @Inject C c; // context scoped
-        @Inject D d; // unscoped
-        @Inject E e; // singleton
-
-    }
-
-    @ContextSingleton
-    public static class C {}
-
-    public static class D {}
-
-    @Singleton
-    public static class E {}
-
-
-}
diff --git a/roboguice/src/test/java/roboguice/inject/ExtrasListenerTest.java b/roboguice/src/test/java/roboguice/inject/ExtrasListenerTest.java
deleted file mode 100644
index 183808158..000000000
--- a/roboguice/src/test/java/roboguice/inject/ExtrasListenerTest.java
+++ /dev/null
@@ -1,60 +0,0 @@
-package roboguice.inject;
-
-import static org.hamcrest.core.IsEqual.equalTo;
-import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-
-import roboguice.activity.RoboActivity;
-import roboguice.service.RoboService;
-
-import android.content.Intent;
-import android.os.IBinder;
-
-@RunWith(RobolectricTestRunner.class)
-public class ExtrasListenerTest {
-
-    @Test
-    public void shouldInjectActivity() {
-        final MyRoboActivity a1 = Robolectric.buildActivity(MyRoboActivity.class).create().get();
-        assertThat(a1.foo, equalTo(10));
-    }
-
-    @Test
-    public void shouldInjectService() {
-        final MyRoboService s1 = new MyRoboService();
-        try {
-            s1.onCreate();
-            fail();
-        } catch( Exception e ) {
-            // great
-            assertTrue(true);
-        }
-
-    }
-
-    protected static class MyRoboActivity extends RoboActivity {
-        @InjectExtra("foo") protected int foo;
-
-        @Override
-        public Intent getIntent() {
-            return new Intent(this,RoboActivity.class).putExtra("foo", 10);
-        }
-    }
-
-    protected static class MyRoboService extends RoboService {
-        @InjectExtra("foo") protected int foo;
-
-        @Override
-        public IBinder onBind(Intent intent) {
-            return null;
-        }
-
-        
-    }
-}
diff --git a/roboguice/src/test/java/roboguice/inject/NullableTest.java b/roboguice/src/test/java/roboguice/inject/NullableTest.java
deleted file mode 100644
index 7e76abbb9..000000000
--- a/roboguice/src/test/java/roboguice/inject/NullableTest.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package roboguice.inject;
-
-import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertThat;
-
-import javax.annotation.Nullable;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-@RunWith(RobolectricTestRunner.class)
-public class NullableTest {
-
-    @Test
-    public void shouldRejectNullFields() throws Exception {
-        assertThat(roboguice.inject.Nullable.isNullable(DummyClass.class.getDeclaredField("notNullable")), is(false));
-    }
-
-    @Test
-    public void shouldAcceptNonNullFields() throws Exception {
-        assertThat(roboguice.inject.Nullable.isNullable(DummyClass.class.getDeclaredField("nullable")), is(true));
-    }
-
-
-    public static class DummyClass {
-        protected Object notNullable;
-        @Nullable protected Object nullable;
-    }
-}
diff --git a/roboguice/src/test/java/roboguice/inject/ProviderTest.java b/roboguice/src/test/java/roboguice/inject/ProviderTest.java
deleted file mode 100644
index ca4e11f9c..000000000
--- a/roboguice/src/test/java/roboguice/inject/ProviderTest.java
+++ /dev/null
@@ -1,83 +0,0 @@
-package roboguice.inject;
-
-import static org.hamcrest.core.IsEqual.equalTo;
-import static org.junit.Assert.assertThat;
-
-import java.util.concurrent.Callable;
-import java.util.concurrent.Executors;
-import java.util.concurrent.FutureTask;
-
-import javax.inject.Inject;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-
-import roboguice.activity.RoboActivity;
-
-import android.content.Context;
-import android.os.Bundle;
-
-@RunWith(RobolectricTestRunner.class)
-public class ProviderTest {
-
-    @Test(expected = AssertionError.class)
-    public void shouldNotReturnProperContext() throws Exception {
-        final A a = Robolectric.buildActivity(A.class).create().get();
-        final B b = Robolectric.buildActivity(B.class).create().get();
-        final FutureTask<Context> future = new FutureTask<Context>(new Callable<Context>() {
-            @Override
-            public Context call() throws Exception {
-                return a.contextProvider.get(b);
-            }
-        });
-        Executors.newSingleThreadExecutor().execute(future);
-
-        assertThat(future.get(), equalTo((Context)a));
-    }
-
-    @Test
-    public void shouldReturnProperContext() throws Exception {
-        @SuppressWarnings("unused")
-        //noinspection UnusedDeclaration
-        final B b = Robolectric.buildActivity(B.class).create().get();
-
-        final C c = Robolectric.buildActivity(C.class).create().get();
-        final FutureTask<Context> future = new FutureTask<Context>(new Callable<Context>() {
-            @Override
-            public Context call() throws Exception {
-                return c.contextProvider.get(c);
-            }
-        });
-        Executors.newSingleThreadExecutor().execute(future);
-
-        assertThat(future.get(), equalTo((Context)c));
-    }
-
-
-    public static class A extends RoboActivity {
-        @Inject ContextScopedProvider<Context> contextProvider;
-
-        @Override
-        protected void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-        }
-    }
-
-    public static class B extends RoboActivity {
-        @Override
-        protected void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-        }
-    }
-
-    public static class C extends RoboActivity {
-        @Inject ContextScopedProvider<Context> contextProvider;
-
-        @Override
-        protected void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-        }
-    }
-}
diff --git a/roboguice/src/test/java/roboguice/inject/ResourceListenerTest.java b/roboguice/src/test/java/roboguice/inject/ResourceListenerTest.java
deleted file mode 100644
index 229e379a3..000000000
--- a/roboguice/src/test/java/roboguice/inject/ResourceListenerTest.java
+++ /dev/null
@@ -1,55 +0,0 @@
-package roboguice.inject;
-
-import static org.junit.Assert.assertEquals;
-
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import roboguice.activity.RoboActivity;
-
-import android.os.Bundle;
-
-@RunWith(RobolectricTestRunner.class)
-public class ResourceListenerTest {
-
-    @Ignore("Need to configure roboguice build to use maven android plugin for tests at least so it can access resources")
-    @Test
-    public void shouldInjectResources() {
-        final A a = new A();
-        a.onCreate(null);
-
-        assertEquals("Cancel", a.cancel1);
-        assertEquals("Cancel", a.cancel2);
-    }
-
-    @Ignore("Need to configure roboguice build to use maven android plugin for tests at least so it can access resources")
-    @Test
-    public void shouldInjectStaticResources() {
-        new B().onCreate(null);
-
-        assertEquals("Cancel", B.cancel);
-    }
-
-
-    public static class A extends RoboActivity {
-        @InjectResource(android.R.string.cancel) protected String cancel1;
-        @InjectResource(name="org.roboguice:string/cancel") protected String cancel2;
-
-        @Override
-        protected void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-        }
-    }
-
-
-    public static class B extends RoboActivity {
-        @InjectResource(android.R.string.cancel) protected static String cancel;
-
-        @Override
-        protected void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-        }
-    }
-}
diff --git a/roboguice/src/test/java/roboguice/inject/SharedPreferencesProviderTest.java b/roboguice/src/test/java/roboguice/inject/SharedPreferencesProviderTest.java
deleted file mode 100644
index 05b10cc35..000000000
--- a/roboguice/src/test/java/roboguice/inject/SharedPreferencesProviderTest.java
+++ /dev/null
@@ -1,116 +0,0 @@
-package roboguice.inject;
-
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertTrue;
-
-import java.io.File;
-import java.lang.reflect.Field;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.tester.android.content.TestSharedPreferences;
-
-import roboguice.RoboGuice;
-import roboguice.activity.RoboActivity;
-import roboguice.util.Strings;
-
-import com.google.inject.AbstractModule;
-import com.google.inject.Inject;
-
-import android.content.SharedPreferences;
-import android.preference.PreferenceManager;
-
-@SuppressWarnings("ResultOfMethodCallIgnored")
-@RunWith(RobolectricTestRunner.class)
-public class SharedPreferencesProviderTest {
-
-    @Test
-    public void shouldInjectDefaultSharedPrefs() throws Exception {
-        final A a = Robolectric.buildActivity(A.class).create().get();
-
-        final Field f = TestSharedPreferences.class.getDeclaredField("filename");
-        f.setAccessible(true);
-
-        assertTrue(Strings.notEmpty(f.get(a.prefs)));
-        assertThat(f.get(a.prefs), equalTo(f.get(PreferenceManager.getDefaultSharedPreferences(a))));
-    }
-
-    @Test
-    public void shouldInjectNamedSharedPrefs() throws Exception {
-        RoboGuice.setBaseApplicationInjector(Robolectric.application, RoboGuice.DEFAULT_STAGE, RoboGuice.newDefaultRoboModule(Robolectric.application),
-                new ModuleA());
-        try {
-
-            final A a = Robolectric.buildActivity(A.class).create().get();
-            final Field f = TestSharedPreferences.class.getDeclaredField("filename");
-            f.setAccessible(true);
-
-            assertEquals("FOOBAR", f.get(a.prefs));
-
-        } finally {
-            RoboGuice.Util.reset();
-        }
-    }
-
-    @Test
-    public void shouldFallbackOnOldDefaultIfPresent() throws Exception {
-        final File oldDefault = new File("shared_prefs/default.xml");
-        final File oldDir = new File("shared_prefs");
-
-        oldDir.mkdirs();
-        oldDefault.createNewFile();
-        try {
-            final A a = Robolectric.buildActivity(A.class).create().get();
-            final Field f = TestSharedPreferences.class.getDeclaredField("filename");
-            f.setAccessible(true);
-
-            assertTrue(Strings.notEmpty(f.get(a.prefs)));
-            assertEquals("default.xml", f.get(a.prefs));
-
-        } finally {
-            oldDefault.delete();
-            oldDir.delete();
-        }
-    }
-
-    @Test
-    public void shouldNotFallbackOnOldDefaultIfNamedFileSpecified() throws Exception {
-        RoboGuice.setBaseApplicationInjector(Robolectric.application, RoboGuice.DEFAULT_STAGE, RoboGuice.newDefaultRoboModule(Robolectric.application),
-                new ModuleA());
-
-        final File oldDefault = new File("shared_prefs/default.xml");
-        final File oldDir = new File("shared_prefs");
-
-        oldDir.mkdirs();
-        oldDefault.createNewFile();
-        try {
-            final A a = Robolectric.buildActivity(A.class).create().get();
-            final Field f = TestSharedPreferences.class.getDeclaredField("filename");
-            f.setAccessible(true);
-
-            assertTrue(Strings.notEmpty(f.get(a.prefs)));
-            assertEquals("FOOBAR", f.get(a.prefs));
-
-        } finally {
-            RoboGuice.Util.reset();
-            oldDefault.delete();
-            oldDir.delete();
-        }
-    }
-
-    public static class A extends RoboActivity {
-        @Inject
-        SharedPreferences prefs;
-    }
-
-    public static class ModuleA extends AbstractModule {
-        @Override
-        protected void configure() {
-            bindConstant().annotatedWith(SharedPreferencesName.class).to("FOOBAR");
-        }
-    }
-}
diff --git a/roboguice/src/test/java/roboguice/service/ServiceInjectionTest.java b/roboguice/src/test/java/roboguice/service/ServiceInjectionTest.java
deleted file mode 100644
index 94d4b3124..000000000
--- a/roboguice/src/test/java/roboguice/service/ServiceInjectionTest.java
+++ /dev/null
@@ -1,76 +0,0 @@
-package roboguice.service;
-
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.junit.Assert.assertThat;
-
-import javax.inject.Inject;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-import roboguice.inject.InjectView;
-
-import com.google.inject.ConfigurationException;
-
-import android.content.Context;
-import android.content.Intent;
-import android.os.IBinder;
-import android.view.View;
-
-@RunWith(RobolectricTestRunner.class)
-public class ServiceInjectionTest {
-
-    @Test
-    public void shouldBeAbleToInjectInRoboService() {
-        final RoboServiceA roboService = new RoboServiceA();
-        roboService.onCreate();
-
-        assertThat( roboService.context, equalTo((Context)roboService) );
-    }
-
-    @Test
-    public void shouldBeAbleToInjectInRoboIntentService() {
-        final RoboIntentServiceA roboService = new RoboIntentServiceA("");
-        roboService.onCreate();
-
-        assertThat( roboService.context, equalTo((Context)roboService) );
-    }
-
-    @Test(expected=ConfigurationException.class)
-    public void shouldNotAllowViewsInServices() {
-        final RoboServiceB roboService = new RoboServiceB();
-        roboService.onCreate();
-    }
-
-    public static class RoboServiceA extends RoboService {
-        @Inject Context context;
-
-        @Override
-        public IBinder onBind(Intent intent) {
-            return null;
-        }
-    }
-
-    public static class RoboIntentServiceA extends RoboIntentService {
-        @Inject Context context;
-
-        public RoboIntentServiceA(String name) {
-            super(name);
-        }
-
-        @Override
-        protected void onHandleIntent(Intent intent) {
-        }
-    }
-
-    public static class RoboServiceB extends RoboService {
-        @InjectView(100) View v;
-
-        @Override
-        public IBinder onBind(Intent intent) {
-            return null;
-        }
-    }
-
-}
diff --git a/roboguice/src/test/java/roboguice/util/AndroidCallableTest.java b/roboguice/src/test/java/roboguice/util/AndroidCallableTest.java
deleted file mode 100644
index 77fe0e2f5..000000000
--- a/roboguice/src/test/java/roboguice/util/AndroidCallableTest.java
+++ /dev/null
@@ -1,346 +0,0 @@
-package roboguice.util;
-
-
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.junit.Assert.assertThat;
-
-import java.util.concurrent.Executors;
-import java.util.concurrent.ThreadFactory;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.shadows.ShadowLooper;
-
-import android.os.Looper;
-import android.util.Log;
-
-@RunWith(RobolectricTestRunner.class)
-public class AndroidCallableTest {
-
-    @Test
-    public void shouldCallMethodsUsingProperThreads() throws Exception {
-        final Thread fgThread = Thread.currentThread();
-        final Thread[] bgThread = {null};
-        final Thread[] answers = new Thread[5];
-        final ShadowLooper looper = Robolectric.shadowOf(Looper.getMainLooper());
-
-        Executors.newSingleThreadExecutor(new MyThreadFactory(bgThread)).submit(new StringAndroidCallable(answers,false));
-
-        // Run all the pending tasks on the ui thread
-        while(answers[answers.length-1]==null)
-            looper.runToEndOfTasks();
-
-
-        final Thread[] correctAnswer = new Thread[]{fgThread, bgThread[0], null, fgThread, fgThread };
-        assertThat(answers, equalTo(correctAnswer));
-    }
-
-    @Test
-    public void shouldCallMethodsUsingProperThreadsWithException() throws Exception {
-        final Thread fgThread = Thread.currentThread();
-        final Thread[] bgThread = {null};
-        final Thread[] answers = new Thread[5];
-        final ShadowLooper looper = Robolectric.shadowOf(Looper.getMainLooper());
-
-        Executors.newSingleThreadExecutor(new MyThreadFactory(bgThread)).submit(new StringAndroidCallable(answers,true));
-
-        // Run all the pending tasks on the ui thread
-        while(answers[answers.length-1]==null)
-            looper.runToEndOfTasks();
-
-
-        final Thread[] correctAnswer = new Thread[]{fgThread, bgThread[0], fgThread, null, fgThread };
-        assertThat( answers, equalTo(correctAnswer));
-    }
-
-    @Test
-    public void shouldHaveCorrectStackTrace() {
-        final Exception[] exception = {null};
-        final StackTraceElement[] here;
-        final StackTraceElement[][] there = new StackTraceElement[][]{null};
-        final ShadowLooper looper = Robolectric.shadowOf(Looper.getMainLooper());
-
-        Ln.setLoggingLevel(Log.DEBUG);
-
-        try {
-            throw new UnsupportedOperationException();
-        } catch (UnsupportedOperationException e) {
-            here = e.getStackTrace();
-        }
-
-        Executors.newSingleThreadExecutor(new MyThreadFactory(new Thread[]{null})).submit(new AndroidCallable<String>() {
-            @Override
-            public String doInBackground() throws Exception {
-                try {
-                    throw new NullPointerException();
-                } catch (NullPointerException e) {
-                    there[0] = e.getStackTrace();
-                    throw e;
-                }
-            }
-
-            @Override
-            public void onException(Exception e) {
-                exception[0] = e;
-            }
-
-            @Override
-            public void onSuccess(String result) {
-            }
-
-        },false);
-
-        // Run all the pending tasks on the ui thread
-        while(exception[0]==null)
-            looper.runToEndOfTasks();
-
-        assertThat(exception[0].getStackTrace().length, equalTo(here.length + there[0].length + 3));
-
-        int i=0;
-        while (i<there[0].length) {
-            assertThat( exception[0].getStackTrace()[i], equalTo(there[0][i]));
-            ++i;
-        }
-
-        for( int j=i+3, k=0; k<here.length; ++k, ++j) // skip 3 frames due to differences in where we got our stacktrace from
-            assertThat( exception[0].getStackTrace()[j].getFileName(), equalTo(here[k].getFileName())); // line numbers may be off
-
-    }
-
-    @Test(expected = RuntimeException.class )
-    public void shouldCrashAppForExceptionInOnSuccess() {
-        final ShadowLooper looper = Robolectric.shadowOf(Looper.getMainLooper());
-        final boolean[] callRecord = new boolean[]{false};
-
-        Executors.newSingleThreadExecutor().submit( new AndroidCallable<String>() {
-            @Override
-            public String doInBackground() throws Exception {
-                return "";
-            }
-
-            @Override
-            public void onSuccess(String result) {
-                throw new RuntimeException();
-            }
-
-            @Override
-            public void onException(Exception e) {
-            }
-
-            @Override
-            public void onFinally() {
-                callRecord[0] = true;
-            }
-        });
-
-        // Run all the pending tasks on the ui thread
-        while(!callRecord[callRecord.length-1])
-            looper.runToEndOfTasks();
-
-    }
-
-    @Test(expected = RuntimeException.class )
-    public void shouldCrashAppForExceptionInOnException() {
-        final ShadowLooper looper = Robolectric.shadowOf(Looper.getMainLooper());
-        final boolean[] callRecord = new boolean[]{false};
-
-        Executors.newSingleThreadExecutor().submit( new AndroidCallable<String>() {
-            @Override
-            public String doInBackground() throws Exception {
-                throw new Exception();
-            }
-
-            @Override
-            public void onSuccess(String result) {
-            }
-
-            @Override
-            public void onException(Exception e) {
-                throw new RuntimeException();
-            }
-
-            @Override
-            public void onFinally() {
-                callRecord[0] = true;
-            }
-        });
-
-        // Run all the pending tasks on the ui thread
-        while(!callRecord[callRecord.length-1])
-            looper.runToEndOfTasks();
-
-    }
-
-    @Test(expected = RuntimeException.class )
-    public void shouldCrashAppForExceptionInOnFinally() {
-        final ShadowLooper looper = Robolectric.shadowOf(Looper.getMainLooper());
-
-        Executors.newSingleThreadExecutor().submit( new AndroidCallable<String>() {
-            @Override
-            public String doInBackground() throws Exception {
-                return "";
-            }
-
-            @Override
-            public void onSuccess(String result) {
-                throw new RuntimeException();
-            }
-
-            @Override
-            public void onException(Exception e) {
-            }
-
-            @Override
-            public void onFinally() {
-                throw new RuntimeException();
-            }
-        });
-
-        // Run all the pending tasks on the ui thread
-        //noinspection InfiniteLoopStatement
-        while(true)
-            looper.runToEndOfTasks();
-
-    }
-
-    @Test
-    public void shouldCallOnExceptionForExceptionInDoInBackground() {
-        final ShadowLooper looper = Robolectric.shadowOf(Looper.getMainLooper());
-        final boolean[] callRecord = new boolean[]{false, false, false, false};
-        final boolean[] correctAnswer = new boolean[] { true, false, true, true };
-
-        Executors.newSingleThreadExecutor().submit( new AndroidCallable<String>() {
-            @Override
-            public void onPreCall() {
-                callRecord[0] = true;
-            }
-
-            @Override
-            public String doInBackground() throws Exception {
-                throw new Exception();
-            }
-
-            @Override
-            public void onSuccess(String result) {
-                callRecord[1] = true;
-            }
-
-            @Override
-            public void onException(Exception e) {
-                callRecord[2] = true;
-            }
-
-            @Override
-            public void onFinally() {
-                callRecord[3] = true;
-            }
-        });
-
-        // Run all the pending tasks on the ui thread
-        while(!callRecord[callRecord.length-1])
-            looper.runToEndOfTasks();
-
-        assertThat( callRecord, equalTo(correctAnswer));
-    }
-
-
-    @Test
-    public void shouldCallOnExceptionForExceptionInOnPreExecute() {
-        final ShadowLooper looper = Robolectric.shadowOf(Looper.getMainLooper());
-        final boolean[] callRecord = new boolean[]{false, false, false};
-        final boolean[] correctAnswer = new boolean[] { false, true, true };
-
-        Executors.newSingleThreadExecutor().submit( new AndroidCallable<String>() {
-            @Override
-            public void onPreCall() {
-                throw new RuntimeException();
-            }
-
-            @Override
-            public String doInBackground() throws Exception {
-                return "";
-            }
-
-            @Override
-            public void onSuccess(String result) {
-                callRecord[0] = true;
-            }
-
-            @Override
-            public void onException(Exception e) {
-                callRecord[1] = true;
-            }
-
-            @Override
-            public void onFinally() {
-                callRecord[2] = true;
-            }
-        });
-
-        // Run all the pending tasks on the ui thread
-        while(!callRecord[callRecord.length-1])
-            looper.runToEndOfTasks();
-
-        assertThat( callRecord, equalTo(correctAnswer));
-    }
-
-
-    private static class StringAndroidCallable extends AndroidCallable<String> {
-        Thread[] answers;
-        boolean shouldThrowException;
-
-        public StringAndroidCallable(Thread[] answers, boolean shouldThrowException ) {
-            this.answers = answers;
-            this.shouldThrowException = shouldThrowException;
-        }
-
-        @Override
-        public void onPreCall() {
-            answers[0] = Thread.currentThread();
-        }
-
-        @Override
-        public String doInBackground() throws Exception {
-            answers[1] = Thread.currentThread();
-
-            if( shouldThrowException )
-                throw new UnsupportedOperationException();
-
-            return "12345";
-        }
-
-        @Override
-        public void onException(Exception e) {
-            answers[2] = Thread.currentThread();
-        }
-
-        @Override
-        public void onSuccess(String result) {
-            answers[3] = Thread.currentThread();
-        }
-
-        @Override
-        public void onFinally() {
-            answers[4] = Thread.currentThread();
-        }
-
-
-    }
-
-    private static class MyThreadFactory implements ThreadFactory {
-        private final Thread[] bgThread;
-
-        public MyThreadFactory(Thread[] bgThread) {
-            this.bgThread = bgThread;
-        }
-
-        @Override
-        public Thread newThread(Runnable runnable) {
-            bgThread[0] = new Thread(runnable);
-            bgThread[0].setName("bgThread");
-            return bgThread[0];
-        }
-    }
-}
diff --git a/roboguice/src/test/java/roboguice/util/StringsTest.java b/roboguice/src/test/java/roboguice/util/StringsTest.java
deleted file mode 100644
index 063f6cbc7..000000000
--- a/roboguice/src/test/java/roboguice/util/StringsTest.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package roboguice.util;
-
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.junit.Assert.assertThat;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
-
-@RunWith(RobolectricTestRunner.class)
-public class StringsTest {
-
-    @Test
-    public void shouldProduceCorrectMd5String() {
-        // http://code.google.com/p/roboguice/issues/detail?id=89
-        final String s = "SiTrAax";
-        final String expected = "96843ce5846566b00b5311c8904addfd";
-        assertThat(Strings.md5(s), equalTo(expected));
-    }
-}
diff --git a/roboguice/src/test/java/roboguice/view/ViewInjectionTest.java b/roboguice/src/test/java/roboguice/view/ViewInjectionTest.java
deleted file mode 100644
index 40731ef30..000000000
--- a/roboguice/src/test/java/roboguice/view/ViewInjectionTest.java
+++ /dev/null
@@ -1,203 +0,0 @@
-package roboguice.view;
-
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.hamcrest.CoreMatchers.not;
-import static org.junit.Assert.assertThat;
-import static org.junit.Assert.assertTrue;
-
-import java.lang.ref.SoftReference;
-import java.util.ArrayList;
-
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.util.ActivityController;
-
-import roboguice.RoboGuice;
-import roboguice.activity.RoboActivity;
-import roboguice.inject.InjectView;
-
-import com.google.inject.Inject;
-
-import android.content.Context;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.LinearLayout;
-
-@RunWith(RobolectricTestRunner.class)
-public class ViewInjectionTest {
-
-    @Test
-    public void shouldInjectViewsIntoActivitiesAndViews() {
-        final C activity = Robolectric.buildActivity(C.class).create().get();
-
-        assertThat(activity.v, equalTo((View)activity.ref));
-        assertThat(activity.v.w, equalTo(activity.v.ref));
-    }
-
-
-    @Test
-    public void shouldBeAbleToInjectViewsIntoPojos() {
-        final B activity = Robolectric.buildActivity(B.class).create().get();
-        assertThat(activity.a.v,equalTo(activity.ref));
-    }
-
-
-
-    @Test
-    public void shouldNotHoldReferencesToContext() {
-        ActivityController<A> controller= Robolectric.buildActivity(A.class).create();
-        final SoftReference<A> activityRef = new SoftReference<A>(controller.get());
-
-        assertThat(activityRef.get(), not(equalTo(null)));
-        assertThat(activityRef.get().v, not(equalTo(null)));
-
-        controller.destroy();
-        //noinspection UnusedAssignment
-        controller=null;
-
-
-        // Force an OoM
-        // http://stackoverflow.com/questions/3785713/how-to-make-the-java-system-release-soft-references/3810234
-        boolean oomHappened = false;
-        try {
-            @SuppressWarnings({"MismatchedQueryAndUpdateOfCollection"}) final ArrayList<Object[]> allocations = new ArrayList<Object[]>();
-            int size;
-            while( (size = Math.min(Math.abs((int)Runtime.getRuntime().freeMemory()),Integer.MAX_VALUE))>0 )
-                allocations.add( new Object[size] );
-
-        } catch( OutOfMemoryError e ) {
-            // great!
-            oomHappened = true;
-        }
-
-
-        assertTrue(oomHappened);
-        assertThat(activityRef.get(), equalTo(null));
-
-    }
-
-
-
-    @Ignore("getWindow().getDecoreView() doesn't seem to return the root view in robolectric?")
-    @Test
-    public void shouldBeAbleToInjectReferencesToTaggedViews() {
-        final D activity = Robolectric.buildActivity(D.class).create().get();
-
-        assertThat(activity.v, equalTo((View)activity.ref));
-        assertThat(activity.v.w, equalTo(activity.v.ref));
-    }
-
-
-    public static class A extends RoboActivity {
-        @InjectView(100) protected View v;
-
-        @Override
-        protected void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-
-            final View x = new View(this);
-            x.setId(100);
-            setContentView(x);
-        }
-    }
-
-
-
-    public static class B extends RoboActivity {
-
-        @Inject PojoA a;
-
-        View ref;
-
-        @Override
-        protected void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-
-            ref = new View(this);
-            ref.setId(100);
-            setContentView(ref);
-        }
-
-
-        public static class PojoA {
-            @InjectView(100) View v;
-        }
-    }
-
-
-
-
-    public static class C extends RoboActivity {
-        @InjectView(100) ViewA v;
-
-        LinearLayout ref;
-
-        @Override
-        protected void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-
-            ref = new ViewA(this);
-            ref.setId(100);
-
-            setContentView(ref);
-        }
-
-        public static class ViewA extends LinearLayout {
-            @InjectView(101) View w;
-
-            View ref;
-
-            public ViewA(Context context) {
-                super(context);
-
-                ref = new View(getContext());
-                ref.setId(101);
-                addView(ref);
-
-                RoboGuice.getInjector(getContext()).injectMembers(this);
-            }
-
-        }
-
-
-    }
-
-    public static class D extends RoboActivity {
-        @InjectView(tag="100") ViewA v;
-
-        LinearLayout ref;
-
-        @Override
-        protected void onCreate(Bundle savedInstanceState) {
-            super.onCreate(savedInstanceState);
-
-            ref = new ViewA(this);
-            ref.setTag("100");
-
-            setContentView(ref);
-        }
-
-        public static class ViewA extends LinearLayout {
-            @InjectView(tag="101") View w;
-
-            View ref;
-
-            public ViewA(Context context) {
-                super(context);
-
-                ref = new View(getContext());
-                ref.setTag("101");
-                addView(ref);
-
-                RoboGuice.getInjector(getContext()).injectMembers(this);
-            }
-
-        }
-
-
-    }
-
-}
diff --git a/src/main/java/roboguice/RoboGuice.java b/src/main/java/roboguice/RoboGuice.java
new file mode 100644
index 000000000..c38355869
--- /dev/null
+++ b/src/main/java/roboguice/RoboGuice.java
@@ -0,0 +1,220 @@
+package roboguice;
+
+import com.google.inject.Guice;
+import com.google.inject.Injector;
+import com.google.inject.Module;
+import com.google.inject.Stage;
+
+import android.app.Application;
+import android.content.Context;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import android.os.Bundle;
+
+import java.util.ArrayList;
+import java.util.WeakHashMap;
+
+import roboguice.config.DefaultRoboModule;
+import roboguice.event.EventManager;
+import roboguice.inject.ContextScope;
+import roboguice.inject.ContextScopedRoboInjector;
+import roboguice.inject.ResourceListener;
+import roboguice.inject.RoboInjector;
+import roboguice.inject.ViewListener;
+import roboguice.util.Strings;
+
+/**
+ * Manages injectors for RoboGuice applications.
+ * <p/>
+ * There are two types of injectors:
+ * <p/>
+ * 1. The base application injector, which is not typically used directly by the user.
+ * 2. The ContextScopedInjector, which is obtained by calling {@link
+ * #getInjector(android.content.Context)}, and knows about
+ * your current context, whether it's an activity, service, or something else.
+ * <p/>
+ * BUG hashmap should also key off of stage and modules list
+ */
+public final class RoboGuice {
+  @SuppressWarnings({ "checkstyle:visibilitymodifier", "checkstyle:staticvariablename" })
+  public static Stage DEFAULT_STAGE = Stage.PRODUCTION;
+
+  protected static WeakHashMap<Application, Injector> injectors =
+      new WeakHashMap<Application, Injector>();
+  protected static WeakHashMap<Application, ResourceListener> resourceListeners =
+      new WeakHashMap<Application, ResourceListener>();
+
+  protected static WeakHashMap<Application, ViewListener> viewListeners =
+      new WeakHashMap<Application, ViewListener>();
+
+  private RoboGuice() {
+  }
+
+  /**
+   * Return the cached Injector instance for this application, or create a new one if necessary.
+   */
+  public static Injector getBaseApplicationInjector(Application application) {
+    Injector rtrn = injectors.get(application);
+    if (rtrn != null) {
+      return rtrn;
+    }
+
+    synchronized (RoboGuice.class) {
+      rtrn = injectors.get(application);
+      if (rtrn != null) {
+        return rtrn;
+      }
+
+      return setBaseApplicationInjector(application, DEFAULT_STAGE);
+    }
+  }
+
+  /**
+   * Return the cached Injector instance for this application, or create a new one if necessary.
+   * If specifying your own modules, you must include a DefaultRoboModule for most things to work
+   * properly.
+   * Do something like the following:
+   * <p/>
+   * RoboGuice.setApplicationInjector( app, RoboGuice.DEFAULT_STAGE,
+   * Modules.override(RoboGuice.newDefaultRoboModule(app)).with(new
+   * MyModule() );
+   *
+   * @see com.google.inject.util.Modules#override(com.google.inject.Module...)
+   * @see roboguice.RoboGuice#setBaseApplicationInjector(android.app.Application,
+   * com.google.inject.Stage, com.google.inject.Module...)
+   * @see roboguice.RoboGuice#newDefaultRoboModule(android.app.Application)
+   * @see roboguice.RoboGuice#DEFAULT_STAGE
+   * <p/>
+   * If using this method with test cases, be sure to call {@link roboguice.RoboGuice
+   * .Util#reset()}
+   * in your test teardown methods
+   * to avoid polluting our other tests with your custom injector.  Don't do this in your real
+   * application though.
+   */
+  public static Injector setBaseApplicationInjector(final Application application,
+                                                    Stage stage,
+                                                    Module... modules) {
+    synchronized (RoboGuice.class) {
+      final Injector rtrn = Guice.createInjector(stage, modules);
+      injectors.put(application, rtrn);
+      return rtrn;
+    }
+  }
+
+  /**
+   * Return the cached Injector instance for this application, or create a new one if necessary.
+   */
+  public static Injector setBaseApplicationInjector(Application application, Stage stage) {
+
+    synchronized (RoboGuice.class) {
+
+      final ArrayList<Module> modules = new ArrayList<Module>();
+
+      try {
+        final ApplicationInfo ai = application.getPackageManager()
+                                              .getApplicationInfo(application.getPackageName(),
+                                                                  PackageManager.GET_META_DATA);
+        final Bundle bundle = ai.metaData;
+        final String roboguiceModules =
+            bundle != null ? bundle.getString("roboguice.modules") : null;
+        final DefaultRoboModule defaultRoboModule = newDefaultRoboModule(application);
+        final String[] moduleNames =
+            roboguiceModules != null ? roboguiceModules.split("[\\s,]") : new String[]{ };
+
+        modules.add(defaultRoboModule);
+
+        for (String name : moduleNames) {
+          if (Strings.notEmpty(name)) {
+            final Class<? extends Module> clazz = Class.forName(name).asSubclass(Module.class);
+            try {
+              modules.add(clazz.getDeclaredConstructor(Context.class).newInstance(application));
+            } catch (NoSuchMethodException ignored) {
+              modules.add(clazz.newInstance());
+            }
+          }
+        }
+
+      } catch (Exception e) {
+        throw new RuntimeException(
+            "Unable to instantiate your Module.  Check your roboguice.modules metadata in your "
+            + "AndroidManifest.xml",
+            e);
+      }
+
+      final Injector rtrn = setBaseApplicationInjector(application, stage,
+                                                       modules.toArray(new Module[modules.size()]));
+      injectors.put(application, rtrn);
+      return rtrn;
+    }
+
+  }
+
+
+  public static RoboInjector getInjector(Context context) {
+    final Application application = (Application) context.getApplicationContext();
+    return new ContextScopedRoboInjector(context, getBaseApplicationInjector(application));
+  }
+
+  /**
+   * A shortcut for RoboGuice.getInjector(context).injectMembers(o);
+   */
+  public static <T> T injectMembers(Context context, T t) {
+    getInjector(context).injectMembers(t);
+    return t;
+  }
+
+
+  public static DefaultRoboModule newDefaultRoboModule(final Application application) {
+    return new DefaultRoboModule(application, new ContextScope(application),
+                                 getViewListener(application), getResourceListener(application));
+  }
+
+  @SuppressWarnings("ConstantConditions")
+  protected static ResourceListener getResourceListener(Application application) {
+    ResourceListener resourceListener = resourceListeners.get(application);
+    if (resourceListener == null) {
+      synchronized (RoboGuice.class) {
+        if (resourceListener == null) {
+          resourceListener = new ResourceListener(application);
+          resourceListeners.put(application, resourceListener);
+        }
+      }
+    }
+    return resourceListener;
+  }
+
+  @SuppressWarnings("ConstantConditions")
+  protected static ViewListener getViewListener(final Application application) {
+    ViewListener viewListener = viewListeners.get(application);
+    if (viewListener == null) {
+      synchronized (RoboGuice.class) {
+        if (viewListener == null) {
+          viewListener = new ViewListener();
+          viewListeners.put(application, viewListener);
+        }
+      }
+    }
+    return viewListener;
+  }
+
+  public static void destroyInjector(Context context) {
+    final RoboInjector injector = getInjector(context);
+    injector.getInstance(EventManager.class).destroy();
+    //noinspection SuspiciousMethodCalls
+    injectors.remove(context); // it's okay, Context is an Application
+  }
+
+  public static final class Util {
+    private Util() {}
+
+    /**
+     * This method is provided to reset RoboGuice in testcases.
+     * It should not be called in a real application.
+     */
+    public static void reset() {
+      injectors.clear();
+      resourceListeners.clear();
+      viewListeners.clear();
+    }
+  }
+}
diff --git a/roboguice/src/main/java/roboguice/activity/RoboAccountAuthenticatorActivity.java b/src/main/java/roboguice/activity/RoboAccountAuthenticatorActivity.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/activity/RoboAccountAuthenticatorActivity.java
rename to src/main/java/roboguice/activity/RoboAccountAuthenticatorActivity.java
diff --git a/roboguice/src/main/java/roboguice/activity/RoboActivity.java b/src/main/java/roboguice/activity/RoboActivity.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/activity/RoboActivity.java
rename to src/main/java/roboguice/activity/RoboActivity.java
diff --git a/roboguice/src/main/java/roboguice/activity/RoboExpandableListActivity.java b/src/main/java/roboguice/activity/RoboExpandableListActivity.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/activity/RoboExpandableListActivity.java
rename to src/main/java/roboguice/activity/RoboExpandableListActivity.java
diff --git a/roboguice/src/main/java/roboguice/activity/RoboFragmentActivity.java b/src/main/java/roboguice/activity/RoboFragmentActivity.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/activity/RoboFragmentActivity.java
rename to src/main/java/roboguice/activity/RoboFragmentActivity.java
diff --git a/roboguice/src/main/java/roboguice/activity/RoboLauncherActivity.java b/src/main/java/roboguice/activity/RoboLauncherActivity.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/activity/RoboLauncherActivity.java
rename to src/main/java/roboguice/activity/RoboLauncherActivity.java
diff --git a/roboguice/src/main/java/roboguice/activity/RoboListActivity.java b/src/main/java/roboguice/activity/RoboListActivity.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/activity/RoboListActivity.java
rename to src/main/java/roboguice/activity/RoboListActivity.java
diff --git a/roboguice/src/main/java/roboguice/activity/RoboMapActivity.java b/src/main/java/roboguice/activity/RoboMapActivity.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/activity/RoboMapActivity.java
rename to src/main/java/roboguice/activity/RoboMapActivity.java
diff --git a/roboguice/src/main/java/roboguice/activity/RoboPreferenceActivity.java b/src/main/java/roboguice/activity/RoboPreferenceActivity.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/activity/RoboPreferenceActivity.java
rename to src/main/java/roboguice/activity/RoboPreferenceActivity.java
diff --git a/roboguice/src/main/java/roboguice/activity/RoboSplashActivity.java b/src/main/java/roboguice/activity/RoboSplashActivity.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/activity/RoboSplashActivity.java
rename to src/main/java/roboguice/activity/RoboSplashActivity.java
diff --git a/roboguice/src/main/java/roboguice/activity/event/OnActivityResultEvent.java b/src/main/java/roboguice/activity/event/OnActivityResultEvent.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/activity/event/OnActivityResultEvent.java
rename to src/main/java/roboguice/activity/event/OnActivityResultEvent.java
diff --git a/roboguice/src/main/java/roboguice/activity/event/OnContentChangedEvent.java b/src/main/java/roboguice/activity/event/OnContentChangedEvent.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/activity/event/OnContentChangedEvent.java
rename to src/main/java/roboguice/activity/event/OnContentChangedEvent.java
diff --git a/roboguice/src/main/java/roboguice/activity/event/OnNewIntentEvent.java b/src/main/java/roboguice/activity/event/OnNewIntentEvent.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/activity/event/OnNewIntentEvent.java
rename to src/main/java/roboguice/activity/event/OnNewIntentEvent.java
diff --git a/roboguice/src/main/java/roboguice/activity/event/OnPauseEvent.java b/src/main/java/roboguice/activity/event/OnPauseEvent.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/activity/event/OnPauseEvent.java
rename to src/main/java/roboguice/activity/event/OnPauseEvent.java
diff --git a/roboguice/src/main/java/roboguice/activity/event/OnRestartEvent.java b/src/main/java/roboguice/activity/event/OnRestartEvent.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/activity/event/OnRestartEvent.java
rename to src/main/java/roboguice/activity/event/OnRestartEvent.java
diff --git a/roboguice/src/main/java/roboguice/activity/event/OnResumeEvent.java b/src/main/java/roboguice/activity/event/OnResumeEvent.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/activity/event/OnResumeEvent.java
rename to src/main/java/roboguice/activity/event/OnResumeEvent.java
diff --git a/roboguice/src/main/java/roboguice/activity/event/OnSaveInstanceStateEvent.java b/src/main/java/roboguice/activity/event/OnSaveInstanceStateEvent.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/activity/event/OnSaveInstanceStateEvent.java
rename to src/main/java/roboguice/activity/event/OnSaveInstanceStateEvent.java
diff --git a/roboguice/src/main/java/roboguice/activity/event/OnStopEvent.java b/src/main/java/roboguice/activity/event/OnStopEvent.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/activity/event/OnStopEvent.java
rename to src/main/java/roboguice/activity/event/OnStopEvent.java
diff --git a/roboguice/src/main/java/roboguice/adapter/IterableAdapter.java b/src/main/java/roboguice/adapter/IterableAdapter.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/adapter/IterableAdapter.java
rename to src/main/java/roboguice/adapter/IterableAdapter.java
diff --git a/roboguice/src/main/java/roboguice/config/DefaultRoboModule.java b/src/main/java/roboguice/config/DefaultRoboModule.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/config/DefaultRoboModule.java
rename to src/main/java/roboguice/config/DefaultRoboModule.java
diff --git a/roboguice/src/main/java/roboguice/content/RoboAsyncTaskLoader.java b/src/main/java/roboguice/content/RoboAsyncTaskLoader.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/content/RoboAsyncTaskLoader.java
rename to src/main/java/roboguice/content/RoboAsyncTaskLoader.java
diff --git a/roboguice/src/main/java/roboguice/content/RoboContentProvider.java b/src/main/java/roboguice/content/RoboContentProvider.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/content/RoboContentProvider.java
rename to src/main/java/roboguice/content/RoboContentProvider.java
diff --git a/roboguice/src/main/java/roboguice/content/RoboLoader.java b/src/main/java/roboguice/content/RoboLoader.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/content/RoboLoader.java
rename to src/main/java/roboguice/content/RoboLoader.java
diff --git a/roboguice/src/main/java/roboguice/context/event/OnConfigurationChangedEvent.java b/src/main/java/roboguice/context/event/OnConfigurationChangedEvent.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/context/event/OnConfigurationChangedEvent.java
rename to src/main/java/roboguice/context/event/OnConfigurationChangedEvent.java
diff --git a/roboguice/src/main/java/roboguice/context/event/OnCreateEvent.java b/src/main/java/roboguice/context/event/OnCreateEvent.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/context/event/OnCreateEvent.java
rename to src/main/java/roboguice/context/event/OnCreateEvent.java
diff --git a/roboguice/src/main/java/roboguice/context/event/OnDestroyEvent.java b/src/main/java/roboguice/context/event/OnDestroyEvent.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/context/event/OnDestroyEvent.java
rename to src/main/java/roboguice/context/event/OnDestroyEvent.java
diff --git a/roboguice/src/main/java/roboguice/context/event/OnStartEvent.java b/src/main/java/roboguice/context/event/OnStartEvent.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/context/event/OnStartEvent.java
rename to src/main/java/roboguice/context/event/OnStartEvent.java
diff --git a/roboguice/src/main/java/roboguice/event/EventListener.java b/src/main/java/roboguice/event/EventListener.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/event/EventListener.java
rename to src/main/java/roboguice/event/EventListener.java
diff --git a/roboguice/src/main/java/roboguice/event/EventManager.java b/src/main/java/roboguice/event/EventManager.java
similarity index 97%
rename from roboguice/src/main/java/roboguice/event/EventManager.java
rename to src/main/java/roboguice/event/EventManager.java
index 7d5f2e6a3..e284fc6a5 100644
--- a/roboguice/src/main/java/roboguice/event/EventManager.java
+++ b/src/main/java/roboguice/event/EventManager.java
@@ -1,156 +1,156 @@
-package roboguice.event;
-
-import java.lang.reflect.Method;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.LinkedHashSet;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Set;
-
-import roboguice.event.eventListener.ObserverMethodListener;
-import roboguice.inject.ContextSingleton;
-
-import com.google.inject.Inject;
-
-import android.content.Context;
-
-/**
- * Manager class handling the following:
- *
- *   Registration of event observing methods:
- *      registerObserver()
- *      unregisterObserver()
- *      clear()
- *   Raising Events:
- *      fire()
- *
- * @author Adam Tybor
- * @author John Ericksen
- */
-@ContextSingleton
-public class EventManager {
-    @Inject protected Context context;
-
-    protected Map<Class<?>, Set<EventListener<?>>> registrations = new HashMap<Class<?>, Set<EventListener<?>>>(); // synchronized set
-
-    /**
-     * Register the given EventListener to the contest and event class.
-     *
-     * @param event observed
-     * @param listener to be triggered
-     * @param <T> event type
-     */
-    @SuppressWarnings("rawtypes")
-    public <T> void registerObserver( Class<T> event, EventListener listener ) {
-        Set<EventListener<?>> observers = registrations.get(event);
-        if (observers == null) {
-            observers = Collections.synchronizedSet(new LinkedHashSet<EventListener<?>>());
-            registrations.put(event, observers);
-        }
-
-        observers.add(listener);
-
-    }
-
-    /**
-     * Registers given method with provided context and event.
-     *
-     * @param instance to be called
-     * @param method to be called
-     * @param event observed
-     */
-    public <T> void registerObserver(Object instance, Method method, Class<T> event) {
-        registerObserver(event, new ObserverMethodListener<T>(instance, method));
-    }
-
-    /**
-     * Unregisters the provided event listener from the given event
-     *
-     * @param event observed
-     * @param listener to be unregistered
-     * @param <T> event type
-     */
-    @SuppressWarnings("rawtypes")
-    public <T> void unregisterObserver(Class<T> event, EventListener<T> listener ) {
-
-        final Set<EventListener<?>> observers = registrations.get(event);
-        if (observers == null) return;
-
-        // As documented in http://docs.oracle.com/javase/1.4.2/docs/api/java/util/Collections.html#synchronizedSet(java.util.Set)
-        //noinspection SynchronizationOnLocalVariableOrMethodParameter
-        synchronized (observers) {
-            for (Iterator<EventListener<?>> iterator = observers.iterator(); iterator.hasNext();) {
-                final EventListener registeredListener = iterator.next();
-                if (registeredListener == listener) {
-                    iterator.remove();
-                    break;
-                }
-            }
-        }
-    }
-
-    /**
-     * Unregister all methods observing the given event from the provided context.
-     *
-     * @param instance to be unregistered
-     * @param event observed
-     */
-    @SuppressWarnings("rawtypes")
-    public <T> void unregisterObserver(Object instance, Class<T> event) {
-
-        final Set<EventListener<?>> observers = registrations.get(event);
-        if (observers == null) return;
-
-        // As documented in http://docs.oracle.com/javase/1.4.2/docs/api/java/util/Collections.html#synchronizedSet(java.util.Set)
-        //noinspection SynchronizationOnLocalVariableOrMethodParameter
-        synchronized (observers) {
-            for (Iterator<EventListener<?>> iterator = observers.iterator(); iterator.hasNext();) {
-                final EventListener listener = iterator.next();
-                if( listener instanceof ObserverMethodListener ) {
-                    final ObserverMethodListener observer = ((ObserverMethodListener)listener);
-                    if (observer.getInstance() == instance) {
-                        iterator.remove();
-                        break;
-                    }
-                }
-            }
-        }
-    }
-
-    /**
-     * Raises the event's class' event on the given context.  This event object is passed (if configured) to the
-     * registered observer's method.
-     *
-     * @param event observed
-     */
-    @SuppressWarnings({ "rawtypes", "unchecked" })
-    public void fire(Object event) {
-
-        final Set<EventListener<?>> observers = registrations.get(event.getClass());
-        if (observers == null) return;
-
-        for (EventListener observer : copyObservers(observers))
-            //noinspection unchecked
-            observer.onEvent(event);
-
-    }
-
-    protected Set<EventListener<?>> copyObservers(Set<EventListener<?>> observers) {
-        // As documented in http://docs.oracle.com/javase/1.4.2/docs/api/java/util/Collections.html#synchronizedSet(java.util.Set)
-        //noinspection SynchronizationOnLocalVariableOrMethodParameter
-        synchronized (observers) {
-            return new LinkedHashSet<EventListener<?>>(observers);
-        }
-    }
-
-
-    public void destroy() {
-        for( Entry<Class<?>, Set<EventListener<?>>> e : registrations.entrySet() )
-            e.getValue().clear();
-        registrations.clear();
-    }
-
-}
+package roboguice.event;
+
+import java.lang.reflect.Method;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.LinkedHashSet;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Set;
+
+import roboguice.event.eventListener.ObserverMethodListener;
+import roboguice.inject.ContextSingleton;
+
+import com.google.inject.Inject;
+
+import android.content.Context;
+
+/**
+ * Manager class handling the following:
+ *
+ *   Registration of event observing methods:
+ *      registerObserver()
+ *      unregisterObserver()
+ *      clear()
+ *   Raising Events:
+ *      fire()
+ *
+ * @author Adam Tybor
+ * @author John Ericksen
+ */
+@ContextSingleton
+public class EventManager {
+    @Inject protected Context context;
+
+    protected Map<Class<?>, Set<EventListener<?>>> registrations = new HashMap<Class<?>, Set<EventListener<?>>>(); // synchronized set
+
+    /**
+     * Register the given EventListener to the contest and event class.
+     *
+     * @param event observed
+     * @param listener to be triggered
+     * @param <T> event type
+     */
+    @SuppressWarnings("rawtypes")
+    public <T> void registerObserver( Class<T> event, EventListener listener ) {
+        Set<EventListener<?>> observers = registrations.get(event);
+        if (observers == null) {
+            observers = Collections.synchronizedSet(new LinkedHashSet<EventListener<?>>());
+            registrations.put(event, observers);
+        }
+
+        observers.add(listener);
+
+    }
+
+    /**
+     * Registers given method with provided context and event.
+     *
+     * @param instance to be called
+     * @param method to be called
+     * @param event observed
+     */
+    public <T> void registerObserver(Object instance, Method method, Class<T> event) {
+        registerObserver(event, new ObserverMethodListener<T>(instance, method));
+    }
+
+    /**
+     * Unregisters the provided event listener from the given event
+     *
+     * @param event observed
+     * @param listener to be unregistered
+     * @param <T> event type
+     */
+    @SuppressWarnings("rawtypes")
+    public <T> void unregisterObserver(Class<T> event, EventListener<T> listener ) {
+
+        final Set<EventListener<?>> observers = registrations.get(event);
+        if (observers == null) return;
+
+        // As documented in http://docs.oracle.com/javase/1.4.2/docs/api/java/util/Collections.html#synchronizedSet(java.util.Set)
+        //noinspection SynchronizationOnLocalVariableOrMethodParameter
+        synchronized (observers) {
+            for (Iterator<EventListener<?>> iterator = observers.iterator(); iterator.hasNext();) {
+                final EventListener registeredListener = iterator.next();
+                if (registeredListener == listener) {
+                    iterator.remove();
+                    break;
+                }
+            }
+        }
+    }
+
+    /**
+     * Unregister all methods observing the given event from the provided context.
+     *
+     * @param instance to be unregistered
+     * @param event observed
+     */
+    @SuppressWarnings("rawtypes")
+    public <T> void unregisterObserver(Object instance, Class<T> event) {
+
+        final Set<EventListener<?>> observers = registrations.get(event);
+        if (observers == null) return;
+
+        // As documented in http://docs.oracle.com/javase/1.4.2/docs/api/java/util/Collections.html#synchronizedSet(java.util.Set)
+        //noinspection SynchronizationOnLocalVariableOrMethodParameter
+        synchronized (observers) {
+            for (Iterator<EventListener<?>> iterator = observers.iterator(); iterator.hasNext();) {
+                final EventListener listener = iterator.next();
+                if( listener instanceof ObserverMethodListener ) {
+                    final ObserverMethodListener observer = ((ObserverMethodListener)listener);
+                    if (observer.getInstance() == instance) {
+                        iterator.remove();
+                        break;
+                    }
+                }
+            }
+        }
+    }
+
+    /**
+     * Raises the event's class' event on the given context.  This event object is passed (if configured) to the
+     * registered observer's method.
+     *
+     * @param event observed
+     */
+    @SuppressWarnings({ "rawtypes", "unchecked" })
+    public void fire(Object event) {
+
+        final Set<EventListener<?>> observers = registrations.get(event.getClass());
+        if (observers == null) return;
+
+        for (EventListener observer : copyObservers(observers))
+            //noinspection unchecked
+            observer.onEvent(event);
+
+    }
+
+    protected Set<EventListener<?>> copyObservers(Set<EventListener<?>> observers) {
+        // As documented in http://docs.oracle.com/javase/1.4.2/docs/api/java/util/Collections.html#synchronizedSet(java.util.Set)
+        //noinspection SynchronizationOnLocalVariableOrMethodParameter
+        synchronized (observers) {
+            return new LinkedHashSet<EventListener<?>>(observers);
+        }
+    }
+
+
+    public void destroy() {
+        for( Entry<Class<?>, Set<EventListener<?>>> e : registrations.entrySet() )
+            e.getValue().clear();
+        registrations.clear();
+    }
+
+}
 
diff --git a/roboguice/src/main/java/roboguice/event/EventThread.java b/src/main/java/roboguice/event/EventThread.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/event/EventThread.java
rename to src/main/java/roboguice/event/EventThread.java
diff --git a/roboguice/src/main/java/roboguice/event/Observes.java b/src/main/java/roboguice/event/Observes.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/event/Observes.java
rename to src/main/java/roboguice/event/Observes.java
diff --git a/roboguice/src/main/java/roboguice/event/ObservesTypeListener.java b/src/main/java/roboguice/event/ObservesTypeListener.java
similarity index 97%
rename from roboguice/src/main/java/roboguice/event/ObservesTypeListener.java
rename to src/main/java/roboguice/event/ObservesTypeListener.java
index e2577fc2c..f85a9e895 100644
--- a/roboguice/src/main/java/roboguice/event/ObservesTypeListener.java
+++ b/src/main/java/roboguice/event/ObservesTypeListener.java
@@ -1,109 +1,109 @@
-package roboguice.event;
-
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Method;
-
-import roboguice.event.eventListener.ObserverMethodListener;
-import roboguice.event.eventListener.factory.EventListenerThreadingDecorator;
-
-import com.google.inject.Provider;
-import com.google.inject.TypeLiteral;
-import com.google.inject.spi.InjectionListener;
-import com.google.inject.spi.TypeEncounter;
-import com.google.inject.spi.TypeListener;
-
-/**
- * Guice driven type listener which scans for the @Observes annotations.
- * Registers these methods with the EventManager.
- *
- * @author Adam Tybor
- * @author John Ericksen
- */
-public class ObservesTypeListener implements TypeListener {
-    protected Provider<EventManager> eventManagerProvider;
-    protected EventListenerThreadingDecorator observerThreadingDecorator;
-
-    public ObservesTypeListener(Provider<EventManager> eventManagerProvider, EventListenerThreadingDecorator observerThreadingDecorator) {
-        this.eventManagerProvider = eventManagerProvider;
-        this.observerThreadingDecorator = observerThreadingDecorator;
-    }
-
-    public <I> void hear(TypeLiteral<I> iTypeLiteral, TypeEncounter<I> iTypeEncounter) {
-        for( Class<?> c = iTypeLiteral.getRawType(); c!=Object.class ; c = c.getSuperclass() ) {
-            for (Method method : c.getDeclaredMethods())
-                findContextObserver(method, iTypeEncounter);
-
-            for( Class<?> interfaceClass : c.getInterfaces())
-                for (Method method : interfaceClass.getDeclaredMethods())
-                    findContextObserver(method, iTypeEncounter);
-
-            
-        }
-    }
-
-    protected <I> void findContextObserver(Method method, TypeEncounter<I> iTypeEncounter) {
-        final Annotation[][] parameterAnnotations = method.getParameterAnnotations();
-        for(int i = 0; i < parameterAnnotations.length; i++){
-            final Annotation[] annotationArray = parameterAnnotations[i];
-            final Class<?>[] parameterTypes = method.getParameterTypes();
-            final Class<?> parameterType = parameterTypes[i];
-
-            for(Annotation annotation : annotationArray)
-                if(annotation.annotationType().equals(Observes.class))
-                    registerContextObserver(iTypeEncounter, method, parameterType, ((Observes)annotation).value());
-        }
-    }
-
-    /**
-     * Error checks the observed method and registers method with typeEncounter
-     *
-     * @param iTypeEncounter
-     * @param method
-     * @param parameterType
-     * @param threadType
-     * @param <I, T>
-     */
-    protected <I, T> void registerContextObserver(TypeEncounter<I> iTypeEncounter, Method method, Class<T> parameterType, EventThread threadType) {
-        checkMethodParameters(method);
-        iTypeEncounter.register(new ContextObserverMethodInjector<I, T>(eventManagerProvider, observerThreadingDecorator, method, parameterType,threadType));
-    }
-
-    /**
-     * Error checking method, verifies that the method has the correct number of parameters.
-     *
-     * @param method
-     */
-    protected void checkMethodParameters(Method method) {
-        if(method.getParameterTypes().length > 1)
-            throw new RuntimeException("Annotation @Observes must only annotate one parameter," +
-                    " which must be the only parameter in the listener method.");
-    }
-
-    /**
-     * Injection listener to handle the observation manager registration.
-     *
-     * @param <I>
-     */
-    public static class ContextObserverMethodInjector<I, T> implements InjectionListener<I> {
-        protected EventListenerThreadingDecorator observerThreadingDecorator;
-        protected Provider<EventManager> eventManagerProvider;
-        protected Method method;
-        protected Class<T> event;
-        protected EventThread threadType;
-
-        public ContextObserverMethodInjector(Provider<EventManager> eventManagerProvider,
-                                             EventListenerThreadingDecorator observerThreadingDecorator,  Method method,
-                                             Class<T> event, EventThread threadType) {
-            this.observerThreadingDecorator = observerThreadingDecorator;
-            this.eventManagerProvider = eventManagerProvider;
-            this.method = method;
-            this.event = event;
-            this.threadType = threadType;
-        }
-
-        @SuppressWarnings({ "rawtypes", "unchecked" })
-        public void afterInjection(I i) {
-            eventManagerProvider.get().registerObserver( event, observerThreadingDecorator.decorate(threadType, new ObserverMethodListener(i, method)));
-        }
-    }
-}
+package roboguice.event;
+
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Method;
+
+import roboguice.event.eventListener.ObserverMethodListener;
+import roboguice.event.eventListener.factory.EventListenerThreadingDecorator;
+
+import com.google.inject.Provider;
+import com.google.inject.TypeLiteral;
+import com.google.inject.spi.InjectionListener;
+import com.google.inject.spi.TypeEncounter;
+import com.google.inject.spi.TypeListener;
+
+/**
+ * Guice driven type listener which scans for the @Observes annotations.
+ * Registers these methods with the EventManager.
+ *
+ * @author Adam Tybor
+ * @author John Ericksen
+ */
+public class ObservesTypeListener implements TypeListener {
+    protected Provider<EventManager> eventManagerProvider;
+    protected EventListenerThreadingDecorator observerThreadingDecorator;
+
+    public ObservesTypeListener(Provider<EventManager> eventManagerProvider, EventListenerThreadingDecorator observerThreadingDecorator) {
+        this.eventManagerProvider = eventManagerProvider;
+        this.observerThreadingDecorator = observerThreadingDecorator;
+    }
+
+    public <I> void hear(TypeLiteral<I> iTypeLiteral, TypeEncounter<I> iTypeEncounter) {
+        for( Class<?> c = iTypeLiteral.getRawType(); c!=Object.class ; c = c.getSuperclass() ) {
+            for (Method method : c.getDeclaredMethods())
+                findContextObserver(method, iTypeEncounter);
+
+            for( Class<?> interfaceClass : c.getInterfaces())
+                for (Method method : interfaceClass.getDeclaredMethods())
+                    findContextObserver(method, iTypeEncounter);
+
+            
+        }
+    }
+
+    protected <I> void findContextObserver(Method method, TypeEncounter<I> iTypeEncounter) {
+        final Annotation[][] parameterAnnotations = method.getParameterAnnotations();
+        for(int i = 0; i < parameterAnnotations.length; i++){
+            final Annotation[] annotationArray = parameterAnnotations[i];
+            final Class<?>[] parameterTypes = method.getParameterTypes();
+            final Class<?> parameterType = parameterTypes[i];
+
+            for(Annotation annotation : annotationArray)
+                if(annotation.annotationType().equals(Observes.class))
+                    registerContextObserver(iTypeEncounter, method, parameterType, ((Observes)annotation).value());
+        }
+    }
+
+    /**
+     * Error checks the observed method and registers method with typeEncounter
+     *
+     * @param iTypeEncounter
+     * @param method
+     * @param parameterType
+     * @param threadType
+     * @param <I, T>
+     */
+    protected <I, T> void registerContextObserver(TypeEncounter<I> iTypeEncounter, Method method, Class<T> parameterType, EventThread threadType) {
+        checkMethodParameters(method);
+        iTypeEncounter.register(new ContextObserverMethodInjector<I, T>(eventManagerProvider, observerThreadingDecorator, method, parameterType,threadType));
+    }
+
+    /**
+     * Error checking method, verifies that the method has the correct number of parameters.
+     *
+     * @param method
+     */
+    protected void checkMethodParameters(Method method) {
+        if(method.getParameterTypes().length > 1)
+            throw new RuntimeException("Annotation @Observes must only annotate one parameter," +
+                    " which must be the only parameter in the listener method.");
+    }
+
+    /**
+     * Injection listener to handle the observation manager registration.
+     *
+     * @param <I>
+     */
+    public static class ContextObserverMethodInjector<I, T> implements InjectionListener<I> {
+        protected EventListenerThreadingDecorator observerThreadingDecorator;
+        protected Provider<EventManager> eventManagerProvider;
+        protected Method method;
+        protected Class<T> event;
+        protected EventThread threadType;
+
+        public ContextObserverMethodInjector(Provider<EventManager> eventManagerProvider,
+                                             EventListenerThreadingDecorator observerThreadingDecorator,  Method method,
+                                             Class<T> event, EventThread threadType) {
+            this.observerThreadingDecorator = observerThreadingDecorator;
+            this.eventManagerProvider = eventManagerProvider;
+            this.method = method;
+            this.event = event;
+            this.threadType = threadType;
+        }
+
+        @SuppressWarnings({ "rawtypes", "unchecked" })
+        public void afterInjection(I i) {
+            eventManagerProvider.get().registerObserver( event, observerThreadingDecorator.decorate(threadType, new ObserverMethodListener(i, method)));
+        }
+    }
+}
diff --git a/roboguice/src/main/java/roboguice/event/eventListener/AsynchronousEventListenerDecorator.java b/src/main/java/roboguice/event/eventListener/AsynchronousEventListenerDecorator.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/event/eventListener/AsynchronousEventListenerDecorator.java
rename to src/main/java/roboguice/event/eventListener/AsynchronousEventListenerDecorator.java
diff --git a/roboguice/src/main/java/roboguice/event/eventListener/EventListenerRunnable.java b/src/main/java/roboguice/event/eventListener/EventListenerRunnable.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/event/eventListener/EventListenerRunnable.java
rename to src/main/java/roboguice/event/eventListener/EventListenerRunnable.java
diff --git a/roboguice/src/main/java/roboguice/event/eventListener/ObserverMethodListener.java b/src/main/java/roboguice/event/eventListener/ObserverMethodListener.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/event/eventListener/ObserverMethodListener.java
rename to src/main/java/roboguice/event/eventListener/ObserverMethodListener.java
diff --git a/roboguice/src/main/java/roboguice/event/eventListener/RunnableAsyncTaskAdaptor.java b/src/main/java/roboguice/event/eventListener/RunnableAsyncTaskAdaptor.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/event/eventListener/RunnableAsyncTaskAdaptor.java
rename to src/main/java/roboguice/event/eventListener/RunnableAsyncTaskAdaptor.java
diff --git a/roboguice/src/main/java/roboguice/event/eventListener/UIThreadEventListenerDecorator.java b/src/main/java/roboguice/event/eventListener/UIThreadEventListenerDecorator.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/event/eventListener/UIThreadEventListenerDecorator.java
rename to src/main/java/roboguice/event/eventListener/UIThreadEventListenerDecorator.java
diff --git a/roboguice/src/main/java/roboguice/event/eventListener/factory/EventListenerThreadingDecorator.java b/src/main/java/roboguice/event/eventListener/factory/EventListenerThreadingDecorator.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/event/eventListener/factory/EventListenerThreadingDecorator.java
rename to src/main/java/roboguice/event/eventListener/factory/EventListenerThreadingDecorator.java
diff --git a/roboguice/src/main/java/roboguice/event/eventListener/javaassist/RuntimeSupport.java b/src/main/java/roboguice/event/eventListener/javaassist/RuntimeSupport.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/event/eventListener/javaassist/RuntimeSupport.java
rename to src/main/java/roboguice/event/eventListener/javaassist/RuntimeSupport.java
diff --git a/src/main/java/roboguice/fragment/FragmentUtil.java b/src/main/java/roboguice/fragment/FragmentUtil.java
new file mode 100644
index 000000000..11dbc5daa
--- /dev/null
+++ b/src/main/java/roboguice/fragment/FragmentUtil.java
@@ -0,0 +1,66 @@
+package roboguice.fragment;
+
+import com.google.inject.Provider;
+
+import android.app.Activity;
+import android.view.View;
+
+/**
+ * Fragment utility class, it's actual implementation will use native or support library v4
+ * fragment's based
+ * on whether or not the underlying app uses support library or not.
+ *
+ * @author Charles Munger
+ */
+@SuppressWarnings({ "unchecked", "rawtypes", "PMD" }) //Need an unchecked conversion
+public final class FragmentUtil {
+  public static final String SUPPORT_PACKAGE = "android.support.v4.app.";
+  public static final String NATIVE_PACKAGE = "android.app.";
+
+  @SuppressWarnings({ "checkstyle:visibilitymodifier", "checkstyle:staticvariablename" })
+  public static f nativeFrag = null;
+  @SuppressWarnings({ "checkstyle:visibilitymodifier", "checkstyle:staticvariablename" })
+  public static f supportFrag = null;
+  @SuppressWarnings({ "checkstyle:visibilitymodifier", "checkstyle:staticvariablename" })
+  public static Class<? extends Activity> supportActivity = null;
+  @SuppressWarnings({ "checkstyle:visibilitymodifier", "checkstyle:staticvariablename" })
+  public static boolean hasNative = false;
+  @SuppressWarnings({ "checkstyle:visibilitymodifier", "checkstyle:staticvariablename" })
+  public static boolean hasSupport = false;
+
+  @SuppressWarnings("checkstyle:typename")
+  public interface f<fragType, fragManagerType> {
+    View getView(fragType frag);
+
+    fragType findFragmentById(fragManagerType fm, int id);
+
+    fragType findFragmentByTag(fragManagerType fm, String tag);
+
+    Class<fragType> fragmentType();
+
+    Class<fragManagerType> fragmentManagerType();
+
+    Class<Provider<fragManagerType>> fragmentManagerProviderType();
+  }
+
+  static {
+    try {
+      nativeFrag =
+          (f) Class.forName("roboguice.fragment.provided.NativeFragmentUtil").newInstance();
+      hasNative = nativeFrag != null;
+    } catch (Throwable e) {}
+
+    try {
+      supportFrag =
+          (f) Class.forName("roboguice.fragment.support.SupportFragmentUtil").newInstance();
+      supportActivity =
+          (Class<? extends Activity>) Class.forName(SUPPORT_PACKAGE + "FragmentActivity");
+      hasSupport = supportFrag != null && supportActivity != null;
+    } catch (Throwable e) {}
+  }
+
+  private FragmentUtil() {
+    //private utility class constructor
+  }
+}
+
diff --git a/roboguice/src/main/java/roboguice/fragment/RoboDialogFragment.java b/src/main/java/roboguice/fragment/RoboDialogFragment.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/fragment/RoboDialogFragment.java
rename to src/main/java/roboguice/fragment/RoboDialogFragment.java
diff --git a/roboguice/src/main/java/roboguice/fragment/RoboFragment.java b/src/main/java/roboguice/fragment/RoboFragment.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/fragment/RoboFragment.java
rename to src/main/java/roboguice/fragment/RoboFragment.java
diff --git a/roboguice/src/main/java/roboguice/fragment/RoboListFragment.java b/src/main/java/roboguice/fragment/RoboListFragment.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/fragment/RoboListFragment.java
rename to src/main/java/roboguice/fragment/RoboListFragment.java
diff --git a/roboguice/src/main/java/roboguice/fragment/provided/NativeFragmentUtil.java b/src/main/java/roboguice/fragment/provided/NativeFragmentUtil.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/fragment/provided/NativeFragmentUtil.java
rename to src/main/java/roboguice/fragment/provided/NativeFragmentUtil.java
diff --git a/roboguice/src/main/java/roboguice/fragment/provided/RoboDialogFragment.java b/src/main/java/roboguice/fragment/provided/RoboDialogFragment.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/fragment/provided/RoboDialogFragment.java
rename to src/main/java/roboguice/fragment/provided/RoboDialogFragment.java
diff --git a/roboguice/src/main/java/roboguice/fragment/provided/RoboFragment.java b/src/main/java/roboguice/fragment/provided/RoboFragment.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/fragment/provided/RoboFragment.java
rename to src/main/java/roboguice/fragment/provided/RoboFragment.java
diff --git a/roboguice/src/main/java/roboguice/fragment/provided/RoboListFragment.java b/src/main/java/roboguice/fragment/provided/RoboListFragment.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/fragment/provided/RoboListFragment.java
rename to src/main/java/roboguice/fragment/provided/RoboListFragment.java
diff --git a/roboguice/src/main/java/roboguice/fragment/provided/RoboPreferenceFragment.java b/src/main/java/roboguice/fragment/provided/RoboPreferenceFragment.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/fragment/provided/RoboPreferenceFragment.java
rename to src/main/java/roboguice/fragment/provided/RoboPreferenceFragment.java
diff --git a/roboguice/src/main/java/roboguice/fragment/support/SupportFragmentUtil.java b/src/main/java/roboguice/fragment/support/SupportFragmentUtil.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/fragment/support/SupportFragmentUtil.java
rename to src/main/java/roboguice/fragment/support/SupportFragmentUtil.java
diff --git a/roboguice/src/main/java/roboguice/inject/AccountManagerProvider.java b/src/main/java/roboguice/inject/AccountManagerProvider.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/AccountManagerProvider.java
rename to src/main/java/roboguice/inject/AccountManagerProvider.java
diff --git a/roboguice/src/main/java/roboguice/inject/AssetManagerProvider.java b/src/main/java/roboguice/inject/AssetManagerProvider.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/AssetManagerProvider.java
rename to src/main/java/roboguice/inject/AssetManagerProvider.java
diff --git a/roboguice/src/main/java/roboguice/inject/ContentResolverProvider.java b/src/main/java/roboguice/inject/ContentResolverProvider.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/ContentResolverProvider.java
rename to src/main/java/roboguice/inject/ContentResolverProvider.java
diff --git a/roboguice/src/main/java/roboguice/inject/ContentView.java b/src/main/java/roboguice/inject/ContentView.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/ContentView.java
rename to src/main/java/roboguice/inject/ContentView.java
diff --git a/roboguice/src/main/java/roboguice/inject/ContentViewListener.java b/src/main/java/roboguice/inject/ContentViewListener.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/ContentViewListener.java
rename to src/main/java/roboguice/inject/ContentViewListener.java
diff --git a/roboguice/src/main/java/roboguice/inject/ContextScope.java b/src/main/java/roboguice/inject/ContextScope.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/ContextScope.java
rename to src/main/java/roboguice/inject/ContextScope.java
diff --git a/roboguice/src/main/java/roboguice/inject/ContextScopedProvider.java b/src/main/java/roboguice/inject/ContextScopedProvider.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/ContextScopedProvider.java
rename to src/main/java/roboguice/inject/ContextScopedProvider.java
diff --git a/roboguice/src/main/java/roboguice/inject/ContextScopedRoboInjector.java b/src/main/java/roboguice/inject/ContextScopedRoboInjector.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/ContextScopedRoboInjector.java
rename to src/main/java/roboguice/inject/ContextScopedRoboInjector.java
diff --git a/roboguice/src/main/java/roboguice/inject/ContextScopedSystemServiceProvider.java b/src/main/java/roboguice/inject/ContextScopedSystemServiceProvider.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/ContextScopedSystemServiceProvider.java
rename to src/main/java/roboguice/inject/ContextScopedSystemServiceProvider.java
diff --git a/roboguice/src/main/java/roboguice/inject/ContextSingleton.java b/src/main/java/roboguice/inject/ContextSingleton.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/ContextSingleton.java
rename to src/main/java/roboguice/inject/ContextSingleton.java
diff --git a/roboguice/src/main/java/roboguice/inject/ExtraConverter.java b/src/main/java/roboguice/inject/ExtraConverter.java
similarity index 97%
rename from roboguice/src/main/java/roboguice/inject/ExtraConverter.java
rename to src/main/java/roboguice/inject/ExtraConverter.java
index 6768cf4a9..c7fa1722c 100644
--- a/roboguice/src/main/java/roboguice/inject/ExtraConverter.java
+++ b/src/main/java/roboguice/inject/ExtraConverter.java
@@ -1,59 +1,59 @@
-/*
- * Copyright 2009 Michael Burton
- *
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package roboguice.inject;
-
-import roboguice.inject.ExtrasListener.ExtrasMembersInjector;
-
-import com.google.inject.Injector;
-import com.google.inject.Singleton;
-
-/**
- * An object capable of providing objects of type {@code TO}, using extras of
- * type {@code FROM}.<br />
- * <br />
- * Converters enable you to convert Android Extras to complex objects. For
- * instance, sending a long timestamp as an extra, and getting a Date injected.<br />
- * <br />
- * Once you have created an {@link ExtraConverter} implementation, you should
- * bind it in your module configuration. Usage example: {@code bind(new
- * TypeLiteral<ExtraConverter<Long, Date>>() ).to(DateExtraConverter.class);}<br />
- * <br />
- * Usage in your components is as simple as : {@code
- * \@InjectExtra("timestampExtra") protected Date date; } <br />
- * <br />
- * You will usually want your converters to be singletons, so you should
- * annotate them with {@link Singleton}.<br />
- * <br />
- * Please notice that the context in which the bean that gets the extra injected
- * is scoped should implements {@link InjectorProvider} to get the convert
- * mechanism to work. This is because the {@link ExtrasMembersInjector} need an
- * {@link Injector} to get an {@link ExtraConverter} instance.
- * 
- * @param <FROM>
- * @param <TO>
- * 
- * @author Pierre-Yves Ricau (py.ricau+roboguice@gmail.com)
- */
-public interface ExtraConverter<FROM, TO> {
-    /**
-     * Converts an instance of FROM to an instances of TO. May return null.
-     *
-     * @param from
-     *            The extra value to be converted.
-     * @return The converted object that will be injected.
-     */
-    TO convert(FROM from);
-}
+/*
+ * Copyright 2009 Michael Burton
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package roboguice.inject;
+
+import roboguice.inject.ExtrasListener.ExtrasMembersInjector;
+
+import com.google.inject.Injector;
+import com.google.inject.Singleton;
+
+/**
+ * An object capable of providing objects of type {@code TO}, using extras of
+ * type {@code FROM}.<br />
+ * <br />
+ * Converters enable you to convert Android Extras to complex objects. For
+ * instance, sending a long timestamp as an extra, and getting a Date injected.<br />
+ * <br />
+ * Once you have created an {@link ExtraConverter} implementation, you should
+ * bind it in your module configuration. Usage example: {@code bind(new
+ * TypeLiteral<ExtraConverter<Long, Date>>() ).to(DateExtraConverter.class);}<br />
+ * <br />
+ * Usage in your components is as simple as : {@code
+ * \@InjectExtra("timestampExtra") protected Date date; } <br />
+ * <br />
+ * You will usually want your converters to be singletons, so you should
+ * annotate them with {@link Singleton}.<br />
+ * <br />
+ * Please notice that the context in which the bean that gets the extra injected
+ * is scoped should implements {@link InjectorProvider} to get the convert
+ * mechanism to work. This is because the {@link ExtrasMembersInjector} need an
+ * {@link Injector} to get an {@link ExtraConverter} instance.
+ * 
+ * @param <FROM>
+ * @param <TO>
+ * 
+ * @author Pierre-Yves Ricau (py.ricau+roboguice@gmail.com)
+ */
+public interface ExtraConverter<FROM, TO> {
+    /**
+     * Converts an instance of FROM to an instances of TO. May return null.
+     *
+     * @param from
+     *            The extra value to be converted.
+     * @return The converted object that will be injected.
+     */
+    TO convert(FROM from);
+}
diff --git a/roboguice/src/main/java/roboguice/inject/ExtrasListener.java b/src/main/java/roboguice/inject/ExtrasListener.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/ExtrasListener.java
rename to src/main/java/roboguice/inject/ExtrasListener.java
diff --git a/roboguice/src/main/java/roboguice/inject/FragmentManagerProvider.java b/src/main/java/roboguice/inject/FragmentManagerProvider.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/FragmentManagerProvider.java
rename to src/main/java/roboguice/inject/FragmentManagerProvider.java
diff --git a/roboguice/src/main/java/roboguice/inject/HandlerProvider.java b/src/main/java/roboguice/inject/HandlerProvider.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/HandlerProvider.java
rename to src/main/java/roboguice/inject/HandlerProvider.java
diff --git a/roboguice/src/main/java/roboguice/inject/InjectExtra.java b/src/main/java/roboguice/inject/InjectExtra.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/InjectExtra.java
rename to src/main/java/roboguice/inject/InjectExtra.java
diff --git a/roboguice/src/main/java/roboguice/inject/InjectFragment.java b/src/main/java/roboguice/inject/InjectFragment.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/InjectFragment.java
rename to src/main/java/roboguice/inject/InjectFragment.java
diff --git a/roboguice/src/main/java/roboguice/inject/InjectPreference.java b/src/main/java/roboguice/inject/InjectPreference.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/InjectPreference.java
rename to src/main/java/roboguice/inject/InjectPreference.java
diff --git a/roboguice/src/main/java/roboguice/inject/InjectResource.java b/src/main/java/roboguice/inject/InjectResource.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/InjectResource.java
rename to src/main/java/roboguice/inject/InjectResource.java
diff --git a/roboguice/src/main/java/roboguice/inject/InjectView.java b/src/main/java/roboguice/inject/InjectView.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/InjectView.java
rename to src/main/java/roboguice/inject/InjectView.java
diff --git a/roboguice/src/main/java/roboguice/inject/NullProvider.java b/src/main/java/roboguice/inject/NullProvider.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/NullProvider.java
rename to src/main/java/roboguice/inject/NullProvider.java
diff --git a/roboguice/src/main/java/roboguice/inject/Nullable.java b/src/main/java/roboguice/inject/Nullable.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/Nullable.java
rename to src/main/java/roboguice/inject/Nullable.java
diff --git a/roboguice/src/main/java/roboguice/inject/PreferenceListener.java b/src/main/java/roboguice/inject/PreferenceListener.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/PreferenceListener.java
rename to src/main/java/roboguice/inject/PreferenceListener.java
diff --git a/roboguice/src/main/java/roboguice/inject/ResourceFactory.java b/src/main/java/roboguice/inject/ResourceFactory.java
similarity index 96%
rename from roboguice/src/main/java/roboguice/inject/ResourceFactory.java
rename to src/main/java/roboguice/inject/ResourceFactory.java
index 0a1a66c26..f30c74cba 100644
--- a/roboguice/src/main/java/roboguice/inject/ResourceFactory.java
+++ b/src/main/java/roboguice/inject/ResourceFactory.java
@@ -1,24 +1,24 @@
-/*
- * Copyright 2009 Michael Burton
- * 
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package roboguice.inject;
-
-/**
- *
- * @author Pierre-Yves Ricau (py.ricau+roboguice@gmail.com)
- */
-public interface ResourceFactory<T> {
-    T get(int id);
-}
+/*
+ * Copyright 2009 Michael Burton
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package roboguice.inject;
+
+/**
+ *
+ * @author Pierre-Yves Ricau (py.ricau+roboguice@gmail.com)
+ */
+public interface ResourceFactory<T> {
+    T get(int id);
+}
diff --git a/roboguice/src/main/java/roboguice/inject/ResourceListener.java b/src/main/java/roboguice/inject/ResourceListener.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/ResourceListener.java
rename to src/main/java/roboguice/inject/ResourceListener.java
diff --git a/roboguice/src/main/java/roboguice/inject/ResourcesProvider.java b/src/main/java/roboguice/inject/ResourcesProvider.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/ResourcesProvider.java
rename to src/main/java/roboguice/inject/ResourcesProvider.java
diff --git a/roboguice/src/main/java/roboguice/inject/RoboApplicationProvider.java b/src/main/java/roboguice/inject/RoboApplicationProvider.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/RoboApplicationProvider.java
rename to src/main/java/roboguice/inject/RoboApplicationProvider.java
diff --git a/roboguice/src/main/java/roboguice/inject/RoboInjector.java b/src/main/java/roboguice/inject/RoboInjector.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/RoboInjector.java
rename to src/main/java/roboguice/inject/RoboInjector.java
diff --git a/roboguice/src/main/java/roboguice/inject/SharedPreferencesName.java b/src/main/java/roboguice/inject/SharedPreferencesName.java
similarity index 96%
rename from roboguice/src/main/java/roboguice/inject/SharedPreferencesName.java
rename to src/main/java/roboguice/inject/SharedPreferencesName.java
index dc07f449f..2f11836fb 100644
--- a/roboguice/src/main/java/roboguice/inject/SharedPreferencesName.java
+++ b/src/main/java/roboguice/inject/SharedPreferencesName.java
@@ -1,19 +1,19 @@
-package roboguice.inject;
-
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-
-import java.lang.annotation.ElementType;
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-
-import com.google.inject.BindingAnnotation;
-
-/**
- * 
- * @author Pierre-Yves Ricau (py.ricau+roboguice@gmail.com)
- */
-@Retention(RUNTIME)
-@Target( { ElementType.FIELD, ElementType.PARAMETER, ElementType.METHOD })
-@BindingAnnotation
-public @interface SharedPreferencesName {
-}
+package roboguice.inject;
+
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import com.google.inject.BindingAnnotation;
+
+/**
+ * 
+ * @author Pierre-Yves Ricau (py.ricau+roboguice@gmail.com)
+ */
+@Retention(RUNTIME)
+@Target( { ElementType.FIELD, ElementType.PARAMETER, ElementType.METHOD })
+@BindingAnnotation
+public @interface SharedPreferencesName {
+}
diff --git a/roboguice/src/main/java/roboguice/inject/SharedPreferencesProvider.java b/src/main/java/roboguice/inject/SharedPreferencesProvider.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/SharedPreferencesProvider.java
rename to src/main/java/roboguice/inject/SharedPreferencesProvider.java
diff --git a/roboguice/src/main/java/roboguice/inject/StringResourceFactory.java b/src/main/java/roboguice/inject/StringResourceFactory.java
similarity index 96%
rename from roboguice/src/main/java/roboguice/inject/StringResourceFactory.java
rename to src/main/java/roboguice/inject/StringResourceFactory.java
index 60e4e5d5a..90d5311d2 100644
--- a/roboguice/src/main/java/roboguice/inject/StringResourceFactory.java
+++ b/src/main/java/roboguice/inject/StringResourceFactory.java
@@ -1,40 +1,40 @@
-/*
- * Copyright 2009 Michael Burton
- * 
- * Licensed under the Apache License, Version 2.0 (the "License"); you may not
- * use this file except in compliance with the License. You may obtain a copy of
- * the License at
- * 
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
- * License for the specific language governing permissions and limitations under
- * the License.
- */
-package roboguice.inject;
-
-import com.google.inject.Inject;
-import com.google.inject.Singleton;
-
-import android.content.res.Resources;
-
-/**
- *
- * @author Pierre-Yves Ricau (py.ricau+roboguice@gmail.com)
- */
-@Singleton
-public class StringResourceFactory implements ResourceFactory<String> {
-
-    protected Resources resources;
-
-    @Inject
-    public StringResourceFactory(Resources resources) {
-        this.resources = resources;
-    }
-
-    public String get(int id) {
-        return resources.getString(id);
-    }
-}
+/*
+ * Copyright 2009 Michael Burton
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package roboguice.inject;
+
+import com.google.inject.Inject;
+import com.google.inject.Singleton;
+
+import android.content.res.Resources;
+
+/**
+ *
+ * @author Pierre-Yves Ricau (py.ricau+roboguice@gmail.com)
+ */
+@Singleton
+public class StringResourceFactory implements ResourceFactory<String> {
+
+    protected Resources resources;
+
+    @Inject
+    public StringResourceFactory(Resources resources) {
+        this.resources = resources;
+    }
+
+    public String get(int id) {
+        return resources.getString(id);
+    }
+}
diff --git a/roboguice/src/main/java/roboguice/inject/SystemServiceProvider.java b/src/main/java/roboguice/inject/SystemServiceProvider.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/inject/SystemServiceProvider.java
rename to src/main/java/roboguice/inject/SystemServiceProvider.java
diff --git a/src/main/java/roboguice/inject/ViewListener.java b/src/main/java/roboguice/inject/ViewListener.java
new file mode 100644
index 000000000..b5c8d69ea
--- /dev/null
+++ b/src/main/java/roboguice/inject/ViewListener.java
@@ -0,0 +1,325 @@
+/*
+ * Copyright 2009 Michael Burton
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions
+ * and limitations under the License.
+ */
+package roboguice.inject;
+
+import com.google.inject.MembersInjector;
+import com.google.inject.Provider;
+import com.google.inject.TypeLiteral;
+import com.google.inject.spi.TypeEncounter;
+import com.google.inject.spi.TypeListener;
+
+import android.app.Activity;
+import android.content.Context;
+import android.view.View;
+
+import java.lang.annotation.Annotation;
+import java.lang.ref.WeakReference;
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+import java.util.ArrayList;
+import java.util.WeakHashMap;
+
+import javax.inject.Singleton;
+
+import roboguice.fragment.FragmentUtil;
+import roboguice.fragment.FragmentUtil.f;
+
+@Singleton
+@SuppressWarnings({ "unchecked", "PMD" })
+public class ViewListener implements TypeListener {
+
+  @Override
+  public <I> void hear(TypeLiteral<I> typeLiteral, TypeEncounter<I> typeEncounter) {
+
+    for (Class<?> c = typeLiteral.getRawType(); c != Object.class; c = c.getSuperclass()) {
+      for (Field field : c.getDeclaredFields()) {
+        if (field.isAnnotationPresent(InjectView.class)) {
+          if (Modifier.isStatic(field.getModifiers())) {
+            throw new UnsupportedOperationException("Views may not be statically injected");
+          } else if (!View.class.isAssignableFrom(field.getType())) {
+            throw new UnsupportedOperationException(
+                "You may only use @InjectView on fields descended from type View");
+          } else if (Context.class.isAssignableFrom(field.getDeclaringClass()) &&
+                     !Activity.class.isAssignableFrom(field.getDeclaringClass())) {
+            throw new UnsupportedOperationException(
+                "You may only use @InjectView in Activity contexts");
+          } else {
+            final f<?, ?> utils = FragmentUtil.hasSupport
+                                  && (FragmentUtil.supportActivity.isAssignableFrom(
+                field.getDeclaringClass())
+                                      || FragmentUtil.supportFrag.fragmentType()
+                                                                 .isAssignableFrom(
+                                                                     field.getDeclaringClass()))
+                                  ? FragmentUtil.supportFrag : FragmentUtil.nativeFrag;
+
+            typeEncounter.register(new ViewMembersInjector<I>(
+                field, field.getAnnotation(InjectView.class),
+                typeEncounter, utils));
+          }
+        } else if (field.isAnnotationPresent(InjectFragment.class)) {
+          if (!FragmentUtil.hasNative && !FragmentUtil.hasSupport) {
+            throw new RuntimeException(
+                new ClassNotFoundException("No fragment classes were available"));
+          } else if (Modifier.isStatic(field.getModifiers())) {
+            throw new UnsupportedOperationException("Fragments may not be statically injected");
+
+          } else {
+            final boolean assignableFromNative = FragmentUtil.hasNative &&
+                                                 FragmentUtil.nativeFrag.fragmentType()
+                                                                        .isAssignableFrom(
+                                                                            field.getType());
+            final boolean assignableFromSupport = FragmentUtil.hasSupport &&
+                                                  FragmentUtil.supportFrag.fragmentType()
+                                                                          .isAssignableFrom(
+                                                                              field.getType());
+            final boolean isSupportActivity = FragmentUtil.hasSupport &&
+                                              FragmentUtil.supportActivity.isAssignableFrom(
+                                                  field.getDeclaringClass());
+            final boolean isNativeActivity =
+                !isSupportActivity && Activity.class.isAssignableFrom(field.getDeclaringClass());
+
+            if (isNativeActivity && assignableFromNative ||
+                isSupportActivity && assignableFromSupport) {
+              typeEncounter.register(
+                  new ViewMembersInjector<I>(field, field.getAnnotation(InjectFragment.class),
+                                             typeEncounter,
+                                             isNativeActivity ? FragmentUtil.nativeFrag :
+                                             FragmentUtil.supportFrag));
+            } else if (isNativeActivity && !assignableFromNative) {
+              // Error messages - these filters are comprehensive. The
+              // final else block will never execute.
+              throw new UnsupportedOperationException(
+                  "You may only use @InjectFragment in native activities if fields are descended "
+                  + "from type android.app.Fragment");
+            } else if (!isSupportActivity && !isNativeActivity) {
+              throw new UnsupportedOperationException(
+                  "You may only use @InjectFragment in Activity contexts");
+            } else if (isSupportActivity && !assignableFromSupport) {
+              throw new UnsupportedOperationException(
+                  "You may only use @InjectFragment in support activities if fields are descended"
+                  + " from type android.support.v4.app.Fragment");
+            } else {
+              throw new RuntimeException("This should never happen.");
+            }
+          }
+        }
+      }
+    }
+  }
+
+
+  /**
+   * This class gets twice as many providers as necessary to do its job,
+   * look into optimizations in
+   * the future if this is a bottleneck
+   */
+  public static class ViewMembersInjector<T> implements MembersInjector<T> {
+    protected static WeakHashMap<Object, ArrayList<ViewMembersInjector<?>>> viewMembersInjectors =
+        new WeakHashMap<Object, ArrayList<ViewMembersInjector<?>>>();
+
+    protected Field field;
+    protected Annotation annotation;
+    protected WeakReference<T> instanceRef;
+    @SuppressWarnings("rawtypes")
+    protected FragmentUtil.f fragUtils;
+    @SuppressWarnings("rawtypes")
+    protected Provider fragManager;
+    protected Provider<Activity> activityProvider;
+
+    public ViewMembersInjector(Field field,
+                               Annotation annotation,
+                               TypeEncounter<T> typeEncounter,
+                               FragmentUtil.f<?, ?> utils) {
+      this.field = field;
+      this.annotation = annotation;
+      this.activityProvider = typeEncounter.getProvider(Activity.class);
+
+      if (utils != null) {
+        this.fragUtils = utils;
+        this.fragManager = typeEncounter.getProvider(utils.fragmentManagerType());
+      }
+
+    }
+
+    /**
+     * This is called when instance is injected by guice.  Because the views may or may not
+     * be set
+     * up yet,
+     * we don't do the real view injection until later.
+     *
+     * @param instance the instance being injected by guice
+     */
+    public void injectMembers(T instance) {
+      synchronized (ViewMembersInjector.class) {
+        final Activity activity = activityProvider.get();
+        final Object key =
+            fragUtils != null && fragUtils.fragmentType().isInstance(instance) ? instance :
+            activity;
+        if (key == null) {
+          return;
+        }
+
+        // Add a view injector for the key
+        ArrayList<ViewMembersInjector<?>> injectors = viewMembersInjectors.get(key);
+        if (injectors == null) {
+          injectors = new ArrayList<ViewMembersInjector<?>>();
+          viewMembersInjectors.put(key, injectors);
+        }
+        injectors.add(this);
+
+        this.instanceRef = new WeakReference<T>(instance);
+      }
+    }
+
+    public void reallyInjectMembers(Object activityOrFragment) {
+      if (annotation instanceof InjectView) {
+        reallyInjectMemberViews(activityOrFragment);
+      } else {
+        reallyInjectMemberFragments(activityOrFragment);
+      }
+    }
+
+    /**
+     * This is when the view references are actually evaluated.
+     * <p/>
+     * I don't like all the hacks I had to put into this method.  Instance is the object you're
+     * injecting into.  ActivityOrFragment is the activity or fragment that you're injecting
+     * views into.  Instance must equal activityOrFragment is activityOrFragment is a fragment,
+     * but they may differ if activityOrFragment is an activity.  They should be allowed to
+     * differ
+     * so that you can inject views into arbitrary objects, but I don't know how to determine
+     * whether
+     * to get the view from the fragment or the activity for an arbitrary object, so I'm
+     * artificially
+     * limiting injection targets to the fragment itself for fragments.
+     *
+     * @param activityOrFragment an activity or fragment
+     */
+    protected void reallyInjectMemberViews(Object activityOrFragment) {
+
+      final T instance =
+          fragUtils != null && fragUtils.fragmentType().isInstance(activityOrFragment) ?
+          (T) activityOrFragment : instanceRef.get();
+      if (instance == null) {
+        return;
+      }
+
+      if (activityOrFragment instanceof Context && !(activityOrFragment instanceof Activity)) {
+        throw new UnsupportedOperationException("Can't inject view into a non-Activity context");
+      }
+
+      View view = null;
+
+      try {
+        final InjectView injectView = (InjectView) annotation;
+        final int id = injectView.value();
+
+        if (id >= 0) {
+          view = fragUtils != null && fragUtils.fragmentType().isInstance(activityOrFragment) ?
+                 fragUtils.getView(activityOrFragment).findViewById(id) :
+                 ((Activity) activityOrFragment).findViewById(id);
+        } else {
+          view = fragUtils != null && fragUtils.fragmentType().isInstance(activityOrFragment) ?
+                 fragUtils.getView(activityOrFragment).findViewWithTag(injectView.tag()) :
+                 ((Activity) activityOrFragment).getWindow()
+                                                .getDecorView()
+                                                .findViewWithTag(injectView.tag());
+        }
+
+        if (view == null && Nullable.notNullable(field)) {
+          throw new NullPointerException(
+              String.format("Can't inject null value into %s.%s when field is not @Nullable",
+                            field.getDeclaringClass(), field.getName()));
+        }
+
+        field.setAccessible(true);
+        field.set(instance, view);
+
+      } catch (IllegalAccessException e) {
+        throw new RuntimeException(e);
+
+      } catch (IllegalArgumentException f) {
+        throw new IllegalArgumentException(String.format("Can't assign %s value %s to %s field %s",
+                                                         view != null ? view.getClass() : "(null)",
+                                                         view,
+                                                         field.getType(), field.getName()), f);
+      }
+    }
+
+    /**
+     * This is when the view references are actually evaluated.
+     *
+     * @param activityOrFragment an activity or fragment
+     */
+    protected void reallyInjectMemberFragments(Object activityOrFragment) {
+
+      final T instance = instanceRef.get();
+      if (instance == null) {
+        return;
+      }
+
+      if (activityOrFragment instanceof Context && !(activityOrFragment instanceof Activity)) {
+        throw new UnsupportedOperationException(
+            "Can't inject fragment into a non-Activity context");
+      }
+
+      Object fragment = null;
+
+      try {
+        final InjectFragment injectFragment = (InjectFragment) annotation;
+        final int id = injectFragment.value();
+
+        if (id >= 0) {
+          fragment = fragUtils.findFragmentById(fragManager.get(), id);
+        } else {
+          fragment = fragUtils.findFragmentByTag(fragManager.get(), injectFragment.tag());
+        }
+
+        if (fragment == null && Nullable.notNullable(field)) {
+          throw new NullPointerException(
+              String.format("Can't inject null value into %s.%s when field is not @Nullable",
+                            field.getDeclaringClass(), field.getName()));
+        }
+
+        field.setAccessible(true);
+        field.set(instance, fragment);
+
+      } catch (IllegalAccessException e) {
+        throw new RuntimeException(e);
+
+      } catch (IllegalArgumentException f) {
+        throw new IllegalArgumentException(String.format("Can't assign %s value %s to %s field %s",
+                                                         fragment != null ? fragment.getClass() :
+                                                         "(null)", fragment,
+                                                         field.getType(), field.getName()), f);
+      }
+    }
+
+    protected static void injectViews(Object activityOrFragment) {
+      synchronized (ViewMembersInjector.class) {
+
+        final ArrayList<ViewMembersInjector<?>> injectors =
+            viewMembersInjectors.get(activityOrFragment);
+        if (injectors != null) {
+          for (ViewMembersInjector<?> viewMembersInjector : injectors) {
+            viewMembersInjector.reallyInjectMembers(activityOrFragment);
+          }
+        }
+      }
+    }
+  }
+
+}
diff --git a/roboguice/src/main/java/roboguice/receiver/RoboAppWidgetProvider.java b/src/main/java/roboguice/receiver/RoboAppWidgetProvider.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/receiver/RoboAppWidgetProvider.java
rename to src/main/java/roboguice/receiver/RoboAppWidgetProvider.java
diff --git a/roboguice/src/main/java/roboguice/receiver/RoboBroadcastReceiver.java b/src/main/java/roboguice/receiver/RoboBroadcastReceiver.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/receiver/RoboBroadcastReceiver.java
rename to src/main/java/roboguice/receiver/RoboBroadcastReceiver.java
diff --git a/roboguice/src/main/java/roboguice/service/RoboIntentService.java b/src/main/java/roboguice/service/RoboIntentService.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/service/RoboIntentService.java
rename to src/main/java/roboguice/service/RoboIntentService.java
diff --git a/roboguice/src/main/java/roboguice/service/RoboService.java b/src/main/java/roboguice/service/RoboService.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/service/RoboService.java
rename to src/main/java/roboguice/service/RoboService.java
diff --git a/roboguice/src/main/java/roboguice/util/AndroidCallable.java b/src/main/java/roboguice/util/AndroidCallable.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/util/AndroidCallable.java
rename to src/main/java/roboguice/util/AndroidCallable.java
diff --git a/roboguice/src/main/java/roboguice/util/AndroidCallableI.java b/src/main/java/roboguice/util/AndroidCallableI.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/util/AndroidCallableI.java
rename to src/main/java/roboguice/util/AndroidCallableI.java
diff --git a/src/main/java/roboguice/util/AndroidCallableWrapper.java b/src/main/java/roboguice/util/AndroidCallableWrapper.java
new file mode 100644
index 000000000..46b3a7ef2
--- /dev/null
+++ b/src/main/java/roboguice/util/AndroidCallableWrapper.java
@@ -0,0 +1,150 @@
+package roboguice.util;
+
+import android.os.Handler;
+import android.os.Looper;
+
+import java.util.HashMap;
+import java.util.concurrent.Callable;
+import java.util.concurrent.CountDownLatch;
+
+// TODO
+// - has no execute() method
+// - has no progress support
+// - has no onInterrupted support
+// - add retry support
+
+
+public class AndroidCallableWrapper<ResultT> implements Runnable {
+  protected Handler handler;
+  protected AndroidCallableI<ResultT> delegate;
+  protected StackTraceElement[] launchLocation;
+
+  @SuppressWarnings("MALICIOUS_CODE")
+  public AndroidCallableWrapper(Handler handler,
+                                AndroidCallableI<ResultT> delegate,
+                                StackTraceElement[] launchLocation) {
+    this.delegate = delegate;
+    this.launchLocation = launchLocation;
+    this.handler = handler != null ? handler : new Handler(Looper.getMainLooper());
+  }
+
+  @java.lang.SuppressWarnings("unchecked")
+  @Override
+  public void run() {
+    ResultT result = null;
+    Exception exception = null;
+    try {
+      if (isPreCallOverriden((Class<? extends AndroidCallableI<?>>) delegate.getClass())) {
+        beforeCall();
+      }
+
+      result = doDoInBackgroundThread();
+    } catch (Exception e) {
+      exception = e;
+    } finally {
+      afterCall(result, exception);
+    }
+  }
+
+
+  void beforeCall() throws Exception {
+    final CountDownLatch latch = new CountDownLatch(1);
+    final Exception[] exceptions = new Exception[1];
+
+    // Execute onSuccess in the UI thread, but wait
+    // for it to complete.
+    // If it throws an exception, capture that exception
+    // and rethrow it later.
+    handler.post(new Runnable() {
+      public void run() {
+        try {
+          new Callable<Object>() {
+            @Override
+            public Object call() throws Exception {
+              doOnPreCall();
+              return null;
+            }
+          }.call();
+        } catch (Exception e) {
+          exceptions[0] = e;
+        } finally {
+          latch.countDown();
+        }
+      }
+    });
+
+    // Wait for onSuccess to finish
+    latch.await();
+
+    if (exceptions[0] != null) {
+      throw exceptions[0];
+    }
+
+  }
+
+  void afterCall(final ResultT result, final Exception e) {
+    handler.post(new Runnable() {
+      @Override
+      public void run() {
+        try {
+          if (e != null) {
+            if (launchLocation != null) {
+              final StackTraceElement[] stackTrace = e.getStackTrace();
+              final StackTraceElement[] result =
+                  new StackTraceElement[stackTrace.length + launchLocation.length];
+              System.arraycopy(stackTrace, 0, result, 0, stackTrace.length);
+              System.arraycopy(launchLocation, 0, result, stackTrace.length, launchLocation.length);
+              e.setStackTrace(result);
+            }
+            doOnException(e);
+          } else {
+            doOnSuccess(result);
+          }
+        } finally {
+          doOnFinally();
+        }
+      }
+    });
+  }
+
+  protected void doOnPreCall() throws Exception {
+    delegate.onPreCall();
+  }
+
+  protected ResultT doDoInBackgroundThread() throws Exception {
+    return delegate.doInBackground();
+  }
+
+  protected void doOnSuccess(ResultT result) {
+    delegate.onSuccess(result);
+  }
+
+  protected void doOnException(Exception e) {
+    delegate.onException(e);
+  }
+
+  protected void doOnFinally() {
+    delegate.onFinally();
+  }
+
+
+  static HashMap<Class<? extends AndroidCallableI<?>>, Boolean> isPreCallOverriddenMap =
+      new HashMap<Class<? extends AndroidCallableI<?>>, Boolean>();
+
+  static boolean isPreCallOverriden(Class<? extends AndroidCallableI<?>> subClass) {
+    try {
+      Boolean tmp = isPreCallOverriddenMap.get(subClass);
+      if (tmp != null) {
+        return tmp;
+      }
+
+      tmp = subClass.getMethod("onPreCall").getDeclaringClass() != AndroidCallableWrapper.class;
+      isPreCallOverriddenMap.put(subClass, tmp);
+      return tmp;
+
+    } catch (NoSuchMethodException e) {
+      throw new RuntimeException(e);
+    }
+  }
+
+}
diff --git a/src/main/java/roboguice/util/Ln.java b/src/main/java/roboguice/util/Ln.java
new file mode 100644
index 000000000..479c8b890
--- /dev/null
+++ b/src/main/java/roboguice/util/Ln.java
@@ -0,0 +1,143 @@
+package roboguice.util;
+
+import com.google.inject.Inject;
+
+
+/**
+ * A more natural android logging facility.
+ * <p/>
+ * WARNING: CHECK OUT COMMON PITFALLS BELOW
+ * <p/>
+ * Unlike {@link android.util.Log}, Log provides sensible defaults.
+ * Debug and Verbose logging is enabled for applications that
+ * have "android:debuggable=true" in their AndroidManifest.xml.
+ * For apps built using SDK Tools r8 or later, this means any debug
+ * build.  Release builds built with r8 or later will have verbose
+ * and debug log messages turned off.
+ * <p/>
+ * The default tag is automatically set to your app's packagename,
+ * and the current context (eg. activity, service, application, etc)
+ * is appended as well.  You can add an additional parameter to the
+ * tag using {@link #Log(String)}.
+ * <p/>
+ * Log-levels can be programatically overridden for specific instances
+ * using {@link #Log(String, boolean, boolean)}.
+ * <p/>
+ * Log messages may optionally use {@link String#format(String, Object...)}
+ * formatting, which will not be evaluated unless the log statement is output.
+ * Additional parameters to the logging statement are treated as varrgs parameters
+ * to {@link String#format(String, Object...)}
+ * <p/>
+ * Also, the current file and line is automatically appended to the tag
+ * (this is only done if debug is enabled for performance reasons).
+ * <p/>
+ * COMMON PITFALLS:
+ * * Make sure you put the exception FIRST in the call.  A common
+ * mistake is to place it last as is the android.util.Log convention,
+ * but then it will get treated as varargs parameter.
+ * * vararg parameters are not appended to the log message!  You must
+ * insert them into the log message using %s or another similar
+ * format parameter
+ * <p/>
+ * Usage Examples:
+ * <p/>
+ * Ln.v("hello there");
+ * Ln.d("%s %s", "hello", "there");
+ * Ln.e( exception, "Error during some operation");
+ * Ln.w( exception, "Error during %s operation", "some other");
+ */
+@SuppressWarnings({ "ImplicitArrayToString" })
+public final class Ln {
+
+  /**
+   * lnImpl is initially set to LnImpl() with sensible defaults, then replaced
+   * by whatever binding you choose during guice static injection pass.
+   */
+  @SuppressWarnings(value = "MS_SHOULD_BE_FINAL")
+  @Inject(optional = true) protected static LnInterface lnImpl = new LnImpl();
+
+
+  private Ln() {}
+
+
+  public static int v(Throwable t) {
+    return lnImpl.v(t);
+  }
+
+  public static int v(Object s1, Object... args) {
+    return lnImpl.v(s1, args);
+  }
+
+  public static int v(Throwable throwable, Object s1, Object... args) {
+    return lnImpl.v(throwable, s1, args);
+  }
+
+  public static int d(Throwable t) {
+    return lnImpl.d(t);
+  }
+
+  public static int d(Object s1, Object... args) {
+    return lnImpl.d(s1, args);
+  }
+
+  public static int d(Throwable throwable, Object s1, Object... args) {
+    return lnImpl.d(throwable, s1, args);
+  }
+
+  public static int i(Throwable t) {
+    return lnImpl.i(t);
+  }
+
+  public static int i(Object s1, Object... args) {
+    return lnImpl.i(s1, args);
+  }
+
+  public static int i(Throwable throwable, Object s1, Object... args) {
+    return lnImpl.i(throwable, s1, args);
+  }
+
+  public static int w(Throwable t) {
+    return lnImpl.w(t);
+  }
+
+  public static int w(Object s1, Object... args) {
+    return lnImpl.w(s1, args);
+  }
+
+  public static int w(Throwable throwable, Object s1, Object... args) {
+    return lnImpl.w(throwable, s1, args);
+  }
+
+  public static int e(Throwable t) {
+    return lnImpl.e(t);
+  }
+
+  public static int e(Object s1, Object... args) {
+    return lnImpl.e(s1, args);
+  }
+
+  public static int e(Throwable throwable, Object s1, Object... args) {
+    return lnImpl.e(throwable, s1, args);
+  }
+
+  public static boolean isDebugEnabled() {
+    return lnImpl.isDebugEnabled();
+  }
+
+  public static boolean isVerboseEnabled() {
+    return lnImpl.isVerboseEnabled();
+  }
+
+  public static int getLoggingLevel() {
+    return lnImpl.getLoggingLevel();
+  }
+
+  public static void setLoggingLevel(int level) {
+    lnImpl.setLoggingLevel(level);
+  }
+
+  public static String logLevelToString(int loglevel) {
+    return lnImpl.logLevelToString(loglevel);
+  }
+
+}
diff --git a/roboguice/src/main/java/roboguice/util/LnImpl.java b/src/main/java/roboguice/util/LnImpl.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/util/LnImpl.java
rename to src/main/java/roboguice/util/LnImpl.java
diff --git a/roboguice/src/main/java/roboguice/util/LnInterface.java b/src/main/java/roboguice/util/LnInterface.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/util/LnInterface.java
rename to src/main/java/roboguice/util/LnInterface.java
diff --git a/roboguice/src/main/java/roboguice/util/RoboAsyncTask.java b/src/main/java/roboguice/util/RoboAsyncTask.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/util/RoboAsyncTask.java
rename to src/main/java/roboguice/util/RoboAsyncTask.java
diff --git a/roboguice/src/main/java/roboguice/util/RoboContext.java b/src/main/java/roboguice/util/RoboContext.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/util/RoboContext.java
rename to src/main/java/roboguice/util/RoboContext.java
diff --git a/roboguice/src/main/java/roboguice/util/SafeAsyncTask.java b/src/main/java/roboguice/util/SafeAsyncTask.java
similarity index 100%
rename from roboguice/src/main/java/roboguice/util/SafeAsyncTask.java
rename to src/main/java/roboguice/util/SafeAsyncTask.java
diff --git a/src/main/java/roboguice/util/Strings.java b/src/main/java/roboguice/util/Strings.java
new file mode 100644
index 000000000..57d77b58d
--- /dev/null
+++ b/src/main/java/roboguice/util/Strings.java
@@ -0,0 +1,214 @@
+package roboguice.util;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.io.StringWriter;
+import java.io.Writer;
+import java.nio.charset.Charset;
+import java.security.InvalidParameterException;
+import java.security.MessageDigest;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Locale;
+import java.util.Map;
+
+public final class Strings {
+  private static final int DEFAULT_BUFFER_SIZE = 1024 * 4;
+
+  private Strings() {
+    // private utility class constructor
+  }
+
+  /**
+   * Like join, but allows for a distinct final delimiter. For english
+   * sentences such as "Alice, Bob and Charlie" use ", " and " and " as the
+   * delimiters.
+   *
+   * @param delimiter     usually ", "
+   * @param lastDelimiter usually " and "
+   * @param objs          the objects
+   * @param <T>           the type
+   * @return a string
+   */
+  public static <T> String joinAnd(final String delimiter,
+                                   final String lastDelimiter,
+                                   final Collection<T> objs) {
+    if (objs == null || objs.isEmpty()) {
+      return "";
+    }
+
+    final Iterator<T> iter = objs.iterator();
+    final StringBuilder buffer = new StringBuilder(Strings.toString(iter.next()));
+    int i = 1;
+    while (iter.hasNext()) {
+      final T obj = iter.next();
+      if (notEmpty(obj)) {
+        buffer.append(++i == objs.size() ? lastDelimiter : delimiter).append(Strings.toString(obj));
+      }
+    }
+    return buffer.toString();
+  }
+
+  public static <T> String joinAnd(final String delimiter,
+                                   final String lastDelimiter,
+                                   final T... objs) {
+    return joinAnd(delimiter, lastDelimiter, Arrays.asList(objs));
+  }
+
+  public static <T> String join(final String delimiter, final Collection<T> objs) {
+    if (objs == null || objs.isEmpty()) {
+      return "";
+    }
+
+    final Iterator<T> iter = objs.iterator();
+    final StringBuilder buffer = new StringBuilder(Strings.toString(iter.next()));
+
+    while (iter.hasNext()) {
+      final T obj = iter.next();
+      if (notEmpty(obj)) {
+        buffer.append(delimiter).append(Strings.toString(obj));
+      }
+    }
+    return buffer.toString();
+  }
+
+  public static <T> String join(final String delimiter, final T... objects) {
+    return join(delimiter, Arrays.asList(objects));
+  }
+
+  public static String toString(InputStream input) {
+    StringWriter sw = new StringWriter();
+    copy(new InputStreamReader(input, Charset.forName("utf-8")), sw);
+    return sw.toString();
+  }
+
+  public static String toString(Reader input) {
+    StringWriter sw = new StringWriter();
+    copy(input, sw);
+    return sw.toString();
+  }
+
+  public static int copy(Reader input, Writer output) {
+    long count = copyLarge(input, output);
+    return count > Integer.MAX_VALUE ? -1 : (int) count;
+  }
+
+  public static long copyLarge(Reader input, Writer output) throws RuntimeException {
+    try {
+      char[] buffer = new char[DEFAULT_BUFFER_SIZE];
+      long count = 0;
+      int n;
+      while (-1 != (n = input.read(buffer))) {
+        output.write(buffer, 0, n);
+        count += n;
+      }
+      return count;
+    } catch (IOException e) {
+      throw new RuntimeException(e);
+    }
+  }
+
+  public static String toString(final Object o) {
+    return toString(o, "");
+  }
+
+  public static String toString(final Object o, final String def) {
+    return o == null ? def : o instanceof InputStream ? toString((InputStream) o) :
+                             o instanceof Reader ? toString((Reader) o) :
+                             o instanceof Object[] ? Strings.join(", ", (Object[]) o) :
+                             o instanceof Collection ? Strings.join(", ", (Collection<?>) o) :
+                             o.toString();
+  }
+
+  public static boolean isEmpty(final Object o) {
+    return toString(o).trim().length() == 0;
+  }
+
+  public static boolean notEmpty(final Object o) {
+    return toString(o).trim().length() != 0;
+  }
+
+  public static String md5(String s) {
+    // http://stackoverflow.com/questions/1057041/difference-between-java-and-php5-md5-hash
+    // http://code.google.com/p/roboguice/issues/detail?id=89
+    try {
+
+      final byte[] hash = MessageDigest.getInstance("MD5").digest(s.getBytes("UTF-8"));
+      final StringBuilder hashString = new StringBuilder();
+
+      for (byte aHash : hash) {
+        String hex = Integer.toHexString(aHash);
+
+        if (hex.length() == 1) {
+          hashString.append('0');
+          hashString.append(hex.charAt(hex.length() - 1));
+        } else {
+          hashString.append(hex.substring(hex.length() - 2));
+        }
+      }
+
+      return hashString.toString();
+
+    } catch (Exception e) {
+      throw new RuntimeException(e);
+    }
+  }
+
+  public static String capitalize(String s) {
+    final String c = Strings.toString(s);
+    return c.length() >= 2 ? c.substring(0, 1).toUpperCase(Locale.US) + c.substring(1) :
+           c.length() >= 1 ? c.toUpperCase(Locale.US) : c;
+  }
+
+  public static boolean equals(Object a, Object b) {
+    return Strings.toString(a).equals(Strings.toString(b));
+  }
+
+  public static boolean equalsIgnoreCase(Object a, Object b) {
+    return Strings.toString(a)
+                  .toLowerCase(Locale.US)
+                  .equals(Strings.toString(b).toLowerCase(Locale.US));
+  }
+
+  public static String[] chunk(String str, int chunkSize) {
+    if (isEmpty(str) || chunkSize == 0) {
+      return new String[0];
+    }
+
+    final int len = str.length();
+    final int arrayLen = (len - 1) / chunkSize + 1;
+    final String[] array = new String[arrayLen];
+    for (int i = 0; i < arrayLen; ++i) {
+      array[i] = str.substring(i * chunkSize,
+                               i * chunkSize + chunkSize < len ? i * chunkSize + chunkSize : len);
+    }
+
+    return array;
+  }
+
+  public static String namedFormat(String str, Map<String, String> substitutions) {
+    for (Map.Entry<String, String> entry : substitutions.entrySet()) {
+      str = str.replace('$' + entry.getKey(), entry.getValue());
+    }
+
+    return str;
+  }
+
+  public static String namedFormat(String str, Object... nameValuePairs) {
+    if (nameValuePairs.length % 2 != 0) {
+      throw new InvalidParameterException("You must include one value for each parameter");
+    }
+
+    final HashMap<String, String> map = new HashMap<String, String>(nameValuePairs.length / 2);
+    for (int i = 0; i < nameValuePairs.length; i += 2) {
+      map.put(Strings.toString(nameValuePairs[i]), Strings.toString(nameValuePairs[i + 1]));
+    }
+
+    return namedFormat(str, map);
+  }
+
+}
