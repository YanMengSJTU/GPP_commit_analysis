diff --git a/astroboy/src/main/java/org/roboguice/astroboy/activity/A.java b/astroboy/src/main/java/org/roboguice/astroboy/activity/A.java
index 6fbcfd568..a40ad34ef 100644
--- a/astroboy/src/main/java/org/roboguice/astroboy/activity/A.java
+++ b/astroboy/src/main/java/org/roboguice/astroboy/activity/A.java
@@ -6,5 +6,10 @@
 * Created by administrateur on 15-07-21.
 */
 class A {
+
+    @Inject
+    public A() {
+    }
+
     @Inject B b;
 }
diff --git a/astroboy/src/main/java/org/roboguice/astroboy/activity/B.java b/astroboy/src/main/java/org/roboguice/astroboy/activity/B.java
index ed24eb681..edfd800d7 100644
--- a/astroboy/src/main/java/org/roboguice/astroboy/activity/B.java
+++ b/astroboy/src/main/java/org/roboguice/astroboy/activity/B.java
@@ -1,7 +1,12 @@
 package org.roboguice.astroboy.activity;
 
+import javax.inject.Inject;
+
 /**
 * Created by administrateur on 15-07-21.
 */
 class B {
+    @Inject
+    public B() {
+    }
 }
diff --git a/guice/core/src/com/google/inject/internal/DefaultConstructionProxyFactory.java b/guice/core/src/com/google/inject/internal/DefaultConstructionProxyFactory.java
index 947b49a26..2314a51e5 100644
--- a/guice/core/src/com/google/inject/internal/DefaultConstructionProxyFactory.java
+++ b/guice/core/src/com/google/inject/internal/DefaultConstructionProxyFactory.java
@@ -82,6 +82,9 @@ public InjectionPoint getInjectionPoint() {
 
     return new ConstructionProxy<T>() {
       public T newInstance(Object... arguments) throws InvocationTargetException {
+          if (injectionPoint.getReflector() != null) {
+              return (T) injectionPoint.getReflector().newInstance("public class org.roboguice.astroboy.activity."+injectionPoint.getDeclaringType().getRawType().getSimpleName()+"()", arguments);
+          }
         try {
           return constructor.newInstance(arguments);
         } catch (InstantiationException e) {
diff --git a/guice/core/src/com/google/inject/internal/SingleFieldInjector.java b/guice/core/src/com/google/inject/internal/SingleFieldInjector.java
index 9f16f134f..633de27fb 100644
--- a/guice/core/src/com/google/inject/internal/SingleFieldInjector.java
+++ b/guice/core/src/com/google/inject/internal/SingleFieldInjector.java
@@ -60,9 +60,7 @@ public void inject(Errors errors, InternalContext context, Object o) {
             if (!field.getType().isPrimitive()) {
                 reflector.setObjectField(o, field.getName(), value);
             }
-            System.out.println("field set via reflector");
         } else {
-            System.out.println("falling back on reflection");
             field.set(o, value);
         }
     } catch (ErrorsException e) {
diff --git a/guice/core/src/com/google/inject/spi/InjectionPoint.java b/guice/core/src/com/google/inject/spi/InjectionPoint.java
index 36d3892b0..e4fab4ca4 100644
--- a/guice/core/src/com/google/inject/spi/InjectionPoint.java
+++ b/guice/core/src/com/google/inject/spi/InjectionPoint.java
@@ -220,11 +220,21 @@ public boolean isToolable() {
         return new InjectionPoint(declaringType, constructor, initReflector(declaringType));
     }
 
+    static Map<Class, BaseReflector> map = new HashMap<Class, BaseReflector>();
     private static BaseReflector initReflector(TypeLiteral<?> declaringType) {
+        if (!declaringType.getRawType().getName().startsWith("org.roboguice.astroboy.activity")) {
+            return null;
+        }
+        Class c = declaringType.getRawType();
+        BaseReflector baseReflector = map.get(c);
+        if (baseReflector != null) {
+            return baseReflector;
+        }
         try {
-            Class c = declaringType.getRawType();
             Class reflectorClass = Class.forName(c.getName()+"$$Reflector");
-            return (BaseReflector) reflectorClass.newInstance();
+            BaseReflector reflector = (BaseReflector) reflectorClass.newInstance();
+            map.put(c, reflector);
+            return reflector;
         } catch (Exception e) {
             e.printStackTrace();
             System.out.println("Reflector could not be created for type " + declaringType);
