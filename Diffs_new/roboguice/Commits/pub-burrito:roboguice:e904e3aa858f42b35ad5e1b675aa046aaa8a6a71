diff --git a/roboguice/src/main/java/roboguice/android/DroidGuice.java b/roboguice/src/main/java/roboguice/android/DroidGuice.java
index e867e6a8b..3bbe41450 100644
--- a/roboguice/src/main/java/roboguice/android/DroidGuice.java
+++ b/roboguice/src/main/java/roboguice/android/DroidGuice.java
@@ -5,6 +5,7 @@
 import java.util.WeakHashMap;
 
 import roboguice.android.config.DefaultRoboModule;
+import roboguice.android.inject.AndroidResourceListener;
 import roboguice.android.inject.ContextScope;
 import roboguice.android.inject.ContextScopedRoboInjector;
 import roboguice.android.inject.RoboInjector;
@@ -93,6 +94,20 @@ public RoboInjector getInjector( Context context ) {
         final Application application = (Application)context.getApplicationContext();
         return new ContextScopedRoboInjector(context, getScopedInjector(application), getViewListener(application));
     }
+    
+    @Override
+    protected AndroidResourceListener getResourceListener(Application application) {
+        AndroidResourceListener resourceListener = resourceListeners.get(application);
+        if( resourceListener==null ) {
+            synchronized (RoboGuice.class) {
+                if( resourceListener==null ) {
+                    resourceListener = new AndroidResourceListener( application );
+                    resourceListeners.put(application,resourceListener);
+                }
+            }
+        }
+        return resourceListener;
+    }
 
     @Override
     public DefaultRoboModule newDefaultRoboModule( Application application ) {
@@ -125,4 +140,5 @@ public static void reset() {
             viewListeners.clear();
         }
     }
+
 }
diff --git a/roboguice/src/main/java/roboguice/android/inject/AndroidResourceListener.java b/roboguice/src/main/java/roboguice/android/inject/AndroidResourceListener.java
index ae5c45a53..516cd0b51 100644
--- a/roboguice/src/main/java/roboguice/android/inject/AndroidResourceListener.java
+++ b/roboguice/src/main/java/roboguice/android/inject/AndroidResourceListener.java
@@ -15,6 +15,13 @@
  */
 package roboguice.android.inject;
 
+import java.lang.reflect.Field;
+
+import roboguice.base.inject.InjectResource;
+import roboguice.base.inject.ResourceListener;
+
+import com.google.inject.TypeLiteral;
+
 import android.app.Application;
 import android.content.res.ColorStateList;
 import android.content.res.Resources;
@@ -23,118 +30,76 @@
 import android.view.animation.Animation;
 import android.view.animation.AnimationUtils;
 
-import com.google.inject.MembersInjector;
-import com.google.inject.TypeLiteral;
-import com.google.inject.spi.TypeEncounter;
-import com.google.inject.spi.TypeListener;
-
-import java.lang.reflect.Field;
-import java.lang.reflect.Modifier;
-
 
 /**
  * Resource listener.
  * @author Mike Burton
  */
-public class AndroidResourceListener implements TypeListener {
+public class AndroidResourceListener extends ResourceListener {
     protected Application application;
 
     public AndroidResourceListener(Application application) {
+        super();
         this.application = application;
     }
 
-    public <I> void hear(TypeLiteral<I> typeLiteral, TypeEncounter<I> typeEncounter) {
-        
-        for( Class<?> c = typeLiteral.getRawType(); c!=Object.class; c = c.getSuperclass() )
-            for (Field field : c.getDeclaredFields())
-                if ( field.isAnnotationPresent(InjectResource.class) && !Modifier.isStatic(field.getModifiers()) )
-                    typeEncounter.register(new AndroidResourceMembersInjector<I>(field, application, field.getAnnotation(InjectResource.class)));
-
+    @Override
+    protected <I> ResourceMemberInjector<I> newResourceMember(TypeLiteral<I> typeLiteral, Field field ) {
+        return new AndroidResourceMembersInjector<I>(field, application, field.getAnnotation(InjectResource.class));
     }
 
-    @SuppressWarnings("unchecked")
-    public void requestStaticInjection(Class<?>... types) {
-        
-        for (Class<?> c : types)
-            for( ; c!=Object.class; c=c.getSuperclass() )
-                for (Field field : c.getDeclaredFields())
-                    if (Modifier.isStatic(field.getModifiers()) && field.isAnnotationPresent(InjectResource.class))
-                        new AndroidResourceMembersInjector(field, application, field.getAnnotation(InjectResource.class)).injectMembers(null);
-
-
+    @SuppressWarnings("rawtypes")
+    @Override
+    protected ResourceMemberInjector newResourceMember( Field field ) {
+        return new AndroidResourceMembersInjector(field, application, field.getAnnotation(InjectResource.class));
     }
 
-
-
-
-
-
-
-
-    
-    protected static class AndroidResourceMembersInjector<T> implements MembersInjector<T> {
+    protected static class AndroidResourceMembersInjector<T> extends ResourceMemberInjector<T> {
 
         protected Field field;
         protected Application application;
         protected InjectResource annotation;
 
         public AndroidResourceMembersInjector(Field field, Application application, InjectResource annotation) {
-            this.field = field;
+            super( field, annotation );
             this.application = application;
-            this.annotation = annotation;
         }
 
-        public void injectMembers(T instance) {
-
-            Object value = null;
-
-            try {
-
-                final Resources resources = application.getResources();
-                final int id = getId(resources,annotation);
-                final Class<?> t = field.getType();
-
-                if (String.class.isAssignableFrom(t)) {
-                    value = resources.getString(id);
-                } else if (boolean.class.isAssignableFrom(t) || Boolean.class.isAssignableFrom(t)) {
-                    value = resources.getBoolean(id);
-                } else if (ColorStateList.class.isAssignableFrom(t)  ) {
-                    value = resources.getColorStateList(id);
-                } else if (int.class.isAssignableFrom(t) || Integer.class.isAssignableFrom(t)) {
-                    value = resources.getInteger(id);
-                } else if (Drawable.class.isAssignableFrom(t)) {
-                    value = resources.getDrawable(id);
-                } else if (String[].class.isAssignableFrom(t)) {
-                    value = resources.getStringArray(id);
-                } else if (int[].class.isAssignableFrom(t) || Integer[].class.isAssignableFrom(t)) {
-                    value = resources.getIntArray(id);
-                } else if (Animation.class.isAssignableFrom(t)) {
-                    value = AnimationUtils.loadAnimation(application, id);
-                } else if (Movie.class.isAssignableFrom(t)  ) {
-                    value = resources.getMovie(id);
-                }
-                
-                if (value == null && Nullable.notNullable(field) ) {
-                    throw new NullPointerException(String.format("Can't inject null value into %s.%s when field is not @Nullable", field.getDeclaringClass(), field
-                            .getName()));
-                }
-
-                field.setAccessible(true);
-                field.set(instance, value);
-
-            } catch (IllegalAccessException e) {
-                throw new RuntimeException(e);
-
-            } catch (IllegalArgumentException f) {
-                throw new IllegalArgumentException(String.format("Can't assign %s value %s to %s field %s", value != null ? value.getClass() : "(null)", value,
-                        field.getType(), field.getName()));
+        @Override
+        protected Object getValue() {
+            
+            final Resources resources = application.getResources();
+            final int id = getId(resources,annotation);
+            final Class<?> t = field.getType();
+
+            if (String.class.isAssignableFrom(t)) {
+                return resources.getString(id);
+            } else if (boolean.class.isAssignableFrom(t) || Boolean.class.isAssignableFrom(t)) {
+                return resources.getBoolean(id);
+            } else if (ColorStateList.class.isAssignableFrom(t)  ) {
+                return resources.getColorStateList(id);
+            } else if (int.class.isAssignableFrom(t) || Integer.class.isAssignableFrom(t)) {
+                return resources.getInteger(id);
+            } else if (Drawable.class.isAssignableFrom(t)) {
+                return resources.getDrawable(id);
+            } else if (String[].class.isAssignableFrom(t)) {
+                return resources.getStringArray(id);
+            } else if (int[].class.isAssignableFrom(t) || Integer[].class.isAssignableFrom(t)) {
+                return resources.getIntArray(id);
+            } else if (Animation.class.isAssignableFrom(t)) {
+                return AnimationUtils.loadAnimation(application, id);
+            } else if (Movie.class.isAssignableFrom(t)  ) {
+                return resources.getMovie(id);
             }
+            
+            return null;
         }
-
+        
         protected int getId(Resources resources, InjectResource annotation) {
             int id = annotation.value();
             return id>=0 ? id : resources.getIdentifier(annotation.name(),null,null);
         }
     }
+
 }
 
diff --git a/roboguice/src/main/java/roboguice/android/inject/ExtrasListener.java b/roboguice/src/main/java/roboguice/android/inject/ExtrasListener.java
index 519420734..9b76c1342 100644
--- a/roboguice/src/main/java/roboguice/android/inject/ExtrasListener.java
+++ b/roboguice/src/main/java/roboguice/android/inject/ExtrasListener.java
@@ -16,6 +16,7 @@
 package roboguice.android.inject;
 
 import roboguice.android.DroidGuice;
+import roboguice.base.inject.Nullable;
 
 import android.app.Activity;
 import android.content.Context;
diff --git a/roboguice/src/main/java/roboguice/android/inject/InjectExtra.java b/roboguice/src/main/java/roboguice/android/inject/InjectExtra.java
index f19f7d4ca..f8032f3f0 100644
--- a/roboguice/src/main/java/roboguice/android/inject/InjectExtra.java
+++ b/roboguice/src/main/java/roboguice/android/inject/InjectExtra.java
@@ -21,6 +21,8 @@
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
+import roboguice.base.inject.Nullable;
+
 import com.google.inject.BindingAnnotation;
 
 /**
diff --git a/roboguice/src/main/java/roboguice/android/inject/PreferenceListener.java b/roboguice/src/main/java/roboguice/android/inject/PreferenceListener.java
index 6c5d909e3..54f68b63f 100644
--- a/roboguice/src/main/java/roboguice/android/inject/PreferenceListener.java
+++ b/roboguice/src/main/java/roboguice/android/inject/PreferenceListener.java
@@ -30,6 +30,8 @@
 import java.lang.reflect.Modifier;
 import java.util.ArrayList;
 
+import roboguice.base.inject.Nullable;
+
 /**
  * 
  * @author Mike Burton
diff --git a/roboguice/src/main/java/roboguice/android/inject/ViewListener.java b/roboguice/src/main/java/roboguice/android/inject/ViewListener.java
index f4d2bcef1..bfd340aa2 100644
--- a/roboguice/src/main/java/roboguice/android/inject/ViewListener.java
+++ b/roboguice/src/main/java/roboguice/android/inject/ViewListener.java
@@ -26,6 +26,9 @@
 import com.google.inject.spi.TypeListener;
 
 import javax.inject.Singleton;
+
+import roboguice.base.inject.Nullable;
+
 import java.lang.annotation.Annotation;
 import java.lang.ref.WeakReference;
 import java.lang.reflect.Field;
diff --git a/roboguice/src/main/java/roboguice/base/RoboGuice.java b/roboguice/src/main/java/roboguice/base/RoboGuice.java
index 321b2a3e7..1ef0bd54a 100644
--- a/roboguice/src/main/java/roboguice/base/RoboGuice.java
+++ b/roboguice/src/main/java/roboguice/base/RoboGuice.java
@@ -6,6 +6,7 @@
 import roboguice.android.config.DefaultRoboModule;
 import roboguice.android.inject.AndroidResourceListener;
 import roboguice.base.event.EventManager;
+import roboguice.base.inject.ResourceListener;
 
 import com.google.inject.Guice;
 import com.google.inject.Injector;
@@ -129,17 +130,5 @@ public Injector getInjector( O context )
     
     public abstract DefaultRoboModule newDefaultRoboModule( S app );
     
-    protected AndroidResourceListener getResourceListener( S scopedObject ) {
-        AndroidResourceListener resourceListener = resourceListeners.get(scopedObject);
-        if( resourceListener==null ) {
-            synchronized (RoboGuice.class) {
-                if( resourceListener==null ) {
-                    //FIXME ResourceListener
-//                    resourceListener = new ResourceListener( application );
-                    resourceListeners.put(scopedObject,resourceListener);
-                }
-            }
-        }
-        return resourceListener;
-    }
+    protected abstract ResourceListener getResourceListener( S scopedObject );
 }
diff --git a/roboguice/src/main/java/roboguice/android/inject/InjectResource.java b/roboguice/src/main/java/roboguice/base/inject/InjectResource.java
similarity index 97%
rename from roboguice/src/main/java/roboguice/android/inject/InjectResource.java
rename to roboguice/src/main/java/roboguice/base/inject/InjectResource.java
index 6b4205343..f2a2ba715 100644
--- a/roboguice/src/main/java/roboguice/android/inject/InjectResource.java
+++ b/roboguice/src/main/java/roboguice/base/inject/InjectResource.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions
  * and limitations under the License.
  */
-package roboguice.android.inject;
+package roboguice.base.inject;
 
 import com.google.inject.BindingAnnotation;
 
diff --git a/roboguice/src/main/java/roboguice/android/inject/Nullable.java b/roboguice/src/main/java/roboguice/base/inject/Nullable.java
similarity index 93%
rename from roboguice/src/main/java/roboguice/android/inject/Nullable.java
rename to roboguice/src/main/java/roboguice/base/inject/Nullable.java
index 4892186ca..57f35825d 100644
--- a/roboguice/src/main/java/roboguice/android/inject/Nullable.java
+++ b/roboguice/src/main/java/roboguice/base/inject/Nullable.java
@@ -1,4 +1,4 @@
-package roboguice.android.inject;
+package roboguice.base.inject;
 
 import roboguice.base.util.Strings;
 
diff --git a/roboguice/src/main/java/roboguice/base/inject/ResourceListener.java b/roboguice/src/main/java/roboguice/base/inject/ResourceListener.java
new file mode 100644
index 000000000..4c2b13d07
--- /dev/null
+++ b/roboguice/src/main/java/roboguice/base/inject/ResourceListener.java
@@ -0,0 +1,82 @@
+package roboguice.base.inject;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+
+
+import com.google.inject.MembersInjector;
+import com.google.inject.TypeLiteral;
+import com.google.inject.spi.TypeEncounter;
+import com.google.inject.spi.TypeListener;
+
+public abstract class ResourceListener implements TypeListener {
+    
+    public ResourceListener() {
+    }
+
+    public <I> void hear(TypeLiteral<I> typeLiteral, TypeEncounter<I> typeEncounter) {
+        
+        for( Class<?> c = typeLiteral.getRawType(); c!=Object.class; c = c.getSuperclass() )
+            for (Field field : c.getDeclaredFields())
+                if ( field.isAnnotationPresent(InjectResource.class) && !Modifier.isStatic(field.getModifiers()) )
+                    typeEncounter.register( newResourceMember( typeLiteral, field ) );
+
+    }
+
+    @SuppressWarnings("unchecked")
+    public void requestStaticInjection(Class<?>... types) {
+        
+        for (Class<?> c : types)
+            for( ; c!=Object.class; c=c.getSuperclass() )
+                for (Field field : c.getDeclaredFields())
+                    if (Modifier.isStatic(field.getModifiers()) && field.isAnnotationPresent(InjectResource.class))
+                        newResourceMember( field ).injectMembers(null);
+
+    }
+    
+    protected abstract <I> ResourceMemberInjector<I> newResourceMember( TypeLiteral<I> typeLiteral /*Here to figure out the type*/, Field field );
+    
+    @SuppressWarnings("rawtypes")
+    protected abstract ResourceMemberInjector newResourceMember( Field field );
+    
+    
+    protected static abstract class ResourceMemberInjector<T> implements MembersInjector<T>
+    {
+
+        protected Field field;
+        protected InjectResource annotation;
+        
+        public ResourceMemberInjector(Field field, InjectResource annotation) {
+            this.field = field;
+            this.annotation = annotation;
+        }
+
+        public void injectMembers(T instance) {
+
+            Object value = null;
+
+            try {
+
+                value = getValue();
+                
+                if (value == null && Nullable.notNullable(field) ) {
+                    throw new NullPointerException(String.format("Can't inject null value into %s.%s when field is not @Nullable", field.getDeclaringClass(), field
+                            .getName()));
+                }
+
+                field.setAccessible(true);
+                field.set(instance, value);
+
+            } catch (IllegalAccessException e) {
+                throw new RuntimeException(e);
+
+            } catch (IllegalArgumentException f) {
+                throw new IllegalArgumentException(String.format("Can't assign %s value %s to %s field %s", value != null ? value.getClass() : "(null)", value,
+                        field.getType(), field.getName()));
+            }
+        }
+
+        protected abstract Object getValue();
+        
+    }
+}
diff --git a/roboguice/src/test/java/roboguice/android/activity/ActivityInjectionTest.java b/roboguice/src/test/java/roboguice/android/activity/ActivityInjectionTest.java
index 2029ddc47..b9c3c7bef 100644
--- a/roboguice/src/test/java/roboguice/android/activity/ActivityInjectionTest.java
+++ b/roboguice/src/test/java/roboguice/android/activity/ActivityInjectionTest.java
@@ -12,6 +12,7 @@
 import roboguice.android.activity.ActivityInjectionTest.ModuleD.D;
 import roboguice.android.inject.*;
 import roboguice.android.test.RobolectricRoboTestRunner;
+import roboguice.base.inject.InjectResource;
 
 import android.R;
 import android.app.Activity;
diff --git a/roboguice/src/test/java/roboguice/android/inject/NullableTest.java b/roboguice/src/test/java/roboguice/android/inject/NullableTest.java
index da8184862..c301d2501 100644
--- a/roboguice/src/test/java/roboguice/android/inject/NullableTest.java
+++ b/roboguice/src/test/java/roboguice/android/inject/NullableTest.java
@@ -17,12 +17,12 @@
 
     @Test
     public void shouldRejectNullFields() throws Exception {
-        assertThat(roboguice.android.inject.Nullable.isNullable(DummyClass.class.getDeclaredField("notNullable")), is(false));
+        assertThat(roboguice.base.inject.Nullable.isNullable(DummyClass.class.getDeclaredField("notNullable")), is(false));
     }
 
     @Test
     public void shouldAcceptNonNullFields() throws Exception {
-        assertThat(roboguice.android.inject.Nullable.isNullable(DummyClass.class.getDeclaredField("nullable")), is(true));
+        assertThat(roboguice.base.inject.Nullable.isNullable(DummyClass.class.getDeclaredField("nullable")), is(true));
     }
 
 
diff --git a/roboguice/src/test/java/roboguice/android/inject/ResourceListenerTest.java b/roboguice/src/test/java/roboguice/android/inject/ResourceListenerTest.java
index 85f9938b0..57ec590b6 100644
--- a/roboguice/src/test/java/roboguice/android/inject/ResourceListenerTest.java
+++ b/roboguice/src/test/java/roboguice/android/inject/ResourceListenerTest.java
@@ -6,7 +6,7 @@
 import org.junit.runner.RunWith;
 
 import roboguice.android.activity.RoboActivity;
-import roboguice.android.inject.InjectResource;
+import roboguice.base.inject.InjectResource;
 
 import android.os.Bundle;
 
