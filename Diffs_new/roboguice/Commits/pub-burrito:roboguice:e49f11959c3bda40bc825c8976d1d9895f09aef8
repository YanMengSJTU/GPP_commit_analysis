diff --git a/roboguice/src/main/java/roboguice/base/RoboGuice.java b/roboguice/src/main/java/roboguice/base/RoboGuice.java
index c506fab29..f5f85d86a 100644
--- a/roboguice/src/main/java/roboguice/base/RoboGuice.java
+++ b/roboguice/src/main/java/roboguice/base/RoboGuice.java
@@ -48,6 +48,8 @@
     @SuppressWarnings({ "rawtypes", "unchecked" })
     public static <T extends RoboGuice> T instance()
     {
+        Ln.v( "Current: %s, Type: %s", instance, type );
+        
         if ( instance == null )
         {
             try
@@ -238,13 +240,6 @@ public void destroyInjector(O context) {
         final Injector injector = getInjector(context);
         injector.getInstance(EventManager.class).destroy();
         injectors.remove(context);
-        
-        Ln.v( "Injectors: %s (empty=%s)", injectors, injectors.isEmpty() );
-        
-        if ( injectors.isEmpty() )
-        {
-            instance = null;
-        }
     }
         
     public Injector getInjector( O context )
@@ -263,11 +258,24 @@ private util() {}
          * This method is provided to reset RoboGuice in testcases.
          * It should not be called in a real application.
          */
-        @SuppressWarnings("rawtypes")
         public static void reset() {
-            RoboGuice.instance().injectors.clear();
-            RoboGuice.instance().resourceListeners.clear();
+            if (instance == null)
+            {
+                //already reset
+                return;
+            }
+            
+            instance.injectors.clear();
+            instance.resourceListeners.clear();
+            
+            resetDroidGuice();
             
+            RoboGuice.instance = null;
+            RoboGuice.type = null;
+        }
+
+        @SuppressWarnings("rawtypes")
+        private static void resetDroidGuice() {
             try
             {
                 //doing through reflection to not have any dependencies on child class on RoboGuice
