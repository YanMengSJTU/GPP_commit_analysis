diff --git a/api_demos/src/main/java/com/github/androidsocialnetworks/apidemos/activity/MainActivity.java b/api_demos/src/main/java/com/github/androidsocialnetworks/apidemos/activity/MainActivity.java
index 4cadd9f..c572c55 100644
--- a/api_demos/src/main/java/com/github/androidsocialnetworks/apidemos/activity/MainActivity.java
+++ b/api_demos/src/main/java/com/github/androidsocialnetworks/apidemos/activity/MainActivity.java
@@ -26,7 +26,7 @@ protected void onCreate(Bundle savedInstanceState) {
         mSocialNetworkManager = SocialNetworkManager.Builder.from(this)
                 .twitter("3IYEDC9Pq5SIjzENhgorlpera", "fawjHMhyzhrfcFKZVB6d5YfiWbWGmgX7vPfazi61xZY9pdD1aE")
                 .linkedIn("77ieoe71pon7wq", "pp5E8hkdY9voGC9y", "r_basicprofile+rw_nus+r_network+w_messages")
-                .weibo("2264960360", "60fcbf9d8b4f0551b7129aa79bc5dfd7")
+                .weibo("3288380285", "e7c4cd9cd6fbddcb0bd0559ab99d0666")
                 .facebook()
                 .googlePlus()
                 .build();
diff --git a/build.gradle b/build.gradle
index 6805c13..63bab97 100644
--- a/build.gradle
+++ b/build.gradle
@@ -3,6 +3,7 @@
 buildscript {
     repositories {
         mavenCentral()
+        jcenter()
     }
 
     dependencies {
@@ -13,7 +14,7 @@ buildscript {
 allprojects {
     repositories {
         mavenCentral()
-
+        jcenter()
         maven {
             url "https://oss.sonatype.org/content/repositories/snapshots"
         }
diff --git a/library/build.gradle b/library/build.gradle
index d0f051c..33a4da5 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -29,12 +29,12 @@ android {
 }
 
 dependencies {
-    compile project(':weibo')
 
     compile fileTree(dir: 'libs', include: ['*.jar'])
     compile 'org.twitter4j:twitter4j-core:4.0.1'
     compile 'com.google.android.gms:play-services-plus:8.1.0'
     compile 'com.facebook.android:facebook-android-sdk:3+'
+    compile 'com.infstory:weibo-android-sdk:3.1.2'
 }
 
 configurations {
diff --git a/library/src/main/java/com/androidsocialnetworks/lib/impl/WeiboSocialNetwork.java b/library/src/main/java/com/androidsocialnetworks/lib/impl/WeiboSocialNetwork.java
index 9ef6378..64e3bb8 100644
--- a/library/src/main/java/com/androidsocialnetworks/lib/impl/WeiboSocialNetwork.java
+++ b/library/src/main/java/com/androidsocialnetworks/lib/impl/WeiboSocialNetwork.java
@@ -1,15 +1,14 @@
 package com.androidsocialnetworks.lib.impl;
 
 import android.app.Activity;
-import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
 import android.text.TextUtils;
 import android.util.Log;
 
 import com.androidsocialnetworks.lib.AccessToken;
-import com.androidsocialnetworks.lib.OAuthSocialNetwork;
 import com.androidsocialnetworks.lib.AccessTokenKeeper;
+import com.androidsocialnetworks.lib.OAuthSocialNetwork;
 import com.androidsocialnetworks.lib.SocialPerson;
 import com.androidsocialnetworks.lib.listener.OnLoginCompleteListener;
 import com.androidsocialnetworks.lib.listener.OnPostingCompleteListener;
@@ -40,7 +39,7 @@
     private static final String TAG = WeiboSocialNetwork.class.getSimpleName();
 
     public static final int ID = 5;
-    private static final String REDIRECT_URL = "http://www.sina.com";
+    private static final String REDIRECT_URL = "https://api.weibo.com/oauth2/default.html";
     public static final String SCOPE = "email,direct_messages_read,direct_messages_write,"
             + "friendships_groups_read,friendships_groups_write,statuses_to_me_read,"
             + "follow_app_official_microblog,"
diff --git a/settings.gradle b/settings.gradle
index 6228b20..edc8d2d 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,3 +1,2 @@
 include ':api_demos'
-include ':library'
-include ':weibo'
\ No newline at end of file
+include ':library'
\ No newline at end of file
diff --git a/weibo/.gitignore b/weibo/.gitignore
deleted file mode 100644
index 796b96d..0000000
--- a/weibo/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-/build
diff --git a/weibo/.settings/org.eclipse.core.resources.prefs b/weibo/.settings/org.eclipse.core.resources.prefs
deleted file mode 100644
index 99f26c0..0000000
--- a/weibo/.settings/org.eclipse.core.resources.prefs
+++ /dev/null
@@ -1,2 +0,0 @@
-eclipse.preferences.version=1
-encoding/<project>=UTF-8
diff --git a/weibo/.settings/org.eclipse.jdt.core.prefs b/weibo/.settings/org.eclipse.jdt.core.prefs
deleted file mode 100644
index b080d2d..0000000
--- a/weibo/.settings/org.eclipse.jdt.core.prefs
+++ /dev/null
@@ -1,4 +0,0 @@
-eclipse.preferences.version=1
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
-org.eclipse.jdt.core.compiler.compliance=1.6
-org.eclipse.jdt.core.compiler.source=1.6
diff --git a/weibo/androidTest/java/controlriskgroup/wezom/com/weibo/ApplicationTest.java b/weibo/androidTest/java/controlriskgroup/wezom/com/weibo/ApplicationTest.java
deleted file mode 100644
index 63d7c16..0000000
--- a/weibo/androidTest/java/controlriskgroup/wezom/com/weibo/ApplicationTest.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package controlriskgroup.wezom.com.weibo;
-
-import android.app.Application;
-import android.test.ApplicationTestCase;
-
-/**
- * <a href="http://d.android.com/tools/testing/testing_android.html">Testing Fundamentals</a>
- */
-public class ApplicationTest extends ApplicationTestCase<Application> {
-    public ApplicationTest() {
-        super(Application.class);
-    }
-}
\ No newline at end of file
diff --git a/weibo/build.gradle b/weibo/build.gradle
deleted file mode 100644
index 058a739..0000000
--- a/weibo/build.gradle
+++ /dev/null
@@ -1,25 +0,0 @@
-apply plugin: 'android-library'
-
-android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.1"
-
-    defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion 22
-        versionCode 1
-        versionName "1.0"
-    }
-
-    buildTypes {
-        release {
-            minifyEnabled false
-            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
-        }
-    }
-}
-
-dependencies {
-    compile fileTree(dir: 'libs', include: ['*.jar'])
-    compile 'com.android.support:appcompat-v7:23.0.1'
-}
diff --git a/weibo/libs/weiboSDKCore_3.1.2.jar b/weibo/libs/weiboSDKCore_3.1.2.jar
deleted file mode 100644
index b9e5bb6..0000000
Binary files a/weibo/libs/weiboSDKCore_3.1.2.jar and /dev/null differ
diff --git a/weibo/proguard-project.txt b/weibo/proguard-project.txt
deleted file mode 100644
index f2fe155..0000000
--- a/weibo/proguard-project.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-# To enable ProGuard in your project, edit project.properties
-# to define the proguard.config property as described in that file.
-#
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in ${sdk.dir}/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the ProGuard
-# include property in project.properties.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/weibo/proguard-rules.pro b/weibo/proguard-rules.pro
deleted file mode 100644
index 5c259a2..0000000
--- a/weibo/proguard-rules.pro
+++ /dev/null
@@ -1,17 +0,0 @@
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in C:\Users\oskalenko.v\AppData\Local\Android\sdk/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the proguardFiles
-# directive in build.gradle.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/weibo/project.properties b/weibo/project.properties
deleted file mode 100644
index db721fd..0000000
--- a/weibo/project.properties
+++ /dev/null
@@ -1,15 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-8
-android.library=true
diff --git a/weibo/src/main/AndroidManifest.xml b/weibo/src/main/AndroidManifest.xml
deleted file mode 100644
index ea43d47..0000000
--- a/weibo/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.sina.weibo.sdk"
-    android:versionCode="5"
-    android:versionName="2.5.0" >
-
-    <uses-sdk android:minSdkVersion="8" />
-
-</manifest>
\ No newline at end of file
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/codestyle/CodingRuler.java b/weibo/src/main/java/com/sina/weibo/sdk/codestyle/CodingRuler.java
deleted file mode 100644
index 4d3edd9..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/codestyle/CodingRuler.java
+++ /dev/null
@@ -1,262 +0,0 @@
-/*
- * 文件名（可选），如 CodingRuler.java
- * 
- * 版本信息（可选），如：@version 1.0.0
- * 
- * 版权申明（开源代码一般都需要添加），如：Copyright (C) 2010-2013 SINA Corporation.
- */
-
-package com.sina.weibo.sdk.codestyle;
-
-/**
- * 类的大体描述放在这里。
- * 
- * <p>
- * <b>NOTE：以下部分为一个简要的编码规范，更多规范请参考 ORACLE 官方文档。</b><br>
- * 地址：http://www.oracle.com/technetwork/java/codeconventions-150003.pdf<br>
- * 另外，请使用 UTF-8 格式来查看代码，避免出现中文乱码。<br>
- * <b>至于注释应该使用中文还是英文，请自己行决定，根据公司或项目的要求而定，推荐使用英文。</b><br>
- * </p>
- * <h3>1. 整理代码</h3>
- * <ul>
- *    <li>1.1. Java 代码中不允许出现在警告，无法消除的警告要用 @SuppressWarnings。
- *    <li>1.2. 去掉无用的包、方法、变量等，减少僵尸代码。
- *    <li>1.3. 使用 Lint 工具来查看并消除警告和错误。
- *    <li>1.4. 使用 Ctrl+Shift+F 来格式化代码，然后再进行调整。
- *    <li>1.5. 使用 Ctrl+Shift+O 来格式化 Import 包。
- * </ul>
- * 
- * <h3>2. 命名规则</h3>
- *    <h3>2.1. 基本原则</h3>
- *    <ul>
- *         <li>2.1.1. 变量，方法，类命名要表义，严格禁止使用 name1, name2 等命名。
- *         <li>2.1.2. 命名不能太长，适当使用简写或缩写。（最好不要超过 25 个字母）
- *         <li>2.1.3. 方法名以小写字母开始，以后每个单词首字母大写。
- *         <li>2.1.4. 避免使用相似或者仅在大小写上有区别的名字。
- *         <li>2.1.5. 避免使用数字，但可用 2 代替 to，用 4 代替 for 等，如 go2Clean。
- *     </ul>
- *    
- *    <h3>2.2. 类、接口</h3>
- *    <ul>
- *         <li>2.2.1. 所有单词首字母都大写。使用能确切反应该类、接口含义、功能等的词。一般采用名词。
- *         <li>2.2.2. 接口带 I 前缀，或able, ible, er等后缀。如ISeriable。
- *    </ul>
- *    
- *    <h3>2.3. 字段、常量</h3>
- *    <ul>
- *         <li>2.3.1. 成员变量以 m 开头，静态变量以 s 开头，如 mUserName, sInstance。
- *         <li>2.3.2. 常量全部大写，在词与词之前用下划线连接，如 MAX_NUMBER。
- *         <li>2.3.3. 代码中禁止使用硬编码，把一些数字或字符串定义成常用量。
- *         <li>2.3.4. 对于废弃不用的函数，为了保持兼容性，通常添加 @Deprecated，如 {@link #doSomething()}
- *    </ul>
- *         
- * <h3>3. 注释</h3>
- *    请参考 {@link #SampleCode} 类的注释。
- *    <ul>
- *    <li>3.1. 常量注释，参见 {@link #ACTION_MAIN} 
- *    <li>3.2. 变量注释，参见 {@link #mObject0} 
- *    <li>3.3. 函数注释，参见 {@link #doSomething(int, float, String)}
- *    </ul> 
- *    
- * <h3>4. Class 内部顺序和逻辑</h3>
- * <ul>
- *    <li>4.1. 每个 class 都应该按照一定的逻辑结构来排列基成员变量、方法、内部类等，
- *             从而达到良好的可读性。
- *    <li>4.2. 总体上来说，要按照先 public, 后 protected, 最后 private, 函数的排布
- *             也应该有一个逻辑的先后顺序，由重到轻。
- *    <li>4.3. 以下顺序可供参考：<br>
- *         定义TAG，一般为 private（可选）<br>
- *         定义 public 常量<br>
- *         定义 protected 常量、内部类<br>
- *         定义 private 变量<br>
- *         定义 public 方法<br>
- *         定义 protected 方法<br>
- *         定义 private 方法<br>
- * </ul>        
- * 
- * <h3>5. 表达式与语句</h3>
- *    <h3>5.1. 基本原则：采用紧凑型风格来编写代码</h3>
- *    <h3>5.2. 细则</h3>
- *    <ul>
- *         <li>5.2.1. 条件表示式，参见 {@link #conditionFun(boolean)} 
- *         <li>5.2.2. switch 语句，参见 {@link #switchFun(int)}
- *         <li>5.2.3. 循环语句，参见 {@link #circulationFun(boolean)}
- *         <li>5.2.4. 错误与异常，参见 {@link #exceptionFun()}
- *         <li>5.2.5. 杂项，参见 {@link #otherFun()}
- *         <li>5.2.6. 批注，参见 {@link #doSomething(int, float, String)}
- *     </ul>
- * 
- * @author 作者名
- * @since 2013-XX-XX
- */
-@SuppressWarnings("unused")
-public class CodingRuler {
-
-    /** 公有的常量注释 */
-    public static final String ACTION_MAIN = "android.intent.action.MAIN";
-    
-    /** 私有的常量注释（同类型的常量可以分块并紧凑定义） */
-    private static final int MSG_AUTH_NONE    = 0;
-    private static final int MSG_AUTH_SUCCESS = 1;
-    private static final int MSG_AUTH_FAILED  = 2;
-    
-    /** 保护的成员变量注释 */
-    protected Object mObject0;
-    
-    /** 私有的成员变量 mObject1 注释（同类型的成员变量可以分块并紧凑定义） */
-    private Object mObject1;
-    /** 私有的成员变量 mObject2 注释 */
-    private Object mObject2;
-    /** 私有的成员变量 mObject3 注释 */
-    private Object mObject3;
-    
-    /**
-     * 对于注释多于一行的，采用这种方式来
-     * 定义该变量
-     */
-    private Object mObject4;
-
-    /**
-     * 公有方法描述...
-     * 
-     * @param param1  参数1描述...
-     * @param param2  参数2描述...
-     * @param paramXX 参数XX描述... （注意：请将参数、描述都对齐）
-     */
-    public void doSomething(int param1, float param2, String paramXX) {
-        // 以下注释标签可以通过Eclipse内置的Task插件看到
-        // TODO  使用TODO来标记代码，说明标识处有功能代码待编写
-        // FIXME 使用FIXME来标记代码，说明标识处代码需要修正，甚至代码是
-        //       错误的，不能工作，需要修复
-        // XXX   使用XXX来标记代码，说明标识处代码虽然实现了功能，但是实现
-        //       的方法有待商榷，希望将来能改进
-    }
-    
-    /**
-     * 保护方法描述...
-     */
-    @Deprecated
-    protected void doSomething() {
-        // ...implementation
-    }
-    
-    /**
-     * 私有方法描述...
-     * 
-     * @param param1  参数1描述...
-     * @param param2  参数2描述...
-     */
-    private void doSomethingInternal(int param1, float param2) {
-        // ...implementation        
-    }
-    
-    /**
-     * 条件表达式原则。
-     */
-    private void conditionFun() {
-        boolean condition1 = true;
-        boolean condition2 = false;
-        boolean condition3 = false;
-        boolean condition4 = false;
-        boolean condition5 = false;
-        boolean condition6 = false;
-        
-        // 原则： 1. 所有 if 语句必须用 {} 包括起来，即便只有一句，禁止使用不带{}的语句
-        //       2. 在含有多种运算符的表达式中，使用圆括号来避免运算符优先级问题
-        //       3. 判断条件很多时，请将其它条件换行
-        if (condition1) {
-            // ...implementation
-        }
-        
-        if (condition1) {
-            // ...implementation
-        } else {
-            // ...implementation
-        }
-        
-        if (condition1)          /* 禁止使用不带{}的语句 */
-            condition3 = true;
-        
-        if ((condition1 == condition2) 
-                || (condition3 == condition4)
-                || (condition5 == condition6)) {
-            
-        }
-    }
-    
-    /**
-     * Switch语句原则。
-     */
-    private void switchFun() {
-        
-        // 原则： 1. switch 语句中，break 与下一条 case 之间，空一行
-        //       2. 对于不需要 break 语句的，请使用 /* Falls through */来标注
-        //       3. 请默认写上 default 语句，保持完整性
-        int code = MSG_AUTH_SUCCESS;
-        switch (code) {
-        case MSG_AUTH_SUCCESS:
-            break;
-            
-        case MSG_AUTH_FAILED:
-            break;
-            
-        case MSG_AUTH_NONE:
-            /* Falls through */
-        default:
-            break;
-        }
-    }
-    
-    /**
-     * 循环表达式。
-     */
-    private void circulationFun() {
-        
-        // 原则： 1. 尽量使用for each语句代替原始的for语句
-        //       2. 循环中必须有终止循环的条件或语句，避免死循环
-        //       3. 循环要尽可能的短, 把长循环的内容抽取到方法中去
-        //       4. 嵌套层数不应超过3层, 要让循环清晰可读
-        
-        int array[] = { 1, 2, 3, 4, 5 };
-        for (int data : array) {
-            // ...implementation
-        }
-        
-        int length = array.length;
-        for (int ix = 0; ix < length; ix++) {
-            // ...implementation
-        }
-        
-        boolean condition = true;
-        while (condition) {
-            // ...implementation
-        }
-        
-        do {
-            // ...implementation
-        } while (condition);
-    }
-    
-    /**
-     * 异常捕获原则。
-     */
-    private void exceptionFun() {
-        
-        // 原则： 1. 捕捉异常是为了处理它，通常在异常catch块中输出异常信息。
-        //       2. 资源释放的工作，可以放到 finally 块部分去做。如关闭 Cursor 等。
-        try {
-            // ...implementation
-        } catch (Exception e) {
-            e.printStackTrace();
-        } finally {
-            
-        }
-    }
-    
-    /**
-     * 其它原则（整理中...）。
-     */
-    private void otherFun() {
-        // TODO
-    }    
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/codestyle/SampleCode.java b/weibo/src/main/java/com/sina/weibo/sdk/codestyle/SampleCode.java
deleted file mode 100644
index bd41f9c..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/codestyle/SampleCode.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.codestyle;
-
-/**
- * 类的大体描述放在这里。
- *         
- * @author 作者名
- * @since 2013-XX-XX
- */
-@SuppressWarnings("unused")
-public class SampleCode {
-
-    /** 公有的常量注释 */
-    public static final String ACTION_MAIN = "android.intent.action.MAIN";
-    
-    /** 私有的常量注释（同类型的常量可以分块并紧凑定义） */
-    private static final int MSG_AUTH_NONE    = 0;
-    private static final int MSG_AUTH_SUCCESS = 1;
-    private static final int MSG_AUTH_FAILED  = 2;
-    
-    /** 保护的成员变量注释 */
-    protected Object mObject0;
-    
-    /** 私有的成员变量 mObject1 注释（同类型的成员变量可以分块并紧凑定义） */
-    private Object mObject1;
-    /** 私有的成员变量 mObject2 注释 */
-    private Object mObject2;
-    /** 私有的成员变量 mObject3 注释 */
-    private Object mObject3;
-    
-    /**
-     * 对于注释多于一行的，采用这种方式来
-     * 定义该变量
-     */
-    private Object mObject4;
-
-    /**
-     * 公有方法描述...
-     * 
-     * @param param1  参数1描述...
-     * @param param2  参数2描述...
-     * @param paramXX 参数XX描述... （注意：请将参数、描述都对齐）
-     */
-    public void doSomething(int param1, float param2, String paramXX) {
-        // ...implementation
-    }
-    
-    /**
-     * 保护方法描述...
-     */
-    protected void doSomething() {
-        // ...implementation        
-    }
-    
-    /**
-     * 私有方法描述...
-     * 
-     * @param param1  参数1描述...
-     * @param param2  参数2描述...
-     */
-    private void doSomethingInternal(int param1, float param2) {
-        // ...implementation        
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/AbsOpenAPI.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/AbsOpenAPI.java
deleted file mode 100644
index 9576aba..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/AbsOpenAPI.java
+++ /dev/null
@@ -1,104 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi;
-
-import android.content.Context;
-import android.text.TextUtils;
-import com.sina.weibo.sdk.auth.Oauth2AccessToken;
-import com.sina.weibo.sdk.net.AsyncWeiboRunner;
-import com.sina.weibo.sdk.net.RequestListener;
-import com.sina.weibo.sdk.net.WeiboParameters;
-import com.sina.weibo.sdk.utils.LogUtil;
-
-/**
- * 微博 OpenAPI 的基类，每个接口类都继承了此抽象类。
- * 
- * @author SINA
- * @since 2013-11-05
- */
-public abstract class AbsOpenAPI {
-    private static final String TAG = AbsOpenAPI.class.getName();
-    
-    /** 访问微博服务接口的地址 */
-    protected static final String API_SERVER       = "https://api.weibo.com/2";
-    /** POST 请求方式 */
-    protected static final String HTTPMETHOD_POST  = "POST";
-    /** GET 请求方式 */
-    protected static final String HTTPMETHOD_GET   = "GET";
-    /** HTTP 参数 */
-    protected static final String KEY_ACCESS_TOKEN = "access_token";
-    
-    /** 当前的 Token */
-    protected Oauth2AccessToken mAccessToken;
-    protected Context mContext;
-    protected String mAppKey;
-    
-    /**
-     * 构造函数，使用各个 API 接口提供的服务前必须先获取 Token。
-     * 
-     * @param accesssToken 访问令牌
-     */
-    public AbsOpenAPI(Context context, String appKey, Oauth2AccessToken accessToken) {
-        mContext = context;
-        mAppKey = appKey;
-        mAccessToken = accessToken;
-    }
-
-    /**
-     * HTTP 异步请求。
-     * 
-     * @param url        请求的地址
-     * @param params     请求的参数
-     * @param httpMethod 请求方法
-     * @param listener   请求后的回调接口
-     */
-    protected void requestAsync(String url, WeiboParameters params, String httpMethod, RequestListener listener) {
-        if (null == mAccessToken
-                || TextUtils.isEmpty(url)
-                || null == params
-                || TextUtils.isEmpty(httpMethod)
-                || null == listener) {
-            LogUtil.e(TAG, "Argument error!");
-            return;
-        }
-        
-        params.put(KEY_ACCESS_TOKEN, mAccessToken.getToken());
-        new AsyncWeiboRunner(mContext).requestAsync(url, params, httpMethod, listener);
-    }
-    
-    /**
-     * HTTP 同步请求。
-     * 
-     * @param url        请求的地址
-     * @param params     请求的参数
-     * @param httpMethod 请求方法
-     * 
-     * @return 同步请求后，服务器返回的字符串。
-     */
-    protected String requestSync(String url, WeiboParameters params, String httpMethod) {
-        if (null == mAccessToken
-                || TextUtils.isEmpty(url)
-                || null == params
-                || TextUtils.isEmpty(httpMethod)) {
-            LogUtil.e(TAG, "Argument error!");
-            return "";
-        }
-        
-        params.put(KEY_ACCESS_TOKEN, mAccessToken.getToken());
-        return new AsyncWeiboRunner(mContext).request(url, params, httpMethod);
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/CommentsAPI.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/CommentsAPI.java
deleted file mode 100644
index 1933d38..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/CommentsAPI.java
+++ /dev/null
@@ -1,393 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi;
-
-import android.content.Context;
-import android.util.SparseArray;
-import com.sina.weibo.sdk.auth.Oauth2AccessToken;
-import com.sina.weibo.sdk.net.RequestListener;
-import com.sina.weibo.sdk.net.WeiboParameters;
-
-/**
- * 此类封装了评论的接口。
- * 详情请参考<a href="http://t.cn/8F3geol">评论接口</a>
- * 
- * @author SINA
- * @since 2014-03-03
- */
-public class CommentsAPI extends AbsOpenAPI {
-
-    /** 作者筛选类型，0：全部、1：我关注的人、2：陌生人 */
-    public static final int AUTHOR_FILTER_ALL        = 0;
-    public static final int AUTHOR_FILTER_ATTENTIONS = 1;
-    public static final int AUTHOR_FILTER_STRANGER   = 2;
-
-    /** 来源筛选类型，0：全部、1：来自微博的评论、2：来自微群的评论 */
-    public static final int SRC_FILTER_ALL    = 0;
-    public static final int SRC_FILTER_WEIBO  = 1;
-    public static final int SRC_FILTER_WEIQUN = 2;
-
-    /**
-     * API 类型。
-     * 命名规则：
-     *      <li>读取接口：READ_API_XXX
-     *      <li>写入接口：WRITE_API_XXX
-     * 请注意：该类中的接口仅做为演示使用，并没有包含所有关于微博的接口，第三方开发者可以
-     * 根据需要来填充该类，可参考legacy包下 {@link com.sina.weibo.sdk.openapi.legacy.CommentsAPI}
-     */
-    private static final int READ_API_TO_ME           = 0;
-    private static final int READ_API_BY_ME           = 1;
-    private static final int READ_API_SHOW            = 2;
-    private static final int READ_API_TIMELINE        = 3;
-    private static final int READ_API_MENTIONS        = 4;
-    private static final int READ_API_SHOW_BATCH      = 5;
-    private static final int WRITE_API_CREATE         = 6;
-    private static final int WRITE_API_DESTROY        = 7;
-    private static final int WRITE_API_SDESTROY_BATCH = 8;
-    private static final int WRITE_API_REPLY          = 9;
-    
-    private static final String API_BASE_URL = API_SERVER + "/comments";
-    
-    private static final SparseArray<String> sAPIList = new SparseArray<String>();
-    static {
-        sAPIList.put(READ_API_TO_ME,           API_BASE_URL + "/to_me.json");
-        sAPIList.put(READ_API_BY_ME,           API_BASE_URL + "/by_me.json");
-        sAPIList.put(READ_API_SHOW,            API_BASE_URL + "/show.json");
-        sAPIList.put(READ_API_TIMELINE,        API_BASE_URL + "/timeline.json");
-        sAPIList.put(READ_API_MENTIONS,        API_BASE_URL + "/mentions.json");
-        sAPIList.put(READ_API_SHOW_BATCH,      API_BASE_URL + "/show_batch.json");
-        sAPIList.put(WRITE_API_CREATE,         API_BASE_URL + "/create.json");
-        sAPIList.put(WRITE_API_DESTROY,        API_BASE_URL + "/destroy.json");
-        sAPIList.put(WRITE_API_SDESTROY_BATCH, API_BASE_URL + "/sdestroy_batch.json");
-        sAPIList.put(WRITE_API_REPLY,          API_BASE_URL + "/reply.json");
-    }
-    
-    /**
-     * 构造函数，使用各个 API 接口提供的服务前必须先获取 Token。
-     * 
-     * @param accesssToken 访问令牌
-     */
-	public CommentsAPI(Context context, String appKey, Oauth2AccessToken accessToken) {
-        super(context, appKey, accessToken);
-    }
-
-    /**
-     * 根据微博ID返回某条微博的评论列表。
-     * 
-     * @param id         需要查询的微博ID。
-     * @param since_id   若指定此参数，则返回ID比since_id大的评论（即比since_id时间晚的评论），默认为0。
-     * @param max_id     若指定此参数，则返回ID小于或等于max_id的评论，默认为0。
-     * @param count      单页返回的记录条数，默认为50
-     * @param page       返回结果的页码，默认为1。
-     * @param authorType 作者筛选类型，0：全部、1：我关注的人、2：陌生人 ,默认为0。可为以下几种 :
-     *                   <li>{@link #AUTHOR_FILTER_ALL}
-     *                   <li>{@link #AUTHOR_FILTER_ATTENTIONS}
-     *                   <li>{@link #AUTHOR_FILTER_STRANGER}
-     * @param listener   异步请求回调接口
-     */
-    public void show(long id, long since_id, long max_id, int count, int page, int authorType, RequestListener listener) {
-        WeiboParameters params = buildTimeLineParamsBase(since_id, max_id, count, page);
-        params.put("id", id);
-        params.put("filter_by_author", authorType);
-        requestAsync(sAPIList.get(READ_API_SHOW), params, HTTPMETHOD_GET, listener);
-    }
-    
-    /**
-     * 获取当前登录用户所发出的评论列表。
-     * 
-     * @param since_id   若指定此参数，则返回ID比since_id大的评论（即比since_id时间晚的评论），默认为0。
-     * @param max_id     若指定此参数，则返回ID小于或等于max_id的评论，默认为0。
-     * @param count      单页返回的记录条数，默认为50。
-     * @param page       返回结果的页码，默认为1。
-     * @param sourceType 来源筛选类型，0：全部、1：来自微博的评论、2：来自微群的评论，默认为0。
-     *                   <li>{@link #SRC_FILTER_ALL}
-     *                   <li>{@link #SRC_FILTER_WEIBO}
-     *                   <li>{@link #SRC_FILTER_WEIQUN} 
-     * @param listener   异步请求回调接口
-     */
-    public void byME(long since_id, long max_id, int count, int page, int sourceType, RequestListener listener) {
-        WeiboParameters params = buildTimeLineParamsBase(since_id, max_id, count, page);
-        params.put("filter_by_source", sourceType);
-        requestAsync(sAPIList.get(READ_API_BY_ME), params, HTTPMETHOD_GET, listener);
-    }
-    
-    /**
-     * 获取当前登录用户所接收到的评论列表。
-     * 
-     * @param since_id   若指定此参数，则返回ID比since_id大的评论（即比since_id时间晚的评论），默认为0。
-     * @param max_id     若指定此参数，则返回ID小于或等于max_id的评论，默认为0。
-     * @param count      单页返回的记录条数，默认为50。
-     * @param page       返回结果的页码，默认为1。
-     * @param authorType 作者筛选类型，0：全部、1：我关注的人、2：陌生人 ,默认为0。可为以下几种 :
-     *                   <li>{@link #AUTHOR_FILTER_ALL}
-     *                   <li>{@link #AUTHOR_FILTER_ATTENTIONS}
-     *                   <li>{@link #AUTHOR_FILTER_STRANGER}
-     * @param sourceType 来源筛选类型，0：全部、1：来自微博的评论、2：来自微群的评论，默认为0。
-     *                   <li>{@link #SRC_FILTER_ALL}
-     *                   <li>{@link #SRC_FILTER_WEIBO}
-     *                   <li>{@link #SRC_FILTER_WEIQUN}
-     * @param listener   异步请求回调接口
-     */
-    public void toME(long since_id, long max_id, int count, int page, int authorType, int sourceType,
-            RequestListener listener) {
-        WeiboParameters params = buildTimeLineParamsBase(since_id, max_id, count, page);
-        params.put("filter_by_author", authorType);
-        params.put("filter_by_source", sourceType);
-        requestAsync(sAPIList.get(READ_API_TO_ME), params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取当前登录用户的最新评论包括接收到的与发出的。
-     * 
-     * @param since_id  若指定此参数，则返回ID比since_id大的评论（即比since_id时间晚的评论），默认为0。
-     * @param max_id    若指定此参数，则返回ID小于或等于max_id的评论，默认为0。
-     * @param count     单页返回的记录条数，默认为50。
-     * @param page      返回结果的页码，默认为1。
-     * @param trim_user 返回值中user字段开关，false：返回完整user字段、true：user字段仅返回user_id，默认为false。
-     * @param listener  异步请求回调接口
-     */
-    public void timeline(long since_id, long max_id, int count, int page, boolean trim_user, RequestListener listener) {
-        WeiboParameters params = buildTimeLineParamsBase(since_id, max_id, count, page);
-        params.put("trim_user", trim_user ? 1 : 0);
-        requestAsync(sAPIList.get(READ_API_TIMELINE), params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取最新的提到当前登录用户的评论，即@我的评论 若指定此参数，则返回ID比since_id大的评论（即比since_id时间晚的评论），默认为0
-     * 
-     * @param since_id   若指定此参数，则返回ID小于或等于max_id的评论，默认为0
-     * @param max_id     若指定此参数，则返回ID小于或等于max_id的评论，默认为0
-     * @param count      单页返回的记录条数，默认为50
-     * @param page       返回结果的页码，默认为1
-     * @param authorType 作者筛选类型，0：全部，1：我关注的人， 2：陌生人，默认为0
-     *                   <li> {@link #AUTHOR_FILTER_ALL}
-     *                   <li> {@link #AUTHOR_FILTER_ATTENTIONS}
-     *                   <li> {@link #AUTHOR_FILTER_STRANGER}
-     *@param sourceType  来源筛选类型，0：全部，1：来自微博的评论，2：来自微群的评论，默认为0
-     *                   <li> {@link #SRC_FILTER_ALL}
-     *                   <li> {@link #SRC_FILTER_WEIBO}
-     *                   <li> {@link #SRC_FILTER_WEIQUN}
-     * @param listener   异步请求回调接口
-     */
-    public void mentions(long since_id, long max_id, int count, int page, int authorType, int sourceType,
-            RequestListener listener) {
-        WeiboParameters params = buildTimeLineParamsBase(since_id, max_id, count, page);
-        params.put("filter_by_author", authorType);
-        params.put("filter_by_source", sourceType);
-        requestAsync(sAPIList.get(READ_API_MENTIONS), params, HTTPMETHOD_GET, listener);
-    }
-    
-    /**
-     * 根据评论ID批量返回评论信息。
-     * 
-     * @param cids      需要查询的批量评论ID数组，最大50
-     * @param listener  异步请求回调接口
-     */
-    public void showBatch(long[] cids, RequestListener listener) {
-        WeiboParameters params = buildShowOrDestoryBatchParams(cids);
-        requestAsync(sAPIList.get(READ_API_SHOW_BATCH), params, HTTPMETHOD_GET, listener);
-    }
-    
-    /**
-     * 对一条微博进行评论。
-     * 
-     * @param comment     评论内容，内容不超过140个汉字。
-     * @param id          需要评论的微博ID。
-     * @param comment_ori 当评论转发微博时，是否评论给原微博
-     * @param listener    异步请求回调接口
-     */
-    public void create(String comment, long id, boolean comment_ori, RequestListener listener) {
-        WeiboParameters params = buildCreateParams(comment, id, comment_ori);
-        requestAsync(sAPIList.get(WRITE_API_CREATE), params, HTTPMETHOD_POST, listener);
-    }
-    
-    /**
-     * 删除一条评论。
-     * 
-     * @param cid      要删除的评论ID，只能删除登录用户自己发布的评论。
-     * @param listener 异步请求回调接口
-     */
-    public void destroy(long cid, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("cid", cid);
-        requestAsync(sAPIList.get(WRITE_API_DESTROY), params, HTTPMETHOD_POST, listener);
-    }
-    
-    /**
-     * 根据评论ID批量删除评论。
-     * 
-     * @param ids      需要删除的评论ID数组，最多20个。
-     * @param listener 异步请求回调接口
-     */
-    public void destroyBatch(long[] ids, RequestListener listener) {
-        WeiboParameters params = buildShowOrDestoryBatchParams(ids);
-        requestAsync(sAPIList.get(WRITE_API_SDESTROY_BATCH), params, HTTPMETHOD_POST, listener);
-    }
-    
-    /**
-     * 回复一条评论。
-     * 
-     * @param cid             需要回复的评论ID
-     * @param id              需要评论的微博ID
-     * @param comment         回复评论内容，内容不超过140个汉字
-     * @param without_mention 回复中是否自动加入“回复@用户名”，true：是、false：否，默认为false
-     * @param comment_ori     当评论转发微博时，是否评论给原微博，false：否、true：是，默认为false
-     * @param listener        异步请求回调接口
-     */
-    public void reply(long cid, long id, String comment, boolean without_mention, boolean comment_ori,
-            RequestListener listener) {
-        WeiboParameters params = buildReplyParams(cid, id, comment, without_mention, comment_ori);
-        requestAsync(sAPIList.get(WRITE_API_REPLY), params, HTTPMETHOD_POST, listener);
-    }
-    
-    /**
-     * -----------------------------------------------------------------------
-     * 请注意：以下方法匀均同步方法。如果开发者有自己的异步请求机制，请使用该函数。
-     * -----------------------------------------------------------------------
-     */
-    
-    /**
-     * @see #show(long, long, long, int, int, int, RequestListener)
-     */
-    public String showSync(long id, long since_id, long max_id, int count, int page, int authorType) {
-        WeiboParameters params = buildTimeLineParamsBase(since_id, max_id, count, page);
-        params.put("id", id);
-        params.put("filter_by_author", authorType);
-        return requestSync(sAPIList.get(READ_API_SHOW), params, HTTPMETHOD_GET);
-    }
-
-    /**
-     * @see #byME(long, long, int, int, int, RequestListener)
-     */
-    public String byMESync(long since_id, long max_id, int count, int page, int sourceType) {
-        WeiboParameters params = buildTimeLineParamsBase(since_id, max_id, count, page);
-        params.put("filter_by_source", sourceType);
-        return requestSync(sAPIList.get(READ_API_BY_ME), params, HTTPMETHOD_GET);
-    }
-
-    /**
-     * @see #toME(long, long, int, int, int, int, RequestListener)
-     */
-    public String toMESync(long since_id, long max_id, int count, int page, int authorType, int sourceType) {
-        WeiboParameters params = buildTimeLineParamsBase(since_id, max_id, count, page);
-        params.put("filter_by_author", authorType);
-        params.put("filter_by_source", sourceType);
-        return requestSync(sAPIList.get(READ_API_TO_ME), params, HTTPMETHOD_GET);
-    }
-
-    /**
-     * @see #timeline(long, long, int, int, boolean, RequestListener)
-     */
-    public String timelineSync(long since_id, long max_id, int count, int page, boolean trim_user) {
-        WeiboParameters params = buildTimeLineParamsBase(since_id, max_id, count, page);
-        params.put("trim_user", trim_user ? 1 : 0);
-        return requestSync(sAPIList.get(READ_API_TIMELINE), params, HTTPMETHOD_GET);
-    }
-
-    /**
-     * @see #mentions(long, long, int, int, int, int, RequestListener)
-     */
-    public String mentionsSync(long since_id, long max_id, int count, int page, int authorType, int sourceType) {
-        WeiboParameters params = buildTimeLineParamsBase(since_id, max_id, count, page);
-        params.put("filter_by_author", authorType);
-        params.put("filter_by_source", sourceType);
-        return requestSync(sAPIList.get(READ_API_MENTIONS), params, HTTPMETHOD_GET);
-    }
-
-    /**
-     * @see #showBatch(long[], RequestListener)
-     */
-    public String showBatchSync(long[] cids) {
-        WeiboParameters params = buildShowOrDestoryBatchParams(cids);
-        return requestSync(sAPIList.get(READ_API_SHOW_BATCH), params, HTTPMETHOD_GET);
-    }
-
-    /**
-     * @see #create(String, long, boolean, RequestListener)
-     */
-    public String createSync(String comment, long id, boolean comment_ori) {
-        WeiboParameters params = buildCreateParams(comment, id, comment_ori);
-        return requestSync(sAPIList.get(WRITE_API_CREATE), params, HTTPMETHOD_POST);
-    }
-
-    /**
-     * @see #destroyBatch(long[], RequestListener)
-     */
-    public String destroySync(long cid) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("cid", cid);
-        return requestSync(sAPIList.get(WRITE_API_DESTROY), params, HTTPMETHOD_POST);
-    }
-
-    /**
-     * @see #destroyBatchSync(long[])
-     */
-    public String destroyBatchSync(long[] ids) {
-        WeiboParameters params = buildShowOrDestoryBatchParams(ids);
-        return requestSync(sAPIList.get(WRITE_API_SDESTROY_BATCH), params, HTTPMETHOD_POST);
-    }
-
-    /**
-     * @see #reply(long, long, String, boolean, boolean, RequestListener)
-     */
-    public String replySync(long cid, long id, String comment, boolean without_mention, boolean comment_ori) {
-        WeiboParameters params = buildReplyParams(cid, id, comment, without_mention, comment_ori);
-        return requestSync(sAPIList.get(WRITE_API_REPLY), params, HTTPMETHOD_POST);
-    }
-
-    /** 
-     * 组装TimeLines的参数
-     */
-    private WeiboParameters buildTimeLineParamsBase(long since_id, long max_id, int count, int page) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("since_id", since_id);
-        params.put("max_id", max_id);
-        params.put("count", count);
-        params.put("page", page);
-        return params;
-    }
-
-    private WeiboParameters buildShowOrDestoryBatchParams(long[] cids) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        StringBuilder strb = new StringBuilder();
-        for (long cid : cids) {
-            strb.append(cid).append(",");
-        }
-        strb.deleteCharAt(strb.length() - 1);
-        params.put("cids", strb.toString());
-        return params;
-    }
-
-    private WeiboParameters buildCreateParams(String comment, long id, boolean comment_ori) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("comment", comment);
-        params.put("id", id);
-        params.put("comment_ori", comment_ori ? 1: 0);
-        return params;
-    }
-
-    private WeiboParameters buildReplyParams(long cid, long id, String comment, boolean without_mention,
-            boolean comment_ori) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("cid", cid);
-        params.put("id", id);
-        params.put("comment", comment);
-        params.put("without_mention", without_mention ? 1: 0);
-        params.put("comment_ori",     comment_ori ? 1: 0);
-        return params;
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/InviteAPI.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/InviteAPI.java
deleted file mode 100644
index 0f046db..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/InviteAPI.java
+++ /dev/null
@@ -1,79 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi;
-
-import org.json.JSONObject;
-
-import android.content.Context;
-import android.text.TextUtils;
-import com.sina.weibo.sdk.auth.Oauth2AccessToken;
-import com.sina.weibo.sdk.net.RequestListener;
-import com.sina.weibo.sdk.net.WeiboParameters;
-import com.sina.weibo.sdk.utils.LogUtil;
-
-/**
- * 该类提供了好友邀请接口，支持登录用户向自己的微博互粉好友发送私信邀请、礼物。
- * 详情请参考： 
- * <li><a href="http://open.weibo.com/wiki/2/messages/invite">好友邀请接口</a>
- * <li><a href=http://t.cn/8F75vDo>申请接入流程</a>
- * 
- * @author SINA
- * @since 2013-11-04
- */
-public class InviteAPI extends AbsOpenAPI {
-    private final static String TAG = InviteAPI.class.getName();
-    
-    /** 邀请地址 */
-    private final String INVITE_URL = "https://m.api.weibo.com/2/messages/invite.json";
-    
-    /**（必须）要回复的私信文本内容。文本大小必须小于300个汉字 */
-    public final static String KEY_TEXT = "text";
-    /**（可选）邀请点击后跳转链接。默认为当前应用地址 */
-    public final static String KEY_URL  = "url";
-    /**（可选）邀请 Card 展示时的图标地址，大小必须为 80px X 80px，仅支持 PNG、JPG 格式。默认为当前应用 Logo 地址 */
-    public final static String KEY_INVITE_LOGO = "invite_logo";
-
-    /**
-     * 构造函数。
-     * 
-     * @param oauth2AccessToken Token 实例
-     */
-    public InviteAPI(Context context, String appKey, Oauth2AccessToken accessToken) {
-        super(context, appKey, accessToken);
-    }
-    
-    /**
-     * 向好友发送邀请。支持登录用户向自己的微博互粉好友发送私信邀请、礼物。
-     * 
-     * @param uid      被邀请人的 Uid，需要为当前用户互粉好友
-     * @param jsonData 邀请数据。以 {@link JSONObject} 数据填充
-     * @param listener 邀请接口对应的回调
-     */
-    public void sendInvite(String uid, JSONObject jsonData, RequestListener listener) {
-        if (!TextUtils.isEmpty(uid) 
-                && jsonData != null 
-                && !TextUtils.isEmpty(jsonData.toString())) {
-            
-            WeiboParameters params = new WeiboParameters(mAppKey);
-            params.put("uid", uid);
-            params.put("data", jsonData.toString());
-            requestAsync(INVITE_URL, params, HTTPMETHOD_POST, listener);
-        } else {
-            LogUtil.d(TAG, "Invite args error!");
-        }
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/LogoutAPI.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/LogoutAPI.java
deleted file mode 100644
index b2d297f..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/LogoutAPI.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi;
-
-import android.content.Context;
-import com.sina.weibo.sdk.auth.Oauth2AccessToken;
-import com.sina.weibo.sdk.net.RequestListener;
-import com.sina.weibo.sdk.net.WeiboParameters;
-
-/**
- * 该类提供了授权回收接口，帮助开发者主动取消用户的授权。
- * 详情请参考<a href="http://t.cn/zYeuB0k">授权回收</a>
- * 
- * @author SINA
- * @since 2013-11-05
- */
-public class LogoutAPI extends AbsOpenAPI {
-    /** 注销地址（URL） */
-    private static final String REVOKE_OAUTH_URL = "https://api.weibo.com/oauth2/revokeoauth2";
-    
-    /**
-     * 构造函数。
-     * 
-     * @param oauth2AccessToken Token 实例
-     */
-    public LogoutAPI(Context context, String appKey, Oauth2AccessToken accessToken) {
-        super(context, appKey, accessToken);
-    }
-
-    /**
-     * 异步取消用户的授权。
-     * 
-     * @param listener 异步请求回调接口
-     */
-    public void logout(RequestListener listener) {
-        requestAsync(REVOKE_OAUTH_URL, new WeiboParameters(mAppKey), HTTPMETHOD_POST, listener);
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/StatusesAPI.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/StatusesAPI.java
deleted file mode 100644
index 0756dde..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/StatusesAPI.java
+++ /dev/null
@@ -1,286 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi;
-
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.text.TextUtils;
-import android.util.SparseArray;
-import com.sina.weibo.sdk.auth.Oauth2AccessToken;
-import com.sina.weibo.sdk.net.RequestListener;
-import com.sina.weibo.sdk.net.WeiboParameters;
-
-/**
- * 该类封装了微博接口。
- * 详情请参考<a href="http://t.cn/8F3e7SE">微博接口</a>
- * 
- * @author SINA
- * @since 2014-03-03
- */
-public class StatusesAPI extends AbsOpenAPI {
-    
-    /** 过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐 */
-    public static final int FEATURE_ALL      = 0;
-    public static final int FEATURE_ORIGINAL = 1;
-    public static final int FEATURE_PICTURE  = 2;
-    public static final int FEATURE_VIDEO    = 3;
-    public static final int FEATURE_MUSICE   = 4;
-    
-    /** 作者筛选类型，0：全部、1：我关注的人、2：陌生人 */
-    public static final int AUTHOR_FILTER_ALL        = 0;
-    public static final int AUTHOR_FILTER_ATTENTIONS = 1;
-    public static final int AUTHOR_FILTER_STRANGER   = 2;
-    
-    /** 来源筛选类型，0：全部、1：来自微博的评论、2：来自微群的评论 */
-    public static final int SRC_FILTER_ALL      = 0;
-    public static final int SRC_FILTER_WEIBO    = 1;
-    public static final int SRC_FILTER_WEIQUN   = 2;
-    
-    /** 原创筛选类型，0：全部微博、1：原创的微博。  */
-    public static final int TYPE_FILTER_ALL     = 0;
-    public static final int TYPE_FILTER_ORIGAL  = 1;    
-
-    /** API URL */
-    private static final String API_BASE_URL = API_SERVER + "/statuses";
-
-    /**
-     * API 类型。
-     * 命名规则：
-     *      <li>读取接口：READ_API_XXX
-     *      <li>写入接口：WRITE_API_XXX
-     * 请注意：该类中的接口仅做为演示使用，并没有包含所有关于微博的接口，第三方开发者可以
-     * 根据需要来填充该类，可参考legacy包下 {@link com.sina.weibo.sdk.openapi.legacy.StatusesAPI}
-     */
-    private static final int READ_API_FRIENDS_TIMELINE = 0;
-    private static final int READ_API_MENTIONS         = 1;    
-    private static final int WRITE_API_UPDATE          = 2;
-    private static final int WRITE_API_REPOST          = 3;
-    private static final int WRITE_API_UPLOAD          = 4;
-    private static final int WRITE_API_UPLOAD_URL_TEXT = 5;
-
-    private static final SparseArray<String> sAPIList = new SparseArray<String>();
-    static {
-        sAPIList.put(READ_API_FRIENDS_TIMELINE, API_BASE_URL + "/friends_timeline.json");
-        sAPIList.put(READ_API_MENTIONS,         API_BASE_URL + "/mentions.json");
-        sAPIList.put(WRITE_API_REPOST,          API_BASE_URL + "/repost.json");
-        sAPIList.put(WRITE_API_UPDATE,          API_BASE_URL + "/update.json");
-        sAPIList.put(WRITE_API_UPLOAD,          API_BASE_URL + "/upload.json");
-        sAPIList.put(WRITE_API_UPLOAD_URL_TEXT, API_BASE_URL + "/upload_url_text.json");
-    }
-
-    /**
-     * 构造函数，使用各个 API 接口提供的服务前必须先获取 Token。
-     * 
-     * @param accesssToken 访问令牌
-     */
-    public StatusesAPI(Context context, String appKey, Oauth2AccessToken accessToken) {
-        super(context, appKey, accessToken);
-    }
-    
-    /**
-     * 获取当前登录用户及其所关注用户的最新微博。
-     * 
-     * @param since_id    若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0
-     * @param max_id      若指定此参数，则返回ID小于或等于max_id的微博，默认为0。
-     * @param count       单页返回的记录条数，默认为50。
-     * @param page        返回结果的页码，默认为1。
-     * @param base_app    是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false。
-     * @param featureType 过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0。
-     *                    <li>{@link #FEATURE_ALL}
-     *                    <li>{@link #FEATURE_ORIGINAL}
-     *                    <li>{@link #FEATURE_PICTURE}
-     *                    <li>{@link #FEATURE_VIDEO}
-     *                    <li>{@link #FEATURE_MUSICE}
-     * @param trim_user   返回值中user字段开关，false：返回完整user字段、true：user字段仅返回user_id，默认为false。
-     * @param listener    异步请求回调接口
-     */
-    public void friendsTimeline(long since_id, long max_id, int count, int page, boolean base_app,
-            int featureType, boolean trim_user, RequestListener listener) {
-        WeiboParameters params = 
-                buildTimeLineParamsBase(since_id, max_id, count, page, base_app, trim_user, featureType);
-        requestAsync(sAPIList.get(READ_API_FRIENDS_TIMELINE), params, HTTPMETHOD_GET, listener);
-    }    
-    
-    /**
-     * 获取最新的提到登录用户的微博列表，即@我的微博。
-     * 
-     * @param since_id      若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0。
-     * @param max_id        若指定此参数，则返回ID小于或等于max_id的微博，默认为0。
-     * @param count         单页返回的记录条数，默认为50。
-     * @param page          返回结果的页码，默认为1。
-     * @param authorType    作者筛选类型，0：全部、1：我关注的人、2：陌生人 ,默认为0。可为以下几种 :
-     *                      <li>{@link #AUTHOR_FILTER_ALL}
-     *                      <li>{@link #AUTHOR_FILTER_ATTENTIONS}
-     *                      <li>{@link #AUTHOR_FILTER_STRANGER}
-     * @param sourceType    来源筛选类型，0：全部、1：来自微博的评论、2：来自微群的评论，默认为0。可为以下几种 :
-     *                      <li>{@link #SRC_FILTER_ALL}
-     *                      <li>{@link #SRC_FILTER_WEIBO}
-     *                      <li>{@link #SRC_FILTER_WEIQUN}
-     * @param filterType    原创筛选类型，0：全部微博、1：原创的微博，默认为0。 可为以下几种 :
-     *                      <li>{@link #TYPE_FILTER_ALL}
-     *                      <li>{@link #TYPE_FILTER_ORIGAL}
-     * @param trim_user     返回值中user字段开关，false：返回完整user字段、true：user字段仅返回user_id，默认为false
-     * @param listener      异步请求回调接口
-     */
-    public void mentions(long since_id, long max_id, int count, int page, int authorType, int sourceType,
-            int filterType, boolean trim_user, RequestListener listener) {
-        WeiboParameters params = buildMentionsParams(since_id, max_id, count, page, authorType, sourceType, filterType, trim_user);
-        requestAsync(sAPIList.get(READ_API_MENTIONS), params, HTTPMETHOD_GET, listener);
-    }
-    
-    /**
-     * 发布一条新微博（连续两次发布的微博不可以重复）。
-     * 
-     * @param content  要发布的微博文本内容，内容不超过140个汉字。
-     * @param lat      纬度，有效范围：-90.0到+90.0，+表示北纬，默认为0.0。
-     * @param lon      经度，有效范围：-180.0到+180.0，+表示东经，默认为0.0。
-     * @param listener 异步请求回调接口
-     */
-    public void update(String content, String lat, String lon, RequestListener listener) {
-        WeiboParameters params = buildUpdateParams(content, lat, lon);
-        requestAsync(sAPIList.get(WRITE_API_UPDATE), params, HTTPMETHOD_POST, listener);
-    }
-    
-    /**
-     * 上传图片并发布一条新微博。
-     * 
-     * @param content  要发布的微博文本内容，内容不超过140个汉字
-     * @param bitmap   要上传的图片，仅支持JPEG、GIF、PNG格式，图片大小小于5M
-     * @param lat      纬度，有效范围：-90.0到+90.0，+表示北纬，默认为0.0。
-     * @param lon      经度，有效范围：-180.0到+180.0，+表示东经，默认为0.0。
-     * @param listener 异步请求回调接口
-     */
-    public void upload(String content, Bitmap bitmap, String lat, String lon, RequestListener listener) {
-        WeiboParameters params = buildUpdateParams(content, lat, lon);
-        params.put("pic", bitmap);
-        requestAsync(sAPIList.get(WRITE_API_UPLOAD), params, HTTPMETHOD_POST, listener);
-    }
-    
-    /**
-     * 指定一个图片URL地址抓取后上传并同时发布一条新微博，此方法会处理URLencod。
-     * 
-     * @param status   要发布的微博文本内容，内容不超过140个汉字。
-     * @param imageUrl 图片的URL地址，必须以http开头。
-     * @param pic_id   已经上传的图片pid，多个时使用英文半角逗号符分隔，最多不超过九张。 
-     *                 imageUrl 和 pic_id必选一个，两个参数都存在时，取picid参数的值为准。
-     *                 <b>注：目前该参数不可用，现在还只能通过BD合作接入，不对个人申请</b>
-     * @param lat      纬度，有效范围：-90.0到+90.0，+表示北纬，默认为0.0。
-     * @param lon      经度，有效范围：-180.0到+180.0，+表示东经，默认为0.0。
-     * @param listener 异步请求回调接口
-     */
-    public void uploadUrlText(String status, String imageUrl, String pic_id, String lat, String lon,
-            RequestListener listener) {
-        WeiboParameters params = buildUpdateParams(status, lat, lon);
-        params.put("url", imageUrl);
-        params.put("pic_id", pic_id);
-        requestAsync(sAPIList.get(WRITE_API_UPLOAD_URL_TEXT), params, HTTPMETHOD_POST, listener);
-    }
-    
-    /**
-     * @see #friendsTimeline(long, long, int, int, boolean, int, boolean, RequestListener)
-     */
-    public String friendsTimelineSync(long since_id, long max_id, int count, int page, boolean base_app, int featureType,
-            boolean trim_user) {
-        WeiboParameters params = buildTimeLineParamsBase(since_id, max_id, count, page, base_app,
-                trim_user, featureType);
-        return requestSync(sAPIList.get(READ_API_FRIENDS_TIMELINE), params, HTTPMETHOD_GET);
-    }
-
-    /**
-     * -----------------------------------------------------------------------
-     * 请注意：以下方法匀均同步方法。如果开发者有自己的异步请求机制，请使用该函数。
-     * -----------------------------------------------------------------------
-     */
-    
-    /**
-     * @see #mentions(long, long, int, int, int, int, int, boolean, RequestListener)
-     */
-    public String mentionsSync(long since_id, long max_id, int count, int page,
-            int authorType, int sourceType, int filterType, boolean trim_user) {
-        WeiboParameters params = buildMentionsParams(since_id, max_id, count, page, authorType, sourceType, filterType, trim_user);
-        return requestSync(sAPIList.get(READ_API_MENTIONS), params, HTTPMETHOD_GET);
-    }
-
-    /**
-     * @see #update(String, String, String, RequestListener)
-     */
-    public String updateSync(String content, String lat, String lon) {
-        WeiboParameters params = buildUpdateParams(content, lat, lon);
-        return requestSync(sAPIList.get(WRITE_API_UPDATE), params, HTTPMETHOD_POST);
-    }
-
-    /**
-     * @see #upload(String, Bitmap, String, String, RequestListener)
-     */
-    public String uploadSync(String content, Bitmap bitmap, String lat, String lon) {
-        WeiboParameters params = buildUpdateParams(content, lat, lon);
-        params.put("pic", bitmap);
-        return requestSync(sAPIList.get(WRITE_API_UPLOAD), params, HTTPMETHOD_POST);
-    }
-
-    /**
-     * @see #uploadUrlText(String, String, String, String, String, RequestListener)
-     */
-    public String uploadUrlTextSync(String status, String imageUrl, String pic_id, String lat, String lon) {
-        WeiboParameters params = buildUpdateParams(status, lat, lon);
-        params.put("url", imageUrl);
-        params.put("pic_id", pic_id);
-        return requestSync(sAPIList.get(WRITE_API_UPLOAD_URL_TEXT), params, HTTPMETHOD_POST);
-    }
-
-    // 组装TimeLines的参数
-    private WeiboParameters buildTimeLineParamsBase(long since_id, long max_id, int count, int page,
-            boolean base_app, boolean trim_user, int featureType) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("since_id", since_id);
-        params.put("max_id", max_id);
-        params.put("count", count);
-        params.put("page", page);
-        params.put("base_app", base_app ? 1 : 0);
-        params.put("trim_user", trim_user ? 1 : 0);
-        params.put("feature", featureType);
-        return params;
-    }
-
-    // 组装微博请求参数
-    private WeiboParameters buildUpdateParams(String content, String lat, String lon) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("status", content);
-        if (!TextUtils.isEmpty(lon)) {
-            params.put("long", lon);
-        }
-        if (!TextUtils.isEmpty(lat)) {
-            params.put("lat", lat);
-        }
-        return params;
-    }
-    
-    private WeiboParameters buildMentionsParams(long since_id, long max_id, int count, int page,
-            int authorType, int sourceType, int filterType, boolean trim_user) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("since_id", since_id);
-        params.put("max_id", max_id);
-        params.put("count", count);
-        params.put("page", page);
-        params.put("filter_by_author", authorType);
-        params.put("filter_by_source", sourceType);
-        params.put("filter_by_type", filterType);
-        params.put("trim_user", trim_user ? 1 : 0);
-        
-        return params;
-    } 
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/UsersAPI.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/UsersAPI.java
deleted file mode 100644
index 0df5868..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/UsersAPI.java
+++ /dev/null
@@ -1,149 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi;
-
-import android.content.Context;
-import android.util.SparseArray;
-import com.sina.weibo.sdk.auth.Oauth2AccessToken;
-import com.sina.weibo.sdk.net.RequestListener;
-import com.sina.weibo.sdk.net.WeiboParameters;
-
-/**
- * 该类封装了用户接口。
- * 详情请参考<a href="http://t.cn/8F1n1eF">用户接口</a>
- * 
- * @author SINA
- * @since 2014-03-03
- */
-public class UsersAPI extends AbsOpenAPI {
-
-    private static final int READ_USER           = 0;
-    private static final int READ_USER_BY_DOMAIN = 1;
-    private static final int READ_USER_COUNT     = 2;
-
-    private static final String API_BASE_URL = API_SERVER + "/users";
-
-    private static final SparseArray<String> sAPIList = new SparseArray<String>();
-    static {
-        sAPIList.put(READ_USER,           API_BASE_URL + "/show.json");
-        sAPIList.put(READ_USER_BY_DOMAIN, API_BASE_URL + "/domain_show.json");
-        sAPIList.put(READ_USER_COUNT,     API_BASE_URL + "/counts.json");
-    }
-
-    public UsersAPI(Context context, String appKey, Oauth2AccessToken accessToken) {
-        super(context, appKey, accessToken);
-    }
-
-    /**
-     * 根据用户ID获取用户信息。
-     * 
-     * @param uid      需要查询的用户ID
-     * @param listener 异步请求回调接口
-     */
-    public void show(long uid, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("uid", uid);
-        requestAsync(sAPIList.get(READ_USER), params, HTTPMETHOD_GET, listener);
-    }
-    
-    /**
-     * 根据用户昵称获取用户信息。
-     * 
-     * @param screen_name 需要查询的用户昵称
-     * @param listener    异步请求回调接口
-     */
-    public void show(String screen_name, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("screen_name", screen_name);
-        requestAsync(sAPIList.get(READ_USER), params, HTTPMETHOD_GET, listener);
-    }
-    
-    /**
-     * 通过个性化域名获取用户资料以及用户最新的一条微博。
-     * 
-     * @param domain   需要查询的个性化域名（请注意：是http://weibo.com/xxx后面的xxx部分）
-     * @param listener 异步请求回调接口
-     */
-    public void domainShow(String domain, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("domain", domain);
-        requestAsync(sAPIList.get(READ_USER_BY_DOMAIN), params, HTTPMETHOD_GET, listener);
-    }
-    
-    /**
-     * 批量获取用户的粉丝数、关注数、微博数。
-     * 
-     * @param uids     需要获取数据的用户UID，多个之间用逗号分隔，最多不超过100个
-     * @param listener 异步请求回调接口
-     */
-    public void counts(long[] uids, RequestListener listener) {
-        WeiboParameters params = buildCountsParams(uids);
-        requestAsync(sAPIList.get(READ_USER_COUNT), params, HTTPMETHOD_GET, listener);
-    }
-    
-    /**
-     * -----------------------------------------------------------------------
-     * 请注意：以下方法匀均同步方法。如果开发者有自己的异步请求机制，请使用该函数。
-     * -----------------------------------------------------------------------
-     */
-    
-    /**
-     * @see #show(long, RequestListener)
-     */
-    public String showSync(long uid) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("uid", uid);
-        return requestSync(sAPIList.get(READ_USER), params, HTTPMETHOD_GET);
-    }
-
-    /**
-     * @see #show(String, RequestListener)
-     */
-    public String showSync(String screen_name) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("screen_name", screen_name);
-        return requestSync(sAPIList.get(READ_USER), params, HTTPMETHOD_GET);
-    }
-
-    /**
-     * @see #domainShow(String, RequestListener)
-     */
-    public String domainShowSync(String domain) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("domain", domain);
-        return requestSync(sAPIList.get(READ_USER_BY_DOMAIN), params, HTTPMETHOD_GET);
-    }
-
-    /**
-     * @see #counts(long[], RequestListener)
-     */
-    public String countsSync(long[] uids) {
-        WeiboParameters params = buildCountsParams(uids);
-        return requestSync(sAPIList.get(READ_USER_COUNT), params, HTTPMETHOD_GET);
-    }
-
-    private WeiboParameters buildCountsParams(long[] uids) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        StringBuilder strb = new StringBuilder();
-        for (long cid : uids) {
-            strb.append(cid).append(",");
-        }
-        strb.deleteCharAt(strb.length() - 1);
-        params.put("uids", strb.toString());
-        return params;
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/AccountAPI.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/AccountAPI.java
deleted file mode 100644
index b64fa09..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/AccountAPI.java
+++ /dev/null
@@ -1,121 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.legacy;
-
-import android.content.Context;
-import android.text.TextUtils;
-import com.sina.weibo.sdk.auth.Oauth2AccessToken;
-import com.sina.weibo.sdk.net.RequestListener;
-import com.sina.weibo.sdk.net.WeiboParameters;
-import com.sina.weibo.sdk.openapi.AbsOpenAPI;
-
-/**
- * 此类封装了账号的接口，详情见<a href="http://t.cn/8F1Egjs">账号接口</a>
- * 
- * @author SINA
- * @date 2014-03-03
- */
-public class AccountAPI extends AbsOpenAPI {
-
-    /** 学校类型，1：大学、2：高中、3：中专技校、4：初中、5：小学，默认为1。 */
-    public static final int SCHOOL_TYPE_COLLEGE     = 1;
-    public static final int SCHOOL_TYPE_SENIOR      = 2;
-    public static final int SCHOOL_TYPE_TECHNICAL   = 3;
-    public static final int SCHOOL_TYPE_JUNIOR      = 4;
-    public static final int SCHOOL_TYPE_PRIMARY     = 5;
-
-    /** 学校首字母，默认为A。 */
-    public enum CAPITAL {
-        A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z
-    }
-
-    private static final String SERVER_URL_PRIX = API_SERVER + "/account";
-
-    public AccountAPI(Context context, String appKey, Oauth2AccessToken accessToken) {
-        super(context, appKey, accessToken);
-    }
-
-    /**
-     * 获取当前登录用户的隐私设置。
-     * 
-     * @param listener 异步请求回调接口
-     */
-    public void getPrivacy(RequestListener listener) {
-        requestAsync(SERVER_URL_PRIX + "/get_privacy.json", new WeiboParameters(mAppKey), HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取所有的学校列表。
-     * NOTE：参数keyword与capital二者必选其一，且只能选其一 按首字母capital查询时，必须提供province参数
-     * 
-     * @param province   省份范围，省份ID
-     * @param city       城市范围，城市ID
-     * @param area       区域范围，区ID
-     * @param schoolType 学校类型，可为以下几种： 1：大学，2：高中，3：中专技校，4：初中，5：小学
-     *                   <li> {@link #SCHOOL_TYPE_COLLEGE}
-     *                   <li> {@link #SCHOOL_TYPE_SENIOR}
-     *                   <li> {@link #SCHOOL_TYPE_TECHNICAL}
-     *                   <li> {@link #SCHOOL_TYPE_JUNIOR}
-     *                   <li> {@link #SCHOOL_TYPE_PRIMARY}
-     * @param capital    学校首字母，默认为A
-     * @param keyword    学校名称关键字
-     * @param count      返回的记录条数，默认为10
-     * @param listener   异步请求回调接口
-     */
-    public void schoolList(int province, int city, int area, int schoolType, CAPITAL capital, String keyword,
-            int count, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("province", province);
-        params.put("city", city);
-        params.put("area", area);
-        params.put("type", schoolType);
-        if (!TextUtils.isEmpty(capital.name())) {
-            params.put("capital", capital.name());
-        } else if (!TextUtils.isEmpty(keyword)) {
-            params.put("keyword", keyword);
-        }
-        params.put("count", count);
-        requestAsync(SERVER_URL_PRIX + "/profile/school_list.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取当前登录用户的API访问频率限制情况。
-     * 
-     * @param listener 异步请求回调接口
-     */
-    public void rateLimitStatus(RequestListener listener) {
-        requestAsync(SERVER_URL_PRIX + "/rate_limit_status.json", new WeiboParameters(mAppKey), HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * OAuth授权之后，获取授权用户的UID。
-     * 
-     * @param listener 异步请求回调接口
-     */
-    public void getUid(RequestListener listener) {
-        requestAsync(SERVER_URL_PRIX + "/get_uid.json", new WeiboParameters(mAppKey), HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 退出登录。
-     * 
-     * @param listener 异步请求回调接口
-     */
-    public void endSession(RequestListener listener) {
-        requestAsync(SERVER_URL_PRIX + "/end_session.json", new WeiboParameters(mAppKey), HTTPMETHOD_POST, listener);
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/ActivityInvokeAPI.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/ActivityInvokeAPI.java
deleted file mode 100644
index b3a0507..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/ActivityInvokeAPI.java
+++ /dev/null
@@ -1,261 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.legacy;
-
-import java.net.URLEncoder;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.net.Uri;
-/**
- * 此类封装了打开微博的各界面接口
- * 
- * @author SINA
- * @date 2014-03-03
- */
-public class ActivityInvokeAPI {
-    /**
-     * 调起新浪微博客户端的发送微博界面，完成发送微博工作。
-     * 
-     * @param activity
-     * @param content   微博内容
-     */
-    public static void openSendWeibo(Activity activity,String content){
-        if(activity==null||null==content){
-            return;
-        }
-        Intent intent=new Intent();
-        intent.setAction(Intent.ACTION_VIEW);
-        intent.addCategory("android.intent.category.DEFAULT");
-        intent.setData(Uri.parse("sinaweibo://sendweibo?content="+URLEncoder.encode(content)));
-        activity.startActivity(intent);
-    }
-/**
- * 调起新浪微博客户端的发送微博界面，完成发送微博工作。
- * 
- * @param activity 
- * @param content   微博内容
- * @param xid       签到时 的地点id
- * @param poiId     POI点ID
- * @param poiName   POI点名称
- * @param longitude 经度
- * @param latitude  纬度
- */
-    public static void openSendWeibo(Activity activity,String content,String xid,String poiId,String poiName,String longitude,String latitude){
-        if(activity==null){
-            return;
-        }
-        Intent intent=new Intent();
-        intent.setAction(Intent.ACTION_VIEW);
-        intent.addCategory("android.intent.category.DEFAULT");
-        intent.setData(Uri.parse("sinaweibo://sendweibo?content="+content+"&xid="+xid+"&poiid="+poiId+"&poiname="+poiName+"&longitude="+longitude+"&latitude="+latitude));
-        activity.startActivity(intent);
-    }
-    /**
-     * 调用当前用户的周边的人的界面。
-     * 
-     * @param activity
-     */
-    public static void openNearbyPeople(Activity activity){
-        if(activity==null){
-            return;
-        }
-        Intent intent=new Intent();
-        intent.setAction(Intent.ACTION_VIEW);
-        intent.addCategory("android.intent.category.DEFAULT");
-        intent.setData(Uri.parse("sinaweibo://nearbypeople"));
-        activity.startActivity(intent);
-    }
-    /**
-     * 调用当前用户的周边的微博的界面。
-     * 
-     * @param activity
-     */
-    public static void openNearbyWeibo(Activity activity){
-        if(activity==null){
-            return;
-        }
-        Intent intent=new Intent();
-        intent.setAction(Intent.ACTION_VIEW);
-        intent.addCategory("android.intent.category.DEFAULT");
-        intent.setData(Uri.parse("sinaweibo://nearbyweibo"));
-        activity.startActivity(intent);
-    }
-    /**
-     *通过昵称 打开个人资料页面。
-     *
-     * @param activity
-     * @param nickName  昵称
-     */
-    public static void openUserInfoByNickName(Activity activity,String nickName){
-        if(activity==null){
-            return;
-        }
-        Intent intent=new Intent();
-        intent.setAction(Intent.ACTION_VIEW);
-        intent.addCategory("android.intent.category.DEFAULT");
-//        intent.setData(Uri.parse("sinaweibo://userinfo?nick="+URLEncoder.encode(nickName)));
-        intent.setData(Uri.parse("sinaweibo://userinfo?nick="+nickName));
-        activity.startActivity(intent);
-    }
-    /**
-     * 通过uid打开个人资料界面。
-     * 
-     * @param activity
-     * @param uid   用户ID
-     */
-    public static void openUserInfoByUid(Activity activity,String uid){
-        if(activity==null){
-            return;
-        }
-        Intent intent=new Intent();
-        intent.setAction(Intent.ACTION_VIEW);
-        intent.addCategory("android.intent.category.DEFAULT");
-        intent.setData(Uri.parse("sinaweibo://userinfo?uid="+uid));
-        activity.startActivity(intent);
-    }
-    /**
-     * 打开微博客户端内置浏览器。
-     * 
-     * @param activity
-     * @param url       要打开的网页地址
-     */
-    public static void openWeiboBrowser(Activity activity,String url){
-        if(activity==null){
-            return;
-        }
-        Intent intent=new Intent();
-        intent.setAction(Intent.ACTION_VIEW);
-        intent.addCategory("android.intent.category.DEFAULT");
-        intent.setData(Uri.parse("sinaweibo://browser?url="+url));
-        activity.startActivity(intent);
-    }
-    
-    /**
-     * 打开微博客户端。
-     * 
-     * @param activity
-     */
-    public static void openWeibo(Activity activity){
-        if(activity==null){
-            return;
-        }
-        Intent intent=new Intent();
-        intent.setAction(Intent.ACTION_VIEW);
-        intent.addCategory("android.intent.category.DEFAULT");
-        intent.setData(Uri.parse("sinaweibo://splash"));
-
-        activity.startActivity(intent);
-    }
-    /**
-     * 打开摇一摇界面。
-     * 
-     * @param activity
-     */
-    public static void openShake(Activity activity){
-        if(activity==null){
-            return;
-        }
-        Intent intent=new Intent();
-        intent.setAction(Intent.ACTION_VIEW);
-        intent.addCategory("android.intent.category.DEFAULT");
-        intent.setData(Uri.parse("sinaweibo://shake"));
-
-        activity.startActivity(intent);
-    }
-    /**
-     * 打开通讯录界面。
-     * 
-     * @param activity
-     */
-    public static void openContact(Activity activity){
-        if(activity==null){
-            return;
-        }
-        Intent intent=new Intent();
-        intent.setAction(Intent.ACTION_VIEW);
-        intent.addCategory("android.intent.category.DEFAULT");
-        intent.setData(Uri.parse("sinaweibo://contact"));
-
-        activity.startActivity(intent);
-        
-    }
-    /**
-     * 打开用户话题列表界面。
-     * 
-     * @param activity
-     * @param uid 用户uid
-     */
-    public static void openUserTrends(Activity activity,String uid){
-        if(activity==null){
-            return;
-        }
-        Intent intent=new Intent();
-        intent.setAction(Intent.ACTION_VIEW);
-        intent.addCategory("android.intent.category.DEFAULT");
-        intent.setData(Uri.parse("sinaweibo://usertrends?uid="+uid));
-        activity.startActivity(intent);
-    }
-    /**
-     * 打开私信对话界面。
-     * 
-     * @param activity
-     * @param uid 用户uid
-     */
-    public static void openMessageListByUid(Activity activity,String uid){
-        if(activity==null){
-            return;
-        }
-        Intent intent=new Intent();
-        intent.setAction(Intent.ACTION_VIEW);
-        intent.addCategory("android.intent.category.DEFAULT");
-        intent.setData(Uri.parse("sinaweibo://messagelist?uid="+uid));
-        activity.startActivity(intent);
-    }
-    /**
-     * 打开私信对话界面。
-     * 
-     * @param activity
-     * @param uid 用户uid
-     */
-    public static void openMessageListByNickName(Activity activity,String nickName){
-        if(activity==null){
-            return;
-        }
-        Intent intent=new Intent();
-        intent.setAction(Intent.ACTION_VIEW);
-        intent.addCategory("android.intent.category.DEFAULT");
-        intent.setData(Uri.parse("sinaweibo://messagelist?nick="+(nickName)));
-        activity.startActivity(intent);
-    }
-    /**
-     * 打开某条微博正文。
-     * 
-     * @param activity
-     * @param blogId 某条微博id
-     */
-    public static void openDetail(Activity activity,String blogId){
-        if(activity==null){
-            return;
-        }
-        Intent intent=new Intent();
-        intent.setAction(Intent.ACTION_VIEW);
-        intent.addCategory("android.intent.category.DEFAULT");
-        intent.setData(Uri.parse("sinaweibo://detail?mblogid="+blogId));
-        activity.startActivity(intent);
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/CommonAPI.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/CommonAPI.java
deleted file mode 100644
index e395c53..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/CommonAPI.java
+++ /dev/null
@@ -1,105 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.legacy;
-
-import android.content.Context;
-import com.sina.weibo.sdk.auth.Oauth2AccessToken;
-import com.sina.weibo.sdk.net.RequestListener;
-import com.sina.weibo.sdk.net.WeiboParameters;
-import com.sina.weibo.sdk.openapi.AbsOpenAPI;
-import com.sina.weibo.sdk.openapi.CommentsAPI;
-
-/**
- * 此类封装了公共服务的接口。
- * 详情见<a href="http://t.cn/8Fdg7EX">公共服务接口</a>
- * 
- * @author SINA
- * @date 2014-03-03
- */
-public class CommonAPI extends AbsOpenAPI {
-
-    /** 国家的首字母，默认为空，代表全部。 */
-    public enum CAPITAL {
-        a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z
-    }
-
-    /** 语言版本，zh-cn：简体中文、zh-tw：繁体中文、english：英文，默认为zh-cn。 */
-    public static final String LANGUAGE_ZH_CN   = "zh-cn";
-    public static final String LANGUAGE_ZH_TW   = "zh-tw";
-    public static final String LANGUAGE_EN      = "english";
-
-    public CommonAPI(Context context, String appKey, Oauth2AccessToken accessToken) {
-        super(context, appKey, accessToken);
-    }
-
-    private static final String SERVER_URL_PRIX = API_SERVER + "/common";
-
-    /**
-     * 获取城市列表。
-     * 
-     * @param province  省份代码
-     * @param capital   国家的首字母，a-z，可为空代表返回全部，默认为全部。
-     *                  <li> {@link CommentsAPI#CAPITAL}
-     * @param language  返回的语言版本，zh-cn：简体中文、zh-tw：繁体中文、english：英文，默认为zh-cn
-     *                  <li> {@link #LANGUAGE_ZH_CN}
-     *                  <li> {@link #LANGUAGE_ZH_TW}
-     *                  <li> {@link #LANGUAGE_EN}
-     * @param listener  异步请求回调接口
-     */
-    public void getCity(String province, String capital, String language, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("province", province);
-        if (null != capital) {
-            params.put("capital", capital);
-        }
-        params.put("language", language);
-        requestAsync(SERVER_URL_PRIX + "/get_city.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取国家列表
-     * @param capital   国家的首字母，a-z，可为空代表返回全部，默认为全部。
-     * @param language  返回的语言版本，zh-cn：简体中文、zh-tw：繁体中文、english：英文，默认为zh-cn
-     *                  <li> {@link #LANGUAGE_ZH_CN}
-     *                  <li> {@link #LANGUAGE_ZH_TW}
-     *                  <li> {@link #LANGUAGE_EN}
-     *@param listener   异步请求回调接口
-     */
-    public void getCountry(CAPITAL capital, String language, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        if (null != capital) {
-            params.put("capital", capital.name().toLowerCase());
-        }
-        params.put("language", language);
-        requestAsync(SERVER_URL_PRIX + "/get_country.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取时区配置表。
-     * 
-     * @param language  返回的语言版本，zh-cn：简体中文、zh-tw：繁体中文、english：英文，默认为zh-cn
-     *                  <li> {@link #LANGUAGE_ZH_CN}
-     *                  <li> {@link #LANGUAGE_ZH_TW}
-     *                  <li> {@link #LANGUAGE_EN}
-     *@param listener   异步请求回调接口
-     */
-    public void getTimezone(String language, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("language", language);
-        requestAsync(SERVER_URL_PRIX + "/get_timezone.json", params, HTTPMETHOD_GET, listener);
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/FavoritesAPI.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/FavoritesAPI.java
deleted file mode 100644
index cf8ae35..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/FavoritesAPI.java
+++ /dev/null
@@ -1,207 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.legacy;
-
-import android.content.Context;
-import com.sina.weibo.sdk.auth.Oauth2AccessToken;
-import com.sina.weibo.sdk.net.RequestListener;
-import com.sina.weibo.sdk.net.WeiboParameters;
-import com.sina.weibo.sdk.openapi.AbsOpenAPI;
-
-/**
- * 此类封装了收藏的接口。
- * 详情见<a href="http://t.cn/8F3gFzG">公共接口</a>
- * 
- * @author SINA
- * @date 2014-03-03
- */
-public class FavoritesAPI extends AbsOpenAPI {
-    private static final String SERVER_URL_PRIX = API_SERVER + "/favorites";
-
-    public FavoritesAPI(Context context, String appKey, Oauth2AccessToken accessToken) {
-        super(context, appKey, accessToken);
-    }
-
-    /**
-     * 获取当前登录用户的收藏列表。
-     * 
-     * @param count     单页返回的记录条数，默认为50
-     * @param page      返回结果的页码，默认为1
-     * @param listener  异步请求回调接口
-     */
-    public void favorites(int count, int page, RequestListener listener) {
-        WeiboParameters params = buildCountPage(count, page);
-        requestAsync(SERVER_URL_PRIX + ".json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取当前用户的收藏列表的ID。
-     * 
-     * @param count     单页返回的记录条数，默认为50
-     * @param page      返回结果的页码，默认为1
-     * @param listener  异步请求回调接口
-     */
-    public void ids(int count, int page, RequestListener listener) {
-        WeiboParameters params = buildCountPage(count, page);
-        requestAsync(SERVER_URL_PRIX + "/ids.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 根据收藏ID获取指定的收藏信息。
-     * 
-     * @param id        需要查询的收藏ID
-     * @param listener  异步请求回调接口
-     */
-    public void show(long id, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("id", id);
-        requestAsync(SERVER_URL_PRIX + "/show.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 根据标签获取当前登录用户该标签下的收藏列表。
-     * 
-     * @param tid       需要查询的标签ID
-     * @param count     单页返回的记录条数，默认为50
-     * @param page      返回结果的页码，默认为1
-     * @param listener  异步请求回调接口
-     */
-    public void byTags(long tid, int count, int page, RequestListener listener) {
-        WeiboParameters params = buildCountPage(count, page);
-        params.put("tid", tid);
-        requestAsync(SERVER_URL_PRIX + "/by_tags.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取当前登录用户的收藏标签列表。
-     * 
-     * @param count     单页返回的记录条数，默认为50
-     * @param page      返回结果的页码，默认为1
-     * @param listener  异步请求回调接口
-     */
-    public void tags(int count, int page, RequestListener listener) {
-        WeiboParameters params = buildCountPage(count, page);
-        requestAsync(SERVER_URL_PRIX + "/tags.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取当前用户某个标签下的收藏列表的ID。
-     * 
-     * @param tid       需要查询的标签ID。
-     * @param count     单页返回的记录条数，默认为50
-     * @param page      返回结果的页码，默认为1
-     * @param listener  异步请求回调接口
-     */
-    public void byTagsIds(long tid, int count, int page, RequestListener listener) {
-        WeiboParameters params = buildCountPage(count, page);
-        params.put("tid", tid);
-        requestAsync(SERVER_URL_PRIX + "/by_tags/ids.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 添加一条微博到收藏里。
-     * 
-     * @param id        要收藏的微博ID
-     * @param listener  异步请求回调接口
-     */
-    public void create(long id, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("id", id);
-        requestAsync(SERVER_URL_PRIX + "/create.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 取消收藏一条微博。
-     * 
-     * @param id        要取消收藏的微博ID。
-     * @param listener  异步请求回调接口
-     */
-    public void destroy(long id, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("id", id);
-        requestAsync(SERVER_URL_PRIX + "/destroy.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 根据收藏ID批量取消收藏。
-     * 
-     * @param ids       要取消收藏的收藏ID，最多不超过10个
-     * @param listener  异步请求回调接口
-     */
-    public void destroyBatch(long[] ids, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        StringBuilder strb = new StringBuilder();
-        for (long id : ids) {
-            strb.append(id).append(",");
-        }
-        strb.deleteCharAt(strb.length() - 1);
-        params.put("ids", strb.toString());
-        requestAsync(SERVER_URL_PRIX + "/destroy_batch.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 更新一条收藏的收藏标签。
-     * 
-     * @param id        需要更新的收藏ID
-     * @param tags      需要更新的标签内容，最多不超过2条
-     * @param listener  异步请求回调接口
-     */
-    public void tagsUpdate(long id, String[] tags, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("id", id);
-        StringBuilder strb = new StringBuilder();
-        for (String tag : tags) {
-            strb.append(tag).append(",");
-        }
-        strb.deleteCharAt(strb.length() - 1);
-        params.put("tags", strb.toString());
-        requestAsync(SERVER_URL_PRIX + "/tags/update.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 更新当前登录用户所有收藏下的指定标签。
-     * 
-     * @param id        需要更新的标签ID
-     * @param tag       需要更新的标签内容
-     * @param listener  异步请求回调接口
-     */
-    public void tagsUpdateBatch(long id, String tag, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("tid", id);
-        params.put("tag", tag);
-        requestAsync(SERVER_URL_PRIX + "/tags/update_batch.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 删除当前登录用户所有收藏下的指定标签。
-     * 
-     * @param tid       需要删除的标签ID
-     * @param listener  异步请求回调接口
-     */
-    public void tagsDestroyBatch(long tid, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("tid", tid);
-        requestAsync(SERVER_URL_PRIX + "/tags/destroy_batch.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    private WeiboParameters buildCountPage(int count, int page) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("count", count);
-        params.put("page", page);
-        return params;
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/FriendshipsAPI.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/FriendshipsAPI.java
deleted file mode 100644
index a42158e..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/FriendshipsAPI.java
+++ /dev/null
@@ -1,359 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.legacy;
-
-import android.content.Context;
-import com.sina.weibo.sdk.auth.Oauth2AccessToken;
-import com.sina.weibo.sdk.net.RequestListener;
-import com.sina.weibo.sdk.net.WeiboParameters;
-import com.sina.weibo.sdk.openapi.AbsOpenAPI;
-
-/**
- * 此类封装了关系的接口。
- * 详情见<a href=http://t.cn/8FUByoM">关系接口</a>
- * 
- * @author SINA
- * @date 2014-03-03
- */
-public class FriendshipsAPI extends AbsOpenAPI {
-
-    public FriendshipsAPI(Context context, String appKey, Oauth2AccessToken accessToken) {
-        super(context, appKey, accessToken);
-    }
-
-    private static final String SERVER_URL_PRIX = API_SERVER + "/friendships";
-
-    /**
-     * 获取用户的关注列表。
-     * 
-     * @param uid           需要查询的用户UID
-     * @param count         单页返回的记录条数，默认为50，最大不超过200
-     * @param cursor        返回结果的游标，下一页用返回值里的next_cursor，上一页用previous_cursor，默认为0
-     * @param trim_status   返回值中user字段中的status字段开关，false：返回完整status字段、true：status字段仅返回status_id，默认为true
-     * @param listener      异步请求回调接口
-     */
-    public void friends(long uid, int count, int cursor, boolean trim_status, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey); params = buildFriendsParam(count, cursor, trim_status);
-        params.put("uid", uid);
-        requestAsync(SERVER_URL_PRIX + "/friends.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取用户的关注列表。
-     * 
-     * @param screen_name   需要查询的用户昵称
-     * @param count         单页返回的记录条数，默认为50，最大不超过200
-     * @param cursor        返回结果的游标，下一页用返回值里的next_cursor，上一页用previous_cursor，默认为0
-     * @param trim_status   返回值中user字段中的status字段开关，false：返回完整status字段、true：status字段仅返回status_id，默认为true
-     * @param listener      异步请求回调接口
-     */
-    public void friends(String screen_name, int count, int cursor, boolean trim_status, RequestListener listener) {
-        WeiboParameters params = buildFriendsParam(count, cursor, trim_status);
-        params.put("screen_name", screen_name);
-        requestAsync(SERVER_URL_PRIX + "/friends.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取两个用户之间的共同关注人列表。
-     * 
-     * @param uid       需要获取共同关注关系的用户UID
-     * @param suid      需要获取共同关注关系的用户UID，默认为当前登录用户
-     * @param count     单页返回的记录条数，默认为50
-     * @param page      返回结果的页码，默认为1
-     * @param trim_status 返回值中user字段中的status字段开关，false：返回完整status字段、true：status字段仅返回status_id，默认为true
-     * @param listener  异步请求回调接口
-     */
-    public void inCommon(long uid, long suid, int count, int page, boolean trim_status, RequestListener listener) {
-        WeiboParameters params = buildFriendIDParam(uid, count);
-        params.put("suid", suid);
-        params.put("page", page);
-        params.put("trim_status", trim_status ? 1: 0);
-        requestAsync(SERVER_URL_PRIX + "/friends/in_common.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取用户的双向关注列表，即互粉列表。
-     * 
-     * @param uid       需要获取双向关注列表的用户UID
-     * @param count     单页返回的记录条数，默认为50
-     * @param page      返回结果的页码，默认为1
-     * @param listener  异步请求回调接口
-     */
-    public void bilateral(long uid, int count, int page, RequestListener listener) {
-        WeiboParameters params = buildFriendIDParam(uid, count);
-        params.put("page", page);
-        requestAsync(SERVER_URL_PRIX + "/friends/bilateral.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取用户双向关注的用户ID列表，即互粉UID列表。
-     * 
-     * @param uid       需要获取双向关注列表的用户UID
-     * @param count     单页返回的记录条数，默认为50，最大不超过2000
-     * @param page      返回结果的页码，默认为1
-     * @param listener  异步请求回调接口
-     */
-    public void bilateralIds(long uid, int count, int page, RequestListener listener) {
-        WeiboParameters params = buildFriendIDParam(uid, count);
-        params.put("page", page);
-        requestAsync(SERVER_URL_PRIX + "/friends/bilateral/ids.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取用户关注的用户UID列表。
-     * 
-     * @param uid       需要查询的用户UID
-     * @param count     单页返回的记录条数，默认为500，最大不超过5000
-     * @param cursor    返回结果的游标，下一页用返回值里的next_cursor，上一页用previous_cursor，默认为0
-     * @param listener  异步请求回调接口
-     */
-    public void friendsIds(long uid, int count, int cursor, RequestListener listener) {
-        WeiboParameters params = buildFriendIDParam(uid, count);
-        params.put("cursor", cursor);
-        requestAsync(SERVER_URL_PRIX + "/friends/ids.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取用户关注的用户UID列表。
-     * 
-     * @param screen_name   需要查询的用户昵称
-     * @param count         单页返回的记录条数，默认为500，最大不超过5000
-     * @param cursor        返回结果的游标，下一页用返回值里的next_cursor，上一页用previous_cursor，默认为0
-     * @param listener      异步请求回调接口
-     */
-    public void friendsIds(String screen_name, int count, int cursor, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("screen_name", screen_name);
-        params.put("count", count);
-        params.put("cursor", cursor);
-        requestAsync(SERVER_URL_PRIX + "/friends/ids.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取用户的粉丝列表(最多返回5000条数据)。
-     * 
-     * @param uid       需要查询的用户UID
-     * @param count     单页返回的记录条数，默认为50，最大不超过200
-     * @param cursor    返回结果的游标，下一页用返回值里的next_cursor，上一页用previous_cursor，默认为0
-     * @param trim_status 返回值中user字段中的status字段开关，false：返回完整status字段、true：status字段仅返回status_id，默认为false
-     * @param listener  异步请求回调接口
-     */
-    public void followers(long uid, int count, int cursor, boolean trim_status, RequestListener listener) {
-        WeiboParameters params = buildFriendIDParam(uid, count);
-        params.put("cursor", cursor);
-        params.put("trim_status", trim_status ? 1: 0);
-        requestAsync(SERVER_URL_PRIX + "/followers.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取用户的粉丝列表(最多返回5000条数据)。
-     * 
-     * @param screen_name   需要查询的用户昵称
-     * @param count         单页返回的记录条数，默认为50，最大不超过200
-     * @param cursor        返回结果的游标，下一页用返回值里的next_cursor，上一页用previous_cursor，默认为0
-     * @param trim_status   返回值中user字段中的status字段开关，false：返回完整status字段、true：status字段仅返回status_id，默认为false
-     * @param listener      异步请求回调接口
-     */
-    public void followers(String screen_name, int count, int cursor, boolean trim_status, RequestListener listener) {
-        WeiboParameters params = buildFriendsParam(count, cursor, trim_status);
-        params.put("screen_name", screen_name);
-        requestAsync(SERVER_URL_PRIX + "/followers.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取用户粉丝的用户UID列表。
-     * 
-     * @param uid       需要查询的用户UID
-     * @param count     单页返回的记录条数，默认为500，最大不超过5000
-     * @param cursor    返回结果的游标，下一页用返回值里的next_cursor，上一页用previous_cursor，默认为0
-     * @param listener  异步请求回调接口
-     */
-    public void followersIds(long uid, int count, int cursor, RequestListener listener) {
-        WeiboParameters params = buildFriendIDParam(uid, count);
-        params.put("cursor", cursor);
-        requestAsync(SERVER_URL_PRIX + "/followers/ids.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取用户粉丝的用户UID列表。
-     * 
-     * @param screen_name   需要查询的用户昵称
-     * @param count         单页返回的记录条数，默认为500，最大不超过5000
-     * @param cursor        返回结果的游标，下一页用返回值里的next_cursor，上一页用previous_cursor，默认为0
-     * @param listener      异步请求回调接口
-     */
-    public void followersIds(String screen_name, int count, int cursor, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("screen_name", screen_name);
-        params.put("count", count);
-        params.put("cursor", cursor);
-        requestAsync(SERVER_URL_PRIX + "/followers/ids.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取用户的活跃粉丝列表。
-     * 
-     * @param uid       需要查询的用户UID
-     * @param count     返回的记录条数，默认为20，最大不超过200
-     * @param listener  异步请求回调接口
-     */
-    public void followersActive(long uid, int count, RequestListener listener) {
-        WeiboParameters params = buildFriendIDParam(uid, count);
-        requestAsync(SERVER_URL_PRIX + "/followers/active.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取当前登录用户的关注人中又关注了指定用户的用户列表。
-     * 
-     * @param uid       指定的关注目标用户UID
-     * @param count     单页返回的记录条数，默认为50
-     * @param page      返回结果的页码，默认为1
-     * @param listener  异步请求回调接口
-     */
-    public void chainFollowers(long uid, int count, int page, RequestListener listener) {
-        WeiboParameters params = buildFriendIDParam(uid, count);
-        params.put("page", page);
-        requestAsync(SERVER_URL_PRIX + "/friends_chain/followers.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取两个用户之间的详细关注关系情况。
-     * 
-     * @param source_id     源用户的UID
-     * @param target_id     目标用户的UID
-     * @param listener      异步请求回调接口 
-     */
-    public void show(long source_id, long target_id, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("source_id", source_id);
-        params.put("target_id", target_id);
-        requestAsync(SERVER_URL_PRIX + "/show.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取两个用户之间的详细关注关系情况。
-     * 
-     * @param source_id             源用户的UID
-     * @param target_screen_name    目标用户的微博昵称
-     * @param listener              异步请求回调接口
-     */
-    public void show(long source_id, String target_screen_name, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("source_id", source_id);
-        params.put("target_screen_name", target_screen_name);
-        requestAsync(SERVER_URL_PRIX + "/show.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取两个用户之间的详细关注关系情况。
-     * 
-     * @param source_screen_name    源用户的微博昵称
-     * @param target_id             目标用户的UID
-     * @param listener              异步请求回调接口
-     */
-    public void show(String source_screen_name, long target_id, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("source_screen_name", source_screen_name);
-        params.put("target_id", target_id);
-        requestAsync(SERVER_URL_PRIX + "/show.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取两个用户之间的详细关注关系情况。
-     * 
-     * @param source_screen_name 源用户的微博昵称
-     * @param target_screen_name 目标用户的微博昵称
-     * @param listener           异步请求回调接口
-     */
-    public void show(String source_screen_name, String target_screen_name, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("target_screen_name", target_screen_name);
-        params.put("source_screen_name", source_screen_name);
-        requestAsync(SERVER_URL_PRIX + "/show.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 关注一个用户。
-     * 
-     * @param uid           需要关注的用户ID
-     * @param screen_name   需要关注的用户昵称
-     * @param listener      异步请求回调接口
-     */
-    public void create(long uid, String screen_name, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("uid", uid);
-        params.put("screen_name", screen_name);
-        requestAsync(SERVER_URL_PRIX + "/create.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 关注一个用户
-     * 
-     * @param screen_name   需要关注的用户昵称
-     * @param listener      异步请求回调接口
-     */
-    @Deprecated
-    public void create(String screen_name, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("screen_name", screen_name);
-        requestAsync(SERVER_URL_PRIX + "/create.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 取消关注一个用户。
-     * 
-     * @param uid           需要取消关注的用户ID
-     * @param screen_name   需要取消关注的用户昵称
-     * @param listener      异步请求回调接口
-     */
-    public void destroy(long uid, String screen_name, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("uid", uid);
-        params.put("screen_name", screen_name);
-        requestAsync(SERVER_URL_PRIX + "/destroy.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 取消关注一个用户。
-     * 
-     * @param screen_name 需要取消关注的用户昵称
-     * @param listener    异步请求回调接口
-     */
-    @Deprecated
-    public void destroy(String screen_name, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("screen_name", screen_name);
-        requestAsync(SERVER_URL_PRIX + "/destroy.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /** 组装FriendsParam的参数 */
-    private WeiboParameters buildFriendsParam(int count, int cursor, boolean trim_status) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("count", count);
-        params.put("cursor", cursor);
-        params.put("trim_status", trim_status ? 1: 0);
-        return params;
-    }
-
-    /** 组装FriendsID的参数 */
-    private WeiboParameters buildFriendIDParam(long uid, int count) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("uid", uid);
-        params.put("count", count);
-        return params;
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/GroupAPI.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/GroupAPI.java
deleted file mode 100644
index 6ebfc6c..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/GroupAPI.java
+++ /dev/null
@@ -1,285 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.legacy;
-
-import android.content.Context;
-import android.text.TextUtils;
-import com.sina.weibo.sdk.auth.Oauth2AccessToken;
-import com.sina.weibo.sdk.net.RequestListener;
-import com.sina.weibo.sdk.net.WeiboParameters;
-import com.sina.weibo.sdk.openapi.AbsOpenAPI;
-
-/**
- * 此类封装了分组的接口。
- * 详情见<a href="http://t.cn/8F3geol">评论接口</a>
- * 
- * @author SINA
- * @date 2014-03-03
- */
-public class GroupAPI extends AbsOpenAPI {
-
-    /** 过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐 */
-    public static final int FEATURE_ALL       = 0;
-    public static final int FEATURE_ORIGINAL  = 1;
-    public static final int FEATURE_PICTURE   = 2;
-    public static final int FEATURE_VIDEO     = 3;
-    public static final int FEATURE_MUSICE    = 4;
-
-    public GroupAPI(Context context, String appKey, Oauth2AccessToken accessToken) {
-        super(context, appKey, accessToken);
-    }
-
-    private static final String SERVER_URL_PRIX = API_SERVER + "/friendships/groups";
-
-    /**
-     * 获取当前登陆用户好友分组列表。
-     * 
-     * @param listener  异步请求回调接口
-     */
-    public void groups(RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        requestAsync(SERVER_URL_PRIX + ".json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取当前登录用户某一好友分组的微博列表。
-     * 
-     * @param list_id       需要查询的好友分组ID，建议使用返回值里的idstr，当查询的为私有分组时，则当前登录用户必须为其所有者
-     * @param since_id      若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0
-     * @param max_id        若指定此参数，则返回ID小于或等于max_id的微博，默认为0
-     * @param count         单页返回的记录条数，默认为50
-     * @param page          返回结果的页码，默认为1
-     * @param base_app      是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param featureType   过滤类型ID，0：全部，1：原创， 2：图片，3：视频，4：音乐
-     *                      {@link #FEATURE_ALL}
-     *                      {@link #FEATURE_ORIGINAL}
-     *                      {@link #FEATURE_PICTURE}
-     *                      {@link #FEATURE_VIDEO}
-     *                      {@link #FEATURE_MUSICE}
-     * @param listener      异步请求回调接口
-     */
-    public void timeline(long list_id, long since_id, long max_id, int count, int page, boolean base_app,
-            int featureType, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("list_id", list_id);
-        params.put("since_id", since_id);
-        params.put("max_id", max_id);
-        params.put("count", count);
-        params.put("page", page);
-        params.put("base_app", base_app ? 1 : 0);
-        params.put("feature", featureType);
-        requestAsync(SERVER_URL_PRIX + "/timeline.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    // TODO 获取当前登陆用户某一好友分组的微博ID列表
-    public void timelineIds() {
-    }
-
-    /**
-     * 获取某一好友分组下的成员列表。
-     * 
-     * @param list_id   获取某一好友分组下的成员列表
-     * @param count     单页返回的记录条数，默认为50，最大不超过200
-     * @param cursor    分页返回结果的游标，下一页用返回值里的next_cursor，上一页用previous_cursor，默认为0
-     * @param listener  异步请求回调接口
-     */
-    public void members(long list_id, int count, int cursor, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("list_id", list_id);
-        params.put("count", count);
-        params.put("cursor", cursor);
-        requestAsync(SERVER_URL_PRIX + "/members.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    // TODO 获取某一好友分组下的成员列表的ID
-    public void membersIds() {
-    }
-
-    // TODO 批量取好友分组成员的分组说明
-    public void memberDescriptionPatch() {
-    }
-
-    /**
-     * 判断某个用户是否是当前登录用户指定好友分组内的成员。
-     * 
-     * @param uid       需要判断的用户的UID
-     * @param list_id   指定的当前用户的好友分组ID，建议使用返回值里的idstr
-     * @param listener  异步请求回调接口
-     */
-    public void isMember(long uid, long list_id, RequestListener listener) {
-        WeiboParameters params = buildeMembersParams(list_id, uid);
-        requestAsync(SERVER_URL_PRIX + "/is_member.json", params, HTTPMETHOD_GET, listener);
-    }
-    // TODO 批量获取某些用户在指定用户的好友分组中的收录信息
-    public void listed() {
-    };
-
-    /**
-     * 获取当前登陆用户某个分组的详细信息。
-     * 
-     * @param list_id   需要查询的好友分组ID，建议使用返回值里的idstr
-     * @param listener  异步请求回调接口
-     */
-    public void showGroup(long list_id, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("list_id", list_id);
-        requestAsync(SERVER_URL_PRIX + "/show.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 批量获取好友分组的详细信息。
-     * 
-     * @param list_ids  需要查询的好友分组ID，建议使用返回值里的idstr，多个之间用逗号分隔，每次不超过20个
-     * @param uids      参数list_ids所指的好友分组的所有者UID，多个之间用逗号分隔，每次不超过20个，需与list_ids一一对应
-     * @param listener  异步请求回调接口
-     */
-    public void showGroupBatch(String list_ids, long uids, RequestListener listener) {
-        WeiboParameters params = buildeMembersParams(Long.valueOf(list_ids), uids);
-        requestAsync(SERVER_URL_PRIX + "/show_batch.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 创建好友分组。
-     * 
-     * @param name          要创建的好友分组的名称，不超过10个汉字，20个半角字符
-     * @param description   要创建的好友分组的描述，不超过70个汉字，140个半角字符
-     * @param tags          要创建的好友分组的标签，多个之间用逗号分隔，最多不超过10个，每个不超过7个汉字，14个半角字符
-     * @param listener      异步请求回调接口
-     */
-    public void create(String name, String description, String tags, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("name", name);
-        if (TextUtils.isEmpty(description) == false) {
-            params.put("description", description);
-        }
-        if (TextUtils.isEmpty(tags) == false) {
-            params.put("tags", tags);
-        }
-        requestAsync(SERVER_URL_PRIX + "/create.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 更新好友分组。
-     * 
-     * @param list_id       需要更新的好友分组ID，建议使用返回值里的idstr，只能更新当前登录用户自己创建的分组
-     * @param name          要创建的好友分组的名称，不超过10个汉字，20个半角字符
-     * @param description   要创建的好友分组的描述，不超过70个汉字，140个半角字符
-     * @param tags          要创建的好友分组的标签，多个之间用逗号分隔，最多不超过10个，每个不超过7个汉字，14个半角字符
-     * @param listener      异步请求回调接口
-     */
-    public void update(long list_id, String name, String description, String tags, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("list_id", list_id);
-        if (TextUtils.isEmpty(name) == false) {
-            params.put("name", name);
-        }
-        if (TextUtils.isEmpty(description) == false) {
-            params.put("description", description);
-        }
-        if (TextUtils.isEmpty(tags) == false) {
-            params.put("tags", tags);
-        }
-        requestAsync(SERVER_URL_PRIX + "/update.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 删除好友分组。
-     * 
-     * @param list_id   要删除的好友分组ID，建议使用返回值里的idstr
-     * @param listener  异步请求回调接口
-     */
-    public void deleteGroup(long list_id, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("list_id", list_id);
-        requestAsync(SERVER_URL_PRIX + "/destroy.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 添加关注用户到好友分组。
-     * 
-     * @param list_id   好友分组ID，建议使用返回值里的idstr
-     * @param uid       好友分组ID，建议使用返回值里的idstr
-     * @param listener  异步请求回调接口
-     */
-    public void addMember(long list_id, long uid, RequestListener listener) {
-        WeiboParameters params = buildeMembersParams(list_id, uid);
-        requestAsync(SERVER_URL_PRIX + "/members/add.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 批量添加用户到好友分组。
-     * 
-     * @param list_id       好友分组ID，建议使用返回值里的idstr
-     * @param uids          需要添加的用户的UID，多个之间用逗号分隔，最多不超过30个
-     * @param group_descriptions 添加成员的分组说明，每个说明最多8个汉字，16个半角字符，多个需先URLencode，然后再用半角逗号分隔，最多不超过30个，且需与uids参数一一对应
-     * @param listener      异步请求回调接口
-     */
-    public void addMemberBatch(long list_id, String uids, String group_descriptions, RequestListener listener) {
-        WeiboParameters params = buildeMembersParams(list_id, Long.valueOf(uids));
-        params.put("group_descriptions", group_descriptions);
-        requestAsync(SERVER_URL_PRIX + "/members/add_batch.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 更新好友分组中成员的分组说明。
-     * 
-     * @param list_id       好友分组ID，建议使用返回值里的idstr
-     * @param uid           需要更新分组成员说明的用户的UID
-     * @param group_description 需要更新的分组成员说明，每个说明最多8个汉字，16个半角字符，需要URLencode
-     * @param listener      异步请求回调接口
-     */
-    public void updateMembers(long list_id, long uid, String group_description, RequestListener listener) {
-        WeiboParameters params = buildeMembersParams(list_id, uid);
-        if (TextUtils.isDigitsOnly(group_description) == false) {
-            params.put("group_description", group_description);
-        }
-        requestAsync(SERVER_URL_PRIX + "/members/update.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 删除好友分组内的关注用户。
-     * 
-     * @param list_id   好友分组ID，建议使用返回值里的idstr
-     * @param uid       需要删除的用户的UID
-     * @param listener  异步请求回调接口
-     */
-    public void deleteMembers(long list_id, long uid, RequestListener listener) {
-        WeiboParameters params = buildeMembersParams(list_id, uid);
-        requestAsync(SERVER_URL_PRIX + "/members/destroy.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 调整当前登录用户的好友分组顺序。
-     * 
-     * @param list_ids  调整好顺序后的分组ID列表，以逗号分隔，例：57,38，表示57排第一、38排第二，以此类推
-     * @param count     好友分组数量，必须与用户所有的分组数一致、与分组ID的list_id个数一致
-     * @param listener  异步请求回调接口
-     */
-    public void order(String list_ids, int count, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("list_id", list_ids);
-        params.put("count", count);
-        requestAsync(SERVER_URL_PRIX + "/order.json", params, HTTPMETHOD_POST, listener);
-    }
-    
-    private WeiboParameters buildeMembersParams(long list_id, long uid){
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("list_id", list_id);
-        params.put("uid", uid);
-        return params;
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/LocationAPI.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/LocationAPI.java
deleted file mode 100644
index 5cf9538..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/LocationAPI.java
+++ /dev/null
@@ -1,145 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.legacy;
-
-import android.content.Context;
-import android.util.SparseArray;
-import com.sina.weibo.sdk.auth.Oauth2AccessToken;
-import com.sina.weibo.sdk.net.RequestListener;
-import com.sina.weibo.sdk.net.WeiboParameters;
-import com.sina.weibo.sdk.openapi.AbsOpenAPI;
-
-/**
- * 地理信息相关接口。
- * 详情请参考<a href="http://t.cn/8FdRdk0">评论接口</a>
- * 
- * @author SINA
- * @since 2013-12-4
- */
-public class LocationAPI extends AbsOpenAPI {
-    /** API URL */
-    private static final String API_BASE_URL = API_SERVER + "/location";
-    
-    /**
-     * API 类型。
-     * 命名规则：
-     *      <li>读取接口：READ_API_XXX
-     *      <li>写入接口：WRITE_API_XXX
-     */
-    private static final int READ_API_GPS_TO_OFFSET      = 0;
-    private static final int READ_API_SEARCH_POIS_BY_GEO = 1;
-    private static final int READ_API_GET_TO_ADDRESS     = 2;
-
-    private static final SparseArray<String> sAPIList = new SparseArray<String>();
-    static {
-        sAPIList.put(READ_API_GPS_TO_OFFSET,      API_BASE_URL + "/geo/gps_to_offset.json");
-        sAPIList.put(READ_API_SEARCH_POIS_BY_GEO, API_BASE_URL + "/pois/search/by_geo.json");
-        sAPIList.put(READ_API_GET_TO_ADDRESS,     API_BASE_URL + "/geo/geo_to_address.json");
-    }
-
-    /**
-     * 构造函数，使用各个 API 接口提供的服务前必须先获取 Token。
-     * 
-     * @param accesssToken 访问令牌
-     */
-    public LocationAPI(Context context, String appKey, Oauth2AccessToken accessToken) {
-        super(context, appKey, accessToken);
-    }
-
-    /**
-     * 根据GPS坐标获取偏移后的坐标
-     * 
-     * @param longtitude 纬度，有效范围：-90.0到+90.0，+表示北纬，默认为0.0。
-     * @param latitude   纬度，有效范围：-90.0到+90.0，+表示北纬，默认为0.0。
-     * @param listener   异步请求回调接口
-     */
-    public void gps2Offset(Double longtitude, Double latitude, RequestListener listener) {
-        WeiboParameters params = buildGPS2OffsetParams(longtitude, latitude);
-        requestAsync(sAPIList.get(READ_API_GPS_TO_OFFSET), params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 根据关键词按坐标点范围获取POI点的信息。
-     * 
-     * @param latitude   纬度，有效范围：-90.0到+90.0，+表示北纬，默认为0.0。
-     * @param longtitude 经度，有效范围：-180.0到+180.0，+表示东经，默认为0.0。
-     * @param keyWord    查询的关键词，必须进行URLencode。
-     * @param listener   异步请求回调接口
-     */
-    public void searchPoisByGeo(Double longtitude, Double latitude, String keyWord, RequestListener listener) {
-        WeiboParameters params = buildSerarPoiByGeoParmas(longtitude, latitude, keyWord);
-        requestAsync(sAPIList.get(READ_API_SEARCH_POIS_BY_GEO), params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 根据地理信息坐标返回实际地址。
-     * 
-     * @param longtitude 经度，有效范围：-180.0到+180.0，+表示东经，默认为0.0。
-     * @param latitude   纬度，有效范围：-90.0到+90.0，+表示北纬，默认为0.0。
-     * @param listener   异步请求回调接口
-     */
-    public void geo2Address(Double longtitude, Double latitude, RequestListener listener) {
-        WeiboParameters params = buildGeo2AddressParam(longtitude, latitude);
-        requestAsync(sAPIList.get(READ_API_GET_TO_ADDRESS), params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * @see #gps2Offset(Double, Double, RequestListener)
-     */
-    public String gps2OffsetSync(Double longtitude, Double latitude) {
-        WeiboParameters params = buildGPS2OffsetParams(longtitude, latitude);
-        return requestSync(sAPIList.get(READ_API_GPS_TO_OFFSET), params, HTTPMETHOD_GET);
-    }
-
-    /**
-     * @see #searchPoisByGeo(Double, Double, String, RequestListener)
-     */
-    public String searchPoisByGeoSync(Double longtitude, Double latitude, String keyWord) {
-        WeiboParameters params = buildSerarPoiByGeoParmas(longtitude, latitude, keyWord);
-        return requestSync(sAPIList.get(READ_API_SEARCH_POIS_BY_GEO), params, HTTPMETHOD_GET);
-    }
-
-    /**
-     * @see #geo2Address(Double, Double, RequestListener)
-     */
-    public String geo2AddressSync(Double longtitude, Double latitude) {
-        WeiboParameters params = buildGeo2AddressParam(longtitude, latitude);
-        return requestSync(sAPIList.get(READ_API_GET_TO_ADDRESS), params, HTTPMETHOD_GET);
-    }
-
-    private WeiboParameters buildGPS2OffsetParams(Double longtitude, Double latitude) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        String coordinate = longtitude + "," + latitude;
-        params.put("coordinate", coordinate);
-        return params;
-    }
-
-    private WeiboParameters buildSerarPoiByGeoParmas(Double longtitude, Double latitude, String keyWord) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        String coordinate = longtitude + "," + latitude;
-        params.put("coordinate", coordinate);
-        params.put("q", keyWord);
-        return params;
-    }
-
-    private WeiboParameters buildGeo2AddressParam(Double longtitude, Double latitude) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        String coordinate = longtitude + "," + latitude;
-        params.put("coordinate", coordinate);
-        return params;
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/PlaceAPI.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/PlaceAPI.java
deleted file mode 100644
index 4a0793d..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/PlaceAPI.java
+++ /dev/null
@@ -1,625 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.legacy;
-
-import android.content.Context;
-import com.sina.weibo.sdk.auth.Oauth2AccessToken;
-import com.sina.weibo.sdk.net.RequestListener;
-import com.sina.weibo.sdk.net.WeiboParameters;
-import com.sina.weibo.sdk.openapi.AbsOpenAPI;
-
-/**
- * 该类封装了微博的位置服务接口。
- * 详情请参考<a href="http://t.cn/8F1s1DJ">微博位置服务</a>
- * 
- * @author SINA
- * @date 2014-03-03
- */
-public class PlaceAPI extends AbsOpenAPI {
-
-    /** 获取到周边的排序方式， 0：按时间排序 , 1：按与中心点距离排序。 */
-    public static final int SORT_BY_TIME     = 0;
-    public static final int SORT_BY_DISTENCE = 1;
-
-    /** 获取位置的排序方式， 0：按权重，1：按距离，3：按签到人数。 */
-    public static final int NEARBY_POIS_SORT_BY_WEIGHT          = 0;
-    public static final int NEARBY_POIS_SORT_BY_DISTENCE        = 1;
-    public static final int NEARBY_POIS_SORT_BY_CHECKIN_NUMBER  = 2;
-
-    /** 地点的排序方式，0：按时间、1：按热门，默认为0，目前只支持按时间。 */
-    public static final int POIS_SORT_BY_TIME   = 0;
-    public static final int POIS_SORT_BY_HOT    = 1;
-
-    /** 用户关系过滤，0：全部、1：只返回陌生人、2：只返回关注人，默认为0。 */
-    public static final int RELATIONSHIP_FILTER_ALL         = 0;
-    public static final int RELATIONSHIP_FILTER_STRANGER    = 1;
-    public static final int RELATIONSHIP_FILTER_FOLLOW      = 2;
-
-    /** 性别过滤，0：全部、1：男、2：女，默认为0。 */
-    public static final int GENDER_ALL   = 0;
-    public static final int GENDER_MAN   = 1;
-    public static final int GENDER_WOMAM = 2;
-
-    /** 用户级别过滤，0：全部、1：普通用户、2：VIP用户、7：达人，默认为0。 */
-    public static final int USER_LEVEL_ALL    = 0;
-    public static final int USER_LEVEL_NORMAL = 1;
-    public static final int USER_LEVEL_VIP    = 2;
-    public static final int USER_LEVEL_STAR   = 7;
-
-    /** 周边用户排序方式，0：按时间、1：按距离、2：按社会化关系，默认为2。 */
-    public static final int NEARBY_USER_SORT_BY_TIME        = 0;
-    public static final int NEARBY_USER_SORT_BY_DISTANCE    = 1;
-    public static final int NEARBY_USER_SORT_BY_SOCIAL_SHIP = 2;
-
-    private static final String SERVER_URL_PRIX = API_SERVER + "/place";
-
-    public PlaceAPI(Context context, String appKey, Oauth2AccessToken accessToken) {
-        super(context, appKey, accessToken);
-    }
-
-    /**
-     * 获取最新20条公共的位置动态。
-     * 
-     * @param count     每次返回的动态数，最大为50，默认为20
-     * @param base_app  是否只获取当前应用的数据。0为否（所有数据），1为是（仅当前应用），默认为0
-     */
-    public void pulicTimeline(long count, boolean base_app, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("count", count);
-        params.put("base_app", base_app ? 1 : 0);
-        requestAsync(SERVER_URL_PRIX + "/public_timelin.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取当前登录用户与其好友的位置动态。
-     * 
-     * @param since_id  若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0
-     * @param max_id    若指定此参数，则返回ID小于或等于max_id的微博，默认为0
-     * @param count     单页返回的记录条数，最大为50，默认为20
-     * @param page      返回结果的页码，默认为1
-     * @param only_attentions true：仅返回关注的，false：返回好友的，默认为true
-     * @param listener  异步请求回调接口
-     */
-    public void friendsTimeline(long since_id, long max_id, int count, int page, boolean only_attentions,
-            RequestListener listener) {
-        WeiboParameters params = buildTimeLineParamsBase(since_id, max_id, count, page);
-        params.put("type", only_attentions ? 1 : 0);
-        requestAsync(SERVER_URL_PRIX + "/friends_timeline.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取某个用户的位置动态。
-     * 
-     * @param uid       需要查询的用户ID
-     * @param since_id  若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0
-     * @param max_id    若指定此参数，则返回ID小于或等于max_id的微博，默认为0
-     * @param count     单页返回的记录条数，最大为50，默认为20
-     * @param page      返回结果的页码，默认为1
-     * @param base_app  是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param listener  异步请求回调接口
-     */
-    public void userTimeline(long uid, long since_id, long max_id, int count, int page, boolean base_app,
-            RequestListener listener) {
-        WeiboParameters params = buildTimeLineParamsBase(since_id, max_id, count, page);
-        params.put("uid", uid);
-        params.put("base_app", base_app ? 1 : 0);
-        requestAsync(SERVER_URL_PRIX + "/user_timeline.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取某个位置地点的动态。
-     * 
-     * @param poiid     需要查询的POI点ID
-     * @param since_id  若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0
-     * @param max_id    若指定此参数，则返回ID小于或等于max_id的微博，默认为0
-     * @param count     单页返回的记录条数，最大为50，默认为20
-     * @param page      返回结果的页码，默认为1
-     * @param base_app  是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param listener  异步请求回调接口
-     */
-    public void poiTimeline(String poiid, long since_id, long max_id, int count, int page, boolean base_app,
-            RequestListener listener) {
-        WeiboParameters params = buildTimeLineParamsBase(since_id, max_id, count, page);
-        params.put("poiid", poiid);
-        params.put("base_app", base_app ? 1 : 0);
-        requestAsync(SERVER_URL_PRIX + "/poi_timeline.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取某个位置周边的动态。
-     * 
-     * @param lat       纬度。有效范围：-90.0到+90.0，+表示北纬
-     * @param lon       经度。有效范围：-180.0到+180.0，+表示东经
-     * @param range     搜索范围，单位米，默认2000米，最大11132米
-     * @param starttime 开始时间，Unix时间戳
-     * @param endtime   结束时间，Unix时间戳
-     * @param sortType  排序方式。0：按时间排序， 1：按与中心点距离进行排序
-     *                  <li>{@link #SORT_BY_TIME}
-     *                  <li>{@link #SORT_BY_DISTENCE}
-     * @param count     单页返回的记录条数，最大为50，默认为20
-     * @param page      返回结果的页码，默认为1
-     * @param base_app  是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param offset    传入的经纬度是否是纠偏过，false：没纠偏、true：纠偏过，默认为false
-     * @param listener  异步请求回调接口
-     */
-    public void nearbyTimeline(String lat, String lon, int range, long starttime, long endtime, int sortType,
-            int count, int page, boolean base_app, boolean offset, RequestListener listener) {
-        WeiboParameters params = buildNearbyParams(lat, lon, range, count, page, sortType, offset);
-        params.put("starttime", starttime);
-        params.put("endtime", endtime);
-        params.put("base_app", base_app ? 1 : 0);
-        requestAsync(SERVER_URL_PRIX + "/nearby_timeline.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 根据ID获取动态的详情。
-     * 
-     * @param id        需要获取的动态ID
-     * @param listener  异步请求回调接口
-     */
-    public void statusesShow(long id, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("id", id);
-        requestAsync(SERVER_URL_PRIX + "/statuses/show.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取LBS位置服务内的用户信息。
-     * 
-     * @param uid       需要查询的用户ID
-     * @param base_app  是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param listener  异步请求回调接口
-     */
-    public void usersShow(long uid, boolean base_app, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("uid", uid);
-        params.put("base_app", base_app ? 1 : 0);
-        requestAsync(SERVER_URL_PRIX + "/users/show.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取用户签到过的地点列表。
-     * 
-     * @param uid       需要查询的用户ID
-     * @param count     单页返回的记录条数，默认为20，最大为50
-     * @param page      返回结果的页码，默认为1
-     * @param base_app  是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param listener  异步请求回调接口
-     */
-    public void usersCheckins(long uid, int count, int page, boolean base_app, RequestListener listener) {
-        WeiboParameters params = buildUserParams(uid, count, page, base_app);
-        requestAsync(SERVER_URL_PRIX + "/users/checkins.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取用户的照片列表。
-     * 
-     * @param uid       需要查询的用户ID
-     * @param count     单页返回的记录条数，默认为20，最大为50
-     * @param page      返回结果的页码，默认为1
-     * @param base_app  是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param listener  异步请求回调接口
-     */
-    public void usersPhotos(long uid, int count, int page, boolean base_app, RequestListener listener) {
-        WeiboParameters params = buildUserParams(uid, count, page, base_app);
-        requestAsync(SERVER_URL_PRIX + "/users/photos.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取用户的点评列表。
-     * 
-     * @param uid       需要查询的用户ID
-     * @param count     单页返回的记录条数，默认为20，最大为50
-     * @param page      返回结果的页码，默认为1
-     * @param base_app  是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param listener  异步请求回调接口
-     */
-    public void usersTips(long uid, int count, int page, boolean base_app, RequestListener listener) {
-        WeiboParameters params = buildUserParams(uid, count, page, base_app);
-        requestAsync(SERVER_URL_PRIX + "/users/tips.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取用户的todo列表。
-     * 
-     * @param uid       需要查询的用户ID
-     * @param count     单页返回的记录条数，默认为20，最大为50
-     * @param page      返回结果的页码，默认为1
-     * @param base_app  是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param listener  异步请求回调接口
-     */
-    public void usersTodo(long uid, int count, int page, boolean base_app, RequestListener listener) {
-        WeiboParameters params = buildUserParams(uid, count, page, base_app);
-        requestAsync(SERVER_URL_PRIX + "/users/todos.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取地点详情。
-     * 
-     * @param poiid     需要查询的POI地点ID
-     * @param base_app  是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param listener  异步请求回调接口
-     */
-    public void poisShow(String poiid, boolean base_app, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("poiid", poiid);
-        params.put("base_app", base_app ? 1 : 0);
-        requestAsync(SERVER_URL_PRIX + "/pois/show.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取在某个地点签到的人的列表。
-     * 
-     * @param poiid     需要查询的POI地点ID
-     * @param count     单页返回的记录条数，默认为20，最大为50
-     * @param page      返回结果的页码，默认为1
-     * @param base_app  是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param listener  异步请求回调接口
-     */
-    public void poisUsers(String poiid, int count, int page, boolean base_app, RequestListener listener) {
-        WeiboParameters params = buildPoisParams(poiid, count, page, base_app);
-        requestAsync(SERVER_URL_PRIX + "/pois/users.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取地点照片列表。
-     * 
-     * @param poiid     需要查询的POI地点ID
-     * @param count     单页返回的记录条数，默认为20，最大为50
-     * @param page      返回结果的页码，默认为1
-     * @param sortType  排序方式，0：按时间、1：按热门，默认为0，目前只支持按时间。
-     *                  <li>{@link #POIS_SORT_BY_TIME}
-     *                  <li>{@link #POIS_SORT_BY_HOT}
-     * @param base_app  是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param listener  异步请求回调接口
-     */
-    public void poisPhotos(String poiid, int count, int page, int sortType, boolean base_app, RequestListener listener) {
-        WeiboParameters params = buildPoisParams(poiid, count, page, base_app);
-        params.put("sort", sortType);
-        requestAsync(SERVER_URL_PRIX + "/pois/photos.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取地点点评列表。
-     * 
-     * @param poiid     需要查询的POI地点ID
-     * @param count     单页返回的记录条数，默认为20，最大为50
-     * @param page      返回结果的页码，默认为1
-     * @param sortType  排序方式，0：按时间、1：按热门，默认为0，目前只支持按时间。
-     *                  <li>{@link #POIS_SORT_BY_TIME}
-     *                  <li>{@link #POIS_SORT_BY_HOT}
-     * @param base_app  是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param listener  异步请求回调接口
-     */
-    public void poisTips(String poiid, int count, int page, int sortType, boolean base_app, RequestListener listener) {
-        WeiboParameters params = buildPoisParams(poiid, count, page, base_app);
-        params.put("sort", sortType);
-        requestAsync(SERVER_URL_PRIX + "/pois/tips.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 按省市查询地点。
-     * 
-     * @param keyword   查询的关键词
-     * @param city      城市代码，默认为全国搜索
-     * @param category  查询的分类代码，取值范围见：分类代码对应表
-     * @param count     单页返回的记录条数，默认为20，最大为50
-     * @param page      返回结果的页码，默认为1。
-     * @param listener  异步请求回调接口
-     */
-    public void poisSearch(String keyword, String city, String category, int count, int page, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("keyword", keyword);
-        params.put("city", city);
-        params.put("category", category);
-        params.put("count", count);
-        params.put("page", page);
-        requestAsync(SERVER_URL_PRIX + "/pois/search.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取地点分类。
-     * 
-     * @param pid       父分类ID，默认为0
-     * @param returnALL 是否返回全部分类，false：只返回本级下的分类，true：返回全部分类，默认为false
-     * @param listener  异步请求回调接口
-     */
-    public void poisCategory(int pid, boolean returnALL, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("pid", pid);
-        params.put("flag", returnALL ? 1 : 0);
-        requestAsync(SERVER_URL_PRIX + "/pois/category.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取附近地点。
-     * 
-     * @param lat       纬度，有效范围：-90.0到+90.0，+表示北纬
-     * @param lon       经度，有效范围：-180.0到+180.0，+表示东经
-     * @param range     查询范围半径，默认为2000，最大为10000，单位米
-     * @param q         查询的关键词
-     * @param category  查询的分类代码，取值范围见：分类代码对应表
-     * @param count     单页返回的记录条数，默认为20，最大为50
-     * @param page      返回结果的页码，默认为1
-     * @param sortType  排序方式，0：按权重，1：按距离，2：按签到人数。默认为0
-     *                  <li>{@link #NEARBY_POIS_SORT_BY_WEIGHT}
-     *                  <li>{@link #NEARBY_POIS_SORT_BY_DISTENCE}
-     *                  <li>{@link #NEARBY_POIS_SORT_BY_CHECKIN_NUMBER}
-     * @param offset    传入的经纬度是否是纠偏过，false：没纠偏、true：纠偏过，默认为false
-     * @param listener  异步请求回调接口
-     */
-    public void nearbyPois(String lat, String lon, int range, String q, String category, int count, int page,
-            int sortType, boolean offset, RequestListener listener) {
-        WeiboParameters params = buildNearbyParams(lat, lon, range, count, page, sortType, offset);
-        params.put("q", q);
-        params.put("category", category);
-        requestAsync(SERVER_URL_PRIX + "/nearby/pois.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取附近发位置微博的人。
-     * 
-     * @param lat       纬度，有效范围：-90.0到+90.0，+表示北纬
-     * @param lon       经度，有效范围：-180.0到+180.0，+表示东经
-     * @param range     查询范围半径，默认为2000，最大为11132，单位米
-     * @param starttime 开始时间，Unix时间戳
-     * @param endtime   结束时间，Unix时间戳
-     * @param sortType  排序方式，0：按时间、1：按距离，默认为0
-     *                  <li>{@link #SORT_BY_TIME}
-     *                  <li>{@link #SORT_BY_DISTENCE}
-     * @param count     单页返回的记录条数，默认为20，最大为50
-     * @param page      返回结果的页码，默认为1
-     * @param offset    传入的经纬度是否是纠偏过，false：没纠偏、true：纠偏过，默认为false
-     * @param listener  异步请求回调接口
-     */
-    public void nearbyUsers(String lat, String lon, int range, long starttime, long endtime, int sortType, int count,
-            int page, boolean offset, RequestListener listener) {
-        WeiboParameters params = buildNearbyParams(lat, lon, range, count, page, sortType, offset);
-        params.put("starttime", starttime);
-        params.put("endtime", endtime);
-        requestAsync(SERVER_URL_PRIX + "/nearby/users.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取附近照片。
-     * 
-     * @param lat       纬度，有效范围：-90.0到+90.0，+表示北纬
-     * @param lon       经度，有效范围：-180.0到+180.0，+表示东经
-     * @param range     查询范围半径，默认为2000，最大为11132，单位米
-     * @param starttime 开始时间，Unix时间戳
-     * @param endtime   结束时间，Unix时间戳
-     * @param sortType  排序方式，0：按时间、1：按距离，默认为0
-     *                  <li>{@link #SORT_BY_TIME}
-     *                  <li>{@link #SORT_BY_DISTENCE}
-     * @param count     单页返回的记录条数，默认为20，最大为50
-     * @param page      返回结果的页码，默认为1
-     * @param offset    传入的经纬度是否是纠偏过，false：没纠偏、true：纠偏过，默认为false
-     * @param listener  异步请求回调接口
-     */
-    public void nearbyPhotos(String lat, String lon, int range, long starttime, long endtime, int sortType, int count,
-            int page, boolean offset, RequestListener listener) {
-        WeiboParameters params = buildNearbyParams(lat, lon, range, count, page, sortType, offset);
-        params.put("starttime", starttime);
-        params.put("endtime", endtime);
-        requestAsync(SERVER_URL_PRIX + "/nearby/photos.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取附近的人
-     * 
-     * @param lat       纬度，有效范围：-90.0到+90.0，+表示北纬
-     * @param lon       经度，有效范围：-180.0到+180.0，+表示东经
-     * @param count     单页返回的记录条数，默认为20，最大为50
-     * @param page      返回结果的页码，默认为1
-     * @param range     查询范围半径，默认为2000，最大为11132
-     * @param sortType  排序方式，0：按时间、1：按距离、2：按社会化关系，默认为2。
-     *                  <li>{@link #NEARBY_USER_SORT_BY_TIME}
-     *                  <li>{@link #NEARBY_POIS_SORT_BY_DISTENCE}
-     *                  <li>{@link #NEARBY_USER_SORT_BY_SOCIAL_SHIP}
-     * @param filterType（暂未启用）用户关系过滤，0：全部、1：只返回陌生人、2：只返回关注人，默认为0
-     *                  <li>{@link #RELATIONSHIP_FILTER_ALL}
-     *                  <li>{@link #RELATIONSHIP_FILTER_STRANGER}
-     *                  <li>{@link #RELATIONSHIP_FILTER_FOLLOW}
-     * @param genderType性别过滤，0：全部、1：男、2：女，默认为0
-     *                  <li>{@link #GENDER_ALL}
-     *                  <li>{@link #GENDER_MAN}
-     *                  <li>{@link #GENDER_WOMAM}
-     * @param levelType 用户级别过滤，0：全部、1：普通用户、2：VIP用户、7：达人，默认为0
-     *                  <li>{@link #USER_LEVEL_ALL}
-     *                  <li>{@link #USER_LEVEL_NORMAL}
-     *                  <li>{@link #USER_LEVEL_VIP}
-     *                  <li>{@link #USER_LEVEL_STAR}
-     * @param start_birth 与参数endbirth一起定义过滤年龄段，数值为年龄大小，默认为空
-     * @param end_birth 与参数startbirth一起定义过滤年龄段，数值为年龄大小，默认为空
-     * @param offset    传入的经纬度是否是纠偏过，0：没纠偏、1：纠偏过，默认为0
-     * @param listener  异步请求回调接口
-     */
-    public void nearbyUserList(String lat, String lon, int count, int page, int range, int sortType, int filterType,
-            int genderType, int levelType, int start_birth, int end_birth, boolean offset, RequestListener listener) {
-        WeiboParameters params = buildNearbyParams(lat, lon, range, count, page, sortType, offset);
-        params.put("filter", filterType);
-        params.put("gender", genderType);
-        params.put("level", levelType);
-        params.put("startbirth", start_birth);
-        params.put("endbirth", end_birth);
-        requestAsync(SERVER_URL_PRIX + "/nearby_users/list.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 添加地点
-     * 
-     * @param title     POI点的名称，不超过30个字符，必须进行URLencode
-     * @param address   POI点的地址，不超过60个字符，必须进行URLencode
-     * @param category  POI的类型分类代码，取值范围见：分类代码对应表，默认为500
-     * @param lat       纬度，有效范围：-90.0到+90.0，+表示北纬
-     * @param lon       经度，有效范围：-180.0到+180.0，+表示东经
-     * @param city      城市代码
-     * @param province  省份代码
-     * @param country   国家代码
-     * @param phone     POI点的电话，不超过14个字符
-     * @param postCode  POI点的邮编
-     * @param extra     其他，必须进行URLencode
-     * @param listener  异步请求回调接口
-     */
-    public void poisCreate(String title, String address, String category, String lat, String lon, String city,
-            String province, String country, String phone, String postCode, String extra, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("title", title);
-        params.put("address", address);
-        params.put("category", category);
-        params.put("lat", lat);
-        params.put("long", lon);
-        params.put("city", city);
-        params.put("province", province);
-        params.put("country", country);
-        params.put("phone", phone);
-        params.put("postcode", postCode);
-        params.put("extra", extra);
-        requestAsync(SERVER_URL_PRIX + "/pois/create.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 签到同时可以上传一张图片。
-     * 
-     * @param poiid     需要签到的POI地点ID
-     * @param status    签到时发布的动态内容，内容不超过140个汉字
-     * @param pic       需要上传的图片路径，仅支持JPEG、GIF、PNG格式，图片大小小于5M。例如：/sdcard/pic.jgp； 注意：pic不能为网络图片
-     * @param isPublic  是否同步到微博，默认为不同步
-     * @param listener  异步请求回调接口
-     */
-    public void poisAddCheckin(String poiid, String status, String pic, boolean isPublic, RequestListener listener) {
-        WeiboParameters params = buildPoiis(poiid, status, isPublic);
-        params.put("pic", pic);
-        requestAsync(SERVER_URL_PRIX + "/pois/add_checkin.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 添加照片。
-     * 
-     * @param poiid     需要添加照片的POI地点ID
-     * @param status    签到时发布的动态内容，内容不超过140个汉字
-     * @param pic       需要上传的图片，仅支持JPEG、GIF、PNG格式，图片大小小于5M。例如：/sdcard/pic.jgp； 注意： pic不能为网络图片
-     * @param isPublic  是否同步到微博，默认为不同步
-     * @param listener  异步请求回调接口
-     */
-    public void poisAddPhoto(String poiid, String status, String pic, boolean isPublic, RequestListener listener) {
-        WeiboParameters params = buildPoiis(poiid, status, isPublic);
-        params.put("pic", pic);
-        requestAsync(SERVER_URL_PRIX + "/pois/add_photo.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 添加点评。
-     * 
-     * @param poiid     需要点评的POI地点ID
-     * @param status    点评时发布的动态内容，内容不超过140个汉字
-     * @param isPublic  是否同步到微博，默认为不同步
-     * @param listener  异步请求回调接口
-     */
-    public void poisAddTip(String poiid, String status, boolean isPublic, RequestListener listener) {
-        WeiboParameters params = buildPoiis(poiid, status, isPublic);
-        requestAsync(SERVER_URL_PRIX + "/pois/add_tip.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 添加todo。
-     * 
-     * @param poiid     需要添加todo的POI地点ID
-     * @param status    添加todo时发布的动态内容，必须做URLencode，内容不超过140个汉字
-     * @param isPublic  是否同步到微博，1：是、0：否，默认为0
-     * @param listener  异步请求回调接口
-     */
-    public void poisAddTodo(String poiid, String status, boolean isPublic, RequestListener listener) {
-        WeiboParameters params = buildPoiis(poiid, status, isPublic);
-        requestAsync(SERVER_URL_PRIX + "/pois/add_todo.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 用户添加自己的位置。
-     * 
-     * @param lat       纬度，有效范围：-90.0到+90.0，+表示北纬
-     * @param lon       经度，有效范围：-180.0到+180.0，+表示东经
-     * @param listener  异步请求回调接口
-     */
-    public void nearbyUsersCreate(String lat, String lon, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("lat", lat);
-        params.put("long", lon);
-        requestAsync(SERVER_URL_PRIX + "/nearby_users/create.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 用户删除自己的位置。
-     * 
-     * @param listener  异步请求回调接口
-     */
-    public void nearbyUsersDestroy(RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        requestAsync(SERVER_URL_PRIX + "/nearby_users/destory.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    // 组装TimeLines的参数
-    private WeiboParameters buildTimeLineParamsBase(long since_id, long max_id, int count, int page) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("since_id", since_id);
-        params.put("max_id", max_id);
-        params.put("count", count);
-        params.put("page", page);
-        return params;
-    }
-
-    // 组装UserParams的参数
-    private WeiboParameters buildUserParams(long uid, int count, int page, boolean base_app) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("uid", uid);
-        params.put("count", count);
-        params.put("page", page);
-        params.put("base_app", base_app ? 1 : 0);
-        return params;
-    }
-
-    // 组装UserParams的参数
-    private WeiboParameters buildNearbyParams(String lat, String lon, int range, int count, int page,
-            int sortType, boolean offset) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("lat", lat);
-        params.put("long", lon);
-        params.put("range", range);
-        params.put("count", count);
-        params.put("page", page);
-        params.put("sort", sortType);
-        params.put("offset", offset ? 1 : 0);
-        return params;
-    }
-
-    private WeiboParameters buildPoiis(String poiid, String status, boolean isPublic) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("poiid", poiid);
-        params.put("status", status);
-        params.put("public", isPublic ? 1 : 0);
-        return params;
-    }
-
-    private WeiboParameters buildPoisParams(String poiid, int count, int page, boolean base_app) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("poiid", poiid);
-        params.put("base_app", base_app ? 1 : 0);
-        params.put("count", count);
-        params.put("page", page);
-        return params;
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/RegisterAPI.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/RegisterAPI.java
deleted file mode 100644
index 5148699..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/RegisterAPI.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.legacy;
-
-import android.content.Context;
-import com.sina.weibo.sdk.auth.Oauth2AccessToken;
-import com.sina.weibo.sdk.net.RequestListener;
-import com.sina.weibo.sdk.net.WeiboParameters;
-import com.sina.weibo.sdk.openapi.AbsOpenAPI;
-
-/**
- * 该类封装了微博的注册接口。
- * 详情请参考<a href="http://t.cn/8F1nSzB">注册接口</a>
- * 
- * @author SINA
- * @date 2014-03-03
- */
-public class RegisterAPI extends AbsOpenAPI {
-    public RegisterAPI(Context context, String appKey, Oauth2AccessToken accessToken) {
-        super(context, appKey, accessToken);
-    }
-
-    private static final String SERVER_URL_PRIX = API_SERVER + "/register";
-
-    /**
-     * 验证昵称是否可用。
-     * 
-     * @param nickname  需要验证的昵称。4-20个字符，支持中英文、数字、"_"或减号
-     * @param listener  异步请求回调接口
-     */
-    public void suggestions(String nickname, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("nickname", nickname);
-        requestAsync(SERVER_URL_PRIX + "/verify_nickname.json", params, HTTPMETHOD_GET, listener);
-    }
-
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/SearchAPI.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/SearchAPI.java
deleted file mode 100644
index 59ff79d..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/SearchAPI.java
+++ /dev/null
@@ -1,152 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
- 
-package com.sina.weibo.sdk.openapi.legacy;
-
-import android.content.Context;
-import com.sina.weibo.sdk.auth.Oauth2AccessToken;
-import com.sina.weibo.sdk.net.RequestListener;
-import com.sina.weibo.sdk.net.WeiboParameters;
-import com.sina.weibo.sdk.openapi.AbsOpenAPI;
-
-/**
- * 该类封装了微博的搜索接口。
- * 详情请参考<a href="http://t.cn/8F1nKH7">搜索接口</a>
- * 
- * @author SINA
- * @date 2014-03-03
- */
-public class SearchAPI extends AbsOpenAPI {
-
-    /** 学校类型，1：大学、2：高中、3：中专技校、4：初中、5：小学，默认为1。 */
-    public static final int SCHOOL_TYPE_COLLEGE     = 1;
-    public static final int SCHOOL_TYPE_SENIOR      = 2;
-    public static final int SCHOOL_TYPE_TECHNICAL   = 3;
-    public static final int SCHOOL_TYPE_JUNIOR      = 4;
-    public static final int SCHOOL_TYPE_PRIMARY     = 5;
-
-    /** 联想类型，0：关注、1：粉丝。 */
-    public static final int FRIEND_TYPE_ATTENTIONS  = 0;
-    public static final int FRIEND_TYPE_FELLOWS     = 1;
-
-    /** 联想范围，0：只联想关注人、1：只联想关注人的备注、2：全部，默认为2。 */
-    public static final int RANGE_ATTENTIONS     = 0;
-    public static final int RANGE_ATTENTION_TAGS = 1;
-    public static final int RANGE_ALL            = 2;
-
-    public SearchAPI(Context context, String appKey, Oauth2AccessToken accessToken) {
-        super(context, appKey, accessToken);
-    }
-
-    private static final String SERVER_URL_PRIX = API_SERVER + "/search";
-
-    /**
-     * 搜索用户时的联想搜索建议。
-     * 
-     * @param q         搜索的关键字，必须做URLencoding
-     * @param count     返回的记录条数，默认为10
-     * @param listener  异步请求回调接口
-     */
-    public void users(String q, int count, RequestListener listener) {
-        WeiboParameters params = buildBaseParams(q, count);
-        requestAsync(SERVER_URL_PRIX + "/suggestions/users.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 搜索微博时的联想搜索建议。
-     * 
-     * @param q         搜索的关键字，必须做URLencoding。
-     * @param count     返回的记录条数，默认为10。
-     * @param listener  异步请求回调接口
-     */
-    public void statuses(String q, int count, RequestListener listener) {
-        WeiboParameters params = buildBaseParams(q, count);
-        requestAsync(SERVER_URL_PRIX + "/suggestions/statuses.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 搜索学校时的联想搜索建议。
-     * 
-     * @param q             搜索的关键字，必须做URLencoding。
-     * @param count         返回的记录条数，默认为10。
-     * @param schoolType    学校类型，1：大学、2：高中、3：中专技校、4：初中、5：小学，默认为1。可为以下几种： 
-     *                      <li> {@link #SCHOOL_TYPE_COLLEGE}
-     *                      <li> {@link #SCHOOL_TYPE_SENIOR}
-     *                      <li> {@link #SCHOOL_TYPE_TECHNICAL}
-     *                      <li> {@link #SCHOOL_TYPE_JUNIOR}
-     *                      <li> {@link #SCHOOL_TYPE_PRIMARY}
-     * @param listener      异步请求回调接口
-     */
-    public void schools(String q, int count, int schoolType, RequestListener listener) {
-        WeiboParameters params = buildBaseParams(q, count);
-        params.put("type", schoolType);
-        requestAsync(SERVER_URL_PRIX + "/suggestions/schools.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 搜索公司时的联想搜索建议。
-     * 
-     * @param q         搜索的关键字，必须做URLencoding
-     * @param count     返回的记录条数，默认为10
-     * @param listener  异步请求回调接口
-     */
-    public void companies(String q, int count, RequestListener listener) {
-        WeiboParameters params = buildBaseParams(q, count);
-        requestAsync(SERVER_URL_PRIX + "/suggestions/companies.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 搜索应用时的联想搜索建议。
-     * 
-     * @param q         搜索的关键字，必须做URLencoding
-     * @param count     返回的记录条数，默认为10
-     * @param listener  异步请求回调接口
-     */
-    public void apps(String q, int count, RequestListener listener) {
-        WeiboParameters params = buildBaseParams(q, count);
-        requestAsync(SERVER_URL_PRIX + "/suggestions/apps.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * “@”用户时的联想建议。
-     * 
-     * @param q         搜索的关键字，必须做URLencoding
-     * @param count     返回的记录条数，默认为10，粉丝最多1000，关注最多2000
-     * @param type      联想类型，0：关注、1：粉丝。可为以下几种：
-     *                  <li> {@link #FRIEND_TYPE_ATTENTIONS}
-     *                  <li> {@link #FRIEND_TYPE_FELLOWS}
-     * @param range     联想范围，0：只联想关注人、1：只联想关注人的备注、2：全部，默认为2。 
-     *                  <li> {@link #RANGE_ATTENTIONS}
-     *                  <li> {@link #RANGE_ATTENTION_TAGS}
-     *                  <li> {@link #RANGE_ALL}
-     * @param listener  异步请求回调接口
-     */
-    public void atUsers(String q, int count, int type, int range, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("q", q);
-        params.put("count", count);
-        params.put("type", type);
-        params.put("range", range);
-        requestAsync(SERVER_URL_PRIX + "/suggestions/at_users.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    private WeiboParameters buildBaseParams(String q, int count) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("q", q);
-        params.put("count", count);
-        return params;
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/ShortUrlAPI.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/ShortUrlAPI.java
deleted file mode 100644
index 0a2f2f7..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/ShortUrlAPI.java
+++ /dev/null
@@ -1,177 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
- 
-package com.sina.weibo.sdk.openapi.legacy;
-
-import android.content.Context;
-import com.sina.weibo.sdk.auth.Oauth2AccessToken;
-import com.sina.weibo.sdk.net.RequestListener;
-import com.sina.weibo.sdk.net.WeiboParameters;
-import com.sina.weibo.sdk.openapi.AbsOpenAPI;
-
-/**
- * 该类封装了微博的短链接接口。
- * 详情请参考<a href="http://t.cn/8F3g1mY">短链接接口</a>
- * 
- * @author SINA
- * @date 2014-03-03
- */
-public class ShortUrlAPI extends AbsOpenAPI {
-    public ShortUrlAPI(Context context, String appKey, Oauth2AccessToken accessToken) {
-        super(context, appKey, accessToken);
-    }
-
-    private static final String SERVER_URL_PRIX = API_SERVER + "/short_url";
-
-    /**
-     * 将一个或多个长链接转换成短链接
-     * 
-     * @param url_long  需要转换的长链接，最多不超过20个
-     * @param listener  异步请求回调接口
-     */
-    public void shorten(String[] url_long, RequestListener listener) {
-        WeiboParameters params = buildURLRequest(url_long, "url_long");
-        requestAsync(SERVER_URL_PRIX + "/shorten.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 将一个或多个短链接还原成原始的长链接。
-     * 
-     * @param url_short 需要还原的短链接，最多不超过20个 
-     * @param listener  异步请求回调接口
-     */
-    public void expand(String[] url_short, RequestListener listener) {
-        WeiboParameters params = buildURLRequest(url_short, "url_short");
-        requestAsync(SERVER_URL_PRIX + "/expand.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    public String expandSync(String[] url_short) {
-        WeiboParameters params = buildURLRequest(url_short, "url_short");
-        return requestSync(SERVER_URL_PRIX + "/expand.json", params, HTTPMETHOD_GET);
-    }
-
-    /**
-     * 获取短链接的总点击数。
-     * 
-     * @param url_short     需要取得点击数的短链接，最多不超过20个
-     * @param listener      异步请求回调接口
-     */
-    public void clicks(String[] url_short, RequestListener listener) {
-        WeiboParameters params = buildURLRequest(url_short, "url_short");
-        requestAsync(SERVER_URL_PRIX + "/clicks.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取一个短链接点击的referer来源和数量。
-     * 
-     * @param url_short     需要取得点击来源的短链接
-     * @param listener      异步请求回调接口
-     */
-    public void referers(String url_short, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("url_short", url_short);
-        requestAsync(SERVER_URL_PRIX + "/referers.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取一个短链接点击的地区来源和数量。
-     * 
-     * @param url_short     需要取得点击来源的短链接
-     * @param listener      异步请求回调接口
-     */
-    public void locations(String url_short, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("url_short", url_short);
-        requestAsync(SERVER_URL_PRIX + "/locations.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取短链接在微博上的微博分享数。
-     * 
-     * @param url_short     需要取得分享数的短链接，最多不超过20个
-     * @param listener      异步请求回调接口
-     */
-    public void shareCounts(String[] url_short, RequestListener listener) {
-        WeiboParameters params = buildURLRequest(url_short, "url_short");
-        requestAsync(SERVER_URL_PRIX + "/share/counts.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取包含指定单个短链接的最新微博内容。
-     * 
-     * @param url_short 需要取得关联微博内容的短链接
-     * @param since_id  若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0
-     * @param max_id    若指定此参数，则返回ID小于或等于max_id的微博，默认为0
-     * @param count     单页返回的记录条数，默认为50，最多不超过200
-     * @param page      返回结果的页码，默认为1
-     * @param listener  异步请求回调接口
-     */
-    public void shareStatuses(String url_short, long since_id, long max_id, int count, int page,
-            RequestListener listener) {
-        WeiboParameters params = buildRequestParams(url_short, since_id, max_id, count, page);
-        requestAsync(SERVER_URL_PRIX + "/share/statuses.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取短链接在微博上的微博评论数
-     * 
-     * @param url_short 需要取得分享数的短链接，最多不超过20个
-     * @param listener  异步请求回调接口
-     */
-    public void commentCounts(String[] url_short, RequestListener listener) {
-        WeiboParameters params = buildURLRequest(url_short, "url_short");
-        requestAsync(SERVER_URL_PRIX + "/comment/counts.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取包含指定单个短链接的最新微博评论。
-     * 
-     * @param url_short 需要取得关联微博评论内容的短链接
-     * @param since_id  若指定此参数，则返回ID比since_id大的评论（即比since_id时间晚的评论），默认为0
-     * @param max_id    若指定此参数，则返回ID小于或等于max_id的评论，默认为0
-     * @param count     单页返回的记录条数，默认为50，最多不超过200
-     * @param page      返回结果的页码，默认为1
-     * @param listener  异步请求回调接口
-     */
-    public void comments(String url_short, long since_id, long max_id, int count, int page, RequestListener listener) {
-        WeiboParameters params = buildRequestParams(url_short, since_id, max_id, count, page);
-        requestAsync(SERVER_URL_PRIX + "/comment/comments.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    // 组装URL参数
-    private WeiboParameters buildRequestParams(String url_short, long since_id, long max_id, int count, int page) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("url_short", url_short);
-        params.put("since_id", since_id);
-        params.put("max_id", max_id);
-        params.put("count", count);
-        params.put("page", page);
-        return params;
-    }
-
-    // 组装URL参数
-    private WeiboParameters buildURLRequest(String[] url, String type) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        if (url != null) {
-            int length = url.length;
-            for (int i = 0; i < length; i++) {
-                params.put(type, url[i]);
-            }
-        }
-        return params;
-    }
-
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/StatusesAPI.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/StatusesAPI.java
deleted file mode 100644
index 598b6a2..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/StatusesAPI.java
+++ /dev/null
@@ -1,716 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
- 
-package com.sina.weibo.sdk.openapi.legacy;
-
-import android.content.Context;
-import android.graphics.Bitmap;
-import android.text.TextUtils;
-import com.sina.weibo.sdk.auth.Oauth2AccessToken;
-import com.sina.weibo.sdk.net.RequestListener;
-import com.sina.weibo.sdk.net.WeiboParameters;
-import com.sina.weibo.sdk.openapi.AbsOpenAPI;
-
-/**
- * 该类封装了微博接口。
- * 详情请参考<a href="http://t.cn/8F3e7SE">微博接口</a>
- * 
- * @author SINA
- * @date 2014-03-03
- */
-public class StatusesAPI extends AbsOpenAPI {
-
-    /** 过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐 */
-    public static final int FEATURE_ALL      = 0;
-    public static final int FEATURE_ORIGINAL = 1;
-    public static final int FEATURE_PICTURE  = 2;
-    public static final int FEATURE_VIDEO    = 3;
-    public static final int FEATURE_MUSICE   = 4;
-
-    /** 作者筛选类型，0：全部、1：我关注的人、2：陌生人 */
-    public static final int AUTHOR_FILTER_ALL        = 0;
-    public static final int AUTHOR_FILTER_ATTENTIONS = 1;
-    public static final int AUTHOR_FILTER_STRANGER   = 2;
-
-    /** 来源筛选类型，0：全部、1：来自微博的评论、2：来自微群的评论 */
-    public static final int SRC_FILTER_ALL      = 0;
-    public static final int SRC_FILTER_WEIBO    = 1;
-    public static final int SRC_FILTER_WEIQUN   = 2;
-
-    /** 原创筛选类型，0：全部微博、1：原创的微博。 */
-    public static final int TYPE_FILTER_ALL     = 0;
-    public static final int TYPE_FILTER_ORIGAL  = 1;
-
-    /** 获取类型，1：微博、2：评论、3：私信，默认为1。 */
-    public static final int TYPE_STATUSES   = 1;
-    public static final int TYPE_COMMENTS   = 2;
-    public static final int TYPE_MESSAGE    = 3;
-
-    /** 标识是否在转发的同时发表评论，0：否、1：评论给当前微博、2：评论给原微博、3：都评论，默认为0 */
-    public static final int COMMENTS_NONE           = 0;
-    public static final int COMMENTS_CUR_STATUSES   = 1;
-    public static final int COMMENTS_RIGAL_STATUSES = 2;
-    public static final int COMMENTS_BOTH           = 3;
-
-    /** 表情类别，face：普通表情、ani：魔法表情、cartoon：动漫表情，默认为face。 */
-    public static final String EMOTION_TYPE_FACE    = "face";
-    public static final String EMOTION_TYPE_ANI     = "ani";
-    public static final String EMOTION_TYPE_CARTOON = "cartoon";
-
-    /** 语言类别，cnname：简体、twname：繁体，默认为cnname。 */
-    public static final String LANGUAGE_CNNAME = "cnname";
-    public static final String LANGUAGE_TWNAME = "twname";
-
-    public StatusesAPI(Context context, String appKey, Oauth2AccessToken accessToken) {
-        super(context, appKey, accessToken);
-    }
-
-    private static final String SERVER_URL_PRIX = API_SERVER + "/statuses";
-
-    /**
-     * 返回最新的公共微博。
-     * 
-     * @param count     单页返回的记录条数，默认为50
-     * @param page      返回结果的页码，默认为1
-     * @param base_app  是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param listener  异步请求回调接口
-     */
-    public void publicTimeline(int count, int page, boolean base_app, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("count", count);
-        params.put("page", page);
-        params.put("base_app", base_app ? 1 : 0);
-        requestAsync(SERVER_URL_PRIX + "/public_timeline.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取当前登录用户及其所关注用户的最新微博。
-     * 
-     * @param since_id      若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0
-     * @param max_id        若指定此参数，则返回ID小于或等于max_id的微博，默认为0
-     * @param count         单页返回的记录条数，默认为50
-     * @param page          返回结果的页码，默认为1
-     * @param base_app      是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param featureType   过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0。 
-     *                      <li> {@link #FEATURE_ALL}
-     *                      <li> {@link #FEATURE_ORIGINAL}
-     *                      <li> {@link #FEATURE_PICTURE}
-     *                      <li> {@link #FEATURE_VIDEO}
-     *                      <li> {@link #FEATURE_MUSICE}
-     * @param trim_user     返回值中user字段开关，false：返回完整user字段、true：user字段仅返回user_id，默认为false
-     * @param listener      异步请求回调接口
-     */
-    public void friendsTimeline(long since_id, long max_id, int count, int page, boolean base_app, int featureType,
-            boolean trim_user, RequestListener listener) {
-        WeiboParameters params = buildTimeLineWithAppTrim(since_id, max_id, count, page, base_app, trim_user, featureType);
-        requestAsync(SERVER_URL_PRIX + "/friends_timeline.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取当前登录用户及其所关注用户的最新微博的ID。
-     * 
-     * @param since_id      若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0
-     * @param max_id        若指定此参数，则返回ID小于或等于max_id的微博，默认为0
-     * @param count         单页返回的记录条数，默认为50
-     * @param page          返回结果的页码，默认为1
-     * @param base_app      是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param featureType   过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0
-     *                      <li> {@link #FEATURE_ALL}
-     *                      <li> {@link #FEATURE_ORIGINAL}
-     *                      <li> {@link #FEATURE_PICTURE}
-     *                      <li> {@link #FEATURE_VIDEO}
-     *                      <li> {@link #FEATURE_MUSICE}
-     * @param listener      异步请求回调接口
-     */
-    public void friendsTimelineIds(long since_id, long max_id, int count, int page, boolean base_app, int featureType,
-            RequestListener listener) {
-        WeiboParameters params = buildTimeLineWithApp(since_id, max_id, count, page, base_app, featureType);
-        requestAsync(SERVER_URL_PRIX + "/friends_timeline/ids.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取当前登录用户及其所关注用户的最新微博。
-     * 
-     * @param since_id      若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0
-     * @param max_id        若指定此参数，则返回ID小于或等于max_id的微博，默认为0
-     * @param count         单页返回的记录条数，默认为50
-     * @param page          返回结果的页码，默认为1
-     * @param base_app      是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param featureType   过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0
-     *                      <li> {@link #FEATURE_ALL}
-     *                      <li> {@link #FEATURE_ORIGINAL}
-     *                      <li> {@link #FEATURE_PICTURE}
-     *                      <li> {@link #FEATURE_VIDEO}
-     *                      <li> {@link #FEATURE_MUSICE}
-     * @param trim_user     返回值中user字段开关，false：返回完整user字段、true：user字段仅返回user_id，默认为false
-     * @param listener      异步请求回调接口
-     */
-    public void homeTimeline(long since_id, long max_id, int count, int page, boolean base_app, int featureType,
-            boolean trim_user, RequestListener listener) {
-        WeiboParameters params = buildTimeLineWithAppTrim(since_id, max_id, count, page, base_app, trim_user,
-                featureType);
-        requestAsync(SERVER_URL_PRIX + "/home_timeline.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取某个用户最新发表的微博列表。
-     * 
-     * @param uid           需要查询的用户ID
-     * @param since_id      若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0
-     * @param max_id        若指定此参数，则返回ID小于或等于max_id的微博，默认为0
-     * @param count         单页返回的记录条数，默认为50
-     * @param page          返回结果的页码，默认为1
-     * @param base_app      是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param featureType   过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0
-     *                      <li> {@link #FEATURE_ALL}
-     *                      <li> {@link #FEATURE_ORIGINAL}
-     *                      <li> {@link #FEATURE_PICTURE}
-     *                      <li> {@link #FEATURE_VIDEO}
-     *                      <li> {@link #FEATURE_MUSICE}
-     * @param trim_user     返回值中user字段开关，false：返回完整user字段、true：user字段仅返回user_id，默认为false
-     * @param listener      异步请求回调接口
-     */
-    public void userTimeline(long uid, long since_id, long max_id, int count, int page, boolean base_app,
-            int featureType, boolean trim_user, RequestListener listener) {
-        WeiboParameters params = buildTimeLineWithAppTrim(since_id, max_id, count, page, base_app, trim_user,
-                featureType);
-        params.put("uid", uid);
-        requestAsync(SERVER_URL_PRIX + "/user_timeline.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取某个用户最新发表的微博列表。
-     * 
-     * @param screen_name   需要查询的用户昵称
-     * @param since_id      若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0
-     * @param max_id        若指定此参数，则返回ID小于或等于max_id的微博，默认为0
-     * @param count         单页返回的记录条数，默认为50
-     * @param page          返回结果的页码，默认为1
-     * @param base_app      是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param featureType   过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0
-     *                      <li> {@link #FEATURE_ALL}
-     *                      <li> {@link #FEATURE_ORIGINAL}
-     *                      <li> {@link #FEATURE_PICTURE}
-     *                      <li> {@link #FEATURE_VIDEO}
-     *                      <li> {@link #FEATURE_MUSICE}
-     * @param trim_user     返回值中user字段开关，false：返回完整user字段、true：user字段仅返回user_id，默认为false
-     * @param listener      异步请求回调接口
-     */
-    public void userTimeline(String screen_name, long since_id, long max_id, int count, int page, boolean base_app,
-            int featureType, boolean trim_user, RequestListener listener) {
-        WeiboParameters params = buildTimeLineWithAppTrim(since_id, max_id, count, page, base_app, trim_user,
-                featureType);
-        params.put("screen_name", screen_name);
-        requestAsync(SERVER_URL_PRIX + "/user_timeline.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取当前用户最新发表的微博列表
-     * 
-     * @param screen_name   需要查询的用户昵称
-     * @param since_id      若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0
-     * @param max_id        若指定此参数，则返回ID小于或等于max_id的微博，默认为0
-     * @param count         单页返回的记录条数，默认为50
-     * @param page          返回结果的页码，默认为1
-     * @param base_app      是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param featureType   过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0
-     *                      <li> {@link #FEATURE_ALL}
-     *                      <li> {@link #FEATURE_ORIGINAL}
-     *                      <li> {@link #FEATURE_PICTURE}
-     *                      <li> {@link #FEATURE_VIDEO}
-     *                      <li> {@link #FEATURE_MUSICE}
-     * @param trim_user     返回值中user字段开关，false：返回完整user字段、true：user字段仅返回user_id，默认为false
-     * @param listener      异步请求回调接口
-     */
-    public void userTimeline(long since_id, long max_id, int count, int page, boolean base_app, int featureType,
-            boolean trim_user, RequestListener listener) {
-        WeiboParameters params = buildTimeLineWithAppTrim(since_id, max_id, count, page, base_app, trim_user,
-                featureType);
-        requestAsync(SERVER_URL_PRIX + "/user_timeline.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取用户发布的微博的ID
-     * 
-     * @param uid           需要查询的用户ID
-     * @param since_id      若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0
-     * @param max_id        若指定此参数，则返回ID小于或等于max_id的微博，默认为0
-     * @param count         单页返回的记录条数，默认为50
-     * @param page          返回结果的页码，默认为1
-     * @param base_app      是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param featureType   过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0
-     *                      <li> {@link #FEATURE_ALL}
-     *                      <li> {@link #FEATURE_ORIGINAL}
-     *                      <li> {@link #FEATURE_PICTURE}
-     *                      <li> {@link #FEATURE_VIDEO}
-     *                      <li> {@link #FEATURE_MUSICE}
-     * @param listener      异步请求回调接口
-     */
-    public void userTimelineIds(long uid, long since_id, long max_id, int count, int page, boolean base_app,
-            int featureType, RequestListener listener) {
-        WeiboParameters params = buildTimeLineWithApp(since_id, max_id, count, page, base_app, featureType);
-        params.put("uid", uid);
-        requestAsync(SERVER_URL_PRIX + "/user_timeline/ids.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取用户发布的微博的ID
-     * 
-     * @param screen_name   需要查询的用户昵称
-     * @param since_id      若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0
-     * @param max_id        若指定此参数，则返回ID小于或等于max_id的微博，默认为0
-     * @param count         单页返回的记录条数，默认为50
-     * @param page          返回结果的页码，默认为1
-     * @param base_app      是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param featureType   过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0
-     *                      <li> {@link #FEATURE_ALL}
-     *                      <li> {@link #FEATURE_ORIGINAL}
-     *                      <li> {@link #FEATURE_PICTURE}
-     *                      <li> {@link #FEATURE_VIDEO}
-     *                      <li> {@link #FEATURE_MUSICE}
-     * @param listener      异步请求回调接口
-     */
-    public void userTimelineIds(String screen_name, long since_id, long max_id, int count, int page, boolean base_app,
-            int featureType, RequestListener listener) {
-        WeiboParameters params = buildTimeLineWithApp(since_id, max_id, count, page, base_app, featureType);
-        params.put("screen_name", screen_name);
-        requestAsync(SERVER_URL_PRIX + "/user_timeline/ids.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取指定微博的转发微博列表
-     * 
-     * @param id            需要查询的微博ID。
-     * @param since_id      若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0
-     * @param max_id        若指定此参数，则返回ID小于或等于max_id的微博，默认为0
-     * @param count         单页返回的记录条数，默认为50
-     * @param page          返回结果的页码，默认为1
-     * @param authorType    作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。可为以下几种：
-     *                      <li> {@link #AUTHOR_FILTER_ALL}
-     *                      <li> {@link #AUTHOR_FILTER_ATTENTIONS}
-     *                      <li> {@link #AUTHOR_FILTER_STRANGER}
-     * @param listener      异步请求回调接口
-     */
-    public void repostTimeline(long id, long since_id, long max_id, int count, int page, int authorType,
-            RequestListener listener) {
-        WeiboParameters params = buildTimeLineBase(since_id, max_id, count, page);
-        params.put("id", id);
-        params.put("filter_by_author", authorType);
-        requestAsync(SERVER_URL_PRIX + "/repost_timeline.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取一条原创微博的最新转发微博的ID。
-     * 
-     * @param id            需要查询的微博ID
-     * @param since_id      若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0
-     * @param max_id        若指定此参数，则返回ID小于或等于max_id的微博，默认为0
-     * @param count         单页返回的记录条数，默认为50
-     * @param page          返回结果的页码，默认为1
-     * @param authorType    作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。可为以下几种：
-     *                      <li> {@link #AUTHOR_FILTER_ALL}
-     *                      <li> {@link #AUTHOR_FILTER_ATTENTIONS}
-     *                      <li> {@link #AUTHOR_FILTER_STRANGER}
-     * @param listener      异步请求回调接口
-     */
-    public void repostTimelineIds(long id, long since_id, long max_id, int count, int page, int authorType,
-            RequestListener listener) {
-        WeiboParameters params = buildTimeLineBase(since_id, max_id, count, page);
-        params.put("id", id);
-        params.put("filter_by_author", authorType);
-        requestAsync(SERVER_URL_PRIX + "/repost_timeline/ids.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取当前用户最新转发的微博列表。
-     * 
-     * @param since_id      若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0
-     * @param max_id        若指定此参数，则返回ID小于或等于max_id的微博，默认为0
-     * @param count         单页返回的记录条数，默认为50
-     * @param page          返回结果的页码，默认为1
-     * @param listener      异步请求回调接口
-     */
-    public void repostByMe(long since_id, long max_id, int count, int page, RequestListener listener) {
-        WeiboParameters params = buildTimeLineBase(since_id, max_id, count, page);
-        requestAsync(SERVER_URL_PRIX + "/repost_by_me.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取最新的提到登录用户的微博列表，即@我的微博。
-     * 
-     * @param since_id      若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0
-     * @param max_id        若指定此参数，则返回ID小于或等于max_id的微博，默认为0
-     * @param count         单页返回的记录条数，默认为50
-     * @param page          返回结果的页码，默认为1
-     * @param authorType    作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。可为以下几种：
-     *                      <li> {@link #AUTHOR_FILTER_ALL}
-     *                      <li> {@link #AUTHOR_FILTER_ATTENTIONS}
-     *                      <li> {@link #AUTHOR_FILTER_STRANGER}
-     * @param sourceType    来源筛选类型，0：全部、1：来自微博的评论、2：来自微群的评论。可分为以下几种：
-     *                      <li> {@link #SRC_FILTER_ALL}
-     *                      <li> {@link #SRC_FILTER_WEIBO}
-     *                      <li> {@link #SRC_FILTER_WEIQUN}
-     * @param filterType    原创筛选类型，0：全部微博、1：原创的微博，默认为0。可分为以下几种：
-     *                      <li> {@link #TYPE_FILTER_ALL}
-     *                      <li> {@link #TYPE_FILTER_ORIGAL}
-     * @param trim_user     返回值中user字段开关，false：返回完整user字段、true：user字段仅返回user_id，默认为false
-     * @param listener      异步请求回调接口
-     */
-    public void mentions(long since_id, long max_id, int count, int page, int authorType, int sourceType,
-            int filterType, boolean trim_user, RequestListener listener) {
-        WeiboParameters params = buildTimeLineBase(since_id, max_id, count, page);
-        params.put("filter_by_author", authorType);
-        params.put("filter_by_source", sourceType);
-        params.put("filter_by_type", filterType);
-        params.put("trim_user", trim_user ? 1 : 0);
-        requestAsync(SERVER_URL_PRIX + "/mentions.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取@当前用户的最新微博的ID。
-     * 
-     * @param since_id      若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0
-     * @param max_id        若指定此参数，则返回ID小于或等于max_id的微博，默认为0
-     * @param count         单页返回的记录条数，默认为50
-     * @param page          返回结果的页码，默认为1
-     * @param authorType    作者筛选类型，0：全部、1：我关注的人、2：陌生人，默认为0。可为以下几种：
-     *                      <li> {@link #AUTHOR_FILTER_ALL}
-     *                      <li> {@link #AUTHOR_FILTER_ATTENTIONS}
-     *                      <li> {@link #AUTHOR_FILTER_STRANGER}
-     * @param sourceType    来源筛选类型，0：全部、1：来自微博的评论、2：来自微群的评论。可分为以下几种：
-     *                      <li> {@link #SRC_FILTER_ALL}
-     *                      <li> {@link #SRC_FILTER_WEIBO}
-     *                      <li> {@link #SRC_FILTER_WEIQUN}
-     * @param filterType    原创筛选类型，0：全部微博、1：原创的微博，默认为0。可分为以下几种：
-     *                      <li> {@link #TYPE_FILTER_ALL}
-     *                      <li> {@link #TYPE_FILTER_ORIGAL}
-     * @param listener      异步请求回调接口
-     */
-    public void mentionsIds(long since_id, long max_id, int count, int page, int authorType, int sourceType,
-            int filterType, RequestListener listener) {
-        WeiboParameters params = buildTimeLineBase(since_id, max_id, count, page);
-        params.put("filter_by_author", authorType);
-        params.put("filter_by_source", sourceType);
-        params.put("filter_by_type", filterType);
-        requestAsync(SERVER_URL_PRIX + "/mentions/ids.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取双向关注用户的最新微博。
-     * 
-     * @param since_id      若指定此参数，则返回ID比since_id大的微博（即比since_id时间晚的微博），默认为0
-     * @param max_id        若指定此参数，则返回ID小于或等于max_id的微博，默认为0
-     * @param count         单页返回的记录条数，默认为50
-     * @param page          返回结果的页码，默认为1
-     * @param base_app      是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param featureType   过滤类型ID，0：全部、1：原创、2：图片、3：视频、4：音乐，默认为0
-     *                      <li> {@link #FEATURE_ALL}
-     *                      <li> {@link #FEATURE_ORIGINAL}
-     *                      <li> {@link #FEATURE_PICTURE}
-     *                      <li> {@link #FEATURE_VIDEO}
-     *                      <li> {@link #FEATURE_MUSICE}
-     * @param trim_user     返回值中user字段开关，false：返回完整user字段、true：user字段仅返回user_id，默认为false
-     * @param listener      异步请求回调接口
-     */
-    public void bilateralTimeline(long since_id, long max_id, int count, int page, boolean base_app, int featureType,
-            boolean trim_user, RequestListener listener) {
-        WeiboParameters params = buildTimeLineWithAppTrim(since_id, max_id, count, page, base_app, trim_user,
-                featureType);
-        requestAsync(SERVER_URL_PRIX + "/bilateral_timeline.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 根据微博ID获取单条微博内容。
-     * 
-     * @param id        需要获取的微博ID
-     * @param listener  异步请求回调接口
-     */
-    public void show(long id, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("id", id);
-        requestAsync(SERVER_URL_PRIX + "/show.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 通过微博（评论、私信）ID获取其MID。
-     * 
-     * @param ids       需要查询的微博（评论、私信）ID，最多不超过20个。
-     * @param type      获取类型，1：微博、2：评论、3：私信，默认为1。可为几下几种： 
-     *                  <li> {@link #TYPE_STATUSES}
-     *                  <li> {@link #TYPE_COMMENTS}
-     *                  <li> {@link #TYPE_MESSAGE}
-     * @param listener  异步请求回调接口
-     */
-    public void queryMID(long[] ids, int type, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        if (1 == ids.length) {
-            params.put("id", ids[0]);
-        } else {
-            params.put("is_batch", 1);
-            StringBuilder strb = new StringBuilder();
-            for (long id : ids) {
-                strb.append(id).append(",");
-            }
-            strb.deleteCharAt(strb.length() - 1);
-            params.put("id", strb.toString());
-        }
-        params.put("type", type);
-        requestAsync(SERVER_URL_PRIX + "/querymid.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 通过微博（评论、私信）MID获取其ID,形如“3z4efAo4lk”的MID即为经过base62转换的MID。
-     * 
-     * @param mids      需要查询的微博（评论、私信）MID，最多不超过20个
-     * @param type      获取类型，1：微博、2：评论、3：私信，默认为1。可为几下几种： 
-     *                  <li> {@link #TYPE_STATUSES}
-     *                  <li> {@link #TYPE_COMMENTS}
-     *                  <li> {@link #TYPE_MESSAGE}
-     * @param inbox     仅对私信有效，当MID类型为私信时用此参数，0：发件箱、1：收件箱，默认为0
-     * @param isBase62  MID是否是base62编码，0：否、1：是，默认为0
-     * @param listener  异步请求回调接口
-     */
-    public void queryID(String[] mids, int type, boolean inbox, boolean isBase62, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        if (mids != null) {
-            if (1 == mids.length) {
-                params.put("mid", mids[0]);
-            } else {
-                params.put("is_batch", 1);
-                StringBuilder strb = new StringBuilder();
-                for (String mid : mids) {
-                    strb.append(mid).append(",");
-                }
-                strb.deleteCharAt(strb.length() - 1);
-                params.put("mid", strb.toString());
-            }
-        }
-
-        params.put("type", type);
-        params.put("inbox", inbox ? 1 : 0);
-        params.put("isBase62", isBase62 ? 1 : 0);
-        requestAsync(SERVER_URL_PRIX + "/queryid.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 按天返回热门微博转发榜的微博列表。
-     * 
-     * @param count     返回的记录条数，最大不超过50，默认为20
-     * @param base_app  是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param listener  异步请求回调接口
-     */
-    public void hotRepostDaily(int count, boolean base_app, RequestListener listener) {
-        WeiboParameters params = buildHotParams(count, base_app);
-        requestAsync(SERVER_URL_PRIX + "/hot/repost_daily.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 按周返回热门微博转发榜的微博列表。
-     * 
-     * @param count     返回的记录条数，最大不超过50，默认为20
-     * @param base_app  是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param listener  异步请求回调接口
-     */
-    public void hotRepostWeekly(int count, boolean base_app, RequestListener listener) {
-        WeiboParameters params = buildHotParams(count, base_app);
-        requestAsync(SERVER_URL_PRIX + "/hot/repost_weekly.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 按天返回热门微博评论榜的微博列表。
-     * 
-     * @param count     返回的记录条数，最大不超过50，默认为20
-     * @param base_app  是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param listener  异步请求回调接口
-     */
-    public void hotCommentsDaily(int count, boolean base_app, RequestListener listener) {
-        WeiboParameters params = buildHotParams(count, base_app);
-        requestAsync(SERVER_URL_PRIX + "/hot/comments_daily.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 按周返回热门微博评论榜的微博列表。
-     * 
-     * @param count     返回的记录条数，最大不超过50，默认为20
-     * @param base_app  是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param listener  异步请求回调接口
-     */
-    public void hotCommentsWeekly(int count, boolean base_app, RequestListener listener) {
-        WeiboParameters params = buildHotParams(count, base_app);
-        requestAsync(SERVER_URL_PRIX + "/hot/comments_weekly.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 批量获取指定微博的转发数评论数。
-     * 
-     * @param ids       需要获取数据的微博ID，最多不超过100个
-     * @param listener  异步请求回调接口
-     */
-    public void count(String[] ids, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        StringBuilder strb = new StringBuilder();
-        for (String id : ids) {
-            strb.append(id).append(",");
-        }
-        strb.deleteCharAt(strb.length() - 1);
-        params.put("ids", strb.toString());
-        requestAsync(SERVER_URL_PRIX + "/count.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 转发一条微博。
-     * 
-     * @param id            要转发的微博ID
-     * @param status        添加的转发文本，内容不超过140个汉字，不填则默认为“转发微博”
-     * @param commentType   是否在转发的同时发表评论，0：否、1：评论给当前微博、2：评论给原微博、3：都评论，默认为0
-     *                      <li> {@link #COMMENTS_NONE}
-     *                      <li> {@link #COMMENTS_CUR_STATUSES}
-     *                      <li> {@link #COMMENTS_RIGAL_STATUSES}
-     *                      <li> {@link #COMMENTS_BOTH}
-     * @param listener      异步请求回调接口
-     */
-    public void repost(long id, String status, int commentType, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("id", id);
-        params.put("status", status);
-        params.put("is_comment", commentType);
-        requestAsync(SERVER_URL_PRIX + "/repost.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 根据微博ID删除指定微博。
-     * 
-     * @param id        需要删除的微博ID
-     * @param listener  异步请求回调接口
-     */
-    public void destroy(long id, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("id", id);
-        requestAsync(SERVER_URL_PRIX + "/destroy.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 发布一条新微博(连续两次发布的微博不可以重复)。
-     * 
-     * @param content   要发布的微博文本内容，内容不超过140个汉字
-     * @param lat       纬度，有效范围：-90.0到+90.0，+表示北纬，默认为0.0
-     * @param lon       经度，有效范围：-180.0到+180.0，+表示东经，默认为0.0
-     * @param listener  异步请求回调接口
-     */
-    public void update(String content, String lat, String lon, RequestListener listener) {
-        WeiboParameters params = buildUpdateParams(content, lat, lon);
-        requestAsync(SERVER_URL_PRIX + "/update.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 上传图片并发布一条新微博，此方法会处理urlencode。
-     * 
-     * @param content   要发布的微博文本内容，内容不超过140个汉字
-     * @param bitmap    要上传的图片，仅支持JPEG、GIF、PNG格式，图片大小小于5M
-     * @param lat       纬度，有效范围：-90.0到+90.0，+表示北纬，默认为0.0
-     * @param lon       经度，有效范围：-180.0到+180.0，+表示东经，默认为0.0
-     * @param listener  异步请求回调接口
-     
-     */
-    public void upload(String content, Bitmap bitmap, String lat, String lon, RequestListener listener) {
-        WeiboParameters params = buildUpdateParams(content, lat, lon);
-        params.put("pic", bitmap);
-        requestAsync(SERVER_URL_PRIX + "/upload.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 指定一个图片URL地址抓取后上传并同时发布一条新微博，此方法会处理URLencode。
-     * 
-     * @param status    要发布的微博文本内容，内容不超过140个汉字
-     * @param imageUrl  图片的URL地址，必须以http开头
-     * @param pic_id    已经上传的图片pid，多个时使用英文半角逗号符分隔，最多不超过九张。 imageUrl 和 pic_id必选一个，两个参数都存在时，取picid参数的值为准
-     * @param lat       纬度，有效范围：-90.0到+90.0，+表示北纬，默认为0.0
-     * @param lon       经度，有效范围：-180.0到+180.0，+表示东经，默认为0.0
-     * @param listener  异步请求回调接口
-     */
-    public void uploadUrlText(String status, String imageUrl, String pic_id, String lat, String lon,
-            RequestListener listener) {
-        WeiboParameters params = buildUpdateParams(status, lat, lon);
-        params.put("url", imageUrl);
-        params.put("pic_id", pic_id);
-        requestAsync(SERVER_URL_PRIX + "/upload_url_text.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 获取微博官方表情的详细信息。
-     * 
-     * @param type      表情类别，表情类别，face：普通表情、ani：魔法表情、cartoon：动漫表情，默认为face。可为以下几种： 
-     *                  <li> {@link #EMOTION_TYPE_FACE}
-     *                  <li> {@link #EMOTION_TYPE_ANI}
-     *                  <li> {@link #EMOTION_TYPE_CARTOON}
-     * @param language  语言类别，cnname：、twname：，默认为cnname。 
-     *                  <li> {@link #LANGUAGE_CNNAME}
-     *                  <li> {@link #LANGUAGE_TWNAME}
-     * @param listener  异步请求回调接口
-     */
-    public void emotions(String type, String language, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("type", type);
-        params.put("language", language);
-        requestAsync(API_SERVER + "/emotions.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    // 组装TimeLines的参数
-    private WeiboParameters buildTimeLineBase(long since_id, long max_id, int count, int page) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("since_id", since_id);
-        params.put("max_id", max_id);
-        params.put("count", count);
-        params.put("page", page);
-        return params;
-    }
-
-    private WeiboParameters buildTimeLineWithApp(long since_id, long max_id, int count, int page, boolean base_app,
-            int featureType) {
-        WeiboParameters params = buildTimeLineBase(since_id, max_id, count, page);
-        params.put("feature", featureType);
-        params.put("base_app", base_app ? 1 : 0);
-        return params;
-    }
-
-    private WeiboParameters buildTimeLineWithAppTrim(long since_id, long max_id, int count, int page, boolean base_app,
-            boolean trim_user, int featureType) {
-        WeiboParameters params = buildTimeLineWithApp(since_id, max_id, count, page, base_app, featureType);
-        params.put("trim_user", trim_user ? 1 : 0);
-        return params;
-    }
-
-    private WeiboParameters buildHotParams(int count, boolean base_app) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("count", count);
-        params.put("base_app", base_app ? 1 : 0);
-        return params;
-    }
-
-    // 组装微博请求参数
-    private WeiboParameters buildUpdateParams(String content, String lat, String lon) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("status", content);
-        if (!TextUtils.isEmpty(lon)) {
-            params.put("long", lon);
-        }
-        if (!TextUtils.isEmpty(lat)) {
-            params.put("lat", lat);
-        }
-        return params;
-    }
-
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/SuggestionsAPI.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/SuggestionsAPI.java
deleted file mode 100644
index 74292ec..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/SuggestionsAPI.java
+++ /dev/null
@@ -1,138 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.legacy;
-
-import android.content.Context;
-import com.sina.weibo.sdk.auth.Oauth2AccessToken;
-import com.sina.weibo.sdk.net.RequestListener;
-import com.sina.weibo.sdk.net.WeiboParameters;
-import com.sina.weibo.sdk.openapi.AbsOpenAPI;
-
-/**
- * 该类封装了推荐接口。
- * 详情请参考<a href="http://t.cn/8F1nOVu">推荐接口</a>
- * 
- * @author SINA
- * @date 2014-03-03
- */
-public class SuggestionsAPI extends AbsOpenAPI {
-
-    /** 推荐分类 */
-    public enum USER_CATEGORY {
-        DEFAULT, ent, hk_famous, model, cooking, sports, finance, tech, singer, writer, moderator, medium, stockplayer
-    }
-
-    /** 微博精选分类 */
-    public enum STATUSES_TYPE {
-        ENTERTAINMENT, FUNNY, BEAUTY, VIDEO, CONSTELLATION, LOVELY, FASHION, CARS, CATE, MUSIC
-    }
-
-    public SuggestionsAPI(Context context, String appKey, Oauth2AccessToken accessToken) {
-        super(context, appKey, accessToken);
-    }
-
-    private static final String SERVER_URL_PRIX = API_SERVER + "/suggestions";
-
-    /**
-     * 返回系统推荐的热门用户列表。
-     * 
-     * @param category  推荐分类，返回某一类别的推荐用户，默认为default，如果不在以下分类中，返回空列表。
-     *                  default：人气关注     ent：影视名星        hk_famous：港台名人   model：模特
-     *                  cooking：美食&健康   sports：体育名人  finance：商界名人       tech：IT互联网
-     *                  singer：歌手               writer：作家         moderator：主持人       medium：媒体总编 
-     *                  stockplayer：炒股高手
-     * @param listener  异步请求回调接口
-     */
-    public void usersHot(USER_CATEGORY category, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("category", category.name());
-        requestAsync(SERVER_URL_PRIX + "/users/hot.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取用户可能感兴趣的人。
-     * 
-     * @param count     单页返回的记录条数，默认为10
-     * @param page      返回结果的页码，默认为1
-     * @param listener  异步请求回调接口
-     */
-    public void mayInterested(int count, int page, RequestListener listener) {
-        WeiboParameters params = builderCountPage(count, page);
-        requestAsync(SERVER_URL_PRIX + "/users/may_interested.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 根据一段微博正文推荐相关微博用户。
-     * 
-     * @param content   微博正文内容
-     * @param num       返回结果数目，默认为10
-     * @param listener  异步请求回调接口
-     */
-    public void byStatus(String content, int num, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("content", content);
-        params.put("num", num);
-        requestAsync(SERVER_URL_PRIX + "/users/may_interested.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取微博精选推荐。
-     * 
-     * @param type      微博精选分类，1：娱乐、2：搞笑、3：美女、4：视频、5：星座、6：各种萌、7：时尚、8：名车、9：美食、10：音乐
-     * @param is_pic    是否返回图片精选微博，false：全部、true：图片微博
-     * @param count     单页返回的记录条数，默认为20
-     * @param page      返回结果的页码，默认为1
-     * @param listener  异步请求回调接口
-     */
-    public void statusesHot(STATUSES_TYPE type, boolean is_pic, int count, int page, RequestListener listener) {
-        WeiboParameters params = builderCountPage(count, page);
-        params.put("type", type.ordinal() + 1);
-        params.put("is_pic", is_pic ? 1 : 0);
-        requestAsync(SERVER_URL_PRIX + "/statuses/hot.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 返回系统推荐的热门收藏。
-     * 
-     * @param count     每页返回结果数，默认20
-     * @param page      返回页码，默认1
-     * @param listener  异步请求回调接口
-     */
-    public void favoritesHot(int count, int page, RequestListener listener) {
-        WeiboParameters params = builderCountPage(count, page);
-        requestAsync(SERVER_URL_PRIX + "/favorites/hot.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 把某人标识为不感兴趣的人。
-     * 
-     * @param uid       不感兴趣的用户的UID
-     * @param listener  异步请求回调接口
-     */
-    public void notInterested(long uid, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("uid", uid);
-        requestAsync(SERVER_URL_PRIX + "/users/not_interested.json", params, HTTPMETHOD_POST, listener);
-    }
-    
-    private WeiboParameters builderCountPage(int count, int page) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("count", count);
-        params.put("page", page);
-        return params;
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/TagsAPI.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/TagsAPI.java
deleted file mode 100644
index 83be1b6..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/TagsAPI.java
+++ /dev/null
@@ -1,129 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
- 
-package com.sina.weibo.sdk.openapi.legacy;
-
-import android.content.Context;
-import com.sina.weibo.sdk.auth.Oauth2AccessToken;
-import com.sina.weibo.sdk.net.RequestListener;
-import com.sina.weibo.sdk.net.WeiboParameters;
-import com.sina.weibo.sdk.openapi.AbsOpenAPI;
-
-/**
- * 该类封装了标签接口。
- * 详情请参考<a href="http://t.cn/8F1nHUA">标签接口</a>
- * 
- * @author SINA
- * @date 2014-03-03
- */
-public class TagsAPI extends AbsOpenAPI {
-    public TagsAPI(Context context, String appKey, Oauth2AccessToken accessToken) {
-        super(context, appKey, accessToken);
-    }
-
-    private static final String SERVER_URL_PRIX = API_SERVER + "/tags";
-
-    /**
-     * 返回指定用户的标签列表。
-     * 
-     * @param uid       要获取的标签列表所属的用户ID
-     * @param count     单页返回的记录条数，默认为20
-     * @param page      返回结果的页码，默认为1
-     * @param listener  异步请求回调接口
-     */
-    public void tags(long uid, int count, int page, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("uid", uid);
-        params.put("count", count);
-        params.put("page", page);
-        requestAsync(SERVER_URL_PRIX + ".json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 批量获取用户的标签列表。
-     * 
-     * @param uids      要获取标签的用户ID。最大20
-     * @param listener  异步请求回调接口
-     */
-    public void tagsBatch(String[] uids, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        StringBuilder strb = new StringBuilder();
-        for (String uid : uids) {
-            strb.append(uid).append(",");
-        }
-        strb.deleteCharAt(strb.length() - 1);
-        params.put("uids", strb.toString());
-        requestAsync(SERVER_URL_PRIX + "/tags_batch.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 获取系统推荐的标签列表。
-     * 
-     * @param count     返回记录数，默认10，最大10
-     * @param listener  异步请求回调接口
-     */
-    public void suggestions(int count, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("count", count);
-        requestAsync(SERVER_URL_PRIX + "/suggestions.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 为当前登录用户添加新的用户标签(无论调用该接口次数多少，每个用户最多可以创建10个标签)。
-     * 
-     * @param tags      要创建的一组标签，每个标签的长度不可超过7个汉字，14个半角字符
-     * @param listener  异步请求回调接口
-     */
-    public void create(String[] tags, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        StringBuilder strb = new StringBuilder();
-        for (String tag : tags) {
-            strb.append(tag).append(",");
-        }
-        strb.deleteCharAt(strb.length() - 1);
-        params.put("tags", strb.toString());
-        requestAsync(SERVER_URL_PRIX + "/create.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 删除一个用户标签。
-     * 
-     * @param tag_id    要删除的标签ID
-     * @param listener  异步请求回调接口
-     */
-    public void destroy(long tag_id, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("tag_id", tag_id);
-        requestAsync(SERVER_URL_PRIX + "/destroy.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 批量删除一组标签。
-     * 
-     * @param ids       要删除的一组标签ID，一次最多提交10个ID
-     * @param listener  异步请求回调接口
-     */
-    public void destroyBatch(String[] ids, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        StringBuilder strb = new StringBuilder();
-        for (String id : ids) {
-            strb.append(id).append(",");
-        }
-        strb.deleteCharAt(strb.length() - 1);
-        params.put("ids", strb.toString());
-        requestAsync(SERVER_URL_PRIX + "/destroy_batch.json", params, HTTPMETHOD_POST, listener);
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/TrendsAPI.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/TrendsAPI.java
deleted file mode 100644
index 5544e28..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/legacy/TrendsAPI.java
+++ /dev/null
@@ -1,126 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
- 
-package com.sina.weibo.sdk.openapi.legacy;
-
-import android.content.Context;
-import com.sina.weibo.sdk.auth.Oauth2AccessToken;
-import com.sina.weibo.sdk.net.RequestListener;
-import com.sina.weibo.sdk.net.WeiboParameters;
-import com.sina.weibo.sdk.openapi.AbsOpenAPI;
-
-/**
- * 该类封装了话题接口。
- * 详情请参考<a href="http://t.cn/8F1nE9v">话题接口</a>
- * 
- * @author SINA
- * @date 2014-03-03
- */
-public class TrendsAPI extends AbsOpenAPI {
-    public TrendsAPI(Context context, String appKey, Oauth2AccessToken accessToken) {
-        super(context, appKey, accessToken);
-    }
-
-    private static final String SERVER_URL_PRIX = API_SERVER + "/trends";
-
-    /**
-     * 获取某人的话题列表。
-     * 
-     * @param uid       需要获取话题的用户的UID
-     * @param count     单页返回的记录条数，默认为10
-     * @param page      返回结果的页码，默认为1
-     * @param listener  异步请求回调接口
-     */
-    public void trends(long uid, int count, int page, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("uid", uid);
-        params.put("count", count);
-        params.put("page", page);
-        requestAsync(SERVER_URL_PRIX + ".json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 判断当前用户是否关注某话题。
-     * 
-     * @param trend_name    话题关键字
-     * @param listener      异步请求回调接口
-     */
-    public void isFollow(String trend_name, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("trend_name", trend_name);
-        requestAsync(SERVER_URL_PRIX + "/is_follow.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 返回最近一小时内的热门话题。
-     * 
-     * @param base_app  是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param listener  异步请求回调接口
-     */
-    public void hourly(boolean base_app, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("base_app", base_app ? 1 : 0);
-        requestAsync(SERVER_URL_PRIX + "/hourly.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 返回最近一天内的热门话题。
-     * 
-     * @param base_app  是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param listener  异步请求回调接口
-     */
-    public void daily(boolean base_app, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("base_app", base_app ? 1 : 0);
-        requestAsync(SERVER_URL_PRIX + "/daily.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 返回最近一周内的热门话题。
-     * 
-     * @param base_app  是否只获取当前应用的数据。false为否（所有数据），true为是（仅当前应用），默认为false
-     * @param listener  异步请求回调接口
-     */
-    public void weekly(boolean base_app, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("base_app", base_app ? 1 : 0);
-        requestAsync(SERVER_URL_PRIX + "/weekly.json", params, HTTPMETHOD_GET, listener);
-    }
-
-    /**
-     * 关注某话题。
-     * 
-     * @param trend_name    要关注的话题关键词
-     * @param listener      异步请求回调接口
-     */
-    public void follow(String trend_name, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("trend_name", trend_name);
-        requestAsync(SERVER_URL_PRIX + "/follow.json", params, HTTPMETHOD_POST, listener);
-    }
-
-    /**
-     * 取消对某话题的关注。
-     * 
-     * @param trend_id  要取消关注的话题ID
-     * @param listener  异步请求回调接口
-     */
-    public void destroy(long trend_id, RequestListener listener) {
-        WeiboParameters params = new WeiboParameters(mAppKey);
-        params.put("trend_id", trend_id);
-        requestAsync(SERVER_URL_PRIX + "/destroy.json", params, HTTPMETHOD_POST, listener);
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/AbsDataObject.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/AbsDataObject.java
deleted file mode 100644
index 0fcc37d..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/AbsDataObject.java
+++ /dev/null
@@ -1,56 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.models;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.text.TextUtils;
-
-/**
- * 该类用于解析Object类型数据。
- * 
- * @author SINA
- * @date 2014-03-03
- */
-public class AbsDataObject implements IParseable {
-
-    @Override
-    public Object parse(String parseString) {
-        if (TextUtils.isEmpty(parseString)) {
-            return null;
-        }
-        
-        try {
-            JSONObject object = new JSONObject(parseString);
-            return parse(object);
-        } catch (JSONException e) {
-            e.printStackTrace();
-        }
-        
-        return null;
-    }
-
-    @Override
-    public Object parse(JSONObject jsonObject) {
-        if (null == jsonObject) {
-            return null;
-        }
-        
-        return null;
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Comment.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Comment.java
deleted file mode 100644
index 44f0b08..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Comment.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.models;
-
-import org.json.JSONObject;
-
-/**
- * 评论结构体。
- * 
- * @author SINA
- * @since 2013-11-24
- */
-public class Comment {
-
-    /** 评论创建时间 */
-    public String created_at;
-    /** 评论的 ID */
-    public String id;
-    /** 评论的内容 */
-    public String text;
-    /** 评论的来源 */
-    public String source;
-    /** 评论作者的用户信息字段 */
-    public User user;
-    /** 评论的 MID */
-    public String mid;
-    /** 字符串型的评论 ID */
-    public String idstr;
-    /** 评论的微博信息字段 */
-    public Status status;
-    /** 评论来源评论，当本评论属于对另一评论的回复时返回此字段 */
-    public Comment reply_comment;
-    
-    public static Comment parse(JSONObject jsonObject) {
-        if (null == jsonObject) {
-            return null;
-        }
-
-        Comment comment = new Comment();
-        comment.created_at    = jsonObject.optString("created_at");
-        comment.id            = jsonObject.optString("id");
-        comment.text          = jsonObject.optString("text");
-        comment.source        = jsonObject.optString("source");
-        comment.user          = User.parse(jsonObject.optJSONObject("user"));
-        comment.mid           = jsonObject.optString("mid");
-        comment.idstr         = jsonObject.optString("idstr");
-        comment.status        = Status.parse(jsonObject.optJSONObject("status"));            
-        comment.reply_comment = Comment.parse(jsonObject.optJSONObject("reply_comment"));
-        
-        return comment;
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/CommentList.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/CommentList.java
deleted file mode 100644
index 0948ff6..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/CommentList.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.models;
-
-import java.util.ArrayList;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.text.TextUtils;
-
-/**
- * 评论列表结构体。
- * 
- * @author SINA
- * @since 2013-11-24
- */
-public class CommentList {
-
-    /** 微博列表 */
-    public ArrayList<Comment> commentList;
-    public String previous_cursor;
-    public String next_cursor;
-    public int total_number;
-    
-    public static CommentList parse(String jsonString) {
-        if (TextUtils.isEmpty(jsonString)) {
-            return null;
-        }
-        
-        CommentList comments = new CommentList();
-        try {
-            JSONObject jsonObject = new JSONObject(jsonString);
-            comments.previous_cursor = jsonObject.optString("previous_cursor", "0");
-            comments.next_cursor     = jsonObject.optString("next_cursor", "0");
-            comments.total_number    = jsonObject.optInt("total_number", 0);
-            
-            JSONArray jsonArray      = jsonObject.optJSONArray("comments");
-            if (jsonArray != null && jsonArray.length() > 0) {
-                int length = jsonArray.length();
-                comments.commentList = new ArrayList<Comment>(length);
-                for (int ix = 0; ix < length; ix++) {
-                    comments.commentList.add(Comment.parse(jsonArray.optJSONObject(ix)));
-                }
-            }
-        } catch (JSONException e) {
-            e.printStackTrace();
-        }
-        
-        return comments;
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Coordinate.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Coordinate.java
deleted file mode 100644
index d31de64..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Coordinate.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.models;
-
-import org.json.JSONObject;
-
-/**
- * 该类用于解析JSONObject类型数据。
- * 
- * @author SINA
- * @date 2014-03-03
- */
-public class Coordinate {
-    public Double Longtitude;
-    public Double Latitude;
-
-    public static Coordinate parse(JSONObject jsonObject) {
-        if (jsonObject == null) {
-            return null;
-        }
-
-        Coordinate coordinate = new Coordinate();
-        coordinate.Longtitude = jsonObject.optDouble("longitude");
-        coordinate.Latitude   = jsonObject.optDouble("latitude");
-
-        return coordinate;
-    }
-}
\ No newline at end of file
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/ErrorInfo.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/ErrorInfo.java
deleted file mode 100644
index d104d65..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/ErrorInfo.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.models;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.text.TextUtils;
-
-/**
- * 错误信息结构体。
- * 
- * @author SINA
- * @since 2013-11-24
- */
-public class ErrorInfo {
-    public String error;
-    public String error_code;
-    public String request;
-
-    public static ErrorInfo parse(String jsonString) {
-        if (TextUtils.isEmpty(jsonString)) {
-            return null;
-        }
-
-        ErrorInfo errorInfo = new ErrorInfo();
-        try {
-            JSONObject jsonObject = new JSONObject(jsonString);
-            errorInfo.error      = jsonObject.optString("error");
-            errorInfo.error_code = jsonObject.optString("error_code");
-            errorInfo.request    = jsonObject.optString("request");
-        } catch (JSONException e) {
-            e.printStackTrace();
-        }
-        return errorInfo;
-    }
-    
-    /* (non-Javadoc)
-     * @see java.lang.Object#toString()
-     */
-    @Override
-    public String toString() {
-        return "error: " + error + 
-               ", error_code: " + error_code + 
-               ", request: " + request;
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Favorite.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Favorite.java
deleted file mode 100644
index 0d4e6f1..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Favorite.java
+++ /dev/null
@@ -1,71 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.models;
-
-import java.util.ArrayList;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-/**
- * 我喜欢的微博信息结构体。
- * 
- * @author SINA
- * @since 2013-11-24
- */
-public class Favorite {
-
-    /** 我喜欢的微博信息 */
-    public Status status;
-    /** 我喜欢的微博的 Tag 信息 */
-    public ArrayList<Tag> tags;
-    /** 创建我喜欢的微博信息的时间 */
-    public String favorited_time;
-    
-    public static Favorite parse(String jsonString) {
-        try {
-            JSONObject object = new JSONObject(jsonString);
-            return Favorite.parse(object);
-        } catch (JSONException e) {
-            e.printStackTrace();
-        }
-        
-        return null;
-    }
-    
-    public static Favorite parse(JSONObject jsonObject) {
-        if (null == jsonObject) {
-            return null;
-        }
-
-        Favorite favorite = new Favorite();
-        favorite.status         = Status.parse(jsonObject.optJSONObject("status"));
-        favorite.favorited_time = jsonObject.optString("favorited_time");
-            
-        JSONArray jsonArray    = jsonObject.optJSONArray("tags");
-        if (jsonArray != null && jsonArray.length() > 0) {
-            int length = jsonArray.length();
-            favorite.tags = new ArrayList<Tag>(length);
-            for (int ix = 0; ix < length; ix++) {
-                favorite.tags.add(Tag.parse(jsonArray.optJSONObject(ix)));
-            }
-        }
-
-        return favorite;
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/FavoriteList.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/FavoriteList.java
deleted file mode 100644
index eadbb66..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/FavoriteList.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.models;
-
-import java.util.ArrayList;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.text.TextUtils;
-
-/**
- * 我喜欢的微博信息列表结构体。
- * 
- * @author SINA
- * @since 2013-11-24
- */
-public class FavoriteList {
-
-    /** 微博列表 */
-    public ArrayList<Favorite> favoriteList;
-    public int total_number;
-    
-    public static FavoriteList parse(String jsonString) {
-        if (TextUtils.isEmpty(jsonString)) {
-            return null;
-        }
-        
-        FavoriteList favorites = new FavoriteList();
-        try {
-            JSONObject jsonObject  = new JSONObject(jsonString);
-            favorites.total_number = jsonObject.optInt("total_number", 0);
-            
-            JSONArray jsonArray    = jsonObject.optJSONArray("favorites");
-            if (jsonArray != null && jsonArray.length() > 0) {
-                int length = jsonArray.length();
-                favorites.favoriteList = new ArrayList<Favorite>(length);
-                for (int ix = 0; ix < length; ix++) {
-                    favorites.favoriteList.add(Favorite.parse(jsonArray.optJSONObject(ix)));
-                }
-            }
-        } catch (JSONException e) {
-            e.printStackTrace();
-        }
-        
-        return favorites;
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Geo.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Geo.java
deleted file mode 100644
index d46db1f..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Geo.java
+++ /dev/null
@@ -1,85 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.models;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.text.TextUtils;
-
-/**
- * 地理信息结构体。
- * 
- * @author SINA
- * @since 2013-11-24
- */
-public class Geo {
-    
-    /** 经度坐标 */
-    public String longitude;
-    /** 维度坐标 */
-    public String latitude;
-    /** 所在城市的城市代码 */
-    public String city;
-    /** 所在省份的省份代码 */
-    public String province;
-    /** 所在城市的城市名称 */
-    public String city_name;
-    /** 所在省份的省份名称 */
-    public String province_name;
-    /** 所在的实际地址，可以为空 */
-    public String address;
-    /** 地址的汉语拼音，不是所有情况都会返回该字段 */
-    public String pinyin;
-    /** 更多信息，不是所有情况都会返回该字段 */
-    public String more;
-    
-    public static Geo parse(String jsonString) {
-        if (TextUtils.isEmpty(jsonString)) {
-            return null;
-        }
-
-        Geo geo = null;
-        try {
-            JSONObject jsonObject = new JSONObject(jsonString);
-            geo = parse(jsonObject);
-        } catch (JSONException e) {
-            e.printStackTrace();
-        }
-
-        return geo;
-    }
-
-    public static Geo parse(JSONObject jsonObject) {
-        if (null == jsonObject) {
-            return null;
-        }
-        
-        Geo geo = new Geo();
-        geo.longitude       = jsonObject.optString("longitude");
-        geo.latitude        = jsonObject.optString("latitude");
-        geo.city            = jsonObject.optString("city");
-        geo.province        = jsonObject.optString("province");
-        geo.city_name       = jsonObject.optString("city_name");
-        geo.province_name   = jsonObject.optString("province_name");
-        geo.address         = jsonObject.optString("address");
-        geo.pinyin          = jsonObject.optString("pinyin");
-        geo.more            = jsonObject.optString("more");
-        
-        return geo;
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/GeoList.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/GeoList.java
deleted file mode 100644
index 55059b4..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/GeoList.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.models;
-
-import java.util.ArrayList;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.text.TextUtils;
-
-/**
- * 地理信息结构体。
- * 
- * @author SINA
- * @since 2013-11-24
- */
-public class GeoList {
-    public ArrayList<Geo> Geos;
-
-    public static GeoList parse(String jsonString) {
-        if (TextUtils.isEmpty(jsonString)) {
-            return null;
-        }
-
-        GeoList geoList = new GeoList();
-        try {
-            JSONObject jsonObject = new JSONObject(jsonString);
-
-            JSONArray jsonArray = jsonObject.optJSONArray("geos");
-            if (jsonArray != null && jsonArray.length() > 0) {
-                int length = jsonArray.length();
-                geoList.Geos = new ArrayList<Geo>(length);
-                for (int ix = 0; ix < length; ix++) {
-                    geoList.Geos.add(Geo.parse(jsonArray.optJSONObject(ix)));
-                }
-            }
-
-        } catch (JSONException e) {
-            e.printStackTrace();
-        }
-
-        return geoList;
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Group.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Group.java
deleted file mode 100644
index 1597ddf..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Group.java
+++ /dev/null
@@ -1,87 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.models;
-
-import java.util.ArrayList;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
-
-/**
- * 好友分组信息。
- * 
- * @author SINA
- * @date 2013-11-27
- */
-public class Group {
-    public static final String GROUP_ID_ALL = "1";
-
-    /** 微博分组ID **/
-    public String id;
-    /** 微博分组字符串ID **/
-    public String idStr;
-    /** 分组名称 **/
-    public String name;
-    /** 类型（不公开分组等） **/
-    public String mode;
-    /** 是否公开 **/
-    public int visible;
-    /** 喜欢数 **/
-    public int like_count;
-    /** 分组成员数 **/
-    public int member_count;
-    /** 分组描述 **/
-    public String description;
-    /** 分组的Tag 信息 **/
-    public ArrayList<Tag> tags;
-    /** 头像信息 **/
-    public String profile_image_url;
-    /** 分组所属用户信息 **/
-    public User user;
-    /** 分组创建时间 **/
-    public String createAtTime;
-
-    public static Group parse(JSONObject jsonObject) {
-        if (null == jsonObject) {
-            return null;
-        }
-
-        Group group = new Group();
-        group.user = User.parse(jsonObject.optJSONObject("user"));
-        group.id                = jsonObject.optString("id");
-        group.idStr             = jsonObject.optString("idstr");
-        group.name              = jsonObject.optString("name");
-        group.mode              = jsonObject.optString("mode");
-        group.visible           = jsonObject.optInt("visible");
-        group.like_count        = jsonObject.optInt("like_count");
-        group.member_count      = jsonObject.optInt("member_count");
-        group.description       = jsonObject.optString("description");
-        group.profile_image_url = jsonObject.optString("profile_image_url");
-        group.createAtTime      = jsonObject.optString("create_time", "");
-
-        JSONArray jsonArray = jsonObject.optJSONArray("tags");
-        if (jsonArray != null && jsonObject.length() > 0) {
-            int length = jsonArray.length();
-            group.tags = new ArrayList<Tag>(length);
-            for (int ix = 0; ix < length; ix++) {
-                group.tags.add(Tag.parse(jsonArray.optJSONObject(ix)));
-            }
-        }
-
-        return group;
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/GroupList.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/GroupList.java
deleted file mode 100644
index ad8a8d1..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/GroupList.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.models;
-
-import java.util.ArrayList;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.text.TextUtils;
-
-/**
- * 好友分组列表。
- * 
- * @author SINA
- * @since 2013-11-27
- */
-public class GroupList {
-    /** 分组列表 **/
-    public ArrayList<Group> groupList;
-    /** 分组数目 **/
-    public int total_number;
-
-    public static GroupList parse(String jsonString) {
-        if (TextUtils.isEmpty(jsonString)) {
-            return null;
-        }
-
-        GroupList groupList = new GroupList();
-        try {
-            JSONObject jsonObject  = new JSONObject(jsonString);
-            groupList.total_number = jsonObject.optInt("total_number");
-
-            JSONArray jsonArray = jsonObject.optJSONArray("lists");
-            if (jsonArray != null && jsonArray.length() > 0) {
-                int length = jsonArray.length();
-                groupList.groupList = new ArrayList<Group>(length);
-                for (int ix = 0; ix < length; ix++) {
-                    groupList.groupList.add(Group.parse(jsonArray.optJSONObject(ix)));
-                }
-            }
-        } catch (JSONException e) {
-            e.printStackTrace();
-        }
-
-        return groupList;
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/GroupTag.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/GroupTag.java
deleted file mode 100644
index 7bb02d7..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/GroupTag.java
+++ /dev/null
@@ -1,41 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.models;
-
-import org.json.JSONObject;
-
-/**
- * 分组标签结构体。
- * 
- * @author SINA
- * @since 2013-11-24
- */
-public class GroupTag {
-    /** 分组的组号 */
-    public String tag;
-
-    public static GroupTag parse(JSONObject jsonObject) {
-        if (jsonObject == null) {
-            return null;
-        }
-
-        GroupTag tag = new GroupTag();
-        // TODO: 结构不明？
-        //tag.tag = jsonObject.optString("", "");
-        return tag;
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/IParseable.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/IParseable.java
deleted file mode 100644
index ca94c5f..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/IParseable.java
+++ /dev/null
@@ -1,24 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.models;
-
-import org.json.JSONObject;
-
-public interface IParseable {
-    public Object parse(String parseString);
-    public Object parse(JSONObject jsonObject);
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/MusicInfo.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/MusicInfo.java
deleted file mode 100644
index 64ae6d4..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/MusicInfo.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.models;
-
-import org.json.JSONObject;
-
-/**
- * 音乐结构体。
- * 
- * @author SINA
- * @since 2013-11-22
- */
-public class MusicInfo {
-    
-    //public boolean result; 
-    public String author;
-    public String title;
-    public String album;
-    public String playUrl;
-    
-    public static MusicInfo parser(String jsonString) {
-        return null;
-    }
-    
-    public static MusicInfo parse(JSONObject jsonObject) {
-        if (null == jsonObject) {
-            return null;
-        }
-        
-        MusicInfo music = new MusicInfo();
-        music.author   = jsonObject.optString("author");
-        music.title    = jsonObject.optString("title");
-        music.album    = jsonObject.optString("album");
-        music.playUrl  = jsonObject.optString("playUrl");
-        
-        return music;
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/OffsetGeo.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/OffsetGeo.java
deleted file mode 100644
index 7f20ec5..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/OffsetGeo.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.models;
-
-import java.util.ArrayList;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.text.TextUtils;
-
-/**
- * 地理位置纠正信息.
- * 
- * @author SINA
- * @since 2013-12-4
- */
-public class OffsetGeo {
-
-    public ArrayList<Coordinate> Geos;
-
-    public static OffsetGeo parse(String jsonString) {
-        if (TextUtils.isEmpty(jsonString)) {
-            return null;
-        }
-
-        OffsetGeo offsetGeo = new OffsetGeo();
-        try {
-            JSONObject jsonObject = new JSONObject(jsonString);
-
-            JSONArray jsonArray = jsonObject.optJSONArray("geos");
-            if (jsonArray != null && jsonArray.length() > 0) {
-                int length = jsonArray.length();
-                offsetGeo.Geos = new ArrayList<Coordinate>(length);
-                for (int ix = 0; ix < length; ix++) {
-                    offsetGeo.Geos.add(Coordinate.parse(jsonArray.optJSONObject(ix)));
-                }
-            }
-
-        } catch (JSONException e) {
-            e.printStackTrace();
-        }
-
-        return offsetGeo;
-    }
-}
-
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Poi.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Poi.java
deleted file mode 100644
index 9590ec7..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Poi.java
+++ /dev/null
@@ -1,124 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.models;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.text.TextUtils;
-
-/**
- * 位置信息结构体。
- * 
- * @author SINA
- * @since 2013-11-24
- */
-public class Poi {
-
-    /** Poi id */
-    public String poiid;
-    /** 名称 */
-    public String title;
-    /** 地址 **/
-    public String address;
-    /** 经度 **/
-    public String lon;
-    /** 纬度 **/
-    public String lat;
-    /** 分类 **/
-    public String category;
-    /** 城市 **/
-    public String city;
-    /** 省 **/
-    public String province;
-    /** 国家 **/
-    public String country;
-    /** 链接 **/
-    public String url;
-    /** 电话**/
-    public String phone;
-    /** 邮政编码 **/
-    public String postcode;
-    /** 微博ID **/
-    public String weibo_id;
-    /** 分类码 **/
-    public String categorys;
-    /** 分类名称 **/
-    public String category_name;
-    /** 图标 **/
-    public String icon;
-    /** 签到数 **/
-    public String checkin_num;
-    /** 签到用户数 **/
-    public String checkin_user_num;
-    /** tip数 **/
-    public String tip_num;
-    /** 照片数 **/
-    public String photo_num;
-    /** todo数量 **/
-    public String todo_num;
-    /** 距离 **/
-    public String distance;
-
-    public static Poi parse(String jsonString) {
-        if (TextUtils.isEmpty(jsonString)) {
-            return null;
-        }
-
-        Poi poi = null;
-        try {
-            JSONObject jsonObject = new JSONObject(jsonString);
-            poi = parse(jsonObject);
-        } catch (JSONException e) {
-            e.printStackTrace();
-        }
-
-        return poi;
-    }
-
-    public static Poi parse(JSONObject jsonObject) {
-        if (null == jsonObject) {
-            return null;
-        }
-        
-        Poi poi = new Poi();
-        poi.poiid               = jsonObject.optString("poiid");
-        poi.title               = jsonObject.optString("title");
-        poi.address             = jsonObject.optString("address");
-        poi.lon                 = jsonObject.optString("lon");
-        poi.lat                 = jsonObject.optString("lat");
-        poi.category            = jsonObject.optString("category");
-        poi.city                = jsonObject.optString("city");
-        poi.province            = jsonObject.optString("province");
-        poi.country             = jsonObject.optString("country");
-        poi.url                 = jsonObject.optString("url");
-        poi.phone               = jsonObject.optString("phone");
-        poi.postcode            = jsonObject.optString("postcode");
-        poi.weibo_id            = jsonObject.optString("weibo_id");
-        poi.categorys           = jsonObject.optString("categorys");
-        poi.category_name       = jsonObject.optString("category_name");
-        poi.icon                = jsonObject.optString("icon");
-        poi.checkin_num         = jsonObject.optString("checkin_num");
-        poi.checkin_user_num    = jsonObject.optString("checkin_user_num");
-        poi.tip_num             = jsonObject.optString("tip_num");
-        poi.photo_num           = jsonObject.optString("photo_num");
-        poi.todo_num            = jsonObject.optString("todo_num");
-        poi.distance            = jsonObject.optString("distance");
-        
-        return poi;
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/PoiList.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/PoiList.java
deleted file mode 100644
index 53fbd80..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/PoiList.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.models;
-
-import java.util.ArrayList;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.text.TextUtils;
-
-/**
- * 地理列表结构体。
- * 
- * @author SINA
- * @since 2013-11-24
- */
-public class PoiList {
-    public ArrayList<Poi> pois;
-    public String totalNumber;
-
-    public static PoiList parse(String jsonString) {
-        if (TextUtils.isEmpty(jsonString)) {
-            return null;
-        }
-
-        PoiList poiList = new PoiList();
-        try {
-            JSONObject jsonObject = new JSONObject(jsonString);
-
-            poiList.totalNumber = jsonObject.optString("total_number");
-            JSONArray jsonArray = jsonObject.optJSONArray("geos");
-            if (jsonArray != null && jsonArray.length() > 0) {
-                int length = jsonArray.length();
-                poiList.pois = new ArrayList<Poi>(length);
-                for (int ix = 0; ix < length; ix++) {
-                    poiList.pois.add(Poi.parse(jsonArray.optJSONObject(ix)));
-                }
-            }
-
-        } catch (JSONException e) {
-            e.printStackTrace();
-        }
-        return poiList;
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Privacy.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Privacy.java
deleted file mode 100644
index 5a8783a..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Privacy.java
+++ /dev/null
@@ -1,21 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.models;
-
-public class Privacy {
-
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Remind.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Remind.java
deleted file mode 100644
index 0325bba..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Remind.java
+++ /dev/null
@@ -1,21 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.models;
-
-public class Remind {
-
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Status.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Status.java
deleted file mode 100644
index 21a5598..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Status.java
+++ /dev/null
@@ -1,146 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.models;
-
-import java.util.ArrayList;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-/**
- * 微博结构体。
- * 
- * @author SINA
- * @since 2013-11-22
- */
-public class Status {
-    
-    /** 微博创建时间 */
-    public String created_at;
-    /** 微博ID */
-    public String id;
-    /** 微博MID */
-    public String mid;
-    /** 字符串型的微博ID */
-    public String idstr;
-    /** 微博信息内容 */
-    public String text;
-    /** 微博来源 */
-    public String source;
-    /** 是否已收藏，true：是，false：否  */
-    public boolean favorited;
-    /** 是否被截断，true：是，false：否 */
-    public boolean truncated;
-    /**（暂未支持）回复ID */
-    public String in_reply_to_status_id;
-    /**（暂未支持）回复人UID */
-    public String in_reply_to_user_id;
-    /**（暂未支持）回复人昵称 */
-    public String in_reply_to_screen_name;
-    /** 缩略图片地址（小图），没有时不返回此字段 */
-    public String thumbnail_pic;
-    /** 中等尺寸图片地址（中图），没有时不返回此字段 */
-    public String bmiddle_pic;
-    /** 原始图片地址（原图），没有时不返回此字段 */
-    public String original_pic;
-    /** 地理信息字段 */
-    public Geo geo;
-    /** 微博作者的用户信息字段 */
-    public User user;
-    /** 被转发的原微博信息字段，当该微博为转发微博时返回 */
-    public Status retweeted_status;
-    /** 转发数 */
-    public int reposts_count;
-    /** 评论数 */
-    public int comments_count;
-    /** 表态数 */
-    public int attitudes_count;
-    /** 暂未支持 */
-    public int mlevel;
-    /**
-     * 微博的可见性及指定可见分组信息。该 object 中 type 取值，
-     * 0：普通微博，1：私密微博，3：指定分组微博，4：密友微博；
-     * list_id为分组的组号
-     */
-    public Visible visible;
-    /** 微博配图地址。多图时返回多图链接。无配图返回"[]" */
-    public ArrayList<String> pic_urls;
-    /** 微博流内的推广微博ID */
-    //public Ad ad;
-    
-    public static Status parse(String jsonString) {
-        try {
-            JSONObject jsonObject = new JSONObject(jsonString);
-            return Status.parse(jsonObject);
-        } catch (JSONException e) {
-            e.printStackTrace();
-        }
-        
-        return null;
-    }
-    
-    public static Status parse(JSONObject jsonObject) {
-        if (null == jsonObject) {
-            return null;
-        }
-        
-        Status status = new Status();
-        status.created_at       = jsonObject.optString("created_at");
-        status.id               = jsonObject.optString("id");
-        status.mid              = jsonObject.optString("mid");
-        status.idstr            = jsonObject.optString("idstr");
-        status.text             = jsonObject.optString("text");
-        status.source           = jsonObject.optString("source");
-        status.favorited        = jsonObject.optBoolean("favorited", false);
-        status.truncated        = jsonObject.optBoolean("truncated", false);
-        
-        // Have NOT supported
-        status.in_reply_to_status_id   = jsonObject.optString("in_reply_to_status_id");
-        status.in_reply_to_user_id     = jsonObject.optString("in_reply_to_user_id");
-        status.in_reply_to_screen_name = jsonObject.optString("in_reply_to_screen_name");
-        
-        status.thumbnail_pic    = jsonObject.optString("thumbnail_pic");
-        status.bmiddle_pic      = jsonObject.optString("bmiddle_pic");
-        status.original_pic     = jsonObject.optString("original_pic");
-        status.geo              = Geo.parse(jsonObject.optJSONObject("geo"));
-        status.user             = User.parse(jsonObject.optJSONObject("user"));
-        status.retweeted_status = Status.parse(jsonObject.optJSONObject("retweeted_status"));
-        status.reposts_count    = jsonObject.optInt("reposts_count");
-        status.comments_count   = jsonObject.optInt("comments_count");
-        status.attitudes_count  = jsonObject.optInt("attitudes_count");
-        status.mlevel           = jsonObject.optInt("mlevel", -1);    // Have NOT supported
-        status.visible          = Visible.parse(jsonObject.optJSONObject("visible"));
-        
-        JSONArray picUrlsArray = jsonObject.optJSONArray("pic_urls");
-        if (picUrlsArray != null && picUrlsArray.length() > 0) {
-            int length = picUrlsArray.length();
-            status.pic_urls = new ArrayList<String>(length);
-            JSONObject tmpObject = null;
-            for (int ix = 0; ix < length; ix++) {
-                tmpObject = picUrlsArray.optJSONObject(ix);
-                if (tmpObject != null) {
-                    status.pic_urls.add(tmpObject.optString("thumbnail_pic"));
-                }
-            }
-        }
-        
-        //status.ad = jsonObject.optString("ad", "");
-        
-        return status;
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/StatusList.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/StatusList.java
deleted file mode 100644
index aa083ed..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/StatusList.java
+++ /dev/null
@@ -1,72 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.models;
-
-import java.util.ArrayList;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.text.TextUtils;
-
-/**
- * 微博列表结构。
- * @see <a href="http://t.cn/zjM1a2W">常见返回对象数据结构</a>
- * 
- * @author SINA
- * @since 2013-11-22
- */
-public class StatusList {
-    
-    /** 微博列表 */
-    public ArrayList<Status> statusList;
-    public Status statuses;
-    public boolean hasvisible;
-    public String previous_cursor;
-    public String next_cursor;
-    public int total_number;
-    public Object[] advertises;
-    
-    public static StatusList parse(String jsonString) {
-        if (TextUtils.isEmpty(jsonString)) {
-            return null;
-        }
-        
-        StatusList statuses = new StatusList();
-        try {
-            JSONObject jsonObject = new JSONObject(jsonString);
-            statuses.hasvisible      = jsonObject.optBoolean("hasvisible", false);
-            statuses.previous_cursor = jsonObject.optString("previous_cursor", "0");
-            statuses.next_cursor     = jsonObject.optString("next_cursor", "0");
-            statuses.total_number    = jsonObject.optInt("total_number", 0);
-            
-            JSONArray jsonArray      = jsonObject.optJSONArray("statuses");
-            if (jsonArray != null && jsonArray.length() > 0) {
-                int length = jsonArray.length();
-                statuses.statusList = new ArrayList<Status>(length);
-                for (int ix = 0; ix < length; ix++) {
-                    statuses.statusList.add(Status.parse(jsonArray.getJSONObject(ix)));
-                }
-            }
-        } catch (JSONException e) {
-            e.printStackTrace();
-        }
-        
-        return statuses;
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Tag.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Tag.java
deleted file mode 100644
index eed7e01..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Tag.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.models;
-
-import org.json.JSONObject;
-
-/**
- * 我喜欢的微博标签（Tag）结构体。
- * 
- * @author SINA
- * @since 2013-11-24
- */
-public class Tag {
-    
-    /** type 取值，0：普通微博，1：私密微博，3：指定分组微博，4：密友微博 */
-    public int id;
-    /** 分组的组号 */
-    public String tag;
-    
-    public static Tag parse(JSONObject jsonObject) {
-        if (null == jsonObject) {
-            return null;
-        }
-        
-        Tag tag = new Tag();
-        tag.id  = jsonObject.optInt("id", 0);
-        tag.tag = jsonObject.optString("tag", "");
-        
-        return tag;
-    }
-}
\ No newline at end of file
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/User.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/User.java
deleted file mode 100644
index 87a7505..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/User.java
+++ /dev/null
@@ -1,165 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.models;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-/**
- * 用户信息结构体。
- * 
- * @author SINA
- * @since 2013-11-24
- */
-public class User {
-
-    /** 用户UID（int64） */
-    public String id;
-    /** 字符串型的用户 UID */
-    public String idstr;
-    /** 用户昵称 */
-    public String screen_name;
-    /** 友好显示名称 */
-    public String name;
-    /** 用户所在省级ID */
-    public int province;
-    /** 用户所在城市ID */
-    public int city;
-    /** 用户所在地 */
-    public String location;
-    /** 用户个人描述 */
-    public String description;
-    /** 用户博客地址 */
-    public String url;
-    /** 用户头像地址，50×50像素 */
-    public String profile_image_url;
-    /** 用户的微博统一URL地址 */
-    public String profile_url;
-    /** 用户的个性化域名 */
-    public String domain;
-    /** 用户的微号 */
-    public String weihao;
-    /** 性别，m：男、f：女、n：未知 */
-    public String gender;
-    /** 粉丝数 */
-    public int followers_count;
-    /** 关注数 */
-    public int friends_count;
-    /** 微博数 */
-    public int statuses_count;
-    /** 收藏数 */
-    public int favourites_count;
-    /** 用户创建（注册）时间 */
-    public String created_at;
-    /** 暂未支持 */
-    public boolean following;
-    /** 是否允许所有人给我发私信，true：是，false：否 */
-    public boolean allow_all_act_msg;
-    /** 是否允许标识用户的地理位置，true：是，false：否 */
-    public boolean geo_enabled;
-    /** 是否是微博认证用户，即加V用户，true：是，false：否 */
-    public boolean verified;
-    /** 暂未支持 */
-    public int verified_type;
-    /** 用户备注信息，只有在查询用户关系时才返回此字段 */
-    public String remark;
-    /** 用户的最近一条微博信息字段 */
-    public Status status;
-    /** 是否允许所有人对我的微博进行评论，true：是，false：否 */
-    public boolean allow_all_comment;
-    /** 用户大头像地址 */
-    public String avatar_large;
-    /** 用户高清大头像地址 */
-    public String avatar_hd;
-    /** 认证原因 */
-    public String verified_reason;
-    /** 该用户是否关注当前登录用户，true：是，false：否 */
-    public boolean follow_me;
-    /** 用户的在线状态，0：不在线、1：在线 */
-    public int online_status;
-    /** 用户的互粉数 */
-    public int bi_followers_count;
-    /** 用户当前的语言版本，zh-cn：简体中文，zh-tw：繁体中文，en：英语 */
-    public String lang;
-    
-    /** 注意：以下字段暂时不清楚具体含义，OpenAPI 说明文档暂时没有同步更新对应字段 */
-    public String star;
-    public String mbtype;
-    public String mbrank;
-    public String block_word;
-    
-    public static User parse(String jsonString) {
-        try {
-            JSONObject jsonObject = new JSONObject(jsonString);
-            return User.parse(jsonObject);
-        } catch (JSONException e) {
-            e.printStackTrace();
-        }
-        
-        return null;
-    }
-    
-    public static User parse(JSONObject jsonObject) {
-        if (null == jsonObject) {
-            return null;
-        }
-        
-        User user = new User();
-        user.id                 = jsonObject.optString("id", "");
-        user.idstr              = jsonObject.optString("idstr", "");
-        user.screen_name        = jsonObject.optString("screen_name", "");
-        user.name               = jsonObject.optString("name", "");
-        user.province           = jsonObject.optInt("province", -1);
-        user.city               = jsonObject.optInt("city", -1);
-        user.location           = jsonObject.optString("location", "");
-        user.description        = jsonObject.optString("description", "");
-        user.url                = jsonObject.optString("url", "");
-        user.profile_image_url  = jsonObject.optString("profile_image_url", "");
-        user.profile_url        = jsonObject.optString("profile_url", "");
-        user.domain             = jsonObject.optString("domain", "");
-        user.weihao             = jsonObject.optString("weihao", "");
-        user.gender             = jsonObject.optString("gender", "");
-        user.followers_count    = jsonObject.optInt("followers_count", 0);
-        user.friends_count      = jsonObject.optInt("friends_count", 0);
-        user.statuses_count     = jsonObject.optInt("statuses_count", 0);
-        user.favourites_count   = jsonObject.optInt("favourites_count", 0);
-        user.created_at         = jsonObject.optString("created_at", "");
-        user.following          = jsonObject.optBoolean("following", false);
-        user.allow_all_act_msg  = jsonObject.optBoolean("allow_all_act_msg", false);
-        user.geo_enabled        = jsonObject.optBoolean("geo_enabled", false);
-        user.verified           = jsonObject.optBoolean("verified", false);
-        user.verified_type      = jsonObject.optInt("verified_type", -1);
-        user.remark             = jsonObject.optString("remark", "");
-        //user.status             = jsonObject.optString("status", ""); // XXX: NO Need ?
-        user.allow_all_comment  = jsonObject.optBoolean("allow_all_comment", true);
-        user.avatar_large       = jsonObject.optString("avatar_large", "");
-        user.avatar_hd          = jsonObject.optString("avatar_hd", "");
-        user.verified_reason    = jsonObject.optString("verified_reason", "");
-        user.follow_me          = jsonObject.optBoolean("follow_me", false);
-        user.online_status      = jsonObject.optInt("online_status", 0);
-        user.bi_followers_count = jsonObject.optInt("bi_followers_count", 0);
-        user.lang               = jsonObject.optString("lang", "");
-        
-        // 注意：以下字段暂时不清楚具体含义，OpenAPI 说明文档暂时没有同步更新对应字段含义
-        user.star               = jsonObject.optString("star", "");
-        user.mbtype             = jsonObject.optString("mbtype", "");
-        user.mbrank             = jsonObject.optString("mbrank", "");
-        user.block_word         = jsonObject.optString("block_word", "");
-        
-        return user;
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Visible.java b/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Visible.java
deleted file mode 100644
index b5d0415..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/openapi/models/Visible.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.openapi.models;
-
-import org.json.JSONObject;
-
-/**
- * 微博可见性结构体。
- * 
- * @author SINA
- * @since 2013-11-24
- */
-public class Visible {
-    
-    public static final int VISIBLE_NORMAL  = 0;
-    public static final int VISIBLE_PRIVACY = 1;
-    public static final int VISIBLE_GROUPED = 2;
-    public static final int VISIBLE_FRIEND  = 3;
-    
-    /** type 取值，0：普通微博，1：私密微博，3：指定分组微博，4：密友微博 */
-    public int type;
-    /** 分组的组号 */
-    public int list_id;
-    
-    public static Visible parse(JSONObject jsonObject) {
-        if (null == jsonObject) {
-            return null;
-        }
-        
-        Visible visible = new Visible();
-        visible.type    = jsonObject.optInt("type", 0);
-        visible.list_id = jsonObject.optInt("list_id", 0);
-        
-        return visible;
-    }
-}
\ No newline at end of file
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/widget/LoginButton.java b/weibo/src/main/java/com/sina/weibo/sdk/widget/LoginButton.java
deleted file mode 100644
index 461fb3f..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/widget/LoginButton.java
+++ /dev/null
@@ -1,210 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.widget;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.util.AttributeSet;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.widget.Button;
-
-import com.sina.weibo.sdk.R;
-import com.sina.weibo.sdk.auth.AuthInfo;
-import com.sina.weibo.sdk.auth.WeiboAuthListener;
-import com.sina.weibo.sdk.auth.sso.SsoHandler;
-import com.sina.weibo.sdk.utils.LogUtil;
-
-/**
- * 该类提供了一个简单的登录控件。
- * 该登陆控件只提供登录功能（SSO 登陆授权），它有三种内置的样式。
- * 
- * @author SINA
- * @since 2013-11-04
- */
-public class LoginButton extends Button implements OnClickListener {	
-    private static final String TAG = "LoginButton";
-
-    /** 默认样式，同时带有新浪微博图标和文字的图标 */
-    public static final int LOGIN_INCON_STYLE_1 = 1;
-    /** 样式二，带边框的新浪微博图标 */
-    public static final int LOGIN_INCON_STYLE_2 = 2;
-    /** 样式三，不带边框的新浪微博图标 */
-    public static final int LOGIN_INCON_STYLE_3 = 3;
-    
-    /** 微博授权时，启动 SSO 界面的 Activity */
-	private Context mContext;
-    /** 授权认证所需要的信息 */
-    private AuthInfo mAuthInfo;
-    /** SSO 授权认证实例 */
-    private SsoHandler mSsoHandler;
-    /** 微博授权认证回调 */
-    private WeiboAuthListener mAuthListener;
-    /** 点击 Button 时，额外的 Listener */
-    private OnClickListener mExternalOnClickListener;
-    
-    /**
-     * 创建一个登录按钮。
-     * 
-     * @see View#View(Context)
-     */
-	public LoginButton(Context context) {
-		this(context, null);
-	}
-	
-	/**
-	 * 从 XML 配置文件中创建一个按钮。
-	 * 
-	 * @see View#View(Context, AttributeSet)
-	 */
-	public LoginButton(Context context, AttributeSet attrs) {
-		this(context, attrs, 0);
-	}
-
-    /**
-     * 从 XML 配置文件以及样式中创建一个按钮。
-     * 
-     * @see View#View(Context, AttributeSet, int)
-     */
-	public LoginButton(Context context, AttributeSet attrs, int defStyle) {
-		super(context, attrs, defStyle);
-		initialize(context);
-	}
-    
-    /**
-     * 设置微博授权所需信息以及回调函数。
-     * 
-     * @param authInfo     用于保存授权认证所需要的信息
-     * @param authListener 微博授权认证回调接口
-     */
-    public void setWeiboAuthInfo(AuthInfo authInfo, WeiboAuthListener authListener) {
-		mAuthInfo = authInfo;
-		mAuthListener = authListener;
-	}
-    
-    /**
-     * 设置微博授权所需信息。
-     * 
-     * @param appKey       第三方应用的 APP_KEY
-     * @param redirectUrl  第三方应用的回调页
-     * @param scope        第三方应用申请的权限
-     * @param authListener 微博授权认证回调接口
-     */
-    public void setWeiboAuthInfo(String appKey, String redirectUrl, String scope, WeiboAuthListener authListener) {
-		mAuthInfo = new AuthInfo(mContext, appKey, redirectUrl, scope);
-		mAuthListener = authListener;
-	}
-    
-    /**
-     * 设置微博登陆按钮显示的样式，默认为同时带有新浪微博图标和文字的样式。
-     * 
-     * @param style 登录按钮的样式。可以是以下几种样式中的一种：
-     *              {@link #LOGIN_INCON_STYLE_1}，
-     *              {@link #LOGIN_INCON_STYLE_2}，
-     *              {@link #LOGIN_INCON_STYLE_3}
-     */
-    public void setStyle(int style) {
-    	int iconResId = R.drawable.com_sina_weibo_sdk_login_button_with_account_text;
-    	switch (style) {
-		case LOGIN_INCON_STYLE_1:
-			iconResId = R.drawable.com_sina_weibo_sdk_login_button_with_account_text;
-			break;
-			
-		case LOGIN_INCON_STYLE_2:
-			iconResId = R.drawable.com_sina_weibo_sdk_login_button_with_frame_logo;
-			break;
-			
-		case LOGIN_INCON_STYLE_3:
-			iconResId = R.drawable.com_sina_weibo_sdk_login_button_with_original_logo;
-			break;
-			
-		default:
-			break;
-		}
-    	
-    	setBackgroundResource(iconResId);
-	}
-    
-    /**
-     * 设置一个额外的 Button 点击时的 Listener。
-     * 当触发 Button 点击事件时，会先调用该 Listener，给使用者一个可访问的机会，
-     * 然后再调用内部默认的处理。
-     * <p><b>注意：一般情况下，使用者不需要调用该方法，除非有其它必要性。<b></p>
-     * 
-     * @param listener Button 点击时的 Listener
-     */
-    public void setExternalOnClickListener(OnClickListener listener) {
-        mExternalOnClickListener = listener;
-    }
-
-    /**
-	 * 按钮被点击时，调用该函数。
-	 */
-	@Override
-	public void onClick(View v) {
-	    // Give a chance to external listener
-        if (mExternalOnClickListener != null) {
-            mExternalOnClickListener.onClick(v);
-        }
-	    
-		if (null == mSsoHandler && mAuthInfo != null) {
-			mSsoHandler = new SsoHandler((Activity)mContext, mAuthInfo);
-		}
-		
-        if (mSsoHandler != null) {
-            mSsoHandler.authorize(mAuthListener);
-        } else {
-            LogUtil.e(TAG, "Please setWeiboAuthInfo(...) for first");
-        }
-	}
-	
-    /**
-     * 使用该控件进行授权登陆时，需要手动调用该函数。
-     * <p>
-     * 重要：使用该控件的 Activity 必须重写 {@link Activity#onActivityResult(int, int, Intent)}，
-     *       并在内部调用该函数，否则无法授权成功。</p>
-     * <p>Sample Code：</p>
-     * <pre class="prettyprint">
-     * protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-     *     super.onActivityResult(requestCode, resultCode, data);
-     *     
-     *     // 在此处调用
-     *     mLoginButton.onActivityResult(requestCode, resultCode, data);
-     * }
-     * </pre>
-     * @param requestCode 请查看 {@link Activity#onActivityResult(int, int, Intent)}
-     * @param resultCode  请查看 {@link Activity#onActivityResult(int, int, Intent)}
-     * @param data        请查看 {@link Activity#onActivityResult(int, int, Intent)}
-     */
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        if (mSsoHandler != null) {
-            mSsoHandler.authorizeCallBack(requestCode, resultCode, data);
-        }
-    }
-
-    /**
-     * 按钮初始化函数。
-     * 
-     * @param context 上下文环境，一般为放置该 Button 的 Activity
-     */
-    private void initialize(Context context) {
-    	mContext = context;
-    	setOnClickListener(this);
-    	setStyle(LOGIN_INCON_STYLE_1);
-    }
-}
diff --git a/weibo/src/main/java/com/sina/weibo/sdk/widget/LoginoutButton.java b/weibo/src/main/java/com/sina/weibo/sdk/widget/LoginoutButton.java
deleted file mode 100644
index 9d66238..0000000
--- a/weibo/src/main/java/com/sina/weibo/sdk/widget/LoginoutButton.java
+++ /dev/null
@@ -1,339 +0,0 @@
-/*
- * Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.sina.weibo.sdk.widget;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import android.content.res.Resources;
-import android.graphics.Typeface;
-import android.os.Bundle;
-import android.text.TextUtils;
-import android.util.AttributeSet;
-import android.util.TypedValue;
-import android.view.Gravity;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.widget.Button;
-
-import com.sina.weibo.sdk.R;
-import com.sina.weibo.sdk.auth.AuthInfo;
-import com.sina.weibo.sdk.auth.Oauth2AccessToken;
-import com.sina.weibo.sdk.auth.WeiboAuthListener;
-import com.sina.weibo.sdk.auth.sso.SsoHandler;
-import com.sina.weibo.sdk.exception.WeiboException;
-import com.sina.weibo.sdk.net.RequestListener;
-import com.sina.weibo.sdk.openapi.LogoutAPI;
-import com.sina.weibo.sdk.utils.LogUtil;
-
-/**
- * 该类提供了一个简单的登录/注销控件。
- * 该控件提供内置的登录（SSO 登陆授权）和注销功能，它有两种样式（蓝色和银色）。
- * 注意：使用者可以自行修改 /res/values/styles.xml 文件中的样式。
- * 
- * @author SINA
- * @since 2013-11-04
- */
-public class LoginoutButton extends Button implements OnClickListener {
-    private static final String TAG = "LoginButton";
-    
-    /** 微博授权时，启动 SSO 界面的 Activity */
-	private Context mContext;
-    /** 授权认证所需要的信息 */
-    private AuthInfo mAuthInfo;
-    /** SSO 授权认证实例 */
-    private SsoHandler mSsoHandler;
-    /** 微博授权认证回调 */
-    private WeiboAuthListener mAuthListener;
-    /** Access Token 实例  */
-    private Oauth2AccessToken mAccessToken;
-    /** 注销回调 */
-    private RequestListener mLogoutListener;
-    /** 点击 Button 时，额外的 Listener */
-    private OnClickListener mExternalOnClickListener;
-
-    /**
-     * 创建一个登录/注销按钮。
-     * 
-     * @see View#View(Context)
-     */
-	public LoginoutButton(Context context) {
-		this(context, null);
-	}
-	
-    /**
-     * 从 XML 配置文件中创建一个登录/注销按钮。
-     * 
-     * @see View#View(Context, AttributeSet)
-     */	
-	public LoginoutButton(Context context, AttributeSet attrs) {
-		this(context, attrs, /*R.style.com_sina_weibo_sdk_loginview_default_style*/0);
-	}
-
-    /**
-     * 从 XML 配置文件以及样式中创建一个登录/注销按钮。
-     * 
-     * @see View#View(Context, AttributeSet, int)
-     */	
-	public LoginoutButton(Context context, AttributeSet attrs, int defStyle) {
-		super(context, attrs, defStyle);
-		initialize(context, attrs);
-	}
-    
-    /**
-     * 设置微博授权所需信息以及回调函数。
-     * 
-     * @param authInfo     用于保存授权认证所需要的信息
-     * @param authListener 微博授权认证回调接口
-     */
-    public void setWeiboAuthInfo(AuthInfo authInfo, WeiboAuthListener authListener) {
-		mAuthInfo = authInfo;
-		mAuthListener = authListener;
-	}
-    
-    /**
-     * 设置微博授权所需信息。
-     * 
-     * @param appKey       第三方应用的 APP_KEY
-     * @param redirectUrl  第三方应用的回调页
-     * @param scope        第三方应用申请的权限
-     * @param authListener 微博授权认证回调接口
-     */
-    public void setWeiboAuthInfo(String appKey, String redirectUrl, String scope, WeiboAuthListener authListener) {
-		mAuthInfo = new AuthInfo(mContext, appKey, redirectUrl, scope);
-		mAuthListener = authListener;
-	}
-    
-    /**
-     * 设置注销时，需要设置的 Token 信息以及注销后的回调接口。
-     * 
-     * @param accessToken    AccessToken 信息
-     * @param logoutListener 注销回调
-     */
-    public void setLogoutInfo(Oauth2AccessToken accessToken, RequestListener logoutListener) {
-		mAccessToken = accessToken;
-		mLogoutListener = logoutListener;
-
-		if (mAccessToken != null && mAccessToken.isSessionValid()) {
-            setText(R.string.com_sina_weibo_sdk_logout);
-        }
-	}
-    
-    /**
-     * 设置注销回调。
-     * 
-     * @param logoutListener 注销回调
-     */
-    public void setLogoutListener(RequestListener logoutListener) {
-    	mLogoutListener = logoutListener;
-	}
-    
-    /**
-     * 设置一个额外的 Button 点击时的 Listener。
-     * 当触发 Button 点击事件时，会先调用该 Listener，给使用者一个可访问的机会，
-     * 然后再调用内部默认的处理。
-     * <p><b>注意：一般情况下，使用者不需要调用该方法，除非有其它必要性。<b></p>
-     * 
-     * @param listener Button 点击时的 Listener
-     */    
-    public void setExternalOnClickListener(OnClickListener l) {
-        mExternalOnClickListener = l;
-    }
-
-	/**
-	 * 使用该控件进行授权登陆时，需要手动调用该函数。
-	 * <p>
-	 * 重要：使用该控件的 Activity 必须重写 {@link Activity#onActivityResult(int, int, Intent)}，
-	 *       并在内部调用该函数，否则无法授权成功。</p>
-	 * <p>Sample Code：</p>
-	 * <pre class="prettyprint">
-	 * protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-	 *     super.onActivityResult(requestCode, resultCode, data);
-	 *     
-	 *     // 在此处调用
-	 *     mLoginoutButton.onActivityResult(requestCode, resultCode, data);
-	 * }
-	 * </pre>
-	 * @param requestCode 请查看 {@link Activity#onActivityResult(int, int, Intent)}
-	 * @param resultCode  请查看 {@link Activity#onActivityResult(int, int, Intent)}
-	 * @param data        请查看 {@link Activity#onActivityResult(int, int, Intent)}
-	 */
-	public void onActivityResult(int requestCode, int resultCode, Intent data) {
-	    if (mSsoHandler != null) {
-	        mSsoHandler.authorizeCallBack(requestCode, resultCode, data);
-	    }
-	}
-
-	/**
-     * 按钮被点击时，调用该函数。
-     */
-	@Override
-	public void onClick(View v) {
-	    // Give a chance to external listener
-	    if (mExternalOnClickListener != null) {
-            mExternalOnClickListener.onClick(v);
-        }
-	    
-		if (mAccessToken != null && mAccessToken.isSessionValid()) {
-			logout();
-		} else {
-			login();
-		}
-	}
-
-	/**
-	 * 初始化函数。
-	 * 
-	 * @param context 上下文环境，一般为放置该 Button 的 Activity 
-	 * @param attrs   XML 属性集合对象
-	 */
-	private void initialize(Context context, AttributeSet attrs) {
-		mContext = context;
-		this.setOnClickListener(this);
-		
-		// 如果布局文件中未设置 style，加载默认的 style
-		loadDefaultStyle(attrs);
-	}
-
-	/**
-	 * 加载默认的样式（蓝色）。
-	 * 
-	 * @param attrs XML 属性集合对象
-	 */
-	private void loadDefaultStyle(AttributeSet attrs) {
-		if (attrs != null && 0 == attrs.getStyleAttribute()) {
-			Resources res = getResources();
-			this.setBackgroundResource(R.drawable.com_sina_weibo_sdk_button_blue);
-			this.setPadding(res.getDimensionPixelSize(R.dimen.com_sina_weibo_sdk_loginview_padding_left),
-					res.getDimensionPixelSize(R.dimen.com_sina_weibo_sdk_loginview_padding_top),
-					res.getDimensionPixelSize(R.dimen.com_sina_weibo_sdk_loginview_padding_right),
-					res.getDimensionPixelSize(R.dimen.com_sina_weibo_sdk_loginview_padding_bottom));
-			this.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_com_sina_weibo_sdk_logo, 0, 0, 0);
-			this.setCompoundDrawablePadding(
-					res.getDimensionPixelSize(R.dimen.com_sina_weibo_sdk_loginview_compound_drawable_padding));
-	        this.setTextColor(res.getColor(R.color.com_sina_weibo_sdk_loginview_text_color));
-	        this.setTextSize(TypedValue.COMPLEX_UNIT_PX,
-	        		res.getDimension(R.dimen.com_sina_weibo_sdk_loginview_text_size));
-	        this.setTypeface(Typeface.DEFAULT_BOLD);
-	        this.setGravity(Gravity.CENTER);
-	        this.setText(R.string.com_sina_weibo_sdk_login_with_weibo_account);
-		}
-	}
-	
-	/**
-	 * 进行 SSO 登陆。如果未安装微博客户端，或 SSO 验证失败，则会跳转到正常的 Web 授权。
-	 */
-	private void login() {
-		LogUtil.i(TAG, "Click to login");
-		
-		if (null == mSsoHandler && mAuthInfo != null) {
-			mSsoHandler = new SsoHandler((Activity)mContext, mAuthInfo);
-		}
-		
-		if (mSsoHandler != null) {
-			mSsoHandler.authorize(new WeiboAuthListener() {
-				
-				@Override
-				public void onComplete(Bundle values) {
-					// 从 Bundle 中解析 Token
-					mAccessToken = Oauth2AccessToken.parseAccessToken(values);
-					if (mAccessToken.isSessionValid()) {
-						setText(R.string.com_sina_weibo_sdk_logout);
-					}
-					
-					if (mAuthListener != null) {
-						mAuthListener.onComplete(values);
-					}
-				}
-				
-				@Override
-				public void onCancel() {
-					if (mAuthListener != null) {
-						mAuthListener.onCancel();
-					}
-				}
-				
-				@Override
-				public void onWeiboException(WeiboException e) {
-					if (mAuthListener != null) {
-						mAuthListener.onWeiboException(e);
-					}
-				}
-			});
-		} else {
-			LogUtil.e(TAG, "Please setWeiboAuthInfo(...) for first");
-		}
-	}
-
-	/**
-	 * 调用 {@link LogoutAPI#logout(RequestListener)} 来注销。
-	 */
-	private void logout() {
-		if (mAccessToken != null && mAccessToken.isSessionValid()) {
-			LogUtil.i(TAG, "Click to logout");
-			
-			new LogoutAPI(mContext, mAuthInfo.getAppKey(), mAccessToken).logout(new RequestListener() {
-	            @Override
-	            public void onComplete(String response) {
-		            if (!TextUtils.isEmpty(response)) {
-		                try {
-		                    JSONObject obj = new JSONObject(response);
-		                    if(obj.isNull("error")){
-			                    String value = obj.getString("result");
-	
-			                    // 注销成功
-			                    if ("true".equalsIgnoreCase(value)) {
-			                    	// XXX: 考虑是否需要将 AccessTokenKeeper 放到 SDK 中？？
-			                        //AccessTokenKeeper.clear(getContext());
-			                    	// 清空当前 Token
-			                        mAccessToken = null;
-			                        
-			                        setText(R.string.com_sina_weibo_sdk_login_with_weibo_account);
-			                    }
-		                    } else {
-		                    	String error_code = obj.getString("error_code");
-		                    	if(error_code.equals("21317")){
-		                    		 mAccessToken = null;
-				                     setText(R.string.com_sina_weibo_sdk_login_with_weibo_account);
-		                    	}
-		                    }
-		                } catch (JSONException e) {
-		                    e.printStackTrace();
-		                }
-		            }
-		            
-		            if (mLogoutListener != null) {
-		            	mLogoutListener.onComplete(response);
-					}
-		        }
-
-				@Override
-				public void onWeiboException(WeiboException e) {
-					LogUtil.e(TAG, "WeiboException： " + e.getMessage());
-	                // 注销失败
-	                setText(R.string.com_sina_weibo_sdk_logout);
-	                if (mLogoutListener != null) {
-	                	mLogoutListener.onWeiboException(e);
-	                }
-				}
-	        });
-		}
-	}
-}
diff --git a/weibo/src/main/jniLibs/arm64-v8a/libweibosdkcore.so b/weibo/src/main/jniLibs/arm64-v8a/libweibosdkcore.so
deleted file mode 100644
index 55e496d..0000000
Binary files a/weibo/src/main/jniLibs/arm64-v8a/libweibosdkcore.so and /dev/null differ
diff --git a/weibo/src/main/jniLibs/armeabi-v7a/libweibosdkcore.so b/weibo/src/main/jniLibs/armeabi-v7a/libweibosdkcore.so
deleted file mode 100644
index 4f22781..0000000
Binary files a/weibo/src/main/jniLibs/armeabi-v7a/libweibosdkcore.so and /dev/null differ
diff --git a/weibo/src/main/jniLibs/armeabi/libweibosdkcore.so b/weibo/src/main/jniLibs/armeabi/libweibosdkcore.so
deleted file mode 100644
index 94192f9..0000000
Binary files a/weibo/src/main/jniLibs/armeabi/libweibosdkcore.so and /dev/null differ
diff --git a/weibo/src/main/jniLibs/mips/libweibosdkcore.so b/weibo/src/main/jniLibs/mips/libweibosdkcore.so
deleted file mode 100644
index 91cf505..0000000
Binary files a/weibo/src/main/jniLibs/mips/libweibosdkcore.so and /dev/null differ
diff --git a/weibo/src/main/jniLibs/mips64/libweibosdkcore.so b/weibo/src/main/jniLibs/mips64/libweibosdkcore.so
deleted file mode 100644
index 03d2808..0000000
Binary files a/weibo/src/main/jniLibs/mips64/libweibosdkcore.so and /dev/null differ
diff --git a/weibo/src/main/jniLibs/x86/libweibosdkcore.so b/weibo/src/main/jniLibs/x86/libweibosdkcore.so
deleted file mode 100644
index 4134bd5..0000000
Binary files a/weibo/src/main/jniLibs/x86/libweibosdkcore.so and /dev/null differ
diff --git a/weibo/src/main/jniLibs/x86_64/libweibosdkcore.so b/weibo/src/main/jniLibs/x86_64/libweibosdkcore.so
deleted file mode 100644
index 8d349d5..0000000
Binary files a/weibo/src/main/jniLibs/x86_64/libweibosdkcore.so and /dev/null differ
diff --git a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_button_blue_focused.9.png b/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_button_blue_focused.9.png
deleted file mode 100644
index cf60eb0..0000000
Binary files a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_button_blue_focused.9.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_button_blue_normal.9.png b/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_button_blue_normal.9.png
deleted file mode 100644
index ece0c4c..0000000
Binary files a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_button_blue_normal.9.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_button_blue_pressed.9.png b/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_button_blue_pressed.9.png
deleted file mode 100644
index a123c25..0000000
Binary files a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_button_blue_pressed.9.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_button_grey_focused.9.png b/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_button_grey_focused.9.png
deleted file mode 100644
index 2e6f66d..0000000
Binary files a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_button_grey_focused.9.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_button_grey_normal.9.png b/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_button_grey_normal.9.png
deleted file mode 100644
index 6098f0b..0000000
Binary files a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_button_grey_normal.9.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_button_grey_pressed.9.png b/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_button_grey_pressed.9.png
deleted file mode 100644
index 23b9757..0000000
Binary files a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_button_grey_pressed.9.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_focused.png b/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_focused.png
deleted file mode 100644
index dc1cec9..0000000
Binary files a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_focused.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_normal.png b/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_normal.png
deleted file mode 100644
index aa01dc8..0000000
Binary files a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_normal.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_pressed.png b/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_pressed.png
deleted file mode 100644
index dee4fda..0000000
Binary files a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_pressed.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_login_with_account_text_focused.png b/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_login_with_account_text_focused.png
deleted file mode 100644
index bd5fa22..0000000
Binary files a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_login_with_account_text_focused.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_login_with_account_text_normal.png b/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_login_with_account_text_normal.png
deleted file mode 100644
index 8b348c4..0000000
Binary files a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_login_with_account_text_normal.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_login_with_account_text_pressed.png b/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_login_with_account_text_pressed.png
deleted file mode 100644
index 76f3fa8..0000000
Binary files a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_login_with_account_text_pressed.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_login_with_text.png b/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_login_with_text.png
deleted file mode 100644
index 216ae7f..0000000
Binary files a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_login_with_text.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_logo.png b/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_logo.png
deleted file mode 100644
index 669e934..0000000
Binary files a/weibo/src/main/res/drawable-hdpi/ic_com_sina_weibo_sdk_logo.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-ldpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_focused.png b/weibo/src/main/res/drawable-ldpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_focused.png
deleted file mode 100644
index 86d181f..0000000
Binary files a/weibo/src/main/res/drawable-ldpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_focused.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-ldpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_normal.png b/weibo/src/main/res/drawable-ldpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_normal.png
deleted file mode 100644
index f2743b1..0000000
Binary files a/weibo/src/main/res/drawable-ldpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_normal.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-ldpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_pressed.png b/weibo/src/main/res/drawable-ldpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_pressed.png
deleted file mode 100644
index fec54b4..0000000
Binary files a/weibo/src/main/res/drawable-ldpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_pressed.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-ldpi/ic_com_sina_weibo_sdk_login_with_account_text_focused.png b/weibo/src/main/res/drawable-ldpi/ic_com_sina_weibo_sdk_login_with_account_text_focused.png
deleted file mode 100644
index b64c1dc..0000000
Binary files a/weibo/src/main/res/drawable-ldpi/ic_com_sina_weibo_sdk_login_with_account_text_focused.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-ldpi/ic_com_sina_weibo_sdk_login_with_account_text_normal.png b/weibo/src/main/res/drawable-ldpi/ic_com_sina_weibo_sdk_login_with_account_text_normal.png
deleted file mode 100644
index 00a12ef..0000000
Binary files a/weibo/src/main/res/drawable-ldpi/ic_com_sina_weibo_sdk_login_with_account_text_normal.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-ldpi/ic_com_sina_weibo_sdk_login_with_account_text_pressed.png b/weibo/src/main/res/drawable-ldpi/ic_com_sina_weibo_sdk_login_with_account_text_pressed.png
deleted file mode 100644
index 2349cbe..0000000
Binary files a/weibo/src/main/res/drawable-ldpi/ic_com_sina_weibo_sdk_login_with_account_text_pressed.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-ldpi/ic_com_sina_weibo_sdk_login_with_text.png b/weibo/src/main/res/drawable-ldpi/ic_com_sina_weibo_sdk_login_with_text.png
deleted file mode 100644
index 38741c9..0000000
Binary files a/weibo/src/main/res/drawable-ldpi/ic_com_sina_weibo_sdk_login_with_text.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-ldpi/ic_com_sina_weibo_sdk_logo.png b/weibo/src/main/res/drawable-ldpi/ic_com_sina_weibo_sdk_logo.png
deleted file mode 100644
index 793e4e9..0000000
Binary files a/weibo/src/main/res/drawable-ldpi/ic_com_sina_weibo_sdk_logo.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_button_blue_focused.9.png b/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_button_blue_focused.9.png
deleted file mode 100644
index cfb7a01..0000000
Binary files a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_button_blue_focused.9.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_button_blue_normal.9.png b/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_button_blue_normal.9.png
deleted file mode 100644
index 1e93901..0000000
Binary files a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_button_blue_normal.9.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_button_blue_pressed.9.png b/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_button_blue_pressed.9.png
deleted file mode 100644
index d8427fd..0000000
Binary files a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_button_blue_pressed.9.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_button_grey_focused.9.png b/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_button_grey_focused.9.png
deleted file mode 100644
index 56f6035..0000000
Binary files a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_button_grey_focused.9.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_button_grey_normal.9.png b/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_button_grey_normal.9.png
deleted file mode 100644
index dff3b7d..0000000
Binary files a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_button_grey_normal.9.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_button_grey_pressed.9.png b/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_button_grey_pressed.9.png
deleted file mode 100644
index 46648ef..0000000
Binary files a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_button_grey_pressed.9.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_focused.png b/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_focused.png
deleted file mode 100644
index 929317a..0000000
Binary files a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_focused.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_normal.png b/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_normal.png
deleted file mode 100644
index 28190f8..0000000
Binary files a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_normal.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_pressed.png b/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_pressed.png
deleted file mode 100644
index 929317a..0000000
Binary files a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_pressed.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_login_with_account_text_focused.png b/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_login_with_account_text_focused.png
deleted file mode 100644
index 0cd9f78..0000000
Binary files a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_login_with_account_text_focused.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_login_with_account_text_normal.png b/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_login_with_account_text_normal.png
deleted file mode 100644
index 75a961d..0000000
Binary files a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_login_with_account_text_normal.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_login_with_account_text_pressed.png b/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_login_with_account_text_pressed.png
deleted file mode 100644
index 530ffa0..0000000
Binary files a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_login_with_account_text_pressed.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_login_with_text.png b/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_login_with_text.png
deleted file mode 100644
index 9389d32..0000000
Binary files a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_login_with_text.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_logo.png b/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_logo.png
deleted file mode 100644
index 16a3a1b..0000000
Binary files a/weibo/src/main/res/drawable-mdpi/ic_com_sina_weibo_sdk_logo.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_button_blue_focused.9.png b/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_button_blue_focused.9.png
deleted file mode 100644
index 5a47068..0000000
Binary files a/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_button_blue_focused.9.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_button_blue_normal.9.png b/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_button_blue_normal.9.png
deleted file mode 100644
index 1449c8a..0000000
Binary files a/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_button_blue_normal.9.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_button_blue_pressed.9.png b/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_button_blue_pressed.9.png
deleted file mode 100644
index 28bd184..0000000
Binary files a/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_button_blue_pressed.9.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_button_grey_focused.9.png b/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_button_grey_focused.9.png
deleted file mode 100644
index bfd883f..0000000
Binary files a/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_button_grey_focused.9.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_button_grey_normal.9.png b/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_button_grey_normal.9.png
deleted file mode 100644
index aa98954..0000000
Binary files a/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_button_grey_normal.9.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_button_grey_pressed.9.png b/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_button_grey_pressed.9.png
deleted file mode 100644
index 92f2ad1..0000000
Binary files a/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_button_grey_pressed.9.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_focused.png b/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_focused.png
deleted file mode 100644
index 8ce6fdd..0000000
Binary files a/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_focused.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_normal.png b/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_normal.png
deleted file mode 100644
index 6cca162..0000000
Binary files a/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_normal.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_pressed.png b/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_pressed.png
deleted file mode 100644
index ccd7236..0000000
Binary files a/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_pressed.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_login_with_account_text_focused.png b/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_login_with_account_text_focused.png
deleted file mode 100644
index 2190fd7..0000000
Binary files a/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_login_with_account_text_focused.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_login_with_account_text_normal.png b/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_login_with_account_text_normal.png
deleted file mode 100644
index ba70261..0000000
Binary files a/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_login_with_account_text_normal.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_login_with_account_text_pressed.png b/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_login_with_account_text_pressed.png
deleted file mode 100644
index 9f5142e..0000000
Binary files a/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_login_with_account_text_pressed.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_logo.png b/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_logo.png
deleted file mode 100644
index afc66db..0000000
Binary files a/weibo/src/main/res/drawable-xhdpi/ic_com_sina_weibo_sdk_logo.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-xxhdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_focused.png b/weibo/src/main/res/drawable-xxhdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_focused.png
deleted file mode 100644
index 506394f..0000000
Binary files a/weibo/src/main/res/drawable-xxhdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_focused.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-xxhdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_normal.png b/weibo/src/main/res/drawable-xxhdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_normal.png
deleted file mode 100644
index c89b062..0000000
Binary files a/weibo/src/main/res/drawable-xxhdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_normal.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-xxhdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_pressed.png b/weibo/src/main/res/drawable-xxhdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_pressed.png
deleted file mode 100644
index 506394f..0000000
Binary files a/weibo/src/main/res/drawable-xxhdpi/ic_com_sina_weibo_sdk_login_button_with_frame_logo_pressed.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-xxhdpi/ic_com_sina_weibo_sdk_login_with_account_text_focused.png b/weibo/src/main/res/drawable-xxhdpi/ic_com_sina_weibo_sdk_login_with_account_text_focused.png
deleted file mode 100644
index 9697c0b..0000000
Binary files a/weibo/src/main/res/drawable-xxhdpi/ic_com_sina_weibo_sdk_login_with_account_text_focused.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-xxhdpi/ic_com_sina_weibo_sdk_login_with_account_text_normal.png b/weibo/src/main/res/drawable-xxhdpi/ic_com_sina_weibo_sdk_login_with_account_text_normal.png
deleted file mode 100644
index 55aade2..0000000
Binary files a/weibo/src/main/res/drawable-xxhdpi/ic_com_sina_weibo_sdk_login_with_account_text_normal.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable-xxhdpi/ic_com_sina_weibo_sdk_login_with_account_text_pressed.png b/weibo/src/main/res/drawable-xxhdpi/ic_com_sina_weibo_sdk_login_with_account_text_pressed.png
deleted file mode 100644
index b85c071..0000000
Binary files a/weibo/src/main/res/drawable-xxhdpi/ic_com_sina_weibo_sdk_login_with_account_text_pressed.png and /dev/null differ
diff --git a/weibo/src/main/res/drawable/com_sina_weibo_sdk_button_blue.xml b/weibo/src/main/res/drawable/com_sina_weibo_sdk_button_blue.xml
deleted file mode 100644
index 6eae903..0000000
--- a/weibo/src/main/res/drawable/com_sina_weibo_sdk_button_blue.xml
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-         http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-
-  <item
-      android:drawable="@drawable/ic_com_sina_weibo_sdk_button_blue_pressed"
-      android:state_focused="true"
-      android:state_pressed="true"
-      />
-  <item
-      android:drawable="@drawable/ic_com_sina_weibo_sdk_button_blue_pressed"
-      android:state_focused="false"
-      android:state_pressed="true"
-      />
-  <item
-      android:drawable="@drawable/ic_com_sina_weibo_sdk_button_blue_focused"
-      android:state_focused="true"
-      />
-  <item
-      android:drawable="@drawable/ic_com_sina_weibo_sdk_button_blue_normal"
-      android:state_focused="false"
-      android:state_pressed="false"
-      />
-
-</selector>
diff --git a/weibo/src/main/res/drawable/com_sina_weibo_sdk_button_grey.xml b/weibo/src/main/res/drawable/com_sina_weibo_sdk_button_grey.xml
deleted file mode 100644
index 035e088..0000000
--- a/weibo/src/main/res/drawable/com_sina_weibo_sdk_button_grey.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-         http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<selector xmlns:android="http://schemas.android.com/apk/res/android" >
-    <item android:state_pressed="true" 
-          android:drawable="@drawable/ic_com_sina_weibo_sdk_button_grey_pressed" />
-    <item android:state_focused="true" 
-          android:drawable="@drawable/ic_com_sina_weibo_sdk_button_grey_focused" />
-    <item android:drawable="@drawable/ic_com_sina_weibo_sdk_button_grey_normal" />
-</selector>
diff --git a/weibo/src/main/res/drawable/com_sina_weibo_sdk_login_button_with_account_text.xml b/weibo/src/main/res/drawable/com_sina_weibo_sdk_login_button_with_account_text.xml
deleted file mode 100644
index b452aaa..0000000
--- a/weibo/src/main/res/drawable/com_sina_weibo_sdk_login_button_with_account_text.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-         http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<selector xmlns:android="http://schemas.android.com/apk/res/android" >
-    <item android:state_pressed="true"
-          android:drawable="@drawable/ic_com_sina_weibo_sdk_login_with_account_text_pressed" />
-    <item android:state_focused="true" 
-          android:drawable="@drawable/ic_com_sina_weibo_sdk_login_with_account_text_focused" />
-    <item android:drawable="@drawable/ic_com_sina_weibo_sdk_login_with_account_text_normal" />
-</selector>
diff --git a/weibo/src/main/res/drawable/com_sina_weibo_sdk_login_button_with_frame_logo.xml b/weibo/src/main/res/drawable/com_sina_weibo_sdk_login_button_with_frame_logo.xml
deleted file mode 100644
index 05df591..0000000
--- a/weibo/src/main/res/drawable/com_sina_weibo_sdk_login_button_with_frame_logo.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-         http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<selector xmlns:android="http://schemas.android.com/apk/res/android" >
-    <item android:state_pressed="true" 
-          android:drawable="@drawable/ic_com_sina_weibo_sdk_login_button_with_frame_logo_pressed" />
-    <item android:state_focused="true" 
-          android:drawable="@drawable/ic_com_sina_weibo_sdk_login_button_with_frame_logo_focused" />
-    <item android:drawable="@drawable/ic_com_sina_weibo_sdk_login_button_with_frame_logo_normal" />
-</selector>
diff --git a/weibo/src/main/res/drawable/com_sina_weibo_sdk_login_button_with_original_logo.xml b/weibo/src/main/res/drawable/com_sina_weibo_sdk_login_button_with_original_logo.xml
deleted file mode 100644
index bdfbc32..0000000
--- a/weibo/src/main/res/drawable/com_sina_weibo_sdk_login_button_with_original_logo.xml
+++ /dev/null
@@ -1,25 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-         http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<!-- 请注意：该样式没有按下的效果 -->
-<selector xmlns:android="http://schemas.android.com/apk/res/android" >
-    <item android:state_pressed="true" 
-          android:drawable="@drawable/ic_com_sina_weibo_sdk_logo" />
-    <item android:state_focused="true" 
-          android:drawable="@drawable/ic_com_sina_weibo_sdk_logo" />
-    <item android:drawable="@drawable/ic_com_sina_weibo_sdk_logo" />
-</selector>
diff --git a/weibo/src/main/res/values-en/strings.xml b/weibo/src/main/res/values-en/strings.xml
deleted file mode 100644
index ddc68bd..0000000
--- a/weibo/src/main/res/values-en/strings.xml
+++ /dev/null
@@ -1,22 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-         http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <string name="com_sina_weibo_sdk_login_with_weibo_account">Login with Weibo</string>
-    <string name="com_sina_weibo_sdk_login">Login</string>
-    <string name="com_sina_weibo_sdk_logout">Logout</string>    
-</resources>
diff --git a/weibo/src/main/res/values-large-long/dimens.xml b/weibo/src/main/res/values-large-long/dimens.xml
deleted file mode 100644
index 4fe3c36..0000000
--- a/weibo/src/main/res/values-large-long/dimens.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-         http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources> 	
-</resources>
\ No newline at end of file
diff --git a/weibo/src/main/res/values-large/dimens.xml b/weibo/src/main/res/values-large/dimens.xml
deleted file mode 100644
index c1f01cb..0000000
--- a/weibo/src/main/res/values-large/dimens.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-         http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-</resources>
\ No newline at end of file
diff --git a/weibo/src/main/res/values-normal-notlong/dimens.xml b/weibo/src/main/res/values-normal-notlong/dimens.xml
deleted file mode 100644
index eb98378..0000000
--- a/weibo/src/main/res/values-normal-notlong/dimens.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-         http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>	
-</resources>
\ No newline at end of file
diff --git a/weibo/src/main/res/values-v11/styles.xml b/weibo/src/main/res/values-v11/styles.xml
deleted file mode 100644
index 2853f9b..0000000
--- a/weibo/src/main/res/values-v11/styles.xml
+++ /dev/null
@@ -1,27 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-         http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <!--
-        Base application theme for API 11+. This theme completely replaces
-        AppBaseTheme from res/values/styles.xml on API 11+ devices.
-    -->
-<!--     <style name="AppBaseTheme" parent="android:Theme.Holo.Light">
-        API 11 theme customizations can go here.
-    </style> -->
-
-</resources>
diff --git a/weibo/src/main/res/values-v14/styles.xml b/weibo/src/main/res/values-v14/styles.xml
deleted file mode 100644
index e77ecc5..0000000
--- a/weibo/src/main/res/values-v14/styles.xml
+++ /dev/null
@@ -1,28 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-         http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <!--
-        Base application theme for API 14+. This theme completely replaces
-        AppBaseTheme from BOTH res/values/styles.xml and
-        res/values-v11/styles.xml on API 14+ devices.
-    -->
-<!--     <style name="AppBaseTheme" parent="android:Theme.Holo.Light.DarkActionBar">
-        API 14 theme customizations can go here.
-    </style> -->
-
-</resources>
diff --git a/weibo/src/main/res/values-zh-rTW/strings.xml b/weibo/src/main/res/values-zh-rTW/strings.xml
deleted file mode 100644
index c96fc25..0000000
--- a/weibo/src/main/res/values-zh-rTW/strings.xml
+++ /dev/null
@@ -1,22 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-         http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <string name="com_sina_weibo_sdk_login_with_weibo_account">用微博登錄</string>
-    <string name="com_sina_weibo_sdk_login">登錄</string>
-    <string name="com_sina_weibo_sdk_logout">註銷</string>    
-</resources>
diff --git a/weibo/src/main/res/values/dimens.xml b/weibo/src/main/res/values/dimens.xml
deleted file mode 100644
index ae5b843..0000000
--- a/weibo/src/main/res/values/dimens.xml
+++ /dev/null
@@ -1,25 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-         http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>  
-<!--     <dimen name="weibosdk_dialog_left_margin">10dp</dimen>
-    <dimen name="weibosdk_dialog_top_margin">30dp</dimen>
-    <dimen name="weibosdk_dialog_right_margin">10dp</dimen>
-    <dimen name="weibosdk_dialog_bottom_margin">10dp</dimen> -->
-    <dimen name="activity_horizontal_margin">16dp</dimen>
-    <dimen name="activity_vertical_margin">16dp</dimen>
-</resources>
\ No newline at end of file
diff --git a/weibo/src/main/res/values/strings.xml b/weibo/src/main/res/values/strings.xml
deleted file mode 100644
index 5fd5d08..0000000
--- a/weibo/src/main/res/values/strings.xml
+++ /dev/null
@@ -1,22 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-         http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <string name="com_sina_weibo_sdk_login_with_weibo_account">用微博登录</string>
-    <string name="com_sina_weibo_sdk_login">登录</string>
-    <string name="com_sina_weibo_sdk_logout">注销</string>
-</resources>
diff --git a/weibo/src/main/res/values/styles.xml b/weibo/src/main/res/values/styles.xml
deleted file mode 100644
index e0e17d8..0000000
--- a/weibo/src/main/res/values/styles.xml
+++ /dev/null
@@ -1,82 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright (C) 2010-2013 The SINA WEIBO Open Source Project
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-         http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources xmlns:android="http://schemas.android.com/apk/res/android">
-
-    <!--
-        Base application theme, dependent on API level. This theme is replaced
-        by AppBaseTheme from res/values-vXX/styles.xml on newer devices.
-    -->
-    <style name="AppBaseTheme" parent="android:Theme.Light">
-        <!--
-            Theme customizations available in newer API levels can go in
-            res/values-vXX/styles.xml, while customizations related to
-            backward-compatibility can go here.
-        -->
-    </style>
-
-    <!-- Application theme. -->
-    <style name="AppTheme" parent="AppBaseTheme">
-        <!-- All customizations that are NOT specific to a particular API-level can go here. -->
-    </style>
-
-	<color name="com_sina_weibo_sdk_blue">#3B5998</color>
-
-    <color name="com_sina_weibo_sdk_loginview_text_color">#FFFFFF</color>
-    <dimen name="com_sina_weibo_sdk_loginview_text_size">16.0sp</dimen>
- 	<dimen name="com_sina_weibo_sdk_loginview_padding">12dip</dimen>
-    <dimen name="com_sina_weibo_sdk_loginview_padding_left">12dip</dimen>
-    <dimen name="com_sina_weibo_sdk_loginview_padding_right">16dp</dimen>
-    <dimen name="com_sina_weibo_sdk_loginview_padding_top">6dp</dimen>
-    <dimen name="com_sina_weibo_sdk_loginview_padding_bottom">6dp</dimen>
-    <dimen name="com_sina_weibo_sdk_loginview_compound_drawable_padding">12dp</dimen>
-     
-    <style name="com_sina_weibo_sdk_loginview_default_style" parent="@android:style/Widget.Button">
-        <item name="android:layout_width">wrap_content</item>
-        <item name="android:layout_height">wrap_content</item>
-        <item name="android:paddingLeft">@dimen/com_sina_weibo_sdk_loginview_padding_left</item>
-        <item name="android:paddingTop">@dimen/com_sina_weibo_sdk_loginview_padding_top</item>
-        <item name="android:paddingRight">@dimen/com_sina_weibo_sdk_loginview_padding_right</item>
-        <item name="android:paddingBottom">@dimen/com_sina_weibo_sdk_loginview_padding_bottom</item>
-        <item name="android:drawableLeft">@drawable/ic_com_sina_weibo_sdk_logo</item>
-        <item name="android:drawablePadding">@dimen/com_sina_weibo_sdk_loginview_compound_drawable_padding</item>
-        <item name="android:background">@drawable/com_sina_weibo_sdk_button_blue</item>
-        <item name="android:textColor">@color/com_sina_weibo_sdk_loginview_text_color</item>
-        <item name="android:textSize">@dimen/com_sina_weibo_sdk_loginview_text_size</item>
-        <item name="android:textStyle">bold</item>
-        <item name="android:gravity">center</item>
-        <item name="android:text">@string/com_sina_weibo_sdk_login_with_weibo_account</item>
-    </style>
-    
-    <style name="com_sina_weibo_sdk_loginview_silver_style" parent="@android:style/Widget.Button">
-        <item name="android:layout_width">wrap_content</item>
-        <item name="android:layout_height">wrap_content</item>
-        <item name="android:paddingLeft">@dimen/com_sina_weibo_sdk_loginview_padding_left</item>
-        <item name="android:paddingTop">@dimen/com_sina_weibo_sdk_loginview_padding_top</item>
-        <item name="android:paddingRight">@dimen/com_sina_weibo_sdk_loginview_padding_right</item>
-        <item name="android:paddingBottom">@dimen/com_sina_weibo_sdk_loginview_padding_bottom</item>
-        <item name="android:drawableLeft">@drawable/ic_com_sina_weibo_sdk_logo</item>
-        <item name="android:drawablePadding">@dimen/com_sina_weibo_sdk_loginview_compound_drawable_padding</item>
-        <item name="android:background">@drawable/com_sina_weibo_sdk_button_grey</item>
-        <item name="android:textColor">#4B5164</item>
-        <item name="android:textSize">@dimen/com_sina_weibo_sdk_loginview_text_size</item>
-        <item name="android:textStyle">bold</item>
-        <item name="android:gravity">center</item>
-        <item name="android:text">@string/com_sina_weibo_sdk_login_with_weibo_account</item>
-    </style>
-    
-</resources>
