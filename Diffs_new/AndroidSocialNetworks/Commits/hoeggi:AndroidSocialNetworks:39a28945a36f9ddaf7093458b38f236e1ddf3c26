diff --git a/.gitignore b/.gitignore
index c295b12..6b4a792 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,8 +1,12 @@
 .gradle
 /local.properties
 /.idea/workspace.xml
-.DS_Store
-
+.DS
+.classpath
+.project
+/bin
+/gen
+.project.properties
 .idea
 build
 *.iml
diff --git a/api_demos/src/main/.gitignore b/api_demos/src/main/.gitignore
new file mode 100755
index 0000000..6b4a792
--- /dev/null
+++ b/api_demos/src/main/.gitignore
@@ -0,0 +1,14 @@
+.gradle
+/local.properties
+/.idea/workspace.xml
+.DS
+.classpath
+.project
+/bin
+/gen
+.project.properties
+.idea
+build
+*.iml
+out
+repo
\ No newline at end of file
diff --git a/api_demos/src/main/project.properties b/api_demos/src/main/project.properties
new file mode 100755
index 0000000..85aac54
--- /dev/null
+++ b/api_demos/src/main/project.properties
@@ -0,0 +1,14 @@
+# This file is automatically generated by Android Tools.
+# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
+#
+# This file must be checked in Version Control Systems.
+#
+# To customize properties used by the Ant build system edit
+# "ant.properties", and override values to adapt the script to your
+# project structure.
+#
+# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
+#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
+
+# Project target.
+target=android-8
diff --git a/library/libs/linkedin-j-android-1.0.jar b/library/libs/linkedin-j-android-1.0.jar
deleted file mode 100644
index f3893d6..0000000
Binary files a/library/libs/linkedin-j-android-1.0.jar and /dev/null differ
diff --git a/library/src/main/.gitignore b/library/src/main/.gitignore
new file mode 100755
index 0000000..6b4a792
--- /dev/null
+++ b/library/src/main/.gitignore
@@ -0,0 +1,14 @@
+.gradle
+/local.properties
+/.idea/workspace.xml
+.DS
+.classpath
+.project
+/bin
+/gen
+.project.properties
+.idea
+build
+*.iml
+out
+repo
\ No newline at end of file
diff --git a/library/src/main/android-support-v4.jar b/library/src/main/android-support-v4.jar
new file mode 100755
index 0000000..187bdf4
Binary files /dev/null and b/library/src/main/android-support-v4.jar differ
diff --git a/library/src/main/java/com/androidsocialnetworks/lib/MomentUtil.java b/library/src/main/java/com/androidsocialnetworks/lib/MomentUtil.java
deleted file mode 100644
index 9eb31cc..0000000
--- a/library/src/main/java/com/androidsocialnetworks/lib/MomentUtil.java
+++ /dev/null
@@ -1,131 +0,0 @@
-/*
- * Copyright (C) 2012 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.androidsocialnetworks.lib;
-
-import com.google.android.gms.plus.model.moments.ItemScope;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-
-/**
- * For Google PLUS
- * Handles creation of moment JSON.
- */
-public class MomentUtil {
-
-    /**
-     * A mapping of moment type to target URL.
-     */
-    public static final HashMap<String, String> MOMENT_TYPES;
-
-    /**
-     * A list of moment target types.
-     */
-    public static final ArrayList<String> MOMENT_LIST;
-    public static final String[] ACTIONS;
-
-    static {
-        MOMENT_TYPES = new HashMap<String, String>(9);
-        MOMENT_TYPES.put("AddActivity",
-                "https://developers.google.com/+/plugins/snippet/examples/thing");
-        MOMENT_TYPES.put("BuyActivity",
-                "https://developers.google.com/+/plugins/snippet/examples/a-book");
-        MOMENT_TYPES.put("CheckInActivity",
-                "https://developers.google.com/+/plugins/snippet/examples/place");
-        MOMENT_TYPES.put("CommentActivity",
-                "https://developers.google.com/+/plugins/snippet/examples/blog-entry");
-        MOMENT_TYPES.put("CreateActivity",
-                "https://developers.google.com/+/plugins/snippet/examples/photo");
-        MOMENT_TYPES.put("ListenActivity",
-                "https://developers.google.com/+/plugins/snippet/examples/song");
-        MOMENT_TYPES.put("ReserveActivity",
-                "https://developers.google.com/+/plugins/snippet/examples/restaurant");
-        MOMENT_TYPES.put("ReviewActivity",
-                "https://developers.google.com/+/plugins/snippet/examples/widget");
-
-        MOMENT_LIST = new ArrayList<String>(MomentUtil.MOMENT_TYPES.keySet());
-        Collections.sort(MOMENT_LIST);
-
-        ACTIONS = MOMENT_TYPES.keySet().toArray(new String[0]);
-        int count = ACTIONS.length;
-        for (int i = 0; i < count; i++) {
-            ACTIONS[i] = "http://schemas.google.com/" + ACTIONS[i];
-        }
-    }
-
-    /**
-     * Generates the "result" JSON object for select moments.
-     *
-     * @param momentType The type of the moment.
-     */
-    public static ItemScope getResultFor(String momentType) {
-        if (momentType.equals("CommentActivity")) {
-            return getCommentActivityResult();
-        }
-        if (momentType.equals("ReserveActivity")) {
-            return getReserveActivityResult();
-        }
-        if (momentType.equals("ReviewActivity")) {
-            return getReviewActivityResult();
-        }
-        return null;
-    }
-
-    /**
-     * Generates the "result" JSON object for CommentActivity moment.
-     */
-    private static ItemScope getCommentActivityResult() {
-        return new ItemScope.Builder()
-                .setType("http://schema.org/Comment")
-                .setUrl("https://developers.google.com/+/plugins/snippet/examples/blog-entry#comment-1")
-                .setName("This is amazing!")
-                .setText("I can't wait to use it on my site!")
-                .build();
-    }
-
-    /**
-     * Generates the "result" JSON object for ReserveActivity moment.
-     */
-    private static ItemScope getReserveActivityResult() {
-        return new ItemScope.Builder()
-                .setType("http://schemas.google.com/Reservation")
-                .setStartDate("2012-06-28T19:00:00-08:00")
-                .setAttendeeCount(3)
-                .build();
-    }
-
-    /**
-     * Generates the "result" JSON object for ReviewActivity moment.
-     */
-    private static ItemScope getReviewActivityResult() {
-        ItemScope rating = new ItemScope.Builder()
-                .setType("http://schema.org/Rating")
-                .setRatingValue("100")
-                .setBestRating("100")
-                .setWorstRating("0")
-                .build();
-
-        return new ItemScope.Builder()
-                .setType("http://schema.org/Review")
-                .setName("A Humble Review of Widget")
-                .setUrl("https://developers.google.com/+/plugins/snippet/examples/review")
-                .setText("It is amazingly effective")
-                .setReviewRating(rating)
-                .build();
-    }
-}
diff --git a/library/src/main/java/com/androidsocialnetworks/lib/OAuthActivity.java b/library/src/main/java/com/androidsocialnetworks/lib/OAuthActivity.java
deleted file mode 100644
index 98e48b5..0000000
--- a/library/src/main/java/com/androidsocialnetworks/lib/OAuthActivity.java
+++ /dev/null
@@ -1,85 +0,0 @@
-package com.androidsocialnetworks.lib;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.graphics.Bitmap;
-import android.net.Uri;
-import android.net.http.SslError;
-import android.os.Bundle;
-import android.text.TextUtils;
-import android.view.View;
-import android.webkit.SslErrorHandler;
-import android.webkit.WebView;
-import android.webkit.WebViewClient;
-
-public class OAuthActivity extends Activity {
-
-    public static final String PARAM_URL_TO_LOAD = "OAuthActivity.PARAM_URL_TO_LOAD";
-    public static final String PARAM_CALLBACK = "OAuthActivity.PARAM_CALLBACK";
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.asn_activity_oauth);
-
-        final String paramUrlToLoad = getIntent().getStringExtra(PARAM_URL_TO_LOAD);
-        final String paramCallback = getIntent().getStringExtra(PARAM_CALLBACK);
-
-        if (TextUtils.isEmpty(paramUrlToLoad)) {
-            throw new IllegalArgumentException("required PARAM_URL_TO_LOAD");
-        }
-
-        if (TextUtils.isEmpty(paramCallback)) {
-            throw new IllegalArgumentException("required PARAM_CALLBACK");
-        }
-
-        WebView webView = (WebView) findViewById(R.id.web_view);
-        final View progressContainer = findViewById(R.id.progress_container);
-
-        webView.setWebViewClient(new WebViewClient() {
-            @Override
-            public void onPageStarted(WebView view, String url, Bitmap favicon) {
-                super.onPageStarted(view, url, favicon);
-
-                progressContainer.setVisibility(View.VISIBLE);
-            }
-
-            @Override
-            public void onPageFinished(WebView view, String url) {
-                super.onPageFinished(view, url);
-
-                progressContainer.setVisibility(View.GONE);
-            }
-
-            @Override
-            public boolean shouldOverrideUrlLoading(WebView view, String url) {
-                if (url.contains(paramCallback)) {
-                    Intent intent = new Intent();
-                    intent.setData(Uri.parse(url));
-                    setResult(RESULT_OK, intent);
-                    finish();
-                    return true;
-                }
-
-                return super.shouldOverrideUrlLoading(view, url);
-            }
-
-            @Override
-            public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
-                handler.proceed();
-            }
-
-            @Override
-            public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
-                super.onReceivedError(view, errorCode, description, failingUrl);
-
-                Intent intent = new Intent();
-                intent.setAction(description);
-                setResult(RESULT_CANCELED, intent);
-                finish();
-            }
-        });
-        webView.loadUrl(paramUrlToLoad);
-    }
-
-}
diff --git a/library/src/main/java/com/androidsocialnetworks/lib/OAuthSocialNetwork.java b/library/src/main/java/com/androidsocialnetworks/lib/OAuthSocialNetwork.java
deleted file mode 100644
index 4b234d8..0000000
--- a/library/src/main/java/com/androidsocialnetworks/lib/OAuthSocialNetwork.java
+++ /dev/null
@@ -1,127 +0,0 @@
-package com.androidsocialnetworks.lib;
-
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.util.Log;
-
-import com.androidsocialnetworks.lib.listener.base.SocialNetworkListener;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.androidsocialnetworks.lib.Consts.TAG;
-
-public abstract class OAuthSocialNetwork extends SocialNetwork {
-
-    protected Map<String, SocialNetworkAsyncTask> mRequests = new HashMap<String, SocialNetworkAsyncTask>();
-
-    protected OAuthSocialNetwork(Fragment fragment) {
-        super(fragment);
-    }
-
-    protected void executeRequest(SocialNetworkAsyncTask request, Bundle params, String requestID) {
-        checkRequestState(mRequests.get(requestID));
-
-        mRequests.put(requestID, request);
-        request.execute(params == null ? new Bundle() : params);
-    }
-
-    private void cancelRequest(String requestID) {
-        Log.d(TAG, "TwitterSocialNetwork.cancelRequest: " + requestID);
-
-        SocialNetworkAsyncTask request = mRequests.get(requestID);
-
-        if (request != null) {
-            request.cancel(true);
-        }
-
-        mRequests.remove(requestID);
-    }
-
-    @Override
-    public void cancelLoginRequest() {
-        super.cancelLoginRequest();
-
-        cancelRequest(REQUEST_LOGIN);
-        cancelRequest(REQUEST_LOGIN2);
-    }
-
-    @Override
-    public void cancelGetCurrentSocialPersonRequest() {
-        super.cancelGetCurrentSocialPersonRequest();
-
-        cancelRequest(REQUEST_GET_CURRENT_PERSON);
-    }
-
-    @Override
-    public void cancelGetSocialPersonRequest() {
-        super.cancelGetSocialPersonRequest();
-
-        cancelRequest(REQUEST_GET_PERSON);
-    }
-
-    @Override
-    public void cancelPostMessageRequest() {
-        super.cancelPostMessageRequest();
-
-        cancelRequest(REQUEST_POST_MESSAGE);
-    }
-
-    @Override
-    public void cancelPostPhotoRequest() {
-        super.cancelPostPhotoRequest();
-
-        cancelRequest(REQUEST_POST_PHOTO);
-    }
-
-    @Override
-    public void cancelCheckIsFriendRequest() {
-        super.cancelCheckIsFriendRequest();
-
-        cancelRequest(REQUEST_CHECK_IS_FRIEND);
-    }
-
-    @Override
-    public void cancelAddFriendRequest() {
-        super.cancelAddFriendRequest();
-
-        cancelRequest(REQUEST_ADD_FRIEND);
-    }
-
-    @Override
-    public void cancelRemoveFriendRequest() {
-        super.cancelRemoveFriendRequest();
-
-        cancelRequest(REQUEST_REMOVE_FRIEND);
-    }
-
-    protected boolean handleRequestResult(Bundle result, String requestID) {
-        return handleRequestResult(result, requestID, null);
-    }
-
-    protected boolean handleRequestResult(Bundle result, String requestID, Object data) {
-        Log.d(TAG, this + "handleRequestResult: " + result + " : " + requestID);
-
-        mRequests.remove(requestID);
-
-        SocialNetworkListener socialNetworkListener = mLocalListeners.get(requestID);
-
-        // 1: user didn't set listener, or pass null, this doesn't have any sence
-        // 2: request was canceled...
-        if (socialNetworkListener == null) {
-            Log.e(TAG, "TwitterSocialNetwork.handleRequestResult socialNetworkListener == null");
-            return false;
-        }
-
-        String error = result.getString(SocialNetworkAsyncTask.RESULT_ERROR);
-
-        if (error != null) {
-            socialNetworkListener.onError(getID(), requestID, error, data);
-            mLocalListeners.remove(requestID);
-            return false;
-        }
-
-        return true;
-    }
-
-}
diff --git a/library/src/main/java/com/androidsocialnetworks/lib/SocialNetwork.java b/library/src/main/java/com/androidsocialnetworks/lib/SocialNetwork.java
deleted file mode 100644
index 8bacc37..0000000
--- a/library/src/main/java/com/androidsocialnetworks/lib/SocialNetwork.java
+++ /dev/null
@@ -1,271 +0,0 @@
-package com.androidsocialnetworks.lib;
-
-import android.content.Context;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.os.AsyncTask;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.util.Log;
-
-import com.androidsocialnetworks.lib.listener.OnCheckIsFriendCompleteListener;
-import com.androidsocialnetworks.lib.listener.OnLoginCompleteListener;
-import com.androidsocialnetworks.lib.listener.OnPostingCompleteListener;
-import com.androidsocialnetworks.lib.listener.OnRequestAddFriendCompleteListener;
-import com.androidsocialnetworks.lib.listener.OnRequestRemoveFriendCompleteListener;
-import com.androidsocialnetworks.lib.listener.OnRequestSocialPersonCompleteListener;
-import com.androidsocialnetworks.lib.listener.base.SocialNetworkListener;
-
-import java.io.File;
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.androidsocialnetworks.lib.Consts.TAG;
-
-/**
- * Ids:
- * <p/>
- * 1 - Twitter
- * 2 - LinkedIn
- * 3 - Google Plus
- * 4 - Facebook
- */
-public abstract class SocialNetwork {
-
-    public static final String REQUEST_LOGIN = "SocialNetwork.REQUEST_LOGIN";
-    public static final String REQUEST_LOGIN2 = "SocialNetwork.REQUEST_LOGIN2"; // used with OAuth in Twitter and LinekdIn
-    public static final String REQUEST_GET_CURRENT_PERSON = "SocialNetwork.REQUEST_GET_CURRENT_PERSON";
-    public static final String REQUEST_GET_PERSON = "SocialNetwork.REQUEST_GET_PERSON";
-    public static final String REQUEST_POST_MESSAGE = "SocialNetwork.REQUEST_POST_MESSAGE";
-    public static final String REQUEST_POST_PHOTO = "SocialNetwork.REQUEST_POST_PHOTO";
-    public static final String REQUEST_CHECK_IS_FRIEND = "SocialNetwork.REQUEST_CHECK_IS_FRIEND";
-    public static final String REQUEST_ADD_FRIEND = "SocialNetwork.REQUEST_ADD_FRIEND";
-    public static final String REQUEST_REMOVE_FRIEND = "SocialNetwork.REQUEST_REMOVE_FRIEND";
-
-    private static final String SHARED_PREFERENCES_NAME = "social_networks";
-    protected Fragment mSocialNetworkManager;
-    protected SharedPreferences mSharedPreferences;
-    protected Map<String, SocialNetworkListener> mGlobalListeners = new HashMap<String, SocialNetworkListener>();
-    protected Map<String, SocialNetworkListener> mLocalListeners = new HashMap<String, SocialNetworkListener>();
-
-    /**
-     * @param fragment ant not activity or context, as we will need to call startActivityForResult,
-     *                 we will want to receice on onActivityResult in out SocialNetworkManager
-     *                 fragment
-     */
-    protected SocialNetwork(Fragment fragment) {
-        mSocialNetworkManager = fragment;
-
-        mSharedPreferences = mSocialNetworkManager
-                .getActivity().getSharedPreferences(SHARED_PREFERENCES_NAME, Context.MODE_PRIVATE);
-    }
-
-    //////////////////// LIFECYCLE ////////////////////
-
-    public void onCreate(Bundle savedInstanceState) {
-
-    }
-
-    public void onStart() {
-
-    }
-
-    public void onResume() {
-
-    }
-
-    public void onPause() {
-
-    }
-
-    public void onStop() {
-
-    }
-
-    public void onDestroy() {
-        cancelAll();
-    }
-
-    public void onSaveInstanceState(Bundle outState) {
-
-    }
-
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-
-    }
-
-    //////////////////// API ////////////////////
-
-    public abstract boolean isConnected();
-
-    public void requestLogin() {
-        requestLogin(null);
-    }
-
-    public void requestLogin(OnLoginCompleteListener onLoginCompleteListener) {
-        if (isConnected()) {
-            throw new SocialNetworkException("Already connected, please check isConnected() method");
-        }
-
-        registerListener(REQUEST_LOGIN, onLoginCompleteListener);
-    }
-
-    public abstract void logout();
-
-    public abstract int getID();
-
-    public void requestCurrentPerson() {
-        requestCurrentPerson(null);
-    }
-
-    public void requestCurrentPerson(OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
-        registerListener(REQUEST_GET_CURRENT_PERSON, onRequestSocialPersonCompleteListener);
-    }
-
-    public void requestSocialPerson(String userID) {
-        requestSocialPerson(userID, null);
-    }
-
-    public void requestSocialPerson(String userID, OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
-        registerListener(REQUEST_GET_PERSON, onRequestSocialPersonCompleteListener);
-    }
-
-    public void requestPostMessage(String message) {
-        requestPostMessage(message, null);
-    }
-
-    public void requestPostMessage(String message, OnPostingCompleteListener onPostingCompleteListener) {
-        registerListener(REQUEST_POST_MESSAGE, onPostingCompleteListener);
-    }
-
-    public void requestPostPhoto(File photo, String message) {
-        requestPostPhoto(photo, message, null);
-    }
-
-    public void requestPostPhoto(File photo, String message, OnPostingCompleteListener onPostingCompleteListener) {
-        registerListener(REQUEST_POST_PHOTO, onPostingCompleteListener);
-    }
-
-    public void requestCheckIsFriend(String userID) {
-        requestCheckIsFriend(userID, null);
-    }
-
-    public void requestCheckIsFriend(String userID, OnCheckIsFriendCompleteListener onCheckIsFriendCompleteListener) {
-        registerListener(REQUEST_CHECK_IS_FRIEND, onCheckIsFriendCompleteListener);
-    }
-
-    public void requestAddFriend(String userID) {
-        requestAddFriend(userID, null);
-    }
-
-    public void requestAddFriend(String userID, OnRequestAddFriendCompleteListener onRequestAddFriendCompleteListener) {
-        registerListener(REQUEST_ADD_FRIEND, onRequestAddFriendCompleteListener);
-    }
-
-    public void requestRemoveFriend(String userID) {
-        requestRemoveFriend(userID, null);
-    }
-
-    public void requestRemoveFriend(String userID, OnRequestRemoveFriendCompleteListener onRequestRemoveFriendCompleteListener) {
-        registerListener(REQUEST_REMOVE_FRIEND, onRequestRemoveFriendCompleteListener);
-    }
-
-    public void cancelLoginRequest() {
-        mLocalListeners.remove(REQUEST_LOGIN);
-    }
-
-    public void cancelGetCurrentSocialPersonRequest() {
-        mLocalListeners.remove(REQUEST_GET_CURRENT_PERSON);
-    }
-
-    public void cancelGetSocialPersonRequest() {
-        mLocalListeners.remove(REQUEST_GET_PERSON);
-    }
-
-    public void cancelPostMessageRequest() {
-        mLocalListeners.remove(REQUEST_POST_MESSAGE);
-    }
-
-    public void cancelPostPhotoRequest() {
-        mLocalListeners.remove(REQUEST_POST_PHOTO);
-    }
-
-    public void cancelCheckIsFriendRequest() {
-        mLocalListeners.remove(REQUEST_CHECK_IS_FRIEND);
-    }
-
-    public void cancelAddFriendRequest() {
-        mLocalListeners.remove(REQUEST_ADD_FRIEND);
-    }
-
-    public void cancelRemoveFriendRequest() {
-        mLocalListeners.remove(REQUEST_REMOVE_FRIEND);
-    }
-
-    public void cancelAll() {
-        Log.d(TAG, this + ":SocialNetwork.cancelAll()");
-
-        // we need to call all, because in implementations we can possible do aditional work in specific methods
-        cancelLoginRequest();
-        cancelGetCurrentSocialPersonRequest();
-        cancelGetSocialPersonRequest();
-        cancelPostMessageRequest();
-        cancelPostPhotoRequest();
-        cancelCheckIsFriendRequest();
-        cancelAddFriendRequest();
-        cancelRemoveFriendRequest();
-
-        // remove all local listeners
-        mLocalListeners = new HashMap<String, SocialNetworkListener>();
-    }
-
-    //////////////////// UTIL METHODS ////////////////////
-
-    protected void checkRequestState(AsyncTask request) throws SocialNetworkException {
-        if (request != null) {
-            throw new SocialNetworkException("Request is already running");
-        }
-    }
-
-    private void registerListener(String listenerID, SocialNetworkListener socialNetworkListener) {
-        if (socialNetworkListener != null) {
-            mLocalListeners.put(listenerID, socialNetworkListener);
-        } else {
-            mLocalListeners.put(listenerID, mGlobalListeners.get(listenerID));
-        }
-    }
-
-    //////////////////// SETTERS FOR GLOBAL LISTENERS ////////////////////
-
-    public void setOnLoginCompleteListener(OnLoginCompleteListener onLoginCompleteListener) {
-        mGlobalListeners.put(REQUEST_LOGIN, onLoginCompleteListener);
-    }
-
-    public void setOnRequestCurrentPersonCompleteListener(OnRequestSocialPersonCompleteListener onRequestCurrentPersonCompleteListener) {
-        mGlobalListeners.put(REQUEST_GET_CURRENT_PERSON, onRequestCurrentPersonCompleteListener);
-    }
-
-    public void setOnRequestSocialPersonCompleteListener(OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
-        mGlobalListeners.put(REQUEST_GET_PERSON, onRequestSocialPersonCompleteListener);
-    }
-
-    public void setOnCheckIsFriendListener(OnCheckIsFriendCompleteListener onCheckIsFriendListener) {
-        mGlobalListeners.put(REQUEST_CHECK_IS_FRIEND, onCheckIsFriendListener);
-    }
-
-    public void setOnPostingMessageCompleteListener(OnPostingCompleteListener onPostingCompleteListener) {
-        mGlobalListeners.put(REQUEST_POST_MESSAGE, onPostingCompleteListener);
-    }
-
-    public void setOnPostingPhotoCompleteListener(OnPostingCompleteListener onPostingCompleteListener) {
-        mGlobalListeners.put(REQUEST_POST_PHOTO, onPostingCompleteListener);
-    }
-
-    public void setOnRequestAddFriendCompleteListener(OnRequestAddFriendCompleteListener onRequestAddFriendCompleteListener) {
-        mGlobalListeners.put(REQUEST_ADD_FRIEND, onRequestAddFriendCompleteListener);
-    }
-
-    public void setOnRequestRemoveFriendCompleteListener(OnRequestRemoveFriendCompleteListener onRequestRemoveFriendCompleteListener) {
-        mGlobalListeners.put(REQUEST_REMOVE_FRIEND, onRequestRemoveFriendCompleteListener);
-    }
-}
diff --git a/library/src/main/java/com/androidsocialnetworks/lib/SocialNetworkManager.java b/library/src/main/java/com/androidsocialnetworks/lib/SocialNetworkManager.java
deleted file mode 100644
index 4c676e5..0000000
--- a/library/src/main/java/com/androidsocialnetworks/lib/SocialNetworkManager.java
+++ /dev/null
@@ -1,289 +0,0 @@
-package com.androidsocialnetworks.lib;
-
-import android.content.Context;
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.text.TextUtils;
-import android.util.Log;
-
-import com.androidsocialnetworks.lib.impl.FacebookSocialNetwork;
-import com.androidsocialnetworks.lib.impl.GooglePlusSocialNetwork;
-import com.androidsocialnetworks.lib.impl.LinkedInSocialNetwork;
-import com.androidsocialnetworks.lib.impl.TwitterSocialNetwork;
-import com.facebook.internal.Utility;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-public class SocialNetworkManager extends Fragment {
-
-    private static final String TAG = SocialNetworkManager.class.getSimpleName();
-    private static final String PARAM_TWITTER_KEY = "SocialNetworkManager.PARAM_TWITTER_KEY";
-    private static final String PARAM_TWITTER_SECRET = "SocialNetworkManager.PARAM_TWITTER_SECRET";
-    private static final String PARAM_LINKEDIN_KEY = "SocialNetworkManager.PARAM_LINKEDIN_KEY";
-    private static final String PARAM_LINKEDIN_SECRET = "SocialNetworkManager.PARAM_LINKEDIN_SECRET";
-    private static final String PARAM_LINKEDIN_PERMISSIONS = "SocialNetworkManager.PARAM_LINKEDIN_PERMISSIONS";
-    private static final String PARAM_FACEBOOK = "SocialNetworkManager.PARAM_FACEBOOK";
-    private static final String PARAM_GOOGLE_PLUS = "SocialNetworkManager.PARAM_GOOGLE_PLUS";
-
-    private Map<Integer, SocialNetwork> mSocialNetworksMap = new HashMap<Integer, SocialNetwork>();
-    private OnInitializationCompleteListener mOnInitializationCompleteListener;
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        Log.d(TAG, "SocialNetworkManager.onCreate");
-
-        setRetainInstance(true);
-
-        Bundle args = getArguments();
-
-        final String paramTwitterKey = args.getString(PARAM_TWITTER_KEY);
-        final String paramTwitterSecret = args.getString(PARAM_TWITTER_SECRET);
-
-        final String paramLinkedInKey = args.getString(PARAM_LINKEDIN_KEY);
-        final String paramLinkedInSecret = args.getString(PARAM_LINKEDIN_SECRET);
-        final String paramLinkedInPermissions = args.getString(PARAM_LINKEDIN_PERMISSIONS);
-
-        final boolean paramFacebook = args.getBoolean(PARAM_FACEBOOK, false);
-        final boolean paramGooglePlus = args.getBoolean(PARAM_GOOGLE_PLUS, false);
-
-        if (!TextUtils.isEmpty(paramTwitterKey) || !TextUtils.isEmpty(paramTwitterKey)) {
-            mSocialNetworksMap.put(TwitterSocialNetwork.ID,
-                    new TwitterSocialNetwork(this, paramTwitterKey, paramTwitterSecret));
-        }
-
-        if (!TextUtils.isEmpty(paramLinkedInKey) || !TextUtils.isEmpty(paramLinkedInSecret)) {
-            mSocialNetworksMap.put(LinkedInSocialNetwork.ID,
-                    new LinkedInSocialNetwork(this, paramLinkedInKey, paramLinkedInSecret, paramLinkedInPermissions));
-        }
-
-        if (paramFacebook) {
-            mSocialNetworksMap.put(FacebookSocialNetwork.ID, new FacebookSocialNetwork(this));
-        }
-
-        if (paramGooglePlus) {
-            mSocialNetworksMap.put(GooglePlusSocialNetwork.ID, new GooglePlusSocialNetwork(this));
-        }
-
-        for (SocialNetwork socialNetwork : mSocialNetworksMap.values()) {
-            socialNetwork.onCreate(savedInstanceState);
-        }
-    }
-
-    @Override
-    public void onStart() {
-        super.onStart();
-        Log.d(TAG, "SocialNetworkManager.onStart");
-
-        for (SocialNetwork socialNetwork : mSocialNetworksMap.values()) {
-            socialNetwork.onStart();
-        }
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        Log.d(TAG, "SocialNetworkManager.onResume");
-
-        for (SocialNetwork socialNetwork : mSocialNetworksMap.values()) {
-            socialNetwork.onResume();
-        }
-
-        if (mOnInitializationCompleteListener != null) {
-            Log.d(TAG, "SocialNetworkManager.onResume: mOnInitializationCompleteListener != null");
-            mOnInitializationCompleteListener.onSocialNetworkManagerInitialized();
-        }
-    }
-
-    @Override
-    public void onPause() {
-        super.onPause();
-        Log.d(TAG, "SocialNetworkManager.onPause");
-
-        for (SocialNetwork socialNetwork : mSocialNetworksMap.values()) {
-            socialNetwork.onPause();
-        }
-    }
-
-    @Override
-    public void onStop() {
-        super.onStop();
-        Log.d(TAG, "SocialNetworkManager.onStop");
-
-        for (SocialNetwork socialNetwork : mSocialNetworksMap.values()) {
-            socialNetwork.onStop();
-        }
-    }
-
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-        Log.d(TAG, "SocialNetworkManager.onDestroy");
-
-        for (SocialNetwork socialNetwork : mSocialNetworksMap.values()) {
-            socialNetwork.onDestroy();
-        }
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-        Log.d(TAG, "SocialNetworkManager.onSaveInstanceState");
-
-        for (SocialNetwork socialNetwork : mSocialNetworksMap.values()) {
-            socialNetwork.onSaveInstanceState(outState);
-        }
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        Log.d(TAG, "SocialNetworkManager.onActivityResult: " + requestCode + " : " + resultCode);
-
-        for (SocialNetwork socialNetwork : mSocialNetworksMap.values()) {
-            socialNetwork.onActivityResult(requestCode, resultCode, data);
-        }
-    }
-
-    public TwitterSocialNetwork getTwitterSocialNetwork() throws SocialNetworkException {
-        if (!mSocialNetworksMap.containsKey(TwitterSocialNetwork.ID)) {
-            throw new SocialNetworkException("Twitter wasn't initialized...");
-        }
-
-        return (TwitterSocialNetwork) mSocialNetworksMap.get(TwitterSocialNetwork.ID);
-    }
-
-    public LinkedInSocialNetwork getLinkedInSocialNetwork() throws SocialNetworkException {
-        if (!mSocialNetworksMap.containsKey(LinkedInSocialNetwork.ID)) {
-            throw new SocialNetworkException("LinkedIn wasn't initialized...");
-        }
-
-        return (LinkedInSocialNetwork) mSocialNetworksMap.get(LinkedInSocialNetwork.ID);
-    }
-
-    public FacebookSocialNetwork getFacebookSocialNetwork() throws SocialNetworkException {
-        if (!mSocialNetworksMap.containsKey(FacebookSocialNetwork.ID)) {
-            throw new IllegalStateException("Facebook wasn't initialized...");
-        }
-
-        return (FacebookSocialNetwork) mSocialNetworksMap.get(FacebookSocialNetwork.ID);
-    }
-
-    public GooglePlusSocialNetwork getGooglePlusSocialNetwork() {
-        if (!mSocialNetworksMap.containsKey(GooglePlusSocialNetwork.ID)) {
-            throw new IllegalStateException("Facebook wasn't initialized...");
-        }
-
-        return (GooglePlusSocialNetwork) mSocialNetworksMap.get(GooglePlusSocialNetwork.ID);
-    }
-
-    public SocialNetwork getSocialNetwork(int id) throws SocialNetworkException {
-        if (!mSocialNetworksMap.containsKey(id)) {
-            throw new SocialNetworkException("Social network with id = " + id + " not found");
-        }
-
-        return mSocialNetworksMap.get(id);
-    }
-
-    public void addSocialNetwork(SocialNetwork socialNetwork) {
-        if (mSocialNetworksMap.get(socialNetwork.getID()) != null) {
-            throw new SocialNetworkException("Social network with id = " + socialNetwork.getID() + " already exists");
-        }
-
-        mSocialNetworksMap.put(socialNetwork.getID(), socialNetwork);
-    }
-
-    public List<SocialNetwork> getInitializedSocialNetworks() {
-        return Collections.unmodifiableList(new ArrayList<SocialNetwork>(mSocialNetworksMap.values()));
-    }
-
-    public void setOnInitializationCompleteListener(OnInitializationCompleteListener onInitializationCompleteListener) {
-        mOnInitializationCompleteListener = onInitializationCompleteListener;
-    }
-
-    public static interface OnInitializationCompleteListener {
-        public void onSocialNetworkManagerInitialized();
-    }
-
-    public static class Builder {
-        private String twitterConsumerKey, twitterConsumerSecret;
-        private String linkedInConsumerKey, linkedInConsumerSecret, linkedInPermissions;
-        private boolean facebook;
-        private boolean googlePlus;
-
-        private Context mContext;
-
-        private Builder(Context context) {
-            mContext = context;
-        }
-
-        public static Builder from(Context context) {
-            return new Builder(context);
-        }
-
-        public Builder twitter(String consumerKey, String consumerSecret) {
-            twitterConsumerKey = consumerKey;
-            twitterConsumerSecret = consumerSecret;
-            return this;
-        }
-
-        public Builder linkedIn(String consumerKey, String consumerSecret, String permissions) {
-            linkedInConsumerKey = consumerKey;
-            linkedInConsumerSecret = consumerSecret;
-            linkedInPermissions = permissions;
-            return this;
-        }
-
-        // https://developers.facebook.com/docs/android/getting-started/
-        public Builder facebook() {
-            String applicationID = Utility.getMetadataApplicationId(mContext);
-
-            if (applicationID == null) {
-                throw new IllegalStateException("applicationID can't be null\n" +
-                        "Please check https://developers.facebook.com/docs/android/getting-started/");
-            }
-
-            facebook = true;
-
-            return this;
-        }
-
-        public Builder googlePlus() {
-            googlePlus = true;
-            return this;
-        }
-
-        public SocialNetworkManager build() {
-            Bundle args = new Bundle();
-
-            if (!TextUtils.isEmpty(twitterConsumerKey) && !TextUtils.isEmpty(twitterConsumerSecret)) {
-                args.putString(PARAM_TWITTER_KEY, twitterConsumerKey);
-                args.putString(PARAM_TWITTER_SECRET, twitterConsumerSecret);
-            }
-
-            if (!TextUtils.isEmpty(linkedInConsumerKey) && !TextUtils.isEmpty(linkedInConsumerSecret)
-                    && !TextUtils.isEmpty(linkedInPermissions)) {
-                args.putString(PARAM_LINKEDIN_KEY, linkedInConsumerKey);
-                args.putString(PARAM_LINKEDIN_SECRET, linkedInConsumerSecret);
-                args.putString(PARAM_LINKEDIN_PERMISSIONS, linkedInPermissions);
-            }
-
-            if (facebook) {
-                args.putBoolean(PARAM_FACEBOOK, true);
-            }
-
-            if (googlePlus) {
-                args.putBoolean(PARAM_GOOGLE_PLUS, true);
-            }
-
-            SocialNetworkManager socialNetworkManager = new SocialNetworkManager();
-            socialNetworkManager.setArguments(args);
-            return socialNetworkManager;
-        }
-    }
-}
diff --git a/library/src/main/java/com/androidsocialnetworks/lib/impl/FacebookSocialNetwork.java b/library/src/main/java/com/androidsocialnetworks/lib/impl/FacebookSocialNetwork.java
deleted file mode 100644
index 985f63f..0000000
--- a/library/src/main/java/com/androidsocialnetworks/lib/impl/FacebookSocialNetwork.java
+++ /dev/null
@@ -1,398 +0,0 @@
-package com.androidsocialnetworks.lib.impl;
-
-import android.content.Context;
-import android.content.Intent;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.util.Log;
-
-import com.androidsocialnetworks.lib.SocialNetwork;
-import com.androidsocialnetworks.lib.SocialNetworkException;
-import com.androidsocialnetworks.lib.SocialPerson;
-import com.androidsocialnetworks.lib.listener.OnCheckIsFriendCompleteListener;
-import com.androidsocialnetworks.lib.listener.OnLoginCompleteListener;
-import com.androidsocialnetworks.lib.listener.OnPostingCompleteListener;
-import com.androidsocialnetworks.lib.listener.OnRequestAddFriendCompleteListener;
-import com.androidsocialnetworks.lib.listener.OnRequestRemoveFriendCompleteListener;
-import com.androidsocialnetworks.lib.listener.OnRequestSocialPersonCompleteListener;
-import com.facebook.FacebookAuthorizationException;
-import com.facebook.FacebookOperationCanceledException;
-import com.facebook.Request;
-import com.facebook.Response;
-import com.facebook.Session;
-import com.facebook.SessionDefaultAudience;
-import com.facebook.SessionLoginBehavior;
-import com.facebook.SessionState;
-import com.facebook.UiLifecycleHelper;
-import com.facebook.internal.SessionTracker;
-import com.facebook.internal.Utility;
-import com.facebook.model.GraphUser;
-
-import java.io.File;
-import java.util.Collections;
-
-/**
- * TODO: think about canceling requests
- */
-public class FacebookSocialNetwork extends SocialNetwork {
-    public static final int ID = 4;
-
-    private static final String TAG = FacebookSocialNetwork.class.getSimpleName();
-    private static final String PERMISSION = "publish_actions";
-    private SessionTracker mSessionTracker;
-    private UiLifecycleHelper mUILifecycleHelper;
-    private String mApplicationId;
-    private SessionState mSessionState;
-    private String mPhotoPath;
-    private String mStatus;
-    private PendingAction mPendingAction = PendingAction.NONE;
-    private Session.StatusCallback mSessionStatusCallback = new Session.StatusCallback() {
-        @Override
-        public void call(Session session, SessionState state, Exception exception) {
-            onSessionStateChange(session, state, exception);
-        }
-    };
-
-    public FacebookSocialNetwork(Fragment fragment) {
-        super(fragment);
-    }
-
-    @Override
-    public boolean isConnected() {
-        Session session = Session.getActiveSession();
-        return (session != null && session.isOpened());
-    }
-
-    @Override
-    public void requestLogin(OnLoginCompleteListener onLoginCompleteListener) {
-        super.requestLogin(onLoginCompleteListener);
-
-        final Session openSession = mSessionTracker.getOpenSession();
-
-        if (openSession != null) {
-            if (mLocalListeners.get(REQUEST_LOGIN) != null) {
-                mLocalListeners.get(REQUEST_LOGIN).onError(getID(), REQUEST_LOGIN, "already loginned", null);
-            }
-        }
-
-        Session currentSession = mSessionTracker.getSession();
-        if (currentSession == null || currentSession.getState().isClosed()) {
-            mSessionTracker.setSession(null);
-            Session session = new Session.Builder(mSocialNetworkManager.getActivity())
-                    .setApplicationId(mApplicationId).build();
-            Session.setActiveSession(session);
-            currentSession = session;
-        }
-
-        if (!currentSession.isOpened()) {
-            Session.OpenRequest openRequest = null;
-            openRequest = new Session.OpenRequest(mSocialNetworkManager);
-
-            openRequest.setDefaultAudience(SessionDefaultAudience.EVERYONE);
-            openRequest.setPermissions(Collections.<String>emptyList());
-            openRequest.setLoginBehavior(SessionLoginBehavior.SSO_WITH_FALLBACK);
-
-            currentSession.openForRead(openRequest);
-        }
-    }
-
-    @Override
-    public void logout() {
-        if (mSessionTracker == null) return;
-
-        final Session openSession = mSessionTracker.getOpenSession();
-
-        if (openSession != null) {
-            openSession.closeAndClearTokenInformation();
-        }
-    }
-
-    @Override
-    public int getID() {
-        return ID;
-    }
-
-    @Override
-    public void requestCurrentPerson(OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
-        super.requestCurrentPerson(onRequestSocialPersonCompleteListener);
-
-        final Session currentSession = mSessionTracker.getOpenSession();
-
-        if (currentSession == null) {
-            if (mLocalListeners.get(REQUEST_GET_CURRENT_PERSON) != null) {
-                mLocalListeners.get(REQUEST_GET_CURRENT_PERSON).onError(getID(),
-                        REQUEST_GET_CURRENT_PERSON, "please login first", null);
-            }
-
-            return;
-        }
-
-        Request request = Request.newMeRequest(currentSession, new Request.GraphUserCallback() {
-            @Override
-            public void onCompleted(GraphUser me, Response response) {
-                if (response.getError() != null) {
-                    if (mLocalListeners.get(REQUEST_GET_CURRENT_PERSON) != null) {
-                        mLocalListeners.get(REQUEST_GET_CURRENT_PERSON).onError(
-                                getID(), REQUEST_GET_CURRENT_PERSON, response.getError().getErrorMessage()
-                                , null);
-                    }
-
-                    return;
-                }
-
-                if (mLocalListeners.get(REQUEST_GET_CURRENT_PERSON) != null) {
-                    SocialPerson socialPerson = new SocialPerson();
-                    socialPerson.id = me.getId();
-                    socialPerson.name = me.getName();
-                    socialPerson.avatarURL =
-                            String.format("http://graph.facebook.com/%s/picture?width=200&height=200", me.getUsername());
-
-                    ((OnRequestSocialPersonCompleteListener) mLocalListeners.get(REQUEST_GET_CURRENT_PERSON))
-                            .onRequestSocialPersonSuccess(getID(), socialPerson);
-                }
-            }
-        });
-        request.executeAsync();
-    }
-
-    @Override
-    public void requestSocialPerson(String userID, OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
-        throw new SocialNetworkException("requestSocialPerson isn't allowed for FacebookSocialNetwork");
-    }
-
-    @Override
-    public void requestPostMessage(String message, OnPostingCompleteListener onPostingCompleteListener) {
-        super.requestPostMessage(message, onPostingCompleteListener);
-        mStatus = message;
-        performPublish(PendingAction.POST_STATUS_UPDATE);
-    }
-
-    @Override
-    public void requestPostPhoto(File photo, String message, OnPostingCompleteListener onPostingCompleteListener) {
-        super.requestPostPhoto(photo, message, onPostingCompleteListener);
-        mPhotoPath = photo.getAbsolutePath();
-        performPublish(PendingAction.POST_PHOTO);
-    }
-
-    private void performPublish(PendingAction action) {
-        Session session = Session.getActiveSession();
-        if (session != null) {
-            mPendingAction = action;
-            if (hasPublishPermission()) {
-                // We can do the action right away.
-                handlePendingAction();
-                return;
-            } else if (session.isOpened()) {
-                // We need to get new permissions, then complete the action when we get called back.
-                session.requestNewPublishPermissions(new Session.NewPermissionsRequest(mSocialNetworkManager.getActivity(), PERMISSION));
-                return;
-            }
-        }
-
-        if (action == PendingAction.POST_STATUS_UPDATE) {
-            if (mLocalListeners.get(REQUEST_POST_MESSAGE) != null) {
-                mLocalListeners.get(REQUEST_POST_MESSAGE).onError(getID(),
-                        REQUEST_POST_MESSAGE, "no session", null);
-            }
-        }
-
-        if (action == PendingAction.POST_PHOTO) {
-            if (mLocalListeners.get(REQUEST_POST_PHOTO) != null) {
-                mLocalListeners.get(REQUEST_POST_PHOTO).onError(getID(),
-                        REQUEST_POST_PHOTO, "no session", null);
-            }
-        }
-    }
-
-    @Override
-    public void requestCheckIsFriend(String userID, OnCheckIsFriendCompleteListener onCheckIsFriendCompleteListener) {
-        throw new SocialNetworkException("requestCheckIsFriend isn't allowed for FacebookSocialNetwork");
-    }
-
-    @Override
-    public void requestAddFriend(String userID, OnRequestAddFriendCompleteListener onRequestAddFriendCompleteListener) {
-        throw new SocialNetworkException("requestAddFriend isn't allowed for FacebookSocialNetwork");
-    }
-
-    @Override
-    public void requestRemoveFriend(String userID, OnRequestRemoveFriendCompleteListener onRequestRemoveFriendCompleteListener) {
-        throw new SocialNetworkException("requestRemoveFriend isn't allowed for FacebookSocialNetwork");
-    }
-
-    private void onSessionStateChange(Session session, SessionState state, Exception exception) {
-        Log.d(TAG, "onSessionStateChange: " + state + " : " + exception);
-
-        if (mSessionState == SessionState.OPENING && state == SessionState.OPENED) {
-            if (mLocalListeners.get(REQUEST_LOGIN) != null) {
-                ((OnLoginCompleteListener) mLocalListeners.get(REQUEST_LOGIN)).onLoginSuccess(getID());
-                mLocalListeners.remove(REQUEST_LOGIN);
-            }
-        }
-
-        if (state == SessionState.CLOSED_LOGIN_FAILED) {
-            if (mLocalListeners.get(REQUEST_LOGIN) != null) {
-                mLocalListeners.get(REQUEST_LOGIN).onError(getID(), REQUEST_LOGIN, exception.getMessage(), null);
-                mLocalListeners.remove(REQUEST_LOGIN);
-            }
-        }
-
-        mSessionState = state;
-
-        if (mPendingAction != PendingAction.NONE &&
-                (exception instanceof FacebookOperationCanceledException ||
-                        exception instanceof FacebookAuthorizationException)) {
-            mPendingAction = PendingAction.NONE;
-
-            if (mLocalListeners.get(REQUEST_POST_MESSAGE) != null) {
-                mLocalListeners.get(REQUEST_POST_MESSAGE).onError(getID(),
-                        REQUEST_POST_MESSAGE, "permission not granted", null);
-            }
-
-            if (mLocalListeners.get(REQUEST_POST_PHOTO) != null) {
-                mLocalListeners.get(REQUEST_POST_PHOTO).onError(getID(),
-                        REQUEST_POST_PHOTO, "permission not granted", null);
-            }
-        }
-
-        if (session.getPermissions().contains(PERMISSION)
-                && state == SessionState.OPENED_TOKEN_UPDATED) {
-            handlePendingAction();
-        }
-    }
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        mUILifecycleHelper = new UiLifecycleHelper(mSocialNetworkManager.getActivity(), mSessionStatusCallback);
-        mUILifecycleHelper.onCreate(savedInstanceState);
-
-        initializeActiveSessionWithCachedToken(mSocialNetworkManager.getActivity());
-        finishInit();
-    }
-
-    private boolean initializeActiveSessionWithCachedToken(Context context) {
-        if (context == null) {
-            return false;
-        }
-
-        Session session = Session.getActiveSession();
-        if (session != null) {
-            return session.isOpened();
-        }
-
-        mApplicationId = Utility.getMetadataApplicationId(context);
-        if (mApplicationId == null) {
-            return false;
-        }
-
-        return Session.openActiveSessionFromCache(context) != null;
-    }
-
-    private void finishInit() {
-        mSessionTracker = new SessionTracker(
-                mSocialNetworkManager.getActivity(), mSessionStatusCallback, null, false);
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        mUILifecycleHelper.onResume();
-    }
-
-    @Override
-    public void onPause() {
-        super.onPause();
-        mUILifecycleHelper.onPause();
-    }
-
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-        mUILifecycleHelper.onDestroy();
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-        mUILifecycleHelper.onSaveInstanceState(outState);
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        mUILifecycleHelper.onActivityResult(requestCode, resultCode, data, null);
-    }
-
-    private boolean hasPublishPermission() {
-        Session session = Session.getActiveSession();
-        return session != null && session.getPermissions().contains(PERMISSION);
-    }
-
-    @SuppressWarnings("incomplete-switch")
-    private void handlePendingAction() {
-        PendingAction previouslyPendingAction = mPendingAction;
-        // These actions may re-set pendingAction if they are still pending, but we assume they
-        // will succeed.
-        mPendingAction = PendingAction.NONE;
-
-        switch (previouslyPendingAction) {
-            case POST_PHOTO:
-                postPhoto(mPhotoPath);
-                break;
-            case POST_STATUS_UPDATE:
-                postStatusUpdate(mStatus);
-                break;
-        }
-    }
-
-    private void postStatusUpdate(String message) {
-        if (isConnected() && hasPublishPermission()) {
-            Request request = Request
-                    .newStatusUpdateRequest(Session.getActiveSession(), message, null, null, new Request.Callback() {
-                        @Override
-                        public void onCompleted(Response response) {
-                            publishSuccess(REQUEST_POST_MESSAGE,
-                                    response.getError() == null ? null : response.getError().getErrorMessage());
-                        }
-                    });
-            request.executeAsync();
-        } else {
-            mPendingAction = PendingAction.POST_STATUS_UPDATE;
-        }
-    }
-
-    private void postPhoto(final String path) {
-        if (hasPublishPermission()) {
-            Bitmap image = BitmapFactory.decodeFile(path);
-            Request request = Request.newUploadPhotoRequest(Session.getActiveSession(), image, new Request.Callback() {
-                @Override
-                public void onCompleted(Response response) {
-                    publishSuccess(REQUEST_POST_PHOTO,
-                            response.getError() == null ? null : response.getError().getErrorMessage());
-                }
-            });
-            request.executeAsync();
-        } else {
-            mPendingAction = PendingAction.POST_PHOTO;
-        }
-    }
-
-    private void publishSuccess(String requestID, String error) {
-        if (mLocalListeners.get(requestID) == null) return;
-
-        if (error != null) {
-            mLocalListeners.get(requestID).onError(getID(), requestID, error, null);
-            return;
-        }
-
-        ((OnPostingCompleteListener) mLocalListeners.get(requestID)).onPostSuccessfully(getID());
-        mLocalListeners.remove(requestID);
-    }
-
-    private enum PendingAction {
-        NONE,
-        POST_PHOTO,
-        POST_STATUS_UPDATE
-    }
-}
diff --git a/library/src/main/java/com/androidsocialnetworks/lib/impl/GooglePlusSocialNetwork.java b/library/src/main/java/com/androidsocialnetworks/lib/impl/GooglePlusSocialNetwork.java
deleted file mode 100644
index ccde479..0000000
--- a/library/src/main/java/com/androidsocialnetworks/lib/impl/GooglePlusSocialNetwork.java
+++ /dev/null
@@ -1,232 +0,0 @@
-package com.androidsocialnetworks.lib.impl;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-import android.os.Handler;
-import android.support.v4.app.Fragment;
-import android.util.Log;
-
-import com.androidsocialnetworks.lib.MomentUtil;
-import com.androidsocialnetworks.lib.SocialNetwork;
-import com.androidsocialnetworks.lib.SocialNetworkException;
-import com.androidsocialnetworks.lib.SocialPerson;
-import com.androidsocialnetworks.lib.listener.OnCheckIsFriendCompleteListener;
-import com.androidsocialnetworks.lib.listener.OnLoginCompleteListener;
-import com.androidsocialnetworks.lib.listener.OnPostingCompleteListener;
-import com.androidsocialnetworks.lib.listener.OnRequestAddFriendCompleteListener;
-import com.androidsocialnetworks.lib.listener.OnRequestRemoveFriendCompleteListener;
-import com.androidsocialnetworks.lib.listener.OnRequestSocialPersonCompleteListener;
-import com.google.android.gms.common.ConnectionResult;
-import com.google.android.gms.common.GooglePlayServicesClient;
-import com.google.android.gms.plus.PlusClient;
-import com.google.android.gms.plus.model.people.Person;
-
-import java.io.File;
-import java.util.UUID;
-
-public class GooglePlusSocialNetwork extends SocialNetwork
-        implements GooglePlayServicesClient.ConnectionCallbacks, GooglePlayServicesClient.OnConnectionFailedListener {
-
-    public static final int ID = 3;
-
-    private static final String TAG = GooglePlusSocialNetwork.class.getSimpleName();
-    // max 16 bit to use in startActivityForResult
-    private static final int REQUEST_AUTH = UUID.randomUUID().hashCode() & 0xFFFF;
-
-    private PlusClient mPlusClient;
-    private ConnectionResult mConnectionResult;
-
-    private boolean mConnectRequested;
-
-    private Handler mHandler = new Handler();
-
-    public GooglePlusSocialNetwork(Fragment fragment) {
-        super(fragment);
-    }
-
-    @Override
-    public boolean isConnected() {
-        return mPlusClient.isConnected();
-    }
-
-    @Override
-    public void requestLogin(OnLoginCompleteListener onLoginCompleteListener) {
-        super.requestLogin(onLoginCompleteListener);
-
-        mConnectRequested = true;
-
-        try {
-            mConnectionResult.startResolutionForResult(mSocialNetworkManager.getActivity(), REQUEST_AUTH);
-        } catch (Exception e) {
-            Log.e(TAG, "ERROR", e);
-            if (!mPlusClient.isConnecting()) {
-                mPlusClient.connect();
-            }
-        }
-    }
-
-    @Override
-    public void logout() {
-        mConnectRequested = false;
-
-        if (mPlusClient.isConnected()) {
-            mPlusClient.clearDefaultAccount();
-            mPlusClient.disconnect();
-            mPlusClient.connect();
-        }
-    }
-
-    @Override
-    public int getID() {
-        return ID;
-    }
-
-    @Override
-    public void requestCurrentPerson(OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
-        super.requestCurrentPerson(onRequestSocialPersonCompleteListener);
-
-        Person person = mPlusClient.getCurrentPerson();
-
-        if (person == null) {
-            if (mLocalListeners.get(REQUEST_GET_CURRENT_PERSON) != null) {
-                mHandler.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        mLocalListeners.get(REQUEST_GET_CURRENT_PERSON)
-                                .onError(getID(), REQUEST_GET_CURRENT_PERSON, "Can't get person", null);
-                    }
-                });
-            }
-
-            return;
-        }
-
-        final SocialPerson socialPerson = new SocialPerson();
-        socialPerson.id = person.getId();
-        socialPerson.name = person.getDisplayName();
-
-        Person.Image image = person.getImage();
-        if (image != null) {
-            String imageURL = image.getUrl();
-
-            if (imageURL != null) {
-                socialPerson.avatarURL = imageURL;
-            }
-        }
-
-        if (mLocalListeners.get(REQUEST_GET_CURRENT_PERSON) != null) {
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    ((OnRequestSocialPersonCompleteListener)
-                            mLocalListeners.get(REQUEST_GET_CURRENT_PERSON))
-                            .onRequestSocialPersonSuccess(getID(), socialPerson);
-                }
-            });
-        }
-    }
-
-    @Override
-    public void requestSocialPerson(String userID, OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
-        throw new SocialNetworkException("requestSocialPerson isn't allowed for GooglePlusSocialNetwork");
-    }
-
-    @Override
-    public void requestPostMessage(String message, OnPostingCompleteListener onPostingCompleteListener) {
-        throw new SocialNetworkException("requestPostMessage isn't allowed for GooglePlusSocialNetwork");
-    }
-
-    @Override
-    public void requestPostPhoto(File photo, String message, OnPostingCompleteListener onPostingCompleteListener) {
-        throw new SocialNetworkException("requestPostPhoto isn't allowed for GooglePlusSocialNetwork");
-    }
-
-    @Override
-    public void requestCheckIsFriend(String userID, OnCheckIsFriendCompleteListener onCheckIsFriendCompleteListener) {
-        throw new SocialNetworkException("requestCheckIsFriend isn't allowed for GooglePlusSocialNetwork");
-    }
-
-    @Override
-    public void requestAddFriend(String userID, OnRequestAddFriendCompleteListener onRequestAddFriendCompleteListener) {
-        throw new SocialNetworkException("requestAddFriend isn't allowed for GooglePlusSocialNetwork");
-    }
-
-    @Override
-    public void requestRemoveFriend(String userID, OnRequestRemoveFriendCompleteListener onRequestRemoveFriendCompleteListener) {
-        throw new SocialNetworkException("requestRemoveFriend isn't allowed for GooglePlusSocialNetwork");
-    }
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        mPlusClient = new PlusClient.Builder(mSocialNetworkManager.getActivity(), this, this)
-                .setActions(MomentUtil.ACTIONS).build();
-    }
-
-    @Override
-    public void onStart() {
-        mPlusClient.connect();
-    }
-
-    @Override
-    public void onStop() {
-        if (mPlusClient.isConnected()) {
-            mPlusClient.disconnect();
-        }
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-
-        if (requestCode == REQUEST_AUTH) {
-            if (resultCode == Activity.RESULT_OK && !mPlusClient.isConnected() && !mPlusClient.isConnecting()) {
-                // This time, connect should succeed.
-                mPlusClient.connect();
-            } else if (resultCode == Activity.RESULT_CANCELED) {
-                if (mLocalListeners.get(REQUEST_LOGIN) != null) {
-                    mLocalListeners.get(REQUEST_LOGIN).onError(getID(), REQUEST_LOGIN,
-                            "canceled", null);
-                }
-            }
-        }
-    }
-
-    @Override
-    public void onConnected(Bundle bundle) {
-        if (mConnectRequested) {
-            if (mPlusClient.getCurrentPerson() != null) {
-                if (mLocalListeners.get(REQUEST_LOGIN) != null) {
-                    ((OnLoginCompleteListener) mLocalListeners.get(REQUEST_LOGIN)).onLoginSuccess(getID());
-                }
-
-                return;
-            }
-
-            if (mLocalListeners.get(REQUEST_LOGIN) != null) {
-                mLocalListeners.get(REQUEST_LOGIN).onError(getID(), REQUEST_LOGIN,
-                        "get person == null", null);
-            }
-        }
-
-        mConnectRequested = false;
-    }
-
-    @Override
-    public void onDisconnected() {
-        mConnectRequested = false;
-    }
-
-    @Override
-    public void onConnectionFailed(ConnectionResult connectionResult) {
-        mConnectionResult = connectionResult;
-
-        if (mConnectRequested && mLocalListeners.get(REQUEST_LOGIN) != null) {
-            mLocalListeners.get(REQUEST_LOGIN).onError(getID(), REQUEST_LOGIN,
-                    "error: " + connectionResult.getErrorCode(), null);
-        }
-
-        mConnectRequested = false;
-    }
-}
diff --git a/library/src/main/java/com/androidsocialnetworks/lib/impl/LinkedInSocialNetwork.java b/library/src/main/java/com/androidsocialnetworks/lib/impl/LinkedInSocialNetwork.java
deleted file mode 100644
index 19b45f1..0000000
--- a/library/src/main/java/com/androidsocialnetworks/lib/impl/LinkedInSocialNetwork.java
+++ /dev/null
@@ -1,542 +0,0 @@
-package com.androidsocialnetworks.lib.impl;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.text.TextUtils;
-import android.util.Log;
-
-import com.androidsocialnetworks.lib.OAuthActivity;
-import com.androidsocialnetworks.lib.OAuthSocialNetwork;
-import com.androidsocialnetworks.lib.SocialNetworkAsyncTask;
-import com.androidsocialnetworks.lib.SocialNetworkException;
-import com.androidsocialnetworks.lib.SocialPerson;
-import com.androidsocialnetworks.lib.listener.OnCheckIsFriendCompleteListener;
-import com.androidsocialnetworks.lib.listener.OnLoginCompleteListener;
-import com.androidsocialnetworks.lib.listener.OnPostingCompleteListener;
-import com.androidsocialnetworks.lib.listener.OnRequestAddFriendCompleteListener;
-import com.androidsocialnetworks.lib.listener.OnRequestRemoveFriendCompleteListener;
-import com.androidsocialnetworks.lib.listener.OnRequestSocialPersonCompleteListener;
-import com.google.code.linkedinapi.client.CommunicationsApiClient;
-import com.google.code.linkedinapi.client.LinkedInApiClient;
-import com.google.code.linkedinapi.client.LinkedInApiClientFactory;
-import com.google.code.linkedinapi.client.constant.ApplicationConstants;
-import com.google.code.linkedinapi.client.enumeration.ProfileField;
-import com.google.code.linkedinapi.client.oauth.LinkedInAccessToken;
-import com.google.code.linkedinapi.client.oauth.LinkedInOAuthService;
-import com.google.code.linkedinapi.client.oauth.LinkedInOAuthServiceFactory;
-import com.google.code.linkedinapi.client.oauth.LinkedInRequestToken;
-import com.google.code.linkedinapi.schema.Headers;
-import com.google.code.linkedinapi.schema.HttpHeader;
-import com.google.code.linkedinapi.schema.Person;
-import com.google.code.linkedinapi.schema.Position;
-
-import java.io.File;
-import java.util.EnumSet;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-import java.util.UUID;
-
-public class LinkedInSocialNetwork extends OAuthSocialNetwork {
-    public static final int ID = 2;
-
-    public static final String OAUTH_CALLBACK_SCHEME = "x-oauthflow-linkedin";
-    public static final String OAUTH_CALLBACK_HOST = "linkedinApiTestCallback";
-    public static final String OAUTH_CALLBACK_URL = String.format("%s://%s", OAUTH_CALLBACK_SCHEME, OAUTH_CALLBACK_HOST);
-    public static final String OAUTH_QUERY_TOKEN = "oauth_token";
-    public static final String OAUTH_QUERY_VERIFIER = "oauth_verifier";
-    public static final String OAUTH_QUERY_PROBLEM = "oauth_problem";
-
-    private static final String TAG = LinkedInSocialNetwork.class.getSimpleName();
-    private static final String SAVE_STATE_KEY_OAUTH_TOKEN = "LinkedInSocialNetwork.SAVE_STATE_KEY_OAUTH_TOKEN";
-    private static final String SAVE_STATE_KEY_OAUTH_SECRET = "LinkedInSocialNetwork.SAVE_STATE_KEY_OAUTH_SECRET";
-
-    private static final EnumSet<ProfileField> PROFILE_PARAMETERS = EnumSet.allOf(ProfileField.class);
-
-    // max 16 bit to use in startActivityForResult
-    private static final int REQUEST_AUTH = UUID.randomUUID().hashCode() & 0xFFFF;
-
-    private final LinkedInOAuthService mOAuthService;
-    private final LinkedInApiClientFactory mLinkedInApiClientFactory;
-
-    private String mOAuthTokenSecret;
-
-    public LinkedInSocialNetwork(Fragment fragment, String consumerKey, String consumerSecret, String permissions) {
-        super(fragment);
-        Log.d(TAG, "new LinkedInSocialNetwork: " + consumerKey + " : " + consumerSecret + " : " + permissions);
-
-        if (TextUtils.isEmpty(consumerKey) || TextUtils.isEmpty(consumerSecret) || TextUtils.isEmpty(permissions)) {
-            throw new IllegalArgumentException("TextUtils.isEmpty(fConsumerKey) || TextUtils.isEmpty(fConsumerSecret) || TextUtils.isEmpty(fPermissions)");
-        }
-
-        mOAuthService = LinkedInOAuthServiceFactory.getInstance()
-                .createLinkedInOAuthService(consumerKey, consumerSecret, permissions);
-        mLinkedInApiClientFactory = LinkedInApiClientFactory.newInstance(consumerKey, consumerSecret);
-    }
-
-    @Override
-    public boolean isConnected() {
-        String accessToken = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null);
-        String accessTokenSecret = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_SECRET, null);
-        return accessToken != null && accessTokenSecret != null;
-    }
-
-    @Override
-    public void requestLogin(OnLoginCompleteListener onLoginCompleteListener) {
-        super.requestLogin(onLoginCompleteListener);
-
-        executeRequest(new RequestLoginAsyncTask(), null, REQUEST_LOGIN);
-    }
-
-    @Override
-    public void logout() {
-        fatalError();
-    }
-
-    @Override
-    public int getID() {
-        return ID;
-    }
-
-    @Override
-    public void requestCurrentPerson(OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
-        super.requestCurrentPerson(onRequestSocialPersonCompleteListener);
-
-        executeRequest(new RequestCurrentPersonAsyncTask(), null, REQUEST_GET_CURRENT_PERSON);
-    }
-
-    @Override
-    public void requestSocialPerson(String userID, OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
-        super.requestSocialPerson(userID, onRequestSocialPersonCompleteListener);
-
-        Bundle args = new Bundle();
-        args.putString(RequestSocialPersonAsyncTask.PARAM_USER_ID, userID);
-        executeRequest(new RequestSocialPersonAsyncTask(), args, REQUEST_GET_PERSON);
-    }
-
-    @Override
-    public void requestPostMessage(String message, OnPostingCompleteListener onPostingCompleteListener) {
-        super.requestPostMessage(message, onPostingCompleteListener);
-
-        Bundle args = new Bundle();
-        args.putString(RequestPostMessageAsyncTask.PARAM_MESSAGE, message);
-        executeRequest(new RequestPostMessageAsyncTask(), args, REQUEST_POST_MESSAGE);
-    }
-
-    @Override
-    public void requestPostPhoto(File photo, String message, OnPostingCompleteListener onPostingCompleteListener) {
-        throw new SocialNetworkException("requestPostPhoto isn't allowed for LinkedInSocialNetwork");
-    }
-
-    @Override
-    public void requestCheckIsFriend(String userID, OnCheckIsFriendCompleteListener onCheckIsFriendCompleteListener) {
-        super.requestCheckIsFriend(userID, onCheckIsFriendCompleteListener);
-
-        Bundle args = new Bundle();
-        args.putString(RequestCheckIsFriendAsyncTask.PARAM_USER_ID, userID);
-        executeRequest(new RequestCheckIsFriendAsyncTask(), args, REQUEST_CHECK_IS_FRIEND);
-    }
-
-    @Override
-    public void requestAddFriend(String userID, OnRequestAddFriendCompleteListener onRequestAddFriendCompleteListener) {
-        super.requestAddFriend(userID, onRequestAddFriendCompleteListener);
-
-        Bundle args = new Bundle();
-        args.putString(RequestSendInviteAsyncTask.PARAM_USER_ID, userID);
-        executeRequest(new RequestSendInviteAsyncTask(), args, REQUEST_ADD_FRIEND);
-    }
-
-    @Override
-    public void requestRemoveFriend(String userID, OnRequestRemoveFriendCompleteListener onRequestRemoveFriendCompleteListener) {
-        throw new SocialNetworkException("requestRemoveFriend isn't allowed for LinkedInSocialNetwork");
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        if (requestCode != REQUEST_AUTH) return;
-
-        if (resultCode != Activity.RESULT_OK || data == null || data.getData() == null) {
-            if (mLocalListeners.get(REQUEST_LOGIN) != null) {
-                mLocalListeners.get(REQUEST_LOGIN).onError(getID(), REQUEST_LOGIN, "Login canceled", null);
-            }
-
-            return;
-        }
-
-        Uri uri = data.getData();
-
-        final String problem = uri.getQueryParameter(OAUTH_QUERY_PROBLEM);
-        if (problem != null) {
-            if (mLocalListeners.get(REQUEST_LOGIN) != null) {
-                mLocalListeners.get(REQUEST_LOGIN).onError(getID(), REQUEST_LOGIN, problem, null);
-            }
-
-            return;
-        }
-
-        Bundle args = new Bundle();
-        args.putString(RequestLogin2AsyncTask.PARAM_VERIFIER, uri.toString());
-        args.putString(RequestLogin2AsyncTask.PARAM_AUTH_REQUEST_TOKEN, mOAuthTokenSecret);
-        executeRequest(new RequestLogin2AsyncTask(), args, REQUEST_LOGIN2);
-    }
-
-    private void fatalError() {
-        mSharedPreferences.edit()
-                .remove(SAVE_STATE_KEY_OAUTH_TOKEN)
-                .remove(SAVE_STATE_KEY_OAUTH_SECRET)
-                .apply();
-    }
-
-    private class RequestLoginAsyncTask extends SocialNetworkAsyncTask {
-        private static final String RESULT_URL = "RequestLoginAsyncTask.RESULT_URL";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle result = new Bundle();
-
-            try {
-                final LinkedInRequestToken liToken = mOAuthService.getOAuthRequestToken(OAUTH_CALLBACK_URL);
-
-                mOAuthTokenSecret = liToken.getTokenSecret();
-
-                result.putString(RESULT_URL, liToken.getAuthorizationUrl());
-            } catch (Exception e) {
-                Log.e(TAG, "ERROR", e);
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (!handleRequestResult(result, REQUEST_LOGIN)) return;
-
-            Intent intent = new Intent(mSocialNetworkManager.getActivity(), OAuthActivity.class)
-                    .putExtra(OAuthActivity.PARAM_CALLBACK, OAUTH_CALLBACK_URL)
-                    .putExtra(OAuthActivity.PARAM_URL_TO_LOAD, result.getString(RESULT_URL));
-
-            mSocialNetworkManager.startActivityForResult(intent, REQUEST_AUTH);
-        }
-    }
-
-    private class RequestLogin2AsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_AUTH_REQUEST_TOKEN = "PARAM_AUTH_REQUEST_TOKEN";
-        public static final String PARAM_VERIFIER = "PARAM_VERIFIER";
-
-        private static final String RESULT_TOKEN = "RESULT_TOKEN";
-        private static final String RESULT_SECRET = "RESULT_SECRET";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle args = params[0];
-            final String paramAuthRequestToken = args.getString(PARAM_AUTH_REQUEST_TOKEN);
-            final String paramVerifier = args.getString(PARAM_VERIFIER);
-
-            Uri uri = Uri.parse(paramVerifier);
-
-            Bundle result = new Bundle();
-
-            try {
-                final LinkedInAccessToken accessToken = mOAuthService.getOAuthAccessToken(
-                        new LinkedInRequestToken(
-                                uri.getQueryParameter(OAUTH_QUERY_TOKEN),
-                                paramAuthRequestToken
-                        ),
-                        uri.getQueryParameter(OAUTH_QUERY_VERIFIER)
-                );
-
-                result.putString(RESULT_TOKEN, accessToken.getToken());
-                result.putString(RESULT_SECRET, accessToken.getTokenSecret());
-            } catch (Exception e) {
-                Log.e(TAG, "ERROR", e);
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            mRequests.remove(REQUEST_LOGIN2);
-            if (!handleRequestResult(result, REQUEST_LOGIN)) return;
-
-            // Shared Preferences
-            mSharedPreferences.edit()
-                    .putString(SAVE_STATE_KEY_OAUTH_TOKEN, result.getString(RESULT_TOKEN))
-                    .putString(SAVE_STATE_KEY_OAUTH_SECRET, result.getString(RESULT_SECRET))
-                    .apply();
-
-            ((OnLoginCompleteListener) mLocalListeners.get(REQUEST_LOGIN)).onLoginSuccess(getID());
-            mLocalListeners.remove(REQUEST_LOGIN);
-        }
-    }
-
-    private class RequestCurrentPersonAsyncTask extends SocialNetworkAsyncTask {
-        private static final String RESULT_ID = "LoginAsyncTask.RESULT_ID";
-        private static final String RESULT_NAME = "LoginAsyncTask.RESULT_NAME";
-        private static final String RESULT_AVATAR_URL = "LoginAsyncTask.RESULT_AVATAR_URL";
-        private static final String RESULT_COMPANY = "LoginAsyncTask.RESULT_COMPANY";
-        private static final String RESULT_POSITION = "LoginAsyncTask.RESULT_POSITION";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle result = new Bundle();
-
-            try {
-                LinkedInApiClient client = mLinkedInApiClientFactory.createLinkedInApiClient(
-                        new LinkedInAccessToken(
-                                mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null),
-                                mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_SECRET, null)
-                        )
-                );
-                Person person = client.getProfileForCurrentUser(PROFILE_PARAMETERS);
-
-                result.putString(RESULT_ID, person.getId());
-                result.putString(RESULT_NAME, person.getFirstName() + " " + person.getLastName());
-                result.putString(RESULT_AVATAR_URL, person.getPictureUrl());
-
-                List<Position> positions = person.getPositions().getPositionList();
-                if (positions.size() > 0) {
-                    Position position = positions.get(positions.size() - 1);
-
-                    result.putString(RESULT_COMPANY, position.getCompany().getName());
-                    result.putString(RESULT_POSITION, position.getTitle());
-                }
-            } catch (Exception e) {
-                Log.e(TAG, "ERROR", e);
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (!handleRequestResult(result, REQUEST_GET_CURRENT_PERSON)) return;
-
-            SocialPerson socialPerson = new SocialPerson();
-            socialPerson.id = result.getString(RESULT_ID);
-            socialPerson.name = result.getString(RESULT_NAME);
-            socialPerson.avatarURL = result.getString(RESULT_AVATAR_URL);
-            socialPerson.company = result.getString(RESULT_COMPANY);
-            socialPerson.position = result.getString(RESULT_POSITION);
-
-            ((OnRequestSocialPersonCompleteListener) mLocalListeners.get(REQUEST_GET_CURRENT_PERSON)).
-                    onRequestSocialPersonSuccess(getID(), socialPerson);
-            mLocalListeners.remove(REQUEST_GET_CURRENT_PERSON);
-        }
-    }
-
-    private class RequestSocialPersonAsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_USER_ID = "PARAM_USER_ID";
-
-        private static final String RESULT_ID = "LoginAsyncTask.RESULT_ID";
-        private static final String RESULT_NAME = "LoginAsyncTask.RESULT_NAME";
-        private static final String RESULT_AVATAR_URL = "LoginAsyncTask.RESULT_AVATAR_URL";
-        private static final String RESULT_COMPANY = "LoginAsyncTask.RESULT_COMPANY";
-        private static final String RESULT_POSITION = "LoginAsyncTask.RESULT_POSITION";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            String userID = params[0].getString(PARAM_USER_ID);
-
-            Bundle result = new Bundle();
-
-            try {
-                LinkedInApiClient client = mLinkedInApiClientFactory.createLinkedInApiClient(
-                        new LinkedInAccessToken(
-                                mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null),
-                                mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_SECRET, null)
-                        )
-                );
-                Person person = client.getProfileById(userID);
-
-                result.putString(RESULT_ID, person.getId());
-                result.putString(RESULT_NAME, person.getFirstName() + " " + person.getLastName());
-                result.putString(RESULT_AVATAR_URL, person.getPictureUrl());
-
-                List<Position> positions = person.getPositions().getPositionList();
-                if (positions.size() > 0) {
-                    Position position = positions.get(positions.size() - 1);
-
-                    result.putString(RESULT_COMPANY, position.getCompany().getName());
-                    result.putString(RESULT_POSITION, position.getTitle());
-                }
-            } catch (Exception e) {
-                Log.e(TAG, "ERROR", e);
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (!handleRequestResult(result, REQUEST_GET_PERSON)) return;
-
-            SocialPerson socialPerson = new SocialPerson();
-            socialPerson.id = result.getString(RESULT_ID);
-            socialPerson.name = result.getString(RESULT_NAME);
-            socialPerson.avatarURL = result.getString(RESULT_AVATAR_URL);
-            socialPerson.company = result.getString(RESULT_COMPANY);
-            socialPerson.position = result.getString(RESULT_POSITION);
-
-            ((OnRequestSocialPersonCompleteListener) mLocalListeners.get(REQUEST_GET_PERSON)).
-                    onRequestSocialPersonSuccess(getID(), socialPerson);
-            mLocalListeners.remove(REQUEST_GET_PERSON);
-        }
-    }
-
-    private class RequestPostMessageAsyncTask extends SocialNetworkAsyncTask {
-        private static final String PARAM_MESSAGE = "PARAM_MESSAGE";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            String message = params[0].getString(PARAM_MESSAGE);
-
-            Bundle result = new Bundle();
-
-            try {
-                LinkedInApiClient apiClient = mLinkedInApiClientFactory.createLinkedInApiClient(
-                        mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, ""),
-                        mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_SECRET, "")
-                );
-
-                apiClient.updateCurrentStatus(message);
-            } catch (Exception e) {
-                Log.e(TAG, "ERROR", e);
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (!handleRequestResult(result, REQUEST_POST_MESSAGE)) return;
-
-            ((OnPostingCompleteListener) mLocalListeners.get(REQUEST_POST_MESSAGE))
-                    .onPostSuccessfully(getID());
-        }
-    }
-
-    private class RequestCheckIsFriendAsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_USER_ID = "PARAM_USER_ID";
-
-        private static final String RESULT_IS_FRIEND = "RESULT_IS_FRIEND";
-        private static final String RESULT_REQUESTED_ID = "RESULT_REQUESTED_ID";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            String userID = params[0].getString(PARAM_USER_ID);
-
-            Bundle result = new Bundle();
-            result.putString(RESULT_REQUESTED_ID, userID);
-
-            try {
-                LinkedInApiClient apiClient = mLinkedInApiClientFactory.createLinkedInApiClient(
-                        mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, ""),
-                        mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_SECRET, "")
-                );
-
-                Person person = apiClient.getProfileForCurrentUser(PROFILE_PARAMETERS);
-
-                List<Person> list = person.getConnections().getPersonList();
-                if (list != null) {
-                    for (Person p : list) {
-                        if (p.getId().equals(userID)) {
-                            result.putBoolean(RESULT_IS_FRIEND, true);
-                            return result;
-                        }
-                    }
-                }
-
-                result.putBoolean(RESULT_IS_FRIEND, false);
-            } catch (Exception e) {
-                Log.e(TAG, "ERROR", e);
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (!handleRequestResult(result, REQUEST_CHECK_IS_FRIEND,
-                    result.getString(RESULT_REQUESTED_ID))) return;
-
-            ((OnCheckIsFriendCompleteListener) mLocalListeners.get(REQUEST_CHECK_IS_FRIEND))
-                    .onCheckIsFriendComplete(
-                            getID(),
-                            result.getString(RESULT_REQUESTED_ID),
-                            result.getBoolean(RESULT_IS_FRIEND)
-                    );
-            mLocalListeners.remove(REQUEST_CHECK_IS_FRIEND);
-        }
-    }
-
-    private class RequestSendInviteAsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_USER_ID = "PARAM_USER_ID";
-        private static final String RESULT_REQUESTED_ID = "RESULT_REQUESTED_ID";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            String userID = params[0].getString(PARAM_USER_ID);
-
-            Bundle result = new Bundle();
-
-            try {
-                result.putString(RESULT_REQUESTED_ID, userID);
-
-                LinkedInApiClient apiClient = mLinkedInApiClientFactory.createLinkedInApiClient(
-                        mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, ""),
-                        mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_SECRET, "")
-                );
-
-                Set<ProfileField> fields = new HashSet<ProfileField>();
-                fields.add(ProfileField.API_STANDARD_PROFILE_REQUEST);
-
-                Person person = apiClient.getProfileById(userID, fields);
-
-                String authHeader = "";
-                Headers headers = person.getApiStandardProfileRequest().getHeaders();
-                List<HttpHeader> httpHeaders = headers.getHttpHeaderList();
-                for (HttpHeader httpHeader : httpHeaders) {
-                    if (httpHeader.getName().equals(ApplicationConstants.AUTH_HEADER_NAME)) {
-                        authHeader = httpHeader.getValue();
-                        break;
-                    }
-                }
-
-                CommunicationsApiClient communicationsApiClient = mLinkedInApiClientFactory.createCommunicationsApiClient(
-                        mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, ""),
-                        mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_SECRET, "")
-                );
-                communicationsApiClient.sendInviteById(userID, "Join my network on LinkedIn",
-                        "Since you are a person I trust, I wanted to invite you to join my network on LinkedIn.", authHeader);
-            } catch (Exception e) {
-                Log.e(TAG, "ERROR", e);
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (!handleRequestResult(result, REQUEST_ADD_FRIEND,
-                    result.getString(RESULT_REQUESTED_ID))) return;
-
-            ((OnRequestAddFriendCompleteListener) mLocalListeners.get(REQUEST_ADD_FRIEND))
-                    .onRequestAddFriendComplete(
-                            getID(),
-                            result.getString(RESULT_REQUESTED_ID)
-                    );
-            mLocalListeners.remove(REQUEST_CHECK_IS_FRIEND);
-        }
-    }
-}
diff --git a/library/src/main/java/com/androidsocialnetworks/lib/impl/TwitterSocialNetwork.java b/library/src/main/java/com/androidsocialnetworks/lib/impl/TwitterSocialNetwork.java
deleted file mode 100644
index 0a193a6..0000000
--- a/library/src/main/java/com/androidsocialnetworks/lib/impl/TwitterSocialNetwork.java
+++ /dev/null
@@ -1,581 +0,0 @@
-package com.androidsocialnetworks.lib.impl;
-
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.text.TextUtils;
-import android.util.Log;
-
-import com.androidsocialnetworks.lib.OAuthActivity;
-import com.androidsocialnetworks.lib.OAuthSocialNetwork;
-import com.androidsocialnetworks.lib.SocialNetworkAsyncTask;
-import com.androidsocialnetworks.lib.SocialNetworkException;
-import com.androidsocialnetworks.lib.SocialPerson;
-import com.androidsocialnetworks.lib.listener.OnCheckIsFriendCompleteListener;
-import com.androidsocialnetworks.lib.listener.OnLoginCompleteListener;
-import com.androidsocialnetworks.lib.listener.OnPostingCompleteListener;
-import com.androidsocialnetworks.lib.listener.OnRequestAddFriendCompleteListener;
-import com.androidsocialnetworks.lib.listener.OnRequestRemoveFriendCompleteListener;
-import com.androidsocialnetworks.lib.listener.OnRequestSocialPersonCompleteListener;
-
-import java.io.File;
-import java.util.UUID;
-
-import twitter4j.Relationship;
-import twitter4j.StatusUpdate;
-import twitter4j.Twitter;
-import twitter4j.TwitterException;
-import twitter4j.TwitterFactory;
-import twitter4j.User;
-import twitter4j.auth.AccessToken;
-import twitter4j.auth.RequestToken;
-import twitter4j.conf.ConfigurationBuilder;
-
-import static com.androidsocialnetworks.lib.Consts.TAG;
-
-public class TwitterSocialNetwork extends OAuthSocialNetwork {
-    public static final int ID = 1;
-    private static final String SAVE_STATE_KEY_OAUTH_TOKEN = "TwitterSocialNetwork.SAVE_STATE_KEY_OAUTH_TOKEN";
-    private static final String SAVE_STATE_KEY_OAUTH_SECRET = "TwitterSocialNetwork.SAVE_STATE_KEY_OAUTH_SECRET";
-    private static final String SAVE_STATE_KEY_USER_ID = "TwitterSocialNetwork.SAVE_STATE_KEY_USER_ID";
-
-    private static final String URL_TWITTER_OAUTH_VERIFIER = "oauth_verifier";
-
-    // max 16 bit to use in startActivityForResult
-    private static final int REQUEST_AUTH = UUID.randomUUID().hashCode() & 0xFFFF;
-
-    private final String TWITTER_CALLBACK_URL = "oauth://AndroidSocialNetworks";
-    private final String fConsumerKey;
-    private final String fConsumerSecret;
-
-    private Twitter mTwitter;
-    private RequestToken mRequestToken;
-
-    public TwitterSocialNetwork(Fragment fragment, String consumerKey, String consumerSecret) {
-        super(fragment);
-
-        fConsumerKey = consumerKey;
-        fConsumerSecret = consumerSecret;
-
-        if (TextUtils.isEmpty(fConsumerKey) || TextUtils.isEmpty(fConsumerSecret)) {
-            throw new IllegalArgumentException("consumerKey and consumerSecret are invalid");
-        }
-
-        /*
-        *
-        * No authentication challenges found
-        * Relevant discussions can be found on the Internet at:
-        * http://www.google.co.jp/search?q=8e063946 or
-        * http://www.google.co.jp/search?q=ef59cf9f
-        *
-        * */
-        initTwitterClient();
-    }
-
-    private void initTwitterClient() {
-        ConfigurationBuilder builder = new ConfigurationBuilder();
-        builder.setOAuthConsumerKey(fConsumerKey);
-        builder.setOAuthConsumerSecret(fConsumerSecret);
-
-        String accessToken = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null);
-        String accessTokenSecret = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_SECRET, null);
-
-        TwitterFactory factory = new TwitterFactory(builder.build());
-
-        if (TextUtils.isEmpty(accessToken) && TextUtils.isEmpty(accessTokenSecret)) {
-            mTwitter = factory.getInstance();
-        } else {
-            mTwitter = factory.getInstance(new AccessToken(accessToken, accessTokenSecret));
-        }
-    }
-
-    @Override
-    public int getID() {
-        return ID;
-    }
-
-    @Override
-    public boolean isConnected() {
-        String accessToken = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null);
-        String accessTokenSecret = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_SECRET, null);
-        return accessToken != null && accessTokenSecret != null;
-    }
-
-    @Override
-    public void requestLogin(OnLoginCompleteListener onLoginCompleteListener) {
-        super.requestLogin(onLoginCompleteListener);
-
-        executeRequest(new RequestLoginAsyncTask(), null, REQUEST_LOGIN);
-    }
-
-    @Override
-    public void logout() {
-        mSharedPreferences.edit()
-                .remove(SAVE_STATE_KEY_OAUTH_TOKEN)
-                .remove(SAVE_STATE_KEY_OAUTH_SECRET)
-                .apply();
-
-        mTwitter = null;
-        initTwitterClient();
-    }
-
-    @Override
-    public void requestCurrentPerson(OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
-        super.requestCurrentPerson(onRequestSocialPersonCompleteListener);
-
-        executeRequest(new RequestGetPersonAsyncTask(), null, REQUEST_GET_CURRENT_PERSON);
-    }
-
-    @Override
-    public void requestSocialPerson(String userID, OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
-        super.requestSocialPerson(userID, onRequestSocialPersonCompleteListener);
-
-        if (TextUtils.isEmpty(userID)) {
-            throw new SocialNetworkException("userID can't be null or empty");
-        }
-
-        Bundle args = new Bundle();
-        try {
-            args.putLong(RequestGetPersonAsyncTask.PARAM_USER_ID, Long.parseLong(userID));
-        } catch (NumberFormatException e) {
-            Log.e(TAG, "ERROR", e);
-            throw new SocialNetworkException("userID should be long number");
-        }
-
-        executeRequest(new RequestGetPersonAsyncTask(), args, REQUEST_GET_PERSON);
-    }
-
-    @Override
-    public void requestPostMessage(String message, OnPostingCompleteListener onPostingCompleteListener) {
-        super.requestPostMessage(message, onPostingCompleteListener);
-
-        Bundle args = new Bundle();
-        args.putString(RequestUpdateStatusAsyncTask.PARAM_MESSAGE, message);
-
-        executeRequest(new RequestUpdateStatusAsyncTask(), args, REQUEST_POST_MESSAGE);
-    }
-
-    @Override
-    public void requestPostPhoto(File photo, String message, OnPostingCompleteListener onPostingCompleteListener) {
-        super.requestPostPhoto(photo, message, onPostingCompleteListener);
-
-        Bundle args = new Bundle();
-        args.putString(RequestUpdateStatusAsyncTask.PARAM_MESSAGE, message);
-        args.putString(RequestUpdateStatusAsyncTask.PARAM_PHOTO_PATH, photo.getAbsolutePath());
-
-        executeRequest(new RequestUpdateStatusAsyncTask(), args, REQUEST_POST_PHOTO);
-    }
-
-    @Override
-    public void requestCheckIsFriend(String userID, OnCheckIsFriendCompleteListener onCheckIsFriendCompleteListener) {
-        super.requestCheckIsFriend(userID, onCheckIsFriendCompleteListener);
-
-        Bundle args = new Bundle();
-        try {
-            args.putLong(RequestCheckIsFriendAsyncTask.PARAM_USER_ID, Long.parseLong(userID));
-        } catch (NumberFormatException e) {
-            Log.e(TAG, "ERROR", e);
-            throw new SocialNetworkException("userID should be long number");
-        }
-
-        executeRequest(new RequestCheckIsFriendAsyncTask(), args, REQUEST_CHECK_IS_FRIEND);
-    }
-
-    @Override
-    public void requestAddFriend(String userID, OnRequestAddFriendCompleteListener onRequestAddFriendCompleteListener) {
-        super.requestAddFriend(userID, onRequestAddFriendCompleteListener);
-
-        Bundle args = new Bundle();
-        try {
-            args.putLong(RequestAddFriendAsyncTask.PARAM_USER_ID, Long.parseLong(userID));
-        } catch (NumberFormatException e) {
-            Log.e(TAG, "ERROR", e);
-            throw new SocialNetworkException("userID should be long number");
-        }
-
-        executeRequest(new RequestAddFriendAsyncTask(), args, REQUEST_ADD_FRIEND);
-    }
-
-    @Override
-    public void requestRemoveFriend(String userID, OnRequestRemoveFriendCompleteListener onRequestRemoveFriendCompleteListener) {
-        super.requestRemoveFriend(userID, onRequestRemoveFriendCompleteListener);
-
-        Bundle args = new Bundle();
-        try {
-            args.putLong(RequestRemoveFriendAsyncTask.PARAM_USER_ID, Long.parseLong(userID));
-        } catch (NumberFormatException e) {
-            Log.e(TAG, "ERROR", e);
-            throw new SocialNetworkException("userID should be long number");
-        }
-
-        executeRequest(new RequestRemoveFriendAsyncTask(), args, REQUEST_REMOVE_FRIEND);
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        if (requestCode != REQUEST_AUTH) return;
-
-        super.onActivityResult(requestCode, resultCode, data);
-
-        Uri uri = data != null ? data.getData() : null;
-
-        if (uri != null && uri.toString().startsWith(TWITTER_CALLBACK_URL)) {
-            String verifier = uri.getQueryParameter(URL_TWITTER_OAUTH_VERIFIER);
-
-            RequestLogin2AsyncTask requestLogin2AsyncTask = new RequestLogin2AsyncTask();
-            mRequests.put(REQUEST_LOGIN2, requestLogin2AsyncTask);
-            Bundle args = new Bundle();
-            args.putString(RequestLogin2AsyncTask.PARAM_VERIFIER, verifier);
-            requestLogin2AsyncTask.execute(args);
-        } else {
-            if (mLocalListeners.get(REQUEST_LOGIN) != null) {
-                mLocalListeners.get(REQUEST_LOGIN).onError(getID(), REQUEST_LOGIN, "incorrect URI returned: " + uri, null);
-                mLocalListeners.remove(REQUEST_LOGIN);
-            }
-
-            /*
-            *
-            * No authentication challenges found
-            * Relevant discussions can be found on the Internet at:
-            * http://www.google.co.jp/search?q=8e063946 or
-            * http://www.google.co.jp/search?q=ef59cf9f
-            *
-            * */
-            initTwitterClient();
-        }
-    }
-
-    @Override
-    public void cancelLoginRequest() {
-        super.cancelLoginRequest();
-
-        initTwitterClient();
-    }
-
-    private class RequestLoginAsyncTask extends SocialNetworkAsyncTask {
-        private static final String RESULT_OAUTH_LOGIN = "LoginAsyncTask.RESULT_OAUTH_LOGIN";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle result = new Bundle();
-
-            try {
-                mRequestToken = mTwitter.getOAuthRequestToken(TWITTER_CALLBACK_URL);
-                Uri oauthLoginURL = Uri.parse(mRequestToken.getAuthenticationURL() + "&force_login=true");
-
-                result.putString(RESULT_OAUTH_LOGIN, oauthLoginURL.toString());
-            } catch (TwitterException e) {
-                Log.e(TAG, "ERROR", e);
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (!handleRequestResult(result, REQUEST_LOGIN)) return;
-
-            if (result.containsKey(RESULT_OAUTH_LOGIN)) {
-                Intent intent = new Intent(mSocialNetworkManager.getActivity(), OAuthActivity.class)
-                        .putExtra(OAuthActivity.PARAM_CALLBACK, TWITTER_CALLBACK_URL)
-                        .putExtra(OAuthActivity.PARAM_URL_TO_LOAD, result.getString(RESULT_OAUTH_LOGIN));
-
-                mSocialNetworkManager.startActivityForResult(intent, REQUEST_AUTH);
-            }
-        }
-    }
-
-    private class RequestLogin2AsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_VERIFIER = "Login2AsyncTask.PARAM_VERIFIER";
-
-        private static final String RESULT_ERROR = "Login2AsyncTask.RESULT_ERROR";
-        private static final String RESULT_TOKEN = "Login2AsyncTask.RESULT_TOKEN";
-        private static final String RESULT_SECRET = "Login2AsyncTask.RESULT_SECRET";
-        private static final String RESULT_USER_ID = "Login2AsyncTask.RESULT_USER_ID";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            String verifier = params[0].getString(PARAM_VERIFIER);
-
-            Bundle result = new Bundle();
-
-            try {
-                AccessToken accessToken = mTwitter.getOAuthAccessToken(mRequestToken, verifier);
-
-                result.putString(RESULT_TOKEN, accessToken.getToken());
-                result.putString(RESULT_SECRET, accessToken.getTokenSecret());
-                result.putLong(RESULT_USER_ID, accessToken.getUserId());
-            } catch (Exception e) {
-                Log.e(TAG, "ERROR", e);
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            mRequests.remove(REQUEST_LOGIN2);
-            if (!handleRequestResult(result, REQUEST_LOGIN)) return;
-
-            // Shared Preferences
-            mSharedPreferences.edit()
-                    .putString(SAVE_STATE_KEY_OAUTH_TOKEN, result.getString(RESULT_TOKEN))
-                    .putString(SAVE_STATE_KEY_OAUTH_SECRET, result.getString(RESULT_SECRET))
-                    .putLong(SAVE_STATE_KEY_USER_ID, result.getLong(RESULT_USER_ID))
-                    .apply();
-
-            initTwitterClient();
-
-            if (mLocalListeners.get(REQUEST_LOGIN) != null) {
-                ((OnLoginCompleteListener) mLocalListeners.get(REQUEST_LOGIN)).onLoginSuccess(getID());
-            }
-
-            mLocalListeners.remove(REQUEST_LOGIN);
-        }
-    }
-
-    private class RequestGetPersonAsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_USER_ID = "RequestGetPersonAsyncTask.PARAM_USER_ID";
-
-        private static final String RESULT_IS_CURRENT_PERSON = "RequestPersonAsyncTask.RESULT_IS_CURRENT_PERSON";
-        private static final String RESULT_ID = "RequestPersonAsyncTask.RESULT_ID";
-        private static final String RESULT_NAME = "RequestPersonAsyncTask.RESULT_NAME";
-        private static final String RESULT_AVATAR_URL = "RequestPersonAsyncTask.RESULT_AVATAR_URL";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle args = params[0];
-            Bundle result = new Bundle();
-            Long userID;
-
-            if (args.containsKey(PARAM_USER_ID)) {
-                userID = args.getLong(PARAM_USER_ID);
-                result.putBoolean(RESULT_IS_CURRENT_PERSON, false);
-            } else {
-                userID = mSharedPreferences.getLong(SAVE_STATE_KEY_USER_ID, -1);
-                result.putBoolean(RESULT_IS_CURRENT_PERSON, true);
-            }
-
-            try {
-                User user = mTwitter.showUser(userID);
-
-                result.putString(RESULT_ID, user.getId() + "");
-                result.putString(RESULT_NAME, user.getName());
-                result.putString(RESULT_AVATAR_URL, user.getBiggerProfileImageURL());
-            } catch (TwitterException e) {
-                Log.e(TAG, "ERROR", e);
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (result.getBoolean(RESULT_IS_CURRENT_PERSON)) {
-                if (!handleRequestResult(result, REQUEST_GET_CURRENT_PERSON)) return;
-
-                SocialPerson socialPerson = new SocialPerson();
-                socialPerson.id = result.getString(RESULT_ID);
-                socialPerson.name = result.getString(RESULT_NAME);
-                socialPerson.avatarURL = result.getString(RESULT_AVATAR_URL);
-
-                ((OnRequestSocialPersonCompleteListener) mLocalListeners.get(REQUEST_GET_CURRENT_PERSON))
-                        .onRequestSocialPersonSuccess(getID(), socialPerson);
-
-                mLocalListeners.remove(REQUEST_GET_CURRENT_PERSON);
-            } else {
-                if (!handleRequestResult(result, REQUEST_GET_PERSON)) return;
-
-                SocialPerson socialPerson = new SocialPerson();
-                socialPerson.id = result.getString(RESULT_ID);
-                socialPerson.name = result.getString(RESULT_NAME);
-                socialPerson.avatarURL = result.getString(RESULT_AVATAR_URL);
-
-                ((OnRequestSocialPersonCompleteListener) mLocalListeners.get(REQUEST_GET_PERSON))
-                        .onRequestSocialPersonSuccess(getID(), socialPerson);
-
-                mLocalListeners.remove(REQUEST_GET_PERSON);
-            }
-
-        }
-    }
-
-    private class RequestUpdateStatusAsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_MESSAGE = "RequestUpdateStatusAsyncTask.PARAM_MESSAGE";
-        public static final String PARAM_PHOTO_PATH = "RequestUpdateStatusAsyncTask.PARAM_PHOTO_PATH";
-
-        private static final String RESULT_POST_PHOTO = "RequestUpdateStatusAsyncTask.RESULT_POST_PHOTO";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle args = params[0];
-            Bundle result = new Bundle();
-            String paramMessage = "";
-            String paramPhotoPath = null;
-
-            if (args.containsKey(PARAM_MESSAGE)) {
-                paramMessage = args.getString(PARAM_MESSAGE);
-            }
-
-            if (args.containsKey(PARAM_PHOTO_PATH)) {
-                paramPhotoPath = args.getString(PARAM_PHOTO_PATH);
-
-                result.putBoolean(RESULT_POST_PHOTO, true);
-            } else {
-                result.putBoolean(RESULT_POST_PHOTO, false);
-            }
-
-            try {
-                StatusUpdate status = new StatusUpdate(paramMessage);
-
-                if (paramPhotoPath != null) {
-                    status.setMedia(new File(paramPhotoPath));
-                }
-
-                Log.d(TAG, "RequestUpdateStatusAsyncTask.mTwitter.updateStatus");
-                mTwitter.updateStatus(status);
-            } catch (TwitterException e) {
-                Log.e(TAG, "ERROR", e);
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            String requestID = result.getBoolean(RESULT_POST_PHOTO) ? REQUEST_POST_PHOTO : REQUEST_POST_MESSAGE;
-
-            mRequests.remove(requestID);
-
-            String error = result.containsKey(RESULT_ERROR) ? result.getString(RESULT_ERROR) : null;
-
-            if (mLocalListeners.get(requestID) != null) {
-                if (error == null) {
-                    ((OnPostingCompleteListener) mLocalListeners.get(requestID)).onPostSuccessfully(getID());
-                } else {
-                    mLocalListeners.get(requestID).onError(getID(), requestID, error, null);
-                }
-            }
-
-            mLocalListeners.remove(requestID);
-        }
-
-        @Override
-        protected void onCancelled() {
-            Log.d(TAG, "RequestUpdateStatusAsyncTask.onCancelled");
-        }
-    }
-
-    private class RequestCheckIsFriendAsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_USER_ID = "PARAM_USER_ID";
-
-        public static final String RESULT_IS_FRIEND = "RESULT_IS_FRIEND";
-        public static final String RESULT_REQUESTED_ID = "RESULT_REQUESTED_ID";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle args = params[0];
-            Bundle result = new Bundle();
-            Long userID = args.getLong(PARAM_USER_ID);
-
-            result.putLong(RESULT_REQUESTED_ID, userID);
-            try {
-                long currentUserID = mSharedPreferences.getLong(SAVE_STATE_KEY_USER_ID, -1);
-
-                Relationship relationship = mTwitter.showFriendship(currentUserID, userID);
-                result.putBoolean(RESULT_IS_FRIEND, relationship.isSourceFollowingTarget());
-            } catch (TwitterException e) {
-                Log.e(TAG, "ERROR", e);
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (!handleRequestResult(result, REQUEST_CHECK_IS_FRIEND,
-                    result.getLong(RESULT_REQUESTED_ID))) return;
-
-            ((OnCheckIsFriendCompleteListener) mLocalListeners.get(REQUEST_CHECK_IS_FRIEND))
-                    .onCheckIsFriendComplete(getID(),
-                            "" + result.getLong(RESULT_REQUESTED_ID),
-                            result.getBoolean(RESULT_IS_FRIEND)
-                    );
-        }
-    }
-
-    private class RequestAddFriendAsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_USER_ID = "PARAM_USER_ID";
-
-        public static final String RESULT_REQUESTED_ID = "RESULT_REQUESTED_ID";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle args = params[0];
-            Bundle result = new Bundle();
-            Long userID = args.getLong(PARAM_USER_ID);
-
-            result.putLong(RESULT_REQUESTED_ID, userID);
-            try {
-                mTwitter.createFriendship(userID);
-            } catch (TwitterException e) {
-                Log.e(TAG, "ERROR", e);
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (!handleRequestResult(result, REQUEST_ADD_FRIEND,
-                    result.getLong(RESULT_REQUESTED_ID))) return;
-
-            ((OnRequestAddFriendCompleteListener) mLocalListeners.get(REQUEST_ADD_FRIEND))
-                    .onRequestAddFriendComplete(getID(),
-                            "" + result.getLong(RESULT_REQUESTED_ID)
-                    );
-        }
-    }
-
-    private class RequestRemoveFriendAsyncTask extends SocialNetworkAsyncTask {
-        public static final String PARAM_USER_ID = "PARAM_USER_ID";
-
-        public static final String RESULT_REQUESTED_ID = "RESULT_REQUESTED_ID";
-
-        @Override
-        protected Bundle doInBackground(Bundle... params) {
-            Bundle args = params[0];
-            Bundle result = new Bundle();
-            Long userID = args.getLong(PARAM_USER_ID);
-
-            result.putLong(RESULT_REQUESTED_ID, userID);
-            try {
-                mTwitter.destroyFriendship(userID);
-            } catch (TwitterException e) {
-                Log.e(TAG, "ERROR", e);
-                result.putString(RESULT_ERROR, e.getMessage());
-            }
-
-            return result;
-        }
-
-        @Override
-        protected void onPostExecute(Bundle result) {
-            if (!handleRequestResult(result, REQUEST_REMOVE_FRIEND,
-                    result.getLong(RESULT_REQUESTED_ID))) return;
-
-            ((OnRequestRemoveFriendCompleteListener) mLocalListeners.get(REQUEST_REMOVE_FRIEND))
-                    .onRequestRemoveFriendComplete(getID(),
-                            "" + result.getLong(RESULT_REQUESTED_ID)
-                    );
-        }
-    }
-
-}
diff --git a/library/libs/signpost-commonshttp4-1.2.1.1.jar b/library/src/main/libs/signpost-commonshttp4-1.2.1.1.jar
similarity index 100%
rename from library/libs/signpost-commonshttp4-1.2.1.1.jar
rename to library/src/main/libs/signpost-commonshttp4-1.2.1.1.jar
diff --git a/library/libs/signpost-core-1.2.1.1.jar b/library/src/main/libs/signpost-core-1.2.1.1.jar
similarity index 100%
rename from library/libs/signpost-core-1.2.1.1.jar
rename to library/src/main/libs/signpost-core-1.2.1.1.jar
diff --git a/library/src/main/libs/twitter4j-core-4.0.1.jar b/library/src/main/libs/twitter4j-core-4.0.1.jar
new file mode 100755
index 0000000..fbbd6d7
Binary files /dev/null and b/library/src/main/libs/twitter4j-core-4.0.1.jar differ
diff --git a/library/src/main/project.properties b/library/src/main/project.properties
new file mode 100755
index 0000000..33b01ed
--- /dev/null
+++ b/library/src/main/project.properties
@@ -0,0 +1,16 @@
+# This file is automatically generated by Android Tools.
+# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
+#
+# This file must be checked in Version Control Systems.
+#
+# To customize properties used by the Ant build system edit
+# "ant.properties", and override values to adapt the script to your
+# project structure.
+#
+# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
+#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
+
+# Project target.
+target=android-14
+android.library.reference.1=../../../third_party/facebook
+android.library=true
diff --git a/library/src/main/res/values-v14/styles.xml b/library/src/main/res/values-v14/styles.xml
index 9a9fbac..4fae57c 100644
--- a/library/src/main/res/values-v14/styles.xml
+++ b/library/src/main/res/values-v14/styles.xml
@@ -1,5 +1,4 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
-
-    <style name="Theme.SocialNetworks" parent="@android:style/Theme.Holo.NoActionBar"/>
+    <style name="Theme.SocialNetworks" parent="@android:style/Theme.Holo" />
 </resources>
\ No newline at end of file
diff --git a/library/src/main/java/com/androidsocialnetworks/lib/Consts.java b/library/src/main/src/com/androidsocialnetworks/lib/Consts.java
similarity index 100%
rename from library/src/main/java/com/androidsocialnetworks/lib/Consts.java
rename to library/src/main/src/com/androidsocialnetworks/lib/Consts.java
diff --git a/library/src/main/src/com/androidsocialnetworks/lib/OAuthActivity.java b/library/src/main/src/com/androidsocialnetworks/lib/OAuthActivity.java
new file mode 100644
index 0000000..fd47314
--- /dev/null
+++ b/library/src/main/src/com/androidsocialnetworks/lib/OAuthActivity.java
@@ -0,0 +1,85 @@
+package com.androidsocialnetworks.lib;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.graphics.Bitmap;
+import android.net.Uri;
+import android.net.http.SslError;
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.view.View;
+import android.webkit.SslErrorHandler;
+import android.webkit.WebView;
+import android.webkit.WebViewClient;
+
+public class OAuthActivity extends Activity {
+
+	public static final String PARAM_URL_TO_LOAD = "OAuthActivity.PARAM_URL_TO_LOAD";
+	public static final String PARAM_CALLBACK = "OAuthActivity.PARAM_CALLBACK";
+
+	@Override
+	protected void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		setContentView(R.layout.asn_activity_oauth);
+
+		final String paramUrlToLoad = getIntent().getStringExtra(PARAM_URL_TO_LOAD);
+		final String paramCallback = getIntent().getStringExtra(PARAM_CALLBACK);
+
+		if (TextUtils.isEmpty(paramUrlToLoad)) {
+			throw new IllegalArgumentException("required PARAM_URL_TO_LOAD");
+		}
+
+		if (TextUtils.isEmpty(paramCallback)) {
+			throw new IllegalArgumentException("required PARAM_CALLBACK");
+		}
+
+		WebView webView = (WebView) findViewById(R.id.web_view);
+		final View progressContainer = findViewById(R.id.progress_container);
+
+		webView.setWebViewClient(new WebViewClient() {
+			@Override
+			public void onPageStarted(WebView view, String url, Bitmap favicon) {
+				super.onPageStarted(view, url, favicon);
+
+				progressContainer.setVisibility(View.VISIBLE);
+			}
+
+			@Override
+			public void onPageFinished(WebView view, String url) {
+				super.onPageFinished(view, url);
+
+				progressContainer.setVisibility(View.GONE);
+			}
+
+			@Override
+			public boolean shouldOverrideUrlLoading(WebView view, String url) {
+				if (url.contains(paramCallback)) {
+					Intent intent = new Intent();
+					intent.setData(Uri.parse(url));
+					setResult(RESULT_OK, intent);
+					finish();
+					return true;
+				}
+
+				return super.shouldOverrideUrlLoading(view, url);
+			}
+
+			@Override
+			public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) {
+				handler.proceed();
+			}
+
+			@Override
+			public void onReceivedError(WebView view, int errorCode, String description, String failingUrl) {
+				super.onReceivedError(view, errorCode, description, failingUrl);
+
+				Intent intent = new Intent();
+				intent.setAction(description);
+				setResult(RESULT_CANCELED, intent);
+				finish();
+			}
+		});
+		webView.loadUrl(paramUrlToLoad);
+	}
+
+}
diff --git a/library/src/main/src/com/androidsocialnetworks/lib/OAuthSocialNetwork.java b/library/src/main/src/com/androidsocialnetworks/lib/OAuthSocialNetwork.java
new file mode 100644
index 0000000..191f71d
--- /dev/null
+++ b/library/src/main/src/com/androidsocialnetworks/lib/OAuthSocialNetwork.java
@@ -0,0 +1,128 @@
+package com.androidsocialnetworks.lib;
+
+import static com.androidsocialnetworks.lib.Consts.TAG;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import android.os.Bundle;
+import android.app.Fragment;
+import android.util.Log;
+
+import com.androidsocialnetworks.lib.listener.base.SocialNetworkListener;
+
+public abstract class OAuthSocialNetwork extends SocialNetwork {
+
+	protected Map<String, SocialNetworkAsyncTask> mRequests = new HashMap<String, SocialNetworkAsyncTask>();
+
+	protected OAuthSocialNetwork(Fragment fragment) {
+		super(fragment);
+	}
+
+	protected void executeRequest(SocialNetworkAsyncTask request, Bundle params, String requestID) {
+		checkRequestState(mRequests.get(requestID));
+
+		mRequests.put(requestID, request);
+		request.execute(params == null ? new Bundle() : params);
+	}
+
+	private void cancelRequest(String requestID) {
+		Log.d(TAG, "TwitterSocialNetwork.cancelRequest: " + requestID);
+
+		SocialNetworkAsyncTask request = mRequests.get(requestID);
+
+		if (request != null) {
+			request.cancel(true);
+		}
+
+		mRequests.remove(requestID);
+	}
+
+	@Override
+	public void cancelLoginRequest() {
+		super.cancelLoginRequest();
+
+		cancelRequest(REQUEST_LOGIN);
+		cancelRequest(REQUEST_LOGIN2);
+	}
+
+	@Override
+	public void cancelGetCurrentSocialPersonRequest() {
+		super.cancelGetCurrentSocialPersonRequest();
+
+		cancelRequest(REQUEST_GET_CURRENT_PERSON);
+	}
+
+	@Override
+	public void cancelGetSocialPersonRequest() {
+		super.cancelGetSocialPersonRequest();
+
+		cancelRequest(REQUEST_GET_PERSON);
+	}
+
+	@Override
+	public void cancelPostMessageRequest() {
+		super.cancelPostMessageRequest();
+
+		cancelRequest(REQUEST_POST_MESSAGE);
+	}
+
+	@Override
+	public void cancelPostPhotoRequest() {
+		super.cancelPostPhotoRequest();
+
+		cancelRequest(REQUEST_POST_PHOTO);
+	}
+
+	@Override
+	public void cancelCheckIsFriendRequest() {
+		super.cancelCheckIsFriendRequest();
+
+		cancelRequest(REQUEST_CHECK_IS_FRIEND);
+	}
+
+	@Override
+	public void cancelAddFriendRequest() {
+		super.cancelAddFriendRequest();
+
+		cancelRequest(REQUEST_ADD_FRIEND);
+	}
+
+	@Override
+	public void cancelRemoveFriendRequest() {
+		super.cancelRemoveFriendRequest();
+
+		cancelRequest(REQUEST_REMOVE_FRIEND);
+	}
+
+	protected boolean handleRequestResult(Bundle result, String requestID) {
+		return handleRequestResult(result, requestID, null);
+	}
+
+	protected boolean handleRequestResult(Bundle result, String requestID, Object data) {
+		Log.d(TAG, this + "handleRequestResult: " + result + " : " + requestID);
+
+		mRequests.remove(requestID);
+
+		SocialNetworkListener socialNetworkListener = mLocalListeners.get(requestID);
+
+		// 1: user didn't set listener, or pass null, this doesn't have any
+		// sence
+		// 2: request was canceled...
+		if (socialNetworkListener == null) {
+			Log.e(TAG, "TwitterSocialNetwork.handleRequestResult socialNetworkListener == null");
+			return false;
+		}
+
+		String error = result.getString(SocialNetworkAsyncTask.RESULT_ERROR);
+
+		if (error != null) {
+			socialNetworkListener.onError(getID(), requestID, error, data);
+			mLocalListeners.remove(requestID);
+			return false;
+		}
+
+		return true;
+	}
+
+}
diff --git a/library/src/main/src/com/androidsocialnetworks/lib/SocialNetwork.java b/library/src/main/src/com/androidsocialnetworks/lib/SocialNetwork.java
new file mode 100644
index 0000000..3c5b406
--- /dev/null
+++ b/library/src/main/src/com/androidsocialnetworks/lib/SocialNetwork.java
@@ -0,0 +1,275 @@
+package com.androidsocialnetworks.lib;
+
+import static com.androidsocialnetworks.lib.Consts.TAG;
+
+import java.io.File;
+import java.util.HashMap;
+import java.util.Map;
+
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.app.Fragment;
+import android.util.Log;
+
+import com.androidsocialnetworks.lib.listener.OnCheckIsFriendCompleteListener;
+import com.androidsocialnetworks.lib.listener.OnLoginCompleteListener;
+import com.androidsocialnetworks.lib.listener.OnPostingCompleteListener;
+import com.androidsocialnetworks.lib.listener.OnRequestAddFriendCompleteListener;
+import com.androidsocialnetworks.lib.listener.OnRequestRemoveFriendCompleteListener;
+import com.androidsocialnetworks.lib.listener.OnRequestSocialPersonCompleteListener;
+import com.androidsocialnetworks.lib.listener.base.SocialNetworkListener;
+
+/**
+ * Ids:
+ * <p/>
+ * 1 - Twitter 2 - LinkedIn 3 - Google Plus 4 - Facebook
+ */
+public abstract class SocialNetwork {
+
+	public static final String REQUEST_LOGIN = "SocialNetwork.REQUEST_LOGIN";
+	public static final String REQUEST_LOGIN2 = "SocialNetwork.REQUEST_LOGIN2"; // used
+																				// with
+																				// OAuth
+																				// in
+																				// Twitter
+																				// and
+																				// LinekdIn
+	public static final String REQUEST_GET_CURRENT_PERSON = "SocialNetwork.REQUEST_GET_CURRENT_PERSON";
+	public static final String REQUEST_GET_PERSON = "SocialNetwork.REQUEST_GET_PERSON";
+	public static final String REQUEST_POST_MESSAGE = "SocialNetwork.REQUEST_POST_MESSAGE";
+	public static final String REQUEST_POST_PHOTO = "SocialNetwork.REQUEST_POST_PHOTO";
+	public static final String REQUEST_CHECK_IS_FRIEND = "SocialNetwork.REQUEST_CHECK_IS_FRIEND";
+	public static final String REQUEST_ADD_FRIEND = "SocialNetwork.REQUEST_ADD_FRIEND";
+	public static final String REQUEST_REMOVE_FRIEND = "SocialNetwork.REQUEST_REMOVE_FRIEND";
+
+	private static final String SHARED_PREFERENCES_NAME = "social_networks";
+	protected Fragment mSocialNetworkManager;
+	protected SharedPreferences mSharedPreferences;
+	protected Map<String, SocialNetworkListener> mGlobalListeners = new HashMap<String, SocialNetworkListener>();
+	protected Map<String, SocialNetworkListener> mLocalListeners = new HashMap<String, SocialNetworkListener>();
+
+	/**
+	 * @param fragment
+	 *            ant not activity or context, as we will need to call
+	 *            startActivityForResult, we will want to receice on
+	 *            onActivityResult in out SocialNetworkManager fragment
+	 */
+	protected SocialNetwork(Fragment fragment) {
+		mSocialNetworkManager = fragment;
+
+		mSharedPreferences = mSocialNetworkManager.getActivity().getSharedPreferences(SHARED_PREFERENCES_NAME, Context.MODE_PRIVATE);
+	}
+
+	// ////////////////// LIFECYCLE ////////////////////
+
+	public void onCreate(Bundle savedInstanceState) {
+
+	}
+
+	public void onStart() {
+
+	}
+
+	public void onResume() {
+
+	}
+
+	public void onPause() {
+
+	}
+
+	public void onStop() {
+
+	}
+
+	public void onDestroy() {
+		cancelAll();
+	}
+
+	public void onSaveInstanceState(Bundle outState) {
+
+	}
+
+	public void onActivityResult(int requestCode, int resultCode, Intent data) {
+
+	}
+
+	// ////////////////// API ////////////////////
+
+	public abstract boolean isConnected();
+
+	public void requestLogin() {
+		requestLogin(null);
+	}
+
+	public void requestLogin(OnLoginCompleteListener onLoginCompleteListener) {
+		if (isConnected()) {
+			throw new SocialNetworkException("Already connected, please check isConnected() method");
+		}
+
+		registerListener(REQUEST_LOGIN, onLoginCompleteListener);
+	}
+
+	public abstract void logout();
+
+	public abstract int getID();
+
+	public void requestCurrentPerson() {
+		requestCurrentPerson(null);
+	}
+
+	public void requestCurrentPerson(OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
+		registerListener(REQUEST_GET_CURRENT_PERSON, onRequestSocialPersonCompleteListener);
+	}
+
+	public void requestSocialPerson(String userID) {
+		requestSocialPerson(userID, null);
+	}
+
+	public void requestSocialPerson(String userID, OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
+		registerListener(REQUEST_GET_PERSON, onRequestSocialPersonCompleteListener);
+	}
+
+	public void requestPostMessage(String message) {
+		requestPostMessage(message, null);
+	}
+
+	public void requestPostMessage(String message, OnPostingCompleteListener onPostingCompleteListener) {
+		registerListener(REQUEST_POST_MESSAGE, onPostingCompleteListener);
+	}
+
+	public void requestPostPhoto(File photo, String message) {
+		requestPostPhoto(photo, message, null);
+	}
+
+	public void requestPostPhoto(File photo, String message, OnPostingCompleteListener onPostingCompleteListener) {
+		registerListener(REQUEST_POST_PHOTO, onPostingCompleteListener);
+	}
+
+	public void requestCheckIsFriend(String userID) {
+		requestCheckIsFriend(userID, null);
+	}
+
+	public void requestCheckIsFriend(String userID, OnCheckIsFriendCompleteListener onCheckIsFriendCompleteListener) {
+		registerListener(REQUEST_CHECK_IS_FRIEND, onCheckIsFriendCompleteListener);
+	}
+
+	public void requestAddFriend(String userID) {
+		requestAddFriend(userID, null);
+	}
+
+	public void requestAddFriend(String userID, OnRequestAddFriendCompleteListener onRequestAddFriendCompleteListener) {
+		registerListener(REQUEST_ADD_FRIEND, onRequestAddFriendCompleteListener);
+	}
+
+	public void requestRemoveFriend(String userID) {
+		requestRemoveFriend(userID, null);
+	}
+
+	public void requestRemoveFriend(String userID, OnRequestRemoveFriendCompleteListener onRequestRemoveFriendCompleteListener) {
+		registerListener(REQUEST_REMOVE_FRIEND, onRequestRemoveFriendCompleteListener);
+	}
+
+	public void cancelLoginRequest() {
+		mLocalListeners.remove(REQUEST_LOGIN);
+	}
+
+	public void cancelGetCurrentSocialPersonRequest() {
+		mLocalListeners.remove(REQUEST_GET_CURRENT_PERSON);
+	}
+
+	public void cancelGetSocialPersonRequest() {
+		mLocalListeners.remove(REQUEST_GET_PERSON);
+	}
+
+	public void cancelPostMessageRequest() {
+		mLocalListeners.remove(REQUEST_POST_MESSAGE);
+	}
+
+	public void cancelPostPhotoRequest() {
+		mLocalListeners.remove(REQUEST_POST_PHOTO);
+	}
+
+	public void cancelCheckIsFriendRequest() {
+		mLocalListeners.remove(REQUEST_CHECK_IS_FRIEND);
+	}
+
+	public void cancelAddFriendRequest() {
+		mLocalListeners.remove(REQUEST_ADD_FRIEND);
+	}
+
+	public void cancelRemoveFriendRequest() {
+		mLocalListeners.remove(REQUEST_REMOVE_FRIEND);
+	}
+
+	public void cancelAll() {
+		Log.d(TAG, this + ":SocialNetwork.cancelAll()");
+
+		// we need to call all, because in implementations we can possible do
+		// aditional work in specific methods
+		cancelLoginRequest();
+		cancelGetCurrentSocialPersonRequest();
+		cancelGetSocialPersonRequest();
+		cancelPostMessageRequest();
+		cancelPostPhotoRequest();
+		cancelCheckIsFriendRequest();
+		cancelAddFriendRequest();
+		cancelRemoveFriendRequest();
+
+		// remove all local listeners
+		mLocalListeners = new HashMap<String, SocialNetworkListener>();
+	}
+
+	// ////////////////// UTIL METHODS ////////////////////
+
+	protected void checkRequestState(AsyncTask request) throws SocialNetworkException {
+		if (request != null) {
+			throw new SocialNetworkException("Request is already running");
+		}
+	}
+
+	private void registerListener(String listenerID, SocialNetworkListener socialNetworkListener) {
+		if (socialNetworkListener != null) {
+			mLocalListeners.put(listenerID, socialNetworkListener);
+		} else {
+			mLocalListeners.put(listenerID, mGlobalListeners.get(listenerID));
+		}
+	}
+
+	// ////////////////// SETTERS FOR GLOBAL LISTENERS ////////////////////
+
+	public void setOnLoginCompleteListener(OnLoginCompleteListener onLoginCompleteListener) {
+		mGlobalListeners.put(REQUEST_LOGIN, onLoginCompleteListener);
+	}
+
+	public void setOnRequestCurrentPersonCompleteListener(OnRequestSocialPersonCompleteListener onRequestCurrentPersonCompleteListener) {
+		mGlobalListeners.put(REQUEST_GET_CURRENT_PERSON, onRequestCurrentPersonCompleteListener);
+	}
+
+	public void setOnRequestSocialPersonCompleteListener(OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
+		mGlobalListeners.put(REQUEST_GET_PERSON, onRequestSocialPersonCompleteListener);
+	}
+
+	public void setOnCheckIsFriendListener(OnCheckIsFriendCompleteListener onCheckIsFriendListener) {
+		mGlobalListeners.put(REQUEST_CHECK_IS_FRIEND, onCheckIsFriendListener);
+	}
+
+	public void setOnPostingMessageCompleteListener(OnPostingCompleteListener onPostingCompleteListener) {
+		mGlobalListeners.put(REQUEST_POST_MESSAGE, onPostingCompleteListener);
+	}
+
+	public void setOnPostingPhotoCompleteListener(OnPostingCompleteListener onPostingCompleteListener) {
+		mGlobalListeners.put(REQUEST_POST_PHOTO, onPostingCompleteListener);
+	}
+
+	public void setOnRequestAddFriendCompleteListener(OnRequestAddFriendCompleteListener onRequestAddFriendCompleteListener) {
+		mGlobalListeners.put(REQUEST_ADD_FRIEND, onRequestAddFriendCompleteListener);
+	}
+
+	public void setOnRequestRemoveFriendCompleteListener(OnRequestRemoveFriendCompleteListener onRequestRemoveFriendCompleteListener) {
+		mGlobalListeners.put(REQUEST_REMOVE_FRIEND, onRequestRemoveFriendCompleteListener);
+	}
+}
diff --git a/library/src/main/java/com/androidsocialnetworks/lib/SocialNetworkAsyncTask.java b/library/src/main/src/com/androidsocialnetworks/lib/SocialNetworkAsyncTask.java
similarity index 100%
rename from library/src/main/java/com/androidsocialnetworks/lib/SocialNetworkAsyncTask.java
rename to library/src/main/src/com/androidsocialnetworks/lib/SocialNetworkAsyncTask.java
diff --git a/library/src/main/java/com/androidsocialnetworks/lib/SocialNetworkException.java b/library/src/main/src/com/androidsocialnetworks/lib/SocialNetworkException.java
similarity index 100%
rename from library/src/main/java/com/androidsocialnetworks/lib/SocialNetworkException.java
rename to library/src/main/src/com/androidsocialnetworks/lib/SocialNetworkException.java
diff --git a/library/src/main/src/com/androidsocialnetworks/lib/SocialNetworkManager.java b/library/src/main/src/com/androidsocialnetworks/lib/SocialNetworkManager.java
new file mode 100644
index 0000000..061248a
--- /dev/null
+++ b/library/src/main/src/com/androidsocialnetworks/lib/SocialNetworkManager.java
@@ -0,0 +1,256 @@
+package com.androidsocialnetworks.lib;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.app.Fragment;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.androidsocialnetworks.lib.impl.FacebookSocialNetwork;
+import com.androidsocialnetworks.lib.impl.TwitterSocialNetwork;
+import com.facebook.internal.Utility;
+
+public class SocialNetworkManager extends Fragment {
+
+	private static final String TAG = SocialNetworkManager.class.getSimpleName();
+	private static final String PARAM_TWITTER_KEY = "SocialNetworkManager.PARAM_TWITTER_KEY";
+	private static final String PARAM_TWITTER_SECRET = "SocialNetworkManager.PARAM_TWITTER_SECRET";
+	private static final String PARAM_LINKEDIN_KEY = "SocialNetworkManager.PARAM_LINKEDIN_KEY";
+	private static final String PARAM_LINKEDIN_SECRET = "SocialNetworkManager.PARAM_LINKEDIN_SECRET";
+	private static final String PARAM_LINKEDIN_PERMISSIONS = "SocialNetworkManager.PARAM_LINKEDIN_PERMISSIONS";
+	private static final String PARAM_FACEBOOK = "SocialNetworkManager.PARAM_FACEBOOK";
+	private static final String PARAM_GOOGLE_PLUS = "SocialNetworkManager.PARAM_GOOGLE_PLUS";
+
+	private Map<Integer, SocialNetwork> mSocialNetworksMap = new HashMap<Integer, SocialNetwork>();
+	private OnInitializationCompleteListener mOnInitializationCompleteListener;
+
+	@Override
+	public void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		Log.d(TAG, "SocialNetworkManager.onCreate");
+
+		setRetainInstance(true);
+
+		Bundle args = getArguments();
+
+		final String paramTwitterKey = args.getString(PARAM_TWITTER_KEY);
+		final String paramTwitterSecret = args.getString(PARAM_TWITTER_SECRET);
+
+		final boolean paramFacebook = args.getBoolean(PARAM_FACEBOOK, false);
+
+		if (!TextUtils.isEmpty(paramTwitterKey) || !TextUtils.isEmpty(paramTwitterKey)) {
+			mSocialNetworksMap.put(TwitterSocialNetwork.ID, new TwitterSocialNetwork(this, paramTwitterKey, paramTwitterSecret));
+		}
+
+		if (paramFacebook) {
+			mSocialNetworksMap.put(FacebookSocialNetwork.ID, new FacebookSocialNetwork(this));
+		}
+
+		for (SocialNetwork socialNetwork : mSocialNetworksMap.values()) {
+			socialNetwork.onCreate(savedInstanceState);
+		}
+	}
+
+	@Override
+	public void onStart() {
+		super.onStart();
+		Log.d(TAG, "SocialNetworkManager.onStart");
+
+		for (SocialNetwork socialNetwork : mSocialNetworksMap.values()) {
+			socialNetwork.onStart();
+		}
+	}
+
+	@Override
+	public void onResume() {
+		super.onResume();
+		Log.d(TAG, "SocialNetworkManager.onResume");
+
+		for (SocialNetwork socialNetwork : mSocialNetworksMap.values()) {
+			socialNetwork.onResume();
+		}
+
+		if (mOnInitializationCompleteListener != null) {
+			Log.d(TAG, "SocialNetworkManager.onResume: mOnInitializationCompleteListener != null");
+			mOnInitializationCompleteListener.onSocialNetworkManagerInitialized();
+		}
+	}
+
+	@Override
+	public void onPause() {
+		super.onPause();
+		Log.d(TAG, "SocialNetworkManager.onPause");
+
+		for (SocialNetwork socialNetwork : mSocialNetworksMap.values()) {
+			socialNetwork.onPause();
+		}
+	}
+
+	@Override
+	public void onStop() {
+		super.onStop();
+		Log.d(TAG, "SocialNetworkManager.onStop");
+
+		for (SocialNetwork socialNetwork : mSocialNetworksMap.values()) {
+			socialNetwork.onStop();
+		}
+	}
+
+	@Override
+	public void onDestroy() {
+		super.onDestroy();
+		Log.d(TAG, "SocialNetworkManager.onDestroy");
+
+		for (SocialNetwork socialNetwork : mSocialNetworksMap.values()) {
+			socialNetwork.onDestroy();
+		}
+	}
+
+	@Override
+	public void onSaveInstanceState(Bundle outState) {
+		super.onSaveInstanceState(outState);
+		Log.d(TAG, "SocialNetworkManager.onSaveInstanceState");
+
+		for (SocialNetwork socialNetwork : mSocialNetworksMap.values()) {
+			socialNetwork.onSaveInstanceState(outState);
+		}
+	}
+
+	@Override
+	public void onActivityResult(int requestCode, int resultCode, Intent data) {
+		super.onActivityResult(requestCode, resultCode, data);
+		Log.d(TAG, "SocialNetworkManager.onActivityResult: " + requestCode + " : " + resultCode);
+
+		for (SocialNetwork socialNetwork : mSocialNetworksMap.values()) {
+			socialNetwork.onActivityResult(requestCode, resultCode, data);
+		}
+	}
+
+	public TwitterSocialNetwork getTwitterSocialNetwork() throws SocialNetworkException {
+		if (!mSocialNetworksMap.containsKey(TwitterSocialNetwork.ID)) {
+			throw new SocialNetworkException("Twitter wasn't initialized...");
+		}
+
+		return (TwitterSocialNetwork) mSocialNetworksMap.get(TwitterSocialNetwork.ID);
+	}
+
+	public FacebookSocialNetwork getFacebookSocialNetwork() throws SocialNetworkException {
+		if (!mSocialNetworksMap.containsKey(FacebookSocialNetwork.ID)) {
+			throw new IllegalStateException("Facebook wasn't initialized...");
+		}
+
+		return (FacebookSocialNetwork) mSocialNetworksMap.get(FacebookSocialNetwork.ID);
+	}
+
+	public SocialNetwork getSocialNetwork(int id) throws SocialNetworkException {
+		if (!mSocialNetworksMap.containsKey(id)) {
+			throw new SocialNetworkException("Social network with id = " + id + " not found");
+		}
+
+		return mSocialNetworksMap.get(id);
+	}
+
+	public void addSocialNetwork(SocialNetwork socialNetwork) {
+		if (mSocialNetworksMap.get(socialNetwork.getID()) != null) {
+			throw new SocialNetworkException("Social network with id = " + socialNetwork.getID() + " already exists");
+		}
+
+		mSocialNetworksMap.put(socialNetwork.getID(), socialNetwork);
+	}
+
+	public List<SocialNetwork> getInitializedSocialNetworks() {
+		return Collections.unmodifiableList(new ArrayList<SocialNetwork>(mSocialNetworksMap.values()));
+	}
+
+	public void setOnInitializationCompleteListener(OnInitializationCompleteListener onInitializationCompleteListener) {
+		mOnInitializationCompleteListener = onInitializationCompleteListener;
+	}
+
+	public static interface OnInitializationCompleteListener {
+		public void onSocialNetworkManagerInitialized();
+	}
+
+	public static class Builder {
+		private String twitterConsumerKey, twitterConsumerSecret;
+		private String linkedInConsumerKey, linkedInConsumerSecret, linkedInPermissions;
+		private boolean facebook;
+		private boolean googlePlus;
+
+		private Context mContext;
+
+		private Builder(Context context) {
+			mContext = context;
+		}
+
+		public static Builder from(Context context) {
+			return new Builder(context);
+		}
+
+		public Builder twitter(String consumerKey, String consumerSecret) {
+			twitterConsumerKey = consumerKey;
+			twitterConsumerSecret = consumerSecret;
+			return this;
+		}
+
+		public Builder linkedIn(String consumerKey, String consumerSecret, String permissions) {
+			linkedInConsumerKey = consumerKey;
+			linkedInConsumerSecret = consumerSecret;
+			linkedInPermissions = permissions;
+			return this;
+		}
+
+		// https://developers.facebook.com/docs/android/getting-started/
+		public Builder facebook() {
+			String applicationID = Utility.getMetadataApplicationId(mContext);
+
+			if (applicationID == null) {
+				throw new IllegalStateException("applicationID can't be null\n"
+						+ "Please check https://developers.facebook.com/docs/android/getting-started/");
+			}
+
+			facebook = true;
+
+			return this;
+		}
+
+		public Builder googlePlus() {
+			googlePlus = true;
+			return this;
+		}
+
+		public SocialNetworkManager build() {
+			Bundle args = new Bundle();
+
+			if (!TextUtils.isEmpty(twitterConsumerKey) && !TextUtils.isEmpty(twitterConsumerSecret)) {
+				args.putString(PARAM_TWITTER_KEY, twitterConsumerKey);
+				args.putString(PARAM_TWITTER_SECRET, twitterConsumerSecret);
+			}
+
+			if (!TextUtils.isEmpty(linkedInConsumerKey) && !TextUtils.isEmpty(linkedInConsumerSecret)
+					&& !TextUtils.isEmpty(linkedInPermissions)) {
+				args.putString(PARAM_LINKEDIN_KEY, linkedInConsumerKey);
+				args.putString(PARAM_LINKEDIN_SECRET, linkedInConsumerSecret);
+				args.putString(PARAM_LINKEDIN_PERMISSIONS, linkedInPermissions);
+			}
+
+			if (facebook) {
+				args.putBoolean(PARAM_FACEBOOK, true);
+			}
+
+			if (googlePlus) {
+				args.putBoolean(PARAM_GOOGLE_PLUS, true);
+			}
+
+			SocialNetworkManager socialNetworkManager = new SocialNetworkManager();
+			socialNetworkManager.setArguments(args);
+			return socialNetworkManager;
+		}
+	}
+}
diff --git a/library/src/main/java/com/androidsocialnetworks/lib/SocialPerson.java b/library/src/main/src/com/androidsocialnetworks/lib/SocialPerson.java
similarity index 100%
rename from library/src/main/java/com/androidsocialnetworks/lib/SocialPerson.java
rename to library/src/main/src/com/androidsocialnetworks/lib/SocialPerson.java
diff --git a/library/src/main/src/com/androidsocialnetworks/lib/impl/FacebookSocialNetwork.java b/library/src/main/src/com/androidsocialnetworks/lib/impl/FacebookSocialNetwork.java
new file mode 100644
index 0000000..bac42b7
--- /dev/null
+++ b/library/src/main/src/com/androidsocialnetworks/lib/impl/FacebookSocialNetwork.java
@@ -0,0 +1,391 @@
+package com.androidsocialnetworks.lib.impl;
+
+import java.io.File;
+import java.util.Collections;
+
+import android.app.Fragment;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.os.Bundle;
+import android.util.Log;
+
+import com.androidsocialnetworks.lib.SocialNetwork;
+import com.androidsocialnetworks.lib.SocialNetworkException;
+import com.androidsocialnetworks.lib.SocialPerson;
+import com.androidsocialnetworks.lib.listener.OnCheckIsFriendCompleteListener;
+import com.androidsocialnetworks.lib.listener.OnLoginCompleteListener;
+import com.androidsocialnetworks.lib.listener.OnPostingCompleteListener;
+import com.androidsocialnetworks.lib.listener.OnRequestAddFriendCompleteListener;
+import com.androidsocialnetworks.lib.listener.OnRequestRemoveFriendCompleteListener;
+import com.androidsocialnetworks.lib.listener.OnRequestSocialPersonCompleteListener;
+import com.facebook.FacebookAuthorizationException;
+import com.facebook.FacebookOperationCanceledException;
+import com.facebook.Request;
+import com.facebook.Response;
+import com.facebook.Session;
+import com.facebook.Session.StatusCallback;
+import com.facebook.SessionDefaultAudience;
+import com.facebook.SessionLoginBehavior;
+import com.facebook.SessionState;
+import com.facebook.UiLifecycleHelper;
+import com.facebook.internal.SessionTracker;
+import com.facebook.internal.Utility;
+import com.facebook.model.GraphUser;
+
+/**
+ * TODO: think about canceling requests
+ */
+public class FacebookSocialNetwork extends SocialNetwork {
+	public static final int ID = 4;
+
+	private static final String TAG = FacebookSocialNetwork.class.getSimpleName();
+	private static final String PERMISSION = "publish_actions";
+	private SessionTracker mSessionTracker;
+	private UiLifecycleHelper mUILifecycleHelper;
+	private String mApplicationId;
+	private SessionState mSessionState;
+	private String mPhotoPath;
+	private String mStatus;
+	private PendingAction mPendingAction = PendingAction.NONE;
+	private Session.StatusCallback mSessionStatusCallback = new StatusCallback() {
+		@Override
+		public void call(Session session, SessionState state, Exception exception) {
+			onSessionStateChange(session, state, exception);
+		}
+	};
+
+	public FacebookSocialNetwork(Fragment fragment) {
+		super(fragment);
+	}
+
+	@Override
+	public boolean isConnected() {
+		Session session = Session.getActiveSession();
+		return (session != null && session.isOpened());
+	}
+
+	@Override
+	public void requestLogin(OnLoginCompleteListener onLoginCompleteListener) {
+		super.requestLogin(onLoginCompleteListener);
+
+		final Session openSession = mSessionTracker.getOpenSession();
+
+		if (openSession != null) {
+			if (mLocalListeners.get(REQUEST_LOGIN) != null) {
+				mLocalListeners.get(REQUEST_LOGIN).onError(getID(), REQUEST_LOGIN, "already loginned", null);
+			}
+		}
+
+		Session currentSession = mSessionTracker.getSession();
+		if (currentSession == null || currentSession.getState().isClosed()) {
+			mSessionTracker.setSession(null);
+			Session session = new Session.Builder(mSocialNetworkManager.getActivity()).setApplicationId(mApplicationId).build();
+			Session.setActiveSession(session);
+			currentSession = session;
+		}
+
+		if (!currentSession.isOpened()) {
+			Session.OpenRequest openRequest = null;
+			openRequest = new Session.OpenRequest(mSocialNetworkManager.getActivity());
+
+			openRequest.setDefaultAudience(SessionDefaultAudience.EVERYONE);
+			openRequest.setPermissions(Collections.<String> emptyList());
+			openRequest.setLoginBehavior(SessionLoginBehavior.SSO_WITH_FALLBACK);
+
+			currentSession.openForRead(openRequest);
+		}
+	}
+
+	@Override
+	public void logout() {
+		if (mSessionTracker == null) {
+			return;
+		}
+
+		final Session openSession = mSessionTracker.getOpenSession();
+
+		if (openSession != null) {
+			openSession.closeAndClearTokenInformation();
+		}
+	}
+
+	@Override
+	public int getID() {
+		return ID;
+	}
+
+	@Override
+	public void requestCurrentPerson(OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
+		super.requestCurrentPerson(onRequestSocialPersonCompleteListener);
+
+		final Session currentSession = mSessionTracker.getOpenSession();
+
+		if (currentSession == null) {
+			if (mLocalListeners.get(REQUEST_GET_CURRENT_PERSON) != null) {
+				mLocalListeners.get(REQUEST_GET_CURRENT_PERSON).onError(getID(), REQUEST_GET_CURRENT_PERSON, "please login first", null);
+			}
+
+			return;
+		}
+
+		Request request = Request.newMeRequest(currentSession, new Request.GraphUserCallback() {
+			@Override
+			public void onCompleted(GraphUser me, Response response) {
+				if (response.getError() != null) {
+					if (mLocalListeners.get(REQUEST_GET_CURRENT_PERSON) != null) {
+						mLocalListeners.get(REQUEST_GET_CURRENT_PERSON).onError(getID(), REQUEST_GET_CURRENT_PERSON,
+								response.getError().getErrorMessage(), null);
+					}
+
+					return;
+				}
+
+				if (mLocalListeners.get(REQUEST_GET_CURRENT_PERSON) != null) {
+					SocialPerson socialPerson = new SocialPerson();
+					socialPerson.id = me.getId();
+					socialPerson.name = me.getName();
+					socialPerson.avatarURL = String.format("http://graph.facebook.com/%s/picture?width=200&height=200", me.getUsername());
+
+					((OnRequestSocialPersonCompleteListener) mLocalListeners.get(REQUEST_GET_CURRENT_PERSON)).onRequestSocialPersonSuccess(
+							getID(), socialPerson);
+				}
+			}
+		});
+		request.executeAsync();
+	}
+
+	@Override
+	public void requestSocialPerson(String userID, OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
+		throw new SocialNetworkException("requestSocialPerson isn't allowed for FacebookSocialNetwork");
+	}
+
+	@Override
+	public void requestPostMessage(String message, OnPostingCompleteListener onPostingCompleteListener) {
+		super.requestPostMessage(message, onPostingCompleteListener);
+		mStatus = message;
+		performPublish(PendingAction.POST_STATUS_UPDATE);
+	}
+
+	@Override
+	public void requestPostPhoto(File photo, String message, OnPostingCompleteListener onPostingCompleteListener) {
+		super.requestPostPhoto(photo, message, onPostingCompleteListener);
+		mPhotoPath = photo.getAbsolutePath();
+		performPublish(PendingAction.POST_PHOTO);
+	}
+
+	private void performPublish(PendingAction action) {
+		Session session = Session.getActiveSession();
+		if (session != null) {
+			mPendingAction = action;
+			if (hasPublishPermission()) {
+				// We can do the action right away.
+				handlePendingAction();
+				return;
+			} else if (session.isOpened()) {
+				// We need to get new permissions, then complete the action when
+				// we get called back.
+				session.requestNewPublishPermissions(new Session.NewPermissionsRequest(mSocialNetworkManager.getActivity(), PERMISSION));
+				return;
+			}
+		}
+
+		if (action == PendingAction.POST_STATUS_UPDATE) {
+			if (mLocalListeners.get(REQUEST_POST_MESSAGE) != null) {
+				mLocalListeners.get(REQUEST_POST_MESSAGE).onError(getID(), REQUEST_POST_MESSAGE, "no session", null);
+			}
+		}
+
+		if (action == PendingAction.POST_PHOTO) {
+			if (mLocalListeners.get(REQUEST_POST_PHOTO) != null) {
+				mLocalListeners.get(REQUEST_POST_PHOTO).onError(getID(), REQUEST_POST_PHOTO, "no session", null);
+			}
+		}
+	}
+
+	@Override
+	public void requestCheckIsFriend(String userID, OnCheckIsFriendCompleteListener onCheckIsFriendCompleteListener) {
+		throw new SocialNetworkException("requestCheckIsFriend isn't allowed for FacebookSocialNetwork");
+	}
+
+	@Override
+	public void requestAddFriend(String userID, OnRequestAddFriendCompleteListener onRequestAddFriendCompleteListener) {
+		throw new SocialNetworkException("requestAddFriend isn't allowed for FacebookSocialNetwork");
+	}
+
+	@Override
+	public void requestRemoveFriend(String userID, OnRequestRemoveFriendCompleteListener onRequestRemoveFriendCompleteListener) {
+		throw new SocialNetworkException("requestRemoveFriend isn't allowed for FacebookSocialNetwork");
+	}
+
+	private void onSessionStateChange(Session session, SessionState state, Exception exception) {
+		Log.d(TAG, "onSessionStateChange: " + state + " : " + exception);
+
+		if (mSessionState == SessionState.OPENING && state == SessionState.OPENED) {
+			if (mLocalListeners.get(REQUEST_LOGIN) != null) {
+				((OnLoginCompleteListener) mLocalListeners.get(REQUEST_LOGIN)).onLoginSuccess(getID());
+				mLocalListeners.remove(REQUEST_LOGIN);
+			}
+		}
+
+		if (state == SessionState.CLOSED_LOGIN_FAILED) {
+			if (mLocalListeners.get(REQUEST_LOGIN) != null) {
+				mLocalListeners.get(REQUEST_LOGIN).onError(getID(), REQUEST_LOGIN, exception.getMessage(), null);
+				mLocalListeners.remove(REQUEST_LOGIN);
+			}
+		}
+
+		mSessionState = state;
+
+		if (mPendingAction != PendingAction.NONE
+				&& (exception instanceof FacebookOperationCanceledException || exception instanceof FacebookAuthorizationException)) {
+			mPendingAction = PendingAction.NONE;
+
+			if (mLocalListeners.get(REQUEST_POST_MESSAGE) != null) {
+				mLocalListeners.get(REQUEST_POST_MESSAGE).onError(getID(), REQUEST_POST_MESSAGE, "permission not granted", null);
+			}
+
+			if (mLocalListeners.get(REQUEST_POST_PHOTO) != null) {
+				mLocalListeners.get(REQUEST_POST_PHOTO).onError(getID(), REQUEST_POST_PHOTO, "permission not granted", null);
+			}
+		}
+
+		if (session.getPermissions().contains(PERMISSION) && state == SessionState.OPENED_TOKEN_UPDATED) {
+			handlePendingAction();
+		}
+	}
+
+	@Override
+	public void onCreate(Bundle savedInstanceState) {
+		super.onCreate(savedInstanceState);
+		mUILifecycleHelper = new UiLifecycleHelper(mSocialNetworkManager.getActivity(), mSessionStatusCallback);
+		mUILifecycleHelper.onCreate(savedInstanceState);
+
+		initializeActiveSessionWithCachedToken(mSocialNetworkManager.getActivity());
+		finishInit();
+	}
+
+	private boolean initializeActiveSessionWithCachedToken(Context context) {
+		if (context == null) {
+			return false;
+		}
+
+		Session session = Session.getActiveSession();
+		if (session != null) {
+			return session.isOpened();
+		}
+
+		mApplicationId = Utility.getMetadataApplicationId(context);
+		if (mApplicationId == null) {
+			return false;
+		}
+
+		return Session.openActiveSessionFromCache(context) != null;
+	}
+
+	private void finishInit() {
+		mSessionTracker = new SessionTracker(mSocialNetworkManager.getActivity(), mSessionStatusCallback, null, false);
+	}
+
+	@Override
+	public void onResume() {
+		super.onResume();
+		mUILifecycleHelper.onResume();
+	}
+
+	@Override
+	public void onPause() {
+		super.onPause();
+		mUILifecycleHelper.onPause();
+	}
+
+	@Override
+	public void onDestroy() {
+		super.onDestroy();
+		mUILifecycleHelper.onDestroy();
+	}
+
+	@Override
+	public void onSaveInstanceState(Bundle outState) {
+		super.onSaveInstanceState(outState);
+		mUILifecycleHelper.onSaveInstanceState(outState);
+	}
+
+	@Override
+	public void onActivityResult(int requestCode, int resultCode, Intent data) {
+		Log.e(getClass().getSimpleName(), "onActivityResult");
+		super.onActivityResult(requestCode, resultCode, data);
+		mUILifecycleHelper.onActivityResult(requestCode, resultCode, data, null);
+	}
+
+	private boolean hasPublishPermission() {
+		Session session = Session.getActiveSession();
+		return session != null && session.getPermissions().contains(PERMISSION);
+	}
+
+	@SuppressWarnings("incomplete-switch")
+	private void handlePendingAction() {
+		PendingAction previouslyPendingAction = mPendingAction;
+		// These actions may re-set pendingAction if they are still pending, but
+		// we assume they
+		// will succeed.
+		mPendingAction = PendingAction.NONE;
+
+		switch (previouslyPendingAction) {
+		case POST_PHOTO:
+			postPhoto(mPhotoPath);
+			break;
+		case POST_STATUS_UPDATE:
+			postStatusUpdate(mStatus);
+			break;
+		}
+	}
+
+	private void postStatusUpdate(String message) {
+		if (isConnected() && hasPublishPermission()) {
+			Request request = Request.newStatusUpdateRequest(Session.getActiveSession(), message, null, null, new Request.Callback() {
+				@Override
+				public void onCompleted(Response response) {
+					publishSuccess(REQUEST_POST_MESSAGE, response.getError() == null ? null : response.getError().getErrorMessage());
+				}
+			});
+			request.executeAsync();
+		} else {
+			mPendingAction = PendingAction.POST_STATUS_UPDATE;
+		}
+	}
+
+	private void postPhoto(final String path) {
+		if (hasPublishPermission()) {
+			Bitmap image = BitmapFactory.decodeFile(path);
+			Request request = Request.newUploadPhotoRequest(Session.getActiveSession(), image, new Request.Callback() {
+				@Override
+				public void onCompleted(Response response) {
+					publishSuccess(REQUEST_POST_PHOTO, response.getError() == null ? null : response.getError().getErrorMessage());
+				}
+			});
+			request.executeAsync();
+		} else {
+			mPendingAction = PendingAction.POST_PHOTO;
+		}
+	}
+
+	private void publishSuccess(String requestID, String error) {
+		if (mLocalListeners.get(requestID) == null) {
+			return;
+		}
+
+		if (error != null) {
+			mLocalListeners.get(requestID).onError(getID(), requestID, error, null);
+			return;
+		}
+
+		((OnPostingCompleteListener) mLocalListeners.get(requestID)).onPostSuccessfully(getID());
+		mLocalListeners.remove(requestID);
+	}
+
+	private enum PendingAction {
+		NONE, POST_PHOTO, POST_STATUS_UPDATE
+	}
+}
diff --git a/library/src/main/src/com/androidsocialnetworks/lib/impl/TwitterSocialNetwork.java b/library/src/main/src/com/androidsocialnetworks/lib/impl/TwitterSocialNetwork.java
new file mode 100644
index 0000000..fe9a444
--- /dev/null
+++ b/library/src/main/src/com/androidsocialnetworks/lib/impl/TwitterSocialNetwork.java
@@ -0,0 +1,577 @@
+package com.androidsocialnetworks.lib.impl;
+
+import static com.androidsocialnetworks.lib.Consts.TAG;
+
+import java.io.File;
+import java.util.UUID;
+
+import twitter4j.Relationship;
+import twitter4j.StatusUpdate;
+import twitter4j.Twitter;
+import twitter4j.TwitterException;
+import twitter4j.TwitterFactory;
+import twitter4j.User;
+import twitter4j.auth.AccessToken;
+import twitter4j.auth.RequestToken;
+import twitter4j.conf.ConfigurationBuilder;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.app.Fragment;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.androidsocialnetworks.lib.OAuthActivity;
+import com.androidsocialnetworks.lib.OAuthSocialNetwork;
+import com.androidsocialnetworks.lib.SocialNetworkAsyncTask;
+import com.androidsocialnetworks.lib.SocialNetworkException;
+import com.androidsocialnetworks.lib.SocialPerson;
+import com.androidsocialnetworks.lib.listener.OnCheckIsFriendCompleteListener;
+import com.androidsocialnetworks.lib.listener.OnLoginCompleteListener;
+import com.androidsocialnetworks.lib.listener.OnPostingCompleteListener;
+import com.androidsocialnetworks.lib.listener.OnRequestAddFriendCompleteListener;
+import com.androidsocialnetworks.lib.listener.OnRequestRemoveFriendCompleteListener;
+import com.androidsocialnetworks.lib.listener.OnRequestSocialPersonCompleteListener;
+
+public class TwitterSocialNetwork extends OAuthSocialNetwork {
+	public static final int ID = 1;
+	private static final String SAVE_STATE_KEY_OAUTH_TOKEN = "TwitterSocialNetwork.SAVE_STATE_KEY_OAUTH_TOKEN";
+	private static final String SAVE_STATE_KEY_OAUTH_SECRET = "TwitterSocialNetwork.SAVE_STATE_KEY_OAUTH_SECRET";
+	private static final String SAVE_STATE_KEY_USER_ID = "TwitterSocialNetwork.SAVE_STATE_KEY_USER_ID";
+
+	private static final String URL_TWITTER_OAUTH_VERIFIER = "oauth_verifier";
+
+	// max 16 bit to use in startActivityForResult
+	private static final int REQUEST_AUTH = UUID.randomUUID().hashCode() & 0xFFFF;
+
+	private final String TWITTER_CALLBACK_URL = "oauth://AndroidSocialNetworks";
+	private final String fConsumerKey;
+	private final String fConsumerSecret;
+
+	private Twitter mTwitter;
+	private RequestToken mRequestToken;
+
+	public TwitterSocialNetwork(Fragment fragment, String consumerKey, String consumerSecret) {
+		super(fragment);
+
+		fConsumerKey = consumerKey;
+		fConsumerSecret = consumerSecret;
+
+		if (TextUtils.isEmpty(fConsumerKey) || TextUtils.isEmpty(fConsumerSecret)) {
+			throw new IllegalArgumentException("consumerKey and consumerSecret are invalid");
+		}
+
+		/*
+		 *
+		 * No authentication challenges found Relevant discussions can be found
+		 * on the Internet at: http://www.google.co.jp/search?q=8e063946 or
+		 * http://www.google.co.jp/search?q=ef59cf9f
+		 */
+		initTwitterClient();
+	}
+
+	private void initTwitterClient() {
+		ConfigurationBuilder builder = new ConfigurationBuilder();
+		builder.setOAuthConsumerKey(fConsumerKey);
+		builder.setOAuthConsumerSecret(fConsumerSecret);
+
+		String accessToken = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null);
+		String accessTokenSecret = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_SECRET, null);
+
+		TwitterFactory factory = new TwitterFactory(builder.build());
+
+		if (TextUtils.isEmpty(accessToken) && TextUtils.isEmpty(accessTokenSecret)) {
+			mTwitter = factory.getInstance();
+		} else {
+			mTwitter = factory.getInstance(new AccessToken(accessToken, accessTokenSecret));
+		}
+	}
+
+	@Override
+	public int getID() {
+		return ID;
+	}
+
+	@Override
+	public boolean isConnected() {
+		String accessToken = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_TOKEN, null);
+		String accessTokenSecret = mSharedPreferences.getString(SAVE_STATE_KEY_OAUTH_SECRET, null);
+		return accessToken != null && accessTokenSecret != null;
+	}
+
+	@Override
+	public void requestLogin(OnLoginCompleteListener onLoginCompleteListener) {
+		super.requestLogin(onLoginCompleteListener);
+
+		executeRequest(new RequestLoginAsyncTask(), null, REQUEST_LOGIN);
+	}
+
+	@Override
+	public void logout() {
+		mSharedPreferences.edit().remove(SAVE_STATE_KEY_OAUTH_TOKEN).remove(SAVE_STATE_KEY_OAUTH_SECRET).apply();
+
+		mTwitter = null;
+		initTwitterClient();
+	}
+
+	@Override
+	public void requestCurrentPerson(OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
+		super.requestCurrentPerson(onRequestSocialPersonCompleteListener);
+
+		executeRequest(new RequestGetPersonAsyncTask(), null, REQUEST_GET_CURRENT_PERSON);
+	}
+
+	@Override
+	public void requestSocialPerson(String userID, OnRequestSocialPersonCompleteListener onRequestSocialPersonCompleteListener) {
+		super.requestSocialPerson(userID, onRequestSocialPersonCompleteListener);
+
+		if (TextUtils.isEmpty(userID)) {
+			throw new SocialNetworkException("userID can't be null or empty");
+		}
+
+		Bundle args = new Bundle();
+		try {
+			args.putLong(RequestGetPersonAsyncTask.PARAM_USER_ID, Long.parseLong(userID));
+		} catch (NumberFormatException e) {
+			Log.e(TAG, "ERROR", e);
+			throw new SocialNetworkException("userID should be long number");
+		}
+
+		executeRequest(new RequestGetPersonAsyncTask(), args, REQUEST_GET_PERSON);
+	}
+
+	@Override
+	public void requestPostMessage(String message, OnPostingCompleteListener onPostingCompleteListener) {
+		super.requestPostMessage(message, onPostingCompleteListener);
+
+		Bundle args = new Bundle();
+		args.putString(RequestUpdateStatusAsyncTask.PARAM_MESSAGE, message);
+
+		executeRequest(new RequestUpdateStatusAsyncTask(), args, REQUEST_POST_MESSAGE);
+	}
+
+	@Override
+	public void requestPostPhoto(File photo, String message, OnPostingCompleteListener onPostingCompleteListener) {
+		super.requestPostPhoto(photo, message, onPostingCompleteListener);
+
+		Bundle args = new Bundle();
+		args.putString(RequestUpdateStatusAsyncTask.PARAM_MESSAGE, message);
+		args.putString(RequestUpdateStatusAsyncTask.PARAM_PHOTO_PATH, photo.getAbsolutePath());
+
+		executeRequest(new RequestUpdateStatusAsyncTask(), args, REQUEST_POST_PHOTO);
+	}
+
+	@Override
+	public void requestCheckIsFriend(String userID, OnCheckIsFriendCompleteListener onCheckIsFriendCompleteListener) {
+		super.requestCheckIsFriend(userID, onCheckIsFriendCompleteListener);
+
+		Bundle args = new Bundle();
+		try {
+			args.putLong(RequestCheckIsFriendAsyncTask.PARAM_USER_ID, Long.parseLong(userID));
+		} catch (NumberFormatException e) {
+			Log.e(TAG, "ERROR", e);
+			throw new SocialNetworkException("userID should be long number");
+		}
+
+		executeRequest(new RequestCheckIsFriendAsyncTask(), args, REQUEST_CHECK_IS_FRIEND);
+	}
+
+	@Override
+	public void requestAddFriend(String userID, OnRequestAddFriendCompleteListener onRequestAddFriendCompleteListener) {
+		super.requestAddFriend(userID, onRequestAddFriendCompleteListener);
+
+		Bundle args = new Bundle();
+		try {
+			args.putLong(RequestAddFriendAsyncTask.PARAM_USER_ID, Long.parseLong(userID));
+		} catch (NumberFormatException e) {
+			Log.e(TAG, "ERROR", e);
+			throw new SocialNetworkException("userID should be long number");
+		}
+
+		executeRequest(new RequestAddFriendAsyncTask(), args, REQUEST_ADD_FRIEND);
+	}
+
+	@Override
+	public void requestRemoveFriend(String userID, OnRequestRemoveFriendCompleteListener onRequestRemoveFriendCompleteListener) {
+		super.requestRemoveFriend(userID, onRequestRemoveFriendCompleteListener);
+
+		Bundle args = new Bundle();
+		try {
+			args.putLong(RequestRemoveFriendAsyncTask.PARAM_USER_ID, Long.parseLong(userID));
+		} catch (NumberFormatException e) {
+			Log.e(TAG, "ERROR", e);
+			throw new SocialNetworkException("userID should be long number");
+		}
+
+		executeRequest(new RequestRemoveFriendAsyncTask(), args, REQUEST_REMOVE_FRIEND);
+	}
+
+	@Override
+	public void onActivityResult(int requestCode, int resultCode, Intent data) {
+		if (requestCode != REQUEST_AUTH) {
+			return;
+		}
+
+		super.onActivityResult(requestCode, resultCode, data);
+
+		Uri uri = data != null ? data.getData() : null;
+
+		if (uri != null && uri.toString().startsWith(TWITTER_CALLBACK_URL)) {
+			String verifier = uri.getQueryParameter(URL_TWITTER_OAUTH_VERIFIER);
+
+			RequestLogin2AsyncTask requestLogin2AsyncTask = new RequestLogin2AsyncTask();
+			mRequests.put(REQUEST_LOGIN2, requestLogin2AsyncTask);
+			Bundle args = new Bundle();
+			args.putString(RequestLogin2AsyncTask.PARAM_VERIFIER, verifier);
+			requestLogin2AsyncTask.execute(args);
+		} else {
+			if (mLocalListeners.get(REQUEST_LOGIN) != null) {
+				mLocalListeners.get(REQUEST_LOGIN).onError(getID(), REQUEST_LOGIN, "incorrect URI returned: " + uri, null);
+				mLocalListeners.remove(REQUEST_LOGIN);
+			}
+
+			/*
+			 *
+			 * No authentication challenges found Relevant discussions can be
+			 * found on the Internet at:
+			 * http://www.google.co.jp/search?q=8e063946 or
+			 * http://www.google.co.jp/search?q=ef59cf9f
+			 */
+			initTwitterClient();
+		}
+	}
+
+	@Override
+	public void cancelLoginRequest() {
+		super.cancelLoginRequest();
+
+		initTwitterClient();
+	}
+
+	private class RequestLoginAsyncTask extends SocialNetworkAsyncTask {
+		private static final String RESULT_OAUTH_LOGIN = "LoginAsyncTask.RESULT_OAUTH_LOGIN";
+
+		@Override
+		protected Bundle doInBackground(Bundle... params) {
+			Bundle result = new Bundle();
+
+			try {
+				mRequestToken = mTwitter.getOAuthRequestToken(TWITTER_CALLBACK_URL);
+				Uri oauthLoginURL = Uri.parse(mRequestToken.getAuthenticationURL() + "&force_login=true");
+
+				result.putString(RESULT_OAUTH_LOGIN, oauthLoginURL.toString());
+			} catch (TwitterException e) {
+				Log.e(TAG, "ERROR", e);
+				result.putString(RESULT_ERROR, e.getMessage());
+			}
+
+			return result;
+		}
+
+		@Override
+		protected void onPostExecute(Bundle result) {
+			if (!handleRequestResult(result, REQUEST_LOGIN)) {
+				return;
+			}
+
+			if (result.containsKey(RESULT_OAUTH_LOGIN)) {
+				Intent intent = new Intent(mSocialNetworkManager.getActivity(), OAuthActivity.class).putExtra(OAuthActivity.PARAM_CALLBACK,
+						TWITTER_CALLBACK_URL).putExtra(OAuthActivity.PARAM_URL_TO_LOAD, result.getString(RESULT_OAUTH_LOGIN));
+
+				mSocialNetworkManager.startActivityForResult(intent, REQUEST_AUTH);
+			}
+		}
+	}
+
+	private class RequestLogin2AsyncTask extends SocialNetworkAsyncTask {
+		public static final String PARAM_VERIFIER = "Login2AsyncTask.PARAM_VERIFIER";
+
+		private static final String RESULT_ERROR = "Login2AsyncTask.RESULT_ERROR";
+		private static final String RESULT_TOKEN = "Login2AsyncTask.RESULT_TOKEN";
+		private static final String RESULT_SECRET = "Login2AsyncTask.RESULT_SECRET";
+		private static final String RESULT_USER_ID = "Login2AsyncTask.RESULT_USER_ID";
+
+		@Override
+		protected Bundle doInBackground(Bundle... params) {
+			String verifier = params[0].getString(PARAM_VERIFIER);
+
+			Bundle result = new Bundle();
+
+			try {
+				AccessToken accessToken = mTwitter.getOAuthAccessToken(mRequestToken, verifier);
+
+				result.putString(RESULT_TOKEN, accessToken.getToken());
+				result.putString(RESULT_SECRET, accessToken.getTokenSecret());
+				result.putLong(RESULT_USER_ID, accessToken.getUserId());
+			} catch (Exception e) {
+				Log.e(TAG, "ERROR", e);
+				result.putString(RESULT_ERROR, e.getMessage());
+			}
+
+			return result;
+		}
+
+		@Override
+		protected void onPostExecute(Bundle result) {
+			mRequests.remove(REQUEST_LOGIN2);
+			if (!handleRequestResult(result, REQUEST_LOGIN)) {
+				return;
+			}
+
+			// Shared Preferences
+			mSharedPreferences.edit().putString(SAVE_STATE_KEY_OAUTH_TOKEN, result.getString(RESULT_TOKEN))
+					.putString(SAVE_STATE_KEY_OAUTH_SECRET, result.getString(RESULT_SECRET))
+					.putLong(SAVE_STATE_KEY_USER_ID, result.getLong(RESULT_USER_ID)).apply();
+
+			initTwitterClient();
+
+			if (mLocalListeners.get(REQUEST_LOGIN) != null) {
+				((OnLoginCompleteListener) mLocalListeners.get(REQUEST_LOGIN)).onLoginSuccess(getID());
+			}
+
+			mLocalListeners.remove(REQUEST_LOGIN);
+		}
+	}
+
+	private class RequestGetPersonAsyncTask extends SocialNetworkAsyncTask {
+		public static final String PARAM_USER_ID = "RequestGetPersonAsyncTask.PARAM_USER_ID";
+
+		private static final String RESULT_IS_CURRENT_PERSON = "RequestPersonAsyncTask.RESULT_IS_CURRENT_PERSON";
+		private static final String RESULT_ID = "RequestPersonAsyncTask.RESULT_ID";
+		private static final String RESULT_NAME = "RequestPersonAsyncTask.RESULT_NAME";
+		private static final String RESULT_AVATAR_URL = "RequestPersonAsyncTask.RESULT_AVATAR_URL";
+
+		@Override
+		protected Bundle doInBackground(Bundle... params) {
+			Bundle args = params[0];
+			Bundle result = new Bundle();
+			Long userID;
+
+			if (args.containsKey(PARAM_USER_ID)) {
+				userID = args.getLong(PARAM_USER_ID);
+				result.putBoolean(RESULT_IS_CURRENT_PERSON, false);
+			} else {
+				userID = mSharedPreferences.getLong(SAVE_STATE_KEY_USER_ID, -1);
+				result.putBoolean(RESULT_IS_CURRENT_PERSON, true);
+			}
+
+			try {
+				User user = mTwitter.showUser(userID);
+
+				result.putString(RESULT_ID, user.getId() + "");
+				result.putString(RESULT_NAME, user.getName());
+				result.putString(RESULT_AVATAR_URL, user.getBiggerProfileImageURL());
+			} catch (TwitterException e) {
+				Log.e(TAG, "ERROR", e);
+				result.putString(RESULT_ERROR, e.getMessage());
+			}
+
+			return result;
+		}
+
+		@Override
+		protected void onPostExecute(Bundle result) {
+			if (result.getBoolean(RESULT_IS_CURRENT_PERSON)) {
+				if (!handleRequestResult(result, REQUEST_GET_CURRENT_PERSON)) {
+					return;
+				}
+
+				SocialPerson socialPerson = new SocialPerson();
+				socialPerson.id = result.getString(RESULT_ID);
+				socialPerson.name = result.getString(RESULT_NAME);
+				socialPerson.avatarURL = result.getString(RESULT_AVATAR_URL);
+
+				((OnRequestSocialPersonCompleteListener) mLocalListeners.get(REQUEST_GET_CURRENT_PERSON)).onRequestSocialPersonSuccess(
+						getID(), socialPerson);
+
+				mLocalListeners.remove(REQUEST_GET_CURRENT_PERSON);
+			} else {
+				if (!handleRequestResult(result, REQUEST_GET_PERSON)) {
+					return;
+				}
+
+				SocialPerson socialPerson = new SocialPerson();
+				socialPerson.id = result.getString(RESULT_ID);
+				socialPerson.name = result.getString(RESULT_NAME);
+				socialPerson.avatarURL = result.getString(RESULT_AVATAR_URL);
+
+				((OnRequestSocialPersonCompleteListener) mLocalListeners.get(REQUEST_GET_PERSON)).onRequestSocialPersonSuccess(getID(),
+						socialPerson);
+
+				mLocalListeners.remove(REQUEST_GET_PERSON);
+			}
+
+		}
+	}
+
+	private class RequestUpdateStatusAsyncTask extends SocialNetworkAsyncTask {
+		public static final String PARAM_MESSAGE = "RequestUpdateStatusAsyncTask.PARAM_MESSAGE";
+		public static final String PARAM_PHOTO_PATH = "RequestUpdateStatusAsyncTask.PARAM_PHOTO_PATH";
+
+		private static final String RESULT_POST_PHOTO = "RequestUpdateStatusAsyncTask.RESULT_POST_PHOTO";
+
+		@Override
+		protected Bundle doInBackground(Bundle... params) {
+			Bundle args = params[0];
+			Bundle result = new Bundle();
+			String paramMessage = "";
+			String paramPhotoPath = null;
+
+			if (args.containsKey(PARAM_MESSAGE)) {
+				paramMessage = args.getString(PARAM_MESSAGE);
+			}
+
+			if (args.containsKey(PARAM_PHOTO_PATH)) {
+				paramPhotoPath = args.getString(PARAM_PHOTO_PATH);
+
+				result.putBoolean(RESULT_POST_PHOTO, true);
+			} else {
+				result.putBoolean(RESULT_POST_PHOTO, false);
+			}
+
+			try {
+				StatusUpdate status = new StatusUpdate(paramMessage);
+
+				if (paramPhotoPath != null) {
+					status.setMedia(new File(paramPhotoPath));
+				}
+
+				Log.d(TAG, "RequestUpdateStatusAsyncTask.mTwitter.updateStatus");
+				mTwitter.updateStatus(status);
+			} catch (TwitterException e) {
+				Log.e(TAG, "ERROR", e);
+				result.putString(RESULT_ERROR, e.getMessage());
+			}
+
+			return result;
+		}
+
+		@Override
+		protected void onPostExecute(Bundle result) {
+			String requestID = result.getBoolean(RESULT_POST_PHOTO) ? REQUEST_POST_PHOTO : REQUEST_POST_MESSAGE;
+
+			mRequests.remove(requestID);
+
+			String error = result.containsKey(RESULT_ERROR) ? result.getString(RESULT_ERROR) : null;
+
+			if (mLocalListeners.get(requestID) != null) {
+				if (error == null) {
+					((OnPostingCompleteListener) mLocalListeners.get(requestID)).onPostSuccessfully(getID());
+				} else {
+					mLocalListeners.get(requestID).onError(getID(), requestID, error, null);
+				}
+			}
+
+			mLocalListeners.remove(requestID);
+		}
+
+		@Override
+		protected void onCancelled() {
+			Log.d(TAG, "RequestUpdateStatusAsyncTask.onCancelled");
+		}
+	}
+
+	private class RequestCheckIsFriendAsyncTask extends SocialNetworkAsyncTask {
+		public static final String PARAM_USER_ID = "PARAM_USER_ID";
+
+		public static final String RESULT_IS_FRIEND = "RESULT_IS_FRIEND";
+		public static final String RESULT_REQUESTED_ID = "RESULT_REQUESTED_ID";
+
+		@Override
+		protected Bundle doInBackground(Bundle... params) {
+			Bundle args = params[0];
+			Bundle result = new Bundle();
+			Long userID = args.getLong(PARAM_USER_ID);
+
+			result.putLong(RESULT_REQUESTED_ID, userID);
+			try {
+				long currentUserID = mSharedPreferences.getLong(SAVE_STATE_KEY_USER_ID, -1);
+
+				Relationship relationship = mTwitter.showFriendship(currentUserID, userID);
+				result.putBoolean(RESULT_IS_FRIEND, relationship.isSourceFollowingTarget());
+			} catch (TwitterException e) {
+				Log.e(TAG, "ERROR", e);
+				result.putString(RESULT_ERROR, e.getMessage());
+			}
+
+			return result;
+		}
+
+		@Override
+		protected void onPostExecute(Bundle result) {
+			if (!handleRequestResult(result, REQUEST_CHECK_IS_FRIEND, result.getLong(RESULT_REQUESTED_ID))) {
+				return;
+			}
+
+			((OnCheckIsFriendCompleteListener) mLocalListeners.get(REQUEST_CHECK_IS_FRIEND)).onCheckIsFriendComplete(getID(),
+					"" + result.getLong(RESULT_REQUESTED_ID), result.getBoolean(RESULT_IS_FRIEND));
+		}
+	}
+
+	private class RequestAddFriendAsyncTask extends SocialNetworkAsyncTask {
+		public static final String PARAM_USER_ID = "PARAM_USER_ID";
+
+		public static final String RESULT_REQUESTED_ID = "RESULT_REQUESTED_ID";
+
+		@Override
+		protected Bundle doInBackground(Bundle... params) {
+			Bundle args = params[0];
+			Bundle result = new Bundle();
+			Long userID = args.getLong(PARAM_USER_ID);
+
+			result.putLong(RESULT_REQUESTED_ID, userID);
+			try {
+				mTwitter.createFriendship(userID);
+			} catch (TwitterException e) {
+				Log.e(TAG, "ERROR", e);
+				result.putString(RESULT_ERROR, e.getMessage());
+			}
+
+			return result;
+		}
+
+		@Override
+		protected void onPostExecute(Bundle result) {
+			if (!handleRequestResult(result, REQUEST_ADD_FRIEND, result.getLong(RESULT_REQUESTED_ID))) {
+				return;
+			}
+
+			((OnRequestAddFriendCompleteListener) mLocalListeners.get(REQUEST_ADD_FRIEND)).onRequestAddFriendComplete(getID(),
+					"" + result.getLong(RESULT_REQUESTED_ID));
+		}
+	}
+
+	private class RequestRemoveFriendAsyncTask extends SocialNetworkAsyncTask {
+		public static final String PARAM_USER_ID = "PARAM_USER_ID";
+
+		public static final String RESULT_REQUESTED_ID = "RESULT_REQUESTED_ID";
+
+		@Override
+		protected Bundle doInBackground(Bundle... params) {
+			Bundle args = params[0];
+			Bundle result = new Bundle();
+			Long userID = args.getLong(PARAM_USER_ID);
+
+			result.putLong(RESULT_REQUESTED_ID, userID);
+			try {
+				mTwitter.destroyFriendship(userID);
+			} catch (TwitterException e) {
+				Log.e(TAG, "ERROR", e);
+				result.putString(RESULT_ERROR, e.getMessage());
+			}
+
+			return result;
+		}
+
+		@Override
+		protected void onPostExecute(Bundle result) {
+			if (!handleRequestResult(result, REQUEST_REMOVE_FRIEND, result.getLong(RESULT_REQUESTED_ID))) {
+				return;
+			}
+
+			((OnRequestRemoveFriendCompleteListener) mLocalListeners.get(REQUEST_REMOVE_FRIEND)).onRequestRemoveFriendComplete(getID(), ""
+					+ result.getLong(RESULT_REQUESTED_ID));
+		}
+	}
+
+}
diff --git a/library/src/main/java/com/androidsocialnetworks/lib/listener/OnCheckIsFriendCompleteListener.java b/library/src/main/src/com/androidsocialnetworks/lib/listener/OnCheckIsFriendCompleteListener.java
similarity index 100%
rename from library/src/main/java/com/androidsocialnetworks/lib/listener/OnCheckIsFriendCompleteListener.java
rename to library/src/main/src/com/androidsocialnetworks/lib/listener/OnCheckIsFriendCompleteListener.java
diff --git a/library/src/main/java/com/androidsocialnetworks/lib/listener/OnLoginCompleteListener.java b/library/src/main/src/com/androidsocialnetworks/lib/listener/OnLoginCompleteListener.java
similarity index 100%
rename from library/src/main/java/com/androidsocialnetworks/lib/listener/OnLoginCompleteListener.java
rename to library/src/main/src/com/androidsocialnetworks/lib/listener/OnLoginCompleteListener.java
diff --git a/library/src/main/java/com/androidsocialnetworks/lib/listener/OnPostingCompleteListener.java b/library/src/main/src/com/androidsocialnetworks/lib/listener/OnPostingCompleteListener.java
similarity index 100%
rename from library/src/main/java/com/androidsocialnetworks/lib/listener/OnPostingCompleteListener.java
rename to library/src/main/src/com/androidsocialnetworks/lib/listener/OnPostingCompleteListener.java
diff --git a/library/src/main/java/com/androidsocialnetworks/lib/listener/OnRequestAddFriendCompleteListener.java b/library/src/main/src/com/androidsocialnetworks/lib/listener/OnRequestAddFriendCompleteListener.java
similarity index 100%
rename from library/src/main/java/com/androidsocialnetworks/lib/listener/OnRequestAddFriendCompleteListener.java
rename to library/src/main/src/com/androidsocialnetworks/lib/listener/OnRequestAddFriendCompleteListener.java
diff --git a/library/src/main/java/com/androidsocialnetworks/lib/listener/OnRequestRemoveFriendCompleteListener.java b/library/src/main/src/com/androidsocialnetworks/lib/listener/OnRequestRemoveFriendCompleteListener.java
similarity index 100%
rename from library/src/main/java/com/androidsocialnetworks/lib/listener/OnRequestRemoveFriendCompleteListener.java
rename to library/src/main/src/com/androidsocialnetworks/lib/listener/OnRequestRemoveFriendCompleteListener.java
diff --git a/library/src/main/java/com/androidsocialnetworks/lib/listener/OnRequestSocialPersonCompleteListener.java b/library/src/main/src/com/androidsocialnetworks/lib/listener/OnRequestSocialPersonCompleteListener.java
similarity index 100%
rename from library/src/main/java/com/androidsocialnetworks/lib/listener/OnRequestSocialPersonCompleteListener.java
rename to library/src/main/src/com/androidsocialnetworks/lib/listener/OnRequestSocialPersonCompleteListener.java
diff --git a/library/src/main/java/com/androidsocialnetworks/lib/listener/base/SocialNetworkListener.java b/library/src/main/src/com/androidsocialnetworks/lib/listener/base/SocialNetworkListener.java
similarity index 100%
rename from library/src/main/java/com/androidsocialnetworks/lib/listener/base/SocialNetworkListener.java
rename to library/src/main/src/com/androidsocialnetworks/lib/listener/base/SocialNetworkListener.java
diff --git a/third_party/facebook/.gitignore b/third_party/facebook/.gitignore
new file mode 100755
index 0000000..6b4a792
--- /dev/null
+++ b/third_party/facebook/.gitignore
@@ -0,0 +1,14 @@
+.gradle
+/local.properties
+/.idea/workspace.xml
+.DS
+.classpath
+.project
+/bin
+/gen
+.project.properties
+.idea
+build
+*.iml
+out
+repo
\ No newline at end of file
diff --git a/third_party/facebook/libs/android-support-v4.jar b/third_party/facebook/libs/android-support-v4.jar
index 9056828..187bdf4 100644
Binary files a/third_party/facebook/libs/android-support-v4.jar and b/third_party/facebook/libs/android-support-v4.jar differ
