diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index 32d1ecb3..940a2623 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -29,34 +29,44 @@
 
 import com.activeandroid.annotation.Column;
 import com.activeandroid.annotation.Table;
+import com.activeandroid.naming.ColumnNamingStrategy;
+import com.activeandroid.naming.FieldNamingStrategy;
 import com.activeandroid.util.ReflectionUtils;
 
 public final class TableInfo {
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PRIVATE MEMBERS
-	//////////////////////////////////////////////////////////////////////////////////////
+    //////////////////////////////////////////////////////////////////////////////////////
+    // PRIVATE MEMBERS
+    //////////////////////////////////////////////////////////////////////////////////////
 
-	private Class<? extends Model> mType;
-	private String mTableName;
-	private String mIdName = Table.DEFAULT_ID_NAME;
+    private Class<? extends Model> mType;
+    private String mTableName;
+    private String mIdName = Table.DEFAULT_ID_NAME;
 
-	private Map<Field, String> mColumnNames = new LinkedHashMap<Field, String>();
+    private Map<Field, String> mColumnNames = new LinkedHashMap<Field, String>();
 
-	//////////////////////////////////////////////////////////////////////////////////////
-	// CONSTRUCTORS
-	//////////////////////////////////////////////////////////////////////////////////////
+    //////////////////////////////////////////////////////////////////////////////////////
+    // CONSTRUCTORS
+    //////////////////////////////////////////////////////////////////////////////////////
 
-	public TableInfo(Class<? extends Model> type) {
-		mType = type;
+    public TableInfo(Class<? extends Model> type) {
+        mType = type;
 
-		final Table tableAnnotation = type.getAnnotation(Table.class);
+        final Table tableAnnotation = type.getAnnotation(Table.class);
 
+        ColumnNamingStrategy namingStrategy = new FieldNamingStrategy();
         if (tableAnnotation != null) {
-			mTableName = tableAnnotation.name();
-			mIdName = tableAnnotation.id();
-		}
-		else {
-			mTableName = type.getSimpleName();
+            mTableName = tableAnnotation.name();
+            mIdName = tableAnnotation.id();
+            try {
+                Class<? extends ColumnNamingStrategy> namingClass = tableAnnotation.columnNaming();
+                namingStrategy = namingClass.newInstance();
+            } catch (InstantiationException e) {
+                Log.e("Column naming strategy couldn't be instantiated", e.toString());
+            } catch (IllegalAccessException e) {
+                Log.e("Column naming strategy couldn't be instantiated", e.toString());
+            }
+        } else {
+            mTableName = type.getSimpleName();
         }
 
         // Manually add the id column since it is not declared like the other columns.
@@ -65,56 +75,53 @@ public TableInfo(Class<? extends Model> type) {
 
         List<Field> fields = new LinkedList<Field>(ReflectionUtils.getDeclaredColumnFields(type));
         Collections.reverse(fields);
-
         for (Field field : fields) {
             if (field.isAnnotationPresent(Column.class)) {
                 final Column columnAnnotation = field.getAnnotation(Column.class);
                 String columnName = columnAnnotation.name();
                 if (TextUtils.isEmpty(columnName)) {
-                    columnName = field.getName();
+                    columnName = namingStrategy.translateName(field);
                 }
 
                 mColumnNames.put(field, columnName);
             }
         }
 
-	}
+    }
 
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PUBLIC METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
+    //////////////////////////////////////////////////////////////////////////////////////
+    // PUBLIC METHODS
+    //////////////////////////////////////////////////////////////////////////////////////
 
-	public Class<? extends Model> getType() {
-		return mType;
-	}
+    public Class<? extends Model> getType() {
+        return mType;
+    }
 
-	public String getTableName() {
-		return mTableName;
-	}
+    public String getTableName() {
+        return mTableName;
+    }
 
-	public String getIdName() {
-		return mIdName;
-	}
+    public String getIdName() {
+        return mIdName;
+    }
 
-	public Collection<Field> getFields() {
-		return mColumnNames.keySet();
-	}
+    public Collection<Field> getFields() {
+        return mColumnNames.keySet();
+    }
 
-	public String getColumnName(Field field) {
-		return mColumnNames.get(field);
-	}
+    public String getColumnName(Field field) {
+        return mColumnNames.get(field);
+    }
 
 
     private Field getIdField(Class<?> type) {
         if (type.equals(Model.class)) {
             try {
                 return type.getDeclaredField("mId");
-            }
-            catch (NoSuchFieldException e) {
+            } catch (NoSuchFieldException e) {
                 Log.e("Impossible!", e.toString());
             }
-        }
-        else if (type.getSuperclass() != null) {
+        } else if (type.getSuperclass() != null) {
             return getIdField(type.getSuperclass());
         }
 
diff --git a/src/com/activeandroid/annotation/Table.java b/src/com/activeandroid/annotation/Table.java
index 541dfbe9..34dbe7f7 100644
--- a/src/com/activeandroid/annotation/Table.java
+++ b/src/com/activeandroid/annotation/Table.java
@@ -16,6 +16,9 @@
  * limitations under the License.
  */
 
+import com.activeandroid.naming.ColumnNamingStrategy;
+import com.activeandroid.naming.FieldNamingStrategy;
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -28,4 +31,5 @@
 	public static final String DEFAULT_ID_NAME = "Id";
 	public String name();
 	public String id() default DEFAULT_ID_NAME;
+    public Class <? extends ColumnNamingStrategy> columnNaming() default FieldNamingStrategy.class;
 }
diff --git a/src/com/activeandroid/naming/AndroidNamingStrategy.java b/src/com/activeandroid/naming/AndroidNamingStrategy.java
new file mode 100644
index 00000000..98c0f092
--- /dev/null
+++ b/src/com/activeandroid/naming/AndroidNamingStrategy.java
@@ -0,0 +1,18 @@
+package com.activeandroid.naming;
+
+import java.lang.reflect.Field;
+
+/**
+ * This strategy removes the m prefix in Android field names.
+ * @author dreipol
+ */
+public class AndroidNamingStrategy implements ColumnNamingStrategy {
+    @Override
+    public String translateName(Field f) {
+        String columnName = f.getName();
+        if (columnName.charAt(0) == 'm' && columnName.length() > 1 && Character.isUpperCase(columnName.codePointAt(1))) {
+            columnName = columnName.substring(1);
+        }
+        return columnName;
+    }
+}
diff --git a/src/com/activeandroid/naming/ColumnNamingStrategy.java b/src/com/activeandroid/naming/ColumnNamingStrategy.java
new file mode 100644
index 00000000..6bc50b1b
--- /dev/null
+++ b/src/com/activeandroid/naming/ColumnNamingStrategy.java
@@ -0,0 +1,20 @@
+package com.activeandroid.naming;
+
+import java.lang.reflect.Field;
+
+/**
+ *
+ * Provides a way for custom column naming in ActiveAndroid.
+ *
+ * @author dreipol
+ */
+public interface ColumnNamingStrategy {
+
+    /**
+     * Translates the field name into the column representation.
+     *
+     * @param f the field object
+     * @return the translated column name.
+     */
+    public String translateName(Field f);
+}
diff --git a/src/com/activeandroid/naming/FieldNamingStrategy.java b/src/com/activeandroid/naming/FieldNamingStrategy.java
new file mode 100644
index 00000000..6c63c301
--- /dev/null
+++ b/src/com/activeandroid/naming/FieldNamingStrategy.java
@@ -0,0 +1,13 @@
+package com.activeandroid.naming;
+
+import java.lang.reflect.Field;
+
+/**
+ * Created by melbic on 21/08/14.
+ */
+public class FieldNamingStrategy implements ColumnNamingStrategy {
+    @Override
+    public String translateName(Field f) {
+        return f.getName();
+    }
+}
