diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 411ed7bd..c0962b9c 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -19,6 +19,7 @@
 import android.content.ContentValues;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
+import android.provider.BaseColumns;
 
 import com.activeandroid.annotation.Column;
 import com.activeandroid.content.ContentProvider;
@@ -37,7 +38,7 @@
 	// PRIVATE MEMBERS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	@Column(name = "Id")
+	@Column(name = BaseColumns._ID)
 	private Long mId = null;
 
 	private TableInfo mTableInfo;
@@ -59,7 +60,7 @@ public final Long getId() {
 	}
 
 	public final void delete() {
-		Cache.openDatabase().delete(mTableInfo.getTableName(), "Id=?", new String[] { getId().toString() });
+		Cache.openDatabase().delete(mTableInfo.getTableName(), BaseColumns._ID + "=?", new String[] { getId().toString() });
 		Cache.removeEntity(this);
 
 		Cache.getContext().getContentResolver()
@@ -150,9 +151,10 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 			mId = db.insert(mTableInfo.getTableName(), null, values);
 		}
 		else {
-			db.update(mTableInfo.getTableName(), values, "Id=" + mId, null);
+			db.update(mTableInfo.getTableName(), values, BaseColumns._ID + "=" + mId, null);
 		}
 
+
 		Cache.getContext().getContentResolver()
 				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mId), null);
 	}
@@ -160,11 +162,11 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 	// Convenience methods
 
 	public static void delete(Class<? extends Model> type, long id) {
-		new Delete().from(type).where("Id=?", id).execute();
+		new Delete().from(type).where(BaseColumns._ID + "=?", id).execute();
 	}
 
 	public static <T extends Model> T load(Class<T> type, long id) {
-		return new Select().from(type).where("Id=?", id).executeSingle();
+		return new Select().from(type).where(BaseColumns._ID + "=?", id).executeSingle();
 	}
 
 	// Model population
@@ -231,7 +233,7 @@ else if (ReflectionUtils.isModel(fieldType)) {
 
 					Model entity = Cache.getEntity(entityType, entityId);
 					if (entity == null) {
-						entity = new Select().from(entityType).where("Id=?", entityId).executeSingle();
+						entity = new Select().from(entityType).where(BaseColumns._ID + "=?", entityId).executeSingle();
 					}
 
 					value = entity;
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index b9ba32b9..3b041928 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -18,6 +18,7 @@
 
 import android.database.Cursor;
 import android.os.Build;
+import android.provider.BaseColumns;
 import android.text.TextUtils;
 
 import com.activeandroid.Cache;
@@ -158,7 +159,7 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 				definition.append(")");
 			}
 
-			if (name.equals("Id")) {
+			if (name.equals(BaseColumns._ID)) {
 				definition.append(" PRIMARY KEY AUTOINCREMENT");
 			}
 
@@ -175,7 +176,7 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 			if (FOREIGN_KEYS_SUPPORTED && ReflectionUtils.isModel(type)) {
 				definition.append(" REFERENCES ");
 				definition.append(Cache.getTableInfo((Class<? extends Model>) type).getTableName());
-				definition.append("(Id)");
+				definition.append("(" + BaseColumns._ID + ")");
 				definition.append(" ON DELETE ");
 				definition.append(column.onDelete().toString().replace("_", " "));
 				definition.append(" ON UPDATE ");
@@ -198,7 +199,7 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 
 			if (cursor.moveToFirst()) {
 				do {
-					Model entity = Cache.getEntity(type, cursor.getLong(cursor.getColumnIndex("Id")));
+					Model entity = Cache.getEntity(type, cursor.getLong(cursor.getColumnIndex(BaseColumns._ID)));
 					if (entity == null) {
 						entity = (T) entityConstructor.newInstance();
 					}
diff --git a/tests/src/com/activeandroid/test/query/FromTest.java b/tests/src/com/activeandroid/test/query/FromTest.java
index 7340e091..8986d422 100644
--- a/tests/src/com/activeandroid/test/query/FromTest.java
+++ b/tests/src/com/activeandroid/test/query/FromTest.java
@@ -21,86 +21,87 @@
 import com.activeandroid.query.From;
 import com.activeandroid.query.Select;
 import com.activeandroid.test.MockModel;
+import android.provider.BaseColumns;
 
 public class FromTest extends SqlableTestCase {
 	private static final String SELECT_PREFIX = "SELECT ALL * FROM MockModel ";
-	
+
 	public void testLimit() {
 		assertSqlEquals(SELECT_PREFIX + "LIMIT 10",
 				from().limit(10));
 		assertSqlEquals(SELECT_PREFIX + "LIMIT 10",
 				from().limit("10"));
 	}
-	
+
 	public void testOffset() {
 		assertSqlEquals(SELECT_PREFIX + "OFFSET 10",
 				from().offset(10));
 		assertSqlEquals(SELECT_PREFIX + "OFFSET 10",
 				from().offset("10"));
 	}
-	
+
 	public void testLimitOffset() {
 		assertSqlEquals(SELECT_PREFIX + "LIMIT 10 OFFSET 20",
 				from().offset(20).limit(10));
 		assertSqlEquals(SELECT_PREFIX + "LIMIT 10 OFFSET 20",
 				from().limit(10).offset(20));
 	}
-	
+
 	public void testAs() {
 		assertSqlEquals(SELECT_PREFIX + "AS a",
 				from().as("a"));
 	}
-	
+
 	public void testOrderBy() {
-		assertSqlEquals(SELECT_PREFIX + "ORDER BY Id DESC",
-				from().orderBy("Id DESC"));
+		assertSqlEquals(SELECT_PREFIX + "ORDER BY " + BaseColumns._ID + " DESC",
+				from().orderBy( BaseColumns._ID + " DESC"));
 	}
-	
+
 	public void testWhereNoArguments() {
-		assertSqlEquals(SELECT_PREFIX + "WHERE Id = 5",
-				from().where("Id = 5"));
-		
-		assertSqlEquals(SELECT_PREFIX + "WHERE Id = 5",
-				from().where("Id = 1").where("Id = 2").where("Id = 5"));
+		assertSqlEquals(SELECT_PREFIX + "WHERE " + BaseColumns._ID + " = 5",
+				from().where( BaseColumns._ID + " = 5"));
+
+		assertSqlEquals(SELECT_PREFIX + "WHERE " + BaseColumns._ID + " = 5",
+				from().where( BaseColumns._ID + " = 1").where( BaseColumns._ID + " = 2").where( BaseColumns._ID + " = 5"));
 	}
-	
+
 	public void testWhereWithArguments() {
-		From query = from().where("Id = ?", 5);
+		From query = from().where( BaseColumns._ID + " = ?", 5);
 		assertArrayEquals(query.getArguments(), "5");
-		assertSqlEquals(SELECT_PREFIX + "WHERE Id = ?",
+		assertSqlEquals(SELECT_PREFIX + "WHERE " + BaseColumns._ID + " = ?",
 				query);
-		
-		query = from().where("Id > ? AND Id < ?", 5, 10);
+
+		query = from().where( BaseColumns._ID + " > ? AND " + BaseColumns._ID + " < ?", 5, 10);
 		assertArrayEquals(query.getArguments(), "5", "10");
-		assertSqlEquals(SELECT_PREFIX + "WHERE Id > ? AND Id < ?",
+		assertSqlEquals(SELECT_PREFIX + "WHERE " + BaseColumns._ID + " > ? AND " + BaseColumns._ID + " < ?",
 				query);
-		
+
 		query = from()
-				.where("Id != ?", 10)
-				.where("Id IN (?, ?, ?)", 5, 10, 15)
-				.where("Id > ? AND Id < ?", 5, 10);
+				.where( BaseColumns._ID + " != ?", 10)
+				.where( BaseColumns._ID + " IN (?, ?, ?)", 5, 10, 15)
+				.where( BaseColumns._ID + " > ? AND " + BaseColumns._ID + " < ?", 5, 10);
 		assertArrayEquals(query.getArguments(), "5", "10");
-		assertSqlEquals(SELECT_PREFIX + "WHERE Id > ? AND Id < ?",
+		assertSqlEquals(SELECT_PREFIX + "WHERE " + BaseColumns._ID + " > ? AND " + BaseColumns._ID + " < ?",
 				query);
 	}
-	
+
 	public void testSingleJoin() {
-		assertSqlEquals(SELECT_PREFIX + "JOIN JoinModel ON MockModel.Id = JoinModel.Id",
-				from().join(JoinModel.class).on("MockModel.Id = JoinModel.Id"));
-		
-		assertSqlEquals(SELECT_PREFIX + "AS a JOIN JoinModel AS b ON a.Id = b.Id",
-				from().as("a").join(JoinModel.class).as("b").on("a.Id = b.Id"));
-		
-		assertSqlEquals(SELECT_PREFIX + "JOIN JoinModel USING (Id, other)",
-				from().join(JoinModel.class).using("Id", "other"));
+		assertSqlEquals(SELECT_PREFIX + "JOIN JoinModel ON MockModel." +  BaseColumns._ID + " = JoinModel." +  BaseColumns._ID,
+				from().join(JoinModel.class).on("MockModel." +  BaseColumns._ID + " = JoinModel." +  BaseColumns._ID));
+
+		assertSqlEquals(SELECT_PREFIX + "AS a JOIN JoinModel AS b ON a." +  BaseColumns._ID + " = b." +  BaseColumns._ID,
+				from().as("a").join(JoinModel.class).as("b").on("a." +  BaseColumns._ID + " = b." +  BaseColumns._ID));
+
+		assertSqlEquals(SELECT_PREFIX + "JOIN JoinModel USING (" +  BaseColumns._ID + ", other)",
+				from().join(JoinModel.class).using( BaseColumns._ID, "other"));
 	}
-	
+
 	public void testJoins() {
-		assertSqlEquals(SELECT_PREFIX + "JOIN JoinModel ON Id JOIN JoinModel2 ON Id",
-				from().join(JoinModel.class).on("Id")
-				.join(JoinModel2.class).on("Id"));
+		assertSqlEquals(SELECT_PREFIX + "JOIN JoinModel ON " + BaseColumns._ID + " JOIN JoinModel2 ON " +  BaseColumns._ID,
+				from().join(JoinModel.class).on( BaseColumns._ID)
+				.join(JoinModel2.class).on( BaseColumns._ID));
 	}
-	
+
 	public void testJoinTypes() {
 		assertSqlEquals(SELECT_PREFIX + "INNER JOIN JoinModel ON",
 				from().innerJoin(JoinModel.class).on(""));
@@ -109,57 +110,57 @@ public void testJoinTypes() {
 		assertSqlEquals(SELECT_PREFIX + "CROSS JOIN JoinModel ON",
 				from().crossJoin(JoinModel.class).on(""));
 	}
-	
+
 	public void testGroupByHaving() {
-		assertSqlEquals(SELECT_PREFIX + "GROUP BY Id",
-				from().groupBy("Id"));
-		assertSqlEquals(SELECT_PREFIX + "GROUP BY Id HAVING Id = 1",
-				from().groupBy("Id").having("Id = 1"));
-		assertSqlEquals(SELECT_PREFIX + "GROUP BY Id HAVING Id = 1",
-				from().having("Id = 1").groupBy("Id"));
+		assertSqlEquals(SELECT_PREFIX + "GROUP BY " +  BaseColumns._ID,
+				from().groupBy( BaseColumns._ID));
+		assertSqlEquals(SELECT_PREFIX + "GROUP BY " + BaseColumns._ID + " HAVING " + BaseColumns._ID + " = 1",
+				from().groupBy( BaseColumns._ID).having( BaseColumns._ID + " = 1"));
+		assertSqlEquals(SELECT_PREFIX + "GROUP BY " + BaseColumns._ID + " HAVING " + BaseColumns._ID + " = 1",
+				from().having( BaseColumns._ID + " = 1").groupBy( BaseColumns._ID));
 	}
-	
+
 	public void testAll() {
-		final String expectedSql = SELECT_PREFIX + "AS a JOIN JoinModel USING (Id) WHERE Id > 5 GROUP BY Id HAVING Id < 10 LIMIT 5 OFFSET 10";
-		
+		final String expectedSql = SELECT_PREFIX + "AS a JOIN JoinModel USING (" +  BaseColumns._ID + ") WHERE " + BaseColumns._ID + " > 5 GROUP BY " + BaseColumns._ID + " HAVING " + BaseColumns._ID + " < 10 LIMIT 5 OFFSET 10";
+
 		// Try a few different orderings, shouldn't change the output
 		assertSqlEquals(expectedSql,
 				from()
 					.as("a")
-					.where("Id > 5")
-					.join(JoinModel.class).using("Id")
-					.groupBy("Id")
-					.having("Id < 10")
+					.where( BaseColumns._ID + " > 5")
+					.join(JoinModel.class).using( BaseColumns._ID)
+					.groupBy( BaseColumns._ID)
+					.having( BaseColumns._ID + " < 10")
 					.limit(5)
 					.offset(10));
 		assertSqlEquals(expectedSql,
 				from()
 					.offset(10)
-					.having("Id < 10")
-					.join(JoinModel.class).using("Id")
+					.having( BaseColumns._ID + " < 10")
+					.join(JoinModel.class).using( BaseColumns._ID)
 					.limit(5)
 					.as("a")
-					.where("Id > 5")
-					.groupBy("Id"));
+					.where( BaseColumns._ID + " > 5")
+					.groupBy( BaseColumns._ID));
 		assertSqlEquals(expectedSql,
 				from()
-					.join(JoinModel.class).using("Id")
+					.join(JoinModel.class).using( BaseColumns._ID)
 					.offset(10)
-					.having("Id < 10")
-					.where("Id > 5")
-					.groupBy("Id")
+					.having( BaseColumns._ID + " < 10")
+					.where( BaseColumns._ID + " > 5")
+					.groupBy( BaseColumns._ID)
 					.limit(5)
 					.as("a"));
 	}
-	
+
 	private From from() {
 		return new Select().all().from(MockModel.class);
 	}
-	
+
 	@Table(name = "JoinModel")
 	private static class JoinModel extends Model {
 	}
-	
+
 	@Table(name = "JoinModel2")
 	private static class JoinModel2 extends Model {
 	}
diff --git a/tests/src/com/activeandroid/test/query/UpdateTest.java b/tests/src/com/activeandroid/test/query/UpdateTest.java
index 814d34f7..b1d96c33 100644
--- a/tests/src/com/activeandroid/test/query/UpdateTest.java
+++ b/tests/src/com/activeandroid/test/query/UpdateTest.java
@@ -19,43 +19,44 @@
 import com.activeandroid.query.Set;
 import com.activeandroid.query.Update;
 import com.activeandroid.test.MockModel;
+import android.provider.BaseColumns;
 
 public class UpdateTest extends SqlableTestCase {
 	private static final String UPDATE_PREFIX = "UPDATE MockModel ";
-	
+
 	public void testUpdate() {
 		assertSqlEquals(UPDATE_PREFIX, update());
 	}
-	
+
 	public void testUpdateSet() {
-		assertSqlEquals(UPDATE_PREFIX + "SET Id = 5 ",
-				update().set("Id = 5"));
+		assertSqlEquals(UPDATE_PREFIX + "SET " +  BaseColumns._ID + " = 5 ",
+				update().set(BaseColumns._ID + " = 5"));
 	}
-	
+
 	public void testUpdateWhereNoArguments() {
-		assertSqlEquals(UPDATE_PREFIX + "SET Id = 5 WHERE Id = 1 ",
+		assertSqlEquals(UPDATE_PREFIX + "SET " +  BaseColumns._ID + " = 5 WHERE " +  BaseColumns._ID + " = 1 ",
 				update()
-					.set("Id = 5")
-					.where("Id = 1"));
+					.set(BaseColumns._ID + " = 5")
+					.where(BaseColumns._ID + " = 1"));
 	}
-	
+
 	public void testUpdateWhereWithArguments() {
 		Set set = update()
-				.set("Id = 5")
-				.where("Id = ?", 1);
+				.set(BaseColumns._ID + " = 5")
+				.where(BaseColumns._ID + " = ?", 1);
 		assertArrayEquals(set.getArguments(), "1");
-		assertSqlEquals(UPDATE_PREFIX + "SET Id = 5 WHERE Id = ? ",
+		assertSqlEquals(UPDATE_PREFIX + "SET " +  BaseColumns._ID + " = 5 WHERE " +  BaseColumns._ID + " = ? ",
 				set);
-		
+
 		set = update()
-				.set("Id = 5")
-				.where("Id = ?", 1)
-				.where("Id IN (?, ?, ?)", 5, 4, 3);
+				.set(BaseColumns._ID + " = 5")
+				.where(BaseColumns._ID + " = ?", 1)
+				.where(BaseColumns._ID + " IN (?, ?, ?)", 5, 4, 3);
 		assertArrayEquals(set.getArguments(), "5", "4", "3");
-		assertSqlEquals(UPDATE_PREFIX + "SET Id = 5 WHERE Id IN (?, ?, ?) ",
+		assertSqlEquals(UPDATE_PREFIX + "SET " +  BaseColumns._ID + " = 5 WHERE " +  BaseColumns._ID + " IN (?, ?, ?) ",
 				set);
 	}
-	
+
 	private Update update() {
 		return new Update(MockModel.class);
 	}
