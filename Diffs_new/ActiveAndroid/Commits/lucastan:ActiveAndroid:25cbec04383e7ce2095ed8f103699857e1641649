diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 3d3dd0c3..9fe01919 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -26,6 +26,7 @@
 import com.activeandroid.serializer.TypeSerializer;
 import com.activeandroid.util.Log;
 import com.activeandroid.util.ReflectionUtils;
+import com.activeandroid.util.SQLiteUtils;
 
 import java.lang.reflect.Field;
 import java.util.ArrayList;
@@ -223,7 +224,7 @@ public static void delete(Class<? extends Model> type, long id) {
 
         return null;
     }
-	
+
 	// Model population
 
 	public final void loadFromCursor(Cursor cursor) {
@@ -231,12 +232,12 @@ public final void loadFromCursor(Cursor cursor) {
          * Obtain the columns ordered to fix issue #106 (https://github.com/pardom/ActiveAndroid/issues/106)
          * when the cursor have multiple columns with same name obtained from join tables.
          */
-        List<String> columnsOrdered = new ArrayList<String>(Arrays.asList(cursor.getColumnNames()));
+        String[] columnsOrdered = cursor.getColumnNames();
 		for (Field field : mTableInfo.getFields()) {
 			final String fieldName = mTableInfo.getColumnName(field);
 			Class<?> fieldType = field.getType();
-			final int columnIndex = columnsOrdered.indexOf(fieldName);
-
+			final int columnIndex = SQLiteUtils.indexOfIgnoreCase(columnsOrdered, fieldName);
+			 
 			if (columnIndex < 0) {
 				continue;
 			}
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index 6cd8de6f..09ebfd8d 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -334,9 +334,9 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
                  * Obtain the columns ordered to fix issue #106 (https://github.com/pardom/ActiveAndroid/issues/106)
                  * when the cursor have multiple columns with same name obtained from join tables.
                  */
-                List<String> columnsOrdered = new ArrayList<String>(Arrays.asList(cursor.getColumnNames()));
+                String[] columnsOrdered = cursor.getColumnNames();
 				do {
-					Model entity = Cache.getEntity(type, cursor.getLong(columnsOrdered.indexOf(idName)));
+					Model entity = Cache.getEntity(type, cursor.getLong(indexOfIgnoreCase(columnsOrdered, idName)));
 					if (entity == null) {
 						entity = (T) entityConstructor.newInstance();
 					}
