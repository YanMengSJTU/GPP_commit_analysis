diff --git a/src/com/activeandroid/exception/DBManagerNotOnMainException.java b/src/com/activeandroid/exception/DBManagerNotOnMainException.java
new file mode 100644
index 00000000..388e0c18
--- /dev/null
+++ b/src/com/activeandroid/exception/DBManagerNotOnMainException.java
@@ -0,0 +1,13 @@
+package com.activeandroid.exception;
+
+/**
+ * Created by andrewgrosner
+ * Date: 1/10/14
+ * Contributors:
+ * Description:
+ */
+public class DBManagerNotOnMainException extends RuntimeException {
+    public DBManagerNotOnMainException(String s) {
+        super(s);
+    }
+}
diff --git a/src/com/activeandroid/manager/DBManager.java b/src/com/activeandroid/manager/DBManager.java
index b9d56dd6..6c75c898 100644
--- a/src/com/activeandroid/manager/DBManager.java
+++ b/src/com/activeandroid/manager/DBManager.java
@@ -6,6 +6,7 @@
 import com.activeandroid.ActiveAndroid;
 import com.activeandroid.Cache;
 import com.activeandroid.Model;
+import com.activeandroid.exception.DBManagerNotOnMainException;
 import com.activeandroid.query.Select;
 import com.activeandroid.interfaces.CollectionReceiver;
 import com.activeandroid.interfaces.ObjectReceiver;
@@ -48,7 +49,6 @@ public static DBManager getSharedInstance(){
         throw new IllegalStateException("Cannot call the base implementation of this method");
     }
 
-
     /**
      * Adds a json object to this class, however its advised you ensure that the jsonobject being passed is what you want, since there's no type checking
      * @param object
diff --git a/src/com/activeandroid/manager/SingleDBManager.java b/src/com/activeandroid/manager/SingleDBManager.java
index 7a8c8fcb..a87603cc 100644
--- a/src/com/activeandroid/manager/SingleDBManager.java
+++ b/src/com/activeandroid/manager/SingleDBManager.java
@@ -6,6 +6,7 @@
 import com.activeandroid.ActiveAndroid;
 import com.activeandroid.Cache;
 import com.activeandroid.Model;
+import com.activeandroid.exception.DBManagerNotOnMainException;
 import com.activeandroid.interfaces.ObjectRequester;
 import com.activeandroid.query.Select;
 import com.activeandroid.interfaces.CollectionReceiver;
@@ -31,13 +32,28 @@
 
     private static SingleDBManager manager;
 
+    /**
+     * Returns the application's only needed DBManager.
+     * Note: this manager must be created on the main thread, otherwise a {@link com.activeandroid.exception.DBManagerNotOnMainException} will be thrown
+     * @return
+     */
     public static SingleDBManager getSharedInstance(){
         if(manager==null){
            manager = new SingleDBManager();
+           manager.checkThread();
         }
         return manager;
     }
 
+    /**
+     * Ensure manager was created in the main thread, otherwise handler will not work
+     */
+    protected void checkThread(){
+        if(!Thread.currentThread().getName().equals("main")){
+            throw new DBManagerNotOnMainException("DBManager needs to be instantiated on the main thread so Handler is on UI thread. Was on : " + Thread.currentThread().getName());
+        }
+    }
+
     /**
      * Runs all of the UI threaded requests
      */
@@ -291,7 +307,7 @@ public void run() {
      * Returns the count of rows from this DB manager's DB
      * @return
      */
-    public <OBJECT_CLASS extends Model> long getCount(final Class<OBJECT_CLASS> obClazz){
+    public long getCount(final Class<? extends Model> obClazz){
         return DatabaseUtils.queryNumEntries(Cache.openDatabase(), Cache.getTableName(obClazz));
     }
 
@@ -351,7 +367,7 @@ public void run() {
      * @param favoriteObject
      * @param <OBJECT_CLASS>
      */
-    public <OBJECT_CLASS extends Model> void delete(OBJECT_CLASS favoriteObject) {
+    public void delete(Model favoriteObject) {
         favoriteObject.delete();
     }
 }
