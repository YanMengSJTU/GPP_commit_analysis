diff --git a/src/main/java/com/activeandroid/ActiveAndroid.java b/src/main/java/com/activeandroid/ActiveAndroid.java
index 251a1be4..77c901aa 100644
--- a/src/main/java/com/activeandroid/ActiveAndroid.java
+++ b/src/main/java/com/activeandroid/ActiveAndroid.java
@@ -26,27 +26,43 @@
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	public static void initialize(Context context) {
+	public static void initialize(Context context, DatabaseHelperListener databaseHelperListener) {
         //add app package name for searching by default
         ModelPathManager.addPath(context.getPackageName());
 
-		initialize(new Configuration.Builder(context).create());
+		initialize(new Configuration.Builder(context).create(), databaseHelperListener);
     }
 
-	public static void initialize(Configuration configuration) {
-		initialize(configuration, false);
+    public static void initialize(Context context) {
+        initialize(context, null);
+    }
+
+	public static void initialize(Configuration configuration, DatabaseHelperListener databaseHelperListener) {
+		initialize(configuration, false, databaseHelperListener);
 	}
 
-	public static void initialize(Context context, boolean loggingEnabled) {
-		initialize(new Configuration.Builder(context).create(), loggingEnabled);
+    public static void initialize(Configuration configuration) {
+        initialize(configuration, null);
+    }
+
+	public static void initialize(Context context, boolean loggingEnabled, DatabaseHelperListener databaseHelperListener) {
+		initialize(new Configuration.Builder(context).create(), loggingEnabled,databaseHelperListener);
 	}
 
-	public static void initialize(Configuration configuration, boolean loggingEnabled) {
+    public static void initialize(Context context, boolean loggingEnabled) {
+        initialize(context, loggingEnabled,null);
+    }
+
+	public static void initialize(Configuration configuration, boolean loggingEnabled, DatabaseHelperListener databaseHelperListener) {
 		// Set logging enabled first
 		setLoggingEnabled(loggingEnabled);
-		Cache.initialize(configuration);
+		Cache.initialize(configuration, databaseHelperListener);
 	}
 
+    public static void initialize(Configuration configuration, boolean loggingEnabled) {
+        initialize(configuration, loggingEnabled,null);
+    }
+
 	public static void clearCache() {
 		Cache.clear();
 	}
@@ -55,6 +71,10 @@ public static void dispose() {
 		Cache.dispose();
 	}
 
+    public static void reset(Context context){
+        Cache.reset(context);
+    }
+
 	public static void setLoggingEnabled(boolean enabled) {
 		AALog.setEnabled(enabled);
 	}
diff --git a/src/main/java/com/activeandroid/Cache.java b/src/main/java/com/activeandroid/Cache.java
index c0c294a7..f077885c 100644
--- a/src/main/java/com/activeandroid/Cache.java
+++ b/src/main/java/com/activeandroid/Cache.java
@@ -41,10 +41,14 @@
 	private static ModelInfo sIModelInfo;
 	private static DatabaseHelper sDatabaseHelper;
 
+    private static Configuration sDatabaseConfiguration;
+
 	private static LruCache<String, IModel> sEntities;
 
 	private static boolean sIsInitialized = false;
 
+    private static boolean isUpgrading = false;
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -56,15 +60,17 @@ private Cache() {
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	public static synchronized void initialize(Configuration configuration) {
+	public static synchronized void initialize(Configuration configuration, DatabaseHelperListener databaseHelperListener) {
 		if (sIsInitialized) {
 			AALog.v("ActiveAndroid already initialized.");
 			return;
 		}
 
+        sDatabaseConfiguration = configuration;
 		sContext = configuration.getContext();
 		sIModelInfo = new ModelInfo(configuration);
 		sDatabaseHelper = new DatabaseHelper(configuration);
+        sDatabaseHelper.setListener(databaseHelperListener);
 
 		// TODO: It would be nice to override sizeOf here and calculate the memory
 		// actually used, however at this point it seems like the reflection
@@ -151,4 +157,14 @@ public static synchronized TypeSerializer getParserForType(Class<?> type) {
 	public static synchronized String getTableName(Class<? extends IModel> type) {
 		return sIModelInfo.getTableInfo(type).getTableName();
 	}
+
+    public static void reset(Context context) {
+        if(!isUpgrading) {
+            sIsInitialized = false;
+            isUpgrading = true;
+            context.deleteDatabase(sDatabaseConfiguration.getDatabaseName());
+            initialize(sDatabaseConfiguration, sDatabaseHelper.mListener);
+            isUpgrading = false;
+        }
+    }
 }
diff --git a/src/main/java/com/activeandroid/DatabaseHelper.java b/src/main/java/com/activeandroid/DatabaseHelper.java
index af1102c4..45fbad15 100644
--- a/src/main/java/com/activeandroid/DatabaseHelper.java
+++ b/src/main/java/com/activeandroid/DatabaseHelper.java
@@ -42,6 +42,8 @@
 
 	public final static String MIGRATION_PATH = "migrations";
 
+    DatabaseHelperListener mListener;
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -51,17 +53,27 @@ public DatabaseHelper(Configuration configuration) {
 		copyAttachedDatabase(configuration.getContext(), configuration.getDatabaseName());
 	}
 
+    public void setListener(DatabaseHelperListener listener){
+        mListener = listener;
+    }
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// OVERRIDEN METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
 	@Override
 	public void onOpen(SQLiteDatabase db) {
+        if(mListener!=null){
+            mListener.onOpen(db);
+        }
 		executePragmas(db);
 	};
 
 	@Override
 	public void onCreate(SQLiteDatabase db) {
+        if(mListener!=null){
+            mListener.onCreate(db);
+        }
 		executePragmas(db);
 		executeCreate(db);
 		executeMigrations(db, -1, db.getVersion());
@@ -69,6 +81,9 @@ public void onCreate(SQLiteDatabase db) {
 
 	@Override
 	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+        if(mListener!=null){
+            mListener.onUpgrade(db, oldVersion, newVersion);
+        }
 		executePragmas(db);
 		executeCreate(db);
 		executeMigrations(db, oldVersion, newVersion);
diff --git a/src/main/java/com/activeandroid/DatabaseHelperListener.java b/src/main/java/com/activeandroid/DatabaseHelperListener.java
new file mode 100644
index 00000000..41042633
--- /dev/null
+++ b/src/main/java/com/activeandroid/DatabaseHelperListener.java
@@ -0,0 +1,12 @@
+package com.activeandroid;
+
+import android.database.sqlite.SQLiteDatabase;
+
+public interface DatabaseHelperListener {
+
+    public void onOpen(SQLiteDatabase database);
+
+    public void onCreate(SQLiteDatabase db);
+
+    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion);
+}
diff --git a/src/main/java/com/activeandroid/runtime/DBBatchSaveQueue.java b/src/main/java/com/activeandroid/runtime/DBBatchSaveQueue.java
index 1fb2d5ba..d88326d7 100644
--- a/src/main/java/com/activeandroid/runtime/DBBatchSaveQueue.java
+++ b/src/main/java/com/activeandroid/runtime/DBBatchSaveQueue.java
@@ -25,6 +25,11 @@
      */
     private static final int sMODEL_SAVE_SIZE = 50;
 
+    /**
+     * Tells how many items to save at a time. This can be set using {@link #setModelSaveSize(int)}
+     */
+    private int mModelSaveSize = sMODEL_SAVE_SIZE;
+
     private boolean mQuit = false;
 
     public static DBBatchSaveQueue getSharedSaveQueue(){
@@ -46,6 +51,16 @@ public DBBatchSaveQueue(){
         mModels = new ArrayList<IModel>();
     }
 
+    /**
+     * Sets how many models to save at a time in this queue.
+     * Increase it for larger batches, but slower recovery time.
+     * Smaller the batch, the more time it takes to save overall.
+     * @param mModelSaveSize
+     */
+    public void setModelSaveSize(int mModelSaveSize) {
+        this.mModelSaveSize = mModelSaveSize;
+    }
+
     @Override
     public void run() {
         super.run();
@@ -97,7 +112,7 @@ public void add(final IModel IModel){
         synchronized (mModels){
             mModels.add(IModel);
 
-            if(mModels.size()>sMODEL_SAVE_SIZE){
+            if(mModels.size()>mModelSaveSize){
                 interrupt();
             }
         }
@@ -107,7 +122,7 @@ public void add(final IModel IModel){
         synchronized (mModels){
             mModels.addAll(list);
 
-            if(mModels.size()>sMODEL_SAVE_SIZE){
+            if(mModels.size()>mModelSaveSize){
                 interrupt();
             }
         }
diff --git a/src/main/java/com/activeandroid/serializer/CalendarSerializer.java b/src/main/java/com/activeandroid/serializer/CalendarSerializer.java
index 55509bd0..c96207ed 100644
--- a/src/main/java/com/activeandroid/serializer/CalendarSerializer.java
+++ b/src/main/java/com/activeandroid/serializer/CalendarSerializer.java
@@ -18,7 +18,7 @@
 
 import java.util.Calendar;
 
-public final class CalendarSerializer extends TypeSerializer {
+public final class CalendarSerializer extends TypeSerializer<Calendar> {
 	public Class<?> getDeserializedType() {
 		return Calendar.class;
 	}
@@ -27,10 +27,12 @@
 		return long.class;
 	}
 
-	public Long serialize(Object data) {
-		return ((Calendar) data).getTimeInMillis();
+    @Override
+	public Long serialize(Calendar data) {
+		return data.getTimeInMillis();
 	}
 
+    @Override
 	public Calendar deserialize(Object data) {
 		Calendar calendar = Calendar.getInstance();
 		calendar.setTimeInMillis((Long) data);
diff --git a/src/main/java/com/activeandroid/serializer/SqlDateSerializer.java b/src/main/java/com/activeandroid/serializer/SqlDateSerializer.java
index 530d1249..77bad6f7 100644
--- a/src/main/java/com/activeandroid/serializer/SqlDateSerializer.java
+++ b/src/main/java/com/activeandroid/serializer/SqlDateSerializer.java
@@ -18,7 +18,7 @@
 
 import java.sql.Date;
 
-public final class SqlDateSerializer extends TypeSerializer {
+public final class SqlDateSerializer extends TypeSerializer<Date> {
 	public Class<?> getDeserializedType() {
 		return Date.class;
 	}
@@ -27,14 +27,16 @@
 		return long.class;
 	}
 
-	public Long serialize(Object data) {
+    @Override
+	public Long serialize(Date data) {
 		if (data == null) {
 			return null;
 		}
 
-		return ((Date) data).getTime();
+		return data.getTime();
 	}
 
+    @Override
 	public Date deserialize(Object data) {
 		if (data == null) {
 			return null;
diff --git a/src/main/java/com/activeandroid/serializer/UtilDateSerializer.java b/src/main/java/com/activeandroid/serializer/UtilDateSerializer.java
index a82c7ef1..6608bf67 100644
--- a/src/main/java/com/activeandroid/serializer/UtilDateSerializer.java
+++ b/src/main/java/com/activeandroid/serializer/UtilDateSerializer.java
@@ -18,23 +18,25 @@
 
 import java.util.Date;
 
-public final class UtilDateSerializer extends TypeSerializer {
+public final class UtilDateSerializer extends TypeSerializer<Date> {
 	public Class<?> getDeserializedType() {
 		return Date.class;
 	}
 
 	public Class<?> getSerializedType() {
-		return long.class;
+		return Long.class;
 	}
 
-	public Long serialize(Object data) {
+    @Override
+	public Long serialize(Date data) {
 		if (data == null) {
 			return null;
 		}
 
-		return ((Date) data).getTime();
+		return data.getTime();
 	}
 
+    @Override
 	public Date deserialize(Object data) {
 		if (data == null) {
 			return null;
