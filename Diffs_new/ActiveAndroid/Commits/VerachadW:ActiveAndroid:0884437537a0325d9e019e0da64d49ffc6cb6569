diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 411ed7bd..c4b34dc8 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -18,6 +18,7 @@
 
 import android.content.ContentValues;
 import android.database.Cursor;
+import android.database.sqlite.SQLiteConstraintException;
 import android.database.sqlite.SQLiteDatabase;
 
 import com.activeandroid.annotation.Column;
@@ -37,7 +38,7 @@
 	// PRIVATE MEMBERS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	@Column(name = "Id")
+	@Column(name = "_id")
 	private Long mId = null;
 
 	private TableInfo mTableInfo;
@@ -55,11 +56,19 @@ public Model() {
 	//////////////////////////////////////////////////////////////////////////////////////
 
 	public final Long getId() {
-		return mId;
+        if(mId == null)
+            return 0L;
+        else
+            return mId;
 	}
 
+    public final void setId(Long id) {
+        if(mId == null)
+            this.mId = id;
+    }
+
 	public final void delete() {
-		Cache.openDatabase().delete(mTableInfo.getTableName(), "Id=?", new String[] { getId().toString() });
+		Cache.openDatabase().delete(mTableInfo.getTableName(), "_id=?", new String[] { getId().toString() });
 		Cache.removeEntity(this);
 
 		Cache.getContext().getContentResolver()
@@ -146,12 +155,15 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 			}
 		}
 
-		if (mId == null) {
-			mId = db.insert(mTableInfo.getTableName(), null, values);
-		}
-		else {
-			db.update(mTableInfo.getTableName(), values, "Id=" + mId, null);
-		}
+        try {
+            if(mId == null)
+                mId = db.insert(mTableInfo.getTableName(), null, values);
+            else
+                db.insertOrThrow(mTableInfo.getTableName(), null, values);
+        }
+        catch(SQLiteConstraintException e) {
+            db.update(mTableInfo.getTableName(), values, "_id="+mId, null);
+        }
 
 		Cache.getContext().getContentResolver()
 				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mId), null);
@@ -160,11 +172,11 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 	// Convenience methods
 
 	public static void delete(Class<? extends Model> type, long id) {
-		new Delete().from(type).where("Id=?", id).execute();
+		new Delete().from(type).where("_id=?", id).execute();
 	}
 
 	public static <T extends Model> T load(Class<T> type, long id) {
-		return new Select().from(type).where("Id=?", id).executeSingle();
+		return new Select().from(type).where("_id=?", id).executeSingle();
 	}
 
 	// Model population
@@ -231,7 +243,7 @@ else if (ReflectionUtils.isModel(fieldType)) {
 
 					Model entity = Cache.getEntity(entityType, entityId);
 					if (entity == null) {
-						entity = new Select().from(entityType).where("Id=?", entityId).executeSingle();
+						entity = new Select().from(entityType).where("_id=?", entityId).executeSingle();
 					}
 
 					value = entity;
diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index 225a838d..2eaa8f11 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -91,7 +91,7 @@ public String getColumnName(Field field) {
 	private Field getIdField(Class<?> type) {
 		if (type.equals(Model.class)) {
 			try {
-				return type.getDeclaredField("mId");
+				return type.getDeclaredField("_id");
 			}
 			catch (NoSuchFieldException e) {
 				Log.e("Impossible!", e);
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index b9ba32b9..6c39da83 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -158,8 +158,8 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 				definition.append(")");
 			}
 
-			if (name.equals("Id")) {
-				definition.append(" PRIMARY KEY AUTOINCREMENT");
+			if (name.equals("_id")) {
+				definition.append(" PRIMARY KEY ");
 			}
 
 			if (column.notNull()) {
@@ -175,7 +175,7 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 			if (FOREIGN_KEYS_SUPPORTED && ReflectionUtils.isModel(type)) {
 				definition.append(" REFERENCES ");
 				definition.append(Cache.getTableInfo((Class<? extends Model>) type).getTableName());
-				definition.append("(Id)");
+				definition.append("(_id)");
 				definition.append(" ON DELETE ");
 				definition.append(column.onDelete().toString().replace("_", " "));
 				definition.append(" ON UPDATE ");
@@ -198,7 +198,7 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 
 			if (cursor.moveToFirst()) {
 				do {
-					Model entity = Cache.getEntity(type, cursor.getLong(cursor.getColumnIndex("Id")));
+					Model entity = Cache.getEntity(type, cursor.getLong(cursor.getColumnIndex("_id")));
 					if (entity == null) {
 						entity = (T) entityConstructor.newInstance();
 					}
