diff --git a/src/com/activeandroid/Configuration.java b/src/com/activeandroid/Configuration.java
index b197d223..2d96416e 100644
--- a/src/com/activeandroid/Configuration.java
+++ b/src/com/activeandroid/Configuration.java
@@ -38,6 +38,7 @@
 	private Context mContext;
 	private String mDatabaseName;
 	private int mDatabaseVersion;
+    private Boolean mExcludeLibs;
 	private String mSqlParser;
 	private List<Class<? extends Model>> mModelClasses;
 	private List<Class<? extends TypeSerializer>> mTypeSerializers;
@@ -66,6 +67,8 @@ public String getDatabaseName() {
 	public int getDatabaseVersion() {
 		return mDatabaseVersion;
 	}
+
+    public Boolean getExcludeLibs() { return mExcludeLibs; }
 	
 	public String getSqlParser() {
 	    return mSqlParser;
@@ -101,10 +104,12 @@ public boolean isValid() {
 		private final static String AA_MODELS = "AA_MODELS";
 		private final static String AA_SERIALIZERS = "AA_SERIALIZERS";
 		private final static String AA_SQL_PARSER = "AA_SQL_PARSER";
+        private final static String AA_EXCLUDE_LIBS = "AA_EXCLUDE_LIBS";
 
 		private static final int DEFAULT_CACHE_SIZE = 1024;
 		private static final String DEFAULT_DB_NAME = "Application.db";
 		private static final String DEFAULT_SQL_PARSER = SQL_PARSER_LEGACY;
+        private static final Boolean DEFAULT_EXCLUDE_LIBS = false;
 
 		//////////////////////////////////////////////////////////////////////////////////////
 		// PRIVATE MEMBERS
@@ -116,6 +121,7 @@ public boolean isValid() {
 		private String mDatabaseName;
 		private Integer mDatabaseVersion;
 		private String mSqlParser;
+        private Boolean mExcludeLibs;
 		private List<Class<? extends Model>> mModelClasses;
 		private List<Class<? extends TypeSerializer>> mTypeSerializers;
 
@@ -142,6 +148,11 @@ public Builder setDatabaseName(String databaseName) {
 			return this;
 		}
 
+        public Builder setExcludeLibs(boolean excludeLibs) {
+            mExcludeLibs = excludeLibs;
+            return this;
+        }
+
 		public Builder setDatabaseVersion(int databaseVersion) {
 			mDatabaseVersion = databaseVersion;
 			return this;
@@ -222,7 +233,14 @@ public Configuration create() {
 			} else {
 			    configuration.mSqlParser = getMetaDataSqlParserOrDefault();
 			}
-			
+
+            // Get the option of exclude libs to find models from meta-data
+            if (mExcludeLibs != null) {
+                configuration.mExcludeLibs = mExcludeLibs;
+            } else {
+                configuration.mExcludeLibs = getMetaDataExcludeLibsOrDefault();
+            }
+
 			// Get model classes from meta-data
 			if (mModelClasses != null) {
 				configuration.mModelClasses = mModelClasses;
@@ -270,6 +288,15 @@ private int getMetaDataDatabaseVersionOrDefault() {
 			return aaVersion;
 		}
 
+        private Boolean getMetaDataExcludeLibsOrDefault() {
+            Boolean aaExcludeLibs = ReflectionUtils.getMetaData(mContext, AA_EXCLUDE_LIBS);
+            if (aaExcludeLibs == null) {
+                aaExcludeLibs = DEFAULT_EXCLUDE_LIBS;
+            }
+
+            return aaExcludeLibs;
+        }
+
 		private String getMetaDataSqlParserOrDefault() {
 		    final String mode = ReflectionUtils.getMetaData(mContext, AA_SQL_PARSER);
 		    if (mode == null) {
diff --git a/src/com/activeandroid/ModelInfo.java b/src/com/activeandroid/ModelInfo.java
index 7b0346f2..89513704 100644
--- a/src/com/activeandroid/ModelInfo.java
+++ b/src/com/activeandroid/ModelInfo.java
@@ -60,7 +60,7 @@
 	public ModelInfo(Configuration configuration) {
 		if (!loadModelFromMetaData(configuration)) {
 			try {
-				scanForModel(configuration.getContext());
+				scanForModel(configuration.getContext(), configuration.getExcludeLibs());
 			}
 			catch (IOException e) {
 				Log.e("Couldn't open source path.", e);
@@ -121,7 +121,7 @@ private boolean loadModelFromMetaData(Configuration configuration) {
 		return true;
 	}
 
-	private void scanForModel(Context context) throws IOException {
+	private void scanForModel(Context context, Boolean excludeLibs) throws IOException {
 		String packageName = context.getPackageName();
 		String sourcePath = context.getApplicationInfo().sourceDir;
 		List<String> paths = new ArrayList<String>();
@@ -132,11 +132,14 @@ private void scanForModel(Context context) throws IOException {
 
 			while (entries.hasMoreElements()) {
 
-                // Check if the package starts with the correct packageName
-                // Libs won't have models of ActiveRecord
                 String entry = entries.nextElement();
 
-                if(entry.startsWith(packageName)) {
+                if(excludeLibs){
+                    // Check if the package starts with the correct packageName
+                    if(entry.startsWith(packageName)) {
+                        paths.add(entry);
+                    }
+                } else {
                     paths.add(entry);
                 }
 			}
