diff --git a/README.md b/README.md
index 2e7c9e4d..4dc6caee 100644
--- a/README.md
+++ b/README.md
@@ -1,69 +1,14 @@
-[![Build Status](https://travis-ci.org/pardom/ActiveAndroid.png?branch=master)](https://travis-ci.org/pardom/ActiveAndroid) [![Stories in Ready](https://badge.waffle.io/pardom/ActiveAndroid.png)](http://waffle.io/pardom/ActiveAndroid)  
-# ActiveAndroid
+# ActiveAndroid-Secure
 
-ActiveAndroid is an active record style ORM ([object relational mapper](http://en.wikipedia.org/wiki/Object-relational_mapping)). What does that mean exactly? Well, ActiveAndroid allows you to save and retrieve SQLite database records without ever writing a single SQL statement. Each database record is wrapped neatly into a class with methods like _save()_ and _delete()_.
+This adds SQLCipher support to ActiveAndroid. It's mostly just a re-implementation of [ActiveAndroid-Secure](https://github.com/zsiegel/ActiveAndroid-Secure) on top of the latest ActiveAndroid, adding a method to set the password separately.
 
-ActiveAndroid does so much more than this though. Accessing the database is a hassle, to say the least, in Android. ActiveAndroid takes care of all the setup and messy stuff, and all with just a few simple steps of configuration.
+The included `sqlcipher.jar` comes from `classes.jar` in the [SQLCipher for Android 3.3.1-2 .aar binary package](https://www.zetetic.net/sqlcipher/sqlcipher-for-android/). It is only needed to allow the compiler to find SQLCipher classes when building ActiveAndroid. The resulting `ActiveAndroid.jar` does not include SQLCipher.
 
-## Download
+To use this in a project, build this to produce `ActiveAndroid.jar`, add it to your app's `libs/`, and add a SQLCipher dependency to your project. Like this:
 
-Grab via Maven:
-```xml
-<dependency>
-  <groupId>com.michaelpardo</groupId>
-  <artifactId>activeandroid</artifactId>
-  <version>3.1.0-SNAPSHOT</version>
-</dependency>
-```
-or Gradle:
 ```groovy
-repositories {
-    mavenCentral()
-    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
+dependencies {
+    compile fileTree(include: ['*.jar'], dir: 'libs')
+    compile 'net.zetetic:android-database-sqlcipher:3.3.1-2@aar'
 }
-
-compile 'com.michaelpardo:activeandroid:3.1.0-SNAPSHOT'
 ```
-
-## Documentation
-
-* [Getting started](http://github.com/pardom/ActiveAndroid/wiki/Getting-started)
-* [Creating your database model](http://github.com/pardom/ActiveAndroid/wiki/Creating-your-database-model)
-* [Saving to the database](http://github.com/pardom/ActiveAndroid/wiki/Saving-to-the-database)
-* [Querying the database](http://github.com/pardom/ActiveAndroid/wiki/Querying-the-database)
-* [Type serializers](http://github.com/pardom/ActiveAndroid/wiki/Type-serializers)
-* [Using the content provider](http://github.com/pardom/ActiveAndroid/wiki/Using-the-content-provider)
-* [Schema migrations](http://github.com/pardom/ActiveAndroid/wiki/Schema-migrations)
-* [Pre-populated-databases](http://github.com/pardom/ActiveAndroid/wiki/Pre-populated-databases)
-* [Running the Test Suite](https://github.com/pardom/ActiveAndroid/wiki/Running-the-Test-Suite)
-
-## License
-
-[Apache Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.html)
-
-    Copyright (C) 2010 Michael Pardo
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
-
-## Contributing
-
-Please fork this repository and contribute back using [pull requests](http://github.com/pardom/ActiveAndroid/pulls).
-
-Any contributions, large or small, major features, bug fixes, unit tests are welcomed and appreciated but will be thoroughly reviewed and discussed.
-
-You can run the test suite by following the instructions on the [Running the Test Suite](https://github.com/pardom/ActiveAndroid/wiki/Running-the-Test-Suite) Wiki page.
-
-
-## Author
-
-Michael Pardo | www.michaelpardo.com | www.activeandroid.com
diff --git a/libs/sqlcipher.jar b/libs/sqlcipher.jar
new file mode 100644
index 00000000..42c51f99
Binary files /dev/null and b/libs/sqlcipher.jar differ
diff --git a/src/com/activeandroid/ActiveAndroid.java b/src/com/activeandroid/ActiveAndroid.java
index c58c8efd..ec109bb9 100644
--- a/src/com/activeandroid/ActiveAndroid.java
+++ b/src/com/activeandroid/ActiveAndroid.java
@@ -17,7 +17,7 @@
  */
 
 import android.content.Context;
-import android.database.sqlite.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteDatabase;
 
 import com.activeandroid.util.Log;
 
@@ -52,6 +52,32 @@ public static void dispose() {
 		Cache.dispose();
 	}
 
+	/**
+	 * Sets the SQLCipher password. This must be called before initialize()
+	 * and cannot be changed afterwards.
+	 *
+	 * If the password is blank or null, or if this is not called, the database
+	 * will not be encrypted.
+	 *
+	 * @param password The database password
+	 */
+	public static void setPassword(String password) {
+		setPassword(password.toCharArray());
+	}
+
+	/**
+	 * Sets the SQLCipher password. This must be called before initialize()
+	 * and cannot be changed afterwards.
+	 *
+	 * If the password is blank or null, or if this is not called, the database
+	 * will not be encrypted.
+	 *
+	 * @param password The database password
+	 */
+	public static void setPassword(char[] password) {
+		Cache.setPassword(password);
+	}
+
 	public static void setLoggingEnabled(boolean enabled) {
 		Log.setEnabled(enabled);
 	}
diff --git a/src/com/activeandroid/Cache.java b/src/com/activeandroid/Cache.java
index 6495e379..09a05437 100644
--- a/src/com/activeandroid/Cache.java
+++ b/src/com/activeandroid/Cache.java
@@ -16,10 +16,11 @@
  * limitations under the License.
  */
 
+import java.util.Arrays;
 import java.util.Collection;
 
 import android.content.Context;
-import android.database.sqlite.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteDatabase;
 import android.support.v4.util.LruCache;
 
 import com.activeandroid.serializer.TypeSerializer;
@@ -44,6 +45,9 @@
 	private static LruCache<String, Model> sEntities;
 
 	private static boolean sIsInitialized = false;
+	private static boolean sSQLLibsLoaded = false;
+
+	private static char[] password = null;
 
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
@@ -56,12 +60,24 @@ private Cache() {
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
+	public static synchronized void setPassword(char[] password) {
+		if (Cache.isInitialized())
+			throw new RuntimeException(); // Cannot change password when cache is already initialized
+		Cache.password = Arrays.copyOf(password, password.length);
+	}
+
 	public static synchronized void initialize(Configuration configuration) {
 		if (sIsInitialized) {
 			Log.v("ActiveAndroid already initialized.");
 			return;
 		}
 
+		// Native libraries should be loaded only once, the first time we initialize
+		if (!sSQLLibsLoaded) {
+			sSQLLibsLoaded = true;
+			SQLiteDatabase.loadLibs(configuration.getContext());
+		}
+
 		sContext = configuration.getContext();
 		sModelInfo = new ModelInfo(configuration);
 		sDatabaseHelper = new DatabaseHelper(configuration);
@@ -103,7 +119,9 @@ public static boolean isInitialized() {
 	}
 
 	public static synchronized SQLiteDatabase openDatabase() {
-		return sDatabaseHelper.getWritableDatabase();
+		if (password == null)
+			password = "".toCharArray();
+		return sDatabaseHelper.getWritableDatabase(password);
 	}
 
 	public static synchronized void closeDatabase() {
diff --git a/src/com/activeandroid/DatabaseHelper.java b/src/com/activeandroid/DatabaseHelper.java
index 7158c5bb..fadd0416 100644
--- a/src/com/activeandroid/DatabaseHelper.java
+++ b/src/com/activeandroid/DatabaseHelper.java
@@ -28,8 +28,8 @@
 import java.util.List;
 
 import android.content.Context;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteOpenHelper;
+import net.sqlcipher.database.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteOpenHelper;
 import android.text.TextUtils;
 
 import com.activeandroid.util.IOUtils;
diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 421426ea..c68a60f0 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -18,7 +18,7 @@
 
 import android.content.ContentValues;
 import android.database.Cursor;
-import android.database.sqlite.SQLiteDatabase;
+import net.sqlcipher.database.SQLiteDatabase;
 
 import com.activeandroid.content.ContentProvider;
 import com.activeandroid.query.Delete;
