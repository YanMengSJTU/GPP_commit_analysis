diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index c5e29436..f930b57a 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -181,6 +181,10 @@ public boolean exists(){
         return model!=null;
     }
 
+    public void update(){
+
+    }
+
     /**
      * Checks to see if object exists, if so, deletes it then updates itself
      */
diff --git a/src/com/activeandroid/app/Application.java b/src/com/activeandroid/app/Application.java
index f2af9ff9..03461787 100644
--- a/src/com/activeandroid/app/Application.java
+++ b/src/com/activeandroid/app/Application.java
@@ -25,17 +25,12 @@ public void onCreate() {
 		super.onCreate();
 		ActiveAndroid.initialize(this);
 
-        //Start the DB request queue
-        DBRequestQueue.getSharedInstance();
-
-
 	}
 	
 	@Override
 	public void onTerminate() {
 		super.onTerminate();
 
-        DBRequestQueue.getSharedInstance().quit();
 		ActiveAndroid.dispose();
 	}
 }
\ No newline at end of file
diff --git a/src/com/activeandroid/manager/DBManager.java b/src/com/activeandroid/manager/DBManager.java
index 7d50cba9..1b4ede4e 100644
--- a/src/com/activeandroid/manager/DBManager.java
+++ b/src/com/activeandroid/manager/DBManager.java
@@ -25,6 +25,7 @@
      * @param classClass
      */
     public DBManager(Class<OBJECT_CLASS> classClass){
+        super(classClass.getSimpleName());
         mObjectClass = classClass;
     }
 
diff --git a/src/com/activeandroid/manager/SingleDBManager.java b/src/com/activeandroid/manager/SingleDBManager.java
index 86f9da96..af410e26 100644
--- a/src/com/activeandroid/manager/SingleDBManager.java
+++ b/src/com/activeandroid/manager/SingleDBManager.java
@@ -26,12 +26,30 @@
  * Date: 12/26/13
  * Contributors:
  * Description: This class will provide one instance for all tables,
- * however the downside requires the class of an object when retrieving from the DB.
+ * however the downside requires the class of an object when retrieving from the DB. Any {@link com.activeandroid.manager.DBManager} will extend off this class
+ * and provide its own {@link com.activeandroid.runtime.DBRequestQueue}
  */
 public class SingleDBManager {
 
     private static SingleDBManager manager;
 
+    private DBRequestQueue mQueue;
+
+    private String mName;
+
+    /**
+     * Creates the SingleDBManager while starting its own request queue
+     * @param name
+     */
+    public SingleDBManager(String name){
+        checkThread();
+        mName = name;
+
+        if(!getQueue().isAlive()){
+            getQueue().start();
+        }
+    }
+
     /**
      * Returns the application's only needed DBManager.
      * Note: this manager must be created on the main thread, otherwise a {@link com.activeandroid.exception.DBManagerNotOnMainException} will be thrown
@@ -39,12 +57,18 @@
      */
     public static SingleDBManager getSharedInstance(){
         if(manager==null){
-           manager = new SingleDBManager();
-           manager.checkThread();
+           manager = new SingleDBManager("SingleDBManager");
         }
         return manager;
     }
 
+    public DBRequestQueue getQueue(){
+        if(mQueue==null){
+            mQueue = new DBRequestQueue(mName);
+        }
+        return mQueue;
+    }
+
     /**
      * Ensure manager was created in the main thread, otherwise handler will not work
      */
@@ -64,7 +88,7 @@ protected void checkThread(){
      * @param runnable
      */
     protected void processOnBackground(DBRequest runnable){
-        DBRequestQueue.getSharedInstance().add(runnable);
+        getQueue().add(runnable);
     }
 
     /**
@@ -394,7 +418,7 @@ public void run() {
 
     /**
      * Deletes all objects from the collection specified
-     * @param list - the list of model objects you wish to delete
+     * @param objects - the list of model objects you wish to delete
      */
     public <COLLECTION_CLASS extends Collection<OBJECT_CLASS>, OBJECT_CLASS extends Model> void deleteAll(COLLECTION_CLASS objects) {
         ActiveAndroid.beginTransaction();
diff --git a/src/com/activeandroid/runtime/DBRequestQueue.java b/src/com/activeandroid/runtime/DBRequestQueue.java
index a5f0dcd8..031398c3 100644
--- a/src/com/activeandroid/runtime/DBRequestQueue.java
+++ b/src/com/activeandroid/runtime/DBRequestQueue.java
@@ -15,8 +15,6 @@
  */
 public class DBRequestQueue extends Thread{
 
-    private static DBRequestQueue shared;
-
     /**
      * Queue of requests
      */
@@ -24,18 +22,6 @@
 
     private boolean mQuit = false;
 
-    /**
-     * Gets and starts the request queue if it hasn't started yet.
-     * @return
-     */
-    public static DBRequestQueue getSharedInstance(){
-        if(shared==null){
-            shared = new DBRequestQueue("DBRequestQueue");
-            shared.start();
-        }
-        return shared;
-    }
-
     /**
      * Creates a queue with the specified name to ID it.
      * @param name
@@ -62,7 +48,7 @@ public void run() {
             }
 
             try{
-                Log.d("DBRequestQueue", "Size is: " + mQueue.size() + " executing:" + runnable.getName());
+                Log.d("DBRequestQueue + " + getName(), "Size is: " + mQueue.size() + " executing:" + runnable.getName());
                 runnable.run();
             } catch (Throwable t){
                 throw new RuntimeException(t);
