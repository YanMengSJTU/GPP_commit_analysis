diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index 089239b6..9e1ceed7 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -31,35 +31,35 @@
 import java.util.List;
 
 public final class TableInfo {
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PRIVATE MEMBERS
-	//////////////////////////////////////////////////////////////////////////////////////
+    //////////////////////////////////////////////////////////////////////////////////////
+    // PRIVATE MEMBERS
+    //////////////////////////////////////////////////////////////////////////////////////
 
     private static final Index[] emptyIndex = {};
 
-	private final Class<? extends Model> mType;
-	private final String mTableName;
+    private final Class<? extends Model> mType;
+    private final String mTableName;
     private final Index[] mIndexes;
-	private final String mIdName;
+    private final String mIdName;
     private final List<Field> mFields;
-	private final SimpleArrayMap<Field, String> mColumnNames = new SimpleArrayMap<Field, String>();
+    private final SimpleArrayMap<Field, String> mColumnNames = new SimpleArrayMap<Field, String>();
 
-	//////////////////////////////////////////////////////////////////////////////////////
-	// CONSTRUCTORS
-	//////////////////////////////////////////////////////////////////////////////////////
+    //////////////////////////////////////////////////////////////////////////////////////
+    // CONSTRUCTORS
+    //////////////////////////////////////////////////////////////////////////////////////
 
-	public TableInfo(Class<? extends Model> type) {
-		mType = type;
+    public TableInfo(Class<? extends Model> type) {
+        mType = type;
 
-		final Table tableAnnotation = type.getAnnotation(Table.class);
+        final Table tableAnnotation = type.getAnnotation(Table.class);
 
         if (tableAnnotation != null) {
-			mTableName = tableAnnotation.name();
-			mIdName = tableAnnotation.id();
+            mTableName = tableAnnotation.name();
+            mIdName = tableAnnotation.id();
             mIndexes = tableAnnotation.indexes() == null ? emptyIndex : tableAnnotation.indexes();
         }
-		else {
-			mTableName = type.getSimpleName();
+        else {
+            mTableName = type.getSimpleName();
             mIdName = Table.DEFAULT_ID_NAME;
             mIndexes = emptyIndex;
         }
@@ -80,41 +80,40 @@ public TableInfo(Class<? extends Model> type) {
             field.setAccessible(true);
             mColumnNames.put(field, columnName);
         }
-	}
+    }
 
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PUBLIC METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
+    //////////////////////////////////////////////////////////////////////////////////////
+    // PUBLIC METHODS
+    //////////////////////////////////////////////////////////////////////////////////////
 
-	public Class<? extends Model> getType() {
-		return mType;
-	}
+    public Class<? extends Model> getType() {
+        return mType;
+    }
 
     public Index[] getIndexes(){
         return mIndexes;
     }
 
-	public String getTableName() {
-		return mTableName;
-	}
-
-	public String getIdName() {
-		return mIdName;
-	}
-
-	public Collection<Field> getFields() {
-		return mFields;
-	}
+    public String getTableName() {
+        return mTableName;
+    }
 
-	public String getColumnName(Field field) {
-		return mColumnNames.get(field);
-	}
+    public String getIdName() {
+        return mIdName;
+    }
 
+    public Collection<Field> getFields() {
+        return mFields;
+    }
 
+    public String getColumnName(Field field) {
+        return mColumnNames.get(field);
+    }
+    
     private Field getIdField(Class<?> type) {
         if (Model.class.isAssignableFrom(type)){
             try {
-                return type.getDeclaredField("mId");
+                return type.getField("mId");
             }
             catch (NoSuchFieldException e) {
                 Log.e("Impossible!", e.toString());
