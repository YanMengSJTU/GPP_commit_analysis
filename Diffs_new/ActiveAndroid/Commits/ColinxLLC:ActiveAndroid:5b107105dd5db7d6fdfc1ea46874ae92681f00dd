diff --git a/src/com/activeandroid/ActiveAndroid.java b/src/com/activeandroid/ActiveAndroid.java
index c58c8efd..2087a7f2 100644
--- a/src/com/activeandroid/ActiveAndroid.java
+++ b/src/com/activeandroid/ActiveAndroid.java
@@ -44,10 +44,6 @@ public static void initialize(Configuration configuration, boolean loggingEnable
 		Cache.initialize(configuration);
 	}
 
-	public static void clearCache() {
-		Cache.clear();
-	}
-
 	public static void dispose() {
 		Cache.dispose();
 	}
diff --git a/src/com/activeandroid/Cache.java b/src/com/activeandroid/Cache.java
index 6495e379..27a77540 100644
--- a/src/com/activeandroid/Cache.java
+++ b/src/com/activeandroid/Cache.java
@@ -20,7 +20,6 @@
 
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
-import android.support.v4.util.LruCache;
 
 import com.activeandroid.serializer.TypeSerializer;
 import com.activeandroid.util.Log;
@@ -41,8 +40,6 @@
 	private static ModelInfo sModelInfo;
 	private static DatabaseHelper sDatabaseHelper;
 
-	private static LruCache<String, Model> sEntities;
-
 	private static boolean sIsInitialized = false;
 
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -66,12 +63,6 @@ public static synchronized void initialize(Configuration configuration) {
 		sModelInfo = new ModelInfo(configuration);
 		sDatabaseHelper = new DatabaseHelper(configuration);
 
-		// TODO: It would be nice to override sizeOf here and calculate the memory
-		// actually used, however at this point it seems like the reflection
-		// required would be too costly to be of any benefit. We'll just set a max
-		// object size instead.
-		sEntities = new LruCache<String, Model>(configuration.getCacheSize());
-
 		openDatabase();
 
 		sIsInitialized = true;
@@ -79,15 +70,9 @@ public static synchronized void initialize(Configuration configuration) {
 		Log.v("ActiveAndroid initialized successfully.");
 	}
 
-	public static synchronized void clear() {
-		sEntities.evictAll();
-		Log.v("Cache cleared.");
-	}
-
 	public static synchronized void dispose() {
 		closeDatabase();
 
-		sEntities = null;
 		sModelInfo = null;
 		sDatabaseHelper = null;
 
@@ -126,20 +111,7 @@ public static String getIdentifier(Model entity) {
 		return getIdentifier(entity.getClass(), entity.getId());
 	}
 
-	public static synchronized void addEntity(Model entity) {
-		sEntities.put(getIdentifier(entity), entity);
-	}
-
-	public static synchronized Model getEntity(Class<? extends Model> type, long id) {
-		return sEntities.get(getIdentifier(type, id));
-	}
-
-	public static synchronized void removeEntity(Model entity) {
-		sEntities.remove(getIdentifier(entity));
-	}
-
 	// Model cache
-
 	public static synchronized Collection<TableInfo> getTableInfos() {
 		return sModelInfo.getTableInfos();
 	}
diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 421426ea..319f5ca7 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -65,7 +65,6 @@ public final Long getId() {
 
 	public final void delete() {
 		Cache.openDatabase().delete(mTableInfo.getTableName(), idName+"=?", new String[] { getId().toString() });
-		Cache.removeEntity(this);
 
 		Cache.getContext().getContentResolver()
 				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mId), null);
@@ -242,11 +241,7 @@ else if (ReflectionUtils.isModel(fieldType)) {
 					final long entityId = cursor.getLong(columnIndex);
 					final Class<? extends Model> entityType = (Class<? extends Model>) fieldType;
 
-					Model entity = Cache.getEntity(entityType, entityId);
-					if (entity == null) {
-						entity = new Select().from(entityType).where(idName+"=?", entityId).executeSingle();
-					}
-
+					Model entity = new Select().from(entityType).where(idName+"=?", entityId).executeSingle();
 					value = entity;
 				}
 				else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
@@ -275,10 +270,6 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 				Log.e(e.getClass().getName(), e);
 			}
 		}
-
-		if (mId != null) {
-			Cache.addEntity(this);
-		}
 	}
 
 	//////////////////////////////////////////////////////////////////////////////////////
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index cbf41eae..b23ead22 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -336,10 +336,7 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
                  */
                 List<String> columnsOrdered = new ArrayList<String>(Arrays.asList(cursor.getColumnNames()));
 				do {
-					Model entity = Cache.getEntity(type, cursor.getLong(columnsOrdered.indexOf(idName)));
-					if (entity == null) {
-						entity = (T) entityConstructor.newInstance();
-					}
+					Model entity = (T) entityConstructor.newInstance();
 
 					entity.loadFromCursor(cursor);
 					entities.add((T) entity);
diff --git a/tests/src/com/activeandroid/test/race/CacheRaceConditionTest.java b/tests/src/com/activeandroid/test/race/CacheRaceConditionTest.java
new file mode 100644
index 00000000..7a82dcf1
--- /dev/null
+++ b/tests/src/com/activeandroid/test/race/CacheRaceConditionTest.java
@@ -0,0 +1,27 @@
+package com.activeandroid.test.race;
+
+import com.activeandroid.query.Select;
+import com.activeandroid.test.ActiveAndroidTestCase;
+
+public class CacheRaceConditionTest extends ActiveAndroidTestCase {
+
+	public void testSelectRaceCondition() {
+		RaceModel createdModel = new RaceModel();
+		createdModel.raceValue = "createdValue";
+		createdModel.save();
+		
+		RaceModel loadedModel = new Select().from(RaceModel.class).where("raceValue = ?", "createdValue").executeSingle();
+		assertEquals("createdValue", loadedModel.raceValue);
+		
+		loadedModel.raceValue = "modifiedValue";
+		assertEquals("modifiedValue", loadedModel.raceValue);
+		
+		new Select().from(RaceModel.class).execute();
+		
+		loadedModel.save();
+		
+		RaceModel finalModel = new Select().from(RaceModel.class).where("raceValue = ?", "modifiedValue").executeSingle();
+		assertNotNull(finalModel);
+	}
+	
+}
diff --git a/tests/src/com/activeandroid/test/race/RaceModel.java b/tests/src/com/activeandroid/test/race/RaceModel.java
new file mode 100644
index 00000000..996cc0bd
--- /dev/null
+++ b/tests/src/com/activeandroid/test/race/RaceModel.java
@@ -0,0 +1,13 @@
+package com.activeandroid.test.race;
+
+import com.activeandroid.Model;
+import com.activeandroid.annotation.Column;
+import com.activeandroid.annotation.Table;
+
+@Table(name="RaceModel")
+public class RaceModel extends Model {
+
+	@Column
+	public String raceValue;
+	
+}
