diff --git a/src/main/java/com/activeandroid/app/AAApplication.java b/src/main/java/com/activeandroid/app/AAApplication.java
index aa990a37..d4a0b759 100644
--- a/src/main/java/com/activeandroid/app/AAApplication.java
+++ b/src/main/java/com/activeandroid/app/AAApplication.java
@@ -17,6 +17,7 @@
  */
 
 import com.activeandroid.ActiveAndroid;
+import com.activeandroid.manager.DBManagerRuntime;
 import com.activeandroid.runtime.DBRequestQueue;
 
 public class AAApplication extends android.app.Application {
@@ -28,6 +29,7 @@ public void onCreate() {
 		super.onCreate();
 		ActiveAndroid.initialize(this);
 
+        DBManagerRuntime.restartManagers();
 	}
 
     public static void setDebugLogEnabled(boolean enabled){
diff --git a/src/main/java/com/activeandroid/manager/DBManagerRuntime.java b/src/main/java/com/activeandroid/manager/DBManagerRuntime.java
new file mode 100644
index 00000000..6213e8a5
--- /dev/null
+++ b/src/main/java/com/activeandroid/manager/DBManagerRuntime.java
@@ -0,0 +1,42 @@
+package com.activeandroid.manager;
+
+import com.activeandroid.runtime.DBBatchSaveQueue;
+
+import java.util.ArrayList;
+
+/**
+ * Created by andrewgrosner
+ * Date: 4/17/14
+ * Contributors:
+ * Description:
+ */
+public class DBManagerRuntime {
+
+
+    private static ArrayList<SingleDBManager> managers;
+
+    static ArrayList<SingleDBManager> getManagers(){
+        if(managers==null){
+            managers = new ArrayList<SingleDBManager>();
+        }
+        return managers;
+    }
+
+    /**
+     * Quits all active DBManager queues
+     */
+    public static void quit(){
+        for(SingleDBManager manager: getManagers()){
+            manager.getQueue().quit();
+            manager.disposeQueue();
+        }
+        DBBatchSaveQueue.getSharedSaveQueue().quit();
+        DBBatchSaveQueue.disposeSharedQueue();
+    }
+
+    public static void restartManagers(){
+        for(SingleDBManager manager: getManagers()){
+            manager.checkQueue();
+        }
+    }
+}
diff --git a/src/main/java/com/activeandroid/manager/SingleDBManager.java b/src/main/java/com/activeandroid/manager/SingleDBManager.java
index ff545dd5..a5f293b0 100644
--- a/src/main/java/com/activeandroid/manager/SingleDBManager.java
+++ b/src/main/java/com/activeandroid/manager/SingleDBManager.java
@@ -16,6 +16,7 @@
 import com.activeandroid.runtime.DBRequest;
 import com.activeandroid.runtime.DBRequestInfo;
 import com.activeandroid.runtime.DBRequestQueue;
+import com.activeandroid.util.AALog;
 import com.activeandroid.util.ReflectionUtils;
 import com.activeandroid.util.SQLiteUtils;
 
@@ -44,16 +45,10 @@
      * @param name
      */
     public SingleDBManager(String name){
-        checkThread();
         mName = name;
-
-        if(!getQueue().isAlive()){
-            getQueue().start();
-        }
-
-        if(!getSaveQueue().isAlive()){
-            getSaveQueue().start();
-        }
+        checkThread();
+        DBManagerRuntime.getManagers().add(this);
+        checkQueue();
     }
 
     /**
@@ -68,6 +63,22 @@ public static SingleDBManager getSharedInstance(){
         return manager;
     }
 
+    void checkQueue() {
+        if (!getQueue().isAlive()) {
+            getQueue().start();
+        }
+        if (!getSaveQueue().isAlive()) {
+            getSaveQueue().start();
+        }
+    }
+
+    /**
+     * Destroys the running queue
+     */
+    void disposeQueue() {
+        mQueue = null;
+    }
+
     public DBRequestQueue getQueue(){
         if(mQueue==null){
             mQueue = new DBRequestQueue(mName);
@@ -481,4 +492,5 @@ public void run() {
             }
         });
     }
+
 }
diff --git a/src/main/java/com/activeandroid/runtime/DBBatchSaveQueue.java b/src/main/java/com/activeandroid/runtime/DBBatchSaveQueue.java
index 5163673f..c95c9751 100644
--- a/src/main/java/com/activeandroid/runtime/DBBatchSaveQueue.java
+++ b/src/main/java/com/activeandroid/runtime/DBBatchSaveQueue.java
@@ -25,6 +25,8 @@
      */
     private static final int sMODEL_SAVE_SIZE = 50;
 
+    private boolean mQuit = false;
+
     public static DBBatchSaveQueue getSharedSaveQueue(){
         if(mBatchSaveQueue==null){
             mBatchSaveQueue = new DBBatchSaveQueue();
@@ -32,6 +34,10 @@ public static DBBatchSaveQueue getSharedSaveQueue(){
         return mBatchSaveQueue;
     }
 
+    public static void disposeSharedQueue(){
+        mBatchSaveQueue = null;
+    }
+
     private final ArrayList<Model> mModels;
 
     public DBBatchSaveQueue(){
@@ -80,6 +86,10 @@ public void run() {
             } catch (InterruptedException e) {
                 AALog.d("DBBatchSaveQueue", "Batch interrupted to start saving");
             }
+
+            if(mQuit){
+                return;
+            }
         }
     }
 
@@ -114,4 +124,8 @@ public void removeAll(final Collection collection){
             mModels.removeAll(collection);
         }
     }
+
+    public void quit() {
+        mQuit = true;
+    }
 }
diff --git a/src/main/java/com/activeandroid/runtime/DBRequestQueue.java b/src/main/java/com/activeandroid/runtime/DBRequestQueue.java
index bb0e9912..e3295ac1 100644
--- a/src/main/java/com/activeandroid/runtime/DBRequestQueue.java
+++ b/src/main/java/com/activeandroid/runtime/DBRequestQueue.java
@@ -43,6 +43,9 @@ public void run() {
                 runnable = mQueue.take();
             } catch (InterruptedException e){
                 if(mQuit){
+                    synchronized (mQueue) {
+                        mQueue.clear();
+                    }
                     return;
                 }
                 continue;
@@ -59,7 +62,7 @@ public void run() {
     }
 
     public void add(DBRequest runnable){
-        if(!mQueue.contains(runnable)){
+        if (!mQueue.contains(runnable)) {
             mQueue.add(runnable);
         }
     }
@@ -69,7 +72,7 @@ public void add(DBRequest runnable){
      * @param runnable
      */
     public void cancel(DBRequest runnable){
-        if(mQueue.contains(runnable)){
+        if (mQueue.contains(runnable)) {
             mQueue.remove(runnable);
         }
     }
