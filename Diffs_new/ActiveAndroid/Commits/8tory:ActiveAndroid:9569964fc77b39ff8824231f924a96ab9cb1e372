diff --git a/src/com/activeandroid/DatabaseHelper.java b/src/com/activeandroid/DatabaseHelper.java
index f07fb7f7..37d29dea 100644
--- a/src/com/activeandroid/DatabaseHelper.java
+++ b/src/com/activeandroid/DatabaseHelper.java
@@ -65,7 +65,7 @@ public void onCreate(SQLiteDatabase db) {
 		executePragmas(db);
 		executeCreate(db);
 		executeMigrations(db, -1, db.getVersion());
-		executeCreate(db);
+		executeCreate(db); // Maybe droped tables after mirgation
 		executeCreateIndex(db);
 	}
 
@@ -149,7 +149,15 @@ private void executeCreate(SQLiteDatabase db) {
 		db.beginTransaction();
 		try {
 			for (TableInfo tableInfo : Cache.getTableInfos()) {
-				db.execSQL(SQLiteUtils.createTableDefinition(tableInfo));
+				String toSql = SQLiteUtils.createTableDefinition(tableInfo);
+				tableInfo.setSchema(toSql);
+				alterColumnsIfNeed(tableInfo);
+				/*
+				 * TODO
+				 * alter if need
+				String schemaFrom = SQLiteUtils.getSchema(tableInfo);
+				*/
+				db.execSQL(toSql);
 			}
 			db.setTransactionSuccessful();
 		}
@@ -171,6 +179,64 @@ private void executeDrop(SQLiteDatabase db) {
 		}
 	}
 
+	/**
+	 * TODO
+	 */
+	private boolean alterColumnsIfNeed(TableInfo tableInfo) {
+		return false;
+	}
+
+	/**
+	 * TODO
+	 */
+	private boolean alterColumnsIfNeed(String table, String toSql, String fromSql) {
+		//List<String> toColumns = getColumns(toSql);
+		//List<String> fromColumns = getColumns(fromSql);
+		return false;
+	}
+
+	/*
+	private boolean addColumnsIfNeed(String table, String to, String from) {
+		try {
+			// if change name of column or add new column, or delete
+			boolean isAddNewColumn = false;
+
+			if (from.contains(table)) {
+				List<String> fromColumns = Arrays.asList(from.
+						replace(String.format(
+								SimpleConstants.SQL_CREATE_TABLE, table), SimpleConstants.EMPTY).
+						replace(SimpleConstants.LAST_BRACKET, SimpleConstants.EMPTY).
+						split(SimpleConstants.DIVIDER_WITH_SPACE));
+
+				List<String> toColumns = Arrays.asList(to.
+						replace(String.format(
+								SimpleConstants.SQL_CREATE_TABLE_IF_NOT_EXIST, table), SimpleConstants.EMPTY).
+						replace(SimpleConstants.LAST_BRACKET, SimpleConstants.EMPTY).
+						split(SimpleConstants.DIVIDER_WITH_SPACE));
+
+				List<String> extraColumns = new ArrayList<String>(toColumns);
+				extraColumns.removeAll(fromColumns);
+
+				if (extraColumns.size() > 0) {
+
+					SQLiteDatabase database = sqLiteSimpleHelper.getWritableDatabase();
+					for (String column : extraColumns) {
+						database.execSQL(String.format(
+									SimpleConstants.SQL_ALTER_TABLE_ADD_COLUMN, table, column));
+					}
+					database.close();
+					isAddNewColumn = true;
+				}
+			}
+
+			return isAddNewColumn;
+
+		} catch (IndexOutOfBoundsException exception) {
+			throw new RuntimeException("Duplicated class on method create(...)");
+		}
+	}
+	*/
+
 	private boolean executeMigrations(SQLiteDatabase db, int oldVersion, int newVersion) {
 		boolean migrationExecuted = false;
 		int currentVersion = oldVersion;
diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index 452a359b..ec33c684 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -35,6 +35,7 @@
 
 	private Class<? extends Model> mType;
 	private String mTableName;
+	private String mSchema;
 
 	private Map<Field, String> mColumnNames = new HashMap<Field, String>();
 	private Map<String, Column> mColumns = new HashMap<String, Column>();
@@ -79,6 +80,14 @@ public TableInfo(Class<? extends Model> type) {
 		}
 	}
 
+	public String getSchema() {
+		return mSchema;
+	}
+
+	public void setSchema(String schema) {
+		mSchema = schema;
+	}
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index 711ab104..901f334a 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -278,6 +278,50 @@ public static Cursor query(String table, String[] projection, String selection,
 		return definitions.toArray(new String[definitions.size()]);
 	}
 
+	public static String getSchema(TableInfo tableInfo) {
+		return getSchema(tableInfo.getTableName());
+	}
+
+	public static String getSchema(String table) {
+		Cursor cursor = Cache.openDatabase().rawQuery(
+				"SELECT sql FROM sqlite_master WHERE type='" + table + "'", null);
+		String schema = null;
+		try {
+			if (cursor.moveToFirst()) {
+				schema = cursor.getString(cursor.getColumnIndex("sql"));
+			}
+		} finally {
+			cursor.close();
+		}
+		return schema;
+	}
+
+	public static List<String> getColumns(TableInfo tableInfo) {
+		return getColumns(getSchema(tableInfo));
+	}
+
+	// TODO
+	public static List<String> getColumns(String schema) {
+		return null;
+	}
+
+	// TODO
+	public static List<String> alterColumns(String table, String... columns) {
+		return null;
+	}
+
+	// TODO
+	public static List<String> renameColumn(String table, String from, String to) {
+		return null;
+	}
+
+	/**
+	 * rename(Model, Model)
+	 */
+	public static List<String> renameTable(String from, String to) {
+		return null;
+	}
+
 	public static void createIndexColumnDefinition(TableInfo tableInfo, Field field) {
 		final String name = tableInfo.getColumnName(field);
 		final Column column = field.getAnnotation(Column.class);
