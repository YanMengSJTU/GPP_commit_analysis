diff --git a/src/com/activeandroid/ActiveAndroid.java b/src/com/activeandroid/ActiveAndroid.java
index 7bf2578c..97c7c188 100644
--- a/src/com/activeandroid/ActiveAndroid.java
+++ b/src/com/activeandroid/ActiveAndroid.java
@@ -26,52 +26,53 @@
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	public synchronized static void initialize(Application application) {
-		initialize(application, false);
-	}
 
-	public synchronized static void initialize(Application application, boolean loggingEnabled) {
-		setLoggingEnabled(loggingEnabled);
-		Cache.initialize(application);
-	}
-
-	public static void clearCache() {
-		Cache.clear();
-	}
-
-	public static void dispose() {
-		Cache.dispose();
-	}
-
-	public static void setLoggingEnabled(boolean enabled) {
-		Log.setEnabled(enabled);
-	}
-
-	public synchronized static SQLiteDatabase getDatabase() {
-		return Cache.openDatabase();
-	}
-
-	public static void beginTransaction() {
-		Cache.openDatabase().beginTransaction();
-	}
-
-	public static void endTransaction() {
-		Cache.openDatabase().endTransaction();
-	}
-
-	public static void setTransactionSuccessful() {
-		Cache.openDatabase().setTransactionSuccessful();
-	}
-
-	public static boolean inTransaction() {
-		return Cache.openDatabase().inTransaction();
-	}
-
-	public static void execSQL(String sql) {
-		Cache.openDatabase().execSQL(sql);
-	}
-
-	public static void execSQL(String sql, Object[] bindArgs) {
-		Cache.openDatabase().execSQL(sql, bindArgs);
-	}
+//	public synchronized static void initialize(Application application) {
+//		initialize(application, false);
+//	}
+//
+//	public synchronized static void initialize(Application application, boolean loggingEnabled) {
+//		setLoggingEnabled(loggingEnabled);
+//		DbCache.initialize(application);
+//	}
+//
+//	public static void clearCache() {
+//		DbCache.clear();
+//	}
+//
+//	public static void dispose() {
+//		DbCache.dispose();
+//	}
+//
+//	public static void setLoggingEnabled(boolean enabled) {
+//		Log.setEnabled(enabled);
+//	}
+//
+//	public synchronized static SQLiteDatabase getDatabase() {
+//		return DbCache.openDatabase();
+//	}
+//
+//	public static void beginTransaction() {
+//		DbCache.openDatabase().beginTransaction();
+//	}
+//
+//	public static void endTransaction() {
+//		DbCache.openDatabase().endTransaction();
+//	}
+//
+//	public static void setTransactionSuccessful() {
+//		DbCache.openDatabase().setTransactionSuccessful();
+//	}
+//
+//	public static boolean inTransaction() {
+//		return DbCache.openDatabase().inTransaction();
+//	}
+//
+//	public static void execSQL(String sql) {
+//		DbCache.openDatabase().execSQL(sql);
+//	}
+//
+//	public static void execSQL(String sql, Object[] bindArgs) {
+//		DbCache.openDatabase().execSQL(sql, bindArgs);
+//	}
 }
\ No newline at end of file
diff --git a/src/com/activeandroid/Cache.java b/src/com/activeandroid/Cache.java
deleted file mode 100644
index d4bc8520..00000000
--- a/src/com/activeandroid/Cache.java
+++ /dev/null
@@ -1,147 +0,0 @@
-package com.activeandroid;
-
-/*
- * Copyright (C) 2010 Michael Pardo
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Set;
-
-import android.app.Application;
-import android.content.Context;
-import android.database.sqlite.SQLiteDatabase;
-
-import com.activeandroid.serializer.TypeSerializer;
-import com.activeandroid.util.Log;
-
-public final class Cache {
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PRIVATE MEMBERS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	private static Context sContext;
-
-	private static ModelInfo sModelInfo;
-	private static DatabaseHelper sDatabaseHelper;
-
-	private static Set<Model> sEntities;
-
-	private static boolean sIsInitialized = false;
-
-	//////////////////////////////////////////////////////////////////////////////////////
-	// CONSTRUCTORS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	private Cache() {
-	}
-
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PUBLIC METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	public static synchronized void initialize(Application application) {
-		if (sIsInitialized) {
-			Log.v("ActiveAndroid already initialized.");
-			return;
-		}
-
-		sContext = application;
-
-		sModelInfo = new ModelInfo(application);
-		sDatabaseHelper = new DatabaseHelper(sContext);
-
-		sEntities = new HashSet<Model>();
-
-		openDatabase();
-
-		sIsInitialized = true;
-
-		Log.v("ActiveAndroid initialized succesfully.");
-	}
-
-	public static synchronized void clear() {
-		sEntities = new HashSet<Model>();
-		Log.v("Cache cleared.");
-	}
-
-	public static synchronized void dispose() {
-		sEntities = null;
-		sModelInfo = null;
-		sDatabaseHelper = null;
-
-		closeDatabase();
-
-		sIsInitialized = false;
-
-		Log.v("ActiveAndroid disposed. Call initialize to use library.");
-	}
-
-	// Database access
-
-	public static synchronized SQLiteDatabase openDatabase() {
-		return sDatabaseHelper.getWritableDatabase();
-	}
-
-	public static synchronized void closeDatabase() {
-		sDatabaseHelper.close();
-	}
-
-	// Context access
-
-	public static Context getContext() {
-		return sContext;
-	}
-
-	// Entity cache
-
-	public static synchronized void addEntity(Model entity) {
-		sEntities.add(entity);
-	}
-
-	public static synchronized Model getEntity(Class<? extends Model> type, long id) {
-		for (Model entity : sEntities) {
-			if (entity != null && entity.getClass() != null && entity.getClass() == type && entity.getId() != null
-					&& entity.getId() == id) {
-
-				return entity;
-			}
-		}
-
-		return null;
-	}
-
-	public static synchronized void removeEntity(Model entity) {
-		sEntities.remove(entity);
-	}
-
-	// Model cache
-
-	public static synchronized Collection<TableInfo> getTableInfos() {
-		return sModelInfo.getTableInfos();
-	}
-
-	public static synchronized TableInfo getTableInfo(Class<? extends Model> type) {
-		return sModelInfo.getTableInfo(type);
-	}
-
-	public static synchronized TypeSerializer getParserForType(Class<?> type) {
-		return sModelInfo.getTypeSerializer(type);
-	}
-
-	public static synchronized String getTableName(Class<? extends Model> type) {
-		return sModelInfo.getTableInfo(type).getTableName();
-	}
-}
\ No newline at end of file
diff --git a/src/com/activeandroid/DatabaseHelper.java b/src/com/activeandroid/DatabaseHelper.java
index 1941da1a..4507e10d 100644
--- a/src/com/activeandroid/DatabaseHelper.java
+++ b/src/com/activeandroid/DatabaseHelper.java
@@ -31,9 +31,9 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
 
+import com.activeandroid.app.Application;
 import com.activeandroid.util.Log;
 import com.activeandroid.util.NaturalOrderComparator;
-import com.activeandroid.util.ReflectionUtils;
 import com.activeandroid.util.SQLiteUtils;
 
 public final class DatabaseHelper extends SQLiteOpenHelper {
@@ -41,8 +41,8 @@
 	// PRIVATE CONSTANTS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	private final static String AA_DB_NAME = "AA_DB_NAME";
-	private final static String AA_DB_VERSION = "AA_DB_VERSION";
+	//private final static String AA_DB_NAME = "AA_DB_NAME";
+	//private final static String AA_DB_VERSION = "AA_DB_VERSION";
 
 	private final static String MIGRATION_PATH = "migrations";
 
@@ -50,17 +50,27 @@
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	public DatabaseHelper(Context context) {
-		super(context, getDbName(context), null, getDbVersion(context));
+    private DbCache cache=null;
+
+    //保存context
+    private Context mAppContext=null;
+
+	public DatabaseHelper(Application context,DbMeta dbMeta) {
+		super(context, dbMeta.getDbName(), null, dbMeta.getDbVersion());
+        mDbMeta=dbMeta;
+        cache=new DbCache(context,dbMeta,this);
 		copyAttachedDatabase(context);
 	}
 
+    private DbMeta mDbMeta=null;
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// OVERRIDEN METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
 	@Override
 	public void onCreate(SQLiteDatabase db) {
+
 		if (SQLiteUtils.FOREIGN_KEYS_SUPPORTED) {
 			db.execSQL("PRAGMA foreign_keys=ON;");
 			Log.i("Foreign Keys supported. Enabling foreign key features.");
@@ -68,7 +78,7 @@ public void onCreate(SQLiteDatabase db) {
 
 		db.beginTransaction();
 
-		for (TableInfo tableInfo : Cache.getTableInfos()) {
+		for (TableInfo tableInfo : cache.getTableInfos()) {
 			db.execSQL(SQLiteUtils.createTableDefinition(tableInfo));
 		}
 
@@ -135,7 +145,7 @@ public void copyAttachedDatabase(Context context) {
 	private boolean executeMigrations(SQLiteDatabase db, int oldVersion, int newVersion) {
 		boolean migrationExecuted = false;
 		try {
-			final List<String> files = Arrays.asList(Cache.getContext().getAssets().list(MIGRATION_PATH));
+			final List<String> files = Arrays.asList(mAppContext.getAssets().list(MIGRATION_PATH));
 			Collections.sort(files, new NaturalOrderComparator());
 
 			db.beginTransaction();
@@ -168,7 +178,7 @@ private boolean executeMigrations(SQLiteDatabase db, int oldVersion, int newVers
 
 	private void executeSqlScript(SQLiteDatabase db, String file) {
 		try {
-			final InputStream input = Cache.getContext().getAssets().open(MIGRATION_PATH + "/" + file);
+			final InputStream input = mAppContext.getAssets().open(MIGRATION_PATH + "/" + file);
 			final BufferedReader reader = new BufferedReader(new InputStreamReader(input));
 			String line = null;
 
@@ -183,7 +193,8 @@ private void executeSqlScript(SQLiteDatabase db, String file) {
 
 	// Meta-data methods
 
-	private static String getDbName(Context context) {
+	private  String getDbName(Context context) {
+        /*
 		String aaName = ReflectionUtils.getMetaData(context, AA_DB_NAME);
 
 		if (aaName == null) {
@@ -191,9 +202,13 @@ private static String getDbName(Context context) {
 		}
 
 		return aaName;
+		*/
+        return mDbMeta.getDbName();
 	}
 
-	private static int getDbVersion(Context context) {
+	private  int getDbVersion(Context context) {
+        return mDbMeta.getDbVersion();
+        /*
 		Integer aaVersion = ReflectionUtils.getMetaData(context, AA_DB_VERSION);
 
 		if (aaVersion == null || aaVersion == 0) {
@@ -201,5 +216,6 @@ private static int getDbVersion(Context context) {
 		}
 
 		return aaVersion;
+		*/
 	}
 }
\ No newline at end of file
diff --git a/src/com/activeandroid/DbCache.java b/src/com/activeandroid/DbCache.java
new file mode 100644
index 00000000..b5e9c7dd
--- /dev/null
+++ b/src/com/activeandroid/DbCache.java
@@ -0,0 +1,206 @@
+package com.activeandroid;
+
+/*
+ * Copyright (C) 2010 Michael Pardo
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import java.util.*;
+
+import android.app.Application;
+import android.content.Context;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+
+import com.activeandroid.serializer.TypeSerializer;
+import com.activeandroid.util.Log;
+import com.activeandroid.util.SQLiteUtils;
+
+public final class DbCache {
+	//////////////////////////////////////////////////////////////////////////////////////
+	// PRIVATE MEMBERS
+	//////////////////////////////////////////////////////////////////////////////////////
+
+	private  Context sContext;
+
+	private  ModelInfo sModelInfo;
+	private  DatabaseHelper sDatabaseHelper;
+
+	private  Set<Model> sEntities;
+
+	private  boolean sIsInitialized = false;
+
+    /**
+     *
+     * @return
+     */
+    public static DbCache getDbCacheByType(Class<? extends Model> type){
+        //todo
+         return null;
+    }
+
+    public static void setDbCacheByType(Class<? extends Model> type, DbCache cache){
+         //todo
+    }
+
+
+
+	//////////////////////////////////////////////////////////////////////////////////////
+	// CONSTRUCTORS
+	//////////////////////////////////////////////////////////////////////////////////////
+
+	public DbCache(Application app,DbMeta meta,DatabaseHelper helper) {
+        initialize(app,meta);
+        sDatabaseHelper=helper;
+	}
+
+	//////////////////////////////////////////////////////////////////////////////////////
+	// PUBLIC METHODS
+	//////////////////////////////////////////////////////////////////////////////////////
+
+	public  synchronized void initialize(Application application,DbMeta dbMeta) {
+		if (sIsInitialized) {
+			Log.v("ActiveAndroid already initialized.");
+			return;
+		}
+
+		sContext = application;
+
+		sModelInfo = new ModelInfo(application);
+		//sDatabaseHelper = new DatabaseHelper(sContext);
+
+		sEntities = new HashSet<Model>();
+
+		openDatabase();
+
+		sIsInitialized = true;
+
+		Log.v("ActiveAndroid initialized succesfully.");
+	}
+
+	public  synchronized void clear() {
+		sEntities = new HashSet<Model>();
+		Log.v("DbCache cleared.");
+	}
+
+	public  synchronized void dispose() {
+		sEntities = null;
+		sModelInfo = null;
+		sDatabaseHelper = null;
+
+		closeDatabase();
+
+		sIsInitialized = false;
+
+		Log.v("ActiveAndroid disposed. Call initialize to use library.");
+	}
+
+	// Database access
+
+	public  synchronized SQLiteDatabase openDatabase() {
+		return sDatabaseHelper.getWritableDatabase();
+	}
+
+	public  synchronized void closeDatabase() {
+		sDatabaseHelper.close();
+	}
+
+	// Context access
+
+	public  Context getContext() {
+		return sContext;
+	}
+
+	// Entity cache
+
+	public  synchronized void addEntity(Model entity) {
+		sEntities.add(entity);
+	}
+
+	public  synchronized Model getEntity(Class<? extends Model> type, long id) {
+		for (Model entity : sEntities) {
+			if (entity != null && entity.getClass() != null && entity.getClass() == type && entity.getId() != null
+					&& entity.getId() == id) {
+
+				return entity;
+			}
+		}
+
+		return null;
+	}
+
+	public  synchronized void removeEntity(Model entity) {
+		sEntities.remove(entity);
+	}
+
+	// Model cache
+
+	public  synchronized Collection<TableInfo> getTableInfos() {
+		return sModelInfo.getTableInfos();
+	}
+
+	public  synchronized TableInfo getTableInfo(Class<? extends Model> type) {
+		return sModelInfo.getTableInfo(type);
+	}
+
+    private static Map<Class<?>, TypeSerializer> mTypeSerializers;
+
+    /**
+     * 设置反序列化的类
+     * @param type
+     * @return
+     */
+	public  static  TypeSerializer getParserForType(Class<?> type) {
+		return mTypeSerializers.get(type);
+	}
+
+    /**
+     * 设置序列化的类
+     * @param typeSerializer
+     */
+    public  static  void setParserForType(TypeSerializer typeSerializer){
+        mTypeSerializers.put(typeSerializer.getDeserializedType(), typeSerializer);
+    }
+
+	public  synchronized String getTableName(Class<? extends Model> type) {
+		return sModelInfo.getTableInfo(type).getTableName();
+	}
+
+
+    public  void execSql(String sql) {
+        this.openDatabase().execSQL(sql);
+    }
+
+    public  void execSql(String sql, Object[] bindArgs) {
+        this.openDatabase().execSQL(sql, bindArgs);
+    }
+
+    public  <T extends Model> List<T> rawQuery(Class<? extends Model> type, String sql, String[] selectionArgs) {
+        Cursor cursor = openDatabase().rawQuery(sql, selectionArgs);
+        List<T> entities = SQLiteUtils.processCursor(type, cursor);
+        cursor.close();
+
+        return entities;
+    }
+
+    public  <T extends Model> T rawQuerySingle(Class<? extends Model> type, String sql, String[] selectionArgs) {
+        List<T> entities = rawQuery(type, sql, selectionArgs);
+
+        if (entities.size() > 0) {
+            return entities.get(0);
+        }
+
+        return null;
+    }
+}
\ No newline at end of file
diff --git a/src/com/activeandroid/DbMeta.java b/src/com/activeandroid/DbMeta.java
new file mode 100644
index 00000000..8df46aae
--- /dev/null
+++ b/src/com/activeandroid/DbMeta.java
@@ -0,0 +1,24 @@
+package com.activeandroid;
+
+/**
+ * Created with IntelliJ IDEA.
+ * User: brooksfan
+ * Date: 12-12-26
+ * Time: 下午12:46
+ * To change this template use File | Settings | File Templates.
+ */
+public abstract class DbMeta {
+
+    //获取当前db的版本号
+    abstract public int getDbVersion();
+
+    //获取当前db的名字
+    abstract public String getDbName();
+
+    //获取所有生成db的sql
+    abstract public String[] getCreateDbSql();
+
+    //获取更新sql语句
+    abstract public String[] getUpgradeSqls();
+
+}
diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index e06169f8..8826c125 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -32,6 +32,11 @@
 
 @SuppressWarnings("unchecked")
 public abstract class Model {
+
+
+    private DbCache mDbCache;
+
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PRIVATE MEMBERS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -46,8 +51,9 @@
 	//////////////////////////////////////////////////////////////////////////////////////
 
 	public Model() {
-		mTableInfo = Cache.getTableInfo(getClass());
-		Cache.addEntity(this);
+        mDbCache= DbCache.getDbCacheByType(this.getClass());
+		mTableInfo = mDbCache.getTableInfo(getClass());
+        mDbCache.addEntity(this);
 	}
 
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -59,12 +65,12 @@ public final Long getId() {
 	}
 
 	public final void delete() {
-		Cache.openDatabase().delete(mTableInfo.getTableName(), "Id=?", new String[] { getId().toString() });
-		Cache.removeEntity(this);
+        mDbCache.openDatabase().delete(mTableInfo.getTableName(), "Id=?", new String[] { getId().toString() });
+        mDbCache.removeEntity(this);
 	}
 
 	public final void save() {
-		final SQLiteDatabase db = Cache.openDatabase();
+		final SQLiteDatabase db = mDbCache.openDatabase();
 		final ContentValues values = new ContentValues();
 
 		for (Field field : mTableInfo.getFields()) {
@@ -77,7 +83,7 @@ public final void save() {
 				Object value = field.get(this);
 
 				if (value != null) {
-					final TypeSerializer typeSerializer = Cache.getParserForType(fieldType);
+					final TypeSerializer typeSerializer = mDbCache.getParserForType(fieldType);
 					if (typeSerializer != null) {
 						// serialize data
 						value = typeSerializer.serialize(value);
@@ -174,7 +180,7 @@ public final void loadFromCursor(Class<? extends Model> type, Cursor cursor) {
 
 			try {
 				boolean columnIsNull = cursor.isNull(columnIndex);
-				TypeSerializer typeSerializer = Cache.getParserForType(fieldType);
+				TypeSerializer typeSerializer = mDbCache.getParserForType(fieldType);
 				Object value = null;
 
 				if (typeSerializer != null) {
@@ -220,7 +226,7 @@ else if (ReflectionUtils.isModel(fieldType)) {
 					final long entityId = cursor.getLong(columnIndex);
 					final Class<? extends Model> entityType = (Class<? extends Model>) fieldType;
 
-					Model entity = Cache.getEntity(entityType, entityId);
+					Model entity = mDbCache.getEntity(entityType, entityId);
 					if (entity == null) {
 						entity = new Select().from(entityType).where("Id=?", entityId).executeSingle();
 					}
@@ -255,7 +261,7 @@ else if (ReflectionUtils.isModel(fieldType)) {
 	//////////////////////////////////////////////////////////////////////////////////////
 
 	protected final <E extends Model> List<E> getMany(Class<? extends Model> type, String foreignKey) {
-		return new Select().from(type).where(Cache.getTableName(type) + "." + foreignKey + "=?", getId()).execute();
+		return new Select().from(type).where(mDbCache.getTableName(type) + "." + foreignKey + "=?", getId()).execute();
 	}
 
 	//////////////////////////////////////////////////////////////////////////////////////
diff --git a/src/com/activeandroid/ModelInfo.java b/src/com/activeandroid/ModelInfo.java
index 07900736..6a686348 100644
--- a/src/com/activeandroid/ModelInfo.java
+++ b/src/com/activeandroid/ModelInfo.java
@@ -77,6 +77,7 @@ public TableInfo getTableInfo(Class<? extends Model> type) {
 		return (List<Class<? extends Model>>) mTableInfos.keySet();
 	}
 
+
 	public TypeSerializer getTypeSerializer(Class<?> type) {
 		return mTypeSerializers.get(type);
 	}
diff --git a/src/com/activeandroid/content/ContentProvider.java b/src/com/activeandroid/content/ContentProvider.java
index 12433286..630d2630 100644
--- a/src/com/activeandroid/content/ContentProvider.java
+++ b/src/com/activeandroid/content/ContentProvider.java
@@ -12,10 +12,13 @@
 import android.net.Uri;
 
 import com.activeandroid.ActiveAndroid;
-import com.activeandroid.Cache;
+import com.activeandroid.DbCache;
 import com.activeandroid.Model;
 import com.activeandroid.TableInfo;
 
+/**
+ *  after
+ */
 public class ContentProvider extends android.content.ContentProvider {
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PRIVATE CONSTANTS
@@ -34,11 +37,13 @@
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
+    private DbCache mDbCache=null;
+
 	@Override
 	public boolean onCreate() {
-		ActiveAndroid.initialize((Application) getContext().getApplicationContext());
+		//ActiveAndroid.initialize((Application) getContext().getApplicationContext());
 
-		List<TableInfo> tableInfos = new ArrayList<TableInfo>(Cache.getTableInfos());
+		List<TableInfo> tableInfos = new ArrayList<TableInfo>(mDbCache.getTableInfos());
 		for (int i = 0; i < tableInfos.size(); i++) {
 			TableInfo tableInfo = tableInfos.get(i);
 
@@ -59,7 +64,7 @@ public String getType(Uri uri) {
 	@Override
 	public Uri insert(Uri uri, ContentValues values) {
 		Class<? extends Model> type = getModelType(uri);
-		Long id = Cache.openDatabase().insert(Cache.getTableName(type), null, values);
+		Long id = mDbCache.openDatabase().insert(mDbCache.getTableName(type), null, values);
 
 		if (id != null && id > 0) {
 			Uri retUri = createUri(type, id);
@@ -74,7 +79,7 @@ public Uri insert(Uri uri, ContentValues values) {
 	@Override
 	public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {
 		Class<? extends Model> type = getModelType(uri);
-		int count = Cache.openDatabase().update(Cache.getTableName(type), values, selection, selectionArgs);
+		int count = mDbCache.openDatabase().update(mDbCache.getTableName(type), values, selection, selectionArgs);
 
 		notifyChange(uri);
 
@@ -84,7 +89,7 @@ public int update(Uri uri, ContentValues values, String selection, String[] sele
 	@Override
 	public int delete(Uri uri, String selection, String[] selectionArgs) {
 		Class<? extends Model> type = getModelType(uri);
-		int count = Cache.openDatabase().delete(Cache.getTableName(type), selection, selectionArgs);
+		int count = mDbCache.openDatabase().delete(mDbCache.getTableName(type), selection, selectionArgs);
 
 		notifyChange(uri);
 
@@ -94,7 +99,7 @@ public int delete(Uri uri, String selection, String[] selectionArgs) {
 	@Override
 	public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
 		Class<? extends Model> type = getModelType(uri);
-		return Cache.openDatabase().query(Cache.getTableName(type), projection, selection, selectionArgs, null, null,
+		return mDbCache.openDatabase().query(mDbCache.getTableName(type), projection, selection, selectionArgs, null, null,
 				sortOrder);
 	}
 
@@ -112,7 +117,7 @@ public Cursor query(Uri uri, String[] projection, String selection, String[] sel
 	}
 
 	private Uri createUri(Class<? extends Model> type, Long id) {
-		return Uri.parse("content://" + mAuthority + "/" + Cache.getTableName(type).toLowerCase() + "/" + id);
+		return Uri.parse("content://" + mAuthority + "/" + mDbCache.getTableName(type).toLowerCase() + "/" + id);
 	}
 
 	private void notifyChange(Uri uri) {
diff --git a/src/com/activeandroid/query/From.java b/src/com/activeandroid/query/From.java
index 772cd0a7..641cd0cb 100644
--- a/src/com/activeandroid/query/From.java
+++ b/src/com/activeandroid/query/From.java
@@ -20,7 +20,7 @@
 import java.util.Arrays;
 import java.util.List;
 
-import com.activeandroid.Cache;
+import com.activeandroid.DbCache;
 import com.activeandroid.Model;
 import com.activeandroid.query.Join.JoinType;
 import com.activeandroid.util.SQLiteUtils;
@@ -141,7 +141,7 @@ public String toSql() {
 		String sql = "";
 
 		sql += mQueryBase.toSql();
-		sql += "FROM " + Cache.getTableName(mType) + " ";
+		sql += "FROM " + DbCache.getDbCacheByType(mType).getTableName(mType) + " ";
 
 		if (mAlias != null) {
 			sql += "AS " + mAlias + " ";
@@ -179,22 +179,24 @@ public String toSql() {
 	}
 
 	public <T extends Model> List<T> execute() {
+        DbCache db=DbCache.getDbCacheByType(mType);
 		if (mQueryBase instanceof Select) {
-			return SQLiteUtils.rawQuery(mType, toSql(), getArguments());
+			return db.rawQuery(mType, toSql(), getArguments());
 		}
 		else {
-			SQLiteUtils.execSql(toSql(), getArguments());
+			db.execSql(toSql(), getArguments());
 			return null;
 		}
 	}
 
 	public <T extends Model> T executeSingle() {
+        DbCache db=DbCache.getDbCacheByType(mType);
 		if (mQueryBase instanceof Select) {
 			limit(1);
-			return SQLiteUtils.rawQuerySingle(mType, toSql(), getArguments());
+			return db.rawQuerySingle(mType, toSql(), getArguments());
 		}
 		else {
-			SQLiteUtils.execSql(toSql(), getArguments());
+			db.execSql(toSql(), getArguments());
 			return null;
 		}
 	}
diff --git a/src/com/activeandroid/query/Join.java b/src/com/activeandroid/query/Join.java
index 8d93905d..d7dda562 100644
--- a/src/com/activeandroid/query/Join.java
+++ b/src/com/activeandroid/query/Join.java
@@ -18,7 +18,7 @@
 
 import android.text.TextUtils;
 
-import com.activeandroid.Cache;
+import com.activeandroid.DbCache;
 import com.activeandroid.Model;
 
 public final class Join implements Sqlable {
@@ -68,7 +68,7 @@ public String toSql() {
 			sql += mJoinType.toString() + " ";
 		}
 
-		sql += "JOIN " + Cache.getTableName(mType) + " ";
+		sql += "JOIN " + DbCache.getDbCacheByType(mType).getTableName(mType) + " ";
 
 		if (mAlias != null) {
 			sql += "AS " + mAlias + " ";
diff --git a/src/com/activeandroid/query/Set.java b/src/com/activeandroid/query/Set.java
index 123045ee..03cebd95 100644
--- a/src/com/activeandroid/query/Set.java
+++ b/src/com/activeandroid/query/Set.java
@@ -76,7 +76,7 @@ public String toSql() {
 	}
 
 	public void execute() {
-		SQLiteUtils.execSql(toSql(), getArguments());
+		mUpdate.getDbCache().execSql(toSql(), getArguments());
 	}
 
 	private String[] getArguments() {
diff --git a/src/com/activeandroid/query/Update.java b/src/com/activeandroid/query/Update.java
index 336c4821..ce1693ff 100644
--- a/src/com/activeandroid/query/Update.java
+++ b/src/com/activeandroid/query/Update.java
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-import com.activeandroid.Cache;
+import com.activeandroid.DbCache;
 import com.activeandroid.Model;
 
 public final class Update implements Sqlable {
@@ -38,8 +38,12 @@ public Set set(String set, Object... args) {
 		return mType;
 	}
 
+    public DbCache getDbCache(){
+        return DbCache.getDbCacheByType(mType);
+    }
+
 	@Override
 	public String toSql() {
-		return "UPDATE " + Cache.getTableName(mType) + " ";
+		return "UPDATE " + getDbCache().getTableName(mType) + " ";
 	}
 }
\ No newline at end of file
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index 3cfab100..3a0d6b3e 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -26,7 +26,7 @@
 import android.os.Build;
 import android.text.TextUtils;
 
-import com.activeandroid.Cache;
+import com.activeandroid.DbCache;
 import com.activeandroid.Model;
 import com.activeandroid.TableInfo;
 import com.activeandroid.annotation.Column;
@@ -45,7 +45,8 @@
 	// PUBLIC CONSTANTS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	public static final boolean FOREIGN_KEYS_SUPPORTED = Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO;
+    // Build.VERSION_CODES.FROYO;
+	public static final boolean FOREIGN_KEYS_SUPPORTED = Build.VERSION.SDK_INT >= 8;
 
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PRIVATE CONTSANTS
@@ -80,31 +81,8 @@
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	public static void execSql(String sql) {
-		Cache.openDatabase().execSQL(sql);
-	}
-
-	public static void execSql(String sql, Object[] bindArgs) {
-		Cache.openDatabase().execSQL(sql, bindArgs);
-	}
-
-	public static <T extends Model> List<T> rawQuery(Class<? extends Model> type, String sql, String[] selectionArgs) {
-		Cursor cursor = Cache.openDatabase().rawQuery(sql, selectionArgs);
-		List<T> entities = processCursor(type, cursor);
-		cursor.close();
-
-		return entities;
-	}
 
-	public static <T extends Model> T rawQuerySingle(Class<? extends Model> type, String sql, String[] selectionArgs) {
-		List<T> entities = rawQuery(type, sql, selectionArgs);
 
-		if (entities.size() > 0) {
-			return entities.get(0);
-		}
-
-		return null;
-	}
 
 	// Database creation
 
@@ -127,7 +105,7 @@ public static String createColumnDefinition(TableInfo tableInfo, Field field) {
 
 		Class<?> type = field.getType();
 		final String name = tableInfo.getColumnName(field);
-		final TypeSerializer typeSerializer = Cache.getParserForType(field.getType());
+		final TypeSerializer typeSerializer = DbCache.getParserForType(field.getType());
 		final Column column = field.getAnnotation(Column.class);
 
 		if (typeSerializer != null) {
