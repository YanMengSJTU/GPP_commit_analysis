diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 731ec552..e4cba4cd 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -301,6 +301,11 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
      */
     public <T extends Model> boolean merge(T model) { return true; }
 
+    /**
+     * Function to be subclass when needed. Intended to update the model reference of linked property models.
+     */
+    public void updateReferences() { }
+
 
 	//////////////////////////////////////////////////////////////////////////////////////
 	// OVERRIDEN METHODS
diff --git a/src/com/activeandroid/ModelInfo.java b/src/com/activeandroid/ModelInfo.java
index 35241b7f..26c40de5 100644
--- a/src/com/activeandroid/ModelInfo.java
+++ b/src/com/activeandroid/ModelInfo.java
@@ -31,6 +31,8 @@
 
 import com.activeandroid.serializer.CalendarSerializer;
 import com.activeandroid.serializer.KeyValueSerializer;
+import com.activeandroid.serializer.ListSerializer;
+import com.activeandroid.serializer.MapSerializer;
 import com.activeandroid.serializer.SqlDateSerializer;
 import com.activeandroid.serializer.TypeSerializer;
 import com.activeandroid.serializer.UtilDateSerializer;
@@ -53,6 +55,8 @@
 			put(java.util.Date.class, new UtilDateSerializer());
 			put(java.io.File.class, new FileSerializer());
             put(KeyValueMap.class, new KeyValueSerializer());
+            put(java.util.List.class, new ListSerializer());
+            put(java.util.Map.class, new MapSerializer());
 		}
 	};
 
diff --git a/src/com/activeandroid/serializer/ListSerializer.java b/src/com/activeandroid/serializer/ListSerializer.java
new file mode 100644
index 00000000..807f9c58
--- /dev/null
+++ b/src/com/activeandroid/serializer/ListSerializer.java
@@ -0,0 +1,51 @@
+package com.activeandroid.serializer;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Created by sschlicht on 14.04.14.
+ */
+public class ListSerializer extends TypeSerializer {
+    public Class<?> getDeserializedType() {
+        return List.class;
+    }
+
+    public Class<?> getSerializedType() {
+        return byte[].class;
+    }
+
+    public byte[] serialize(Object data) {
+        if (data == null) {
+            return null;
+        }
+
+        try {
+            ByteArrayOutputStream out = new ByteArrayOutputStream();
+            ObjectOutputStream os = new ObjectOutputStream(out);
+            os.writeObject(data);
+
+            return out.toByteArray();
+        } finally {
+            return null;
+        }
+    }
+
+    public List<?> deserialize(Object data) {
+        if (data == null) {
+            return null;
+        }
+
+        try {
+            ByteArrayInputStream in = new ByteArrayInputStream((byte[]) data);
+            ObjectInputStream is = new ObjectInputStream(in);
+            return (List<?>)is.readObject();
+        } finally {
+            return null;
+        }
+    }
+}
diff --git a/src/com/activeandroid/serializer/MapSerializer.java b/src/com/activeandroid/serializer/MapSerializer.java
new file mode 100644
index 00000000..d187290a
--- /dev/null
+++ b/src/com/activeandroid/serializer/MapSerializer.java
@@ -0,0 +1,50 @@
+package com.activeandroid.serializer;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.util.Map;
+
+/**
+ * Created by sschlicht on 14.04.14.
+ */
+public class MapSerializer extends TypeSerializer {
+    public Class<?> getDeserializedType() {
+        return Map.class;
+    }
+
+    public Class<?> getSerializedType() {
+        return byte[].class;
+    }
+
+    public byte[] serialize(Object data) {
+        if (data == null) {
+            return null;
+        }
+
+        try {
+            ByteArrayOutputStream out = new ByteArrayOutputStream();
+            ObjectOutputStream os = new ObjectOutputStream(out);
+            os.writeObject(data);
+
+            return out.toByteArray();
+        } finally {
+            return null;
+        }
+    }
+
+    public Map<?,?> deserialize(Object data) {
+        if (data == null) {
+            return null;
+        }
+
+        try {
+            ByteArrayInputStream in = new ByteArrayInputStream((byte[]) data);
+            ObjectInputStream is = new ObjectInputStream(in);
+            return (Map<?,?>)is.readObject();
+        } finally {
+            return null;
+        }
+    }
+}
diff --git a/src/com/activeandroid/util/KeyValueMap.java b/src/com/activeandroid/util/KeyValueMap.java
index 12bdea3e..f3ee4719 100644
--- a/src/com/activeandroid/util/KeyValueMap.java
+++ b/src/com/activeandroid/util/KeyValueMap.java
@@ -1,12 +1,13 @@
 package com.activeandroid.util;
 
+import java.io.Serializable;
 import java.util.HashMap;
 import java.util.Map;
 
 /**
  * Created by sschlicht on 10.04.14.
  */
-public class KeyValueMap<K,V> {
+public class KeyValueMap<K,V> implements Serializable {
     private Map<K, V> map =
             new HashMap<K, V>();
 
