diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 2d618e97..cf4ec56d 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -41,7 +41,7 @@
 	@Column(name = "id")
 	private Long mId = null;
 
-	private TableInfo mTableInfo;
+	private static TableInfo mTableInfo;
 
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
@@ -62,13 +62,12 @@ public final Long getId() {
             return mId;
 	}
 
-    public final void setId(Long id) {
-        if(mId == null)
-            this.mId = id;
+    private final void setId(Long id) {
+        this.mId = id;
     }
 
 	public final void delete() {
-		Cache.openDatabase().delete(mTableInfo.getTableName(), "id=?", new String[] { getId().toString() });
+		Cache.openDatabase().delete(mTableInfo.getTableName(), mTableInfo.getPrimarykey().getName()+"=?", new String[] { getId().toString() });
 		Cache.removeEntity(this);
 
 		Cache.getContext().getContentResolver()
@@ -76,14 +75,19 @@ public final void delete() {
 	}
 
 	public void save() {
+
 		final SQLiteDatabase db = Cache.openDatabase();
 		final ContentValues values = new ContentValues();
 
-		for (Field field : mTableInfo.getFields()) {
+        TableInfo tableInfo = Cache.getTableInfo(getClass());
 
-            if (mTableInfo.isRestrictForManualUpdate(field)) continue;
+        Field primaryField = tableInfo.getPrimarykey();
 
-			final String fieldName = mTableInfo.getColumnName(field);
+		for (Field field : tableInfo.getFields()) {
+
+            if (tableInfo.isRestrictForManualUpdate(field)) continue;
+
+			final String fieldName = tableInfo.getColumnName(field);
 			Class<?> fieldType = field.getType();
 
 			field.setAccessible(true);
@@ -91,6 +95,7 @@ public void save() {
 			try {
 				Object value = field.get(this);
 
+
 				if (value != null) {
 					final TypeSerializer typeSerializer = Cache.getParserForType(fieldType);
 					if (typeSerializer != null) {
@@ -124,6 +129,9 @@ else if (fieldType.equals(Integer.class) || fieldType.equals(int.class)) {
 				}
 				else if (fieldType.equals(Long.class) || fieldType.equals(long.class)) {
 					values.put(fieldName, (Long) value);
+                    if (primaryField.getType().equals(fieldType) && primaryField.getName().equals(fieldName)){
+                        setId((Long) value);
+                    }
 				}
 				else if (fieldType.equals(Float.class) || fieldType.equals(float.class)) {
 					values.put(fieldName, (Float) value);
@@ -144,6 +152,7 @@ else if (fieldType.equals(Byte[].class) || fieldType.equals(byte[].class)) {
 					values.put(fieldName, (byte[]) value);
 				}
 				else if (ReflectionUtils.isModel(fieldType)) {
+                    if (((Model) value).getId() == 0L) ((Model) value).save();
 					values.put(fieldName, ((Model) value).getId());
 				}
 				else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
@@ -160,26 +169,26 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 
         try {
             if(mId == null)
-                mId = db.insert(mTableInfo.getTableName(), null, values);
+                mId = db.insert(tableInfo.getTableName(), null, values);
             else
-                db.insertOrThrow(mTableInfo.getTableName(), null, values);
+                db.insertOrThrow(tableInfo.getTableName(), null, values);
         }
         catch(SQLiteConstraintException e) {
-            db.update(mTableInfo.getTableName(), values, "id="+mId, null);
+            db.update(tableInfo.getTableName(), values, tableInfo.getPrimarykey().getName()+"="+mId, null);
         }
 
 		Cache.getContext().getContentResolver()
-				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mId), null);
+				.notifyChange(ContentProvider.createUri(tableInfo.getType(), mId), null);
 	}
 
 	// Convenience methods
 
 	public static void delete(Class<? extends Model> type, long id) {
-		new Delete().from(type).where("id=?", id).execute();
+		new Delete().from(type).where(TableInfo.getIdColumnName(type)+"=?", id).execute();
 	}
 
 	public static <T extends Model> T load(Class<T> type, long id) {
-		return new Select().from(type).where("id=?", id).executeSingle();
+		return new Select().from(type).where(TableInfo.getIdColumnName(type)+"=?", id).executeSingle();
 	}
 
 	// Model population
@@ -194,6 +203,8 @@ public final void loadFromCursor(Cursor cursor) {
 				continue;
 			}
 
+
+
 			field.setAccessible(true);
 
 			try {
@@ -201,6 +212,8 @@ public final void loadFromCursor(Cursor cursor) {
 				TypeSerializer typeSerializer = Cache.getParserForType(fieldType);
 				Object value = null;
 
+
+
 				if (typeSerializer != null) {
 					fieldType = typeSerializer.getSerializedType();
 				}
@@ -221,6 +234,9 @@ else if (fieldType.equals(Integer.class) || fieldType.equals(int.class)) {
 				}
 				else if (fieldType.equals(Long.class) || fieldType.equals(long.class)) {
 					value = cursor.getLong(columnIndex);
+                    if (mTableInfo.getPrimarykey().getName().equals(field.getName())){
+                        mId = (Long)value;
+                    }
 				}
 				else if (fieldType.equals(Float.class) || fieldType.equals(float.class)) {
 					value = cursor.getFloat(columnIndex);
@@ -246,7 +262,7 @@ else if (ReflectionUtils.isModel(fieldType)) {
 
 					Model entity = Cache.getEntity(entityType, entityId);
 					if (entity == null) {
-						entity = new Select().from(entityType).where("id=?", entityId).executeSingle();
+						entity = new Select().from(entityType).where(TableInfo.getIdColumnName(entityType)+"=?", entityId).executeSingle();
 					}
 
 					value = entity;
@@ -267,13 +283,7 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 					field.set(this, value);
 				}
 			}
-			catch (IllegalArgumentException e) {
-				Log.e(e.getClass().getName(), e);
-			}
-			catch (IllegalAccessException e) {
-				Log.e(e.getClass().getName(), e);
-			}
-			catch (SecurityException e) {
+			catch (Exception e) {
 				Log.e(e.getClass().getName(), e);
 			}
 		}
diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index 20c52be6..bc32ee31 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -36,6 +36,7 @@
 
 	private Class<? extends Model> mType;
 	private String mTableName;
+    private Field mPrimarykey;
 
 	private Map<Field, String> mColumnNames = new HashMap<Field, String>();
 
@@ -55,7 +56,8 @@ public TableInfo(Class<? extends Model> type) {
 		}
 
 		List<Field> fields = new ArrayList<Field>(Arrays.asList(type.getDeclaredFields()));
-		fields.add(getIdField(type));
+        mPrimarykey = getIdField(type);
+		fields.add(mPrimarykey);
 
 		for (Field field : fields) {
 			if (field.isAnnotationPresent(Column.class)) {
@@ -89,11 +91,26 @@ public boolean isRestrictForManualUpdate(Field field){
         return field.isAnnotationPresent(IgnoreAutoSave.class);
     }
 
+    public Field getPrimarykey(){
+        return mPrimarykey;
+    }
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PRIVATE METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	private Field getIdField(Class<?> type) {
+    public static String getIdColumnName(Class<?> type){
+        Field field = getIdField(type);
+
+        if (field.isAnnotationPresent(Column.class)) {
+            final Column columnAnnotation = field.getAnnotation(Column.class);
+            return columnAnnotation.name();
+        }
+        return null;
+    }
+
+	private static Field getIdField(Class<?> type) {
+
 		if (type.equals(Model.class)) {
 			try {
 				return type.getDeclaredField("mId");
@@ -103,6 +120,15 @@ private Field getIdField(Class<?> type) {
 			}
 		}
 		else if (type.getSuperclass() != null) {
+
+            List<Field> fields = new ArrayList<Field>(Arrays.asList(type.getDeclaredFields()));
+            for (Field field : fields) {
+                if (field.isAnnotationPresent(Column.class)) {
+                    Column columnAnnotation = field.getAnnotation(Column.class);
+                    if (columnAnnotation.isPrimary())   return field;
+                }
+            }
+
 			return getIdField(type.getSuperclass());
 		}
 
diff --git a/src/com/activeandroid/annotation/Column.java b/src/com/activeandroid/annotation/Column.java
index 209b4367..2e4e55b2 100644
--- a/src/com/activeandroid/annotation/Column.java
+++ b/src/com/activeandroid/annotation/Column.java
@@ -16,6 +16,7 @@
  * limitations under the License.
  */
 
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -38,6 +39,8 @@
 
 	public boolean notNull() default false;
 
+    public boolean isPrimary() default false;
+
     public boolean isAutoIncrement() default false;
 
 	public ConflictAction onNullConflict() default ConflictAction.FAIL;
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index a6a374a6..f5ee0d2c 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -90,7 +90,13 @@ public static void execSql(String sql, Object[] bindArgs) {
 	}
 
 	public static <T extends Model> List<T> rawQuery(Class<? extends Model> type, String sql, String[] selectionArgs) {
-		Cursor cursor = Cache.openDatabase().rawQuery(sql, selectionArgs);
+        Cursor cursor = null;
+        try{
+            cursor = Cache.openDatabase().rawQuery(sql, selectionArgs);
+        } catch (Exception e){
+            e.printStackTrace();
+        }
+
 		List<T> entities = processCursor(type, cursor);
 		cursor.close();
 
@@ -159,7 +165,7 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 				definition.append(")");
 			}
 
-			if (name.equals("id")) {
+			if (name.equals(tableInfo.getPrimarykey().getName())) {
 				definition.append(" PRIMARY KEY ");
 			}
 
@@ -203,7 +209,8 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 
 			if (cursor.moveToFirst()) {
 				do {
-					Model entity = Cache.getEntity(type, cursor.getLong(cursor.getColumnIndex("id")));
+                    String col = TableInfo.getIdColumnName(type);
+					Model entity = Cache.getEntity(type, cursor.getLong(cursor.getColumnIndex(col)));
 					if (entity == null) {
 						entity = (T) entityConstructor.newInstance();
 					}
@@ -217,6 +224,7 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 		}
 		catch (Exception e) {
 			Log.e("Failed to process cursor.", e);
+            e.printStackTrace();
 		}
 
 		return entities;
