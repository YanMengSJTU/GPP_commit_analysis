diff --git a/src/com/activeandroid/DBManager.java b/src/com/activeandroid/DBManager.java
index 4cca0206..0ba06cd7 100644
--- a/src/com/activeandroid/DBManager.java
+++ b/src/com/activeandroid/DBManager.java
@@ -324,15 +324,10 @@ public void run() {
     public boolean fetchObject(final Object uid, final ObjectReceiver<OBJECT_CLASS> objectReceiver){
         OBJECT_CLASS object = getObjectById(uid);
         if(object==null){
-            processOnBackground(new DBRequest(DBRequest.PRIORITY_HIGH, "fetch") {
+            processOnForeground(new Runnable() {
                 @Override
                 public void run() {
-                    processOnForeground(new Runnable() {
-                        @Override
-                        public void run() {
-                            requestObject(uid, objectReceiver);
-                        }
-                    });
+                    requestObject(uid, objectReceiver);
                 }
             });
             return false;
@@ -348,4 +343,8 @@ public void run() {
      * @param objectReceiver
      */
     public abstract void requestObject(final Object uid, final ObjectReceiver<OBJECT_CLASS> objectReceiver);
+
+    public Class<OBJECT_CLASS> getObjectClass() {
+        return mObjectClass;
+    }
 }
diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 51b29e84..f68c7363 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -175,6 +175,16 @@ public boolean exists(){
         return model!=null;
     }
 
+    /**
+     * Checks to see if object exists, if so, deletes it then updates itself
+     */
+    public <OBJECT_CLASS extends Model> void saveById(){
+        if(exists()){
+            delete();
+        }
+        save();
+    }
+
 	// Convenience methods
 
 	public static void delete(Class<? extends Model> type, long id) {
@@ -279,9 +289,13 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 	// PROTECTED METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	protected final <T extends Model> List<T> getMany(Class<T> type, String foreignKey) {
-		return new Select().from(type).where(Cache.getTableName(type) + "." + foreignKey + "=?", getId()).execute();
-	}
+    protected final <T extends Model> List<T> getManyFromField(Class<T> type,Object field, String foreignKey){
+        return new Select().from(type).where(Cache.getTableName(type) + "." + foreignKey + "=?", field).execute();
+    }
+
+    protected final <T extends Model> List<T> getManyFromFieldWithSort(Class<T> type,Object field, String foreignKey, String sort){
+        return new Select().from(type).orderBy(sort).where(Cache.getTableName(type) + "." + foreignKey + "=?", field).execute();
+    }
 
 	//////////////////////////////////////////////////////////////////////////////////////
 	// OVERRIDEN METHODS
diff --git a/src/com/activeandroid/widget/AbstractManagerAdapter.java b/src/com/activeandroid/widget/AbstractManagerAdapter.java
new file mode 100644
index 00000000..99eb5ef4
--- /dev/null
+++ b/src/com/activeandroid/widget/AbstractManagerAdapter.java
@@ -0,0 +1,63 @@
+package com.activeandroid.widget;
+
+import android.database.Cursor;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+
+import com.activeandroid.Cache;
+import com.activeandroid.DBManager;
+import com.activeandroid.Model;
+import com.activeandroid.query.From;
+import com.activeandroid.receiver.CollectionReceiver;
+import com.activeandroid.util.Log;
+
+import java.util.List;
+
+/**
+ * Created by andrewgrosner
+ * Date: 12/14/13
+ * Contributors:
+ * Description: Provides simple, type-safe implementation in an adapter, fetching objects from the DBManager
+ */
+public abstract class AbstractManagerAdapter<OBJECT_CLASS extends Model> extends BaseAdapter {
+
+    protected List<OBJECT_CLASS> mObjects;
+
+    private CollectionReceiver<OBJECT_CLASS> mReceiver = new CollectionReceiver<OBJECT_CLASS>() {
+        @Override
+        public void onCollectionReceived(List<OBJECT_CLASS> object) {
+            setData(object);
+        }
+    };
+
+    public AbstractManagerAdapter(DBManager<OBJECT_CLASS> manager){
+        super();
+        manager.fetchAll(mReceiver);
+    }
+
+    public AbstractManagerAdapter(DBManager<OBJECT_CLASS> manager, String sort){
+        super();
+        manager.fetchAllWithSort(sort, mReceiver);
+    }
+
+    public AbstractManagerAdapter(DBManager<OBJECT_CLASS> manager, Object value, String column){
+        super();
+        manager.fetchAllWithColumnValue(value, column, mReceiver);
+    }
+
+    public void setData(List<OBJECT_CLASS> objects){
+        mObjects = objects;
+        notifyDataSetChanged();
+    }
+
+    @Override
+    public int getCount() {
+        return mObjects==null? 0: mObjects.size();
+    }
+
+    @Override
+    public OBJECT_CLASS getItem(int i) {
+        return mObjects==null? null : mObjects.get(i);
+    }
+}
