diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 0fb18a2f..38e36c47 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -157,12 +157,10 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 
         Long id = getId();
 		if (id == null) {
-			db.insertWithOnConflict(mTableInfo.getTableName(), null, values, SQLiteDatabase.CONFLICT_REPLACE);
-            id = db.insert(mTableInfo.getTableName(), null, values);
+			id = db.insert(mTableInfo.getTableName(), null, values);
             setId(id);
-		}
-		else {
-			db.update(mTableInfo.getTableName(), values, idName+"=" + id, null);
+		} else {
+			db.insertWithOnConflict(mTableInfo.getTableName(), null, values, SQLiteDatabase.CONFLICT_REPLACE);
 		}
 
 		Cache.getContext().getContentResolver()
diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index 32d1ecb3..e5f6d5e3 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -16,6 +16,13 @@
  * limitations under the License.
  */
 
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.activeandroid.annotation.Column;
+import com.activeandroid.annotation.Table;
+import com.activeandroid.util.ReflectionUtils;
+
 import java.lang.reflect.Field;
 import java.util.Collection;
 import java.util.Collections;
@@ -24,44 +31,36 @@
 import java.util.List;
 import java.util.Map;
 
-import android.text.TextUtils;
-import android.util.Log;
-
-import com.activeandroid.annotation.Column;
-import com.activeandroid.annotation.Table;
-import com.activeandroid.util.ReflectionUtils;
-
 public final class TableInfo {
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PRIVATE MEMBERS
-	//////////////////////////////////////////////////////////////////////////////////////
+    //////////////////////////////////////////////////////////////////////////////////////
+    // PRIVATE MEMBERS
+    //////////////////////////////////////////////////////////////////////////////////////
 
-	private Class<? extends Model> mType;
-	private String mTableName;
-	private String mIdName = Table.DEFAULT_ID_NAME;
+    private Class<? extends Model> mType;
+    private String mTableName;
+    private String mIdName = Table.DEFAULT_ID_NAME;
 
-	private Map<Field, String> mColumnNames = new LinkedHashMap<Field, String>();
+    private Map<Field, String> mColumnNames = new LinkedHashMap<Field, String>();
 
-	//////////////////////////////////////////////////////////////////////////////////////
-	// CONSTRUCTORS
-	//////////////////////////////////////////////////////////////////////////////////////
+    //////////////////////////////////////////////////////////////////////////////////////
+    // CONSTRUCTORS
+    //////////////////////////////////////////////////////////////////////////////////////
 
-	public TableInfo(Class<? extends Model> type) {
-		mType = type;
+    public TableInfo(Class<? extends Model> type) {
+        mType = type;
 
-		final Table tableAnnotation = type.getAnnotation(Table.class);
+        final Table tableAnnotation = type.getAnnotation(Table.class);
 
         if (tableAnnotation != null) {
-			mTableName = tableAnnotation.name();
-			mIdName = tableAnnotation.id();
-		}
-		else {
-			mTableName = type.getSimpleName();
+            mTableName = tableAnnotation.name();
+            mIdName = tableAnnotation.id();
+        } else {
+            mTableName = type.getSimpleName();
         }
 
         // Manually add the id column since it is not declared like the other columns.
-        Field idField = getIdField(type);
-        mColumnNames.put(idField, mIdName);
+//        Field idField = getIdField(type);
+//        mColumnNames.put(idField, mIdName);
 
         List<Field> fields = new LinkedList<Field>(ReflectionUtils.getDeclaredColumnFields(type));
         Collections.reverse(fields);
@@ -78,43 +77,41 @@ public TableInfo(Class<? extends Model> type) {
             }
         }
 
-	}
+    }
 
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PUBLIC METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
+    //////////////////////////////////////////////////////////////////////////////////////
+    // PUBLIC METHODS
+    //////////////////////////////////////////////////////////////////////////////////////
 
-	public Class<? extends Model> getType() {
-		return mType;
-	}
+    public Class<? extends Model> getType() {
+        return mType;
+    }
 
-	public String getTableName() {
-		return mTableName;
-	}
+    public String getTableName() {
+        return mTableName;
+    }
 
-	public String getIdName() {
-		return mIdName;
-	}
+    public String getIdName() {
+        return mIdName;
+    }
 
-	public Collection<Field> getFields() {
-		return mColumnNames.keySet();
-	}
+    public Collection<Field> getFields() {
+        return mColumnNames.keySet();
+    }
 
-	public String getColumnName(Field field) {
-		return mColumnNames.get(field);
-	}
+    public String getColumnName(Field field) {
+        return mColumnNames.get(field);
+    }
 
 
     private Field getIdField(Class<?> type) {
         if (type.equals(Model.class)) {
             try {
                 return type.getDeclaredField("mId");
-            }
-            catch (NoSuchFieldException e) {
+            } catch (NoSuchFieldException e) {
                 Log.e("Impossible!", e.toString());
             }
-        }
-        else if (type.getSuperclass() != null) {
+        } else if (type.getSuperclass() != null) {
             return getIdField(type.getSuperclass());
         }
 
