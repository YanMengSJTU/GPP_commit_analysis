diff --git a/src/com/activeandroid/Cache.java b/src/com/activeandroid/Cache.java
index abb5e8ac..fe149ed2 100644
--- a/src/com/activeandroid/Cache.java
+++ b/src/com/activeandroid/Cache.java
@@ -44,8 +44,9 @@
 	private static LruCache<String, Model> sEntities;
 
 	private static boolean sIsInitialized = false;
+    private static boolean sScannedForModelInfo;
 
-	//////////////////////////////////////////////////////////////////////////////////////
+    //////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
 
@@ -63,7 +64,8 @@ public static synchronized void initialize(Configuration configuration) {
 		}
 
 		sContext = configuration.getContext();
-		sModelInfo = new ModelInfo(configuration);
+        scanForModelInfo(configuration);
+
 		sDatabaseHelper = new DatabaseHelper(configuration);
 
 		// TODO: It would be nice to override sizeOf here and calculate the memory
@@ -79,7 +81,21 @@ public static synchronized void initialize(Configuration configuration) {
 		Log.v("ActiveAndroid initialized successfully.");
 	}
 
-	public static synchronized void clear() {
+    private static void scanForModelInfo(Configuration configuration) {
+        if(!sScannedForModelInfo) {
+            sModelInfo = new ModelInfo(configuration);
+            sScannedForModelInfo =  true;
+        }
+    }
+
+    public static void scanForModelInfo(Context context) {
+        if(!sScannedForModelInfo) {
+            sModelInfo = new ModelInfo(context);
+            sScannedForModelInfo =  true;
+        }
+    }
+
+    public static synchronized void clear() {
 		sEntities.evictAll();
 		Log.v("Cache cleared.");
 	}
diff --git a/src/com/activeandroid/ModelInfo.java b/src/com/activeandroid/ModelInfo.java
index fb71b8f8..94d99069 100644
--- a/src/com/activeandroid/ModelInfo.java
+++ b/src/com/activeandroid/ModelInfo.java
@@ -96,16 +96,19 @@
 
 	public ModelInfo(Configuration configuration) {
 		if (!loadModelFromMetaData(configuration)) {
-			try {
-				scanForModel(configuration.getContext());
-			}
-			catch (IOException e) {
-				Log.e("Couldn't open source path.", e);
-			}
+            loadFromContext(configuration.getContext());
 		}
 
 		Log.i("ModelInfo loaded.");
-	}
+
+    }
+
+
+
+    public ModelInfo(Context context){
+        loadFromContext(context);
+        Log.i("ModelInfo loaded.");
+    }
 
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC METHODS
@@ -129,6 +132,13 @@ public SqlTypeSerializer getSQLTypeSerializer(Class<?> type) {
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PRIVATE METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
+    private void loadFromContext(Context context) {
+        try {
+            scanForModel(context);
+        } catch (IOException e) {
+            Log.e("Couldn't open source path.", e);
+        }
+    }
 
 	private boolean loadModelFromMetaData(Configuration configuration) {
 		if (!configuration.isValid()) {
diff --git a/src/com/activeandroid/content/ContentProvider.java b/src/com/activeandroid/content/ContentProvider.java
index b4a841d6..6927db25 100644
--- a/src/com/activeandroid/content/ContentProvider.java
+++ b/src/com/activeandroid/content/ContentProvider.java
@@ -1,8 +1,5 @@
 package com.activeandroid.content;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import android.content.ContentValues;
 import android.content.UriMatcher;
 import android.database.Cursor;
@@ -15,178 +12,182 @@
 import com.activeandroid.Model;
 import com.activeandroid.TableInfo;
 
+import java.util.ArrayList;
+import java.util.List;
+
 public class ContentProvider extends android.content.ContentProvider {
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PRIVATE CONSTANTS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	private static final UriMatcher URI_MATCHER = new UriMatcher(UriMatcher.NO_MATCH);
-	private static final SparseArray<Class<? extends Model>> TYPE_CODES = new SparseArray<Class<? extends Model>>();
+    //////////////////////////////////////////////////////////////////////////////////////
+    // PRIVATE CONSTANTS
+    //////////////////////////////////////////////////////////////////////////////////////
+
+    private static final UriMatcher URI_MATCHER = new UriMatcher(UriMatcher.NO_MATCH);
+    private static final SparseArray<Class<? extends Model>> TYPE_CODES = new SparseArray<Class<? extends Model>>();
+
+    //////////////////////////////////////////////////////////////////////////////////////
+    // PRIVATE MEMBERS
+    //////////////////////////////////////////////////////////////////////////////////////
+
+    private static String sAuthority;
+    private static SparseArray<String> sMimeTypeCache = new SparseArray<String>();
 
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PRIVATE MEMBERS
-	//////////////////////////////////////////////////////////////////////////////////////
+    //////////////////////////////////////////////////////////////////////////////////////
+    // PUBLIC METHODS
+    //////////////////////////////////////////////////////////////////////////////////////
+
+    @Override
+    public boolean onCreate() {
+        ActiveAndroid.initialize(getConfiguration());
+
+        sAuthority = getAuthority();
+
+        final List<TableInfo> tableInfos = new ArrayList<TableInfo>(Cache.getTableInfos());
+        final int size = tableInfos.size();
+        for (int i = 0; i < size; i++) {
+            final TableInfo tableInfo = tableInfos.get(i);
+            final int tableKey = (i * 2) + 1;
+            final int itemKey = (i * 2) + 2;
 
-	private static String sAuthority;
-	private static SparseArray<String> sMimeTypeCache = new SparseArray<String>();
-
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PUBLIC METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	@Override
-	public boolean onCreate() {
-		ActiveAndroid.initialize(getConfiguration());
-		sAuthority = getAuthority();
-
-		final List<TableInfo> tableInfos = new ArrayList<TableInfo>(Cache.getTableInfos());
-		final int size = tableInfos.size();
-		for (int i = 0; i < size; i++) {
-			final TableInfo tableInfo = tableInfos.get(i);
-			final int tableKey = (i * 2) + 1;
-			final int itemKey = (i * 2) + 2;
-
-			// content://<authority>/<table>
-			URI_MATCHER.addURI(sAuthority, tableInfo.getTableName().toLowerCase(), tableKey);
-			TYPE_CODES.put(tableKey, tableInfo.getType());
-
-			// content://<authority>/<table>/<id>
-			URI_MATCHER.addURI(sAuthority, tableInfo.getTableName().toLowerCase() + "/#", itemKey);
-			TYPE_CODES.put(itemKey, tableInfo.getType());
-		}
-
-		return true;
-	}
-
-	@Override
-	public String getType(Uri uri) {
-		final int match = URI_MATCHER.match(uri);
-
-		String cachedMimeType = sMimeTypeCache.get(match);
-		if (cachedMimeType != null) {
-			return cachedMimeType;
-		}
-
-		final Class<? extends Model> type = getModelType(uri);
-		final boolean single = ((match % 2) == 0);
-
-		StringBuilder mimeType = new StringBuilder();
-		mimeType.append("vnd");
-		mimeType.append(".");
-		mimeType.append(sAuthority);
-		mimeType.append(".");
-		mimeType.append(single ? "item" : "dir");
-		mimeType.append("/");
-		mimeType.append("vnd");
-		mimeType.append(".");
-		mimeType.append(sAuthority);
-		mimeType.append(".");
-		mimeType.append(Cache.getTableName(type));
-
-		sMimeTypeCache.append(match, mimeType.toString());
-
-		return mimeType.toString();
-	}
-
-	// SQLite methods
-
-	@Override
-	public Uri insert(Uri uri, ContentValues values) {
-		final Class<? extends Model> type = getModelType(uri);
-		final Long id = Cache.openDatabase().insert(Cache.getTableName(type), null, values);
-
-		if (id != null && id > 0) {
-			Uri retUri = createUri(type, id);
-			notifyChange(retUri);
-
-			return retUri;
-		}
-
-		return null;
-	}
-
-	@Override
-	public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {
-		final Class<? extends Model> type = getModelType(uri);
-		final int count = Cache.openDatabase().update(Cache.getTableName(type), values, selection, selectionArgs);
-
-		notifyChange(uri);
-
-		return count;
-	}
-
-	@Override
-	public int delete(Uri uri, String selection, String[] selectionArgs) {
-		final Class<? extends Model> type = getModelType(uri);
-		final int count = Cache.openDatabase().delete(Cache.getTableName(type), selection, selectionArgs);
-
-		notifyChange(uri);
-
-		return count;
-	}
-
-	@Override
-	public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
-		final Class<? extends Model> type = getModelType(uri);
-		final Cursor cursor = Cache.openDatabase().query(
-				Cache.getTableName(type),
-				projection,
-				selection,
-				selectionArgs,
-				null,
-				null,
-				sortOrder);
-
-		cursor.setNotificationUri(getContext().getContentResolver(), uri);
-
-		return cursor;
-	}
-
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PUBLIC METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	public static Uri createUri(Class<? extends Model> type, Long id) {
-		final StringBuilder uri = new StringBuilder();
-		uri.append("content://");
-		uri.append(sAuthority);
-		uri.append("/");
-		uri.append(Cache.getTableName(type).toLowerCase());
-
-		if (id != null) {
-			uri.append("/");
-			uri.append(id.toString());
-		}
-
-		return Uri.parse(uri.toString());
-	}
-
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PROTECTED METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	protected String getAuthority() {
-		return getContext().getPackageName();
-	}
-
-	protected Configuration getConfiguration() {
-		return new Configuration.Builder(getContext()).create();
-	}
-
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PRIVATE METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	private Class<? extends Model> getModelType(Uri uri) {
-		final int code = URI_MATCHER.match(uri);
-		if (code != UriMatcher.NO_MATCH) {
-			return TYPE_CODES.get(code);
-		}
+            // content://<authority>/<table>
+            URI_MATCHER.addURI(sAuthority, tableInfo.getTableName().toLowerCase(), tableKey);
+            TYPE_CODES.put(tableKey, tableInfo.getType());
+
+            // content://<authority>/<table>/<id>
+            URI_MATCHER.addURI(sAuthority, tableInfo.getTableName().toLowerCase() + "/#", itemKey);
+            TYPE_CODES.put(itemKey, tableInfo.getType());
+        }
+
+        return true;
+    }
+
+    @Override
+    public String getType(Uri uri) {
+        final int match = URI_MATCHER.match(uri);
+
+        String cachedMimeType = sMimeTypeCache.get(match);
+        if (cachedMimeType != null) {
+            return cachedMimeType;
+        }
+
+        final Class<? extends Model> type = getModelType(uri);
+        final boolean single = ((match % 2) == 0);
+
+        StringBuilder mimeType = new StringBuilder();
+        mimeType.append("vnd");
+        mimeType.append(".");
+        mimeType.append(sAuthority);
+        mimeType.append(".");
+        mimeType.append(single ? "item" : "dir");
+        mimeType.append("/");
+        mimeType.append("vnd");
+        mimeType.append(".");
+        mimeType.append(sAuthority);
+        mimeType.append(".");
+        mimeType.append(Cache.getTableName(type));
+
+        sMimeTypeCache.append(match, mimeType.toString());
+
+        return mimeType.toString();
+    }
+
+    // SQLite methods
+
+    @Override
+    public Uri insert(Uri uri, ContentValues values) {
+        final Class<? extends Model> type = getModelType(uri);
+        final Long id = Cache.openDatabase().insert(Cache.getTableName(type), null, values);
+
+        if (id != null && id > 0) {
+            Uri retUri = createUri(type, id);
+            notifyChange(retUri);
+
+            return retUri;
+        }
+
+        return null;
+    }
+
+    @Override
+    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {
+        final Class<? extends Model> type = getModelType(uri);
+        final int count = Cache.openDatabase().update(Cache.getTableName(type), values, selection, selectionArgs);
+
+        notifyChange(uri);
+
+        return count;
+    }
+
+    @Override
+    public int delete(Uri uri, String selection, String[] selectionArgs) {
+        final Class<? extends Model> type = getModelType(uri);
+        final int count = Cache.openDatabase().delete(Cache.getTableName(type), selection, selectionArgs);
+
+        notifyChange(uri);
+
+        return count;
+    }
+
+    @Override
+    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
+        final Class<? extends Model> type = getModelType(uri);
+        final Cursor cursor = Cache.openDatabase().query(
+                Cache.getTableName(type),
+                projection,
+                selection,
+                selectionArgs,
+                null,
+                null,
+                sortOrder);
+
+        cursor.setNotificationUri(getContext().getContentResolver(), uri);
+
+        return cursor;
+    }
+
+    //////////////////////////////////////////////////////////////////////////////////////
+    // PUBLIC METHODS
+    //////////////////////////////////////////////////////////////////////////////////////
+
+    public static Uri createUri(Class<? extends Model> type, Long id) {
+        final StringBuilder uri = new StringBuilder();
+        uri.append("content://");
+        uri.append(sAuthority);
+        uri.append("/");
+        uri.append(Cache.getTableName(type).toLowerCase());
+
+        if (id != null) {
+            uri.append("/");
+            uri.append(id.toString());
+        }
+
+        return Uri.parse(uri.toString());
+    }
+
+    //////////////////////////////////////////////////////////////////////////////////////
+    // PROTECTED METHODS
+    //////////////////////////////////////////////////////////////////////////////////////
+
+    protected String getAuthority() {
+        return getContext().getPackageName();
+    }
+
+    protected Configuration getConfiguration() {
+        return null;
+    }
+
+    //////////////////////////////////////////////////////////////////////////////////////
+    // PRIVATE METHODS
+    //////////////////////////////////////////////////////////////////////////////////////
+
+    private Class<? extends Model> getModelType(Uri uri) {
+        final int code = URI_MATCHER.match(uri);
+        if (code != UriMatcher.NO_MATCH) {
+            return TYPE_CODES.get(code);
+        }
 
-		return null;
-	}
-
-	private void notifyChange(Uri uri) {
-		getContext().getContentResolver().notifyChange(uri, null);
-	}
-}
+        return null;
+    }
+
+    private void notifyChange(Uri uri) {
+        getContext().getContentResolver().notifyChange(uri, null);
+    }
+}
\ No newline at end of file
diff --git a/tests/src/com/activeandroid/test/ModelTest.java b/tests/src/com/activeandroid/test/ModelTest.java
index 168739a4..fed54c0f 100644
--- a/tests/src/com/activeandroid/test/ModelTest.java
+++ b/tests/src/com/activeandroid/test/ModelTest.java
@@ -201,7 +201,6 @@ public void testMatchValueColumn(){
         m1.intField=45;
         m1.stringField="testField";
         long id1 = m1.save();
-        Log.i("testing","id");
 
         MatcherMockModel  databaseMockModel = MatcherMockModel .load( MatcherMockModel .class, id1 );
         assertTrue(databaseMockModel.equals(m1));
