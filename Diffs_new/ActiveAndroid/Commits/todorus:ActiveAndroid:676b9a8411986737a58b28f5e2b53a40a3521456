diff --git a/src/com/activeandroid/ActiveAndroid.java b/src/com/activeandroid/ActiveAndroid.java
index d90010ad..e55c22c3 100644
--- a/src/com/activeandroid/ActiveAndroid.java
+++ b/src/com/activeandroid/ActiveAndroid.java
@@ -29,22 +29,23 @@
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	public static void initialize(Context context) {
-		initialize(new Configuration.Builder(context).create());
+	public static Cache initialize(Context context) {
+		return initialize(new Configuration.Builder(context).create());
 	}
 
-	public static void initialize(Configuration configuration) {
-		initialize(configuration, false);
+	public static Cache initialize(Configuration configuration) {
+		return initialize(configuration, false);
 	}
 
-	public static void initialize(Context context, boolean loggingEnabled) {
-		initialize(new Configuration.Builder(context).create(), loggingEnabled);
+	public static Cache initialize(Context context, boolean loggingEnabled) {
+		return initialize(new Configuration.Builder(context).create(), loggingEnabled);
 	}
 
-	public static void initialize(Configuration configuration, boolean loggingEnabled) {
+	public static Cache initialize(Configuration configuration, boolean loggingEnabled) {
 		// Set logging enabled first
 		setLoggingEnabled(loggingEnabled);
 		cache = new Cache(configuration);
+		return cache;
 	}
 
 	public static Cache getCache(){
diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index ac0f571d..9186e474 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -44,12 +44,19 @@
 
 	private Long mId = null;
 
+	private Cache mCache;
 	private final TableInfo mTableInfo;
 	private final String idName;
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
 
+	public Model(Cache cache) {
+		mCache = cache;
+		mTableInfo = getCache().getTableInfo(getClass());
+		idName = mTableInfo.getIdName();
+	}
+
 	public Model() {
 		mTableInfo = getCache().getTableInfo(getClass());
 		idName = mTableInfo.getIdName();
@@ -172,17 +179,29 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 	// Convenience methods
 
 	public static void delete(Class<? extends Model> type, long id) {
-		TableInfo tableInfo = getCache().getTableInfo(type);
-		new Delete().from(type).where(tableInfo.getIdName()+"=?", id).execute();
+		delete(ActiveAndroid.getCache(), type, id);
+	}
+
+	public static void delete(Cache cache, Class<? extends Model> type, long id) {
+		TableInfo tableInfo = cache.getTableInfo(type);
+		new Delete(cache).from(type).where(tableInfo.getIdName() + "=?", id).execute();
 	}
 
 	public static <T extends Model> T load(Class<T> type, long id) {
-		TableInfo tableInfo = getCache().getTableInfo(type);
+		return load(ActiveAndroid.getCache(), type, id);
+	}
+
+	public static <T extends Model> T load(Cache cache, Class<T> type, long id) {
+		TableInfo tableInfo = cache.getTableInfo(type);
 		return (T) new Select().from(type).where(tableInfo.getIdName()+"=?", id).executeSingle();
 	}
 
-    public static void truncate(Class<? extends Model> type){
-        TableInfo tableInfo = getCache().getTableInfo(type);
+	public static void truncate(Class<? extends Model> type){
+		truncate(ActiveAndroid.getCache(), type);
+	}
+
+    public static void truncate(Cache cache, Class<? extends Model> type){
+        TableInfo tableInfo = cache.getTableInfo(type);
         // Not the cleanest way, but...
         ActiveAndroid.execSQL("delete from "+tableInfo.getTableName()+";");
         ActiveAndroid.execSQL("delete from sqlite_sequence where name='"+tableInfo.getTableName()+"';");
@@ -310,8 +329,12 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 	// PRIVATE METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	private static Cache getCache(){
-		return ActiveAndroid.getCache();
+	private Cache getCache(){
+		if(mCache == null) {
+			return ActiveAndroid.getCache();
+		} else {
+			return mCache;
+		}
 	}
 
 	//////////////////////////////////////////////////////////////////////////////////////
diff --git a/src/com/activeandroid/query/Delete.java b/src/com/activeandroid/query/Delete.java
index 6d19dced..6c8261f7 100644
--- a/src/com/activeandroid/query/Delete.java
+++ b/src/com/activeandroid/query/Delete.java
@@ -16,14 +16,23 @@
  * limitations under the License.
  */
 
+import com.activeandroid.ActiveAndroid;
+import com.activeandroid.Cache;
 import com.activeandroid.Model;
 
 public final class Delete implements Sqlable {
+	private Cache mCache;
+
 	public Delete() {
+		this(ActiveAndroid.getCache());
+	}
+
+	public Delete(Cache cache) {
+		mCache = cache;
 	}
 
 	public From from(Class<? extends Model> table) {
-		return new From(table, this);
+		return new From(mCache, table, this);
 	}
 
 	@Override
diff --git a/src/com/activeandroid/query/From.java b/src/com/activeandroid/query/From.java
index 3eec6825..9aa4ab52 100644
--- a/src/com/activeandroid/query/From.java
+++ b/src/com/activeandroid/query/From.java
@@ -32,6 +32,7 @@
 public final class From implements Sqlable {
 	private Sqlable mQueryBase;
 
+    private Cache mCache;
 	private Class<? extends Model> mType;
 	private String mAlias;
 	private List<Join> mJoins;
@@ -44,7 +45,12 @@
 
 	private List<Object> mArguments;
 
-	public From(Class<? extends Model> table, Sqlable queryBase) {
+    public From(Class<? extends Model> table, Sqlable queryBase) {
+        this(ActiveAndroid.getCache(), table, queryBase);
+    }
+
+	public From(Cache cache, Class<? extends Model> table, Sqlable queryBase) {
+        mCache = cache;
 		mType = table;
 		mJoins = new ArrayList<Join>();
 		mQueryBase = queryBase;
@@ -59,31 +65,31 @@ public From as(String alias) {
 	}
 
 	public Join join(Class<? extends Model> table) {
-		Join join = new Join(this, table, null);
+		Join join = new Join(mCache, this, table, null);
 		mJoins.add(join);
 		return join;
 	}
 
 	public Join leftJoin(Class<? extends Model> table) {
-		Join join = new Join(this, table, JoinType.LEFT);
+		Join join = new Join(mCache, this, table, JoinType.LEFT);
 		mJoins.add(join);
 		return join;
 	}
 
 	public Join outerJoin(Class<? extends Model> table) {
-		Join join = new Join(this, table, JoinType.OUTER);
+		Join join = new Join(mCache, this, table, JoinType.OUTER);
 		mJoins.add(join);
 		return join;
 	}
 
 	public Join innerJoin(Class<? extends Model> table) {
-		Join join = new Join(this, table, JoinType.INNER);
+		Join join = new Join(mCache, this, table, JoinType.INNER);
 		mJoins.add(join);
 		return join;
 	}
 
 	public Join crossJoin(Class<? extends Model> table) {
-		Join join = new Join(this, table, JoinType.CROSS);
+		Join join = new Join(mCache, this, table, JoinType.CROSS);
 		mJoins.add(join);
 		return join;
 	}
@@ -167,7 +173,7 @@ void addArguments(Object[] args) {
 
     private void addFrom(final StringBuilder sql) {
         sql.append("FROM ");
-        sql.append(ActiveAndroid.getCache().getTableName(mType)).append(" ");
+        sql.append(mCache.getTableName(mType)).append(" ");
 
         if (mAlias != null) {
             sql.append("AS ");
@@ -296,11 +302,11 @@ public String toCountSql() {
 
 	public <T extends Model> List<T> execute() {
 		if (mQueryBase instanceof Select) {
-			return SQLiteUtils.rawQuery(ActiveAndroid.getCache(), mType, toSql(), getArguments());
+			return SQLiteUtils.rawQuery(mCache,  mType, toSql(), getArguments());
 			
 		} else {
-			SQLiteUtils.execSql(ActiveAndroid.getCache(), toSql(), getArguments());
-            ActiveAndroid.getCache().getContext().getContentResolver().notifyChange(ContentProvider.createUri(mType, null), null);
+			SQLiteUtils.execSql(mCache, toSql(), getArguments());
+            mCache.getContext().getContentResolver().notifyChange(ContentProvider.createUri(mType, null), null);
 			return null;
 			
 		}
@@ -309,11 +315,11 @@ public String toCountSql() {
 	public <T extends Model> T executeSingle() {
 		if (mQueryBase instanceof Select) {
 			limit(1);
-			return (T) SQLiteUtils.rawQuerySingle(ActiveAndroid.getCache(), mType, toSql(), getArguments());
+			return (T) SQLiteUtils.rawQuerySingle(mCache, mType, toSql(), getArguments());
 			
 		} else {
 			limit(1);
-			SQLiteUtils.rawQuerySingle(ActiveAndroid.getCache(), mType, toSql(), getArguments()).delete();
+			SQLiteUtils.rawQuerySingle(mCache, mType, toSql(), getArguments()).delete();
 			return null;
 			
 		}
@@ -324,14 +330,14 @@ public String toCountSql() {
      * @return <code>true</code> if the query returns at least one row; otherwise, <code>false</code>.
      */
     public boolean exists() {
-        return SQLiteUtils.intQuery(ActiveAndroid.getCache(), toExistsSql(), getArguments()) != 0;
+        return SQLiteUtils.intQuery(mCache, toExistsSql(), getArguments()) != 0;
     }
 
     /**
      * Gets the number of rows returned by the query.
      */
     public int count() {
-        return SQLiteUtils.intQuery(ActiveAndroid.getCache(), toCountSql(), getArguments());
+        return SQLiteUtils.intQuery(mCache, toCountSql(), getArguments());
     }
 
 	public String[] getArguments() {
diff --git a/src/com/activeandroid/query/Join.java b/src/com/activeandroid/query/Join.java
index dc9a5b28..ebd1c4d5 100644
--- a/src/com/activeandroid/query/Join.java
+++ b/src/com/activeandroid/query/Join.java
@@ -27,6 +27,7 @@
 		LEFT, OUTER, INNER, CROSS
 	}
 
+	private Cache mCache;
 	private From mFrom;
 	private Class<? extends Model> mType;
 	private String mAlias;
@@ -35,6 +36,11 @@
 	private String[] mUsing;
 
 	Join(From from, Class<? extends Model> table, JoinType joinType) {
+		this(ActiveAndroid.getCache(), from, table, joinType);
+	}
+
+	Join(Cache cache, From from, Class<? extends Model> table, JoinType joinType) {
+		mCache = cache;
 		mFrom = from;
 		mType = table;
 		mJoinType = joinType;
@@ -70,7 +76,7 @@ public String toSql() {
 		}
 
 		sql.append("JOIN ");
-		sql.append(ActiveAndroid.getCache().getTableName(mType));
+		sql.append(mCache.getTableName(mType));
 		sql.append(" ");
 
 		if (mAlias != null) {
diff --git a/src/com/activeandroid/query/Select.java b/src/com/activeandroid/query/Select.java
index 1d4c6488..9e0ddd9a 100644
--- a/src/com/activeandroid/query/Select.java
+++ b/src/com/activeandroid/query/Select.java
@@ -18,17 +18,30 @@
 
 import android.text.TextUtils;
 
+import com.activeandroid.ActiveAndroid;
+import com.activeandroid.Cache;
 import com.activeandroid.Model;
 
 public final class Select implements Sqlable {
+	private Cache mCache;
 	private String[] mColumns;
 	private boolean mDistinct = false;
 	private boolean mAll = false;
 
 	public Select() {
+		this(ActiveAndroid.getCache());
 	}
 
-	public Select(String... columns) {
+	public Select(String... columns){
+		this(ActiveAndroid.getCache(), columns);
+	}
+
+	public Select(Cache cache) {
+		mCache = cache;
+	}
+
+	public Select(Cache cache, String... columns) {
+        this(cache);
 		mColumns = columns;
 	}
 
@@ -55,7 +68,7 @@ public Select all() {
 	}
 
 	public From from(Class<? extends Model> table) {
-		return new From(table, this);
+		return new From(mCache, table, this);
 	}
 
 	public static class Column {
diff --git a/src/com/activeandroid/query/Set.java b/src/com/activeandroid/query/Set.java
index a48d1c42..e52deed1 100644
--- a/src/com/activeandroid/query/Set.java
+++ b/src/com/activeandroid/query/Set.java
@@ -17,6 +17,7 @@
  */
 
 import com.activeandroid.ActiveAndroid;
+import com.activeandroid.Cache;
 import com.activeandroid.util.SQLiteUtils;
 
 import java.util.ArrayList;
@@ -26,6 +27,7 @@
 public final class Set implements Sqlable {
 	private Update mUpdate;
 
+	private Cache mCache;
 	private String mSet;
 	private String mWhere;
 
@@ -33,19 +35,20 @@
 	private List<Object> mWhereArguments;
 
 	public Set(Update queryBase, String set) {
-		mUpdate = queryBase;
-		mSet = set;
-
-		mSetArguments = new ArrayList<Object>();
-		mWhereArguments = new ArrayList<Object>();
+		this(ActiveAndroid.getCache(), queryBase, set);
 	}
 
-	public Set(Update queryBase, String set, Object... args) {
+	public Set(Cache cache, Update queryBase, String set) {
+		mCache = cache;
 		mUpdate = queryBase;
 		mSet = set;
 
 		mSetArguments = new ArrayList<Object>();
 		mWhereArguments = new ArrayList<Object>();
+	}
+
+	public Set(Cache cache, Update queryBase, String set, Object... args) {
+		this(cache, queryBase, set);
 
 		mSetArguments.addAll(Arrays.asList(args));
 	}
@@ -83,7 +86,7 @@ public String toSql() {
 	}
 
 	public void execute() {
-		SQLiteUtils.execSql(ActiveAndroid.getCache(), toSql(), getArguments());
+		SQLiteUtils.execSql(mCache, toSql(), getArguments());
 	}
 
 	public String[] getArguments() {
diff --git a/src/com/activeandroid/query/Update.java b/src/com/activeandroid/query/Update.java
index df6fe68a..8dc6463f 100644
--- a/src/com/activeandroid/query/Update.java
+++ b/src/com/activeandroid/query/Update.java
@@ -21,18 +21,24 @@
 import com.activeandroid.Model;
 
 public final class Update implements Sqlable {
+	private Cache mCache;
 	private Class<? extends Model> mType;
 
-	public Update(Class<? extends Model> table) {
+	public Update(Class<? extends Model> table){
+		this(ActiveAndroid.getCache(), table);
+	}
+
+	public Update(Cache cache, Class<? extends Model> table) {
+		mCache = cache;
 		mType = table;
 	}
 
 	public Set set(String set) {
-		return new Set(this, set);
+		return new Set(mCache, this, set);
 	}
 
 	public Set set(String set, Object... args) {
-		return new Set(this, set, args);
+		return new Set(mCache, this, set, args);
 	}
 
 	Class<? extends Model> getType() {
@@ -43,7 +49,7 @@ public Set set(String set, Object... args) {
 	public String toSql() {
 		StringBuilder sql = new StringBuilder();
 		sql.append("UPDATE ");
-		sql.append(ActiveAndroid.getCache().getTableName(mType));
+		sql.append(mCache.getTableName(mType));
 		sql.append(" ");
 
 		return sql.toString();
