diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index 64dd935f..be65d329 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -35,6 +35,7 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 
 public final class TableInfo {
     //////////////////////////////////////////////////////////////////////////////////////
@@ -152,6 +153,7 @@ public String getDatabaseName(Field field) {
         return name;
     }
 
+
     /**
      * @param field The model class field
      * @return the full column name (table.column)
@@ -164,6 +166,10 @@ public boolean hasComputedFields() {
         return mComputedNames.size() > 0;
     }
 
+    public boolean isWildcard(String selectField) {
+        return selectField.matches(mTableName+"/./*");
+    }
+
     private Field getIdField(Class<?> type) {
         if (type.equals(Model.class)) {
             try {
@@ -193,5 +199,14 @@ public String getUniqueIdentifier() {
         return computedList;
     }
 
+    public Computed getComputedAnnotation(String databaseColumn) {
+        for (Map.Entry<Field, String> entry : mComputedNames.entrySet()) {
+            if (Objects.equals(databaseColumn, entry.getValue())) {
+                return entry.getKey().getAnnotation(Computed.class);
+            }
+        }
+        return null;
+    }
+
 
 }
diff --git a/src/com/activeandroid/query/From.java b/src/com/activeandroid/query/From.java
index b17fcdf9..041d4f83 100644
--- a/src/com/activeandroid/query/From.java
+++ b/src/com/activeandroid/query/From.java
@@ -257,18 +257,17 @@ public String toSql() {
         String computedJoins = "";
         String computedSelect = "";
         if (mMethod == SqlMethod.SELECT) {
-            Select selectBase = (Select) mQueryBase;
             TableInfo tableInfo = Cache.getTableInfo(mType);
-            boolean hasComputedFields = tableInfo.hasComputedFields();
-            if (!selectBase.hasColumns() && hasComputedFields) {
-                ArrayList<Computed> computedColumns = tableInfo.getComputedColumns();
-                for (Computed computed : computedColumns) {
-                    computedJoins += TextUtils.join(" ", computed.joins()) + " ";
-                    computedSelect += computed.select() + ",";
-                }
-                if(computedSelect.length() > 0) {
-                    computedSelect = computedSelect.replaceFirst(",$", " ");
-                }
+            for (Computed computed : getComputedColumns(tableInfo)) {
+                computedJoins += TextUtils.join(" ", computed.joins()) + " ";
+                computedSelect += computed.select() + ",";
+            }
+            boolean hasSelect = computedSelect.length() > 0;
+            boolean hasJoin = computedJoins.length() > 0;
+            if (hasSelect) {
+                computedSelect = computedSelect.replaceFirst(",$", " ");
+            }
+            if (hasSelect || hasJoin) {
                 String s = sql.toString();
                 sql.setLength(0);
                 sql.append(s.replaceFirst("\\*\\s*$", ""));
@@ -288,6 +287,26 @@ public String toSql() {
         return sqlString(sql);
     }
 
+    protected List<Computed> getComputedColumns(TableInfo tableInfo) {
+        ArrayList<Computed> computedColumns = tableInfo.getComputedColumns();
+        Select queryBase = (Select) mQueryBase;
+        if (queryBase.hasColumns()) {
+            ArrayList<Computed> list = new ArrayList<Computed>(computedColumns.size());
+            for (String column : queryBase.getColumns()) {
+                if(tableInfo.isWildcard(column)) {
+                    return computedColumns;
+                }
+                Computed computedAnnotation = tableInfo.getComputedAnnotation(column);
+                if (computedAnnotation != null && !TextUtils.isEmpty(computedAnnotation.select())) {
+                    list.add(computedAnnotation);
+                }
+            }
+            return list;
+        } else {
+            return computedColumns;
+        }
+    }
+
     public String toExistsSql() {
 
         final StringBuilder sql = new StringBuilder();
@@ -372,14 +391,14 @@ public int count(String fieldName) {
         return SQLiteUtils.intQuery(toCountSql(fieldName), getArguments());
     }
 
-	public String[] getArguments() {
-		final int size = mArguments.size();
-		final String[] args = new String[size];
+    public String[] getArguments() {
+        final int size = mArguments.size();
+        final String[] args = new String[size];
 
-		for (int i = 0; i < size; i++) {
-			args[i] = mArguments.get(i).toString();
-		}
+        for (int i = 0; i < size; i++) {
+            args[i] = mArguments.get(i).toString();
+        }
 
-		return args;
-	}
+        return args;
+    }
 }
diff --git a/src/com/activeandroid/query/Select.java b/src/com/activeandroid/query/Select.java
index 0585e896..57a655f2 100644
--- a/src/com/activeandroid/query/Select.java
+++ b/src/com/activeandroid/query/Select.java
@@ -70,6 +70,10 @@ public From from(Class<? extends Model> table) {
         return new From(table, this, SqlMethod.SELECT);
     }
 
+    public ArrayList<String> getColumns() {
+        return mColumns;
+    }
+
     public boolean hasColumns() {
         return mColumns != null && mColumns.size() > 0;
     }
