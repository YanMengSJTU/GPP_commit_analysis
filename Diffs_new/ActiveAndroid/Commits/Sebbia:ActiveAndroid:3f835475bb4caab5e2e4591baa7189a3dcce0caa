diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index ad948fad..2b3aae6c 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -19,7 +19,9 @@
 import android.content.ContentValues;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
+import android.text.TextUtils;
 
+import com.activeandroid.annotation.Column;
 import com.activeandroid.content.ContentProvider;
 import com.activeandroid.query.Delete;
 import com.activeandroid.query.Select;
@@ -272,6 +274,7 @@ private void fillContentValues(ContentValues values) {
 
 			try {
 				Object value = field.get(this);
+				Column column = field.getAnnotation(Column.class);
 
 				if (value != null) {
 					final TypeSerializer typeSerializer = Cache.getParserForType(fieldType);
@@ -290,9 +293,14 @@ private void fillContentValues(ContentValues values) {
 					}
 				}
 
+				
 				// TODO: Find a smarter way to do this? This if block is necessary because we
 				// can't know the type until runtime.
 				if (value == null) {
+					if (column != null && !TextUtils.isEmpty(column.defaultValue())) {
+						//Not putting anything in ContentValues since we have default value
+						continue;
+					}
 					values.putNull(fieldName);
 				}
 				else if (fieldType.equals(Byte.class) || fieldType.equals(byte.class)) {
diff --git a/src/com/activeandroid/annotation/Column.java b/src/com/activeandroid/annotation/Column.java
index 56bbcde8..5ecc8d69 100644
--- a/src/com/activeandroid/annotation/Column.java
+++ b/src/com/activeandroid/annotation/Column.java
@@ -47,6 +47,8 @@
 	public boolean unique() default false;
 
 	public ConflictAction onUniqueConflict() default ConflictAction.FAIL;
+	
+	public String defaultValue() default "";
 
 	/*
 	 * If set uniqueGroups = {"group_name"}, we will create a table constraint with group.
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index 1e91dbaf..c4b54550 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -16,6 +16,15 @@
  * limitations under the License.
  */
 
+import java.lang.reflect.Constructor;
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
 import android.database.Cursor;
 import android.os.Build;
 import android.text.TextUtils;
@@ -27,17 +36,6 @@
 import com.activeandroid.annotation.Column.ConflictAction;
 import com.activeandroid.serializer.TypeSerializer;
 
-import java.lang.Long;
-import java.lang.String;
-import java.lang.reflect.Constructor;
-import java.lang.reflect.Field;
-import java.util.Arrays;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
 public final class SQLiteUtils {
 	//////////////////////////////////////////////////////////////////////////////////////
 	// ENUMERATIONS
@@ -264,21 +262,22 @@ public static String createColumnDefinition(TableInfo tableInfo, Field field) {
 		if (typeSerializer != null) {
 			type = typeSerializer.getSerializedType();
 		}
-
+		
+		SQLiteType sqLiteType = null;
 		if (TYPE_MAP.containsKey(type)) {
-			definition.append(name);
-			definition.append(" ");
-			definition.append(TYPE_MAP.get(type).toString());
+			sqLiteType = TYPE_MAP.get(type);
 		}
 		else if (ReflectionUtils.isModel(type)) {
-			definition.append(name);
-			definition.append(" ");
-			definition.append(SQLiteType.INTEGER.toString());
+			sqLiteType = SQLiteType.INTEGER;
 		}
 		else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
+			sqLiteType = SQLiteType.TEXT;
+		}
+		
+		if (sqLiteType != null) {
 			definition.append(name);
 			definition.append(" ");
-			definition.append(SQLiteType.TEXT.toString());
+			definition.append(sqLiteType.toString());
 		}
 
 		if (!TextUtils.isEmpty(definition)) {
@@ -301,6 +300,43 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 					definition.append(" UNIQUE ON CONFLICT ");
 					definition.append(column.onUniqueConflict().toString());
 				}
+				
+				if (!TextUtils.isEmpty(column.defaultValue())) {
+					String defaultValue = null;
+					switch (sqLiteType) {
+					case TEXT: case BLOB:
+						defaultValue = "\"" + column.defaultValue() + "\"";
+						break;
+
+					case INTEGER:
+						try {
+							if (type.equals(Boolean.class) || type.equals(boolean.class)) {
+								boolean value = Boolean.parseBoolean(column.defaultValue());
+								defaultValue = value ? "1" : "0";
+							} else {
+								Integer.parseInt(column.defaultValue());
+								defaultValue = column.defaultValue();
+							}
+						} catch (NumberFormatException e) {
+							Log.e("Failed to convert default value '" + column.defaultValue() + "' to " + sqLiteType.toString());
+						}
+						break;
+						
+					case REAL:
+						try {
+							Double.parseDouble(column.defaultValue());
+							defaultValue = column.defaultValue();
+						} catch (NumberFormatException e) {
+							Log.e("Failed to convert default value '" + column.defaultValue() + "' to " + sqLiteType.toString());
+						}
+						break;
+					}
+					
+					if (defaultValue != null) {
+						definition.append(" DEFAULT ");
+						definition.append(defaultValue);
+					}
+				}
 			}
 
 			if (FOREIGN_KEYS_SUPPORTED && ReflectionUtils.isModel(type) && Cache.getTableInfo((Class<? extends Model>) type) != null) {
@@ -312,6 +348,7 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 				definition.append(" ON UPDATE ");
 				definition.append(column.onUpdate().toString().replace("_", " "));
 			}
+		
 		}
 		else {
 			Log.e("No type mapping for: " + type.toString());
diff --git a/tests/src/com/activeandroid/test/DefaultValueTest.java b/tests/src/com/activeandroid/test/DefaultValueTest.java
new file mode 100644
index 00000000..35488d3f
--- /dev/null
+++ b/tests/src/com/activeandroid/test/DefaultValueTest.java
@@ -0,0 +1,112 @@
+package com.activeandroid.test;
+
+import java.util.List;
+
+import android.app.Application;
+import android.test.ApplicationTestCase;
+
+import com.activeandroid.ActiveAndroid;
+import com.activeandroid.Configuration;
+import com.activeandroid.Model;
+import com.activeandroid.annotation.Column;
+import com.activeandroid.annotation.Table;
+import com.activeandroid.query.Select;
+
+public class DefaultValueTest extends ApplicationTestCase<Application> {
+	
+	private static final int COUNT = 10;
+	
+	public DefaultValueTest() {
+		super(Application.class);
+	}
+	
+	@Override
+	protected void setUp() throws Exception {
+		super.setUp();
+		createApplication();
+	}
+
+	@Table(name = "IntegerDefaultValueModel")
+	public static class IntegerDefaultValueModel extends MockModel {
+		
+		@Column(defaultValue = "20")
+		private Integer defaultField;
+		
+		public IntegerDefaultValueModel() {
+			super();
+		}
+	}
+	
+	@Table(name = "BooleanDefaultValueModel")
+	public static class BooleanDefaultValueModel extends MockModel {
+		
+		@Column(defaultValue = "true")
+		private Boolean defaultField;
+		
+		public BooleanDefaultValueModel() {
+			super();
+		}
+	}
+
+	@Table(name = "StringDefaultValueModel")
+	public static class StringDefaultValueModel extends MockModel {
+		
+		@Column(defaultValue = "Some string")
+		private String defaultField;
+		
+		public StringDefaultValueModel() {
+			super();
+		}
+	}
+	
+	public void testDefaultValueInteger() {
+		initializedActiveAndroid(IntegerDefaultValueModel.class);
+		List<IntegerDefaultValueModel> models = insertAndSelectModels(IntegerDefaultValueModel.class);
+		for (IntegerDefaultValueModel model : models) {
+			assertEquals(Integer.valueOf(20), model.defaultField);
+		}
+	}
+	
+	public void testDefaultValueBoolean() {
+		initializedActiveAndroid(BooleanDefaultValueModel.class);
+		List<BooleanDefaultValueModel> models = insertAndSelectModels(BooleanDefaultValueModel.class);
+		for (BooleanDefaultValueModel model : models) {
+			assertEquals(Boolean.valueOf(true), model.defaultField);
+		}
+	}
+	
+	public void testDefaultValueString() {
+		initializedActiveAndroid(StringDefaultValueModel.class);
+		List<StringDefaultValueModel> models = insertAndSelectModels(StringDefaultValueModel.class);
+		for (StringDefaultValueModel model : models) {
+			assertEquals("Some string", model.defaultField);
+		}
+	}
+	
+	private <T extends Model> List<T> insertAndSelectModels(Class<T> clazz) {
+		for (int i = 0; i < COUNT; ++i) {
+			T model = null;
+			try {
+				model = clazz.newInstance();
+			} catch (Exception e) {
+				throw new RuntimeException(e);
+			} 
+			model.save();
+		}
+		
+		List<T> models = new Select().from(clazz).execute();
+		assertEquals(COUNT, models.size());
+		return models;
+	}
+	
+	private void initializedActiveAndroid(Class<? extends Model> clazz) {
+		getContext().deleteDatabase("default_value.db");
+		ActiveAndroid.dispose();
+		Configuration configuration = new Configuration.Builder(getContext())
+		.addModelClass(clazz)
+		.setDatabaseName("default_value.db")
+		.create();
+		
+		ActiveAndroid.initialize(configuration, true);
+	}
+}
diff --git a/tests/src/com/activeandroid/test/automigration/DefaultValueMigrationTest.java b/tests/src/com/activeandroid/test/automigration/DefaultValueMigrationTest.java
new file mode 100644
index 00000000..2d388d9b
--- /dev/null
+++ b/tests/src/com/activeandroid/test/automigration/DefaultValueMigrationTest.java
@@ -0,0 +1,54 @@
+package com.activeandroid.test.automigration;
+
+import java.util.List;
+
+import android.database.Cursor;
+
+import com.activeandroid.ActiveAndroid;
+import com.activeandroid.Model;
+import com.activeandroid.annotation.Column;
+import com.activeandroid.annotation.Table;
+import com.activeandroid.query.Select;
+
+public class DefaultValueMigrationTest extends AutoMigrationTest {
+	private static final String TABLE = "default_value_migration";
+	
+	@Table(name = TABLE)
+	public static class DefaultValueMigrationModel extends Model {
+		@Column(name = "textValue")		
+		public String textValue;
+		@Column(name = "boolValue")
+		public boolean boolValue;
+		@Column(name = "floatValue")
+		public float floatValue;
+		@Column(name = "defaultValue", defaultValue = "some_value")
+		public String defaultValue;
+			
+		public DefaultValueMigrationModel() {
+
+		}
+	}
+	
+	public DefaultValueMigrationTest() {
+		super(TABLE);
+	}
+	
+	public void testDefaultValueMigrationTest() {
+		createOldDatabase();
+		initializeActiveAndroid(DefaultValueMigrationModel.class);
+		List<DefaultValueMigrationModel> migrationModels = new Select().from(DefaultValueMigrationModel.class).execute();
+		assertEquals(10, migrationModels.size());
+		for (int i = 0; i < 10; ++i) {
+			DefaultValueMigrationModel migrationModel = migrationModels.get(i);
+			assertEquals(Long.valueOf(i + 1), migrationModel.getId());
+			assertEquals("Text " + i, migrationModel.textValue);
+			assertEquals(i % 2 == 0, migrationModel.boolValue);
+			assertEquals((float) i, migrationModel.floatValue);
+			assertEquals("some_value", migrationModel.defaultValue);
+		}
+		
+		Cursor cursor = ActiveAndroid.getDatabase().query(TABLE, null, null, null, null, null, null);
+		assertTrue(cursor.getColumnIndex("unusedColumn") != -1);
+	}
+
+}
