diff --git a/.travis.yml b/.travis.yml
index bed811fd..4272ce45 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,40 +1,28 @@
-language: java
-jdk: oraclejdk7
 env: ANDROID_SDK=android-16 ANDROID_ABI=armeabi-v7a
+language: android
+android:
+  components:
+    # The SDK version used to compile your project
+    - $ANDROID_SDK
 
-before_install:
-  # Install ia32-libs (necessary for Android SDK to run on 64-bit linux)
-  # - sudo apt-get clean && sudo apt-get update
-  - sudo apt-get update -qq
-  - sudo apt-get install -qq --force-yes libgd2-xpm ia32-libs ia32-libs-multiarch
+    # Additional components
+    - extra-google-m2repository
+    - extra-android-m2repository
+    - extra-android-support
 
-  # Install Android SDK
-  - wget http://dl.google.com/android/android-sdk_r22.6.2-linux.tgz
-  - tar -zxf android-sdk_r22.6.2-linux.tgz
-  - ls
-  - export ANDROID_HOME=`pwd`/android-sdk-linux
-  - export PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools
+    # Specify at least one system image,
+    # if you need to run emulator(s) during your tests
+    - sys-img-$ANDROID_ABI-$ANDROID_SDK
 
-  # Install build-tools
-  - wget https://dl-ssl.google.com/android/repository/build-tools_r19.0.3-linux.zip
-  - unzip build-tools_r19.0.3-linux.zip -d $ANDROID_HOME
-  - mkdir -p $ANDROID_HOME/build-tools/
-  - mv $ANDROID_HOME/android-4.4.2 $ANDROID_HOME/build-tools/19.0.1
+  licenses:
+    - 'android-sdk-license-.+'
 
-  # Install required Android components
-  - android list sdk --extended
-  # Do you accept the license 'android-sdk-license-bcbbd656' [y/n]:
-  - echo -ne "y\n" | android update sdk --filter system-image,platform-tools,extra-android-support,$ANDROID_SDK --no-ui --force
-
-  # Create and start emulator
+before_script:
   - echo no | android create avd --force -n test -t $ANDROID_SDK --abi $ANDROID_ABI
   - android list avds
   - emulator -avd test -no-skin -no-audio -no-window &
+  - android-wait-for-emulator
+  - adb shell input keyevent 82 &
+  - mvn --version
 
-before_script:
-  # Make sure the emulator has started before running tests
-  - chmod +x ./wait_for_emulator
-  - ./wait_for_emulator
-
-script:
-  - mvn clean install -e
+script: mvn clean install
diff --git a/android-wait-for-emulator b/android-wait-for-emulator
new file mode 100755
index 00000000..aa6345d8
--- /dev/null
+++ b/android-wait-for-emulator
@@ -0,0 +1,25 @@
+#!/bin/bash
+
+# Originally written by Ralf Kistner <ralf@embarkmobile.com>, but placed in the public domain
+
+set +e
+
+bootanim=""
+failcounter=0
+timeout_in_sec=360
+
+until [[ "$bootanim" =~ "stopped" ]]; do
+  bootanim=`adb -e shell getprop init.svc.bootanim 2>&1 &`
+  if [[ "$bootanim" =~ "device not found" || "$bootanim" =~ "device offline"
+    || "$bootanim" =~ "running" ]]; then
+    let "failcounter += 1"
+    echo "Waiting for emulator to start"
+    if [[ $failcounter -gt timeout_in_sec ]]; then
+      echo "Timeout ($timeout_in_sec seconds) reached; failed to start emulator"
+      exit 1
+    fi
+  fi
+  sleep 1
+done
+
+echo "Emulator is ready"
diff --git a/src/com/activeandroid/Cache.java b/src/com/activeandroid/Cache.java
index 6495e379..737fe108 100644
--- a/src/com/activeandroid/Cache.java
+++ b/src/com/activeandroid/Cache.java
@@ -66,6 +66,8 @@ public static synchronized void initialize(Configuration configuration) {
 		sModelInfo = new ModelInfo(configuration);
 		sDatabaseHelper = new DatabaseHelper(configuration);
 
+		checkDbReset(configuration);
+
 		// TODO: It would be nice to override sizeOf here and calculate the memory
 		// actually used, however at this point it seems like the reflection
 		// required would be too costly to be of any benefit. We'll just set a max
@@ -155,4 +157,61 @@ public static synchronized TypeSerializer getParserForType(Class<?> type) {
 	public static synchronized String getTableName(Class<? extends Model> type) {
 		return sModelInfo.getTableInfo(type).getTableName();
 	}
+
+    /**
+     * Checks if the db should be reset on startup. It can be enabled
+     * by putting the following lines in your application's manifest:
+     *
+     * ```
+     * <meta-data
+     *    android:name="AA_DB_RESET"
+     *    android:value="true" />
+     * ```
+     *
+     * It will reset the database only once, if and only the `AA_DB_VERSION`
+     * parameter is increased between app releases.
+     *
+     * @param configuration The ActiveAndroid configuration.
+     */
+    public static synchronized void checkDbReset(Configuration configuration) {
+        // Check if the reset flag is set
+        if (configuration != null && configuration.getResetDatabase()) {
+            Log.w("Checking db reset");
+
+            // Get the current db
+            SQLiteDatabase db = sContext.openOrCreateDatabase(
+                    configuration.getDatabaseName(),
+                    Context.MODE_PRIVATE,
+                    null);
+
+            if (db == null) {
+                return;
+            }
+
+            // New dbs always have version == 0
+            if (db.getVersion() == 0) {
+                Log.w("New db, not resetting");
+                return;
+            }
+
+            // Only update if the config version is higher. This
+            // prevents repeated resets
+            if (db.getVersion() >= configuration.getDatabaseVersion()) {
+                Log.w(String.format("Current db version >= config, not resetting (%d >= %d)",
+                        db.getVersion(),
+                        configuration.getDatabaseVersion()));
+                return;
+            }
+
+            // Finally, reset the db. We first delete it
+            // and then we create a new one with the same
+            // name.
+            Log.w("Resetting database");
+            sContext.deleteDatabase(configuration.getDatabaseName());
+            sContext.openOrCreateDatabase(
+                    configuration.getDatabaseName(),
+                    Context.MODE_PRIVATE,
+                    null).close();
+        }
+    }
 }
diff --git a/src/com/activeandroid/Configuration.java b/src/com/activeandroid/Configuration.java
index b197d223..d8bb504f 100644
--- a/src/com/activeandroid/Configuration.java
+++ b/src/com/activeandroid/Configuration.java
@@ -39,6 +39,7 @@
 	private String mDatabaseName;
 	private int mDatabaseVersion;
 	private String mSqlParser;
+	private Boolean mResetDatabase;
 	private List<Class<? extends Model>> mModelClasses;
 	private List<Class<? extends TypeSerializer>> mTypeSerializers;
 	private int mCacheSize;
@@ -71,6 +72,10 @@ public String getSqlParser() {
 	    return mSqlParser;
 	}
 
+	public boolean getResetDatabase() {
+		return mResetDatabase;
+	}
+
 	public List<Class<? extends Model>> getModelClasses() {
 		return mModelClasses;
 	}
@@ -101,6 +106,7 @@ public boolean isValid() {
 		private final static String AA_MODELS = "AA_MODELS";
 		private final static String AA_SERIALIZERS = "AA_SERIALIZERS";
 		private final static String AA_SQL_PARSER = "AA_SQL_PARSER";
+		private final static String AA_DB_RESET = "AA_DB_RESET";
 
 		private static final int DEFAULT_CACHE_SIZE = 1024;
 		private static final String DEFAULT_DB_NAME = "Application.db";
@@ -116,6 +122,7 @@ public boolean isValid() {
 		private String mDatabaseName;
 		private Integer mDatabaseVersion;
 		private String mSqlParser;
+		private Boolean mResetDatabase;
 		private List<Class<? extends Model>> mModelClasses;
 		private List<Class<? extends TypeSerializer>> mTypeSerializers;
 
@@ -152,6 +159,11 @@ public Builder setSqlParser(String sqlParser) {
 		    return this;
 		}
 
+		public Builder setResetDatabase(Boolean resetDatabase) {
+			mResetDatabase = resetDatabase;
+			return this;
+		}
+
 		public Builder addModelClass(Class<? extends Model> modelClass) {
 			if (mModelClasses == null) {
 				mModelClasses = new ArrayList<Class<? extends Model>>();
@@ -243,6 +255,13 @@ public Configuration create() {
 				}
 			}
 
+			// Get reset flag from meta-data
+			if (mResetDatabase != null) {
+				configuration.mResetDatabase = mResetDatabase;
+			} else {
+				configuration.mResetDatabase = getResetDatabaseOrDefault();
+			}
+
 			return configuration;
 		}
 
@@ -314,5 +333,12 @@ private String getMetaDataSqlParserOrDefault() {
 			return typeSerializers;
 		}
 
+		private Boolean getResetDatabaseOrDefault() {
+			final Boolean reset = ReflectionUtils.getMetaData(mContext, AA_DB_RESET);
+			if (reset == null) {
+				return false;
+			}
+			return reset;
+		}
 	}
 }
diff --git a/tests/src/com/activeandroid/test/ResetTest.java b/tests/src/com/activeandroid/test/ResetTest.java
new file mode 100644
index 00000000..cac145bc
--- /dev/null
+++ b/tests/src/com/activeandroid/test/ResetTest.java
@@ -0,0 +1,60 @@
+package com.activeandroid.test;
+
+import com.activeandroid.ActiveAndroid;
+import com.activeandroid.Configuration;
+import com.activeandroid.Model;
+import com.activeandroid.annotation.Table;
+
+import android.test.AndroidTestCase;
+
+import java.io.IOException;
+import java.util.List;
+
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+
+public class ResetTest extends AndroidTestCase {
+
+    public void testReset() {
+        Configuration conf = new Configuration.Builder(getContext())
+			.setDatabaseVersion(1)
+			.setDatabaseName("ResetTest")
+			.addModelClass(ResetTestFirstModel.class)
+			.create();
+
+		ActiveAndroid.initialize(conf, true);
+		assertTrue(checkIfTableExists("ResetTestFirstModel"));
+		assertFalse(checkIfTableExists("ResetTestSecondModel"));
+		ActiveAndroid.dispose();
+
+        Configuration conf2 = new Configuration.Builder(getContext())
+			.setDatabaseVersion(2)
+			.setDatabaseName("ResetTest")
+			.setResetDatabase(true)
+			.addModelClass(ResetTestSecondModel.class)
+			.create();
+
+		ActiveAndroid.initialize(conf2, true);
+		assertFalse(checkIfTableExists("ResetTestFirstModel"));
+		assertTrue(checkIfTableExists("ResetTestSecondModel"));
+    }
+
+	public boolean checkIfTableExists(String tableName) {
+		SQLiteDatabase db = ActiveAndroid.getDatabase();
+		Cursor cursor = db.rawQuery("select DISTINCT tbl_name from sqlite_master where tbl_name = '" + tableName + "'", null);
+		if (cursor.getCount() > 0) {
+			cursor.close();
+			return true;
+		}
+		cursor.close();
+		return false;
+	}
+
+    @Table(name = "ResetTestFirstModel")
+    private static class ResetTestFirstModel extends Model {
+    }
+
+    @Table(name = "ResetTestSecondModel")
+    private static class ResetTestSecondModel extends Model {
+    }
+}
diff --git a/wait_for_emulator b/wait_for_emulator
deleted file mode 100644
index b30bc35c..00000000
--- a/wait_for_emulator
+++ /dev/null
@@ -1,18 +0,0 @@
-#!/bin/bash
-
-bootanim=""
-failcounter=0
-until [[ "$bootanim" =~ "stopped" ]]; do
-  bootanim=`adb -e shell getprop init.svc.bootanim 2>&1`
-  echo "$bootanim"
-  if [[ "$bootanim" =~ "not found" ]]; then
-    let "failcounter += 1"
-    if [[ $failcounter -gt 3 ]]; then
-      echo "Failed to start emulator"
-      exit 1
-    fi
-  fi
-  sleep 1
-done
-
-echo "Done"
