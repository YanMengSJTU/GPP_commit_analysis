diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 9efeb0f8..c5e29436 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -137,8 +137,8 @@ else if (fieldType.equals(Byte[].class) || fieldType.equals(byte[].class)) {
 				}
 				else if (field.isAnnotationPresent(ForeignKey.class) && ReflectionUtils.isModel(fieldType)) {
                     ForeignKey key = field.getAnnotation(ForeignKey.class);
-                    if(!key.value().equals("")){
-                        fieldName = field.getAnnotation(ForeignKey.class).value();
+                    if(!key.name().equals("")){
+                        fieldName = field.getAnnotation(ForeignKey.class).name();
                     }
 					values.put(fieldName, ((Model) value).getId());
 				}
@@ -281,7 +281,7 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 					value = typeSerializer.deserialize(value);
 				}
 
-				// Set the field value
+				// Set the field name
 				if (value != null) {
 					field.set(this, value);
 				}
diff --git a/src/com/activeandroid/annotation/ForeignKey.java b/src/com/activeandroid/annotation/ForeignKey.java
index dcf9d490..99ee6b99 100644
--- a/src/com/activeandroid/annotation/ForeignKey.java
+++ b/src/com/activeandroid/annotation/ForeignKey.java
@@ -14,5 +14,6 @@
 @Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface ForeignKey {
-    String value() default "";
+    String name() default "";
+    String foreignColumn();
 }
diff --git a/src/com/activeandroid/manager/DBManager.java b/src/com/activeandroid/manager/DBManager.java
index 785721c8..2a446c4f 100644
--- a/src/com/activeandroid/manager/DBManager.java
+++ b/src/com/activeandroid/manager/DBManager.java
@@ -267,7 +267,7 @@ public OBJECT_CLASS getObjectById(Object...ids){
     }
 
     /**
-     * Returns a single object with the specified column value.
+     * Returns a single object with the specified column name.
      * Useful for getting objects with a specific primary key
      * @param column
      * @param uid
@@ -278,7 +278,7 @@ public OBJECT_CLASS getObjectByColumnValue(String column, Object uid){
     }
 
     /**
-     * Returns all objects with the specified column value
+     * Returns all objects with the specified column name
      * @param column
      * @param value
      * @return
diff --git a/src/com/activeandroid/manager/SingleDBManager.java b/src/com/activeandroid/manager/SingleDBManager.java
index dbbd7501..bf03576a 100644
--- a/src/com/activeandroid/manager/SingleDBManager.java
+++ b/src/com/activeandroid/manager/SingleDBManager.java
@@ -263,7 +263,7 @@ public void run() {
     }
 
     /**
-     * Returns a single object with the specified column value.
+     * Returns a single object with the specified column name.
      * Useful for getting objects with a specific primary key
      * @param column
      * @param uid
@@ -274,7 +274,7 @@ public void run() {
     }
 
     /**
-     * Returns all objects with the specified column value
+     * Returns all objects with the specified column name
      * @param column
      * @param value
      * @return
diff --git a/src/com/activeandroid/util/NaturalOrderComparator.java b/src/com/activeandroid/util/NaturalOrderComparator.java
index 3e44af96..a6b76d05 100644
--- a/src/com/activeandroid/util/NaturalOrderComparator.java
+++ b/src/com/activeandroid/util/NaturalOrderComparator.java
@@ -33,7 +33,7 @@ int compareRight(String a, String b) {
 		int ib = 0;
 
 		// The longest run of digits wins. That aside, the greatest
-		// value wins, but we can't know that it will until we've scanned
+		// name wins, but we can't know that it will until we've scanned
 		// both numbers to know that they have the same magnitude, so we
 		// remember it in BIAS.
 		for (;; ia++, ib++) {
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index 677a8d04..81638b84 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -143,8 +143,11 @@ public static String createTableDefinition(TableInfo tableInfo) {
         for(int i = 0; i < foreignColumns.size(); i++){
             final Field column = foreignColumns.get(i);
             ForeignKey foreignKey = column.getAnnotation(ForeignKey.class);
+
             StringBuilder forDef = new StringBuilder("FOREIGN KEY(");
-            forDef.append(tableInfo.getColumnName(column)).append(") REFERENCES ").append(foreignKey.value());
+            forDef.append(tableInfo.getColumnName(column)).append(") REFERENCES ")
+                    .append(Cache.getTableName((Class<? extends Model>) column.getType()))
+                    .append("(").append(foreignKey.foreignColumn()).append(")");
 
             definitions.add(forDef.toString());
         }
