diff --git a/src/com/activeandroid/Cache.java b/src/com/activeandroid/Cache.java
index 09a05437..4bd0f95d 100644
--- a/src/com/activeandroid/Cache.java
+++ b/src/com/activeandroid/Cache.java
@@ -86,7 +86,8 @@ public static synchronized void initialize(Configuration configuration) {
 		// actually used, however at this point it seems like the reflection
 		// required would be too costly to be of any benefit. We'll just set a max
 		// object size instead.
-		sEntities = new LruCache<String, Model>(configuration.getCacheSize());
+		if (configuration.getCacheSize() != 0)
+			sEntities = new LruCache<String, Model>(configuration.getCacheSize());
 
 		openDatabase();
 
@@ -96,8 +97,10 @@ public static synchronized void initialize(Configuration configuration) {
 	}
 
 	public static synchronized void clear() {
-		sEntities.evictAll();
-		Log.v("Cache cleared.");
+		if (sEntities != null) {
+			sEntities.evictAll();
+			Log.v("Cache cleared.");
+		}
 	}
 
 	public static synchronized void dispose() {
@@ -145,15 +148,19 @@ public static String getIdentifier(Model entity) {
 	}
 
 	public static synchronized void addEntity(Model entity) {
-		sEntities.put(getIdentifier(entity), entity);
+		if (sEntities != null)
+			sEntities.put(getIdentifier(entity), entity);
 	}
 
 	public static synchronized Model getEntity(Class<? extends Model> type, long id) {
-		return sEntities.get(getIdentifier(type, id));
+		if (sEntities != null)
+			return sEntities.get(getIdentifier(type, id));
+		return null;
 	}
 
 	public static synchronized void removeEntity(Model entity) {
-		sEntities.remove(getIdentifier(entity));
+		if (sEntities != null)
+			sEntities.remove(getIdentifier(entity));
 	}
 
 	// Model cache
diff --git a/src/com/activeandroid/Configuration.java b/src/com/activeandroid/Configuration.java
index b197d223..77e571f7 100644
--- a/src/com/activeandroid/Configuration.java
+++ b/src/com/activeandroid/Configuration.java
@@ -132,6 +132,11 @@ public Builder(Context context) {
 		// PUBLIC METHODS
 		//////////////////////////////////////////////////////////////////////////////////////
 
+		/**
+		 * Sets the number of entities to hold in the cache.
+		 *
+		 * Pass 0 to disable the cache.
+		 */
 		public Builder setCacheSize(int cacheSize) {
 			mCacheSize = cacheSize;
 			return this;
