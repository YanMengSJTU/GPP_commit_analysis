diff --git a/src/com/activeandroid/util/ReflectionUtils.java b/src/com/activeandroid/util/ReflectionUtils.java
index 32e995cc..2670bd75 100644
--- a/src/com/activeandroid/util/ReflectionUtils.java
+++ b/src/com/activeandroid/util/ReflectionUtils.java
@@ -16,14 +16,6 @@
  * limitations under the License.
  */
 
-import java.lang.reflect.Field;
-import java.lang.reflect.Modifier;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.LinkedHashSet;
-import java.util.Set;
-
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
@@ -32,21 +24,22 @@
 import com.activeandroid.annotation.Column;
 import com.activeandroid.serializer.TypeSerializer;
 
-public final class ReflectionUtils {
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PUBLIC METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
 
+public final class ReflectionUtils {
 	public static boolean isModel(Class<?> type) {
-		return isSubclassOf(type, Model.class) && (!Modifier.isAbstract(type.getModifiers()));
+		return Model.class.isAssignableFrom(type) && (!Modifier.isAbstract(type.getModifiers()));
 	}
 
 	public static boolean isTypeSerializer(Class<?> type) {
-		return isSubclassOf(type, TypeSerializer.class);
+		return TypeSerializer.class.isAssignableFrom(type);
 	}
 
-	// Meta-data
-
 	@SuppressWarnings("unchecked")
 	public static <T> T getMetaData(Context context, String name) {
 		try {
@@ -64,47 +57,30 @@ public static boolean isTypeSerializer(Class<?> type) {
 		return null;
 	}
 	
-	public static Set<Field> getDeclaredColumnFields(Class<?> type) {
-		Set<Field> declaredColumnFields = Collections.emptySet();
-		
-		if (ReflectionUtils.isSubclassOf(type, Model.class) || Model.class.equals(type)) {
-			declaredColumnFields = new LinkedHashSet<Field>();
-			
-			Field[] fields = type.getDeclaredFields();
-			Arrays.sort(fields, new Comparator<Field>() {
-				@Override
-				public int compare(Field field1, Field field2) {
-					return field2.getName().compareTo(field1.getName());
-				}
-			});
+	public static List<Field> getDeclaredColumnFields(Class<?> type) {
+		List<Field> declaredColumnFields = new ArrayList<Field>();
+
+        // is type inheriting from Model?
+		if (Model.class.isAssignableFrom(type)){
+            // get fields from superclasses as well.
+			Field[] fields = type.getFields();
+
 			for (Field field : fields) {
 				if (field.isAnnotationPresent(Column.class)) {
 					declaredColumnFields.add(field);
 				}
 			}
-	
-			Class<?> parentType = type.getSuperclass();
-			if (parentType != null) {
-				declaredColumnFields.addAll(getDeclaredColumnFields(parentType));
-			}
-		}
+
+            Collections.sort(declaredColumnFields, new Comparator<Field>()
+            {
+                @Override
+                public int compare(Field field1, Field field2)
+                {
+                    return field1.getName().compareTo(field2.getName());
+                }
+            });
+        }
 		
 		return declaredColumnFields;		
 	}
-
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PRIVATE METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	public static boolean isSubclassOf(Class<?> type, Class<?> superClass) {
-		if (type.getSuperclass() != null) {
-			if (type.getSuperclass().equals(superClass)) {
-				return true;
-			}
-
-			return isSubclassOf(type.getSuperclass(), superClass);
-		}
-
-		return false;
-	}
-}
\ No newline at end of file
+}
