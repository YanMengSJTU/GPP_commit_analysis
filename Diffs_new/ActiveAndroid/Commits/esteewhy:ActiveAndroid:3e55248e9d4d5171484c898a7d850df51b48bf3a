diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 07ad46c2..b6e58a69 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -19,9 +19,13 @@
 import java.lang.reflect.Field;
 import java.util.List;
 
+import android.content.ContentUris;
 import android.content.ContentValues;
+import android.content.UriMatcher;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
+import android.net.Uri;
+import android.provider.BaseColumns;
 
 import com.activeandroid.annotation.Column;
 import com.activeandroid.content.ContentProvider;
@@ -37,7 +41,7 @@
 	// PRIVATE MEMBERS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	@Column(name = "Id")
+	@Column(name = BaseColumns._ID)
 	private Long mId = null;
 
 	private TableInfo mTableInfo;
@@ -60,7 +64,7 @@ public final Long getId() {
 	}
 
 	public final void delete() {
-		Cache.openDatabase().delete(mTableInfo.getTableName(), "Id=?", new String[] { getId().toString() });
+		Cache.openDatabase().delete(mTableInfo.getTableName(), BaseColumns._ID + "=?", new String[] { getId().toString() });
 		Cache.removeEntity(this);
 
 		Cache.getContext().getContentResolver()
@@ -148,24 +152,34 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 		}
 
 		if (mId == null) {
-			mId = db.insert(mTableInfo.getTableName(), null, values);
+			mId = ContentUris.parseId(Cache.getContext().getContentResolver().insert(ContentProvider.createUri(this.getClass(), null), values));
 		}
 		else {
-			db.update(mTableInfo.getTableName(), values, "Id=" + mId, null);
+			Cache.getContext().getContentResolver().update(
+				ContentProvider.createUri(this.getClass(), null),
+				values,
+				BaseColumns._ID + "=?",
+				new String[] { Long.toString(mId) }
+			);
 		}
 
-		Cache.getContext().getContentResolver()
-				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mId), null);
+		//Cache.getContext().getContentResolver()
+		//		.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mId), null);
 	}
 
 	// Convenience methods
 
 	public static void delete(Class<? extends Model> type, long id) {
-		new Delete().from(type).where("Id=?", id).execute();
+		Cache.getContext().getContentResolver().delete(
+			ContentProvider.createUri(type, null),
+			BaseColumns._ID + "=?",
+			new String[] { Long.toString(id) }
+		);
+		//new Delete().from(type).where(BaseColumns._ID + "=?", id).execute();
 	}
 
 	public static <T extends Model> T load(Class<? extends Model> type, long id) {
-		return new Select().from(type).where("Id=?", id).executeSingle();
+		return new Select().from(type).where(BaseColumns._ID + "=?", id).executeSingle();
 	}
 
 	// Model population
@@ -232,7 +246,7 @@ else if (ReflectionUtils.isModel(fieldType)) {
 
 					Model entity = Cache.getEntity(entityType, entityId);
 					if (entity == null) {
-						entity = new Select().from(entityType).where("Id=?", entityId).executeSingle();
+						entity = new Select().from(entityType).where(BaseColumns._ID + "=?", entityId).executeSingle();
 					}
 
 					value = entity;
diff --git a/src/com/activeandroid/content/ContentProvider.java b/src/com/activeandroid/content/ContentProvider.java
index a876e683..ccac3b0b 100644
--- a/src/com/activeandroid/content/ContentProvider.java
+++ b/src/com/activeandroid/content/ContentProvider.java
@@ -97,7 +97,7 @@ public Uri insert(Uri uri, ContentValues values) {
 
 		if (id != null && id > 0) {
 			Uri retUri = createUri(type, id);
-			notifyChange(retUri);
+			notifyChange(uri);
 
 			return retUri;
 		}
@@ -128,8 +128,10 @@ public int delete(Uri uri, String selection, String[] selectionArgs) {
 	@Override
 	public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
 		Class<? extends Model> type = getModelType(uri);
-		return Cache.openDatabase().query(Cache.getTableName(type), projection, selection, selectionArgs, null, null,
+		Cursor cursor = Cache.openDatabase().query(Cache.getTableName(type), projection, selection, selectionArgs, null, null,
 				sortOrder);
+		cursor.setNotificationUri(getContext().getContentResolver(), uri);
+		return cursor;
 	}
 
 	//////////////////////////////////////////////////////////////////////////////////////
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index a845e1da..7f6f520b 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -24,6 +24,7 @@
 
 import android.database.Cursor;
 import android.os.Build;
+import android.provider.BaseColumns;
 import android.text.TextUtils;
 
 import com.activeandroid.Cache;
@@ -150,7 +151,7 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 				definition += "(" + column.length() + ")";
 			}
 
-			if (name.equals("Id")) {
+			if (name.equals(BaseColumns._ID)) {
 				definition += " PRIMARY KEY AUTOINCREMENT";
 			}
 
@@ -163,7 +164,7 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 			}
 
 			if (FOREIGN_KEYS_SUPPORTED && ReflectionUtils.isModel(type)) {
-				definition += " REFERENCES " + Cache.getTableInfo((Class<? extends Model>) type).getTableName() + "(Id)";
+				definition += " REFERENCES " + Cache.getTableInfo((Class<? extends Model>) type).getTableName() + "(" + BaseColumns._ID + ")";
 				definition += " ON DELETE " + column.onDelete().toString().replace("_", " ");
 				definition += " ON UPDATE " + column.onUpdate().toString().replace("_", " ");
 			}
