diff --git a/src/com/activeandroid/Cache.java b/src/com/activeandroid/Cache.java
index abb0ef54..a120198f 100644
--- a/src/com/activeandroid/Cache.java
+++ b/src/com/activeandroid/Cache.java
@@ -17,7 +17,11 @@
  */
 
 import java.io.File;
+import java.lang.ref.WeakReference;
 import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.locks.ReentrantLock;
 
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
@@ -51,6 +55,8 @@
 	private static Configuration sConfiguration;
 	private static String sDatabaseName;
 
+	private static Map<String, WeakReference<ReentrantLock>> sModelLocks = new HashMap<String, WeakReference<ReentrantLock>>();
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -184,6 +190,16 @@ public static String getIdentifier(Model entity) {
 		return getIdentifier(entity.getClass(), entity.getId());
 	}
 
+	public static String getIdentifier8(Model entity) {
+		String identifier;
+		if ((entity.getId() != null) && (entity.getId() != -1)) {
+			identifier = getIdentifier(entity);
+		} else {
+			identifier = getIdentifier(entity.getClass(), entity.getSpecificId());
+		}
+		return identifier;
+	}
+
 	public static synchronized void addEntity(Model entity) {
 		if (sEntities == null) return;
 		synchronized (sEntities) {
@@ -222,6 +238,15 @@ public static synchronized String getTableName(Class<? extends Model> type) {
 		return sModelInfo.getTableInfo(type).getTableName();
 	}
 
+	public static synchronized ReentrantLock getModelLock(Model model) {
+		WeakReference<ReentrantLock> modelRef = sModelLocks.get(getIdentifier8(model));
+		if ((modelRef == null) || (modelRef.get() == null)) {
+			modelRef = new WeakReference<ReentrantLock>(new ReentrantLock());
+			sModelLocks.put(getIdentifier8(model), modelRef);
+		}
+		return modelRef.get();
+	}
+
 	public static synchronized void beginTransaction() {
 		final int tid = android.os.Process.myTid();
 
diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index a45c5d6d..1435ed52 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -35,6 +35,7 @@
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
+import java.util.concurrent.locks.ReentrantLock;
 
 @SuppressWarnings("unchecked")
 public abstract class Model implements com.novoda.notils.cursor.SimpleCursorList.MarshallerListener<Model> {
@@ -56,6 +57,10 @@
 
 	private boolean enable = true;
 
+	private ReentrantLock mLock;
+
+	private boolean mDeleted = false;
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -269,6 +274,10 @@ public Long save() {
 				}
 			}
 		} else { // update for mId
+			if (mDeleted) {
+				return new Long(-1);
+			}
+
 			if (mSpecificId != null && !mReplace) {
 				if (!ActiveAndroid.inContentProvider()) {
 					delete();
@@ -291,6 +300,10 @@ public Long save() {
 			}
 		}
 
+		if ((mId != -1) && (Cache.getEntity(getClass(), mId) != null)) {
+			Cache.addEntity(this);
+		}
+
 		Cache.getContext().getContentResolver()
 				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mId), null);
 		return mId;
@@ -349,6 +362,50 @@ public static void delete(Class<? extends Model> type, long id) {
 
 	// Model population
 
+	public final void lock() {
+		if (((mId == null) || (mId == -1)) && (mSpecificId != null)) {
+			return;
+		}
+
+		mLock = Cache.getModelLock(this);
+		mLock.lock();
+		load();
+	}
+
+	public final void unlock() {
+		if (mLock != null) {
+			mLock.unlock();
+			mLock = null;
+		}
+	}
+
+	public final void load() {
+		if ((mId == null) || (mId == -1)) {
+			return;
+		}
+
+		Model model = Model.load(getClass(), mId);
+		if (model == null) {
+			mDeleted = true;
+			return;
+		}
+
+		if (model == this) {
+			return;
+		}
+
+		for (Field field : mTableInfo.getFields()) {
+			try {
+				field.setAccessible(true);
+				field.set(this, field.get(model));
+			} catch (IllegalArgumentException e) {
+				e.printStackTrace();
+			} catch (IllegalAccessException e) {
+				e.printStackTrace();
+			}
+		}
+	}
+
 	public final int loadFromCursor(Cursor cursor) {
 		int sizeOfColumnNotFound = 0;
 
