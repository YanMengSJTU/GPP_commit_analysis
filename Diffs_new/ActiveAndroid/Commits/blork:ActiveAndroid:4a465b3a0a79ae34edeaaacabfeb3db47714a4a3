diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 5bcec118..6f5869a0 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -59,11 +59,15 @@ public final Long getId() {
 	}
 
 	public final void delete() {
+		onDelete();
+
 		Cache.openDatabase().delete(mTableInfo.getTableName(), "Id=?", new String[] { getId().toString() });
 		Cache.removeEntity(this);
 	}
 
 	public final void save() {
+		onSave();
+
 		final SQLiteDatabase db = Cache.openDatabase();
 		final ContentValues values = new ContentValues();
 
@@ -266,6 +270,18 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)){
 		return new Select().from(type).where(Cache.getTableName(type) + "." + foreignKey + "=?", getId()).execute();
 	}
 
+	/**
+	 * Called before {@link save} does any work.
+	 */
+	protected void onSave(){
+	}
+
+	/**
+	 * Called before {@link delete} does any work.
+	 */
+	protected void onDelete(){
+	}
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// OVERRIDEN METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
diff --git a/tests/src/com/activeandroid/test/Model/ModelTest.java b/tests/src/com/activeandroid/test/Model/ModelTest.java
index 1f81346d..66bf579c 100644
--- a/tests/src/com/activeandroid/test/Model/ModelTest.java
+++ b/tests/src/com/activeandroid/test/Model/ModelTest.java
@@ -17,26 +17,71 @@
  */
 
 import com.activeandroid.query.Select;
-import com.activeandroid.test.MockModel;
 import com.activeandroid.test.ActiveAndroidTestCase;
+import com.activeandroid.test.MockModel;
 
 public class ModelTest extends ActiveAndroidTestCase {
+	class CallbackMockModel extends MockModel{
+		public Boolean s=false;
+		public Boolean d=false;
 
-	public void testGetIdAfterSave(){		
+		protected void onSave() {s=true;};
+		protected void onDelete() {d=true;};
+	}
+
+	public void testGetIdAfterSave(){
 		MockModel m=new MockModel();
 		m.MockColumn=42;
 		m.save();
 		assertNotNull("getId() returned null after save()",m.getId());
-		
-	}		
-	
-	public void testGetIdAfterSaveAndSelect(){		
+
+	}
+
+	public void testGetIdAfterSaveAndSelect(){
 		MockModel m=new MockModel();
 		m.MockColumn=42;
 		m.save();
 		MockModel m2=new Select("MockColumn").from(MockModel.class).where("MockColumn=?", 42).executeSingle();
-		assertEquals(42, m.MockColumn); //Check 
+		assertEquals(42, m2.MockColumn); //Check
 		assertNotNull("getId() returned null after Select(\"MockColumn\")",m2.getId());
-	}		
+	}
+
+	public void testOnSave(){
+		CallbackMockModel m=new CallbackMockModel();
+		m.MockColumn=42;
+		assertFalse(m.s);
+		m.save();
+		assertTrue(m.s);
+	}
 
+	public void testThrowingOnSave(){
+		ThrowingCallbackMockModel m=new ThrowingCallbackMockModel();
+		m.ThrowExceptions=true;
+		m.MockColumn=42;
+		try{m.save();}
+		catch (RuntimeException e){}
+		assertNull(m.getId());
+	}
+
+	public void testOnDelete(){
+		CallbackMockModel m=new CallbackMockModel();
+		m.MockColumn=42;
+		m.save();
+		assertFalse(m.d);
+		m.delete();
+		assertTrue(m.d);
+	}
+
+	public void testThrowingOnDelete(){
+		ThrowingCallbackMockModel m=new ThrowingCallbackMockModel();
+		m.MockColumn=42;
+		m.save();
+		ThrowingCallbackMockModel m2=new Select("MockColumn").from(ThrowingCallbackMockModel.class).where("MockColumn=?", 42).executeSingle();
+		assertNotNull(m2);
+		m.ThrowExceptions=true;
+		try{m.delete();}
+		catch (RuntimeException e){}
+		m2=new Select("MockColumn").from(ThrowingCallbackMockModel.class).where("MockColumn=?", 42).executeSingle();
+		assertNotNull(m2);
+	}
 }
diff --git a/tests/src/com/activeandroid/test/Model/ThrowingCallbackMockModel.java b/tests/src/com/activeandroid/test/Model/ThrowingCallbackMockModel.java
new file mode 100644
index 00000000..e11c4798
--- /dev/null
+++ b/tests/src/com/activeandroid/test/Model/ThrowingCallbackMockModel.java
@@ -0,0 +1,17 @@
+package com.activeandroid.test.Model;
+
+import com.activeandroid.annotation.Column;
+import com.activeandroid.test.MockModel;
+
+class ThrowingCallbackMockModel extends MockModel{
+	@Column(name="MockColumn")
+	public int MockColumn;
+
+	public boolean ThrowExceptions=false;
+
+	public ThrowingCallbackMockModel() {
+	}
+
+	protected void onSave() {if (ThrowExceptions) throw new RuntimeException();};
+	protected void onDelete() {if (ThrowExceptions) throw new RuntimeException();};
+}
