diff --git a/src/com/activeandroid/Configuration.java b/src/com/activeandroid/Configuration.java
index b197d223..60cb51b4 100644
--- a/src/com/activeandroid/Configuration.java
+++ b/src/com/activeandroid/Configuration.java
@@ -42,6 +42,7 @@
 	private List<Class<? extends Model>> mModelClasses;
 	private List<Class<? extends TypeSerializer>> mTypeSerializers;
 	private int mCacheSize;
+	private String mBootstrapFileName;
 
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
@@ -87,6 +88,10 @@ public boolean isValid() {
 		return mModelClasses != null && mModelClasses.size() > 0;
 	}
 
+	public String getBootstrapFileName() {
+		return mBootstrapFileName;
+	}
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// INNER CLASSES
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -101,9 +106,11 @@ public boolean isValid() {
 		private final static String AA_MODELS = "AA_MODELS";
 		private final static String AA_SERIALIZERS = "AA_SERIALIZERS";
 		private final static String AA_SQL_PARSER = "AA_SQL_PARSER";
+		private final static String AA_BOOTSTRAP_FILE_NAME = "AA_BOOTSTRAP_FILE_NAME";
 
 		private static final int DEFAULT_CACHE_SIZE = 1024;
 		private static final String DEFAULT_DB_NAME = "Application.db";
+		private static final String DEFAULT_BOOTSTRAP_FILE_NAME = "bootstrap.sql";
 		private static final String DEFAULT_SQL_PARSER = SQL_PARSER_LEGACY;
 
 		//////////////////////////////////////////////////////////////////////////////////////
@@ -118,6 +125,7 @@ public boolean isValid() {
 		private String mSqlParser;
 		private List<Class<? extends Model>> mModelClasses;
 		private List<Class<? extends TypeSerializer>> mTypeSerializers;
+		private String mBootstrapFileName;
 
 		//////////////////////////////////////////////////////////////////////////////////////
 		// CONSTRUCTORS
@@ -198,6 +206,11 @@ public Builder setTypeSerializers(Class<? extends TypeSerializer>... typeSeriali
 			return this;
 		}
 
+		public Builder setBootstrapFileName(String bootstrapFileName) {
+			mBootstrapFileName = bootstrapFileName;
+			return this;
+		}
+
 		public Configuration create() {
 			Configuration configuration = new Configuration(mContext);
 			configuration.mCacheSize = mCacheSize;
@@ -243,6 +256,12 @@ public Configuration create() {
 				}
 			}
 
+			if (mBootstrapFileName != null) {
+				configuration.mBootstrapFileName = mBootstrapFileName;
+			} else {
+				configuration.mBootstrapFileName = getMetaDataBootstrapFileNameOrDefault();
+			}
+
 			return configuration;
 		}
 
@@ -278,6 +297,15 @@ private String getMetaDataSqlParserOrDefault() {
 		    return mode;
 		}
 
+		private String getMetaDataBootstrapFileNameOrDefault() {
+			final String bootstrapFileName = ReflectionUtils.getMetaData(mContext, AA_BOOTSTRAP_FILE_NAME);
+			if (bootstrapFileName == null) {
+				return DEFAULT_BOOTSTRAP_FILE_NAME;
+			}
+			return bootstrapFileName;
+		}
+
+
 		private List<Class<? extends Model>> loadModelList(String[] models) {
 			final List<Class<? extends Model>> modelClasses = new ArrayList<Class<? extends Model>>();
 			final ClassLoader classLoader = mContext.getClass().getClassLoader();
diff --git a/src/com/activeandroid/DatabaseHelper.java b/src/com/activeandroid/DatabaseHelper.java
index 7158c5bb..50263c8b 100644
--- a/src/com/activeandroid/DatabaseHelper.java
+++ b/src/com/activeandroid/DatabaseHelper.java
@@ -51,6 +51,8 @@
 
     private final String mSqlParser;
 
+	private final String mBootstrapFileName;
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -59,6 +61,7 @@ public DatabaseHelper(Configuration configuration) {
 		super(configuration.getContext(), configuration.getDatabaseName(), null, configuration.getDatabaseVersion());
 		copyAttachedDatabase(configuration.getContext(), configuration.getDatabaseName());
 		mSqlParser = configuration.getSqlParser();
+		mBootstrapFileName = configuration.getBootstrapFileName();
 	}
 
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -73,15 +76,13 @@ public void onOpen(SQLiteDatabase db) {
 	@Override
 	public void onCreate(SQLiteDatabase db) {
 		executePragmas(db);
-		executeCreate(db);
-		executeMigrations(db, -1, db.getVersion());
+		executeBootstrap(db);
 		executeCreateIndex(db);
 	}
 
 	@Override
 	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
 		executePragmas(db);
-		executeCreate(db);
 		executeMigrations(db, oldVersion, newVersion);
 	}
 
@@ -149,15 +150,18 @@ private void executeCreateIndex(SQLiteDatabase db) {
 		}
 	}
 
-	private void executeCreate(SQLiteDatabase db) {
+	private void executeBootstrap(SQLiteDatabase db) {
 		db.beginTransaction();
 		try {
-			for (TableInfo tableInfo : Cache.getTableInfos()) {
-				db.execSQL(SQLiteUtils.createTableDefinition(tableInfo));
+			if (assetExists(mBootstrapFileName)) {
+				executeSqlScript(db, mBootstrapFileName);
+
+                Log.i("Successfully bootstrapped from " + mBootstrapFileName);
 			}
 			db.setTransactionSuccessful();
-		}
-		finally {
+		} catch (IOException e) {
+			Log.e("Failed to execute bootstrap script", e);
+		} finally {
 			db.endTransaction();
 		}
 	}
@@ -175,10 +179,10 @@ private boolean executeMigrations(SQLiteDatabase db, int oldVersion, int newVers
 						final int version = Integer.valueOf(file.replace(".sql", ""));
 
 						if (version > oldVersion && version <= newVersion) {
-							executeSqlScript(db, file);
+							executeSqlScript(db, MIGRATION_PATH + "/" + file);
 							migrationExecuted = true;
 
-							Log.i(file + " executed succesfully.");
+							Log.i(file + " executed successfully.");
 						}
 					}
 					catch (NumberFormatException e) {
@@ -203,7 +207,7 @@ private void executeSqlScript(SQLiteDatabase db, String file) {
 	    InputStream stream = null;
 
 		try {
-		    stream = Cache.getContext().getAssets().open(MIGRATION_PATH + "/" + file);
+		    stream = Cache.getContext().getAssets().open(file);
 
 		    if (Configuration.SQL_PARSER_DELIMITED.equalsIgnoreCase(mSqlParser)) {
 		        executeDelimitedSqlScript(db, stream);
@@ -254,4 +258,8 @@ private void executeLegacySqlScript(SQLiteDatabase db, InputStream stream) throw
 
         }
 	}
+
+	private static boolean assetExists(String name) throws IOException {
+		return Arrays.asList(Cache.getContext().getAssets().list("")).contains(name);
+	}
 }
