diff --git a/src/com/activeandroid/Cache.java b/src/com/activeandroid/Cache.java
index 6495e379..ed01ce66 100644
--- a/src/com/activeandroid/Cache.java
+++ b/src/com/activeandroid/Cache.java
@@ -45,6 +45,8 @@
 
 	private static boolean sIsInitialized = false;
 
+    private static boolean sIsEntityCacheEnabled = true;
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -65,6 +67,7 @@ public static synchronized void initialize(Configuration configuration) {
 		sContext = configuration.getContext();
 		sModelInfo = new ModelInfo(configuration);
 		sDatabaseHelper = new DatabaseHelper(configuration);
+        sIsEntityCacheEnabled = configuration.isEntityCacheEnabled();
 
 		// TODO: It would be nice to override sizeOf here and calculate the memory
 		// actually used, however at this point it seems like the reflection
@@ -92,6 +95,7 @@ public static synchronized void dispose() {
 		sDatabaseHelper = null;
 
 		sIsInitialized = false;
+        sIsEntityCacheEnabled = true;
 
 		Log.v("ActiveAndroid disposed. Call initialize to use library.");
 	}
@@ -102,6 +106,10 @@ public static boolean isInitialized() {
 		return sIsInitialized;
 	}
 
+    public static boolean isEntityCacheEnabled() {
+        return sIsEntityCacheEnabled;
+    }
+
 	public static synchronized SQLiteDatabase openDatabase() {
 		return sDatabaseHelper.getWritableDatabase();
 	}
@@ -126,16 +134,16 @@ public static String getIdentifier(Model entity) {
 		return getIdentifier(entity.getClass(), entity.getId());
 	}
 
-	public static synchronized void addEntity(Model entity) {
-		sEntities.put(getIdentifier(entity), entity);
+	public static void addEntity(Model entity) {
+		if (sIsEntityCacheEnabled) sEntities.put(getIdentifier(entity), entity);
 	}
 
-	public static synchronized Model getEntity(Class<? extends Model> type, long id) {
-		return sEntities.get(getIdentifier(type, id));
+	public static Model getEntity(Class<? extends Model> type, long id) {
+		return sIsEntityCacheEnabled ? sEntities.get(getIdentifier(type, id)) : null;
 	}
 
-	public static synchronized void removeEntity(Model entity) {
-		sEntities.remove(getIdentifier(entity));
+	public static void removeEntity(Model entity) {
+		if (sIsEntityCacheEnabled) sEntities.remove(getIdentifier(entity));
 	}
 
 	// Model cache
diff --git a/src/com/activeandroid/Configuration.java b/src/com/activeandroid/Configuration.java
index b197d223..eb6fefe7 100644
--- a/src/com/activeandroid/Configuration.java
+++ b/src/com/activeandroid/Configuration.java
@@ -42,6 +42,7 @@
 	private List<Class<? extends Model>> mModelClasses;
 	private List<Class<? extends TypeSerializer>> mTypeSerializers;
 	private int mCacheSize;
+    private Boolean mCacheEntities = true;
 
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
@@ -83,6 +84,10 @@ public int getCacheSize() {
 		return mCacheSize;
 	}
 
+    public boolean isEntityCacheEnabled() {
+        return mCacheEntities;
+    }
+
 	public boolean isValid() {
 		return mModelClasses != null && mModelClasses.size() > 0;
 	}
@@ -113,6 +118,7 @@ public boolean isValid() {
 		private Context mContext;
 
 		private Integer mCacheSize;
+        private Boolean mCacheEntities;
 		private String mDatabaseName;
 		private Integer mDatabaseVersion;
 		private String mSqlParser;
@@ -126,6 +132,7 @@ public boolean isValid() {
 		public Builder(Context context) {
 			mContext = context.getApplicationContext();
 			mCacheSize = DEFAULT_CACHE_SIZE;
+            mCacheEntities = Boolean.TRUE;
 		}
 
 		//////////////////////////////////////////////////////////////////////////////////////
@@ -137,6 +144,11 @@ public Builder setCacheSize(int cacheSize) {
 			return this;
 		}
 
+        public Builder setCacheEntities(boolean entityCachingEnabled) {
+            mCacheEntities = entityCachingEnabled;
+            return this;
+        }
+
 		public Builder setDatabaseName(String databaseName) {
 			mDatabaseName = databaseName;
 			return this;
@@ -201,6 +213,7 @@ public Builder setTypeSerializers(Class<? extends TypeSerializer>... typeSeriali
 		public Configuration create() {
 			Configuration configuration = new Configuration(mContext);
 			configuration.mCacheSize = mCacheSize;
+            configuration.mCacheEntities = mCacheEntities;
 
 			// Get database name from meta-data
 			if (mDatabaseName != null) {
