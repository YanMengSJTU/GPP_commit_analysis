diff --git a/build.gradle b/build.gradle
index 6b65b1f5..94847557 100644
--- a/build.gradle
+++ b/build.gradle
@@ -9,7 +9,7 @@ buildscript {
         google()
 	}
     dependencies {
-        classpath 'com.android.tools.build:gradle:3.1.2'
+        classpath 'com.android.tools.build:gradle:3.1.3'
     }
 
 }
diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index bdd4984e..1939dbea 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -45,14 +45,14 @@
 	private Long mId = null;
 
 	private final TableInfo mTableInfo;
-	private final String idName;
+	private final String idDBColumnName;
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
 
 	public Model() {
 		mTableInfo = Cache.getTableInfo(getClass());
-		idName = mTableInfo.getIdName();
+		idDBColumnName = mTableInfo.getIdDBFieldName();
 	}
 
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -68,7 +68,7 @@ protected void setId(Long id) {
 	}
 
 	public final void delete() {
-		Cache.openDatabase().delete(mTableInfo.getTableName(), idName+"=?", new String[] { getId().toString() });
+		Cache.openDatabase().delete(mTableInfo.getTableName(), idDBColumnName +"=?", new String[] { getId().toString() });
 		Cache.removeEntity(this);
 
 		Cache.getContext().getContentResolver()
@@ -160,7 +160,7 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 			setId(id);
 		}
 		else {
-			db.update(mTableInfo.getTableName(), values, idName+"=" + getId(), null);
+			db.update(mTableInfo.getTableName(), values, idDBColumnName +"=" + getId(), null);
 		}
 
 		Cache.getContext().getContentResolver()
@@ -172,12 +172,12 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 
 	public static void delete(Class<? extends Model> type, long id) {
 		TableInfo tableInfo = Cache.getTableInfo(type);
-		new Delete().from(type).where(tableInfo.getIdName()+"=?", id).execute();
+		new Delete().from(type).where(tableInfo.getIdDBFieldName()+"=?", id).execute();
 	}
 
 	public static <T extends Model> T load(Class<T> type, long id) {
 		TableInfo tableInfo = Cache.getTableInfo(type);
-		return (T) new Select().from(type).where(tableInfo.getIdName()+"=?", id).executeSingle();
+		return (T) new Select().from(type).where(tableInfo.getIdDBFieldName()+"=?", id).executeSingle();
 	}
 
 	// Model population
@@ -191,7 +191,7 @@ public final void loadFromCursor(Cursor cursor) {
 		for (Field field : mTableInfo.getFields()) {
 			final String fieldName = mTableInfo.getColumnName(field);
 			Class<?> fieldType = field.getType();
-			final int columnIndex = columnsOrdered.indexOf(fieldName);
+			final int columnIndex = TableInfo.getColumnIndex(columnsOrdered, fieldName);
 
 			if (columnIndex < 0) {
 				continue;
@@ -224,7 +224,7 @@ else if (fieldType.equals(Integer.class) || fieldType.equals(int.class)) {
 				}
 				else if (fieldType.equals(Long.class) || fieldType.equals(long.class)) {
 					value = cursor.getLong(columnIndex);
-					if(fieldName == mTableInfo.getIdName() ){
+					if(fieldName.compareToIgnoreCase(mTableInfo.getIdDBFieldName()) == 0 ){
 						setId((Long) value);
 					}
 				}
@@ -252,7 +252,7 @@ else if (ReflectionUtils.isModel(fieldType)) {
 
 					Model entity = Cache.getEntity(entityType, entityId);
 					if (entity == null) {
-						entity = new Select().from(entityType).where(idName+"=?", entityId).executeSingle();
+						entity = new Select().from(entityType).where(idDBColumnName +"=?", entityId).executeSingle();
 					}
 
 					value = entity;
diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index f281e066..f01af7fc 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -38,10 +38,21 @@
 
 	private Class<? extends Model> mType;
 	private String mTableName;
-	private String mIdName = Table.DEFAULT_ID_NAME;
+	private String mIdDBFieldName = Table.DEFAULT_ID_NAME;
 
 	private Map<Field, String> mColumnNames = new LinkedHashMap<Field, String>();
 
+	public static int getColumnIndex(List<String> colmnNames, String name){
+	    int index = -1;
+	    for(int i = 0; i < colmnNames.size(); i++){
+	        if(colmnNames.get(i).compareToIgnoreCase(name)== 0){
+	            index = i;
+	            break;
+            }
+        }
+        return index;
+    }
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -53,7 +64,7 @@ public TableInfo(Class<? extends Model> type) {
 
         if (tableAnnotation != null) {
 			mTableName = tableAnnotation.name();
-			mIdName = tableAnnotation.id();
+			mIdDBFieldName = tableAnnotation.id();
 		}
 		else {
 			mTableName = type.getSimpleName();
@@ -61,7 +72,7 @@ public TableInfo(Class<? extends Model> type) {
 
         // Manually add the id column since it is not declared like the other columns.
         Field idField = getIdField(type);
-        mColumnNames.put(idField, mIdName);
+        mColumnNames.put(idField, mIdDBFieldName);
 
         List<Field> fields = new LinkedList<Field>(ReflectionUtils.getDeclaredColumnFields(type));
         Collections.reverse(fields);
@@ -92,8 +103,8 @@ public String getTableName() {
 		return mTableName;
 	}
 
-	public String getIdName() {
-		return mIdName;
+	public String getIdDBFieldName() {
+		return mIdDBFieldName;
 	}
 
 	public Collection<Field> getFields() {
@@ -108,11 +119,11 @@ public String getColumnName(Field field) {
     private Field getIdField(Class<?> type) {
         if (Model.class.isAssignableFrom(type)) {
             try {
-                if(mIdName ==  Table.DEFAULT_ID_NAME){
+                //if(mIdFieldName ==  Table.DEFAULT_ID_NAME){
                     return Model.class.getDeclaredField("mId");
-                }else {
-                    return type.getDeclaredField(mIdName);
-                }
+                //}else {
+                //    return type.getDeclaredField(mIdFieldName);
+                //}
             }
             catch (NoSuchFieldException e) {
                 Log.e("Impossible!", e.toString());
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index e08456bf..934bef10 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -25,7 +25,6 @@
 import com.activeandroid.TableInfo;
 import com.activeandroid.annotation.Column;
 import com.activeandroid.annotation.Column.ConflictAction;
-import com.activeandroid.annotation.Table;
 import com.activeandroid.serializer.TypeSerializer;
 
 import java.lang.Long;
@@ -216,7 +215,7 @@ public static void createIndexColumnDefinition(TableInfo tableInfo, Field field)
 		final String name = tableInfo.getColumnName(field);
 		final Column column = field.getAnnotation(Column.class);
 
-        if (field.getName().equals(tableInfo.getIdName())) {
+        if (field.getName().equals("mId")) {
             return;
         }
 
@@ -292,7 +291,7 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 
 		if (!TextUtils.isEmpty(definition)) {
 
-			if (name.equals(tableInfo.getIdName())) {
+			if (name.equals(tableInfo.getIdDBFieldName())) {
 				definition.append(" PRIMARY KEY AUTOINCREMENT");
 			}else if(column!=null){
 				if (column.length() > -1) {
@@ -315,7 +314,7 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 			if (FOREIGN_KEYS_SUPPORTED && ReflectionUtils.isModel(type)) {
 				definition.append(" REFERENCES ");
 				definition.append(Cache.getTableInfo((Class<? extends Model>) type).getTableName());
-				definition.append("("+tableInfo.getIdName()+")");
+				definition.append("("+tableInfo.getIdDBFieldName()+")");
 				definition.append(" ON DELETE ");
 				definition.append(column.onDelete().toString().replace("_", " "));
 				definition.append(" ON UPDATE ");
@@ -332,20 +331,22 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 	@SuppressWarnings("unchecked")
 	public static <T extends Model> List<T> processCursor(Class<? extends Model> type, Cursor cursor) {
 		TableInfo tableInfo = Cache.getTableInfo(type);
-		String idName = tableInfo.getIdName();
+		String idName = tableInfo.getIdDBFieldName();
 		final List<T> entities = new ArrayList<T>();
+		/**
+		 * Obtain the columns ordered to fix issue #106 (https://github.com/pardom/ActiveAndroid/issues/106)
+		 * when the cursor have multiple columns with same name obtained from join tables.
+		 */
+		List<String> columnsOrdered = new ArrayList<String>(Arrays.asList(cursor.getColumnNames()));
+		int idColumnIndex = TableInfo.getColumnIndex(columnsOrdered, idName);
 
 		try {
 			Constructor<?> entityConstructor = type.getConstructor();
 
 			if (cursor.moveToFirst()) {
-                /**
-                 * Obtain the columns ordered to fix issue #106 (https://github.com/pardom/ActiveAndroid/issues/106)
-                 * when the cursor have multiple columns with same name obtained from join tables.
-                 */
-                List<String> columnsOrdered = new ArrayList<String>(Arrays.asList(cursor.getColumnNames()));
+
 				do {
-					int idColumnIndex = columnsOrdered.indexOf(idName);
+
 					Model entity = null;
 					if(idColumnIndex != -1) {
 						entity = Cache.getEntity(type, cursor.getLong(idColumnIndex));
