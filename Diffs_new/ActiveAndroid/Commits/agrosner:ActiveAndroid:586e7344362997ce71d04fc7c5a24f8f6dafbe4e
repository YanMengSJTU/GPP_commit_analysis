diff --git a/src/com/activeandroid/DBManager.java b/src/com/activeandroid/DBManager.java
index afd36962..a6edce85 100644
--- a/src/com/activeandroid/DBManager.java
+++ b/src/com/activeandroid/DBManager.java
@@ -329,7 +329,7 @@ public boolean fetchObject(final ObjectReceiver<OBJECT_CLASS> objectReceiver, fi
             processOnForeground(new Runnable() {
                 @Override
                 public void run() {
-                    requestObject(objectReceiver);
+                    requestObject(objectReceiver, uid);
                 }
             });
             return false;
diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 862c3cf7..9efeb0f8 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -20,6 +20,7 @@
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 
+import com.activeandroid.annotation.ForeignKey;
 import com.activeandroid.annotation.PrimaryKey;
 import com.activeandroid.content.ContentProvider;
 import com.activeandroid.query.Delete;
@@ -74,7 +75,7 @@ public final void save() {
 		final ContentValues values = new ContentValues();
 
 		for (Field field : mTableInfo.getFields()) {
-			final String fieldName = mTableInfo.getColumnName(field);
+			String fieldName = mTableInfo.getColumnName(field);
 			Class<?> fieldType = field.getType();
 
 			field.setAccessible(true);
@@ -134,7 +135,11 @@ else if (fieldType.equals(String.class)) {
 				else if (fieldType.equals(Byte[].class) || fieldType.equals(byte[].class)) {
 					values.put(fieldName, (byte[]) value);
 				}
-				else if (ReflectionUtils.isModel(fieldType)) {
+				else if (field.isAnnotationPresent(ForeignKey.class) && ReflectionUtils.isModel(fieldType)) {
+                    ForeignKey key = field.getAnnotation(ForeignKey.class);
+                    if(!key.value().equals("")){
+                        fieldName = field.getAnnotation(ForeignKey.class).value();
+                    }
 					values.put(fieldName, ((Model) value).getId());
 				}
 				else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
@@ -254,7 +259,7 @@ else if (fieldType.equals(String.class)) {
 				else if (fieldType.equals(Byte[].class) || fieldType.equals(byte[].class)) {
 					value = cursor.getBlob(columnIndex);
 				}
-				else if (ReflectionUtils.isModel(fieldType)) {
+				else if (field.isAnnotationPresent(ForeignKey.class) && ReflectionUtils.isModel(fieldType)) {
 					final String entityId = cursor.getString(columnIndex);
 					final Class<? extends Model> entityType = (Class<? extends Model>) fieldType;
 
diff --git a/src/com/activeandroid/annotation/ForeignKey.java b/src/com/activeandroid/annotation/ForeignKey.java
index 7bff674b..dcf9d490 100644
--- a/src/com/activeandroid/annotation/ForeignKey.java
+++ b/src/com/activeandroid/annotation/ForeignKey.java
@@ -14,5 +14,5 @@
 @Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface ForeignKey {
-    String value();
+    String value() default "";
 }
diff --git a/src/com/activeandroid/exception/PrimaryKeyCannotBeNullException.java b/src/com/activeandroid/exception/PrimaryKeyCannotBeNullException.java
new file mode 100644
index 00000000..68c21e83
--- /dev/null
+++ b/src/com/activeandroid/exception/PrimaryKeyCannotBeNullException.java
@@ -0,0 +1,13 @@
+package com.activeandroid.exception;
+
+/**
+ * Created by andrewgrosner
+ * Date: 12/26/13
+ * Contributors:
+ * Description:
+ */
+public class PrimaryKeyCannotBeNullException extends Throwable {
+    public PrimaryKeyCannotBeNullException(String s) {
+        super(s);
+    }
+}
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index a96b39ca..677a8d04 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -27,6 +27,7 @@
 import com.activeandroid.annotation.Column;
 import com.activeandroid.annotation.ForeignKey;
 import com.activeandroid.annotation.PrimaryKey;
+import com.activeandroid.exception.PrimaryKeyCannotBeNullException;
 import com.activeandroid.serializer.TypeSerializer;
 
 import java.lang.reflect.Constructor;
@@ -304,7 +305,9 @@ public static String getWhereStatement(Model model, TableInfo tableInfo){
             field.setAccessible(true);
             try {
                 Object object = field.get(model);
-                if(object instanceof Number){
+                if(object==null){
+                    throw new PrimaryKeyCannotBeNullException("The primary key: " + field.getName() + " cannot be null.");
+                } else if(object instanceof Number){
                     sql = sql.replaceFirst("\\?", object.toString());
                 } else {
                     String escaped = DatabaseUtils.sqlEscapeString(object.toString());
