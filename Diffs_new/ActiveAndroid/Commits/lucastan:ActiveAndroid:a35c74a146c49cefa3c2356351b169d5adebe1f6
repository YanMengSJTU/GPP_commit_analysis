diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 26ccbefd..e27fddfd 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -73,63 +73,75 @@ public final void delete() {
 				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mId), null);
 	}
 
+	private ContentValues createContentValues() {
+	    // The exceptions should never happen, so we put the try-catch outside
+	    // for better performance.
+        final ContentValues values = new ContentValues();
+
+	    try {
+	        for (Field field : mTableInfo.getFields()) {
+	            final String fieldName = mTableInfo.getColumnName(field);
+	            Class<?> fieldType = field.getType();
+                Object value = field.get(this);
+
+                if (value != null) {
+                    final TypeSerializer typeSerializer = Cache.getParserForType(fieldType);
+                    if (typeSerializer != null) {
+                        // serialize data
+                        value = typeSerializer.serialize(value);
+                        // set new object type
+                        if (value != null) {
+                            fieldType = value.getClass();
+                            // check that the serializer returned what it promised
+                            if (!fieldType.equals(typeSerializer.getSerializedType())) {
+                                Log.w(String.format("TypeSerializer returned wrong type: expected a %s but got a %s",
+                                        typeSerializer.getSerializedType(), fieldType));
+                            }
+                        }
+                    }
+                }
+
+                SQLiteUtils.put(values, fieldType, fieldName, value);       
+	        }
+	    }
+        catch (IllegalArgumentException e) {
+            Log.e(e.getClass().getName(), e);
+        }
+        catch (IllegalAccessException e) {
+            Log.e(e.getClass().getName(), e);
+        }
+        catch (InvocationTargetException e) {
+            Log.e(e.getClass().getName(), e);
+        }
+	    
+        return values;
+	}
+	
 	/**
 	 * Updates this model if it has an ID; else inserts it.
 	 * @return If inserting, returns the new ID or -1 on failure; else returns the existing ID.
 	 */
 	public final Long save() {
-		final SQLiteDatabase db = Cache.openDatabase();
-		final ContentValues values = new ContentValues();
-
-		for (Field field : mTableInfo.getFields()) {
-			final String fieldName = mTableInfo.getColumnName(field);
-			Class<?> fieldType = field.getType();
-
-			field.setAccessible(true);
-
-			try {
-				Object value = field.get(this);
-
-				if (value != null) {
-					final TypeSerializer typeSerializer = Cache.getParserForType(fieldType);
-					if (typeSerializer != null) {
-						// serialize data
-						value = typeSerializer.serialize(value);
-						// set new object type
-						if (value != null) {
-							fieldType = value.getClass();
-							// check that the serializer returned what it promised
-							if (!fieldType.equals(typeSerializer.getSerializedType())) {
-								Log.w(String.format("TypeSerializer returned wrong type: expected a %s but got a %s",
-										typeSerializer.getSerializedType(), fieldType));
-							}
-						}
-					}
-				}
-
-				SQLiteUtils.put(values, fieldType, fieldName, value);
-			}
-			catch (IllegalArgumentException e) {
-				Log.e(e.getClass().getName(), e);
-			}
-			catch (IllegalAccessException e) {
-				Log.e(e.getClass().getName(), e);
-			}
-            catch (InvocationTargetException e) {
-                Log.e(e.getClass().getName(), e);
-            }
-		}
-
-		if (mId == null) {
-			long newID = db.insert(mTableInfo.getTableName(), null, values);
-			if (newID == -1L)
-			    // returns -1 instead of null for backwards compatibility.
-			    return -1L;
-			mId = newID;
-		}
-		else {
-			db.update(mTableInfo.getTableName(), values, idName+"=" + mId, null);
-		}
+	    ContentValues values = createContentValues();
+		SQLiteDatabase db = null;
+		
+	    try {
+	        db = Cache.openDatabase();
+    		if (mId == null) {
+    			long newID = db.insert(mTableInfo.getTableName(), null, values);
+    			if (newID == -1L)
+    			    // returns -1 instead of null for backwards compatibility.
+    			    return -1L;
+    			mId = newID;
+    		}
+    		else {
+    			db.update(mTableInfo.getTableName(), values, idName+"=" + mId, null);
+    		}
+	    }
+        finally {
+            if (db != null) 
+                db.close();
+        }
 
 		Cache.getContext().getContentResolver()
 				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mId), null);
@@ -200,7 +212,6 @@ public static void delete(Class<? extends Model> type, long id) {
                 if (val instanceof Model)
                     val = clone((Model)val);
                 
-                field.setAccessible(true);
                 field.set(newInstance, val);
             }
 
@@ -227,54 +238,52 @@ public final void loadFromCursor(Cursor cursor) {
          * when the cursor have multiple columns with same name obtained from join tables.
          */
         String[] columnsOrdered = cursor.getColumnNames();
-		for (Field field : mTableInfo.getFields()) {
-			final String fieldName = mTableInfo.getColumnName(field);
-			Class<?> fieldType = field.getType();
-			final int columnIndex = SQLiteUtils.indexOfIgnoreCase(columnsOrdered, fieldName);
-			 
-			if (columnIndex < 0) {
-				continue;
-			}
-
-			try {
-				boolean columnIsNull = cursor.isNull(columnIndex);
-				TypeSerializer typeSerializer = Cache.getParserForType(fieldType);
-				Object value = null;
-
-				if (!columnIsNull) {
-	                if (typeSerializer != null) {
-	                    Class<?> getType = typeSerializer.getSerializedType();
-	                    value = SQLiteUtils.get(cursor, getType, columnIndex);
-	                    value = typeSerializer.deserialize(value);
-	                }
-	                else
-	                    value = SQLiteUtils.get(cursor, fieldType, columnIndex);
-				}
-
-				// If the field accepts null and the value is indeed null, then
-				// set it to null.
-				if (value != null || !fieldType.isPrimitive()) {
-		            field.setAccessible(true);
-					field.set(this, value);
-				}
-			}
-			catch (IllegalArgumentException e) {
-				Log.e(e.getClass().getName(), e);
-			}
-			catch (IllegalAccessException e) {
-				Log.e(e.getClass().getName(), e);
-			}
-			catch (SecurityException e) {
-				Log.e(e.getClass().getName(), e);
-			}
-            catch (InvocationTargetException e) {
-                Log.e(e.getClass().getName(), e);
+        // The exceptions should never happen, so we put the try-catch outside
+        // for better performance.
+        try {
+    		for (Field field : mTableInfo.getFields()) {
+    			final String fieldName = mTableInfo.getColumnName(field);
+    			Class<?> fieldType = field.getType();
+    			final int columnIndex = SQLiteUtils.indexOfIgnoreCase(columnsOrdered, fieldName);
+    			 
+    			if (columnIndex < 0) {
+    				continue;
+    			}
+    
+    			boolean columnIsNull = cursor.isNull(columnIndex);
+    			TypeSerializer typeSerializer = Cache.getParserForType(fieldType);
+    			Object value = null;
+    
+    			if (!columnIsNull) {
+                    if (typeSerializer != null) {
+                        Class<?> getType = typeSerializer.getSerializedType();
+                        value = SQLiteUtils.get(cursor, getType, columnIndex);
+                        value = typeSerializer.deserialize(value);
+                    }
+                    else
+                        value = SQLiteUtils.get(cursor, fieldType, columnIndex);
+    			}
+    
+    			// If the field accepts null and the value is indeed null, then
+    			// set it to null.
+    			if (value != null || !fieldType.isPrimitive()) {
+    				field.set(this, value);
+    			}
+    		}
+    		
+            if (mId != null) {
+                Cache.addEntity(this);
             }
-		}
-
-		if (mId != null) {
-			Cache.addEntity(this);
-		}
+        }
+        catch (IllegalArgumentException e) {
+            Log.e(e.getClass().getName(), e);
+        }
+        catch (IllegalAccessException e) {
+            Log.e(e.getClass().getName(), e);
+        }
+        catch (InvocationTargetException e) {
+            Log.e(e.getClass().getName(), e);
+        }
 	}
 
 	//////////////////////////////////////////////////////////////////////////////////////
