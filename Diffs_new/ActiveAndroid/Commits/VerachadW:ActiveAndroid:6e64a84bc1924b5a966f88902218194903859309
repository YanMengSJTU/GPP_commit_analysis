diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 24ec200b..d4da56b3 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -82,12 +82,13 @@ public void save() {
         TableInfo tableInfo = Cache.getTableInfo(getClass());
 
         Field primaryField = tableInfo.getPrimaryKey();
+        final String primaryColumnName = tableInfo.getPrimaryKeyColumnName();
 
 		for (Field field : tableInfo.getFields()) {
 
             if (tableInfo.isRestrictForManualUpdate(field)) continue;
 
-			final String fieldName = tableInfo.getColumnName(field);
+			final String fieldColumnName = tableInfo.getColumnName(field);
 			Class<?> fieldType = field.getType();
 
 			field.setAccessible(true);
@@ -116,47 +117,47 @@ public void save() {
 				// TODO: Find a smarter way to do this? This if block is necessary because we
 				// can't know the type until runtime.
 				if (value == null) {
-					values.putNull(fieldName);
+					values.putNull(fieldColumnName);
 				}
 				else if (fieldType.equals(Byte.class) || fieldType.equals(byte.class)) {
-					values.put(fieldName, (Byte) value);
+					values.put(fieldColumnName, (Byte) value);
 				}
 				else if (fieldType.equals(Short.class) || fieldType.equals(short.class)) {
-					values.put(fieldName, (Short) value);
+					values.put(fieldColumnName, (Short) value);
 				}
 				else if (fieldType.equals(Integer.class) || fieldType.equals(int.class)) {
-					values.put(fieldName, (Integer) value);
+					values.put(fieldColumnName, (Integer) value);
 				}
 				else if (fieldType.equals(Long.class) || fieldType.equals(long.class)) {
-					values.put(fieldName, (Long) value);
-                    if (primaryField.getType().equals(fieldType) && primaryField.getName().equals(fieldName)){
+					values.put(fieldColumnName, (Long) value);
+                    if (primaryField.getType().equals(fieldType) && primaryColumnName.equals(fieldColumnName)){
                         setId((Long) value);
                     }
 				}
 				else if (fieldType.equals(Float.class) || fieldType.equals(float.class)) {
-					values.put(fieldName, (Float) value);
+					values.put(fieldColumnName, (Float) value);
 				}
 				else if (fieldType.equals(Double.class) || fieldType.equals(double.class)) {
-					values.put(fieldName, (Double) value);
+					values.put(fieldColumnName, (Double) value);
 				}
 				else if (fieldType.equals(Boolean.class) || fieldType.equals(boolean.class)) {
-					values.put(fieldName, (Boolean) value);
+					values.put(fieldColumnName, (Boolean) value);
 				}
 				else if (fieldType.equals(Character.class) || fieldType.equals(char.class)) {
-					values.put(fieldName, value.toString());
+					values.put(fieldColumnName, value.toString());
 				}
 				else if (fieldType.equals(String.class)) {
-					values.put(fieldName, value.toString());
+					values.put(fieldColumnName, value.toString());
 				}
 				else if (fieldType.equals(Byte[].class) || fieldType.equals(byte[].class)) {
-					values.put(fieldName, (byte[]) value);
+					values.put(fieldColumnName, (byte[]) value);
 				}
 				else if (ReflectionUtils.isModel(fieldType)) {
                     if (((Model) value).getId() == 0L) ((Model) value).save();
-					values.put(fieldName, ((Model) value).getId());
+					values.put(fieldColumnName, ((Model) value).getId());
 				}
 				else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
-					values.put(fieldName, ((Enum<?>) value).name());
+					values.put(fieldColumnName, ((Enum<?>) value).name());
 				}
 			}
 			catch (IllegalArgumentException e) {
