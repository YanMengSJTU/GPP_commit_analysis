diff --git a/src/com/activeandroid/ActiveAndroid.java b/src/com/activeandroid/ActiveAndroid.java
index c58c8efd..a8ec2c8c 100644
--- a/src/com/activeandroid/ActiveAndroid.java
+++ b/src/com/activeandroid/ActiveAndroid.java
@@ -22,34 +22,50 @@
 import com.activeandroid.util.Log;
 
 public final class ActiveAndroid {
+
+	private static Cache cache;
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	public static void initialize(Context context) {
-		initialize(new Configuration.Builder(context).create());
+	public static Cache initialize(Context context) {
+		return initialize(new Configuration.Builder(context).create());
 	}
 
-	public static void initialize(Configuration configuration) {
-		initialize(configuration, false);
+	public static Cache initialize(Configuration configuration) {
+		return initialize(configuration, false);
 	}
 
-	public static void initialize(Context context, boolean loggingEnabled) {
-		initialize(new Configuration.Builder(context).create(), loggingEnabled);
+	public static Cache initialize(Context context, boolean loggingEnabled) {
+		return initialize(new Configuration.Builder(context).create(), loggingEnabled);
 	}
 
-	public static void initialize(Configuration configuration, boolean loggingEnabled) {
+	public static Cache initialize(Configuration configuration, boolean loggingEnabled) {
 		// Set logging enabled first
 		setLoggingEnabled(loggingEnabled);
-		Cache.initialize(configuration);
+		cache = new Cache(configuration);
+		return cache;
+	}
+
+	public static Cache getCache(){
+		return cache;
 	}
 
 	public static void clearCache() {
-		Cache.clear();
+		clearCache(cache);
+	}
+
+	public static void clearCache(Cache cache) {
+		cache.clear();
 	}
 
 	public static void dispose() {
-		Cache.dispose();
+		dispose(cache);
+	}
+
+	public static void dispose(Cache cache) {
+		cache.dispose();
 	}
 
 	public static void setLoggingEnabled(boolean enabled) {
@@ -57,30 +73,58 @@ public static void setLoggingEnabled(boolean enabled) {
 	}
 
 	public static SQLiteDatabase getDatabase() {
-		return Cache.openDatabase();
+		return getDatabase(cache);
+	}
+
+	public static SQLiteDatabase getDatabase(Cache cache) {
+		return cache.openDatabase();
 	}
 
 	public static void beginTransaction() {
-		Cache.openDatabase().beginTransaction();
+		beginTransaction(cache);
+	}
+
+	public static void beginTransaction(Cache cache) {
+		cache.openDatabase().beginTransaction();
 	}
 
 	public static void endTransaction() {
-		Cache.openDatabase().endTransaction();
+		endTransaction(cache);
+	}
+
+	public static void endTransaction(Cache cache) {
+		cache.openDatabase().endTransaction();
 	}
 
 	public static void setTransactionSuccessful() {
-		Cache.openDatabase().setTransactionSuccessful();
+		setTransactionSuccessful(cache);
+	}
+
+	public static void setTransactionSuccessful(Cache cache) {
+		cache.openDatabase().setTransactionSuccessful();
 	}
 
 	public static boolean inTransaction() {
-		return Cache.openDatabase().inTransaction();
+		return inTransaction(cache);
+	}
+
+	public static boolean inTransaction(Cache cache) {
+		return cache.openDatabase().inTransaction();
 	}
 
 	public static void execSQL(String sql) {
-		Cache.openDatabase().execSQL(sql);
+		execSQL(cache, sql);
+	}
+
+	public static void execSQL(Cache cache, String sql) {
+		cache.openDatabase().execSQL(sql);
 	}
 
 	public static void execSQL(String sql, Object[] bindArgs) {
-		Cache.openDatabase().execSQL(sql, bindArgs);
+		execSQL(cache, sql, bindArgs);
+	}
+
+	public static void execSQL(Cache cache, String sql, Object[] bindArgs) {
+		cache.openDatabase().execSQL(sql, bindArgs);
 	}
 }
diff --git a/src/com/activeandroid/Cache.java b/src/com/activeandroid/Cache.java
index 6495e379..f5db3708 100644
--- a/src/com/activeandroid/Cache.java
+++ b/src/com/activeandroid/Cache.java
@@ -36,27 +36,20 @@
 	// PRIVATE MEMBERS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	private static Context sContext;
+	private Context sContext;
 
-	private static ModelInfo sModelInfo;
-	private static DatabaseHelper sDatabaseHelper;
+	private ModelInfo sModelInfo;
+	private DatabaseHelper sDatabaseHelper;
 
-	private static LruCache<String, Model> sEntities;
+	private LruCache<String, Model> sEntities;
 
-	private static boolean sIsInitialized = false;
+	private boolean sIsInitialized = false;
 
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	private Cache() {
-	}
-
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PUBLIC METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	public static synchronized void initialize(Configuration configuration) {
+	public Cache(Configuration configuration) {
 		if (sIsInitialized) {
 			Log.v("ActiveAndroid already initialized.");
 			return;
@@ -64,7 +57,7 @@ public static synchronized void initialize(Configuration configuration) {
 
 		sContext = configuration.getContext();
 		sModelInfo = new ModelInfo(configuration);
-		sDatabaseHelper = new DatabaseHelper(configuration);
+		sDatabaseHelper = new DatabaseHelper(this, configuration);
 
 		// TODO: It would be nice to override sizeOf here and calculate the memory
 		// actually used, however at this point it seems like the reflection
@@ -79,12 +72,12 @@ public static synchronized void initialize(Configuration configuration) {
 		Log.v("ActiveAndroid initialized successfully.");
 	}
 
-	public static synchronized void clear() {
+	public synchronized void clear() {
 		sEntities.evictAll();
 		Log.v("Cache cleared.");
 	}
 
-	public static synchronized void dispose() {
+	public synchronized void dispose() {
 		closeDatabase();
 
 		sEntities = null;
@@ -98,61 +91,61 @@ public static synchronized void dispose() {
 
 	// Database access
 	
-	public static boolean isInitialized() {
+	public boolean isInitialized() {
 		return sIsInitialized;
 	}
 
-	public static synchronized SQLiteDatabase openDatabase() {
+	public synchronized SQLiteDatabase openDatabase() {
 		return sDatabaseHelper.getWritableDatabase();
 	}
 
-	public static synchronized void closeDatabase() {
+	public synchronized void closeDatabase() {
 		sDatabaseHelper.close();
 	}
 
 	// Context access
 
-	public static Context getContext() {
+	public Context getContext() {
 		return sContext;
 	}
 
 	// Entity cache
 
-	public static String getIdentifier(Class<? extends Model> type, Long id) {
+	public String getIdentifier(Class<? extends Model> type, Long id) {
 		return getTableName(type) + "@" + id;
 	}
 
-	public static String getIdentifier(Model entity) {
+	public String getIdentifier(Model entity) {
 		return getIdentifier(entity.getClass(), entity.getId());
 	}
 
-	public static synchronized void addEntity(Model entity) {
+	public synchronized void addEntity(Model entity) {
 		sEntities.put(getIdentifier(entity), entity);
 	}
 
-	public static synchronized Model getEntity(Class<? extends Model> type, long id) {
+	public synchronized Model getEntity(Class<? extends Model> type, long id) {
 		return sEntities.get(getIdentifier(type, id));
 	}
 
-	public static synchronized void removeEntity(Model entity) {
+	public synchronized void removeEntity(Model entity) {
 		sEntities.remove(getIdentifier(entity));
 	}
 
 	// Model cache
 
-	public static synchronized Collection<TableInfo> getTableInfos() {
+	public synchronized Collection<TableInfo> getTableInfos() {
 		return sModelInfo.getTableInfos();
 	}
 
-	public static synchronized TableInfo getTableInfo(Class<? extends Model> type) {
+	public synchronized TableInfo getTableInfo(Class<? extends Model> type) {
 		return sModelInfo.getTableInfo(type);
 	}
 
-	public static synchronized TypeSerializer getParserForType(Class<?> type) {
+	public synchronized TypeSerializer getParserForType(Class<?> type) {
 		return sModelInfo.getTypeSerializer(type);
 	}
 
-	public static synchronized String getTableName(Class<? extends Model> type) {
+	public synchronized String getTableName(Class<? extends Model> type) {
 		return sModelInfo.getTableInfo(type).getTableName();
 	}
 }
diff --git a/src/com/activeandroid/Configuration.java b/src/com/activeandroid/Configuration.java
index b197d223..e237484f 100644
--- a/src/com/activeandroid/Configuration.java
+++ b/src/com/activeandroid/Configuration.java
@@ -128,6 +128,17 @@ public Builder(Context context) {
 			mCacheSize = DEFAULT_CACHE_SIZE;
 		}
 
+		public Builder(Context context, Configuration seed){
+			this(context);
+
+			mDatabaseName = seed.mDatabaseName;
+			mDatabaseVersion = seed.mDatabaseVersion;
+			mSqlParser = seed.mSqlParser;
+			mModelClasses = seed.mModelClasses;
+			mTypeSerializers = seed.mTypeSerializers;
+			mCacheSize = seed.mCacheSize;
+		}
+
 		//////////////////////////////////////////////////////////////////////////////////////
 		// PUBLIC METHODS
 		//////////////////////////////////////////////////////////////////////////////////////
diff --git a/src/com/activeandroid/DatabaseHelper.java b/src/com/activeandroid/DatabaseHelper.java
index 7158c5bb..3eda1b80 100644
--- a/src/com/activeandroid/DatabaseHelper.java
+++ b/src/com/activeandroid/DatabaseHelper.java
@@ -49,16 +49,18 @@
     // PRIVATE FIELDS
     //////////////////////////////////////////////////////////////////////////////////////
 
+	private final Cache cache;
     private final String mSqlParser;
 
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	public DatabaseHelper(Configuration configuration) {
+	public DatabaseHelper(Cache cache, Configuration configuration) {
 		super(configuration.getContext(), configuration.getDatabaseName(), null, configuration.getDatabaseVersion());
 		copyAttachedDatabase(configuration.getContext(), configuration.getDatabaseName());
 		mSqlParser = configuration.getSqlParser();
+		this.cache = cache;
 	}
 
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -135,7 +137,7 @@ private void executePragmas(SQLiteDatabase db) {
 	private void executeCreateIndex(SQLiteDatabase db) {
 		db.beginTransaction();
 		try {
-			for (TableInfo tableInfo : Cache.getTableInfos()) {
+			for (TableInfo tableInfo : cache.getTableInfos()) {
 				String[] definitions = SQLiteUtils.createIndexDefinition(tableInfo);
 
 				for (String definition : definitions) {
@@ -152,8 +154,8 @@ private void executeCreateIndex(SQLiteDatabase db) {
 	private void executeCreate(SQLiteDatabase db) {
 		db.beginTransaction();
 		try {
-			for (TableInfo tableInfo : Cache.getTableInfos()) {
-				db.execSQL(SQLiteUtils.createTableDefinition(tableInfo));
+			for (TableInfo tableInfo : cache.getTableInfos()) {
+				db.execSQL(SQLiteUtils.createTableDefinition(cache, tableInfo));
 			}
 			db.setTransactionSuccessful();
 		}
@@ -165,7 +167,7 @@ private void executeCreate(SQLiteDatabase db) {
 	private boolean executeMigrations(SQLiteDatabase db, int oldVersion, int newVersion) {
 		boolean migrationExecuted = false;
 		try {
-			final List<String> files = Arrays.asList(Cache.getContext().getAssets().list(MIGRATION_PATH));
+			final List<String> files = Arrays.asList(cache.getContext().getAssets().list(MIGRATION_PATH));
 			Collections.sort(files, new NaturalOrderComparator());
 
 			db.beginTransaction();
@@ -203,7 +205,7 @@ private void executeSqlScript(SQLiteDatabase db, String file) {
 	    InputStream stream = null;
 
 		try {
-		    stream = Cache.getContext().getAssets().open(MIGRATION_PATH + "/" + file);
+		    stream = cache.getContext().getAssets().open(MIGRATION_PATH + "/" + file);
 
 		    if (Configuration.SQL_PARSER_DELIMITED.equalsIgnoreCase(mSqlParser)) {
 		        executeDelimitedSqlScript(db, stream);
diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 3d6a021f..65f1bac9 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -44,14 +44,21 @@
 
 	private Long mId = null;
 
+	protected Cache mCache;
 	private final TableInfo mTableInfo;
 	private final String idName;
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
 
+	public Model(Cache cache) {
+		mCache = cache;
+		mTableInfo = getCache().getTableInfo(getClass());
+		idName = mTableInfo.getIdName();
+	}
+
 	public Model() {
-		mTableInfo = Cache.getTableInfo(getClass());
+		mTableInfo = getCache().getTableInfo(getClass());
 		idName = mTableInfo.getIdName();
 	}
 
@@ -64,19 +71,21 @@ public final Long getId() {
 	}
     public final void setId(Long id) {mId = id;}
 
-	public void delete() {
+	public int delete() {
         if(getId() == null)
-            return;
+            return 0;
 
-		Cache.openDatabase().delete(mTableInfo.getTableName(), idName+"=?", new String[] { getId().toString() });
-		Cache.removeEntity(this);
+		int deletions = getCache().openDatabase().delete(mTableInfo.getTableName(), idName+"=?", new String[] { getId().toString() });
+		getCache().removeEntity(this);
 
-		Cache.getContext().getContentResolver()
+		getCache().getContext().getContentResolver()
 				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mId), null);
+
+		return deletions;
 	}
 
 	public Long save() {
-		final SQLiteDatabase db = Cache.openDatabase();
+		final SQLiteDatabase db = getCache().openDatabase();
 		final ContentValues values = new ContentValues();
 
 		for (Field field : mTableInfo.getFields()) {
@@ -89,7 +98,7 @@ public Long save() {
 				Object value = field.get(this);
 
 				if (value != null) {
-					final TypeSerializer typeSerializer = Cache.getParserForType(fieldType);
+					final TypeSerializer typeSerializer = getCache().getParserForType(fieldType);
 					if (typeSerializer != null) {
 						// serialize data
 						value = typeSerializer.serialize(value);
@@ -162,7 +171,7 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 			db.update(mTableInfo.getTableName(), values, idName+"=" + mId, null);
 		}
 
-		Cache.getContext().getContentResolver()
+		getCache().getContext().getContentResolver()
 				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mId), null);
 		return mId;
 	}
@@ -170,17 +179,29 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 	// Convenience methods
 
 	public static void delete(Class<? extends Model> type, long id) {
-		TableInfo tableInfo = Cache.getTableInfo(type);
-		new Delete().from(type).where(tableInfo.getIdName()+"=?", id).execute();
+		delete(ActiveAndroid.getCache(), type, id);
+	}
+
+	public static void delete(Cache cache, Class<? extends Model> type, long id) {
+		TableInfo tableInfo = cache.getTableInfo(type);
+		new Delete(cache).from(type).where(tableInfo.getIdName() + "=?", id).execute();
 	}
 
 	public static <T extends Model> T load(Class<T> type, long id) {
-		TableInfo tableInfo = Cache.getTableInfo(type);
+		return load(ActiveAndroid.getCache(), type, id);
+	}
+
+	public static <T extends Model> T load(Cache cache, Class<T> type, long id) {
+		TableInfo tableInfo = cache.getTableInfo(type);
 		return (T) new Select().from(type).where(tableInfo.getIdName()+"=?", id).executeSingle();
 	}
 
-    public static void truncate(Class<? extends Model> type){
-        TableInfo tableInfo = Cache.getTableInfo(type);
+	public static void truncate(Class<? extends Model> type){
+		truncate(ActiveAndroid.getCache(), type);
+	}
+
+    public static void truncate(Cache cache, Class<? extends Model> type){
+        TableInfo tableInfo = cache.getTableInfo(type);
         // Not the cleanest way, but...
         ActiveAndroid.execSQL("delete from "+tableInfo.getTableName()+";");
         ActiveAndroid.execSQL("delete from sqlite_sequence where name='"+tableInfo.getTableName()+"';");
@@ -207,7 +228,7 @@ public final void loadFromCursor(Cursor cursor) {
 
 			try {
 				boolean columnIsNull = cursor.isNull(columnIndex);
-				TypeSerializer typeSerializer = Cache.getParserForType(fieldType);
+				TypeSerializer typeSerializer = getCache().getParserForType(fieldType);
 				Object value = null;
 
 				if (typeSerializer != null) {
@@ -253,7 +274,7 @@ else if (ReflectionUtils.isModel(fieldType)) {
 					final long entityId = cursor.getLong(columnIndex);
 					final Class<? extends Model> entityType = (Class<? extends Model>) fieldType;
 
-					Model entity = Cache.getEntity(entityType, entityId);
+					Model entity = getCache().getEntity(entityType, entityId);
 					if (entity == null) {
 						entity = new Select().from(entityType).where(idName+"=?", entityId).executeSingle();
 					}
@@ -288,7 +309,7 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 		}
 
 		if (mId != null) {
-			Cache.addEntity(this);
+			getCache().addEntity(this);
 		}
 	}
 
@@ -298,12 +319,24 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 
 	protected final <T extends Model> List<T> getMany(Class<T> type, String foreignKey) {
         if(getId() != null){
-            return new Select().from(type).where(Cache.getTableName(type) + "." + foreignKey + "=?", getId()).execute();
+            return new Select().from(type).where(getCache().getTableName(type) + "." + foreignKey + "=?", getId()).execute();
         } else {
             return new ArrayList<T>();
         }
 	}
 
+	//////////////////////////////////////////////////////////////////////////////////////
+	// PRIVATE METHODS
+	//////////////////////////////////////////////////////////////////////////////////////
+
+	public Cache getCache(){
+		if(mCache == null) {
+			return ActiveAndroid.getCache();
+		} else {
+			return mCache;
+		}
+	}
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// OVERRIDEN METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -314,15 +347,15 @@ public String toString() {
 	}
 
 	@Override
-	public boolean equals(Object obj) {
-		if (obj instanceof Model && this.mId != null) {
-			final Model other = (Model) obj;
+	public boolean equals(Object o) {
+		if (this == o) return true;
+		if (o == null || getClass() != o.getClass()) return false;
+
+		Model model = (Model) o;
+
+		if (mId != null ? !mId.equals(model.mId) : model.mId != null) return false;
+		return mTableInfo.getTableName().equals(model.mTableInfo.getTableName());
 
-			return this.mId.equals(other.mId)							
-							&& (this.mTableInfo.getTableName().equals(other.mTableInfo.getTableName()));
-		} else {
-			return this == obj;
-		}
 	}
 
 	@Override
diff --git a/src/com/activeandroid/content/ContentProvider.java b/src/com/activeandroid/content/ContentProvider.java
index b4a841d6..16db4537 100644
--- a/src/com/activeandroid/content/ContentProvider.java
+++ b/src/com/activeandroid/content/ContentProvider.java
@@ -39,7 +39,7 @@ public boolean onCreate() {
 		ActiveAndroid.initialize(getConfiguration());
 		sAuthority = getAuthority();
 
-		final List<TableInfo> tableInfos = new ArrayList<TableInfo>(Cache.getTableInfos());
+		final List<TableInfo> tableInfos = new ArrayList<TableInfo>(ActiveAndroid.getCache().getTableInfos());
 		final int size = tableInfos.size();
 		for (int i = 0; i < size; i++) {
 			final TableInfo tableInfo = tableInfos.get(i);
@@ -81,7 +81,7 @@ public String getType(Uri uri) {
 		mimeType.append(".");
 		mimeType.append(sAuthority);
 		mimeType.append(".");
-		mimeType.append(Cache.getTableName(type));
+		mimeType.append(ActiveAndroid.getCache().getTableName(type));
 
 		sMimeTypeCache.append(match, mimeType.toString());
 
@@ -93,7 +93,7 @@ public String getType(Uri uri) {
 	@Override
 	public Uri insert(Uri uri, ContentValues values) {
 		final Class<? extends Model> type = getModelType(uri);
-		final Long id = Cache.openDatabase().insert(Cache.getTableName(type), null, values);
+		final Long id = ActiveAndroid.getCache().openDatabase().insert(ActiveAndroid.getCache().getTableName(type), null, values);
 
 		if (id != null && id > 0) {
 			Uri retUri = createUri(type, id);
@@ -108,7 +108,7 @@ public Uri insert(Uri uri, ContentValues values) {
 	@Override
 	public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {
 		final Class<? extends Model> type = getModelType(uri);
-		final int count = Cache.openDatabase().update(Cache.getTableName(type), values, selection, selectionArgs);
+		final int count = ActiveAndroid.getCache().openDatabase().update(ActiveAndroid.getCache().getTableName(type), values, selection, selectionArgs);
 
 		notifyChange(uri);
 
@@ -118,7 +118,7 @@ public int update(Uri uri, ContentValues values, String selection, String[] sele
 	@Override
 	public int delete(Uri uri, String selection, String[] selectionArgs) {
 		final Class<? extends Model> type = getModelType(uri);
-		final int count = Cache.openDatabase().delete(Cache.getTableName(type), selection, selectionArgs);
+		final int count = ActiveAndroid.getCache().openDatabase().delete(ActiveAndroid.getCache().getTableName(type), selection, selectionArgs);
 
 		notifyChange(uri);
 
@@ -128,8 +128,8 @@ public int delete(Uri uri, String selection, String[] selectionArgs) {
 	@Override
 	public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
 		final Class<? extends Model> type = getModelType(uri);
-		final Cursor cursor = Cache.openDatabase().query(
-				Cache.getTableName(type),
+		final Cursor cursor = ActiveAndroid.getCache().openDatabase().query(
+				ActiveAndroid.getCache().getTableName(type),
 				projection,
 				selection,
 				selectionArgs,
@@ -151,7 +151,7 @@ public static Uri createUri(Class<? extends Model> type, Long id) {
 		uri.append("content://");
 		uri.append(sAuthority);
 		uri.append("/");
-		uri.append(Cache.getTableName(type).toLowerCase());
+		uri.append(ActiveAndroid.getCache().getTableName(type).toLowerCase());
 
 		if (id != null) {
 			uri.append("/");
diff --git a/src/com/activeandroid/query/Delete.java b/src/com/activeandroid/query/Delete.java
index 6d19dced..6c8261f7 100644
--- a/src/com/activeandroid/query/Delete.java
+++ b/src/com/activeandroid/query/Delete.java
@@ -16,14 +16,23 @@
  * limitations under the License.
  */
 
+import com.activeandroid.ActiveAndroid;
+import com.activeandroid.Cache;
 import com.activeandroid.Model;
 
 public final class Delete implements Sqlable {
+	private Cache mCache;
+
 	public Delete() {
+		this(ActiveAndroid.getCache());
+	}
+
+	public Delete(Cache cache) {
+		mCache = cache;
 	}
 
 	public From from(Class<? extends Model> table) {
-		return new From(table, this);
+		return new From(mCache, table, this);
 	}
 
 	@Override
diff --git a/src/com/activeandroid/query/From.java b/src/com/activeandroid/query/From.java
index ab3837a9..9aa4ab52 100644
--- a/src/com/activeandroid/query/From.java
+++ b/src/com/activeandroid/query/From.java
@@ -18,6 +18,7 @@
 
 import android.text.TextUtils;
 
+import com.activeandroid.ActiveAndroid;
 import com.activeandroid.Cache;
 import com.activeandroid.Model;
 import com.activeandroid.content.ContentProvider;
@@ -31,6 +32,7 @@
 public final class From implements Sqlable {
 	private Sqlable mQueryBase;
 
+    private Cache mCache;
 	private Class<? extends Model> mType;
 	private String mAlias;
 	private List<Join> mJoins;
@@ -43,7 +45,12 @@
 
 	private List<Object> mArguments;
 
-	public From(Class<? extends Model> table, Sqlable queryBase) {
+    public From(Class<? extends Model> table, Sqlable queryBase) {
+        this(ActiveAndroid.getCache(), table, queryBase);
+    }
+
+	public From(Cache cache, Class<? extends Model> table, Sqlable queryBase) {
+        mCache = cache;
 		mType = table;
 		mJoins = new ArrayList<Join>();
 		mQueryBase = queryBase;
@@ -58,31 +65,31 @@ public From as(String alias) {
 	}
 
 	public Join join(Class<? extends Model> table) {
-		Join join = new Join(this, table, null);
+		Join join = new Join(mCache, this, table, null);
 		mJoins.add(join);
 		return join;
 	}
 
 	public Join leftJoin(Class<? extends Model> table) {
-		Join join = new Join(this, table, JoinType.LEFT);
+		Join join = new Join(mCache, this, table, JoinType.LEFT);
 		mJoins.add(join);
 		return join;
 	}
 
 	public Join outerJoin(Class<? extends Model> table) {
-		Join join = new Join(this, table, JoinType.OUTER);
+		Join join = new Join(mCache, this, table, JoinType.OUTER);
 		mJoins.add(join);
 		return join;
 	}
 
 	public Join innerJoin(Class<? extends Model> table) {
-		Join join = new Join(this, table, JoinType.INNER);
+		Join join = new Join(mCache, this, table, JoinType.INNER);
 		mJoins.add(join);
 		return join;
 	}
 
 	public Join crossJoin(Class<? extends Model> table) {
-		Join join = new Join(this, table, JoinType.CROSS);
+		Join join = new Join(mCache, this, table, JoinType.CROSS);
 		mJoins.add(join);
 		return join;
 	}
@@ -166,7 +173,7 @@ void addArguments(Object[] args) {
 
     private void addFrom(final StringBuilder sql) {
         sql.append("FROM ");
-        sql.append(Cache.getTableName(mType)).append(" ");
+        sql.append(mCache.getTableName(mType)).append(" ");
 
         if (mAlias != null) {
             sql.append("AS ");
@@ -295,11 +302,11 @@ public String toCountSql() {
 
 	public <T extends Model> List<T> execute() {
 		if (mQueryBase instanceof Select) {
-			return SQLiteUtils.rawQuery(mType, toSql(), getArguments());
+			return SQLiteUtils.rawQuery(mCache,  mType, toSql(), getArguments());
 			
 		} else {
-			SQLiteUtils.execSql(toSql(), getArguments());
-			Cache.getContext().getContentResolver().notifyChange(ContentProvider.createUri(mType, null), null);
+			SQLiteUtils.execSql(mCache, toSql(), getArguments());
+            mCache.getContext().getContentResolver().notifyChange(ContentProvider.createUri(mType, null), null);
 			return null;
 			
 		}
@@ -308,11 +315,11 @@ public String toCountSql() {
 	public <T extends Model> T executeSingle() {
 		if (mQueryBase instanceof Select) {
 			limit(1);
-			return (T) SQLiteUtils.rawQuerySingle(mType, toSql(), getArguments());
+			return (T) SQLiteUtils.rawQuerySingle(mCache, mType, toSql(), getArguments());
 			
 		} else {
 			limit(1);
-			SQLiteUtils.rawQuerySingle(mType, toSql(), getArguments()).delete();
+			SQLiteUtils.rawQuerySingle(mCache, mType, toSql(), getArguments()).delete();
 			return null;
 			
 		}
@@ -323,14 +330,14 @@ public String toCountSql() {
      * @return <code>true</code> if the query returns at least one row; otherwise, <code>false</code>.
      */
     public boolean exists() {
-        return SQLiteUtils.intQuery(toExistsSql(), getArguments()) != 0;
+        return SQLiteUtils.intQuery(mCache, toExistsSql(), getArguments()) != 0;
     }
 
     /**
      * Gets the number of rows returned by the query.
      */
     public int count() {
-        return SQLiteUtils.intQuery(toCountSql(), getArguments());
+        return SQLiteUtils.intQuery(mCache, toCountSql(), getArguments());
     }
 
 	public String[] getArguments() {
diff --git a/src/com/activeandroid/query/Join.java b/src/com/activeandroid/query/Join.java
index 13cdba3b..ebd1c4d5 100644
--- a/src/com/activeandroid/query/Join.java
+++ b/src/com/activeandroid/query/Join.java
@@ -18,6 +18,7 @@
 
 import android.text.TextUtils;
 
+import com.activeandroid.ActiveAndroid;
 import com.activeandroid.Cache;
 import com.activeandroid.Model;
 
@@ -26,6 +27,7 @@
 		LEFT, OUTER, INNER, CROSS
 	}
 
+	private Cache mCache;
 	private From mFrom;
 	private Class<? extends Model> mType;
 	private String mAlias;
@@ -34,6 +36,11 @@
 	private String[] mUsing;
 
 	Join(From from, Class<? extends Model> table, JoinType joinType) {
+		this(ActiveAndroid.getCache(), from, table, joinType);
+	}
+
+	Join(Cache cache, From from, Class<? extends Model> table, JoinType joinType) {
+		mCache = cache;
 		mFrom = from;
 		mType = table;
 		mJoinType = joinType;
@@ -69,7 +76,7 @@ public String toSql() {
 		}
 
 		sql.append("JOIN ");
-		sql.append(Cache.getTableName(mType));
+		sql.append(mCache.getTableName(mType));
 		sql.append(" ");
 
 		if (mAlias != null) {
diff --git a/src/com/activeandroid/query/Select.java b/src/com/activeandroid/query/Select.java
index 1d4c6488..9e0ddd9a 100644
--- a/src/com/activeandroid/query/Select.java
+++ b/src/com/activeandroid/query/Select.java
@@ -18,17 +18,30 @@
 
 import android.text.TextUtils;
 
+import com.activeandroid.ActiveAndroid;
+import com.activeandroid.Cache;
 import com.activeandroid.Model;
 
 public final class Select implements Sqlable {
+	private Cache mCache;
 	private String[] mColumns;
 	private boolean mDistinct = false;
 	private boolean mAll = false;
 
 	public Select() {
+		this(ActiveAndroid.getCache());
 	}
 
-	public Select(String... columns) {
+	public Select(String... columns){
+		this(ActiveAndroid.getCache(), columns);
+	}
+
+	public Select(Cache cache) {
+		mCache = cache;
+	}
+
+	public Select(Cache cache, String... columns) {
+        this(cache);
 		mColumns = columns;
 	}
 
@@ -55,7 +68,7 @@ public Select all() {
 	}
 
 	public From from(Class<? extends Model> table) {
-		return new From(table, this);
+		return new From(mCache, table, this);
 	}
 
 	public static class Column {
diff --git a/src/com/activeandroid/query/Set.java b/src/com/activeandroid/query/Set.java
index 183d99f0..e52deed1 100644
--- a/src/com/activeandroid/query/Set.java
+++ b/src/com/activeandroid/query/Set.java
@@ -16,6 +16,8 @@
  * limitations under the License.
  */
 
+import com.activeandroid.ActiveAndroid;
+import com.activeandroid.Cache;
 import com.activeandroid.util.SQLiteUtils;
 
 import java.util.ArrayList;
@@ -25,6 +27,7 @@
 public final class Set implements Sqlable {
 	private Update mUpdate;
 
+	private Cache mCache;
 	private String mSet;
 	private String mWhere;
 
@@ -32,19 +35,20 @@
 	private List<Object> mWhereArguments;
 
 	public Set(Update queryBase, String set) {
-		mUpdate = queryBase;
-		mSet = set;
-
-		mSetArguments = new ArrayList<Object>();
-		mWhereArguments = new ArrayList<Object>();
+		this(ActiveAndroid.getCache(), queryBase, set);
 	}
 
-	public Set(Update queryBase, String set, Object... args) {
+	public Set(Cache cache, Update queryBase, String set) {
+		mCache = cache;
 		mUpdate = queryBase;
 		mSet = set;
 
 		mSetArguments = new ArrayList<Object>();
 		mWhereArguments = new ArrayList<Object>();
+	}
+
+	public Set(Cache cache, Update queryBase, String set, Object... args) {
+		this(cache, queryBase, set);
 
 		mSetArguments.addAll(Arrays.asList(args));
 	}
@@ -82,7 +86,7 @@ public String toSql() {
 	}
 
 	public void execute() {
-		SQLiteUtils.execSql(toSql(), getArguments());
+		SQLiteUtils.execSql(mCache, toSql(), getArguments());
 	}
 
 	public String[] getArguments() {
diff --git a/src/com/activeandroid/query/Update.java b/src/com/activeandroid/query/Update.java
index a69d2d8e..8dc6463f 100644
--- a/src/com/activeandroid/query/Update.java
+++ b/src/com/activeandroid/query/Update.java
@@ -16,22 +16,29 @@
  * limitations under the License.
  */
 
+import com.activeandroid.ActiveAndroid;
 import com.activeandroid.Cache;
 import com.activeandroid.Model;
 
 public final class Update implements Sqlable {
+	private Cache mCache;
 	private Class<? extends Model> mType;
 
-	public Update(Class<? extends Model> table) {
+	public Update(Class<? extends Model> table){
+		this(ActiveAndroid.getCache(), table);
+	}
+
+	public Update(Cache cache, Class<? extends Model> table) {
+		mCache = cache;
 		mType = table;
 	}
 
 	public Set set(String set) {
-		return new Set(this, set);
+		return new Set(mCache, this, set);
 	}
 
 	public Set set(String set, Object... args) {
-		return new Set(this, set, args);
+		return new Set(mCache, this, set, args);
 	}
 
 	Class<? extends Model> getType() {
@@ -42,7 +49,7 @@ public Set set(String set, Object... args) {
 	public String toSql() {
 		StringBuilder sql = new StringBuilder();
 		sql.append("UPDATE ");
-		sql.append(Cache.getTableName(mType));
+		sql.append(mCache.getTableName(mType));
 		sql.append(" ");
 
 		return sql.toString();
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index e2b00f7f..5cf51780 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -94,32 +94,32 @@
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	public static void execSql(String sql) {
-		Cache.openDatabase().execSQL(sql);
+	public static void execSql(Cache cache, String sql) {
+		cache.openDatabase().execSQL(sql);
 	}
 
-	public static void execSql(String sql, Object[] bindArgs) {
-		Cache.openDatabase().execSQL(sql, bindArgs);
+	public static void execSql(Cache cache, String sql, Object[] bindArgs) {
+		cache.openDatabase().execSQL(sql, bindArgs);
 	}
 
-	public static <T extends Model> List<T> rawQuery(Class<? extends Model> type, String sql, String[] selectionArgs) {
-		Cursor cursor = Cache.openDatabase().rawQuery(sql, selectionArgs);
-		List<T> entities = processCursor(type, cursor);
+	public static <T extends Model> List<T> rawQuery(Cache cache, Class<? extends Model> type, String sql, String[] selectionArgs) {
+		Cursor cursor = cache.openDatabase().rawQuery(sql, selectionArgs);
+		List<T> entities = processCursor(cache, type, cursor);
 		cursor.close();
 
 		return entities;
 	}
 	  
-	public static int intQuery(final String sql, final String[] selectionArgs) {
-        final Cursor cursor = Cache.openDatabase().rawQuery(sql, selectionArgs);
+	public static int intQuery(Cache cache, final String sql, final String[] selectionArgs) {
+        final Cursor cursor = cache.openDatabase().rawQuery(sql, selectionArgs);
         final int number = processIntCursor(cursor);
         cursor.close();
 
         return number;
 	}
 
-	public static <T extends Model> T rawQuerySingle(Class<? extends Model> type, String sql, String[] selectionArgs) {
-		List<T> entities = rawQuery(type, sql, selectionArgs);
+	public static <T extends Model> T rawQuerySingle(Cache cache, Class<? extends Model> type, String sql, String[] selectionArgs) {
+		List<T> entities = rawQuery(cache, type, sql, selectionArgs);
 
 		if (entities.size() > 0) {
 			return entities.get(0);
@@ -236,11 +236,11 @@ public static void createIndexColumnDefinition(TableInfo tableInfo, Field field)
 		}
 	}
 
-	public static String createTableDefinition(TableInfo tableInfo) {
+	public static String createTableDefinition(Cache cache, TableInfo tableInfo) {
 		final ArrayList<String> definitions = new ArrayList<String>();
 
 		for (Field field : tableInfo.getFields()) {
-			String definition = createColumnDefinition(tableInfo, field);
+			String definition = createColumnDefinition(cache, tableInfo, field);
 			if (!TextUtils.isEmpty(definition)) {
 				definitions.add(definition);
 			}
@@ -253,12 +253,12 @@ public static String createTableDefinition(TableInfo tableInfo) {
 	}
 
 	@SuppressWarnings("unchecked")
-	public static String createColumnDefinition(TableInfo tableInfo, Field field) {
+	public static String createColumnDefinition(Cache cache, TableInfo tableInfo, Field field) {
 		StringBuilder definition = new StringBuilder();
 
 		Class<?> type = field.getType();
 		final String name = tableInfo.getColumnName(field);
-		final TypeSerializer typeSerializer = Cache.getParserForType(field.getType());
+		final TypeSerializer typeSerializer = cache.getParserForType(field.getType());
 		final Column column = field.getAnnotation(Column.class);
 
 		if (typeSerializer != null) {
@@ -305,7 +305,7 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 
 			if (FOREIGN_KEYS_SUPPORTED && ReflectionUtils.isModel(type)) {
 				definition.append(" REFERENCES ");
-				definition.append(Cache.getTableInfo((Class<? extends Model>) type).getTableName());
+				definition.append(cache.getTableInfo((Class<? extends Model>) type).getTableName());
 				definition.append("("+tableInfo.getIdName()+")");
 				definition.append(" ON DELETE ");
 				definition.append(column.onDelete().toString().replace("_", " "));
@@ -321,14 +321,34 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 	}
 
 	@SuppressWarnings("unchecked")
-	public static <T extends Model> List<T> processCursor(Class<? extends Model> type, Cursor cursor) {
-		TableInfo tableInfo = Cache.getTableInfo(type);
+	public static <T extends Model> List<T> processCursor(Cache cache, Class<? extends Model> type, Cursor cursor) {
+		TableInfo tableInfo = cache.getTableInfo(type);
 		String idName = tableInfo.getIdName();
 		final List<T> entities = new ArrayList<T>();
 
+		Constructor<?> parameterizedConstructor = null;
+		Constructor<?> simpleConstructor = null;
+
 		try {
-			Constructor<?> entityConstructor = type.getConstructor();
+			parameterizedConstructor = type.getConstructor(Cache.class);
+		} catch (NoSuchMethodException e) {
+			try {
+				simpleConstructor = type.getConstructor();
+			} catch (NoSuchMethodException e1) {
+
+				throw new RuntimeException(
+						"Your model " + type.getName() + " does not define a default " +
+								"constructor. Or a constructor with a Cache as a parameter. " +
+								"Either of these contructors is required for " +
+								"now in ActiveAndroid models, as the process to " +
+								"populate the ORM model is : " +
+								"1. instantiate the model with the given or the default Cache object" +
+								"2. populate fields"
+				);
+			}
+		}
 
+		try {
 			if (cursor.moveToFirst()) {
                 /**
                  * Obtain the columns ordered to fix issue #106 (https://github.com/pardom/ActiveAndroid/issues/106)
@@ -336,25 +356,21 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
                  */
                 List<String> columnsOrdered = new ArrayList<String>(Arrays.asList(cursor.getColumnNames()));
 				do {
-					Model entity = (T) entityConstructor.newInstance();
+
+					Model entity = null;
+					if(parameterizedConstructor != null) {
+						entity = (T) parameterizedConstructor.newInstance(cache);
+					} else {
+						entity = (T) simpleConstructor.newInstance();
+					}
+
 					entity.loadFromCursor(cursor);
 					entities.add((T) entity);
 				}
 				while (cursor.moveToNext());
 			}
 
-		}
-		catch (NoSuchMethodException e) {
-			throw new RuntimeException(
-                "Your model " + type.getName() + " does not define a default " +
-                "constructor. The default constructor is required for " +
-                "now in ActiveAndroid models, as the process to " +
-                "populate the ORM model is : " +
-                "1. instantiate default model " +
-                "2. populate fields"
-            );
-		}
-		catch (Exception e) {
+		} catch (Exception e) {
 			Log.e("Failed to process cursor.", e);
 		}
 
