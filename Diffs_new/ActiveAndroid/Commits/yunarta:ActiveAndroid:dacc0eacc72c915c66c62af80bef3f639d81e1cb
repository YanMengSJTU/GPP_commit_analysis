diff --git a/build.gradle b/build.gradle
index 5594e43b..d9e3850f 100644
--- a/build.gradle
+++ b/build.gradle
@@ -10,6 +10,12 @@ sourceSets {
 			srcDir 'src'
 		}
 	}
+
+	test {
+		java {
+			srcDir 'tests/src'
+		}
+	}
 }
 
 dependencies {
diff --git a/src/com/activeandroid/sebbia/ActiveAndroid.java b/src/com/activeandroid/sebbia/ActiveAndroid.java
index 8fd94019..240c0f6d 100644
--- a/src/com/activeandroid/sebbia/ActiveAndroid.java
+++ b/src/com/activeandroid/sebbia/ActiveAndroid.java
@@ -64,38 +64,38 @@ public static void setLoggingEnabled(boolean enabled)
         Log.setEnabled(enabled);
     }
 
-    public static SQLiteDatabase getDatabase()
+    public static SQLiteDatabase getDatabase(String database)
     {
-        return Cache.openDatabase();
+        return Cache.openDatabase(database);
     }
 
-    public static void beginTransaction()
+    public static void beginTransaction(String database)
     {
-        Cache.openDatabase().beginTransaction();
+        Cache.openDatabase(database).beginTransaction();
     }
 
-    public static void endTransaction()
+    public static void endTransaction(String database)
     {
-        Cache.openDatabase().endTransaction();
+        Cache.openDatabase(database).endTransaction();
     }
 
-    public static void setTransactionSuccessful()
+    public static void setTransactionSuccessful(String database)
     {
-        Cache.openDatabase().setTransactionSuccessful();
+        Cache.openDatabase(database).setTransactionSuccessful();
     }
 
-    public static boolean inTransaction()
+    public static boolean inTransaction(String database)
     {
-        return Cache.openDatabase().inTransaction();
+        return Cache.openDatabase(database).inTransaction();
     }
 
-    public static void execSQL(String sql)
+    public static void execSQL(String sql, String database)
     {
-        Cache.openDatabase().execSQL(sql);
+        Cache.openDatabase(database).execSQL(sql);
     }
 
-    public static void execSQL(String sql, Object[] bindArgs)
+    public static void execSQL(String sql, Object[] bindArgs, String database)
     {
-        Cache.openDatabase().execSQL(sql, bindArgs);
+        Cache.openDatabase(database).execSQL(sql, bindArgs);
     }
 }
diff --git a/src/com/activeandroid/sebbia/Cache.java b/src/com/activeandroid/sebbia/Cache.java
index ab814fee..7828392b 100644
--- a/src/com/activeandroid/sebbia/Cache.java
+++ b/src/com/activeandroid/sebbia/Cache.java
@@ -16,13 +16,10 @@
  * limitations under the License.
  */
 
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Map;
-
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.support.v4.util.LruCache;
+import android.util.SparseArray;
 
 import com.activeandroid.sebbia.annotation.DoNotGenerate;
 import com.activeandroid.sebbia.internal.EmptyModelFiller;
@@ -31,6 +28,10 @@
 import com.activeandroid.sebbia.util.Log;
 import com.activeandroid.sebbia.util.ReflectionUtils;
 
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+
 public final class Cache
 {
     //////////////////////////////////////////////////////////////////////////////////////
@@ -45,14 +46,17 @@
 
     private static Context sContext;
 
-    private static ModelInfo      sModelInfo;
-    private static DatabaseHelper sDatabaseHelper;
+    private static ModelInfo sModelInfo;
+
+    private static SparseArray<DatabaseHelper> sDatabaseHelper;
 
     private static LruCache<String, Model> sEntities;
 
     private static boolean sIsInitialized = false;
 
     private static Map<Class<? extends Model>, ModelFiller> sFillers;
+    private static int                                      sVersion;
+    private static String                                   sSqlParser;
 
     //////////////////////////////////////////////////////////////////////////////////////
     // CONSTRUCTORS
@@ -76,7 +80,12 @@ public static synchronized void initialize(Configuration configuration)
 
         sContext = configuration.getContext();
         sModelInfo = new ModelInfo(configuration);
-        sDatabaseHelper = new DatabaseHelper(configuration);
+
+        sVersion = configuration.getDatabaseVersion();
+        sSqlParser = configuration.getSqlParser();
+
+        sDatabaseHelper = new SparseArray<DatabaseHelper>();
+        // sDatabaseHelper = new DatabaseHelper(configuration.getContext(), configuration.getDatabaseName(), sVersion, sSqlParser);
 
         // TODO: It would be nice to override sizeOf here and calculate the memory
         // actually used, however at this point it seems like the reflection
@@ -86,7 +95,7 @@ public static synchronized void initialize(Configuration configuration)
 
         initializeModelFillers();
 
-        openDatabase();
+        // openDatabase(database.hashCode());
 
         sIsInitialized = true;
 
@@ -102,7 +111,12 @@ public static synchronized void clear()
 
     public static synchronized void dispose()
     {
-        closeDatabase();
+        int size = sDatabaseHelper.size();
+        for (int i = 0; i < size; i++)
+        {
+            DatabaseHelper helper = sDatabaseHelper.valueAt(i);
+            helper.close();
+        }
 
         sEntities = null;
         sModelInfo = null;
@@ -120,16 +134,28 @@ public static boolean isInitialized()
         return sIsInitialized;
     }
 
-    public static synchronized SQLiteDatabase openDatabase()
+    public static synchronized SQLiteDatabase openDatabase(String database)
     {
-        return sDatabaseHelper.getWritableDatabase();
+        int key = database.hashCode();
+
+        DatabaseHelper helper = sDatabaseHelper.get(key);
+        if (helper == null)
+        {
+            helper = new DatabaseHelper(sContext, database, sVersion, sSqlParser);
+            sDatabaseHelper.put(key, helper);
+        }
+
+        return helper.getWritableDatabase();
     }
 
-    public static synchronized void closeDatabase()
+    public static synchronized void closeDatabase(String database)
     {
-        if (sDatabaseHelper != null)
+        int key = database.hashCode();
+
+        DatabaseHelper helper = sDatabaseHelper.get(key);
+        if (helper != null)
         {
-            sDatabaseHelper.close();
+            helper.close();
         }
     }
 
diff --git a/src/com/activeandroid/sebbia/DatabaseHelper.java b/src/com/activeandroid/sebbia/DatabaseHelper.java
index 3fa4921f..42d767be 100644
--- a/src/com/activeandroid/sebbia/DatabaseHelper.java
+++ b/src/com/activeandroid/sebbia/DatabaseHelper.java
@@ -16,17 +16,6 @@
  * limitations under the License.
  */
 
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStream;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
@@ -39,6 +28,17 @@
 import com.activeandroid.sebbia.util.SQLiteUtils;
 import com.activeandroid.sebbia.util.SqlParser;
 
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.OutputStream;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
 public final class DatabaseHelper extends SQLiteOpenHelper
 {
     //////////////////////////////////////////////////////////////////////////////////////
@@ -57,11 +57,11 @@
     // CONSTRUCTORS
     //////////////////////////////////////////////////////////////////////////////////////
 
-    public DatabaseHelper(Configuration configuration)
+    public DatabaseHelper(Context context, String name, int version, String sqlParser)
     {
-        super(configuration.getContext(), configuration.getDatabaseName(), null, configuration.getDatabaseVersion());
-        copyAttachedDatabase(configuration.getContext(), configuration.getDatabaseName());
-        mSqlParser = configuration.getSqlParser();
+        super(context, name, null, version);
+        copyAttachedDatabase(context, name);
+        mSqlParser = sqlParser;
     }
 
     //////////////////////////////////////////////////////////////////////////////////////
diff --git a/src/com/activeandroid/sebbia/Model.java b/src/com/activeandroid/sebbia/Model.java
index b1a6b5ec..3c572795 100644
--- a/src/com/activeandroid/sebbia/Model.java
+++ b/src/com/activeandroid/sebbia/Model.java
@@ -16,11 +16,6 @@
  * limitations under the License.
  */
 
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
 import android.content.ContentValues;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
@@ -37,6 +32,11 @@
 import com.activeandroid.sebbia.util.Log;
 import com.activeandroid.sebbia.util.ReflectionUtils;
 
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
 @SuppressWarnings("unchecked")
 public abstract class Model
 {
@@ -74,18 +74,18 @@ public final Long getId()
         return mId;
     }
 
-    public final void delete()
+    public final void delete(String database)
     {
-        Cache.openDatabase().delete(mTableInfo.getTableName(), idName + "=?", new String[]{getId().toString()});
+        Cache.openDatabase(database).delete(mTableInfo.getTableName(), idName + "=?", new String[]{getId().toString()});
         Cache.removeEntity(this);
 
         Cache.getContext().getContentResolver()
                 .notifyChange(ContentProvider.createUri(mTableInfo.getType(), mId), null);
     }
 
-    public final Long save()
+    public final Long save(String database)
     {
-        SQLiteDatabase db     = Cache.openDatabase();
+        SQLiteDatabase db     = Cache.openDatabase(database);
         ContentValues  values = new ContentValues();
         fillContentValues(this, values);
 
@@ -105,26 +105,26 @@ public final Long save()
 
     // Convenience methods
 
-    public static void delete(Class<? extends Model> type, long id)
+    public static void delete(String database, Class<? extends Model> type, long id)
     {
         TableInfo tableInfo = Cache.getTableInfo(type);
-        new Delete().from(type).where(tableInfo.getIdName() + "=?", id).execute();
+        new Delete().from(type).where(tableInfo.getIdName() + "=?", id).execute(database);
     }
 
-    public static <T extends Model> T load(Class<T> type, long id)
+    public static <T extends Model> T load(String database, Class<T> type, long id)
     {
         T model = (T) Cache.getEntity(type, id);
         if (model == null)
         {
             TableInfo tableInfo = Cache.getTableInfo(type);
-            model = new Select().from(type).where(tableInfo.getIdName() + "=?", id).executeSingle();
+            model = new Select().from(type).where(tableInfo.getIdName() + "=?", id).executeSingle(database);
         }
         return model;
     }
 
-    public static void saveMultiple(List<? extends Model> entities)
+    public static void saveMultiple(String database, List<? extends Model> entities)
     {
-        final SQLiteDatabase db     = Cache.openDatabase();
+        final SQLiteDatabase db     = Cache.openDatabase(database);
         final ContentValues  values = new ContentValues();
         for (Model entity : entities)
         {
@@ -136,7 +136,7 @@ public static void saveMultiple(List<? extends Model> entities)
                 {
                     synchronized (entity.getClass())
                     {
-                        SQLiteStatement statement = entity.mTableInfo.getInsertOrReplaceStatement();
+                        SQLiteStatement statement = entity.mTableInfo.getInsertOrReplaceStatement(database);
                         statement.clearBindings();
                         filler.bindStatement(entity, statement, entity.mTableInfo.getColumnIndexes());
                         entity.mId = statement.executeInsert();
@@ -158,7 +158,7 @@ public static void saveMultiple(List<? extends Model> entities)
 
     // Model population
 
-    public final void loadFromCursor(Cursor cursor)
+    public final void loadFromCursor(String database, Cursor cursor)
     {
         ModelFiller filler = Cache.getFiller(mTableInfo.getType());
         if (filler != null)
@@ -167,7 +167,7 @@ public final void loadFromCursor(Cursor cursor)
         }
         else
         {
-            loadFromCursorReflective(cursor);
+            loadFromCursorReflective(database, cursor);
         }
         if (mId != null)
         {
@@ -310,7 +310,7 @@ private void loadFromCursorWithFiller(Cursor cursor, ModelFiller filler)
         filler.loadFromCursor(this, cursor);
     }
 
-    private void loadFromCursorReflective(Cursor cursor)
+    private void loadFromCursorReflective(String database, Cursor cursor)
     {
         /**
          * Obtain the columns ordered to fix issue #106
@@ -355,7 +355,7 @@ private void loadFromCursorReflective(Cursor cursor)
                 {
                     if (ReflectionUtils.isModel(fieldType))
                     {
-                        value = ModelHelper.getModel(cursor, fieldType, columnIndex);
+                        value = ModelHelper.getModel(database, cursor, fieldType, columnIndex);
                     }
                     else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class))
                     {
@@ -395,9 +395,9 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class))
     // PROTECTED METHODS
     // ////////////////////////////////////////////////////////////////////////////////////
 
-    protected final <T extends Model> List<T> getMany(Class<T> type, String foreignKey)
+    protected final <T extends Model> List<T> getMany(String database, Class<T> type, String foreignKey)
     {
-        return new Select().from(type).where(Cache.getTableName(type) + "." + foreignKey + "=?", getId()).execute();
+        return new Select().from(type).where(Cache.getTableName(type) + "." + foreignKey + "=?", getId()).execute(database);
     }
 
     protected String getIdName()
diff --git a/src/com/activeandroid/sebbia/TableInfo.java b/src/com/activeandroid/sebbia/TableInfo.java
index ebc220ab..a3d68147 100644
--- a/src/com/activeandroid/sebbia/TableInfo.java
+++ b/src/com/activeandroid/sebbia/TableInfo.java
@@ -16,15 +16,6 @@
  * limitations under the License.
  */
 
-import java.lang.reflect.Field;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.LinkedHashMap;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 import android.text.TextUtils;
@@ -35,6 +26,15 @@
 import com.activeandroid.sebbia.util.ReflectionUtils;
 import com.activeandroid.sebbia.util.SQLiteUtils;
 
+import java.lang.reflect.Field;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.LinkedHashMap;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+
 public final class TableInfo
 {
     //////////////////////////////////////////////////////////////////////////////////////
@@ -137,31 +137,31 @@ public String getColumnName(Field field)
         return mColumnNames.get(field);
     }
 
-    public SQLiteStatement getInsertStatement()
+    public SQLiteStatement getInsertStatement(String database)
     {
         if (mInsertStatement == null)
         {
-            SQLiteDatabase db = Cache.openDatabase();
+            SQLiteDatabase db = Cache.openDatabase(database);
             mInsertStatement = db.compileStatement(SQLiteUtils.createInsertStatement("INSERT INTO ", this));
         }
         return mInsertStatement;
     }
 
-    public SQLiteStatement getUpdateStatement()
+    public SQLiteStatement getUpdateStatement(String database)
     {
         if (mUpdateStatement == null)
         {
-            SQLiteDatabase db = Cache.openDatabase();
+            SQLiteDatabase db = Cache.openDatabase(database);
             mUpdateStatement = db.compileStatement(SQLiteUtils.createUpdateStatement(this));
         }
         return mUpdateStatement;
     }
 
-    public SQLiteStatement getInsertOrReplaceStatement()
+    public SQLiteStatement getInsertOrReplaceStatement(String database)
     {
         if (mInsertOrReplaceStatement == null)
         {
-            SQLiteDatabase db = Cache.openDatabase();
+            SQLiteDatabase db = Cache.openDatabase(database);
             mInsertOrReplaceStatement = db.compileStatement(SQLiteUtils.createInsertStatement("INSERT OR REPLACE INTO ", this));
         }
         return mInsertOrReplaceStatement;
diff --git a/src/com/activeandroid/sebbia/content/ContentProvider.java b/src/com/activeandroid/sebbia/content/ContentProvider.java
index e6ffecb0..b9ed8113 100644
--- a/src/com/activeandroid/sebbia/content/ContentProvider.java
+++ b/src/com/activeandroid/sebbia/content/ContentProvider.java
@@ -1,8 +1,5 @@
 package com.activeandroid.sebbia.content;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import android.content.ContentValues;
 import android.content.UriMatcher;
 import android.database.Cursor;
@@ -15,6 +12,9 @@
 import com.activeandroid.sebbia.Model;
 import com.activeandroid.sebbia.TableInfo;
 
+import java.util.ArrayList;
+import java.util.List;
+
 public class ContentProvider extends android.content.ContentProvider
 {
     //////////////////////////////////////////////////////////////////////////////////////
@@ -50,11 +50,11 @@ public boolean onCreate()
             final int itemKey = (i * 2) + 2;
 
             // content://<authority>/<table>
-            URI_MATCHER.addURI(sAuthority, tableInfo.getTableName().toLowerCase(), tableKey);
+            URI_MATCHER.addURI(sAuthority, "*/" + tableInfo.getTableName().toLowerCase(), tableKey);
             TYPE_CODES.put(tableKey, tableInfo.getType());
 
             // content://<authority>/<table>/<id>
-            URI_MATCHER.addURI(sAuthority, tableInfo.getTableName().toLowerCase() + "/#", itemKey);
+            URI_MATCHER.addURI(sAuthority, "*/" + tableInfo.getTableName().toLowerCase() + "/#", itemKey);
             TYPE_CODES.put(itemKey, tableInfo.getType());
         }
 
@@ -98,8 +98,10 @@ public String getType(Uri uri)
     @Override
     public Uri insert(Uri uri, ContentValues values)
     {
-        final Class<? extends Model> type = getModelType(uri);
-        final Long                   id   = Cache.openDatabase().insert(Cache.getTableName(type), null, values);
+        final Class<? extends Model> type    = getModelType(uri);
+        String                       database = getDatabase(uri);
+
+        final Long id = Cache.openDatabase(database).insert(Cache.getTableName(type), null, values);
 
         if (id != null && id > 0)
         {
@@ -115,8 +117,10 @@ public Uri insert(Uri uri, ContentValues values)
     @Override
     public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs)
     {
-        final Class<? extends Model> type  = getModelType(uri);
-        final int                    count = Cache.openDatabase().update(Cache.getTableName(type), values, selection, selectionArgs);
+        final Class<? extends Model> type    = getModelType(uri);
+        String                       database = getDatabase(uri);
+
+        final int count = Cache.openDatabase(database).update(Cache.getTableName(type), values, selection, selectionArgs);
 
         notifyChange(uri);
 
@@ -126,8 +130,9 @@ public int update(Uri uri, ContentValues values, String selection, String[] sele
     @Override
     public int delete(Uri uri, String selection, String[] selectionArgs)
     {
-        final Class<? extends Model> type  = getModelType(uri);
-        final int                    count = Cache.openDatabase().delete(Cache.getTableName(type), selection, selectionArgs);
+        final Class<? extends Model> type    = getModelType(uri);
+        String                       database = getDatabase(uri);
+        final int                    count   = Cache.openDatabase(database).delete(Cache.getTableName(type), selection, selectionArgs);
 
         notifyChange(uri);
 
@@ -137,8 +142,10 @@ public int delete(Uri uri, String selection, String[] selectionArgs)
     @Override
     public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)
     {
-        final Class<? extends Model> type = getModelType(uri);
-        final Cursor cursor = Cache.openDatabase().query(
+        final Class<? extends Model> type    = getModelType(uri);
+        String                       database = getDatabase(uri);
+
+        final Cursor cursor = Cache.openDatabase(database).query(
                 Cache.getTableName(type),
                 projection,
                 selection,
@@ -202,6 +209,12 @@ protected Configuration getConfiguration()
         return null;
     }
 
+    private String getDatabase(Uri uri)
+    {
+        List<String> segments = uri.getPathSegments();
+        return segments.get(0);
+    }
+
     private void notifyChange(Uri uri)
     {
         getContext().getContentResolver().notifyChange(uri, null);
diff --git a/src/com/activeandroid/sebbia/internal/ModelHelper.java b/src/com/activeandroid/sebbia/internal/ModelHelper.java
index a02813c6..11faf113 100644
--- a/src/com/activeandroid/sebbia/internal/ModelHelper.java
+++ b/src/com/activeandroid/sebbia/internal/ModelHelper.java
@@ -1,7 +1,5 @@
 package com.activeandroid.sebbia.internal;
 
-import java.util.Map;
-
 import android.content.ContentValues;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteStatement;
@@ -14,6 +12,8 @@
 import com.activeandroid.sebbia.util.Log;
 import com.activeandroid.sebbia.util.ReflectionUtils;
 
+import java.util.Map;
+
 public class ModelHelper
 {
 
@@ -207,7 +207,7 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class))
     }
 
     @SuppressWarnings("unchecked")
-    public static Object getModel(Cursor cursor, Class<?> fieldType, int columnIndex)
+    public static Object getModel(String database, Cursor cursor, Class<?> fieldType, int columnIndex)
     {
         final long                   entityId   = cursor.getLong(columnIndex);
         final Class<? extends Model> entityType = (Class<? extends Model>) fieldType;
@@ -215,7 +215,7 @@ public static Object getModel(Cursor cursor, Class<?> fieldType, int columnIndex
         Model entity = Cache.getEntity(entityType, entityId);
         if (entity == null)
         {
-            entity = new Select().from(entityType).where(Cache.getTableInfo(entityType).getIdName() + "=?", entityId).executeSingle();
+            entity = new Select().from(entityType).where(Cache.getTableInfo(entityType).getIdName() + "=?", entityId).executeSingle(database);
         }
         return entity;
     }
diff --git a/src/com/activeandroid/sebbia/model/ManyToManyRelation.java b/src/com/activeandroid/sebbia/model/ManyToManyRelation.java
index 17a99274..7d6a5ec2 100644
--- a/src/com/activeandroid/sebbia/model/ManyToManyRelation.java
+++ b/src/com/activeandroid/sebbia/model/ManyToManyRelation.java
@@ -1,8 +1,5 @@
 package com.activeandroid.sebbia.model;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import com.activeandroid.sebbia.Cache;
 import com.activeandroid.sebbia.Model;
 import com.activeandroid.sebbia.TableInfo;
@@ -12,6 +9,9 @@
 import com.activeandroid.sebbia.util.Log;
 import com.activeandroid.sebbia.util.SQLiteUtils;
 
+import java.util.ArrayList;
+import java.util.List;
+
 @DoNotGenerate
 public abstract class ManyToManyRelation<T1 extends Model, T2 extends Model> extends Model
 {
@@ -21,7 +21,7 @@
     @Column(name = "entity2")
     private T2 entity2;
 
-    public static <T1 extends Model, T2 extends Model> void setRelationsFront(Class<? extends ManyToManyRelation<T1, T2>> relation, T1 entity1, List<T2> entities2)
+    public static <T1 extends Model, T2 extends Model> void setRelationsFront(String database, Class<? extends ManyToManyRelation<T1, T2>> relation, T1 entity1, List<T2> entities2)
     {
         if (entity1.getId() == null)
         {
@@ -35,7 +35,7 @@
             }
         }
 
-        new Delete().from(relation).where("entity1 = ?", entity1.getId()).execute();
+        new Delete().from(relation).where("entity1 = ?", entity1.getId()).execute(database);
         try
         {
             ArrayList<ManyToManyRelation<T1, T2>> connections = new ArrayList<ManyToManyRelation<T1, T2>>();
@@ -46,7 +46,7 @@
                 connection.entity2 = entity2;
                 connections.add(connection);
             }
-            saveMultiple(connections);
+            saveMultiple(database, connections);
         }
         catch (Exception e)
         {
@@ -55,7 +55,7 @@
         }
     }
 
-    public static <T1 extends Model, T2 extends Model> void setRelationsReverse(Class<? extends ManyToManyRelation<T1, T2>> relation, T2 entity2, List<T1> entities1)
+    public static <T1 extends Model, T2 extends Model> void setRelationsReverse(String database, Class<? extends ManyToManyRelation<T1, T2>> relation, T2 entity2, List<T1> entities1)
     {
         if (entity2.getId() == null)
         {
@@ -69,7 +69,7 @@
             }
         }
 
-        new Delete().from(relation).where("entity2 = ?", entity2.getId()).execute();
+        new Delete().from(relation).where("entity2 = ?", entity2.getId()).execute(database);
         try
         {
             ArrayList<ManyToManyRelation<T1, T2>> connections = new ArrayList<ManyToManyRelation<T1, T2>>();
@@ -80,7 +80,7 @@
                 connection.entity2 = entity2;
                 connections.add(connection);
             }
-            saveMultiple(connections);
+            saveMultiple(database, connections);
         }
         catch (Exception e)
         {
@@ -89,7 +89,7 @@
         }
     }
 
-    public static <T1 extends Model, T2 extends Model> List<T2> getRelationsFront(Class<? extends ManyToManyRelation<T1, T2>> relation, T1 entity)
+    public static <T1 extends Model, T2 extends Model> List<T2> getRelationsFront(String database, Class<? extends ManyToManyRelation<T1, T2>> relation, T1 entity)
     {
         if (entity.getId() == null)
         {
@@ -136,10 +136,10 @@
         queryBuilder.append(entity1TableInfo.getTableName());
         queryBuilder.append(".id == ?");
 
-        return SQLiteUtils.rawQuery(entity2Class, queryBuilder.toString(), new String[]{entity.getId().toString()});
+        return SQLiteUtils.rawQuery(database, entity2Class, queryBuilder.toString(), new String[]{entity.getId().toString()});
     }
 
-    public static <T1 extends Model, T2 extends Model> List<T1> getRelationsReverse(Class<? extends ManyToManyRelation<T1, T2>> relation, T2 entity)
+    public static <T1 extends Model, T2 extends Model> List<T1> getRelationsReverse(String database, Class<? extends ManyToManyRelation<T1, T2>> relation, T2 entity)
     {
         if (entity.getId() == null)
         {
@@ -186,7 +186,7 @@
         queryBuilder.append(entity2TableInfo.getTableName());
         queryBuilder.append(".id == ?");
 
-        return SQLiteUtils.rawQuery(entity1Class, queryBuilder.toString(), new String[]{entity.getId().toString()});
+        return SQLiteUtils.rawQuery(database, entity1Class, queryBuilder.toString(), new String[]{entity.getId().toString()});
     }
 
     public ManyToManyRelation()
diff --git a/src/com/activeandroid/sebbia/model/OneToManyRelation.java b/src/com/activeandroid/sebbia/model/OneToManyRelation.java
index 3f0a369b..c5c23dda 100644
--- a/src/com/activeandroid/sebbia/model/OneToManyRelation.java
+++ b/src/com/activeandroid/sebbia/model/OneToManyRelation.java
@@ -1,8 +1,5 @@
 package com.activeandroid.sebbia.model;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import android.database.Cursor;
 
 import com.activeandroid.sebbia.Cache;
@@ -13,6 +10,9 @@
 import com.activeandroid.sebbia.query.Delete;
 import com.activeandroid.sebbia.util.Log;
 
+import java.util.ArrayList;
+import java.util.List;
+
 @DoNotGenerate
 public abstract class OneToManyRelation<T1 extends Model, T2 extends Model> extends Model
 {
@@ -24,7 +24,7 @@
     @Column(name = "entity2")
     private Model  entity2;
 
-    public static <T1 extends Model, T2 extends Model> void setRelations(Class<? extends OneToManyRelation<T1, T2>> relation, T1 entity1, List<T2> entities2)
+    public static <T1 extends Model, T2 extends Model> void setRelations(String database, Class<? extends OneToManyRelation<T1, T2>> relation, T1 entity1, List<T2> entities2)
     {
         if (entity1.getId() == null)
         {
@@ -38,7 +38,7 @@
             }
         }
 
-        new Delete().from(relation).where("entity1 = ?", entity1.getId()).execute();
+        new Delete().from(relation).where("entity1 = ?", entity1.getId()).execute(database);
         try
         {
             List<OneToManyRelation<T1, T2>> connections = new ArrayList<OneToManyRelation<T1, T2>>();
@@ -50,7 +50,7 @@
                 connection.entity2 = entity2;
                 connections.add(connection);
             }
-            saveMultiple(connections);
+            saveMultiple(database, connections);
         }
         catch (Exception e)
         {
@@ -60,7 +60,7 @@
     }
 
     @SuppressWarnings("unchecked")
-    public static <T1 extends Model, T2 extends Model> List<T2> getRelations(Class<? extends OneToManyRelation<T1, T2>> relation, T1 entity)
+    public static <T1 extends Model, T2 extends Model> List<T2> getRelations(String database, Class<? extends OneToManyRelation<T1, T2>> relation, T1 entity)
     {
         if (entity.getId() == null)
         {
@@ -68,7 +68,7 @@
         }
 
         TableInfo      crossTableInfo = Cache.getTableInfo(relation);
-        Cursor         cursor         = Cache.openDatabase().rawQuery("SELECT entity2Type, entity2 FROM " + crossTableInfo.getTableName() + " WHERE entity1 = ?", new String[]{entity.getId().toString()});
+        Cursor         cursor         = Cache.openDatabase(database).rawQuery("SELECT entity2Type, entity2 FROM " + crossTableInfo.getTableName() + " WHERE entity1 = ?", new String[]{entity.getId().toString()});
         final List<T2> entities       = new ArrayList<T2>();
         try
         {
@@ -78,7 +78,7 @@
                 {
                     String typeName = cursor.getString(0);
                     Class<? extends Model> entity2Class = (Class<? extends Model>) Class.forName(typeName);
-                    entities.add((T2) Model.load(entity2Class, cursor.getLong(1)));
+                    entities.add((T2) Model.load(database, entity2Class, cursor.getLong(1)));
                 }
                 while (cursor.moveToNext());
             }
diff --git a/src/com/activeandroid/sebbia/query/From.java b/src/com/activeandroid/sebbia/query/From.java
index bf0d8bc0..0ea0c468 100644
--- a/src/com/activeandroid/sebbia/query/From.java
+++ b/src/com/activeandroid/sebbia/query/From.java
@@ -340,34 +340,34 @@ public String toCountSql()
         return sqlString(sql);
     }
 
-    public <T extends Model> List<T> execute()
+    public <T extends Model> List<T> execute(String database)
     {
         if (mQueryBase instanceof Select)
         {
-            return SQLiteUtils.rawQuery(mType, toSql(), getArguments());
+            return SQLiteUtils.rawQuery(database, mType, toSql(), getArguments());
 
         }
         else
         {
-            SQLiteUtils.execSql(toSql(), getArguments());
+            SQLiteUtils.execSql(database, toSql(), getArguments());
             Cache.getContext().getContentResolver().notifyChange(ContentProvider.createUri(mType, null), null);
             return null;
 
         }
     }
 
-    public <T extends Model> T executeSingle()
+    public <T extends Model> T executeSingle(String database)
     {
         if (mQueryBase instanceof Select)
         {
             limit(1);
-            return (T) SQLiteUtils.rawQuerySingle(mType, toSql(), getArguments());
+            return (T) SQLiteUtils.rawQuerySingle(database, mType, toSql(), getArguments());
 
         }
         else
         {
             limit(1);
-            SQLiteUtils.rawQuerySingle(mType, toSql(), getArguments()).delete();
+            SQLiteUtils.rawQuerySingle(database, mType, toSql(), getArguments()).delete(database);
             return null;
 
         }
@@ -376,19 +376,22 @@ public String toCountSql()
     /**
      * Gets a value indicating whether the query returns any rows.
      *
+     * @param database
      * @return <code>true</code> if the query returns at least one row; otherwise, <code>false</code>.
      */
-    public boolean exists()
+    public boolean exists(String database)
     {
-        return SQLiteUtils.intQuery(toExistsSql(), getArguments()) != 0;
+        return SQLiteUtils.intQuery(database, toExistsSql(), getArguments()) != 0;
     }
 
     /**
      * Gets the number of rows returned by the query.
+     *
+     * @param database
      */
-    public int count()
+    public int count(String database)
     {
-        return SQLiteUtils.intQuery(toCountSql(), getArguments());
+        return SQLiteUtils.intQuery(database, toCountSql(), getArguments());
     }
 
     public String[] getArguments()
diff --git a/src/com/activeandroid/sebbia/query/Set.java b/src/com/activeandroid/sebbia/query/Set.java
index fd240910..012bb492 100644
--- a/src/com/activeandroid/sebbia/query/Set.java
+++ b/src/com/activeandroid/sebbia/query/Set.java
@@ -88,9 +88,9 @@ public String toSql()
         return sql.toString();
     }
 
-    public void execute()
+    public void execute(String database)
     {
-        SQLiteUtils.execSql(toSql(), getArguments());
+        SQLiteUtils.execSql(database, toSql(), getArguments());
     }
 
     public String[] getArguments()
diff --git a/src/com/activeandroid/sebbia/util/SQLiteUtils.java b/src/com/activeandroid/sebbia/util/SQLiteUtils.java
index 6fe53a6e..3076115a 100644
--- a/src/com/activeandroid/sebbia/util/SQLiteUtils.java
+++ b/src/com/activeandroid/sebbia/util/SQLiteUtils.java
@@ -16,17 +16,6 @@
  * limitations under the License.
  */
 
-import java.lang.reflect.Constructor;
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
 import android.database.Cursor;
 import android.os.Build;
 import android.text.TextUtils;
@@ -38,6 +27,17 @@
 import com.activeandroid.sebbia.annotation.Column.ConflictAction;
 import com.activeandroid.sebbia.serializer.TypeSerializer;
 
+import java.lang.reflect.Constructor;
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
 public final class SQLiteUtils
 {
     //////////////////////////////////////////////////////////////////////////////////////
@@ -97,37 +97,37 @@
     // PUBLIC METHODS
     //////////////////////////////////////////////////////////////////////////////////////
 
-    public static void execSql(String sql)
+    public static void execSql(String database, String sql)
     {
-        Cache.openDatabase().execSQL(sql);
+        Cache.openDatabase(database).execSQL(sql);
     }
 
-    public static void execSql(String sql, Object[] bindArgs)
+    public static void execSql(String database, String sql, Object[] bindArgs)
     {
-        Cache.openDatabase().execSQL(sql, bindArgs);
+        Cache.openDatabase(database).execSQL(sql, bindArgs);
     }
 
-    public static <T extends Model> List<T> rawQuery(Class<? extends Model> type, String sql, String[] selectionArgs)
+    public static <T extends Model> List<T> rawQuery(String database, Class<? extends Model> type, String sql, String[] selectionArgs)
     {
-        Cursor  cursor   = Cache.openDatabase().rawQuery(sql, selectionArgs);
-        List<T> entities = processCursor(type, cursor);
+        Cursor  cursor   = Cache.openDatabase(database).rawQuery(sql, selectionArgs);
+        List<T> entities = processCursor(database, type, cursor);
         cursor.close();
 
         return entities;
     }
 
-    public static int intQuery(final String sql, final String[] selectionArgs)
+    public static int intQuery(String database, final String sql, final String[] selectionArgs)
     {
-        final Cursor cursor = Cache.openDatabase().rawQuery(sql, selectionArgs);
+        final Cursor cursor = Cache.openDatabase(database).rawQuery(sql, selectionArgs);
         final int    number = processIntCursor(cursor);
         cursor.close();
 
         return number;
     }
 
-    public static <T extends Model> T rawQuerySingle(Class<? extends Model> type, String sql, String[] selectionArgs)
+    public static <T extends Model> T rawQuerySingle(String database, Class<? extends Model> type, String sql, String[] selectionArgs)
     {
-        List<T> entities = rawQuery(type, sql, selectionArgs);
+        List<T> entities = rawQuery(database, type, sql, selectionArgs);
 
         if (entities.size() > 0)
         {
@@ -423,7 +423,7 @@ else if (column != null)
     }
 
     @SuppressWarnings("unchecked")
-    public static <T extends Model> List<T> processCursor(Class<? extends Model> type, Cursor cursor)
+    public static <T extends Model> List<T> processCursor(String database, Class<? extends Model> type, Cursor cursor)
     {
         TableInfo     tableInfo = Cache.getTableInfo(type);
         String        idName    = tableInfo.getIdName();
@@ -448,7 +448,7 @@ else if (column != null)
                         entity = (T) entityConstructor.newInstance();
                     }
 
-                    entity.loadFromCursor(cursor);
+                    entity.loadFromCursor(database, cursor);
                     entities.add((T) entity);
                 }
                 while (cursor.moveToNext());
diff --git a/tests/src/com/activeandroid/test/DefaultValueTest.java b/tests/src/com/activeandroid/test/DefaultValueTest.java
index f8ca7b4f..d331b9e5 100644
--- a/tests/src/com/activeandroid/test/DefaultValueTest.java
+++ b/tests/src/com/activeandroid/test/DefaultValueTest.java
@@ -1,7 +1,5 @@
 package com.activeandroid.test;
 
-import java.util.List;
-
 import android.app.Application;
 import android.test.ApplicationTestCase;
 
@@ -12,6 +10,8 @@
 import com.activeandroid.sebbia.annotation.Table;
 import com.activeandroid.sebbia.query.Select;
 
+import java.util.List;
+
 public class DefaultValueTest extends ApplicationTestCase<Application>
 {
 
@@ -71,7 +71,7 @@ public StringDefaultValueModel()
     public void testDefaultValueInteger()
     {
         initializedActiveAndroid(IntegerDefaultValueModel.class);
-        List<IntegerDefaultValueModel> models = insertAndSelectModels(IntegerDefaultValueModel.class);
+        List<IntegerDefaultValueModel> models = insertAndSelectModels("test", IntegerDefaultValueModel.class);
         for (IntegerDefaultValueModel model : models)
         {
             assertEquals(Integer.valueOf(20), model.defaultField);
@@ -81,7 +81,7 @@ public void testDefaultValueInteger()
     public void testDefaultValueBoolean()
     {
         initializedActiveAndroid(BooleanDefaultValueModel.class);
-        List<BooleanDefaultValueModel> models = insertAndSelectModels(BooleanDefaultValueModel.class);
+        List<BooleanDefaultValueModel> models = insertAndSelectModels("test", BooleanDefaultValueModel.class);
         for (BooleanDefaultValueModel model : models)
         {
             assertEquals(Boolean.valueOf(true), model.defaultField);
@@ -91,7 +91,7 @@ public void testDefaultValueBoolean()
     public void testDefaultValueString()
     {
         initializedActiveAndroid(StringDefaultValueModel.class);
-        List<StringDefaultValueModel> models = insertAndSelectModels(StringDefaultValueModel.class);
+        List<StringDefaultValueModel> models = insertAndSelectModels("test", StringDefaultValueModel.class);
         assertNotNull(models);
         for (StringDefaultValueModel model : models)
         {
@@ -99,7 +99,7 @@ public void testDefaultValueString()
         }
     }
 
-    private <T extends Model> List<T> insertAndSelectModels(Class<T> clazz)
+    private <T extends Model> List<T> insertAndSelectModels(String database, Class<T> clazz)
     {
         for (int i = 0; i < COUNT; ++i)
         {
@@ -112,10 +112,10 @@ public void testDefaultValueString()
             {
                 throw new RuntimeException(e);
             }
-            model.save();
+            model.save(database);
         }
 
-        List<T> models = new Select().from(clazz).execute();
+        List<T> models = new Select().from(clazz).execute(database);
         assertEquals(COUNT, models.size());
         return models;
     }
diff --git a/tests/src/com/activeandroid/test/ModelTest.java b/tests/src/com/activeandroid/test/ModelTest.java
index 319627f1..34f513ee 100644
--- a/tests/src/com/activeandroid/test/ModelTest.java
+++ b/tests/src/com/activeandroid/test/ModelTest.java
@@ -16,13 +16,6 @@
 
 package com.activeandroid.test;
 
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-
 import com.activeandroid.sebbia.Cache;
 import com.activeandroid.sebbia.Model;
 import com.activeandroid.sebbia.TableInfo;
@@ -30,6 +23,13 @@
 import com.activeandroid.sebbia.annotation.Table;
 import com.activeandroid.sebbia.query.Select;
 
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
 /**
  * Simple test now covering equals and hashcode methods.
  */
@@ -88,9 +88,9 @@ public void testEqualsDifferentRows()
         MockModel model2 = new MockModel();
         MockModel model3;
 
-        model1.save();
-        model2.save();
-        model3 = Model.load(MockModel.class, model1.getId());
+        model1.save("test");
+        model2.save("test");
+        model3 = Model.load("test", MockModel.class, model1.getId());
 
         // Not equal to each other.
         assertFalse(model1.equals(model2));
@@ -136,9 +136,9 @@ public void testHashCodeDifferentRows()
         Model      m2  = new MockModel();
         Model      m3;
 
-        m1.save();
-        m2.save();
-        m3 = Model.load(MockModel.class, m1.getId());
+        m1.save("test");
+        m2.save("test");
+        m3 = Model.load("test", MockModel.class, m1.getId());
 
         assertEquals(m1.hashCode(), m3.hashCode());
         assertFalse(m1.hashCode() == m2.hashCode());
@@ -174,19 +174,19 @@ public void testBooleanColumnType()
     {
         MockModel mockModel = new MockModel();
         mockModel.booleanField = false;
-        Long id = mockModel.save();
+        Long id = mockModel.save("test");
 
-        boolean databaseBooleanValue = MockModel.load(MockModel.class, id).booleanField;
+        boolean databaseBooleanValue = MockModel.load("test", MockModel.class, id).booleanField;
         assertEquals(false, databaseBooleanValue);
 
         // Test passing both a integer and a boolean into the where conditional.
-        assertEquals(mockModel, new Select().from(MockModel.class).where("booleanField = ?", 0).executeSingle());
+        assertEquals(mockModel, new Select().from(MockModel.class).where("booleanField = ?", 0).executeSingle("test"));
 
-        assertEquals(mockModel, new Select().from(MockModel.class).where("booleanField = ?", false).executeSingle());
+        assertEquals(mockModel, new Select().from(MockModel.class).where("booleanField = ?", false).executeSingle("test"));
 
-        assertNull(new Select().from(MockModel.class).where("booleanField = ?", 1).executeSingle());
+        assertNull(new Select().from(MockModel.class).where("booleanField = ?", 1).executeSingle("test"));
 
-        assertNull(new Select().from(MockModel.class).where("booleanField = ?", true).executeSingle());
+        assertNull(new Select().from(MockModel.class).where("booleanField = ?", true).executeSingle("test"));
     }
 
     /*
@@ -202,7 +202,7 @@ public void testJoinWithSameNames()
         parent.dateField = new Date();
         parent.doubleField = 2.0;
         parent.intField = 1;
-        parent.save();
+        parent.save("test");
 
         // the values to assign to child
         Date   dateValue   = new Date();
@@ -216,7 +216,7 @@ public void testJoinWithSameNames()
         child1.doubleField = doubleValue;
         child1.intField = intValue;
         child1.parent = parent;
-        child1.save();
+        child1.save("test");
 
         ChildMockModel child2 = new ChildMockModel();
         child2.booleanField = false;
@@ -224,7 +224,7 @@ public void testJoinWithSameNames()
         child2.doubleField = doubleValue;
         child2.intField = intValue;
         child2.parent = parent;
-        child2.save();
+        child2.save("test");
 
         // Store the ids assigned to child entities when persists
         List<Long> ids = new ArrayList<Long>();
@@ -232,7 +232,7 @@ public void testJoinWithSameNames()
         ids.add(child2.getId());
 
         // make the query with a join
-        List<ChildMockModel> result = new Select().from(ChildMockModel.class).join(ParentJoinMockModel.class).on("ParentJoinMockModel.Id = ChildMockModel.parent").execute();
+        List<ChildMockModel> result = new Select().from(ChildMockModel.class).join(ParentJoinMockModel.class).on("ParentJoinMockModel.Id = ChildMockModel.parent").execute("test");
 
         // check result
         assertNotNull(result);
diff --git a/tests/src/com/activeandroid/test/automigration/AddColumnsTest.java b/tests/src/com/activeandroid/test/automigration/AddColumnsTest.java
index e891ec28..abe7cca5 100644
--- a/tests/src/com/activeandroid/test/automigration/AddColumnsTest.java
+++ b/tests/src/com/activeandroid/test/automigration/AddColumnsTest.java
@@ -1,7 +1,5 @@
 package com.activeandroid.test.automigration;
 
-import java.util.List;
-
 import android.database.Cursor;
 
 import com.activeandroid.sebbia.ActiveAndroid;
@@ -10,6 +8,8 @@
 import com.activeandroid.sebbia.annotation.Table;
 import com.activeandroid.sebbia.query.Select;
 
+import java.util.List;
+
 public class AddColumnsTest extends AutoMigrationTest
 {
 
@@ -44,7 +44,7 @@ public void testMigrationNewFieldsAdded()
     {
         createOldDatabase();
         initializeActiveAndroid(AddColumnMigrationModel.class);
-        List<AddColumnMigrationModel> migrationModels = new Select().from(AddColumnMigrationModel.class).execute();
+        List<AddColumnMigrationModel> migrationModels = new Select().from(AddColumnMigrationModel.class).execute("test");
         assertEquals(10, migrationModels.size());
         for (int i = 0; i < 10; ++i)
         {
@@ -56,7 +56,7 @@ public void testMigrationNewFieldsAdded()
             assertNull(migrationModel.newString);
         }
 
-        Cursor cursor = ActiveAndroid.getDatabase().query(TABLE, null, null, null, null, null, null);
+        Cursor cursor = ActiveAndroid.getDatabase("test").query(TABLE, null, null, null, null, null, null);
         assertTrue(cursor.getColumnIndex("unusedColumn") != -1);
     }
 
diff --git a/tests/src/com/activeandroid/test/automigration/AddUniqueNotNullTest.java b/tests/src/com/activeandroid/test/automigration/AddUniqueNotNullTest.java
index 06dbf909..f8d404ea 100644
--- a/tests/src/com/activeandroid/test/automigration/AddUniqueNotNullTest.java
+++ b/tests/src/com/activeandroid/test/automigration/AddUniqueNotNullTest.java
@@ -1,7 +1,5 @@
 package com.activeandroid.test.automigration;
 
-import java.util.List;
-
 import android.database.Cursor;
 
 import com.activeandroid.sebbia.ActiveAndroid;
@@ -10,6 +8,8 @@
 import com.activeandroid.sebbia.annotation.Table;
 import com.activeandroid.sebbia.query.Select;
 
+import java.util.List;
+
 public class AddUniqueNotNullTest extends AutoMigrationTest
 {
 
@@ -40,7 +40,7 @@ public void testMigrationUniqueNotNullFieldAdded()
     {
         createOldDatabase();
         initializeActiveAndroid(AddUniqueMigrationModel.class);
-        List<AddUniqueMigrationModel> migrationModels = new Select().from(AddUniqueMigrationModel.class).execute();
+        List<AddUniqueMigrationModel> migrationModels = new Select().from(AddUniqueMigrationModel.class).execute("test");
         assertEquals(10, migrationModels.size());
         for (int i = 0; i < 10; ++i)
         {
@@ -51,7 +51,7 @@ public void testMigrationUniqueNotNullFieldAdded()
             assertEquals((float) i, migrationModel.floatValue);
         }
 
-        Cursor cursor = ActiveAndroid.getDatabase().query(TABLE, null, null, null, null, null, null);
+        Cursor cursor = ActiveAndroid.getDatabase("test").query(TABLE, null, null, null, null, null, null);
         assertTrue(cursor.getColumnIndex("unusedColumn") == -1);
     }
 
diff --git a/tests/src/com/activeandroid/test/automigration/DefaultValueMigrationTest.java b/tests/src/com/activeandroid/test/automigration/DefaultValueMigrationTest.java
index 7ba63c07..f85f6ca3 100644
--- a/tests/src/com/activeandroid/test/automigration/DefaultValueMigrationTest.java
+++ b/tests/src/com/activeandroid/test/automigration/DefaultValueMigrationTest.java
@@ -1,7 +1,5 @@
 package com.activeandroid.test.automigration;
 
-import java.util.List;
-
 import android.database.Cursor;
 
 import com.activeandroid.sebbia.ActiveAndroid;
@@ -10,6 +8,8 @@
 import com.activeandroid.sebbia.annotation.Table;
 import com.activeandroid.sebbia.query.Select;
 
+import java.util.List;
+
 public class DefaultValueMigrationTest extends AutoMigrationTest
 {
     private static final String TABLE = "default_value_migration";
@@ -41,7 +41,7 @@ public void testDefaultValueMigrationTest()
     {
         createOldDatabase();
         initializeActiveAndroid(DefaultValueMigrationModel.class);
-        List<DefaultValueMigrationModel> migrationModels = new Select().from(DefaultValueMigrationModel.class).execute();
+        List<DefaultValueMigrationModel> migrationModels = new Select().from(DefaultValueMigrationModel.class).execute("test");
         assertEquals(10, migrationModels.size());
         for (int i = 0; i < 10; ++i)
         {
@@ -53,7 +53,7 @@ public void testDefaultValueMigrationTest()
             assertEquals("some_value", migrationModel.defaultValue);
         }
 
-        Cursor cursor = ActiveAndroid.getDatabase().query(TABLE, null, null, null, null, null, null);
+        Cursor cursor = ActiveAndroid.getDatabase("test").query(TABLE, null, null, null, null, null, null);
         assertTrue(cursor.getColumnIndex("unusedColumn") != -1);
     }
 
diff --git a/tests/src/com/activeandroid/test/model/DoNotGenerateTest.java b/tests/src/com/activeandroid/test/model/DoNotGenerateTest.java
index 164846c7..87499291 100644
--- a/tests/src/com/activeandroid/test/model/DoNotGenerateTest.java
+++ b/tests/src/com/activeandroid/test/model/DoNotGenerateTest.java
@@ -1,13 +1,13 @@
 package com.activeandroid.test.model;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import com.activeandroid.sebbia.Model;
 import com.activeandroid.sebbia.annotation.Column;
 import com.activeandroid.sebbia.annotation.DoNotGenerate;
 import com.activeandroid.sebbia.query.Select;
 
+import java.util.ArrayList;
+import java.util.List;
+
 public class DoNotGenerateTest extends ModelTestCase
 {
 
@@ -29,9 +29,9 @@ public void testNoGenerate()
             impls.add(model);
         }
 
-        Model.saveMultiple(impls);
+        Model.saveMultiple("test", impls);
 
-        impls = new Select().from(DoNotGenerateModel.class).execute();
+        impls = new Select().from(DoNotGenerateModel.class).execute("test");
         assertEquals(100, impls.size());
         for (int i = 0; i < impls.size(); ++i)
         {
diff --git a/tests/src/com/activeandroid/test/model/EnumTest.java b/tests/src/com/activeandroid/test/model/EnumTest.java
index ffb6bdeb..89942f22 100644
--- a/tests/src/com/activeandroid/test/model/EnumTest.java
+++ b/tests/src/com/activeandroid/test/model/EnumTest.java
@@ -1,8 +1,5 @@
 package com.activeandroid.test.model;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import android.database.Cursor;
 
 import com.activeandroid.sebbia.ActiveAndroid;
@@ -13,6 +10,9 @@
 import com.activeandroid.sebbia.annotation.Table;
 import com.activeandroid.sebbia.query.Delete;
 
+import java.util.ArrayList;
+import java.util.List;
+
 public class EnumTest extends ModelTestCase
 {
 
@@ -45,17 +45,17 @@ public EnumModel(Enumeration enumeration)
 
     public void testEnumSaving()
     {
-        new Delete().from(EnumModel.class).execute();
+        new Delete().from(EnumModel.class).execute("test");
         List<EnumModel> models = new ArrayList<EnumModel>();
         for (Enumeration enumeration : Enumeration.values())
         {
             models.add(new EnumModel(enumeration));
         }
 
-        Model.saveMultiple(models);
+        Model.saveMultiple("test", models);
 
         TableInfo tableInfo = Cache.getTableInfo(EnumModel.class);
-        Cursor    cursor    = ActiveAndroid.getDatabase().query(tableInfo.getTableName(), new String[]{"enum"}, null, null, null, null, null);
+        Cursor    cursor    = ActiveAndroid.getDatabase("test").query(tableInfo.getTableName(), new String[]{"enum"}, null, null, null, null, null);
         while (cursor.moveToNext())
         {
             assertTrue(cursor.getString(0).equals(Enumeration.values()[cursor.getPosition()]));
diff --git a/tests/src/com/activeandroid/test/model/ManyToManyTest.java b/tests/src/com/activeandroid/test/model/ManyToManyTest.java
index 8c35f26d..f8476439 100644
--- a/tests/src/com/activeandroid/test/model/ManyToManyTest.java
+++ b/tests/src/com/activeandroid/test/model/ManyToManyTest.java
@@ -1,12 +1,12 @@
 package com.activeandroid.test.model;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import com.activeandroid.sebbia.Model;
 import com.activeandroid.sebbia.model.ManyToManyRelation;
 import com.activeandroid.test.MockModel;
 
+import java.util.ArrayList;
+import java.util.List;
+
 public class ManyToManyTest extends ModelTestCase
 {
 
@@ -38,14 +38,14 @@ public void testManyToManyRelationForward() throws Exception
         for (int i = 0; i < 3; ++i)
         {
             MockModelList mockModelList = new MockModelList();
-            mockModelList.save();
-            ManyToManyRelation.setRelationsFront(MockManyToManyRelation.class, mockModelList, mockModels);
+            mockModelList.save("test");
+            ManyToManyRelation.setRelationsFront("test", MockManyToManyRelation.class, mockModelList, mockModels);
             mockModelLists.add(mockModelList);
         }
 
         for (MockModelList list : mockModelLists)
         {
-            verifyMockModels(ManyToManyRelation.getRelationsFront(MockManyToManyRelation.class, list), MockModel.class);
+            verifyMockModels(ManyToManyRelation.getRelationsFront("test", MockManyToManyRelation.class, list), MockModel.class);
         }
     }
 
@@ -56,13 +56,13 @@ public void testManyToManyRelationReverse() throws Exception
         for (int i = 0; i < 3; ++i)
         {
             MockModel mockModel = new MockModel();
-            mockModel.save();
-            ManyToManyRelation.setRelationsReverse(MockManyToManyRelation.class, mockModel, mockModelLists);
+            mockModel.save("test");
+            ManyToManyRelation.setRelationsReverse("test", MockManyToManyRelation.class, mockModel, mockModelLists);
             mockModels.add(mockModel);
         }
         for (MockModel mockModel : mockModels)
         {
-            verifyMockModels(ManyToManyRelation.getRelationsReverse(MockManyToManyRelation.class, mockModel), MockModelList.class);
+            verifyMockModels(ManyToManyRelation.getRelationsReverse("test", MockManyToManyRelation.class, mockModel), MockModelList.class);
         }
     }
 
@@ -85,7 +85,7 @@ private void verifyMockModels(List<? extends MockModel> mockModels, Class<? exte
         {
             MockModel mockModel = clazz.newInstance();
             mockModel.intField = i;
-            mockModel.save();
+            mockModel.save("test");
             mockModels.add((T) mockModel);
         }
         return mockModels;
diff --git a/tests/src/com/activeandroid/test/model/OneToManyTest.java b/tests/src/com/activeandroid/test/model/OneToManyTest.java
index 044a014f..336994b4 100644
--- a/tests/src/com/activeandroid/test/model/OneToManyTest.java
+++ b/tests/src/com/activeandroid/test/model/OneToManyTest.java
@@ -1,12 +1,12 @@
 package com.activeandroid.test.model;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import com.activeandroid.sebbia.Model;
 import com.activeandroid.sebbia.model.OneToManyRelation;
 import com.activeandroid.test.MockModel;
 
+import java.util.ArrayList;
+import java.util.List;
+
 public class OneToManyTest extends ModelTestCase
 {
 
@@ -22,19 +22,19 @@ public void testOneToManyRelation()
     {
 
         MockModel mockModelsHolder = new MockModel();
-        mockModelsHolder.save();
+        mockModelsHolder.save("test");
 
         List<Model> mockModels = new ArrayList<Model>();
         for (int i = 0; i < 5; ++i)
         {
             MockModel mockModel = new MockModel();
-            mockModel.save();
+            mockModel.save("test");
             mockModels.add(mockModel);
         }
 
-        OneToManyRelation.setRelations(MockOneToManyRelation.class, mockModelsHolder, mockModels);
+        OneToManyRelation.setRelations("test", MockOneToManyRelation.class, mockModelsHolder, mockModels);
 
-        mockModels = OneToManyRelation.getRelations(MockOneToManyRelation.class, mockModelsHolder);
+        mockModels = OneToManyRelation.getRelations("test", MockOneToManyRelation.class, mockModelsHolder);
         assertTrue(mockModels.size() == 5);
     }
 }
diff --git a/tests/src/com/activeandroid/test/parser/ParserConfigurationTest.java b/tests/src/com/activeandroid/test/parser/ParserConfigurationTest.java
index 3b6e0a27..80ef2974 100644
--- a/tests/src/com/activeandroid/test/parser/ParserConfigurationTest.java
+++ b/tests/src/com/activeandroid/test/parser/ParserConfigurationTest.java
@@ -25,7 +25,7 @@ public void testLegacyMigration()
                     .setDatabaseVersion(2)
                     .create();
 
-            DatabaseHelper helper = new DatabaseHelper(configuration);
+            DatabaseHelper helper = new DatabaseHelper(configuration.getContext(), configuration.getDatabaseName(), configuration.getDatabaseVersion(), configuration.getSqlParser());
             SQLiteDatabase db = helper.getWritableDatabase();
             helper.onUpgrade(db, 1, 2);
 
@@ -53,7 +53,7 @@ public void testDelimitedMigration()
                 .setDatabaseVersion(2)
                 .create();
 
-        DatabaseHelper helper = new DatabaseHelper(configuration);
+        DatabaseHelper helper = new DatabaseHelper(configuration.getContext(), configuration.getDatabaseName(), configuration.getDatabaseVersion(), configuration.getSqlParser());
         SQLiteDatabase db     = helper.getWritableDatabase();
         helper.onUpgrade(db, 1, 2);
     }
diff --git a/tests/src/com/activeandroid/test/query/CountTest.java b/tests/src/com/activeandroid/test/query/CountTest.java
index 5e9ef4bb..fb65dacf 100644
--- a/tests/src/com/activeandroid/test/query/CountTest.java
+++ b/tests/src/com/activeandroid/test/query/CountTest.java
@@ -1,20 +1,20 @@
 
 package com.activeandroid.test.query;
 
-import java.util.List;
-
 import com.activeandroid.sebbia.query.Delete;
 import com.activeandroid.sebbia.query.From;
 import com.activeandroid.sebbia.query.Select;
 import com.activeandroid.test.MockModel;
 
+import java.util.List;
+
 
 public class CountTest extends SqlableTestCase
 {
 
     private void cleanTable()
     {
-        new Delete().from(MockModel.class).execute();
+        new Delete().from(MockModel.class).execute("test");
     }
 
     private void populateTable()
@@ -27,9 +27,9 @@ private void populateTable()
         m2.intField = 1;
         m3.intField = 2;
 
-        m1.save();
-        m2.save();
-        m3.save();
+        m1.save("test");
+        m2.save("test");
+        m3.save("test");
     }
 
     /**
@@ -90,8 +90,8 @@ public void testCountTable()
         From from = new Select()
                 .from(MockModel.class);
 
-        final List<MockModel> list  = from.execute();
-        final int             count = from.count();
+        final List<MockModel> list  = from.execute("test");
+        final int             count = from.count("test");
 
         assertEquals(3, count);
         assertEquals(list.size(), count);
@@ -110,8 +110,8 @@ public void testCountWhereClause()
                 .from(MockModel.class)
                 .where("intField = ?", 1);
 
-        final List<MockModel> list  = from.execute();
-        final int             count = from.count();
+        final List<MockModel> list  = from.execute("test");
+        final int             count = from.count("test");
 
         assertEquals(2, count);
         assertEquals(list.size(), count);
@@ -130,8 +130,8 @@ public void testCountEmptyResult()
                 .from(MockModel.class)
                 .where("intField = ?", 3);
 
-        final List<MockModel> list  = from.execute();
-        final int             count = from.count();
+        final List<MockModel> list  = from.execute("test");
+        final int             count = from.count("test");
 
         assertEquals(0, count);
         assertEquals(list.size(), count);
@@ -150,8 +150,8 @@ public void testCountOrderBy()
                 .where("intField = ?", 1)
                 .orderBy("intField ASC");
 
-        final List<MockModel> list  = from.execute();
-        final int             count = from.count();
+        final List<MockModel> list  = from.execute("test");
+        final int             count = from.count("test");
 
         assertEquals(2, count);
         assertEquals(list.size(), count);
@@ -171,8 +171,8 @@ public void testCountGroupBy()
                 .groupBy("intField")
                 .having("intField = 1");
 
-        final List<MockModel> list  = from.execute();
-        final int             count = from.count();
+        final List<MockModel> list  = from.execute("test");
+        final int             count = from.count("test");
 
         assertEquals(2, count);
         assertEquals(1, list.size());
diff --git a/tests/src/com/activeandroid/test/query/ExistsTest.java b/tests/src/com/activeandroid/test/query/ExistsTest.java
index 6c26f217..fac578c3 100644
--- a/tests/src/com/activeandroid/test/query/ExistsTest.java
+++ b/tests/src/com/activeandroid/test/query/ExistsTest.java
@@ -1,20 +1,20 @@
 
 package com.activeandroid.test.query;
 
-import java.util.List;
-
 import com.activeandroid.sebbia.query.Delete;
 import com.activeandroid.sebbia.query.From;
 import com.activeandroid.sebbia.query.Select;
 import com.activeandroid.test.MockModel;
 
+import java.util.List;
+
 
 public class ExistsTest extends SqlableTestCase
 {
 
     private void cleanTable()
     {
-        new Delete().from(MockModel.class).execute();
+        new Delete().from(MockModel.class).execute("test");
     }
 
     private void populateTable()
@@ -27,9 +27,9 @@ private void populateTable()
         m2.intField = 1;
         m3.intField = 2;
 
-        m1.save();
-        m2.save();
-        m3.save();
+        m1.save("test");
+        m2.save("test");
+        m3.save("test");
     }
 
     /**
@@ -43,8 +43,8 @@ public void testExistsTable()
         From from = new Select()
                 .from(MockModel.class);
 
-        final List<MockModel> list   = from.execute();
-        final boolean         exists = from.exists();
+        final List<MockModel> list   = from.execute("test");
+        final boolean         exists = from.exists("test");
 
         assertTrue(exists);
         assertTrue(list.size() > 0);
@@ -110,8 +110,8 @@ public void testExistsWhereClause()
                 .from(MockModel.class)
                 .where("intField = ?", 1);
 
-        final List<MockModel> list   = from.execute();
-        final boolean         exists = from.exists();
+        final List<MockModel> list   = from.execute("test");
+        final boolean         exists = from.exists("test");
 
         assertTrue(exists);
         assertTrue(list.size() > 0);
@@ -130,8 +130,8 @@ public void testExistsEmptyResult()
                 .from(MockModel.class)
                 .where("intField = ?", 3);
 
-        final List<MockModel> list   = from.execute();
-        final boolean         exists = from.exists();
+        final List<MockModel> list   = from.execute("test");
+        final boolean         exists = from.exists("test");
 
         assertFalse(exists);
         assertFalse(list.size() > 0);
@@ -150,8 +150,8 @@ public void testCountOrderBy()
                 .where("intField = ?", 1)
                 .orderBy("intField ASC");
 
-        final List<MockModel> list   = from.execute();
-        final boolean         exists = from.exists();
+        final List<MockModel> list   = from.execute("test");
+        final boolean         exists = from.exists("test");
 
         assertTrue(exists);
         assertTrue(list.size() > 0);
@@ -170,8 +170,8 @@ public void testCountGroupBy()
                 .groupBy("intField")
                 .having("intField = 1");
 
-        final List<MockModel> list   = from.execute();
-        final boolean         exists = from.exists();
+        final List<MockModel> list   = from.execute("test");
+        final boolean         exists = from.exists("test");
 
         assertTrue(exists);
         assertTrue(list.size() > 0);
@@ -190,8 +190,8 @@ public void testCountGroupByEmpty()
                 .groupBy("intField")
                 .having("intField = 3");
 
-        final List<MockModel> list   = from.execute();
-        final boolean         exists = from.exists();
+        final List<MockModel> list   = from.execute("test");
+        final boolean         exists = from.exists("test");
 
         assertFalse(exists);
         assertFalse(list.size() > 0);
