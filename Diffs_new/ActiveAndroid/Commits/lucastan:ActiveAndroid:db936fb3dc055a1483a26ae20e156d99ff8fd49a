diff --git a/tests/src/com/activeandroid/test/ModelTest.java b/tests/src/com/activeandroid/test/ModelTest.java
index 372d3533..ca2a2f62 100644
--- a/tests/src/com/activeandroid/test/ModelTest.java
+++ b/tests/src/com/activeandroid/test/ModelTest.java
@@ -20,6 +20,7 @@
 import com.activeandroid.Model;
 import com.activeandroid.TableInfo;
 import com.activeandroid.annotation.Table;
+import com.activeandroid.query.Select;
 
 import java.lang.reflect.Field;
 import java.util.HashSet;
@@ -142,6 +143,32 @@ public void testColumnNamesDefaulToFieldNames() {
         }
     }
 
+    /**
+     * Boolean should handle integer (0/1) and boolean (false/true) values.
+     */
+    public void testBooleanColumnType() {
+        MockModel mockModel = new MockModel();
+        mockModel.booleanField = false;
+        Long id = mockModel.save();
+
+        boolean databaseBooleanValue = MockModel.load( MockModel.class, id ).booleanField;
+
+        assertEquals( false, databaseBooleanValue );
+
+        // Test passing both a integer and a boolean into the where conditional.
+        assertEquals(
+                mockModel,
+                new Select().from(MockModel.class).where("booleanField = ?", 0).executeSingle() );
+
+        assertEquals(
+                mockModel,
+                new Select().from(MockModel.class).where("booleanField = ?", false).executeSingle() );
+
+        assertNull( new Select().from(MockModel.class).where("booleanField = ?", 1).executeSingle() );
+
+        assertNull( new Select().from(MockModel.class).where("booleanField = ?", true).executeSingle() );
+    }
+
 	/**
 	 * Mock model as we need 2 different model classes.
 	 */
