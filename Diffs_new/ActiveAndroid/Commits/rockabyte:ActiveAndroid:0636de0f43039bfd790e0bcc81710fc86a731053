diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 1984876b..edb254ef 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -65,7 +65,6 @@ public void setterActiveAndroidId(Long activeAndroidId) {
         mActiveAndroidId = activeAndroidId;
     }
 
-
     public final void delete() {
 		Cache.openDatabase().delete(mTableInfo.getTableName(), idName+"=?", new String[] { getActiveAndroidId().toString() });
 		Cache.removeEntity(this);
@@ -288,12 +287,11 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 	}
 
     /**
-     * Function to be subclassed when needed. Intended to get a database model via refModel.
+     * Function to be subclassed when needed. Intended to get a database model by this reference.
      *
-     * @param refModel
      * @return
      */
-    protected <T extends Model> T getDBModel(T refModel) {
+    public <T extends Model> T getDBModel() {
         return null;
     }
 
diff --git a/src/com/activeandroid/ModelInfo.java b/src/com/activeandroid/ModelInfo.java
index 9ace89bf..35241b7f 100644
--- a/src/com/activeandroid/ModelInfo.java
+++ b/src/com/activeandroid/ModelInfo.java
@@ -30,10 +30,12 @@
 import android.content.Context;
 
 import com.activeandroid.serializer.CalendarSerializer;
+import com.activeandroid.serializer.KeyValueSerializer;
 import com.activeandroid.serializer.SqlDateSerializer;
 import com.activeandroid.serializer.TypeSerializer;
 import com.activeandroid.serializer.UtilDateSerializer;
 import com.activeandroid.serializer.FileSerializer;
+import com.activeandroid.util.KeyValueMap;
 import com.activeandroid.util.Log;
 import com.activeandroid.util.ReflectionUtils;
 import dalvik.system.DexFile;
@@ -50,6 +52,7 @@
 			put(java.sql.Date.class, new SqlDateSerializer());
 			put(java.util.Date.class, new UtilDateSerializer());
 			put(java.io.File.class, new FileSerializer());
+            put(KeyValueMap.class, new KeyValueSerializer());
 		}
 	};
 
diff --git a/src/com/activeandroid/serializer/KeyValueSerializer.java b/src/com/activeandroid/serializer/KeyValueSerializer.java
new file mode 100644
index 00000000..dbd183ad
--- /dev/null
+++ b/src/com/activeandroid/serializer/KeyValueSerializer.java
@@ -0,0 +1,51 @@
+package com.activeandroid.serializer;
+
+import com.activeandroid.util.KeyValueMap;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+
+/**
+ * Created by sschlicht on 10.04.14.
+ */
+public class KeyValueSerializer extends TypeSerializer {
+    public Class<?> getDeserializedType() {
+        return KeyValueMap.class;
+    }
+
+    public Class<?> getSerializedType() {
+        return byte[].class;
+    }
+
+    public byte[] serialize(Object data) {
+        if (data == null) {
+            return null;
+        }
+
+        try {
+            ByteArrayOutputStream out = new ByteArrayOutputStream();
+            ObjectOutputStream os = new ObjectOutputStream(out);
+            os.writeObject(data);
+
+            return out.toByteArray();
+        } finally {
+            return null;
+        }
+    }
+
+    public KeyValueMap deserialize(Object data) {
+        if (data == null) {
+            return null;
+        }
+
+        try {
+            ByteArrayInputStream in = new ByteArrayInputStream((byte[]) data);
+            ObjectInputStream is = new ObjectInputStream(in);
+            return (KeyValueMap)is.readObject();
+        } finally {
+            return null;
+        }
+    }
+}
diff --git a/src/com/activeandroid/util/KeyValueMap.java b/src/com/activeandroid/util/KeyValueMap.java
new file mode 100644
index 00000000..12bdea3e
--- /dev/null
+++ b/src/com/activeandroid/util/KeyValueMap.java
@@ -0,0 +1,22 @@
+package com.activeandroid.util;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Created by sschlicht on 10.04.14.
+ */
+public class KeyValueMap<K,V> {
+    private Map<K, V> map =
+            new HashMap<K, V>();
+
+    public void addValue(K key, V value) {
+        if (key == null)
+            throw new NullPointerException("Type is null");
+        map.put(key, value);
+    }
+
+    public <K,V> V getValue(K key) {
+        return (V) map.get(key);
+    }
+}
\ No newline at end of file
