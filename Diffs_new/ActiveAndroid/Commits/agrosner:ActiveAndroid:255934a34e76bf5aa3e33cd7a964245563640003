diff --git a/src/main/java/com/activeandroid/Cache.java b/src/main/java/com/activeandroid/Cache.java
index e6d8b5c6..a2a5cf0d 100644
--- a/src/main/java/com/activeandroid/Cache.java
+++ b/src/main/java/com/activeandroid/Cache.java
@@ -22,6 +22,7 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.support.v4.util.LruCache;
 
+import com.activeandroid.serializer.ClassSerializer;
 import com.activeandroid.serializer.TypeSerializer;
 import com.activeandroid.util.AALog;
 
@@ -41,7 +42,7 @@
 	private static ModelInfo sModelInfo;
 	private static DatabaseHelper sDatabaseHelper;
 
-	private static LruCache<String, Model> sEntities;
+	private static LruCache<String, IModelInfo> sEntities;
 
 	private static boolean sIsInitialized = false;
 
@@ -70,7 +71,7 @@ public static synchronized void initialize(Configuration configuration) {
 		// actually used, however at this point it seems like the reflection
 		// required would be too costly to be of any benefit. We'll just set a max
 		// object size instead.
-		sEntities = new LruCache<String, Model>(configuration.getCacheSize());
+		sEntities = new LruCache<String, IModelInfo>(configuration.getCacheSize());
 
 		openDatabase();
 
@@ -114,19 +115,19 @@ public static Context getContext() {
 
 	// Entity cache
 
-	public static String getIdentifier(Class<? extends Model> type, String entityId) {
+	public static String getIdentifier(Class<? extends IModelInfo> type, String entityId) {
 		return getTableName(type) + "@" + entityId;
 	}
 
-	public static String getIdentifier(Model entity) {
+	public static String getIdentifier(IModelInfo entity) {
 		return getIdentifier(entity.getClass(), entity.getId());
 	}
 
-	public static synchronized void addEntity(Model entity) {
+	public static synchronized void addEntity(IModelInfo entity) {
 		sEntities.put(getIdentifier(entity), entity);
 	}
 
-	public static synchronized Model getEntity(Class<? extends Model> type, String entityId) {
+	public static synchronized IModelInfo getEntity(Class<? extends IModelInfo> type, String entityId) {
 		return sEntities.get(getIdentifier(type, entityId));
 	}
 
@@ -140,7 +141,7 @@ public static synchronized void removeEntity(Model entity) {
 		return sModelInfo.getTableInfos();
 	}
 
-	public static synchronized TableInfo getTableInfo(Class<? extends Model> type) {
+	public static synchronized TableInfo getTableInfo(Class<? extends IModelInfo> type) {
 		return sModelInfo.getTableInfo(type);
 	}
 
@@ -148,7 +149,11 @@ public static synchronized TypeSerializer getParserForType(Class<?> type) {
 		return sModelInfo.getTypeSerializer(type);
 	}
 
-	public static synchronized String getTableName(Class<? extends Model> type) {
+	public static synchronized String getTableName(Class<? extends IModelInfo> type) {
 		return sModelInfo.getTableInfo(type).getTableName();
 	}
+
+    public static synchronized ClassSerializer getClassSerializerForType(Class<?> type){
+        return sModelInfo.getClassSerializer(type);
+    }
 }
diff --git a/src/main/java/com/activeandroid/Configuration.java b/src/main/java/com/activeandroid/Configuration.java
index 4f1ad20a..42fc3f12 100644
--- a/src/main/java/com/activeandroid/Configuration.java
+++ b/src/main/java/com/activeandroid/Configuration.java
@@ -18,38 +18,30 @@
 
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.HashMap;
 import java.util.List;
 
 import android.content.Context;
 
+import com.activeandroid.serializer.ClassSerializer;
 import com.activeandroid.serializer.TypeSerializer;
 import com.activeandroid.util.AALog;
 import com.activeandroid.util.ReflectionUtils;
 
 public class Configuration {
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PRIVATE MEMBERS
-	//////////////////////////////////////////////////////////////////////////////////////
 
 	private Context mContext;
 	private String mDatabaseName;
 	private int mDatabaseVersion;
-	private List<Class<? extends Model>> mModelClasses;
+	private List<Class<? extends IModelInfo>> mModelClasses;
 	private List<Class<? extends TypeSerializer>> mTypeSerializers;
-	private int mCacheSize;
-
-	//////////////////////////////////////////////////////////////////////////////////////
-	// CONSTRUCTORS
-	//////////////////////////////////////////////////////////////////////////////////////
+    private List<Class<? extends ClassSerializer>> mClassSerializers;
+    private int mCacheSize;
 
 	private Configuration(Context context) {
 		mContext = context;
 	}
 
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PUBLIC METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
-
 	public Context getContext() {
 		return mContext;
 	}
@@ -62,7 +54,7 @@ public int getDatabaseVersion() {
 		return mDatabaseVersion;
 	}
 
-	public List<Class<? extends Model>> getModelClasses() {
+	public List<Class<? extends IModelInfo>> getModelClasses() {
 		return mModelClasses;
 	}
 
@@ -70,6 +62,10 @@ public int getDatabaseVersion() {
 		return mTypeSerializers;
 	}
 
+    public List<Class<? extends ClassSerializer>> getClassSerializers(){
+        return mClassSerializers;
+    }
+
 	public int getCacheSize() {
 		return mCacheSize;
 	}
@@ -78,48 +74,31 @@ public boolean isValid() {
 		return mModelClasses != null && mModelClasses.size() > 0;
 	}
 
-	//////////////////////////////////////////////////////////////////////////////////////
-	// INNER CLASSES
-	//////////////////////////////////////////////////////////////////////////////////////
-
 	public static class Builder {
-		//////////////////////////////////////////////////////////////////////////////////////
-		// PRIVATE CONSTANTS
-		//////////////////////////////////////////////////////////////////////////////////////
 
 		private static final String AA_DB_NAME = "AA_DB_NAME";
 		private static final String AA_DB_VERSION = "AA_DB_VERSION";
 		private final static String AA_MODELS = "AA_MODELS";
 		private final static String AA_SERIALIZERS = "AA_SERIALIZERS";
+        private final static String AA_CLASS_SERIALIZERS = "AA_CLASS_SERIALIZERS";
 
 		private static final int DEFAULT_CACHE_SIZE = 1024;
 		private static final String DEFAULT_DB_NAME = "Application.db";
 
-		//////////////////////////////////////////////////////////////////////////////////////
-		// PRIVATE MEMBERS
-		//////////////////////////////////////////////////////////////////////////////////////
-
 		private Context mContext;
 
 		private Integer mCacheSize;
 		private String mDatabaseName;
 		private Integer mDatabaseVersion;
-		private List<Class<? extends Model>> mModelClasses;
+		private List<Class<? extends IModelInfo>> mModelClasses;
 		private List<Class<? extends TypeSerializer>> mTypeSerializers;
-
-		//////////////////////////////////////////////////////////////////////////////////////
-		// CONSTRUCTORS
-		//////////////////////////////////////////////////////////////////////////////////////
+        private List<Class<? extends ClassSerializer>> mClassSerializers;
 
 		public Builder(Context context) {
 			mContext = context.getApplicationContext();
 			mCacheSize = DEFAULT_CACHE_SIZE;
 		}
 
-		//////////////////////////////////////////////////////////////////////////////////////
-		// PUBLIC METHODS
-		//////////////////////////////////////////////////////////////////////////////////////
-
 		public Builder setCacheSize(int cacheSize) {
 			mCacheSize = cacheSize;
 			return this;
@@ -135,25 +114,25 @@ public Builder setDatabaseVersion(int databaseVersion) {
 			return this;
 		}
 
-		public Builder addModelClass(Class<? extends Model> modelClass) {
+		public Builder addModelClass(Class<? extends IModelInfo> modelClass) {
 			if (mModelClasses == null) {
-				mModelClasses = new ArrayList<Class<? extends Model>>();
+				mModelClasses = new ArrayList<Class<? extends IModelInfo>>();
 			}
 
 			mModelClasses.add(modelClass);
 			return this;
 		}
 
-		public Builder addModelClasses(Class<? extends Model>... modelClasses) {
+		public Builder addModelClasses(Class<? extends IModelInfo>... modelClasses) {
 			if (mModelClasses == null) {
-				mModelClasses = new ArrayList<Class<? extends Model>>();
+				mModelClasses = new ArrayList<Class<? extends IModelInfo>>();
 			}
 
 			mModelClasses.addAll(Arrays.asList(modelClasses));
 			return this;
 		}
 
-		public Builder setModelClasses(Class<? extends Model>... modelClasses) {
+		public Builder setModelClasses(Class<? extends IModelInfo>... modelClasses) {
 			mModelClasses = Arrays.asList(modelClasses);
 			return this;
 		}
@@ -181,6 +160,29 @@ public Builder setTypeSerializers(Class<? extends TypeSerializer>... typeSeriali
 			return this;
 		}
 
+        public Builder addClassSerializer(Class<? extends ClassSerializer> typeSerializer) {
+            if (mClassSerializers == null) {
+                mClassSerializers = new ArrayList<Class<? extends ClassSerializer>>();
+            }
+
+            mClassSerializers.add(typeSerializer);
+            return this;
+        }
+
+        public Builder addClassSerializers(Class<? extends ClassSerializer>... typeSerializers) {
+            if (mClassSerializers == null) {
+                mClassSerializers = new ArrayList<Class<? extends ClassSerializer>>();
+            }
+
+            mClassSerializers.addAll(Arrays.asList(typeSerializers));
+            return this;
+        }
+
+        public Builder setClassSerializers(Class<? extends ClassSerializer>... typeSerializers) {
+            mClassSerializers = Arrays.asList(typeSerializers);
+            return this;
+        }
+
 		public Configuration create() {
 			Configuration configuration = new Configuration(mContext);
 			configuration.mCacheSize = mCacheSize;
@@ -223,6 +225,15 @@ public Configuration create() {
 				}
 			}
 
+            if(mClassSerializers!=null){
+                configuration.mClassSerializers = mClassSerializers;
+            } else{
+                final String classSerializerList = ReflectionUtils.getMetaData(mContext, AA_CLASS_SERIALIZERS);
+                if(classSerializerList!=null){
+                    configuration.mClassSerializers = loadClassSerializerList(classSerializerList.split(","));
+                }
+            }
+
 			return configuration;
 		}
 
@@ -250,8 +261,8 @@ private int getMetaDataDatabaseVersionOrDefault() {
 			return aaVersion;
 		}
 
-		private List<Class<? extends Model>> loadModelList(String[] models) {
-			final List<Class<? extends Model>> modelClasses = new ArrayList<Class<? extends Model>>();
+		private List<Class<? extends IModelInfo>> loadModelList(String[] models) {
+			final List<Class<? extends IModelInfo>> modelClasses = new ArrayList<Class<? extends IModelInfo>>();
 			final ClassLoader classLoader = mContext.getClass().getClassLoader();
 			for (String model : models) {
 				model = ensurePackageInName(model);
@@ -290,6 +301,26 @@ private int getMetaDataDatabaseVersionOrDefault() {
 			return typeSerializers;
 		}
 
+        private List<Class<? extends ClassSerializer>> loadClassSerializerList(String[] serializers) {
+            final List<Class<? extends ClassSerializer>> typeSerializers = new ArrayList<Class<? extends ClassSerializer>>();
+            final ClassLoader classLoader = mContext.getClass().getClassLoader();
+            for (String serializer : serializers) {
+                serializer = ensurePackageInName(serializer);
+
+                try {
+                    Class serializerClass = Class.forName(serializer, false, classLoader);
+                    if (ReflectionUtils.isTypeClassSerializer(serializerClass)) {
+                        typeSerializers.add(serializerClass);
+                    }
+                }
+                catch (ClassNotFoundException e) {
+                    AALog.e("Couldn't create class.", e);
+                }
+            }
+
+            return typeSerializers;
+        }
+
 		private String ensurePackageInName(String name) {
 			String packageName = mContext.getPackageName();
 			if (name.startsWith(packageName)) {
diff --git a/src/main/java/com/activeandroid/IModelInfo.java b/src/main/java/com/activeandroid/IModelInfo.java
index 4f8c082f..5cf816f5 100644
--- a/src/main/java/com/activeandroid/IModelInfo.java
+++ b/src/main/java/com/activeandroid/IModelInfo.java
@@ -10,13 +10,16 @@
 
     public String getId();
 
-    public void setRowId(String rowId);
+    public void setRowId(long rowId);
 
-    public String getRowId();
+    public long getRowId();
 
     public boolean exists();
 
     public void save();
 
     public void delete();
+
+    public String getTableName();
+
 }
diff --git a/src/main/java/com/activeandroid/Model.java b/src/main/java/com/activeandroid/Model.java
index b4d2fde5..0e73496d 100644
--- a/src/main/java/com/activeandroid/Model.java
+++ b/src/main/java/com/activeandroid/Model.java
@@ -92,6 +92,7 @@ public String toString() {
 		return mTableInfo!=null? mTableInfo.getTableName() + "@" + getId() : "No Table for: " + getClass() + "@" + getId();
 	}
 
+    @Override
     public long getRowId(){
         return mId;
     }
@@ -100,7 +101,13 @@ public TableInfo getTableInfo() {
         return mTableInfo;
     }
 
+    @Override
     public void setRowId(long id) {
         mId = id;
     }
+
+    @Override
+    public String getTableName() {
+        return mTableInfo.getTableName();
+    }
 }
diff --git a/src/main/java/com/activeandroid/ModelInfo.java b/src/main/java/com/activeandroid/ModelInfo.java
index 67cf4d4c..a275fae7 100644
--- a/src/main/java/com/activeandroid/ModelInfo.java
+++ b/src/main/java/com/activeandroid/ModelInfo.java
@@ -31,6 +31,8 @@
 
 import com.activeandroid.annotation.Ignore;
 import com.activeandroid.serializer.CalendarSerializer;
+import com.activeandroid.serializer.ClassSerializer;
+import com.activeandroid.serializer.ModelClassSerializer;
 import com.activeandroid.serializer.SqlDateSerializer;
 import com.activeandroid.serializer.TypeSerializer;
 import com.activeandroid.serializer.UtilDateSerializer;
@@ -43,7 +45,7 @@
 	// PRIVATE METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	private Map<Class<? extends Model>, TableInfo> mTableInfos = new HashMap<Class<? extends Model>, TableInfo>();
+	private Map<Class<? extends IModelInfo>, TableInfo> mTableInfos = new HashMap<Class<? extends IModelInfo>, TableInfo>();
 	private Map<Class<?>, TypeSerializer> mTypeSerializers = new HashMap<Class<?>, TypeSerializer>() {
 		{
 			put(Calendar.class, new CalendarSerializer());
@@ -52,6 +54,12 @@
 		}
 	};
 
+    private Map<Class<?>, ClassSerializer> mClassSerializers = new HashMap<Class<?>, ClassSerializer>() {
+        {
+            put(Model.class, new ModelClassSerializer());
+        }
+    };
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -77,7 +85,7 @@ public ModelInfo(Configuration configuration) {
 		return mTableInfos.values();
 	}
 
-	public TableInfo getTableInfo(Class<? extends Model> type) {
+	public TableInfo getTableInfo(Class<? extends IModelInfo> type) {
 		return mTableInfos.get(type);
 	}
 
@@ -85,6 +93,10 @@ public TypeSerializer getTypeSerializer(Class<?> type) {
 		return mTypeSerializers.get(type);
 	}
 
+    public ClassSerializer getClassSerializer(Class<?> type){
+        return mClassSerializers.get(type);
+    }
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PRIVATE METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -94,9 +106,9 @@ private boolean loadModelFromMetaData(Configuration configuration) {
 			return false;
 		}
 
-		final List<Class<? extends Model>> models = configuration.getModelClasses();
+		final List<Class<? extends IModelInfo>> models = configuration.getModelClasses();
 		if (models != null) {
-			for (Class<? extends Model> model : models) {
+			for (Class<? extends IModelInfo> model : models) {
 				mTableInfos.put(model, new TableInfo(model));
 			}
 		}
@@ -117,6 +129,22 @@ private boolean loadModelFromMetaData(Configuration configuration) {
 			}
 		}
 
+        final List<Class<? extends ClassSerializer>> classSerializers = configuration.getClassSerializers();
+        if(classSerializers!=null){
+            for (Class<? extends ClassSerializer> typeSerializer : classSerializers) {
+                try {
+                    ClassSerializer instance = typeSerializer.newInstance();
+                    mClassSerializers.put(instance.getTableType(), instance);
+                }
+                catch (InstantiationException e) {
+                    AALog.e("Couldn't instantiate TypeSerializer.", e);
+                }
+                catch (IllegalAccessException e) {
+                    AALog.e("IllegalAccessException", e);
+                }
+            }
+        }
+
 		return true;
 	}
 
@@ -186,13 +214,17 @@ private void scanForModelClasses(File path, String packageName, ClassLoader clas
 				Class<?> discoveredClass = Class.forName(className, false, classLoader);
 				if (ReflectionUtils.isModel(discoveredClass) && !discoveredClass.isAnnotationPresent(Ignore.class)) {
 					@SuppressWarnings("unchecked")
-					Class<? extends Model> modelClass = (Class<? extends Model>) discoveredClass;
+					Class<? extends IModelInfo> modelClass = (Class<? extends IModelInfo>) discoveredClass;
 					mTableInfos.put(modelClass, new TableInfo(modelClass));
 				}
 				else if (ReflectionUtils.isTypeSerializer(discoveredClass) && !discoveredClass.isAnnotationPresent(Ignore.class)) {
 					TypeSerializer instance = (TypeSerializer) discoveredClass.newInstance();
 					mTypeSerializers.put(instance.getDeserializedType(), instance);
 				}
+                else if(ReflectionUtils.isTypeClassSerializer(discoveredClass) && !discoveredClass.isAnnotationPresent(Ignore.class)){
+                    ClassSerializer instance = (ClassSerializer) discoveredClass.newInstance();
+                    mClassSerializers.put(instance.getTableType(), instance);
+                }
 			}
 			catch (ClassNotFoundException e) {
 				AALog.e("Couldn't create class.", e);
diff --git a/src/main/java/com/activeandroid/TableInfo.java b/src/main/java/com/activeandroid/TableInfo.java
index c04ad3e9..5d0fcc53 100644
--- a/src/main/java/com/activeandroid/TableInfo.java
+++ b/src/main/java/com/activeandroid/TableInfo.java
@@ -37,7 +37,7 @@
 	// PRIVATE MEMBERS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	private Class<? extends Model> mType;
+	private Class<? extends IModelInfo> mType;
 	private String mTableName;
 
 	private Map<Field, String> mColumnNames = new HashMap<Field, String>();
@@ -48,7 +48,7 @@
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	public TableInfo(Class<? extends Model> type) {
+	public TableInfo(Class<? extends IModelInfo> type) {
 		mType = type;
 
 		final Table tableAnnotation = type.getAnnotation(Table.class);
@@ -99,7 +99,7 @@ public TableInfo(Class<? extends Model> type) {
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	public Class<? extends Model> getType() {
+	public Class<? extends IModelInfo> getType() {
 		return mType;
 	}
 
@@ -107,9 +107,9 @@ public String getTableName() {
 		return mTableName;
 	}
 
-	public Collection<Field> getFields() {
-		return mColumnNames.keySet();
-	}
+    public Field[] getFields(){
+        return mColumnNames.keySet().toArray(new Field[mColumnNames.size()]);
+    }
 
 	public String getColumnName(Field field) {
 		return mColumnNames.get(field);
@@ -120,7 +120,7 @@ public String getColumnName(Field field) {
 	//////////////////////////////////////////////////////////////////////////////////////
 
 	private Field getIdField(Class<?> type) {
-		if (type.equals(Model.class)) {
+		if (type.equals(IModelInfo.class)) {
 			try {
 				return type.getDeclaredField("mId");
 			}
diff --git a/src/main/java/com/activeandroid/serializer/ClassSerializer.java b/src/main/java/com/activeandroid/serializer/ClassSerializer.java
index 2422b504..d2fb5700 100644
--- a/src/main/java/com/activeandroid/serializer/ClassSerializer.java
+++ b/src/main/java/com/activeandroid/serializer/ClassSerializer.java
@@ -1,7 +1,15 @@
 package com.activeandroid.serializer;
 
+import com.activeandroid.Cache;
 import com.activeandroid.IModelInfo;
+import com.activeandroid.Model;
 import com.activeandroid.TableInfo;
+import com.activeandroid.annotation.ForeignKey;
+import com.activeandroid.annotation.PrimaryKey;
+import com.activeandroid.util.ReflectionUtils;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.Type;
 
 /**
  * Created by andrewgrosner
@@ -9,18 +17,73 @@
  * Contributors:
  * Description: Allows objects other than just {@link com.activeandroid.Model} objects to store data in the DB
  */
-public interface ClassSerializer<OBJECT_CLASS extends IModelInfo> {
+public abstract class ClassSerializer<OBJECT_CLASS extends IModelInfo> {
 
     /**
      * Instructs the class to retrieve the field at a specific position
      * @param position
      * @return
      */
-    public Object serializeField(OBJECT_CLASS object, int position);
+    public abstract Object serializeField(OBJECT_CLASS object, int position);
+
+    public abstract Object deserializeField(OBJECT_CLASS object, int position, String entityId, boolean columnIsNull);
+
+    public int getFieldCount(OBJECT_CLASS iModelInfo){
+        return Cache.getTableInfo(iModelInfo.getClass()).getFields().length;
+    }
+
+    public String getFieldName(OBJECT_CLASS iModelInfo, int position){
+        TableInfo tableInfo = Cache.getTableInfo(iModelInfo.getClass());
+        Field field = tableInfo.getFields()[position];
+        String fieldName = tableInfo.getColumnName(field);
+        if (field.isAnnotationPresent(ForeignKey.class) && ReflectionUtils.isModel(getFieldType(position))) {
+            ForeignKey key = field.getAnnotation(ForeignKey.class);
+            if (!key.name().equals("")) {
+                fieldName = field.getAnnotation(ForeignKey.class).name();
+            }
+        }
+
+        return fieldName;
+    }
+
+    public String getPrimaryFieldName(IModelInfo iModelInfo, int position){
+        return Cache.getTableInfo(iModelInfo.getClass()).getPrimaryKeys().get(position).getName();
+    }
+
+    public int getPrimaryFieldCount(IModelInfo iModelInfo){
+        return Cache.getTableInfo(iModelInfo.getClass()).getPrimaryKeys().size();
+    }
+
+    public Class<?> getFieldType(IModelInfo iModelInfo, int position){
+        return Cache.getTableInfo(iModelInfo.getClass()).getFields()[position].getType();
+    }
+
+    public void applyPrimaryKeys(OBJECT_CLASS model){
+        TableInfo tableInfo = Cache.getTableInfo(model.getClass());
+        for(Field field : tableInfo.getPrimaryKeys()){
+            if(field.isAnnotationPresent(PrimaryKey.class) &&
+                    field.getAnnotation(PrimaryKey.class).type().equals(PrimaryKey.Type.AUTO_INCREMENT)){
+                field.setAccessible(true);
+                try {
+                    field.set(model, model.getRowId());
+                } catch (Throwable e) {
+                    throw new RuntimeException(e);
+                }
+            }
+        }
+    }
 
-    public Object deserializeField(OBJECT_CLASS object, int position);
+    public Class<OBJECT_CLASS> getTableType(OBJECT_CLASS object){
+        return (Class<OBJECT_CLASS>) Cache.getTableInfo(object.getClass()).getType();
+    }
 
-    public int getFieldCount();
+    public void setField(int position, OBJECT_CLASS iModelInfo, Object value){
+        Field field = Cache.getTableInfo(iModelInfo.getClass()).getFields()[position];
+        field.setAccessible(true);
+        try {
+            field.set(iModelInfo, value);
+        } catch (IllegalAccessException e) {
 
-    public String getFieldName(int position);
+        }
+    }
 }
diff --git a/src/main/java/com/activeandroid/serializer/ModelClassSerializer.java b/src/main/java/com/activeandroid/serializer/ModelClassSerializer.java
index 2e492c8f..57e8c387 100644
--- a/src/main/java/com/activeandroid/serializer/ModelClassSerializer.java
+++ b/src/main/java/com/activeandroid/serializer/ModelClassSerializer.java
@@ -1,11 +1,13 @@
 package com.activeandroid.serializer;
 
+import com.activeandroid.Cache;
 import com.activeandroid.Model;
-import com.activeandroid.TableInfo;
+import com.activeandroid.annotation.ForeignKey;
+import com.activeandroid.query.Select;
+import com.activeandroid.util.ReflectionUtils;
 import com.activeandroid.util.SQLiteUtils;
 
 import java.lang.reflect.Field;
-import java.util.ArrayList;
 
 /**
  * Created by andrewgrosner
@@ -13,24 +15,24 @@
  * Contributors:
  * Description:
  */
-public class ModelClassSerializer implements ClassSerializer<Model> {
+public class ModelClassSerializer extends ClassSerializer<Model> {
 
-    private TableInfo mTableInfo;
-    private ArrayList<Field> mFields;
+    private static ModelClassSerializer
 
-    public ModelClassSerializer(TableInfo tableInfo){
-        mTableInfo = tableInfo;
-        mFields = new ArrayList<Field>(mTableInfo.getFields());
-    }
+    public ModelClassSerializer(){
 
+    }
     @Override
     public Object serializeField(Model model, int position) {
-        Field field = mFields.get(position);
+        Field field = model.getTableInfo().getFields()[position];
         field.setAccessible(true);
 
         Object value = null;
         try {
             value = field.get(model);
+            if (field.isAnnotationPresent(ForeignKey.class) && ReflectionUtils.isModel(getFieldType(model, position))) {
+                value = ((Model) value).getId();
+            }
         } catch (IllegalAccessException e) {
 
         }
@@ -38,17 +40,33 @@ public Object serializeField(Model model, int position) {
     }
 
     @Override
-    public Object deserializeField(Model model, int position) {
-        return null;
-    }
+    public Object deserializeField(Model model, int position, String entityId, boolean columnIsNull) {
+        Field field = mFields.get(position);
+        Class fieldType = getFieldType(position);
+        TypeSerializer typeSerializer = Cache.getParserForType(fieldType);
+        if (typeSerializer != null) {
+            fieldType = typeSerializer.getSerializedType();
+        }
+        Object value = null;
+        if (field.isAnnotationPresent(ForeignKey.class) && ReflectionUtils.isModel(fieldType)) {
+            Model entity = (Model) Cache.getEntity(model.getClass(), entityId);
+            if (entity == null) {
+                entity = new Select().from(model.getClass()).where(SQLiteUtils.getWhereFromEntityId(model.getId(), entityId)).executeSingle();
+            }
 
-    @Override
-    public int getFieldCount() {
-        return mFields.size();
-    }
+            value = entity;
+        }
 
-    @Override
-    public String getFieldName(int position) {
-        return mTableInfo.getColumnName(mFields.get(position));
+        if (columnIsNull) {
+            field = null;
+        }
+
+        // Use a deserializer if one is available
+        if (typeSerializer != null && !columnIsNull) {
+            value = typeSerializer.deserialize(value);
+        }
+
+        return value;
     }
+
 }
diff --git a/src/main/java/com/activeandroid/util/ReflectionUtils.java b/src/main/java/com/activeandroid/util/ReflectionUtils.java
index 8559d965..48b01048 100644
--- a/src/main/java/com/activeandroid/util/ReflectionUtils.java
+++ b/src/main/java/com/activeandroid/util/ReflectionUtils.java
@@ -20,7 +20,9 @@
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
 
+import com.activeandroid.IModelInfo;
 import com.activeandroid.Model;
+import com.activeandroid.serializer.ClassSerializer;
 import com.activeandroid.serializer.TypeSerializer;
 
 import java.lang.reflect.Field;
@@ -33,13 +35,17 @@
 	//////////////////////////////////////////////////////////////////////////////////////
 
 	public static boolean isModel(Class<?> type) {
-		return isSubclassOf(type, Model.class);
+		return isSubclassOf(type, IModelInfo.class);
 	}
 
 	public static boolean isTypeSerializer(Class<?> type) {
 		return isSubclassOf(type, TypeSerializer.class);
 	}
 
+    public static boolean isTypeClassSerializer(Class<?> type){
+        return isSubclassOf(type, ClassSerializer.class);
+    }
+
 	// Meta-data
 
 	@SuppressWarnings("unchecked")
diff --git a/src/main/java/com/activeandroid/util/SQLiteUtils.java b/src/main/java/com/activeandroid/util/SQLiteUtils.java
index ab8c8488..dcdf4a18 100644
--- a/src/main/java/com/activeandroid/util/SQLiteUtils.java
+++ b/src/main/java/com/activeandroid/util/SQLiteUtils.java
@@ -24,6 +24,7 @@
 import android.text.TextUtils;
 
 import com.activeandroid.Cache;
+import com.activeandroid.IModelInfo;
 import com.activeandroid.Model;
 import com.activeandroid.TableInfo;
 import com.activeandroid.annotation.Column;
@@ -32,6 +33,8 @@
 import com.activeandroid.content.ContentProvider;
 import com.activeandroid.exception.PrimaryKeyCannotBeNullException;
 import com.activeandroid.query.Select;
+import com.activeandroid.serializer.ClassSerializer;
+import com.activeandroid.serializer.ModelClassSerializer;
 import com.activeandroid.serializer.TypeSerializer;
 
 import java.lang.reflect.Constructor;
@@ -256,24 +259,15 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
      * @param tableInfo
      * @return
      */
-    public static String getWhereStatement(Class<? extends Model> modelClass, TableInfo tableInfo){
-        List<Field> fields = new ArrayList<Field>();
-        ArrayList<Field> primaryColumn = new ArrayList<Field>();
-        fields = ReflectionUtils.getAllFields(fields, modelClass);
-
-        for(Field field : fields){
-            if(field.isAnnotationPresent(PrimaryKey.class)){
-                primaryColumn.add(field);
-            }
-        }
+    public static String getWhereStatement(ClassSerializer classSerializer){
 
+        int count = classSerializer.getPrimaryFieldCount();
         final StringBuilder where = new StringBuilder();
-        for(int i = 0 ; i < primaryColumn.size(); i++){
-            final Field field = primaryColumn.get(i);
-            where.append(tableInfo.getColumnName(field));
+        for(int i = 0 ; i < count; i++){
+            where.append(classSerializer.getPrimaryFieldName(i));
             where.append("=?");
 
-            if(i < primaryColumn.size()-1){
+            if(i < count-1){
                 where.append(" AND ");
             }
         }
@@ -289,37 +283,26 @@ public static String getWhereStatement(Class<? extends Model> modelClass, TableI
      * @param tableInfo
      * @return
      */
-    public static String getWhereStatement(Model model, TableInfo tableInfo){
-        List<Field> fields = new ArrayList<Field>();
-        ArrayList<Field> primaryColumn = new ArrayList<Field>();
-        fields = ReflectionUtils.getAllFields(fields, model.getClass());
-
-        for(Field field : fields){
-            if(field.isAnnotationPresent(PrimaryKey.class)){
-                primaryColumn.add(field);
-            }
-        }
+    public static String getWhereStatement(ClassSerializer classSerializer, IModelInfo model){
+        int count = classSerializer.getPrimaryFieldCount();
 
         final StringBuilder where = new StringBuilder();
-        for(int i = 0 ; i < primaryColumn.size(); i++){
-            final Field field = primaryColumn.get(i);
-            where.append(tableInfo.getColumnName(field));
+        for(int i = 0 ; i < count; i++){
+            where.append(classSerializer.getPrimaryFieldName(i));
             where.append("=?");
 
-            if(i < primaryColumn.size()-1){
+            if(i < count-1){
                 where.append(" AND ");
             }
         }
 
         String sql = where.toString();
 
-        for(int i = 0; i < primaryColumn.size(); i++){
-            final Field field = primaryColumn.get(i);
-            field.setAccessible(true);
+        for(int i = 0; i < count; i++){
             try {
-                Object object = field.get(model);
+                Object object = classSerializer.serializeField(model, i);
                 if(object==null){
-                    throw new PrimaryKeyCannotBeNullException("The primary key: " + field.getName() + "from " + tableInfo.getTableName() + " cannot be null.");
+                    throw new PrimaryKeyCannotBeNullException("The primary key: " + classSerializer.getPrimaryFieldName(i) + "from " + model.getTableName() + " cannot be null.");
                 } else if(object instanceof Number){
                     sql = sql.replaceFirst("\\?", object.toString());
                 } else {
@@ -334,7 +317,7 @@ public static String getWhereStatement(Model model, TableInfo tableInfo){
         return sql;
     }
 
-    public static String getWhereFromEntityId(Class<? extends Model> model, String entityId){
+    public static String getWhereFromEntityId(Class<? extends IModelInfo> model, String entityId){
         String[] primaries = entityId.split(",");
         String whereString = getWhereStatement(model, Cache.getTableInfo(model));
 
@@ -370,36 +353,17 @@ public static String getWhereFromEntityId(Class<? extends Model> model, String e
      * Saves a model to the DB
      * @param model
      */
-    public static void save(Model model){
+    public static void save(ClassSerializer serializer, IModelInfo model){
         final SQLiteDatabase db = Cache.openDatabase();
         final ContentValues values = new ContentValues();
-        Collection<Field> fields = model.getTableInfo().getFields();
-
-        for (Field field : fields) {
-            String fieldName = model.getTableInfo().getColumnName(field);
-            Class<?> fieldType = field.getType();
+        int count = serializer.getFieldCount();
 
-            field.setAccessible(true);
+        for (int i =  0; i  < count; i++) {
+            String fieldName = serializer.getFieldName(i);
+            Class<?> fieldType = serializer.getFieldType(i);
 
             try {
-                Object value = field.get(model);
-
-                if (value != null) {
-                    final TypeSerializer typeSerializer = Cache.getParserForType(fieldType);
-                    if (typeSerializer != null) {
-                        // serialize data
-                        value = typeSerializer.serialize(value);
-                        // set new object type
-                        if (value != null) {
-                            fieldType = value.getClass();
-                            // check that the serializer returned what it promised
-                            if (!fieldType.equals(typeSerializer.getSerializedType())) {
-                                AALog.w(String.format("TypeSerializer returned wrong type: expected a %s but got a %s",
-                                        typeSerializer.getSerializedType(), fieldType));
-                            }
-                        }
-                    }
-                }
+                Object value = serializer.serializeField(model, i);
 
                 // TODO: Find a smarter way to do this? This if block is necessary because we
                 // can't know the type until runtime.
@@ -436,13 +400,6 @@ else if (fieldType.equals(String.class)) {
                 else if (fieldType.equals(Byte[].class) || fieldType.equals(byte[].class)) {
                     values.put(fieldName, (byte[]) value);
                 }
-                else if (field.isAnnotationPresent(ForeignKey.class) && ReflectionUtils.isModel(fieldType)) {
-                    ForeignKey key = field.getAnnotation(ForeignKey.class);
-                    if(!key.name().equals("")){
-                        fieldName = field.getAnnotation(ForeignKey.class).name();
-                    }
-                    values.put(fieldName, ((Model) value).getId());
-                }
                 else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
                     values.put(fieldName, ((Enum<?>) value).name());
                 }
@@ -450,61 +407,38 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
             catch (IllegalArgumentException e) {
                 AALog.e(e.getClass().getName(), e);
             }
-            catch (IllegalAccessException e) {
-                AALog.e(e.getClass().getName(), e);
-            }
         }
 
         if(!model.exists()){
-            model.setRowId(db.insert(model.getTableInfo().getTableName(), null, values));
-
-            for(Field field : model.getTableInfo().getPrimaryKeys()){
-                if(field.isAnnotationPresent(PrimaryKey.class) &&
-                        field.getAnnotation(PrimaryKey.class).type().equals(PrimaryKey.Type.AUTO_INCREMENT)){
-                    field.setAccessible(true);
-                    try {
-                        field.set(model, model.getRowId());
-                    } catch (Throwable e) {
-                        throw new RuntimeException(e);
-                    }
-                }
-            }
+            model.setRowId(db.insert(model.getTableName(), null, values));
+            serializer.applyPrimaryKeys(model);
         } else {
-            model.setRowId(db.update(model.getTableInfo().getTableName(), values, SQLiteUtils.getWhereStatement(model, model.getTableInfo()), null));
+            model.setRowId(db.update(model.getTableName(), values, SQLiteUtils.getWhereStatement(serializer), null));
         }
 
         Cache.getContext().getContentResolver()
-                .notifyChange(ContentProvider.createUri(model.getTableInfo().getType(), model.getId()), null);
+                .notifyChange(ContentProvider.createUri(serializer.getTableType(), model.getId()), null);
     }
 
-    public static final void loadFromCursor(Cursor cursor, Model model){
-        Collection<Field> fields = model.getTableInfo().getFields();
+    public static final void loadFromCursor(Cursor cursor, IModelInfo model, ClassSerializer classSerializer){
+
+        int count = classSerializer.getFieldCount();
 
-        for (Field field : fields) {
-            final String fieldName = model.getTableInfo().getColumnName(field);
-            Class<?> fieldType = field.getType();
+        for (int i = 0; i < count; i++) {
+            final String fieldName = classSerializer.getFieldName(i);
+            Class<?> fieldType = classSerializer.getFieldType(i);
             final int columnIndex = cursor.getColumnIndex(fieldName);
 
             if (columnIndex < 0) {
                 continue;
             }
-
-            field.setAccessible(true);
-
             try {
                 boolean columnIsNull = cursor.isNull(columnIndex);
-                TypeSerializer typeSerializer = Cache.getParserForType(fieldType);
-                Object value = null;
-
-                if (typeSerializer != null) {
-                    fieldType = typeSerializer.getSerializedType();
-                }
+                Object value = classSerializer.deserializeField(model, i, cursor.getString(columnIndex), columnIsNull);
 
                 // TODO: Find a smarter way to do this? This if block is necessary because we
                 // can't know the type until runtime.
-                if (columnIsNull) {
-                    field = null;
-                }
+
                 else if (fieldType.equals(Byte.class) || fieldType.equals(byte.class)) {
                     value = cursor.getInt(columnIndex);
                 }
@@ -535,31 +469,15 @@ else if (fieldType.equals(String.class)) {
                 else if (fieldType.equals(Byte[].class) || fieldType.equals(byte[].class)) {
                     value = cursor.getBlob(columnIndex);
                 }
-                else if (field.isAnnotationPresent(ForeignKey.class) && ReflectionUtils.isModel(fieldType)) {
-                    final String entityId = cursor.getString(columnIndex);
-                    final Class<? extends Model> entityType = (Class<? extends Model>) fieldType;
-
-                    Model entity = Cache.getEntity(entityType, entityId);
-                    if (entity == null) {
-                        entity = new Select().from(entityType).where(SQLiteUtils.getWhereFromEntityId(entityType, entityId)).executeSingle();
-                    }
-
-                    value = entity;
-                }
                 else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
                     @SuppressWarnings("rawtypes")
                     final Class<? extends Enum> enumType = (Class<? extends Enum>) fieldType;
                     value = Enum.valueOf(enumType, cursor.getString(columnIndex));
                 }
 
-                // Use a deserializer if one is available
-                if (typeSerializer != null && !columnIsNull) {
-                    value = typeSerializer.deserialize(value);
-                }
-
                 // Set the field name
                 if (value != null) {
-                    field.set(model, value);
+                    classSerializer.setField(i, model, value);
                 }
             }
             catch (IllegalArgumentException e) {
