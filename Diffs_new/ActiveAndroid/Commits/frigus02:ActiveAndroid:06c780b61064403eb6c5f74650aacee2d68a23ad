diff --git a/src/com/activeandroid/Cache.java b/src/com/activeandroid/Cache.java
index eee8101d..364f0f12 100644
--- a/src/com/activeandroid/Cache.java
+++ b/src/com/activeandroid/Cache.java
@@ -119,7 +119,7 @@ public static String getIdentifier(Class<? extends Model> type, Long id) {
 	}
 
 	public static String getIdentifier(Model entity) {
-		return getIdentifier(entity.getClass(), entity.getId());
+		return getIdentifier(entity.getClass(), entity.getPersistedId());
 	}
 
 	public static synchronized void addEntity(Model entity) {
@@ -130,6 +130,12 @@ public static synchronized Model getEntity(Class<? extends Model> type, long id)
 		return sEntities.get(getIdentifier(type, id));
 	}
 
+    public static synchronized void updateEntityId(Model entity, long previousId) {
+        if (sEntities.remove(getIdentifier(entity.getClass(), previousId)) != null) {
+            sEntities.put(getIdentifier(entity), entity);
+        }
+    }
+
 	public static synchronized void removeEntity(Model entity) {
 		sEntities.remove(getIdentifier(entity));
 	}
diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 33c825fa..3226a5ba 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -38,7 +38,11 @@
 	//////////////////////////////////////////////////////////////////////////////////////
 
 	@Column(name = "Id")
-	private Long mId = null;
+	public Long id = null;
+
+    // This is the ID, that is currently stored in the database. By keeping the id redundant,
+    // it is possible to change the Id of an entity.
+    private Long mPersistedId = null;
 
 	private TableInfo mTableInfo;
 
@@ -54,16 +58,20 @@ public Model() {
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	public final Long getId() {
-		return mId;
-	}
+    public final Long getId() {
+        return id;
+    }
+
+    public final Long getPersistedId() {
+        return mPersistedId;
+    }
 
 	public final void delete() {
-		Cache.openDatabase().delete(mTableInfo.getTableName(), "Id=?", new String[] { getId().toString() });
+		Cache.openDatabase().delete(mTableInfo.getTableName(), "Id=?", new String[]{mPersistedId.toString()});
 		Cache.removeEntity(this);
 
 		Cache.getContext().getContentResolver()
-				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mId), null);
+				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mPersistedId), null);
 	}
 
 	public final void save() {
@@ -132,7 +140,7 @@ else if (fieldType.equals(Byte[].class) || fieldType.equals(byte[].class)) {
 					values.put(fieldName, (byte[]) value);
 				}
 				else if (ReflectionUtils.isModel(fieldType)) {
-					values.put(fieldName, ((Model) value).getId());
+					values.put(fieldName, ((Model) value).mPersistedId);
 				}
 				else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 					values.put(fieldName, ((Enum<?>) value).name());
@@ -146,15 +154,21 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 			}
 		}
 
-		if (mId == null) {
-			mId = db.insert(mTableInfo.getTableName(), null, values);
+		if (mPersistedId == null) {
+            mPersistedId = db.insert(mTableInfo.getTableName(), null, values);
+            id = mPersistedId;
 		}
 		else {
-			db.update(mTableInfo.getTableName(), values, "Id=" + mId, null);
+			db.update(mTableInfo.getTableName(), values, "Id=" + mPersistedId, null);
+
+            // The Id may has been updated, so we need to update mPersistedId and the Cache, as
+            // it stores Entities with their corresponding Ids.
+            Cache.updateEntityId(this, mPersistedId);
+            mPersistedId = id;
 		}
 
 		Cache.getContext().getContentResolver()
-				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mId), null);
+				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mPersistedId), null);
 	}
 
 	// Convenience methods
@@ -263,7 +277,8 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 			}
 		}
 
-		if (mId != null) {
+		if (id != null) {
+            mPersistedId = id;
 			Cache.addEntity(this);
 		}
 	}
@@ -273,7 +288,7 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 	//////////////////////////////////////////////////////////////////////////////////////
 
 	protected final <T extends Model> List<T> getMany(Class<T> type, String foreignKey) {
-		return new Select().from(type).where(Cache.getTableName(type) + "." + foreignKey + "=?", getId()).execute();
+		return new Select().from(type).where(Cache.getTableName(type) + "." + foreignKey + "=?", mPersistedId).execute();
 	}
 
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -282,14 +297,14 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 
 	@Override
 	public String toString() {
-		return mTableInfo.getTableName() + "@" + getId();
+		return mTableInfo.getTableName() + "@" + id;
 	}
 
 	@Override
 	public boolean equals(Object obj) {
 		final Model other = (Model) obj;
 
-		return this.mId != null && (this.mTableInfo.getTableName().equals(other.mTableInfo.getTableName()))
-				&& (this.mId.equals(other.mId));
+		return id != null && (this.mTableInfo.getTableName().equals(other.mTableInfo.getTableName()))
+				&& (id.equals(other.id));
 	}
 }
diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index 225a838d..aa5324cd 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -91,7 +91,7 @@ public String getColumnName(Field field) {
 	private Field getIdField(Class<?> type) {
 		if (type.equals(Model.class)) {
 			try {
-				return type.getDeclaredField("mId");
+				return type.getDeclaredField("id");
 			}
 			catch (NoSuchFieldException e) {
 				Log.e("Impossible!", e);
diff --git a/src/com/activeandroid/widget/ModelAdapter.java b/src/com/activeandroid/widget/ModelAdapter.java
index 70e59913..19507070 100644
--- a/src/com/activeandroid/widget/ModelAdapter.java
+++ b/src/com/activeandroid/widget/ModelAdapter.java
@@ -48,7 +48,7 @@ public long getItemId(int position) {
 		T item = getItem(position);
 
 		if (item != null) {
-			return item.getId();
+			return item.id;
 		}
 		else {
 			return -1;
