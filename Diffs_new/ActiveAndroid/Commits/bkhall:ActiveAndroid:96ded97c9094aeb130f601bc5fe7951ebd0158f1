diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 59c30301..5d2736b1 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -3,14 +3,8 @@
       package="com.activeandroid"
       android:versionCode="1"
       android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="4"/>
-    <application>
-        <activity android:name="ActiveAndroid"
-                  android:label="ActiveAndroid">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-    </application>
+      
+        <uses-sdk
+        android:minSdkVersion="8"
+        android:targetSdkVersion="17" />
 </manifest>
diff --git a/libs/android-support-v4.jar b/libs/android-support-v4.jar
new file mode 100644
index 00000000..65ebaf8d
Binary files /dev/null and b/libs/android-support-v4.jar differ
diff --git a/src/com/activeandroid/ActiveAndroidNotInitialized.java b/src/com/activeandroid/ActiveAndroidNotInitialized.java
index 99a459d1..89ddf6d0 100644
--- a/src/com/activeandroid/ActiveAndroidNotInitialized.java
+++ b/src/com/activeandroid/ActiveAndroidNotInitialized.java
@@ -1,7 +1,13 @@
 package com.activeandroid;
 
 public class ActiveAndroidNotInitialized extends RuntimeException {
+	/**
+	 * 
+	 */
+	private static final long serialVersionUID = 1500240619927185418L;
+
 	public ActiveAndroidNotInitialized() {
-		super("ActiveAndroid must be initialized with ActiveAndroid#initialize before interacting with database");
+		super(
+				"ActiveAndroid must be initialized with ActiveAndroid#initialize before interacting with database");
 	}
 }
diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index ff66ff4f..7a15951a 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -33,18 +33,18 @@
 
 @SuppressWarnings("unchecked")
 public abstract class Model {
-	//////////////////////////////////////////////////////////////////////////////////////
+	// ////////////////////////////////////////////////////////////////////////////////////
 	// PRIVATE MEMBERS
-	//////////////////////////////////////////////////////////////////////////////////////
+	// ////////////////////////////////////////////////////////////////////////////////////
 
 	@Column(name = "Id")
 	private Long mId = null;
 
 	private TableInfo mTableInfo;
 
-	//////////////////////////////////////////////////////////////////////////////////////
+	// ////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
+	// ////////////////////////////////////////////////////////////////////////////////////
 
 	public final Long getId() {
 		return mId;
@@ -72,77 +72,79 @@ public final void save() {
 				Object value = field.get(this);
 
 				if (value != null) {
-					final TypeSerializer typeSerializer = Cache.getParserForType(fieldType);
+					final TypeSerializer typeSerializer = Cache
+							.getParserForType(fieldType);
 					if (typeSerializer != null) {
 						// serialize data
 						value = typeSerializer.serialize(value);
 						// set new object type
 						if (value != null) {
 							fieldType = value.getClass();
-							// check that the serializer returned what it promised
-							if (!fieldType.equals(typeSerializer.getSerializedType())) {
-								Log.w(String.format("TypeSerializer returned wrong type: expected a %s but got a %s",
-										typeSerializer.getSerializedType(), fieldType));
+							// check that the serializer returned what it
+							// promised
+							if (!fieldType.equals(typeSerializer
+									.getSerializedType())) {
+								Log.w(String
+										.format("TypeSerializer returned wrong type: expected a %s but got a %s",
+												typeSerializer
+														.getSerializedType(),
+												fieldType));
 							}
 						}
 					}
 				}
 
-				// TODO: Find a smarter way to do this? This if block is necessary because we
+				// TODO: Find a smarter way to do this? This if block is
+				// necessary because we
 				// can't know the type until runtime.
 				if (value == null) {
 					values.putNull(fieldName);
-				}
-				else if (fieldType.equals(Byte.class) || fieldType.equals(byte.class)) {
+				} else if (fieldType.equals(Byte.class)
+						|| fieldType.equals(byte.class)) {
 					values.put(fieldName, (Byte) value);
-				}
-				else if (fieldType.equals(Short.class) || fieldType.equals(short.class)) {
+				} else if (fieldType.equals(Short.class)
+						|| fieldType.equals(short.class)) {
 					values.put(fieldName, (Short) value);
-				}
-				else if (fieldType.equals(Integer.class) || fieldType.equals(int.class)) {
+				} else if (fieldType.equals(Integer.class)
+						|| fieldType.equals(int.class)) {
 					values.put(fieldName, (Integer) value);
-				}
-				else if (fieldType.equals(Long.class) || fieldType.equals(long.class)) {
+				} else if (fieldType.equals(Long.class)
+						|| fieldType.equals(long.class)) {
 					values.put(fieldName, (Long) value);
-				}
-				else if (fieldType.equals(Float.class) || fieldType.equals(float.class)) {
+				} else if (fieldType.equals(Float.class)
+						|| fieldType.equals(float.class)) {
 					values.put(fieldName, (Float) value);
-				}
-				else if (fieldType.equals(Double.class) || fieldType.equals(double.class)) {
+				} else if (fieldType.equals(Double.class)
+						|| fieldType.equals(double.class)) {
 					values.put(fieldName, (Double) value);
-				}
-				else if (fieldType.equals(Boolean.class) || fieldType.equals(boolean.class)) {
+				} else if (fieldType.equals(Boolean.class)
+						|| fieldType.equals(boolean.class)) {
 					values.put(fieldName, (Boolean) value);
-				}
-				else if (fieldType.equals(Character.class) || fieldType.equals(char.class)) {
+				} else if (fieldType.equals(Character.class)
+						|| fieldType.equals(char.class)) {
 					values.put(fieldName, value.toString());
-				}
-				else if (fieldType.equals(String.class)) {
+				} else if (fieldType.equals(String.class)) {
 					values.put(fieldName, value.toString());
-				}
-				else if (fieldType.equals(Byte[].class) || fieldType.equals(byte[].class)) {
+				} else if (fieldType.equals(Byte[].class)
+						|| fieldType.equals(byte[].class)) {
 					values.put(fieldName, (byte[]) value);
-				}
-				else if (ReflectionUtils.isModel(fieldType)) {
+				} else if (ReflectionUtils.isModel(fieldType)) {
 					values.put(fieldName, ((Model) value).getId());
-				}
-				else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)){
+				} else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 					values.put(fieldName, ((Enum<?>) value).name());
 				}
-			}
-			catch (IllegalArgumentException e) {
+			} catch (IllegalArgumentException e) {
 				Log.e(e.getClass().getName(), e);
-			}
-			catch (IllegalAccessException e) {
+			} catch (IllegalAccessException e) {
 				Log.e(e.getClass().getName(), e);
 			}
 		}
 
 		if (mId == null) {
 			mId = db.insert(getTableInfo().getTableName(), null, values);
-		}
-		else {
-			db.update(getTableInfo().getTableName(), values, "Id=" + mId, null);
+		} else {
+			db.update(getTableInfo().getTableName(), values, "Id=?",
+					new String[] { String.valueOf(mId) });
 		}
 
 		Cache.addEntity(this);
@@ -164,11 +166,13 @@ public static void delete(Class<? extends Model> type, long id) {
 		return new Select().from(type).execute();
 	}
 
-	public static void registerDataSetObserver(Class<? extends Model> type, DataSetObserver observer) {
+	public static void registerDataSetObserver(Class<? extends Model> type,
+			DataSetObserver observer) {
 		Cache.getTableInfo(type).registerObserver(observer);
 	}
 
-	public static void unregisterDataSetObserver(Class<? extends Model> type, DataSetObserver observer) {
+	public static void unregisterDataSetObserver(Class<? extends Model> type,
+			DataSetObserver observer) {
 		Cache.getTableInfo(type).unregisterObserver(observer);
 	}
 
@@ -188,63 +192,64 @@ public final void loadFromCursor(Class<? extends Model> type, Cursor cursor) {
 
 			try {
 				boolean columnIsNull = cursor.isNull(columnIndex);
-				TypeSerializer typeSerializer = Cache.getParserForType(fieldType);
+				TypeSerializer typeSerializer = Cache
+						.getParserForType(fieldType);
 				Object value = null;
 
 				if (typeSerializer != null) {
-				  fieldType = typeSerializer.getSerializedType();
+					fieldType = typeSerializer.getSerializedType();
 				}
 
-				// TODO: Find a smarter way to do this? This if block is necessary because we
+				// TODO: Find a smarter way to do this? This if block is
+				// necessary because we
 				// can't know the type until runtime.
 				if (columnIsNull) {
 					field = null;
-				}
-				else if (fieldType.equals(Byte.class) || fieldType.equals(byte.class)) {
+				} else if (fieldType.equals(Byte.class)
+						|| fieldType.equals(byte.class)) {
 					value = cursor.getInt(columnIndex);
-				}
-				else if (fieldType.equals(Short.class) || fieldType.equals(short.class)) {
+				} else if (fieldType.equals(Short.class)
+						|| fieldType.equals(short.class)) {
 					value = cursor.getInt(columnIndex);
-				}
-				else if (fieldType.equals(Integer.class) || fieldType.equals(int.class)) {
+				} else if (fieldType.equals(Integer.class)
+						|| fieldType.equals(int.class)) {
 					value = cursor.getInt(columnIndex);
-				}
-				else if (fieldType.equals(Long.class) || fieldType.equals(long.class)) {
+				} else if (fieldType.equals(Long.class)
+						|| fieldType.equals(long.class)) {
 					value = cursor.getLong(columnIndex);
-				}
-				else if (fieldType.equals(Float.class) || fieldType.equals(float.class)) {
+				} else if (fieldType.equals(Float.class)
+						|| fieldType.equals(float.class)) {
 					value = cursor.getFloat(columnIndex);
-				}
-				else if (fieldType.equals(Double.class) || fieldType.equals(double.class)) {
+				} else if (fieldType.equals(Double.class)
+						|| fieldType.equals(double.class)) {
 					value = cursor.getDouble(columnIndex);
-				}
-				else if (fieldType.equals(Boolean.class) || fieldType.equals(boolean.class)) {
+				} else if (fieldType.equals(Boolean.class)
+						|| fieldType.equals(boolean.class)) {
 					value = cursor.getInt(columnIndex) != 0;
-				}
-				else if (fieldType.equals(Character.class) || fieldType.equals(char.class)) {
+				} else if (fieldType.equals(Character.class)
+						|| fieldType.equals(char.class)) {
 					value = cursor.getString(columnIndex).charAt(0);
-				}
-				else if (fieldType.equals(String.class)) {
+				} else if (fieldType.equals(String.class)) {
 					value = cursor.getString(columnIndex);
-				}
-				else if (fieldType.equals(Byte[].class) || fieldType.equals(byte[].class)) {
+				} else if (fieldType.equals(Byte[].class)
+						|| fieldType.equals(byte[].class)) {
 					value = cursor.getBlob(columnIndex);
-				}
-				else if (ReflectionUtils.isModel(fieldType)) {
+				} else if (ReflectionUtils.isModel(fieldType)) {
 					final long entityId = cursor.getLong(columnIndex);
 					final Class<? extends Model> entityType = (Class<? extends Model>) fieldType;
 
 					Model entity = Cache.getEntity(entityType, entityId);
 					if (entity == null) {
-						entity = new Select().from(entityType).where("Id=?", entityId).executeSingle();
+						entity = new Select().from(entityType)
+								.where("Id=?", entityId).executeSingle();
 					}
 
 					value = entity;
-				}
-				else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)){
+				} else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 					@SuppressWarnings("rawtypes")
-					final Class<? extends Enum> enumType =  (Class<? extends Enum>) fieldType;
-					value=Enum.valueOf(enumType, cursor.getString(columnIndex));
+					final Class<? extends Enum> enumType = (Class<? extends Enum>) fieldType;
+					value = Enum.valueOf(enumType,
+							cursor.getString(columnIndex));
 				}
 
 				// Use a deserializer if one is available
@@ -258,48 +263,51 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)){
 				}
 
 				Cache.addEntity(this);
-			}
-			catch (IllegalArgumentException e) {
+			} catch (IllegalArgumentException e) {
 				Log.e(e.getMessage());
-			}
-			catch (IllegalAccessException e) {
+			} catch (IllegalAccessException e) {
 				Log.e(e.getMessage());
-			}
-			catch (SecurityException e) {
+			} catch (SecurityException e) {
 				Log.e(e.getMessage());
 			}
 		}
 	}
 
-	//////////////////////////////////////////////////////////////////////////////////////
+	// ////////////////////////////////////////////////////////////////////////////////////
 	// PROTECTED METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	protected final <E extends Model> List<E> getMany(Class<? extends Model> type, String foreignKey) {
-		return new Select().from(type).where(Cache.getTableName(type) + "." + foreignKey + "=?", getId()).execute();
+	// ////////////////////////////////////////////////////////////////////////////////////
+
+	protected final <E extends Model> List<E> getMany(
+			Class<? extends Model> type, String foreignKey) {
+		return new Select()
+				.from(type)
+				.where(Cache.getTableName(type) + "." + foreignKey + "=?",
+						getId()).execute();
 	}
 
 	/**
 	 * Called before {@link save} does any work.
 	 */
-	protected void onSave(){
+	protected void onSave() {
 	}
 
 	/**
 	 * Called before {@link delete} does any work.
 	 */
-	protected void onDelete(){
+	protected void onDelete() {
 	}
 
-	//////////////////////////////////////////////////////////////////////////////////////
+	// ////////////////////////////////////////////////////////////////////////////////////
 	// OVERRIDEN METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
+	// ////////////////////////////////////////////////////////////////////////////////////
 
 	@Override
 	public boolean equals(Object obj) {
 		final Model other = (Model) obj;
 
-		return this.mId != null && (this.getTableInfo().getTableName().equals(other.getTableInfo().getTableName()))
+		return this.mId != null
+				&& (this.getTableInfo().getTableName().equals(other
+						.getTableInfo().getTableName()))
 				&& (this.mId.equals(other.mId));
 	}
 
diff --git a/tests/.gitignore b/tests/.gitignore
deleted file mode 100644
index 6d0dc1c1..00000000
--- a/tests/.gitignore
+++ /dev/null
@@ -1,34 +0,0 @@
-#Android generated
-bin
-gen
-lint.xml
-
-#Eclipse
-.project
-.classpath
-.settings
-.checkstyle
-
-#IntelliJ IDEA
-.idea
-*.iml
-*.ipr
-*.iws
-classes
-gen-external-apklibs
-
-#Maven
-target
-release.properties
-pom.xml.*
-
-#Ant
-build.xml
-ant.properties
-local.properties
-proguard.cfg
-proguard-project.txt
-
-#Other
-.DS_Store
-tmp
diff --git a/tests/AndroidManifest.xml b/tests/AndroidManifest.xml
deleted file mode 100644
index 925693a9..00000000
--- a/tests/AndroidManifest.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.activeandroid.test"
-    android:versionCode="1"
-    android:versionName="1.0" >
-
-    <uses-sdk android:minSdkVersion="4" />
-
-    <instrumentation
-        android:name="android.test.InstrumentationTestRunner"
-        android:targetPackage="com.activeandroid.test" />
-
-    <application
-        android:icon="@drawable/ic_launcher"
-        android:label="@string/app_name" >
-        <uses-library android:name="android.test.runner" />
-    </application>
-
-</manifest>
\ No newline at end of file
diff --git a/tests/project.properties b/tests/project.properties
deleted file mode 100644
index 5ff58277..00000000
--- a/tests/project.properties
+++ /dev/null
@@ -1,15 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-17
-android.library.reference.1=..
diff --git a/tests/res/drawable-hdpi/ic_launcher.png b/tests/res/drawable-hdpi/ic_launcher.png
deleted file mode 100644
index 96a442e5..00000000
Binary files a/tests/res/drawable-hdpi/ic_launcher.png and /dev/null differ
diff --git a/tests/res/drawable-ldpi/ic_launcher.png b/tests/res/drawable-ldpi/ic_launcher.png
deleted file mode 100644
index 99238729..00000000
Binary files a/tests/res/drawable-ldpi/ic_launcher.png and /dev/null differ
diff --git a/tests/res/drawable-mdpi/ic_launcher.png b/tests/res/drawable-mdpi/ic_launcher.png
deleted file mode 100644
index 359047df..00000000
Binary files a/tests/res/drawable-mdpi/ic_launcher.png and /dev/null differ
diff --git a/tests/res/drawable-xhdpi/ic_launcher.png b/tests/res/drawable-xhdpi/ic_launcher.png
deleted file mode 100644
index 71c6d760..00000000
Binary files a/tests/res/drawable-xhdpi/ic_launcher.png and /dev/null differ
diff --git a/tests/res/values/strings.xml b/tests/res/values/strings.xml
deleted file mode 100644
index 2d1ce35a..00000000
--- a/tests/res/values/strings.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-
-    <string name="app_name">TestsTest</string>
-
-</resources>
\ No newline at end of file
diff --git a/tests/src/com/activeandroid/test/ActiveAndroidTestCase.java b/tests/src/com/activeandroid/test/ActiveAndroidTestCase.java
deleted file mode 100644
index e7632701..00000000
--- a/tests/src/com/activeandroid/test/ActiveAndroidTestCase.java
+++ /dev/null
@@ -1,45 +0,0 @@
-package com.activeandroid.test;
-
-/*
- * Copyright (C) 2010 Michael Pardo
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import android.test.ApplicationTestCase;
-
-import com.activeandroid.app.Application;
-
-public abstract class ActiveAndroidTestCase extends ApplicationTestCase<Application> {
-	public ActiveAndroidTestCase() {
-		super(Application.class);
-	}
-
-	protected void setUp() throws Exception {
-		super.setUp();
-		createApplication();
-	}
-
-	protected void tearDown() throws Exception {
-		this.getContext().deleteDatabase("Application.db"); // Ignore return;
-		super.tearDown();
-	}
-
-	public static <T> void assertArrayEquals(T[] actual, T... expected) {
-		assertEquals(expected.length, actual.length);
-		
-		for (int i = 0; i < expected.length; i++) {
-			assertEquals(expected[i], actual[i]);
-		}
-	}
-}
diff --git a/tests/src/com/activeandroid/test/LazyInitializeTest.java b/tests/src/com/activeandroid/test/LazyInitializeTest.java
deleted file mode 100644
index 90f6ea4b..00000000
--- a/tests/src/com/activeandroid/test/LazyInitializeTest.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package com.activeandroid.test;
-
-import android.test.AndroidTestCase;
-import com.activeandroid.ActiveAndroidNotInitialized;
-
-public class LazyInitializeTest extends AndroidTestCase {
-	public void testInitializeDoesNotThrow() throws Exception {
-		new MockModel();
-	}
-
-	public void testInteractionRequiringDatabaseThrows() {
-		boolean expectedExceptionThrown = false;
-		try {
-			new MockModel().save();
-		} catch (ActiveAndroidNotInitialized e) {
-			expectedExceptionThrown = true;
-		}
-
-		assertTrue(expectedExceptionThrown);
-	}
-}
diff --git a/tests/src/com/activeandroid/test/MockModel.java b/tests/src/com/activeandroid/test/MockModel.java
deleted file mode 100644
index 348ebf27..00000000
--- a/tests/src/com/activeandroid/test/MockModel.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package com.activeandroid.test;
-
-/*
- * Copyright (C) 2010 Michael Pardo
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import com.activeandroid.Model;
-import com.activeandroid.annotation.Table;
-import com.activeandroid.annotation.Column;
-
-@Table(name = "MockModel")
-public class MockModel extends Model {
-	@Column(name="MockColumn")
-	public int MockColumn;
-}
diff --git a/tests/src/com/activeandroid/test/Model/ModelTest.java b/tests/src/com/activeandroid/test/Model/ModelTest.java
deleted file mode 100644
index 66bf579c..00000000
--- a/tests/src/com/activeandroid/test/Model/ModelTest.java
+++ /dev/null
@@ -1,87 +0,0 @@
-package com.activeandroid.test.Model;
-
-/*
- * Copyright (C) 2010 Michael Pardo
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import com.activeandroid.query.Select;
-import com.activeandroid.test.ActiveAndroidTestCase;
-import com.activeandroid.test.MockModel;
-
-public class ModelTest extends ActiveAndroidTestCase {
-	class CallbackMockModel extends MockModel{
-		public Boolean s=false;
-		public Boolean d=false;
-
-		protected void onSave() {s=true;};
-		protected void onDelete() {d=true;};
-	}
-
-	public void testGetIdAfterSave(){
-		MockModel m=new MockModel();
-		m.MockColumn=42;
-		m.save();
-		assertNotNull("getId() returned null after save()",m.getId());
-
-	}
-
-	public void testGetIdAfterSaveAndSelect(){
-		MockModel m=new MockModel();
-		m.MockColumn=42;
-		m.save();
-		MockModel m2=new Select("MockColumn").from(MockModel.class).where("MockColumn=?", 42).executeSingle();
-		assertEquals(42, m2.MockColumn); //Check
-		assertNotNull("getId() returned null after Select(\"MockColumn\")",m2.getId());
-	}
-
-	public void testOnSave(){
-		CallbackMockModel m=new CallbackMockModel();
-		m.MockColumn=42;
-		assertFalse(m.s);
-		m.save();
-		assertTrue(m.s);
-	}
-
-	public void testThrowingOnSave(){
-		ThrowingCallbackMockModel m=new ThrowingCallbackMockModel();
-		m.ThrowExceptions=true;
-		m.MockColumn=42;
-		try{m.save();}
-		catch (RuntimeException e){}
-		assertNull(m.getId());
-	}
-
-	public void testOnDelete(){
-		CallbackMockModel m=new CallbackMockModel();
-		m.MockColumn=42;
-		m.save();
-		assertFalse(m.d);
-		m.delete();
-		assertTrue(m.d);
-	}
-
-	public void testThrowingOnDelete(){
-		ThrowingCallbackMockModel m=new ThrowingCallbackMockModel();
-		m.MockColumn=42;
-		m.save();
-		ThrowingCallbackMockModel m2=new Select("MockColumn").from(ThrowingCallbackMockModel.class).where("MockColumn=?", 42).executeSingle();
-		assertNotNull(m2);
-		m.ThrowExceptions=true;
-		try{m.delete();}
-		catch (RuntimeException e){}
-		m2=new Select("MockColumn").from(ThrowingCallbackMockModel.class).where("MockColumn=?", 42).executeSingle();
-		assertNotNull(m2);
-	}
-}
diff --git a/tests/src/com/activeandroid/test/Model/ThrowingCallbackMockModel.java b/tests/src/com/activeandroid/test/Model/ThrowingCallbackMockModel.java
deleted file mode 100644
index e11c4798..00000000
--- a/tests/src/com/activeandroid/test/Model/ThrowingCallbackMockModel.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package com.activeandroid.test.Model;
-
-import com.activeandroid.annotation.Column;
-import com.activeandroid.test.MockModel;
-
-class ThrowingCallbackMockModel extends MockModel{
-	@Column(name="MockColumn")
-	public int MockColumn;
-
-	public boolean ThrowExceptions=false;
-
-	public ThrowingCallbackMockModel() {
-	}
-
-	protected void onSave() {if (ThrowExceptions) throw new RuntimeException();};
-	protected void onDelete() {if (ThrowExceptions) throw new RuntimeException();};
-}
diff --git a/tests/src/com/activeandroid/test/query/DeleteTest.java b/tests/src/com/activeandroid/test/query/DeleteTest.java
deleted file mode 100644
index 3d9a1d71..00000000
--- a/tests/src/com/activeandroid/test/query/DeleteTest.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package com.activeandroid.test.query;
-
-/*
- * Copyright (C) 2010 Michael Pardo
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import com.activeandroid.query.Delete;
-import com.activeandroid.test.MockModel;
-
-public class DeleteTest extends SqlableTestCase {
-	public void testDelete() {
-		assertSqlEquals("DELETE ", new Delete());
-	}
-
-	public void testFrom() {
-		assertSqlEquals("DELETE FROM MockModel",
-				new Delete().from(MockModel.class));
-	}
-}
diff --git a/tests/src/com/activeandroid/test/query/FromTest.java b/tests/src/com/activeandroid/test/query/FromTest.java
deleted file mode 100644
index 7340e091..00000000
--- a/tests/src/com/activeandroid/test/query/FromTest.java
+++ /dev/null
@@ -1,166 +0,0 @@
-package com.activeandroid.test.query;
-
-/*
- * Copyright (C) 2010 Michael Pardo
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import com.activeandroid.Model;
-import com.activeandroid.annotation.Table;
-import com.activeandroid.query.From;
-import com.activeandroid.query.Select;
-import com.activeandroid.test.MockModel;
-
-public class FromTest extends SqlableTestCase {
-	private static final String SELECT_PREFIX = "SELECT ALL * FROM MockModel ";
-	
-	public void testLimit() {
-		assertSqlEquals(SELECT_PREFIX + "LIMIT 10",
-				from().limit(10));
-		assertSqlEquals(SELECT_PREFIX + "LIMIT 10",
-				from().limit("10"));
-	}
-	
-	public void testOffset() {
-		assertSqlEquals(SELECT_PREFIX + "OFFSET 10",
-				from().offset(10));
-		assertSqlEquals(SELECT_PREFIX + "OFFSET 10",
-				from().offset("10"));
-	}
-	
-	public void testLimitOffset() {
-		assertSqlEquals(SELECT_PREFIX + "LIMIT 10 OFFSET 20",
-				from().offset(20).limit(10));
-		assertSqlEquals(SELECT_PREFIX + "LIMIT 10 OFFSET 20",
-				from().limit(10).offset(20));
-	}
-	
-	public void testAs() {
-		assertSqlEquals(SELECT_PREFIX + "AS a",
-				from().as("a"));
-	}
-	
-	public void testOrderBy() {
-		assertSqlEquals(SELECT_PREFIX + "ORDER BY Id DESC",
-				from().orderBy("Id DESC"));
-	}
-	
-	public void testWhereNoArguments() {
-		assertSqlEquals(SELECT_PREFIX + "WHERE Id = 5",
-				from().where("Id = 5"));
-		
-		assertSqlEquals(SELECT_PREFIX + "WHERE Id = 5",
-				from().where("Id = 1").where("Id = 2").where("Id = 5"));
-	}
-	
-	public void testWhereWithArguments() {
-		From query = from().where("Id = ?", 5);
-		assertArrayEquals(query.getArguments(), "5");
-		assertSqlEquals(SELECT_PREFIX + "WHERE Id = ?",
-				query);
-		
-		query = from().where("Id > ? AND Id < ?", 5, 10);
-		assertArrayEquals(query.getArguments(), "5", "10");
-		assertSqlEquals(SELECT_PREFIX + "WHERE Id > ? AND Id < ?",
-				query);
-		
-		query = from()
-				.where("Id != ?", 10)
-				.where("Id IN (?, ?, ?)", 5, 10, 15)
-				.where("Id > ? AND Id < ?", 5, 10);
-		assertArrayEquals(query.getArguments(), "5", "10");
-		assertSqlEquals(SELECT_PREFIX + "WHERE Id > ? AND Id < ?",
-				query);
-	}
-	
-	public void testSingleJoin() {
-		assertSqlEquals(SELECT_PREFIX + "JOIN JoinModel ON MockModel.Id = JoinModel.Id",
-				from().join(JoinModel.class).on("MockModel.Id = JoinModel.Id"));
-		
-		assertSqlEquals(SELECT_PREFIX + "AS a JOIN JoinModel AS b ON a.Id = b.Id",
-				from().as("a").join(JoinModel.class).as("b").on("a.Id = b.Id"));
-		
-		assertSqlEquals(SELECT_PREFIX + "JOIN JoinModel USING (Id, other)",
-				from().join(JoinModel.class).using("Id", "other"));
-	}
-	
-	public void testJoins() {
-		assertSqlEquals(SELECT_PREFIX + "JOIN JoinModel ON Id JOIN JoinModel2 ON Id",
-				from().join(JoinModel.class).on("Id")
-				.join(JoinModel2.class).on("Id"));
-	}
-	
-	public void testJoinTypes() {
-		assertSqlEquals(SELECT_PREFIX + "INNER JOIN JoinModel ON",
-				from().innerJoin(JoinModel.class).on(""));
-		assertSqlEquals(SELECT_PREFIX + "OUTER JOIN JoinModel ON",
-				from().outerJoin(JoinModel.class).on(""));
-		assertSqlEquals(SELECT_PREFIX + "CROSS JOIN JoinModel ON",
-				from().crossJoin(JoinModel.class).on(""));
-	}
-	
-	public void testGroupByHaving() {
-		assertSqlEquals(SELECT_PREFIX + "GROUP BY Id",
-				from().groupBy("Id"));
-		assertSqlEquals(SELECT_PREFIX + "GROUP BY Id HAVING Id = 1",
-				from().groupBy("Id").having("Id = 1"));
-		assertSqlEquals(SELECT_PREFIX + "GROUP BY Id HAVING Id = 1",
-				from().having("Id = 1").groupBy("Id"));
-	}
-	
-	public void testAll() {
-		final String expectedSql = SELECT_PREFIX + "AS a JOIN JoinModel USING (Id) WHERE Id > 5 GROUP BY Id HAVING Id < 10 LIMIT 5 OFFSET 10";
-		
-		// Try a few different orderings, shouldn't change the output
-		assertSqlEquals(expectedSql,
-				from()
-					.as("a")
-					.where("Id > 5")
-					.join(JoinModel.class).using("Id")
-					.groupBy("Id")
-					.having("Id < 10")
-					.limit(5)
-					.offset(10));
-		assertSqlEquals(expectedSql,
-				from()
-					.offset(10)
-					.having("Id < 10")
-					.join(JoinModel.class).using("Id")
-					.limit(5)
-					.as("a")
-					.where("Id > 5")
-					.groupBy("Id"));
-		assertSqlEquals(expectedSql,
-				from()
-					.join(JoinModel.class).using("Id")
-					.offset(10)
-					.having("Id < 10")
-					.where("Id > 5")
-					.groupBy("Id")
-					.limit(5)
-					.as("a"));
-	}
-	
-	private From from() {
-		return new Select().all().from(MockModel.class);
-	}
-	
-	@Table(name = "JoinModel")
-	private static class JoinModel extends Model {
-	}
-	
-	@Table(name = "JoinModel2")
-	private static class JoinModel2 extends Model {
-	}
-}
diff --git a/tests/src/com/activeandroid/test/query/SelectTest.java b/tests/src/com/activeandroid/test/query/SelectTest.java
deleted file mode 100644
index fabce5cd..00000000
--- a/tests/src/com/activeandroid/test/query/SelectTest.java
+++ /dev/null
@@ -1,54 +0,0 @@
-package com.activeandroid.test.query;
-
-/*
- * Copyright (C) 2010 Michael Pardo
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import com.activeandroid.query.Select;
-import com.activeandroid.test.MockModel;
-
-public class SelectTest extends SqlableTestCase {
-	public void testSelectEmpty() {
-		assertSqlEquals("SELECT * ", new Select());
-	}
-
-	public void testSelectAll() {
-		assertSqlEquals("SELECT ALL * ", new Select().all());
-		assertSqlEquals("SELECT ALL * ", new Select().distinct().all());
-	}
-
-	public void testSelectDistinct() {
-		assertSqlEquals("SELECT DISTINCT * ", new Select().distinct());
-		assertSqlEquals("SELECT DISTINCT * ", new Select().all().distinct());
-	}
-
-	public void testSelectStringColumns() {
-		assertSqlEquals("SELECT id, a, b, c ", new Select("a", "b", "c"));
-	}
-
-	public void testSelectDistinctColumns() {
-		assertSqlEquals("SELECT DISTINCT a, b, c ",
-				new Select("a", "b", "c").distinct());
-	}
-
-	public void testFrom() {
-		assertSqlEquals("SELECT ALL * FROM MockModel",
-				new Select().all().from(MockModel.class));
-	}
-	public void testAutoidWithStars() {
-		assertSqlEquals("SELECT Users.* ", new Select("Users.*"));
-		assertSqlEquals("SELECT * ", new Select("*"));
-	}
-}
diff --git a/tests/src/com/activeandroid/test/query/SqlableTestCase.java b/tests/src/com/activeandroid/test/query/SqlableTestCase.java
deleted file mode 100644
index e206adcc..00000000
--- a/tests/src/com/activeandroid/test/query/SqlableTestCase.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.activeandroid.test.query;
-
-/*
- * Copyright (C) 2010 Michael Pardo
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import com.activeandroid.query.Sqlable;
-import com.activeandroid.test.ActiveAndroidTestCase;
-
-public abstract class SqlableTestCase extends ActiveAndroidTestCase {
-	public static void assertSqlEquals(String expected, Sqlable actual) {
-		assertEquals(expected, actual.toSql());
-	}
-}
diff --git a/tests/src/com/activeandroid/test/query/UpdateTest.java b/tests/src/com/activeandroid/test/query/UpdateTest.java
deleted file mode 100644
index d508fc60..00000000
--- a/tests/src/com/activeandroid/test/query/UpdateTest.java
+++ /dev/null
@@ -1,79 +0,0 @@
-package com.activeandroid.test.query;
-
-/*
- * Copyright (C) 2010 Michael Pardo
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import com.activeandroid.query.Set;
-import com.activeandroid.query.Update;
-import com.activeandroid.test.MockModel;
-
-public class UpdateTest extends SqlableTestCase {
-	private static final String UPDATE_PREFIX = "UPDATE MockModel ";
-	
-	public void testUpdate() {
-		assertSqlEquals(UPDATE_PREFIX, update());
-	}
-	
-	public void testUpdateSet() {
-		assertSqlEquals(UPDATE_PREFIX + "SET Id = 5 ",
-				update().set("Id = 5"));
-	}
-	
-	public void testUpdateWhereNoArguments() {
-		assertSqlEquals(UPDATE_PREFIX + "SET Id = 5 WHERE Id = 1 ",
-				update()
-					.set("Id = 5")
-					.where("Id = 1"));
-	}
-	
-	public void testUpdateWhereWithArguments() {
-		Set set = update()
-				.set("Id = 5")
-				.where("Id = ?", 1);
-		assertArrayEquals(set.getArguments(), "1");
-		assertSqlEquals(UPDATE_PREFIX + "SET Id = 5 WHERE Id = ? ",
-				set);
-		
-		set = update()
-				.set("Id = 5")
-				.where("Id = ?", 1)
-				.where("Id IN (?, ?, ?)", 5, 4, 3);
-		assertArrayEquals(set.getArguments(), "5", "4", "3");
-		assertSqlEquals(UPDATE_PREFIX + "SET Id = 5 WHERE Id IN (?, ?, ?) ",
-				set);
-	}
-
-	public void testUpdateWhereWithSetArguments() {
-		Set set = update()
-				.set("Id = ?", 3)
-				.where("Id = ?", 1);
-		assertArrayEquals(set.getArguments(), "3", "1");
-		assertSqlEquals(UPDATE_PREFIX + "SET Id = ? WHERE Id = ? ",
-				set);
-		
-		set = update()
-				.set("Id = ?", 2)
-				.where("Id = ?", 1)
-				.where("Id IN (?, ?, ?)", 5, 4, 3);
-		assertArrayEquals(set.getArguments(), "2", "5", "4", "3");
-		assertSqlEquals(UPDATE_PREFIX + "SET Id = ? WHERE Id IN (?, ?, ?) ",
-				set);
-	}
-	
-	private Update update() {
-		return new Update(MockModel.class);
-	}
-}
