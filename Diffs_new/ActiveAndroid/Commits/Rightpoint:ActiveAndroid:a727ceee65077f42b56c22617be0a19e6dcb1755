diff --git a/src/main/java/com/activeandroid/Cache.java b/src/main/java/com/activeandroid/Cache.java
index f57e521d..663df145 100644
--- a/src/main/java/com/activeandroid/Cache.java
+++ b/src/main/java/com/activeandroid/Cache.java
@@ -116,7 +116,25 @@ public static boolean checkDbIntegrity(DatabaseHelper helper) {
         try {
             String result = statement.simpleQueryForString();
             if (!result.equalsIgnoreCase("ok")) {
-                helper.restoreBackUp(sContext);
+                ok = helper.restoreBackUp(sContext);
+            }
+        } finally {
+            if (statement != null) {
+                statement.close();
+            }
+        }
+
+        return ok;
+    }
+
+    public static boolean checkDbIntegrity(SQLiteOpenHelper helper) {
+        boolean ok = true;
+        String sql = "Pragma quick_check(1)";
+        SQLiteStatement statement = helper.getWritableDatabase().compileStatement(sql);
+
+        try {
+            String result = statement.simpleQueryForString();
+            if (!result.equalsIgnoreCase("ok")) {
                 ok = false;
             }
         } finally {
diff --git a/src/main/java/com/activeandroid/DatabaseHelper.java b/src/main/java/com/activeandroid/DatabaseHelper.java
index 0ba88863..6efb10ab 100644
--- a/src/main/java/com/activeandroid/DatabaseHelper.java
+++ b/src/main/java/com/activeandroid/DatabaseHelper.java
@@ -136,7 +136,7 @@ public void copyAttachedDatabase(Context context, String databaseName, String pr
         final File dbPath = context.getDatabasePath(databaseName);
 
         // If the database already exists, return
-        if (dbPath.exists()) {
+        if (dbPath.exists() && Cache.checkDbIntegrity(this)) {
             return;
         }
 
@@ -149,7 +149,7 @@ public void copyAttachedDatabase(Context context, String databaseName, String pr
             File existingDb = context.getDatabasePath(TEMP_DB_NAME + getDatabaseName());
             InputStream inputStream;
             // if it exists and the integrity is ok
-            if (existingDb.exists() && Cache.checkDbIntegrity(this)) {
+            if (existingDb.exists() && Cache.checkDbIntegrity(mTempDatabase)) {
                 inputStream = new FileInputStream(existingDb);
             } else {
                 inputStream = context.getAssets().open(prepackagedName);
@@ -213,7 +213,9 @@ public String getDatabaseName() {
      *
      * @param context
      */
-    public void restoreBackUp(Context context) {
+    public boolean restoreBackUp(Context context) {
+        boolean success = true;
+
         File db = context.getDatabasePath(TEMP_DB_NAME + mDatabaseName);
         File corrupt = context.getDatabasePath(mDatabaseName);
         if (corrupt.delete()) {
@@ -221,11 +223,12 @@ public void restoreBackUp(Context context) {
                 writeDB(corrupt, new FileInputStream(db));
             } catch (IOException e) {
                 AALog.e(e.getMessage());
+                success = false;
             }
         } else {
             AALog.e("Failed to delete DB");
         }
-
+        return success;
     }
 
     //////////////////////////////////////////////////////////////////////////////////////
