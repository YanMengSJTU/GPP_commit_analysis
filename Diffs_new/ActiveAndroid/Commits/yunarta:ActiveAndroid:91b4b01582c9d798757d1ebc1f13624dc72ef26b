diff --git a/library/build.gradle b/library/build.gradle
index d0c93e45..d346774d 100644
--- a/library/build.gradle
+++ b/library/build.gradle
@@ -6,6 +6,8 @@ android {
     compileSdkVersion autoCompileSdkVersion(23)
     buildToolsVersion autoBuildToolsVersion('23.0.1')
 
+    defaultPublishConfig "debug"
+
     defaultConfig {
         testApplicationId "com.activeandroid.test"
 
@@ -17,6 +19,10 @@ android {
     }
 
     buildTypes {
+        debug {
+
+        }
+
         release {
             minifyEnabled false
             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
diff --git a/library/src/main/java/com/activeandroid/sebbia/TableInfo.java b/library/src/main/java/com/activeandroid/sebbia/TableInfo.java
index d900beb8..1ace2733 100644
--- a/library/src/main/java/com/activeandroid/sebbia/TableInfo.java
+++ b/library/src/main/java/com/activeandroid/sebbia/TableInfo.java
@@ -19,6 +19,7 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteStatement;
 import android.text.TextUtils;
+import android.util.SparseArray;
 
 import com.activeandroid.sebbia.annotation.Column;
 import com.activeandroid.sebbia.annotation.Table;
@@ -48,9 +49,9 @@
 
     private Map<Field, String> mColumnNames = new LinkedHashMap<Field, String>();
 
-    private SQLiteStatement mInsertStatement;
-    private SQLiteStatement mInsertOrReplaceStatement;
-    private SQLiteStatement mUpdateStatement;
+    private SparseArray<SQLiteStatement> mInsertStatement;
+    private SparseArray<SQLiteStatement> mInsertOrReplaceStatement;
+    private SparseArray<SQLiteStatement> mUpdateStatement;
 
     private Map<String, Integer> mColumnIndexes;
 
@@ -62,6 +63,10 @@ public TableInfo(Class<? extends Model> type)
     {
         mType = type;
 
+        mInsertStatement = new SparseArray<>();
+        mInsertOrReplaceStatement = new SparseArray<>();
+        mUpdateStatement = new SparseArray<>();
+
         final Table tableAnnotation = type.getAnnotation(Table.class);
 
         if (tableAnnotation != null)
@@ -88,7 +93,7 @@ public TableInfo(Class<? extends Model> type)
             if (field.isAnnotationPresent(Column.class))
             {
                 final Column columnAnnotation = field.getAnnotation(Column.class);
-                String columnName = columnAnnotation.name();
+                String       columnName       = columnAnnotation.name();
                 if (TextUtils.isEmpty(columnName))
                 {
                     columnName = field.getName();
@@ -147,32 +152,47 @@ public String getColumnName(Field field)
 
     public SQLiteStatement getInsertStatement(String database)
     {
-        if (mInsertStatement == null)
+        int key = database.hashCode();
+
+        SQLiteStatement statement = mInsertStatement.get(key);
+        if (statement == null)
         {
             SQLiteDatabase db = Cache.openDatabase(database);
-            mInsertStatement = db.compileStatement(SQLiteUtils.createInsertStatement("INSERT INTO ", this));
+            statement = db.compileStatement(SQLiteUtils.createInsertStatement("INSERT INTO ", this));
+            mInsertStatement.put(key, statement);
         }
-        return mInsertStatement;
+
+        return statement;
     }
 
     public SQLiteStatement getUpdateStatement(String database)
     {
-        if (mUpdateStatement == null)
+        int key = database.hashCode();
+
+        SQLiteStatement statement = mUpdateStatement.get(key);
+        if (statement == null)
         {
             SQLiteDatabase db = Cache.openDatabase(database);
-            mUpdateStatement = db.compileStatement(SQLiteUtils.createUpdateStatement(this));
+            statement = db.compileStatement(SQLiteUtils.createUpdateStatement(this));
+            mUpdateStatement.put(key, statement);
         }
-        return mUpdateStatement;
+
+        return statement;
     }
 
     public SQLiteStatement getInsertOrReplaceStatement(String database)
     {
-        if (mInsertOrReplaceStatement == null)
+        int key = database.hashCode();
+
+        SQLiteStatement statement = mInsertOrReplaceStatement.get(key);
+        if (statement == null)
         {
             SQLiteDatabase db = Cache.openDatabase(database);
-            mInsertOrReplaceStatement = db.compileStatement(SQLiteUtils.createInsertStatement("INSERT OR REPLACE INTO ", this));
+            statement = db.compileStatement(SQLiteUtils.createInsertStatement("INSERT OR REPLACE INTO ", this));
+            mInsertOrReplaceStatement.put(key, statement);
         }
-        return mInsertOrReplaceStatement;
+
+        return statement;
     }
 
     private Field getIdField(Class<?> type)
