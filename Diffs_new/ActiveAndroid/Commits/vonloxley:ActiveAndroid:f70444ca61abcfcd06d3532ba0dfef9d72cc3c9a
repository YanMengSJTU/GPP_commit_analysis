diff --git a/src/com/activeandroid/ActiveAndroidNotInitialized.java b/src/com/activeandroid/ActiveAndroidNotInitialized.java
new file mode 100644
index 00000000..99a459d1
--- /dev/null
+++ b/src/com/activeandroid/ActiveAndroidNotInitialized.java
@@ -0,0 +1,7 @@
+package com.activeandroid;
+
+public class ActiveAndroidNotInitialized extends RuntimeException {
+	public ActiveAndroidNotInitialized() {
+		super("ActiveAndroid must be initialized with ActiveAndroid#initialize before interacting with database");
+	}
+}
diff --git a/src/com/activeandroid/Cache.java b/src/com/activeandroid/Cache.java
index b9061d12..7abfb849 100644
--- a/src/com/activeandroid/Cache.java
+++ b/src/com/activeandroid/Cache.java
@@ -78,6 +78,7 @@ public static synchronized void clear() {
 	}
 
 	public static synchronized void dispose() {
+		checkInitialization();
 		closeDatabase();
 		
 		sEntities = null;
@@ -92,26 +93,33 @@ public static synchronized void dispose() {
 	// Database access
 
 	public static synchronized SQLiteDatabase openDatabase() {
+		if (sDatabaseHelper == null) {
+			checkInitialization();
+		}
 		return sDatabaseHelper.getWritableDatabase();
 	}
 
 	public static synchronized void closeDatabase() {
+		checkInitialization();
 		sDatabaseHelper.close();
 	}
 
 	// Context access
 
 	public static Context getContext() {
+		checkInitialization();
 		return sContext;
 	}
 
 	// Entity cache
 
 	public static synchronized void addEntity(Model entity) {
+		checkInitialization();
 		sEntities.add(entity);
 	}
 
 	public static synchronized Model getEntity(Class<? extends Model> type, long id) {
+		checkInitialization();
 		for (Model entity : sEntities) {
 			if (entity != null && entity.getClass() != null && entity.getClass() == type && entity.getId() != null
 					&& entity.getId() == id) {
@@ -124,24 +132,35 @@ public static synchronized Model getEntity(Class<? extends Model> type, long id)
 	}
 
 	public static synchronized void removeEntity(Model entity) {
+		checkInitialization();
 		sEntities.remove(entity);
 	}
 
 	// Model cache
 
 	public static synchronized Collection<TableInfo> getTableInfos() {
+		checkInitialization();
 		return sModelInfo.getTableInfos();
 	}
 
 	public static synchronized TableInfo getTableInfo(Class<? extends Model> type) {
+		checkInitialization();
 		return sModelInfo.getTableInfo(type);
 	}
 
 	public static synchronized TypeSerializer getParserForType(Class<?> type) {
+		checkInitialization();
 		return sModelInfo.getTypeSerializer(type);
 	}
 
 	public static synchronized String getTableName(Class<? extends Model> type) {
+		checkInitialization();
 		return sModelInfo.getTableInfo(type).getTableName();
 	}
-}
\ No newline at end of file
+
+	private static void checkInitialization() {
+		if (!sIsInitialized) {
+			throw new ActiveAndroidNotInitialized();
+		}
+	}
+}
