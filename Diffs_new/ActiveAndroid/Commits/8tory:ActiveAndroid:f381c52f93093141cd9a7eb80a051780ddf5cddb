diff --git a/src/com/activeandroid/DatabaseHelper.java b/src/com/activeandroid/DatabaseHelper.java
index 152096f1..f07fb7f7 100644
--- a/src/com/activeandroid/DatabaseHelper.java
+++ b/src/com/activeandroid/DatabaseHelper.java
@@ -132,8 +132,11 @@ private void executeCreateIndex(SQLiteDatabase db) {
 		db.beginTransaction();
 		try {
 			for (TableInfo tableInfo : Cache.getTableInfos()) {
-				String s = SQLiteUtils.createIndexDefinition(tableInfo);
-				if (!android.text.TextUtils.isEmpty(s)) db.execSQL(s);
+				String[] definitions = SQLiteUtils.createIndexDefinition(tableInfo);
+
+				for (String definition : definitions) {
+					db.execSQL(definition);
+				}
 			}
 			db.setTransactionSuccessful();
 		}
diff --git a/src/com/activeandroid/annotation/Column.java b/src/com/activeandroid/annotation/Column.java
index f7b9627d..9529e522 100644
--- a/src/com/activeandroid/annotation/Column.java
+++ b/src/com/activeandroid/annotation/Column.java
@@ -48,5 +48,36 @@
 
 	public ConflictAction onUniqueConflict() default ConflictAction.FAIL;
 
+	/*
+	 * If set index = true, we will create a index with single column.
+	 *
+	 * Example:
+	 *
+	 * @Table(name = "table_name")
+	 * public class Table extends Model {
+	 *     @Column(name = "member", index = true)
+	 *     public String member;
+	 * }
+	 *
+	 * Execute CREATE INDEX index_table_name_member on table_name(member)
+	 */
 	public boolean index() default false;
+
+	/*
+	 * If set indexGroup = "group_name", we will create a index with group.
+	 *
+	 * Example:
+	 *
+	 * @Table(name = "table_name")
+	 * public class Table extends Model {
+	 *     @Column(name = "member1", indexGroup = "group_name")
+	 *     public String member1;
+	 *
+	 *     @Column(name = "member2", indexGroup = "group_name")
+	 *     public String member2;
+	 * }
+	 *
+	 * Execute CREATE INDEX index_table_name_group_name on table_name(member1, member2)
+	 */
+	public String indexGroup() default "";
 }
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index b2739a7a..9e873061 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -32,6 +32,8 @@
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
 
 public final class SQLiteUtils {
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -78,6 +80,12 @@
 		}
 	};
 
+	//////////////////////////////////////////////////////////////////////////////////////
+	// PRIVATE MEMBERS
+	//////////////////////////////////////////////////////////////////////////////////////
+
+	private static HashMap<String, List<String>> sIndexGroupMap;
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -111,35 +119,50 @@ public static void execSql(String sql, Object[] bindArgs) {
 
 	// Database creation
 
-	public static String createIndexDefinition(TableInfo tableInfo) {
-		//create index index_place on graph_place_to_place(graph_place,place);
+
+	public static String[] createIndexDefinition(TableInfo tableInfo) {
 		final ArrayList<String> definitions = new ArrayList<String>();
+		sIndexGroupMap = new HashMap<String, List<String>>();
 
 		for (Field field : tableInfo.getFields()) {
-			String definition = createIndexColumnDefinition(tableInfo, field);
-			if (!TextUtils.isEmpty(definition)) {
-				definitions.add(definition);
-			}
+			createIndexColumnDefinition(tableInfo, field);
 		}
-		if (definitions.isEmpty()) return null;
 
-		return String.format("CREATE INDEX IF NOT EXISTS %s on %s(%s);",
-				"index_" + tableInfo.getTableName(),
-				tableInfo.getTableName(),
-				TextUtils.join(",", definitions));
+		if (sIndexGroupMap.isEmpty()) {
+			return new String[0];
+		}
+
+		for (Map.Entry<String, List<String>> entry : sIndexGroupMap.entrySet()) {
+			definitions.add(String.format("CREATE INDEX IF NOT EXISTS %s on %s(%s);",
+					"index_" + tableInfo.getTableName() + "_" + entry.getKey(),
+					tableInfo.getTableName(), TextUtils.join(", ", entry.getValue())));
+		}
+
+		return definitions.toArray(new String[definitions.size()]);
 	}
 
-	public static String createIndexColumnDefinition(TableInfo tableInfo, Field field) {
+	public static void createIndexColumnDefinition(TableInfo tableInfo, Field field) {
 		StringBuilder definition = new StringBuilder();
 
 		final String name = tableInfo.getColumnName(field);
 		final Column column = field.getAnnotation(Column.class);
 
 		if (column.index()) {
-			definition.append(name);
+			List<String> list = new ArrayList<String>();
+			list.add(name);
+			sIndexGroupMap.put(name, list);
 		}
 
-		return definition.toString();
+		String group = column.indexGroup();
+		if (!group.isEmpty()) {
+			List<String> list = sIndexGroupMap.get(group);
+			if (list == null) {
+				list = new ArrayList<String>();
+			}
+
+			list.add(name);
+			sIndexGroupMap.put(group, list);
+		}
 	}
 
 	public static String createTableDefinition(TableInfo tableInfo) {
