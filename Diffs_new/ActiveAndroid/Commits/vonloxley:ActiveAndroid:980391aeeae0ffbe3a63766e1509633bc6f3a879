diff --git a/AndroidManifest.xml b/AndroidManifest.xml
new file mode 100644
index 00000000..59c30301
--- /dev/null
+++ b/AndroidManifest.xml
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+      package="com.activeandroid"
+      android:versionCode="1"
+      android:versionName="1.0">
+    <uses-sdk android:minSdkVersion="4"/>
+    <application>
+        <activity android:name="ActiveAndroid"
+                  android:label="ActiveAndroid">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+    </application>
+</manifest>
diff --git a/libs/android.jar b/libs/android.jar
deleted file mode 100644
index 4274d2b0..00000000
Binary files a/libs/android.jar and /dev/null differ
diff --git a/project.properties b/project.properties
new file mode 100644
index 00000000..4a46b9d1
--- /dev/null
+++ b/project.properties
@@ -0,0 +1,15 @@
+# This file is automatically generated by Android Tools.
+# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
+#
+# This file must be checked in Version Control Systems.
+#
+# To customize properties used by the Ant build system edit
+# "ant.properties", and override values to adapt the script to your
+# project structure.
+#
+# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
+#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
+
+android.library=true
+# Project target.
+target=android-17
diff --git a/src/com/activeandroid/ActiveAndroidNotInitialized.java b/src/com/activeandroid/ActiveAndroidNotInitialized.java
new file mode 100644
index 00000000..99a459d1
--- /dev/null
+++ b/src/com/activeandroid/ActiveAndroidNotInitialized.java
@@ -0,0 +1,7 @@
+package com.activeandroid;
+
+public class ActiveAndroidNotInitialized extends RuntimeException {
+	public ActiveAndroidNotInitialized() {
+		super("ActiveAndroid must be initialized with ActiveAndroid#initialize before interacting with database");
+	}
+}
diff --git a/src/com/activeandroid/Cache.java b/src/com/activeandroid/Cache.java
index b9061d12..2ab29882 100644
--- a/src/com/activeandroid/Cache.java
+++ b/src/com/activeandroid/Cache.java
@@ -17,12 +17,11 @@
  */
 
 import java.util.Collection;
-import java.util.HashSet;
-import java.util.Set;
 
 import android.app.Application;
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
+import android.support.v4.util.LruCache;
 
 import com.activeandroid.serializer.TypeSerializer;
 import com.activeandroid.util.Log;
@@ -37,7 +36,8 @@
 	private static ModelInfo sModelInfo;
 	private static DatabaseHelper sDatabaseHelper;
 
-	private static Set<Model> sEntities;
+	private static LruCache<String, Model> sEntities;
+	private final static int CACHESIZE = 1024; // Arbitrary cachsize
 
 	private static boolean sIsInitialized = false;
 
@@ -63,21 +63,22 @@ public static synchronized void initialize(Application application) {
 		sModelInfo = new ModelInfo(application);
 		sDatabaseHelper = new DatabaseHelper(sContext);
 
-		sEntities = new HashSet<Model>();
-
-		openDatabase();
+		sEntities = new LruCache<String, Model>(CACHESIZE);
 
 		sIsInitialized = true;
 
+		openDatabase();
+
 		Log.v("ActiveAndroid initialized succesfully.");
 	}
 
 	public static synchronized void clear() {
-		sEntities = new HashSet<Model>();
+		sEntities.evictAll();
 		Log.v("Cache cleared.");
 	}
 
 	public static synchronized void dispose() {
+		checkInitialization();
 		closeDatabase();
 		
 		sEntities = null;
@@ -92,56 +93,72 @@ public static synchronized void dispose() {
 	// Database access
 
 	public static synchronized SQLiteDatabase openDatabase() {
+		if (sDatabaseHelper == null) {
+			checkInitialization();
+		}
 		return sDatabaseHelper.getWritableDatabase();
 	}
 
 	public static synchronized void closeDatabase() {
+		checkInitialization();
 		sDatabaseHelper.close();
 	}
 
 	// Context access
 
 	public static Context getContext() {
+		checkInitialization();
 		return sContext;
 	}
 
 	// Entity cache
 
 	public static synchronized void addEntity(Model entity) {
-		sEntities.add(entity);
+		checkInitialization();
+
+		if (entity.getId() != null) {
+			sEntities.put(entity.getClass().toString().replaceAll("^class ", "")+'|'+entity.getId(), entity);
+		}
 	}
 
 	public static synchronized Model getEntity(Class<? extends Model> type, long id) {
-		for (Model entity : sEntities) {
-			if (entity != null && entity.getClass() != null && entity.getClass() == type && entity.getId() != null
-					&& entity.getId() == id) {
+		checkInitialization();
 
-				return entity;
-			}
-		}
+		Model entity=sEntities.get(type.getName()+'|'+id);
 
-		return null;
+		return entity;
 	}
 
 	public static synchronized void removeEntity(Model entity) {
-		sEntities.remove(entity);
+		checkInitialization();
+		sEntities.remove(entity.getClass().toString().replaceAll("^class ", "")+'|'+entity.getId());
 	}
 
 	// Model cache
 
 	public static synchronized Collection<TableInfo> getTableInfos() {
+		checkInitialization();
 		return sModelInfo.getTableInfos();
 	}
 
 	public static synchronized TableInfo getTableInfo(Class<? extends Model> type) {
+		checkInitialization();
 		return sModelInfo.getTableInfo(type);
 	}
 
 	public static synchronized TypeSerializer getParserForType(Class<?> type) {
+		checkInitialization();
 		return sModelInfo.getTypeSerializer(type);
 	}
 
 	public static synchronized String getTableName(Class<? extends Model> type) {
+		checkInitialization();
 		return sModelInfo.getTableInfo(type).getTableName();
 	}
-}
\ No newline at end of file
+
+	private static void checkInitialization() {
+		if (!sIsInitialized) {
+			throw new ActiveAndroidNotInitialized();
+		}
+	}
+}
diff --git a/src/com/activeandroid/DatabaseHelper.java b/src/com/activeandroid/DatabaseHelper.java
index 0390949c..365c9cbc 100644
--- a/src/com/activeandroid/DatabaseHelper.java
+++ b/src/com/activeandroid/DatabaseHelper.java
@@ -76,12 +76,16 @@ public void onCreate(SQLiteDatabase db) {
 
 		db.beginTransaction();
 
-		for (TableInfo tableInfo : Cache.getTableInfos()) {
-			db.execSQL(SQLiteUtils.createTableDefinition(tableInfo));
-		}
+		try {
+			for (TableInfo tableInfo : Cache.getTableInfos()) {
+				db.execSQL(SQLiteUtils.createTableDefinition(tableInfo));
+			}
 
-		db.setTransactionSuccessful();
-		db.endTransaction();
+			db.setTransactionSuccessful();
+		}
+		finally {
+			db.endTransaction();
+		}
 
 		executeMigrations(db, -1, db.getVersion());
 	}
@@ -147,25 +151,27 @@ private boolean executeMigrations(SQLiteDatabase db, int oldVersion, int newVers
 			Collections.sort(files, new NaturalOrderComparator());
 
 			db.beginTransaction();
+			try {
+				for (String file : files) {
+					try {
+						final int version = Integer.valueOf(file.replace(".sql", ""));
 
-			for (String file : files) {
-				try {
-					final int version = Integer.valueOf(file.replace(".sql", ""));
+						if (version > oldVersion && version <= newVersion) {
+							executeSqlScript(db, file);
+							migrationExecuted = true;
 
-					if (version > oldVersion && version <= newVersion) {
-						executeSqlScript(db, file);
-						migrationExecuted = true;
-
-						Log.i(file + " executed succesfully.");
+							Log.i(file + " executed succesfully.");
+						}
+					}
+					catch (NumberFormatException e) {
+						Log.w("Skipping invalidly named file: " + file, e);
 					}
 				}
-				catch (NumberFormatException e) {
-					Log.w("Skipping invalidly named file: " + file, e);
-				}
+				db.setTransactionSuccessful();
+			}
+			finally {
+				db.endTransaction();
 			}
-
-			db.setTransactionSuccessful();
-			db.endTransaction();
 		}
 		catch (IOException e) {
 			Log.e("Failed to execute migrations.", e);
diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 9ad1f0e9..ff66ff4f 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -42,15 +42,6 @@
 
 	private TableInfo mTableInfo;
 
-	//////////////////////////////////////////////////////////////////////////////////////
-	// CONSTRUCTORS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	public Model() {
-		mTableInfo = Cache.getTableInfo(getClass());
-		Cache.addEntity(this);
-	}
-
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -60,16 +51,19 @@ public final Long getId() {
 	}
 
 	public final void delete() {
+		onDelete();
 		Model.delete(getClass(), getId());
 		Cache.removeEntity(this);
 	}
 
 	public final void save() {
+		onSave();
+
 		final SQLiteDatabase db = Cache.openDatabase();
 		final ContentValues values = new ContentValues();
 
-		for (Field field : mTableInfo.getFields()) {
-			final String fieldName = mTableInfo.getColumnName(field);
+		for (Field field : getTableInfo().getFields()) {
+			final String fieldName = getTableInfo().getColumnName(field);
 			Class<?> fieldType = field.getType();
 
 			field.setAccessible(true);
@@ -145,12 +139,13 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)){
 		}
 
 		if (mId == null) {
-			mId = db.insert(mTableInfo.getTableName(), null, values);
+			mId = db.insert(getTableInfo().getTableName(), null, values);
 		}
 		else {
-			db.update(mTableInfo.getTableName(), values, "Id=" + mId, null);
+			db.update(getTableInfo().getTableName(), values, "Id=" + mId, null);
 		}
 
+		Cache.addEntity(this);
 		mTableInfo.notifyChanged();
 	}
 
@@ -165,6 +160,10 @@ public static void delete(Class<? extends Model> type, long id) {
 		return new Select().from(type).where("Id=?", id).executeSingle();
 	}
 
+	public static <T extends Model> List<T> all(Class<? extends Model> type) {
+		return new Select().from(type).execute();
+	}
+
 	public static void registerDataSetObserver(Class<? extends Model> type, DataSetObserver observer) {
 		Cache.getTableInfo(type).registerObserver(observer);
 	}
@@ -176,8 +175,8 @@ public static void unregisterDataSetObserver(Class<? extends Model> type, DataSe
 	// Model population
 
 	public final void loadFromCursor(Class<? extends Model> type, Cursor cursor) {
-		for (Field field : mTableInfo.getFields()) {
-			final String fieldName = mTableInfo.getColumnName(field);
+		for (Field field : getTableInfo().getFields()) {
+			final String fieldName = getTableInfo().getColumnName(field);
 			Class<?> fieldType = field.getType();
 			final int columnIndex = cursor.getColumnIndex(fieldName);
 
@@ -257,6 +256,8 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)){
 				if (value != null) {
 					field.set(this, value);
 				}
+
+				Cache.addEntity(this);
 			}
 			catch (IllegalArgumentException e) {
 				Log.e(e.getMessage());
@@ -278,6 +279,18 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)){
 		return new Select().from(type).where(Cache.getTableName(type) + "." + foreignKey + "=?", getId()).execute();
 	}
 
+	/**
+	 * Called before {@link save} does any work.
+	 */
+	protected void onSave(){
+	}
+
+	/**
+	 * Called before {@link delete} does any work.
+	 */
+	protected void onDelete(){
+	}
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// OVERRIDEN METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -286,7 +299,14 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)){
 	public boolean equals(Object obj) {
 		final Model other = (Model) obj;
 
-		return this.mId != null && (this.mTableInfo.getTableName().equals(other.mTableInfo.getTableName()))
+		return this.mId != null && (this.getTableInfo().getTableName().equals(other.getTableInfo().getTableName()))
 				&& (this.mId.equals(other.mId));
 	}
+
+	private TableInfo getTableInfo() {
+		if (mTableInfo == null) {
+			mTableInfo = Cache.getTableInfo(getClass());
+		}
+		return mTableInfo;
+	}
 }
diff --git a/src/com/activeandroid/ModelLoader.java b/src/com/activeandroid/ModelLoader.java
index 0fbfee80..164e6009 100644
--- a/src/com/activeandroid/ModelLoader.java
+++ b/src/com/activeandroid/ModelLoader.java
@@ -1,5 +1,7 @@
 package com.activeandroid;
 
+import java.util.List;
+
 import android.content.Context;
 import android.database.DataSetObserver;
 import android.os.Handler;
@@ -7,8 +9,6 @@
 
 import com.activeandroid.query.From;
 
-import java.util.List;
-
 /**
  * The Class ModelLoader.
  * 
diff --git a/src/com/activeandroid/query/Select.java b/src/com/activeandroid/query/Select.java
index 1d4c6488..9ee4366f 100644
--- a/src/com/activeandroid/query/Select.java
+++ b/src/com/activeandroid/query/Select.java
@@ -16,6 +16,9 @@
  * limitations under the License.
  */
 
+import java.util.Arrays;
+import java.util.List;
+
 import android.text.TextUtils;
 
 import com.activeandroid.Model;
@@ -82,6 +85,9 @@ else if (mAll) {
 		}
 
 		if (mColumns != null && mColumns.length > 0) {
+			if (!isIdOrStarInColumns() && !mDistinct )
+				sql.append("id, ");
+
 			sql.append(TextUtils.join(", ", mColumns) + " ");
 		}
 		else {
@@ -90,4 +96,26 @@ else if (mAll) {
 
 		return sql.toString();
 	}
+	
+	private Boolean isIdOrStarInColumns(){
+		Boolean ret;
+		List<String> cols=Arrays.asList(mColumns);
+		
+		ret=cols.contains("id");
+		
+		if (!ret){
+			ret=cols.contains("*");
+		}
+		
+		if (!ret){
+			for (String col : cols) {
+				if (col.contains("*")){
+					ret=true;
+					break;
+				}
+			}
+		}
+		
+		return ret;				 
+	}
 }
\ No newline at end of file
diff --git a/src/com/activeandroid/query/Set.java b/src/com/activeandroid/query/Set.java
index 7bcbb5f8..aae5d814 100644
--- a/src/com/activeandroid/query/Set.java
+++ b/src/com/activeandroid/query/Set.java
@@ -83,18 +83,20 @@ public void execute() {
 	}
 
 	public String[] getArguments() {
+		int i = 0;
+
 		final int setSize = mSetArguments.size();
 		final int whereSize = mWhereArguments.size();
 		final String[] args = new String[setSize + whereSize];
 
-		for (int i = 0; i < setSize; i++) {
+		for (; i < setSize; i++) {
 			args[i] = mSetArguments.get(i).toString();
 		}
 
-		for (int i = 0; i < whereSize; i++) {
-			args[i] = mWhereArguments.get(i).toString();
+		for (; i < whereSize + setSize; i++) {
+			args[i] = mWhereArguments.get(i - setSize).toString();
 		}
 
 		return args;
 	}
-}
\ No newline at end of file
+}
diff --git a/src/com/activeandroid/widget/ModelAdapter.java b/src/com/activeandroid/widget/ModelAdapter.java
index 70e59913..08a8cf01 100644
--- a/src/com/activeandroid/widget/ModelAdapter.java
+++ b/src/com/activeandroid/widget/ModelAdapter.java
@@ -54,4 +54,4 @@ public long getItemId(int position) {
 			return -1;
 		}
 	}
-}
\ No newline at end of file
+}
diff --git a/tests/project.properties b/tests/project.properties
index a3ee5ab6..5ff58277 100644
--- a/tests/project.properties
+++ b/tests/project.properties
@@ -12,3 +12,4 @@
 
 # Project target.
 target=android-17
+android.library.reference.1=..
diff --git a/tests/src/com/activeandroid/test/ActiveAndroidTestCase.java b/tests/src/com/activeandroid/test/ActiveAndroidTestCase.java
index 3b5fab1f..e7632701 100644
--- a/tests/src/com/activeandroid/test/ActiveAndroidTestCase.java
+++ b/tests/src/com/activeandroid/test/ActiveAndroidTestCase.java
@@ -31,6 +31,7 @@ protected void setUp() throws Exception {
 	}
 
 	protected void tearDown() throws Exception {
+		this.getContext().deleteDatabase("Application.db"); // Ignore return;
 		super.tearDown();
 	}
 
diff --git a/tests/src/com/activeandroid/test/LazyInitializeTest.java b/tests/src/com/activeandroid/test/LazyInitializeTest.java
new file mode 100644
index 00000000..90f6ea4b
--- /dev/null
+++ b/tests/src/com/activeandroid/test/LazyInitializeTest.java
@@ -0,0 +1,21 @@
+package com.activeandroid.test;
+
+import android.test.AndroidTestCase;
+import com.activeandroid.ActiveAndroidNotInitialized;
+
+public class LazyInitializeTest extends AndroidTestCase {
+	public void testInitializeDoesNotThrow() throws Exception {
+		new MockModel();
+	}
+
+	public void testInteractionRequiringDatabaseThrows() {
+		boolean expectedExceptionThrown = false;
+		try {
+			new MockModel().save();
+		} catch (ActiveAndroidNotInitialized e) {
+			expectedExceptionThrown = true;
+		}
+
+		assertTrue(expectedExceptionThrown);
+	}
+}
diff --git a/tests/src/com/activeandroid/test/MockModel.java b/tests/src/com/activeandroid/test/MockModel.java
index 718e945b..348ebf27 100644
--- a/tests/src/com/activeandroid/test/MockModel.java
+++ b/tests/src/com/activeandroid/test/MockModel.java
@@ -18,7 +18,10 @@
 
 import com.activeandroid.Model;
 import com.activeandroid.annotation.Table;
+import com.activeandroid.annotation.Column;
 
 @Table(name = "MockModel")
 public class MockModel extends Model {
+	@Column(name="MockColumn")
+	public int MockColumn;
 }
diff --git a/tests/src/com/activeandroid/test/Model/ModelTest.java b/tests/src/com/activeandroid/test/Model/ModelTest.java
new file mode 100644
index 00000000..66bf579c
--- /dev/null
+++ b/tests/src/com/activeandroid/test/Model/ModelTest.java
@@ -0,0 +1,87 @@
+package com.activeandroid.test.Model;
+
+/*
+ * Copyright (C) 2010 Michael Pardo
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import com.activeandroid.query.Select;
+import com.activeandroid.test.ActiveAndroidTestCase;
+import com.activeandroid.test.MockModel;
+
+public class ModelTest extends ActiveAndroidTestCase {
+	class CallbackMockModel extends MockModel{
+		public Boolean s=false;
+		public Boolean d=false;
+
+		protected void onSave() {s=true;};
+		protected void onDelete() {d=true;};
+	}
+
+	public void testGetIdAfterSave(){
+		MockModel m=new MockModel();
+		m.MockColumn=42;
+		m.save();
+		assertNotNull("getId() returned null after save()",m.getId());
+
+	}
+
+	public void testGetIdAfterSaveAndSelect(){
+		MockModel m=new MockModel();
+		m.MockColumn=42;
+		m.save();
+		MockModel m2=new Select("MockColumn").from(MockModel.class).where("MockColumn=?", 42).executeSingle();
+		assertEquals(42, m2.MockColumn); //Check
+		assertNotNull("getId() returned null after Select(\"MockColumn\")",m2.getId());
+	}
+
+	public void testOnSave(){
+		CallbackMockModel m=new CallbackMockModel();
+		m.MockColumn=42;
+		assertFalse(m.s);
+		m.save();
+		assertTrue(m.s);
+	}
+
+	public void testThrowingOnSave(){
+		ThrowingCallbackMockModel m=new ThrowingCallbackMockModel();
+		m.ThrowExceptions=true;
+		m.MockColumn=42;
+		try{m.save();}
+		catch (RuntimeException e){}
+		assertNull(m.getId());
+	}
+
+	public void testOnDelete(){
+		CallbackMockModel m=new CallbackMockModel();
+		m.MockColumn=42;
+		m.save();
+		assertFalse(m.d);
+		m.delete();
+		assertTrue(m.d);
+	}
+
+	public void testThrowingOnDelete(){
+		ThrowingCallbackMockModel m=new ThrowingCallbackMockModel();
+		m.MockColumn=42;
+		m.save();
+		ThrowingCallbackMockModel m2=new Select("MockColumn").from(ThrowingCallbackMockModel.class).where("MockColumn=?", 42).executeSingle();
+		assertNotNull(m2);
+		m.ThrowExceptions=true;
+		try{m.delete();}
+		catch (RuntimeException e){}
+		m2=new Select("MockColumn").from(ThrowingCallbackMockModel.class).where("MockColumn=?", 42).executeSingle();
+		assertNotNull(m2);
+	}
+}
diff --git a/tests/src/com/activeandroid/test/Model/ThrowingCallbackMockModel.java b/tests/src/com/activeandroid/test/Model/ThrowingCallbackMockModel.java
new file mode 100644
index 00000000..e11c4798
--- /dev/null
+++ b/tests/src/com/activeandroid/test/Model/ThrowingCallbackMockModel.java
@@ -0,0 +1,17 @@
+package com.activeandroid.test.Model;
+
+import com.activeandroid.annotation.Column;
+import com.activeandroid.test.MockModel;
+
+class ThrowingCallbackMockModel extends MockModel{
+	@Column(name="MockColumn")
+	public int MockColumn;
+
+	public boolean ThrowExceptions=false;
+
+	public ThrowingCallbackMockModel() {
+	}
+
+	protected void onSave() {if (ThrowExceptions) throw new RuntimeException();};
+	protected void onDelete() {if (ThrowExceptions) throw new RuntimeException();};
+}
diff --git a/tests/src/com/activeandroid/test/query/SelectTest.java b/tests/src/com/activeandroid/test/query/SelectTest.java
index 73bfe73d..fabce5cd 100644
--- a/tests/src/com/activeandroid/test/query/SelectTest.java
+++ b/tests/src/com/activeandroid/test/query/SelectTest.java
@@ -35,7 +35,7 @@ public void testSelectDistinct() {
 	}
 
 	public void testSelectStringColumns() {
-		assertSqlEquals("SELECT a, b, c ", new Select("a", "b", "c"));
+		assertSqlEquals("SELECT id, a, b, c ", new Select("a", "b", "c"));
 	}
 
 	public void testSelectDistinctColumns() {
@@ -47,4 +47,8 @@ public void testFrom() {
 		assertSqlEquals("SELECT ALL * FROM MockModel",
 				new Select().all().from(MockModel.class));
 	}
+	public void testAutoidWithStars() {
+		assertSqlEquals("SELECT Users.* ", new Select("Users.*"));
+		assertSqlEquals("SELECT * ", new Select("*"));
+	}
 }
diff --git a/tests/src/com/activeandroid/test/query/UpdateTest.java b/tests/src/com/activeandroid/test/query/UpdateTest.java
index 814d34f7..d508fc60 100644
--- a/tests/src/com/activeandroid/test/query/UpdateTest.java
+++ b/tests/src/com/activeandroid/test/query/UpdateTest.java
@@ -55,6 +55,23 @@ public void testUpdateWhereWithArguments() {
 		assertSqlEquals(UPDATE_PREFIX + "SET Id = 5 WHERE Id IN (?, ?, ?) ",
 				set);
 	}
+
+	public void testUpdateWhereWithSetArguments() {
+		Set set = update()
+				.set("Id = ?", 3)
+				.where("Id = ?", 1);
+		assertArrayEquals(set.getArguments(), "3", "1");
+		assertSqlEquals(UPDATE_PREFIX + "SET Id = ? WHERE Id = ? ",
+				set);
+		
+		set = update()
+				.set("Id = ?", 2)
+				.where("Id = ?", 1)
+				.where("Id IN (?, ?, ?)", 5, 4, 3);
+		assertArrayEquals(set.getArguments(), "2", "5", "4", "3");
+		assertSqlEquals(UPDATE_PREFIX + "SET Id = ? WHERE Id IN (?, ?, ?) ",
+				set);
+	}
 	
 	private Update update() {
 		return new Update(MockModel.class);
