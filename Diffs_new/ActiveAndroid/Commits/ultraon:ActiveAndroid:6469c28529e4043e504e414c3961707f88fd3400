diff --git a/src/com/activeandroid/sebbia/DeepModel.java b/src/com/activeandroid/sebbia/DeepModel.java
index b5470eef..c0cf581a 100644
--- a/src/com/activeandroid/sebbia/DeepModel.java
+++ b/src/com/activeandroid/sebbia/DeepModel.java
@@ -11,134 +11,158 @@
 public abstract class DeepModel extends Model implements IDeepModel {
 
     @Override
-    public Long saveDeep() {
+    public final Long saveDeep() {
         return saveDeep(false, null);
     }
 
     @Override
-    public Long saveDeep(final boolean force) {
+    public final Long saveDeep(final boolean force) {
         return saveDeep(force, null);
     }
 
     @Override
-    public Long saveDeep(final boolean force, final IDeepActionHandler deepActionHandler) {
+    public final Long saveDeep(final boolean force, final IDeepActionHandler deepActionHandler) {
         List<Field> fields = getAllModelFields(getClass());
-        for (Field field : fields) {
-            try {
-                Long id = -1l;
-                boolean deep = false;
-                final boolean accessible = field.isAccessible();
-                if (!accessible) field.setAccessible(true);
-                final Object model = field.get(this);
-                if (null == model) continue;
-                Exception ex = null;
+        Long savedId = -1l;
+        try {
+            if (!force) ActiveAndroid.beginTransaction();
+            for (Field field : fields) {
                 try {
-                    if (null != deepActionHandler && model instanceof Model && deepActionHandler.shouldProcess(field.getName(), (Model) model)) {
-                        if (model instanceof DeepModel) {
-                            deep = true;
-                            id = ((IDeepModel) model).saveDeep(force);
+                    Long id = -1l;
+                    boolean deep = false;
+                    final boolean accessible = field.isAccessible();
+                    if (!accessible) field.setAccessible(true);
+                    final Object model = field.get(this);
+                    if (null == model) continue;
+                    Exception ex = null;
+                    try {
+                        if (null != deepActionHandler && model instanceof Model && deepActionHandler.shouldProcess(field.getName(), (Model) model)) {
+                            if (model instanceof DeepModel) {
+                                deep = true;
+                                id = ((IDeepModel) model).saveDeep(force);
+                            } else {
+                                id = ((Model) model).save();
+                            }
+                        } else if (null == deepActionHandler) {
+                            if (model instanceof DeepModel) {
+                                deep = true;
+                                id = ((IDeepModel) model).saveDeep(force);
+                            } else if (model instanceof Model){
+                                id = ((Model) model).save();
+                            }
                         } else {
-                            id = ((Model) model).save();
+                            Log.i("Skipped processing field %s for saving operation", field.getName());
+                            id = 0l;
                         }
-                    } else if (null == deepActionHandler) {
-                        if (model instanceof DeepModel) {
-                            deep = true;
-                            id = ((IDeepModel) model).saveDeep(force);
-                        } else if (model instanceof Model){
-                            id = ((Model) model).save();
-                        }
-                    } else {
-                        Log.i("Skipped processing field %s for saving operation", field.getName());
-                        id = 0l;
-                    }
-                } catch (Exception e) {
-                    ex = e;
-                    Log.e("", e);
-                }
-                if (ex != null) {
-                    if (!accessible) field.setAccessible(false);
-                    if (force) {
-                        Log.e(String.format("Can't save field %s.%s in DB, deep: %b", field.getClass().getSimpleName(), field.getName(), deep), ex);
-                    } else {
-                        final String errMsg = String.format("Can't save field %s.%s in DB, deep: %b", field.getClass().getSimpleName(), field.getName(), deep);
-                        Log.e(errMsg);
-                        throw new RuntimeException(errMsg, ex);
+                    } catch (Exception e) {
+                        ex = e;
+                        Log.e("", e);
                     }
-                } else if (-1l == id) {
-                    if (!accessible) field.setAccessible(false);
-                    if (force) {
-                        Log.e(String.format("Can't save field %s.%s in DB, deep: %b", field.getClass().getSimpleName(), field.getName(), deep));
+                    if (ex != null) {
+                        if (!accessible) field.setAccessible(false);
+                        if (force) {
+                            Log.e(String.format("Can't save field %s.%s in DB, deep: %b", field.getClass().getSimpleName(), field.getName(), deep), ex);
+                        } else {
+                            final String errMsg = String.format("Can't save field %s.%s in DB, deep: %b", field.getClass().getSimpleName(), field.getName(), deep);
+                            Log.e(errMsg);
+                            throw new RuntimeException(errMsg, ex);
+                        }
+                    } else if (-1l == id) {
+                        if (!accessible) field.setAccessible(false);
+                        if (force) {
+                            Log.e(String.format("Can't save field %s.%s in DB, deep: %b", field.getClass().getSimpleName(), field.getName(), deep));
+                        } else {
+                            final String errMsg = String.format("Can't save field %s.%s in DB, deep: %b", field.getClass().getSimpleName(), field.getName(), deep);
+                            Log.e(errMsg);
+                            throw new RuntimeException(errMsg);
+                        }
                     } else {
-                        final String errMsg = String.format("Can't save field %s.%s in DB, deep: %b", field.getClass().getSimpleName(), field.getName(), deep);
-                        Log.e(errMsg);
-                        throw new RuntimeException(errMsg);
+                        if (!accessible) field.setAccessible(false);
+
                     }
-                } else {
-                    if (!accessible) field.setAccessible(false);
+                } catch (IllegalAccessException e) {
+                    Log.e("Can't get field", e);
                 }
-            } catch (IllegalAccessException e) {
-                Log.e("Can't get field", e);
             }
+
+            savedId = this.save();
+            if (!force && savedId > 0) ActiveAndroid.setTransactionSuccessful();
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        } finally {
+            if (!force) ActiveAndroid.endTransaction();
         }
 
-        return this.save();
+        return savedId;
     }
 
     @Override
-    public void deleteDeep() {
-        deleteDeep(false, null);
+    public final int deleteDeep() {
+        return deleteDeep(false, null);
     }
 
     @Override
-    public void deleteDeep(final boolean force) {
-        deleteDeep(force, null);
+    public final int deleteDeep(final boolean force) {
+        return deleteDeep(force, null);
     }
 
     @Override
-    public void deleteDeep(final boolean force, final IDeepActionHandler deepActionHandler) {
+    public final int deleteDeep(final boolean force, final IDeepActionHandler deepActionHandler) {
         List<Field> fields = getAllModelFields(getClass());
-        for (Field field : fields) {
-            try {
-                boolean deep = false;
-                final boolean accessible = field.isAccessible();
-                if (!accessible) field.setAccessible(true);
-                final Object model = field.get(this);
-                if (null == model) continue;
+        int deleted = 0;
+
+        try {
+            if (!force) ActiveAndroid.beginTransaction();
+            for (Field field : fields) {
                 try {
-                    if (null != deepActionHandler && model instanceof Model && deepActionHandler.shouldProcess(field.getName(), (Model) model)) {
-                        if (model instanceof DeepModel) {
-                            deep = true;
-                            ((IDeepModel) model).deleteDeep(force);
+                    boolean deep = false;
+                    final boolean accessible = field.isAccessible();
+                    if (!accessible) field.setAccessible(true);
+                    final Object model = field.get(this);
+                    if (null == model) continue;
+                    try {
+                        if (null != deepActionHandler && model instanceof Model && deepActionHandler.shouldProcess(field.getName(), (Model) model)) {
+                            if (model instanceof DeepModel) {
+                                deep = true;
+                                ((IDeepModel) model).deleteDeep(force);
+                            } else {
+                                ((Model) model).delete();
+                            }
+                        } else if (null == deepActionHandler) {
+                            if (model instanceof IDeepModel) {
+                                deep = true;
+                                ((IDeepModel) model).deleteDeep(force);
+                            } else if (model instanceof Model){
+                                ((Model) model).delete();
+                            }
                         } else {
-                            ((Model) model).delete();
+                            Log.i("Skipped processing field %s for deleting operation", field.getName());
                         }
-                    } else if (null == deepActionHandler) {
-                        if (model instanceof IDeepModel) {
-                            deep = true;
-                            ((IDeepModel) model).deleteDeep(force);
-                        } else if (model instanceof Model){
-                            ((Model) model).delete();
+                    } catch (Exception e) {
+                        if (force) {
+                            Log.e(String.format("Can't delete field %s.%s in DB, deep: %b", field.getClass().getSimpleName(), field.getName(), deep), e);
+                        } else {
+                            final String errMsg = String.format("Can't delete field %s.%s in DB, deep: %b", field.getClass().getSimpleName(), field.getName(), deep);
+                            Log.e(errMsg, e);
+                            throw new RuntimeException(errMsg, e);
                         }
-                    } else {
-                        Log.i("Skipped processing field %s for deleting operation", field.getName());
-                    }
-                } catch (Exception e) {
-                    if (force) {
-                        Log.e(String.format("Can't delete field %s.%s in DB, deep: %b", field.getClass().getSimpleName(), field.getName(), deep), e);
-                    } else {
-                        final String errMsg = String.format("Can't delete field %s.%s in DB, deep: %b", field.getClass().getSimpleName(), field.getName(), deep);
-                        Log.e(errMsg, e);
-                        throw new RuntimeException(errMsg, e);
+                    } finally {
+                        if (!accessible) field.setAccessible(false);
                     }
-                } finally {
-                    if (!accessible) field.setAccessible(false);
+                } catch (IllegalAccessException e) {
+                    Log.e("Can't get field", e);
                 }
-            } catch (IllegalAccessException e) {
-                Log.e("Can't get field", e);
             }
+
+            deleted = this.delete();
+            if (!force) ActiveAndroid.setTransactionSuccessful();
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        } finally {
+            if (!force) ActiveAndroid.endTransaction();
         }
 
-        this.delete();
+        return deleted;
     }
 
     private static List<Field> getAllModelFields(Class<? extends Model> clazz) {
diff --git a/src/com/activeandroid/sebbia/IDeepModel.java b/src/com/activeandroid/sebbia/IDeepModel.java
index 6af11815..dbbd40c3 100644
--- a/src/com/activeandroid/sebbia/IDeepModel.java
+++ b/src/com/activeandroid/sebbia/IDeepModel.java
@@ -9,7 +9,7 @@
     Long saveDeep(boolean force);
     Long saveDeep(boolean force, IDeepActionHandler deepActionHandler);
 
-    void deleteDeep();
-    void deleteDeep(boolean force);
-    void deleteDeep(boolean force, IDeepActionHandler deepActionHandler);
+    int deleteDeep();
+    int deleteDeep(boolean force);
+    int deleteDeep(boolean force, IDeepActionHandler deepActionHandler);
 }
