diff --git a/build.gradle b/build.gradle
index 7d63b25f..7ef2dbfe 100644
--- a/build.gradle
+++ b/build.gradle
@@ -26,6 +26,8 @@ dependencies {
     compile 'com.fasterxml.jackson.core:jackson-core:2.6.0'
     compile 'com.fasterxml.jackson.core:jackson-annotations:2.6.0'
     compile 'com.fasterxml.jackson.core:jackson-databind:2.6.0'
+    // gson
+    //compile 'com.google.code.gson:gson:2.6.2'
 }
 
 android {
diff --git a/src/com/activeandroid/ExtendedModel.java b/src/com/activeandroid/ExtendedModel.java
index 9e960110..a33f86c4 100644
--- a/src/com/activeandroid/ExtendedModel.java
+++ b/src/com/activeandroid/ExtendedModel.java
@@ -4,9 +4,9 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.os.Parcel;
 import android.os.Parcelable;
+
 import com.activeandroid.content.ContentProvider;
 import com.activeandroid.filler.Filler;
-import com.fasterxml.jackson.annotation.JsonIgnore;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
@@ -16,40 +16,22 @@
 import java.util.HashMap;
 
 public abstract class ExtendedModel extends Model implements Parcelable {
-    @JsonIgnore
-    public TableInfo mTableInfo;
-    @JsonIgnore
-    public String idName;
     public static HashMap<Class, ArrayList<Filler>> fastSaveCache = new HashMap<>();
     public static Constructor<ContentValues> contentValuesConstructor;
 
     public ExtendedModel() {
         super();
-        mTableInfo = Cache.getTableInfo(getClass());
-        idName = mTableInfo.getIdName();
     }
 
-
     public ExtendedModel(Long id) {
         this();
         setAaId(id);
     }
 
-    private static Field idField;
-
     public void setAaId(Long id) {
-        try {
-            if (idField == null) {
-                idField = Model.class.getDeclaredField("mId");
-                idField.setAccessible(true);
-            }
-            idField.set(this, id);
-        } catch (Exception e) {
-            throw new RuntimeException("Reflection failed to get the Active Android ID", e);
-        }
+        mId = id;
     }
 
-
     protected Long fastSave() {
         // return super.save();
         HashMap<String, Object> mapValues = new HashMap<>();
diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index a07ace00..72d40105 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -19,15 +19,21 @@
 import android.content.ContentValues;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
+
 import com.activeandroid.content.ContentProvider;
 import com.activeandroid.query.Delete;
 import com.activeandroid.query.Select;
 import com.activeandroid.serializer.TypeSerializer;
 import com.activeandroid.util.Log;
 import com.activeandroid.util.ReflectionUtils;
+import com.fasterxml.jackson.annotation.JsonIgnore;
 
 import java.lang.reflect.Field;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
 
 @SuppressWarnings("unchecked")
 public abstract class Model {
@@ -41,10 +47,12 @@
     // PRIVATE MEMBERS
     //////////////////////////////////////////////////////////////////////////////////////
 
-    private Long mId = null;
+    protected Long mId = null;
 
-    private final TableInfo mTableInfo;
-    private final String idName;
+    @JsonIgnore
+    protected final TableInfo mTableInfo;
+    @JsonIgnore
+    protected final String idName;
     private static Map<String, List<Integer>> columnIndexesCache = new HashMap<String, List<Integer>>();
     private static Map<String, List<Class>> fieldTypesCache = new HashMap<String, List<Class>>();
     protected boolean cacheable = true;
