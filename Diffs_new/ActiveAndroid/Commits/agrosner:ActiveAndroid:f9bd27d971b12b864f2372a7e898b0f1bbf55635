diff --git a/src/main/java/com/activeandroid/manager/SingleDBManager.java b/src/main/java/com/activeandroid/manager/SingleDBManager.java
index 2424cf0f..b64b4c3e 100644
--- a/src/main/java/com/activeandroid/manager/SingleDBManager.java
+++ b/src/main/java/com/activeandroid/manager/SingleDBManager.java
@@ -16,6 +16,7 @@
 import com.activeandroid.runtime.DBRequest;
 import com.activeandroid.runtime.DBRequestInfo;
 import com.activeandroid.runtime.DBRequestQueue;
+import com.activeandroid.util.Log;
 import com.activeandroid.util.ReflectionUtils;
 import com.activeandroid.util.SQLiteUtils;
 
@@ -207,18 +208,29 @@ protected synchronized void processOnForeground(Runnable runnable){
 
 
     public <OBJECT_CLASS extends Model> void addAllInBackground(final Class<OBJECT_CLASS> obClazz, final Object array, final CollectionReceiver<OBJECT_CLASS> collectionReceiver){
-        List<OBJECT_CLASS> objects = new ArrayList<OBJECT_CLASS>();
-        int count = ReflectionUtils.invokeGetSizeOfObject(array);
-        for(int i = 0; i < count;i++){
-            Object getObject = ReflectionUtils.invokeGetMethod(array, i);
-            objects.add(getObject(obClazz, getObject));
-        }
+        processOnBackground(new DBRequest() {
+            @Override
+            public void run() {
+                final List<OBJECT_CLASS> objects = new ArrayList<OBJECT_CLASS>();
+                int count = ReflectionUtils.invokeGetSizeOfObject(array);
+                for(int i = 0; i < count;i++){
+                    Object getObject = ReflectionUtils.invokeGetMethod(array, i);
+                    objects.add(getObject(obClazz, getObject));
+                }
 
-        if(collectionReceiver!=null){
-            collectionReceiver.onCollectionReceived(objects);
-        }
+                if(collectionReceiver!=null){
+                    processOnForeground(new Runnable() {
+                        @Override
+                        public void run() {
+                            collectionReceiver.onCollectionReceived(objects);
+                        }
+                    });
+                }
+
+                getSaveQueue().addAll(objects);
+            }
+        });
 
-        getSaveQueue().addAll(objects);
     }
 
     public <COLLECTION_CLASS extends Collection<OBJECT_CLASS>, OBJECT_CLASS extends Model> void addAllInBackground(final COLLECTION_CLASS collection){
diff --git a/src/main/java/com/activeandroid/runtime/DBBatchSaveQueue.java b/src/main/java/com/activeandroid/runtime/DBBatchSaveQueue.java
index 3f319558..9d3ded40 100644
--- a/src/main/java/com/activeandroid/runtime/DBBatchSaveQueue.java
+++ b/src/main/java/com/activeandroid/runtime/DBBatchSaveQueue.java
@@ -5,6 +5,7 @@
 
 import com.activeandroid.ActiveAndroid;
 import com.activeandroid.Model;
+import com.activeandroid.manager.SingleDBManager;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -45,24 +46,32 @@ public void run() {
         Looper.prepare();
         android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);
         while (true){
-            ArrayList<Model> tmpModels;
+            final ArrayList<Model> tmpModels;
             synchronized (mModels){
                 tmpModels = new ArrayList<Model>(mModels);
                 mModels.clear();
             }
             if(tmpModels.size()>0) {
-                ActiveAndroid.beginTransaction();
-                try {
-                    Log.d("DBBatchSaveQueue", "Executing batch save of: " + tmpModels.size());
-                    for (Model model: tmpModels) {
-                        model.save();
+                //run this on the DBManager thread
+                SingleDBManager.getSharedInstance().getQueue().add(new DBRequest(DBRequestInfo.create("Batch Saving")) {
+                    @Override
+                    public void run() {
+                        long time = System.currentTimeMillis();
+                        ActiveAndroid.beginTransaction();
+                        try {
+                            Log.d("DBBatchSaveQueue", "Executing batch save of: " + tmpModels.size() + " on :" + Thread.currentThread().getName());
+                            for (Model model: tmpModels) {
+                                model.save();
+                            }
+                            ActiveAndroid.setTransactionSuccessful();
+                        } catch (Throwable e) {
+                            throw new RuntimeException(e.getCause());
+                        } finally {
+                            ActiveAndroid.endTransaction();
+                        }
+                        Log.d("DBBatchSaveQueue", "Time took: " + (System.currentTimeMillis() -time));
                     }
-                    ActiveAndroid.setTransactionSuccessful();
-                } catch (Throwable e) {
-                    throw new RuntimeException(e.getCause());
-                } finally {
-                    ActiveAndroid.endTransaction();
-                }
+                });
             }
 
             try {
diff --git a/src/main/java/com/activeandroid/runtime/DBRequestQueue.java b/src/main/java/com/activeandroid/runtime/DBRequestQueue.java
index 031398c3..a0b749c3 100644
--- a/src/main/java/com/activeandroid/runtime/DBRequestQueue.java
+++ b/src/main/java/com/activeandroid/runtime/DBRequestQueue.java
@@ -58,10 +58,8 @@ public void run() {
     }
 
     public void add(DBRequest runnable){
-        synchronized (mQueue){
-            if(!mQueue.contains(runnable)){
-                mQueue.add(runnable);
-            }
+        if(!mQueue.contains(runnable)){
+            mQueue.add(runnable);
         }
     }
 
@@ -70,10 +68,8 @@ public void add(DBRequest runnable){
      * @param runnable
      */
     public void cancel(DBRequest runnable){
-        synchronized (mQueue){
-            if(mQueue.contains(runnable)){
-                mQueue.remove(runnable);
-            }
+        if(mQueue.contains(runnable)){
+            mQueue.remove(runnable);
         }
     }
 
