diff --git a/src/main/java/com/activeandroid/DatabaseHelper.java b/src/main/java/com/activeandroid/DatabaseHelper.java
index f5e75524..481c7d0f 100644
--- a/src/main/java/com/activeandroid/DatabaseHelper.java
+++ b/src/main/java/com/activeandroid/DatabaseHelper.java
@@ -35,7 +35,7 @@
 import java.util.Collections;
 import java.util.List;
 
-public final class DatabaseHelper extends SQLiteOpenHelper {
+public class DatabaseHelper extends SQLiteOpenHelper {
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC CONSTANTS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -129,14 +129,14 @@ public void copyAttachedDatabase(Context context, String databaseName) {
 	// PRIVATE METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	private void executePragmas(SQLiteDatabase db) {
+	protected void executePragmas(SQLiteDatabase db) {
 		if (SQLiteUtils.FOREIGN_KEYS_SUPPORTED) {
 			db.execSQL("PRAGMA foreign_keys=ON;");
 			AALog.i("Foreign Keys supported. Enabling foreign key features.");
 		}
 	}
 
-	private void executeCreate(SQLiteDatabase db) {
+	protected void executeCreate(SQLiteDatabase db) {
 		db.beginTransaction();
 		try {
 			for (TableInfo tableInfo : Cache.getTableInfos()) {
@@ -149,7 +149,7 @@ private void executeCreate(SQLiteDatabase db) {
 		}
 	}
 
-	private boolean executeMigrations(SQLiteDatabase db, int oldVersion, int newVersion) {
+	protected boolean executeMigrations(SQLiteDatabase db, int oldVersion, int newVersion) {
 		boolean migrationExecuted = false;
 		try {
 			final List<String> files = Arrays.asList(Cache.getContext().getAssets().list(MIGRATION_PATH));
@@ -185,7 +185,7 @@ private boolean executeMigrations(SQLiteDatabase db, int oldVersion, int newVers
 		return migrationExecuted;
 	}
 
-	private void executeSqlScript(SQLiteDatabase db, String file) {
+	protected void executeSqlScript(SQLiteDatabase db, String file) {
 		try {
 			final InputStream input = Cache.getContext().getAssets().open(MIGRATION_PATH + "/" + file);
 			final BufferedReader reader = new BufferedReader(new InputStreamReader(input));
diff --git a/src/main/java/com/activeandroid/util/SQLiteUtils.java b/src/main/java/com/activeandroid/util/SQLiteUtils.java
index ac5c8e12..f7489388 100644
--- a/src/main/java/com/activeandroid/util/SQLiteUtils.java
+++ b/src/main/java/com/activeandroid/util/SQLiteUtils.java
@@ -17,7 +17,6 @@
  */
 
 import android.content.ContentValues;
-import android.content.Context;
 import android.database.Cursor;
 import android.database.DatabaseUtils;
 import android.database.sqlite.SQLiteDatabase;
@@ -390,9 +389,13 @@ public static String getWhereFromEntityId(Class<? extends IModel> IModel, String
         return whereString;
     }
 
-    public static void delete(IModel IModel){
+    public static void delete(IModel IModel) {
+        delete(IModel, Cache.openDatabase());
+    }
+
+    public static void delete(IModel IModel, SQLiteDatabase database){
         TableInfo tableInfo = Cache.getTableInfo(IModel.getClass());
-        Cache.openDatabase().delete(tableInfo.getTableName(), SQLiteUtils.getWhereStatement(IModel, tableInfo), null);
+        database.delete(tableInfo.getTableName(), SQLiteUtils.getWhereStatement(IModel, tableInfo), null);
         Cache.removeEntity(IModel);
 
         Cache.getContext().getContentResolver()
@@ -430,9 +433,18 @@ public static void save(IModel iModel) {
      * @param IModel
      * @param mode
      */
-    public static void save(IModel IModel, int mode){
+    public static void save(IModel IModel, int mode) {
+        save(IModel, mode, Cache.openDatabase());
+    }
+
+    /**
+     * Saves the given {@link com.activeandroid.IModel} to the DB.
+     * @param IModel
+     * @param mode
+     * @param db The database to save to
+     */
+    public static void save(IModel IModel, int mode, SQLiteDatabase db){
         TableInfo tableInfo = Cache.getTableInfo(IModel.getClass());
-        final SQLiteDatabase db = Cache.openDatabase();
         final ContentValues values = new ContentValues();
 
         for (Field field : tableInfo.getFields()) {
