diff --git a/libs/android-support-v4.jar b/libs/android-support-v4.jar
index 65ebaf8d..428bdbc0 100644
Binary files a/libs/android-support-v4.jar and b/libs/android-support-v4.jar differ
diff --git a/src/com/activeandroid/ActiveAndroid.java b/src/com/activeandroid/ActiveAndroid.java
index 7bf2578c..78466046 100644
--- a/src/com/activeandroid/ActiveAndroid.java
+++ b/src/com/activeandroid/ActiveAndroid.java
@@ -18,19 +18,22 @@
 
 import android.app.Application;
 import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteTransactionListener;
+import android.os.Build;
 
 import com.activeandroid.util.Log;
 
 public final class ActiveAndroid {
-	//////////////////////////////////////////////////////////////////////////////////////
+	// ////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
+	// ////////////////////////////////////////////////////////////////////////////////////
 
 	public synchronized static void initialize(Application application) {
 		initialize(application, false);
 	}
 
-	public synchronized static void initialize(Application application, boolean loggingEnabled) {
+	public synchronized static void initialize(Application application,
+			boolean loggingEnabled) {
 		setLoggingEnabled(loggingEnabled);
 		Cache.initialize(application);
 	}
@@ -55,6 +58,24 @@ public static void beginTransaction() {
 		Cache.openDatabase().beginTransaction();
 	}
 
+	public static void beginTransactionWithListener(SQLiteTransactionListener transactionListener) {
+		Cache.openDatabase().beginTransactionWithListener(transactionListener);
+	}
+
+	public static void beginTransactionNonExclusive() {
+		if (Build.VERSION.SDK_INT >= 11)
+			Cache.openDatabase().beginTransactionNonExclusive();
+		else
+			beginTransaction();
+	}
+
+	public static void beginTransactionWithListenerNonExclusive(SQLiteTransactionListener transactionListener) {
+		if (Build.VERSION.SDK_INT >= 11)
+			Cache.openDatabase().beginTransactionWithListenerNonExclusive(transactionListener);
+		else
+			beginTransactionWithListener(transactionListener);
+	}
+
 	public static void endTransaction() {
 		Cache.openDatabase().endTransaction();
 	}
diff --git a/src/com/activeandroid/Cache.java b/src/com/activeandroid/Cache.java
index 57a35062..4e95c404 100644
--- a/src/com/activeandroid/Cache.java
+++ b/src/com/activeandroid/Cache.java
@@ -28,29 +28,30 @@
 import com.activeandroid.util.Log;
 
 public final class Cache {
-	//////////////////////////////////////////////////////////////////////////////////////
+	// ////////////////////////////////////////////////////////////////////////////////////
 	// PRIVATE MEMBERS
-	//////////////////////////////////////////////////////////////////////////////////////
+	// ////////////////////////////////////////////////////////////////////////////////////
 
 	private static Context sContext;
 
 	private static ModelInfo sModelInfo;
 	private static DatabaseHelper sDatabaseHelper;
+	private static SQLiteDatabase mDb;
 
 	private static Set<Model> sEntities;
 
 	private static boolean sIsInitialized = false;
 
-	//////////////////////////////////////////////////////////////////////////////////////
+	// ////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
-	//////////////////////////////////////////////////////////////////////////////////////
+	// ////////////////////////////////////////////////////////////////////////////////////
 
 	private Cache() {
 	}
 
-	//////////////////////////////////////////////////////////////////////////////////////
+	// ////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
+	// ////////////////////////////////////////////////////////////////////////////////////
 
 	public static synchronized void initialize(Application application) {
 		if (sIsInitialized) {
@@ -61,7 +62,7 @@ public static synchronized void initialize(Application application) {
 		sContext = application;
 
 		sModelInfo = new ModelInfo(application);
-		sDatabaseHelper = new DatabaseHelper(sContext);
+		sDatabaseHelper = DatabaseHelper.getInstance(sContext);
 
 		sEntities = new HashSet<Model>();
 
@@ -80,7 +81,7 @@ public static synchronized void clear() {
 	public static synchronized void dispose() {
 		checkInitialization();
 		closeDatabase();
-		
+
 		sEntities = null;
 		sModelInfo = null;
 		sDatabaseHelper = null;
@@ -96,7 +97,11 @@ public static synchronized SQLiteDatabase openDatabase() {
 		if (sDatabaseHelper == null) {
 			checkInitialization();
 		}
-		return sDatabaseHelper.getWritableDatabase();
+		
+		if (mDb == null)
+			mDb = sDatabaseHelper.getWritableDatabase();
+		
+		return mDb;
 	}
 
 	public static synchronized void closeDatabase() {
@@ -118,10 +123,12 @@ public static synchronized void addEntity(Model entity) {
 		sEntities.add(entity);
 	}
 
-	public static synchronized Model getEntity(Class<? extends Model> type, long id) {
+	public static synchronized Model getEntity(Class<? extends Model> type,
+			long id) {
 		checkInitialization();
 		for (Model entity : sEntities) {
-			if (entity != null && entity.getClass() != null && entity.getClass() == type && entity.getId() != null
+			if (entity != null && entity.getClass() != null
+					&& entity.getClass() == type && entity.getId() != null
 					&& entity.getId() == id) {
 
 				return entity;
@@ -143,7 +150,8 @@ public static synchronized void removeEntity(Model entity) {
 		return sModelInfo.getTableInfos();
 	}
 
-	public static synchronized TableInfo getTableInfo(Class<? extends Model> type) {
+	public static synchronized TableInfo getTableInfo(
+			Class<? extends Model> type) {
 		checkInitialization();
 		return sModelInfo.getTableInfo(type);
 	}
diff --git a/src/com/activeandroid/DatabaseHelper.java b/src/com/activeandroid/DatabaseHelper.java
index 365c9cbc..c5b719ba 100644
--- a/src/com/activeandroid/DatabaseHelper.java
+++ b/src/com/activeandroid/DatabaseHelper.java
@@ -37,27 +37,39 @@
 import com.activeandroid.util.SQLiteUtils;
 
 public final class DatabaseHelper extends SQLiteOpenHelper {
-	//////////////////////////////////////////////////////////////////////////////////////
+	// ////////////////////////////////////////////////////////////////////////////////////
 	// PRIVATE CONSTANTS
-	//////////////////////////////////////////////////////////////////////////////////////
+	// ////////////////////////////////////////////////////////////////////////////////////
+
+	private static DatabaseHelper mInstance = null;
 
 	private final static String AA_DB_NAME = "AA_DB_NAME";
 	private final static String AA_DB_VERSION = "AA_DB_VERSION";
 
 	private final static String MIGRATION_PATH = "migrations";
 
-	//////////////////////////////////////////////////////////////////////////////////////
+	// ////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
-	//////////////////////////////////////////////////////////////////////////////////////
+	// ////////////////////////////////////////////////////////////////////////////////////
+
+	public static DatabaseHelper getInstance(Context context) {
+		// Use the application context, which will ensure that you
+		// don't accidentally leak an Activity's context.
+		// See this article for more information: http://bit.ly/6LRzfx
+		if (mInstance == null) {
+			mInstance = new DatabaseHelper(context.getApplicationContext());
+		}
+		return mInstance;
+	}
 
-	public DatabaseHelper(Context context) {
+	private DatabaseHelper(Context context) {
 		super(context, getDbName(context), null, getDbVersion(context));
 		copyAttachedDatabase(context);
 	}
 
-	//////////////////////////////////////////////////////////////////////////////////////
+	// ////////////////////////////////////////////////////////////////////////////////////
 	// OVERRIDEN METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
+	// ////////////////////////////////////////////////////////////////////////////////////
 
 	@Override
 	public void onOpen(SQLiteDatabase db) {
@@ -74,17 +86,8 @@ public void onCreate(SQLiteDatabase db) {
 			Log.i("Foreign Keys supported. Enabling foreign key features.");
 		}
 
-		db.beginTransaction();
-
-		try {
-			for (TableInfo tableInfo : Cache.getTableInfos()) {
-				db.execSQL(SQLiteUtils.createTableDefinition(tableInfo));
-			}
-
-			db.setTransactionSuccessful();
-		}
-		finally {
-			db.endTransaction();
+		for (TableInfo tableInfo : Cache.getTableInfos()) {
+			db.execSQL(SQLiteUtils.createTableDefinition(tableInfo));
 		}
 
 		executeMigrations(db, -1, db.getVersion());
@@ -103,9 +106,9 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
 		}
 	}
 
-	//////////////////////////////////////////////////////////////////////////////////////
+	// ////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
+	// ////////////////////////////////////////////////////////////////////////////////////
 
 	public void copyAttachedDatabase(Context context) {
 		String dbName = getDbName(context);
@@ -134,27 +137,29 @@ public void copyAttachedDatabase(Context context) {
 			output.flush();
 			output.close();
 			inputStream.close();
-		}
-		catch (IOException e) {
+		} catch (IOException e) {
 			Log.e("Failed to open file", e);
 		}
 	}
 
-	//////////////////////////////////////////////////////////////////////////////////////
+	// ////////////////////////////////////////////////////////////////////////////////////
 	// PRIVATE METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
+	// ////////////////////////////////////////////////////////////////////////////////////
 
-	private boolean executeMigrations(SQLiteDatabase db, int oldVersion, int newVersion) {
+	private boolean executeMigrations(SQLiteDatabase db, int oldVersion,
+			int newVersion) {
 		boolean migrationExecuted = false;
 		try {
-			final List<String> files = Arrays.asList(Cache.getContext().getAssets().list(MIGRATION_PATH));
+			final List<String> files = Arrays.asList(Cache.getContext()
+					.getAssets().list(MIGRATION_PATH));
 			Collections.sort(files, new NaturalOrderComparator());
 
 			db.beginTransaction();
 			try {
 				for (String file : files) {
 					try {
-						final int version = Integer.valueOf(file.replace(".sql", ""));
+						final int version = Integer.valueOf(file.replace(
+								".sql", ""));
 
 						if (version > oldVersion && version <= newVersion) {
 							executeSqlScript(db, file);
@@ -162,18 +167,15 @@ private boolean executeMigrations(SQLiteDatabase db, int oldVersion, int newVers
 
 							Log.i(file + " executed succesfully.");
 						}
-					}
-					catch (NumberFormatException e) {
+					} catch (NumberFormatException e) {
 						Log.w("Skipping invalidly named file: " + file, e);
 					}
 				}
 				db.setTransactionSuccessful();
-			}
-			finally {
+			} finally {
 				db.endTransaction();
 			}
-		}
-		catch (IOException e) {
+		} catch (IOException e) {
 			Log.e("Failed to execute migrations.", e);
 		}
 
@@ -182,15 +184,16 @@ private boolean executeMigrations(SQLiteDatabase db, int oldVersion, int newVers
 
 	private void executeSqlScript(SQLiteDatabase db, String file) {
 		try {
-			final InputStream input = Cache.getContext().getAssets().open(MIGRATION_PATH + "/" + file);
-			final BufferedReader reader = new BufferedReader(new InputStreamReader(input));
+			final InputStream input = Cache.getContext().getAssets()
+					.open(MIGRATION_PATH + "/" + file);
+			final BufferedReader reader = new BufferedReader(
+					new InputStreamReader(input));
 			String line = null;
 
 			while ((line = reader.readLine()) != null) {
 				db.execSQL(line.replace(";", ""));
 			}
-		}
-		catch (IOException e) {
+		} catch (IOException e) {
 			Log.e("Failed to execute " + file, e);
 		}
 	}
diff --git a/src/com/activeandroid/ModelLoader.java b/src/com/activeandroid/ModelLoader.java
index 164e6009..21f38122 100644
--- a/src/com/activeandroid/ModelLoader.java
+++ b/src/com/activeandroid/ModelLoader.java
@@ -19,13 +19,16 @@
 
 	/** The m data set observer. */
 	private DataSetObserver mDataSetObserver;
-	
+
 	/** The m query. */
 	private From mQuery;
 
 	/** The m results. */
 	private List<T> mResults;
 
+	/** Observer switch */
+	private boolean mUseObserver;
+
 	/**
 	 * Instantiates a new model loader.
 	 * 
@@ -35,8 +38,22 @@
 	 *            the from
 	 */
 	public ModelLoader(Context context, From from) {
+		this(context, false, from);
+	}
+
+	/**
+	 * Instantiates a new model loader.
+	 * 
+	 * @param context
+	 *            the context
+	 * @param boolean the useObserver switch
+	 * @param from
+	 *            the from
+	 */
+	public ModelLoader(Context context, boolean useObserver, From from) {
 		super(context);
-		this.mQuery = from;
+		mUseObserver = useObserver;
+		mQuery = from;
 	}
 
 	/**
@@ -49,28 +66,13 @@ public ModelLoader(Context context, From from) {
 	 */
 	@Override
 	public void deliverResult(List<T> toolData) {
-		if (this.isReset()) {
-			// An async query came in while the loader is stopped. We
-			// don't need the result.
-			if (toolData != null) {
-				this.onReleaseResources(toolData);
-			}
-		}
-		List<T> oldToolData = toolData;
-		this.mResults = toolData;
+		mResults = toolData;
 
-		if (this.isStarted()) {
+		if (isStarted()) {
 			// If the Loader is currently started, we can immediately
 			// deliver its results.
 			super.deliverResult(toolData);
 		}
-
-		// At this point we can release the resources associated with
-		// 'oldApps' if needed; now that the new result is delivered we
-		// know that it is no longer in use.
-		if (oldToolData != null) {
-			this.onReleaseResources(oldToolData);
-		}
 	}
 
 	/**
@@ -82,32 +84,7 @@ public void deliverResult(List<T> toolData) {
 	 */
 	@Override
 	public List<T> loadInBackground() {
-		List<T> results = this.mQuery.execute();
-		return results;
-	}
-
-	/**
-	 * Handles a request to cancel a load.
-	 * 
-	 * @param toolData
-	 *            the tool data
-	 */
-	@Override
-	public void onCanceled(List<T> toolData) {
-		super.onCanceled(toolData);
-		// At this point we can release the resources
-		this.onReleaseResources(toolData);
-	}
-
-	/**
-	 * On release resources.
-	 * 
-	 * @param toolData
-	 *            the tool data
-	 */
-	protected void onReleaseResources(List<T> toolData) {
-		// For a simple List<> there is nothing to do. For something
-		// like a Cursor, we would close it here.
+		return mQuery.execute();
 	}
 
 	/**
@@ -118,19 +95,17 @@ protected void onReset() {
 		super.onReset();
 
 		// Ensure the loader is stopped
-		this.onStopLoading();
+		onStopLoading();
 
-		// At this point we can release the resources associated with 'apps'
+		// At this point we can release the resources associated with the list
 		// if needed.
-		if (this.mResults != null) {
-			this.onReleaseResources(this.mResults);
-			this.mResults = null;
-		}
+		mResults = null;
 
 		// Stop monitoring for changes.
-		if (this.mDataSetObserver != null) {
-			Model.unregisterDataSetObserver(mQuery.getModelType(), this.mDataSetObserver);
-			this.mDataSetObserver = null;
+		if (mDataSetObserver != null) {
+			Model.unregisterDataSetObserver(mQuery.getModelType(),
+					mDataSetObserver);
+			mDataSetObserver = null;
 		}
 	}
 
@@ -139,47 +114,43 @@ protected void onReset() {
 	 */
 	@Override
 	protected void onStartLoading() {
-		if (this.mResults != null) {
+		if (mResults != null) {
 			// If we currently have a result available, deliver it
 			// immediately.
-			this.deliverResult(this.mResults);
+			deliverResult(mResults);
 		}
 
 		// Start watching for changes in the job data.
-		if (this.mDataSetObserver == null) {
-			this.mDataSetObserver = new DataSetObserver() {
+		if (mDataSetObserver == null && mUseObserver) {
+			mDataSetObserver = new DataSetObserver() {
 				@Override
 				public void onChanged() {
 					super.onChanged();
-					
+
 					/*
 					 * It's always a freakin' threading issue, ain't it?
 					 * Directly calling onContentChanged here doesn't seem to
-					 * consistently work, but posting it to the main thread does.
+					 * consistently work, but posting it to the main thread
+					 * does.
 					 */
-					
-					// Get a handler that can be used to post to the main thread
-					Handler mainHandler = new Handler(getContext().getMainLooper());
-
-					Runnable myRunnable = new Runnable() {
-						@Override
-						public void run() {
-							ModelLoader.this.onContentChanged();
-						}
-					};
-					
-					mainHandler.post(myRunnable);
-
+					new Handler(getContext().getMainLooper())
+							.postAtFrontOfQueue(new Runnable() {
+								@Override
+								public void run() {
+									ModelLoader.this.onContentChanged();
+								}
+							});
 				}
 			};
 
-			Model.registerDataSetObserver(mQuery.getModelType(), this.mDataSetObserver);
+			Model.registerDataSetObserver(mQuery.getModelType(),
+					mDataSetObserver);
 		}
 
-		if (this.takeContentChanged() || (this.mResults == null)) {
+		if (takeContentChanged() || mResults == null) {
 			// If the data has changed since the last time it was loaded
 			// or is not currently available, start a load.
-			this.forceLoad();
+			forceLoad();
 		}
 	}
 
@@ -189,7 +160,6 @@ public void run() {
 	@Override
 	protected void onStopLoading() {
 		// Attempt to cancel the current load task if possible.
-		this.cancelLoad();
+		cancelLoad();
 	}
-
 }
diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index 42cf04dd..76a579ac 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -38,9 +38,9 @@
 
 	private Class<? extends Model> mType;
 	private String mTableName;
-	private boolean mHasCompositeKey;
-	private String[] mCompositeKeyColumns;
-	private ConflictAction mOnCompositeKeyConflict;
+	private boolean mUniqueConstraint;
+	private String[] mUniqueConstraintColumns;
+	private ConflictAction mOnUniqueConstraintConflict;
 
 	private Map<Field, String> mColumnNames = new HashMap<Field, String>();
 
@@ -54,9 +54,9 @@ public TableInfo(Class<? extends Model> type) {
 		final Table tableAnnotation = type.getAnnotation(Table.class);
 		if (tableAnnotation != null) {
 			mTableName = tableAnnotation.name();
-			mHasCompositeKey = tableAnnotation.hasCompositeKey();
-			mCompositeKeyColumns = tableAnnotation.compositeKeyColumns();
-			mOnCompositeKeyConflict = tableAnnotation.onCompositeKeyConflict();
+			mUniqueConstraint = tableAnnotation.uniqueConstraint();
+			mUniqueConstraintColumns = tableAnnotation.uniqueConstraintColumns();
+			mOnUniqueConstraintConflict = tableAnnotation.onUniqueConstraintConflict();
 		}
 		else {
 			mTableName = type.getSimpleName();
@@ -85,16 +85,16 @@ public String getTableName() {
 		return mTableName;
 	}
 
-	public boolean hasCompositeKey() {
-		return mHasCompositeKey;
+	public boolean uniqueConstraint() {
+		return mUniqueConstraint;
 	}
 
-	public String[] getCompositeKeyColumns() {
-		return mCompositeKeyColumns;
+	public String[] getUniqueConstraintColumns() {
+		return mUniqueConstraintColumns;
 	}
 
-	public ConflictAction getOnCompositeKeyConflict() {
-		return mOnCompositeKeyConflict;
+	public ConflictAction getOnUniqueConstraintConflict() {
+		return mOnUniqueConstraintConflict;
 	}
 
 	public Collection<Field> getFields() {
diff --git a/src/com/activeandroid/annotation/Table.java b/src/com/activeandroid/annotation/Table.java
index e91a2e49..5e26437e 100644
--- a/src/com/activeandroid/annotation/Table.java
+++ b/src/com/activeandroid/annotation/Table.java
@@ -28,9 +28,9 @@
 public @interface Table {
 	public String name();
 
-	public boolean hasCompositeKey() default false;
+	public boolean uniqueConstraint() default false;
 	
-	public String[] compositeKeyColumns() default {"Id"};
+	public String[] uniqueConstraintColumns() default {};
 
-	public ConflictAction onCompositeKeyConflict() default ConflictAction.FAIL;
+	public ConflictAction onUniqueConstraintConflict() default ConflictAction.FAIL;
 }
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index 2aff9c5f..d8ae9568 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -128,10 +128,10 @@ public static String createTableDefinition(TableInfo tableInfo) {
 		
 		String definitionStr = TextUtils.join(", ", definitions);
 		
-		if (tableInfo.hasCompositeKey()) {
+		if (tableInfo.uniqueConstraint() && tableInfo.getUniqueConstraintColumns().length > 1) {
 			definitionStr += ", UNIQUE(";
-			definitionStr += TextUtils.join(", ", tableInfo.getCompositeKeyColumns());
-			definitionStr += ") ON CONFLICT " + tableInfo.getOnCompositeKeyConflict().toString();
+			definitionStr += TextUtils.join(", ", tableInfo.getUniqueConstraintColumns());
+			definitionStr += ") ON CONFLICT " + tableInfo.getOnUniqueConstraintConflict().toString();
 		}
 		
 		return String.format("CREATE TABLE IF NOT EXISTS %s (%s);", tableInfo.getTableName(),
diff --git a/src/com/activeandroid/widget/ModelAdapter.java b/src/com/activeandroid/widget/ModelAdapter.java
index 08a8cf01..3e3283c2 100644
--- a/src/com/activeandroid/widget/ModelAdapter.java
+++ b/src/com/activeandroid/widget/ModelAdapter.java
@@ -21,17 +21,35 @@ public ModelAdapter(Context context, int textViewResourceId, List<T> objects) {
 		super(context, textViewResourceId, objects);
 	}
 
-	public ModelAdapter(Context context, int resource, int textViewResourceId, List<T> objects) {
+	public ModelAdapter(Context context, int resource, int textViewResourceId,
+			List<T> objects) {
 		super(context, resource, textViewResourceId, objects);
 	}
 
 	/**
 	 * Clears the adapter and, if data != null, fills if with new Items.
 	 * 
-	 * @param collection A Collection<? extends T> which members get added to the adapter.
+	 * @param collection
+	 *            A Collection<? extends T> which members get added to the
+	 *            adapter.
 	 */
 	public void setData(Collection<? extends T> collection) {
-		clear();
+		setData(collection, false);
+	}
+
+	/**
+	 * Clears the adapter and, if data != null, fills if with new Items.
+	 * 
+	 * @param collection
+	 *            A Collection<? extends T> which members get added to the
+	 *            adapter.
+	 * @param append
+	 *            A flag to indicate the current data set should not be cleared
+	 *            adding the new data.
+	 */
+	public void setData(Collection<? extends T> collection, boolean append) {
+		if (collection == null || !append)
+			clear();
 
 		if (collection != null) {
 			for (T item : collection) {
@@ -49,8 +67,7 @@ public long getItemId(int position) {
 
 		if (item != null) {
 			return item.getId();
-		}
-		else {
+		} else {
 			return -1;
 		}
 	}
