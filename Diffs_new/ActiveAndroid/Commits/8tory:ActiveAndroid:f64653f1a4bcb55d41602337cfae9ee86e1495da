diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index abcc04f4..130a2941 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -101,6 +101,10 @@ public ContentValues toContentValues() {
 		for (Field field : mTableInfo.getFields()) {
 			final String fieldName = mTableInfo.getColumnName(field);
 			Class<?> fieldType = field.getType();
+			final Column column = field.getAnnotation(Column.class);
+
+			if (column.readOnly())
+				continue;
 
 			field.setAccessible(true);
 
diff --git a/src/com/activeandroid/annotation/Column.java b/src/com/activeandroid/annotation/Column.java
index 2334aa6e..86b1e852 100644
--- a/src/com/activeandroid/annotation/Column.java
+++ b/src/com/activeandroid/annotation/Column.java
@@ -107,4 +107,6 @@
 	 * Execute CREATE INDEX index_table_name_group2 on table_name(member2, member3)
 	 */
 	public String[] indexGroups() default {};
+
+    public boolean readOnly() default false;
 }
diff --git a/src/com/activeandroid/query/Delete.java b/src/com/activeandroid/query/Delete.java
index 6d19dced..a1ea7579 100644
--- a/src/com/activeandroid/query/Delete.java
+++ b/src/com/activeandroid/query/Delete.java
@@ -26,8 +26,12 @@ public From from(Class<? extends Model> table) {
 		return new From(table, this);
 	}
 
+	public From from(Class<? extends Model> table, String from) {
+		return new From(table, this, from);
+	}
+
 	@Override
 	public String toSql() {
 		return "DELETE ";
 	}
-}
\ No newline at end of file
+}
diff --git a/src/com/activeandroid/query/From.java b/src/com/activeandroid/query/From.java
index cca199b2..bc8a164e 100644
--- a/src/com/activeandroid/query/From.java
+++ b/src/com/activeandroid/query/From.java
@@ -38,6 +38,7 @@
 	private Class<? extends Model> mType;
 	private String mAlias;
 	private List<Join> mJoins;
+	private String mFrom;
 	private String mWhere;
 	private String mGroupBy;
 	private String mHaving;
@@ -52,7 +53,17 @@
 	private List<Object> mArguments;
 
 	public From(Class<? extends Model> table, Sqlable queryBase) {
+		this(table, queryBase, null);
+	}
+
+	public From(Class<? extends Model> table, Sqlable queryBase, String from) {
 		mType = table;
+
+		if (from != null)
+			mFrom = from;
+		else
+			mFrom = Cache.getTableName(mType);
+
 		mJoins = new ArrayList<Join>();
 		mQueryBase = queryBase;
 
@@ -178,7 +189,7 @@ public String toSql() {
 		StringBuilder sql = new StringBuilder();
 		sql.append(mQueryBase.toSql());
 		sql.append("FROM ");
-		sql.append(Cache.getTableName(mType)).append(" ");
+		sql.append(mFrom).append(" ");
 
 		if (mAlias != null) {
 			sql.append("AS ");
diff --git a/src/com/activeandroid/query/Select.java b/src/com/activeandroid/query/Select.java
index 41ba0b7c..947f4013 100644
--- a/src/com/activeandroid/query/Select.java
+++ b/src/com/activeandroid/query/Select.java
@@ -40,8 +40,8 @@ public Select(Map<String, String> map) {
 	}
 
 	private static List<Column> mapToColumns(Map<String, String> map) {
-		if (map == null) return null;
 		List<Column> columns = new ArrayList<Column>();
+		if (map == null) return columns;
 		for (Map.Entry<String, String> entry : map.entrySet()) {
 			columns.add(new Column(entry.getValue(), entry.getKey()));
 		}
@@ -74,6 +74,10 @@ public From from(Class<? extends Model> table) {
 		return new From(table, this);
 	}
 
+	public From from(Class<? extends Model> table, String from) {
+		return new From(table, this, from);
+	}
+
 	public static class Column {
 		String name;
 		String alias;
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index 3d36546e..b80ddd84 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -246,6 +246,9 @@ public static String createColumnDefinition(TableInfo tableInfo, Field field) {
 		final TypeSerializer typeSerializer = Cache.getParserForType(field.getType());
 		final Column column = field.getAnnotation(Column.class);
 
+		if (column.readOnly())
+			return definition.toString();
+
 		if (typeSerializer != null) {
 			type = typeSerializer.getSerializedType();
 		}
