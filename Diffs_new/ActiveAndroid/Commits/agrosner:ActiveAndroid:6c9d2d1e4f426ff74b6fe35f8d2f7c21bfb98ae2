diff --git a/src/main/java/com/activeandroid/Model.java b/src/main/java/com/activeandroid/Model.java
index 3961fe67..756435dc 100644
--- a/src/main/java/com/activeandroid/Model.java
+++ b/src/main/java/com/activeandroid/Model.java
@@ -91,7 +91,7 @@ public String getTableName() {
     }
 
     @Override
-    public Class<?> getModelClass() {
+    public Class<? extends IModelInfo> getModelClass() {
         return getClass();
     }
 }
diff --git a/src/main/java/com/activeandroid/serializer/ClassSerializer.java b/src/main/java/com/activeandroid/serializer/ClassSerializer.java
index 3f04f4ee..9238e004 100644
--- a/src/main/java/com/activeandroid/serializer/ClassSerializer.java
+++ b/src/main/java/com/activeandroid/serializer/ClassSerializer.java
@@ -47,7 +47,7 @@ public void serializeField(ContentValues contentValues, OBJECT_CLASS object, int
     }
 
     public Object getFieldValue(OBJECT_CLASS object, int position){
-        TableInfo tableInfo = Cache.getTableInfo(object.getClass());
+        TableInfo tableInfo = Cache.getTableInfo(object.getModelClass());
         Field field = tableInfo.getFields()[position];
         field.setAccessible(true);
 
@@ -113,12 +113,17 @@ public String getPrimaryFieldName(Class<? extends IModelInfo> iModelInfo, int po
         return tableInfo.getColumnName(tableInfo.getPrimaryKeys().get(position));
     }
 
+    public String getActualPrimaryFieldName(Class<? extends IModelInfo> iModelInfo, int position){
+        TableInfo tableInfo = Cache.getTableInfo(iModelInfo);
+        return tableInfo.getPrimaryKeys().get(position).getName();
+    }
+
     public int getPrimaryFieldCount(Class<? extends IModelInfo> iModelInfo){
         return Cache.getTableInfo(iModelInfo).getPrimaryKeys().size();
     }
 
     public Class<?> getFieldType(OBJECT_CLASS iModelInfo, int position){
-        return Cache.getTableInfo(iModelInfo.getClass()).getFields()[position].getType();
+        return Cache.getTableInfo(iModelInfo.getModelClass()).getFields()[position].getType();
     }
 
     public void applyPrimaryKeys(OBJECT_CLASS model){
@@ -151,4 +156,15 @@ public void setField(int position, OBJECT_CLASS iModelInfo, Object value){
     }
 
     public abstract Class<?> getTableType();
+
+    public Object getPrimaryFieldValue(OBJECT_CLASS iModelInfo, int position, String primaryFieldName) {
+        Object value = null;
+        try {
+            Field field = Cache.getTableInfo(iModelInfo.getModelClass()).getPrimaryKeys().get(position);
+            field.setAccessible(true);
+            value = field.get(iModelInfo);
+        } catch (IllegalAccessException e) {
+        }
+        return value;
+    }
 }
diff --git a/src/main/java/com/activeandroid/util/SQLiteUtils.java b/src/main/java/com/activeandroid/util/SQLiteUtils.java
index 3421627f..8d627b89 100644
--- a/src/main/java/com/activeandroid/util/SQLiteUtils.java
+++ b/src/main/java/com/activeandroid/util/SQLiteUtils.java
@@ -294,33 +294,32 @@ public static String getWhereStatement(ClassSerializer classSerializer, IModelIn
 
         final StringBuilder where = new StringBuilder();
         for(int i = 0 ; i < count; i++){
-            where.append(classSerializer.getPrimaryFieldName(model.getModelClass(), i));
-            where.append("=?");
-
-            if(i < count-1){
-                where.append(" AND ");
-            }
-        }
-
-        String sql = where.toString();
-
-        for(int i = 0; i < count; i++){
             try {
-                Object object = classSerializer.getFieldValue(model, i);
-                if(object==null){
-                    throw new PrimaryKeyCannotBeNullException("The primary key: " + classSerializer.getPrimaryFieldName(model.getModelClass(), i) + "from " + model.getTableName()+ " cannot be null.");
-                } else if(object instanceof Number){
-                    sql = sql.replaceFirst("\\?", object.toString());
+                String actualName = classSerializer.getActualPrimaryFieldName(model.getModelClass(), i);
+                String primaryName = classSerializer.getPrimaryFieldName(model.getModelClass(), i);
+                Object object = classSerializer.getPrimaryFieldValue(model, i, actualName);
+                where.append(primaryName);
+                where.append("=");
+
+                if (object == null) {
+                    throw new PrimaryKeyCannotBeNullException("The primary key: " + actualName + "from " + model.getTableName() + " cannot be null.");
+                } else if (object instanceof Number) {
+                    where.append(object.toString());
                 } else {
                     String escaped = DatabaseUtils.sqlEscapeString(object.toString());
 
-                    sql = sql.replaceFirst("\\?", escaped);
+                    where.append(escaped);
                 }
-            } catch (Throwable e) {
+
+                if (i < count - 1) {
+                    where.append(" AND ");
+                }
+            } catch (Throwable e){
                 throw new RuntimeException(e);
             }
         }
-        return sql;
+
+        return where.toString();
     }
 
     public static String getWhereFromEntityId(IModelInfo model, String entityId){
@@ -368,15 +367,19 @@ public static void save(ClassSerializer serializer, IModelInfo model){
             serializer.serializeField(values, model, i);
         }
 
-        if(!model.exists()){
-            model.setRowId(db.insert(model.getTableName(), null, values));
-            serializer.applyPrimaryKeys(model);
-        } else {
-            model.setRowId(db.update(model.getTableName(), values, SQLiteUtils.getWhereStatement(serializer, model), null));
-        }
+        if(values.size()>0) {
+            if (!model.exists()) {
+                model.setRowId(db.insert(model.getTableName(), null, values));
+                serializer.applyPrimaryKeys(model);
+            } else {
+                model.setRowId(db.update(model.getTableName(), values, SQLiteUtils.getWhereStatementWithoutValues(serializer, model.getModelClass()), null));
+            }
 
-        Cache.getContext().getContentResolver()
-                .notifyChange(ContentProvider.createUri(serializer.getTableType(model), model.getId()), null);
+            Cache.getContext().getContentResolver()
+                    .notifyChange(ContentProvider.createUri(serializer.getTableType(model), model.getId()), null);
+        } else{
+            AALog.e("SQLiteUtils", "IModelInfo: " + model.getClass() + " for class serializer: " + serializer.getClass() + " had empty content values");
+        }
     }
 
     public static final void loadFromCursor(Cursor cursor, IModelInfo model, ClassSerializer classSerializer){
@@ -447,9 +450,6 @@ public static Object getTypeSerializedValue(Object outValue){
                                 typeSerializer.getSerializedType(), fieldType));
                     }
                 }
-            } else if(IModelInfo.class.isAssignableFrom(fieldType)){
-                IModelInfo iModelInfo = (IModelInfo) outValue;
-                iModelInfo.save();
             }
         }
         return outValue;
@@ -463,22 +463,22 @@ public static void applyToContentValues(ContentValues values, Object value, Stri
                 values.putNull(fieldName);
             }
             else if (fieldType.equals(Byte.class) || fieldType.equals(byte.class)) {
-                values.put(fieldName, (Byte) value);
+                values.put(fieldName, ((Number) value).byteValue());
             }
             else if (fieldType.equals(Short.class) || fieldType.equals(short.class)) {
-                values.put(fieldName, (Short) value);
+                values.put(fieldName, ((Number) value).shortValue());
             }
             else if (fieldType.equals(Integer.class) || fieldType.equals(int.class)) {
-                values.put(fieldName, (Integer) value);
+                values.put(fieldName, ((Number) value).intValue());
             }
             else if (fieldType.equals(Long.class) || fieldType.equals(long.class)) {
-                values.put(fieldName, (Long) value);
+                values.put(fieldName, ((Number) value).longValue());
             }
             else if (fieldType.equals(Float.class) || fieldType.equals(float.class)) {
-                values.put(fieldName, (Float) value);
+                values.put(fieldName, ((Number) value).floatValue());
             }
             else if (fieldType.equals(Double.class) || fieldType.equals(double.class)) {
-                values.put(fieldName, (Double) value);
+                values.put(fieldName, ((Number) value).doubleValue());
             }
             else if (fieldType.equals(Boolean.class) || fieldType.equals(boolean.class)) {
                 values.put(fieldName, (Boolean) value);
