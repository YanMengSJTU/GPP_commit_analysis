diff --git a/src/com/activeandroid/manager/DBManager.java b/src/com/activeandroid/manager/DBManager.java
index 1afb73ab..aaf5f8ef 100644
--- a/src/com/activeandroid/manager/DBManager.java
+++ b/src/com/activeandroid/manager/DBManager.java
@@ -11,6 +11,7 @@
 import com.activeandroid.interfaces.CollectionReceiver;
 import com.activeandroid.interfaces.ObjectReceiver;
 import com.activeandroid.runtime.DBRequest;
+import com.activeandroid.runtime.DBRequestInfo;
 import com.activeandroid.runtime.DBRequestQueue;
 import com.activeandroid.util.SQLiteUtils;
 
@@ -57,16 +58,6 @@ public OBJECT_CLASS add(JSONObject object){
         return add(mObjectClass, object);
     }
 
-    /**
-     * Adds an object to the DB in the BG
-     * @param jsonObject
-     * @param objectReceiver
-     * @param priority
-     */
-    public void addInBackground(final JSONObject jsonObject, final ObjectReceiver<OBJECT_CLASS> objectReceiver, final int priority){
-        addInBackground(mObjectClass, jsonObject, objectReceiver, priority);
-    }
-
     /**
      * Adds all objects from the passed jsonarray, may NOT be type-safe so be careful with this
      * @param array
@@ -75,12 +66,8 @@ public void addAll(JSONArray array){
         addAll(mObjectClass, array);
     }
 
-    public void addAllInBackground(final JSONArray array, final Runnable finishedRunnable, String tag, int priority){
-        addAllInBackground(mObjectClass, array, finishedRunnable, tag, priority);
-    }
-
-    public void addAllInBackground(final JSONArray array, final Runnable finishedRunnable, String tag){
-        addAllInBackground(array, finishedRunnable, tag, DBRequest.PRIORITY_LOW);
+    public void addAllInBackground(final JSONArray array, final Runnable finishedRunnable, DBRequestInfo requestInfo){
+        addAllInBackground(mObjectClass, array, finishedRunnable, requestInfo);
     }
 
     /**
diff --git a/src/com/activeandroid/manager/SingleDBManager.java b/src/com/activeandroid/manager/SingleDBManager.java
index 257cd5e7..652e98da 100644
--- a/src/com/activeandroid/manager/SingleDBManager.java
+++ b/src/com/activeandroid/manager/SingleDBManager.java
@@ -13,6 +13,7 @@
 import com.activeandroid.interfaces.CollectionReceiver;
 import com.activeandroid.interfaces.ObjectReceiver;
 import com.activeandroid.runtime.DBRequest;
+import com.activeandroid.runtime.DBRequestInfo;
 import com.activeandroid.runtime.DBRequestQueue;
 import com.activeandroid.util.SQLiteUtils;
 
@@ -20,6 +21,7 @@
 import org.json.JSONObject;
 
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.List;
 
 /**
@@ -102,10 +104,10 @@ protected synchronized void processOnForeground(Runnable runnable){
      * Adds an object to the DB in the BG
      * @param jsonObject
      * @param objectReceiver
-     * @param priority
+     * @param dbRequestInfo
      */
-    public <OBJECT_CLASS extends Model> void addInBackground(final Class<OBJECT_CLASS> obClazz, final JSONObject jsonObject, final ObjectReceiver<OBJECT_CLASS> objectReceiver, final int priority){
-        processOnBackground(new DBRequest(priority, "add") {
+    public <OBJECT_CLASS extends Model> void addInBackground(final Class<OBJECT_CLASS> obClazz, final JSONObject jsonObject, final ObjectReceiver<OBJECT_CLASS> objectReceiver, DBRequestInfo dbRequestInfo){
+        processOnBackground(new DBRequest(dbRequestInfo) {
             @Override
             public void run() {
                 final OBJECT_CLASS object = add(obClazz, jsonObject);
@@ -119,26 +121,6 @@ public void run() {
         });
     }
 
-    /**
-     * Adds an object to the DB in the BG
-     * @param objectReceiver
-     * @param priority
-     */
-    public <OBJECT_CLASS extends Model> void addInBackground(final OBJECT_CLASS inObject, final ObjectReceiver<OBJECT_CLASS> objectReceiver, final int priority){
-        processOnBackground(new DBRequest(priority, "add") {
-            @Override
-            public void run() {
-                final OBJECT_CLASS object = add(inObject);
-                processOnForeground(new Runnable() {
-                    @Override
-                    public void run() {
-                        objectReceiver.onObjectReceived(object);
-                    }
-                });
-            }
-        });
-    }
-
     /**
      * Adds all objects to the DB
      * @param objects
@@ -175,8 +157,8 @@ public void run() {
 
     }
 
-    public <OBJECT_CLASS extends Model> void addAllInBackground(final Class<OBJECT_CLASS> obClazz, final JSONArray array, final Runnable finishedRunnable, String tag, int priority){
-        processOnBackground(new DBRequest(priority, "add "+ tag) {
+    public <OBJECT_CLASS extends Model> void addAllInBackground(final Class<OBJECT_CLASS> obClazz, final JSONArray array, final Runnable finishedRunnable, DBRequestInfo dbRequestInfo){
+        processOnBackground(new DBRequest(dbRequestInfo) {
             @Override
             public void run() {
                 addAll(obClazz, array);
@@ -187,25 +169,6 @@ public void run() {
         });
     }
 
-    public <OBJECT_CLASS extends Model> void addAllInBackground(final Class<OBJECT_CLASS> obClass, final JSONArray array, final Runnable finishedRunnable, String tag){
-        addAllInBackground(obClass, array, finishedRunnable, tag, DBRequest.PRIORITY_LOW);
-    }
-
-
-    public <OBJECT_CLASS extends Model, LIST_CLASS extends List<OBJECT_CLASS>> void addAllInBackground(final LIST_CLASS objects, final Runnable finishedRunnable, String tag, int priority) {
-        processOnBackground(new DBRequest(priority, "add "+ tag) {
-            @Override
-            public void run() {
-                addAll(objects);
-
-                if(finishedRunnable!=null)
-                    processOnForeground(finishedRunnable);
-            }
-        });
-    }
-
-
-
     /**
      * Retrieves a list of objects from the database without any threading
      * Its recommended not to call this method in the foreground thread
@@ -230,7 +193,7 @@ public void run() {
      * @param receiver - function to call when finished that passes the list of objects that was found
      */
     public <OBJECT_CLASS extends Model> void fetchAll(final Class<OBJECT_CLASS> obClazz, final CollectionReceiver<OBJECT_CLASS> receiver){
-        processOnBackground(new DBRequest(DBRequest.PRIORITY_UI, "fetch") {
+        processOnBackground(new DBRequest(DBRequestInfo.createFetch()) {
             @Override
             public void run() {
                 final List<OBJECT_CLASS> list = getAll(obClazz);
@@ -250,7 +213,7 @@ public void run() {
      * @param receiver - function to call when finished that passes the list of objects that was found
      */
     public <OBJECT_CLASS extends Model> void fetchAllWithSort(final Class<OBJECT_CLASS> obClazz, final String sort, final CollectionReceiver<OBJECT_CLASS> receiver){
-        processOnBackground(new DBRequest(DBRequest.PRIORITY_UI, "fetch") {
+        processOnBackground(new DBRequest(DBRequestInfo.createFetch()) {
             @Override
             public void run() {
                 final List<OBJECT_CLASS> list = getAllWithSort(obClazz, sort);
@@ -265,7 +228,7 @@ public void run() {
     };
 
     public <OBJECT_CLASS extends Model> void fetchAllWithColumnValue(final Class<OBJECT_CLASS> obClazz, final Object value, final String column, final CollectionReceiver<OBJECT_CLASS> receiver){
-        processOnBackground(new DBRequest(DBRequest.PRIORITY_UI, "fetch") {
+        processOnBackground(new DBRequest(DBRequestInfo.create("fetch" , DBRequest.PRIORITY_UI)) {
             @Override
             public void run() {
                 final List<OBJECT_CLASS> list = getAllWithColumnValue(obClazz, column, value);
@@ -332,7 +295,7 @@ public long getCount(final Class<? extends Model> obClazz){
      * @param objectReceiver
      */
     public <OBJECT_CLASS extends Model> void fetchCount(final Class<OBJECT_CLASS> obclazz, final ObjectReceiver<Long> objectReceiver){
-        processOnBackground(new DBRequest(DBRequest.PRIORITY_UI) {
+        processOnBackground(new DBRequest(DBRequestInfo.createFetch()) {
             @Override
             public void run() {
                 processOnForeground(new Runnable() {
@@ -346,7 +309,7 @@ public void run() {
     }
 
     /**
-     * Will return the object if its within the DB, if not, it will call upon an object requester to get the data from the API
+     * Will return the object if its within the DB, if not, it will call upon an {@link com.activeandroid.interfaces.ObjectRequester} to get the data from the API
      *
      * @param objectReceiver
      * @param uid
@@ -368,7 +331,7 @@ public void run() {
         }
     }
     /**
-     * Will return the object if its within the DB, if not, it will call upon an object requester to get the data from the API
+     * Will return the object if its within the DB, if not, it will not call an{@link com.activeandroid.interfaces.ObjectRequester}
      *
      * @param objectReceiver
      * @param uid
@@ -378,6 +341,16 @@ public void run() {
        return fetchObject(obClazz, null, objectReceiver, uid);
     }
 
+
+    /**
+     * Deletes all objects from the specified table
+     * @param obClazz
+     * @param <OBJECT_CLASS>
+     */
+    public <OBJECT_CLASS extends Model> void deleteAll(Class<OBJECT_CLASS> obClazz){
+        new Delete().from(obClazz).execute();
+    }
+
     /**
      * Deletes objects from the db
      * @param <OBJECT_CLASS>
@@ -395,53 +368,30 @@ public void run() {
     }
 
     /**
-     * Deletes objects from the db
-     * @param finishedRunnable
-     * @param tag
-     * @param priority
-     * @param objects
-     * @param <OBJECT_CLASS>
-     */
-    public<OBJECT_CLASS extends Model> void deleteAllInBackground(final Runnable finishedRunnable, String tag, int priority, final OBJECT_CLASS...objects) {
-        processOnBackground(new DBRequest(priority, tag) {
-            @Override
-            public void run() {
-                deleteAll(objects);
-                if(finishedRunnable!=null){
-                    finishedRunnable.run();
-                }
-            }
-        });
-    }
-
-    /**
-     * Deletes objects from the db
-     * @param finishedRunnable
-     * @param tag
-     * @param objects
-     * @param <OBJECT_CLASS>
+     * Deletes all objects from the collection specified
+     * @param list - the list of model objects you wish to delete
      */
-    public<OBJECT_CLASS extends Model> void deleteAllInBackground(final Runnable finishedRunnable, String tag, final OBJECT_CLASS...objects) {
-        processOnBackground(new DBRequest(DBRequest.PRIORITY_LOW, tag) {
-            @Override
-            public void run() {
-                deleteAll(objects);
-                if(finishedRunnable!=null){
-                    finishedRunnable.run();
-                }
+    public <COLLECTION_CLASS extends Collection<OBJECT_CLASS>, OBJECT_CLASS extends Model> void deleteAll(COLLECTION_CLASS objects) {
+        ActiveAndroid.beginTransaction();
+        try{
+            for(OBJECT_CLASS object: objects){
+                object.delete();
             }
-        });
+            ActiveAndroid.setTransactionSuccessful();
+        } finally {
+            ActiveAndroid.endTransaction();
+        }
     }
 
     /**
      * Deletes objects from the db
      * @param finishedRunnable
-     * @param priority
+     * @param dbRequestInfo
      * @param objects
      * @param <OBJECT_CLASS>
      */
-    public<OBJECT_CLASS extends Model> void deleteAllInBackground(final Runnable finishedRunnable, int priority, final OBJECT_CLASS...objects) {
-        processOnBackground(new DBRequest(priority) {
+    public<LIST_CLASS extends List<OBJECT_CLASS>, OBJECT_CLASS extends Model> void deleteAllInBackground(final Runnable finishedRunnable, DBRequestInfo dbRequestInfo, final LIST_CLASS objects) {
+        processOnBackground(new DBRequest(dbRequestInfo) {
             @Override
             public void run() {
                 deleteAll(objects);
@@ -455,11 +405,12 @@ public void run() {
     /**
      * Deletes objects from the db
      * @param finishedRunnable
+     * @param dbRequestInfo
      * @param objects
      * @param <OBJECT_CLASS>
      */
-    public<OBJECT_CLASS extends Model> void deleteAllInBackground(final Runnable finishedRunnable, final OBJECT_CLASS...objects) {
-        processOnBackground(new DBRequest() {
+    public<OBJECT_CLASS extends Model> void deleteAllInBackground(final Runnable finishedRunnable, DBRequestInfo dbRequestInfo, final OBJECT_CLASS...objects) {
+        processOnBackground(new DBRequest(dbRequestInfo) {
             @Override
             public void run() {
                 deleteAll(objects);
@@ -469,29 +420,4 @@ public void run() {
             }
         });
     }
-
-    /**
-     * Deletes all objects from the specified table
-     * @param obClazz
-     * @param <OBJECT_CLASS>
-     */
-    public <OBJECT_CLASS extends Model> void deleteAll(Class<OBJECT_CLASS> obClazz){
-        new Delete().from(obClazz).execute();
-    }
-
-    /**
-     * Deletes all objects from the list specified
-     * @param list - the list of model objects you wish to delete
-     */
-    public <OBJECT_CLASS extends Model, LIST_CLASS extends List<OBJECT_CLASS>> void deleteAll(LIST_CLASS list){
-        ActiveAndroid.beginTransaction();
-        try{
-            for(OBJECT_CLASS object: list){
-                object.delete();
-            }
-            ActiveAndroid.setTransactionSuccessful();
-        } finally {
-            ActiveAndroid.endTransaction();
-        }
-    }
 }
diff --git a/src/com/activeandroid/runtime/DBRequest.java b/src/com/activeandroid/runtime/DBRequest.java
index d05620c7..c542c302 100644
--- a/src/com/activeandroid/runtime/DBRequest.java
+++ b/src/com/activeandroid/runtime/DBRequest.java
@@ -42,49 +42,29 @@
 
     public abstract void run();
 
-    /**
-     * The higher the number, the faster the request will be processed,
-     * default is PRIORITY_LOW
-     */
-    private int priority = PRIORITY_LOW;
-
-    /**
-     * Give this request a name
-     */
-    private String name;
-
-    /**
-     * Constructs a new instance specifying a priority and name
-     * @param priority
-     * @param name
-     */
-    public DBRequest(int priority, String name){
-        this.priority = priority;
-        this.name = name;
-    }
+    private DBRequestInfo mInfo;
 
     /**
-     * Constructs a new instance with a priority and UUID for the name
-     * @param priority
+     * Constructs this class using the specified DBRequest info
+     * @param dbRequestInfo
      */
-    public DBRequest(int priority){
-        this.priority = priority;
-        this.name = UUID.randomUUID().toString();
+    public DBRequest(DBRequestInfo dbRequestInfo) {
+        mInfo = dbRequestInfo;
     }
 
     /**
      * Creates a new, low priority request
      */
     public DBRequest(){
-        this.name = UUID.randomUUID().toString();
+        mInfo = DBRequestInfo.create();
     }
 
     @Override
     public int compareTo(DBRequest another) {
-        return another.priority - priority;
+        return another.mInfo.getPriority() - mInfo.getPriority();
     }
 
     public String getName() {
-        return name;
+        return mInfo.getName();
     }
 }
diff --git a/src/com/activeandroid/runtime/DBRequestInfo.java b/src/com/activeandroid/runtime/DBRequestInfo.java
new file mode 100644
index 00000000..b76f54fd
--- /dev/null
+++ b/src/com/activeandroid/runtime/DBRequestInfo.java
@@ -0,0 +1,89 @@
+package com.activeandroid.runtime;
+
+import java.util.UUID;
+
+/**
+ * Created by andrewgrosner
+ * Date: 2/2/14
+ * Contributors:
+ * Description: Holds information related to a {@link com.activeandroid.runtime.DBRequest}
+ */
+public class DBRequestInfo {
+
+    private String name;
+
+    private int priority;
+
+    private DBRequestInfo(){
+    }
+
+    /**
+     * Creates with a name and priority
+     * @param name
+     * @param priority
+     * @return
+     */
+    public static DBRequestInfo create(String name, int priority){
+        DBRequestInfo requestInfo = new DBRequestInfo();
+        requestInfo.name = name;
+        requestInfo.priority = priority;
+        return requestInfo;
+    }
+
+    /**
+     * Creates with a name and default {@link com.activeandroid.runtime.DBRequest#PRIORITY_NORMAL}
+     * @param name
+     * @return
+     */
+    public static DBRequestInfo create(String name){
+        DBRequestInfo requestInfo = new DBRequestInfo();
+        requestInfo.name = name;
+        requestInfo.priority = DBRequest.PRIORITY_NORMAL;
+        return requestInfo;
+    }
+
+    /**
+     * Creates with a priority and name generated from {@link java.util.UUID#randomUUID()}
+     * @param priority
+     * @return
+     */
+    public static DBRequestInfo create(int priority){
+        DBRequestInfo requestInfo = new DBRequestInfo();
+        requestInfo.name = UUID.randomUUID().toString();
+        requestInfo.priority = priority;
+        return requestInfo;
+    }
+
+    /**
+     * Creates with a priority and name generated from {@link java.util.UUID#randomUUID()} and {@link com.activeandroid.runtime.DBRequest#PRIORITY_NORMAL}
+     * @param priority
+     * @return
+     */
+    public static DBRequestInfo create(){
+        DBRequestInfo requestInfo = new DBRequestInfo();
+        requestInfo.name = UUID.randomUUID().toString();
+        requestInfo.priority = DBRequest.PRIORITY_LOW;
+        return requestInfo;
+    }
+
+    /**
+     * Returns a prefilled, fetch request
+     * @return
+     */
+    public static DBRequestInfo createFetch(){
+        DBRequestInfo requestInfo = new DBRequestInfo();
+        requestInfo.priority = DBRequest.PRIORITY_UI;
+        requestInfo.name = "fetch " + UUID.randomUUID().toString();
+        return requestInfo;
+    }
+
+
+
+    public String getName() {
+        return name;
+    }
+
+    public int getPriority() {
+        return priority;
+    }
+}
