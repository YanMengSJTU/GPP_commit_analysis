diff --git a/build.gradle b/build.gradle
index 5594e43b..1ea4bd05 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,17 +1,23 @@
-apply plugin: 'java'
-apply from: 'gradle-mvn-push.gradle'
+// Top-level build file where you can add configuration options common to all sub-projects/modules.
 
-targetCompatibility = '1.6'
-sourceCompatibility = '1.6'
+buildscript {
+    repositories {
+        jcenter()
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:2.3.0'
 
-sourceSets {
-	main {
-		java {
-			srcDir 'src'
-		}
-	}
+        // NOTE: Do not place your application dependencies here; they belong
+        // in the individual module build.gradle files
+    }
 }
 
-dependencies {
-	compile fileTree(dir: 'libs', include: '*.jar')
+allprojects {
+    repositories {
+        jcenter()
+    }
+}
+
+task clean(type: Delete) {
+    delete rootProject.buildDir
 }
diff --git a/gradlew b/gradlew
index 91a7e269..9d82f789 100755
--- a/gradlew
+++ b/gradlew
@@ -42,11 +42,6 @@ case "`uname`" in
     ;;
 esac
 
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
 # Attempt to set APP_HOME
 # Resolve links: $0 may be a link
 PRG="$0"
@@ -61,9 +56,9 @@ while [ -h "$PRG" ] ; do
     fi
 done
 SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >&-
+cd "`dirname \"$PRG\"`/" >/dev/null
 APP_HOME="`pwd -P`"
-cd "$SAVED" >&-
+cd "$SAVED" >/dev/null
 
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
@@ -114,6 +109,7 @@ fi
 if $cygwin ; then
     APP_HOME=`cygpath --path --mixed "$APP_HOME"`
     CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
 
     # We build the pattern for arguments to be converted via cygpath
     ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
diff --git a/lib/.gitignore b/lib/.gitignore
new file mode 100644
index 00000000..42afabfd
--- /dev/null
+++ b/lib/.gitignore
@@ -0,0 +1 @@
+/build
\ No newline at end of file
diff --git a/lib/build.gradle b/lib/build.gradle
new file mode 100644
index 00000000..316177e7
--- /dev/null
+++ b/lib/build.gradle
@@ -0,0 +1,32 @@
+apply plugin: 'com.android.library'
+
+android {
+    compileSdkVersion 25
+    buildToolsVersion "25.0.2"
+
+    defaultConfig {
+        minSdkVersion 19
+        targetSdkVersion 25
+        versionCode 1
+        versionName "1.0"
+
+        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
+
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+}
+
+dependencies {
+    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
+        exclude group: 'com.android.support', module: 'support-annotations'
+    })
+    testCompile 'junit:junit:4.12'
+
+    compile fileTree(include: ['*.jar'], dir: 'libs')
+    compile 'com.android.support:support-v4:25.3.1'
+}
diff --git a/gradle-mvn-push.gradle b/lib/gradle-mvn-push.gradle
similarity index 100%
rename from gradle-mvn-push.gradle
rename to lib/gradle-mvn-push.gradle
diff --git a/lib/src/androidTest/java/com/activeandroid/ExampleInstrumentedTest.java b/lib/src/androidTest/java/com/activeandroid/ExampleInstrumentedTest.java
new file mode 100644
index 00000000..733e957a
--- /dev/null
+++ b/lib/src/androidTest/java/com/activeandroid/ExampleInstrumentedTest.java
@@ -0,0 +1,26 @@
+package com.activeandroid;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.junit.Assert.*;
+
+/**
+ * Instrumentation test, which will execute on an Android device.
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+@RunWith(AndroidJUnit4.class)
+public class ExampleInstrumentedTest {
+    @Test
+    public void useAppContext() throws Exception {
+        // Context of the app under test.
+        Context appContext = InstrumentationRegistry.getTargetContext();
+
+        assertEquals("com.activeandroid.test", appContext.getPackageName());
+    }
+}
diff --git a/lib/src/main/AndroidManifest.xml b/lib/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..13dc3345
--- /dev/null
+++ b/lib/src/main/AndroidManifest.xml
@@ -0,0 +1,10 @@
+<manifest
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.activeandroid">
+
+    <application
+        android:allowBackup="true"
+        android:label="@string/app_name"
+        android:supportsRtl="true"/>
+
+</manifest>
diff --git a/src/com/activeandroid/ActiveAndroid.java b/lib/src/main/java/com/activeandroid/ActiveAndroid.java
similarity index 100%
rename from src/com/activeandroid/ActiveAndroid.java
rename to lib/src/main/java/com/activeandroid/ActiveAndroid.java
diff --git a/src/com/activeandroid/Cache.java b/lib/src/main/java/com/activeandroid/Cache.java
similarity index 100%
rename from src/com/activeandroid/Cache.java
rename to lib/src/main/java/com/activeandroid/Cache.java
diff --git a/src/com/activeandroid/Configuration.java b/lib/src/main/java/com/activeandroid/Configuration.java
similarity index 100%
rename from src/com/activeandroid/Configuration.java
rename to lib/src/main/java/com/activeandroid/Configuration.java
diff --git a/src/com/activeandroid/DatabaseHelper.java b/lib/src/main/java/com/activeandroid/DatabaseHelper.java
similarity index 100%
rename from src/com/activeandroid/DatabaseHelper.java
rename to lib/src/main/java/com/activeandroid/DatabaseHelper.java
diff --git a/src/com/activeandroid/Model.java b/lib/src/main/java/com/activeandroid/Model.java
similarity index 100%
rename from src/com/activeandroid/Model.java
rename to lib/src/main/java/com/activeandroid/Model.java
diff --git a/lib/src/main/java/com/activeandroid/ModelInfo.java b/lib/src/main/java/com/activeandroid/ModelInfo.java
new file mode 100644
index 00000000..a5718cfe
--- /dev/null
+++ b/lib/src/main/java/com/activeandroid/ModelInfo.java
@@ -0,0 +1,201 @@
+package com.activeandroid;
+
+/*
+ * Copyright (C) 2010 Michael Pardo
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import android.content.Context;
+
+import com.activeandroid.serializer.CalendarSerializer;
+import com.activeandroid.serializer.FileSerializer;
+import com.activeandroid.serializer.SqlDateSerializer;
+import com.activeandroid.serializer.TypeSerializer;
+import com.activeandroid.serializer.UtilDateSerializer;
+import com.activeandroid.util.Log;
+import com.activeandroid.util.ReflectionUtils;
+
+import java.io.File;
+import java.io.IOException;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Collection;
+import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import dalvik.system.DexFile;
+
+final class ModelInfo {
+    //////////////////////////////////////////////////////////////////////////////////////
+    // PRIVATE METHODS
+    //////////////////////////////////////////////////////////////////////////////////////
+
+    private Map<Class<? extends Model>, TableInfo> mTableInfos = new HashMap<Class<? extends Model>, TableInfo>();
+    private Map<Class<?>, TypeSerializer> mTypeSerializers = new HashMap<Class<?>, TypeSerializer>() {
+        {
+            put(Calendar.class, new CalendarSerializer());
+            put(java.sql.Date.class, new SqlDateSerializer());
+            put(java.util.Date.class, new UtilDateSerializer());
+            put(File.class, new FileSerializer());
+        }
+    };
+
+    //////////////////////////////////////////////////////////////////////////////////////
+    // CONSTRUCTORS
+    //////////////////////////////////////////////////////////////////////////////////////
+
+    public ModelInfo(Configuration configuration) {
+        if (!loadModelFromMetaData(configuration)) {
+            try {
+                scanForModel(configuration.getContext());
+            } catch (IOException e) {
+                Log.e("Couldn't open source path.", e);
+            }
+        }
+
+        Log.i("ModelInfo loaded.");
+    }
+
+    //////////////////////////////////////////////////////////////////////////////////////
+    // PUBLIC METHODS
+    //////////////////////////////////////////////////////////////////////////////////////
+
+    public Collection<TableInfo> getTableInfos() {
+        return mTableInfos.values();
+    }
+
+    public TableInfo getTableInfo(Class<? extends Model> type) {
+        return mTableInfos.get(type);
+    }
+
+    public TypeSerializer getTypeSerializer(Class<?> type) {
+        return mTypeSerializers.get(type);
+    }
+
+    //////////////////////////////////////////////////////////////////////////////////////
+    // PRIVATE METHODS
+    //////////////////////////////////////////////////////////////////////////////////////
+
+    private boolean loadModelFromMetaData(Configuration configuration) {
+        if (!configuration.isValid()) {
+            return false;
+        }
+
+        final List<Class<? extends Model>> models = configuration.getModelClasses();
+        if (models != null) {
+            for (Class<? extends Model> model : models) {
+                mTableInfos.put(model, new TableInfo(model));
+            }
+        }
+
+        final List<Class<? extends TypeSerializer>> typeSerializers = configuration.getTypeSerializers();
+        if (typeSerializers != null) {
+            for (Class<? extends TypeSerializer> typeSerializer : typeSerializers) {
+                try {
+                    TypeSerializer instance = typeSerializer.newInstance();
+                    mTypeSerializers.put(instance.getDeserializedType(), instance);
+                } catch (InstantiationException e) {
+                    Log.e("Couldn't instantiate TypeSerializer.", e);
+                } catch (IllegalAccessException e) {
+                    Log.e("IllegalAccessException", e);
+                }
+            }
+        }
+
+        return true;
+    }
+
+    private void scanForModel(Context context) throws IOException {
+        String packageName = context.getPackageName();
+        String sourcePath = context.getApplicationInfo().sourceDir;
+        List<String> paths = new ArrayList<String>();
+
+        if (sourcePath != null && !(new File(sourcePath).isDirectory())) {
+            DexFile dexfile = new DexFile(sourcePath);
+            Enumeration<String> entries = dexfile.entries();
+
+            while (entries.hasMoreElements()) {
+                paths.add(entries.nextElement());
+            }
+        }
+        // Robolectric fallback
+        else {
+            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
+            Enumeration<URL> resources = classLoader.getResources("");
+
+            while (resources.hasMoreElements()) {
+                String path = resources.nextElement().getFile();
+                if (path.contains("bin") || path.contains("classes")) {
+                    paths.add(path);
+                }
+            }
+        }
+
+        for (String path : paths) {
+            File file = new File(path);
+            scanForModelClasses(file, packageName, context.getClassLoader());
+        }
+    }
+
+    private void scanForModelClasses(File path, String packageName, ClassLoader classLoader) {
+        if (path.isDirectory()) {
+            for (File file : path.listFiles()) {
+                scanForModelClasses(file, packageName, classLoader);
+            }
+        } else {
+            String className = path.getName();
+
+            // Robolectric fallback
+            if (!path.getPath().equals(className)) {
+                className = path.getPath();
+
+                if (className.endsWith(".class")) {
+                    className = className.substring(0, className.length() - 6);
+                } else {
+                    return;
+                }
+
+                className = className.replace(System.getProperty("file.separator"), ".");
+
+                int packageNameIndex = className.lastIndexOf(packageName);
+                if (packageNameIndex < 0) {
+                    return;
+                }
+
+                className = className.substring(packageNameIndex);
+            }
+
+            try {
+                Class<?> discoveredClass = Class.forName(className, false, classLoader);
+                if (ReflectionUtils.isModel(discoveredClass)) {
+                    @SuppressWarnings("unchecked")
+                    Class<? extends Model> modelClass = (Class<? extends Model>) discoveredClass;
+                    mTableInfos.put(modelClass, new TableInfo(modelClass));
+                } else if (ReflectionUtils.isTypeSerializer(discoveredClass)) {
+                    TypeSerializer instance = (TypeSerializer) discoveredClass.newInstance();
+                    mTypeSerializers.put(instance.getDeserializedType(), instance);
+                }
+            } catch (ClassNotFoundException e) {
+                Log.e("Couldn't create class.", e);
+            } catch (InstantiationException e) {
+                Log.e("Couldn't instantiate TypeSerializer.", e);
+            } catch (IllegalAccessException e) {
+                Log.e("IllegalAccessException", e);
+            }
+        }
+    }
+}
diff --git a/src/com/activeandroid/TableInfo.java b/lib/src/main/java/com/activeandroid/TableInfo.java
similarity index 100%
rename from src/com/activeandroid/TableInfo.java
rename to lib/src/main/java/com/activeandroid/TableInfo.java
diff --git a/src/com/activeandroid/annotation/Column.java b/lib/src/main/java/com/activeandroid/annotation/Column.java
similarity index 100%
rename from src/com/activeandroid/annotation/Column.java
rename to lib/src/main/java/com/activeandroid/annotation/Column.java
diff --git a/src/com/activeandroid/annotation/Table.java b/lib/src/main/java/com/activeandroid/annotation/Table.java
similarity index 100%
rename from src/com/activeandroid/annotation/Table.java
rename to lib/src/main/java/com/activeandroid/annotation/Table.java
diff --git a/src/com/activeandroid/app/Application.java b/lib/src/main/java/com/activeandroid/app/Application.java
similarity index 100%
rename from src/com/activeandroid/app/Application.java
rename to lib/src/main/java/com/activeandroid/app/Application.java
diff --git a/src/com/activeandroid/content/ContentProvider.java b/lib/src/main/java/com/activeandroid/content/ContentProvider.java
similarity index 100%
rename from src/com/activeandroid/content/ContentProvider.java
rename to lib/src/main/java/com/activeandroid/content/ContentProvider.java
diff --git a/src/com/activeandroid/query/Delete.java b/lib/src/main/java/com/activeandroid/query/Delete.java
similarity index 100%
rename from src/com/activeandroid/query/Delete.java
rename to lib/src/main/java/com/activeandroid/query/Delete.java
diff --git a/src/com/activeandroid/query/From.java b/lib/src/main/java/com/activeandroid/query/From.java
similarity index 100%
rename from src/com/activeandroid/query/From.java
rename to lib/src/main/java/com/activeandroid/query/From.java
diff --git a/src/com/activeandroid/query/Join.java b/lib/src/main/java/com/activeandroid/query/Join.java
similarity index 100%
rename from src/com/activeandroid/query/Join.java
rename to lib/src/main/java/com/activeandroid/query/Join.java
diff --git a/src/com/activeandroid/query/Select.java b/lib/src/main/java/com/activeandroid/query/Select.java
similarity index 100%
rename from src/com/activeandroid/query/Select.java
rename to lib/src/main/java/com/activeandroid/query/Select.java
diff --git a/src/com/activeandroid/query/Set.java b/lib/src/main/java/com/activeandroid/query/Set.java
similarity index 100%
rename from src/com/activeandroid/query/Set.java
rename to lib/src/main/java/com/activeandroid/query/Set.java
diff --git a/src/com/activeandroid/query/Sqlable.java b/lib/src/main/java/com/activeandroid/query/Sqlable.java
similarity index 100%
rename from src/com/activeandroid/query/Sqlable.java
rename to lib/src/main/java/com/activeandroid/query/Sqlable.java
diff --git a/src/com/activeandroid/query/Update.java b/lib/src/main/java/com/activeandroid/query/Update.java
similarity index 100%
rename from src/com/activeandroid/query/Update.java
rename to lib/src/main/java/com/activeandroid/query/Update.java
diff --git a/src/com/activeandroid/serializer/BigDecimalSerializer.java b/lib/src/main/java/com/activeandroid/serializer/BigDecimalSerializer.java
similarity index 100%
rename from src/com/activeandroid/serializer/BigDecimalSerializer.java
rename to lib/src/main/java/com/activeandroid/serializer/BigDecimalSerializer.java
diff --git a/src/com/activeandroid/serializer/CalendarSerializer.java b/lib/src/main/java/com/activeandroid/serializer/CalendarSerializer.java
similarity index 100%
rename from src/com/activeandroid/serializer/CalendarSerializer.java
rename to lib/src/main/java/com/activeandroid/serializer/CalendarSerializer.java
diff --git a/src/com/activeandroid/serializer/FileSerializer.java b/lib/src/main/java/com/activeandroid/serializer/FileSerializer.java
similarity index 100%
rename from src/com/activeandroid/serializer/FileSerializer.java
rename to lib/src/main/java/com/activeandroid/serializer/FileSerializer.java
diff --git a/src/com/activeandroid/serializer/SqlDateSerializer.java b/lib/src/main/java/com/activeandroid/serializer/SqlDateSerializer.java
similarity index 100%
rename from src/com/activeandroid/serializer/SqlDateSerializer.java
rename to lib/src/main/java/com/activeandroid/serializer/SqlDateSerializer.java
diff --git a/src/com/activeandroid/serializer/TypeSerializer.java b/lib/src/main/java/com/activeandroid/serializer/TypeSerializer.java
similarity index 100%
rename from src/com/activeandroid/serializer/TypeSerializer.java
rename to lib/src/main/java/com/activeandroid/serializer/TypeSerializer.java
diff --git a/src/com/activeandroid/serializer/UUIDSerializer.java b/lib/src/main/java/com/activeandroid/serializer/UUIDSerializer.java
similarity index 100%
rename from src/com/activeandroid/serializer/UUIDSerializer.java
rename to lib/src/main/java/com/activeandroid/serializer/UUIDSerializer.java
diff --git a/src/com/activeandroid/serializer/UtilDateSerializer.java b/lib/src/main/java/com/activeandroid/serializer/UtilDateSerializer.java
similarity index 100%
rename from src/com/activeandroid/serializer/UtilDateSerializer.java
rename to lib/src/main/java/com/activeandroid/serializer/UtilDateSerializer.java
diff --git a/src/com/activeandroid/util/IOUtils.java b/lib/src/main/java/com/activeandroid/util/IOUtils.java
similarity index 100%
rename from src/com/activeandroid/util/IOUtils.java
rename to lib/src/main/java/com/activeandroid/util/IOUtils.java
diff --git a/src/com/activeandroid/util/Log.java b/lib/src/main/java/com/activeandroid/util/Log.java
similarity index 95%
rename from src/com/activeandroid/util/Log.java
rename to lib/src/main/java/com/activeandroid/util/Log.java
index 3c40a23f..1c2a384d 100644
--- a/src/com/activeandroid/util/Log.java
+++ b/lib/src/main/java/com/activeandroid/util/Log.java
@@ -1,196 +1,196 @@
-package com.activeandroid.util;
-
-/*
- * Copyright (C) 2010 Michael Pardo
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-public final class Log {
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PUBLIC MEMBERS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	private static String sTag = "ActiveAndroid";
-	private static boolean sEnabled = false;
-
-	//////////////////////////////////////////////////////////////////////////////////////
-	// CONSTRUCTORS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	private Log() {
-	}
-
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PUBLIC METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-    public static boolean isEnabled() {
-        return sEnabled;
-    }
-
-	public static void setEnabled(boolean enabled) {
-		sEnabled = enabled;
-	}
-
-	public static boolean isLoggingEnabled() {
-		return sEnabled;
-	}
-
-	public static int v(String msg) {
-		if (sEnabled) {
-			return android.util.Log.v(sTag, msg);
-		}
-		return 0;
-	}
-
-	public static int v(String tag, String msg) {
-		if (sEnabled) {
-			return android.util.Log.v(tag, msg);
-		}
-		return 0;
-	}
-
-	public static int v(String msg, Throwable tr) {
-		if (sEnabled) {
-			return android.util.Log.v(sTag, msg, tr);
-		}
-		return 0;
-	}
-
-	public static int v(String tag, String msg, Throwable tr) {
-		if (sEnabled) {
-			return android.util.Log.v(tag, msg, tr);
-		}
-		return 0;
-	}
-
-	public static int d(String msg) {
-		if (sEnabled) {
-			return android.util.Log.d(sTag, msg);
-		}
-		return 0;
-	}
-
-	public static int d(String tag, String msg) {
-		if (sEnabled) {
-			return android.util.Log.d(tag, msg);
-		}
-		return 0;
-	}
-
-	public static int d(String msg, Throwable tr) {
-		if (sEnabled) {
-			return android.util.Log.d(sTag, msg, tr);
-		}
-		return 0;
-	}
-
-	public static int d(String tag, String msg, Throwable tr) {
-		if (sEnabled) {
-			return android.util.Log.d(tag, msg, tr);
-		}
-		return 0;
-	}
-
-	public static int i(String msg) {
-		if (sEnabled) {
-			return android.util.Log.i(sTag, msg);
-		}
-		return 0;
-	}
-
-	public static int i(String tag, String msg) {
-		if (sEnabled) {
-			return android.util.Log.i(tag, msg);
-		}
-		return 0;
-	}
-
-	public static int i(String msg, Throwable tr) {
-		if (sEnabled) {
-			return android.util.Log.i(sTag, msg, tr);
-		}
-		return 0;
-	}
-
-	public static int i(String tag, String msg, Throwable tr) {
-		if (sEnabled) {
-			return android.util.Log.i(tag, msg, tr);
-		}
-		return 0;
-	}
-
-	public static int w(String msg) {
-		if (sEnabled) {
-			return android.util.Log.w(sTag, msg);
-		}
-		return 0;
-	}
-
-	public static int w(String tag, String msg) {
-		if (sEnabled) {
-			return android.util.Log.w(tag, msg);
-		}
-		return 0;
-	}
-
-	public static int w(String msg, Throwable tr) {
-		if (sEnabled) {
-			return android.util.Log.w(sTag, msg, tr);
-		}
-		return 0;
-	}
-
-	public static int w(String tag, String msg, Throwable tr) {
-		if (sEnabled) {
-			return android.util.Log.w(tag, msg, tr);
-		}
-		return 0;
-	}
-
-	public static int e(String msg) {
-		if (sEnabled) {
-			return android.util.Log.e(sTag, msg);
-		}
-		return 0;
-	}
-
-	public static int e(String tag, String msg) {
-		if (sEnabled) {
-			return android.util.Log.e(tag, msg);
-		}
-		return 0;
-	}
-
-	public static int e(String msg, Throwable tr) {
-		if (sEnabled) {
-			return android.util.Log.e(sTag, msg, tr);
-		}
-		return 0;
-	}
-
-	public static int e(String tag, String msg, Throwable tr) {
-		if (sEnabled) {
-			return android.util.Log.e(tag, msg, tr);
-		}
-		return 0;
-	}
-
-	public static int t(String msg, Object... args) {
-		if (sEnabled) {
-			return android.util.Log.v("test", String.format(msg, args));
-		}
-		return 0;
-	}
+package com.activeandroid.util;
+
+/*
+ * Copyright (C) 2010 Michael Pardo
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+public final class Log {
+	//////////////////////////////////////////////////////////////////////////////////////
+	// PUBLIC MEMBERS
+	//////////////////////////////////////////////////////////////////////////////////////
+
+	private static String sTag = "ActiveAndroid";
+	private static boolean sEnabled = false;
+
+	//////////////////////////////////////////////////////////////////////////////////////
+	// CONSTRUCTORS
+	//////////////////////////////////////////////////////////////////////////////////////
+
+	private Log() {
+	}
+
+	//////////////////////////////////////////////////////////////////////////////////////
+	// PUBLIC METHODS
+	//////////////////////////////////////////////////////////////////////////////////////
+
+    public static boolean isEnabled() {
+        return sEnabled;
+    }
+
+	public static void setEnabled(boolean enabled) {
+		sEnabled = enabled;
+	}
+
+	public static boolean isLoggingEnabled() {
+		return sEnabled;
+	}
+
+	public static int v(String msg) {
+		if (sEnabled) {
+			return android.util.Log.v(sTag, msg);
+		}
+		return 0;
+	}
+
+	public static int v(String tag, String msg) {
+		if (sEnabled) {
+			return android.util.Log.v(tag, msg);
+		}
+		return 0;
+	}
+
+	public static int v(String msg, Throwable tr) {
+		if (sEnabled) {
+			return android.util.Log.v(sTag, msg, tr);
+		}
+		return 0;
+	}
+
+	public static int v(String tag, String msg, Throwable tr) {
+		if (sEnabled) {
+			return android.util.Log.v(tag, msg, tr);
+		}
+		return 0;
+	}
+
+	public static int d(String msg) {
+		if (sEnabled) {
+			return android.util.Log.d(sTag, msg);
+		}
+		return 0;
+	}
+
+	public static int d(String tag, String msg) {
+		if (sEnabled) {
+			return android.util.Log.d(tag, msg);
+		}
+		return 0;
+	}
+
+	public static int d(String msg, Throwable tr) {
+		if (sEnabled) {
+			return android.util.Log.d(sTag, msg, tr);
+		}
+		return 0;
+	}
+
+	public static int d(String tag, String msg, Throwable tr) {
+		if (sEnabled) {
+			return android.util.Log.d(tag, msg, tr);
+		}
+		return 0;
+	}
+
+	public static int i(String msg) {
+		if (sEnabled) {
+			return android.util.Log.i(sTag, msg);
+		}
+		return 0;
+	}
+
+	public static int i(String tag, String msg) {
+		if (sEnabled) {
+			return android.util.Log.i(tag, msg);
+		}
+		return 0;
+	}
+
+	public static int i(String msg, Throwable tr) {
+		if (sEnabled) {
+			return android.util.Log.i(sTag, msg, tr);
+		}
+		return 0;
+	}
+
+	public static int i(String tag, String msg, Throwable tr) {
+		if (sEnabled) {
+			return android.util.Log.i(tag, msg, tr);
+		}
+		return 0;
+	}
+
+	public static int w(String msg) {
+		if (sEnabled) {
+			return android.util.Log.w(sTag, msg);
+		}
+		return 0;
+	}
+
+	public static int w(String tag, String msg) {
+		if (sEnabled) {
+			return android.util.Log.w(tag, msg);
+		}
+		return 0;
+	}
+
+	public static int w(String msg, Throwable tr) {
+		if (sEnabled) {
+			return android.util.Log.w(sTag, msg, tr);
+		}
+		return 0;
+	}
+
+	public static int w(String tag, String msg, Throwable tr) {
+		if (sEnabled) {
+			return android.util.Log.w(tag, msg, tr);
+		}
+		return 0;
+	}
+
+	public static int e(String msg) {
+		if (sEnabled) {
+			return android.util.Log.e(sTag, msg);
+		}
+		return 0;
+	}
+
+	public static int e(String tag, String msg) {
+		if (sEnabled) {
+			return android.util.Log.e(tag, msg);
+		}
+		return 0;
+	}
+
+	public static int e(String msg, Throwable tr) {
+		if (sEnabled) {
+			return android.util.Log.e(sTag, msg, tr);
+		}
+		return 0;
+	}
+
+	public static int e(String tag, String msg, Throwable tr) {
+		if (sEnabled) {
+			return android.util.Log.e(tag, msg, tr);
+		}
+		return 0;
+	}
+
+	public static int t(String msg, Object... args) {
+		if (sEnabled) {
+			return android.util.Log.v("test", String.format(msg, args));
+		}
+		return 0;
+	}
 }
\ No newline at end of file
diff --git a/src/com/activeandroid/util/NaturalOrderComparator.java b/lib/src/main/java/com/activeandroid/util/NaturalOrderComparator.java
similarity index 95%
rename from src/com/activeandroid/util/NaturalOrderComparator.java
rename to lib/src/main/java/com/activeandroid/util/NaturalOrderComparator.java
index 3e44af96..b09de26f 100644
--- a/src/com/activeandroid/util/NaturalOrderComparator.java
+++ b/lib/src/main/java/com/activeandroid/util/NaturalOrderComparator.java
@@ -1,141 +1,141 @@
-package com.activeandroid.util;
-
-/*
- NaturalOrderComparator.java -- Perform 'natural order' comparisons of strings in Java.
- Copyright (C) 2003 by Pierre-Luc Paour <natorder@paour.com>
-
- Based on the C version by Martin Pool, of which this is more or less a straight conversion.
- Copyright (C) 2000 by Martin Pool <mbp@humbug.org.au>
-
- This software is provided 'as-is', without any express or implied
- warranty.  In no event will the authors be held liable for any damages
- arising from the use of this software.
-
- Permission is granted to anyone to use this software for any purpose,
- including commercial applications, and to alter it and redistribute it
- freely, subject to the following restrictions:
-
- 1. The origin of this software must not be misrepresented; you must not
- claim that you wrote the original software. If you use this software
- in a product, an acknowledgment in the product documentation would be
- appreciated but is not required.
- 2. Altered source versions must be plainly marked as such, and must not be
- misrepresented as being the original software.
- 3. This notice may not be removed or altered from any source distribution.
- */
-
-import java.util.Comparator;
-
-public class NaturalOrderComparator implements Comparator<Object> {
-	int compareRight(String a, String b) {
-		int bias = 0;
-		int ia = 0;
-		int ib = 0;
-
-		// The longest run of digits wins. That aside, the greatest
-		// value wins, but we can't know that it will until we've scanned
-		// both numbers to know that they have the same magnitude, so we
-		// remember it in BIAS.
-		for (;; ia++, ib++) {
-			char ca = charAt(a, ia);
-			char cb = charAt(b, ib);
-
-			if (!Character.isDigit(ca) && !Character.isDigit(cb)) {
-				return bias;
-			}
-			else if (!Character.isDigit(ca)) {
-				return -1;
-			}
-			else if (!Character.isDigit(cb)) {
-				return +1;
-			}
-			else if (ca < cb) {
-				if (bias == 0) {
-					bias = -1;
-				}
-			}
-			else if (ca > cb) {
-				if (bias == 0)
-					bias = +1;
-			}
-			else if (ca == 0 && cb == 0) {
-				return bias;
-			}
-		}
-	}
-
-	public int compare(Object o1, Object o2) {
-		String a = o1.toString();
-		String b = o2.toString();
-
-		int ia = 0, ib = 0;
-		int nza = 0, nzb = 0;
-		char ca, cb;
-		int result;
-
-		while (true) {
-			// only count the number of zeroes leading the last number compared
-			nza = nzb = 0;
-
-			ca = charAt(a, ia);
-			cb = charAt(b, ib);
-
-			// skip over leading spaces or zeros
-			while (Character.isSpaceChar(ca) || ca == '0') {
-				if (ca == '0') {
-					nza++;
-				}
-				else {
-					// only count consecutive zeroes
-					nza = 0;
-				}
-
-				ca = charAt(a, ++ia);
-			}
-
-			while (Character.isSpaceChar(cb) || cb == '0') {
-				if (cb == '0') {
-					nzb++;
-				}
-				else {
-					// only count consecutive zeroes
-					nzb = 0;
-				}
-
-				cb = charAt(b, ++ib);
-			}
-
-			// process run of digits
-			if (Character.isDigit(ca) && Character.isDigit(cb)) {
-				if ((result = compareRight(a.substring(ia), b.substring(ib))) != 0) {
-					return result;
-				}
-			}
-
-			if (ca == 0 && cb == 0) {
-				// The strings compare the same. Perhaps the caller
-				// will want to call strcmp to break the tie.
-				return nza - nzb;
-			}
-
-			if (ca < cb) {
-				return -1;
-			}
-			else if (ca > cb) {
-				return +1;
-			}
-
-			++ia;
-			++ib;
-		}
-	}
-
-	static char charAt(String s, int i) {
-		if (i >= s.length()) {
-			return 0;
-		}
-		else {
-			return s.charAt(i);
-		}
-	}
+package com.activeandroid.util;
+
+/*
+ NaturalOrderComparator.java -- Perform 'natural order' comparisons of strings in Java.
+ Copyright (C) 2003 by Pierre-Luc Paour <natorder@paour.com>
+
+ Based on the C version by Martin Pool, of which this is more or less a straight conversion.
+ Copyright (C) 2000 by Martin Pool <mbp@humbug.org.au>
+
+ This software is provided 'as-is', without any express or implied
+ warranty.  In no event will the authors be held liable for any damages
+ arising from the use of this software.
+
+ Permission is granted to anyone to use this software for any purpose,
+ including commercial applications, and to alter it and redistribute it
+ freely, subject to the following restrictions:
+
+ 1. The origin of this software must not be misrepresented; you must not
+ claim that you wrote the original software. If you use this software
+ in a product, an acknowledgment in the product documentation would be
+ appreciated but is not required.
+ 2. Altered source versions must be plainly marked as such, and must not be
+ misrepresented as being the original software.
+ 3. This notice may not be removed or altered from any source distribution.
+ */
+
+import java.util.Comparator;
+
+public class NaturalOrderComparator implements Comparator<Object> {
+	int compareRight(String a, String b) {
+		int bias = 0;
+		int ia = 0;
+		int ib = 0;
+
+		// The longest run of digits wins. That aside, the greatest
+		// value wins, but we can't know that it will until we've scanned
+		// both numbers to know that they have the same magnitude, so we
+		// remember it in BIAS.
+		for (;; ia++, ib++) {
+			char ca = charAt(a, ia);
+			char cb = charAt(b, ib);
+
+			if (!Character.isDigit(ca) && !Character.isDigit(cb)) {
+				return bias;
+			}
+			else if (!Character.isDigit(ca)) {
+				return -1;
+			}
+			else if (!Character.isDigit(cb)) {
+				return +1;
+			}
+			else if (ca < cb) {
+				if (bias == 0) {
+					bias = -1;
+				}
+			}
+			else if (ca > cb) {
+				if (bias == 0)
+					bias = +1;
+			}
+			else if (ca == 0 && cb == 0) {
+				return bias;
+			}
+		}
+	}
+
+	public int compare(Object o1, Object o2) {
+		String a = o1.toString();
+		String b = o2.toString();
+
+		int ia = 0, ib = 0;
+		int nza = 0, nzb = 0;
+		char ca, cb;
+		int result;
+
+		while (true) {
+			// only count the number of zeroes leading the last number compared
+			nza = nzb = 0;
+
+			ca = charAt(a, ia);
+			cb = charAt(b, ib);
+
+			// skip over leading spaces or zeros
+			while (Character.isSpaceChar(ca) || ca == '0') {
+				if (ca == '0') {
+					nza++;
+				}
+				else {
+					// only count consecutive zeroes
+					nza = 0;
+				}
+
+				ca = charAt(a, ++ia);
+			}
+
+			while (Character.isSpaceChar(cb) || cb == '0') {
+				if (cb == '0') {
+					nzb++;
+				}
+				else {
+					// only count consecutive zeroes
+					nzb = 0;
+				}
+
+				cb = charAt(b, ++ib);
+			}
+
+			// process run of digits
+			if (Character.isDigit(ca) && Character.isDigit(cb)) {
+				if ((result = compareRight(a.substring(ia), b.substring(ib))) != 0) {
+					return result;
+				}
+			}
+
+			if (ca == 0 && cb == 0) {
+				// The strings compare the same. Perhaps the caller
+				// will want to call strcmp to break the tie.
+				return nza - nzb;
+			}
+
+			if (ca < cb) {
+				return -1;
+			}
+			else if (ca > cb) {
+				return +1;
+			}
+
+			++ia;
+			++ib;
+		}
+	}
+
+	static char charAt(String s, int i) {
+		if (i >= s.length()) {
+			return 0;
+		}
+		else {
+			return s.charAt(i);
+		}
+	}
 }
\ No newline at end of file
diff --git a/src/com/activeandroid/util/ReflectionUtils.java b/lib/src/main/java/com/activeandroid/util/ReflectionUtils.java
similarity index 100%
rename from src/com/activeandroid/util/ReflectionUtils.java
rename to lib/src/main/java/com/activeandroid/util/ReflectionUtils.java
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/lib/src/main/java/com/activeandroid/util/SQLiteUtils.java
similarity index 100%
rename from src/com/activeandroid/util/SQLiteUtils.java
rename to lib/src/main/java/com/activeandroid/util/SQLiteUtils.java
diff --git a/src/com/activeandroid/util/SqlParser.java b/lib/src/main/java/com/activeandroid/util/SqlParser.java
similarity index 100%
rename from src/com/activeandroid/util/SqlParser.java
rename to lib/src/main/java/com/activeandroid/util/SqlParser.java
diff --git a/src/com/activeandroid/util/Tokenizer.java b/lib/src/main/java/com/activeandroid/util/Tokenizer.java
similarity index 100%
rename from src/com/activeandroid/util/Tokenizer.java
rename to lib/src/main/java/com/activeandroid/util/Tokenizer.java
diff --git a/src/com/activeandroid/widget/ModelAdapter.java b/lib/src/main/java/com/activeandroid/widget/ModelAdapter.java
similarity index 100%
rename from src/com/activeandroid/widget/ModelAdapter.java
rename to lib/src/main/java/com/activeandroid/widget/ModelAdapter.java
diff --git a/lib/src/main/res/values/strings.xml b/lib/src/main/res/values/strings.xml
new file mode 100644
index 00000000..77b2f45a
--- /dev/null
+++ b/lib/src/main/res/values/strings.xml
@@ -0,0 +1,3 @@
+<resources>
+    <string name="app_name">ActiveAndroid</string>
+</resources>
diff --git a/tests/.gitignore b/lib/src/test/.gitignore
similarity index 100%
rename from tests/.gitignore
rename to lib/src/test/.gitignore
diff --git a/tests/AndroidManifest.xml b/lib/src/test/AndroidManifest.xml
similarity index 100%
rename from tests/AndroidManifest.xml
rename to lib/src/test/AndroidManifest.xml
diff --git a/tests/assets/migrations/2.sql b/lib/src/test/assets/migrations/2.sql
similarity index 100%
rename from tests/assets/migrations/2.sql
rename to lib/src/test/assets/migrations/2.sql
diff --git a/lib/src/test/java/com/activeandroid/ExampleUnitTest.java b/lib/src/test/java/com/activeandroid/ExampleUnitTest.java
new file mode 100644
index 00000000..0c6bbc4a
--- /dev/null
+++ b/lib/src/test/java/com/activeandroid/ExampleUnitTest.java
@@ -0,0 +1,17 @@
+package com.activeandroid;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * Example local unit test, which will execute on the development machine (host).
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+public class ExampleUnitTest {
+    @Test
+    public void addition_isCorrect() throws Exception {
+        assertEquals(4, 2 + 2);
+    }
+}
diff --git a/tests/src/com/activeandroid/test/ActiveAndroidTestCase.java b/lib/src/test/java/com/activeandroid/test/ActiveAndroidTestCase.java
similarity index 100%
rename from tests/src/com/activeandroid/test/ActiveAndroidTestCase.java
rename to lib/src/test/java/com/activeandroid/test/ActiveAndroidTestCase.java
diff --git a/tests/src/com/activeandroid/test/CacheTest.java b/lib/src/test/java/com/activeandroid/test/CacheTest.java
similarity index 100%
rename from tests/src/com/activeandroid/test/CacheTest.java
rename to lib/src/test/java/com/activeandroid/test/CacheTest.java
diff --git a/tests/src/com/activeandroid/test/ConfigurationTest.java b/lib/src/test/java/com/activeandroid/test/ConfigurationTest.java
similarity index 100%
rename from tests/src/com/activeandroid/test/ConfigurationTest.java
rename to lib/src/test/java/com/activeandroid/test/ConfigurationTest.java
diff --git a/tests/src/com/activeandroid/test/MockModel.java b/lib/src/test/java/com/activeandroid/test/MockModel.java
similarity index 100%
rename from tests/src/com/activeandroid/test/MockModel.java
rename to lib/src/test/java/com/activeandroid/test/MockModel.java
diff --git a/tests/src/com/activeandroid/test/ModelTest.java b/lib/src/test/java/com/activeandroid/test/ModelTest.java
similarity index 100%
rename from tests/src/com/activeandroid/test/ModelTest.java
rename to lib/src/test/java/com/activeandroid/test/ModelTest.java
diff --git a/tests/src/com/activeandroid/test/parser/ParserConfigurationTest.java b/lib/src/test/java/com/activeandroid/test/parser/ParserConfigurationTest.java
similarity index 100%
rename from tests/src/com/activeandroid/test/parser/ParserConfigurationTest.java
rename to lib/src/test/java/com/activeandroid/test/parser/ParserConfigurationTest.java
diff --git a/tests/src/com/activeandroid/test/parser/ParserTest.java b/lib/src/test/java/com/activeandroid/test/parser/ParserTest.java
similarity index 100%
rename from tests/src/com/activeandroid/test/parser/ParserTest.java
rename to lib/src/test/java/com/activeandroid/test/parser/ParserTest.java
diff --git a/tests/src/com/activeandroid/test/query/CountTest.java b/lib/src/test/java/com/activeandroid/test/query/CountTest.java
similarity index 100%
rename from tests/src/com/activeandroid/test/query/CountTest.java
rename to lib/src/test/java/com/activeandroid/test/query/CountTest.java
diff --git a/tests/src/com/activeandroid/test/query/DeleteTest.java b/lib/src/test/java/com/activeandroid/test/query/DeleteTest.java
similarity index 100%
rename from tests/src/com/activeandroid/test/query/DeleteTest.java
rename to lib/src/test/java/com/activeandroid/test/query/DeleteTest.java
diff --git a/tests/src/com/activeandroid/test/query/ExistsTest.java b/lib/src/test/java/com/activeandroid/test/query/ExistsTest.java
similarity index 100%
rename from tests/src/com/activeandroid/test/query/ExistsTest.java
rename to lib/src/test/java/com/activeandroid/test/query/ExistsTest.java
diff --git a/tests/src/com/activeandroid/test/query/FromTest.java b/lib/src/test/java/com/activeandroid/test/query/FromTest.java
similarity index 100%
rename from tests/src/com/activeandroid/test/query/FromTest.java
rename to lib/src/test/java/com/activeandroid/test/query/FromTest.java
diff --git a/tests/src/com/activeandroid/test/query/SelectTest.java b/lib/src/test/java/com/activeandroid/test/query/SelectTest.java
similarity index 100%
rename from tests/src/com/activeandroid/test/query/SelectTest.java
rename to lib/src/test/java/com/activeandroid/test/query/SelectTest.java
diff --git a/tests/src/com/activeandroid/test/query/SqlableTestCase.java b/lib/src/test/java/com/activeandroid/test/query/SqlableTestCase.java
similarity index 100%
rename from tests/src/com/activeandroid/test/query/SqlableTestCase.java
rename to lib/src/test/java/com/activeandroid/test/query/SqlableTestCase.java
diff --git a/tests/src/com/activeandroid/test/query/UpdateTest.java b/lib/src/test/java/com/activeandroid/test/query/UpdateTest.java
similarity index 100%
rename from tests/src/com/activeandroid/test/query/UpdateTest.java
rename to lib/src/test/java/com/activeandroid/test/query/UpdateTest.java
diff --git a/tests/pom.xml b/lib/src/test/pom.xml
similarity index 100%
rename from tests/pom.xml
rename to lib/src/test/pom.xml
diff --git a/tests/project.properties b/lib/src/test/project.properties
similarity index 100%
rename from tests/project.properties
rename to lib/src/test/project.properties
diff --git a/tests/res/raw/block_comment.sql b/lib/src/test/res/raw/block_comment.sql
similarity index 100%
rename from tests/res/raw/block_comment.sql
rename to lib/src/test/res/raw/block_comment.sql
diff --git a/tests/res/raw/block_comment_with_semicolon.sql b/lib/src/test/res/raw/block_comment_with_semicolon.sql
similarity index 100%
rename from tests/res/raw/block_comment_with_semicolon.sql
rename to lib/src/test/res/raw/block_comment_with_semicolon.sql
diff --git a/tests/res/raw/block_comment_with_string.sql b/lib/src/test/res/raw/block_comment_with_string.sql
similarity index 100%
rename from tests/res/raw/block_comment_with_string.sql
rename to lib/src/test/res/raw/block_comment_with_string.sql
diff --git a/tests/res/raw/block_with_line_comment.sql b/lib/src/test/res/raw/block_with_line_comment.sql
similarity index 100%
rename from tests/res/raw/block_with_line_comment.sql
rename to lib/src/test/res/raw/block_with_line_comment.sql
diff --git a/tests/res/raw/complex.sql b/lib/src/test/res/raw/complex.sql
similarity index 100%
rename from tests/res/raw/complex.sql
rename to lib/src/test/res/raw/complex.sql
diff --git a/tests/res/raw/invalid_block_comment.sql b/lib/src/test/res/raw/invalid_block_comment.sql
similarity index 100%
rename from tests/res/raw/invalid_block_comment.sql
rename to lib/src/test/res/raw/invalid_block_comment.sql
diff --git a/tests/res/raw/line_comment.sql b/lib/src/test/res/raw/line_comment.sql
similarity index 100%
rename from tests/res/raw/line_comment.sql
rename to lib/src/test/res/raw/line_comment.sql
diff --git a/tests/res/raw/line_comment_and_block_end.sql b/lib/src/test/res/raw/line_comment_and_block_end.sql
similarity index 100%
rename from tests/res/raw/line_comment_and_block_end.sql
rename to lib/src/test/res/raw/line_comment_and_block_end.sql
diff --git a/tests/res/raw/line_comment_with_semicolon.sql b/lib/src/test/res/raw/line_comment_with_semicolon.sql
similarity index 100%
rename from tests/res/raw/line_comment_with_semicolon.sql
rename to lib/src/test/res/raw/line_comment_with_semicolon.sql
diff --git a/tests/res/raw/line_comment_with_string.sql b/lib/src/test/res/raw/line_comment_with_string.sql
similarity index 100%
rename from tests/res/raw/line_comment_with_string.sql
rename to lib/src/test/res/raw/line_comment_with_string.sql
diff --git a/tests/res/raw/string_with_block_comment.sql b/lib/src/test/res/raw/string_with_block_comment.sql
similarity index 100%
rename from tests/res/raw/string_with_block_comment.sql
rename to lib/src/test/res/raw/string_with_block_comment.sql
diff --git a/tests/res/raw/string_with_line_comment.sql b/lib/src/test/res/raw/string_with_line_comment.sql
similarity index 100%
rename from tests/res/raw/string_with_line_comment.sql
rename to lib/src/test/res/raw/string_with_line_comment.sql
diff --git a/tests/res/raw/string_with_semicolon.sql b/lib/src/test/res/raw/string_with_semicolon.sql
similarity index 100%
rename from tests/res/raw/string_with_semicolon.sql
rename to lib/src/test/res/raw/string_with_semicolon.sql
diff --git a/tests/res/raw/string_with_whitespace.sql b/lib/src/test/res/raw/string_with_whitespace.sql
similarity index 100%
rename from tests/res/raw/string_with_whitespace.sql
rename to lib/src/test/res/raw/string_with_whitespace.sql
diff --git a/tests/res/raw/two_statements.sql b/lib/src/test/res/raw/two_statements.sql
similarity index 100%
rename from tests/res/raw/two_statements.sql
rename to lib/src/test/res/raw/two_statements.sql
diff --git a/tests/res/raw/whitespace.sql b/lib/src/test/res/raw/whitespace.sql
similarity index 100%
rename from tests/res/raw/whitespace.sql
rename to lib/src/test/res/raw/whitespace.sql
diff --git a/tests/res/values/strings.xml b/lib/src/test/res/values/strings.xml
similarity index 100%
rename from tests/res/values/strings.xml
rename to lib/src/test/res/values/strings.xml
diff --git a/libs/android-support-v4.jar b/libs/android-support-v4.jar
deleted file mode 100644
index 428bdbc0..00000000
Binary files a/libs/android-support-v4.jar and /dev/null differ
diff --git a/libs/android.jar b/libs/android.jar
deleted file mode 100644
index 4274d2b0..00000000
Binary files a/libs/android.jar and /dev/null differ
diff --git a/sample/.gitignore b/sample/.gitignore
new file mode 100644
index 00000000..796b96d1
--- /dev/null
+++ b/sample/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/sample/build.gradle b/sample/build.gradle
new file mode 100644
index 00000000..929f1de9
--- /dev/null
+++ b/sample/build.gradle
@@ -0,0 +1,30 @@
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion 25
+    buildToolsVersion "25.0.2"
+    defaultConfig {
+        applicationId "com.activeandroid.sample"
+        minSdkVersion 19
+        targetSdkVersion 25
+        versionCode 1
+        versionName "1.0"
+        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+}
+
+dependencies {
+    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
+        exclude group: 'com.android.support', module: 'support-annotations'
+    })
+    testCompile 'junit:junit:4.12'
+
+    compile fileTree(include: ['*.jar'], dir: 'libs')
+    compile project(':lib')
+}
diff --git a/sample/proguard-rules.pro b/sample/proguard-rules.pro
new file mode 100644
index 00000000..cdaeb2b1
--- /dev/null
+++ b/sample/proguard-rules.pro
@@ -0,0 +1,25 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in C:\Users\Palatis\AppData\Local\Android\Sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
+
+# Uncomment this to preserve the line number information for
+# debugging stack traces.
+#-keepattributes SourceFile,LineNumberTable
+
+# If you keep the line number information, uncomment this to
+# hide the original source file name.
+#-renamesourcefileattribute SourceFile
diff --git a/sample/src/androidTest/java/com/activeandroid/sample/ExampleInstrumentedTest.java b/sample/src/androidTest/java/com/activeandroid/sample/ExampleInstrumentedTest.java
new file mode 100644
index 00000000..53aad692
--- /dev/null
+++ b/sample/src/androidTest/java/com/activeandroid/sample/ExampleInstrumentedTest.java
@@ -0,0 +1,26 @@
+package com.activeandroid.sample;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.junit.Assert.*;
+
+/**
+ * Instrumentation test, which will execute on an Android device.
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+@RunWith(AndroidJUnit4.class)
+public class ExampleInstrumentedTest {
+    @Test
+    public void useAppContext() throws Exception {
+        // Context of the app under test.
+        Context appContext = InstrumentationRegistry.getTargetContext();
+
+        assertEquals("com.activeandroid.sample", appContext.getPackageName());
+    }
+}
diff --git a/sample/src/main/AndroidManifest.xml b/sample/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..3877c6e5
--- /dev/null
+++ b/sample/src/main/AndroidManifest.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+          package="com.activeandroid.sample">
+
+    <application
+        android:allowBackup="true"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:roundIcon="@mipmap/ic_launcher_round"
+        android:supportsRtl="true"
+        android:theme="@android:style/Theme.DeviceDefault.Light.DarkActionBar">
+        <activity android:name=".MainActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN"/>
+
+                <category android:name="android.intent.category.LAUNCHER"/>
+            </intent-filter>
+        </activity>
+    </application>
+
+</manifest>
diff --git a/sample/src/main/java/com/activeandroid/sample/MainActivity.java b/sample/src/main/java/com/activeandroid/sample/MainActivity.java
new file mode 100644
index 00000000..327417f7
--- /dev/null
+++ b/sample/src/main/java/com/activeandroid/sample/MainActivity.java
@@ -0,0 +1,13 @@
+package com.activeandroid.sample;
+
+import android.app.Activity;
+import android.os.Bundle;
+
+public class MainActivity extends Activity {
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+    }
+}
diff --git a/sample/src/main/res/layout/activity_main.xml b/sample/src/main/res/layout/activity_main.xml
new file mode 100644
index 00000000..bf09770a
--- /dev/null
+++ b/sample/src/main/res/layout/activity_main.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context="com.activeandroid.sample.MainActivity">
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentEnd="true"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentTop="true"
+        android:text="Hello World!"/>
+
+</RelativeLayout>
diff --git a/sample/src/main/res/mipmap-hdpi/ic_launcher.png b/sample/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100644
index 00000000..cde69bcc
Binary files /dev/null and b/sample/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/sample/src/main/res/mipmap-hdpi/ic_launcher_round.png b/sample/src/main/res/mipmap-hdpi/ic_launcher_round.png
new file mode 100644
index 00000000..9a078e3e
Binary files /dev/null and b/sample/src/main/res/mipmap-hdpi/ic_launcher_round.png differ
diff --git a/sample/src/main/res/mipmap-mdpi/ic_launcher.png b/sample/src/main/res/mipmap-mdpi/ic_launcher.png
new file mode 100644
index 00000000..c133a0cb
Binary files /dev/null and b/sample/src/main/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/sample/src/main/res/mipmap-mdpi/ic_launcher_round.png b/sample/src/main/res/mipmap-mdpi/ic_launcher_round.png
new file mode 100644
index 00000000..efc028a6
Binary files /dev/null and b/sample/src/main/res/mipmap-mdpi/ic_launcher_round.png differ
diff --git a/sample/src/main/res/mipmap-xhdpi/ic_launcher.png b/sample/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100644
index 00000000..bfa42f0e
Binary files /dev/null and b/sample/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/sample/src/main/res/mipmap-xhdpi/ic_launcher_round.png b/sample/src/main/res/mipmap-xhdpi/ic_launcher_round.png
new file mode 100644
index 00000000..3af2608a
Binary files /dev/null and b/sample/src/main/res/mipmap-xhdpi/ic_launcher_round.png differ
diff --git a/sample/src/main/res/mipmap-xxhdpi/ic_launcher.png b/sample/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100644
index 00000000..324e72cd
Binary files /dev/null and b/sample/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/sample/src/main/res/mipmap-xxhdpi/ic_launcher_round.png b/sample/src/main/res/mipmap-xxhdpi/ic_launcher_round.png
new file mode 100644
index 00000000..9bec2e62
Binary files /dev/null and b/sample/src/main/res/mipmap-xxhdpi/ic_launcher_round.png differ
diff --git a/sample/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/sample/src/main/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100644
index 00000000..aee44e13
Binary files /dev/null and b/sample/src/main/res/mipmap-xxxhdpi/ic_launcher.png differ
diff --git a/sample/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png b/sample/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png
new file mode 100644
index 00000000..34947cd6
Binary files /dev/null and b/sample/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png differ
diff --git a/sample/src/main/res/values/strings.xml b/sample/src/main/res/values/strings.xml
new file mode 100644
index 00000000..77b2f45a
--- /dev/null
+++ b/sample/src/main/res/values/strings.xml
@@ -0,0 +1,3 @@
+<resources>
+    <string name="app_name">ActiveAndroid</string>
+</resources>
diff --git a/sample/src/test/java/com/activeandroid/sample/ExampleUnitTest.java b/sample/src/test/java/com/activeandroid/sample/ExampleUnitTest.java
new file mode 100644
index 00000000..c33a4391
--- /dev/null
+++ b/sample/src/test/java/com/activeandroid/sample/ExampleUnitTest.java
@@ -0,0 +1,17 @@
+package com.activeandroid.sample;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * Example local unit test, which will execute on the development machine (host).
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+public class ExampleUnitTest {
+    @Test
+    public void addition_isCorrect() throws Exception {
+        assertEquals(4, 2 + 2);
+    }
+}
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
index 00000000..035bb58a
--- /dev/null
+++ b/settings.gradle
@@ -0,0 +1 @@
+include ':sample', ':lib'
diff --git a/src/com/activeandroid/ModelInfo.java b/src/com/activeandroid/ModelInfo.java
deleted file mode 100644
index 09e79117..00000000
--- a/src/com/activeandroid/ModelInfo.java
+++ /dev/null
@@ -1,209 +0,0 @@
-package com.activeandroid;
-
-/*
- * Copyright (C) 2010 Michael Pardo
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import java.io.File;
-import java.io.IOException;
-import java.net.URL;
-import java.util.ArrayList;
-import java.util.Calendar;
-import java.util.Collection;
-import java.util.Enumeration;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import android.content.Context;
-
-import com.activeandroid.serializer.CalendarSerializer;
-import com.activeandroid.serializer.SqlDateSerializer;
-import com.activeandroid.serializer.TypeSerializer;
-import com.activeandroid.serializer.UtilDateSerializer;
-import com.activeandroid.serializer.FileSerializer;
-import com.activeandroid.util.Log;
-import com.activeandroid.util.ReflectionUtils;
-import dalvik.system.DexFile;
-
-final class ModelInfo {
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PRIVATE METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	private Map<Class<? extends Model>, TableInfo> mTableInfos = new HashMap<Class<? extends Model>, TableInfo>();
-	private Map<Class<?>, TypeSerializer> mTypeSerializers = new HashMap<Class<?>, TypeSerializer>() {
-		{
-			put(Calendar.class, new CalendarSerializer());
-			put(java.sql.Date.class, new SqlDateSerializer());
-			put(java.util.Date.class, new UtilDateSerializer());
-			put(java.io.File.class, new FileSerializer());
-		}
-	};
-
-	//////////////////////////////////////////////////////////////////////////////////////
-	// CONSTRUCTORS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	public ModelInfo(Configuration configuration) {
-		if (!loadModelFromMetaData(configuration)) {
-			try {
-				scanForModel(configuration.getContext());
-			}
-			catch (IOException e) {
-				Log.e("Couldn't open source path.", e);
-			}
-		}
-
-		Log.i("ModelInfo loaded.");
-	}
-
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PUBLIC METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	public Collection<TableInfo> getTableInfos() {
-		return mTableInfos.values();
-	}
-
-	public TableInfo getTableInfo(Class<? extends Model> type) {
-		return mTableInfos.get(type);
-	}
-
-	public TypeSerializer getTypeSerializer(Class<?> type) {
-		return mTypeSerializers.get(type);
-	}
-
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PRIVATE METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	private boolean loadModelFromMetaData(Configuration configuration) {
-		if (!configuration.isValid()) {
-			return false;
-		}
-
-		final List<Class<? extends Model>> models = configuration.getModelClasses();
-		if (models != null) {
-			for (Class<? extends Model> model : models) {
-				mTableInfos.put(model, new TableInfo(model));
-			}
-		}
-
-		final List<Class<? extends TypeSerializer>> typeSerializers = configuration.getTypeSerializers();
-		if (typeSerializers != null) {
-			for (Class<? extends TypeSerializer> typeSerializer : typeSerializers) {
-				try {
-					TypeSerializer instance = typeSerializer.newInstance();
-					mTypeSerializers.put(instance.getDeserializedType(), instance);
-				}
-				catch (InstantiationException e) {
-					Log.e("Couldn't instantiate TypeSerializer.", e);
-				}
-				catch (IllegalAccessException e) {
-					Log.e("IllegalAccessException", e);
-				}
-			}
-		}
-
-		return true;
-	}
-
-	private void scanForModel(Context context) throws IOException {
-		String packageName = context.getPackageName();
-		String sourcePath = context.getApplicationInfo().sourceDir;
-		List<String> paths = new ArrayList<String>();
-
-		if (sourcePath != null && !(new File(sourcePath).isDirectory())) {
-			DexFile dexfile = new DexFile(sourcePath);
-			Enumeration<String> entries = dexfile.entries();
-
-			while (entries.hasMoreElements()) {
-				paths.add(entries.nextElement());
-			}
-		}
-		// Robolectric fallback
-		else {
-			ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
-			Enumeration<URL> resources = classLoader.getResources("");
-
-			while (resources.hasMoreElements()) {
-				String path = resources.nextElement().getFile();
-				if (path.contains("bin") || path.contains("classes")) {
-					paths.add(path);
-				}
-			}
-		}
-
-		for (String path : paths) {
-			File file = new File(path);
-			scanForModelClasses(file, packageName, context.getClassLoader());
-		}
-	}
-
-	private void scanForModelClasses(File path, String packageName, ClassLoader classLoader) {
-		if (path.isDirectory()) {
-			for (File file : path.listFiles()) {
-				scanForModelClasses(file, packageName, classLoader);
-			}
-		}
-		else {
-			String className = path.getName();
-
-			// Robolectric fallback
-			if (!path.getPath().equals(className)) {
-				className = path.getPath();
-
-				if (className.endsWith(".class")) {
-					className = className.substring(0, className.length() - 6);
-				}
-				else {
-					return;
-				}
-
-				className = className.replace(System.getProperty("file.separator"), ".");
-
-				int packageNameIndex = className.lastIndexOf(packageName);
-				if (packageNameIndex < 0) {
-					return;
-				}
-
-				className = className.substring(packageNameIndex);
-			}
-
-			try {
-				Class<?> discoveredClass = Class.forName(className, false, classLoader);
-				if (ReflectionUtils.isModel(discoveredClass)) {
-					@SuppressWarnings("unchecked")
-					Class<? extends Model> modelClass = (Class<? extends Model>) discoveredClass;
-					mTableInfos.put(modelClass, new TableInfo(modelClass));
-				}
-				else if (ReflectionUtils.isTypeSerializer(discoveredClass)) {
-					TypeSerializer instance = (TypeSerializer) discoveredClass.newInstance();
-					mTypeSerializers.put(instance.getDeserializedType(), instance);
-				}
-			}
-			catch (ClassNotFoundException e) {
-				Log.e("Couldn't create class.", e);
-			}
-			catch (InstantiationException e) {
-				Log.e("Couldn't instantiate TypeSerializer.", e);
-			}
-			catch (IllegalAccessException e) {
-				Log.e("IllegalAccessException", e);
-			}
-		}
-	}
-}
diff --git a/tests/res/drawable-hdpi/ic_launcher.png b/tests/res/drawable-hdpi/ic_launcher.png
deleted file mode 100644
index 96a442e5..00000000
Binary files a/tests/res/drawable-hdpi/ic_launcher.png and /dev/null differ
diff --git a/tests/res/drawable-ldpi/ic_launcher.png b/tests/res/drawable-ldpi/ic_launcher.png
deleted file mode 100644
index 99238729..00000000
Binary files a/tests/res/drawable-ldpi/ic_launcher.png and /dev/null differ
diff --git a/tests/res/drawable-mdpi/ic_launcher.png b/tests/res/drawable-mdpi/ic_launcher.png
deleted file mode 100644
index 359047df..00000000
Binary files a/tests/res/drawable-mdpi/ic_launcher.png and /dev/null differ
diff --git a/tests/res/drawable-xhdpi/ic_launcher.png b/tests/res/drawable-xhdpi/ic_launcher.png
deleted file mode 100644
index 71c6d760..00000000
Binary files a/tests/res/drawable-xhdpi/ic_launcher.png and /dev/null differ
