diff --git a/src/com/activeandroid/app/Application.java b/src/com/activeandroid/app/Application.java
index fbac45b4..f2af9ff9 100644
--- a/src/com/activeandroid/app/Application.java
+++ b/src/com/activeandroid/app/Application.java
@@ -27,6 +27,8 @@ public void onCreate() {
 
         //Start the DB request queue
         DBRequestQueue.getSharedInstance();
+
+
 	}
 	
 	@Override
diff --git a/src/com/activeandroid/manager/DBManager.java b/src/com/activeandroid/manager/DBManager.java
index 73b60beb..7d50cba9 100644
--- a/src/com/activeandroid/manager/DBManager.java
+++ b/src/com/activeandroid/manager/DBManager.java
@@ -1,24 +1,10 @@
 package com.activeandroid.manager;
 
-import android.database.DatabaseUtils;
-import android.os.Handler;
-
-import com.activeandroid.ActiveAndroid;
-import com.activeandroid.Cache;
 import com.activeandroid.Model;
-import com.activeandroid.exception.DBManagerNotOnMainException;
-import com.activeandroid.query.Select;
 import com.activeandroid.interfaces.CollectionReceiver;
 import com.activeandroid.interfaces.ObjectReceiver;
-import com.activeandroid.runtime.DBRequest;
 import com.activeandroid.runtime.DBRequestInfo;
-import com.activeandroid.runtime.DBRequestQueue;
-import com.activeandroid.util.SQLiteUtils;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
 
-import java.util.ArrayList;
 import java.util.List;
 
 /**
@@ -51,10 +37,10 @@ public static DBManager getSharedInstance(){
     }
 
     /**
-     * Adds a json object to this class, however its advised you ensure that the jsonobject being passed is what you want, since there's no type checking
+     * Adds a object to this class, however its advised you ensure that the object being passed is what you want, since there's no type checking
      * @param object
      */
-    public OBJECT_CLASS add(JSONObject object){
+    public OBJECT_CLASS add(Object object){
         return add(mObjectClass, object);
     }
 
@@ -64,19 +50,19 @@ public OBJECT_CLASS add(JSONObject object){
      * @param objectReceiver
      * @param dbRequestInfo
      */
-    public void addInBackground(final JSONObject jsonObject, final ObjectReceiver<OBJECT_CLASS> objectReceiver, DBRequestInfo dbRequestInfo){
+    public void addInBackground(final Object jsonObject, final ObjectReceiver<OBJECT_CLASS> objectReceiver, DBRequestInfo dbRequestInfo){
         addInBackground(mObjectClass, jsonObject, objectReceiver, dbRequestInfo);
     }
 
     /**
-     * Adds all objects from the passed jsonarray, may NOT be type-safe so be careful with this
+     * Adds all objects from the passed array, may NOT be type-safe so be careful with this
      * @param array
      */
-    public void addAll(JSONArray array){
+    public void addAll(Object array){
         addAll(mObjectClass, array);
     }
 
-    public void addAllInBackground(final JSONArray array, final Runnable finishedRunnable, DBRequestInfo requestInfo){
+    public void addAllInBackground(final Object array, final Runnable finishedRunnable, DBRequestInfo requestInfo){
         addAllInBackground(mObjectClass, array, finishedRunnable, requestInfo);
     }
 
@@ -122,7 +108,6 @@ public void fetchAllWithColumnValue(final Object value, final String column, fin
 
     /**
      * This will get the where statement for this object, the amount of ids passed must match the primary key column size
-     * @param uid
      * @return
      */
     public OBJECT_CLASS getObjectById(Object...ids){
diff --git a/src/com/activeandroid/manager/SingleDBManager.java b/src/com/activeandroid/manager/SingleDBManager.java
index e772bf9d..982205f6 100644
--- a/src/com/activeandroid/manager/SingleDBManager.java
+++ b/src/com/activeandroid/manager/SingleDBManager.java
@@ -15,11 +15,9 @@
 import com.activeandroid.runtime.DBRequest;
 import com.activeandroid.runtime.DBRequestInfo;
 import com.activeandroid.runtime.DBRequestQueue;
+import com.activeandroid.util.ReflectionUtils;
 import com.activeandroid.util.SQLiteUtils;
 
-import org.json.JSONArray;
-import org.json.JSONObject;
-
 import java.util.Collection;
 import java.util.List;
 
@@ -90,9 +88,9 @@ protected synchronized void processOnForeground(Runnable runnable){
      * Adds a json object to this class, however its advised you ensure that the jsonobject being passed is what you want, since there's no type checking
      * @param object
      */
-    public <OBJECT_CLASS extends Model> OBJECT_CLASS add(Class<OBJECT_CLASS> obClazz, JSONObject object){
+    public <OBJECT_CLASS extends Model> OBJECT_CLASS add(Class<OBJECT_CLASS> obClazz, Object object){
         try {
-            return add(obClazz.getConstructor(JSONObject.class).newInstance(object));
+            return add(obClazz.getConstructor(object.getClass()).newInstance(object));
         } catch (Throwable e) {
             e.printStackTrace();
         }
@@ -105,7 +103,7 @@ protected synchronized void processOnForeground(Runnable runnable){
      * @param objectReceiver
      * @param dbRequestInfo
      */
-    public <OBJECT_CLASS extends Model> void addInBackground(final Class<OBJECT_CLASS> obClazz, final JSONObject jsonObject, final ObjectReceiver<OBJECT_CLASS> objectReceiver, DBRequestInfo dbRequestInfo){
+    public <OBJECT_CLASS extends Model> void addInBackground(final Class<OBJECT_CLASS> obClazz, final Object jsonObject, final ObjectReceiver<OBJECT_CLASS> objectReceiver, DBRequestInfo dbRequestInfo){
         processOnBackground(new DBRequest(dbRequestInfo) {
             @Override
             public void run() {
@@ -152,14 +150,15 @@ public void run() {
     }
 
     /**
-     * Adds all objects from the passed jsonarray, may NOT be type-safe so be careful with this
+     * Adds all objects from the passed object (if it has collection-like methods), may NOT be type-safe so be careful with this
      * @param array
      */
-    public <OBJECT_CLASS extends Model> void addAll(Class<OBJECT_CLASS> obClazz, JSONArray array){
+    public <OBJECT_CLASS extends Model> void addAll(Class<OBJECT_CLASS> obClazz, Object array){
         ActiveAndroid.beginTransaction();
         try{
-            for(int i = 0; i < array.length();i++){
-                OBJECT_CLASS object = obClazz.getConstructor(JSONObject.class).newInstance(array.get(i));
+            int count = ReflectionUtils.invokeGetSizeOfObject(array);
+            for(int i = 0; i < count;i++){
+                OBJECT_CLASS object = obClazz.getConstructor(array.getClass()).newInstance(ReflectionUtils.invokeGetMethod(array, i));
                 add(object);
             }
             ActiveAndroid.setTransactionSuccessful();
@@ -171,7 +170,7 @@ public void run() {
 
     }
 
-    public <OBJECT_CLASS extends Model> void addAllInBackground(final Class<OBJECT_CLASS> obClazz, final JSONArray array, final Runnable finishedRunnable, DBRequestInfo dbRequestInfo){
+    public <OBJECT_CLASS extends Model> void addAllInBackground(final Class<OBJECT_CLASS> obClazz, final Object array, final Runnable finishedRunnable, DBRequestInfo dbRequestInfo){
         processOnBackground(new DBRequest(dbRequestInfo) {
             @Override
             public void run() {
diff --git a/src/com/activeandroid/runtime/DBRequestQueue.java b/src/com/activeandroid/runtime/DBRequestQueue.java
index 7db59bf2..a5f0dcd8 100644
--- a/src/com/activeandroid/runtime/DBRequestQueue.java
+++ b/src/com/activeandroid/runtime/DBRequestQueue.java
@@ -2,6 +2,7 @@
 
 import android.os.Looper;
 import android.os.Process;
+import android.util.Log;
 
 import java.util.Iterator;
 import java.util.concurrent.PriorityBlockingQueue;
@@ -61,6 +62,7 @@ public void run() {
             }
 
             try{
+                Log.d("DBRequestQueue", "Size is: " + mQueue.size() + " executing:" + runnable.getName());
                 runnable.run();
             } catch (Throwable t){
                 throw new RuntimeException(t);
@@ -71,7 +73,9 @@ public void run() {
 
     public void add(DBRequest runnable){
         synchronized (mQueue){
-            mQueue.add(runnable);
+            if(!mQueue.contains(runnable)){
+                mQueue.add(runnable);
+            }
         }
     }
 
diff --git a/src/com/activeandroid/util/ReflectionUtils.java b/src/com/activeandroid/util/ReflectionUtils.java
index e9a0d199..b84ea73b 100644
--- a/src/com/activeandroid/util/ReflectionUtils.java
+++ b/src/com/activeandroid/util/ReflectionUtils.java
@@ -24,6 +24,8 @@
 import com.activeandroid.serializer.TypeSerializer;
 
 import java.lang.reflect.Field;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
 import java.util.List;
 
 public final class ReflectionUtils {
@@ -83,4 +85,70 @@ public static boolean isSubclassOf(Class<?> type, Class<?> superClass) {
         }
         return outFields;
     }
+
+    /**
+     * Finds the method from the object to get the size of its components
+     * @param objectClazz
+     * @return
+     */
+    public static int invokeGetSizeOfObject(Object inObject){
+        Method method = null;
+        Class objectClazz = inObject.getClass();
+        try {
+            method = objectClazz.getDeclaredMethod("length", null);
+        } catch (NoSuchMethodException e) {
+            try {
+                method = objectClazz.getDeclaredMethod("size", null);
+            } catch (NoSuchMethodException e1) {
+                try {
+                    method = objectClazz.getDeclaredMethod("count", null);
+                } catch (NoSuchMethodException e2) {
+                    //custom method will go here
+                }
+            }
+        } finally {
+            if(method!=null){
+                method.setAccessible(true);
+                Integer count = 0;
+                try {
+                    count = (Integer) method.invoke(inObject, null);
+                } catch (Throwable throwable) {
+                    throw new RuntimeException(throwable);
+                } finally {
+                    return count;
+                }
+            } else{
+                return 0;
+            }
+        }
+    }
+
+    public static Object invokeGetMethod(Object inObject, int index){
+        Method method = null;
+        Class objectClazz = inObject.getClass();
+
+        try {
+            method = objectClazz.getDeclaredMethod("get", null);
+        } catch (NoSuchMethodException e) {
+            try {
+                method = objectClazz.getDeclaredMethod("getItem", null);
+            } catch (NoSuchMethodException e1) {
+
+            }
+        } finally {
+            if(method!=null){
+                method.setAccessible(true);
+                Object outObject = 0;
+                try {
+                    outObject = method.invoke(index, index);
+                } catch (Throwable e) {
+                    throw new RuntimeException(e);
+                } finally {
+                    return outObject;
+                }
+            } else{
+                return null;
+            }
+        }
+    }
 }
\ No newline at end of file
