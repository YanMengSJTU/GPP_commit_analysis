diff --git a/README.md b/README.md
index 61fc0d58..a8975d91 100644
--- a/README.md
+++ b/README.md
@@ -13,6 +13,7 @@ _ActiveAndroid On Steroids provides you with a completely thread-safe, priority-
 * [Creating your database model](http://github.com/agrosner/ActiveAndroid/wiki/Creating-your-database-model)
 * [Saving to the database](http://github.com/agrosner/ActiveAndroid/wiki/Saving-to-the-database)
 * [Querying the database](http://github.com/agrosner/ActiveAndroid/wiki/Querying-the-database)
+* [DB Managers] (http://github.com/agrosner/ActiveAndroid/wiki/DB-Managers)
 * [Type serializers](http://github.com/agrosner/ActiveAndroid/wiki/Type-serializers)
 * [Using the content provider](http://github.com/agrosner/ActiveAndroid/wiki/Using-the-content-provider)
 * [Schema migrations](http://github.com/agrosner/ActiveAndroid/wiki/Schema-migrations)
diff --git a/src/com/activeandroid/manager/SingleDBManager.java b/src/com/activeandroid/manager/SingleDBManager.java
index 935e7012..257cd5e7 100644
--- a/src/com/activeandroid/manager/SingleDBManager.java
+++ b/src/com/activeandroid/manager/SingleDBManager.java
@@ -379,16 +379,99 @@ public void run() {
     }
 
     /**
-     * Deletes an object from the db
-     * @param favoriteObject
+     * Deletes objects from the db
      * @param <OBJECT_CLASS>
      */
-    public void delete(Model favoriteObject) {
-        favoriteObject.delete();
+    public<OBJECT_CLASS extends Model> void deleteAll(OBJECT_CLASS...objects) {
+        ActiveAndroid.beginTransaction();
+        try{
+            for(OBJECT_CLASS object: objects){
+                object.delete();
+            }
+            ActiveAndroid.setTransactionSuccessful();
+        } finally {
+            ActiveAndroid.endTransaction();
+        }
+    }
+
+    /**
+     * Deletes objects from the db
+     * @param finishedRunnable
+     * @param tag
+     * @param priority
+     * @param objects
+     * @param <OBJECT_CLASS>
+     */
+    public<OBJECT_CLASS extends Model> void deleteAllInBackground(final Runnable finishedRunnable, String tag, int priority, final OBJECT_CLASS...objects) {
+        processOnBackground(new DBRequest(priority, tag) {
+            @Override
+            public void run() {
+                deleteAll(objects);
+                if(finishedRunnable!=null){
+                    finishedRunnable.run();
+                }
+            }
+        });
+    }
+
+    /**
+     * Deletes objects from the db
+     * @param finishedRunnable
+     * @param tag
+     * @param objects
+     * @param <OBJECT_CLASS>
+     */
+    public<OBJECT_CLASS extends Model> void deleteAllInBackground(final Runnable finishedRunnable, String tag, final OBJECT_CLASS...objects) {
+        processOnBackground(new DBRequest(DBRequest.PRIORITY_LOW, tag) {
+            @Override
+            public void run() {
+                deleteAll(objects);
+                if(finishedRunnable!=null){
+                    finishedRunnable.run();
+                }
+            }
+        });
+    }
+
+    /**
+     * Deletes objects from the db
+     * @param finishedRunnable
+     * @param priority
+     * @param objects
+     * @param <OBJECT_CLASS>
+     */
+    public<OBJECT_CLASS extends Model> void deleteAllInBackground(final Runnable finishedRunnable, int priority, final OBJECT_CLASS...objects) {
+        processOnBackground(new DBRequest(priority) {
+            @Override
+            public void run() {
+                deleteAll(objects);
+                if(finishedRunnable!=null){
+                    finishedRunnable.run();
+                }
+            }
+        });
+    }
+
+    /**
+     * Deletes objects from the db
+     * @param finishedRunnable
+     * @param objects
+     * @param <OBJECT_CLASS>
+     */
+    public<OBJECT_CLASS extends Model> void deleteAllInBackground(final Runnable finishedRunnable, final OBJECT_CLASS...objects) {
+        processOnBackground(new DBRequest() {
+            @Override
+            public void run() {
+                deleteAll(objects);
+                if(finishedRunnable!=null){
+                    finishedRunnable.run();
+                }
+            }
+        });
     }
 
     /**
-     * Deletes all objects from the class specified
+     * Deletes all objects from the specified table
      * @param obClazz
      * @param <OBJECT_CLASS>
      */
@@ -401,8 +484,14 @@ public void delete(Model favoriteObject) {
      * @param list - the list of model objects you wish to delete
      */
     public <OBJECT_CLASS extends Model, LIST_CLASS extends List<OBJECT_CLASS>> void deleteAll(LIST_CLASS list){
-        for(OBJECT_CLASS object: list){
-            object.delete();
+        ActiveAndroid.beginTransaction();
+        try{
+            for(OBJECT_CLASS object: list){
+                object.delete();
+            }
+            ActiveAndroid.setTransactionSuccessful();
+        } finally {
+            ActiveAndroid.endTransaction();
         }
     }
 }
