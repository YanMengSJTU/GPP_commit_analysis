diff --git a/src/com/activeandroid/query/From.java b/src/com/activeandroid/query/From.java
index 24e9fe10..32d6e8b9 100644
--- a/src/com/activeandroid/query/From.java
+++ b/src/com/activeandroid/query/From.java
@@ -17,6 +17,7 @@
  */
 
 import android.text.TextUtils;
+
 import com.activeandroid.Cache;
 import com.activeandroid.Model;
 import com.activeandroid.content.ContentProvider;
@@ -25,7 +26,6 @@
 import com.activeandroid.util.SQLiteUtils;
 
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.List;
 
 public final class From implements Sqlable {
@@ -100,13 +100,13 @@ public From where(String where) {
     public From where(String where, Object... args) {
         if (mWhere != null) {                                    // Chain conditions if a previous
             mWhere = mWhere + " AND " + where;                   // condition exists.
-            mArguments.addAll(Arrays.asList(args));
-
-        } else {
+        }
+        else {
             mWhere = where;
-            mArguments.addAll(Arrays.asList(args));
         }
 
+        addArguments(args);
+
         return this;
     }
 
@@ -144,7 +144,12 @@ public From offset(String offset) {
 	}
 
 	void addArguments(Object[] args) {
-		mArguments.addAll(Arrays.asList(args));
+        for( Object arg : args ) {
+            if (arg.getClass() == boolean.class || arg.getClass() == Boolean.class)
+                arg = ( arg.equals(true) ? 1 : 0 );
+
+            mArguments.add(arg);
+        }
 	}
 
 	@Override
diff --git a/tests/src/com/activeandroid/test/MockModel.java b/tests/src/com/activeandroid/test/MockModel.java
index 718e945b..ff61dde3 100644
--- a/tests/src/com/activeandroid/test/MockModel.java
+++ b/tests/src/com/activeandroid/test/MockModel.java
@@ -17,8 +17,22 @@
  */
 
 import com.activeandroid.Model;
+import com.activeandroid.annotation.Column;
 import com.activeandroid.annotation.Table;
 
+import java.util.Date;
+
 @Table(name = "MockModel")
 public class MockModel extends Model {
+    @Column
+    public Date dateField;
+
+    @Column
+    public double doubleField;
+
+    @Column
+    public int intField;
+
+    @Column
+    public boolean booleanField;
 }
diff --git a/tests/src/com/activeandroid/test/ModelTest.java b/tests/src/com/activeandroid/test/ModelTest.java
index 2fe89373..ca2a2f62 100644
--- a/tests/src/com/activeandroid/test/ModelTest.java
+++ b/tests/src/com/activeandroid/test/ModelTest.java
@@ -16,9 +16,13 @@
 
 package com.activeandroid.test;
 
+import com.activeandroid.Cache;
 import com.activeandroid.Model;
+import com.activeandroid.TableInfo;
 import com.activeandroid.annotation.Table;
+import com.activeandroid.query.Select;
 
+import java.lang.reflect.Field;
 import java.util.HashSet;
 import java.util.Set;
 
@@ -125,6 +129,46 @@ public void testHashCodeDifferentRows() {
 		assertEquals(2, set.size());
 	}
 
+    /**
+     * Column names should default to the field name.
+     */
+    public void testColumnNamesDefaulToFieldNames() {
+        TableInfo tableInfo = Cache.getTableInfo(MockModel.class);
+
+        for ( Field field : tableInfo.getFields() ) {
+            // Id column is a special case, we'll ignore that one.
+            if ( field.getName().equals("mId") ) continue;
+
+            assertEquals(field.getName(), tableInfo.getColumnName(field));
+        }
+    }
+
+    /**
+     * Boolean should handle integer (0/1) and boolean (false/true) values.
+     */
+    public void testBooleanColumnType() {
+        MockModel mockModel = new MockModel();
+        mockModel.booleanField = false;
+        Long id = mockModel.save();
+
+        boolean databaseBooleanValue = MockModel.load( MockModel.class, id ).booleanField;
+
+        assertEquals( false, databaseBooleanValue );
+
+        // Test passing both a integer and a boolean into the where conditional.
+        assertEquals(
+                mockModel,
+                new Select().from(MockModel.class).where("booleanField = ?", 0).executeSingle() );
+
+        assertEquals(
+                mockModel,
+                new Select().from(MockModel.class).where("booleanField = ?", false).executeSingle() );
+
+        assertNull( new Select().from(MockModel.class).where("booleanField = ?", 1).executeSingle() );
+
+        assertNull( new Select().from(MockModel.class).where("booleanField = ?", true).executeSingle() );
+    }
+
 	/**
 	 * Mock model as we need 2 different model classes.
 	 */
