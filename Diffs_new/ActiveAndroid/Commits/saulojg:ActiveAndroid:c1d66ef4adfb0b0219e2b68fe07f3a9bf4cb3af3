diff --git a/src/com/activeandroid/internal/AnnotationProcessor.java b/src/com/activeandroid/internal/AnnotationProcessor.java
index d9b3dc3e..cab758d4 100644
--- a/src/com/activeandroid/internal/AnnotationProcessor.java
+++ b/src/com/activeandroid/internal/AnnotationProcessor.java
@@ -134,7 +134,8 @@ private void generate(TypeElement tableElement, Set<VariableElement> columns) {
 
 	private String getLoadFromCursorCode(Set<VariableElement> columns) {
 		StringBuilder stringBuilder = new StringBuilder();
-
+		stringBuilder.append("    int i = -1; // column index \n");
+		final String nullCheck = CURSOR + ".isNull(i) ? null : ";
 		for (VariableElement column : columns) {
 			Column annotation = column.getAnnotation(Column.class);
 
@@ -147,40 +148,56 @@ private String getLoadFromCursorCode(Set<VariableElement> columns) {
 			boolean notPrimitiveType = typeMirror instanceof DeclaredType;
 			String type = typeMirror.toString() + ".class";
 			String getColumnIndex = COLUMNS_ORDERED + ".indexOf(\"" + fieldName + "\")";
+			String getColumnIndexAssignment = "i = " + getColumnIndex + "; \n";
 
+			stringBuilder.append("    " + getColumnIndexAssignment );
 			if (notPrimitiveType) {
 				stringBuilder.append("    if (ModelHelper.isSerializable(" + type + ")) {\n");
-				stringBuilder.append("      " + MODEL + "." + column.getSimpleName() + " = (" + typeMirror.toString() + ") ModelHelper.getSerializable(cursor, " + type + ", " + getColumnIndex + ");\n");
+				stringBuilder.append("      " + MODEL + "." + column.getSimpleName() + " = (" + typeMirror.toString() + ") ModelHelper.getSerializable(cursor, " + type + ", i);\n");
 				stringBuilder.append("    } else {\n");
 				stringBuilder.append("      " + MODEL + "." + column.getSimpleName() + " = ");
 			} else {
 				stringBuilder.append("    " + MODEL + "." + column.getSimpleName() + " = ");
 			}
 
-			if (isTypeOf(typeMirror, Integer.class) || isTypeOf(typeMirror, int.class))
-				stringBuilder.append(CURSOR + ".getInt(" + getColumnIndex + ");\n");
-			else if (isTypeOf(typeMirror, Byte.class) || isTypeOf(typeMirror, byte.class))
-				stringBuilder.append(CURSOR + ".getInt(" + getColumnIndex + ");\n");
-			else if (isTypeOf(typeMirror, Short.class) || isTypeOf(typeMirror, short.class))
-				stringBuilder.append(CURSOR + ".getInt(" + getColumnIndex + ");\n");
-			else if (isTypeOf(typeMirror, Long.class) || isTypeOf(typeMirror, long.class))
-				stringBuilder.append(CURSOR + ".getLong(" + getColumnIndex + ");\n");
-			else if (isTypeOf(typeMirror, Float.class) || isTypeOf(typeMirror, float.class))
-				stringBuilder.append(CURSOR + ".getFloat(" + getColumnIndex + ");\n");
-			else if (isTypeOf(typeMirror, Double.class) || isTypeOf(typeMirror, double.class))
-				stringBuilder.append(CURSOR + ".getDouble(" + getColumnIndex + ");\n");
-			else if (isTypeOf(typeMirror, Boolean.class) || isTypeOf(typeMirror, boolean.class))
-				stringBuilder.append(CURSOR + ".getInt(" + getColumnIndex + ") != 0;\n");
-			else if (isTypeOf(typeMirror, Character.class) || isTypeOf(typeMirror, char.class))
-				stringBuilder.append(CURSOR + ".getString(" + getColumnIndex + ");\n");
+			if (isTypeOf(typeMirror, Integer.class) || isTypeOf(typeMirror, Byte.class) || isTypeOf(typeMirror, Short.class) )
+				stringBuilder.append(nullCheck).append(CURSOR + ".getInt(i);\n");
+			else if (isTypeOf(typeMirror, Long.class))
+				stringBuilder.append(nullCheck).append(CURSOR + ".getLong(i);\n");
+			else if (isTypeOf(typeMirror, Float.class))
+				stringBuilder.append(nullCheck).append(CURSOR + ".getFloat(i);\n");
+			else if (isTypeOf(typeMirror, Double.class))
+				stringBuilder.append(nullCheck).append(CURSOR + ".getDouble(i);\n");
+			else if (isTypeOf(typeMirror, int.class))
+				stringBuilder.append(CURSOR + ".getInt(i);\n");
+			else if (isTypeOf(typeMirror, byte.class))
+				stringBuilder.append(CURSOR + ".getInt(i);\n");
+			else if (isTypeOf(typeMirror, short.class))
+				stringBuilder.append(CURSOR + ".getInt(i);\n");
+			else if (isTypeOf(typeMirror, long.class))
+				stringBuilder.append(CURSOR + ".getLong(i);\n");
+			else if (isTypeOf(typeMirror, float.class))
+				stringBuilder.append(CURSOR + ".getFloat(i);\n");
+			else if (isTypeOf(typeMirror, double.class))
+				stringBuilder.append(CURSOR + ".getDouble(i);\n");
+			else if (isTypeOf(typeMirror, Boolean.class))
+				stringBuilder.append(nullCheck).append(CURSOR + ".getInt(i) != 0;\n");
+			else if (isTypeOf(typeMirror, boolean.class))
+				stringBuilder.append(CURSOR + ".getInt(i) != 0;\n");
+			else if (isTypeOf(typeMirror, char.class))
+				stringBuilder.append(CURSOR + ".getString(i);\n");
+			else if (isTypeOf(typeMirror, Character.class))
+				stringBuilder.append(nullCheck).append(CURSOR + ".getString(i);\n");
 			else if (isTypeOf(typeMirror, String.class))
-				stringBuilder.append(CURSOR + ".getString(" + getColumnIndex + ");\n");
-			else if (isTypeOf(typeMirror, Byte[].class) || isTypeOf(typeMirror, byte[].class))
-				stringBuilder.append(CURSOR + ".getBlob(" + getColumnIndex + ");\n");
+				stringBuilder.append(nullCheck).append(CURSOR + ".getString(i);\n");
+			else if (isTypeOf(typeMirror, byte[].class))
+				stringBuilder.append(CURSOR + ".getBlob(i);\n");
+			else if (isTypeOf(typeMirror, Byte[].class))
+				stringBuilder.append(nullCheck).append(CURSOR + ".getBlob(i);\n");
 			else if (isTypeOf(typeMirror, Model.class))
-				stringBuilder.append("(" + typeMirror.toString() + ") ModelHelper.getModel(cursor, " + type + ", " + getColumnIndex + ");\n");
+				stringBuilder.append("(" + typeMirror.toString() + ") ModelHelper.getModel(cursor, " + type + ", i);\n");
 			else if (isTypeOf(typeMirror, Enum.class))
-				stringBuilder.append("(" + typeMirror.toString() + ") ModelHelper.getEnum(cursor, " + type + ", " + getColumnIndex + ");\n");
+				stringBuilder.append("(" + typeMirror.toString() + ") ModelHelper.getEnum(cursor, " + type + ", i);\n");
 			else
 				stringBuilder.append(" null;\n");
 			if (notPrimitiveType) {
