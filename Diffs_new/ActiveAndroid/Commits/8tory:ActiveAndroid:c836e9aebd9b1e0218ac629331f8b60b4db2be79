diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 00000000..667288ad
Binary files /dev/null and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 00000000..330a2c9f
--- /dev/null
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Fri Nov 29 09:06:20 EST 2013
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=http\://services.gradle.org/distributions/gradle-1.8-bin.zip
diff --git a/gradlew b/gradlew
new file mode 100755
index 00000000..91a7e269
--- /dev/null
+++ b/gradlew
@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+fi
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >&-
+APP_HOME="`pwd -P`"
+cd "$SAVED" >&-
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
index 00000000..aec99730
--- /dev/null
+++ b/gradlew.bat
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/src/com/activeandroid/Configuration.java b/src/com/activeandroid/Configuration.java
index b1525658..4c2eab4a 100644
--- a/src/com/activeandroid/Configuration.java
+++ b/src/com/activeandroid/Configuration.java
@@ -273,11 +273,9 @@ private int getMetaDataDatabaseVersionOrDefault() {
 			final List<Class<? extends Model>> modelClasses = new ArrayList<Class<? extends Model>>();
 			final ClassLoader classLoader = mContext.getClass().getClassLoader();
 			for (String model : models) {
-				model = ensurePackageInName(model);
-
 				try {
 					@SuppressWarnings("unchecked")
-					Class<? extends Model> modelClass = (Class<? extends Model>) Class.forName(model, false, classLoader);
+					Class<? extends Model> modelClass = (Class<? extends Model>) Class.forName(model.trim(), false, classLoader);
 					if (ReflectionUtils.isModel(modelClass)) {
 						modelClasses.add(modelClass);
 					}
@@ -294,11 +292,9 @@ private int getMetaDataDatabaseVersionOrDefault() {
 			final List<Class<? extends TypeSerializer>> typeSerializers = new ArrayList<Class<? extends TypeSerializer>>();
 			final ClassLoader classLoader = mContext.getClass().getClassLoader();
 			for (String serializer : serializers) {
-				serializer = ensurePackageInName(serializer);
-
 				try {
 					@SuppressWarnings("unchecked")
-					Class<? extends TypeSerializer> serializerClass = (Class<? extends TypeSerializer>) Class.forName(serializer, false, classLoader);
+					Class<? extends TypeSerializer> serializerClass = (Class<? extends TypeSerializer>) Class.forName(serializer.trim(), false, classLoader);
 					if (ReflectionUtils.isTypeSerializer(serializerClass)) {
 						typeSerializers.add(serializerClass);
 					}
@@ -311,13 +307,5 @@ private int getMetaDataDatabaseVersionOrDefault() {
 			return typeSerializers;
 		}
 
-		private String ensurePackageInName(String name) {
-			String packageName = mContext.getPackageName();
-			if (name.startsWith(packageName)) {
-				return name.trim();
-			}
-
-			return packageName + name.trim();
-		}
 	}
 }
diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index faf55a89..8ad17ee0 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -229,8 +229,8 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 
 	// super me: super.save();
 	@SuppressLint("NewApi")
-	public void save() {
-		if (!enable) return;
+	public Long save() {
+		if (!enable) return mId;
 		final ContentValues values = toContentValues();
 
 		// TODO optimize the following code snippet
@@ -289,6 +289,7 @@ public void save() {
 
 		Cache.getContext().getContentResolver()
 				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mId), null);
+		return mId;
 	}
 
 	// Convenience methods
diff --git a/src/com/activeandroid/ModelInfo.java b/src/com/activeandroid/ModelInfo.java
index a7e33df9..a4c94815 100644
--- a/src/com/activeandroid/ModelInfo.java
+++ b/src/com/activeandroid/ModelInfo.java
@@ -35,6 +35,7 @@
 import com.activeandroid.serializer.TypeSerializer;
 import com.activeandroid.serializer.UtilDateSerializer;
 import com.activeandroid.serializer.FileSerializer;
+import com.activeandroid.serializer.UriSerializer;
 import com.activeandroid.util.Log;
 import com.activeandroid.util.ReflectionUtils;
 import dalvik.system.DexFile;
@@ -52,6 +53,7 @@
 			put(java.sql.Date.class, new SqlDateSerializer());
 			put(java.util.Date.class, new UtilDateSerializer());
 			put(java.io.File.class, new FileSerializer());
+			put(android.net.Uri.class, new UriSerializer());
 		}
 	};
 
diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index d6f869c2..ef293830 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -17,15 +17,18 @@
  */
 
 import java.lang.reflect.Field;
-import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.HashMap;
+import java.util.LinkedHashMap;
+import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 
+import android.text.TextUtils;
+
 import com.activeandroid.annotation.Column;
 import com.activeandroid.annotation.Table;
-import com.activeandroid.util.Log;
 import com.activeandroid.util.ReflectionUtils;
 
 public final class TableInfo {
@@ -38,7 +41,7 @@
 	private String mModule;
 	private String mSchema;
 
-	private Map<Field, String> mColumnNames = new HashMap<Field, String>();
+	private Map<Field, String> mColumnNames = new LinkedHashMap<Field, String>();
 	private Map<String, Column> mColumns = new HashMap<String, Column>();
 	private Map<String, Boolean> mReadOnlyColumns = new HashMap<String, Boolean>();
 
@@ -58,27 +61,19 @@ public TableInfo(Class<? extends Model> type) {
 			mTableName = type.getSimpleName();
 		}
 
-		List<Field> fields = new ArrayList<Field>();
-		try {
-			fields = ReflectionUtils.getAllFields(fields, Class.forName(type.getName()));
-			fields.add(getIdField(type));
-		} catch (ClassNotFoundException e) {
-			e.printStackTrace();
-		}
-
+		List<Field> fields = new LinkedList<Field>(ReflectionUtils.getDeclaredColumnFields(type));
+		Collections.reverse(fields);
+		
 		for (Field field : fields) {
-			if (field.isAnnotationPresent(Column.class)) {
-				final Column columnAnnotation = field.getAnnotation(Column.class);
-				String fieldName;
-				if (!"".equals(columnAnnotation.name())) {
-					fieldName = columnAnnotation.name();
-				} else {
-					fieldName = field.getName();
-				}
-				mColumnNames.put(field, fieldName);
-				mColumns.put(fieldName, columnAnnotation);
-				mReadOnlyColumns.put(fieldName, columnAnnotation.readOnly());
+			final Column columnAnnotation = field.getAnnotation(Column.class);
+			String columnName = columnAnnotation.name();
+			if (TextUtils.isEmpty(columnName)) {
+				columnName = field.getName();
 			}
+			
+			mColumnNames.put(field, columnName);
+                        mColumns.put(columnName, columnAnnotation);
+                        mReadOnlyColumns.put(columnName, columnAnnotation.readOnly());
 		}
 	}
 
@@ -121,23 +116,4 @@ public Column getColumn(String name) {
 	public boolean isReadOnlyColumn(String name) {
 		return mReadOnlyColumns.get(name);
 	}
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PRIVATE METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	private Field getIdField(Class<?> type) {
-		if (type.equals(Model.class)) {
-			try {
-				return type.getDeclaredField("mId");
-			}
-			catch (NoSuchFieldException e) {
-				Log.e("Impossible!", e);
-			}
-		}
-		else if (type.getSuperclass() != null) {
-			return getIdField(type.getSuperclass());
-		}
-
-		return null;
-	}
 }
diff --git a/src/com/activeandroid/annotation/Column.java b/src/com/activeandroid/annotation/Column.java
index dbca8e7e..fd80b4a9 100644
--- a/src/com/activeandroid/annotation/Column.java
+++ b/src/com/activeandroid/annotation/Column.java
@@ -89,7 +89,7 @@
 	public boolean index() default false;
 
 	/*
-	 * If set indexGroup = "group_name", we will create a index with group.
+	 * If set indexGroups = {"group_name"}, we will create a index with group.
 	 *
 	 * Example:
 	 *
diff --git a/src/com/activeandroid/query/Update.java b/src/com/activeandroid/query/Update.java
index 336c4821..a69d2d8e 100644
--- a/src/com/activeandroid/query/Update.java
+++ b/src/com/activeandroid/query/Update.java
@@ -40,6 +40,11 @@ public Set set(String set, Object... args) {
 
 	@Override
 	public String toSql() {
-		return "UPDATE " + Cache.getTableName(mType) + " ";
+		StringBuilder sql = new StringBuilder();
+		sql.append("UPDATE ");
+		sql.append(Cache.getTableName(mType));
+		sql.append(" ");
+
+		return sql.toString();
 	}
-}
\ No newline at end of file
+}
diff --git a/src/com/activeandroid/serializer/BigDecimalSerializer.java b/src/com/activeandroid/serializer/BigDecimalSerializer.java
new file mode 100644
index 00000000..333f900f
--- /dev/null
+++ b/src/com/activeandroid/serializer/BigDecimalSerializer.java
@@ -0,0 +1,29 @@
+package com.activeandroid.serializer;
+
+import java.math.BigDecimal;
+
+public final class BigDecimalSerializer extends TypeSerializer {
+	public Class<?> getDeserializedType() {
+		return BigDecimal.class;
+	}
+
+	public Class<?> getSerializedType() {
+		return String.class;
+	}
+
+	public String serialize(Object data) {
+		if (data == null) {
+			return null;
+		}
+
+		return ((BigDecimal) data).toString();
+	}
+
+	public BigDecimal deserialize(Object data) {
+		if (data == null) {
+			return null;
+		}
+
+		return new BigDecimal((String) data);
+	}
+}
\ No newline at end of file
diff --git a/src/com/activeandroid/serializer/UUIDSerializer.java b/src/com/activeandroid/serializer/UUIDSerializer.java
new file mode 100644
index 00000000..94ba37ff
--- /dev/null
+++ b/src/com/activeandroid/serializer/UUIDSerializer.java
@@ -0,0 +1,29 @@
+package com.activeandroid.serializer;
+
+import java.util.UUID;
+
+public final class UUIDSerializer extends TypeSerializer {
+	public Class<?> getDeserializedType() {
+		return UUID.class;
+	}
+
+	public Class<?> getSerializedType() {
+		return String.class;
+	}
+
+	public String serialize(Object data) {
+		if (data == null) {
+			return null;
+		}
+
+		return ((UUID) data).toString();
+	}
+
+	public UUID deserialize(Object data) {
+		if (data == null) {
+			return null;
+		}
+
+		return UUID.fromString((String)data);
+	}
+}
\ No newline at end of file
diff --git a/src/com/activeandroid/serializer/UriSerializer.java b/src/com/activeandroid/serializer/UriSerializer.java
new file mode 100644
index 00000000..73dee701
--- /dev/null
+++ b/src/com/activeandroid/serializer/UriSerializer.java
@@ -0,0 +1,46 @@
+package com.activeandroid.serializer;
+
+import android.net.Uri;
+
+/*
+ * Copyright (C) 2010 Michael Pardo
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+public final class UriSerializer extends TypeSerializer {
+	public Class<?> getDeserializedType() {
+		return Uri.class;
+	}
+
+	public Class<?> getSerializedType() {
+		return String.class;
+	}
+
+	public String serialize(Object data) {
+		if (data == null) {
+			return null;
+		}
+
+		return ((Uri) data).toString();
+	}
+
+	public Uri deserialize(Object data) {
+		if (data == null) {
+			return null;
+		}
+
+		return Uri.parse((String) data);
+	}
+}
diff --git a/src/com/activeandroid/util/ModelCursorMarshaller.java b/src/com/activeandroid/util/ModelCursorMarshaller.java
index 463181db..5409d030 100644
--- a/src/com/activeandroid/util/ModelCursorMarshaller.java
+++ b/src/com/activeandroid/util/ModelCursorMarshaller.java
@@ -31,7 +31,20 @@ public T marshall(Cursor cursor) {
                 entity.loadFromCursor(cursor);
                 //android.util.Log.d("ModelCursorMarshaller", "" + entity);
             }
-        } catch (Exception e) {
+        }
+        /*
+		catch (NoSuchMethodException e) {
+			throw new RuntimeException(
+                "Your model " + type.getName() + " does not define a default " +
+                "constructor. The default constructor is required for " +
+                "now in ActiveAndroid models, as the process to " +
+                "populate the ORM model is : " +
+                "1. instantiate default model " +
+                "2. populate fields"
+            );
+        }
+        */
+        catch (Exception e) {
             Log.e("Failed to process cursor.", e);
             //android.util.Log.e("ModelCursorMarshaller", "" + e);
         }
diff --git a/src/com/activeandroid/util/ReflectionUtils.java b/src/com/activeandroid/util/ReflectionUtils.java
index d8ecdd68..679adec5 100644
--- a/src/com/activeandroid/util/ReflectionUtils.java
+++ b/src/com/activeandroid/util/ReflectionUtils.java
@@ -16,11 +16,20 @@
  * limitations under the License.
  */
 
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.LinkedHashSet;
+import java.util.Set;
+
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
 
 import com.activeandroid.Model;
+import com.activeandroid.annotation.Column;
 import com.activeandroid.serializer.TypeSerializer;
 
 import java.lang.reflect.Field;
@@ -32,7 +41,7 @@
 	//////////////////////////////////////////////////////////////////////////////////////
 
 	public static boolean isModel(Class<?> type) {
-		return isSubclassOf(type, Model.class);
+		return isSubclassOf(type, Model.class) && (!Modifier.isAbstract(type.getModifiers()));
 	}
 
 	public static boolean isTypeSerializer(Class<?> type) {
@@ -57,6 +66,34 @@ public static boolean isTypeSerializer(Class<?> type) {
 
 		return null;
 	}
+	
+	public static Set<Field> getDeclaredColumnFields(Class<?> type) {
+		Set<Field> declaredColumnFields = Collections.emptySet();
+		
+		if (ReflectionUtils.isSubclassOf(type, Model.class) || Model.class.equals(type)) {
+			declaredColumnFields = new LinkedHashSet<Field>();
+			
+			Field[] fields = type.getDeclaredFields();
+			Arrays.sort(fields, new Comparator<Field>() {
+				@Override
+				public int compare(Field field1, Field field2) {
+					return field2.getName().compareTo(field1.getName());
+				}
+			});
+			for (Field field : fields) {
+				if (field.isAnnotationPresent(Column.class)) {
+					declaredColumnFields.add(field);
+				}
+			}
+	
+			Class<?> parentType = type.getSuperclass();
+			if (parentType != null) {
+				declaredColumnFields.addAll(getDeclaredColumnFields(parentType));
+			}
+		}
+		
+		return declaredColumnFields;		
+	}
 
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PRIVATE METHODS
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index bf4201dc..56c55e04 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -30,7 +30,6 @@
 import com.activeandroid.TableInfo;
 import com.activeandroid.annotation.Column;
 import com.activeandroid.annotation.Column.ConflictAction;
-import com.activeandroid.annotation.Table;
 import com.activeandroid.serializer.TypeSerializer;
 import com.activeandroid.util.Log;
 import com.novoda.notils.cursor.CursorList;
@@ -265,27 +264,6 @@ public static Cursor query(String table, String[] projection, String selection,
 
 	// Database creation
 
-	public static String[] createIndexDefinition(TableInfo tableInfo) {
-		final ArrayList<String> definitions = new ArrayList<String>();
-		sIndexGroupMap = new HashMap<String, List<String>>();
-
-		for (Field field : tableInfo.getFields()) {
-			createIndexColumnDefinition(tableInfo, field);
-		}
-
-		if (sIndexGroupMap.isEmpty()) {
-			return new String[0];
-		}
-
-		for (Map.Entry<String, List<String>> entry : sIndexGroupMap.entrySet()) {
-			definitions.add(String.format("CREATE INDEX IF NOT EXISTS %s on %s(%s);",
-					"index_" + tableInfo.getTableName() + "_" + entry.getKey(),
-					tableInfo.getTableName(), TextUtils.join(", ", entry.getValue())));
-		}
-
-		return definitions.toArray(new String[definitions.size()]);
-	}
-
 	public static String getSchema(SQLiteDatabase db, TableInfo tableInfo) {
 		return getSchema(db, tableInfo.getTableName());
 	}
@@ -418,31 +396,6 @@ private boolean addColumnsIfNeed(String table, String to, String from) {
 		return null;
 	}
 
-	public static void createIndexColumnDefinition(TableInfo tableInfo, Field field) {
-		final String name = tableInfo.getColumnName(field);
-		final Column column = field.getAnnotation(Column.class);
-
-		if (column.index()) {
-			List<String> list = new ArrayList<String>();
-			list.add(name);
-			sIndexGroupMap.put(name, list);
-		}
-
-		String[] groups = column.indexGroups();
-		for (String group : groups) {
-			if (group.isEmpty())
-				continue;
-
-			List<String> list = sIndexGroupMap.get(group);
-			if (list == null) {
-				list = new ArrayList<String>();
-			}
-
-			list.add(name);
-			sIndexGroupMap.put(group, list);
-		}
-	}
-
 	public static ArrayList<String> createUniqueDefinition(TableInfo tableInfo) {
 		final ArrayList<String> definitions = new ArrayList<String>();
 		sUniqueGroupMap = new HashMap<String, List<String>>();
@@ -495,6 +448,52 @@ public static void createUniqueColumnDefinition(TableInfo tableInfo, Field field
 		}
 	}
 
+	public static String[] createIndexDefinition(TableInfo tableInfo) {
+		final ArrayList<String> definitions = new ArrayList<String>();
+		sIndexGroupMap = new HashMap<String, List<String>>();
+
+		for (Field field : tableInfo.getFields()) {
+			createIndexColumnDefinition(tableInfo, field);
+		}
+
+		if (sIndexGroupMap.isEmpty()) {
+			return new String[0];
+		}
+
+		for (Map.Entry<String, List<String>> entry : sIndexGroupMap.entrySet()) {
+			definitions.add(String.format("CREATE INDEX IF NOT EXISTS %s on %s(%s);",
+					"index_" + tableInfo.getTableName() + "_" + entry.getKey(),
+					tableInfo.getTableName(), TextUtils.join(", ", entry.getValue())));
+		}
+
+		return definitions.toArray(new String[definitions.size()]);
+	}
+
+	public static void createIndexColumnDefinition(TableInfo tableInfo, Field field) {
+		final String name = tableInfo.getColumnName(field);
+		final Column column = field.getAnnotation(Column.class);
+
+		if (column.index()) {
+			List<String> list = new ArrayList<String>();
+			list.add(name);
+			sIndexGroupMap.put(name, list);
+		}
+
+		String[] groups = column.indexGroups();
+		for (String group : groups) {
+			if (group.isEmpty())
+				continue;
+
+			List<String> list = sIndexGroupMap.get(group);
+			if (list == null) {
+				list = new ArrayList<String>();
+			}
+
+			list.add(name);
+			sIndexGroupMap.put(group, list);
+		}
+	}
+
 	public static String createTableDefinition(TableInfo tableInfo) {
 		if (!TextUtils.isEmpty(tableInfo.getModule())) return null;
 
