diff --git a/src/META-INF/MANIFEST.MF b/src/META-INF/MANIFEST.MF
deleted file mode 100644
index ef62bb7b..00000000
--- a/src/META-INF/MANIFEST.MF
+++ /dev/null
@@ -1,3 +0,0 @@
-Manifest-Version: 1.0
-Main-Class: 
-
diff --git a/src/com/activeandroid/DatabaseHelper.java b/src/com/activeandroid/DatabaseHelper.java
index aa012665..5543b980 100644
--- a/src/com/activeandroid/DatabaseHelper.java
+++ b/src/com/activeandroid/DatabaseHelper.java
@@ -29,6 +29,7 @@
 import java.util.List;
 
 import android.content.Context;
+import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
 
@@ -145,18 +146,7 @@ public int compare(Migration migration, Migration migration2) {
         db.beginTransaction();
 
         for (Migration migration : migrations) {
-            String []sqlStatements = migration.executeSql();
-
-            if (sqlStatements == null) {
-                sqlStatements = MigrationUtils.migrationOperationsToSql(migration.change());
-            }
-
-            if (sqlStatements == null) break;
-
-            for (String statement : sqlStatements) {
-                db.execSQL(statement);
-            }
-
+            migration.execute(db);
             migrationExecuted = true;
         }
 
diff --git a/src/com/activeandroid/migration/Migration.java b/src/com/activeandroid/migration/Migration.java
index 2abddb7b..0eb99c25 100644
--- a/src/com/activeandroid/migration/Migration.java
+++ b/src/com/activeandroid/migration/Migration.java
@@ -1,16 +1,31 @@
 package com.activeandroid.migration;
 
-import com.activeandroid.migration.operation.AddColumn;
+import android.database.SQLException;
+import android.database.sqlite.SQLiteDatabase;
+import com.activeandroid.util.Log;
+import com.activeandroid.util.MigrationUtils;
+
+import java.util.List;
 
 public abstract class Migration {
 
-    public MigrationOperation[] change() {
-        return null;
-    }
+    public abstract MigrationOperation[] getMigrations() throws Exception;
+    public abstract int databaseVersion();
 
-    public String[] executeSql() {
-        return null;
-    }
+    public void execute(SQLiteDatabase db) {
+        try {
+            List<String> sqlStatements = MigrationUtils.migrationOperationsToSql(getMigrations());
 
-    public abstract int databaseVersion();
+            for (String statement : sqlStatements) {
+                try {
+                    db.execSQL(statement);
+                } catch (SQLException e) {
+                    Log.e("ActiveAndroid: Error running generated SQL statement for migration: " + statement + ".");
+                    e.printStackTrace();
+                }
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
 }
diff --git a/src/com/activeandroid/migration/MigrationOperation.java b/src/com/activeandroid/migration/MigrationOperation.java
index 42dc5734..9a4986c4 100644
--- a/src/com/activeandroid/migration/MigrationOperation.java
+++ b/src/com/activeandroid/migration/MigrationOperation.java
@@ -2,6 +2,8 @@
 
 import com.activeandroid.Model;
 
+import java.util.List;
+
 public abstract class MigrationOperation {
     protected Class<? extends Model> mModel;
 
@@ -9,5 +11,5 @@ public MigrationOperation(Class<? extends Model> model) {
         mModel = model;
     }
 
-    public abstract String toSqlString();
+    public abstract List<String> toSqlString();
 }
diff --git a/src/com/activeandroid/migration/operation/AddColumn.java b/src/com/activeandroid/migration/operation/AddColumn.java
index dec3d57c..fa0500bd 100644
--- a/src/com/activeandroid/migration/operation/AddColumn.java
+++ b/src/com/activeandroid/migration/operation/AddColumn.java
@@ -7,6 +7,9 @@
 
 import java.lang.reflect.Field;
 import java.text.MessageFormat;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
 
 public class AddColumn extends MigrationOperation {
 
@@ -18,10 +21,11 @@ public AddColumn(Class<? extends Model> model, Field column) {
     }
 
     @Override
-    public String toSqlString() {
-        return MessageFormat.format(
+    public List<String> toSqlString() {
+        return Arrays.asList( MessageFormat.format(
                 "ALTER TABLE {0} ADD COLUMN {1}",
                 Cache.getTableName(mModel),
-                SQLiteUtils.createColumnDefinition(Cache.getTableInfo(mModel), mField));
+                SQLiteUtils.createColumnDefinition(Cache.getTableInfo(mModel), mField))
+        );
     }
 }
diff --git a/src/com/activeandroid/migration/operation/CreateIndex.java b/src/com/activeandroid/migration/operation/CreateIndex.java
new file mode 100644
index 00000000..dd2c1011
--- /dev/null
+++ b/src/com/activeandroid/migration/operation/CreateIndex.java
@@ -0,0 +1,36 @@
+package com.activeandroid.migration.operation;
+
+import com.activeandroid.Cache;
+import com.activeandroid.Model;
+import com.activeandroid.annotation.Column;
+import com.activeandroid.migration.Migration;
+import com.activeandroid.migration.MigrationOperation;
+import com.activeandroid.util.SQLiteUtils;
+
+import java.lang.reflect.Field;
+import java.text.MessageFormat;
+import java.util.Arrays;
+import java.util.List;
+
+public class CreateIndex extends MigrationOperation {
+
+    Field mField;
+
+    public CreateIndex(Class<? extends Model> model, Field column) {
+        super(model);
+        mField = column;
+    }
+
+    @Override
+    public List<String> toSqlString() {
+        String columnName = Cache.getTableInfo(mModel).getColumnName(mField);
+        if (columnName == null) return null;
+
+        return Arrays.asList(MessageFormat.format(
+                "CREATE INDEX IF NOT EXISTS {0} ON {1} ({2})",
+                (columnName + "_index"),
+                Cache.getTableName(mModel),
+                columnName)
+        );
+    }
+}
diff --git a/src/com/activeandroid/migration/operation/CreateTable.java b/src/com/activeandroid/migration/operation/CreateTable.java
new file mode 100644
index 00000000..2975411e
--- /dev/null
+++ b/src/com/activeandroid/migration/operation/CreateTable.java
@@ -0,0 +1,21 @@
+package com.activeandroid.migration.operation;
+
+import com.activeandroid.Cache;
+import com.activeandroid.Model;
+import com.activeandroid.migration.MigrationOperation;
+import com.activeandroid.util.SQLiteUtils;
+
+import java.util.Arrays;
+import java.util.List;
+
+public class CreateTable extends MigrationOperation {
+
+    public CreateTable(Class<? extends Model> model) {
+        super(model);
+    }
+
+    @Override
+    public List<String> toSqlString() {
+        return Arrays.asList(SQLiteUtils.createTableDefinition(Cache.getTableInfo(mModel)));
+    }
+}
diff --git a/src/com/activeandroid/migration/operation/DropTable.java b/src/com/activeandroid/migration/operation/DropTable.java
new file mode 100644
index 00000000..19eebbff
--- /dev/null
+++ b/src/com/activeandroid/migration/operation/DropTable.java
@@ -0,0 +1,32 @@
+package com.activeandroid.migration.operation;
+
+import com.activeandroid.Cache;
+import com.activeandroid.Model;
+import com.activeandroid.migration.MigrationOperation;
+import com.activeandroid.util.SQLiteUtils;
+
+import java.text.MessageFormat;
+import java.util.Arrays;
+import java.util.List;
+
+public class DropTable extends MigrationOperation {
+
+    String mTableName;
+
+    public DropTable(Class<? extends Model> model) {
+        super(model);
+        mTableName = Cache.getTableName(mModel);
+    }
+
+    public DropTable(String tableName) {
+        super(null);
+        mTableName = tableName;
+    }
+
+    @Override
+    public List<String> toSqlString() {
+        return Arrays.asList(MessageFormat.format(
+                "DROP TABLE IF EXISTS {0}",
+                mTableName));
+    }
+}
diff --git a/src/com/activeandroid/migration/operation/RemoveColumn.java b/src/com/activeandroid/migration/operation/RemoveColumn.java
new file mode 100644
index 00000000..a0db357b
--- /dev/null
+++ b/src/com/activeandroid/migration/operation/RemoveColumn.java
@@ -0,0 +1,40 @@
+package com.activeandroid.migration.operation;
+
+import android.text.TextUtils;
+import com.activeandroid.Cache;
+import com.activeandroid.Model;
+import com.activeandroid.migration.MigrationOperation;
+import com.activeandroid.util.MigrationUtils;
+import com.activeandroid.util.SQLiteUtils;
+import sun.reflect.generics.reflectiveObjects.NotImplementedException;
+
+import java.lang.reflect.Field;
+import java.text.MessageFormat;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+public class RemoveColumn extends MigrationOperation {
+
+    String mRemoveColumn;
+
+    public RemoveColumn(Class<? extends Model> model, String column) {
+        super(model);
+        mRemoveColumn = column;
+    }
+
+    @Override
+    public List<String> toSqlString() {
+        String tableName = Cache.getTableName(mModel);
+
+        ArrayList<String> ops = new ArrayList<String>();
+
+        ops.addAll(new RenameTable(tableName, (tableName + "_temp")).toSqlString());
+        ops.add(SQLiteUtils.createTableDefinition(Cache.getTableInfo(mModel), Arrays.asList(mRemoveColumn)));
+        ops.add(MessageFormat.format("INSERT INTO {0}({1}) SELECT {1} FROM {0}_temp", tableName, MigrationUtils.columnList(mModel)));
+        ops.addAll(new DropTable(tableName + "_temp").toSqlString());
+
+        return ops;
+    }
+
+}
diff --git a/src/com/activeandroid/migration/operation/RemoveIndex.java b/src/com/activeandroid/migration/operation/RemoveIndex.java
new file mode 100644
index 00000000..eb8a615c
--- /dev/null
+++ b/src/com/activeandroid/migration/operation/RemoveIndex.java
@@ -0,0 +1,30 @@
+package com.activeandroid.migration.operation;
+
+import com.activeandroid.Cache;
+import com.activeandroid.Model;
+import com.activeandroid.migration.MigrationOperation;
+
+import java.lang.reflect.Field;
+import java.text.MessageFormat;
+import java.util.Arrays;
+import java.util.List;
+
+public class RemoveIndex extends MigrationOperation {
+
+    Field mField;
+
+    public RemoveIndex(Class<? extends Model> model, Field column) {
+        super(model);
+        mField = column;
+    }
+
+    @Override
+    public List<String> toSqlString() {
+        String columnName = Cache.getTableInfo(mModel).getColumnName(mField);
+        if (columnName == null) return null;
+
+        return Arrays.asList(MessageFormat.format(
+                "DROP INDEX IF EXISTS {0}",
+                (columnName + "_index")));
+    }
+}
diff --git a/src/com/activeandroid/migration/operation/RenameColumn.java b/src/com/activeandroid/migration/operation/RenameColumn.java
new file mode 100644
index 00000000..ea049567
--- /dev/null
+++ b/src/com/activeandroid/migration/operation/RenameColumn.java
@@ -0,0 +1,48 @@
+package com.activeandroid.migration.operation;
+
+import com.activeandroid.Cache;
+import com.activeandroid.Model;
+import com.activeandroid.migration.MigrationOperation;
+import com.activeandroid.util.MigrationUtils;
+import com.activeandroid.util.SQLiteUtils;
+import sun.reflect.generics.reflectiveObjects.NotImplementedException;
+
+import java.lang.reflect.Field;
+import java.text.MessageFormat;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+
+public class RenameColumn extends MigrationOperation {
+
+    String mOldColumnName;
+    String mNewColumnName;
+
+    public RenameColumn(Class<? extends Model> model, String oldName, String newName) {
+        super(model);
+        mOldColumnName = oldName;
+        mNewColumnName = newName;
+    }
+
+    @Override
+    public List<String> toSqlString() {
+        String tableName = Cache.getTableName(mModel);
+
+        ArrayList<String> ops = new ArrayList<String>();
+        HashMap<String, String> map = new HashMap<String, String>();
+        map.put(mOldColumnName, mNewColumnName);
+
+        ops.addAll(new RenameTable(tableName, (tableName + "_temp")).toSqlString());
+        ops.add(SQLiteUtils.createTableDefinition(Cache.getTableInfo(mModel), new ArrayList<String>(), map));
+        ops.add(MessageFormat.format("INSERT INTO {0}({1}) SELECT {2} FROM {0}_temp",
+                tableName,
+                MigrationUtils.renamedColumnList(mModel, mOldColumnName, mNewColumnName),
+                MigrationUtils.columnList(mModel)));
+        ops.addAll(new DropTable(tableName + "_temp").toSqlString());
+
+        return ops;
+    }
+
+
+}
diff --git a/src/com/activeandroid/migration/operation/RenameTable.java b/src/com/activeandroid/migration/operation/RenameTable.java
new file mode 100644
index 00000000..2511ec39
--- /dev/null
+++ b/src/com/activeandroid/migration/operation/RenameTable.java
@@ -0,0 +1,35 @@
+package com.activeandroid.migration.operation;
+
+import com.activeandroid.Cache;
+import com.activeandroid.Model;
+import com.activeandroid.migration.MigrationOperation;
+
+import java.text.MessageFormat;
+import java.util.Arrays;
+import java.util.List;
+
+public class RenameTable extends MigrationOperation {
+
+    String mNewTableName;
+    String mOldTableName;
+
+    public RenameTable(Class<? extends Model> model, String oldTableName) {
+        super(model);
+        mNewTableName = Cache.getTableName(mModel);
+        mOldTableName = oldTableName;
+    }
+
+    public RenameTable(String oldTableName, String newTableName) {
+        super(null);
+        mNewTableName = newTableName;
+        mOldTableName = oldTableName;
+    }
+
+    @Override
+    public List<String> toSqlString() {
+        return Arrays.asList(MessageFormat.format(
+                "ALTER TABLE {0} RENAME TO {1}",
+                mOldTableName,
+                mNewTableName));
+    }
+}
diff --git a/src/com/activeandroid/util/MigrationUtils.java b/src/com/activeandroid/util/MigrationUtils.java
index 995b7a71..e54c26c4 100644
--- a/src/com/activeandroid/util/MigrationUtils.java
+++ b/src/com/activeandroid/util/MigrationUtils.java
@@ -2,10 +2,13 @@
 
 import android.app.Application;
 import android.content.Context;
+import com.activeandroid.Cache;
+import com.activeandroid.Model;
 import com.activeandroid.migration.Migration;
 import com.activeandroid.migration.MigrationOperation;
 
 import java.io.IOException;
+import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -42,15 +45,44 @@
         return migrations;
     }
 
-    public static String[] migrationOperationsToSql(MigrationOperation[] ops) {
+    public static List<String> migrationOperationsToSql(MigrationOperation[] ops) {
         if (ops == null) return null;
 
-        String[] statements = new String[ops.length];
+        ArrayList<String> statements = new ArrayList<String>();
         for (int i = 0; i < ops.length; i++) {
-            statements[i] = ops[i].toSqlString();
+            statements.addAll(ops[i].toSqlString());
         }
 
         return statements;
     }
 
+    public static String renamedColumnList(Class<? extends Model> model, String oldColumnName, String newColumnName) {
+        ArrayList<Field> fields = new ArrayList<Field>(Cache.getTableInfo(model).getFields());
+        if (fields.isEmpty()) return "";
+
+        String columns = "";
+        String column = Cache.getTableInfo(model).getColumnName(fields.get(0));
+
+        columns += column.equals(oldColumnName) ? newColumnName : column;
+        for (int i = 1; i < fields.size(); i++) {
+            column = Cache.getTableInfo(model).getColumnName(fields.get(i));
+            columns += ", ";
+            columns += column.equals(oldColumnName) ? newColumnName : column;
+        }
+
+        return columns;
+    }
+
+    public static String columnList(Class<? extends Model> model) {
+        ArrayList<Field> fields = new ArrayList<Field>(Cache.getTableInfo(model).getFields());
+        if (fields.isEmpty()) return "";
+
+        String columns = Cache.getTableInfo(model).getColumnName(fields.get(0));
+        for (int i = 1; i < fields.size(); i++) {
+            columns += ", " + Cache.getTableInfo(model).getColumnName(fields.get(i));
+        }
+
+        return columns;
+    }
+
 }
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index 3cfab100..2df4ac93 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -108,25 +108,42 @@ public static void execSql(String sql, Object[] bindArgs) {
 
 	// Database creation
 
-	public static String createTableDefinition(TableInfo tableInfo) {
-		final ArrayList<String> definitions = new ArrayList<String>();
+    public static String createTableDefinition(TableInfo tableInfo) {
+        return createTableDefinition(tableInfo, new ArrayList<String>(), new HashMap<String, String>());
+    }
 
-		for (Field field : tableInfo.getFields()) {
-			String definition = createColumnDefinition(tableInfo, field);
-			if (!TextUtils.isEmpty(definition)) {
-				definitions.add(definition);
-			}
-		}
-
-		return String.format("CREATE TABLE IF NOT EXISTS %s (%s);", tableInfo.getTableName(),
-				TextUtils.join(", ", definitions));
+	public static String createTableDefinition(TableInfo tableInfo, List<String> excludes) {
+		return createTableDefinition(tableInfo, excludes, new HashMap<String, String>());
 	}
 
-	public static String createColumnDefinition(TableInfo tableInfo, Field field) {
+    public static String createTableDefinition(TableInfo tableInfo, List<String> excludes, HashMap<String, String> columnNameMapping) {
+        final ArrayList<String> definitions = new ArrayList<String>();
+
+        for (Field field : tableInfo.getFields()) {
+            String columnName = tableInfo.getColumnName(field);
+            if (!excludes.contains(columnName)) {
+                String definition = (columnNameMapping.containsKey(columnName)) ?
+                        createColumnDefinition(tableInfo, field, columnNameMapping.get(columnName)) :
+                        createColumnDefinition(tableInfo, field);
+                if (!TextUtils.isEmpty(definition)) {
+                    definitions.add(definition);
+                }
+            }
+        }
+
+        return String.format("CREATE TABLE IF NOT EXISTS %s (%s);", tableInfo.getTableName(),
+                TextUtils.join(", ", definitions));
+    }
+
+    public static String createColumnDefinition(TableInfo tableInfo, Field field) {
+        return createColumnDefinition(tableInfo, field, null);
+    }
+
+	public static String createColumnDefinition(TableInfo tableInfo, Field field, String columnName) {
 		String definition = null;
 
 		Class<?> type = field.getType();
-		final String name = tableInfo.getColumnName(field);
+		final String name = (columnName == null) ? tableInfo.getColumnName(field) : columnName;
 		final TypeSerializer typeSerializer = Cache.getParserForType(field.getType());
 		final Column column = field.getAnnotation(Column.class);
 
