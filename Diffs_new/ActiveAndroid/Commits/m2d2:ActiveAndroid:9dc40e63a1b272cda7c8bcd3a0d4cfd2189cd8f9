diff --git a/.gitignore b/.gitignore
index 6d0dc1c1..bea60c4e 100644
--- a/.gitignore
+++ b/.gitignore
@@ -32,3 +32,4 @@ proguard-project.txt
 #Other
 .DS_Store
 tmp
+out
diff --git a/src/com/activeandroid/DatabaseHelper.java b/src/com/activeandroid/DatabaseHelper.java
index 1941da1a..b5844891 100644
--- a/src/com/activeandroid/DatabaseHelper.java
+++ b/src/com/activeandroid/DatabaseHelper.java
@@ -25,16 +25,16 @@
 import java.io.OutputStream;
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.Comparator;
 import java.util.List;
 
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
 
-import com.activeandroid.util.Log;
-import com.activeandroid.util.NaturalOrderComparator;
-import com.activeandroid.util.ReflectionUtils;
-import com.activeandroid.util.SQLiteUtils;
+import com.activeandroid.migration.Migration;
+import com.activeandroid.migration.MigrationOperation;
+import com.activeandroid.util.*;
 
 public final class DatabaseHelper extends SQLiteOpenHelper {
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -46,12 +46,15 @@
 
 	private final static String MIGRATION_PATH = "migrations";
 
+    private Context mContext;
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
 
 	public DatabaseHelper(Context context) {
 		super(context, getDbName(context), null, getDbVersion(context));
+        mContext = context;
 		copyAttachedDatabase(context);
 	}
 
@@ -132,6 +135,41 @@ public void copyAttachedDatabase(Context context) {
 	// PRIVATE METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
+    private boolean executeNamedMigrations(SQLiteDatabase db, int oldVersion, int newVersion) {
+        boolean migrationExecuted = false;
+
+        List<Migration> migrations = MigrationUtils.getMigrations(mContext, oldVersion, newVersion);
+        Collections.sort(migrations, new Comparator<Migration>() {
+            @Override
+            public int compare(Migration migration, Migration migration2) {
+                return migration.databaseVersion() - migration2.databaseVersion();
+            }
+        });
+
+        db.beginTransaction();
+
+        for (Migration migration : migrations) {
+            String []sqlStatements = migration.executeSql();
+
+            if (sqlStatements == null) {
+                sqlStatements = MigrationUtils.migrationOperationsToSql(migration.change());
+            }
+
+            if (sqlStatements == null) break;
+
+            for (String statement : sqlStatements) {
+                db.execSQL(statement);
+            }
+
+            migrationExecuted = true;
+        }
+
+        db.setTransactionSuccessful();
+        db.endTransaction();
+
+        return migrationExecuted;
+    }
+
 	private boolean executeMigrations(SQLiteDatabase db, int oldVersion, int newVersion) {
 		boolean migrationExecuted = false;
 		try {
diff --git a/src/com/activeandroid/migration/Migration.java b/src/com/activeandroid/migration/Migration.java
new file mode 100644
index 00000000..2abddb7b
--- /dev/null
+++ b/src/com/activeandroid/migration/Migration.java
@@ -0,0 +1,16 @@
+package com.activeandroid.migration;
+
+import com.activeandroid.migration.operation.AddColumn;
+
+public abstract class Migration {
+
+    public MigrationOperation[] change() {
+        return null;
+    }
+
+    public String[] executeSql() {
+        return null;
+    }
+
+    public abstract int databaseVersion();
+}
diff --git a/src/com/activeandroid/migration/MigrationOperation.java b/src/com/activeandroid/migration/MigrationOperation.java
new file mode 100644
index 00000000..42dc5734
--- /dev/null
+++ b/src/com/activeandroid/migration/MigrationOperation.java
@@ -0,0 +1,13 @@
+package com.activeandroid.migration;
+
+import com.activeandroid.Model;
+
+public abstract class MigrationOperation {
+    protected Class<? extends Model> mModel;
+
+    public MigrationOperation(Class<? extends Model> model) {
+        mModel = model;
+    }
+
+    public abstract String toSqlString();
+}
diff --git a/src/com/activeandroid/migration/operation/AddColumn.java b/src/com/activeandroid/migration/operation/AddColumn.java
new file mode 100644
index 00000000..dec3d57c
--- /dev/null
+++ b/src/com/activeandroid/migration/operation/AddColumn.java
@@ -0,0 +1,27 @@
+package com.activeandroid.migration.operation;
+
+import com.activeandroid.Cache;
+import com.activeandroid.Model;
+import com.activeandroid.migration.MigrationOperation;
+import com.activeandroid.util.SQLiteUtils;
+
+import java.lang.reflect.Field;
+import java.text.MessageFormat;
+
+public class AddColumn extends MigrationOperation {
+
+    Field mField;
+
+    public AddColumn(Class<? extends Model> model, Field column) {
+        super(model);
+        mField = column;
+    }
+
+    @Override
+    public String toSqlString() {
+        return MessageFormat.format(
+                "ALTER TABLE {0} ADD COLUMN {1}",
+                Cache.getTableName(mModel),
+                SQLiteUtils.createColumnDefinition(Cache.getTableInfo(mModel), mField));
+    }
+}
diff --git a/src/com/activeandroid/util/MigrationUtils.java b/src/com/activeandroid/util/MigrationUtils.java
new file mode 100644
index 00000000..05a159b7
--- /dev/null
+++ b/src/com/activeandroid/util/MigrationUtils.java
@@ -0,0 +1,57 @@
+package com.activeandroid.util;
+
+import android.app.Application;
+import android.content.Context;
+import com.activeandroid.migration.Migration;
+import com.activeandroid.migration.MigrationOperation;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+public class MigrationUtils {
+
+    private final static String AA_MIGRATION_PACKAGE = "AA_MIGRATION_PACKAGE";
+
+    public static List<Migration> getMigrations(Context context, int oldVersion, int newVersion) {
+
+        ArrayList<Migration> migrations = new ArrayList<Migration>();
+
+        try {
+
+            String migrationPackage = ReflectionUtils.getMetaData(context, AA_MIGRATION_PACKAGE);
+            Class[] migrationClasses = ReflectionUtils.findClasses(migrationPackage);
+
+            for(Class c : migrationClasses) {
+                if (c.isAssignableFrom(Migration.class)) {
+                    Migration m = (Migration)c.newInstance();
+                    if (m.databaseVersion() > oldVersion && m.databaseVersion() <= newVersion) {
+                        migrations.add(m);
+                    }
+                }
+            }
+
+        } catch (ClassNotFoundException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        } catch (InstantiationException e) {
+            e.printStackTrace();
+        } catch (IllegalAccessException e) {
+            e.printStackTrace();
+        }
+
+        return migrations;
+    }
+
+    public static String[] migrationOperationsToSql(MigrationOperation[] ops) {
+        if (ops == null) return null;
+
+        ArrayList<String> statements = new ArrayList<String>(ops.length);
+        for (MigrationOperation op : ops) {
+            statements.add(op.toSqlString());
+        }
+        return (String[]) statements.toArray();
+    }
+
+}
diff --git a/src/com/activeandroid/util/ReflectionUtils.java b/src/com/activeandroid/util/ReflectionUtils.java
index 2728ddd3..073c12b8 100644
--- a/src/com/activeandroid/util/ReflectionUtils.java
+++ b/src/com/activeandroid/util/ReflectionUtils.java
@@ -23,6 +23,13 @@
 import com.activeandroid.Model;
 import com.activeandroid.serializer.TypeSerializer;
 
+import java.io.File;
+import java.io.IOException;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.Enumeration;
+import java.util.List;
+
 public final class ReflectionUtils {
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC METHODS
@@ -55,6 +62,25 @@ public static boolean isTypeSerializer(Class<?> type) {
 		return null;
 	}
 
+    public static Class[] findClasses(String packageName) throws ClassNotFoundException, IOException {
+        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
+        assert classLoader != null;
+        String path = packageName.replace('.', '/');
+        Enumeration<URL> resources = classLoader.getResources(path);
+        List<File> dirs = new ArrayList<File>();
+        while (resources.hasMoreElements()) {
+            URL resource = resources.nextElement();
+            dirs.add(new File(resource.getFile()));
+        }
+        ArrayList<Class> classes = new ArrayList<Class>();
+        for (File directory : dirs) {
+            classes.addAll(findClasses(directory, packageName));
+        }
+        return classes.toArray(new Class[classes.size()]);
+    }
+
+
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PRIVATE METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -70,4 +96,21 @@ public static boolean isSubclassOf(Class<?> type, Class<?> superClass) {
 
 		return false;
 	}
+
+    private static List<Class> findClasses(File directory, String packageName) throws ClassNotFoundException {
+        List<Class> classes = new ArrayList<Class>();
+        if (!directory.exists()) {
+            return classes;
+        }
+        File[] files = directory.listFiles();
+        for (File file : files) {
+            if (file.isDirectory()) {
+                assert !file.getName().contains(".");
+                classes.addAll(findClasses(file, packageName + "." + file.getName()));
+            } else if (file.getName().endsWith(".class")) {
+                classes.add(Class.forName(packageName + '.' + file.getName().substring(0, file.getName().length() - 6)));
+            }
+        }
+        return classes;
+    }
 }
\ No newline at end of file
diff --git a/tests/project.properties b/tests/project.properties
index a3ee5ab6..9b84a6b4 100644
--- a/tests/project.properties
+++ b/tests/project.properties
@@ -11,4 +11,4 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-17
+target=android-16
