diff --git a/activeandroid/src/main/java/com/activeandroid/ActiveAndroid.java b/activeandroid/src/main/java/com/activeandroid/ActiveAndroid.java
index c58c8efd..2087a7f2 100644
--- a/activeandroid/src/main/java/com/activeandroid/ActiveAndroid.java
+++ b/activeandroid/src/main/java/com/activeandroid/ActiveAndroid.java
@@ -44,10 +44,6 @@ public static void initialize(Configuration configuration, boolean loggingEnable
 		Cache.initialize(configuration);
 	}
 
-	public static void clearCache() {
-		Cache.clear();
-	}
-
 	public static void dispose() {
 		Cache.dispose();
 	}
diff --git a/activeandroid/src/main/java/com/activeandroid/Cache.java b/activeandroid/src/main/java/com/activeandroid/Cache.java
index 6495e379..45b5a5a3 100644
--- a/activeandroid/src/main/java/com/activeandroid/Cache.java
+++ b/activeandroid/src/main/java/com/activeandroid/Cache.java
@@ -20,139 +20,96 @@
 
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
-import android.support.v4.util.LruCache;
 
 import com.activeandroid.serializer.TypeSerializer;
 import com.activeandroid.util.Log;
 
 public final class Cache {
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PUBLIC CONSTANTS
-	//////////////////////////////////////////////////////////////////////////////////////
 
-	public static final int DEFAULT_CACHE_SIZE = 1024;
+    //////////////////////////////////////////////////////////////////////////////////////
+    // PRIVATE MEMBERS
+    //////////////////////////////////////////////////////////////////////////////////////
 
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PRIVATE MEMBERS
-	//////////////////////////////////////////////////////////////////////////////////////
+    private static Context sContext;
 
-	private static Context sContext;
+    private static ModelInfo sModelInfo;
+    private static DatabaseHelper sDatabaseHelper;
 
-	private static ModelInfo sModelInfo;
-	private static DatabaseHelper sDatabaseHelper;
+    private static boolean sIsInitialized = false;
 
-	private static LruCache<String, Model> sEntities;
+    //////////////////////////////////////////////////////////////////////////////////////
+    // CONSTRUCTORS
+    //////////////////////////////////////////////////////////////////////////////////////
 
-	private static boolean sIsInitialized = false;
+    private Cache() {
+    }
 
-	//////////////////////////////////////////////////////////////////////////////////////
-	// CONSTRUCTORS
-	//////////////////////////////////////////////////////////////////////////////////////
+    //////////////////////////////////////////////////////////////////////////////////////
+    // PUBLIC METHODS
+    //////////////////////////////////////////////////////////////////////////////////////
 
-	private Cache() {
-	}
+    public static synchronized void initialize(Configuration configuration) {
+        if (sIsInitialized) {
+            Log.v("ActiveAndroid already initialized.");
+            return;
+        }
 
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PUBLIC METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
+        sContext = configuration.getContext();
+        sModelInfo = new ModelInfo(configuration);
+        sDatabaseHelper = new DatabaseHelper(configuration);
 
-	public static synchronized void initialize(Configuration configuration) {
-		if (sIsInitialized) {
-			Log.v("ActiveAndroid already initialized.");
-			return;
-		}
+        openDatabase();
 
-		sContext = configuration.getContext();
-		sModelInfo = new ModelInfo(configuration);
-		sDatabaseHelper = new DatabaseHelper(configuration);
+        sIsInitialized = true;
 
-		// TODO: It would be nice to override sizeOf here and calculate the memory
-		// actually used, however at this point it seems like the reflection
-		// required would be too costly to be of any benefit. We'll just set a max
-		// object size instead.
-		sEntities = new LruCache<String, Model>(configuration.getCacheSize());
+        Log.v("ActiveAndroid initialized successfully.");
+    }
 
-		openDatabase();
+    public static synchronized void dispose() {
+        closeDatabase();
 
-		sIsInitialized = true;
+        sModelInfo = null;
+        sDatabaseHelper = null;
 
-		Log.v("ActiveAndroid initialized successfully.");
-	}
+        sIsInitialized = false;
 
-	public static synchronized void clear() {
-		sEntities.evictAll();
-		Log.v("Cache cleared.");
-	}
+        Log.v("ActiveAndroid disposed. Call initialize to use library.");
+    }
 
-	public static synchronized void dispose() {
-		closeDatabase();
+    // Database access
 
-		sEntities = null;
-		sModelInfo = null;
-		sDatabaseHelper = null;
+    public static boolean isInitialized() {
+        return sIsInitialized;
+    }
 
-		sIsInitialized = false;
+    public static synchronized SQLiteDatabase openDatabase() {
+        return sDatabaseHelper.getWritableDatabase();
+    }
 
-		Log.v("ActiveAndroid disposed. Call initialize to use library.");
-	}
+    public static synchronized void closeDatabase() {
+        sDatabaseHelper.close();
+    }
 
-	// Database access
-	
-	public static boolean isInitialized() {
-		return sIsInitialized;
-	}
+    // Context access
 
-	public static synchronized SQLiteDatabase openDatabase() {
-		return sDatabaseHelper.getWritableDatabase();
-	}
+    public static Context getContext() {
+        return sContext;
+    }
 
-	public static synchronized void closeDatabase() {
-		sDatabaseHelper.close();
-	}
+    // Model cache
+    public static synchronized Collection<TableInfo> getTableInfos() {
+        return sModelInfo.getTableInfos();
+    }
 
-	// Context access
+    public static synchronized TableInfo getTableInfo(Class<? extends Model> type) {
+        return sModelInfo.getTableInfo(type);
+    }
 
-	public static Context getContext() {
-		return sContext;
-	}
+    public static synchronized TypeSerializer getParserForType(Class<?> type) {
+        return sModelInfo.getTypeSerializer(type);
+    }
 
-	// Entity cache
-
-	public static String getIdentifier(Class<? extends Model> type, Long id) {
-		return getTableName(type) + "@" + id;
-	}
-
-	public static String getIdentifier(Model entity) {
-		return getIdentifier(entity.getClass(), entity.getId());
-	}
-
-	public static synchronized void addEntity(Model entity) {
-		sEntities.put(getIdentifier(entity), entity);
-	}
-
-	public static synchronized Model getEntity(Class<? extends Model> type, long id) {
-		return sEntities.get(getIdentifier(type, id));
-	}
-
-	public static synchronized void removeEntity(Model entity) {
-		sEntities.remove(getIdentifier(entity));
-	}
-
-	// Model cache
-
-	public static synchronized Collection<TableInfo> getTableInfos() {
-		return sModelInfo.getTableInfos();
-	}
-
-	public static synchronized TableInfo getTableInfo(Class<? extends Model> type) {
-		return sModelInfo.getTableInfo(type);
-	}
-
-	public static synchronized TypeSerializer getParserForType(Class<?> type) {
-		return sModelInfo.getTypeSerializer(type);
-	}
-
-	public static synchronized String getTableName(Class<? extends Model> type) {
-		return sModelInfo.getTableInfo(type).getTableName();
-	}
+    public static synchronized String getTableName(Class<? extends Model> type) {
+        return sModelInfo.getTableInfo(type).getTableName();
+    }
 }
diff --git a/activeandroid/src/main/java/com/activeandroid/Model.java b/activeandroid/src/main/java/com/activeandroid/Model.java
index 31492494..0e9c621f 100644
--- a/activeandroid/src/main/java/com/activeandroid/Model.java
+++ b/activeandroid/src/main/java/com/activeandroid/Model.java
@@ -67,7 +67,6 @@ public final Long getId() {
 
     public final void delete() {
         Cache.openDatabase().delete(mTableInfo.getTableName(), idName + "=?", new String[]{getId().toString()});
-        Cache.removeEntity(this);
 
         Cache.getContext().getContentResolver()
                 .notifyChange(ContentProvider.createUri(mTableInfo.getType(), mId), null);
@@ -218,12 +217,7 @@ public final void loadFromCursor(Cursor cursor) {
                     final long entityId = cursor.getLong(columnIndex);
                     final Class<? extends Model> entityType = (Class<? extends Model>) fieldType;
 
-                    Model entity = Cache.getEntity(entityType, entityId);
-                    if (entity == null) {
-                        entity = new Select().from(entityType).where(idName + "=?", entityId).executeSingle();
-                    }
-
-                    value = entity;
+                    value = new Select().from(entityType).where(idName + "=?", entityId).executeSingle();
                 } else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
                     @SuppressWarnings("rawtypes")
                     final Class<? extends Enum> enumType = (Class<? extends Enum>) fieldType;
@@ -247,10 +241,6 @@ public final void loadFromCursor(Cursor cursor) {
                 Log.e(e.getClass().getName(), e);
             }
         }
-
-        if (mId != null) {
-            Cache.addEntity(this);
-        }
     }
 
     //////////////////////////////////////////////////////////////////////////////////////
diff --git a/activeandroid/src/main/java/com/activeandroid/util/SQLiteUtils.java b/activeandroid/src/main/java/com/activeandroid/util/SQLiteUtils.java
index eefde8ba..693c57ed 100644
--- a/activeandroid/src/main/java/com/activeandroid/util/SQLiteUtils.java
+++ b/activeandroid/src/main/java/com/activeandroid/util/SQLiteUtils.java
@@ -320,7 +320,6 @@ public static String createColumnDefinition(TableInfo tableInfo, Field field) {
     @SuppressWarnings("unchecked")
     public static <T extends Model> List<T> processCursor(Class<? extends Model> type, Cursor cursor) {
         TableInfo tableInfo = Cache.getTableInfo(type);
-        String idName = tableInfo.getIdName();
         final List<T> entities = new ArrayList<T>();
 
         try {
@@ -331,12 +330,8 @@ public static String createColumnDefinition(TableInfo tableInfo, Field field) {
                  * Obtain the columns ordered to fix issue #106 (https://github.com/pardom/ActiveAndroid/issues/106)
                  * when the cursor have multiple columns with same name obtained from join tables.
                  */
-                List<String> columnsOrdered = new ArrayList<String>(Arrays.asList(cursor.getColumnNames()));
                 do {
-                    Model entity = Cache.getEntity(type, cursor.getLong(columnsOrdered.indexOf(idName)));
-                    if (entity == null) {
-                        entity = (T) entityConstructor.newInstance();
-                    }
+                    Model entity = (T) entityConstructor.newInstance();
 
                     entity.loadFromCursor(cursor);
                     entities.add((T) entity);
