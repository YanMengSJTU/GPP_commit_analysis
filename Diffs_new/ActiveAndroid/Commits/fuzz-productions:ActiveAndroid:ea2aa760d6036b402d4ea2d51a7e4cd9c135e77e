diff --git a/src/main/java/com/activeandroid/runtime/DBRequest.java b/src/main/java/com/activeandroid/runtime/DBRequest.java
index be31e45a..ee586f4b 100644
--- a/src/main/java/com/activeandroid/runtime/DBRequest.java
+++ b/src/main/java/com/activeandroid/runtime/DBRequest.java
@@ -57,7 +57,7 @@ public DBRequest(){
 
     @Override
     public int compareTo(DBRequest another) {
-        return (int) ( mInfo.getStartTime() - another.mInfo.getStartTime());
+        return ( another.mInfo.getPriority() - mInfo.getPriority());
     }
 
     public String getName() {
diff --git a/src/main/java/com/activeandroid/runtime/DBRequestQueue.java b/src/main/java/com/activeandroid/runtime/DBRequestQueue.java
index 154c7e78..322d721c 100644
--- a/src/main/java/com/activeandroid/runtime/DBRequestQueue.java
+++ b/src/main/java/com/activeandroid/runtime/DBRequestQueue.java
@@ -1,8 +1,8 @@
 package com.activeandroid.runtime;
 
-import android.util.Log;
 
 import com.activeandroid.manager.SingleDBManager;
+import com.activeandroid.util.AALog;
 
 import java.util.concurrent.PriorityBlockingQueue;
 import java.util.concurrent.Semaphore;
@@ -19,12 +19,16 @@
  */
 public class DBRequestQueue {
 
+    public interface GetTask {
+        DBRequest getTask();
+    }
+
     /**
      * Queue of requests
      */
 //    private final PriorityBlockingQueue<DBRequest> mQueue;
     private ThreadPoolExecutor priorityExecutor;
-    private static final Semaphore latch = new Semaphore(4);
+    private static final Semaphore latch = new Semaphore(1, false);
 
     private ThreadPoolExecutor getExecutor(final int nThreads) {
         return new ThreadPoolExecutor(nThreads, nThreads,
@@ -62,15 +66,13 @@ public Thread newThread(Runnable r) {
 
             if (t.isDaemon())
                 t.setDaemon(false);
-//            if (t.getPriority() != Thread.NORM_PRIORITY)
-//                t.setPriority(Thread.NORM_PRIORITY);
             return t;
         }
     }
 
     static final String TAG = "DBREQUESTQUEUE";
 
-    private class WriteThread implements Runnable, Comparable<WriteThread> {
+    private class WriteThread implements Runnable, Comparable<GetTask>, GetTask {
 
         DBRequest _task;
 
@@ -82,30 +84,31 @@ private WriteThread(DBRequest task) {
         public void run() {
             Thread.currentThread().setPriority(Thread.MIN_PRIORITY);
             long start = System.currentTimeMillis();
-            Log.v(TAG, "Write Start Time " + start);
+            AALog.v(TAG, "Write Start Time " + start);
 
             try {
-                latch.acquire(4);
+                latch.acquire();
             } catch (InterruptedException e) {
                 e.printStackTrace();
             }
 
-            Log.v(TAG, "Write Wait Time " + (System.currentTimeMillis() - start));
-            Log.v(TAG, "WRITING");
-            Log.v(TAG, "QUEUE SIZE " + DBRequestQueue.this.priorityExecutor.getQueue().size());
+            AALog.v(TAG, "Write Wait Time " + (System.currentTimeMillis() - start));
+            AALog.v(TAG, "WRITING");
+            AALog.v(TAG, "QUEUE SIZE " + DBRequestQueue.this.priorityExecutor.getQueue().size());
             _task.run();
-            Log.v(TAG, "Write Finish Time " + (System.currentTimeMillis() - start));
-            latch.release(4);
+            AALog.v(TAG, "Write Finish Time " + (System.currentTimeMillis() - start));
+            latch.release();
         }
 
-        public DBRequest get_task() {
+        @Override
+        public DBRequest getTask() {
             return _task;
         }
 
 
         @Override
-        public int compareTo(WriteThread o1) {
-            return _task.compareTo(o1.get_task());
+        public int compareTo(GetTask o1) {
+            return _task.compareTo(o1.getTask());
         }
 
         @Override
@@ -126,7 +129,7 @@ public int hashCode() {
         }
     }
 
-    private class ReadThread implements Runnable, Comparable<ReadThread> {
+    private class ReadThread implements Runnable, Comparable<GetTask>, GetTask {
 
         DBRequest _task;
 
@@ -138,30 +141,32 @@ private ReadThread(DBRequest task) {
         public void run() {
             Thread.currentThread().setPriority(Thread.MAX_PRIORITY);
             try {
-                latch.acquire(1);
+                latch.tryAcquire();
             } catch (Throwable t) {
 
             }
 
+
             long start = System.currentTimeMillis();
-            Log.v(TAG, "Read Start Time " + start);
-            Log.v(TAG, "READING");
-            Log.v(TAG, "QUEUE SIZE " + DBRequestQueue.this.priorityExecutor.getQueue().size());
-            Log.v(TAG, "QUEUE COUNT " + DBRequestQueue.this.priorityExecutor.getTaskCount());
+            AALog.v(TAG, "Read Start Time " + start);
+            AALog.v(TAG, "READING");
+            AALog.v(TAG, "QUEUE SIZE " + DBRequestQueue.this.priorityExecutor.getQueue().size());
+            AALog.v(TAG, "QUEUE COUNT " + DBRequestQueue.this.priorityExecutor.getTaskCount());
             _task.run();
-            Log.v(TAG, "Read Finish Time " + (System.currentTimeMillis() - start));
-            latch.release(1);
+            AALog.v(TAG, "Read Finish Time " + (System.currentTimeMillis() - start));
+            latch.release();
         }
 
 
-        public DBRequest get_task() {
+        @Override
+        public DBRequest getTask() {
             return _task;
         }
 
 
         @Override
-        public int compareTo(ReadThread o1) {
-            return _task.compareTo(o1.get_task());
+        public int compareTo(GetTask o1) {
+            return _task.compareTo(o1.getTask());
         }
 
         @Override
@@ -192,60 +197,20 @@ public int hashCode() {
      */
     public DBRequestQueue(String name) {
         this(name, Runtime.getRuntime().availableProcessors());
-//        mQueue = new PriorityBlockingQueue<DBRequest>();
     }
 
     public DBRequestQueue(String name, int threadCount) {
         super();
         priorityExecutor = getExecutor(threadCount);
-//        mQueue = new PriorityBlockingQueue<DBRequest>();
     }
 
-//    @Override
-//    public void run() {
-//        Looper.prepare();
-//        android.os.Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
-//        DBRequest runnable;
-//        while (true){
-//            try{
-//                runnable = mQueue.take();
-//            } catch (InterruptedException e){
-//                if(mQuit){
-//                    synchronized (mQueue) {
-//                        mQueue.clear();
-//                    }
-//                    return;
-//                }
-//                continue;
-//            }
-//
-//            try{
-//                AALog.d("DBRequestQueue + " + getName(), "Size is: " + mQueue.size() + " executing:" + runnable.getName());
-//                runnable.run();
-//            } catch (Throwable t){
-//                throw new RuntimeException(t);
-//            }
-//        }
-//
-//    }
-
     public void add(DBRequest runnable) {
-//        if (!mQueue.contains(runnable)) {
-//            mQueue.add(runnable);
-//        }
         if (this == SingleDBManager.getWriteQueue()) {
             priorityExecutor.execute(new WriteThread(runnable));
         } else {
             priorityExecutor.execute(new ReadThread(runnable));
+            latch.tryAcquire();
         }
-
-//        try {
-//            synchronized (waitObject) {
-//                waitObject.notify();
-//            }
-//        }catch (Throwable t) {
-//
-//        }
     }
 
     /**
@@ -259,9 +224,6 @@ public void cancel(DBRequest runnable) {
         } else {
             priorityExecutor.remove(new ReadThread(runnable));
         }
-//        if (mQueue.contains(runnable)) {
-//            mQueue.remove(runnable);
-//        }
     }
 
     /**
@@ -270,35 +232,29 @@ public void cancel(DBRequest runnable) {
      * @param tag
      */
     public void cancel(String tag) {
-//        synchronized (mQueue){
-//            Iterator<DBRequest> it = mQueue.iterator();
-//            while(it.hasNext()){
-//                DBRequest next = it.next();
-//                if(next.getName().equals(tag)){
-//                    it.remove();
-//                }
-//            }
-//        }
+
     }
 
     /**
      * Quits this process
      */
+    @Deprecated
     public void quit() {
         mQuit = true;
-//        interrupt();
     }
 
+    @Deprecated
     public boolean isAlive() {
         return true;
     }
 
+    @Deprecated
     public void start() {
 
     }
 
     public synchronized boolean hasRequest() {
-        Log.v(TAG, "ReadQueue Size " + priorityExecutor.getQueue().size());
+        AALog.v(TAG, "ReadQueue Size " + priorityExecutor.getQueue().size());
         return priorityExecutor.getQueue().size() > 0;
     }
 }
