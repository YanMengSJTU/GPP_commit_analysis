diff --git a/src/main/java/com/activeandroid/manager/DBManager.java b/src/main/java/com/activeandroid/manager/DBManager.java
index 2322fe1f..5cb97db9 100644
--- a/src/main/java/com/activeandroid/manager/DBManager.java
+++ b/src/main/java/com/activeandroid/manager/DBManager.java
@@ -84,7 +84,7 @@ public void addAllInBackground(final Object array, final CollectionReceiver<OBJE
     }
 
     public OBJECT_CLASS getObject(Object object){
-        return getObject(mObjectClass, object);
+        return DBManagerCache.constructNewInstance(object, mObjectClass);
     }
 
     /**
diff --git a/src/main/java/com/activeandroid/manager/DBManagerCache.java b/src/main/java/com/activeandroid/manager/DBManagerCache.java
new file mode 100644
index 00000000..f20a0dce
--- /dev/null
+++ b/src/main/java/com/activeandroid/manager/DBManagerCache.java
@@ -0,0 +1,107 @@
+package com.activeandroid.manager;
+
+import com.activeandroid.Model;
+
+import java.lang.reflect.Constructor;
+import java.lang.reflect.Method;
+import java.util.HashMap;
+
+/**
+ * Created by andrewgrosner
+ * Date: 4/7/14
+ * Contributors:
+ * Description:
+ */
+public class DBManagerCache {
+
+    private static HashMap<Class, Method> mGetSizeMethodMap = new HashMap<Class, Method>();
+    private static HashMap<Class, Method> mGetMethodMap = new HashMap<Class, Method>();
+    private static HashMap<Class, Constructor> mConstructorMap = new HashMap<Class, Constructor>();
+
+    public static int invokeGetSizeMethod(Object inObject){
+        Class objectClazz = inObject.getClass();
+        Method method = mGetSizeMethodMap.get(objectClazz);
+        if(method==null){
+            try {
+                method = objectClazz.getDeclaredMethod("length", null);
+            } catch (NoSuchMethodException e) {
+                try {
+                    method = objectClazz.getDeclaredMethod("size", null);
+                } catch (NoSuchMethodException e1) {
+                    try {
+                        method = objectClazz.getDeclaredMethod("count", null);
+                    } catch (NoSuchMethodException e2) {
+                        //custom method will go here
+                    }
+                }
+            } finally {
+                mGetSizeMethodMap.put(objectClazz, method);
+            }
+        }
+
+        if(method!=null){
+            method.setAccessible(true);
+            Integer count = 0;
+            try {
+                count = (Integer) method.invoke(inObject, null);
+            } catch (Throwable throwable) {
+                throw new RuntimeException(throwable);
+            } finally {
+                return count;
+            }
+        } else{
+            return 0;
+        }
+    }
+
+    public static Object invokeGetMethod(Object inObject, int index){
+
+        Class objectClazz = inObject.getClass();
+        Method method = mGetMethodMap.get(objectClazz);
+        if(method==null) {
+
+            try {
+                method = objectClazz.getDeclaredMethod("get", int.class);
+            } catch (NoSuchMethodException e) {
+                try {
+                    method = objectClazz.getDeclaredMethod("getItem", int.class);
+                } catch (NoSuchMethodException e1) {
+
+                }
+            } finally {
+                mGetMethodMap.put(objectClazz, method);
+            }
+        }
+        if(method!=null){
+            method.setAccessible(true);
+            Object outObject = 0;
+            try {
+                outObject = method.invoke(inObject, index);
+            } catch (Throwable e) {
+                throw new RuntimeException(e);
+            } finally {
+                return outObject;
+            }
+        } else{
+            return null;
+        }
+    }
+
+    public static <OBJECT_CLASS extends Model> OBJECT_CLASS constructNewInstance(Object inObject, Class<OBJECT_CLASS> objectClass){
+        Constructor<OBJECT_CLASS> constructor = mConstructorMap.get(objectClass);
+        if(constructor==null){
+            try {
+                constructor = objectClass.getConstructor(inObject.getClass());
+                mConstructorMap.put(objectClass, constructor);
+            } catch (Throwable e) {
+                throw new RuntimeException(e);
+            }
+        }
+        try {
+            return constructor.newInstance(inObject);
+        } catch (Throwable e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+}
diff --git a/src/main/java/com/activeandroid/manager/SingleDBManager.java b/src/main/java/com/activeandroid/manager/SingleDBManager.java
index b296bba9..ff545dd5 100644
--- a/src/main/java/com/activeandroid/manager/SingleDBManager.java
+++ b/src/main/java/com/activeandroid/manager/SingleDBManager.java
@@ -110,12 +110,7 @@ protected synchronized void processOnForeground(Runnable runnable){
     }
 
     public <OBJECT_CLASS extends Model> OBJECT_CLASS getObject(Class<OBJECT_CLASS> obClazz, Object object){
-        try {
-            return obClazz.getConstructor(object.getClass()).newInstance(object);
-        } catch (Throwable e) {
-            e.printStackTrace();
-        }
-        return null;
+       return DBManagerCache.constructNewInstance(object, obClazz);
     }
 
     /**
@@ -185,10 +180,10 @@ protected synchronized void processOnForeground(Runnable runnable){
     public <OBJECT_CLASS extends Model> void addAll(Class<OBJECT_CLASS> obClazz, Object array){
         ActiveAndroid.beginTransaction();
         try{
-            int count = ReflectionUtils.invokeGetSizeOfObject(array);
+            int count = DBManagerCache.invokeGetSizeMethod(array);
             for(int i = 0; i < count;i++){
-                Object getObject = ReflectionUtils.invokeGetMethod(array, i);
-                OBJECT_CLASS object = obClazz.getConstructor(getObject.getClass()).newInstance(getObject);
+                Object getObject = DBManagerCache.invokeGetMethod(array, i);
+                OBJECT_CLASS object = DBManagerCache.constructNewInstance(getObject, obClazz);
                 add(object);
             }
             ActiveAndroid.setTransactionSuccessful();
@@ -210,9 +205,9 @@ protected synchronized void processOnForeground(Runnable runnable){
             @Override
             public void run() {
                 final List<OBJECT_CLASS> objects = new ArrayList<OBJECT_CLASS>();
-                int count = ReflectionUtils.invokeGetSizeOfObject(array);
+                int count = DBManagerCache.invokeGetSizeMethod(array);
                 for(int i = 0; i < count;i++){
-                    Object getObject = ReflectionUtils.invokeGetMethod(array, i);
+                    Object getObject =  DBManagerCache.invokeGetMethod(array, i);
                     objects.add(getObject(obClazz, getObject));
                 }
 
diff --git a/src/main/java/com/activeandroid/runtime/DBBatchSaveQueue.java b/src/main/java/com/activeandroid/runtime/DBBatchSaveQueue.java
index 2cb5b4c4..5163673f 100644
--- a/src/main/java/com/activeandroid/runtime/DBBatchSaveQueue.java
+++ b/src/main/java/com/activeandroid/runtime/DBBatchSaveQueue.java
@@ -20,6 +20,11 @@
 
     private static DBBatchSaveQueue mBatchSaveQueue;
 
+    /**
+     *  Once the queue size reaches 50 or larger, the thread will be interrupted and we will batch save the models.
+     */
+    private static final int sMODEL_SAVE_SIZE = 50;
+
     public static DBBatchSaveQueue getSharedSaveQueue(){
         if(mBatchSaveQueue==null){
             mBatchSaveQueue = new DBBatchSaveQueue();
@@ -70,9 +75,10 @@ public void run() {
             }
 
             try {
-                //sleep for one second to gather as much data as possible
-                Thread.sleep(1000);
+                //sleep for 5 mins, and then check for leftovers
+                Thread.sleep(300000);
             } catch (InterruptedException e) {
+                AALog.d("DBBatchSaveQueue", "Batch interrupted to start saving");
             }
         }
     }
@@ -80,12 +86,20 @@ public void run() {
     public void add(final Model model){
         synchronized (mModels){
             mModels.add(model);
+
+            if(mModels.size()>sMODEL_SAVE_SIZE){
+                interrupt();
+            }
         }
     }
 
     public <COLLECTION_CLASS extends Collection<OBJECT_CLASS>, OBJECT_CLASS extends Model> void addAll(final COLLECTION_CLASS list){
         synchronized (mModels){
             mModels.addAll(list);
+
+            if(mModels.size()>sMODEL_SAVE_SIZE){
+                interrupt();
+            }
         }
     }
 
diff --git a/src/main/java/com/activeandroid/util/ReflectionUtils.java b/src/main/java/com/activeandroid/util/ReflectionUtils.java
index 8559d965..a2ba4d05 100644
--- a/src/main/java/com/activeandroid/util/ReflectionUtils.java
+++ b/src/main/java/com/activeandroid/util/ReflectionUtils.java
@@ -85,69 +85,5 @@ public static boolean isSubclassOf(Class<?> type, Class<?> superClass) {
         return outFields;
     }
 
-    /**
-     * Finds the method from the object to get the size of its components
-     * @param objectClazz
-     * @return
-     */
-    public static int invokeGetSizeOfObject(Object inObject){
-        Method method = null;
-        Class objectClazz = inObject.getClass();
-        try {
-            method = objectClazz.getDeclaredMethod("length", null);
-        } catch (NoSuchMethodException e) {
-            try {
-                method = objectClazz.getDeclaredMethod("size", null);
-            } catch (NoSuchMethodException e1) {
-                try {
-                    method = objectClazz.getDeclaredMethod("count", null);
-                } catch (NoSuchMethodException e2) {
-                    //custom method will go here
-                }
-            }
-        } finally {
-            if(method!=null){
-                method.setAccessible(true);
-                Integer count = 0;
-                try {
-                    count = (Integer) method.invoke(inObject, null);
-                } catch (Throwable throwable) {
-                    throw new RuntimeException(throwable);
-                } finally {
-                    return count;
-                }
-            } else{
-                return 0;
-            }
-        }
-    }
 
-    public static Object invokeGetMethod(Object inObject, int index){
-        Method method = null;
-        Class objectClazz = inObject.getClass();
-
-        try {
-            method = objectClazz.getDeclaredMethod("get", int.class);
-        } catch (NoSuchMethodException e) {
-            try {
-                method = objectClazz.getDeclaredMethod("getItem", int.class);
-            } catch (NoSuchMethodException e1) {
-
-            }
-        } finally {
-            if(method!=null){
-                method.setAccessible(true);
-                Object outObject = 0;
-                try {
-                    outObject = method.invoke(inObject, index);
-                } catch (Throwable e) {
-                    throw new RuntimeException(e);
-                } finally {
-                    return outObject;
-                }
-            } else{
-                return null;
-            }
-        }
-    }
 }
\ No newline at end of file
