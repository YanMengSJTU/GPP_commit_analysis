diff --git a/.travis.yml b/.travis.yml
index bed811fd..1ca250a9 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,40 +1,63 @@
-language: java
-jdk: oraclejdk7
-env: ANDROID_SDK=android-16 ANDROID_ABI=armeabi-v7a
-
+addons: {}
+after_success:
+- export JAVA_TOOL_OPTIONS=-javaagent:$DFB_PROJECT_DIR/jacoco-agent-jdk8.jar=destfile=$DFB_PROJECT_DIR/jacoco.exec
+- mvn test -Djacoco.skip=true -Dcobertura.skip=true -Dmaven.clover.skip=true clean
+  install -e
+- ./df-build.sh
+- env > env.file
+- curl -sL https://raw.githubusercontent.com/travis-ci/artifacts/master/install |
+  bash
+- artifacts upload --key $AWS_ACCESS_KEY_ID --secret $AWS_SECRET_ACCESS_KEY --bucket
+  $DFB_AWS_BUCKET --target-paths $DFB_AWS_BUILD_PATH $(git ls-files -oi -x *.exec)
+- artifacts upload --key $AWS_ACCESS_KEY_ID --secret $AWS_SECRET_ACCESS_KEY --bucket
+  $DFB_AWS_BUCKET --target-paths $DFB_AWS_BUILD_PATH ${DFB_PROJECT_DIR}/env.file
 before_install:
-  # Install ia32-libs (necessary for Android SDK to run on 64-bit linux)
-  # - sudo apt-get clean && sudo apt-get update
-  - sudo apt-get update -qq
-  - sudo apt-get install -qq --force-yes libgd2-xpm ia32-libs ia32-libs-multiarch
-
-  # Install Android SDK
-  - wget http://dl.google.com/android/android-sdk_r22.6.2-linux.tgz
-  - tar -zxf android-sdk_r22.6.2-linux.tgz
-  - ls
-  - export ANDROID_HOME=`pwd`/android-sdk-linux
-  - export PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools
-
-  # Install build-tools
-  - wget https://dl-ssl.google.com/android/repository/build-tools_r19.0.3-linux.zip
-  - unzip build-tools_r19.0.3-linux.zip -d $ANDROID_HOME
-  - mkdir -p $ANDROID_HOME/build-tools/
-  - mv $ANDROID_HOME/android-4.4.2 $ANDROID_HOME/build-tools/19.0.1
-
-  # Install required Android components
-  - android list sdk --extended
-  # Do you accept the license 'android-sdk-license-bcbbd656' [y/n]:
-  - echo -ne "y\n" | android update sdk --filter system-image,platform-tools,extra-android-support,$ANDROID_SDK --no-ui --force
-
-  # Create and start emulator
-  - echo no | android create avd --force -n test -t $ANDROID_SDK --abi $ANDROID_ABI
-  - android list avds
-  - emulator -avd test -no-skin -no-audio -no-window &
-
+- sudo apt-get update -qq
+- sudo apt-get install -qq --force-yes libgd2-xpm ia32-libs ia32-libs-multiarch
+- wget http://dl.google.com/android/android-sdk_r22.6.2-linux.tgz
+- tar -zxf android-sdk_r22.6.2-linux.tgz
+- ls
+- export ANDROID_HOME=`pwd`/android-sdk-linux
+- export PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools
+- wget https://dl-ssl.google.com/android/repository/build-tools_r19.0.3-linux.zip
+- unzip build-tools_r19.0.3-linux.zip -d $ANDROID_HOME
+- mkdir -p $ANDROID_HOME/build-tools/
+- mv $ANDROID_HOME/android-4.4.2 $ANDROID_HOME/build-tools/19.0.1
+- android list sdk --extended
+- echo -ne "y\n" | android update sdk --filter system-image,platform-tools,extra-android-support,$ANDROID_SDK
+  --no-ui --force
+- echo no | android create avd --force -n test -t $ANDROID_SDK --abi $ANDROID_ABI
+- android list avds
+- emulator -avd test -no-skin -no-audio -no-window &
+- wget -O beforebuild.sh $DFB_AGENTS_URL/beforebuild.sh
+- chmod a+x beforebuild.sh
+- ./beforebuild.sh
 before_script:
-  # Make sure the emulator has started before running tests
-  - chmod +x ./wait_for_emulator
-  - ./wait_for_emulator
-
+- chmod +x ./wait_for_emulator
+- ./wait_for_emulator
+env:
+  global:
+  - DFB_PROJECT_DIR=$(pwd)
+  - TMP_PROJECT_PARENT_DIR=$(dirname $DFB_PROJECT_DIR)
+  - DFB_BUILD_ID=$TRAVIS_BUILD_ID
+  - DFB_PRODUCT_NAME=$(basename $DFB_PROJECT_DIR)
+  - DFB_OWNER_NAME=$(basename $TMP_PROJECT_PARENT_DIR)
+  - DFB_PRODUCT_KEY=${DFB_OWNER_NAME}_${DFB_PRODUCT_NAME}
+  - DFB_AWS_BUCKET=aline-external-ci-artifacts
+  - DFB_AGENTS_URL=https://s3.amazonaws.com/${DFB_AWS_BUCKET}/agents
+  - DFB_PACKAGING_URL=s3://${DFB_AWS_BUCKET}/artifacts/travis/
+  - DFB_AWS_BUILD_PATH=/artifacts/travis/${DFB_PRODUCT_KEY}/${DFB_BUILD_ID}/output/
+  - AWS_ACCESS_KEY_ID=AKIAIIU2LBOCCKXAIFZQ
+  - AWS_SECRET_ACCESS_KEY=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
+  - DFB_JTO=-javaagent:${DFB_PROJECT_DIR}/dfbuild-agent.jar=PACKAGING_BASE_URI=$DFB_PACKAGING_URL,PRODUCT_KEY=$DFB_PRODUCT_KEY/,BUILD_KEY=$DFB_BUILD_ID/,MODULES_KEY=modules/,START_TIME=0,BUILD_BASE_DIR=$DFB_PROJECT_DIR
+  matrix: ANDROID_SDK=android-16 ANDROID_ABI=armeabi-v7a
+install: 'true'
+jdk:
+- oraclejdk7
+language: java
+notifications: {}
 script:
-  - mvn clean install -e
+- export JAVA_TOOL_OPTIONS=$DFB_JTO
+- mvn -Djacoco.skip=true -Dcobertura.skip=true -Dmaven.clover.skip=true clean install
+  -e
+# Modified by IntegrationTestInstrumentation at 2016-05-14 09:55:36.671102
diff --git a/df-build.sh b/df-build.sh
new file mode 100755
index 00000000..cb7e7771
--- /dev/null
+++ b/df-build.sh
@@ -0,0 +1,13 @@
+echo "Build is done by now. Copying dependencies..."
+mvn dependency:copy-dependencies || { echo "Error: maven dependency:copy-dependencies failed"; exit 1; }
+echo "Cleaning up existing zip if any..."
+rm -f libs.zip || { echo "Error: Cleaning lib zip"; exit 1; }
+rm -f build.zip || { echo "Error: Cleaning binaries zip"; exit 1; }
+rm -f testbuild.zip || { echo "Error: Cleaning test binaries zip"; exit 1; }
+mkdir -p target/test-classes;touch target/test-classes/placeholder.class || { echo "Error: Creating placeholder for test-classes"; exit 1; }
+echo "Zipping artifacts begin..."
+zip libs.zip $(git ls-files -o | grep -e target/dependency/.*jar) || { echo "Error: Zipping libs failed"; exit 1; }
+zip build.zip $(git ls-files -o | grep -e target/classes/.*class) || { echo "Error: Zipping binaries failed"; exit 1; }
+zip testbuild.zip $(git ls-files -o | grep -e target/test-classes/.*class) || { echo "Error: Zipping test binaries failed"; exit 1; }
+echo "Zipping artifacts DONE!!!"
+# Modified by Insights Service at 2016-05-14 09:55:36.639606
