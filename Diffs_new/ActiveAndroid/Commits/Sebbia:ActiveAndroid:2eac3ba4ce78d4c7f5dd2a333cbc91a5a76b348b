diff --git a/src/com/activeandroid/sebbia/Cache.java b/src/com/activeandroid/sebbia/Cache.java
index b97d88a4..ae255e7a 100644
--- a/src/com/activeandroid/sebbia/Cache.java
+++ b/src/com/activeandroid/sebbia/Cache.java
@@ -27,6 +27,8 @@
 import com.activeandroid.sebbia.annotation.DoNotGenerate;
 import com.activeandroid.sebbia.internal.EmptyModelFiller;
 import com.activeandroid.sebbia.internal.ModelFiller;
+import com.activeandroid.sebbia.model.ManyToManyRelation;
+import com.activeandroid.sebbia.model.OneToManyRelation;
 import com.activeandroid.sebbia.serializer.TypeSerializer;
 import com.activeandroid.sebbia.util.Log;
 import com.activeandroid.sebbia.util.ReflectionUtils;
@@ -178,7 +180,7 @@ private static void initializeModelFillers() {
 		for (TableInfo tableInfo : sModelInfo.getTableInfos()) {
 			try {
 				Class<? extends Model> type = tableInfo.getType(); 
-				if (type.getAnnotation(DoNotGenerate.class) == null)
+				if (!isDoNotGenerate(type))
 					sFillers.put(type, instantiateFiller(type));
 			} catch (IllegalAccessException e) {
 				throw new RuntimeException(e);
@@ -190,6 +192,14 @@ private static void initializeModelFillers() {
 		
 	}
 	
+	private static boolean isDoNotGenerate(Class<?> clazz) {
+		if (clazz.isAnnotationPresent(DoNotGenerate.class))
+			return true;
+		if (clazz.getSuperclass() != null)
+			return isDoNotGenerate(clazz.getSuperclass());
+		return false;
+	}
+	
 	@SuppressWarnings("unchecked")
 	private static ModelFiller instantiateFiller(Class<? extends Model> type) throws IllegalAccessException, InstantiationException {
 		ModelFiller modelFiller = sFillers.get(type);
diff --git a/src/com/activeandroid/sebbia/Model.java b/src/com/activeandroid/sebbia/Model.java
index 0b7617cc..b639721c 100644
--- a/src/com/activeandroid/sebbia/Model.java
+++ b/src/com/activeandroid/sebbia/Model.java
@@ -317,6 +317,10 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 	protected String getIdName() {
 		return idName;
 	}
+	
+	protected void setModelId(long id) {
+		mId = id;
+	}
 
 	// ////////////////////////////////////////////////////////////////////////////////////
 	// OVERRIDEN METHODS
