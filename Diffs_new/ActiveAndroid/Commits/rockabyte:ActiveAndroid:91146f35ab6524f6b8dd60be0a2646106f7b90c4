diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index e4cba4cd..eaef72db 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -28,6 +28,7 @@
 import com.activeandroid.util.ReflectionUtils;
 
 import java.lang.reflect.Field;
+import java.util.ArrayList;
 import java.util.List;
 
 @SuppressWarnings("unchecked")
@@ -66,14 +67,30 @@ public void setterActiveAndroidId(Long activeAndroidId) {
     }
 
     public final void delete() {
+        delete(true);
+    }
+
+    public final void delete(boolean sendNotifyChange) {
 		Cache.openDatabase().delete(mTableInfo.getTableName(), idName+"=?", new String[] { getActiveAndroidId().toString() });
 		Cache.removeEntity(this);
 
-		Cache.getContext().getContentResolver()
-				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mActiveAndroidId), null);
+        if (sendNotifyChange) {
+            Cache.getContext().getContentResolver()
+                    .notifyChange(ContentProvider.createUri(mTableInfo.getType(), mActiveAndroidId), null);
+        }
 	}
 
-	public final Long save() {
+
+    public final Long save() {
+        return save(true);
+    }
+
+    public static final void notifyTableChange(Class<? extends Model> type) {
+        Cache.getContext().getContentResolver()
+                .notifyChange(ContentProvider.createUri(type, null), null);
+    }
+
+    public final Long save(boolean sendNotifyChange) {
 		final SQLiteDatabase db = Cache.openDatabase();
 		final ContentValues values = new ContentValues();
 
@@ -160,18 +177,25 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 			db.update(mTableInfo.getTableName(), values, idName+"=" + mActiveAndroidId, null);
 		}
 
-		Cache.getContext().getContentResolver()
-				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mActiveAndroidId), null);
+        if (sendNotifyChange) {
+            Cache.getContext().getContentResolver()
+                    .notifyChange(ContentProvider.createUri(mTableInfo.getType(), mActiveAndroidId), null);
+        }
 		return mActiveAndroidId;
 	}
 
 	// Convenience methods
 
+
 	public static void delete(Class<? extends Model> type, long id) {
-		TableInfo tableInfo = Cache.getTableInfo(type);
-		new Delete().from(type).where(tableInfo.getIdName()+"=?", id).execute();
+        delete(type, id, true);
 	}
 
+    public static void delete(Class<? extends Model> type, long id, boolean sendNotifyChange) {
+        TableInfo tableInfo = Cache.getTableInfo(type);
+        new Delete().from(type).where(tableInfo.getIdName()+"=?", id).execute(sendNotifyChange);
+    }
+
 	public static <T extends Model> T load(Class<T> type, long id) {
 		TableInfo tableInfo = Cache.getTableInfo(type);
 		return (T) new Select().from(type).where(tableInfo.getIdName()+"=?", id).executeSingle();
@@ -283,16 +307,38 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 	//////////////////////////////////////////////////////////////////////////////////////
 
 	protected final <T extends Model> List<T> getMany(Class<T> type, String foreignKey) {
+        if(getActiveAndroidId() == null){
+            return new ArrayList<T>();
+        }
 		return new Select().from(type).where(Cache.getTableName(type) + "." + foreignKey + "=?", getActiveAndroidId()).execute();
 	}
 
+    /**
+     * Function to be subclassed when needed. Intended to sync the current model with db.
+     *
+     * @return true if model was found in db
+     */
+    public static <T extends Model> boolean sync(T model) {
+        T syncedModel = new Select().from(model.getClass()).where("ActiveAndroidId = ?", model.getActiveAndroidId()).executeSingle();
+
+        if(syncedModel != null){
+            model = syncedModel;
+            return true;
+        }
+
+        return false;
+    }
+
     /**
      * Function to be subclassed when needed. Intended to get a database model by this reference.
      *
      * @return
      */
     public <T extends Model> T getDBModel() {
-        return null;
+        if(getActiveAndroidId() == null){
+            return null;
+        }
+        return (T) new Select().from(mTableInfo.getType()).where("ActiveAndroidId = ?", getActiveAndroidId()).executeSingle();
     }
 
     /**
diff --git a/src/com/activeandroid/query/From.java b/src/com/activeandroid/query/From.java
index 951114c3..55d4d00d 100644
--- a/src/com/activeandroid/query/From.java
+++ b/src/com/activeandroid/query/From.java
@@ -210,28 +210,35 @@ public String toSql() {
 	}
 
 	public <T extends Model> List<T> execute() {
-		if (mQueryBase instanceof Select) {
-			return SQLiteUtils.rawQuery(mType, toSql(), getArguments());
-		}
-		else {
-			SQLiteUtils.execSql(toSql(), getArguments());
-			Cache.getContext().getContentResolver().notifyChange(ContentProvider
-					.createUri(mType, null), null);
-			return null;
-		}
+        return execute(true);
 	}
 
-	public <T extends Model> T executeSingle() {
-		if (mQueryBase instanceof Select) {
-			limit(1);
-			return (T) SQLiteUtils.rawQuerySingle(mType, toSql(), getArguments());
-		}
-		else {
-			limit(1);
-			SQLiteUtils.rawQuerySingle(mType, toSql(), getArguments()).delete();
-			return null;
-		}
-	}
+    public <T extends Model> List<T> execute(boolean sendNotifyChange) {
+        if (mQueryBase instanceof Select) {
+            return SQLiteUtils.rawQuery(mType, toSql(), getArguments());
+        }
+        else {
+            SQLiteUtils.execSql(toSql(), getArguments());
+
+            if (sendNotifyChange) {
+                Cache.getContext().getContentResolver().notifyChange(ContentProvider
+                        .createUri(mType, null), null);
+            }
+            return null;
+        }
+    }
+
+    public <T extends Model> T executeSingle() {
+        if (mQueryBase instanceof Select) {
+            limit(1);
+            return (T) SQLiteUtils.rawQuerySingle(mType, toSql(), getArguments());
+        }
+        else {
+            limit(1);
+            SQLiteUtils.rawQuerySingle(mType, toSql(), getArguments()).delete();
+            return null;
+        }
+    }
 
 	public String[] getArguments() {
 		final int size = mArguments.size();
