diff --git a/src/main/java/com/activeandroid/Cache.java b/src/main/java/com/activeandroid/Cache.java
index 0de8a375..93322b42 100644
--- a/src/main/java/com/activeandroid/Cache.java
+++ b/src/main/java/com/activeandroid/Cache.java
@@ -20,7 +20,6 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.support.v4.util.LruCache;
 
-import com.activeandroid.app.AAApplication;
 import com.activeandroid.serializer.TypeSerializer;
 import com.activeandroid.util.AALog;
 
@@ -46,6 +45,12 @@
 
 	private static boolean sIsInitialized = false;
 
+
+    /**
+     * boolean to tell us whether a migration has successfully been executed
+     */
+    private static boolean migrationExecuted;
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -53,6 +58,15 @@
 	private Cache() {
 	}
 
+
+    public static boolean hasMigrationExecuted() {
+        return migrationExecuted;
+    }
+
+    public static void setMigrationExecuted(boolean executed) {
+        migrationExecuted = executed;
+    }
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -113,11 +127,6 @@ public static Context getContext() {
 		return sContext;
 	}
 
-    // AAApplication access
-    public static AAApplication getAAApplication() {
-        return (AAApplication) sContext;
-    }
-
 	// Entity cache
 
 	public static String getIdentifier(Class<? extends Model> type, String entityId) {
diff --git a/src/main/java/com/activeandroid/DatabaseHelper.java b/src/main/java/com/activeandroid/DatabaseHelper.java
index a6be84bf..2d8fa59c 100644
--- a/src/main/java/com/activeandroid/DatabaseHelper.java
+++ b/src/main/java/com/activeandroid/DatabaseHelper.java
@@ -74,7 +74,8 @@ public void onCreate(SQLiteDatabase db) {
     public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
         executePragmas(db);
         executeCreate(db);
-        executeMigrations(db, oldVersion, newVersion);
+        boolean migrationSuccess = executeMigrations(db, oldVersion, newVersion);
+        Cache.setMigrationExecuted(migrationSuccess);
     }
 
     //////////////////////////////////////////////////////////////////////////////////////
@@ -165,10 +166,6 @@ private boolean executeMigrations(SQLiteDatabase db, int oldVersion, int newVers
             AALog.e("Failed to execute migrations.", e);
         }
 
-        if(migrationExecuted) {
-            Cache.getAAApplication().onMigrationSuccessful();
-        }
-
         return migrationExecuted;
     }
 
diff --git a/src/main/java/com/activeandroid/Model.java b/src/main/java/com/activeandroid/Model.java
index 2f6663e9..d94312e3 100644
--- a/src/main/java/com/activeandroid/Model.java
+++ b/src/main/java/com/activeandroid/Model.java
@@ -72,90 +72,94 @@ public final void delete() {
 
 	public final void save() {
 		final SQLiteDatabase db = Cache.openDatabase();
-		final ContentValues values = new ContentValues();
-
-		for (Field field : mTableInfo.getFields()) {
-			String fieldName = mTableInfo.getColumnName(field);
-			Class<?> fieldType = field.getType();
-
-			field.setAccessible(true);
-
-			try {
-				Object value = field.get(this);
+        save(db);
+	}
 
-				if (value != null) {
-					final TypeSerializer typeSerializer = Cache.getParserForType(fieldType);
-					if (typeSerializer != null) {
-						// serialize data
-						value = typeSerializer.serialize(value);
-						// set new object type
-						if (value != null) {
-							fieldType = value.getClass();
-							// check that the serializer returned what it promised
-							if (!fieldType.equals(typeSerializer.getSerializedType())) {
-								AALog.w(String.format("TypeSerializer returned wrong type: expected a %s but got a %s",
+    private void save(final SQLiteDatabase db) {
+        final ContentValues values = new ContentValues();
+
+        for (Field field : mTableInfo.getFields()) {
+            String fieldName = mTableInfo.getColumnName(field);
+            Class<?> fieldType = field.getType();
+
+            field.setAccessible(true);
+
+            try {
+                Object value = field.get(this);
+
+                if (value != null) {
+                    final TypeSerializer typeSerializer = Cache.getParserForType(fieldType);
+                    if (typeSerializer != null) {
+                        // serialize data
+                        value = typeSerializer.serialize(value);
+                        // set new object type
+                        if (value != null) {
+                            fieldType = value.getClass();
+                            // check that the serializer returned what it promised
+                            if (!fieldType.equals(typeSerializer.getSerializedType())) {
+                                AALog.w(String.format("TypeSerializer returned wrong type: expected a %s but got a %s",
                                         typeSerializer.getSerializedType(), fieldType));
-							}
-						}
-					}
-				}
+                            }
+                        }
+                    }
+                }
 
-				// TODO: Find a smarter way to do this? This if block is necessary because we
-				// can't know the type until runtime.
-				if (value == null) {
-					values.putNull(fieldName);
-				}
-				else if (fieldType.equals(Byte.class) || fieldType.equals(byte.class)) {
-					values.put(fieldName, (Byte) value);
-				}
-				else if (fieldType.equals(Short.class) || fieldType.equals(short.class)) {
-					values.put(fieldName, (Short) value);
-				}
-				else if (fieldType.equals(Integer.class) || fieldType.equals(int.class)) {
-					values.put(fieldName, (Integer) value);
-				}
-				else if (fieldType.equals(Long.class) || fieldType.equals(long.class)) {
-					values.put(fieldName, (Long) value);
-				}
-				else if (fieldType.equals(Float.class) || fieldType.equals(float.class)) {
-					values.put(fieldName, (Float) value);
-				}
-				else if (fieldType.equals(Double.class) || fieldType.equals(double.class)) {
-					values.put(fieldName, (Double) value);
-				}
-				else if (fieldType.equals(Boolean.class) || fieldType.equals(boolean.class)) {
-					values.put(fieldName, (Boolean) value);
-				}
-				else if (fieldType.equals(Character.class) || fieldType.equals(char.class)) {
-					values.put(fieldName, value.toString());
-				}
-				else if (fieldType.equals(String.class)) {
-					values.put(fieldName, value.toString());
-				}
-				else if (fieldType.equals(Byte[].class) || fieldType.equals(byte[].class)) {
-					values.put(fieldName, (byte[]) value);
-				}
-				else if (field.isAnnotationPresent(ForeignKey.class) && ReflectionUtils.isModel(fieldType)) {
+                // TODO: Find a smarter way to do this? This if block is necessary because we
+                // can't know the type until runtime.
+                if (value == null) {
+                    values.putNull(fieldName);
+                }
+                else if (fieldType.equals(Byte.class) || fieldType.equals(byte.class)) {
+                    values.put(fieldName, (Byte) value);
+                }
+                else if (fieldType.equals(Short.class) || fieldType.equals(short.class)) {
+                    values.put(fieldName, (Short) value);
+                }
+                else if (fieldType.equals(Integer.class) || fieldType.equals(int.class)) {
+                    values.put(fieldName, (Integer) value);
+                }
+                else if (fieldType.equals(Long.class) || fieldType.equals(long.class)) {
+                    values.put(fieldName, (Long) value);
+                }
+                else if (fieldType.equals(Float.class) || fieldType.equals(float.class)) {
+                    values.put(fieldName, (Float) value);
+                }
+                else if (fieldType.equals(Double.class) || fieldType.equals(double.class)) {
+                    values.put(fieldName, (Double) value);
+                }
+                else if (fieldType.equals(Boolean.class) || fieldType.equals(boolean.class)) {
+                    values.put(fieldName, (Boolean) value);
+                }
+                else if (fieldType.equals(Character.class) || fieldType.equals(char.class)) {
+                    values.put(fieldName, value.toString());
+                }
+                else if (fieldType.equals(String.class)) {
+                    values.put(fieldName, value.toString());
+                }
+                else if (fieldType.equals(Byte[].class) || fieldType.equals(byte[].class)) {
+                    values.put(fieldName, (byte[]) value);
+                }
+                else if (field.isAnnotationPresent(ForeignKey.class) && ReflectionUtils.isModel(fieldType)) {
                     ForeignKey key = field.getAnnotation(ForeignKey.class);
                     if(!key.name().equals("")){
                         fieldName = field.getAnnotation(ForeignKey.class).name();
                     }
-					values.put(fieldName, ((Model) value).getId());
-				}
-				else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
-					values.put(fieldName, ((Enum<?>) value).name());
-				}
-			}
-			catch (IllegalArgumentException e) {
-				AALog.e(e.getClass().getName(), e);
-			}
-			catch (IllegalAccessException e) {
-				AALog.e(e.getClass().getName(), e);
-			}
-		}
+                    values.put(fieldName, ((Model) value).getId());
+                }
+                else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
+                    values.put(fieldName, ((Enum<?>) value).name());
+                }
+            }
+            catch (IllegalArgumentException e) {
+                AALog.e(e.getClass().getName(), e);
+            }
+            catch (IllegalAccessException e) {
+                AALog.e(e.getClass().getName(), e);
+            }
+        }
 
         if(!exists()){
-		     mId = db.insert(mTableInfo.getTableName(), null, values);
+            mId = db.insert(mTableInfo.getTableName(), null, values);
 
             for(Field field : mTableInfo.getPrimaryKeys()){
                 if(field.isAnnotationPresent(PrimaryKey.class) &&
@@ -169,12 +173,12 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
                 }
             }
         } else {
-			mId = db.update(mTableInfo.getTableName(), values, SQLiteUtils.getWhereStatement(this, mTableInfo), null);
-		}
+            mId = db.update(mTableInfo.getTableName(), values, SQLiteUtils.getWhereStatement(this, mTableInfo), null);
+        }
 
-		Cache.getContext().getContentResolver()
-				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), getId()), null);
-	}
+        Cache.getContext().getContentResolver()
+                .notifyChange(ContentProvider.createUri(mTableInfo.getType(), getId()), null);
+    }
 
     public boolean exists(){
         Model model = new Select().from(getClass()).where(SQLiteUtils.getWhereStatement(this, mTableInfo)).executeSingle();
diff --git a/src/main/java/com/activeandroid/app/AAApplication.java b/src/main/java/com/activeandroid/app/AAApplication.java
index e9812c9c..3d12fe4a 100644
--- a/src/main/java/com/activeandroid/app/AAApplication.java
+++ b/src/main/java/com/activeandroid/app/AAApplication.java
@@ -17,6 +17,7 @@
  */
 
 import com.activeandroid.ActiveAndroid;
+import com.activeandroid.Cache;
 import com.activeandroid.manager.DBManagerRuntime;
 
 public class AAApplication extends android.app.Application {
@@ -27,8 +28,10 @@
     public void onCreate() {
         super.onCreate();
         ActiveAndroid.initialize(this);
-
         DBManagerRuntime.restartManagers();
+        if(Cache.hasMigrationExecuted()) {
+            onMigrationSuccessful();
+        }
     }
 
     public static void setDebugLogEnabled(boolean enabled) {
diff --git a/src/main/java/com/activeandroid/query/From.java b/src/main/java/com/activeandroid/query/From.java
index a410a1b7..fb403368 100644
--- a/src/main/java/com/activeandroid/query/From.java
+++ b/src/main/java/com/activeandroid/query/From.java
@@ -227,7 +227,8 @@ public long executeCount(){
 
     /**
      * Returns the DB Cursor from the SQL statement
-     * @return
+     * @return {@link android.database.Cursor} Note that the cursor is positioned before the first entry,
+     * so you must call {@link android.database.Cursor#moveToNext()} to use the cursor
      */
     public Cursor getCursor(){
         return Cache.openDatabase().rawQuery(toSql(), getArguments());
