diff --git a/README.md b/README.md
index 1a66ef46..e0964e57 100644
--- a/README.md
+++ b/README.md
@@ -6,6 +6,7 @@ Fork from ActiveAndroidRx (vicpinm repository) version 3.1.5
 - ActiveAndroidRx : Reactive queries with SQLBrite from Square
 - UPDATE onConflictAction
 - in() andIn() orIn() methods in From class (in() and andIn() are same method)
+- Manipulate last transaction in static mode
 
 ## Usage
 
@@ -16,7 +17,15 @@ ActiveAndroidRx:
 UPDATE OnConflictAction:
 
     @Column(... onConlictAction=ConflictAction.UPDATE)
-    
+
+Transaction
+
+    ActiveAndroid.beginTransaction();         // Start a new transaction. Return a SQLBrite.Transaction
+    ActiveAndroid.commitTransaction();        // Mark last transaction as successful and end it one
+    ActiveAndroid.setTransactionSuccessful(); // Mark last transaction as successful
+    ActiveAndroid.endTransaction();           // End last transaction (rollback if no marked as successful)
+    ActiveAndroid.getLastTransaction;         // Get last SQLBrite.Transaction if not ended
+
 ## Download
 
 Grab via Gradle:
diff --git a/src/com/activeandroid/ActiveAndroid.java b/src/com/activeandroid/ActiveAndroid.java
index 4ff2d0fb..a708e45a 100644
--- a/src/com/activeandroid/ActiveAndroid.java
+++ b/src/com/activeandroid/ActiveAndroid.java
@@ -32,6 +32,9 @@
 import rx.schedulers.Schedulers;
 
 public final class ActiveAndroid {
+
+    protected static BriteDatabase.Transaction sLastTransaction = null;
+
     //////////////////////////////////////////////////////////////////////////////////////
     // PUBLIC METHODS
     //////////////////////////////////////////////////////////////////////////////////////
@@ -71,7 +74,44 @@ public static BriteDatabase getDatabase() {
     }
 
     public static BriteDatabase.Transaction beginTransaction() {
-        return Cache.openDatabase().newTransaction();
+        sLastTransaction = Cache.openDatabase().newTransaction();
+        return sLastTransaction;
+    }
+
+    /** End of last transaction */
+    public static void endTransaction() {
+        if (sLastTransaction != null) {
+            endTransaction(sLastTransaction);
+            sLastTransaction = null;
+        }
+    }
+
+    /** Mark last transaction as successful */
+    public static void setTransactionSuccessful() {
+        if (sLastTransaction != null) {
+            setTransactionSuccessful(sLastTransaction);
+            sLastTransaction.close();
+        }
+    }
+
+    /** Commit last transaction : marksuccessful + end */
+    public static void commitTransaction() {
+        if (sLastTransaction != null) {
+            commitTransaction(sLastTransaction);
+            sLastTransaction = null;
+        }
+    }
+
+    /** Get last transaction if not ended */
+    public static BriteDatabase.Transaction getLastTransaction()
+    {
+        return sLastTransaction;
+    }
+
+    /** Mark transaction as successful and end it one */
+    public static void commitTransaction(BriteDatabase.Transaction transaction){
+        transaction.markSuccessful();
+        transaction.end();
     }
 
     public static void endTransaction(BriteDatabase.Transaction transaction) {
