diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 6563dbe2..2f5cc23a 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -134,9 +134,21 @@ public final Long save() {
                 } else if (ReflectionUtils.isModel(fieldType)) {
                     Model model = (Model) value;
                     Long foreignkeyID = model.getId();
+                    Column.ModelAutoCreateAction autoCreateAction = field.getAnnotation(Column.class).onAutoCreate();
+
                     if (foreignkeyID == null && field.getAnnotation(Column.class).autoCreate()) {
-                        model.save();
-                        foreignkeyID = model.getId();
+                        autoCreateAction = Column.ModelAutoCreateAction.SAVE;
+                    }
+                    switch (autoCreateAction) {
+                        case NO_ACTION:
+                            break;
+                        case SAVE:
+                            model.save();
+                            foreignkeyID = model.getId();
+                            break;
+                        case CREATE_OR_UPDATE:
+                            foreignkeyID = createOrUpdate(model).getId();
+                            break;
                     }
                     values.put(fieldName, foreignkeyID);
                 } else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
@@ -146,6 +158,10 @@ public final Long save() {
                 Log.e(e.getClass().getName(), e);
             } catch (IllegalAccessException e) {
                 Log.e(e.getClass().getName(), e);
+            } catch (IllegalUniqueIdentifierException e) {
+                Log.e(e.getClass().getName(), e);
+            } catch (ModelUpdateException e) {
+                Log.e(e.getClass().getName(), e);
             }
         }
 
@@ -316,7 +332,7 @@ public int hashCode() {
         String uniqueIdentifier = info.getUniqueIdentifier();
         T entity;
         try {
-            Field f = objectClass.getDeclaredField(uniqueIdentifier);
+            Field f = getUniqueField(objectClass, uniqueIdentifier);
             String columnName = info.getColumnName(f);
             f.setAccessible(true);
             Object value = f.get(object);
@@ -383,4 +399,21 @@ public int hashCode() {
         }
         return entitiesToBeDeleted;
     }
+
+    private static Field getUniqueField(Class<?> objectClass, String uniqueIdentifier) throws NoSuchFieldException {
+
+        Field field = null;
+        try {
+            field = objectClass.getDeclaredField(uniqueIdentifier);
+        } catch (NoSuchFieldException e) {
+            Class<?> superclass = objectClass.getSuperclass();
+            if (superclass != null) {
+                field = getUniqueField(superclass, uniqueIdentifier);
+            }
+        }
+        if (field == null) {
+            throw new NoSuchFieldException(uniqueIdentifier);
+        }
+        return field;
+    }
 }
diff --git a/src/com/activeandroid/annotation/Column.java b/src/com/activeandroid/annotation/Column.java
index a9b1d5af..636d558b 100644
--- a/src/com/activeandroid/annotation/Column.java
+++ b/src/com/activeandroid/annotation/Column.java
@@ -26,95 +26,104 @@
 public @interface Column {
 
     public enum ConflictAction {
-		ROLLBACK, ABORT, FAIL, IGNORE, REPLACE
-	}
+        ROLLBACK, ABORT, FAIL, IGNORE, REPLACE
+    }
+
+    public enum ForeignKeyAction {
+        SET_NULL, SET_DEFAULT, CASCADE, RESTRICT, NO_ACTION
+    }
 
-	public enum ForeignKeyAction {
-		SET_NULL, SET_DEFAULT, CASCADE, RESTRICT, NO_ACTION
-	}
     public enum ModelUpdateAction {
         UPDATE, REPLACE, NO_ACTION
     }
 
-	public String name() default "";
+    public enum ModelAutoCreateAction {
+        NO_ACTION, SAVE, CREATE_OR_UPDATE
+    }
+    public String name() default "";
 
-	public int length() default -1;
+    public int length() default -1;
 
-	public boolean notNull() default false;
+    public boolean notNull() default false;
 
-	public ConflictAction onNullConflict() default ConflictAction.FAIL;
+    public ConflictAction onNullConflict() default ConflictAction.FAIL;
 
-	public ForeignKeyAction onDelete() default ForeignKeyAction.NO_ACTION;
+    public ForeignKeyAction onDelete() default ForeignKeyAction.NO_ACTION;
 
-	public ForeignKeyAction onUpdate() default ForeignKeyAction.NO_ACTION;
+    public ForeignKeyAction onUpdate() default ForeignKeyAction.NO_ACTION;
 
+    @Deprecated
+    /**
+     *    @deprecated Use onAutoCreateAction instead
+     */
     public boolean autoCreate() default false;
 
     public ModelUpdateAction onModelUpdate() default ModelUpdateAction.NO_ACTION;
 
     public boolean unique() default false;
 
-	public ConflictAction onUniqueConflict() default ConflictAction.FAIL;
-
-	/*
-	 * If set uniqueGroups = {"group_name"}, we will create a table constraint with group.
-	 *
-	 * Example:
-	 *
-	 * @Table(name = "table_name")
-	 * public class Table extends Model {
-	 *     @Column(name = "member1", uniqueGroups = {"group1"}, onUniqueConflicts = {ConflictAction.FAIL})
-	 *     public String member1;
-	 *
-	 *     @Column(name = "member2", uniqueGroups = {"group1", "group2"}, onUniqueConflicts = {ConflictAction.FAIL, ConflictAction.IGNORE})
-	 *     public String member2;
-	 *
-	 *     @Column(name = "member3", uniqueGroups = {"group2"}, onUniqueConflicts = {ConflictAction.IGNORE})
-	 *     public String member3;
-	 * }
-	 *
-	 * CREATE TABLE table_name (..., UNIQUE (member1, member2) ON CONFLICT FAIL, UNIQUE (member2, member3) ON CONFLICT IGNORE)
-	 */
-	public String[] uniqueGroups() default {};
-
-	public ConflictAction[] onUniqueConflicts() default {};
-
-	/*
-	 * If set index = true, we will create a index with single column.
-	 *
-	 * Example:
-	 *
-	 * @Table(name = "table_name")
-	 * public class Table extends Model {
-	 *     @Column(name = "member", index = true)
-	 *     public String member;
-	 * }
-	 *
-	 * Execute CREATE INDEX index_table_name_member on table_name(member)
-	 */
-	public boolean index() default false;
-
-	/*
-	 * If set indexGroups = {"group_name"}, we will create a index with group.
-	 *
-	 * Example:
-	 *
-	 * @Table(name = "table_name")
-	 * public class Table extends Model {
-	 *     @Column(name = "member1", indexGroups = {"group1"})
-	 *     public String member1;
-	 *
-	 *     @Column(name = "member2", indexGroups = {"group1", "group2"})
-	 *     public String member2;
-	 *
-	 *     @Column(name = "member3", indexGroups = {"group2"})
-	 *     public String member3;
-	 * }
-	 *
-	 * Execute CREATE INDEX index_table_name_group1 on table_name(member1, member2)
-	 * Execute CREATE INDEX index_table_name_group2 on table_name(member2, member3)
-	 */
-	public String[] indexGroups() default {};
+    public ConflictAction onUniqueConflict() default ConflictAction.FAIL;
+
+    public ModelAutoCreateAction onAutoCreate() default ModelAutoCreateAction.NO_ACTION;
+    /*
+     * If set uniqueGroups = {"group_name"}, we will create a table constraint with group.
+     *
+     * Example:
+     *
+     * @Table(name = "table_name")
+     * public class Table extends Model {
+     *     @Column(name = "member1", uniqueGroups = {"group1"}, onUniqueConflicts = {ConflictAction.FAIL})
+     *     public String member1;
+     *
+     *     @Column(name = "member2", uniqueGroups = {"group1", "group2"}, onUniqueConflicts = {ConflictAction.FAIL, ConflictAction.IGNORE})
+     *     public String member2;
+     *
+     *     @Column(name = "member3", uniqueGroups = {"group2"}, onUniqueConflicts = {ConflictAction.IGNORE})
+     *     public String member3;
+     * }
+     *
+     * CREATE TABLE table_name (..., UNIQUE (member1, member2) ON CONFLICT FAIL, UNIQUE (member2, member3) ON CONFLICT IGNORE)
+     */
+    public String[] uniqueGroups() default {};
+
+    public ConflictAction[] onUniqueConflicts() default {};
+
+    /*
+     * If set index = true, we will create a index with single column.
+     *
+     * Example:
+     *
+     * @Table(name = "table_name")
+     * public class Table extends Model {
+     *     @Column(name = "member", index = true)
+     *     public String member;
+     * }
+     *
+     * Execute CREATE INDEX index_table_name_member on table_name(member)
+     */
+    public boolean index() default false;
+
+    /*
+     * If set indexGroups = {"group_name"}, we will create a index with group.
+     *
+     * Example:
+     *
+     * @Table(name = "table_name")
+     * public class Table extends Model {
+     *     @Column(name = "member1", indexGroups = {"group1"})
+     *     public String member1;
+     *
+     *     @Column(name = "member2", indexGroups = {"group1", "group2"})
+     *     public String member2;
+     *
+     *     @Column(name = "member3", indexGroups = {"group2"})
+     *     public String member3;
+     * }
+     *
+     * Execute CREATE INDEX index_table_name_group1 on table_name(member1, member2)
+     * Execute CREATE INDEX index_table_name_group2 on table_name(member2, member3)
+     */
+    public String[] indexGroups() default {};
 
 
 }
