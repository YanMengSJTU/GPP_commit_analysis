diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 276b10c9..fe1b14b8 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -293,10 +293,6 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 				Log.e(e.getClass().getName(), e);
 			}
 		}
-
-		if (mId != null) {
-			Cache.addEntity(this);
-		}
 	}
 	
 	
diff --git a/src/com/activeandroid/query/From.java b/src/com/activeandroid/query/From.java
index ab3837a9..f2f1cea9 100644
--- a/src/com/activeandroid/query/From.java
+++ b/src/com/activeandroid/query/From.java
@@ -40,6 +40,7 @@
 	private String mOrderBy;
 	private String mLimit;
 	private String mOffset;
+    private boolean useCache = true;
 
 	private List<Object> mArguments;
 
@@ -295,7 +296,7 @@ public String toCountSql() {
 
 	public <T extends Model> List<T> execute() {
 		if (mQueryBase instanceof Select) {
-			return SQLiteUtils.rawQuery(mType, toSql(), getArguments());
+			return SQLiteUtils.rawQuery(mType, toSql(), getArguments(), useCache);
 			
 		} else {
 			SQLiteUtils.execSql(toSql(), getArguments());
@@ -308,7 +309,7 @@ public String toCountSql() {
 	public <T extends Model> T executeSingle() {
 		if (mQueryBase instanceof Select) {
 			limit(1);
-			return (T) SQLiteUtils.rawQuerySingle(mType, toSql(), getArguments());
+			return (T) SQLiteUtils.rawQuerySingle(mType, toSql(), getArguments(), useCache);
 			
 		} else {
 			limit(1);
@@ -343,4 +344,15 @@ public int count() {
 
 		return args;
 	}
+
+    /**
+     * Retrieve entities from ActiveAndroid's cache. The cache is enabled by default.
+     * @param useCache
+     * @return
+     */
+    public From setUseCache(boolean useCache) {
+        this.useCache = useCache;
+        return this;
+    }
+
 }
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index c4b54550..01958529 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -100,13 +100,17 @@ public static void execSql(String sql, Object[] bindArgs) {
 		Cache.openDatabase().execSQL(sql, bindArgs);
 	}
 
-	public static <T extends Model> List<T> rawQuery(Class<? extends Model> type, String sql, String[] selectionArgs) {
+	public static <T extends Model> List<T> rawQuery(Class<? extends Model> type, String sql, String[] selectionArgs, boolean useCache) {
 		Cursor cursor = Cache.openDatabase().rawQuery(sql, selectionArgs);
-		List<T> entities = processCursor(type, cursor);
+		List<T> entities = processCursor(type, cursor, useCache);
 		cursor.close();
 
 		return entities;
 	}
+
+	public static <T extends Model> List<T> rawQuery(Class<? extends Model> type, String sql, String[] selectionArgs){
+		return rawQuery(type, sql, selectionArgs, true);
+	}
 	  
 	public static int intQuery(final String sql, final String[] selectionArgs) {
         final Cursor cursor = Cache.openDatabase().rawQuery(sql, selectionArgs);
@@ -116,8 +120,8 @@ public static int intQuery(final String sql, final String[] selectionArgs) {
         return number;
 	}
 
-	public static <T extends Model> T rawQuerySingle(Class<? extends Model> type, String sql, String[] selectionArgs) {
-		List<T> entities = rawQuery(type, sql, selectionArgs);
+	public static <T extends Model> T rawQuerySingle(Class<? extends Model> type, String sql, String[] selectionArgs, boolean useCache) {
+		List<T> entities = rawQuery(type, sql, selectionArgs, useCache);
 
 		if (entities.size() > 0) {
 			return entities.get(0);
@@ -126,6 +130,10 @@ public static int intQuery(final String sql, final String[] selectionArgs) {
 		return null;
 	}
 
+	public static <T extends Model> T rawQuerySingle(Class<? extends Model> type, String sql, String[] selectionArgs){
+		return rawQuerySingle(type, sql, selectionArgs, true);
+	}
+
 	// Database creation
 
 	public static ArrayList<String> createUniqueDefinition(TableInfo tableInfo) {
@@ -358,7 +366,7 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 	}
 
 	@SuppressWarnings("unchecked")
-	public static <T extends Model> List<T> processCursor(Class<? extends Model> type, Cursor cursor) {
+	public static <T extends Model> List<T> processCursor(Class<? extends Model> type, Cursor cursor, boolean useCache) {
 		TableInfo tableInfo = Cache.getTableInfo(type);
 		String idName = tableInfo.getIdName();
 		final List<T> entities = new ArrayList<T>();
@@ -373,13 +381,24 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
                  */
                 List<String> columnsOrdered = new ArrayList<String>(Arrays.asList(cursor.getColumnNames()));
 				do {
-					Model entity = Cache.getEntity(type, cursor.getLong(columnsOrdered.indexOf(idName)));
+					Model entity;
+
+					if(useCache) {
+						entity = Cache.getEntity(type, cursor.getLong(columnsOrdered.indexOf(idName)));
+					} else {
+						entity = null;
+					}
+
 					if (entity == null) {
 						entity = (T) entityConstructor.newInstance();
 					}
 
 					entity.loadFromCursor(cursor);
 					entities.add((T) entity);
+
+					// add to cache
+					if (entity.getId() != null)
+						Cache.addEntity(entity);
 				}
 				while (cursor.moveToNext());
 			}
@@ -402,6 +421,10 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 		return entities;
 	}
 
+	public static <T extends Model> List<T> processCursor(Class<? extends Model> type, Cursor cursor){
+		return processCursor(type, cursor, true);
+	}
+
 	private static int processIntCursor(final Cursor cursor) {
         if (cursor.moveToFirst()) {
             return cursor.getInt(0);
