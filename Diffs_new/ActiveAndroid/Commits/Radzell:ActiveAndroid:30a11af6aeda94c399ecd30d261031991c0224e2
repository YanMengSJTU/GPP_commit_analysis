diff --git a/src/com/activeandroid/Cache.java b/src/com/activeandroid/Cache.java
index 8fbb0cd3..5886657b 100644
--- a/src/com/activeandroid/Cache.java
+++ b/src/com/activeandroid/Cache.java
@@ -160,9 +160,16 @@ public static synchronized String getTableName(Class<? extends Model> type) {
 		return sModelInfo.getTableInfo(type).getTableName();
 	}
     public static synchronized int getOldDbVersion(){
-        return sDatabaseHelper.getOldDbVersion();
+        if(sDatabaseHelper!=null) {
+            return sDatabaseHelper.getOldDbVersion();
+        }
+        return -1;
     }
-    public static synchronized int getOldNewVersion(){
-        return sDatabaseHelper.getNewDbVersion();
+    public static synchronized int getOldNewVersion() {
+        if (sDatabaseHelper != null) {
+            return sDatabaseHelper.getNewDbVersion();
+        }
+        return -1;
     }
+
 }
diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 41dadb09..17c4d2e1 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -21,6 +21,7 @@
 import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
 
+import com.activeandroid.app.ORMException;
 import com.activeandroid.content.ContentProvider;
 import com.activeandroid.query.Delete;
 import com.activeandroid.query.Select;
@@ -98,11 +99,14 @@ public final void delete() {
     public void onBeforeSave() {
 
     }
+    public final Long saveOrUpdate(boolean saveNulls) throws SQLException {
+        return saveOrUpdate(true,true,saveNulls);
+    }
 
     public final Long saveOrUpdate() throws SQLException {
-        return saveOrUpdate(true,true);
+        return saveOrUpdate(true,true,false);
     }
-    private final Long saveOrUpdate(boolean update, boolean save) throws SQLException {
+    private final Long saveOrUpdate(boolean update, boolean save,boolean saveNulls) throws SQLException {
         onBeforeSave();
         final SQLiteDatabase db = Cache.openDatabase();
         final ContentValues values = new ContentValues();
@@ -141,7 +145,9 @@ private final Long saveOrUpdate(boolean update, boolean save) throws SQLExceptio
                 }
                 // TODO: Find a smarter way to do this? This if block is necessary because we
                 // can't know the type until runtime.
-                if (value == null) {
+                if(value==null&&!saveNulls){
+                    continue;
+                } else if (value == null&&saveNulls) {
                     values.putNull(columnField.getName());
                 } else if (fieldType.equals(Byte.class) || fieldType.equals(byte.class)) {
                     values.put(columnField.getName(), (Byte) value);
@@ -186,10 +192,18 @@ private final Long saveOrUpdate(boolean update, boolean save) throws SQLExceptio
                 if (affected <= 0&&save) {
                     mId = db.insertOrThrow(mTableInfo.getTableName(), null, values);
                 }else{
-                    mId = new Select(idName).from(mTableInfo.getType()).where(matchColumnField.getName() + " = ?", matchValue).executeSingle().getId();
+                    Log.i(matchValue+" updated in"+mTableInfo.getTableName()+", rows affected "+affected);
+                    Model object = new Select(idName).from(mTableInfo.getType()).where(matchColumnField.getName() + " = ?", matchValue).executeSingle();
+                    if(object==null){
+                        throw new ORMException("Model was not saved");
+                    }else {
+                        mId = object.getId();
+                    }
                 }
             } else if(save) {
                 mId = db.insertOrThrow(mTableInfo.getTableName(), null, values);
+                Log.i(matchValue+" saved in"+mTableInfo.getTableName());
+
             }
 
 
@@ -202,12 +216,19 @@ private final Long saveOrUpdate(boolean update, boolean save) throws SQLExceptio
     }
 
     public final long save() throws SQLException {
-        return saveOrUpdate(false,true);
+        return saveOrUpdate(false,true,false);
     }
 
     public final long update() throws SQLException {
-        return saveOrUpdate(true,false);
+        return saveOrUpdate(true,false,false);
     }
+    public final long save(boolean saveNulls) throws SQLException {
+        return saveOrUpdate(false,true,saveNulls);
+    }
+    public final long update(boolean saveNulls) throws SQLException {
+        return saveOrUpdate(true,false,saveNulls);
+    }
+
     // Convenience methods
 
     public static void delete(Class<? extends Model> type, long id) {
diff --git a/src/com/activeandroid/ModelInfo.java b/src/com/activeandroid/ModelInfo.java
index 94d99069..864f3260 100644
--- a/src/com/activeandroid/ModelInfo.java
+++ b/src/com/activeandroid/ModelInfo.java
@@ -253,7 +253,9 @@ else if (ReflectionUtils.isTypeSerializer(discoveredClass)) {
 			}
 			catch (IllegalAccessException e) {
 				Log.e("IllegalAccessException", e);
-			}
+			}catch (NoClassDefFoundError e){
+                Log.e("NoClassDefFoundError", e);
+            }
 		}
 	}
 
diff --git a/src/com/activeandroid/app/ORMException.java b/src/com/activeandroid/app/ORMException.java
new file mode 100644
index 00000000..72486329
--- /dev/null
+++ b/src/com/activeandroid/app/ORMException.java
@@ -0,0 +1,7 @@
+package com.activeandroid.app;
+
+public class ORMException extends RuntimeException{
+    public ORMException(String s) {
+        super(s);
+    }
+}
diff --git a/src/com/activeandroid/query/From.java b/src/com/activeandroid/query/From.java
index ab3837a9..e731240d 100644
--- a/src/com/activeandroid/query/From.java
+++ b/src/com/activeandroid/query/From.java
@@ -16,6 +16,7 @@
  * limitations under the License.
  */
 
+import android.database.Cursor;
 import android.text.TextUtils;
 
 import com.activeandroid.Cache;
@@ -305,6 +306,17 @@ public String toCountSql() {
 		}
 	}
 
+    public Cursor executetoCursor(){
+        if (mQueryBase instanceof Select) {
+            return 	Cache.openDatabase().rawQuery(toSql(), getArguments());
+        } else {
+            SQLiteUtils.execSql(toSql(), getArguments());
+            Cache.getContext().getContentResolver().notifyChange(ContentProvider.createUri(mType, null), null);
+            return null;
+
+        }
+    }
+
 	public <T extends Model> T executeSingle() {
 		if (mQueryBase instanceof Select) {
 			limit(1);
