diff --git a/.travis.yml b/.travis.yml
index bed811fd..4272ce45 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,40 +1,28 @@
-language: java
-jdk: oraclejdk7
 env: ANDROID_SDK=android-16 ANDROID_ABI=armeabi-v7a
+language: android
+android:
+  components:
+    # The SDK version used to compile your project
+    - $ANDROID_SDK
 
-before_install:
-  # Install ia32-libs (necessary for Android SDK to run on 64-bit linux)
-  # - sudo apt-get clean && sudo apt-get update
-  - sudo apt-get update -qq
-  - sudo apt-get install -qq --force-yes libgd2-xpm ia32-libs ia32-libs-multiarch
+    # Additional components
+    - extra-google-m2repository
+    - extra-android-m2repository
+    - extra-android-support
 
-  # Install Android SDK
-  - wget http://dl.google.com/android/android-sdk_r22.6.2-linux.tgz
-  - tar -zxf android-sdk_r22.6.2-linux.tgz
-  - ls
-  - export ANDROID_HOME=`pwd`/android-sdk-linux
-  - export PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools
+    # Specify at least one system image,
+    # if you need to run emulator(s) during your tests
+    - sys-img-$ANDROID_ABI-$ANDROID_SDK
 
-  # Install build-tools
-  - wget https://dl-ssl.google.com/android/repository/build-tools_r19.0.3-linux.zip
-  - unzip build-tools_r19.0.3-linux.zip -d $ANDROID_HOME
-  - mkdir -p $ANDROID_HOME/build-tools/
-  - mv $ANDROID_HOME/android-4.4.2 $ANDROID_HOME/build-tools/19.0.1
+  licenses:
+    - 'android-sdk-license-.+'
 
-  # Install required Android components
-  - android list sdk --extended
-  # Do you accept the license 'android-sdk-license-bcbbd656' [y/n]:
-  - echo -ne "y\n" | android update sdk --filter system-image,platform-tools,extra-android-support,$ANDROID_SDK --no-ui --force
-
-  # Create and start emulator
+before_script:
   - echo no | android create avd --force -n test -t $ANDROID_SDK --abi $ANDROID_ABI
   - android list avds
   - emulator -avd test -no-skin -no-audio -no-window &
+  - android-wait-for-emulator
+  - adb shell input keyevent 82 &
+  - mvn --version
 
-before_script:
-  # Make sure the emulator has started before running tests
-  - chmod +x ./wait_for_emulator
-  - ./wait_for_emulator
-
-script:
-  - mvn clean install -e
+script: mvn clean install
diff --git a/README.md b/README.md
index c0c92fe5..23b52e04 100644
--- a/README.md
+++ b/README.md
@@ -8,6 +8,7 @@ This is my fork, with my changes.
 
 * Enabled UUID serialization/deserialization
 * All arguments in "where" now serialized too if it possible
+* Database reset meta [more about](https://github.com/jlhonora/ActiveAndroid/commit/945a096fb28aca21cc8bf99e9f8f6930f8e82098)
 
 ## Download
 
diff --git a/android-wait-for-emulator b/android-wait-for-emulator
new file mode 100755
index 00000000..aa6345d8
--- /dev/null
+++ b/android-wait-for-emulator
@@ -0,0 +1,25 @@
+#!/bin/bash
+
+# Originally written by Ralf Kistner <ralf@embarkmobile.com>, but placed in the public domain
+
+set +e
+
+bootanim=""
+failcounter=0
+timeout_in_sec=360
+
+until [[ "$bootanim" =~ "stopped" ]]; do
+  bootanim=`adb -e shell getprop init.svc.bootanim 2>&1 &`
+  if [[ "$bootanim" =~ "device not found" || "$bootanim" =~ "device offline"
+    || "$bootanim" =~ "running" ]]; then
+    let "failcounter += 1"
+    echo "Waiting for emulator to start"
+    if [[ $failcounter -gt timeout_in_sec ]]; then
+      echo "Timeout ($timeout_in_sec seconds) reached; failed to start emulator"
+      exit 1
+    fi
+  fi
+  sleep 1
+done
+
+echo "Emulator is ready"
diff --git a/build.gradle b/build.gradle
index 5594e43b..8e456963 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,13 +5,22 @@ targetCompatibility = '1.6'
 sourceCompatibility = '1.6'
 
 sourceSets {
-	main {
-		java {
-			srcDir 'src'
-		}
-	}
+    main {
+        java {
+            srcDir 'src'
+        }
+    }
 }
 
 dependencies {
-	compile fileTree(dir: 'libs', include: '*.jar')
+    compile fileTree(dir: 'libs', include: '*.jar')
 }
+
+
+if (JavaVersion.current().isJava8Compatible()) {
+    allprojects {
+        tasks.withType(Javadoc) {
+            options.addStringOption('Xdoclint:none', '-quiet')
+        }
+    }
+}
\ No newline at end of file
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 330a2c9f..6530fad5 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Fri Nov 29 09:06:20 EST 2013
+#Fri Feb 26 21:30:27 KRAT 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=http\://services.gradle.org/distributions/gradle-1.8-bin.zip
+distributionUrl=http\://services.gradle.org/distributions/gradle-1.8-all.zip
diff --git a/pom.xml b/pom.xml
index eafb111c..e04aaec5 100644
--- a/pom.xml
+++ b/pom.xml
@@ -26,7 +26,7 @@
         <plugin>
           <groupId>com.jayway.maven.plugins.android.generation2</groupId>
           <artifactId>android-maven-plugin</artifactId>
-          <version>3.8.2</version>
+          <version>3.9.0.rc.3</version>
         </plugin>
         <plugin>
           <artifactId>maven-compiler-plugin</artifactId>
diff --git a/src/com/activeandroid/Cache.java b/src/com/activeandroid/Cache.java
index 6495e379..737fe108 100644
--- a/src/com/activeandroid/Cache.java
+++ b/src/com/activeandroid/Cache.java
@@ -66,6 +66,8 @@ public static synchronized void initialize(Configuration configuration) {
 		sModelInfo = new ModelInfo(configuration);
 		sDatabaseHelper = new DatabaseHelper(configuration);
 
+		checkDbReset(configuration);
+
 		// TODO: It would be nice to override sizeOf here and calculate the memory
 		// actually used, however at this point it seems like the reflection
 		// required would be too costly to be of any benefit. We'll just set a max
@@ -155,4 +157,61 @@ public static synchronized TypeSerializer getParserForType(Class<?> type) {
 	public static synchronized String getTableName(Class<? extends Model> type) {
 		return sModelInfo.getTableInfo(type).getTableName();
 	}
+
+    /**
+     * Checks if the db should be reset on startup. It can be enabled
+     * by putting the following lines in your application's manifest:
+     *
+     * ```
+     * <meta-data
+     *    android:name="AA_DB_RESET"
+     *    android:value="true" />
+     * ```
+     *
+     * It will reset the database only once, if and only the `AA_DB_VERSION`
+     * parameter is increased between app releases.
+     *
+     * @param configuration The ActiveAndroid configuration.
+     */
+    public static synchronized void checkDbReset(Configuration configuration) {
+        // Check if the reset flag is set
+        if (configuration != null && configuration.getResetDatabase()) {
+            Log.w("Checking db reset");
+
+            // Get the current db
+            SQLiteDatabase db = sContext.openOrCreateDatabase(
+                    configuration.getDatabaseName(),
+                    Context.MODE_PRIVATE,
+                    null);
+
+            if (db == null) {
+                return;
+            }
+
+            // New dbs always have version == 0
+            if (db.getVersion() == 0) {
+                Log.w("New db, not resetting");
+                return;
+            }
+
+            // Only update if the config version is higher. This
+            // prevents repeated resets
+            if (db.getVersion() >= configuration.getDatabaseVersion()) {
+                Log.w(String.format("Current db version >= config, not resetting (%d >= %d)",
+                        db.getVersion(),
+                        configuration.getDatabaseVersion()));
+                return;
+            }
+
+            // Finally, reset the db. We first delete it
+            // and then we create a new one with the same
+            // name.
+            Log.w("Resetting database");
+            sContext.deleteDatabase(configuration.getDatabaseName());
+            sContext.openOrCreateDatabase(
+                    configuration.getDatabaseName(),
+                    Context.MODE_PRIVATE,
+                    null).close();
+        }
+    }
 }
diff --git a/src/com/activeandroid/Configuration.java b/src/com/activeandroid/Configuration.java
index b197d223..d8bb504f 100644
--- a/src/com/activeandroid/Configuration.java
+++ b/src/com/activeandroid/Configuration.java
@@ -39,6 +39,7 @@
 	private String mDatabaseName;
 	private int mDatabaseVersion;
 	private String mSqlParser;
+	private Boolean mResetDatabase;
 	private List<Class<? extends Model>> mModelClasses;
 	private List<Class<? extends TypeSerializer>> mTypeSerializers;
 	private int mCacheSize;
@@ -71,6 +72,10 @@ public String getSqlParser() {
 	    return mSqlParser;
 	}
 
+	public boolean getResetDatabase() {
+		return mResetDatabase;
+	}
+
 	public List<Class<? extends Model>> getModelClasses() {
 		return mModelClasses;
 	}
@@ -101,6 +106,7 @@ public boolean isValid() {
 		private final static String AA_MODELS = "AA_MODELS";
 		private final static String AA_SERIALIZERS = "AA_SERIALIZERS";
 		private final static String AA_SQL_PARSER = "AA_SQL_PARSER";
+		private final static String AA_DB_RESET = "AA_DB_RESET";
 
 		private static final int DEFAULT_CACHE_SIZE = 1024;
 		private static final String DEFAULT_DB_NAME = "Application.db";
@@ -116,6 +122,7 @@ public boolean isValid() {
 		private String mDatabaseName;
 		private Integer mDatabaseVersion;
 		private String mSqlParser;
+		private Boolean mResetDatabase;
 		private List<Class<? extends Model>> mModelClasses;
 		private List<Class<? extends TypeSerializer>> mTypeSerializers;
 
@@ -152,6 +159,11 @@ public Builder setSqlParser(String sqlParser) {
 		    return this;
 		}
 
+		public Builder setResetDatabase(Boolean resetDatabase) {
+			mResetDatabase = resetDatabase;
+			return this;
+		}
+
 		public Builder addModelClass(Class<? extends Model> modelClass) {
 			if (mModelClasses == null) {
 				mModelClasses = new ArrayList<Class<? extends Model>>();
@@ -243,6 +255,13 @@ public Configuration create() {
 				}
 			}
 
+			// Get reset flag from meta-data
+			if (mResetDatabase != null) {
+				configuration.mResetDatabase = mResetDatabase;
+			} else {
+				configuration.mResetDatabase = getResetDatabaseOrDefault();
+			}
+
 			return configuration;
 		}
 
@@ -314,5 +333,12 @@ private String getMetaDataSqlParserOrDefault() {
 			return typeSerializers;
 		}
 
+		private Boolean getResetDatabaseOrDefault() {
+			final Boolean reset = ReflectionUtils.getMetaData(mContext, AA_DB_RESET);
+			if (reset == null) {
+				return false;
+			}
+			return reset;
+		}
 	}
 }
diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 421426ea..c3470697 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -30,7 +30,9 @@
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 @SuppressWarnings("unchecked")
 public abstract class Model {
@@ -46,6 +48,9 @@
 
 	private final TableInfo mTableInfo;
 	private final String idName;
+	private static Map<String, List<Integer>> columnIndexesCache = new HashMap<String, List<Integer>>();
+	private static Map<String, List<Class>> fieldTypesCache = new HashMap<String, List<Class>>();
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -79,7 +84,9 @@ public final Long save() {
 			final String fieldName = mTableInfo.getColumnName(field);
 			Class<?> fieldType = field.getType();
 
-			field.setAccessible(true);
+			if (!field.isAccessible()) {
+				field.setAccessible(true);
+			}
 
 			try {
 				Object value = field.get(this);
@@ -183,16 +190,39 @@ public final void loadFromCursor(Cursor cursor) {
          * when the cursor have multiple columns with same name obtained from join tables.
          */
         List<String> columnsOrdered = new ArrayList<String>(Arrays.asList(cursor.getColumnNames()));
+		List<Integer> columnIndexes = columnIndexesCache.get(mTableInfo.getTableName());
+		if (columnIndexes == null) {
+			columnIndexes = new ArrayList<Integer>();
+			columnIndexesCache.put(mTableInfo.getTableName(), columnIndexes);
+		}
+		List<Class> fieldTypes = fieldTypesCache.get(mTableInfo.getTableName());
+		if (fieldTypes == null) {
+			fieldTypes = new ArrayList<Class>();
+			fieldTypesCache.put(mTableInfo.getTableName(), fieldTypes);
+		}
+		int counter = 0;
 		for (Field field : mTableInfo.getFields()) {
-			final String fieldName = mTableInfo.getColumnName(field);
-			Class<?> fieldType = field.getType();
-			final int columnIndex = columnsOrdered.indexOf(fieldName);
+			final int columnIndex;
+			Class<?> fieldType;
+			if (columnIndexes.size() <= counter) {
+				String fieldName = mTableInfo.getColumnName(field);
+				columnIndex = columnsOrdered.indexOf(fieldName);
+				columnIndexes.add(columnIndex);
+
+				fieldType = field.getType();
+				fieldTypes.add(fieldType);
+			} else {
+				columnIndex = columnIndexes.get(counter);
+				fieldType = fieldTypes.get(counter);
+			}
 
 			if (columnIndex < 0) {
 				continue;
 			}
 
-			field.setAccessible(true);
+			if (!field.isAccessible()) {
+				field.setAccessible(true);
+			}
 
 			try {
 				boolean columnIsNull = cursor.isNull(columnIndex);
@@ -264,6 +294,8 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 				if (value != null) {
 					field.set(this, value);
 				}
+
+				counter++;
 			}
 			catch (IllegalArgumentException e) {
 				Log.e(e.getClass().getName(), e);
diff --git a/src/com/activeandroid/query/From.java b/src/com/activeandroid/query/From.java
index 41fe11b8..4bda4419 100644
--- a/src/com/activeandroid/query/From.java
+++ b/src/com/activeandroid/query/From.java
@@ -157,12 +157,7 @@ public From offset(String offset) {
 	}
 
 	void addArguments(Object[] args) {
-        for(Object arg : args) {
-            if (arg.getClass() == boolean.class || arg.getClass() == Boolean.class) {
-                arg = (arg.equals(true) ? 1 : 0);
-            }
-            mArguments.add(arg);
-        }
+    SQLiteUtils.addArguments(mArguments, args);
 	}
 
     private void addFrom(final StringBuilder sql) {
diff --git a/src/com/activeandroid/query/Set.java b/src/com/activeandroid/query/Set.java
index 183d99f0..43c27611 100644
--- a/src/com/activeandroid/query/Set.java
+++ b/src/com/activeandroid/query/Set.java
@@ -19,7 +19,6 @@
 import com.activeandroid.util.SQLiteUtils;
 
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.List;
 
 public final class Set implements Sqlable {
@@ -46,7 +45,7 @@ public Set(Update queryBase, String set, Object... args) {
 		mSetArguments = new ArrayList<Object>();
 		mWhereArguments = new ArrayList<Object>();
 
-		mSetArguments.addAll(Arrays.asList(args));
+    SQLiteUtils.addArguments(mSetArguments, args);
 	}
 
 	public Set where(String where) {
@@ -59,7 +58,7 @@ public Set where(String where) {
 	public Set where(String where, Object... args) {
 		mWhere = where;
 		mWhereArguments.clear();
-		mWhereArguments.addAll(Arrays.asList(args));
+    SQLiteUtils.addArguments(mWhereArguments, args);
 
 		return this;
 	}
diff --git a/src/com/activeandroid/serializer/CalendarSerializer.java b/src/com/activeandroid/serializer/CalendarSerializer.java
index 55509bd0..68958fc6 100644
--- a/src/com/activeandroid/serializer/CalendarSerializer.java
+++ b/src/com/activeandroid/serializer/CalendarSerializer.java
@@ -24,7 +24,7 @@
 	}
 
 	public Class<?> getSerializedType() {
-		return long.class;
+		return Long.class;
 	}
 
 	public Long serialize(Object data) {
@@ -37,4 +37,4 @@ public Calendar deserialize(Object data) {
 
 		return calendar;
 	}
-}
\ No newline at end of file
+}
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index cbf41eae..8b5e3802 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -27,12 +27,11 @@
 import com.activeandroid.annotation.Column.ConflictAction;
 import com.activeandroid.serializer.TypeSerializer;
 
-import java.lang.Long;
-import java.lang.String;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
-import java.util.Arrays;
 import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -403,4 +402,13 @@ private static int processIntCursor(final Cursor cursor) {
 
 		return sl;
 	}
+
+  public static void addArguments(Collection<Object> argumentList, Object[] newArguments) {
+    for (Object arg : newArguments) {
+        if (arg.getClass() == boolean.class || arg.getClass() == Boolean.class) {
+            arg = (arg.equals(true) ? 1 : 0);
+        }
+        argumentList.add(arg);
+    }
+  }
 }
diff --git a/tests/src/com/activeandroid/test/ResetTest.java b/tests/src/com/activeandroid/test/ResetTest.java
new file mode 100644
index 00000000..cac145bc
--- /dev/null
+++ b/tests/src/com/activeandroid/test/ResetTest.java
@@ -0,0 +1,60 @@
+package com.activeandroid.test;
+
+import com.activeandroid.ActiveAndroid;
+import com.activeandroid.Configuration;
+import com.activeandroid.Model;
+import com.activeandroid.annotation.Table;
+
+import android.test.AndroidTestCase;
+
+import java.io.IOException;
+import java.util.List;
+
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+
+public class ResetTest extends AndroidTestCase {
+
+    public void testReset() {
+        Configuration conf = new Configuration.Builder(getContext())
+			.setDatabaseVersion(1)
+			.setDatabaseName("ResetTest")
+			.addModelClass(ResetTestFirstModel.class)
+			.create();
+
+		ActiveAndroid.initialize(conf, true);
+		assertTrue(checkIfTableExists("ResetTestFirstModel"));
+		assertFalse(checkIfTableExists("ResetTestSecondModel"));
+		ActiveAndroid.dispose();
+
+        Configuration conf2 = new Configuration.Builder(getContext())
+			.setDatabaseVersion(2)
+			.setDatabaseName("ResetTest")
+			.setResetDatabase(true)
+			.addModelClass(ResetTestSecondModel.class)
+			.create();
+
+		ActiveAndroid.initialize(conf2, true);
+		assertFalse(checkIfTableExists("ResetTestFirstModel"));
+		assertTrue(checkIfTableExists("ResetTestSecondModel"));
+    }
+
+	public boolean checkIfTableExists(String tableName) {
+		SQLiteDatabase db = ActiveAndroid.getDatabase();
+		Cursor cursor = db.rawQuery("select DISTINCT tbl_name from sqlite_master where tbl_name = '" + tableName + "'", null);
+		if (cursor.getCount() > 0) {
+			cursor.close();
+			return true;
+		}
+		cursor.close();
+		return false;
+	}
+
+    @Table(name = "ResetTestFirstModel")
+    private static class ResetTestFirstModel extends Model {
+    }
+
+    @Table(name = "ResetTestSecondModel")
+    private static class ResetTestSecondModel extends Model {
+    }
+}
diff --git a/tests/src/com/activeandroid/test/query/SqlableTestCase.java b/tests/src/com/activeandroid/test/query/SqlableTestCase.java
index 36137600..0a0c4b07 100644
--- a/tests/src/com/activeandroid/test/query/SqlableTestCase.java
+++ b/tests/src/com/activeandroid/test/query/SqlableTestCase.java
@@ -21,10 +21,10 @@
 
 public abstract class SqlableTestCase extends ActiveAndroidTestCase {
 	public static void assertSqlEquals(String expected, Sqlable actual) {
-		assertEquals(expected, actual.toSql());
+		assertEquals(expected.trim(), actual.toSql().trim());
 	}
 	
 	public static void assertSqlEquals(Sqlable expected, Sqlable actual) {
-	    assertEquals(expected.toSql(), actual.toSql());
+	    assertSqlEquals(expected.toSql(), actual);
 	}
 }
diff --git a/tests/src/com/activeandroid/test/query/UpdateTest.java b/tests/src/com/activeandroid/test/query/UpdateTest.java
index 814d34f7..aa731a8d 100644
--- a/tests/src/com/activeandroid/test/query/UpdateTest.java
+++ b/tests/src/com/activeandroid/test/query/UpdateTest.java
@@ -55,6 +55,18 @@ public void testUpdateWhereWithArguments() {
 		assertSqlEquals(UPDATE_PREFIX + "SET Id = 5 WHERE Id IN (?, ?, ?) ",
 				set);
 	}
+
+  public void performTestUpdateBoolean(boolean condition) {
+    Set set = update().set("booleanField = ?", condition);
+    assertArrayEquals(set.getArguments(), condition ? "1" : "0");
+    assertSqlEquals(UPDATE_PREFIX + "SET booleanField = ?",
+        set);
+  }
+
+  public void testUpdateBoolean() {
+    performTestUpdateBoolean(true);
+    performTestUpdateBoolean(false);
+  }
 	
 	private Update update() {
 		return new Update(MockModel.class);
diff --git a/wait_for_emulator b/wait_for_emulator
deleted file mode 100644
index b30bc35c..00000000
--- a/wait_for_emulator
+++ /dev/null
@@ -1,18 +0,0 @@
-#!/bin/bash
-
-bootanim=""
-failcounter=0
-until [[ "$bootanim" =~ "stopped" ]]; do
-  bootanim=`adb -e shell getprop init.svc.bootanim 2>&1`
-  echo "$bootanim"
-  if [[ "$bootanim" =~ "not found" ]]; then
-    let "failcounter += 1"
-    if [[ $failcounter -gt 3 ]]; then
-      echo "Failed to start emulator"
-      exit 1
-    fi
-  fi
-  sleep 1
-done
-
-echo "Done"
