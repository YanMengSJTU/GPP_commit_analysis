diff --git a/src/com/activeandroid/DBManager.java b/src/com/activeandroid/DBManager.java
index 97c1d5bb..afd36962 100644
--- a/src/com/activeandroid/DBManager.java
+++ b/src/com/activeandroid/DBManager.java
@@ -8,6 +8,7 @@
 import com.activeandroid.receiver.ObjectReceiver;
 import com.activeandroid.runtime.DBRequest;
 import com.activeandroid.runtime.DBRequestQueue;
+import com.activeandroid.util.SQLiteUtils;
 
 import org.json.JSONArray;
 import org.json.JSONObject;
@@ -27,8 +28,6 @@
 
     protected Class<OBJECT_CLASS> mObjectClass;
 
-    private String mIdField = "uid";
-
     /**
      * Runs all of the UI threaded requests
      */
@@ -42,11 +41,6 @@ public DBManager(Class<OBJECT_CLASS> classClass){
         mObjectClass = classClass;
     }
 
-    public DBManager(Class<OBJECT_CLASS> classClass, String idField){
-        mObjectClass = classClass;
-        mIdField = idField;
-    }
-
     /**
      * Override this method to have one instance of the manager accross the app
      * @return
@@ -267,12 +261,12 @@ public void run() {
     }
 
     /**
-     * If object has column uid defined, this will get the object
+     * This will get the where statement for this object, the amount of ids passed must match the primary key column size
      * @param uid
      * @return
      */
-    public OBJECT_CLASS getObjectById(Object uid){
-        return getObjectByColumnValue(mIdField, uid);
+    public OBJECT_CLASS getObjectById(Object...ids){
+        return new Select().from(mObjectClass).where(SQLiteUtils.getWhereStatement(mObjectClass, Cache.getTableInfo(mObjectClass)), ids).executeSingle();
     }
 
     /**
@@ -324,17 +318,18 @@ public void run() {
 
     /**
      * Will return the object if its within the DB, if not, it will call upon an object requester to get the data from the API
-     * @param uid
+     *
      * @param objectReceiver
+     * @param uid
      * @return true if the object exists in the DB, otherwise its on a BG thread
      */
-    public boolean fetchObject(final Object uid, final ObjectReceiver<OBJECT_CLASS> objectReceiver){
+    public boolean fetchObject(final ObjectReceiver<OBJECT_CLASS> objectReceiver, final Object... uid){
         OBJECT_CLASS object = getObjectById(uid);
         if(object==null){
             processOnForeground(new Runnable() {
                 @Override
                 public void run() {
-                    requestObject(uid, objectReceiver);
+                    requestObject(objectReceiver);
                 }
             });
             return false;
@@ -346,10 +341,10 @@ public void run() {
 
     /**
      * Implement this method to perform a request if the object does not exist in the DB
-     * @param uid
      * @param objectReceiver
+     * @param uid
      */
-    public abstract void requestObject(final Object uid, final ObjectReceiver<OBJECT_CLASS> objectReceiver);
+    public abstract void requestObject(final ObjectReceiver<OBJECT_CLASS> objectReceiver, final Object... uid);
 
     public Class<OBJECT_CLASS> getObjectClass() {
         return mObjectClass;
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index 1f7502ba..138da339 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -237,6 +237,44 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 		return entities;
 	}
 
+    /**
+     * Returns the where statement with primary keys with no values
+     * @param tableInfo
+     * @return
+     */
+    public static String getWhereStatement(Class<? extends Model> modelClass, TableInfo tableInfo){
+        List<Field> fields = new ArrayList<Field>();
+        ArrayList<Field> primaryColumn = new ArrayList<Field>();
+        fields = ReflectionUtils.getAllFields(fields, modelClass);
+
+        for(Field field : fields){
+            if(field.isAnnotationPresent(PrimaryKey.class)){
+                primaryColumn.add(field);
+            }
+        }
+
+        final StringBuilder where = new StringBuilder();
+        for(int i = 0 ; i < primaryColumn.size(); i++){
+            final Field field = primaryColumn.get(i);
+            where.append(tableInfo.getColumnName(field));
+            where.append("=?");
+
+            if(i < primaryColumn.size()-1){
+                where.append(" AND ");
+            }
+        }
+
+        String sql = where.toString();
+
+        return sql;
+    }
+
+    /**
+     * Returns the where statement with primary keys and values filled in
+     * @param model
+     * @param tableInfo
+     * @return
+     */
     public static String getWhereStatement(Model model, TableInfo tableInfo){
         List<Field> fields = new ArrayList<Field>();
         ArrayList<Field> primaryColumn = new ArrayList<Field>();
