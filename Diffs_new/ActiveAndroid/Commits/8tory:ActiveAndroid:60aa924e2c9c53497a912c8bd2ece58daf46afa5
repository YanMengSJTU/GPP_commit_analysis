diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 4cb8f99c..058df9cc 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -88,7 +88,8 @@ public final void setReplace(boolean replace) {
 	}
 
 	public final void delete() {
-		Cache.openDatabase().delete(mTableInfo.getTableName(), "Id=?", new String[] { getId().toString() });
+		//delete(mTableInfo.getType(), mId);
+		SQLiteUtils.delete(mTableInfo.getTableName(), "Id=?", new String[] { getId().toString() });
 		Cache.removeEntity(this);
 
 		Cache.getContext().getContentResolver()
@@ -195,7 +196,6 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 	// super me: super.save();
 	@SuppressLint("NewApi")
 	public void save() {
-		final SQLiteDatabase db = Cache.openDatabase();
 		final ContentValues values = toContentValues();
 
 		// TODO optimize the following code snippet
@@ -203,7 +203,7 @@ public void save() {
 			mId = mSpecificId;
 			values.put("Id", mId);
 			if (!ActiveAndroid.inContentProvider()) {
-				db.replace(mTableInfo.getTableName(), null, values);
+				SQLiteUtils.replace(mTableInfo.getTableName(), null, values);
 			} else {
 				Model m = load(mTableInfo.getType(), mId);
 				if (m == null) {
@@ -217,13 +217,13 @@ public void save() {
 				mId = mSpecificId;
 				values.put("Id", mId);
 				if (!ActiveAndroid.inContentProvider()) {
-					db.insert(mTableInfo.getTableName(), null, values);
+					SQLiteUtils.insert(mTableInfo.getTableName(), null, values);
 				} else {
 					Cache.getContext().getContentResolver().insert(ContentProvider.createUri(mTableInfo.getType(), null), values);
 				}
 			} else {
 				if (!ActiveAndroid.inContentProvider()) {
-					mId = db.insert(mTableInfo.getTableName(), null, values);
+					mId = SQLiteUtils.insert(mTableInfo.getTableName(), null, values);
 				} else {
 					mId = android.content.ContentUris.parseId(
 							Cache.getContext().getContentResolver().insert(
@@ -233,7 +233,7 @@ public void save() {
 			}
 		} else { // update for mId
 			if (!ActiveAndroid.inContentProvider()) {
-				db.update(mTableInfo.getTableName(), values, "Id=" + mId, null);
+				SQLiteUtils.update(mTableInfo.getTableName(), values, "Id=" + mId, null);
 			} else {
 				Cache.getContext().getContentResolver().update(ContentProvider.createUri(mTableInfo.getType(), null), values, "Id=" + mId, null);
 			}
diff --git a/src/com/activeandroid/content/ContentProvider.java b/src/com/activeandroid/content/ContentProvider.java
index 1e1b685a..33e682f4 100644
--- a/src/com/activeandroid/content/ContentProvider.java
+++ b/src/com/activeandroid/content/ContentProvider.java
@@ -14,6 +14,7 @@
 import com.activeandroid.Configuration;
 import com.activeandroid.Model;
 import com.activeandroid.TableInfo;
+import com.activeandroid.util.SQLiteUtils;
 
 public class ContentProvider extends android.content.ContentProvider {
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -93,7 +94,7 @@ public String getType(Uri uri) {
 	@Override
 	public Uri insert(Uri uri, ContentValues values) {
 		final Class<? extends Model> type = getModelType(uri);
-		final Long id = Cache.openDatabase().insert(Cache.getTableName(type), null, values);
+		final Long id = SQLiteUtils.insert(Cache.getTableName(type), null, values);
 
 		if (id != null && id > 0) {
 			Uri retUri = createUri(type, id);
@@ -122,7 +123,7 @@ public int bulkInsert(Uri uri, ContentValues[] values) {
 	@Override
 	public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {
 		final Class<? extends Model> type = getModelType(uri);
-		final int count = Cache.openDatabase().update(Cache.getTableName(type), values, selection, selectionArgs);
+		final int count = SQLiteUtils.update(Cache.getTableName(type), values, selection, selectionArgs);
 
 		notifyChange(uri);
 
@@ -132,7 +133,7 @@ public int update(Uri uri, ContentValues values, String selection, String[] sele
 	@Override
 	public int delete(Uri uri, String selection, String[] selectionArgs) {
 		final Class<? extends Model> type = getModelType(uri);
-		final int count = Cache.openDatabase().delete(Cache.getTableName(type), selection, selectionArgs);
+		final int count = SQLiteUtils.delete(Cache.getTableName(type), selection, selectionArgs);
 
 		notifyChange(uri);
 
@@ -142,7 +143,7 @@ public int delete(Uri uri, String selection, String[] selectionArgs) {
 	@Override
 	public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
 		final Class<? extends Model> type = getModelType(uri);
-		final Cursor cursor = Cache.openDatabase().query(
+		final Cursor cursor = SQLiteUtils.query(
 				Cache.getTableName(type),
 				projection,
 				selection,
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index b80ddd84..2ee4178d 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -17,8 +17,10 @@
  */
 
 import android.annotation.SuppressLint;
+import android.content.ContentValues;
 import android.database.Cursor;
 import android.os.Build;
+import android.os.Looper;
 import android.text.TextUtils;
 
 import com.activeandroid.ActiveAndroid;
@@ -94,6 +96,34 @@
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
+	// TODO Merge code snippet of cache transaction
+	public static class Yield {
+		boolean yielded = false;
+
+		Yield() {
+		}
+
+		public Yield begin() {
+			if (Looper.myLooper() == Looper.getMainLooper()) {
+				Cache.beginReleaseTransaction();
+				yielded = true;
+			}
+
+			return this;
+		}
+
+		public Yield success() {
+			//if (yielded)
+			// TODO
+			return this;
+		}
+
+		public Yield end() {
+			if (yielded) Cache.endReleaseTransaction();
+			return this;
+		}
+	}
+
 	public static void execSql(String sql) {
 		Cache.openDatabase().execSQL(sql);
 	}
@@ -103,12 +133,92 @@ public static void execSql(String sql, Object[] bindArgs) {
 	}
 
 	public static <T extends Model> CursorList<T> rawQuery(Class<? extends Model> type, String sql, String[] selectionArgs) {
-		Cursor cursor = Cache.openDatabase().rawQuery(sql, selectionArgs);
-		CursorList<T> entities = processCursor(type, cursor);
+		CursorList<T> entities;
+
+		Yield yield = new Yield().begin();
+		try {
+			Cursor cursor = Cache.openDatabase().rawQuery(sql, selectionArgs);
+			entities = processCursor(type, cursor);
+			yield.success();
+		} finally {
+			yield.end();
+		}
 
 		return entities;
 	}
 
+	public static int delete(String tableName, String sql, String[] selectionArgs) {
+		int rows;
+
+		Yield yield = new Yield().begin();
+		try {
+			rows = Cache.openDatabase().delete(tableName, sql, selectionArgs);
+			yield.success();
+		} finally {
+			yield.end();
+		}
+
+		return rows;
+	}
+
+	public static long insert(String table, String nullColumnHook, ContentValues values) {
+		long id;
+
+		Yield yield = new Yield().begin();
+		try {
+			id = Cache.openDatabase().insert(table, nullColumnHook, values);
+			yield.success();
+		} finally {
+			yield.end();
+		}
+
+		return id;
+	}
+
+	public static long replace(String table, String nullColumnHook, ContentValues values) {
+		long id;
+
+		Yield yield = new Yield().begin();
+		try {
+			id = Cache.openDatabase().replace(table, nullColumnHook, values);
+			yield.success();
+		} finally {
+			yield.end();
+		}
+
+		return id;
+	}
+
+	public static int update(String table, ContentValues values, String whereClause, String[] where) {
+		int rows;
+
+		Yield yield = new Yield().begin();
+		try {
+			rows = Cache.openDatabase().update(table, values, whereClause, where);
+			yield.success();
+		} finally {
+			yield.end();
+		}
+
+		return rows;
+	}
+
+	public static Cursor query(String table, String[] projection, String selection, String[] selectionArgs,
+			String groupBy, String having, String sortOrder) {
+		Cursor cursor;
+
+		Yield yield = new Yield().begin();
+		try {
+			cursor = Cache.openDatabase().query(table, projection, selection, selectionArgs,
+					groupBy, having, sortOrder);
+			yield.success();
+		} finally {
+			yield.end();
+		}
+
+		return cursor;
+	}
+
 	public static <T extends Model> T rawQuerySingle(Class<? extends Model> type, String sql, String[] selectionArgs) {
 		CursorList<T> entities = rawQuery(type, sql, selectionArgs);
 
