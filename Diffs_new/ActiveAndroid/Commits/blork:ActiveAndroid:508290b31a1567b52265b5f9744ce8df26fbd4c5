diff --git a/src/com/activeandroid/ActiveAndroidNotInitialized.java b/src/com/activeandroid/ActiveAndroidNotInitialized.java
new file mode 100644
index 00000000..99a459d1
--- /dev/null
+++ b/src/com/activeandroid/ActiveAndroidNotInitialized.java
@@ -0,0 +1,7 @@
+package com.activeandroid;
+
+public class ActiveAndroidNotInitialized extends RuntimeException {
+	public ActiveAndroidNotInitialized() {
+		super("ActiveAndroid must be initialized with ActiveAndroid#initialize before interacting with database");
+	}
+}
diff --git a/src/com/activeandroid/Cache.java b/src/com/activeandroid/Cache.java
index 88e2b9a2..7abfb849 100644
--- a/src/com/activeandroid/Cache.java
+++ b/src/com/activeandroid/Cache.java
@@ -78,6 +78,7 @@ public static synchronized void clear() {
 	}
 
 	public static synchronized void dispose() {
+		checkInitialization();
 		closeDatabase();
 		
 		sEntities = null;
@@ -92,29 +93,33 @@ public static synchronized void dispose() {
 	// Database access
 
 	public static synchronized SQLiteDatabase openDatabase() {
+		if (sDatabaseHelper == null) {
+			checkInitialization();
+		}
 		return sDatabaseHelper.getWritableDatabase();
 	}
 
 	public static synchronized void closeDatabase() {
+		checkInitialization();
 		sDatabaseHelper.close();
 	}
 
 	// Context access
 
 	public static Context getContext() {
+		checkInitialization();
 		return sContext;
 	}
 
 	// Entity cache
 
 	public static synchronized void addEntity(Model entity) {
-		if (sEntities == null) {
-			return;
-		}
+		checkInitialization();
 		sEntities.add(entity);
 	}
 
 	public static synchronized Model getEntity(Class<? extends Model> type, long id) {
+		checkInitialization();
 		for (Model entity : sEntities) {
 			if (entity != null && entity.getClass() != null && entity.getClass() == type && entity.getId() != null
 					&& entity.getId() == id) {
@@ -127,27 +132,35 @@ public static synchronized Model getEntity(Class<? extends Model> type, long id)
 	}
 
 	public static synchronized void removeEntity(Model entity) {
+		checkInitialization();
 		sEntities.remove(entity);
 	}
 
 	// Model cache
 
 	public static synchronized Collection<TableInfo> getTableInfos() {
+		checkInitialization();
 		return sModelInfo.getTableInfos();
 	}
 
 	public static synchronized TableInfo getTableInfo(Class<? extends Model> type) {
-		if (sModelInfo == null) {
-			return null;
-		}
+		checkInitialization();
 		return sModelInfo.getTableInfo(type);
 	}
 
 	public static synchronized TypeSerializer getParserForType(Class<?> type) {
+		checkInitialization();
 		return sModelInfo.getTypeSerializer(type);
 	}
 
 	public static synchronized String getTableName(Class<? extends Model> type) {
+		checkInitialization();
 		return sModelInfo.getTableInfo(type).getTableName();
 	}
+
+	private static void checkInitialization() {
+		if (!sIsInitialized) {
+			throw new ActiveAndroidNotInitialized();
+		}
+	}
 }
diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 5bcec118..b911f3f0 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -41,15 +41,6 @@
 
 	private TableInfo mTableInfo;
 
-	//////////////////////////////////////////////////////////////////////////////////////
-	// CONSTRUCTORS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	public Model() {
-		mTableInfo = Cache.getTableInfo(getClass());
-		Cache.addEntity(this);
-	}
-
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -59,7 +50,7 @@ public final Long getId() {
 	}
 
 	public final void delete() {
-		Cache.openDatabase().delete(mTableInfo.getTableName(), "Id=?", new String[] { getId().toString() });
+		Cache.openDatabase().delete(getTableInfo().getTableName(), "Id=?", new String[] { getId().toString() });
 		Cache.removeEntity(this);
 	}
 
@@ -67,8 +58,8 @@ public final void save() {
 		final SQLiteDatabase db = Cache.openDatabase();
 		final ContentValues values = new ContentValues();
 
-		for (Field field : mTableInfo.getFields()) {
-			final String fieldName = mTableInfo.getColumnName(field);
+		for (Field field : getTableInfo().getFields()) {
+			final String fieldName = getTableInfo().getColumnName(field);
 			Class<?> fieldType = field.getType();
 
 			field.setAccessible(true);
@@ -144,11 +135,13 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)){
 		}
 
 		if (mId == null) {
-			mId = db.insert(mTableInfo.getTableName(), null, values);
+			mId = db.insert(getTableInfo().getTableName(), null, values);
 		}
 		else {
-			db.update(mTableInfo.getTableName(), values, "Id=" + mId, null);
+			db.update(getTableInfo().getTableName(), values, "Id=" + mId, null);
 		}
+
+		Cache.addEntity(this);
 	}
 
 	// Convenience methods
@@ -164,8 +157,8 @@ public static void delete(Class<? extends Model> type, long id) {
 	// Model population
 
 	public final void loadFromCursor(Class<? extends Model> type, Cursor cursor) {
-		for (Field field : mTableInfo.getFields()) {
-			final String fieldName = mTableInfo.getColumnName(field);
+		for (Field field : getTableInfo().getFields()) {
+			final String fieldName = getTableInfo().getColumnName(field);
 			Class<?> fieldType = field.getType();
 			final int columnIndex = cursor.getColumnIndex(fieldName);
 
@@ -245,6 +238,8 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)){
 				if (value != null) {
 					field.set(this, value);
 				}
+
+				Cache.addEntity(this);
 			}
 			catch (IllegalArgumentException e) {
 				Log.e(e.getMessage());
@@ -274,7 +269,14 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)){
 	public boolean equals(Object obj) {
 		final Model other = (Model) obj;
 
-		return this.mId != null && (this.mTableInfo.getTableName().equals(other.mTableInfo.getTableName()))
+		return this.mId != null && (this.getTableInfo().getTableName().equals(other.getTableInfo().getTableName()))
 				&& (this.mId.equals(other.mId));
 	}
+
+	private TableInfo getTableInfo() {
+		if (mTableInfo == null) {
+			mTableInfo = Cache.getTableInfo(getClass());
+		}
+		return mTableInfo;
+	}
 }
diff --git a/tests/src/com/activeandroid/test/LazyInitializeTest.java b/tests/src/com/activeandroid/test/LazyInitializeTest.java
new file mode 100644
index 00000000..90f6ea4b
--- /dev/null
+++ b/tests/src/com/activeandroid/test/LazyInitializeTest.java
@@ -0,0 +1,21 @@
+package com.activeandroid.test;
+
+import android.test.AndroidTestCase;
+import com.activeandroid.ActiveAndroidNotInitialized;
+
+public class LazyInitializeTest extends AndroidTestCase {
+	public void testInitializeDoesNotThrow() throws Exception {
+		new MockModel();
+	}
+
+	public void testInteractionRequiringDatabaseThrows() {
+		boolean expectedExceptionThrown = false;
+		try {
+			new MockModel().save();
+		} catch (ActiveAndroidNotInitialized e) {
+			expectedExceptionThrown = true;
+		}
+
+		assertTrue(expectedExceptionThrown);
+	}
+}
