diff --git a/src/com/activeandroid/Cache.java b/src/com/activeandroid/Cache.java
index 019f4b28..30fc8ae2 100644
--- a/src/com/activeandroid/Cache.java
+++ b/src/com/activeandroid/Cache.java
@@ -20,7 +20,6 @@
 
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
-import android.support.v4.util.LruCache;
 
 import com.activeandroid.serializer.TypeSerializer;
 import com.activeandroid.util.Log;
@@ -41,7 +40,7 @@
 	private static ModelInfo sModelInfo;
 	private static DatabaseHelper sDatabaseHelper;
 
-	private static LruCache<String, Model> sEntities;
+	private static CacheProvider<String, Model> sEntities;
 
 	private static boolean sIsInitialized = false;
 
@@ -70,7 +69,7 @@ public static synchronized void initialize(Configuration configuration) {
 		// actually used, however at this point it seems like the reflection
 		// required would be too costly to be of any benefit. We'll just set a max
 		// object size instead.
-		sEntities = new LruCache<String, Model>(configuration.getCacheSize());
+		setCacheProvider(new CacheProviderLruCache<String, Model>(configuration.getCacheSize()));
 
 		openDatabase();
 
@@ -114,6 +113,10 @@ public static synchronized void closeDatabase() {
 		sDatabaseHelper.close();
 	}
 
+    public static void setCacheProvider(CacheProvider<String, Model> cacheProvider) {
+        sEntities = cacheProvider;
+    }
+
 	// Context access
 
 	public static Context getContext() {
diff --git a/src/com/activeandroid/CacheProvider.java b/src/com/activeandroid/CacheProvider.java
new file mode 100644
index 00000000..4017a0db
--- /dev/null
+++ b/src/com/activeandroid/CacheProvider.java
@@ -0,0 +1,11 @@
+package com.activeandroid;
+
+public interface CacheProvider<K, V> {
+    V get(K key);
+
+    V put(K key, V value);
+
+    V remove(K key);
+
+    void evictAll();
+}
diff --git a/src/com/activeandroid/CacheProviderLruCache.java b/src/com/activeandroid/CacheProviderLruCache.java
new file mode 100644
index 00000000..511097e4
--- /dev/null
+++ b/src/com/activeandroid/CacheProviderLruCache.java
@@ -0,0 +1,32 @@
+package com.activeandroid;
+
+import android.support.v4.util.LruCache;
+
+public class CacheProviderLruCache<K, V> implements CacheProvider<K, V> {
+
+    private LruCache lruCache;
+
+    public CacheProviderLruCache(int maxSize) {
+        lruCache = new LruCache<K, V>(maxSize);
+    }
+
+    @Override
+    public V get(K key) {
+        return (V) lruCache.get(key);
+    }
+
+    @Override
+    public V put(K key, V value) {
+        return (V) lruCache.put(key, value);
+    }
+
+    @Override
+    public V remove(K key) {
+        return (V) lruCache.remove(key);
+    }
+
+    @Override
+    public void evictAll() {
+        lruCache.evictAll();
+    }
+}
diff --git a/src/com/activeandroid/CacheProviderNoCache.java b/src/com/activeandroid/CacheProviderNoCache.java
new file mode 100644
index 00000000..501b7564
--- /dev/null
+++ b/src/com/activeandroid/CacheProviderNoCache.java
@@ -0,0 +1,24 @@
+package com.activeandroid;
+
+public class CacheProviderNoCache<K, V> implements CacheProvider<K, V> {
+
+    @Override
+    public V get(K key) {
+        return null;
+    }
+
+    @Override
+    public V put(K key, V value) {
+        return null;
+    }
+
+    @Override
+    public V remove(K key) {
+        return null;
+    }
+
+    @Override
+    public void evictAll() {
+
+    }
+}
diff --git a/src/com/activeandroid/ModelInfo.java b/src/com/activeandroid/ModelInfo.java
index 09e79117..51360027 100644
--- a/src/com/activeandroid/ModelInfo.java
+++ b/src/com/activeandroid/ModelInfo.java
@@ -183,6 +183,7 @@ private void scanForModelClasses(File path, String packageName, ClassLoader clas
 				className = className.substring(packageNameIndex);
 			}
 
+            Log.d("Scanning for " + className);
 			try {
 				Class<?> discoveredClass = Class.forName(className, false, classLoader);
 				if (ReflectionUtils.isModel(discoveredClass)) {
@@ -204,6 +205,12 @@ else if (ReflectionUtils.isTypeSerializer(discoveredClass)) {
 			catch (IllegalAccessException e) {
 				Log.e("IllegalAccessException", e);
 			}
+            		catch (NoClassDefFoundError e) {
+                		Log.e("NoClassDefFoundError", e);
+            		}
+            		catch (IncompatibleClassChangeError e) {
+				Log.e("IncompatibleClassChangeError", e);
+			}
 		}
 	}
 }
