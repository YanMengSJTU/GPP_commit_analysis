diff --git a/src/com/activeandroid/ActiveAndroid.java b/src/com/activeandroid/ActiveAndroid.java
index 272371ab..8ec987c3 100644
--- a/src/com/activeandroid/ActiveAndroid.java
+++ b/src/com/activeandroid/ActiveAndroid.java
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-import android.app.Application;
+import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 
 import com.activeandroid.util.Log;
@@ -26,21 +26,21 @@
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	public static void initialize(Application application) {
-		initialize(application, Cache.DEFAULT_CACHE_SIZE, false);
+	public static void initialize(Context context) {
+		initialize(context, Cache.DEFAULT_CACHE_SIZE, false);
 	}
 
-	public static void initialize(Application application, int cacheSize) {
-		initialize(application, cacheSize, false);
+	public static void initialize(Context context, int cacheSize) {
+		initialize(context, cacheSize, false);
 	}
 
-	public static void initialize(Application application, boolean loggingEnabled) {
+	public static void initialize(Context application, boolean loggingEnabled) {
 		initialize(application, Cache.DEFAULT_CACHE_SIZE, loggingEnabled);
 	}
 
-	public static void initialize(Application application, int cacheSize, boolean loggingEnabled) {
+	public static void initialize(Context context, int cacheSize, boolean loggingEnabled) {
 		setLoggingEnabled(loggingEnabled);
-		Cache.initialize(application, cacheSize);
+		Cache.initialize(context, cacheSize);
 	}
 
 	public static void clearCache() {
diff --git a/src/com/activeandroid/Cache.java b/src/com/activeandroid/Cache.java
index 648410a0..de58a22b 100644
--- a/src/com/activeandroid/Cache.java
+++ b/src/com/activeandroid/Cache.java
@@ -18,7 +18,6 @@
 
 import java.util.Collection;
 
-import android.app.Application;
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.support.v4.util.LruCache;
@@ -57,15 +56,15 @@ private Cache() {
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	public static synchronized void initialize(Application application, int cacheSize) {
+	public static synchronized void initialize(Context context, int cacheSize) {
 		if (sIsInitialized) {
 			Log.v("ActiveAndroid already initialized.");
 			return;
 		}
 
-		sContext = application;
+		sContext = context;
 
-		sModelInfo = new ModelInfo(application);
+		sModelInfo = new ModelInfo(context);
 		sDatabaseHelper = new DatabaseHelper(sContext);
 
         // TODO: It would be nice to override sizeOf here and calculate the memory
diff --git a/src/com/activeandroid/ModelInfo.java b/src/com/activeandroid/ModelInfo.java
index d8d87f75..ad7fced1 100644
--- a/src/com/activeandroid/ModelInfo.java
+++ b/src/com/activeandroid/ModelInfo.java
@@ -21,7 +21,6 @@
 import java.net.URL;
 import java.util.*;
 
-import android.app.Application;
 import android.content.Context;
 import android.text.TextUtils;
 
@@ -58,10 +57,10 @@
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	public ModelInfo(Application application) {
-		if (!loadModelFromMetaData(application)) {
+	public ModelInfo(Context context) {
+		if (!loadModelFromMetaData(context)) {
 			try {
-				scanForModel(application);
+				scanForModel(context);
 			}
 			catch (IOException e) {
 				Log.e("Couldn't open source path.", e);
@@ -96,16 +95,16 @@ public TypeSerializer getTypeSerializer(Class<?> type) {
 	// PRIVATE METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	private boolean loadModelFromMetaData(Application application) {
-		final String modelList = ReflectionUtils.getMetaData(application, AA_MODELS);
-		final String serializerList = ReflectionUtils.getMetaData(application, AA_SERIALIZERS);
+	private boolean loadModelFromMetaData(Context context) {
+		final String modelList = ReflectionUtils.getMetaData(context, AA_MODELS);
+		final String serializerList = ReflectionUtils.getMetaData(context, AA_SERIALIZERS);
 
 		if (!TextUtils.isEmpty(modelList)) {
-			loadModelList(application, modelList.split(","));
+			loadModelList(context, modelList.split(","));
 		}
 
 		if (!TextUtils.isEmpty(serializerList)) {
-			loadSerializerList(application, serializerList.split(","));
+			loadSerializerList(context, serializerList.split(","));
 		}
 
 		return mTableInfos.size() > 0;
@@ -157,9 +156,9 @@ private String ensureFullClassName(Context context, String name) {
 		return packageName + name.trim();
 	}
 
-	private void scanForModel(Application application) throws IOException {
-		String packageName = application.getPackageName();
-		String sourcePath = application.getApplicationInfo().sourceDir;
+	private void scanForModel(Context context) throws IOException {
+		String packageName = context.getPackageName();
+		String sourcePath = context.getApplicationInfo().sourceDir;
 		List<String> paths = new ArrayList<String>();
 
 		if (sourcePath != null) {
@@ -185,7 +184,7 @@ private void scanForModel(Application application) throws IOException {
 
 		for (String path : paths) {
 			File file = new File(path);
-			scanForModelClasses(file, packageName, application.getClass().getClassLoader());
+			scanForModelClasses(file, packageName, context.getClassLoader());
 		}
 	}
 
diff --git a/src/com/activeandroid/content/ContentProvider.java b/src/com/activeandroid/content/ContentProvider.java
index a876e683..f71bdd03 100644
--- a/src/com/activeandroid/content/ContentProvider.java
+++ b/src/com/activeandroid/content/ContentProvider.java
@@ -3,7 +3,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import android.app.Application;
 import android.content.ContentValues;
 import android.content.UriMatcher;
 import android.database.Cursor;
@@ -36,7 +35,7 @@
 
 	@Override
 	public boolean onCreate() {
-		ActiveAndroid.initialize((Application) getContext().getApplicationContext());
+		ActiveAndroid.initialize(getContext().getApplicationContext());
 		sAuthority = getAuthority();
 
 		final List<TableInfo> tableInfos = new ArrayList<TableInfo>(Cache.getTableInfos());
diff --git a/tests/src/com/activeandroid/test/MockModel.java b/tests/src/com/activeandroid/test/MockModel.java
index 718e945b..514f4b89 100644
--- a/tests/src/com/activeandroid/test/MockModel.java
+++ b/tests/src/com/activeandroid/test/MockModel.java
@@ -17,8 +17,24 @@
  */
 
 import com.activeandroid.Model;
+import com.activeandroid.annotation.Column;
 import com.activeandroid.annotation.Table;
 
 @Table(name = "MockModel")
 public class MockModel extends Model {
+	
+	public interface Columns extends Model.Columns {
+		String NAME = "name";
+	}
+	
+	@Column(name = Columns.NAME)
+	private String name;
+	
+	public String getName() {
+		return name;
+	}
+	
+	public void setName(String name) {
+		this.name = name;
+	}
 }
diff --git a/tests/src/com/activeandroid/test/content/ContentProviderTest.java b/tests/src/com/activeandroid/test/content/ContentProviderTest.java
new file mode 100644
index 00000000..ff9bac19
--- /dev/null
+++ b/tests/src/com/activeandroid/test/content/ContentProviderTest.java
@@ -0,0 +1,122 @@
+package com.activeandroid.test.content;
+
+import android.content.ContentResolver;
+import android.content.ContentUris;
+import android.content.ContentValues;
+import android.content.Context;
+import android.content.ContextWrapper;
+import android.database.Cursor;
+import android.net.Uri;
+import android.test.AndroidTestCase;
+import android.test.IsolatedContext;
+import android.test.mock.MockContentResolver;
+
+import com.activeandroid.Model;
+import com.activeandroid.content.ContentProvider;
+import com.activeandroid.test.MockModel;
+
+/**
+ * {@link AndroidTestCase} for {@link ContentProvider}.
+ * 
+ * <p>This case is not based on {@link android.test.ProviderTestCase2} since it's mock {@link Context} cannot be stubbed. 
+ * 
+ * @author pelzrutsche
+ *
+ */
+public class ContentProviderTest extends AndroidTestCase {
+
+	private static final String AUTHORITY = "com.activeandroid.test";
+
+	private ContentProvider mProvider;
+	private MockContentResolver mMockResolver;
+	private IsolatedContext mMockContext;
+
+	@Override
+	protected void setUp() throws Exception {
+		super.setUp();
+		
+		mMockResolver = new MockContentResolver();
+		Context delegatingContext = new ContextWrapper(getContext()) {
+			@Override
+			public String getPackageName() {
+				return AUTHORITY;
+			}
+		};
+		
+		mProvider = new ContentProvider();
+		
+		mMockContext = new IsolatedContext(mMockResolver, delegatingContext);
+		mMockResolver.addProvider(AUTHORITY, mProvider);
+		mProvider.attachInfo(mMockContext, null);
+	}
+	
+	/**
+	 * Tests the creation of a URI for {@link MockModel} and type resolution through {@link ContentProvider#getType(Uri)}
+	 */
+	public void testCreateUri() {
+		Uri uri = ContentProvider.createUri(MockModel.class, null);
+		assertEquals("unexpected authority", AUTHORITY, uri.getAuthority());
+		assertEquals("unexpected scheme", ContentResolver.SCHEME_CONTENT, uri.getScheme());
+		
+		String type = mProvider.getType(uri);
+		
+		assertTrue("unexpected path", type.contains(MockModel.class.getName()));
+	}
+	
+	/**
+	 * Tests inserting a {@link MockModel}.
+	 */
+	public void testInsert() {
+		ContentValues values = new ContentValues();
+		final String name = getName();
+		values.put(MockModel.Columns.NAME, name);
+		final Uri result = mProvider.insert(ContentProvider.createUri(MockModel.class, null), values);
+		
+		final long id = ContentUris.parseId(result);
+		assertTrue("expected ID in URI", id > -1);
+		
+		final MockModel model = Model.load(MockModel.class, id);
+		assertEquals("unexpected name", name, model.getName());
+	}
+	
+	/**
+	 * Tests deleting a {@link MockModel}.
+	 */
+	public void testDelete() {
+		MockModel model = new MockModel();
+		model.setName(getName());
+		model.save();
+		
+		model = Model.load(MockModel.class, model.getId());
+		
+		assertNotNull("failed to save model", model);
+		
+		mProvider.delete(ContentProvider.createUri(MockModel.class, model.getId()), null, null);
+		
+		model = Model.load(MockModel.class, model.getId());
+		
+		assertNull("failed to delete model", model);
+	}
+	
+	/**
+	 * Tests querying for a {@link MockModel}.
+	 */
+	public void testQuery() {
+		MockModel model = new MockModel();
+		model.setName(getName());
+		model.save();
+		
+		model = Model.load(MockModel.class, model.getId());
+		
+		assertNotNull("failed to save model", model);
+		
+		String[] projection = new String[]{ MockModel.Columns.ID };
+		String[] selectionArgs = new String[]{ Long.toString(model.getId()) };
+		Cursor cursor = mProvider.query(ContentProvider.createUri(MockModel.class, model.getId()), projection, MockModel.Columns.ID + " = ?", selectionArgs, null);
+		
+		if (!cursor.moveToNext()) {
+			fail("expected one row");
+		}
+	}
+
+}
