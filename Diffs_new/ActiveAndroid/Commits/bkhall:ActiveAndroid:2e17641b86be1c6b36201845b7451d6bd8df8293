diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index 280f695d..42cf04dd 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -38,9 +38,9 @@
 
 	private Class<? extends Model> mType;
 	private String mTableName;
-	private boolean mHasMultiColumnUniqueConstraint;
-	private String[] mMultiColumnUniqueConstraintColumns;
-	private ConflictAction mOnMultiColumnUniqueConstraintConflict;
+	private boolean mHasCompositeKey;
+	private String[] mCompositeKeyColumns;
+	private ConflictAction mOnCompositeKeyConflict;
 
 	private Map<Field, String> mColumnNames = new HashMap<Field, String>();
 
@@ -54,9 +54,9 @@ public TableInfo(Class<? extends Model> type) {
 		final Table tableAnnotation = type.getAnnotation(Table.class);
 		if (tableAnnotation != null) {
 			mTableName = tableAnnotation.name();
-			mHasMultiColumnUniqueConstraint = tableAnnotation.hasMultiColumnUniqueConstraint();
-			mMultiColumnUniqueConstraintColumns = tableAnnotation.multiColumnUniqueConstraintColumns();
-			mOnMultiColumnUniqueConstraintConflict = tableAnnotation.onMultiColumnUniqueConstraintConflict();
+			mHasCompositeKey = tableAnnotation.hasCompositeKey();
+			mCompositeKeyColumns = tableAnnotation.compositeKeyColumns();
+			mOnCompositeKeyConflict = tableAnnotation.onCompositeKeyConflict();
 		}
 		else {
 			mTableName = type.getSimpleName();
@@ -85,16 +85,16 @@ public String getTableName() {
 		return mTableName;
 	}
 
-	public boolean hasMultiColumnUniqueConstraint() {
-		return mHasMultiColumnUniqueConstraint;
+	public boolean hasCompositeKey() {
+		return mHasCompositeKey;
 	}
 
-	public String[] getMultiColumnUniqueConstraintColumns() {
-		return mMultiColumnUniqueConstraintColumns;
+	public String[] getCompositeKeyColumns() {
+		return mCompositeKeyColumns;
 	}
 
-	public ConflictAction getOnMultiColumnUniqueConstraintConflict() {
-		return mOnMultiColumnUniqueConstraintConflict;
+	public ConflictAction getOnCompositeKeyConflict() {
+		return mOnCompositeKeyConflict;
 	}
 
 	public Collection<Field> getFields() {
diff --git a/src/com/activeandroid/annotation/Table.java b/src/com/activeandroid/annotation/Table.java
index c6e00143..e91a2e49 100644
--- a/src/com/activeandroid/annotation/Table.java
+++ b/src/com/activeandroid/annotation/Table.java
@@ -28,9 +28,9 @@
 public @interface Table {
 	public String name();
 
-	public boolean hasMultiColumnUniqueConstraint() default false;
+	public boolean hasCompositeKey() default false;
 	
-	public String[] multiColumnUniqueConstraintColumns() default {"Id"};
+	public String[] compositeKeyColumns() default {"Id"};
 
-	public ConflictAction onMultiColumnUniqueConstraintConflict() default ConflictAction.FAIL;
+	public ConflictAction onCompositeKeyConflict() default ConflictAction.FAIL;
 }
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index 15ec61cd..2aff9c5f 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -128,10 +128,10 @@ public static String createTableDefinition(TableInfo tableInfo) {
 		
 		String definitionStr = TextUtils.join(", ", definitions);
 		
-		if (tableInfo.hasMultiColumnUniqueConstraint()) {
+		if (tableInfo.hasCompositeKey()) {
 			definitionStr += ", UNIQUE(";
-			definitionStr += TextUtils.join(", ", tableInfo.getMultiColumnUniqueConstraintColumns());
-			definitionStr += ") ON CONFLICT " + tableInfo.getOnMultiColumnUniqueConstraintConflict().toString();
+			definitionStr += TextUtils.join(", ", tableInfo.getCompositeKeyColumns());
+			definitionStr += ") ON CONFLICT " + tableInfo.getOnCompositeKeyConflict().toString();
 		}
 		
 		return String.format("CREATE TABLE IF NOT EXISTS %s (%s);", tableInfo.getTableName(),
