diff --git a/proactiveandroid/build.gradle b/proactiveandroid/build.gradle
index 9ad18701..19ffe3d8 100644
--- a/proactiveandroid/build.gradle
+++ b/proactiveandroid/build.gradle
@@ -14,7 +14,7 @@ ext {
     siteUrl = 'https://github.com/RileyGB/ProactiveAndroid'
     gitUrl = 'https://github.com/RileyGB/ProactiveAndroid.git'
 
-    libraryVersion = '0.2.6'
+    libraryVersion = '0.2.7'
 
     developerId = 'rackerman'
     developerName = 'Riley Ackerman'
diff --git a/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/Cache.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/Cache.java
index 3a5dd182..622b025f 100644
--- a/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/Cache.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/Cache.java
@@ -21,7 +21,7 @@
 import android.support.v4.util.LruCache;
 
 import com.SearingMedia.proactiveandroid.serializer.TypeSerializer;
-import com.SearingMedia.proactiveandroid.util.Log;
+import com.SearingMedia.proactiveandroid.util.ProactiveLog;
 
 import java.util.Collection;
 
@@ -58,7 +58,7 @@ private Cache() {
 
 	public static synchronized void initialize(Configuration configuration) {
 		if (sIsInitialized) {
-			Log.v("ActiveAndroid already initialized.");
+			ProactiveLog.v("ActiveAndroid already initialized.");
 			return;
 		}
 
@@ -76,12 +76,12 @@ public static synchronized void initialize(Configuration configuration) {
 
 		sIsInitialized = true;
 
-		Log.v("ActiveAndroid initialized successfully.");
+		ProactiveLog.v("ActiveAndroid initialized successfully.");
 	}
 
 	public static synchronized void clear() {
 		sEntities.evictAll();
-		Log.v("Cache cleared.");
+		ProactiveLog.v("Cache cleared.");
 	}
 
 	public static synchronized void dispose() {
@@ -93,7 +93,7 @@ public static synchronized void dispose() {
 
 		sIsInitialized = false;
 
-		Log.v("ActiveAndroid disposed. Call initialize to use library.");
+		ProactiveLog.v("ActiveAndroid disposed. Call initialize to use library.");
 	}
 
 	// Database access
diff --git a/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/Configuration.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/Configuration.java
index bdc2fb7e..a961d126 100644
--- a/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/Configuration.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/Configuration.java
@@ -19,7 +19,7 @@
 import android.content.Context;
 
 import com.SearingMedia.proactiveandroid.serializer.TypeSerializer;
-import com.SearingMedia.proactiveandroid.util.Log;
+import com.SearingMedia.proactiveandroid.util.ProactiveLog;
 import com.SearingMedia.proactiveandroid.util.ReflectionUtils;
 
 import java.util.ArrayList;
@@ -289,7 +289,7 @@ private String getMetaDataSqlParserOrDefault() {
 					}
 				}
 				catch (ClassNotFoundException e) {
-					Log.e("Couldn't create class.", e);
+					ProactiveLog.e("Couldn't create class.", e);
 				}
 			}
 
@@ -307,7 +307,7 @@ private String getMetaDataSqlParserOrDefault() {
 					}
 				}
 				catch (ClassNotFoundException e) {
-					Log.e("Couldn't create class.", e);
+					ProactiveLog.e("Couldn't create class.", e);
 				}
 			}
 
diff --git a/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/DatabaseHelper.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/DatabaseHelper.java
index 92cb79d8..6a3e9c7e 100644
--- a/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/DatabaseHelper.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/DatabaseHelper.java
@@ -22,8 +22,8 @@
 import android.text.TextUtils;
 
 import com.SearingMedia.proactiveandroid.util.IOUtils;
-import com.SearingMedia.proactiveandroid.util.Log;
 import com.SearingMedia.proactiveandroid.util.NaturalOrderComparator;
+import com.SearingMedia.proactiveandroid.util.ProactiveLog;
 import com.SearingMedia.proactiveandroid.util.SQLiteUtils;
 import com.SearingMedia.proactiveandroid.util.SqlParser;
 
@@ -68,7 +68,7 @@ public DatabaseHelper(Configuration configuration) {
 	@Override
 	public void onOpen(SQLiteDatabase db) {
 		executePragmas(db);
-	};
+	}
 
 	@Override
 	public void onCreate(SQLiteDatabase db) {
@@ -117,7 +117,7 @@ public void copyAttachedDatabase(Context context, String databaseName) {
 			inputStream.close();
 		}
 		catch (IOException e) {
-			Log.e("Failed to open file", e);
+			ProactiveLog.e("Failed to open file", e);
 		}
 	}
 
@@ -128,7 +128,7 @@ public void copyAttachedDatabase(Context context, String databaseName) {
 	private void executePragmas(SQLiteDatabase db) {
 		if (SQLiteUtils.FOREIGN_KEYS_SUPPORTED) {
 			db.execSQL("PRAGMA foreign_keys=ON;");
-			Log.i("Foreign Keys supported. Enabling foreign key features.");
+			ProactiveLog.i("Foreign Keys supported. Enabling foreign key features.");
 		}
 	}
 
@@ -178,11 +178,11 @@ private boolean executeMigrations(SQLiteDatabase db, int oldVersion, int newVers
 							executeSqlScript(db, file);
 							migrationExecuted = true;
 
-							Log.i(file + " executed succesfully.");
+							ProactiveLog.i(file + " executed succesfully.");
 						}
 					}
 					catch (NumberFormatException e) {
-						Log.w("Skipping invalidly named file: " + file, e);
+						ProactiveLog.w("Skipping invalidly named file: " + file, e);
 					}
 				}
 				db.setTransactionSuccessful();
@@ -192,7 +192,7 @@ private boolean executeMigrations(SQLiteDatabase db, int oldVersion, int newVers
 			}
 		}
 		catch (IOException e) {
-			Log.e("Failed to execute migrations.", e);
+			ProactiveLog.e("Failed to execute migrations.", e);
 		}
 
 		return migrationExecuted;
@@ -214,7 +214,7 @@ private void executeSqlScript(SQLiteDatabase db, String file) {
 		    }
 
 		} catch (IOException e) {
-			Log.e("Failed to execute " + file, e);
+			ProactiveLog.e("Failed to execute " + file, e);
 
 		} finally {
 		    IOUtils.closeQuietly(stream);
diff --git a/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/Model.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/Model.java
index 6439fb0c..e0755626 100644
--- a/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/Model.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/Model.java
@@ -26,7 +26,7 @@
 import com.SearingMedia.proactiveandroid.query.Delete;
 import com.SearingMedia.proactiveandroid.query.Select;
 import com.SearingMedia.proactiveandroid.serializer.TypeSerializer;
-import com.SearingMedia.proactiveandroid.util.Log;
+import com.SearingMedia.proactiveandroid.util.ProactiveLog;
 import com.SearingMedia.proactiveandroid.util.ReflectionUtils;
 
 import java.lang.reflect.Field;
@@ -103,7 +103,7 @@ public final Long save() {
 							fieldType = value.getClass();
 							// check that the serializer returned what it promised
 							if (!fieldType.equals(typeSerializer.getSerializedType())) {
-								Log.w(String.format("TypeSerializer returned wrong type: expected a %s but got a %s",
+								ProactiveLog.w(String.format("TypeSerializer returned wrong type: expected a %s but got a %s",
 										typeSerializer.getSerializedType(), fieldType));
 							}
 						}
@@ -153,10 +153,10 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 				}
 			}
 			catch (IllegalArgumentException e) {
-				Log.e(e.getClass().getName(), e);
+				ProactiveLog.e(e.getClass().getName(), e);
 			}
 			catch (IllegalAccessException e) {
-				Log.e(e.getClass().getName(), e);
+				ProactiveLog.e(e.getClass().getName(), e);
 			}
 		}
 
@@ -275,13 +275,13 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 				}
 			}
 			catch (IllegalArgumentException e) {
-				Log.e(e.getClass().getName(), e);
+				ProactiveLog.e(e.getClass().getName(), e);
 			}
 			catch (IllegalAccessException e) {
-				Log.e(e.getClass().getName(), e);
+				ProactiveLog.e(e.getClass().getName(), e);
 			}
 			catch (SecurityException e) {
-				Log.e(e.getClass().getName(), e);
+				ProactiveLog.e(e.getClass().getName(), e);
 			}
 		}
 
diff --git a/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/ModelInfo.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/ModelInfo.java
index 05b50825..9ffae254 100644
--- a/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/ModelInfo.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/ModelInfo.java
@@ -23,7 +23,7 @@
 import com.SearingMedia.proactiveandroid.serializer.SqlDateSerializer;
 import com.SearingMedia.proactiveandroid.serializer.TypeSerializer;
 import com.SearingMedia.proactiveandroid.serializer.UtilDateSerializer;
-import com.SearingMedia.proactiveandroid.util.Log;
+import com.SearingMedia.proactiveandroid.util.ProactiveLog;
 import com.SearingMedia.proactiveandroid.util.ReflectionUtils;
 
 import java.io.File;
@@ -64,11 +64,11 @@ public ModelInfo(Configuration configuration) {
 				scanForModel(configuration.getContext());
 			}
 			catch (IOException e) {
-				Log.e("Couldn't open source path.", e);
+				ProactiveLog.e("Couldn't open source path.", e);
 			}
 		}
 
-		Log.i("ModelInfo loaded.");
+		ProactiveLog.i("ModelInfo loaded.");
 	}
 
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -111,10 +111,10 @@ private boolean loadModelFromMetaData(Configuration configuration) {
 					mTypeSerializers.put(instance.getDeserializedType(), instance);
 				}
 				catch (InstantiationException e) {
-					Log.e("Couldn't instantiate TypeSerializer.", e);
+					ProactiveLog.e("Couldn't instantiate TypeSerializer.", e);
 				}
 				catch (IllegalAccessException e) {
-					Log.e("IllegalAccessException", e);
+					ProactiveLog.e("IllegalAccessException", e);
 				}
 			}
 		}
@@ -197,13 +197,13 @@ else if (ReflectionUtils.isTypeSerializer(discoveredClass)) {
 				}
 			}
 			catch (ClassNotFoundException e) {
-				Log.e("Couldn't create class.", e);
+				ProactiveLog.e("Couldn't create class.", e);
 			}
 			catch (InstantiationException e) {
-				Log.e("Couldn't instantiate TypeSerializer.", e);
+				ProactiveLog.e("Couldn't instantiate TypeSerializer.", e);
 			}
 			catch (IllegalAccessException e) {
-				Log.e("IllegalAccessException", e);
+				ProactiveLog.e("IllegalAccessException", e);
 			}
 		}
 	}
diff --git a/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/ProactiveAndroid.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/ProactiveAndroid.java
index e241c776..4aabbad7 100644
--- a/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/ProactiveAndroid.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/ProactiveAndroid.java
@@ -19,7 +19,7 @@
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 
-import com.SearingMedia.proactiveandroid.util.Log;
+import com.SearingMedia.proactiveandroid.util.ProactiveLog;
 
 public final class ProactiveAndroid {
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -62,7 +62,7 @@ public static void dispose() {
 	}
 
 	public static void setLoggingEnabled(boolean enabled) {
-		Log.setEnabled(enabled);
+		ProactiveLog.setEnabled(enabled);
 	}
 
 	public static SQLiteDatabase getDatabase() {
diff --git a/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/query/From.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/query/From.java
index 5fdbda20..a24dbdc1 100644
--- a/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/query/From.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/query/From.java
@@ -22,7 +22,7 @@
 import com.SearingMedia.proactiveandroid.Model;
 import com.SearingMedia.proactiveandroid.content.ContentProvider;
 import com.SearingMedia.proactiveandroid.query.Join.JoinType;
-import com.SearingMedia.proactiveandroid.util.Log;
+import com.SearingMedia.proactiveandroid.util.ProactiveLog;
 import com.SearingMedia.proactiveandroid.util.SQLiteUtils;
 
 import java.util.ArrayList;
@@ -235,8 +235,8 @@ private String sqlString(final StringBuilder sql) {
 
         // Don't waste time building the string
         // unless we're going to log it.
-        if (Log.isEnabled()) {
-            Log.v(sqlString + " " + TextUtils.join(",", getArguments()));
+        if (ProactiveLog.isEnabled()) {
+            ProactiveLog.v(sqlString + " " + TextUtils.join(",", getArguments()));
         }
 
         return sqlString;
diff --git a/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/IOUtils.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/IOUtils.java
index e76cd33b..20bfa59a 100644
--- a/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/IOUtils.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/IOUtils.java
@@ -42,7 +42,7 @@ public static void closeQuietly(final Closeable closeable) {
         try {
             closeable.close();
         } catch (final IOException e) {
-            Log.e("Couldn't close closeable.", e);
+            ProactiveLog.e("Couldn't close closeable.", e);
         }
     }
 
@@ -63,7 +63,7 @@ public static void closeQuietly(final Cursor cursor) {
         try {
             cursor.close();
         } catch (final Exception e) {
-            Log.e("Couldn't close cursor.", e);
+            ProactiveLog.e("Couldn't close cursor.", e);
         }
     }
 }
diff --git a/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/Log.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/ProactiveLog.java
similarity index 98%
rename from proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/Log.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/ProactiveLog.java
index 06becd51..08f086a1 100644
--- a/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/Log.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/ProactiveLog.java
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-public final class Log {
+public final class ProactiveLog {
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC MEMBERS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -28,7 +28,7 @@
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	private Log() {
+	private ProactiveLog() {
 	}
 
 	//////////////////////////////////////////////////////////////////////////////////////
diff --git a/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/ReflectionUtils.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/ReflectionUtils.java
index 438a4cc0..295789e9 100644
--- a/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/ReflectionUtils.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/ReflectionUtils.java
@@ -16,14 +16,6 @@
  * limitations under the License.
  */
 
-import java.lang.reflect.Field;
-import java.lang.reflect.Modifier;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.LinkedHashSet;
-import java.util.Set;
-
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
@@ -32,6 +24,14 @@
 import com.SearingMedia.proactiveandroid.annotation.Column;
 import com.SearingMedia.proactiveandroid.serializer.TypeSerializer;
 
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.LinkedHashSet;
+import java.util.Set;
+
 public final class ReflectionUtils {
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC METHODS
@@ -58,7 +58,7 @@ public static boolean isTypeSerializer(Class<?> type) {
 			}
 		}
 		catch (Exception e) {
-			Log.w("Couldn't find meta-data: " + name);
+			ProactiveLog.w("Couldn't find meta-data: " + name);
 		}
 
 		return null;
diff --git a/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/SQLiteUtils.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/SQLiteUtils.java
index 58ecc0b3..83fdeae5 100644
--- a/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/SQLiteUtils.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/SQLiteUtils.java
@@ -312,7 +312,7 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 			}
 		}
 		else {
-			Log.e("No type mapping for: " + type.toString());
+			ProactiveLog.e("No type mapping for: " + type.toString());
 		}
 
 		return definition.toString();
@@ -357,7 +357,7 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
             );
 		}
 		catch (Exception e) {
-			Log.e("Failed to process cursor.", e);
+			ProactiveLog.e("Failed to process cursor.", e);
 		}
 
 		return entities;
