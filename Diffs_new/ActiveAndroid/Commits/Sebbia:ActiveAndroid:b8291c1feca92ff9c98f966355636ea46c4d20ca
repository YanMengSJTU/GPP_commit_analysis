diff --git a/src/com/activeandroid/sebbia/Cache.java b/src/com/activeandroid/sebbia/Cache.java
index ae255e7a..c4d93bb5 100644
--- a/src/com/activeandroid/sebbia/Cache.java
+++ b/src/com/activeandroid/sebbia/Cache.java
@@ -27,8 +27,6 @@
 import com.activeandroid.sebbia.annotation.DoNotGenerate;
 import com.activeandroid.sebbia.internal.EmptyModelFiller;
 import com.activeandroid.sebbia.internal.ModelFiller;
-import com.activeandroid.sebbia.model.ManyToManyRelation;
-import com.activeandroid.sebbia.model.OneToManyRelation;
 import com.activeandroid.sebbia.serializer.TypeSerializer;
 import com.activeandroid.sebbia.util.Log;
 import com.activeandroid.sebbia.util.ReflectionUtils;
diff --git a/src/com/activeandroid/sebbia/Model.java b/src/com/activeandroid/sebbia/Model.java
index b639721c..00ad57d1 100644
--- a/src/com/activeandroid/sebbia/Model.java
+++ b/src/com/activeandroid/sebbia/Model.java
@@ -102,8 +102,12 @@ public static void delete(Class<? extends Model> type, long id) {
 	}
 
 	public static <T extends Model> T load(Class<T> type, long id) {
-		TableInfo tableInfo = Cache.getTableInfo(type);
-		return (T) new Select().from(type).where(tableInfo.getIdName() + "=?", id).executeSingle();
+		T model = (T) Cache.getEntity(type, id);
+		if (model == null) { 
+			TableInfo tableInfo = Cache.getTableInfo(type);
+			model = new Select().from(type).where(tableInfo.getIdName() + "=?", id).executeSingle();
+		}
+		return model;
 	}
 
 	public static void saveMultiple(List<? extends Model> entities) {
@@ -138,6 +142,9 @@ public final void loadFromCursor(Cursor cursor) {
 		} else {
 			loadFromCursorReflective(cursor);
 		}
+		if (mId != null) {
+			Cache.addEntity(this);
+		}
 	}
 
 	private static void fillContentValues(Model entity, ContentValues values) {
@@ -300,10 +307,6 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 				Log.e(e.getClass().getName(), e);
 			}
 		}
-
-		if (mId != null) {
-			Cache.addEntity(this);
-		}
 	}
 
 	// ////////////////////////////////////////////////////////////////////////////////////
diff --git a/src/com/activeandroid/sebbia/internal/AnnotationProcessor.java b/src/com/activeandroid/sebbia/internal/AnnotationProcessor.java
index d87cae2a..81969839 100644
--- a/src/com/activeandroid/sebbia/internal/AnnotationProcessor.java
+++ b/src/com/activeandroid/sebbia/internal/AnnotationProcessor.java
@@ -366,6 +366,9 @@ private boolean isTypeOf(TypeMirror typeMirror, Class<?> type) {
 			return false;
 
 		TypeElement typeElement = (TypeElement) element;
+		if (type == Enum.class)
+			return typeElement.getKind() == ElementKind.ENUM;
+		
 		TypeMirror superType = typeElement.getSuperclass();
 		if (isTypeOf(superType, type))
 			return true;
diff --git a/tests/src/com/activeandroid/test/model/EnumTest.java b/tests/src/com/activeandroid/test/model/EnumTest.java
new file mode 100644
index 00000000..d253c09d
--- /dev/null
+++ b/tests/src/com/activeandroid/test/model/EnumTest.java
@@ -0,0 +1,56 @@
+package com.activeandroid.test.model;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import android.database.Cursor;
+
+import com.activeandroid.sebbia.ActiveAndroid;
+import com.activeandroid.sebbia.Cache;
+import com.activeandroid.sebbia.Model;
+import com.activeandroid.sebbia.TableInfo;
+import com.activeandroid.sebbia.annotation.Column;
+import com.activeandroid.sebbia.annotation.Table;
+import com.activeandroid.sebbia.query.Delete;
+
+public class EnumTest extends ModelTestCase {
+
+	public enum Enumeration {
+		TYPE_A,
+		TYPE_B,
+		TYPE_C
+	}
+
+	@Table(name = "enum_model")
+	public static class EnumModel extends Model {
+
+		@Column(name = "enum")
+		Enumeration enumeration;
+
+		public EnumModel() {
+
+		}
+
+		public EnumModel(Enumeration enumeration) {
+			super();
+			this.enumeration = enumeration;
+		}
+
+	}
+
+	public void testEnumSaving() {
+		new Delete().from(EnumModel.class).execute();
+		List<EnumModel> models = new ArrayList<EnumModel>();
+		for (Enumeration enumeration : Enumeration.values()) 
+			models.add(new EnumModel(enumeration));
+		
+		Model.saveMultiple(models);
+		
+		TableInfo tableInfo = Cache.getTableInfo(EnumModel.class);
+		Cursor cursor = ActiveAndroid.getDatabase().query(tableInfo.getTableName(), new String[] {"enum"}, null, null, null, null, null);
+		while (cursor.moveToNext()) {
+			assertTrue(cursor.getString(0).equals(Enumeration.values()[cursor.getPosition()]));
+		}
+		cursor.close();
+	}
+}
diff --git a/tests/src/com/activeandroid/test/model/ModelTestCase.java b/tests/src/com/activeandroid/test/model/ModelTestCase.java
index 3f1fac51..11a38cf0 100644
--- a/tests/src/com/activeandroid/test/model/ModelTestCase.java
+++ b/tests/src/com/activeandroid/test/model/ModelTestCase.java
@@ -9,7 +9,7 @@
 	protected void setUp() throws Exception {
 		Configuration configuration = new Configuration.Builder(getContext())
         .setDatabaseName("model.db")
-        .setDatabaseVersion(2)
+        .setDatabaseVersion(3)
         .create();
 		ActiveAndroid.initialize(configuration, true);
 	}
