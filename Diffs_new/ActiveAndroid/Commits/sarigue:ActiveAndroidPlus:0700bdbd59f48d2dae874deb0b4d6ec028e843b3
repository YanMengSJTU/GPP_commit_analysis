diff --git a/src/com/activeandroid/query/From.java b/src/com/activeandroid/query/From.java
index b67e635a..73058581 100644
--- a/src/com/activeandroid/query/From.java
+++ b/src/com/activeandroid/query/From.java
@@ -57,11 +57,16 @@ public From(Class<? extends Model> table, Sqlable queryBase) {
 		mArguments = new ArrayList<Object>();
 	}
 
+	// -- Alias
+
 	public From as(String alias) {
 		mAlias = alias;
 		return this;
 	}
 
+
+	// -- Join
+
 	public Join join(Class<? extends Model> table) {
 		Join join = new Join(this, table, null);
 		mJoins.add(join);
@@ -92,6 +97,8 @@ public Join crossJoin(Class<? extends Model> table) {
 		return join;
 	}
 
+	// -- Groups
+
 	public From startGroupAnd() {
 		if (mWhere.length() > 0) {
 			mWhere.append(" AND");
@@ -126,6 +133,8 @@ public From endGroup() {
 		return this;
 	}
 
+	// -- Where / and / or
+
 	public From where(String clause) {
 		// Chain conditions if a previous condition exists.
 		if (mWhere.length() > 0 && ! mGroupStart) {
@@ -163,9 +172,11 @@ public From or(String clause, Object... args) {
 		return this;
 	}
 
+	// -- In / Not In
+
 	public From in(String columnName, Object... values)
 	{
-		and(createInClause(columnName, values)).addArguments(values);
+		where(columnName+" IN ").argGroup(values.length).addArguments(values);
 		return this;
 	}
 
@@ -186,7 +197,7 @@ public From andIn(String columnName, List<Object> values)
 
 	public From orIn(String columnName, Object... values)
 	{
-		or(createInClause(columnName, values)).addArguments(values);
+		or(columnName+" IN ").argGroup(values.length).addArguments(values);
 		return this;
 	}
 
@@ -195,36 +206,63 @@ public From orIn(String columnName, List<Object> values)
 		return orIn(columnName, (Object[])values.toArray());
 	}
 
+	// --
 
-	private String createInClause(String columnName, Object... values)
+	public From notIn(String columnName, Object... values)
 	{
-		StringBuilder inClause = new StringBuilder();
-		inClause.append(columnName);
-		inClause.append(" IN (");
-		for(int i=0; i<values.length; i++)
-		{
-			if (i > 0) inClause.append(",");
-			inClause.append("?");
-		}
-		inClause.append(")");
-		return inClause.toString();
+		where(columnName+" NOT IN ").argGroup(values.length).addArguments(values);
+		return this;
+	}
+
+	public From notIn(String columnName, List<Object> values)
+	{
+		return in(columnName, (Object[])values.toArray());
+	}
+
+	public From andNotIn(String columnName, Object... values)
+	{
+		return in(columnName, values);
+	}
+
+	public From andNotIn(String columnName, List<Object> values)
+	{
+		return in(columnName, values);
 	}
 
+	public From orNotIn(String columnName, Object... values)
+	{
+		or(columnName+" NOT IN ").argGroup(values.length).addArguments(values);
+		return this;
+	}
+
+	public From orNotIn(String columnName, List<Object> values)
+	{
+		return orIn(columnName, (Object[])values.toArray());
+	}
+
+	// -- Group
+
 	public From groupBy(String groupBy) {
 		mGroupBy = groupBy;
 		return this;
 	}
 
+	// -- Having
+
 	public From having(String having) {
 		mHaving = having;
 		return this;
 	}
 
+	// -- Order
+
 	public From orderBy(String orderBy) {
 		mOrderBy = orderBy;
 		return this;
 	}
 
+	// -- Limit / Offset
+
 	public From limit(int limit) {
 		return limit(String.valueOf(limit));
 	}
@@ -243,6 +281,8 @@ public From offset(String offset) {
 		return this;
 	}
 
+	// Internal
+
 	void addArguments(Object[] args) {
 		for(Object arg : args) {
 			if (arg.getClass() == boolean.class || arg.getClass() == Boolean.class) {
@@ -252,6 +292,20 @@ void addArguments(Object[] args) {
 		}
 	}
 
+	private From argGroup(int length)
+	{
+		mWhere.append("(");
+		for(int i=0; i<length; i++)
+		{
+			if (i > 0) mWhere.append(",");
+			mWhere.append("?");
+		}
+		mWhere.append(")");
+		return this;
+	}
+
+	// -- Construct query
+
 	private void addFrom(final StringBuilder sql) {
 		sql.append("FROM ");
 		sql.append(Cache.getTableName(mType)).append(" ");
@@ -330,6 +384,8 @@ private String sqlString(final StringBuilder sql) {
 		return sqlString;
 	}
 
+	// Get SQL String
+
 	@Override
 	public String toSql() {
 		final StringBuilder sql = new StringBuilder();
