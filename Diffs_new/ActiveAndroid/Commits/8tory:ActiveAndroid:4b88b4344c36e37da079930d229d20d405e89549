diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 411ed7bd..e83aa349 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -27,9 +27,9 @@
 import com.activeandroid.serializer.TypeSerializer;
 import com.activeandroid.util.Log;
 import com.activeandroid.util.ReflectionUtils;
+import com.novoda.notils.cursor.CursorList;
 
 import java.lang.reflect.Field;
-import java.util.List;
 
 @SuppressWarnings("unchecked")
 public abstract class Model {
@@ -272,7 +272,7 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 	// PROTECTED METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	protected final <T extends Model> List<T> getMany(Class<T> type, String foreignKey) {
+	protected final <T extends Model> CursorList<T> getMany(Class<T> type, String foreignKey) {
 		return new Select().from(type).where(Cache.getTableName(type) + "." + foreignKey + "=?", getId()).execute();
 	}
 
diff --git a/src/com/activeandroid/query/From.java b/src/com/activeandroid/query/From.java
index fcfeed6d..d239fb93 100644
--- a/src/com/activeandroid/query/From.java
+++ b/src/com/activeandroid/query/From.java
@@ -22,6 +22,7 @@
 import com.activeandroid.query.Join.JoinType;
 import com.activeandroid.util.Log;
 import com.activeandroid.util.SQLiteUtils;
+import com.novoda.notils.cursor.CursorList;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -200,7 +201,7 @@ public String toSql() {
 		return sql.toString().trim();
 	}
 
-	public <T extends Model> List<T> execute() {
+	public <T extends Model> CursorList<T> execute() {
 		if (mQueryBase instanceof Select) {
 			return SQLiteUtils.rawQuery(mType, toSql(), getArguments());
 		}
diff --git a/src/com/activeandroid/util/ModelCursorMarshaller.java b/src/com/activeandroid/util/ModelCursorMarshaller.java
new file mode 100644
index 00000000..78b20baa
--- /dev/null
+++ b/src/com/activeandroid/util/ModelCursorMarshaller.java
@@ -0,0 +1,34 @@
+package com.activeandroid.util;
+
+import android.database.Cursor;
+
+import com.activeandroid.Cache;
+import com.activeandroid.Model;
+import com.novoda.notils.cursor.CursorMarshaller;
+
+public class ModelCursorMarshaller<T> implements CursorMarshaller<T> {
+    private Class<? extends Model> type;
+
+    public ModelCursorMarshaller(Class<? extends Model> type) {
+        super();
+        this.type = type;
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public T marshall(Cursor cursor) {
+        Model entity = null;
+
+        try {
+            entity = Cache.getEntity(type, cursor.getLong(cursor.getColumnIndex("Id")));
+            if (entity == null) {
+                entity = type.newInstance();
+                entity.loadFromCursor(cursor);
+            }
+        } catch (Exception e) {
+            Log.e("Failed to process cursor.", e);
+        }
+
+        return (T) entity;
+    }
+}
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index b9ba32b9..c7ca7536 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -25,12 +25,12 @@
 import com.activeandroid.TableInfo;
 import com.activeandroid.annotation.Column;
 import com.activeandroid.serializer.TypeSerializer;
+import com.novoda.notils.cursor.CursorList;
+import com.novoda.notils.cursor.SimpleCursorList;
 
-import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.List;
 
 public final class SQLiteUtils {
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -88,16 +88,15 @@ public static void execSql(String sql, Object[] bindArgs) {
 		Cache.openDatabase().execSQL(sql, bindArgs);
 	}
 
-	public static <T extends Model> List<T> rawQuery(Class<? extends Model> type, String sql, String[] selectionArgs) {
+	public static <T extends Model> CursorList<T> rawQuery(Class<? extends Model> type, String sql, String[] selectionArgs) {
 		Cursor cursor = Cache.openDatabase().rawQuery(sql, selectionArgs);
-		List<T> entities = processCursor(type, cursor);
-		cursor.close();
+		CursorList<T> entities = processCursor(type, cursor);
 
 		return entities;
 	}
 
 	public static <T extends Model> T rawQuerySingle(Class<? extends Model> type, String sql, String[] selectionArgs) {
-		List<T> entities = rawQuery(type, sql, selectionArgs);
+		CursorList<T> entities = rawQuery(type, sql, selectionArgs);
 
 		if (entities.size() > 0) {
 			return entities.get(0);
@@ -189,31 +188,7 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 		return definition.toString();
 	}
 
-	@SuppressWarnings("unchecked")
-	public static <T extends Model> List<T> processCursor(Class<? extends Model> type, Cursor cursor) {
-		final List<T> entities = new ArrayList<T>();
-
-		try {
-			Constructor<?> entityConstructor = type.getConstructor();
-
-			if (cursor.moveToFirst()) {
-				do {
-					Model entity = Cache.getEntity(type, cursor.getLong(cursor.getColumnIndex("Id")));
-					if (entity == null) {
-						entity = (T) entityConstructor.newInstance();
-					}
-
-					entity.loadFromCursor(cursor);
-					entities.add((T) entity);
-				}
-				while (cursor.moveToNext());
-			}
-
-		}
-		catch (Exception e) {
-			Log.e("Failed to process cursor.", e);
-		}
-
-		return entities;
+	public static <T extends Model> CursorList<T> processCursor(Class<? extends Model> type, Cursor cursor) {
+		return new SimpleCursorList<T>(cursor, new ModelCursorMarshaller<T>(type));
 	}
 }
