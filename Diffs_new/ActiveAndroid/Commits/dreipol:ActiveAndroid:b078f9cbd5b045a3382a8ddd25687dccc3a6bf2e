diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index 64dd935f..cf482ae2 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -35,6 +35,7 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 
 public final class TableInfo {
     //////////////////////////////////////////////////////////////////////////////////////
@@ -152,6 +153,7 @@ public String getDatabaseName(Field field) {
         return name;
     }
 
+
     /**
      * @param field The model class field
      * @return the full column name (table.column)
@@ -164,6 +166,10 @@ public boolean hasComputedFields() {
         return mComputedNames.size() > 0;
     }
 
+    public boolean isWildcard(String selectField) {
+        return selectField.matches("(" + mTableName + "\\.){0,1}\\*");
+    }
+
     private Field getIdField(Class<?> type) {
         if (type.equals(Model.class)) {
             try {
@@ -193,5 +199,17 @@ public String getUniqueIdentifier() {
         return computedList;
     }
 
+    public Computed getComputedAnnotation(String databaseColumn) {
 
+        for (Map.Entry<Field, String> entry : mComputedNames.entrySet()) {
+            if (databaseColumn.matches("(" + mTableName + "\\.){0,1}" + entry.getValue())) {
+                return entry.getKey().getAnnotation(Computed.class);
+            }
+        }
+        return null;
+    }
+
+    public String getTableWildcard() {
+        return mTableName + ".*";
+    }
 }
diff --git a/src/com/activeandroid/query/ColumnSplitter.java b/src/com/activeandroid/query/ColumnSplitter.java
index 130dfe65..ff280bca 100644
--- a/src/com/activeandroid/query/ColumnSplitter.java
+++ b/src/com/activeandroid/query/ColumnSplitter.java
@@ -51,12 +51,16 @@ private void split() {
         for (String col : mColumns) {
             String[] strings = TextUtils.split(col, Pattern.compile(",\\s*"));
             List<String> columnsList = Arrays.asList(strings);
-            if (mTable != null) {
-                for (String input : columnsList) {
+            boolean hasTable = mTable != null;
+            for (String input : columnsList) {
+                if (input.length() == 0) {
+                    continue;
+                }
+                if (hasTable) {
                     mProcessedColumns.add(mTable + "." + input);
+                } else {
+                    mProcessedColumns.add(input);
                 }
-            } else {
-                mProcessedColumns.addAll(columnsList);
             }
         }
 
diff --git a/src/com/activeandroid/query/From.java b/src/com/activeandroid/query/From.java
index b17fcdf9..017a1497 100644
--- a/src/com/activeandroid/query/From.java
+++ b/src/com/activeandroid/query/From.java
@@ -253,28 +253,11 @@ private String sqlString(final StringBuilder sql) {
     @Override
     public String toSql() {
         final StringBuilder sql = new StringBuilder();
-        sql.append(mQueryBase.toSql());
         String computedJoins = "";
-        String computedSelect = "";
         if (mMethod == SqlMethod.SELECT) {
-            Select selectBase = (Select) mQueryBase;
-            TableInfo tableInfo = Cache.getTableInfo(mType);
-            boolean hasComputedFields = tableInfo.hasComputedFields();
-            if (!selectBase.hasColumns() && hasComputedFields) {
-                ArrayList<Computed> computedColumns = tableInfo.getComputedColumns();
-                for (Computed computed : computedColumns) {
-                    computedJoins += TextUtils.join(" ", computed.joins()) + " ";
-                    computedSelect += computed.select() + ",";
-                }
-                if(computedSelect.length() > 0) {
-                    computedSelect = computedSelect.replaceFirst(",$", " ");
-                }
-                String s = sql.toString();
-                sql.setLength(0);
-                sql.append(s.replaceFirst("\\*\\s*$", ""));
-                sql.append(tableInfo.getTableName()).append(".*, ").append(computedSelect);
-            }
+            computedJoins = getComputedColumns();
         }
+        sql.append(mQueryBase.toSql());
         addFrom(sql);
         addJoins(sql);
         sql.append(computedJoins);
@@ -288,6 +271,51 @@ public String toSql() {
         return sqlString(sql);
     }
 
+    protected String getComputedColumns() {
+        TableInfo tableInfo = Cache.getTableInfo(mType);
+        ArrayList<Computed> allComputedColumns = tableInfo.getComputedColumns();
+        Select queryBase = (Select) mQueryBase;
+
+        ArrayList<String> queryColumns = queryBase.getColumns();
+        if (queryColumns.size() == 0) {
+            queryColumns.add(tableInfo.getTableWildcard());
+        }
+
+        Select newQueryBase = new Select();
+        if (queryBase.isDistinct()) {
+            newQueryBase.distinct();
+        } else if (queryBase.isAll()) {
+            newQueryBase.all();
+        }
+
+        ArrayList<Computed> computedColumns = new ArrayList<Computed>(allComputedColumns.size());
+        for (String column : queryColumns) {
+            if (tableInfo.isWildcard(column)) {
+                computedColumns = allComputedColumns;
+                newQueryBase.addColumns(column);
+            } else {
+                Computed computedAnnotation = tableInfo.getComputedAnnotation(column);
+                if (computedAnnotation != null) {
+                    computedColumns.add(computedAnnotation);
+                } else {
+                    newQueryBase.addColumns(column);
+                }
+            }
+        }
+        ArrayList<String> selects = new ArrayList<String>(allComputedColumns.size());
+        String computedJoins = "";
+        for (Computed cc : computedColumns) {
+            String select = cc.select();
+            if (!TextUtils.isEmpty(select)) {
+                selects.add(select);
+            }
+            computedJoins += TextUtils.join(" ", cc.joins()) + " ";
+        }
+        newQueryBase.addColumns(selects.toArray(new String[selects.size()]));
+        mQueryBase = newQueryBase;
+        return computedJoins;
+    }
+
     public String toExistsSql() {
 
         final StringBuilder sql = new StringBuilder();
@@ -372,14 +400,14 @@ public int count(String fieldName) {
         return SQLiteUtils.intQuery(toCountSql(fieldName), getArguments());
     }
 
-	public String[] getArguments() {
-		final int size = mArguments.size();
-		final String[] args = new String[size];
+    public String[] getArguments() {
+        final int size = mArguments.size();
+        final String[] args = new String[size];
 
-		for (int i = 0; i < size; i++) {
-			args[i] = mArguments.get(i).toString();
-		}
+        for (int i = 0; i < size; i++) {
+            args[i] = mArguments.get(i).toString();
+        }
 
-		return args;
-	}
+        return args;
+    }
 }
diff --git a/src/com/activeandroid/query/Select.java b/src/com/activeandroid/query/Select.java
index 0585e896..3a123e1d 100644
--- a/src/com/activeandroid/query/Select.java
+++ b/src/com/activeandroid/query/Select.java
@@ -70,6 +70,10 @@ public From from(Class<? extends Model> table) {
         return new From(table, this, SqlMethod.SELECT);
     }
 
+    public ArrayList<String> getColumns() {
+        return mColumns;
+    }
+
     public boolean hasColumns() {
         return mColumns != null && mColumns.size() > 0;
     }
@@ -104,5 +108,11 @@ public Column(String name, String alias) {
             this.alias = alias;
         }
     }
+    public boolean isDistinct() {
+        return mDistinct;
+    }
 
+    public boolean isAll() {
+        return mAll;
+    }
 }
\ No newline at end of file
