diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index f607b966..280f695d 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -29,6 +29,7 @@
 import com.activeandroid.annotation.Column;
 import com.activeandroid.annotation.Table;
 import com.activeandroid.util.Log;
+import com.activeandroid.util.SQLiteUtils.ConflictAction;
 
 public final class TableInfo extends DataSetObservable {
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -37,6 +38,9 @@
 
 	private Class<? extends Model> mType;
 	private String mTableName;
+	private boolean mHasMultiColumnUniqueConstraint;
+	private String[] mMultiColumnUniqueConstraintColumns;
+	private ConflictAction mOnMultiColumnUniqueConstraintConflict;
 
 	private Map<Field, String> mColumnNames = new HashMap<Field, String>();
 
@@ -50,6 +54,9 @@ public TableInfo(Class<? extends Model> type) {
 		final Table tableAnnotation = type.getAnnotation(Table.class);
 		if (tableAnnotation != null) {
 			mTableName = tableAnnotation.name();
+			mHasMultiColumnUniqueConstraint = tableAnnotation.hasMultiColumnUniqueConstraint();
+			mMultiColumnUniqueConstraintColumns = tableAnnotation.multiColumnUniqueConstraintColumns();
+			mOnMultiColumnUniqueConstraintConflict = tableAnnotation.onMultiColumnUniqueConstraintConflict();
 		}
 		else {
 			mTableName = type.getSimpleName();
@@ -78,6 +85,18 @@ public String getTableName() {
 		return mTableName;
 	}
 
+	public boolean hasMultiColumnUniqueConstraint() {
+		return mHasMultiColumnUniqueConstraint;
+	}
+
+	public String[] getMultiColumnUniqueConstraintColumns() {
+		return mMultiColumnUniqueConstraintColumns;
+	}
+
+	public ConflictAction getOnMultiColumnUniqueConstraintConflict() {
+		return mOnMultiColumnUniqueConstraintConflict;
+	}
+
 	public Collection<Field> getFields() {
 		return mColumnNames.keySet();
 	}
diff --git a/src/com/activeandroid/annotation/Column.java b/src/com/activeandroid/annotation/Column.java
index b22ae984..88cee4d8 100644
--- a/src/com/activeandroid/annotation/Column.java
+++ b/src/com/activeandroid/annotation/Column.java
@@ -21,17 +21,12 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import com.activeandroid.util.SQLiteUtils.ConflictAction;
+import com.activeandroid.util.SQLiteUtils.ForeignKeyAction;
+
 @Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Column {
-	public enum ConflictAction {
-		ROLLBACK, ABORT, FAIL, IGNORE, REPLACE
-	}
-
-	public enum ForeignKeyAction {
-		SET_NULL, SET_DEFAULT, CASCADE, RESTRICT, NO_ACTION
-	}
-
 	public String name();
 
 	public int length() default -1;
diff --git a/src/com/activeandroid/annotation/Table.java b/src/com/activeandroid/annotation/Table.java
index 4bb6deaf..c6e00143 100644
--- a/src/com/activeandroid/annotation/Table.java
+++ b/src/com/activeandroid/annotation/Table.java
@@ -21,8 +21,16 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+import com.activeandroid.util.SQLiteUtils.ConflictAction;
+
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Table {
 	public String name();
+
+	public boolean hasMultiColumnUniqueConstraint() default false;
+	
+	public String[] multiColumnUniqueConstraintColumns() default {"Id"};
+
+	public ConflictAction onMultiColumnUniqueConstraintConflict() default ConflictAction.FAIL;
 }
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index 3bef0326..15ec61cd 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -37,6 +37,14 @@
 	// ENUMERATIONS
 	//////////////////////////////////////////////////////////////////////////////////////
 
+	public enum ConflictAction {
+		ROLLBACK, ABORT, FAIL, IGNORE, REPLACE
+	}
+
+	public enum ForeignKeyAction {
+		SET_NULL, SET_DEFAULT, CASCADE, RESTRICT, NO_ACTION
+	}
+
 	public enum SQLiteType {
 		INTEGER, REAL, TEXT, BLOB
 	}
@@ -117,9 +125,17 @@ public static String createTableDefinition(TableInfo tableInfo) {
 				definitions.add(definition);
 			}
 		}
-
+		
+		String definitionStr = TextUtils.join(", ", definitions);
+		
+		if (tableInfo.hasMultiColumnUniqueConstraint()) {
+			definitionStr += ", UNIQUE(";
+			definitionStr += TextUtils.join(", ", tableInfo.getMultiColumnUniqueConstraintColumns());
+			definitionStr += ") ON CONFLICT " + tableInfo.getOnMultiColumnUniqueConstraintConflict().toString();
+		}
+		
 		return String.format("CREATE TABLE IF NOT EXISTS %s (%s);", tableInfo.getTableName(),
-				TextUtils.join(", ", definitions));
+				definitionStr);
 	}
 
 	@SuppressWarnings("unchecked")
@@ -161,7 +177,7 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 			if (column.unique()) {
 				definition += " UNIQUE ON CONFLICT " + column.onUniqueConflict().toString();
 			}
-
+			
 			if (FOREIGN_KEYS_SUPPORTED && ReflectionUtils.isModel(type)) {
 				definition += " REFERENCES " + Cache.getTableInfo((Class<? extends Model>) type).getTableName() + "(Id)";
 				definition += " ON DELETE " + column.onDelete().toString().replace("_", " ");
