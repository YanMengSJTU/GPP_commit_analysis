diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index fd55548a..aaedfee2 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -84,6 +84,11 @@ public final void save() {
 						// set new object type
 						if (value != null) {
 							fieldType = value.getClass();
+							// check that the serializer returned what it promised
+							if (!fieldType.equals(typeSerializer.getSerializedType())) {
+								Log.w(String.format("TypeSerializer returned wrong type: expected a %s but got a %s",
+										typeSerializer.getSerializedType(), fieldType));
+							}
 						}
 					}
 				}
@@ -170,7 +175,7 @@ public final void loadFromCursor(Class<? extends Model> type, Cursor cursor) {
 				Object value = null;
 
 				if (typeSerializer != null) {
-					fieldType = typeSerializer.getDeserializedType();
+				  fieldType = typeSerializer.getSerializedType();
 				}
 
 				// TODO: Find a smarter way to do this? This if block is necessary because we
diff --git a/src/com/activeandroid/serializer/CalendarSerializer.java b/src/com/activeandroid/serializer/CalendarSerializer.java
index aceacf47..55509bd0 100644
--- a/src/com/activeandroid/serializer/CalendarSerializer.java
+++ b/src/com/activeandroid/serializer/CalendarSerializer.java
@@ -18,15 +18,13 @@
 
 import java.util.Calendar;
 
-import com.activeandroid.util.SQLiteUtils.SQLiteType;
-
 public final class CalendarSerializer extends TypeSerializer {
 	public Class<?> getDeserializedType() {
 		return Calendar.class;
 	}
 
-	public SQLiteType getSerializedType() {
-		return SQLiteType.INTEGER;
+	public Class<?> getSerializedType() {
+		return long.class;
 	}
 
 	public Long serialize(Object data) {
diff --git a/src/com/activeandroid/serializer/SqlDateSerializer.java b/src/com/activeandroid/serializer/SqlDateSerializer.java
index 6595086b..530d1249 100644
--- a/src/com/activeandroid/serializer/SqlDateSerializer.java
+++ b/src/com/activeandroid/serializer/SqlDateSerializer.java
@@ -18,15 +18,13 @@
 
 import java.sql.Date;
 
-import com.activeandroid.util.SQLiteUtils.SQLiteType;
-
 public final class SqlDateSerializer extends TypeSerializer {
 	public Class<?> getDeserializedType() {
 		return Date.class;
 	}
 
-	public SQLiteType getSerializedType() {
-		return SQLiteType.INTEGER;
+	public Class<?> getSerializedType() {
+		return long.class;
 	}
 
 	public Long serialize(Object data) {
diff --git a/src/com/activeandroid/serializer/TypeSerializer.java b/src/com/activeandroid/serializer/TypeSerializer.java
index 921961e2..af0a21de 100644
--- a/src/com/activeandroid/serializer/TypeSerializer.java
+++ b/src/com/activeandroid/serializer/TypeSerializer.java
@@ -16,12 +16,10 @@
  * limitations under the License.
  */
 
-import com.activeandroid.util.SQLiteUtils.SQLiteType;
-
 public abstract class TypeSerializer {
 	public abstract Class<?> getDeserializedType();
 
-	public abstract SQLiteType getSerializedType();
+	public abstract Class<?> getSerializedType();
 
 	public abstract Object serialize(Object data);
 
diff --git a/src/com/activeandroid/serializer/UtilDateSerializer.java b/src/com/activeandroid/serializer/UtilDateSerializer.java
index 40f449a9..a82c7ef1 100644
--- a/src/com/activeandroid/serializer/UtilDateSerializer.java
+++ b/src/com/activeandroid/serializer/UtilDateSerializer.java
@@ -18,15 +18,13 @@
 
 import java.util.Date;
 
-import com.activeandroid.util.SQLiteUtils.SQLiteType;
-
 public final class UtilDateSerializer extends TypeSerializer {
 	public Class<?> getDeserializedType() {
 		return Date.class;
 	}
 
-	public SQLiteType getSerializedType() {
-		return SQLiteType.INTEGER;
+	public Class<?> getSerializedType() {
+		return long.class;
 	}
 
 	public Long serialize(Object data) {
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index 2a6cf771..fbedc8a5 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -123,15 +123,16 @@ public static String createTableDefinition(TableInfo tableInfo) {
 	public static String createColumnDefinition(TableInfo tableInfo, Field field) {
 		String definition = null;
 
-		final Class<?> type = field.getType();
+		Class<?> type = field.getType();
 		final String name = tableInfo.getColumnName(field);
 		final TypeSerializer typeSerializer = Cache.getParserForType(field.getType());
 		final Column column = field.getAnnotation(Column.class);
 
 		if (typeSerializer != null) {
-			definition = name + " " + typeSerializer.getSerializedType().toString();
+			type = typeSerializer.getSerializedType();
 		}
-		else if (TYPE_MAP.containsKey(type)) {
+
+		if (TYPE_MAP.containsKey(type)) {
 			definition = name + " " + TYPE_MAP.get(type).toString();
 		}
 		else if (ReflectionUtils.isModel(type)) {
