diff --git a/src/com/activeandroid/manager/DBManager.java b/src/com/activeandroid/manager/DBManager.java
index 6c75c898..1afb73ab 100644
--- a/src/com/activeandroid/manager/DBManager.java
+++ b/src/com/activeandroid/manager/DBManager.java
@@ -213,4 +213,11 @@ public void run() {
     public Class<OBJECT_CLASS> getObjectClass() {
         return mObjectClass;
     }
+
+    /**
+     * Deletes all from the current object's class
+     */
+    public void deleteAll() {
+        deleteAll(mObjectClass);
+    }
 }
diff --git a/src/com/activeandroid/manager/SingleDBManager.java b/src/com/activeandroid/manager/SingleDBManager.java
index a87603cc..0f6b25d9 100644
--- a/src/com/activeandroid/manager/SingleDBManager.java
+++ b/src/com/activeandroid/manager/SingleDBManager.java
@@ -8,6 +8,7 @@
 import com.activeandroid.Model;
 import com.activeandroid.exception.DBManagerNotOnMainException;
 import com.activeandroid.interfaces.ObjectRequester;
+import com.activeandroid.query.Delete;
 import com.activeandroid.query.Select;
 import com.activeandroid.interfaces.CollectionReceiver;
 import com.activeandroid.interfaces.ObjectReceiver;
@@ -190,6 +191,21 @@ public void run() {
         addAllInBackground(obClass, array, finishedRunnable, tag, DBRequest.PRIORITY_LOW);
     }
 
+
+    public <OBJECT_CLASS extends Model> void addAllInBackground(final ArrayList<OBJECT_CLASS> objects, final Runnable finishedRunnable, String tag, int priority) {
+        processOnBackground(new DBRequest(priority, "add "+ tag) {
+            @Override
+            public void run() {
+                addAll(objects);
+
+                if(finishedRunnable!=null)
+                    processOnForeground(finishedRunnable);
+            }
+        });
+    }
+
+
+
     /**
      * Retrieves a list of objects from the database without any threading
      * Its recommended not to call this method in the foreground thread
@@ -370,4 +386,13 @@ public void run() {
     public void delete(Model favoriteObject) {
         favoriteObject.delete();
     }
+
+    /**
+     * Deletes all objects from the class specified
+     * @param obClazz
+     * @param <OBJECT_CLASS>
+     */
+    public <OBJECT_CLASS extends Model> void deleteAll(Class<OBJECT_CLASS> obClazz){
+        new Delete().from(obClazz).execute();
+    }
 }
diff --git a/src/com/activeandroid/query/From.java b/src/com/activeandroid/query/From.java
index fcfeed6d..cba46bc1 100644
--- a/src/com/activeandroid/query/From.java
+++ b/src/com/activeandroid/query/From.java
@@ -16,6 +16,7 @@
  * limitations under the License.
  */
 
+import android.database.DatabaseUtils;
 import android.text.TextUtils;
 import com.activeandroid.Cache;
 import com.activeandroid.Model;
@@ -200,6 +201,19 @@ public String toSql() {
 		return sql.toString().trim();
 	}
 
+    /**
+     * Gets the count of of rows
+     * @return
+     */
+    public long executeCount(){
+        if(mQueryBase instanceof Select){
+            return DatabaseUtils.longForQuery(Cache.openDatabase(), toSql(), getArguments());
+        } else{
+            SQLiteUtils.execSql(toSql(), getArguments());
+            return 0L;
+        }
+    }
+
 	public <T extends Model> List<T> execute() {
 		if (mQueryBase instanceof Select) {
 			return SQLiteUtils.rawQuery(mType, toSql(), getArguments());
diff --git a/src/com/activeandroid/query/Select.java b/src/com/activeandroid/query/Select.java
index 1d4c6488..e3de2708 100644
--- a/src/com/activeandroid/query/Select.java
+++ b/src/com/activeandroid/query/Select.java
@@ -24,6 +24,7 @@
 	private String[] mColumns;
 	private boolean mDistinct = false;
 	private boolean mAll = false;
+    private boolean mCount = false;
 
 	public Select() {
 	}
@@ -43,17 +44,26 @@ public Select(Column... columns) {
 	public Select distinct() {
 		mDistinct = true;
 		mAll = false;
+        mCount = false;
 
 		return this;
 	}
 
 	public Select all() {
 		mDistinct = false;
+        mCount = false;
 		mAll = true;
 
 		return this;
 	}
 
+    public Select count(){
+        mAll = false;
+        mDistinct = false;
+        mCount = true;
+        return this;
+    }
+
 	public From from(Class<? extends Model> table) {
 		return new From(table, this);
 	}
@@ -79,12 +89,14 @@ public String toSql() {
 		}
 		else if (mAll) {
 			sql.append("ALL ");
-		}
+		} else if(mCount){
+            sql.append("COUNT(*) ");
+        }
 
 		if (mColumns != null && mColumns.length > 0) {
 			sql.append(TextUtils.join(", ", mColumns) + " ");
 		}
-		else {
+		else if(!mCount){
 			sql.append("* ");
 		}
 
