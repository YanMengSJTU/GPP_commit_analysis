diff --git a/src/main/java/com/activeandroid/Cache.java b/src/main/java/com/activeandroid/Cache.java
index f8ca5103..a94363dc 100644
--- a/src/main/java/com/activeandroid/Cache.java
+++ b/src/main/java/com/activeandroid/Cache.java
@@ -46,6 +46,8 @@
 	private static boolean sIsInitialized = false;
 
 
+    private static final Object SYN_OBJECT = new Object();
+
     /**
      * boolean to tell us whether a migration has successfully been executed
      */
@@ -71,7 +73,7 @@ public static void setMigrationExecuted(boolean executed) {
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	public static synchronized void initialize(Configuration configuration) {
+	public static void initialize(Configuration configuration) {
 		if (sIsInitialized) {
 			AALog.v("ActiveAndroid already initialized.");
 			return;
@@ -81,11 +83,13 @@ public static synchronized void initialize(Configuration configuration) {
 		sIModelInfo = new ModelInfo(configuration);
 		sDatabaseHelper = new DatabaseHelper(configuration);
 
-		// TODO: It would be nice to override sizeOf here and calculate the memory
-		// actually used, however at this point it seems like the reflection
-		// required would be too costly to be of any benefit. We'll just set a max
-		// object size instead.
-		sEntities = new LruCache<String, IModel>(configuration.getCacheSize());
+        synchronized (SYN_OBJECT) {
+            // TODO: It would be nice to override sizeOf here and calculate the memory
+            // actually used, however at this point it seems like the reflection
+            // required would be too costly to be of any benefit. We'll just set a max
+            // object size instead.
+            sEntities = new LruCache<String, IModel>(configuration.getCacheSize());
+        }
 
 		openDatabase();
 
@@ -94,15 +98,19 @@ public static synchronized void initialize(Configuration configuration) {
 		AALog.v("ActiveAndroid initialized successfully.");
 	}
 
-	public static synchronized void clear() {
-		sEntities.evictAll();
+	public static void clear() {
+        synchronized (SYN_OBJECT) {
+            sEntities.evictAll();
+        }
 		AALog.v("Cache cleared.");
 	}
 
-	public static synchronized void dispose() {
+	public static void dispose() {
 		closeDatabase();
 
-		sEntities = null;
+        synchronized (SYN_OBJECT) {
+            sEntities = null;
+        }
 		sIModelInfo = null;
 		sDatabaseHelper = null;
 
@@ -113,11 +121,11 @@ public static synchronized void dispose() {
 
 	// Database access
 
-	public static synchronized SQLiteDatabase openDatabase() {
+	public static SQLiteDatabase openDatabase() {
 		return sDatabaseHelper.getWritableDatabase();
 	}
 
-	public static synchronized void closeDatabase() {
+	public static void closeDatabase() {
 		sDatabaseHelper.close();
 	}
 
@@ -137,33 +145,39 @@ public static String getIdentifier(IModel entity) {
 		return getIdentifier(entity.getClass(), entity.getId());
 	}
 
-	public static synchronized void addEntity(IModel entity) {
-		sEntities.put(getIdentifier(entity), entity);
+	public static void addEntity(IModel entity) {
+        synchronized (SYN_OBJECT) {
+            sEntities.put(getIdentifier(entity), entity);
+        }
 	}
 
-	public static synchronized IModel getEntity(Class<? extends IModel> type, String entityId) {
-		return sEntities.get(getIdentifier(type, entityId));
+	public static IModel getEntity(Class<? extends IModel> type, String entityId) {
+        synchronized (SYN_OBJECT) {
+            return sEntities.get(getIdentifier(type, entityId));
+        }
 	}
 
-	public static synchronized void removeEntity(IModel entity) {
-		sEntities.remove(getIdentifier(entity));
+	public static void removeEntity(IModel entity) {
+        synchronized (SYN_OBJECT) {
+            sEntities.remove(getIdentifier(entity));
+        }
 	}
 
 	// IModel cache
 
-	public static synchronized Collection<TableInfo> getTableInfos() {
+	public static Collection<TableInfo> getTableInfos() {
 		return sIModelInfo.getTableInfos();
 	}
 
-	public static synchronized TableInfo getTableInfo(Class<? extends IModel> type) {
+	public static TableInfo getTableInfo(Class<? extends IModel> type) {
 		return sIModelInfo.getTableInfo(type);
 	}
 
-	public static synchronized TypeSerializer getParserForType(Class<?> type) {
+	public static TypeSerializer getParserForType(Class<?> type) {
 		return sIModelInfo.getTypeSerializer(type);
 	}
 
-	public static synchronized String getTableName(Class<? extends IModel> type) {
+	public static String getTableName(Class<? extends IModel> type) {
 		return sIModelInfo.getTableInfo(type).getTableName();
 	}
 }
