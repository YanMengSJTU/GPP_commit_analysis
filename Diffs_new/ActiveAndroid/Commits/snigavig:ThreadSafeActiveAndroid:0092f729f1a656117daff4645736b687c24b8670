diff --git a/README.md b/README.md
deleted file mode 100644
index ecf95a1e..00000000
--- a/README.md
+++ /dev/null
@@ -1,98 +0,0 @@
-#Static map
-
-[![Maven](https://img.shields.io/badge/maven-0.1.3-brightgreen.svg)](http://search.maven.org/#artifactdetails%7Ccom.github.d-max%7Cstatic-map%7C0.1.3%7Caar)
-[![Blog Post](https://img.shields.io/badge/blog-post-yellow.svg)](http://dybarsky.blogspot.com/2014/08/static-map-library.html)
-
-NOT SUPPORTED ANYMORE!
-
-Google made its own lite mode of google maps in play services v6.5
-https://developers.google.com/maps/documentation/android/lite
-
-==========
- 
-This is standalone android library developed to generate static map images easily. It is based on [Google Static Maps API][4] and provides **sync** and **async** ways of bitmaps generation.
-
-Next features are supported:
-* Secure access (https)
-* Location (geo position, address)
-* Map types (roads, satellite, etc)
-* Zoom, scale, image size params
-* Markers (without custom icon)
-
-![Example Image1][1] ⠀
-![Example Image2][2] ⠀
-![Example Image3][3]
-
-###Usage
-
-Google Static Map API documentation is available [here][4]. Please, read it first if you are not familiar with service requirements and differences.
-Static-map library available in maven central repository. You can get it using:
-```groovy
-dependencies {
-    compile 'com.github.d-max:static-map:0.1+@aar'
-}
-```
-Javadoc and sources package [classigiers][8] available too.
-
-Use [Config][5] class to set map generation basic params. Example:
-```java
-Config config = new Config();
-config.setImageSize(200, 300)
-      .setZoom(10)
-      .setAddress("Kyiv");
-```
-[StaticMap][6] class contais two static methods for map generation. To get map image *synchronously* use like this:
-```java
-try {
-    Bitmap mapImage = StaticMap.requestMapImage(context, config);
-} catch (StaticMapException ex) { /* log */ }
-```
-To get map image *asynchronously*, use another method with [Callback][7] param:
-```java
-Bitmap mapImage;
-Callback callback = new Callback() {
-    public void onFailed(int errorCode, String errorMessage) { /* log */ }
-    public void onMapGenerated(Bitmap bitmap) { mapImage = bitmap; }
-};
-StaticMap.requestMapImage(context, config, callback);
-```
-This method encapsulates AsyncTask class to load image in background.
-**Note:** Callback class methods will be invoked in main thread.
-
-
-###Developed By
-
-Maksym Dybarskyi - http://d-max.info
-
-###License
-
-	The MIT License (MIT)
-	Copyright © 2014 Maxim Dybarsky
-
-	Permission is hereby granted, free of charge, to any person obtaining a copy
-	of this software and associated documentation files (the “Software”), to deal
-	in the Software without restriction, including without limitation the rights
-	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-	copies of the Software, and to permit persons to whom the Software is
-	furnished to do so, subject to the following conditions:
-
-	The above copyright notice and this permission notice shall be included in
-	all copies or substantial portions of the Software.
-
-	THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-	THE SOFTWARE.
-
-
-[1]: http://maps.google.com/maps/api/staticmap?size=200x200&center=49,31&zoom=4&maptype=sattelite
-[2]: http://maps.google.com/maps/api/staticmap?size=200x200&center=50,0&zoom=3&maptype=satellite
-[3]: http://maps.google.com/maps/api/staticmap?size=200x200&center=50.4513,30.522&zoom=15&markers=color:blue%7C50.450866,30.522873
-[4]: https://developers.google.com/maps/documentation/staticmaps/
-[5]: library/src/main/java/dmax/staticmap/Config.java
-[6]: library/src/main/java/dmax/staticmap/StaticMap.java
-[7]: library/src/main/java/dmax/staticmap/Callback.java
-[8]: http://www.gradle.org/docs/current/userguide/dependency_management.html#sub:classifiers
diff --git a/build.gradle b/build.gradle
index ee123693..bce83087 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,12 +1,123 @@
-subprojects {
-    buildscript {
-        repositories {
-            mavenCentral()
+apply plugin: 'com.android.library'
+apply plugin: 'com.github.dcendents.android-maven'
+apply plugin: 'com.jfrog.bintray'
+
+// This is the library version used when deploying the artifact
+version = "3.1.1"
+
+buildscript {
+    repositories {
+        jcenter()
+        mavenCentral()
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:1.2.3'
+        classpath 'com.github.dcendents:android-maven-plugin:1.2'
+        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
+        // NOTE: Do not place your application dependencies here; they belong
+        // in the individual module build.gradle files
+    }
+}
+
+android {
+    compileSdkVersion 22
+    buildToolsVersion "19.1.0"
+
+    defaultConfig {
+        minSdkVersion 9
+        targetSdkVersion 22
+        versionCode 1
+        versionName version
+    }
+    sourceSets {
+        main {
+            java.srcDirs = ['library/src/main/java']
+            res.srcDirs = ['library/src/main/res']
+            manifest.srcFile 'library/src/main/AndroidManifest.xml'
         }
+    }
+    buildTypes {
+    }
+}
+
+dependencies {
+    compile fileTree(include: '*.jar', dir: 'libs')
+    compile 'com.android.support:support-v4:22.2.0'
+}
+
+def siteUrl = 'https://github.com/snigavig/ThreadSafeActiveAndroid'      // Homepage URL of the library
+def gitUrl = 'https://github.com/snigavig/ThreadSafeActiveAndroid'   // Git repository URL
+group = "com.activeandroid"
 
-        dependencies {
-            classpath 'com.android.tools.build:gradle:1.2.3'
-            classpath 'com.github.dcendents:android-maven-plugin:1.2'
+Properties properties = new Properties()
+properties.load(project.rootProject.file('local.properties').newDataInputStream())
+
+bintray {
+    user = properties.getProperty("bintray.user")
+    key = properties.getProperty("bintray.apikey")
+
+    configurations = ['archives']
+    pkg {
+        repo = "maven"
+        name = "ThreadSafeActiveAndroid"
+        websiteUrl = siteUrl
+        vcsUrl = gitUrl
+        licenses = ["Apache-2.0"]
+        publish = true
+    }
+}
+
+install {
+    repositories.mavenInstaller {
+        // This generates POM.xml with proper parameters
+        pom {
+            project {
+                packaging 'aar'
+
+                // Add your description here
+                name 'Thread safe active record style SQLite persistence for Android'
+                url siteUrl
+
+                // Set your license
+                licenses {
+                    license {
+                        name 'The Apache Software License, Version 2.0'
+                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
+                    }
+                }
+                developers {
+                    developer {
+                        id 'snigavig'
+                        name 'Dmitry Mina'
+                        email 'snigavig@gmail.com'
+                    }
+                }
+                scm {
+                    connection gitUrl
+                    developerConnection gitUrl
+                    url siteUrl
+
+                }
+            }
         }
     }
 }
+
+task sourcesJar(type: Jar) {
+    from android.sourceSets.main.java.srcDirs
+    classifier = 'sources'
+}
+
+task javadoc(type: Javadoc) {
+    source = android.sourceSets.main.java.srcDirs
+    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
+}
+
+task javadocJar(type: Jar, dependsOn: javadoc) {
+    classifier = 'javadoc'
+    from javadoc.destinationDir
+}
+artifacts {
+    archives javadocJar
+    archives sourcesJar
+}
\ No newline at end of file
diff --git a/library/build.gradle b/library/build.gradle
deleted file mode 100644
index 63e84177..00000000
--- a/library/build.gradle
+++ /dev/null
@@ -1,47 +0,0 @@
-apply plugin: 'com.android.library'
-apply plugin: 'android-maven'
-android {
-    compileSdkVersion 22
-    buildToolsVersion '21.1.2'
-    // resourcePrefix 'mpcht'
-    defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion 22
-        versionCode 1
-        versionName '1.0'
-
-        sourceSets {
-            main {
-                java.srcDirs = ['src/main/java']
-                res.srcDirs = ['src/main/res']
-                manifest.srcFile 'src/main/AndroidManifest.xml'
-            }
-        }
-    }
-    buildTypes {
-        release {
-            minifyEnabled false
-            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
-        }
-    }
-    lintOptions {
-        abortOnError false
-    }
-}
-android.libraryVariants.all { variant ->
-    def name = variant.buildType.name
-    def task = project.tasks.create "jar${name.capitalize()}", Jar
-    task.dependsOn variant.javaCompile
-    task.from variant.javaCompile.destinationDir
-    artifacts.add('archives', task);
-}
-task sourcesJar(type: Jar) {
-    from android.sourceSets.main.java.srcDirs
-    classifier = 'sources'
-}
-artifacts {
-    archives sourcesJar
-}
-dependencies {
-    compile files('src/libs/android-support-v4.jar')
-}
\ No newline at end of file
diff --git a/library/gradle.properties b/library/gradle.properties
deleted file mode 100755
index c44c6c94..00000000
--- a/library/gradle.properties
+++ /dev/null
@@ -1,4 +0,0 @@
-COMPILE_SDK_VERSION = 22
-BUILD_TOOLS_VERSION = 22.0.1
-MIN_SDK_VERSION = 16
-TARGET_SDK_VERSION = 22
diff --git a/library/src/libs/android-support-v4.jar b/library/src/libs/android-support-v4.jar
deleted file mode 100644
index 428bdbc0..00000000
Binary files a/library/src/libs/android-support-v4.jar and /dev/null differ
diff --git a/settings.gradle b/settings.gradle
index d8f14a13..e69de29b 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1 +0,0 @@
-include ':library'
diff --git a/tests/.gitignore b/tests/.gitignore
deleted file mode 100644
index 6d0dc1c1..00000000
--- a/tests/.gitignore
+++ /dev/null
@@ -1,34 +0,0 @@
-#Android generated
-bin
-gen
-lint.xml
-
-#Eclipse
-.project
-.classpath
-.settings
-.checkstyle
-
-#IntelliJ IDEA
-.idea
-*.iml
-*.ipr
-*.iws
-classes
-gen-external-apklibs
-
-#Maven
-target
-release.properties
-pom.xml.*
-
-#Ant
-build.xml
-ant.properties
-local.properties
-proguard.cfg
-proguard-project.txt
-
-#Other
-.DS_Store
-tmp
diff --git a/tests/AndroidManifest.xml b/tests/AndroidManifest.xml
deleted file mode 100644
index 925693a9..00000000
--- a/tests/AndroidManifest.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.activeandroid.test"
-    android:versionCode="1"
-    android:versionName="1.0" >
-
-    <uses-sdk android:minSdkVersion="4" />
-
-    <instrumentation
-        android:name="android.test.InstrumentationTestRunner"
-        android:targetPackage="com.activeandroid.test" />
-
-    <application
-        android:icon="@drawable/ic_launcher"
-        android:label="@string/app_name" >
-        <uses-library android:name="android.test.runner" />
-    </application>
-
-</manifest>
\ No newline at end of file
diff --git a/tests/assets/migrations/2.sql b/tests/assets/migrations/2.sql
deleted file mode 100644
index 9281dd77..00000000
--- a/tests/assets/migrations/2.sql
+++ /dev/null
@@ -1,18 +0,0 @@
-CREATE TABLE IF NOT EXISTS MockMigration
-(
-	Id INTEGER AUTO_INCREMENT PRIMARY KEY,
-	Column TEXT NOT NULL
-);
-
-INSERT INTO MockMigration
-(
-	Id,
-	Column
-)
-VALUES
-(
-	1,
-	'text'
-);
-
-DROP TABLE IF EXISTS MockMigration;
diff --git a/tests/pom.xml b/tests/pom.xml
deleted file mode 100644
index 6db50e11..00000000
--- a/tests/pom.xml
+++ /dev/null
@@ -1,79 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project
-  xmlns="http://maven.apache.org/POM/4.0.0"
-  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.activeandroid</groupId>
-    <artifactId>activeandroid-parent</artifactId>
-    <version>3.1-SNAPSHOT</version>
-  </parent>
-
-  <groupId>com.activeandroid</groupId>
-  <artifactId>activeandroid-tests</artifactId>
-  <version>3.1-SNAPSHOT</version>
-  <packaging>apk</packaging>
-  <name>ActiveAndroid - Tests</name>
-
-    <properties>
-        <java.version>1.6</java.version>
-        <platform.sdk>16</platform.sdk>
-        <platform.version>4.1.1.4</platform.version>
-        <platform.support-version>r7</platform.support-version>
-    </properties>
-
-  <dependencies>
-    <dependency>
-      <groupId>com.google.android</groupId>
-      <artifactId>android-test</artifactId>
-      <version>${platform.version}</version>
-      <scope>provided</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.activeandroid</groupId>
-      <artifactId>activeandroid</artifactId>
-      <type>jar</type>
-      <version>3.1-SNAPSHOT</version>
-    </dependency>
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <version>4.10</version>
-      <scope>provided</scope>
-    </dependency>
-  </dependencies>
-  <build>
-    <sourceDirectory>src</sourceDirectory>
-    <plugins>
-      <plugin>
-        <groupId>com.jayway.maven.plugins.android.generation2</groupId>
-        <artifactId>android-maven-plugin</artifactId>
-        <version>3.8.2</version>
-        <configuration>
-          <androidManifestFile>${project.basedir}/AndroidManifest.xml</androidManifestFile>
-          <assetsDirectory>${project.basedir}/assets</assetsDirectory>
-          <resourceDirectory>${project.basedir}/res</resourceDirectory>
-          <sdk>
-            <platform>${platform.sdk}</platform>
-          </sdk>
-          <undeployBeforeDeploy>true</undeployBeforeDeploy>
-          <test>
-            <createReport>true</createReport>
-          </test>
-        </configuration>
-        <extensions>true</extensions>
-      </plugin>
-      <plugin>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <version>3.1</version>
-        <configuration>
-          <source>${java.version}</source>
-          <target>${java.version}</target>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-</project>
diff --git a/tests/project.properties b/tests/project.properties
deleted file mode 100644
index a3ee5ab6..00000000
--- a/tests/project.properties
+++ /dev/null
@@ -1,14 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-17
diff --git a/tests/res/drawable-hdpi/ic_launcher.png b/tests/res/drawable-hdpi/ic_launcher.png
deleted file mode 100644
index 96a442e5..00000000
Binary files a/tests/res/drawable-hdpi/ic_launcher.png and /dev/null differ
diff --git a/tests/res/drawable-ldpi/ic_launcher.png b/tests/res/drawable-ldpi/ic_launcher.png
deleted file mode 100644
index 99238729..00000000
Binary files a/tests/res/drawable-ldpi/ic_launcher.png and /dev/null differ
diff --git a/tests/res/drawable-mdpi/ic_launcher.png b/tests/res/drawable-mdpi/ic_launcher.png
deleted file mode 100644
index 359047df..00000000
Binary files a/tests/res/drawable-mdpi/ic_launcher.png and /dev/null differ
diff --git a/tests/res/drawable-xhdpi/ic_launcher.png b/tests/res/drawable-xhdpi/ic_launcher.png
deleted file mode 100644
index 71c6d760..00000000
Binary files a/tests/res/drawable-xhdpi/ic_launcher.png and /dev/null differ
diff --git a/tests/res/raw/block_comment.sql b/tests/res/raw/block_comment.sql
deleted file mode 100644
index 081e5e72..00000000
--- a/tests/res/raw/block_comment.sql
+++ /dev/null
@@ -1,5 +0,0 @@
-CREATE TABLE Entity1
-(
-	Id INTEGER AUTOINCREMENT PRIMARY KEY NOT NULL,
-	Column1 INTEGER /* This is a block comment and should be ignored */
-)
diff --git a/tests/res/raw/block_comment_with_semicolon.sql b/tests/res/raw/block_comment_with_semicolon.sql
deleted file mode 100644
index ba88da24..00000000
--- a/tests/res/raw/block_comment_with_semicolon.sql
+++ /dev/null
@@ -1,5 +0,0 @@
-CREATE TABLE Entity1
-(
-	Id INTEGER AUTOINCREMENT PRIMARY KEY NOT NULL, /* block comment ; with semicolon */
-	Column1 INTEGER
-)
diff --git a/tests/res/raw/block_comment_with_string.sql b/tests/res/raw/block_comment_with_string.sql
deleted file mode 100644
index 982bacf3..00000000
--- a/tests/res/raw/block_comment_with_string.sql
+++ /dev/null
@@ -1,5 +0,0 @@
-CREATE TABLE Entity1
-(
-	Id INTEGER AUTOINCREMENT PRIMARY KEY NOT NULL,
-	Column1 INTEGER /* This is a block comment 'with a string that doesn't matter' */
-)
diff --git a/tests/res/raw/block_with_line_comment.sql b/tests/res/raw/block_with_line_comment.sql
deleted file mode 100644
index 7279803a..00000000
--- a/tests/res/raw/block_with_line_comment.sql
+++ /dev/null
@@ -1,4 +0,0 @@
-CREATE TABLE Entity1
-(
-	Id INTEGER AUTOINCREMENT PRIMARY KEY NOT NULL, /* This is a block comment -- not a line comment */ Column1 INTEGER 
-)
diff --git a/tests/res/raw/complex.sql b/tests/res/raw/complex.sql
deleted file mode 100644
index 611ad37a..00000000
--- a/tests/res/raw/complex.sql
+++ /dev/null
@@ -1,38 +0,0 @@
--- Create table for migration
-CREATE TABLE Entity2
-(
-    Id INTEGER AUTO_INCREMENT PRIMARY KEY,
-    Column TEXT NOT NULL,
-    Column2 INTEGER NULL /* this column is new */
-);
-
--- Migrate data
-INSERT INTO Entity2
-(
-    Id,
-    Column, /* --> ; <-- */
-    Column2
-)
-SELECT  Id,
-        Column,
-        0 -- there's no such value in the old table
-        FROM Entity;
-
--- Rename Entity2 to Entity
-DROP TABLE Entity;
-ALTER TABLE Entity2 RENAME TO Entity;
-
-/* Add some --sample-- data */
-INSERT INTO Entity2
-(
-    Id, --;'/*;*/--
-    Col/*not sure if anyone would ever be insane enough to do this*/umn,
-    Column2--,
-)
-VALUES
-(
-	9001 /* not -- really */, -- almost forgot that comma
-	42,--23, /* I don't know who messed this up
-	'string /* string */ -- string'--,
-	-- 'test' whoops we don't have that many columns
-)
\ No newline at end of file
diff --git a/tests/res/raw/invalid_block_comment.sql b/tests/res/raw/invalid_block_comment.sql
deleted file mode 100644
index 07dfd474..00000000
--- a/tests/res/raw/invalid_block_comment.sql
+++ /dev/null
@@ -1,6 +0,0 @@
-CREATE TABLE Entity1
-(
-	Id INTEGER AUTOINCREMENT PRIMARY KEY NOT NULL,
-	 /* /* /* This is an invalid block comment */ */
-	Column1 INTEGER
-)
diff --git a/tests/res/raw/line_comment.sql b/tests/res/raw/line_comment.sql
deleted file mode 100644
index d7e91e05..00000000
--- a/tests/res/raw/line_comment.sql
+++ /dev/null
@@ -1,5 +0,0 @@
-CREATE TABLE Entity1
-(
-	Id INTEGER AUTOINCREMENT PRIMARY KEY NOT NULL,
-	Column1 INTEGER -- This is a line comment and should be ignored
-)
diff --git a/tests/res/raw/line_comment_and_block_end.sql b/tests/res/raw/line_comment_and_block_end.sql
deleted file mode 100644
index f555f40a..00000000
--- a/tests/res/raw/line_comment_and_block_end.sql
+++ /dev/null
@@ -1,6 +0,0 @@
-CREATE TABLE Entity1
-(
-	Id INTEGER AUTOINCREMENT PRIMARY KEY NOT NULL,
-	-- This is a line comment and should be ignored */ NonColumn STRING,
-	Column1 INTEGER
-)
diff --git a/tests/res/raw/line_comment_with_semicolon.sql b/tests/res/raw/line_comment_with_semicolon.sql
deleted file mode 100644
index a2d0c421..00000000
--- a/tests/res/raw/line_comment_with_semicolon.sql
+++ /dev/null
@@ -1,5 +0,0 @@
-CREATE TABLE Entity1
-(
-	Id INTEGER AUTOINCREMENT PRIMARY KEY NOT NULL, -- line comment ; with semicolon
-	Column1 INTEGER
-)
diff --git a/tests/res/raw/line_comment_with_string.sql b/tests/res/raw/line_comment_with_string.sql
deleted file mode 100644
index 6c05cb99..00000000
--- a/tests/res/raw/line_comment_with_string.sql
+++ /dev/null
@@ -1,5 +0,0 @@
-CREATE TABLE Entity1
-(
-	Id INTEGER AUTOINCREMENT PRIMARY KEY NOT NULL,
-	Column1 INTEGER -- This is a line comment 'with a string that doesn't matter'
-)
diff --git a/tests/res/raw/string_with_block_comment.sql b/tests/res/raw/string_with_block_comment.sql
deleted file mode 100644
index 04e89364..00000000
--- a/tests/res/raw/string_with_block_comment.sql
+++ /dev/null
@@ -1,12 +0,0 @@
-INSERT INTO Entity
-(
-	Id,
-	Column1,
-	Column2
-)
-VALUES
-(
-	1,
-	'/* some text',
-	'some text */'
-);
\ No newline at end of file
diff --git a/tests/res/raw/string_with_line_comment.sql b/tests/res/raw/string_with_line_comment.sql
deleted file mode 100644
index 4ba8fb7b..00000000
--- a/tests/res/raw/string_with_line_comment.sql
+++ /dev/null
@@ -1,12 +0,0 @@
-INSERT INTO Entity
-(
-	Id,
-	Column1,
-	Column2
-)
-VALUES
-(
-	1,
-	'-- some text',
-	'some text'
-);
\ No newline at end of file
diff --git a/tests/res/raw/string_with_semicolon.sql b/tests/res/raw/string_with_semicolon.sql
deleted file mode 100644
index 47bcb840..00000000
--- a/tests/res/raw/string_with_semicolon.sql
+++ /dev/null
@@ -1,12 +0,0 @@
-INSERT INTO Entity
-(
-	Id,
-	Column1,
-	Column2
-)
-VALUES
-(
-	1,
-	'some ; text',
-	'some ; text'
-);
\ No newline at end of file
diff --git a/tests/res/raw/string_with_whitespace.sql b/tests/res/raw/string_with_whitespace.sql
deleted file mode 100644
index 2ba29ac3..00000000
--- a/tests/res/raw/string_with_whitespace.sql
+++ /dev/null
@@ -1,12 +0,0 @@
-INSERT INTO Entity
-(
-	Id,
-	Column1,
-	Column2
-)
-VALUES
-(
-	1,
-	'some			text',
-	'some    text'
-);
\ No newline at end of file
diff --git a/tests/res/raw/two_statements.sql b/tests/res/raw/two_statements.sql
deleted file mode 100644
index ad87c403..00000000
--- a/tests/res/raw/two_statements.sql
+++ /dev/null
@@ -1,11 +0,0 @@
-CREATE TABLE Entity1
-(
-	Id INTEGER AUTOINCREMENT PRIMARY KEY NOT NULL,
-	Column1 INTEGER
-);
-
-CREATE TABLE Entity2
-(
-	Id INTEGER AUTOINCREMENT PRIMARY KEY NOT NULL,
-	Column1 INTEGER
-)
diff --git a/tests/res/raw/whitespace.sql b/tests/res/raw/whitespace.sql
deleted file mode 100644
index 97eb6f2a..00000000
--- a/tests/res/raw/whitespace.sql
+++ /dev/null
@@ -1,36 +0,0 @@
-CREATE TABLE Entity1
-
-
-(
-
-
-
-
-
-
-
-
-
-
-
-
-	Id INTEGER AUTOINCREMENT                         PRIMARY KEY NOT NULL,
-	
-	
-	
-	
-	
-	
-	
-	
-	
-	
-	
-	
-	
-	
-	
-	
-	
-	Column1					INTEGER
-);
\ No newline at end of file
diff --git a/tests/res/values/strings.xml b/tests/res/values/strings.xml
deleted file mode 100644
index 2d1ce35a..00000000
--- a/tests/res/values/strings.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-
-    <string name="app_name">TestsTest</string>
-
-</resources>
\ No newline at end of file
diff --git a/tests/src/com/activeandroid/test/ActiveAndroidTestCase.java b/tests/src/com/activeandroid/test/ActiveAndroidTestCase.java
deleted file mode 100644
index 3b5fab1f..00000000
--- a/tests/src/com/activeandroid/test/ActiveAndroidTestCase.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package com.activeandroid.test;
-
-/*
- * Copyright (C) 2010 Michael Pardo
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import android.test.ApplicationTestCase;
-
-import com.activeandroid.app.Application;
-
-public abstract class ActiveAndroidTestCase extends ApplicationTestCase<Application> {
-	public ActiveAndroidTestCase() {
-		super(Application.class);
-	}
-
-	protected void setUp() throws Exception {
-		super.setUp();
-		createApplication();
-	}
-
-	protected void tearDown() throws Exception {
-		super.tearDown();
-	}
-
-	public static <T> void assertArrayEquals(T[] actual, T... expected) {
-		assertEquals(expected.length, actual.length);
-		
-		for (int i = 0; i < expected.length; i++) {
-			assertEquals(expected[i], actual[i]);
-		}
-	}
-}
diff --git a/tests/src/com/activeandroid/test/CacheTest.java b/tests/src/com/activeandroid/test/CacheTest.java
deleted file mode 100644
index c8ca401a..00000000
--- a/tests/src/com/activeandroid/test/CacheTest.java
+++ /dev/null
@@ -1,50 +0,0 @@
-package com.activeandroid.test;
-
-import android.test.AndroidTestCase;
-
-import com.activeandroid.ActiveAndroid;
-import com.activeandroid.Cache;
-import com.activeandroid.Configuration;
-import com.activeandroid.Model;
-import com.activeandroid.TableInfo;
-import com.activeandroid.annotation.Table;
-
-import java.util.Collection;
-
-public class CacheTest extends AndroidTestCase {
-
-    @Override
-    protected void setUp() {
-        Configuration conf = new Configuration.Builder(getContext())
-                .setDatabaseName("CacheTest")
-                .addModelClasses(CacheTestModel.class, CacheTestModel2.class)
-                .create();
-        ActiveAndroid.initialize(conf, true);
-    }
-
-    public void testGetTableInfos() {
-        assertNotNull(Cache.getContext());
-        Collection<TableInfo> tableInfos = Cache.getTableInfos();
-        assertEquals(2, tableInfos.size());
-
-        {
-            TableInfo tableInfo = Cache.getTableInfo(CacheTestModel.class);
-            assertNotNull(tableInfo);
-            assertEquals("CacheTestModel", tableInfo.getTableName());
-        }
-
-        {
-            TableInfo tableInfo = Cache.getTableInfo(CacheTestModel2.class);
-            assertNotNull(tableInfo);
-            assertEquals("CacheTestModel2", tableInfo.getTableName());
-        }
-    }
-
-    @Table(name = "CacheTestModel")
-    private static class CacheTestModel extends Model {
-    }
-
-    @Table(name = "CacheTestModel2")
-    private static class CacheTestModel2 extends Model {
-    }
-}
diff --git a/tests/src/com/activeandroid/test/ConfigurationTest.java b/tests/src/com/activeandroid/test/ConfigurationTest.java
deleted file mode 100644
index 12ca4a72..00000000
--- a/tests/src/com/activeandroid/test/ConfigurationTest.java
+++ /dev/null
@@ -1,38 +0,0 @@
-package com.activeandroid.test;
-
-import com.activeandroid.Configuration;
-import com.activeandroid.Model;
-import com.activeandroid.annotation.Table;
-
-import android.test.AndroidTestCase;
-
-import java.io.IOException;
-import java.util.List;
-
-public class ConfigurationTest extends AndroidTestCase {
-
-    public void testDefaultValue() throws IOException, ClassNotFoundException {
-        Configuration conf = new Configuration.Builder(getContext()).create();
-        assertNotNull(conf.getContext());
-        assertEquals(1024, conf.getCacheSize());
-        assertEquals("Application.db", conf.getDatabaseName());
-        assertEquals(1, conf.getDatabaseVersion());
-        assertNull(conf.getModelClasses());
-        assertFalse(conf.isValid());
-        assertNull(conf.getTypeSerializers());
-        assertEquals(Configuration.SQL_PARSER_LEGACY, conf.getSqlParser());
-    }
-
-    public void testCreateConfigurationWithMockModel() {
-        Configuration conf = new Configuration.Builder(getContext())
-                .addModelClass(ConfigurationTestModel.class)
-                .create();
-        List<Class<? extends Model>> modelClasses = conf.getModelClasses();
-        assertEquals(1, modelClasses.size());
-        assertTrue(conf.isValid());
-    }
-
-    @Table(name = "ConfigurationTestModel")
-    private static class ConfigurationTestModel extends Model {
-    }
-}
diff --git a/tests/src/com/activeandroid/test/MockModel.java b/tests/src/com/activeandroid/test/MockModel.java
deleted file mode 100644
index ff61dde3..00000000
--- a/tests/src/com/activeandroid/test/MockModel.java
+++ /dev/null
@@ -1,38 +0,0 @@
-package com.activeandroid.test;
-
-/*
- * Copyright (C) 2010 Michael Pardo
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import com.activeandroid.Model;
-import com.activeandroid.annotation.Column;
-import com.activeandroid.annotation.Table;
-
-import java.util.Date;
-
-@Table(name = "MockModel")
-public class MockModel extends Model {
-    @Column
-    public Date dateField;
-
-    @Column
-    public double doubleField;
-
-    @Column
-    public int intField;
-
-    @Column
-    public boolean booleanField;
-}
diff --git a/tests/src/com/activeandroid/test/ModelTest.java b/tests/src/com/activeandroid/test/ModelTest.java
deleted file mode 100644
index e66690d8..00000000
--- a/tests/src/com/activeandroid/test/ModelTest.java
+++ /dev/null
@@ -1,267 +0,0 @@
-/*
- * Copyright (C) 2013 Vojtech Sigler.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.activeandroid.test;
-
-import com.activeandroid.Cache;
-import com.activeandroid.Model;
-import com.activeandroid.TableInfo;
-import com.activeandroid.annotation.Column;
-import com.activeandroid.annotation.Table;
-import com.activeandroid.query.Select;
-
-import java.lang.reflect.Field;
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-
-/**
- * Simple test now covering equals and hashcode methods.
- */
-public class ModelTest extends ActiveAndroidTestCase {
-
-	/**
-	 * Equals should be type-safe.
-	 */	
-	public void testEqualsNonModel() {
-		MockModel model = new MockModel();
-
-		assertFalse(model.equals("Dummy"));
-		assertFalse(model.equals(null));
-	}
-
-	/**
-	 * Equals should not be true for different model classes.
-	 */	
-	public void testEqualsDifferentModel() {
-		Model model1 = new MockModel();
-		Model model2 = new AnotherMockModel();
-
-		assertFalse(model1.equals(model2));
-	}
-
-	/**
-	 * A new object does not have PK assigned yet,
-	 * therefore by default it is equal only to itself.
-	 */	
-	public void testEqualsOnNew() {
-		MockModel model1 = new MockModel();
-		MockModel model2 = new MockModel();
-
-		assertFalse(model1.equals(model2));
-		assertFalse(model2.equals(model1));
-		assertTrue(model1.equals(model1));  //equal only to itself
-	}
-
-	/**
-	 * Two different rows in a table should not be equal (different ids).
-	 */	
-	public void testEqualsDifferentRows() {
-		MockModel model1 = new MockModel();
-		MockModel model2 = new MockModel();
-		MockModel model3;
-
-		model1.save();
-		model2.save();
-		model3 = Model.load(MockModel.class, model1.getId());
-
-        // Not equal to each other.
-		assertFalse(model1.equals(model2));
-		assertFalse(model2.equals(model1));
-
-        // Equal to each other when loaded.
-		assertTrue(model1.equals(model3));
-		assertTrue(model1.equals(model3));
-
-        // Loaded model is not equal to a different model.
-		assertFalse(model3.equals(model2));
-		assertFalse(model2.equals(model3));
-	}
-
-	/**
-	 * Tests hashcode for new instances.
-	 */	
-	public void testHashCode() {
-		Set<Model> set = new HashSet<Model>();
-		Model m1 = new MockModel();
-		Model m2 = new MockModel();
-		Model m3 = new AnotherMockModel();
-
-		assertFalse(m1.hashCode() == m2.hashCode()); // hashes for unsaved models must not match
-		set.add(m1);
-		set.add(m2);
-		assertEquals(2, set.size()); //try in a set
-
-		assertFalse(m1.hashCode() == m3.hashCode());
-		set.add(m3);
-		assertEquals(3, set.size());
-	}
-
-	/**
-	 * Two rows in a table should have different hashcodes.
-	 */
-	public void testHashCodeDifferentRows() {
-		Set<Model> set = new HashSet<Model>();
-		Model m1 = new MockModel();
-		Model m2 = new MockModel();
-		Model m3;
-
-		m1.save();
-		m2.save();
-		m3 = Model.load(MockModel.class, m1.getId());
-
-		assertEquals(m1.hashCode(), m3.hashCode());
-		assertFalse(m1.hashCode() == m2.hashCode());
-		set.add(m1);
-		set.add(m2);
-		set.add(m3);
-		assertEquals(2, set.size());
-	}
-
-    /**
-     * Column names should default to the field name.
-     */
-    public void testColumnNamesDefaulToFieldNames() {
-        TableInfo tableInfo = Cache.getTableInfo(MockModel.class);
-
-        for ( Field field : tableInfo.getFields() ) {
-            // Id column is a special case, we'll ignore that one.
-            if ( field.getName().equals("mId") ) continue;
-
-            assertEquals(field.getName(), tableInfo.getColumnName(field));
-        }
-    }
-
-    /**
-     * Boolean should handle integer (0/1) and boolean (false/true) values.
-     */
-    public void testBooleanColumnType() {
-        MockModel mockModel = new MockModel();
-        mockModel.booleanField = false;
-        Long id = mockModel.save();
-
-        boolean databaseBooleanValue = MockModel.load( MockModel.class, id ).booleanField;
-
-        assertEquals( false, databaseBooleanValue );
-
-        // Test passing both a integer and a boolean into the where conditional.
-        assertEquals(
-                mockModel,
-                new Select().from(MockModel.class).where("booleanField = ?", 0).executeSingle() );
-
-        assertEquals(
-                mockModel,
-                new Select().from(MockModel.class).where("booleanField = ?", false).executeSingle() );
-
-        assertNull( new Select().from(MockModel.class).where("booleanField = ?", 1).executeSingle() );
-
-        assertNull( new Select().from(MockModel.class).where("booleanField = ?", true).executeSingle() );
-    }
-
-	/**
-     * Test to check the join of two (or more) tables with some fields in common when not use a projection on select.
-     * Test the issue #106 (https://github.com/pardom/ActiveAndroid/issues/106)
-     */
-    public void testJoinWithSameNames(){
-        //create a parent entity and store
-        ParentJoinMockModel parent = new ParentJoinMockModel();
-        parent.booleanField = true;
-        parent.dateField = new Date();
-        parent.doubleField = 2.0;
-        parent.intField = 1;
-        parent.save();
-
-        //the values to assign to child
-        Date dateValue = new Date();
-        double doubleValue = 30.0;
-        int intValue = 3;
-
-        //create two child entities, relate with parent and save
-        ChildMockModel child1 = new ChildMockModel();
-        child1.booleanField = false;
-        child1.dateField = dateValue;
-        child1.doubleField = doubleValue;
-        child1.intField = intValue;
-        child1.parent = parent;
-        child1.save();
-
-        ChildMockModel child2 = new ChildMockModel();
-        child2.booleanField = false;
-        child2.dateField = dateValue;
-        child2.doubleField = doubleValue;
-        child2.intField = intValue;
-        child2.parent = parent;
-        child2.save();
-
-        //Store the ids assigned to child entities when persists
-        List<Long> ids = new ArrayList<Long>();
-        ids.add(child1.getId());
-        ids.add(child2.getId());
-
-        //make the query with a join
-        List<ChildMockModel> result = new Select().from(ChildMockModel.class).
-                join(ParentJoinMockModel.class).on("ParentJoinMockModel.Id = ChildMockModel.parent").execute();
-
-        //check result
-        assertNotNull(result);
-        assertEquals(result.size(), 2);
-        for(ChildMockModel currentModel : result){
-            assertFalse(currentModel.booleanField);
-            assertEquals(currentModel.intField, intValue);
-            assertEquals(currentModel.doubleField, doubleValue);
-            assertTrue(ids.contains(currentModel.getId()));
-        }
-
-    }
-
-	/**
-	 * Mock model as we need 2 different model classes.
-	 */
-	@Table(name = "AnotherMockTable")
-	public static class AnotherMockModel extends Model {}
-
-    /**
-     * Mock model to test joins with same names.
-     * It's a copy from MockModel.
-     */
-    @Table(name = "ParentJoinMockModel")
-    public static class ParentJoinMockModel extends Model {
-        @Column
-        public Date dateField;
-
-        @Column
-        public double doubleField;
-
-        @Column
-        public int intField;
-
-        @Column
-        public boolean booleanField;
-    }
-
-    /**
-     * Mock model to test joins with same names.
-     * Extends from ParentJoinMockModel to have the same columns.
-     * Have a relationship with ParentJoinMockModel to make te join query.
-     */
-    @Table(name = "ChildMockModel")
-    public static class ChildMockModel extends ParentJoinMockModel {
-        @Column
-        ParentJoinMockModel parent;
-    }
-}
diff --git a/tests/src/com/activeandroid/test/parser/ParserConfigurationTest.java b/tests/src/com/activeandroid/test/parser/ParserConfigurationTest.java
deleted file mode 100644
index 971b8a89..00000000
--- a/tests/src/com/activeandroid/test/parser/ParserConfigurationTest.java
+++ /dev/null
@@ -1,54 +0,0 @@
-
-package com.activeandroid.test.parser;
-
-import android.database.SQLException;
-import android.database.sqlite.SQLiteDatabase;
-
-import com.activeandroid.Configuration;
-import com.activeandroid.DatabaseHelper;
-import com.activeandroid.test.ActiveAndroidTestCase;
-
-
-public class ParserConfigurationTest extends ActiveAndroidTestCase {
-
-    /**
-     * Should try to use the legacy parser by default, which is be unable to handle the SQL script.
-     */
-    public void testLegacyMigration() {
-
-        try {
-            Configuration configuration = new Configuration.Builder(getContext())
-                    .setDatabaseName("migration.db")
-                    .setDatabaseVersion(2)
-                    .create();
-
-            DatabaseHelper helper = new DatabaseHelper(configuration);
-            SQLiteDatabase db = helper.getWritableDatabase();
-            helper.onUpgrade(db, 1, 2);
-
-            fail("Should not be able to parse the SQL script.");
-
-        } catch (SQLException e) {
-            final String message = e.getMessage();
-
-            assertNotNull(message);
-            assertTrue(message.contains("syntax error"));
-            assertTrue(message.contains("near \"MockMigration\""));
-        }
-    }
-
-    /**
-     * Should use the new parser if configured to do so.
-     */
-    public void testDelimitedMigration() {
-        Configuration configuration = new Configuration.Builder(getContext())
-                .setSqlParser(Configuration.SQL_PARSER_DELIMITED)
-                .setDatabaseName("migration.db")
-                .setDatabaseVersion(2)
-                .create();
-
-        DatabaseHelper helper = new DatabaseHelper(configuration);
-        SQLiteDatabase db = helper.getWritableDatabase();
-        helper.onUpgrade(db, 1, 2);
-    }
-}
diff --git a/tests/src/com/activeandroid/test/parser/ParserTest.java b/tests/src/com/activeandroid/test/parser/ParserTest.java
deleted file mode 100644
index 164376b3..00000000
--- a/tests/src/com/activeandroid/test/parser/ParserTest.java
+++ /dev/null
@@ -1,247 +0,0 @@
-
-package com.activeandroid.test.parser;
-
-import com.activeandroid.test.ActiveAndroidTestCase;
-import com.activeandroid.test.R;
-import com.activeandroid.util.SqlParser;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.List;
-
-
-public class ParserTest extends ActiveAndroidTestCase {
-
-    private final String sql1    = "CREATE TABLE Entity1 ( Id INTEGER AUTOINCREMENT PRIMARY KEY NOT NULL, Column1 INTEGER )";
-    private final String sql2    = "CREATE TABLE Entity2 ( Id INTEGER AUTOINCREMENT PRIMARY KEY NOT NULL, Column1 INTEGER )";
-
-    private final String invalid = "CREATE TABLE Entity1 ( Id INTEGER AUTOINCREMENT PRIMARY KEY NOT NULL, */ Column1 INTEGER )";
-
-    private InputStream getStream(int id) {
-        return this.getContext().getResources().openRawResource(id);
-    }
-
-    /**
-     * Should be able to parse a script with two multi-line statments, even if the last statement
-     * is not terminated by a semicolon.
-     * @throws IOException
-     */
-    public void testTwoStatements() throws IOException {
-
-        final InputStream stream = this.getStream(R.raw.two_statements);
-        List<String> commands = SqlParser.parse(stream);
-
-        assertEquals(2, commands.size());
-        assertEquals(sql1, commands.get(0));
-        assertEquals(sql2, commands.get(1));
-    }
-
-    /**
-     * Should reduce unnecessary whitespace.
-     * @throws IOException
-     */
-    public void testWhitespace() throws IOException {
-
-        final InputStream stream = this.getStream(R.raw.whitespace);
-        List<String> commands = SqlParser.parse(stream);
-
-        assertEquals(1, commands.size());
-        assertEquals(sql1, commands.get(0));
-    }
-
-    /**
-     * Should be able to parse a multi-line statement that has an embedded line comment.
-     * @throws IOException
-     */
-    public void testLineComment() throws IOException {
-
-        final InputStream stream = this.getStream(R.raw.line_comment);
-        List<String> commands = SqlParser.parse(stream);
-
-        assertEquals(1, commands.size());
-        assertEquals(sql1, commands.get(0));
-    }
-
-    /**
-     * Should be able to handle a line comment that contains string tokens.
-     * @throws IOException
-     */
-    public void testLineCommentWithString() throws IOException {
-
-        final InputStream stream = this.getStream(R.raw.line_comment_with_string);
-        List<String> commands = SqlParser.parse(stream);
-
-        assertEquals(1, commands.size());
-        assertEquals(sql1, commands.get(0));
-    }
-
-    /**
-     * Should be able to handle a line comment that contains a semicolon.
-     * @throws IOException
-     */
-    public void testLineCommentWithSemicolon() throws IOException {
-
-        final InputStream stream = this.getStream(R.raw.line_comment_with_semicolon);
-        List<String> commands = SqlParser.parse(stream);
-
-        assertEquals(1, commands.size());
-        assertEquals(sql1, commands.get(0));
-    }
-
-    /**
-     * Should ignore a block comment end token inside a line comment.
-     * @throws IOException
-     */
-    public void testLineAndBlockEndComment() throws IOException {
-
-        final InputStream stream = this.getStream(R.raw.line_comment_and_block_end);
-        List<String> commands = SqlParser.parse(stream);
-
-        assertEquals(1, commands.size());
-        assertEquals(sql1, commands.get(0));
-    }
-
-    /**
-     * Should be able to handle a block comment.
-     * @throws IOException
-     */
-    public void testBlockComment() throws IOException {
-
-        final InputStream stream = this.getStream(R.raw.block_comment);
-        List<String> commands = SqlParser.parse(stream);
-
-        assertEquals(1, commands.size());
-        assertEquals(sql1, commands.get(0));
-    }
-
-    /**
-     * Should be able to handle a block comment that contains string tokens.
-     * @throws IOException
-     */
-    public void testBlockCommentWithString() throws IOException {
-
-        final InputStream stream = this.getStream(R.raw.block_comment_with_string);
-        List<String> commands = SqlParser.parse(stream);
-
-        assertEquals(1, commands.size());
-        assertEquals(sql1, commands.get(0));
-    }
-
-    /**
-     * Should be able to handle a block comment that contains a semicolon.
-     * @throws IOException
-     */
-    public void testBlockCommentWithSemicolon() throws IOException {
-
-        final InputStream stream = this.getStream(R.raw.block_comment_with_semicolon);
-        List<String> commands = SqlParser.parse(stream);
-
-        assertEquals(1, commands.size());
-        assertEquals(sql1, commands.get(0));
-    }
-
-    /**
-     * Should ignore a line comment token inside a block comment.
-     * @throws IOException
-     */
-    public void testBlockAndLineComment() throws IOException {
-
-        final InputStream stream = this.getStream(R.raw.block_with_line_comment);
-        List<String> commands = SqlParser.parse(stream);
-
-        assertEquals(1, commands.size());
-        assertEquals(sql1, commands.get(0));
-    }
-
-    /**
-     * Should be able to parse a script that incorrectly closes a block comment twice. The
-     * resulting script is not expected to run, but the parser shouldn't choke on it.
-     * @throws IOException
-     */
-    public void testInvalidBlockComment() throws IOException {
-
-        final InputStream stream = this.getStream(R.raw.invalid_block_comment);
-        List<String> commands = SqlParser.parse(stream);
-
-        assertEquals(1, commands.size());
-        assertEquals(invalid, commands.get(0));
-    }
-
-    /**
-     * Should ignore a line comment token inside a string.
-     * @throws IOException
-     */
-    public void testStringWithLineComment() throws IOException {
-        final String sql = "INSERT INTO Entity ( Id, Column1, Column2 ) VALUES ( 1, '-- some text', 'some text' )";
-
-        final InputStream stream = this.getStream(R.raw.string_with_line_comment);
-        List<String> commands = SqlParser.parse(stream);
-
-        assertEquals(1, commands.size());
-        assertEquals(sql, commands.get(0));
-    }
-
-    /**
-     * Should ignore block comment tokens inside strings.
-     * @throws IOException
-     */
-    public void testStringWithBlockComment() throws IOException {
-        final String sql = "INSERT INTO Entity ( Id, Column1, Column2 ) VALUES ( 1, '/* some text', 'some text */' )";
-
-        final InputStream stream = this.getStream(R.raw.string_with_block_comment);
-        List<String> commands = SqlParser.parse(stream);
-
-        assertEquals(1, commands.size());
-        assertEquals(sql, commands.get(0));
-    }
-
-    /**
-     * Should ignore semicolons inside strings.
-     * @throws IOException
-     */
-    public void testStringWithSemicolon() throws IOException {
-        final String sql = "INSERT INTO Entity ( Id, Column1, Column2 ) VALUES ( 1, 'some ; text', 'some ; text' )";
-
-        final InputStream stream = this.getStream(R.raw.string_with_semicolon);
-        List<String> commands = SqlParser.parse(stream);
-
-        assertEquals(1, commands.size());
-        assertEquals(sql, commands.get(0));
-    }
-
-    /**
-     * Should not clobber whitespace in strings.
-     * @throws IOException
-     */
-    public void testStringWithWhitespace() throws IOException {
-        final String sql = "INSERT INTO Entity ( Id, Column1, Column2 ) VALUES ( 1, 'some\t\t\ttext', 'some    text' )";
-
-        final InputStream stream = this.getStream(R.raw.string_with_whitespace);
-        List<String> commands = SqlParser.parse(stream);
-
-        assertEquals(1, commands.size());
-        assertEquals(sql, commands.get(0));
-    }
-
-    /**
-     * Should be able to handle a script that contains anything nasty I can thing of right now.
-     * @throws IOException 
-     */
-    public void testComplex() throws IOException {
-        final String sql1 = "CREATE TABLE Entity2 ( Id INTEGER AUTO_INCREMENT PRIMARY KEY, Column TEXT NOT NULL, Column2 INTEGER NULL )";
-        final String sql2 = "INSERT INTO Entity2 ( Id, Column, Column2 ) SELECT Id, Column, 0 FROM Entity";
-        final String sql3 = "DROP TABLE Entity";
-        final String sql4 = "ALTER TABLE Entity2 RENAME TO Entity";
-        final String sql5 = "INSERT INTO Entity2 ( Id, Column, Column2) VALUES ( 9001 , 42, 'string /* string */ -- string' )";
-
-        final InputStream stream = this.getStream(R.raw.complex);
-        List<String> commands = SqlParser.parse(stream);
-
-        assertEquals(5, commands.size());
-        assertEquals(sql1, commands.get(0));
-        assertEquals(sql2, commands.get(1));
-        assertEquals(sql3, commands.get(2));
-        assertEquals(sql4, commands.get(3));
-        assertEquals(sql5, commands.get(4));
-    }
-}
diff --git a/tests/src/com/activeandroid/test/query/CountTest.java b/tests/src/com/activeandroid/test/query/CountTest.java
deleted file mode 100644
index f0617ce1..00000000
--- a/tests/src/com/activeandroid/test/query/CountTest.java
+++ /dev/null
@@ -1,169 +0,0 @@
-
-package com.activeandroid.test.query;
-
-import com.activeandroid.query.Delete;
-import com.activeandroid.query.From;
-import com.activeandroid.query.Select;
-import com.activeandroid.test.MockModel;
-
-import java.util.List;
-
-
-public class CountTest extends SqlableTestCase {
-
-    private void cleanTable() {
-        new Delete().from(MockModel.class).execute();
-    }
-
-    private void populateTable() {
-        MockModel m1 = new MockModel();
-        MockModel m2 = new MockModel();
-        MockModel m3 = new MockModel();
-
-        m1.intField = 1;
-        m2.intField = 1;
-        m3.intField = 2;
-
-        m1.save();
-        m2.save();
-        m3.save();
-    }
-
-    /**
-     * Should be a simple count for the entire table.
-     */
-    public void testCountTableSql() {
-        final String expected = "SELECT COUNT(*) FROM MockModel";
-
-        String actual = new Select()
-                .from(MockModel.class)
-                .toCountSql();
-
-        assertEquals(expected, actual);
-    }
-
-    /**
-     * Should be a count with the specified where-clause.
-     */
-    public void testCountWhereClauseSql() {
-        final String expected = "SELECT COUNT(*) FROM MockModel WHERE intField = ?";
-
-        String actual = new Select()
-                .from(MockModel.class)
-                .where("intField = ?", 1)
-                .toCountSql();
-
-        assertEquals(expected, actual);
-    }
-
-    /**
-     * Shouldn't include <i>order by</i> as it has no influence on the result of <i>count</i> and
-     * should improve performance.
-     */
-    public void testCountOrderBySql() {
-        final String expected = "SELECT COUNT(*) FROM MockModel WHERE intField <> ? GROUP BY intField";
-
-        String actual = new Select()
-                .from(MockModel.class)
-                .where("intField <> ?", 0)
-                .orderBy("intField")
-                .groupBy("intField")
-                .toCountSql();
-
-        assertEquals(expected, actual);
-    }
-
-    /**
-     * Should return the same count as there are entries in the result set/table.
-     */
-    public void testCountTable() {
-        cleanTable();
-        populateTable();
-
-        From from = new Select()
-                .from(MockModel.class);
-
-        final List<MockModel> list = from.execute();
-        final int count = from.count();
-
-        assertEquals(3, count);
-        assertEquals(list.size(), count);
-    }
-
-    /**
-     * Should return the same count as there are entries in the result set if the where-clause
-     * matches several entries.
-     */
-    public void testCountWhereClause() {
-        cleanTable();
-        populateTable();
-
-        From from = new Select()
-                .from(MockModel.class)
-                .where("intField = ?", 1);
-
-        final List<MockModel> list = from.execute();
-        final int count = from.count();
-
-        assertEquals(2, count);
-        assertEquals(list.size(), count);
-    }
-
-    /**
-     * Should return the same count as there are entries in the result set if the where-clause
-     * matches zero entries.
-     */
-    public void testCountEmptyResult() {
-        cleanTable();
-        populateTable();
-
-        From from = new Select()
-                .from(MockModel.class)
-                .where("intField = ?", 3);
-
-        final List<MockModel> list = from.execute();
-        final int count = from.count();
-
-        assertEquals(0, count);
-        assertEquals(list.size(), count);
-    }
-
-    /**
-     * Should not change the result if order by is used.
-     */
-    public void testCountOrderBy() {
-        cleanTable();
-        populateTable();
-
-        From from = new Select()
-                .from(MockModel.class)
-                .where("intField = ?", 1)
-                .orderBy("intField ASC");
-
-        final List<MockModel> list = from.execute();
-        final int count = from.count();
-
-        assertEquals(2, count);
-        assertEquals(list.size(), count);
-    }
-
-    /**
-     * Should return the total number of rows, even if the rows are grouped. May seem weird, just
-     * test it in an SQL explorer.
-     */
-    public void testCountGroupBy() {
-        cleanTable();
-        populateTable();
-
-        From from = new Select()
-                .from(MockModel.class)
-                .groupBy("intField")
-                .having("intField = 1");
-
-        final List<MockModel> list = from.execute();
-        final int count = from.count();
-
-        assertEquals(2, count);
-        assertEquals(1, list.size());
-    }
-}
diff --git a/tests/src/com/activeandroid/test/query/DeleteTest.java b/tests/src/com/activeandroid/test/query/DeleteTest.java
deleted file mode 100644
index 3d9a1d71..00000000
--- a/tests/src/com/activeandroid/test/query/DeleteTest.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package com.activeandroid.test.query;
-
-/*
- * Copyright (C) 2010 Michael Pardo
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import com.activeandroid.query.Delete;
-import com.activeandroid.test.MockModel;
-
-public class DeleteTest extends SqlableTestCase {
-	public void testDelete() {
-		assertSqlEquals("DELETE ", new Delete());
-	}
-
-	public void testFrom() {
-		assertSqlEquals("DELETE FROM MockModel",
-				new Delete().from(MockModel.class));
-	}
-}
diff --git a/tests/src/com/activeandroid/test/query/ExistsTest.java b/tests/src/com/activeandroid/test/query/ExistsTest.java
deleted file mode 100644
index e67d609a..00000000
--- a/tests/src/com/activeandroid/test/query/ExistsTest.java
+++ /dev/null
@@ -1,187 +0,0 @@
-
-package com.activeandroid.test.query;
-
-import com.activeandroid.query.Delete;
-import com.activeandroid.query.From;
-import com.activeandroid.query.Select;
-import com.activeandroid.test.MockModel;
-
-import java.util.List;
-
-
-public class ExistsTest extends SqlableTestCase {
-
-    private void cleanTable() {
-        new Delete().from(MockModel.class).execute();
-    }
-
-    private void populateTable() {
-        MockModel m1 = new MockModel();
-        MockModel m2 = new MockModel();
-        MockModel m3 = new MockModel();
-
-        m1.intField = 1;
-        m2.intField = 1;
-        m3.intField = 2;
-
-        m1.save();
-        m2.save();
-        m3.save();
-    }
-
-    /**
-     * Should return {@code true} since the result set/table isn't empty.
-     */
-    public void testExistsTable() {
-        cleanTable();
-        populateTable();
-
-        From from = new Select()
-                .from(MockModel.class);
-
-        final List<MockModel> list = from.execute();
-        final boolean exists = from.exists();
-
-        assertTrue(exists);
-        assertTrue(list.size() > 0);
-    }
-
-    /**
-     * Should be a simple exists for the entire table.
-     */
-    public void testCountTableSql() {
-        final String expected = "SELECT EXISTS(SELECT 1 FROM MockModel )";
-
-        String actual = new Select()
-                .from(MockModel.class)
-                .toExistsSql();
-
-        assertEquals(expected, actual);
-    }
-
-    /**
-     * Should be an exists with the specified where-clause.
-     */
-    public void testCountWhereClauseSql() {
-        final String expected = "SELECT EXISTS(SELECT 1 FROM MockModel WHERE intField = ? )";
-
-        String actual = new Select()
-                .from(MockModel.class)
-                .where("intField = ?", 1)
-                .toExistsSql();
-
-        assertEquals(expected, actual);
-    }
-
-    /**
-     * Shouldn't include <i>order by</i> as it has no influence on the result of <i>exists</i> and
-     * should improve performance.
-     */
-    public void testCountOrderBySql() {
-        final String expected = "SELECT EXISTS(SELECT 1 FROM MockModel WHERE intField <> ? GROUP BY intField )";
-
-        String actual = new Select()
-                .from(MockModel.class)
-                .groupBy("intField")
-                .orderBy("intField")
-                .where("intField <> ?", 0)
-                .toExistsSql();
-
-        assertEquals(expected, actual);
-    }
-
-    /**
-     * Should return {@code true} since the where-clause matches rows and thus the result set isn't
-     * empty.
-     */
-    public void testExistsWhereClause() {
-        cleanTable();
-        populateTable();
-
-        From from = new Select()
-                .from(MockModel.class)
-                .where("intField = ?", 1);
-
-        final List<MockModel> list = from.execute();
-        final boolean exists = from.exists();
-
-        assertTrue(exists);
-        assertTrue(list.size() > 0);
-    }
-
-    /**
-     * Should return {@code false} since the where-clause matches zero rows and thus the result set
-     * is empty.
-     */
-    public void testExistsEmptyResult() {
-        cleanTable();
-        populateTable();
-
-        From from = new Select()
-                .from(MockModel.class)
-                .where("intField = ?", 3);
-
-        final List<MockModel> list = from.execute();
-        final boolean exists = from.exists();
-
-        assertFalse(exists);
-        assertFalse(list.size() > 0);
-    }
-
-    /**
-     * Should not change the result if order by is used.
-     */
-    public void testCountOrderBy() {
-        cleanTable();
-        populateTable();
-
-        From from = new Select()
-                .from(MockModel.class)
-                .where("intField = ?", 1)
-                .orderBy("intField ASC");
-
-        final List<MockModel> list = from.execute();
-        final boolean exists = from.exists();
-
-        assertTrue(exists);
-        assertTrue(list.size() > 0);
-    }
-
-    /**
-     * Should not change the result if group by is used.
-     */
-    public void testCountGroupBy() {
-        cleanTable();
-        populateTable();
-
-        From from = new Select()
-                .from(MockModel.class)
-                .groupBy("intField")
-                .having("intField = 1");
-
-        final List<MockModel> list = from.execute();
-        final boolean exists = from.exists();
-
-        assertTrue(exists);
-        assertTrue(list.size() > 0);
-    }
-
-    /**
-     * Should not exist if group by eliminates all rows.
-     */
-    public void testCountGroupByEmpty() {
-        cleanTable();
-        populateTable();
-
-        From from = new Select()
-                .from(MockModel.class)
-                .groupBy("intField")
-                .having("intField = 3");
-
-        final List<MockModel> list = from.execute();
-        final boolean exists = from.exists();
-
-        assertFalse(exists);
-        assertFalse(list.size() > 0);
-    }
-}
diff --git a/tests/src/com/activeandroid/test/query/FromTest.java b/tests/src/com/activeandroid/test/query/FromTest.java
deleted file mode 100644
index 8e500b0d..00000000
--- a/tests/src/com/activeandroid/test/query/FromTest.java
+++ /dev/null
@@ -1,237 +0,0 @@
-package com.activeandroid.test.query;
-
-/*
- * Copyright (C) 2010 Michael Pardo
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import com.activeandroid.Model;
-import com.activeandroid.annotation.Table;
-import com.activeandroid.query.From;
-import com.activeandroid.query.Select;
-import com.activeandroid.test.MockModel;
-
-public class FromTest extends SqlableTestCase {
-	private static final String SELECT_PREFIX = "SELECT ALL * FROM MockModel ";
-	
-	public void testLimit() {
-		assertSqlEquals(SELECT_PREFIX + "LIMIT 10",
-				from().limit(10));
-		assertSqlEquals(SELECT_PREFIX + "LIMIT 10",
-				from().limit("10"));
-	}
-	
-	public void testOffset() {
-		assertSqlEquals(SELECT_PREFIX + "OFFSET 10",
-				from().offset(10));
-		assertSqlEquals(SELECT_PREFIX + "OFFSET 10",
-				from().offset("10"));
-	}
-	
-	public void testLimitOffset() {
-		assertSqlEquals(SELECT_PREFIX + "LIMIT 10 OFFSET 20",
-				from().offset(20).limit(10));
-		assertSqlEquals(SELECT_PREFIX + "LIMIT 10 OFFSET 20",
-				from().limit(10).offset(20));
-	}
-	
-	public void testAs() {
-		assertSqlEquals(SELECT_PREFIX + "AS a",
-				from().as("a"));
-	}
-	
-	public void testOrderBy() {
-		assertSqlEquals(SELECT_PREFIX + "ORDER BY Id DESC",
-				from().orderBy("Id DESC"));
-	}
-	
-	public void testWhereNoArguments() {
-		assertSqlEquals(SELECT_PREFIX + "WHERE Id = 5",
-				from().where("Id = 5"));
-		
-		assertSqlEquals(SELECT_PREFIX + "WHERE Id = 1 AND Id = 2 AND Id = 5",
-				from().where("Id = 1").where("Id = 2").where("Id = 5"));
-	}
-	
-	public void testWhereWithArguments() {
-		From query = from().where("Id = ?", 5);
-		assertArrayEquals(query.getArguments(), "5");
-		assertSqlEquals(SELECT_PREFIX + "WHERE Id = ?",
-				query);
-		
-		query = from().where("Id > ? AND Id < ?", 5, 10);
-		assertArrayEquals(query.getArguments(), "5", "10");
-		assertSqlEquals(SELECT_PREFIX + "WHERE Id > ? AND Id < ?",
-				query);
-		
-        // Chained
-		query = from()
-				.where("Id != ?", 10)
-				.where("Id IN (?, ?, ?)", 5, 10, 15)
-				.where("Id > ? AND Id < ?", 5, 10);
-		assertArrayEquals(query.getArguments(), "10", "5", "10", "15", "5", "10");
-		assertSqlEquals(SELECT_PREFIX + "WHERE Id != ? AND Id IN (?, ?, ?) AND Id > ? AND Id < ?",
-				query);
-	}
-
-	public void testWhereChaining() {
-	    
-	    From expected = from()
-	            .where("a = ? AND b = ?", 1, 2);
-	    
-	    From actual = from()
-	            .where("a = ?", 1, 2)
-	            .where("b = ?", 1, 2);
-	    
-	    assertSqlEquals(expected, actual);
-	}
-	
-   public void testWhereAndChaining() {
-
-       From expected = from()
-               .where("a = ? AND b = ?", 1, 2);
-
-       From actual = from()
-               .where("a = ?", 1)
-               .and("b = ?", 2);
-
-       assertSqlEquals(expected, actual);
-   }
-
-   public void testWhereOrChaining() {
-
-       From expected = from()
-               .where("a = ? OR b = ?", 1, 2);
-
-       From actual = from()
-               .where("a = ?", 1)
-               .or("b = ?", 2);
-
-       assertSqlEquals(expected, actual);
-   }
-
-   public void testWhereAndOrChaining() {
-
-       From expected = from()
-               .where("a = ? OR (b = ? AND c = ?)", 1, 2, 3);
-
-       From actual = from()
-               .where("a = ?", 1)
-               .or("(b = ? AND c = ?)", 2, 3);
-
-       assertSqlEquals(expected, actual);
-   }
-
-   public void testWhereAlternateAndOrChaining() {
-
-       From expected = from()
-               .where("a = ? OR (b = ? AND c = ?)", 1, 2, 3);
-
-       From actual = from()
-               .where("a = ?", 1)
-               .or("(b = ?", 2)
-               .and("c = ?)", 3);
-
-       assertSqlEquals(expected, actual);
-   }
-
-    // Test with 'no arguments' and 'with arguments' chained together.
-    public void testWhereWithNoArgumentsAndWithArguments() {
-        From query = from().where("Id = 5");
-        query.where("Id > ?", 4);
-        assertArrayEquals(query.getArguments(), "4");
-        assertSqlEquals(SELECT_PREFIX + "WHERE Id = 5 AND Id > ?",
-                query);
-    }
-	
-	public void testSingleJoin() {
-		assertSqlEquals(SELECT_PREFIX + "JOIN JoinModel ON MockModel.Id = JoinModel.Id",
-				from().join(JoinModel.class).on("MockModel.Id = JoinModel.Id"));
-		
-		assertSqlEquals(SELECT_PREFIX + "AS a JOIN JoinModel AS b ON a.Id = b.Id",
-				from().as("a").join(JoinModel.class).as("b").on("a.Id = b.Id"));
-		
-		assertSqlEquals(SELECT_PREFIX + "JOIN JoinModel USING (Id, other)",
-				from().join(JoinModel.class).using("Id", "other"));
-	}
-	
-	public void testJoins() {
-		assertSqlEquals(SELECT_PREFIX + "JOIN JoinModel ON Id JOIN JoinModel2 ON Id",
-				from().join(JoinModel.class).on("Id")
-				.join(JoinModel2.class).on("Id"));
-	}
-	
-	public void testJoinTypes() {
-		assertSqlEquals(SELECT_PREFIX + "INNER JOIN JoinModel ON",
-				from().innerJoin(JoinModel.class).on(""));
-		assertSqlEquals(SELECT_PREFIX + "OUTER JOIN JoinModel ON",
-				from().outerJoin(JoinModel.class).on(""));
-		assertSqlEquals(SELECT_PREFIX + "CROSS JOIN JoinModel ON",
-				from().crossJoin(JoinModel.class).on(""));
-	}
-	
-	public void testGroupByHaving() {
-		assertSqlEquals(SELECT_PREFIX + "GROUP BY Id",
-				from().groupBy("Id"));
-		assertSqlEquals(SELECT_PREFIX + "GROUP BY Id HAVING Id = 1",
-				from().groupBy("Id").having("Id = 1"));
-		assertSqlEquals(SELECT_PREFIX + "GROUP BY Id HAVING Id = 1",
-				from().having("Id = 1").groupBy("Id"));
-	}
-	
-	public void testAll() {
-		final String expectedSql = SELECT_PREFIX + "AS a JOIN JoinModel USING (Id) WHERE Id > 5 GROUP BY Id HAVING Id < 10 LIMIT 5 OFFSET 10";
-		
-		// Try a few different orderings, shouldn't change the output
-		assertSqlEquals(expectedSql,
-				from()
-					.as("a")
-					.where("Id > 5")
-					.join(JoinModel.class).using("Id")
-					.groupBy("Id")
-					.having("Id < 10")
-					.limit(5)
-					.offset(10));
-		assertSqlEquals(expectedSql,
-				from()
-					.offset(10)
-					.having("Id < 10")
-					.join(JoinModel.class).using("Id")
-					.limit(5)
-					.as("a")
-					.where("Id > 5")
-					.groupBy("Id"));
-		assertSqlEquals(expectedSql,
-				from()
-					.join(JoinModel.class).using("Id")
-					.offset(10)
-					.having("Id < 10")
-					.where("Id > 5")
-					.groupBy("Id")
-					.limit(5)
-					.as("a"));
-	}
-	
-	private From from() {
-		return new Select().all().from(MockModel.class);
-	}
-	
-	@Table(name = "JoinModel")
-	private static class JoinModel extends Model {
-	}
-	
-	@Table(name = "JoinModel2")
-	private static class JoinModel2 extends Model {
-	}
-}
diff --git a/tests/src/com/activeandroid/test/query/SelectTest.java b/tests/src/com/activeandroid/test/query/SelectTest.java
deleted file mode 100644
index 73bfe73d..00000000
--- a/tests/src/com/activeandroid/test/query/SelectTest.java
+++ /dev/null
@@ -1,50 +0,0 @@
-package com.activeandroid.test.query;
-
-/*
- * Copyright (C) 2010 Michael Pardo
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import com.activeandroid.query.Select;
-import com.activeandroid.test.MockModel;
-
-public class SelectTest extends SqlableTestCase {
-	public void testSelectEmpty() {
-		assertSqlEquals("SELECT * ", new Select());
-	}
-
-	public void testSelectAll() {
-		assertSqlEquals("SELECT ALL * ", new Select().all());
-		assertSqlEquals("SELECT ALL * ", new Select().distinct().all());
-	}
-
-	public void testSelectDistinct() {
-		assertSqlEquals("SELECT DISTINCT * ", new Select().distinct());
-		assertSqlEquals("SELECT DISTINCT * ", new Select().all().distinct());
-	}
-
-	public void testSelectStringColumns() {
-		assertSqlEquals("SELECT a, b, c ", new Select("a", "b", "c"));
-	}
-
-	public void testSelectDistinctColumns() {
-		assertSqlEquals("SELECT DISTINCT a, b, c ",
-				new Select("a", "b", "c").distinct());
-	}
-
-	public void testFrom() {
-		assertSqlEquals("SELECT ALL * FROM MockModel",
-				new Select().all().from(MockModel.class));
-	}
-}
diff --git a/tests/src/com/activeandroid/test/query/SqlableTestCase.java b/tests/src/com/activeandroid/test/query/SqlableTestCase.java
deleted file mode 100644
index 36137600..00000000
--- a/tests/src/com/activeandroid/test/query/SqlableTestCase.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package com.activeandroid.test.query;
-
-/*
- * Copyright (C) 2010 Michael Pardo
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import com.activeandroid.query.Sqlable;
-import com.activeandroid.test.ActiveAndroidTestCase;
-
-public abstract class SqlableTestCase extends ActiveAndroidTestCase {
-	public static void assertSqlEquals(String expected, Sqlable actual) {
-		assertEquals(expected, actual.toSql());
-	}
-	
-	public static void assertSqlEquals(Sqlable expected, Sqlable actual) {
-	    assertEquals(expected.toSql(), actual.toSql());
-	}
-}
diff --git a/tests/src/com/activeandroid/test/query/UpdateTest.java b/tests/src/com/activeandroid/test/query/UpdateTest.java
deleted file mode 100644
index 814d34f7..00000000
--- a/tests/src/com/activeandroid/test/query/UpdateTest.java
+++ /dev/null
@@ -1,62 +0,0 @@
-package com.activeandroid.test.query;
-
-/*
- * Copyright (C) 2010 Michael Pardo
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-import com.activeandroid.query.Set;
-import com.activeandroid.query.Update;
-import com.activeandroid.test.MockModel;
-
-public class UpdateTest extends SqlableTestCase {
-	private static final String UPDATE_PREFIX = "UPDATE MockModel ";
-	
-	public void testUpdate() {
-		assertSqlEquals(UPDATE_PREFIX, update());
-	}
-	
-	public void testUpdateSet() {
-		assertSqlEquals(UPDATE_PREFIX + "SET Id = 5 ",
-				update().set("Id = 5"));
-	}
-	
-	public void testUpdateWhereNoArguments() {
-		assertSqlEquals(UPDATE_PREFIX + "SET Id = 5 WHERE Id = 1 ",
-				update()
-					.set("Id = 5")
-					.where("Id = 1"));
-	}
-	
-	public void testUpdateWhereWithArguments() {
-		Set set = update()
-				.set("Id = 5")
-				.where("Id = ?", 1);
-		assertArrayEquals(set.getArguments(), "1");
-		assertSqlEquals(UPDATE_PREFIX + "SET Id = 5 WHERE Id = ? ",
-				set);
-		
-		set = update()
-				.set("Id = 5")
-				.where("Id = ?", 1)
-				.where("Id IN (?, ?, ?)", 5, 4, 3);
-		assertArrayEquals(set.getArguments(), "5", "4", "3");
-		assertSqlEquals(UPDATE_PREFIX + "SET Id = 5 WHERE Id IN (?, ?, ?) ",
-				set);
-	}
-	
-	private Update update() {
-		return new Update(MockModel.class);
-	}
-}
