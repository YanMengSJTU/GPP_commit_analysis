diff --git a/AndroidManifest.xml b/AndroidManifest.xml
new file mode 100644
index 00000000..d88db2ef
--- /dev/null
+++ b/AndroidManifest.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.activeandroid"
+    android:versionCode="3"
+    android:versionName="3.0" >
+
+    <uses-sdk android:minSdkVersion="8" />
+
+    <application />
+
+</manifest>
\ No newline at end of file
diff --git a/libs/android-support-v4.jar b/libs/android-support-v4.jar
new file mode 100644
index 00000000..6080877d
Binary files /dev/null and b/libs/android-support-v4.jar differ
diff --git a/libs/android.jar b/libs/android.jar
deleted file mode 100644
index 4274d2b0..00000000
Binary files a/libs/android.jar and /dev/null differ
diff --git a/src/com/activeandroid/DatabaseHelper.java b/src/com/activeandroid/DatabaseHelper.java
index 1941da1a..0390949c 100644
--- a/src/com/activeandroid/DatabaseHelper.java
+++ b/src/com/activeandroid/DatabaseHelper.java
@@ -59,6 +59,14 @@ public DatabaseHelper(Context context) {
 	// OVERRIDEN METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
+	@Override
+	public void onOpen(SQLiteDatabase db) {
+		if (SQLiteUtils.FOREIGN_KEYS_SUPPORTED) {
+			db.execSQL("PRAGMA foreign_keys=ON;");
+			Log.i("Foreign Keys supported. Enabling foreign key features.");
+		}
+	};
+
 	@Override
 	public void onCreate(SQLiteDatabase db) {
 		if (SQLiteUtils.FOREIGN_KEYS_SUPPORTED) {
@@ -202,4 +210,4 @@ private static int getDbVersion(Context context) {
 
 		return aaVersion;
 	}
-}
\ No newline at end of file
+}
diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 5bcec118..9ad1f0e9 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -21,6 +21,7 @@
 
 import android.content.ContentValues;
 import android.database.Cursor;
+import android.database.DataSetObserver;
 import android.database.sqlite.SQLiteDatabase;
 
 import com.activeandroid.annotation.Column;
@@ -59,7 +60,7 @@ public final Long getId() {
 	}
 
 	public final void delete() {
-		Cache.openDatabase().delete(mTableInfo.getTableName(), "Id=?", new String[] { getId().toString() });
+		Model.delete(getClass(), getId());
 		Cache.removeEntity(this);
 	}
 
@@ -149,18 +150,29 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)){
 		else {
 			db.update(mTableInfo.getTableName(), values, "Id=" + mId, null);
 		}
+
+		mTableInfo.notifyChanged();
 	}
 
 	// Convenience methods
 
 	public static void delete(Class<? extends Model> type, long id) {
 		new Delete().from(type).where("Id=?", id).execute();
+		Cache.getTableInfo(type).notifyChanged();
 	}
 
 	public static <T extends Model> T load(Class<? extends Model> type, long id) {
 		return new Select().from(type).where("Id=?", id).executeSingle();
 	}
 
+	public static void registerDataSetObserver(Class<? extends Model> type, DataSetObserver observer) {
+		Cache.getTableInfo(type).registerObserver(observer);
+	}
+
+	public static void unregisterDataSetObserver(Class<? extends Model> type, DataSetObserver observer) {
+		Cache.getTableInfo(type).unregisterObserver(observer);
+	}
+
 	// Model population
 
 	public final void loadFromCursor(Class<? extends Model> type, Cursor cursor) {
diff --git a/src/com/activeandroid/ModelLoader.java b/src/com/activeandroid/ModelLoader.java
new file mode 100644
index 00000000..7bf794aa
--- /dev/null
+++ b/src/com/activeandroid/ModelLoader.java
@@ -0,0 +1,194 @@
+package com.activeandroid;
+
+import android.content.Context;
+import android.database.DataSetObserver;
+import android.os.Handler;
+import android.support.v4.content.AsyncTaskLoader;
+import com.activeandroid.query.From;
+
+import java.util.List;
+
+/**
+ * The Class ModelLoader.
+ * 
+ * @param <T>
+ *            the generic type
+ */
+public class ModelLoader<T extends Model> extends AsyncTaskLoader<List<T>> {
+
+	/** The m data set observer. */
+	private DataSetObserver mDataSetObserver;
+	
+	/** The m query. */
+	private From mQuery;
+
+	/** The m results. */
+	private List<T> mResults;
+
+	/**
+	 * Instantiates a new model loader.
+	 * 
+	 * @param context
+	 *            the context
+	 * @param from
+	 *            the from
+	 */
+	public ModelLoader(Context context, From from) {
+		super(context);
+		this.mQuery = from;
+	}
+
+	/**
+	 * Called when there is new data to deliver to the client. The super class
+	 * will take care of delivering it; the implementation here just adds a
+	 * little more logic.
+	 * 
+	 * @param toolData
+	 *            the tool data
+	 */
+	@Override
+	public void deliverResult(List<T> toolData) {
+		if (this.isReset()) {
+			// An async query came in while the loader is stopped. We
+			// don't need the result.
+			if (toolData != null) {
+				this.onReleaseResources(toolData);
+			}
+		}
+		List<T> oldToolData = toolData;
+		this.mResults = toolData;
+
+		if (this.isStarted()) {
+			// If the Loader is currently started, we can immediately
+			// deliver its results.
+			super.deliverResult(toolData);
+		}
+
+		// At this point we can release the resources associated with
+		// 'oldApps' if needed; now that the new result is delivered we
+		// know that it is no longer in use.
+		if (oldToolData != null) {
+			this.onReleaseResources(oldToolData);
+		}
+	}
+
+	/**
+	 * This is where the bulk of our work is done. This function is called in a
+	 * background thread and should generate a new set of data to be published
+	 * by the loader.
+	 * 
+	 * @return the list
+	 */
+	@Override
+	public List<T> loadInBackground() {
+		List<T> results = this.mQuery.execute();
+		return results;
+	}
+
+	/**
+	 * Handles a request to cancel a load.
+	 * 
+	 * @param toolData
+	 *            the tool data
+	 */
+	@Override
+	public void onCanceled(List<T> toolData) {
+		super.onCanceled(toolData);
+		// At this point we can release the resources
+		this.onReleaseResources(toolData);
+	}
+
+	/**
+	 * On release resources.
+	 * 
+	 * @param toolData
+	 *            the tool data
+	 */
+	protected void onReleaseResources(List<T> toolData) {
+		// For a simple List<> there is nothing to do. For something
+		// like a Cursor, we would close it here.
+	}
+
+	/**
+	 * Handles a request to completely reset the Loader.
+	 */
+	@Override
+	protected void onReset() {
+		super.onReset();
+
+		// Ensure the loader is stopped
+		this.onStopLoading();
+
+		// At this point we can release the resources associated with 'apps'
+		// if needed.
+		if (this.mResults != null) {
+			this.onReleaseResources(this.mResults);
+			this.mResults = null;
+		}
+
+		// Stop monitoring for changes.
+		if (this.mDataSetObserver != null) {
+			Model.unregisterDataSetObserver(mQuery.getModelType(), this.mDataSetObserver);
+			this.mDataSetObserver = null;
+		}
+	}
+
+	/**
+	 * Handles a request to start the Loader.
+	 */
+	@Override
+	protected void onStartLoading() {
+		if (this.mResults != null) {
+			// If we currently have a result available, deliver it
+			// immediately.
+			this.deliverResult(this.mResults);
+		}
+
+		// Start watching for changes in the job data.
+		if (this.mDataSetObserver == null) {
+			this.mDataSetObserver = new DataSetObserver() {
+				@Override
+				public void onChanged() {
+					super.onChanged();
+					
+					/*
+					 * It's always a freakin' threading issue, ain't it?
+					 * Directly calling onContentChanged here doesn't seem to
+					 * consistently work, but posting it to the main thread does.
+					 */
+					
+					// Get a handler that can be used to post to the main thread
+					Handler mainHandler = new Handler(getContext().getMainLooper());
+
+					Runnable myRunnable = new Runnable() {
+						@Override
+						public void run() {
+							ModelLoader.this.onContentChanged();
+						}
+					};
+					
+					mainHandler.post(myRunnable);
+
+				}
+			};
+
+			Model.registerDataSetObserver(mQuery.getModelType(), this.mDataSetObserver);
+		}
+
+		if (this.takeContentChanged() || (this.mResults == null)) {
+			// If the data has changed since the last time it was loaded
+			// or is not currently available, start a load.
+			this.forceLoad();
+		}
+	}
+
+	/**
+	 * Handles a request to stop the Loader.
+	 */
+	@Override
+	protected void onStopLoading() {
+		// Attempt to cancel the current load task if possible.
+		this.cancelLoad();
+	}
+
+}
diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index 225a838d..f607b966 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -24,11 +24,13 @@
 import java.util.List;
 import java.util.Map;
 
+import android.database.DataSetObservable;
+
 import com.activeandroid.annotation.Column;
 import com.activeandroid.annotation.Table;
 import com.activeandroid.util.Log;
 
-public final class TableInfo {
+public final class TableInfo extends DataSetObservable {
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PRIVATE MEMBERS
 	//////////////////////////////////////////////////////////////////////////////////////
diff --git a/src/com/activeandroid/content/ContentProvider.java b/src/com/activeandroid/content/ContentProvider.java
index d3dbf91e..12433286 100644
--- a/src/com/activeandroid/content/ContentProvider.java
+++ b/src/com/activeandroid/content/ContentProvider.java
@@ -28,7 +28,7 @@
 	// PRIVATE MEMBERS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	private String mAuthority;
+	private final String mAuthority = getContext().getPackageName();
 
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC METHODS
@@ -36,7 +36,6 @@
 
 	@Override
 	public boolean onCreate() {
-	    mAuthority = getContext().getPackageName();
 		ActiveAndroid.initialize((Application) getContext().getApplicationContext());
 
 		List<TableInfo> tableInfos = new ArrayList<TableInfo>(Cache.getTableInfos());
diff --git a/src/com/activeandroid/query/From.java b/src/com/activeandroid/query/From.java
index 4da87d92..7e3bb799 100644
--- a/src/com/activeandroid/query/From.java
+++ b/src/com/activeandroid/query/From.java
@@ -209,4 +209,8 @@ public String toSql() {
 
 		return args;
 	}
+
+	public Class<? extends Model> getModelType() {
+		return mType;
+	}
 }
\ No newline at end of file
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index 8ab6348a..533f97bc 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -122,6 +122,7 @@ public static String createTableDefinition(TableInfo tableInfo) {
 				TextUtils.join(", ", definitions));
 	}
 
+	@SuppressWarnings("unchecked")
 	public static String createColumnDefinition(TableInfo tableInfo, Field field) {
 		String definition = null;
 
@@ -162,7 +163,7 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 			}
 
 			if (FOREIGN_KEYS_SUPPORTED && ReflectionUtils.isModel(type)) {
-				definition += " REFERENCES " + tableInfo.getTableName() + "(Id)";
+				definition += " REFERENCES " + Cache.getTableInfo((Class<? extends Model>) type).getTableName() + "(Id)";
 				definition += " ON DELETE " + column.onDelete().toString().replace("_", " ");
 				definition += " ON UPDATE " + column.onUpdate().toString().replace("_", " ");
 			}
@@ -175,7 +176,7 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 	}
 
 	@SuppressWarnings("unchecked")
-	public static <T extends Model> List<T> processCursor(Class<? extends Model> type, Cursor cursor) {
+	private static <T extends Model> List<T> processCursor(Class<? extends Model> type, Cursor cursor) {
 		final List<T> entities = new ArrayList<T>();
 
 		try {
diff --git a/src/com/activeandroid/widget/ModelAdapter.java b/src/com/activeandroid/widget/ModelAdapter.java
index 70e59913..2b6544cf 100644
--- a/src/com/activeandroid/widget/ModelAdapter.java
+++ b/src/com/activeandroid/widget/ModelAdapter.java
@@ -1,6 +1,5 @@
 package com.activeandroid.widget;
 
-import java.util.Collection;
 import java.util.List;
 
 import android.content.Context;
@@ -9,49 +8,51 @@
 import com.activeandroid.Model;
 
 public class ModelAdapter<T extends Model> extends ArrayAdapter<T> {
-	public ModelAdapter(Context context, int textViewResourceId) {
-		super(context, textViewResourceId);
-	}
-
-	public ModelAdapter(Context context, int resource, int textViewResourceId) {
-		super(context, resource, textViewResourceId);
-	}
-
-	public ModelAdapter(Context context, int textViewResourceId, List<T> objects) {
-		super(context, textViewResourceId, objects);
-	}
-
-	public ModelAdapter(Context context, int resource, int textViewResourceId, List<T> objects) {
-		super(context, resource, textViewResourceId, objects);
-	}
-
-	/**
-	 * Clears the adapter and, if data != null, fills if with new Items.
-	 * 
-	 * @param collection A Collection<? extends T> which members get added to the adapter.
-	 */
-	public void setData(Collection<? extends T> collection) {
-		clear();
-
-		if (collection != null) {
-			for (T item : collection) {
-				add(item);
-			}
-		}
-	}
-
-	/**
-	 * @return The Id of the record at position.
-	 */
-	@Override
-	public long getItemId(int position) {
-		T item = getItem(position);
-
-		if (item != null) {
-			return item.getId();
-		}
-		else {
-			return -1;
-		}
-	}
+
+    public ModelAdapter(Context context, int textViewResourceId) {
+        super(context, textViewResourceId);
+    }
+
+    public ModelAdapter(Context context, int resource,
+                        int textViewResourceId) {
+        super(context, resource, textViewResourceId);
+    }
+
+    public ModelAdapter(Context context, int textViewResourceId,
+                        List<T> objects) {
+        super(context, textViewResourceId, objects);
+    }
+
+    public ModelAdapter(Context context, int resource,
+                        int textViewResourceId, List<T> objects) {
+        super(context, resource, textViewResourceId, objects);
+    }
+
+    /**
+     * Clears the adapter and, if data != null, fills if with new Items.
+     *
+     * @param data A List<T> which members get added to the adapter.
+     */
+    public void setData(List<T> data) {
+        clear();
+        if (data != null) {
+            for (T t : data) {
+                add(t);
+            }
+        }
+    }
+
+    /**
+     * @throws RuntimeException If no record is found.
+     * @return The Id of the record at position.
+     */
+    @Override
+    public long getItemId(int position) {
+        T t = this.getItem(position);
+        if (t!=null)
+            return t.getId();
+        else
+            throw new RuntimeException("ItemNotfound");
+    }
+
 }
\ No newline at end of file
