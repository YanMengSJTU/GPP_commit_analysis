diff --git a/proactiveandroid/build.gradle b/proactiveandroid/build.gradle
index 0d4d62c0..5a3eca05 100644
--- a/proactiveandroid/build.gradle
+++ b/proactiveandroid/build.gradle
@@ -14,7 +14,7 @@ ext {
     siteUrl = 'https://github.com/RileyGB/ProactiveAndroid'
     gitUrl = 'https://github.com/RileyGB/ProactiveAndroid.git'
 
-    libraryVersion = '0.1'
+    libraryVersion = '0.2'
 
     developerId = 'rackerman'
     developerName = 'Riley Ackerman'
diff --git a/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/Model.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/Model.java
index c97ba2c0..d6eb419a 100644
--- a/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/Model.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/Model.java
@@ -42,42 +42,46 @@
 	// PRIVATE MEMBERS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	private Long mId = null;
+    private Long id = null;
 
-	private final TableInfo mTableInfo;
-	private final String idName;
+    private final TableInfo tableInfo;
+    private final String idName;
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
 
 	public Model() {
-		mTableInfo = Cache.getTableInfo(getClass());
-		idName = mTableInfo.getIdName();
-	}
+        tableInfo = Cache.getTableInfo(getClass());
+        idName = tableInfo.getIdName();
+    }
 
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
 	public final Long getId() {
-		return mId;
-	}
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
 
 	public final void delete() {
-		Cache.openDatabase().delete(mTableInfo.getTableName(), idName+"=?", new String[] { getId().toString() });
-		Cache.removeEntity(this);
+        Cache.openDatabase().delete(tableInfo.getTableName(), idName + "=?", new String[]{getId().toString()});
+        Cache.removeEntity(this);
 
 		Cache.getContext().getContentResolver()
-				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mId), null);
-	}
+                .notifyChange(ContentProvider.createUri(tableInfo.getType(), id), null);
+    }
 
 	public final Long save() {
 		final SQLiteDatabase db = Cache.openDatabase();
 		final ContentValues values = new ContentValues();
 
-		for (Field field : mTableInfo.getFields()) {
-			final String fieldName = mTableInfo.getColumnName(field);
-			Class<?> fieldType = field.getType();
+        for (Field field : tableInfo.getFields()) {
+            final String fieldName = tableInfo.getColumnName(field);
+            Class<?> fieldType = field.getType();
 
 			field.setAccessible(true);
 
@@ -151,17 +155,17 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 			}
 		}
 
-		if (mId == null) {
-			mId = db.insert(mTableInfo.getTableName(), null, values);
-		}
+        if (id == null) {
+            id = db.insert(tableInfo.getTableName(), null, values);
+        }
 		else {
-			db.update(mTableInfo.getTableName(), values, idName+"=" + mId, null);
-		}
+            db.update(tableInfo.getTableName(), values, idName + "=" + id, null);
+        }
 
 		Cache.getContext().getContentResolver()
-				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mId), null);
-		return mId;
-	}
+                .notifyChange(ContentProvider.createUri(tableInfo.getType(), id), null);
+        return id;
+    }
 
 	// Convenience methods
 
@@ -183,9 +187,9 @@ public final void loadFromCursor(Cursor cursor) {
          * when the cursor have multiple columns with same name obtained from join tables.
          */
         List<String> columnsOrdered = new ArrayList<String>(Arrays.asList(cursor.getColumnNames()));
-		for (Field field : mTableInfo.getFields()) {
-			final String fieldName = mTableInfo.getColumnName(field);
-			Class<?> fieldType = field.getType();
+        for (Field field : tableInfo.getFields()) {
+            final String fieldName = tableInfo.getColumnName(field);
+            Class<?> fieldType = field.getType();
 			final int columnIndex = columnsOrdered.indexOf(fieldName);
 
 			if (columnIndex < 0) {
@@ -276,8 +280,8 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 			}
 		}
 
-		if (mId != null) {
-			Cache.addEntity(this);
+        if (id != null) {
+            Cache.addEntity(this);
 		}
 	}
 
@@ -295,17 +299,17 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 
 	@Override
 	public String toString() {
-		return mTableInfo.getTableName() + "@" + getId();
-	}
+        return tableInfo.getTableName() + "@" + getId();
+    }
 
 	@Override
 	public boolean equals(Object obj) {
-		if (obj instanceof Model && this.mId != null) {
-			final Model other = (Model) obj;
+        if (obj instanceof Model && this.id != null) {
+            final Model other = (Model) obj;
 
-			return this.mId.equals(other.mId)							
-							&& (this.mTableInfo.getTableName().equals(other.mTableInfo.getTableName()));
-		} else {
+            return this.id.equals(other.id)
+                    && (this.tableInfo.getTableName().equals(other.tableInfo.getTableName()));
+        } else {
 			return this == obj;
 		}
 	}
@@ -313,8 +317,8 @@ public boolean equals(Object obj) {
 	@Override
 	public int hashCode() {
 		int hash = HASH_PRIME;
-		hash += HASH_PRIME * (mId == null ? super.hashCode() : mId.hashCode()); //if id is null, use Object.hashCode()
-		hash += HASH_PRIME * mTableInfo.getTableName().hashCode();
-		return hash; //To change body of generated methods, choose Tools | Templates.
+        hash += HASH_PRIME * (id == null ? super.hashCode() : id.hashCode()); //if id is null, use Object.hashCode()
+        hash += HASH_PRIME * tableInfo.getTableName().hashCode();
+        return hash; //To change body of generated methods, choose Tools | Templates.
 	}
 }
