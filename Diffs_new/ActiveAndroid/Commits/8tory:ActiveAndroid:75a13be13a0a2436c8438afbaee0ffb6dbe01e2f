diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 4a0b0736..b47ad7ad 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -113,9 +113,8 @@ public ContentValues toContentValues() {
 		for (Field field : mTableInfo.getFields()) {
 			final String fieldName = mTableInfo.getColumnName(field);
 			Class<?> fieldType = field.getType();
-			final Column column = field.getAnnotation(Column.class);
 
-			if (column.readOnly())
+			if (mTableInfo.isReadOnlyColumn(fieldName))
 				continue;
 
 			field.setAccessible(true);
diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index 40a5b7b4..452a359b 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -37,6 +37,8 @@
 	private String mTableName;
 
 	private Map<Field, String> mColumnNames = new HashMap<Field, String>();
+	private Map<String, Column> mColumns = new HashMap<String, Column>();
+	private Map<String, Boolean> mReadOnlyColumns = new HashMap<String, Boolean>();
 
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
@@ -71,6 +73,8 @@ public TableInfo(Class<? extends Model> type) {
 					fieldName = field.getName();
 				}
 				mColumnNames.put(field, fieldName);
+				mColumns.put(fieldName, columnAnnotation);
+				mReadOnlyColumns.put(fieldName, columnAnnotation.readOnly());
 			}
 		}
 	}
@@ -95,6 +99,13 @@ public String getColumnName(Field field) {
 		return mColumnNames.get(field);
 	}
 
+	public Column getColumn(String name) {
+		return mColumns.get(name);
+	}
+
+	public boolean isReadOnlyColumn(String name) {
+		return mReadOnlyColumns.get(name);
+	}
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PRIVATE METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
