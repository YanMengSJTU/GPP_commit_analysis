diff --git a/src/main/java/com/activeandroid/Model.java b/src/main/java/com/activeandroid/Model.java
index 017020ee..ec260f1f 100644
--- a/src/main/java/com/activeandroid/Model.java
+++ b/src/main/java/com/activeandroid/Model.java
@@ -44,7 +44,6 @@ public Model() {
 		mTableInfo = Cache.getTableInfo(getClass());
 	}
 
-    @PrimaryKey(type = PrimaryKey.Type.AUTO_INCREMENT)
     private long mId;
 
     /**
diff --git a/src/main/java/com/activeandroid/util/SQLiteUtils.java b/src/main/java/com/activeandroid/util/SQLiteUtils.java
index cb7cc2c6..ac5c8e12 100644
--- a/src/main/java/com/activeandroid/util/SQLiteUtils.java
+++ b/src/main/java/com/activeandroid/util/SQLiteUtils.java
@@ -17,6 +17,7 @@
  */
 
 import android.content.ContentValues;
+import android.content.Context;
 import android.database.Cursor;
 import android.database.DatabaseUtils;
 import android.database.sqlite.SQLiteDatabase;
@@ -435,6 +436,12 @@ public static void save(IModel IModel, int mode){
         final ContentValues values = new ContentValues();
 
         for (Field field : tableInfo.getFields()) {
+            PrimaryKey primaryKey = field.getAnnotation(PrimaryKey.class);
+
+            // skip autoincrement
+            if(primaryKey != null && primaryKey.type().equals(PrimaryKey.Type.AUTO_INCREMENT)) {
+                continue;
+            }
             String fieldName = tableInfo.getColumnName(field);
             Class<?> fieldType = field.getType();
 
@@ -532,10 +539,14 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
                 if(field.isAnnotationPresent(PrimaryKey.class) &&
                         field.getAnnotation(PrimaryKey.class).type().equals(PrimaryKey.Type.AUTO_INCREMENT)){
                     field.setAccessible(true);
-                    try {
-                        field.set(IModel, id);
-                    } catch (Throwable e) {
-                        throw new RuntimeException(e);
+                    if(field.getType().isAssignableFrom(Long.class) || field.getType().isAssignableFrom(long.class)) {
+                        try {
+                            field.set(IModel, id);
+                        } catch (Throwable e) {
+                            throw new RuntimeException(e);
+                        }
+                    } else {
+                        throw new IllegalArgumentException("Autoincrementing field " + field.getName() + " must be a long");
                     }
                 }
             }
