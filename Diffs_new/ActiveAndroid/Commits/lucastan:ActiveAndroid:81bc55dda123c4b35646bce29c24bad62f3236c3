diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index b9616c75..d721f162 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -16,6 +16,8 @@
  * limitations under the License.
  */
 
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.support.v4.util.SimpleArrayMap;
 import android.text.TextUtils;
 
@@ -48,18 +50,29 @@
         }
     }
 
+    @NonNull
     private final Class<? extends Model> mType;
+
+    @NonNull
     private final String mTableName;
+
+    @NonNull
     private final Index[] mIndexes;
+
+    @NonNull
     private final String mIdName;
+
+    @NonNull
     private final List<Field> mFields;
+
+    @NonNull
     private final SimpleArrayMap<Field, String> mColumnNames = new SimpleArrayMap<Field, String>();
 
     //////////////////////////////////////////////////////////////////////////////////////
     // CONSTRUCTORS
     //////////////////////////////////////////////////////////////////////////////////////
 
-    public TableInfo(Class<? extends Model> type) {
+    public TableInfo(@NonNull Class<? extends Model> type) {
         if (!Model.class.isAssignableFrom(type))
             throw new IllegalArgumentException("type must inherit from Model");
 
@@ -100,22 +113,27 @@ public TableInfo(Class<? extends Model> type) {
     // PUBLIC METHODS
     //////////////////////////////////////////////////////////////////////////////////////
 
+    @NonNull
     public Class<? extends Model> getType() {
         return mType;
     }
 
+    @NonNull
     public Index[] getIndexes(){
         return mIndexes;
     }
 
+    @NonNull
     public String getTableName() {
         return mTableName;
     }
 
+    @NonNull
     public String getIdName() {
         return mIdName;
     }
 
+    @NonNull
     public Field getIdField() {
         return idField;
     }
@@ -124,10 +142,12 @@ public Field getIdField() {
      * Get all fields with the {@link Column} annotation, except for the ID field
      * which has no such annotation.
      */
+    @NonNull
     public Collection<Field> getFields() {
         return mFields;
     }
 
+    @Nullable
     public String getColumnName(Field field) {
         return mColumnNames.get(field);
     }
diff --git a/src/com/activeandroid/query/Select.java b/src/com/activeandroid/query/Select.java
index 1d4c6488..8ae4160a 100644
--- a/src/com/activeandroid/query/Select.java
+++ b/src/com/activeandroid/query/Select.java
@@ -59,8 +59,8 @@ public From from(Class<? extends Model> table) {
 	}
 
 	public static class Column {
-		String name;
-		String alias;
+		final String name;
+		final String alias;
 
 		public Column(String name, String alias) {
 			this.name = name;
@@ -82,7 +82,8 @@ else if (mAll) {
 		}
 
 		if (mColumns != null && mColumns.length > 0) {
-			sql.append(TextUtils.join(", ", mColumns) + " ");
+			sql.append(TextUtils.join(", ", mColumns));
+			sql.append(" ");
 		}
 		else {
 			sql.append("* ");
@@ -90,4 +91,4 @@ else if (mAll) {
 
 		return sql.toString();
 	}
-}
\ No newline at end of file
+}
diff --git a/src/com/activeandroid/query/Update.java b/src/com/activeandroid/query/Update.java
index a69d2d8e..4f53517f 100644
--- a/src/com/activeandroid/query/Update.java
+++ b/src/com/activeandroid/query/Update.java
@@ -20,7 +20,7 @@
 import com.activeandroid.Model;
 
 public final class Update implements Sqlable {
-	private Class<? extends Model> mType;
+	private final Class<? extends Model> mType;
 
 	public Update(Class<? extends Model> table) {
 		mType = table;
