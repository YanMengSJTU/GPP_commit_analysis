diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 715fe7b9..9fa36bc2 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -110,9 +110,6 @@ private ContentValues createContentValues() {
         catch (IllegalAccessException e) {
             Log.e(e.getClass().getName(), e);
         }
-        catch (InvocationTargetException e) {
-            Log.e(e.getClass().getName(), e);
-        }
 	    
         return values;
 	}
@@ -298,9 +295,6 @@ public final void loadFromCursor(Cursor cursor) {
         catch (IllegalAccessException e) {
             Log.e(e.getClass().getName(), e);
         }
-        catch (InvocationTargetException e) {
-            Log.e(e.getClass().getName(), e);
-        }
 	}
 
 	//////////////////////////////////////////////////////////////////////////////////////
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index af2bcefa..9b23a7dc 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -36,17 +36,24 @@
 import com.activeandroid.serializer.TypeSerializer;
 
 public final class SQLiteUtils {
+    private static final int TYPE_BYTE = 0;
+    private static final int TYPE_SHORT = 1;
+    private static final int TYPE_INT = 2;
+    private static final int TYPE_LONG = 3;
+    private static final int TYPE_BOOL = 4;
+    private static final int TYPE_FLOAT = 5;
+    private static final int TYPE_DOUBLE = 6;
+    private static final int TYPE_BLOB = 7;
+    private static final int TYPE_CHAR = 8;
+    private static final int TYPE_STRING = 9;
+    
     private static final class TypeInfo {
         final SQLiteType type;
-        final Class<?> putClass;
-        final String cursorGetMethodName;
-        Method contentValuesPutMethod;
-        Method cursorGetMethod;
+        final int typeFlag;
         
-        public TypeInfo(SQLiteType type, Class<?> putClass, String cursorGetMethodName) {
+        public TypeInfo(SQLiteType type, int typeFlag) {
             this.type = type;
-            this.putClass = putClass;
-            this.cursorGetMethodName = cursorGetMethodName;
+            this.typeFlag = typeFlag;
         }
     }
     
@@ -71,37 +78,25 @@ public TypeInfo(SQLiteType type, Class<?> putClass, String cursorGetMethodName)
 	@SuppressWarnings("serial")
 	private static final HashMap<Class<?>, TypeInfo> TYPE_MAP = new HashMap<Class<?>, TypeInfo>() {
 		{
-			put(byte.class, new TypeInfo(SQLiteType.INTEGER, Byte.class, "getInt"));
-			put(short.class, new TypeInfo(SQLiteType.INTEGER, Short.class, "getInt"));
-			put(int.class, new TypeInfo(SQLiteType.INTEGER, Integer.class, "getInt"));
-			put(long.class, new TypeInfo(SQLiteType.INTEGER, Long.class, "getLong"));
-			put(float.class, new TypeInfo(SQLiteType.REAL, Float.class, "getFloat"));
-			put(double.class, new TypeInfo(SQLiteType.REAL, Double.class, "getDouble"));
-			put(boolean.class, new TypeInfo(SQLiteType.INTEGER, Boolean.class, "getInt"));
-			put(char.class, new TypeInfo(SQLiteType.TEXT, String.class, "getString"));
-			put(byte[].class, new TypeInfo(SQLiteType.BLOB, byte[].class, "getBlob"));
-			put(Byte.class, new TypeInfo(SQLiteType.INTEGER, Byte.class, "getInt"));
-			put(Short.class, new TypeInfo(SQLiteType.INTEGER, Short.class, "getInt"));
-			put(Integer.class, new TypeInfo(SQLiteType.INTEGER, Integer.class, "getInt"));
-			put(Long.class, new TypeInfo(SQLiteType.INTEGER, Long.class, "getLong"));
-			put(Float.class, new TypeInfo(SQLiteType.REAL, Float.class, "getFloat"));
-			put(Double.class, new TypeInfo(SQLiteType.REAL, Double.class, "getDouble"));
-			put(Boolean.class, new TypeInfo(SQLiteType.INTEGER, Boolean.class, "getInt"));
-			put(Character.class, new TypeInfo(SQLiteType.TEXT, String.class, "getString"));
-			put(String.class, new TypeInfo(SQLiteType.TEXT, String.class, "getString"));
-			put(Byte[].class, new TypeInfo(SQLiteType.BLOB, byte[].class, "getBlob"));
-			
-			
-			for (Map.Entry<Class<?>, TypeInfo> e : entrySet()) {
-			    TypeInfo t = e.getValue();
-			    try {
-			        t.cursorGetMethod = Cursor.class.getMethod(t.cursorGetMethodName, Integer.class);
-			        t.contentValuesPutMethod = ContentValues.class.getMethod("put", String.class, t.putClass);
-			    }
-			    catch (NoSuchMethodException ex) {
-			        throw new RuntimeException(ex);
-			    }
-			}
+			put(byte.class, new TypeInfo(SQLiteType.INTEGER, TYPE_BYTE));
+			put(short.class, new TypeInfo(SQLiteType.INTEGER, TYPE_SHORT));
+			put(int.class, new TypeInfo(SQLiteType.INTEGER, TYPE_INT));
+			put(long.class, new TypeInfo(SQLiteType.INTEGER, TYPE_LONG));
+			put(float.class, new TypeInfo(SQLiteType.REAL, TYPE_FLOAT));
+			put(double.class, new TypeInfo(SQLiteType.REAL, TYPE_DOUBLE));
+			put(boolean.class, new TypeInfo(SQLiteType.INTEGER, TYPE_BOOL));
+			put(char.class, new TypeInfo(SQLiteType.TEXT, TYPE_CHAR));
+			put(byte[].class, new TypeInfo(SQLiteType.BLOB, TYPE_BLOB));
+			put(Byte.class, get(byte.class));
+			put(Short.class, get(short.class));
+			put(Integer.class, get(int.class));
+			put(Long.class, get(long.class));
+			put(Float.class, get(float.class));
+			put(Double.class, get(double.class));
+			put(Boolean.class, get(boolean.class));
+			put(Character.class, get(char.class));
+			put(String.class, new TypeInfo(SQLiteType.TEXT, TYPE_STRING));
+			put(Byte[].class, get(byte[].class));
 		}
 	};
 
@@ -117,61 +112,101 @@ public TypeInfo(SQLiteType type, Class<?> putClass, String cursorGetMethodName)
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	public static void put(ContentValues values, Class<?> fieldType, String fieldName, Object value) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
+	public static void put(ContentValues values, Class<?> fieldType, String fieldName, Object value) {
 	    if (value == null) {
             values.putNull(fieldName);
+            return;
         }
-        else if (fieldType.equals(Character.class) || fieldType.equals(char.class)) {
-            values.put(fieldName, value.toString());
-        }
-        else {
-            TypeInfo typeInfo = TYPE_MAP.get(fieldType);
-            if (typeInfo != null) {
-                typeInfo.contentValuesPutMethod.invoke(values, fieldName, typeInfo.putClass.cast(value));
-            }
-            else if (ReflectionUtils.isModel(fieldType)) {
+	    
+        TypeInfo typeInfo = TYPE_MAP.get(fieldType);
+        if (typeInfo == null) {
+            if (ReflectionUtils.isModel(fieldType)) {
                 values.put(fieldName, ((Model) value).getId());
             }
             else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
                 values.put(fieldName, ((Enum<?>) value).name());
-            }   
+            }
+            return;
+        }
+        
+        switch (typeInfo.typeFlag) {
+        case TYPE_BYTE:
+            values.put(fieldName, (Byte) value);
+            break;
+        case TYPE_SHORT:
+            values.put(fieldName, (Short) value);
+            break;
+        case TYPE_INT:
+            values.put(fieldName, (Integer) value);
+            break;
+        case TYPE_LONG:
+            values.put(fieldName, (Long) value);
+            break;
+        case TYPE_FLOAT:
+            values.put(fieldName, (Float) value);
+            break;
+        case TYPE_DOUBLE:
+            values.put(fieldName, (Double) value);
+            break;
+        case TYPE_BOOL:
+            values.put(fieldName, (Boolean) value);
+            break;
+        case TYPE_CHAR:
+        case TYPE_STRING:
+            values.put(fieldName, value.toString());
+            break;
+        case TYPE_BLOB:
+            values.put(fieldName, (byte[]) value);
+            break;
         }
 	}
 	
-	public static Object get(Cursor cursor, Class<?> fieldType, int columnIndex) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {
-	    if (fieldType.equals(Boolean.class) || fieldType.equals(boolean.class)) {
-	        return cursor.getInt(columnIndex) != 0;
+	public static Object get(Cursor cursor, Class<?> fieldType, int columnIndex) {
+	    TypeInfo typeInfo = TYPE_MAP.get(fieldType);
+	    if (typeInfo == null) {
+	        if (ReflectionUtils.isModel(fieldType)) {
+	            final long entityId = cursor.getLong(columnIndex);
+	            @SuppressWarnings("unchecked")
+	            final Class<? extends Model> entityType = (Class<? extends Model>) fieldType;
+
+	            Model entity = Cache.getEntity(entityType, entityId);
+	            if (entity == null) {
+	                entity = new Select().from(entityType).where(Cache.getTableInfo(entityType).getIdName()+"=?", entityId).executeSingle();
+	            }
+	            return entity;
+	        }
+	        
+	        if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
+	            @SuppressWarnings({"rawtypes", "unchecked"})
+	            final Class<? extends Enum> enumType = (Class<? extends Enum>) fieldType;
+	            @SuppressWarnings("unchecked")
+	            Object o = Enum.valueOf(enumType, cursor.getString(columnIndex));
+	            return o;
+	        }
 	    }
 	    
-	    if (fieldType.equals(Character.class) || fieldType.equals(char.class)) {
+	    switch (typeInfo.typeFlag) {
+        case TYPE_BYTE:
+            return (byte) cursor.getInt(columnIndex);
+        case TYPE_SHORT:
+            return (short) cursor.getInt(columnIndex);
+        case TYPE_INT:
+            return cursor.getInt(columnIndex);
+        case TYPE_LONG:
+            return cursor.getLong(columnIndex);
+        case TYPE_FLOAT:
+            return cursor.getFloat(columnIndex);
+        case TYPE_DOUBLE:
+            return cursor.getDouble(columnIndex);
+        case TYPE_BOOL:
+            return 0 != cursor.getInt(columnIndex);
+        case TYPE_CHAR:
             return cursor.getString(columnIndex).charAt(0);
+        case TYPE_STRING:
+            return cursor.getString(columnIndex);
+        case TYPE_BLOB:
+            return cursor.getBlob(columnIndex);
         }
-	    
-	    TypeInfo typeInfo = TYPE_MAP.get(fieldType);
-	    if (typeInfo != null)
-	        return typeInfo.cursorGetMethod.invoke(cursor, columnIndex);
-	    
-        if (ReflectionUtils.isModel(fieldType)) {
-            final long entityId = cursor.getLong(columnIndex);
-            @SuppressWarnings("unchecked")
-            final Class<? extends Model> entityType = (Class<? extends Model>) fieldType;
-
-            Model entity = Cache.getEntity(entityType, entityId);
-            if (entity == null) {
-                entity = new Select().from(entityType).where(Cache.getTableInfo(entityType).getIdName()+"=?", entityId).executeSingle();
-            }
-
-            return entity;
-        }
-        
-        if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
-            @SuppressWarnings({"rawtypes", "unchecked"})
-            final Class<? extends Enum> enumType = (Class<? extends Enum>) fieldType;
-            @SuppressWarnings("unchecked")
-            Object o = Enum.valueOf(enumType, cursor.getString(columnIndex));
-            return o;
-        }
-	    
 	    return null;
 	}
 	
