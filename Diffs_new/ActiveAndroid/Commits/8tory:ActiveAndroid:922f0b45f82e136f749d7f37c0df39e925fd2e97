diff --git a/src/com/activeandroid/DatabaseHelper.java b/src/com/activeandroid/DatabaseHelper.java
index 5c09bcc4..4f3800d6 100755
--- a/src/com/activeandroid/DatabaseHelper.java
+++ b/src/com/activeandroid/DatabaseHelper.java
@@ -61,6 +61,7 @@ public DatabaseHelper(Configuration configuration) {
 	@Override
 	public void onOpen(SQLiteDatabase db) {
 		executePragmas(db);
+		//executeAlter(db);
 	};
 
 	@Override
@@ -71,6 +72,7 @@ public void onCreate(SQLiteDatabase db) {
 		executeCreate(db); // Maybe droped tables after mirgation
 		executeCreateIndex(db);
 		executeCreateVirtualTable(db);
+		//executeAlter(db);
 	}
 
 	@Override
@@ -81,6 +83,7 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
 		executeCreate(db);
 		executeCreateIndex(db);
 		executeCreateVirtualTable(db);
+		//executeAlter(db);
 	}
 
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -154,16 +157,10 @@ private void executeCreate(SQLiteDatabase db) {
 		db.beginTransaction();
 		try {
 			for (TableInfo tableInfo : Cache.getTableInfos()) {
-				String toSql = SQLiteUtils.createTableDefinition(tableInfo);
-				tableInfo.setSchema(toSql);
-				if (android.text.TextUtils.isEmpty(toSql)) continue;
-				alterColumnsIfNeed(tableInfo);
-				/*
-				 * TODO
-				 * alter if need
-				String schemaFrom = SQLiteUtils.getSchema(tableInfo);
-				*/
-				db.execSQL(toSql);
+				String sql = SQLiteUtils.createTableDefinition(tableInfo);
+				if (android.text.TextUtils.isEmpty(sql)) continue;
+				tableInfo.setSchema(sql);
+				db.execSQL(sql);
 			}
 			db.setTransactionSuccessful();
 		}
@@ -179,9 +176,39 @@ private void executeCreateVirtualTable(SQLiteDatabase db) {
 				if (Build.VERSION.SDK_INT <= 10) {
 					if (existsTable(db, tableInfo)) continue;
 				}
-				String toSql = SQLiteUtils.createVirtualTableDefinition(tableInfo);
-				if (android.text.TextUtils.isEmpty(toSql)) continue;
-				db.execSQL(toSql);
+                                // if (existsTable(db, tableInfo)) SQLiteUtils.drop(tableInfo);
+				String sql = SQLiteUtils.createVirtualTableDefinition(tableInfo);
+				if (android.text.TextUtils.isEmpty(sql)) continue;
+				tableInfo.setSchema(sql);
+				db.execSQL(sql);
+			}
+			db.setTransactionSuccessful();
+		}
+		finally {
+			db.endTransaction();
+		}
+	}
+
+	/**
+	 * After {@link TableInfo#setSchema} with {@link #executeCreate} and {@link #executeCreateVirtualTable}
+	 */
+	private void executeAlter(SQLiteDatabase db) {
+		db.beginTransaction();
+		try {
+			for (TableInfo tableInfo : Cache.getTableInfos()) {
+				if (android.text.TextUtils.isEmpty(tableInfo.getSchema())) {
+					String schema = SQLiteUtils.createTableDefinition(tableInfo);
+					if (android.text.TextUtils.isEmpty(schema)) {
+						schema = SQLiteUtils.createVirtualTableDefinition(tableInfo);
+					}
+					if (android.text.TextUtils.isEmpty(schema)) continue;
+					tableInfo.setSchema(schema);
+				}
+				if (android.text.TextUtils.isEmpty(tableInfo.getSchema())) continue;
+				String sql = SQLiteUtils.createAlterDefinition(db, tableInfo);
+				if (android.text.TextUtils.isEmpty(sql)) continue;
+				Log.d("alterSql: " + sql);
+				db.execSQL(sql);
 			}
 			db.setTransactionSuccessful();
 		}
@@ -216,64 +243,6 @@ private void executeDrop(SQLiteDatabase db) {
 		}
 	}
 
-	/**
-	 * TODO
-	 */
-	private boolean alterColumnsIfNeed(TableInfo tableInfo) {
-		return false;
-	}
-
-	/**
-	 * TODO
-	 */
-	private boolean alterColumnsIfNeed(String table, String toSql, String fromSql) {
-		//List<String> toColumns = getColumns(toSql);
-		//List<String> fromColumns = getColumns(fromSql);
-		return false;
-	}
-
-	/*
-	private boolean addColumnsIfNeed(String table, String to, String from) {
-		try {
-			// if change name of column or add new column, or delete
-			boolean isAddNewColumn = false;
-
-			if (from.contains(table)) {
-				List<String> fromColumns = Arrays.asList(from.
-						replace(String.format(
-								SimpleConstants.SQL_CREATE_TABLE, table), SimpleConstants.EMPTY).
-						replace(SimpleConstants.LAST_BRACKET, SimpleConstants.EMPTY).
-						split(SimpleConstants.DIVIDER_WITH_SPACE));
-
-				List<String> toColumns = Arrays.asList(to.
-						replace(String.format(
-								SimpleConstants.SQL_CREATE_TABLE_IF_NOT_EXIST, table), SimpleConstants.EMPTY).
-						replace(SimpleConstants.LAST_BRACKET, SimpleConstants.EMPTY).
-						split(SimpleConstants.DIVIDER_WITH_SPACE));
-
-				List<String> extraColumns = new ArrayList<String>(toColumns);
-				extraColumns.removeAll(fromColumns);
-
-				if (extraColumns.size() > 0) {
-
-					SQLiteDatabase database = sqLiteSimpleHelper.getWritableDatabase();
-					for (String column : extraColumns) {
-						database.execSQL(String.format(
-									SimpleConstants.SQL_ALTER_TABLE_ADD_COLUMN, table, column));
-					}
-					database.close();
-					isAddNewColumn = true;
-				}
-			}
-
-			return isAddNewColumn;
-
-		} catch (IndexOutOfBoundsException exception) {
-			throw new RuntimeException("Duplicated class on method create(...)");
-		}
-	}
-	*/
-
 	private boolean executeMigrations(SQLiteDatabase db, int oldVersion, int newVersion) {
 		boolean migrationExecuted = false;
 		int currentVersion = oldVersion;
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index d6d95840..bf4201dc 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -19,6 +19,7 @@
 import android.annotation.SuppressLint;
 import android.content.ContentValues;
 import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
 import android.os.Build;
 import android.os.Looper;
 import android.text.TextUtils;
@@ -31,12 +32,14 @@
 import com.activeandroid.annotation.Column.ConflictAction;
 import com.activeandroid.annotation.Table;
 import com.activeandroid.serializer.TypeSerializer;
+import com.activeandroid.util.Log;
 import com.novoda.notils.cursor.CursorList;
 import com.novoda.notils.cursor.SimpleCursorList;
 import com.novoda.notils.cursor.SmartCursorWrapper;
 
 import java.lang.reflect.Field;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -146,7 +149,11 @@ public static void rename(Class<? extends Model> from, Class<? extends Model> to
 	}
 
 	public static void drop(Class<? extends Model> type) {
-		execSql("DROP TABLE IF EXISTS " + Cache.getTableInfo(type).getTableName());
+		drop(Cache.getTableInfo(type));
+	}
+
+	public static void drop(TableInfo tableInfo) {
+		execSql("DROP TABLE IF EXISTS " + tableInfo.getTableName());
 	}
 
 	public static <T extends Model> CursorList<T> rawQuery(Class<? extends Model> type, String sql, String[] selectionArgs) {
@@ -279,13 +286,13 @@ public static Cursor query(String table, String[] projection, String selection,
 		return definitions.toArray(new String[definitions.size()]);
 	}
 
-	public static String getSchema(TableInfo tableInfo) {
-		return getSchema(tableInfo.getTableName());
+	public static String getSchema(SQLiteDatabase db, TableInfo tableInfo) {
+		return getSchema(db, tableInfo.getTableName());
 	}
 
-	public static String getSchema(String table) {
-		Cursor cursor = Cache.openDatabase().rawQuery(
-				"SELECT sql FROM sqlite_master WHERE type='" + table + "'", null);
+	public static String getSchema(SQLiteDatabase db, String tableName) {
+		Cursor cursor = db.rawQuery(
+				"SELECT sql FROM sqlite_master WHERE type='table' and name='" + tableName + "'", null);
 		String schema = null;
 		try {
 			if (cursor.moveToFirst()) {
@@ -297,13 +304,101 @@ public static String getSchema(String table) {
 		return schema;
 	}
 
-	public static List<String> getColumns(TableInfo tableInfo) {
-		return getColumns(getSchema(tableInfo));
+	/**
+	 * TODO
+	 */
+	public static String createAlterDefinition(SQLiteDatabase db, TableInfo tableInfo) {
+		String fromSql = getSchema(db, tableInfo);
+		Log.d("name: " + tableInfo.getTableName());
+		if (TextUtils.isEmpty(fromSql)) return null;
+		Log.d("fromSql: " + fromSql);
+		String toSql = tableInfo.getSchema();
+		if (TextUtils.isEmpty(toSql)) return null;
+		Log.d("toSql: " + toSql);
+		List<String> fromColumns = getColumns(tableInfo, fromSql);
+		if (fromColumns == null || fromColumns.isEmpty()) return null;
+		List<String> toColumns = getColumns(tableInfo, toSql);
+		if (fromColumns == null || fromColumns.isEmpty()) return null;
+		Log.d("toCols: " + java.util.Arrays.deepToString(toColumns.toArray()));
+		Log.d("fromCols: " + java.util.Arrays.deepToString(fromColumns.toArray()));
+		List<String> extraColumns = new ArrayList<String>(toColumns);
+		extraColumns.removeAll(fromColumns);
+		Log.d("extCols: " + java.util.Arrays.deepToString(extraColumns.toArray()));
+		StringBuilder sql = new StringBuilder();
+		for (String column : extraColumns) {
+			sql.append(String.format("ALTER TABLE %s ADD COLUMN %s; ", tableInfo.getTableName(), column));
+		}
+		return sql.toString();
+	}
+
+	/**
+	 * TODO
+	 */
+	private boolean alterColumnsIfNeed(String table, String toSql, String fromSql) {
+		//List<String> toColumns = getColumns(toSql);
+		//List<String> fromColumns = getColumns(fromSql);
+		return false;
+	}
+
+	/*
+	private boolean addColumnsIfNeed(String table, String to, String from) {
+		try {
+			// if change name of column or add new column, or delete
+			boolean isAddNewColumn = false;
+
+			if (from.contains(table)) {
+				List<String> fromColumns = Arrays.asList(from.
+						replace(String.format(
+								SimpleConstants.SQL_CREATE_TABLE, table), SimpleConstants.EMPTY).
+						replace(SimpleConstants.LAST_BRACKET, SimpleConstants.EMPTY).
+						split(SimpleConstants.DIVIDER_WITH_SPACE));
+
+				List<String> toColumns = Arrays.asList(to.
+						replace(String.format(
+								SimpleConstants.SQL_CREATE_TABLE_IF_NOT_EXIST, table), SimpleConstants.EMPTY).
+						replace(SimpleConstants.LAST_BRACKET, SimpleConstants.EMPTY).
+						split(SimpleConstants.DIVIDER_WITH_SPACE));
+
+				List<String> extraColumns = new ArrayList<String>(toColumns);
+				extraColumns.removeAll(fromColumns);
+
+				if (extraColumns.size() > 0) {
+
+					SQLiteDatabase database = sqLiteSimpleHelper.getWritableDatabase();
+					for (String column : extraColumns) {
+						database.execSQL(String.format(
+									SimpleConstants.SQL_ALTER_TABLE_ADD_COLUMN, table, column));
+					}
+					database.close();
+					isAddNewColumn = true;
+				}
+			}
+
+			return isAddNewColumn;
+
+		} catch (IndexOutOfBoundsException exception) {
+			throw new RuntimeException("Duplicated class on method create(...)");
+		}
+	}
+	*/
+
+	public static List<String> getColumns(TableInfo tableInfo, String schema) {
+		return getColumns(tableInfo.getTableName(), schema);
 	}
 
 	// TODO
-	public static List<String> getColumns(String schema) {
-		return null;
+	public static List<String> getColumns(String tableName, String schema) {
+		List<String> columns = Arrays.asList(schema
+				.replaceAll("CREATE (VIRTUAL )?TABLE (IF NOT EXISTS )?" + tableName, "")
+				.replace("(", "")
+				.replace(")", "")
+				.replace(";", "")
+				.split(","));
+		List<String> columnsWithoutType = new ArrayList<String>();
+		for (String column : columns) {
+			columnsWithoutType.add(column.replaceAll("^\\s+", "").replaceAll(" .*", ""));
+		}
+		return columnsWithoutType;
 	}
 
 	// TODO
