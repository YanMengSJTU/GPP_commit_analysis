diff --git a/src/com/activeandroid/Configuration.java b/src/com/activeandroid/Configuration.java
index b197d223..a9a7225f 100644
--- a/src/com/activeandroid/Configuration.java
+++ b/src/com/activeandroid/Configuration.java
@@ -31,288 +31,299 @@
     public final static String SQL_PARSER_LEGACY = "legacy";
     public final static String SQL_PARSER_DELIMITED = "delimited";
 
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PRIVATE MEMBERS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	private Context mContext;
-	private String mDatabaseName;
-	private int mDatabaseVersion;
-	private String mSqlParser;
-	private List<Class<? extends Model>> mModelClasses;
-	private List<Class<? extends TypeSerializer>> mTypeSerializers;
-	private int mCacheSize;
-
-	//////////////////////////////////////////////////////////////////////////////////////
-	// CONSTRUCTORS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	private Configuration(Context context) {
-		mContext = context;
-	}
-
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PUBLIC METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	public Context getContext() {
-		return mContext;
-	}
-
-	public String getDatabaseName() {
-		return mDatabaseName;
-	}
-
-	public int getDatabaseVersion() {
-		return mDatabaseVersion;
-	}
-	
-	public String getSqlParser() {
-	    return mSqlParser;
-	}
-
-	public List<Class<? extends Model>> getModelClasses() {
-		return mModelClasses;
-	}
-
-	public List<Class<? extends TypeSerializer>> getTypeSerializers() {
-		return mTypeSerializers;
-	}
-
-	public int getCacheSize() {
-		return mCacheSize;
-	}
-
-	public boolean isValid() {
-		return mModelClasses != null && mModelClasses.size() > 0;
-	}
-
-	//////////////////////////////////////////////////////////////////////////////////////
-	// INNER CLASSES
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	public static class Builder {
-		//////////////////////////////////////////////////////////////////////////////////////
-		// PRIVATE CONSTANTS
-		//////////////////////////////////////////////////////////////////////////////////////
-
-		private static final String AA_DB_NAME = "AA_DB_NAME";
-		private static final String AA_DB_VERSION = "AA_DB_VERSION";
-		private final static String AA_MODELS = "AA_MODELS";
-		private final static String AA_SERIALIZERS = "AA_SERIALIZERS";
-		private final static String AA_SQL_PARSER = "AA_SQL_PARSER";
-
-		private static final int DEFAULT_CACHE_SIZE = 1024;
-		private static final String DEFAULT_DB_NAME = "Application.db";
-		private static final String DEFAULT_SQL_PARSER = SQL_PARSER_LEGACY;
-
-		//////////////////////////////////////////////////////////////////////////////////////
-		// PRIVATE MEMBERS
-		//////////////////////////////////////////////////////////////////////////////////////
-
-		private Context mContext;
-
-		private Integer mCacheSize;
-		private String mDatabaseName;
-		private Integer mDatabaseVersion;
-		private String mSqlParser;
-		private List<Class<? extends Model>> mModelClasses;
-		private List<Class<? extends TypeSerializer>> mTypeSerializers;
-
-		//////////////////////////////////////////////////////////////////////////////////////
-		// CONSTRUCTORS
-		//////////////////////////////////////////////////////////////////////////////////////
-
-		public Builder(Context context) {
-			mContext = context.getApplicationContext();
-			mCacheSize = DEFAULT_CACHE_SIZE;
-		}
-
-		//////////////////////////////////////////////////////////////////////////////////////
-		// PUBLIC METHODS
-		//////////////////////////////////////////////////////////////////////////////////////
-
-		public Builder setCacheSize(int cacheSize) {
-			mCacheSize = cacheSize;
-			return this;
-		}
-
-		public Builder setDatabaseName(String databaseName) {
-			mDatabaseName = databaseName;
-			return this;
-		}
-
-		public Builder setDatabaseVersion(int databaseVersion) {
-			mDatabaseVersion = databaseVersion;
-			return this;
-		}
-		
-		public Builder setSqlParser(String sqlParser) {
-		    mSqlParser = sqlParser;
-		    return this;
-		}
-
-		public Builder addModelClass(Class<? extends Model> modelClass) {
-			if (mModelClasses == null) {
-				mModelClasses = new ArrayList<Class<? extends Model>>();
-			}
-
-			mModelClasses.add(modelClass);
-			return this;
-		}
-
-		public Builder addModelClasses(Class<? extends Model>... modelClasses) {
-			if (mModelClasses == null) {
-				mModelClasses = new ArrayList<Class<? extends Model>>();
-			}
-
-			mModelClasses.addAll(Arrays.asList(modelClasses));
-			return this;
-		}
-
-		public Builder setModelClasses(Class<? extends Model>... modelClasses) {
-			mModelClasses = Arrays.asList(modelClasses);
-			return this;
-		}
-
-		public Builder addTypeSerializer(Class<? extends TypeSerializer> typeSerializer) {
-			if (mTypeSerializers == null) {
-				mTypeSerializers = new ArrayList<Class<? extends TypeSerializer>>();
-			}
-
-			mTypeSerializers.add(typeSerializer);
-			return this;
-		}
-
-		public Builder addTypeSerializers(Class<? extends TypeSerializer>... typeSerializers) {
-			if (mTypeSerializers == null) {
-				mTypeSerializers = new ArrayList<Class<? extends TypeSerializer>>();
-			}
-
-			mTypeSerializers.addAll(Arrays.asList(typeSerializers));
-			return this;
-		}
-
-		public Builder setTypeSerializers(Class<? extends TypeSerializer>... typeSerializers) {
-			mTypeSerializers = Arrays.asList(typeSerializers);
-			return this;
-		}
-
-		public Configuration create() {
-			Configuration configuration = new Configuration(mContext);
-			configuration.mCacheSize = mCacheSize;
-
-			// Get database name from meta-data
-			if (mDatabaseName != null) {
-				configuration.mDatabaseName = mDatabaseName;
-			} else {
-				configuration.mDatabaseName = getMetaDataDatabaseNameOrDefault();
-			}
-
-			// Get database version from meta-data
-			if (mDatabaseVersion != null) {
-				configuration.mDatabaseVersion = mDatabaseVersion;
-			} else {
-				configuration.mDatabaseVersion = getMetaDataDatabaseVersionOrDefault();
-			}
-
-			// Get SQL parser from meta-data
-			if (mSqlParser != null) {
-			    configuration.mSqlParser = mSqlParser;
-			} else {
-			    configuration.mSqlParser = getMetaDataSqlParserOrDefault();
-			}
-			
-			// Get model classes from meta-data
-			if (mModelClasses != null) {
-				configuration.mModelClasses = mModelClasses;
-			} else {
-				final String modelList = ReflectionUtils.getMetaData(mContext, AA_MODELS);
-				if (modelList != null) {
-					configuration.mModelClasses = loadModelList(modelList.split(","));
-				}
-			}
-
-			// Get type serializer classes from meta-data
-			if (mTypeSerializers != null) {
-				configuration.mTypeSerializers = mTypeSerializers;
-			} else {
-				final String serializerList = ReflectionUtils.getMetaData(mContext, AA_SERIALIZERS);
-				if (serializerList != null) {
-					configuration.mTypeSerializers = loadSerializerList(serializerList.split(","));
-				}
-			}
-
-			return configuration;
-		}
-
-		//////////////////////////////////////////////////////////////////////////////////////
-		// PRIVATE METHODS
-		//////////////////////////////////////////////////////////////////////////////////////
-
-		// Meta-data methods
-
-		private String getMetaDataDatabaseNameOrDefault() {
-			String aaName = ReflectionUtils.getMetaData(mContext, AA_DB_NAME);
-			if (aaName == null) {
-				aaName = DEFAULT_DB_NAME;
-			}
-
-			return aaName;
-		}
-
-		private int getMetaDataDatabaseVersionOrDefault() {
-			Integer aaVersion = ReflectionUtils.getMetaData(mContext, AA_DB_VERSION);
-			if (aaVersion == null || aaVersion == 0) {
-				aaVersion = 1;
-			}
-
-			return aaVersion;
-		}
-
-		private String getMetaDataSqlParserOrDefault() {
-		    final String mode = ReflectionUtils.getMetaData(mContext, AA_SQL_PARSER);
-		    if (mode == null) {
-		        return DEFAULT_SQL_PARSER;
-		    }
-		    return mode;
-		}
-
-		private List<Class<? extends Model>> loadModelList(String[] models) {
-			final List<Class<? extends Model>> modelClasses = new ArrayList<Class<? extends Model>>();
-			final ClassLoader classLoader = mContext.getClass().getClassLoader();
-			for (String model : models) {
-				try {
-					Class modelClass = Class.forName(model.trim(), false, classLoader);
-					if (ReflectionUtils.isModel(modelClass)) {
-						modelClasses.add(modelClass);
-					}
-				}
-				catch (ClassNotFoundException e) {
-					Log.e("Couldn't create class.", e);
-				}
-			}
-
-			return modelClasses;
-		}
-
-		private List<Class<? extends TypeSerializer>> loadSerializerList(String[] serializers) {
-			final List<Class<? extends TypeSerializer>> typeSerializers = new ArrayList<Class<? extends TypeSerializer>>();
-			final ClassLoader classLoader = mContext.getClass().getClassLoader();
-			for (String serializer : serializers) {
-				try {
-					Class serializerClass = Class.forName(serializer.trim(), false, classLoader);
-					if (ReflectionUtils.isTypeSerializer(serializerClass)) {
-						typeSerializers.add(serializerClass);
-					}
-				}
-				catch (ClassNotFoundException e) {
-					Log.e("Couldn't create class.", e);
-				}
-			}
-
-			return typeSerializers;
-		}
-
-	}
+    //////////////////////////////////////////////////////////////////////////////////////
+    // PRIVATE MEMBERS
+    //////////////////////////////////////////////////////////////////////////////////////
+
+    private Context mContext;
+    private String mDatabaseName;
+    private int mDatabaseVersion;
+    private String mSqlParser;
+    private String mScanPackage;
+    private List<Class<? extends Model>> mModelClasses;
+    private List<Class<? extends TypeSerializer>> mTypeSerializers;
+    private int mCacheSize;
+
+    //////////////////////////////////////////////////////////////////////////////////////
+    // CONSTRUCTORS
+    //////////////////////////////////////////////////////////////////////////////////////
+
+    private Configuration(Context context) {
+        mContext = context;
+    }
+
+    //////////////////////////////////////////////////////////////////////////////////////
+    // PUBLIC METHODS
+    //////////////////////////////////////////////////////////////////////////////////////
+
+    public Context getContext() {
+        return mContext;
+    }
+
+    public String getDatabaseName() {
+        return mDatabaseName;
+    }
+
+    public int getDatabaseVersion() {
+        return mDatabaseVersion;
+    }
+
+    public String getSqlParser() {
+        return mSqlParser;
+    }
+
+    public String getScanPackage() {
+        return mScanPackage;
+    }
+
+    public List<Class<? extends Model>> getModelClasses() {
+        return mModelClasses;
+    }
+
+    public List<Class<? extends TypeSerializer>> getTypeSerializers() {
+        return mTypeSerializers;
+    }
+
+    public int getCacheSize() {
+        return mCacheSize;
+    }
+
+    public boolean isValid() {
+        return mModelClasses != null && mModelClasses.size() > 0;
+    }
+
+    //////////////////////////////////////////////////////////////////////////////////////
+    // INNER CLASSES
+    //////////////////////////////////////////////////////////////////////////////////////
+
+    public static class Builder {
+        //////////////////////////////////////////////////////////////////////////////////////
+        // PRIVATE CONSTANTS
+        //////////////////////////////////////////////////////////////////////////////////////
+
+        private static final String AA_DB_NAME = "AA_DB_NAME";
+        private static final String AA_DB_VERSION = "AA_DB_VERSION";
+        private final static String AA_MODELS = "AA_MODELS";
+        private final static String AA_SERIALIZERS = "AA_SERIALIZERS";
+        private final static String AA_SQL_PARSER = "AA_SQL_PARSER";
+
+        private static final int DEFAULT_CACHE_SIZE = 1024;
+        private static final String DEFAULT_DB_NAME = "Application.db";
+        private static final String DEFAULT_SQL_PARSER = SQL_PARSER_LEGACY;
+
+        //////////////////////////////////////////////////////////////////////////////////////
+        // PRIVATE MEMBERS
+        //////////////////////////////////////////////////////////////////////////////////////
+
+        private Context mContext;
+
+        private Integer mCacheSize;
+        private String mDatabaseName;
+        private Integer mDatabaseVersion;
+        private String mSqlParser;
+        private String mScanPackage;
+        private List<Class<? extends Model>> mModelClasses;
+        private List<Class<? extends TypeSerializer>> mTypeSerializers;
+
+        //////////////////////////////////////////////////////////////////////////////////////
+        // CONSTRUCTORS
+        //////////////////////////////////////////////////////////////////////////////////////
+
+        public Builder(Context context) {
+            mContext = context.getApplicationContext();
+            mCacheSize = DEFAULT_CACHE_SIZE;
+        }
+
+        //////////////////////////////////////////////////////////////////////////////////////
+        // PUBLIC METHODS
+        //////////////////////////////////////////////////////////////////////////////////////
+
+        public Builder setCacheSize(int cacheSize) {
+            mCacheSize = cacheSize;
+            return this;
+        }
+
+        public Builder setDatabaseName(String databaseName) {
+            mDatabaseName = databaseName;
+            return this;
+        }
+
+        public Builder setDatabaseVersion(int databaseVersion) {
+            mDatabaseVersion = databaseVersion;
+            return this;
+        }
+
+        public Builder setSqlParser(String sqlParser) {
+            mSqlParser = sqlParser;
+            return this;
+        }
+
+        public Builder setScanPackage(String mScanPackage) {
+            this.mScanPackage = mScanPackage;
+            return this;
+        }
+
+        public Builder addModelClass(Class<? extends Model> modelClass) {
+            if (mModelClasses == null) {
+                mModelClasses = new ArrayList<Class<? extends Model>>();
+            }
+
+            mModelClasses.add(modelClass);
+            return this;
+        }
+
+        public Builder addModelClasses(Class<? extends Model>... modelClasses) {
+            if (mModelClasses == null) {
+                mModelClasses = new ArrayList<Class<? extends Model>>();
+            }
+
+            mModelClasses.addAll(Arrays.asList(modelClasses));
+            return this;
+        }
+
+        public Builder setModelClasses(Class<? extends Model>... modelClasses) {
+            mModelClasses = Arrays.asList(modelClasses);
+            return this;
+        }
+
+        public Builder addTypeSerializer(Class<? extends TypeSerializer> typeSerializer) {
+            if (mTypeSerializers == null) {
+                mTypeSerializers = new ArrayList<Class<? extends TypeSerializer>>();
+            }
+
+            mTypeSerializers.add(typeSerializer);
+            return this;
+        }
+
+        public Builder addTypeSerializers(Class<? extends TypeSerializer>... typeSerializers) {
+            if (mTypeSerializers == null) {
+                mTypeSerializers = new ArrayList<Class<? extends TypeSerializer>>();
+            }
+
+            mTypeSerializers.addAll(Arrays.asList(typeSerializers));
+            return this;
+        }
+
+        public Builder setTypeSerializers(Class<? extends TypeSerializer>... typeSerializers) {
+            mTypeSerializers = Arrays.asList(typeSerializers);
+            return this;
+        }
+
+        public Configuration create() {
+            Configuration configuration = new Configuration(mContext);
+            configuration.mCacheSize = mCacheSize;
+
+            // Get database name from meta-data
+            if (mDatabaseName != null) {
+                configuration.mDatabaseName = mDatabaseName;
+            } else {
+                configuration.mDatabaseName = getMetaDataDatabaseNameOrDefault();
+            }
+
+            // Get database version from meta-data
+            if (mDatabaseVersion != null) {
+                configuration.mDatabaseVersion = mDatabaseVersion;
+            } else {
+                configuration.mDatabaseVersion = getMetaDataDatabaseVersionOrDefault();
+            }
+
+            // Get SQL parser from meta-data
+            if (mSqlParser != null) {
+                configuration.mSqlParser = mSqlParser;
+            } else {
+                configuration.mSqlParser = getMetaDataSqlParserOrDefault();
+            }
+
+            configuration.mScanPackage = mScanPackage;
+
+            // Get model classes from meta-data
+            if (mModelClasses != null) {
+                configuration.mModelClasses = mModelClasses;
+            } else {
+                final String modelList = ReflectionUtils.getMetaData(mContext, AA_MODELS);
+                if (modelList != null) {
+                    configuration.mModelClasses = loadModelList(modelList.split(","));
+                }
+            }
+
+            // Get type serializer classes from meta-data
+            if (mTypeSerializers != null) {
+                configuration.mTypeSerializers = mTypeSerializers;
+            } else {
+                final String serializerList = ReflectionUtils.getMetaData(mContext, AA_SERIALIZERS);
+                if (serializerList != null) {
+                    configuration.mTypeSerializers = loadSerializerList(serializerList.split(","));
+                }
+            }
+
+            return configuration;
+        }
+
+        //////////////////////////////////////////////////////////////////////////////////////
+        // PRIVATE METHODS
+        //////////////////////////////////////////////////////////////////////////////////////
+
+        // Meta-data methods
+
+        private String getMetaDataDatabaseNameOrDefault() {
+            String aaName = ReflectionUtils.getMetaData(mContext, AA_DB_NAME);
+            if (aaName == null) {
+                aaName = DEFAULT_DB_NAME;
+            }
+
+            return aaName;
+        }
+
+        private int getMetaDataDatabaseVersionOrDefault() {
+            Integer aaVersion = ReflectionUtils.getMetaData(mContext, AA_DB_VERSION);
+            if (aaVersion == null || aaVersion == 0) {
+                aaVersion = 1;
+            }
+
+            return aaVersion;
+        }
+
+        private String getMetaDataSqlParserOrDefault() {
+            final String mode = ReflectionUtils.getMetaData(mContext, AA_SQL_PARSER);
+            if (mode == null) {
+                return DEFAULT_SQL_PARSER;
+            }
+            return mode;
+        }
+
+        private List<Class<? extends Model>> loadModelList(String[] models) {
+            final List<Class<? extends Model>> modelClasses = new ArrayList<Class<? extends Model>>();
+            final ClassLoader classLoader = mContext.getClass().getClassLoader();
+            for (String model : models) {
+                try {
+                    Class modelClass = Class.forName(model.trim(), false, classLoader);
+                    if (ReflectionUtils.isModel(modelClass)) {
+                        modelClasses.add(modelClass);
+                    }
+                } catch (ClassNotFoundException e) {
+                    Log.e("Couldn't create class.", e);
+                }
+            }
+
+            return modelClasses;
+        }
+
+        private List<Class<? extends TypeSerializer>> loadSerializerList(String[] serializers) {
+            final List<Class<? extends TypeSerializer>> typeSerializers = new ArrayList<Class<? extends TypeSerializer>>();
+            final ClassLoader classLoader = mContext.getClass().getClassLoader();
+            for (String serializer : serializers) {
+                try {
+                    Class serializerClass = Class.forName(serializer.trim(), false, classLoader);
+                    if (ReflectionUtils.isTypeSerializer(serializerClass)) {
+                        typeSerializers.add(serializerClass);
+                    }
+                } catch (ClassNotFoundException e) {
+                    Log.e("Couldn't create class.", e);
+                }
+            }
+
+            return typeSerializers;
+        }
+
+    }
 }
diff --git a/src/com/activeandroid/ModelInfo.java b/src/com/activeandroid/ModelInfo.java
index 09e79117..483334ed 100644
--- a/src/com/activeandroid/ModelInfo.java
+++ b/src/com/activeandroid/ModelInfo.java
@@ -36,174 +36,171 @@
 import com.activeandroid.serializer.FileSerializer;
 import com.activeandroid.util.Log;
 import com.activeandroid.util.ReflectionUtils;
+
 import dalvik.system.DexFile;
 
 final class ModelInfo {
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PRIVATE METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	private Map<Class<? extends Model>, TableInfo> mTableInfos = new HashMap<Class<? extends Model>, TableInfo>();
-	private Map<Class<?>, TypeSerializer> mTypeSerializers = new HashMap<Class<?>, TypeSerializer>() {
-		{
-			put(Calendar.class, new CalendarSerializer());
-			put(java.sql.Date.class, new SqlDateSerializer());
-			put(java.util.Date.class, new UtilDateSerializer());
-			put(java.io.File.class, new FileSerializer());
-		}
-	};
-
-	//////////////////////////////////////////////////////////////////////////////////////
-	// CONSTRUCTORS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	public ModelInfo(Configuration configuration) {
-		if (!loadModelFromMetaData(configuration)) {
-			try {
-				scanForModel(configuration.getContext());
-			}
-			catch (IOException e) {
-				Log.e("Couldn't open source path.", e);
-			}
-		}
-
-		Log.i("ModelInfo loaded.");
-	}
-
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PUBLIC METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	public Collection<TableInfo> getTableInfos() {
-		return mTableInfos.values();
-	}
-
-	public TableInfo getTableInfo(Class<? extends Model> type) {
-		return mTableInfos.get(type);
-	}
-
-	public TypeSerializer getTypeSerializer(Class<?> type) {
-		return mTypeSerializers.get(type);
-	}
-
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PRIVATE METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	private boolean loadModelFromMetaData(Configuration configuration) {
-		if (!configuration.isValid()) {
-			return false;
-		}
-
-		final List<Class<? extends Model>> models = configuration.getModelClasses();
-		if (models != null) {
-			for (Class<? extends Model> model : models) {
-				mTableInfos.put(model, new TableInfo(model));
-			}
-		}
-
-		final List<Class<? extends TypeSerializer>> typeSerializers = configuration.getTypeSerializers();
-		if (typeSerializers != null) {
-			for (Class<? extends TypeSerializer> typeSerializer : typeSerializers) {
-				try {
-					TypeSerializer instance = typeSerializer.newInstance();
-					mTypeSerializers.put(instance.getDeserializedType(), instance);
-				}
-				catch (InstantiationException e) {
-					Log.e("Couldn't instantiate TypeSerializer.", e);
-				}
-				catch (IllegalAccessException e) {
-					Log.e("IllegalAccessException", e);
-				}
-			}
-		}
-
-		return true;
-	}
-
-	private void scanForModel(Context context) throws IOException {
-		String packageName = context.getPackageName();
-		String sourcePath = context.getApplicationInfo().sourceDir;
-		List<String> paths = new ArrayList<String>();
-
-		if (sourcePath != null && !(new File(sourcePath).isDirectory())) {
-			DexFile dexfile = new DexFile(sourcePath);
-			Enumeration<String> entries = dexfile.entries();
-
-			while (entries.hasMoreElements()) {
-				paths.add(entries.nextElement());
-			}
-		}
-		// Robolectric fallback
-		else {
-			ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
-			Enumeration<URL> resources = classLoader.getResources("");
-
-			while (resources.hasMoreElements()) {
-				String path = resources.nextElement().getFile();
-				if (path.contains("bin") || path.contains("classes")) {
-					paths.add(path);
-				}
-			}
-		}
-
-		for (String path : paths) {
-			File file = new File(path);
-			scanForModelClasses(file, packageName, context.getClassLoader());
-		}
-	}
-
-	private void scanForModelClasses(File path, String packageName, ClassLoader classLoader) {
-		if (path.isDirectory()) {
-			for (File file : path.listFiles()) {
-				scanForModelClasses(file, packageName, classLoader);
-			}
-		}
-		else {
-			String className = path.getName();
-
-			// Robolectric fallback
-			if (!path.getPath().equals(className)) {
-				className = path.getPath();
-
-				if (className.endsWith(".class")) {
-					className = className.substring(0, className.length() - 6);
-				}
-				else {
-					return;
-				}
-
-				className = className.replace(System.getProperty("file.separator"), ".");
-
-				int packageNameIndex = className.lastIndexOf(packageName);
-				if (packageNameIndex < 0) {
-					return;
-				}
-
-				className = className.substring(packageNameIndex);
-			}
-
-			try {
-				Class<?> discoveredClass = Class.forName(className, false, classLoader);
-				if (ReflectionUtils.isModel(discoveredClass)) {
-					@SuppressWarnings("unchecked")
-					Class<? extends Model> modelClass = (Class<? extends Model>) discoveredClass;
-					mTableInfos.put(modelClass, new TableInfo(modelClass));
-				}
-				else if (ReflectionUtils.isTypeSerializer(discoveredClass)) {
-					TypeSerializer instance = (TypeSerializer) discoveredClass.newInstance();
-					mTypeSerializers.put(instance.getDeserializedType(), instance);
-				}
-			}
-			catch (ClassNotFoundException e) {
-				Log.e("Couldn't create class.", e);
-			}
-			catch (InstantiationException e) {
-				Log.e("Couldn't instantiate TypeSerializer.", e);
-			}
-			catch (IllegalAccessException e) {
-				Log.e("IllegalAccessException", e);
-			}
-		}
-	}
+    //////////////////////////////////////////////////////////////////////////////////////
+    // PRIVATE METHODS
+    //////////////////////////////////////////////////////////////////////////////////////
+
+    private Map<Class<? extends Model>, TableInfo> mTableInfos = new HashMap<Class<? extends Model>, TableInfo>();
+    private Map<Class<?>, TypeSerializer> mTypeSerializers = new HashMap<Class<?>, TypeSerializer>() {
+        {
+            put(Calendar.class, new CalendarSerializer());
+            put(java.sql.Date.class, new SqlDateSerializer());
+            put(java.util.Date.class, new UtilDateSerializer());
+            put(File.class, new FileSerializer());
+        }
+    };
+
+    //////////////////////////////////////////////////////////////////////////////////////
+    // CONSTRUCTORS
+    //////////////////////////////////////////////////////////////////////////////////////
+
+    public ModelInfo(Configuration configuration) {
+        if (!loadModelFromMetaData(configuration)) {
+            try {
+                scanForModel(configuration);
+            } catch (IOException e) {
+                Log.e("Couldn't open source path.", e);
+            }
+        }
+
+        Log.i("ModelInfo loaded.");
+    }
+
+    //////////////////////////////////////////////////////////////////////////////////////
+    // PUBLIC METHODS
+    //////////////////////////////////////////////////////////////////////////////////////
+
+    public Collection<TableInfo> getTableInfos() {
+        return mTableInfos.values();
+    }
+
+    public TableInfo getTableInfo(Class<? extends Model> type) {
+        return mTableInfos.get(type);
+    }
+
+    public TypeSerializer getTypeSerializer(Class<?> type) {
+        return mTypeSerializers.get(type);
+    }
+
+    //////////////////////////////////////////////////////////////////////////////////////
+    // PRIVATE METHODS
+    //////////////////////////////////////////////////////////////////////////////////////
+
+    private boolean loadModelFromMetaData(Configuration configuration) {
+        if (!configuration.isValid()) {
+            return false;
+        }
+
+        final List<Class<? extends Model>> models = configuration.getModelClasses();
+        if (models != null) {
+            for (Class<? extends Model> model : models) {
+                mTableInfos.put(model, new TableInfo(model));
+            }
+        }
+
+        final List<Class<? extends TypeSerializer>> typeSerializers = configuration.getTypeSerializers();
+        if (typeSerializers != null) {
+            for (Class<? extends TypeSerializer> typeSerializer : typeSerializers) {
+                try {
+                    TypeSerializer instance = typeSerializer.newInstance();
+                    mTypeSerializers.put(instance.getDeserializedType(), instance);
+                } catch (InstantiationException e) {
+                    Log.e("Couldn't instantiate TypeSerializer.", e);
+                } catch (IllegalAccessException e) {
+                    Log.e("IllegalAccessException", e);
+                }
+            }
+        }
+
+        return true;
+    }
+
+    private void scanForModel(Configuration configuration) throws IOException {
+        Context context = configuration.getContext();
+        String packageName = context.getPackageName();
+        String scanPackage = configuration.getScanPackage();
+        String sourcePath = context.getApplicationInfo().sourceDir;
+        List<String> paths = new ArrayList<String>();
+
+        if (sourcePath != null && !(new File(sourcePath).isDirectory())) {
+            DexFile dexfile = new DexFile(sourcePath);
+            Enumeration<String> entries = dexfile.entries();
+
+            while (entries.hasMoreElements()) {
+                String element = entries.nextElement();
+                if (scanPackage != null && element.startsWith(scanPackage)) {
+                    paths.add(element);
+                }
+            }
+        }
+        // Robolectric fallback
+        else {
+            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
+            Enumeration<URL> resources = classLoader.getResources("");
+
+            while (resources.hasMoreElements()) {
+                String path = resources.nextElement().getFile();
+                if (path.contains("bin") || path.contains("classes")) {
+                    paths.add(path);
+                }
+            }
+        }
+
+        for (String path : paths) {
+            File file = new File(path);
+            scanForModelClasses(file, packageName, context.getClassLoader());
+        }
+    }
+
+    private void scanForModelClasses(File path, String packageName, ClassLoader classLoader) {
+        if (path.isDirectory()) {
+            for (File file : path.listFiles()) {
+                scanForModelClasses(file, packageName, classLoader);
+            }
+        } else {
+            String className = path.getName();
+
+            // Robolectric fallback
+            if (!path.getPath().equals(className)) {
+                className = path.getPath();
+
+                if (className.endsWith(".class")) {
+                    className = className.substring(0, className.length() - 6);
+                } else {
+                    return;
+                }
+
+                className = className.replace(System.getProperty("file.separator"), ".");
+
+                int packageNameIndex = className.lastIndexOf(packageName);
+                if (packageNameIndex < 0) {
+                    return;
+                }
+
+                className = className.substring(packageNameIndex);
+            }
+
+            try {
+                Class<?> discoveredClass = Class.forName(className, false, classLoader);
+                if (ReflectionUtils.isModel(discoveredClass)) {
+                    @SuppressWarnings("unchecked")
+                    Class<? extends Model> modelClass = (Class<? extends Model>) discoveredClass;
+                    mTableInfos.put(modelClass, new TableInfo(modelClass));
+                } else if (ReflectionUtils.isTypeSerializer(discoveredClass)) {
+                    TypeSerializer instance = (TypeSerializer) discoveredClass.newInstance();
+                    mTypeSerializers.put(instance.getDeserializedType(), instance);
+                }
+            } catch (ClassNotFoundException e) {
+                Log.e("Couldn't create class.", e);
+            } catch (InstantiationException e) {
+                Log.e("Couldn't instantiate TypeSerializer.", e);
+            } catch (IllegalAccessException e) {
+                Log.e("IllegalAccessException", e);
+            }
+        }
+    }
 }
