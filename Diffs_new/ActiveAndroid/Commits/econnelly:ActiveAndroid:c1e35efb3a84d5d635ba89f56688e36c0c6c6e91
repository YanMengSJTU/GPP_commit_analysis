diff --git a/Library/build.gradle b/Library/build.gradle
index 771f78ad..3128a6c3 100644
--- a/Library/build.gradle
+++ b/Library/build.gradle
@@ -63,6 +63,8 @@ dependencies {
     implementation 'com.android.support:appcompat-v7:27.1.1'
     implementation 'com.android.support:support-core-utils:27.1.1'
     implementation 'com.android.support:support-annotations:27.1.1'
+    implementation 'android.arch.persistence:db:1.1.0-rc1'
+    implementation 'android.arch.persistence:db-framework:1.1.0-rc1'
 }
 
 // build a jar with source files
diff --git a/Library/src/main/java/com/activeandroid/ActiveAndroid.java b/Library/src/main/java/com/activeandroid/ActiveAndroid.java
index c58c8efd..49dabad5 100644
--- a/Library/src/main/java/com/activeandroid/ActiveAndroid.java
+++ b/Library/src/main/java/com/activeandroid/ActiveAndroid.java
@@ -16,8 +16,8 @@
  * limitations under the License.
  */
 
+import android.arch.persistence.db.SupportSQLiteDatabase;
 import android.content.Context;
-import android.database.sqlite.SQLiteDatabase;
 
 import com.activeandroid.util.Log;
 
@@ -56,7 +56,7 @@ public static void setLoggingEnabled(boolean enabled) {
 		Log.setEnabled(enabled);
 	}
 
-	public static SQLiteDatabase getDatabase() {
+	public static SupportSQLiteDatabase getDatabase() {
 		return Cache.openDatabase();
 	}
 
diff --git a/Library/src/main/java/com/activeandroid/Cache.java b/Library/src/main/java/com/activeandroid/Cache.java
index 6495e379..3dd96152 100644
--- a/Library/src/main/java/com/activeandroid/Cache.java
+++ b/Library/src/main/java/com/activeandroid/Cache.java
@@ -18,6 +18,7 @@
 
 import java.util.Collection;
 
+import android.arch.persistence.db.SupportSQLiteDatabase;
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.support.v4.util.LruCache;
@@ -102,7 +103,7 @@ public static boolean isInitialized() {
 		return sIsInitialized;
 	}
 
-	public static synchronized SQLiteDatabase openDatabase() {
+	public static synchronized SupportSQLiteDatabase openDatabase() {
 		return sDatabaseHelper.getWritableDatabase();
 	}
 
diff --git a/Library/src/main/java/com/activeandroid/DatabaseHelper.java b/Library/src/main/java/com/activeandroid/DatabaseHelper.java
index 7158c5bb..4eaf43d6 100644
--- a/Library/src/main/java/com/activeandroid/DatabaseHelper.java
+++ b/Library/src/main/java/com/activeandroid/DatabaseHelper.java
@@ -16,20 +16,12 @@
  * limitations under the License.
  */
 
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStream;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-
+import android.arch.persistence.db.SupportSQLiteDatabase;
+import android.arch.persistence.db.SupportSQLiteOpenHelper;
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
+import android.arch.persistence.db.framework.FrameworkSQLiteOpenHelperFactory;
 import android.text.TextUtils;
 
 import com.activeandroid.util.IOUtils;
@@ -38,7 +30,18 @@
 import com.activeandroid.util.SQLiteUtils;
 import com.activeandroid.util.SqlParser;
 
-public final class DatabaseHelper extends SQLiteOpenHelper {
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.OutputStream;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
+public final class DatabaseHelper implements SupportSQLiteOpenHelper {
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC CONSTANTS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -50,36 +53,57 @@
     //////////////////////////////////////////////////////////////////////////////////////
 
     private final String mSqlParser;
+    private final SupportSQLiteOpenHelper helper;
 
-	//////////////////////////////////////////////////////////////////////////////////////
+    //////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	public DatabaseHelper(Configuration configuration) {
-		super(configuration.getContext(), configuration.getDatabaseName(), null, configuration.getDatabaseVersion());
+	public DatabaseHelper(com.activeandroid.Configuration configuration) {
+		super();
 		copyAttachedDatabase(configuration.getContext(), configuration.getDatabaseName());
 		mSqlParser = configuration.getSqlParser();
+
+        Factory factory = new FrameworkSQLiteOpenHelperFactory();
+        Configuration config = Configuration.builder(configuration.getContext())
+                .name("todo.db")
+                .callback(new Callback(configuration.getDatabaseVersion()) {
+                    @Override
+                    public void onCreate(SupportSQLiteDatabase db) {
+                        DatabaseHelper.this.onCreate(db);
+                    }
+
+                    @Override
+                    public void onUpgrade(SupportSQLiteDatabase db, int oldVersion, int newVersion) {
+                        DatabaseHelper.this.onUpgrade(db, oldVersion, newVersion);
+                    }
+
+                    @Override
+                    public void onOpen(SupportSQLiteDatabase db) {
+                        DatabaseHelper.this.onOpen(db);
+                    }
+                })
+                .build();
+
+        helper = factory.create(config);
 	}
 
 	//////////////////////////////////////////////////////////////////////////////////////
 	// OVERRIDEN METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	@Override
-	public void onOpen(SQLiteDatabase db) {
+	public void onOpen(SupportSQLiteDatabase db) {
 		executePragmas(db);
-	};
+	}
 
-	@Override
-	public void onCreate(SQLiteDatabase db) {
+	public void onCreate(SupportSQLiteDatabase db) {
 		executePragmas(db);
 		executeCreate(db);
 		executeMigrations(db, -1, db.getVersion());
 		executeCreateIndex(db);
 	}
 
-	@Override
-	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+	public void onUpgrade(SupportSQLiteDatabase db, int oldVersion, int newVersion) {
 		executePragmas(db);
 		executeCreate(db);
 		executeMigrations(db, oldVersion, newVersion);
@@ -125,14 +149,14 @@ public void copyAttachedDatabase(Context context, String databaseName) {
 	// PRIVATE METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	private void executePragmas(SQLiteDatabase db) {
+	private void executePragmas(SupportSQLiteDatabase db) {
 		if (SQLiteUtils.FOREIGN_KEYS_SUPPORTED) {
 			db.execSQL("PRAGMA foreign_keys=ON;");
 			Log.i("Foreign Keys supported. Enabling foreign key features.");
 		}
 	}
 
-	private void executeCreateIndex(SQLiteDatabase db) {
+	private void executeCreateIndex(SupportSQLiteDatabase db) {
 		db.beginTransaction();
 		try {
 			for (TableInfo tableInfo : Cache.getTableInfos()) {
@@ -149,7 +173,7 @@ private void executeCreateIndex(SQLiteDatabase db) {
 		}
 	}
 
-	private void executeCreate(SQLiteDatabase db) {
+	private void executeCreate(SupportSQLiteDatabase db) {
 		db.beginTransaction();
 		try {
 			for (TableInfo tableInfo : Cache.getTableInfos()) {
@@ -162,7 +186,7 @@ private void executeCreate(SQLiteDatabase db) {
 		}
 	}
 
-	private boolean executeMigrations(SQLiteDatabase db, int oldVersion, int newVersion) {
+	private boolean executeMigrations(SupportSQLiteDatabase db, int oldVersion, int newVersion) {
 		boolean migrationExecuted = false;
 		try {
 			final List<String> files = Arrays.asList(Cache.getContext().getAssets().list(MIGRATION_PATH));
@@ -198,14 +222,14 @@ private boolean executeMigrations(SQLiteDatabase db, int oldVersion, int newVers
 		return migrationExecuted;
 	}
 
-	private void executeSqlScript(SQLiteDatabase db, String file) {
+	private void executeSqlScript(SupportSQLiteDatabase db, String file) {
 
 	    InputStream stream = null;
 
 		try {
 		    stream = Cache.getContext().getAssets().open(MIGRATION_PATH + "/" + file);
 
-		    if (Configuration.SQL_PARSER_DELIMITED.equalsIgnoreCase(mSqlParser)) {
+		    if (com.activeandroid.Configuration.SQL_PARSER_DELIMITED.equalsIgnoreCase(mSqlParser)) {
 		        executeDelimitedSqlScript(db, stream);
 
 		    } else {
@@ -222,7 +246,7 @@ private void executeSqlScript(SQLiteDatabase db, String file) {
 		}
 	}
 
-	private void executeDelimitedSqlScript(SQLiteDatabase db, InputStream stream) throws IOException {
+	private void executeDelimitedSqlScript(SupportSQLiteDatabase db, InputStream stream) throws IOException {
 
 	    List<String> commands = SqlParser.parse(stream);
 
@@ -231,7 +255,7 @@ private void executeDelimitedSqlScript(SQLiteDatabase db, InputStream stream) th
 	    }
 	}
 
-	private void executeLegacySqlScript(SQLiteDatabase db, InputStream stream) throws IOException {
+	private void executeLegacySqlScript(SupportSQLiteDatabase db, InputStream stream) throws IOException {
 
 	    InputStreamReader reader = null;
         BufferedReader buffer = null;
@@ -254,4 +278,29 @@ private void executeLegacySqlScript(SQLiteDatabase db, InputStream stream) throw
 
         }
 	}
+
+    @Override
+    public String getDatabaseName() {
+        return helper.getDatabaseName();
+    }
+
+    @Override
+    public void setWriteAheadLoggingEnabled(boolean enabled) {
+        helper.setWriteAheadLoggingEnabled(enabled);
+    }
+
+    @Override
+    public SupportSQLiteDatabase getWritableDatabase() {
+        return helper.getWritableDatabase();
+    }
+
+    @Override
+    public SupportSQLiteDatabase getReadableDatabase() {
+        return helper.getReadableDatabase();
+    }
+
+    @Override
+    public void close() {
+        helper.close();
+    }
 }
diff --git a/Library/src/main/java/com/activeandroid/Model.java b/Library/src/main/java/com/activeandroid/Model.java
index 421426ea..3bc5bb5c 100644
--- a/Library/src/main/java/com/activeandroid/Model.java
+++ b/Library/src/main/java/com/activeandroid/Model.java
@@ -16,6 +16,7 @@
  * limitations under the License.
  */
 
+import android.arch.persistence.db.SupportSQLiteDatabase;
 import android.content.ContentValues;
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
@@ -72,7 +73,7 @@ public final void delete() {
 	}
 
 	public final Long save() {
-		final SQLiteDatabase db = Cache.openDatabase();
+		final SupportSQLiteDatabase db = Cache.openDatabase();
 		final ContentValues values = new ContentValues();
 
 		for (Field field : mTableInfo.getFields()) {
@@ -152,10 +153,10 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 		}
 
 		if (mId == null) {
-			mId = db.insert(mTableInfo.getTableName(), null, values);
+			mId = db.insert(mTableInfo.getTableName(), SQLiteDatabase.CONFLICT_REPLACE, values);
 		}
 		else {
-			db.update(mTableInfo.getTableName(), values, idName+"=" + mId, null);
+			db.update(mTableInfo.getTableName(), SQLiteDatabase.CONFLICT_REPLACE, values, idName+"=" + mId, null);
 		}
 
 		Cache.getContext().getContentResolver()
diff --git a/Library/src/main/java/com/activeandroid/content/ContentProvider.java b/Library/src/main/java/com/activeandroid/content/ContentProvider.java
index b4a841d6..086d60f2 100644
--- a/Library/src/main/java/com/activeandroid/content/ContentProvider.java
+++ b/Library/src/main/java/com/activeandroid/content/ContentProvider.java
@@ -3,10 +3,14 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import android.arch.persistence.db.SupportSQLiteQuery;
+import android.arch.persistence.db.SupportSQLiteQueryBuilder;
 import android.content.ContentValues;
 import android.content.UriMatcher;
 import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
 import android.net.Uri;
+import android.support.annotation.NonNull;
 import android.util.SparseArray;
 
 import com.activeandroid.ActiveAndroid;
@@ -93,7 +97,7 @@ public String getType(Uri uri) {
 	@Override
 	public Uri insert(Uri uri, ContentValues values) {
 		final Class<? extends Model> type = getModelType(uri);
-		final Long id = Cache.openDatabase().insert(Cache.getTableName(type), null, values);
+		final Long id = Cache.openDatabase().insert(Cache.getTableName(type), SQLiteDatabase.CONFLICT_NONE, values);
 
 		if (id != null && id > 0) {
 			Uri retUri = createUri(type, id);
@@ -108,7 +112,7 @@ public Uri insert(Uri uri, ContentValues values) {
 	@Override
 	public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {
 		final Class<? extends Model> type = getModelType(uri);
-		final int count = Cache.openDatabase().update(Cache.getTableName(type), values, selection, selectionArgs);
+		final int count = Cache.openDatabase().update(Cache.getTableName(type), SQLiteDatabase.CONFLICT_NONE, values, selection, selectionArgs);
 
 		notifyChange(uri);
 
@@ -126,17 +130,16 @@ public int delete(Uri uri, String selection, String[] selectionArgs) {
 	}
 
 	@Override
-	public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
+	public Cursor query(@NonNull Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
 		final Class<? extends Model> type = getModelType(uri);
-		final Cursor cursor = Cache.openDatabase().query(
-				Cache.getTableName(type),
-				projection,
-				selection,
-				selectionArgs,
-				null,
-				null,
-				sortOrder);
-
+		final SupportSQLiteQuery query = SupportSQLiteQueryBuilder
+				.builder(Cache.getTableName(type))
+				.columns(projection)
+				.orderBy(sortOrder)
+				.selection(selection, selectionArgs)
+				.create();
+
+		final Cursor cursor = Cache.openDatabase().query(query);
 		cursor.setNotificationUri(getContext().getContentResolver(), uri);
 
 		return cursor;
diff --git a/Library/src/main/java/com/activeandroid/util/SQLiteUtils.java b/Library/src/main/java/com/activeandroid/util/SQLiteUtils.java
index cbf41eae..80887b29 100644
--- a/Library/src/main/java/com/activeandroid/util/SQLiteUtils.java
+++ b/Library/src/main/java/com/activeandroid/util/SQLiteUtils.java
@@ -103,7 +103,7 @@ public static void execSql(String sql, Object[] bindArgs) {
 	}
 
 	public static <T extends Model> List<T> rawQuery(Class<? extends Model> type, String sql, String[] selectionArgs) {
-		Cursor cursor = Cache.openDatabase().rawQuery(sql, selectionArgs);
+		Cursor cursor = Cache.openDatabase().query(sql, selectionArgs);
 		List<T> entities = processCursor(type, cursor);
 		cursor.close();
 
@@ -111,7 +111,7 @@ public static void execSql(String sql, Object[] bindArgs) {
 	}
 	  
 	public static int intQuery(final String sql, final String[] selectionArgs) {
-        final Cursor cursor = Cache.openDatabase().rawQuery(sql, selectionArgs);
+        final Cursor cursor = Cache.openDatabase().query(sql, selectionArgs);
         final int number = processIntCursor(cursor);
         cursor.close();
 
