diff --git a/src/com/activeandroid/annotation/Table.java b/src/com/activeandroid/annotation/Table.java
index 4bb6deaf..3f4cb482 100644
--- a/src/com/activeandroid/annotation/Table.java
+++ b/src/com/activeandroid/annotation/Table.java
@@ -25,4 +25,11 @@
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Table {
 	public String name();
+
+	public static class Module {
+		public static final String FTS4 = "FTS4";
+		public static final String FTS3 = "FTS3";
+	}
+
+	public String module() default "";
 }
diff --git a/src/com/activeandroid/query/From.java b/src/com/activeandroid/query/From.java
index bc8a164e..fc0e54fc 100644
--- a/src/com/activeandroid/query/From.java
+++ b/src/com/activeandroid/query/From.java
@@ -40,6 +40,7 @@
 	private List<Join> mJoins;
 	private String mFrom;
 	private String mWhere;
+	private String mMatch;
 	private String mGroupBy;
 	private String mHaving;
 	private String mOrderBy;
@@ -134,6 +135,23 @@ public From where(String where, List<Object> args) {
 		return this;
 	}
 
+	public From match(String match, Object... args) {
+		return match(match, Arrays.asList(args));
+	}
+
+	public From match(String match, String[] args) {
+		//return match(match, Arrays.asList(args));
+		return match(match, (Object[]) args);
+	}
+
+	public From match(String match, List<Object> args) {
+		mMatch = match;
+		mArguments.clear();
+		mArguments.addAll(args);
+
+		return this;
+	}
+
 	public From groupBy(String groupBy) {
 		mGroupBy = groupBy;
 		return this;
@@ -207,6 +225,12 @@ public String toSql() {
 			sql.append(" ");
 		}
 
+		if (mMatch != null) {
+			sql.append("MATCH ");
+			sql.append(mMatch);
+			sql.append(" ");
+		}
+
 		if (mGroupBy != null) {
 			sql.append("GROUP BY ");
 			sql.append(mGroupBy);
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index 901f334a..d6e1f916 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -29,6 +29,7 @@
 import com.activeandroid.TableInfo;
 import com.activeandroid.annotation.Column;
 import com.activeandroid.annotation.Column.ConflictAction;
+import com.activeandroid.annotation.Table;
 import com.activeandroid.serializer.TypeSerializer;
 import com.novoda.notils.cursor.CursorList;
 import com.novoda.notils.cursor.SimpleCursorList;
@@ -415,6 +416,25 @@ public static String createTableDefinition(TableInfo tableInfo) {
 				TextUtils.join(", ", definitions));
 	}
 
+	public static String createVirtualTableDefinition(TableInfo tableInfo) {
+		Table table = tableInfo.getType().getAnnotation(Table.class);
+		String module = table.module();
+		if (TextUtils.isEmpty(module)) return "";
+
+		final ArrayList<String> definitions = new ArrayList<String>();
+		for (Field field : tableInfo.getFields()) {
+			String definition = tableInfo.getColumnName(field);
+			if (!TextUtils.isEmpty(definition)) {
+				definitions.add(definition);
+			}
+		}
+
+		definitions.addAll(createUniqueDefinition(tableInfo));
+
+		return String.format("CREATE VIRTUAL TABLE IF NOT EXISTS %s USING %s(%s);", tableInfo.getTableName(),
+				module, TextUtils.join(", ", definitions));
+	}
+
 	@SuppressWarnings("unchecked")
 	public static String createColumnDefinition(TableInfo tableInfo, Field field) {
 		StringBuilder definition = new StringBuilder();
