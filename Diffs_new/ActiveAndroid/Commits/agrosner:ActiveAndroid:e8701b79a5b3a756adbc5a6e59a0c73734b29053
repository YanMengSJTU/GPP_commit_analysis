diff --git a/src/com/activeandroid/Cache.java b/src/com/activeandroid/Cache.java
index eee8101d..8a7170b7 100644
--- a/src/com/activeandroid/Cache.java
+++ b/src/com/activeandroid/Cache.java
@@ -114,7 +114,7 @@ public static Context getContext() {
 
 	// Entity cache
 
-	public static String getIdentifier(Class<? extends Model> type, Long id) {
+	public static String getIdentifier(Class<? extends Model> type, String id) {
 		return getTableName(type) + "@" + id;
 	}
 
@@ -126,7 +126,7 @@ public static synchronized void addEntity(Model entity) {
 		sEntities.put(getIdentifier(entity), entity);
 	}
 
-	public static synchronized Model getEntity(Class<? extends Model> type, long id) {
+	public static synchronized Model getEntity(Class<? extends Model> type, String id) {
 		return sEntities.get(getIdentifier(type, id));
 	}
 
diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 86d08272..51b29e84 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -20,7 +20,6 @@
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 
-import com.activeandroid.annotation.Column;
 import com.activeandroid.annotation.PrimaryKey;
 import com.activeandroid.content.ContentProvider;
 import com.activeandroid.query.Delete;
@@ -39,9 +38,6 @@
 	// PRIVATE MEMBERS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	@Column(name = "Id")
-	private Long mId = null;
-
 	private TableInfo mTableInfo;
 
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -52,20 +48,24 @@ public Model() {
 		mTableInfo = Cache.getTableInfo(getClass());
 	}
 
+    private long mId;
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	public final Long getId() {
-		return mId;
-	}
+    /**
+     * Use This method to return the values of your primary key
+     * @return
+     */
+	public abstract String getId();
 
 	public final void delete() {
-		Cache.openDatabase().delete(mTableInfo.getTableName(), "Id=?", new String[] { getId().toString() });
+		Cache.openDatabase().delete(mTableInfo.getTableName(), SQLiteUtils.getWhereStatement(this, mTableInfo), null);
 		Cache.removeEntity(this);
 
 		Cache.getContext().getContentResolver()
-				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mId), null);
+				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), getId()), null);
 	}
 
 	public final void save() {
@@ -149,7 +149,7 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 		}
 
         if(!exists()){
-		    long mId = db.insert(mTableInfo.getTableName(), null, values);
+		     mId = db.insert(mTableInfo.getTableName(), null, values);
 
             for(Field field : mTableInfo.getPrimaryKeys()){
                 if(field.isAnnotationPresent(PrimaryKey.class) &&
@@ -163,11 +163,11 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
                 }
             }
         } else {
-			db.update(mTableInfo.getTableName(), values, SQLiteUtils.getWhereStatement(this, mTableInfo), null);
+			mId = db.update(mTableInfo.getTableName(), values, SQLiteUtils.getWhereStatement(this, mTableInfo), null);
 		}
 
 		Cache.getContext().getContentResolver()
-				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mId), null);
+				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), getId()), null);
 	}
 
     public boolean exists(){
@@ -243,17 +243,6 @@ else if (fieldType.equals(String.class)) {
 				else if (fieldType.equals(Byte[].class) || fieldType.equals(byte[].class)) {
 					value = cursor.getBlob(columnIndex);
 				}
-				else if (ReflectionUtils.isModel(fieldType)) {
-					final long entityId = cursor.getLong(columnIndex);
-					final Class<? extends Model> entityType = (Class<? extends Model>) fieldType;
-
-					Model entity = Cache.getEntity(entityType, entityId);
-					if (entity == null) {
-						entity = new Select().from(entityType).where("Id=?", entityId).executeSingle();
-					}
-
-					value = entity;
-				}
 				else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 					@SuppressWarnings("rawtypes")
 					final Class<? extends Enum> enumType = (Class<? extends Enum>) fieldType;
@@ -281,7 +270,7 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 			}
 		}
 
-		if (mId != null) {
+		if (getId() != null) {
 			Cache.addEntity(this);
 		}
 	}
@@ -303,11 +292,7 @@ public String toString() {
 		return mTableInfo.getTableName() + "@" + getId();
 	}
 
-	@Override
-	public boolean equals(Object obj) {
-		final Model other = (Model) obj;
-
-		return this.mId != null && (this.mTableInfo.getTableName().equals(other.mTableInfo.getTableName()))
-				&& (this.mId.equals(other.mId));
-	}
+    public long getRowId(){
+        return mId;
+    }
 }
diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index 7ecf9f28..10886814 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -42,7 +42,7 @@
 	private String mTableName;
 
 	private Map<Field, String> mColumnNames = new HashMap<Field, String>();
-    private LinkedList<Field> mPrimaryKeys;
+    private LinkedList<Field> mPrimaryKeys = new LinkedList<Field>();
     private LinkedList<Field> mForeignKeys = new LinkedList<Field>();
 
 	//////////////////////////////////////////////////////////////////////////////////////
diff --git a/src/com/activeandroid/content/ContentProvider.java b/src/com/activeandroid/content/ContentProvider.java
index b4a841d6..1299d65a 100644
--- a/src/com/activeandroid/content/ContentProvider.java
+++ b/src/com/activeandroid/content/ContentProvider.java
@@ -96,7 +96,7 @@ public Uri insert(Uri uri, ContentValues values) {
 		final Long id = Cache.openDatabase().insert(Cache.getTableName(type), null, values);
 
 		if (id != null && id > 0) {
-			Uri retUri = createUri(type, id);
+			Uri retUri = createUri(type, String.valueOf(id));
 			notifyChange(retUri);
 
 			return retUri;
@@ -146,7 +146,7 @@ public Cursor query(Uri uri, String[] projection, String selection, String[] sel
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	public static Uri createUri(Class<? extends Model> type, Long id) {
+	public static Uri createUri(Class<? extends Model> type, String id) {
 		final StringBuilder uri = new StringBuilder();
 		uri.append("content://");
 		uri.append(sAuthority);
@@ -155,7 +155,7 @@ public static Uri createUri(Class<? extends Model> type, Long id) {
 
 		if (id != null) {
 			uri.append("/");
-			uri.append(id.toString());
+			uri.append(id);
 		}
 
 		return Uri.parse(uri.toString());
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index 0ca41cff..1f7502ba 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -222,11 +222,7 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 
 			if (cursor.moveToFirst()) {
 				do {
-					Model entity = Cache.getEntity(type, cursor.getLong(cursor.getColumnIndex("Id")));
-					if (entity == null) {
-						entity = (T) entityConstructor.newInstance();
-					}
-
+					Model entity = (T) entityConstructor.newInstance();
 					entity.loadFromCursor(cursor);
 					entities.add((T) entity);
 				}
diff --git a/src/com/activeandroid/widget/ModelAdapter.java b/src/com/activeandroid/widget/ModelAdapter.java
index 70e59913..72363b1a 100644
--- a/src/com/activeandroid/widget/ModelAdapter.java
+++ b/src/com/activeandroid/widget/ModelAdapter.java
@@ -48,7 +48,7 @@ public long getItemId(int position) {
 		T item = getItem(position);
 
 		if (item != null) {
-			return item.getId();
+			return item.getRowId();
 		}
 		else {
 			return -1;
