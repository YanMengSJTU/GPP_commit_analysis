diff --git a/src/com/activeandroid/Cache.java b/src/com/activeandroid/Cache.java
index 5886657b..90cfa5b7 100644
--- a/src/com/activeandroid/Cache.java
+++ b/src/com/activeandroid/Cache.java
@@ -144,6 +144,9 @@ public static synchronized void removeEntity(Model entity) {
 	public static synchronized Collection<TableInfo> getTableInfos() {
 		return sModelInfo.getTableInfos();
 	}
+    public static synchronized java.util.Set<Class<? extends Model>> getModels() {
+        return sModelInfo.getModels();
+    }
 
 	public static synchronized TableInfo getTableInfo(Class<? extends Model> type) {
 		return sModelInfo.getTableInfo(type);
diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 17c4d2e1..6ce07e21 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -51,6 +51,7 @@
 
     private TableInfo mTableInfo;
     private String idName;
+    private Class<? extends Model> mType;
     //////////////////////////////////////////////////////////////////////////////////////
     // CONSTRUCTORS
     //////////////////////////////////////////////////////////////////////////////////////
@@ -71,6 +72,7 @@ public Model(boolean useDB) {
     //////////////////////////////////////////////////////////////////////////////////////
 
     private void enableDB(boolean enable) {
+        mType = getClass();
         mTableInfo = Cache.getTableInfo(getClass());
         idName = mTableInfo.getIdName();
         dbEnabled = enable;
@@ -93,7 +95,7 @@ public final void delete() {
         Cache.removeEntity(this);
 
         Cache.getContext().getContentResolver()
-                .notifyChange(ContentProvider.createUri(mTableInfo.getType(), mId), null);
+                .notifyChange(ContentProvider.createUri(mType, mId), null);
     }
 
     public void onBeforeSave() {
@@ -193,7 +195,7 @@ private final Long saveOrUpdate(boolean update, boolean save,boolean saveNulls)
                     mId = db.insertOrThrow(mTableInfo.getTableName(), null, values);
                 }else{
                     Log.i(matchValue+" updated in"+mTableInfo.getTableName()+", rows affected "+affected);
-                    Model object = new Select(idName).from(mTableInfo.getType()).where(matchColumnField.getName() + " = ?", matchValue).executeSingle();
+                    Model object = new Select(idName).from(mType).where(matchColumnField.getName() + " = ?", matchValue).executeSingle();
                     if(object==null){
                         throw new ORMException("Model was not saved");
                     }else {
@@ -208,7 +210,7 @@ private final Long saveOrUpdate(boolean update, boolean save,boolean saveNulls)
 
 
             Cache.getContext().getContentResolver()
-                    .notifyChange(ContentProvider.createUri(mTableInfo.getType(), mId), null);
+                    .notifyChange(ContentProvider.createUri(mType, mId), null);
         } catch (IllegalAccessException e) {
             e.printStackTrace();
         }
@@ -238,7 +240,7 @@ public static void delete(Class<? extends Model> type, long id) {
 
     public static <T extends Model> T load(Class<T> type, long id) {
         TableInfo tableInfo = Cache.getTableInfo(type);
-        return (T) new Select().from(type).where(tableInfo.getIdName() + "=?", id).executeSingle();
+        return (T) new Select().from(type).where(tableInfo.getIdName() + "= ?", id).executeSingle();
     }
 
     // Model population
diff --git a/src/com/activeandroid/ModelInfo.java b/src/com/activeandroid/ModelInfo.java
index 864f3260..ba636957 100644
--- a/src/com/activeandroid/ModelInfo.java
+++ b/src/com/activeandroid/ModelInfo.java
@@ -55,8 +55,9 @@
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PRIVATE METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
+    private Map<String, TableInfo> mTableInfos = new HashMap<String, TableInfo>();
 
-	private Map<Class<? extends Model>, TableInfo> mTableInfos = new HashMap<Class<? extends Model>, TableInfo>();
+	private Map<Class<? extends Model>, String> mModelTableInfos = new HashMap<Class<? extends Model>, String>();
 	private Map<Class<?>, TypeSerializer> mTypeSerializers = new HashMap<Class<?>, TypeSerializer>() {
 		{
 			put(Calendar.class, new CalendarSerializer());
@@ -117,9 +118,12 @@ public ModelInfo(Context context){
 	public Collection<TableInfo> getTableInfos() {
 		return mTableInfos.values();
 	}
+    public java.util.Set<Class<? extends Model>> getModels() {
+        return mModelTableInfos.keySet();
+    }
 
 	public TableInfo getTableInfo(Class<? extends Model> type) {
-		return mTableInfos.get(type);
+		return mTableInfos.get(mModelTableInfos.get(type));
 	}
 
 	public TypeSerializer getTypeSerializer(Class<?> type) {
@@ -148,7 +152,16 @@ private boolean loadModelFromMetaData(Configuration configuration) {
 		final List<Class<? extends Model>> models = configuration.getModelClasses();
 		if (models != null) {
 			for (Class<? extends Model> model : models) {
-				mTableInfos.put(model, new TableInfo(model));
+                TableInfo tableinfo = new TableInfo(model);
+                if(mTableInfos.containsKey(tableinfo.getTableName())){
+                    TableInfo oldtableInfo = mTableInfos.get(tableinfo.getTableName());
+                    oldtableInfo.addColumns(tableinfo.getColumns());
+                    oldtableInfo.addType(tableinfo.getPimraryType());
+                    tableinfo = oldtableInfo;
+                }else{
+                    mTableInfos.put(tableinfo.getTableName(), tableinfo);
+                }
+                mModelTableInfos.put(model,tableinfo.getTableName());
 			}
 		}
 
@@ -238,7 +251,16 @@ private void scanForModelClasses(File path, String packageName, ClassLoader clas
 				if (ReflectionUtils.isModel(discoveredClass)) {
 					@SuppressWarnings("unchecked")
 					Class<? extends Model> modelClass = (Class<? extends Model>) discoveredClass;
-					mTableInfos.put(modelClass, new TableInfo(modelClass));
+                    TableInfo tableinfo = new TableInfo(modelClass);
+                    if(mTableInfos.containsKey(tableinfo.getTableName())){
+                        TableInfo oldtableInfo = mTableInfos.get(tableinfo.getTableName());
+                        oldtableInfo.addColumns(tableinfo.getColumns());
+                        oldtableInfo.addType(tableinfo.getPimraryType());
+                        tableinfo = oldtableInfo;
+                    }else{
+                        mTableInfos.put(tableinfo.getTableName(), tableinfo);
+                    }
+                    mModelTableInfos.put(modelClass,tableinfo.getTableName());
 				}
 				else if (ReflectionUtils.isTypeSerializer(discoveredClass)) {
 					TypeSerializer instance = (TypeSerializer) discoveredClass.newInstance();
diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index af1fe593..09dd1dad 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -25,6 +25,7 @@
 
 import java.lang.reflect.Field;
 import java.util.Collections;
+import java.util.HashSet;
 import java.util.LinkedHashSet;
 import java.util.LinkedList;
 import java.util.List;
@@ -35,7 +36,7 @@
 	// PRIVATE MEMBERS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	private Class<? extends Model> mType;
+	private Set<Class<? extends Model>> mTypes = new HashSet<Class<? extends Model>>();
 	private String mTableName;
 	private String mIdName = Table.DEFAULT_ID_NAME;
 	private Set<ColumnField> mColumns = new LinkedHashSet<ColumnField>();
@@ -47,7 +48,7 @@
 	//////////////////////////////////////////////////////////////////////////////////////
 
 	public TableInfo(Class<? extends Model> type) {
-		mType = type;
+		mTypes.add(type);
 
 		final Table tableAnnotation = type.getAnnotation(Table.class);
 
@@ -89,9 +90,12 @@ public TableInfo(Class<? extends Model> type) {
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	public Class<? extends Model> getType() {
-		return mType;
+	public Class<? extends Model> getPimraryType() {
+		return (Class<? extends Model>) mTypes.toArray()[0];
 	}
+    public Set<Class<? extends Model>> getTypes() {
+        return mTypes;
+    }
 
 	public String getTableName() {
 		return mTableName;
@@ -131,6 +135,14 @@ public ColumnField getMatchValue() {
         return mColumns;
     }
 
+    public void addColumns(Set<ColumnField> columns) {
+        mColumns.addAll(columns);
+    }
+
+    public void addType(Class<? extends Model> type) {
+        mTypes.add(type);
+    }
+
     public static class ColumnField {
         final String name;
         String sqlType;
@@ -138,6 +150,9 @@ public ColumnField getMatchValue() {
         final boolean isMatchValue;
         final boolean isAutoIncrement;
 
+        public ColumnField(String name){
+            this(name, null, false, false);
+        }
 
         public ColumnField(String name, Field field){
             this(name, field, false, false);
diff --git a/src/com/activeandroid/content/ContentProvider.java b/src/com/activeandroid/content/ContentProvider.java
index 6927db25..26fd2cd5 100644
--- a/src/com/activeandroid/content/ContentProvider.java
+++ b/src/com/activeandroid/content/ContentProvider.java
@@ -49,11 +49,15 @@ public boolean onCreate() {
 
             // content://<authority>/<table>
             URI_MATCHER.addURI(sAuthority, tableInfo.getTableName().toLowerCase(), tableKey);
-            TYPE_CODES.put(tableKey, tableInfo.getType());
+            for(Class<? extends Model> type : tableInfo.getTypes()) {
+                TYPE_CODES.put(tableKey, type);
+            }
 
             // content://<authority>/<table>/<id>
             URI_MATCHER.addURI(sAuthority, tableInfo.getTableName().toLowerCase() + "/#", itemKey);
-            TYPE_CODES.put(itemKey, tableInfo.getType());
+            for(Class<? extends Model> type : tableInfo.getTypes()) {
+                TYPE_CODES.put(itemKey, type);
+            }
         }
 
         return true;
diff --git a/src/com/activeandroid/widget/ModelCursorAdapter.java b/src/com/activeandroid/widget/ModelCursorAdapter.java
index 6a76996a..2e40bbf8 100644
--- a/src/com/activeandroid/widget/ModelCursorAdapter.java
+++ b/src/com/activeandroid/widget/ModelCursorAdapter.java
@@ -27,7 +27,7 @@ public ModelCursorAdapter(Context context, Cursor c, int flags) {
     public T getItem(int position) {
         Cursor cursor = (Cursor) super.getItem(position);
         List<T> entities = processCursor(t.getClass(), cursor);
-        if(entities.size()>0) {
+        if(!entities.isEmpty()) {
             return entities.get(0);
         }else{
             return null;
diff --git a/tests/src/com/activeandroid/test/MatcherMockModel.java b/tests/src/com/activeandroid/test/MatcherMockModel.java
new file mode 100644
index 00000000..13b7af20
--- /dev/null
+++ b/tests/src/com/activeandroid/test/MatcherMockModel.java
@@ -0,0 +1,45 @@
+package com.activeandroid.test;
+
+/*
+ * Copyright (C) 2010 Michael Pardo
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+import com.activeandroid.Model;
+import com.activeandroid.annotation.Column;
+import com.activeandroid.annotation.Table;
+import java.util.Date;
+
+@Table(name = "MatcherMockModel")
+public class MatcherMockModel extends Model {
+    public MatcherMockModel(){
+        super(true);
+    }
+    @Column
+    public Date dateField;
+
+    @Column
+    public double doubleField;
+
+    @Column
+    public int intField;
+
+    @Column
+    public boolean booleanField;
+
+    @Column
+    public String stringField;
+
+    @Column(matchvalue = true)
+    public String matchField;
+}
\ No newline at end of file
diff --git a/tests/src/com/activeandroid/test/ModelTest.java b/tests/src/com/activeandroid/test/ModelTest.java
index fed54c0f..69493ba4 100644
--- a/tests/src/com/activeandroid/test/ModelTest.java
+++ b/tests/src/com/activeandroid/test/ModelTest.java
@@ -175,26 +175,7 @@ public void testBooleanColumnType() {
     /**
      * Mock model as we need 2 different model classes.
      */
-    @Table(name = "MatcherMockModel")
-    public static class MatcherMockModel extends Model {
-        @Column
-        public Date dateField;
-
-        @Column
-        public double doubleField;
-
-        @Column
-        public int intField;
 
-        @Column
-        public boolean booleanField;
-
-        @Column
-        public String stringField;
-
-        @Column(matchvalue = true)
-        public String matchField;
-    }
     public void testMatchValueColumn(){
         MatcherMockModel m1 = new MatcherMockModel();
         m1.matchField="testkey";
@@ -217,6 +198,64 @@ public void testMatchValueColumn(){
         assertTrue(databaseMockModel.stringField.equals(m2.stringField));
         assertTrue(m1.matchField==m2.matchField);
 
+    }
+    /**
+     * Mock model as we need 2 different model classes.
+     */
+    public class ExtendedMockModel extends MatcherMockModel {
+
+        @Column
+        public int newintField;
+
+        @Column
+        public String newstringField;
+
+
+    }
+    public class ExtendedExtendedMockModel extends ExtendedMockModel{
+
+        @Column
+        public int newerintField;
+
+        @Column
+        public String newerstringField;
+
+
+    }
+    public void testSTIModel(){
+        ExtendedMockModel extendedMockModel = new ExtendedMockModel();
+        ExtendedExtendedMockModel extendedextendedMockModel = new ExtendedExtendedMockModel();
+        MatcherMockModel mockModel = new MatcherMockModel();
+
+        TableInfo extendedextendedTableInfo = Cache.getTableInfo(ExtendedExtendedMockModel.class);
+        TableInfo extendedTableInfo = Cache.getTableInfo(ExtendedMockModel.class);
+        TableInfo tableInfo = Cache.getTableInfo(MatcherMockModel.class);
+
+        //assertTrue(extendTableInfo.getColumns().equals(tableInfo));
+        assertTrue(extendedTableInfo.getTableName().equals("MatcherMockModel"));
+        assertTrue(extendedextendedTableInfo.getTableName().equals("MatcherMockModel"));
+
+        assertTrue(extendedTableInfo.getColumns().contains(new TableInfo.ColumnField("newintField")));
+        assertTrue(extendedTableInfo.getColumns().contains(new TableInfo.ColumnField("newstringField")));
+        assertTrue(extendedTableInfo.getColumns().contains(new TableInfo.ColumnField("intField")));
+        assertTrue(extendedTableInfo.getColumns().contains(new TableInfo.ColumnField("stringField")));
+
+        assertTrue(extendedextendedTableInfo.getColumns().contains(new TableInfo.ColumnField("newerintField")));
+        assertTrue(extendedextendedTableInfo.getColumns().contains(new TableInfo.ColumnField("newerstringField")));
+        assertTrue(extendedextendedTableInfo.getColumns().contains(new TableInfo.ColumnField("newintField")));
+        assertTrue(extendedextendedTableInfo.getColumns().contains(new TableInfo.ColumnField("newstringField")));
+        assertTrue(extendedextendedTableInfo.getColumns().contains(new TableInfo.ColumnField("intField")));
+        assertTrue(extendedextendedTableInfo.getColumns().contains(new TableInfo.ColumnField("stringField")));
+
+        extendedMockModel.intField=10;
+        extendedMockModel.newintField=1;
+        extendedMockModel.stringField="test";
+        extendedMockModel.matchField="testMatch";
+        long id = extendedMockModel.save();
+
+        MatcherMockModel  databaseMockModel = MatcherMockModel.load( MatcherMockModel .class, id );
+        assertTrue(databaseMockModel.intField==10);
+        assertTrue(databaseMockModel.stringField.equals("test"));
     }
 
 	/**
