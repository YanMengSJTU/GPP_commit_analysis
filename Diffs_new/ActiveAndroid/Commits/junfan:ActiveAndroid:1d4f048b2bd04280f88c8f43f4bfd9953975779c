diff --git a/src/com/activeandroid/ActiveAndroid.java b/src/com/activeandroid/ActiveAndroid.java
index 97c7c188..0e7c6c86 100644
--- a/src/com/activeandroid/ActiveAndroid.java
+++ b/src/com/activeandroid/ActiveAndroid.java
@@ -22,6 +22,13 @@
 import com.activeandroid.util.Log;
 
 public final class ActiveAndroid {
+
+    /**
+     * add type serilizer
+     */
+    public void init(){
+
+    }
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
diff --git a/src/com/activeandroid/DatabaseHelper.java b/src/com/activeandroid/DatabaseHelper.java
index a68332ef..14765d33 100644
--- a/src/com/activeandroid/DatabaseHelper.java
+++ b/src/com/activeandroid/DatabaseHelper.java
@@ -27,11 +27,12 @@
 import java.util.Collections;
 import java.util.List;
 
+import android.app.Application;
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
 
-import com.activeandroid.app.Application;
+
 import com.activeandroid.util.Log;
 import com.activeandroid.util.NaturalOrderComparator;
 import com.activeandroid.util.SQLiteUtils;
@@ -51,11 +52,18 @@
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
 
+    //保存cache信息
     private DbCache cache=null;
 
     //保存context
     private Context mAppContext=null;
 
+
+    /**
+     *
+     * @param context
+     * @param dbMeta
+     */
 	public DatabaseHelper(Application context,DbMeta dbMeta) {
 		super(context, dbMeta.getDbName(), null, dbMeta.getDbVersion());
         mDbMeta=dbMeta;
@@ -63,6 +71,9 @@ public DatabaseHelper(Application context,DbMeta dbMeta) {
 		copyAttachedDatabase(context);
 	}
 
+    /**
+     *
+     */
     private DbMeta mDbMeta=null;
 
 	//////////////////////////////////////////////////////////////////////////////////////
diff --git a/src/com/activeandroid/DbCache.java b/src/com/activeandroid/DbCache.java
index db21e46d..3c3c7bde 100644
--- a/src/com/activeandroid/DbCache.java
+++ b/src/com/activeandroid/DbCache.java
@@ -46,19 +46,33 @@
 	private  boolean sIsInitialized = false;
 
     /**
-     *
+     * 路由一下当前的这个类是存在哪个DB里面
      * @return
      */
     public static DbCache getDbCacheByType(Class<? extends Model> type){
-        //todo
-         return null;
+        if(sModelDbCacheMap==null){
+            return null;
+        }
+        return sModelDbCacheMap.get(type);
     }
 
-    public static void setDbCacheByType(Class<? extends Model> type, DbCache cache){
-         //todo
+    /**
+     * 设置元素
+     * @param type
+     * @param cache
+     */
+    public synchronized static void setDbCacheByType(Class<? extends Model> type, DbCache cache){
+        if(sModelDbCacheMap==null){
+            sModelDbCacheMap=new HashMap<Class<?>, DbCache>();
+        }
+        sModelDbCacheMap.put(type,cache);
     }
 
 
+    private static Map<Class<?>,DbCache> sModelDbCacheMap;
+
+    private static Map<Class<?>, TypeSerializer> mTypeSerializers;
+
 
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
@@ -69,6 +83,15 @@ public DbCache(Application app,DbMeta meta,DatabaseHelper helper) {
         sDatabaseHelper=helper;
 	}
 
+
+    private void registModles(DbMeta dbMeta){
+        Class<Model>[] models=dbMeta.getModels();
+        for(int i=0;i<models.length;i++){
+
+        }
+    }
+
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -158,7 +181,7 @@ public  synchronized TableInfo getTableInfo(Class<? extends Model> type) {
 		return sModelInfo.getTableInfo(type);
 	}
 
-    private static Map<Class<?>, TypeSerializer> mTypeSerializers;
+
 
     /**
      * 设置反序列化的类
@@ -174,6 +197,9 @@ public  static  TypeSerializer getParserForType(Class<?> type) {
      * @param typeSerializer
      */
     public  static  void setParserForType(TypeSerializer typeSerializer){
+        if(mTypeSerializers==null){
+            mTypeSerializers=new HashMap<Class<?>, TypeSerializer>();
+        }
         mTypeSerializers.put(typeSerializer.getDeserializedType(), typeSerializer);
     }
 
diff --git a/src/com/activeandroid/DbMeta.java b/src/com/activeandroid/DbMeta.java
index 34f9b456..12f8833f 100644
--- a/src/com/activeandroid/DbMeta.java
+++ b/src/com/activeandroid/DbMeta.java
@@ -23,7 +23,10 @@
     public abstract Class<Model>[] getModels();
 
     /**
-     * 获取迁移版本的时候的sql代码存放的目录
+     * 获取迁移版本的时候的sql代码存放的目录，
+     * 我们返回的path会加在如下的代码上面
+     * 会在assets/migrations/<path>
+     *
      * @return
      */
     public abstract String getMigrationPath();
diff --git a/src/com/activeandroid/ModelInfo.java b/src/com/activeandroid/ModelInfo.java
index e074c09f..7becd167 100644
--- a/src/com/activeandroid/ModelInfo.java
+++ b/src/com/activeandroid/ModelInfo.java
@@ -40,7 +40,7 @@
 	//////////////////////////////////////////////////////////////////////////////////////
 
 	private Map<Class<? extends Model>, TableInfo> mTableInfos;
-	private Map<Class<?>, TypeSerializer> mTypeSerializers;
+	//private Map<Class<?>, TypeSerializer> mTypeSerializers;
 
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
@@ -58,15 +58,9 @@ private void getModelsFromMeta(DbMeta dbMeta){
 
 	public ModelInfo(DbMeta meta) {
 		mTableInfos = new HashMap<Class<? extends Model>, TableInfo>();
-		mTypeSerializers = new HashMap<Class<?>, TypeSerializer>();
-
-
+		//mTypeSerializers = new HashMap<Class<?>, TypeSerializer>();
 		//scanForModel(application);
         getModelsFromMeta(meta);
-
-
-
-
 		Log.i("ModelInfo loaded.");
 	}
 
@@ -88,9 +82,11 @@ public TableInfo getTableInfo(Class<? extends Model> type) {
 	}
 
 
+    /*
 	public TypeSerializer getTypeSerializer(Class<?> type) {
 		return mTypeSerializers.get(type);
 	}
+	*/
 
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PRIVATE METHODS
@@ -167,7 +163,7 @@ private void scanForModelClasses(File path, String packageName, ClassLoader clas
 				}
 				else if (ReflectionUtils.isTypeSerializer(discoveredClass)) {
 					TypeSerializer typeSerializer = (TypeSerializer) discoveredClass.newInstance();
-					mTypeSerializers.put(typeSerializer.getDeserializedType(), typeSerializer);
+					//mTypeSerializers.put(typeSerializer.getDeserializedType(), typeSerializer);
 				}
 			}
 			catch (ClassNotFoundException e) {
diff --git a/src/com/activeandroid/app/Application.java b/src/com/activeandroid/app/Application.java
index 56efc399..8993d6f6 100644
--- a/src/com/activeandroid/app/Application.java
+++ b/src/com/activeandroid/app/Application.java
@@ -22,6 +22,6 @@
 	@Override
 	public void onCreate() {
 		super.onCreate();
-		ActiveAndroid.initialize(this);
+		//ActiveAndroid.initialize(this);
 	}
 }
\ No newline at end of file
