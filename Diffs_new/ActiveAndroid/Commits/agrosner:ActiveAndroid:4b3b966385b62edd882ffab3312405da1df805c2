diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index 225a838d..e45b81f0 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -27,6 +27,7 @@
 import com.activeandroid.annotation.Column;
 import com.activeandroid.annotation.Table;
 import com.activeandroid.util.Log;
+import com.activeandroid.util.ReflectionUtils;
 
 public final class TableInfo {
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -53,8 +54,14 @@ public TableInfo(Class<? extends Model> type) {
 			mTableName = type.getSimpleName();
 		}
 
-		List<Field> fields = new ArrayList<Field>(Arrays.asList(type.getDeclaredFields()));
-		fields.add(getIdField(type));
+		List<Field> fields = new ArrayList<Field>();
+        try {
+            fields = ReflectionUtils.getAllFields(fields, Class.forName(type.getName()));
+            fields.add(getIdField(type));
+        } catch (ClassNotFoundException e) {
+            e.printStackTrace();
+        }
+
 
 		for (Field field : fields) {
 			if (field.isAnnotationPresent(Column.class)) {
diff --git a/src/com/activeandroid/util/ReflectionUtils.java b/src/com/activeandroid/util/ReflectionUtils.java
index 2728ddd3..e9a0d199 100644
--- a/src/com/activeandroid/util/ReflectionUtils.java
+++ b/src/com/activeandroid/util/ReflectionUtils.java
@@ -23,6 +23,9 @@
 import com.activeandroid.Model;
 import com.activeandroid.serializer.TypeSerializer;
 
+import java.lang.reflect.Field;
+import java.util.List;
+
 public final class ReflectionUtils {
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC METHODS
@@ -70,4 +73,14 @@ public static boolean isSubclassOf(Class<?> type, Class<?> superClass) {
 
 		return false;
 	}
+
+    public static List<Field> getAllFields(List<Field> outFields, Class<?> inClass) {
+        for (Field field : inClass.getDeclaredFields()) {
+            outFields.add(field);
+        }
+        if (inClass.getSuperclass() != null && !inClass.getSuperclass().equals(Model.class)) {
+            outFields = getAllFields(outFields, inClass.getSuperclass());
+        }
+        return outFields;
+    }
 }
\ No newline at end of file
