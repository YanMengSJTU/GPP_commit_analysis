diff --git a/src/com/activeandroid/manager/DBManager.java b/src/com/activeandroid/manager/DBManager.java
index 56a9ae6b..2322fe1f 100644
--- a/src/com/activeandroid/manager/DBManager.java
+++ b/src/com/activeandroid/manager/DBManager.java
@@ -49,11 +49,13 @@ public OBJECT_CLASS add(Object object){
     /**
      * Adds an object to the DB in the BG
      * @param jsonObject
-     * @param objectReceiver
-     * @param dbRequestInfo
      */
-    public void addInBackground(final Object jsonObject, final ObjectReceiver<OBJECT_CLASS> objectReceiver, DBRequestInfo dbRequestInfo){
-        addInBackground(mObjectClass, jsonObject, objectReceiver, dbRequestInfo);
+    public void addInBackground(final Object jsonObject){
+        addInBackground(mObjectClass, jsonObject);
+    }
+
+    public void addInBackground(final Object object, final ObjectReceiver<OBJECT_CLASS> objectReceiver){
+        addInBackground(mObjectClass, object, objectReceiver);
     }
 
     /**
@@ -64,8 +66,12 @@ public void addAll(Object array){
         addAll(mObjectClass, array);
     }
 
-    public void addAllInBackground(final Object array, final Runnable finishedRunnable, DBRequestInfo requestInfo){
-        addAllInBackground(mObjectClass, array, finishedRunnable, requestInfo);
+    public void addAllInBackground(final Object array){
+        addAllInBackground(mObjectClass, array);
+    }
+
+    public void addAllInBackground(final Object array, final CollectionReceiver<OBJECT_CLASS> collectionReceiver) {
+        addAllInBackground(mObjectClass, array, collectionReceiver);
     }
 
     /**
@@ -77,6 +83,10 @@ public void addAllInBackground(final Object array, final Runnable finishedRunnab
         return getAll(mObjectClass);
     }
 
+    public OBJECT_CLASS getObject(Object object){
+        return getObject(mObjectClass, object);
+    }
+
     /**
      * Retrieves a list of objects from the database without any threading with the sort passed
      * Its recommended not to call this method in the foreground thread
@@ -129,9 +139,7 @@ public OBJECT_CLASS getObjectByColumnValue(String column, Object uid){
 
     /**
      * Gets all in a table by a group by
-     * @param obClazz
      * @param groupBy
-     * @param <OBJECT_CLASS>
      * @return
      */
     public List<OBJECT_CLASS> getAllWithGroupby(String groupBy){
diff --git a/src/com/activeandroid/manager/SingleDBManager.java b/src/com/activeandroid/manager/SingleDBManager.java
index af410e26..2424cf0f 100644
--- a/src/com/activeandroid/manager/SingleDBManager.java
+++ b/src/com/activeandroid/manager/SingleDBManager.java
@@ -12,12 +12,15 @@
 import com.activeandroid.query.Select;
 import com.activeandroid.interfaces.CollectionReceiver;
 import com.activeandroid.interfaces.ObjectReceiver;
+import com.activeandroid.runtime.DBBatchSaveQueue;
 import com.activeandroid.runtime.DBRequest;
 import com.activeandroid.runtime.DBRequestInfo;
 import com.activeandroid.runtime.DBRequestQueue;
 import com.activeandroid.util.ReflectionUtils;
 import com.activeandroid.util.SQLiteUtils;
 
+import java.lang.reflect.InvocationTargetException;
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 
@@ -48,6 +51,10 @@ public SingleDBManager(String name){
         if(!getQueue().isAlive()){
             getQueue().start();
         }
+
+        if(!getSaveQueue().isAlive()){
+            getSaveQueue().start();
+        }
     }
 
     /**
@@ -69,6 +76,10 @@ public DBRequestQueue getQueue(){
         return mQueue;
     }
 
+    public DBBatchSaveQueue getSaveQueue(){
+        return DBBatchSaveQueue.getSharedSaveQueue();
+    }
+
     /**
      * Ensure manager was created in the main thread, otherwise handler will not work
      */
@@ -99,6 +110,15 @@ protected synchronized void processOnForeground(Runnable runnable){
         mRequestHandler.post(runnable);
     }
 
+    public <OBJECT_CLASS extends Model> OBJECT_CLASS getObject(Class<OBJECT_CLASS> obClazz, Object object){
+        try {
+            return obClazz.getConstructor(object.getClass()).newInstance(object);
+        } catch (Throwable e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
     /**
      * Adds an object to the manager's database
      * @param inObject - object of the class defined by the manager
@@ -114,7 +134,7 @@ protected synchronized void processOnForeground(Runnable runnable){
      */
     public <OBJECT_CLASS extends Model> OBJECT_CLASS add(Class<OBJECT_CLASS> obClazz, Object object){
         try {
-            return add(obClazz.getConstructor(object.getClass()).newInstance(object));
+            return add(getObject(obClazz,object));
         } catch (Throwable e) {
             e.printStackTrace();
         }
@@ -124,37 +144,23 @@ protected synchronized void processOnForeground(Runnable runnable){
     /**
      * Adds an object to the DB in the BG
      * @param jsonObject
-     * @param objectReceiver
-     * @param dbRequestInfo
      */
-    public <OBJECT_CLASS extends Model> void addInBackground(final Class<OBJECT_CLASS> obClazz, final Object jsonObject, final ObjectReceiver<OBJECT_CLASS> objectReceiver, DBRequestInfo dbRequestInfo){
-        processOnBackground(new DBRequest(dbRequestInfo) {
-            @Override
-            public void run() {
-                final OBJECT_CLASS object = add(obClazz, jsonObject);
-                processOnForeground(new Runnable() {
-                    @Override
-                    public void run() {
-                        objectReceiver.onObjectReceived(object);
-                    }
-                });
-            }
-        });
+    public <OBJECT_CLASS extends Model> void addInBackground(final Class<OBJECT_CLASS> obClazz, final Object jsonObject, final ObjectReceiver<OBJECT_CLASS> objectReceiver){
+        OBJECT_CLASS object = getObject(obClazz, jsonObject);
+        if(objectReceiver!=null){
+            objectReceiver.onObjectReceived(object);
+        }
+        getSaveQueue().add(object);
+
     }
 
-    public <OBJECT_CLASS extends Model> void addInBackground(final OBJECT_CLASS object, final ObjectReceiver<OBJECT_CLASS> objectReceiver, DBRequestInfo dbRequestInfo){
-        processOnBackground(new DBRequest(dbRequestInfo) {
-            @Override
-            public void run() {
-                final OBJECT_CLASS ob = add(object);
-                processOnForeground(new Runnable() {
-                    @Override
-                    public void run() {
-                        objectReceiver.onObjectReceived(ob);
-                    }
-                });
-            }
-        });
+    public <OBJECT_CLASS extends Model> void addInBackground(final Class<OBJECT_CLASS> obClazz, final Object jsonObject){
+        addInBackground(obClazz, jsonObject,null);
+    }
+
+
+    public <OBJECT_CLASS extends Model> void addInBackground(final OBJECT_CLASS object){
+        getSaveQueue().add(object);
     }
 
     /**
@@ -195,27 +201,28 @@ public void run() {
 
     }
 
-    public <OBJECT_CLASS extends Model> void addAllInBackground(final Class<OBJECT_CLASS> obClazz, final Object array, final Runnable finishedRunnable, DBRequestInfo dbRequestInfo){
-        processOnBackground(new DBRequest(dbRequestInfo) {
-            @Override
-            public void run() {
-                addAll(obClazz, array);
+    public <OBJECT_CLASS extends Model> void addAllInBackground(final Class<OBJECT_CLASS> obClazz, final Object array) {
+        addAllInBackground(obClazz, array, null);
+    }
 
-                if(finishedRunnable!=null)
-                    processOnForeground(finishedRunnable);
-            }
-        });
+
+    public <OBJECT_CLASS extends Model> void addAllInBackground(final Class<OBJECT_CLASS> obClazz, final Object array, final CollectionReceiver<OBJECT_CLASS> collectionReceiver){
+        List<OBJECT_CLASS> objects = new ArrayList<OBJECT_CLASS>();
+        int count = ReflectionUtils.invokeGetSizeOfObject(array);
+        for(int i = 0; i < count;i++){
+            Object getObject = ReflectionUtils.invokeGetMethod(array, i);
+            objects.add(getObject(obClazz, getObject));
+        }
+
+        if(collectionReceiver!=null){
+            collectionReceiver.onCollectionReceived(objects);
+        }
+
+        getSaveQueue().addAll(objects);
     }
 
-    public <COLLECTION_CLASS extends Collection<OBJECT_CLASS>, OBJECT_CLASS extends Model> void addAllInBackground(final COLLECTION_CLASS collection, final Runnable finishedRunnable, DBRequestInfo dbRequestInfo){
-        processOnBackground(new DBRequest(dbRequestInfo) {
-            @Override
-            public void run() {
-                addAll(collection);
-                if(finishedRunnable!=null)
-                    processOnForeground(finishedRunnable);
-            }
-        });
+    public <COLLECTION_CLASS extends Collection<OBJECT_CLASS>, OBJECT_CLASS extends Model> void addAllInBackground(final COLLECTION_CLASS collection){
+       getSaveQueue().addAll(collection);
     }
 
     /**
diff --git a/src/com/activeandroid/runtime/DBBatchSaveQueue.java b/src/com/activeandroid/runtime/DBBatchSaveQueue.java
new file mode 100644
index 00000000..3f319558
--- /dev/null
+++ b/src/com/activeandroid/runtime/DBBatchSaveQueue.java
@@ -0,0 +1,121 @@
+package com.activeandroid.runtime;
+
+import android.os.Looper;
+import android.util.Log;
+
+import com.activeandroid.ActiveAndroid;
+import com.activeandroid.Model;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+/**
+ * Created by andrewgrosner
+ * Date: 3/19/14
+ * Contributors:
+ * Description: This queue will bulk save items added to it when it gets access to the DB. It should only exist as one entity.
+ */
+public class DBBatchSaveQueue extends Thread{
+
+    private static DBBatchSaveQueue mBatchSaveQueue;
+
+    public static DBBatchSaveQueue getSharedSaveQueue(){
+        if(mBatchSaveQueue==null){
+            mBatchSaveQueue = new DBBatchSaveQueue();
+        }
+        return mBatchSaveQueue;
+    }
+
+    private DBRequestQueue mQueue;
+
+    private final ArrayList<Model> mModels;
+
+    public DBBatchSaveQueue(){
+        super("DBBatchSaveQueue");
+
+        mModels = new ArrayList<Model>();
+        mQueue = new DBRequestQueue("DBBatchSaveRequestQueue");
+        mQueue.start();
+    }
+
+    @Override
+    public void run() {
+        super.run();
+        Looper.prepare();
+        android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);
+        while (true){
+            ArrayList<Model> tmpModels;
+            synchronized (mModels){
+                tmpModels = new ArrayList<Model>(mModels);
+                mModels.clear();
+            }
+            if(tmpModels.size()>0) {
+                ActiveAndroid.beginTransaction();
+                try {
+                    Log.d("DBBatchSaveQueue", "Executing batch save of: " + tmpModels.size());
+                    for (Model model: tmpModels) {
+                        model.save();
+                    }
+                    ActiveAndroid.setTransactionSuccessful();
+                } catch (Throwable e) {
+                    throw new RuntimeException(e.getCause());
+                } finally {
+                    ActiveAndroid.endTransaction();
+                }
+            }
+
+            try {
+                //sleep for one second to gather as much data as possible
+                Thread.sleep(1000);
+            } catch (InterruptedException e) {
+            }
+        }
+    }
+
+    public void add(final Model model){
+        mQueue.add(new DBRequest() {
+            @Override
+            public void run() {
+                synchronized (mModels){
+                    mModels.add(model);
+                }
+            }
+        });
+    }
+
+    public <COLLECTION_CLASS extends Collection<OBJECT_CLASS>, OBJECT_CLASS extends Model> void addAll(final COLLECTION_CLASS list){
+        mQueue.add(new DBRequest() {
+            @Override
+            public void run() {
+                synchronized (mModels){
+                    mModels.addAll(list);
+                }
+            }
+        });
+
+    }
+
+    public void remove(final Model model){
+        mQueue.add(new DBRequest(DBRequestInfo.create("Removing : "+  model.toString(), DBRequest.PRIORITY_HIGH)) {
+            @Override
+            public void run() {
+                synchronized (mModels){
+                    mModels.remove(model);
+                }
+            }
+        });
+    }
+
+    public void removeAll(final Collection collection){
+        mQueue.add(new DBRequest(DBRequestInfo.create("Removing : " + collection.toString(),DBRequest.PRIORITY_HIGH)) {
+            @Override
+            public void run() {
+                synchronized (mModels){
+                    mModels.removeAll(collection);
+                }
+            }
+        });
+
+    }
+}
