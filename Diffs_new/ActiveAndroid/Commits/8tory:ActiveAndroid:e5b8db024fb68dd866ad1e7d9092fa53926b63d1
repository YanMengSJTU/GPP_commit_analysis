diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index 6e05cecf..1e3317ae 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -55,23 +55,22 @@ public TableInfo(Class<? extends Model> type) {
 		}
 
 		List<Field> fields = new ArrayList<Field>();
-        try {
-            fields = ReflectionUtils.getAllFields(fields, Class.forName(type.getName()));
-            fields.add(getIdField(type));
-        } catch (ClassNotFoundException e) {
-            e.printStackTrace();
-        }
-
+		try {
+			fields = ReflectionUtils.getAllFields(fields, Class.forName(type.getName()));
+			fields.add(getIdField(type));
+		} catch (ClassNotFoundException e) {
+			e.printStackTrace();
+		}
 
 		for (Field field : fields) {
 			if (field.isAnnotationPresent(Column.class)) {
 				final Column columnAnnotation = field.getAnnotation(Column.class);
-                String fieldName;
-                if(!columnAnnotation.name().equals("")){
-                    fieldName = columnAnnotation.name();
-                } else{
-                    fieldName = field.getName();
-                }
+				String fieldName;
+				if (!"".equals(columnAnnotation.name())) {
+					fieldName = columnAnnotation.name();
+				} else {
+					fieldName = field.getName();
+				}
 				mColumnNames.put(field, fieldName);
 			}
 		}
diff --git a/src/com/activeandroid/util/ReflectionUtils.java b/src/com/activeandroid/util/ReflectionUtils.java
index e9a0d199..d8ecdd68 100644
--- a/src/com/activeandroid/util/ReflectionUtils.java
+++ b/src/com/activeandroid/util/ReflectionUtils.java
@@ -74,13 +74,13 @@ public static boolean isSubclassOf(Class<?> type, Class<?> superClass) {
 		return false;
 	}
 
-    public static List<Field> getAllFields(List<Field> outFields, Class<?> inClass) {
-        for (Field field : inClass.getDeclaredFields()) {
-            outFields.add(field);
-        }
-        if (inClass.getSuperclass() != null && !inClass.getSuperclass().equals(Model.class)) {
-            outFields = getAllFields(outFields, inClass.getSuperclass());
-        }
-        return outFields;
-    }
-}
\ No newline at end of file
+	public static List<Field> getAllFields(List<Field> outFields, Class<?> inClass) {
+		for (Field field : inClass.getDeclaredFields()) {
+			outFields.add(field);
+		}
+		if (inClass.getSuperclass() != null && !inClass.getSuperclass().equals(Model.class)) {
+			outFields = getAllFields(outFields, inClass.getSuperclass());
+		}
+		return outFields;
+	}
+}
