diff --git a/src/com/activeandroid/ModelInfo.java b/src/com/activeandroid/ModelInfo.java
index 5b3e982a..5c1d33a5 100644
--- a/src/com/activeandroid/ModelInfo.java
+++ b/src/com/activeandroid/ModelInfo.java
@@ -29,6 +29,7 @@
 
 import android.content.Context;
 
+import com.activeandroid.annotation.Ignore;
 import com.activeandroid.serializer.CalendarSerializer;
 import com.activeandroid.serializer.SqlDateSerializer;
 import com.activeandroid.serializer.TypeSerializer;
@@ -184,12 +185,12 @@ private void scanForModelClasses(File path, String packageName, ClassLoader clas
 
 			try {
 				Class<?> discoveredClass = Class.forName(className, false, classLoader);
-				if (ReflectionUtils.isModel(discoveredClass)) {
+				if (ReflectionUtils.isModel(discoveredClass) && !discoveredClass.isAnnotationPresent(Ignore.class)) {
 					@SuppressWarnings("unchecked")
 					Class<? extends Model> modelClass = (Class<? extends Model>) discoveredClass;
 					mTableInfos.put(modelClass, new TableInfo(modelClass));
 				}
-				else if (ReflectionUtils.isTypeSerializer(discoveredClass)) {
+				else if (ReflectionUtils.isTypeSerializer(discoveredClass) && !discoveredClass.isAnnotationPresent(Ignore.class)) {
 					TypeSerializer instance = (TypeSerializer) discoveredClass.newInstance();
 					mTypeSerializers.put(instance.getDeserializedType(), instance);
 				}
diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index 225a838d..6e05cecf 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -27,6 +27,7 @@
 import com.activeandroid.annotation.Column;
 import com.activeandroid.annotation.Table;
 import com.activeandroid.util.Log;
+import com.activeandroid.util.ReflectionUtils;
 
 public final class TableInfo {
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -53,13 +54,25 @@ public TableInfo(Class<? extends Model> type) {
 			mTableName = type.getSimpleName();
 		}
 
-		List<Field> fields = new ArrayList<Field>(Arrays.asList(type.getDeclaredFields()));
-		fields.add(getIdField(type));
+		List<Field> fields = new ArrayList<Field>();
+        try {
+            fields = ReflectionUtils.getAllFields(fields, Class.forName(type.getName()));
+            fields.add(getIdField(type));
+        } catch (ClassNotFoundException e) {
+            e.printStackTrace();
+        }
+
 
 		for (Field field : fields) {
 			if (field.isAnnotationPresent(Column.class)) {
 				final Column columnAnnotation = field.getAnnotation(Column.class);
-				mColumnNames.put(field, columnAnnotation.name());
+                String fieldName;
+                if(!columnAnnotation.name().equals("")){
+                    fieldName = columnAnnotation.name();
+                } else{
+                    fieldName = field.getName();
+                }
+				mColumnNames.put(field, fieldName);
 			}
 		}
 	}
@@ -103,4 +116,4 @@ else if (type.getSuperclass() != null) {
 
 		return null;
 	}
-}
\ No newline at end of file
+}
diff --git a/src/com/activeandroid/annotation/Column.java b/src/com/activeandroid/annotation/Column.java
index 0b6913be..80af9d6f 100644
--- a/src/com/activeandroid/annotation/Column.java
+++ b/src/com/activeandroid/annotation/Column.java
@@ -32,7 +32,7 @@
 		SET_NULL, SET_DEFAULT, CASCADE, RESTRICT, NO_ACTION
 	}
 
-	public String name();
+	public String name() default "";
 
 	public int length() default -1;
 
diff --git a/src/com/activeandroid/annotation/Ignore.java b/src/com/activeandroid/annotation/Ignore.java
new file mode 100644
index 00000000..8e8932df
--- /dev/null
+++ b/src/com/activeandroid/annotation/Ignore.java
@@ -0,0 +1,17 @@
+package com.activeandroid.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Created by andrewgrosner
+ * Date: 12/9/13
+ * Contributors:
+ * Description: tells ActiveAndroid that we want to ignore this class as a table
+ */
+@Target(ElementType.TYPE)
+@Retention(RetentionPolicy.RUNTIME)
+public @interface Ignore {
+}
diff --git a/src/com/activeandroid/util/ReflectionUtils.java b/src/com/activeandroid/util/ReflectionUtils.java
index 2728ddd3..e9a0d199 100644
--- a/src/com/activeandroid/util/ReflectionUtils.java
+++ b/src/com/activeandroid/util/ReflectionUtils.java
@@ -23,6 +23,9 @@
 import com.activeandroid.Model;
 import com.activeandroid.serializer.TypeSerializer;
 
+import java.lang.reflect.Field;
+import java.util.List;
+
 public final class ReflectionUtils {
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC METHODS
@@ -70,4 +73,14 @@ public static boolean isSubclassOf(Class<?> type, Class<?> superClass) {
 
 		return false;
 	}
+
+    public static List<Field> getAllFields(List<Field> outFields, Class<?> inClass) {
+        for (Field field : inClass.getDeclaredFields()) {
+            outFields.add(field);
+        }
+        if (inClass.getSuperclass() != null && !inClass.getSuperclass().equals(Model.class)) {
+            outFields = getAllFields(outFields, inClass.getSuperclass());
+        }
+        return outFields;
+    }
 }
\ No newline at end of file
