diff --git a/tests/res/raw/block_comment_with_semicolon.sql b/tests/res/raw/block_comment_with_semicolon.sql
new file mode 100644
index 00000000..ba88da24
--- /dev/null
+++ b/tests/res/raw/block_comment_with_semicolon.sql
@@ -0,0 +1,5 @@
+CREATE TABLE Entity1
+(
+	Id INTEGER AUTOINCREMENT PRIMARY KEY NOT NULL, /* block comment ; with semicolon */
+	Column1 INTEGER
+)
diff --git a/tests/res/raw/complex.sql b/tests/res/raw/complex.sql
index f3bd0de8..611ad37a 100644
--- a/tests/res/raw/complex.sql
+++ b/tests/res/raw/complex.sql
@@ -10,7 +10,7 @@ CREATE TABLE Entity2
 INSERT INTO Entity2
 (
     Id,
-    Column,
+    Column, /* --> ; <-- */
     Column2
 )
 SELECT  Id,
@@ -25,7 +25,7 @@ ALTER TABLE Entity2 RENAME TO Entity;
 /* Add some --sample-- data */
 INSERT INTO Entity2
 (
-    Id,
+    Id, --;'/*;*/--
     Col/*not sure if anyone would ever be insane enough to do this*/umn,
     Column2--,
 )
diff --git a/tests/res/raw/line_comment_with_semicolon.sql b/tests/res/raw/line_comment_with_semicolon.sql
new file mode 100644
index 00000000..a2d0c421
--- /dev/null
+++ b/tests/res/raw/line_comment_with_semicolon.sql
@@ -0,0 +1,5 @@
+CREATE TABLE Entity1
+(
+	Id INTEGER AUTOINCREMENT PRIMARY KEY NOT NULL, -- line comment ; with semicolon
+	Column1 INTEGER
+)
diff --git a/tests/res/raw/string_with_semicolon.sql b/tests/res/raw/string_with_semicolon.sql
new file mode 100644
index 00000000..47bcb840
--- /dev/null
+++ b/tests/res/raw/string_with_semicolon.sql
@@ -0,0 +1,12 @@
+INSERT INTO Entity
+(
+	Id,
+	Column1,
+	Column2
+)
+VALUES
+(
+	1,
+	'some ; text',
+	'some ; text'
+);
\ No newline at end of file
diff --git a/tests/res/raw/string_with_whitespace.sql b/tests/res/raw/string_with_whitespace.sql
new file mode 100644
index 00000000..2ba29ac3
--- /dev/null
+++ b/tests/res/raw/string_with_whitespace.sql
@@ -0,0 +1,12 @@
+INSERT INTO Entity
+(
+	Id,
+	Column1,
+	Column2
+)
+VALUES
+(
+	1,
+	'some			text',
+	'some    text'
+);
\ No newline at end of file
diff --git a/tests/res/raw/whitespace.sql b/tests/res/raw/whitespace.sql
new file mode 100644
index 00000000..97eb6f2a
--- /dev/null
+++ b/tests/res/raw/whitespace.sql
@@ -0,0 +1,36 @@
+CREATE TABLE Entity1
+
+
+(
+
+
+
+
+
+
+
+
+
+
+
+
+	Id INTEGER AUTOINCREMENT                         PRIMARY KEY NOT NULL,
+	
+	
+	
+	
+	
+	
+	
+	
+	
+	
+	
+	
+	
+	
+	
+	
+	
+	Column1					INTEGER
+);
\ No newline at end of file
diff --git a/tests/src/com/activeandroid/test/parser/ParserTest.java b/tests/src/com/activeandroid/test/parser/ParserTest.java
index a968131d..164376b3 100644
--- a/tests/src/com/activeandroid/test/parser/ParserTest.java
+++ b/tests/src/com/activeandroid/test/parser/ParserTest.java
@@ -36,6 +36,19 @@ public void testTwoStatements() throws IOException {
         assertEquals(sql2, commands.get(1));
     }
 
+    /**
+     * Should reduce unnecessary whitespace.
+     * @throws IOException
+     */
+    public void testWhitespace() throws IOException {
+
+        final InputStream stream = this.getStream(R.raw.whitespace);
+        List<String> commands = SqlParser.parse(stream);
+
+        assertEquals(1, commands.size());
+        assertEquals(sql1, commands.get(0));
+    }
+
     /**
      * Should be able to parse a multi-line statement that has an embedded line comment.
      * @throws IOException
@@ -62,6 +75,19 @@ public void testLineCommentWithString() throws IOException {
         assertEquals(sql1, commands.get(0));
     }
 
+    /**
+     * Should be able to handle a line comment that contains a semicolon.
+     * @throws IOException
+     */
+    public void testLineCommentWithSemicolon() throws IOException {
+
+        final InputStream stream = this.getStream(R.raw.line_comment_with_semicolon);
+        List<String> commands = SqlParser.parse(stream);
+
+        assertEquals(1, commands.size());
+        assertEquals(sql1, commands.get(0));
+    }
+
     /**
      * Should ignore a block comment end token inside a line comment.
      * @throws IOException
@@ -101,6 +127,19 @@ public void testBlockCommentWithString() throws IOException {
         assertEquals(sql1, commands.get(0));
     }
 
+    /**
+     * Should be able to handle a block comment that contains a semicolon.
+     * @throws IOException
+     */
+    public void testBlockCommentWithSemicolon() throws IOException {
+
+        final InputStream stream = this.getStream(R.raw.block_comment_with_semicolon);
+        List<String> commands = SqlParser.parse(stream);
+
+        assertEquals(1, commands.size());
+        assertEquals(sql1, commands.get(0));
+    }
+
     /**
      * Should ignore a line comment token inside a block comment.
      * @throws IOException
@@ -156,6 +195,34 @@ public void testStringWithBlockComment() throws IOException {
         assertEquals(sql, commands.get(0));
     }
 
+    /**
+     * Should ignore semicolons inside strings.
+     * @throws IOException
+     */
+    public void testStringWithSemicolon() throws IOException {
+        final String sql = "INSERT INTO Entity ( Id, Column1, Column2 ) VALUES ( 1, 'some ; text', 'some ; text' )";
+
+        final InputStream stream = this.getStream(R.raw.string_with_semicolon);
+        List<String> commands = SqlParser.parse(stream);
+
+        assertEquals(1, commands.size());
+        assertEquals(sql, commands.get(0));
+    }
+
+    /**
+     * Should not clobber whitespace in strings.
+     * @throws IOException
+     */
+    public void testStringWithWhitespace() throws IOException {
+        final String sql = "INSERT INTO Entity ( Id, Column1, Column2 ) VALUES ( 1, 'some\t\t\ttext', 'some    text' )";
+
+        final InputStream stream = this.getStream(R.raw.string_with_whitespace);
+        List<String> commands = SqlParser.parse(stream);
+
+        assertEquals(1, commands.size());
+        assertEquals(sql, commands.get(0));
+    }
+
     /**
      * Should be able to handle a script that contains anything nasty I can thing of right now.
      * @throws IOException 
