diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 411ed7bd..830516ee 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -20,7 +20,6 @@
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 
-import com.activeandroid.annotation.Column;
 import com.activeandroid.content.ContentProvider;
 import com.activeandroid.query.Delete;
 import com.activeandroid.query.Select;
@@ -37,17 +36,17 @@
 	// PRIVATE MEMBERS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	@Column(name = "Id")
 	private Long mId = null;
 
-	private TableInfo mTableInfo;
-
+	private final TableInfo mTableInfo;
+	private final String idName;
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
 
 	public Model() {
 		mTableInfo = Cache.getTableInfo(getClass());
+		idName = mTableInfo.getIdName();
 	}
 
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -59,7 +58,7 @@ public final Long getId() {
 	}
 
 	public final void delete() {
-		Cache.openDatabase().delete(mTableInfo.getTableName(), "Id=?", new String[] { getId().toString() });
+		Cache.openDatabase().delete(mTableInfo.getTableName(), idName+"=?", new String[] { getId().toString() });
 		Cache.removeEntity(this);
 
 		Cache.getContext().getContentResolver()
@@ -150,7 +149,7 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 			mId = db.insert(mTableInfo.getTableName(), null, values);
 		}
 		else {
-			db.update(mTableInfo.getTableName(), values, "Id=" + mId, null);
+			db.update(mTableInfo.getTableName(), values, idName+"=" + mId, null);
 		}
 
 		Cache.getContext().getContentResolver()
@@ -160,11 +159,13 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 	// Convenience methods
 
 	public static void delete(Class<? extends Model> type, long id) {
-		new Delete().from(type).where("Id=?", id).execute();
+		TableInfo tableInfo = Cache.getTableInfo(type);
+		new Delete().from(type).where(tableInfo.getIdName()+"=?", id).execute();
 	}
 
 	public static <T extends Model> T load(Class<T> type, long id) {
-		return new Select().from(type).where("Id=?", id).executeSingle();
+		TableInfo tableInfo = Cache.getTableInfo(type);
+		return new Select().from(type).where(tableInfo.getIdName()+"=?", id).executeSingle();
 	}
 
 	// Model population
@@ -231,7 +232,7 @@ else if (ReflectionUtils.isModel(fieldType)) {
 
 					Model entity = Cache.getEntity(entityType, entityId);
 					if (entity == null) {
-						entity = new Select().from(entityType).where("Id=?", entityId).executeSingle();
+						entity = new Select().from(entityType).where(idName+"=?", entityId).executeSingle();
 					}
 
 					value = entity;
diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index 225a838d..20a1c9b7 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -35,6 +35,7 @@
 
 	private Class<? extends Model> mType;
 	private String mTableName;
+	private String mIdName = Table.DEFAULT_ID_NAME;
 
 	private Map<Field, String> mColumnNames = new HashMap<Field, String>();
 
@@ -48,20 +49,22 @@ public TableInfo(Class<? extends Model> type) {
 		final Table tableAnnotation = type.getAnnotation(Table.class);
 		if (tableAnnotation != null) {
 			mTableName = tableAnnotation.name();
+			mIdName = tableAnnotation.id();
 		}
 		else {
 			mTableName = type.getSimpleName();
 		}
 
+		Field idField = getIdField(type);
+		mColumnNames.put(idField, mIdName);
 		List<Field> fields = new ArrayList<Field>(Arrays.asList(type.getDeclaredFields()));
-		fields.add(getIdField(type));
-
 		for (Field field : fields) {
 			if (field.isAnnotationPresent(Column.class)) {
 				final Column columnAnnotation = field.getAnnotation(Column.class);
 				mColumnNames.put(field, columnAnnotation.name());
 			}
 		}
+
 	}
 
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -76,6 +79,10 @@ public String getTableName() {
 		return mTableName;
 	}
 
+	public String getIdName() {
+		return mIdName;
+	}
+
 	public Collection<Field> getFields() {
 		return mColumnNames.keySet();
 	}
diff --git a/src/com/activeandroid/annotation/Table.java b/src/com/activeandroid/annotation/Table.java
index 4bb6deaf..541dfbe9 100644
--- a/src/com/activeandroid/annotation/Table.java
+++ b/src/com/activeandroid/annotation/Table.java
@@ -24,5 +24,8 @@
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Table {
+
+	public static final String DEFAULT_ID_NAME = "Id";
 	public String name();
+	public String id() default DEFAULT_ID_NAME;
 }
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index b9ba32b9..fc5c06d8 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -152,30 +152,31 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 		}
 
 		if (!TextUtils.isEmpty(definition)) {
-			if (column.length() > -1) {
-				definition.append("(");
-				definition.append(column.length());
-				definition.append(")");
-			}
 
-			if (name.equals("Id")) {
+			if (name.equals(tableInfo.getIdName())) {
 				definition.append(" PRIMARY KEY AUTOINCREMENT");
-			}
+			}else if(column!=null){
+				if (column.length() > -1) {
+					definition.append("(");
+					definition.append(column.length());
+					definition.append(")");
+				}
 
-			if (column.notNull()) {
-				definition.append(" NOT NULL ON CONFLICT ");
-				definition.append(column.onNullConflict().toString());
-			}
+				if (column.notNull()) {
+					definition.append(" NOT NULL ON CONFLICT ");
+					definition.append(column.onNullConflict().toString());
+				}
 
-			if (column.unique()) {
-				definition.append(" UNIQUE ON CONFLICT ");
-				definition.append(column.onUniqueConflict().toString());
+				if (column.unique()) {
+					definition.append(" UNIQUE ON CONFLICT ");
+					definition.append(column.onUniqueConflict().toString());
+				}
 			}
 
 			if (FOREIGN_KEYS_SUPPORTED && ReflectionUtils.isModel(type)) {
 				definition.append(" REFERENCES ");
 				definition.append(Cache.getTableInfo((Class<? extends Model>) type).getTableName());
-				definition.append("(Id)");
+				definition.append("("+tableInfo.getIdName()+")");
 				definition.append(" ON DELETE ");
 				definition.append(column.onDelete().toString().replace("_", " "));
 				definition.append(" ON UPDATE ");
@@ -191,6 +192,8 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 
 	@SuppressWarnings("unchecked")
 	public static <T extends Model> List<T> processCursor(Class<? extends Model> type, Cursor cursor) {
+		TableInfo tableInfo = Cache.getTableInfo(type);
+		String idName = tableInfo.getIdName();
 		final List<T> entities = new ArrayList<T>();
 
 		try {
@@ -198,7 +201,7 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 
 			if (cursor.moveToFirst()) {
 				do {
-					Model entity = Cache.getEntity(type, cursor.getLong(cursor.getColumnIndex("Id")));
+					Model entity = Cache.getEntity(type, cursor.getLong(cursor.getColumnIndex(idName)));
 					if (entity == null) {
 						entity = (T) entityConstructor.newInstance();
 					}
diff --git a/tests/src/com/activeandroid/test/MockModel.java b/tests/src/com/activeandroid/test/MockModel.java
index 718e945b..4ff5307d 100644
--- a/tests/src/com/activeandroid/test/MockModel.java
+++ b/tests/src/com/activeandroid/test/MockModel.java
@@ -19,6 +19,6 @@
 import com.activeandroid.Model;
 import com.activeandroid.annotation.Table;
 
-@Table(name = "MockModel")
+@Table(name = "MockModel", id = "Id")
 public class MockModel extends Model {
 }
diff --git a/tests/src/com/activeandroid/test/query/FromTest.java b/tests/src/com/activeandroid/test/query/FromTest.java
index 7340e091..09385f45 100644
--- a/tests/src/com/activeandroid/test/query/FromTest.java
+++ b/tests/src/com/activeandroid/test/query/FromTest.java
@@ -156,11 +156,11 @@ private From from() {
 		return new Select().all().from(MockModel.class);
 	}
 	
-	@Table(name = "JoinModel")
+	@Table(name = "JoinModel", id = "Id")
 	private static class JoinModel extends Model {
 	}
 	
-	@Table(name = "JoinModel2")
+	@Table(name = "JoinModel2", id = "Id")
 	private static class JoinModel2 extends Model {
 	}
 }
