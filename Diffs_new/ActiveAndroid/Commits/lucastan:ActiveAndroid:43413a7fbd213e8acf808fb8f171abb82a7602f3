diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index 1780a7ed..c52ea899 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -18,7 +18,6 @@
 
 import android.support.v4.util.SimpleArrayMap;
 import android.text.TextUtils;
-import android.util.Log;
 
 import com.activeandroid.annotation.Column;
 import com.activeandroid.annotation.Index;
@@ -37,6 +36,18 @@
 
     private static final Index[] emptyIndex = {};
 
+    private static final Field idField;
+
+    static {
+        try {
+            idField = Model.class.getDeclaredField("mId");
+            idField.setAccessible(true);
+        }
+        catch (NoSuchFieldException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
     private final Class<? extends Model> mType;
     private final String mTableName;
     private final Index[] mIndexes;
@@ -49,6 +60,9 @@
     //////////////////////////////////////////////////////////////////////////////////////
 
     public TableInfo(Class<? extends Model> type) {
+        if (!Model.class.isAssignableFrom(type))
+            throw new IllegalArgumentException("type must inherit from Model");
+
         mType = type;
 
         final Table tableAnnotation = type.getAnnotation(Table.class);
@@ -77,10 +91,7 @@ public TableInfo(Class<? extends Model> type) {
         }
 
         // Manually add the id column since it is not declared like the other columns.
-        Field idField = getIdField(type);
-        idField.setAccessible(true);
         mColumnNames.put(idField, mIdName);
-        fields.add(idField);
         mFields = Collections.unmodifiableList(fields);
     }
 
@@ -104,6 +115,13 @@ public String getIdName() {
         return mIdName;
     }
 
+    public Field getIdField() {
+        return idField;
+    }
+
+    /**
+     * Get all fields with the {@link Column} annotation.
+     */
     public Collection<Field> getFields() {
         return mFields;
     }
@@ -111,18 +129,4 @@ public String getIdName() {
     public String getColumnName(Field field) {
         return mColumnNames.get(field);
     }
-    
-    private Field getIdField(Class<?> type) {
-        if (Model.class.isAssignableFrom(type)){
-            try {
-                return Model.class.getDeclaredField("mId");
-            }
-            catch (NoSuchFieldException e) {
-                Log.e("Impossible!", e.toString());
-            }
-        }
-
-        return null;
-    }
-
 }
