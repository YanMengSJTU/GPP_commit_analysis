diff --git a/src/com/activeandroid/ActiveAndroid.java b/src/com/activeandroid/ActiveAndroid.java
index 60237c8f..eafb5e66 100644
--- a/src/com/activeandroid/ActiveAndroid.java
+++ b/src/com/activeandroid/ActiveAndroid.java
@@ -18,11 +18,11 @@
 
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
-
-import com.activeandroid.util.Log;
 import android.os.Build;
+import com.activeandroid.util.Log;
 
 public final class ActiveAndroid {
+	private static boolean async = false;
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -43,6 +43,7 @@ public static void initialize(Configuration configuration, boolean loggingEnable
 		// Set logging enabled first
 		setLoggingEnabled(loggingEnabled);
 		Cache.initialize(configuration);
+		async = configuration.isAsyncDatabase();
 	}
 
 	public static void clearCache() {
@@ -66,8 +67,8 @@ public static SQLiteDatabase getDatabase() {
      * blocks, allowing better read concurrency.
      */
 	public static void beginTransaction() {
-        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
-            Cache.openDatabase().beginTransaction();
+		if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB || !async) {
+			Cache.openDatabase().beginTransaction();
         } else {
             Cache.openDatabase().beginTransactionNonExclusive();
         }
diff --git a/src/com/activeandroid/Configuration.java b/src/com/activeandroid/Configuration.java
index d8bb504f..19a39dbe 100644
--- a/src/com/activeandroid/Configuration.java
+++ b/src/com/activeandroid/Configuration.java
@@ -16,16 +16,15 @@
  * limitations under the License.
  */
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
 import android.content.Context;
-
 import com.activeandroid.serializer.TypeSerializer;
 import com.activeandroid.util.Log;
 import com.activeandroid.util.ReflectionUtils;
 
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
 public class Configuration {
 
     public final static String SQL_PARSER_LEGACY = "legacy";
@@ -40,6 +39,7 @@
 	private int mDatabaseVersion;
 	private String mSqlParser;
 	private Boolean mResetDatabase;
+	private Boolean async;
 	private List<Class<? extends Model>> mModelClasses;
 	private List<Class<? extends TypeSerializer>> mTypeSerializers;
 	private int mCacheSize;
@@ -76,6 +76,10 @@ public boolean getResetDatabase() {
 		return mResetDatabase;
 	}
 
+	public boolean isAsyncDatabase() {
+		return async;
+	}
+
 	public List<Class<? extends Model>> getModelClasses() {
 		return mModelClasses;
 	}
@@ -107,6 +111,7 @@ public boolean isValid() {
 		private final static String AA_SERIALIZERS = "AA_SERIALIZERS";
 		private final static String AA_SQL_PARSER = "AA_SQL_PARSER";
 		private final static String AA_DB_RESET = "AA_DB_RESET";
+		private final static String AA_DB_ASYNC = "AA_DB_ASYNC";
 
 		private static final int DEFAULT_CACHE_SIZE = 1024;
 		private static final String DEFAULT_DB_NAME = "Application.db";
@@ -123,6 +128,7 @@ public boolean isValid() {
 		private Integer mDatabaseVersion;
 		private String mSqlParser;
 		private Boolean mResetDatabase;
+		private Boolean async;
 		private List<Class<? extends Model>> mModelClasses;
 		private List<Class<? extends TypeSerializer>> mTypeSerializers;
 
@@ -262,6 +268,12 @@ public Configuration create() {
 				configuration.mResetDatabase = getResetDatabaseOrDefault();
 			}
 
+			if (async != null) {
+				configuration.async = async;
+			} else {
+				configuration.async = getResetDatabaseOrDefault();
+			}
+
 			return configuration;
 		}
 
@@ -340,5 +352,13 @@ private Boolean getResetDatabaseOrDefault() {
 			}
 			return reset;
 		}
+
+		private Boolean getAsyncDatabaseOrDefault() {
+			final Boolean res = ReflectionUtils.getMetaData(mContext, AA_DB_ASYNC);
+			if (res == null) {
+				return false;
+			}
+			return res;
+		}
 	}
 }
diff --git a/src/com/activeandroid/DatabaseHelper.java b/src/com/activeandroid/DatabaseHelper.java
index c2b30e9c..4ca5afeb 100644
--- a/src/com/activeandroid/DatabaseHelper.java
+++ b/src/com/activeandroid/DatabaseHelper.java
@@ -16,28 +16,17 @@
  * limitations under the License.
  */
 
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStream;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
+import android.os.Build;
 import android.text.TextUtils;
+import com.activeandroid.util.*;
 
-import com.activeandroid.util.IOUtils;
-import com.activeandroid.util.Log;
-import com.activeandroid.util.NaturalOrderComparator;
-import com.activeandroid.util.SQLiteUtils;
-import com.activeandroid.util.SqlParser;
-import android.os.Build;
+import java.io.*;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
 
 public final class DatabaseHelper extends SQLiteOpenHelper {
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -51,6 +40,7 @@
     //////////////////////////////////////////////////////////////////////////////////////
 
     private final String mSqlParser;
+	private boolean async = false;
 
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
@@ -60,6 +50,7 @@ public DatabaseHelper(Configuration configuration) {
 		super(configuration.getContext(), configuration.getDatabaseName(), null, configuration.getDatabaseVersion());
 		copyAttachedDatabase(configuration.getContext(), configuration.getDatabaseName());
 		mSqlParser = configuration.getSqlParser();
+		async = configuration.isAsyncDatabase();
 	}
 
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -76,8 +67,8 @@ public DatabaseHelper(Configuration configuration) {
      */
     @Override
     public void onConfigure(SQLiteDatabase db) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
-            db.enableWriteAheadLogging();
+		if (async && Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
+			db.enableWriteAheadLogging();
         }
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
             db.setForeignKeyConstraintsEnabled(true);
