diff --git a/src/com/activeandroid/DatabaseHelper.java b/src/com/activeandroid/DatabaseHelper.java
index 14765d33..4ba14efc 100644
--- a/src/com/activeandroid/DatabaseHelper.java
+++ b/src/com/activeandroid/DatabaseHelper.java
@@ -66,11 +66,13 @@
      */
 	public DatabaseHelper(Application context,DbMeta dbMeta) {
 		super(context, dbMeta.getDbName(), null, dbMeta.getDbVersion());
+        mAppContext=context;
         mDbMeta=dbMeta;
         cache=new DbCache(context,dbMeta,this);
 		copyAttachedDatabase(context);
 	}
 
+
     /**
      *
      */
@@ -82,14 +84,12 @@ public DatabaseHelper(Application context,DbMeta dbMeta) {
 
 	@Override
 	public void onCreate(SQLiteDatabase db) {
-
 		if (SQLiteUtils.FOREIGN_KEYS_SUPPORTED) {
 			db.execSQL("PRAGMA foreign_keys=ON;");
 			Log.i("Foreign Keys supported. Enabling foreign key features.");
 		}
-
 		db.beginTransaction();
-
+        Log.e("cache is null?"+(cache==null));
 		for (TableInfo tableInfo : cache.getTableInfos()) {
 			db.execSQL(SQLiteUtils.createTableDefinition(tableInfo));
 		}
diff --git a/src/com/activeandroid/DbCache.java b/src/com/activeandroid/DbCache.java
index 3c3c7bde..61bae5e7 100644
--- a/src/com/activeandroid/DbCache.java
+++ b/src/com/activeandroid/DbCache.java
@@ -43,7 +43,8 @@
 
 	private  Set<Model> sEntities;
 
-	private  boolean sIsInitialized = false;
+	private  boolean mIsInitialized = false;
+
 
     /**
      * 路由一下当前的这个类是存在哪个DB里面
@@ -71,7 +72,7 @@ public synchronized static void setDbCacheByType(Class<? extends Model> type, Db
 
     private static Map<Class<?>,DbCache> sModelDbCacheMap;
 
-    private static Map<Class<?>, TypeSerializer> mTypeSerializers;
+    private static Map<Class<?>, TypeSerializer> sTypeSerializers;
 
 
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -79,15 +80,17 @@ public synchronized static void setDbCacheByType(Class<? extends Model> type, Db
 	//////////////////////////////////////////////////////////////////////////////////////
 
 	public DbCache(Application app,DbMeta meta,DatabaseHelper helper) {
-        initialize(app,meta);
         sDatabaseHelper=helper;
+        initialize(app,meta);
 	}
 
-
     private void registModles(DbMeta dbMeta){
         Class<Model>[] models=dbMeta.getModels();
+        if(models==null){
+            return;
+        }
         for(int i=0;i<models.length;i++){
-
+            setDbCacheByType(models[i],this);
         }
     }
 
@@ -97,24 +100,31 @@ private void registModles(DbMeta dbMeta){
 	//////////////////////////////////////////////////////////////////////////////////////
 
 	public  synchronized void initialize(Application application,DbMeta dbMeta) {
-		if (sIsInitialized) {
+		if (mIsInitialized) {
 			Log.v("ActiveAndroid already initialized.");
 			return;
 		}
-
 		sContext = application;
-
 		sModelInfo = new ModelInfo(dbMeta);
+        registModles(dbMeta);
 		//sDatabaseHelper = new DatabaseHelper(sContext);
-
 		sEntities = new HashSet<Model>();
+        mIsInitialized=true;
+		Log.v("ActiveAndroid initialized succesfully.");
+	}
 
-		openDatabase();
+    /**
+     *
+     */
+    private void setDbIntent(DbMeta meta){
 
-		sIsInitialized = true;
+    }
 
-		Log.v("ActiveAndroid initialized succesfully.");
-	}
+    /*
+    public void setInited(){
+        mIsInitialized = true;
+    }
+    */
 
 	public  synchronized void clear() {
 		sEntities = new HashSet<Model>();
@@ -128,7 +138,7 @@ public  synchronized void dispose() {
 
 		closeDatabase();
 
-		sIsInitialized = false;
+		mIsInitialized = false;
 
 		Log.v("ActiveAndroid disposed. Call initialize to use library.");
 	}
@@ -163,7 +173,6 @@ public  synchronized Model getEntity(Class<? extends Model> type, long id) {
 				return entity;
 			}
 		}
-
 		return null;
 	}
 
@@ -181,15 +190,16 @@ public  synchronized TableInfo getTableInfo(Class<? extends Model> type) {
 		return sModelInfo.getTableInfo(type);
 	}
 
-
-
     /**
      * 设置反序列化的类
      * @param type
      * @return
      */
 	public  static  TypeSerializer getParserForType(Class<?> type) {
-		return mTypeSerializers.get(type);
+        if(sTypeSerializers ==null){
+            return null;
+        }
+		return sTypeSerializers.get(type);
 	}
 
     /**
@@ -197,10 +207,10 @@ public  static  TypeSerializer getParserForType(Class<?> type) {
      * @param typeSerializer
      */
     public  static  void setParserForType(TypeSerializer typeSerializer){
-        if(mTypeSerializers==null){
-            mTypeSerializers=new HashMap<Class<?>, TypeSerializer>();
+        if(sTypeSerializers ==null){
+            sTypeSerializers =new HashMap<Class<?>, TypeSerializer>();
         }
-        mTypeSerializers.put(typeSerializer.getDeserializedType(), typeSerializer);
+        sTypeSerializers.put(typeSerializer.getDeserializedType(), typeSerializer);
     }
 
 	public  synchronized String getTableName(Class<? extends Model> type) {
