diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 82ede201..6dcbc5f9 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -20,6 +20,7 @@
 import android.database.Cursor;
 import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
+import android.text.TextUtils;
 
 import com.activeandroid.content.ContentProvider;
 import com.activeandroid.query.Delete;
@@ -176,8 +177,30 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 			mId = db.insertOrThrow(mTableInfo.getTableName(), null, values);
 		}
 		else {
-			db.update(mTableInfo.getTableName(), values, idName + "=" + mId, null);
-		}
+            String matchStatement;
+
+            if(!mTableInfo.hasMatchValue()) {
+
+                matchStatement = idName + "=" + mId;
+            }else{
+                List<String> matchTokens= new ArrayList<String>();
+
+                for(Field field : mTableInfo.getMatchValue()){
+                    try {
+                        final String fieldName = mTableInfo.getColumnName(field);
+                        Object value = field.get(this);
+                        String statement = fieldName + "=" + value;
+                        matchTokens.add(statement);
+                    } catch (IllegalAccessException e) {
+                        Log.e(e.getClass().getName(), e);
+                    }
+                }
+                matchStatement = TextUtils.join(" AND ",matchTokens);
+            }
+
+            db.update(mTableInfo.getTableName(), values, matchStatement, null);
+
+        }
 
 		Cache.getContext().getContentResolver()
 				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mId), null);
diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index 32d1ecb3..0d43cd10 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -16,6 +16,13 @@
  * limitations under the License.
  */
 
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.activeandroid.annotation.Column;
+import com.activeandroid.annotation.Table;
+import com.activeandroid.util.ReflectionUtils;
+
 import java.lang.reflect.Field;
 import java.util.Collection;
 import java.util.Collections;
@@ -24,13 +31,6 @@
 import java.util.List;
 import java.util.Map;
 
-import android.text.TextUtils;
-import android.util.Log;
-
-import com.activeandroid.annotation.Column;
-import com.activeandroid.annotation.Table;
-import com.activeandroid.util.ReflectionUtils;
-
 public final class TableInfo {
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PRIVATE MEMBERS
@@ -41,8 +41,8 @@
 	private String mIdName = Table.DEFAULT_ID_NAME;
 
 	private Map<Field, String> mColumnNames = new LinkedHashMap<Field, String>();
-
-	//////////////////////////////////////////////////////////////////////////////////////
+    private Map<Field,String> mMatchValues = new LinkedHashMap<Field, String>();
+    //////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
 
@@ -73,6 +73,9 @@ public TableInfo(Class<? extends Model> type) {
                 if (TextUtils.isEmpty(columnName)) {
                     columnName = field.getName();
                 }
+                if(columnAnnotation.matchvalue()){
+                    mMatchValues.put(field,columnName);
+                }
 
                 mColumnNames.put(field, columnName);
             }
@@ -121,4 +124,11 @@ else if (type.getSuperclass() != null) {
         return null;
     }
 
+    public boolean hasMatchValue() {
+        return !mMatchValues.isEmpty();
+    }
+
+    public java.util.Set<Field> getMatchValue() {
+        return mMatchValues.keySet();
+    }
 }
diff --git a/src/com/activeandroid/annotation/Column.java b/src/com/activeandroid/annotation/Column.java
index 56bbcde8..b4fdf3d4 100644
--- a/src/com/activeandroid/annotation/Column.java
+++ b/src/com/activeandroid/annotation/Column.java
@@ -48,6 +48,8 @@
 
 	public ConflictAction onUniqueConflict() default ConflictAction.FAIL;
 
+    public boolean matchvalue() default false;
+
 	/*
 	 * If set uniqueGroups = {"group_name"}, we will create a table constraint with group.
 	 *
diff --git a/tests/src/com/activeandroid/test/MockModel.java b/tests/src/com/activeandroid/test/MockModel.java
index ff61dde3..93a40f16 100644
--- a/tests/src/com/activeandroid/test/MockModel.java
+++ b/tests/src/com/activeandroid/test/MockModel.java
@@ -35,4 +35,10 @@
 
     @Column
     public boolean booleanField;
+
+    @Column
+    public String stringField;
+
+    @Column(matchvalue =true)
+    public String matchField;
 }
diff --git a/tests/src/com/activeandroid/test/ModelTest.java b/tests/src/com/activeandroid/test/ModelTest.java
index e66690d8..f33b10ce 100644
--- a/tests/src/com/activeandroid/test/ModelTest.java
+++ b/tests/src/com/activeandroid/test/ModelTest.java
@@ -173,6 +173,31 @@ public void testBooleanColumnType() {
         assertNull( new Select().from(MockModel.class).where("booleanField = ?", true).executeSingle() );
     }
 
+    /**public void testMatchValueColumn(){
+        MockModel m1 = new MockModel();
+        m1.matchField="testkey"
+        m1.intField=45;
+        m1.stringField="testField";
+        Long id = m1.save();
+
+
+        MockModel databaseMockModel = MockModel.load( MockModel.class, id );
+        assertTrue(databaseMockModel.equals(m1));
+
+        MockModel m2 = new MockModel();
+        m2.matchField="testkey"
+        m2.intField=44;
+        m2.stringField="testField2";
+        Long id2 = m2.save();
+
+        MockModel databaseMockModel = MockModel.load( MockModel.class, id );
+
+        assertFalse(databaseMockModel.equals(m1));
+        assertTrue(databaseMockModel.equals(m2));
+        assertTrue(id1==id2);
+
+    }*/
+
 	/**
      * Test to check the join of two (or more) tables with some fields in common when not use a projection on select.
      * Test the issue #106 (https://github.com/pardom/ActiveAndroid/issues/106)
