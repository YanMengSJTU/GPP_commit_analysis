diff --git a/proactiveandroid/.gitignore b/proactiveandroid/.gitignore
new file mode 100644
index 00000000..796b96d1
--- /dev/null
+++ b/proactiveandroid/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/proactiveandroid/build.gradle b/proactiveandroid/build.gradle
new file mode 100644
index 00000000..0d4d62c0
--- /dev/null
+++ b/proactiveandroid/build.gradle
@@ -0,0 +1,50 @@
+apply plugin: 'com.android.library'
+
+
+ext {
+    bintrayRepo = 'maven'
+    bintrayName = 'proactiveandroid'
+
+    publishedGroupId = 'com.SearingMedia.proactiveandroid'
+    libraryName = 'ProactiveAndroid'
+    artifact = 'proactiveandroid'
+
+    libraryDescription = 'A fork of ActiveAndroid which exposes more functionality'
+
+    siteUrl = 'https://github.com/RileyGB/ProactiveAndroid'
+    gitUrl = 'https://github.com/RileyGB/ProactiveAndroid.git'
+
+    libraryVersion = '0.1'
+
+    developerId = 'rackerman'
+    developerName = 'Riley Ackerman'
+    developerEmail = 'r.ackerman@searingmedia.com'
+
+    licenseName = 'The Apache Software License, Version 2.0'
+    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
+    allLicenses = ["Apache-2.0"]
+}
+
+android {
+    compileSdkVersion 23
+    buildToolsVersion "23.0.2"
+
+    defaultConfig {
+        minSdkVersion 19
+        targetSdkVersion 23
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+}
+
+dependencies {
+    compile 'com.android.support:support-v4:23.2.1'
+}
+
+
+apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle'
+apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle'
\ No newline at end of file
diff --git a/proactiveandroid/proguard-rules.pro b/proactiveandroid/proguard-rules.pro
new file mode 100644
index 00000000..061f8023
--- /dev/null
+++ b/proactiveandroid/proguard-rules.pro
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in C:\android\sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/proactiveandroid/src/main/AndroidManifest.xml b/proactiveandroid/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..00fd450c
--- /dev/null
+++ b/proactiveandroid/src/main/AndroidManifest.xml
@@ -0,0 +1,7 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+          package="com.SearingMedia.proactiveandroid">
+
+    <application android:allowBackup="true">
+    </application>
+
+</manifest>
diff --git a/src/com/activeandroid/Cache.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/Cache.java
similarity index 75%
rename from src/com/activeandroid/Cache.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/Cache.java
index 6495e379..c8894104 100644
--- a/src/com/activeandroid/Cache.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/Cache.java
@@ -1,4 +1,4 @@
-package com.activeandroid;
+package com.SearingMedia.proactiveandroid;
 
 /*
  * Copyright (C) 2010 Michael Pardo
@@ -16,14 +16,14 @@
  * limitations under the License.
  */
 
-import java.util.Collection;
-
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 import android.support.v4.util.LruCache;
 
-import com.activeandroid.serializer.TypeSerializer;
-import com.activeandroid.util.Log;
+import com.SearingMedia.proactiveandroid.serializer.TypeSerializer;
+import com.SearingMedia.proactiveandroid.util.Log;
+
+import java.util.Collection;
 
 public final class Cache {
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -39,9 +39,9 @@
 	private static Context sContext;
 
 	private static ModelInfo sModelInfo;
-	private static DatabaseHelper sDatabaseHelper;
+	private static com.proactiveandroid.DatabaseHelper sDatabaseHelper;
 
-	private static LruCache<String, Model> sEntities;
+	private static LruCache<String, com.proactiveandroid.Model> sEntities;
 
 	private static boolean sIsInitialized = false;
 
@@ -64,13 +64,13 @@ public static synchronized void initialize(Configuration configuration) {
 
 		sContext = configuration.getContext();
 		sModelInfo = new ModelInfo(configuration);
-		sDatabaseHelper = new DatabaseHelper(configuration);
+		sDatabaseHelper = new com.proactiveandroid.DatabaseHelper(configuration);
 
 		// TODO: It would be nice to override sizeOf here and calculate the memory
 		// actually used, however at this point it seems like the reflection
 		// required would be too costly to be of any benefit. We'll just set a max
 		// object size instead.
-		sEntities = new LruCache<String, Model>(configuration.getCacheSize());
+		sEntities = new LruCache<String, com.proactiveandroid.Model>(configuration.getCacheSize());
 
 		openDatabase();
 
@@ -118,33 +118,33 @@ public static Context getContext() {
 
 	// Entity cache
 
-	public static String getIdentifier(Class<? extends Model> type, Long id) {
+	public static String getIdentifier(Class<? extends com.proactiveandroid.Model> type, Long id) {
 		return getTableName(type) + "@" + id;
 	}
 
-	public static String getIdentifier(Model entity) {
+	public static String getIdentifier(com.proactiveandroid.Model entity) {
 		return getIdentifier(entity.getClass(), entity.getId());
 	}
 
-	public static synchronized void addEntity(Model entity) {
+	public static synchronized void addEntity(com.proactiveandroid.Model entity) {
 		sEntities.put(getIdentifier(entity), entity);
 	}
 
-	public static synchronized Model getEntity(Class<? extends Model> type, long id) {
+	public static synchronized com.proactiveandroid.Model getEntity(Class<? extends com.proactiveandroid.Model> type, long id) {
 		return sEntities.get(getIdentifier(type, id));
 	}
 
-	public static synchronized void removeEntity(Model entity) {
+	public static synchronized void removeEntity(com.proactiveandroid.Model entity) {
 		sEntities.remove(getIdentifier(entity));
 	}
 
 	// Model cache
 
-	public static synchronized Collection<TableInfo> getTableInfos() {
+	public static synchronized Collection<com.proactiveandroid.TableInfo> getTableInfos() {
 		return sModelInfo.getTableInfos();
 	}
 
-	public static synchronized TableInfo getTableInfo(Class<? extends Model> type) {
+	public static synchronized com.proactiveandroid.TableInfo getTableInfo(Class<? extends com.proactiveandroid.Model> type) {
 		return sModelInfo.getTableInfo(type);
 	}
 
@@ -152,7 +152,7 @@ public static synchronized TypeSerializer getParserForType(Class<?> type) {
 		return sModelInfo.getTypeSerializer(type);
 	}
 
-	public static synchronized String getTableName(Class<? extends Model> type) {
+	public static synchronized String getTableName(Class<? extends com.proactiveandroid.Model> type) {
 		return sModelInfo.getTableInfo(type).getTableName();
 	}
 }
diff --git a/src/com/activeandroid/Configuration.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/Configuration.java
similarity index 88%
rename from src/com/activeandroid/Configuration.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/Configuration.java
index b197d223..def32afd 100644
--- a/src/com/activeandroid/Configuration.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/Configuration.java
@@ -1,4 +1,4 @@
-package com.activeandroid;
+package com.SearingMedia.proactiveandroid;
 
 /*
  * Copyright (C) 2010 Michael Pardo
@@ -16,16 +16,16 @@
  * limitations under the License.
  */
 
+import android.content.Context;
+
+import com.SearingMedia.proactiveandroid.serializer.TypeSerializer;
+import com.SearingMedia.proactiveandroid.util.Log;
+import com.SearingMedia.proactiveandroid.util.ReflectionUtils;
+
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
-import android.content.Context;
-
-import com.activeandroid.serializer.TypeSerializer;
-import com.activeandroid.util.Log;
-import com.activeandroid.util.ReflectionUtils;
-
 public class Configuration {
 
     public final static String SQL_PARSER_LEGACY = "legacy";
@@ -39,7 +39,7 @@
 	private String mDatabaseName;
 	private int mDatabaseVersion;
 	private String mSqlParser;
-	private List<Class<? extends Model>> mModelClasses;
+	private List<Class<? extends com.proactiveandroid.Model>> mModelClasses;
 	private List<Class<? extends TypeSerializer>> mTypeSerializers;
 	private int mCacheSize;
 
@@ -71,7 +71,7 @@ public String getSqlParser() {
 	    return mSqlParser;
 	}
 
-	public List<Class<? extends Model>> getModelClasses() {
+	public List<Class<? extends com.proactiveandroid.Model>> getModelClasses() {
 		return mModelClasses;
 	}
 
@@ -116,7 +116,7 @@ public boolean isValid() {
 		private String mDatabaseName;
 		private Integer mDatabaseVersion;
 		private String mSqlParser;
-		private List<Class<? extends Model>> mModelClasses;
+		private List<Class<? extends com.proactiveandroid.Model>> mModelClasses;
 		private List<Class<? extends TypeSerializer>> mTypeSerializers;
 
 		//////////////////////////////////////////////////////////////////////////////////////
@@ -152,25 +152,25 @@ public Builder setSqlParser(String sqlParser) {
 		    return this;
 		}
 
-		public Builder addModelClass(Class<? extends Model> modelClass) {
+		public Builder addModelClass(Class<? extends com.proactiveandroid.Model> modelClass) {
 			if (mModelClasses == null) {
-				mModelClasses = new ArrayList<Class<? extends Model>>();
+				mModelClasses = new ArrayList<Class<? extends com.proactiveandroid.Model>>();
 			}
 
 			mModelClasses.add(modelClass);
 			return this;
 		}
 
-		public Builder addModelClasses(Class<? extends Model>... modelClasses) {
+		public Builder addModelClasses(Class<? extends com.proactiveandroid.Model>... modelClasses) {
 			if (mModelClasses == null) {
-				mModelClasses = new ArrayList<Class<? extends Model>>();
+				mModelClasses = new ArrayList<Class<? extends com.proactiveandroid.Model>>();
 			}
 
 			mModelClasses.addAll(Arrays.asList(modelClasses));
 			return this;
 		}
 
-		public Builder setModelClasses(Class<? extends Model>... modelClasses) {
+		public Builder setModelClasses(Class<? extends com.proactiveandroid.Model>... modelClasses) {
 			mModelClasses = Arrays.asList(modelClasses);
 			return this;
 		}
@@ -278,8 +278,8 @@ private String getMetaDataSqlParserOrDefault() {
 		    return mode;
 		}
 
-		private List<Class<? extends Model>> loadModelList(String[] models) {
-			final List<Class<? extends Model>> modelClasses = new ArrayList<Class<? extends Model>>();
+		private List<Class<? extends com.proactiveandroid.Model>> loadModelList(String[] models) {
+			final List<Class<? extends com.proactiveandroid.Model>> modelClasses = new ArrayList<Class<? extends com.proactiveandroid.Model>>();
 			final ClassLoader classLoader = mContext.getClass().getClassLoader();
 			for (String model : models) {
 				try {
diff --git a/src/com/activeandroid/DatabaseHelper.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/DatabaseHelper.java
similarity index 93%
rename from src/com/activeandroid/DatabaseHelper.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/DatabaseHelper.java
index 7158c5bb..0eed46ff 100644
--- a/src/com/activeandroid/DatabaseHelper.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/DatabaseHelper.java
@@ -1,4 +1,4 @@
-package com.activeandroid;
+package com.SearingMedia.proactiveandroid;
 
 /*
  * Copyright (C) 2010 Michael Pardo
@@ -16,6 +16,17 @@
  * limitations under the License.
  */
 
+import android.content.Context;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+import android.text.TextUtils;
+
+import com.SearingMedia.proactiveandroid.util.IOUtils;
+import com.SearingMedia.proactiveandroid.util.Log;
+import com.SearingMedia.proactiveandroid.util.NaturalOrderComparator;
+import com.SearingMedia.proactiveandroid.util.SQLiteUtils;
+import com.SearingMedia.proactiveandroid.util.SqlParser;
+
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileOutputStream;
@@ -27,17 +38,6 @@
 import java.util.Collections;
 import java.util.List;
 
-import android.content.Context;
-import android.database.sqlite.SQLiteDatabase;
-import android.database.sqlite.SQLiteOpenHelper;
-import android.text.TextUtils;
-
-import com.activeandroid.util.IOUtils;
-import com.activeandroid.util.Log;
-import com.activeandroid.util.NaturalOrderComparator;
-import com.activeandroid.util.SQLiteUtils;
-import com.activeandroid.util.SqlParser;
-
 public final class DatabaseHelper extends SQLiteOpenHelper {
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC CONSTANTS
@@ -135,7 +135,7 @@ private void executePragmas(SQLiteDatabase db) {
 	private void executeCreateIndex(SQLiteDatabase db) {
 		db.beginTransaction();
 		try {
-			for (TableInfo tableInfo : Cache.getTableInfos()) {
+			for (com.proactiveandroid.TableInfo tableInfo : Cache.getTableInfos()) {
 				String[] definitions = SQLiteUtils.createIndexDefinition(tableInfo);
 
 				for (String definition : definitions) {
@@ -152,7 +152,7 @@ private void executeCreateIndex(SQLiteDatabase db) {
 	private void executeCreate(SQLiteDatabase db) {
 		db.beginTransaction();
 		try {
-			for (TableInfo tableInfo : Cache.getTableInfos()) {
+			for (com.proactiveandroid.TableInfo tableInfo : Cache.getTableInfos()) {
 				db.execSQL(SQLiteUtils.createTableDefinition(tableInfo));
 			}
 			db.setTransactionSuccessful();
diff --git a/src/com/activeandroid/Model.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/Model.java
similarity index 94%
rename from src/com/activeandroid/Model.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/Model.java
index 421426ea..61e58942 100644
--- a/src/com/activeandroid/Model.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/Model.java
@@ -1,4 +1,4 @@
-package com.activeandroid;
+package com.SearingMedia.proactiveandroid;
 
 /*
  * Copyright (C) 2010 Michael Pardo
@@ -20,12 +20,12 @@
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 
-import com.activeandroid.content.ContentProvider;
-import com.activeandroid.query.Delete;
-import com.activeandroid.query.Select;
-import com.activeandroid.serializer.TypeSerializer;
-import com.activeandroid.util.Log;
-import com.activeandroid.util.ReflectionUtils;
+import com.SearingMedia.proactiveandroid.content.ContentProvider;
+import com.SearingMedia.proactiveandroid.query.Delete;
+import com.SearingMedia.proactiveandroid.query.Select;
+import com.SearingMedia.proactiveandroid.serializer.TypeSerializer;
+import com.SearingMedia.proactiveandroid.util.Log;
+import com.SearingMedia.proactiveandroid.util.ReflectionUtils;
 
 import java.lang.reflect.Field;
 import java.util.ArrayList;
@@ -44,7 +44,7 @@
 
 	private Long mId = null;
 
-	private final TableInfo mTableInfo;
+	private final com.proactiveandroid.TableInfo mTableInfo;
 	private final String idName;
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
@@ -166,12 +166,12 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 	// Convenience methods
 
 	public static void delete(Class<? extends Model> type, long id) {
-		TableInfo tableInfo = Cache.getTableInfo(type);
+		com.proactiveandroid.TableInfo tableInfo = Cache.getTableInfo(type);
 		new Delete().from(type).where(tableInfo.getIdName()+"=?", id).execute();
 	}
 
 	public static <T extends Model> T load(Class<T> type, long id) {
-		TableInfo tableInfo = Cache.getTableInfo(type);
+		com.proactiveandroid.TableInfo tableInfo = Cache.getTableInfo(type);
 		return (T) new Select().from(type).where(tableInfo.getIdName()+"=?", id).executeSingle();
 	}
 
diff --git a/src/com/activeandroid/ModelInfo.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/ModelInfo.java
similarity index 85%
rename from src/com/activeandroid/ModelInfo.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/ModelInfo.java
index 09e79117..b17fd859 100644
--- a/src/com/activeandroid/ModelInfo.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/ModelInfo.java
@@ -1,4 +1,4 @@
-package com.activeandroid;
+package com.SearingMedia.proactiveandroid;
 
 /*
  * Copyright (C) 2010 Michael Pardo
@@ -16,6 +16,16 @@
  * limitations under the License.
  */
 
+import android.content.Context;
+
+import com.SearingMedia.proactiveandroid.serializer.CalendarSerializer;
+import com.SearingMedia.proactiveandroid.serializer.FileSerializer;
+import com.SearingMedia.proactiveandroid.serializer.SqlDateSerializer;
+import com.SearingMedia.proactiveandroid.serializer.TypeSerializer;
+import com.SearingMedia.proactiveandroid.serializer.UtilDateSerializer;
+import com.SearingMedia.proactiveandroid.util.Log;
+import com.SearingMedia.proactiveandroid.util.ReflectionUtils;
+
 import java.io.File;
 import java.io.IOException;
 import java.net.URL;
@@ -27,15 +37,6 @@
 import java.util.List;
 import java.util.Map;
 
-import android.content.Context;
-
-import com.activeandroid.serializer.CalendarSerializer;
-import com.activeandroid.serializer.SqlDateSerializer;
-import com.activeandroid.serializer.TypeSerializer;
-import com.activeandroid.serializer.UtilDateSerializer;
-import com.activeandroid.serializer.FileSerializer;
-import com.activeandroid.util.Log;
-import com.activeandroid.util.ReflectionUtils;
 import dalvik.system.DexFile;
 
 final class ModelInfo {
@@ -43,7 +44,7 @@
 	// PRIVATE METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	private Map<Class<? extends Model>, TableInfo> mTableInfos = new HashMap<Class<? extends Model>, TableInfo>();
+	private Map<Class<? extends Model>, com.proactiveandroid.TableInfo> mTableInfos = new HashMap<Class<? extends Model>, com.proactiveandroid.TableInfo>();
 	private Map<Class<?>, TypeSerializer> mTypeSerializers = new HashMap<Class<?>, TypeSerializer>() {
 		{
 			put(Calendar.class, new CalendarSerializer());
@@ -74,11 +75,11 @@ public ModelInfo(Configuration configuration) {
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	public Collection<TableInfo> getTableInfos() {
+	public Collection<com.proactiveandroid.TableInfo> getTableInfos() {
 		return mTableInfos.values();
 	}
 
-	public TableInfo getTableInfo(Class<? extends Model> type) {
+	public com.proactiveandroid.TableInfo getTableInfo(Class<? extends Model> type) {
 		return mTableInfos.get(type);
 	}
 
@@ -98,7 +99,7 @@ private boolean loadModelFromMetaData(Configuration configuration) {
 		final List<Class<? extends Model>> models = configuration.getModelClasses();
 		if (models != null) {
 			for (Class<? extends Model> model : models) {
-				mTableInfos.put(model, new TableInfo(model));
+				mTableInfos.put(model, new com.proactiveandroid.TableInfo(model));
 			}
 		}
 
@@ -188,7 +189,7 @@ private void scanForModelClasses(File path, String packageName, ClassLoader clas
 				if (ReflectionUtils.isModel(discoveredClass)) {
 					@SuppressWarnings("unchecked")
 					Class<? extends Model> modelClass = (Class<? extends Model>) discoveredClass;
-					mTableInfos.put(modelClass, new TableInfo(modelClass));
+					mTableInfos.put(modelClass, new com.proactiveandroid.TableInfo(modelClass));
 				}
 				else if (ReflectionUtils.isTypeSerializer(discoveredClass)) {
 					TypeSerializer instance = (TypeSerializer) discoveredClass.newInstance();
diff --git a/src/com/activeandroid/ActiveAndroid.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/ProactiveAndroid.java
similarity index 94%
rename from src/com/activeandroid/ActiveAndroid.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/ProactiveAndroid.java
index c58c8efd..af4c08eb 100644
--- a/src/com/activeandroid/ActiveAndroid.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/ProactiveAndroid.java
@@ -1,4 +1,4 @@
-package com.activeandroid;
+package com.SearingMedia.proactiveandroid;
 
 /*
  * Copyright (C) 2010 Michael Pardo
@@ -19,9 +19,9 @@
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 
-import com.activeandroid.util.Log;
+import com.SearingMedia.proactiveandroid.util.Log;
 
-public final class ActiveAndroid {
+public final class ProactiveAndroid {
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
diff --git a/src/com/activeandroid/TableInfo.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/TableInfo.java
similarity index 93%
rename from src/com/activeandroid/TableInfo.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/TableInfo.java
index 32d1ecb3..345ce8b8 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/TableInfo.java
@@ -1,4 +1,4 @@
-package com.activeandroid;
+package com.SearingMedia.proactiveandroid;
 
 /*
  * Copyright (C) 2010 Michael Pardo
@@ -16,6 +16,13 @@
  * limitations under the License.
  */
 
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.SearingMedia.proactiveandroid.annotation.Column;
+import com.SearingMedia.proactiveandroid.annotation.Table;
+import com.SearingMedia.proactiveandroid.util.ReflectionUtils;
+
 import java.lang.reflect.Field;
 import java.util.Collection;
 import java.util.Collections;
@@ -24,13 +31,6 @@
 import java.util.List;
 import java.util.Map;
 
-import android.text.TextUtils;
-import android.util.Log;
-
-import com.activeandroid.annotation.Column;
-import com.activeandroid.annotation.Table;
-import com.activeandroid.util.ReflectionUtils;
-
 public final class TableInfo {
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PRIVATE MEMBERS
diff --git a/src/com/activeandroid/annotation/Column.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/annotation/Column.java
similarity index 98%
rename from src/com/activeandroid/annotation/Column.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/annotation/Column.java
index 56bbcde8..6cebac24 100644
--- a/src/com/activeandroid/annotation/Column.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/annotation/Column.java
@@ -1,4 +1,4 @@
-package com.activeandroid.annotation;
+package com.SearingMedia.proactiveandroid.annotation;
 
 /*
  * Copyright (C) 2010 Michael Pardo
diff --git a/src/com/activeandroid/annotation/Table.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/annotation/Table.java
similarity index 94%
rename from src/com/activeandroid/annotation/Table.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/annotation/Table.java
index 541dfbe9..009e1577 100644
--- a/src/com/activeandroid/annotation/Table.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/annotation/Table.java
@@ -1,4 +1,4 @@
-package com.activeandroid.annotation;
+package com.SearingMedia.proactiveandroid.annotation;
 
 /*
  * Copyright (C) 2010 Michael Pardo
diff --git a/src/com/activeandroid/app/Application.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/app/Application.java
similarity index 81%
rename from src/com/activeandroid/app/Application.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/app/Application.java
index 311c7c93..3f45a81a 100644
--- a/src/com/activeandroid/app/Application.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/app/Application.java
@@ -1,4 +1,4 @@
-package com.activeandroid.app;
+package com.SearingMedia.proactiveandroid.app;
 
 /*
  * Copyright (C) 2010 Michael Pardo
@@ -16,18 +16,18 @@
  * limitations under the License.
  */
 
-import com.activeandroid.ActiveAndroid;
+import com.SearingMedia.proactiveandroid.ProactiveAndroid;
 
 public class Application extends android.app.Application {
 	@Override
 	public void onCreate() {
 		super.onCreate();
-		ActiveAndroid.initialize(this);
+		ProactiveAndroid.initialize(this);
 	}
 	
 	@Override
 	public void onTerminate() {
 		super.onTerminate();
-		ActiveAndroid.dispose();
+		ProactiveAndroid.dispose();
 	}
 }
\ No newline at end of file
diff --git a/src/com/activeandroid/content/ContentProvider.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/content/ContentProvider.java
similarity index 93%
rename from src/com/activeandroid/content/ContentProvider.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/content/ContentProvider.java
index b4a841d6..5efefdcb 100644
--- a/src/com/activeandroid/content/ContentProvider.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/content/ContentProvider.java
@@ -1,4 +1,4 @@
-package com.activeandroid.content;
+package com.SearingMedia.proactiveandroid.content;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -9,11 +9,11 @@
 import android.net.Uri;
 import android.util.SparseArray;
 
-import com.activeandroid.ActiveAndroid;
-import com.activeandroid.Cache;
-import com.activeandroid.Configuration;
-import com.activeandroid.Model;
-import com.activeandroid.TableInfo;
+import com.SearingMedia.proactiveandroid.ProactiveAndroid;
+import com.SearingMedia.proactiveandroid.Cache;
+import com.SearingMedia.proactiveandroid.Configuration;
+import com.SearingMedia.proactiveandroid.Model;
+import com.SearingMedia.proactiveandroid.TableInfo;
 
 public class ContentProvider extends android.content.ContentProvider {
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -36,7 +36,7 @@
 
 	@Override
 	public boolean onCreate() {
-		ActiveAndroid.initialize(getConfiguration());
+		ProactiveAndroid.initialize(getConfiguration());
 		sAuthority = getAuthority();
 
 		final List<TableInfo> tableInfos = new ArrayList<TableInfo>(Cache.getTableInfos());
diff --git a/src/com/activeandroid/query/Delete.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/query/Delete.java
similarity index 69%
rename from src/com/activeandroid/query/Delete.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/query/Delete.java
index 6d19dced..285d85c3 100644
--- a/src/com/activeandroid/query/Delete.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/query/Delete.java
@@ -1,4 +1,4 @@
-package com.activeandroid.query;
+package com.SearingMedia.proactiveandroid.query;
 
 /*
  * Copyright (C) 2010 Michael Pardo
@@ -16,14 +16,14 @@
  * limitations under the License.
  */
 
-import com.activeandroid.Model;
+import com.SearingMedia.proactiveandroid.Model;
 
-public final class Delete implements Sqlable {
+public final class Delete implements com.proactiveandroid.query.Sqlable {
 	public Delete() {
 	}
 
-	public From from(Class<? extends Model> table) {
-		return new From(table, this);
+	public com.proactiveandroid.query.From from(Class<? extends Model> table) {
+		return new com.proactiveandroid.query.From(table, this);
 	}
 
 	@Override
diff --git a/src/com/activeandroid/query/From.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/query/From.java
similarity index 91%
rename from src/com/activeandroid/query/From.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/query/From.java
index ab3837a9..3dd94cf2 100644
--- a/src/com/activeandroid/query/From.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/query/From.java
@@ -1,4 +1,4 @@
-package com.activeandroid.query;
+package com.SearingMedia.proactiveandroid.query;
 
 /*
  * Copyright (C) 2010 Michael Pardo
@@ -18,18 +18,18 @@
 
 import android.text.TextUtils;
 
-import com.activeandroid.Cache;
-import com.activeandroid.Model;
-import com.activeandroid.content.ContentProvider;
-import com.activeandroid.query.Join.JoinType;
-import com.activeandroid.util.Log;
-import com.activeandroid.util.SQLiteUtils;
+import com.SearingMedia.proactiveandroid.Cache;
+import com.SearingMedia.proactiveandroid.Model;
+import com.SearingMedia.proactiveandroid.content.ContentProvider;
+import com.SearingMedia.proactiveandroid.query.Join.JoinType;
+import com.SearingMedia.proactiveandroid.util.Log;
+import com.SearingMedia.proactiveandroid.util.SQLiteUtils;
 
 import java.util.ArrayList;
 import java.util.List;
 
-public final class From implements Sqlable {
-	private Sqlable mQueryBase;
+public final class From implements com.proactiveandroid.query.Sqlable {
+	private com.proactiveandroid.query.Sqlable mQueryBase;
 
 	private Class<? extends Model> mType;
 	private String mAlias;
@@ -43,7 +43,7 @@
 
 	private List<Object> mArguments;
 
-	public From(Class<? extends Model> table, Sqlable queryBase) {
+	public From(Class<? extends Model> table, com.proactiveandroid.query.Sqlable queryBase) {
 		mType = table;
 		mJoins = new ArrayList<Join>();
 		mQueryBase = queryBase;
@@ -294,7 +294,7 @@ public String toCountSql() {
     }
 
 	public <T extends Model> List<T> execute() {
-		if (mQueryBase instanceof Select) {
+		if (mQueryBase instanceof com.proactiveandroid.query.Select) {
 			return SQLiteUtils.rawQuery(mType, toSql(), getArguments());
 			
 		} else {
@@ -306,7 +306,7 @@ public String toCountSql() {
 	}
 
 	public <T extends Model> T executeSingle() {
-		if (mQueryBase instanceof Select) {
+		if (mQueryBase instanceof com.proactiveandroid.query.Select) {
 			limit(1);
 			return (T) SQLiteUtils.rawQuerySingle(mType, toSql(), getArguments());
 			
diff --git a/src/com/activeandroid/query/Join.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/query/Join.java
similarity index 89%
rename from src/com/activeandroid/query/Join.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/query/Join.java
index 13cdba3b..ead6a598 100644
--- a/src/com/activeandroid/query/Join.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/query/Join.java
@@ -1,4 +1,4 @@
-package com.activeandroid.query;
+package com.SearingMedia.proactiveandroid.query;
 
 /*
  * Copyright (C) 2010 Michael Pardo
@@ -18,10 +18,10 @@
 
 import android.text.TextUtils;
 
-import com.activeandroid.Cache;
-import com.activeandroid.Model;
+import com.SearingMedia.proactiveandroid.Cache;
+import com.SearingMedia.proactiveandroid.Model;
 
-public final class Join implements Sqlable {
+public final class Join implements com.proactiveandroid.query.Sqlable {
 	static enum JoinType {
 		LEFT, OUTER, INNER, CROSS
 	}
diff --git a/src/com/activeandroid/query/Select.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/query/Select.java
similarity index 91%
rename from src/com/activeandroid/query/Select.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/query/Select.java
index 1d4c6488..025cd32d 100644
--- a/src/com/activeandroid/query/Select.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/query/Select.java
@@ -1,4 +1,4 @@
-package com.activeandroid.query;
+package com.SearingMedia.proactiveandroid.query;
 
 /*
  * Copyright (C) 2010 Michael Pardo
@@ -18,9 +18,9 @@
 
 import android.text.TextUtils;
 
-import com.activeandroid.Model;
+import com.SearingMedia.proactiveandroid.Model;
 
-public final class Select implements Sqlable {
+public final class Select implements com.proactiveandroid.query.Sqlable {
 	private String[] mColumns;
 	private boolean mDistinct = false;
 	private boolean mAll = false;
diff --git a/src/com/activeandroid/query/Set.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/query/Set.java
similarity index 84%
rename from src/com/activeandroid/query/Set.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/query/Set.java
index 183d99f0..25025faf 100644
--- a/src/com/activeandroid/query/Set.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/query/Set.java
@@ -1,4 +1,4 @@
-package com.activeandroid.query;
+package com.SearingMedia.proactiveandroid.query;
 
 /*
  * Copyright (C) 2010 Michael Pardo
@@ -16,14 +16,14 @@
  * limitations under the License.
  */
 
-import com.activeandroid.util.SQLiteUtils;
+import com.SearingMedia.proactiveandroid.util.SQLiteUtils;
 
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
-public final class Set implements Sqlable {
-	private Update mUpdate;
+public final class Set implements com.proactiveandroid.query.Sqlable {
+	private com.proactiveandroid.query.Update mUpdate;
 
 	private String mSet;
 	private String mWhere;
@@ -31,7 +31,7 @@
 	private List<Object> mSetArguments;
 	private List<Object> mWhereArguments;
 
-	public Set(Update queryBase, String set) {
+	public Set(com.proactiveandroid.query.Update queryBase, String set) {
 		mUpdate = queryBase;
 		mSet = set;
 
@@ -39,7 +39,7 @@ public Set(Update queryBase, String set) {
 		mWhereArguments = new ArrayList<Object>();
 	}
 
-	public Set(Update queryBase, String set, Object... args) {
+	public Set(com.proactiveandroid.query.Update queryBase, String set, Object... args) {
 		mUpdate = queryBase;
 		mSet = set;
 
diff --git a/src/com/activeandroid/query/Sqlable.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/query/Sqlable.java
similarity index 92%
rename from src/com/activeandroid/query/Sqlable.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/query/Sqlable.java
index 2c3f5d43..330aab16 100644
--- a/src/com/activeandroid/query/Sqlable.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/query/Sqlable.java
@@ -1,4 +1,4 @@
-package com.activeandroid.query;
+package com.SearingMedia.proactiveandroid.query;
 
 /*
  * Copyright (C) 2010 Michael Pardo
diff --git a/src/com/activeandroid/query/Update.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/query/Update.java
similarity index 88%
rename from src/com/activeandroid/query/Update.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/query/Update.java
index a69d2d8e..70c4d4b7 100644
--- a/src/com/activeandroid/query/Update.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/query/Update.java
@@ -1,4 +1,4 @@
-package com.activeandroid.query;
+package com.SearingMedia.proactiveandroid.query;
 
 /*
  * Copyright (C) 2010 Michael Pardo
@@ -16,8 +16,8 @@
  * limitations under the License.
  */
 
-import com.activeandroid.Cache;
-import com.activeandroid.Model;
+import com.SearingMedia.proactiveandroid.Cache;
+import com.SearingMedia.proactiveandroid.Model;
 
 public final class Update implements Sqlable {
 	private Class<? extends Model> mType;
diff --git a/src/com/activeandroid/serializer/BigDecimalSerializer.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/serializer/BigDecimalSerializer.java
similarity index 73%
rename from src/com/activeandroid/serializer/BigDecimalSerializer.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/serializer/BigDecimalSerializer.java
index 333f900f..29b26b6a 100644
--- a/src/com/activeandroid/serializer/BigDecimalSerializer.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/serializer/BigDecimalSerializer.java
@@ -1,8 +1,8 @@
-package com.activeandroid.serializer;
+package com.SearingMedia.proactiveandroid.serializer;
 
 import java.math.BigDecimal;
 
-public final class BigDecimalSerializer extends TypeSerializer {
+public final class BigDecimalSerializer extends com.proactiveandroid.serializer.TypeSerializer {
 	public Class<?> getDeserializedType() {
 		return BigDecimal.class;
 	}
diff --git a/src/com/activeandroid/serializer/CalendarSerializer.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/serializer/CalendarSerializer.java
similarity index 87%
rename from src/com/activeandroid/serializer/CalendarSerializer.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/serializer/CalendarSerializer.java
index 55509bd0..e7ce9477 100644
--- a/src/com/activeandroid/serializer/CalendarSerializer.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/serializer/CalendarSerializer.java
@@ -1,4 +1,4 @@
-package com.activeandroid.serializer;
+package com.SearingMedia.proactiveandroid.serializer;
 
 /*
  * Copyright (C) 2010 Michael Pardo
@@ -18,7 +18,7 @@
 
 import java.util.Calendar;
 
-public final class CalendarSerializer extends TypeSerializer {
+public final class CalendarSerializer extends com.proactiveandroid.serializer.TypeSerializer {
 	public Class<?> getDeserializedType() {
 		return Calendar.class;
 	}
diff --git a/src/com/activeandroid/serializer/FileSerializer.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/serializer/FileSerializer.java
similarity index 87%
rename from src/com/activeandroid/serializer/FileSerializer.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/serializer/FileSerializer.java
index 0aed072c..3d68b171 100644
--- a/src/com/activeandroid/serializer/FileSerializer.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/serializer/FileSerializer.java
@@ -1,4 +1,4 @@
-package com.activeandroid.serializer;
+package com.SearingMedia.proactiveandroid.serializer;
 
 import java.io.File;
 
@@ -19,7 +19,7 @@
  */
 
 
-public final class FileSerializer extends TypeSerializer {
+public final class FileSerializer extends com.proactiveandroid.serializer.TypeSerializer {
 	public Class<?> getDeserializedType() {
 		return File.class;
 	}
diff --git a/src/com/activeandroid/serializer/SqlDateSerializer.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/serializer/SqlDateSerializer.java
similarity index 95%
rename from src/com/activeandroid/serializer/SqlDateSerializer.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/serializer/SqlDateSerializer.java
index 530d1249..a3dc72e0 100644
--- a/src/com/activeandroid/serializer/SqlDateSerializer.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/serializer/SqlDateSerializer.java
@@ -1,4 +1,4 @@
-package com.activeandroid.serializer;
+package com.SearingMedia.proactiveandroid.serializer;
 
 /*
  * Copyright (C) 2010 Michael Pardo
diff --git a/src/com/activeandroid/serializer/TypeSerializer.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/serializer/TypeSerializer.java
similarity index 93%
rename from src/com/activeandroid/serializer/TypeSerializer.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/serializer/TypeSerializer.java
index af0a21de..523a0e1f 100644
--- a/src/com/activeandroid/serializer/TypeSerializer.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/serializer/TypeSerializer.java
@@ -1,4 +1,4 @@
-package com.activeandroid.serializer;
+package com.SearingMedia.proactiveandroid.serializer;
 
 /*
  * Copyright (C) 2010 Michael Pardo
diff --git a/src/com/activeandroid/serializer/UUIDSerializer.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/serializer/UUIDSerializer.java
similarity index 89%
rename from src/com/activeandroid/serializer/UUIDSerializer.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/serializer/UUIDSerializer.java
index 94ba37ff..82c425be 100644
--- a/src/com/activeandroid/serializer/UUIDSerializer.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/serializer/UUIDSerializer.java
@@ -1,4 +1,4 @@
-package com.activeandroid.serializer;
+package com.SearingMedia.proactiveandroid.serializer;
 
 import java.util.UUID;
 
diff --git a/src/com/activeandroid/serializer/UtilDateSerializer.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/serializer/UtilDateSerializer.java
similarity index 95%
rename from src/com/activeandroid/serializer/UtilDateSerializer.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/serializer/UtilDateSerializer.java
index a82c7ef1..a62810fe 100644
--- a/src/com/activeandroid/serializer/UtilDateSerializer.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/serializer/UtilDateSerializer.java
@@ -1,4 +1,4 @@
-package com.activeandroid.serializer;
+package com.SearingMedia.proactiveandroid.serializer;
 
 /*
  * Copyright (C) 2010 Michael Pardo
diff --git a/src/com/activeandroid/util/IOUtils.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/IOUtils.java
similarity index 96%
rename from src/com/activeandroid/util/IOUtils.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/IOUtils.java
index b3005f85..e76cd33b 100644
--- a/src/com/activeandroid/util/IOUtils.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/IOUtils.java
@@ -1,5 +1,5 @@
 
-package com.activeandroid.util;
+package com.SearingMedia.proactiveandroid.util;
 
 /*
  * Copyright (C) 2014 Markus Pfeiffer
@@ -22,8 +22,6 @@
 import java.io.Closeable;
 import java.io.IOException;
 
-import com.activeandroid.util.Log;
-
 
 public class IOUtils {
 
diff --git a/src/com/activeandroid/util/Log.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/Log.java
similarity index 94%
rename from src/com/activeandroid/util/Log.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/Log.java
index 3c40a23f..06becd51 100644
--- a/src/com/activeandroid/util/Log.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/Log.java
@@ -1,196 +1,196 @@
-package com.activeandroid.util;
-
-/*
- * Copyright (C) 2010 Michael Pardo
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-public final class Log {
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PUBLIC MEMBERS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	private static String sTag = "ActiveAndroid";
-	private static boolean sEnabled = false;
-
-	//////////////////////////////////////////////////////////////////////////////////////
-	// CONSTRUCTORS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-	private Log() {
-	}
-
-	//////////////////////////////////////////////////////////////////////////////////////
-	// PUBLIC METHODS
-	//////////////////////////////////////////////////////////////////////////////////////
-
-    public static boolean isEnabled() {
-        return sEnabled;
-    }
-
-	public static void setEnabled(boolean enabled) {
-		sEnabled = enabled;
-	}
-
-	public static boolean isLoggingEnabled() {
-		return sEnabled;
-	}
-
-	public static int v(String msg) {
-		if (sEnabled) {
-			return android.util.Log.v(sTag, msg);
-		}
-		return 0;
-	}
-
-	public static int v(String tag, String msg) {
-		if (sEnabled) {
-			return android.util.Log.v(tag, msg);
-		}
-		return 0;
-	}
-
-	public static int v(String msg, Throwable tr) {
-		if (sEnabled) {
-			return android.util.Log.v(sTag, msg, tr);
-		}
-		return 0;
-	}
-
-	public static int v(String tag, String msg, Throwable tr) {
-		if (sEnabled) {
-			return android.util.Log.v(tag, msg, tr);
-		}
-		return 0;
-	}
-
-	public static int d(String msg) {
-		if (sEnabled) {
-			return android.util.Log.d(sTag, msg);
-		}
-		return 0;
-	}
-
-	public static int d(String tag, String msg) {
-		if (sEnabled) {
-			return android.util.Log.d(tag, msg);
-		}
-		return 0;
-	}
-
-	public static int d(String msg, Throwable tr) {
-		if (sEnabled) {
-			return android.util.Log.d(sTag, msg, tr);
-		}
-		return 0;
-	}
-
-	public static int d(String tag, String msg, Throwable tr) {
-		if (sEnabled) {
-			return android.util.Log.d(tag, msg, tr);
-		}
-		return 0;
-	}
-
-	public static int i(String msg) {
-		if (sEnabled) {
-			return android.util.Log.i(sTag, msg);
-		}
-		return 0;
-	}
-
-	public static int i(String tag, String msg) {
-		if (sEnabled) {
-			return android.util.Log.i(tag, msg);
-		}
-		return 0;
-	}
-
-	public static int i(String msg, Throwable tr) {
-		if (sEnabled) {
-			return android.util.Log.i(sTag, msg, tr);
-		}
-		return 0;
-	}
-
-	public static int i(String tag, String msg, Throwable tr) {
-		if (sEnabled) {
-			return android.util.Log.i(tag, msg, tr);
-		}
-		return 0;
-	}
-
-	public static int w(String msg) {
-		if (sEnabled) {
-			return android.util.Log.w(sTag, msg);
-		}
-		return 0;
-	}
-
-	public static int w(String tag, String msg) {
-		if (sEnabled) {
-			return android.util.Log.w(tag, msg);
-		}
-		return 0;
-	}
-
-	public static int w(String msg, Throwable tr) {
-		if (sEnabled) {
-			return android.util.Log.w(sTag, msg, tr);
-		}
-		return 0;
-	}
-
-	public static int w(String tag, String msg, Throwable tr) {
-		if (sEnabled) {
-			return android.util.Log.w(tag, msg, tr);
-		}
-		return 0;
-	}
-
-	public static int e(String msg) {
-		if (sEnabled) {
-			return android.util.Log.e(sTag, msg);
-		}
-		return 0;
-	}
-
-	public static int e(String tag, String msg) {
-		if (sEnabled) {
-			return android.util.Log.e(tag, msg);
-		}
-		return 0;
-	}
-
-	public static int e(String msg, Throwable tr) {
-		if (sEnabled) {
-			return android.util.Log.e(sTag, msg, tr);
-		}
-		return 0;
-	}
-
-	public static int e(String tag, String msg, Throwable tr) {
-		if (sEnabled) {
-			return android.util.Log.e(tag, msg, tr);
-		}
-		return 0;
-	}
-
-	public static int t(String msg, Object... args) {
-		if (sEnabled) {
-			return android.util.Log.v("test", String.format(msg, args));
-		}
-		return 0;
-	}
+package com.SearingMedia.proactiveandroid.util;
+
+/*
+ * Copyright (C) 2010 Michael Pardo
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+public final class Log {
+	//////////////////////////////////////////////////////////////////////////////////////
+	// PUBLIC MEMBERS
+	//////////////////////////////////////////////////////////////////////////////////////
+
+	private static String sTag = "ActiveAndroid";
+	private static boolean sEnabled = false;
+
+	//////////////////////////////////////////////////////////////////////////////////////
+	// CONSTRUCTORS
+	//////////////////////////////////////////////////////////////////////////////////////
+
+	private Log() {
+	}
+
+	//////////////////////////////////////////////////////////////////////////////////////
+	// PUBLIC METHODS
+	//////////////////////////////////////////////////////////////////////////////////////
+
+    public static boolean isEnabled() {
+        return sEnabled;
+    }
+
+	public static void setEnabled(boolean enabled) {
+		sEnabled = enabled;
+	}
+
+	public static boolean isLoggingEnabled() {
+		return sEnabled;
+	}
+
+	public static int v(String msg) {
+		if (sEnabled) {
+			return android.util.Log.v(sTag, msg);
+		}
+		return 0;
+	}
+
+	public static int v(String tag, String msg) {
+		if (sEnabled) {
+			return android.util.Log.v(tag, msg);
+		}
+		return 0;
+	}
+
+	public static int v(String msg, Throwable tr) {
+		if (sEnabled) {
+			return android.util.Log.v(sTag, msg, tr);
+		}
+		return 0;
+	}
+
+	public static int v(String tag, String msg, Throwable tr) {
+		if (sEnabled) {
+			return android.util.Log.v(tag, msg, tr);
+		}
+		return 0;
+	}
+
+	public static int d(String msg) {
+		if (sEnabled) {
+			return android.util.Log.d(sTag, msg);
+		}
+		return 0;
+	}
+
+	public static int d(String tag, String msg) {
+		if (sEnabled) {
+			return android.util.Log.d(tag, msg);
+		}
+		return 0;
+	}
+
+	public static int d(String msg, Throwable tr) {
+		if (sEnabled) {
+			return android.util.Log.d(sTag, msg, tr);
+		}
+		return 0;
+	}
+
+	public static int d(String tag, String msg, Throwable tr) {
+		if (sEnabled) {
+			return android.util.Log.d(tag, msg, tr);
+		}
+		return 0;
+	}
+
+	public static int i(String msg) {
+		if (sEnabled) {
+			return android.util.Log.i(sTag, msg);
+		}
+		return 0;
+	}
+
+	public static int i(String tag, String msg) {
+		if (sEnabled) {
+			return android.util.Log.i(tag, msg);
+		}
+		return 0;
+	}
+
+	public static int i(String msg, Throwable tr) {
+		if (sEnabled) {
+			return android.util.Log.i(sTag, msg, tr);
+		}
+		return 0;
+	}
+
+	public static int i(String tag, String msg, Throwable tr) {
+		if (sEnabled) {
+			return android.util.Log.i(tag, msg, tr);
+		}
+		return 0;
+	}
+
+	public static int w(String msg) {
+		if (sEnabled) {
+			return android.util.Log.w(sTag, msg);
+		}
+		return 0;
+	}
+
+	public static int w(String tag, String msg) {
+		if (sEnabled) {
+			return android.util.Log.w(tag, msg);
+		}
+		return 0;
+	}
+
+	public static int w(String msg, Throwable tr) {
+		if (sEnabled) {
+			return android.util.Log.w(sTag, msg, tr);
+		}
+		return 0;
+	}
+
+	public static int w(String tag, String msg, Throwable tr) {
+		if (sEnabled) {
+			return android.util.Log.w(tag, msg, tr);
+		}
+		return 0;
+	}
+
+	public static int e(String msg) {
+		if (sEnabled) {
+			return android.util.Log.e(sTag, msg);
+		}
+		return 0;
+	}
+
+	public static int e(String tag, String msg) {
+		if (sEnabled) {
+			return android.util.Log.e(tag, msg);
+		}
+		return 0;
+	}
+
+	public static int e(String msg, Throwable tr) {
+		if (sEnabled) {
+			return android.util.Log.e(sTag, msg, tr);
+		}
+		return 0;
+	}
+
+	public static int e(String tag, String msg, Throwable tr) {
+		if (sEnabled) {
+			return android.util.Log.e(tag, msg, tr);
+		}
+		return 0;
+	}
+
+	public static int t(String msg, Object... args) {
+		if (sEnabled) {
+			return android.util.Log.v("test", String.format(msg, args));
+		}
+		return 0;
+	}
 }
\ No newline at end of file
diff --git a/src/com/activeandroid/util/NaturalOrderComparator.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/NaturalOrderComparator.java
similarity index 95%
rename from src/com/activeandroid/util/NaturalOrderComparator.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/NaturalOrderComparator.java
index 3e44af96..7fa4b984 100644
--- a/src/com/activeandroid/util/NaturalOrderComparator.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/NaturalOrderComparator.java
@@ -1,141 +1,141 @@
-package com.activeandroid.util;
-
-/*
- NaturalOrderComparator.java -- Perform 'natural order' comparisons of strings in Java.
- Copyright (C) 2003 by Pierre-Luc Paour <natorder@paour.com>
-
- Based on the C version by Martin Pool, of which this is more or less a straight conversion.
- Copyright (C) 2000 by Martin Pool <mbp@humbug.org.au>
-
- This software is provided 'as-is', without any express or implied
- warranty.  In no event will the authors be held liable for any damages
- arising from the use of this software.
-
- Permission is granted to anyone to use this software for any purpose,
- including commercial applications, and to alter it and redistribute it
- freely, subject to the following restrictions:
-
- 1. The origin of this software must not be misrepresented; you must not
- claim that you wrote the original software. If you use this software
- in a product, an acknowledgment in the product documentation would be
- appreciated but is not required.
- 2. Altered source versions must be plainly marked as such, and must not be
- misrepresented as being the original software.
- 3. This notice may not be removed or altered from any source distribution.
- */
-
-import java.util.Comparator;
-
-public class NaturalOrderComparator implements Comparator<Object> {
-	int compareRight(String a, String b) {
-		int bias = 0;
-		int ia = 0;
-		int ib = 0;
-
-		// The longest run of digits wins. That aside, the greatest
-		// value wins, but we can't know that it will until we've scanned
-		// both numbers to know that they have the same magnitude, so we
-		// remember it in BIAS.
-		for (;; ia++, ib++) {
-			char ca = charAt(a, ia);
-			char cb = charAt(b, ib);
-
-			if (!Character.isDigit(ca) && !Character.isDigit(cb)) {
-				return bias;
-			}
-			else if (!Character.isDigit(ca)) {
-				return -1;
-			}
-			else if (!Character.isDigit(cb)) {
-				return +1;
-			}
-			else if (ca < cb) {
-				if (bias == 0) {
-					bias = -1;
-				}
-			}
-			else if (ca > cb) {
-				if (bias == 0)
-					bias = +1;
-			}
-			else if (ca == 0 && cb == 0) {
-				return bias;
-			}
-		}
-	}
-
-	public int compare(Object o1, Object o2) {
-		String a = o1.toString();
-		String b = o2.toString();
-
-		int ia = 0, ib = 0;
-		int nza = 0, nzb = 0;
-		char ca, cb;
-		int result;
-
-		while (true) {
-			// only count the number of zeroes leading the last number compared
-			nza = nzb = 0;
-
-			ca = charAt(a, ia);
-			cb = charAt(b, ib);
-
-			// skip over leading spaces or zeros
-			while (Character.isSpaceChar(ca) || ca == '0') {
-				if (ca == '0') {
-					nza++;
-				}
-				else {
-					// only count consecutive zeroes
-					nza = 0;
-				}
-
-				ca = charAt(a, ++ia);
-			}
-
-			while (Character.isSpaceChar(cb) || cb == '0') {
-				if (cb == '0') {
-					nzb++;
-				}
-				else {
-					// only count consecutive zeroes
-					nzb = 0;
-				}
-
-				cb = charAt(b, ++ib);
-			}
-
-			// process run of digits
-			if (Character.isDigit(ca) && Character.isDigit(cb)) {
-				if ((result = compareRight(a.substring(ia), b.substring(ib))) != 0) {
-					return result;
-				}
-			}
-
-			if (ca == 0 && cb == 0) {
-				// The strings compare the same. Perhaps the caller
-				// will want to call strcmp to break the tie.
-				return nza - nzb;
-			}
-
-			if (ca < cb) {
-				return -1;
-			}
-			else if (ca > cb) {
-				return +1;
-			}
-
-			++ia;
-			++ib;
-		}
-	}
-
-	static char charAt(String s, int i) {
-		if (i >= s.length()) {
-			return 0;
-		}
-		else {
-			return s.charAt(i);
-		}
-	}
+package com.SearingMedia.proactiveandroid.util;
+
+/*
+ NaturalOrderComparator.java -- Perform 'natural order' comparisons of strings in Java.
+ Copyright (C) 2003 by Pierre-Luc Paour <natorder@paour.com>
+
+ Based on the C version by Martin Pool, of which this is more or less a straight conversion.
+ Copyright (C) 2000 by Martin Pool <mbp@humbug.org.au>
+
+ This software is provided 'as-is', without any express or implied
+ warranty.  In no event will the authors be held liable for any damages
+ arising from the use of this software.
+
+ Permission is granted to anyone to use this software for any purpose,
+ including commercial applications, and to alter it and redistribute it
+ freely, subject to the following restrictions:
+
+ 1. The origin of this software must not be misrepresented; you must not
+ claim that you wrote the original software. If you use this software
+ in a product, an acknowledgment in the product documentation would be
+ appreciated but is not required.
+ 2. Altered source versions must be plainly marked as such, and must not be
+ misrepresented as being the original software.
+ 3. This notice may not be removed or altered from any source distribution.
+ */
+
+import java.util.Comparator;
+
+public class NaturalOrderComparator implements Comparator<Object> {
+	int compareRight(String a, String b) {
+		int bias = 0;
+		int ia = 0;
+		int ib = 0;
+
+		// The longest run of digits wins. That aside, the greatest
+		// value wins, but we can't know that it will until we've scanned
+		// both numbers to know that they have the same magnitude, so we
+		// remember it in BIAS.
+		for (;; ia++, ib++) {
+			char ca = charAt(a, ia);
+			char cb = charAt(b, ib);
+
+			if (!Character.isDigit(ca) && !Character.isDigit(cb)) {
+				return bias;
+			}
+			else if (!Character.isDigit(ca)) {
+				return -1;
+			}
+			else if (!Character.isDigit(cb)) {
+				return +1;
+			}
+			else if (ca < cb) {
+				if (bias == 0) {
+					bias = -1;
+				}
+			}
+			else if (ca > cb) {
+				if (bias == 0)
+					bias = +1;
+			}
+			else if (ca == 0 && cb == 0) {
+				return bias;
+			}
+		}
+	}
+
+	public int compare(Object o1, Object o2) {
+		String a = o1.toString();
+		String b = o2.toString();
+
+		int ia = 0, ib = 0;
+		int nza = 0, nzb = 0;
+		char ca, cb;
+		int result;
+
+		while (true) {
+			// only count the number of zeroes leading the last number compared
+			nza = nzb = 0;
+
+			ca = charAt(a, ia);
+			cb = charAt(b, ib);
+
+			// skip over leading spaces or zeros
+			while (Character.isSpaceChar(ca) || ca == '0') {
+				if (ca == '0') {
+					nza++;
+				}
+				else {
+					// only count consecutive zeroes
+					nza = 0;
+				}
+
+				ca = charAt(a, ++ia);
+			}
+
+			while (Character.isSpaceChar(cb) || cb == '0') {
+				if (cb == '0') {
+					nzb++;
+				}
+				else {
+					// only count consecutive zeroes
+					nzb = 0;
+				}
+
+				cb = charAt(b, ++ib);
+			}
+
+			// process run of digits
+			if (Character.isDigit(ca) && Character.isDigit(cb)) {
+				if ((result = compareRight(a.substring(ia), b.substring(ib))) != 0) {
+					return result;
+				}
+			}
+
+			if (ca == 0 && cb == 0) {
+				// The strings compare the same. Perhaps the caller
+				// will want to call strcmp to break the tie.
+				return nza - nzb;
+			}
+
+			if (ca < cb) {
+				return -1;
+			}
+			else if (ca > cb) {
+				return +1;
+			}
+
+			++ia;
+			++ib;
+		}
+	}
+
+	static char charAt(String s, int i) {
+		if (i >= s.length()) {
+			return 0;
+		}
+		else {
+			return s.charAt(i);
+		}
+	}
 }
\ No newline at end of file
diff --git a/src/com/activeandroid/util/ReflectionUtils.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/ReflectionUtils.java
similarity index 93%
rename from src/com/activeandroid/util/ReflectionUtils.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/ReflectionUtils.java
index 32e995cc..438a4cc0 100644
--- a/src/com/activeandroid/util/ReflectionUtils.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/ReflectionUtils.java
@@ -1,4 +1,4 @@
-package com.activeandroid.util;
+package com.SearingMedia.proactiveandroid.util;
 
 /*
  * Copyright (C) 2010 Michael Pardo
@@ -28,9 +28,9 @@
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
 
-import com.activeandroid.Model;
-import com.activeandroid.annotation.Column;
-import com.activeandroid.serializer.TypeSerializer;
+import com.SearingMedia.proactiveandroid.Model;
+import com.SearingMedia.proactiveandroid.annotation.Column;
+import com.SearingMedia.proactiveandroid.serializer.TypeSerializer;
 
 public final class ReflectionUtils {
 	//////////////////////////////////////////////////////////////////////////////////////
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/SQLiteUtils.java
similarity index 96%
rename from src/com/activeandroid/util/SQLiteUtils.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/SQLiteUtils.java
index cbf41eae..66e5c296 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/SQLiteUtils.java
@@ -1,4 +1,4 @@
-package com.activeandroid.util;
+package com.SearingMedia.proactiveandroid.util;
 
 /*
  * Copyright (C) 2010 Michael Pardo
@@ -20,12 +20,12 @@
 import android.os.Build;
 import android.text.TextUtils;
 
-import com.activeandroid.Cache;
-import com.activeandroid.Model;
-import com.activeandroid.TableInfo;
-import com.activeandroid.annotation.Column;
-import com.activeandroid.annotation.Column.ConflictAction;
-import com.activeandroid.serializer.TypeSerializer;
+import com.SearingMedia.proactiveandroid.Cache;
+import com.SearingMedia.proactiveandroid.Model;
+import com.SearingMedia.proactiveandroid.TableInfo;
+import com.SearingMedia.proactiveandroid.annotation.Column;
+import com.SearingMedia.proactiveandroid.annotation.Column.ConflictAction;
+import com.SearingMedia.proactiveandroid.serializer.TypeSerializer;
 
 import java.lang.Long;
 import java.lang.String;
diff --git a/src/com/activeandroid/util/SqlParser.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/SqlParser.java
similarity index 98%
rename from src/com/activeandroid/util/SqlParser.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/SqlParser.java
index f9531b7c..ed6a6f8c 100644
--- a/src/com/activeandroid/util/SqlParser.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/SqlParser.java
@@ -1,5 +1,5 @@
 
-package com.activeandroid.util;
+package com.SearingMedia.proactiveandroid.util;
 
 /*
  * Copyright (C) 2014 Markus Pfeiffer
diff --git a/src/com/activeandroid/util/Tokenizer.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/Tokenizer.java
similarity index 97%
rename from src/com/activeandroid/util/Tokenizer.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/Tokenizer.java
index 8ae34da3..fc7333ae 100644
--- a/src/com/activeandroid/util/Tokenizer.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/util/Tokenizer.java
@@ -1,5 +1,5 @@
 
-package com.activeandroid.util;
+package com.SearingMedia.proactiveandroid.util;
 
 /*
  * Copyright (C) 2014 Markus Pfeiffer
diff --git a/src/com/activeandroid/widget/ModelAdapter.java b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/widget/ModelAdapter.java
similarity index 92%
rename from src/com/activeandroid/widget/ModelAdapter.java
rename to proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/widget/ModelAdapter.java
index a3895763..4c1f0fc8 100644
--- a/src/com/activeandroid/widget/ModelAdapter.java
+++ b/proactiveandroid/src/main/java/com/SearingMedia/proactiveandroid/widget/ModelAdapter.java
@@ -1,12 +1,12 @@
-package com.activeandroid.widget;
-
-import java.util.Collection;
-import java.util.List;
+package com.SearingMedia.proactiveandroid.widget;
 
 import android.content.Context;
 import android.widget.ArrayAdapter;
 
-import com.activeandroid.Model;
+import com.SearingMedia.proactiveandroid.Model;
+
+import java.util.Collection;
+import java.util.List;
 
 public class ModelAdapter<T extends Model> extends ArrayAdapter<T> {
 	public ModelAdapter(Context context, int textViewResourceId) {
diff --git a/proactiveandroid/src/tests/java/com/proactiveandroid/test/ActiveAndroidTestCase.java b/proactiveandroid/src/tests/java/com/proactiveandroid/test/ActiveAndroidTestCase.java
new file mode 100644
index 00000000..e0cd7c74
--- /dev/null
+++ b/proactiveandroid/src/tests/java/com/proactiveandroid/test/ActiveAndroidTestCase.java
@@ -0,0 +1,44 @@
+package com.proactiveandroid.test;
+
+/*
+ * Copyright (C) 2010 Michael Pardo
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import android.test.ApplicationTestCase;
+
+import com.proactiveandroid.app.Application;
+
+public abstract class ActiveAndroidTestCase extends ApplicationTestCase<Application> {
+	public ActiveAndroidTestCase() {
+		super(Application.class);
+	}
+
+	protected void setUp() throws Exception {
+		super.setUp();
+		createApplication();
+	}
+
+	protected void tearDown() throws Exception {
+		super.tearDown();
+	}
+
+	public static <T> void assertArrayEquals(T[] actual, T... expected) {
+		assertEquals(expected.length, actual.length);
+		
+		for (int i = 0; i < expected.length; i++) {
+			assertEquals(expected[i], actual[i]);
+		}
+	}
+}
diff --git a/proactiveandroid/src/tests/java/com/proactiveandroid/test/CacheTest.java b/proactiveandroid/src/tests/java/com/proactiveandroid/test/CacheTest.java
new file mode 100644
index 00000000..2c333c80
--- /dev/null
+++ b/proactiveandroid/src/tests/java/com/proactiveandroid/test/CacheTest.java
@@ -0,0 +1,50 @@
+package com.proactiveandroid.test;
+
+import android.test.AndroidTestCase;
+
+import com.proactiveandroid.ActiveAndroid;
+import com.proactiveandroid.Cache;
+import com.proactiveandroid.Configuration;
+import com.proactiveandroid.Model;
+import com.proactiveandroid.TableInfo;
+import com.proactiveandroid.annotation.Table;
+
+import java.util.Collection;
+
+public class CacheTest extends AndroidTestCase {
+
+    @Override
+    protected void setUp() {
+        Configuration conf = new Configuration.Builder(getContext())
+                .setDatabaseName("CacheTest")
+                .addModelClasses(CacheTestModel.class, CacheTestModel2.class)
+                .create();
+        ActiveAndroid.initialize(conf, true);
+    }
+
+    public void testGetTableInfos() {
+        assertNotNull(Cache.getContext());
+        Collection<TableInfo> tableInfos = Cache.getTableInfos();
+        assertEquals(2, tableInfos.size());
+
+        {
+            TableInfo tableInfo = Cache.getTableInfo(CacheTestModel.class);
+            assertNotNull(tableInfo);
+            assertEquals("CacheTestModel", tableInfo.getTableName());
+        }
+
+        {
+            TableInfo tableInfo = Cache.getTableInfo(CacheTestModel2.class);
+            assertNotNull(tableInfo);
+            assertEquals("CacheTestModel2", tableInfo.getTableName());
+        }
+    }
+
+    @Table(name = "CacheTestModel")
+    private static class CacheTestModel extends Model {
+    }
+
+    @Table(name = "CacheTestModel2")
+    private static class CacheTestModel2 extends Model {
+    }
+}
diff --git a/proactiveandroid/src/tests/java/com/proactiveandroid/test/ConfigurationTest.java b/proactiveandroid/src/tests/java/com/proactiveandroid/test/ConfigurationTest.java
new file mode 100644
index 00000000..69d879d5
--- /dev/null
+++ b/proactiveandroid/src/tests/java/com/proactiveandroid/test/ConfigurationTest.java
@@ -0,0 +1,38 @@
+package com.proactiveandroid.test;
+
+import android.test.AndroidTestCase;
+
+import com.proactiveandroid.Configuration;
+import com.proactiveandroid.Model;
+import com.proactiveandroid.annotation.Table;
+
+import java.io.IOException;
+import java.util.List;
+
+public class ConfigurationTest extends AndroidTestCase {
+
+    public void testDefaultValue() throws IOException, ClassNotFoundException {
+        Configuration conf = new Configuration.Builder(getContext()).create();
+        assertNotNull(conf.getContext());
+        assertEquals(1024, conf.getCacheSize());
+        assertEquals("Application.db", conf.getDatabaseName());
+        assertEquals(1, conf.getDatabaseVersion());
+        assertNull(conf.getModelClasses());
+        assertFalse(conf.isValid());
+        assertNull(conf.getTypeSerializers());
+        assertEquals(Configuration.SQL_PARSER_LEGACY, conf.getSqlParser());
+    }
+
+    public void testCreateConfigurationWithMockModel() {
+        Configuration conf = new Configuration.Builder(getContext())
+                .addModelClass(ConfigurationTestModel.class)
+                .create();
+        List<Class<? extends Model>> modelClasses = conf.getModelClasses();
+        assertEquals(1, modelClasses.size());
+        assertTrue(conf.isValid());
+    }
+
+    @Table(name = "ConfigurationTestModel")
+    private static class ConfigurationTestModel extends Model {
+    }
+}
diff --git a/proactiveandroid/src/tests/java/com/proactiveandroid/test/MockModel.java b/proactiveandroid/src/tests/java/com/proactiveandroid/test/MockModel.java
new file mode 100644
index 00000000..fcdc7718
--- /dev/null
+++ b/proactiveandroid/src/tests/java/com/proactiveandroid/test/MockModel.java
@@ -0,0 +1,38 @@
+package com.proactiveandroid.test;
+
+/*
+ * Copyright (C) 2010 Michael Pardo
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import com.proactiveandroid.Model;
+import com.proactiveandroid.annotation.Column;
+import com.proactiveandroid.annotation.Table;
+
+import java.util.Date;
+
+@Table(name = "MockModel")
+public class MockModel extends Model {
+    @Column
+    public Date dateField;
+
+    @Column
+    public double doubleField;
+
+    @Column
+    public int intField;
+
+    @Column
+    public boolean booleanField;
+}
diff --git a/proactiveandroid/src/tests/java/com/proactiveandroid/test/ModelTest.java b/proactiveandroid/src/tests/java/com/proactiveandroid/test/ModelTest.java
new file mode 100644
index 00000000..4520b493
--- /dev/null
+++ b/proactiveandroid/src/tests/java/com/proactiveandroid/test/ModelTest.java
@@ -0,0 +1,267 @@
+/*
+ * Copyright (C) 2013 Vojtech Sigler.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.proactiveandroid.test;
+
+import com.proactiveandroid.Cache;
+import com.proactiveandroid.Model;
+import com.proactiveandroid.TableInfo;
+import com.proactiveandroid.annotation.Column;
+import com.proactiveandroid.annotation.Table;
+import com.proactiveandroid.query.Select;
+
+import java.lang.reflect.Field;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+/**
+ * Simple test now covering equals and hashcode methods.
+ */
+public class ModelTest extends ActiveAndroidTestCase {
+
+	/**
+	 * Equals should be type-safe.
+	 */	
+	public void testEqualsNonModel() {
+		MockModel model = new MockModel();
+
+		assertFalse(model.equals("Dummy"));
+		assertFalse(model.equals(null));
+	}
+
+	/**
+	 * Equals should not be true for different model classes.
+	 */	
+	public void testEqualsDifferentModel() {
+		Model model1 = new MockModel();
+		Model model2 = new AnotherMockModel();
+
+		assertFalse(model1.equals(model2));
+	}
+
+	/**
+	 * A new object does not have PK assigned yet,
+	 * therefore by default it is equal only to itself.
+	 */	
+	public void testEqualsOnNew() {
+		MockModel model1 = new MockModel();
+		MockModel model2 = new MockModel();
+
+		assertFalse(model1.equals(model2));
+		assertFalse(model2.equals(model1));
+		assertTrue(model1.equals(model1));  //equal only to itself
+	}
+
+	/**
+	 * Two different rows in a table should not be equal (different ids).
+	 */	
+	public void testEqualsDifferentRows() {
+		MockModel model1 = new MockModel();
+		MockModel model2 = new MockModel();
+		MockModel model3;
+
+		model1.save();
+		model2.save();
+		model3 = Model.load(MockModel.class, model1.getId());
+
+        // Not equal to each other.
+		assertFalse(model1.equals(model2));
+		assertFalse(model2.equals(model1));
+
+        // Equal to each other when loaded.
+		assertTrue(model1.equals(model3));
+		assertTrue(model1.equals(model3));
+
+        // Loaded model is not equal to a different model.
+		assertFalse(model3.equals(model2));
+		assertFalse(model2.equals(model3));
+	}
+
+	/**
+	 * Tests hashcode for new instances.
+	 */	
+	public void testHashCode() {
+		Set<Model> set = new HashSet<Model>();
+		Model m1 = new MockModel();
+		Model m2 = new MockModel();
+		Model m3 = new AnotherMockModel();
+
+		assertFalse(m1.hashCode() == m2.hashCode()); // hashes for unsaved models must not match
+		set.add(m1);
+		set.add(m2);
+		assertEquals(2, set.size()); //try in a set
+
+		assertFalse(m1.hashCode() == m3.hashCode());
+		set.add(m3);
+		assertEquals(3, set.size());
+	}
+
+	/**
+	 * Two rows in a table should have different hashcodes.
+	 */
+	public void testHashCodeDifferentRows() {
+		Set<Model> set = new HashSet<Model>();
+		Model m1 = new MockModel();
+		Model m2 = new MockModel();
+		Model m3;
+
+		m1.save();
+		m2.save();
+		m3 = Model.load(MockModel.class, m1.getId());
+
+		assertEquals(m1.hashCode(), m3.hashCode());
+		assertFalse(m1.hashCode() == m2.hashCode());
+		set.add(m1);
+		set.add(m2);
+		set.add(m3);
+		assertEquals(2, set.size());
+	}
+
+    /**
+     * Column names should default to the field name.
+     */
+    public void testColumnNamesDefaulToFieldNames() {
+        TableInfo tableInfo = Cache.getTableInfo(MockModel.class);
+
+        for ( Field field : tableInfo.getFields() ) {
+            // Id column is a special case, we'll ignore that one.
+            if ( field.getName().equals("mId") ) continue;
+
+            assertEquals(field.getName(), tableInfo.getColumnName(field));
+        }
+    }
+
+    /**
+     * Boolean should handle integer (0/1) and boolean (false/true) values.
+     */
+    public void testBooleanColumnType() {
+        MockModel mockModel = new MockModel();
+        mockModel.booleanField = false;
+        Long id = mockModel.save();
+
+        boolean databaseBooleanValue = MockModel.load( MockModel.class, id ).booleanField;
+
+        assertEquals( false, databaseBooleanValue );
+
+        // Test passing both a integer and a boolean into the where conditional.
+        assertEquals(
+                mockModel,
+                new Select().from(MockModel.class).where("booleanField = ?", 0).executeSingle() );
+
+        assertEquals(
+                mockModel,
+                new Select().from(MockModel.class).where("booleanField = ?", false).executeSingle() );
+
+        assertNull( new Select().from(MockModel.class).where("booleanField = ?", 1).executeSingle() );
+
+        assertNull( new Select().from(MockModel.class).where("booleanField = ?", true).executeSingle() );
+    }
+
+	/**
+     * Test to check the join of two (or more) tables with some fields in common when not use a projection on select.
+     * Test the issue #106 (https://github.com/pardom/ActiveAndroid/issues/106)
+     */
+    public void testJoinWithSameNames(){
+        //create a parent entity and store
+        ParentJoinMockModel parent = new ParentJoinMockModel();
+        parent.booleanField = true;
+        parent.dateField = new Date();
+        parent.doubleField = 2.0;
+        parent.intField = 1;
+        parent.save();
+
+        //the values to assign to child
+        Date dateValue = new Date();
+        double doubleValue = 30.0;
+        int intValue = 3;
+
+        //create two child entities, relate with parent and save
+        ChildMockModel child1 = new ChildMockModel();
+        child1.booleanField = false;
+        child1.dateField = dateValue;
+        child1.doubleField = doubleValue;
+        child1.intField = intValue;
+        child1.parent = parent;
+        child1.save();
+
+        ChildMockModel child2 = new ChildMockModel();
+        child2.booleanField = false;
+        child2.dateField = dateValue;
+        child2.doubleField = doubleValue;
+        child2.intField = intValue;
+        child2.parent = parent;
+        child2.save();
+
+        //Store the ids assigned to child entities when persists
+        List<Long> ids = new ArrayList<Long>();
+        ids.add(child1.getId());
+        ids.add(child2.getId());
+
+        //make the query with a join
+        List<ChildMockModel> result = new Select().from(ChildMockModel.class).
+                join(ParentJoinMockModel.class).on("ParentJoinMockModel.Id = ChildMockModel.parent").execute();
+
+        //check result
+        assertNotNull(result);
+        assertEquals(result.size(), 2);
+        for(ChildMockModel currentModel : result){
+            assertFalse(currentModel.booleanField);
+            assertEquals(currentModel.intField, intValue);
+            assertEquals(currentModel.doubleField, doubleValue);
+            assertTrue(ids.contains(currentModel.getId()));
+        }
+
+    }
+
+	/**
+	 * Mock model as we need 2 different model classes.
+	 */
+	@Table(name = "AnotherMockTable")
+	public static class AnotherMockModel extends Model {}
+
+    /**
+     * Mock model to test joins with same names.
+     * It's a copy from MockModel.
+     */
+    @Table(name = "ParentJoinMockModel")
+    public static class ParentJoinMockModel extends Model {
+        @Column
+        public Date dateField;
+
+        @Column
+        public double doubleField;
+
+        @Column
+        public int intField;
+
+        @Column
+        public boolean booleanField;
+    }
+
+    /**
+     * Mock model to test joins with same names.
+     * Extends from ParentJoinMockModel to have the same columns.
+     * Have a relationship with ParentJoinMockModel to make te join query.
+     */
+    @Table(name = "ChildMockModel")
+    public static class ChildMockModel extends ParentJoinMockModel {
+        @Column
+        ParentJoinMockModel parent;
+    }
+}
diff --git a/proactiveandroid/src/tests/java/com/proactiveandroid/test/parser/ParserConfigurationTest.java b/proactiveandroid/src/tests/java/com/proactiveandroid/test/parser/ParserConfigurationTest.java
new file mode 100644
index 00000000..aeacb394
--- /dev/null
+++ b/proactiveandroid/src/tests/java/com/proactiveandroid/test/parser/ParserConfigurationTest.java
@@ -0,0 +1,54 @@
+
+package com.proactiveandroid.test.parser;
+
+import android.database.SQLException;
+import android.database.sqlite.SQLiteDatabase;
+
+import com.proactiveandroid.Configuration;
+import com.proactiveandroid.DatabaseHelper;
+import com.proactiveandroid.test.ActiveAndroidTestCase;
+
+
+public class ParserConfigurationTest extends ActiveAndroidTestCase {
+
+    /**
+     * Should try to use the legacy parser by default, which is be unable to handle the SQL script.
+     */
+    public void testLegacyMigration() {
+
+        try {
+            Configuration configuration = new Configuration.Builder(getContext())
+                    .setDatabaseName("migration.db")
+                    .setDatabaseVersion(2)
+                    .create();
+
+            DatabaseHelper helper = new DatabaseHelper(configuration);
+            SQLiteDatabase db = helper.getWritableDatabase();
+            helper.onUpgrade(db, 1, 2);
+
+            fail("Should not be able to parse the SQL script.");
+
+        } catch (SQLException e) {
+            final String message = e.getMessage();
+
+            assertNotNull(message);
+            assertTrue(message.contains("syntax error"));
+            assertTrue(message.contains("near \"MockMigration\""));
+        }
+    }
+
+    /**
+     * Should use the new parser if configured to do so.
+     */
+    public void testDelimitedMigration() {
+        Configuration configuration = new Configuration.Builder(getContext())
+                .setSqlParser(Configuration.SQL_PARSER_DELIMITED)
+                .setDatabaseName("migration.db")
+                .setDatabaseVersion(2)
+                .create();
+
+        DatabaseHelper helper = new DatabaseHelper(configuration);
+        SQLiteDatabase db = helper.getWritableDatabase();
+        helper.onUpgrade(db, 1, 2);
+    }
+}
diff --git a/proactiveandroid/src/tests/java/com/proactiveandroid/test/parser/ParserTest.java b/proactiveandroid/src/tests/java/com/proactiveandroid/test/parser/ParserTest.java
new file mode 100644
index 00000000..66362d94
--- /dev/null
+++ b/proactiveandroid/src/tests/java/com/proactiveandroid/test/parser/ParserTest.java
@@ -0,0 +1,247 @@
+
+package com.proactiveandroid.test.parser;
+
+import com.proactiveandroid.test.ActiveAndroidTestCase;
+import com.proactiveandroid.test.R;
+import com.proactiveandroid.util.SqlParser;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.List;
+
+
+public class ParserTest extends ActiveAndroidTestCase {
+
+    private final String sql1    = "CREATE TABLE Entity1 ( Id INTEGER AUTOINCREMENT PRIMARY KEY NOT NULL, Column1 INTEGER )";
+    private final String sql2    = "CREATE TABLE Entity2 ( Id INTEGER AUTOINCREMENT PRIMARY KEY NOT NULL, Column1 INTEGER )";
+
+    private final String invalid = "CREATE TABLE Entity1 ( Id INTEGER AUTOINCREMENT PRIMARY KEY NOT NULL, */ Column1 INTEGER )";
+
+    private InputStream getStream(int id) {
+        return this.getContext().getResources().openRawResource(id);
+    }
+
+    /**
+     * Should be able to parse a script with two multi-line statments, even if the last statement
+     * is not terminated by a semicolon.
+     * @throws IOException
+     */
+    public void testTwoStatements() throws IOException {
+
+        final InputStream stream = this.getStream(R.raw.two_statements);
+        List<String> commands = SqlParser.parse(stream);
+
+        assertEquals(2, commands.size());
+        assertEquals(sql1, commands.get(0));
+        assertEquals(sql2, commands.get(1));
+    }
+
+    /**
+     * Should reduce unnecessary whitespace.
+     * @throws IOException
+     */
+    public void testWhitespace() throws IOException {
+
+        final InputStream stream = this.getStream(R.raw.whitespace);
+        List<String> commands = SqlParser.parse(stream);
+
+        assertEquals(1, commands.size());
+        assertEquals(sql1, commands.get(0));
+    }
+
+    /**
+     * Should be able to parse a multi-line statement that has an embedded line comment.
+     * @throws IOException
+     */
+    public void testLineComment() throws IOException {
+
+        final InputStream stream = this.getStream(R.raw.line_comment);
+        List<String> commands = SqlParser.parse(stream);
+
+        assertEquals(1, commands.size());
+        assertEquals(sql1, commands.get(0));
+    }
+
+    /**
+     * Should be able to handle a line comment that contains string tokens.
+     * @throws IOException
+     */
+    public void testLineCommentWithString() throws IOException {
+
+        final InputStream stream = this.getStream(R.raw.line_comment_with_string);
+        List<String> commands = SqlParser.parse(stream);
+
+        assertEquals(1, commands.size());
+        assertEquals(sql1, commands.get(0));
+    }
+
+    /**
+     * Should be able to handle a line comment that contains a semicolon.
+     * @throws IOException
+     */
+    public void testLineCommentWithSemicolon() throws IOException {
+
+        final InputStream stream = this.getStream(R.raw.line_comment_with_semicolon);
+        List<String> commands = SqlParser.parse(stream);
+
+        assertEquals(1, commands.size());
+        assertEquals(sql1, commands.get(0));
+    }
+
+    /**
+     * Should ignore a block comment end token inside a line comment.
+     * @throws IOException
+     */
+    public void testLineAndBlockEndComment() throws IOException {
+
+        final InputStream stream = this.getStream(R.raw.line_comment_and_block_end);
+        List<String> commands = SqlParser.parse(stream);
+
+        assertEquals(1, commands.size());
+        assertEquals(sql1, commands.get(0));
+    }
+
+    /**
+     * Should be able to handle a block comment.
+     * @throws IOException
+     */
+    public void testBlockComment() throws IOException {
+
+        final InputStream stream = this.getStream(R.raw.block_comment);
+        List<String> commands = SqlParser.parse(stream);
+
+        assertEquals(1, commands.size());
+        assertEquals(sql1, commands.get(0));
+    }
+
+    /**
+     * Should be able to handle a block comment that contains string tokens.
+     * @throws IOException
+     */
+    public void testBlockCommentWithString() throws IOException {
+
+        final InputStream stream = this.getStream(R.raw.block_comment_with_string);
+        List<String> commands = SqlParser.parse(stream);
+
+        assertEquals(1, commands.size());
+        assertEquals(sql1, commands.get(0));
+    }
+
+    /**
+     * Should be able to handle a block comment that contains a semicolon.
+     * @throws IOException
+     */
+    public void testBlockCommentWithSemicolon() throws IOException {
+
+        final InputStream stream = this.getStream(R.raw.block_comment_with_semicolon);
+        List<String> commands = SqlParser.parse(stream);
+
+        assertEquals(1, commands.size());
+        assertEquals(sql1, commands.get(0));
+    }
+
+    /**
+     * Should ignore a line comment token inside a block comment.
+     * @throws IOException
+     */
+    public void testBlockAndLineComment() throws IOException {
+
+        final InputStream stream = this.getStream(R.raw.block_with_line_comment);
+        List<String> commands = SqlParser.parse(stream);
+
+        assertEquals(1, commands.size());
+        assertEquals(sql1, commands.get(0));
+    }
+
+    /**
+     * Should be able to parse a script that incorrectly closes a block comment twice. The
+     * resulting script is not expected to run, but the parser shouldn't choke on it.
+     * @throws IOException
+     */
+    public void testInvalidBlockComment() throws IOException {
+
+        final InputStream stream = this.getStream(R.raw.invalid_block_comment);
+        List<String> commands = SqlParser.parse(stream);
+
+        assertEquals(1, commands.size());
+        assertEquals(invalid, commands.get(0));
+    }
+
+    /**
+     * Should ignore a line comment token inside a string.
+     * @throws IOException
+     */
+    public void testStringWithLineComment() throws IOException {
+        final String sql = "INSERT INTO Entity ( Id, Column1, Column2 ) VALUES ( 1, '-- some text', 'some text' )";
+
+        final InputStream stream = this.getStream(R.raw.string_with_line_comment);
+        List<String> commands = SqlParser.parse(stream);
+
+        assertEquals(1, commands.size());
+        assertEquals(sql, commands.get(0));
+    }
+
+    /**
+     * Should ignore block comment tokens inside strings.
+     * @throws IOException
+     */
+    public void testStringWithBlockComment() throws IOException {
+        final String sql = "INSERT INTO Entity ( Id, Column1, Column2 ) VALUES ( 1, '/* some text', 'some text */' )";
+
+        final InputStream stream = this.getStream(R.raw.string_with_block_comment);
+        List<String> commands = SqlParser.parse(stream);
+
+        assertEquals(1, commands.size());
+        assertEquals(sql, commands.get(0));
+    }
+
+    /**
+     * Should ignore semicolons inside strings.
+     * @throws IOException
+     */
+    public void testStringWithSemicolon() throws IOException {
+        final String sql = "INSERT INTO Entity ( Id, Column1, Column2 ) VALUES ( 1, 'some ; text', 'some ; text' )";
+
+        final InputStream stream = this.getStream(R.raw.string_with_semicolon);
+        List<String> commands = SqlParser.parse(stream);
+
+        assertEquals(1, commands.size());
+        assertEquals(sql, commands.get(0));
+    }
+
+    /**
+     * Should not clobber whitespace in strings.
+     * @throws IOException
+     */
+    public void testStringWithWhitespace() throws IOException {
+        final String sql = "INSERT INTO Entity ( Id, Column1, Column2 ) VALUES ( 1, 'some\t\t\ttext', 'some    text' )";
+
+        final InputStream stream = this.getStream(R.raw.string_with_whitespace);
+        List<String> commands = SqlParser.parse(stream);
+
+        assertEquals(1, commands.size());
+        assertEquals(sql, commands.get(0));
+    }
+
+    /**
+     * Should be able to handle a script that contains anything nasty I can thing of right now.
+     * @throws IOException 
+     */
+    public void testComplex() throws IOException {
+        final String sql1 = "CREATE TABLE Entity2 ( Id INTEGER AUTO_INCREMENT PRIMARY KEY, Column TEXT NOT NULL, Column2 INTEGER NULL )";
+        final String sql2 = "INSERT INTO Entity2 ( Id, Column, Column2 ) SELECT Id, Column, 0 FROM Entity";
+        final String sql3 = "DROP TABLE Entity";
+        final String sql4 = "ALTER TABLE Entity2 RENAME TO Entity";
+        final String sql5 = "INSERT INTO Entity2 ( Id, Column, Column2) VALUES ( 9001 , 42, 'string /* string */ -- string' )";
+
+        final InputStream stream = this.getStream(R.raw.complex);
+        List<String> commands = SqlParser.parse(stream);
+
+        assertEquals(5, commands.size());
+        assertEquals(sql1, commands.get(0));
+        assertEquals(sql2, commands.get(1));
+        assertEquals(sql3, commands.get(2));
+        assertEquals(sql4, commands.get(3));
+        assertEquals(sql5, commands.get(4));
+    }
+}
diff --git a/proactiveandroid/src/tests/java/com/proactiveandroid/test/query/CountTest.java b/proactiveandroid/src/tests/java/com/proactiveandroid/test/query/CountTest.java
new file mode 100644
index 00000000..2e67df43
--- /dev/null
+++ b/proactiveandroid/src/tests/java/com/proactiveandroid/test/query/CountTest.java
@@ -0,0 +1,169 @@
+
+package com.proactiveandroid.test.query;
+
+import com.proactiveandroid.query.Delete;
+import com.proactiveandroid.query.From;
+import com.proactiveandroid.query.Select;
+import com.proactiveandroid.test.MockModel;
+
+import java.util.List;
+
+
+public class CountTest extends SqlableTestCase {
+
+    private void cleanTable() {
+        new Delete().from(MockModel.class).execute();
+    }
+
+    private void populateTable() {
+        MockModel m1 = new MockModel();
+        MockModel m2 = new MockModel();
+        MockModel m3 = new MockModel();
+
+        m1.intField = 1;
+        m2.intField = 1;
+        m3.intField = 2;
+
+        m1.save();
+        m2.save();
+        m3.save();
+    }
+
+    /**
+     * Should be a simple count for the entire table.
+     */
+    public void testCountTableSql() {
+        final String expected = "SELECT COUNT(*) FROM MockModel";
+
+        String actual = new Select()
+                .from(MockModel.class)
+                .toCountSql();
+
+        assertEquals(expected, actual);
+    }
+
+    /**
+     * Should be a count with the specified where-clause.
+     */
+    public void testCountWhereClauseSql() {
+        final String expected = "SELECT COUNT(*) FROM MockModel WHERE intField = ?";
+
+        String actual = new Select()
+                .from(MockModel.class)
+                .where("intField = ?", 1)
+                .toCountSql();
+
+        assertEquals(expected, actual);
+    }
+
+    /**
+     * Shouldn't include <i>order by</i> as it has no influence on the result of <i>count</i> and
+     * should improve performance.
+     */
+    public void testCountOrderBySql() {
+        final String expected = "SELECT COUNT(*) FROM MockModel WHERE intField <> ? GROUP BY intField";
+
+        String actual = new Select()
+                .from(MockModel.class)
+                .where("intField <> ?", 0)
+                .orderBy("intField")
+                .groupBy("intField")
+                .toCountSql();
+
+        assertEquals(expected, actual);
+    }
+
+    /**
+     * Should return the same count as there are entries in the result set/table.
+     */
+    public void testCountTable() {
+        cleanTable();
+        populateTable();
+
+        From from = new Select()
+                .from(MockModel.class);
+
+        final List<MockModel> list = from.execute();
+        final int count = from.count();
+
+        assertEquals(3, count);
+        assertEquals(list.size(), count);
+    }
+
+    /**
+     * Should return the same count as there are entries in the result set if the where-clause
+     * matches several entries.
+     */
+    public void testCountWhereClause() {
+        cleanTable();
+        populateTable();
+
+        From from = new Select()
+                .from(MockModel.class)
+                .where("intField = ?", 1);
+
+        final List<MockModel> list = from.execute();
+        final int count = from.count();
+
+        assertEquals(2, count);
+        assertEquals(list.size(), count);
+    }
+
+    /**
+     * Should return the same count as there are entries in the result set if the where-clause
+     * matches zero entries.
+     */
+    public void testCountEmptyResult() {
+        cleanTable();
+        populateTable();
+
+        From from = new Select()
+                .from(MockModel.class)
+                .where("intField = ?", 3);
+
+        final List<MockModel> list = from.execute();
+        final int count = from.count();
+
+        assertEquals(0, count);
+        assertEquals(list.size(), count);
+    }
+
+    /**
+     * Should not change the result if order by is used.
+     */
+    public void testCountOrderBy() {
+        cleanTable();
+        populateTable();
+
+        From from = new Select()
+                .from(MockModel.class)
+                .where("intField = ?", 1)
+                .orderBy("intField ASC");
+
+        final List<MockModel> list = from.execute();
+        final int count = from.count();
+
+        assertEquals(2, count);
+        assertEquals(list.size(), count);
+    }
+
+    /**
+     * Should return the total number of rows, even if the rows are grouped. May seem weird, just
+     * test it in an SQL explorer.
+     */
+    public void testCountGroupBy() {
+        cleanTable();
+        populateTable();
+
+        From from = new Select()
+                .from(MockModel.class)
+                .groupBy("intField")
+                .having("intField = 1");
+
+        final List<MockModel> list = from.execute();
+        final int count = from.count();
+
+        assertEquals(2, count);
+        assertEquals(1, list.size());
+    }
+}
diff --git a/proactiveandroid/src/tests/java/com/proactiveandroid/test/query/DeleteTest.java b/proactiveandroid/src/tests/java/com/proactiveandroid/test/query/DeleteTest.java
new file mode 100644
index 00000000..0870eae1
--- /dev/null
+++ b/proactiveandroid/src/tests/java/com/proactiveandroid/test/query/DeleteTest.java
@@ -0,0 +1,31 @@
+package com.proactiveandroid.test.query;
+
+/*
+ * Copyright (C) 2010 Michael Pardo
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import com.proactiveandroid.query.Delete;
+import com.proactiveandroid.test.MockModel;
+
+public class DeleteTest extends SqlableTestCase {
+	public void testDelete() {
+		assertSqlEquals("DELETE ", new Delete());
+	}
+
+	public void testFrom() {
+		assertSqlEquals("DELETE FROM MockModel",
+				new Delete().from(MockModel.class));
+	}
+}
diff --git a/proactiveandroid/src/tests/java/com/proactiveandroid/test/query/ExistsTest.java b/proactiveandroid/src/tests/java/com/proactiveandroid/test/query/ExistsTest.java
new file mode 100644
index 00000000..0dddde62
--- /dev/null
+++ b/proactiveandroid/src/tests/java/com/proactiveandroid/test/query/ExistsTest.java
@@ -0,0 +1,187 @@
+
+package com.proactiveandroid.test.query;
+
+import com.proactiveandroid.query.Delete;
+import com.proactiveandroid.query.From;
+import com.proactiveandroid.query.Select;
+import com.proactiveandroid.test.MockModel;
+
+import java.util.List;
+
+
+public class ExistsTest extends SqlableTestCase {
+
+    private void cleanTable() {
+        new Delete().from(MockModel.class).execute();
+    }
+
+    private void populateTable() {
+        MockModel m1 = new MockModel();
+        MockModel m2 = new MockModel();
+        MockModel m3 = new MockModel();
+
+        m1.intField = 1;
+        m2.intField = 1;
+        m3.intField = 2;
+
+        m1.save();
+        m2.save();
+        m3.save();
+    }
+
+    /**
+     * Should return {@code true} since the result set/table isn't empty.
+     */
+    public void testExistsTable() {
+        cleanTable();
+        populateTable();
+
+        From from = new Select()
+                .from(MockModel.class);
+
+        final List<MockModel> list = from.execute();
+        final boolean exists = from.exists();
+
+        assertTrue(exists);
+        assertTrue(list.size() > 0);
+    }
+
+    /**
+     * Should be a simple exists for the entire table.
+     */
+    public void testCountTableSql() {
+        final String expected = "SELECT EXISTS(SELECT 1 FROM MockModel )";
+
+        String actual = new Select()
+                .from(MockModel.class)
+                .toExistsSql();
+
+        assertEquals(expected, actual);
+    }
+
+    /**
+     * Should be an exists with the specified where-clause.
+     */
+    public void testCountWhereClauseSql() {
+        final String expected = "SELECT EXISTS(SELECT 1 FROM MockModel WHERE intField = ? )";
+
+        String actual = new Select()
+                .from(MockModel.class)
+                .where("intField = ?", 1)
+                .toExistsSql();
+
+        assertEquals(expected, actual);
+    }
+
+    /**
+     * Shouldn't include <i>order by</i> as it has no influence on the result of <i>exists</i> and
+     * should improve performance.
+     */
+    public void testCountOrderBySql() {
+        final String expected = "SELECT EXISTS(SELECT 1 FROM MockModel WHERE intField <> ? GROUP BY intField )";
+
+        String actual = new Select()
+                .from(MockModel.class)
+                .groupBy("intField")
+                .orderBy("intField")
+                .where("intField <> ?", 0)
+                .toExistsSql();
+
+        assertEquals(expected, actual);
+    }
+
+    /**
+     * Should return {@code true} since the where-clause matches rows and thus the result set isn't
+     * empty.
+     */
+    public void testExistsWhereClause() {
+        cleanTable();
+        populateTable();
+
+        From from = new Select()
+                .from(MockModel.class)
+                .where("intField = ?", 1);
+
+        final List<MockModel> list = from.execute();
+        final boolean exists = from.exists();
+
+        assertTrue(exists);
+        assertTrue(list.size() > 0);
+    }
+
+    /**
+     * Should return {@code false} since the where-clause matches zero rows and thus the result set
+     * is empty.
+     */
+    public void testExistsEmptyResult() {
+        cleanTable();
+        populateTable();
+
+        From from = new Select()
+                .from(MockModel.class)
+                .where("intField = ?", 3);
+
+        final List<MockModel> list = from.execute();
+        final boolean exists = from.exists();
+
+        assertFalse(exists);
+        assertFalse(list.size() > 0);
+    }
+
+    /**
+     * Should not change the result if order by is used.
+     */
+    public void testCountOrderBy() {
+        cleanTable();
+        populateTable();
+
+        From from = new Select()
+                .from(MockModel.class)
+                .where("intField = ?", 1)
+                .orderBy("intField ASC");
+
+        final List<MockModel> list = from.execute();
+        final boolean exists = from.exists();
+
+        assertTrue(exists);
+        assertTrue(list.size() > 0);
+    }
+
+    /**
+     * Should not change the result if group by is used.
+     */
+    public void testCountGroupBy() {
+        cleanTable();
+        populateTable();
+
+        From from = new Select()
+                .from(MockModel.class)
+                .groupBy("intField")
+                .having("intField = 1");
+
+        final List<MockModel> list = from.execute();
+        final boolean exists = from.exists();
+
+        assertTrue(exists);
+        assertTrue(list.size() > 0);
+    }
+
+    /**
+     * Should not exist if group by eliminates all rows.
+     */
+    public void testCountGroupByEmpty() {
+        cleanTable();
+        populateTable();
+
+        From from = new Select()
+                .from(MockModel.class)
+                .groupBy("intField")
+                .having("intField = 3");
+
+        final List<MockModel> list = from.execute();
+        final boolean exists = from.exists();
+
+        assertFalse(exists);
+        assertFalse(list.size() > 0);
+    }
+}
diff --git a/proactiveandroid/src/tests/java/com/proactiveandroid/test/query/FromTest.java b/proactiveandroid/src/tests/java/com/proactiveandroid/test/query/FromTest.java
new file mode 100644
index 00000000..b90d1933
--- /dev/null
+++ b/proactiveandroid/src/tests/java/com/proactiveandroid/test/query/FromTest.java
@@ -0,0 +1,237 @@
+package com.proactiveandroid.test.query;
+
+/*
+ * Copyright (C) 2010 Michael Pardo
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import com.proactiveandroid.Model;
+import com.proactiveandroid.annotation.Table;
+import com.proactiveandroid.query.From;
+import com.proactiveandroid.query.Select;
+import com.proactiveandroid.test.MockModel;
+
+public class FromTest extends SqlableTestCase {
+	private static final String SELECT_PREFIX = "SELECT ALL * FROM MockModel ";
+	
+	public void testLimit() {
+		assertSqlEquals(SELECT_PREFIX + "LIMIT 10",
+				from().limit(10));
+		assertSqlEquals(SELECT_PREFIX + "LIMIT 10",
+				from().limit("10"));
+	}
+	
+	public void testOffset() {
+		assertSqlEquals(SELECT_PREFIX + "OFFSET 10",
+				from().offset(10));
+		assertSqlEquals(SELECT_PREFIX + "OFFSET 10",
+				from().offset("10"));
+	}
+	
+	public void testLimitOffset() {
+		assertSqlEquals(SELECT_PREFIX + "LIMIT 10 OFFSET 20",
+				from().offset(20).limit(10));
+		assertSqlEquals(SELECT_PREFIX + "LIMIT 10 OFFSET 20",
+				from().limit(10).offset(20));
+	}
+	
+	public void testAs() {
+		assertSqlEquals(SELECT_PREFIX + "AS a",
+				from().as("a"));
+	}
+	
+	public void testOrderBy() {
+		assertSqlEquals(SELECT_PREFIX + "ORDER BY Id DESC",
+				from().orderBy("Id DESC"));
+	}
+	
+	public void testWhereNoArguments() {
+		assertSqlEquals(SELECT_PREFIX + "WHERE Id = 5",
+				from().where("Id = 5"));
+		
+		assertSqlEquals(SELECT_PREFIX + "WHERE Id = 1 AND Id = 2 AND Id = 5",
+				from().where("Id = 1").where("Id = 2").where("Id = 5"));
+	}
+	
+	public void testWhereWithArguments() {
+		From query = from().where("Id = ?", 5);
+		assertArrayEquals(query.getArguments(), "5");
+		assertSqlEquals(SELECT_PREFIX + "WHERE Id = ?",
+				query);
+		
+		query = from().where("Id > ? AND Id < ?", 5, 10);
+		assertArrayEquals(query.getArguments(), "5", "10");
+		assertSqlEquals(SELECT_PREFIX + "WHERE Id > ? AND Id < ?",
+				query);
+		
+        // Chained
+		query = from()
+				.where("Id != ?", 10)
+				.where("Id IN (?, ?, ?)", 5, 10, 15)
+				.where("Id > ? AND Id < ?", 5, 10);
+		assertArrayEquals(query.getArguments(), "10", "5", "10", "15", "5", "10");
+		assertSqlEquals(SELECT_PREFIX + "WHERE Id != ? AND Id IN (?, ?, ?) AND Id > ? AND Id < ?",
+				query);
+	}
+
+	public void testWhereChaining() {
+	    
+	    From expected = from()
+	            .where("a = ? AND b = ?", 1, 2);
+	    
+	    From actual = from()
+	            .where("a = ?", 1, 2)
+	            .where("b = ?", 1, 2);
+	    
+	    assertSqlEquals(expected, actual);
+	}
+	
+   public void testWhereAndChaining() {
+
+       From expected = from()
+               .where("a = ? AND b = ?", 1, 2);
+
+       From actual = from()
+               .where("a = ?", 1)
+               .and("b = ?", 2);
+
+       assertSqlEquals(expected, actual);
+   }
+
+   public void testWhereOrChaining() {
+
+       From expected = from()
+               .where("a = ? OR b = ?", 1, 2);
+
+       From actual = from()
+               .where("a = ?", 1)
+               .or("b = ?", 2);
+
+       assertSqlEquals(expected, actual);
+   }
+
+   public void testWhereAndOrChaining() {
+
+       From expected = from()
+               .where("a = ? OR (b = ? AND c = ?)", 1, 2, 3);
+
+       From actual = from()
+               .where("a = ?", 1)
+               .or("(b = ? AND c = ?)", 2, 3);
+
+       assertSqlEquals(expected, actual);
+   }
+
+   public void testWhereAlternateAndOrChaining() {
+
+       From expected = from()
+               .where("a = ? OR (b = ? AND c = ?)", 1, 2, 3);
+
+       From actual = from()
+               .where("a = ?", 1)
+               .or("(b = ?", 2)
+               .and("c = ?)", 3);
+
+       assertSqlEquals(expected, actual);
+   }
+
+    // Test with 'no arguments' and 'with arguments' chained together.
+    public void testWhereWithNoArgumentsAndWithArguments() {
+        From query = from().where("Id = 5");
+        query.where("Id > ?", 4);
+        assertArrayEquals(query.getArguments(), "4");
+        assertSqlEquals(SELECT_PREFIX + "WHERE Id = 5 AND Id > ?",
+                query);
+    }
+	
+	public void testSingleJoin() {
+		assertSqlEquals(SELECT_PREFIX + "JOIN JoinModel ON MockModel.Id = JoinModel.Id",
+				from().join(JoinModel.class).on("MockModel.Id = JoinModel.Id"));
+		
+		assertSqlEquals(SELECT_PREFIX + "AS a JOIN JoinModel AS b ON a.Id = b.Id",
+				from().as("a").join(JoinModel.class).as("b").on("a.Id = b.Id"));
+		
+		assertSqlEquals(SELECT_PREFIX + "JOIN JoinModel USING (Id, other)",
+				from().join(JoinModel.class).using("Id", "other"));
+	}
+	
+	public void testJoins() {
+		assertSqlEquals(SELECT_PREFIX + "JOIN JoinModel ON Id JOIN JoinModel2 ON Id",
+				from().join(JoinModel.class).on("Id")
+				.join(JoinModel2.class).on("Id"));
+	}
+	
+	public void testJoinTypes() {
+		assertSqlEquals(SELECT_PREFIX + "INNER JOIN JoinModel ON",
+				from().innerJoin(JoinModel.class).on(""));
+		assertSqlEquals(SELECT_PREFIX + "OUTER JOIN JoinModel ON",
+				from().outerJoin(JoinModel.class).on(""));
+		assertSqlEquals(SELECT_PREFIX + "CROSS JOIN JoinModel ON",
+				from().crossJoin(JoinModel.class).on(""));
+	}
+	
+	public void testGroupByHaving() {
+		assertSqlEquals(SELECT_PREFIX + "GROUP BY Id",
+				from().groupBy("Id"));
+		assertSqlEquals(SELECT_PREFIX + "GROUP BY Id HAVING Id = 1",
+				from().groupBy("Id").having("Id = 1"));
+		assertSqlEquals(SELECT_PREFIX + "GROUP BY Id HAVING Id = 1",
+				from().having("Id = 1").groupBy("Id"));
+	}
+	
+	public void testAll() {
+		final String expectedSql = SELECT_PREFIX + "AS a JOIN JoinModel USING (Id) WHERE Id > 5 GROUP BY Id HAVING Id < 10 LIMIT 5 OFFSET 10";
+		
+		// Try a few different orderings, shouldn't change the output
+		assertSqlEquals(expectedSql,
+				from()
+					.as("a")
+					.where("Id > 5")
+					.join(JoinModel.class).using("Id")
+					.groupBy("Id")
+					.having("Id < 10")
+					.limit(5)
+					.offset(10));
+		assertSqlEquals(expectedSql,
+				from()
+					.offset(10)
+					.having("Id < 10")
+					.join(JoinModel.class).using("Id")
+					.limit(5)
+					.as("a")
+					.where("Id > 5")
+					.groupBy("Id"));
+		assertSqlEquals(expectedSql,
+				from()
+					.join(JoinModel.class).using("Id")
+					.offset(10)
+					.having("Id < 10")
+					.where("Id > 5")
+					.groupBy("Id")
+					.limit(5)
+					.as("a"));
+	}
+	
+	private From from() {
+		return new Select().all().from(MockModel.class);
+	}
+	
+	@Table(name = "JoinModel")
+	private static class JoinModel extends Model {
+	}
+	
+	@Table(name = "JoinModel2")
+	private static class JoinModel2 extends Model {
+	}
+}
diff --git a/proactiveandroid/src/tests/java/com/proactiveandroid/test/query/SelectTest.java b/proactiveandroid/src/tests/java/com/proactiveandroid/test/query/SelectTest.java
new file mode 100644
index 00000000..7527a086
--- /dev/null
+++ b/proactiveandroid/src/tests/java/com/proactiveandroid/test/query/SelectTest.java
@@ -0,0 +1,50 @@
+package com.proactiveandroid.test.query;
+
+/*
+ * Copyright (C) 2010 Michael Pardo
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import com.proactiveandroid.query.Select;
+import com.proactiveandroid.test.MockModel;
+
+public class SelectTest extends SqlableTestCase {
+	public void testSelectEmpty() {
+		assertSqlEquals("SELECT * ", new Select());
+	}
+
+	public void testSelectAll() {
+		assertSqlEquals("SELECT ALL * ", new Select().all());
+		assertSqlEquals("SELECT ALL * ", new Select().distinct().all());
+	}
+
+	public void testSelectDistinct() {
+		assertSqlEquals("SELECT DISTINCT * ", new Select().distinct());
+		assertSqlEquals("SELECT DISTINCT * ", new Select().all().distinct());
+	}
+
+	public void testSelectStringColumns() {
+		assertSqlEquals("SELECT a, b, c ", new Select("a", "b", "c"));
+	}
+
+	public void testSelectDistinctColumns() {
+		assertSqlEquals("SELECT DISTINCT a, b, c ",
+				new Select("a", "b", "c").distinct());
+	}
+
+	public void testFrom() {
+		assertSqlEquals("SELECT ALL * FROM MockModel",
+				new Select().all().from(MockModel.class));
+	}
+}
diff --git a/proactiveandroid/src/tests/java/com/proactiveandroid/test/query/SqlableTestCase.java b/proactiveandroid/src/tests/java/com/proactiveandroid/test/query/SqlableTestCase.java
new file mode 100644
index 00000000..b3ca4d34
--- /dev/null
+++ b/proactiveandroid/src/tests/java/com/proactiveandroid/test/query/SqlableTestCase.java
@@ -0,0 +1,30 @@
+package com.proactiveandroid.test.query;
+
+/*
+ * Copyright (C) 2010 Michael Pardo
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import com.proactiveandroid.query.Sqlable;
+import com.proactiveandroid.test.ActiveAndroidTestCase;
+
+public abstract class SqlableTestCase extends ActiveAndroidTestCase {
+	public static void assertSqlEquals(String expected, Sqlable actual) {
+		assertEquals(expected, actual.toSql());
+	}
+	
+	public static void assertSqlEquals(Sqlable expected, Sqlable actual) {
+	    assertEquals(expected.toSql(), actual.toSql());
+	}
+}
diff --git a/proactiveandroid/src/tests/java/com/proactiveandroid/test/query/UpdateTest.java b/proactiveandroid/src/tests/java/com/proactiveandroid/test/query/UpdateTest.java
new file mode 100644
index 00000000..5d1cf823
--- /dev/null
+++ b/proactiveandroid/src/tests/java/com/proactiveandroid/test/query/UpdateTest.java
@@ -0,0 +1,62 @@
+package com.proactiveandroid.test.query;
+
+/*
+ * Copyright (C) 2010 Michael Pardo
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import com.proactiveandroid.query.Set;
+import com.proactiveandroid.query.Update;
+import com.proactiveandroid.test.MockModel;
+
+public class UpdateTest extends SqlableTestCase {
+	private static final String UPDATE_PREFIX = "UPDATE MockModel ";
+	
+	public void testUpdate() {
+		assertSqlEquals(UPDATE_PREFIX, update());
+	}
+	
+	public void testUpdateSet() {
+		assertSqlEquals(UPDATE_PREFIX + "SET Id = 5 ",
+				update().set("Id = 5"));
+	}
+	
+	public void testUpdateWhereNoArguments() {
+		assertSqlEquals(UPDATE_PREFIX + "SET Id = 5 WHERE Id = 1 ",
+				update()
+					.set("Id = 5")
+					.where("Id = 1"));
+	}
+	
+	public void testUpdateWhereWithArguments() {
+		Set set = update()
+				.set("Id = 5")
+				.where("Id = ?", 1);
+		assertArrayEquals(set.getArguments(), "1");
+		assertSqlEquals(UPDATE_PREFIX + "SET Id = 5 WHERE Id = ? ",
+				set);
+		
+		set = update()
+				.set("Id = 5")
+				.where("Id = ?", 1)
+				.where("Id IN (?, ?, ?)", 5, 4, 3);
+		assertArrayEquals(set.getArguments(), "5", "4", "3");
+		assertSqlEquals(UPDATE_PREFIX + "SET Id = 5 WHERE Id IN (?, ?, ?) ",
+				set);
+	}
+	
+	private Update update() {
+		return new Update(MockModel.class);
+	}
+}
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
index 00000000..bf2bdeac
--- /dev/null
+++ b/settings.gradle
@@ -0,0 +1 @@
+include ':proactiveandroid'
