diff --git a/pom.xml b/pom.xml
index eafb111c..e04aaec5 100644
--- a/pom.xml
+++ b/pom.xml
@@ -26,7 +26,7 @@
         <plugin>
           <groupId>com.jayway.maven.plugins.android.generation2</groupId>
           <artifactId>android-maven-plugin</artifactId>
-          <version>3.8.2</version>
+          <version>3.9.0.rc.3</version>
         </plugin>
         <plugin>
           <artifactId>maven-compiler-plugin</artifactId>
diff --git a/src/com/activeandroid/ActiveAndroid.java b/src/com/activeandroid/ActiveAndroid.java
index c58c8efd..60237c8f 100644
--- a/src/com/activeandroid/ActiveAndroid.java
+++ b/src/com/activeandroid/ActiveAndroid.java
@@ -20,6 +20,7 @@
 import android.database.sqlite.SQLiteDatabase;
 
 import com.activeandroid.util.Log;
+import android.os.Build;
 
 public final class ActiveAndroid {
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -60,8 +61,16 @@ public static SQLiteDatabase getDatabase() {
 		return Cache.openDatabase();
 	}
 
+    /**
+     * Non-exclusive transactions allows BEGIN IMMEDIATE
+     * blocks, allowing better read concurrency.
+     */
 	public static void beginTransaction() {
-		Cache.openDatabase().beginTransaction();
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
+            Cache.openDatabase().beginTransaction();
+        } else {
+            Cache.openDatabase().beginTransactionNonExclusive();
+        }
 	}
 
 	public static void endTransaction() {
diff --git a/src/com/activeandroid/Cache.java b/src/com/activeandroid/Cache.java
index 6495e379..737fe108 100644
--- a/src/com/activeandroid/Cache.java
+++ b/src/com/activeandroid/Cache.java
@@ -66,6 +66,8 @@ public static synchronized void initialize(Configuration configuration) {
 		sModelInfo = new ModelInfo(configuration);
 		sDatabaseHelper = new DatabaseHelper(configuration);
 
+		checkDbReset(configuration);
+
 		// TODO: It would be nice to override sizeOf here and calculate the memory
 		// actually used, however at this point it seems like the reflection
 		// required would be too costly to be of any benefit. We'll just set a max
@@ -155,4 +157,61 @@ public static synchronized TypeSerializer getParserForType(Class<?> type) {
 	public static synchronized String getTableName(Class<? extends Model> type) {
 		return sModelInfo.getTableInfo(type).getTableName();
 	}
+
+    /**
+     * Checks if the db should be reset on startup. It can be enabled
+     * by putting the following lines in your application's manifest:
+     *
+     * ```
+     * <meta-data
+     *    android:name="AA_DB_RESET"
+     *    android:value="true" />
+     * ```
+     *
+     * It will reset the database only once, if and only the `AA_DB_VERSION`
+     * parameter is increased between app releases.
+     *
+     * @param configuration The ActiveAndroid configuration.
+     */
+    public static synchronized void checkDbReset(Configuration configuration) {
+        // Check if the reset flag is set
+        if (configuration != null && configuration.getResetDatabase()) {
+            Log.w("Checking db reset");
+
+            // Get the current db
+            SQLiteDatabase db = sContext.openOrCreateDatabase(
+                    configuration.getDatabaseName(),
+                    Context.MODE_PRIVATE,
+                    null);
+
+            if (db == null) {
+                return;
+            }
+
+            // New dbs always have version == 0
+            if (db.getVersion() == 0) {
+                Log.w("New db, not resetting");
+                return;
+            }
+
+            // Only update if the config version is higher. This
+            // prevents repeated resets
+            if (db.getVersion() >= configuration.getDatabaseVersion()) {
+                Log.w(String.format("Current db version >= config, not resetting (%d >= %d)",
+                        db.getVersion(),
+                        configuration.getDatabaseVersion()));
+                return;
+            }
+
+            // Finally, reset the db. We first delete it
+            // and then we create a new one with the same
+            // name.
+            Log.w("Resetting database");
+            sContext.deleteDatabase(configuration.getDatabaseName());
+            sContext.openOrCreateDatabase(
+                    configuration.getDatabaseName(),
+                    Context.MODE_PRIVATE,
+                    null).close();
+        }
+    }
 }
diff --git a/src/com/activeandroid/Configuration.java b/src/com/activeandroid/Configuration.java
index b197d223..d8bb504f 100644
--- a/src/com/activeandroid/Configuration.java
+++ b/src/com/activeandroid/Configuration.java
@@ -39,6 +39,7 @@
 	private String mDatabaseName;
 	private int mDatabaseVersion;
 	private String mSqlParser;
+	private Boolean mResetDatabase;
 	private List<Class<? extends Model>> mModelClasses;
 	private List<Class<? extends TypeSerializer>> mTypeSerializers;
 	private int mCacheSize;
@@ -71,6 +72,10 @@ public String getSqlParser() {
 	    return mSqlParser;
 	}
 
+	public boolean getResetDatabase() {
+		return mResetDatabase;
+	}
+
 	public List<Class<? extends Model>> getModelClasses() {
 		return mModelClasses;
 	}
@@ -101,6 +106,7 @@ public boolean isValid() {
 		private final static String AA_MODELS = "AA_MODELS";
 		private final static String AA_SERIALIZERS = "AA_SERIALIZERS";
 		private final static String AA_SQL_PARSER = "AA_SQL_PARSER";
+		private final static String AA_DB_RESET = "AA_DB_RESET";
 
 		private static final int DEFAULT_CACHE_SIZE = 1024;
 		private static final String DEFAULT_DB_NAME = "Application.db";
@@ -116,6 +122,7 @@ public boolean isValid() {
 		private String mDatabaseName;
 		private Integer mDatabaseVersion;
 		private String mSqlParser;
+		private Boolean mResetDatabase;
 		private List<Class<? extends Model>> mModelClasses;
 		private List<Class<? extends TypeSerializer>> mTypeSerializers;
 
@@ -152,6 +159,11 @@ public Builder setSqlParser(String sqlParser) {
 		    return this;
 		}
 
+		public Builder setResetDatabase(Boolean resetDatabase) {
+			mResetDatabase = resetDatabase;
+			return this;
+		}
+
 		public Builder addModelClass(Class<? extends Model> modelClass) {
 			if (mModelClasses == null) {
 				mModelClasses = new ArrayList<Class<? extends Model>>();
@@ -243,6 +255,13 @@ public Configuration create() {
 				}
 			}
 
+			// Get reset flag from meta-data
+			if (mResetDatabase != null) {
+				configuration.mResetDatabase = mResetDatabase;
+			} else {
+				configuration.mResetDatabase = getResetDatabaseOrDefault();
+			}
+
 			return configuration;
 		}
 
@@ -314,5 +333,12 @@ private String getMetaDataSqlParserOrDefault() {
 			return typeSerializers;
 		}
 
+		private Boolean getResetDatabaseOrDefault() {
+			final Boolean reset = ReflectionUtils.getMetaData(mContext, AA_DB_RESET);
+			if (reset == null) {
+				return false;
+			}
+			return reset;
+		}
 	}
 }
diff --git a/src/com/activeandroid/DatabaseHelper.java b/src/com/activeandroid/DatabaseHelper.java
index 7158c5bb..c2b30e9c 100644
--- a/src/com/activeandroid/DatabaseHelper.java
+++ b/src/com/activeandroid/DatabaseHelper.java
@@ -37,6 +37,7 @@
 import com.activeandroid.util.NaturalOrderComparator;
 import com.activeandroid.util.SQLiteUtils;
 import com.activeandroid.util.SqlParser;
+import android.os.Build;
 
 public final class DatabaseHelper extends SQLiteOpenHelper {
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -65,6 +66,25 @@ public DatabaseHelper(Configuration configuration) {
 	// OVERRIDEN METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
+    /**
+     * onConfigure is called when the db connection
+     * is being configured. It's the right place
+     * to enable write-ahead logging or foreign
+     * key support.
+     *
+     * Available for API level 16 (JellyBean) and above.
+     */
+    @Override
+    public void onConfigure(SQLiteDatabase db) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
+            db.enableWriteAheadLogging();
+        }
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
+            db.setForeignKeyConstraintsEnabled(true);
+        }
+        executePragmas(db);
+    }
+
 	@Override
 	public void onOpen(SQLiteDatabase db) {
 		executePragmas(db);
diff --git a/src/com/activeandroid/app/Application.java b/src/com/activeandroid/app/Application.java
index 311c7c93..312a3bba 100644
--- a/src/com/activeandroid/app/Application.java
+++ b/src/com/activeandroid/app/Application.java
@@ -17,12 +17,14 @@
  */
 
 import com.activeandroid.ActiveAndroid;
+import com.activeandroid.Configuration;
 
 public class Application extends android.app.Application {
 	@Override
 	public void onCreate() {
 		super.onCreate();
-		ActiveAndroid.initialize(this);
+		Configuration config = new Configuration.Builder(this).setCacheSize(1).create();
+        ActiveAndroid.initialize(config);
 	}
 	
 	@Override
diff --git a/src/com/activeandroid/query/From.java b/src/com/activeandroid/query/From.java
index ab3837a9..358c3036 100644
--- a/src/com/activeandroid/query/From.java
+++ b/src/com/activeandroid/query/From.java
@@ -156,12 +156,7 @@ public From offset(String offset) {
 	}
 
 	void addArguments(Object[] args) {
-        for(Object arg : args) {
-            if (arg.getClass() == boolean.class || arg.getClass() == Boolean.class) {
-                arg = (arg.equals(true) ? 1 : 0);
-            }
-            mArguments.add(arg);
-        }
+    SQLiteUtils.addArguments(mArguments, args);
 	}
 
     private void addFrom(final StringBuilder sql) {
diff --git a/src/com/activeandroid/query/Set.java b/src/com/activeandroid/query/Set.java
index 183d99f0..43c27611 100644
--- a/src/com/activeandroid/query/Set.java
+++ b/src/com/activeandroid/query/Set.java
@@ -19,7 +19,6 @@
 import com.activeandroid.util.SQLiteUtils;
 
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.List;
 
 public final class Set implements Sqlable {
@@ -46,7 +45,7 @@ public Set(Update queryBase, String set, Object... args) {
 		mSetArguments = new ArrayList<Object>();
 		mWhereArguments = new ArrayList<Object>();
 
-		mSetArguments.addAll(Arrays.asList(args));
+    SQLiteUtils.addArguments(mSetArguments, args);
 	}
 
 	public Set where(String where) {
@@ -59,7 +58,7 @@ public Set where(String where) {
 	public Set where(String where, Object... args) {
 		mWhere = where;
 		mWhereArguments.clear();
-		mWhereArguments.addAll(Arrays.asList(args));
+    SQLiteUtils.addArguments(mWhereArguments, args);
 
 		return this;
 	}
diff --git a/src/com/activeandroid/util/SQLiteUtils.java b/src/com/activeandroid/util/SQLiteUtils.java
index cbf41eae..8b5e3802 100644
--- a/src/com/activeandroid/util/SQLiteUtils.java
+++ b/src/com/activeandroid/util/SQLiteUtils.java
@@ -27,12 +27,11 @@
 import com.activeandroid.annotation.Column.ConflictAction;
 import com.activeandroid.serializer.TypeSerializer;
 
-import java.lang.Long;
-import java.lang.String;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
-import java.util.Arrays;
 import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -403,4 +402,13 @@ private static int processIntCursor(final Cursor cursor) {
 
 		return sl;
 	}
+
+  public static void addArguments(Collection<Object> argumentList, Object[] newArguments) {
+    for (Object arg : newArguments) {
+        if (arg.getClass() == boolean.class || arg.getClass() == Boolean.class) {
+            arg = (arg.equals(true) ? 1 : 0);
+        }
+        argumentList.add(arg);
+    }
+  }
 }
diff --git a/tests/src/com/activeandroid/test/ResetTest.java b/tests/src/com/activeandroid/test/ResetTest.java
new file mode 100644
index 00000000..cac145bc
--- /dev/null
+++ b/tests/src/com/activeandroid/test/ResetTest.java
@@ -0,0 +1,60 @@
+package com.activeandroid.test;
+
+import com.activeandroid.ActiveAndroid;
+import com.activeandroid.Configuration;
+import com.activeandroid.Model;
+import com.activeandroid.annotation.Table;
+
+import android.test.AndroidTestCase;
+
+import java.io.IOException;
+import java.util.List;
+
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+
+public class ResetTest extends AndroidTestCase {
+
+    public void testReset() {
+        Configuration conf = new Configuration.Builder(getContext())
+			.setDatabaseVersion(1)
+			.setDatabaseName("ResetTest")
+			.addModelClass(ResetTestFirstModel.class)
+			.create();
+
+		ActiveAndroid.initialize(conf, true);
+		assertTrue(checkIfTableExists("ResetTestFirstModel"));
+		assertFalse(checkIfTableExists("ResetTestSecondModel"));
+		ActiveAndroid.dispose();
+
+        Configuration conf2 = new Configuration.Builder(getContext())
+			.setDatabaseVersion(2)
+			.setDatabaseName("ResetTest")
+			.setResetDatabase(true)
+			.addModelClass(ResetTestSecondModel.class)
+			.create();
+
+		ActiveAndroid.initialize(conf2, true);
+		assertFalse(checkIfTableExists("ResetTestFirstModel"));
+		assertTrue(checkIfTableExists("ResetTestSecondModel"));
+    }
+
+	public boolean checkIfTableExists(String tableName) {
+		SQLiteDatabase db = ActiveAndroid.getDatabase();
+		Cursor cursor = db.rawQuery("select DISTINCT tbl_name from sqlite_master where tbl_name = '" + tableName + "'", null);
+		if (cursor.getCount() > 0) {
+			cursor.close();
+			return true;
+		}
+		cursor.close();
+		return false;
+	}
+
+    @Table(name = "ResetTestFirstModel")
+    private static class ResetTestFirstModel extends Model {
+    }
+
+    @Table(name = "ResetTestSecondModel")
+    private static class ResetTestSecondModel extends Model {
+    }
+}
diff --git a/tests/src/com/activeandroid/test/query/SqlableTestCase.java b/tests/src/com/activeandroid/test/query/SqlableTestCase.java
index 36137600..0a0c4b07 100644
--- a/tests/src/com/activeandroid/test/query/SqlableTestCase.java
+++ b/tests/src/com/activeandroid/test/query/SqlableTestCase.java
@@ -21,10 +21,10 @@
 
 public abstract class SqlableTestCase extends ActiveAndroidTestCase {
 	public static void assertSqlEquals(String expected, Sqlable actual) {
-		assertEquals(expected, actual.toSql());
+		assertEquals(expected.trim(), actual.toSql().trim());
 	}
 	
 	public static void assertSqlEquals(Sqlable expected, Sqlable actual) {
-	    assertEquals(expected.toSql(), actual.toSql());
+	    assertSqlEquals(expected.toSql(), actual);
 	}
 }
diff --git a/tests/src/com/activeandroid/test/query/UpdateTest.java b/tests/src/com/activeandroid/test/query/UpdateTest.java
index 814d34f7..aa731a8d 100644
--- a/tests/src/com/activeandroid/test/query/UpdateTest.java
+++ b/tests/src/com/activeandroid/test/query/UpdateTest.java
@@ -55,6 +55,18 @@ public void testUpdateWhereWithArguments() {
 		assertSqlEquals(UPDATE_PREFIX + "SET Id = 5 WHERE Id IN (?, ?, ?) ",
 				set);
 	}
+
+  public void performTestUpdateBoolean(boolean condition) {
+    Set set = update().set("booleanField = ?", condition);
+    assertArrayEquals(set.getArguments(), condition ? "1" : "0");
+    assertSqlEquals(UPDATE_PREFIX + "SET booleanField = ?",
+        set);
+  }
+
+  public void testUpdateBoolean() {
+    performTestUpdateBoolean(true);
+    performTestUpdateBoolean(false);
+  }
 	
 	private Update update() {
 		return new Update(MockModel.class);
