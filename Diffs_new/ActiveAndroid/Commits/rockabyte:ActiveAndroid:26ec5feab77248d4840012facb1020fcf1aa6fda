diff --git a/src/com/activeandroid/Cache.java b/src/com/activeandroid/Cache.java
index 6495e379..ab1c3e02 100644
--- a/src/com/activeandroid/Cache.java
+++ b/src/com/activeandroid/Cache.java
@@ -123,7 +123,7 @@ public static String getIdentifier(Class<? extends Model> type, Long id) {
 	}
 
 	public static String getIdentifier(Model entity) {
-		return getIdentifier(entity.getClass(), entity.getId());
+		return getIdentifier(entity.getClass(), entity.getActiveAndroidId());
 	}
 
 	public static synchronized void addEntity(Model entity) {
diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index c279b129..09a7f318 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -40,7 +40,7 @@
 	// PRIVATE MEMBERS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	private Long mId = null;
+	private Long mActiveAndroidId = null;
 
 	private final TableInfo mTableInfo;
 	private final String idName;
@@ -57,16 +57,16 @@ public Model() {
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	public final Long getId() {
-		return mId;
+	public final Long getActiveAndroidId() {
+		return mActiveAndroidId;
 	}
 
 	public final void delete() {
-		Cache.openDatabase().delete(mTableInfo.getTableName(), idName+"=?", new String[] { getId().toString() });
+		Cache.openDatabase().delete(mTableInfo.getTableName(), idName+"=?", new String[] { getActiveAndroidId().toString() });
 		Cache.removeEntity(this);
 
 		Cache.getContext().getContentResolver()
-				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mId), null);
+				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mActiveAndroidId), null);
 	}
 
 	public final Long save() {
@@ -135,7 +135,7 @@ else if (fieldType.equals(Byte[].class) || fieldType.equals(byte[].class)) {
 					values.put(fieldName, (byte[]) value);
 				}
 				else if (ReflectionUtils.isModel(fieldType)) {
-					values.put(fieldName, ((Model) value).getId());
+					values.put(fieldName, ((Model) value).getActiveAndroidId());
 				}
 				else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 					values.put(fieldName, ((Enum<?>) value).name());
@@ -149,16 +149,16 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 			}
 		}
 
-		if (mId == null) {
-			mId = db.insert(mTableInfo.getTableName(), null, values);
+		if (mActiveAndroidId == null) {
+			mActiveAndroidId = db.insert(mTableInfo.getTableName(), null, values);
 		}
 		else {
-			db.update(mTableInfo.getTableName(), values, idName+"=" + mId, null);
+			db.update(mTableInfo.getTableName(), values, idName+"=" + mActiveAndroidId, null);
 		}
 
 		Cache.getContext().getContentResolver()
-				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mId), null);
-		return mId;
+				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mActiveAndroidId), null);
+		return mActiveAndroidId;
 	}
 
 	// Convenience methods
@@ -269,7 +269,7 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 			}
 		}
 
-		if (mId != null) {
+		if (mActiveAndroidId != null) {
 			Cache.addEntity(this);
 		}
 	}
@@ -279,7 +279,7 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 	//////////////////////////////////////////////////////////////////////////////////////
 
 	protected final <T extends Model> List<T> getMany(Class<T> type, String foreignKey) {
-		return new Select().from(type).where(Cache.getTableName(type) + "." + foreignKey + "=?", getId()).execute();
+		return new Select().from(type).where(Cache.getTableName(type) + "." + foreignKey + "=?", getActiveAndroidId()).execute();
 	}
 
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -288,15 +288,15 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 
 	@Override
 	public String toString() {
-		return mTableInfo.getTableName() + "@" + getId();
+		return mTableInfo.getTableName() + "@" + getActiveAndroidId();
 	}
 
 	@Override
 	public boolean equals(Object obj) {
-		if (obj instanceof Model && this.mId != null) {
+		if (obj instanceof Model && this.mActiveAndroidId != null) {
 			final Model other = (Model) obj;
 
-			return this.mId.equals(other.mId)							
+			return this.mActiveAndroidId.equals(other.mActiveAndroidId)
 							&& (this.mTableInfo.getTableName().equals(other.mTableInfo.getTableName()));
 		} else {
 			return this == obj;
@@ -306,7 +306,7 @@ public boolean equals(Object obj) {
 	@Override
 	public int hashCode() {
 		int hash = HASH_PRIME;
-		hash += HASH_PRIME * (mId == null ? super.hashCode() : mId.hashCode()); //if id is null, use Object.hashCode()
+		hash += HASH_PRIME * (mActiveAndroidId == null ? super.hashCode() : mActiveAndroidId.hashCode()); //if id is null, use Object.hashCode()
 		hash += HASH_PRIME * mTableInfo.getTableName().hashCode();
 		return hash; //To change body of generated methods, choose Tools | Templates.
 	}
diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index 32d1ecb3..048e0d54 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -108,7 +108,7 @@ public String getColumnName(Field field) {
     private Field getIdField(Class<?> type) {
         if (type.equals(Model.class)) {
             try {
-                return type.getDeclaredField("mId");
+                return type.getDeclaredField("mActiveAndroidId");
             }
             catch (NoSuchFieldException e) {
                 Log.e("Impossible!", e.toString());
diff --git a/src/com/activeandroid/annotation/Table.java b/src/com/activeandroid/annotation/Table.java
index 541dfbe9..310f438f 100644
--- a/src/com/activeandroid/annotation/Table.java
+++ b/src/com/activeandroid/annotation/Table.java
@@ -25,7 +25,7 @@
 @Retention(RetentionPolicy.RUNTIME)
 public @interface Table {
 
-	public static final String DEFAULT_ID_NAME = "Id";
+	public static final String DEFAULT_ID_NAME = "ActiveAndroidId";
 	public String name();
 	public String id() default DEFAULT_ID_NAME;
 }
diff --git a/src/com/activeandroid/widget/ModelAdapter.java b/src/com/activeandroid/widget/ModelAdapter.java
index 70e59913..5f04fb1c 100644
--- a/src/com/activeandroid/widget/ModelAdapter.java
+++ b/src/com/activeandroid/widget/ModelAdapter.java
@@ -48,7 +48,7 @@ public long getItemId(int position) {
 		T item = getItem(position);
 
 		if (item != null) {
-			return item.getId();
+			return item.getActiveAndroidId();
 		}
 		else {
 			return -1;
diff --git a/tests/src/com/activeandroid/test/ModelTest.java b/tests/src/com/activeandroid/test/ModelTest.java
index f8703c15..56b72aa4 100644
--- a/tests/src/com/activeandroid/test/ModelTest.java
+++ b/tests/src/com/activeandroid/test/ModelTest.java
@@ -111,7 +111,7 @@ public void testHashCodeDifferentRows() {
 
 		m1.save();
 		m2.save();
-		m3 = Model.load(MockModel.class, m1.getId());
+		m3 = Model.load(MockModel.class, m1.getActiveAndroidId());
 
 		assertEquals(m1.hashCode(), m3.hashCode());
 		assertFalse(m1.hashCode() == m2.hashCode());
