diff --git a/src/com/activeandroid/Cache.java b/src/com/activeandroid/Cache.java
index 6495e379..a48e18f7 100644
--- a/src/com/activeandroid/Cache.java
+++ b/src/com/activeandroid/Cache.java
@@ -155,4 +155,10 @@ public static synchronized TypeSerializer getParserForType(Class<?> type) {
 	public static synchronized String getTableName(Class<? extends Model> type) {
 		return sModelInfo.getTableInfo(type).getTableName();
 	}
+    public static synchronized int getOldDbVersion(){
+        return sDatabaseHelper.getOldDbVersion();
+    }
+    public static synchronized int getOldNewVersion(){
+        return sDatabaseHelper.getNewDbVersion();
+    }
 }
diff --git a/src/com/activeandroid/DatabaseHelper.java b/src/com/activeandroid/DatabaseHelper.java
index b724c9d5..96190d5c 100644
--- a/src/com/activeandroid/DatabaseHelper.java
+++ b/src/com/activeandroid/DatabaseHelper.java
@@ -52,6 +52,8 @@
 
     private final String mSqlParser;
     private OnUpgradeListener mOnUpgradeListener;
+    private int mOldVersion = 0;
+    private int mNewVersion=0;
 
     //////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
@@ -89,6 +91,9 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
         if(null!=mOnUpgradeListener){
             mOnUpgradeListener.onUpgrade(db,oldVersion,newVersion);
         }
+        this.mOldVersion=oldVersion;
+        this.mNewVersion=newVersion;
+
 	}
 
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -130,6 +135,14 @@ public void setOnUpgradeListener(OnUpgradeListener listener){
         this.mOnUpgradeListener=listener;
     }
 
+    public int getOldDbVersion() {
+        return mOldVersion;
+    }
+
+    public int getNewDbVersion() {
+        return mNewVersion;
+    }
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PRIVATE METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -263,4 +276,6 @@ private void executeLegacySqlScript(SQLiteDatabase db, InputStream stream) throw
 
         }
 	}
+
+
 }
diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 421426ea..4521b9f2 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -18,6 +18,7 @@
 
 import android.content.ContentValues;
 import android.database.Cursor;
+import android.database.SQLException;
 import android.database.sqlite.SQLiteDatabase;
 
 import com.activeandroid.content.ContentProvider;
@@ -37,31 +38,48 @@
 
 	/** Prime number used for hashcode() implementation. */
 	private static final int HASH_PRIME = 739;
+    private boolean dbEnabled=false;
 
-	//////////////////////////////////////////////////////////////////////////////////////
+    //////////////////////////////////////////////////////////////////////////////////////
 	// PRIVATE MEMBERS
 	//////////////////////////////////////////////////////////////////////////////////////
 
 	private Long mId = null;
 
-	private final TableInfo mTableInfo;
-	private final String idName;
+	private TableInfo mTableInfo;
+	private String idName;
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
 
 	public Model() {
-		mTableInfo = Cache.getTableInfo(getClass());
-		idName = mTableInfo.getIdName();
+        this(true);
 	}
 
-	//////////////////////////////////////////////////////////////////////////////////////
+    public Model(boolean useDB){
+        if(useDB){
+            enableDB(true);
+        }
+    }
+
+
+    //////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	public final Long getId() {
+    private void enableDB(boolean enable) {
+        mTableInfo = Cache.getTableInfo(getClass());
+        idName = mTableInfo.getIdName();
+        dbEnabled =enable;
+    }
+
+    public boolean isDbEnabled(){return dbEnabled;}
+    public final Long getId() {
 		return mId;
 	}
+    public final void setId(Long pId) {
+         mId=pId;
+    }
 
 	public final void delete() {
 		Cache.openDatabase().delete(mTableInfo.getTableName(), idName+"=?", new String[] { getId().toString() });
@@ -71,7 +89,7 @@ public final void delete() {
 				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), mId), null);
 	}
 
-	public final Long save() {
+	public final Long save() throws SQLException{
 		final SQLiteDatabase db = Cache.openDatabase();
 		final ContentValues values = new ContentValues();
 
@@ -152,10 +170,10 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 		}
 
 		if (mId == null) {
-			mId = db.insert(mTableInfo.getTableName(), null, values);
+			mId = db.insertOrThrow(mTableInfo.getTableName(), null, values);
 		}
 		else {
-			db.update(mTableInfo.getTableName(), values, idName+"=" + mId, null);
+			db.update(mTableInfo.getTableName(), values, idName + "=" + mId, null);
 		}
 
 		Cache.getContext().getContentResolver()
diff --git a/src/com/activeandroid/annotation/Table.java b/src/com/activeandroid/annotation/Table.java
index 541dfbe9..9d2c0dca 100644
--- a/src/com/activeandroid/annotation/Table.java
+++ b/src/com/activeandroid/annotation/Table.java
@@ -17,12 +17,14 @@
  */
 
 import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
+@Inherited
 public @interface Table {
 
 	public static final String DEFAULT_ID_NAME = "Id";
diff --git a/src/com/activeandroid/widget/ModelCursorAdapter.java b/src/com/activeandroid/widget/ModelCursorAdapter.java
new file mode 100644
index 00000000..6a76996a
--- /dev/null
+++ b/src/com/activeandroid/widget/ModelCursorAdapter.java
@@ -0,0 +1,48 @@
+package com.activeandroid.widget;
+
+import android.content.Context;
+import android.database.Cursor;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.CursorAdapter;
+
+import com.activeandroid.Cache;
+import com.activeandroid.Model;
+
+import java.util.List;
+
+import static com.activeandroid.util.SQLiteUtils.processCursor;
+
+/**
+ * Created by radzell on 12/4/14.
+ */
+public class ModelCursorAdapter<T extends Model>  extends CursorAdapter {
+    private T t;
+
+    public ModelCursorAdapter(Context context, Cursor c, int flags) {
+        super(context, c, flags);
+    }
+
+    @Override
+    public T getItem(int position) {
+        Cursor cursor = (Cursor) super.getItem(position);
+        List<T> entities = processCursor(t.getClass(), cursor);
+        if(entities.size()>0) {
+            return entities.get(0);
+        }else{
+            return null;
+        }
+    }
+
+    @Override
+    public View newView(Context context, Cursor cursor, ViewGroup viewGroup) {
+        return null;
+    }
+
+    @Override
+    public void bindView(View view, Context context, Cursor cursor) {
+
+    }
+
+
+}
