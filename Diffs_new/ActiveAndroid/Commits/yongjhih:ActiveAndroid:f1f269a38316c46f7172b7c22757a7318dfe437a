diff --git a/src/com/activeandroid/ActiveAndroid.java b/src/com/activeandroid/ActiveAndroid.java
index c58c8efd..41692871 100644
--- a/src/com/activeandroid/ActiveAndroid.java
+++ b/src/com/activeandroid/ActiveAndroid.java
@@ -22,6 +22,9 @@
 import com.activeandroid.util.Log;
 
 public final class ActiveAndroid {
+
+	private static boolean sInContentProvider = false;
+
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC METHODS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -83,4 +86,16 @@ public static void execSQL(String sql) {
 	public static void execSQL(String sql, Object[] bindArgs) {
 		Cache.openDatabase().execSQL(sql, bindArgs);
 	}
+
+	public static void beginContentProvider() {
+		sInContentProvider = true;
+	}
+
+	public static void endContentProvider() {
+		sInContentProvider = false;
+	}
+
+	public static boolean inContentProvider() {
+		return sInContentProvider;
+	}
 }
diff --git a/src/com/activeandroid/Model.java b/src/com/activeandroid/Model.java
index 411ed7bd..2b4ec36d 100644
--- a/src/com/activeandroid/Model.java
+++ b/src/com/activeandroid/Model.java
@@ -28,6 +28,7 @@
 import com.activeandroid.util.Log;
 import com.activeandroid.util.ReflectionUtils;
 
+import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
 import java.util.List;
 
@@ -147,10 +148,12 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 		}
 
 		if (mId == null) {
-			mId = db.insert(mTableInfo.getTableName(), null, values);
+			if (!ActiveAndroid.inContentProvider()) mId = db.insert(mTableInfo.getTableName(), null, values);
+			else mId = android.content.ContentUris.parseId(Cache.getContext().getContentResolver().insert(ContentProvider.createUri(mTableInfo.getType(), null), values));
 		}
 		else {
-			db.update(mTableInfo.getTableName(), values, "Id=" + mId, null);
+			if (!ActiveAndroid.inContentProvider()) db.update(mTableInfo.getTableName(), values, "Id=" + mId, null);
+			else Cache.getContext().getContentResolver().update(ContentProvider.createUri(mTableInfo.getType(), null), values, "Id=" + mId, null);
 		}
 
 		Cache.getContext().getContentResolver()
@@ -163,10 +166,39 @@ public static void delete(Class<? extends Model> type, long id) {
 		new Delete().from(type).where("Id=?", id).execute();
 	}
 
-	public static <T extends Model> T load(Class<T> type, long id) {
+	public static <T extends Model> T loadByActiveAndroid(Class<T> type, long id) {
 		return new Select().from(type).where("Id=?", id).executeSingle();
 	}
 
+	public static <T extends Model> T loadByContentProvider(Class<T> type, long id) {
+		String[] projection = {};
+		for (Field field : Cache.getTableInfo(type).getFields()) {
+			final String fieldName = Cache.getTableInfo(type).getColumnName(field);
+			java.util.Arrays.fill(projection, fieldName);
+		}
+		Cursor c = Cache.getContext().getContentResolver().query(ContentProvider.createUri(type, null), projection, "Id=" + id, null, null);
+		Model entity = null;
+
+		try {
+			Constructor<?> entityConstructor = type.getConstructor();
+
+			if (c != null && c.moveToFirst()) {
+				entity = (T) entityConstructor.newInstance();
+				entity.loadFromCursor(c);
+			}
+		}
+		catch (Exception e) {
+			Log.e("Failed to process cursor.", e);
+		}
+
+		return (T) entity;
+	}
+
+	public static <T extends Model> T load(Class<T> type, long id) {
+		if (ActiveAndroid.inContentProvider()) return loadByContentProvider(type, id);
+		else return loadByActiveAndroid(type, id);
+	}
+
 	// Model population
 
 	public final void loadFromCursor(Cursor cursor) {
