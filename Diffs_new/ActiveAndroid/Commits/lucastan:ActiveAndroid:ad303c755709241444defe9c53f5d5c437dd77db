diff --git a/src/com/activeandroid/TableInfo.java b/src/com/activeandroid/TableInfo.java
index 1e6e9d26..45e8c318 100644
--- a/src/com/activeandroid/TableInfo.java
+++ b/src/com/activeandroid/TableInfo.java
@@ -16,14 +16,7 @@
  * limitations under the License.
  */
 
-import java.lang.reflect.Field;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.LinkedHashMap;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-
+import android.support.v4.util.SimpleArrayMap;
 import android.text.TextUtils;
 import android.util.Log;
 
@@ -31,16 +24,20 @@
 import com.activeandroid.annotation.Table;
 import com.activeandroid.util.ReflectionUtils;
 
+import java.lang.reflect.Field;
+import java.util.Collection;
+import java.util.List;
+
 public final class TableInfo {
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PRIVATE MEMBERS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	private Class<? extends Model> mType;
-	private String mTableName;
-	private String mIdName = Table.DEFAULT_ID_NAME;
-
-	private Map<Field, String> mColumnNames = new LinkedHashMap<Field, String>();
+	private final Class<? extends Model> mType;
+	private final String mTableName;
+	private final String mIdName;
+    private final List<Field> mFields;
+	private final SimpleArrayMap<Field, String> mColumnNames = new SimpleArrayMap<Field, String>();
 
 	//////////////////////////////////////////////////////////////////////////////////////
 	// CONSTRUCTORS
@@ -57,27 +54,25 @@ public TableInfo(Class<? extends Model> type) {
 		}
 		else {
 			mTableName = type.getSimpleName();
+            mIdName = Table.DEFAULT_ID_NAME;
         }
 
         // Manually add the id column since it is not declared like the other columns.
         Field idField = getIdField(type);
         mColumnNames.put(idField, mIdName);
 
-        List<Field> fields = new LinkedList<Field>(ReflectionUtils.getDeclaredColumnFields(type));
-        Collections.reverse(fields);
+        List<Field> fields = ReflectionUtils.getDeclaredColumnFields(type);
+        mFields = fields;
 
         for (Field field : fields) {
-            if (field.isAnnotationPresent(Column.class)) {
-                final Column columnAnnotation = field.getAnnotation(Column.class);
-                String columnName = columnAnnotation.name();
-                if (TextUtils.isEmpty(columnName)) {
-                    columnName = field.getName();
-                }
-                field.setAccessible(true);
-                mColumnNames.put(field, columnName);
+            final Column columnAnnotation = field.getAnnotation(Column.class);
+            String columnName = columnAnnotation.name();
+            if (TextUtils.isEmpty(columnName)) {
+                columnName = field.getName();
             }
+            field.setAccessible(true);
+            mColumnNames.put(field, columnName);
         }
-
 	}
 
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -97,7 +92,7 @@ public String getIdName() {
 	}
 
 	public Collection<Field> getFields() {
-		return mColumnNames.keySet();
+		return mFields;
 	}
 
 	public String getColumnName(Field field) {
@@ -106,7 +101,7 @@ public String getColumnName(Field field) {
 
 
     private Field getIdField(Class<?> type) {
-        if (type.equals(Model.class)) {
+        if (Model.class.isAssignableFrom(type)){
             try {
                 return type.getDeclaredField("mId");
             }
@@ -114,9 +109,6 @@ private Field getIdField(Class<?> type) {
                 Log.e("Impossible!", e.toString());
             }
         }
-        else if (type.getSuperclass() != null) {
-            return getIdField(type.getSuperclass());
-        }
 
         return null;
     }
