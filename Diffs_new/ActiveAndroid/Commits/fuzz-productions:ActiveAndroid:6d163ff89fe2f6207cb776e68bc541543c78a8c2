diff --git a/src/main/java/com/activeandroid/ActiveAndroid.java b/src/main/java/com/activeandroid/ActiveAndroid.java
index 7e01113c..f756a983 100644
--- a/src/main/java/com/activeandroid/ActiveAndroid.java
+++ b/src/main/java/com/activeandroid/ActiveAndroid.java
@@ -61,15 +61,15 @@ public static SQLiteDatabase getDatabase() {
 	}
 
 	public static void beginTransaction() {
-		Cache.openDatabase().beginTransaction();
+        Cache.openDatabase().beginTransaction();
 	}
 
 	public static void endTransaction() {
-		Cache.openDatabase().endTransaction();
+        Cache.openDatabase().endTransaction();
 	}
 
 	public static void setTransactionSuccessful() {
-		Cache.openDatabase().setTransactionSuccessful();
+        Cache.openDatabase().setTransactionSuccessful();
 	}
 
 	public static boolean inTransaction() {
diff --git a/src/main/java/com/activeandroid/Model.java b/src/main/java/com/activeandroid/Model.java
index d6d479db..687b67b9 100644
--- a/src/main/java/com/activeandroid/Model.java
+++ b/src/main/java/com/activeandroid/Model.java
@@ -64,7 +64,7 @@ public Model() {
 
 	public final void delete() {
 		Cache.openDatabase().delete(mTableInfo.getTableName(), SQLiteUtils.getWhereStatement(this, mTableInfo), null);
-		Cache.removeEntity(this);
+        Cache.removeEntity(this);
 
 		Cache.getContext().getContentResolver()
 				.notifyChange(ContentProvider.createUri(mTableInfo.getType(), getId()), null);
@@ -155,6 +155,7 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 		}
 
         if(!exists()){
+            AALog.v("ActiveAndroid","INSERT " + mTableInfo.getTableName() + values);
 		     mId = db.insert(mTableInfo.getTableName(), null, values);
 
             for(Field field : mTableInfo.getPrimaryKeys()){
@@ -169,6 +170,7 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
                 }
             }
         } else {
+            AALog.v("ActiveAndroid","UPDATE " + mTableInfo.getTableName() + values);
 			mId = db.update(mTableInfo.getTableName(), values, SQLiteUtils.getWhereStatement(this, mTableInfo), null);
 		}
 
diff --git a/src/main/java/com/activeandroid/manager/DBManager.java b/src/main/java/com/activeandroid/manager/DBManager.java
index 39fb8e17..858657c6 100644
--- a/src/main/java/com/activeandroid/manager/DBManager.java
+++ b/src/main/java/com/activeandroid/manager/DBManager.java
@@ -58,7 +58,7 @@ public static DBManager getSharedInstance() {
      *
      * @param object
      */
-    public OBJECT_CLASS add(Object object) {
+    protected OBJECT_CLASS add(Object object) {
         return add(mObjectClass, object);
     }
 
diff --git a/src/main/java/com/activeandroid/manager/SingleDBManager.java b/src/main/java/com/activeandroid/manager/SingleDBManager.java
index c35aa9f4..95696ebb 100644
--- a/src/main/java/com/activeandroid/manager/SingleDBManager.java
+++ b/src/main/java/com/activeandroid/manager/SingleDBManager.java
@@ -37,6 +37,7 @@
     private static SingleDBManager manager;
 
     private DBRequestQueue mQueue;
+    private static DBRequestQueue mWriteQueue;
 
     private String mName;
 
@@ -98,6 +99,13 @@ public DBRequestQueue getQueue() {
         return mQueue;
     }
 
+    public synchronized static DBRequestQueue getWriteQueue() {
+        if (mWriteQueue == null) {
+            mWriteQueue = new DBRequestQueue("Universal Write Queue",1);
+        }
+        return mWriteQueue;
+    }
+
     public DBBatchSaveQueue getSaveQueue() {
         return DBBatchSaveQueue.getSharedSaveQueue();
     }
@@ -143,7 +151,7 @@ protected synchronized void processOnForeground(Runnable runnable) {
      *
      * @param inObject - object of the class defined by the manager
      */
-    public <OBJECT_CLASS extends IModel> OBJECT_CLASS add(OBJECT_CLASS inObject) {
+    protected <OBJECT_CLASS extends IModel> OBJECT_CLASS add(OBJECT_CLASS inObject) {
         inObject.save();
         return inObject;
     }
@@ -153,7 +161,7 @@ protected synchronized void processOnForeground(Runnable runnable) {
      *
      * @param object
      */
-    public <OBJECT_CLASS extends IModel> OBJECT_CLASS add(Class<OBJECT_CLASS> obClazz, Object object) {
+    protected <OBJECT_CLASS extends IModel> OBJECT_CLASS add(Class<OBJECT_CLASS> obClazz, Object object) {
         try {
             return add(getObject(obClazz, object));
         } catch (Throwable e) {
diff --git a/src/main/java/com/activeandroid/runtime/DBBatchSaveQueue.java b/src/main/java/com/activeandroid/runtime/DBBatchSaveQueue.java
index 1fb2d5ba..9af996ba 100644
--- a/src/main/java/com/activeandroid/runtime/DBBatchSaveQueue.java
+++ b/src/main/java/com/activeandroid/runtime/DBBatchSaveQueue.java
@@ -23,9 +23,9 @@
     /**
      *  Once the queue size reaches 50 or larger, the thread will be interrupted and we will batch save the models.
      */
-    private static final int sMODEL_SAVE_SIZE = 50;
+    private static final int sMODEL_SAVE_SIZE = 15;
 
-    private boolean mQuit = false;
+    private volatile boolean mQuit = false;
 
     public static DBBatchSaveQueue getSharedSaveQueue(){
         if(mBatchSaveQueue==null){
@@ -50,7 +50,7 @@ public DBBatchSaveQueue(){
     public void run() {
         super.run();
         Looper.prepare();
-        android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_BACKGROUND);
+        android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_LOWEST);
         while (true){
             final ArrayList<IModel> tmpModels;
             synchronized (mModels){
@@ -59,7 +59,7 @@ public void run() {
             }
             if(tmpModels.size()>0) {
                 //run this on the DBManager thread
-                SingleDBManager.getSharedInstance().getQueue().add(new DBRequest(DBRequestInfo.create("Batch Saving")) {
+                SingleDBManager.getWriteQueue().add(new DBRequest(DBRequestInfo.create("Batch Saving")) {
                     @Override
                     public void run() {
                         long time = System.currentTimeMillis();
diff --git a/src/main/java/com/activeandroid/runtime/DBRequest.java b/src/main/java/com/activeandroid/runtime/DBRequest.java
index c542c302..be31e45a 100644
--- a/src/main/java/com/activeandroid/runtime/DBRequest.java
+++ b/src/main/java/com/activeandroid/runtime/DBRequest.java
@@ -1,7 +1,5 @@
 package com.activeandroid.runtime;
 
-import java.util.UUID;
-
 /**
  * Created by andrewgrosner
  * Date: 12/11/13
@@ -16,7 +14,7 @@
  *  For the bulk of data requests, use PRIORITY_NORMAL
  *  For any request that's non-essential use PRIORITY_LOW
  */
-public abstract class DBRequest implements Comparable<DBRequest> {
+public abstract class DBRequest implements Comparable<DBRequest>, Runnable {
 
     /**
      * Low priority requests, reserved for non-essential tasks
@@ -40,9 +38,7 @@
      */
     public static int PRIORITY_UI = 5;
 
-    public abstract void run();
-
-    private DBRequestInfo mInfo;
+    protected DBRequestInfo mInfo;
 
     /**
      * Constructs this class using the specified DBRequest info
@@ -61,10 +57,15 @@ public DBRequest(){
 
     @Override
     public int compareTo(DBRequest another) {
-        return another.mInfo.getPriority() - mInfo.getPriority();
+        return (int) ( mInfo.getStartTime() - another.mInfo.getStartTime());
     }
 
     public String getName() {
         return mInfo.getName();
     }
+
+    public DBRequestInfo getInfo() {
+        return mInfo;
+    }
+
 }
diff --git a/src/main/java/com/activeandroid/runtime/DBRequestInfo.java b/src/main/java/com/activeandroid/runtime/DBRequestInfo.java
index b76f54fd..76374646 100644
--- a/src/main/java/com/activeandroid/runtime/DBRequestInfo.java
+++ b/src/main/java/com/activeandroid/runtime/DBRequestInfo.java
@@ -1,5 +1,6 @@
 package com.activeandroid.runtime;
 
+import java.util.Date;
 import java.util.UUID;
 
 /**
@@ -12,6 +13,8 @@
 
     private String name;
 
+    private long startTime;
+
     private int priority;
 
     private DBRequestInfo(){
@@ -27,6 +30,7 @@ public static DBRequestInfo create(String name, int priority){
         DBRequestInfo requestInfo = new DBRequestInfo();
         requestInfo.name = name;
         requestInfo.priority = priority;
+        requestInfo.startTime = new Date().getTime();
         return requestInfo;
     }
 
@@ -38,7 +42,8 @@ public static DBRequestInfo create(String name, int priority){
     public static DBRequestInfo create(String name){
         DBRequestInfo requestInfo = new DBRequestInfo();
         requestInfo.name = name;
-        requestInfo.priority = DBRequest.PRIORITY_NORMAL;
+        requestInfo.priority = DBRequest.PRIORITY_LOW;
+        requestInfo.startTime = new Date().getTime();
         return requestInfo;
     }
 
@@ -51,6 +56,7 @@ public static DBRequestInfo create(int priority){
         DBRequestInfo requestInfo = new DBRequestInfo();
         requestInfo.name = UUID.randomUUID().toString();
         requestInfo.priority = priority;
+        requestInfo.startTime = new Date().getTime();
         return requestInfo;
     }
 
@@ -63,6 +69,7 @@ public static DBRequestInfo create(){
         DBRequestInfo requestInfo = new DBRequestInfo();
         requestInfo.name = UUID.randomUUID().toString();
         requestInfo.priority = DBRequest.PRIORITY_LOW;
+        requestInfo.startTime = new Date().getTime();
         return requestInfo;
     }
 
@@ -74,6 +81,7 @@ public static DBRequestInfo createFetch(){
         DBRequestInfo requestInfo = new DBRequestInfo();
         requestInfo.priority = DBRequest.PRIORITY_UI;
         requestInfo.name = "fetch " + UUID.randomUUID().toString();
+        requestInfo.startTime = new Date().getTime();
         return requestInfo;
     }
 
@@ -86,4 +94,8 @@ public String getName() {
     public int getPriority() {
         return priority;
     }
+
+    public long getStartTime() {
+        return startTime;
+    }
 }
diff --git a/src/main/java/com/activeandroid/runtime/DBRequestQueue.java b/src/main/java/com/activeandroid/runtime/DBRequestQueue.java
index e3295ac1..154c7e78 100644
--- a/src/main/java/com/activeandroid/runtime/DBRequestQueue.java
+++ b/src/main/java/com/activeandroid/runtime/DBRequestQueue.java
@@ -1,12 +1,15 @@
 package com.activeandroid.runtime;
 
-import android.os.Looper;
-import android.os.Process;
+import android.util.Log;
 
-import com.activeandroid.util.AALog;
+import com.activeandroid.manager.SingleDBManager;
 
-import java.util.Iterator;
 import java.util.concurrent.PriorityBlockingQueue;
+import java.util.concurrent.Semaphore;
+import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicInteger;
 
 /**
  * Created by andrewgrosner
@@ -14,90 +17,288 @@
  * Contributors:
  * Description: will handle concurrent requests to the DB based on priority
  */
-public class DBRequestQueue extends Thread{
+public class DBRequestQueue {
 
     /**
      * Queue of requests
      */
-    private final PriorityBlockingQueue<DBRequest> mQueue;
+//    private final PriorityBlockingQueue<DBRequest> mQueue;
+    private ThreadPoolExecutor priorityExecutor;
+    private static final Semaphore latch = new Semaphore(4);
+
+    private ThreadPoolExecutor getExecutor(final int nThreads) {
+        return new ThreadPoolExecutor(nThreads, nThreads,
+                0L, TimeUnit.MILLISECONDS,
+                new PriorityBlockingQueue<Runnable>(), new BaseThreadFactory(nThreads));
+    }
+
+    private class BaseThreadFactory implements ThreadFactory {
+        private final ThreadGroup group;
+        private final AtomicInteger threadNumber = new AtomicInteger(1);
+        private final String namePrefix;
+
+        BaseThreadFactory(int nThreads) {
+            SecurityManager s = System.getSecurityManager();
+            group = (s != null) ? s.getThreadGroup() :
+                    Thread.currentThread().getThreadGroup();
+            if (nThreads == 1) {
+                namePrefix = "WRITEQUEUE";
+            } else {
+                namePrefix = "READQUEUE";
+            }
+        }
+
+        public Thread newThread(Runnable r) {
+            Thread t;
+            if (namePrefix.equals("WRITEQUEUE")) {
+                t = new Thread(group, r,
+                        namePrefix + threadNumber.getAndIncrement(),
+                        0);
+            } else {
+                t = new Thread(group, r,
+                        namePrefix + threadNumber.getAndIncrement(),
+                        0);
+            }
+
+            if (t.isDaemon())
+                t.setDaemon(false);
+//            if (t.getPriority() != Thread.NORM_PRIORITY)
+//                t.setPriority(Thread.NORM_PRIORITY);
+            return t;
+        }
+    }
+
+    static final String TAG = "DBREQUESTQUEUE";
+
+    private class WriteThread implements Runnable, Comparable<WriteThread> {
+
+        DBRequest _task;
+
+        private WriteThread(DBRequest task) {
+            _task = task;
+        }
+
+        @Override
+        public void run() {
+            Thread.currentThread().setPriority(Thread.MIN_PRIORITY);
+            long start = System.currentTimeMillis();
+            Log.v(TAG, "Write Start Time " + start);
+
+            try {
+                latch.acquire(4);
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
+
+            Log.v(TAG, "Write Wait Time " + (System.currentTimeMillis() - start));
+            Log.v(TAG, "WRITING");
+            Log.v(TAG, "QUEUE SIZE " + DBRequestQueue.this.priorityExecutor.getQueue().size());
+            _task.run();
+            Log.v(TAG, "Write Finish Time " + (System.currentTimeMillis() - start));
+            latch.release(4);
+        }
+
+        public DBRequest get_task() {
+            return _task;
+        }
+
+
+        @Override
+        public int compareTo(WriteThread o1) {
+            return _task.compareTo(o1.get_task());
+        }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) return true;
+            if (o == null || getClass() != o.getClass()) return false;
+
+            WriteThread that = (WriteThread) o;
+
+            if (_task != null ? !_task.equals(that._task) : that._task != null) return false;
+
+            return true;
+        }
+
+        @Override
+        public int hashCode() {
+            return _task != null ? _task.hashCode() : 0;
+        }
+    }
+
+    private class ReadThread implements Runnable, Comparable<ReadThread> {
+
+        DBRequest _task;
+
+        private ReadThread(DBRequest task) {
+            _task = task;
+        }
+
+        @Override
+        public void run() {
+            Thread.currentThread().setPriority(Thread.MAX_PRIORITY);
+            try {
+                latch.acquire(1);
+            } catch (Throwable t) {
+
+            }
+
+            long start = System.currentTimeMillis();
+            Log.v(TAG, "Read Start Time " + start);
+            Log.v(TAG, "READING");
+            Log.v(TAG, "QUEUE SIZE " + DBRequestQueue.this.priorityExecutor.getQueue().size());
+            Log.v(TAG, "QUEUE COUNT " + DBRequestQueue.this.priorityExecutor.getTaskCount());
+            _task.run();
+            Log.v(TAG, "Read Finish Time " + (System.currentTimeMillis() - start));
+            latch.release(1);
+        }
+
+
+        public DBRequest get_task() {
+            return _task;
+        }
+
+
+        @Override
+        public int compareTo(ReadThread o1) {
+            return _task.compareTo(o1.get_task());
+        }
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) return true;
+            if (o == null || getClass() != o.getClass()) return false;
+
+            ReadThread that = (ReadThread) o;
+
+            if (_task != null ? !_task.equals(that._task) : that._task != null) return false;
+
+            return true;
+        }
+
+        @Override
+        public int hashCode() {
+            return _task != null ? _task.hashCode() : 0;
+        }
+
+    }
 
     private boolean mQuit = false;
 
     /**
      * Creates a queue with the specified name to ID it.
+     *
      * @param name
      */
     public DBRequestQueue(String name) {
-        super(name);
+        this(name, Runtime.getRuntime().availableProcessors());
+//        mQueue = new PriorityBlockingQueue<DBRequest>();
+    }
 
-        mQueue = new PriorityBlockingQueue<DBRequest>();
+    public DBRequestQueue(String name, int threadCount) {
+        super();
+        priorityExecutor = getExecutor(threadCount);
+//        mQueue = new PriorityBlockingQueue<DBRequest>();
     }
 
-    @Override
-    public void run() {
-        Looper.prepare();
-        android.os.Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
-        DBRequest runnable;
-        while (true){
-            try{
-                runnable = mQueue.take();
-            } catch (InterruptedException e){
-                if(mQuit){
-                    synchronized (mQueue) {
-                        mQueue.clear();
-                    }
-                    return;
-                }
-                continue;
-            }
+//    @Override
+//    public void run() {
+//        Looper.prepare();
+//        android.os.Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
+//        DBRequest runnable;
+//        while (true){
+//            try{
+//                runnable = mQueue.take();
+//            } catch (InterruptedException e){
+//                if(mQuit){
+//                    synchronized (mQueue) {
+//                        mQueue.clear();
+//                    }
+//                    return;
+//                }
+//                continue;
+//            }
+//
+//            try{
+//                AALog.d("DBRequestQueue + " + getName(), "Size is: " + mQueue.size() + " executing:" + runnable.getName());
+//                runnable.run();
+//            } catch (Throwable t){
+//                throw new RuntimeException(t);
+//            }
+//        }
+//
+//    }
 
-            try{
-                AALog.d("DBRequestQueue + " + getName(), "Size is: " + mQueue.size() + " executing:" + runnable.getName());
-                runnable.run();
-            } catch (Throwable t){
-                throw new RuntimeException(t);
-            }
+    public void add(DBRequest runnable) {
+//        if (!mQueue.contains(runnable)) {
+//            mQueue.add(runnable);
+//        }
+        if (this == SingleDBManager.getWriteQueue()) {
+            priorityExecutor.execute(new WriteThread(runnable));
+        } else {
+            priorityExecutor.execute(new ReadThread(runnable));
         }
 
-    }
-
-    public void add(DBRequest runnable){
-        if (!mQueue.contains(runnable)) {
-            mQueue.add(runnable);
-        }
+//        try {
+//            synchronized (waitObject) {
+//                waitObject.notify();
+//            }
+//        }catch (Throwable t) {
+//
+//        }
     }
 
     /**
      * Cancels the specified request.
+     *
      * @param runnable
      */
-    public void cancel(DBRequest runnable){
-        if (mQueue.contains(runnable)) {
-            mQueue.remove(runnable);
+    public void cancel(DBRequest runnable) {
+        if (this == SingleDBManager.getWriteQueue()) {
+            priorityExecutor.remove(new WriteThread(runnable));
+        } else {
+            priorityExecutor.remove(new ReadThread(runnable));
         }
+//        if (mQueue.contains(runnable)) {
+//            mQueue.remove(runnable);
+//        }
     }
 
     /**
      * Cancels all requests by a specific tag
+     *
      * @param tag
      */
-    public void cancel(String tag){
-        synchronized (mQueue){
-            Iterator<DBRequest> it = mQueue.iterator();
-            while(it.hasNext()){
-                DBRequest next = it.next();
-                if(next.getName().equals(tag)){
-                    it.remove();
-                }
-            }
-        }
+    public void cancel(String tag) {
+//        synchronized (mQueue){
+//            Iterator<DBRequest> it = mQueue.iterator();
+//            while(it.hasNext()){
+//                DBRequest next = it.next();
+//                if(next.getName().equals(tag)){
+//                    it.remove();
+//                }
+//            }
+//        }
     }
 
     /**
      * Quits this process
      */
-    public void quit(){
+    public void quit() {
         mQuit = true;
-        interrupt();
+//        interrupt();
+    }
+
+    public boolean isAlive() {
+        return true;
+    }
+
+    public void start() {
+
+    }
+
+    public synchronized boolean hasRequest() {
+        Log.v(TAG, "ReadQueue Size " + priorityExecutor.getQueue().size());
+        return priorityExecutor.getQueue().size() > 0;
     }
 }
