diff --git a/src/main/java/com/activeandroid/ActiveAndroid.java b/src/main/java/com/activeandroid/ActiveAndroid.java
index c58c8efd..7e01113c 100644
--- a/src/main/java/com/activeandroid/ActiveAndroid.java
+++ b/src/main/java/com/activeandroid/ActiveAndroid.java
@@ -19,7 +19,7 @@
 import android.content.Context;
 import android.database.sqlite.SQLiteDatabase;
 
-import com.activeandroid.util.Log;
+import com.activeandroid.util.AALog;
 
 public final class ActiveAndroid {
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -53,7 +53,7 @@ public static void dispose() {
 	}
 
 	public static void setLoggingEnabled(boolean enabled) {
-		Log.setEnabled(enabled);
+		AALog.setEnabled(enabled);
 	}
 
 	public static SQLiteDatabase getDatabase() {
diff --git a/src/main/java/com/activeandroid/Cache.java b/src/main/java/com/activeandroid/Cache.java
index 76ab218c..e6d8b5c6 100644
--- a/src/main/java/com/activeandroid/Cache.java
+++ b/src/main/java/com/activeandroid/Cache.java
@@ -23,8 +23,7 @@
 import android.support.v4.util.LruCache;
 
 import com.activeandroid.serializer.TypeSerializer;
-import com.activeandroid.util.Log;
-import com.activeandroid.util.SQLiteUtils;
+import com.activeandroid.util.AALog;
 
 public final class Cache {
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -59,7 +58,7 @@ private Cache() {
 
 	public static synchronized void initialize(Configuration configuration) {
 		if (sIsInitialized) {
-			Log.v("ActiveAndroid already initialized.");
+			AALog.v("ActiveAndroid already initialized.");
 			return;
 		}
 
@@ -77,12 +76,12 @@ public static synchronized void initialize(Configuration configuration) {
 
 		sIsInitialized = true;
 
-		Log.v("ActiveAndroid initialized successfully.");
+		AALog.v("ActiveAndroid initialized successfully.");
 	}
 
 	public static synchronized void clear() {
 		sEntities.evictAll();
-		Log.v("Cache cleared.");
+		AALog.v("Cache cleared.");
 	}
 
 	public static synchronized void dispose() {
@@ -94,7 +93,7 @@ public static synchronized void dispose() {
 
 		sIsInitialized = false;
 
-		Log.v("ActiveAndroid disposed. Call initialize to use library.");
+		AALog.v("ActiveAndroid disposed. Call initialize to use library.");
 	}
 
 	// Database access
diff --git a/src/main/java/com/activeandroid/Configuration.java b/src/main/java/com/activeandroid/Configuration.java
index f5fc92f7..4f1ad20a 100644
--- a/src/main/java/com/activeandroid/Configuration.java
+++ b/src/main/java/com/activeandroid/Configuration.java
@@ -23,7 +23,7 @@
 import android.content.Context;
 
 import com.activeandroid.serializer.TypeSerializer;
-import com.activeandroid.util.Log;
+import com.activeandroid.util.AALog;
 import com.activeandroid.util.ReflectionUtils;
 
 public class Configuration {
@@ -263,7 +263,7 @@ private int getMetaDataDatabaseVersionOrDefault() {
 					}
 				}
 				catch (ClassNotFoundException e) {
-					Log.e("Couldn't create class.", e);
+					AALog.e("Couldn't create class.", e);
 				}
 			}
 
@@ -283,7 +283,7 @@ private int getMetaDataDatabaseVersionOrDefault() {
 					}
 				}
 				catch (ClassNotFoundException e) {
-					Log.e("Couldn't create class.", e);
+					AALog.e("Couldn't create class.", e);
 				}
 			}
 
diff --git a/src/main/java/com/activeandroid/DatabaseHelper.java b/src/main/java/com/activeandroid/DatabaseHelper.java
index dd49379b..af1102c4 100644
--- a/src/main/java/com/activeandroid/DatabaseHelper.java
+++ b/src/main/java/com/activeandroid/DatabaseHelper.java
@@ -31,7 +31,7 @@
 import android.database.sqlite.SQLiteDatabase;
 import android.database.sqlite.SQLiteOpenHelper;
 
-import com.activeandroid.util.Log;
+import com.activeandroid.util.AALog;
 import com.activeandroid.util.NaturalOrderComparator;
 import com.activeandroid.util.SQLiteUtils;
 
@@ -106,7 +106,7 @@ public void copyAttachedDatabase(Context context, String databaseName) {
 			inputStream.close();
 		}
 		catch (IOException e) {
-			Log.e("Failed to open file", e);
+			AALog.e("Failed to open file", e);
 		}
 	}
 
@@ -117,7 +117,7 @@ public void copyAttachedDatabase(Context context, String databaseName) {
 	private void executePragmas(SQLiteDatabase db) {
 		if (SQLiteUtils.FOREIGN_KEYS_SUPPORTED) {
 			db.execSQL("PRAGMA foreign_keys=ON;");
-			Log.i("Foreign Keys supported. Enabling foreign key features.");
+			AALog.i("Foreign Keys supported. Enabling foreign key features.");
 		}
 	}
 
@@ -150,11 +150,11 @@ private boolean executeMigrations(SQLiteDatabase db, int oldVersion, int newVers
 							executeSqlScript(db, file);
 							migrationExecuted = true;
 
-							Log.i(file + " executed succesfully.");
+							AALog.i(file + " executed succesfully.");
 						}
 					}
 					catch (NumberFormatException e) {
-						Log.w("Skipping invalidly named file: " + file, e);
+						AALog.w("Skipping invalidly named file: " + file, e);
 					}
 				}
 				db.setTransactionSuccessful();
@@ -164,7 +164,7 @@ private boolean executeMigrations(SQLiteDatabase db, int oldVersion, int newVers
 			}
 		}
 		catch (IOException e) {
-			Log.e("Failed to execute migrations.", e);
+			AALog.e("Failed to execute migrations.", e);
 		}
 
 		return migrationExecuted;
@@ -181,7 +181,7 @@ private void executeSqlScript(SQLiteDatabase db, String file) {
 			}
 		}
 		catch (IOException e) {
-			Log.e("Failed to execute " + file, e);
+			AALog.e("Failed to execute " + file, e);
 		}
 	}
 }
diff --git a/src/main/java/com/activeandroid/Model.java b/src/main/java/com/activeandroid/Model.java
index d7ba37bc..2f6663e9 100644
--- a/src/main/java/com/activeandroid/Model.java
+++ b/src/main/java/com/activeandroid/Model.java
@@ -26,7 +26,7 @@
 import com.activeandroid.query.Delete;
 import com.activeandroid.query.Select;
 import com.activeandroid.serializer.TypeSerializer;
-import com.activeandroid.util.Log;
+import com.activeandroid.util.AALog;
 import com.activeandroid.util.ReflectionUtils;
 import com.activeandroid.util.SQLiteUtils;
 
@@ -93,8 +93,8 @@ public final void save() {
 							fieldType = value.getClass();
 							// check that the serializer returned what it promised
 							if (!fieldType.equals(typeSerializer.getSerializedType())) {
-								Log.w(String.format("TypeSerializer returned wrong type: expected a %s but got a %s",
-										typeSerializer.getSerializedType(), fieldType));
+								AALog.w(String.format("TypeSerializer returned wrong type: expected a %s but got a %s",
+                                        typeSerializer.getSerializedType(), fieldType));
 							}
 						}
 					}
@@ -147,10 +147,10 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 				}
 			}
 			catch (IllegalArgumentException e) {
-				Log.e(e.getClass().getName(), e);
+				AALog.e(e.getClass().getName(), e);
 			}
 			catch (IllegalAccessException e) {
-				Log.e(e.getClass().getName(), e);
+				AALog.e(e.getClass().getName(), e);
 			}
 		}
 
@@ -291,13 +291,13 @@ else if (ReflectionUtils.isSubclassOf(fieldType, Enum.class)) {
 				}
 			}
 			catch (IllegalArgumentException e) {
-				Log.e(e.getClass().getName(), e);
+				AALog.e(e.getClass().getName(), e);
 			}
 			catch (IllegalAccessException e) {
-				Log.e(e.getClass().getName(), e);
+				AALog.e(e.getClass().getName(), e);
 			}
 			catch (SecurityException e) {
-				Log.e(e.getClass().getName(), e);
+				AALog.e(e.getClass().getName(), e);
 			}
 		}
 
diff --git a/src/main/java/com/activeandroid/ModelInfo.java b/src/main/java/com/activeandroid/ModelInfo.java
index e16dd332..67cf4d4c 100644
--- a/src/main/java/com/activeandroid/ModelInfo.java
+++ b/src/main/java/com/activeandroid/ModelInfo.java
@@ -34,7 +34,7 @@
 import com.activeandroid.serializer.SqlDateSerializer;
 import com.activeandroid.serializer.TypeSerializer;
 import com.activeandroid.serializer.UtilDateSerializer;
-import com.activeandroid.util.Log;
+import com.activeandroid.util.AALog;
 import com.activeandroid.util.ReflectionUtils;
 import dalvik.system.DexFile;
 
@@ -62,11 +62,11 @@ public ModelInfo(Configuration configuration) {
 				scanForModel(configuration.getContext());
 			}
 			catch (IOException e) {
-				Log.e("Couldn't open source path.", e);
+				AALog.e("Couldn't open source path.", e);
 			}
 		}
 
-		Log.i("ModelInfo loaded.");
+		AALog.i("ModelInfo loaded.");
 	}
 
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -109,10 +109,10 @@ private boolean loadModelFromMetaData(Configuration configuration) {
 					mTypeSerializers.put(instance.getDeserializedType(), instance);
 				}
 				catch (InstantiationException e) {
-					Log.e("Couldn't instantiate TypeSerializer.", e);
+					AALog.e("Couldn't instantiate TypeSerializer.", e);
 				}
 				catch (IllegalAccessException e) {
-					Log.e("IllegalAccessException", e);
+					AALog.e("IllegalAccessException", e);
 				}
 			}
 		}
@@ -195,13 +195,13 @@ else if (ReflectionUtils.isTypeSerializer(discoveredClass) && !discoveredClass.i
 				}
 			}
 			catch (ClassNotFoundException e) {
-				Log.e("Couldn't create class.", e);
+				AALog.e("Couldn't create class.", e);
 			}
 			catch (InstantiationException e) {
-				Log.e("Couldn't instantiate TypeSerializer.", e);
+				AALog.e("Couldn't instantiate TypeSerializer.", e);
 			}
 			catch (IllegalAccessException e) {
-				Log.e("IllegalAccessException", e);
+				AALog.e("IllegalAccessException", e);
 			}
 		}
 	}
diff --git a/src/main/java/com/activeandroid/TableInfo.java b/src/main/java/com/activeandroid/TableInfo.java
index 10886814..c04ad3e9 100644
--- a/src/main/java/com/activeandroid/TableInfo.java
+++ b/src/main/java/com/activeandroid/TableInfo.java
@@ -18,7 +18,6 @@
 
 import java.lang.reflect.Field;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.LinkedList;
@@ -30,7 +29,7 @@
 import com.activeandroid.annotation.PrimaryKey;
 import com.activeandroid.annotation.Table;
 import com.activeandroid.exception.PrimaryKeyNotFoundException;
-import com.activeandroid.util.Log;
+import com.activeandroid.util.AALog;
 import com.activeandroid.util.ReflectionUtils;
 
 public final class TableInfo {
@@ -126,7 +125,7 @@ private Field getIdField(Class<?> type) {
 				return type.getDeclaredField("mId");
 			}
 			catch (NoSuchFieldException e) {
-				Log.e("Impossible!", e);
+				AALog.e("Impossible!", e);
 			}
 		}
 		else if (type.getSuperclass() != null) {
diff --git a/src/main/java/com/activeandroid/app/Application.java b/src/main/java/com/activeandroid/app/AAApplication.java
similarity index 76%
rename from src/main/java/com/activeandroid/app/Application.java
rename to src/main/java/com/activeandroid/app/AAApplication.java
index 03461787..aa990a37 100644
--- a/src/main/java/com/activeandroid/app/Application.java
+++ b/src/main/java/com/activeandroid/app/AAApplication.java
@@ -19,13 +19,24 @@
 import com.activeandroid.ActiveAndroid;
 import com.activeandroid.runtime.DBRequestQueue;
 
-public class Application extends android.app.Application {
+public class AAApplication extends android.app.Application {
+
+    private static boolean mDebug = false;
+
 	@Override
 	public void onCreate() {
 		super.onCreate();
 		ActiveAndroid.initialize(this);
 
 	}
+
+    public static void setDebugLogEnabled(boolean enabled){
+        mDebug = enabled;
+    }
+
+    public static boolean isDebugEnabled(){
+        return mDebug;
+    }
 	
 	@Override
 	public void onTerminate() {
diff --git a/src/main/java/com/activeandroid/manager/SingleDBManager.java b/src/main/java/com/activeandroid/manager/SingleDBManager.java
index b64b4c3e..b296bba9 100644
--- a/src/main/java/com/activeandroid/manager/SingleDBManager.java
+++ b/src/main/java/com/activeandroid/manager/SingleDBManager.java
@@ -16,11 +16,9 @@
 import com.activeandroid.runtime.DBRequest;
 import com.activeandroid.runtime.DBRequestInfo;
 import com.activeandroid.runtime.DBRequestQueue;
-import com.activeandroid.util.Log;
 import com.activeandroid.util.ReflectionUtils;
 import com.activeandroid.util.SQLiteUtils;
 
-import java.lang.reflect.InvocationTargetException;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
diff --git a/src/main/java/com/activeandroid/query/From.java b/src/main/java/com/activeandroid/query/From.java
index cba46bc1..af93f912 100644
--- a/src/main/java/com/activeandroid/query/From.java
+++ b/src/main/java/com/activeandroid/query/From.java
@@ -21,7 +21,7 @@
 import com.activeandroid.Cache;
 import com.activeandroid.Model;
 import com.activeandroid.query.Join.JoinType;
-import com.activeandroid.util.Log;
+import com.activeandroid.util.AALog;
 import com.activeandroid.util.SQLiteUtils;
 
 import java.util.ArrayList;
@@ -194,8 +194,8 @@ public String toSql() {
 
 		// Don't wast time building the string
 		// unless we're going to log it.
-		if (Log.isEnabled()) {
-			Log.v(sql.toString() + " " + TextUtils.join(",", getArguments()));
+		if (AALog.isEnabled()) {
+			AALog.v(sql.toString() + " " + TextUtils.join(",", getArguments()));
 		}
 
 		return sql.toString().trim();
diff --git a/src/main/java/com/activeandroid/runtime/DBBatchSaveQueue.java b/src/main/java/com/activeandroid/runtime/DBBatchSaveQueue.java
index 9d3ded40..3e399b01 100644
--- a/src/main/java/com/activeandroid/runtime/DBBatchSaveQueue.java
+++ b/src/main/java/com/activeandroid/runtime/DBBatchSaveQueue.java
@@ -1,15 +1,14 @@
 package com.activeandroid.runtime;
 
 import android.os.Looper;
-import android.util.Log;
 
 import com.activeandroid.ActiveAndroid;
 import com.activeandroid.Model;
 import com.activeandroid.manager.SingleDBManager;
+import com.activeandroid.util.AALog;
 
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.List;
 
 /**
  * Created by andrewgrosner
@@ -59,7 +58,7 @@ public void run() {
                         long time = System.currentTimeMillis();
                         ActiveAndroid.beginTransaction();
                         try {
-                            Log.d("DBBatchSaveQueue", "Executing batch save of: " + tmpModels.size() + " on :" + Thread.currentThread().getName());
+                            AALog.d("DBBatchSaveQueue", "Executing batch save of: " + tmpModels.size() + " on :" + Thread.currentThread().getName());
                             for (Model model: tmpModels) {
                                 model.save();
                             }
@@ -69,7 +68,7 @@ public void run() {
                         } finally {
                             ActiveAndroid.endTransaction();
                         }
-                        Log.d("DBBatchSaveQueue", "Time took: " + (System.currentTimeMillis() -time));
+                        AALog.d("DBBatchSaveQueue", "Time took: " + (System.currentTimeMillis() -time));
                     }
                 });
             }
diff --git a/src/main/java/com/activeandroid/runtime/DBRequestQueue.java b/src/main/java/com/activeandroid/runtime/DBRequestQueue.java
index a0b749c3..bb0e9912 100644
--- a/src/main/java/com/activeandroid/runtime/DBRequestQueue.java
+++ b/src/main/java/com/activeandroid/runtime/DBRequestQueue.java
@@ -2,7 +2,8 @@
 
 import android.os.Looper;
 import android.os.Process;
-import android.util.Log;
+
+import com.activeandroid.util.AALog;
 
 import java.util.Iterator;
 import java.util.concurrent.PriorityBlockingQueue;
@@ -48,7 +49,7 @@ public void run() {
             }
 
             try{
-                Log.d("DBRequestQueue + " + getName(), "Size is: " + mQueue.size() + " executing:" + runnable.getName());
+                AALog.d("DBRequestQueue + " + getName(), "Size is: " + mQueue.size() + " executing:" + runnable.getName());
                 runnable.run();
             } catch (Throwable t){
                 throw new RuntimeException(t);
diff --git a/src/main/java/com/activeandroid/util/Log.java b/src/main/java/com/activeandroid/util/AALog.java
similarity index 94%
rename from src/main/java/com/activeandroid/util/Log.java
rename to src/main/java/com/activeandroid/util/AALog.java
index 3c40a23f..0b75d6e9 100644
--- a/src/main/java/com/activeandroid/util/Log.java
+++ b/src/main/java/com/activeandroid/util/AALog.java
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-public final class Log {
+public final class AALog {
 	//////////////////////////////////////////////////////////////////////////////////////
 	// PUBLIC MEMBERS
 	//////////////////////////////////////////////////////////////////////////////////////
@@ -28,7 +28,7 @@
 	// CONSTRUCTORS
 	//////////////////////////////////////////////////////////////////////////////////////
 
-	private Log() {
+	private AALog() {
 	}
 
 	//////////////////////////////////////////////////////////////////////////////////////
diff --git a/src/main/java/com/activeandroid/util/ReflectionUtils.java b/src/main/java/com/activeandroid/util/ReflectionUtils.java
index 8f7ea959..8559d965 100644
--- a/src/main/java/com/activeandroid/util/ReflectionUtils.java
+++ b/src/main/java/com/activeandroid/util/ReflectionUtils.java
@@ -24,7 +24,6 @@
 import com.activeandroid.serializer.TypeSerializer;
 
 import java.lang.reflect.Field;
-import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.List;
 
@@ -54,7 +53,7 @@ public static boolean isTypeSerializer(Class<?> type) {
 			}
 		}
 		catch (Exception e) {
-			Log.w("Couldn't find meta-data: " + name);
+			AALog.w("Couldn't find meta-data: " + name);
 		}
 
 		return null;
diff --git a/src/main/java/com/activeandroid/util/SQLiteUtils.java b/src/main/java/com/activeandroid/util/SQLiteUtils.java
index 3e9085ef..69af06d1 100644
--- a/src/main/java/com/activeandroid/util/SQLiteUtils.java
+++ b/src/main/java/com/activeandroid/util/SQLiteUtils.java
@@ -32,8 +32,6 @@
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
-import java.lang.reflect.ParameterizedType;
-import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -213,7 +211,7 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
 			}
 		}
 		else {
-			Log.e("No type mapping for: " + type.toString());
+			AALog.e("No type mapping for: " + type.toString());
 		}
 
 		return definition.toString();
@@ -242,7 +240,7 @@ else if (ReflectionUtils.isSubclassOf(type, Enum.class)) {
         catch (IllegalArgumentException i){
             throw new RuntimeException("Default constructor for: " + type.getName() + " was not found.");
         } catch (Exception e) {
-			Log.e("Failed to process cursor.", e);
+			AALog.e("Failed to process cursor.", e);
 		}
 
 		return entities;
diff --git a/tests/src/com/activeandroid/test/ActiveAndroidTestCase.java b/tests/src/com/activeandroid/test/ActiveAndroidTestCase.java
index 3b5fab1f..ba5a9bdd 100644
--- a/tests/src/com/activeandroid/test/ActiveAndroidTestCase.java
+++ b/tests/src/com/activeandroid/test/ActiveAndroidTestCase.java
@@ -18,11 +18,11 @@
 
 import android.test.ApplicationTestCase;
 
-import com.activeandroid.app.Application;
+import com.activeandroid.app.AAApplication;
 
-public abstract class ActiveAndroidTestCase extends ApplicationTestCase<Application> {
+public abstract class ActiveAndroidTestCase extends ApplicationTestCase<AAApplication> {
 	public ActiveAndroidTestCase() {
-		super(Application.class);
+		super(AAApplication.class);
 	}
 
 	protected void setUp() throws Exception {
