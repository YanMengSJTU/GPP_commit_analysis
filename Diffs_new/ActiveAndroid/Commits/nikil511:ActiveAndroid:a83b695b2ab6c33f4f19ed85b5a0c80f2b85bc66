diff --git a/src/com/activeandroid/DatabaseHelper.java b/src/com/activeandroid/DatabaseHelper.java
index 1941da1a..43abeb41 100644
--- a/src/com/activeandroid/DatabaseHelper.java
+++ b/src/com/activeandroid/DatabaseHelper.java
@@ -68,12 +68,16 @@ public void onCreate(SQLiteDatabase db) {
 
 		db.beginTransaction();
 
-		for (TableInfo tableInfo : Cache.getTableInfos()) {
-			db.execSQL(SQLiteUtils.createTableDefinition(tableInfo));
-		}
+		try {
+			for (TableInfo tableInfo : Cache.getTableInfos()) {
+				db.execSQL(SQLiteUtils.createTableDefinition(tableInfo));
+			}
 
-		db.setTransactionSuccessful();
-		db.endTransaction();
+			db.setTransactionSuccessful();
+		}
+		finally {
+			db.endTransaction();
+		}
 
 		executeMigrations(db, -1, db.getVersion());
 	}
@@ -139,25 +143,27 @@ private boolean executeMigrations(SQLiteDatabase db, int oldVersion, int newVers
 			Collections.sort(files, new NaturalOrderComparator());
 
 			db.beginTransaction();
+			try {
+				for (String file : files) {
+					try {
+						final int version = Integer.valueOf(file.replace(".sql", ""));
 
-			for (String file : files) {
-				try {
-					final int version = Integer.valueOf(file.replace(".sql", ""));
+						if (version > oldVersion && version <= newVersion) {
+							executeSqlScript(db, file);
+							migrationExecuted = true;
 
-					if (version > oldVersion && version <= newVersion) {
-						executeSqlScript(db, file);
-						migrationExecuted = true;
-
-						Log.i(file + " executed succesfully.");
+							Log.i(file + " executed succesfully.");
+						}
+					}
+					catch (NumberFormatException e) {
+						Log.w("Skipping invalidly named file: " + file, e);
 					}
 				}
-				catch (NumberFormatException e) {
-					Log.w("Skipping invalidly named file: " + file, e);
-				}
+				db.setTransactionSuccessful();
+			}
+			finally {
+				db.endTransaction();
 			}
-
-			db.setTransactionSuccessful();
-			db.endTransaction();
 		}
 		catch (IOException e) {
 			Log.e("Failed to execute migrations.", e);
@@ -202,4 +208,4 @@ private static int getDbVersion(Context context) {
 
 		return aaVersion;
 	}
-}
\ No newline at end of file
+}
diff --git a/src/com/activeandroid/query/Select.java b/src/com/activeandroid/query/Select.java
index 1d4c6488..149d7eaa 100644
--- a/src/com/activeandroid/query/Select.java
+++ b/src/com/activeandroid/query/Select.java
@@ -16,6 +16,8 @@
  * limitations under the License.
  */
 
+import java.util.Arrays;
+
 import android.text.TextUtils;
 
 import com.activeandroid.Model;
@@ -82,6 +84,9 @@ else if (mAll) {
 		}
 
 		if (mColumns != null && mColumns.length > 0) {
+			if (!Arrays.asList(mColumns).contains("id") && !mDistinct)
+				sql.append("id, ");
+
 			sql.append(TextUtils.join(", ", mColumns) + " ");
 		}
 		else {
diff --git a/src/com/activeandroid/serializer/TimeSerializer.java b/src/com/activeandroid/serializer/TimeSerializer.java
new file mode 100644
index 00000000..27327214
--- /dev/null
+++ b/src/com/activeandroid/serializer/TimeSerializer.java
@@ -0,0 +1,30 @@
+package com.activeandroid.serializer;
+
+import android.text.format.Time;
+
+public class TimeSerializer extends TypeSerializer {
+	public Class<?> getDeserializedType() {
+		return Time.class;
+	}
+
+	public Class<?> getSerializedType() {
+		return long.class;
+	}
+
+	public Long serialize(Object data) {
+		if (data == null) {
+			return null;
+		}
+
+		return ((Time) data).toMillis(false);
+	}
+
+	public Time deserialize(Object data) {
+		if (data == null) {
+			return null;
+		}
+		Time t = new Time();
+		t.set((Long) data);
+		return t;
+	}
+}
