diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/StackedBar.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/StackedBar.java
index 507e46b07..9c828a50d 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/StackedBar.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/StackedBar.java
@@ -15,10 +15,8 @@
 
     private static final String PROTOTYPE_TEXT_VALUE = "aaaa\naaaa\naaaa\naaaa" ;
 
+    private final Percs percs;
     private final Paint paint;
-    private final float positivePerc;
-    private final float emptyPerc;
-    private final float negativePerc;
     private float height;
     private float width;
     private float padding;
@@ -26,6 +24,37 @@
     private float left;
     private float top;
 
+    static class Percs {
+        protected final float positivePerc;
+        protected final float emptyPerc;
+        protected final float negativePerc;
+
+        private Percs(float emptyPerc, float positivePerc, float negativePerc) {
+            this.positivePerc = positivePerc;
+            this.emptyPerc = emptyPerc;
+            this.negativePerc = negativePerc;
+            checkPerc();
+        }
+
+        private void checkPerc() {
+            float[] percs = new float[]{emptyPerc, positivePerc, negativePerc};
+            for (int i=0; i <percs.length ; i++){
+                if (percs[i] > 1 || percs[i] < 0)
+                    throw new IllegalArgumentException("perc["+i+"]  [" + percs[i] + "]" +
+                            " must be between 1 and 0");
+            }
+        }
+    }
+
+    static Percs getPercs(int totalUserCount, int positiveVoteCount, int userThatVoteCount) {
+        if (totalUserCount == 0)
+            return new Percs(1, 0, 0);
+
+        float emptyPerc = (float) (totalUserCount - userThatVoteCount) / totalUserCount;
+        float positivePerc = (float) positiveVoteCount / totalUserCount;
+        float negativePerc = (float) (userThatVoteCount - positiveVoteCount) / totalUserCount;
+        return new Percs(emptyPerc, positivePerc, negativePerc);
+    }
 
     public StackedBar(Context context, int totalUserCount, int positiveVoteCount, int userThatVoteCount) {
         super(context);
@@ -33,10 +62,7 @@ public StackedBar(Context context, int totalUserCount, int positiveVoteCount, in
         Log.d(LOG_TAG, "totalUserCount["+totalUserCount+"] positiveVoteCount["+ positiveVoteCount +"] " +
                 "userThatVoteCount["+userThatVoteCount+"]");
 
-        this.emptyPerc = (float)(totalUserCount - userThatVoteCount) / totalUserCount;
-        this.positivePerc = (float) positiveVoteCount/ totalUserCount;
-        this.negativePerc = (float) 1 - emptyPerc - positivePerc;
-        checkPerc();
+        this.percs = getPercs(totalUserCount,positiveVoteCount,userThatVoteCount);
 
         padding = AndroidUtilities.dp(10);
         externalStroke = AndroidUtilities.dp(1);
@@ -44,14 +70,7 @@ public StackedBar(Context context, int totalUserCount, int positiveVoteCount, in
         paint = new Paint();
     }
 
-    private void checkPerc() {
-        float[] percs = new float[]{emptyPerc, positivePerc, negativePerc};
-        for (float p : percs) {
-            if (p > 1 || p < 0)
-                throw new IllegalArgumentException("positivePerc [" + p + "]" +
-                        " must be between 1 and 0");
-        }
-    }
+
 
     @Override
     protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
@@ -88,9 +107,9 @@ private void drawRect(Canvas canvas, float left, float top, float width, float h
 
         paint.setColor(Color.GREEN);
         float myLeft = left;
-        float myTop = top + (height * emptyPerc);
+        float myTop = top + (height * percs.emptyPerc);
         myRight = left + width;
-        myBottom = myTop + (height * positivePerc) ;
+        myBottom = myTop + (height * percs.positivePerc) ;
         canvas.drawRect(myLeft, myTop, myRight, myBottom, paint);
 
         paint.setColor(Color.RED);
diff --git a/TMessagesProj/src/test/java/org/pollgram/decision/ui/StackedBarPercTest.java b/TMessagesProj/src/test/java/org/pollgram/decision/ui/StackedBarPercTest.java
new file mode 100644
index 000000000..a8867a822
--- /dev/null
+++ b/TMessagesProj/src/test/java/org/pollgram/decision/ui/StackedBarPercTest.java
@@ -0,0 +1,63 @@
+package org.pollgram.decision.ui;
+
+import junit.framework.Assert;
+
+import org.junit.Test;
+
+/**
+ * Created by davide on 14/12/15.
+ */
+public class StackedBarPercTest {
+
+
+    @Test(expected = IllegalArgumentException.class)
+    public void testPercWrongPerc(){
+        StackedBar.getPercs(5, 6, 6);
+    }
+
+    @Test
+    public void testPerc1(){
+        //int totalUserCount, int positiveVoteCount, int userThatVoteCount
+        StackedBar.Percs p = StackedBar.getPercs(10, 5, 6);
+        Assert.assertEquals(p.emptyPerc, 0.4, 0.001);
+        Assert.assertEquals(p.positivePerc, 0.5, 0.001);
+        Assert.assertEquals(p.negativePerc, 0.1, 0.001);
+    }
+
+    @Test
+    public void testPerc2() {
+        //int totalUserCount, int positiveVoteCount, int userThatVoteCount
+        StackedBar.Percs p = StackedBar.getPercs(3, 1, 1);
+        Assert.assertEquals(p.emptyPerc, 0.666, 0.001);
+        Assert.assertEquals(p.positivePerc, 0.333, 0.001);
+        Assert.assertEquals(p.negativePerc, 0, 0.001);
+    }
+
+    @Test
+    public void testNoVote() {
+        //int totalUserCount, int positiveVoteCount, int userThatVoteCount
+        StackedBar.Percs p = StackedBar.getPercs(0, 0, 0);
+        Assert.assertEquals(p.emptyPerc, 1, 0.001);
+        Assert.assertEquals(p.positivePerc, 0, 0.001);
+        Assert.assertEquals(p.negativePerc, 0, 0.001);
+    }
+
+    @Test
+    public void testAllPositive() {
+        //int totalUserCount, int positiveVoteCount, int userThatVoteCount
+        StackedBar.Percs p = StackedBar.getPercs(66, 66, 66);
+        Assert.assertEquals(p.emptyPerc, 0, 0.001);
+        Assert.assertEquals(p.positivePerc, 1, 0.001);
+        Assert.assertEquals(p.negativePerc, 0, 0.001);
+    }
+
+    @Test
+    public void testAllNegative() {
+        //int totalUserCount, int positiveVoteCount, int userThatVoteCount
+        StackedBar.Percs p = StackedBar.getPercs(569, 0, 569);
+        Assert.assertEquals(p.emptyPerc, 0, 0.001);
+        Assert.assertEquals(p.positivePerc, 0, 0.001);
+        Assert.assertEquals(p.negativePerc, 1, 0.001);
+    }
+}
+
