diff --git a/TMessagesProj/src/main/java/org/cloudveil/messenger/util/CameraUtil.java b/TMessagesProj/src/main/java/org/cloudveil/messenger/util/CameraUtil.java
new file mode 100644
index 000000000..545433f81
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/cloudveil/messenger/util/CameraUtil.java
@@ -0,0 +1,47 @@
+package org.cloudveil.messenger.util;
+
+import android.Manifest;
+import android.app.admin.DevicePolicyManager;
+import android.content.Context;
+import android.content.pm.PackageManager;
+import android.hardware.camera2.CameraAccessException;
+import android.hardware.camera2.CameraManager;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.v4.app.ActivityCompat;
+
+/**
+ * Created by Dmitriy on 03.03.2018.
+ */
+
+public class CameraUtil {
+    public static boolean isCameraEnabled(@NonNull Context context) {
+        DevicePolicyManager dpm = (DevicePolicyManager) context.getSystemService(Context.DEVICE_POLICY_SERVICE);
+        if (dpm != null) {
+            boolean cameraDisabled = dpm.getCameraDisabled(null);
+            if (cameraDisabled) {
+                return false;
+            }
+        }
+
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            CameraManager manager = (CameraManager) context.getSystemService(Context.CAMERA_SERVICE);
+            try {
+                if (ActivityCompat.checkSelfPermission(context, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
+                    return false;
+                }
+
+                String[] cameraIdList = manager.getCameraIdList();
+            } catch (CameraAccessException e) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    public static void guardCameraEnabled(@NonNull Context context) throws Exception {
+        if(!isCameraEnabled(context)) {
+            throw new Exception("Camera is disabled by admin or somehow else");
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/camera/CameraController.java b/TMessagesProj/src/main/java/org/telegram/messenger/camera/CameraController.java
index a2aea0865..f7584fe60 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/camera/CameraController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/camera/CameraController.java
@@ -20,7 +20,9 @@
 import android.os.Build;
 import android.provider.MediaStore;
 
+import org.cloudveil.messenger.util.CameraUtil;
 import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.Bitmaps;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.ImageLoader;
@@ -88,6 +90,7 @@ public void initCamera() {
             public void run() {
                 try {
                     if (cameraInfos == null) {
+
                         int count = Camera.getNumberOfCameras();
                         ArrayList<CameraInfo> result = new ArrayList<>();
                         Camera.CameraInfo info = new Camera.CameraInfo();
@@ -96,6 +99,9 @@ public void run() {
                             Camera.getCameraInfo(cameraId, info);
                             CameraInfo cameraInfo = new CameraInfo(cameraId, info);
 
+                            //CloudVeil start
+                            CameraUtil.guardCameraEnabled(ApplicationLoader.applicationContext);
+                            //CloudVeil end
                             Camera camera = Camera.open(cameraInfo.getCameraId());
                             Camera.Parameters params = camera.getParameters();
 
@@ -414,6 +420,9 @@ public void startPreview(final CameraSession session) {
             public void run() {
                 Camera camera = session.cameraInfo.camera;
                 try {
+                    //CloudVeil start
+                    CameraUtil.guardCameraEnabled(ApplicationLoader.applicationContext);
+                    //CloudVeil end
                     if (camera == null) {
                         camera = session.cameraInfo.camera = Camera.open(session.cameraInfo.cameraId);
                     }
@@ -440,6 +449,9 @@ public void openRound(final CameraSession session, final SurfaceTexture texture,
             public void run() {
                 Camera camera = session.cameraInfo.camera;
                 try {
+                    //CloudVeil start
+                    CameraUtil.guardCameraEnabled(ApplicationLoader.applicationContext);
+                    //CloudVeil end
                     FileLog.e("start creating round camera session");
                     if (camera == null) {
                         camera = session.cameraInfo.camera = Camera.open(session.cameraInfo.cameraId);
@@ -477,6 +489,9 @@ public void open(final CameraSession session, final SurfaceTexture texture, fina
             public void run() {
                 Camera camera = session.cameraInfo.camera;
                 try {
+                    //CloudVeil start
+                    CameraUtil.guardCameraEnabled(ApplicationLoader.applicationContext);
+                    //CloudVeil end
                     if (camera == null) {
                         camera = session.cameraInfo.camera = Camera.open(session.cameraInfo.cameraId);
                     }
