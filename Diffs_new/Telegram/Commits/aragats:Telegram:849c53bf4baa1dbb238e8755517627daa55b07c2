diff --git a/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java b/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
index f60d918b0..d72e00cbe 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
@@ -894,12 +894,12 @@ public VMRuntimeHack() {
         }
     }
 
+    //TODO cache image
     private class CacheImage {
         protected String key;
         protected String url;
         protected String filter;
         protected String ext;
-        protected TLObject location;
 
         protected File finalFilePath;
         protected File tempFilePath;
@@ -941,13 +941,6 @@ public void removeImageReceiver(ImageReceiver imageReceiver) {
                     imageLoadingByTag.remove(receiver.getTag(thumb));
                 }
                 imageReceiverArray.clear();
-                if (location != null) {
-                    if (location instanceof TLRPC.FileLocation) {
-                        FileLoader.getInstance().cancelLoadFile((TLRPC.FileLocation) location, ext);
-                    } else if (location instanceof TLRPC.Document) {
-                        FileLoader.getInstance().cancelLoadFile((TLRPC.Document) location);
-                    }
-                }
                 if (cacheTask != null) {
                     if (thumb) {
                         cacheThumbOutQueue.cancelRunnable(cacheTask);
@@ -1439,7 +1432,7 @@ private void generateThumb(int mediaType, File originalPath, TLRPC.FileLocation
         }
     }
 
-    private void createLoadOperationForImageReceiver(final ImageReceiver imageReceiver, final String key, final String url, final String ext, final TLObject imageLocation, final String httpLocation, final String filter, final int size, final boolean cacheOnly, final int thumb) {
+    private void createLoadOperationForImageReceiver(final ImageReceiver imageReceiver, final String key, final String url, final String ext, final String httpLocation, final String filter, final int size, final boolean cacheOnly, final int thumb) {
         if (imageReceiver == null || url == null || key == null) {
             return;
         }
@@ -1539,16 +1532,15 @@ public void run() {
                             }
                         } else {
                             img.url = url;
-                            img.location = imageLocation;
                             imageLoadingByUrl.put(url, img);
-                            if (httpLocation == null) {
-                                if (imageLocation instanceof TLRPC.FileLocation) {
-                                    TLRPC.FileLocation location = (TLRPC.FileLocation) imageLocation;
-                                    FileLoader.getInstance().loadFile(location, ext, size, size == 0 || location.key != null || cacheOnly);
-                                } else if (imageLocation instanceof TLRPC.Document) {
-                                    FileLoader.getInstance().loadFile((TLRPC.Document) imageLocation, true, true);
-                                }
-                            } else {
+//                            if (httpLocation == null) {
+//                                if (imageLocation instanceof TLRPC.FileLocation) {
+//                                    TLRPC.FileLocation location = (TLRPC.FileLocation) imageLocation;
+//                                    FileLoader.getInstance().loadFile(location, ext, size, size == 0 || location.key != null || cacheOnly);
+//                                } else if (imageLocation instanceof TLRPC.Document) {
+//                                    FileLoader.getInstance().loadFile((TLRPC.Document) imageLocation, true, true);
+//                                }
+//                            } else {
                                 String file = Utilities.MD5(httpLocation);
                                 File cacheDir = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE);
                                 img.tempFilePath = new File(cacheDir, file + "_temp.jpg");
@@ -1556,7 +1548,7 @@ public void run() {
                                 img.httpTask = new HttpImageTask(img, size);
                                 httpTasks.add(img.httpTask);
                                 runHttpTasks(false);
-                            }
+//                            }
                         }
                     }
                 }
@@ -1591,8 +1583,6 @@ public void loadImageForImageReceiver(ImageReceiver imageReceiver) {
             }
         }
 
-        TLRPC.FileLocation thumbLocation = imageReceiver.getThumbLocation();
-        TLObject imageLocation = imageReceiver.getImageLocation();
         String httpLocation = imageReceiver.getHttpImageLocation();
 
         boolean saveImageToCache = false;
@@ -1608,46 +1598,6 @@ public void loadImageForImageReceiver(ImageReceiver imageReceiver) {
         if (httpLocation != null) {
             key = Utilities.MD5(httpLocation);
             url = key + "." + getHttpUrlExtension(httpLocation);
-        } else if (imageLocation != null) {
-            if (imageLocation instanceof TLRPC.FileLocation) {
-                TLRPC.FileLocation location = (TLRPC.FileLocation) imageLocation;
-                key = location.volume_id + "_" + location.local_id;
-                url = key + "." + ext;
-                if (imageReceiver.getExt() != null || location.key != null || location.volume_id == Integer.MIN_VALUE && location.local_id < 0) {
-                    saveImageToCache = true;
-                }
-            } else if (imageLocation instanceof TLRPC.Document) {
-                TLRPC.Document location = (TLRPC.Document) imageLocation;
-                if (location.id == 0 || location.dc_id == 0) {
-                    return;
-                }
-                key = location.dc_id + "_" + location.id;
-                String docExt = FileLoader.getDocumentFileName(location);
-                int idx;
-                if (docExt == null || (idx = docExt.lastIndexOf(".")) == -1) {
-                    docExt = "";
-                } else {
-                    docExt = docExt.substring(idx);
-                    if (docExt.length() <= 1) {
-                        docExt = "";
-                    }
-                }
-                url = key + docExt;
-                if (thumbKey != null) {
-                    thumbUrl = thumbKey + "." + ext;
-                }
-                saveImageToCache = true;
-            }
-            if (imageLocation == thumbLocation) {
-                imageLocation = null;
-                key = null;
-                url = null;
-            }
-        }
-
-        if (thumbLocation != null) {
-            thumbKey = thumbLocation.volume_id + "_" + thumbLocation.local_id;
-            thumbUrl = thumbKey + "." + ext;
         }
 
         String filter = imageReceiver.getFilter();
@@ -1660,11 +1610,12 @@ public void loadImageForImageReceiver(ImageReceiver imageReceiver) {
         }
 
         if (httpLocation != null) {
-            createLoadOperationForImageReceiver(imageReceiver, key, url, ext, null, httpLocation, filter, 0, true, 0);
-        } else {
-            createLoadOperationForImageReceiver(imageReceiver, thumbKey, thumbUrl, ext, thumbLocation, null, thumbFilter, 0, true, thumbSet ? 2 : 1);
-            createLoadOperationForImageReceiver(imageReceiver, key, url, ext, imageLocation, null, filter, imageReceiver.getSize(), saveImageToCache || imageReceiver.getCacheOnly(), 0);
+            createLoadOperationForImageReceiver(imageReceiver, key, url, ext, httpLocation, filter, 0, true, 0);
         }
+//        else {
+//            createLoadOperationForImageReceiver(imageReceiver, thumbKey, thumbUrl, ext, null, thumbFilter, 0, true, thumbSet ? 2 : 1);
+//            createLoadOperationForImageReceiver(imageReceiver, key, url, ext, imageLocation, null, filter, imageReceiver.getSize(), saveImageToCache || imageReceiver.getCacheOnly(), 0);
+//        }
     }
 
     private void httpFileLoadError(final String location) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java b/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
index 9fa5bf409..49f38d8b4 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ImageReceiver.java
@@ -23,8 +23,6 @@
 import android.graphics.drawable.Drawable;
 import android.view.View;
 
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.Utilities;
 
@@ -35,11 +33,9 @@
     }
 
     private class SetImageBackup {
-        public TLObject fileLocation;
         public String httpUrl;
         public String filter;
         public Drawable thumb;
-        public TLRPC.FileLocation thumbLocation;
         public String thumbFilter;
         public int size;
         public boolean cacheOnly;
@@ -54,14 +50,12 @@
 
     private SetImageBackup setImageBackup;
 
-    private TLObject currentImageLocation;
     private String currentKey;
     private String currentThumbKey;
     private String currentHttpUrl;
     private String currentFilter;
     private String currentThumbFilter;
     private String currentExt;
-    private TLRPC.FileLocation currentThumbLocation;
     private int currentSize;
     private boolean currentCacheOnly;
     private BitmapDrawable currentImage;
@@ -107,52 +101,30 @@ public void cancelLoadImage() {
         canceledLoading = true;
     }
 
-    public void setImage(TLObject path, String filter, Drawable thumb, String ext, boolean cacheOnly) {
-        setImage(path, null, filter, thumb, null, null, 0, ext, cacheOnly);
-    }
-
-    public void setImage(TLObject path, String filter, Drawable thumb, int size, String ext, boolean cacheOnly) {
-        setImage(path, null, filter, thumb, null, null, size, ext, cacheOnly);
-    }
 
     //TODO ser image by url. investigate the method nad new parameters.
     public void setImage(String httpUrl, String filter, Drawable thumb, String ext, int size) {
-        setImage(null, httpUrl, filter, thumb, null, null, size, ext, true);
-    }
-
-    public void setImage(TLObject fileLocation, String filter, TLRPC.FileLocation thumbLocation, String thumbFilter, String ext, boolean cacheOnly) {
-        setImage(fileLocation, null, filter, null, thumbLocation, thumbFilter, 0, ext, cacheOnly);
-    }
-
-    public void setImage(TLObject fileLocation, String filter, TLRPC.FileLocation thumbLocation, String thumbFilter, int size, String ext, boolean cacheOnly) {
-        setImage(fileLocation, null, filter, null, thumbLocation, thumbFilter, size, ext, cacheOnly);
+        setImage(httpUrl, filter, thumb, null, size, ext, true);
     }
 
-    public void setImage(TLObject fileLocation, String httpUrl, String filter, Drawable thumb, TLRPC.FileLocation thumbLocation, String thumbFilter, int size, String ext, boolean cacheOnly) {
+    public void setImage(String httpUrl, String filter, Drawable thumb, String thumbFilter, int size, String ext, boolean cacheOnly) {
         if (setImageBackup != null) {
-            setImageBackup.fileLocation = null;
             setImageBackup.httpUrl = null;
-            setImageBackup.thumbLocation = null;
             setImageBackup.thumb = null;
         }
 
-        if ((fileLocation == null && httpUrl == null && thumbLocation == null)
-                || (fileLocation != null && !(fileLocation instanceof TLRPC.TL_fileLocation)
-                && !(fileLocation instanceof TLRPC.TL_fileEncryptedLocation)
-                && !(fileLocation instanceof TLRPC.TL_document))) {
+        if (httpUrl == null) {
             recycleBitmap(null, false);
             recycleBitmap(null, true);
             currentKey = null;
             currentExt = ext;
             currentThumbKey = null;
             currentThumbFilter = null;
-            currentImageLocation = null;
             currentHttpUrl = null;
             currentFilter = null;
             currentCacheOnly = false;
             staticThumb = thumb;
             currentAlpha = 1;
-            currentThumbLocation = null;
             currentSize = 0;
             currentImage = null;
             bitmapShader = null;
@@ -172,22 +144,8 @@ public void setImage(TLObject fileLocation, String httpUrl, String filter, Drawa
 
 
 
-        if (!(thumbLocation instanceof TLRPC.TL_fileLocation)) {
-            thumbLocation = null;
-        }
+        String  key = Utilities.MD5(httpUrl);;
 
-        String key = null;
-        if (fileLocation != null) {
-            if (fileLocation instanceof TLRPC.FileLocation) {
-                TLRPC.FileLocation location = (TLRPC.FileLocation) fileLocation;
-                key = location.volume_id + "_" + location.local_id;
-            } else if (fileLocation instanceof TLRPC.Document) {
-                TLRPC.Document location = (TLRPC.Document) fileLocation;
-                key = location.dc_id + "_" + location.id;
-            }
-        } else if (httpUrl != null) {
-            key = Utilities.MD5(httpUrl);
-        }
         if (key != null) {
             if (filter != null) {
                 key += "@" + filter;
@@ -204,12 +162,6 @@ public void setImage(TLObject fileLocation, String httpUrl, String filter, Drawa
         }
 
         String thumbKey = null;
-        if (thumbLocation != null) {
-            thumbKey = thumbLocation.volume_id + "_" + thumbLocation.local_id;
-            if (thumbFilter != null) {
-                thumbKey += "@" + thumbFilter;
-            }
-        }
 
         recycleBitmap(key, false);
         recycleBitmap(thumbKey, true);
@@ -217,13 +169,11 @@ public void setImage(TLObject fileLocation, String httpUrl, String filter, Drawa
         currentThumbKey = thumbKey;
         currentKey = key;
         currentExt = ext;
-        currentImageLocation = fileLocation;
         currentHttpUrl = httpUrl;
         currentFilter = filter;
         currentThumbFilter = thumbFilter;
         currentSize = size;
         currentCacheOnly = cacheOnly;
-        currentThumbLocation = thumbLocation;
         staticThumb = thumb;
         bitmapShader = null;
         currentAlpha = 1.0f;
@@ -280,22 +230,18 @@ public void setImageBitmap(Drawable bitmap) {
         recycleBitmap(null, false);
         recycleBitmap(null, true);
         staticThumb = bitmap;
-        currentThumbLocation = null;
         currentKey = null;
         currentExt = null;
         currentThumbKey = null;
         currentImage = null;
         currentThumbFilter = null;
-        currentImageLocation = null;
         currentHttpUrl = null;
         currentFilter = null;
         currentSize = 0;
         currentCacheOnly = false;
         bitmapShader = null;
         if (setImageBackup != null) {
-            setImageBackup.fileLocation = null;
             setImageBackup.httpUrl = null;
-            setImageBackup.thumbLocation = null;
             setImageBackup.thumb = null;
         }
         currentAlpha = 1;
@@ -321,15 +267,13 @@ public void clearImage() {
     }
 
     public void onDetachedFromWindow() {
-        if (currentImageLocation != null || currentHttpUrl != null || currentThumbLocation != null || staticThumb != null) {
+        if (currentHttpUrl != null || staticThumb != null) {
             if (setImageBackup == null) {
                 setImageBackup = new SetImageBackup();
             }
-            setImageBackup.fileLocation = currentImageLocation;
             setImageBackup.httpUrl = currentHttpUrl;
             setImageBackup.filter = currentFilter;
             setImageBackup.thumb = staticThumb;
-            setImageBackup.thumbLocation = currentThumbLocation;
             setImageBackup.thumbFilter = currentThumbFilter;
             setImageBackup.size = currentSize;
             setImageBackup.ext = currentExt;
@@ -341,8 +285,8 @@ public void onDetachedFromWindow() {
 
     public boolean onAttachedToWindow() {
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReplacedPhotoInMemCache);
-        if (setImageBackup != null && (setImageBackup.fileLocation != null || setImageBackup.httpUrl != null || setImageBackup.thumbLocation != null || setImageBackup.thumb != null)) {
-            setImage(setImageBackup.fileLocation, setImageBackup.httpUrl, setImageBackup.filter, setImageBackup.thumb, setImageBackup.thumbLocation, setImageBackup.thumbFilter, setImageBackup.size, setImageBackup.ext, setImageBackup.cacheOnly);
+        if (setImageBackup != null && (setImageBackup.httpUrl != null || setImageBackup.thumb != null)) {
+            setImage(setImageBackup.httpUrl, setImageBackup.filter, setImageBackup.thumb, setImageBackup.thumbFilter, setImageBackup.size, setImageBackup.ext, setImageBackup.cacheOnly);
             return true;
         }
         return false;
@@ -403,7 +347,7 @@ private void drawDrawable(Canvas canvas, Drawable drawable, int alpha) {
                             ImageLoader.getInstance().removeImage(currentThumbKey);
                             currentThumbKey = null;
                         }
-                        setImage(currentImageLocation, currentHttpUrl, currentFilter, currentThumb, currentThumbLocation, currentThumbFilter, currentSize, currentExt, currentCacheOnly);
+                        setImage(currentHttpUrl, currentFilter, currentThumb, currentThumbFilter, currentSize, currentExt, currentCacheOnly);
                         FileLog.e("tmessages", e);
                     }
                     canvas.restore();
@@ -448,7 +392,7 @@ private void drawDrawable(Canvas canvas, Drawable drawable, int alpha) {
                                     ImageLoader.getInstance().removeImage(currentThumbKey);
                                     currentThumbKey = null;
                                 }
-                                setImage(currentImageLocation, currentHttpUrl, currentFilter, currentThumb, currentThumbLocation, currentThumbFilter, currentSize, currentExt, currentCacheOnly);
+                                setImage(currentHttpUrl, currentFilter, currentThumb, currentThumbFilter, currentSize, currentExt, currentCacheOnly);
                                 FileLog.e("tmessages", e);
                             }
                         }
@@ -485,7 +429,7 @@ private void drawDrawable(Canvas canvas, Drawable drawable, int alpha) {
                                     ImageLoader.getInstance().removeImage(currentThumbKey);
                                     currentThumbKey = null;
                                 }
-                                setImage(currentImageLocation, currentHttpUrl, currentFilter, currentThumb, currentThumbLocation, currentThumbFilter, currentSize, currentExt, currentCacheOnly);
+                                setImage(currentHttpUrl, currentFilter, currentThumb, currentThumbFilter, currentSize, currentExt, currentCacheOnly);
                                 FileLog.e("tmessages", e);
                             }
                         }
@@ -694,14 +638,6 @@ public int getSize() {
         return currentSize;
     }
 
-    public TLObject getImageLocation() {
-        return currentImageLocation;
-    }
-
-    public TLRPC.FileLocation getThumbLocation() {
-        return currentThumbLocation;
-    }
-
     public String getHttpImageLocation() {
         return currentHttpUrl;
     }
@@ -914,20 +850,16 @@ public void didReceivedNotification(int id, Object... args) {
             String oldKey = (String) args[0];
             if (currentKey != null && currentKey.equals(oldKey)) {
                 currentKey = (String) args[1];
-                currentImageLocation = (TLRPC.FileLocation) args[2];
             }
             if (currentThumbKey != null && currentThumbKey.equals(oldKey)) {
                 currentThumbKey = (String) args[1];
-                currentThumbLocation = (TLRPC.FileLocation) args[2];
             }
             if (setImageBackup != null) {
                 if (currentKey != null && currentKey.equals(oldKey)) {
                     currentKey = (String) args[1];
-                    currentImageLocation = (TLRPC.FileLocation) args[2];
                 }
                 if (currentThumbKey != null && currentThumbKey.equals(oldKey)) {
                     currentThumbKey = (String) args[1];
-                    currentThumbLocation = (TLRPC.FileLocation) args[2];
                 }
             }
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
deleted file mode 100644
index 8d08c7431..000000000
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
+++ /dev/null
@@ -1,165 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.android;
-
-import android.app.Activity;
-import android.content.SharedPreferences;
-
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.Utilities;
-import org.telegram.ui.ActionBar.BaseFragment;
-
-public class MessagesController implements NotificationCenter.NotificationCenterDelegate {
-
-
-    private Runnable currentDeleteTaskRunnable = null;
-
-    public int totalDialogsCount = 0;
-    public boolean loadingDialogs = false;
-    public boolean dialogsEndReached = false;
-    public boolean gettingDifference = false;
-    public boolean gettingDifferenceAgain = false;
-    public boolean updatingState = false;
-    public boolean firstGettingTask = false;
-    public boolean registeringForPush = false;
-
-
-    public int fontSize = AndroidUtilities.dp(16);
-    public int maxGroupCount = 200;
-    public int maxBroadcastCount = 100;
-    public int groupBigSize;
-
-
-    public static final int UPDATE_MASK_NAME = 1;
-    public static final int UPDATE_MASK_AVATAR = 2;
-    public static final int UPDATE_MASK_STATUS = 4;
-    public static final int UPDATE_MASK_CHAT_AVATAR = 8;
-    public static final int UPDATE_MASK_CHAT_NAME = 16;
-    public static final int UPDATE_MASK_CHAT_MEMBERS = 32;
-    public static final int UPDATE_MASK_USER_PRINT = 64;
-    public static final int UPDATE_MASK_USER_PHONE = 128;
-    public static final int UPDATE_MASK_READ_DIALOG_MESSAGE = 256;
-    public static final int UPDATE_MASK_SELECT_DIALOG = 512;
-    public static final int UPDATE_MASK_PHONE = 1024;
-    public static final int UPDATE_MASK_NEW_MESSAGE = 2048;
-    public static final int UPDATE_MASK_SEND_STATE = 4096;
-    public static final int UPDATE_MASK_ALL = UPDATE_MASK_AVATAR | UPDATE_MASK_STATUS | UPDATE_MASK_NAME | UPDATE_MASK_CHAT_AVATAR | UPDATE_MASK_CHAT_NAME | UPDATE_MASK_CHAT_MEMBERS | UPDATE_MASK_USER_PRINT | UPDATE_MASK_USER_PHONE | UPDATE_MASK_READ_DIALOG_MESSAGE | UPDATE_MASK_PHONE;
-
-
-    private static volatile MessagesController Instance = null;
-
-    public static MessagesController getInstance() {
-        MessagesController localInstance = Instance;
-        if (localInstance == null) {
-            synchronized (MessagesController.class) {
-                localInstance = Instance;
-                if (localInstance == null) {
-                    Instance = localInstance = new MessagesController();
-                }
-            }
-        }
-        return localInstance;
-    }
-
-    public MessagesController() {
-        ImageLoader.getInstance();
-        MessagesStorage.getInstance();
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidUpload);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailUpload);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
-        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByServer);
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-
-        preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
-        maxGroupCount = preferences.getInt("maxGroupCount", 200);
-        maxBroadcastCount = preferences.getInt("maxBroadcastCount", 100);
-        groupBigSize = preferences.getInt("groupBigSize", 10);
-        fontSize = preferences.getInt("fons_size", AndroidUtilities.isTablet() ? 18 : 16);
-        String disabledFeaturesString = preferences.getString("disabledFeatures", null);
-    }
-
-    public void updateConfig(final String config) {
-    }
-
-    public static boolean isFeatureEnabled(String feature, BaseFragment fragment) {
-        return true;
-    }
-
-
-    @Override
-    public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.FileDidUpload) {
-            final String location = (String) args[0];
-
-        } else if (id == NotificationCenter.FileDidFailUpload) {
-
-        } else if (id == NotificationCenter.messageReceivedByServer) {
-        }
-    }
-
-    public void cleanUp() {
-        ContactsController.getInstance().cleanup();
-        MediaController.getInstance().cleanup();
-
-        totalDialogsCount = 0;
-        loadingDialogs = false;
-        dialogsEndReached = false;
-        gettingDifference = false;
-        gettingDifferenceAgain = false;
-        firstGettingTask = false;
-        updatingState = false;
-        registeringForPush = false;
-
-        if (currentDeleteTaskRunnable != null) {
-            Utilities.stageQueue.cancelRunnable(currentDeleteTaskRunnable);
-            currentDeleteTaskRunnable = null;
-        }
-
-    }
-
-
-    public void unregistedPush() {
-        if (UserConfig.registeredForPush && UserConfig.pushString.length() == 0) {
-
-        }
-    }
-
-    public void performLogout(boolean byUser) {
-        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-        SharedPreferences.Editor editor = preferences.edit();
-        editor.clear().commit();
-        if (byUser) {
-            unregistedPush();
-        } else {
-            ConnectionsManager.getInstance().cleanUp();
-        }
-        UserConfig.clearConfig();
-        NotificationCenter.getInstance().postNotificationName(NotificationCenter.appDidLogout);
-        MessagesStorage.getInstance().cleanUp(false);
-        cleanUp();
-//        ContactsController.getInstance().deleteAllAppAccounts();
-    }
-
-
-    public void registerForPush(final String regid) {
-        if (regid == null || regid.length() == 0 || registeringForPush || UserConfig.getClientUserId() == null) {
-            return;
-        }
-        if (UserConfig.registeredForPush && regid.equals(UserConfig.pushString)) {
-            return;
-        }
-        registeringForPush = true;
-
-    }
-
-
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
index 643fd0a25..ea6c1e9da 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
@@ -9,9 +9,7 @@
 package org.telegram.messenger;
 
 import android.app.Activity;
-import android.app.AlarmManager;
 import android.app.Application;
-import android.app.PendingIntent;
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
@@ -20,20 +18,17 @@
 import android.content.res.Configuration;
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
-import android.os.AsyncTask;
 import android.os.Build;
 import android.os.Handler;
 import android.os.PowerManager;
 
 import com.google.android.gms.common.ConnectionResult;
 import com.google.android.gms.common.GooglePlayServicesUtil;
-import com.google.android.gms.gcm.GoogleCloudMessaging;
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ContactsController;
-import org.telegram.android.MediaController;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
+import org.telegram.android.MediaController;
 import org.telegram.android.NativeLoader;
 import org.telegram.android.PostsController;
 import org.telegram.android.ScreenReceiver;
@@ -44,13 +39,6 @@
 
 public class ApplicationLoader extends Application {
 
-    private GoogleCloudMessaging gcm;
-    private AtomicInteger msgId = new AtomicInteger();
-    private String regid;
-    public static final String EXTRA_MESSAGE = "message";
-    public static final String PROPERTY_REG_ID = "registration_id";
-    private static final String PROPERTY_APP_VERSION = "appVersion";
-    private static final int PLAY_SERVICES_RESOLUTION_REQUEST = 9000;
     private static Drawable cachedWallpaper;
     private static int selectedColor;
     private static boolean isCustomTheme;
@@ -156,7 +144,8 @@ public static void postInitApplication() {
         }
 
         UserConfig.loadConfig();
-        MessagesController.getInstance();
+        //init instance
+        PostsController.getInstance();
         if (UserConfig.getCurrentUser() != null) {
             PostsController.getInstance().setUser(UserConfig.getCurrentUser());
 //            ConnectionsManager.getInstance().applyCountryPortNumber(UserConfig.getCurrentUser().phone);
@@ -205,14 +194,7 @@ public void onConfigurationChanged(Configuration newConfig) {
 
     private void initPlayServices() {
         if (checkPlayServices()) {
-            gcm = GoogleCloudMessaging.getInstance(this);
-            regid = getRegistrationId();
 
-            if (regid.length() == 0) {
-                registerInBackground();
-            } else {
-                sendRegistrationIdToBackend(false);
-            }
         } else {
             FileLog.d("tmessages", "No valid Google Play Services APK found.");
         }
@@ -232,90 +214,9 @@ private boolean checkPlayServices() {
         return true;*/
     }
 
-    private String getRegistrationId() {
-        final SharedPreferences prefs = getGCMPreferences(applicationContext);
-        String registrationId = prefs.getString(PROPERTY_REG_ID, "");
-        if (registrationId.length() == 0) {
-            FileLog.d("tmessages", "Registration not found.");
-            return "";
-        }
-        int registeredVersion = prefs.getInt(PROPERTY_APP_VERSION, Integer.MIN_VALUE);
-        if (registeredVersion != BuildVars.BUILD_VERSION) {
-            FileLog.d("tmessages", "App version changed.");
-            return "";
-        }
-        return registrationId;
-    }
 
     private SharedPreferences getGCMPreferences(Context context) {
         return getSharedPreferences(ApplicationLoader.class.getSimpleName(), Context.MODE_PRIVATE);
     }
 
-    private void registerInBackground() {
-        AsyncTask<String, String, Boolean> task = new AsyncTask<String, String, Boolean>() {
-            @Override
-            protected Boolean doInBackground(String... objects) {
-                if (gcm == null) {
-                    gcm = GoogleCloudMessaging.getInstance(applicationContext);
-                }
-                int count = 0;
-                while (count < 1000) {
-                    try {
-                        count++;
-                        regid = gcm.register(BuildVars.GCM_SENDER_ID);
-                        sendRegistrationIdToBackend(true);
-                        storeRegistrationId(applicationContext, regid);
-                        return true;
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                    }
-                    try {
-                        if (count % 20 == 0) {
-                            Thread.sleep(60000 * 30);
-                        } else {
-                            Thread.sleep(5000);
-                        }
-                    } catch (InterruptedException e) {
-                        FileLog.e("tmessages", e);
-                    }
-                }
-                return false;
-            }
-        };
-
-        if (android.os.Build.VERSION.SDK_INT >= 11) {
-            task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, null, null, null);
-        } else {
-            task.execute(null, null, null);
-        }
-    }
-
-    private void sendRegistrationIdToBackend(final boolean isNew) {
-        Utilities.stageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                UserConfig.pushString = regid;
-                UserConfig.registeredForPush = !isNew;
-                UserConfig.saveConfig(false);
-                if (UserConfig.getClientUserId() != null) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            MessagesController.getInstance().registerForPush(regid);
-                        }
-                    });
-                }
-            }
-        });
-    }
-
-    private void storeRegistrationId(Context context, String regId) {
-        final SharedPreferences prefs = getGCMPreferences(context);
-        int appVersion = BuildVars.BUILD_VERSION;
-        FileLog.e("tmessages", "Saving regId on app version " + appVersion);
-        SharedPreferences.Editor editor = prefs.edit();
-        editor.putString(PROPERTY_REG_ID, regId);
-        editor.putInt(PROPERTY_APP_VERSION, appVersion);
-        editor.commit();
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
index ead3e936a..86ae601ab 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
@@ -19,9 +19,7 @@
 import android.util.Base64;
 
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
 import org.telegram.android.NotificationCenter;
 
 import java.io.File;
@@ -2520,7 +2518,7 @@ public void tcpConnectionQuiackAckReceived(TcpConnection connection, int ack) {
 
     private void finishUpdatingState(TcpConnection connection) {
         if (connection.getDatacenterId() == currentDatacenterId && (connection.transportRequestClass & RPCRequest.RPCRequestClassGeneric) != 0) {
-            if (ConnectionsManager.getInstance().connectionState == 3 && !MessagesController.getInstance().gettingDifference && !MessagesController.getInstance().gettingDifferenceAgain) {
+            if (ConnectionsManager.getInstance().connectionState == 3) {
                 ConnectionsManager.getInstance().connectionState = 0;
                 final int stateCopy = ConnectionsManager.getInstance().connectionState;
                 AndroidUtilities.runOnUIThread(new Runnable() {
@@ -2686,25 +2684,6 @@ public TLObject getRequestWithMessageId(long msgId) {
         return null;
     }
 
-    //================================================================================
-    // Move to datacenter manage
-    //================================================================================
-
-
-
-
-
-    void authorizedOnMovingDatacenter() {
-        Datacenter datacenter = datacenterWithId(currentDatacenterId);
-        if (datacenter != null && datacenter.connection != null) {
-            datacenter.connection.suspendConnection(true);
-        }
-        movingAuthorization = null;
-        currentDatacenterId = movingToDatacenterId;
-        movingToDatacenterId = DEFAULT_DATACENTER_ID;
-        saveSession();
-        processRequestQueue(0, 0);
-    }
 
     //================================================================================
     // Actors manage
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/BackupImageView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/BackupImageView.java
index 68e7a966d..1022a04a7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/BackupImageView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/BackupImageView.java
@@ -45,43 +45,43 @@ private void init() {
         imageReceiver = new ImageReceiver(this);
     }
 
-    public void setImage(TLObject path, String filter, String ext, Drawable thumb) {
-        setImage(path, null, filter, thumb, null, null, null, ext, 0);
+    public void setImage(String path, String filter, String ext, Drawable thumb) {
+        setImage(null, filter, thumb, null, null, ext, 0);
     }
 
-    public void setImage(TLObject path, String filter, Drawable thumb) {
-        setImage(path, null, filter, thumb, null, null, null, null, 0);
+    public void setImage(String filter, Drawable thumb) {
+        setImage(null, filter, thumb, null, null, null, 0);
     }
 
-    public void setImage(TLObject path, String filter, Bitmap thumb) {
-        setImage(path, null, filter, null, thumb, null, null, null, 0);
+    public void setImage(String filter, Bitmap thumb) {
+        setImage(null, filter, null, thumb, null, null, 0);
     }
 
-    public void setImage(TLObject path, String filter, Drawable thumb, int size) {
-        setImage(path, null, filter, thumb, null, null, null, null, size);
+    public void setImage(String filter, Drawable thumb, int size) {
+        setImage(null, filter, thumb, null, null, null, size);
     }
 
-    public void setImage(TLObject path, String filter, Bitmap thumb, int size) {
-        setImage(path, null, filter, null, thumb, null, null, null, size);
+    public void setImage(String filter, Bitmap thumb, int size) {
+        setImage(null, filter, null, thumb, null, null, size);
     }
 
-    public void setImage(TLObject path, String filter, TLRPC.FileLocation thumb, int size) {
-        setImage(path, null, filter, null, null, thumb, null, null, size);
+    public void setImage(String filter, int size) {
+        setImage(null, filter, null, null, null, null, size);
     }
 
     public void setImage(String path, String filter, Drawable thumb) {
-        setImage(null, path, filter, thumb, null, null, null, null, 0);
+        setImage(path, filter, thumb, null, null, null, 0);
     }
 
     public void setOrientation(int angle, boolean center) {
         imageReceiver.setOrientation(angle, center);
     }
 
-    public void setImage(TLObject path, String httpUrl, String filter, Drawable thumb, Bitmap thumbBitmap, TLRPC.FileLocation thumbLocation, String thumbFilter, String ext, int size) {
+    public void setImage(String httpUrl, String filter, Drawable thumb, Bitmap thumbBitmap, String thumbFilter, String ext, int size) {
         if (thumbBitmap != null) {
             thumb = new BitmapDrawable(null, thumbBitmap);
         }
-        imageReceiver.setImage(path, httpUrl, filter, thumb, thumbLocation, thumbFilter, size, ext, false);
+        imageReceiver.setImage(httpUrl, filter, thumb, thumbFilter, size, ext, false);
     }
 
     public void setImageBitmap(Bitmap bitmap) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index e6fa0d310..db247154a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -39,25 +39,23 @@
 import android.widget.RelativeLayout;
 import android.widget.Toast;
 
-import org.telegram.android.AndroidUtilities;
 import org.telegram.PhoneFormat.PhoneFormat;
+import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ContactsController;
-import org.telegram.android.MessagesController;
-import org.telegram.android.MessagesStorage;
+import org.telegram.android.LocaleController;
+import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
-import org.telegram.android.LocaleController;
-import org.telegram.android.NotificationCenter;
 import org.telegram.messenger.R;
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.UserConfig;
-import org.telegram.ui.Adapters.DrawerLayoutAdapter;
 import org.telegram.ui.ActionBar.ActionBarLayout;
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.ActionBar.DrawerLayoutContainer;
+import org.telegram.ui.Adapters.DrawerLayoutAdapter;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.PasscodeView;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivityAragats.java b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivityAragats.java
index 021e0a6f8..117663949 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivityAragats.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivityAragats.java
@@ -15,11 +15,8 @@
 import android.content.Intent;
 import android.graphics.Outline;
 import android.location.Location;
-import android.location.LocationListener;
-import android.location.LocationManager;
 import android.net.Uri;
 import android.os.Build;
-import android.os.Bundle;
 import android.text.TextUtils;
 import android.util.TypedValue;
 import android.view.Gravity;
@@ -49,10 +46,8 @@
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
 import org.telegram.android.NotificationCenter;
 import org.telegram.android.location.LocationManagerHelper;
-import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
@@ -817,9 +812,9 @@ public void setPost(Post post) {
     public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.updateInterfaces) {
             int mask = (Integer) args[0];
-            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
-                updateUserData();
-            }
+//            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
+//                updateUserData();
+//            }
         } else if (id == NotificationCenter.closeChats) {
             removeSelfFromStack();
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
index ec08d1555..21c440435 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
@@ -46,7 +46,6 @@
 import org.telegram.android.ImageReceiver;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MediaController;
-import org.telegram.android.MessagesController;
 import org.telegram.android.NotificationCenter;
 import org.telegram.android.PostsController;
 import org.telegram.android.support.widget.LinearLayoutManager;
@@ -60,7 +59,6 @@
 import org.telegram.messenger.dto.Post;
 import org.telegram.messenger.dto.Venue;
 import org.telegram.messenger.service.mock.PostServiceMock;
-import org.telegram.messenger.service.mock.VenueServiceMock;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
