diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
index d63585aaa..918027abf 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
@@ -499,4 +499,15 @@ static   public String getUserId() {
         }
     }
 
+
+    static public boolean getContactNotModified() {
+        if ( !preferenceManager.contains("ContactNotModified")) {
+            SharedPreferences.Editor PrefEdit = preferenceManager.edit();
+            PrefEdit.putBoolean("ContactNotModified",   true);
+            PrefEdit.commit();
+            return false ;
+        }else {
+            return true ;
+        }
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java b/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java
index 3e8b51257..fa603adde 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ContactsController.java
@@ -23,9 +23,20 @@
 import android.provider.BaseColumns;
 import android.provider.ContactsContract;
 import android.text.TextUtils;
+import android.util.Log;
 import android.util.SparseArray;
 
+import com.google.gson.JsonArray;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParser;
+import com.google.gson.JsonPrimitive;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
 import org.telegram.PhoneFormat.PhoneFormat;
+import org.telegram.messenger.shamChat.Components.msaOkHttp;
+import org.telegram.messenger.shamChat.Constant;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.RequestDelegate;
 import org.telegram.tgnet.TLObject;
@@ -47,7 +58,7 @@
     private final Object observerLock = new Object();
     public boolean contactsLoaded = false;
     private boolean contactsBookLoaded = false;
-    private String lastContactsVersions = "";
+    private String lastContactsVersions = "A";
     private ArrayList<Integer> delayedContactsUpdate = new ArrayList<>();
     private String inviteText;
     private boolean updatingInviteText = false;
@@ -70,30 +81,43 @@
         public String last_name;
     }
 
+
     private String[] projectionPhones = {
             ContactsContract.CommonDataKinds.Phone.CONTACT_ID,
             ContactsContract.CommonDataKinds.Phone.NUMBER,
             ContactsContract.CommonDataKinds.Phone.TYPE,
             ContactsContract.CommonDataKinds.Phone.LABEL
     };
+
+
     private String[] projectionNames = {
+
             ContactsContract.CommonDataKinds.StructuredName.CONTACT_ID,
             ContactsContract.CommonDataKinds.StructuredName.GIVEN_NAME,
             ContactsContract.CommonDataKinds.StructuredName.FAMILY_NAME,
             ContactsContract.Data.DISPLAY_NAME,
             ContactsContract.CommonDataKinds.StructuredName.MIDDLE_NAME
+
     };
 
+
+
     public HashMap<Integer, Contact> contactsBook = new HashMap<>();
+
     public HashMap<String, Contact> contactsBookSPhones = new HashMap<>();
+
     public ArrayList<Contact> phoneBookContacts = new ArrayList<>();
 
     public ArrayList<TLRPC.TL_contact> contacts = new ArrayList<>();
+
     public SparseArray<TLRPC.TL_contact> contactsDict = new SparseArray<>();
+
     public HashMap<String, ArrayList<TLRPC.TL_contact>> usersSectionsDict = new HashMap<>();
+
     public ArrayList<String> sortedUsersSectionsArray = new ArrayList<>();
 
     public HashMap<String, ArrayList<TLRPC.TL_contact>> usersMutualSectionsDict = new HashMap<>();
+
     public ArrayList<String> sortedUsersMutualSectionsArray = new ArrayList<>();
 
     public HashMap<String, TLRPC.TL_contact> contactsByPhone = new HashMap<>();
@@ -296,6 +320,7 @@ public void run() {
     }
 
     private boolean checkContactsInternal() {
+
         boolean reload = false;
         try {
             if (!hasContactsPermission()) {
@@ -769,6 +794,8 @@ public void run() {
 
                 FileLog.e("tmessages", "done processing contacts");
 
+
+
                 if (request) {
                     if (!toImport.isEmpty()) {
                         /*if (BuildVars.DEBUG_VERSION) {
@@ -784,10 +811,129 @@ public void run() {
                         for (int a = 0; a < count; a++) {
                             ArrayList<TLRPC.TL_inputPhoneContact> finalToImport = new ArrayList<>();
                             finalToImport.addAll(toImport.subList(a * 500, Math.min((a + 1) * 500, toImport.size())));
-                            TLRPC.TL_contacts_importContacts req = new TLRPC.TL_contacts_importContacts();
+                            final TLRPC.TL_contacts_importContacts req = new TLRPC.TL_contacts_importContacts();
                             req.contacts = finalToImport;
+
                             req.replace = false;
-                            ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
+
+
+
+                            final JsonArray jsonReq = new JsonArray() ;
+
+                            for (int m =0 ; m < req.contacts.size() ; m++) {
+                                JsonPrimitive element = new JsonPrimitive(req.contacts.get(m).phone);
+                                jsonReq.add( element ); ;
+                            }
+
+                            JsonObject objectreq = new JsonObject() ;
+
+                            objectreq.add("phone_numbers" , jsonReq );
+
+
+                                new msaOkHttp().with().url(Constant.SyncContact)
+                                        .addPostParams("contacts" , objectreq.toString() )
+                                        .setOnResalt(new msaOkHttp.onResalt() {
+                                    @Override
+                                    public void onComplete(String result) throws Throwable {
+                                        JsonArray Objecs =  new JsonParser().parse(result).getAsJsonObject().getAsJsonArray("objects");
+                                        completedRequestsCount++;
+
+                                        TLRPC.TL_contacts_importedContacts res = new TLRPC.TL_contacts_importedContacts() ;
+                                        for (int m=0 ; m < jsonReq.size() ; m++) {
+                                                for (int y = 0 ; y < Objecs.size() ; y++ ) {
+                                                            boolean remove = true  ;
+                                                            if ( jsonReq.get(m).getAsString().contains( Objecs.get(y).getAsJsonObject().get("phone").getAsString().substring(2)) ) {
+                                                                remove = false ;
+                                                                TLRPC.User user = new TLRPC.TL_user() ;
+                                                                user.id = Objecs.get(y).getAsJsonObject().get("user_id").getAsInt() ;
+                                                                user.username = Objecs.get(y).getAsJsonObject().get("username").getAsString() ;
+                                                                user.phone = Objecs.get(y).getAsJsonObject().get("phone").getAsString() ;
+                                                                user.contact = true ;
+                                                                user.mutual_contact = true ;
+                                                                user.first_name = Objecs.get(y).getAsJsonObject().get("username").getAsString() ;
+                                                                /**
+                                                                 *
+                                                                 * init user information .
+                                                                 *
+                                                                 */
+                                                                res.users.add(user) ;
+
+                                                                TLRPC.TL_importedContact tl_importedContact = new TLRPC.TL_importedContact() ;
+                                                                tl_importedContact.client_id = req.contacts.get(m).client_id ;
+                                                                tl_importedContact.user_id = Objecs.get(y).getAsJsonObject().get("user_id").getAsInt() ;
+
+                                                                res.imported.add(tl_importedContact) ;
+                                                            }
+                                                    if (remove) {
+                                                        contactsMapToSave.remove(req.contacts.get(m).client_id);
+                                                    }
+                                                }
+                                        }
+                                        if (completedRequestsCount == count && !contactsMapToSave.isEmpty()) {
+                                            MessagesStorage.getInstance().putCachedPhoneBook(contactsMapToSave);
+                                        }
+
+                                        MessagesStorage.getInstance().putUsersAndChats(res.users, null, true, true);
+                                        ArrayList<TLRPC.TL_contact> cArr = new ArrayList<>();
+                                        for (int a = 0; a < res.imported.size(); a++) {
+                                            TLRPC.TL_contact contact = new TLRPC.TL_contact();
+                                            contact.user_id = res.imported.get(a).user_id;
+                                            cArr.add(contact);
+                                        }
+                                        processLoadedContacts(cArr, res.users, 2);
+
+
+
+                                        if (completedRequestsCount == count) {
+                                            Utilities.stageQueue.postRunnable(new Runnable() {
+                                                @Override
+                                                public void run() {
+                                                    contactsBookSPhones = contactsBookShort;
+                                                    contactsBook = contactsMap;
+                                                    contactsSyncInProgress = false;
+                                                    contactsBookLoaded = true;
+                                                    if (first) {
+                                                        contactsLoaded = true;
+                                                    }
+                                                    if (!delayedContactsUpdate.isEmpty() && contactsLoaded) {
+                                                        applyContactsUpdates(delayedContactsUpdate, null, null, null);
+                                                        delayedContactsUpdate.clear();
+                                                    }
+                                                }
+                                            });
+                                        }
+
+
+                                    }
+
+                                    @Override
+                                    public void onFailure(Throwable throwable, msaOkHttp Conn) {
+
+                                        if (completedRequestsCount == count) {
+                                            Utilities.stageQueue.postRunnable(new Runnable() {
+                                                @Override
+                                                public void run() {
+                                                    contactsBookSPhones = contactsBookShort;
+                                                    contactsBook = contactsMap;
+                                                    contactsSyncInProgress = false;
+                                                    contactsBookLoaded = true;
+                                                    if (first) {
+                                                        contactsLoaded = true;
+                                                    }
+                                                    if (!delayedContactsUpdate.isEmpty() && contactsLoaded) {
+                                                        applyContactsUpdates(delayedContactsUpdate, null, null, null);
+                                                        delayedContactsUpdate.clear();
+                                                    }
+                                                }
+                                            });
+                                        }
+
+                                    }
+                                }).Run() ;
+
+
+
+                            /** ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
                                 @Override
                                 public void run(TLObject response, TLRPC.TL_error error) {
                                     completedRequestsCount++;
@@ -805,11 +951,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                                             MessagesStorage.getInstance().putCachedPhoneBook(contactsMapToSave);
                                         }
 
-                                        /*if (BuildVars.DEBUG_VERSION) {
-                                            for (TLRPC.User user : res.users) {
-                                                FileLog.e("tmessages", "received user " + user.first_name + " " + user.last_name + " " + user.phone);
-                                            }
-                                        }*/
+
                                         MessagesStorage.getInstance().putUsersAndChats(res.users, null, true, true);
                                         ArrayList<TLRPC.TL_contact> cArr = new ArrayList<>();
                                         for (int a = 0; a < res.imported.size(); a++) {
@@ -841,6 +983,7 @@ public void run() {
                                     }
                                 }
                             }, ConnectionsManager.RequestFlagFailOnServerErrors | ConnectionsManager.RequestFlagCanCompress);
+               **/
                         }
                     } else {
                         Utilities.stageQueue.postRunnable(new Runnable() {
@@ -906,16 +1049,78 @@ public void loadContacts(boolean fromCache, boolean cacheEmpty) {
             FileLog.e("tmessages", "load contacts from cache");
             MessagesStorage.getInstance().getContacts();
         } else {
-            FileLog.e("tmessages", "load contacts from server");
+
+
+            new msaOkHttp().with().url(Constant.GetContact + ApplicationLoader.getUserId())
+                    .setOnResalt(new msaOkHttp.onResalt() {
+                        @Override
+                        public void onComplete(String result) throws Throwable {
+
+                            TLRPC.contacts_Contacts res = new TLRPC.contacts_Contacts();
+                            JSONArray Objects = new JSONObject(result).getJSONArray("objects") ;
+
+                            for (int i=0 ; i < Objects.length() ; i++) {
+                                JSONObject Object = Objects.getJSONObject(i) ;
+                                TLRPC.User user  =   new TLRPC.User() ;
+                                user.contact = true;
+                                user.mutual_contact = true ;
+                                user.phone = Object.getString("phone") ;
+                                user.id = Object.getInt("user_id") ;
+                                user.username = Object.getString("username") ;
+                                user.first_name = Object.getString("username") ;
+                                /**
+                                 *
+                                 * init user information .
+                                 *
+                                 */
+                                TLRPC.TL_contact contact =  new TLRPC.TL_contact() ;
+                                contact.mutual = true ;
+                                contact.user_id = Object.getInt("user_id") ;
+
+                                res.contacts.add(contact)  ;
+                                res.users.add(user) ;
+                            }
+
+                            if (ApplicationLoader.getContactNotModified()) {
+                                contactsLoaded = true ;
+                                if (!delayedContactsUpdate.isEmpty() && contactsBookLoaded) {
+                                    applyContactsUpdates(delayedContactsUpdate, null, null, null);
+                                    delayedContactsUpdate.clear();
+                                }
+                                AndroidUtilities.runOnUIThread(new Runnable() {
+                                    @Override
+                                    public void run() {
+                                        synchronized (loadContactsSync) {
+                                            loadingContacts = false;
+                                        }
+                                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.contactsDidLoaded);
+                                    }
+                                });
+                                FileLog.e("tmessages", "load contacts don't change");
+                                return;
+                            }
+                            processLoadedContacts(res.contacts, res.users, 0);
+
+                        }
+
+                        @Override
+                        public void onFailure(Throwable throwable, msaOkHttp Conn) {
+
+                        }
+                    }).Run(); ;
+
+
+        /**    FileLog.e("tmessages", "load contacts from server");
             TLRPC.TL_contacts_getContacts req = new TLRPC.TL_contacts_getContacts();
             req.hash = cacheEmpty ? "" : UserConfig.contactsHash;
             ConnectionsManager.getInstance().sendRequest(req, new RequestDelegate() {
                 @Override
                 public void run(TLObject response, TLRPC.TL_error error) {
                     if (error == null) {
+
                         TLRPC.contacts_Contacts res = (TLRPC.contacts_Contacts) response;
                         if (res instanceof TLRPC.TL_contacts_contactsNotModified) {
-                            contactsLoaded = true;
+                            contactsLoaded = true ;
                             if (!delayedContactsUpdate.isEmpty() && contactsBookLoaded) {
                                 applyContactsUpdates(delayedContactsUpdate, null, null, null);
                                 delayedContactsUpdate.clear();
@@ -935,7 +1140,8 @@ public void run() {
                         processLoadedContacts(res.contacts, res.users, 0);
                     }
                 }
-            });
+            }); **/
+
         }
     }
 
@@ -1331,6 +1537,8 @@ private boolean hasContactsPermission() {
             }
         }
         return true;
+
+
     }
 
     private void performWriteContactsToPhoneBookInternal(ArrayList<TLRPC.TL_contact> contactsArray) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/Constant.java b/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/Constant.java
index 53f420637..115129dd9 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/Constant.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/shamChat/Constant.java
@@ -70,6 +70,9 @@ private Constant(){}
 	public static final String RegisterPhoneResend		= Domain+"/groups/api/v1/auth/resend/verify/";
 	public static final String RenameTopic		= Domain+"/groups/api/v1/topics/change/name/";
 	public static final String DeleteTopic		= Domain+"/groups/api/v1/topics/delete/";
+	public static final String GetContact		= Domain+"/groups/api/v1/contact/get/" ;
+	public static final String SyncContact		= Domain+"/groups/api/v1/contacts/sync/" ;
+
 
 
 
