diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/dto/Config.java b/TMessagesProj/src/main/java/org/telegram/messenger/dto/Config.java
new file mode 100644
index 000000000..d834bf9dc
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/dto/Config.java
@@ -0,0 +1,9 @@
+package org.telegram.messenger.dto;
+
+/**
+ * Created by aragats on 29/12/14.
+ */
+public class Config {
+
+    public int mockConfValue = 0;
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/dto/Coordinates.java b/TMessagesProj/src/main/java/org/telegram/messenger/dto/Coordinates.java
new file mode 100644
index 000000000..38fa0481b
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/dto/Coordinates.java
@@ -0,0 +1,29 @@
+package org.telegram.messenger.dto;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Created by aragats on 09/05/15.
+ */
+public class Coordinates {
+    //TODO enum. probably.
+    private String type;
+    private List<Double> coordinates = new ArrayList<Double>();
+
+    public String getType() {
+        return type;
+    }
+
+    public void setType(String type) {
+        this.type = type;
+    }
+
+    public List<Double> getCoordinates() {
+        return coordinates;
+    }
+
+    public void setCoordinates(List<Double> coordinates) {
+        this.coordinates = coordinates;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/dto/Image.java b/TMessagesProj/src/main/java/org/telegram/messenger/dto/Image.java
new file mode 100644
index 000000000..294c485db
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/dto/Image.java
@@ -0,0 +1,66 @@
+package org.telegram.messenger.dto;
+
+import android.graphics.Bitmap;
+
+/**
+ * Created by aragats on 09/05/15.
+ */
+public class Image {
+
+    private String url;
+    private int width;
+    private int height;
+    private long size;
+    //TODO enum
+    private String type;
+    // TODO TEMP. Use other Image class.
+    private Bitmap bitmap;
+
+    public String getUrl() {
+        return url;
+    }
+
+    public void setUrl(String url) {
+        this.url = url;
+    }
+
+    public int getWidth() {
+        return width;
+    }
+
+    public void setWidth(int width) {
+        this.width = width;
+    }
+
+    public int getHeight() {
+        return height;
+    }
+
+    public void setHeight(int height) {
+        this.height = height;
+    }
+
+    public long getSize() {
+        return size;
+    }
+
+    public void setSize(long size) {
+        this.size = size;
+    }
+
+    public String getType() {
+        return type;
+    }
+
+    public void setType(String type) {
+        this.type = type;
+    }
+
+    public Bitmap getBitmap() {
+        return bitmap;
+    }
+
+    public void setBitmap(Bitmap bitmap) {
+        this.bitmap = bitmap;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/dto/Post.java b/TMessagesProj/src/main/java/org/telegram/messenger/dto/Post.java
new file mode 100644
index 000000000..145807b46
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/dto/Post.java
@@ -0,0 +1,89 @@
+package org.telegram.messenger.dto;
+
+import android.text.StaticLayout;
+
+import ru.aragats.whats.TLRPC;
+
+/**
+ * Created by aragats on 27/12/14.
+ */
+public class Post {
+
+    private String id;
+    private String message;
+    private Venue venue;
+    private User user;
+    private Coordinates coordinates;
+    private Image previewImage;
+    private Image image;
+    private long createdDate;
+
+
+    public Post() {
+
+    }
+
+    public String getId() {
+        return id;
+    }
+
+    public void setId(String id) {
+        this.id = id;
+    }
+
+    public String getMessage() {
+        return message;
+    }
+
+    public void setMessage(String message) {
+        this.message = message;
+    }
+
+    public Venue getVenue() {
+        return venue;
+    }
+
+    public void setVenue(Venue venue) {
+        this.venue = venue;
+    }
+
+    public User getUser() {
+        return user;
+    }
+
+    public void setUser(User user) {
+        this.user = user;
+    }
+
+    public Coordinates getCoordinates() {
+        return coordinates;
+    }
+
+    public void setCoordinates(Coordinates coordinates) {
+        this.coordinates = coordinates;
+    }
+
+    public Image getPreviewImage() {
+        return previewImage;
+    }
+
+    public void setPreviewImage(Image previewImage) {
+        this.previewImage = previewImage;
+    }
+
+    public Image getImage() {
+        return image;
+    }
+
+    public void setImage(Image image) {
+        this.image = image;
+    }
+
+    public long getCreatedDate() {
+        return createdDate;
+    }
+
+    public void setCreatedDate(long createdDate) {
+        this.createdDate = createdDate;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/dto/PostResponse.java b/TMessagesProj/src/main/java/org/telegram/messenger/dto/PostResponse.java
new file mode 100644
index 000000000..d582e2de2
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/dto/PostResponse.java
@@ -0,0 +1,23 @@
+package org.telegram.messenger.dto;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import ru.aragats.android.object.PostObject;
+
+/**
+ * Created by aragats on 09/05/15.
+ */
+public class PostResponse {
+    private List<Post> posts = new ArrayList<>();
+
+
+
+    public List<Post> getPosts() {
+        return posts;
+    }
+
+    public void setPosts(List<Post> posts) {
+        this.posts = posts;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/dto/User.java b/TMessagesProj/src/main/java/org/telegram/messenger/dto/User.java
new file mode 100644
index 000000000..70cfd87c2
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/dto/User.java
@@ -0,0 +1,70 @@
+package org.telegram.messenger.dto;
+
+/**
+ * Created by aragats on 09/05/15.
+ */
+public class User {
+    private String id;
+    private String username;
+    private String firstName;
+    private String lastName;
+    private String email;
+    private Image previewImage;
+    private Image image;
+
+    public String getId() {
+        return id;
+    }
+
+    public void setId(String id) {
+        this.id = id;
+    }
+
+    public String getUsername() {
+        return username;
+    }
+
+    public void setUsername(String username) {
+        this.username = username;
+    }
+
+    public String getFirstName() {
+        return firstName;
+    }
+
+    public void setFirstName(String firstName) {
+        this.firstName = firstName;
+    }
+
+    public String getLastName() {
+        return lastName;
+    }
+
+    public void setLastName(String lastName) {
+        this.lastName = lastName;
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    public Image getPreviewImage() {
+        return previewImage;
+    }
+
+    public void setPreviewImage(Image previewImage) {
+        this.previewImage = previewImage;
+    }
+
+    public Image getImage() {
+        return image;
+    }
+
+    public void setImage(Image image) {
+        this.image = image;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/dto/Venue.java b/TMessagesProj/src/main/java/org/telegram/messenger/dto/Venue.java
new file mode 100644
index 000000000..779de236a
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/dto/Venue.java
@@ -0,0 +1,81 @@
+package org.telegram.messenger.dto;
+
+/**
+ * Created by aragats on 09/05/15.
+ */
+public class Venue {
+    private String id;
+    private String foursquareId;
+    private String name;
+    //Text representation of address
+    private String address;
+    private Coordinates coordinates;
+    // distance in meters;
+    private int distance;
+    private Image previewImage;
+    private Image image;
+
+    public String getId() {
+        return id;
+    }
+
+    public void setId(String id) {
+        this.id = id;
+    }
+
+    public String getFoursquareId() {
+        return foursquareId;
+    }
+
+    public void setFoursquareId(String foursquareId) {
+        this.foursquareId = foursquareId;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address;
+    }
+
+    public Coordinates getCoordinates() {
+        return coordinates;
+    }
+
+    public void setCoordinates(Coordinates coordinates) {
+        this.coordinates = coordinates;
+    }
+
+    public int getDistance() {
+        return distance;
+    }
+
+    public void setDistance(int distance) {
+        this.distance = distance;
+    }
+
+    public Image getPreviewImage() {
+        return previewImage;
+    }
+
+    public void setPreviewImage(Image previewImage) {
+        this.previewImage = previewImage;
+    }
+
+    public Image getImage() {
+        return image;
+    }
+
+    public void setImage(Image image) {
+        this.image = image;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/dto/VenueResponse.java b/TMessagesProj/src/main/java/org/telegram/messenger/dto/VenueResponse.java
new file mode 100644
index 000000000..7f29f0221
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/dto/VenueResponse.java
@@ -0,0 +1,20 @@
+package org.telegram.messenger.dto;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Created by aragats on 10/05/15.
+ */
+public class VenueResponse {
+    private List<Venue> venues = new ArrayList<>();
+
+
+    public List<Venue> getVenues() {
+        return venues;
+    }
+
+    public void setVenues(List<Venue> venues) {
+        this.venues = venues;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/CoordinatesServiceMock.java b/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/CoordinatesServiceMock.java
new file mode 100644
index 000000000..9473cceec
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/CoordinatesServiceMock.java
@@ -0,0 +1,43 @@
+package org.telegram.messenger.service.mock;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Random;
+
+import ru.aragats.whats.dto.Coordinates;
+
+/**
+ * Created by aragats on 10/05/15.
+ */
+public class CoordinatesServiceMock {
+
+    public static List<Coordinates> coordinatesList = new ArrayList<>();
+
+    static {
+        coordinatesList.addAll(generateCoordinatesList(5));
+
+    }
+
+    public static Coordinates generateCoordinates() {
+        Coordinates result = new Coordinates();
+        result.setType("Point");
+        Random random = new Random();
+        result.setCoordinates(Arrays.asList(180 * random.nextDouble(), 90 * random.nextDouble()));
+        return result;
+    }
+
+    public static List<Coordinates> generateCoordinatesList(int count) {
+        List<Coordinates> result = new ArrayList<>();
+        for (int i = 0; i < count; i++) {
+            result.add(generateCoordinates());
+        }
+        return result;
+
+    }
+
+    public static Coordinates getRandomCoordinates() {
+        return coordinatesList.get(new Random().nextInt(coordinatesList.size()));
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/ImageServiceMock.java b/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/ImageServiceMock.java
new file mode 100644
index 000000000..a66de29c3
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/ImageServiceMock.java
@@ -0,0 +1,50 @@
+package org.telegram.messenger.service.mock;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
+import ru.aragats.whats.dto.Image;
+
+/**
+ * Created by aragats on 09/05/15.
+ */
+public class ImageServiceMock {
+    private static List<String> imageURLs = new ArrayList<>();
+    private static List<Image> images = new ArrayList<>();
+
+    static {
+        images.addAll(generateImages());
+    }
+
+
+    public static List<Image> generateImages() {
+        List<Image> images = new ArrayList<>();
+        images.add(generateImage1());
+        images.add(generateImage2());
+        return images;
+
+    }
+
+    public static Image generateImage1() {
+        Image result = new Image();
+        result.setSize(0);
+        result.setHeight(434);
+        result.setWidth(550);
+        result.setUrl("http://cs623223.vk.me/v623223105/11514/9LDXX9MyXyY.jpg");
+        return result;
+    }
+
+    public static Image generateImage2() {
+        Image result = new Image();
+        result.setSize(0);
+        result.setHeight(1224);
+        result.setWidth(1632);
+        result.setUrl("http://cs622031.vk.me/v622031634/2af54/Rba5Mi6iPNw.jpg");
+        return result;
+    }
+
+    public static Image getRandomImage() {
+        return images.get(new Random().nextInt(images.size()));
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/PostServiceMock.java b/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/PostServiceMock.java
new file mode 100644
index 000000000..9539e8976
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/PostServiceMock.java
@@ -0,0 +1,108 @@
+package org.telegram.messenger.service.mock;
+
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+import java.util.Random;
+
+import ru.aragats.android.object.PostObject;
+import ru.aragats.utils.StringUtils;
+import ru.aragats.whats.dto.Image;
+import ru.aragats.whats.dto.Post;
+import ru.aragats.whats.dto.PostResponse;
+
+/**
+ * Created by aragats on 09/05/15.
+ */
+public class PostServiceMock {
+
+    public static final String SEED_1 = "abcdefgrtyuiophjk";
+    public static final String SEED_2 = "ab c de fg rty  ui o ph jk";
+
+    private static List<Post> posts = new ArrayList<>();
+
+    static {
+        posts.addAll(generatePosts(60));
+    }
+
+    public static PostResponse getPosts(String location, String query, final int offset, final int count) {
+        PostResponse response = new PostResponse();
+        int end = offset + count;
+        if (!StringUtils.isEmpty(query)) {
+            List<Post> posts = searchPosts(query);
+            if (posts.isEmpty() || offset > posts.size()) {
+                response.setPosts(new ArrayList<Post>());
+                return response;
+            }
+            response.setPosts(posts.subList(offset, end > posts.size() ? posts.size() : end));
+        } else {
+            if (offset > posts.size()) {
+                response.setPosts(new ArrayList<Post>());
+                return response;
+            }
+            response.setPosts(posts.subList(offset, end > posts.size() ? posts.size() : end));
+        }
+        return response;
+    }
+
+    private static List<Post> searchPosts(String query) {
+        List<Post> result = new ArrayList<>();
+        for (Post post : posts) {
+            if (post.getMessage().contains(query)) {
+                result.add(post);
+            }
+        }
+        return result;
+
+    }
+
+
+    public static List<Post> getPosts() {
+        return posts;
+    }
+
+
+    public static Post generatePost(int i) {
+        Post post = new Post();
+        post.setId("" + i);
+        post.setCreatedDate(new Date().getTime());
+        post.setMessage(generateString("ab c de fg rty  ui o ph jk", 150));
+        Image image = ImageServiceMock.getRandomImage();
+        post.setPreviewImage(image);
+        post.setImage(image);
+        post.setUser(UserServiceMock.getRandomUser());
+        post.setVenue(VenueServiceMock.getRandomVenue());
+        return post;
+    }
+
+    public static List<Post> generatePosts(int count) {
+        List<Post> postObjects = new ArrayList<>();
+        for (int i = 0; i < count; i++) {
+            postObjects.add(generatePost(i));
+        }
+        return postObjects;
+
+    }
+
+
+    //    post.id + generateString(new Random(), "abcdef", 5);
+    public static String generateString(String characters, int length) {
+        Random rng = new Random();
+        char[] text = new char[length];
+        for (int i = 0; i < length; i++) {
+            text[i] = characters.charAt(rng.nextInt(characters.length()));
+        }
+        return new String(text);
+    }
+
+
+    public static List<PostObject> convertPost(List<Post> posts) {
+        List<PostObject> result = new ArrayList<>();
+        for (Post post : posts) {
+            result.add(new PostObject(post));
+        }
+        return result;
+    }
+
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/ServiceManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/ServiceManager.java
new file mode 100644
index 000000000..9a6e43a8e
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/ServiceManager.java
@@ -0,0 +1,22 @@
+package org.telegram.messenger.service.mock;
+
+/**
+ * Created by aragats on 09/05/15.
+ */
+public class ServiceManager {
+
+    private static volatile ServiceManager instance = null;
+
+    public static ServiceManager getInstance() {
+        ServiceManager localInstance = instance;
+        if (localInstance == null) {
+            synchronized (ServiceManager.class) {
+                localInstance = instance;
+                if (localInstance == null) {
+                    instance = localInstance = new ServiceManager();
+                }
+            }
+        }
+        return localInstance;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/UserServiceMock.java b/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/UserServiceMock.java
new file mode 100644
index 000000000..5dc74aa8a
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/UserServiceMock.java
@@ -0,0 +1,52 @@
+package org.telegram.messenger.service.mock;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
+import ru.aragats.whats.dto.Image;
+import ru.aragats.whats.dto.User;
+
+import static ru.aragats.whats.service.PostServiceMock.*;
+
+/**
+ * Created by aragats on 09/05/15.
+ */
+public class UserServiceMock {
+
+
+    private static List<User> users = new ArrayList<>();
+
+    static {
+        users.addAll(generateUsers(5));
+    }
+
+
+    public static User generateUser() {
+        User result = new User();
+        result.setId("" + (long) (Math.random() * 100));
+        result.setEmail(generateString(SEED_1, 5) + "@" + generateString(SEED_1, 5));
+        result.setFirstName(generateString(SEED_1, 5));
+        result.setLastName(generateString(SEED_1, 5));
+        result.setUsername(generateString(SEED_1, 5));
+        Image image = ImageServiceMock.getRandomImage();
+        result.setImage(image);
+        result.setPreviewImage(image);
+        return result;
+    }
+
+
+    public static List<User> generateUsers(int count) {
+        List<User> result = new ArrayList<>();
+        for (int i = 0; i < count; i++) {
+            result.add(generateUser());
+        }
+        return result;
+    }
+
+    public static User getRandomUser() {
+        return users.get(new Random().nextInt(users.size()));
+    }
+
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/VenueServiceMock.java b/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/VenueServiceMock.java
new file mode 100644
index 000000000..c9e5e43b1
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/VenueServiceMock.java
@@ -0,0 +1,95 @@
+package org.telegram.messenger.service.mock;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
+import ru.aragats.android.object.PostObject;
+import ru.aragats.android.object.VenueObject;
+import ru.aragats.utils.StringUtils;
+import ru.aragats.whats.dto.Image;
+import ru.aragats.whats.dto.Post;
+import ru.aragats.whats.dto.Venue;
+import ru.aragats.whats.dto.VenueResponse;
+
+/**
+ * Created by aragats on 10/05/15.
+ */
+public class VenueServiceMock {
+
+    private static List<Venue> venues = new ArrayList<>();
+
+    static {
+        venues.addAll(generateVenues(60));
+
+    }
+
+    public static VenueResponse getVenues(String location, String query, final int offset, final int count) {
+        int end = offset + count;
+
+        VenueResponse result = new VenueResponse();
+        if (!StringUtils.isEmpty(query)) {
+            List<Venue> venues = searchVenues(query);
+            if (venues.isEmpty() || offset > venues.size()) {
+                result.setVenues(new ArrayList<Venue>());
+                return result;
+            }
+            result.setVenues(venues.subList(offset, end > venues.size() ? venues.size() : end));
+        } else {
+            if (offset > venues.size()) {
+                result.setVenues(new ArrayList<Venue>());
+                return result;
+            }
+            result.setVenues(venues.subList(offset, end > venues.size() ? venues.size() : end));
+        }
+        return result;
+    }
+
+
+    private static List<Venue> searchVenues(String query) {
+        List<Venue> result = new ArrayList<>();
+        for (Venue venue : venues) {
+            if (venue.getName().contains(query)) {
+                result.add(venue);
+            }
+        }
+        return result;
+
+    }
+
+
+    public static List<VenueObject> convertVenue(List<Venue> venues) {
+        List<VenueObject> result = new ArrayList<>();
+        for (Venue venue : venues) {
+            result.add(new VenueObject(venue));
+        }
+        return result;
+    }
+
+
+    public static Venue generateVenue(int i) {
+        Venue result = new Venue();
+        result.setId("" + i);
+        Image image = ImageServiceMock.getRandomImage();
+        result.setImage(image);
+        result.setPreviewImage(image);
+        result.setAddress(PostServiceMock.generateString("ab c de fg rty  ui o ph jk", 40));
+        result.setName(PostServiceMock.generateString("ab c de fg rty  ui o ph jk", 40));
+        result.setCoordinates(CoordinatesServiceMock.getRandomCoordinates());
+        return result;
+    }
+
+
+    public static List<Venue> generateVenues(int count) {
+        List<Venue> result = new ArrayList<>();
+        for (int i = 0; i < count; i++) {
+            result.add(generateVenue(i));
+        }
+        return result;
+    }
+
+
+    public static Venue getRandomVenue() {
+        return venues.get(new Random().nextInt(venues.size()));
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java
new file mode 100644
index 000000000..aa1e2dda8
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java
@@ -0,0 +1,123 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Adapters;
+
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.MessagesController;
+import org.telegram.android.support.widget.RecyclerView;
+import org.telegram.messenger.TLRPC;
+import org.telegram.ui.Cells.DialogCell;
+import org.telegram.ui.Cells.LoadingCell;
+
+public class PostsAdapter extends RecyclerView.Adapter {
+
+    private Context mContext;
+    private boolean serverOnly;
+    private long openedDialogId;
+    private int currentCount;
+
+    private class Holder extends RecyclerView.ViewHolder {
+
+        public Holder(View itemView) {
+            super(itemView);
+        }
+    }
+
+    public PostsAdapter(Context context, boolean onlyFromServer) {
+        mContext = context;
+        serverOnly = onlyFromServer;
+    }
+
+    public void setOpenedDialogId(long id) {
+        openedDialogId = id;
+    }
+
+    public boolean isDataSetChanged() {
+        int current = currentCount;
+        return current != getItemCount();
+    }
+
+    @Override
+    public int getItemCount() {
+        int count;
+        if (serverOnly) {
+            count = MessagesController.getInstance().dialogsServerOnly.size();
+        } else {
+            count = MessagesController.getInstance().dialogs.size();
+        }
+        if (count == 0 && MessagesController.getInstance().loadingDialogs) {
+            return 0;
+        }
+        if (!MessagesController.getInstance().dialogsEndReached) {
+            count++;
+        }
+        currentCount = count;
+        return count;
+    }
+
+    public TLRPC.TL_dialog getItem(int i) {
+        if (serverOnly) {
+            if (i < 0 || i >= MessagesController.getInstance().dialogsServerOnly.size()) {
+                return null;
+            }
+            return MessagesController.getInstance().dialogsServerOnly.get(i);
+        } else {
+            if (i < 0 || i >= MessagesController.getInstance().dialogs.size()) {
+                return null;
+            }
+            return MessagesController.getInstance().dialogs.get(i);
+        }
+    }
+
+    @Override
+    public long getItemId(int i) {
+        return i;
+    }
+
+    @Override
+    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup viewGroup, int viewType) {
+        View view = null;
+        if (viewType == 0) {
+            view = new DialogCell(mContext);
+        } else if (viewType == 1) {
+            view = new LoadingCell(mContext);
+        }
+        return new Holder(view);
+    }
+
+    @Override
+    public void onBindViewHolder(RecyclerView.ViewHolder viewHolder, int i) {
+        if (viewHolder.getItemViewType() == 0) {
+            DialogCell cell = (DialogCell) viewHolder.itemView;
+            cell.useSeparator = (i != getItemCount() - 1);
+            TLRPC.TL_dialog dialog;
+            if (serverOnly) {
+                dialog = MessagesController.getInstance().dialogsServerOnly.get(i);
+            } else {
+                dialog = MessagesController.getInstance().dialogs.get(i);
+                if (AndroidUtilities.isTablet()) {
+                    cell.setDialogSelected(dialog.id == openedDialogId);
+                }
+            }
+            cell.setDialog(dialog, i, serverOnly);
+        }
+    }
+
+    @Override
+    public int getItemViewType(int i) {
+        if (serverOnly && i == MessagesController.getInstance().dialogsServerOnly.size() || !serverOnly && i == MessagesController.getInstance().dialogs.size()) {
+            return 1;
+        }
+        return 0;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsSearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsSearchAdapter.java
new file mode 100644
index 000000000..1ac7cdf0b
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsSearchAdapter.java
@@ -0,0 +1,736 @@
+/*
+ * This is the source code of Telegram for Android v. 1.7.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Adapters;
+
+import android.content.Context;
+import android.text.TextUtils;
+import android.view.View;
+import android.view.ViewGroup;
+
+import org.telegram.SQLite.SQLiteCursor;
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ContactsController;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MessageObject;
+import org.telegram.android.MessagesController;
+import org.telegram.android.MessagesStorage;
+import org.telegram.android.support.widget.RecyclerView;
+import org.telegram.messenger.ByteBufferDesc;
+import org.telegram.messenger.ConnectionsManager;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
+import org.telegram.messenger.RPCRequest;
+import org.telegram.messenger.TLObject;
+import org.telegram.messenger.TLRPC;
+import org.telegram.ui.Cells.DialogCell;
+import org.telegram.ui.Cells.GreySectionCell;
+import org.telegram.ui.Cells.HashtagSearchCell;
+import org.telegram.ui.Cells.LoadingCell;
+import org.telegram.ui.Cells.ProfileSearchCell;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.HashMap;
+import java.util.Locale;
+import java.util.Timer;
+import java.util.TimerTask;
+
+public class PostsSearchAdapter extends BaseSearchAdapterRecycler {
+
+    private Context mContext;
+    private Timer searchTimer;
+    private ArrayList<TLObject> searchResult = new ArrayList<>();
+    private ArrayList<CharSequence> searchResultNames = new ArrayList<>();
+    private ArrayList<MessageObject> searchResultMessages = new ArrayList<>();
+    private ArrayList<String> searchResultHashtags = new ArrayList<>();
+    private String lastSearchText;
+    private long reqId = 0;
+    private int lastReqId;
+    private MessagesActivitySearchAdapterDelegate delegate;
+    private int needMessagesSearch;
+    private boolean messagesSearchEndReached;
+    private String lastMessagesSearchString;
+    private int lastSearchId = 0;
+
+    private class Holder extends RecyclerView.ViewHolder {
+
+        public Holder(View itemView) {
+            super(itemView);
+        }
+    }
+
+    private class DialogSearchResult {
+        public TLObject object;
+        public int date;
+        public CharSequence name;
+    }
+
+    public interface MessagesActivitySearchAdapterDelegate {
+        void searchStateChanged(boolean searching);
+    }
+
+    public PostsSearchAdapter(Context context, int messagesSearch) {
+        mContext = context;
+        needMessagesSearch = messagesSearch;
+    }
+
+    public void setDelegate(MessagesActivitySearchAdapterDelegate delegate) {
+        this.delegate = delegate;
+    }
+
+    public boolean isMessagesSearchEndReached() {
+        return messagesSearchEndReached;
+    }
+
+    public void loadMoreSearchMessages() {
+        searchMessagesInternal(lastMessagesSearchString);
+    }
+
+    public String getLastSearchString() {
+        return lastMessagesSearchString;
+    }
+
+    private void searchMessagesInternal(final String query) {
+        if (needMessagesSearch == 0) {
+            return;
+        }
+        if (reqId != 0) {
+            ConnectionsManager.getInstance().cancelRpc(reqId, true);
+            reqId = 0;
+        }
+        if (query == null || query.length() == 0) {
+            searchResultMessages.clear();
+            lastReqId = 0;
+            lastMessagesSearchString = null;
+            notifyDataSetChanged();
+            if (delegate != null) {
+                delegate.searchStateChanged(false);
+            }
+            return;
+        }
+        final TLRPC.TL_messages_search req = new TLRPC.TL_messages_search();
+        req.limit = 20;
+        req.peer = new TLRPC.TL_inputPeerEmpty();
+        req.q = query;
+        if (lastMessagesSearchString != null && query.equals(lastMessagesSearchString) && !searchResultMessages.isEmpty()) {
+            req.max_id = searchResultMessages.get(searchResultMessages.size() - 1).getId();
+        }
+        lastMessagesSearchString = query;
+        req.filter = new TLRPC.TL_inputMessagesFilterEmpty();
+        final int currentReqId = ++lastReqId;
+        if (delegate != null) {
+            delegate.searchStateChanged(true);
+        }
+        reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+            @Override
+            public void run(final TLObject response, final TLRPC.TL_error error) {
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        if (currentReqId == lastReqId) {
+                            if (error == null) {
+                                TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
+                                MessagesStorage.getInstance().putUsersAndChats(res.users, res.chats, true, true);
+                                MessagesController.getInstance().putUsers(res.users, false);
+                                MessagesController.getInstance().putChats(res.chats, false);
+                                if (req.max_id == 0) {
+                                    searchResultMessages.clear();
+                                }
+                                for (TLRPC.Message message : res.messages) {
+                                    searchResultMessages.add(new MessageObject(message, null, false));
+                                }
+                                messagesSearchEndReached = res.messages.size() != 20;
+                                notifyDataSetChanged();
+                            }
+                        }
+                        if (delegate != null) {
+                            delegate.searchStateChanged(false);
+                        }
+                        reqId = 0;
+                    }
+                });
+            }
+        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
+    }
+
+    private void searchDialogsInternal(final String query, final boolean serverOnly, final int searchId) {
+        if (needMessagesSearch == 2) {
+            return;
+        }
+        MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    String search1 = query.trim().toLowerCase();
+                    if (search1.length() == 0) {
+                        lastSearchId = -1;
+                        updateSearchResults(new ArrayList<TLObject>(), new ArrayList<CharSequence>(), new ArrayList<TLRPC.User>(), lastSearchId);
+                        return;
+                    }
+                    String search2 = LocaleController.getInstance().getTranslitString(search1);
+                    if (search1.equals(search2) || search2.length() == 0) {
+                        search2 = null;
+                    }
+                    String search[] = new String[1 + (search2 != null ? 1 : 0)];
+                    search[0] = search1;
+                    if (search2 != null) {
+                        search[1] = search2;
+                    }
+
+                    ArrayList<Integer> usersToLoad = new ArrayList<>();
+                    ArrayList<Integer> chatsToLoad = new ArrayList<>();
+                    ArrayList<Integer> encryptedToLoad = new ArrayList<>();
+                    ArrayList<TLRPC.User> encUsers = new ArrayList<>();
+                    int resultCount = 0;
+
+                    HashMap<Long, DialogSearchResult> dialogsResult = new HashMap<>();
+                    SQLiteCursor cursor = MessagesStorage.getInstance().getDatabase().queryFinalized("SELECT did, date FROM dialogs ORDER BY date DESC LIMIT 200");
+                    while (cursor.next()) {
+                        long id = cursor.longValue(0);
+                        DialogSearchResult dialogSearchResult = new DialogSearchResult();
+                        dialogSearchResult.date = cursor.intValue(1);
+                        dialogsResult.put(id, dialogSearchResult);
+
+                        int lower_id = (int) id;
+                        int high_id = (int) (id >> 32);
+                        if (lower_id != 0) {
+                            if (high_id == 1) {
+                                if (!serverOnly && !chatsToLoad.contains(lower_id)) {
+                                    chatsToLoad.add(lower_id);
+                                }
+                            } else {
+                                if (lower_id > 0) {
+                                    if (!usersToLoad.contains(lower_id)) {
+                                        usersToLoad.add(lower_id);
+                                    }
+                                } else {
+                                    if (!chatsToLoad.contains(-lower_id)) {
+                                        chatsToLoad.add(-lower_id);
+                                    }
+                                }
+                            }
+                        } else if (!serverOnly) {
+                            if (!encryptedToLoad.contains(high_id)) {
+                                encryptedToLoad.add(high_id);
+                            }
+                        }
+                    }
+                    cursor.dispose();
+
+                    if (!usersToLoad.isEmpty()) {
+                        cursor = MessagesStorage.getInstance().getDatabase().queryFinalized(String.format(Locale.US, "SELECT data, status, name FROM users WHERE uid IN(%s)", TextUtils.join(",", usersToLoad)));
+                        while (cursor.next()) {
+                            String name = cursor.stringValue(2);
+                            String tName = LocaleController.getInstance().getTranslitString(name);
+                            if (name.equals(tName)) {
+                                tName = null;
+                            }
+                            String username = null;
+                            int usernamePos = name.lastIndexOf(";;;");
+                            if (usernamePos != -1) {
+                                username = name.substring(usernamePos + 3);
+                            }
+                            int found = 0;
+                            for (String q : search) {
+                                if (name.startsWith(q) || name.contains(" " + q) || tName != null && (tName.startsWith(q) || tName.contains(" " + q))) {
+                                    found = 1;
+                                } else if (username != null && username.startsWith(q)) {
+                                    found = 2;
+                                }
+                                if (found != 0) {
+                                    ByteBufferDesc data = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(cursor.byteArrayLength(0));
+                                    if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
+                                        TLRPC.User user = TLRPC.User.TLdeserialize(data, data.readInt32(false), false);
+                                        DialogSearchResult dialogSearchResult = dialogsResult.get((long) user.id);
+                                        if (user.status != null) {
+                                            user.status.expires = cursor.intValue(1);
+                                        }
+                                        if (found == 1) {
+                                            dialogSearchResult.name = AndroidUtilities.generateSearchName(user.first_name, user.last_name, q);
+                                        } else {
+                                            dialogSearchResult.name = AndroidUtilities.generateSearchName("@" + user.username, null, "@" + q);
+                                        }
+                                        dialogSearchResult.object = user;
+                                        resultCount++;
+                                    }
+                                    MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data);
+                                    break;
+                                }
+                            }
+                        }
+                        cursor.dispose();
+                    }
+
+                    if (!chatsToLoad.isEmpty()) {
+                        cursor = MessagesStorage.getInstance().getDatabase().queryFinalized(String.format(Locale.US, "SELECT data, name FROM chats WHERE uid IN(%s)", TextUtils.join(",", chatsToLoad)));
+                        while (cursor.next()) {
+                            String name = cursor.stringValue(1);
+                            String tName = LocaleController.getInstance().getTranslitString(name);
+                            if (name.equals(tName)) {
+                                tName = null;
+                            }
+                            for (String q : search) {
+                                if (name.startsWith(q) || name.contains(" " + q) || tName != null && (tName.startsWith(q) || tName.contains(" " + q))) {
+                                    ByteBufferDesc data = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(cursor.byteArrayLength(0));
+                                    if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
+                                        TLRPC.Chat chat = TLRPC.Chat.TLdeserialize(data, data.readInt32(false), false);
+                                        long dialog_id;
+                                        if (chat.id > 0) {
+                                            dialog_id = -chat.id;
+                                        } else {
+                                            dialog_id = AndroidUtilities.makeBroadcastId(chat.id);
+                                        }
+                                        DialogSearchResult dialogSearchResult = dialogsResult.get(dialog_id);
+                                        dialogSearchResult.name = AndroidUtilities.generateSearchName(chat.title, null, q);
+                                        dialogSearchResult.object = chat;
+                                        resultCount++;
+                                    }
+                                    MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data);
+                                    break;
+                                }
+                            }
+                        }
+                        cursor.dispose();
+                    }
+
+                    if (!encryptedToLoad.isEmpty()) {
+                        cursor = MessagesStorage.getInstance().getDatabase().queryFinalized(String.format(Locale.US, "SELECT q.data, u.name, q.user, q.g, q.authkey, q.ttl, u.data, u.status, q.layer, q.seq_in, q.seq_out, q.use_count, q.exchange_id, q.key_date, q.fprint, q.fauthkey, q.khash FROM enc_chats as q INNER JOIN users as u ON q.user = u.uid WHERE q.uid IN(%s)", TextUtils.join(",", encryptedToLoad)));
+                        while (cursor.next()) {
+                            String name = cursor.stringValue(1);
+                            String tName = LocaleController.getInstance().getTranslitString(name);
+                            if (name.equals(tName)) {
+                                tName = null;
+                            }
+
+                            String username = null;
+                            int usernamePos = name.lastIndexOf(";;;");
+                            if (usernamePos != -1) {
+                                username = name.substring(usernamePos + 2);
+                            }
+                            int found = 0;
+                            for (String q : search) {
+                                if (name.startsWith(q) || name.contains(" " + q) || tName != null && (tName.startsWith(q) || tName.contains(" " + q))) {
+                                    found = 1;
+                                } else if (username != null && username.startsWith(q)) {
+                                    found = 2;
+                                }
+
+                                if (found != 0) {
+                                    ByteBufferDesc data = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(cursor.byteArrayLength(0));
+                                    ByteBufferDesc data2 = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(cursor.byteArrayLength(6));
+                                    if (data != null && cursor.byteBufferValue(0, data.buffer) != 0 && cursor.byteBufferValue(6, data2.buffer) != 0) {
+                                        TLRPC.EncryptedChat chat = TLRPC.EncryptedChat.TLdeserialize(data, data.readInt32(false), false);
+                                        DialogSearchResult dialogSearchResult = dialogsResult.get((long) chat.id << 32);
+
+                                        chat.user_id = cursor.intValue(2);
+                                        chat.a_or_b = cursor.byteArrayValue(3);
+                                        chat.auth_key = cursor.byteArrayValue(4);
+                                        chat.ttl = cursor.intValue(5);
+                                        chat.layer = cursor.intValue(8);
+                                        chat.seq_in = cursor.intValue(9);
+                                        chat.seq_out = cursor.intValue(10);
+                                        int use_count = cursor.intValue(11);
+                                        chat.key_use_count_in = (short) (use_count >> 16);
+                                        chat.key_use_count_out = (short) (use_count);
+                                        chat.exchange_id = cursor.longValue(12);
+                                        chat.key_create_date = cursor.intValue(13);
+                                        chat.future_key_fingerprint = cursor.longValue(14);
+                                        chat.future_auth_key = cursor.byteArrayValue(15);
+                                        chat.key_hash = cursor.byteArrayValue(16);
+
+                                        TLRPC.User user = TLRPC.User.TLdeserialize(data2, data2.readInt32(false), false);
+                                        if (user.status != null) {
+                                            user.status.expires = cursor.intValue(7);
+                                        }
+                                        if (found == 1) {
+                                            dialogSearchResult.name = AndroidUtilities.replaceTags("<c#ff00a60e>" + ContactsController.formatName(user.first_name, user.last_name) + "</c>");
+                                        } else {
+                                            dialogSearchResult.name = AndroidUtilities.generateSearchName("@" + user.username, null, "@" + q);
+                                        }
+                                        dialogSearchResult.object = chat;
+                                        encUsers.add(user);
+                                        resultCount++;
+                                    }
+                                    MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data);
+                                    MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data2);
+                                    break;
+                                }
+                            }
+                        }
+                        cursor.dispose();
+                    }
+
+                    ArrayList<DialogSearchResult> searchResults = new ArrayList<>(resultCount);
+                    for (DialogSearchResult dialogSearchResult : dialogsResult.values()) {
+                        if (dialogSearchResult.object != null && dialogSearchResult.name != null) {
+                            searchResults.add(dialogSearchResult);
+                        }
+                    }
+
+                    Collections.sort(searchResults, new Comparator<DialogSearchResult>() {
+                        @Override
+                        public int compare(DialogSearchResult lhs, DialogSearchResult rhs) {
+                            if (lhs.date < rhs.date) {
+                                return 1;
+                            } else if (lhs.date > rhs.date) {
+                                return -1;
+                            }
+                            return 0;
+                        }
+                    });
+
+                    ArrayList<TLObject> resultArray = new ArrayList<>();
+                    ArrayList<CharSequence> resultArrayNames = new ArrayList<>();
+
+                    for (DialogSearchResult dialogSearchResult : searchResults) {
+                        resultArray.add(dialogSearchResult.object);
+                        resultArrayNames.add(dialogSearchResult.name);
+                    }
+
+                    cursor = MessagesStorage.getInstance().getDatabase().queryFinalized("SELECT u.data, u.status, u.name, u.uid FROM users as u INNER JOIN contacts as c ON u.uid = c.uid");
+                    while (cursor.next()) {
+                        int uid = cursor.intValue(3);
+                        if (dialogsResult.containsKey((long) uid)) {
+                            continue;
+                        }
+                        String name = cursor.stringValue(2);
+                        String tName = LocaleController.getInstance().getTranslitString(name);
+                        if (name.equals(tName)) {
+                            tName = null;
+                        }
+                        String username = null;
+                        int usernamePos = name.lastIndexOf(";;;");
+                        if (usernamePos != -1) {
+                            username = name.substring(usernamePos + 3);
+                        }
+                        int found = 0;
+                        for (String q : search) {
+                            if (name.startsWith(q) || name.contains(" " + q) || tName != null && (tName.startsWith(q) || tName.contains(" " + q))) {
+                                found = 1;
+                            } else if (username != null && username.startsWith(q)) {
+                                found = 2;
+                            }
+                            if (found != 0) {
+                                ByteBufferDesc data = MessagesStorage.getInstance().getBuffersStorage().getFreeBuffer(cursor.byteArrayLength(0));
+                                if (data != null && cursor.byteBufferValue(0, data.buffer) != 0) {
+                                    TLRPC.User user = TLRPC.User.TLdeserialize(data, data.readInt32(false), false);
+                                    if (user.status != null) {
+                                        user.status.expires = cursor.intValue(1);
+                                    }
+                                    if (found == 1) {
+                                        resultArrayNames.add(AndroidUtilities.generateSearchName(user.first_name, user.last_name, q));
+                                    } else {
+                                        resultArrayNames.add(AndroidUtilities.generateSearchName("@" + user.username, null, "@" + q));
+                                    }
+                                    resultArray.add(user);
+                                }
+                                MessagesStorage.getInstance().getBuffersStorage().reuseFreeBuffer(data);
+                                break;
+                            }
+                        }
+                    }
+                    cursor.dispose();
+
+                    updateSearchResults(resultArray, resultArrayNames, encUsers, searchId);
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        });
+    }
+
+    private void updateSearchResults(final ArrayList<TLObject> result, final ArrayList<CharSequence> names, final ArrayList<TLRPC.User> encUsers, final int searchId) {
+        AndroidUtilities.runOnUIThread(new Runnable() {
+            @Override
+            public void run() {
+                if (searchId != lastSearchId) {
+                    return;
+                }
+                for (TLObject obj : result) {
+                    if (obj instanceof TLRPC.User) {
+                        TLRPC.User user = (TLRPC.User) obj;
+                        MessagesController.getInstance().putUser(user, true);
+                    } else if (obj instanceof TLRPC.Chat) {
+                        TLRPC.Chat chat = (TLRPC.Chat) obj;
+                        MessagesController.getInstance().putChat(chat, true);
+                    } else if (obj instanceof TLRPC.EncryptedChat) {
+                        TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat) obj;
+                        MessagesController.getInstance().putEncryptedChat(chat, true);
+                    }
+                }
+                for (TLRPC.User user : encUsers) {
+                    MessagesController.getInstance().putUser(user, true);
+                }
+                searchResult = result;
+                searchResultNames = names;
+                notifyDataSetChanged();
+            }
+        });
+    }
+
+    public String getLastSearchText() {
+        return lastSearchText;
+    }
+
+    public boolean isGlobalSearch(int i) {
+        return i > searchResult.size() && i <= globalSearch.size() + searchResult.size();
+    }
+
+    @Override
+    public void clearRecentHashtags() {
+        super.clearRecentHashtags();
+        searchResultHashtags.clear();
+        notifyDataSetChanged();
+    }
+
+    @Override
+    protected void setHashtags(ArrayList<HashtagObject> arrayList, HashMap<String, HashtagObject> hashMap) {
+        super.setHashtags(arrayList, hashMap);
+        for (HashtagObject hashtagObject : arrayList) {
+            searchResultHashtags.add(hashtagObject.hashtag);
+        }
+        if (delegate != null) {
+            delegate.searchStateChanged(false);
+        }
+        notifyDataSetChanged();
+    }
+
+    public void searchDialogs(final String query, final boolean serverOnly) {
+        if (query != null && lastSearchText != null && query.equals(lastSearchText)) {
+            return;
+        }
+        try {
+            if (searchTimer != null) {
+                searchTimer.cancel();
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        if (query == null || query.length() == 0) {
+            hashtagsLoadedFromDb = false;
+            searchResult.clear();
+            searchResultNames.clear();
+            searchResultHashtags.clear();
+            if (needMessagesSearch != 2) {
+                queryServerSearch(null);
+            }
+            searchMessagesInternal(null);
+            notifyDataSetChanged();
+        } else {
+            if (query.startsWith("#") && query.length() == 1) {
+                messagesSearchEndReached = true;
+                if (!hashtagsLoadedFromDb) {
+                    loadRecentHashtags();
+                    if (delegate != null) {
+                        delegate.searchStateChanged(true);
+                    }
+                    notifyDataSetChanged();
+                    return;
+                }
+                searchResultMessages.clear();
+                searchResultHashtags.clear();
+                for (HashtagObject hashtagObject : hashtags) {
+                    searchResultHashtags.add(hashtagObject.hashtag);
+                }
+                if (delegate != null) {
+                    delegate.searchStateChanged(false);
+                }
+                notifyDataSetChanged();
+                return;
+            } else {
+                searchResultHashtags.clear();
+            }
+            final int searchId = ++lastSearchId;
+            searchTimer = new Timer();
+            searchTimer.schedule(new TimerTask() {
+                @Override
+                public void run() {
+                    try {
+                        searchTimer.cancel();
+                        searchTimer = null;
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                    searchDialogsInternal(query, serverOnly, searchId);
+                    AndroidUtilities.runOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            if (needMessagesSearch != 2) {
+                                queryServerSearch(query);
+                            }
+                            searchMessagesInternal(query);
+                        }
+                    });
+                }
+            }, 200, 300);
+        }
+    }
+
+    @Override
+    public int getItemCount() {
+        if (!searchResultHashtags.isEmpty()) {
+            return searchResultHashtags.size() + 1;
+        }
+        int count = searchResult.size();
+        int globalCount = globalSearch.size();
+        int messagesCount = searchResultMessages.size();
+        if (globalCount != 0) {
+            count += globalCount + 1;
+        }
+        if (messagesCount != 0) {
+            count += messagesCount + 1 + (messagesSearchEndReached ? 0 : 1);
+        }
+        return count;
+    }
+
+    public Object getItem(int i) {
+        if (!searchResultHashtags.isEmpty()) {
+            return searchResultHashtags.get(i - 1);
+        }
+        int localCount = searchResult.size();
+        int globalCount = globalSearch.isEmpty() ? 0 : globalSearch.size() + 1;
+        int messagesCount = searchResultMessages.isEmpty() ? 0 : searchResultMessages.size() + 1;
+        if (i >= 0 && i < localCount) {
+            return searchResult.get(i);
+        } else if (i > localCount && i < globalCount + localCount) {
+            return globalSearch.get(i - localCount - 1);
+        } else if (i > globalCount + localCount && i < globalCount + localCount + messagesCount) {
+            return searchResultMessages.get(i - localCount - globalCount - 1);
+        }
+        return null;
+    }
+
+    @Override
+    public long getItemId(int i) {
+        return i;
+    }
+
+    @Override
+    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+        View view = null;
+        switch (viewType) {
+            case 0:
+                view = new ProfileSearchCell(mContext);
+                view.setBackgroundResource(R.drawable.list_selector);
+                break;
+            case 1:
+                view = new GreySectionCell(mContext);
+                break;
+            case 2:
+                view = new DialogCell(mContext);
+                break;
+            case 3:
+                view = new LoadingCell(mContext);
+                break;
+            case 4:
+                view = new HashtagSearchCell(mContext);
+                break;
+        }
+        return new Holder(view);
+    }
+
+    @Override
+    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
+        switch (holder.getItemViewType()) {
+            case 0: {
+                ProfileSearchCell cell = (ProfileSearchCell) holder.itemView;
+
+                TLRPC.User user = null;
+                TLRPC.Chat chat = null;
+                TLRPC.EncryptedChat encryptedChat = null;
+
+                int localCount = searchResult.size();
+                int globalCount = globalSearch.isEmpty() ? 0 : globalSearch.size() + 1;
+
+                cell.useSeparator = (position != getItemCount() - 1 && position != localCount - 1 && position != localCount + globalCount - 1);
+                Object obj = getItem(position);
+                if (obj instanceof TLRPC.User) {
+                    user = (TLRPC.User) obj;
+                } else if (obj instanceof TLRPC.Chat) {
+                    chat = MessagesController.getInstance().getChat(((TLRPC.Chat) obj).id);
+                } else if (obj instanceof TLRPC.EncryptedChat) {
+                    encryptedChat = MessagesController.getInstance().getEncryptedChat(((TLRPC.EncryptedChat) obj).id);
+                    user = MessagesController.getInstance().getUser(encryptedChat.user_id);
+                }
+
+                CharSequence username = null;
+                CharSequence name = null;
+                if (position < searchResult.size()) {
+                    name = searchResultNames.get(position);
+                    if (name != null && user != null && user.username != null && user.username.length() > 0) {
+                        if (name.toString().startsWith("@" + user.username)) {
+                            username = name;
+                            name = null;
+                        }
+                    }
+                } else if (position > searchResult.size() && user != null && user.username != null) {
+                    String foundUserName = lastFoundUsername;
+                    if (foundUserName.startsWith("@")) {
+                        foundUserName = foundUserName.substring(1);
+                    }
+                    try {
+                        username = AndroidUtilities.replaceTags(String.format("<c#ff4d83b3>@%s</c>%s", user.username.substring(0, foundUserName.length()), user.username.substring(foundUserName.length())));
+                    } catch (Exception e) {
+                        username = user.username;
+                        FileLog.e("tmessages", e);
+                    }
+                }
+
+                cell.setData(user, chat, encryptedChat, name, username);
+                break;
+            }
+            case 1: {
+                GreySectionCell cell = (GreySectionCell) holder.itemView;
+                if (!searchResultHashtags.isEmpty()) {
+                    cell.setText(LocaleController.getString("Hashtags", R.string.Hashtags).toUpperCase());
+                }  else if (!globalSearch.isEmpty() && position == searchResult.size()) {
+                    cell.setText(LocaleController.getString("GlobalSearch", R.string.GlobalSearch));
+                } else {
+                    cell.setText(LocaleController.getString("SearchMessages", R.string.SearchMessages));
+                }
+                break;
+            }
+            case 2: {
+                DialogCell cell = (DialogCell) holder.itemView;
+                cell.useSeparator = (position != getItemCount() - 1);
+                MessageObject messageObject = (MessageObject)getItem(position);
+                cell.setDialog(messageObject.getDialogId(), messageObject, messageObject.messageOwner.date);
+                break;
+            }
+            case 3: {
+                break;
+            }
+            case 4: {
+                HashtagSearchCell cell = (HashtagSearchCell) holder.itemView;
+                cell.setText(searchResultHashtags.get(position - 1));
+                cell.setNeedDivider(position != searchResultHashtags.size());
+                break;
+            }
+        }
+    }
+
+    @Override
+    public int getItemViewType(int i) {
+        if (!searchResultHashtags.isEmpty()) {
+            return i == 0 ? 1 : 4;
+        }
+        int localCount = searchResult.size();
+        int globalCount = globalSearch.isEmpty() ? 0 : globalSearch.size() + 1;
+        int messagesCount = searchResultMessages.isEmpty() ? 0 : searchResultMessages.size() + 1;
+        if (i >= 0 && i < localCount || i > localCount && i < globalCount + localCount) {
+            return 0;
+        } else if (i > globalCount + localCount && i < globalCount + localCount + messagesCount) {
+            return 2;
+        } else if (messagesCount != 0 && i == globalCount + localCount + messagesCount) {
+            return 3;
+        }
+        return 1;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
new file mode 100644
index 000000000..db0986bfa
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
@@ -0,0 +1,860 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.drawable.Drawable;
+import android.os.Build;
+import android.text.Layout;
+import android.text.StaticLayout;
+import android.text.TextPaint;
+import android.text.TextUtils;
+import android.view.MotionEvent;
+
+import org.telegram.PhoneFormat.PhoneFormat;
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ContactsController;
+import org.telegram.android.Emoji;
+import org.telegram.android.ImageReceiver;
+import org.telegram.android.LocaleController;
+import org.telegram.android.MessageObject;
+import org.telegram.android.MessagesController;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.R;
+import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.UserConfig;
+import org.telegram.ui.Components.AvatarDrawable;
+
+public class PostCell extends BaseCell {
+
+    private static TextPaint namePaint;
+    private static TextPaint nameEncryptedPaint;
+    private static TextPaint nameUnknownPaint;
+    private static TextPaint messagePaint;
+    private static TextPaint messagePrintingPaint;
+    private static TextPaint timePaint;
+    private static TextPaint countPaint;
+
+    private static Drawable checkDrawable;
+    private static Drawable halfCheckDrawable;
+    private static Drawable clockDrawable;
+    private static Drawable errorDrawable;
+    private static Drawable lockDrawable;
+    private static Drawable countDrawable;
+    private static Drawable groupDrawable;
+    private static Drawable broadcastDrawable;
+    private static Drawable muteDrawable;
+
+    private static Paint linePaint;
+    private static Paint backPaint;
+
+    private long currentDialogId;
+    private boolean isDialogCell;
+    private int lastMessageDate;
+    private int unreadCount;
+    private boolean lastUnreadState;
+    private int lastSendState;
+    private boolean dialogMuted;
+    private MessageObject message;
+    private int index;
+    private boolean isServerOnly;
+
+    private ImageReceiver avatarImage;
+    private AvatarDrawable avatarDrawable;
+
+    private TLRPC.User user = null;
+    private TLRPC.Chat chat = null;
+    private TLRPC.EncryptedChat encryptedChat = null;
+    private CharSequence lastPrintString = null;
+
+    public boolean useSeparator = false;
+
+    private int nameLeft;
+    private StaticLayout nameLayout;
+    private boolean drawNameLock;
+    private boolean drawNameGroup;
+    private boolean drawNameBroadcast;
+    private int nameMuteLeft;
+    private int nameLockLeft;
+    private int nameLockTop;
+
+    private int timeLeft;
+    private int timeTop = AndroidUtilities.dp(17);
+    private StaticLayout timeLayout;
+
+    private boolean drawCheck1;
+    private boolean drawCheck2;
+    private boolean drawClock;
+    private int checkDrawLeft;
+    private int checkDrawTop = AndroidUtilities.dp(18);
+    private int halfCheckDrawLeft;
+
+    private int messageTop = AndroidUtilities.dp(40);
+    private int messageLeft;
+    private StaticLayout messageLayout;
+
+    private boolean drawError;
+    private int errorTop = AndroidUtilities.dp(39);
+    private int errorLeft;
+
+    private boolean drawCount;
+    private int countTop = AndroidUtilities.dp(39);
+    private int countLeft;
+    private int countWidth;
+    private StaticLayout countLayout;
+
+    private int avatarTop = AndroidUtilities.dp(10);
+
+    private boolean isSelected;
+
+    public PostCell(Context context) {
+        super(context);
+
+        if (namePaint == null) {
+            namePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            namePaint.setTextSize(AndroidUtilities.dp(17));
+            namePaint.setColor(0xff212121);
+            namePaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+
+            nameEncryptedPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            nameEncryptedPaint.setTextSize(AndroidUtilities.dp(17));
+            nameEncryptedPaint.setColor(0xff00a60e);
+            nameEncryptedPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+
+            nameUnknownPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            nameUnknownPaint.setTextSize(AndroidUtilities.dp(17));
+            nameUnknownPaint.setColor(0xff4d83b3);
+            nameUnknownPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+
+            messagePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            messagePaint.setTextSize(AndroidUtilities.dp(16));
+            messagePaint.setColor(0xff8f8f8f);
+            messagePaint.linkColor = 0xff8f8f8f;
+
+            linePaint = new Paint();
+            linePaint.setColor(0xffdcdcdc);
+
+            backPaint = new Paint();
+            backPaint.setColor(0x0f000000);
+
+            messagePrintingPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            messagePrintingPaint.setTextSize(AndroidUtilities.dp(16));
+            messagePrintingPaint.setColor(0xff4d83b3);
+
+            timePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            timePaint.setTextSize(AndroidUtilities.dp(13));
+            timePaint.setColor(0xff999999);
+
+            countPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            countPaint.setTextSize(AndroidUtilities.dp(13));
+            countPaint.setColor(0xffffffff);
+            countPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+
+            lockDrawable = getResources().getDrawable(R.drawable.list_secret);
+            checkDrawable = getResources().getDrawable(R.drawable.dialogs_check);
+            halfCheckDrawable = getResources().getDrawable(R.drawable.dialogs_halfcheck);
+            clockDrawable = getResources().getDrawable(R.drawable.msg_clock);
+            errorDrawable = getResources().getDrawable(R.drawable.dialogs_warning);
+            countDrawable = getResources().getDrawable(R.drawable.dialogs_badge);
+            groupDrawable = getResources().getDrawable(R.drawable.list_group);
+            broadcastDrawable = getResources().getDrawable(R.drawable.list_broadcast);
+            muteDrawable = getResources().getDrawable(R.drawable.mute_grey);
+        }
+
+        setBackgroundResource(R.drawable.list_selector);
+
+        avatarImage = new ImageReceiver(this);
+        avatarImage.setRoundRadius(AndroidUtilities.dp(26));
+        avatarDrawable = new AvatarDrawable();
+    }
+
+    public void setDialog(TLRPC.TL_dialog dialog, int i, boolean server) {
+        currentDialogId = dialog.id;
+        isDialogCell = true;
+        index = i;
+        isServerOnly = server;
+        update(0);
+    }
+
+    public void setDialog(long dialog_id, MessageObject messageObject, int date) {
+        currentDialogId = dialog_id;
+        message = messageObject;
+        isDialogCell = false;
+        lastMessageDate = date;
+        unreadCount = 0;
+        lastUnreadState = messageObject != null && messageObject.isUnread();
+        if (message != null) {
+            lastSendState = message.messageOwner.send_state;
+        }
+        update(0);
+    }
+
+    public long getDialogId() {
+        return currentDialogId;
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        avatarImage.onDetachedFromWindow();
+    }
+
+    @Override
+    protected void onAttachedToWindow() {
+        super.onAttachedToWindow();
+        avatarImage.onAttachedToWindow();
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), AndroidUtilities.dp(72) + (useSeparator ? 1 : 0));
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        if (currentDialogId == 0) {
+            super.onLayout(changed, left, top, right, bottom);
+            return;
+        }
+        if (changed) {
+            buildLayout();
+        }
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        if (Build.VERSION.SDK_INT >= 21 && getBackground() != null) {
+            if (event.getAction() == MotionEvent.ACTION_DOWN || event.getAction() == MotionEvent.ACTION_MOVE) {
+                getBackground().setHotspot(event.getX(), event.getY());
+            }
+        }
+        return super.onTouchEvent(event);
+    }
+
+    public void buildLayout() {
+        String nameString = "";
+        String timeString = "";
+        String countString = null;
+        CharSequence messageString = "";
+        CharSequence printingString = null;
+        if (isDialogCell) {
+            printingString = MessagesController.getInstance().printingStrings.get(currentDialogId);
+        }
+        TextPaint currentNamePaint = namePaint;
+        TextPaint currentMessagePaint = messagePaint;
+        boolean checkMessage = true;
+
+        drawNameGroup = false;
+        drawNameBroadcast = false;
+        drawNameLock = false;
+
+        if (encryptedChat != null) {
+            drawNameLock = true;
+            nameLockTop = AndroidUtilities.dp(16.5f);
+            if (!LocaleController.isRTL) {
+                nameLockLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline);
+                nameLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline + 4) + lockDrawable.getIntrinsicWidth();
+            } else {
+                nameLockLeft = getMeasuredWidth() - AndroidUtilities.dp(AndroidUtilities.leftBaseline) - lockDrawable.getIntrinsicWidth();
+                nameLeft = AndroidUtilities.dp(14);
+            }
+        } else {
+            if (chat != null) {
+                if (chat.id < 0) {
+                    drawNameBroadcast = true;
+                    nameLockTop = AndroidUtilities.dp(16.5f);
+                } else {
+                    drawNameGroup = true;
+                    nameLockTop = AndroidUtilities.dp(17.5f);
+                }
+
+                if (!LocaleController.isRTL) {
+                    nameLockLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline);
+                    nameLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline + 4) + (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
+                } else {
+                    nameLockLeft = getMeasuredWidth() - AndroidUtilities.dp(AndroidUtilities.leftBaseline) - (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
+                    nameLeft = AndroidUtilities.dp(14);
+                }
+            } else {
+                if (!LocaleController.isRTL) {
+                    nameLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline);
+                } else {
+                    nameLeft = AndroidUtilities.dp(14);
+                }
+            }
+        }
+
+        if (message == null) {
+            if (printingString != null) {
+                lastPrintString = messageString = printingString;
+                currentMessagePaint = messagePrintingPaint;
+            } else {
+                lastPrintString = null;
+                if (encryptedChat != null) {
+                    currentMessagePaint = messagePrintingPaint;
+                    if (encryptedChat instanceof TLRPC.TL_encryptedChatRequested) {
+                        messageString = LocaleController.getString("EncryptionProcessing", R.string.EncryptionProcessing);
+                    } else if (encryptedChat instanceof TLRPC.TL_encryptedChatWaiting) {
+                        if (user != null && user.first_name != null) {
+                            messageString = LocaleController.formatString("AwaitingEncryption", R.string.AwaitingEncryption, user.first_name);
+                        } else {
+                            messageString = LocaleController.formatString("AwaitingEncryption", R.string.AwaitingEncryption, "");
+                        }
+                    } else if (encryptedChat instanceof TLRPC.TL_encryptedChatDiscarded) {
+                        messageString = LocaleController.getString("EncryptionRejected", R.string.EncryptionRejected);
+                    } else if (encryptedChat instanceof TLRPC.TL_encryptedChat) {
+                        if (encryptedChat.admin_id == UserConfig.getClientUserId()) {
+                            if (user != null && user.first_name != null) {
+                                messageString = LocaleController.formatString("EncryptedChatStartedOutgoing", R.string.EncryptedChatStartedOutgoing, user.first_name);
+                            } else {
+                                messageString = LocaleController.formatString("EncryptedChatStartedOutgoing", R.string.EncryptedChatStartedOutgoing, "");
+                            }
+                        } else {
+                            messageString = LocaleController.getString("EncryptedChatStartedIncoming", R.string.EncryptedChatStartedIncoming);
+                        }
+                    }
+                }
+            }
+            if (lastMessageDate != 0) {
+                timeString = LocaleController.stringForMessageListDate(lastMessageDate);
+            }
+            drawCheck1 = false;
+            drawCheck2 = false;
+            drawClock = false;
+            drawCount = false;
+            drawError = false;
+        } else {
+            TLRPC.User fromUser = MessagesController.getInstance().getUser(message.messageOwner.from_id);
+
+            if (lastMessageDate != 0) {
+                timeString = LocaleController.stringForMessageListDate(lastMessageDate);
+            } else {
+                timeString = LocaleController.stringForMessageListDate(message.messageOwner.date);
+            }
+            if (printingString != null) {
+                lastPrintString = messageString = printingString;
+                currentMessagePaint = messagePrintingPaint;
+            } else {
+                lastPrintString = null;
+                if (message.messageOwner instanceof TLRPC.TL_messageService) {
+                    messageString = message.messageText;
+                    currentMessagePaint = messagePrintingPaint;
+                } else {
+                    if (chat != null && chat.id > 0) {
+                        String name = "";
+                        if (message.isOut()) {
+                            name = LocaleController.getString("FromYou", R.string.FromYou);
+                        } else {
+                            if (fromUser != null) {
+                                if (fromUser.first_name.length() > 0) {
+                                    name = fromUser.first_name;
+                                } else {
+                                    name = fromUser.last_name;
+                                }
+                            }
+                        }
+                        checkMessage = false;
+                        if (message.caption != null) {
+                            String mess = message.caption.toString();
+                            if (mess.length() > 150) {
+                                mess = mess.substring(0, 150);
+                            }
+                            mess = mess.replace("\n", " ");
+                            messageString = Emoji.replaceEmoji(AndroidUtilities.replaceTags(String.format("<c#ff4d83b3>%s:</c> <c#ff808080>%s</c>", name, mess)), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20));
+                        } else {
+                            if (message.messageOwner.media != null && !message.isMediaEmpty()) {
+                                currentMessagePaint = messagePrintingPaint;
+                                messageString = Emoji.replaceEmoji(AndroidUtilities.replaceTags(String.format("<c#ff4d83b3>%s:</c> <c#ff4d83b3>%s</c>", name, message.messageText)), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20));
+                            } else {
+                                if (message.messageOwner.message != null) {
+                                    String mess = message.messageOwner.message;
+                                    if (mess.length() > 150) {
+                                        mess = mess.substring(0, 150);
+                                    }
+                                    mess = mess.replace("\n", " ");
+                                    messageString = Emoji.replaceEmoji(AndroidUtilities.replaceTags(String.format("<c#ff4d83b3>%s:</c> <c#ff808080>%s</c>", name, mess)), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20));
+                                }
+                            }
+                        }
+                    } else {
+                        if (message.caption != null) {
+                            messageString = message.caption;
+                        } else {
+                            messageString = message.messageText;
+                            if (message.messageOwner.media != null && !message.isMediaEmpty()) {
+                                currentMessagePaint = messagePrintingPaint;
+                            }
+                        }
+                    }
+                }
+            }
+
+            if (unreadCount != 0) {
+                drawCount = true;
+                countString = String.format("%d", unreadCount);
+            } else {
+                drawCount = false;
+            }
+
+            if (message.isOut()) {
+                if (message.isSending()) {
+                    drawCheck1 = false;
+                    drawCheck2 = false;
+                    drawClock = true;
+                    drawError = false;
+                } else if (message.isSendError()) {
+                    drawCheck1 = false;
+                    drawCheck2 = false;
+                    drawClock = false;
+                    drawError = true;
+                    drawCount = false;
+                } else if (message.isSent()) {
+                    if (!message.isUnread()) {
+                        drawCheck1 = true;
+                        drawCheck2 = true;
+                    } else {
+                        drawCheck1 = false;
+                        drawCheck2 = true;
+                    }
+                    drawClock = false;
+                    drawError = false;
+                }
+            } else {
+                drawCheck1 = false;
+                drawCheck2 = false;
+                drawClock = false;
+                drawError = false;
+            }
+        }
+
+        int timeWidth = (int) Math.ceil(timePaint.measureText(timeString));
+        timeLayout = new StaticLayout(timeString, timePaint, timeWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+        if (!LocaleController.isRTL) {
+            timeLeft = getMeasuredWidth() - AndroidUtilities.dp(15) - timeWidth;
+        } else {
+            timeLeft = AndroidUtilities.dp(15);
+        }
+
+        if (chat != null) {
+            nameString = chat.title;
+        } else if (user != null) {
+            if (user.id / 1000 != 777 && user.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(user.id) == null) {
+                if (ContactsController.getInstance().contactsDict.size() == 0 && (!ContactsController.getInstance().contactsLoaded || ContactsController.getInstance().isLoadingContacts())) {
+                    nameString = ContactsController.formatName(user.first_name, user.last_name);
+                } else {
+                    if (user.phone != null && user.phone.length() != 0) {
+                        nameString = PhoneFormat.getInstance().format("+" + user.phone);
+                    } else {
+                        currentNamePaint = nameUnknownPaint;
+                        nameString = ContactsController.formatName(user.first_name, user.last_name);
+                    }
+                }
+            } else {
+                nameString = ContactsController.formatName(user.first_name, user.last_name);
+            }
+            if (encryptedChat != null) {
+                currentNamePaint = nameEncryptedPaint;
+            }
+        }
+        if (nameString.length() == 0) {
+            nameString = LocaleController.getString("HiddenName", R.string.HiddenName);
+        }
+
+        int nameWidth;
+
+        if (!LocaleController.isRTL) {
+            nameWidth = getMeasuredWidth() - nameLeft - AndroidUtilities.dp(14) - timeWidth;
+        } else {
+            nameWidth = getMeasuredWidth() - nameLeft - AndroidUtilities.dp(AndroidUtilities.leftBaseline) - timeWidth;
+            nameLeft += timeWidth;
+        }
+        if (drawNameLock) {
+            nameWidth -= AndroidUtilities.dp(4) + lockDrawable.getIntrinsicWidth();
+        } else if (drawNameGroup) {
+            nameWidth -= AndroidUtilities.dp(4) + groupDrawable.getIntrinsicWidth();
+        } else if (drawNameBroadcast) {
+            nameWidth -= AndroidUtilities.dp(4) + broadcastDrawable.getIntrinsicWidth();
+        }
+        if (drawClock) {
+            int w = clockDrawable.getIntrinsicWidth() + AndroidUtilities.dp(5);
+            nameWidth -= w;
+            if (!LocaleController.isRTL) {
+                checkDrawLeft = timeLeft - w;
+            } else {
+                checkDrawLeft = timeLeft + timeWidth + AndroidUtilities.dp(5);
+                nameLeft += w;
+            }
+        } else if (drawCheck2) {
+            int w = checkDrawable.getIntrinsicWidth() + AndroidUtilities.dp(5);
+            nameWidth -= w;
+            if (drawCheck1) {
+                nameWidth -= halfCheckDrawable.getIntrinsicWidth() - AndroidUtilities.dp(8);
+                if (!LocaleController.isRTL) {
+                    halfCheckDrawLeft = timeLeft - w;
+                    checkDrawLeft = halfCheckDrawLeft - AndroidUtilities.dp(5.5f);
+                } else {
+                    checkDrawLeft = timeLeft + timeWidth + AndroidUtilities.dp(5);
+                    halfCheckDrawLeft = checkDrawLeft + AndroidUtilities.dp(5.5f);
+                    nameLeft += w + halfCheckDrawable.getIntrinsicWidth() - AndroidUtilities.dp(8);
+                }
+            } else {
+                if (!LocaleController.isRTL) {
+                    checkDrawLeft = timeLeft - w;
+                } else {
+                    checkDrawLeft = timeLeft + timeWidth + AndroidUtilities.dp(5);
+                    nameLeft += w;
+                }
+            }
+        }
+
+        if (dialogMuted) {
+            int w = AndroidUtilities.dp(6) + muteDrawable.getIntrinsicWidth();
+            nameWidth -= w;
+            if (LocaleController.isRTL) {
+                nameLeft += w;
+            }
+        }
+
+        nameWidth = Math.max(AndroidUtilities.dp(12), nameWidth);
+        CharSequence nameStringFinal = TextUtils.ellipsize(nameString.replace("\n", " "), currentNamePaint, nameWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
+        try {
+            nameLayout = new StaticLayout(nameStringFinal, currentNamePaint, nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+
+        int messageWidth = getMeasuredWidth() - AndroidUtilities.dp(AndroidUtilities.leftBaseline + 16);
+        int avatarLeft;
+        if (!LocaleController.isRTL) {
+            messageLeft = AndroidUtilities.dp(AndroidUtilities.leftBaseline);
+            avatarLeft = AndroidUtilities.dp(AndroidUtilities.isTablet() ? 13 : 9);
+        } else {
+            messageLeft = AndroidUtilities.dp(16);
+            avatarLeft = getMeasuredWidth() - AndroidUtilities.dp(AndroidUtilities.isTablet() ? 65 : 61);
+        }
+        avatarImage.setImageCoords(avatarLeft, avatarTop, AndroidUtilities.dp(52), AndroidUtilities.dp(52));
+        if (drawError) {
+            int w = errorDrawable.getIntrinsicWidth() + AndroidUtilities.dp(8);
+            messageWidth -= w;
+            if (!LocaleController.isRTL) {
+                errorLeft = getMeasuredWidth() - errorDrawable.getIntrinsicWidth() - AndroidUtilities.dp(11);
+            } else {
+                errorLeft = AndroidUtilities.dp(11);
+                messageLeft += w;
+            }
+        } else if (countString != null) {
+            countWidth = Math.max(AndroidUtilities.dp(12), (int)Math.ceil(countPaint.measureText(countString)));
+            countLayout = new StaticLayout(countString, countPaint, countWidth, Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, false);
+            int w = countWidth + AndroidUtilities.dp(18);
+            messageWidth -= w;
+            if (!LocaleController.isRTL) {
+                countLeft = getMeasuredWidth() - countWidth - AndroidUtilities.dp(19);
+            } else {
+                countLeft = AndroidUtilities.dp(19);
+                messageLeft += w;
+            }
+            drawCount = true;
+        } else {
+            drawCount = false;
+        }
+
+        if (checkMessage) {
+            if (messageString == null) {
+                messageString = "";
+            }
+            String mess = messageString.toString();
+            if (mess.length() > 150) {
+                mess = mess.substring(0, 150);
+            }
+            mess = mess.replace("\n", " ");
+            messageString = Emoji.replaceEmoji(mess, messagePaint.getFontMetricsInt(), AndroidUtilities.dp(17));
+        }
+        messageWidth = Math.max(AndroidUtilities.dp(12), messageWidth);
+        CharSequence messageStringFinal = TextUtils.ellipsize(messageString, currentMessagePaint, messageWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
+        try {
+            messageLayout = new StaticLayout(messageStringFinal, currentMessagePaint, messageWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+
+        double widthpx;
+        float left;
+        if (LocaleController.isRTL) {
+            if (nameLayout != null && nameLayout.getLineCount() > 0) {
+                left = nameLayout.getLineLeft(0);
+                widthpx = Math.ceil(nameLayout.getLineWidth(0));
+                if (dialogMuted) {
+                    nameMuteLeft = (int) (nameLeft + (nameWidth - widthpx) - AndroidUtilities.dp(6) - muteDrawable.getIntrinsicWidth());
+                }
+                if (left == 0) {
+                    if (widthpx < nameWidth) {
+                        nameLeft += (nameWidth - widthpx);
+                    }
+                }
+            }
+            if (messageLayout != null && messageLayout.getLineCount() > 0) {
+                left = messageLayout.getLineLeft(0);
+                if (left == 0) {
+                    widthpx = Math.ceil(messageLayout.getLineWidth(0));
+                    if (widthpx < messageWidth) {
+                        messageLeft += (messageWidth - widthpx);
+                    }
+                }
+            }
+        } else {
+            if (nameLayout != null && nameLayout.getLineCount() > 0) {
+                left = nameLayout.getLineRight(0);
+                if (left == nameWidth) {
+                    widthpx = Math.ceil(nameLayout.getLineWidth(0));
+                    if (widthpx < nameWidth) {
+                        nameLeft -= (nameWidth - widthpx);
+                    }
+                }
+                if (dialogMuted) {
+                    nameMuteLeft = (int) (nameLeft + left + AndroidUtilities.dp(6));
+                }
+            }
+            if (messageLayout != null && messageLayout.getLineCount() > 0) {
+                left = messageLayout.getLineRight(0);
+                if (left == messageWidth) {
+                    widthpx = Math.ceil(messageLayout.getLineWidth(0));
+                    if (widthpx < messageWidth) {
+                        messageLeft -= (messageWidth - widthpx);
+                    }
+                }
+            }
+        }
+    }
+
+    public void setDialogSelected(boolean value) {
+        if (isSelected != value) {
+            invalidate();
+        }
+        isSelected = value;
+    }
+
+    public void checkCurrentDialogIndex() {
+        TLRPC.TL_dialog dialog = null;
+        if (isServerOnly) {
+            if (index < MessagesController.getInstance().dialogsServerOnly.size()) {
+                dialog = MessagesController.getInstance().dialogsServerOnly.get(index);
+            }
+        } else {
+            if (index < MessagesController.getInstance().dialogs.size()) {
+                dialog = MessagesController.getInstance().dialogs.get(index);
+            }
+        }
+        if (dialog != null) {
+            if (currentDialogId != dialog.id || message != null && message.getId() != dialog.top_message || unreadCount != dialog.unread_count) {
+                currentDialogId = dialog.id;
+                update(0);
+            }
+        }
+    }
+
+    public void update(int mask) {
+        if (isDialogCell) {
+            TLRPC.TL_dialog dialog = MessagesController.getInstance().dialogs_dict.get(currentDialogId);
+            if (dialog != null && mask == 0) {
+                message = MessagesController.getInstance().dialogMessage.get(dialog.top_message);
+                lastUnreadState = message != null && message.isUnread();
+                unreadCount = dialog.unread_count;
+                lastMessageDate = dialog.last_message_date;
+                if (message != null) {
+                    lastSendState = message.messageOwner.send_state;
+                }
+            }
+        }
+
+        if (mask != 0) {
+            boolean continueUpdate = false;
+            if (isDialogCell) {
+                if ((mask & MessagesController.UPDATE_MASK_USER_PRINT) != 0) {
+                    CharSequence printString = MessagesController.getInstance().printingStrings.get(currentDialogId);
+                    if (lastPrintString != null && printString == null || lastPrintString == null && printString != null || lastPrintString != null && printString != null && !lastPrintString.equals(printString)) {
+                        continueUpdate = true;
+                    }
+                }
+            }
+            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_AVATAR) != 0) {
+                if (chat == null) {
+                    continueUpdate = true;
+                }
+            }
+            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
+                if (chat == null) {
+                    continueUpdate = true;
+                }
+            }
+            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_CHAT_AVATAR) != 0) {
+                if (user == null) {
+                    continueUpdate = true;
+                }
+            }
+            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_CHAT_NAME) != 0) {
+                if (user == null) {
+                    continueUpdate = true;
+                }
+            }
+            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_READ_DIALOG_MESSAGE) != 0) {
+                if (message != null && lastUnreadState != message.isUnread()) {
+                    lastUnreadState = message.isUnread();
+                    continueUpdate = true;
+                } else if (isDialogCell) {
+                    TLRPC.TL_dialog dialog = MessagesController.getInstance().dialogs_dict.get(currentDialogId);
+                    if (dialog != null && unreadCount != dialog.unread_count) {
+                        unreadCount = dialog.unread_count;
+                        continueUpdate = true;
+                    }
+                }
+            }
+            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_SEND_STATE) != 0) {
+                if (message != null && lastSendState != message.messageOwner.send_state) {
+                    lastSendState = message.messageOwner.send_state;
+                    continueUpdate = true;
+                }
+            }
+
+            if (!continueUpdate) {
+                return;
+            }
+        }
+
+        dialogMuted = isDialogCell && MessagesController.getInstance().isDialogMuted(currentDialogId);
+        user = null;
+        chat = null;
+        encryptedChat = null;
+
+        int lower_id = (int)currentDialogId;
+        int high_id = (int)(currentDialogId >> 32);
+        if (lower_id != 0) {
+            if (high_id == 1) {
+                chat = MessagesController.getInstance().getChat(lower_id);
+            } else {
+                if (lower_id < 0) {
+                    chat = MessagesController.getInstance().getChat(-lower_id);
+                } else {
+                    user = MessagesController.getInstance().getUser(lower_id);
+                }
+            }
+        } else {
+            encryptedChat = MessagesController.getInstance().getEncryptedChat(high_id);
+            if (encryptedChat != null) {
+                user = MessagesController.getInstance().getUser(encryptedChat.user_id);
+            }
+        }
+
+        TLRPC.FileLocation photo = null;
+        if (user != null) {
+            if (user.photo != null) {
+                photo = user.photo.photo_small;
+            }
+            avatarDrawable.setInfo(user);
+        } else if (chat != null) {
+            if (chat.photo != null) {
+                photo = chat.photo.photo_small;
+            }
+            avatarDrawable.setInfo(chat);
+        }
+        avatarImage.setImage(photo, "50_50", avatarDrawable, null, false);
+
+        if (getMeasuredWidth() != 0 || getMeasuredHeight() != 0) {
+            buildLayout();
+        } else {
+            requestLayout();
+        }
+
+        invalidate();
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        if (currentDialogId == 0) {
+            return;
+        }
+
+        if (isSelected) {
+            canvas.drawRect(0, 0, getMeasuredWidth(), getMeasuredHeight(), backPaint);
+        }
+
+        if (drawNameLock) {
+            setDrawableBounds(lockDrawable, nameLockLeft, nameLockTop);
+            lockDrawable.draw(canvas);
+        } else if (drawNameGroup) {
+            setDrawableBounds(groupDrawable, nameLockLeft, nameLockTop);
+            groupDrawable.draw(canvas);
+        } else if (drawNameBroadcast) {
+            setDrawableBounds(broadcastDrawable, nameLockLeft, nameLockTop);
+            broadcastDrawable.draw(canvas);
+        }
+
+        if (nameLayout != null) {
+            canvas.save();
+            canvas.translate(nameLeft, AndroidUtilities.dp(13));
+            nameLayout.draw(canvas);
+            canvas.restore();
+        }
+
+        canvas.save();
+        canvas.translate(timeLeft, timeTop);
+        timeLayout.draw(canvas);
+        canvas.restore();
+
+        if (messageLayout != null) {
+            canvas.save();
+            canvas.translate(messageLeft, messageTop);
+            messageLayout.draw(canvas);
+            canvas.restore();
+        }
+
+        if (drawClock) {
+            setDrawableBounds(clockDrawable, checkDrawLeft, checkDrawTop);
+            clockDrawable.draw(canvas);
+        } else if (drawCheck2) {
+            if (drawCheck1) {
+                setDrawableBounds(halfCheckDrawable, halfCheckDrawLeft, checkDrawTop);
+                halfCheckDrawable.draw(canvas);
+                setDrawableBounds(checkDrawable, checkDrawLeft, checkDrawTop);
+                checkDrawable.draw(canvas);
+            } else {
+                setDrawableBounds(checkDrawable, checkDrawLeft, checkDrawTop);
+                checkDrawable.draw(canvas);
+            }
+        }
+
+        if (dialogMuted) {
+            setDrawableBounds(muteDrawable, nameMuteLeft, AndroidUtilities.dp(16.5f));
+            muteDrawable.draw(canvas);
+        }
+
+        if (drawError) {
+            setDrawableBounds(errorDrawable, errorLeft, errorTop);
+            errorDrawable.draw(canvas);
+        } else if (drawCount) {
+            setDrawableBounds(countDrawable, countLeft - AndroidUtilities.dp(5.5f), countTop, countWidth + AndroidUtilities.dp(11), countDrawable.getIntrinsicHeight());
+            countDrawable.draw(canvas);
+            canvas.save();
+            canvas.translate(countLeft, countTop + AndroidUtilities.dp(4));
+            countLayout.draw(canvas);
+            canvas.restore();
+        }
+
+        if (useSeparator) {
+            if (LocaleController.isRTL) {
+                canvas.drawLine(0, getMeasuredHeight() - 1, getMeasuredWidth() - AndroidUtilities.dp(AndroidUtilities.leftBaseline), getMeasuredHeight() - 1, linePaint);
+            } else {
+                canvas.drawLine(AndroidUtilities.dp(AndroidUtilities.leftBaseline), getMeasuredHeight() - 1, getMeasuredWidth(), getMeasuredHeight() - 1, linePaint);
+            }
+        }
+
+        avatarImage.draw(canvas);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
index aaa57b994..31584c160 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
@@ -55,10 +55,9 @@
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.ActionBar.BottomSheet;
 import org.telegram.ui.ActionBar.MenuDrawable;
-import org.telegram.ui.Adapters.DialogsAdapter;
-import org.telegram.ui.Adapters.DialogsSearchAdapter;
-import org.telegram.ui.Cells.DialogCell;
-import org.telegram.ui.Cells.UserCell;
+import org.telegram.ui.Adapters.PostsAdapter;
+import org.telegram.ui.Adapters.PostsSearchAdapter;
+import org.telegram.ui.Cells.PostCell;
 import org.telegram.ui.Components.EmptyTextProgressView;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.RecyclerListView;
@@ -73,8 +72,8 @@
 
     private RecyclerListView listView;
     private LinearLayoutManager layoutManager;
-    private DialogsAdapter dialogsAdapter;
-    private DialogsSearchAdapter dialogsSearchAdapter;
+    private PostsAdapter postsAdapter;
+    private PostsSearchAdapter postsSearchAdapter;
     private EmptyTextProgressView searchEmptyView;
     private ProgressBar progressView;
     private LinearLayout emptyView;
@@ -216,13 +215,13 @@ public boolean onSearchCollapse() {
                         ViewProxy.setTranslationY(floatingButton, AndroidUtilities.dp(100));
                         hideFloatingButton(false);
                     }
-                    if (listView.getAdapter() != dialogsAdapter) {
-                        listView.setAdapter(dialogsAdapter);
-                        dialogsAdapter.notifyDataSetChanged();
+                    if (listView.getAdapter() != postsAdapter) {
+                        listView.setAdapter(postsAdapter);
+                        postsAdapter.notifyDataSetChanged();
                     }
                 }
-                if (dialogsSearchAdapter != null) {
-                    dialogsSearchAdapter.searchDialogs(null, false);
+                if (postsSearchAdapter != null) {
+                    postsSearchAdapter.searchDialogs(null, false);
                 }
                 updatePasscodeButton();
                 return true;
@@ -233,9 +232,9 @@ public void onTextChanged(EditText editText) {
                 String text = editText.getText().toString();
                 if (text.length() != 0) {
                     searchWas = true;
-                    if (dialogsSearchAdapter != null) {
-                        listView.setAdapter(dialogsSearchAdapter);
-                        dialogsSearchAdapter.notifyDataSetChanged();
+                    if (postsSearchAdapter != null) {
+                        listView.setAdapter(postsSearchAdapter);
+                        postsSearchAdapter.notifyDataSetChanged();
                     }
                     if (searchEmptyView != null && listView.getEmptyView() != searchEmptyView) {
                         emptyView.setVisibility(View.INVISIBLE);
@@ -244,8 +243,8 @@ public void onTextChanged(EditText editText) {
                         listView.setEmptyView(searchEmptyView);
                     }
                 }
-                if (dialogsSearchAdapter != null) {
-                    dialogsSearchAdapter.searchDialogs(text, serverOnly);
+                if (postsSearchAdapter != null) {
+                    postsSearchAdapter.searchDialogs(text, serverOnly);
                 }
             }
         });
@@ -310,17 +309,17 @@ public void onItemClick(View view, int position) {
                 long dialog_id = 0;
                 int message_id = 0;
                 RecyclerView.Adapter adapter = listView.getAdapter();
-                if (adapter == dialogsAdapter) {
-                    TLRPC.TL_dialog dialog = dialogsAdapter.getItem(position);
+                if (adapter == postsAdapter) {
+                    TLRPC.TL_dialog dialog = postsAdapter.getItem(position);
                     if (dialog == null) {
                         return;
                     }
                     dialog_id = dialog.id;
-                } else if (adapter == dialogsSearchAdapter) {
-                    Object obj = dialogsSearchAdapter.getItem(position);
+                } else if (adapter == postsSearchAdapter) {
+                    Object obj = postsSearchAdapter.getItem(position);
                     if (obj instanceof TLRPC.User) {
                         dialog_id = ((TLRPC.User) obj).id;
-                        if (dialogsSearchAdapter.isGlobalSearch(position)) {
+                        if (postsSearchAdapter.isGlobalSearch(position)) {
                             ArrayList<TLRPC.User> users = new ArrayList<>();
                             users.add((TLRPC.User) obj);
                             MessagesController.getInstance().putUsers(users, false);
@@ -338,7 +337,7 @@ public void onItemClick(View view, int position) {
                         MessageObject messageObject = (MessageObject) obj;
                         dialog_id = messageObject.getDialogId();
                         message_id = messageObject.getId();
-                        dialogsSearchAdapter.addHashtagsFromMessage(dialogsSearchAdapter.getLastSearchString());
+                        postsSearchAdapter.addHashtagsFromMessage(postsSearchAdapter.getLastSearchString());
                     } else if (obj instanceof String) {
                         actionBar.openSearchField((String) obj);
                     }
@@ -378,8 +377,8 @@ public void onItemClick(View view, int position) {
                         if (openedDialogId == dialog_id) {
                             return;
                         }
-                        if (dialogsAdapter != null) {
-                            dialogsAdapter.setOpenedDialogId(openedDialogId = dialog_id);
+                        if (postsAdapter != null) {
+                            postsAdapter.setOpenedDialogId(openedDialogId = dialog_id);
                             updateVisibleRows(MessagesController.UPDATE_MASK_SELECT_DIALOG);
                         }
                     }
@@ -398,8 +397,8 @@ public void onItemClick(View view, int position) {
                 if (onlySelect || searching && searchWas || getParentActivity() == null) {
                     if (searchWas && searching) {
                         RecyclerView.Adapter adapter = listView.getAdapter();
-                        if (adapter == dialogsSearchAdapter) {
-                            Object item = dialogsSearchAdapter.getItem(position);
+                        if (adapter == postsSearchAdapter) {
+                            Object item = postsSearchAdapter.getItem(position);
                             if (item instanceof String) {
                                 AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                                 builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
@@ -407,7 +406,7 @@ public void onItemClick(View view, int position) {
                                 builder.setPositiveButton(LocaleController.getString("ClearButton", R.string.ClearButton).toUpperCase(), new DialogInterface.OnClickListener() {
                                     @Override
                                     public void onClick(DialogInterface dialogInterface, int i) {
-                                        dialogsSearchAdapter.clearRecentHashtags();
+                                        postsSearchAdapter.clearRecentHashtags();
                                     }
                                 });
                                 builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
@@ -574,8 +573,8 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                 int totalItemCount = recyclerView.getAdapter().getItemCount();
 
                 if (searching && searchWas) {
-                    if (visibleItemCount > 0 && layoutManager.findLastVisibleItemPosition() == totalItemCount - 1 && !dialogsSearchAdapter.isMessagesSearchEndReached()) {
-                        dialogsSearchAdapter.loadMoreSearchMessages();
+                    if (visibleItemCount > 0 && layoutManager.findLastVisibleItemPosition() == totalItemCount - 1 && !postsSearchAdapter.isMessagesSearchEndReached()) {
+                        postsSearchAdapter.loadMoreSearchMessages();
                     }
                     return;
                 }
@@ -611,11 +610,11 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
         });
 
         if (searchString == null) {
-            dialogsAdapter = new DialogsAdapter(context, serverOnly);
+            postsAdapter = new PostsAdapter(context, serverOnly);
             if (AndroidUtilities.isTablet() && openedDialogId != 0) {
-                dialogsAdapter.setOpenedDialogId(openedDialogId);
+                postsAdapter.setOpenedDialogId(openedDialogId);
             }
-            listView.setAdapter(dialogsAdapter);
+            listView.setAdapter(postsAdapter);
         }
         int type = 0;
         if (searchString != null) {
@@ -623,8 +622,8 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
         } else if (!onlySelect) {
             type = 1;
         }
-        dialogsSearchAdapter = new DialogsSearchAdapter(context, type);
-        dialogsSearchAdapter.setDelegate(new DialogsSearchAdapter.MessagesActivitySearchAdapterDelegate() {
+        postsSearchAdapter = new PostsSearchAdapter(context, type);
+        postsSearchAdapter.setDelegate(new PostsSearchAdapter.MessagesActivitySearchAdapterDelegate() {
             @Override
             public void searchStateChanged(boolean search) {
                 if (searching && searchWas && searchEmptyView != null) {
@@ -656,11 +655,11 @@ public void searchStateChanged(boolean search) {
     @Override
     public void onResume() {
         super.onResume();
-        if (dialogsAdapter != null) {
-            dialogsAdapter.notifyDataSetChanged();
+        if (postsAdapter != null) {
+            postsAdapter.notifyDataSetChanged();
         }
-        if (dialogsSearchAdapter != null) {
-            dialogsSearchAdapter.notifyDataSetChanged();
+        if (postsSearchAdapter != null) {
+            postsSearchAdapter.notifyDataSetChanged();
         }
     }
 
@@ -689,15 +688,15 @@ public void onGlobalLayout() {
     @SuppressWarnings("unchecked")
     public void didReceivedNotification(int id, Object... args) {
         if (id == NotificationCenter.dialogsNeedReload) {
-            if (dialogsAdapter != null) {
-                if (dialogsAdapter.isDataSetChanged()) {
-                    dialogsAdapter.notifyDataSetChanged();
+            if (postsAdapter != null) {
+                if (postsAdapter.isDataSetChanged()) {
+                    postsAdapter.notifyDataSetChanged();
                 } else {
                     updateVisibleRows(MessagesController.UPDATE_MASK_NEW_MESSAGE);
                 }
             }
-            if (dialogsSearchAdapter != null) {
-                dialogsSearchAdapter.notifyDataSetChanged();
+            if (postsSearchAdapter != null) {
+                postsSearchAdapter.notifyDataSetChanged();
             }
             if (listView != null) {
                 try {
@@ -742,8 +741,8 @@ public void didReceivedNotification(int id, Object... args) {
                 } else {
                     openedDialogId = dialog_id;
                 }
-                if (dialogsAdapter != null) {
-                    dialogsAdapter.setOpenedDialogId(openedDialogId);
+                if (postsAdapter != null) {
+                    postsAdapter.setOpenedDialogId(openedDialogId);
                 }
                 updateVisibleRows(MessagesController.UPDATE_MASK_SELECT_DIALOG);
             }
@@ -790,8 +789,8 @@ private void updateVisibleRows(int mask) {
         int count = listView.getChildCount();
         for (int a = 0; a < count; a++) {
             View child = listView.getChildAt(a);
-            if (child instanceof DialogCell) {
-                DialogCell cell = (DialogCell) child;
+            if (child instanceof PostCell) {
+                PostCell cell = (PostCell) child;
                 if ((mask & MessagesController.UPDATE_MASK_NEW_MESSAGE) != 0) {
                     cell.checkCurrentDialogIndex();
                     if (!serverOnly && AndroidUtilities.isTablet()) {
@@ -804,9 +803,10 @@ private void updateVisibleRows(int mask) {
                 } else {
                     cell.update(mask);
                 }
-            } else if (child instanceof UserCell) {
-                ((UserCell) child).update(mask);
             }
+//            else if (child instanceof UserCell) {
+//                ((UserCell) child).update(mask);
+//            }
         }
     }
 
