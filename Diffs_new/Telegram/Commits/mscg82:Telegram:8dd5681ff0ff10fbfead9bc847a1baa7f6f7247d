diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index d5e762c2f..7b88e4584 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -38,6 +38,7 @@
 import org.telegram.objects.MessageObject;
 import org.telegram.objects.PhotoObject;
 import org.telegram.objects.VibrationSpeed;
+import org.telegram.ui.Dialog.VibrationCountDialog;
 import org.telegram.ui.LaunchActivity;
 import org.telegram.ui.ApplicationLoader;
 
@@ -4560,16 +4561,19 @@ private void showInAppNotification(MessageObject messageObject) {
 
             boolean needVibrate = false;
             VibrationSpeed speed = VibrationSpeed.getDefault();
+            int vibrationCount = VibrationCountDialog.DEFAULT_VIBRATION_COUNT;
 
             if (user_id != 0) {
                 userSoundPath = preferences.getString("sound_path_" + user_id, null);
                 needVibrate = globalVibrate;
                 speed = VibrationSpeed.fromValue(preferences.getInt("VibrationSpeed", 0));
+                vibrationCount = preferences.getInt("VibrationCount", vibrationCount);
             }
             if (chat_id != 0) {
                 chatSoundPath = preferences.getString("sound_chat_path_" + chat_id, null);
                 needVibrate = groupVibrate;
                 speed = VibrationSpeed.fromValue(preferences.getInt("VibrationSpeedGroup", 0));
+                vibrationCount = preferences.getInt("VibrationCountGroup", vibrationCount);
             }
 
             String choosenSoundPath = null;
@@ -4613,20 +4617,35 @@ private void showInAppNotification(MessageObject messageObject) {
             int notificationDefaults = 0;
 
             if (needVibrate) {
+                long pause, duration;
                 switch (speed) {
                     case FAST:
-                        mBuilder.setVibrate(new long[]{0, 100, 0, 100});
+                        pause = 0;
+                        duration = 100;
                         break;
                     case MEDIUM:
-                        mBuilder.setVibrate(new long[]{0, 300, 200, 300});
+                        pause = 200;
+                        duration = 300;
                         break;
                     case SLOW:
-                        mBuilder.setVibrate(new long[]{0, 800, 200, 800});
+                        pause = 200;
+                        duration = 800;
                         break;
                     case DEFAULT:
                     default:
+                        pause = -1;
+                        duration = -1;
                         notificationDefaults = notificationDefaults | Notification.DEFAULT_VIBRATE;
                 }
+                if(pause >= 0 && duration >= 0) {
+                    long pattern[] = new long[vibrationCount * 2];
+                    pattern[0] = 0l;
+                    for(int i = 1, l = pattern.length; i < l; i++) {
+                        pattern[i] = ((i % 2 != 0) ? duration : pause);
+                    }
+
+                    mBuilder.setVibrate(pattern);
+                }
             }
             if (choosenSoundPath != null && !choosenSoundPath.equals("NoSound")) {
                 if (choosenSoundPath.equals(defaultPath)) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Dialog/VibrationCountDialog.java b/TMessagesProj/src/main/java/org/telegram/ui/Dialog/VibrationCountDialog.java
new file mode 100644
index 000000000..bc7877b7c
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Dialog/VibrationCountDialog.java
@@ -0,0 +1,84 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.telegram.ui.Dialog;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.content.DialogInterface;
+import android.os.Bundle;
+import android.support.v4.app.DialogFragment;
+
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.R;
+import org.telegram.objects.VibrationSpeed;
+
+import java.io.Serializable;
+
+public class VibrationCountDialog extends DialogFragment {
+
+    public static final int DEFAULT_VIBRATION_COUNT = 2;
+    public static final String KEY_CURRENT_COUNT = "currentCount";
+    public static final String KEY_LISTENER = "mListener";
+
+    public static interface VibrationCountSelectionListener extends Serializable {
+        public void onCountSelected(DialogFragment dialog, int selectedCount);
+    }
+
+    private int count;
+    private VibrationCountSelectionListener mListener;
+
+    public VibrationCountDialog() {
+        count = DEFAULT_VIBRATION_COUNT;
+    }
+
+    @Override
+    public void setArguments(Bundle args) {
+        super.setArguments(args);
+
+        count = args.getInt(KEY_CURRENT_COUNT, DEFAULT_VIBRATION_COUNT);
+        try {
+            mListener = (VibrationCountSelectionListener) args.get(KEY_LISTENER);
+        } catch (ClassCastException e) {}
+    }
+
+    @Override
+    public void onAttach(Activity activity) {
+        super.onAttach(activity);
+        if(mListener == null) {
+            // Verify that the host activity implements the callback interface
+            try {
+                mListener = (VibrationCountSelectionListener) activity;
+            } catch (ClassCastException e) {
+                // The activity doesn't implement the interface, throw exception
+                throw new ClassCastException(activity.toString() + " must implement VibrationCountSelectionListener");
+            }
+        }
+    }
+
+    @Override
+    public Dialog onCreateDialog(Bundle savedInstanceState) {
+        String counts[] = new String[10];
+        for(int i = 0, l = counts.length; i < l; i++)
+            counts[i] = String.valueOf(i + 1);
+
+        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity())
+            .setTitle(LocaleController.getString("VibrateCountTitle", R.string.VibrateCountTitle))
+            .setSingleChoiceItems(counts, count - 1, new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialog, int which) {
+                    mListener.onCountSelected(VibrationCountDialog.this, which + 1);
+
+                    VibrationCountDialog.this.dismiss();
+                }
+            });
+
+        return builder.create();
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Dialog/VibrationSpeedDialog.java b/TMessagesProj/src/main/java/org/telegram/ui/Dialog/VibrationSpeedDialog.java
index 89d2adfd2..b3a91cbdf 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Dialog/VibrationSpeedDialog.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Dialog/VibrationSpeedDialog.java
@@ -15,28 +15,39 @@
 import android.os.Bundle;
 import android.support.v4.app.DialogFragment;
 
-import com.google.android.gms.internal.cu;
-
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
 import org.telegram.objects.VibrationSpeed;
 
+import java.io.Serializable;
+
 public class VibrationSpeedDialog extends DialogFragment {
 
-    public static interface VibrationSpeedSelectionListener {
+    public static final String KEY_CURRENT_SPEED = "currentSpeed";
+    public static final String KEY_LISTENER = "mListener";
+
+    public static interface VibrationSpeedSelectionListener extends Serializable {
         public void onSpeedSelected(DialogFragment dialog, VibrationSpeed selectedSpeed);
     }
 
     private VibrationSpeedSelectionListener mListener;
     private VibrationSpeed currentSpeed;
 
-    public VibrationSpeedDialog(VibrationSpeed currentSpeed) {
-        this(currentSpeed, null);
+    public VibrationSpeedDialog() {
+        this.currentSpeed = VibrationSpeed.getDefault();
     }
 
-    public VibrationSpeedDialog(VibrationSpeed currentSpeed, VibrationSpeedSelectionListener mListener) {
-        this.currentSpeed = currentSpeed;
-        this.mListener = mListener;
+    @Override
+    public void setArguments(Bundle args) {
+        super.setArguments(args);
+
+        try {
+            this.currentSpeed = (VibrationSpeed) args.get(KEY_CURRENT_SPEED);
+        } catch (ClassCastException e) {}
+
+        try {
+            this.mListener = (VibrationSpeedSelectionListener) args.get(KEY_LISTENER);
+        } catch (ClassCastException e) {}
     }
 
     @Override
@@ -45,7 +56,6 @@ public void onAttach(Activity activity) {
         if(mListener == null) {
             // Verify that the host activity implements the callback interface
             try {
-                // Instantiate the NoticeDialogListener so we can send events to the host
                 mListener = (VibrationSpeedSelectionListener) activity;
             } catch (ClassCastException e) {
                 // The activity doesn't implement the interface, throw exception
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java
index f02f9c2ce..907f03ec8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java
@@ -42,6 +42,7 @@
 import org.telegram.messenger.RPCRequest;
 import org.telegram.messenger.Utilities;
 import org.telegram.objects.VibrationSpeed;
+import org.telegram.ui.Dialog.VibrationCountDialog;
 import org.telegram.ui.Dialog.VibrationSpeedDialog;
 import org.telegram.ui.Views.BaseFragment;
 import org.telegram.ui.Views.OnSwipeTouchListener;
@@ -57,23 +58,25 @@
     private static final int SETTINGS_MESSAGE_PREVIEW       = SETTINGS_COUNT++; // 2
     private static final int SETTINGS_MESSAGE_VIBRATE       = SETTINGS_COUNT++; // 3
     private static final int SETTINGS_MESSAGE_VIBRATE_SPD   = SETTINGS_COUNT++; // 4
-    private static final int SETTINGS_MESSAGE_SOUND         = SETTINGS_COUNT++; // 5
-    private static final int SETTINGS_GROUP_NOTIFICATIONS   = SETTINGS_COUNT++; // 6
-    private static final int SETTINGS_GROUP_ALERT           = SETTINGS_COUNT++; // 7
-    private static final int SETTINGS_GROUP_PREVIEW         = SETTINGS_COUNT++; // 8
-    private static final int SETTINGS_GROUP_VIBRATE         = SETTINGS_COUNT++; // 9
-    private static final int SETTINGS_GROUP_VIBRATE_SPD     = SETTINGS_COUNT++; // 10
-    private static final int SETTINGS_GROUP_SOUND           = SETTINGS_COUNT++; // 11
-    private static final int SETTINGS_INAPP_NOTIFICATIONS   = SETTINGS_COUNT++; // 12
-    private static final int SETTINGS_INAPP_SOUND           = SETTINGS_COUNT++; // 13
-    private static final int SETTINGS_INAPP_VIBRATE         = SETTINGS_COUNT++; // 14
-    private static final int SETTINGS_INAPP_PREVIEW         = SETTINGS_COUNT++; // 15
-    private static final int SETTINGS_EVENTS                = SETTINGS_COUNT++; // 16
-    private static final int SETTINGS_CONTACT_JOINED        = SETTINGS_COUNT++; // 17
-    private static final int SETTINGS_PEBBLE                = SETTINGS_COUNT++; // 18
-    private static final int SETTINGS_PEBBLE_ALERT          = SETTINGS_COUNT++; // 19
-    private static final int SETTINGS_RESET                 = SETTINGS_COUNT++; // 20
-    private static final int SETTINGS_RESET_ALL             = SETTINGS_COUNT++; // 21
+    private static final int SETTINGS_MESSAGE_VIBRATE_CNT   = SETTINGS_COUNT++; // 5
+    private static final int SETTINGS_MESSAGE_SOUND         = SETTINGS_COUNT++; // 6
+    private static final int SETTINGS_GROUP_NOTIFICATIONS   = SETTINGS_COUNT++; // 7
+    private static final int SETTINGS_GROUP_ALERT           = SETTINGS_COUNT++; // 8
+    private static final int SETTINGS_GROUP_PREVIEW         = SETTINGS_COUNT++; // 9
+    private static final int SETTINGS_GROUP_VIBRATE         = SETTINGS_COUNT++; // 10
+    private static final int SETTINGS_GROUP_VIBRATE_SPD     = SETTINGS_COUNT++; // 11
+    private static final int SETTINGS_GROUP_VIBRATE_CNT     = SETTINGS_COUNT++; // 12
+    private static final int SETTINGS_GROUP_SOUND           = SETTINGS_COUNT++; // 13
+    private static final int SETTINGS_INAPP_NOTIFICATIONS   = SETTINGS_COUNT++; // 14
+    private static final int SETTINGS_INAPP_SOUND           = SETTINGS_COUNT++; // 15
+    private static final int SETTINGS_INAPP_VIBRATE         = SETTINGS_COUNT++; // 16
+    private static final int SETTINGS_INAPP_PREVIEW         = SETTINGS_COUNT++; // 17
+    private static final int SETTINGS_EVENTS                = SETTINGS_COUNT++; // 18
+    private static final int SETTINGS_CONTACT_JOINED        = SETTINGS_COUNT++; // 19
+    private static final int SETTINGS_PEBBLE                = SETTINGS_COUNT++; // 20
+    private static final int SETTINGS_PEBBLE_ALERT          = SETTINGS_COUNT++; // 21
+    private static final int SETTINGS_RESET                 = SETTINGS_COUNT++; // 22
+    private static final int SETTINGS_RESET_ALL             = SETTINGS_COUNT++; // 23
 
     private ListView listView;
     private boolean reseting = false;
@@ -142,7 +145,10 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                         } else if (index == SETTINGS_GROUP_VIBRATE_SPD) {
                             speed = VibrationSpeed.fromValue(preferences.getInt("VibrationSpeedGroup", 0));
                         }
-                        VibrationSpeedDialog vibrationSpeedDialog = new VibrationSpeedDialog(speed, new VibrationSpeedDialog.VibrationSpeedSelectionListener() {
+                        VibrationSpeedDialog vibrationSpeedDialog = new VibrationSpeedDialog();
+                        Bundle args = new Bundle();
+                        args.putSerializable(VibrationSpeedDialog.KEY_CURRENT_SPEED, speed);
+                        args.putSerializable(VibrationSpeedDialog.KEY_LISTENER, new VibrationSpeedDialog.VibrationSpeedSelectionListener() {
                             @Override
                             public void onSpeedSelected(DialogFragment dialog, VibrationSpeed selectedSpeed) {
                                 SharedPreferences.Editor editor = preferences.edit();
@@ -155,7 +161,35 @@ public void onSpeedSelected(DialogFragment dialog, VibrationSpeed selectedSpeed)
                                 listView.invalidateViews();
                             }
                         });
+                        vibrationSpeedDialog.setArguments(args);
                         vibrationSpeedDialog.show(getFragmentManager(), "VibrationSpeedDialog");
+                    } else if (i == SETTINGS_MESSAGE_VIBRATE_CNT || i == SETTINGS_GROUP_VIBRATE_CNT) {
+                        final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        final int index = i;
+                        int count = VibrationCountDialog.DEFAULT_VIBRATION_COUNT;
+                        if (index == SETTINGS_MESSAGE_VIBRATE_CNT) {
+                            count = preferences.getInt("VibrationCount", count);
+                        } else if (index == SETTINGS_GROUP_VIBRATE_CNT) {
+                            count = preferences.getInt("VibrationCountGroup", count);
+                        }
+                        VibrationCountDialog vibrationCountDialog = new VibrationCountDialog();
+                        Bundle args = new Bundle();
+                        args.putInt(VibrationCountDialog.KEY_CURRENT_COUNT, count);
+                        args.putSerializable(VibrationCountDialog.KEY_LISTENER, new VibrationCountDialog.VibrationCountSelectionListener() {
+                            @Override
+                            public void onCountSelected(DialogFragment dialog, int selectedCount) {
+                                SharedPreferences.Editor editor = preferences.edit();
+                                if (index == SETTINGS_MESSAGE_VIBRATE_CNT) {
+                                    editor.putInt("VibrationCount", selectedCount);
+                                } else if (index == SETTINGS_GROUP_VIBRATE_CNT) {
+                                    editor.putInt("VibrationCountGroup", selectedCount);
+                                }
+                                editor.commit();
+                                listView.invalidateViews();
+                            }
+                        });
+                        vibrationCountDialog.setArguments(args);
+                        vibrationCountDialog.show(getFragmentManager(), "VibrateCountDialog");
                     } else if (i == SETTINGS_MESSAGE_SOUND || i == SETTINGS_GROUP_SOUND) {
                         if (parentActivity == null) {
                             return;
@@ -401,9 +435,31 @@ public boolean isEnabled(int i) {
 
             SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
             boolean enabledAll = preferences.getBoolean("EnableAll", true);
-            return (enabledAll || i == SETTINGS_MESSAGE_ALERT || i == SETTINGS_INAPP_PREVIEW) &&
-                   (i > SETTINGS_MESSAGE_NOTIFICATIONS && i < SETTINGS_GROUP_NOTIFICATIONS || i > SETTINGS_GROUP_NOTIFICATIONS && i < SETTINGS_INAPP_NOTIFICATIONS || i > SETTINGS_INAPP_NOTIFICATIONS && i < SETTINGS_EVENTS) ||
-                   (i == SETTINGS_PEBBLE_ALERT);
+            boolean enabled =
+                (enabledAll || i == SETTINGS_MESSAGE_ALERT || i == SETTINGS_INAPP_PREVIEW) &&
+                (i > SETTINGS_MESSAGE_NOTIFICATIONS && i < SETTINGS_GROUP_NOTIFICATIONS || i > SETTINGS_GROUP_NOTIFICATIONS && i < SETTINGS_INAPP_NOTIFICATIONS || i > SETTINGS_INAPP_NOTIFICATIONS && i < SETTINGS_EVENTS) ||
+                (i == SETTINGS_PEBBLE_ALERT);
+
+            if(enabled) {
+                if(i == SETTINGS_MESSAGE_VIBRATE_SPD) {
+                    if(!preferences.getBoolean("EnableVibrateAll", true))
+                        enabled = false;
+                }
+                else if(i == SETTINGS_GROUP_VIBRATE_SPD) {
+                    if(!preferences.getBoolean("EnableVibrateGroup", true))
+                        enabled = false;
+                }
+                else if(i == SETTINGS_MESSAGE_VIBRATE_CNT) {
+                    if(!preferences.getBoolean("EnableVibrateAll", true) || preferences.getInt("VibrationSpeed", 0) == 0)
+                        enabled = false;
+                }
+                else if(i == SETTINGS_GROUP_VIBRATE_CNT) {
+                    if(!preferences.getBoolean("EnableVibrateGroup", true) || preferences.getInt("VibrationSpeedGroup", 0) == 0)
+                        enabled = false;
+                }
+            }
+
+            return enabled;
         }
 
         @Override
@@ -562,6 +618,16 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     textViewDetail.setText(LocaleController.getString(speed.getLocaleKey(), speed.getResourceId()));
                     textView.setText(LocaleController.getString("VibrateSpeed", R.string.VibrateSpeed));
                     divider.setVisibility(View.VISIBLE);
+                }  else if (i == SETTINGS_MESSAGE_VIBRATE_CNT || i == SETTINGS_GROUP_VIBRATE_CNT) {
+                    int count = VibrationCountDialog.DEFAULT_VIBRATION_COUNT;
+                    if (i == SETTINGS_MESSAGE_VIBRATE_CNT) {
+                        count = preferences.getInt("VibrationCount", count);
+                    } else if (i == SETTINGS_GROUP_VIBRATE_CNT) {
+                        count = preferences.getInt("VibrationCountGroup", count);
+                    }
+                    textViewDetail.setText(String.valueOf(count));
+                    textView.setText(LocaleController.getString("VibrateCount", R.string.VibrateCount));
+                    divider.setVisibility(View.VISIBLE);
                 } else if (i == SETTINGS_RESET_ALL) {
                     textView.setText(LocaleController.getString("ResetAllNotifications", R.string.ResetAllNotifications));
                     textViewDetail.setText(LocaleController.getString("UndoAllCustom", R.string.UndoAllCustom));
@@ -591,7 +657,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
         public int getItemViewType(int i) {
             if (i == SETTINGS_MESSAGE_NOTIFICATIONS || i == SETTINGS_GROUP_NOTIFICATIONS || i == SETTINGS_INAPP_NOTIFICATIONS || i == SETTINGS_EVENTS || i == SETTINGS_PEBBLE || i == SETTINGS_RESET) {
                 return TYPE_HEADER;
-            } else if(i == SETTINGS_MESSAGE_VIBRATE_SPD || i == SETTINGS_GROUP_VIBRATE_SPD) {
+            } else if(i == SETTINGS_MESSAGE_VIBRATE_SPD || i == SETTINGS_GROUP_VIBRATE_SPD || i == SETTINGS_MESSAGE_VIBRATE_CNT || i == SETTINGS_GROUP_VIBRATE_CNT) {
                 return TYPE_INNER_SETTINGS;
             } else if (i > SETTINGS_MESSAGE_NOTIFICATIONS && i < SETTINGS_MESSAGE_SOUND || i > SETTINGS_GROUP_NOTIFICATIONS && i < SETTINGS_GROUP_SOUND || i > SETTINGS_INAPP_NOTIFICATIONS && i < SETTINGS_EVENTS || i == SETTINGS_CONTACT_JOINED || i == SETTINGS_PEBBLE_ALERT) {
                 return TYPE_BOOLEAN_SETTINGS;
diff --git a/TMessagesProj/src/main/res/values-it/strings.xml b/TMessagesProj/src/main/res/values-it/strings.xml
index 405fdf29c..8e3a32152 100644
--- a/TMessagesProj/src/main/res/values-it/strings.xml
+++ b/TMessagesProj/src/main/res/values-it/strings.xml
@@ -238,6 +238,8 @@
     <string name="VibrateSpeedMedium">Media</string>
     <string name="VibrateSpeedSlow">Lenta</string>
     <string name="VibrateSpeedDefault">Default</string>
+    <string name="VibrateCount">Numero di vibrazioni</string>
+    <string name="VibrateCountTitle">Seleziona il numero di vibrazioni</string>
     <string name="InAppPreview">Anteprima in-app</string>
     <string name="Reset">RIPRISTINA</string>
     <string name="ResetAllNotifications">Ripristina tutte le notifiche</string>
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 6871fe9e3..dc861dce2 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -238,6 +238,8 @@
     <string name="VibrateSpeedMedium">Medium</string>
     <string name="VibrateSpeedSlow">Slow</string>
     <string name="VibrateSpeedDefault">Default</string>
+    <string name="VibrateCount">Vibrations number</string>
+    <string name="VibrateCountTitle">Pick the number fo vibrations</string>
     <string name="InAppPreview">In-App Preview</string>
     <string name="Reset">RESET</string>
     <string name="ResetAllNotifications">Reset All Notifications</string>
