diff --git a/TMessagesProj/TMessagesProj-release.apk b/TMessagesProj/TMessagesProj-release.apk
new file mode 100644
index 000000000..72152c995
Binary files /dev/null and b/TMessagesProj/TMessagesProj-release.apk differ
diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 13c41af8e..c5abc2276 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -1,3 +1,5 @@
+import org.apache.tools.ant.taskdefs.condition.Os
+
 buildscript {
     repositories {
         mavenCentral()
@@ -20,18 +22,18 @@ dependencies {
     compile 'com.android.support:support-v4:20.0.+'
     compile 'com.google.android.gms:play-services:3.2.+'
     compile 'net.hockeyapp.android:HockeySDK:3.0.2'
-    compile 'com.googlecode.mp4parser:isoparser:1.0.+'
+    compile 'com.googlecode.mp4parser:isoparser:1.0.2'
 }
 
 android {
     compileSdkVersion 21
     buildToolsVersion '21.0.2'
-
     signingConfigs {
         debug {
-            storeFile file("config/debug.keystore")
+            storeFile file("debug.keystore")
         }
 
+
         release {
             storeFile file("config/release.keystore")
             storePassword RELEASE_STORE_PASSWORD
@@ -40,31 +42,58 @@ android {
         }
     }
 
+/*
+    productFlavors {
+
+        debugVer {
+            applicationId 'org.tomato.messenger'
+        }
+    }
+*/
+
     buildTypes {
         debug {
             debuggable true
-            jniDebugBuild false
+            jniDebugBuild true
             signingConfig signingConfigs.debug
         }
-
         release {
             debuggable false
-            jniDebugBuild false
+            jniDebugBuild true
             signingConfig signingConfigs.release
         }
-
         foss {
             debuggable false
-            jniDebugBuild false
+            jniDebugBuild true
             signingConfig signingConfigs.release
         }
     }
-
     sourceSets.main {
         jniLibs.srcDir 'libs'
         jni.srcDirs = [] //disable automatic ndk-build call
     }
 
+/*
+    // call regular ndk-build(.cmd) script from app directory
+    task ndkBuild(type: Exec) {
+        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
+            commandLine 'ndk-build.cmd', '-C', file('src/main/jni').absolutePath
+        } else {
+            commandLine 'ndk-build', '-C', file('src/main/jni').absolutePath
+        }
+    }
+    clean.dependsOn 'cleanNative'
+    tasks.withType(JavaCompile) {
+        compileTask -> compileTask.dependsOn ndkBuild
+    }
+
+*/
+
+
+
+
+
+
     sourceSets {
         debug {
             manifest.srcFile 'config/debug/AndroidManifest.xml'
@@ -76,11 +105,13 @@ android {
             manifest.srcFile 'config/foss/AndroidManifest.xml'
         }
     }
-
     defaultConfig {
         minSdkVersion 8
         targetSdkVersion 19
-        versionCode 374
-        versionName "1.9.6"
+        versionCode 375
+        versionName '1.9.6'
+       // applicationId 'org.tomato.messenger'
+    }
+    productFlavors {
     }
 }
diff --git a/TMessagesProj/config/debug/AndroidManifest.xml b/TMessagesProj/config/debug/AndroidManifest.xml
index dc448b5fa..9a444a9b4 100644
--- a/TMessagesProj/config/debug/AndroidManifest.xml
+++ b/TMessagesProj/config/debug/AndroidManifest.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="org.telegram.messenger"
+    package="org.tomato.messenger"
     android:installLocation="auto">
 
     <uses-feature android:name="android.hardware.location.gps" android:required="false" />
@@ -9,21 +9,21 @@
     <uses-feature android:name="android.hardware.LOCATION" android:required="false" />
 
     <uses-permission android:name="com.google.android.c2dm.permission.RECEIVE" />
-    <uses-permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE"/>
-    <uses-permission android:name="org.telegram.messenger.permission.C2D_MESSAGE" />
+    <uses-permission android:name="org.tomato.messenger.permission.MAPS_RECEIVE"/>
+    <uses-permission android:name="org.tomato.messenger.permission.C2D_MESSAGE" />
     <uses-permission android:name="com.google.android.providers.gsf.permission.READ_GSERVICES"/>
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
 
-    <permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE" android:protectionLevel="signature"/>
-    <permission android:name="org.telegram.messenger.permission.C2D_MESSAGE" android:protectionLevel="signature" />
+    <permission android:name="org.tomato.messenger.permission.MAPS_RECEIVE" android:protectionLevel="signature"/>
+    <permission android:name="org.tomato.messenger.permission.C2D_MESSAGE" android:protectionLevel="signature" />
 
     <application
         android:allowBackup="false"
         android:icon="@drawable/ic_launcher"
         android:label="@string/AppName"
         android:theme="@style/Theme.TMessages.Start"
-        android:name="org.telegram.ui.ApplicationLoader"
+        android:name="org.tomato.ui.ApplicationLoader"
         android:hardwareAccelerated="true"
         android:largeHeap="true">
 
@@ -32,12 +32,12 @@
         <activity android:name="net.hockeyapp.android.UpdateActivity" />
 
         <receiver
-            android:name="org.telegram.android.GcmBroadcastReceiver"
+            android:name="org.tomato.android.GcmBroadcastReceiver"
             android:permission="com.google.android.c2dm.permission.SEND" >
             <intent-filter>
                 <action android:name="com.google.android.c2dm.intent.RECEIVE" />
                 <action android:name="com.google.android.c2dm.intent.REGISTRATION" />
-                <category android:name="org.telegram.messenger" />
+                <category android:name="org.tomato.messenger" />
             </intent-filter>
         </receiver>
 
diff --git a/TMessagesProj/config/foss/AndroidManifest.xml b/TMessagesProj/config/foss/AndroidManifest.xml
index 17b3445ef..21700650b 100644
--- a/TMessagesProj/config/foss/AndroidManifest.xml
+++ b/TMessagesProj/config/foss/AndroidManifest.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="org.telegram.messenger"
+    package="org.tomato.messenger"
     android:installLocation="auto">
 
     <application
@@ -8,7 +8,7 @@
         android:icon="@drawable/ic_launcher"
         android:label="@string/AppName"
         android:theme="@style/Theme.TMessages.Start"
-        android:name="org.telegram.ui.ApplicationLoader"
+        android:name="org.tomato.ui.ApplicationLoader"
         android:hardwareAccelerated="true"
         android:largeHeap="true">
 
diff --git a/TMessagesProj/config/release/AndroidManifest.xml b/TMessagesProj/config/release/AndroidManifest.xml
index 463616384..19db827db 100644
--- a/TMessagesProj/config/release/AndroidManifest.xml
+++ b/TMessagesProj/config/release/AndroidManifest.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="org.telegram.messenger"
+    package="org.tomato.messenger"
     android:installLocation="auto">
 
     <uses-feature android:name="android.hardware.location.gps" android:required="false" />
@@ -9,35 +9,34 @@
     <uses-feature android:name="android.hardware.LOCATION" android:required="false" />
 
     <uses-permission android:name="com.google.android.c2dm.permission.RECEIVE" />
-    <uses-permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE"/>
-    <uses-permission android:name="org.telegram.messenger.permission.C2D_MESSAGE" />
+    <uses-permission android:name="org.tomato.messenger.permission.MAPS_RECEIVE"/>
+    <uses-permission android:name="org.tomato.messenger.permission.C2D_MESSAGE" />
     <uses-permission android:name="com.google.android.providers.gsf.permission.READ_GSERVICES"/>
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
 
-    <permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE" android:protectionLevel="signature"/>
-    <permission android:name="org.telegram.messenger.permission.C2D_MESSAGE" android:protectionLevel="signature" />
+    <permission android:name="org.tomato.messenger.permission.MAPS_RECEIVE" android:protectionLevel="signature"/>
+    <permission android:name="org.tomato.messenger.permission.C2D_MESSAGE" android:protectionLevel="signature" />
 
     <application
         android:allowBackup="false"
         android:icon="@drawable/ic_launcher"
         android:label="@string/AppName"
         android:theme="@style/Theme.TMessages.Start"
-        android:name="org.telegram.ui.ApplicationLoader"
+        android:name="org.tomato.ui.ApplicationLoader"
         android:hardwareAccelerated="true"
         android:largeHeap="true">
-
-        <meta-data android:name="com.google.android.maps.v2.API_KEY" android:value="AIzaSyA-t0jLPjUt2FxrA8VPK2EiYHcYcboIR6k" />
+        <meta-data android:name="com.google.android.maps.v2.API_KEY" android:value="AIzaSyB5hym8tAsi-XpDWjz9Ol9DTcPQyMQM3jk" />
 
         <activity android:name="net.hockeyapp.android.UpdateActivity" />
 
         <receiver
-            android:name="org.telegram.android.GcmBroadcastReceiver"
+            android:name="org.tomato.android.GcmBroadcastReceiver"
             android:permission="com.google.android.c2dm.permission.SEND" >
             <intent-filter>
                 <action android:name="com.google.android.c2dm.intent.RECEIVE" />
                 <action android:name="com.google.android.c2dm.intent.REGISTRATION" />
-                <category android:name="org.telegram.messenger" />
+                <category android:name="org.tomato.messenger" />
             </intent-filter>
         </receiver>
 
diff --git a/TMessagesProj/jni/Application.mk b/TMessagesProj/jni/Application.mk
index 61a377ba9..6e9d557b2 100644
--- a/TMessagesProj/jni/Application.mk
+++ b/TMessagesProj/jni/Application.mk
@@ -1,2 +1,2 @@
 APP_PLATFORM := android-9
-APP_ABI := armeabi armeabi-v7a x86
\ No newline at end of file
+APP_ABI := libs/armeabi libs/armeabi-v7a libs/x86
\ No newline at end of file
diff --git a/TMessagesProj/jni/audio.c b/TMessagesProj/jni/audio.c
index 3ca0f1fb2..e00c10439 100644
--- a/TMessagesProj/jni/audio.c
+++ b/TMessagesProj/jni/audio.c
@@ -504,7 +504,7 @@ int writeFrame(uint8_t *framePcmBytes, unsigned int frameByteCount) {
     return 1;
 }
 
-JNIEXPORT int Java_org_telegram_android_MediaController_startRecord(JNIEnv *env, jclass class, jstring path) {
+JNIEXPORT int Java_org_tomato_android_MediaController_startRecord(JNIEnv *env, jclass class, jstring path) {
     const char *pathStr = (*env)->GetStringUTFChars(env, path, 0);
     
     int result = initRecorder(pathStr);
@@ -516,12 +516,12 @@ JNIEXPORT int Java_org_telegram_android_MediaController_startRecord(JNIEnv *env,
     return result;
 }
 
-JNIEXPORT int Java_org_telegram_android_MediaController_writeFrame(JNIEnv *env, jclass class, jobject frame, jint len) {
+JNIEXPORT int Java_org_tomato_android_MediaController_writeFrame(JNIEnv *env, jclass class, jobject frame, jint len) {
     jbyte *frameBytes = (*env)->GetDirectBufferAddress(env, frame);
     return writeFrame(frameBytes, len);
 }
 
-JNIEXPORT void Java_org_telegram_android_MediaController_stopRecord(JNIEnv *env, jclass class) {
+JNIEXPORT void Java_org_tomato_android_MediaController_stopRecord(JNIEnv *env, jclass class) {
     cleanupRecorder();
 }
 
@@ -618,22 +618,22 @@ void fillBuffer(uint8_t *buffer, int capacity, int *args) {
     }
 }
 
-JNIEXPORT jlong Java_org_telegram_android_MediaController_getTotalPcmDuration(JNIEnv *env, jclass class) {
+JNIEXPORT jlong Java_org_tomato_android_MediaController_getTotalPcmDuration(JNIEnv *env, jclass class) {
     return _totalPcmDuration;
 }
 
-JNIEXPORT void Java_org_telegram_android_MediaController_readOpusFile(JNIEnv *env, jclass class, jobject buffer, jint capacity, jintArray args) {
+JNIEXPORT void Java_org_tomato_android_MediaController_readOpusFile(JNIEnv *env, jclass class, jobject buffer, jint capacity, jintArray args) {
     jint *argsArr = (*env)->GetIntArrayElements(env, args, 0);
     jbyte *bufferBytes = (*env)->GetDirectBufferAddress(env, buffer);
     fillBuffer(bufferBytes, capacity, argsArr);
     (*env)->ReleaseIntArrayElements(env, args, argsArr, 0);
 }
 
-JNIEXPORT int Java_org_telegram_android_MediaController_seekOpusFile(JNIEnv *env, jclass class, jfloat position) {
+JNIEXPORT int Java_org_tomato_android_MediaController_seekOpusFile(JNIEnv *env, jclass class, jfloat position) {
     return seekPlayer(position);
 }
 
-JNIEXPORT int Java_org_telegram_android_MediaController_openOpusFile(JNIEnv *env, jclass class, jstring path) {
+JNIEXPORT int Java_org_tomato_android_MediaController_openOpusFile(JNIEnv *env, jclass class, jstring path) {
     const char *pathStr = (*env)->GetStringUTFChars(env, path, 0);
     
     int result = initPlayer(pathStr);
@@ -645,11 +645,11 @@ JNIEXPORT int Java_org_telegram_android_MediaController_openOpusFile(JNIEnv *env
     return result;
 }
 
-JNIEXPORT void Java_org_telegram_android_MediaController_closeOpusFile(JNIEnv *env, jclass class) {
+JNIEXPORT void Java_org_tomato_android_MediaController_closeOpusFile(JNIEnv *env, jclass class) {
     cleanupPlayer();
 }
 
-JNIEXPORT int Java_org_telegram_android_MediaController_isOpusFile(JNIEnv *env, jclass class, jstring path) {
+JNIEXPORT int Java_org_tomato_android_MediaController_isOpusFile(JNIEnv *env, jclass class, jstring path) {
     const char *pathStr = (*env)->GetStringUTFChars(env, path, 0);
     
     int result = 0;
diff --git a/TMessagesProj/jni/gif.c b/TMessagesProj/jni/gif.c
index 06b7a6283..84ee8a8e4 100644
--- a/TMessagesProj/jni/gif.c
+++ b/TMessagesProj/jni/gif.c
@@ -589,7 +589,7 @@ static jint open(GifFileType *GifFileIn, int Error, int startPos, JNIEnv *env, j
 	return (jint)(Error == 0 ? info : NULL);
 }
 
-JNIEXPORT jlong JNICALL Java_org_telegram_ui_Views_GifDrawable_getAllocationByteCount(JNIEnv *env, jclass class, jobject gifInfo) {
+JNIEXPORT jlong JNICALL Java_org_tomato_ui_Views_GifDrawable_getAllocationByteCount(JNIEnv *env, jclass class, jobject gifInfo) {
 	GifInfo *info = (GifInfo *)gifInfo;
 	if (info == NULL) {
         return 0;
@@ -602,7 +602,7 @@ JNIEXPORT jlong JNICALL Java_org_telegram_ui_Views_GifDrawable_getAllocationByte
 	return sum;
 }
 
-JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_reset(JNIEnv *env, jclass class, jobject gifInfo) {
+JNIEXPORT void JNICALL Java_org_tomato_ui_Views_GifDrawable_reset(JNIEnv *env, jclass class, jobject gifInfo) {
 	GifInfo *info = (GifInfo *)gifInfo;
 	if (info == NULL) {
         return;
@@ -610,7 +610,7 @@ JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_reset(JNIEnv *env,
 	reset(info);
 }
 
-JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_setSpeedFactor(JNIEnv *env, jclass class, jobject gifInfo, jfloat factor) {
+JNIEXPORT void JNICALL Java_org_tomato_ui_Views_GifDrawable_setSpeedFactor(JNIEnv *env, jclass class, jobject gifInfo, jfloat factor) {
 	GifInfo *info = (GifInfo *)gifInfo;
 	if (info == NULL) {
         return;
@@ -618,7 +618,7 @@ JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_setSpeedFactor(JNI
 	info->speedFactor = factor;
 }
 
-JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_seekToTime(JNIEnv *env, jclass class, jobject gifInfo, jint desiredPos, jintArray jPixels) {
+JNIEXPORT void JNICALL Java_org_tomato_ui_Views_GifDrawable_seekToTime(JNIEnv *env, jclass class, jobject gifInfo, jint desiredPos, jintArray jPixels) {
 	GifInfo *info = (GifInfo *)gifInfo;
 	if (info == NULL || jPixels == NULL) {
         return;
@@ -665,7 +665,7 @@ JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_seekToTime(JNIEnv
     }
 }
 
-JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_seekToFrame(JNIEnv *env, jclass class, jobject gifInfo, jint desiredIdx, jintArray jPixels) {
+JNIEXPORT void JNICALL Java_org_tomato_ui_Views_GifDrawable_seekToFrame(JNIEnv *env, jclass class, jobject gifInfo, jint desiredIdx, jintArray jPixels) {
 	GifInfo *info = (GifInfo *)gifInfo;
 	if (info == NULL|| jPixels==NULL) {
         return;
@@ -701,7 +701,7 @@ JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_seekToFrame(JNIEnv
     }
 }
 
-JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_renderFrame(JNIEnv *env, jclass class, jintArray jPixels, jobject gifInfo, jintArray metaData) {
+JNIEXPORT void JNICALL Java_org_tomato_ui_Views_GifDrawable_renderFrame(JNIEnv *env, jclass class, jintArray jPixels, jobject gifInfo, jintArray metaData) {
 	GifInfo *info = (GifInfo *)gifInfo;
 	if (info == NULL || jPixels == NULL) {
         return;
@@ -752,7 +752,7 @@ JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_renderFrame(JNIEnv
 	(*env)->ReleaseIntArrayElements(env, metaData, rawMetaData, 0);
 }
 
-JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_free(JNIEnv *env, jclass class, jobject gifInfo) {
+JNIEXPORT void JNICALL Java_org_tomato_ui_Views_GifDrawable_free(JNIEnv *env, jclass class, jobject gifInfo) {
 	if (gifInfo == NULL) {
         return;
     }
@@ -765,7 +765,7 @@ JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_free(JNIEnv *env,
 	cleanUp(info);
 }
 
-JNIEXPORT jstring JNICALL Java_org_telegram_ui_Views_GifDrawable_getComment(JNIEnv *env, jclass class, jobject gifInfo) {
+JNIEXPORT jstring JNICALL Java_org_tomato_ui_Views_GifDrawable_getComment(JNIEnv *env, jclass class, jobject gifInfo) {
 	if (gifInfo == NULL) {
         return NULL;
     }
@@ -773,14 +773,14 @@ JNIEXPORT jstring JNICALL Java_org_telegram_ui_Views_GifDrawable_getComment(JNIE
 	return (*env)->NewStringUTF(env, info->comment);
 }
 
-JNIEXPORT jint JNICALL Java_org_telegram_ui_Views_GifDrawable_getLoopCount(JNIEnv *env, jclass class, jobject gifInfo) {
+JNIEXPORT jint JNICALL Java_org_tomato_ui_Views_GifDrawable_getLoopCount(JNIEnv *env, jclass class, jobject gifInfo) {
 	if (gifInfo == NULL) {
         return 0;
     }
 	return ((GifInfo *)gifInfo)->loopCount;
 }
 
-JNIEXPORT jint JNICALL Java_org_telegram_ui_Views_GifDrawable_getDuration(JNIEnv *env, jclass class, jobject gifInfo) {
+JNIEXPORT jint JNICALL Java_org_tomato_ui_Views_GifDrawable_getDuration(JNIEnv *env, jclass class, jobject gifInfo) {
 	GifInfo *info = (GifInfo *)gifInfo;
 	if (info == NULL) {
         return 0;
@@ -793,7 +793,7 @@ JNIEXPORT jint JNICALL Java_org_telegram_ui_Views_GifDrawable_getDuration(JNIEnv
 	return sum;
 }
 
-JNIEXPORT jint JNICALL Java_org_telegram_ui_Views_GifDrawable_getCurrentPosition(JNIEnv *env, jclass class, jobject gifInfo) {
+JNIEXPORT jint JNICALL Java_org_tomato_ui_Views_GifDrawable_getCurrentPosition(JNIEnv *env, jclass class, jobject gifInfo) {
 	GifInfo *info = (GifInfo *)gifInfo;
 	if (info == NULL) {
         return 0;
@@ -811,7 +811,7 @@ JNIEXPORT jint JNICALL Java_org_telegram_ui_Views_GifDrawable_getCurrentPosition
 	return (int) (sum + remainder);
 }
 
-JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_saveRemainder(JNIEnv *env, jclass class, jobject gifInfo) {
+JNIEXPORT void JNICALL Java_org_tomato_ui_Views_GifDrawable_saveRemainder(JNIEnv *env, jclass class, jobject gifInfo) {
 	GifInfo *info = (GifInfo *)gifInfo;
 	if (info == NULL) {
         return;
@@ -819,7 +819,7 @@ JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_saveRemainder(JNIE
 	info->lastFrameReaminder = getRealTime() - info->nextStartTime;
 }
 
-JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_restoreRemainder(JNIEnv *env, jclass class, jobject gifInfo) {
+JNIEXPORT void JNICALL Java_org_tomato_ui_Views_GifDrawable_restoreRemainder(JNIEnv *env, jclass class, jobject gifInfo) {
 	GifInfo *info = (GifInfo *)gifInfo;
 	if (info == NULL || info->lastFrameReaminder == ULONG_MAX) {
         return;
@@ -828,7 +828,7 @@ JNIEXPORT void JNICALL Java_org_telegram_ui_Views_GifDrawable_restoreRemainder(J
 	info->lastFrameReaminder = ULONG_MAX;
 }
 
-JNIEXPORT jint JNICALL Java_org_telegram_ui_Views_GifDrawable_openFile(JNIEnv *env, jclass class, jintArray metaData, jstring jfname) {
+JNIEXPORT jint JNICALL Java_org_tomato_ui_Views_GifDrawable_openFile(JNIEnv *env, jclass class, jintArray metaData, jstring jfname) {
 	if (jfname == NULL) {
 		setMetaData(0, 0, 0, D_GIF_ERR_OPEN_FAILED, env, metaData);
 		return (jint) NULL;
diff --git a/TMessagesProj/jni/image.c b/TMessagesProj/jni/image.c
index cdd66a47a..3c606f045 100644
--- a/TMessagesProj/jni/image.c
+++ b/TMessagesProj/jni/image.c
@@ -202,7 +202,7 @@ METHODDEF(void) my_error_exit(j_common_ptr cinfo) {
     longjmp(myerr->setjmp_buffer, 1);
 }
 
-JNIEXPORT void Java_org_telegram_messenger_Utilities_blurBitmap(JNIEnv *env, jclass class, jobject bitmap, int radius) {
+JNIEXPORT void Java_org_tomato_messenger_Utilities_blurBitmap(JNIEnv *env, jclass class, jobject bitmap, int radius) {
     if (!bitmap) {
         return;
     }
@@ -229,7 +229,7 @@ JNIEXPORT void Java_org_telegram_messenger_Utilities_blurBitmap(JNIEnv *env, jcl
     AndroidBitmap_unlockPixels(env, bitmap);
 }
 
-JNIEXPORT void Java_org_telegram_messenger_Utilities_loadBitmap(JNIEnv *env, jclass class, jstring path, jintArray bitmap, int scale, int format, int width, int height) {
+JNIEXPORT void Java_org_tomato_messenger_Utilities_loadBitmap(JNIEnv *env, jclass class, jstring path, jintArray bitmap, int scale, int format, int width, int height) {
     
     int i;
     
diff --git a/TMessagesProj/jni/jni.c b/TMessagesProj/jni/jni.c
index 4a43f84dc..f50c9485f 100644
--- a/TMessagesProj/jni/jni.c
+++ b/TMessagesProj/jni/jni.c
@@ -30,7 +30,7 @@ void JNI_OnUnload(JavaVM *vm, void *reserved) {
     gifOnJNIUnload(vm, reserved);
 }
 
-JNIEXPORT void Java_org_telegram_messenger_Utilities_aesIgeEncryption(JNIEnv *env, jclass class, jobject buffer, jbyteArray key, jbyteArray iv, jboolean encrypt, int offset, int length) {
+JNIEXPORT void Java_org_tomato_messenger_Utilities_aesIgeEncryption(JNIEnv *env, jclass class, jobject buffer, jbyteArray key, jbyteArray iv, jboolean encrypt, int offset, int length) {
     jbyte *what = (*env)->GetDirectBufferAddress(env, buffer) + offset;
     unsigned char *keyBuff = (unsigned char *)(*env)->GetByteArrayElements(env, key, NULL);
     unsigned char *ivBuff = (unsigned char *)(*env)->GetByteArrayElements(env, iv, NULL);
@@ -56,7 +56,7 @@ uint64_t gcd(uint64_t a, uint64_t b){
     return b == 0 ? a : b;
 }
 
-JNIEXPORT jlong Java_org_telegram_messenger_Utilities_doPQNative(JNIEnv* env, jclass class, jlong _what) {
+JNIEXPORT jlong Java_org_tomato_messenger_Utilities_doPQNative(JNIEnv* env, jclass class, jlong _what) {
     uint64_t what = _what;
     int it = 0, i, j;
     uint64_t g = 0;
diff --git a/TMessagesProj/jni/sqlite.c b/TMessagesProj/jni/sqlite.c
index 124b3df2f..3674a62c9 100755
--- a/TMessagesProj/jni/sqlite.c
+++ b/TMessagesProj/jni/sqlite.c
@@ -6,6 +6,6 @@ void throw_sqlite3_exception(JNIEnv *env, sqlite3 *handle, int errcode) {
 		errcode = sqlite3_errcode(handle);
 	}
 	const char *errmsg = sqlite3_errmsg(handle);
-	jclass exClass = (*env)->FindClass(env, "org/telegram/SQLite/SQLiteException");
+	jclass exClass = (*env)->FindClass(env, "org/tomato/SQLite/SQLiteException");
 	(*env)->ThrowNew(env, exClass, errmsg);
 }
diff --git a/TMessagesProj/jni/sqlite_cursor.c b/TMessagesProj/jni/sqlite_cursor.c
index de3f7469d..fd85f9763 100755
--- a/TMessagesProj/jni/sqlite_cursor.c
+++ b/TMessagesProj/jni/sqlite_cursor.c
@@ -1,17 +1,17 @@
 #include "sqlite.h"
 
-int Java_org_telegram_SQLite_SQLiteCursor_columnType(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
+int Java_org_tomato_SQLite_SQLiteCursor_columnType(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
 	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
 	return sqlite3_column_type(handle, columnIndex);
 }
 
-int Java_org_telegram_SQLite_SQLiteCursor_columnIsNull(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
+int Java_org_tomato_SQLite_SQLiteCursor_columnIsNull(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
 	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
 	int valType = sqlite3_column_type(handle, columnIndex);
 	return SQLITE_NULL == valType;
 }
 
-int Java_org_telegram_SQLite_SQLiteCursor_columnIntValue(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
+int Java_org_tomato_SQLite_SQLiteCursor_columnIntValue(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
 	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
 	int valType = sqlite3_column_type(handle, columnIndex);
 	if (SQLITE_NULL == valType) {
@@ -20,7 +20,7 @@ int Java_org_telegram_SQLite_SQLiteCursor_columnIntValue(JNIEnv *env, jobject ob
 	return sqlite3_column_int(handle, columnIndex);
 }
 
-long long Java_org_telegram_SQLite_SQLiteCursor_columnLongValue(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
+long long Java_org_tomato_SQLite_SQLiteCursor_columnLongValue(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
 	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
 	int valType = sqlite3_column_type(handle, columnIndex);
 	if (SQLITE_NULL == valType) {
@@ -29,7 +29,7 @@ long long Java_org_telegram_SQLite_SQLiteCursor_columnLongValue(JNIEnv *env, job
 	return sqlite3_column_int64(handle, columnIndex);
 }
 
-double Java_org_telegram_SQLite_SQLiteCursor_columnDoubleValue(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
+double Java_org_tomato_SQLite_SQLiteCursor_columnDoubleValue(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
 	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
 	int valType = sqlite3_column_type(handle, columnIndex);
 	if (SQLITE_NULL == valType) {
@@ -38,7 +38,7 @@ double Java_org_telegram_SQLite_SQLiteCursor_columnDoubleValue(JNIEnv *env, jobj
 	return sqlite3_column_double(handle, columnIndex);
 }
 
-jstring Java_org_telegram_SQLite_SQLiteCursor_columnStringValue(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
+jstring Java_org_tomato_SQLite_SQLiteCursor_columnStringValue(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
 	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
 	const char *str = sqlite3_column_text(handle, columnIndex);
 	if (str != 0) {
@@ -47,7 +47,7 @@ jstring Java_org_telegram_SQLite_SQLiteCursor_columnStringValue(JNIEnv *env, job
 	return 0;
 }
 
-jbyteArray Java_org_telegram_SQLite_SQLiteCursor_columnByteArrayValue(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
+jbyteArray Java_org_tomato_SQLite_SQLiteCursor_columnByteArrayValue(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
     sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
 	void *buf = sqlite3_column_blob(handle, columnIndex);
 	int length = sqlite3_column_bytes(handle, columnIndex);
@@ -59,11 +59,11 @@ jbyteArray Java_org_telegram_SQLite_SQLiteCursor_columnByteArrayValue(JNIEnv *en
 	return 0;
 }
 
-int Java_org_telegram_SQLite_SQLiteCursor_columnByteArrayLength(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
+int Java_org_tomato_SQLite_SQLiteCursor_columnByteArrayLength(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
 	return sqlite3_column_bytes((sqlite3_stmt *)statementHandle, columnIndex);
 }
 
-int Java_org_telegram_SQLite_SQLiteCursor_columnByteBufferValue(JNIEnv *env, jobject object, int statementHandle, int columnIndex, jobject buffer) {
+int Java_org_tomato_SQLite_SQLiteCursor_columnByteBufferValue(JNIEnv *env, jobject object, int statementHandle, int columnIndex, jobject buffer) {
     if (!buffer) {
         return 0;
     }
diff --git a/TMessagesProj/jni/sqlite_database.c b/TMessagesProj/jni/sqlite_database.c
index a249cff43..4985ee66c 100755
--- a/TMessagesProj/jni/sqlite_database.c
+++ b/TMessagesProj/jni/sqlite_database.c
@@ -1,6 +1,6 @@
 #include "sqlite.h"
 
-void Java_org_telegram_SQLite_SQLiteDatabase_closedb(JNIEnv *env, jobject object, int sqliteHandle) {
+void Java_org_tomato_SQLite_SQLiteDatabase_closedb(JNIEnv *env, jobject object, int sqliteHandle) {
 	sqlite3 *handle = (sqlite3 *)sqliteHandle;
 	int err = sqlite3_close(handle);
 	if (SQLITE_OK != err) {
@@ -8,17 +8,17 @@ void Java_org_telegram_SQLite_SQLiteDatabase_closedb(JNIEnv *env, jobject object
 	}
 }
 
-void Java_org_telegram_SQLite_SQLiteDatabase_beginTransaction(JNIEnv *env, jobject object, int sqliteHandle) {
+void Java_org_tomato_SQLite_SQLiteDatabase_beginTransaction(JNIEnv *env, jobject object, int sqliteHandle) {
     sqlite3 *handle = (sqlite3 *)sqliteHandle;
     sqlite3_exec(handle, "BEGIN", 0, 0, 0);
 }
 
-void Java_org_telegram_SQLite_SQLiteDatabase_commitTransaction(JNIEnv *env, jobject object, int sqliteHandle) {
+void Java_org_tomato_SQLite_SQLiteDatabase_commitTransaction(JNIEnv *env, jobject object, int sqliteHandle) {
     sqlite3 *handle = (sqlite3 *)sqliteHandle;
     sqlite3_exec(handle, "COMMIT", 0, 0, 0);
 }
 
-int Java_org_telegram_SQLite_SQLiteDatabase_opendb(JNIEnv *env, jobject object, jstring fileName, jstring tempDir) {
+int Java_org_tomato_SQLite_SQLiteDatabase_opendb(JNIEnv *env, jobject object, jstring fileName, jstring tempDir) {
     char const *fileNameStr = (*env)->GetStringUTFChars(env, fileName, 0);
     char const *tempDirStr = (*env)->GetStringUTFChars(env, tempDir, 0);
     
diff --git a/TMessagesProj/jni/sqlite_statement.c b/TMessagesProj/jni/sqlite_statement.c
index 1090de3db..84088b919 100755
--- a/TMessagesProj/jni/sqlite_statement.c
+++ b/TMessagesProj/jni/sqlite_statement.c
@@ -3,12 +3,12 @@
 jfieldID queryArgsCountField;
 
 jint sqliteOnJNILoad(JavaVM *vm, void *reserved, JNIEnv *env) {
-	jclass class = (*env)->FindClass(env, "org/telegram/SQLite/SQLitePreparedStatement");
+	jclass class = (*env)->FindClass(env, "org/tomato/SQLite/SQLitePreparedStatement");
 	queryArgsCountField = (*env)->GetFieldID(env, class, "queryArgsCount", "I");
 	return JNI_VERSION_1_4;
 }
 
-int Java_org_telegram_SQLite_SQLitePreparedStatement_step(JNIEnv* env, jobject object, int statementHandle) {
+int Java_org_tomato_SQLite_SQLitePreparedStatement_step(JNIEnv* env, jobject object, int statementHandle) {
 	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
     
     int errcode = sqlite3_step(handle);
@@ -22,7 +22,7 @@ int Java_org_telegram_SQLite_SQLitePreparedStatement_step(JNIEnv* env, jobject o
 	throw_sqlite3_exception(env, sqlite3_db_handle(handle), errcode);
 }
 
-int Java_org_telegram_SQLite_SQLitePreparedStatement_prepare(JNIEnv *env, jobject object, int sqliteHandle, jstring sql) {
+int Java_org_tomato_SQLite_SQLitePreparedStatement_prepare(JNIEnv *env, jobject object, int sqliteHandle, jstring sql) {
 	sqlite3* handle = (sqlite3 *)sqliteHandle;
 
     char const *sqlStr = (*env)->GetStringUTFChars(env, sql, 0);
@@ -44,7 +44,7 @@ int Java_org_telegram_SQLite_SQLitePreparedStatement_prepare(JNIEnv *env, jobjec
     return (int)stmt_handle;
 }
 
-void Java_org_telegram_SQLite_SQLitePreparedStatement_reset(JNIEnv *env, jobject object, int statementHandle) {
+void Java_org_tomato_SQLite_SQLitePreparedStatement_reset(JNIEnv *env, jobject object, int statementHandle) {
 	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
 
 	int errcode = sqlite3_reset(handle);
@@ -53,7 +53,7 @@ void Java_org_telegram_SQLite_SQLitePreparedStatement_reset(JNIEnv *env, jobject
     }
 }
 
-void Java_org_telegram_SQLite_SQLitePreparedStatement_finalize(JNIEnv *env, jobject object, int statementHandle) {
+void Java_org_tomato_SQLite_SQLitePreparedStatement_finalize(JNIEnv *env, jobject object, int statementHandle) {
 	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
 
 	int errcode = sqlite3_finalize (handle);
@@ -62,7 +62,7 @@ void Java_org_telegram_SQLite_SQLitePreparedStatement_finalize(JNIEnv *env, jobj
     }
 }
 
-void Java_org_telegram_SQLite_SQLitePreparedStatement_bindByteBuffer(JNIEnv *env, jobject object, int statementHandle, int index, jobject value, int length) {
+void Java_org_tomato_SQLite_SQLitePreparedStatement_bindByteBuffer(JNIEnv *env, jobject object, int statementHandle, int index, jobject value, int length) {
 	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
     jbyte *buf = (*env)->GetDirectBufferAddress(env, value);
     
@@ -72,7 +72,7 @@ void Java_org_telegram_SQLite_SQLitePreparedStatement_bindByteBuffer(JNIEnv *env
     }
 }
 
-void Java_org_telegram_SQLite_SQLitePreparedStatement_bindString(JNIEnv *env, jobject object, int statementHandle, int index, jstring value) {
+void Java_org_tomato_SQLite_SQLitePreparedStatement_bindString(JNIEnv *env, jobject object, int statementHandle, int index, jstring value) {
 	sqlite3_stmt *handle = (sqlite3_stmt*)statementHandle;
 
 	char const *valueStr = (*env)->GetStringUTFChars(env, value, 0);
@@ -87,7 +87,7 @@ void Java_org_telegram_SQLite_SQLitePreparedStatement_bindString(JNIEnv *env, jo
     }
 }
 
-void Java_org_telegram_SQLite_SQLitePreparedStatement_bindInt(JNIEnv *env, jobject object, int statementHandle, int index, int value) {
+void Java_org_tomato_SQLite_SQLitePreparedStatement_bindInt(JNIEnv *env, jobject object, int statementHandle, int index, int value) {
 	sqlite3_stmt *handle = (sqlite3_stmt*)statementHandle;
 
 	int errcode = sqlite3_bind_int(handle, index, value);
@@ -96,7 +96,7 @@ void Java_org_telegram_SQLite_SQLitePreparedStatement_bindInt(JNIEnv *env, jobje
     }
 }
 
-void Java_org_telegram_SQLite_SQLitePreparedStatement_bindLong(JNIEnv *env, jobject object, int statementHandle, int index, long long value) {
+void Java_org_tomato_SQLite_SQLitePreparedStatement_bindLong(JNIEnv *env, jobject object, int statementHandle, int index, long long value) {
 	sqlite3_stmt *handle = (sqlite3_stmt*)statementHandle;
     
 	int errcode = sqlite3_bind_int64(handle, index, value);
@@ -105,7 +105,7 @@ void Java_org_telegram_SQLite_SQLitePreparedStatement_bindLong(JNIEnv *env, jobj
     }
 }
 
-void Java_org_telegram_SQLite_SQLitePreparedStatement_bindDouble(JNIEnv* env, jobject object, int statementHandle, int index, double value) {
+void Java_org_tomato_SQLite_SQLitePreparedStatement_bindDouble(JNIEnv* env, jobject object, int statementHandle, int index, double value) {
 	sqlite3_stmt *handle = (sqlite3_stmt*)statementHandle;
 
 	int errcode = sqlite3_bind_double(handle, index, value);
@@ -114,7 +114,7 @@ void Java_org_telegram_SQLite_SQLitePreparedStatement_bindDouble(JNIEnv* env, jo
     }
 }
 
-void Java_org_telegram_SQLite_SQLitePreparedStatement_bindNull(JNIEnv* env, jobject object, int statementHandle, int index) {
+void Java_org_tomato_SQLite_SQLitePreparedStatement_bindNull(JNIEnv* env, jobject object, int statementHandle, int index) {
 	sqlite3_stmt *handle = (sqlite3_stmt*)statementHandle;
 
 	int errcode = sqlite3_bind_null(handle, index);
diff --git a/TMessagesProj/jni/video.c b/TMessagesProj/jni/video.c
index 90c3410e7..ca08cf690 100644
--- a/TMessagesProj/jni/video.c
+++ b/TMessagesProj/jni/video.c
@@ -66,7 +66,7 @@ int isSemiPlanarYUV(int colorFormat) {
     }
 }
 
-JNIEXPORT int Java_org_telegram_messenger_Utilities_convertVideoFrame(JNIEnv *env, jclass class, jobject src, jobject dest, int destFormat, int width, int height, int padding, int swap) {
+JNIEXPORT int Java_org_tomato_messenger_Utilities_convertVideoFrame(JNIEnv *env, jclass class, jobject src, jobject dest, int destFormat, int width, int height, int padding, int swap) {
     if (!src || !dest || !destFormat) {
         return 0;
     }
diff --git a/TMessagesProj/libs/armeabi-v7a/libtmessages.so b/TMessagesProj/libs/armeabi-v7a/libtmessages.so
index 7eb3f14a8..c60730eef 100755
Binary files a/TMessagesProj/libs/armeabi-v7a/libtmessages.so and b/TMessagesProj/libs/armeabi-v7a/libtmessages.so differ
diff --git a/TMessagesProj/libs/armeabi/libtmessages.so b/TMessagesProj/libs/armeabi/libtmessages.so
index f4eb4a87f..4f27d5c59 100755
Binary files a/TMessagesProj/libs/armeabi/libtmessages.so and b/TMessagesProj/libs/armeabi/libtmessages.so differ
diff --git a/TMessagesProj/libs/x86/libtmessages.so b/TMessagesProj/libs/x86/libtmessages.so
index 45ba4cace..e3aea9d4e 100755
Binary files a/TMessagesProj/libs/x86/libtmessages.so and b/TMessagesProj/libs/x86/libtmessages.so differ
diff --git a/TMessagesProj/src/main/.classpath b/TMessagesProj/src/main/.classpath
new file mode 100644
index 000000000..7bc01d9a9
--- /dev/null
+++ b/TMessagesProj/src/main/.classpath
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="src" path="gen"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
+	<classpathentry kind="output" path="bin/classes"/>
+</classpath>
diff --git a/TMessagesProj/src/main/.project b/TMessagesProj/src/main/.project
new file mode 100644
index 000000000..e6cc4ddd2
--- /dev/null
+++ b/TMessagesProj/src/main/.project
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>LaunchActivity</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
diff --git a/TMessagesProj/src/main/.settings/org.eclipse.jdt.core.prefs b/TMessagesProj/src/main/.settings/org.eclipse.jdt.core.prefs
new file mode 100644
index 000000000..b080d2ddc
--- /dev/null
+++ b/TMessagesProj/src/main/.settings/org.eclipse.jdt.core.prefs
@@ -0,0 +1,4 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
+org.eclipse.jdt.core.compiler.compliance=1.6
+org.eclipse.jdt.core.compiler.source=1.6
diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index b6a7aa8a3..cb4c7d992 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="org.telegram.messenger"
+    package="org.tomato.messenger"
     android:installLocation="auto">
 
     <supports-screens android:anyDensity="true"
@@ -45,12 +45,12 @@
         android:icon="@drawable/ic_launcher"
         android:label="@string/AppName"
         android:theme="@style/Theme.TMessages.Start"
-        android:name="org.telegram.ui.ApplicationLoader"
+        android:name="org.tomato.ui.ApplicationLoader"
         android:hardwareAccelerated="true"
         android:largeHeap="true">
 
         <activity
-            android:name="org.telegram.ui.LaunchActivity"
+            android:name="org.tomato.ui.LaunchActivity"
             android:windowSoftInputMode="adjustResize"
             android:hardwareAccelerated="true"
             android:launchMode="singleTask"
@@ -93,15 +93,15 @@
             <intent-filter>
                 <action android:name="android.intent.action.VIEW"/>
                 <category android:name="android.intent.category.DEFAULT"/>
-                <data android:mimeType="vnd.android.cursor.item/vnd.org.telegram.messenger.android.profile"/>
+                <data android:mimeType="vnd.android.cursor.item/vnd.org.tomato.messenger.android.profile"/>
             </intent-filter>
         </activity>
         <activity
-            android:name="org.telegram.ui.IntroActivity"
+            android:name="org.tomato.ui.IntroActivity"
             android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
         </activity>
         <activity
-            android:name="org.telegram.ui.PopupNotificationActivity"
+            android:name="org.tomato.ui.PopupNotificationActivity"
             android:configChanges="keyboard|keyboardHidden|navigation|orientation|screenLayout|uiMode|screenSize|smallestScreenSize"
             android:excludeFromRecents="true"
             android:launchMode="singleTask"
@@ -110,13 +110,13 @@
             android:theme="@style/Theme.TMessages.PopupNotification">
         </activity>
 
-        <receiver android:name="org.telegram.android.SmsListener">
+        <receiver android:name="org.tomato.android.SmsListener">
             <intent-filter>
                 <action android:name="android.provider.Telephony.SMS_RECEIVED" />
             </intent-filter>
         </receiver>
 
-        <service android:name="org.telegram.android.AuthenticatorService"
+        <service android:name="org.tomato.android.AuthenticatorService"
             android:exported="true">
             <intent-filter>
                 <action android:name="android.accounts.AccountAuthenticator"/>
@@ -125,7 +125,7 @@
                 android:resource="@xml/auth"/>
         </service>
 
-        <service android:name="org.telegram.android.ContactsSyncAdapterService"
+        <service android:name="org.tomato.android.ContactsSyncAdapterService"
             android:exported="true">
             <intent-filter>
                 <action android:name="android.content.SyncAdapter" />
@@ -136,18 +136,18 @@
                 android:resource="@xml/contacts" />
         </service>
 
-        <service android:name="org.telegram.android.NotificationsService" android:enabled="true"/>
-        <service android:name="org.telegram.android.NotificationRepeat" android:exported="false"/>
-        <service android:name="org.telegram.android.VideoEncodingService" android:enabled="true"/>
+        <service android:name="org.tomato.android.NotificationsService" android:enabled="true"/>
+        <service android:name="org.tomato.android.NotificationRepeat" android:exported="false"/>
+        <service android:name="org.tomato.android.VideoEncodingService" android:enabled="true"/>
 
-        <receiver android:name="org.telegram.android.AppStartReceiver" android:enabled="true">
+        <receiver android:name="org.tomato.android.AppStartReceiver" android:enabled="true">
             <intent-filter>
-                <action android:name="org.telegram.start" />
+                <action android:name="org.tomato.start" />
                 <action android:name="android.intent.action.BOOT_COMPLETED" />
             </intent-filter>
         </receiver>
 
-        <receiver android:name="org.telegram.android.WearReplyReceiver" android:enabled="true"/>
+        <receiver android:name="org.tomato.android.WearReplyReceiver" android:enabled="true"/>
 
         <uses-library android:name="com.sec.android.app.multiwindow" android:required="false" />
         <meta-data android:name="com.sec.android.support.multiwindow" android:value="true" />
diff --git a/TMessagesProj/src/main/bin/AndroidManifest.xml b/TMessagesProj/src/main/bin/AndroidManifest.xml
new file mode 100644
index 000000000..747611dab
--- /dev/null
+++ b/TMessagesProj/src/main/bin/AndroidManifest.xml
@@ -0,0 +1,161 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="org.tomato.messenger"
+    android:installLocation="auto">
+
+    <supports-screens android:anyDensity="true"
+                      android:smallScreens="true"
+                      android:normalScreens="true"
+                      android:largeScreens="true"
+                      android:resizeable="true"
+                      android:xlargeScreens="true"/>
+
+    <uses-feature android:glEsVersion="0x00020000" android:required="false"/>
+    <uses-feature android:name="android.hardware.telephony" android:required="false" />
+    <uses-feature android:name="android.hardware.camera.autofocus" android:required="false" />
+    <uses-feature android:name="android.hardware.camera" android:required="false" />
+    <uses-feature android:name="android.hardware.wifi" android:required="false" />
+    <uses-feature android:name="android.hardware.screen.PORTRAIT" android:required="false" />
+    <uses-feature android:name="android.hardware.microphone" android:required="false" />
+
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.RECORD_AUDIO" />
+    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
+    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
+    <uses-permission android:name="android.permission.RECEIVE_SMS" />
+    <uses-permission android:name="android.permission.WAKE_LOCK" />
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
+    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
+    <uses-permission android:name="android.permission.CAMERA" />
+    <uses-permission android:name="android.permission.GET_ACCOUNTS" />
+    <uses-permission android:name="android.permission.READ_CONTACTS" />
+    <uses-permission android:name="android.permission.WRITE_CONTACTS" />
+    <uses-permission android:name="android.permission.MANAGE_ACCOUNTS"/>
+    <uses-permission android:name="android.permission.READ_PROFILE"/>
+    <uses-permission android:name="android.permission.WRITE_SYNC_SETTINGS"/>
+    <uses-permission android:name="android.permission.READ_SYNC_SETTINGS"/>
+    <uses-permission android:name="android.permission.AUTHENTICATE_ACCOUNTS"/>
+    <uses-permission android:name="android.permission.VIBRATE" />
+    <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW" />
+    <uses-permission android:name="android.permission.READ_PHONE_STATE" />
+    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
+
+    <application
+        android:allowBackup="false"
+        android:icon="@drawable/ic_launcher"
+        android:label="@string/AppName"
+        android:theme="@style/Theme.TMessages.Start"
+        android:name="org.tomato.ui.ApplicationLoader"
+        android:hardwareAccelerated="true"
+        android:largeHeap="true">
+
+        <activity
+            android:name="org.tomato.ui.LaunchActivity"
+            android:windowSoftInputMode="adjustResize"
+            android:hardwareAccelerated="true"
+            android:launchMode="singleTask"
+            android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
+                <category android:name="android.intent.category.MULTIWINDOW_LAUNCHER" />
+            </intent-filter>
+            <intent-filter>
+                <action android:name="android.intent.action.SEND"/>
+                <category android:name="android.intent.category.DEFAULT"/>
+                <data android:mimeType="image/*"/>
+            </intent-filter>
+            <intent-filter>
+                <action android:name="android.intent.action.SEND"/>
+                <category android:name="android.intent.category.DEFAULT"/>
+                <data android:mimeType="video/*"/>
+            </intent-filter>
+            <intent-filter>
+                <action android:name="android.intent.action.SEND_MULTIPLE"/>
+                <category android:name="android.intent.category.DEFAULT"/>
+                <data android:mimeType="image/*"/>
+            </intent-filter>
+            <intent-filter>
+                <action android:name="android.intent.action.SEND"/>
+                <category android:name="android.intent.category.DEFAULT"/>
+                <data android:mimeType="text/plain"/>
+            </intent-filter>
+            <intent-filter>
+                <action android:name="android.intent.action.SEND"/>
+                <category android:name="android.intent.category.DEFAULT"/>
+                <data android:mimeType="*/*"/>
+            </intent-filter>
+            <intent-filter>
+                <action android:name="android.intent.action.SEND_MULTIPLE"/>
+                <category android:name="android.intent.category.DEFAULT"/>
+                <data android:mimeType="*/*"/>
+            </intent-filter>
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW"/>
+                <category android:name="android.intent.category.DEFAULT"/>
+                <data android:mimeType="vnd.android.cursor.item/vnd.org.telegram.messenger.android.profile"/>
+            </intent-filter>
+        </activity>
+        <activity
+            android:name="org.tomato.ui.IntroActivity"
+            android:configChanges="keyboard|keyboardHidden|orientation|screenSize">
+        </activity>
+        <activity
+            android:name="org.tomato.ui.PopupNotificationActivity"
+            android:configChanges="keyboard|keyboardHidden|navigation|orientation|screenLayout|uiMode|screenSize|smallestScreenSize"
+            android:excludeFromRecents="true"
+            android:launchMode="singleTask"
+            android:windowSoftInputMode="adjustResize|stateHidden"
+            android:taskAffinity=""
+            android:theme="@style/Theme.TMessages.PopupNotification">
+        </activity>
+
+        <receiver android:name="org.tomato.android.SmsListener">
+            <intent-filter>
+                <action android:name="android.provider.Telephony.SMS_RECEIVED" />
+            </intent-filter>
+        </receiver>
+
+        <service android:name="org.tomato.android.AuthenticatorService"
+            android:exported="true">
+            <intent-filter>
+                <action android:name="android.accounts.AccountAuthenticator"/>
+            </intent-filter>
+            <meta-data android:name="android.accounts.AccountAuthenticator"
+                android:resource="@xml/auth"/>
+        </service>
+
+        <service android:name="org.tomato.android.ContactsSyncAdapterService"
+            android:exported="true">
+            <intent-filter>
+                <action android:name="android.content.SyncAdapter" />
+            </intent-filter>
+            <meta-data android:name="android.content.SyncAdapter"
+                android:resource="@xml/sync_contacts" />
+            <meta-data android:name="android.provider.CONTACTS_STRUCTURE"
+                android:resource="@xml/contacts" />
+        </service>
+
+        <service android:name="org.tomato.android.NotificationsService" android:enabled="true"/>
+        <service android:name="org.tomato.android.NotificationRepeat" android:exported="false"/>
+        <service android:name="org.tomato.android.VideoEncodingService" android:enabled="true"/>
+
+        <receiver android:name="org.tomato.android.AppStartReceiver" android:enabled="true">
+            <intent-filter>
+                <action android:name="org.telegram.start" />
+                <action android:name="android.intent.action.BOOT_COMPLETED" />
+            </intent-filter>
+        </receiver>
+
+        <receiver android:name="org.tomato.android.WearReplyReceiver" android:enabled="true"/>
+
+        <uses-library android:name="com.sec.android.app.multiwindow" android:required="false" />
+        <meta-data android:name="com.sec.android.support.multiwindow" android:value="true" />
+        <meta-data android:name="com.sec.android.multiwindow.DEFAULT_SIZE_W" android:value="632dp" />
+        <meta-data android:name="com.sec.android.multiwindow.DEFAULT_SIZE_H" android:value="598dp" />
+        <meta-data android:name="com.sec.android.multiwindow.MINIMUM_SIZE_W" android:value="632dp" />
+        <meta-data android:name="com.sec.android.multiwindow.MINIMUM_SIZE_H" android:value="598dp" />
+
+    </application>
+
+</manifest>
diff --git a/TMessagesProj/src/main/bin/classes/org/tomato/messenger/BuildConfig.class b/TMessagesProj/src/main/bin/classes/org/tomato/messenger/BuildConfig.class
new file mode 100644
index 000000000..2a2bf91ff
Binary files /dev/null and b/TMessagesProj/src/main/bin/classes/org/tomato/messenger/BuildConfig.class differ
diff --git a/TMessagesProj/src/main/gen/org/tomato/messenger/BuildConfig.java b/TMessagesProj/src/main/gen/org/tomato/messenger/BuildConfig.java
new file mode 100644
index 000000000..7e2638075
--- /dev/null
+++ b/TMessagesProj/src/main/gen/org/tomato/messenger/BuildConfig.java
@@ -0,0 +1,6 @@
+/** Automatically generated file. DO NOT MODIFY */
+package org.tomato.messenger;
+
+public final class BuildConfig {
+    public final static boolean DEBUG = true;
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/jawnae/pyronet/ByteStream.java b/TMessagesProj/src/main/java/jawnae/pyronet/ByteStream.java
index 39966ac18..bd67b5cac 100755
--- a/TMessagesProj/src/main/java/jawnae/pyronet/ByteStream.java
+++ b/TMessagesProj/src/main/java/jawnae/pyronet/ByteStream.java
@@ -18,8 +18,8 @@
 
 package jawnae.pyronet;
 
-import org.telegram.messenger.BuffersStorage;
-import org.telegram.messenger.ByteBufferDesc;
+import org.tomato.messenger.BuffersStorage;
+import org.tomato.messenger.ByteBufferDesc;
 
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
diff --git a/TMessagesProj/src/main/java/jawnae/pyronet/PyroClient.java b/TMessagesProj/src/main/java/jawnae/pyronet/PyroClient.java
index 1044c9c6e..9b3eedbed 100755
--- a/TMessagesProj/src/main/java/jawnae/pyronet/PyroClient.java
+++ b/TMessagesProj/src/main/java/jawnae/pyronet/PyroClient.java
@@ -18,7 +18,7 @@
 
 package jawnae.pyronet;
 
-import org.telegram.messenger.ByteBufferDesc;
+import org.tomato.messenger.ByteBufferDesc;
 
 import java.io.EOFException;
 import java.io.IOException;
diff --git a/TMessagesProj/src/main/java/jawnae/pyronet/PyroClientAdapter.java b/TMessagesProj/src/main/java/jawnae/pyronet/PyroClientAdapter.java
index f6fe88c07..811d94abd 100755
--- a/TMessagesProj/src/main/java/jawnae/pyronet/PyroClientAdapter.java
+++ b/TMessagesProj/src/main/java/jawnae/pyronet/PyroClientAdapter.java
@@ -18,8 +18,8 @@
 
 package jawnae.pyronet;
 
-import org.telegram.messenger.BuildVars;
-import org.telegram.messenger.FileLog;
+import org.tomato.messenger.BuildVars;
+import org.tomato.messenger.FileLog;
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
deleted file mode 100644
index a327cbfd6..000000000
--- a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
+++ /dev/null
@@ -1,18 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2014.
- */
-
-package org.telegram.messenger;
-
-public class BuildVars {
-    public static boolean DEBUG_VERSION = false;
-    public static int APP_ID = 0; //obtaion your own APP_ID at https://core.telegram.org/api/obtaining_api_id
-    public static String APP_HASH = ""; //obtaion your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
-    public static String HOCKEY_APP_HASH = "your-hockeyapp-api-key-here";
-    public static String GCM_SENDER_ID = "760348033672";
-    public static String SEND_LOGS_EMAIL = "email@gmail.com";
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/PhoneFormat/CallingCodeInfo.java b/TMessagesProj/src/main/java/org/tomato/PhoneFormat/CallingCodeInfo.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/PhoneFormat/CallingCodeInfo.java
rename to TMessagesProj/src/main/java/org/tomato/PhoneFormat/CallingCodeInfo.java
index 666d508a0..be1a3198c 100644
--- a/TMessagesProj/src/main/java/org/telegram/PhoneFormat/CallingCodeInfo.java
+++ b/TMessagesProj/src/main/java/org/tomato/PhoneFormat/CallingCodeInfo.java
@@ -22,7 +22,7 @@
 // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-package org.telegram.PhoneFormat;
+package org.tomato.PhoneFormat;
 
 import java.util.ArrayList;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/PhoneFormat/PhoneFormat.java b/TMessagesProj/src/main/java/org/tomato/PhoneFormat/PhoneFormat.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/PhoneFormat/PhoneFormat.java
rename to TMessagesProj/src/main/java/org/tomato/PhoneFormat/PhoneFormat.java
index 512b962a0..c1e208b48 100644
--- a/TMessagesProj/src/main/java/org/telegram/PhoneFormat/PhoneFormat.java
+++ b/TMessagesProj/src/main/java/org/tomato/PhoneFormat/PhoneFormat.java
@@ -22,9 +22,9 @@
 // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-package org.telegram.PhoneFormat;
+package org.tomato.PhoneFormat;
 
-import org.telegram.ui.ApplicationLoader;
+import org.tomato.ui.ApplicationLoader;
 
 import java.io.ByteArrayOutputStream;
 import java.io.InputStream;
diff --git a/TMessagesProj/src/main/java/org/telegram/PhoneFormat/PhoneRule.java b/TMessagesProj/src/main/java/org/tomato/PhoneFormat/PhoneRule.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/PhoneFormat/PhoneRule.java
rename to TMessagesProj/src/main/java/org/tomato/PhoneFormat/PhoneRule.java
index 3a1513d09..f33f7f547 100644
--- a/TMessagesProj/src/main/java/org/telegram/PhoneFormat/PhoneRule.java
+++ b/TMessagesProj/src/main/java/org/tomato/PhoneFormat/PhoneRule.java
@@ -22,7 +22,7 @@
 // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-package org.telegram.PhoneFormat;
+package org.tomato.PhoneFormat;
 
 public class PhoneRule {
     public int minVal;
diff --git a/TMessagesProj/src/main/java/org/telegram/PhoneFormat/RuleSet.java b/TMessagesProj/src/main/java/org/tomato/PhoneFormat/RuleSet.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/PhoneFormat/RuleSet.java
rename to TMessagesProj/src/main/java/org/tomato/PhoneFormat/RuleSet.java
index 5b7ecacf1..2f76695bf 100644
--- a/TMessagesProj/src/main/java/org/telegram/PhoneFormat/RuleSet.java
+++ b/TMessagesProj/src/main/java/org/tomato/PhoneFormat/RuleSet.java
@@ -22,7 +22,7 @@
 // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-package org.telegram.PhoneFormat;
+package org.tomato.PhoneFormat;
 
 import java.util.ArrayList;
 import java.util.regex.Matcher;
diff --git a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteCursor.java b/TMessagesProj/src/main/java/org/tomato/SQLite/SQLiteCursor.java
old mode 100755
new mode 100644
similarity index 98%
rename from TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteCursor.java
rename to TMessagesProj/src/main/java/org/tomato/SQLite/SQLiteCursor.java
index 48bd87778..5058d5180
--- a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteCursor.java
+++ b/TMessagesProj/src/main/java/org/tomato/SQLite/SQLiteCursor.java
@@ -6,9 +6,9 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.SQLite;
+package org.tomato.SQLite;
 
-import org.telegram.messenger.FileLog;
+import org.tomato.messenger.FileLog;
 
 import java.nio.ByteBuffer;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteDatabase.java b/TMessagesProj/src/main/java/org/tomato/SQLite/SQLiteDatabase.java
old mode 100755
new mode 100644
similarity index 95%
rename from TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteDatabase.java
rename to TMessagesProj/src/main/java/org/tomato/SQLite/SQLiteDatabase.java
index 451673154..bf9a462a9
--- a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteDatabase.java
+++ b/TMessagesProj/src/main/java/org/tomato/SQLite/SQLiteDatabase.java
@@ -6,10 +6,10 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.SQLite;
+package org.tomato.SQLite;
 
-import org.telegram.messenger.FileLog;
-import org.telegram.ui.ApplicationLoader;
+import org.tomato.messenger.FileLog;
+import org.tomato.ui.ApplicationLoader;
 
 public class SQLiteDatabase {
 	private final int sqliteHandle;
diff --git a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteException.java b/TMessagesProj/src/main/java/org/tomato/SQLite/SQLiteException.java
old mode 100755
new mode 100644
similarity index 95%
rename from TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteException.java
rename to TMessagesProj/src/main/java/org/tomato/SQLite/SQLiteException.java
index d27cfb6a0..5525fdc36
--- a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteException.java
+++ b/TMessagesProj/src/main/java/org/tomato/SQLite/SQLiteException.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.SQLite;
+package org.tomato.SQLite;
 
 public class SQLiteException extends Exception {
 	private static final long serialVersionUID = -2398298479089615621L;
diff --git a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteNoRowException.java b/TMessagesProj/src/main/java/org/tomato/SQLite/SQLiteNoRowException.java
old mode 100755
new mode 100644
similarity index 92%
rename from TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteNoRowException.java
rename to TMessagesProj/src/main/java/org/tomato/SQLite/SQLiteNoRowException.java
index 042f0070f..7bc5040fa
--- a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLiteNoRowException.java
+++ b/TMessagesProj/src/main/java/org/tomato/SQLite/SQLiteNoRowException.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.SQLite;
+package org.tomato.SQLite;
 
 public class SQLiteNoRowException extends Exception {
 	private static final long serialVersionUID = 4098095358028103112L;
diff --git a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLitePreparedStatement.java b/TMessagesProj/src/main/java/org/tomato/SQLite/SQLitePreparedStatement.java
old mode 100755
new mode 100644
similarity index 98%
rename from TMessagesProj/src/main/java/org/telegram/SQLite/SQLitePreparedStatement.java
rename to TMessagesProj/src/main/java/org/tomato/SQLite/SQLitePreparedStatement.java
index 6335d93b8..ab6e93b95
--- a/TMessagesProj/src/main/java/org/telegram/SQLite/SQLitePreparedStatement.java
+++ b/TMessagesProj/src/main/java/org/tomato/SQLite/SQLitePreparedStatement.java
@@ -6,9 +6,9 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.SQLite;
+package org.tomato.SQLite;
 
-import org.telegram.messenger.FileLog;
+import org.tomato.messenger.FileLog;
 
 import java.nio.ByteBuffer;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java b/TMessagesProj/src/main/java/org/tomato/android/AndroidUtilities.java
similarity index 54%
rename from TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
rename to TMessagesProj/src/main/java/org/tomato/android/AndroidUtilities.java
index 3b346fd00..b3ba268d6 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/AndroidUtilities.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/AndroidUtilities.java
@@ -6,12 +6,13 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.android;
+package org.tomato.android;
 
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.Context;
 import android.content.DialogInterface;
+import android.content.SharedPreferences;
 import android.content.pm.ActivityInfo;
 import android.content.res.Configuration;
 import android.graphics.Point;
@@ -26,12 +27,12 @@
 import android.widget.EditText;
 import android.widget.TextView;
 
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.ui.ApplicationLoader;
-import org.telegram.ui.Views.NumberPicker;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
+import org.tomato.ui.ApplicationLoader;
+import org.tomato.ui.Views.NumberPicker;
 
 import java.io.File;
 import java.lang.reflect.Field;
@@ -40,6 +41,27 @@
 
 public class AndroidUtilities {
 
+    public static SharedPreferences mSettings;
+    public static final int TELEGRAM_BUBBLE_STYLE = 0;
+    public static final int WECHAT_BUBBLE_STYLE = 1;
+    public static final int HANGOUT_BUBBLE_STYLE = 2;
+    public static final int HIKE1_BUBBLE_STYLE = 31;
+    public static final int HIKE2_BUBBLE_STYLE = 32;
+    public static final int HIKE3_BUBBLE_STYLE = 33;
+    public static final int HIKE4_BUBBLE_STYLE = 34;
+    public static final int HIKE5_BUBBLE_STYLE = 35;
+    public static final int HIKE6_BUBBLE_STYLE = 36;
+    public static final int HIKE7_BUBBLE_STYLE = 37;
+    public static final int HIKE8_BUBBLE_STYLE = 38;
+    public static final int HIKE9_BUBBLE_STYLE = 39;
+    public static final int HIKE10_BUBBLE_STYLE = 40;
+    public static final int LINE_BUBBLE_STYLE = 4;
+    public static final int TANGO_BUBBLE_STYLE = 5;
+    public static final int VIBER_BUBBLE_STYLE = 6;
+    public static final int WHATSAPP_BUBBLE_STYLE = 7;
+    public static final int ZALO_BUBBLE_STYLE = 8;
+
+
     private static final Hashtable<String, Typeface> typefaceCache = new Hashtable<String, Typeface>();
     private static int prevOrientation = -10;
     private static boolean waitingForSms = false;
@@ -501,4 +523,431 @@ public static void clearCursorDrawable(EditText editText) {
             FileLog.e("tmessages", e);
         }
     }
+
+
+    /*backgroundDrawableIn = getResources().getDrawable(R.drawable.msg_in);
+    backgroundDrawableInSelected = getResources().getDrawable(R.drawable.msg_in_selected);
+    backgroundDrawableOut = getResources().getDrawable(R.drawable.msg_out);
+    backgroundDrawableOutSelected = getResources().getDrawable(R.drawable.msg_out_selected);
+    backgroundMediaDrawableIn = getResources().getDrawable(R.drawable.msg_in_photo);
+    backgroundMediaDrawableInSelected = getResources().getDrawable(R.drawable.msg_in_photo_selected);
+    backgroundMediaDrawableOut = getResources().getDrawable(R.drawable.msg_out_photo);
+    backgroundMediaDrawableOutSelected = getResources().getDrawable(R.drawable.msg_out_photo_selected);
+    checkDrawable = getResources().getDrawable(R.drawable.msg_check);
+    halfCheckDrawable = getResources().getDrawable(R.drawable.msg_halfcheck);
+    clockDrawable = getResources().getDrawable(R.drawable.msg_clock);
+    checkMediaDrawable = getResources().getDrawable(R.drawable.msg_check_w);
+    halfCheckMediaDrawable = getResources().getDrawable(R.drawable.msg_halfcheck_w);
+    clockMediaDrawable = getResources().getDrawable(R.drawable.msg_clock_photo);
+    errorDrawable = getResources().getDrawable(R.drawable.msg_warning);
+    mediaBackgroundDrawable = getResources().getDrawable(R.drawable.phototime);
+    */
+
+    public static int getBackgroundDrawableIn(){
+
+
+
+        switch (ApplicationLoader.balloonType){
+            case WECHAT_BUBBLE_STYLE:
+                return R.drawable.wechat_chat_from_bg_normal;
+            case HANGOUT_BUBBLE_STYLE:
+                return R.drawable.hangouts_msg_bubble_left;
+            case WHATSAPP_BUBBLE_STYLE:
+                return R.drawable.balloon_incoming_normal;
+                
+            case HIKE1_BUBBLE_STYLE:
+                return R.drawable.hike0_ic_bubble_white;
+            case HIKE2_BUBBLE_STYLE:
+                return R.drawable.hike0_ic_bubble_white;
+            case HIKE3_BUBBLE_STYLE:
+                return R.drawable.hike0_ic_bubble_white;
+            case HIKE4_BUBBLE_STYLE:
+                return R.drawable.hike0_ic_bubble_white;
+            case HIKE5_BUBBLE_STYLE:
+                return R.drawable.hike0_ic_bubble_white;
+            case HIKE6_BUBBLE_STYLE:
+                return R.drawable.hike0_ic_bubble_white;
+            case HIKE7_BUBBLE_STYLE:
+                return R.drawable.hike0_ic_bubble_white;
+            case HIKE8_BUBBLE_STYLE:
+                return R.drawable.hike0_ic_bubble_white;
+            case HIKE9_BUBBLE_STYLE:
+                return R.drawable.hike0_ic_bubble_white;
+            case HIKE10_BUBBLE_STYLE:
+                return R.drawable.hike0_ic_bubble_white;
+
+
+            case TANGO_BUBBLE_STYLE:
+                
+
+            case LINE_BUBBLE_STYLE:
+                    return R.drawable.line_v2_img_chats_bg_01;
+                
+            case TELEGRAM_BUBBLE_STYLE:
+                return R.drawable.msg_in;
+            case VIBER_BUBBLE_STYLE:
+                return R.drawable.viber_incoming_normal;
+            case ZALO_BUBBLE_STYLE:
+                return R.drawable.zalo_in_text_normal;
+            default:
+
+                
+        }
+
+        return 0;
+    }
+
+
+    public static int getBackgroundDrawableInSelected(){
+
+
+
+        switch (ApplicationLoader.balloonType){
+            case WECHAT_BUBBLE_STYLE:
+                return R.drawable.wechat_chat_from_bg_pressed;
+            case WHATSAPP_BUBBLE_STYLE:
+                return R.drawable.balloon_incoming_focused;
+                
+            case HIKE1_BUBBLE_STYLE:
+                return R.drawable.hike0_pressed_ic_bubble_white;
+
+            case HIKE2_BUBBLE_STYLE:
+                return R.drawable.hike0_pressed_ic_bubble_white;
+            case HIKE3_BUBBLE_STYLE:
+                return R.drawable.hike0_pressed_ic_bubble_white;
+            case HIKE4_BUBBLE_STYLE:
+                return R.drawable.hike0_pressed_ic_bubble_white;
+            case HIKE5_BUBBLE_STYLE:
+                return R.drawable.hike0_pressed_ic_bubble_white;
+            case HIKE6_BUBBLE_STYLE:
+                return R.drawable.hike0_pressed_ic_bubble_white;
+            case HIKE7_BUBBLE_STYLE:
+                return R.drawable.hike0_pressed_ic_bubble_white;
+            case HIKE8_BUBBLE_STYLE:
+                return R.drawable.hike0_pressed_ic_bubble_white;
+            case HIKE9_BUBBLE_STYLE:
+                return R.drawable.hike0_pressed_ic_bubble_white;
+            case HIKE10_BUBBLE_STYLE:
+                return R.drawable.hike0_pressed_ic_bubble_white;
+                
+            case TANGO_BUBBLE_STYLE:
+                
+
+            case LINE_BUBBLE_STYLE:
+                return R.drawable.line_v2_img_chats_bg_01_pressed;
+                
+            case TELEGRAM_BUBBLE_STYLE:
+              return  R.drawable.msg_in_selected;
+            case HANGOUT_BUBBLE_STYLE:
+                return R.drawable.hangouts_media_msg_bubble_pressed_left;
+            case VIBER_BUBBLE_STYLE:
+                return R.drawable.viber_incoming_selected;
+
+            case ZALO_BUBBLE_STYLE:
+                return R.drawable.zalo_in_text_pressed;
+            default:
+
+                
+        }
+
+        return 0;
+    }
+
+
+
+    public static int getbackgroundDrawableOut(){
+
+
+        switch (ApplicationLoader.balloonType){
+            case WECHAT_BUBBLE_STYLE:
+                return R.drawable.wechat_chat_to_bg_normal;
+            case WHATSAPP_BUBBLE_STYLE:
+                return R.drawable.balloon_outgoing_normal;
+                
+            case HIKE1_BUBBLE_STYLE:
+                return R.drawable.hike1_ic_bubble_celebration_space;
+            case HIKE2_BUBBLE_STYLE:
+                return R.drawable.hike2_ic_bubble_blue;
+            case HIKE3_BUBBLE_STYLE:
+                return R.drawable.hike3_ic_bubble_music;
+            case HIKE4_BUBBLE_STYLE:
+                return R.drawable.hike4_ic_bubble_forest_study_sporty;
+            case HIKE5_BUBBLE_STYLE:
+                return R.drawable.hike5_ic_bubble_mr_right_exam;
+            case HIKE6_BUBBLE_STYLE:
+                return R.drawable.hike6_ic_bubble_love_floral_bikers_kisses_valentines_girly;
+            case HIKE7_BUBBLE_STYLE:
+                return R.drawable.hike7_ic_bubble_night;
+            case HIKE8_BUBBLE_STYLE:
+                return R.drawable.hike8_ic_bubble_rains_beach_2;
+            case HIKE9_BUBBLE_STYLE:
+                return R.drawable.hike9_ic_bubble_owl;
+            case HIKE10_BUBBLE_STYLE:
+                return R.drawable.hike10_ic_bubble_smiley_cheers_pets_sporty_cupcakes;
+
+            case TANGO_BUBBLE_STYLE:
+                
+
+            case LINE_BUBBLE_STYLE:
+                return R.drawable.line_v2_img_chats_bg_02;
+                
+            case TELEGRAM_BUBBLE_STYLE:
+                return R.drawable.msg_out;
+            case HANGOUT_BUBBLE_STYLE:
+                return R.drawable.hangouts_msg_bubble_right;
+
+            case VIBER_BUBBLE_STYLE:
+                return R.drawable.viber_text_outgoing_selected;
+            case ZALO_BUBBLE_STYLE:
+                return R.drawable.zalo_out_text_normal;
+
+            default:
+
+                
+        }
+
+        return 0;
+    }
+
+
+    public static int getbackgroundDrawableOutSelected(){
+
+
+
+        switch (ApplicationLoader.balloonType){
+            case WECHAT_BUBBLE_STYLE:
+                return R.drawable.wechat_chat_to_bg_pressed;
+            case WHATSAPP_BUBBLE_STYLE:
+                return R.drawable.balloon_outgoing_focused;
+                
+            case HIKE1_BUBBLE_STYLE:
+                return R.drawable.hike1_pressed_ic_bubble_celebration_space_pressed;
+            case HIKE2_BUBBLE_STYLE:
+                return R.drawable.hike2_pressed_ic_bubble_chatty_beachy_techy;
+            case HIKE3_BUBBLE_STYLE:
+                return R.drawable.hike3_pressed_ic_bubble_creepy;
+            case HIKE4_BUBBLE_STYLE:
+                return R.drawable.hike4_pressed_ic_bubble_green;
+            case HIKE5_BUBBLE_STYLE:
+                return R.drawable.hike5_pressed_ic_bubble_hikin_couple_mountain;
+            case HIKE6_BUBBLE_STYLE:
+                return R.drawable.hike6_pressed_ic_bubble_hikin_couple_mountain;
+            case HIKE7_BUBBLE_STYLE:
+                return R.drawable.hike7_pressed_ic_bubble_starry_space;
+            case HIKE8_BUBBLE_STYLE:
+                return R.drawable.hike8_pressed_ic_bubble_starry_space;
+            case HIKE9_BUBBLE_STYLE:
+                return R.drawable.hike9_pressed_ic_bubble_owl;
+            case HIKE10_BUBBLE_STYLE:
+                return R.drawable.hike10_pressed_ic_bubble_smiley_cheers_pets_sporty_cupcakes;
+                
+            case TANGO_BUBBLE_STYLE:
+                
+
+            case LINE_BUBBLE_STYLE:
+                return R.drawable.line_v2_img_chats_bg_02_pressed;
+
+                
+            case TELEGRAM_BUBBLE_STYLE:
+                return R.drawable.msg_out_selected;
+            case HANGOUT_BUBBLE_STYLE:
+                return R.drawable.hangouts_media_msg_bubble_pressed_right;
+            case VIBER_BUBBLE_STYLE:
+                return R.drawable.viber_text_outgoing_normal;
+
+            case ZALO_BUBBLE_STYLE:
+                return R.drawable.zalo_out_text_pressed;
+            default:
+
+                
+        }
+
+        return 0;
+    }
+
+
+
+    public static int getbackgroundMediaDrawableIn(){
+
+
+
+        switch (ApplicationLoader.balloonType){
+            case WECHAT_BUBBLE_STYLE:
+                return R.drawable.wechat_chatfrom_bg_pic_from;
+
+
+
+
+                
+            case TANGO_BUBBLE_STYLE:
+                
+
+            case LINE_BUBBLE_STYLE:
+            case HIKE1_BUBBLE_STYLE:
+            case HIKE2_BUBBLE_STYLE:
+            case HIKE3_BUBBLE_STYLE:
+            case HIKE4_BUBBLE_STYLE:
+            case HIKE5_BUBBLE_STYLE:
+            case HIKE6_BUBBLE_STYLE:
+            case HIKE7_BUBBLE_STYLE:
+            case HIKE8_BUBBLE_STYLE:
+            case HIKE9_BUBBLE_STYLE:
+            case HIKE10_BUBBLE_STYLE:
+            case WHATSAPP_BUBBLE_STYLE:
+            case TELEGRAM_BUBBLE_STYLE:
+                return R.drawable.msg_in_photo;
+            case HANGOUT_BUBBLE_STYLE:
+                return R.drawable.hangouts_media_msg_bubble_left;
+                
+            case VIBER_BUBBLE_STYLE:
+                return R.drawable.viber_media_incoming_normal;
+            case ZALO_BUBBLE_STYLE:
+                return R.drawable.zalo_media_in_normal;
+
+            default:
+
+                
+        }
+
+        return 0;
+    }
+
+
+
+    public static int getbackgroundMediaDrawableInSelected(){
+
+
+        switch (ApplicationLoader.balloonType){
+            case WECHAT_BUBBLE_STYLE:
+                return R.drawable.wechat_chatfrom_bg_pic_from;
+
+
+
+
+                
+            case TANGO_BUBBLE_STYLE:
+                
+
+            case LINE_BUBBLE_STYLE:
+            case HIKE1_BUBBLE_STYLE:
+            case HIKE2_BUBBLE_STYLE:
+            case HIKE3_BUBBLE_STYLE:
+            case HIKE4_BUBBLE_STYLE:
+            case HIKE5_BUBBLE_STYLE:
+            case HIKE6_BUBBLE_STYLE:
+            case HIKE7_BUBBLE_STYLE:
+            case HIKE8_BUBBLE_STYLE:
+            case HIKE9_BUBBLE_STYLE:
+            case HIKE10_BUBBLE_STYLE:
+            case WHATSAPP_BUBBLE_STYLE:
+            case TELEGRAM_BUBBLE_STYLE:
+                return R.drawable.msg_in_photo_selected;
+
+            case HANGOUT_BUBBLE_STYLE:
+                return R.drawable.hangouts_media_msg_bubble_pressed_left;
+                
+            case VIBER_BUBBLE_STYLE:
+                return R.drawable.viviber_media_incoming_selected;
+
+            case ZALO_BUBBLE_STYLE:
+                return R.drawable.zalo_media_in_pressed;
+            default:
+
+                
+        }
+
+        return 0;
+    }
+
+
+    public static int getbackgroundMediaDrawableOut(){
+
+
+        switch (ApplicationLoader.balloonType){
+            case WECHAT_BUBBLE_STYLE:
+                return R.drawable.wechat_chatfrom_bg_pic_to;
+
+
+
+                
+            case TANGO_BUBBLE_STYLE:
+                
+
+            case LINE_BUBBLE_STYLE:
+            case HIKE1_BUBBLE_STYLE:
+            case HIKE2_BUBBLE_STYLE:
+            case HIKE3_BUBBLE_STYLE:
+            case HIKE4_BUBBLE_STYLE:
+            case HIKE5_BUBBLE_STYLE:
+            case HIKE6_BUBBLE_STYLE:
+            case HIKE7_BUBBLE_STYLE:
+            case HIKE8_BUBBLE_STYLE:
+            case HIKE9_BUBBLE_STYLE:
+            case HIKE10_BUBBLE_STYLE:
+            case WHATSAPP_BUBBLE_STYLE:
+            case TELEGRAM_BUBBLE_STYLE:
+                return R.drawable.msg_out_photo;
+            case HANGOUT_BUBBLE_STYLE:
+                return R.drawable.hangouts_media_msg_bubble_right;
+                
+            case VIBER_BUBBLE_STYLE:
+                return R.drawable.viber_media_outgoing_normal;
+
+            case ZALO_BUBBLE_STYLE:
+                return R.drawable.zalo_media_out_normal;
+            default:
+
+                
+        }
+
+        return 0;
+    }
+
+
+
+
+
+    public static int getbackgroundMediaDrawableOutSelected(){
+
+
+
+        switch (ApplicationLoader.balloonType){
+            case WECHAT_BUBBLE_STYLE:
+                return R.drawable.wechat_chatfrom_bg_pic_to;
+
+
+
+                
+            case TANGO_BUBBLE_STYLE:
+                
+
+            case LINE_BUBBLE_STYLE:
+            case HIKE1_BUBBLE_STYLE:
+            case HIKE2_BUBBLE_STYLE:
+            case HIKE3_BUBBLE_STYLE:
+            case HIKE4_BUBBLE_STYLE:
+            case HIKE5_BUBBLE_STYLE:
+            case HIKE6_BUBBLE_STYLE:
+            case HIKE7_BUBBLE_STYLE:
+            case HIKE8_BUBBLE_STYLE:
+            case HIKE9_BUBBLE_STYLE:
+            case HIKE10_BUBBLE_STYLE:
+            case WHATSAPP_BUBBLE_STYLE:
+            case TELEGRAM_BUBBLE_STYLE:
+                return R.drawable.msg_out_photo_selected;
+            case HANGOUT_BUBBLE_STYLE:
+                return R.drawable.hangouts_media_msg_bubble_pressed_right;
+                
+            case VIBER_BUBBLE_STYLE:
+                return R.drawable.viber_media_outgoing_selected;
+
+            case ZALO_BUBBLE_STYLE:
+                return R.drawable.zalo_media_out_pressed;
+            default:
+
+                
+        }
+
+        return 0;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/android/AppStartReceiver.java b/TMessagesProj/src/main/java/org/tomato/android/AppStartReceiver.java
similarity index 90%
rename from TMessagesProj/src/main/java/org/telegram/android/AppStartReceiver.java
rename to TMessagesProj/src/main/java/org/tomato/android/AppStartReceiver.java
index a52ccccc4..9916fef5a 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/AppStartReceiver.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/AppStartReceiver.java
@@ -6,13 +6,13 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.android;
+package org.tomato.android;
 
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
 
-import org.telegram.ui.ApplicationLoader;
+import org.tomato.ui.ApplicationLoader;
 
 public class AppStartReceiver extends BroadcastReceiver {
     public void onReceive(Context context, Intent intent) {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/AuthenticatorService.java b/TMessagesProj/src/main/java/org/tomato/android/AuthenticatorService.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/android/AuthenticatorService.java
rename to TMessagesProj/src/main/java/org/tomato/android/AuthenticatorService.java
index 1d9c4bdcc..ac349e489 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/AuthenticatorService.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/AuthenticatorService.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.android;
+package org.tomato.android;
 
 import android.accounts.AbstractAccountAuthenticator;
 import android.accounts.Account;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java b/TMessagesProj/src/main/java/org/tomato/android/ContactsController.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
rename to TMessagesProj/src/main/java/org/tomato/android/ContactsController.java
index d6f71a5c4..2955fa7bc 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/ContactsController.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.android;
+package org.tomato.android;
 
 import android.accounts.Account;
 import android.accounts.AccountManager;
@@ -19,17 +19,17 @@
 import android.provider.ContactsContract;
 import android.util.SparseArray;
 
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.messenger.BuildVars;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.Utilities;
-import org.telegram.ui.ApplicationLoader;
+import org.tomato.PhoneFormat.PhoneFormat;
+import org.tomato.messenger.BuildVars;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.RPCRequest;
+import org.tomato.messenger.TLObject;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
+import org.tomato.messenger.Utilities;
+import org.tomato.ui.ApplicationLoader;
 
 import java.util.ArrayList;
 import java.util.Collections;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ContactsSyncAdapterService.java b/TMessagesProj/src/main/java/org/tomato/android/ContactsSyncAdapterService.java
similarity index 96%
rename from TMessagesProj/src/main/java/org/telegram/android/ContactsSyncAdapterService.java
rename to TMessagesProj/src/main/java/org/tomato/android/ContactsSyncAdapterService.java
index 852a84838..8a3abaed0 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ContactsSyncAdapterService.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/ContactsSyncAdapterService.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.android;
+package org.tomato.android;
 
 import android.accounts.Account;
 import android.accounts.OperationCanceledException;
@@ -19,7 +19,7 @@
 import android.os.Bundle;
 import android.os.IBinder;
 
-import org.telegram.messenger.FileLog;
+import org.tomato.messenger.FileLog;
 
 public class ContactsSyncAdapterService extends Service {
     private static SyncAdapterImpl sSyncAdapter = null;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/DownloadObject.java b/TMessagesProj/src/main/java/org/tomato/android/DownloadObject.java
similarity index 83%
rename from TMessagesProj/src/main/java/org/telegram/android/DownloadObject.java
rename to TMessagesProj/src/main/java/org/tomato/android/DownloadObject.java
index f0de07a35..f8cac77a5 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/DownloadObject.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/DownloadObject.java
@@ -6,9 +6,9 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.android;
+package org.tomato.android;
 
-import org.telegram.messenger.TLObject;
+import org.tomato.messenger.TLObject;
 
 public class DownloadObject {
     public TLObject object;
diff --git a/TMessagesProj/src/main/java/org/tomato/android/Emoji.java b/TMessagesProj/src/main/java/org/tomato/android/Emoji.java
new file mode 100644
index 000000000..c67bc6f64
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/android/Emoji.java
@@ -0,0 +1,521 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.android;
+
+import android.graphics.BitmapFactory;
+import android.graphics.Canvas;
+import android.graphics.ColorFilter;
+import android.graphics.Paint;
+import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
+import android.text.Spannable;
+import android.text.style.DynamicDrawableSpan;
+import android.text.style.ImageSpan;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.Utilities;
+import org.tomato.ui.ApplicationLoader;
+
+import java.io.File;
+import java.io.InputStream;
+import java.util.HashMap;
+import java.util.Locale;
+
+public class Emoji {
+	private static HashMap<Long, DrawableInfo> rects = new HashMap<Long, DrawableInfo>();
+	private static int drawImgSize, bigImgSize;
+	private static boolean inited = false;
+	private static Paint placeholderPaint;
+	private static EmojiBitmap emojiBmp[] = new EmojiBitmap[5];
+	private static boolean loadingEmoji[] = new boolean[5];
+    private static int emojiFullSize;
+
+    private static class EmojiBitmap {
+        public int[] colors;
+        public int width;
+        public int height;
+
+        public EmojiBitmap(int[] colors, int width, int height) {
+            this.colors = colors;
+            this.width = width;
+            this.height = height;
+        }
+    }
+
+    private static final int[] cols = {
+            13, 10, 15, 10, 14
+    };
+
+    private static final char[] emojiChars = {
+            0x00A9, 0x00AE, 0x203C, 0x2049, 0x2122, 0x2139, 0x2194, 0x2195, 0x2196, 0x2197,
+            0x2198, 0x2199, 0x21A9, 0x21AA, 0x231A, 0x231B, 0x23E9, 0x23EA, 0x23EB, 0x23EC,
+            0x23F0, 0x23F3, 0x24C2, 0x25AA, 0x25AB, 0x25B6, 0x25C0, 0x25FB, 0x25FC, 0x25FD,
+            0x25FE, 0x2600, 0x2601, 0x260E, 0x2611, 0x2614, 0x2615, 0x261D, 0x263A, 0x2648,
+            0x2649, 0x264A, 0x264B, 0x264C, 0x264D, 0x264E, 0x264F, 0x2650, 0x2651, 0x2652,
+            0x2653, 0x2660, 0x2663, 0x2665, 0x2666, 0x2668, 0x267B, 0x267F, 0x2693, 0x26A0,
+            0x26A1, 0x26AA, 0x26AB, 0x26BD, 0x26BE, 0x26C4, 0x26C5, 0x26CE, 0x26D4, 0x26EA,
+            0x26F2, 0x26F3, 0x26F5, 0x26FA, 0x26FD, 0x2702, 0x2705, 0x2708, 0x2709, 0x270A,
+            0x270B, 0x270C, 0x270F, 0x2712, 0x2714, 0x2716, 0x2728, 0x2733, 0x2734, 0x2744,
+            0x2747, 0x274C, 0x274E, 0x2753, 0x2754, 0x2755, 0x2757, 0x2764, 0x2795, 0x2796,
+            0x2797, 0x27A1, 0x27B0, 0x27BF, 0x2934, 0x2935, 0x2B05, 0x2B06, 0x2B07, 0x2B1B,
+            0x2B1C, 0x2B50, 0x2B55, 0x3030, 0x303D, 0x3297, 0x3299
+    };
+
+    public static  long[][] data = {
+            new long[]
+                    {},
+            new long[]//189
+                    {0x00000000D83DDE04L, 0x00000000D83DDE03L, 0x00000000D83DDE00L, 0x00000000D83DDE0AL, 0x000000000000263AL, 0x00000000D83DDE09L, 0x00000000D83DDE0DL,
+                    0x00000000D83DDE18L, 0x00000000D83DDE1AL, 0x00000000D83DDE17L, 0x00000000D83DDE19L, 0x00000000D83DDE1CL, 0x00000000D83DDE1DL, 0x00000000D83DDE1BL,
+                    0x00000000D83DDE33L, 0x00000000D83DDE01L, 0x00000000D83DDE14L, 0x00000000D83DDE0CL, 0x00000000D83DDE12L, 0x00000000D83DDE1EL, 0x00000000D83DDE23L,
+                    0x00000000D83DDE22L, 0x00000000D83DDE02L, 0x00000000D83DDE2DL, 0x00000000D83DDE2AL, 0x00000000D83DDE25L, 0x00000000D83DDE30L, 0x00000000D83DDE05L,
+                    0x00000000D83DDE13L, 0x00000000D83DDE29L, 0x00000000D83DDE2BL, 0x00000000D83DDE28L, 0x00000000D83DDE31L, 0x00000000D83DDE20L, 0x00000000D83DDE21L,
+                    0x00000000D83DDE24L, 0x00000000D83DDE16L, 0x00000000D83DDE06L, 0x00000000D83DDE0BL, 0x00000000D83DDE37L, 0x00000000D83DDE0EL, 0x00000000D83DDE34L,
+                    0x00000000D83DDE35L, 0x00000000D83DDE32L, 0x00000000D83DDE1FL, 0x00000000D83DDE26L, 0x00000000D83DDE27L, 0x00000000D83DDE08L, 0x00000000D83DDC7FL,
+                    0x00000000D83DDE2EL, 0x00000000D83DDE2CL, 0x00000000D83DDE10L, 0x00000000D83DDE15L, 0x00000000D83DDE2FL, 0x00000000D83DDE36L, 0x00000000D83DDE07L,
+                    0x00000000D83DDE0FL, 0x00000000D83DDE11L, 0x00000000D83DDC72L, 0x00000000D83DDC73L, 0x00000000D83DDC6EL, 0x00000000D83DDC77L, 0x00000000D83DDC82L,
+                    0x00000000D83DDC76L, 0x00000000D83DDC66L, 0x00000000D83DDC67L, 0x00000000D83DDC68L, 0x00000000D83DDC69L, 0x00000000D83DDC74L, 0x00000000D83DDC75L,
+                    0x00000000D83DDC71L, 0x00000000D83DDC7CL, 0x00000000D83DDC78L, 0x00000000D83DDE3AL, 0x00000000D83DDE38L, 0x00000000D83DDE3BL, 0x00000000D83DDE3DL,
+                    0x00000000D83DDE3CL, 0x00000000D83DDE40L, 0x00000000D83DDE3FL, 0x00000000D83DDE39L, 0x00000000D83DDE3EL, 0x00000000D83DDC79L, 0x00000000D83DDC7AL,
+                    0x00000000D83DDE48L, 0x00000000D83DDE49L, 0x00000000D83DDE4AL, 0x00000000D83DDC80L, 0x00000000D83DDC7DL, 0x00000000D83DDCA9L, 0x00000000D83DDD25L,
+                    0x0000000000002728L, 0x00000000D83CDF1FL, 0x00000000D83DDCABL, 0x00000000D83DDCA5L, 0x00000000D83DDCA2L, 0x00000000D83DDCA6L, 0x00000000D83DDCA7L,
+                    0x00000000D83DDCA4L, 0x00000000D83DDCA8L, 0x00000000D83DDC42L, 0x00000000D83DDC40L, 0x00000000D83DDC43L, 0x00000000D83DDC45L, 0x00000000D83DDC44L,
+                    0x00000000D83DDC4DL, 0x00000000D83DDC4EL, 0x00000000D83DDC4CL, 0x00000000D83DDC4AL, 0x000000000000270AL, 0x000000000000270CL, 0x00000000D83DDC4BL,
+                    0x000000000000270BL, 0x00000000D83DDC50L, 0x00000000D83DDC46L, 0x00000000D83DDC47L, 0x00000000D83DDC49L, 0x00000000D83DDC48L, 0x00000000D83DDE4CL,
+                    0x00000000D83DDE4FL, 0x000000000000261DL, 0x00000000D83DDC4FL, 0x00000000D83DDCAAL, 0x00000000D83DDEB6L, 0x00000000D83CDFC3L, 0x00000000D83DDC83L,
+                    0x00000000D83DDC6BL, 0x00000000D83DDC6AL, 0x00000000D83DDC6CL, 0x00000000D83DDC6DL, 0x00000000D83DDC8FL, 0x00000000D83DDC91L, 0x00000000D83DDC6FL,
+                    0x00000000D83DDE46L, 0x00000000D83DDE45L, 0x00000000D83DDC81L, 0x00000000D83DDE4BL, 0x00000000D83DDC86L, 0x00000000D83DDC87L, 0x00000000D83DDC85L,
+                    0x00000000D83DDC70L, 0x00000000D83DDE4EL, 0x00000000D83DDE4DL, 0x00000000D83DDE47L, 0x00000000D83CDFA9L, 0x00000000D83DDC51L, 0x00000000D83DDC52L,
+                    0x00000000D83DDC5FL, 0x00000000D83DDC5EL, 0x00000000D83DDC61L, 0x00000000D83DDC60L, 0x00000000D83DDC62L, 0x00000000D83DDC55L, 0x00000000D83DDC54L,
+                    0x00000000D83DDC5AL, 0x00000000D83DDC57L, 0x00000000D83CDFBDL, 0x00000000D83DDC56L, 0x00000000D83DDC58L, 0x00000000D83DDC59L, 0x00000000D83DDCBCL,
+                    0x00000000D83DDC5CL, 0x00000000D83DDC5DL, 0x00000000D83DDC5BL, 0x00000000D83DDC53L, 0x00000000D83CDF80L, 0x00000000D83CDF02L, 0x00000000D83DDC84L,
+                    0x00000000D83DDC9BL, 0x00000000D83DDC99L, 0x00000000D83DDC9CL, 0x00000000D83DDC9AL, 0x0000000000002764L, 0x00000000D83DDC94L, 0x00000000D83DDC97L,
+                    0x00000000D83DDC93L, 0x00000000D83DDC95L, 0x00000000D83DDC96L, 0x00000000D83DDC9EL, 0x00000000D83DDC98L, 0x00000000D83DDC8CL, 0x00000000D83DDC8BL,
+                    0x00000000D83DDC8DL, 0x00000000D83DDC8EL, 0x00000000D83DDC64L, 0x00000000D83DDC65L, 0x00000000D83DDCACL, 0x00000000D83DDC63L, 0x00000000D83DDCADL},
+            new long[]//116
+                    {0x00000000D83DDC36L, 0x00000000D83DDC3AL, 0x00000000D83DDC31L, 0x00000000D83DDC2DL, 0x00000000D83DDC39L, 0x00000000D83DDC30L, 0x00000000D83DDC38L, 0x00000000D83DDC2FL,
+                    0x00000000D83DDC28L, 0x00000000D83DDC3BL, 0x00000000D83DDC37L, 0x00000000D83DDC3DL, 0x00000000D83DDC2EL, 0x00000000D83DDC17L, 0x00000000D83DDC35L,
+                    0x00000000D83DDC12L, 0x00000000D83DDC34L, 0x00000000D83DDC11L, 0x00000000D83DDC18L, 0x00000000D83DDC3CL, 0x00000000D83DDC27L, 0x00000000D83DDC26L,
+                    0x00000000D83DDC24L, 0x00000000D83DDC25L, 0x00000000D83DDC23L, 0x00000000D83DDC14L, 0x00000000D83DDC0DL, 0x00000000D83DDC22L, 0x00000000D83DDC1BL,
+                    0x00000000D83DDC1DL, 0x00000000D83DDC1CL, 0x00000000D83DDC1EL, 0x00000000D83DDC0CL, 0x00000000D83DDC19L, 0x00000000D83DDC1AL, 0x00000000D83DDC20L,
+                    0x00000000D83DDC1FL, 0x00000000D83DDC2CL, 0x00000000D83DDC33L, 0x00000000D83DDC0BL, 0x00000000D83DDC04L, 0x00000000D83DDC0FL, 0x00000000D83DDC00L,
+                    0x00000000D83DDC03L, 0x00000000D83DDC05L, 0x00000000D83DDC07L, 0x00000000D83DDC09L, 0x00000000D83DDC0EL, 0x00000000D83DDC10L, 0x00000000D83DDC13L,
+                    0x00000000D83DDC15L, 0x00000000D83DDC16L, 0x00000000D83DDC01L, 0x00000000D83DDC02L, 0x00000000D83DDC32L, 0x00000000D83DDC21L, 0x00000000D83DDC0AL,
+                    0x00000000D83DDC2BL, 0x00000000D83DDC2AL, 0x00000000D83DDC06L, 0x00000000D83DDC08L, 0x00000000D83DDC29L, 0x00000000D83DDC3EL, 0x00000000D83DDC90L,
+                    0x00000000D83CDF38L, 0x00000000D83CDF37L, 0x00000000D83CDF40L, 0x00000000D83CDF39L, 0x00000000D83CDF3BL, 0x00000000D83CDF3AL, 0x00000000D83CDF41L,
+                    0x00000000D83CDF43L, 0x00000000D83CDF42L, 0x00000000D83CDF3FL, 0x00000000D83CDF3EL, 0x00000000D83CDF44L, 0x00000000D83CDF35L, 0x00000000D83CDF34L,
+                    0x00000000D83CDF32L, 0x00000000D83CDF33L, 0x00000000D83CDF30L, 0x00000000D83CDF31L, 0x00000000D83CDF3CL, 0x00000000D83CDF10L, 0x00000000D83CDF1EL,
+                    0x00000000D83CDF1DL, 0x00000000D83CDF1AL, 0x00000000D83CDF11L, 0x00000000D83CDF12L, 0x00000000D83CDF13L, 0x00000000D83CDF14L, 0x00000000D83CDF15L,
+                    0x00000000D83CDF16L, 0x00000000D83CDF17L, 0x00000000D83CDF18L, 0x00000000D83CDF1CL, 0x00000000D83CDF1BL, 0x00000000D83CDF19L, 0x00000000D83CDF0DL,
+                    0x00000000D83CDF0EL, 0x00000000D83CDF0FL, 0x00000000D83CDF0BL, 0x00000000D83CDF0CL, 0x00000000D83CDF20L, 0x0000000000002B50L, 0x0000000000002600L,
+                    0x00000000000026C5L, 0x0000000000002601L, 0x00000000000026A1L, 0x0000000000002614L, 0x0000000000002744L, 0x00000000000026C4L, 0x00000000D83CDF00L,
+                    0x00000000D83CDF01L, 0x00000000D83CDF08L, 0x00000000D83CDF0AL},
+            new long[]//230
+                    {0x00000000D83CDF8DL, 0x00000000D83DDC9DL, 0x00000000D83CDF8EL, 0x00000000D83CDF92L, 0x00000000D83CDF93L, 0x00000000D83CDF8FL, 0x00000000D83CDF86L, 0x00000000D83CDF87L,
+                    0x00000000D83CDF90L, 0x00000000D83CDF91L, 0x00000000D83CDF83L, 0x00000000D83DDC7BL, 0x00000000D83CDF85L, 0x00000000D83CDF84L, 0x00000000D83CDF81L,
+                    0x00000000D83CDF8BL, 0x00000000D83CDF89L, 0x00000000D83CDF8AL, 0x00000000D83CDF88L, 0x00000000D83CDF8CL, 0x00000000D83DDD2EL, 0x00000000D83CDFA5L,
+                    0x00000000D83DDCF7L, 0x00000000D83DDCF9L, 0x00000000D83DDCFCL, 0x00000000D83DDCBFL, 0x00000000D83DDCC0L, 0x00000000D83DDCBDL, 0x00000000D83DDCBEL,
+                    0x00000000D83DDCBBL, 0x00000000D83DDCF1L, 0x000000000000260EL, 0x00000000D83DDCDEL, 0x00000000D83DDCDFL, 0x00000000D83DDCE0L, 0x00000000D83DDCE1L,
+                    0x00000000D83DDCFAL, 0x00000000D83DDCFBL, 0x00000000D83DDD0AL, 0x00000000D83DDD09L, 0x00000000D83DDD08L, 0x00000000D83DDD07L, 0x00000000D83DDD14L, 0x00000000D83DDD15L,
+                    0x00000000D83DDCE2L, 0x00000000D83DDCE3L, 0x00000000000023F3L, 0x000000000000231BL, 0x00000000000023F0L, 0x000000000000231AL,
+                    0x00000000D83DDD13L, 0x00000000D83DDD12L, 0x00000000D83DDD0FL, 0x00000000D83DDD10L, 0x00000000D83DDD11L, 0x00000000D83DDD0EL, 0x00000000D83DDCA1L,
+                    0x00000000D83DDD26L, 0x00000000D83DDD06L, 0x00000000D83DDD05L, 0x00000000D83DDD0CL, 0x00000000D83DDD0BL, 0x00000000D83DDD0DL, 0x00000000D83DDEC1L, 0x00000000D83DDEC0L,
+                    0x00000000D83DDEBFL, 0x00000000D83DDEBDL, 0x00000000D83DDD27L, 0x00000000D83DDD29L, 0x00000000D83DDD28L, 0x00000000D83DDEAAL, 0x00000000D83DDEACL,
+                    0x00000000D83DDCA3L, 0x00000000D83DDD2BL, 0x00000000D83DDD2AL, 0x00000000D83DDC8AL, 0x00000000D83DDC89L, 0x00000000D83DDCB0L, 0x00000000D83DDCB4L,
+                    0x00000000D83DDCB5L, 0x00000000D83DDCB7L, 0x00000000D83DDCB6L, 0x00000000D83DDCB3L, 0x00000000D83DDCB8L, 0x00000000D83DDCF2L, 0x00000000D83DDCE7L,
+                    0x00000000D83DDCE5L, 0x00000000D83DDCE4L, 0x0000000000002709L, 0x00000000D83DDCE9L, 0x00000000D83DDCE8L, 0x00000000D83DDCEFL, 0x00000000D83DDCEBL,
+                    0x00000000D83DDCEAL, 0x00000000D83DDCECL, 0x00000000D83DDCEDL, 0x00000000D83DDCEEL, 0x00000000D83DDCE6L, 0x00000000D83DDCDDL, 0x00000000D83DDCC4L,
+                    0x00000000D83DDCC3L, 0x00000000D83DDCD1L, 0x00000000D83DDCCAL, 0x00000000D83DDCC8L, 0x00000000D83DDCC9L, 0x00000000D83DDCDCL, 0x00000000D83DDCCBL,
+                    0x00000000D83DDCC5L, 0x00000000D83DDCC6L, 0x00000000D83DDCC7L, 0x00000000D83DDCC1L, 0x00000000D83DDCC2L, 0x0000000000002702L, 0x00000000D83DDCCCL,
+                    0x00000000D83DDCCEL, 0x0000000000002712L, 0x000000000000270FL, 0x00000000D83DDCCFL, 0x00000000D83DDCD0L, 0x00000000D83DDCD5L, 0x00000000D83DDCD7L,
+                    0x00000000D83DDCD8L, 0x00000000D83DDCD9L, 0x00000000D83DDCD3L, 0x00000000D83DDCD4L, 0x00000000D83DDCD2L, 0x00000000D83DDCDAL, 0x00000000D83DDCD6L,
+                    0x00000000D83DDD16L, 0x00000000D83DDCDBL, 0x00000000D83DDD2CL, 0x00000000D83DDD2DL, 0x00000000D83DDCF0L, 0x00000000D83CDFA8L, 0x00000000D83CDFACL,
+                    0x00000000D83CDFA4L, 0x00000000D83CDFA7L, 0x00000000D83CDFBCL, 0x00000000D83CDFB5L, 0x00000000D83CDFB6L, 0x00000000D83CDFB9L, 0x00000000D83CDFBBL,
+                    0x00000000D83CDFBAL, 0x00000000D83CDFB7L, 0x00000000D83CDFB8L, 0x00000000D83DDC7EL, 0x00000000D83CDFAEL, 0x00000000D83CDCCFL, 0x00000000D83CDFB4L,
+                    0x00000000D83CDC04L, 0x00000000D83CDFB2L, 0x00000000D83CDFAFL, 0x00000000D83CDFC8L, 0x00000000D83CDFC0L, 0x00000000000026BDL, 0x00000000000026BEL,
+                    0x00000000D83CDFBEL, 0x00000000D83CDFB1L, 0x00000000D83CDFC9L, 0x00000000D83CDFB3L, 0x00000000000026F3L, 0x00000000D83DDEB5L, 0x00000000D83DDEB4L,
+                    0x00000000D83CDFC1L, 0x00000000D83CDFC7L, 0x00000000D83CDFC6L, 0x00000000D83CDFBFL, 0x00000000D83CDFC2L, 0x00000000D83CDFCAL, 0x00000000D83CDFC4L,
+                    0x00000000D83CDFA3L, 0x0000000000002615L, 0x00000000D83CDF75L, 0x00000000D83CDF76L, 0x00000000D83CDF7CL, 0x00000000D83CDF7AL, 0x00000000D83CDF7BL,
+                    0x00000000D83CDF78L, 0x00000000D83CDF79L, 0x00000000D83CDF77L, 0x00000000D83CDF74L, 0x00000000D83CDF55L, 0x00000000D83CDF54L, 0x00000000D83CDF5FL,
+                    0x00000000D83CDF57L, 0x00000000D83CDF56L, 0x00000000D83CDF5DL, 0x00000000D83CDF5BL, 0x00000000D83CDF64L, 0x00000000D83CDF71L, 0x00000000D83CDF63L,
+                    0x00000000D83CDF65L, 0x00000000D83CDF59L, 0x00000000D83CDF58L, 0x00000000D83CDF5AL, 0x00000000D83CDF5CL, 0x00000000D83CDF72L, 0x00000000D83CDF62L,
+                    0x00000000D83CDF61L, 0x00000000D83CDF73L, 0x00000000D83CDF5EL, 0x00000000D83CDF69L, 0x00000000D83CDF6EL, 0x00000000D83CDF66L, 0x00000000D83CDF68L,
+                    0x00000000D83CDF67L, 0x00000000D83CDF82L, 0x00000000D83CDF70L, 0x00000000D83CDF6AL, 0x00000000D83CDF6BL, 0x00000000D83CDF6CL, 0x00000000D83CDF6DL,
+                    0x00000000D83CDF6FL, 0x00000000D83CDF4EL, 0x00000000D83CDF4FL, 0x00000000D83CDF4AL, 0x00000000D83CDF4BL, 0x00000000D83CDF52L, 0x00000000D83CDF47L,
+                    0x00000000D83CDF49L, 0x00000000D83CDF53L, 0x00000000D83CDF51L, 0x00000000D83CDF48L, 0x00000000D83CDF4CL, 0x00000000D83CDF50L, 0x00000000D83CDF4DL,
+                    0x00000000D83CDF60L, 0x00000000D83CDF46L, 0x00000000D83CDF45L, 0x00000000D83CDF3DL},
+            new long[]//101
+                    {0x00000000D83CDFE0L, 0x00000000D83CDFE1L, 0x00000000D83CDFEBL, 0x00000000D83CDFE2L, 0x00000000D83CDFE3L, 0x00000000D83CDFE5L, 0x00000000D83CDFE6L, 0x00000000D83CDFEAL,
+                    0x00000000D83CDFE9L, 0x00000000D83CDFE8L, 0x00000000D83DDC92L, 0x00000000000026EAL, 0x00000000D83CDFECL, 0x00000000D83CDFE4L, 0x00000000D83CDF07L,
+                    0x00000000D83CDF06L, 0x00000000D83CDFEFL, 0x00000000D83CDFF0L, 0x00000000000026FAL, 0x00000000D83CDFEDL, 0x00000000D83DDDFCL, 0x00000000D83DDDFEL,
+                    0x00000000D83DDDFBL, 0x00000000D83CDF04L, 0x00000000D83CDF05L, 0x00000000D83CDF03L, 0x00000000D83DDDFDL, 0x00000000D83CDF09L, 0x00000000D83CDFA0L,
+                    0x00000000D83CDFA1L, 0x00000000000026F2L, 0x00000000D83CDFA2L, 0x00000000D83DDEA2L, 0x00000000000026F5L, 0x00000000D83DDEA4L, 0x00000000D83DDEA3L,
+                    0x0000000000002693L, 0x00000000D83DDE80L, 0x0000000000002708L, 0x00000000D83DDCBAL, 0x00000000D83DDE81L, 0x00000000D83DDE82L, 0x00000000D83DDE8AL,
+                    0x00000000D83DDE89L, 0x00000000D83DDE9EL, 0x00000000D83DDE86L, 0x00000000D83DDE84L, 0x00000000D83DDE85L, 0x00000000D83DDE88L, 0x00000000D83DDE87L,
+                    0x00000000D83DDE9DL, 0x00000000D83DDE8BL, 0x00000000D83DDE83L, 0x00000000D83DDE8EL, 0x00000000D83DDE8CL, 0x00000000D83DDE8DL, 0x00000000D83DDE99L,
+                    0x00000000D83DDE98L, 0x00000000D83DDE97L, 0x00000000D83DDE95L, 0x00000000D83DDE96L, 0x00000000D83DDE9BL, 0x00000000D83DDE9AL, 0x00000000D83DDEA8L,
+                    0x00000000D83DDE93L, 0x00000000D83DDE94L, 0x00000000D83DDE92L, 0x00000000D83DDE91L, 0x00000000D83DDE90L, 0x00000000D83DDEB2L, 0x00000000D83DDEA1L,
+                    0x00000000D83DDE9FL, 0x00000000D83DDEA0L, 0x00000000D83DDE9CL, 0x00000000D83DDC88L, 0x00000000D83DDE8FL, 0x00000000D83CDFABL, 0x00000000D83DDEA6L,
+                    0x00000000D83DDEA5L, 0x00000000000026A0L, 0x00000000D83DDEA7L, 0x00000000D83DDD30L, 0x00000000000026FDL, 0x00000000D83CDFEEL, 0x00000000D83CDFB0L,
+                    0x0000000000002668L, 0x00000000D83DDDFFL, 0x00000000D83CDFAAL, 0x00000000D83CDFADL, 0x00000000D83DDCCDL, 0x00000000D83DDEA9L, 0xD83CDDEFD83CDDF5L,
+                    0xD83CDDF0D83CDDF7L, 0xD83CDDE9D83CDDEAL, 0xD83CDDE8D83CDDF3L, 0xD83CDDFAD83CDDF8L, 0xD83CDDEBD83CDDF7L, 0xD83CDDEAD83CDDF8L, 0xD83CDDEED83CDDF9L,
+                    0xD83CDDF7D83CDDFAL, 0xD83CDDECD83CDDE7L},
+            new long[]//209
+                    {0x00000000003120E3L, 0x00000000003220E3L, 0x00000000003320E3L, 0x00000000003420E3L, 0x00000000003520E3L, 0x00000000003620E3L, 0x00000000003720E3L, 0x00000000003820E3L,
+                    0x00000000003920E3L, 0x00000000003020E3L, 0x00000000D83DDD1FL, 0x00000000D83DDD22L, 0x00000000002320E3L, 0x00000000D83DDD23L, 0x0000000000002B06L,
+                    0x0000000000002B07L, 0x0000000000002B05L, 0x00000000000027A1L, 0x00000000D83DDD20L, 0x00000000D83DDD21L, 0x00000000D83DDD24L, 0x0000000000002197L,
+                    0x0000000000002196L, 0x0000000000002198L, 0x0000000000002199L, 0x0000000000002194L, 0x0000000000002195L, 0x00000000D83DDD04L, 0x00000000000025C0L,
+                    0x00000000000025B6L, 0x00000000D83DDD3CL, 0x00000000D83DDD3DL, 0x00000000000021A9L, 0x00000000000021AAL, 0x0000000000002139L, 0x00000000000023EAL,
+                    0x00000000000023E9L, 0x00000000000023EBL, 0x00000000000023ECL, 0x0000000000002935L, 0x0000000000002934L, 0x00000000D83CDD97L, 0x00000000D83DDD00L,
+                    0x00000000D83DDD01L, 0x00000000D83DDD02L, 0x00000000D83CDD95L, 0x00000000D83CDD99L, 0x00000000D83CDD92L, 0x00000000D83CDD93L, 0x00000000D83CDD96L,
+                    0x00000000D83DDCF6L, 0x00000000D83CDFA6L, 0x00000000D83CDE01L, 0x00000000D83CDE2FL, 0x00000000D83CDE33L, 0x00000000D83CDE35L, 0x00000000D83CDE32L,
+                    0x00000000D83CDE34L, 0x00000000D83CDE50L, 0x00000000D83CDE39L, 0x00000000D83CDE3AL, 0x00000000D83CDE36L, 0x00000000D83CDE1AL,
+                    0x00000000D83DDEBBL, 0x00000000D83DDEB9L, 0x00000000D83DDEBAL, 0x00000000D83DDEBCL, 0x00000000D83DDEBEL, 0x00000000D83DDEB0L, 0x00000000D83DDEAEL,
+                    0x00000000D83CDD7FL, 0x000000000000267FL, 0x00000000D83DDEADL, 0x00000000D83CDE37L, 0x00000000D83CDE38L, 0x00000000D83CDE02L, 0x00000000000024C2L,
+                    0x00000000D83DDEC2L, 0x00000000D83DDEC4L, 0x00000000D83DDEC5L, 0x00000000D83DDEC3L,
+
+                    0x00000000D83CDE51L, 0x0000000000003299L, 0x0000000000003297L, 0x00000000D83CDD91L, 0x00000000D83CDD98L, 0x00000000D83CDD94L, 0x00000000D83DDEABL,
+                    0x00000000D83DDD1EL, 0x00000000D83DDCF5L, 0x00000000D83DDEAFL, 0x00000000D83DDEB1L, 0x00000000D83DDEB3L, 0x00000000D83DDEB7L, 0x00000000D83DDEB8L,
+                    0x00000000000026D4L, 0x0000000000002733L, 0x0000000000002747L, 0x000000000000274EL, 0x0000000000002705L, 0x0000000000002734L, 0x00000000D83DDC9FL,
+                    0x00000000D83CDD9AL, 0x00000000D83DDCF3L, 0x00000000D83DDCF4L, 0x00000000D83CDD70L, 0x00000000D83CDD71L, 0x00000000D83CDD8EL, 0x00000000D83CDD7EL,
+                    0x00000000D83DDCA0L, 0x00000000000027BFL, 0x000000000000267BL, 0x0000000000002648L, 0x0000000000002649L, 0x000000000000264AL, 0x000000000000264BL,
+                    0x000000000000264CL, 0x000000000000264DL, 0x000000000000264EL, 0x000000000000264FL, 0x0000000000002650L, 0x0000000000002651L, 0x0000000000002652L,
+                    0x0000000000002653L, 0x00000000000026CEL, 0x00000000D83DDD2FL, 0x00000000D83CDFE7L, 0x00000000D83DDCB9L, 0x00000000D83DDCB2L, 0x00000000D83DDCB1L,
+                    0x00000000000000A9L, 0x00000000000000AEL, 0x0000000000002122L, 0x000000000000303DL, 0x0000000000003030L, 0x00000000D83DDD1DL, 0x00000000D83DDD1AL,
+                    0x00000000D83DDD19L, 0x00000000D83DDD1BL, 0x00000000D83DDD1CL, 0x000000000000274CL, 0x0000000000002B55L, 0x0000000000002757L, 0x000000000000203CL,
+    0x0000000000002049L, 0x0000000000002753L,
+                    0x0000000000002755L, 0x0000000000002754L, 0x00000000D83DDD03L, 0x00000000D83DDD5BL, 0x00000000D83DDD67L, 0x00000000D83DDD50L, 0x00000000D83DDD5CL,
+                    0x00000000D83DDD51L, 0x00000000D83DDD5DL, 0x00000000D83DDD52L, 0x00000000D83DDD5EL, 0x00000000D83DDD53L, 0x00000000D83DDD5FL, 0x00000000D83DDD54L,
+                    0x00000000D83DDD60L, 0x00000000D83DDD55L, 0x00000000D83DDD56L, 0x00000000D83DDD57L, 0x00000000D83DDD58L, 0x00000000D83DDD59L, 0x00000000D83DDD5AL,
+                    0x00000000D83DDD61L, 0x00000000D83DDD62L, 0x00000000D83DDD63L, 0x00000000D83DDD64L, 0x00000000D83DDD65L, 0x00000000D83DDD66L, 0x0000000000002716L,
+                    0x0000000000002795L, 0x0000000000002796L, 0x0000000000002797L, 0x0000000000002660L, 0x0000000000002665L, 0x0000000000002663L, 0x0000000000002666L,
+                    0x00000000D83DDCAEL, 0x00000000D83DDCAFL, 0x0000000000002714L, 0x0000000000002611L, 0x00000000D83DDD18L, 0x00000000D83DDD17L, 0x00000000000027B0L,
+                    0x00000000D83DDD31L, 0x00000000D83DDD32L, 0x00000000D83DDD33L, 0x00000000000025FCL, 0x00000000000025FBL, 0x00000000000025FEL, 0x00000000000025FDL,
+                    0x00000000000025AAL, 0x00000000000025ABL, 0x00000000D83DDD3AL, 0x0000000000002B1CL, 0x0000000000002B1BL, 0x00000000000026ABL, 0x00000000000026AAL,
+                    0x00000000D83DDD34L, 0x00000000D83DDD35L, 0x00000000D83DDD3BL, 0x00000000D83DDD36L, 0x00000000D83DDD37L, 0x00000000D83DDD38L, 0x00000000D83DDD39L}};
+	
+	static {
+        if (AndroidUtilities.density <= 1.0f) {
+            emojiFullSize = 30;
+        } else if (AndroidUtilities.density <= 1.5f) {
+            emojiFullSize = 45;
+        } else if (AndroidUtilities.density <= 2.0f) {
+            emojiFullSize = 60;
+        } else {
+            emojiFullSize = 90;
+        }
+		drawImgSize = AndroidUtilities.dp(20);
+        if (AndroidUtilities.isTablet()) {
+            bigImgSize = AndroidUtilities.dp(40);
+        } else {
+            bigImgSize = AndroidUtilities.dp(30);
+        }
+
+		for (int j = 1; j < data.length; j++) {
+			for (int i = 0; i < data[j].length; i++) {
+				Rect rect = new Rect((i % cols[j - 1]) * emojiFullSize, (i / cols[j - 1]) * emojiFullSize, emojiFullSize, emojiFullSize);
+				rects.put(data[j][i], new DrawableInfo(rect, (byte)(j - 1)));
+			}
+		}
+		placeholderPaint = new Paint();
+		placeholderPaint.setColor(0x00000000);
+	}
+
+	private static void loadEmoji(final int page) {
+		try {
+            float scale = 1.0f;
+            int imageResize = 1;
+            if (AndroidUtilities.density <= 1.0f) {
+                scale = 2.0f;
+                imageResize = 2;
+            } else if (AndroidUtilities.density <= 1.5f) {
+                scale = 3.0f;
+                imageResize = 2;
+            } else if (AndroidUtilities.density <= 2.0f) {
+                scale = 2.0f;
+            } else {
+                scale = 3.0f;
+            }
+
+            String imageName = String.format(Locale.US, "emoji%.01fx_%d.jpg", scale, page);
+            File imageFile = ApplicationLoader.applicationContext.getFileStreamPath(imageName);
+            if (!imageFile.exists()) {
+                InputStream is = ApplicationLoader.applicationContext.getAssets().open("emoji/" + imageName);
+                Utilities.copyFile(is, imageFile);
+                is.close();
+            }
+
+            BitmapFactory.Options opts = new BitmapFactory.Options();
+            opts.inJustDecodeBounds = true;
+            BitmapFactory.decodeFile(imageFile.getAbsolutePath(), opts);
+
+            int width = opts.outWidth / imageResize;
+            int height = opts.outHeight / imageResize;
+            int[] bitmap = new int[width * height];
+            Utilities.loadBitmap(imageFile.getAbsolutePath(), bitmap, imageResize, 0, width, height);
+
+            imageName = String.format(Locale.US, "emoji%.01fx_a_%d.jpg", scale, page);
+            imageFile = ApplicationLoader.applicationContext.getFileStreamPath(imageName);
+            if (!imageFile.exists()) {
+                InputStream is = ApplicationLoader.applicationContext.getAssets().open("emoji/" + imageName);
+                Utilities.copyFile(is, imageFile);
+                is.close();
+            }
+
+            Utilities.loadBitmap(imageFile.getAbsolutePath(), bitmap, imageResize, 0, width, height);
+
+            final EmojiBitmap emojiBitmap = new EmojiBitmap(bitmap, width, height);
+            AndroidUtilities.RunOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    emojiBmp[page] = emojiBitmap;
+                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.emojiDidLoaded);
+                }
+            });
+		} catch(Throwable x) {
+            FileLog.e("tmessages", "Error loading emoji", x);
+        }
+	}
+	
+	private static void loadEmojiAsync(final int page) {
+		if (loadingEmoji[page]) {
+            return;
+        }
+        loadingEmoji[page] = true;
+		new Thread(new Runnable() {
+            public void run() {
+                loadEmoji(page);
+                loadingEmoji[page] = false;
+            }
+        }).start();
+	}
+	
+	public static void invalidateAll(View view) {
+		if (view instanceof ViewGroup) {
+			ViewGroup g = (ViewGroup)view;
+			for (int i = 0; i < g.getChildCount(); i++) {
+				invalidateAll(g.getChildAt(i));
+			}
+		} else if (view instanceof TextView) {
+			view.invalidate();
+		}
+	}
+	
+	public static Drawable getEmojiDrawable(long code) {
+		DrawableInfo info = rects.get(code);
+		if (info == null) {
+            FileLog.e("tmessages", "No emoji drawable for code " + String.format("%016X", code));
+			return null;
+		}
+		EmojiDrawable ed = new EmojiDrawable(info);
+		ed.setBounds(0, 0, drawImgSize, drawImgSize);
+		return ed;
+	}
+	
+	public static Drawable getEmojiBigDrawable(long code) {
+		EmojiDrawable ed = (EmojiDrawable)getEmojiDrawable(code);
+		if (ed == null) {
+            return null;
+        }
+		ed.setBounds(0, 0, bigImgSize, bigImgSize);
+		ed.fullSize = true;
+		return ed;
+	}
+	
+	public static class EmojiDrawable extends Drawable {
+        private DrawableInfo info;
+		boolean fullSize = false;
+		private static Paint paint;
+
+		static {
+			paint = new Paint();
+            paint.setFlags(Paint.FILTER_BITMAP_FLAG | Paint.ANTI_ALIAS_FLAG);
+		}
+		
+		public EmojiDrawable(DrawableInfo i) {
+			info = i;
+		}
+		
+		@Override
+		public void draw(Canvas canvas) {
+            EmojiBitmap bitmap = emojiBmp[info.page];
+			if (bitmap == null) {
+                loadEmojiAsync(info.page);
+				canvas.drawRect(getBounds(), placeholderPaint);
+				return;
+			}
+            float scale = 1;
+            int offset = 0;
+            if (fullSize) {
+                scale = (float) bigImgSize / (float) emojiFullSize;
+                offset = (getBounds().width() - bigImgSize) / 2;
+            } else {
+                scale = (float) getBounds().width() / (float) emojiFullSize;
+            }
+
+            canvas.save();
+            canvas.scale(scale, scale);
+            canvas.drawBitmap(bitmap.colors, info.rect.top * bitmap.width + info.rect.left, bitmap.width, offset, offset, info.rect.right, info.rect.bottom, true, paint);
+            canvas.restore();
+		}
+
+		@Override
+		public int getOpacity() {
+			return 0;
+		}
+
+		@Override
+		public void setAlpha(int alpha) {
+
+        }
+
+		@Override
+		public void setColorFilter(ColorFilter cf) {
+
+        }
+	}
+	
+	private static class DrawableInfo {
+        public Rect rect;
+        public byte page;
+
+		public DrawableInfo(Rect r, byte p) {
+			rect = r;
+            page = p;
+		}
+	}
+
+    private static boolean inArray(char c, char[] a) {
+        for (char cc : a) {
+            if (cc == c) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    public static CharSequence replaceEmoji(CharSequence cs, Paint.FontMetricsInt fontMetrics, int size) {
+        if (cs == null || cs.length() == 0) {
+            return cs;
+        }
+        Spannable s;
+        if (cs instanceof Spannable) {
+            s = (Spannable)cs;
+        } else {
+            s = Spannable.Factory.getInstance().newSpannable(cs);
+        }
+        long buf = 0;
+        int emojiCount = 0;
+        try {
+            for (int i = 0; i < cs.length(); i++) {
+                char c = cs.charAt(i);
+                if (c == 0xD83C || c == 0xD83D || (buf != 0 && (buf & 0xFFFFFFFF00000000L) == 0 && (c >= 0xDDE6 && c <= 0xDDFA))) {
+                    buf <<= 16;
+                    buf |= c;
+                } else if (buf > 0 && (c & 0xF000) == 0xD000) {
+                    buf <<= 16;
+                    buf |= c;
+                    Drawable d = Emoji.getEmojiDrawable(buf);
+                    if (d != null) {
+                        EmojiSpan span = new EmojiSpan(d, DynamicDrawableSpan.ALIGN_BOTTOM, size, fontMetrics);
+                        emojiCount++;
+                        if (c>= 0xDDE6 && c <= 0xDDFA) {
+                            s.setSpan(span, i - 3, i + 1, 0);
+                        } else {
+                            s.setSpan(span, i - 1, i + 1, 0);
+                        }
+                    }
+                    buf = 0;
+                } else if (c == 0x20E3) {
+                    if (i > 0) {
+                        char c2 = cs.charAt(i - 1);
+                        if ((c2 >= '0' && c2 <= '9') || c2 == '#') {
+                            buf = c2;
+                            buf <<= 16;
+                            buf |= c;
+                            Drawable d = Emoji.getEmojiDrawable(buf);
+                            if (d != null) {
+                                EmojiSpan span = new EmojiSpan(d, DynamicDrawableSpan.ALIGN_BOTTOM, size, fontMetrics);
+                                emojiCount++;
+                                s.setSpan(span, i - 1, i + 1, 0);
+                            }
+                            buf = 0;
+                        }
+                    }
+                } else if (inArray(c, emojiChars)) {
+                    Drawable d = Emoji.getEmojiDrawable(c);
+                    if (d != null) {
+                        EmojiSpan span = new EmojiSpan(d, DynamicDrawableSpan.ALIGN_BOTTOM, size, fontMetrics);
+                        emojiCount++;
+                        s.setSpan(span, i, i + 1, 0);
+                    }
+                }
+                if (emojiCount >= 50) {
+                    break;
+                }
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+            return cs;
+        }
+        return s;
+    }
+
+    public static class EmojiSpan extends ImageSpan {
+        private Paint.FontMetricsInt fontMetrics = null;
+        int size = AndroidUtilities.dp(20);
+
+        public EmojiSpan(Drawable d, int verticalAlignment, int s, Paint.FontMetricsInt original) {
+            super(d, verticalAlignment);
+            fontMetrics = original;
+            if (original != null) {
+                size = Math.abs(fontMetrics.descent) + Math.abs(fontMetrics.ascent);
+                if (size == 0) {
+                    size = AndroidUtilities.dp(20);
+                }
+            }
+        }
+
+        @Override
+        public int getSize(Paint paint, CharSequence text, int start, int end, Paint.FontMetricsInt fm) {
+            if (fm == null) {
+                fm = new Paint.FontMetricsInt();
+            }
+
+            if (fontMetrics == null) {
+                int sz = super.getSize(paint, text, start, end, fm);
+
+                int offset = AndroidUtilities.dp(8);
+                int w = AndroidUtilities.dp(10);
+                fm.top = -w - offset;
+                fm.bottom = w - offset;
+                fm.ascent = -w - offset;
+                fm.leading = 0;
+                fm.descent = w - offset;
+
+                return sz;
+            } else {
+                if (fm != null) {
+                    fm.ascent = fontMetrics.ascent;
+                    fm.descent = fontMetrics.descent;
+
+                    fm.top = fontMetrics.top;
+                    fm.bottom = fontMetrics.bottom;
+                }
+                if (getDrawable() != null) {
+                    getDrawable().setBounds(0, 0, size, size);
+                }
+                return size;
+            }
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/FastDateFormat.java b/TMessagesProj/src/main/java/org/tomato/android/FastDateFormat.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/android/FastDateFormat.java
rename to TMessagesProj/src/main/java/org/tomato/android/FastDateFormat.java
index 0d0a029ae..ff87bae9c 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/FastDateFormat.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/FastDateFormat.java
@@ -5,7 +5,7 @@
  *
  * Copyright Nikolai Kudashov, 2013.
  */
-package org.telegram.android;
+package org.tomato.android;
 
 import java.io.IOException;
 import java.io.ObjectInputStream;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/GcmBroadcastReceiver.java b/TMessagesProj/src/main/java/org/tomato/android/GcmBroadcastReceiver.java
similarity index 94%
rename from TMessagesProj/src/main/java/org/telegram/android/GcmBroadcastReceiver.java
rename to TMessagesProj/src/main/java/org/tomato/android/GcmBroadcastReceiver.java
index 04f282cb6..0d8d247ff 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/GcmBroadcastReceiver.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/GcmBroadcastReceiver.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.android;
+package org.tomato.android;
 
 import android.app.Activity;
 import android.content.BroadcastReceiver;
@@ -14,9 +14,9 @@
 import android.content.Intent;
 
 import org.json.JSONObject;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.ui.ApplicationLoader;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLog;
+import org.tomato.ui.ApplicationLoader;
 
 public class GcmBroadcastReceiver extends BroadcastReceiver {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java b/TMessagesProj/src/main/java/org/tomato/android/ImageLoader.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
rename to TMessagesProj/src/main/java/org/tomato/android/ImageLoader.java
index cdee9073b..6af7048d7 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/ImageLoader.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.android;
+package org.tomato.android;
 
 import android.app.ActivityManager;
 import android.content.BroadcastReceiver;
@@ -25,13 +25,13 @@
 import android.os.ParcelFileDescriptor;
 import android.provider.MediaStore;
 
-import org.telegram.messenger.DispatchQueue;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.Utilities;
-import org.telegram.ui.ApplicationLoader;
+import org.tomato.messenger.DispatchQueue;
+import org.tomato.messenger.FileLoader;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
+import org.tomato.messenger.Utilities;
+import org.tomato.ui.ApplicationLoader;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
diff --git a/TMessagesProj/src/main/java/org/tomato/android/ImageReceiver.java b/TMessagesProj/src/main/java/org/tomato/android/ImageReceiver.java
new file mode 100644
index 000000000..c7fb84ec0
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/android/ImageReceiver.java
@@ -0,0 +1,426 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.android;
+
+import android.graphics.Bitmap;
+import android.graphics.BitmapShader;
+import android.graphics.Canvas;
+import android.graphics.Matrix;
+import android.graphics.Paint;
+import android.graphics.Rect;
+import android.graphics.RectF;
+import android.graphics.Shader;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.view.View;
+
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.Utilities;
+
+public class ImageReceiver {
+    private TLRPC.FileLocation last_path = null;
+    private String last_httpUrl = null;
+    private String last_filter = null;
+    private Drawable last_placeholder = null;
+    private int last_size = 0;
+    private String currentPath = null;
+    private boolean isPlaceholder = false;
+    private Drawable currentImage = null;
+    private Integer tag = null;
+    private View parentView = null;
+    private int imageX = 0, imageY = 0, imageW = 0, imageH = 0;
+    private Rect drawRegion = new Rect();
+    private boolean isVisible = true;
+    private boolean isAspectFit = false;
+    private boolean lastCacheOnly = false;
+    private boolean forcePreview = false;
+    private int roundRadius = 0;
+    private BitmapShader bitmapShader = null;
+    private Paint roundPaint = null;
+    private RectF roundRect = null;
+    private RectF bitmapRect = null;
+    private Matrix shaderMatrix = null;
+
+    public ImageReceiver() {
+
+    }
+
+    public ImageReceiver(View view) {
+        parentView = view;
+    }
+
+    public void setImage(TLRPC.FileLocation path, String filter, Drawable placeholder, boolean cacheOnly) {
+        setImage(path, null, filter, placeholder, 0, cacheOnly);
+    }
+
+    public void setImage(TLRPC.FileLocation path, String filter, Drawable placeholder, int size, boolean cacheOnly) {
+        setImage(path, null, filter, placeholder, size, cacheOnly);
+    }
+
+    public void setImage(String path, String filter, Drawable placeholder) {
+        setImage(null, path, filter, placeholder, 0, true);
+    }
+
+    public void setImage(TLRPC.FileLocation fileLocation, String httpUrl, String filter, Drawable placeholder, int size, boolean cacheOnly) {
+        if ((fileLocation == null && httpUrl == null) || (fileLocation != null && !(fileLocation instanceof TLRPC.TL_fileLocation) && !(fileLocation instanceof TLRPC.TL_fileEncryptedLocation))) {
+            recycleBitmap(null);
+            currentPath = null;
+            isPlaceholder = true;
+            last_path = null;
+            last_httpUrl = null;
+            last_filter = null;
+            lastCacheOnly = false;
+            bitmapShader = null;
+            last_placeholder = placeholder;
+            last_size = 0;
+            currentImage = null;
+            ImageLoader.getInstance().cancelLoadingForImageView(this);
+            if (parentView != null) {
+                parentView.invalidate();
+            }
+            return;
+        }
+        String key;
+        if (fileLocation != null) {
+            key = fileLocation.volume_id + "_" + fileLocation.local_id;
+        } else {
+            key = Utilities.MD5(httpUrl);
+        }
+        if (filter != null) {
+            key += "@" + filter;
+        }
+        BitmapDrawable img = null;
+        if (currentPath != null) {
+            if (currentPath.equals(key)) {
+                if (currentImage != null) {
+                    return;
+                } else {
+                    img = ImageLoader.getInstance().getImageFromMemory(fileLocation, httpUrl, filter, this);
+                }
+            } else {
+                img = ImageLoader.getInstance().getImageFromMemory(fileLocation, httpUrl, filter, this);
+                recycleBitmap(img);
+            }
+        }
+        img = ImageLoader.getInstance().getImageFromMemory(fileLocation, httpUrl, filter, this);
+        currentPath = key;
+        last_path = fileLocation;
+        last_httpUrl = httpUrl;
+        last_filter = filter;
+        last_placeholder = placeholder;
+        last_size = size;
+        lastCacheOnly = cacheOnly;
+        bitmapShader = null;
+        if (img == null) {
+            isPlaceholder = true;
+            ImageLoader.getInstance().loadImage(fileLocation, httpUrl, this, size, cacheOnly);
+            if (parentView != null) {
+                parentView.invalidate();
+            }
+        } else {
+            setImageBitmap(img, currentPath);
+        }
+    }
+
+    public void setImageBitmap(BitmapDrawable bitmap, String imgKey) {
+        if (currentPath == null || !imgKey.equals(currentPath)) {
+            return;
+        }
+        isPlaceholder = false;
+        ImageLoader.getInstance().incrementUseCount(currentPath);
+        currentImage = bitmap;
+        if (roundRadius != 0) {
+            bitmapShader = new BitmapShader(bitmap.getBitmap(), Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);
+            roundPaint.setShader(bitmapShader);
+            bitmapRect.set(0, 0, bitmap.getIntrinsicWidth(), bitmap.getIntrinsicHeight());
+        }
+        if (parentView != null) {
+            parentView.invalidate();
+        }
+    }
+
+    public void setImageBitmap(Bitmap bitmap) {
+        ImageLoader.getInstance().cancelLoadingForImageView(this);
+        recycleBitmap(null);
+        if (bitmap != null) {
+            last_placeholder = new BitmapDrawable(null, bitmap);
+        } else {
+            last_placeholder = null;
+        }
+        isPlaceholder = true;
+        currentPath = null;
+        last_path = null;
+        last_httpUrl = null;
+        last_filter = null;
+        currentImage = null;
+        bitmapShader = null;
+        last_size = 0;
+        lastCacheOnly = false;
+        if (parentView != null) {
+            parentView.invalidate();
+        }
+    }
+
+    public void setImageBitmap(Drawable bitmap) {
+        ImageLoader.getInstance().cancelLoadingForImageView(this);
+        recycleBitmap(null);
+        last_placeholder = bitmap;
+        isPlaceholder = true;
+        currentPath = null;
+        currentImage = null;
+        last_path = null;
+        last_httpUrl = null;
+        last_filter = null;
+        bitmapShader = null;
+        last_size = 0;
+        lastCacheOnly = false;
+        if (parentView != null) {
+            parentView.invalidate();
+        }
+    }
+
+    public void clearImage() {
+        recycleBitmap(null);
+    }
+
+    private void recycleBitmap(BitmapDrawable newBitmap) {
+        if (currentImage == null || isPlaceholder) {
+            return;
+        }
+        if (currentImage instanceof BitmapDrawable) {
+            if (currentImage != newBitmap) {
+                if (currentPath != null) {
+                    Bitmap bitmap = ((BitmapDrawable) currentImage).getBitmap();
+                    boolean canDelete = ImageLoader.getInstance().decrementUseCount(currentPath);
+                    if (!ImageLoader.getInstance().isInCache(currentPath)) {
+                        if (ImageLoader.getInstance().runtimeHack != null) {
+                            ImageLoader.getInstance().runtimeHack.trackAlloc(bitmap.getRowBytes() * bitmap.getHeight());
+                        }
+                        if (canDelete) {
+                            currentImage = null;
+                            bitmap.recycle();
+                        }
+                    } else {
+                        currentImage = null;
+                    }
+                    currentPath = null;
+                }
+            }
+        }
+    }
+
+    public boolean draw(Canvas canvas) {
+        try {
+            Drawable bitmapDrawable = currentImage;
+            if (forcePreview || bitmapDrawable == null && last_placeholder != null && last_placeholder instanceof BitmapDrawable) {
+                bitmapDrawable = last_placeholder;
+            }
+            if (bitmapDrawable != null) {
+                if (bitmapShader != null) {
+                    drawRegion.set(imageX, imageY, imageX + imageW, imageY + imageH);
+                    roundRect.set(imageX, imageY, imageX + imageW, imageY + imageH);
+                    shaderMatrix.reset();
+                    shaderMatrix.setScale(1.5f, 1.5f);
+                    bitmapShader.setLocalMatrix(shaderMatrix);
+                    canvas.drawRoundRect(roundRect, roundRadius, roundRadius, roundPaint);
+                } else {
+                    int bitmapW = bitmapDrawable.getIntrinsicWidth();
+                    int bitmapH = bitmapDrawable.getIntrinsicHeight();
+                    float scaleW = bitmapW / (float) imageW;
+                    float scaleH = bitmapH / (float) imageH;
+
+                    if (isAspectFit) {
+                        float scale = Math.max(scaleW, scaleH);
+                        canvas.save();
+                        bitmapW /= scale;
+                        bitmapH /= scale;
+                        drawRegion.set(imageX + (imageW - bitmapW) / 2, imageY + (imageH - bitmapH) / 2, imageX + (imageW + bitmapW) / 2, imageY + (imageH + bitmapH) / 2);
+                        bitmapDrawable.setBounds(drawRegion);
+                        try {
+                            bitmapDrawable.draw(canvas);
+                        } catch (Exception e) {
+                            if (currentPath != null) {
+                                ImageLoader.getInstance().removeImage(currentPath);
+                                currentPath = null;
+                            }
+                            setImage(last_path, last_httpUrl, last_filter, last_placeholder, last_size, lastCacheOnly);
+                            FileLog.e("tmessages", e);
+                        }
+                        canvas.restore();
+                    } else {
+                        if (Math.abs(scaleW - scaleH) > 0.00001f) {
+                            canvas.save();
+                            canvas.clipRect(imageX, imageY, imageX + imageW, imageY + imageH);
+
+                            if (bitmapW / scaleH > imageW) {
+                                bitmapW /= scaleH;
+                                drawRegion.set(imageX - (bitmapW - imageW) / 2, imageY, imageX + (bitmapW + imageW) / 2, imageY + imageH);
+                            } else {
+                                bitmapH /= scaleW;
+                                drawRegion.set(imageX, imageY - (bitmapH - imageH) / 2, imageX + imageW, imageY + (bitmapH + imageH) / 2);
+                            }
+                            bitmapDrawable.setBounds(drawRegion);
+                            if (isVisible) {
+                                try {
+                                    bitmapDrawable.draw(canvas);
+                                } catch (Exception e) {
+                                    if (currentPath != null) {
+                                        ImageLoader.getInstance().removeImage(currentPath);
+                                        currentPath = null;
+                                    }
+                                    setImage(last_path, last_httpUrl, last_filter, last_placeholder, last_size, lastCacheOnly);
+                                    FileLog.e("tmessages", e);
+                                }
+                            }
+
+                            canvas.restore();
+                        } else {
+                            drawRegion.set(imageX, imageY, imageX + imageW, imageY + imageH);
+                            bitmapDrawable.setBounds(drawRegion);
+                            if (isVisible) {
+                                try {
+                                    bitmapDrawable.draw(canvas);
+                                } catch (Exception e) {
+                                    if (currentPath != null) {
+                                        ImageLoader.getInstance().removeImage(currentPath);
+                                        currentPath = null;
+                                    }
+                                    setImage(last_path, last_httpUrl, last_filter, last_placeholder, last_size, lastCacheOnly);
+                                    FileLog.e("tmessages", e);
+                                }
+                            }
+                        }
+                    }
+                }
+                return true;
+            } else if (last_placeholder != null) {
+                drawRegion.set(imageX, imageY, imageX + imageW, imageY + imageH);
+                last_placeholder.setBounds(drawRegion);
+                if (isVisible) {
+                    try {
+                        last_placeholder.draw(canvas);
+                    } catch (Exception e) {
+                        if (currentPath != null) {
+                            ImageLoader.getInstance().removeImage(currentPath);
+                            currentPath = null;
+                        }
+                        setImage(last_path, last_httpUrl, last_filter, last_placeholder, last_size, lastCacheOnly);
+                        FileLog.e("tmessages", e);
+                    }
+                }
+                return true;
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        return false;
+    }
+
+    public Bitmap getBitmap() {
+        if (currentImage != null && currentImage instanceof BitmapDrawable) {
+            return ((BitmapDrawable)currentImage).getBitmap();
+        } else if (isPlaceholder && last_placeholder != null && last_placeholder instanceof BitmapDrawable) {
+            return ((BitmapDrawable)last_placeholder).getBitmap();
+        }
+        return null;
+    }
+
+    public void setVisible(boolean value, boolean invalidate) {
+        if (isVisible == value) {
+            return;
+        }
+        isVisible = value;
+        if (invalidate && parentView != null) {
+            parentView.invalidate();
+        }
+    }
+
+    public boolean getVisible() {
+        return isVisible;
+    }
+
+    public boolean hasImage() {
+        return currentImage != null || last_placeholder != null || currentPath != null || last_httpUrl != null;
+    }
+
+    public void setAspectFit(boolean value) {
+        isAspectFit = value;
+    }
+
+    public void setParentView(View view) {
+        parentView = view;
+    }
+
+    protected Integer getTag() {
+        return tag;
+    }
+
+    protected void setTag(Integer tag) {
+        this.tag = tag;
+    }
+
+    public void setImageCoords(int x, int y, int width, int height) {
+        imageX = x;
+        imageY = y;
+        imageW = width;
+        imageH = height;
+    }
+
+    public int getImageX() {
+        return imageX;
+    }
+
+    public int getImageY() {
+        return imageY;
+    }
+
+    public int getImageWidth() {
+        return imageW;
+    }
+
+    public int getImageHeight() {
+        return imageH;
+    }
+
+    public boolean isInsideImage(float x, float y) {
+        return x >= imageX && x <= imageX + imageW && y >= imageY && y <= imageY + imageH;
+    }
+
+    public Rect getDrawRegion() {
+        return drawRegion;
+    }
+
+    public String getFilter() {
+        return last_filter;
+    }
+
+    public String getKey() {
+        return currentPath;
+    }
+
+    public void setForcePreview(boolean value) {
+        forcePreview = value;
+    }
+
+    public void setRoundRadius(int value) {
+        roundRadius = value;
+        if (roundRadius != 0) {
+            roundPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+            roundRect = new RectF();
+            shaderMatrix = new Matrix();
+            bitmapRect = new RectF();
+        } else {
+            roundPaint = null;
+            roundRect = null;
+            shaderMatrix = null;
+            bitmapRect = null;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/LocaleController.java b/TMessagesProj/src/main/java/org/tomato/android/LocaleController.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/android/LocaleController.java
rename to TMessagesProj/src/main/java/org/tomato/android/LocaleController.java
index 06a4cb05e..84e62fe34 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/LocaleController.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/LocaleController.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.android;
+package org.tomato.android;
 
 import android.app.Activity;
 import android.content.BroadcastReceiver;
@@ -18,12 +18,12 @@
 import android.text.format.DateFormat;
 import android.util.Xml;
 
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.Utilities;
-import org.telegram.ui.ApplicationLoader;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.Utilities;
+import org.tomato.ui.ApplicationLoader;
 import org.xmlpull.v1.XmlPullParser;
 
 import java.io.File;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/LruCache.java b/TMessagesProj/src/main/java/org/tomato/android/LruCache.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/android/LruCache.java
rename to TMessagesProj/src/main/java/org/tomato/android/LruCache.java
index 7455bbceb..b832cae21 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/LruCache.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/LruCache.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.android;
+package org.tomato.android;
 
 import android.graphics.drawable.BitmapDrawable;
 
@@ -14,7 +14,6 @@
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
-import java.util.Map;
 
 /**
  * Static library version of {@link android.util.LruCache}. Used to write apps
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java b/TMessagesProj/src/main/java/org/tomato/android/MediaController.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/android/MediaController.java
rename to TMessagesProj/src/main/java/org/tomato/android/MediaController.java
index ad08add77..b7b8f5492 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/MediaController.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.android;
+package org.tomato.android;
 
 import android.annotation.TargetApi;
 import android.app.Activity;
@@ -42,21 +42,21 @@
 import android.view.View;
 import android.view.WindowManager;
 
-import org.telegram.android.video.InputSurface;
-import org.telegram.android.video.MP4Builder;
-import org.telegram.android.video.Mp4Movie;
-import org.telegram.android.video.OutputSurface;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.DispatchQueue;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.Utilities;
-import org.telegram.ui.ApplicationLoader;
-import org.telegram.ui.Cells.ChatMediaCell;
-import org.telegram.ui.Views.GifDrawable;
+import org.tomato.android.video.InputSurface;
+import org.tomato.android.video.MP4Builder;
+import org.tomato.android.video.Mp4Movie;
+import org.tomato.android.video.OutputSurface;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.DispatchQueue;
+import org.tomato.messenger.FileLoader;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
+import org.tomato.messenger.Utilities;
+import org.tomato.ui.ApplicationLoader;
+import org.tomato.ui.Cells.ChatMediaCell;
+import org.tomato.ui.Views.GifDrawable;
 
 import java.io.File;
 import java.io.FileInputStream;
diff --git a/TMessagesProj/src/main/java/org/tomato/android/MessageObject.java b/TMessagesProj/src/main/java/org/tomato/android/MessageObject.java
new file mode 100644
index 000000000..cd8964179
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/android/MessageObject.java
@@ -0,0 +1,710 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.android;
+
+import android.graphics.Bitmap;
+import android.graphics.Paint;
+import android.text.Layout;
+import android.text.Spannable;
+import android.text.SpannableStringBuilder;
+import android.text.Spanned;
+import android.text.StaticLayout;
+import android.text.TextPaint;
+import android.text.TextUtils;
+import android.text.util.Linkify;
+
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLoader;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
+import org.tomato.ui.Views.URLSpanNoUnderline;
+
+import java.util.AbstractMap;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.GregorianCalendar;
+
+public class MessageObject {
+
+    public static final int MESSAGE_SEND_STATE_SENDING = 1;
+    public static final int MESSAGE_SEND_STATE_SENT = 0;
+    public static final int MESSAGE_SEND_STATE_SEND_ERROR = 2;
+
+    public TLRPC.Message messageOwner;
+    public CharSequence messageText;
+    public int type;
+    public int contentType;
+    public ArrayList<PhotoObject> photoThumbs;
+    public Bitmap imagePreview;
+    public String dateKey;
+    public boolean deleted = false;
+    public float audioProgress;
+    public int audioProgressSec;
+
+    private static TextPaint textPaint;
+    public int lastLineWidth;
+    public int textWidth;
+    public int textHeight;
+    public int blockHeight = Integer.MAX_VALUE;
+
+    public static class TextLayoutBlock {
+        public StaticLayout textLayout;
+        public float textXOffset = 0;
+        public float textYOffset = 0;
+        public int charactersOffset = 0;
+    }
+
+    private static final int LINES_PER_BLOCK = 10;
+
+    public ArrayList<TextLayoutBlock> textLayoutBlocks;
+
+    public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> users) {
+        this(message, users, 1);
+    }
+
+    public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> users, int preview) {
+        if (textPaint == null) {
+            textPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            textPaint.setColor(0xff000000);
+            textPaint.linkColor = 0xff316f9f;
+        }
+
+        textPaint.setTextSize(AndroidUtilities.dp(MessagesController.getInstance().fontSize));
+
+        messageOwner = message;
+
+        if (message instanceof TLRPC.TL_messageService) {
+            if (message.action != null) {
+                TLRPC.User fromUser = null;
+                if (users != null) {
+                    fromUser = users.get(message.from_id);
+                }
+                if (fromUser == null) {
+                    fromUser = MessagesController.getInstance().getUser(message.from_id);
+                }
+                if (message.action instanceof TLRPC.TL_messageActionChatCreate) {
+                    if (isFromMe()) {
+                        messageText = LocaleController.getString("ActionYouCreateGroup", R.string.ActionYouCreateGroup);
+                    } else {
+                        if (fromUser != null) {
+                            messageText = replaceWithLink(LocaleController.getString("ActionCreateGroup", R.string.ActionCreateGroup), "un1", fromUser);
+                        } else {
+                            messageText = LocaleController.getString("ActionCreateGroup", R.string.ActionCreateGroup).replace("un1", "");
+                        }
+                    }
+                } else if (message.action instanceof TLRPC.TL_messageActionChatDeleteUser) {
+                    if (message.action.user_id == message.from_id) {
+                        if (isFromMe()) {
+                            messageText = LocaleController.getString("ActionYouLeftUser", R.string.ActionYouLeftUser);
+                        } else {
+                            if (fromUser != null) {
+                                messageText = replaceWithLink(LocaleController.getString("ActionLeftUser", R.string.ActionLeftUser), "un1", fromUser);
+                            } else {
+                                messageText = LocaleController.getString("ActionLeftUser", R.string.ActionLeftUser).replace("un1", "");
+                            }
+                        }
+                    } else {
+                        TLRPC.User whoUser = null;
+                        if (users != null) {
+                            whoUser = users.get(message.action.user_id);
+                        }
+                        if (whoUser == null) {
+                            whoUser = MessagesController.getInstance().getUser(message.action.user_id);
+                        }
+                        if (whoUser != null && fromUser != null) {
+                            if (isFromMe()) {
+                                messageText = replaceWithLink(LocaleController.getString("ActionYouKickUser", R.string.ActionYouKickUser), "un2", whoUser);
+                            } else if (message.action.user_id == UserConfig.getClientUserId()) {
+                                messageText = replaceWithLink(LocaleController.getString("ActionKickUserYou", R.string.ActionKickUserYou), "un1", fromUser);
+                            } else {
+                                messageText = replaceWithLink(LocaleController.getString("ActionKickUser", R.string.ActionKickUser), "un2", whoUser);
+                                messageText = replaceWithLink(messageText, "un1", fromUser);
+                            }
+                        } else {
+                            messageText = LocaleController.getString("ActionKickUser", R.string.ActionKickUser).replace("un2", "").replace("un1", "");
+                        }
+                    }
+                } else if (message.action instanceof TLRPC.TL_messageActionChatAddUser) {
+                    TLRPC.User whoUser = null;
+                    if (users != null) {
+                        whoUser = users.get(message.action.user_id);
+                    }
+                    if (whoUser == null) {
+                        whoUser = MessagesController.getInstance().getUser(message.action.user_id);
+                    }
+                    if (whoUser != null && fromUser != null) {
+                        if (isFromMe()) {
+                            messageText = replaceWithLink(LocaleController.getString("ActionYouAddUser", R.string.ActionYouAddUser), "un2", whoUser);
+                        } else if (message.action.user_id == UserConfig.getClientUserId()) {
+                            messageText = replaceWithLink(LocaleController.getString("ActionAddUserYou", R.string.ActionAddUserYou), "un1", fromUser);
+                        } else {
+                            messageText = replaceWithLink(LocaleController.getString("ActionAddUser", R.string.ActionAddUser), "un2", whoUser);
+                            messageText = replaceWithLink(messageText, "un1", fromUser);
+                        }
+                    } else {
+                        messageText = LocaleController.getString("ActionAddUser", R.string.ActionAddUser).replace("un2", "").replace("un1", "");
+                    }
+                } else if (message.action instanceof TLRPC.TL_messageActionChatEditPhoto) {
+                    if (isFromMe()) {
+                        messageText = LocaleController.getString("ActionYouChangedPhoto", R.string.ActionYouChangedPhoto);
+                    } else {
+                        if (fromUser != null) {
+                            messageText = replaceWithLink(LocaleController.getString("ActionChangedPhoto", R.string.ActionChangedPhoto), "un1", fromUser);
+                        } else {
+                            messageText = LocaleController.getString("ActionChangedPhoto", R.string.ActionChangedPhoto).replace("un1", "");
+                        }
+                    }
+                } else if (message.action instanceof TLRPC.TL_messageActionChatEditTitle) {
+                    if (isFromMe()) {
+                        messageText = LocaleController.getString("ActionYouChangedTitle", R.string.ActionYouChangedTitle).replace("un2", message.action.title);
+                    } else {
+                        if (fromUser != null) {
+                            messageText = replaceWithLink(LocaleController.getString("ActionChangedTitle", R.string.ActionChangedTitle).replace("un2", message.action.title), "un1", fromUser);
+                        } else {
+                            messageText = LocaleController.getString("ActionChangedTitle", R.string.ActionChangedTitle).replace("un1", "").replace("un2", message.action.title);
+                        }
+                    }
+                } else if (message.action instanceof TLRPC.TL_messageActionChatDeletePhoto) {
+                    if (isFromMe()) {
+                        messageText = LocaleController.getString("ActionYouRemovedPhoto", R.string.ActionYouRemovedPhoto);
+                    } else {
+                        if (fromUser != null) {
+                            messageText = replaceWithLink(LocaleController.getString("ActionRemovedPhoto", R.string.ActionRemovedPhoto), "un1", fromUser);
+                        } else {
+                            messageText = LocaleController.getString("ActionRemovedPhoto", R.string.ActionRemovedPhoto).replace("un1", "");
+                        }
+                    }
+                } else if (message.action instanceof TLRPC.TL_messageActionTTLChange) {
+                    if (message.action.ttl != 0) {
+                        if (isFromMe()) {
+                            messageText = LocaleController.formatString("MessageLifetimeChangedOutgoing", R.string.MessageLifetimeChangedOutgoing, AndroidUtilities.formatTTLString(message.action.ttl));
+                        } else {
+                            if (fromUser != null) {
+                                messageText = LocaleController.formatString("MessageLifetimeChanged", R.string.MessageLifetimeChanged, fromUser.first_name, AndroidUtilities.formatTTLString(message.action.ttl));
+                            } else {
+                                messageText = LocaleController.formatString("MessageLifetimeChanged", R.string.MessageLifetimeChanged, "", AndroidUtilities.formatTTLString(message.action.ttl));
+                            }
+                        }
+                    } else {
+                        if (isFromMe()) {
+                            messageText = LocaleController.getString("MessageLifetimeYouRemoved", R.string.MessageLifetimeYouRemoved);
+                        } else {
+                            if (fromUser != null) {
+                                messageText = LocaleController.formatString("MessageLifetimeRemoved", R.string.MessageLifetimeRemoved, fromUser.first_name);
+                            } else {
+                                messageText = LocaleController.formatString("MessageLifetimeRemoved", R.string.MessageLifetimeRemoved, "");
+                            }
+                        }
+                    }
+                } else if (message.action instanceof TLRPC.TL_messageActionLoginUnknownLocation) {
+                    String date = LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, LocaleController.formatterYear.format(((long)message.date) * 1000), LocaleController.formatterDay.format(((long)message.date) * 1000));
+                    TLRPC.User to_user = UserConfig.getCurrentUser();
+                    if (to_user == null) {
+                        if (users != null) {
+                            to_user = users.get(messageOwner.to_id.user_id);
+                        }
+                        if (to_user == null) {
+                            to_user = MessagesController.getInstance().getUser(messageOwner.to_id.user_id);
+                        }
+                    }
+                    String name = "";
+                    if (to_user != null) {
+                        name = to_user.first_name;
+                    }
+                    messageText = LocaleController.formatString("NotificationUnrecognizedDevice", R.string.NotificationUnrecognizedDevice, name, date, message.action.title, message.action.address);
+                } else if (message.action instanceof TLRPC.TL_messageActionUserJoined) {
+                    if (fromUser != null) {
+                        messageText = LocaleController.formatString("NotificationContactJoined", R.string.NotificationContactJoined, ContactsController.formatName(fromUser.first_name, fromUser.last_name));
+                    } else {
+                        messageText = LocaleController.formatString("NotificationContactJoined", R.string.NotificationContactJoined, "");
+                    }
+                } else if (message.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
+                    if (fromUser != null) {
+                        messageText = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, ContactsController.formatName(fromUser.first_name, fromUser.last_name));
+                    } else {
+                        messageText = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, "");
+                    }
+                } else if (message.action instanceof TLRPC.TL_messageEncryptedAction) {
+                    if (message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages) {
+                        if (isFromMe()) {
+                            messageText = LocaleController.formatString("ActionTakeScreenshootYou", R.string.ActionTakeScreenshootYou);
+                        } else {
+                            if (fromUser != null) {
+                                messageText = replaceWithLink(LocaleController.getString("ActionTakeScreenshoot", R.string.ActionTakeScreenshoot), "un1", fromUser);
+                            } else {
+                                messageText = LocaleController.formatString("ActionTakeScreenshoot", R.string.ActionTakeScreenshoot).replace("un1", "");
+                            }
+                        }
+                    } else if (message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
+                        TLRPC.TL_decryptedMessageActionSetMessageTTL action = (TLRPC.TL_decryptedMessageActionSetMessageTTL) message.action.encryptedAction;
+                        if (action.ttl_seconds != 0) {
+                            if (isFromMe()) {
+                                messageText = LocaleController.formatString("MessageLifetimeChangedOutgoing", R.string.MessageLifetimeChangedOutgoing, AndroidUtilities.formatTTLString(action.ttl_seconds));
+                            } else {
+                                if (fromUser != null) {
+                                    messageText = LocaleController.formatString("MessageLifetimeChanged", R.string.MessageLifetimeChanged, fromUser.first_name, AndroidUtilities.formatTTLString(action.ttl_seconds));
+                                } else {
+                                    messageText = LocaleController.formatString("MessageLifetimeChanged", R.string.MessageLifetimeChanged, "", AndroidUtilities.formatTTLString(action.ttl_seconds));
+                                }
+                            }
+                        } else {
+                            if (isFromMe()) {
+                                messageText = LocaleController.getString("MessageLifetimeYouRemoved", R.string.MessageLifetimeYouRemoved);
+                            } else {
+                                if (fromUser != null) {
+                                    messageText = LocaleController.formatString("MessageLifetimeRemoved", R.string.MessageLifetimeRemoved, fromUser.first_name);
+                                } else {
+                                    messageText = LocaleController.formatString("MessageLifetimeRemoved", R.string.MessageLifetimeRemoved, "");
+                                }
+                            }
+                        }
+                    }
+                } else if (message.action instanceof TLRPC.TL_messageActionCreatedBroadcastList) {
+                    messageText = LocaleController.formatString("YouCreatedBroadcastList", R.string.YouCreatedBroadcastList);
+                }
+            }
+        } else if (message.media != null && !(message.media instanceof TLRPC.TL_messageMediaEmpty)) {
+            if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
+                messageText = LocaleController.getString("AttachPhoto", R.string.AttachPhoto);
+            } else if (message.media instanceof TLRPC.TL_messageMediaVideo) {
+                messageText = LocaleController.getString("AttachVideo", R.string.AttachVideo);
+            } else if (message.media instanceof TLRPC.TL_messageMediaGeo) {
+                messageText = LocaleController.getString("AttachLocation", R.string.AttachLocation);
+            } else if (message.media instanceof TLRPC.TL_messageMediaContact) {
+                messageText = LocaleController.getString("AttachContact", R.string.AttachContact);
+            } else if (message.media instanceof TLRPC.TL_messageMediaUnsupported) {
+                messageText = LocaleController.getString("UnsuppotedMedia", R.string.UnsuppotedMedia);
+            } else if (message.media instanceof TLRPC.TL_messageMediaDocument) {
+                messageText = LocaleController.getString("AttachDocument", R.string.AttachDocument);
+            } else if (message.media instanceof TLRPC.TL_messageMediaAudio) {
+                messageText = LocaleController.getString("AttachAudio", R.string.AttachAudio);
+            }
+        } else {
+            messageText = message.message;
+        }
+        messageText = Emoji.replaceEmoji(messageText, textPaint.getFontMetricsInt(), AndroidUtilities.dp(20));
+
+        if (message instanceof TLRPC.TL_message || message instanceof TLRPC.TL_messageForwarded) {
+            if (message.media == null || message.media instanceof TLRPC.TL_messageMediaEmpty) {
+                contentType = type = 0;
+            } else if (message.media != null && message.media instanceof TLRPC.TL_messageMediaPhoto) {
+                contentType = type = 1;
+            } else if (message.media != null && message.media instanceof TLRPC.TL_messageMediaGeo) {
+                contentType = 1;
+                type = 4;
+            } else if (message.media != null && message.media instanceof TLRPC.TL_messageMediaVideo) {
+                contentType = 1;
+                type = 3;
+            } else if (message.media != null && message.media instanceof TLRPC.TL_messageMediaContact) {
+                contentType = 3;
+                type = 12;
+            } else if (message.media != null && message.media instanceof TLRPC.TL_messageMediaUnsupported) {
+                contentType = type = 0;
+            } else if (message.media != null && message.media instanceof TLRPC.TL_messageMediaDocument) {
+                contentType = 1;
+                if (message.media.document.thumb != null && !(message.media.document.thumb instanceof TLRPC.TL_photoSizeEmpty) && message.media.document.mime_type != null && message.media.document.mime_type.equals("image/gif")) {
+                    type = 8;
+                } else {
+                    type = 9;
+                }
+            } else if (message.media != null && message.media instanceof TLRPC.TL_messageMediaAudio) {
+                contentType = type = 2;
+            }
+        } else if (message instanceof TLRPC.TL_messageService) {
+            if (message.action instanceof TLRPC.TL_messageActionLoginUnknownLocation) {
+                contentType = type = 0;
+            } else if (message.action instanceof TLRPC.TL_messageActionChatEditPhoto || message.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
+                contentType = 4;
+                type = 11;
+            } else if (message.action instanceof TLRPC.TL_messageEncryptedAction) {
+                if (message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionScreenshotMessages || message.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
+                    contentType = 4;
+                    type = 10;
+                } else {
+                    contentType = -1;
+                    type = -1;
+                }
+            } else {
+                contentType = 4;
+                type = 10;
+            }
+        }
+
+        Calendar rightNow = new GregorianCalendar();
+        rightNow.setTimeInMillis((long)(messageOwner.date) * 1000);
+        int dateDay = rightNow.get(Calendar.DAY_OF_YEAR);
+        int dateYear = rightNow.get(Calendar.YEAR);
+        int dateMonth = rightNow.get(Calendar.MONTH);
+        dateKey = String.format("%d_%02d_%02d", dateYear, dateMonth, dateDay);
+
+        generateLayout();
+        generateThumbs(false, preview);
+    }
+
+    public CharSequence replaceWithLink(CharSequence source, String param, TLRPC.User user) {
+        String name = ContactsController.formatName(user.first_name, user.last_name);
+        int start = TextUtils.indexOf(source, param);
+        URLSpanNoUnderline span = new URLSpanNoUnderline("" + user.id);
+        SpannableStringBuilder builder = new SpannableStringBuilder(TextUtils.replace(source, new String[]{param}, new String[]{name}));
+        builder.setSpan(span, start, start + name.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
+        return builder;
+    }
+
+    public void generateThumbs(boolean update, int preview) {
+        if (messageOwner instanceof TLRPC.TL_messageService) {
+            if (messageOwner.action instanceof TLRPC.TL_messageActionChatEditPhoto) {
+                if (!update) {
+                    photoThumbs = new ArrayList<PhotoObject>();
+                    for (TLRPC.PhotoSize size : messageOwner.action.photo.sizes) {
+                        photoThumbs.add(new PhotoObject(size, preview, isSecretMedia()));
+                    }
+                } else if (photoThumbs != null && !photoThumbs.isEmpty()) {
+                    for (PhotoObject photoObject : photoThumbs) {
+                        for (TLRPC.PhotoSize size : messageOwner.action.photo.sizes) {
+                            if (size instanceof TLRPC.TL_photoSizeEmpty) {
+                                continue;
+                            }
+                            if (size.type.equals(photoObject.photoOwner.type)) {
+                                photoObject.photoOwner.location = size.location;
+                                break;
+                            }
+                        }
+                    }
+                }
+            }
+        } else if (messageOwner.media != null && !(messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
+            if (messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
+                if (!update) {
+                    photoThumbs = new ArrayList<PhotoObject>();
+                    for (TLRPC.PhotoSize size : messageOwner.media.photo.sizes) {
+                        PhotoObject obj = new PhotoObject(size, preview, isSecretMedia());
+                        photoThumbs.add(obj);
+                        if (imagePreview == null && obj.image != null) {
+                            imagePreview = obj.image;
+                        }
+                    }
+                } else if (photoThumbs != null && !photoThumbs.isEmpty()) {
+                    for (PhotoObject photoObject : photoThumbs) {
+                        for (TLRPC.PhotoSize size : messageOwner.media.photo.sizes) {
+                            if (size instanceof TLRPC.TL_photoSizeEmpty) {
+                                continue;
+                            }
+                            if (size.type.equals(photoObject.photoOwner.type)) {
+                                photoObject.photoOwner.location = size.location;
+                                break;
+                            }
+                        }
+                    }
+                }
+            } else if (messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
+                if (!update) {
+                    photoThumbs = new ArrayList<PhotoObject>();
+                    PhotoObject obj = new PhotoObject(messageOwner.media.video.thumb, preview, isSecretMedia());
+                    photoThumbs.add(obj);
+                    if (imagePreview == null && obj.image != null) {
+                        imagePreview = obj.image;
+                    }
+                } else if (photoThumbs != null && !photoThumbs.isEmpty() && messageOwner.media.video.thumb != null) {
+                    PhotoObject photoObject = photoThumbs.get(0);
+                    photoObject.photoOwner.location = messageOwner.media.video.thumb.location;
+                }
+            } if (messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
+                if (!(messageOwner.media.document.thumb instanceof TLRPC.TL_photoSizeEmpty)) {
+                    if (!update) {
+                        photoThumbs = new ArrayList<PhotoObject>();
+                        PhotoObject obj = new PhotoObject(messageOwner.media.document.thumb, preview, isSecretMedia());
+                        photoThumbs.add(obj);
+                    } else if (photoThumbs != null && !photoThumbs.isEmpty() && messageOwner.media.document.thumb != null) {
+                        PhotoObject photoObject = photoThumbs.get(0);
+                        photoObject.photoOwner.location = messageOwner.media.document.thumb.location;
+                    }
+                }
+            }
+        }
+    }
+
+    public String getFileName() {
+        if (messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
+            return FileLoader.getAttachFileName(messageOwner.media.video);
+        } else if (messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
+            return FileLoader.getAttachFileName(messageOwner.media.document);
+        } else if (messageOwner.media instanceof TLRPC.TL_messageMediaAudio) {
+            return FileLoader.getAttachFileName(messageOwner.media.audio);
+        } else if (messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
+            ArrayList<TLRPC.PhotoSize> sizes = messageOwner.media.photo.sizes;
+            if (sizes.size() > 0) {
+                TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(sizes, AndroidUtilities.getPhotoSize());
+                if (sizeFull != null) {
+                    return FileLoader.getAttachFileName(sizeFull);
+                }
+            }
+        }
+        return "";
+    }
+
+    private void generateLayout() {
+        if (type != 0 || messageOwner.to_id == null || messageText == null || messageText.length() == 0) {
+            return;
+        }
+
+        textLayoutBlocks = new ArrayList<TextLayoutBlock>();
+
+        if (messageText instanceof Spannable) {
+            if (messageOwner.message != null && messageOwner.message.contains(".") && (messageOwner.message.contains(".com") || messageOwner.message.contains("http") || messageOwner.message.contains(".ru") || messageOwner.message.contains(".org") || messageOwner.message.contains(".net"))) {
+                Linkify.addLinks((Spannable)messageText, Linkify.WEB_URLS);
+            } else if (messageText.length() < 100) {
+                Linkify.addLinks((Spannable)messageText, Linkify.WEB_URLS | Linkify.EMAIL_ADDRESSES | Linkify.PHONE_NUMBERS);
+            }
+        }
+
+        int maxWidth;
+        if (AndroidUtilities.isTablet()) {
+            if (messageOwner.to_id.chat_id != 0) {
+                maxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(122);
+            } else {
+                maxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(80);
+            }
+        } else {
+            if (messageOwner.to_id.chat_id != 0) {
+                maxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(122);
+            } else {
+                maxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(80);
+            }
+        }
+
+        StaticLayout textLayout = null;
+
+        try {
+            textLayout = new StaticLayout(messageText, textPaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+            return;
+        }
+
+        textHeight = textLayout.getHeight();
+        int linesCount = textLayout.getLineCount();
+
+        int blocksCount = (int)Math.ceil((float)linesCount / LINES_PER_BLOCK);
+        int linesOffset = 0;
+        float prevOffset = 0;
+
+        for (int a = 0; a < blocksCount; a++) {
+            int currentBlockLinesCount = Math.min(LINES_PER_BLOCK, linesCount - linesOffset);
+            TextLayoutBlock block = new TextLayoutBlock();
+
+            if (blocksCount == 1) {
+                block.textLayout = textLayout;
+                block.textYOffset = 0;
+                block.charactersOffset = 0;
+                blockHeight = textHeight;
+            } else {
+                int startCharacter = textLayout.getLineStart(linesOffset);
+                int endCharacter = textLayout.getLineEnd(linesOffset + currentBlockLinesCount - 1);
+                if (endCharacter < startCharacter) {
+                    continue;
+                }
+                block.charactersOffset = startCharacter;
+                try {
+                    CharSequence str = messageText.subSequence(startCharacter, endCharacter);
+                    block.textLayout = new StaticLayout(str, textPaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                    block.textYOffset = textLayout.getLineTop(linesOffset);
+                    if (a != 0) {
+                        blockHeight = Math.min(blockHeight, (int)(block.textYOffset - prevOffset));
+                    }
+                    prevOffset = block.textYOffset;
+                    /*if (a != blocksCount - 1) {
+                        int height = block.textLayout.getHeight();
+                        blockHeight = Math.min(blockHeight, block.textLayout.getHeight());
+                        prevOffset = block.textYOffset;
+                    } else {
+                        blockHeight = Math.min(blockHeight, (int)(block.textYOffset - prevOffset));
+                    }*/
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                    continue;
+                }
+            }
+
+            textLayoutBlocks.add(block);
+
+            float lastLeft = block.textXOffset = 0;
+            try {
+                lastLeft = block.textXOffset = block.textLayout.getLineLeft(currentBlockLinesCount - 1);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+
+            float lastLine = 0;
+            try {
+                lastLine = block.textLayout.getLineWidth(currentBlockLinesCount - 1);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+
+            int linesMaxWidth = (int)Math.ceil(lastLine);
+            int lastLineWidthWithLeft;
+            int linesMaxWidthWithLeft;
+            boolean hasNonRTL = false;
+
+            if (a == blocksCount - 1) {
+                lastLineWidth = linesMaxWidth;
+            }
+
+            linesMaxWidthWithLeft = lastLineWidthWithLeft = (int)Math.ceil(lastLine + lastLeft);
+            if (lastLeft == 0) {
+                hasNonRTL = true;
+            }
+
+            if (currentBlockLinesCount > 1) {
+                float textRealMaxWidth = 0, textRealMaxWidthWithLeft = 0, lineWidth, lineLeft;
+                for (int n = 0; n < currentBlockLinesCount; ++n) {
+                    try {
+                        lineWidth = block.textLayout.getLineWidth(n);
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                        lineWidth = 0;
+                    }
+
+                    if (lineWidth > maxWidth + 100) {
+                        int start = block.textLayout.getLineStart(n);
+                        int end = block.textLayout.getLineEnd(n);
+                        CharSequence text = block.textLayout.getText().subSequence(start, end);
+                        continue;
+                    }
+
+                    try {
+                        lineLeft = block.textLayout.getLineLeft(n);
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                        lineLeft = 0;
+                    }
+
+                    block.textXOffset = Math.min(block.textXOffset, lineLeft);
+
+                    if (lineLeft == 0) {
+                        hasNonRTL = true;
+                    }
+                    textRealMaxWidth = Math.max(textRealMaxWidth, lineWidth);
+                    textRealMaxWidthWithLeft = Math.max(textRealMaxWidthWithLeft, lineWidth + lineLeft);
+                    linesMaxWidth = Math.max(linesMaxWidth, (int)Math.ceil(lineWidth));
+                    linesMaxWidthWithLeft = Math.max(linesMaxWidthWithLeft, (int)Math.ceil(lineWidth + lineLeft));
+                }
+                if (hasNonRTL) {
+                    textRealMaxWidth = textRealMaxWidthWithLeft;
+                    if (a == blocksCount - 1) {
+                        lastLineWidth = lastLineWidthWithLeft;
+                    }
+                    linesMaxWidth = linesMaxWidthWithLeft;
+                } else if (a == blocksCount - 1) {
+                    lastLineWidth = linesMaxWidth;
+                }
+                textWidth = Math.max(textWidth, (int)Math.ceil(textRealMaxWidth));
+            } else {
+                textWidth = Math.max(textWidth, Math.min(maxWidth, linesMaxWidth));
+            }
+
+            if (hasNonRTL) {
+                block.textXOffset = 0;
+            }
+
+            linesOffset += currentBlockLinesCount;
+        }
+        if (blockHeight == 0) {
+            blockHeight = 1;
+        }
+    }
+
+    public boolean isOut() {
+        return (messageOwner.flags & TLRPC.MESSAGE_FLAG_OUT) != 0;
+    }
+
+    public boolean isFromMe() {
+        return messageOwner.from_id == UserConfig.getClientUserId();
+    }
+
+    public boolean isUnread() {
+        return (messageOwner.flags & TLRPC.MESSAGE_FLAG_UNREAD) != 0;
+    }
+
+    public void setIsRead() {
+        messageOwner.flags &=~ TLRPC.MESSAGE_FLAG_UNREAD;
+    }
+
+    public boolean isSecretPhoto() {
+        return messageOwner instanceof TLRPC.TL_message_secret && messageOwner.media instanceof TLRPC.TL_messageMediaPhoto && messageOwner.ttl != 0 && messageOwner.ttl <= 60;
+    }
+
+    public boolean isSecretMedia() {
+        return messageOwner instanceof TLRPC.TL_message_secret &&
+                (messageOwner.media instanceof TLRPC.TL_messageMediaPhoto && messageOwner.ttl != 0 && messageOwner.ttl <= 60 ||
+                messageOwner.media instanceof TLRPC.TL_messageMediaAudio ||
+                messageOwner.media instanceof TLRPC.TL_messageMediaVideo);
+    }
+
+    public static void setIsUnread(TLRPC.Message message, boolean unread) {
+        if (unread) {
+            message.flags |= TLRPC.MESSAGE_FLAG_UNREAD;
+        } else {
+            message.flags &=~ TLRPC.MESSAGE_FLAG_UNREAD;
+        }
+    }
+
+    public static boolean isUnread(TLRPC.Message message) {
+        return (message.flags & TLRPC.MESSAGE_FLAG_UNREAD) != 0;
+    }
+
+    public static boolean isOut(TLRPC.Message message) {
+        return (message.flags & TLRPC.MESSAGE_FLAG_OUT) != 0;
+    }
+
+    public long getDialogId() {
+        if (messageOwner.dialog_id != 0) {
+            return messageOwner.dialog_id;
+        } else {
+            if (messageOwner.to_id.chat_id != 0) {
+                return -messageOwner.to_id.chat_id;
+            } else if (isFromMe()) {
+                return messageOwner.to_id.user_id;
+            } else {
+                return messageOwner.from_id;
+            }
+        }
+    }
+
+    public boolean isSending() {
+        return messageOwner.send_state == MESSAGE_SEND_STATE_SENDING;
+    }
+
+    public boolean isSendError() {
+        return messageOwner.send_state == MESSAGE_SEND_STATE_SEND_ERROR;
+    }
+
+    public boolean isSent() {
+        return messageOwner.send_state == MESSAGE_SEND_STATE_SENT;
+    }
+
+    public String getSecretTimeString() {
+        if (!isSecretMedia()) {
+            return null;
+        }
+        int secondsLeft = messageOwner.ttl;
+        if (messageOwner.destroyTime != 0) {
+            secondsLeft = Math.max(0, messageOwner.destroyTime - ConnectionsManager.getInstance().getCurrentTime());
+        }
+        String str;
+        if (secondsLeft < 60) {
+            str = secondsLeft + "s";
+        } else {
+            str = secondsLeft / 60 + "m";
+        }
+        return str;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java b/TMessagesProj/src/main/java/org/tomato/android/MessagesController.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
rename to TMessagesProj/src/main/java/org/tomato/android/MessagesController.java
index 80838222c..c95cd74c3 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/MessagesController.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.android;
+package org.tomato.android;
 
 import android.app.Activity;
 import android.app.AlertDialog;
@@ -19,20 +19,20 @@
 import android.text.Html;
 import android.util.SparseArray;
 
-import org.telegram.messenger.BuffersStorage;
-import org.telegram.messenger.ByteBufferDesc;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.MessageKeyData;
-import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLClassStore;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.Utilities;
-import org.telegram.ui.ApplicationLoader;
+import org.tomato.messenger.BuffersStorage;
+import org.tomato.messenger.ByteBufferDesc;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLoader;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.MessageKeyData;
+import org.tomato.messenger.R;
+import org.tomato.messenger.RPCRequest;
+import org.tomato.messenger.TLClassStore;
+import org.tomato.messenger.TLObject;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
+import org.tomato.messenger.Utilities;
+import org.tomato.ui.ApplicationLoader;
 
 import java.math.BigInteger;
 import java.util.ArrayList;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java b/TMessagesProj/src/main/java/org/tomato/android/MessagesStorage.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
rename to TMessagesProj/src/main/java/org/tomato/android/MessagesStorage.java
index 4b8598b7a..632b66f27 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MessagesStorage.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/MessagesStorage.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.android;
+package org.tomato.android;
 
 import android.content.Context;
 import android.content.SharedPreferences;
@@ -14,22 +14,22 @@
 import android.text.TextUtils;
 import android.util.SparseArray;
 
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.SQLite.SQLiteCursor;
-import org.telegram.SQLite.SQLiteDatabase;
-import org.telegram.SQLite.SQLitePreparedStatement;
-import org.telegram.messenger.BuffersStorage;
-import org.telegram.messenger.ByteBufferDesc;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.DispatchQueue;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.TLClassStore;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.Utilities;
-import org.telegram.ui.ApplicationLoader;
+import org.tomato.PhoneFormat.PhoneFormat;
+import org.tomato.SQLite.SQLiteCursor;
+import org.tomato.SQLite.SQLiteDatabase;
+import org.tomato.SQLite.SQLitePreparedStatement;
+import org.tomato.messenger.BuffersStorage;
+import org.tomato.messenger.ByteBufferDesc;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.DispatchQueue;
+import org.tomato.messenger.FileLoader;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.TLClassStore;
+import org.tomato.messenger.TLObject;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
+import org.tomato.messenger.Utilities;
+import org.tomato.ui.ApplicationLoader;
 
 import java.io.File;
 import java.util.ArrayList;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NativeLoader.java b/TMessagesProj/src/main/java/org/tomato/android/NativeLoader.java
similarity index 98%
rename from TMessagesProj/src/main/java/org/telegram/android/NativeLoader.java
rename to TMessagesProj/src/main/java/org/tomato/android/NativeLoader.java
index 7a7499b05..0936f388d 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NativeLoader.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/NativeLoader.java
@@ -6,13 +6,13 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.android;
+package org.tomato.android;
 
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
 import android.os.Build;
 
-import org.telegram.messenger.FileLog;
+import org.tomato.messenger.FileLog;
 
 import java.io.File;
 import java.io.FileOutputStream;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java b/TMessagesProj/src/main/java/org/tomato/android/NotificationCenter.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
rename to TMessagesProj/src/main/java/org/tomato/android/NotificationCenter.java
index 1b9896166..875b4a29b 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/NotificationCenter.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.android;
+package org.tomato.android;
 
 import java.util.ArrayList;
 import java.util.HashMap;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationRepeat.java b/TMessagesProj/src/main/java/org/tomato/android/NotificationRepeat.java
similarity index 91%
rename from TMessagesProj/src/main/java/org/telegram/android/NotificationRepeat.java
rename to TMessagesProj/src/main/java/org/tomato/android/NotificationRepeat.java
index f44a1f0c4..973dd9060 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationRepeat.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/NotificationRepeat.java
@@ -6,13 +6,11 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.android;
+package org.tomato.android;
 
 import android.app.IntentService;
 import android.content.Intent;
 
-import org.telegram.messenger.Utilities;
-
 public class NotificationRepeat extends IntentService {
 
     public NotificationRepeat() {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java b/TMessagesProj/src/main/java/org/tomato/android/NotificationsController.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
rename to TMessagesProj/src/main/java/org/tomato/android/NotificationsController.java
index 3aa873fac..8beb56e9e 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationsController.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/NotificationsController.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.android;
+package org.tomato.android;
 
 import android.app.AlarmManager;
 import android.app.PendingIntent;
@@ -27,14 +27,14 @@
 
 import org.json.JSONArray;
 import org.json.JSONObject;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.ui.ApplicationLoader;
-import org.telegram.ui.LaunchActivity;
-import org.telegram.ui.PopupNotificationActivity;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
+import org.tomato.ui.ApplicationLoader;
+import org.tomato.ui.LaunchActivity;
+import org.tomato.ui.PopupNotificationActivity;
 
 import java.util.ArrayList;
 import java.util.Calendar;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationsService.java b/TMessagesProj/src/main/java/org/tomato/android/NotificationsService.java
similarity index 91%
rename from TMessagesProj/src/main/java/org/telegram/android/NotificationsService.java
rename to TMessagesProj/src/main/java/org/tomato/android/NotificationsService.java
index a790c7983..d9cd3823b 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationsService.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/NotificationsService.java
@@ -6,15 +6,15 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.android;
+package org.tomato.android;
 
 import android.app.Service;
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.os.IBinder;
 
-import org.telegram.messenger.FileLog;
-import org.telegram.ui.ApplicationLoader;
+import org.tomato.messenger.FileLog;
+import org.tomato.ui.ApplicationLoader;
 
 public class NotificationsService extends Service {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/PhotoObject.java b/TMessagesProj/src/main/java/org/tomato/android/PhotoObject.java
similarity index 94%
rename from TMessagesProj/src/main/java/org/telegram/android/PhotoObject.java
rename to TMessagesProj/src/main/java/org/tomato/android/PhotoObject.java
index fb7ac51c8..a642ee63e 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/PhotoObject.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/PhotoObject.java
@@ -6,14 +6,14 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.android;
+package org.tomato.android;
 
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.Utilities;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.Utilities;
 
 import java.util.ArrayList;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ScreenReceiver.java b/TMessagesProj/src/main/java/org/tomato/android/ScreenReceiver.java
similarity index 85%
rename from TMessagesProj/src/main/java/org/telegram/android/ScreenReceiver.java
rename to TMessagesProj/src/main/java/org/tomato/android/ScreenReceiver.java
index 7a357627d..30dfde1ce 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ScreenReceiver.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/ScreenReceiver.java
@@ -6,15 +6,15 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.android;
+package org.tomato.android;
 
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
 
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.ui.ApplicationLoader;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLog;
+import org.tomato.ui.ApplicationLoader;
 
 public class ScreenReceiver extends BroadcastReceiver {
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java b/TMessagesProj/src/main/java/org/tomato/android/SendMessagesHelper.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java
rename to TMessagesProj/src/main/java/org/tomato/android/SendMessagesHelper.java
index 770a38c55..e2afda30e 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/SendMessagesHelper.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/SendMessagesHelper.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.android;
+package org.tomato.android;
 
 import android.graphics.Bitmap;
 import android.media.MediaMetadataRetriever;
@@ -17,18 +17,18 @@
 import android.provider.MediaStore;
 import android.webkit.MimeTypeMap;
 
-import org.telegram.messenger.BuffersStorage;
-import org.telegram.messenger.ByteBufferDesc;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.MessageKeyData;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.Utilities;
-import org.telegram.ui.ApplicationLoader;
+import org.tomato.messenger.BuffersStorage;
+import org.tomato.messenger.ByteBufferDesc;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLoader;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.MessageKeyData;
+import org.tomato.messenger.RPCRequest;
+import org.tomato.messenger.TLObject;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
+import org.tomato.messenger.Utilities;
+import org.tomato.ui.ApplicationLoader;
 
 import java.io.File;
 import java.util.ArrayList;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/SmsListener.java b/TMessagesProj/src/main/java/org/tomato/android/SmsListener.java
similarity index 96%
rename from TMessagesProj/src/main/java/org/telegram/android/SmsListener.java
rename to TMessagesProj/src/main/java/org/tomato/android/SmsListener.java
index ce57865a2..a967beba3 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/SmsListener.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/SmsListener.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.android;
+package org.tomato.android;
 
 import android.content.BroadcastReceiver;
 import android.content.Context;
@@ -15,7 +15,7 @@
 import android.os.Bundle;
 import android.telephony.SmsMessage;
 
-import org.telegram.messenger.FileLog;
+import org.tomato.messenger.FileLog;
 
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/VideoEncodingService.java b/TMessagesProj/src/main/java/org/tomato/android/VideoEncodingService.java
similarity index 95%
rename from TMessagesProj/src/main/java/org/telegram/android/VideoEncodingService.java
rename to TMessagesProj/src/main/java/org/tomato/android/VideoEncodingService.java
index e057c682a..8a52a096c 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/VideoEncodingService.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/VideoEncodingService.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.android;
+package org.tomato.android;
 
 import android.app.Service;
 import android.content.Intent;
@@ -14,9 +14,9 @@
 import android.support.v4.app.NotificationCompat;
 import android.support.v4.app.NotificationManagerCompat;
 
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.ui.ApplicationLoader;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.ui.ApplicationLoader;
 
 public class VideoEncodingService extends Service implements NotificationCenter.NotificationCenterDelegate {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/android/WearReplyReceiver.java b/TMessagesProj/src/main/java/org/tomato/android/WearReplyReceiver.java
similarity index 97%
rename from TMessagesProj/src/main/java/org/telegram/android/WearReplyReceiver.java
rename to TMessagesProj/src/main/java/org/tomato/android/WearReplyReceiver.java
index 9e32dc6a6..f997c15e1 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/WearReplyReceiver.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/WearReplyReceiver.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.android;
+package org.tomato.android;
 
 import android.content.BroadcastReceiver;
 import android.content.Context;
diff --git a/TMessagesProj/src/main/java/org/tomato/android/video/InputSurface.java b/TMessagesProj/src/main/java/org/tomato/android/video/InputSurface.java
new file mode 100644
index 000000000..e032591d1
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/android/video/InputSurface.java
@@ -0,0 +1,135 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.tomato.android.video;
+
+import android.annotation.TargetApi;
+import android.opengl.EGL14;
+import android.opengl.EGLConfig;
+import android.opengl.EGLContext;
+import android.opengl.EGLDisplay;
+import android.opengl.EGLExt;
+import android.opengl.EGLSurface;
+import android.view.Surface;
+
+@TargetApi(17)
+public class InputSurface {
+    private static final boolean VERBOSE = false;
+    private static final int EGL_RECORDABLE_ANDROID = 0x3142;
+    private static final int EGL_OPENGL_ES2_BIT = 4;
+    private EGLDisplay mEGLDisplay;
+    private EGLContext mEGLContext;
+    private EGLSurface mEGLSurface;
+    private Surface mSurface;
+
+    public InputSurface(Surface surface) {
+        if (surface == null) {
+            throw new NullPointerException();
+        }
+        mSurface = surface;
+        eglSetup();
+    }
+
+    private void eglSetup() {
+        mEGLDisplay = EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);
+        if (mEGLDisplay == EGL14.EGL_NO_DISPLAY) {
+            throw new RuntimeException("unable to get EGL14 display");
+        }
+        int[] version = new int[2];
+        if (!EGL14.eglInitialize(mEGLDisplay, version, 0, version, 1)) {
+            mEGLDisplay = null;
+            throw new RuntimeException("unable to initialize EGL14");
+        }
+
+        int[] attribList = {
+                EGL14.EGL_RED_SIZE, 8,
+                EGL14.EGL_GREEN_SIZE, 8,
+                EGL14.EGL_BLUE_SIZE, 8,
+                EGL14.EGL_RENDERABLE_TYPE, EGL_OPENGL_ES2_BIT,
+                EGL_RECORDABLE_ANDROID, 1,
+                EGL14.EGL_NONE
+        };
+        EGLConfig[] configs = new EGLConfig[1];
+        int[] numConfigs = new int[1];
+        if (!EGL14.eglChooseConfig(mEGLDisplay, attribList, 0, configs, 0, configs.length,
+                numConfigs, 0)) {
+            throw new RuntimeException("unable to find RGB888+recordable ES2 EGL config");
+        }
+
+        int[] attrib_list = {
+                EGL14.EGL_CONTEXT_CLIENT_VERSION, 2,
+                EGL14.EGL_NONE
+        };
+
+        mEGLContext = EGL14.eglCreateContext(mEGLDisplay, configs[0], EGL14.EGL_NO_CONTEXT, attrib_list, 0);
+        checkEglError("eglCreateContext");
+        if (mEGLContext == null) {
+            throw new RuntimeException("null context");
+        }
+
+        int[] surfaceAttribs = {
+                EGL14.EGL_NONE
+        };
+        mEGLSurface = EGL14.eglCreateWindowSurface(mEGLDisplay, configs[0], mSurface,
+                surfaceAttribs, 0);
+        checkEglError("eglCreateWindowSurface");
+        if (mEGLSurface == null) {
+            throw new RuntimeException("surface was null");
+        }
+    }
+
+    public void release() {
+        if (EGL14.eglGetCurrentContext().equals(mEGLContext)) {
+            EGL14.eglMakeCurrent(mEGLDisplay, EGL14.EGL_NO_SURFACE, EGL14.EGL_NO_SURFACE, EGL14.EGL_NO_CONTEXT);
+        }
+        EGL14.eglDestroySurface(mEGLDisplay, mEGLSurface);
+        EGL14.eglDestroyContext(mEGLDisplay, mEGLContext);
+        mSurface.release();
+        mEGLDisplay = null;
+        mEGLContext = null;
+        mEGLSurface = null;
+        mSurface = null;
+    }
+
+    public void makeCurrent() {
+        if (!EGL14.eglMakeCurrent(mEGLDisplay, mEGLSurface, mEGLSurface, mEGLContext)) {
+            throw new RuntimeException("eglMakeCurrent failed");
+        }
+    }
+
+    public boolean swapBuffers() {
+        return EGL14.eglSwapBuffers(mEGLDisplay, mEGLSurface);
+    }
+
+    public Surface getSurface() {
+        return mSurface;
+    }
+
+    public void setPresentationTime(long nsecs) {
+        EGLExt.eglPresentationTimeANDROID(mEGLDisplay, mEGLSurface, nsecs);
+    }
+
+    private void checkEglError(String msg) {
+        boolean failed = false;
+        int error;
+        while ((error = EGL14.eglGetError()) != EGL14.EGL_SUCCESS) {
+            failed = true;
+        }
+        if (failed) {
+            throw new RuntimeException("EGL error encountered (see log)");
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/video/MP4Builder.java b/TMessagesProj/src/main/java/org/tomato/android/video/MP4Builder.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/android/video/MP4Builder.java
rename to TMessagesProj/src/main/java/org/tomato/android/video/MP4Builder.java
index 9d9eca96d..d083a8f1a 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/video/MP4Builder.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/video/MP4Builder.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.android.video;
+package org.tomato.android.video;
 
 import android.annotation.TargetApi;
 import android.media.MediaCodec;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/video/Mp4Movie.java b/TMessagesProj/src/main/java/org/tomato/android/video/Mp4Movie.java
similarity index 98%
rename from TMessagesProj/src/main/java/org/telegram/android/video/Mp4Movie.java
rename to TMessagesProj/src/main/java/org/tomato/android/video/Mp4Movie.java
index 5fea2eb3d..4e03449cd 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/video/Mp4Movie.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/video/Mp4Movie.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.android.video;
+package org.tomato.android.video;
 
 import android.annotation.TargetApi;
 import android.media.MediaCodec;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/video/OutputSurface.java b/TMessagesProj/src/main/java/org/tomato/android/video/OutputSurface.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/android/video/OutputSurface.java
rename to TMessagesProj/src/main/java/org/tomato/android/video/OutputSurface.java
index c3e2d5fde..53c3a55b1 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/video/OutputSurface.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/video/OutputSurface.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.telegram.android.video;
+package org.tomato.android.video;
 
 import android.annotation.TargetApi;
 import android.graphics.SurfaceTexture;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/video/Sample.java b/TMessagesProj/src/main/java/org/tomato/android/video/Sample.java
similarity index 93%
rename from TMessagesProj/src/main/java/org/telegram/android/video/Sample.java
rename to TMessagesProj/src/main/java/org/tomato/android/video/Sample.java
index f6d7954ff..52c6d857d 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/video/Sample.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/video/Sample.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.android.video;
+package org.tomato.android.video;
 
 public class Sample {
     private long offset = 0;
diff --git a/TMessagesProj/src/main/java/org/tomato/android/video/TextureRenderer.java b/TMessagesProj/src/main/java/org/tomato/android/video/TextureRenderer.java
new file mode 100644
index 000000000..244754365
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/android/video/TextureRenderer.java
@@ -0,0 +1,213 @@
+/*
+ * Copyright (C) 2013 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.tomato.android.video;
+
+import android.annotation.TargetApi;
+import android.graphics.SurfaceTexture;
+import android.opengl.GLES11Ext;
+import android.opengl.GLES20;
+import android.opengl.Matrix;
+
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+import java.nio.FloatBuffer;
+
+@TargetApi(16)
+public class TextureRenderer {
+
+    private static final int FLOAT_SIZE_BYTES = 4;
+    private static final int TRIANGLE_VERTICES_DATA_STRIDE_BYTES = 5 * FLOAT_SIZE_BYTES;
+    private static final int TRIANGLE_VERTICES_DATA_POS_OFFSET = 0;
+    private static final int TRIANGLE_VERTICES_DATA_UV_OFFSET = 3;
+    private static final float[] mTriangleVerticesData = {
+            -1.0f, -1.0f, 0, 0.f, 0.f,
+            1.0f, -1.0f, 0, 1.f, 0.f,
+            -1.0f, 1.0f, 0, 0.f, 1.f,
+            1.0f, 1.0f, 0, 1.f, 1.f,
+    };
+    private FloatBuffer mTriangleVertices;
+
+    private static final String VERTEX_SHADER =
+            "uniform mat4 uMVPMatrix;\n" +
+            "uniform mat4 uSTMatrix;\n" +
+            "attribute vec4 aPosition;\n" +
+            "attribute vec4 aTextureCoord;\n" +
+            "varying vec2 vTextureCoord;\n" +
+            "void main() {\n" +
+            "  gl_Position = uMVPMatrix * aPosition;\n" +
+            "  vTextureCoord = (uSTMatrix * aTextureCoord).xy;\n" +
+            "}\n";
+
+    private static final String FRAGMENT_SHADER =
+            "#extension GL_OES_EGL_image_external : require\n" +
+            "precision mediump float;\n" +
+            "varying vec2 vTextureCoord;\n" +
+            "uniform samplerExternalOES sTexture;\n" +
+            "void main() {\n" +
+            "  gl_FragColor = texture2D(sTexture, vTextureCoord);\n" +
+            "}\n";
+
+    private float[] mMVPMatrix = new float[16];
+    private float[] mSTMatrix = new float[16];
+    private int mProgram;
+    private int mTextureID = -12345;
+    private int muMVPMatrixHandle;
+    private int muSTMatrixHandle;
+    private int maPositionHandle;
+    private int maTextureHandle;
+    private int rotationAngle = 0;
+
+    public TextureRenderer(int rotation) {
+        rotationAngle = rotation;
+        mTriangleVertices = ByteBuffer.allocateDirect(mTriangleVerticesData.length * FLOAT_SIZE_BYTES).order(ByteOrder.nativeOrder()).asFloatBuffer();
+        mTriangleVertices.put(mTriangleVerticesData).position(0);
+        Matrix.setIdentityM(mSTMatrix, 0);
+    }
+
+    public int getTextureId() {
+        return mTextureID;
+    }
+
+    public void drawFrame(SurfaceTexture st, boolean invert) {
+        checkGlError("onDrawFrame start");
+        st.getTransformMatrix(mSTMatrix);
+
+        if (invert) {
+            mSTMatrix[5] = -mSTMatrix[5];
+            mSTMatrix[13] = 1.0f - mSTMatrix[13];
+        }
+
+        GLES20.glUseProgram(mProgram);
+        checkGlError("glUseProgram");
+        GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
+        GLES20.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, mTextureID);
+        mTriangleVertices.position(TRIANGLE_VERTICES_DATA_POS_OFFSET);
+        GLES20.glVertexAttribPointer(maPositionHandle, 3, GLES20.GL_FLOAT, false, TRIANGLE_VERTICES_DATA_STRIDE_BYTES, mTriangleVertices);
+        checkGlError("glVertexAttribPointer maPosition");
+        GLES20.glEnableVertexAttribArray(maPositionHandle);
+        checkGlError("glEnableVertexAttribArray maPositionHandle");
+        mTriangleVertices.position(TRIANGLE_VERTICES_DATA_UV_OFFSET);
+        GLES20.glVertexAttribPointer(maTextureHandle, 2, GLES20.GL_FLOAT, false, TRIANGLE_VERTICES_DATA_STRIDE_BYTES, mTriangleVertices);
+        checkGlError("glVertexAttribPointer maTextureHandle");
+        GLES20.glEnableVertexAttribArray(maTextureHandle);
+        checkGlError("glEnableVertexAttribArray maTextureHandle");
+        GLES20.glUniformMatrix4fv(muSTMatrixHandle, 1, false, mSTMatrix, 0);
+        GLES20.glUniformMatrix4fv(muMVPMatrixHandle, 1, false, mMVPMatrix, 0);
+        GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4);
+        checkGlError("glDrawArrays");
+        GLES20.glFinish();
+    }
+
+    public void surfaceCreated() {
+        mProgram = createProgram(VERTEX_SHADER, FRAGMENT_SHADER);
+        if (mProgram == 0) {
+            throw new RuntimeException("failed creating program");
+        }
+        maPositionHandle = GLES20.glGetAttribLocation(mProgram, "aPosition");
+        checkGlError("glGetAttribLocation aPosition");
+        if (maPositionHandle == -1) {
+            throw new RuntimeException("Could not get attrib location for aPosition");
+        }
+        maTextureHandle = GLES20.glGetAttribLocation(mProgram, "aTextureCoord");
+        checkGlError("glGetAttribLocation aTextureCoord");
+        if (maTextureHandle == -1) {
+            throw new RuntimeException("Could not get attrib location for aTextureCoord");
+        }
+        muMVPMatrixHandle = GLES20.glGetUniformLocation(mProgram, "uMVPMatrix");
+        checkGlError("glGetUniformLocation uMVPMatrix");
+        if (muMVPMatrixHandle == -1) {
+            throw new RuntimeException("Could not get attrib location for uMVPMatrix");
+        }
+        muSTMatrixHandle = GLES20.glGetUniformLocation(mProgram, "uSTMatrix");
+        checkGlError("glGetUniformLocation uSTMatrix");
+        if (muSTMatrixHandle == -1) {
+            throw new RuntimeException("Could not get attrib location for uSTMatrix");
+        }
+        int[] textures = new int[1];
+        GLES20.glGenTextures(1, textures, 0);
+        mTextureID = textures[0];
+        GLES20.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, mTextureID);
+        checkGlError("glBindTexture mTextureID");
+        GLES20.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_NEAREST);
+        GLES20.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);
+        GLES20.glTexParameteri(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);
+        GLES20.glTexParameteri(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);
+        checkGlError("glTexParameter");
+
+        Matrix.setIdentityM(mMVPMatrix, 0);
+        if (rotationAngle != 0) {
+            Matrix.rotateM(mMVPMatrix, 0, rotationAngle, 0, 0, 1);
+        }
+    }
+
+    public void changeFragmentShader(String fragmentShader) {
+        GLES20.glDeleteProgram(mProgram);
+        mProgram = createProgram(VERTEX_SHADER, fragmentShader);
+        if (mProgram == 0) {
+            throw new RuntimeException("failed creating program");
+        }
+    }
+
+    private int loadShader(int shaderType, String source) {
+        int shader = GLES20.glCreateShader(shaderType);
+        checkGlError("glCreateShader type=" + shaderType);
+        GLES20.glShaderSource(shader, source);
+        GLES20.glCompileShader(shader);
+        int[] compiled = new int[1];
+        GLES20.glGetShaderiv(shader, GLES20.GL_COMPILE_STATUS, compiled, 0);
+        if (compiled[0] == 0) {
+            GLES20.glDeleteShader(shader);
+            shader = 0;
+        }
+        return shader;
+    }
+
+    private int createProgram(String vertexSource, String fragmentSource) {
+        int vertexShader = loadShader(GLES20.GL_VERTEX_SHADER, vertexSource);
+        if (vertexShader == 0) {
+            return 0;
+        }
+        int pixelShader = loadShader(GLES20.GL_FRAGMENT_SHADER, fragmentSource);
+        if (pixelShader == 0) {
+            return 0;
+        }
+        int program = GLES20.glCreateProgram();
+        checkGlError("glCreateProgram");
+        if (program == 0) {
+            return 0;
+        }
+        GLES20.glAttachShader(program, vertexShader);
+        checkGlError("glAttachShader");
+        GLES20.glAttachShader(program, pixelShader);
+        checkGlError("glAttachShader");
+        GLES20.glLinkProgram(program);
+        int[] linkStatus = new int[1];
+        GLES20.glGetProgramiv(program, GLES20.GL_LINK_STATUS, linkStatus, 0);
+        if (linkStatus[0] != GLES20.GL_TRUE) {
+            GLES20.glDeleteProgram(program);
+            program = 0;
+        }
+        return program;
+    }
+
+    public void checkGlError(String op) {
+        int error;
+        if ((error = GLES20.glGetError()) != GLES20.GL_NO_ERROR) {
+            throw new RuntimeException(op + ": glError " + error);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/android/video/Track.java b/TMessagesProj/src/main/java/org/tomato/android/video/Track.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/android/video/Track.java
rename to TMessagesProj/src/main/java/org/tomato/android/video/Track.java
index 3131a00ce..cf2d5d92f 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/video/Track.java
+++ b/TMessagesProj/src/main/java/org/tomato/android/video/Track.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.android.video;
+package org.tomato.android.video;
 
 import android.annotation.TargetApi;
 import android.media.MediaCodec;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/AbsSerializedData.java b/TMessagesProj/src/main/java/org/tomato/messenger/AbsSerializedData.java
similarity index 97%
rename from TMessagesProj/src/main/java/org/telegram/messenger/AbsSerializedData.java
rename to TMessagesProj/src/main/java/org/tomato/messenger/AbsSerializedData.java
index 0f0bb480c..a21541b8c 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/AbsSerializedData.java
+++ b/TMessagesProj/src/main/java/org/tomato/messenger/AbsSerializedData.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.messenger;
+package org.tomato.messenger;
 
 public abstract class AbsSerializedData {
     public abstract void writeInt32(int x);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Action.java b/TMessagesProj/src/main/java/org/tomato/messenger/Action.java
similarity index 94%
rename from TMessagesProj/src/main/java/org/telegram/messenger/Action.java
rename to TMessagesProj/src/main/java/org/tomato/messenger/Action.java
index 61ed9b70d..2575f3fde 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Action.java
+++ b/TMessagesProj/src/main/java/org/tomato/messenger/Action.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.messenger;
+package org.tomato.messenger;
 
 import java.util.HashMap;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/BuffersStorage.java b/TMessagesProj/src/main/java/org/tomato/messenger/BuffersStorage.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/messenger/BuffersStorage.java
rename to TMessagesProj/src/main/java/org/tomato/messenger/BuffersStorage.java
index db28c5c73..005e5fed9 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/BuffersStorage.java
+++ b/TMessagesProj/src/main/java/org/tomato/messenger/BuffersStorage.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.messenger;
+package org.tomato.messenger;
 
 import java.util.ArrayList;
 
diff --git a/TMessagesProj/src/main/java/org/tomato/messenger/BuildVars.java b/TMessagesProj/src/main/java/org/tomato/messenger/BuildVars.java
new file mode 100644
index 000000000..af709d8ca
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/messenger/BuildVars.java
@@ -0,0 +1,18 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.tomato.messenger;
+
+public class BuildVars {
+    public static boolean DEBUG_VERSION = true;
+    public static int APP_ID = 17934; //obtaion your own APP_ID at https://core.telegram.org/api/obtaining_api_id
+    public static String APP_HASH = "0c35055755bd7a01a7a2213f8462968a"; //obtaion your own APP_HASH at https://core.telegram.org/api/obtaining_api_id
+    public static String HOCKEY_APP_HASH = "your-hockeyapp-api-key-here";
+    public static String GCM_SENDER_ID = "554194861454";
+    public static String SEND_LOGS_EMAIL = "myfullhouse.6789@gmail.com";
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ByteBufferDesc.java b/TMessagesProj/src/main/java/org/tomato/messenger/ByteBufferDesc.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/messenger/ByteBufferDesc.java
rename to TMessagesProj/src/main/java/org/tomato/messenger/ByteBufferDesc.java
index f36049bc8..f35cef4a1 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ByteBufferDesc.java
+++ b/TMessagesProj/src/main/java/org/tomato/messenger/ByteBufferDesc.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.messenger;
+package org.tomato.messenger;
 
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionContext.java b/TMessagesProj/src/main/java/org/tomato/messenger/ConnectionContext.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/messenger/ConnectionContext.java
rename to TMessagesProj/src/main/java/org/tomato/messenger/ConnectionContext.java
index 5277acd52..bb82943a3 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionContext.java
+++ b/TMessagesProj/src/main/java/org/tomato/messenger/ConnectionContext.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.messenger;
+package org.tomato.messenger;
 
 import java.util.ArrayList;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java b/TMessagesProj/src/main/java/org/tomato/messenger/ConnectionsManager.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
rename to TMessagesProj/src/main/java/org/tomato/messenger/ConnectionsManager.java
index 81ed6d884..2a580a5c3 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/tomato/messenger/ConnectionsManager.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.messenger;
+package org.tomato.messenger;
 
 import android.content.Context;
 import android.content.SharedPreferences;
@@ -17,12 +17,12 @@
 import android.os.PowerManager;
 import android.util.Base64;
 
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
-import org.telegram.android.NotificationCenter;
-import org.telegram.ui.ApplicationLoader;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.ContactsController;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MessagesController;
+import org.tomato.android.NotificationCenter;
+import org.tomato.ui.ApplicationLoader;
 
 import java.io.File;
 import java.util.ArrayList;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Datacenter.java b/TMessagesProj/src/main/java/org/tomato/messenger/Datacenter.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/messenger/Datacenter.java
rename to TMessagesProj/src/main/java/org/tomato/messenger/Datacenter.java
index 4c1914128..7dc895e51 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Datacenter.java
+++ b/TMessagesProj/src/main/java/org/tomato/messenger/Datacenter.java
@@ -6,12 +6,12 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.messenger;
+package org.tomato.messenger;
 
 import android.content.Context;
 import android.content.SharedPreferences;
 
-import org.telegram.ui.ApplicationLoader;
+import org.tomato.ui.ApplicationLoader;
 
 import java.util.ArrayList;
 import java.util.Collections;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/DispatchQueue.java b/TMessagesProj/src/main/java/org/tomato/messenger/DispatchQueue.java
similarity index 98%
rename from TMessagesProj/src/main/java/org/telegram/messenger/DispatchQueue.java
rename to TMessagesProj/src/main/java/org/tomato/messenger/DispatchQueue.java
index 2c68fdf6e..d1162609f 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/DispatchQueue.java
+++ b/TMessagesProj/src/main/java/org/tomato/messenger/DispatchQueue.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.messenger;
+package org.tomato.messenger;
 
 import android.os.Handler;
 import android.os.Looper;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ExportAuthorizationAction.java b/TMessagesProj/src/main/java/org/tomato/messenger/ExportAuthorizationAction.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/messenger/ExportAuthorizationAction.java
rename to TMessagesProj/src/main/java/org/tomato/messenger/ExportAuthorizationAction.java
index 51367696d..7e421d7f1 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ExportAuthorizationAction.java
+++ b/TMessagesProj/src/main/java/org/tomato/messenger/ExportAuthorizationAction.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.messenger;
+package org.tomato.messenger;
 
 import java.util.HashMap;
 
diff --git a/TMessagesProj/src/main/java/org/tomato/messenger/FileLoadOperation.java b/TMessagesProj/src/main/java/org/tomato/messenger/FileLoadOperation.java
new file mode 100644
index 000000000..e8e2d245c
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/messenger/FileLoadOperation.java
@@ -0,0 +1,470 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.messenger;
+
+import java.io.File;
+import java.io.RandomAccessFile;
+import java.nio.channels.FileChannel;
+import java.util.ArrayList;
+import java.util.Scanner;
+
+public class FileLoadOperation {
+
+    private static class RequestInfo {
+        private long requestToken = 0;
+        private int offset = 0;
+        private TLRPC.TL_upload_file response = null;
+    }
+
+    private final static int stateIdle = 0;
+    private final static int stateDownloading = 1;
+    private final static int stateFailed = 2;
+    private final static int stateFinished = 3;
+
+    private final static int downloadChunkSize = 1024 * 32;
+    private final static int maxDownloadRequests = 3;
+
+    private int datacenter_id;
+    private TLRPC.InputFileLocation location;
+    private volatile int state = stateIdle;
+    private int downloadedBytes;
+    private int totalBytesCount;
+    private FileLoadOperationDelegate delegate;
+    private byte[] key;
+    private byte[] iv;
+
+    private int nextDownloadOffset = 0;
+    private ArrayList<RequestInfo> requestInfos = new ArrayList<RequestInfo>(maxDownloadRequests);
+    private ArrayList<RequestInfo> delayedRequestInfos = new ArrayList<RequestInfo>(maxDownloadRequests - 1);
+
+    private File cacheFileTemp;
+    private File cacheFileFinal;
+    private File cacheIvTemp;
+
+    private String ext;
+    private RandomAccessFile fileOutputStream;
+    private RandomAccessFile fiv;
+    private File storePath = null;
+    private File tempPath = null;
+    private boolean isForceRequest = false;
+
+    public static interface FileLoadOperationDelegate {
+        public abstract void didFinishLoadingFile(FileLoadOperation operation, File finalFile, File tempFile);
+        public abstract void didFailedLoadingFile(FileLoadOperation operation, int state);
+        public abstract void didChangedLoadProgress(FileLoadOperation operation, float progress);
+    }
+
+    public FileLoadOperation(TLRPC.FileLocation photoLocation, int size) {
+        if (photoLocation instanceof TLRPC.TL_fileEncryptedLocation) {
+            location = new TLRPC.TL_inputEncryptedFileLocation();
+            location.id = photoLocation.volume_id;
+            location.volume_id = photoLocation.volume_id;
+            location.access_hash = photoLocation.secret;
+            location.local_id = photoLocation.local_id;
+            iv = new byte[32];
+            System.arraycopy(photoLocation.iv, 0, iv, 0, iv.length);
+            key = photoLocation.key;
+            datacenter_id = photoLocation.dc_id;
+        } else if (photoLocation instanceof TLRPC.TL_fileLocation) {
+            location = new TLRPC.TL_inputFileLocation();
+            location.volume_id = photoLocation.volume_id;
+            location.secret = photoLocation.secret;
+            location.local_id = photoLocation.local_id;
+            datacenter_id = photoLocation.dc_id;
+        }
+        totalBytesCount = size;
+    }
+
+    public FileLoadOperation(TLRPC.Video videoLocation) {
+        if (videoLocation instanceof TLRPC.TL_videoEncrypted) {
+            location = new TLRPC.TL_inputEncryptedFileLocation();
+            location.id = videoLocation.id;
+            location.access_hash = videoLocation.access_hash;
+            datacenter_id = videoLocation.dc_id;
+            iv = new byte[32];
+            System.arraycopy(videoLocation.iv, 0, iv, 0, iv.length);
+            key = videoLocation.key;
+        } else if (videoLocation instanceof TLRPC.TL_video) {
+            location = new TLRPC.TL_inputVideoFileLocation();
+            datacenter_id = videoLocation.dc_id;
+            location.id = videoLocation.id;
+            location.access_hash = videoLocation.access_hash;
+        }
+        totalBytesCount = videoLocation.size;
+        ext = ".mp4";
+    }
+
+    public FileLoadOperation(TLRPC.Audio audioLocation) {
+        if (audioLocation instanceof TLRPC.TL_audioEncrypted) {
+            location = new TLRPC.TL_inputEncryptedFileLocation();
+            location.id = audioLocation.id;
+            location.access_hash = audioLocation.access_hash;
+            datacenter_id = audioLocation.dc_id;
+            iv = new byte[32];
+            System.arraycopy(audioLocation.iv, 0, iv, 0, iv.length);
+            key = audioLocation.key;
+        } else if (audioLocation instanceof TLRPC.TL_audio) {
+            location = new TLRPC.TL_inputAudioFileLocation();
+            datacenter_id = audioLocation.dc_id;
+            location.id = audioLocation.id;
+            location.access_hash = audioLocation.access_hash;
+        }
+        totalBytesCount = audioLocation.size;
+        ext = ".ogg";
+    }
+
+    public FileLoadOperation(TLRPC.Document documentLocation) {
+        if (documentLocation instanceof TLRPC.TL_documentEncrypted) {
+            location = new TLRPC.TL_inputEncryptedFileLocation();
+            location.id = documentLocation.id;
+            location.access_hash = documentLocation.access_hash;
+            datacenter_id = documentLocation.dc_id;
+            iv = new byte[32];
+            System.arraycopy(documentLocation.iv, 0, iv, 0, iv.length);
+            key = documentLocation.key;
+        } else if (documentLocation instanceof TLRPC.TL_document) {
+            location = new TLRPC.TL_inputDocumentFileLocation();
+            datacenter_id = documentLocation.dc_id;
+            location.id = documentLocation.id;
+            location.access_hash = documentLocation.access_hash;
+        }
+        totalBytesCount = documentLocation.size;
+        ext = documentLocation.file_name;
+        int idx = -1;
+        if (ext == null || (idx = ext.lastIndexOf(".")) == -1) {
+            ext = "";
+        } else {
+            ext = ext.substring(idx);
+            if (ext.length() <= 1) {
+                ext = "";
+            }
+        }
+    }
+
+    public void setForceRequest(boolean forceRequest) {
+        isForceRequest = forceRequest;
+    }
+
+    public boolean isForceRequest() {
+        return isForceRequest;
+    }
+
+    public void setPaths(File store, File temp) {
+        storePath = store;
+        tempPath = temp;
+    }
+
+    public void start() {
+        if (state != stateIdle) {
+            return;
+        }
+        state = stateDownloading;
+        if (location == null) {
+            Utilities.stageQueue.postRunnable(new Runnable() {
+                @Override
+                public void run() {
+                    delegate.didFailedLoadingFile(FileLoadOperation.this, 0);
+                }
+            });
+            return;
+        }
+        Long mediaId = null;
+        String fileNameFinal = null;
+        String fileNameTemp = null;
+        String fileNameIv = null;
+        if (location.volume_id != 0 && location.local_id != 0) {
+            fileNameTemp = location.volume_id + "_" + location.local_id + "_temp.jpg";
+            fileNameFinal = location.volume_id + "_" + location.local_id + ".jpg";
+            if (key != null) {
+                fileNameIv = location.volume_id + "_" + location.local_id + ".iv";
+            }
+            if (datacenter_id == Integer.MIN_VALUE || location.volume_id == Integer.MIN_VALUE) {
+                cleanup();
+                Utilities.stageQueue.postRunnable(new Runnable() {
+                    @Override
+                    public void run() {
+                        delegate.didFailedLoadingFile(FileLoadOperation.this, 0);
+                    }
+                });
+                return;
+            }
+        } else {
+            fileNameTemp = datacenter_id + "_" + location.id + "_temp" + ext;
+            fileNameFinal = datacenter_id + "_" + location.id + ext;
+            if (key != null) {
+                fileNameIv = datacenter_id + "_" + location.id + ".iv";
+            }
+        }
+
+        cacheFileFinal = new File(storePath, fileNameFinal);
+        boolean exist = cacheFileFinal.exists();
+        if (exist && totalBytesCount != 0 && totalBytesCount != cacheFileFinal.length()) {
+            exist = false;
+            cacheFileFinal.delete();
+        }
+
+        if (!cacheFileFinal.exists()) {
+            cacheFileTemp = new File(tempPath, fileNameTemp);
+            if (cacheFileTemp.exists()) {
+                downloadedBytes = (int)cacheFileTemp.length();
+                nextDownloadOffset = downloadedBytes = downloadedBytes / 1024 * 1024;
+            }
+            if (fileNameIv != null) {
+                cacheIvTemp = new File(tempPath, fileNameIv);
+                try {
+                    fiv = new RandomAccessFile(cacheIvTemp, "rws");
+                    long len = cacheIvTemp.length();
+                    if (len > 0 && len % 32 == 0) {
+                        fiv.read(iv, 0, 32);
+                    } else {
+                        downloadedBytes = 0;
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                    downloadedBytes = 0;
+                }
+            }
+            try {
+                fileOutputStream = new RandomAccessFile(cacheFileTemp, "rws");
+                if (downloadedBytes != 0) {
+                    fileOutputStream.seek(downloadedBytes);
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            if (fileOutputStream == null) {
+                cleanup();
+                Utilities.stageQueue.postRunnable(new Runnable() {
+                    @Override
+                    public void run() {
+                        delegate.didFailedLoadingFile(FileLoadOperation.this, 0);
+                    }
+                });
+                return;
+            }
+            Utilities.stageQueue.postRunnable(new Runnable() {
+                @Override
+                public void run() {
+                    if (totalBytesCount != 0 && downloadedBytes == totalBytesCount) {
+                        try {
+                            onFinishLoadingFile();
+                        } catch (Exception e) {
+                            delegate.didFailedLoadingFile(FileLoadOperation.this, 0);
+                        }
+                    } else {
+                        startDownloadRequest();
+                    }
+                }
+            });
+        } else {
+            try {
+                onFinishLoadingFile();
+            } catch (Exception e) {
+                delegate.didFailedLoadingFile(FileLoadOperation.this, 0);
+            }
+        }
+    }
+
+    public void cancel() {
+        Utilities.stageQueue.postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                if (state == stateFinished || state == stateFailed) {
+                    return;
+                }
+                state = stateFailed;
+                cleanup();
+                for (RequestInfo requestInfo : requestInfos) {
+                    if (requestInfo.requestToken != 0) {
+                        ConnectionsManager.getInstance().cancelRpc(requestInfo.requestToken, true, true);
+                    }
+                }
+                delegate.didFailedLoadingFile(FileLoadOperation.this, 1);
+            }
+        });
+    }
+
+    private void cleanup() {
+        try {
+            if (fileOutputStream != null) {
+                fileOutputStream.close();
+                fileOutputStream = null;
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+
+        try {
+            if (fiv != null) {
+                fiv.close();
+                fiv = null;
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        for (RequestInfo requestInfo : delayedRequestInfos) {
+            if (requestInfo.response != null) {
+                requestInfo.response.disableFree = false;
+                requestInfo.response.freeResources();
+            }
+        }
+        delayedRequestInfos.clear();
+    }
+
+    private void onFinishLoadingFile() throws Exception {
+        if (state != stateDownloading) {
+            return;
+        }
+        state = stateFinished;
+        cleanup();
+        if (cacheIvTemp != null) {
+            cacheIvTemp.delete();
+        }
+        if (cacheFileTemp != null) {
+            cacheFileTemp.renameTo(cacheFileFinal);
+        }
+        delegate.didFinishLoadingFile(FileLoadOperation.this, cacheFileFinal, cacheFileTemp);
+    }
+
+    private void processRequestResult(RequestInfo requestInfo, TLRPC.TL_error error) {
+        requestInfos.remove(requestInfo);
+        if (error == null) {
+            try {
+                if (downloadedBytes != requestInfo.offset) {
+                    if (state == stateDownloading) {
+                        delayedRequestInfos.add(requestInfo);
+                        requestInfo.response.disableFree = true;
+                    }
+                    return;
+                }
+
+                if (requestInfo.response.bytes == null || requestInfo.response.bytes.limit() == 0) {
+                    onFinishLoadingFile();
+                    return;
+                }
+                if (key != null) {
+                    Utilities.aesIgeEncryption(requestInfo.response.bytes.buffer, key, iv, false, true, 0, requestInfo.response.bytes.limit());
+                }
+                if (fileOutputStream != null) {
+                    FileChannel channel = fileOutputStream.getChannel();
+                    channel.write(requestInfo.response.bytes.buffer);
+                }
+                if (fiv != null) {
+                    fiv.seek(0);
+                    fiv.write(iv);
+                }
+                downloadedBytes += requestInfo.response.bytes.limit();
+                if (totalBytesCount > 0 && state == stateDownloading) {
+                    delegate.didChangedLoadProgress(FileLoadOperation.this,  Math.min(1.0f, (float)downloadedBytes / (float)totalBytesCount));
+                }
+
+                for (int a = 0; a < delayedRequestInfos.size(); a++) {
+                    RequestInfo delayedRequestInfo = delayedRequestInfos.get(a);
+                    if (downloadedBytes == delayedRequestInfo.offset) {
+                        delayedRequestInfos.remove(a);
+                        processRequestResult(delayedRequestInfo, null);
+                        delayedRequestInfo.response.disableFree = false;
+                        delayedRequestInfo.response.freeResources();
+                        delayedRequestInfo = null;
+                        break;
+                    }
+                }
+
+                if (totalBytesCount != downloadedBytes && downloadedBytes % downloadChunkSize == 0 || totalBytesCount > 0 && totalBytesCount > downloadedBytes) {
+                    startDownloadRequest();
+                } else {
+                    onFinishLoadingFile();
+                }
+            } catch (Exception e) {
+                cleanup();
+                delegate.didFailedLoadingFile(FileLoadOperation.this, 0);
+                FileLog.e("tmessages", e);
+            }
+        } else {
+            if (error.text.contains("FILE_MIGRATE_")) {
+                String errorMsg = error.text.replace("FILE_MIGRATE_", "");
+                Scanner scanner = new Scanner(errorMsg);
+                scanner.useDelimiter("");
+                Integer val;
+                try {
+                    val = scanner.nextInt();
+                } catch (Exception e) {
+                    val = null;
+                }
+                if (val == null) {
+                    cleanup();
+                    delegate.didFailedLoadingFile(FileLoadOperation.this, 0);
+                } else {
+                    datacenter_id = val;
+                    nextDownloadOffset = 0;
+                    startDownloadRequest();
+                }
+            } else if (error.text.contains("OFFSET_INVALID")) {
+                if (downloadedBytes % downloadChunkSize == 0) {
+                    try {
+                        onFinishLoadingFile();
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                        cleanup();
+                        delegate.didFailedLoadingFile(FileLoadOperation.this, 0);
+                    }
+                } else {
+                    cleanup();
+                    delegate.didFailedLoadingFile(FileLoadOperation.this, 0);
+                }
+            } else if (error.text.contains("RETRY_LIMIT")) {
+                cleanup();
+                delegate.didFailedLoadingFile(FileLoadOperation.this, 2);
+            } else {
+                if (location != null) {
+                    FileLog.e("tmessages", "" + location + " id = " + location.id + " access_hash = " + location.access_hash + " volume_id = " + location.local_id + " secret = " + location.secret);
+                }
+                cleanup();
+                delegate.didFailedLoadingFile(FileLoadOperation.this, 0);
+            }
+        }
+    }
+
+    private void startDownloadRequest() {
+        if (state != stateDownloading || totalBytesCount > 0 && nextDownloadOffset >= totalBytesCount || requestInfos.size() + delayedRequestInfos.size() >= maxDownloadRequests) {
+            return;
+        }
+        int count = 1;
+        if (totalBytesCount > 0) {
+            count = Math.max(0, maxDownloadRequests - requestInfos.size() - delayedRequestInfos.size());
+        }
+
+        for (int a = 0; a < count; a++) {
+            if (totalBytesCount > 0 && nextDownloadOffset >= totalBytesCount) {
+                break;
+            }
+            boolean isLast = totalBytesCount <= 0 || a == count - 1 || totalBytesCount > 0 && nextDownloadOffset + downloadChunkSize >= totalBytesCount;
+            TLRPC.TL_upload_getFile req = new TLRPC.TL_upload_getFile();
+            req.location = location;
+            req.offset = nextDownloadOffset;
+            req.limit = downloadChunkSize;
+            nextDownloadOffset += downloadChunkSize;
+
+            final RequestInfo requestInfo = new RequestInfo();
+            requestInfos.add(requestInfo);
+            requestInfo.offset = req.offset;
+            requestInfo.requestToken = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                @Override
+                public void run(TLObject response, TLRPC.TL_error error) {
+                    requestInfo.response = (TLRPC.TL_upload_file) response;
+                    processRequestResult(requestInfo, error);
+                }
+            }, null, true, RPCRequest.RPCRequestClassDownloadMedia | (isForceRequest ? RPCRequest.RPCRequestClassForceDownload : 0), datacenter_id, isLast);
+        }
+    }
+
+    public void setDelegate(FileLoadOperationDelegate delegate) {
+        this.delegate = delegate;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java b/TMessagesProj/src/main/java/org/tomato/messenger/FileLoader.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
rename to TMessagesProj/src/main/java/org/tomato/messenger/FileLoader.java
index 0a134c094..72255511b 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
+++ b/TMessagesProj/src/main/java/org/tomato/messenger/FileLoader.java
@@ -6,9 +6,9 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.messenger;
+package org.tomato.messenger;
 
-import org.telegram.android.AndroidUtilities;
+import org.tomato.android.AndroidUtilities;
 
 import java.io.File;
 import java.util.ArrayList;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLog.java b/TMessagesProj/src/main/java/org/tomato/messenger/FileLog.java
similarity index 98%
rename from TMessagesProj/src/main/java/org/telegram/messenger/FileLog.java
rename to TMessagesProj/src/main/java/org/tomato/messenger/FileLog.java
index ab0a52c9c..d63b663d4 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLog.java
+++ b/TMessagesProj/src/main/java/org/tomato/messenger/FileLog.java
@@ -6,13 +6,13 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.messenger;
+package org.tomato.messenger;
 
 import android.net.Uri;
 import android.util.Log;
 
-import org.telegram.android.FastDateFormat;
-import org.telegram.ui.ApplicationLoader;
+import org.tomato.android.FastDateFormat;
+import org.tomato.ui.ApplicationLoader;
 
 import java.io.File;
 import java.io.FileOutputStream;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java b/TMessagesProj/src/main/java/org/tomato/messenger/FileUploadOperation.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
rename to TMessagesProj/src/main/java/org/tomato/messenger/FileUploadOperation.java
index 96e6c7d68..e8f6a0262 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
+++ b/TMessagesProj/src/main/java/org/tomato/messenger/FileUploadOperation.java
@@ -6,12 +6,12 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.messenger;
+package org.tomato.messenger;
 
 import android.app.Activity;
 import android.content.SharedPreferences;
 
-import org.telegram.ui.ApplicationLoader;
+import org.tomato.ui.ApplicationLoader;
 
 import java.io.File;
 import java.io.FileInputStream;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java b/TMessagesProj/src/main/java/org/tomato/messenger/HandshakeAction.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java
rename to TMessagesProj/src/main/java/org/tomato/messenger/HandshakeAction.java
index 770dbd6f3..c7cbda0fb 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java
+++ b/TMessagesProj/src/main/java/org/tomato/messenger/HandshakeAction.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.messenger;
+package org.tomato.messenger;
 
 import java.math.BigInteger;
 import java.nio.ByteBuffer;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessageKeyData.java b/TMessagesProj/src/main/java/org/tomato/messenger/MessageKeyData.java
similarity index 90%
rename from TMessagesProj/src/main/java/org/telegram/messenger/MessageKeyData.java
rename to TMessagesProj/src/main/java/org/tomato/messenger/MessageKeyData.java
index 6aef7a298..813f7ef4f 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessageKeyData.java
+++ b/TMessagesProj/src/main/java/org/tomato/messenger/MessageKeyData.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.messenger;
+package org.tomato.messenger;
 
 public class MessageKeyData {
     public byte[] aesKey;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/NetworkMessage.java b/TMessagesProj/src/main/java/org/tomato/messenger/NetworkMessage.java
similarity index 92%
rename from TMessagesProj/src/main/java/org/telegram/messenger/NetworkMessage.java
rename to TMessagesProj/src/main/java/org/tomato/messenger/NetworkMessage.java
index a44ef7664..65ffdc3d9 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/NetworkMessage.java
+++ b/TMessagesProj/src/main/java/org/tomato/messenger/NetworkMessage.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.messenger;
+package org.tomato.messenger;
 
 public class NetworkMessage {
     public TLRPC.TL_protoMessage protoMessage;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/RPCRequest.java b/TMessagesProj/src/main/java/org/tomato/messenger/RPCRequest.java
similarity index 98%
rename from TMessagesProj/src/main/java/org/telegram/messenger/RPCRequest.java
rename to TMessagesProj/src/main/java/org/tomato/messenger/RPCRequest.java
index 84fa468cb..cea48bc14 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/RPCRequest.java
+++ b/TMessagesProj/src/main/java/org/tomato/messenger/RPCRequest.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.messenger;
+package org.tomato.messenger;
 
 import java.util.ArrayList;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/SerializedData.java b/TMessagesProj/src/main/java/org/tomato/messenger/SerializedData.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/messenger/SerializedData.java
rename to TMessagesProj/src/main/java/org/tomato/messenger/SerializedData.java
index 59b59e6d5..2208a23f9 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/SerializedData.java
+++ b/TMessagesProj/src/main/java/org/tomato/messenger/SerializedData.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.messenger;
+package org.tomato.messenger;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ServerSalt.java b/TMessagesProj/src/main/java/org/tomato/messenger/ServerSalt.java
similarity index 91%
rename from TMessagesProj/src/main/java/org/telegram/messenger/ServerSalt.java
rename to TMessagesProj/src/main/java/org/tomato/messenger/ServerSalt.java
index 33ca53ea2..beada520d 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ServerSalt.java
+++ b/TMessagesProj/src/main/java/org/tomato/messenger/ServerSalt.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.messenger;
+package org.tomato.messenger;
 
 public class ServerSalt {
     public int validSince;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java b/TMessagesProj/src/main/java/org/tomato/messenger/TLClassStore.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java
rename to TMessagesProj/src/main/java/org/tomato/messenger/TLClassStore.java
index aa690ca1e..1e19f485a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TLClassStore.java
+++ b/TMessagesProj/src/main/java/org/tomato/messenger/TLClassStore.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.messenger;
+package org.tomato.messenger;
 
 import java.util.HashMap;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TLObject.java b/TMessagesProj/src/main/java/org/tomato/messenger/TLObject.java
similarity index 96%
rename from TMessagesProj/src/main/java/org/telegram/messenger/TLObject.java
rename to TMessagesProj/src/main/java/org/tomato/messenger/TLObject.java
index 8ee8bc002..25fe7ec36 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TLObject.java
+++ b/TMessagesProj/src/main/java/org/tomato/messenger/TLObject.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.messenger;
+package org.tomato.messenger;
 
 public class TLObject {
     public boolean disableFree = false;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java b/TMessagesProj/src/main/java/org/tomato/messenger/TLRPC.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
rename to TMessagesProj/src/main/java/org/tomato/messenger/TLRPC.java
index af8559cb4..e60ef2aa4 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
+++ b/TMessagesProj/src/main/java/org/tomato/messenger/TLRPC.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.messenger;
+package org.tomato.messenger;
 
 import java.util.ArrayList;
 import java.util.Locale;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java b/TMessagesProj/src/main/java/org/tomato/messenger/TcpConnection.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java
rename to TMessagesProj/src/main/java/org/tomato/messenger/TcpConnection.java
index a2afb811c..72734f79e 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java
+++ b/TMessagesProj/src/main/java/org/tomato/messenger/TcpConnection.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.messenger;
+package org.tomato.messenger;
 
 import java.io.IOException;
 import java.net.InetSocketAddress;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java b/TMessagesProj/src/main/java/org/tomato/messenger/UserConfig.java
similarity index 98%
rename from TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
rename to TMessagesProj/src/main/java/org/tomato/messenger/UserConfig.java
index f27723f54..2c3ea2135 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/UserConfig.java
+++ b/TMessagesProj/src/main/java/org/tomato/messenger/UserConfig.java
@@ -6,14 +6,14 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.messenger;
+package org.tomato.messenger;
 
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.util.Base64;
 
-import org.telegram.android.MessagesStorage;
-import org.telegram.ui.ApplicationLoader;
+import org.tomato.android.MessagesStorage;
+import org.tomato.ui.ApplicationLoader;
 
 import java.io.File;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java b/TMessagesProj/src/main/java/org/tomato/messenger/Utilities.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
rename to TMessagesProj/src/main/java/org/tomato/messenger/Utilities.java
index 5fbf42267..f08ed495c 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
+++ b/TMessagesProj/src/main/java/org/tomato/messenger/Utilities.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.messenger;
+package org.tomato.messenger;
 
 import android.app.Activity;
 import android.content.ContentUris;
@@ -27,7 +27,7 @@
 import net.hockeyapp.android.CrashManagerListener;
 import net.hockeyapp.android.UpdateManager;
 
-import org.telegram.ui.ApplicationLoader;
+import org.tomato.ui.ApplicationLoader;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseContactsSearchAdapter.java b/TMessagesProj/src/main/java/org/tomato/ui/Adapters/BaseContactsSearchAdapter.java
similarity index 89%
rename from TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseContactsSearchAdapter.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Adapters/BaseContactsSearchAdapter.java
index e639fb166..b960c67ad 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseContactsSearchAdapter.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Adapters/BaseContactsSearchAdapter.java
@@ -6,13 +6,13 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.ui.Adapters;
+package org.tomato.ui.Adapters;
 
-import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.RPCRequest;
+import org.tomato.messenger.TLObject;
+import org.tomato.messenger.TLRPC;
 
 import java.util.ArrayList;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseFragmentAdapter.java b/TMessagesProj/src/main/java/org/tomato/ui/Adapters/BaseFragmentAdapter.java
similarity index 96%
rename from TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseFragmentAdapter.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Adapters/BaseFragmentAdapter.java
index 184e06a1e..3ca7962b8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/BaseFragmentAdapter.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Adapters/BaseFragmentAdapter.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.ui.Adapters;
+package org.tomato.ui.Adapters;
 
 import android.database.DataSetObserver;
 import android.view.View;
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/Adapters/ContactsActivityAdapter.java b/TMessagesProj/src/main/java/org/tomato/ui/Adapters/ContactsActivityAdapter.java
new file mode 100644
index 000000000..8074e115e
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Adapters/ContactsActivityAdapter.java
@@ -0,0 +1,229 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.tomato.ui.Adapters;
+
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import org.tomato.android.ContactsController;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MessagesController;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.ui.Cells.ChatOrUserCell;
+import org.tomato.ui.Views.SectionedBaseAdapter;
+import org.tomato.ui.Views.SettingsSectionLayout;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+
+public class ContactsActivityAdapter extends SectionedBaseAdapter {
+    private Context mContext;
+    private boolean onlyUsers;
+    private boolean usersAsSections;
+    private HashMap<Integer, TLRPC.User> ignoreUsers;
+
+    public ContactsActivityAdapter(Context context, boolean arg1, boolean arg2, HashMap<Integer, TLRPC.User> arg3) {
+        mContext = context;
+        onlyUsers = arg1;
+        usersAsSections = arg2;
+        ignoreUsers = arg3;
+    }
+
+    @Override
+    public Object getItem(int section, int position) {
+        return null;
+    }
+
+    @Override
+    public long getItemId(int section, int position) {
+        return 0;
+    }
+
+    @Override
+    public int getSectionCount() {
+        int count = 0;
+        if (usersAsSections) {
+            count += ContactsController.getInstance().sortedUsersSectionsArray.size();
+        } else {
+            count++;
+        }
+        if (!onlyUsers) {
+            count += ContactsController.getInstance().sortedContactsSectionsArray.size();
+        }
+        return count;
+    }
+
+    @Override
+    public int getCountForSection(int section) {
+        if (usersAsSections) {
+            if (section < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
+                ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
+                return arr.size();
+            }
+        } else {
+            if (section == 0) {
+                return ContactsController.getInstance().contacts.size() + 1;
+            }
+        }
+        ArrayList<ContactsController.Contact> arr = ContactsController.getInstance().contactsSectionsDict.get(ContactsController.getInstance().sortedContactsSectionsArray.get(section - 1));
+        return arr.size();
+    }
+
+    @Override
+    public View getItemView(int section, int position, View convertView, ViewGroup parent) {
+
+        TLRPC.User user = null;
+        int count = 0;
+        if (usersAsSections) {
+            if (section < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
+                ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
+                user = MessagesController.getInstance().getUser(arr.get(position).user_id);
+                count = arr.size();
+            }
+        } else {
+            if (section == 0) {
+                if (position == 0) {
+                    if (convertView == null) {
+                        LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                        convertView = li.inflate(R.layout.contacts_invite_row_layout, parent, false);
+                        TextView textView = (TextView)convertView.findViewById(R.id.messages_list_row_name);
+                        textView.setText(LocaleController.getString("InviteFriends", R.string.InviteFriends));
+                    }
+                    View divider = convertView.findViewById(R.id.settings_row_divider);
+                    if (ContactsController.getInstance().contacts.isEmpty()) {
+                        divider.setVisibility(View.INVISIBLE);
+                    } else {
+                        divider.setVisibility(View.VISIBLE);
+                    }
+                    return convertView;
+                }
+                user = MessagesController.getInstance().getUser(ContactsController.getInstance().contacts.get(position - 1).user_id);
+                count = ContactsController.getInstance().contacts.size();
+            }
+        }
+        if (user != null) {
+            if (convertView == null) {
+                convertView = new ChatOrUserCell(mContext);
+                ((ChatOrUserCell)convertView).usePadding = false;
+            }
+
+            ((ChatOrUserCell)convertView).setData(user, null, null, null, null);
+
+            if (ignoreUsers != null) {
+                if (ignoreUsers.containsKey(user.id)) {
+                    ((ChatOrUserCell)convertView).drawAlpha = 0.5f;
+                } else {
+                    ((ChatOrUserCell)convertView).drawAlpha = 1.0f;
+                }
+            }
+
+            ((ChatOrUserCell) convertView).useSeparator = position != count - 1;
+
+            return convertView;
+        }
+
+        TextView textView;
+        if (convertView == null) {
+            LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+            convertView = li.inflate(R.layout.settings_row_button_layout, parent, false);
+            textView = (TextView)convertView.findViewById(R.id.settings_row_text);
+        } else {
+            textView = (TextView)convertView.findViewById(R.id.settings_row_text);
+        }
+
+        View divider = convertView.findViewById(R.id.settings_row_divider);
+        ArrayList<ContactsController.Contact> arr = ContactsController.getInstance().contactsSectionsDict.get(ContactsController.getInstance().sortedContactsSectionsArray.get(section - 1));
+        ContactsController.Contact contact = arr.get(position);
+        if (divider != null) {
+            if (position == arr.size() - 1) {
+                divider.setVisibility(View.INVISIBLE);
+            } else {
+                divider.setVisibility(View.VISIBLE);
+            }
+        }
+        if (contact.first_name != null && contact.last_name != null) {
+            textView.setText(contact.first_name + " " + contact.last_name);
+        } else if (contact.first_name != null && contact.last_name == null) {
+            textView.setText(contact.first_name);
+        } else {
+            textView.setText(contact.last_name);
+        }
+        return convertView;
+    }
+
+    @Override
+    public int getItemViewType(int section, int position) {
+        if (usersAsSections) {
+            if (section < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
+                return 0;
+            }
+        } else if (section == 0) {
+            if (position == 0) {
+                return 2;
+            }
+            return 0;
+        }
+        return 1;
+    }
+
+    @Override
+    public int getItemViewTypeCount() {
+        return 3;
+    }
+
+    @Override
+    public int getSectionHeaderViewType(int section) {
+        if (usersAsSections) {
+            if (section < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
+                return 1;
+            }
+        } else if (section == 0) {
+            return 0;
+        }
+        return 1;
+    }
+
+    @Override
+    public int getSectionHeaderViewTypeCount() {
+        return 2;
+    }
+
+    @Override
+    public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
+        if (usersAsSections) {
+            if (section < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
+                if (convertView == null) {
+                    convertView = new SettingsSectionLayout(mContext);
+                    convertView.setBackgroundColor(0xffffffff);
+                }
+                ((SettingsSectionLayout) convertView).setText(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
+                return convertView;
+            }
+        } else {
+            if (section == 0) {
+                if (convertView == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    convertView = li.inflate(R.layout.empty_layout, parent, false);
+                }
+                return convertView;
+            }
+        }
+
+        if (convertView == null) {
+            convertView = new SettingsSectionLayout(mContext);
+            convertView.setBackgroundColor(0xffffffff);
+        }
+        ((SettingsSectionLayout) convertView).setText(ContactsController.getInstance().sortedContactsSectionsArray.get(section - 1));
+        return convertView;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/Adapters/ContactsActivitySearchAdapter.java b/TMessagesProj/src/main/java/org/tomato/ui/Adapters/ContactsActivitySearchAdapter.java
new file mode 100644
index 000000000..36e3d2aef
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Adapters/ContactsActivitySearchAdapter.java
@@ -0,0 +1,262 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.tomato.ui.Adapters;
+
+import android.content.Context;
+import android.text.Html;
+import android.view.View;
+import android.view.ViewGroup;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.ContactsController;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MessagesController;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
+import org.tomato.messenger.Utilities;
+import org.tomato.ui.Cells.ChatOrUserCell;
+import org.tomato.ui.Views.SettingsSectionLayout;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Timer;
+import java.util.TimerTask;
+
+public class ContactsActivitySearchAdapter extends BaseContactsSearchAdapter {
+    private Context mContext;
+    private HashMap<Integer, TLRPC.User> ignoreUsers;
+    private ArrayList<TLRPC.User> searchResult;
+    private ArrayList<CharSequence> searchResultNames;
+    private Timer searchTimer;
+    private boolean allowUsernameSearch;
+
+    public ContactsActivitySearchAdapter(Context context, HashMap<Integer, TLRPC.User> arg1, boolean usernameSearch) {
+        mContext = context;
+        ignoreUsers = arg1;
+        allowUsernameSearch = usernameSearch;
+    }
+
+    public void searchDialogs(final String query) {
+        if (query == null) {
+            searchResult.clear();
+            searchResultNames.clear();
+            if (allowUsernameSearch) {
+                queryServerSearch(null);
+            }
+            notifyDataSetChanged();
+        } else {
+            try {
+                if (searchTimer != null) {
+                    searchTimer.cancel();
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            searchTimer = new Timer();
+            searchTimer.schedule(new TimerTask() {
+                @Override
+                public void run() {
+                    try {
+                        searchTimer.cancel();
+                        searchTimer = null;
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                    processSearch(query);
+                }
+            }, 200, 300);
+        }
+    }
+
+    private void processSearch(final String query) {
+        AndroidUtilities.RunOnUIThread(new Runnable() {
+            @Override
+            public void run() {
+                if (allowUsernameSearch) {
+                    queryServerSearch(query);
+                }
+                final ArrayList<TLRPC.TL_contact> contactsCopy = new ArrayList<TLRPC.TL_contact>();
+                contactsCopy.addAll(ContactsController.getInstance().contacts);
+                Utilities.searchQueue.postRunnable(new Runnable() {
+                    @Override
+                    public void run() {
+                        String q = query.trim().toLowerCase();
+                        if (q.length() == 0) {
+                            updateSearchResults(new ArrayList<TLRPC.User>(), new ArrayList<CharSequence>());
+                            return;
+                        }
+                        long time = System.currentTimeMillis();
+                        ArrayList<TLRPC.User> resultArray = new ArrayList<TLRPC.User>();
+                        ArrayList<CharSequence> resultArrayNames = new ArrayList<CharSequence>();
+
+                        for (TLRPC.TL_contact contact : contactsCopy) {
+                            TLRPC.User user = MessagesController.getInstance().getUser(contact.user_id);
+                            if (user.id == UserConfig.getClientUserId()) {
+                                continue;
+                            }
+
+                            String name = ContactsController.formatName(user.first_name, user.last_name).toLowerCase();
+
+                            int found = 0;
+                            if (name.startsWith(q) || name.contains(" " + q)) {
+                                found = 1;
+                            } else if (user.username != null && user.username.startsWith(q)) {
+                                found = 2;
+                            }
+
+                            if (found != 0) {
+                                if (found == 1) {
+                                    resultArrayNames.add(Utilities.generateSearchName(user.first_name, user.last_name, q));
+                                } else {
+                                    resultArrayNames.add(Utilities.generateSearchName("@" + user.username, null, "@" + q));
+                                }
+                                resultArray.add(user);
+                            }
+                        }
+
+                        updateSearchResults(resultArray, resultArrayNames);
+                    }
+                });
+            }
+        });
+    }
+
+    private void updateSearchResults(final ArrayList<TLRPC.User> users, final ArrayList<CharSequence> names) {
+        AndroidUtilities.RunOnUIThread(new Runnable() {
+            @Override
+            public void run() {
+                searchResult = users;
+                searchResultNames = names;
+                notifyDataSetChanged();
+            }
+        });
+    }
+
+    @Override
+    public boolean areAllItemsEnabled() {
+        return false;
+    }
+
+    @Override
+    public boolean isEnabled(int i) {
+        return i != searchResult.size();
+    }
+
+    @Override
+    public int getCount() {
+        int count = searchResult.size();
+        int globalCount = globalSearch.size();
+        if (globalCount != 0) {
+            count += globalCount + 1;
+        }
+        return count;
+    }
+
+    public boolean isGlobalSearch(int i) {
+        int localCount = searchResult.size();
+        int globalCount = globalSearch.size();
+        if (i >= 0 && i < localCount) {
+            return false;
+        } else if (i > localCount && i <= globalCount + localCount) {
+            return true;
+        }
+        return false;
+    }
+
+    @Override
+    public TLRPC.User getItem(int i) {
+        int localCount = searchResult.size();
+        int globalCount = globalSearch.size();
+        if (i >= 0 && i < localCount) {
+            return searchResult.get(i);
+        } else if (i > localCount && i <= globalCount + localCount) {
+            return globalSearch.get(i - localCount - 1);
+        }
+        return null;
+    }
+
+    @Override
+    public long getItemId(int i) {
+        return i;
+    }
+
+    @Override
+    public boolean hasStableIds() {
+        return true;
+    }
+
+    @Override
+    public View getView(int i, View view, ViewGroup viewGroup) {
+        if (i == searchResult.size()) {
+            if (view == null) {
+                view = new SettingsSectionLayout(mContext);
+                ((SettingsSectionLayout) view).setText(LocaleController.getString("GlobalSearch", R.string.GlobalSearch));
+            }
+        } else {
+            if (view == null) {
+                view = new ChatOrUserCell(mContext);
+                ((ChatOrUserCell) view).usePadding = false;
+            }
+
+            ((ChatOrUserCell) view).useSeparator = (i != getCount() - 1 && i != searchResult.size() - 1);
+            TLRPC.User user = getItem(i);
+            if (user != null) {
+                CharSequence username = null;
+                CharSequence name = null;
+                if (i < searchResult.size()) {
+                    name = searchResultNames.get(i);
+                    if (name != null && user != null && user.username != null && user.username.length() > 0) {
+                        if (name.toString().startsWith("@" + user.username)) {
+                            username = name;
+                            name = null;
+                        }
+                    }
+                } else if (i > searchResult.size() && user.username != null) {
+                    try {
+                        username = Html.fromHtml(String.format("<font color=\"#357aa8\">@%s</font>%s", user.username.substring(0, lastFoundUsername.length()), user.username.substring(lastFoundUsername.length())));
+                    } catch (Exception e) {
+                        username = user.username;
+                        FileLog.e("tmessages", e);
+                    }
+                }
+
+                ((ChatOrUserCell) view).setData(user, null, null, name, username);
+
+                if (ignoreUsers != null) {
+                    if (ignoreUsers.containsKey(user.id)) {
+                        ((ChatOrUserCell) view).drawAlpha = 0.5f;
+                    } else {
+                        ((ChatOrUserCell) view).drawAlpha = 1.0f;
+                    }
+                }
+            }
+        }
+        return view;
+    }
+
+    @Override
+    public int getItemViewType(int i) {
+        if (i == searchResult.size()) {
+            return 1;
+        }
+        return 0;
+    }
+
+    @Override
+    public int getViewTypeCount() {
+        return 2;
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return searchResult.isEmpty() && globalSearch.isEmpty();
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/ApplicationLoader.java b/TMessagesProj/src/main/java/org/tomato/ui/ApplicationLoader.java
new file mode 100644
index 000000000..fb5651b94
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/ApplicationLoader.java
@@ -0,0 +1,304 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.app.Activity;
+import android.app.AlarmManager;
+import android.app.Application;
+import android.app.PendingIntent;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.SharedPreferences;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
+import android.content.res.Configuration;
+import android.graphics.drawable.Drawable;
+import android.os.AsyncTask;
+import android.os.Handler;
+import android.os.PowerManager;
+
+import com.google.android.gms.common.ConnectionResult;
+import com.google.android.gms.common.GooglePlayServicesUtil;
+import com.google.android.gms.gcm.GoogleCloudMessaging;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.ContactsController;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MediaController;
+import org.tomato.android.MessagesController;
+import org.tomato.android.NativeLoader;
+import org.tomato.android.NotificationsService;
+import org.tomato.android.ScreenReceiver;
+import org.tomato.android.SendMessagesHelper;
+import org.tomato.messenger.BuildVars;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.UserConfig;
+import org.tomato.messenger.Utilities;
+
+import java.util.concurrent.atomic.AtomicInteger;
+
+public class ApplicationLoader extends Application {
+    private GoogleCloudMessaging gcm;
+    private AtomicInteger msgId = new AtomicInteger();
+    private String regid;
+    public static int balloonType;
+    public static final String BALLON_TYPE = "ballon_type";
+    public static final String ACTIONBAR_STYLE = "actionbar_style";
+    public static final String ACTIONBAR_COLOR = "actionbar_color";
+    public static int actionBarStyle;
+    public static int actionbarColor;
+    public static final String EXTRA_MESSAGE = "message";
+    public static final String PROPERTY_REG_ID = "registration_id";
+    private static final String PROPERTY_APP_VERSION = "appVersion";
+    private static final int PLAY_SERVICES_RESOLUTION_REQUEST = 9000;
+    public static Drawable cachedWallpaper = null;
+
+    public static volatile Context applicationContext = null;
+    public static volatile Handler applicationHandler = null;
+    private static volatile boolean applicationInited = false;
+
+    public static volatile boolean isScreenOn = false;
+    public static volatile boolean mainInterfacePaused = true;
+
+    public static void postInitApplication() {
+        if (applicationInited) {
+            return;
+        }
+
+        applicationInited = true;
+
+        try {
+            LocaleController.getInstance();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+        try {
+            final IntentFilter filter = new IntentFilter(Intent.ACTION_SCREEN_ON);
+            filter.addAction(Intent.ACTION_SCREEN_OFF);
+            final BroadcastReceiver mReceiver = new ScreenReceiver();
+            applicationContext.registerReceiver(mReceiver, filter);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+        try {
+            PowerManager pm = (PowerManager)ApplicationLoader.applicationContext.getSystemService(Context.POWER_SERVICE);
+            isScreenOn = pm.isScreenOn();
+            FileLog.e("tmessages", "screen state = " + isScreenOn);
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+
+        UserConfig.loadConfig();
+        if (UserConfig.getCurrentUser() != null) {
+            MessagesController.getInstance().putUser(UserConfig.getCurrentUser(), true);
+            ConnectionsManager.getInstance().applyCountryPortNumber(UserConfig.getCurrentUser().phone);
+            ConnectionsManager.getInstance().initPushConnection();
+            MessagesController.getInstance().getBlockedUsers(true);
+            SendMessagesHelper.getInstance().checkUnsentMessages();
+        }
+
+        ApplicationLoader app = (ApplicationLoader)ApplicationLoader.applicationContext;
+        app.initPlayServices();
+        FileLog.e("tmessages", "app initied");
+
+        ContactsController.getInstance().checkAppAccount();
+        MediaController.getInstance();
+    }
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+
+        applicationContext = getApplicationContext();
+        balloonType = applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE).getInt(BALLON_TYPE, AndroidUtilities.ZALO_BUBBLE_STYLE);
+        actionBarStyle = applicationContext.getSharedPreferences("mainconfig",
+                            Activity.MODE_PRIVATE).getInt(ACTIONBAR_STYLE, R.style.ActionBarHike_Transparent_TMessages_Start);
+        actionbarColor = applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE).getInt(ACTIONBAR_COLOR, R.color.hike_header);
+        NativeLoader.initNativeLibs(ApplicationLoader.applicationContext);
+
+        applicationHandler = new Handler(applicationContext.getMainLooper());
+
+        java.lang.System.setProperty("java.net.preferIPv4Stack", "true");
+        java.lang.System.setProperty("java.net.preferIPv6Addresses", "false");
+
+        startPushService();
+    }
+
+    public static void startPushService() {
+        SharedPreferences preferences = applicationContext.getSharedPreferences("Notifications", MODE_PRIVATE);
+
+        if (preferences.getBoolean("pushService", true)) {
+            applicationContext.startService(new Intent(applicationContext, NotificationsService.class));
+
+            if (android.os.Build.VERSION.SDK_INT >= 19) {
+//                Calendar cal = Calendar.getInstance();
+//                PendingIntent pintent = PendingIntent.getService(applicationContext, 0, new Intent(applicationContext, NotificationsService.class), 0);
+//                AlarmManager alarm = (AlarmManager) applicationContext.getSystemService(Context.ALARM_SERVICE);
+//                alarm.setRepeating(AlarmManager.RTC_WAKEUP, cal.getTimeInMillis(), 30000, pintent);
+
+                PendingIntent pintent = PendingIntent.getService(applicationContext, 0, new Intent(applicationContext, NotificationsService.class), 0);
+                AlarmManager alarm = (AlarmManager)applicationContext.getSystemService(Context.ALARM_SERVICE);
+                alarm.cancel(pintent);
+            }
+        } else {
+            stopPushService();
+        }
+    }
+
+    public static void stopPushService() {
+        applicationContext.stopService(new Intent(applicationContext, NotificationsService.class));
+
+        PendingIntent pintent = PendingIntent.getService(applicationContext, 0, new Intent(applicationContext, NotificationsService.class), 0);
+        AlarmManager alarm = (AlarmManager)applicationContext.getSystemService(Context.ALARM_SERVICE);
+        alarm.cancel(pintent);
+    }
+
+    @Override
+    public void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        try {
+            LocaleController.getInstance().onDeviceConfigurationChange(newConfig);
+            AndroidUtilities.checkDisplaySize();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    private void initPlayServices() {
+        if (checkPlayServices()) {
+            gcm = GoogleCloudMessaging.getInstance(this);
+            regid = getRegistrationId();
+
+            if (regid.length() == 0) {
+                registerInBackground();
+            } else {
+                sendRegistrationIdToBackend(false);
+            }
+        } else {
+            FileLog.d("tmessages", "No valid Google Play Services APK found.");
+        }
+    }
+
+    private boolean checkPlayServices() {
+        int resultCode = GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);
+        return resultCode == ConnectionResult.SUCCESS;
+        /*if (resultCode != ConnectionResult.SUCCESS) {
+            if (GooglePlayServicesUtil.isUserRecoverableError(resultCode)) {
+                GooglePlayServicesUtil.getErrorDialog(resultCode, this, PLAY_SERVICES_RESOLUTION_REQUEST).show();
+            } else {
+                Log.i("tmessages", "This device is not supported.");
+            }
+            return false;
+        }
+        return true;*/
+    }
+
+    private String getRegistrationId() {
+        final SharedPreferences prefs = getGCMPreferences(applicationContext);
+        String registrationId = prefs.getString(PROPERTY_REG_ID, "");
+        if (registrationId.length() == 0) {
+            FileLog.d("tmessages", "Registration not found.");
+            return "";
+        }
+        int registeredVersion = prefs.getInt(PROPERTY_APP_VERSION, Integer.MIN_VALUE);
+        int currentVersion = getAppVersion();
+        if (registeredVersion != currentVersion) {
+            FileLog.d("tmessages", "App version changed.");
+            return "";
+        }
+        return registrationId;
+    }
+
+    private SharedPreferences getGCMPreferences(Context context) {
+        return getSharedPreferences(ApplicationLoader.class.getSimpleName(), Context.MODE_PRIVATE);
+    }
+
+    public static int getAppVersion() {
+        try {
+            PackageInfo packageInfo = applicationContext.getPackageManager().getPackageInfo(applicationContext.getPackageName(), 0);
+            return packageInfo.versionCode;
+        } catch (PackageManager.NameNotFoundException e) {
+            throw new RuntimeException("Could not get package name: " + e);
+        }
+    }
+
+    private void registerInBackground() {
+        AsyncTask<String, String, Boolean> task = new AsyncTask<String, String, Boolean>() {
+            @Override
+            protected Boolean doInBackground(String... objects) {
+                if (gcm == null) {
+                    gcm = GoogleCloudMessaging.getInstance(applicationContext);
+                }
+                int count = 0;
+                while (count < 1000) {
+                    try {
+                        count++;
+                        regid = gcm.register(BuildVars.GCM_SENDER_ID);
+                        sendRegistrationIdToBackend(true);
+                        storeRegistrationId(applicationContext, regid);
+                        return true;
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                    try {
+                        if (count % 20 == 0) {
+                            Thread.sleep(60000 * 30);
+                        } else {
+                            Thread.sleep(5000);
+                        }
+                    } catch (InterruptedException e) {
+                        FileLog.e("tmessages", e);
+                    }
+                }
+                return false;
+            }
+        };
+
+        if (android.os.Build.VERSION.SDK_INT >= 11) {
+            task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, null, null, null);
+        } else {
+            task.execute(null, null, null);
+        }
+    }
+
+    private void sendRegistrationIdToBackend(final boolean isNew) {
+        Utilities.stageQueue.postRunnable(new Runnable() {
+            @Override
+            public void run() {
+                UserConfig.pushString = regid;
+                UserConfig.registeredForPush = !isNew;
+                UserConfig.saveConfig(false);
+                if (UserConfig.getClientUserId() != 0) {
+                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            MessagesController.getInstance().registerForPush(regid);
+                        }
+                    });
+                }
+            }
+        });
+    }
+
+    private void storeRegistrationId(Context context, String regId) {
+        final SharedPreferences prefs = getGCMPreferences(context);
+        int appVersion = getAppVersion();
+        FileLog.e("tmessages", "Saving regId on app version " + appVersion);
+        SharedPreferences.Editor editor = prefs.edit();
+        editor.putString(PROPERTY_REG_ID, regId);
+        editor.putInt(PROPERTY_APP_VERSION, appVersion);
+        editor.commit();
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/BaseCell.java b/TMessagesProj/src/main/java/org/tomato/ui/Cells/BaseCell.java
similarity index 98%
rename from TMessagesProj/src/main/java/org/telegram/ui/Cells/BaseCell.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Cells/BaseCell.java
index c0170b66f..f0d92e5d5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/BaseCell.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Cells/BaseCell.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.ui.Cells;
+package org.tomato.ui.Cells;
 
 import android.content.Context;
 import android.graphics.drawable.Drawable;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java b/TMessagesProj/src/main/java/org/tomato/ui/Cells/ChatActionCell.java
similarity index 96%
rename from TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Cells/ChatActionCell.java
index 02849344c..4c2a106d1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatActionCell.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Cells/ChatActionCell.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.ui.Cells;
+package org.tomato.ui.Cells;
 
 import android.content.Context;
 import android.graphics.Bitmap;
@@ -21,16 +21,16 @@
 import android.view.MotionEvent;
 import android.view.SoundEffectConstants;
 
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ImageReceiver;
-import org.telegram.android.MessageObject;
-import org.telegram.android.MessagesController;
-import org.telegram.android.PhotoObject;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.ui.PhotoViewer;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.ImageReceiver;
+import org.tomato.android.MessageObject;
+import org.tomato.android.MessagesController;
+import org.tomato.android.PhotoObject;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
+import org.tomato.ui.PhotoViewer;
 
 public class ChatActionCell extends BaseCell {
 
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/Cells/ChatAudioCell.java b/TMessagesProj/src/main/java/org/tomato/ui/Cells/ChatAudioCell.java
new file mode 100644
index 000000000..fb3d5a48a
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Cells/ChatAudioCell.java
@@ -0,0 +1,428 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.tomato.ui.Cells;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.drawable.Drawable;
+import android.text.Layout;
+import android.text.StaticLayout;
+import android.text.TextPaint;
+import android.view.MotionEvent;
+import android.view.SoundEffectConstants;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.ImageReceiver;
+import org.tomato.android.MediaController;
+import org.tomato.android.MessageObject;
+import org.tomato.android.MessagesController;
+import org.tomato.messenger.FileLoader;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.ui.Views.ProgressView;
+import org.tomato.ui.Views.SeekBar;
+
+import java.io.File;
+
+public class ChatAudioCell extends ChatBaseCell implements SeekBar.SeekBarDelegate, MediaController.FileDownloadProgressListener {
+
+    private static Drawable[][] statesDrawable = new Drawable[8][2];
+    private static TextPaint timePaint;
+
+    private ImageReceiver avatarImage;
+    private boolean needAvatarImage = false;
+    private SeekBar seekBar;
+    private ProgressView progressView;
+    private int seekBarX;
+    private int seekBarY;
+
+    private int buttonState = 0;
+    private int buttonX;
+    private int buttonY;
+    private boolean buttonPressed = false;
+
+    private boolean avatarPressed = false;
+
+    private StaticLayout timeLayout;
+    private int timeX;
+    private String lastTimeString = null;
+
+    private int TAG;
+
+    public TLRPC.User audioUser;
+    private TLRPC.FileLocation currentPhoto;
+
+    public ChatAudioCell(Context context) {
+        super(context);
+        TAG = MediaController.getInstance().generateObserverTag();
+
+        avatarImage = new ImageReceiver(this);
+        seekBar = new SeekBar(context);
+        seekBar.delegate = this;
+        progressView = new ProgressView();
+
+        if (timePaint == null) {
+            statesDrawable[0][0] = getResources().getDrawable(R.drawable.play1);
+            statesDrawable[0][1] = getResources().getDrawable(R.drawable.play1_pressed);
+            statesDrawable[1][0] = getResources().getDrawable(R.drawable.pause1);
+            statesDrawable[1][1] = getResources().getDrawable(R.drawable.pause1_pressed);
+            statesDrawable[2][0] = getResources().getDrawable(R.drawable.audioload1);
+            statesDrawable[2][1] = getResources().getDrawable(R.drawable.audioload1_pressed);
+            statesDrawable[3][0] = getResources().getDrawable(R.drawable.audiocancel1);
+            statesDrawable[3][1] = getResources().getDrawable(R.drawable.audiocancel1_pressed);
+
+            statesDrawable[4][0] = getResources().getDrawable(R.drawable.play2);
+            statesDrawable[4][1] = getResources().getDrawable(R.drawable.play2_pressed);
+            statesDrawable[5][0] = getResources().getDrawable(R.drawable.pause2);
+            statesDrawable[5][1] = getResources().getDrawable(R.drawable.pause2_pressed);
+            statesDrawable[6][0] = getResources().getDrawable(R.drawable.audioload2);
+            statesDrawable[6][1] = getResources().getDrawable(R.drawable.audioload2_pressed);
+            statesDrawable[7][0] = getResources().getDrawable(R.drawable.audiocancel2);
+            statesDrawable[7][1] = getResources().getDrawable(R.drawable.audiocancel2_pressed);
+
+            timePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            timePaint.setTextSize(AndroidUtilities.dp(12));
+        }
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        if (avatarImage != null) {
+            avatarImage.clearImage();
+            currentPhoto = null;
+        }
+        MediaController.getInstance().removeLoadingFileObserver(this);
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        float x = event.getX();
+        float y = event.getY();
+        boolean result = seekBar.onTouch(event.getAction(), event.getX() - seekBarX, event.getY() - seekBarY);
+        if (result) {
+            if (event.getAction() == MotionEvent.ACTION_DOWN) {
+                getParent().requestDisallowInterceptTouchEvent(true);
+            }
+            invalidate();
+        } else {
+            int side = AndroidUtilities.dp(36);
+            if (event.getAction() == MotionEvent.ACTION_DOWN) {
+                if (x >= buttonX && x <= buttonX + side && y >= buttonY && y <= buttonY + side) {
+                    buttonPressed = true;
+                    invalidate();
+                    result = true;
+                } else if (needAvatarImage && avatarImage.isInsideImage(x, y)) {
+                    avatarPressed = true;
+                    result = true;
+                }
+            } else if (buttonPressed) {
+                if (event.getAction() == MotionEvent.ACTION_UP) {
+                    buttonPressed = false;
+                    playSoundEffect(SoundEffectConstants.CLICK);
+                    didPressedButton();
+                    invalidate();
+                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
+                    buttonPressed = false;
+                    invalidate();
+                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
+                    if (!(x >= buttonX && x <= buttonX + side && y >= buttonY && y <= buttonY + side)) {
+                        buttonPressed = false;
+                        invalidate();
+                    }
+                }
+            } else if (avatarPressed) {
+                if (event.getAction() == MotionEvent.ACTION_UP) {
+                    avatarPressed = false;
+                    playSoundEffect(SoundEffectConstants.CLICK);
+                    if (delegate != null) {
+                        delegate.didPressedUserAvatar(this, audioUser);
+                    }
+                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
+                    avatarPressed = false;
+                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
+                    if (!avatarImage.isInsideImage(x, y)) {
+                        avatarPressed = false;
+                    }
+                }
+            }
+            if (!result) {
+                result = super.onTouchEvent(event);
+            }
+        }
+
+        return result;
+    }
+
+    private void didPressedButton() {
+        if (buttonState == 0) {
+            boolean result = MediaController.getInstance().playAudio(currentMessageObject);
+            if (result) {
+                buttonState = 1;
+                invalidate();
+            }
+        } else if (buttonState == 1) {
+            boolean result = MediaController.getInstance().pauseAudio(currentMessageObject);
+            if (result) {
+                buttonState = 0;
+                invalidate();
+            }
+        } else if (buttonState == 2) {
+            FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.audio, true);
+            buttonState = 3;
+            invalidate();
+        } else if (buttonState == 3) {
+            FileLoader.getInstance().cancelLoadFile(currentMessageObject.messageOwner.media.audio);
+            buttonState = 2;
+            invalidate();
+        }
+    }
+
+    public void updateProgress() {
+        if (currentMessageObject == null) {
+            return;
+        }
+
+        if (!seekBar.isDragging()) {
+            seekBar.setProgress(currentMessageObject.audioProgress);
+        }
+
+        int duration = 0;
+        if (!MediaController.getInstance().isPlayingAudio(currentMessageObject)) {
+            duration = currentMessageObject.messageOwner.media.audio.duration;
+        } else {
+            duration = currentMessageObject.audioProgressSec;
+        }
+        String timeString = String.format("%02d:%02d", duration / 60, duration % 60);
+        if (lastTimeString == null || lastTimeString != null && !lastTimeString.equals(timeString)) {
+            int timeWidth = (int)Math.ceil(timePaint.measureText(timeString));
+            timeLayout = new StaticLayout(timeString, timePaint, timeWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+        }
+        invalidate();
+    }
+
+    public void downloadAudioIfNeed() {
+        if (buttonState == 2) {
+            FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.audio, true);
+            buttonState = 3;
+            invalidate();
+        }
+    }
+
+    public void updateButtonState() {
+        String fileName = currentMessageObject.getFileName();
+        File cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
+        if (cacheFile.exists()) {
+            MediaController.getInstance().removeLoadingFileObserver(this);
+            boolean playing = MediaController.getInstance().isPlayingAudio(currentMessageObject);
+            if (!playing || playing && MediaController.getInstance().isAudioPaused()) {
+                buttonState = 0;
+            } else {
+                buttonState = 1;
+            }
+            progressView.setProgress(0);
+        } else {
+            MediaController.getInstance().addLoadingFileObserver(fileName, this);
+            if (!FileLoader.getInstance().isLoadingFile(fileName)) {
+                buttonState = 2;
+                progressView.setProgress(0);
+            } else {
+                buttonState = 3;
+                Float progress = FileLoader.getInstance().getFileProgress(fileName);
+                if (progress != null) {
+                    progressView.setProgress(progress);
+                } else {
+                    progressView.setProgress(0);
+                }
+            }
+        }
+        updateProgress();
+    }
+
+    @Override
+    public void onFailedDownload(String fileName) {
+        updateButtonState();
+    }
+
+    @Override
+    public void onSuccessDownload(String fileName) {
+        updateButtonState();
+    }
+
+    @Override
+    public void onProgressDownload(String fileName, float progress) {
+        progressView.setProgress(progress);
+        if (buttonState != 3) {
+            updateButtonState();
+        }
+        invalidate();
+    }
+
+    @Override
+    public void onProgressUpload(String fileName, float progress, boolean isEncrypted) {
+
+    }
+
+    @Override
+    public int getObserverTag() {
+        return TAG;
+    }
+
+    @Override
+    public void onSeekBarDrag(float progress) {
+        if (currentMessageObject == null) {
+            return;
+        }
+        currentMessageObject.audioProgress = progress;
+        MediaController.getInstance().seekToProgress(currentMessageObject, progress);
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        int width = MeasureSpec.getSize(widthMeasureSpec);
+        setMeasuredDimension(width, AndroidUtilities.dp(68));
+        if (isChat) {
+            backgroundWidth = Math.min(width - AndroidUtilities.dp(102), AndroidUtilities.dp(300));
+        } else {
+            backgroundWidth = Math.min(width - AndroidUtilities.dp(50), AndroidUtilities.dp(300));
+        }
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        super.onLayout(changed, left, top, right, bottom);
+
+        int x;
+
+        if (currentMessageObject.isOut()) {
+            x = layoutWidth - backgroundWidth + AndroidUtilities.dp(8);
+            seekBarX = layoutWidth - backgroundWidth + AndroidUtilities.dp(97);
+            buttonX = layoutWidth - backgroundWidth + AndroidUtilities.dp(67);
+            timeX = layoutWidth - backgroundWidth + AndroidUtilities.dp(71);
+        } else {
+            if (isChat) {
+                x = AndroidUtilities.dp(69);
+                seekBarX = AndroidUtilities.dp(158);
+                buttonX = AndroidUtilities.dp(128);
+                timeX = AndroidUtilities.dp(132);
+            } else {
+                x = AndroidUtilities.dp(16);
+                seekBarX = AndroidUtilities.dp(106);
+                buttonX = AndroidUtilities.dp(76);
+                timeX = AndroidUtilities.dp(80);
+            }
+        }
+        int diff = 0;
+        if (needAvatarImage) {
+            avatarImage.setImageCoords(x, AndroidUtilities.dp(9), AndroidUtilities.dp(50), AndroidUtilities.dp(50));
+        } else {
+            diff = AndroidUtilities.dp(56);
+            seekBarX -= diff;
+            buttonX -= diff;
+            timeX -= diff;
+        }
+
+        seekBar.width = backgroundWidth - AndroidUtilities.dp(112) + diff;
+        seekBar.height = AndroidUtilities.dp(30);
+        progressView.width = backgroundWidth - AndroidUtilities.dp(136) + diff;
+        progressView.height = AndroidUtilities.dp(30);
+        seekBarY = AndroidUtilities.dp(13);
+        buttonY = AndroidUtilities.dp(10);
+
+        updateProgress();
+    }
+
+    @Override
+    protected boolean isUserDataChanged() {
+        TLRPC.User newUser = MessagesController.getInstance().getUser(currentMessageObject.messageOwner.media.audio.user_id);
+        TLRPC.FileLocation newPhoto = null;
+
+        if (avatarImage != null && newUser != null && newUser.photo != null) {
+            newPhoto = newUser.photo.photo_small;
+        }
+
+        return currentPhoto == null && newPhoto != null || currentPhoto != null && newPhoto == null || currentPhoto != null && newPhoto != null && (currentPhoto.local_id != newPhoto.local_id || currentPhoto.volume_id != newPhoto.volume_id) || super.isUserDataChanged();
+    }
+
+    @Override
+    public void setMessageObject(MessageObject messageObject) {
+        if (currentMessageObject != messageObject || isUserDataChanged()) {
+            int uid = messageObject.messageOwner.media.audio.user_id;
+            if (uid == 0) {
+                uid = messageObject.messageOwner.from_id;
+            }
+            needAvatarImage = !(messageObject.messageOwner.to_id != null && messageObject.messageOwner.to_id.chat_id != 0 && !messageObject.isOut() && messageObject.messageOwner.media.audio.user_id == messageObject.messageOwner.from_id);
+            audioUser = MessagesController.getInstance().getUser(uid);
+
+            if (needAvatarImage) {
+                if (audioUser != null) {
+                    if (audioUser.photo != null) {
+                        currentPhoto = audioUser.photo.photo_small;
+                    }
+                    avatarImage.setImage(currentPhoto, "50_50", getResources().getDrawable(AndroidUtilities.getUserAvatarForId(uid)), false);
+                } else {
+                    avatarImage.setImage(null, "50_50", getResources().getDrawable(AndroidUtilities.getUserAvatarForId(uid)), false);
+                }
+            }
+
+            if (messageObject.isOut()) {
+                seekBar.type = 0;
+                progressView.setProgressColors(0xffb4e396, 0xff6ac453);
+            } else {
+                seekBar.type = 1;
+                progressView.setProgressColors(0xffd9e2eb, 0xff86c5f8);
+            }
+
+            super.setMessageObject(messageObject);
+        }
+        updateButtonState();
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+
+        if (currentMessageObject == null) {
+            return;
+        }
+
+        if (needAvatarImage) {
+            avatarImage.draw(canvas);
+        }
+
+        canvas.save();
+        if (buttonState == 0 || buttonState == 1) {
+            canvas.translate(seekBarX, seekBarY);
+            seekBar.draw(canvas);
+        } else {
+            canvas.translate(seekBarX + AndroidUtilities.dp(12), seekBarY);
+            progressView.draw(canvas);
+        }
+        canvas.restore();
+
+        int state = buttonState;
+        if (!currentMessageObject.isOut()) {
+            state += 4;
+            timePaint.setColor(0xffa1aab3);
+        } else {
+            timePaint.setColor(0xff70b15c);
+        }
+        Drawable buttonDrawable = statesDrawable[state][buttonPressed ? 1 : 0];
+        int side = AndroidUtilities.dp(36);
+        int x = (side - buttonDrawable.getIntrinsicWidth()) / 2;
+        int y = (side - buttonDrawable.getIntrinsicHeight()) / 2;
+        setDrawableBounds(buttonDrawable, x + buttonX, y + buttonY);
+        buttonDrawable.draw(canvas);
+
+        canvas.save();
+        canvas.translate(timeX, AndroidUtilities.dp(45));
+        timeLayout.draw(canvas);
+        canvas.restore();
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/Cells/ChatBaseCell.java b/TMessagesProj/src/main/java/org/tomato/ui/Cells/ChatBaseCell.java
new file mode 100644
index 000000000..c5be85f44
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Cells/ChatBaseCell.java
@@ -0,0 +1,607 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.tomato.ui.Cells;
+
+import android.annotation.SuppressLint;
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.drawable.Drawable;
+import android.text.Html;
+import android.text.Layout;
+import android.text.StaticLayout;
+import android.text.TextPaint;
+import android.text.TextUtils;
+import android.view.MotionEvent;
+import android.view.SoundEffectConstants;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.ContactsController;
+import org.tomato.android.ImageReceiver;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MessageObject;
+import org.tomato.android.MessagesController;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+
+public class ChatBaseCell extends BaseCell {
+
+    public static interface ChatBaseCellDelegate {
+        public abstract void didPressedUserAvatar(ChatBaseCell cell, TLRPC.User user);
+        public abstract void didPressedCancelSendButton(ChatBaseCell cell);
+        public abstract void didLongPressed(ChatBaseCell cell);
+        public abstract boolean canPerformActions();
+    }
+
+    public boolean isChat = false;
+    protected boolean isPressed = false;
+    protected boolean forwardName = false;
+    protected boolean media = false;
+    private boolean isCheckPressed = true;
+    private boolean wasLayout = false;
+    protected boolean isAvatarVisible = false;
+    protected MessageObject currentMessageObject;
+
+    public static Drawable backgroundDrawableIn;
+    private static Drawable backgroundDrawableInSelected;
+    private static Drawable backgroundDrawableOut;
+    private static Drawable backgroundDrawableOutSelected;
+    private static Drawable backgroundMediaDrawableIn;
+    private static Drawable backgroundMediaDrawableInSelected;
+    private static Drawable backgroundMediaDrawableOut;
+    private static Drawable backgroundMediaDrawableOutSelected;
+    private static Drawable checkDrawable;
+    private static Drawable halfCheckDrawable;
+    private static Drawable clockDrawable;
+    private static Drawable broadcastDrawable;
+    private static Drawable checkMediaDrawable;
+    private static Drawable halfCheckMediaDrawable;
+    private static Drawable clockMediaDrawable;
+    private static Drawable broadcastMediaDrawable;
+    private static Drawable errorDrawable;
+    protected static Drawable mediaBackgroundDrawable;
+    private static TextPaint timePaintIn;
+    private static TextPaint timePaintOut;
+    private static TextPaint timeMediaPaint;
+    private static TextPaint namePaint;
+    private static TextPaint forwardNamePaint;
+
+    protected int backgroundWidth = 100;
+
+    protected int layoutWidth;
+    protected int layoutHeight;
+
+    private ImageReceiver avatarImage;
+    private boolean avatarPressed = false;
+    private boolean forwardNamePressed = false;
+
+    private StaticLayout nameLayout;
+    protected int nameWidth;
+    private float nameOffsetX = 0;
+    protected boolean drawName = false;
+
+    private StaticLayout forwardedNameLayout;
+    protected int forwardedNameWidth;
+    protected boolean drawForwardedName = false;
+    private int forwardNameX;
+    private int forwardNameY;
+    private float forwardNameOffsetX = 0;
+
+    private StaticLayout timeLayout;
+    protected int timeWidth;
+    private int timeX;
+    private TextPaint currentTimePaint;
+    private String currentTimeString;
+    protected boolean drawTime = true;
+
+    private TLRPC.User currentUser;
+    private TLRPC.FileLocation currentPhoto;
+    private String currentNameString;
+
+    private TLRPC.User currentForwardUser;
+    private String currentForwardNameString;
+
+    protected ChatBaseCellDelegate delegate;
+
+    protected int namesOffset = 0;
+
+    private int last_send_state = 0;
+    private int last_delete_date = 0;
+
+    public ChatBaseCell(Context context) {
+        super(context);
+        /*PreferenceManager.getDefaultSharedPreferences(context).edit()
+                    .putInt(ApplicationLoader.BALLON_TYPE, AndroidUtilities
+                            .WECHAT_BUBBLE_STYLE).commit();*/
+        if (backgroundDrawableIn == null) {
+            backgroundDrawableIn = getResources().getDrawable(AndroidUtilities.getBackgroundDrawableIn());
+            backgroundDrawableInSelected = getResources().getDrawable(AndroidUtilities.getBackgroundDrawableInSelected());
+            backgroundDrawableOut = getResources().getDrawable(AndroidUtilities.getbackgroundDrawableOut());
+            backgroundDrawableOutSelected = getResources().getDrawable(AndroidUtilities.getbackgroundDrawableOutSelected());
+            backgroundMediaDrawableIn = getResources().getDrawable(AndroidUtilities.getbackgroundMediaDrawableIn());
+            backgroundMediaDrawableInSelected = getResources().getDrawable(AndroidUtilities.getbackgroundMediaDrawableInSelected());
+            backgroundMediaDrawableOut = getResources().getDrawable(AndroidUtilities.getbackgroundMediaDrawableOut());
+            backgroundMediaDrawableOutSelected = getResources().getDrawable(AndroidUtilities.getbackgroundMediaDrawableOutSelected());
+            checkDrawable = getResources().getDrawable(R.drawable.msg_check);
+            halfCheckDrawable = getResources().getDrawable(R.drawable.msg_halfcheck);
+            clockDrawable = getResources().getDrawable(R.drawable.msg_clock);
+            checkMediaDrawable = getResources().getDrawable(R.drawable.msg_check_w);
+            halfCheckMediaDrawable = getResources().getDrawable(R.drawable.msg_halfcheck_w);
+            clockMediaDrawable = getResources().getDrawable(R.drawable.msg_clock_photo);
+            errorDrawable = getResources().getDrawable(R.drawable.msg_warning);
+            mediaBackgroundDrawable = getResources().getDrawable(R.drawable.phototime);
+            broadcastDrawable = getResources().getDrawable(R.drawable.broadcast3);
+            broadcastMediaDrawable = getResources().getDrawable(R.drawable.broadcast4);
+
+            timePaintIn = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            timePaintIn.setTextSize(AndroidUtilities.dp(12));
+            timePaintIn.setColor(0xffa1aab3);
+
+            timePaintOut = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            timePaintOut.setTextSize(AndroidUtilities.dp(12));
+            timePaintOut.setColor(0xff70b15c);
+
+            timeMediaPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            timeMediaPaint.setTextSize(AndroidUtilities.dp(12));
+            timeMediaPaint.setColor(0xffffffff);
+
+            namePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            namePaint.setTextSize(AndroidUtilities.dp(15));
+
+            forwardNamePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            forwardNamePaint.setTextSize(AndroidUtilities.dp(14));
+        }
+        avatarImage = new ImageReceiver(this);
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        avatarImage.clearImage();
+        currentPhoto = null;
+    }
+
+    @Override
+    public void setPressed(boolean pressed) {
+        super.setPressed(pressed);
+        invalidate();
+    }
+
+    public void setDelegate(ChatBaseCellDelegate delegate) {
+        this.delegate = delegate;
+    }
+
+    public void setCheckPressed(boolean value, boolean pressed) {
+        isCheckPressed = value;
+        isPressed = pressed;
+        invalidate();
+    }
+
+    protected boolean isUserDataChanged() {
+        if (currentMessageObject == null || currentUser == null) {
+            return false;
+        }
+        if (last_send_state != currentMessageObject.messageOwner.send_state) {
+            return true;
+        }
+        if (last_delete_date != currentMessageObject.messageOwner.destroyTime) {
+            return true;
+        }
+
+        TLRPC.User newUser = MessagesController.getInstance().getUser(currentMessageObject.messageOwner.from_id);
+        TLRPC.FileLocation newPhoto = null;
+
+        if (isAvatarVisible && newUser != null && newUser.photo != null) {
+            newPhoto = newUser.photo.photo_small;
+        }
+
+        if (currentPhoto == null && newPhoto != null || currentPhoto != null && newPhoto == null || currentPhoto != null && newPhoto != null && (currentPhoto.local_id != newPhoto.local_id || currentPhoto.volume_id != newPhoto.volume_id)) {
+            return true;
+        }
+
+        String newNameString = null;
+        if (drawName && isChat && newUser != null && !currentMessageObject.isOut()) {
+            newNameString = ContactsController.formatName(newUser.first_name, newUser.last_name);
+        }
+
+        if (currentNameString == null && newNameString != null || currentNameString != null && newNameString == null || currentNameString != null && newNameString != null && !currentNameString.equals(newNameString)) {
+            return true;
+        }
+
+        newUser = MessagesController.getInstance().getUser(currentMessageObject.messageOwner.fwd_from_id);
+        newNameString = null;
+        if (newUser != null && drawForwardedName && currentMessageObject.messageOwner instanceof TLRPC.TL_messageForwarded) {
+            newNameString = ContactsController.formatName(newUser.first_name, newUser.last_name);
+        }
+        return currentForwardNameString == null && newNameString != null || currentForwardNameString != null && newNameString == null || currentForwardNameString != null && newNameString != null && !currentForwardNameString.equals(newNameString);
+    }
+
+    public void setMessageObject(MessageObject messageObject) {
+        currentMessageObject = messageObject;
+        last_send_state = messageObject.messageOwner.send_state;
+        last_delete_date = messageObject.messageOwner.destroyTime;
+        isPressed = false;
+        isCheckPressed = true;
+        isAvatarVisible = false;
+        wasLayout = false;
+
+        currentUser = MessagesController.getInstance().getUser(messageObject.messageOwner.from_id);
+        if (isChat && !messageObject.isOut()) {
+            isAvatarVisible = true;
+            if (currentUser != null) {
+                if (currentUser.photo != null) {
+                    currentPhoto = currentUser.photo.photo_small;
+                } else {
+                    currentPhoto = null;
+                }
+                avatarImage.setImage(currentPhoto, "50_50", getResources().getDrawable(AndroidUtilities.getUserAvatarForId(currentUser.id)), false);
+            } else {
+                avatarImage.setImage(null, "50_50", null, false);
+            }
+        }
+
+        if (!media) {
+            if (currentMessageObject.isOut()) {
+                currentTimePaint = timePaintOut;
+            } else {
+                currentTimePaint = timePaintIn;
+            }
+        } else {
+            currentTimePaint = timeMediaPaint;
+        }
+
+        currentTimeString = LocaleController.formatterDay.format((long) (currentMessageObject.messageOwner.date) * 1000);
+        timeWidth = (int)Math.ceil(currentTimePaint.measureText(currentTimeString));
+
+        namesOffset = 0;
+
+        if (drawName && isChat && currentUser != null && !currentMessageObject.isOut()) {
+            currentNameString = ContactsController.formatName(currentUser.first_name, currentUser.last_name);
+            nameWidth = getMaxNameWidth();
+
+            CharSequence nameStringFinal = TextUtils.ellipsize(currentNameString.replace("\n", " "), namePaint, nameWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
+            nameLayout = new StaticLayout(nameStringFinal, namePaint, nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+            if (nameLayout.getLineCount() > 0) {
+                nameWidth = (int)Math.ceil(nameLayout.getLineWidth(0));
+                namesOffset += AndroidUtilities.dp(18);
+                nameOffsetX = nameLayout.getLineLeft(0);
+            } else {
+                nameWidth = 0;
+            }
+        } else {
+            currentNameString = null;
+            nameLayout = null;
+            nameWidth = 0;
+        }
+
+        if (drawForwardedName && messageObject.messageOwner instanceof TLRPC.TL_messageForwarded) {
+            currentForwardUser = MessagesController.getInstance().getUser(messageObject.messageOwner.fwd_from_id);
+            if (currentForwardUser != null) {
+                currentForwardNameString = ContactsController.formatName(currentForwardUser.first_name, currentForwardUser.last_name);
+
+                forwardedNameWidth = getMaxNameWidth();
+
+                CharSequence str = TextUtils.ellipsize(currentForwardNameString.replace("\n", " "), forwardNamePaint, forwardedNameWidth - AndroidUtilities.dp(40), TextUtils.TruncateAt.END);
+                str = Html.fromHtml(String.format("%s<br>%s <b>%s</b>", LocaleController.getString("ForwardedMessage", R.string.ForwardedMessage), LocaleController.getString("From", R.string.From), str));
+                forwardedNameLayout = new StaticLayout(str, forwardNamePaint, forwardedNameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                if (forwardedNameLayout.getLineCount() > 1) {
+                    forwardedNameWidth = Math.max((int) Math.ceil(forwardedNameLayout.getLineWidth(0)), (int) Math.ceil(forwardedNameLayout.getLineWidth(1)));
+                    namesOffset += AndroidUtilities.dp(36);
+                    forwardNameOffsetX = Math.min(forwardedNameLayout.getLineLeft(0), forwardedNameLayout.getLineLeft(1));
+                } else {
+                    forwardedNameWidth = 0;
+                }
+            } else {
+                currentForwardNameString = null;
+                forwardedNameLayout = null;
+                forwardedNameWidth = 0;
+            }
+        } else {
+            currentForwardNameString = null;
+            forwardedNameLayout = null;
+            forwardedNameWidth = 0;
+        }
+
+        requestLayout();
+    }
+
+    public final MessageObject getMessageObject() {
+        return currentMessageObject;
+    }
+
+    protected int getMaxNameWidth() {
+        return backgroundWidth - AndroidUtilities.dp(8);
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        boolean result = false;
+        float x = event.getX();
+        float y = event.getY();
+        if (event.getAction() == MotionEvent.ACTION_DOWN) {
+            if (delegate == null || delegate.canPerformActions()) {
+                if (isAvatarVisible && avatarImage.isInsideImage(x, y)) {
+                    avatarPressed = true;
+                    result = true;
+                } else if (drawForwardedName && forwardedNameLayout != null) {
+                    if (x >= forwardNameX && x <= forwardNameX + forwardedNameWidth && y >= forwardNameY && y <= forwardNameY + AndroidUtilities.dp(32)) {
+                        forwardNamePressed = true;
+                        result = true;
+                    }
+                }
+                if (result) {
+                    startCheckLongPress();
+                }
+            }
+        } else {
+            if (event.getAction() != MotionEvent.ACTION_MOVE) {
+                cancelCheckLongPress();
+            }
+            if (avatarPressed) {
+                if (event.getAction() == MotionEvent.ACTION_UP) {
+                    avatarPressed = false;
+                    playSoundEffect(SoundEffectConstants.CLICK);
+                    if (delegate != null) {
+                        delegate.didPressedUserAvatar(this, currentUser);
+                    }
+                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
+                    avatarPressed = false;
+                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
+                    if (isAvatarVisible && !avatarImage.isInsideImage(x, y)) {
+                        avatarPressed = false;
+                    }
+                }
+            } else if (forwardNamePressed) {
+                if (event.getAction() == MotionEvent.ACTION_UP) {
+                    forwardNamePressed = false;
+                    playSoundEffect(SoundEffectConstants.CLICK);
+                    if (delegate != null) {
+                        delegate.didPressedUserAvatar(this, currentForwardUser);
+                    }
+                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
+                    forwardNamePressed = false;
+                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
+                    if (!(x >= forwardNameX && x <= forwardNameX + forwardedNameWidth && y >= forwardNameY && y <= forwardNameY + AndroidUtilities.dp(32))) {
+                        forwardNamePressed = false;
+                    }
+                }
+            }
+        }
+        return result;
+    }
+
+    @SuppressLint("DrawAllocation")
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        if (currentMessageObject == null) {
+            super.onLayout(changed, left, top, right, bottom);
+            return;
+        }
+
+        if (changed || !wasLayout) {
+            layoutWidth = getMeasuredWidth();
+            layoutHeight = getMeasuredHeight();
+
+            timeLayout = new StaticLayout(currentTimeString, currentTimePaint, timeWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+            if (!media) {
+                if (!currentMessageObject.isOut()) {
+                    timeX = backgroundWidth - AndroidUtilities.dp(9) - timeWidth + (isChat ? AndroidUtilities.dp(52) : 0);
+                } else {
+                    timeX = layoutWidth - timeWidth - AndroidUtilities.dpf(38.5f);
+                }
+            } else {
+                if (!currentMessageObject.isOut()) {
+                    timeX = backgroundWidth - AndroidUtilities.dp(4) - timeWidth + (isChat ? AndroidUtilities.dp(52) : 0);
+                } else {
+                    timeX = layoutWidth - timeWidth - AndroidUtilities.dpf(42.0f);
+                }
+            }
+
+            if (isAvatarVisible) {
+                avatarImage.setImageCoords(AndroidUtilities.dp(6), layoutHeight - AndroidUtilities.dp(45), AndroidUtilities.dp(42), AndroidUtilities.dp(42));
+            }
+
+            wasLayout = true;
+        }
+    }
+
+    protected void onAfterBackgroundDraw(Canvas canvas) {
+
+    }
+
+    @Override
+    protected void onLongPress() {
+        if (delegate != null) {
+            delegate.didLongPressed(this);
+        }
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        if (currentMessageObject == null) {
+            return;
+        }
+
+        if (!wasLayout) {
+            requestLayout();
+            return;
+        }
+
+        if (isAvatarVisible) {
+            avatarImage.draw(canvas);
+        }
+
+        Drawable currentBackgroundDrawable = null;
+        if (currentMessageObject.isOut()) {
+            if (isPressed() && isCheckPressed || !isCheckPressed && isPressed) {
+                if (!media) {
+                    currentBackgroundDrawable = backgroundDrawableOutSelected;
+                } else {
+                    currentBackgroundDrawable = backgroundMediaDrawableOutSelected;
+                }
+            } else {
+                if (!media) {
+                    currentBackgroundDrawable = backgroundDrawableOut;
+                } else {
+                    currentBackgroundDrawable = backgroundMediaDrawableOut;
+                }
+            }
+            setDrawableBounds(currentBackgroundDrawable, layoutWidth - backgroundWidth - (!media ? 0 : AndroidUtilities.dp(9)), AndroidUtilities.dp(1), backgroundWidth, layoutHeight - AndroidUtilities.dp(2));
+        } else {
+            if (isPressed() && isCheckPressed || !isCheckPressed && isPressed) {
+                if (!media) {
+                    currentBackgroundDrawable = backgroundDrawableInSelected;
+                } else {
+                    currentBackgroundDrawable = backgroundMediaDrawableInSelected;
+                }
+            } else {
+                if (!media) {
+                    currentBackgroundDrawable = backgroundDrawableIn;
+                } else {
+                    currentBackgroundDrawable = backgroundMediaDrawableIn;
+                }
+            }
+            if (isChat) {
+                setDrawableBounds(currentBackgroundDrawable, AndroidUtilities.dp(52 + (!media ? 0 : 9)), AndroidUtilities.dp(1), backgroundWidth, layoutHeight - AndroidUtilities.dp(2));
+            } else {
+                setDrawableBounds(currentBackgroundDrawable, (!media ? 0 : AndroidUtilities.dp(9)), AndroidUtilities.dp(1), backgroundWidth, layoutHeight - AndroidUtilities.dp(2));
+            }
+        }
+        currentBackgroundDrawable.draw(canvas);
+
+        onAfterBackgroundDraw(canvas);
+
+        if (drawName && nameLayout != null) {
+            canvas.save();
+            canvas.translate(currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(19) - nameOffsetX, AndroidUtilities.dp(10));
+            namePaint.setColor(AndroidUtilities.getColorForId(currentUser.id));
+            nameLayout.draw(canvas);
+            canvas.restore();
+        }
+
+        if (drawForwardedName && forwardedNameLayout != null) {
+            canvas.save();
+            if (currentMessageObject.isOut()) {
+                forwardNamePaint.setColor(0xff4a923c);
+                forwardNameX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(10);
+                forwardNameY = AndroidUtilities.dp(10 + (drawName ? 18 : 0));
+            } else {
+                forwardNamePaint.setColor(0xff006fc8);
+                forwardNameX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(19);
+                forwardNameY = AndroidUtilities.dp(10 + (drawName ? 18 : 0));
+            }
+            canvas.translate(forwardNameX - forwardNameOffsetX, forwardNameY);
+            forwardedNameLayout.draw(canvas);
+            canvas.restore();
+        }
+
+        if (drawTime) {
+            if (media) {
+                setDrawableBounds(mediaBackgroundDrawable, timeX - AndroidUtilities.dp(3), layoutHeight - AndroidUtilities.dpf(27.5f), timeWidth + AndroidUtilities.dp(6 + (currentMessageObject.isOut() ? 20 : 0)), AndroidUtilities.dpf(16.5f));
+                mediaBackgroundDrawable.draw(canvas);
+
+                canvas.save();
+                canvas.translate(timeX, layoutHeight - AndroidUtilities.dpf(12.0f) - timeLayout.getHeight());
+                timeLayout.draw(canvas);
+                canvas.restore();
+            } else {
+                canvas.save();
+                canvas.translate(timeX, layoutHeight - AndroidUtilities.dpf(6.5f) - timeLayout.getHeight());
+                timeLayout.draw(canvas);
+                canvas.restore();
+            }
+
+            if (currentMessageObject.isOut()) {
+                boolean drawCheck1 = false;
+                boolean drawCheck2 = false;
+                boolean drawClock = false;
+                boolean drawError = false;
+                boolean isBroadcast = (int)(currentMessageObject.getDialogId() >> 32) == 1;
+
+                if (currentMessageObject.isSending()) {
+                    drawCheck1 = false;
+                    drawCheck2 = false;
+                    drawClock = true;
+                    drawError = false;
+                } else if (currentMessageObject.isSendError()) {
+                    drawCheck1 = false;
+                    drawCheck2 = false;
+                    drawClock = false;
+                    drawError = true;
+                } else if (currentMessageObject.isSent()) {
+                    if (!currentMessageObject.isUnread()) {
+                        drawCheck1 = true;
+                        drawCheck2 = true;
+                    } else {
+                        drawCheck1 = false;
+                        drawCheck2 = true;
+                    }
+                    drawClock = false;
+                    drawError = false;
+                }
+
+                if (drawClock) {
+                    if (!media) {
+                        setDrawableBounds(clockDrawable, layoutWidth - AndroidUtilities.dpf(18.5f) - clockDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(8.5f) - clockDrawable.getIntrinsicHeight());
+                        clockDrawable.draw(canvas);
+                    } else {
+                        setDrawableBounds(clockMediaDrawable, layoutWidth - AndroidUtilities.dpf(22.0f) - clockMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(13.0f) - clockMediaDrawable.getIntrinsicHeight());
+                        clockMediaDrawable.draw(canvas);
+                    }
+                }
+                if (isBroadcast) {
+                    if (drawCheck1 || drawCheck2) {
+                        if (!media) {
+                            setDrawableBounds(broadcastDrawable, layoutWidth - AndroidUtilities.dpf(20.5f) - broadcastDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(8.0f) - broadcastDrawable.getIntrinsicHeight());
+                            broadcastDrawable.draw(canvas);
+                        } else {
+                            setDrawableBounds(broadcastMediaDrawable, layoutWidth - AndroidUtilities.dpf(24.0f) - broadcastMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(13.0f) - broadcastMediaDrawable.getIntrinsicHeight());
+                            broadcastMediaDrawable.draw(canvas);
+                        }
+                    }
+                } else {
+                    if (drawCheck2) {
+                        if (!media) {
+                            if (drawCheck1) {
+                                setDrawableBounds(checkDrawable, layoutWidth - AndroidUtilities.dpf(22.5f) - checkDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(8.5f) - checkDrawable.getIntrinsicHeight());
+                            } else {
+                                setDrawableBounds(checkDrawable, layoutWidth - AndroidUtilities.dpf(18.5f) - checkDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(8.5f) - checkDrawable.getIntrinsicHeight());
+                            }
+                            checkDrawable.draw(canvas);
+                        } else {
+                            if (drawCheck1) {
+                                setDrawableBounds(checkMediaDrawable, layoutWidth - AndroidUtilities.dpf(26.0f) - checkMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(13.0f) - checkMediaDrawable.getIntrinsicHeight());
+                            } else {
+                                setDrawableBounds(checkMediaDrawable, layoutWidth - AndroidUtilities.dpf(22.0f) - checkMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(13.0f) - checkMediaDrawable.getIntrinsicHeight());
+                            }
+                            checkMediaDrawable.draw(canvas);
+                        }
+                    }
+                    if (drawCheck1) {
+                        if (!media) {
+                            setDrawableBounds(halfCheckDrawable, layoutWidth - AndroidUtilities.dp(18) - halfCheckDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(8.5f) - halfCheckDrawable.getIntrinsicHeight());
+                            halfCheckDrawable.draw(canvas);
+                        } else {
+                            setDrawableBounds(halfCheckMediaDrawable, layoutWidth - AndroidUtilities.dpf(20.5f) - halfCheckMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(13.0f) - halfCheckMediaDrawable.getIntrinsicHeight());
+                            halfCheckMediaDrawable.draw(canvas);
+                        }
+                    }
+                }
+                if (drawError) {
+                    if (!media) {
+                        setDrawableBounds(errorDrawable, layoutWidth - AndroidUtilities.dp(18) - errorDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(6.5f) - errorDrawable.getIntrinsicHeight());
+                        errorDrawable.draw(canvas);
+                    } else {
+                        setDrawableBounds(errorDrawable, layoutWidth - AndroidUtilities.dpf(20.5f) - errorDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dpf(12.5f) - errorDrawable.getIntrinsicHeight());
+                        errorDrawable.draw(canvas);
+                    }
+                }
+            }
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java b/TMessagesProj/src/main/java/org/tomato/ui/Cells/ChatContactCell.java
similarity index 96%
rename from TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Cells/ChatContactCell.java
index 4803d4114..b55dae23c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatContactCell.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Cells/ChatContactCell.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.ui.Cells;
+package org.tomato.ui.Cells;
 
 import android.content.Context;
 import android.graphics.Canvas;
@@ -18,16 +18,16 @@
 import android.view.MotionEvent;
 import android.view.SoundEffectConstants;
 
-import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
-import org.telegram.android.ImageReceiver;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MessageObject;
-import org.telegram.android.MessagesController;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
+import org.tomato.PhoneFormat.PhoneFormat;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.ContactsController;
+import org.tomato.android.ImageReceiver;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MessageObject;
+import org.tomato.android.MessagesController;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
 
 public class ChatContactCell extends ChatBaseCell {
 
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/Cells/ChatMediaCell.java b/TMessagesProj/src/main/java/org/tomato/ui/Cells/ChatMediaCell.java
new file mode 100644
index 000000000..dc3c1ea55
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Cells/ChatMediaCell.java
@@ -0,0 +1,972 @@
+/*
+ * This is the source code of Telegram for Android v. 1.4.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.tomato.ui.Cells;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.RectF;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.text.Layout;
+import android.text.StaticLayout;
+import android.text.TextPaint;
+import android.text.TextUtils;
+import android.view.MotionEvent;
+import android.view.SoundEffectConstants;
+import android.view.animation.DecelerateInterpolator;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.ImageLoader;
+import org.tomato.android.ImageReceiver;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MediaController;
+import org.tomato.android.MessageObject;
+import org.tomato.android.PhotoObject;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLoader;
+import org.tomato.messenger.R;
+import org.tomato.messenger.Utilities;
+import org.tomato.ui.PhotoViewer;
+import org.tomato.ui.Views.GifDrawable;
+
+import java.io.File;
+import java.util.Locale;
+
+public class ChatMediaCell extends ChatBaseCell implements MediaController.FileDownloadProgressListener {
+
+    public static interface ChatMediaCellDelegate {
+        public abstract void didClickedImage(ChatMediaCell cell);
+        public abstract void didPressedOther(ChatMediaCell cell);
+    }
+
+    private static Drawable placeholderInDrawable;
+    private static Drawable placeholderOutDrawable;
+    private static Drawable placeholderDocInDrawable;
+    private static Drawable placeholderDocOutDrawable;
+    private static Drawable videoIconDrawable;
+    private static Drawable docMenuInDrawable;
+    private static Drawable docMenuOutDrawable;
+    private static Drawable[] buttonStatesDrawables = new Drawable[8];
+    private static Drawable[][] buttonStatesDrawablesDoc = new Drawable[3][2];
+    private static TextPaint infoPaint;
+    private static MessageObject lastDownloadedGifMessage = null;
+    private static TextPaint namePaint;
+    private static Paint docBackPaint;
+    private static Paint progressPaint;
+    private static Paint deleteProgressPaint;
+    private static DecelerateInterpolator decelerateInterpolator;
+
+    private GifDrawable gifDrawable = null;
+
+    private int photoWidth;
+    private int photoHeight;
+    private PhotoObject currentPhotoObject;
+    private String currentUrl;
+    private String currentPhotoFilter;
+    private ImageReceiver photoImage;
+    private boolean progressVisible = false;
+    private boolean photoNotSet = false;
+    private boolean cancelLoading = false;
+
+    private int TAG;
+
+    private int buttonState = 0;
+    private int buttonPressed = 0;
+    private boolean imagePressed = false;
+    private boolean otherPressed = false;
+    private int buttonX;
+    private int buttonY;
+
+    private StaticLayout infoLayout;
+    private int infoWidth;
+    private int infoOffset = 0;
+    private String currentInfoString;
+
+    private StaticLayout nameLayout;
+    private int nameWidth = 0;
+    private String currentNameString;
+
+    private ChatMediaCellDelegate mediaDelegate = null;
+
+    private float currentProgress = 0;
+    private RectF progressRect = new RectF();
+    private long lastUpdateTime = 0;
+    private boolean animationStarted = false;
+    private float radOffset = 0;
+    private float animatedProgressValue = 0;
+    private long currentProgressTime = 0;
+    private float animationProgressStart = 0;
+    private RectF deleteProgressRect = new RectF();
+    private int lastSecretSecondsLeft = 0;
+
+    public ChatMediaCell(Context context) {
+        super(context);
+
+        if (placeholderInDrawable == null) {
+            placeholderInDrawable = getResources().getDrawable(R.drawable.photo_placeholder_in);
+            placeholderOutDrawable = getResources().getDrawable(R.drawable.photo_placeholder_out);
+            placeholderDocInDrawable = getResources().getDrawable(R.drawable.doc_blue);
+            placeholderDocOutDrawable = getResources().getDrawable(R.drawable.doc_green);
+            buttonStatesDrawables[0] = getResources().getDrawable(R.drawable.photoload);
+            buttonStatesDrawables[1] = getResources().getDrawable(R.drawable.photocancel);
+            buttonStatesDrawables[2] = getResources().getDrawable(R.drawable.photogif);
+            buttonStatesDrawables[3] = getResources().getDrawable(R.drawable.playvideo);
+            buttonStatesDrawables[4] = getResources().getDrawable(R.drawable.photopause);
+            buttonStatesDrawables[5] = getResources().getDrawable(R.drawable.burn);
+            buttonStatesDrawables[6] = getResources().getDrawable(R.drawable.circle);
+            buttonStatesDrawables[7] = getResources().getDrawable(R.drawable.photocheck);
+            buttonStatesDrawablesDoc[0][0] = getResources().getDrawable(R.drawable.docload_b);
+            buttonStatesDrawablesDoc[1][0] = getResources().getDrawable(R.drawable.doccancel_b);
+            buttonStatesDrawablesDoc[2][0] = getResources().getDrawable(R.drawable.docpause_b);
+            buttonStatesDrawablesDoc[0][1] = getResources().getDrawable(R.drawable.docload_g);
+            buttonStatesDrawablesDoc[1][1] = getResources().getDrawable(R.drawable.doccancel_g);
+            buttonStatesDrawablesDoc[2][1] = getResources().getDrawable(R.drawable.docpause_g);
+            videoIconDrawable = getResources().getDrawable(R.drawable.ic_video);
+            docMenuInDrawable = getResources().getDrawable(R.drawable.doc_actions_b);
+            docMenuOutDrawable = getResources().getDrawable(R.drawable.doc_actions_g);
+
+            infoPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            infoPaint.setTextSize(AndroidUtilities.dp(12));
+
+            namePaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            namePaint.setColor(0xff000000);
+            namePaint.setTextSize(AndroidUtilities.dp(16));
+
+            docBackPaint = new Paint();
+
+            progressPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+            progressPaint.setStyle(Paint.Style.STROKE);
+            progressPaint.setStrokeCap(Paint.Cap.ROUND);
+            progressPaint.setStrokeWidth(AndroidUtilities.dp(2));
+
+            deleteProgressPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+            deleteProgressPaint.setColor(0xffe4e2e0);
+
+            decelerateInterpolator = new DecelerateInterpolator();
+        }
+
+        TAG = MediaController.getInstance().generateObserverTag();
+
+        photoImage = new ImageReceiver(this);
+    }
+
+    public void clearGifImage() {
+        if (currentMessageObject != null && currentMessageObject.type == 8) {
+            gifDrawable = null;
+            buttonState = 2;
+            invalidate();
+        }
+    }
+
+    public void setMediaDelegate(ChatMediaCellDelegate delegate) {
+        this.mediaDelegate = delegate;
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        if (photoImage != null) {
+            photoImage.clearImage();
+            currentPhotoObject = null;
+        }
+        currentUrl = null;
+        if (gifDrawable != null) {
+            MediaController.getInstance().clearGifDrawable(this);
+            gifDrawable = null;
+        }
+        MediaController.getInstance().removeLoadingFileObserver(this);
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        float x = event.getX();
+        float y = event.getY();
+
+        boolean result = false;
+        int side = AndroidUtilities.dp(48);
+        if (event.getAction() == MotionEvent.ACTION_DOWN) {
+            if (delegate == null || delegate.canPerformActions()) {
+                if (buttonState != -1 && x >= buttonX && x <= buttonX + side && y >= buttonY && y <= buttonY + side) {
+                    buttonPressed = 1;
+                    invalidate();
+                    result = true;
+                } else {
+                    if (currentMessageObject.type == 9) {
+                        if (x >= photoImage.getImageX() && x <= photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(50) && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
+                            imagePressed = true;
+                            result = true;
+                        } else if (x >= photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(50) && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
+                            otherPressed = true;
+                            result = true;
+                        }
+                    } else {
+                        if (x >= photoImage.getImageX() && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
+                            imagePressed = true;
+                            result = true;
+                        }
+                    }
+                }
+                if (imagePressed && currentMessageObject.isSecretPhoto()) {
+                    imagePressed = false;
+                } else if (result) {
+                    startCheckLongPress();
+                }
+            }
+        } else {
+            if (event.getAction() != MotionEvent.ACTION_MOVE) {
+                cancelCheckLongPress();
+            }
+            if (buttonPressed == 1) {
+                if (event.getAction() == MotionEvent.ACTION_UP) {
+                    buttonPressed = 0;
+                    playSoundEffect(SoundEffectConstants.CLICK);
+                    didPressedButton();
+                    invalidate();
+                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
+                    buttonPressed = 0;
+                    invalidate();
+                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
+                    if (!(x >= buttonX && x <= buttonX + side && y >= buttonY && y <= buttonY + side)) {
+                        buttonPressed = 0;
+                        invalidate();
+                    }
+                }
+            } else if (imagePressed) {
+                if (event.getAction() == MotionEvent.ACTION_UP) {
+                    imagePressed = false;
+                    if (buttonState == -1 || buttonState == 2 || buttonState == 3) {
+                        playSoundEffect(SoundEffectConstants.CLICK);
+                        didClickedImage();
+                    }
+                    invalidate();
+                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
+                    imagePressed = false;
+                    invalidate();
+                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
+                    if (currentMessageObject.type == 9) {
+                        if (!(x >= photoImage.getImageX() && x <= photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(50) && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight())) {
+                            imagePressed = false;
+                            invalidate();
+                        }
+                    } else {
+                        if (!photoImage.isInsideImage(x, y)) {
+                            imagePressed = false;
+                            invalidate();
+                        }
+                    }
+                }
+            } else if (otherPressed) {
+                if (event.getAction() == MotionEvent.ACTION_UP) {
+                    otherPressed = false;
+                    playSoundEffect(SoundEffectConstants.CLICK);
+                    if (mediaDelegate != null) {
+                        mediaDelegate.didPressedOther(this);
+                    }
+                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
+                    otherPressed = false;
+                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
+                    if (currentMessageObject.type == 9) {
+                        if (!(x >= photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(50) && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight())) {
+                            otherPressed = false;
+                        }
+                    }
+                }
+            }
+        }
+        if (!result) {
+            result = super.onTouchEvent(event);
+        }
+
+        return result;
+    }
+
+    private void didClickedImage() {
+        if (currentMessageObject.type == 1) {
+            if (buttonState == -1) {
+                if (mediaDelegate != null) {
+                    mediaDelegate.didClickedImage(this);
+                }
+            } else if (buttonState == 0) {
+                didPressedButton();
+            }
+        } else if (currentMessageObject.type == 8) {
+            if (buttonState == -1) {
+                buttonState = 2;
+                if (gifDrawable != null) {
+                    gifDrawable.pause();
+                }
+                invalidate();
+            } else if (buttonState == 2 || buttonState == 0) {
+                didPressedButton();
+            }
+        } else if (currentMessageObject.type == 3) {
+            if (buttonState == 0 || buttonState == 3) {
+                didPressedButton();
+            }
+        } else if (currentMessageObject.type == 4) {
+            if (mediaDelegate != null) {
+                mediaDelegate.didClickedImage(this);
+            }
+        } else if (currentMessageObject.type == 9) {
+            if (buttonState == -1) {
+                if (mediaDelegate != null) {
+                    mediaDelegate.didClickedImage(this);
+                }
+            }
+        }
+    }
+
+    private void didPressedButton() {
+        if (buttonState == 0) {
+            cancelLoading = false;
+            if (currentMessageObject.type == 1) {
+                if (currentMessageObject.imagePreview != null) {
+                    photoImage.setImage(currentPhotoObject.photoOwner.location, currentPhotoFilter, new BitmapDrawable(currentMessageObject.imagePreview), currentPhotoObject.photoOwner.size, false);
+                } else {
+                    photoImage.setImage(currentPhotoObject.photoOwner.location, currentPhotoFilter, currentMessageObject.isOut() ? placeholderOutDrawable : placeholderInDrawable, currentPhotoObject.photoOwner.size, false);
+                }
+            } else if (currentMessageObject.type == 8 || currentMessageObject.type == 9) {
+                FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.document, true);
+                lastDownloadedGifMessage = currentMessageObject;
+            } else if (currentMessageObject.type == 3) {
+                FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.video, true);
+            }
+            progressVisible = true;
+            startAnimation();
+            buttonState = 1;
+            invalidate();
+        } else if (buttonState == 1) {
+            if (currentMessageObject.isOut() && currentMessageObject.isSending()) {
+                if (delegate != null) {
+                    delegate.didPressedCancelSendButton(this);
+                }
+            } else {
+                cancelLoading = true;
+                if (currentMessageObject.type == 1) {
+                    ImageLoader.getInstance().cancelLoadingForImageView(photoImage);
+                } else if (currentMessageObject.type == 8 || currentMessageObject.type == 9) {
+                    FileLoader.getInstance().cancelLoadFile(currentMessageObject.messageOwner.media.document);
+                    if (lastDownloadedGifMessage != null && lastDownloadedGifMessage.messageOwner.id == currentMessageObject.messageOwner.id) {
+                        lastDownloadedGifMessage = null;
+                    }
+                } else if (currentMessageObject.type == 3) {
+                    FileLoader.getInstance().cancelLoadFile(currentMessageObject.messageOwner.media.video);
+                }
+                progressVisible = false;
+                stopAnimation();
+                buttonState = 0;
+                invalidate();
+            }
+        } else if (buttonState == 2) {
+            if (gifDrawable == null) {
+                gifDrawable = MediaController.getInstance().getGifDrawable(this, true);
+            }
+            if (gifDrawable != null) {
+                gifDrawable.start();
+                gifDrawable.invalidateSelf();
+                buttonState = -1;
+                invalidate();
+            }
+        } else if (buttonState == 3) {
+            if (mediaDelegate != null) {
+                mediaDelegate.didClickedImage(this);
+            }
+        }
+    }
+
+    private boolean isPhotoDataChanged(MessageObject object) {
+        if (object.type == 4) {
+            if (currentUrl == null) {
+                return true;
+            }
+            double lat = object.messageOwner.media.geo.lat;
+            double lon = object.messageOwner.media.geo._long;
+            String url = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=13&size=100x100&maptype=roadmap&scale=%d&markers=color:red|size:big|%f,%f&sensor=false", lat, lon, Math.min(2, (int)Math.ceil(AndroidUtilities.density)), lat, lon);
+            if (!url.equals(currentUrl)) {
+                return true;
+            }
+        } else if (currentPhotoObject == null) {
+            return true;
+        } else if (currentMessageObject != null && photoNotSet) {
+            File cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
+            if (cacheFile.exists()) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    @Override
+    public void setMessageObject(MessageObject messageObject) {
+        media = messageObject.type != 9;
+        if (currentMessageObject != messageObject || isPhotoDataChanged(messageObject) || isUserDataChanged()) {
+            super.setMessageObject(messageObject);
+            cancelLoading = false;
+
+            progressVisible = false;
+            buttonState = -1;
+            gifDrawable = null;
+            currentPhotoObject = null;
+            currentUrl = null;
+            photoNotSet = false;
+
+            if (messageObject.type == 9) {
+                String name = messageObject.messageOwner.media.document.file_name;
+                if (name == null || name.length() == 0) {
+                    name = LocaleController.getString("AttachDocument", R.string.AttachDocument);
+                }
+                int maxWidth;
+                if (AndroidUtilities.isTablet()) {
+                    maxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(122 + 86 + 24);
+                } else {
+                    maxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(122 + 86 + 24);
+                }
+                if (currentNameString == null || !currentNameString.equals(name)) {
+                    currentNameString = name;
+                    nameWidth = Math.min(maxWidth, (int) Math.ceil(namePaint.measureText(currentNameString)));
+                    CharSequence str = TextUtils.ellipsize(currentNameString, namePaint, nameWidth, TextUtils.TruncateAt.END);
+                    nameLayout = new StaticLayout(str, namePaint, nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                }
+
+                String fileName = messageObject.getFileName();
+                int idx = fileName.lastIndexOf(".");
+                String ext = null;
+                if (idx != -1) {
+                    ext = fileName.substring(idx + 1);
+                }
+                if (ext == null || ext.length() == 0) {
+                    ext = messageObject.messageOwner.media.document.mime_type;
+                }
+                ext = ext.toUpperCase();
+
+                String str = Utilities.formatFileSize(messageObject.messageOwner.media.document.size) + " " + ext;
+
+                if (currentInfoString == null || !currentInfoString.equals(str)) {
+                    currentInfoString = str;
+                    infoOffset = 0;
+                    infoWidth = Math.min(maxWidth, (int) Math.ceil(infoPaint.measureText(currentInfoString)));
+                    CharSequence str2 = TextUtils.ellipsize(currentInfoString, infoPaint, infoWidth, TextUtils.TruncateAt.END);
+                    infoLayout = new StaticLayout(str2, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                }
+            } else if (messageObject.type == 8) {
+                gifDrawable = MediaController.getInstance().getGifDrawable(this, false);
+
+                String str = Utilities.formatFileSize(messageObject.messageOwner.media.document.size);
+                if (currentInfoString == null || !currentInfoString.equals(str)) {
+                    currentInfoString = str;
+                    infoOffset = 0;
+                    infoWidth = (int) Math.ceil(infoPaint.measureText(currentInfoString));
+                    infoLayout = new StaticLayout(currentInfoString, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                }
+                nameLayout = null;
+                currentNameString = null;
+            } else if (messageObject.type == 3) {
+                int duration = messageObject.messageOwner.media.video.duration;
+                int minutes = duration / 60;
+                int seconds = duration - minutes * 60;
+                String str = String.format("%d:%02d, %s", minutes, seconds, Utilities.formatFileSize(messageObject.messageOwner.media.video.size));
+                if (currentInfoString == null || !currentInfoString.equals(str)) {
+                    currentInfoString = str;
+                    infoOffset = videoIconDrawable.getIntrinsicWidth() + AndroidUtilities.dp(4);
+                    infoWidth = (int) Math.ceil(infoPaint.measureText(currentInfoString));
+                    infoLayout = new StaticLayout(currentInfoString, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                }
+                nameLayout = null;
+                currentNameString = null;
+            } else {
+                currentInfoString = null;
+                currentNameString = null;
+                infoLayout = null;
+                nameLayout = null;
+                updateSecretTimeText();
+            }
+
+            if (messageObject.type == 9) {
+                photoWidth = AndroidUtilities.dp(86);
+                photoHeight = AndroidUtilities.dp(86);
+                backgroundWidth = photoWidth + Math.max(nameWidth, infoWidth) + AndroidUtilities.dp(68);
+                currentPhotoObject = PhotoObject.getClosestImageWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize());
+                if (currentPhotoObject != null) {
+                    if (currentPhotoObject.image != null) {
+                        photoImage.setImageBitmap(currentPhotoObject.image);
+                    } else {
+                        currentPhotoFilter = String.format(Locale.US, "%d_%d_b", photoWidth, photoHeight);
+                        photoImage.setImage(currentPhotoObject.photoOwner.location, currentPhotoFilter, null, 0, false);
+                    }
+                } else {
+                    photoImage.setImageBitmap((BitmapDrawable)null);
+                }
+            } else if (messageObject.type == 4) {
+                photoWidth = AndroidUtilities.dp(100);
+                photoHeight = AndroidUtilities.dp(100);
+                backgroundWidth = photoWidth + AndroidUtilities.dp(12);
+
+                double lat = messageObject.messageOwner.media.geo.lat;
+                double lon = messageObject.messageOwner.media.geo._long;
+                currentUrl = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=13&size=100x100&maptype=roadmap&scale=%d&markers=color:red|size:big|%f,%f&sensor=false", lat, lon, Math.min(2, (int)Math.ceil(AndroidUtilities.density)), lat, lon);
+                photoImage.setImage(currentUrl, null, messageObject.isOut() ? placeholderOutDrawable : placeholderInDrawable);
+            } else {
+                if (AndroidUtilities.isTablet()) {
+                    photoWidth = (int) (AndroidUtilities.getMinTabletSide() * 0.7f);
+                } else {
+                    photoWidth = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.7f);
+                }
+                photoHeight = photoWidth + AndroidUtilities.dp(100);
+
+                if (photoWidth > AndroidUtilities.getPhotoSize()) {
+                    photoWidth = AndroidUtilities.getPhotoSize();
+                }
+                if (photoHeight > AndroidUtilities.getPhotoSize()) {
+                    photoHeight = AndroidUtilities.getPhotoSize();
+                }
+
+                currentPhotoObject = PhotoObject.getClosestImageWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize());
+                if (currentPhotoObject != null) {
+                    boolean noSize = false;
+                    if (currentMessageObject.type == 3 || currentMessageObject.type == 8) {
+                        noSize = true;
+                    }
+                    float scale = (float) currentPhotoObject.photoOwner.w / (float) photoWidth;
+
+                    if (!noSize && currentPhotoObject.photoOwner.size == 0) {
+                        currentPhotoObject.photoOwner.size = -1;
+                    }
+
+                    int w = (int) (currentPhotoObject.photoOwner.w / scale);
+                    int h = (int) (currentPhotoObject.photoOwner.h / scale);
+                    if (w == 0) {
+                        if (messageObject.type == 3) {
+                            w = infoWidth + infoOffset + AndroidUtilities.dp(16);
+                        } else {
+                            w = AndroidUtilities.dp(100);
+                        }
+                    }
+                    if (h == 0) {
+                        h = AndroidUtilities.dp(100);
+                    }
+                    if (h > photoHeight) {
+                        float scale2 = h;
+                        h = photoHeight;
+                        scale2 /= h;
+                        w = (int) (w / scale2);
+                    } else if (h < AndroidUtilities.dp(120)) {
+                        h = AndroidUtilities.dp(120);
+                        float hScale = (float) currentPhotoObject.photoOwner.h / h;
+                        if (currentPhotoObject.photoOwner.w / hScale < photoWidth) {
+                            w = (int) (currentPhotoObject.photoOwner.w / hScale);
+                        }
+                    }
+                    int timeWidthTotal = timeWidth + AndroidUtilities.dp(14 + (currentMessageObject.isOut() ? 20 : 0));
+                    if (w < timeWidthTotal) {
+                        w = timeWidthTotal;
+                    }
+
+                    if (currentMessageObject.isSecretPhoto()) {
+                        if (AndroidUtilities.isTablet()) {
+                            w = h = (int) (AndroidUtilities.getMinTabletSide() * 0.5f);
+                        } else {
+                            w = h = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.5f);
+                        }
+                    }
+
+                    photoWidth = w;
+                    photoHeight = h;
+                    backgroundWidth = w + AndroidUtilities.dp(12);
+                    currentPhotoFilter = String.format(Locale.US, "%d_%d", (int) (w / AndroidUtilities.density), (int) (h / AndroidUtilities.density));
+                    if (messageObject.photoThumbs.size() > 1 || messageObject.type == 3 || messageObject.type == 8) {
+                        currentPhotoFilter += "_b";
+                    }
+
+                    if (currentPhotoObject.image != null) {
+                        photoImage.setImageBitmap(currentPhotoObject.image);
+                    } else {
+                        boolean photoExist = true;
+                        String fileName = FileLoader.getAttachFileName(currentPhotoObject.photoOwner);
+                        if (messageObject.type == 1) {
+                            File cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
+                            if (!cacheFile.exists()) {
+                                photoExist = false;
+                            } else {
+                                MediaController.getInstance().removeLoadingFileObserver(this);
+                            }
+                        }
+                        if (photoExist || MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_PHOTO)) {
+                            if (messageObject.imagePreview != null) {
+                                photoImage.setImage(currentPhotoObject.photoOwner.location, currentPhotoFilter, new BitmapDrawable(messageObject.imagePreview), noSize ? 0 : currentPhotoObject.photoOwner.size, false);
+                            } else {
+                                photoImage.setImage(currentPhotoObject.photoOwner.location, currentPhotoFilter, messageObject.isOut() ? placeholderOutDrawable : placeholderInDrawable, noSize ? 0 : currentPhotoObject.photoOwner.size, false);
+                            }
+                        } else {
+                            photoNotSet = true;
+                            if (messageObject.imagePreview != null) {
+                                photoImage.setImageBitmap(messageObject.imagePreview);
+                            } else {
+                                photoImage.setImageBitmap(messageObject.isOut() ? placeholderOutDrawable : placeholderInDrawable);
+                            }
+                        }
+                    }
+                } else {
+                    photoImage.setImageBitmap(messageObject.isOut() ? placeholderOutDrawable : placeholderInDrawable);
+                }
+            }
+            photoImage.setForcePreview(messageObject.isSecretPhoto());
+
+            invalidate();
+        }
+        updateButtonState();
+    }
+
+    public ImageReceiver getPhotoImage() {
+        return photoImage;
+    }
+
+    public void updateButtonState() {
+        String fileName = null;
+        File cacheFile = null;
+        if (currentMessageObject.type == 1) {
+            if (currentPhotoObject == null) {
+                return;
+            }
+            fileName = FileLoader.getAttachFileName(currentPhotoObject.photoOwner);
+            cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
+        } else if (currentMessageObject.type == 8 || currentMessageObject.type == 3 || currentMessageObject.type == 9) {
+            if (currentMessageObject.messageOwner.attachPath != null && currentMessageObject.messageOwner.attachPath.length() != 0) {
+                File f = new File(currentMessageObject.messageOwner.attachPath);
+                if (f.exists()) {
+                    fileName = currentMessageObject.messageOwner.attachPath;
+                    cacheFile = f;
+                }
+            }
+            if (fileName == null) {
+                fileName = currentMessageObject.getFileName();
+                cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
+            }
+        }
+        if (fileName == null) {
+            return;
+        }
+        if (currentMessageObject.isOut() && currentMessageObject.isSending()) {
+            if (currentMessageObject.messageOwner.attachPath != null) {
+                MediaController.getInstance().addLoadingFileObserver(currentMessageObject.messageOwner.attachPath, this);
+                progressVisible = true;
+                startAnimation();
+                buttonState = 1;
+                Float progress = FileLoader.getInstance().getFileProgress(currentMessageObject.messageOwner.attachPath);
+                setProgress(progress != null ? progress : 0, false);
+                invalidate();
+            }
+        } else {
+            if (currentMessageObject.messageOwner.attachPath != null && currentMessageObject.messageOwner.attachPath.length() != 0) {
+                MediaController.getInstance().removeLoadingFileObserver(this);
+            }
+            if (cacheFile.exists() && cacheFile.length() == 0) {
+                cacheFile.delete();
+            }
+            if (!cacheFile.exists()) {
+                MediaController.getInstance().addLoadingFileObserver(fileName, this);
+                if (!FileLoader.getInstance().isLoadingFile(fileName)) {
+                    if (cancelLoading || currentMessageObject.type != 1 || !MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_PHOTO)) {
+                        buttonState = 0;
+                        progressVisible = false;
+                        stopAnimation();
+                    } else {
+                        buttonState = 1;
+                        progressVisible = true;
+                        startAnimation();
+                    }
+                    setProgress(0, false);
+                } else {
+                    buttonState = 1;
+                    progressVisible = true;
+                    startAnimation();
+                    Float progress = FileLoader.getInstance().getFileProgress(fileName);
+                    setProgress(progress != null ? progress : 0, false);
+                }
+                invalidate();
+            } else {
+                MediaController.getInstance().removeLoadingFileObserver(this);
+                progressVisible = false;
+                stopAnimation();
+                if (currentMessageObject.type == 8 && (gifDrawable == null || gifDrawable != null && !gifDrawable.isRunning())) {
+                    buttonState = 2;
+                } else if (currentMessageObject.type == 3) {
+                    buttonState = 3;
+                } else {
+                    buttonState = -1;
+                }
+                invalidate();
+            }
+        }
+    }
+
+    private void updateAnimation() {
+        long newTime = System.currentTimeMillis();
+        long dt = newTime - lastUpdateTime;
+        lastUpdateTime = newTime;
+
+        radOffset += 360 * dt / 3000.0f;
+        float progressDiff = currentProgress - animationProgressStart;
+        if (progressDiff > 0) {
+            currentProgressTime += dt;
+            if (currentProgressTime >= 300) {
+                animatedProgressValue = currentProgress;
+                animationProgressStart = currentProgress;
+                currentProgressTime = 0;
+            } else {
+                animatedProgressValue = animationProgressStart + progressDiff * decelerateInterpolator.getInterpolation(currentProgressTime / 300.0f);
+            }
+        }
+
+        invalidateProgress();
+    }
+
+    private void startAnimation() {
+        lastUpdateTime = System.currentTimeMillis();
+        animationStarted = true;
+        invalidateProgress();
+    }
+
+    private void setProgress(float value, boolean animated) {
+        if (!animated) {
+            animatedProgressValue = value;
+            animationProgressStart = value;
+        } else {
+            animationProgressStart = animatedProgressValue;
+        }
+        currentProgress = value;
+        currentProgressTime = 0;
+    }
+
+    private void invalidateProgress() {
+        int offset = AndroidUtilities.dp(2);
+        invalidate((int)progressRect.left - offset, (int)progressRect.top - offset, (int)progressRect.right + offset * 2, (int)progressRect.bottom + offset * 2);
+    }
+
+    private void stopAnimation() {
+        radOffset = 0;
+        animationStarted = false;
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), photoHeight + AndroidUtilities.dp(14));
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        super.onLayout(changed, left, top, right, bottom);
+
+        int x;
+        if (currentMessageObject.isOut()) {
+            if (media) {
+                x = layoutWidth - backgroundWidth - AndroidUtilities.dp(3);
+            } else {
+                x = layoutWidth - backgroundWidth + AndroidUtilities.dp(6);
+            }
+        } else {
+            if (isChat) {
+                x = AndroidUtilities.dp(67);
+            } else {
+                x = AndroidUtilities.dp(15);
+            }
+        }
+        photoImage.setImageCoords(x, AndroidUtilities.dp(7), photoWidth, photoHeight);
+        int size = AndroidUtilities.dp(48);
+        buttonX = (int)(x + (photoWidth - size) / 2.0f);
+        buttonY = (int)(AndroidUtilities.dp(7) + (photoHeight - size) / 2.0f);
+        progressRect.set(buttonX + AndroidUtilities.dp(1), buttonY + AndroidUtilities.dp(1), buttonX + AndroidUtilities.dp(47), buttonY + AndroidUtilities.dp(47));
+        deleteProgressRect.set(buttonX + AndroidUtilities.dp(3), buttonY + AndroidUtilities.dp(3), buttonX + AndroidUtilities.dp(45), buttonY + AndroidUtilities.dp(45));
+    }
+
+    private void updateSecretTimeText() {
+        if (currentMessageObject == null || currentMessageObject.isOut()) {
+            return;
+        }
+        String str = currentMessageObject.getSecretTimeString();
+        if (str == null) {
+            return;
+        }
+        if (currentInfoString == null || !currentInfoString.equals(str)) {
+            currentInfoString = str;
+            infoOffset = 0;
+            infoWidth = (int)Math.ceil(infoPaint.measureText(currentInfoString));
+            CharSequence str2 = TextUtils.ellipsize(currentInfoString, infoPaint, infoWidth, TextUtils.TruncateAt.END);
+            infoLayout = new StaticLayout(str2, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+            invalidate();
+        }
+    }
+
+    @Override
+    protected void onAfterBackgroundDraw(Canvas canvas) {
+        boolean imageDrawn = false;
+        if (gifDrawable != null) {
+            canvas.save();
+            gifDrawable.setBounds(photoImage.getImageX(), photoImage.getImageY(), photoImage.getImageX() + photoWidth, photoImage.getImageY() + photoHeight);
+            gifDrawable.draw(canvas);
+            canvas.restore();
+        } else {
+            photoImage.setVisible(!PhotoViewer.getInstance().isShowingImage(currentMessageObject), false);
+            imageDrawn = photoImage.draw(canvas);
+            drawTime = photoImage.getVisible();
+        }
+
+
+        if (currentMessageObject.type == 9) {
+            Drawable menuDrawable = null;
+            if (currentMessageObject.isOut()) {
+                infoPaint.setColor(0xff75b166);
+                docBackPaint.setColor(0xffd0f3b3);
+                menuDrawable = docMenuOutDrawable;
+            } else {
+                infoPaint.setColor(0xffa1adbb);
+                docBackPaint.setColor(0xffebf0f5);
+                menuDrawable = docMenuInDrawable;
+            }
+
+            setDrawableBounds(menuDrawable, photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(50), AndroidUtilities.dp(10));
+            menuDrawable.draw(canvas);
+
+            if (!imageDrawn) {
+                canvas.drawRect(photoImage.getImageX(), photoImage.getImageY(), photoImage.getImageX() + photoImage.getImageWidth(), photoImage.getImageY() + photoImage.getImageHeight(), docBackPaint);
+
+                if (buttonState == -1) {
+                    Drawable drawable = currentMessageObject.isOut() ? placeholderDocOutDrawable : placeholderDocInDrawable;
+                    setDrawableBounds(drawable, photoImage.getImageX() + AndroidUtilities.dp(19), photoImage.getImageY() + AndroidUtilities.dp(19));
+                    drawable.draw(canvas);
+                }
+                if (currentMessageObject.isOut()) {
+                    progressPaint.setColor(0xff81bd72);
+
+                } else {
+                    progressPaint.setColor(0xffadbdcc);
+                }
+            } else {
+                progressPaint.setColor(0xffffffff);
+            }
+        } else {
+            progressPaint.setColor(0xffffffff);
+        }
+
+        if (buttonState >= 0 && buttonState < 4) {
+            Drawable currentButtonDrawable = null;
+            if (currentMessageObject.type == 9 && !imageDrawn) {
+                if (buttonState == 1 && !currentMessageObject.isSending()) {
+                    currentButtonDrawable = buttonStatesDrawablesDoc[2][currentMessageObject.isOut() ? 1 : 0];
+                } else {
+                    currentButtonDrawable = buttonStatesDrawablesDoc[buttonState][currentMessageObject.isOut() ? 1 : 0];
+                }
+            } else {
+                if (buttonState == 1 && !currentMessageObject.isSending()) {
+                    currentButtonDrawable = buttonStatesDrawables[4];
+                } else {
+                    currentButtonDrawable = buttonStatesDrawables[buttonState];
+                }
+            }
+            setDrawableBounds(currentButtonDrawable, buttonX, buttonY);
+            currentButtonDrawable.draw(canvas);
+        }
+
+        if (buttonState == -1 && currentMessageObject.isSecretPhoto()) {
+            int drawable = 5;
+            if (currentMessageObject.messageOwner.destroyTime != 0) {
+                if (currentMessageObject.isOut()) {
+                    drawable = 7;
+                } else {
+                    drawable = 6;
+                }
+            }
+            setDrawableBounds(buttonStatesDrawables[drawable], buttonX, buttonY);
+            buttonStatesDrawables[drawable].draw(canvas);
+            if (!currentMessageObject.isOut() && currentMessageObject.messageOwner.destroyTime != 0) {
+                long msTime = System.currentTimeMillis() + ConnectionsManager.getInstance().getTimeDifference() * 1000;
+                float progress = Math.max(0, (long)currentMessageObject.messageOwner.destroyTime * 1000 - msTime) / (currentMessageObject.messageOwner.ttl * 1000.0f);
+                canvas.drawArc(deleteProgressRect, -90, -360 * progress, true, deleteProgressPaint);
+                if (progress != 0) {
+                    int offset = AndroidUtilities.dp(2);
+                    invalidate((int)deleteProgressRect.left - offset, (int)deleteProgressRect.top - offset, (int)deleteProgressRect.right + offset * 2, (int)deleteProgressRect.bottom + offset * 2);
+                }
+                updateSecretTimeText();
+            }
+        }
+
+        if (progressVisible) {
+            canvas.drawArc(progressRect, -90 + radOffset, Math.max(4, 360 * animatedProgressValue), false, progressPaint);
+        }
+
+        if (nameLayout != null) {
+            canvas.save();
+            canvas.translate(photoImage.getImageX() + photoImage.getImageWidth() + AndroidUtilities.dp(10), photoImage.getImageY() + AndroidUtilities.dp(8));
+            nameLayout.draw(canvas);
+            canvas.restore();
+
+            if (infoLayout != null) {
+                canvas.save();
+                canvas.translate(photoImage.getImageX() + photoImage.getImageWidth() + AndroidUtilities.dp(10), photoImage.getImageY() + AndroidUtilities.dp(30));
+                infoLayout.draw(canvas);
+                canvas.restore();
+            }
+        } else if (infoLayout != null && (buttonState == 1 || buttonState == 0 || buttonState == 3 || currentMessageObject.isSecretPhoto())) {
+            infoPaint.setColor(0xffffffff);
+            setDrawableBounds(mediaBackgroundDrawable, photoImage.getImageX() + AndroidUtilities.dp(4), photoImage.getImageY() + AndroidUtilities.dp(4), infoWidth + AndroidUtilities.dp(8) + infoOffset, AndroidUtilities.dpf(16.5f));
+            mediaBackgroundDrawable.draw(canvas);
+
+            if (currentMessageObject.type == 3) {
+                setDrawableBounds(videoIconDrawable, photoImage.getImageX() + AndroidUtilities.dp(8), photoImage.getImageY() + AndroidUtilities.dpf(7.5f));
+                videoIconDrawable.draw(canvas);
+            }
+
+            canvas.save();
+            canvas.translate(photoImage.getImageX() + AndroidUtilities.dp(8) + infoOffset, photoImage.getImageY() + AndroidUtilities.dpf(5.5f));
+            infoLayout.draw(canvas);
+            canvas.restore();
+        }
+
+        if (animationStarted) {
+            updateAnimation();
+        }
+    }
+
+    @Override
+    public void onFailedDownload(String fileName) {
+        updateButtonState();
+    }
+
+    @Override
+    public void onSuccessDownload(String fileName) {
+        updateButtonState();
+        if (currentMessageObject.type == 8 && lastDownloadedGifMessage != null && lastDownloadedGifMessage.messageOwner.id == currentMessageObject.messageOwner.id && buttonState == 2) {
+            didPressedButton();
+        }
+        if (photoNotSet) {
+            setMessageObject(currentMessageObject);
+        }
+    }
+
+    @Override
+    public void onProgressDownload(String fileName, float progress) {
+        progressVisible = true;
+        setProgress(progress, true);
+        if (buttonState != 1) {
+            updateButtonState();
+        }
+        invalidateProgress();
+    }
+
+    @Override
+    public void onProgressUpload(String fileName, float progress, boolean isEncrypted) {
+        setProgress(progress, true);
+        invalidateProgress();
+    }
+
+    @Override
+    public int getObserverTag() {
+        return TAG;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/Cells/ChatMessageCell.java b/TMessagesProj/src/main/java/org/tomato/ui/Cells/ChatMessageCell.java
new file mode 100644
index 000000000..72e921dc9
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Cells/ChatMessageCell.java
@@ -0,0 +1,235 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui.Cells;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.text.Spannable;
+import android.text.style.ClickableSpan;
+import android.view.MotionEvent;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.MessageObject;
+import org.tomato.messenger.FileLog;
+
+public class ChatMessageCell extends ChatBaseCell {
+
+    private int textX, textY;
+    private int totalHeight = 0;
+    private ClickableSpan pressedLink;
+
+    private int lastVisibleBlockNum = 0;
+    private int firstVisibleBlockNum = 0;
+    private int totalVisibleBlocksCount = 0;
+
+    public ChatMessageCell(Context context) {
+        super(context);
+        drawForwardedName = true;
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        if (currentMessageObject != null && currentMessageObject.textLayoutBlocks != null && !currentMessageObject.textLayoutBlocks.isEmpty() && currentMessageObject.messageText instanceof Spannable && !isPressed) {
+            if (event.getAction() == MotionEvent.ACTION_DOWN || pressedLink != null && event.getAction() == MotionEvent.ACTION_UP) {
+                int x = (int)event.getX();
+                int y = (int)event.getY();
+                if (x >= textX && y >= textY && x <= textX + currentMessageObject.textWidth && y <= textY + currentMessageObject.textHeight) {
+                    y -= textY;
+                    int blockNum = Math.max(0, y / currentMessageObject.blockHeight);
+                    if (blockNum < currentMessageObject.textLayoutBlocks.size()) {
+                        try {
+                            MessageObject.TextLayoutBlock block = currentMessageObject.textLayoutBlocks.get(blockNum);
+                            x -= textX - (int)Math.ceil(block.textXOffset);
+                            y -= block.textYOffset;
+                            final int line = block.textLayout.getLineForVertical(y);
+                            final int off = block.textLayout.getOffsetForHorizontal(line, x) + block.charactersOffset;
+
+                            final float left = block.textLayout.getLineLeft(line);
+                            if (left <= x && left + block.textLayout.getLineWidth(line) >= x) {
+                                Spannable buffer = (Spannable)currentMessageObject.messageText;
+                                ClickableSpan[] link = buffer.getSpans(off, off, ClickableSpan.class);
+
+                                if (link.length != 0) {
+                                    if (event.getAction() == MotionEvent.ACTION_DOWN) {
+                                        pressedLink = link[0];
+                                        return true;
+                                    } else {
+                                        if (link[0] == pressedLink) {
+                                            try {
+                                                pressedLink.onClick(this);
+                                            } catch (Exception e) {
+                                                FileLog.e("tmessages", e);
+                                            }
+                                            return true;
+                                        }
+                                    }
+                                } else {
+                                    pressedLink = null;
+                                }
+                            } else {
+                                pressedLink = null;
+                            }
+                        } catch (Exception e) {
+                            pressedLink = null;
+                            FileLog.e("tmessages", e);
+                        }
+                    } else {
+                        pressedLink = null;
+                    }
+                } else {
+                    pressedLink = null;
+                }
+            }
+        } else {
+            pressedLink = null;
+        }
+        return super.onTouchEvent(event);
+    }
+
+    public void setVisiblePart(int position, int height) {
+        if (currentMessageObject == null || currentMessageObject.textLayoutBlocks == null) {
+            return;
+        }
+        int newFirst = -1, newLast = -1, newCount = 0;
+
+        for (int a = Math.max(0, (position - textY) / currentMessageObject.blockHeight); a < currentMessageObject.textLayoutBlocks.size(); a++) {
+            MessageObject.TextLayoutBlock block = currentMessageObject.textLayoutBlocks.get(a);
+            float y = textY + block.textYOffset;
+            if (intersect(y, y + currentMessageObject.blockHeight, position, position + height)) {
+                if (newFirst == -1) {
+                    newFirst = a;
+                }
+                newLast = a;
+                newCount++;
+            } else if (y > position) {
+                break;
+            }
+        }
+
+        if (lastVisibleBlockNum != newLast || firstVisibleBlockNum != newFirst || totalVisibleBlocksCount != newCount) {
+            lastVisibleBlockNum = newLast;
+            firstVisibleBlockNum = newFirst;
+            totalVisibleBlocksCount = newCount;
+            invalidate();
+        }
+    }
+
+    private boolean intersect(float left1, float right1, float left2, float right2) {
+        if (left1 <= left2) {
+            return right1 >= left2;
+        }
+        return left1 <= right2;
+    }
+
+    @Override
+    public void setMessageObject(MessageObject messageObject) {
+        if (currentMessageObject != messageObject || isUserDataChanged()) {
+            if (currentMessageObject != messageObject) {
+                firstVisibleBlockNum = 0;
+                lastVisibleBlockNum = 0;
+            }
+            pressedLink = null;
+            int maxWidth;
+
+            if (AndroidUtilities.isTablet()) {
+                if (isChat && !messageObject.isOut()) {
+                    maxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(122);
+                    drawName = true;
+                } else {
+                    maxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(80);
+                    drawName = false;
+                }
+            } else {
+                if (isChat && !messageObject.isOut()) {
+                    maxWidth = AndroidUtilities.displaySize.x - AndroidUtilities.dp(122);
+                    drawName = true;
+                } else {
+                    maxWidth = AndroidUtilities.displaySize.x - AndroidUtilities.dp(80);
+                    drawName = false;
+                }
+            }
+
+            backgroundWidth = maxWidth;
+
+            super.setMessageObject(messageObject);
+
+            backgroundWidth = messageObject.textWidth;
+            totalHeight = messageObject.textHeight + AndroidUtilities.dpf(19.5f) + namesOffset;
+
+            int maxChildWidth = Math.max(backgroundWidth, nameWidth);
+            maxChildWidth = Math.max(maxChildWidth, forwardedNameWidth);
+
+            int timeMore = timeWidth + AndroidUtilities.dp(6);
+            if (messageObject.isOut()) {
+                timeMore += AndroidUtilities.dpf(20.5f);
+            }
+
+            if (maxWidth - messageObject.lastLineWidth < timeMore) {
+                totalHeight += AndroidUtilities.dp(14);
+                backgroundWidth = Math.max(maxChildWidth, messageObject.lastLineWidth) + AndroidUtilities.dp(29);
+            } else {
+                int diff = maxChildWidth - messageObject.lastLineWidth;
+                if (diff >= 0 && diff <= timeMore) {
+                    backgroundWidth = maxChildWidth + timeMore - diff + AndroidUtilities.dp(29);
+                } else {
+                    backgroundWidth = Math.max(maxChildWidth, messageObject.lastLineWidth + timeMore) + AndroidUtilities.dp(29);
+                }
+            }
+        }
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), totalHeight);
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        super.onLayout(changed, left, top, right, bottom);
+
+        if (currentMessageObject.isOut()) {
+            textX = layoutWidth - backgroundWidth + AndroidUtilities.dp(10);
+            textY = AndroidUtilities.dp(10) + namesOffset;
+        } else {
+            textX = AndroidUtilities.dp(19) + (isChat ? AndroidUtilities.dp(52) : 0);
+            textY = AndroidUtilities.dp(10) + namesOffset;
+        }
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+        if (currentMessageObject == null || currentMessageObject.textLayoutBlocks == null || currentMessageObject.textLayoutBlocks.isEmpty() || firstVisibleBlockNum < 0) {
+            return;
+        }
+
+        if (currentMessageObject.isOut()) {
+            textX = layoutWidth - backgroundWidth + AndroidUtilities.dp(10);
+            textY = AndroidUtilities.dp(10) + namesOffset;
+        } else {
+            textX = AndroidUtilities.dp(19) + (isChat ? AndroidUtilities.dp(52) : 0);
+            textY = AndroidUtilities.dp(10) + namesOffset;
+        }
+
+        for (int a = firstVisibleBlockNum; a <= lastVisibleBlockNum; a++) {
+            if (a >= currentMessageObject.textLayoutBlocks.size()) {
+                break;
+            }
+            MessageObject.TextLayoutBlock block = currentMessageObject.textLayoutBlocks.get(a);
+            canvas.save();
+            canvas.translate(textX - (int)Math.ceil(block.textXOffset), textY + block.textYOffset);
+            try {
+                block.textLayout.draw(canvas);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            canvas.restore();
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/Cells/ChatOrUserCell.java b/TMessagesProj/src/main/java/org/tomato/ui/Cells/ChatOrUserCell.java
new file mode 100644
index 000000000..5e88cb2a3
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Cells/ChatOrUserCell.java
@@ -0,0 +1,456 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui.Cells;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.drawable.Drawable;
+import android.text.Layout;
+import android.text.StaticLayout;
+import android.text.TextPaint;
+import android.text.TextUtils;
+
+import org.tomato.PhoneFormat.PhoneFormat;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.ContactsController;
+import org.tomato.android.ImageReceiver;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MessagesController;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
+
+public class ChatOrUserCell extends BaseCell {
+    private static TextPaint namePaint;
+    private static TextPaint nameEncryptedPaint;
+    private static TextPaint onlinePaint;
+    private static TextPaint offlinePaint;
+
+    private static Drawable lockDrawable;
+    private static Drawable broadcastDrawable;
+    private static Drawable groupDrawable;
+    private static Paint linePaint;
+
+    private CharSequence currentName;
+    private ImageReceiver avatarImage;
+    private CharSequence subLabel;
+
+    private ChatOrUserCellLayout cellLayout;
+    private TLRPC.User user = null;
+    private TLRPC.Chat chat = null;
+    private TLRPC.EncryptedChat encryptedChat = null;
+
+    private String lastName = null;
+    private int lastStatus = 0;
+    private TLRPC.FileLocation lastAvatar = null;
+
+    public boolean usePadding = true;
+    public boolean useSeparator = false;
+    public float drawAlpha = 1;
+
+    public ChatOrUserCell(Context context) {
+        super(context);
+        init();
+    }
+
+    private void init() {
+        if (namePaint == null) {
+            namePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            namePaint.setTextSize(AndroidUtilities.dp(18));
+            namePaint.setColor(0xff222222);
+        }
+
+        if (nameEncryptedPaint == null) {
+            nameEncryptedPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            nameEncryptedPaint.setTextSize(AndroidUtilities.dp(18));
+            nameEncryptedPaint.setColor(0xff00a60e);
+        }
+
+        if (onlinePaint == null) {
+            onlinePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            onlinePaint.setTextSize(AndroidUtilities.dp(15));
+            onlinePaint.setColor(0xff316f9f);
+        }
+
+        if (offlinePaint == null) {
+            offlinePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            offlinePaint.setTextSize(AndroidUtilities.dp(15));
+            offlinePaint.setColor(0xff999999);
+        }
+
+        if (lockDrawable == null) {
+            lockDrawable = getResources().getDrawable(R.drawable.ic_lock_green);
+        }
+
+        if (linePaint == null) {
+            linePaint = new Paint();
+            linePaint.setColor(0xffdcdcdc);
+        }
+
+        if (broadcastDrawable == null) {
+            broadcastDrawable = getResources().getDrawable(R.drawable.broadcast);
+        }
+
+        if (groupDrawable == null) {
+            groupDrawable = getResources().getDrawable(R.drawable.grouplist);
+        }
+
+        if (avatarImage == null) {
+            avatarImage = new ImageReceiver(this);
+        }
+
+        if (cellLayout == null) {
+            cellLayout = new ChatOrUserCellLayout();
+        }
+    }
+
+    public void setData(TLRPC.User u, TLRPC.Chat c, TLRPC.EncryptedChat ec, CharSequence n, CharSequence s) {
+        currentName = n;
+        user = u;
+        chat = c;
+        encryptedChat = ec;
+        subLabel = s;
+        update(0);
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        if (avatarImage != null) {
+            avatarImage.clearImage();
+            lastAvatar = null;
+        }
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), AndroidUtilities.dp(64));
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        if (user == null && chat == null && encryptedChat == null) {
+            super.onLayout(changed, left, top, right, bottom);
+            return;
+        }
+        if (changed) {
+            buildLayout();
+        }
+    }
+
+    public void buildLayout() {
+        cellLayout.build(getMeasuredWidth(), getMeasuredHeight());
+    }
+
+    public void update(int mask) {
+        int placeHolderId = 0;
+        TLRPC.FileLocation photo = null;
+        if (user != null) {
+            if (user.photo != null) {
+                photo = user.photo.photo_small;
+            }
+            placeHolderId = AndroidUtilities.getUserAvatarForId(user.id);
+        } else if (chat != null) {
+            if (chat.photo != null) {
+                photo = chat.photo.photo_small;
+            }
+            if (chat.id > 0) {
+                placeHolderId = AndroidUtilities.getGroupAvatarForId(chat.id);
+            } else {
+                placeHolderId = AndroidUtilities.getBroadcastAvatarForId(chat.id);
+            }
+        }
+
+        if (mask != 0) {
+            boolean continueUpdate = false;
+            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 && user != null || (mask & MessagesController.UPDATE_MASK_CHAT_AVATAR) != 0 && chat != null) {
+                if (lastAvatar != null && photo == null || lastAvatar == null && photo != null && lastAvatar != null && photo != null && (lastAvatar.volume_id != photo.volume_id || lastAvatar.local_id != photo.local_id)) {
+                    continueUpdate = true;
+                }
+            }
+            if (!continueUpdate && (mask & MessagesController.UPDATE_MASK_STATUS) != 0 && user != null) {
+                int newStatus = 0;
+                if (user.status != null) {
+                    newStatus = user.status.expires;
+                }
+                if (newStatus != lastStatus) {
+                    continueUpdate = true;
+                }
+            }
+            if (!continueUpdate && ((mask & MessagesController.UPDATE_MASK_NAME) != 0 && user != null) || (mask & MessagesController.UPDATE_MASK_CHAT_NAME) != 0 && chat != null) {
+                String newName;
+                if (user != null) {
+                    newName = user.first_name + user.last_name;
+                } else {
+                    newName = chat.title;
+                }
+                if (!newName.equals(lastName)) {
+                    continueUpdate = true;
+                }
+            }
+
+            if (!continueUpdate) {
+                return;
+            }
+        }
+
+        if (user != null) {
+            if (user.status != null) {
+                lastStatus = user.status.expires;
+            } else {
+                lastStatus = 0;
+            }
+            lastName = user.first_name + user.last_name;
+        } else if (chat != null) {
+            lastName = chat.title;
+        }
+
+
+        lastAvatar = photo;
+        avatarImage.setImage(photo, "50_50", placeHolderId == 0 ? null : getResources().getDrawable(placeHolderId), false);
+
+        if (getMeasuredWidth() != 0 || getMeasuredHeight() != 0) {
+            buildLayout();
+        } else {
+            requestLayout();
+        }
+        postInvalidate();
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        if (user == null && chat == null && encryptedChat == null) {
+            return;
+        }
+
+        if (cellLayout == null) {
+            requestLayout();
+            return;
+        }
+
+        if (useSeparator) {
+            int h = getMeasuredHeight();
+            if (!usePadding) {
+                canvas.drawLine(0, h - 1, getMeasuredWidth(), h - 1, linePaint);
+            } else {
+                canvas.drawLine(AndroidUtilities.dp(11), h - 1, getMeasuredWidth() - AndroidUtilities.dp(11), h - 1, linePaint);
+            }
+        }
+
+        if (drawAlpha != 1) {
+            canvas.saveLayerAlpha(0, 0, canvas.getWidth(), canvas.getHeight(), (int)(255 * drawAlpha), Canvas.HAS_ALPHA_LAYER_SAVE_FLAG);
+        }
+
+        if (cellLayout.drawNameLock) {
+            setDrawableBounds(lockDrawable, cellLayout.nameLockLeft, cellLayout.nameLockTop);
+            lockDrawable.draw(canvas);
+        } else if (cellLayout.drawNameGroup) {
+            setDrawableBounds(groupDrawable, cellLayout.nameLockLeft, cellLayout.nameLockTop);
+            groupDrawable.draw(canvas);
+        } else if (cellLayout.drawNameBroadcast) {
+            setDrawableBounds(broadcastDrawable, cellLayout.nameLockLeft, cellLayout.nameLockTop);
+            broadcastDrawable.draw(canvas);
+        }
+
+        canvas.save();
+        canvas.translate(cellLayout.nameLeft, cellLayout.nameTop);
+        cellLayout.nameLayout.draw(canvas);
+        canvas.restore();
+
+        if (cellLayout.onlineLayout != null) {
+            canvas.save();
+            canvas.translate(cellLayout.onlineLeft, cellLayout.onlineTop);
+            cellLayout.onlineLayout.draw(canvas);
+            canvas.restore();
+        }
+
+        avatarImage.draw(canvas);
+    }
+
+    private class ChatOrUserCellLayout {
+        private int nameLeft;
+        private int nameTop;
+        private int nameWidth;
+        private StaticLayout nameLayout;
+        private boolean drawNameLock;
+        private boolean drawNameBroadcast;
+        private boolean drawNameGroup;
+        private int nameLockLeft;
+        private int nameLockTop;
+
+        private int onlineLeft;
+        private int onlineTop = AndroidUtilities.dp(36);
+        private int onlineWidth;
+        private StaticLayout onlineLayout;
+
+        private int avatarTop = AndroidUtilities.dp(7);
+        private int avatarLeft;
+
+        public void build(int width, int height) {
+            CharSequence nameString = "";
+            TextPaint currentNamePaint;
+
+            drawNameBroadcast = false;
+            drawNameLock = false;
+            drawNameGroup = false;
+
+            if (encryptedChat != null) {
+                drawNameLock = true;
+                if (!LocaleController.isRTL) {
+                    nameLockLeft = AndroidUtilities.dp(61 + (usePadding ? 11 : 0));
+                    nameLeft = AndroidUtilities.dp(65 + (usePadding ? 11 : 0)) + lockDrawable.getIntrinsicWidth();
+                } else {
+                    nameLockLeft = width - AndroidUtilities.dp(63 + (usePadding ? 11 : 0)) - lockDrawable.getIntrinsicWidth();
+                    nameLeft = usePadding ? AndroidUtilities.dp(11) : 0;
+                }
+                nameLockTop = AndroidUtilities.dp(15);
+            } else {
+                if (chat != null) {
+                    nameLockTop = AndroidUtilities.dp(26);
+                    if (chat.id < 0) {
+                        drawNameBroadcast = true;
+                    } else {
+                        drawNameGroup = true;
+                    }
+                    if (!LocaleController.isRTL) {
+                        nameLockLeft = AndroidUtilities.dp(61 + (usePadding ? 11 : 0));
+                        nameLeft = AndroidUtilities.dp(65 + (usePadding ? 11 : 0)) + (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
+                    } else {
+                        nameLockLeft = width - AndroidUtilities.dp(63 + (usePadding ? 11 : 0)) - (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
+                        nameLeft = usePadding ? AndroidUtilities.dp(11) : 0;
+                    }
+                } else {
+                    if (!LocaleController.isRTL) {
+                        nameLeft = AndroidUtilities.dp(61 + (usePadding ? 11 : 0));
+                    } else {
+                        nameLeft = usePadding ? AndroidUtilities.dp(11) : 0;
+                    }
+                }
+            }
+
+            if (currentName != null) {
+                nameString = currentName;
+            } else {
+                String nameString2 = "";
+                if (chat != null) {
+                    nameString2 = chat.title;
+                } else if (user != null) {
+                    nameString2 = ContactsController.formatName(user.first_name, user.last_name);
+                }
+                nameString = nameString2.replace("\n", " ");
+            }
+            if (nameString.length() == 0) {
+                if (user != null && user.phone != null && user.phone.length() != 0) {
+                    nameString = PhoneFormat.getInstance().format("+" + user.phone);
+                } else {
+                    nameString = LocaleController.getString("HiddenName", R.string.HiddenName);
+                }
+            }
+            if (encryptedChat != null) {
+                currentNamePaint = nameEncryptedPaint;
+            } else {
+                currentNamePaint = namePaint;
+            }
+
+            if (!LocaleController.isRTL) {
+                onlineWidth = nameWidth = width - nameLeft - AndroidUtilities.dp(3 + (usePadding ? 11 : 0));
+            } else {
+                onlineWidth = nameWidth = width - nameLeft - AndroidUtilities.dp(61 + (usePadding ? 11 : 0));
+            }
+            if (drawNameLock) {
+                nameWidth -= AndroidUtilities.dp(6) + lockDrawable.getIntrinsicWidth();
+            } else if (drawNameBroadcast) {
+                nameWidth -= AndroidUtilities.dp(6) + broadcastDrawable.getIntrinsicWidth();
+            }
+
+            CharSequence nameStringFinal = TextUtils.ellipsize(nameString, currentNamePaint, nameWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
+            nameLayout = new StaticLayout(nameStringFinal, currentNamePaint, nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+
+            if (chat == null) {
+                if (!LocaleController.isRTL) {
+                    onlineLeft = AndroidUtilities.dp(61 + (usePadding ? 11 : 0));
+                } else {
+                    onlineLeft = usePadding ? AndroidUtilities.dp(11) : 0;
+                }
+
+                CharSequence onlineString = "";
+                TextPaint currentOnlinePaint = offlinePaint;
+
+                if (subLabel != null) {
+                    onlineString = subLabel;
+                } else {
+                    onlineString = LocaleController.formatUserStatus(user);
+                    if (user != null && (user.id == UserConfig.getClientUserId() || user.status != null && user.status.expires > ConnectionsManager.getInstance().getCurrentTime())) {
+                        currentOnlinePaint = onlinePaint;
+                        onlineString = LocaleController.getString("Online", R.string.Online);
+                    }
+                }
+
+                CharSequence onlineStringFinal = TextUtils.ellipsize(onlineString, currentOnlinePaint, nameWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
+                onlineLayout = new StaticLayout(onlineStringFinal, currentOnlinePaint, nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+                nameTop = AndroidUtilities.dp(12);
+            } else {
+                onlineLayout = null;
+                nameTop = AndroidUtilities.dp(22);
+            }
+
+            if (!LocaleController.isRTL) {
+                avatarLeft = usePadding ? AndroidUtilities.dp(11) : 0;
+            } else {
+                avatarLeft = width - AndroidUtilities.dp(50 + (usePadding ? 11 : 0));
+            }
+            avatarImage.setImageCoords(avatarLeft, avatarTop, AndroidUtilities.dp(50), AndroidUtilities.dp(50));
+
+
+            double widthpx = 0;
+            float left = 0;
+            if (LocaleController.isRTL) {
+                if (nameLayout.getLineCount() > 0) {
+                    left = nameLayout.getLineLeft(0);
+                    if (left == 0) {
+                        widthpx = Math.ceil(nameLayout.getLineWidth(0));
+                        if (widthpx < nameWidth) {
+                            nameLeft += (nameWidth - widthpx);
+                        }
+                    }
+                }
+                if (onlineLayout != null && onlineLayout.getLineCount() > 0) {
+                    left = onlineLayout.getLineLeft(0);
+                    if (left == 0) {
+                        widthpx = Math.ceil(onlineLayout.getLineWidth(0));
+                        if (widthpx < onlineWidth) {
+                            onlineLeft += (onlineWidth - widthpx);
+                        }
+                    }
+                }
+            } else {
+                if (nameLayout.getLineCount() > 0) {
+                    left = nameLayout.getLineRight(0);
+                    if (left == nameWidth) {
+                        widthpx = Math.ceil(nameLayout.getLineWidth(0));
+                        if (widthpx < nameWidth) {
+                            nameLeft -= (nameWidth - widthpx);
+                        }
+                    }
+                }
+                if (onlineLayout != null && onlineLayout.getLineCount() > 0) {
+                    left = onlineLayout.getLineRight(0);
+                    if (left == onlineWidth) {
+                        widthpx = Math.ceil(onlineLayout.getLineWidth(0));
+                        if (widthpx < onlineWidth) {
+                            onlineLeft -= (onlineWidth - widthpx);
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/Cells/DialogCell.java b/TMessagesProj/src/main/java/org/tomato/ui/Cells/DialogCell.java
new file mode 100644
index 000000000..32dcfa687
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Cells/DialogCell.java
@@ -0,0 +1,756 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui.Cells;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.drawable.Drawable;
+import android.text.Html;
+import android.text.Layout;
+import android.text.StaticLayout;
+import android.text.TextPaint;
+import android.text.TextUtils;
+
+import org.tomato.PhoneFormat.PhoneFormat;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.ContactsController;
+import org.tomato.android.Emoji;
+import org.tomato.android.ImageReceiver;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MessageObject;
+import org.tomato.android.MessagesController;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
+
+public class DialogCell extends BaseCell {
+    private static TextPaint namePaint;
+    private static TextPaint nameEncryptedPaint;
+    private static TextPaint nameUnknownPaint;
+    private static TextPaint messagePaint;
+    private static TextPaint messagePrintingPaint;
+    private static TextPaint timePaint;
+    private static TextPaint countPaint;
+
+    private static Drawable checkDrawable;
+    private static Drawable halfCheckDrawable;
+    private static Drawable clockDrawable;
+    private static Drawable errorDrawable;
+    private static Drawable lockDrawable;
+    private static Drawable countDrawable;
+    private static Drawable groupDrawable;
+    private static Drawable broadcastDrawable;
+
+    private static Paint linePaint;
+
+    private TLRPC.TL_dialog currentDialog;
+    private ImageReceiver avatarImage;
+
+    private DialogCellLayout cellLayout;
+    private TLRPC.User user = null;
+    private TLRPC.Chat chat = null;
+    private TLRPC.EncryptedChat encryptedChat = null;
+    private CharSequence lastPrintString = null;
+
+    public boolean useSeparator = false;
+
+    private void init() {
+        if (namePaint == null) {
+            namePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            namePaint.setTextSize(AndroidUtilities.dp(19));
+            namePaint.setColor(0xff222222);
+            namePaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        }
+
+        if (nameEncryptedPaint == null) {
+            nameEncryptedPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            nameEncryptedPaint.setTextSize(AndroidUtilities.dp(19));
+            nameEncryptedPaint.setColor(0xff00a60e);
+            nameEncryptedPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        }
+
+        if (nameUnknownPaint == null) {
+            nameUnknownPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            nameUnknownPaint.setTextSize(AndroidUtilities.dp(19));
+            nameUnknownPaint.setColor(0xff316f9f);
+            nameUnknownPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+        }
+
+        if (messagePaint == null) {
+            messagePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            messagePaint.setTextSize(AndroidUtilities.dp(16));
+            messagePaint.setColor(0xff808080);
+        }
+
+        if (linePaint == null) {
+            linePaint = new Paint();
+            linePaint.setColor(0xffdcdcdc);
+        }
+
+        if (messagePrintingPaint == null) {
+            messagePrintingPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            messagePrintingPaint.setTextSize(AndroidUtilities.dp(16));
+            messagePrintingPaint.setColor(0xff316f9f);
+        }
+
+        if (timePaint == null) {
+            timePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            timePaint.setTextSize(AndroidUtilities.dp(14));
+            timePaint.setColor(0xff9e9e9e);
+        }
+
+        if (countPaint == null) {
+            countPaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            countPaint.setTextSize(AndroidUtilities.dp(13));
+            countPaint.setColor(0xffffffff);
+        }
+
+        if (lockDrawable == null) {
+            lockDrawable = getResources().getDrawable(R.drawable.ic_lock_green);
+        }
+
+        if (checkDrawable == null) {
+            checkDrawable = getResources().getDrawable(R.drawable.dialogs_check);
+        }
+
+        if (halfCheckDrawable == null) {
+            halfCheckDrawable = getResources().getDrawable(R.drawable.dialogs_halfcheck);
+        }
+
+        if (clockDrawable == null) {
+            clockDrawable = getResources().getDrawable(R.drawable.msg_clock);
+        }
+
+        if (errorDrawable == null) {
+            errorDrawable = getResources().getDrawable(R.drawable.dialogs_warning);
+        }
+
+        if (countDrawable == null) {
+            countDrawable = getResources().getDrawable(R.drawable.dialogs_badge);
+        }
+
+        if (groupDrawable == null) {
+            groupDrawable = getResources().getDrawable(R.drawable.grouplist);
+        }
+
+        if (broadcastDrawable == null) {
+            broadcastDrawable = getResources().getDrawable(R.drawable.broadcast);
+        }
+
+        if (avatarImage == null) {
+            avatarImage = new ImageReceiver(this);
+        }
+
+        if (cellLayout == null) {
+            cellLayout = new DialogCellLayout();
+        }
+    }
+
+    public DialogCell(Context context) {
+        super(context);
+        init();
+    }
+
+    public void setDialog(TLRPC.TL_dialog dialog) {
+        currentDialog = dialog;
+        update(0);
+    }
+
+    public TLRPC.TL_dialog getDialog() {
+        return currentDialog;
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        if (avatarImage != null) {
+            avatarImage.clearImage();
+        }
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), AndroidUtilities.dp(70));
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        if (currentDialog == null) {
+            super.onLayout(changed, left, top, right, bottom);
+            return;
+        }
+        if (changed) {
+            buildLayout();
+        }
+    }
+
+    public void buildLayout() {
+        cellLayout.build(getMeasuredWidth(), getMeasuredHeight());
+    }
+
+    public void update(int mask) {
+        if (mask != 0) {
+            boolean continueUpdate = false;
+            if ((mask & MessagesController.UPDATE_MASK_USER_PRINT) != 0) {
+                CharSequence printString = MessagesController.getInstance().printingStrings.get(currentDialog.id);
+                if (lastPrintString != null && printString == null || lastPrintString == null && printString != null || lastPrintString != null && printString != null && !lastPrintString.equals(printString)) {
+                    continueUpdate = true;
+                }
+            }
+            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0) {
+                if (chat == null) {
+                    continueUpdate = true;
+                }
+            }
+            if ((mask & MessagesController.UPDATE_MASK_NAME) != 0) {
+                if (chat == null) {
+                    continueUpdate = true;
+                }
+            }
+            if ((mask & MessagesController.UPDATE_MASK_CHAT_AVATAR) != 0) {
+                if (user == null) {
+                    continueUpdate = true;
+                }
+            }
+            if ((mask & MessagesController.UPDATE_MASK_CHAT_NAME) != 0) {
+                if (user == null) {
+                    continueUpdate = true;
+                }
+            }
+            if ((mask & MessagesController.UPDATE_MASK_READ_DIALOG_MESSAGE) != 0) {
+                continueUpdate = true;
+            }
+
+            if (!continueUpdate) {
+                return;
+            }
+        }
+        user = null;
+        chat = null;
+        encryptedChat = null;
+
+        int lower_id = (int)currentDialog.id;
+        int high_id = (int)(currentDialog.id >> 32);
+        if (lower_id != 0) {
+            if (high_id == 1) {
+                chat = MessagesController.getInstance().getChat(lower_id);
+            } else {
+                if (lower_id < 0) {
+                    chat = MessagesController.getInstance().getChat(-lower_id);
+                } else {
+                    user = MessagesController.getInstance().getUser(lower_id);
+                }
+            }
+        } else {
+            encryptedChat = MessagesController.getInstance().getEncryptedChat(high_id);
+            if (encryptedChat != null) {
+                user = MessagesController.getInstance().getUser(encryptedChat.user_id);
+            }
+        }
+
+        int placeHolderId = 0;
+        TLRPC.FileLocation photo = null;
+        if (user != null) {
+            if (user.photo != null) {
+                photo = user.photo.photo_small;
+            }
+            placeHolderId = AndroidUtilities.getUserAvatarForId(user.id);
+        } else if (chat != null) {
+            if (chat.photo != null) {
+                photo = chat.photo.photo_small;
+            }
+            if (chat.id > 0) {
+                placeHolderId = AndroidUtilities.getGroupAvatarForId(chat.id);
+            } else {
+                placeHolderId = AndroidUtilities.getBroadcastAvatarForId(chat.id);
+            }
+        }
+        avatarImage.setImage(photo, "50_50", placeHolderId == 0 ? null : getResources().getDrawable(placeHolderId), false);
+
+        if (getMeasuredWidth() != 0 || getMeasuredHeight() != 0) {
+            buildLayout();
+        } else {
+            requestLayout();
+        }
+
+        invalidate();
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        if (currentDialog == null) {
+            return;
+        }
+
+        if (cellLayout == null) {
+            requestLayout();
+            return;
+        }
+
+        if (cellLayout.drawNameLock) {
+            setDrawableBounds(lockDrawable, cellLayout.nameLockLeft, cellLayout.nameLockTop);
+            lockDrawable.draw(canvas);
+        } else if (cellLayout.drawNameGroup) {
+            setDrawableBounds(groupDrawable, cellLayout.nameLockLeft, cellLayout.nameLockTop);
+            groupDrawable.draw(canvas);
+        } else if (cellLayout.drawNameBroadcast) {
+            setDrawableBounds(broadcastDrawable, cellLayout.nameLockLeft, cellLayout.nameLockTop);
+            broadcastDrawable.draw(canvas);
+        }
+
+        if (cellLayout.nameLayout != null) {
+            canvas.save();
+            canvas.translate(cellLayout.nameLeft, cellLayout.nameTop);
+            cellLayout.nameLayout.draw(canvas);
+            canvas.restore();
+        }
+
+        canvas.save();
+        canvas.translate(cellLayout.timeLeft, cellLayout.timeTop);
+        cellLayout.timeLayout.draw(canvas);
+        canvas.restore();
+
+        canvas.save();
+        canvas.translate(cellLayout.messageLeft, cellLayout.messageTop);
+        cellLayout.messageLayout.draw(canvas);
+        canvas.restore();
+
+        if (cellLayout.drawClock) {
+            setDrawableBounds(clockDrawable, cellLayout.checkDrawLeft, cellLayout.checkDrawTop);
+            clockDrawable.draw(canvas);
+        } else if (cellLayout.drawCheck2) {
+            if (cellLayout.drawCheck1) {
+                setDrawableBounds(halfCheckDrawable, cellLayout.halfCheckDrawLeft, cellLayout.checkDrawTop);
+                halfCheckDrawable.draw(canvas);
+                setDrawableBounds(checkDrawable, cellLayout.checkDrawLeft, cellLayout.checkDrawTop);
+                checkDrawable.draw(canvas);
+            } else {
+                setDrawableBounds(checkDrawable, cellLayout.checkDrawLeft, cellLayout.checkDrawTop);
+                checkDrawable.draw(canvas);
+            }
+        }
+
+        if (cellLayout.drawError) {
+            setDrawableBounds(errorDrawable, cellLayout.errorLeft, cellLayout.errorTop);
+            errorDrawable.draw(canvas);
+        } else if (cellLayout.drawCount) {
+            setDrawableBounds(countDrawable, cellLayout.countLeft - AndroidUtilities.dp(5), cellLayout.countTop, cellLayout.countWidth + AndroidUtilities.dp(10), countDrawable.getIntrinsicHeight());
+            countDrawable.draw(canvas);
+            canvas.save();
+            canvas.translate(cellLayout.countLeft, cellLayout.countTop + AndroidUtilities.dp(3));
+            cellLayout.countLayout.draw(canvas);
+            canvas.restore();
+        }
+
+        avatarImage.draw(canvas);
+
+        if (useSeparator) {
+            int h = getMeasuredHeight();
+            if (AndroidUtilities.isTablet()) {
+                canvas.drawLine(0, h - 1, getMeasuredWidth(), h - 1, linePaint);
+            } else {
+                canvas.drawLine(AndroidUtilities.dp(11), h - 1, getMeasuredWidth() - AndroidUtilities.dp(11), h - 1, linePaint);
+            }
+        }
+    }
+
+    private class DialogCellLayout {
+        private int nameLeft;
+        private int nameTop = AndroidUtilities.dp(10);
+        private int nameWidth;
+        private StaticLayout nameLayout;
+        private boolean drawNameLock;
+        private boolean drawNameGroup;
+        private boolean drawNameBroadcast;
+        private int nameLockLeft;
+        private int nameLockTop;
+
+        private int timeLeft;
+        private int timeTop = AndroidUtilities.dp(13);
+        private int timeWidth;
+        private StaticLayout timeLayout;
+
+        private boolean drawCheck1;
+        private boolean drawCheck2;
+        private boolean drawClock;
+        private int checkDrawLeft;
+        private int checkDrawTop = AndroidUtilities.dp(15);
+        private int halfCheckDrawLeft;
+
+        private int messageTop = AndroidUtilities.dp(40);
+        private int messageLeft;
+        private int messageWidth;
+        private StaticLayout messageLayout;
+
+        private boolean drawError;
+        private int errorTop = AndroidUtilities.dp(37);
+        private int errorLeft;
+
+        private boolean drawCount;
+        private int countTop = AndroidUtilities.dp(37);
+        private int countLeft;
+        private int countWidth;
+        private StaticLayout countLayout;
+
+        private int avatarTop = AndroidUtilities.dp(8);
+        private int avatarLeft;
+
+        public void build(int width, int height) {
+            MessageObject message = MessagesController.getInstance().dialogMessage.get(currentDialog.top_message);
+            String nameString = "";
+            String timeString = "";
+            String countString = null;
+            CharSequence messageString = "";
+            CharSequence printingString = MessagesController.getInstance().printingStrings.get(currentDialog.id);
+            TextPaint currentNamePaint = namePaint;
+            TextPaint currentMessagePaint = messagePaint;
+            boolean checkMessage = true;
+
+            drawNameGroup = false;
+            drawNameBroadcast = false;
+            drawNameLock = false;
+
+            if (encryptedChat != null) {
+                drawNameLock = true;
+                nameLockTop = AndroidUtilities.dp(13);
+                if (!LocaleController.isRTL) {
+                    nameLockLeft = AndroidUtilities.dp(77);
+                    nameLeft = AndroidUtilities.dp(81) + lockDrawable.getIntrinsicWidth();
+                } else {
+                    nameLockLeft = width - AndroidUtilities.dp(77) - lockDrawable.getIntrinsicWidth();
+                    nameLeft = AndroidUtilities.dp(14);
+                }
+            } else {
+                if (chat != null) {
+                    if (chat.id < 0) {
+                        drawNameBroadcast = true;
+                    } else {
+                        drawNameGroup = true;
+                    }
+                    nameLockTop = AndroidUtilities.dp(14);
+                    if (!LocaleController.isRTL) {
+                        nameLockLeft = AndroidUtilities.dp(77);
+                        nameLeft = AndroidUtilities.dp(81) + (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
+                    } else {
+                        nameLockLeft = width - AndroidUtilities.dp(77) - (drawNameGroup ? groupDrawable.getIntrinsicWidth() : broadcastDrawable.getIntrinsicWidth());
+                        nameLeft = AndroidUtilities.dp(14);
+                    }
+                } else {
+                    if (!LocaleController.isRTL) {
+                        nameLeft = AndroidUtilities.dp(77);
+                    } else {
+                        nameLeft = AndroidUtilities.dp(14);
+                    }
+                }
+            }
+
+            if (message == null) {
+                if (printingString != null) {
+                    lastPrintString = messageString = printingString;
+                    currentMessagePaint = messagePrintingPaint;
+                } else {
+                    lastPrintString = null;
+                    if (encryptedChat != null) {
+                        currentMessagePaint = messagePrintingPaint;
+                        if (encryptedChat instanceof TLRPC.TL_encryptedChatRequested) {
+                            messageString = LocaleController.getString("EncryptionProcessing", R.string.EncryptionProcessing);
+                        } else if (encryptedChat instanceof TLRPC.TL_encryptedChatWaiting) {
+                            if (user != null && user.first_name != null) {
+                                messageString = LocaleController.formatString("AwaitingEncryption", R.string.AwaitingEncryption, user.first_name);
+                            } else {
+                                messageString = LocaleController.formatString("AwaitingEncryption", R.string.AwaitingEncryption, "");
+                            }
+                        } else if (encryptedChat instanceof TLRPC.TL_encryptedChatDiscarded) {
+                            messageString = LocaleController.getString("EncryptionRejected", R.string.EncryptionRejected);
+                        } else if (encryptedChat instanceof TLRPC.TL_encryptedChat) {
+                            if (encryptedChat.admin_id == UserConfig.getClientUserId()) {
+                                if (user != null && user.first_name != null) {
+                                    messageString = LocaleController.formatString("EncryptedChatStartedOutgoing", R.string.EncryptedChatStartedOutgoing, user.first_name);
+                                } else {
+                                    messageString = LocaleController.formatString("EncryptedChatStartedOutgoing", R.string.EncryptedChatStartedOutgoing, "");
+                                }
+                            } else {
+                                messageString = LocaleController.getString("EncryptedChatStartedIncoming", R.string.EncryptedChatStartedIncoming);
+                            }
+                        }
+                    }
+                }
+                if (currentDialog.last_message_date != 0) {
+                    timeString = LocaleController.stringForMessageListDate(currentDialog.last_message_date);
+                }
+                drawCheck1 = false;
+                drawCheck2 = false;
+                drawClock = false;
+                drawCount = false;
+                drawError = false;
+            } else {
+                TLRPC.User fromUser = MessagesController.getInstance().getUser(message.messageOwner.from_id);
+
+                if (currentDialog.last_message_date != 0) {
+                    timeString = LocaleController.stringForMessageListDate(currentDialog.last_message_date);
+                } else {
+                    timeString = LocaleController.stringForMessageListDate(message.messageOwner.date);
+                }
+                if (printingString != null) {
+                    lastPrintString = messageString = printingString;
+                    currentMessagePaint = messagePrintingPaint;
+                } else {
+                    lastPrintString = null;
+                    if (message.messageOwner instanceof TLRPC.TL_messageService) {
+                        messageString = message.messageText;
+                        currentMessagePaint = messagePrintingPaint;
+                    } else {
+                        if (chat != null && chat.id > 0) {
+                            String name = "";
+                            if (message.isFromMe()) {
+                                name = LocaleController.getString("FromYou", R.string.FromYou);
+                            } else {
+                                if (fromUser != null) {
+                                    if (fromUser.first_name.length() > 0) {
+                                        name = fromUser.first_name;
+                                    } else {
+                                        name = fromUser.last_name;
+                                    }
+                                }
+                            }
+                            checkMessage = false;
+                            if (message.messageOwner.media != null && !(message.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
+                                currentMessagePaint = messagePrintingPaint;
+                                messageString = Emoji.replaceEmoji(Html.fromHtml(String.format("<font color=#316f9f>%s:</font> <font color=#316f9f>%s</font>", name, message.messageText)), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20));
+                            } else {
+                                if (message.messageOwner.message != null) {
+                                    messageString = Emoji.replaceEmoji(Html.fromHtml(String.format("<font color=#316f9f>%s:</font> <font color=#808080>%s</font>", name, message.messageOwner.message.replace("\n", " ").replace("<", "&lt;").replace(">", "&gt;"))), messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20));
+                                }
+                            }
+                        } else {
+                            messageString = message.messageText;
+                            if (message.messageOwner.media != null && !(message.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
+                                currentMessagePaint = messagePrintingPaint;
+                            }
+                        }
+                    }
+                }
+
+                if (currentDialog.unread_count != 0) {
+                    drawCount = true;
+                    countString = String.format("%d", currentDialog.unread_count);
+                } else {
+                    drawCount = false;
+                }
+
+                if (message.isFromMe() && message.isOut()) {
+                    if (message.isSending()) {
+                        drawCheck1 = false;
+                        drawCheck2 = false;
+                        drawClock = true;
+                        drawError = false;
+                    } else if (message.isSendError()) {
+                        drawCheck1 = false;
+                        drawCheck2 = false;
+                        drawClock = false;
+                        drawError = true;
+                        drawCount = false;
+                    } else if (message.isSent()) {
+                        if (!message.isUnread()) {
+                            drawCheck1 = true;
+                            drawCheck2 = true;
+                        } else {
+                            drawCheck1 = false;
+                            drawCheck2 = true;
+                        }
+                        drawClock = false;
+                        drawError = false;
+                    }
+                } else {
+                    drawCheck1 = false;
+                    drawCheck2 = false;
+                    drawClock = false;
+                    drawError = false;
+                }
+            }
+
+            timeWidth = (int)Math.ceil(timePaint.measureText(timeString));
+            timeLayout = new StaticLayout(timeString, timePaint, timeWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+            if (!LocaleController.isRTL) {
+                timeLeft = width - AndroidUtilities.dp(11) - timeWidth;
+            } else {
+                timeLeft = AndroidUtilities.dp(11);
+            }
+
+            if (chat != null) {
+                nameString = chat.title;
+            } else if (user != null) {
+                if (user.id / 1000 != 777 && user.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(user.id) == null) {
+                    if (ContactsController.getInstance().contactsDict.size() == 0 && (!ContactsController.getInstance().contactsLoaded || ContactsController.getInstance().isLoadingContacts())) {
+                        nameString = ContactsController.formatName(user.first_name, user.last_name);
+                    } else {
+                        if (user.phone != null && user.phone.length() != 0) {
+                            nameString = PhoneFormat.getInstance().format("+" + user.phone);
+                        } else {
+                            currentNamePaint = nameUnknownPaint;
+                            nameString = ContactsController.formatName(user.first_name, user.last_name);
+                        }
+                    }
+                } else {
+                    nameString = ContactsController.formatName(user.first_name, user.last_name);
+                }
+                if (encryptedChat != null) {
+                    currentNamePaint = nameEncryptedPaint;
+                }
+            }
+            if (nameString.length() == 0) {
+                nameString = LocaleController.getString("HiddenName", R.string.HiddenName);
+            }
+
+            if (!LocaleController.isRTL) {
+                nameWidth = width - nameLeft - AndroidUtilities.dp(14) - timeWidth;
+            } else {
+                nameWidth = width - nameLeft - AndroidUtilities.dp(77) - timeWidth;
+                nameLeft += timeWidth;
+            }
+            if (drawNameLock) {
+                nameWidth -= AndroidUtilities.dp(4) + lockDrawable.getIntrinsicWidth();
+            } else if (drawNameGroup) {
+                nameWidth -= AndroidUtilities.dp(4) + groupDrawable.getIntrinsicWidth();
+            } else if (drawNameBroadcast) {
+                nameWidth -= AndroidUtilities.dp(4) + broadcastDrawable.getIntrinsicWidth();
+            }
+            if (drawClock) {
+                int w = clockDrawable.getIntrinsicWidth() + AndroidUtilities.dp(2);
+                nameWidth -= w;
+                if (!LocaleController.isRTL) {
+                    checkDrawLeft = timeLeft - w;
+                } else {
+                    checkDrawLeft = timeLeft + timeWidth + AndroidUtilities.dp(2);
+                    nameLeft += w;
+                }
+            } else if (drawCheck2) {
+                int w = checkDrawable.getIntrinsicWidth() + AndroidUtilities.dp(2);
+                nameWidth -= w;
+                if (drawCheck1) {
+                    nameWidth -= halfCheckDrawable.getIntrinsicWidth() - AndroidUtilities.dp(5);
+                    if (!LocaleController.isRTL) {
+                        halfCheckDrawLeft = timeLeft - w;
+                        checkDrawLeft = halfCheckDrawLeft - AndroidUtilities.dp(5);
+                    } else {
+                        checkDrawLeft = timeLeft + timeWidth + AndroidUtilities.dp(2);
+                        halfCheckDrawLeft = checkDrawLeft + AndroidUtilities.dp(5);
+                        nameLeft += w + halfCheckDrawable.getIntrinsicWidth() - AndroidUtilities.dp(5);
+                    }
+                } else {
+                    if (!LocaleController.isRTL) {
+                        checkDrawLeft = timeLeft - w;
+                    } else {
+                        checkDrawLeft = timeLeft + timeWidth + AndroidUtilities.dp(2);
+                        nameLeft += w;
+                    }
+                }
+            }
+
+            CharSequence nameStringFinal = TextUtils.ellipsize(nameString.replace("\n", " "), currentNamePaint, nameWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
+            try {
+                nameLayout = new StaticLayout(nameStringFinal, currentNamePaint, nameWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+
+            messageWidth = width - AndroidUtilities.dp(88);
+            if (!LocaleController.isRTL) {
+                messageLeft = AndroidUtilities.dp(77);
+                avatarLeft = AndroidUtilities.dp(11);
+            } else {
+                messageLeft = AndroidUtilities.dp(11);
+                avatarLeft = width - AndroidUtilities.dp(65);
+            }
+            avatarImage.setImageCoords(avatarLeft, avatarTop, AndroidUtilities.dp(54), AndroidUtilities.dp(54));
+            if (drawError) {
+                int w = errorDrawable.getIntrinsicWidth() + AndroidUtilities.dp(8);
+                messageWidth -= w;
+                if (!LocaleController.isRTL) {
+                    errorLeft = width - errorDrawable.getIntrinsicWidth() - AndroidUtilities.dp(11);
+                } else {
+                    errorLeft = AndroidUtilities.dp(11);
+                    messageLeft += w;
+                }
+            } else if (countString != null) {
+                countWidth = Math.max(AndroidUtilities.dp(12), (int)Math.ceil(countPaint.measureText(countString)));
+                countLayout = new StaticLayout(countString, countPaint, countWidth, Layout.Alignment.ALIGN_CENTER, 1.0f, 0.0f, false);
+                int w = countWidth + AndroidUtilities.dp(18);
+                messageWidth -= w;
+                if (!LocaleController.isRTL) {
+                    countLeft = width - countWidth - AndroidUtilities.dp(16);
+                } else {
+                    countLeft = AndroidUtilities.dp(16);
+                    messageLeft += w;
+                }
+                drawCount = true;
+            } else {
+                drawCount = false;
+            }
+
+            if (checkMessage) {
+                if (messageString == null) {
+                    messageString = "";
+                }
+                String mess = messageString.toString().replace("\n", " ");
+                if (mess.length() > 150) {
+                    mess = mess.substring(0, 150);
+                }
+                messageString = Emoji.replaceEmoji(mess, messagePaint.getFontMetricsInt(), AndroidUtilities.dp(20));
+            }
+
+            CharSequence messageStringFinal = TextUtils.ellipsize(messageString, currentMessagePaint, messageWidth - AndroidUtilities.dp(12), TextUtils.TruncateAt.END);
+            messageLayout = new StaticLayout(messageStringFinal, currentMessagePaint, messageWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+
+            double widthpx = 0;
+            float left = 0;
+            if (LocaleController.isRTL) {
+                if (nameLayout != null && nameLayout.getLineCount() > 0) {
+                    left = nameLayout.getLineLeft(0);
+                    if (left == 0) {
+                        widthpx = Math.ceil(nameLayout.getLineWidth(0));
+                        if (widthpx < nameWidth) {
+                            nameLeft += (nameWidth - widthpx);
+                        }
+                    }
+                }
+                if (messageLayout.getLineCount() > 0) {
+                    left = messageLayout.getLineLeft(0);
+                    if (left == 0) {
+                        widthpx = Math.ceil(messageLayout.getLineWidth(0));
+                        if (widthpx < messageWidth) {
+                            messageLeft += (messageWidth - widthpx);
+                        }
+                    }
+                }
+            } else {
+                if (nameLayout != null && nameLayout.getLineCount() > 0) {
+                    left = nameLayout.getLineRight(0);
+                    if (left == nameWidth) {
+                        widthpx = Math.ceil(nameLayout.getLineWidth(0));
+                        if (widthpx < nameWidth) {
+                            nameLeft -= (nameWidth - widthpx);
+                        }
+                    }
+                }
+                if (messageLayout.getLineCount() > 0) {
+                    left = messageLayout.getLineRight(0);
+                    if (left == messageWidth) {
+                        widthpx = Math.ceil(messageLayout.getLineWidth(0));
+                        if (widthpx < messageWidth) {
+                            messageLeft -= (messageWidth - widthpx);
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/ChatActivity.java
new file mode 100644
index 000000000..32d42a00f
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/ChatActivity.java
@@ -0,0 +1,3388 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.animation.Animator;
+import android.animation.AnimatorSet;
+import android.animation.ObjectAnimator;
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
+import android.content.res.Configuration;
+import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Bundle;
+import android.provider.MediaStore;
+import android.text.Html;
+import android.text.TextUtils;
+import android.util.SparseArray;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.webkit.MimeTypeMap;
+import android.widget.AbsListView;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import org.tomato.PhoneFormat.PhoneFormat;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.ContactsController;
+import org.tomato.android.ImageReceiver;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MediaController;
+import org.tomato.android.MessageObject;
+import org.tomato.android.MessagesController;
+import org.tomato.android.MessagesStorage;
+import org.tomato.android.NotificationCenter;
+import org.tomato.android.NotificationsController;
+import org.tomato.android.SendMessagesHelper;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLoader;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
+import org.tomato.messenger.Utilities;
+import org.tomato.ui.Adapters.BaseFragmentAdapter;
+import org.tomato.ui.Cells.ChatActionCell;
+import org.tomato.ui.Cells.ChatAudioCell;
+import org.tomato.ui.Cells.ChatBaseCell;
+import org.tomato.ui.Cells.ChatContactCell;
+import org.tomato.ui.Cells.ChatMediaCell;
+import org.tomato.ui.Cells.ChatMessageCell;
+import org.tomato.ui.Views.ActionBar.ActionBarLayer;
+import org.tomato.ui.Views.ActionBar.ActionBarMenu;
+import org.tomato.ui.Views.ActionBar.ActionBarMenuItem;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+import org.tomato.ui.Views.BackupImageView;
+import org.tomato.ui.Views.ChatActivityEnterView;
+import org.tomato.ui.Views.LayoutListView;
+import org.tomato.ui.Views.SizeNotifierRelativeLayout;
+import org.tomato.ui.Views.TimerButton;
+import org.tomato.ui.Views.TypingDotsDrawable;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.concurrent.Semaphore;
+
+public class ChatActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, MessagesActivity.MessagesActivityDelegate,
+        PhotoViewer.PhotoViewerProvider {
+
+    private TLRPC.Chat currentChat;
+    private TLRPC.User currentUser;
+    private TLRPC.EncryptedChat currentEncryptedChat;
+    private boolean userBlocked = false;
+
+    private View topPanel;
+    private View progressView;
+    private View bottomOverlay;
+    private ChatAdapter chatAdapter;
+    private ChatActivityEnterView chatActivityEnterView;
+    private View timeItem;
+    private View menuItem;
+    private LayoutListView chatListView;
+    private BackupImageView avatarImageView;
+    private TextView bottomOverlayChatText;
+    private View bottomOverlayChat;
+    private TypingDotsDrawable typingDotsDrawable;
+    private View emptyViewContainer;
+    private ArrayList<View> actionModeViews = new ArrayList<View>();
+
+    private TextView bottomOverlayText;
+
+    private MessageObject selectedObject;
+    private MessageObject forwaringMessage;
+    private TextView secretViewStatusTextView;
+    private TimerButton timerButton;
+    private TextView selectedMessagesCountTextView;
+    private boolean paused = true;
+    private boolean readWhenResume = false;
+
+    private int readWithDate = 0;
+    private int readWithMid = 0;
+    private boolean scrollToTopOnResume = false;
+    private boolean scrollToTopUnReadOnResume = false;
+    private boolean isCustomTheme = false;
+    private ImageView topPlaneClose;
+    private View pagedownButton;
+    private TextView topPanelText;
+    private long dialog_id;
+    private boolean isBroadcast = false;
+    private HashMap<Integer, MessageObject> selectedMessagesIds = new HashMap<Integer, MessageObject>();
+    private HashMap<Integer, MessageObject> selectedMessagesCanCopyIds = new HashMap<Integer, MessageObject>();
+
+    private HashMap<Integer, MessageObject> messagesDict = new HashMap<Integer, MessageObject>();
+    private HashMap<String, ArrayList<MessageObject>> messagesByDays = new HashMap<String, ArrayList<MessageObject>>();
+    private ArrayList<MessageObject> messages = new ArrayList<MessageObject>();
+    private int maxMessageId = Integer.MAX_VALUE;
+    private int minMessageId = Integer.MIN_VALUE;
+    private int maxDate = Integer.MIN_VALUE;
+    private boolean endReached = false;
+    private boolean loading = false;
+    private boolean cacheEndReaced = false;
+    private boolean firstLoading = true;
+    private int loadsCount = 0;
+
+    private int minDate = 0;
+    private boolean first = true;
+    private int unread_to_load = 0;
+    private int first_unread_id = 0;
+    private int last_unread_id = 0;
+    private boolean unread_end_reached = true;
+    private boolean loadingForward = false;
+    private MessageObject unreadMessageObject = null;
+
+    private String currentPicturePath;
+
+    private TLRPC.ChatParticipants info = null;
+    private int onlineCount = -1;
+
+    private CharSequence lastPrintString;
+
+    private long chatEnterTime = 0;
+    private long chatLeaveTime = 0;
+
+    private String startVideoEdit = null;
+
+    private Runnable openSecretPhotoRunnable = null;
+    private float startX = 0;
+    private float startY = 0;
+
+    private final static int copy = 1;
+    private final static int forward = 2;
+    private final static int delete = 3;
+    private final static int chat_enc_timer = 4;
+    private final static int chat_menu_attach = 5;
+    private final static int attach_photo = 6;
+    private final static int attach_gallery = 7;
+    private final static int attach_video = 8;
+    private final static int attach_document = 9;
+    private final static int attach_location = 10;
+    private final static int chat_menu_avatar = 11;
+
+    AdapterView.OnItemLongClickListener onItemLongClickListener = new AdapterView.OnItemLongClickListener() {
+        @Override
+        public boolean onItemLongClick(AdapterView<?> adapter, View view, int position, long id) {
+            if (!actionBarLayer.isActionModeShowed()) {
+                createMenu(view, false);
+            }
+            return true;
+        }
+    };
+
+    AdapterView.OnItemClickListener onItemClickListener = new AdapterView.OnItemClickListener() {
+        @Override
+        public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+            if (actionBarLayer.isActionModeShowed()) {
+                processRowSelect(view);
+                return;
+            }
+            createMenu(view, true);
+        }
+    };
+
+    public ChatActivity(Bundle args) {
+        super(args);
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        final int chatId = arguments.getInt("chat_id", 0);
+        final int userId = arguments.getInt("user_id", 0);
+        final int encId = arguments.getInt("enc_id", 0);
+        scrollToTopOnResume = arguments.getBoolean("scrollToTopOnResume", false);
+
+        if (chatId != 0) {
+            currentChat = MessagesController.getInstance().getChat(chatId);
+            if (currentChat == null) {
+                final Semaphore semaphore = new Semaphore(0);
+                MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
+                    @Override
+                    public void run() {
+                        currentChat = MessagesStorage.getInstance().getChat(chatId);
+                        semaphore.release();
+                    }
+                });
+                try {
+                    semaphore.acquire();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+                if (currentChat != null) {
+                    MessagesController.getInstance().putChat(currentChat, true);
+                } else {
+                    return false;
+                }
+            }
+            if (chatId > 0) {
+                dialog_id = -chatId;
+            } else {
+                isBroadcast = true;
+                dialog_id = AndroidUtilities.makeBroadcastId(chatId);
+            }
+            Semaphore semaphore = null;
+            if (isBroadcast) {
+                semaphore = new Semaphore(0);
+            }
+            MessagesController.getInstance().loadChatInfo(currentChat.id, semaphore);
+            if (isBroadcast) {
+                try {
+                    semaphore.acquire();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        } else if (userId != 0) {
+            currentUser = MessagesController.getInstance().getUser(userId);
+            if (currentUser == null) {
+                final Semaphore semaphore = new Semaphore(0);
+                MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
+                    @Override
+                    public void run() {
+                        currentUser = MessagesStorage.getInstance().getUser(userId);
+                        semaphore.release();
+                    }
+                });
+                try {
+                    semaphore.acquire();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+                if (currentUser != null) {
+                    MessagesController.getInstance().putUser(currentUser, true);
+                } else {
+                    return false;
+                }
+            }
+            dialog_id = userId;
+        } else if (encId != 0) {
+            currentEncryptedChat = MessagesController.getInstance().getEncryptedChat(encId);
+            if (currentEncryptedChat == null) {
+                final Semaphore semaphore = new Semaphore(0);
+                MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
+                    @Override
+                    public void run() {
+                        currentEncryptedChat = MessagesStorage.getInstance().getEncryptedChat(encId);
+                        semaphore.release();
+                    }
+                });
+                try {
+                    semaphore.acquire();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+                if (currentEncryptedChat != null) {
+                    MessagesController.getInstance().putEncryptedChat(currentEncryptedChat, true);
+                } else {
+                    return false;
+                }
+            }
+            currentUser = MessagesController.getInstance().getUser(currentEncryptedChat.user_id);
+            if (currentUser == null) {
+                final Semaphore semaphore = new Semaphore(0);
+                MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
+                    @Override
+                    public void run() {
+                        currentUser = MessagesStorage.getInstance().getUser(currentEncryptedChat.user_id);
+                        semaphore.release();
+                    }
+                });
+                try {
+                    semaphore.acquire();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+                if (currentUser != null) {
+                    MessagesController.getInstance().putUser(currentUser, true);
+                } else {
+                    return false;
+                }
+            }
+            dialog_id = ((long)encId) << 32;
+            maxMessageId = Integer.MIN_VALUE;
+            minMessageId = Integer.MAX_VALUE;
+            MediaController.getInstance().startMediaObserver();
+        } else {
+            return false;
+        }
+        chatActivityEnterView = new ChatActivityEnterView();
+        chatActivityEnterView.setDialogId(dialog_id);
+        chatActivityEnterView.setDelegate(new ChatActivityEnterView.ChatActivityEnterViewDelegate() {
+            @Override
+            public void onMessageSend() {
+                chatListView.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+                    }
+                });
+            }
+
+            @Override
+            public void needSendTyping() {
+                MessagesController.getInstance().sendTyping(dialog_id, classGuid);
+            }
+        });
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceivedNewMessages);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeChats);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesRead);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesDeleted);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByServer);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByAck);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageSendError);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.chatInfoDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.contactsDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatUpdated);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesReadedEncrypted);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.removeAllMessagesFromDialog);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioProgressDidChanged);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioDidReset);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.screenshotTook);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.blockedUsersDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileNewChunkAvailable);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.didCreatedNewDeleteTask);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioDidStarted);
+
+        super.onFragmentCreate();
+
+        loading = true;
+
+        MessagesController.getInstance().loadMessages(dialog_id, AndroidUtilities.isTablet() ? 30 : 20, 0, true, 0, classGuid, true, false, null);
+
+        if (currentUser != null) {
+            userBlocked = MessagesController.getInstance().blockedUsers.contains(currentUser.id);
+        }
+
+        if (AndroidUtilities.isTablet()) {
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.openedChatChanged, dialog_id, false);
+        }
+
+        typingDotsDrawable = new TypingDotsDrawable();
+        typingDotsDrawable.setIsChat(currentChat != null);
+
+        if (currentEncryptedChat != null && AndroidUtilities.getMyLayerVersion(currentEncryptedChat.layer) != SendMessagesHelper.CURRENT_SECRET_CHAT_LAYER) {
+            SendMessagesHelper.getInstance().sendNotifyLayerMessage(currentEncryptedChat, null);
+        }
+
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        if (chatActivityEnterView != null) {
+            chatActivityEnterView.onDestroy();
+        }
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceivedNewMessages);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesRead);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesDeleted);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageReceivedByServer);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageReceivedByAck);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageSendError);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.chatInfoDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatUpdated);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesReadedEncrypted);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.removeAllMessagesFromDialog);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.contactsDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioProgressDidChanged);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioDidReset);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.screenshotTook);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.blockedUsersDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileNewChunkAvailable);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didCreatedNewDeleteTask);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioDidStarted);
+        if (AndroidUtilities.isTablet()) {
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.openedChatChanged, dialog_id, true);
+        }
+        if (currentEncryptedChat != null) {
+            MediaController.getInstance().stopMediaObserver();
+        }
+
+        AndroidUtilities.unlockOrientation(getParentActivity());
+        MediaController.getInstance().stopAudio();
+    }
+
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
+            if (AndroidUtilities.isTablet()) {
+                actionBarLayer.setExtraLeftMargin(4);
+            }
+            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
+            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    } else if (id == -2) {
+                        selectedMessagesIds.clear();
+                        selectedMessagesCanCopyIds.clear();
+                        actionBarLayer.hideActionMode();
+                        updateVisibleRows();
+                    } else if (id == attach_photo) {
+                        try {
+                            Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
+                            File image = Utilities.generatePicturePath();
+                            if (image != null) {
+                                takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(image));
+                                currentPicturePath = image.getAbsolutePath();
+                            }
+                            startActivityForResult(takePictureIntent, 0);
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                    } else if (id == attach_gallery) {
+                        PhotoPickerActivity fragment = new PhotoPickerActivity();
+                        fragment.setDelegate(new PhotoPickerActivity.PhotoPickerActivityDelegate() {
+                            @Override
+                            public void didSelectPhotos(ArrayList<String> photos) {
+                                SendMessagesHelper.prepareSendingPhotos(photos, null, dialog_id);
+                            }
+
+                            @Override
+                            public void startPhotoSelectActivity() {
+                                try {
+                                    Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
+                                    photoPickerIntent.setType("image/*");
+                                    startActivityForResult(photoPickerIntent, 1);
+                                } catch (Exception e) {
+                                    FileLog.e("tmessages", e);
+                                }
+                            }
+                        });
+                        presentFragment(fragment);
+                    } else if (id == attach_video) {
+                        try {
+                            Intent pickIntent = new Intent();
+                            pickIntent.setType("video/*");
+                            pickIntent.setAction(Intent.ACTION_GET_CONTENT);
+                            pickIntent.putExtra(MediaStore.EXTRA_SIZE_LIMIT, (long) (1024 * 1024 * 1000));
+                            Intent takeVideoIntent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);
+                            File video = Utilities.generateVideoPath();
+                            if (video != null) {
+                                if (Build.VERSION.SDK_INT >= 18) {
+                                    takeVideoIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(video));
+                                }
+                                takeVideoIntent.putExtra(MediaStore.EXTRA_SIZE_LIMIT, (long) (1024 * 1024 * 1000));
+                                currentPicturePath = video.getAbsolutePath();
+                            }
+                            Intent chooserIntent = Intent.createChooser(pickIntent, "");
+                            chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS, new Intent[]{takeVideoIntent});
+
+                            startActivityForResult(chooserIntent, 2);
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                    } else if (id == attach_location) {
+                        if (!isGoogleMapsInstalled()) {
+                            return;
+                        }
+                        LocationActivity fragment = new LocationActivity();
+                        fragment.setDelegate(new LocationActivity.LocationActivityDelegate() {
+                            @Override
+                            public void didSelectLocation(double latitude, double longitude) {
+                                SendMessagesHelper.getInstance().sendMessage(latitude, longitude, dialog_id);
+                                if (chatListView != null) {
+                                    chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+                                }
+                                if (paused) {
+                                    scrollToTopOnResume = true;
+                                }
+                            }
+                        });
+                        presentFragment(fragment);
+                    } else if (id == attach_document) {
+                        DocumentSelectActivity fragment = new DocumentSelectActivity();
+                        fragment.setDelegate(new DocumentSelectActivity.DocumentSelectActivityDelegate() {
+                            @Override
+                            public void didSelectFile(DocumentSelectActivity activity, String path) {
+                                activity.finishFragment();
+                                SendMessagesHelper.prepareSendingDocument(path, path, dialog_id);
+                            }
+
+                            @Override
+                            public void startDocumentSelectActivity() {
+                                try {
+                                    Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
+                                    photoPickerIntent.setType("*/*");
+                                    startActivityForResult(photoPickerIntent, 21);
+                                } catch (Exception e) {
+                                    FileLog.e("tmessages", e);
+                                }
+                            }
+                        });
+                        presentFragment(fragment);
+                    } else if (id == chat_menu_avatar) {
+                        if (currentUser != null) {
+                            Bundle args = new Bundle();
+                            args.putInt("user_id", currentUser.id);
+                            if (currentEncryptedChat != null) {
+                                args.putLong("dialog_id", dialog_id);
+                            }
+                            presentFragment(new UserProfileActivity(args));
+                        } else if (currentChat != null) {
+                            if (info != null && info instanceof TLRPC.TL_chatParticipantsForbidden) {
+                                return;
+                            }
+                            int count = currentChat.participants_count;
+                            if (info != null) {
+                                count = info.participants.size();
+                            }
+                            if (count == 0 || currentChat.left || currentChat instanceof TLRPC.TL_chatForbidden) {
+                                return;
+                            }
+                            Bundle args = new Bundle();
+                            args.putInt("chat_id", currentChat.id);
+                            ChatProfileActivity fragment = new ChatProfileActivity(args);
+                            fragment.setChatInfo(info);
+                            presentFragment(fragment);
+                        }
+                    } else if (id == copy) {
+                        String str = "";
+                        ArrayList<Integer> ids = new ArrayList<Integer>(selectedMessagesCanCopyIds.keySet());
+                        if (currentEncryptedChat == null) {
+                            Collections.sort(ids);
+                        } else {
+                            Collections.sort(ids, Collections.reverseOrder());
+                        }
+                        for (Integer messageId : ids) {
+                            MessageObject messageObject = selectedMessagesCanCopyIds.get(messageId);
+                            if (str.length() != 0) {
+                                str += "\n";
+                            }
+                            if (messageObject.messageOwner.message != null) {
+                                str += messageObject.messageOwner.message;
+                            } else {
+                                str += messageObject.messageText;
+                            }
+                        }
+                        if (str.length() != 0) {
+                            if (Build.VERSION.SDK_INT < 11) {
+                                android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                                clipboard.setText(str);
+                            } else {
+                                android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                                android.content.ClipData clip = android.content.ClipData.newPlainText("label", str);
+                                clipboard.setPrimaryClip(clip);
+                            }
+                        }
+                        selectedMessagesIds.clear();
+                        selectedMessagesCanCopyIds.clear();
+                        actionBarLayer.hideActionMode();
+                        updateVisibleRows();
+                    } else if (id == delete) {
+                        ArrayList<Integer> ids = new ArrayList<Integer>(selectedMessagesIds.keySet());
+                        ArrayList<Long> random_ids = null;
+                        if (currentEncryptedChat != null) {
+                            random_ids = new ArrayList<Long>();
+                            for (HashMap.Entry<Integer, MessageObject> entry : selectedMessagesIds.entrySet()) {
+                                MessageObject msg = entry.getValue();
+                                if (msg.messageOwner.random_id != 0 && msg.type != 10) {
+                                    random_ids.add(msg.messageOwner.random_id);
+                                }
+                            }
+                        }
+                        MessagesController.getInstance().deleteMessages(ids, random_ids, currentEncryptedChat);
+                        actionBarLayer.hideActionMode();
+                    } else if (id == forward) {
+                        Bundle args = new Bundle();
+                        args.putBoolean("onlySelect", true);
+                        args.putBoolean("serverOnly", true);
+                        args.putString("selectAlertString", LocaleController.getString("ForwardMessagesTo", R.string.ForwardMessagesTo));
+                        args.putString("selectAlertStringGroup", LocaleController.getString("ForwardMessagesToGroup", R.string.ForwardMessagesToGroup));
+                        MessagesActivity fragment = new MessagesActivity(args);
+                        fragment.setDelegate(ChatActivity.this);
+                        presentFragment(fragment);
+                    }
+                }
+            });
+
+            updateSubtitle();
+
+            if (currentEncryptedChat != null) {
+                actionBarLayer.setTitleIcon(R.drawable.ic_lock_white, AndroidUtilities.dp(4));
+            } else if (currentChat != null && currentChat.id < 0) {
+                actionBarLayer.setTitleIcon(R.drawable.broadcast2, AndroidUtilities.dp(4));
+            }
+
+            ActionBarMenu menu = actionBarLayer.createMenu();
+
+            if (currentEncryptedChat != null) {
+                timeItem = menu.addItemResource(chat_enc_timer, R.layout.chat_header_enc_layout);
+            }
+
+            ActionBarMenuItem item = menu.addItem(chat_menu_attach, R.drawable.ic_ab_attach);
+            item.addSubItem(attach_photo, LocaleController.getString("ChatTakePhoto", R.string.ChatTakePhoto), R.drawable.ic_attach_photo);
+            item.addSubItem(attach_gallery, LocaleController.getString("ChatGallery", R.string.ChatGallery), R.drawable.ic_attach_gallery);
+            item.addSubItem(attach_video, LocaleController.getString("ChatVideo", R.string.ChatVideo), R.drawable.ic_attach_video);
+            item.addSubItem(attach_document, LocaleController.getString("ChatDocument", R.string.ChatDocument), R.drawable.ic_ab_doc);
+            item.addSubItem(attach_location, LocaleController.getString("ChatLocation", R.string.ChatLocation), R.drawable.ic_attach_location);
+            menuItem = item;
+
+            actionModeViews.clear();
+
+            final ActionBarMenu actionMode = actionBarLayer.createActionMode();
+            actionModeViews.add(actionMode.addItem(-2, R.drawable.ic_ab_done_gray, R.drawable.bar_selector_mode));
+
+            FrameLayout layout = new FrameLayout(actionMode.getContext());
+            layout.setBackgroundColor(0xffe5e5e5);
+            actionMode.addView(layout);
+            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)layout.getLayoutParams();
+            layoutParams.width = AndroidUtilities.dp(1);
+            layoutParams.height = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.topMargin = AndroidUtilities.dp(12);
+            layoutParams.bottomMargin = AndroidUtilities.dp(12);
+            layoutParams.gravity = Gravity.CENTER_VERTICAL;
+            layout.setLayoutParams(layoutParams);
+            actionModeViews.add(layout);
+
+            selectedMessagesCountTextView = new TextView(actionMode.getContext());
+            selectedMessagesCountTextView.setTextSize(18);
+            selectedMessagesCountTextView.setTextColor(0xff000000);
+            selectedMessagesCountTextView.setSingleLine(true);
+            selectedMessagesCountTextView.setLines(1);
+            selectedMessagesCountTextView.setEllipsize(TextUtils.TruncateAt.END);
+            selectedMessagesCountTextView.setPadding(AndroidUtilities.dp(11), 0, 0, 0);
+            selectedMessagesCountTextView.setGravity(Gravity.CENTER_VERTICAL);
+            selectedMessagesCountTextView.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
+            actionMode.addView(selectedMessagesCountTextView);
+            layoutParams = (LinearLayout.LayoutParams)selectedMessagesCountTextView.getLayoutParams();
+            layoutParams.weight = 1;
+            layoutParams.width = 0;
+            layoutParams.height = LinearLayout.LayoutParams.MATCH_PARENT;
+            selectedMessagesCountTextView.setLayoutParams(layoutParams);
+
+            if (currentEncryptedChat == null) {
+                actionModeViews.add(actionMode.addItem(copy, R.drawable.ic_ab_fwd_copy, R.drawable.bar_selector_mode));
+                actionModeViews.add(actionMode.addItem(forward, R.drawable.ic_ab_fwd_forward, R.drawable.bar_selector_mode));
+                actionModeViews.add(actionMode.addItem(delete, R.drawable.ic_ab_fwd_delete, R.drawable.bar_selector_mode));
+            } else {
+                actionModeViews.add(actionMode.addItem(copy, R.drawable.ic_ab_fwd_copy, R.drawable.bar_selector_mode));
+                actionModeViews.add(actionMode.addItem(delete, R.drawable.ic_ab_fwd_delete, R.drawable.bar_selector_mode));
+            }
+            actionMode.getItem(copy).setVisibility(selectedMessagesCanCopyIds.size() != 0 ? View.VISIBLE : View.GONE);
+
+            View avatarLayout = menu.addItemResource(chat_menu_avatar, R.layout.chat_header_layout);
+            avatarImageView = (BackupImageView)avatarLayout.findViewById(R.id.chat_avatar_image);
+            avatarImageView.processDetach = false;
+            checkActionBarMenu();
+
+            fragmentView = inflater.inflate(R.layout.chat_layout, container, false);
+
+            View contentView = fragmentView.findViewById(R.id.chat_layout);
+            TextView emptyView = (TextView) fragmentView.findViewById(R.id.searchEmptyView);
+            emptyViewContainer = fragmentView.findViewById(R.id.empty_view);
+            emptyViewContainer.setVisibility(View.GONE);
+            emptyViewContainer.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
+            emptyView.setText(LocaleController.getString("NoMessages", R.string.NoMessages));
+            chatListView = (LayoutListView)fragmentView.findViewById(R.id.chat_list_view);
+            chatListView.setAdapter(chatAdapter = new ChatAdapter(getParentActivity()));
+            topPanel = fragmentView.findViewById(R.id.top_panel);
+            topPlaneClose = (ImageView)fragmentView.findViewById(R.id.top_plane_close);
+            topPanelText = (TextView)fragmentView.findViewById(R.id.top_panel_text);
+            bottomOverlay = fragmentView.findViewById(R.id.bottom_overlay);
+            bottomOverlayText = (TextView)fragmentView.findViewById(R.id.bottom_overlay_text);
+            bottomOverlayChat = fragmentView.findViewById(R.id.bottom_overlay_chat);
+            progressView = fragmentView.findViewById(R.id.progressLayout);
+            pagedownButton = fragmentView.findViewById(R.id.pagedown_button);
+            pagedownButton.setVisibility(View.GONE);
+
+            View progressViewInner = progressView.findViewById(R.id.progressLayoutInner);
+
+            updateContactStatus();
+
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+            int selectedBackground = preferences.getInt("selectedBackground", 1000001);
+            int selectedColor = preferences.getInt("selectedColor", 0);
+            if (selectedColor != 0) {
+                contentView.setBackgroundColor(selectedColor);
+                chatListView.setCacheColorHint(selectedColor);
+            } else {
+                chatListView.setCacheColorHint(0);
+                try {
+                    if (selectedBackground == 1000001) {
+                        ((SizeNotifierRelativeLayout) contentView).setBackgroundImage(R.drawable.background_hd);
+                    } else {
+                        File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper.jpg");
+                        if (toFile.exists()) {
+                            if (ApplicationLoader.cachedWallpaper != null) {
+                                ((SizeNotifierRelativeLayout) contentView).setBackgroundImage(ApplicationLoader.cachedWallpaper);
+                            } else {
+                                Drawable drawable = Drawable.createFromPath(toFile.getAbsolutePath());
+                                if (drawable != null) {
+                                    ((SizeNotifierRelativeLayout) contentView).setBackgroundImage(drawable);
+                                    ApplicationLoader.cachedWallpaper = drawable;
+                                } else {
+                                    contentView.setBackgroundColor(-2693905);
+                                    chatListView.setCacheColorHint(-2693905);
+                                }
+                            }
+                            isCustomTheme = true;
+                        } else {
+                            ((SizeNotifierRelativeLayout) contentView).setBackgroundImage(R.drawable.background_hd);
+                        }
+                    }
+                } catch (Exception e) {
+                    contentView.setBackgroundColor(-2693905);
+                    chatListView.setCacheColorHint(-2693905);
+                    FileLog.e("tmessages", e);
+                }
+            }
+
+            if (currentEncryptedChat != null) {
+                emptyView.setVisibility(View.GONE);
+                View secretChatPlaceholder = contentView.findViewById(R.id.secret_placeholder);
+                secretChatPlaceholder.setVisibility(View.VISIBLE);
+                if (isCustomTheme) {
+                    secretChatPlaceholder.setBackgroundResource(R.drawable.system_black);
+                } else {
+                    secretChatPlaceholder.setBackgroundResource(R.drawable.system_blue);
+                }
+                secretViewStatusTextView = (TextView) contentView.findViewById(R.id.invite_text);
+                secretChatPlaceholder.setPadding(AndroidUtilities.dp(16), AndroidUtilities.dp(12), AndroidUtilities.dp(16), AndroidUtilities.dp(12));
+
+                View v = contentView.findViewById(R.id.secret_placeholder);
+                v.setVisibility(View.VISIBLE);
+
+                if (currentEncryptedChat.admin_id == UserConfig.getClientUserId()) {
+                    if (currentUser.first_name.length() > 0) {
+                        secretViewStatusTextView.setText(LocaleController.formatString("EncryptedPlaceholderTitleOutgoing", R.string.EncryptedPlaceholderTitleOutgoing, currentUser.first_name));
+                    } else {
+                        secretViewStatusTextView.setText(LocaleController.formatString("EncryptedPlaceholderTitleOutgoing", R.string.EncryptedPlaceholderTitleOutgoing, currentUser.last_name));
+                    }
+                } else {
+                    if (currentUser.first_name.length() > 0) {
+                        secretViewStatusTextView.setText(LocaleController.formatString("EncryptedPlaceholderTitleIncoming", R.string.EncryptedPlaceholderTitleIncoming, currentUser.first_name));
+                    } else {
+                        secretViewStatusTextView.setText(LocaleController.formatString("EncryptedPlaceholderTitleIncoming", R.string.EncryptedPlaceholderTitleIncoming, currentUser.last_name));
+                    }
+                }
+
+                updateSecretStatus();
+            }
+
+            if (isCustomTheme) {
+                progressViewInner.setBackgroundResource(R.drawable.system_loader2);
+                emptyView.setBackgroundResource(R.drawable.system_black);
+            } else {
+                progressViewInner.setBackgroundResource(R.drawable.system_loader1);
+                emptyView.setBackgroundResource(R.drawable.system_blue);
+            }
+            emptyView.setPadding(AndroidUtilities.dp(7), AndroidUtilities.dp(1), AndroidUtilities.dp(7), AndroidUtilities.dp(1));
+
+            if (currentUser != null && (currentUser.id / 1000 == 333 || currentUser.id % 1000 == 0)) {
+                emptyView.setText(LocaleController.getString("GotAQuestion", R.string.GotAQuestion));
+            }
+
+            chatListView.setOnItemLongClickListener(onItemLongClickListener);
+            chatListView.setOnItemClickListener(onItemClickListener);
+
+            final Rect scrollRect = new Rect();
+
+            chatListView.setOnInterceptTouchEventListener(new LayoutListView.OnInterceptTouchEventListener() {
+                @Override
+                public boolean onInterceptTouchEvent(MotionEvent event) {
+                    if (actionBarLayer.isActionModeShowed()) {
+                        return false;
+                    }
+                    if (event.getAction() == MotionEvent.ACTION_DOWN) {
+                        int x = (int)event.getX();
+                        int y = (int)event.getY();
+                        int count = chatListView.getChildCount();
+                        Rect rect = new Rect();
+                        for (int a = 0; a < count; a++) {
+                            View view = chatListView.getChildAt(a);
+                            int top = view.getTop();
+                            int bottom = view.getBottom();
+                            view.getLocalVisibleRect(rect);
+                            if (top > y || bottom < y) {
+                                continue;
+                            }
+                            if (!(view instanceof ChatMediaCell)) {
+                                break;
+                            }
+                            final ChatMediaCell cell = (ChatMediaCell)view;
+                            final MessageObject messageObject = cell.getMessageObject();
+                            if (messageObject == null || !messageObject.isSecretPhoto() || !cell.getPhotoImage().isInsideImage(x, y - top)) {
+                                break;
+                            }
+                            File file = FileLoader.getPathToMessage(messageObject.messageOwner);
+                            if (!file.exists()) {
+                                break;
+                            }
+                            startX = x;
+                            startY = y;
+                            chatListView.setOnItemClickListener(null);
+                            openSecretPhotoRunnable = new Runnable() {
+                                @Override
+                                public void run() {
+                                    if (openSecretPhotoRunnable == null) {
+                                        return;
+                                    }
+                                    chatListView.requestDisallowInterceptTouchEvent(true);
+                                    chatListView.setOnItemLongClickListener(null);
+                                    chatListView.setLongClickable(false);
+                                    openSecretPhotoRunnable = null;
+                                    if (sendSecretMessageRead(messageObject)) {
+                                        cell.invalidate();
+                                    }
+                                    SecretPhotoViewer.getInstance().setParentActivity(getParentActivity());
+                                    SecretPhotoViewer.getInstance().openPhoto(messageObject);
+                                }
+                            };
+                            AndroidUtilities.RunOnUIThread(openSecretPhotoRunnable, 100);
+                            return true;
+                        }
+                    }
+                    return false;
+                }
+            });
+
+            chatListView.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    if (openSecretPhotoRunnable != null || SecretPhotoViewer.getInstance().isVisible()) {
+                        if (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_CANCEL || event.getAction() == MotionEvent.ACTION_POINTER_UP) {
+                            AndroidUtilities.RunOnUIThread(new Runnable() {
+                                @Override
+                                public void run() {
+                                    chatListView.setOnItemClickListener(onItemClickListener);
+                                }
+                            }, 150);
+                            if (openSecretPhotoRunnable != null) {
+                                AndroidUtilities.CancelRunOnUIThread(openSecretPhotoRunnable);
+                                openSecretPhotoRunnable = null;
+                                try {
+                                    Toast.makeText(v.getContext(), LocaleController.getString("PhotoTip", R.string.PhotoTip), Toast.LENGTH_SHORT).show();
+                                } catch (Exception e) {
+                                    FileLog.e("tmessages", e);
+                                }
+                            } else {
+                                if (SecretPhotoViewer.getInstance().isVisible()) {
+                                    AndroidUtilities.RunOnUIThread(new Runnable() {
+                                        @Override
+                                        public void run() {
+                                            chatListView.setOnItemLongClickListener(onItemLongClickListener);
+                                            chatListView.setLongClickable(true);
+                                        }
+                                    });
+                                    SecretPhotoViewer.getInstance().closePhoto();
+                                }
+                            }
+                        } else if (event.getAction() != MotionEvent.ACTION_DOWN) {
+                            if (SecretPhotoViewer.getInstance().isVisible()) {
+                                return true;
+                            } else if (openSecretPhotoRunnable != null) {
+                                if (event.getAction() == MotionEvent.ACTION_MOVE) {
+                                    if (Math.hypot(startX - event.getX(), startY - event.getY()) > AndroidUtilities.dp(5)) {
+                                        AndroidUtilities.CancelRunOnUIThread(openSecretPhotoRunnable);
+                                        openSecretPhotoRunnable = null;
+                                    }
+                                } else {
+                                    AndroidUtilities.CancelRunOnUIThread(openSecretPhotoRunnable);
+                                    openSecretPhotoRunnable = null;
+                                }
+                            }
+                        }
+                    }
+                    return false;
+                }
+            });
+
+            chatListView.setOnScrollListener(new AbsListView.OnScrollListener() {
+                @Override
+                public void onScrollStateChanged(AbsListView absListView, int i) {
+
+                }
+
+                @Override
+                public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+                    if (visibleItemCount > 0) {
+                        if (firstVisibleItem <= 10) {
+                            if (!endReached && !loading) {
+                                if (messagesByDays.size() != 0) {
+                                    MessagesController.getInstance().loadMessages(dialog_id, 20, maxMessageId, !cacheEndReaced, minDate, classGuid, false, false, null);
+                                } else {
+                                    MessagesController.getInstance().loadMessages(dialog_id, 20, 0, !cacheEndReaced, minDate, classGuid, false, false, null);
+                                }
+                                loading = true;
+                            }
+                        }
+                        if (firstVisibleItem + visibleItemCount >= totalItemCount - 6) {
+                            if (!unread_end_reached && !loadingForward) {
+                                MessagesController.getInstance().loadMessages(dialog_id, 20, minMessageId, true, maxDate, classGuid, false, true, null);
+                                loadingForward = true;
+                            }
+                        }
+                        if (firstVisibleItem + visibleItemCount == totalItemCount && unread_end_reached) {
+                            showPagedownButton(false, true);
+                        }
+                    }
+                    for (int a = 0; a < visibleItemCount; a++) {
+                        View view = absListView.getChildAt(a);
+                        if (view instanceof ChatMessageCell) {
+                            ChatMessageCell messageCell = (ChatMessageCell)view;
+                            messageCell.getLocalVisibleRect(scrollRect);
+                            messageCell.setVisiblePart(scrollRect.top, scrollRect.bottom - scrollRect.top);
+                        }
+                    }
+                }
+            });
+
+            bottomOverlayChatText = (TextView)fragmentView.findViewById(R.id.bottom_overlay_chat_text);
+            TextView textView = (TextView)fragmentView.findViewById(R.id.secret_title);
+            textView.setText(LocaleController.getString("EncryptedDescriptionTitle", R.string.EncryptedDescriptionTitle));
+            textView = (TextView)fragmentView.findViewById(R.id.secret_description1);
+            textView.setText(LocaleController.getString("EncryptedDescription1", R.string.EncryptedDescription1));
+            textView = (TextView)fragmentView.findViewById(R.id.secret_description2);
+            textView.setText(LocaleController.getString("EncryptedDescription2", R.string.EncryptedDescription2));
+            textView = (TextView)fragmentView.findViewById(R.id.secret_description3);
+            textView.setText(LocaleController.getString("EncryptedDescription3", R.string.EncryptedDescription3));
+            textView = (TextView)fragmentView.findViewById(R.id.secret_description4);
+            textView.setText(LocaleController.getString("EncryptedDescription4", R.string.EncryptedDescription4));
+
+            if (loading && messages.isEmpty()) {
+                progressView.setVisibility(View.VISIBLE);
+                chatListView.setEmptyView(null);
+            } else {
+                progressView.setVisibility(View.GONE);
+                chatListView.setEmptyView(emptyViewContainer);
+            }
+
+            pagedownButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    scrollToLastMessage();
+                }
+            });
+
+            bottomOverlayChat.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    if (getParentActivity() == null) {
+                        return;
+                    }
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                    if (currentUser != null && userBlocked) {
+                        builder.setMessage(LocaleController.getString("AreYouSureUnblockContact", R.string.AreYouSureUnblockContact));
+                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                MessagesController.getInstance().unblockUser(currentUser.id);
+                            }
+                        });
+                    } else {
+                        builder.setMessage(LocaleController.getString("AreYouSureDeleteThisChat", R.string.AreYouSureDeleteThisChat));
+                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                MessagesController.getInstance().deleteDialog(dialog_id, 0, false);
+                                finishFragment();
+                            }
+                        });
+                    }
+                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                    showAlertDialog(builder);
+                }
+            });
+
+            updateBottomOverlay();
+
+            chatActivityEnterView.setContainerView(getParentActivity(), fragmentView);
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    private boolean sendSecretMessageRead(MessageObject messageObject) {
+        if (messageObject == null || messageObject.isOut() || !messageObject.isSecretMedia() || messageObject.messageOwner.destroyTime != 0 || messageObject.messageOwner.ttl <= 0) {
+            return false;
+        }
+        MessagesController.getInstance().markMessageAsRead(dialog_id, messageObject.messageOwner.random_id, messageObject.messageOwner.ttl);
+        messageObject.messageOwner.destroyTime = messageObject.messageOwner.ttl + ConnectionsManager.getInstance().getCurrentTime();
+        return true;
+    }
+
+    private void scrollToLastMessage() {
+        if (unread_end_reached || first_unread_id == 0) {
+            chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+        } else {
+            messages.clear();
+            messagesByDays.clear();
+            messagesDict.clear();
+            progressView.setVisibility(View.VISIBLE);
+            chatListView.setEmptyView(null);
+            if (currentEncryptedChat == null) {
+                maxMessageId = Integer.MAX_VALUE;
+                minMessageId = Integer.MIN_VALUE;
+            } else {
+                maxMessageId = Integer.MIN_VALUE;
+                minMessageId = Integer.MAX_VALUE;
+            }
+            maxDate = Integer.MIN_VALUE;
+            minDate = 0;
+            unread_end_reached = true;
+            loading = true;
+            chatAdapter.notifyDataSetChanged();
+            MessagesController.getInstance().loadMessages(dialog_id, 30, 0, true, 0, classGuid, true, false, null);
+        }
+    }
+
+    private void showPagedownButton(boolean show, boolean animated) {
+        if (pagedownButton == null) {
+            return;
+        }
+        if (show) {
+            if (pagedownButton.getVisibility() == View.GONE) {
+                if (Build.VERSION.SDK_INT > 13 && animated) {
+                    pagedownButton.setVisibility(View.VISIBLE);
+                    pagedownButton.setAlpha(0);
+                    pagedownButton.animate().alpha(1).setDuration(200).setListener(null).start();
+                } else {
+                    pagedownButton.setVisibility(View.VISIBLE);
+                }
+            }
+        } else {
+            if (pagedownButton.getVisibility() == View.VISIBLE) {
+                if (Build.VERSION.SDK_INT > 13 && animated) {
+                    pagedownButton.animate().alpha(0).setDuration(200).setListener(new Animator.AnimatorListener() {
+                        @Override
+                        public void onAnimationStart(Animator animation) {
+
+                        }
+
+                        @Override
+                        public void onAnimationEnd(Animator animation) {
+                            pagedownButton.setVisibility(View.GONE);
+                        }
+
+                        @Override
+                        public void onAnimationCancel(Animator animation) {
+
+                        }
+
+                        @Override
+                        public void onAnimationRepeat(Animator animation) {
+
+                        }
+                    }).start();
+                } else {
+                    pagedownButton.setVisibility(View.GONE);
+                }
+            }
+        }
+    }
+
+    private void updateSecretStatus() {
+        if (bottomOverlay == null) {
+            return;
+        }
+        if (currentEncryptedChat == null || secretViewStatusTextView == null) {
+            bottomOverlay.setVisibility(View.GONE);
+            return;
+        }
+        boolean hideKeyboard = false;
+        if (currentEncryptedChat instanceof TLRPC.TL_encryptedChatRequested) {
+            bottomOverlayText.setText(LocaleController.getString("EncryptionProcessing", R.string.EncryptionProcessing));
+            bottomOverlay.setVisibility(View.VISIBLE);
+            hideKeyboard = true;
+        } else if (currentEncryptedChat instanceof TLRPC.TL_encryptedChatWaiting) {
+            bottomOverlayText.setText(Html.fromHtml(LocaleController.formatString("AwaitingEncryption", R.string.AwaitingEncryption, "<b>" + currentUser.first_name + "</b>")));
+            bottomOverlay.setVisibility(View.VISIBLE);
+            hideKeyboard = true;
+        } else if (currentEncryptedChat instanceof TLRPC.TL_encryptedChatDiscarded) {
+            bottomOverlayText.setText(LocaleController.getString("EncryptionRejected", R.string.EncryptionRejected));
+            bottomOverlay.setVisibility(View.VISIBLE);
+            hideKeyboard = true;
+        } else if (currentEncryptedChat instanceof TLRPC.TL_encryptedChat) {
+            bottomOverlay.setVisibility(View.GONE);
+        }
+        if (hideKeyboard) {
+            chatActivityEnterView.hideEmojiPopup();
+            AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
+        }
+        checkActionBarMenu();
+    }
+
+    private void checkActionBarMenu() {
+        if (currentEncryptedChat != null && !(currentEncryptedChat instanceof TLRPC.TL_encryptedChat) ||
+                currentChat != null && (currentChat instanceof TLRPC.TL_chatForbidden || currentChat.left) ||
+                currentUser != null && (currentUser instanceof TLRPC.TL_userDeleted || currentUser instanceof TLRPC.TL_userEmpty)) {
+
+            if (menuItem != null) {
+                menuItem.setVisibility(View.GONE);
+            }
+
+            if (timeItem != null) {
+                timeItem.setVisibility(View.GONE);
+            }
+        } else {
+            if (menuItem != null) {
+                menuItem.setVisibility(View.VISIBLE);
+            }
+
+            if (timeItem != null) {
+                timeItem.setVisibility(View.VISIBLE);
+            }
+        }
+
+        if (timeItem != null) {
+            timerButton = (TimerButton)timeItem.findViewById(R.id.chat_timer);
+            timerButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    if (getParentActivity() == null) {
+                        return;
+                    }
+                    showAlertDialog(AndroidUtilities.buildTTLAlert(getParentActivity(), currentEncryptedChat));
+                }
+            });
+            timerButton.setTime(currentEncryptedChat.ttl);
+        }
+
+        if (avatarImageView != null) {
+            TLRPC.FileLocation photo = null;
+            int placeHolderId = 0;
+            if (currentUser != null) {
+                if (currentUser.photo != null) {
+                    photo = currentUser.photo.photo_small;
+                }
+                placeHolderId = AndroidUtilities.getUserAvatarForId(currentUser.id);
+            } else if (currentChat != null) {
+                if (currentChat.photo != null) {
+                    photo = currentChat.photo.photo_small;
+                }
+                if (isBroadcast) {
+                    placeHolderId = AndroidUtilities.getBroadcastAvatarForId(currentChat.id);
+                } else {
+                    placeHolderId = AndroidUtilities.getGroupAvatarForId(currentChat.id);
+                }
+            }
+            avatarImageView.setImage(photo, "50_50", placeHolderId);
+        }
+    }
+
+    private void updateOnlineCount() {
+        if (info == null) {
+            return;
+        }
+        onlineCount = 0;
+        int currentTime = ConnectionsManager.getInstance().getCurrentTime();
+        for (TLRPC.TL_chatParticipant participant : info.participants) {
+            TLRPC.User user = MessagesController.getInstance().getUser(participant.user_id);
+            if (user != null && user.status != null && (user.status.expires > currentTime || user.id == UserConfig.getClientUserId()) && user.status.expires > 10000) {
+                onlineCount++;
+            }
+        }
+
+        updateSubtitle();
+    }
+
+    private int getMessageType(MessageObject messageObject) {
+        if (messageObject == null) {
+            return -1;
+        }
+        if (currentEncryptedChat == null) {
+            boolean isBroadcastError = isBroadcast && messageObject.messageOwner.id <= 0 && messageObject.isSendError();
+            if (!isBroadcast && messageObject.messageOwner.id <= 0 && messageObject.isOut() || isBroadcastError) {
+                if (messageObject.isSendError()) {
+                    if (!(messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
+                        return 0;
+                    } else {
+                        return 6;
+                    }
+                } else {
+                    return -1;
+                }
+            } else {
+                if (messageObject.type == 6) {
+                    return -1;
+                } else if (messageObject.type == 10 || messageObject.type == 11) {
+                    if (messageObject.messageOwner.id == 0) {
+                        return -1;
+                    }
+                    return 1;
+                } else {
+                    if (!(messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
+                        if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVideo ||
+                                messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto ||
+                                messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
+                            boolean canSave = false;
+                            if (messageObject.messageOwner.attachPath != null && messageObject.messageOwner.attachPath.length() != 0) {
+                                File f = new File(messageObject.messageOwner.attachPath);
+                                if (f.exists()) {
+                                    canSave = true;
+                                }
+                            }
+                            if (!canSave) {
+                                File f = FileLoader.getPathToMessage(messageObject.messageOwner);
+                                if (f.exists()) {
+                                    canSave = true;
+                                }
+                            }
+                            if (canSave) {
+                                if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
+                                    String mime = messageObject.messageOwner.media.document.mime_type;
+                                    if (mime != null && mime.endsWith("/xml")) {
+                                        return 5;
+                                    }
+                                }
+                                return 4;
+                            }
+                        }
+                        return 2;
+                    } else {
+                        return 3;
+                    }
+                }
+            }
+        } else {
+            if (messageObject.type == 6) {
+                return -1;
+            } else if (messageObject.isSendError()) {
+                if (!(messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
+                    return 0;
+                } else {
+                    return 6;
+                }
+            } else if (messageObject.type == 10 || messageObject.type == 11) {
+                if (messageObject.isSending()) {
+                    return -1;
+                } else {
+                    return 1;
+                }
+            } else {
+                if (!(messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
+                    if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVideo ||
+                            messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto ||
+                            messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
+                        boolean canSave = false;
+                        if (messageObject.messageOwner.attachPath != null && messageObject.messageOwner.attachPath.length() != 0) {
+                            File f = new File(messageObject.messageOwner.attachPath);
+                            if (f.exists()) {
+                                canSave = true;
+                            }
+                        }
+                        if (!canSave) {
+                            File f = FileLoader.getPathToMessage(messageObject.messageOwner);
+                            if (f.exists()) {
+                                canSave = true;
+                            }
+                        }
+                        if (canSave) {
+                            if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
+                                String mime = messageObject.messageOwner.media.document.mime_type;
+                                if (mime != null && mime.endsWith("text/xml")) {
+                                    return 5;
+                                }
+                            }
+                            //return 4;
+                        }
+                    }
+                    return 2;
+                } else {
+                    return 3;
+                }
+            }
+        }
+    }
+
+    private void addToSelectedMessages(MessageObject messageObject) {
+        if (selectedMessagesIds.containsKey(messageObject.messageOwner.id)) {
+            selectedMessagesIds.remove(messageObject.messageOwner.id);
+            if (messageObject.type == 0) {
+                selectedMessagesCanCopyIds.remove(messageObject.messageOwner.id);
+            }
+        } else {
+            selectedMessagesIds.put(messageObject.messageOwner.id, messageObject);
+            if (messageObject.type == 0) {
+                selectedMessagesCanCopyIds.put(messageObject.messageOwner.id, messageObject);
+            }
+        }
+        if (actionBarLayer.isActionModeShowed()) {
+            if (selectedMessagesIds.isEmpty()) {
+                actionBarLayer.hideActionMode();
+            }
+            actionBarLayer.createActionMode().getItem(copy).setVisibility(selectedMessagesCanCopyIds.size() != 0 ? View.VISIBLE : View.GONE);
+        }
+    }
+
+    private void processRowSelect(View view) {
+        MessageObject message = null;
+        if (view instanceof ChatBaseCell) {
+            message = ((ChatBaseCell)view).getMessageObject();
+        } else if (view instanceof ChatActionCell) {
+            message = ((ChatActionCell)view).getMessageObject();
+        }
+
+        int type = getMessageType(message);
+
+        if (type < 2 || type == 6) {
+            return;
+        }
+        addToSelectedMessages(message);
+        updateActionModeTitle();
+        updateVisibleRows();
+    }
+
+    private void updateActionModeTitle() {
+        if (!actionBarLayer.isActionModeShowed()) {
+            return;
+        }
+        if (!selectedMessagesIds.isEmpty()) {
+            selectedMessagesCountTextView.setText(LocaleController.formatString("Selected", R.string.Selected, selectedMessagesIds.size()));
+        }
+    }
+
+    private void updateSubtitle() {
+        if (currentChat != null) {
+            actionBarLayer.setTitle(currentChat.title);
+        } else if (currentUser != null) {
+            if (currentUser.id / 1000 != 777 && currentUser.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(currentUser.id) == null && (ContactsController.getInstance().contactsDict.size() != 0 || !ContactsController.getInstance().isLoadingContacts())) {
+                if (currentUser.phone != null && currentUser.phone.length() != 0) {
+                    actionBarLayer.setTitle(PhoneFormat.getInstance().format("+" + currentUser.phone));
+                } else {
+                    actionBarLayer.setTitle(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
+                }
+            } else {
+                actionBarLayer.setTitle(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
+            }
+        }
+
+        CharSequence printString = MessagesController.getInstance().printingStrings.get(dialog_id);
+        if (printString != null) {
+            printString = TextUtils.replace(printString, new String[]{"..."}, new String[]{""});
+        }
+        if (printString == null || printString.length() == 0) {
+            lastPrintString = null;
+            setTypingAnimation(false);
+            if (currentChat != null) {
+                if (currentChat instanceof TLRPC.TL_chatForbidden) {
+                    actionBarLayer.setSubtitle(LocaleController.getString("YouWereKicked", R.string.YouWereKicked));
+                } else if (currentChat.left) {
+                    actionBarLayer.setSubtitle(LocaleController.getString("YouLeft", R.string.YouLeft));
+                } else {
+                    int count = currentChat.participants_count;
+                    if (info != null) {
+                        count = info.participants.size();
+                    }
+                    if (onlineCount > 1 && count != 0) {
+                        actionBarLayer.setSubtitle(String.format("%s, %s", LocaleController.formatPluralString("Members", count), LocaleController.formatPluralString("Online", onlineCount)));
+                    } else {
+                        actionBarLayer.setSubtitle(LocaleController.formatPluralString("Members", count));
+                    }
+                }
+            } else if (currentUser != null) {
+                TLRPC.User user = MessagesController.getInstance().getUser(currentUser.id);
+                if (user != null) {
+                    currentUser = user;
+                }
+                actionBarLayer.setSubtitle(LocaleController.formatUserStatus(currentUser));
+            }
+        } else {
+            lastPrintString = printString;
+            actionBarLayer.setSubtitle(printString);
+            setTypingAnimation(true);
+        }
+    }
+
+    private void setTypingAnimation(boolean start) {
+        if (actionBarLayer == null) {
+            return;
+        }
+        if (start) {
+            try {
+                actionBarLayer.setSubTitleIcon(0, typingDotsDrawable, AndroidUtilities.dp(4));
+                typingDotsDrawable.start();
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+        } else {
+            actionBarLayer.setSubTitleIcon(0, null, 0);
+            if (typingDotsDrawable != null) {
+                typingDotsDrawable.stop();
+            }
+        }
+    }
+
+    private void checkAndUpdateAvatar() {
+        TLRPC.FileLocation newPhoto = null;
+        int placeHolderId = 0;
+        if (currentUser != null) {
+            TLRPC.User user = MessagesController.getInstance().getUser(currentUser.id);
+            if (user == null) {
+                return;
+            }
+            currentUser = user;
+            if (currentUser.photo != null) {
+                newPhoto = currentUser.photo.photo_small;
+            }
+            placeHolderId = AndroidUtilities.getUserAvatarForId(currentUser.id);
+        } else if (currentChat != null) {
+            TLRPC.Chat chat = MessagesController.getInstance().getChat(currentChat.id);
+            if (chat == null) {
+                return;
+            }
+            currentChat = chat;
+            if (currentChat.photo != null) {
+                newPhoto = currentChat.photo.photo_small;
+            }
+            if (isBroadcast) {
+                placeHolderId = AndroidUtilities.getBroadcastAvatarForId(currentChat.id);
+            } else {
+                placeHolderId = AndroidUtilities.getGroupAvatarForId(currentChat.id);
+            }
+        }
+        if (avatarImageView != null) {
+            avatarImageView.setImage(newPhoto, "50_50", placeHolderId);
+        }
+    }
+
+    public boolean openVideoEditor(String videoPath, boolean removeLast) {
+        Bundle args = new Bundle();
+        args.putString("videoPath", videoPath);
+        VideoEditorActivity fragment = new VideoEditorActivity(args);
+        fragment.setDelegate(new VideoEditorActivity.VideoEditorActivityDelegate() {
+            @Override
+            public void didFinishEditVideo(String videoPath, long startTime, long endTime, int resultWidth, int resultHeight, int rotationValue, int originalWidth, int originalHeight, int bitrate, long estimatedSize, long estimatedDuration) {
+                TLRPC.VideoEditedInfo videoEditedInfo = new TLRPC.VideoEditedInfo();
+                videoEditedInfo.startTime = startTime;
+                videoEditedInfo.endTime = endTime;
+                videoEditedInfo.rotationValue = rotationValue;
+                videoEditedInfo.originalWidth = originalWidth;
+                videoEditedInfo.originalHeight = originalHeight;
+                videoEditedInfo.bitrate = bitrate;
+                videoEditedInfo.resultWidth = resultWidth;
+                videoEditedInfo.resultHeight = resultHeight;
+                videoEditedInfo.originalPath = videoPath;
+                SendMessagesHelper.prepareSendingVideo(videoPath, estimatedSize, estimatedDuration, resultWidth, resultHeight, videoEditedInfo, dialog_id);
+            }
+        });
+
+        if (parentLayout == null || !fragment.onFragmentCreate()) {
+            SendMessagesHelper.prepareSendingVideo(videoPath, 0, 0, 0, 0, null, dialog_id);
+            return false;
+        }
+        parentLayout.presentFragment(fragment, removeLast, true, true);
+        return true;
+    }
+
+    private void showAttachmentError() {
+        if (getParentActivity() == null) {
+            return;
+        }
+        Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("UnsupportedAttachment", R.string.UnsupportedAttachment), Toast.LENGTH_SHORT);
+        toast.show();
+    }
+
+    @Override
+    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
+        if (resultCode == Activity.RESULT_OK) {
+            if (requestCode == 0) {
+                Utilities.addMediaToGallery(currentPicturePath);
+                SendMessagesHelper.prepareSendingPhoto(currentPicturePath, null, dialog_id);
+                currentPicturePath = null;
+            } else if (requestCode == 1) {
+                if (data == null || data.getData() == null) {
+                    showAttachmentError();
+                    return;
+                }
+                SendMessagesHelper.prepareSendingPhoto(null, data.getData(), dialog_id);
+            } else if (requestCode == 2) {
+                String videoPath = null;
+                if (data != null) {
+                    Uri uri = data.getData();
+                    boolean fromCamera = false;
+                    if (uri != null && uri.getScheme() != null) {
+                        fromCamera = uri.getScheme().contains("file");
+                    } else if (uri == null) {
+                        fromCamera = true;
+                    }
+                    if (fromCamera) {
+                        if (uri != null) {
+                            videoPath = uri.getPath();
+                        } else {
+                            videoPath = currentPicturePath;
+                        }
+                        Utilities.addMediaToGallery(currentPicturePath);
+                        currentPicturePath = null;
+                    } else {
+                        try {
+                            videoPath = Utilities.getPath(uri);
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                    }
+                }
+                if (videoPath == null && currentPicturePath != null) {
+                    File f = new File(currentPicturePath);
+                    if (f.exists()) {
+                        videoPath = currentPicturePath;
+                    }
+                    currentPicturePath = null;
+                }
+                if(Build.VERSION.SDK_INT >= 16) {
+                    if (paused) {
+                        startVideoEdit = videoPath;
+                    } else {
+                        openVideoEditor(videoPath, false);
+                    }
+                } else {
+                    SendMessagesHelper.prepareSendingVideo(videoPath, 0, 0, 0, 0, null, dialog_id);
+                }
+            } else if (requestCode == 21) {
+                if (data == null || data.getData() == null) {
+                    showAttachmentError();
+                    return;
+                }
+                String tempPath = Utilities.getPath(data.getData());
+                String originalPath = tempPath;
+                if (tempPath == null) {
+                    originalPath = data.toString();
+                    tempPath = MediaController.copyDocumentToCache(data.getData(), "file");
+                }
+                if (tempPath == null) {
+                    showAttachmentError();
+                    return;
+                }
+                SendMessagesHelper.prepareSendingDocument(tempPath, originalPath, dialog_id);
+            }
+        }
+    }
+
+    @Override
+    public void saveSelfArgs(Bundle args) {
+        if (currentPicturePath != null) {
+            args.putString("path", currentPicturePath);
+        }
+    }
+
+    @Override
+    public void restoreSelfArgs(Bundle args) {
+        currentPicturePath = args.getString("path");
+    }
+
+    private void removeUnreadPlane(boolean reload) {
+        if (unreadMessageObject != null) {
+            messages.remove(unreadMessageObject);
+            unread_end_reached = true;
+            first_unread_id = 0;
+            last_unread_id = 0;
+            unread_to_load = 0;
+            unreadMessageObject = null;
+            if (reload) {
+                chatAdapter.notifyDataSetChanged();
+            }
+        }
+    }
+
+    public boolean processSendingText(String text) {
+        return chatActivityEnterView.processSendingText(text);
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public void didReceivedNotification(int id, final Object... args) {
+        if (id == NotificationCenter.messagesDidLoaded) {
+            long did = (Long)args[0];
+            if (did == dialog_id) {
+                loadsCount++;
+                int count = (Integer)args[1];
+                boolean isCache = (Boolean)args[3];
+                int fnid = (Integer)args[4];
+                int last_unread_date = (Integer)args[7];
+                boolean forwardLoad = (Boolean)args[8];
+                boolean wasUnread = false;
+                boolean positionToUnread = false;
+                if (fnid != 0) {
+                    first_unread_id = fnid;
+                    last_unread_id = (Integer)args[5];
+                    unread_to_load = (Integer)args[6];
+                    positionToUnread = true;
+                }
+                ArrayList<MessageObject> messArr = (ArrayList<MessageObject>)args[2];
+
+                int newRowsCount = 0;
+                unread_end_reached = last_unread_id == 0;
+
+                if (loadsCount == 1 && messArr.size() > 20) {
+                    loadsCount++;
+                }
+
+                if (firstLoading) {
+                    if (!unread_end_reached) {
+                        messages.clear();
+                        messagesByDays.clear();
+                        messagesDict.clear();
+                        if (currentEncryptedChat == null) {
+                            maxMessageId = Integer.MAX_VALUE;
+                            minMessageId = Integer.MIN_VALUE;
+                        } else {
+                            maxMessageId = Integer.MIN_VALUE;
+                            minMessageId = Integer.MAX_VALUE;
+                        }
+                        maxDate = Integer.MIN_VALUE;
+                        minDate = 0;
+                    }
+                    firstLoading = false;
+                }
+
+                for (int a = 0; a < messArr.size(); a++) {
+                    MessageObject obj = messArr.get(a);
+                    if (messagesDict.containsKey(obj.messageOwner.id)) {
+                        continue;
+                    }
+
+                    if (obj.messageOwner.id > 0) {
+                        maxMessageId = Math.min(obj.messageOwner.id, maxMessageId);
+                        minMessageId = Math.max(obj.messageOwner.id, minMessageId);
+                    } else if (currentEncryptedChat != null) {
+                        maxMessageId = Math.max(obj.messageOwner.id, maxMessageId);
+                        minMessageId = Math.min(obj.messageOwner.id, minMessageId);
+                    }
+                    maxDate = Math.max(maxDate, obj.messageOwner.date);
+                    if (minDate == 0 || obj.messageOwner.date < minDate) {
+                        minDate = obj.messageOwner.date;
+                    }
+
+                    if (obj.type < 0) {
+                        continue;
+                    }
+
+                    if (!obj.isOut() && obj.isUnread()) {
+                        wasUnread = true;
+                    }
+                    messagesDict.put(obj.messageOwner.id, obj);
+                    ArrayList<MessageObject> dayArray = messagesByDays.get(obj.dateKey);
+
+                    if (dayArray == null) {
+                        dayArray = new ArrayList<MessageObject>();
+                        messagesByDays.put(obj.dateKey, dayArray);
+
+                        TLRPC.Message dateMsg = new TLRPC.Message();
+                        dateMsg.message = LocaleController.formatDateChat(obj.messageOwner.date);
+                        dateMsg.id = 0;
+                        MessageObject dateObj = new MessageObject(dateMsg, null);
+                        dateObj.type = 10;
+                        dateObj.contentType = 4;
+                        if (forwardLoad) {
+                            messages.add(0, dateObj);
+                        } else {
+                            messages.add(dateObj);
+                        }
+                        newRowsCount++;
+                    }
+
+                    newRowsCount++;
+                    dayArray.add(obj);
+                    if (forwardLoad) {
+                        messages.add(0, obj);
+                    } else {
+                        messages.add(messages.size() - 1, obj);
+                    }
+
+                    if (!forwardLoad) {
+                        if (obj.messageOwner.id == first_unread_id) {
+                            TLRPC.Message dateMsg = new TLRPC.Message();
+                            dateMsg.message = "";
+                            dateMsg.id = 0;
+                            MessageObject dateObj = new MessageObject(dateMsg, null);
+                            dateObj.contentType = dateObj.type = 6;
+                            boolean dateAdded = true;
+                            if (a != messArr.size() - 1) {
+                                MessageObject next = messArr.get(a + 1);
+                                dateAdded = !next.dateKey.equals(obj.dateKey);
+                            }
+                            messages.add(messages.size() - (dateAdded ? 0 : 1), dateObj);
+                            unreadMessageObject = dateObj;
+                            newRowsCount++;
+                        }
+                        if (obj.messageOwner.id == last_unread_id) {
+                            unread_end_reached = true;
+                        }
+                    }
+
+                }
+
+                if (unread_end_reached) {
+                    first_unread_id = 0;
+                    last_unread_id = 0;
+                }
+
+                if (forwardLoad) {
+                    if (messArr.size() != count) {
+                        unread_end_reached = true;
+                        first_unread_id = 0;
+                        last_unread_id = 0;
+                    }
+
+                    chatAdapter.notifyDataSetChanged();
+                    loadingForward = false;
+                } else {
+                    if (messArr.size() != count) {
+                        if (isCache) {
+                            cacheEndReaced = true;
+                            if (currentEncryptedChat != null || isBroadcast) {
+                                endReached = true;
+                            }
+                        } else {
+                            cacheEndReaced = true;
+                            endReached = true;
+                        }
+                    }
+                    loading = false;
+
+                    if (chatListView != null) {
+                        if (first || scrollToTopOnResume) {
+                            chatAdapter.notifyDataSetChanged();
+                            if (positionToUnread && unreadMessageObject != null) {
+                                if (messages.get(messages.size() - 1) == unreadMessageObject) {
+                                    chatListView.setSelectionFromTop(0, AndroidUtilities.dp(-11));
+                                } else {
+                                    chatListView.setSelectionFromTop(messages.size() - messages.indexOf(unreadMessageObject), AndroidUtilities.dp(-11));
+                                }
+                                ViewTreeObserver obs = chatListView.getViewTreeObserver();
+                                obs.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+                                    @Override
+                                    public boolean onPreDraw() {
+                                        if (!messages.isEmpty()) {
+                                            if (messages.get(messages.size() - 1) == unreadMessageObject) {
+                                                chatListView.setSelectionFromTop(0, AndroidUtilities.dp(-11));
+                                            } else {
+                                                chatListView.setSelectionFromTop(messages.size() - messages.indexOf(unreadMessageObject), AndroidUtilities.dp(-11));
+                                            }
+                                        }
+                                        chatListView.getViewTreeObserver().removeOnPreDrawListener(this);
+                                        return false;
+                                    }
+                                });
+                                chatListView.invalidate();
+                                showPagedownButton(true, true);
+                            } else {
+                                chatListView.post(new Runnable() {
+                                    @Override
+                                    public void run() {
+                                        chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+                                    }
+                                });
+                            }
+                        } else {
+                            int firstVisPos = chatListView.getLastVisiblePosition();
+                            View firstVisView = chatListView.getChildAt(chatListView.getChildCount() - 1);
+                            int top = ((firstVisView == null) ? 0 : firstVisView.getTop()) - chatListView.getPaddingTop();
+                            chatAdapter.notifyDataSetChanged();
+                            chatListView.setSelectionFromTop(firstVisPos + newRowsCount - (endReached ? 1 : 0), top);
+                        }
+
+                        if (paused) {
+                            scrollToTopOnResume = true;
+                            if (positionToUnread && unreadMessageObject != null) {
+                                scrollToTopUnReadOnResume = true;
+                            }
+                        }
+
+                        if (first) {
+                            if (chatListView.getEmptyView() == null) {
+                                chatListView.setEmptyView(emptyViewContainer);
+                            }
+                        }
+                    } else {
+                        scrollToTopOnResume = true;
+                        if (positionToUnread && unreadMessageObject != null) {
+                            scrollToTopUnReadOnResume = true;
+                        }
+                    }
+                }
+
+                if (first && messages.size() > 0) {
+                    if (last_unread_id != 0) {
+                        MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).messageOwner.id, last_unread_id, 0, last_unread_date, wasUnread, false);
+                    } else {
+                        MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).messageOwner.id, minMessageId, 0, maxDate, wasUnread, false);
+                    }
+                    first = false;
+                }
+
+                if (progressView != null) {
+                    progressView.setVisibility(View.GONE);
+                }
+            }
+        } else if (id == NotificationCenter.emojiDidLoaded) {
+            if (chatListView != null) {
+                chatListView.invalidateViews();
+            }
+        } else if (id == NotificationCenter.updateInterfaces) {
+            int updateMask = (Integer)args[0];
+            if ((updateMask & MessagesController.UPDATE_MASK_NAME) != 0 || (updateMask & MessagesController.UPDATE_MASK_STATUS) != 0 || (updateMask & MessagesController.UPDATE_MASK_CHAT_NAME) != 0 || (updateMask & MessagesController.UPDATE_MASK_CHAT_MEMBERS) != 0) {
+                updateSubtitle();
+                updateOnlineCount();
+            }
+            if ((updateMask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (updateMask & MessagesController.UPDATE_MASK_CHAT_AVATAR) != 0 || (updateMask & MessagesController.UPDATE_MASK_NAME) != 0) {
+                checkAndUpdateAvatar();
+                updateVisibleRows();
+            }
+            if ((updateMask & MessagesController.UPDATE_MASK_USER_PRINT) != 0) {
+                CharSequence printString = MessagesController.getInstance().printingStrings.get(dialog_id);
+                if (lastPrintString != null && printString == null || lastPrintString == null && printString != null || lastPrintString != null && printString != null && !lastPrintString.equals(printString)) {
+                    updateSubtitle();
+                }
+            }
+            if ((updateMask & MessagesController.UPDATE_MASK_USER_PHONE) != 0) {
+                updateContactStatus();
+            }
+        } else if (id == NotificationCenter.didReceivedNewMessages) {
+            long did = (Long)args[0];
+            if (did == dialog_id) {
+
+                boolean updateChat = false;
+                boolean hasFromMe = false;
+                ArrayList<MessageObject> arr = (ArrayList<MessageObject>)args[1];
+
+                if (currentEncryptedChat != null && arr.size() == 1) {
+                    MessageObject obj = arr.get(0);
+
+                    if (currentEncryptedChat != null && obj.isOut() && obj.messageOwner.action != null && obj.messageOwner.action instanceof TLRPC.TL_messageEncryptedAction &&
+                            obj.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL && getParentActivity() != null) {
+                        TLRPC.TL_decryptedMessageActionSetMessageTTL action = (TLRPC.TL_decryptedMessageActionSetMessageTTL)obj.messageOwner.action.encryptedAction;
+                        if (AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) < 17 && currentEncryptedChat.ttl > 0 && currentEncryptedChat.ttl <= 60) {
+                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                            builder.setPositiveButton(R.string.OK, null);
+                            builder.setMessage(LocaleController.formatString("CompatibilityChat", R.string.CompatibilityChat, currentUser.first_name, currentUser.first_name));
+                            showAlertDialog(builder);
+                        }
+                    }
+                }
+
+                if (!unread_end_reached) {
+                    int currentMaxDate = Integer.MIN_VALUE;
+                    int currentMinMsgId = Integer.MIN_VALUE;
+                    if (currentEncryptedChat != null) {
+                        currentMinMsgId = Integer.MAX_VALUE;
+                    }
+                    boolean currentMarkAsRead = false;
+
+                    for (MessageObject obj : arr) {
+                        if (currentEncryptedChat != null && obj.messageOwner.action != null && obj.messageOwner.action instanceof TLRPC.TL_messageEncryptedAction &&
+                                obj.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL && timerButton != null) {
+                            TLRPC.TL_decryptedMessageActionSetMessageTTL action = (TLRPC.TL_decryptedMessageActionSetMessageTTL)obj.messageOwner.action.encryptedAction;
+                            timerButton.setTime(action.ttl_seconds);
+                        }
+                        if (obj.isOut() && obj.isSending()) {
+                            scrollToLastMessage();
+                            return;
+                        }
+                        if (messagesDict.containsKey(obj.messageOwner.id)) {
+                            continue;
+                        }
+                        currentMaxDate = Math.max(currentMaxDate, obj.messageOwner.date);
+                        if (obj.messageOwner.id > 0) {
+                            currentMinMsgId = Math.max(obj.messageOwner.id, currentMinMsgId);
+                        } else if (currentEncryptedChat != null) {
+                            currentMinMsgId = Math.min(obj.messageOwner.id, currentMinMsgId);
+                        }
+
+                        if (!obj.isOut() && obj.isUnread()) {
+                            unread_to_load++;
+                            currentMarkAsRead = true;
+                        }
+                        if (obj.type == 10 || obj.type == 11) {
+                            updateChat = true;
+                        }
+                    }
+
+                    if (currentMarkAsRead) {
+                        if (paused) {
+                            readWhenResume = true;
+                            readWithDate = currentMaxDate;
+                            readWithMid = currentMinMsgId;
+                        } else {
+                            if (messages.size() > 0) {
+                                MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).messageOwner.id, currentMinMsgId, 0, currentMaxDate, true, false);
+                            }
+                        }
+                    }
+                    updateVisibleRows();
+                } else {
+                    boolean markAsRead = false;
+                    int oldCount = messages.size();
+                    for (MessageObject obj : arr) {
+                        if (currentEncryptedChat != null && obj.messageOwner.action != null && obj.messageOwner.action instanceof TLRPC.TL_messageEncryptedAction &&
+                                obj.messageOwner.action.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL && timerButton != null) {
+                            TLRPC.TL_decryptedMessageActionSetMessageTTL action = (TLRPC.TL_decryptedMessageActionSetMessageTTL)obj.messageOwner.action.encryptedAction;
+                            timerButton.setTime(action.ttl_seconds);
+                        }
+                        if (messagesDict.containsKey(obj.messageOwner.id)) {
+                            continue;
+                        }
+                        if (minDate == 0 || obj.messageOwner.date < minDate) {
+                            minDate = obj.messageOwner.date;
+                        }
+
+                        if (obj.isOut()) {
+                            removeUnreadPlane(false);
+                            hasFromMe = true;
+                        }
+
+                        if (!obj.isOut() && unreadMessageObject != null) {
+                            unread_to_load++;
+                        }
+
+                        if (obj.messageOwner.id > 0) {
+                            maxMessageId = Math.min(obj.messageOwner.id, maxMessageId);
+                            minMessageId = Math.max(obj.messageOwner.id, minMessageId);
+                        } else if (currentEncryptedChat != null) {
+                            maxMessageId = Math.max(obj.messageOwner.id, maxMessageId);
+                            minMessageId = Math.min(obj.messageOwner.id, minMessageId);
+                        }
+                        maxDate = Math.max(maxDate, obj.messageOwner.date);
+                        messagesDict.put(obj.messageOwner.id, obj);
+                        ArrayList<MessageObject> dayArray = messagesByDays.get(obj.dateKey);
+                        if (dayArray == null) {
+                            dayArray = new ArrayList<MessageObject>();
+                            messagesByDays.put(obj.dateKey, dayArray);
+
+                            TLRPC.Message dateMsg = new TLRPC.Message();
+                            dateMsg.message = LocaleController.formatDateChat(obj.messageOwner.date);
+                            dateMsg.id = 0;
+                            MessageObject dateObj = new MessageObject(dateMsg, null);
+                            dateObj.type = 10;
+                            dateObj.contentType = 4;
+                            messages.add(0, dateObj);
+                        }
+                        if (!obj.isOut() && obj.isUnread()) {
+                            if (!paused) {
+                                obj.setIsRead();
+                            }
+                            markAsRead = true;
+                        }
+                        dayArray.add(0, obj);
+                        messages.add(0, obj);
+                        if (obj.type == 10 || obj.type == 11) {
+                            updateChat = true;
+                        }
+                    }
+                    if (progressView != null) {
+                        progressView.setVisibility(View.GONE);
+                    }
+                    if (chatAdapter != null) {
+                        chatAdapter.notifyDataSetChanged();
+                    } else {
+                        scrollToTopOnResume = true;
+                    }
+
+                    if (chatListView != null && chatAdapter != null) {
+                        int lastVisible = chatListView.getLastVisiblePosition();
+                        if (endReached) {
+                            lastVisible++;
+                        }
+                        if (lastVisible == oldCount || hasFromMe) {
+                            if (!firstLoading) {
+                                if (paused) {
+                                    scrollToTopOnResume = true;
+                                } else {
+                                    chatListView.post(new Runnable() {
+                                        @Override
+                                        public void run() {
+                                            chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+                                        }
+                                    });
+                                }
+                            }
+                        } else {
+                            showPagedownButton(true, true);
+                        }
+                    } else {
+                        scrollToTopOnResume = true;
+                    }
+
+                    if (markAsRead) {
+                        if (paused) {
+                            readWhenResume = true;
+                            readWithDate = maxDate;
+                            readWithMid = minMessageId;
+                        } else {
+                            MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).messageOwner.id, minMessageId, 0, maxDate, true, false);
+                        }
+                    }
+                }
+                if (updateChat) {
+                    updateSubtitle();
+                    checkAndUpdateAvatar();
+                }
+            }
+        } else if (id == NotificationCenter.closeChats) {
+            if (args != null && args.length > 0) {
+                long did = (Long)args[0];
+                if (did == dialog_id) {
+                    finishFragment();
+                }
+            } else {
+                removeSelfFromStack();
+            }
+        } else if (id == NotificationCenter.messagesRead) {
+            ArrayList<Integer> markAsReadMessages = (ArrayList<Integer>)args[0];
+            boolean updated = false;
+            for (Integer ids : markAsReadMessages) {
+                MessageObject obj = messagesDict.get(ids);
+                if (obj != null) {
+                    obj.setIsRead();
+                    updated = true;
+                }
+            }
+            if (updated) {
+                updateVisibleRows();
+            }
+        } else if (id == NotificationCenter.messagesDeleted) {
+            ArrayList<Integer> markAsDeletedMessages = (ArrayList<Integer>)args[0];
+            boolean updated = false;
+            for (Integer ids : markAsDeletedMessages) {
+                MessageObject obj = messagesDict.get(ids);
+                if (obj != null) {
+                    int index = messages.indexOf(obj);
+                    if (index != -1) {
+                        messages.remove(index);
+                        messagesDict.remove(ids);
+                        ArrayList<MessageObject> dayArr = messagesByDays.get(obj.dateKey);
+                        dayArr.remove(obj);
+                        if (dayArr.isEmpty()) {
+                            messagesByDays.remove(obj.dateKey);
+                            messages.remove(index);
+                        }
+                        updated = true;
+                    }
+                }
+            }
+            if (messages.isEmpty()) {
+                if (!endReached && !loading) {
+                    progressView.setVisibility(View.GONE);
+                    chatListView.setEmptyView(null);
+                    if (currentEncryptedChat == null) {
+                        maxMessageId = Integer.MAX_VALUE;
+                        minMessageId = Integer.MIN_VALUE;
+                    } else {
+                        maxMessageId = Integer.MIN_VALUE;
+                        minMessageId = Integer.MAX_VALUE;
+                    }
+                    maxDate = Integer.MIN_VALUE;
+                    minDate = 0;
+                    MessagesController.getInstance().loadMessages(dialog_id, 30, 0, !cacheEndReaced, minDate, classGuid, false, false, null);
+                    loading = true;
+                }
+            }
+            if (updated && chatAdapter != null) {
+                removeUnreadPlane(false);
+                chatAdapter.notifyDataSetChanged();
+            }
+        } else if (id == NotificationCenter.messageReceivedByServer) {
+            Integer msgId = (Integer)args[0];
+            MessageObject obj = messagesDict.get(msgId);
+            if (obj != null) {
+                Integer newMsgId = (Integer)args[1];
+                TLRPC.Message newMsgObj = (TLRPC.Message)args[2];
+                if (newMsgObj != null) {
+                    obj.messageOwner.media = newMsgObj.media;
+                    obj.generateThumbs(true, 1);
+                }
+                messagesDict.remove(msgId);
+                messagesDict.put(newMsgId, obj);
+                obj.messageOwner.id = newMsgId;
+                obj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
+                updateVisibleRows();
+            }
+        } else if (id == NotificationCenter.messageReceivedByAck) {
+            Integer msgId = (Integer)args[0];
+            MessageObject obj = messagesDict.get(msgId);
+            if (obj != null) {
+                obj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SENT;
+                updateVisibleRows();
+            }
+        } else if (id == NotificationCenter.messageSendError) {
+            Integer msgId = (Integer)args[0];
+            MessageObject obj = messagesDict.get(msgId);
+            if (obj != null) {
+                obj.messageOwner.send_state = MessageObject.MESSAGE_SEND_STATE_SEND_ERROR;
+                updateVisibleRows();
+            }
+        } else if (id == NotificationCenter.chatInfoDidLoaded) {
+            int chatId = (Integer)args[0];
+            if (currentChat != null && chatId == currentChat.id) {
+                info = (TLRPC.ChatParticipants)args[1];
+                updateOnlineCount();
+                if (isBroadcast) {
+                    SendMessagesHelper.getInstance().setCurrentChatInfo(info);
+                }
+            }
+        } else if (id == NotificationCenter.contactsDidLoaded) {
+            updateContactStatus();
+            updateSubtitle();
+        } else if (id == NotificationCenter.encryptedChatUpdated) {
+            TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat)args[0];
+            if (currentEncryptedChat != null && chat.id == currentEncryptedChat.id) {
+                currentEncryptedChat = chat;
+                updateContactStatus();
+                updateSecretStatus();
+            }
+        } else if (id == NotificationCenter.messagesReadedEncrypted) {
+            int encId = (Integer)args[0];
+            if (currentEncryptedChat != null && currentEncryptedChat.id == encId) {
+                int date = (Integer)args[1];
+                boolean started = false;
+                for (MessageObject obj : messages) {
+                    if (!obj.isOut()) {
+                        continue;
+                    } else if (obj.isOut() && !obj.isUnread()) {
+                        break;
+                    }
+                    if (obj.messageOwner.date <= date) {
+                        obj.setIsRead();
+                    }
+                }
+                updateVisibleRows();
+            }
+        } else if (id == NotificationCenter.audioDidReset) {
+            Integer mid = (Integer)args[0];
+            if (chatListView != null) {
+                int count = chatListView.getChildCount();
+                for (int a = 0; a < count; a++) {
+                    View view = chatListView.getChildAt(a);
+                    if (view instanceof ChatAudioCell) {
+                        ChatAudioCell cell = (ChatAudioCell)view;
+                        if (cell.getMessageObject() != null && cell.getMessageObject().messageOwner.id == mid) {
+                            cell.updateButtonState();
+                            break;
+                        }
+                    }
+                }
+            }
+        } else if (id == NotificationCenter.audioProgressDidChanged) {
+            Integer mid = (Integer)args[0];
+            if (chatListView != null) {
+                int count = chatListView.getChildCount();
+                for (int a = 0; a < count; a++) {
+                    View view = chatListView.getChildAt(a);
+                    if (view instanceof ChatAudioCell) {
+                        ChatAudioCell cell = (ChatAudioCell)view;
+                        if (cell.getMessageObject() != null && cell.getMessageObject().messageOwner.id == mid) {
+                            cell.updateProgress();
+                            break;
+                        }
+                    }
+                }
+            }
+        } else if (id == NotificationCenter.removeAllMessagesFromDialog) {
+            long did = (Long)args[0];
+            if (dialog_id == did) {
+                messages.clear();
+                messagesByDays.clear();
+                messagesDict.clear();
+                progressView.setVisibility(View.GONE);
+                chatListView.setEmptyView(emptyViewContainer);
+                if (currentEncryptedChat == null) {
+                    maxMessageId = Integer.MAX_VALUE;
+                    minMessageId = Integer.MIN_VALUE;
+                } else {
+                    maxMessageId = Integer.MIN_VALUE;
+                    minMessageId = Integer.MAX_VALUE;
+                }
+                maxDate = Integer.MIN_VALUE;
+                minDate = 0;
+                selectedMessagesIds.clear();
+                selectedMessagesCanCopyIds.clear();
+                actionBarLayer.hideActionMode();
+                chatAdapter.notifyDataSetChanged();
+            }
+        } else if (id == NotificationCenter.screenshotTook) {
+            updateInformationForScreenshotDetector();
+        } else if (id == NotificationCenter.blockedUsersDidLoaded) {
+            if (currentUser != null) {
+                boolean oldValue = userBlocked;
+                userBlocked = MessagesController.getInstance().blockedUsers.contains(currentUser.id);
+                if (oldValue != userBlocked) {
+                    updateBottomOverlay();
+                }
+            }
+        } else if (id == NotificationCenter.FileNewChunkAvailable) {
+            MessageObject messageObject = (MessageObject)args[0];
+            long finalSize = (Long)args[2];
+            if (finalSize != 0 && dialog_id == messageObject.getDialogId()) {
+                MessageObject currentObject = messagesDict.get(messageObject.messageOwner.id);
+                if (currentObject != null) {
+                    currentObject.messageOwner.media.video.size = (int)finalSize;
+                    updateVisibleRows();
+                }
+            }
+        } else if (id == NotificationCenter.didCreatedNewDeleteTask) {
+            SparseArray<ArrayList<Integer>> mids = (SparseArray<ArrayList<Integer>>)args[0];
+            boolean changed = false;
+            for(int i = 0; i < mids.size(); i++) {
+                int key = mids.keyAt(i);
+                ArrayList<Integer> arr = mids.get(key);
+                for (Integer mid : arr) {
+                    MessageObject messageObject = messagesDict.get(mid);
+                    if (messageObject != null) {
+                        messageObject.messageOwner.destroyTime = key;
+                        changed = true;
+                    }
+                }
+            }
+            if (changed) {
+                updateVisibleRows();
+            }
+        } else if (id == NotificationCenter.audioDidStarted) {
+            MessageObject messageObject = (MessageObject)args[0];
+            sendSecretMessageRead(messageObject);
+        }
+    }
+
+    private void updateBottomOverlay() {
+        if (currentUser == null) {
+            bottomOverlayChatText.setText(LocaleController.getString("DeleteThisGroup", R.string.DeleteThisGroup));
+        } else {
+            if (userBlocked) {
+                bottomOverlayChatText.setText(LocaleController.getString("Unblock", R.string.Unblock));
+            } else {
+                bottomOverlayChatText.setText(LocaleController.getString("DeleteThisChat", R.string.DeleteThisChat));
+            }
+        }
+        if (currentChat != null && (currentChat instanceof TLRPC.TL_chatForbidden || currentChat.left) ||
+                currentUser != null && (currentUser instanceof TLRPC.TL_userDeleted || currentUser instanceof TLRPC.TL_userEmpty || userBlocked)) {
+            bottomOverlayChat.setVisibility(View.VISIBLE);
+            chatActivityEnterView.setFieldFocused(false);
+        } else {
+            bottomOverlayChat.setVisibility(View.GONE);
+        }
+    }
+
+    private void updateContactStatus() {
+        if (topPanel == null) {
+            return;
+        }
+        if (currentUser == null) {
+            topPanel.setVisibility(View.GONE);
+        } else {
+            TLRPC.User user = MessagesController.getInstance().getUser(currentUser.id);
+            if (user != null) {
+                currentUser = user;
+            }
+            if (currentEncryptedChat != null && !(currentEncryptedChat instanceof TLRPC.TL_encryptedChat)
+                    || currentUser.id / 1000 == 333 || currentUser.id / 1000 == 777
+                    || currentUser instanceof TLRPC.TL_userEmpty || currentUser instanceof TLRPC.TL_userDeleted
+                    || ContactsController.getInstance().isLoadingContacts()
+                    || (currentUser.phone != null && currentUser.phone.length() != 0 && ContactsController.getInstance().contactsDict.get(currentUser.id) != null && (ContactsController.getInstance().contactsDict.size() != 0 || !ContactsController.getInstance().isLoadingContacts()))) {
+                topPanel.setVisibility(View.GONE);
+            } else {
+                topPanel.setVisibility(View.VISIBLE);
+                topPanelText.setShadowLayer(1, 0, AndroidUtilities.dp(1), 0xff8797a3);
+                if (isCustomTheme) {
+                    topPlaneClose.setImageResource(R.drawable.ic_msg_btn_cross_custom);
+                    topPanel.setBackgroundResource(R.drawable.top_pane_custom);
+                } else {
+                    topPlaneClose.setImageResource(R.drawable.ic_msg_btn_cross_custom);
+                    topPanel.setBackgroundResource(R.drawable.top_pane);
+                }
+                if (currentUser.phone != null && currentUser.phone.length() != 0) {
+                    if (MessagesController.getInstance().hidenAddToContacts.get(currentUser.id) != null) {
+                        topPanel.setVisibility(View.INVISIBLE);
+                    } else {
+                        topPanelText.setText(LocaleController.getString("AddToContacts", R.string.AddToContacts));
+                        topPlaneClose.setVisibility(View.VISIBLE);
+                        topPlaneClose.setOnClickListener(new View.OnClickListener() {
+                            @Override
+                            public void onClick(View v) {
+                                MessagesController.getInstance().hidenAddToContacts.put(currentUser.id, currentUser);
+                                topPanel.setVisibility(View.GONE);
+                            }
+                        });
+                        topPanel.setOnClickListener(new View.OnClickListener() {
+                            @Override
+                            public void onClick(View v) {
+                                Bundle args = new Bundle();
+                                args.putInt("user_id", currentUser.id);
+                                presentFragment(new ContactAddActivity(args));
+                            }
+                        });
+                    }
+                } else {
+                    if (MessagesController.getInstance().hidenAddToContacts.get(currentUser.id) != null) {
+                        topPanel.setVisibility(View.INVISIBLE);
+                    } else {
+                        topPanelText.setText(LocaleController.getString("ShareMyContactInfo", R.string.ShareMyContactInfo));
+                        topPlaneClose.setVisibility(View.GONE);
+                        topPanel.setOnClickListener(new View.OnClickListener() {
+                            @Override
+                            public void onClick(View v) {
+                                if (getParentActivity() == null) {
+                                    return;
+                                }
+                                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                                builder.setMessage(LocaleController.getString("AreYouSureShareMyContactInfo", R.string.AreYouSureShareMyContactInfo));
+                                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                                    @Override
+                                    public void onClick(DialogInterface dialogInterface, int i) {
+                                        MessagesController.getInstance().hidenAddToContacts.put(currentUser.id, currentUser);
+                                        topPanel.setVisibility(View.GONE);
+                                        SendMessagesHelper.getInstance().sendMessage(UserConfig.getCurrentUser(), dialog_id);
+                                        chatListView.post(new Runnable() {
+                                            @Override
+                                            public void run() {
+                                                chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+                                            }
+                                        });
+                                    }
+                                });
+                                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                                showAlertDialog(builder);
+                            }
+                        });
+                    }
+                }
+            }
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+
+        checkActionBarMenu();
+        if (chatAdapter != null) {
+            chatAdapter.notifyDataSetChanged();
+        }
+        NotificationsController.getInstance().setOpennedDialogId(dialog_id);
+        if (scrollToTopOnResume) {
+            if (scrollToTopUnReadOnResume && unreadMessageObject != null) {
+                if (chatListView != null) {
+                    chatListView.setSelectionFromTop(messages.size() - messages.indexOf(unreadMessageObject), -chatListView.getPaddingTop() - AndroidUtilities.dp(7));
+                }
+            } else {
+                if (chatListView != null) {
+                    chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+                }
+            }
+            scrollToTopUnReadOnResume = false;
+            scrollToTopOnResume = false;
+        }
+        paused = false;
+        if (readWhenResume && !messages.isEmpty()) {
+            for (MessageObject messageObject : messages) {
+                if (!messageObject.isUnread() && !messageObject.isFromMe()) {
+                    break;
+                }
+                if (!messageObject.isOut()) {
+                    messageObject.setIsRead();
+                }
+            }
+            readWhenResume = false;
+            MessagesController.getInstance().markDialogAsRead(dialog_id, messages.get(0).messageOwner.id, readWithMid, 0, readWithDate, true, false);
+        }
+
+        fixLayout(true);
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        String lastMessageText = preferences.getString("dialog_" + dialog_id, null);
+        if (lastMessageText != null) {
+            SharedPreferences.Editor editor = preferences.edit();
+            editor.remove("dialog_" + dialog_id);
+            editor.commit();
+            chatActivityEnterView.setFieldText(lastMessageText);
+        }
+        if (bottomOverlayChat.getVisibility() != View.VISIBLE) {
+            chatActivityEnterView.setFieldFocused(true);
+        }
+        if (currentEncryptedChat != null) {
+            chatEnterTime = System.currentTimeMillis();
+            chatLeaveTime = 0;
+        }
+
+        if (startVideoEdit != null) {
+            AndroidUtilities.RunOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    openVideoEditor(startVideoEdit, false);
+                    startVideoEdit = null;
+                }
+            });
+        }
+
+        chatListView.setOnItemLongClickListener(onItemLongClickListener);
+        chatListView.setOnItemClickListener(onItemClickListener);
+        chatListView.setLongClickable(true);
+    }
+
+    @Override
+    public void onBeginSlide() {
+        super.onBeginSlide();
+        chatActivityEnterView.hideEmojiPopup();
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        actionBarLayer.hideActionMode();
+        chatActivityEnterView.hideEmojiPopup();
+        paused = true;
+        NotificationsController.getInstance().setOpennedDialogId(0);
+
+        String text = chatActivityEnterView.getFieldText();
+        if (text != null) {
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+            SharedPreferences.Editor editor = preferences.edit();
+            editor.putString("dialog_" + dialog_id, text);
+            editor.commit();
+        }
+
+        chatActivityEnterView.setFieldFocused(false);
+        MessagesController.getInstance().cancelTyping(dialog_id);
+
+        if (currentEncryptedChat != null) {
+            chatLeaveTime = System.currentTimeMillis();
+            updateInformationForScreenshotDetector();
+        }
+    }
+
+    private void updateInformationForScreenshotDetector() {
+        if (currentEncryptedChat == null) {
+            return;
+        }
+        ArrayList<Long> visibleMessages = new ArrayList<Long>();
+        if (chatListView != null) {
+            int count = chatListView.getChildCount();
+            for (int a = 0; a < count; a++) {
+                View view = chatListView.getChildAt(a);
+                MessageObject object = null;
+                if (view instanceof ChatBaseCell) {
+                    ChatBaseCell cell = (ChatBaseCell) view;
+                    object = cell.getMessageObject();
+                }
+                if (object != null && object.messageOwner.id < 0 && object.messageOwner.random_id != 0) {
+                    visibleMessages.add(object.messageOwner.random_id);
+                }
+            }
+        }
+        MediaController.getInstance().setLastEncryptedChatParams(chatEnterTime, chatLeaveTime, currentEncryptedChat, visibleMessages);
+    }
+
+    private void fixLayout(final boolean resume) {
+        final int lastPos = chatListView.getLastVisiblePosition();
+        ViewTreeObserver obs = chatListView.getViewTreeObserver();
+        obs.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+            @Override
+            public boolean onPreDraw() {
+                if (chatListView != null) {
+                    chatListView.getViewTreeObserver().removeOnPreDrawListener(this);
+                }
+                if (getParentActivity() == null) {
+                    return true;
+                }
+                int height = AndroidUtilities.dp(48);
+                if (!AndroidUtilities.isTablet() && getParentActivity().getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+                    height = AndroidUtilities.dp(40);
+                    selectedMessagesCountTextView.setTextSize(16);
+                } else {
+                    selectedMessagesCountTextView.setTextSize(18);
+                }
+                if (avatarImageView != null) {
+                    RelativeLayout.LayoutParams params = (RelativeLayout.LayoutParams) avatarImageView.getLayoutParams();
+                    params.width = height;
+                    params.height = height;
+                    avatarImageView.setLayoutParams(params);
+                }
+                if (!resume && lastPos >= messages.size() - 1) {
+                    chatListView.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+                        }
+                    });
+                }
+                return false;
+            }
+        });
+    }
+
+    @Override
+    public void onConfigurationChanged(android.content.res.Configuration newConfig) {
+        fixLayout(false);
+    }
+
+    public void createMenu(View v, boolean single) {
+        if (actionBarLayer.isActionModeShowed()) {
+            return;
+        }
+
+        MessageObject message = null;
+        if (v instanceof ChatBaseCell) {
+            message = ((ChatBaseCell)v).getMessageObject();
+        } else if (v instanceof ChatActionCell) {
+            message = ((ChatActionCell)v).getMessageObject();
+        }
+        if (message == null) {
+            return;
+        }
+        final int type = getMessageType(message);
+
+        selectedObject = null;
+        forwaringMessage = null;
+        selectedMessagesCanCopyIds.clear();
+        selectedMessagesIds.clear();
+
+        if (single || type < 2 || type == 6) {
+            if (type >= 0) {
+                selectedObject = message;
+                if (getParentActivity() == null) {
+                    return;
+                }
+                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+
+                CharSequence[] items = null;
+
+                if (type == 0) {
+                    items = new CharSequence[] {LocaleController.getString("Retry", R.string.Retry), LocaleController.getString("Delete", R.string.Delete)};
+                } else if (type == 1) {
+                    items = new CharSequence[] {LocaleController.getString("Delete", R.string.Delete)};
+                } else if (type == 6) {
+                    items = new CharSequence[] {LocaleController.getString("Retry", R.string.Retry), LocaleController.getString("Copy", R.string.Copy), LocaleController.getString("Delete", R.string.Delete)};
+                } else {
+                    if (currentEncryptedChat == null) {
+                        if (type == 2) {
+                            items = new CharSequence[]{LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
+                        } else if (type == 3) {
+                            items = new CharSequence[]{LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Copy", R.string.Copy), LocaleController.getString("Delete", R.string.Delete)};
+                        } else if (type == 4) {
+                            items = new CharSequence[]{LocaleController.getString(selectedObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument ? "SaveToDownloads" : "SaveToGallery",
+                                    selectedObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument ? R.string.SaveToDownloads : R.string.SaveToGallery), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
+                        } else if (type == 5) {
+                            items = new CharSequence[]{LocaleController.getString("ApplyLocalizationFile", R.string.ApplyLocalizationFile), LocaleController.getString("SaveToDownloads", R.string.SaveToDownloads), LocaleController.getString("Forward", R.string.Forward), LocaleController.getString("Delete", R.string.Delete)};
+                        }
+                    } else {
+                        if (type == 2) {
+                            items = new CharSequence[]{LocaleController.getString("Delete", R.string.Delete)};
+                        } else if (type == 3) {
+                            items = new CharSequence[]{LocaleController.getString("Copy", R.string.Copy), LocaleController.getString("Delete", R.string.Delete)};
+                        } else if (type == 4) {
+                            items = new CharSequence[]{LocaleController.getString(selectedObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument ? "SaveToDownloads" : "SaveToGallery",
+                                    selectedObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument ? R.string.SaveToDownloads : R.string.SaveToGallery), LocaleController.getString("Delete", R.string.Delete)};
+                        } else if (type == 5) {
+                            items = new CharSequence[]{LocaleController.getString("ApplyLocalizationFile", R.string.ApplyLocalizationFile), LocaleController.getString("Delete", R.string.Delete)};
+                        }
+                    }
+                }
+
+                builder.setItems(items, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialogInterface, int i) {
+                        if (selectedObject == null) {
+                            return;
+                        }
+                        if (type == 0) {
+                            if (i == 0) {
+                                processSelectedOption(0);
+                            } else if (i == 1) {
+                                processSelectedOption(1);
+                            }
+                        } else if (type == 1) {
+                            processSelectedOption(1);
+                        } else if (type == 2) {
+                            if (currentEncryptedChat == null) {
+                                if (i == 0) {
+                                    processSelectedOption(2);
+                                } else if (i == 1) {
+                                    processSelectedOption(1);
+                                }
+                            } else {
+                                processSelectedOption(1);
+                            }
+                        } else if (type == 3) {
+                            if (currentEncryptedChat == null) {
+                                if (i == 0) {
+                                    processSelectedOption(2);
+                                } else if (i == 1) {
+                                    processSelectedOption(3);
+                                } else if (i == 2) {
+                                    processSelectedOption(1);
+                                }
+                            } else {
+                                if (i == 0) {
+                                    processSelectedOption(3);
+                                } else if (i == 1) {
+                                    processSelectedOption(1);
+                                }
+                            }
+                        } else if (type == 4) {
+                            if (currentEncryptedChat == null) {
+                                if (i == 0) {
+                                    processSelectedOption(4);
+                                } else if (i == 1) {
+                                    processSelectedOption(2);
+                                } else if (i == 2) {
+                                    processSelectedOption(1);
+                                }
+                            } else {
+                                if (i == 0) {
+
+                                } else if (i == 1) {
+                                    processSelectedOption(1);
+                                }
+                            }
+                        } else if (type == 5) {
+                            if (i == 0) {
+                                processSelectedOption(5);
+                            } else {
+                                if (currentEncryptedChat == null) {
+                                    if (i == 1) {
+                                        processSelectedOption(4);
+                                    } else if (i == 2) {
+                                        processSelectedOption(2);
+                                    } else if (i == 3) {
+                                        processSelectedOption(1);
+                                    }
+                                } else {
+                                    if (i == 1) {
+                                        processSelectedOption(1);
+                                    }
+                                }
+                            }
+                        } else if (type == 6) {
+                            if (i == 0) {
+                                processSelectedOption(0);
+                            } else if (i == 1) {
+                                processSelectedOption(3);
+                            } else if (i == 2) {
+                                processSelectedOption(1);
+                            }
+                        }
+                    }
+                });
+
+                builder.setTitle(LocaleController.getString("Message", R.string.Message));
+                showAlertDialog(builder);
+            }
+            return;
+        }
+        actionBarLayer.showActionMode();
+        if (Build.VERSION.SDK_INT >= 11) {
+            AnimatorSet animatorSet = new AnimatorSet();
+            ArrayList<Animator> animators = new ArrayList<Animator>();
+            for (int a = 0; a < actionModeViews.size(); a++) {
+                View view = actionModeViews.get(a);
+                if (a < 2) {
+                    animators.add(ObjectAnimator.ofFloat(view, "translationX", -AndroidUtilities.dp(56), 0));
+                } else {
+                    animators.add(ObjectAnimator.ofFloat(view, "scaleY", 0.1f, 1.0f));
+                }
+            }
+            animatorSet.playTogether(animators);
+            animatorSet.setDuration(250);
+            animatorSet.start();
+        }
+        addToSelectedMessages(message);
+        updateActionModeTitle();
+        updateVisibleRows();
+    }
+
+    private void processSelectedOption(int option) {
+        if (selectedObject == null) {
+            return;
+        }
+        if (option == 0) {
+            if (SendMessagesHelper.getInstance().retrySendMessage(selectedObject, false)) {
+                chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+            }
+        } else if (option == 1) {
+            ArrayList<Integer> ids = new ArrayList<Integer>();
+            ids.add(selectedObject.messageOwner.id);
+            removeUnreadPlane(true);
+            ArrayList<Long> random_ids = null;
+            if (currentEncryptedChat != null && selectedObject.messageOwner.random_id != 0 && selectedObject.type != 10) {
+                random_ids = new ArrayList<Long>();
+                random_ids.add(selectedObject.messageOwner.random_id);
+            }
+            MessagesController.getInstance().deleteMessages(ids, random_ids, currentEncryptedChat);
+        } else if (option == 2) {
+            forwaringMessage = selectedObject;
+            Bundle args = new Bundle();
+            args.putBoolean("onlySelect", true);
+            args.putBoolean("serverOnly", true);
+            args.putString("selectAlertString", LocaleController.getString("ForwardMessagesTo", R.string.ForwardMessagesTo));
+            args.putString("selectAlertStringGroup", LocaleController.getString("ForwardMessagesToGroup", R.string.ForwardMessagesToGroup));
+            MessagesActivity fragment = new MessagesActivity(args);
+            fragment.setDelegate(this);
+            presentFragment(fragment);
+        } else if (option == 3) {
+            if(Build.VERSION.SDK_INT < 11) {
+                android.text.ClipboardManager clipboard = (android.text.ClipboardManager)ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                clipboard.setText(selectedObject.messageText);
+            } else {
+                android.content.ClipboardManager clipboard = (android.content.ClipboardManager)ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                android.content.ClipData clip = android.content.ClipData.newPlainText("label", selectedObject.messageText);
+                clipboard.setPrimaryClip(clip);
+            }
+        } else if (option == 4) {
+            String fileName = selectedObject.getFileName();
+            String path = selectedObject.messageOwner.attachPath;
+            if (path == null || path.length() == 0) {
+                path = FileLoader.getPathToMessage(selectedObject.messageOwner).toString();
+            }
+            if (selectedObject.type == 3) {
+                MediaController.saveFile(path, getParentActivity(), 1, null);
+            } else if (selectedObject.type == 1) {
+                MediaController.saveFile(path, getParentActivity(), 0, null);
+            } else if (selectedObject.type == 8 || selectedObject.type == 9) {
+                MediaController.saveFile(path, getParentActivity(), 2, selectedObject.messageOwner.media.document.file_name);
+            }
+        } else if (option == 5) {
+            File locFile = null;
+            if (selectedObject.messageOwner.attachPath != null && selectedObject.messageOwner.attachPath.length() != 0) {
+                File f = new File(selectedObject.messageOwner.attachPath);
+                if (f.exists()) {
+                    locFile = f;
+                }
+            }
+            if (locFile == null) {
+                File f = FileLoader.getPathToMessage(selectedObject.messageOwner);
+                if (f.exists()) {
+                    locFile = f;
+                }
+            }
+            if (locFile != null) {
+                if (LocaleController.getInstance().applyLanguageFile(locFile)) {
+                    presentFragment(new LanguageSelectActivity());
+                } else {
+                    if (getParentActivity() == null) {
+                        return;
+                    }
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                    builder.setMessage(LocaleController.getString("IncorrectLocalization", R.string.IncorrectLocalization));
+                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
+                    showAlertDialog(builder);
+                }
+            }
+        }
+        selectedObject = null;
+    }
+
+    private void forwardSelectedMessages(long did, boolean fromMyName) {
+        if (forwaringMessage != null) {
+            if (!fromMyName) {
+                if (forwaringMessage.messageOwner.id > 0) {
+                    SendMessagesHelper.getInstance().sendMessage(forwaringMessage, did);
+                }
+            } else {
+                SendMessagesHelper.getInstance().processForwardFromMyName(forwaringMessage, did);
+            }
+            forwaringMessage = null;
+        } else {
+            ArrayList<Integer> ids = new ArrayList<Integer>(selectedMessagesIds.keySet());
+            Collections.sort(ids);
+            for (Integer id : ids) {
+                if (!fromMyName) {
+                    if (id > 0) {
+                        SendMessagesHelper.getInstance().sendMessage(selectedMessagesIds.get(id), did);
+                    }
+                } else {
+                    SendMessagesHelper.getInstance().processForwardFromMyName(selectedMessagesIds.get(id), did);
+                }
+            }
+            selectedMessagesCanCopyIds.clear();
+            selectedMessagesIds.clear();
+        }
+    }
+
+    @Override
+    public void didSelectDialog(MessagesActivity activity, long did, boolean param) {
+        if (dialog_id != 0 && (forwaringMessage != null || !selectedMessagesIds.isEmpty())) {
+            if (isBroadcast) {
+                param = true;
+            }
+            if (did != dialog_id) {
+                int lower_part = (int)did;
+                if (lower_part != 0) {
+                    Bundle args = new Bundle();
+                    args.putBoolean("scrollToTopOnResume", scrollToTopOnResume);
+                    if (lower_part > 0) {
+                        args.putInt("user_id", lower_part);
+                    } else if (lower_part < 0) {
+                        args.putInt("chat_id", -lower_part);
+                    }
+                    presentFragment(new ChatActivity(args), true);
+                    forwardSelectedMessages(did, param);
+                    if (!AndroidUtilities.isTablet()) {
+                        removeSelfFromStack();
+                    }
+                } else {
+                    activity.finishFragment();
+                }
+            } else {
+                activity.finishFragment();
+                forwardSelectedMessages(did, param);
+                chatListView.setSelectionFromTop(messages.size() - 1, -100000 - chatListView.getPaddingTop());
+                scrollToTopOnResume = true;
+                if (AndroidUtilities.isTablet()) {
+                    actionBarLayer.hideActionMode();
+                }
+            }
+        }
+    }
+
+    @Override
+    public boolean onBackPressed() {
+        if (actionBarLayer.isActionModeShowed()) {
+            selectedMessagesIds.clear();
+            selectedMessagesCanCopyIds.clear();
+            actionBarLayer.hideActionMode();
+            updateVisibleRows();
+            return false;
+        } else if (chatActivityEnterView.isEmojiPopupShowing()) {
+            chatActivityEnterView.hideEmojiPopup();
+            return false;
+        }
+        return true;
+    }
+
+    public boolean isGoogleMapsInstalled() {
+        try {
+            ApplicationInfo info = ApplicationLoader.applicationContext.getPackageManager().getApplicationInfo("com.google.android.apps.maps", 0);
+            return true;
+        } catch(PackageManager.NameNotFoundException e) {
+            if (getParentActivity() == null) {
+                return false;
+            }
+            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+            builder.setMessage("Install Google Maps?");
+            builder.setCancelable(true);
+            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialogInterface, int i) {
+                    try {
+                        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=com.google.android.apps.maps"));
+                        getParentActivity().startActivity(intent);
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                }
+            });
+            builder.setNegativeButton(R.string.Cancel, null);
+            showAlertDialog(builder);
+            return false;
+        }
+    }
+
+    private void updateVisibleRows() {
+        if (chatListView == null) {
+            return;
+        }
+        int count = chatListView.getChildCount();
+        for (int a = 0; a < count; a++) {
+            View view = chatListView.getChildAt(a);
+            Object tag = view.getTag();
+            if (view instanceof ChatBaseCell) {
+                ChatBaseCell cell = (ChatBaseCell)view;
+
+                boolean disableSelection = false;
+                boolean selected = false;
+                if (actionBarLayer.isActionModeShowed()) {
+                    if (selectedMessagesIds.containsKey(cell.getMessageObject().messageOwner.id)) {
+                        view.setBackgroundColor(0x6633b5e5);
+                        selected = true;
+                    } else {
+                        view.setBackgroundColor(0);
+                    }
+                    disableSelection = true;
+                } else {
+                    view.setBackgroundColor(0);
+                }
+
+                cell.setMessageObject(cell.getMessageObject());
+
+                cell.setCheckPressed(!disableSelection, disableSelection && selected);
+            }
+        }
+    }
+
+    private void alertUserOpenError(MessageObject message) {
+        if (getParentActivity() == null) {
+            return;
+        }
+        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
+        if (message.type == 3) {
+            builder.setMessage(LocaleController.getString("NoPlayerInstalled", R.string.NoPlayerInstalled));
+        } else {
+            builder.setMessage(LocaleController.formatString("NoHandleAppInstalled", R.string.NoHandleAppInstalled, message.messageOwner.media.document.mime_type));
+        }
+        showAlertDialog(builder);
+    }
+
+    @Override
+    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+        if (messageObject == null) {
+            return null;
+        }
+        int count = chatListView.getChildCount();
+
+        for (int a = 0; a < count; a++) {
+            MessageObject messageToOpen = null;
+            ImageReceiver imageReceiver = null;
+            View view = chatListView.getChildAt(a);
+            if (view instanceof ChatMediaCell) {
+                ChatMediaCell cell = (ChatMediaCell)view;
+                MessageObject message = cell.getMessageObject();
+                if (message != null && message.messageOwner.id == messageObject.messageOwner.id) {
+                    messageToOpen = message;
+                    imageReceiver = cell.getPhotoImage();
+                }
+            } else if (view instanceof ChatActionCell) {
+                ChatActionCell cell = (ChatActionCell)view;
+                MessageObject message = cell.getMessageObject();
+                if (message != null && message.messageOwner.id == messageObject.messageOwner.id) {
+                    messageToOpen = message;
+                    imageReceiver = cell.getPhotoImage();
+                }
+            }
+
+            if (messageToOpen != null) {
+                int coords[] = new int[2];
+                view.getLocationInWindow(coords);
+                PhotoViewer.PlaceProviderObject object = new PhotoViewer.PlaceProviderObject();
+                object.viewX = coords[0];
+                object.viewY = coords[1] - AndroidUtilities.statusBarHeight;
+                object.parentView = chatListView;
+                object.imageReceiver = imageReceiver;
+                object.thumb = object.imageReceiver.getBitmap();
+                return object;
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) { }
+
+    @Override
+    public void willHidePhotoViewer() { }
+
+    @Override
+    public boolean isPhotoChecked(int index) { return false; }
+
+    @Override
+    public void setPhotoChecked(int index) { }
+
+    @Override
+    public void cancelButtonPressed() { }
+
+    @Override
+    public void sendButtonPressed(int index) { }
+
+    @Override
+    public int getSelectedCount() { return 0; }
+
+    private class ChatAdapter extends BaseFragmentAdapter {
+
+        private Context mContext;
+
+        public ChatAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return true;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return true;
+        }
+
+        @Override
+        public int getCount() {
+            int count = messages.size();
+            if (count != 0) {
+                if (!endReached) {
+                    count++;
+                }
+                if (!unread_end_reached) {
+                    count++;
+                }
+            }
+            return count;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return true;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int offset = 1;
+            if ((!endReached || !unread_end_reached) && messages.size() != 0) {
+                if (!endReached) {
+                    offset = 0;
+                }
+                if (i == 0 && !endReached || !unread_end_reached && i == (messages.size() + 1 - offset)) {
+                    View progressBar = null;
+                    if (view == null) {
+                        LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                        view = li.inflate(R.layout.chat_loading_layout, viewGroup, false);
+                        progressBar = view.findViewById(R.id.progressLayout);
+                        if (isCustomTheme) {
+                            progressBar.setBackgroundResource(R.drawable.system_loader2);
+                        } else {
+                            progressBar.setBackgroundResource(R.drawable.system_loader1);
+                        }
+                    } else {
+                        progressBar = view.findViewById(R.id.progressLayout);
+                    }
+                    progressBar.setVisibility(loadsCount > 1 ? View.VISIBLE : View.INVISIBLE);
+
+                    return view;
+                }
+            }
+            final MessageObject message = messages.get(messages.size() - i - offset);
+            int type = message.contentType;
+            if (view == null) {
+                if (type == 0) {
+                    view = new ChatMessageCell(mContext);
+                } if (type == 1) {
+                    view = new ChatMediaCell(mContext);
+                } else if (type == 2) {
+                    view = new ChatAudioCell(mContext);
+                } else if (type == 3) {
+                    view = new ChatContactCell(mContext);
+                } else if (type == 6) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.chat_unread_layout, viewGroup, false);
+                } else if (type == 4) {
+                    view = new ChatActionCell(mContext);
+                }
+
+                if (view instanceof ChatBaseCell) {
+                    ((ChatBaseCell)view).setDelegate(new ChatBaseCell.ChatBaseCellDelegate() {
+                        @Override
+                        public void didPressedUserAvatar(ChatBaseCell cell, TLRPC.User user) {
+                            if (actionBarLayer.isActionModeShowed()) {
+                                processRowSelect(cell);
+                                return;
+                            }
+                            if (user != null && user.id != UserConfig.getClientUserId()) {
+                                Bundle args = new Bundle();
+                                args.putInt("user_id", user.id);
+                                presentFragment(new UserProfileActivity(args));
+                            }
+                        }
+
+                        @Override
+                        public void didPressedCancelSendButton(ChatBaseCell cell) {
+                            MessageObject message = cell.getMessageObject();
+                            if (message.messageOwner.send_state != 0) {
+                                SendMessagesHelper.getInstance().cancelSendingMessage(message);
+                            }
+                        }
+
+                        @Override
+                        public void didLongPressed(ChatBaseCell cell) {
+                            createMenu(cell, false);
+                        }
+
+                        @Override
+                        public boolean canPerformActions() {
+                            return actionBarLayer != null && !actionBarLayer.isActionModeShowed();
+                        }
+                    });
+                    if (view instanceof ChatMediaCell) {
+                        ((ChatMediaCell) view).setMediaDelegate(new ChatMediaCell.ChatMediaCellDelegate() {
+                            @Override
+                            public void didClickedImage(ChatMediaCell cell) {
+                                MessageObject message = cell.getMessageObject();
+                                if (message.isSendError()) {
+                                    createMenu(cell, false);
+                                    return;
+                                } else if (message.isSending()) {
+                                    return;
+                                }
+                                if (message.type == 1) {
+                                    PhotoViewer.getInstance().setParentActivity(getParentActivity());
+                                    PhotoViewer.getInstance().openPhoto(message, ChatActivity.this);
+                                } else if (message.type == 3) {
+                                    sendSecretMessageRead(message);
+                                    try {
+                                        File f = null;
+                                        if (message.messageOwner.attachPath != null && message.messageOwner.attachPath.length() != 0) {
+                                            f = new File(message.messageOwner.attachPath);
+                                        }
+                                        if (f == null || f != null && !f.exists()) {
+                                            f = FileLoader.getPathToMessage(message.messageOwner);
+                                        }
+                                        Intent intent = new Intent(Intent.ACTION_VIEW);
+                                        intent.setDataAndType(Uri.fromFile(f), "video/mp4");
+                                        getParentActivity().startActivity(intent);
+                                    } catch (Exception e) {
+                                        alertUserOpenError(message);
+                                    }
+                                } else if (message.type == 4) {
+                                    if (!isGoogleMapsInstalled()) {
+                                        return;
+                                    }
+                                    LocationActivity fragment = new LocationActivity();
+                                    fragment.setMessageObject(message);
+                                    presentFragment(fragment);
+                                } else if (message.type == 9) {
+                                    File f = null;
+                                    String fileName = message.getFileName();
+                                    if (message.messageOwner.attachPath != null && message.messageOwner.attachPath.length() != 0) {
+                                        f = new File(message.messageOwner.attachPath);
+                                    }
+                                    if (f == null || f != null && !f.exists()) {
+                                        f = FileLoader.getPathToMessage(message.messageOwner);
+                                    }
+                                    if (f != null && f.exists()) {
+                                        String realMimeType = null;
+                                        try {
+                                            Intent intent = new Intent(Intent.ACTION_VIEW);
+                                            if (message.type == 8 || message.type == 9) {
+                                                MimeTypeMap myMime = MimeTypeMap.getSingleton();
+                                                int idx = fileName.lastIndexOf(".");
+                                                if (idx != -1) {
+                                                    String ext = fileName.substring(idx + 1);
+                                                    realMimeType = myMime.getMimeTypeFromExtension(ext.toLowerCase());
+                                                    if (realMimeType != null) {
+                                                        intent.setDataAndType(Uri.fromFile(f), realMimeType);
+                                                    } else {
+                                                        intent.setDataAndType(Uri.fromFile(f), "text/plain");
+                                                    }
+                                                } else {
+                                                    intent.setDataAndType(Uri.fromFile(f), "text/plain");
+                                                }
+                                            }
+                                            if (realMimeType != null) {
+                                                try {
+                                                    getParentActivity().startActivity(intent);
+                                                } catch (Exception e) {
+                                                    intent.setDataAndType(Uri.fromFile(f), "text/plain");
+                                                    getParentActivity().startActivity(intent);
+                                                }
+                                            } else {
+                                                getParentActivity().startActivity(intent);
+                                            }
+                                        } catch (Exception e) {
+                                            alertUserOpenError(message);
+                                        }
+                                    }
+                                }
+                            }
+
+                            @Override
+                            public void didPressedOther(ChatMediaCell cell) {
+                                createMenu(cell, true);
+                            }
+                        });
+                    } else if (view instanceof ChatContactCell) {
+                        ((ChatContactCell)view).setContactDelegate(new ChatContactCell.ChatContactCellDelegate() {
+                            @Override
+                            public void didClickAddButton(ChatContactCell cell, TLRPC.User user) {
+                                if (actionBarLayer.isActionModeShowed()) {
+                                    processRowSelect(cell);
+                                    return;
+                                }
+                                MessageObject messageObject = cell.getMessageObject();
+                                Bundle args = new Bundle();
+                                args.putInt("user_id", messageObject.messageOwner.media.user_id);
+                                args.putString("phone", messageObject.messageOwner.media.phone_number);
+                                presentFragment(new ContactAddActivity(args));
+                            }
+
+                            @Override
+                            public void didClickPhone(ChatContactCell cell) {
+                                if (actionBarLayer.isActionModeShowed()) {
+                                    processRowSelect(cell);
+                                    return;
+                                }
+                                final MessageObject messageObject = cell.getMessageObject();
+                                if (getParentActivity() == null || messageObject.messageOwner.media.phone_number == null || messageObject.messageOwner.media.phone_number.length() == 0) {
+                                    return;
+                                }
+                                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                                builder.setItems(new CharSequence[]{LocaleController.getString("Copy", R.string.Copy), LocaleController.getString("Call", R.string.Call)}, new DialogInterface.OnClickListener() {
+                                            @Override
+                                            public void onClick(DialogInterface dialogInterface, int i) {
+                                                if (i == 1) {
+                                                    try {
+                                                        Intent intent = new Intent(Intent.ACTION_DIAL, Uri.parse("tel:" + messageObject.messageOwner.media.phone_number));
+                                                        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                                                        getParentActivity().startActivity(intent);
+                                                    } catch (Exception e) {
+                                                        FileLog.e("tmessages", e);
+                                                    }
+                                                } else if (i == 0) {
+                                                    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB) {
+                                                        android.text.ClipboardManager clipboard = (android.text.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                                                        clipboard.setText(messageObject.messageOwner.media.phone_number);
+                                                    } else {
+                                                        android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                                                        android.content.ClipData clip = android.content.ClipData.newPlainText("label", messageObject.messageOwner.media.phone_number);
+                                                        clipboard.setPrimaryClip(clip);
+                                                    }
+                                                }
+                                            }
+                                        }
+                                );
+                                showAlertDialog(builder);
+                            }
+                        });
+                    }
+                } else if (view instanceof ChatActionCell) {
+                    ((ChatActionCell)view).setDelegate(new ChatActionCell.ChatActionCellDelegate() {
+                        @Override
+                        public void didClickedImage(ChatActionCell cell) {
+                            MessageObject message = cell.getMessageObject();
+                            PhotoViewer.getInstance().setParentActivity(getParentActivity());
+                            PhotoViewer.getInstance().openPhoto(message, ChatActivity.this);
+                        }
+
+                        @Override
+                        public void didLongPressed(ChatActionCell cell) {
+                            createMenu(cell, false);
+                        }
+
+                        @Override
+                        public void needOpenUserProfile(int uid) {
+                            if (uid != UserConfig.getClientUserId()) {
+                                Bundle args = new Bundle();
+                                args.putInt("user_id", uid);
+                                presentFragment(new UserProfileActivity(args));
+                            }
+                        }
+                    });
+                }
+            }
+
+            boolean selected = false;
+            boolean disableSelection = false;
+            if (actionBarLayer.isActionModeShowed()) {
+                if (selectedMessagesIds.containsKey(message.messageOwner.id)) {
+                    view.setBackgroundColor(0x6633b5e5);
+                    selected = true;
+                } else {
+                    view.setBackgroundColor(0);
+                }
+                disableSelection = true;
+            } else {
+                view.setBackgroundColor(0);
+            }
+
+            if (view instanceof ChatBaseCell) {
+                ChatBaseCell baseCell = (ChatBaseCell)view;
+                baseCell.isChat = currentChat != null;
+                baseCell.setMessageObject(message);
+                baseCell.setCheckPressed(!disableSelection, disableSelection && selected);
+                if (view instanceof ChatAudioCell && MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_AUDIO)) {
+                    ((ChatAudioCell)view).downloadAudioIfNeed();
+                }
+            } else if (view instanceof ChatActionCell) {
+                ChatActionCell actionCell = (ChatActionCell)view;
+                actionCell.setMessageObject(message);
+                actionCell.setUseBlackBackground(isCustomTheme);
+            }
+            if (type == 6) {
+                TextView messageTextView = (TextView)view.findViewById(R.id.chat_message_text);
+                messageTextView.setText(LocaleController.formatPluralString("NewMessages", unread_to_load));
+            }
+
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            int offset = 1;
+            if (!endReached && messages.size() != 0) {
+                offset = 0;
+                if (i == 0) {
+                    return 5;
+                }
+            }
+            if (!unread_end_reached && i == (messages.size() + 1 - offset)) {
+                return 5;
+            }
+            MessageObject message = messages.get(messages.size() - i - offset);
+            return message.contentType;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 7;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            int count = messages.size();
+            if (count != 0) {
+                if (!endReached) {
+                    count++;
+                }
+                if (!unread_end_reached) {
+                    count++;
+                }
+            }
+            return count == 0;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/ChatProfileActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/ChatProfileActivity.java
new file mode 100644
index 000000000..fe2d8b4ed
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/ChatProfileActivity.java
@@ -0,0 +1,777 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.graphics.Typeface;
+import android.os.Bundle;
+import android.text.Html;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.ImageButton;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MessageObject;
+import org.tomato.android.MessagesController;
+import org.tomato.android.MessagesStorage;
+import org.tomato.android.NotificationCenter;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
+import org.tomato.messenger.Utilities;
+import org.tomato.ui.Adapters.BaseFragmentAdapter;
+import org.tomato.ui.Cells.ChatOrUserCell;
+import org.tomato.ui.Views.ActionBar.ActionBarLayer;
+import org.tomato.ui.Views.ActionBar.ActionBarMenu;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+import org.tomato.ui.Views.AvatarUpdater;
+import org.tomato.ui.Views.BackupImageView;
+import org.tomato.ui.Views.SettingsSectionLayout;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.HashMap;
+import java.util.concurrent.Semaphore;
+
+public class ChatProfileActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, ContactsActivity.ContactsActivityDelegate, PhotoViewer.PhotoViewerProvider {
+    private ListView listView;
+    private ListAdapter listViewAdapter;
+    private int chat_id;
+    private String selectedPhone;
+    private TLRPC.ChatParticipants info;
+    private TLRPC.TL_chatParticipant selectedUser;
+    private AvatarUpdater avatarUpdater = new AvatarUpdater();
+    private int totalMediaCount = -1;
+    private int onlineCount = -1;
+    private ArrayList<Integer> sortedUsers = new ArrayList<Integer>();
+    private TLRPC.Chat currentChat;
+
+    private int avatarRow;
+    private int settingsSectionRow;
+    private int settingsNotificationsRow;
+    private int sharedMediaSectionRow;
+    private int sharedMediaRow;
+    private int membersSectionRow;
+    private int membersEndRow;
+    private int addMemberRow;
+    private int leaveGroupRow;
+    private int rowCount = 0;
+
+    private static final int done_button = 1;
+
+    public ChatProfileActivity(Bundle args) {
+        super(args);
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+
+        chat_id = getArguments().getInt("chat_id", 0);
+        currentChat = MessagesController.getInstance().getChat(chat_id);
+        if (currentChat == null) {
+            final Semaphore semaphore = new Semaphore(0);
+            MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
+                @Override
+                public void run() {
+                    currentChat = MessagesStorage.getInstance().getChat(chat_id);
+                    semaphore.release();
+                }
+            });
+            try {
+                semaphore.acquire();
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            if (currentChat != null) {
+                MessagesController.getInstance().putChat(currentChat, true);
+            } else {
+                return false;
+            }
+        }
+
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.chatInfoDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mediaCountDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeChats);
+
+        updateOnlineCount();
+        if (chat_id > 0) {
+            MessagesController.getInstance().getMediaCount(-chat_id, classGuid, true);
+        }
+        avatarUpdater.delegate = new AvatarUpdater.AvatarUpdaterDelegate() {
+            @Override
+            public void didUploadedPhoto(TLRPC.InputFile file, TLRPC.PhotoSize small, TLRPC.PhotoSize big) {
+                if (chat_id != 0) {
+                    MessagesController.getInstance().changeChatAvatar(chat_id, file);
+                }
+            }
+        };
+        avatarUpdater.parentFragment = this;
+
+        updateRowsIds();
+
+        return true;
+    }
+
+    private void updateRowsIds() {
+        rowCount = 0;
+        avatarRow = rowCount++;
+        if (chat_id > 0) {
+            settingsSectionRow = rowCount++;
+            settingsNotificationsRow = rowCount++;
+            sharedMediaSectionRow = rowCount++;
+            sharedMediaRow = rowCount++;
+        }
+        if (info != null && !(info instanceof TLRPC.TL_chatParticipantsForbidden)) {
+            membersSectionRow = rowCount++;
+            rowCount += info.participants.size();
+            membersEndRow = rowCount;
+            int maxCount = chat_id > 0 ? MessagesController.getInstance().maxGroupCount : MessagesController.getInstance().maxBroadcastCount;
+            if (info.participants.size() < maxCount) {
+                addMemberRow = rowCount++;
+            } else {
+                addMemberRow = -1;
+            }
+        } else {
+            membersEndRow = -1;
+            addMemberRow = -1;
+            membersSectionRow = -1;
+        }
+        if (chat_id > 0) {
+            leaveGroupRow = rowCount++;
+        }
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.chatInfoDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.mediaCountDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
+        avatarUpdater.clear();
+    }
+
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
+            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
+            if (chat_id > 0) {
+                actionBarLayer.setTitle(LocaleController.getString("GroupInfo", R.string.GroupInfo));
+            } else {
+                actionBarLayer.setTitle(LocaleController.getString("BroadcastList", R.string.BroadcastList));
+            }
+            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    } else if (id == done_button) {
+                        openAddMenu();
+                    }
+                }
+            });
+            ActionBarMenu menu = actionBarLayer.createMenu();
+            View item = menu.addItemResource(done_button, R.layout.group_profile_add_member_layout);
+            TextView textView = (TextView)item.findViewById(R.id.done_button);
+            if (textView != null) {
+                if (chat_id > 0) {
+                    textView.setText(LocaleController.getString("AddMember", R.string.AddMember));
+                } else {
+                    textView.setText(LocaleController.getString("AddRecipient", R.string.AddRecipient));
+                }
+            }
+
+            fragmentView = inflater.inflate(R.layout.chat_profile_layout, container, false);
+
+            listView = (ListView)fragmentView.findViewById(R.id.listView);
+            listView.setAdapter(listViewAdapter = new ListAdapter(getParentActivity()));
+            listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
+                @Override
+                public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    if (i > membersSectionRow && i < membersEndRow) {
+                        if (getParentActivity() == null) {
+                            return false;
+                        }
+
+                        TLRPC.TL_chatParticipant user = info.participants.get(sortedUsers.get(i - membersSectionRow - 1));
+                        if (user.user_id == UserConfig.getClientUserId()) {
+                            return false;
+                        }
+                        if (info.admin_id != UserConfig.getClientUserId() && user.inviter_id != UserConfig.getClientUserId()) {
+                            return false;
+                        }
+                        selectedUser = user;
+
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        CharSequence[] items = new CharSequence[] {chat_id > 0 ? LocaleController.getString("KickFromGroup", R.string.KickFromGroup) : LocaleController.getString("KickFromBroadcast", R.string.KickFromBroadcast)};
+
+                        builder.setItems(items, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                if (i == 0) {
+                                    kickUser(selectedUser);
+                                }
+                            }
+                        });
+                        showAlertDialog(builder);
+
+                        return true;
+                    }
+                    return false;
+                }
+            });
+
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+                    if (i == sharedMediaRow) {
+                        Bundle args = new Bundle();
+                        args.putLong("dialog_id", -chat_id);
+                        presentFragment(new MediaActivity(args));
+                    } else if (i == addMemberRow) {
+                        openAddMenu();
+                    } else if (i > membersSectionRow && i < membersEndRow) {
+                        int user_id = info.participants.get(sortedUsers.get(i - membersSectionRow - 1)).user_id;
+                        if (user_id == UserConfig.getClientUserId()) {
+                            return;
+                        }
+                        Bundle args = new Bundle();
+                        args.putInt("user_id", user_id);
+                        presentFragment(new UserProfileActivity(args));
+                    } else if (i == settingsNotificationsRow) {
+                        Bundle args = new Bundle();
+                        args.putLong("dialog_id", -chat_id);
+                        presentFragment(new ProfileNotificationsActivity(args));
+                    }
+                }
+            });
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    @Override
+    public void didSelectContact(TLRPC.User user, String param) {
+        MessagesController.getInstance().addUserToChat(chat_id, user, info, param != null ? Utilities.parseInt(param) : 0);
+    }
+
+    @Override
+    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
+        avatarUpdater.onActivityResult(requestCode, resultCode, data);
+    }
+
+    @Override
+    public void saveSelfArgs(Bundle args) {
+        if (avatarUpdater != null && avatarUpdater.currentPicturePath != null) {
+            args.putString("path", avatarUpdater.currentPicturePath);
+        }
+    }
+
+    @Override
+    public void restoreSelfArgs(Bundle args) {
+        MessagesController.getInstance().loadChatInfo(chat_id, null);
+        if (avatarUpdater != null) {
+            avatarUpdater.currentPicturePath = args.getString("path");
+        }
+    }
+
+    @Override
+    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+        if (fileLocation == null) {
+            return null;
+        }
+        TLRPC.Chat chat = MessagesController.getInstance().getChat(chat_id);
+        if (chat != null && chat.photo != null && chat.photo.photo_big != null) {
+            TLRPC.FileLocation photoBig = chat.photo.photo_big;
+            if (photoBig.local_id == fileLocation.local_id && photoBig.volume_id == fileLocation.volume_id && photoBig.dc_id == fileLocation.dc_id) {
+                int count = listView.getChildCount();
+                for (int a = 0; a < count; a++) {
+                    View view = listView.getChildAt(a);
+                    BackupImageView avatarImage = (BackupImageView)view.findViewById(R.id.settings_avatar_image);
+                    if (avatarImage != null) {
+                        int coords[] = new int[2];
+                        avatarImage.getLocationInWindow(coords);
+                        PhotoViewer.PlaceProviderObject object = new PhotoViewer.PlaceProviderObject();
+                        object.viewX = coords[0];
+                        object.viewY = coords[1] - AndroidUtilities.statusBarHeight;
+                        object.parentView = listView;
+                        object.imageReceiver = avatarImage.imageReceiver;
+                        object.thumb = object.imageReceiver.getBitmap();
+                        object.size = -1;
+                        return object;
+                    }
+                }
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) { }
+
+    @Override
+    public void willHidePhotoViewer() { }
+
+    @Override
+    public boolean isPhotoChecked(int index) { return false; }
+
+    @Override
+    public void setPhotoChecked(int index) { }
+
+    @Override
+    public void cancelButtonPressed() { }
+
+    @Override
+    public void sendButtonPressed(int index) { }
+
+    @Override
+    public int getSelectedCount() { return 0; }
+
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.updateInterfaces) {
+            int mask = (Integer)args[0];
+            if ((mask & MessagesController.UPDATE_MASK_CHAT_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_CHAT_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_CHAT_MEMBERS) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
+                updateOnlineCount();
+            }
+            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
+                updateVisibleRows(mask);
+            }
+        } else if (id == NotificationCenter.chatInfoDidLoaded) {
+            int chatId = (Integer)args[0];
+            if (chatId == chat_id) {
+                info = (TLRPC.ChatParticipants)args[1];
+                updateOnlineCount();
+                updateRowsIds();
+                if (listViewAdapter != null) {
+                    listViewAdapter.notifyDataSetChanged();
+                }
+            }
+        } else if (id == NotificationCenter.mediaCountDidLoaded) {
+            long uid = (Long)args[0];
+            int lower_part = (int)uid;
+            if (lower_part < 0 && chat_id == -lower_part) {
+                totalMediaCount = (Integer)args[1];
+                if (listView != null) {
+                    listView.invalidateViews();
+                }
+            }
+        } else if (id == NotificationCenter.closeChats) {
+            removeSelfFromStack();
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listViewAdapter != null) {
+            listViewAdapter.notifyDataSetChanged();
+        }
+    }
+
+    public void setChatInfo(TLRPC.ChatParticipants chatParticipants) {
+        info = chatParticipants;
+    }
+
+    private void updateVisibleRows(int mask) {
+        if (listView == null) {
+            return;
+        }
+        int count = listView.getChildCount();
+        for (int a = 0; a < count; a++) {
+            View child = listView.getChildAt(a);
+            if (child instanceof ChatOrUserCell) {
+                ((ChatOrUserCell) child).update(mask);
+            }
+        }
+    }
+
+    private void updateOnlineCount() {
+        if (info == null) {
+            return;
+        }
+        onlineCount = 0;
+        int currentTime = ConnectionsManager.getInstance().getCurrentTime();
+        sortedUsers.clear();
+        int i = 0;
+        for (TLRPC.TL_chatParticipant participant : info.participants) {
+            TLRPC.User user = MessagesController.getInstance().getUser(participant.user_id);
+            if (user != null && user.status != null && (user.status.expires > currentTime || user.id == UserConfig.getClientUserId()) && user.status.expires > 10000) {
+                onlineCount++;
+            }
+            sortedUsers.add(i);
+            i++;
+        }
+
+        Collections.sort(sortedUsers, new Comparator<Integer>() {
+            @Override
+            public int compare(Integer lhs, Integer rhs) {
+                TLRPC.User user1 = MessagesController.getInstance().getUser(info.participants.get(rhs).user_id);
+                TLRPC.User user2 = MessagesController.getInstance().getUser(info.participants.get(lhs).user_id);
+                Integer status1 = 0;
+                Integer status2 = 0;
+                if (user1 != null && user1.status != null) {
+                    if (user1.id == UserConfig.getClientUserId()) {
+                        status1 = ConnectionsManager.getInstance().getCurrentTime() + 50000;
+                    } else {
+                        status1 = user1.status.expires;
+                    }
+                }
+                if (user2 != null && user2.status != null) {
+                    if (user2.id == UserConfig.getClientUserId()) {
+                        status2 = ConnectionsManager.getInstance().getCurrentTime() + 50000;
+                    } else {
+                        status2 = user2.status.expires;
+                    }
+                }
+                return status1.compareTo(status2);
+            }
+        });
+
+        if (listView != null) {
+            listView.invalidateViews();
+        }
+    }
+
+    private void processPhotoMenu(int action) {
+        if (action == 0) {
+            TLRPC.Chat chat = MessagesController.getInstance().getChat(chat_id);
+            if (chat.photo != null && chat.photo.photo_big != null) {
+                PhotoViewer.getInstance().setParentActivity(getParentActivity());
+                PhotoViewer.getInstance().openPhoto(chat.photo.photo_big, this);
+            }
+        } else if (action == 1) {
+            avatarUpdater.openCamera();
+        } else if (action == 2) {
+            avatarUpdater.openGallery();
+        } else if (action == 3) {
+            MessagesController.getInstance().changeChatAvatar(chat_id, null);
+        }
+    }
+
+    private void openAddMenu() {
+        Bundle args = new Bundle();
+        args.putBoolean("onlyUsers", true);
+        args.putBoolean("destroyAfterSelect", true);
+        args.putBoolean("usersAsSections", true);
+        args.putBoolean("returnAsResult", true);
+        //args.putBoolean("allowUsernameSearch", false);
+        if (chat_id > 0) {
+            args.putString("selectAlertString", LocaleController.getString("AddToTheGroup", R.string.AddToTheGroup));
+        }
+        ContactsActivity fragment = new ContactsActivity(args);
+        fragment.setDelegate(this);
+        if (info != null) {
+            HashMap<Integer, TLRPC.User> users = new HashMap<Integer, TLRPC.User>();
+            for (TLRPC.TL_chatParticipant p : info.participants) {
+                users.put(p.user_id, null);
+            }
+            fragment.setIgnoreUsers(users);
+        }
+        presentFragment(fragment);
+    }
+
+    private void kickUser(TLRPC.TL_chatParticipant user) {
+        if (user != null) {
+            MessagesController.getInstance().deleteUserFromChat(chat_id, MessagesController.getInstance().getUser(user.user_id), info);
+        } else {
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+            MessagesController.getInstance().deleteUserFromChat(chat_id, MessagesController.getInstance().getUser(UserConfig.getClientUserId()), info);
+            MessagesController.getInstance().deleteDialog(-chat_id, 0, false);
+            finishFragment();
+        }
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return i == settingsNotificationsRow || i == sharedMediaRow || i == addMemberRow || i > membersSectionRow && i < membersEndRow;
+        }
+
+        @Override
+        public int getCount() {
+            return rowCount;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            if (type == 0) {
+                BackupImageView avatarImage;
+                TextView onlineText;
+                TLRPC.Chat chat = MessagesController.getInstance().getChat(chat_id);
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.chat_profile_avatar_layout, viewGroup, false);
+                    onlineText = (TextView)view.findViewById(R.id.settings_online);
+
+                    ImageButton button = (ImageButton)view.findViewById(R.id.settings_edit_name);
+                    button.setOnClickListener(new View.OnClickListener() {
+                        @Override
+                        public void onClick(View view) {
+                            Bundle args = new Bundle();
+                            args.putInt("chat_id", chat_id);
+                            presentFragment(new ChatProfileChangeNameActivity(args));
+                        }
+                    });
+
+                    final ImageButton button2 = (ImageButton)view.findViewById(R.id.settings_change_avatar_button);
+                    if (chat_id > 0) {
+                        button2.setOnClickListener(new View.OnClickListener() {
+                            @Override
+                            public void onClick(View view) {
+                                if (getParentActivity() == null) {
+                                    return;
+                                }
+                                AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                                CharSequence[] items;
+                                int type;
+                                TLRPC.Chat chat = MessagesController.getInstance().getChat(chat_id);
+                                if (chat.photo == null || chat.photo.photo_big == null || chat.photo instanceof TLRPC.TL_chatPhotoEmpty) {
+                                    items = new CharSequence[]{LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley)};
+                                    type = 0;
+                                } else {
+                                    items = new CharSequence[]{LocaleController.getString("OpenPhoto", R.string.OpenPhoto), LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley), LocaleController.getString("DeletePhoto", R.string.DeletePhoto)};
+                                    type = 1;
+                                }
+
+                                final int arg0 = type;
+                                builder.setItems(items, new DialogInterface.OnClickListener() {
+                                    @Override
+                                    public void onClick(DialogInterface dialogInterface, int i) {
+                                        int action = 0;
+                                        if (arg0 == 1) {
+                                            if (i == 0) {
+                                                action = 0;
+                                            } else if (i == 1) {
+                                                action = 1;
+                                            } else if (i == 2) {
+                                                action = 2;
+                                            } else if (i == 3) {
+                                                action = 3;
+                                            }
+                                        } else if (arg0 == 0) {
+                                            if (i == 0) {
+                                                action = 1;
+                                            } else if (i == 1) {
+                                                action = 2;
+                                            }
+                                        }
+                                        processPhotoMenu(action);
+                                    }
+                                });
+                                showAlertDialog(builder);
+                            }
+                        });
+                    } else {
+                        button2.setVisibility(View.GONE);
+                    }
+                } else {
+                    onlineText = (TextView)view.findViewById(R.id.settings_online);
+                }
+                avatarImage = (BackupImageView)view.findViewById(R.id.settings_avatar_image);
+                avatarImage.processDetach = false;
+                TextView textView = (TextView)view.findViewById(R.id.settings_name);
+                Typeface typeface = AndroidUtilities.getTypeface("fonts/rmedium.ttf");
+                textView.setTypeface(typeface);
+
+                textView.setText(chat.title);
+
+                int count = chat.participants_count;
+                if (info != null) {
+                    count = info.participants.size();
+                }
+
+                if (count != 0 && onlineCount > 1) {
+                    onlineText.setText(Html.fromHtml(String.format("%s, <font color='#357aa8'>%s</font>", LocaleController.formatPluralString("Members", count), LocaleController.formatPluralString("Online", onlineCount))));
+                } else {
+                    onlineText.setText(LocaleController.formatPluralString("Members", count));
+                }
+
+                TLRPC.FileLocation photo = null;
+                TLRPC.FileLocation photoBig = null;
+                if (chat.photo != null) {
+                    photo = chat.photo.photo_small;
+                    photoBig = chat.photo.photo_big;
+                }
+                avatarImage.setImage(photo, "50_50", chat_id > 0 ? AndroidUtilities.getGroupAvatarForId(chat.id) : AndroidUtilities.getBroadcastAvatarForId(chat.id));
+                avatarImage.imageReceiver.setVisible(!PhotoViewer.getInstance().isShowingImage(photoBig), false);
+                return view;
+            } else if (type == 1) {
+                if (view == null) {
+                    view = new SettingsSectionLayout(mContext);
+                }
+                if (i == settingsSectionRow) {
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("SETTINGS", R.string.SETTINGS));
+                } else if (i == sharedMediaSectionRow) {
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("SHAREDMEDIA", R.string.SHAREDMEDIA));
+                } else if (i == membersSectionRow) {
+                    TLRPC.Chat chat = MessagesController.getInstance().getChat(chat_id);
+                    int count = chat.participants_count;
+                    if (info != null) {
+                        count = info.participants.size();
+                    }
+                    ((SettingsSectionLayout) view).setText(LocaleController.formatPluralString("Members", count).toUpperCase());
+                }
+            } else if (type == 2) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.user_profile_leftright_row_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
+                View divider = view.findViewById(R.id.settings_row_divider);
+                if (i == sharedMediaRow) {
+                    textView.setText(LocaleController.getString("SharedMedia", R.string.SharedMedia));
+                    if (totalMediaCount == -1) {
+                        detailTextView.setText(LocaleController.getString("Loading", R.string.Loading));
+                    } else {
+                        detailTextView.setText(String.format("%d", totalMediaCount));
+                    }
+                    divider.setVisibility(View.INVISIBLE);
+                }
+            } else if (type == 3) {
+                TLRPC.TL_chatParticipant part = info.participants.get(sortedUsers.get(i - membersSectionRow - 1));
+                TLRPC.User user = MessagesController.getInstance().getUser(part.user_id);
+
+                if (view == null) {
+                    view = new ChatOrUserCell(mContext);
+                    ((ChatOrUserCell)view).usePadding = false;
+                    ((ChatOrUserCell)view).useSeparator = true;
+                }
+
+                ((ChatOrUserCell)view).setData(user, null, null, null, null);
+            } else if (type == 4) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.chat_profile_add_row, viewGroup, false);
+                    TextView textView = (TextView)view.findViewById(R.id.messages_list_row_name);
+                    if (chat_id > 0) {
+                        textView.setText(LocaleController.getString("AddMember", R.string.AddMember));
+                    } else {
+                        textView.setText(LocaleController.getString("AddRecipient", R.string.AddRecipient));
+                        View divider = view.findViewById(R.id.settings_row_divider);
+                        divider.setVisibility(View.INVISIBLE);
+                    }
+                }
+            } else if (type == 5) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_logout_button, viewGroup, false);
+                    TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                    textView.setText(LocaleController.getString("DeleteAndExit", R.string.DeleteAndExit));
+                    textView.setOnClickListener(new View.OnClickListener() {
+                        @Override
+                        public void onClick(View view) {
+                            if (getParentActivity() == null) {
+                                return;
+                            }
+                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                            builder.setMessage(LocaleController.getString("AreYouSureDeleteAndExit", R.string.AreYouSureDeleteAndExit));
+                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                                @Override
+                                public void onClick(DialogInterface dialogInterface, int i) {
+                                    kickUser(null);
+                                }
+                            });
+                            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                            showAlertDialog(builder);
+                        }
+                    });
+                }
+            } else if (type == 6) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_row_button_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                View divider = view.findViewById(R.id.settings_row_divider);
+                if (i == settingsNotificationsRow) {
+                    textView.setText(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds));
+                    divider.setVisibility(View.INVISIBLE);
+                }
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            if (i == avatarRow) {
+                return 0;
+            } else if (i == settingsSectionRow || i == sharedMediaSectionRow || i == membersSectionRow) {
+                return 1;
+            } else if (i == sharedMediaRow) {
+                return 2;
+            } else if (i == addMemberRow) {
+                return 4;
+            } else if (i == leaveGroupRow) {
+                return 5;
+            } else if (i > membersSectionRow && i < membersEndRow) {
+                return 3;
+            } else if (i == settingsNotificationsRow) {
+                return 6;
+            }
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 7;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/ChatProfileChangeNameActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/ChatProfileChangeNameActivity.java
new file mode 100644
index 000000000..46e52c800
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/ChatProfileChangeNameActivity.java
@@ -0,0 +1,158 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.app.Activity;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.text.InputType;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.KeyEvent;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.inputmethod.EditorInfo;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MessagesController;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+import org.tomato.ui.Views.SettingsSectionLayout;
+
+public class ChatProfileChangeNameActivity extends BaseFragment {
+    private EditText firstNameField;
+    private View headerLabelView;
+    private int chat_id;
+    private View doneButton;
+
+    public ChatProfileChangeNameActivity(Bundle args) {
+        super(args);
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+        chat_id = getArguments().getInt("chat_id", 0);
+        return true;
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setCustomView(R.layout.settings_do_action_layout);
+
+            Button cancelButton = (Button)actionBarLayer.findViewById(R.id.cancel_button);
+            cancelButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    finishFragment();
+                }
+            });
+            doneButton = actionBarLayer.findViewById(R.id.done_button);
+            doneButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    if (firstNameField.getText().length() != 0) {
+                        saveName();
+                        finishFragment();
+                    }
+                }
+            });
+
+            cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
+            TextView textView = (TextView)doneButton.findViewById(R.id.done_button_text);
+            textView.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
+
+            TLRPC.Chat currentChat = MessagesController.getInstance().getChat(chat_id);
+
+            fragmentView = new LinearLayout(inflater.getContext());
+            fragmentView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
+            fragmentView.setPadding(AndroidUtilities.dp(16), AndroidUtilities.dp(8), AndroidUtilities.dp(16), 0);
+            ((LinearLayout) fragmentView).setOrientation(LinearLayout.VERTICAL);
+
+            SettingsSectionLayout settingsSectionLayout = new SettingsSectionLayout(inflater.getContext());
+            ((LinearLayout) fragmentView).addView(settingsSectionLayout);
+
+            firstNameField = new EditText(inflater.getContext());
+            firstNameField.setText(currentChat.title);
+            firstNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 19);
+            firstNameField.setHintTextColor(0xffa3a3a3);
+            firstNameField.setTextColor(0xff000000);
+            firstNameField.setPadding(AndroidUtilities.dp(15), 0, AndroidUtilities.dp(15), AndroidUtilities.dp(15));
+            firstNameField.setMaxLines(3);
+            firstNameField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+            firstNameField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
+            firstNameField.setImeOptions(EditorInfo.IME_ACTION_DONE);
+            AndroidUtilities.clearCursorDrawable(firstNameField);
+            firstNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
+                @Override
+                public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
+                    if (i == EditorInfo.IME_ACTION_DONE && doneButton != null) {
+                        doneButton.performClick();
+                        return true;
+                    }
+                    return false;
+                }
+            });
+            if (LocaleController.isRTL) {
+                firstNameField.setGravity(Gravity.RIGHT);
+            }
+
+            ((LinearLayout) fragmentView).addView(firstNameField);
+            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)firstNameField.getLayoutParams();
+            layoutParams.topMargin = AndroidUtilities.dp(15);
+            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = LinearLayout.LayoutParams.WRAP_CONTENT;
+            firstNameField.setLayoutParams(layoutParams);
+
+            if (chat_id > 0) {
+                settingsSectionLayout.setText(LocaleController.getString("EnterGroupNameTitle", R.string.EnterGroupNameTitle));
+                firstNameField.setHint(LocaleController.getString("GroupName", R.string.GroupName));
+            } else {
+                settingsSectionLayout.setText(LocaleController.getString("EnterListName", R.string.EnterListName).toUpperCase());
+                firstNameField.setHint(LocaleController.getString("EnterListName", R.string.EnterListName));
+            }
+            firstNameField.setSelection(firstNameField.length());
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        boolean animations = preferences.getBoolean("view_animations", true);
+        if (!animations) {
+            firstNameField.requestFocus();
+            AndroidUtilities.showKeyboard(firstNameField);
+        }
+    }
+
+    @Override
+    public void onOpenAnimationEnd() {
+        firstNameField.requestFocus();
+        AndroidUtilities.showKeyboard(firstNameField);
+    }
+
+    private void saveName() {
+        MessagesController.getInstance().changeChatTitle(chat_id, firstNameField.getText().toString());
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/ContactAddActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/ContactAddActivity.java
new file mode 100644
index 000000000..c66f80e6e
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/ContactAddActivity.java
@@ -0,0 +1,195 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.app.Activity;
+import android.content.SharedPreferences;
+import android.graphics.Typeface;
+import android.os.Bundle;
+import android.view.KeyEvent;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.inputmethod.EditorInfo;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.TextView;
+
+import org.tomato.PhoneFormat.PhoneFormat;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.ContactsController;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MessagesController;
+import org.tomato.android.NotificationCenter;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+import org.tomato.ui.Views.BackupImageView;
+
+public class ContactAddActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+    private int user_id;
+    private String phone = null;
+    private View doneButton;
+    private EditText firstNameField;
+    private EditText lastNameField;
+    private BackupImageView avatarImage;
+    private TextView onlineText;
+    private TextView phoneText;
+
+    public ContactAddActivity(Bundle args) {
+        super(args);
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
+        user_id = getArguments().getInt("user_id", 0);
+        phone = getArguments().getString("phone");
+        TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+        return user != null && super.onFragmentCreate();
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setCustomView(R.layout.settings_do_action_layout);
+            Button cancelButton = (Button)actionBarLayer.findViewById(R.id.cancel_button);
+            cancelButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    finishFragment();
+                }
+            });
+            doneButton = actionBarLayer.findViewById(R.id.done_button);
+            doneButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    if (firstNameField.getText().length() != 0) {
+                        TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+                        user.first_name = firstNameField.getText().toString();
+                        user.last_name = lastNameField.getText().toString();
+                        ContactsController.getInstance().addContact(user);
+                        finishFragment();
+                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, MessagesController.UPDATE_MASK_NAME);
+                    }
+                }
+            });
+
+            cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
+            TextView textView = (TextView)doneButton.findViewById(R.id.done_button_text);
+            textView.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
+
+            fragmentView = inflater.inflate(R.layout.contact_add_layout, container, false);
+
+            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+            if (user.phone == null) {
+                if (phone != null) {
+                    user.phone = PhoneFormat.stripExceptNumbers(phone);
+                }
+            }
+
+            onlineText = (TextView)fragmentView.findViewById(R.id.settings_online);
+            avatarImage = (BackupImageView)fragmentView.findViewById(R.id.settings_avatar_image);
+            avatarImage.processDetach = false;
+            phoneText = (TextView)fragmentView.findViewById(R.id.settings_name);
+            Typeface typeface = AndroidUtilities.getTypeface("fonts/rmedium.ttf");
+            phoneText.setTypeface(typeface);
+
+            firstNameField = (EditText)fragmentView.findViewById(R.id.first_name_field);
+            firstNameField.setHint(LocaleController.getString("FirstName", R.string.FirstName));
+            firstNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
+                @Override
+                public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
+                    if (i == EditorInfo.IME_ACTION_NEXT) {
+                        lastNameField.requestFocus();
+                        lastNameField.setSelection(lastNameField.length());
+                        return true;
+                    }
+                    return false;
+                }
+            });
+            lastNameField = (EditText)fragmentView.findViewById(R.id.last_name_field);
+            lastNameField.setHint(LocaleController.getString("LastName", R.string.LastName));
+            lastNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
+                @Override
+                public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
+                    if (i == EditorInfo.IME_ACTION_DONE) {
+                        doneButton.performClick();
+                        return true;
+                    }
+                    return false;
+                }
+            });
+
+            if (user != null) {
+                firstNameField.setText(user.first_name);
+                firstNameField.setSelection(firstNameField.length());
+                lastNameField.setText(user.last_name);
+            }
+
+            updateAvatarLayout();
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    private void updateAvatarLayout() {
+        if (phoneText == null) {
+            return;
+        }
+        TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+        if (user == null) {
+            return;
+        }
+        phoneText.setText(PhoneFormat.getInstance().format("+" + user.phone));
+        onlineText.setText(LocaleController.formatUserStatus(user));
+
+        TLRPC.FileLocation photo = null;
+        if (user.photo != null) {
+            photo = user.photo.photo_small;
+        }
+        avatarImage.setImage(photo, "50_50", AndroidUtilities.getUserAvatarForId(user.id));
+    }
+
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.updateInterfaces) {
+            int mask = (Integer)args[0];
+            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
+                updateAvatarLayout();
+            }
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        boolean animations = preferences.getBoolean("view_animations", true);
+        if (!animations) {
+            firstNameField.requestFocus();
+            AndroidUtilities.showKeyboard(firstNameField);
+        }
+    }
+
+    @Override
+    public void onOpenAnimationEnd() {
+        firstNameField.requestFocus();
+        AndroidUtilities.showKeyboard(firstNameField);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/ContactsActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/ContactsActivity.java
new file mode 100644
index 000000000..1ed040fe5
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/ContactsActivity.java
@@ -0,0 +1,484 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.net.Uri;
+import android.os.Bundle;
+import android.text.InputType;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.inputmethod.EditorInfo;
+import android.widget.AbsListView;
+import android.widget.AdapterView;
+import android.widget.EditText;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.ContactsController;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MessagesController;
+import org.tomato.android.MessagesStorage;
+import org.tomato.android.NotificationCenter;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.RPCRequest;
+import org.tomato.messenger.TLObject;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
+import org.tomato.ui.Adapters.ContactsActivityAdapter;
+import org.tomato.ui.Adapters.ContactsActivitySearchAdapter;
+import org.tomato.ui.Cells.ChatOrUserCell;
+import org.tomato.ui.Views.ActionBar.ActionBarLayer;
+import org.tomato.ui.Views.ActionBar.ActionBarMenu;
+import org.tomato.ui.Views.ActionBar.ActionBarMenuItem;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+import org.tomato.ui.Views.PinnedHeaderListView;
+import org.tomato.ui.Views.SectionedBaseAdapter;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Locale;
+
+public class ContactsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+    private SectionedBaseAdapter listViewAdapter;
+    private PinnedHeaderListView listView;
+    private ContactsActivitySearchAdapter searchListViewAdapter;
+    private boolean searchWas;
+    private boolean searching;
+    private boolean onlyUsers;
+    private boolean usersAsSections;
+    private boolean destroyAfterSelect;
+    private boolean returnAsResult;
+    private boolean createSecretChat;
+    private boolean creatingChat = false;
+    private String selectAlertString = null;
+    private TextView emptyTextView;
+    private HashMap<Integer, TLRPC.User> ignoreUsers;
+
+    private String inviteText;
+    private boolean updatingInviteText = false;
+    private boolean allowUsernameSearch = true;
+    private ContactsActivityDelegate delegate;
+
+    public static interface ContactsActivityDelegate {
+        public abstract void didSelectContact(TLRPC.User user, String param);
+    }
+
+    public ContactsActivity(Bundle args) {
+        super(args);
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.contactsDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatCreated);
+        if (arguments != null) {
+            onlyUsers = getArguments().getBoolean("onlyUsers", false);
+            destroyAfterSelect = arguments.getBoolean("destroyAfterSelect", false);
+            usersAsSections = arguments.getBoolean("usersAsSections", false);
+            returnAsResult = arguments.getBoolean("returnAsResult", false);
+            createSecretChat = arguments.getBoolean("createSecretChat", false);
+            selectAlertString = arguments.getString("selectAlertString");
+            allowUsernameSearch = arguments.getBoolean("allowUsernameSearch", true);
+        }
+
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        inviteText = preferences.getString("invitetext", null);
+        int time = preferences.getInt("invitetexttime", 0);
+        if (inviteText == null || time + 86400 < (int)(System.currentTimeMillis() / 1000)) {
+            updateInviteText();
+        }
+
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.contactsDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatCreated);
+        delegate = null;
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
+            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
+            if (destroyAfterSelect) {
+                actionBarLayer.setTitle(LocaleController.getString("SelectContact", R.string.SelectContact));
+            } else {
+                actionBarLayer.setTitle(LocaleController.getString("Contacts", R.string.Contacts));
+            }
+
+            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    }
+                }
+            });
+
+            ActionBarMenu menu = actionBarLayer.createMenu();
+            menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
+                @Override
+                public void onSearchExpand() {
+                    searching = true;
+                }
+
+                @Override
+                public void onSearchCollapse() {
+                    searchListViewAdapter.searchDialogs(null);
+                    searching = false;
+                    searchWas = false;
+                    ViewGroup group = (ViewGroup) listView.getParent();
+                    listView.setAdapter(listViewAdapter);
+                    listViewAdapter.notifyDataSetChanged();
+                    if (!LocaleController.isRTL) {
+                        listView.setPadding(AndroidUtilities.dp(16), listView.getPaddingTop(), AndroidUtilities.dp(30), listView.getPaddingBottom());
+                    } else {
+                        listView.setPadding(AndroidUtilities.dp(30), listView.getPaddingTop(), AndroidUtilities.dp(16), listView.getPaddingBottom());
+                    }
+                    if (android.os.Build.VERSION.SDK_INT >= 11) {
+                        listView.setFastScrollAlwaysVisible(true);
+                    }
+                    listView.setFastScrollEnabled(true);
+                    listView.setVerticalScrollBarEnabled(false);
+
+                    emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
+                }
+
+                @Override
+                public void onTextChanged(EditText editText) {
+                    if (searchListViewAdapter == null) {
+                        return;
+                    }
+                    String text = editText.getText().toString();
+                    if (text.length() != 0) {
+                        searchWas = true;
+                        if (listView != null) {
+                            listView.setPadding(AndroidUtilities.dp(16), listView.getPaddingTop(), AndroidUtilities.dp(16), listView.getPaddingBottom());
+                            listView.setAdapter(searchListViewAdapter);
+                            searchListViewAdapter.notifyDataSetChanged();
+                            if(android.os.Build.VERSION.SDK_INT >= 11) {
+                                listView.setFastScrollAlwaysVisible(false);
+                            }
+                            listView.setFastScrollEnabled(false);
+                            listView.setVerticalScrollBarEnabled(true);
+                        }
+                        if (emptyTextView != null) {
+                            emptyTextView.setText(LocaleController.getString("NoResult", R.string.NoResult));
+                        }
+                    }
+                    searchListViewAdapter.searchDialogs(text);
+                }
+            });
+
+            searching = false;
+            searchWas = false;
+
+            fragmentView = inflater.inflate(R.layout.contacts_layout, container, false);
+
+            emptyTextView = (TextView)fragmentView.findViewById(R.id.searchEmptyView);
+            emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
+            searchListViewAdapter = new ContactsActivitySearchAdapter(getParentActivity(), ignoreUsers, allowUsernameSearch);
+
+            listView = (PinnedHeaderListView)fragmentView.findViewById(R.id.listView);
+            listView.setEmptyView(emptyTextView);
+            emptyTextView.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
+            listView.setVerticalScrollBarEnabled(false);
+
+            listViewAdapter = new ContactsActivityAdapter(getParentActivity(), onlyUsers, usersAsSections, ignoreUsers);
+            listView.setAdapter(listViewAdapter);
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    if (searching && searchWas) {
+                        TLRPC.User user = searchListViewAdapter.getItem(i);
+                        if (user == null || user.id == UserConfig.getClientUserId()) {
+                            return;
+                        }
+                        if (searchListViewAdapter.isGlobalSearch(i)) {
+                            ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
+                            users.add(user);
+                            MessagesController.getInstance().putUsers(users, false);
+                            MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
+                        }
+                        if (returnAsResult) {
+                            if (ignoreUsers != null && ignoreUsers.containsKey(user.id)) {
+                                return;
+                            }
+                            didSelectResult(user, true, null);
+                        } else {
+                            if (createSecretChat) {
+                                creatingChat = true;
+                                MessagesController.getInstance().startSecretChat(getParentActivity(), user);
+                            } else {
+                                Bundle args = new Bundle();
+                                args.putInt("user_id", user.id);
+                                presentFragment(new ChatActivity(args), true);
+                            }
+                        }
+                    } else {
+                        int section = listViewAdapter.getSectionForPosition(i);
+                        int row = listViewAdapter.getPositionInSectionForPosition(i);
+                        if (row < 0 || section < 0) {
+                            return;
+                        }
+                        TLRPC.User user = null;
+                        if (usersAsSections) {
+                            if (section < ContactsController.getInstance().sortedUsersSectionsArray.size()) {
+                                ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
+                                if (row < arr.size()) {
+                                    TLRPC.TL_contact contact = arr.get(row);
+                                    user = MessagesController.getInstance().getUser(contact.user_id);
+                                } else {
+                                    return;
+                                }
+                            }
+                        } else {
+                            if (section == 0) {
+                                if (row == 0) {
+                                    try {
+                                        Intent intent = new Intent(Intent.ACTION_SEND);
+                                        intent.setType("text/plain");
+                                        intent.putExtra(Intent.EXTRA_TEXT, inviteText != null ? inviteText : LocaleController.getString("InviteText", R.string.InviteText));
+                                        getParentActivity().startActivity(intent);
+                                    } catch (Exception e) {
+                                        FileLog.e("tmessages", e);
+                                    }
+                                    return;
+                                } else {
+                                    if (row - 1 < ContactsController.getInstance().contacts.size()) {
+                                        user = MessagesController.getInstance().getUser(ContactsController.getInstance().contacts.get(row - 1).user_id);
+                                    } else {
+                                        return;
+                                    }
+                                }
+                            }
+                        }
+
+                        if (user != null) {
+                            if (user.id == UserConfig.getClientUserId()) {
+                                return;
+                            }
+                            if (returnAsResult) {
+                                if (ignoreUsers != null && ignoreUsers.containsKey(user.id)) {
+                                    return;
+                                }
+                                didSelectResult(user, true, null);
+                            } else {
+                                if (createSecretChat) {
+                                    creatingChat = true;
+                                    MessagesController.getInstance().startSecretChat(getParentActivity(), user);
+                                } else {
+                                    Bundle args = new Bundle();
+                                    args.putInt("user_id", user.id);
+                                    presentFragment(new ChatActivity(args), true);
+                                }
+                            }
+                        } else {
+                            ArrayList<ContactsController.Contact> arr = ContactsController.getInstance().contactsSectionsDict.get(ContactsController.getInstance().sortedContactsSectionsArray.get(section - 1));
+                            ContactsController.Contact contact = arr.get(row);
+                            String usePhone = null;
+                            if (!contact.phones.isEmpty()) {
+                                usePhone = contact.phones.get(0);
+                            }
+                            if (usePhone == null || getParentActivity() == null) {
+                                return;
+                            }
+                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                            builder.setMessage(LocaleController.getString("InviteUser", R.string.InviteUser));
+                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                            final String arg1 = usePhone;
+                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                                @Override
+                                public void onClick(DialogInterface dialogInterface, int i) {
+                                    try {
+                                        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.fromParts("sms", arg1, null));
+                                        intent.putExtra("sms_body", LocaleController.getString("InviteText", R.string.InviteText));
+                                        getParentActivity().startActivity(intent);
+                                    } catch (Exception e) {
+                                        FileLog.e("tmessages", e);
+                                    }
+                                }
+                            });
+                            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                            showAlertDialog(builder);
+                        }
+                    }
+                }
+            });
+
+            listView.setOnScrollListener(new AbsListView.OnScrollListener() {
+                @Override
+                public void onScrollStateChanged(AbsListView absListView, int i) {
+                    if (i == SCROLL_STATE_TOUCH_SCROLL && searching && searchWas) {
+                        AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
+                    }
+                }
+
+                @Override
+                public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+                }
+            });
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    private void didSelectResult(final TLRPC.User user, boolean useAlert, String param) {
+        if (useAlert && selectAlertString != null) {
+            if (getParentActivity() == null) {
+                return;
+            }
+            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+            builder.setMessage(LocaleController.formatStringSimple(selectAlertString, ContactsController.formatName(user.first_name, user.last_name)));
+            final EditText editText = new EditText(getParentActivity());
+            if (android.os.Build.VERSION.SDK_INT < 11) {
+                editText.setBackgroundResource(android.R.drawable.editbox_background_normal);
+            }
+            editText.setTextSize(18);
+            editText.setText("50");
+            editText.setGravity(Gravity.CENTER);
+            editText.setInputType(InputType.TYPE_CLASS_NUMBER);
+            editText.setImeOptions(EditorInfo.IME_ACTION_DONE);
+            builder.setView(editText);
+            builder.setPositiveButton(R.string.OK, new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialogInterface, int i) {
+                    didSelectResult(user, false, editText.getText().toString());
+                }
+            });
+            builder.setNegativeButton(R.string.Cancel, null);
+            showAlertDialog(builder);
+            ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams)editText.getLayoutParams();
+            if (layoutParams != null) {
+                if (layoutParams instanceof FrameLayout.LayoutParams) {
+                    ((FrameLayout.LayoutParams)layoutParams).gravity = Gravity.CENTER_HORIZONTAL;
+                }
+                layoutParams.rightMargin = layoutParams.leftMargin = AndroidUtilities.dp(10);
+                editText.setLayoutParams(layoutParams);
+            }
+            editText.setSelection(editText.getText().length());
+        } else {
+            if (delegate != null) {
+                delegate.didSelectContact(user, param);
+                delegate = null;
+            }
+            finishFragment();
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listViewAdapter != null) {
+            listViewAdapter.notifyDataSetChanged();
+        }
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.contactsDidLoaded) {
+            if (listViewAdapter != null) {
+                listViewAdapter.notifyDataSetChanged();
+            }
+        } else if (id == NotificationCenter.updateInterfaces) {
+            int mask = (Integer)args[0];
+            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
+                updateVisibleRows(mask);
+            }
+        } else if (id == NotificationCenter.encryptedChatCreated) {
+            if (createSecretChat && creatingChat) {
+                TLRPC.EncryptedChat encryptedChat = (TLRPC.EncryptedChat)args[0];
+                Bundle args2 = new Bundle();
+                args2.putInt("enc_id", encryptedChat.id);
+                presentFragment(new ChatActivity(args2), true);
+            }
+        }
+    }
+
+    private void updateInviteText() {
+        if (!updatingInviteText) {
+            updatingInviteText = true;
+            TLRPC.TL_help_getInviteText req = new TLRPC.TL_help_getInviteText();
+            req.lang_code = LocaleController.getLocaleString(Locale.getDefault());
+            if (req.lang_code == null || req.lang_code.length() == 0) {
+                req.lang_code = "en";
+            }
+            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                @Override
+                public void run(TLObject response, TLRPC.TL_error error) {
+                    if (error == null) {
+                        final TLRPC.TL_help_inviteText res = (TLRPC.TL_help_inviteText)response;
+                        if (res.message.length() != 0) {
+                            AndroidUtilities.RunOnUIThread(new Runnable() {
+                                @Override
+                                public void run() {
+                                    updatingInviteText = false;
+                                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                                    SharedPreferences.Editor editor = preferences.edit();
+                                    editor.putString("invitetext", res.message);
+                                    editor.putInt("invitetexttime", (int) (System.currentTimeMillis() / 1000));
+                                    editor.commit();
+                                }
+                            });
+                        }
+                    }
+                }
+            }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors);
+        }
+    }
+
+    private void updateVisibleRows(int mask) {
+        if (listView != null) {
+            int count = listView.getChildCount();
+            for (int a = 0; a < count; a++) {
+                View child = listView.getChildAt(a);
+                if (child instanceof ChatOrUserCell) {
+                    ((ChatOrUserCell) child).update(mask);
+                }
+            }
+        }
+    }
+
+    public void setDelegate(ContactsActivityDelegate delegate) {
+        this.delegate = delegate;
+    }
+
+    public void setIgnoreUsers(HashMap<Integer, TLRPC.User> users) {
+        ignoreUsers = users;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/CountrySelectActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/CountrySelectActivity.java
new file mode 100644
index 000000000..c7d49e8b8
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/CountrySelectActivity.java
@@ -0,0 +1,495 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AbsListView;
+import android.widget.AdapterView;
+import android.widget.BaseAdapter;
+import android.widget.EditText;
+import android.widget.TextView;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.LocaleController;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.Utilities;
+import org.tomato.ui.Adapters.BaseFragmentAdapter;
+import org.tomato.ui.Views.ActionBar.ActionBarLayer;
+import org.tomato.ui.Views.ActionBar.ActionBarMenu;
+import org.tomato.ui.Views.ActionBar.ActionBarMenuItem;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+import org.tomato.ui.Views.PinnedHeaderListView;
+import org.tomato.ui.Views.SectionedBaseAdapter;
+import org.tomato.ui.Views.SettingsSectionLayout;
+
+import java.io.BufferedReader;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.HashMap;
+import java.util.Timer;
+import java.util.TimerTask;
+
+public class CountrySelectActivity extends BaseFragment {
+
+    public static interface CountrySelectActivityDelegate {
+        public abstract void didSelectCountry(String name);
+    }
+
+    private SectionedBaseAdapter listViewAdapter;
+    private PinnedHeaderListView listView;
+    private boolean searchWas;
+    private boolean searching;
+    private BaseAdapter searchListViewAdapter;
+    private TextView emptyTextView;
+    private HashMap<String, ArrayList<Country>> countries = new HashMap<String, ArrayList<Country>>();
+    private ArrayList<String> sortedCountries = new ArrayList<String>();
+    private CountrySelectActivityDelegate delegate;
+
+    private Timer searchTimer;
+    public ArrayList<Country> searchResult;
+
+    public static class Country {
+        public String name;
+        public String code;
+        public String shortname;
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        try {
+            InputStream stream = ApplicationLoader.applicationContext.getResources().getAssets().open("countries.txt");
+            BufferedReader reader = new BufferedReader(new InputStreamReader(stream));
+            String line;
+            while ((line = reader.readLine()) != null) {
+                String[] args = line.split(";");
+                Country c = new Country();
+                c.name = args[2];
+                c.code = args[0];
+                c.shortname = args[1];
+                String n = c.name.substring(0, 1).toUpperCase();
+                ArrayList<Country> arr = countries.get(n);
+                if (arr == null) {
+                    arr = new ArrayList<Country>();
+                    countries.put(n, arr);
+                    sortedCountries.add(n);
+                }
+                arr.add(c);
+            }
+            reader.close();
+            stream.close();
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+
+        Collections.sort(sortedCountries, new Comparator<String>() {
+            @Override
+            public int compare(String lhs, String rhs) {
+                return lhs.compareTo(rhs);
+            }
+        });
+
+        for (ArrayList<Country> arr : countries.values()) {
+            Collections.sort(arr, new Comparator<Country>() {
+                @Override
+                public int compare(Country country, Country country2) {
+                    return country.name.compareTo(country2.name);
+                }
+            });
+        }
+
+        return super.onFragmentCreate();
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
+            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
+            actionBarLayer.setTitle(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
+
+            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    }
+                }
+            });
+
+            ActionBarMenu menu = actionBarLayer.createMenu();
+            menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
+                @Override
+                public void onSearchExpand() {
+                    searching = true;
+                }
+
+                @Override
+                public void onSearchCollapse() {
+                    search(null);
+                    searching = false;
+                    searchWas = false;
+                    ViewGroup group = (ViewGroup) listView.getParent();
+                    listView.setAdapter(listViewAdapter);
+                    if (!LocaleController.isRTL) {
+                        listView.setPadding(AndroidUtilities.dp(16), listView.getPaddingTop(), AndroidUtilities.dp(30), listView.getPaddingBottom());
+                    } else {
+                        listView.setPadding(AndroidUtilities.dp(30), listView.getPaddingTop(), AndroidUtilities.dp(16), listView.getPaddingBottom());
+                    }
+                    if (android.os.Build.VERSION.SDK_INT >= 11) {
+                        listView.setFastScrollAlwaysVisible(true);
+                    }
+                    listView.setFastScrollEnabled(true);
+                    listView.setVerticalScrollBarEnabled(false);
+
+                    emptyTextView.setText(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
+                }
+
+                @Override
+                public void onTextChanged(EditText editText) {
+                    String text = editText.getText().toString();
+                    search(text);
+                    if (text.length() != 0) {
+                        searchWas = true;
+                        if (listView != null) {
+                            listView.setPadding(AndroidUtilities.dp(16), listView.getPaddingTop(), AndroidUtilities.dp(16), listView.getPaddingBottom());
+                            listView.setAdapter(searchListViewAdapter);
+                            if(android.os.Build.VERSION.SDK_INT >= 11) {
+                                listView.setFastScrollAlwaysVisible(false);
+                            }
+                            listView.setFastScrollEnabled(false);
+                            listView.setVerticalScrollBarEnabled(true);
+                        }
+                        if (emptyTextView != null) {
+                            emptyTextView.setText(LocaleController.getString("NoResult", R.string.NoResult));
+                        }
+                    }
+                }
+            });
+
+            searching = false;
+            searchWas = false;
+
+            fragmentView = inflater.inflate(R.layout.country_select_layout, container, false);
+
+            emptyTextView = (TextView)fragmentView.findViewById(R.id.searchEmptyView);
+            searchListViewAdapter = new SearchAdapter(getParentActivity());
+
+            listView = (PinnedHeaderListView)fragmentView.findViewById(R.id.listView);
+            listView.setEmptyView(emptyTextView);
+            emptyTextView.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
+            listView.setVerticalScrollBarEnabled(false);
+
+            listView.setAdapter(listViewAdapter = new ListAdapter(getParentActivity()));
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    if (searching && searchWas) {
+                        if (i < searchResult.size()) {
+                            Country c = searchResult.get(i);
+                            if (delegate != null) {
+                                delegate.didSelectCountry(c.name);
+                            }
+                            finishFragment();
+                        }
+                    } else {
+                        int section = listViewAdapter.getSectionForPosition(i);
+                        int row = listViewAdapter.getPositionInSectionForPosition(i);
+                        if (section < sortedCountries.size()) {
+                            String n = sortedCountries.get(section);
+                            ArrayList<Country> arr = countries.get(n);
+                            if (row < arr.size()) {
+                                Country c = arr.get(row);
+                                if (delegate != null) {
+                                    delegate.didSelectCountry(c.name);
+                                }
+                                finishFragment();
+                            }
+                        }
+                    }
+                }
+            });
+
+            listView.setOnScrollListener(new AbsListView.OnScrollListener() {
+                @Override
+                public void onScrollStateChanged(AbsListView absListView, int i) {
+                    if (i == SCROLL_STATE_TOUCH_SCROLL && searching && searchWas) {
+                        AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
+                    }
+                }
+
+                @Override
+                public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+                }
+            });
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listViewAdapter != null) {
+            listViewAdapter.notifyDataSetChanged();
+        }
+    }
+
+    public void search(final String query) {
+        if (query == null) {
+            searchResult = null;
+        } else {
+            try {
+                if (searchTimer != null) {
+                    searchTimer.cancel();
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            searchTimer = new Timer();
+            searchTimer.schedule(new TimerTask() {
+                @Override
+                public void run() {
+                    try {
+                        searchTimer.cancel();
+                        searchTimer = null;
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                    processSearch(query);
+                }
+            }, 100, 300);
+        }
+    }
+
+    private void processSearch(final String query) {
+        Utilities.searchQueue.postRunnable(new Runnable() {
+            @Override
+            public void run() {
+
+                String q = query.trim().toLowerCase();
+                if (q.length() == 0) {
+                    updateSearchResults(new ArrayList<Country>());
+                    return;
+                }
+                long time = System.currentTimeMillis();
+                ArrayList<Country> resultArray = new ArrayList<Country>();
+
+                String n = query.substring(0, 1);
+                ArrayList<Country> arr = countries.get(n.toUpperCase());
+                if (arr != null) {
+                    for (Country c : arr) {
+                        if (c.name.toLowerCase().startsWith(query)) {
+                            resultArray.add(c);
+                        }
+                    }
+                }
+
+                updateSearchResults(resultArray);
+            }
+        });
+    }
+
+    public void setCountrySelectActivityDelegate(CountrySelectActivityDelegate delegate) {
+        this.delegate = delegate;
+    }
+
+    private void updateSearchResults(final ArrayList<Country> arrCounties) {
+        AndroidUtilities.RunOnUIThread(new Runnable() {
+            @Override
+            public void run() {
+                searchResult = arrCounties;
+                searchListViewAdapter.notifyDataSetChanged();
+            }
+        });
+    }
+
+    private class SearchAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public SearchAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return true;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return true;
+        }
+
+        @Override
+        public int getCount() {
+            if (searchResult == null) {
+                return 0;
+            }
+            return searchResult.size();
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            if (view == null) {
+                LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                view = li.inflate(R.layout.country_row_layout, viewGroup, false);
+            }
+            TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+            TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
+            View divider = view.findViewById(R.id.settings_row_divider);
+
+            Country c = searchResult.get(i);
+            textView.setText(c.name);
+            detailTextView.setText("+" + c.code);
+            if (i == searchResult.size() - 1) {
+                divider.setVisibility(View.GONE);
+            } else {
+                divider.setVisibility(View.VISIBLE);
+            }
+
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 1;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return searchResult == null || searchResult.size() == 0;
+        }
+    }
+
+    private class ListAdapter extends SectionedBaseAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public Object getItem(int section, int position) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int section, int position) {
+            return 0;
+        }
+
+        @Override
+        public int getSectionCount() {
+            return sortedCountries.size();
+        }
+
+        @Override
+        public int getCountForSection(int section) {
+            String n = sortedCountries.get(section);
+            ArrayList<Country> arr = countries.get(n);
+            return arr.size();
+        }
+
+        @Override
+        public View getItemView(int section, int position, View convertView, ViewGroup parent) {
+            if (convertView == null) {
+                LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                convertView = li.inflate(R.layout.country_row_layout, parent, false);
+            }
+            TextView textView = (TextView)convertView.findViewById(R.id.settings_row_text);
+            TextView detailTextView = (TextView)convertView.findViewById(R.id.settings_row_text_detail);
+            View divider = convertView.findViewById(R.id.settings_row_divider);
+
+            String n = sortedCountries.get(section);
+            ArrayList<Country> arr = countries.get(n);
+            Country c = arr.get(position);
+            textView.setText(c.name);
+            detailTextView.setText("+" + c.code);
+            if (position == arr.size() - 1) {
+                divider.setVisibility(View.GONE);
+            } else {
+                divider.setVisibility(View.VISIBLE);
+            }
+
+            return convertView;
+        }
+
+        @Override
+        public int getItemViewType(int section, int position) {
+            return 0;
+        }
+
+        @Override
+        public int getItemViewTypeCount() {
+            return 1;
+        }
+
+        @Override
+        public int getSectionHeaderViewType(int section) {
+            return 0;
+        }
+
+        @Override
+        public int getSectionHeaderViewTypeCount() {
+            return 1;
+        }
+
+        @Override
+        public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
+            if (convertView == null) {
+                convertView = new SettingsSectionLayout(mContext);
+                convertView.setBackgroundColor(0xfffafafa);
+            }
+            ((SettingsSectionLayout) convertView).setText(sortedCountries.get(section).toUpperCase());
+            return convertView;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/DocumentSelectActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/DocumentSelectActivity.java
new file mode 100644
index 000000000..a628fd86b
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/DocumentSelectActivity.java
@@ -0,0 +1,499 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.app.AlertDialog;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.Build;
+import android.os.Environment;
+import android.os.StatFs;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import org.tomato.android.LocaleController;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.Utilities;
+import org.tomato.ui.Adapters.BaseFragmentAdapter;
+import org.tomato.ui.Views.ActionBar.ActionBarLayer;
+import org.tomato.ui.Views.ActionBar.ActionBarMenu;
+import org.tomato.ui.Views.ActionBar.ActionBarMenuItem;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+import org.tomato.ui.Views.BackupImageView;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileReader;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Comparator;
+import java.util.HashMap;
+
+public class DocumentSelectActivity extends BaseFragment {
+
+    public static abstract interface DocumentSelectActivityDelegate {
+        public void didSelectFile(DocumentSelectActivity activity, String path);
+        public void startDocumentSelectActivity();
+    }
+
+    private ListView listView;
+    private ListAdapter listAdapter;
+    private File currentDir;
+    private TextView emptyView;
+    private ArrayList<ListItem> items = new ArrayList<ListItem>();
+    private boolean receiverRegistered = false;
+    private ArrayList<HistoryEntry> history = new ArrayList<HistoryEntry>();
+    private long sizeLimit = 1024 * 1024 * 1024;
+    private DocumentSelectActivityDelegate delegate;
+
+    private class ListItem {
+        int icon;
+        String title;
+        String subtitle = "";
+        String ext = "";
+        String thumb;
+        File file;
+    }
+
+    private class HistoryEntry {
+        int scrollItem, scrollOffset;
+        File dir;
+        String title;
+    }
+
+    private BroadcastReceiver receiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context arg0, Intent intent) {
+            Runnable r = new Runnable() {
+                public void run() {
+                    try {
+                        if (currentDir == null) {
+                            listRoots();
+                        } else {
+                            listFiles(currentDir);
+                        }
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                }
+            };
+            if (Intent.ACTION_MEDIA_UNMOUNTED.equals(intent.getAction())) {
+                listView.postDelayed(r, 1000);
+            } else {
+                r.run();
+            }
+        }
+    };
+
+    @Override
+    public void onFragmentDestroy() {
+        try {
+            if (receiverRegistered) {
+                getParentActivity().unregisterReceiver(receiver);
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        super.onFragmentDestroy();
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (!receiverRegistered) {
+            receiverRegistered = true;
+            IntentFilter filter = new IntentFilter();
+            filter.addAction(Intent.ACTION_MEDIA_BAD_REMOVAL);
+            filter.addAction(Intent.ACTION_MEDIA_CHECKING);
+            filter.addAction(Intent.ACTION_MEDIA_EJECT);
+            filter.addAction(Intent.ACTION_MEDIA_MOUNTED);
+            filter.addAction(Intent.ACTION_MEDIA_NOFS);
+            filter.addAction(Intent.ACTION_MEDIA_REMOVED);
+            filter.addAction(Intent.ACTION_MEDIA_SHARED);
+            filter.addAction(Intent.ACTION_MEDIA_UNMOUNTABLE);
+            filter.addAction(Intent.ACTION_MEDIA_UNMOUNTED);
+            filter.addDataScheme("file");
+            getParentActivity().registerReceiver(receiver, filter);
+        }
+
+        if (fragmentView == null) {
+            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
+            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
+            actionBarLayer.setTitle(LocaleController.getString("SelectFile", R.string.SelectFile));
+            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    } else if (id == 1) {
+                        if (delegate != null) {
+                            delegate.startDocumentSelectActivity();
+                        }
+                        finishFragment(false);
+                    }
+                }
+            });
+            ActionBarMenu menu = actionBarLayer.createMenu();
+            ActionBarMenuItem item = menu.addItem(1, R.drawable.ic_ab_other);
+
+            fragmentView = inflater.inflate(R.layout.document_select_layout, container, false);
+            listAdapter = new ListAdapter(getParentActivity());
+            emptyView = (TextView)fragmentView.findViewById(R.id.searchEmptyView);
+            emptyView.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
+            listView = (ListView)fragmentView.findViewById(R.id.listView);
+            listView.setEmptyView(emptyView);
+            listView.setAdapter(listAdapter);
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    ListItem item = items.get(i);
+                    File file = item.file;
+                    if (file == null) {
+                        HistoryEntry he = history.remove(history.size() - 1);
+                        actionBarLayer.setTitle(he.title);
+                        if (he.dir != null) {
+                            listFiles(he.dir);
+                        } else {
+                            listRoots();
+                        }
+                        listView.setSelectionFromTop(he.scrollItem, he.scrollOffset);
+                    } else if (file.isDirectory()) {
+                        HistoryEntry he = new HistoryEntry();
+                        he.scrollItem = listView.getFirstVisiblePosition();
+                        he.scrollOffset = listView.getChildAt(0).getTop();
+                        he.dir = currentDir;
+                        he.title = actionBarLayer.getTitle().toString();
+                        if (!listFiles(file)) {
+                            return;
+                        }
+                        history.add(he);
+                        actionBarLayer.setTitle(item.title);
+                        listView.setSelection(0);
+                    } else {
+                        if (!file.canRead()) {
+                            showErrorBox(LocaleController.getString("AccessError", R.string.AccessError));
+                            return;
+                        }
+                        if (sizeLimit != 0) {
+                            if (file.length() > sizeLimit) {
+                                showErrorBox(LocaleController.formatString("FileUploadLimit", R.string.FileUploadLimit, Utilities.formatFileSize(sizeLimit)));
+                                return;
+                            }
+                        }
+                        if (file.length() == 0) {
+                            return;
+                        }
+                        if (delegate != null) {
+                            delegate.didSelectFile(DocumentSelectActivity.this, file.getAbsolutePath());
+                        }
+                    }
+                }
+            });
+
+            listRoots();
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+    }
+
+    @Override
+    public boolean onBackPressed() {
+        if (history.size() > 0) {
+            HistoryEntry he = history.remove(history.size() - 1);
+            actionBarLayer.setTitle(he.title);
+            if (he.dir != null) {
+                listFiles(he.dir);
+            } else {
+                listRoots();
+            }
+            listView.setSelectionFromTop(he.scrollItem, he.scrollOffset);
+            return false;
+        }
+        return super.onBackPressed();
+    }
+
+    public void setDelegate(DocumentSelectActivityDelegate delegate) {
+        this.delegate = delegate;
+    }
+
+    private boolean listFiles(File dir) {
+        if (!dir.canRead()) {
+            if (dir.getAbsolutePath().startsWith(Environment.getExternalStorageDirectory().toString())
+                    || dir.getAbsolutePath().startsWith("/sdcard")
+                    || dir.getAbsolutePath().startsWith("/mnt/sdcard")) {
+                if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)
+                        && !Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED_READ_ONLY)) {
+                    currentDir = dir;
+                    items.clear();
+                    String state = Environment.getExternalStorageState();
+                    if (Environment.MEDIA_SHARED.equals(state)) {
+                        emptyView.setText(LocaleController.getString("UsbActive", R.string.UsbActive));
+                    } else {
+                        emptyView.setText(LocaleController.getString("NotMounted", R.string.NotMounted));
+                    }
+                    listAdapter.notifyDataSetChanged();
+                    return true;
+                }
+            }
+            showErrorBox(LocaleController.getString("AccessError", R.string.AccessError));
+            return false;
+        }
+        emptyView.setText(LocaleController.getString("NoFiles", R.string.NoFiles));
+        File[] files = null;
+        try {
+            files = dir.listFiles();
+        } catch(Exception e) {
+            showErrorBox(e.getLocalizedMessage());
+            return false;
+        }
+        if (files == null) {
+            showErrorBox(LocaleController.getString("UnknownError", R.string.UnknownError));
+            return false;
+        }
+        currentDir = dir;
+        items.clear();
+        Arrays.sort(files, new Comparator<File>() {
+            @Override
+            public int compare(File lhs, File rhs) {
+                if (lhs.isDirectory() != rhs.isDirectory()) {
+                    return lhs.isDirectory() ? -1 : 1;
+                }
+                return lhs.getName().compareToIgnoreCase(rhs.getName());
+                /*long lm = lhs.lastModified();
+                long rm = lhs.lastModified();
+                if (lm == rm) {
+                    return 0;
+                } else if (lm > rm) {
+                    return -1;
+                } else {
+                    return 1;
+                }*/
+            }
+        });
+        for (File file : files) {
+            if (file.getName().startsWith(".")) {
+                continue;
+            }
+            ListItem item = new ListItem();
+            item.title = file.getName();
+            item.file = file;
+            if (file.isDirectory()) {
+                item.icon = R.drawable.ic_directory;
+            } else {
+                String fname = file.getName();
+                String[] sp = fname.split("\\.");
+                item.ext = sp.length > 1 ? sp[sp.length - 1] : "?";
+                item.subtitle = Utilities.formatFileSize(file.length());
+                fname = fname.toLowerCase();
+                if (fname.endsWith(".jpg") || fname.endsWith(".png") || fname.endsWith(".gif") || fname.endsWith(".jpeg")) {
+                    item.thumb = file.getAbsolutePath();
+                }
+            }
+            items.add(item);
+        }
+        ListItem item = new ListItem();
+        item.title = "..";
+        item.subtitle = "";
+        item.icon = R.drawable.ic_directory;
+        item.file = null;
+        items.add(0, item);
+        listAdapter.notifyDataSetChanged();
+        return true;
+    }
+
+    private void showErrorBox(String error) {
+        if (getParentActivity() == null) {
+            return;
+        }
+        new AlertDialog.Builder(getParentActivity())
+                .setTitle(LocaleController.getString("AppName", R.string.AppName))
+                .setMessage(error)
+                .setPositiveButton(R.string.OK, null)
+                .show();
+    }
+
+    private void listRoots() {
+        currentDir = null;
+        items.clear();
+        String extStorage = Environment.getExternalStorageDirectory().getAbsolutePath();
+        ListItem ext = new ListItem();
+        if (Build.VERSION.SDK_INT < 9 || Environment.isExternalStorageRemovable()) {
+            ext.title = LocaleController.getString("SdCard", R.string.SdCard);
+        } else {
+            ext.title = LocaleController.getString("InternalStorage", R.string.InternalStorage);
+        }
+        ext.icon = Build.VERSION.SDK_INT < 9 || Environment.isExternalStorageRemovable() ? R.drawable.ic_external_storage : R.drawable.ic_storage;
+        ext.subtitle = getRootSubtitle(extStorage);
+        ext.file = Environment.getExternalStorageDirectory();
+        items.add(ext);
+        try {
+            BufferedReader reader = new BufferedReader(new FileReader("/proc/mounts"));
+            String line;
+            HashMap<String, ArrayList<String>> aliases = new HashMap<String, ArrayList<String>>();
+            ArrayList<String> result = new ArrayList<String>();
+            String extDevice = null;
+            while ((line = reader.readLine()) != null) {
+                if ((!line.contains("/mnt") && !line.contains("/storage") && !line.contains("/sdcard")) || line.contains("asec") || line.contains("tmpfs") || line.contains("none")) {
+                    continue;
+                }
+                String[] info = line.split(" ");
+                if (!aliases.containsKey(info[0])) {
+                    aliases.put(info[0], new ArrayList<String>());
+                }
+                aliases.get(info[0]).add(info[1]);
+                if (info[1].equals(extStorage)) {
+                    extDevice=info[0];
+                }
+                result.add(info[1]);
+            }
+            reader.close();
+            if (extDevice != null) {
+                result.removeAll(aliases.get(extDevice));
+                for (String path : result) {
+                    try {
+                        ListItem item = new ListItem();
+                        if (path.toLowerCase().contains("sd")) {
+                            ext.title = LocaleController.getString("SdCard", R.string.SdCard);
+                        } else {
+                            ext.title = LocaleController.getString("ExternalStorage", R.string.ExternalStorage);
+                        }
+                        item.icon = R.drawable.ic_external_storage;
+                        item.subtitle = getRootSubtitle(path);
+                        item.file = new File(path);
+                        items.add(item);
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                }
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        ListItem fs = new ListItem();
+        fs.title = "/";
+        fs.subtitle = LocaleController.getString("SystemRoot", R.string.SystemRoot);
+        fs.icon = R.drawable.ic_directory;
+        fs.file = new File("/");
+        items.add(fs);
+
+        try {
+            File telegramPath = new File(Environment.getExternalStorageDirectory(), "Telegram");
+            if (telegramPath.exists()) {
+                fs = new ListItem();
+                fs.title = "Telegram";
+                fs.subtitle = telegramPath.toString();
+                fs.icon = R.drawable.ic_directory;
+                fs.file = telegramPath;
+                items.add(fs);
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+
+        listAdapter.notifyDataSetChanged();
+    }
+
+    private String getRootSubtitle(String path) {
+        StatFs stat = new StatFs(path);
+        long total = (long)stat.getBlockCount() * (long)stat.getBlockSize();
+        long free = (long)stat.getAvailableBlocks() * (long)stat.getBlockSize();
+        if (total == 0) {
+            return "";
+        }
+        return LocaleController.formatString("FreeOfTotal", R.string.FreeOfTotal, Utilities.formatFileSize(free), Utilities.formatFileSize(total));
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public int getCount() {
+            return items.size();
+        }
+
+        @Override
+        public Object getItem(int position) {
+            return items.get(position);
+        }
+
+        @Override
+        public long getItemId(int position) {
+            return 0;
+        }
+
+        public int getViewTypeCount() {
+            return 2;
+        }
+
+        public int getItemViewType(int pos) {
+            return items.get(pos).subtitle.length() > 0 ? 0 : 1;
+        }
+
+        @Override
+        public View getView(int position, View convertView, ViewGroup parent) {
+            View v = convertView;
+            ListItem item = items.get(position);
+            if (v == null) {
+                v = View.inflate(mContext, R.layout.document_item, null);
+                if (item.subtitle.length() == 0) {
+                    v.findViewById(R.id.docs_item_info).setVisibility(View.GONE);
+                }
+            }
+            TextView typeTextView = (TextView)v.findViewById(R.id.docs_item_type);
+            ((TextView)v.findViewById(R.id.docs_item_title)).setText(item.title);
+
+            ((TextView)v.findViewById(R.id.docs_item_info)).setText(item.subtitle);
+            BackupImageView imageView = (BackupImageView)v.findViewById(R.id.docs_item_thumb);
+            if (item.thumb != null) {
+                imageView.setImageBitmap(null);
+                typeTextView.setText(item.ext.toUpperCase().substring(0, Math.min(item.ext.length(), 4)));
+                imageView.setImage(item.thumb, "55_42", 0);
+                imageView.setVisibility(View.VISIBLE);
+                typeTextView.setVisibility(View.VISIBLE);
+            } else if (item.icon != 0) {
+                imageView.setImageResource(item.icon);
+                imageView.setVisibility(View.VISIBLE);
+                typeTextView.setVisibility(View.GONE);
+            } else {
+                typeTextView.setText(item.ext.toUpperCase().substring(0, Math.min(item.ext.length(), 4)));
+                imageView.setVisibility(View.GONE);
+                typeTextView.setVisibility(View.VISIBLE);
+            }
+            return v;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/GroupCreateActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/GroupCreateActivity.java
new file mode 100644
index 000000000..3348cbef2
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/GroupCreateActivity.java
@@ -0,0 +1,624 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.app.Activity;
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.os.Build;
+import android.os.Bundle;
+import android.text.Editable;
+import android.text.Spannable;
+import android.text.SpannableString;
+import android.text.SpannableStringBuilder;
+import android.text.TextWatcher;
+import android.text.style.ImageSpan;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AbsListView;
+import android.widget.AdapterView;
+import android.widget.EditText;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import org.tomato.PhoneFormat.PhoneFormat;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.ContactsController;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MessagesController;
+import org.tomato.android.NotificationCenter;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
+import org.tomato.messenger.Utilities;
+import org.tomato.ui.Views.ActionBar.ActionBarLayer;
+import org.tomato.ui.Views.ActionBar.ActionBarMenu;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+import org.tomato.ui.Views.BackupImageView;
+import org.tomato.ui.Views.PinnedHeaderListView;
+import org.tomato.ui.Views.SectionedBaseAdapter;
+import org.tomato.ui.Views.SettingsSectionLayout;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Timer;
+import java.util.TimerTask;
+
+public class GroupCreateActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+
+    public static class XImageSpan extends ImageSpan {
+        public int uid;
+
+        public XImageSpan(Drawable d, int verticalAlignment) {
+            super(d, verticalAlignment);
+        }
+
+        @Override
+        public int getSize(Paint paint, CharSequence text, int start, int end, Paint.FontMetricsInt fm) {
+            if (fm == null) {
+                fm = new Paint.FontMetricsInt();
+            }
+
+            int sz = super.getSize(paint, text, start, end, fm);
+
+            int offset = AndroidUtilities.dp(6);
+            int w = (fm.bottom - fm.top) / 2;
+            fm.top = -w - offset;
+            fm.bottom = w - offset;
+            fm.ascent = -w - offset;
+            fm.leading = 0;
+            fm.descent = w - offset;
+
+            return sz;
+        }
+    }
+
+    private SectionedBaseAdapter listViewAdapter;
+    private PinnedHeaderListView listView;
+    private TextView emptyTextView;
+    private EditText userSelectEditText;
+    private boolean ignoreChange = false;
+    private boolean isBroadcast = false;
+    private int maxCount = 200;
+
+    private HashMap<Integer, XImageSpan> selectedContacts =  new HashMap<Integer, XImageSpan>();
+    private ArrayList<XImageSpan> allSpans = new ArrayList<XImageSpan>();
+
+    private boolean searchWas;
+    private boolean searching;
+    private Timer searchTimer;
+    public ArrayList<TLRPC.User> searchResult;
+    public ArrayList<CharSequence> searchResultNames;
+
+    private CharSequence changeString;
+    private int beforeChangeIndex;
+
+    private final static int done_button = 1;
+
+    public GroupCreateActivity() {
+        super();
+    }
+
+    public GroupCreateActivity(Bundle args) {
+        super(args);
+        isBroadcast = args.getBoolean("broadcast", false);
+        maxCount = !isBroadcast ? MessagesController.getInstance().maxGroupCount : MessagesController.getInstance().maxBroadcastCount;
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.contactsDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.chatDidCreated);
+        return super.onFragmentCreate();
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.contactsDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.chatDidCreated);
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
+            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
+            if (isBroadcast) {
+                actionBarLayer.setTitle(LocaleController.getString("NewBroadcastList", R.string.NewBroadcastList));
+            } else {
+                actionBarLayer.setTitle(LocaleController.getString("NewGroup", R.string.NewGroup));
+            }
+            actionBarLayer.setSubtitle(LocaleController.formatString("MembersCount", R.string.MembersCount, selectedContacts.size(), maxCount));
+
+            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    } else if (id == done_button) {
+                        if (!selectedContacts.isEmpty()) {
+                            ArrayList<Integer> result = new ArrayList<Integer>();
+                            result.addAll(selectedContacts.keySet());
+                            Bundle args = new Bundle();
+                            args.putIntegerArrayList("result", result);
+                            args.putBoolean("broadcast", isBroadcast);
+                            presentFragment(new GroupCreateFinalActivity(args));
+                        }
+                    }
+                }
+            });
+
+            ActionBarMenu menu = actionBarLayer.createMenu();
+            View doneItem = menu.addItemResource(done_button, R.layout.group_create_done_layout);
+            TextView doneTextView = (TextView)doneItem.findViewById(R.id.done_button);
+            doneTextView.setText(LocaleController.getString("Next", R.string.Next));
+
+            searching = false;
+            searchWas = false;
+
+            fragmentView = inflater.inflate(R.layout.group_create_layout, container, false);
+
+            emptyTextView = (TextView)fragmentView.findViewById(R.id.searchEmptyView);
+            emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
+            emptyTextView.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
+            userSelectEditText = (EditText)fragmentView.findViewById(R.id.bubble_input_text);
+            userSelectEditText.setHint(LocaleController.getString("SendMessageTo", R.string.SendMessageTo));
+            if (Build.VERSION.SDK_INT >= 11) {
+                userSelectEditText.setTextIsSelectable(false);
+            }
+            userSelectEditText.addTextChangedListener(new TextWatcher() {
+                @Override
+                public void beforeTextChanged(CharSequence charSequence, int start, int count, int after) {
+                    if (!ignoreChange) {
+                        beforeChangeIndex = userSelectEditText.getSelectionStart();
+                        changeString = new SpannableString(charSequence);
+                    }
+                }
+
+                @Override
+                public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+
+                }
+
+                @Override
+                public void afterTextChanged(Editable editable) {
+                    if (!ignoreChange) {
+                        boolean search = false;
+                        int afterChangeIndex = userSelectEditText.getSelectionEnd();
+                        if (editable.toString().length() < changeString.toString().length()) {
+                            String deletedString = "";
+                            try {
+                                deletedString = changeString.toString().substring(afterChangeIndex, beforeChangeIndex);
+                            } catch (Exception e) {
+                                FileLog.e("tmessages", e);
+                            }
+                            if (deletedString.length() > 0) {
+                                if (searching && searchWas) {
+                                    search = true;
+                                }
+                                Spannable span = userSelectEditText.getText();
+                                for (int a = 0; a < allSpans.size(); a++) {
+                                    XImageSpan sp = allSpans.get(a);
+                                    if (span.getSpanStart(sp) == -1) {
+                                        allSpans.remove(sp);
+                                        selectedContacts.remove(sp.uid);
+                                    }
+                                }
+                                actionBarLayer.setSubtitle(LocaleController.formatString("MembersCount", R.string.MembersCount, selectedContacts.size(), maxCount));
+                                listView.invalidateViews();
+                            } else {
+                                search = true;
+                            }
+                        } else {
+                            search = true;
+                        }
+                        if (search) {
+                            String text = userSelectEditText.getText().toString().replace("<", "");
+                            if (text.length() != 0) {
+                                searchDialogs(text);
+                                searching = true;
+                                searchWas = true;
+                                emptyTextView.setText(LocaleController.getString("NoResult", R.string.NoResult));
+                                listViewAdapter.notifyDataSetChanged();
+                            } else {
+                                searchResult = null;
+                                searchResultNames = null;
+                                searching = false;
+                                searchWas = false;
+                                emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
+                                listViewAdapter.notifyDataSetChanged();
+                            }
+                        }
+                    }
+                }
+            });
+
+            listView = (PinnedHeaderListView)fragmentView.findViewById(R.id.listView);
+            listView.setEmptyView(emptyTextView);
+            listView.setVerticalScrollBarEnabled(false);
+
+            listView.setAdapter(listViewAdapter = new ListAdapter(getParentActivity()));
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    TLRPC.User user;
+                    int section = listViewAdapter.getSectionForPosition(i);
+                    int row = listViewAdapter.getPositionInSectionForPosition(i);
+                    if (searching && searchWas) {
+                        user = searchResult.get(row);
+                    } else {
+                        ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
+                        user = MessagesController.getInstance().getUser(arr.get(row).user_id);
+                        listView.invalidateViews();
+                    }
+                    if (selectedContacts.containsKey(user.id)) {
+                        XImageSpan span = selectedContacts.get(user.id);
+                        selectedContacts.remove(user.id);
+                        SpannableStringBuilder text = new SpannableStringBuilder(userSelectEditText.getText());
+                        text.delete(text.getSpanStart(span), text.getSpanEnd(span));
+                        allSpans.remove(span);
+                        ignoreChange = true;
+                        userSelectEditText.setText(text);
+                        userSelectEditText.setSelection(text.length());
+                        ignoreChange = false;
+                    } else {
+                        if (selectedContacts.size() == maxCount) {
+                            return;
+                        }
+                        ignoreChange = true;
+                        XImageSpan span = createAndPutChipForUser(user);
+                        span.uid = user.id;
+                        ignoreChange = false;
+                    }
+                    actionBarLayer.setSubtitle(LocaleController.formatString("MembersCount", R.string.MembersCount, selectedContacts.size(), maxCount));
+                    if (searching || searchWas) {
+                        searching = false;
+                        searchWas = false;
+                        emptyTextView.setText(LocaleController.getString("NoContacts", R.string.NoContacts));
+
+                        ignoreChange = true;
+                        SpannableStringBuilder ssb = new SpannableStringBuilder("");
+                        for (ImageSpan sp : allSpans) {
+                            ssb.append("<<");
+                            ssb.setSpan(sp, ssb.length() - 2, ssb.length(), SpannableStringBuilder.SPAN_EXCLUSIVE_EXCLUSIVE);
+                        }
+                        userSelectEditText.setText(ssb);
+                        userSelectEditText.setSelection(ssb.length());
+                        ignoreChange = false;
+
+                        listViewAdapter.notifyDataSetChanged();
+                    } else {
+                        listView.invalidateViews();
+                    }
+                }
+            });
+
+            listView.setOnScrollListener(new AbsListView.OnScrollListener() {
+                @Override
+                public void onScrollStateChanged(AbsListView absListView, int i) {
+                    if (i == SCROLL_STATE_TOUCH_SCROLL) {
+                        AndroidUtilities.hideKeyboard(userSelectEditText);
+                    }
+                }
+
+                @Override
+                public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+                }
+            });
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    public XImageSpan createAndPutChipForUser(TLRPC.User user) {
+        LayoutInflater lf = (LayoutInflater)ApplicationLoader.applicationContext.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
+        View textView = lf.inflate(R.layout.group_create_bubble, null);
+        TextView text = (TextView)textView.findViewById(R.id.bubble_text_view);
+        String name = ContactsController.formatName(user.first_name, user.last_name);
+        if (name.length() == 0 && user.phone != null && user.phone.length() != 0) {
+            name = PhoneFormat.getInstance().format("+" + user.phone);
+        }
+        text.setText(name + ", ");
+
+        int spec = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);
+        textView.measure(spec, spec);
+        textView.layout(0, 0, textView.getMeasuredWidth(), textView.getMeasuredHeight());
+        Bitmap b = Bitmap.createBitmap(textView.getWidth(), textView.getHeight(), Bitmap.Config.ARGB_8888);
+        Canvas canvas = new Canvas(b);
+        canvas.translate(-textView.getScrollX(), -textView.getScrollY());
+        textView.draw(canvas);
+        textView.setDrawingCacheEnabled(true);
+        Bitmap cacheBmp = textView.getDrawingCache();
+        Bitmap viewBmp = cacheBmp.copy(Bitmap.Config.ARGB_8888, true);
+        textView.destroyDrawingCache();
+
+        final BitmapDrawable bmpDrawable = new BitmapDrawable(b);
+        bmpDrawable.setBounds(0, 0, b.getWidth(), b.getHeight());
+
+        SpannableStringBuilder ssb = new SpannableStringBuilder("");
+        XImageSpan span = new XImageSpan(bmpDrawable, ImageSpan.ALIGN_BASELINE);
+        allSpans.add(span);
+        selectedContacts.put(user.id, span);
+        for (ImageSpan sp : allSpans) {
+            ssb.append("<<");
+            ssb.setSpan(sp, ssb.length() - 2, ssb.length(), SpannableStringBuilder.SPAN_EXCLUSIVE_EXCLUSIVE);
+        }
+        userSelectEditText.setText(ssb);
+        userSelectEditText.setSelection(ssb.length());
+        return span;
+    }
+
+    public void searchDialogs(final String query) {
+        if (query == null) {
+            searchResult = null;
+            searchResultNames = null;
+        } else {
+            try {
+                if (searchTimer != null) {
+                    searchTimer.cancel();
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            searchTimer = new Timer();
+            searchTimer.schedule(new TimerTask() {
+                @Override
+                public void run() {
+                    try {
+                        searchTimer.cancel();
+                        searchTimer = null;
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                    processSearch(query);
+                }
+            }, 100, 300);
+        }
+    }
+
+    private void processSearch(final String query) {
+        AndroidUtilities.RunOnUIThread(new Runnable() {
+            @Override
+            public void run() {
+                final ArrayList<TLRPC.TL_contact> contactsCopy = new ArrayList<TLRPC.TL_contact>();
+                contactsCopy.addAll(ContactsController.getInstance().contacts);
+                Utilities.searchQueue.postRunnable(new Runnable() {
+                    @Override
+                    public void run() {
+                        if (query.length() == 0) {
+                            updateSearchResults(new ArrayList<TLRPC.User>(), new ArrayList<CharSequence>());
+                            return;
+                        }
+                        long time = System.currentTimeMillis();
+                        ArrayList<TLRPC.User> resultArray = new ArrayList<TLRPC.User>();
+                        ArrayList<CharSequence> resultArrayNames = new ArrayList<CharSequence>();
+                        String q = query.toLowerCase();
+
+                        for (TLRPC.TL_contact contact : contactsCopy) {
+                            TLRPC.User user = MessagesController.getInstance().getUser(contact.user_id);
+                            if (user.first_name.toLowerCase().startsWith(q) || user.last_name.toLowerCase().startsWith(q)) {
+                                if (user.id == UserConfig.getClientUserId()) {
+                                    continue;
+                                }
+                                resultArrayNames.add(Utilities.generateSearchName(user.first_name, user.last_name, q));
+                                resultArray.add(user);
+                            }
+                        }
+
+                        updateSearchResults(resultArray, resultArrayNames);
+                    }
+                });
+            }
+        });
+    }
+
+    private void updateSearchResults(final ArrayList<TLRPC.User> users, final ArrayList<CharSequence> names) {
+        AndroidUtilities.RunOnUIThread(new Runnable() {
+            @Override
+            public void run() {
+                searchResult = users;
+                searchResultNames = names;
+                listViewAdapter.notifyDataSetChanged();
+            }
+        });
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.contactsDidLoaded) {
+            if (listViewAdapter != null) {
+                listViewAdapter.notifyDataSetChanged();
+            }
+        } else if (id == NotificationCenter.updateInterfaces) {
+            int mask = (Integer)args[0];
+            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
+                if (listView != null) {
+                    listView.invalidateViews();
+                }
+            }
+        } else if (id == NotificationCenter.chatDidCreated) {
+            AndroidUtilities.RunOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    removeSelfFromStack();
+                }
+            });
+        }
+    }
+
+    private class ListAdapter extends SectionedBaseAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public Object getItem(int section, int position) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int section, int position) {
+            return 0;
+        }
+
+        @Override
+        public int getSectionCount() {
+            if (searching && searchWas) {
+                return searchResult == null || searchResult.isEmpty() ? 0 : 1;
+            }
+            return ContactsController.getInstance().sortedUsersSectionsArray.size();
+        }
+
+        @Override
+        public int getCountForSection(int section) {
+            if (searching && searchWas) {
+                return searchResult == null ? 0 : searchResult.size();
+            }
+            ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
+            return arr.size();
+        }
+
+        @Override
+        public View getItemView(int section, int position, View convertView, ViewGroup parent) {
+            TLRPC.User user;
+            int size;
+
+            if (searchWas && searching) {
+                user = MessagesController.getInstance().getUser(searchResult.get(position).id);
+                size = searchResult.size();
+            } else {
+                ArrayList<TLRPC.TL_contact> arr = ContactsController.getInstance().usersSectionsDict.get(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
+                user = MessagesController.getInstance().getUser(arr.get(position).user_id);
+                size = arr.size();
+            }
+
+            if (convertView == null) {
+                LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                convertView = li.inflate(R.layout.group_create_row_layout, parent, false);
+            }
+            ContactListRowHolder holder = (ContactListRowHolder)convertView.getTag();
+            if (holder == null) {
+                holder = new ContactListRowHolder(convertView);
+                convertView.setTag(holder);
+            }
+
+            ImageView checkButton = (ImageView)convertView.findViewById(R.id.settings_row_check_button);
+            if (selectedContacts.containsKey(user.id)) {
+                checkButton.setImageResource(R.drawable.btn_check_on_holo_light);
+            } else {
+                checkButton.setImageResource(R.drawable.btn_check_off_holo_light);
+            }
+
+            View divider = convertView.findViewById(R.id.settings_row_divider);
+            if (position == size - 1) {
+                divider.setVisibility(View.INVISIBLE);
+            } else {
+                divider.setVisibility(View.VISIBLE);
+            }
+
+            if (searchWas && searching) {
+                holder.nameTextView.setText(searchResultNames.get(position));
+            } else {
+                String name = ContactsController.formatName(user.first_name, user.last_name);
+                if (name.length() == 0) {
+                    if (user.phone != null && user.phone.length() != 0) {
+                        name = PhoneFormat.getInstance().format("+" + user.phone);
+                    } else {
+                        name = LocaleController.getString("HiddenName", R.string.HiddenName);
+                    }
+                }
+                holder.nameTextView.setText(name);
+            }
+
+            TLRPC.FileLocation photo = null;
+            if (user.photo != null) {
+                photo = user.photo.photo_small;
+            }
+            int placeHolderId = AndroidUtilities.getUserAvatarForId(user.id);
+            holder.avatarImage.setImage(photo, "50_50", placeHolderId);
+
+            holder.messageTextView.setText(LocaleController.formatUserStatus(user));
+            if (user.status != null && user.status.expires > ConnectionsManager.getInstance().getCurrentTime()) {
+                holder.messageTextView.setTextColor(0xff357aa8);
+            } else {
+                holder.messageTextView.setTextColor(0xff808080);
+            }
+
+            return convertView;
+        }
+
+        @Override
+        public int getItemViewType(int section, int position) {
+            return 0;
+        }
+
+        @Override
+        public int getItemViewTypeCount() {
+            return 1;
+        }
+
+        @Override
+        public int getSectionHeaderViewType(int section) {
+            return 0;
+        }
+
+        @Override
+        public int getSectionHeaderViewTypeCount() {
+            return 1;
+        }
+
+        @Override
+        public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
+            if (convertView == null) {
+                convertView = new SettingsSectionLayout(mContext);
+                convertView.setBackgroundColor(0xffffffff);
+            }
+            if (searching && searchWas) {
+                ((SettingsSectionLayout) convertView).setText(LocaleController.getString("AllContacts", R.string.AllContacts));
+            } else {
+                ((SettingsSectionLayout) convertView).setText(ContactsController.getInstance().sortedUsersSectionsArray.get(section));
+            }
+            return convertView;
+        }
+    }
+
+    public static class ContactListRowHolder {
+        public BackupImageView avatarImage;
+        public TextView messageTextView;
+        public TextView nameTextView;
+
+        public ContactListRowHolder(View view) {
+            messageTextView = (TextView)view.findViewById(R.id.messages_list_row_message);
+            nameTextView = (TextView)view.findViewById(R.id.messages_list_row_name);
+            avatarImage = (BackupImageView)view.findViewById(R.id.messages_list_row_avatar);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/GroupCreateFinalActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/GroupCreateFinalActivity.java
new file mode 100644
index 000000000..d809b98a3
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/GroupCreateFinalActivity.java
@@ -0,0 +1,430 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.app.AlertDialog;
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.EditText;
+import android.widget.ImageButton;
+import android.widget.TextView;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MessagesController;
+import org.tomato.android.MessagesStorage;
+import org.tomato.android.NotificationCenter;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.ui.Cells.ChatOrUserCell;
+import org.tomato.ui.Views.ActionBar.ActionBarLayer;
+import org.tomato.ui.Views.ActionBar.ActionBarMenu;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+import org.tomato.ui.Views.AvatarUpdater;
+import org.tomato.ui.Views.BackupImageView;
+import org.tomato.ui.Views.PinnedHeaderListView;
+import org.tomato.ui.Views.SectionedBaseAdapter;
+import org.tomato.ui.Views.SettingsSectionLayout;
+
+import java.util.ArrayList;
+import java.util.concurrent.Semaphore;
+
+public class GroupCreateFinalActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, AvatarUpdater.AvatarUpdaterDelegate {
+    private PinnedHeaderListView listView;
+    private EditText nameTextView;
+    private TLRPC.FileLocation avatar;
+    private TLRPC.InputFile uploadedAvatar;
+    private ArrayList<Integer> selectedContacts;
+    private BackupImageView avatarImage;
+    private boolean createAfterUpload;
+    private boolean donePressed;
+    private AvatarUpdater avatarUpdater = new AvatarUpdater();
+    private ProgressDialog progressDialog = null;
+    private String nameToSet = null;
+    private boolean isBroadcast = false;
+
+    private final static int done_button = 1;
+
+    public GroupCreateFinalActivity(Bundle args) {
+        super(args);
+        isBroadcast = args.getBoolean("broadcast", false);
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public boolean onFragmentCreate() {
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.chatDidCreated);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.chatDidFailCreate);
+        avatarUpdater.parentFragment = this;
+        avatarUpdater.delegate = this;
+        selectedContacts = getArguments().getIntegerArrayList("result");
+        final ArrayList<Integer> usersToLoad = new ArrayList<Integer>();
+        for (Integer uid : selectedContacts) {
+            if (MessagesController.getInstance().getUser(uid) == null) {
+                usersToLoad.add(uid);
+            }
+        }
+        if (!usersToLoad.isEmpty()) {
+            final Semaphore semaphore = new Semaphore(0);
+            final ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
+            MessagesStorage.getInstance().storageQueue.postRunnable(new Runnable() {
+                @Override
+                public void run() {
+                    users.addAll(MessagesStorage.getInstance().getUsers(usersToLoad));
+                    semaphore.release();
+                }
+            });
+            try {
+                semaphore.acquire();
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            if (usersToLoad.size() != users.size()) {
+                return false;
+            }
+            if (!users.isEmpty()) {
+                for (TLRPC.User user : users) {
+                    MessagesController.getInstance().putUser(user, true);
+                }
+            } else {
+                return false;
+            }
+        }
+        return super.onFragmentCreate();
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.chatDidCreated);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.chatDidFailCreate);
+        avatarUpdater.clear();
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
+            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
+            if (isBroadcast) {
+                actionBarLayer.setTitle(LocaleController.getString("NewBroadcastList", R.string.NewBroadcastList));
+            } else {
+                actionBarLayer.setTitle(LocaleController.getString("NewGroup", R.string.NewGroup));
+            }
+
+            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    } else if (id == done_button) {
+                        if (donePressed) {
+                            return;
+                        }
+                        if (nameTextView.getText().length() == 0) {
+                            return;
+                        }
+                        donePressed = true;
+
+                        if (isBroadcast) {
+                            MessagesController.getInstance().createChat(nameTextView.getText().toString(), selectedContacts, uploadedAvatar, isBroadcast);
+                        } else {
+                            if (avatarUpdater.uploadingAvatar != null) {
+                                createAfterUpload = true;
+                            } else {
+                                progressDialog = new ProgressDialog(getParentActivity());
+                                progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
+                                progressDialog.setCanceledOnTouchOutside(false);
+                                progressDialog.setCancelable(false);
+
+                                final long reqId = MessagesController.getInstance().createChat(nameTextView.getText().toString(), selectedContacts, uploadedAvatar, isBroadcast);
+
+                                progressDialog.setButton(DialogInterface.BUTTON_NEGATIVE, LocaleController.getString("Cancel", R.string.Cancel), new DialogInterface.OnClickListener() {
+                                    @Override
+                                    public void onClick(DialogInterface dialog, int which) {
+                                        ConnectionsManager.getInstance().cancelRpc(reqId, true);
+                                        donePressed = false;
+                                        try {
+                                            dialog.dismiss();
+                                        } catch (Exception e) {
+                                            FileLog.e("tmessages", e);
+                                        }
+                                    }
+                                });
+                                progressDialog.show();
+                            }
+                        }
+                    }
+                }
+            });
+
+            ActionBarMenu menu = actionBarLayer.createMenu();
+            View doneItem = menu.addItemResource(done_button, R.layout.group_create_done_layout);
+
+            TextView doneTextView = (TextView)doneItem.findViewById(R.id.done_button);
+            doneTextView.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
+
+            fragmentView = inflater.inflate(R.layout.group_create_final_layout, container, false);
+
+            final ImageButton button2 = (ImageButton)fragmentView.findViewById(R.id.settings_change_avatar_button);
+            if (isBroadcast) {
+                button2.setVisibility(View.GONE);
+            } else {
+                button2.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View view) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+
+                        CharSequence[] items;
+
+                        if (avatar != null) {
+                            items = new CharSequence[]{LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley), LocaleController.getString("DeletePhoto", R.string.DeletePhoto)};
+                        } else {
+                            items = new CharSequence[]{LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley)};
+                        }
+
+                        builder.setItems(items, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                if (i == 0) {
+                                    avatarUpdater.openCamera();
+                                } else if (i == 1) {
+                                    avatarUpdater.openGallery();
+                                } else if (i == 2) {
+                                    avatar = null;
+                                    uploadedAvatar = null;
+                                    avatarImage.setImage(avatar, "50_50", R.drawable.group_blue);
+                                }
+                            }
+                        });
+                        showAlertDialog(builder);
+                    }
+                });
+            }
+
+            avatarImage = (BackupImageView)fragmentView.findViewById(R.id.settings_avatar_image);
+            avatarImage.setImageResource(R.drawable.group_blue);
+
+            nameTextView = (EditText)fragmentView.findViewById(R.id.bubble_input_text);
+            if (isBroadcast) {
+                nameTextView.setHint(LocaleController.getString("EnterListName", R.string.EnterListName));
+            } else {
+                nameTextView.setHint(LocaleController.getString("EnterGroupNamePlaceholder", R.string.EnterGroupNamePlaceholder));
+            }
+            if (nameToSet != null) {
+                nameTextView.setText(nameToSet);
+                nameToSet = null;
+            }
+            listView = (PinnedHeaderListView)fragmentView.findViewById(R.id.listView);
+            listView.setAdapter(new ListAdapter(getParentActivity()));
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    @Override
+    public void didUploadedPhoto(final TLRPC.InputFile file, final TLRPC.PhotoSize small, final TLRPC.PhotoSize big) {
+        AndroidUtilities.RunOnUIThread(new Runnable() {
+            @Override
+            public void run() {
+                uploadedAvatar = file;
+                avatar = small.location;
+                avatarImage.setImage(avatar, "50_50", R.drawable.group_blue);
+                if (createAfterUpload) {
+                    FileLog.e("tmessages", "avatar did uploaded");
+                    MessagesController.getInstance().createChat(nameTextView.getText().toString(), selectedContacts, uploadedAvatar, false);
+                }
+            }
+        });
+    }
+
+    @Override
+    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
+        avatarUpdater.onActivityResult(requestCode, resultCode, data);
+    }
+
+    @Override
+    public void saveSelfArgs(Bundle args) {
+        if (avatarUpdater != null && avatarUpdater.currentPicturePath != null) {
+            args.putString("path", avatarUpdater.currentPicturePath);
+        }
+        if (nameTextView != null) {
+            String text = nameTextView.getText().toString();
+            if (text != null && text.length() != 0) {
+                args.putString("nameTextView", text);
+            }
+        }
+    }
+
+    @Override
+    public void restoreSelfArgs(Bundle args) {
+        if (avatarUpdater != null) {
+            avatarUpdater.currentPicturePath = args.getString("path");
+        }
+        String text = args.getString("nameTextView");
+        if (text != null) {
+            if (nameTextView != null) {
+                nameTextView.setText(text);
+            } else {
+                nameToSet = text;
+            }
+        }
+    }
+
+    @Override
+    public void didReceivedNotification(int id, final Object... args) {
+        if (id == NotificationCenter.updateInterfaces) {
+            int mask = (Integer)args[0];
+            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
+                updateVisibleRows(mask);
+            }
+        } else if (id == NotificationCenter.chatDidFailCreate) {
+            if (progressDialog != null) {
+                try {
+                    progressDialog.dismiss();
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+            donePressed = false;
+        } else if (id == NotificationCenter.chatDidCreated) {
+            AndroidUtilities.RunOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    if (progressDialog != null) {
+                        try {
+                            progressDialog.dismiss();
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                    }
+                    Bundle args2 = new Bundle();
+                    args2.putInt("chat_id", (Integer)args[0]);
+                    presentFragment(new ChatActivity(args2), true);
+                }
+            });
+        }
+    }
+
+    private void updateVisibleRows(int mask) {
+        if (listView == null) {
+            return;
+        }
+        int count = listView.getChildCount();
+        for (int a = 0; a < count; a++) {
+            View child = listView.getChildAt(a);
+            if (child instanceof ChatOrUserCell) {
+                ((ChatOrUserCell) child).update(mask);
+            }
+        }
+    }
+
+    private class ListAdapter extends SectionedBaseAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public Object getItem(int section, int position) {
+            return null;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int position) {
+            return false;
+        }
+
+        @Override
+        public long getItemId(int section, int position) {
+            return 0;
+        }
+
+        @Override
+        public int getSectionCount() {
+            return 1;
+        }
+
+        @Override
+        public int getCountForSection(int section) {
+            if (selectedContacts == null) {
+                return 0;
+            }
+            return selectedContacts.size();
+        }
+
+        @Override
+        public View getItemView(int section, int position, View convertView, ViewGroup parent) {
+            TLRPC.User user = MessagesController.getInstance().getUser(selectedContacts.get(position));
+
+            if (convertView == null) {
+                convertView = new ChatOrUserCell(mContext);
+                ((ChatOrUserCell)convertView).usePadding = false;
+            }
+
+            ((ChatOrUserCell)convertView).setData(user, null, null, null, null);
+            ((ChatOrUserCell) convertView).useSeparator = position != selectedContacts.size() - 1;
+
+            return convertView;
+        }
+
+        @Override
+        public int getItemViewType(int section, int position) {
+            return 0;
+        }
+
+        @Override
+        public int getItemViewTypeCount() {
+            return 1;
+        }
+
+        @Override
+        public int getSectionHeaderViewType(int section) {
+            return 0;
+        }
+
+        @Override
+        public int getSectionHeaderViewTypeCount() {
+            return 1;
+        }
+
+        @Override
+        public View getSectionHeaderView(int section, View convertView, ViewGroup parent) {
+            if (convertView == null) {
+                convertView = new SettingsSectionLayout(mContext);
+                convertView.setBackgroundColor(0xffffffff);
+            }
+            ((SettingsSectionLayout) convertView).setText(LocaleController.formatPluralString("Members", selectedContacts.size()).toUpperCase());
+            return convertView;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/IdenticonActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/IdenticonActivity.java
new file mode 100644
index 000000000..6ca67fad2
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/IdenticonActivity.java
@@ -0,0 +1,118 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.content.Context;
+import android.os.Bundle;
+import android.text.Html;
+import android.view.LayoutInflater;
+import android.view.Surface;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.view.WindowManager;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MessagesController;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.ui.Views.ActionBar.ActionBarLayer;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+import org.tomato.ui.Views.IdenticonView;
+
+public class IdenticonActivity extends BaseFragment {
+    private int chat_id;
+
+    public IdenticonActivity(Bundle args) {
+        super(args);
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        chat_id = getArguments().getInt("chat_id");
+        return super.onFragmentCreate();
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
+            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
+            actionBarLayer.setTitle(LocaleController.getString("EncryptionKey", R.string.EncryptionKey));
+            actionBarLayer.setTitleIcon(R.drawable.ic_lock_white, AndroidUtilities.dp(4));
+
+            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    }
+                }
+            });
+
+            fragmentView = inflater.inflate(R.layout.identicon_layout, container, false);
+            IdenticonView identiconView = (IdenticonView) fragmentView.findViewById(R.id.identicon_view);
+            TextView textView = (TextView)fragmentView.findViewById(R.id.identicon_text);
+            TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat(chat_id);
+            if (encryptedChat != null) {
+                identiconView.setBytes(encryptedChat.auth_key);
+                TLRPC.User user = MessagesController.getInstance().getUser(encryptedChat.user_id);
+                textView.setText(Html.fromHtml(LocaleController.formatString("EncryptionKeyDescription", R.string.EncryptionKeyDescription, user.first_name, user.first_name)));
+            }
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    @Override
+    public void onConfigurationChanged(android.content.res.Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        fixLayout();
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        fixLayout();
+    }
+
+    private void fixLayout() {
+        ViewTreeObserver obs = fragmentView.getViewTreeObserver();
+        obs.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+            @Override
+            public boolean onPreDraw() {
+                if (fragmentView != null) {
+                    fragmentView.getViewTreeObserver().removeOnPreDrawListener(this);
+                }
+                if (getParentActivity() == null || fragmentView == null) {
+                    return true;
+                }
+                LinearLayout layout = (LinearLayout)fragmentView;
+                WindowManager manager = (WindowManager)ApplicationLoader.applicationContext.getSystemService(Context.WINDOW_SERVICE);
+                int rotation = manager.getDefaultDisplay().getRotation();
+
+                if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
+                    layout.setOrientation(LinearLayout.HORIZONTAL);
+                } else {
+                    layout.setOrientation(LinearLayout.VERTICAL);
+                }
+
+                fragmentView.setPadding(fragmentView.getPaddingLeft(), 0, fragmentView.getPaddingRight(), fragmentView.getPaddingBottom());
+                return false;
+            }
+        });
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/IntroActivity.java
similarity index 98%
rename from TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java
rename to TMessagesProj/src/main/java/org/tomato/ui/IntroActivity.java
index ebcf31338..0f0d0b71d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/IntroActivity.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.ui;
+package org.tomato.ui;
 
 import android.app.Activity;
 import android.content.Intent;
@@ -25,10 +25,10 @@
 import android.widget.ImageView;
 import android.widget.TextView;
 
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.R;
-import org.telegram.messenger.Utilities;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.LocaleController;
+import org.tomato.messenger.R;
+import org.tomato.messenger.Utilities;
 
 public class IntroActivity extends Activity {
     private ViewPager viewPager;
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/LanguageSelectActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/LanguageSelectActivity.java
new file mode 100644
index 000000000..75db1ec74
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/LanguageSelectActivity.java
@@ -0,0 +1,427 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.tomato.ui;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AbsListView;
+import android.widget.AdapterView;
+import android.widget.EditText;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.LocaleController;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.Utilities;
+import org.tomato.ui.Adapters.BaseFragmentAdapter;
+import org.tomato.ui.Views.ActionBar.ActionBarLayer;
+import org.tomato.ui.Views.ActionBar.ActionBarMenu;
+import org.tomato.ui.Views.ActionBar.ActionBarMenuItem;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+
+import java.util.ArrayList;
+import java.util.Timer;
+import java.util.TimerTask;
+
+public class LanguageSelectActivity extends BaseFragment {
+    private BaseFragmentAdapter listAdapter;
+    private ListView listView;
+    private boolean searchWas;
+    private boolean searching;
+    private BaseFragmentAdapter searchListViewAdapter;
+    private TextView emptyTextView;
+
+    private Timer searchTimer;
+    public ArrayList<LocaleController.LocaleInfo> searchResult;
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
+            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
+            actionBarLayer.setTitle(LocaleController.getString("Language", R.string.Language));
+
+            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    }
+                }
+            });
+
+            ActionBarMenu menu = actionBarLayer.createMenu();
+            menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
+                @Override
+                public void onSearchExpand() {
+                    searching = true;
+                }
+
+                @Override
+                public void onSearchCollapse() {
+                    search(null);
+                    searching = false;
+                    searchWas = false;
+                    if (listView != null) {
+                        emptyTextView.setVisibility(View.GONE);
+                        listView.setAdapter(listAdapter);
+                    }
+                }
+
+                @Override
+                public void onTextChanged(EditText editText) {
+                    String text = editText.getText().toString();
+                    search(text);
+                    if (text.length() != 0) {
+                        searchWas = true;
+                        if (listView != null) {
+                            listView.setPadding(AndroidUtilities.dp(16), listView.getPaddingTop(), AndroidUtilities.dp(16), listView.getPaddingBottom());
+                            listView.setAdapter(searchListViewAdapter);
+                            if(android.os.Build.VERSION.SDK_INT >= 11) {
+                                listView.setFastScrollAlwaysVisible(false);
+                            }
+                            listView.setFastScrollEnabled(false);
+                            listView.setVerticalScrollBarEnabled(true);
+                        }
+                        if (emptyTextView != null) {
+                            emptyTextView.setText(LocaleController.getString("NoResult", R.string.NoResult));
+                        }
+                    }
+                }
+            });
+
+            fragmentView = inflater.inflate(R.layout.language_select_layout, container, false);
+            listAdapter = new ListAdapter(getParentActivity());
+            listView = (ListView)fragmentView.findViewById(R.id.listView);
+            listView.setAdapter(listAdapter);
+            emptyTextView = (TextView)fragmentView.findViewById(R.id.searchEmptyView);
+            listView.setEmptyView(emptyTextView);
+            emptyTextView.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
+            searchListViewAdapter = new SearchAdapter(getParentActivity());
+
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    LocaleController.LocaleInfo localeInfo = null;
+                    if (searching && searchWas) {
+                        if (i >= 0 && i < searchResult.size()) {
+                            localeInfo = searchResult.get(i);
+                        }
+                    } else {
+                        if (i >= 0 && i < LocaleController.getInstance().sortedLanguages.size()) {
+                            localeInfo = LocaleController.getInstance().sortedLanguages.get(i);
+                        }
+                    }
+                    if (localeInfo != null) {
+                        LocaleController.getInstance().applyLanguage(localeInfo, true);
+                        parentLayout.rebuildAllFragmentViews(false);
+                    }
+                    finishFragment();
+                }
+            });
+
+            listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
+                @Override
+                public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    LocaleController.LocaleInfo localeInfo = null;
+                    if (searching && searchWas) {
+                        if (i >= 0 && i < searchResult.size()) {
+                            localeInfo = searchResult.get(i);
+                        }
+                    } else {
+                        if (i >= 0 && i < LocaleController.getInstance().sortedLanguages.size()) {
+                            localeInfo = LocaleController.getInstance().sortedLanguages.get(i);
+                        }
+                    }
+                    if (localeInfo == null || localeInfo.pathToFile == null || getParentActivity() == null) {
+                        return false;
+                    }
+                    final LocaleController.LocaleInfo finalLocaleInfo = localeInfo;
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                    builder.setMessage(LocaleController.getString("DeleteLocalization", R.string.DeleteLocalization));
+                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                    builder.setPositiveButton(LocaleController.getString("Delete", R.string.Delete), new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialogInterface, int i) {
+                            if (LocaleController.getInstance().deleteLanguage(finalLocaleInfo)) {
+                                if (searchResult != null) {
+                                    searchResult.remove(finalLocaleInfo);
+                                }
+                                if (listAdapter != null) {
+                                    listAdapter.notifyDataSetChanged();
+                                }
+                                if (searchListViewAdapter != null) {
+                                    searchListViewAdapter.notifyDataSetChanged();
+                                }
+                            }
+                        }
+                    });
+                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                    showAlertDialog(builder);
+                    return true;
+                }
+            });
+
+            listView.setOnScrollListener(new AbsListView.OnScrollListener() {
+                @Override
+                public void onScrollStateChanged(AbsListView absListView, int i) {
+                    if (i == SCROLL_STATE_TOUCH_SCROLL && searching && searchWas) {
+                        AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
+                    }
+                }
+
+                @Override
+                public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+                }
+            });
+
+            searching = false;
+            searchWas = false;
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+    }
+
+    public void search(final String query) {
+        if (query == null) {
+            searchResult = null;
+        } else {
+            try {
+                if (searchTimer != null) {
+                    searchTimer.cancel();
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            searchTimer = new Timer();
+            searchTimer.schedule(new TimerTask() {
+                @Override
+                public void run() {
+                    try {
+                        searchTimer.cancel();
+                        searchTimer = null;
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                    processSearch(query);
+                }
+            }, 100, 300);
+        }
+    }
+
+    private void processSearch(final String query) {
+        Utilities.searchQueue.postRunnable(new Runnable() {
+            @Override
+            public void run() {
+
+                String q = query.trim().toLowerCase();
+                if (q.length() == 0) {
+                    updateSearchResults(new ArrayList<LocaleController.LocaleInfo>());
+                    return;
+                }
+                long time = System.currentTimeMillis();
+                ArrayList<LocaleController.LocaleInfo> resultArray = new ArrayList<LocaleController.LocaleInfo>();
+
+                for (LocaleController.LocaleInfo c : LocaleController.getInstance().sortedLanguages) {
+                    if (c.name.toLowerCase().startsWith(query) || c.nameEnglish.toLowerCase().startsWith(query)) {
+                        resultArray.add(c);
+                    }
+                }
+
+                updateSearchResults(resultArray);
+            }
+        });
+    }
+
+    private void updateSearchResults(final ArrayList<LocaleController.LocaleInfo> arrCounties) {
+        AndroidUtilities.RunOnUIThread(new Runnable() {
+            @Override
+            public void run() {
+                searchResult = arrCounties;
+                searchListViewAdapter.notifyDataSetChanged();
+            }
+        });
+    }
+
+    private class SearchAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public SearchAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return true;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return true;
+        }
+
+        @Override
+        public int getCount() {
+            if (searchResult == null) {
+                return 0;
+            }
+            return searchResult.size();
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            if (view == null) {
+                LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                view = li.inflate(R.layout.settings_row_button_layout, viewGroup, false);
+            }
+            TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+            View divider = view.findViewById(R.id.settings_row_divider);
+
+            LocaleController.LocaleInfo c = searchResult.get(i);
+            textView.setText(c.name);
+            if (i == searchResult.size() - 1) {
+                divider.setVisibility(View.GONE);
+            } else {
+                divider.setVisibility(View.VISIBLE);
+            }
+
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 1;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return searchResult == null || searchResult.size() == 0;
+        }
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return true;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return true;
+        }
+
+        @Override
+        public int getCount() {
+            if (LocaleController.getInstance().sortedLanguages == null) {
+                return 0;
+            }
+            return LocaleController.getInstance().sortedLanguages.size();
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            if (view == null) {
+                LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                view = li.inflate(R.layout.settings_row_button_layout, viewGroup, false);
+            }
+            TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+            View divider = view.findViewById(R.id.settings_row_divider);
+
+            LocaleController.LocaleInfo localeInfo = LocaleController.getInstance().sortedLanguages.get(i);
+            textView.setText(localeInfo.name);
+            if (i == LocaleController.getInstance().sortedLanguages.size() - 1) {
+                divider.setVisibility(View.GONE);
+            } else {
+                divider.setVisibility(View.VISIBLE);
+            }
+
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 1;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return LocaleController.getInstance().sortedLanguages == null || LocaleController.getInstance().sortedLanguages.size() == 0;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/LaunchActivity.java
new file mode 100644
index 000000000..a8f0f731e
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/LaunchActivity.java
@@ -0,0 +1,1240 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.app.Activity;
+import android.content.ContentResolver;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.content.res.Configuration;
+import android.database.Cursor;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Bundle;
+import android.os.Parcelable;
+import android.provider.ContactsContract;
+import android.view.ActionMode;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.view.Window;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import org.tomato.PhoneFormat.PhoneFormat;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.LocaleController;
+import org.tomato.android.NotificationCenter;
+import org.tomato.android.SendMessagesHelper;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
+import org.tomato.messenger.Utilities;
+import org.tomato.ui.Views.ActionBar.ActionBarLayout;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+
+import java.io.BufferedReader;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.Map;
+
+public class LaunchActivity extends Activity implements ActionBarLayout.ActionBarLayoutDelegate, NotificationCenter.NotificationCenterDelegate, MessagesActivity.MessagesActivityDelegate {
+    private boolean finished = false;
+    private String videoPath = null;
+    private String sendingText = null;
+    private ArrayList<Uri> photoPathsArray = null;
+    private ArrayList<String> documentsPathsArray = null;
+    private ArrayList<String> documentsOriginalPathsArray = null;
+    private ArrayList<TLRPC.User> contactsToSend = null;
+    private int currentConnectionState;
+    private static ArrayList<BaseFragment> mainFragmentsStack = new ArrayList<BaseFragment>();
+    private static ArrayList<BaseFragment> layerFragmentsStack = new ArrayList<BaseFragment>();
+    private static ArrayList<BaseFragment> rightFragmentsStack = new ArrayList<BaseFragment>();
+
+    private ActionBarLayout actionBarLayout = null;
+    private ActionBarLayout layersActionBarLayout = null;
+    private ActionBarLayout rightActionBarLayout = null;
+    private FrameLayout shadowTablet = null;
+    private LinearLayout buttonLayoutTablet = null;
+    private FrameLayout shadowTabletSide = null;
+    private ImageView backgroundTablet = null;
+    private boolean tabletFullSize = false;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        ApplicationLoader.postInitApplication();
+
+        if (!UserConfig.isClientActivated()) {
+            Intent intent = getIntent();
+            if (intent != null && intent.getAction() != null && (Intent.ACTION_SEND.equals(intent.getAction()) || intent.getAction().equals(Intent.ACTION_SEND_MULTIPLE))) {
+                super.onCreate(savedInstanceState);
+                finish();
+                return;
+            }
+            if (intent != null && !intent.getBooleanExtra("fromIntro", false)) {
+                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("logininfo", MODE_PRIVATE);
+                Map<String, ?> state = preferences.getAll();
+                if (state.isEmpty()) {
+                    Intent intent2 = new Intent(this, IntroActivity.class);
+                    startActivity(intent2);
+                    super.onCreate(savedInstanceState);
+                    finish();
+                    return;
+                }
+            }
+        }
+
+        requestWindowFeature(Window.FEATURE_NO_TITLE);
+        setTheme(R.style.Theme_TMessages);
+        getWindow().setBackgroundDrawableResource(R.drawable.transparent);
+
+        super.onCreate(savedInstanceState);
+
+        actionBarLayout = new ActionBarLayout(this);
+        if (AndroidUtilities.isTablet()) {
+            setContentView(R.layout.launch_layout_tablet);
+            shadowTablet = (FrameLayout)findViewById(R.id.shadow_tablet);
+            buttonLayoutTablet = (LinearLayout)findViewById(R.id.launch_button_layout);
+            shadowTabletSide = (FrameLayout)findViewById(R.id.shadow_tablet_side);
+            backgroundTablet = (ImageView)findViewById(R.id.launch_background);
+
+            shadowTablet.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    if (!actionBarLayout.fragmentsStack.isEmpty() && event.getAction() == MotionEvent.ACTION_UP) {
+                        float x = event.getX();
+                        float y = event.getY();
+                        int location[] = new int[2];
+                        layersActionBarLayout.getLocationOnScreen(location);
+                        int viewX = location[0];
+                        int viewY = location[1];
+
+                        if (x > viewX && x < viewX + layersActionBarLayout.getWidth() && y > viewY && y < viewY + layersActionBarLayout.getHeight()) {
+                            return false;
+                        } else {
+                            if (!layersActionBarLayout.fragmentsStack.isEmpty()) {
+                                for (int a = 0; a < layersActionBarLayout.fragmentsStack.size() - 1; a++) {
+                                    layersActionBarLayout.removeFragmentFromStack(layersActionBarLayout.fragmentsStack.get(0));
+                                    a--;
+                                }
+                                layersActionBarLayout.closeLastFragment(true);
+                            }
+                            return true;
+                        }
+                    }
+                    return false;
+                }
+            });
+
+            shadowTablet.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+
+                }
+            });
+
+            RelativeLayout launchLayout = (RelativeLayout)findViewById(R.id.launch_layout);
+
+            layersActionBarLayout = new ActionBarLayout(this);
+            layersActionBarLayout.setBackgroundView(shadowTablet);
+            layersActionBarLayout.setUseAlphaAnimations(true);
+            layersActionBarLayout.setBackgroundResource(R.drawable.boxshadow);
+            launchLayout.addView(layersActionBarLayout);
+            RelativeLayout.LayoutParams relativeLayoutParams = (RelativeLayout.LayoutParams)layersActionBarLayout.getLayoutParams();
+            relativeLayoutParams.width = AndroidUtilities.dp(498);
+            relativeLayoutParams.height = AndroidUtilities.dp(528);
+            relativeLayoutParams.addRule(RelativeLayout.CENTER_IN_PARENT, RelativeLayout.TRUE);
+            layersActionBarLayout.setLayoutParams(relativeLayoutParams);
+            layersActionBarLayout.init(layerFragmentsStack);
+            layersActionBarLayout.setDelegate(this);
+            layersActionBarLayout.setVisibility(View.GONE);
+
+            launchLayout.addView(actionBarLayout, 2);
+            relativeLayoutParams = (RelativeLayout.LayoutParams)actionBarLayout.getLayoutParams();
+            relativeLayoutParams.width = AndroidUtilities.dp(320);
+            relativeLayoutParams.height = RelativeLayout.LayoutParams.MATCH_PARENT;
+            actionBarLayout.setLayoutParams(relativeLayoutParams);
+
+            rightActionBarLayout = new ActionBarLayout(this);
+            launchLayout.addView(rightActionBarLayout, 3);
+            relativeLayoutParams = (RelativeLayout.LayoutParams)rightActionBarLayout.getLayoutParams();
+            relativeLayoutParams.width = AndroidUtilities.dp(320);
+            relativeLayoutParams.height = RelativeLayout.LayoutParams.MATCH_PARENT;
+            rightActionBarLayout.setLayoutParams(relativeLayoutParams);
+            rightActionBarLayout.init(rightFragmentsStack);
+            rightActionBarLayout.setDelegate(this);
+
+            TextView button = (TextView)findViewById(R.id.new_group_button);
+            button.setText(LocaleController.getString("NewGroup", R.string.NewGroup));
+            button.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    presentFragment(new GroupCreateActivity());
+                }
+            });
+
+            button = (TextView)findViewById(R.id.new_secret_button);
+            button.setText(LocaleController.getString("NewSecretChat", R.string.NewSecretChat));
+            button.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    Bundle args = new Bundle();
+                    args.putBoolean("onlyUsers", true);
+                    args.putBoolean("destroyAfterSelect", true);
+                    args.putBoolean("usersAsSections", true);
+                    args.putBoolean("createSecretChat", true);
+                    presentFragment(new ContactsActivity(args));
+                }
+            });
+
+            button = (TextView)findViewById(R.id.new_broadcast_button);
+            button.setText(LocaleController.getString("NewBroadcastList", R.string.NewBroadcastList));
+            button.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    Bundle args = new Bundle();
+                    args.putBoolean("broadcast", true);
+                    presentFragment(new GroupCreateActivity(args));
+                }
+            });
+
+            button = (TextView)findViewById(R.id.contacts_button);
+            button.setText(LocaleController.getString("Contacts", R.string.Contacts));
+            button.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    presentFragment(new ContactsActivity(null));
+                }
+            });
+
+            button = (TextView)findViewById(R.id.settings_button);
+            button.setText(LocaleController.getString("Settings", R.string.Settings));
+            button.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    presentFragment(new SettingsActivity());
+                }
+            });
+        } else {
+            setContentView(actionBarLayout, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
+        }
+        actionBarLayout.init(mainFragmentsStack);
+        actionBarLayout.setDelegate(this);
+
+        int resourceId = getResources().getIdentifier("status_bar_height", "dimen", "android");
+        if (resourceId > 0) {
+            AndroidUtilities.statusBarHeight = getResources().getDimensionPixelSize(resourceId);
+        }
+
+        NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeOtherAppActivities, this);
+        currentConnectionState = ConnectionsManager.getInstance().getConnectionState();
+
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.appDidLogout);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeOtherAppActivities);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.didUpdatedConnectionState);
+
+        if (actionBarLayout.fragmentsStack.isEmpty()) {
+            if (!UserConfig.isClientActivated()) {
+                actionBarLayout.addFragmentToStack(new LoginActivity());
+            } else {
+                actionBarLayout.addFragmentToStack(new MessagesActivity(null));
+            }
+
+            try {
+                if (savedInstanceState != null) {
+                    String fragmentName = savedInstanceState.getString("fragment");
+                    if (fragmentName != null) {
+                        Bundle args = savedInstanceState.getBundle("args");
+                        if (fragmentName.equals("chat")) {
+                            if (args != null) {
+                                ChatActivity chat = new ChatActivity(args);
+                                if (actionBarLayout.addFragmentToStack(chat)) {
+                                    chat.restoreSelfArgs(savedInstanceState);
+                                }
+                            }
+                        } else if (fragmentName.equals("settings")) {
+                            SettingsActivity settings = new SettingsActivity();
+                            actionBarLayout.addFragmentToStack(settings);
+                            settings.restoreSelfArgs(savedInstanceState);
+                        } else if (fragmentName.equals("group")) {
+                            if (args != null) {
+                                GroupCreateFinalActivity group = new GroupCreateFinalActivity(args);
+                                if (actionBarLayout.addFragmentToStack(group)) {
+                                    group.restoreSelfArgs(savedInstanceState);
+                                }
+                            }
+                        } else if (fragmentName.equals("chat_profile")) {
+                            if (args != null) {
+                                ChatProfileActivity profile = new ChatProfileActivity(args);
+                                if (actionBarLayout.addFragmentToStack(profile)) {
+                                    profile.restoreSelfArgs(savedInstanceState);
+                                }
+                            }
+                        } else if (fragmentName.equals("wallpapers")) {
+                            SettingsWallpapersActivity settings = new SettingsWallpapersActivity();
+                            actionBarLayout.addFragmentToStack(settings);
+                            settings.restoreSelfArgs(savedInstanceState);
+                        }
+                    }
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+        }
+
+        handleIntent(getIntent(), false, savedInstanceState != null);
+        needLayout();
+    }
+
+    private void handleIntent(Intent intent, boolean isNew, boolean restore) {
+        boolean pushOpened = false;
+
+        Integer push_user_id = 0;
+        Integer push_chat_id = 0;
+        Integer push_enc_id = 0;
+        Integer open_settings = 0;
+        boolean showDialogsList = false;
+
+        photoPathsArray = null;
+        videoPath = null;
+        sendingText = null;
+        documentsPathsArray = null;
+        documentsOriginalPathsArray = null;
+        contactsToSend = null;
+
+        if ((intent.getFlags() & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) == 0) {
+            if (intent != null && intent.getAction() != null && !restore) {
+                if (Intent.ACTION_SEND.equals(intent.getAction())) {
+                    boolean error = false;
+                    String type = intent.getType();
+                    if (type != null && type.equals("text/plain")) {
+                        String text = intent.getStringExtra(Intent.EXTRA_TEXT);
+                        String subject = intent.getStringExtra(Intent.EXTRA_SUBJECT);
+
+                        if (text != null && text.length() != 0) {
+                            if ((text.startsWith("http://") || text.startsWith("https://")) && subject != null && subject.length() != 0) {
+                                text = subject + "\n" + text;
+                            }
+                            sendingText = text;
+                        } else {
+                            error = true;
+                        }
+                    } else if (type != null && type.equals(ContactsContract.Contacts.CONTENT_VCARD_TYPE)) {
+                        try {
+                            Uri uri = (Uri) intent.getExtras().get(Intent.EXTRA_STREAM);
+                            if (uri != null) {
+                                ContentResolver cr = getContentResolver();
+                                InputStream stream = cr.openInputStream(uri);
+
+                                String name = null;
+                                String nameEncoding = null;
+                                String nameCharset = null;
+                                ArrayList<String> phones = new ArrayList<String>();
+                                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(stream, "UTF-8"));
+                                String line = null;
+                                while ((line = bufferedReader.readLine()) != null) {
+                                    String[] args = line.split(":");
+                                    if (args.length != 2) {
+                                        continue;
+                                    }
+                                    if (args[0].startsWith("FN")) {
+                                        String[] params = args[0].split(";");
+                                        for (String param : params) {
+                                            String[] args2 = param.split("=");
+                                            if (args2.length != 2) {
+                                                continue;
+                                            }
+                                            if (args2[0].equals("CHARSET")) {
+                                                nameCharset = args2[1];
+                                            } else if (args2[0].equals("ENCODING")) {
+                                                nameEncoding = args2[1];
+                                            }
+                                        }
+                                        name = args[1];
+                                        if (nameEncoding != null && nameEncoding.equalsIgnoreCase("QUOTED-PRINTABLE")) {
+                                            while (name.endsWith("=") && nameEncoding != null) {
+                                                name = name.substring(0, name.length() - 1);
+                                                line = bufferedReader.readLine();
+                                                if (line == null) {
+                                                    break;
+                                                }
+                                                name += line;
+                                            }
+                                            byte[] bytes = Utilities.decodeQuotedPrintable(name.getBytes());
+                                            if (bytes != null && bytes.length != 0) {
+                                                String decodedName = new String(bytes, nameCharset);
+                                                if (decodedName != null) {
+                                                    name = decodedName;
+                                                }
+                                            }
+                                        }
+                                    } else if (args[0].startsWith("TEL")) {
+                                        String phone = PhoneFormat.stripExceptNumbers(args[1], true);
+                                        if (phone.length() > 0) {
+                                            phones.add(phone);
+                                        }
+                                    }
+                                }
+                                if (name != null && !phones.isEmpty()) {
+                                    contactsToSend = new ArrayList<TLRPC.User>();
+                                    for (String phone : phones) {
+                                        TLRPC.User user = new TLRPC.TL_userContact();
+                                        user.phone = phone;
+                                        user.first_name = name;
+                                        user.last_name = "";
+                                        user.id = 0;
+                                        contactsToSend.add(user);
+                                    }
+                                }
+                            } else {
+                                error = true;
+                            }
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                            error = true;
+                        }
+                    } else {
+                        Parcelable parcelable = intent.getParcelableExtra(Intent.EXTRA_STREAM);
+                        if (parcelable == null) {
+                            return;
+                        }
+                        String path = null;
+                        if (!(parcelable instanceof Uri)) {
+                            parcelable = Uri.parse(parcelable.toString());
+                        }
+                        Uri uri = (Uri) parcelable;
+                        if (uri != null && type != null && type.startsWith("image/")) {
+                            String tempPath = Utilities.getPath(uri);
+                            if (photoPathsArray == null) {
+                                photoPathsArray = new ArrayList<Uri>();
+                            }
+                            photoPathsArray.add(uri);
+                        } else {
+                            path = Utilities.getPath(uri);
+                            if (path != null) {
+                                if (path.startsWith("file:")) {
+                                    path = path.replace("file://", "");
+                                }
+                                if (type != null && type.startsWith("video/")) {
+                                    videoPath = path;
+                                } else {
+                                    if (documentsPathsArray == null) {
+                                        documentsPathsArray = new ArrayList<String>();
+                                        documentsOriginalPathsArray = new ArrayList<String>();
+                                    }
+                                    documentsPathsArray.add(path);
+                                    documentsOriginalPathsArray.add(uri.toString());
+                                }
+                            } else {
+                                error = true;
+                            }
+                        }
+                        if (error) {
+                            Toast.makeText(this, "Unsupported content", Toast.LENGTH_SHORT).show();
+                        }
+                    }
+                } else if (intent.getAction().equals(Intent.ACTION_SEND_MULTIPLE)) {
+                    boolean error = false;
+                    try {
+                        ArrayList<Parcelable> uris = intent.getParcelableArrayListExtra(Intent.EXTRA_STREAM);
+                        String type = intent.getType();
+                        if (uris != null) {
+                            if (type != null && type.startsWith("image/")) {
+                                for (Parcelable parcelable : uris) {
+                                    if (!(parcelable instanceof Uri)) {
+                                        parcelable = Uri.parse(parcelable.toString());
+                                    }
+                                    Uri uri = (Uri) parcelable;
+                                    if (photoPathsArray == null) {
+                                        photoPathsArray = new ArrayList<Uri>();
+                                    }
+                                    photoPathsArray.add(uri);
+                                }
+                            } else {
+                                for (Parcelable parcelable : uris) {
+                                    if (!(parcelable instanceof Uri)) {
+                                        parcelable = Uri.parse(parcelable.toString());
+                                    }
+                                    String path = Utilities.getPath((Uri) parcelable);
+                                    String originalPath = parcelable.toString();
+                                    if (originalPath == null) {
+                                        originalPath = path;
+                                    }
+                                    if (path != null) {
+                                        if (path.startsWith("file:")) {
+                                            path = path.replace("file://", "");
+                                        }
+                                        if (documentsPathsArray == null) {
+                                            documentsPathsArray = new ArrayList<String>();
+                                            documentsOriginalPathsArray = new ArrayList<String>();
+                                        }
+                                        documentsPathsArray.add(path);
+                                        documentsOriginalPathsArray.add(originalPath);
+                                    }
+                                }
+                            }
+                        } else {
+                            error = true;
+                        }
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                        error = true;
+                    }
+                    if (error) {
+                        Toast.makeText(this, "Unsupported content", Toast.LENGTH_SHORT).show();
+                    }
+                } else if (Intent.ACTION_VIEW.equals(intent.getAction())) {
+                    try {
+                        Cursor cursor = getContentResolver().query(intent.getData(), null, null, null, null);
+                        if (cursor != null) {
+                            if (cursor.moveToFirst()) {
+                                int userId = cursor.getInt(cursor.getColumnIndex("DATA4"));
+                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+                                push_user_id = userId;
+                            }
+                            cursor.close();
+                        }
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                } else if (intent.getAction().equals("org.telegram.messenger.OPEN_ACCOUNT")) {
+                    open_settings = 1;
+                }
+            }
+
+            if (intent.getAction() != null && intent.getAction().startsWith("com.tmessages.openchat") && !restore) {
+                int chatId = intent.getIntExtra("chatId", 0);
+                int userId = intent.getIntExtra("userId", 0);
+                int encId = intent.getIntExtra("encId", 0);
+                if (chatId != 0) {
+                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+                    push_chat_id = chatId;
+                } else if (userId != 0) {
+                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+                    push_user_id = userId;
+                } else if (encId != 0) {
+                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+                    push_enc_id = encId;
+                } else {
+                    showDialogsList = true;
+                }
+            }
+        }
+
+        if (push_user_id != 0) {
+            if (push_user_id == UserConfig.getClientUserId()) {
+                open_settings = 1;
+            } else {
+                Bundle args = new Bundle();
+                args.putInt("user_id", push_user_id);
+                ChatActivity fragment = new ChatActivity(args);
+                if (actionBarLayout.presentFragment(fragment, false, true, true)) {
+                    pushOpened = true;
+                }
+            }
+        } else if (push_chat_id != 0) {
+            Bundle args = new Bundle();
+            args.putInt("chat_id", push_chat_id);
+            ChatActivity fragment = new ChatActivity(args);
+            if (actionBarLayout.presentFragment(fragment, false, true, true)) {
+                pushOpened = true;
+            }
+        } else if (push_enc_id != 0) {
+            Bundle args = new Bundle();
+            args.putInt("enc_id", push_enc_id);
+            ChatActivity fragment = new ChatActivity(args);
+            if (actionBarLayout.presentFragment(fragment, false, true, true)) {
+                pushOpened = true;
+            }
+        } else if (showDialogsList) {
+            if (!AndroidUtilities.isTablet()) {
+                actionBarLayout.removeAllFragments();
+            }
+            pushOpened = false;
+            isNew = false;
+        }
+        if (videoPath != null || photoPathsArray != null || sendingText != null || documentsPathsArray != null || contactsToSend != null) {
+            if (!AndroidUtilities.isTablet()) {
+                NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+            }
+            Bundle args = new Bundle();
+            args.putBoolean("onlySelect", true);
+            args.putString("selectAlertString", LocaleController.getString("SendMessagesTo", R.string.SendMessagesTo));
+            args.putString("selectAlertStringGroup", LocaleController.getString("SendMessagesToGroup", R.string.SendMessagesToGroup));
+            MessagesActivity fragment = new MessagesActivity(args);
+            fragment.setDelegate(this);
+            actionBarLayout.presentFragment(fragment, false, true, true);
+            pushOpened = true;
+            if (PhotoViewer.getInstance().isVisible()) {
+                PhotoViewer.getInstance().closePhoto(false);
+            }
+
+            if (AndroidUtilities.isTablet()) {
+                actionBarLayout.showLastFragment();
+                rightActionBarLayout.showLastFragment();
+            }
+        }
+        if (open_settings != 0) {
+            actionBarLayout.presentFragment(new SettingsActivity(), false, true, true);
+            pushOpened = true;
+        }
+        if (!pushOpened && !isNew) {
+            if (AndroidUtilities.isTablet()) {
+                if (UserConfig.isClientActivated()) {
+                    if (actionBarLayout.fragmentsStack.isEmpty()) {
+                        actionBarLayout.addFragmentToStack(new MessagesActivity(null));
+                    }
+                } else {
+                    if (layersActionBarLayout.fragmentsStack.isEmpty()) {
+                        layersActionBarLayout.addFragmentToStack(new LoginActivity());
+                    }
+                }
+            } else {
+                if (actionBarLayout.fragmentsStack.isEmpty()) {
+                    if (!UserConfig.isClientActivated()) {
+                        actionBarLayout.addFragmentToStack(new LoginActivity());
+                    } else {
+                        actionBarLayout.addFragmentToStack(new MessagesActivity(null));
+                    }
+                }
+            }
+            actionBarLayout.showLastFragment();
+            if (AndroidUtilities.isTablet()) {
+                layersActionBarLayout.showLastFragment();
+                rightActionBarLayout.showLastFragment();
+            }
+        }
+
+        intent.setAction(null);
+    }
+
+    @Override
+    protected void onNewIntent(Intent intent) {
+        super.onNewIntent(intent);
+        handleIntent(intent, true, false);
+    }
+
+    @Override
+    public void didSelectDialog(MessagesActivity messageFragment, long dialog_id, boolean param) {
+        if (dialog_id != 0) {
+            int lower_part = (int)dialog_id;
+            int high_id = (int)(dialog_id >> 32);
+
+            Bundle args = new Bundle();
+            args.putBoolean("scrollToTopOnResume", true);
+            if (!AndroidUtilities.isTablet()) {
+                NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+            }
+            if (lower_part != 0) {
+                if (high_id == 1) {
+                    args.putInt("chat_id", lower_part);
+                } else {
+                    if (lower_part > 0) {
+                        args.putInt("user_id", lower_part);
+                    } else if (lower_part < 0) {
+                        args.putInt("chat_id", -lower_part);
+                    }
+                }
+            } else {
+                args.putInt("enc_id", high_id);
+            }
+            ChatActivity fragment = new ChatActivity(args);
+
+            if (videoPath != null) {
+                if(android.os.Build.VERSION.SDK_INT >= 16) {
+                    if (AndroidUtilities.isTablet()) {
+                        actionBarLayout.presentFragment(fragment, false, true, true);
+                    }
+
+                    if (!AndroidUtilities.isTablet()) {
+                        actionBarLayout.addFragmentToStack(fragment, actionBarLayout.fragmentsStack.size() - 1);
+                    }
+
+                    if (!fragment.openVideoEditor(videoPath, true)) {
+                        if (!AndroidUtilities.isTablet()) {
+                            messageFragment.finishFragment(true);
+                        }
+                    }
+                } else {
+                    actionBarLayout.presentFragment(fragment, true);
+                    SendMessagesHelper.prepareSendingVideo(videoPath, 0, 0, 0, 0, null, dialog_id);
+                }
+            } else {
+                actionBarLayout.presentFragment(fragment, true);
+                if (sendingText != null) {
+                    fragment.processSendingText(sendingText);
+                }
+                if (photoPathsArray != null) {
+                    SendMessagesHelper.prepareSendingPhotos(null, photoPathsArray, dialog_id);
+                }
+                if (documentsPathsArray != null) {
+                    SendMessagesHelper.prepareSendingDocuments(documentsPathsArray, documentsOriginalPathsArray, dialog_id);
+                }
+                if (contactsToSend != null && !contactsToSend.isEmpty()) {
+                    for (TLRPC.User user : contactsToSend) {
+                        SendMessagesHelper.getInstance().sendMessage(user, dialog_id);
+                    }
+                }
+            }
+
+            photoPathsArray = null;
+            videoPath = null;
+            sendingText = null;
+            documentsPathsArray = null;
+            documentsOriginalPathsArray = null;
+            contactsToSend = null;
+        }
+    }
+
+    private void onFinish() {
+        if (finished) {
+            return;
+        }
+        finished = true;
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.appDidLogout);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeOtherAppActivities);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didUpdatedConnectionState);
+    }
+
+    public void presentFragment(BaseFragment fragment) {
+        actionBarLayout.presentFragment(fragment);
+    }
+
+    public boolean presentFragment(final BaseFragment fragment, final boolean removeLast, boolean forceWithoutAnimation) {
+        return actionBarLayout.presentFragment(fragment, removeLast, forceWithoutAnimation, true);
+    }
+
+    public void needLayout() {
+        if (AndroidUtilities.isTablet()) {
+            if (!AndroidUtilities.isSmallTablet() || getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+                tabletFullSize = false;
+                int leftWidth = AndroidUtilities.displaySize.x / 100 * 35;
+                if (leftWidth < AndroidUtilities.dp(320)) {
+                    leftWidth = AndroidUtilities.dp(320);
+                }
+
+                RelativeLayout.LayoutParams relativeLayoutParams = (RelativeLayout.LayoutParams) actionBarLayout.getLayoutParams();
+                relativeLayoutParams.width = leftWidth;
+                relativeLayoutParams.height = RelativeLayout.LayoutParams.MATCH_PARENT;
+                actionBarLayout.setLayoutParams(relativeLayoutParams);
+
+                relativeLayoutParams = (RelativeLayout.LayoutParams) shadowTabletSide.getLayoutParams();
+                relativeLayoutParams.leftMargin = leftWidth;
+                shadowTabletSide.setLayoutParams(relativeLayoutParams);
+
+                relativeLayoutParams = (RelativeLayout.LayoutParams) rightActionBarLayout.getLayoutParams();
+                relativeLayoutParams.width = AndroidUtilities.displaySize.x - leftWidth;
+                relativeLayoutParams.height = RelativeLayout.LayoutParams.MATCH_PARENT;
+                relativeLayoutParams.leftMargin = leftWidth;
+                rightActionBarLayout.setLayoutParams(relativeLayoutParams);
+
+                relativeLayoutParams = (RelativeLayout.LayoutParams) buttonLayoutTablet.getLayoutParams();
+                relativeLayoutParams.width = AndroidUtilities.displaySize.x - leftWidth;
+                relativeLayoutParams.height = RelativeLayout.LayoutParams.WRAP_CONTENT;
+                relativeLayoutParams.leftMargin = leftWidth;
+                buttonLayoutTablet.setLayoutParams(relativeLayoutParams);
+
+                if (AndroidUtilities.isSmallTablet() && actionBarLayout.fragmentsStack.size() == 2) {
+                    BaseFragment chatFragment = actionBarLayout.fragmentsStack.get(1);
+                    chatFragment.onPause();
+                    actionBarLayout.fragmentsStack.remove(1);
+                    actionBarLayout.showLastFragment();
+                    rightActionBarLayout.fragmentsStack.add(chatFragment);
+                    rightActionBarLayout.showLastFragment();
+                }
+
+                rightActionBarLayout.setVisibility(rightActionBarLayout.fragmentsStack.isEmpty() ? View.GONE : View.VISIBLE);
+                buttonLayoutTablet.setVisibility(!actionBarLayout.fragmentsStack.isEmpty() && rightActionBarLayout.fragmentsStack.isEmpty() ? View.VISIBLE : View.GONE);
+                backgroundTablet.setVisibility(rightActionBarLayout.fragmentsStack.isEmpty() ? View.VISIBLE : View.GONE);
+                shadowTabletSide.setVisibility(!actionBarLayout.fragmentsStack.isEmpty() ? View.VISIBLE : View.GONE);
+            } else {
+                tabletFullSize = true;
+
+                RelativeLayout.LayoutParams relativeLayoutParams = (RelativeLayout.LayoutParams) actionBarLayout.getLayoutParams();
+                relativeLayoutParams.width = RelativeLayout.LayoutParams.MATCH_PARENT;
+                relativeLayoutParams.height = RelativeLayout.LayoutParams.MATCH_PARENT;
+                actionBarLayout.setLayoutParams(relativeLayoutParams);
+
+                shadowTabletSide.setVisibility(View.GONE);
+                rightActionBarLayout.setVisibility(View.GONE);
+                backgroundTablet.setVisibility(!actionBarLayout.fragmentsStack.isEmpty() ? View.GONE : View.VISIBLE);
+                buttonLayoutTablet.setVisibility(View.GONE);
+
+                if (rightActionBarLayout.fragmentsStack.size() == 1) {
+                    BaseFragment chatFragment = rightActionBarLayout.fragmentsStack.get(0);
+                    chatFragment.onPause();
+                    rightActionBarLayout.fragmentsStack.remove(0);
+                    actionBarLayout.presentFragment(chatFragment, false, true, false);
+                }
+            }
+        }
+    }
+
+    public void fixLayout() {
+        if (AndroidUtilities.isTablet()) {
+            if (actionBarLayout == null) {
+                return;
+            }
+            actionBarLayout.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
+                @Override
+                public void onGlobalLayout() {
+                    needLayout();
+                    if (actionBarLayout != null) {
+                        if (Build.VERSION.SDK_INT < 16) {
+                            actionBarLayout.getViewTreeObserver().removeGlobalOnLayoutListener(this);
+                        } else {
+                            actionBarLayout.getViewTreeObserver().removeOnGlobalLayoutListener(this);
+                        }
+                    }
+                }
+            });
+        }
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        if (actionBarLayout.fragmentsStack.size() != 0) {
+            BaseFragment fragment = actionBarLayout.fragmentsStack.get(actionBarLayout.fragmentsStack.size() - 1);
+            fragment.onActivityResultFragment(requestCode, resultCode, data);
+        }
+        if (AndroidUtilities.isTablet()) {
+            if (rightActionBarLayout.fragmentsStack.size() != 0) {
+                BaseFragment fragment = rightActionBarLayout.fragmentsStack.get(rightActionBarLayout.fragmentsStack.size() - 1);
+                fragment.onActivityResultFragment(requestCode, resultCode, data);
+            }
+            if (layersActionBarLayout.fragmentsStack.size() != 0) {
+                BaseFragment fragment = layersActionBarLayout.fragmentsStack.get(layersActionBarLayout.fragmentsStack.size() - 1);
+                fragment.onActivityResultFragment(requestCode, resultCode, data);
+            }
+        }
+    }
+
+    @Override
+    protected void onPause() {
+        super.onPause();
+        actionBarLayout.onPause();
+        if (AndroidUtilities.isTablet()) {
+            rightActionBarLayout.onPause();
+            layersActionBarLayout.onPause();
+        }
+        ApplicationLoader.mainInterfacePaused = true;
+        ConnectionsManager.getInstance().setAppPaused(true, false);
+    }
+
+    @Override
+    protected void onDestroy() {
+        PhotoViewer.getInstance().destroyPhotoViewer();
+        SecretPhotoViewer.getInstance().destroyPhotoViewer();
+        super.onDestroy();
+        onFinish();
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        actionBarLayout.onResume();
+        if (AndroidUtilities.isTablet()) {
+            rightActionBarLayout.onResume();
+            layersActionBarLayout.onResume();
+        }
+        Utilities.checkForCrashes(this);
+        Utilities.checkForUpdates(this);
+        ApplicationLoader.mainInterfacePaused = false;
+        ConnectionsManager.getInstance().setAppPaused(false, false);
+        actionBarLayout.getActionBar().setBackOverlayVisible(currentConnectionState != 0);
+    }
+
+    public void resumeActivity (){
+        onResume();
+    }
+
+
+    @Override
+    public void onConfigurationChanged(android.content.res.Configuration newConfig) {
+        AndroidUtilities.checkDisplaySize();
+        super.onConfigurationChanged(newConfig);
+        fixLayout();
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.appDidLogout) {
+            for (BaseFragment fragment : actionBarLayout.fragmentsStack) {
+                fragment.onFragmentDestroy();
+            }
+            actionBarLayout.fragmentsStack.clear();
+            if (AndroidUtilities.isTablet()) {
+                for (BaseFragment fragment : layersActionBarLayout.fragmentsStack) {
+                    fragment.onFragmentDestroy();
+                }
+                layersActionBarLayout.fragmentsStack.clear();
+                for (BaseFragment fragment : rightActionBarLayout.fragmentsStack) {
+                    fragment.onFragmentDestroy();
+                }
+                rightActionBarLayout.fragmentsStack.clear();
+            }
+            Intent intent2 = new Intent(this, IntroActivity.class);
+            startActivity(intent2);
+            onFinish();
+            finish();
+        } else if (id == NotificationCenter.closeOtherAppActivities) {
+            if (args[0] != this) {
+                onFinish();
+            }
+        } else if (id == NotificationCenter.didUpdatedConnectionState) {
+            int state = (Integer)args[0];
+            if (currentConnectionState != state) {
+                FileLog.e("tmessages", "switch to state " + state);
+                currentConnectionState = state;
+                actionBarLayout.getActionBar().setBackOverlayVisible(currentConnectionState != 0);
+            }
+        }
+    }
+
+    @Override
+    protected void onSaveInstanceState(Bundle outState) {
+        try {
+            super.onSaveInstanceState(outState);
+            BaseFragment lastFragment = null;
+            if (AndroidUtilities.isTablet()) {
+                if (!layersActionBarLayout.fragmentsStack.isEmpty()) {
+                    lastFragment = layersActionBarLayout.fragmentsStack.get(layersActionBarLayout.fragmentsStack.size() - 1);
+                } else if (!rightActionBarLayout.fragmentsStack.isEmpty()) {
+                    lastFragment = rightActionBarLayout.fragmentsStack.get(rightActionBarLayout.fragmentsStack.size() - 1);
+                } else if (!actionBarLayout.fragmentsStack.isEmpty()) {
+                    lastFragment = actionBarLayout.fragmentsStack.get(actionBarLayout.fragmentsStack.size() - 1);
+                }
+            } else {
+                if (!actionBarLayout.fragmentsStack.isEmpty()) {
+                    lastFragment = actionBarLayout.fragmentsStack.get(actionBarLayout.fragmentsStack.size() - 1);
+                }
+            }
+
+            if (lastFragment != null) {
+                Bundle args = lastFragment.getArguments();
+                if (lastFragment instanceof ChatActivity && args != null) {
+                    outState.putBundle("args", args);
+                    outState.putString("fragment", "chat");
+                } else if (lastFragment instanceof SettingsActivity) {
+                    outState.putString("fragment", "settings");
+                } else if (lastFragment instanceof GroupCreateFinalActivity && args != null) {
+                    outState.putBundle("args", args);
+                    outState.putString("fragment", "group");
+                } else if (lastFragment instanceof SettingsWallpapersActivity) {
+                    outState.putString("fragment", "wallpapers");
+                } else if (lastFragment instanceof ChatProfileActivity && args != null) {
+                    outState.putBundle("args", args);
+                    outState.putString("fragment", "chat_profile");
+                }
+                lastFragment.saveSelfArgs(outState);
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+    }
+
+    @Override
+    public void onBackPressed() {
+        if (PhotoViewer.getInstance().isVisible()) {
+            PhotoViewer.getInstance().closePhoto(true);
+        } else {
+            if (AndroidUtilities.isTablet()) {
+                if (layersActionBarLayout.getVisibility() == View.VISIBLE) {
+                    layersActionBarLayout.onBackPressed();
+                } else {
+                    boolean cancel = false;
+                    if (rightActionBarLayout.getVisibility() == View.VISIBLE && !rightActionBarLayout.fragmentsStack.isEmpty()) {
+                        BaseFragment lastFragment = rightActionBarLayout.fragmentsStack.get(rightActionBarLayout.fragmentsStack.size() - 1);
+                        cancel = !lastFragment.onBackPressed();
+                    }
+                    if (!cancel) {
+                        actionBarLayout.onBackPressed();
+                    }
+                }
+            } else {
+                actionBarLayout.onBackPressed();
+            }
+        }
+    }
+
+    @Override
+    public void onLowMemory() {
+        super.onLowMemory();
+        actionBarLayout.onLowMemory();
+        if (AndroidUtilities.isTablet()) {
+            rightActionBarLayout.onLowMemory();
+            layersActionBarLayout.onLowMemory();
+        }
+    }
+
+    @Override
+    public void onActionModeStarted(ActionMode mode) {
+        super.onActionModeStarted(mode);
+        actionBarLayout.onActionModeStarted(mode);
+        if (AndroidUtilities.isTablet()) {
+            rightActionBarLayout.onActionModeStarted(mode);
+            layersActionBarLayout.onActionModeStarted(mode);
+        }
+    }
+
+    @Override
+    public void onActionModeFinished(ActionMode mode) {
+        super.onActionModeFinished(mode);
+        actionBarLayout.onActionModeFinished(mode);
+        if (AndroidUtilities.isTablet()) {
+            rightActionBarLayout.onActionModeFinished(mode);
+            layersActionBarLayout.onActionModeFinished(mode);
+        }
+    }
+
+    @Override
+    public boolean onPreIme() {
+        if (PhotoViewer.getInstance().isVisible()) {
+            PhotoViewer.getInstance().closePhoto(true);
+            return true;
+        }
+        return false;
+    }
+
+    @Override
+    public void onOverlayShow(View view, BaseFragment fragment) {
+        if (view == null || fragment == null || actionBarLayout.fragmentsStack.isEmpty()) {
+            return;
+        }
+        View backStatusButton = view.findViewById(R.id.back_button);
+        TextView statusText = (TextView)view.findViewById(R.id.status_text);
+        backStatusButton.setVisibility(actionBarLayout.fragmentsStack.get(0) == fragment ? View.GONE : View.VISIBLE);
+        view.setEnabled(actionBarLayout.fragmentsStack.get(0) != fragment);
+        if (currentConnectionState == 1) {
+            statusText.setText(LocaleController.getString("WaitingForNetwork", R.string.WaitingForNetwork));
+        } else if (currentConnectionState == 2) {
+            statusText.setText(LocaleController.getString("Connecting", R.string.Connecting));
+        } else if (currentConnectionState == 3) {
+            statusText.setText(LocaleController.getString("Updating", R.string.Updating));
+        }
+    }
+
+    @Override
+    public boolean onKeyUp(int keyCode, KeyEvent event) {
+        if (AndroidUtilities.isTablet()) {
+            if (layersActionBarLayout.getVisibility() == View.VISIBLE && !layersActionBarLayout.fragmentsStack.isEmpty()) {
+                layersActionBarLayout.onKeyUp(keyCode, event);
+            } else if (rightActionBarLayout.getVisibility() == View.VISIBLE && !rightActionBarLayout.fragmentsStack.isEmpty()) {
+                rightActionBarLayout.onKeyUp(keyCode, event);
+            } else {
+                actionBarLayout.onKeyUp(keyCode, event);
+            }
+        } else {
+            actionBarLayout.onKeyUp(keyCode, event);
+        }
+        return super.onKeyUp(keyCode, event);
+    }
+
+    @Override
+    public boolean needPresentFragment(BaseFragment fragment, boolean removeLast, boolean forceWithoutAnimation, ActionBarLayout layout) {
+        if (AndroidUtilities.isTablet()) {
+            if (fragment instanceof MessagesActivity) {
+                MessagesActivity messagesActivity = (MessagesActivity)fragment;
+                if (messagesActivity.getDelegate() == null && layout != actionBarLayout) {
+                    actionBarLayout.removeAllFragments();
+                    actionBarLayout.presentFragment(fragment, removeLast, forceWithoutAnimation, false);
+                    layersActionBarLayout.removeAllFragments();
+                    layersActionBarLayout.setVisibility(View.GONE);
+                    if (!tabletFullSize) {
+                        shadowTabletSide.setVisibility(View.VISIBLE);
+                        if (rightActionBarLayout.fragmentsStack.isEmpty()) {
+                            buttonLayoutTablet.setVisibility(View.VISIBLE);
+                            backgroundTablet.setVisibility(View.VISIBLE);
+                        }
+                    }
+                    return false;
+                }
+            }
+            if (fragment instanceof ChatActivity) {
+                if (!tabletFullSize && layout != rightActionBarLayout) {
+                    rightActionBarLayout.setVisibility(View.VISIBLE);
+                    buttonLayoutTablet.setVisibility(View.GONE);
+                    backgroundTablet.setVisibility(View.GONE);
+                    rightActionBarLayout.removeAllFragments();
+                    rightActionBarLayout.presentFragment(fragment, removeLast, true, false);
+                    if (!layersActionBarLayout.fragmentsStack.isEmpty()) {
+                        for (int a = 0; a < layersActionBarLayout.fragmentsStack.size() - 1; a++) {
+                            layersActionBarLayout.removeFragmentFromStack(layersActionBarLayout.fragmentsStack.get(0));
+                            a--;
+                        }
+                        layersActionBarLayout.closeLastFragment(!forceWithoutAnimation);
+                    }
+                    return false;
+                } else if (tabletFullSize && layout != actionBarLayout) {
+                    actionBarLayout.presentFragment(fragment, actionBarLayout.fragmentsStack.size() > 1, forceWithoutAnimation, false);
+                    if (!layersActionBarLayout.fragmentsStack.isEmpty()) {
+                        for (int a = 0; a < layersActionBarLayout.fragmentsStack.size() - 1; a++) {
+                            layersActionBarLayout.removeFragmentFromStack(layersActionBarLayout.fragmentsStack.get(0));
+                            a--;
+                        }
+                        layersActionBarLayout.closeLastFragment(!forceWithoutAnimation);
+                    }
+                    return false;
+                } else {
+                    if (!layersActionBarLayout.fragmentsStack.isEmpty()) {
+                        for (int a = 0; a < layersActionBarLayout.fragmentsStack.size() - 1; a++) {
+                            layersActionBarLayout.removeFragmentFromStack(layersActionBarLayout.fragmentsStack.get(0));
+                            a--;
+                        }
+                        layersActionBarLayout.closeLastFragment(!forceWithoutAnimation);
+                    }
+                    if (actionBarLayout.fragmentsStack.size() > 1) {
+                        actionBarLayout.presentFragment(fragment, actionBarLayout.fragmentsStack.size() > 1, forceWithoutAnimation, false);
+                        return false;
+                    }
+                }
+            } else if (layout != layersActionBarLayout) {
+                layersActionBarLayout.setVisibility(View.VISIBLE);
+                if (fragment instanceof LoginActivity) {
+                    buttonLayoutTablet.setVisibility(View.GONE);
+                    backgroundTablet.setVisibility(View.VISIBLE);
+                    shadowTabletSide.setVisibility(View.GONE);
+                    shadowTablet.setBackgroundColor(0x00000000);
+                } else {
+                    shadowTablet.setBackgroundColor(0x7F000000);
+                }
+                layersActionBarLayout.presentFragment(fragment, removeLast, forceWithoutAnimation, false);
+                return false;
+            }
+            return true;
+        } else {
+            return true;
+        }
+    }
+
+    @Override
+    public boolean needAddFragmentToStack(BaseFragment fragment, ActionBarLayout layout) {
+        if (AndroidUtilities.isTablet()) {
+            if (fragment instanceof MessagesActivity) {
+                MessagesActivity messagesActivity = (MessagesActivity)fragment;
+                if (messagesActivity.getDelegate() == null && layout != actionBarLayout) {
+                    actionBarLayout.removeAllFragments();
+                    actionBarLayout.addFragmentToStack(fragment);
+                    layersActionBarLayout.removeAllFragments();
+                    layersActionBarLayout.setVisibility(View.GONE);
+                    if (!tabletFullSize) {
+                        shadowTabletSide.setVisibility(View.VISIBLE);
+                        if (rightActionBarLayout.fragmentsStack.isEmpty()) {
+                            buttonLayoutTablet.setVisibility(View.VISIBLE);
+                            backgroundTablet.setVisibility(View.VISIBLE);
+                        }
+                    }
+                    return false;
+                }
+            } else if (fragment instanceof ChatActivity) {
+                if (!tabletFullSize && layout != rightActionBarLayout) {
+                    rightActionBarLayout.setVisibility(View.VISIBLE);
+                    buttonLayoutTablet.setVisibility(View.GONE);
+                    backgroundTablet.setVisibility(View.GONE);
+                    rightActionBarLayout.removeAllFragments();
+                    rightActionBarLayout.addFragmentToStack(fragment);
+                    if (!layersActionBarLayout.fragmentsStack.isEmpty()) {
+                        for (int a = 0; a < layersActionBarLayout.fragmentsStack.size() - 1; a++) {
+                            layersActionBarLayout.removeFragmentFromStack(layersActionBarLayout.fragmentsStack.get(0));
+                            a--;
+                        }
+                        layersActionBarLayout.closeLastFragment(true);
+                    }
+                    return false;
+                } else if (tabletFullSize && layout != actionBarLayout) {
+                    actionBarLayout.addFragmentToStack(fragment);
+                    if (!layersActionBarLayout.fragmentsStack.isEmpty()) {
+                        for (int a = 0; a < layersActionBarLayout.fragmentsStack.size() - 1; a++) {
+                            layersActionBarLayout.removeFragmentFromStack(layersActionBarLayout.fragmentsStack.get(0));
+                            a--;
+                        }
+                        layersActionBarLayout.closeLastFragment(true);
+                    }
+                    return false;
+                }
+            } else if (layout != layersActionBarLayout) {
+                layersActionBarLayout.setVisibility(View.VISIBLE);
+                if (fragment instanceof LoginActivity) {
+                    buttonLayoutTablet.setVisibility(View.GONE);
+                    backgroundTablet.setVisibility(View.VISIBLE);
+                    shadowTabletSide.setVisibility(View.GONE);
+                    shadowTablet.setBackgroundColor(0x00000000);
+                } else {
+                    shadowTablet.setBackgroundColor(0x7F000000);
+                }
+                layersActionBarLayout.addFragmentToStack(fragment);
+                return false;
+            }
+            return true;
+        } else {
+            return true;
+        }
+    }
+
+    @Override
+    public boolean needCloseLastFragment(ActionBarLayout layout) {
+        if (AndroidUtilities.isTablet()) {
+            if (layout == actionBarLayout && layout.fragmentsStack.size() <= 1) {
+                onFinish();
+                finish();
+                return false;
+            } else if (layout == rightActionBarLayout) {
+                if (!tabletFullSize) {
+                    buttonLayoutTablet.setVisibility(View.VISIBLE);
+                    backgroundTablet.setVisibility(View.VISIBLE);
+                }
+            } else if (layout == layersActionBarLayout && actionBarLayout.fragmentsStack.isEmpty() && layersActionBarLayout.fragmentsStack.size() == 1) {
+                onFinish();
+                finish();
+                return false;
+            }
+        } else {
+            if (layout.fragmentsStack.size() <= 1) {
+                onFinish();
+                finish();
+                return false;
+            }
+        }
+        return true;
+    }
+
+    @Override
+    public void onRebuildAllFragments(ActionBarLayout layout) {
+        if (AndroidUtilities.isTablet()) {
+            if (layout == layersActionBarLayout) {
+                rightActionBarLayout.rebuildAllFragmentViews(true);
+                rightActionBarLayout.showLastFragment();
+                actionBarLayout.rebuildAllFragmentViews(true);
+                actionBarLayout.showLastFragment();
+
+                TextView button = (TextView)findViewById(R.id.new_group_button);
+                button.setText(LocaleController.getString("NewGroup", R.string.NewGroup));
+                button = (TextView)findViewById(R.id.new_secret_button);
+                button.setText(LocaleController.getString("NewSecretChat", R.string.NewSecretChat));
+                button = (TextView)findViewById(R.id.new_broadcast_button);
+                button.setText(LocaleController.getString("NewBroadcastList", R.string.NewBroadcastList));
+                button = (TextView)findViewById(R.id.contacts_button);
+                button.setText(LocaleController.getString("Contacts", R.string.Contacts));
+                button = (TextView)findViewById(R.id.settings_button);
+                button.setText(LocaleController.getString("Settings", R.string.Settings));
+            }
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/LocationActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/LocationActivity.java
new file mode 100644
index 000000000..c5e6d85e9
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/LocationActivity.java
@@ -0,0 +1,371 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.content.Context;
+import android.location.Location;
+import android.location.LocationManager;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import com.google.android.gms.maps.CameraUpdate;
+import com.google.android.gms.maps.CameraUpdateFactory;
+import com.google.android.gms.maps.GoogleMap;
+import com.google.android.gms.maps.MapView;
+import com.google.android.gms.maps.MapsInitializer;
+import com.google.android.gms.maps.model.BitmapDescriptorFactory;
+import com.google.android.gms.maps.model.LatLng;
+import com.google.android.gms.maps.model.Marker;
+import com.google.android.gms.maps.model.MarkerOptions;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.ContactsController;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MessageObject;
+import org.tomato.android.MessagesController;
+import org.tomato.android.NotificationCenter;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.ui.Views.ActionBar.ActionBarLayer;
+import org.tomato.ui.Views.ActionBar.ActionBarMenu;
+import org.tomato.ui.Views.ActionBar.ActionBarMenuItem;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+import org.tomato.ui.Views.BackupImageView;
+
+import java.util.List;
+
+public class LocationActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+    private GoogleMap googleMap;
+    private TextView distanceTextView;
+    private Marker userMarker;
+    private Location myLocation;
+    private Location userLocation;
+    private MessageObject messageObject;
+    private BackupImageView avatarImageView;
+    private TextView nameTextView;
+    private boolean userLocationMoved = false;
+    private boolean firstWas = false;
+    private MapView mapView;
+    private LocationActivityDelegate delegate;
+
+    private final static int map_to_my_location = 1;
+    private final static int map_list_menu_map = 2;
+    private final static int map_list_menu_satellite = 3;
+    private final static int map_list_menu_hybrid = 4;
+
+    public static interface LocationActivityDelegate {
+        public abstract void didSelectLocation(double latitude, double longitude);
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+        swipeBackEnabled = false;
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeChats);
+        if (messageObject != null) {
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
+        }
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
+        if (mapView != null) {
+            mapView.onDestroy();
+        }
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
+            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
+            if (messageObject != null) {
+                actionBarLayer.setTitle(LocaleController.getString("ChatLocation", R.string.ChatLocation));
+            } else {
+                actionBarLayer.setTitle(LocaleController.getString("ShareLocation", R.string.ShareLocation));
+            }
+
+            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    } else if (id == map_list_menu_map) {
+                        if (googleMap != null) {
+                            googleMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);
+                        }
+                    } else if (id == map_list_menu_satellite) {
+                        if (googleMap != null) {
+                            googleMap.setMapType(GoogleMap.MAP_TYPE_SATELLITE);
+                        }
+                    } else if (id == map_list_menu_hybrid) {
+                        if (googleMap != null) {
+                            googleMap.setMapType(GoogleMap.MAP_TYPE_HYBRID);
+                        }
+                    } else if (id == map_to_my_location) {
+                        if (myLocation != null) {
+                            LatLng latLng = new LatLng(myLocation.getLatitude(), myLocation.getLongitude());
+                            if (googleMap != null) {
+                                CameraUpdate position = CameraUpdateFactory.newLatLngZoom(latLng, googleMap.getMaxZoomLevel() - 8);
+                                googleMap.animateCamera(position);
+                            }
+                        }
+                    }
+                }
+            });
+
+            ActionBarMenu menu = actionBarLayer.createMenu();
+            menu.addItem(map_to_my_location, R.drawable.ic_ab_location);
+
+            ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_other);
+            item.addSubItem(map_list_menu_map, LocaleController.getString("Map", R.string.Map), 0);
+            item.addSubItem(map_list_menu_satellite, LocaleController.getString("Satellite", R.string.Satellite), 0);
+            item.addSubItem(map_list_menu_hybrid, LocaleController.getString("Hybrid", R.string.Hybrid), 0);
+
+            if (messageObject != null) {
+                fragmentView = inflater.inflate(R.layout.location_view_layout, container, false);
+            } else {
+                fragmentView = inflater.inflate(R.layout.location_attach_layout, container, false);
+            }
+
+            avatarImageView = (BackupImageView)fragmentView.findViewById(R.id.location_avatar_view);
+            if (avatarImageView != null) {
+                avatarImageView.processDetach = false;
+            }
+            nameTextView = (TextView)fragmentView.findViewById(R.id.location_name_label);
+            distanceTextView = (TextView)fragmentView.findViewById(R.id.location_distance_label);
+            View bottomView = fragmentView.findViewById(R.id.location_bottom_view);
+            TextView sendButton = (TextView) fragmentView.findViewById(R.id.location_send_button);
+            if (sendButton != null) {
+                sendButton.setText(LocaleController.getString("SendLocation", R.string.SendLocation));
+            }
+
+            mapView = (MapView)fragmentView.findViewById(R.id.map_view);
+            mapView.onCreate(null);
+            try {
+                MapsInitializer.initialize(getParentActivity());
+                googleMap = mapView.getMap();
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+
+            if (googleMap != null) {
+                googleMap.setMyLocationEnabled(true);
+                googleMap.getUiSettings().setMyLocationButtonEnabled(false);
+                googleMap.getUiSettings().setZoomControlsEnabled(false);
+                googleMap.getUiSettings().setCompassEnabled(false);
+                googleMap.setOnMyLocationChangeListener(new GoogleMap.OnMyLocationChangeListener() {
+                    @Override
+                    public void onMyLocationChange(Location location) {
+                        positionMarker(location);
+                    }
+                });
+                myLocation = getLastLocation();
+
+                if (sendButton != null) {
+                    userLocation = new Location("network");
+                    userLocation.setLatitude(20.659322);
+                    userLocation.setLongitude(-11.406250);
+                    LatLng latLng = new LatLng(20.659322, -11.406250);
+                    userMarker = googleMap.addMarker(new MarkerOptions().position(latLng).icon(BitmapDescriptorFactory.fromResource(R.drawable.map_pin)).draggable(true));
+
+                    sendButton.setOnClickListener(new View.OnClickListener() {
+                        @Override
+                        public void onClick(View view) {
+                            if (delegate != null) {
+                                delegate.didSelectLocation(userLocation.getLatitude(), userLocation.getLongitude());
+                            }
+                            finishFragment();
+                        }
+                    });
+
+                    googleMap.setOnMarkerDragListener(new GoogleMap.OnMarkerDragListener() {
+                        @Override
+                        public void onMarkerDragStart(Marker marker) {
+                        }
+
+                        @Override
+                        public void onMarkerDrag(Marker marker) {
+                            userLocationMoved = true;
+                        }
+
+                        @Override
+                        public void onMarkerDragEnd(Marker marker) {
+                            LatLng latLng = marker.getPosition();
+                            userLocation.setLatitude(latLng.latitude);
+                            userLocation.setLongitude(latLng.longitude);
+                        }
+                    });
+                }
+
+                if (bottomView != null) {
+                    bottomView.setOnClickListener(new View.OnClickListener() {
+                        @Override
+                        public void onClick(View view) {
+                            if (userLocation != null) {
+                                LatLng latLng = new LatLng(userLocation.getLatitude(), userLocation.getLongitude());
+                                CameraUpdate position = CameraUpdateFactory.newLatLngZoom(latLng, googleMap.getMaxZoomLevel() - 8);
+                                googleMap.animateCamera(position);
+                            }
+                        }
+                    });
+                }
+
+                if (messageObject != null) {
+                    int fromId = messageObject.messageOwner.from_id;
+                    if (messageObject.messageOwner instanceof TLRPC.TL_messageForwarded) {
+                        fromId = messageObject.messageOwner.fwd_from_id;
+                    }
+                    TLRPC.User user = MessagesController.getInstance().getUser(fromId);
+                    if (user != null) {
+                        TLRPC.FileLocation photo = null;
+                        if (user.photo != null) {
+                            photo = user.photo.photo_small;
+                        }
+                        avatarImageView.setImage(photo, "50_50", AndroidUtilities.getUserAvatarForId(user.id));
+                        nameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
+                    }
+                    userLocation = new Location("network");
+                    userLocation.setLatitude(messageObject.messageOwner.media.geo.lat);
+                    userLocation.setLongitude(messageObject.messageOwner.media.geo._long);
+                    LatLng latLng = new LatLng(userLocation.getLatitude(), userLocation.getLongitude());
+                    userMarker = googleMap.addMarker(new MarkerOptions().position(latLng).
+                            icon(BitmapDescriptorFactory.fromResource(R.drawable.map_pin)));
+                    CameraUpdate position = CameraUpdateFactory.newLatLngZoom(latLng, googleMap.getMaxZoomLevel() - 8);
+                    googleMap.moveCamera(position);
+                }
+
+                positionMarker(myLocation);
+            }
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    private Location getLastLocation() {
+        LocationManager lm = (LocationManager) ApplicationLoader.applicationContext.getSystemService(Context.LOCATION_SERVICE);
+        List<String> providers = lm.getProviders(true);
+        Location l = null;
+        for (int i = providers.size() - 1; i >= 0; i--) {
+            l = lm.getLastKnownLocation(providers.get(i));
+            if (l != null) {
+                break;
+            }
+        }
+        return l;
+    }
+
+    private void updateUserData() {
+        if (messageObject != null && avatarImageView != null) {
+            int fromId = messageObject.messageOwner.from_id;
+            if (messageObject.messageOwner instanceof TLRPC.TL_messageForwarded) {
+                fromId = messageObject.messageOwner.fwd_from_id;
+            }
+            TLRPC.User user = MessagesController.getInstance().getUser(fromId);
+            if (user != null) {
+                TLRPC.FileLocation photo = null;
+                if (user.photo != null) {
+                    photo = user.photo.photo_small;
+                }
+                avatarImageView.setImage(photo, null, AndroidUtilities.getUserAvatarForId(user.id));
+                nameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
+            }
+        }
+    }
+
+    private void positionMarker(Location location) {
+        if (location == null) {
+            return;
+        }
+        myLocation = location;
+        if (messageObject != null) {
+            if (userLocation != null && distanceTextView != null) {
+                float distance = location.distanceTo(userLocation);
+                if (distance < 1000) {
+                    distanceTextView.setText(String.format("%d %s", (int)(distance), LocaleController.getString("MetersAway", R.string.MetersAway)));
+                } else {
+                    distanceTextView.setText(String.format("%.2f %s", distance / 1000.0f, LocaleController.getString("KMetersAway", R.string.KMetersAway)));
+                }
+            }
+        } else {
+            if (!userLocationMoved && googleMap != null) {
+                userLocation = location;
+                LatLng latLng = new LatLng(location.getLatitude(), location.getLongitude());
+                userMarker.setPosition(latLng);
+                if (firstWas) {
+                    CameraUpdate position = CameraUpdateFactory.newLatLng(latLng);
+                    googleMap.animateCamera(position);
+                } else {
+                    firstWas = true;
+                    CameraUpdate position = CameraUpdateFactory.newLatLngZoom(latLng, googleMap.getMaxZoomLevel() - 8);
+                    googleMap.moveCamera(position);
+                }
+            }
+        }
+    }
+
+    public void setMessageObject(MessageObject message) {
+        messageObject = message;
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.updateInterfaces) {
+            int mask = (Integer)args[0];
+            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
+                updateUserData();
+            }
+        } else if (id == NotificationCenter.closeChats) {
+            removeSelfFromStack();
+        }
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        if (mapView != null) {
+            try {
+                mapView.onPause();
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (mapView != null) {
+            mapView.onResume();
+        }
+    }
+
+    @Override
+    public void onLowMemory() {
+        super.onLowMemory();
+        if (mapView != null) {
+            mapView.onLowMemory();
+        }
+    }
+
+    public void setDelegate(LocationActivityDelegate delegate) {
+        this.delegate = delegate;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/LoginActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/LoginActivity.java
new file mode 100644
index 000000000..4b8643276
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/LoginActivity.java
@@ -0,0 +1,339 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.animation.Animator;
+import android.app.AlertDialog;
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.animation.AccelerateDecelerateInterpolator;
+import android.widget.FrameLayout;
+import android.widget.ScrollView;
+import android.widget.TextView;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.LocaleController;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.ui.Views.ActionBar.ActionBarLayer;
+import org.tomato.ui.Views.ActionBar.ActionBarMenu;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+import org.tomato.ui.Views.SlideView;
+
+import java.util.Map;
+import java.util.Set;
+
+public class LoginActivity extends BaseFragment implements SlideView.SlideViewDelegate {
+    private int currentViewNum = 0;
+    private SlideView[] views = new SlideView[3];
+    private ProgressDialog progressDialog;
+
+    private final static int done_button = 1;
+
+    @Override
+    public boolean onFragmentCreate() {
+        return super.onFragmentCreate();
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        for (SlideView v : views) {
+            if (v != null) {
+                v.onDestroyActivity();
+            }
+        }
+        if (progressDialog != null) {
+            try {
+                progressDialog.dismiss();
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            progressDialog = null;
+        }
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setDisplayUseLogoEnabled(true, R.drawable.ic_ab_logo);
+            actionBarLayer.setTitle(LocaleController.getString("AppName", R.string.AppName));
+
+            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == done_button) {
+                        onNextAction();
+                    }
+                }
+            });
+
+            ActionBarMenu menu = actionBarLayer.createMenu();
+            View doneItem = menu.addItemResource(done_button, R.layout.group_create_done_layout);
+            TextView doneTextView = (TextView)doneItem.findViewById(R.id.done_button);
+            doneTextView.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
+
+            fragmentView = inflater.inflate(R.layout.login_layout, container, false);
+
+            views[0] = (SlideView)fragmentView.findViewById(R.id.login_page1);
+            views[1] = (SlideView)fragmentView.findViewById(R.id.login_page2);
+            views[2] = (SlideView)fragmentView.findViewById(R.id.login_page3);
+
+            try {
+                if (views[0] == null || views[1] == null || views[2] == null) {
+                    FrameLayout parent = (FrameLayout)((ScrollView) fragmentView).getChildAt(0);
+                    for (int a = 0; a < views.length; a++) {
+                        if (views[a] == null) {
+                            views[a] = (SlideView)parent.getChildAt(a);
+                        }
+                    }
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+
+            actionBarLayer.setTitle(views[0].getHeaderName());
+
+            Bundle savedInstanceState = loadCurrentState();
+            if (savedInstanceState != null) {
+                currentViewNum = savedInstanceState.getInt("currentViewNum", 0);
+            }
+            for (int a = 0; a < views.length; a++) {
+                SlideView v = views[a];
+                if (v != null) {
+                    if (savedInstanceState != null) {
+                        v.restoreStateParams(savedInstanceState);
+                    }
+                    v.delegate = this;
+                    v.setVisibility(currentViewNum == a ? View.VISIBLE : View.GONE);
+                }
+            }
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    private void saveCurrentState() {
+        try {
+            Bundle bundle = new Bundle();
+            bundle.putInt("currentViewNum", currentViewNum);
+            for (int a = 0; a <= currentViewNum; a++) {
+                SlideView v = views[a];
+                if (v != null) {
+                    v.saveStateParams(bundle);
+                }
+            }
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("logininfo", Context.MODE_PRIVATE);
+            SharedPreferences.Editor editor = preferences.edit();
+            editor.clear();
+            putBundleToEditor(bundle, editor, null);
+            editor.commit();
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+    }
+
+    private Bundle loadCurrentState() {
+        try {
+            Bundle bundle = new Bundle();
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("logininfo", Context.MODE_PRIVATE);
+            Map<String, ?> params = preferences.getAll();
+            for (Map.Entry<String, ?> entry : params.entrySet()) {
+                String key = entry.getKey();
+                Object value = entry.getValue();
+                String[] args = key.split("_\\|_");
+                if (args.length == 1) {
+                    if (value instanceof String) {
+                        bundle.putString(key, (String) value);
+                    } else if (value instanceof Integer) {
+                        bundle.putInt(key, (Integer) value);
+                    }
+                } else if (args.length == 2) {
+                    Bundle inner = bundle.getBundle(args[0]);
+                    if (inner == null) {
+                        inner = new Bundle();
+                        bundle.putBundle(args[0], inner);
+                    }
+                    if (value instanceof String) {
+                        inner.putString(args[1], (String) value);
+                    } else if (value instanceof Integer) {
+                        inner.putInt(args[1], (Integer) value);
+                    }
+                }
+            }
+            return bundle;
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        return null;
+    }
+
+    private void clearCurrentState() {
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("logininfo", Context.MODE_PRIVATE);
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.clear();
+        editor.commit();
+    }
+
+    private void putBundleToEditor(Bundle bundle, SharedPreferences.Editor editor, String prefix) {
+        Set<String> keys = bundle.keySet();
+        for (String key : keys) {
+            Object obj = bundle.get(key);
+            if (obj instanceof String) {
+                if (prefix != null) {
+                    editor.putString(prefix + "_|_" + key, (String) obj);
+                } else {
+                    editor.putString(key, (String) obj);
+                }
+            } else if (obj instanceof Integer) {
+                if (prefix != null) {
+                    editor.putInt(prefix + "_|_" + key, (Integer) obj);
+                } else {
+                    editor.putInt(key, (Integer) obj);
+                }
+            } else if (obj instanceof Bundle) {
+                putBundleToEditor((Bundle)obj, editor, key);
+            }
+        }
+    }
+
+    @Override
+    public boolean onBackPressed() {
+        if (currentViewNum == 0) {
+            for (SlideView v : views) {
+                if (v != null) {
+                    v.onDestroyActivity();
+                }
+            }
+            return true;
+        } else if (currentViewNum != 1 && currentViewNum != 2) {
+            setPage(0, true, null, true);
+        }
+        return false;
+    }
+
+    @Override
+    public void needShowAlert(final String text) {
+        if (text == null || getParentActivity() == null) {
+            return;
+        }
+        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+        builder.setMessage(text);
+        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
+        showAlertDialog(builder);
+    }
+
+    @Override
+    public void needShowProgress() {
+        if (getParentActivity() == null || getParentActivity().isFinishing() || progressDialog != null) {
+            return;
+        }
+        progressDialog = new ProgressDialog(getParentActivity());
+        progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
+        progressDialog.setCanceledOnTouchOutside(false);
+        progressDialog.setCancelable(false);
+        progressDialog.show();
+    }
+
+    @Override
+    public void needHideProgress() {
+        if (progressDialog == null) {
+            return;
+        }
+        try {
+            progressDialog.dismiss();
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        progressDialog = null;
+    }
+
+    public void setPage(int page, boolean animated, Bundle params, boolean back) {
+        if(android.os.Build.VERSION.SDK_INT > 13) {
+            final SlideView outView = views[currentViewNum];
+            final SlideView newView = views[page];
+            currentViewNum = page;
+
+            newView.setParams(params);
+            actionBarLayer.setTitle(newView.getHeaderName());
+            newView.onShow();
+            newView.setX(back ? -AndroidUtilities.displaySize.x : AndroidUtilities.displaySize.x);
+            outView.animate().setInterpolator(new AccelerateDecelerateInterpolator()).setListener(new Animator.AnimatorListener() {
+                @Override
+                public void onAnimationStart(Animator animator) {
+                }
+
+                @Override
+                public void onAnimationEnd(Animator animator) {
+                    outView.setVisibility(View.GONE);
+                    outView.setX(0);
+                }
+
+                @Override
+                public void onAnimationCancel(Animator animator) {
+                }
+
+                @Override
+                public void onAnimationRepeat(Animator animator) {
+                }
+            }).setDuration(300).translationX(back ? AndroidUtilities.displaySize.x : -AndroidUtilities.displaySize.x).start();
+            newView.animate().setInterpolator(new AccelerateDecelerateInterpolator()).setListener(new Animator.AnimatorListener() {
+                @Override
+                public void onAnimationStart(Animator animator) {
+                    newView.setVisibility(View.VISIBLE);
+                }
+
+                @Override
+                public void onAnimationEnd(Animator animator) {
+                }
+
+                @Override
+                public void onAnimationCancel(Animator animator) {
+                }
+
+                @Override
+                public void onAnimationRepeat(Animator animator) {
+                }
+            }).setDuration(300).translationX(0).start();
+        } else {
+            views[currentViewNum].setVisibility(View.GONE);
+            currentViewNum = page;
+            views[page].setParams(params);
+            views[page].setVisibility(View.VISIBLE);
+            actionBarLayer.setTitle(views[page].getHeaderName());
+            views[page].onShow();
+        }
+    }
+
+    @Override
+    public void onNextAction() {
+        views[currentViewNum].onNextPressed();
+    }
+
+    @Override
+    public void saveSelfArgs(Bundle outState) {
+        saveCurrentState();
+    }
+
+    @Override
+    public void needFinishActivity() {
+        clearCurrentState();
+        presentFragment(new MessagesActivity(null), true);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/LoginActivityPhoneView.java b/TMessagesProj/src/main/java/org/tomato/ui/LoginActivityPhoneView.java
new file mode 100644
index 000000000..60e885092
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/LoginActivityPhoneView.java
@@ -0,0 +1,437 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.content.Context;
+import android.os.Bundle;
+import android.telephony.TelephonyManager;
+import android.text.Editable;
+import android.text.TextWatcher;
+import android.util.AttributeSet;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.inputmethod.EditorInfo;
+import android.widget.AdapterView;
+import android.widget.EditText;
+import android.widget.TextView;
+
+import org.tomato.PhoneFormat.PhoneFormat;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.LocaleController;
+import org.tomato.messenger.BuildVars;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.RPCRequest;
+import org.tomato.messenger.TLObject;
+import org.tomato.messenger.TLRPC;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+import org.tomato.ui.Views.SlideView;
+
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.HashMap;
+import java.util.Locale;
+
+public class LoginActivityPhoneView extends SlideView implements AdapterView.OnItemSelectedListener {
+    private EditText codeField;
+    private EditText phoneField;
+    private TextView countryButton;
+
+    private int countryState = 0;
+
+    private ArrayList<String> countriesArray = new ArrayList<String>();
+    private HashMap<String, String> countriesMap = new HashMap<String, String>();
+    private HashMap<String, String> codesMap = new HashMap<String, String>();
+    private HashMap<String, String> languageMap = new HashMap<String, String>();
+
+    private boolean ignoreSelection = false;
+    private boolean ignoreOnTextChange = false;
+    private boolean ignoreOnPhoneChange = false;
+    private boolean nextPressed = false;
+
+    public LoginActivityPhoneView(Context context) {
+        super(context);
+    }
+
+    public LoginActivityPhoneView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    public LoginActivityPhoneView(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+    }
+
+    @Override
+    protected void onFinishInflate() {
+        super.onFinishInflate();
+
+        TextView textView = (TextView)findViewById(R.id.login_confirm_text);
+        textView.setText(LocaleController.getString("StartText", R.string.StartText));
+
+        countryButton = (TextView)findViewById(R.id.login_coutry_textview);
+        countryButton.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                if (delegate == null) {
+                    return;
+                }
+                BaseFragment activity = (BaseFragment)delegate;
+                CountrySelectActivity fragment = new CountrySelectActivity();
+                fragment.setCountrySelectActivityDelegate(new CountrySelectActivity.CountrySelectActivityDelegate() {
+                    @Override
+                    public void didSelectCountry(String name) {
+                        selectCountry(name);
+                        phoneField.requestFocus();
+                    }
+                });
+                activity.presentFragment(fragment);
+            }
+        });
+
+        codeField = (EditText)findViewById(R.id.login_county_code_field);
+        codeField.addTextChangedListener(new TextWatcher() {
+            @Override
+            public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+
+            }
+
+            @Override
+            public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+
+            }
+
+            @Override
+            public void afterTextChanged(Editable editable) {
+                if (ignoreOnTextChange) {
+                    ignoreOnTextChange = false;
+                    return;
+                }
+                ignoreOnTextChange = true;
+                String text = PhoneFormat.stripExceptNumbers(codeField.getText().toString());
+                codeField.setText(text);
+                if (text.length() == 0) {
+                    countryButton.setText(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
+                    countryState = 1;
+                } else {
+                    String country = codesMap.get(text);
+                    if (country != null) {
+                        int index = countriesArray.indexOf(country);
+                        if (index != -1) {
+                            ignoreSelection = true;
+                            countryButton.setText(countriesArray.get(index));
+
+                            updatePhoneField();
+                            countryState = 0;
+                        } else {
+                            countryButton.setText(LocaleController.getString("WrongCountry", R.string.WrongCountry));
+                            countryState = 2;
+                        }
+                    } else {
+                        countryButton.setText(LocaleController.getString("WrongCountry", R.string.WrongCountry));
+                        countryState = 2;
+                    }
+                    codeField.setSelection(codeField.getText().length());
+                }
+            }
+        });
+        codeField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
+            @Override
+            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
+                if (i == EditorInfo.IME_ACTION_NEXT) {
+                    phoneField.requestFocus();
+                    return true;
+                }
+                return false;
+            }
+        });
+        phoneField = (EditText)findViewById(R.id.login_phone_field);
+        phoneField.addTextChangedListener(new TextWatcher() {
+            @Override
+            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+                if (ignoreOnPhoneChange) {
+                    return;
+                }
+                if (count == 1 && after == 0 && s.length() > 1) {
+                    String phoneChars = "0123456789";
+                    String str = s.toString();
+                    String substr = str.substring(start, start + 1);
+                    if (!phoneChars.contains(substr)) {
+                        ignoreOnPhoneChange = true;
+                        StringBuilder builder = new StringBuilder(str);
+                        int toDelete = 0;
+                        for (int a = start; a >= 0; a--) {
+                            substr = str.substring(a, a + 1);
+                            if(phoneChars.contains(substr)) {
+                                break;
+                            }
+                            toDelete++;
+                        }
+                        builder.delete(Math.max(0, start - toDelete), start + 1);
+                        str = builder.toString();
+                        if (PhoneFormat.strip(str).length() == 0) {
+                            phoneField.setText("");
+                        } else {
+                            phoneField.setText(str);
+                            updatePhoneField();
+                        }
+                        ignoreOnPhoneChange = false;
+                    }
+                }
+            }
+
+            @Override
+            public void onTextChanged(CharSequence s, int start, int before, int count) {
+
+            }
+
+            @Override
+            public void afterTextChanged(Editable s) {
+                if (ignoreOnPhoneChange) {
+                    return;
+                }
+                updatePhoneField();
+            }
+        });
+
+        if(!isInEditMode()) {
+            try {
+                BufferedReader reader = new BufferedReader(new InputStreamReader(getResources().getAssets().open("countries.txt")));
+                String line;
+                while ((line = reader.readLine()) != null) {
+                    String[] args = line.split(";");
+                    countriesArray.add(0, args[2]);
+                    countriesMap.put(args[2], args[0]);
+                    codesMap.put(args[0], args[2]);
+                    languageMap.put(args[1], args[2]);
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+
+            Collections.sort(countriesArray, new Comparator<String>() {
+                @Override
+                public int compare(String lhs, String rhs) {
+                    return lhs.compareTo(rhs);
+                }
+            });
+
+            String country = null;
+
+            try {
+                TelephonyManager telephonyManager = (TelephonyManager)ApplicationLoader.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
+                if (telephonyManager != null) {
+                    country = telephonyManager.getSimCountryIso().toUpperCase();
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+
+            if (country != null) {
+                String countryName = languageMap.get(country);
+                if (countryName != null) {
+                    int index = countriesArray.indexOf(countryName);
+                    if (index != -1) {
+                        codeField.setText(countriesMap.get(countryName));
+                        countryState = 0;
+                    }
+                }
+            }
+            if (codeField.length() == 0) {
+                countryButton.setText(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
+                countryState = 1;
+            }
+        }
+
+        if (codeField.length() != 0) {
+            AndroidUtilities.showKeyboard(phoneField);
+            phoneField.requestFocus();
+        } else {
+            AndroidUtilities.showKeyboard(codeField);
+            codeField.requestFocus();
+        }
+        phoneField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
+            @Override
+            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
+                if (i == EditorInfo.IME_ACTION_NEXT) {
+                    delegate.onNextAction();
+                    return true;
+                }
+                return false;
+            }
+        });
+    }
+
+    public void selectCountry(String name) {
+        int index = countriesArray.indexOf(name);
+        if (index != -1) {
+            ignoreOnTextChange = true;
+            codeField.setText(countriesMap.get(name));
+            countryButton.setText(name);
+            countryState = 0;
+        }
+    }
+
+    private void updatePhoneField() {
+        ignoreOnPhoneChange = true;
+        String codeText = codeField.getText().toString();
+        String phone = PhoneFormat.getInstance().format("+" + codeText + phoneField.getText().toString());
+        int idx = phone.indexOf(" ");
+        if (idx != -1) {
+            String resultCode = PhoneFormat.stripExceptNumbers(phone.substring(0, idx));
+            if (!codeText.equals(resultCode)) {
+                phone = PhoneFormat.getInstance().format(phoneField.getText().toString()).trim();
+                phoneField.setText(phone);
+                int len = phoneField.length();
+                phoneField.setSelection(phoneField.length());
+            } else {
+                phoneField.setText(phone.substring(idx).trim());
+                int len = phoneField.length();
+                phoneField.setSelection(phoneField.length());
+            }
+        } else {
+            phoneField.setSelection(phoneField.length());
+        }
+        ignoreOnPhoneChange = false;
+    }
+
+    @Override
+    public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
+        if (ignoreSelection) {
+            ignoreSelection = false;
+            return;
+        }
+        ignoreOnTextChange = true;
+        String str = countriesArray.get(i);
+        codeField.setText(countriesMap.get(str));
+        updatePhoneField();
+    }
+
+    @Override
+    public void onNothingSelected(AdapterView<?> adapterView) {
+
+    }
+
+    @Override
+    public void onNextPressed() {
+        if (nextPressed) {
+            return;
+        }
+        if (countryState == 1) {
+            delegate.needShowAlert(LocaleController.getString("ChooseCountry", R.string.ChooseCountry));
+            return;
+        } else if (countryState == 2) {
+            delegate.needShowAlert(LocaleController.getString("WrongCountry", R.string.WrongCountry));
+            return;
+        }
+        if (codeField.length() == 0) {
+            delegate.needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
+            return;
+        }
+        TLRPC.TL_auth_sendCode req = new TLRPC.TL_auth_sendCode();
+        String phone = PhoneFormat.stripExceptNumbers("" + codeField.getText() + phoneField.getText());
+        ConnectionsManager.getInstance().applyCountryPortNumber(phone);
+        req.api_hash = BuildVars.APP_HASH;
+        req.api_id = BuildVars.APP_ID;
+        req.sms_type = 0;
+        req.phone_number = phone;
+        req.lang_code = LocaleController.getLocaleString(Locale.getDefault());
+        if (req.lang_code == null || req.lang_code.length() == 0) {
+            req.lang_code = "en";
+        }
+
+        final Bundle params = new Bundle();
+        params.putString("phone", "+" + codeField.getText() + phoneField.getText());
+        params.putString("phoneFormated", phone);
+        nextPressed = true;
+        if (delegate != null) {
+            delegate.needShowProgress();
+        }
+        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+            @Override
+            public void run(final TLObject response, final TLRPC.TL_error error) {
+                AndroidUtilities.RunOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        nextPressed = false;
+                        if (error == null) {
+                            final TLRPC.TL_auth_sentCode res = (TLRPC.TL_auth_sentCode)response;
+                            params.putString("phoneHash", res.phone_code_hash);
+                            params.putInt("calltime", res.send_call_timeout * 1000);
+                            if (res.phone_registered) {
+                                params.putString("registered", "true");
+                            }
+                            if (delegate != null) {
+                                delegate.setPage(1, true, params, false);
+                            }
+                        } else {
+                            if (delegate != null && error.text != null) {
+                                if (error.text.contains("PHONE_NUMBER_INVALID")) {
+                                    delegate.needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
+                                } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
+                                    delegate.needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
+                                } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
+                                    delegate.needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
+                                } else if (error.text.startsWith("FLOOD_WAIT")) {
+                                    delegate.needShowAlert(LocaleController.getString("FloodWait", R.string.FloodWait));
+                                } else {
+                                    delegate.needShowAlert(error.text);
+                                }
+                            }
+                        }
+                        if (delegate != null) {
+                            delegate.needHideProgress();
+                        }
+                    }
+                });
+            }
+        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin | RPCRequest.RPCRequestClassTryDifferentDc | RPCRequest.RPCRequestClassEnableUnauthorized);
+    }
+
+    @Override
+    public void onShow() {
+        super.onShow();
+        if (phoneField != null) {
+            phoneField.requestFocus();
+            phoneField.setSelection(phoneField.length());
+        }
+    }
+
+    @Override
+    public String getHeaderName() {
+        return LocaleController.getString("YourPhone", R.string.YourPhone);
+    }
+
+    @Override
+    public void saveStateParams(Bundle bundle) {
+        String code = codeField.getText().toString();
+        if (code != null && code.length() != 0) {
+            bundle.putString("phoneview_code", code);
+        }
+        String phone = phoneField.getText().toString();
+        if (phone != null && phone.length() != 0) {
+            bundle.putString("phoneview_phone", phone);
+        }
+    }
+
+    @Override
+    public void restoreStateParams(Bundle bundle) {
+        String code = bundle.getString("phoneview_code");
+        if (code != null) {
+            codeField.setText(code);
+        }
+        String phone = bundle.getString("phoneview_phone");
+        if (phone != null) {
+            phoneField.setText(phone);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/LoginActivityRegisterView.java b/TMessagesProj/src/main/java/org/tomato/ui/LoginActivityRegisterView.java
new file mode 100644
index 000000000..873a87d16
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/LoginActivityRegisterView.java
@@ -0,0 +1,221 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.content.Context;
+import android.os.Bundle;
+import android.util.AttributeSet;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.inputmethod.EditorInfo;
+import android.widget.EditText;
+import android.widget.TextView;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.ContactsController;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MessagesController;
+import org.tomato.android.MessagesStorage;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.R;
+import org.tomato.messenger.RPCRequest;
+import org.tomato.messenger.TLObject;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
+import org.tomato.ui.Views.SlideView;
+
+import java.util.ArrayList;
+
+public class LoginActivityRegisterView extends SlideView {
+    private EditText firstNameField;
+    private EditText lastNameField;
+    private String requestPhone;
+    private String phoneHash;
+    private String phoneCode;
+    private Bundle currentParams;
+    private boolean nextPressed = false;
+
+    public LoginActivityRegisterView(Context context) {
+        super(context);
+    }
+
+    public LoginActivityRegisterView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    public LoginActivityRegisterView(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+    }
+
+    @Override
+    protected void onFinishInflate() {
+        super.onFinishInflate();
+
+        firstNameField = (EditText)findViewById(R.id.login_first_name_field);
+        firstNameField.setHint(LocaleController.getString("FirstName", R.string.FirstName));
+        lastNameField = (EditText)findViewById(R.id.login_last_name_field);
+        lastNameField.setHint(LocaleController.getString("LastName", R.string.LastName));
+
+        TextView textView = (TextView)findViewById(R.id.login_register_info);
+        textView.setText(LocaleController.getString("RegisterText", R.string.RegisterText));
+
+        TextView wrongNumber = (TextView) findViewById(R.id.changed_mind);
+        wrongNumber.setText(LocaleController.getString("CancelRegistration", R.string.CancelRegistration));
+
+        wrongNumber.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                onBackPressed();
+                delegate.setPage(0, true, null, true);
+            }
+        });
+
+        firstNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
+            @Override
+            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
+                if (i == EditorInfo.IME_ACTION_NEXT) {
+                    lastNameField.requestFocus();
+                    return true;
+                }
+                return false;
+            }
+        });
+
+    }
+
+    @Override
+    public void onBackPressed() {
+        currentParams = null;
+    }
+
+    @Override
+    public String getHeaderName() {
+        return LocaleController.getString("YourName", R.string.YourName);
+    }
+
+    @Override
+    public void onShow() {
+        super.onShow();
+        if (firstNameField != null) {
+            firstNameField.requestFocus();
+            firstNameField.setSelection(firstNameField.length());
+        }
+    }
+
+    @Override
+    public void setParams(Bundle params) {
+        if (params == null) {
+            return;
+        }
+        firstNameField.setText("");
+        lastNameField.setText("");
+        requestPhone = params.getString("phoneFormated");
+        phoneHash = params.getString("phoneHash");
+        phoneCode = params.getString("code");
+        currentParams = params;
+    }
+
+    @Override
+    public void onNextPressed() {
+        if (nextPressed) {
+            return;
+        }
+        nextPressed = true;
+        TLRPC.TL_auth_signUp req = new TLRPC.TL_auth_signUp();
+        req.phone_code = phoneCode;
+        req.phone_code_hash = phoneHash;
+        req.phone_number = requestPhone;
+        req.first_name = firstNameField.getText().toString();
+        req.last_name = lastNameField.getText().toString();
+        if (delegate != null) {
+            delegate.needShowProgress();
+        }
+        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+            @Override
+            public void run(final TLObject response, final TLRPC.TL_error error) {
+                AndroidUtilities.RunOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        nextPressed = false;
+                        if (delegate != null) {
+                            delegate.needHideProgress();
+                        }
+                        if (error == null) {
+                            final TLRPC.TL_auth_authorization res = (TLRPC.TL_auth_authorization) response;
+                            TLRPC.TL_userSelf user = (TLRPC.TL_userSelf) res.user;
+                            UserConfig.clearConfig();
+                            MessagesController.getInstance().cleanUp();
+                            UserConfig.setCurrentUser(user);
+                            UserConfig.saveConfig(true);
+                            MessagesStorage.getInstance().cleanUp(true);
+                            ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
+                            users.add(user);
+                            MessagesStorage.getInstance().putUsersAndChats(users, null, true, true);
+                            //MessagesController.getInstance().uploadAndApplyUserAvatar(avatarPhotoBig);
+                            MessagesController.getInstance().putUser(res.user, false);
+                            ContactsController.getInstance().checkAppAccount();
+                            MessagesController.getInstance().getBlockedUsers(true);
+                            if (delegate != null) {
+                                delegate.needFinishActivity();
+                            }
+                            ConnectionsManager.getInstance().initPushConnection();
+                        } else {
+                            if (delegate != null) {
+                                if (error.text.contains("PHONE_NUMBER_INVALID")) {
+                                    delegate.needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
+                                } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
+                                    delegate.needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
+                                } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
+                                    delegate.needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
+                                } else if (error.text.contains("FIRSTNAME_INVALID")) {
+                                    delegate.needShowAlert(LocaleController.getString("InvalidFirstName", R.string.InvalidFirstName));
+                                } else if (error.text.contains("LASTNAME_INVALID")) {
+                                    delegate.needShowAlert(LocaleController.getString("InvalidLastName", R.string.InvalidLastName));
+                                } else {
+                                    delegate.needShowAlert(error.text);
+                                }
+                            }
+                        }
+                    }
+                });
+            }
+        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassWithoutLogin);
+    }
+
+    @Override
+    public void saveStateParams(Bundle bundle) {
+        String first = firstNameField.getText().toString();
+        if (first != null && first.length() != 0) {
+            bundle.putString("registerview_first", first);
+        }
+        String last = lastNameField.getText().toString();
+        if (last != null && last.length() != 0) {
+            bundle.putString("registerview_last", last);
+        }
+        if (currentParams != null) {
+            bundle.putBundle("registerview_params", currentParams);
+        }
+    }
+
+    @Override
+    public void restoreStateParams(Bundle bundle) {
+        currentParams = bundle.getBundle("registerview_params");
+        if (currentParams != null) {
+            setParams(currentParams);
+        }
+        String first = bundle.getString("registerview_first");
+        if (first != null) {
+            firstNameField.setText(first);
+        }
+        String last = bundle.getString("registerview_last");
+        if (last != null) {
+            lastNameField.setText(last);
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/LoginActivitySmsView.java b/TMessagesProj/src/main/java/org/tomato/ui/LoginActivitySmsView.java
new file mode 100644
index 000000000..f57bbca11
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/LoginActivitySmsView.java
@@ -0,0 +1,426 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageInfo;
+import android.os.Build;
+import android.os.Bundle;
+import android.text.Html;
+import android.util.AttributeSet;
+import android.view.KeyEvent;
+import android.view.View;
+import android.view.inputmethod.EditorInfo;
+import android.widget.EditText;
+import android.widget.TextView;
+
+import org.tomato.PhoneFormat.PhoneFormat;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.ContactsController;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MessagesController;
+import org.tomato.android.MessagesStorage;
+import org.tomato.android.NotificationCenter;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.RPCRequest;
+import org.tomato.messenger.TLObject;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
+import org.tomato.ui.Views.SlideView;
+
+import java.util.ArrayList;
+import java.util.Locale;
+import java.util.Timer;
+import java.util.TimerTask;
+
+public class LoginActivitySmsView extends SlideView implements NotificationCenter.NotificationCenterDelegate {
+    private String phoneHash;
+    private String requestPhone;
+    private String registered;
+    private EditText codeField;
+    private TextView confirmTextView;
+    private TextView timeText;
+    private TextView problemText;
+    private Bundle currentParams;
+
+    private Timer timeTimer;
+    private Timer codeTimer;
+    private static final Object timerSync = new Object();
+    private volatile int time = 60000;
+    private volatile int codeTime = 15000;
+    private double lastCurrentTime;
+    private double lastCodeTime;
+    private boolean waitingForSms = false;
+    private boolean nextPressed = false;
+    private String lastError = "";
+
+    public LoginActivitySmsView(Context context) {
+        super(context);
+    }
+
+    public LoginActivitySmsView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    public LoginActivitySmsView(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+    }
+
+    @Override
+    protected void onFinishInflate() {
+        super.onFinishInflate();
+
+        confirmTextView = (TextView)findViewById(R.id.login_sms_confirm_text);
+        codeField = (EditText)findViewById(R.id.login_sms_code_field);
+        codeField.setHint(LocaleController.getString("Code", R.string.Code));
+        timeText = (TextView)findViewById(R.id.login_time_text);
+        problemText = (TextView)findViewById(R.id.login_problem);
+        TextView wrongNumber = (TextView) findViewById(R.id.wrong_number);
+        wrongNumber.setText(LocaleController.getString("WrongNumber", R.string.WrongNumber));
+        problemText.setText(LocaleController.getString("DidNotGetTheCode", R.string.DidNotGetTheCode));
+        problemText.setVisibility(time < 1000 ? VISIBLE : GONE);
+
+        wrongNumber.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                onBackPressed();
+                delegate.setPage(0, true, null, true);
+            }
+        });
+
+        problemText.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                try {
+                    PackageInfo pInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(ApplicationLoader.applicationContext.getPackageName(), 0);
+                    String version = String.format(Locale.US, "%s (%d)", pInfo.versionName, pInfo.versionCode);
+
+                    Intent mailer = new Intent(Intent.ACTION_SEND);
+                    mailer.setType("message/rfc822");
+                    mailer.putExtra(Intent.EXTRA_EMAIL, new String[]{"sms@telegram.org"});
+                    mailer.putExtra(Intent.EXTRA_SUBJECT, "Android registration/login issue " + version + " " + requestPhone);
+                    mailer.putExtra(Intent.EXTRA_TEXT, "Phone: " + requestPhone + "\nApp version: " + version + "\nOS version: SDK " + Build.VERSION.SDK_INT + "\nDevice Name: " + Build.MANUFACTURER + Build.MODEL + "\nLocale: " + Locale.getDefault() + "\nError: " + lastError);
+                    getContext().startActivity(Intent.createChooser(mailer, "Send email..."));
+                } catch (Exception e) {
+                    if (delegate != null) {
+                        delegate.needShowAlert(LocaleController.getString("NoMailInstalled", R.string.NoMailInstalled));
+                    }
+                }
+            }
+        });
+
+        codeField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
+            @Override
+            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
+                if (i == EditorInfo.IME_ACTION_NEXT) {
+                    if (delegate != null) {
+                        delegate.onNextAction();
+                    }
+                    return true;
+                }
+                return false;
+            }
+        });
+    }
+
+    @Override
+    public String getHeaderName() {
+        return LocaleController.getString("YourCode", R.string.YourCode);
+    }
+
+    @Override
+    public void setParams(Bundle params) {
+        if (params == null) {
+            return;
+        }
+        codeField.setText("");
+        AndroidUtilities.setWaitingForSms(true);
+        NotificationCenter.getInstance().addObserver(this, 998);
+        currentParams = params;
+        waitingForSms = true;
+        String phone = params.getString("phone");
+        requestPhone = params.getString("phoneFormated");
+        phoneHash = params.getString("phoneHash");
+        registered = params.getString("registered");
+        time = params.getInt("calltime");
+
+        if (phone == null) {
+            return;
+        }
+
+        String number = PhoneFormat.getInstance().format(phone);
+        confirmTextView.setText(Html.fromHtml(String.format(LocaleController.getString("SentSmsCode", R.string.SentSmsCode) + " <b>%s</b>", number)));
+
+        AndroidUtilities.showKeyboard(codeField);
+        codeField.requestFocus();
+
+        destroyTimer();
+        destroyCodeTimer();
+        timeText.setText(LocaleController.formatString("CallText", R.string.CallText, 1, 0));
+        lastCurrentTime = System.currentTimeMillis();
+        problemText.setVisibility(time < 1000 ? VISIBLE : GONE);
+
+        createTimer();
+    }
+
+    private void createCodeTimer() {
+        if (codeTimer != null) {
+            return;
+        }
+        codeTime = 15000;
+        codeTimer = new Timer();
+        lastCodeTime = System.currentTimeMillis();
+        codeTimer.schedule(new TimerTask() {
+            @Override
+            public void run() {
+                double currentTime = System.currentTimeMillis();
+                double diff = currentTime - lastCodeTime;
+                codeTime -= diff;
+                lastCodeTime = currentTime;
+                AndroidUtilities.RunOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        if (codeTime <= 1000) {
+                            problemText.setVisibility(VISIBLE);
+                            destroyCodeTimer();
+                        }
+                    }
+                });
+            }
+        }, 0, 1000);
+    }
+
+    private void destroyCodeTimer() {
+        try {
+            synchronized(timerSync) {
+                if (codeTimer != null) {
+                    codeTimer.cancel();
+                    codeTimer = null;
+                }
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+    }
+
+    private void createTimer() {
+        if (timeTimer != null) {
+            return;
+        }
+        timeTimer = new Timer();
+        timeTimer.schedule(new TimerTask() {
+            @Override
+            public void run() {
+                double currentTime = System.currentTimeMillis();
+                double diff = currentTime - lastCurrentTime;
+                time -= diff;
+                lastCurrentTime = currentTime;
+                AndroidUtilities.RunOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        if (time >= 1000) {
+                            int minutes = time / 1000 / 60;
+                            int seconds = time / 1000 - minutes * 60;
+                            timeText.setText(LocaleController.formatString("CallText", R.string.CallText, minutes, seconds));
+                        } else {
+                            timeText.setText(LocaleController.getString("Calling", R.string.Calling));
+                            destroyTimer();
+                            createCodeTimer();
+                            TLRPC.TL_auth_sendCall req = new TLRPC.TL_auth_sendCall();
+                            req.phone_number = requestPhone;
+                            req.phone_code_hash = phoneHash;
+                            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                                @Override
+                                public void run(TLObject response, final TLRPC.TL_error error) {
+                                    if (error != null && error.text != null) {
+                                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                                            @Override
+                                            public void run() {
+                                                lastError = error.text;
+                                            }
+                                        });
+                                    }
+                                }
+                            }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin);
+                        }
+                    }
+                });
+            }
+        }, 0, 1000);
+    }
+
+    private void destroyTimer() {
+        try {
+            synchronized(timerSync) {
+                if (timeTimer != null) {
+                    timeTimer.cancel();
+                    timeTimer = null;
+                }
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+    }
+
+    @Override
+    public void onNextPressed() {
+        if (nextPressed) {
+            return;
+        }
+        nextPressed = true;
+        waitingForSms = false;
+        AndroidUtilities.setWaitingForSms(false);
+        NotificationCenter.getInstance().removeObserver(this, 998);
+        final TLRPC.TL_auth_signIn req = new TLRPC.TL_auth_signIn();
+        req.phone_number = requestPhone;
+        req.phone_code = codeField.getText().toString();
+        req.phone_code_hash = phoneHash;
+        destroyTimer();
+        if (delegate != null) {
+            delegate.needShowProgress();
+        }
+        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+            @Override
+            public void run(final TLObject response, final TLRPC.TL_error error) {
+                AndroidUtilities.RunOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        if (delegate == null) {
+                            return;
+                        }
+                        delegate.needHideProgress();
+                        nextPressed = false;
+                        if (error == null) {
+                            TLRPC.TL_auth_authorization res = (TLRPC.TL_auth_authorization)response;
+                            destroyTimer();
+                            destroyCodeTimer();
+                            UserConfig.clearConfig();
+                            MessagesController.getInstance().cleanUp();
+                            UserConfig.setCurrentUser(res.user);
+                            UserConfig.saveConfig(true);
+                            MessagesStorage.getInstance().cleanUp(true);
+                            ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
+                            users.add(res.user);
+                            MessagesStorage.getInstance().putUsersAndChats(users, null, true, true);
+                            MessagesController.getInstance().putUser(res.user, false);
+                            ContactsController.getInstance().checkAppAccount();
+                            MessagesController.getInstance().getBlockedUsers(true);
+                            delegate.needFinishActivity();
+                            ConnectionsManager.getInstance().initPushConnection();
+                        } else {
+                            lastError = error.text;
+                            if (error.text.contains("PHONE_NUMBER_UNOCCUPIED") && registered == null) {
+                                Bundle params = new Bundle();
+                                params.putString("phoneFormated", requestPhone);
+                                params.putString("phoneHash", phoneHash);
+                                params.putString("code", req.phone_code);
+                                delegate.setPage(2, true, params, false);
+                                destroyTimer();
+                                destroyCodeTimer();
+                            } else {
+                                createTimer();
+                                if (error.text.contains("PHONE_NUMBER_INVALID")) {
+                                    delegate.needShowAlert(LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
+                                } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
+                                    delegate.needShowAlert(LocaleController.getString("InvalidCode", R.string.InvalidCode));
+                                } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
+                                    delegate.needShowAlert(LocaleController.getString("CodeExpired", R.string.CodeExpired));
+                                } else if (error.text.startsWith("FLOOD_WAIT")) {
+                                    delegate.needShowAlert(LocaleController.getString("FloodWait", R.string.FloodWait));
+                                } else {
+                                    delegate.needShowAlert(error.text);
+                                }
+                            }
+                        }
+                    }
+                });
+            }
+        }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassWithoutLogin);
+    }
+
+    @Override
+    public void onBackPressed() {
+        destroyTimer();
+        destroyCodeTimer();
+        currentParams = null;
+        AndroidUtilities.setWaitingForSms(false);
+        NotificationCenter.getInstance().removeObserver(this, 998);
+        waitingForSms = false;
+    }
+
+    @Override
+    public void onDestroyActivity() {
+        super.onDestroyActivity();
+        AndroidUtilities.setWaitingForSms(false);
+        NotificationCenter.getInstance().removeObserver(this, 998);
+        destroyTimer();
+        destroyCodeTimer();
+        waitingForSms = false;
+    }
+
+    @Override
+    public void onShow() {
+        super.onShow();
+        if (codeField != null) {
+            codeField.requestFocus();
+            codeField.setSelection(codeField.length());
+        }
+    }
+
+    @Override
+    public void didReceivedNotification(int id, final Object... args) {
+        if (id == 998) {
+            AndroidUtilities.RunOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    if (!waitingForSms) {
+                        return;
+                    }
+                    if (codeField != null) {
+                        codeField.setText("" + args[0]);
+                        onNextPressed();
+                    }
+                }
+            });
+        }
+    }
+
+    @Override
+    public void saveStateParams(Bundle bundle) {
+        String code = codeField.getText().toString();
+        if (code != null && code.length() != 0) {
+            bundle.putString("smsview_code", code);
+        }
+        if (currentParams != null) {
+            bundle.putBundle("smsview_params", currentParams);
+        }
+        if (time != 0) {
+            bundle.putInt("time", time);
+        }
+    }
+
+    @Override
+    public void restoreStateParams(Bundle bundle) {
+        currentParams = bundle.getBundle("smsview_params");
+        if (currentParams != null) {
+            setParams(currentParams);
+        }
+        String code = bundle.getString("smsview_code");
+        if (code != null) {
+            codeField.setText(code);
+        }
+        Integer t = bundle.getInt("time");
+        if (t != 0) {
+            time = t;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/MediaActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/MediaActivity.java
new file mode 100644
index 000000000..9ae7e3381
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/MediaActivity.java
@@ -0,0 +1,496 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.app.Activity;
+import android.content.Context;
+import android.os.Build;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.Surface;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.view.WindowManager;
+import android.widget.AbsListView;
+import android.widget.AdapterView;
+import android.widget.GridView;
+import android.widget.TextView;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MessageObject;
+import org.tomato.android.MessagesController;
+import org.tomato.android.NotificationCenter;
+import org.tomato.messenger.FileLoader;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.ui.Adapters.BaseFragmentAdapter;
+import org.tomato.ui.Views.ActionBar.ActionBarLayer;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+import org.tomato.ui.Views.BackupImageView;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+
+public class MediaActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, PhotoViewer.PhotoViewerProvider {
+    private GridView listView;
+    private ListAdapter listAdapter;
+    private ArrayList<MessageObject> messages = new ArrayList<MessageObject>();
+    private HashMap<Integer, MessageObject> messagesDict = new HashMap<Integer, MessageObject>();
+    private long dialog_id;
+    private int totalCount = 0;
+    private int itemWidth = 100;
+    private boolean loading = false;
+    private boolean endReached = false;
+    private boolean cacheEndReached = false;
+    private int max_id = Integer.MAX_VALUE;
+    private View progressView;
+    private TextView emptyView;
+
+    public MediaActivity(Bundle args) {
+        super(args);
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mediaDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messagesDeleted);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceivedNewMessages);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.messageReceivedByServer);
+        dialog_id = getArguments().getLong("dialog_id", 0);
+        if (((int)dialog_id) == 0) {
+            max_id = Integer.MIN_VALUE;
+        }
+        loading = true;
+        MessagesController.getInstance().loadMedia(dialog_id, 0, 50, 0, true, classGuid);
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.mediaDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceivedNewMessages);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messagesDeleted);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.messageReceivedByServer);
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
+            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
+            actionBarLayer.setTitle(LocaleController.getString("SharedMedia", R.string.SharedMedia));
+            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        if (Build.VERSION.SDK_INT < 11 && listView != null) {
+                            listView.setAdapter(null);
+                            listView = null;
+                            listAdapter = null;
+                        }
+                        finishFragment();
+                    }
+                }
+            });
+
+            fragmentView = inflater.inflate(R.layout.media_layout, container, false);
+
+            emptyView = (TextView)fragmentView.findViewById(R.id.searchEmptyView);
+            emptyView.setText(LocaleController.getString("NoMedia", R.string.NoMedia));
+            emptyView.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
+            listView = (GridView)fragmentView.findViewById(R.id.media_grid);
+            progressView = fragmentView.findViewById(R.id.progressLayout);
+
+            listView.setAdapter(listAdapter = new ListAdapter(getParentActivity()));
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    PhotoViewer.getInstance().setParentActivity(getParentActivity());
+                    PhotoViewer.getInstance().openPhoto(messages, i, MediaActivity.this);
+                }
+            });
+            if (loading && messages.isEmpty()) {
+                progressView.setVisibility(View.VISIBLE);
+                listView.setEmptyView(null);
+            } else {
+                progressView.setVisibility(View.GONE);
+                listView.setEmptyView(emptyView);
+            }
+
+            listView.setOnScrollListener(new AbsListView.OnScrollListener() {
+                @Override
+                public void onScrollStateChanged(AbsListView absListView, int i) {
+
+                }
+
+                @Override
+                public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+                    if (visibleItemCount != 0 && firstVisibleItem + visibleItemCount > totalItemCount - 2 && !loading && !endReached) {
+                        loading = true;
+                        MessagesController.getInstance().loadMedia(dialog_id, 0, 50, max_id, !cacheEndReached, classGuid);
+                    }
+                }
+            });
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.mediaDidLoaded) {
+            long uid = (Long)args[0];
+            int guid = (Integer)args[4];
+            if (uid == dialog_id && guid == classGuid) {
+                loading = false;
+                totalCount = (Integer)args[1];
+                @SuppressWarnings("uchecked")
+                ArrayList<MessageObject> arr = (ArrayList<MessageObject>)args[2];
+                boolean added = false;
+                boolean enc = ((int)dialog_id) == 0;
+                for (MessageObject message : arr) {
+                    if (!messagesDict.containsKey(message.messageOwner.id)) {
+                        if (!enc) {
+                            if (message.messageOwner.id > 0) {
+                                max_id = Math.min(message.messageOwner.id, max_id);
+                            }
+                        } else {
+                            max_id = Math.max(message.messageOwner.id, max_id);
+                        }
+                        messagesDict.put(message.messageOwner.id, message);
+                        messages.add(message);
+                        added = true;
+                    }
+                }
+                if (!added) {
+                    endReached = true;
+                }
+                cacheEndReached = !(Boolean)args[3];
+                if (progressView != null) {
+                    progressView.setVisibility(View.GONE);
+                }
+                if (listView != null) {
+                    if (listView.getEmptyView() == null) {
+                        listView.setEmptyView(emptyView);
+                    }
+                }
+                if (listAdapter != null) {
+                    listAdapter.notifyDataSetChanged();
+                }
+            }
+        } else if (id == NotificationCenter.messagesDeleted) {
+            @SuppressWarnings("unchecked")
+            ArrayList<Integer> markAsDeletedMessages = (ArrayList<Integer>)args[0];
+            boolean updated = false;
+            for (Integer ids : markAsDeletedMessages) {
+                MessageObject obj = messagesDict.get(ids);
+                if (obj != null) {
+                    messages.remove(obj);
+                    messagesDict.remove(ids);
+                    totalCount--;
+                    updated = true;
+                }
+            }
+            if (updated && listAdapter != null) {
+                listAdapter.notifyDataSetChanged();
+            }
+        } else if (id == NotificationCenter.didReceivedNewMessages) {
+            long uid = (Long)args[0];
+            if (uid == dialog_id) {
+                boolean markAsRead = false;
+                @SuppressWarnings("unchecked")
+                ArrayList<MessageObject> arr = (ArrayList<MessageObject>)args[1];
+
+                for (MessageObject obj : arr) {
+                    if (obj.messageOwner.media == null || !(obj.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) && !(obj.messageOwner.media instanceof TLRPC.TL_messageMediaVideo)) {
+                        continue;
+                    }
+                    if (messagesDict.containsKey(obj.messageOwner.id)) {
+                        continue;
+                    }
+                    boolean enc = ((int)dialog_id) == 0;
+                    if (!enc) {
+                        if (obj.messageOwner.id > 0) {
+                            max_id = Math.min(obj.messageOwner.id, max_id);
+                        }
+                    } else {
+                        max_id = Math.max(obj.messageOwner.id, max_id);
+                    }
+                    messagesDict.put(obj.messageOwner.id, obj);
+                    messages.add(0, obj);
+                }
+                if (listAdapter != null) {
+                    listAdapter.notifyDataSetChanged();
+                }
+            }
+        } else if (id == NotificationCenter.messageReceivedByServer) {
+            Integer msgId = (Integer)args[0];
+            MessageObject obj = messagesDict.get(msgId);
+            if (obj != null) {
+                Integer newMsgId = (Integer)args[1];
+                messagesDict.remove(msgId);
+                messagesDict.put(newMsgId, obj);
+                obj.messageOwner.id = newMsgId;
+            }
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+        fixLayout();
+    }
+
+    @Override
+    public void onConfigurationChanged(android.content.res.Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        fixLayout();
+    }
+
+    @Override
+    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+        if (messageObject == null || listView == null) {
+            return null;
+        }
+        int count = listView.getChildCount();
+
+        for (int a = 0; a < count; a++) {
+            View view = listView.getChildAt(a);
+            BackupImageView imageView = (BackupImageView)view.findViewById(R.id.media_photo_image);
+            if (imageView != null) {
+                int num = (Integer)imageView.getTag();
+                if (num < 0 || num >= messages.size()) {
+                    continue;
+                }
+                MessageObject message = messages.get(num);
+                if (message != null && message.messageOwner.id == messageObject.messageOwner.id) {
+                    int coords[] = new int[2];
+                    imageView.getLocationInWindow(coords);
+                    PhotoViewer.PlaceProviderObject object = new PhotoViewer.PlaceProviderObject();
+                    object.viewX = coords[0];
+                    object.viewY = coords[1] - AndroidUtilities.statusBarHeight;
+                    object.parentView = listView;
+                    object.imageReceiver = imageView.imageReceiver;
+                    object.thumb = object.imageReceiver.getBitmap();
+                    return object;
+                }
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) { }
+
+    @Override
+    public void willHidePhotoViewer() { }
+
+    @Override
+    public boolean isPhotoChecked(int index) { return false; }
+
+    @Override
+    public void setPhotoChecked(int index) { }
+
+    @Override
+    public void cancelButtonPressed() { }
+
+    @Override
+    public void sendButtonPressed(int index) { }
+
+    @Override
+    public int getSelectedCount() { return 0; }
+
+    private void fixLayout() {
+        if (listView != null) {
+            ViewTreeObserver obs = listView.getViewTreeObserver();
+            obs.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+                @Override
+                public boolean onPreDraw() {
+                    WindowManager manager = (WindowManager)ApplicationLoader.applicationContext.getSystemService(Activity.WINDOW_SERVICE);
+                    int rotation = manager.getDefaultDisplay().getRotation();
+
+                    if (AndroidUtilities.isTablet()) {
+                        listView.setNumColumns(4);
+                        itemWidth = AndroidUtilities.dp(490) / 4 - AndroidUtilities.dp(2) * 3;
+                        listView.setColumnWidth(itemWidth);
+                    } else {
+                        if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
+                            listView.setNumColumns(6);
+                            itemWidth = AndroidUtilities.displaySize.x / 6 - AndroidUtilities.dp(2) * 5;
+                            listView.setColumnWidth(itemWidth);
+                        } else {
+                            listView.setNumColumns(4);
+                            itemWidth = AndroidUtilities.displaySize.x / 4 - AndroidUtilities.dp(2) * 3;
+                            listView.setColumnWidth(itemWidth);
+                        }
+                    }
+                    listView.setPadding(listView.getPaddingLeft(), AndroidUtilities.dp(4), listView.getPaddingRight(), listView.getPaddingBottom());
+                    listAdapter.notifyDataSetChanged();
+
+                    if (listView != null) {
+                        listView.getViewTreeObserver().removeOnPreDrawListener(this);
+                    }
+
+                    return false;
+                }
+            });
+        }
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return i != messages.size();
+        }
+
+        @Override
+        public int getCount() {
+            return messages.size() + (messages.isEmpty() || endReached ? 0 : 1);
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            if (type == 0) {
+                MessageObject message = messages.get(i);
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.media_photo_layout, viewGroup, false);
+                }
+                ViewGroup.LayoutParams params = view.getLayoutParams();
+                params.width = itemWidth;
+                params.height = itemWidth;
+                view.setLayoutParams(params);
+
+                BackupImageView imageView = (BackupImageView)view.findViewById(R.id.media_photo_image);
+                imageView.setTag(i);
+
+                if (message.messageOwner.media != null && message.messageOwner.media.photo != null && !message.messageOwner.media.photo.sizes.isEmpty()) {
+                    ArrayList<TLRPC.PhotoSize> sizes = message.messageOwner.media.photo.sizes;
+                    if (message.imagePreview != null) {
+                        imageView.setImageBitmap(message.imagePreview);
+                    } else {
+                        TLRPC.PhotoSize photoSize = FileLoader.getClosestPhotoSizeWithSize(message.messageOwner.media.photo.sizes, 80);
+                        imageView.setImage(photoSize.location, null, R.drawable.photo_placeholder_in);
+                    }
+                } else {
+                    imageView.setImageResource(R.drawable.photo_placeholder_in);
+                }
+                imageView.imageReceiver.setVisible(!PhotoViewer.getInstance().isShowingImage(message), false);
+            } else if (type == 1) {
+                MessageObject message = messages.get(i);
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.media_video_layout, viewGroup, false);
+                }
+                ViewGroup.LayoutParams params = view.getLayoutParams();
+                params.width = itemWidth;
+                params.height = itemWidth;
+                view.setLayoutParams(params);
+
+                TextView textView = (TextView)view.findViewById(R.id.chat_video_time);
+                BackupImageView imageView = (BackupImageView)view.findViewById(R.id.media_photo_image);
+                imageView.setTag(i);
+
+                if (message.messageOwner.media.video != null && message.messageOwner.media.video.thumb != null) {
+                    int duration = message.messageOwner.media.video.duration;
+                    int minutes = duration / 60;
+                    int seconds = duration - minutes * 60;
+                    textView.setText(String.format("%d:%02d", minutes, seconds));
+                    if (message.imagePreview != null) {
+                        imageView.setImageBitmap(message.imagePreview);
+                    } else {
+                        imageView.setImage(message.messageOwner.media.video.thumb.location, null, R.drawable.photo_placeholder_in);
+                    }
+                    textView.setVisibility(View.VISIBLE);
+                } else {
+                    textView.setVisibility(View.GONE);
+                    imageView.setImageResource(R.drawable.photo_placeholder_in);
+                }
+                imageView.imageReceiver.setVisible(!PhotoViewer.getInstance().isShowingImage(message), false);
+            } else if (type == 2) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.media_loading_layout, viewGroup, false);
+                }
+                ViewGroup.LayoutParams params = view.getLayoutParams();
+                params.width = itemWidth;
+                params.height = itemWidth;
+                view.setLayoutParams(params);
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            if (i == messages.size()) {
+                return 2;
+            }
+            MessageObject message = messages.get(i);
+            if (message.messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
+                return 1;
+            }
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 3;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return messages.isEmpty();
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/MessagesActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/MessagesActivity.java
new file mode 100644
index 000000000..e59bcb174
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/MessagesActivity.java
@@ -0,0 +1,900 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.os.Bundle;
+import android.text.Html;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AbsListView;
+import android.widget.AdapterView;
+import android.widget.CheckBox;
+import android.widget.EditText;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.ContactsController;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MessagesController;
+import org.tomato.android.MessagesStorage;
+import org.tomato.android.NotificationCenter;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLObject;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
+import org.tomato.messenger.Utilities;
+import org.tomato.ui.Adapters.BaseContactsSearchAdapter;
+import org.tomato.ui.Cells.ChatOrUserCell;
+import org.tomato.ui.Cells.DialogCell;
+import org.tomato.ui.Views.ActionBar.ActionBarLayer;
+import org.tomato.ui.Views.ActionBar.ActionBarMenu;
+import org.tomato.ui.Views.ActionBar.ActionBarMenuItem;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+import org.tomato.ui.Views.SettingsSectionLayout;
+
+import java.util.ArrayList;
+import java.util.Timer;
+import java.util.TimerTask;
+
+public class MessagesActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+    private ListView messagesListView;
+    private MessagesAdapter messagesListViewAdapter;
+    private TextView searchEmptyView;
+    private View progressView;
+    private View emptyView;
+    private String selectAlertString;
+    private String selectAlertStringGroup;
+    private boolean serverOnly = false;
+
+    private static boolean dialogsLoaded = false;
+    private boolean searching = false;
+    private boolean searchWas = false;
+    private boolean onlySelect = false;
+    private int activityToken = (int)(Utilities.random.nextDouble() * Integer.MAX_VALUE);
+    private long selectedDialog;
+
+    private MessagesActivityDelegate delegate;
+
+    private long openedDialogId = 0;
+
+    private final static int messages_list_menu_new_messages = 1;
+    private final static int messages_list_menu_new_chat = 2;
+    private final static int messages_list_menu_other = 6;
+    private final static int messages_list_menu_new_secret_chat = 3;
+    private final static int messages_list_menu_contacts = 4;
+    private final static int messages_list_menu_settings = 5;
+    private final static int messages_list_menu_new_broadcast = 6;
+
+    public static interface MessagesActivityDelegate {
+        public abstract void didSelectDialog(MessagesActivity fragment, long dialog_id, boolean param);
+    }
+
+    public MessagesActivity(Bundle args) {
+        super(args);
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.dialogsNeedReload);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.reloadSearchResults);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatUpdated);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.contactsDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.appDidLogout);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.openedChatChanged);
+        if (getArguments() != null) {
+            onlySelect = arguments.getBoolean("onlySelect", false);
+            serverOnly = arguments.getBoolean("serverOnly", false);
+            selectAlertString = arguments.getString("selectAlertString");
+            selectAlertStringGroup = arguments.getString("selectAlertStringGroup");
+        }
+        if (!dialogsLoaded) {
+            MessagesController.getInstance().loadDialogs(0, 0, 100, true);
+            dialogsLoaded = true;
+        }
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.dialogsNeedReload);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.reloadSearchResults);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatUpdated);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.contactsDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.appDidLogout);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.openedChatChanged);
+        delegate = null;
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            ActionBarMenu menu = actionBarLayer.createMenu();
+            menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
+                @Override
+                public void onSearchExpand() {
+                    searching = true;
+                    if (messagesListView != null) {
+                        messagesListView.setEmptyView(searchEmptyView);
+                    }
+                    if (emptyView != null) {
+                        emptyView.setVisibility(View.GONE);
+                    }
+                }
+
+                @Override
+                public void onSearchCollapse() {
+                    searching = false;
+                    searchWas = false;
+                    if (messagesListView != null) {
+                        messagesListView.setEmptyView(emptyView);
+                        searchEmptyView.setVisibility(View.GONE);
+                    }
+                    if (messagesListViewAdapter != null) {
+                        messagesListViewAdapter.searchDialogs(null);
+                    }
+                }
+
+                @Override
+                public void onTextChanged(EditText editText) {
+                    String text = editText.getText().toString();
+                    if (messagesListViewAdapter != null) {
+                        messagesListViewAdapter.searchDialogs(text);
+                    }
+                    if (text.length() != 0) {
+                        searchWas = true;
+                        if (messagesListViewAdapter != null) {
+                            messagesListViewAdapter.notifyDataSetChanged();
+                        }
+                        if (searchEmptyView != null) {
+                            messagesListView.setEmptyView(searchEmptyView);
+                            emptyView.setVisibility(View.GONE);
+                        }
+                    }
+                }
+            });
+            if (onlySelect) {
+                actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
+                actionBarLayer.setTitle(LocaleController.getString("SelectChat", R.string.SelectChat));
+            } else {
+                actionBarLayer.setDisplayUseLogoEnabled(true, R.drawable.ic_ab_logo);
+                actionBarLayer.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                menu.addItem(messages_list_menu_new_messages, R.drawable.ic_ab_compose);
+                ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_other);
+                item.addSubItem(messages_list_menu_new_chat, LocaleController.getString("NewGroup", R.string.NewGroup), 0);
+                item.addSubItem(messages_list_menu_new_secret_chat, LocaleController.getString("NewSecretChat", R.string.NewSecretChat), 0);
+                item.addSubItem(messages_list_menu_new_broadcast, LocaleController.getString("NewBroadcastList", R.string.NewBroadcastList), 0);
+                item.addSubItem(messages_list_menu_contacts, LocaleController.getString("Contacts", R.string.Contacts), 0);
+                item.addSubItem(messages_list_menu_settings, LocaleController.getString("Settings", R.string.Settings), 0);
+            }
+            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
+
+            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == messages_list_menu_settings) {
+                        presentFragment(new SettingsActivity());
+                    } else if (id == messages_list_menu_contacts) {
+                        presentFragment(new ContactsActivity(null));
+                    } else if (id == messages_list_menu_new_messages) {
+                        Bundle args = new Bundle();
+                        args.putBoolean("onlyUsers", true);
+                        args.putBoolean("destroyAfterSelect", true);
+                        args.putBoolean("usersAsSections", true);
+                        presentFragment(new ContactsActivity(args));
+                    } else if (id == messages_list_menu_new_secret_chat) {
+                        Bundle args = new Bundle();
+                        args.putBoolean("onlyUsers", true);
+                        args.putBoolean("destroyAfterSelect", true);
+                        args.putBoolean("usersAsSections", true);
+                        args.putBoolean("createSecretChat", true);
+                        presentFragment(new ContactsActivity(args));
+                    } else if (id == messages_list_menu_new_chat) {
+                        presentFragment(new GroupCreateActivity());
+                    } else if (id == -1) {
+                        if (onlySelect) {
+                            finishFragment();
+                        }
+                    } else if (id == messages_list_menu_new_broadcast) {
+                        Bundle args = new Bundle();
+                        args.putBoolean("broadcast", true);
+                        presentFragment(new GroupCreateActivity(args));
+                    }
+                }
+            });
+
+            searching = false;
+            searchWas = false;
+
+            fragmentView = inflater.inflate(R.layout.messages_list, container, false);
+
+            messagesListViewAdapter = new MessagesAdapter(getParentActivity());
+
+            messagesListView = (ListView)fragmentView.findViewById(R.id.messages_list_view);
+            messagesListView.setAdapter(messagesListViewAdapter);
+
+            progressView = fragmentView.findViewById(R.id.progressLayout);
+            messagesListViewAdapter.notifyDataSetChanged();
+            searchEmptyView = (TextView)fragmentView.findViewById(R.id.searchEmptyView);
+            searchEmptyView.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
+            searchEmptyView.setText(LocaleController.getString("NoResult", R.string.NoResult));
+            emptyView = fragmentView.findViewById(R.id.list_empty_view);
+            emptyView.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
+            TextView textView = (TextView)fragmentView.findViewById(R.id.list_empty_view_text1);
+            textView.setText(LocaleController.getString("NoChats", R.string.NoChats));
+            textView = (TextView)fragmentView.findViewById(R.id.list_empty_view_text2);
+            textView.setText(LocaleController.getString("NoChats", R.string.NoChatsHelp));
+
+            if (MessagesController.getInstance().loadingDialogs && MessagesController.getInstance().dialogs.isEmpty()) {
+                messagesListView.setEmptyView(null);
+                searchEmptyView.setVisibility(View.GONE);
+                emptyView.setVisibility(View.GONE);
+                progressView.setVisibility(View.VISIBLE);
+            } else {
+                if (searching && searchWas) {
+                    messagesListView.setEmptyView(searchEmptyView);
+                    emptyView.setVisibility(View.GONE);
+                } else {
+                    messagesListView.setEmptyView(emptyView);
+                    searchEmptyView.setVisibility(View.GONE);
+                }
+                progressView.setVisibility(View.GONE);
+            }
+
+            messagesListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    if (messagesListViewAdapter == null) {
+                        return;
+                    }
+                    TLObject obj = messagesListViewAdapter.getItem(i);
+                    if (obj == null) {
+                        return;
+                    }
+                    long dialog_id = 0;
+                    if (obj instanceof TLRPC.User) {
+                        dialog_id = ((TLRPC.User) obj).id;
+                        if (messagesListViewAdapter.isGlobalSearch(i)) {
+                            ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
+                            users.add((TLRPC.User)obj);
+                            MessagesController.getInstance().putUsers(users, false);
+                            MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
+                        }
+                    } else if (obj instanceof TLRPC.Chat) {
+                        if (((TLRPC.Chat) obj).id > 0) {
+                            dialog_id = -((TLRPC.Chat) obj).id;
+                        } else {
+                            dialog_id = AndroidUtilities.makeBroadcastId(((TLRPC.Chat) obj).id);
+                        }
+                    } else if (obj instanceof TLRPC.EncryptedChat) {
+                        dialog_id = ((long)((TLRPC.EncryptedChat) obj).id) << 32;
+                    } else if (obj instanceof TLRPC.TL_dialog) {
+                        dialog_id = ((TLRPC.TL_dialog) obj).id;
+                    }
+
+                    if (onlySelect) {
+                        didSelectResult(dialog_id, true, false);
+                    } else {
+                        Bundle args = new Bundle();
+                        int lower_part = (int)dialog_id;
+                        int high_id = (int)(dialog_id >> 32);
+                        if (lower_part != 0) {
+                            if (high_id == 1) {
+                                args.putInt("chat_id", lower_part);
+                            } else {
+                                if (lower_part > 0) {
+                                    args.putInt("user_id", lower_part);
+                                } else if (lower_part < 0) {
+                                    args.putInt("chat_id", -lower_part);
+                                }
+                            }
+                        } else {
+                            args.putInt("enc_id", high_id);
+                        }
+                        if (AndroidUtilities.isTablet()) {
+                            if (openedDialogId == dialog_id) {
+                                return;
+                            }
+                            openedDialogId = dialog_id;
+                        }
+                        presentFragment(new ChatActivity(args));
+                        updateVisibleRows(0);
+                    }
+                }
+            });
+
+            messagesListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
+                @Override
+                public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    if (onlySelect || searching && searchWas || getParentActivity() == null) {
+                        return false;
+                    }
+                    TLRPC.TL_dialog dialog;
+                    if (serverOnly) {
+                        if (i >= MessagesController.getInstance().dialogsServerOnly.size()) {
+                            return false;
+                        }
+                        dialog = MessagesController.getInstance().dialogsServerOnly.get(i);
+                    } else {
+                        if (i >= MessagesController.getInstance().dialogs.size()) {
+                            return false;
+                        }
+                        dialog = MessagesController.getInstance().dialogs.get(i);
+                    }
+                    selectedDialog = dialog.id;
+
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+
+                    int lower_id = (int)selectedDialog;
+                    int high_id = (int)(selectedDialog >> 32);
+
+                    if (lower_id < 0 && high_id != 1) {
+                        builder.setItems(new CharSequence[]{LocaleController.getString("ClearHistory", R.string.ClearHistory), LocaleController.getString("DeleteChat", R.string.DeleteChat)}, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                if (which == 0) {
+                                    MessagesController.getInstance().deleteDialog(selectedDialog, 0, true);
+                                } else if (which == 1) {
+                                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                                    builder.setMessage(LocaleController.getString("AreYouSureDeleteAndExit", R.string.AreYouSureDeleteAndExit));
+                                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                                        @Override
+                                        public void onClick(DialogInterface dialogInterface, int i) {
+                                            MessagesController.getInstance().deleteUserFromChat((int) -selectedDialog, MessagesController.getInstance().getUser(UserConfig.getClientUserId()), null);
+                                            MessagesController.getInstance().deleteDialog(selectedDialog, 0, false);
+                                            if (AndroidUtilities.isTablet()) {
+                                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats, selectedDialog);
+                                            }
+                                        }
+                                    });
+                                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                                    showAlertDialog(builder);
+                                }
+                            }
+                        });
+                    } else {
+                        builder.setItems(new CharSequence[]{LocaleController.getString("ClearHistory", R.string.ClearHistory), LocaleController.getString("Delete", R.string.Delete)}, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                if (which == 0) {
+                                    MessagesController.getInstance().deleteDialog(selectedDialog, 0, true);
+                                } else {
+                                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                                    builder.setMessage(LocaleController.getString("AreYouSureDeleteThisChat", R.string.AreYouSureDeleteThisChat));
+                                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                                        @Override
+                                        public void onClick(DialogInterface dialogInterface, int i) {
+                                            MessagesController.getInstance().deleteDialog(selectedDialog, 0, false);
+                                            if (AndroidUtilities.isTablet()) {
+                                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats, selectedDialog);
+                                            }
+                                        }
+                                    });
+                                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                                    showAlertDialog(builder);
+                                }
+                            }
+                        });
+                    }
+                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                    showAlertDialog(builder);
+                    return true;
+                }
+            });
+
+            messagesListView.setOnScrollListener(new AbsListView.OnScrollListener() {
+                @Override
+                public void onScrollStateChanged(AbsListView absListView, int i) {
+                    if (i == SCROLL_STATE_TOUCH_SCROLL && searching && searchWas) {
+                        AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
+                    }
+                }
+
+                @Override
+                public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+                    if (searching && searchWas) {
+                        return;
+                    }
+                    if (visibleItemCount > 0) {
+                        if (absListView.getLastVisiblePosition() == MessagesController.getInstance().dialogs.size() && !serverOnly || absListView.getLastVisiblePosition() == MessagesController.getInstance().dialogsServerOnly.size() && serverOnly) {
+                            MessagesController.getInstance().loadDialogs(MessagesController.getInstance().dialogs.size(), MessagesController.getInstance().dialogsServerOnly.size(), 100, true);
+                        }
+                    }
+                }
+            });
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        showActionBar();
+        if (messagesListViewAdapter != null) {
+            messagesListViewAdapter.notifyDataSetChanged();
+        }
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.dialogsNeedReload) {
+            if (messagesListViewAdapter != null) {
+                messagesListViewAdapter.notifyDataSetChanged();
+            }
+            if (messagesListView != null) {
+                if (MessagesController.getInstance().loadingDialogs && MessagesController.getInstance().dialogs.isEmpty()) {
+                    if (messagesListView.getEmptyView() != null) {
+                        messagesListView.setEmptyView(null);
+                    }
+                    searchEmptyView.setVisibility(View.GONE);
+                    emptyView.setVisibility(View.GONE);
+                    progressView.setVisibility(View.VISIBLE);
+                } else {
+                    if (messagesListView.getEmptyView() == null) {
+                        if (searching && searchWas) {
+                            messagesListView.setEmptyView(searchEmptyView);
+                            emptyView.setVisibility(View.GONE);
+                        } else {
+                            messagesListView.setEmptyView(emptyView);
+                            searchEmptyView.setVisibility(View.GONE);
+                        }
+                    }
+                    progressView.setVisibility(View.GONE);
+                }
+            }
+        } else if (id == NotificationCenter.emojiDidLoaded) {
+            if (messagesListView != null) {
+                updateVisibleRows(0);
+            }
+        } else if (id == NotificationCenter.updateInterfaces) {
+            updateVisibleRows((Integer)args[0]);
+        } else if (id == NotificationCenter.reloadSearchResults) {
+            int token = (Integer)args[0];
+            if (token == activityToken) {
+                messagesListViewAdapter.updateSearchResults((ArrayList<TLObject>) args[1], (ArrayList<CharSequence>) args[2], (ArrayList<TLRPC.User>) args[3]);
+            }
+        } else if (id == NotificationCenter.appDidLogout) {
+            dialogsLoaded = false;
+        } else if (id == NotificationCenter.encryptedChatUpdated) {
+            updateVisibleRows(0);
+        } else if (id == NotificationCenter.contactsDidLoaded) {
+            updateVisibleRows(0);
+        } else if (id == NotificationCenter.openedChatChanged) {
+            if (!serverOnly && AndroidUtilities.isTablet()) {
+                boolean close = (Boolean)args[1];
+                long dialog_id = (Long)args[0];
+                if (close) {
+                    if (dialog_id == openedDialogId) {
+                        openedDialogId = 0;
+                    }
+                } else {
+                    openedDialogId = dialog_id;
+                }
+                updateVisibleRows(0);
+            }
+        }
+    }
+
+    private void updateVisibleRows(int mask) {
+        if (messagesListView == null) {
+            return;
+        }
+        int count = messagesListView.getChildCount();
+        for (int a = 0; a < count; a++) {
+            View child = messagesListView.getChildAt(a);
+            if (child instanceof DialogCell) {
+                DialogCell cell = (DialogCell) child;
+                if (!serverOnly && AndroidUtilities.isTablet() && cell.getDialog() != null) {
+                    if (cell.getDialog().id == openedDialogId) {
+                        child.setBackgroundColor(0x0f000000);
+                    } else {
+                        child.setBackgroundColor(0);
+                    }
+                }
+                cell.update(mask);
+            } else if (child instanceof ChatOrUserCell) {
+                ((ChatOrUserCell) child).update(mask);
+            }
+        }
+    }
+
+    public void setDelegate(MessagesActivityDelegate delegate) {
+        this.delegate = delegate;
+    }
+
+    public MessagesActivityDelegate getDelegate() {
+        return delegate;
+    }
+
+    private void didSelectResult(final long dialog_id, boolean useAlert, final boolean param) {
+        if (useAlert && selectAlertString != null && selectAlertStringGroup != null) {
+            if (getParentActivity() == null) {
+                return;
+            }
+            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+            int lower_part = (int)dialog_id;
+            int high_id = (int)(dialog_id >> 32);
+            if (lower_part != 0) {
+                if (high_id == 1) {
+                    TLRPC.Chat chat = MessagesController.getInstance().getChat(lower_part);
+                    if (chat == null) {
+                        return;
+                    }
+                    builder.setMessage(LocaleController.formatStringSimple(selectAlertStringGroup, chat.title));
+                } else {
+                    if (lower_part > 0) {
+                        TLRPC.User user = MessagesController.getInstance().getUser(lower_part);
+                        if (user == null) {
+                            return;
+                        }
+                        builder.setMessage(LocaleController.formatStringSimple(selectAlertString, ContactsController.formatName(user.first_name, user.last_name)));
+                    } else if (lower_part < 0) {
+                        TLRPC.Chat chat = MessagesController.getInstance().getChat(-lower_part);
+                        if (chat == null) {
+                            return;
+                        }
+                        builder.setMessage(LocaleController.formatStringSimple(selectAlertStringGroup, chat.title));
+                    }
+                }
+            } else {
+                TLRPC.EncryptedChat chat = MessagesController.getInstance().getEncryptedChat(high_id);
+                TLRPC.User user = MessagesController.getInstance().getUser(chat.user_id);
+                if (user == null) {
+                    return;
+                }
+                builder.setMessage(LocaleController.formatStringSimple(selectAlertString, ContactsController.formatName(user.first_name, user.last_name)));
+            }
+            CheckBox checkBox = null;
+            /*if (delegate instanceof ChatActivity) {
+                checkBox = new CheckBox(getParentActivity());
+                checkBox.setText(LocaleController.getString("ForwardFromMyName", R.string.ForwardFromMyName));
+                checkBox.setChecked(false);
+                builder.setView(checkBox);
+            }*/
+            final CheckBox checkBoxFinal = checkBox;
+            builder.setPositiveButton(R.string.OK, new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialogInterface, int i) {
+                    didSelectResult(dialog_id, false, checkBoxFinal != null && checkBoxFinal.isChecked());
+                }
+            });
+            builder.setNegativeButton(R.string.Cancel, null);
+            showAlertDialog(builder);
+            if (checkBox != null) {
+                ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams)checkBox.getLayoutParams();
+                if (layoutParams != null) {
+                    layoutParams.rightMargin = layoutParams.leftMargin = AndroidUtilities.dp(10);
+                    checkBox.setLayoutParams(layoutParams);
+                }
+            }
+        } else {
+            if (delegate != null) {
+                delegate.didSelectDialog(MessagesActivity.this, dialog_id, param);
+                delegate = null;
+            } else {
+                finishFragment();
+            }
+        }
+    }
+
+    private class MessagesAdapter extends BaseContactsSearchAdapter {
+
+        private Context mContext;
+        private Timer searchTimer;
+        private ArrayList<TLObject> searchResult = new ArrayList<TLObject>();
+        private ArrayList<CharSequence> searchResultNames = new ArrayList<CharSequence>();
+
+        public MessagesAdapter(Context context) {
+            mContext = context;
+        }
+
+        public void updateSearchResults(final ArrayList<TLObject> result, final ArrayList<CharSequence> names, final ArrayList<TLRPC.User> encUsers) {
+            AndroidUtilities.RunOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    for (TLObject obj : result) {
+                        if (obj instanceof TLRPC.User) {
+                            TLRPC.User user = (TLRPC.User) obj;
+                            MessagesController.getInstance().putUser(user, true);
+                        } else if (obj instanceof TLRPC.Chat) {
+                            TLRPC.Chat chat = (TLRPC.Chat) obj;
+                            MessagesController.getInstance().putChat(chat, true);
+                        } else if (obj instanceof TLRPC.EncryptedChat) {
+                            TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat) obj;
+                            MessagesController.getInstance().putEncryptedChat(chat, true);
+                        }
+                    }
+                    for (TLRPC.User user : encUsers) {
+                        MessagesController.getInstance().putUser(user, true);
+                    }
+                    searchResult = result;
+                    searchResultNames = names;
+                    if (searching) {
+                        messagesListViewAdapter.notifyDataSetChanged();
+                    }
+                }
+            });
+        }
+
+        public boolean isGlobalSearch(int i) {
+            if (searching && searchWas) {
+                int localCount = searchResult.size();
+                int globalCount = globalSearch.size();
+                if (i >= 0 && i < localCount) {
+                    return false;
+                } else if (i > localCount && i <= globalCount + localCount) {
+                    return true;
+                }
+            }
+            return false;
+        }
+
+        public void searchDialogs(final String query) {
+            if (query == null) {
+                searchResult.clear();
+                searchResultNames.clear();
+                queryServerSearch(null);
+                notifyDataSetChanged();
+            } else {
+                try {
+                    if (searchTimer != null) {
+                        searchTimer.cancel();
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+                searchTimer = new Timer();
+                searchTimer.schedule(new TimerTask() {
+                    @Override
+                    public void run() {
+                        try {
+                            searchTimer.cancel();
+                            searchTimer = null;
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                        MessagesStorage.getInstance().searchDialogs(activityToken, query, !serverOnly);
+                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                queryServerSearch(query);
+                            }
+                        });
+                    }
+                }, 200, 300);
+            }
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return !(searching && searchWas) || i != searchResult.size();
+        }
+
+        @Override
+        public int getCount() {
+            if (searching && searchWas) {
+                int count = searchResult.size();
+                int globalCount = globalSearch.size();
+                if (globalCount != 0) {
+                    count += globalCount + 1;
+                }
+                return count;
+            }
+            int count;
+            if (serverOnly) {
+                count = MessagesController.getInstance().dialogsServerOnly.size();
+            } else {
+                count = MessagesController.getInstance().dialogs.size();
+            }
+            if (count == 0 && MessagesController.getInstance().loadingDialogs) {
+                return 0;
+            }
+            if (!MessagesController.getInstance().dialogsEndReached) {
+                count++;
+            }
+            return count;
+        }
+
+        @Override
+        public TLObject getItem(int i) {
+            if (searching && searchWas) {
+                int localCount = searchResult.size();
+                int globalCount = globalSearch.size();
+                if (i >= 0 && i < localCount) {
+                    return searchResult.get(i);
+                } else if (i > localCount && i <= globalCount + localCount) {
+                    return globalSearch.get(i - localCount - 1);
+                }
+                return null;
+            }
+            if (serverOnly) {
+                if (i < 0 || i >= MessagesController.getInstance().dialogsServerOnly.size()) {
+                    return null;
+                }
+                return MessagesController.getInstance().dialogsServerOnly.get(i);
+            } else {
+                if (i < 0 || i >= MessagesController.getInstance().dialogs.size()) {
+                    return null;
+                }
+                return MessagesController.getInstance().dialogs.get(i);
+            }
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return true;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+
+            if (type == 3) {
+                if (view == null) {
+                    view = new SettingsSectionLayout(mContext);
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("GlobalSearch", R.string.GlobalSearch));
+                    view.setPadding(AndroidUtilities.dp(11), 0, AndroidUtilities.dp(11), 0);
+                }
+            } else if (type == 2) {
+                if (view == null) {
+                    view = new ChatOrUserCell(mContext);
+                }
+                if (searching && searchWas) {
+                    TLRPC.User user = null;
+                    TLRPC.Chat chat = null;
+                    TLRPC.EncryptedChat encryptedChat = null;
+
+                    ((ChatOrUserCell) view).useSeparator = (i != getCount() - 1 && i != searchResult.size() - 1);
+                    TLObject obj = getItem(i);
+                    if (obj instanceof TLRPC.User) {
+                        user = MessagesController.getInstance().getUser(((TLRPC.User) obj).id);
+                        if (user == null) {
+                            user = (TLRPC.User) obj;
+                        }
+                    } else if (obj instanceof TLRPC.Chat) {
+                        chat = MessagesController.getInstance().getChat(((TLRPC.Chat) obj).id);
+                    } else if (obj instanceof TLRPC.EncryptedChat) {
+                        encryptedChat = MessagesController.getInstance().getEncryptedChat(((TLRPC.EncryptedChat) obj).id);
+                        user = MessagesController.getInstance().getUser(encryptedChat.user_id);
+                    }
+
+                    CharSequence username = null;
+                    CharSequence name = null;
+                    if (i < searchResult.size()) {
+                        name = searchResultNames.get(i);
+                        if (name != null && user != null && user.username != null && user.username.length() > 0) {
+                            if (name.toString().startsWith("@" + user.username)) {
+                                username = name;
+                                name = null;
+                            }
+                        }
+                    } else if (i > searchResult.size() && user != null && user.username != null) {
+                        try {
+                            username = Html.fromHtml(String.format("<font color=\"#357aa8\">@%s</font>%s", user.username.substring(0, lastFoundUsername.length()), user.username.substring(lastFoundUsername.length())));
+                        } catch (Exception e) {
+                            username = user.username;
+                            FileLog.e("tmessages", e);
+                        }
+                    }
+
+                    ((ChatOrUserCell) view).setData(user, chat, encryptedChat, name, username);
+                }
+            } else if (type == 1) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.loading_more_layout, viewGroup, false);
+                }
+            } else if (type == 0) {
+                if (view == null) {
+                    view = new DialogCell(mContext);
+                }
+                ((DialogCell) view).useSeparator = (i != getCount() - 1);
+                if (serverOnly) {
+                    ((DialogCell) view).setDialog(MessagesController.getInstance().dialogsServerOnly.get(i));
+                } else {
+                    TLRPC.TL_dialog dialog = MessagesController.getInstance().dialogs.get(i);
+                    if (AndroidUtilities.isTablet()) {
+                        if (dialog.id == openedDialogId) {
+                            view.setBackgroundColor(0x0f000000);
+                        } else {
+                            view.setBackgroundColor(0);
+                        }
+                    }
+                    ((DialogCell) view).setDialog(dialog);
+                }
+            }
+
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            if (searching && searchWas) {
+                if (i == searchResult.size()) {
+                    return 3;
+                }
+                return 2;
+            }
+            if (serverOnly && i == MessagesController.getInstance().dialogsServerOnly.size() || !serverOnly && i == MessagesController.getInstance().dialogs.size()) {
+                return 1;
+            }
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 4;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            if (searching && searchWas) {
+                return searchResult.size() == 0 && globalSearch.isEmpty();
+            }
+            if (MessagesController.getInstance().loadingDialogs && MessagesController.getInstance().dialogs.isEmpty()) {
+                return false;
+            }
+            int count;
+            if (serverOnly) {
+                count = MessagesController.getInstance().dialogsServerOnly.size();
+            } else {
+                count = MessagesController.getInstance().dialogs.size();
+            }
+            if (count == 0 && MessagesController.getInstance().loadingDialogs) {
+                return true;
+            }
+            if (!MessagesController.getInstance().dialogsEndReached) {
+                count++;
+            }
+            return count == 0;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/PhotoCropActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/PhotoCropActivity.java
new file mode 100644
index 000000000..e1dda773f
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/PhotoCropActivity.java
@@ -0,0 +1,373 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.drawable.BitmapDrawable;
+import android.net.Uri;
+import android.os.Bundle;
+import android.util.AttributeSet;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.ImageLoader;
+import org.tomato.android.LocaleController;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+
+import java.io.File;
+
+public class PhotoCropActivity extends BaseFragment {
+
+    public interface PhotoCropActivityDelegate {
+        public abstract void didFinishCrop(Bitmap bitmap);
+    }
+
+    private class PhotoCropView extends FrameLayout {
+
+        Paint rectPaint = null;
+        Paint circlePaint = null;
+        Paint halfPaint = null;
+        float rectSize = 600;
+        float rectX = -1, rectY = -1;
+        int draggingState = 0;
+        float oldX = 0, oldY = 0;
+        int bitmapWidth, bitmapHeight, bitmapX, bitmapY;
+        int viewWidth, viewHeight;
+
+        public PhotoCropView(Context context) {
+            super(context);
+            init();
+        }
+
+        public PhotoCropView(Context context, AttributeSet attrs) {
+            super(context, attrs);
+            init();
+        }
+
+        public PhotoCropView(Context context, AttributeSet attrs, int defStyle) {
+            super(context, attrs, defStyle);
+            init();
+        }
+
+        private void init() {
+            rectPaint = new Paint();
+            rectPaint.setColor(0xfffafafa);
+            rectPaint.setStrokeWidth(AndroidUtilities.dp(2));
+            rectPaint.setStyle(Paint.Style.STROKE);
+            circlePaint = new Paint();
+            circlePaint.setColor(0x7fffffff);
+            halfPaint = new Paint();
+            halfPaint.setColor(0x3f000000);
+            setBackgroundColor(0xff000000);
+
+            setOnTouchListener(new OnTouchListener() {
+                @Override
+                public boolean onTouch(View view, MotionEvent motionEvent) {
+                    float x = motionEvent.getX();
+                    float y = motionEvent.getY();
+                    int cornerSide = AndroidUtilities.dp(14);
+                    if (motionEvent.getAction() == MotionEvent.ACTION_DOWN) {
+                        if (rectX - cornerSide < x && rectX + cornerSide > x && rectY - cornerSide < y && rectY + cornerSide > y) {
+                            draggingState = 1;
+                        } else if (rectX - cornerSide + rectSize < x && rectX + cornerSide + rectSize > x && rectY - cornerSide < y && rectY + cornerSide > y) {
+                            draggingState = 2;
+                        } else if (rectX - cornerSide < x && rectX + cornerSide > x && rectY - cornerSide + rectSize < y && rectY + cornerSide + rectSize > y) {
+                            draggingState = 3;
+                        } else if (rectX - cornerSide + rectSize < x && rectX + cornerSide + rectSize > x && rectY - cornerSide + rectSize < y && rectY + cornerSide + rectSize > y) {
+                            draggingState = 4;
+                        } else if (rectX < x && rectX + rectSize > x && rectY < y && rectY + rectSize > y) {
+                            draggingState = 5;
+                        } else {
+                            draggingState = 0;
+                        }
+                        if (draggingState != 0) {
+                            PhotoCropView.this.requestDisallowInterceptTouchEvent(true);
+                        }
+                        oldX = x;
+                        oldY = y;
+                    } else if (motionEvent.getAction() == MotionEvent.ACTION_UP) {
+                        draggingState = 0;
+                    } else if (motionEvent.getAction() == MotionEvent.ACTION_MOVE && draggingState != 0) {
+                        float diffX = x - oldX;
+                        float diffY = y - oldY;
+                        if (draggingState == 5) {
+                            rectX += diffX;
+                            rectY += diffY;
+
+                            if (rectX < bitmapX) {
+                                rectX = bitmapX;
+                            } else if (rectX + rectSize > bitmapX + bitmapWidth) {
+                                rectX = bitmapX + bitmapWidth - rectSize;
+                            }
+                            if (rectY < bitmapY) {
+                                rectY = bitmapY;
+                            } else if (rectY + rectSize > bitmapY + bitmapHeight) {
+                                rectY = bitmapY + bitmapHeight - rectSize;
+                            }
+                        } else if (draggingState == 1) {
+                            if (rectSize - diffX < 160) {
+                                diffX = rectSize - 160;
+                            }
+                            if (rectX + diffX < bitmapX) {
+                                diffX = bitmapX - rectX;
+                            }
+                            if (rectY + diffX < bitmapY) {
+                                diffX = bitmapY - rectY;
+                            }
+                            rectX += diffX;
+                            rectY += diffX;
+                            rectSize -= diffX;
+                        } else if (draggingState == 2) {
+                            if (rectSize + diffX < 160) {
+                                diffX = -(rectSize - 160);
+                            }
+                            if (rectX + rectSize + diffX > bitmapX + bitmapWidth) {
+                                diffX = bitmapX + bitmapWidth - rectX - rectSize;
+                            }
+                            if (rectY - diffX < bitmapY) {
+                                diffX = rectY - bitmapY;
+                            }
+                            rectY -= diffX;
+                            rectSize += diffX;
+                        } else if (draggingState == 3) {
+                            if (rectSize - diffX < 160) {
+                                diffX = rectSize - 160;
+                            }
+                            if (rectX + diffX < bitmapX) {
+                                diffX = bitmapX - rectX;
+                            }
+                            if (rectY + rectSize - diffX > bitmapY + bitmapHeight) {
+                                diffX = rectY + rectSize - bitmapY - bitmapHeight;
+                            }
+                            rectX += diffX;
+                            rectSize -= diffX;
+                        } else if (draggingState == 4) {
+                            if (rectX + rectSize + diffX > bitmapX + bitmapWidth) {
+                                diffX = bitmapX + bitmapWidth - rectX - rectSize;
+                            }
+                            if (rectY + rectSize + diffX > bitmapY + bitmapHeight) {
+                                diffX = bitmapY + bitmapHeight - rectY - rectSize;
+                            }
+                            rectSize += diffX;
+                            if (rectSize < 160) {
+                                rectSize = 160;
+                            }
+                        }
+
+                        oldX = x;
+                        oldY = y;
+                        invalidate();
+                    }
+                    return true;
+                }
+            });
+        }
+
+        private void updateBitmapSize() {
+            if (viewWidth == 0 || viewHeight == 0 || imageToCrop == null) {
+                return;
+            }
+            float percX = (rectX - bitmapX) / bitmapWidth;
+            float percY = (rectY - bitmapY) / bitmapHeight;
+            float percSize = rectSize / bitmapWidth;
+            float w = imageToCrop.getWidth();
+            float h = imageToCrop.getHeight();
+            float scaleX = viewWidth / w;
+            float scaleY = viewHeight / h;
+            if (scaleX > scaleY) {
+                bitmapHeight = viewHeight;
+                bitmapWidth = (int)Math.ceil(w * scaleY);
+            } else {
+                bitmapWidth = viewWidth;
+                bitmapHeight = (int)Math.ceil(h * scaleX);
+            }
+            bitmapX = (viewWidth - bitmapWidth) / 2;
+            bitmapY = (viewHeight - bitmapHeight) / 2;
+
+            if (rectX == -1 && rectY == -1) {
+                if (bitmapWidth > bitmapHeight) {
+                    rectY = bitmapY;
+                    rectX = (viewWidth - bitmapHeight) / 2;
+                    rectSize = bitmapHeight;
+                } else {
+                    rectX = bitmapX;
+                    rectY = (viewHeight - bitmapWidth) / 2;
+                    rectSize = bitmapWidth;
+                }
+            } else {
+                rectX = percX * bitmapWidth + bitmapX;
+                rectY = percY * bitmapHeight + bitmapY;
+                rectSize = percSize * bitmapWidth;
+            }
+            invalidate();
+        }
+
+        @Override
+        protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+            super.onLayout(changed, left, top, right, bottom);
+            viewWidth = right - left;
+            viewHeight = bottom - top;
+            updateBitmapSize();
+        }
+
+        public Bitmap getBitmap() {
+            float percX = (rectX - bitmapX) / bitmapWidth;
+            float percY = (rectY - bitmapY) / bitmapHeight;
+            float percSize = rectSize / bitmapWidth;
+            int x = (int)(percX * imageToCrop.getWidth());
+            int y = (int)(percY * imageToCrop.getHeight());
+            int size = (int)(percSize * imageToCrop.getWidth());
+            if (x + size > imageToCrop.getWidth()) {
+                size = imageToCrop.getWidth() - x;
+            }
+            if (y + size > imageToCrop.getHeight()) {
+                size = imageToCrop.getHeight() - y;
+            }
+            try {
+                return Bitmap.createBitmap(imageToCrop, x, y, size, size);
+            } catch (Exception e) {
+                FileLog.e("tmessags", e);
+                System.gc();
+                try {
+                    return Bitmap.createBitmap(imageToCrop, x, y, size, size);
+                } catch (Exception e2) {
+                    FileLog.e("tmessages", e2);
+                }
+            }
+            return null;
+        }
+
+        @Override
+        protected void onDraw(Canvas canvas) {
+            if (drawable != null) {
+                drawable.setBounds(bitmapX, bitmapY, bitmapX + bitmapWidth, bitmapY + bitmapHeight);
+                drawable.draw(canvas);
+            }
+            canvas.drawRect(bitmapX, bitmapY, bitmapX + bitmapWidth, rectY, halfPaint);
+            canvas.drawRect(bitmapX, rectY, rectX, rectY + rectSize, halfPaint);
+            canvas.drawRect(rectX + rectSize, rectY, bitmapX + bitmapWidth, rectY + rectSize, halfPaint);
+            canvas.drawRect(bitmapX, rectY + rectSize, bitmapX + bitmapWidth, bitmapY + bitmapHeight, halfPaint);
+
+            canvas.drawRect(rectX, rectY, rectX + rectSize, rectY + rectSize, rectPaint);
+
+            int side = AndroidUtilities.dp(7);
+            canvas.drawRect(rectX - side, rectY - side, rectX + side, rectY + side, circlePaint);
+            canvas.drawRect(rectX + rectSize - side, rectY - side, rectX + rectSize + side, rectY + side, circlePaint);
+            canvas.drawRect(rectX - side, rectY + rectSize - side, rectX + side, rectY + rectSize + side, circlePaint);
+            canvas.drawRect(rectX + rectSize - side, rectY + rectSize - side, rectX + rectSize + side, rectY + rectSize + side, circlePaint);
+        }
+    }
+
+    private Bitmap imageToCrop;
+    private BitmapDrawable drawable;
+    private PhotoCropActivityDelegate delegate = null;
+    private PhotoCropView view;
+    private boolean sameBitmap = false;
+    private boolean doneButtonPressed = false;
+
+    public PhotoCropActivity(Bundle args) {
+        super(args);
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        swipeBackEnabled = false;
+        String photoPath = getArguments().getString("photoPath");
+        Uri photoUri = getArguments().getParcelable("photoUri");
+        if (photoPath == null && photoUri == null) {
+            return false;
+        }
+        if (photoPath != null) {
+            File f = new File(photoPath);
+            if (!f.exists()) {
+                return false;
+            }
+        }
+        int size = 0;
+        if (AndroidUtilities.isTablet()) {
+            size = AndroidUtilities.dp(520);
+        } else {
+            size = Math.max(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y);
+        }
+        imageToCrop = ImageLoader.loadBitmap(photoPath, photoUri, size, size);
+        if (imageToCrop == null) {
+            return false;
+        }
+        drawable = new BitmapDrawable(imageToCrop);
+        super.onFragmentCreate();
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        drawable = null;
+        if (imageToCrop != null && !sameBitmap) {
+            imageToCrop.recycle();
+            imageToCrop = null;
+        }
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setCustomView(R.layout.settings_do_action_layout);
+            Button cancelButton = (Button)actionBarLayer.findViewById(R.id.cancel_button);
+            cancelButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    finishFragment();
+                }
+            });
+            View doneButton = actionBarLayer.findViewById(R.id.done_button);
+            doneButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    if (delegate != null && !doneButtonPressed) {
+                        Bitmap bitmap = view.getBitmap();
+                        if (bitmap == imageToCrop) {
+                            sameBitmap = true;
+                        }
+                        delegate.didFinishCrop(bitmap);
+                        doneButtonPressed = true;
+                    }
+                    finishFragment();
+                }
+            });
+
+            cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
+            TextView textView = (TextView)doneButton.findViewById(R.id.done_button_text);
+            textView.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
+
+            fragmentView = view = new PhotoCropView(getParentActivity());
+            fragmentView.setLayoutParams(new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT));
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    public void setDelegate(PhotoCropActivityDelegate delegate) {
+        this.delegate = delegate;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/PhotoPickerActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/PhotoPickerActivity.java
new file mode 100644
index 000000000..65a347d84
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/PhotoPickerActivity.java
@@ -0,0 +1,596 @@
+/*
+ * This is the source code of Telegram for Android v. 1.4.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.tomato.ui;
+
+import android.app.Activity;
+import android.content.Context;
+import android.os.Build;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.Surface;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.view.WindowManager;
+import android.widget.AdapterView;
+import android.widget.Button;
+import android.widget.GridView;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MediaController;
+import org.tomato.android.MessageObject;
+import org.tomato.android.NotificationCenter;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.ui.Adapters.BaseFragmentAdapter;
+import org.tomato.ui.Views.ActionBar.ActionBarLayer;
+import org.tomato.ui.Views.ActionBar.ActionBarMenu;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+import org.tomato.ui.Views.BackupImageView;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+
+public class PhotoPickerActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, PhotoViewer.PhotoViewerProvider {
+
+    public static interface PhotoPickerActivityDelegate {
+        public abstract void didSelectPhotos(ArrayList<String> photos);
+        public abstract void startPhotoSelectActivity();
+    }
+
+    private ArrayList<MediaController.AlbumEntry> albumsSorted = null;
+    private HashMap<Integer, MediaController.PhotoEntry> selectedPhotos = new HashMap<Integer, MediaController.PhotoEntry>();
+    private Integer cameraAlbumId = null;
+    private boolean loading = false;
+    private MediaController.AlbumEntry selectedAlbum = null;
+
+    private GridView listView;
+    private ListAdapter listAdapter;
+    private View progressView;
+    private TextView emptyView;
+    private View doneButton;
+    private TextView doneButtonTextView;
+    private TextView doneButtonBadgeTextView;
+    private int itemWidth = 100;
+    private boolean sendPressed = false;
+
+    private PhotoPickerActivityDelegate delegate;
+
+    @Override
+    public boolean onFragmentCreate() {
+        loading = true;
+        MediaController.loadGalleryPhotosAlbums(classGuid);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.albumsDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeChats);
+        return super.onFragmentCreate();
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.albumsDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
+        super.onFragmentDestroy();
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setBackgroundColor(0xff333333);
+            actionBarLayer.setItemsBackground(R.drawable.bar_selector_picker);
+            actionBarLayer.setDisplayUseLogoEnabled(true, R.drawable.gallery);
+            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.photo_back);
+            actionBarLayer.setTitle(LocaleController.getString("Gallery", R.string.Gallery));
+            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        if (selectedAlbum != null) {
+                            selectedAlbum = null;
+                            actionBarLayer.setTitle(LocaleController.getString("Gallery", R.string.Gallery));
+                            fixLayoutInternal();
+                        } else {
+                            if (Build.VERSION.SDK_INT < 11) {
+                                listView.setAdapter(null);
+                                listView = null;
+                                listAdapter = null;
+                            }
+                            finishFragment();
+                        }
+                    } else if (id == 1) {
+                        if (delegate != null) {
+                            finishFragment(false);
+                            delegate.startPhotoSelectActivity();
+                        }
+                    }
+                }
+            });
+
+            ActionBarMenu menu = actionBarLayer.createMenu();
+            menu.addItem(1, R.drawable.ic_ab_other_white2);
+
+            fragmentView = inflater.inflate(R.layout.photo_picker_layout, container, false);
+
+            emptyView = (TextView)fragmentView.findViewById(R.id.searchEmptyView);
+            emptyView.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
+            emptyView.setText(LocaleController.getString("NoPhotos", R.string.NoPhotos));
+            listView = (GridView)fragmentView.findViewById(R.id.media_grid);
+            progressView = fragmentView.findViewById(R.id.progressLayout);
+
+            Button cancelButton = (Button)fragmentView.findViewById(R.id.cancel_button);
+            cancelButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    finishFragment();
+                }
+            });
+            doneButton = fragmentView.findViewById(R.id.done_button);
+            doneButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    sendSelectedPhotos();
+                }
+            });
+
+            cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
+            doneButtonTextView = (TextView)doneButton.findViewById(R.id.done_button_text);
+            doneButtonTextView.setText(LocaleController.getString("Send", R.string.Send).toUpperCase());
+            doneButtonBadgeTextView = (TextView)doneButton.findViewById(R.id.done_button_badge);
+
+            listView.setAdapter(listAdapter = new ListAdapter(getParentActivity()));
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    if (selectedAlbum == null) {
+                        if (i < 0 || i >= albumsSorted.size()) {
+                            return;
+                        }
+                        selectedAlbum = albumsSorted.get(i);
+                        actionBarLayer.setTitle(selectedAlbum.bucketName);
+                        fixLayoutInternal();
+                    } else {
+                        if (i < 0 || i >= selectedAlbum.photos.size()) {
+                            return;
+                        }
+                        PhotoViewer.getInstance().setParentActivity(getParentActivity());
+                        PhotoViewer.getInstance().openPhotoForSelect(selectedAlbum.photos, i, PhotoPickerActivity.this);
+                    }
+                }
+            });
+            if (loading && (albumsSorted == null || albumsSorted != null && albumsSorted.isEmpty())) {
+                progressView.setVisibility(View.VISIBLE);
+                listView.setEmptyView(null);
+            } else {
+                progressView.setVisibility(View.GONE);
+                listView.setEmptyView(emptyView);
+            }
+            updateSelectedCount();
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+        fixLayout();
+    }
+
+    @Override
+    public void onConfigurationChanged(android.content.res.Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        fixLayout();
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.albumsDidLoaded) {
+            int guid = (Integer)args[0];
+            if (classGuid == guid) {
+                albumsSorted = (ArrayList<MediaController.AlbumEntry>)args[1];
+                if (args[2] != null) {
+                    cameraAlbumId = (Integer) args[2];
+                }
+                if (progressView != null) {
+                    progressView.setVisibility(View.GONE);
+                }
+                if (listView != null && listView.getEmptyView() == null) {
+                    listView.setEmptyView(emptyView);
+                }
+                if (listAdapter != null) {
+                    listAdapter.notifyDataSetChanged();
+                }
+                loading = false;
+            }
+        } else if (id == NotificationCenter.closeChats) {
+            removeSelfFromStack();
+        }
+    }
+
+    @Override
+    public boolean onBackPressed() {
+        if (selectedAlbum != null) {
+            selectedAlbum = null;
+            actionBarLayer.setTitle(LocaleController.getString("Gallery", R.string.Gallery));
+            fixLayoutInternal();
+            return false;
+        }
+        return super.onBackPressed();
+    }
+
+    @Override
+    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+        if (selectedAlbum == null) {
+            return null;
+        }
+        int count = listView.getChildCount();
+
+        for (int a = 0; a < count; a++) {
+            View view = listView.getChildAt(a);
+            BackupImageView imageView = (BackupImageView)view.findViewById(R.id.media_photo_image);
+            if (imageView != null) {
+                int num = (Integer)imageView.getTag();
+                if (num < 0 || num >= selectedAlbum.photos.size()) {
+                    continue;
+                }
+                if (num == index) {
+                    int coords[] = new int[2];
+                    imageView.getLocationInWindow(coords);
+                    PhotoViewer.PlaceProviderObject object = new PhotoViewer.PlaceProviderObject();
+                    object.viewX = coords[0];
+                    object.viewY = coords[1] - AndroidUtilities.statusBarHeight;
+                    object.parentView = listView;
+                    object.imageReceiver = imageView.imageReceiver;
+                    object.thumb = object.imageReceiver.getBitmap();
+                    View frameView = view.findViewById(R.id.photo_frame);
+                    frameView.setVisibility(View.GONE);
+                    ImageView checkImageView = (ImageView)view.findViewById(R.id.photo_check);
+                    checkImageView.setVisibility(View.GONE);
+                    return object;
+                }
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+        int count = listView.getChildCount();
+        for (int a = 0; a < count; a++) {
+            View view = listView.getChildAt(a);
+            if (view.getTag() == null) {
+                continue;
+            }
+            int num = (Integer)view.getTag();
+            if (num < 0 || num >= selectedAlbum.photos.size()) {
+                continue;
+            }
+            if (num == index) {
+                View frameView = view.findViewById(R.id.photo_frame);
+                frameView.setVisibility(View.VISIBLE);
+                ImageView checkImageView = (ImageView)view.findViewById(R.id.photo_check);
+                checkImageView.setVisibility(View.VISIBLE);
+                break;
+            }
+        }
+    }
+
+    @Override
+    public void willHidePhotoViewer() {
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+    }
+
+    @Override
+    public boolean isPhotoChecked(int index) {
+        if (selectedAlbum == null || index < 0 || index >= selectedAlbum.photos.size()) {
+            return false;
+        }
+        MediaController.PhotoEntry photoEntry = selectedAlbum.photos.get(index);
+        return selectedPhotos.containsKey(photoEntry.imageId);
+    }
+
+    @Override
+    public void setPhotoChecked(int index) {
+        if (selectedAlbum == null || index < 0 || index >= selectedAlbum.photos.size()) {
+            return;
+        }
+        MediaController.PhotoEntry photoEntry = selectedAlbum.photos.get(index);
+        if (selectedPhotos.containsKey(photoEntry.imageId)) {
+            selectedPhotos.remove(photoEntry.imageId);
+        } else {
+            selectedPhotos.put(photoEntry.imageId, photoEntry);
+        }
+        int count = listView.getChildCount();
+
+        for (int a = 0; a < count; a++) {
+            View view = listView.getChildAt(a);
+            int num = (Integer)view.getTag();
+            if (num == index) {
+                updateSelectedPhoto(view, photoEntry);
+                break;
+            }
+        }
+        updateSelectedCount();
+    }
+
+    @Override
+    public void cancelButtonPressed() {
+        finishFragment();
+    }
+
+    @Override
+    public void sendButtonPressed(int index) {
+        if (selectedPhotos.isEmpty()) {
+            if (selectedAlbum == null || index < 0 || index >= selectedAlbum.photos.size()) {
+                return;
+            }
+            MediaController.PhotoEntry photoEntry = selectedAlbum.photos.get(index);
+            selectedPhotos.put(photoEntry.imageId, photoEntry);
+        }
+        sendSelectedPhotos();
+    }
+
+    @Override
+    public int getSelectedCount() {
+        return selectedPhotos.size();
+    }
+
+    public void setDelegate(PhotoPickerActivityDelegate delegate) {
+        this.delegate = delegate;
+    }
+
+    private void sendSelectedPhotos() {
+        if (selectedPhotos.isEmpty() || delegate == null || sendPressed) {
+            return;
+        }
+        sendPressed = true;
+        ArrayList<String> photos = new ArrayList<String>();
+        for (HashMap.Entry<Integer, MediaController.PhotoEntry> entry : selectedPhotos.entrySet()) {
+            MediaController.PhotoEntry photoEntry = entry.getValue();
+            if (photoEntry.path != null) {
+                photos.add(photoEntry.path);
+            }
+        }
+        delegate.didSelectPhotos(photos);
+        finishFragment();
+    }
+
+    private void fixLayout() {
+        if (listView != null) {
+            ViewTreeObserver obs = listView.getViewTreeObserver();
+            obs.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+                @Override
+                public boolean onPreDraw() {
+                    fixLayoutInternal();
+                    if (listView != null) {
+                        listView.getViewTreeObserver().removeOnPreDrawListener(this);
+                    }
+                    return false;
+                }
+            });
+        }
+    }
+
+    private void fixLayoutInternal() {
+        if (getParentActivity() == null) {
+            return;
+        }
+        int position = listView.getFirstVisiblePosition();
+        WindowManager manager = (WindowManager)ApplicationLoader.applicationContext.getSystemService(Activity.WINDOW_SERVICE);
+        int rotation = manager.getDefaultDisplay().getRotation();
+
+        int columnsCount = 2;
+        if (selectedAlbum != null) {
+            if (AndroidUtilities.isTablet()) {
+                columnsCount = 3;
+            } else {
+                if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
+                    columnsCount = 5;
+                } else {
+                    columnsCount = 3;
+                }
+            }
+        } else {
+            if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
+                columnsCount = 4;
+            }
+        }
+        listView.setNumColumns(columnsCount);
+        if (AndroidUtilities.isTablet()) {
+            itemWidth = (AndroidUtilities.dp(490) - ((columnsCount + 1) * AndroidUtilities.dp(4))) / columnsCount;
+        } else {
+            itemWidth = (AndroidUtilities.displaySize.x - ((columnsCount + 1) * AndroidUtilities.dp(4))) / columnsCount;
+        }
+        listView.setColumnWidth(itemWidth);
+
+        listAdapter.notifyDataSetChanged();
+        listView.setSelection(position);
+    }
+
+    private void updateSelectedCount() {
+        if (selectedPhotos.isEmpty()) {
+            doneButtonTextView.setTextColor(0xff999999);
+            doneButtonTextView.setCompoundDrawablesWithIntrinsicBounds(R.drawable.selectphoto_small_grey, 0, 0, 0);
+            doneButtonBadgeTextView.setVisibility(View.GONE);
+            doneButton.setEnabled(false);
+        } else {
+            doneButtonTextView.setTextColor(0xffffffff);
+            doneButtonTextView.setCompoundDrawablesWithIntrinsicBounds(0, 0, 0, 0);
+            doneButtonBadgeTextView.setVisibility(View.VISIBLE);
+            doneButtonBadgeTextView.setText("" + selectedPhotos.size());
+            doneButton.setEnabled(true);
+        }
+    }
+
+    private void updateSelectedPhoto(View view, MediaController.PhotoEntry photoEntry) {
+        View frameView = view.findViewById(R.id.photo_frame);
+        ImageView checkImageView = (ImageView)view.findViewById(R.id.photo_check);
+        if (selectedPhotos.containsKey(photoEntry.imageId)) {
+            frameView.setBackgroundResource(R.drawable.photoborder);
+            checkImageView.setImageResource(R.drawable.selectphoto_small_active);
+            checkImageView.setBackgroundColor(0xff42d1f6);
+        } else {
+            frameView.setBackgroundDrawable(null);
+            checkImageView.setImageResource(R.drawable.selectphoto_small);
+            checkImageView.setBackgroundColor(0x501c1c1c);
+        }
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return true;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return true;
+        }
+
+        @Override
+        public int getCount() {
+            if (selectedAlbum != null) {
+                return selectedAlbum.photos.size();
+            }
+            return albumsSorted != null ? albumsSorted.size() : 0;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return true;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            if (type == 0) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.photo_picker_album_layout, viewGroup, false);
+                }
+                ViewGroup.LayoutParams params = view.getLayoutParams();
+                params.width = itemWidth;
+                params.height = itemWidth;
+                view.setLayoutParams(params);
+
+                MediaController.AlbumEntry albumEntry = albumsSorted.get(i);
+                BackupImageView imageView = (BackupImageView)view.findViewById(R.id.media_photo_image);
+                if (albumEntry.coverPhoto != null && albumEntry.coverPhoto.path != null) {
+                    imageView.setImage("thumb://" + albumEntry.coverPhoto.imageId + ":" + albumEntry.coverPhoto.path, null, R.drawable.nophotos);
+                } else {
+                    imageView.setImageResource(R.drawable.nophotos);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.album_name);
+                textView.setText(albumEntry.bucketName);
+                if (cameraAlbumId != null && albumEntry.bucketId == cameraAlbumId) {
+
+                } else {
+
+                }
+                textView = (TextView)view.findViewById(R.id.album_count);
+                textView.setText("" + albumEntry.photos.size());
+            } else if (type == 1) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.photo_picker_photo_layout, viewGroup, false);
+                    View checkImageView = view.findViewById(R.id.photo_check_frame);
+                    checkImageView.setOnClickListener(new View.OnClickListener() {
+                        @Override
+                        public void onClick(View v) {
+                            MediaController.PhotoEntry photoEntry = selectedAlbum.photos.get((Integer)((View)v.getParent()).getTag());
+                            if (selectedPhotos.containsKey(photoEntry.imageId)) {
+                                selectedPhotos.remove(photoEntry.imageId);
+                            } else {
+                                selectedPhotos.put(photoEntry.imageId, photoEntry);
+                            }
+                            updateSelectedPhoto((View)v.getParent(), photoEntry);
+                            updateSelectedCount();
+                        }
+                    });
+                }
+                ViewGroup.LayoutParams params = view.getLayoutParams();
+                params.width = itemWidth;
+                params.height = itemWidth;
+                view.setLayoutParams(params);
+
+                MediaController.PhotoEntry photoEntry = selectedAlbum.photos.get(i);
+                BackupImageView imageView = (BackupImageView)view.findViewById(R.id.media_photo_image);
+                imageView.setTag(i);
+                view.setTag(i);
+                if (photoEntry.path != null) {
+                    imageView.setImage("thumb://" + photoEntry.imageId + ":" + photoEntry.path, null, R.drawable.nophotos);
+                } else {
+                    imageView.setImageResource(R.drawable.nophotos);
+                }
+                updateSelectedPhoto(view, photoEntry);
+                boolean showing = PhotoViewer.getInstance().isShowingImage(photoEntry.path);
+                imageView.imageReceiver.setVisible(!showing, false);
+                View frameView = view.findViewById(R.id.photo_frame);
+                frameView.setVisibility(showing ? View.GONE : View.VISIBLE);
+                ImageView checkImageView = (ImageView)view.findViewById(R.id.photo_check);
+                checkImageView.setVisibility(showing ? View.GONE : View.VISIBLE);
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            if (selectedAlbum != null) {
+                return 1;
+            }
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 2;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            if (selectedAlbum != null) {
+                return selectedAlbum.photos.isEmpty();
+            }
+            return albumsSorted == null || albumsSorted.isEmpty();
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/tomato/ui/PhotoViewer.java
new file mode 100644
index 000000000..3065fbbd1
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/PhotoViewer.java
@@ -0,0 +1,2433 @@
+/*
+ * This is the source code of Telegram for Android v. 1.4.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.tomato.ui;
+
+import android.animation.Animator;
+import android.animation.AnimatorListenerAdapter;
+import android.animation.AnimatorSet;
+import android.animation.ObjectAnimator;
+import android.annotation.SuppressLint;
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
+import android.graphics.PixelFormat;
+import android.graphics.Rect;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.ColorDrawable;
+import android.net.Uri;
+import android.os.Bundle;
+import android.text.TextUtils;
+import android.view.GestureDetector;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.Surface;
+import android.view.VelocityTracker;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.view.WindowManager;
+import android.view.animation.AlphaAnimation;
+import android.view.animation.Animation;
+import android.view.animation.AnimationSet;
+import android.view.animation.DecelerateInterpolator;
+import android.view.animation.ScaleAnimation;
+import android.widget.Button;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.ProgressBar;
+import android.widget.Scroller;
+import android.widget.TextView;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.ContactsController;
+import org.tomato.android.ImageReceiver;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MediaController;
+import org.tomato.android.MessageObject;
+import org.tomato.android.MessagesController;
+import org.tomato.android.MessagesStorage;
+import org.tomato.android.NotificationCenter;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLoader;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
+import org.tomato.messenger.Utilities;
+import org.tomato.ui.Views.ActionBar.ActionBar;
+import org.tomato.ui.Views.ActionBar.ActionBarLayer;
+import org.tomato.ui.Views.ActionBar.ActionBarMenu;
+import org.tomato.ui.Views.ActionBar.ActionBarMenuItem;
+import org.tomato.ui.Views.ClippingImageView;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Locale;
+
+public class PhotoViewer implements NotificationCenter.NotificationCenterDelegate, GestureDetector.OnGestureListener, GestureDetector.OnDoubleTapListener {
+    private int classGuid;
+    private PhotoViewerProvider placeProvider;
+    private boolean isVisible;
+
+    private Activity parentActivity;
+
+    private ActionBar actionBar;
+    private ActionBarLayer actionBarLayer;
+    private boolean isActionBarVisible = true;
+
+    private WindowManager.LayoutParams windowLayoutParams;
+    private FrameLayoutDrawer containerView;
+    private FrameLayoutTouchListener windowView;
+    private ClippingImageView animatingImageView;
+    private FrameLayout bottomLayout;
+    private TextView nameTextView;
+    private TextView dateTextView;
+    private ImageView deleteButton;
+    private ProgressBar progressBar;
+    private ActionBarMenuItem menuItem;
+    private ColorDrawable backgroundDrawable = new ColorDrawable(0xff000000);
+    private OverlayView currentOverlay;
+    private ImageView checkImageView;
+    private View pickerView;
+    private TextView doneButtonTextView;
+    private TextView doneButtonBadgeTextView;
+    private ImageView shareButton;
+    private boolean canShowBottom = true;
+    private boolean overlayViewVisible = true;
+
+    private int animationInProgress = 0;
+    private long transitionAnimationStartTime = 0;
+    private Runnable animationEndRunnable = null;
+    private PlaceProviderObject showAfterAnimation;
+    private PlaceProviderObject hideAfterAnimation;
+    private boolean disableShowCheck = false;
+    private Animation.AnimationListener animationListener;
+
+    private ImageReceiver leftImage = new ImageReceiver();
+    private ImageReceiver centerImage = new ImageReceiver();
+    private ImageReceiver rightImage = new ImageReceiver();
+    private int currentIndex;
+    private MessageObject currentMessageObject;
+    private TLRPC.FileLocation currentFileLocation;
+    private String currentFileName;
+    private PlaceProviderObject currentPlaceObject;
+    private String currentPathObject;
+    private Bitmap currentThumb = null;
+
+    private int avatarsUserId;
+    private long currentDialogId;
+    private int totalImagesCount;
+    private boolean isFirstLoading;
+    private boolean needSearchImageInArr;
+    private boolean loadingMoreImages;
+    private boolean cacheEndReached;
+    private boolean opennedFromMedia;
+
+    private boolean draggingDown = false;
+    private float dragY;
+    private float translationX = 0;
+    private float translationY = 0;
+    private float scale = 1;
+    private float animateToX;
+    private float animateToY;
+    private float animateToScale;
+    private long animationDuration;
+    private long animationStartTime;
+    private GestureDetector gestureDetector;
+    private DecelerateInterpolator interpolator = new DecelerateInterpolator();
+    private float pinchStartDistance = 0;
+    private float pinchStartScale = 1;
+    private float pinchCenterX;
+    private float pinchCenterY;
+    private float pinchStartX;
+    private float pinchStartY;
+    private float moveStartX;
+    private float moveStartY;
+    private float minX;
+    private float maxX;
+    private float minY;
+    private float maxY;
+    private boolean canZoom = true;
+    private boolean changingPage = false;
+    private boolean zooming = false;
+    private boolean moving = false;
+    private boolean doubleTap = false;
+    private boolean invalidCoords = false;
+    private boolean canDragDown = true;
+    private boolean zoomAnimation = false;
+    private int switchImageAfterAnimation = 0;
+    private VelocityTracker velocityTracker = null;
+    private Scroller scroller = null;
+
+    private ArrayList<MessageObject> imagesArrTemp = new ArrayList<MessageObject>();
+    private HashMap<Integer, MessageObject> imagesByIdsTemp = new HashMap<Integer, MessageObject>();
+    private ArrayList<MessageObject> imagesArr = new ArrayList<MessageObject>();
+    private HashMap<Integer, MessageObject> imagesByIds = new HashMap<Integer, MessageObject>();
+    private ArrayList<TLRPC.FileLocation> imagesArrLocations = new ArrayList<TLRPC.FileLocation>();
+    private ArrayList<TLRPC.Photo> avatarsArr = new ArrayList<TLRPC.Photo>();
+    private ArrayList<Integer> imagesArrLocationsSizes = new ArrayList<Integer>();
+    private ArrayList<MediaController.PhotoEntry> imagesArrLocals = new ArrayList<MediaController.PhotoEntry>();
+    private TLRPC.FileLocation currentUserAvatarLocation = null;
+
+    private final static int gallery_menu_save = 1;
+    private final static int gallery_menu_showall = 2;
+    private final static int gallery_menu_send = 3;
+
+    private final static int PAGE_SPACING = AndroidUtilities.dp(30);
+
+    private static class OverlayView extends FrameLayout {
+
+        public TextView actionButton;
+
+        public OverlayView(Context context) {
+            super(context);
+
+            actionButton = new TextView(context);
+            actionButton.setBackgroundResource(R.drawable.system_black);
+            actionButton.setPadding(AndroidUtilities.dp(8), AndroidUtilities.dp(2), AndroidUtilities.dp(8), AndroidUtilities.dp(2));
+            actionButton.setTextColor(0xffffffff);
+            actionButton.setTextSize(26);
+            actionButton.setGravity(Gravity.CENTER);
+            addView(actionButton);
+            LayoutParams layoutParams = (LayoutParams)actionButton.getLayoutParams();
+            layoutParams.width = LayoutParams.WRAP_CONTENT;
+            layoutParams.height = LayoutParams.WRAP_CONTENT;
+            layoutParams.gravity = Gravity.CENTER;
+            actionButton.setLayoutParams(layoutParams);
+            actionButton.setOnClickListener(new OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    getInstance().onActionClick(OverlayView.this);
+                }
+            });
+        }
+    }
+
+    public static class PlaceProviderObject {
+        public ImageReceiver imageReceiver;
+        public int viewX;
+        public int viewY;
+        public View parentView;
+        public Bitmap thumb;
+        public int user_id;
+        public int index;
+        public int size;
+    }
+
+    public static interface PhotoViewerProvider {
+        public PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index);
+        public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index);
+        public void willHidePhotoViewer();
+        public boolean isPhotoChecked(int index);
+        public void setPhotoChecked(int index);
+        public void cancelButtonPressed();
+        public void sendButtonPressed(int index);
+        public int getSelectedCount();
+    }
+
+    private class FrameLayoutTouchListener extends FrameLayout {
+        public FrameLayoutTouchListener(Context context) {
+            super(context);
+        }
+
+        @Override
+        public boolean onTouchEvent(MotionEvent event) {
+            return getInstance().onTouchEvent(event);
+        }
+
+        @Override
+        protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+            super.onLayout(changed, left, top, right, bottom);
+            getInstance().onLayout(changed, left, top, right, bottom);
+        }
+    }
+
+    private class FrameLayoutDrawer extends FrameLayout {
+        public FrameLayoutDrawer(Context context) {
+            super(context);
+            setWillNotDraw(false);
+        }
+
+        @Override
+        protected void onAnimationEnd() {
+            super.onAnimationEnd();
+            if (getInstance().animationListener != null) {
+                getInstance().animationListener.onAnimationEnd(null);
+            }
+        }
+
+        @Override
+        protected void onDraw(Canvas canvas) {
+            getInstance().onDraw(canvas);
+        }
+    }
+
+    private static volatile PhotoViewer Instance = null;
+    public static PhotoViewer getInstance() {
+        PhotoViewer localInstance = Instance;
+        if (localInstance == null) {
+            synchronized (PhotoViewer.class) {
+                localInstance = Instance;
+                if (localInstance == null) {
+                    Instance = localInstance = new PhotoViewer();
+                }
+            }
+        }
+        return localInstance;
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.FileDidFailedLoad) {
+            String location = (String)args[0];
+            if (currentFileName != null && currentFileName.equals(location)) {
+                progressBar.setVisibility(View.GONE);
+                updateActionOverlays();
+            }
+        } else if (id == NotificationCenter.FileDidLoaded) {
+            String location = (String)args[0];
+            if (currentFileName != null && currentFileName.equals(location)) {
+                progressBar.setVisibility(View.GONE);
+                updateActionOverlays();
+            }
+        } else if (id == NotificationCenter.FileLoadProgressChanged) {
+            String location = (String)args[0];
+            if (currentFileName != null && currentFileName.equals(location)) {
+                Float progress = (Float)args[1];
+                progressBar.setVisibility(View.VISIBLE);
+                if (android.os.Build.VERSION.SDK_INT >= 11) {
+                    progressBar.setProgress((int) (progress * 100));
+                    AnimatorSet animatorSet = new AnimatorSet();
+                    animatorSet.playTogether(
+                            ObjectAnimator.ofInt(progressBar, "progress", (int) (progress * 100))
+                    );
+                    animatorSet.setDuration(400);
+                    animatorSet.start();
+                } else {
+                    progressBar.setProgress((int) (progress * 100));
+                }
+            }
+        } else if (id == NotificationCenter.userPhotosLoaded) {
+            int guid = (Integer)args[4];
+            int uid = (Integer)args[0];
+            if (avatarsUserId == uid && classGuid == guid) {
+                boolean fromCache = (Boolean)args[3];
+
+                int setToImage = -1;
+                ArrayList<TLRPC.Photo> photos = (ArrayList<TLRPC.Photo>)args[5];
+                if (photos.isEmpty()) {
+                    return;
+                }
+                imagesArrLocations.clear();
+                imagesArrLocationsSizes.clear();
+                avatarsArr.clear();
+                for (TLRPC.Photo photo : photos) {
+                    if (photo instanceof TLRPC.TL_photoEmpty || photo.sizes == null) {
+                        continue;
+                    }
+                    TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(photo.sizes, 640);
+                    if (sizeFull != null) {
+                        if (currentFileLocation != null) {
+                            for (TLRPC.PhotoSize size : photo.sizes) {
+                                if (size.location.local_id == currentFileLocation.local_id && size.location.volume_id == currentFileLocation.volume_id) {
+                                    setToImage = imagesArrLocations.size();
+                                    break;
+                                }
+                            }
+                        }
+                        imagesArrLocations.add(sizeFull.location);
+                        imagesArrLocationsSizes.add(sizeFull.size);
+                        avatarsArr.add(photo);
+                    }
+                }
+                if (!avatarsArr.isEmpty()) {
+                    deleteButton.setVisibility(View.VISIBLE);
+                } else {
+                    deleteButton.setVisibility(View.GONE);
+                }
+                needSearchImageInArr = false;
+                currentIndex = -1;
+                if (setToImage != -1) {
+                    setImageIndex(setToImage, true);
+                } else {
+                    avatarsArr.add(0, new TLRPC.TL_photoEmpty());
+                    imagesArrLocations.add(0, currentFileLocation);
+                    imagesArrLocationsSizes.add(0, 0);
+                    setImageIndex(0, true);
+                }
+                if (fromCache) {
+                    MessagesController.getInstance().loadUserPhotos(avatarsUserId, 0, 30, 0, false, classGuid);
+                }
+            }
+        } else if (id == NotificationCenter.mediaCountDidLoaded) {
+            long uid = (Long)args[0];
+            if (uid == currentDialogId) {
+                if ((int)currentDialogId != 0 && (Boolean)args[2]) {
+                    MessagesController.getInstance().getMediaCount(currentDialogId, classGuid, false);
+                }
+                totalImagesCount = (Integer)args[1];
+                if (needSearchImageInArr && isFirstLoading) {
+                    isFirstLoading = false;
+                    loadingMoreImages = true;
+                    MessagesController.getInstance().loadMedia(currentDialogId, 0, 100, 0, true, classGuid);
+                } else if (!imagesArr.isEmpty()) {
+                    actionBarLayer.setTitle(LocaleController.formatString("Of", R.string.Of, (totalImagesCount - imagesArr.size()) + currentIndex + 1, totalImagesCount));
+                }
+            }
+        } else if (id == NotificationCenter.mediaDidLoaded) {
+            long uid = (Long)args[0];
+            int guid = (Integer)args[4];
+            if (uid == currentDialogId && guid == classGuid) {
+                loadingMoreImages = false;
+                ArrayList<MessageObject> arr = (ArrayList<MessageObject>)args[2];
+                boolean fromCache = (Boolean)args[3];
+                cacheEndReached = !fromCache;
+                if (needSearchImageInArr) {
+                    if (arr.isEmpty()) {
+                        needSearchImageInArr = false;
+                        return;
+                    }
+                    int foundIndex = -1;
+
+                    MessageObject currentMessage = imagesArr.get(currentIndex);
+
+                    int added = 0;
+                    for (MessageObject message : arr) {
+                        if (!imagesByIdsTemp.containsKey(message.messageOwner.id)) {
+                            added++;
+                            imagesArrTemp.add(0, message);
+                            imagesByIdsTemp.put(message.messageOwner.id, message);
+                            if (message.messageOwner.id == currentMessage.messageOwner.id) {
+                                foundIndex = arr.size() - added;
+                            }
+                        }
+                    }
+                    if (added == 0) {
+                        totalImagesCount = imagesArr.size();
+                    }
+
+                    if (foundIndex != -1) {
+                        imagesArr.clear();
+                        imagesArr.addAll(imagesArrTemp);
+                        imagesByIds.clear();
+                        imagesByIds.putAll(imagesByIdsTemp);
+                        imagesArrTemp.clear();
+                        imagesByIdsTemp.clear();
+                        needSearchImageInArr = false;
+                        currentIndex = -1;
+                        if (foundIndex >= imagesArr.size()) {
+                            foundIndex = imagesArr.size() - 1;
+                        }
+                        setImageIndex(foundIndex, true);
+                    } else {
+                        if (!cacheEndReached || !arr.isEmpty() && added != 0) {
+                            loadingMoreImages = true;
+                            MessagesController.getInstance().loadMedia(currentDialogId, 0, 100, imagesArrTemp.get(0).messageOwner.id, true, classGuid);
+                        }
+                    }
+                } else {
+                    int added = 0;
+                    for (MessageObject message : arr) {
+                        if (!imagesByIds.containsKey(message.messageOwner.id)) {
+                            added++;
+                            imagesArr.add(0, message);
+                            imagesByIds.put(message.messageOwner.id, message);
+                        }
+                    }
+                    if (arr.isEmpty() && !fromCache) {
+                        totalImagesCount = arr.size();
+                    }
+                    if (added != 0) {
+                        int index = currentIndex;
+                        currentIndex = -1;
+                        setImageIndex(index + added, true);
+                    } else {
+                        totalImagesCount = imagesArr.size();
+                    }
+                }
+            }
+        }
+    }
+
+    public void setParentActivity(Activity activity) {
+        if (parentActivity == activity) {
+            return;
+        }
+        parentActivity = activity;
+
+        scroller = new Scroller(activity);
+
+        windowView = new FrameLayoutTouchListener(activity);
+        windowView.setBackgroundDrawable(backgroundDrawable);
+        windowView.setFocusable(false);
+
+        animatingImageView = new ClippingImageView(windowView.getContext());
+        windowView.addView(animatingImageView);
+
+        containerView = new FrameLayoutDrawer(activity);
+        containerView.setFocusable(false);
+        windowView.addView(containerView);
+        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)containerView.getLayoutParams();
+        layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+        layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+        layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
+        containerView.setLayoutParams(layoutParams);
+
+        windowLayoutParams = new WindowManager.LayoutParams();
+        windowLayoutParams.height = WindowManager.LayoutParams.MATCH_PARENT;
+        windowLayoutParams.format = PixelFormat.TRANSLUCENT;
+        windowLayoutParams.width = WindowManager.LayoutParams.MATCH_PARENT;
+        windowLayoutParams.gravity = Gravity.TOP;
+        windowLayoutParams.type = WindowManager.LayoutParams.LAST_APPLICATION_WINDOW;
+        windowLayoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;
+
+        actionBar = new ActionBar(activity);
+        containerView.addView(actionBar);
+        actionBar.setBackgroundColor(0x7F000000);
+        layoutParams = (FrameLayout.LayoutParams)actionBar.getLayoutParams();
+        layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+        actionBar.setLayoutParams(layoutParams);
+        actionBarLayer = actionBar.createLayer();
+        actionBarLayer.setItemsBackground(R.drawable.bar_selector_white);
+        actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.photo_back);
+        actionBarLayer.setTitle(LocaleController.formatString("Of", R.string.Of, 1, 1));
+        actionBar.setCurrentActionBarLayer(actionBarLayer);
+
+        actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    closePhoto(true);
+                } else if (id == gallery_menu_save) {
+                    File f = null;
+                    if (currentMessageObject != null) {
+                        f = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
+                    } else if (currentFileLocation != null) {
+                        f = FileLoader.getPathToAttach(currentFileLocation, avatarsUserId != 0);
+                    }
+
+                    if (f != null && f.exists()) {
+                        MediaController.saveFile(f.toString(), parentActivity, currentFileName.endsWith("mp4") ? 1 : 0, null);
+                    }
+                } else if (id == gallery_menu_showall) {
+                    if (opennedFromMedia) {
+                        closePhoto(true);
+                    } else if (currentDialogId != 0) {
+                        closePhoto(false);
+                        Bundle args2 = new Bundle();
+                        args2.putLong("dialog_id", currentDialogId);
+                        ((LaunchActivity)parentActivity).presentFragment(new MediaActivity(args2), false, true);
+                    }
+                } else if (id == gallery_menu_send) {
+                    /*Intent intent = new Intent(this, MessagesActivity.class);
+                    intent.putExtra("onlySelect", true);
+                    startActivityForResult(intent, 10);
+                    if (requestCode == 10) {
+                        int chatId = data.getIntExtra("chatId", 0);
+                        int userId = data.getIntExtra("userId", 0);
+                        int dialog_id = 0;
+                        if (chatId != 0) {
+                            dialog_id = -chatId;
+                        } else if (userId != 0) {
+                            dialog_id = userId;
+                        }
+                        TLRPC.FileLocation location = getCurrentFile();
+                        if (dialog_id != 0 && location != null) {
+                            Intent intent = new Intent(GalleryImageViewer.this, ChatActivity.class);
+                            if (chatId != 0) {
+                                intent.putExtra("chatId", chatId);
+                            } else {
+                                intent.putExtra("userId", userId);
+                            }
+                            startActivity(intent);
+                            NotificationCenter.getInstance().postNotificationName(MessagesController.closeChats);
+                            finish();
+                            if (withoutBottom) {
+                                MessagesController.getInstance().sendMessage(location, dialog_id);
+                            } else {
+                                int item = mViewPager.getCurrentItem();
+                                MessageObject obj = localPagerAdapter.imagesArr.get(item);
+                                MessagesController.getInstance().sendMessage(obj, dialog_id);
+                            }
+                        }
+                    }*/
+                }
+            }
+
+            @Override
+            public boolean canOpenMenu() {
+                if (currentMessageObject != null) {
+                    File f = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
+                    if (f.exists()) {
+                        return true;
+                    }
+                } else if (currentFileLocation != null) {
+                    File f = FileLoader.getPathToAttach(currentFileLocation, avatarsUserId != 0);
+                    if (f.exists()) {
+                        return true;
+                    }
+                }
+                return false;
+            }
+        });
+
+        ActionBarMenu menu = actionBarLayer.createMenu();
+        menuItem = menu.addItem(0, R.drawable.ic_ab_other_white);
+        menuItem.addSubItem(gallery_menu_save, LocaleController.getString("SaveToGallery", R.string.SaveToGallery), 0);
+        menuItem.addSubItem(gallery_menu_showall, LocaleController.getString("ShowAllMedia", R.string.ShowAllMedia), 0);
+
+        bottomLayout = new FrameLayout(containerView.getContext());
+        containerView.addView(bottomLayout);
+        layoutParams = (FrameLayout.LayoutParams)bottomLayout.getLayoutParams();
+        layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+        layoutParams.height = AndroidUtilities.dp(48);
+        layoutParams.gravity = Gravity.BOTTOM | Gravity.LEFT;
+        bottomLayout.setLayoutParams(layoutParams);
+        bottomLayout.setBackgroundColor(0x7F000000);
+
+        shareButton = new ImageView(containerView.getContext());
+        shareButton.setImageResource(R.drawable.ic_ab_share_white);
+        shareButton.setScaleType(ImageView.ScaleType.CENTER);
+        shareButton.setBackgroundResource(R.drawable.bar_selector_white);
+        bottomLayout.addView(shareButton);
+        layoutParams = (FrameLayout.LayoutParams) shareButton.getLayoutParams();
+        layoutParams.width = AndroidUtilities.dp(50);
+        layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+        shareButton.setLayoutParams(layoutParams);
+        shareButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (parentActivity == null) {
+                    return;
+                }
+                try {
+                    File f = null;
+
+                    if (currentMessageObject != null) {
+                        f = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
+                    } else if (currentFileLocation != null) {
+                        f = FileLoader.getPathToAttach(currentFileLocation, avatarsUserId != 0);
+                    }
+
+                    if (f.exists()) {
+                        Intent intent = new Intent(Intent.ACTION_SEND);
+                        if (f.toString().endsWith("mp4")) {
+                            intent.setType("video/mp4");
+                        } else {
+                            intent.setType("image/jpeg");
+                        }
+                        intent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(f));
+                        parentActivity.startActivity(intent);
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        });
+
+        deleteButton = new ImageView(containerView.getContext());
+        deleteButton.setImageResource(R.drawable.ic_ab_delete_white);
+        deleteButton.setScaleType(ImageView.ScaleType.CENTER);
+        deleteButton.setBackgroundResource(R.drawable.bar_selector_white);
+        bottomLayout.addView(deleteButton);
+        layoutParams = (FrameLayout.LayoutParams) deleteButton.getLayoutParams();
+        layoutParams.width = AndroidUtilities.dp(50);
+        layoutParams.height = FrameLayout.LayoutParams.MATCH_PARENT;
+        layoutParams.gravity = Gravity.RIGHT;
+        deleteButton.setLayoutParams(layoutParams);
+        deleteButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (!imagesArr.isEmpty()) {
+                    if (currentIndex < 0 || currentIndex >= imagesArr.size()) {
+                        return;
+                    }
+                    MessageObject obj = imagesArr.get(currentIndex);
+                    if (obj.isSent()) {
+                        ArrayList<Integer> arr = new ArrayList<Integer>();
+                        arr.add(obj.messageOwner.id);
+
+                        ArrayList<Long> random_ids = null;
+                        TLRPC.EncryptedChat encryptedChat = null;
+                        if ((int)obj.getDialogId() == 0 && obj.messageOwner.random_id != 0) {
+                            random_ids = new ArrayList<Long>();
+                            random_ids.add(obj.messageOwner.random_id);
+                            encryptedChat = MessagesController.getInstance().getEncryptedChat((int)(obj.getDialogId() >> 32));
+                        }
+
+                        MessagesController.getInstance().deleteMessages(arr, random_ids, encryptedChat);
+                        closePhoto(false);
+                    }
+                } else if (!avatarsArr.isEmpty()) {
+                    if (currentIndex < 0 || currentIndex >= avatarsArr.size()) {
+                        return;
+                    }
+                    TLRPC.Photo photo = avatarsArr.get(currentIndex);
+                    TLRPC.FileLocation currentLocation = imagesArrLocations.get(currentIndex);
+                    if (photo instanceof TLRPC.TL_photoEmpty) {
+                        photo = null;
+                    }
+                    boolean current = false;
+                    if (currentUserAvatarLocation != null) {
+                        if (photo != null) {
+                            for (TLRPC.PhotoSize size : photo.sizes) {
+                                if (size.location.local_id == currentUserAvatarLocation.local_id && size.location.volume_id == currentUserAvatarLocation.volume_id) {
+                                    current = true;
+                                    break;
+                                }
+                            }
+                        } else if (currentLocation.local_id == currentUserAvatarLocation.local_id && currentLocation.volume_id == currentUserAvatarLocation.volume_id) {
+                            current = true;
+                        }
+                    }
+                    if (current) {
+                        MessagesController.getInstance().deleteUserPhoto(null);
+                        closePhoto(false);
+                    } else if (photo != null) {
+                        TLRPC.TL_inputPhoto inputPhoto = new TLRPC.TL_inputPhoto();
+                        inputPhoto.id = photo.id;
+                        inputPhoto.access_hash = photo.access_hash;
+                        MessagesController.getInstance().deleteUserPhoto(inputPhoto);
+                        MessagesStorage.getInstance().clearUserPhoto(avatarsUserId, photo.id);
+                        imagesArrLocations.remove(currentIndex);
+                        imagesArrLocationsSizes.remove(currentIndex);
+                        avatarsArr.remove(currentIndex);
+                        if (imagesArrLocations.isEmpty()) {
+                            closePhoto(false);
+                        } else {
+                            int index = currentIndex;
+                            if (index >= avatarsArr.size()) {
+                                index = avatarsArr.size() - 1;
+                            }
+                            currentIndex = -1;
+                            setImageIndex(index, true);
+                        }
+                    }
+                }
+            }
+        });
+
+        nameTextView = new TextView(containerView.getContext());
+        nameTextView.setTextSize(17);
+        nameTextView.setSingleLine(true);
+        nameTextView.setMaxLines(1);
+        nameTextView.setEllipsize(TextUtils.TruncateAt.END);
+        nameTextView.setTextColor(0xffffffff);
+        nameTextView.setGravity(Gravity.CENTER);
+        bottomLayout.addView(nameTextView);
+        layoutParams = (FrameLayout.LayoutParams)nameTextView.getLayoutParams();
+        layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+        layoutParams.height = FrameLayout.LayoutParams.WRAP_CONTENT;
+        layoutParams.gravity = Gravity.TOP;
+        layoutParams.leftMargin = AndroidUtilities.dp(60);
+        layoutParams.rightMargin = AndroidUtilities.dp(60);
+        layoutParams.topMargin = AndroidUtilities.dp(2);
+        nameTextView.setLayoutParams(layoutParams);
+
+        dateTextView = new TextView(containerView.getContext());
+        dateTextView.setTextSize(14);
+        dateTextView.setSingleLine(true);
+        dateTextView.setMaxLines(1);
+        dateTextView.setEllipsize(TextUtils.TruncateAt.END);
+        dateTextView.setTextColor(0xffb8bdbe);
+        dateTextView.setGravity(Gravity.CENTER);
+        bottomLayout.addView(dateTextView);
+        layoutParams = (FrameLayout.LayoutParams)dateTextView.getLayoutParams();
+        layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+        layoutParams.height = FrameLayout.LayoutParams.WRAP_CONTENT;
+        layoutParams.gravity = Gravity.TOP;
+        layoutParams.leftMargin = AndroidUtilities.dp(60);
+        layoutParams.rightMargin = AndroidUtilities.dp(60);
+        layoutParams.topMargin = AndroidUtilities.dp(26);
+        dateTextView.setLayoutParams(layoutParams);
+
+        pickerView = parentActivity.getLayoutInflater().inflate(R.layout.photo_picker_bottom_layout, null);
+        containerView.addView(pickerView);
+        Button cancelButton = (Button)pickerView.findViewById(R.id.cancel_button);
+        cancelButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                if (placeProvider != null) {
+                    placeProvider.cancelButtonPressed();
+                    closePhoto(false);
+                }
+            }
+        });
+        View doneButton = pickerView.findViewById(R.id.done_button);
+        doneButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                if (placeProvider != null) {
+                    placeProvider.sendButtonPressed(currentIndex);
+                    closePhoto(false);
+                }
+            }
+        });
+
+        layoutParams = (FrameLayout.LayoutParams)pickerView.getLayoutParams();
+        layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+        layoutParams.height = AndroidUtilities.dp(48);
+        layoutParams.gravity = Gravity.BOTTOM;
+        pickerView.setLayoutParams(layoutParams);
+
+        cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
+        doneButtonTextView = (TextView)doneButton.findViewById(R.id.done_button_text);
+        doneButtonTextView.setText(LocaleController.getString("Send", R.string.Send).toUpperCase());
+        doneButtonBadgeTextView = (TextView)doneButton.findViewById(R.id.done_button_badge);
+
+        progressBar = new ProgressBar(containerView.getContext(), null, android.R.attr.progressBarStyleHorizontal);
+        progressBar.setVisibility(View.GONE);
+        progressBar.setMax(100);
+        progressBar.setProgressDrawable(parentActivity.getResources().getDrawable(R.drawable.photo_progress));
+        containerView.addView(progressBar);
+        layoutParams = (FrameLayout.LayoutParams)progressBar.getLayoutParams();
+        layoutParams.width = FrameLayout.LayoutParams.MATCH_PARENT;
+        layoutParams.height = AndroidUtilities.dp(3);
+        layoutParams.gravity = Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL;
+        layoutParams.leftMargin = AndroidUtilities.dp(6);
+        layoutParams.rightMargin = AndroidUtilities.dp(6);
+        layoutParams.bottomMargin = AndroidUtilities.dp(48);
+        progressBar.setLayoutParams(layoutParams);
+
+        gestureDetector = new GestureDetector(containerView.getContext(), this);
+        gestureDetector.setOnDoubleTapListener(this);
+
+        centerImage.setParentView(containerView);
+        leftImage.setParentView(containerView);
+        rightImage.setParentView(containerView);
+
+        currentOverlay = new OverlayView(containerView.getContext());
+        containerView.addView(currentOverlay);
+        currentOverlay.setVisibility(View.GONE);
+
+        checkImageView = new ImageView(containerView.getContext());
+        containerView.addView(checkImageView);
+        checkImageView.setVisibility(View.GONE);
+        checkImageView.setScaleType(ImageView.ScaleType.CENTER);
+        checkImageView.setImageResource(R.drawable.selectphoto_large);
+        layoutParams = (FrameLayout.LayoutParams)checkImageView.getLayoutParams();
+        layoutParams.width = AndroidUtilities.dp(46);
+        layoutParams.height = AndroidUtilities.dp(46);
+        layoutParams.gravity = Gravity.RIGHT;
+        layoutParams.rightMargin = AndroidUtilities.dp(10);
+        WindowManager manager = (WindowManager)ApplicationLoader.applicationContext.getSystemService(Activity.WINDOW_SERVICE);
+        int rotation = manager.getDefaultDisplay().getRotation();
+        if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
+            layoutParams.topMargin = AndroidUtilities.dp(48);
+        } else {
+            layoutParams.topMargin = AndroidUtilities.dp(58);
+        }
+        checkImageView.setLayoutParams(layoutParams);
+        checkImageView.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (placeProvider != null) {
+                    placeProvider.setPhotoChecked(currentIndex);
+                    if (placeProvider.isPhotoChecked(currentIndex)) {
+                        checkImageView.setBackgroundColor(0xff42d1f6);
+                    } else {
+                        checkImageView.setBackgroundColor(0x801c1c1c);
+                    }
+                    updateSelectedCount();
+                }
+            }
+        });
+    }
+
+    private void toggleOverlayView(boolean show) {
+        if (overlayViewVisible == show) {
+            return;
+        }
+        if (currentOverlay.getVisibility() == View.VISIBLE) {
+            overlayViewVisible = show;
+            if (android.os.Build.VERSION.SDK_INT >= 11) {
+                AnimatorSet animatorSet = new AnimatorSet();
+                animatorSet.playTogether(
+                        ObjectAnimator.ofFloat(currentOverlay, "alpha", show ? 1.0f : 0.0f)
+                );
+                animatorSet.setDuration(200);
+                animatorSet.start();
+            } else {
+                AlphaAnimation animation = new AlphaAnimation(show ? 0.0f : 1.0f, show ? 1.0f : 0.0f);
+                animation.setDuration(200);
+                animation.setFillAfter(true);
+                currentOverlay.startAnimation(animation);
+            }
+        }
+    }
+
+    private void toggleActionBar(boolean show, boolean animated) {
+        if (show) {
+            actionBar.setVisibility(View.VISIBLE);
+            if (canShowBottom) {
+                bottomLayout.setVisibility(View.VISIBLE);
+            }
+        }
+        isActionBarVisible = show;
+        actionBar.setEnabled(show);
+        actionBarLayer.setEnabled(show);
+        bottomLayout.setEnabled(show);
+        if (android.os.Build.VERSION.SDK_INT >= 11) {
+            if (animated) {
+                AnimatorSet animatorSet = new AnimatorSet();
+                animatorSet.playTogether(
+                        ObjectAnimator.ofFloat(actionBar, "alpha", show ? 1.0f : 0.0f),
+                        ObjectAnimator.ofFloat(bottomLayout, "alpha", show ? 1.0f : 0.0f)
+                );
+                if (!show) {
+                    animatorSet.addListener(new AnimatorListenerAdapter() {
+                        @Override
+                        public void onAnimationEnd(Animator animation) {
+                            actionBar.setVisibility(View.GONE);
+                            if (canShowBottom) {
+                                bottomLayout.setVisibility(View.GONE);
+                            }
+                        }
+                    });
+                }
+
+                animatorSet.setDuration(250);
+                animatorSet.start();
+            } else {
+                actionBar.setAlpha(show ? 1.0f : 0.0f);
+                bottomLayout.setAlpha(show ? 1.0f : 0.0f);
+                if (!show) {
+                    actionBar.setVisibility(View.GONE);
+                    if (canShowBottom) {
+                        bottomLayout.setVisibility(View.GONE);
+                    }
+                }
+            }
+        } else {
+            if (!show) {
+                actionBar.setVisibility(View.GONE);
+                if (canShowBottom) {
+                    bottomLayout.setVisibility(View.GONE);
+                }
+            }
+        }
+    }
+
+    private String getFileName(int index, TLRPC.InputFileLocation fileLocation) {
+        if (index < 0) {
+            return null;
+        }
+        TLRPC.InputFileLocation file = fileLocation != null ? fileLocation : getInputFileLocation(index);
+        if (file == null) {
+            return null;
+        }
+        if (!imagesArrLocations.isEmpty()) {
+            return file.volume_id + "_" + file.local_id + ".jpg";
+        } else if (!imagesArr.isEmpty()) {
+            MessageObject message = imagesArr.get(index);
+            if (message.messageOwner instanceof TLRPC.TL_messageService) {
+                return file.volume_id + "_" + file.local_id + ".jpg";
+            } else if (message.messageOwner.media != null) {
+                if (message.messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
+                    return file.volume_id + "_" + file.id + ".mp4";
+                } else if (message.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
+                    return file.volume_id + "_" + file.local_id + ".jpg";
+                }
+            }
+        }
+        return null;
+    }
+
+    private TLRPC.FileLocation getFileLocation(int index, int size[]) {
+        if (index < 0) {
+            return null;
+        }
+        if (!imagesArrLocations.isEmpty()) {
+            if (index >= imagesArrLocations.size()) {
+                return null;
+            }
+            size[0] = imagesArrLocationsSizes.get(index);
+            return imagesArrLocations.get(index);
+        } else if (!imagesArr.isEmpty()) {
+            if (index >= imagesArr.size()) {
+                return null;
+            }
+            MessageObject message = imagesArr.get(index);
+            if (message.messageOwner instanceof TLRPC.TL_messageService) {
+                if (message.messageOwner.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
+                    return message.messageOwner.action.newUserPhoto.photo_big;
+                } else {
+                    TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(message.messageOwner.action.photo.sizes, AndroidUtilities.getPhotoSize());
+                    if (sizeFull != null) {
+                        size[0] = sizeFull.size;
+                        if (size[0] == 0) {
+                            size[0] = -1;
+                        }
+                        return sizeFull.location;
+                    } else {
+                        size[0] = -1;
+                    }
+                }
+            } else if (message.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto && message.messageOwner.media.photo != null) {
+                TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(message.messageOwner.media.photo.sizes, AndroidUtilities.getPhotoSize());
+                if (sizeFull != null) {
+                    size[0] = sizeFull.size;
+                    if (size[0] == 0) {
+                        size[0] = -1;
+                    }
+                    return sizeFull.location;
+                } else {
+                    size[0] = -1;
+                }
+            } else if (message.messageOwner.media instanceof TLRPC.TL_messageMediaVideo && message.messageOwner.media.video != null && message.messageOwner.media.video.thumb != null) {
+                size[0] = message.messageOwner.media.video.thumb.size;
+                if (size[0] == 0) {
+                    size[0] = -1;
+                }
+                return message.messageOwner.media.video.thumb.location;
+            }
+        }
+        return null;
+    }
+
+    private TLRPC.InputFileLocation getInputFileLocation(int index) {
+        if (index < 0) {
+            return null;
+        }
+        if (!imagesArrLocations.isEmpty()) {
+            if (index >= imagesArrLocations.size()) {
+                return null;
+            }
+            TLRPC.FileLocation sizeFull = imagesArrLocations.get(index);
+            TLRPC.TL_inputFileLocation location = new TLRPC.TL_inputFileLocation();
+            location.local_id = sizeFull.local_id;
+            location.volume_id = sizeFull.volume_id;
+            location.id = sizeFull.dc_id;
+            location.secret = sizeFull.secret;
+            return location;
+        } else if (!imagesArr.isEmpty()) {
+            if (index >= imagesArr.size()) {
+                return null;
+            }
+            MessageObject message = imagesArr.get(index);
+            if (message.messageOwner instanceof TLRPC.TL_messageService) {
+                if (message.messageOwner.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
+                    TLRPC.FileLocation sizeFull = message.messageOwner.action.newUserPhoto.photo_big;
+                    TLRPC.TL_inputFileLocation location = new TLRPC.TL_inputFileLocation();
+                    location.local_id = sizeFull.local_id;
+                    location.volume_id = sizeFull.volume_id;
+                    location.id = sizeFull.dc_id;
+                    location.secret = sizeFull.secret;
+                    return location;
+                } else {
+                    TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(message.messageOwner.action.photo.sizes, AndroidUtilities.getPhotoSize());
+                    if (sizeFull != null) {
+                        TLRPC.TL_inputFileLocation location = new TLRPC.TL_inputFileLocation();
+                        location.local_id = sizeFull.location.local_id;
+                        location.volume_id = sizeFull.location.volume_id;
+                        location.id = sizeFull.location.dc_id;
+                        location.secret = sizeFull.location.secret;
+                        return location;
+                    }
+                }
+            } else if (message.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
+                TLRPC.PhotoSize sizeFull = FileLoader.getClosestPhotoSizeWithSize(message.messageOwner.media.photo.sizes, AndroidUtilities.getPhotoSize());
+                if (sizeFull != null) {
+                    TLRPC.TL_inputFileLocation location = new TLRPC.TL_inputFileLocation();
+                    location.local_id = sizeFull.location.local_id;
+                    location.volume_id = sizeFull.location.volume_id;
+                    location.id = sizeFull.location.dc_id;
+                    location.secret = sizeFull.location.secret;
+                    return location;
+                }
+            } else if (message.messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
+                TLRPC.TL_inputVideoFileLocation location = new TLRPC.TL_inputVideoFileLocation();
+                location.volume_id = message.messageOwner.media.video.dc_id;
+                location.id = message.messageOwner.media.video.id;
+                return location;
+            }
+        }
+        return null;
+    }
+
+    private void updateSelectedCount() {
+        if (placeProvider == null) {
+            return;
+        }
+        int count = placeProvider.getSelectedCount();
+        if (count == 0) {
+            doneButtonTextView.setTextColor(0xffffffff);
+            doneButtonTextView.setCompoundDrawablesWithIntrinsicBounds(R.drawable.selectphoto_small, 0, 0, 0);
+            doneButtonBadgeTextView.setVisibility(View.GONE);
+        } else {
+            doneButtonTextView.setTextColor(0xffffffff);
+            doneButtonTextView.setCompoundDrawablesWithIntrinsicBounds(0, 0, 0, 0);
+            doneButtonBadgeTextView.setVisibility(View.VISIBLE);
+            doneButtonBadgeTextView.setText("" + count);
+        }
+    }
+
+    private void updateActionOverlays() {
+        if (currentMessageObject == null || currentFileName == null) {
+            currentOverlay.setVisibility(View.GONE);
+            return;
+        }
+        if (currentFileName.endsWith("mp4")) {
+            if (!currentMessageObject.isSending() && !currentMessageObject.isSendError()) {
+                currentOverlay.setVisibility(View.VISIBLE);
+                boolean load = false;
+                if (currentMessageObject.messageOwner.attachPath != null && currentMessageObject.messageOwner.attachPath.length() != 0) {
+                    File f = new File(currentMessageObject.messageOwner.attachPath);
+                    if (f.exists()) {
+                        currentOverlay.actionButton.setText(LocaleController.getString("ViewVideo", R.string.ViewVideo));
+                    } else {
+                        load = true;
+                    }
+                } else {
+                    File cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
+                    if (cacheFile.exists()) {
+                        currentOverlay.actionButton.setText(LocaleController.getString("ViewVideo", R.string.ViewVideo));
+                    } else {
+                        load = true;
+                    }
+                }
+                if (load) {
+                    if (FileLoader.getInstance().isLoadingFile(currentFileName)) {
+                        Float progress = FileLoader.getInstance().getFileProgress(currentFileName);
+                        currentOverlay.actionButton.setText(LocaleController.getString("CancelDownload", R.string.CancelDownload));
+                        progressBar.setVisibility(View.VISIBLE);
+                        if (progress != null) {
+                            progressBar.setProgress((int)(progress * 100));
+                        }
+                    } else {
+                        currentOverlay.actionButton.setText(String.format("%s %s", LocaleController.getString("DOWNLOAD", R.string.DOWNLOAD), Utilities.formatFileSize(currentMessageObject.messageOwner.media.video.size)));
+                        progressBar.setVisibility(View.GONE);
+                    }
+                }
+            }
+        } else {
+            currentOverlay.setVisibility(View.GONE);
+        }
+    }
+
+    private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLocation fileLocation, final ArrayList<MessageObject> messages, final ArrayList<MediaController.PhotoEntry> photos, int index, final PlaceProviderObject object) {
+        classGuid = ConnectionsManager.getInstance().generateClassGuid();
+        currentMessageObject = null;
+        currentFileLocation = null;
+        currentPathObject = null;
+        currentIndex = -1;
+        currentFileName = null;
+        avatarsUserId = 0;
+        currentDialogId = 0;
+        totalImagesCount = 0;
+        isFirstLoading = true;
+        needSearchImageInArr = false;
+        loadingMoreImages = false;
+        cacheEndReached = false;
+        opennedFromMedia = false;
+        canShowBottom = true;
+        imagesArr.clear();
+        imagesArrLocations.clear();
+        imagesArrLocationsSizes.clear();
+        avatarsArr.clear();
+        imagesArrLocals.clear();
+        imagesByIds.clear();
+        imagesArrTemp.clear();
+        imagesByIdsTemp.clear();
+        currentUserAvatarLocation = null;
+        currentThumb = object.thumb;
+        menuItem.setVisibility(View.VISIBLE);
+        bottomLayout.setVisibility(View.VISIBLE);
+        checkImageView.setVisibility(View.GONE);
+        pickerView.setVisibility(View.GONE);
+
+        if (messageObject != null && messages == null) {
+            imagesArr.add(messageObject);
+            if (messageObject.messageOwner.action == null || messageObject.messageOwner.action instanceof TLRPC.TL_messageActionEmpty) {
+                needSearchImageInArr = true;
+                imagesByIds.put(messageObject.messageOwner.id, messageObject);
+                if (messageObject.messageOwner.dialog_id != 0) {
+                    currentDialogId = messageObject.messageOwner.dialog_id;
+                } else {
+                    if (messageObject.messageOwner.to_id.chat_id != 0) {
+                        currentDialogId = -messageObject.messageOwner.to_id.chat_id;
+                    } else {
+                        if (messageObject.messageOwner.to_id.user_id == UserConfig.getClientUserId()) {
+                            currentDialogId = messageObject.messageOwner.from_id;
+                        } else {
+                            currentDialogId = messageObject.messageOwner.to_id.user_id;
+                        }
+                    }
+                }
+                menuItem.showSubItem(gallery_menu_showall);
+            } else {
+                menuItem.hideSubItem(gallery_menu_showall);
+            }
+            if ((int) currentDialogId == 0) {
+                menuItem.hideSubItem(gallery_menu_save);
+                shareButton.setVisibility(View.GONE);
+            } else {
+                menuItem.showSubItem(gallery_menu_save);
+                shareButton.setVisibility(View.VISIBLE);
+            }
+            setImageIndex(0, true);
+        } else if (fileLocation != null) {
+            avatarsUserId = object.user_id;
+            imagesArrLocations.add(fileLocation);
+            imagesArrLocationsSizes.add(object.size);
+            avatarsArr.add(new TLRPC.TL_photoEmpty());
+            bottomLayout.setVisibility(View.GONE);
+            shareButton.setVisibility(View.VISIBLE);
+            menuItem.hideSubItem(gallery_menu_showall);
+            setImageIndex(0, true);
+            currentUserAvatarLocation = fileLocation;
+        } else if (messages != null) {
+            imagesArr.addAll(messages);
+            Collections.reverse(imagesArr);
+            for (MessageObject message : imagesArr) {
+                imagesByIds.put(message.messageOwner.id, message);
+            }
+            index = imagesArr.size() - index - 1;
+
+            if (messageObject.messageOwner.dialog_id != 0) {
+                currentDialogId = messageObject.messageOwner.dialog_id;
+            } else {
+                if (messageObject.messageOwner.to_id == null) {
+                    closePhoto(false);
+                    return;
+                }
+                if (messageObject.messageOwner.to_id.chat_id != 0) {
+                    currentDialogId = -messageObject.messageOwner.to_id.chat_id;
+                } else {
+                    if (messageObject.messageOwner.to_id.user_id == UserConfig.getClientUserId()) {
+                        currentDialogId = messageObject.messageOwner.from_id;
+                    } else {
+                        currentDialogId = messageObject.messageOwner.to_id.user_id;
+                    }
+                }
+            }
+            if ((int) currentDialogId == 0) {
+                menuItem.hideSubItem(gallery_menu_save);
+                shareButton.setVisibility(View.GONE);
+            } else {
+                menuItem.showSubItem(gallery_menu_save);
+                shareButton.setVisibility(View.VISIBLE);
+            }
+            opennedFromMedia = true;
+            setImageIndex(index, true);
+        } else if (photos != null) {
+            checkImageView.setVisibility(View.VISIBLE);
+            menuItem.setVisibility(View.GONE);
+            imagesArrLocals.addAll(photos);
+            setImageIndex(index, true);
+            pickerView.setVisibility(View.VISIBLE);
+            bottomLayout.setVisibility(View.GONE);
+            shareButton.setVisibility(View.VISIBLE);
+            canShowBottom = false;
+            updateSelectedCount();
+        }
+
+        if (currentDialogId != 0 && totalImagesCount == 0) {
+            MessagesController.getInstance().getMediaCount(currentDialogId, classGuid, true);
+        } else if (avatarsUserId != 0) {
+            MessagesController.getInstance().loadUserPhotos(avatarsUserId, 0, 30, 0, true, classGuid);
+        }
+    }
+
+    public void setImageIndex(int index, boolean init) {
+        if (currentIndex == index) {
+            return;
+        }
+        if (!init) {
+            currentThumb = null;
+        }
+        placeProvider.willSwitchFromPhoto(currentMessageObject, currentFileLocation, currentIndex);
+        int prevIndex = currentIndex;
+        currentIndex = index;
+        currentFileName = getFileName(index, null);
+        boolean sameImage = false;
+
+        if (!imagesArr.isEmpty()) {
+            deleteButton.setVisibility(View.VISIBLE);
+            currentMessageObject = imagesArr.get(currentIndex);
+            TLRPC.User user = MessagesController.getInstance().getUser(currentMessageObject.messageOwner.from_id);
+            if (user != null) {
+                nameTextView.setText(ContactsController.formatName(user.first_name, user.last_name));
+            } else {
+                nameTextView.setText("");
+            }
+            dateTextView.setText(LocaleController.formatterYearMax.format(((long) currentMessageObject.messageOwner.date) * 1000));
+
+            if (totalImagesCount != 0 && !needSearchImageInArr) {
+                if (imagesArr.size() < totalImagesCount && !loadingMoreImages && currentIndex < 5) {
+                    MessageObject lastMessage = imagesArr.get(0);
+                    MessagesController.getInstance().loadMedia(currentDialogId, 0, 100, lastMessage.messageOwner.id, !cacheEndReached, classGuid);
+                    loadingMoreImages = true;
+                }
+                actionBarLayer.setTitle(LocaleController.formatString("Of", R.string.Of, (totalImagesCount - imagesArr.size()) + currentIndex + 1, totalImagesCount));
+            }
+        } else if (!imagesArrLocations.isEmpty()) {
+            nameTextView.setText("");
+            dateTextView.setText("");
+            if (avatarsUserId == UserConfig.getClientUserId() && !avatarsArr.isEmpty()) {
+                deleteButton.setVisibility(View.VISIBLE);
+            } else {
+                deleteButton.setVisibility(View.GONE);
+            }
+            TLRPC.FileLocation old = currentFileLocation;
+            currentFileLocation = imagesArrLocations.get(index);
+            if (old != null && currentFileLocation != null && old.local_id == currentFileLocation.local_id && old.volume_id == currentFileLocation.volume_id) {
+                sameImage = true;
+            }
+            actionBarLayer.setTitle(LocaleController.formatString("Of", R.string.Of, currentIndex + 1, imagesArrLocations.size()));
+        } else if (!imagesArrLocals.isEmpty()) {
+            currentPathObject = imagesArrLocals.get(index).path;
+            actionBarLayer.setTitle(LocaleController.formatString("Of", R.string.Of, currentIndex + 1, imagesArrLocals.size()));
+
+            if (placeProvider.isPhotoChecked(currentIndex)) {
+                checkImageView.setBackgroundColor(0xff42d1f6);
+            } else {
+                checkImageView.setBackgroundColor(0x801c1c1c);
+            }
+        }
+
+
+        if (android.os.Build.VERSION.SDK_INT >= 11 && currentPlaceObject != null) {
+            if (animationInProgress == 0) {
+                currentPlaceObject.imageReceiver.setVisible(true, true);
+            } else {
+                showAfterAnimation = currentPlaceObject;
+            }
+        }
+        currentPlaceObject = placeProvider.getPlaceForPhoto(currentMessageObject, currentFileLocation, currentIndex);
+        if (android.os.Build.VERSION.SDK_INT >= 11 && currentPlaceObject != null) {
+            if (animationInProgress == 0) {
+                currentPlaceObject.imageReceiver.setVisible(false, true);
+            } else {
+                hideAfterAnimation = currentPlaceObject;
+            }
+        }
+
+        if (!sameImage) {
+            draggingDown = false;
+            translationX = 0;
+            translationY = 0;
+            scale = 1;
+            animateToX = 0;
+            animateToY = 0;
+            animateToScale = 1;
+            animationDuration = 0;
+            animationStartTime = 0;
+
+            pinchStartDistance = 0;
+            pinchStartScale = 1;
+            pinchCenterX = 0;
+            pinchCenterY = 0;
+            pinchStartX = 0;
+            pinchStartY = 0;
+            moveStartX = 0;
+            moveStartY = 0;
+            zooming = false;
+            moving = false;
+            doubleTap = false;
+            invalidCoords = false;
+            canDragDown = true;
+            changingPage = false;
+            switchImageAfterAnimation = 0;
+            canZoom = currentFileName == null || !currentFileName.endsWith("mp4");
+            updateMinMax(scale);
+        }
+
+        if (prevIndex == -1) {
+            setIndexToImage(centerImage, currentIndex);
+            setIndexToImage(rightImage, currentIndex + 1);
+            setIndexToImage(leftImage, currentIndex - 1);
+        } else {
+            if (prevIndex > currentIndex) {
+                ImageReceiver temp = rightImage;
+                rightImage = centerImage;
+                centerImage = leftImage;
+                leftImage = temp;
+                setIndexToImage(leftImage, currentIndex - 1);
+            } else if (prevIndex < currentIndex) {
+                ImageReceiver temp = leftImage;
+                leftImage = centerImage;
+                centerImage = rightImage;
+                rightImage = temp;
+                setIndexToImage(rightImage, currentIndex + 1);
+            }
+        }
+
+        if (currentFileName != null) {
+            File f = null;
+            if (currentMessageObject != null) {
+                f = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
+            } else if (currentFileLocation != null) {
+                f = FileLoader.getPathToAttach(currentFileLocation, avatarsUserId != 0);
+            }
+            if (f.exists()) {
+                progressBar.setVisibility(View.GONE);
+            } else {
+                if (currentFileName.endsWith("mp4")) {
+                    if (!FileLoader.getInstance().isLoadingFile(currentFileName)) {
+                        progressBar.setVisibility(View.GONE);
+                    } else {
+                        progressBar.setVisibility(View.VISIBLE);
+                    }
+                } else {
+                    progressBar.setVisibility(View.VISIBLE);
+                }
+                Float progress = FileLoader.getInstance().getFileProgress(currentFileName);
+                if (progress != null) {
+                    progressBar.setProgress((int)(progress * 100));
+                } else {
+                    progressBar.setProgress(0);
+                }
+            }
+        } else {
+            progressBar.setVisibility(View.GONE);
+        }
+        updateActionOverlays();
+    }
+
+    private void setIndexToImage(ImageReceiver imageReceiver, int index) {
+        if (!imagesArrLocals.isEmpty()) {
+            if (index >= 0 && index < imagesArrLocals.size()) {
+                MediaController.PhotoEntry photoEntry = imagesArrLocals.get(index);
+                Bitmap placeHolder = null;
+                if (currentThumb != null && imageReceiver == centerImage) {
+                    placeHolder = currentThumb;
+                }
+                int size = (int)(AndroidUtilities.getPhotoSize() / AndroidUtilities.density);
+                imageReceiver.setImage(photoEntry.path, String.format(Locale.US, "%d_%d", size, size), placeHolder != null ? new BitmapDrawable(null, placeHolder) : null);
+            } else {
+                imageReceiver.setImageBitmap((Bitmap) null);
+            }
+        } else {
+            int size[] = new int[1];
+            TLRPC.FileLocation fileLocation = getFileLocation(index, size);
+
+            if (fileLocation != null) {
+                MessageObject messageObject = null;
+                if (!imagesArr.isEmpty()) {
+                    messageObject = imagesArr.get(index);
+                }
+
+                if (messageObject != null && messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
+                    if (messageObject.imagePreview != null) {
+                        imageReceiver.setImageBitmap(messageObject.imagePreview);
+                    } else if (messageObject.messageOwner.media.video.thumb != null) {
+                        Bitmap placeHolder = null;
+                        if (currentThumb != null && imageReceiver == centerImage) {
+                            placeHolder = currentThumb;
+                        }
+                        imageReceiver.setImage(fileLocation, null, placeHolder != null ? new BitmapDrawable(null, placeHolder) : null, 0, true);
+                    } else {
+                        imageReceiver.setImageBitmap(parentActivity.getResources().getDrawable(R.drawable.photoview_placeholder));
+                    }
+                } else {
+                    Bitmap placeHolder = null;
+                    if (messageObject != null) {
+                        placeHolder = messageObject.imagePreview;
+                    }
+                    if (currentThumb != null && imageReceiver == centerImage) {
+                        placeHolder = currentThumb;
+                    }
+                    if (size[0] == 0) {
+                        size[0] = -1;
+                    }
+                    imageReceiver.setImage(fileLocation, null, placeHolder != null ? new BitmapDrawable(null, placeHolder) : null, size[0], avatarsUserId != 0);
+                }
+            } else {
+                if (size[0] == 0) {
+                    imageReceiver.setImageBitmap((Bitmap) null);
+                } else {
+                    imageReceiver.setImageBitmap(parentActivity.getResources().getDrawable(R.drawable.photoview_placeholder));
+                }
+            }
+        }
+    }
+
+    public boolean isShowingImage(MessageObject object) {
+        return android.os.Build.VERSION.SDK_INT >= 11 && isVisible && !disableShowCheck && object != null && currentMessageObject != null && currentMessageObject.messageOwner.id == object.messageOwner.id;
+    }
+
+    public boolean isShowingImage(TLRPC.FileLocation object) {
+        return android.os.Build.VERSION.SDK_INT >= 11 && isVisible && !disableShowCheck && object != null && currentFileLocation != null && object.local_id == currentFileLocation.local_id && object.volume_id == currentFileLocation.volume_id && object.dc_id == currentFileLocation.dc_id;
+    }
+
+    public boolean isShowingImage(String object) {
+        return android.os.Build.VERSION.SDK_INT >= 11 && isVisible && !disableShowCheck && object != null && currentPathObject != null && object.equals(currentPathObject);
+    }
+
+    public void openPhoto(final MessageObject messageObject, final PhotoViewerProvider provider) {
+        openPhoto(messageObject, null, null, null, 0, provider);
+    }
+
+    public void openPhoto(final TLRPC.FileLocation fileLocation, final PhotoViewerProvider provider) {
+        openPhoto(null, fileLocation, null, null, 0, provider);
+    }
+
+    public void openPhoto(final ArrayList<MessageObject> messages, final int index, final PhotoViewerProvider provider) {
+        openPhoto(messages.get(index), null, messages, null, index, provider);
+    }
+
+    public void openPhotoForSelect(final ArrayList<MediaController.PhotoEntry> photos, final int index, final PhotoViewerProvider provider) {
+        openPhoto(null, null, null, photos, index, provider);
+    }
+
+    private boolean checkAnimation() {
+        if (animationInProgress != 0) {
+            if (Math.abs(transitionAnimationStartTime - System.currentTimeMillis()) >= 500) {
+                if (animationEndRunnable != null) {
+                    animationEndRunnable.run();
+                    animationEndRunnable = null;
+                }
+                animationInProgress = 0;
+            }
+        }
+        return animationInProgress != 0;
+    }
+
+    public void openPhoto(final MessageObject messageObject, final TLRPC.FileLocation fileLocation, final ArrayList<MessageObject> messages, final ArrayList<MediaController.PhotoEntry> photos, final int index, final PhotoViewerProvider provider) {
+        if (parentActivity == null || isVisible || provider == null || checkAnimation() || messageObject == null && fileLocation == null && messages == null && photos == null) {
+            return;
+        }
+        final PlaceProviderObject object = provider.getPlaceForPhoto(messageObject, fileLocation, index);
+        if (object == null) {
+            return;
+        }
+
+        actionBarLayer.setTitle(LocaleController.formatString("Of", R.string.Of, 1, 1));
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileLoadProgressChanged);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mediaCountDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mediaDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.userPhotosLoaded);
+
+        try {
+            if (windowView.getParent() != null) {
+                WindowManager wm = (WindowManager) parentActivity.getSystemService(Context.WINDOW_SERVICE);
+                wm.removeView(windowView);
+            }
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+
+        placeProvider = provider;
+        WindowManager wm = (WindowManager) parentActivity.getSystemService(Context.WINDOW_SERVICE);
+        wm.addView(windowView, windowLayoutParams);
+
+        if (velocityTracker == null) {
+            velocityTracker = VelocityTracker.obtain();
+        }
+
+        disableShowCheck = true;
+        animationInProgress = 1;
+        onPhotoShow(messageObject, fileLocation, messages, photos, index, object);
+        isVisible = true;
+        backgroundDrawable.setAlpha(255);
+        toggleActionBar(true, false);
+        overlayViewVisible = true;
+
+        if(android.os.Build.VERSION.SDK_INT >= 11) {
+            AndroidUtilities.lockOrientation(parentActivity);
+
+            final Rect drawRegion = object.imageReceiver.getDrawRegion();
+
+            animatingImageView.setVisibility(View.VISIBLE);
+            animatingImageView.setImageBitmap(object.thumb);
+
+            animatingImageView.setAlpha(1.0f);
+            animatingImageView.setPivotX(0);
+            animatingImageView.setPivotY(0);
+            animatingImageView.setScaleX(1);
+            animatingImageView.setScaleY(1);
+            animatingImageView.setTranslationX(object.viewX + drawRegion.left);
+            animatingImageView.setTranslationY(object.viewY + drawRegion.top);
+            final ViewGroup.LayoutParams layoutParams = animatingImageView.getLayoutParams();
+            layoutParams.width = drawRegion.right - drawRegion.left;
+            layoutParams.height = drawRegion.bottom - drawRegion.top;
+            animatingImageView.setLayoutParams(layoutParams);
+
+            containerView.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+                @Override
+                public boolean onPreDraw() {
+                    containerView.getViewTreeObserver().removeOnPreDrawListener(this);
+
+                    float scaleX = (float) AndroidUtilities.displaySize.x / layoutParams.width;
+                    float scaleY = (float) (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight) / layoutParams.height;
+                    float scale = scaleX > scaleY ? scaleY : scaleX;
+                    float width = layoutParams.width * scale;
+                    float height = layoutParams.height * scale;
+                    float xPos = (AndroidUtilities.displaySize.x - width) / 2.0f;
+                    float yPos = (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - height) / 2.0f;
+                    int clipHorizontal = Math.abs(drawRegion.left - object.imageReceiver.getImageX());
+                    int clipVertical = Math.abs(drawRegion.top - object.imageReceiver.getImageY());
+
+                    int coords2[] = new int[2];
+                    object.parentView.getLocationInWindow(coords2);
+                    int clipTop = coords2[1] - AndroidUtilities.statusBarHeight - (object.viewY + drawRegion.top);
+                    if (clipTop < 0) {
+                        clipTop = 0;
+                    }
+                    int clipBottom = (object.viewY + drawRegion.top + layoutParams.height) - (coords2[1] + object.parentView.getHeight() - AndroidUtilities.statusBarHeight);
+                    if (clipBottom < 0) {
+                        clipBottom = 0;
+                    }
+                    clipTop = Math.max(clipTop, clipVertical);
+                    clipBottom = Math.max(clipBottom, clipVertical);
+
+                    AnimatorSet animatorSet = new AnimatorSet();
+                    animatorSet.playTogether(
+                            ObjectAnimator.ofFloat(animatingImageView, "scaleX", scale),
+                            ObjectAnimator.ofFloat(animatingImageView, "scaleY", scale),
+                            ObjectAnimator.ofFloat(animatingImageView, "translationX", xPos),
+                            ObjectAnimator.ofFloat(animatingImageView, "translationY", yPos),
+                            ObjectAnimator.ofInt(backgroundDrawable, "alpha", 0, 255),
+                            ObjectAnimator.ofInt(animatingImageView, "clipHorizontal", clipHorizontal, 0),
+                            ObjectAnimator.ofInt(animatingImageView, "clipTop", clipTop, 0),
+                            ObjectAnimator.ofInt(animatingImageView, "clipBottom", clipBottom, 0),
+                            ObjectAnimator.ofFloat(containerView, "alpha", 0.0f, 1.0f),
+                            ObjectAnimator.ofFloat(currentOverlay, "alpha", 1.0f)
+                    );
+
+                    animationEndRunnable = new Runnable() {
+                        @Override
+                        public void run() {
+                            animationInProgress = 0;
+                            transitionAnimationStartTime = 0;
+                            containerView.invalidate();
+                            animatingImageView.setVisibility(View.GONE);
+                            AndroidUtilities.unlockOrientation(parentActivity);
+                            if (showAfterAnimation != null) {
+                                showAfterAnimation.imageReceiver.setVisible(true, true);
+                            }
+                            if (hideAfterAnimation != null) {
+                                hideAfterAnimation.imageReceiver.setVisible(false, true);
+                            }
+                        }
+                    };
+
+                    animatorSet.setDuration(250);
+                    animatorSet.addListener(new AnimatorListenerAdapter() {
+                        @Override
+                        public void onAnimationEnd(Animator animation) {
+                            if (animationEndRunnable != null) {
+                                animationEndRunnable.run();
+                                animationEndRunnable = null;
+                            }
+                        }
+
+                        @Override
+                        public void onAnimationCancel(Animator animation) {
+                            onAnimationEnd(animation);
+                        }
+                    });
+                    transitionAnimationStartTime = System.currentTimeMillis();
+                    animatorSet.start();
+
+                    animatingImageView.setOnDrawListener(new ClippingImageView.onDrawListener() {
+                        @Override
+                        public void onDraw() {
+                            disableShowCheck = false;
+                            animatingImageView.setOnDrawListener(null);
+                            if (android.os.Build.VERSION.SDK_INT >= 11) {
+                                object.imageReceiver.setVisible(false, true);
+                            }
+                        }
+                    });
+                    return true;
+                }
+            });
+        } else {
+            animationInProgress = 0;
+            transitionAnimationStartTime = 0;
+            containerView.invalidate();
+            AnimationSet animationSet = new AnimationSet(true);
+            AlphaAnimation animation = new AlphaAnimation(0.0f, 1.0f);
+            animation.setDuration(150);
+            animation.setFillAfter(false);
+            animationSet.addAnimation(animation);
+            ScaleAnimation scaleAnimation = new ScaleAnimation(0.9f, 1.0f, 0.9f, 1.0f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
+            scaleAnimation.setDuration(150);
+            scaleAnimation.setFillAfter(false);
+            animationSet.addAnimation(scaleAnimation);
+            animationSet.setDuration(150);
+            containerView.startAnimation(animationSet);
+            disableShowCheck = false;
+        }
+    }
+
+    public void closePhoto(boolean animated) {
+        if (parentActivity == null || !isVisible || checkAnimation()) {
+            return;
+        }
+
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileDidFailedLoad);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileLoadProgressChanged);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.mediaCountDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.mediaDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.userPhotosLoaded);
+        ConnectionsManager.getInstance().cancelRpcsForClassGuid(classGuid);
+
+        isVisible = false;
+        isActionBarVisible = false;
+
+        if (velocityTracker != null) {
+            velocityTracker.recycle();
+            velocityTracker = null;
+        }
+        ConnectionsManager.getInstance().cancelRpcsForClassGuid(classGuid);
+
+        final PlaceProviderObject object = placeProvider.getPlaceForPhoto(currentMessageObject, currentFileLocation, currentIndex);
+
+        if(android.os.Build.VERSION.SDK_INT >= 11 && animated) {
+            AndroidUtilities.lockOrientation(parentActivity);
+
+            animationInProgress = 1;
+            animatingImageView.setVisibility(View.VISIBLE);
+            containerView.invalidate();
+
+            AnimatorSet animatorSet = new AnimatorSet();
+
+            final ViewGroup.LayoutParams layoutParams = animatingImageView.getLayoutParams();
+            Rect drawRegion = null;
+            if (object != null) {
+                drawRegion = object.imageReceiver.getDrawRegion();
+                layoutParams.width = drawRegion.right - drawRegion.left;
+                layoutParams.height = drawRegion.bottom - drawRegion.top;
+                animatingImageView.setImageBitmap(object.thumb);
+            } else {
+                layoutParams.width = centerImage.getImageWidth();
+                layoutParams.height = centerImage.getImageHeight();
+                animatingImageView.setImageBitmap(centerImage.getBitmap());
+            }
+            animatingImageView.setLayoutParams(layoutParams);
+
+            float scaleX = (float) AndroidUtilities.displaySize.x / layoutParams.width;
+            float scaleY = (float) (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight) / layoutParams.height;
+            float scale2 = scaleX > scaleY ? scaleY : scaleX;
+            float width = layoutParams.width * scale * scale2;
+            float height = layoutParams.height * scale * scale2;
+            float xPos = (AndroidUtilities.displaySize.x - width) / 2.0f;
+            float yPos = (AndroidUtilities.displaySize.y - AndroidUtilities.statusBarHeight - height) / 2.0f;
+            animatingImageView.setTranslationX(xPos + translationX);
+            animatingImageView.setTranslationY(yPos + translationY);
+            animatingImageView.setScaleX(scale * scale2);
+            animatingImageView.setScaleY(scale * scale2);
+
+            if (object != null) {
+                if (android.os.Build.VERSION.SDK_INT >= 11) {
+                    object.imageReceiver.setVisible(false, true);
+                }
+                int clipHorizontal = Math.abs(drawRegion.left - object.imageReceiver.getImageX());
+                int clipVertical = Math.abs(drawRegion.top - object.imageReceiver.getImageY());
+
+                int coords2[] = new int[2];
+                object.parentView.getLocationInWindow(coords2);
+                int clipTop = coords2[1] - AndroidUtilities.statusBarHeight - (object.viewY + drawRegion.top);
+                if (clipTop < 0) {
+                    clipTop = 0;
+                }
+                int clipBottom = (object.viewY + drawRegion.top + (drawRegion.bottom - drawRegion.top)) - (coords2[1] + object.parentView.getHeight() - AndroidUtilities.statusBarHeight);
+                if (clipBottom < 0) {
+                    clipBottom = 0;
+                }
+
+                clipTop = Math.max(clipTop, clipVertical);
+                clipBottom = Math.max(clipBottom, clipVertical);
+
+                animatorSet.playTogether(
+                        ObjectAnimator.ofFloat(animatingImageView, "scaleX", 1),
+                        ObjectAnimator.ofFloat(animatingImageView, "scaleY", 1),
+                        ObjectAnimator.ofFloat(animatingImageView, "translationX", object.viewX + drawRegion.left),
+                        ObjectAnimator.ofFloat(animatingImageView, "translationY", object.viewY + drawRegion.top),
+                        ObjectAnimator.ofInt(backgroundDrawable, "alpha", 0),
+                        ObjectAnimator.ofInt(animatingImageView, "clipHorizontal", clipHorizontal),
+                        ObjectAnimator.ofInt(animatingImageView, "clipTop", clipTop),
+                        ObjectAnimator.ofInt(animatingImageView, "clipBottom", clipBottom),
+                        ObjectAnimator.ofFloat(containerView, "alpha", 0.0f)
+                );
+            } else {
+                animatorSet.playTogether(
+                        ObjectAnimator.ofInt(backgroundDrawable, "alpha", 0),
+                        ObjectAnimator.ofFloat(animatingImageView, "alpha", 0.0f),
+                        ObjectAnimator.ofFloat(animatingImageView, "translationY", translationY >= 0 ? AndroidUtilities.displaySize.y : -AndroidUtilities.displaySize.y),
+                        ObjectAnimator.ofFloat(containerView, "alpha", 0.0f)
+                );
+            }
+
+            animationEndRunnable = new Runnable() {
+                @Override
+                public void run() {
+                    AndroidUtilities.unlockOrientation(parentActivity);
+                    animationInProgress = 0;
+                    onPhotoClosed(object);
+                }
+            };
+
+            animatorSet.setDuration(250);
+            animatorSet.addListener(new AnimatorListenerAdapter() {
+                @Override
+                public void onAnimationEnd(Animator animation) {
+                    if (animationEndRunnable != null) {
+                        animationEndRunnable.run();
+                        animationEndRunnable = null;
+                    }
+                }
+
+                @Override
+                public void onAnimationCancel(Animator animation) {
+                    onAnimationEnd(animation);
+                }
+            });
+            transitionAnimationStartTime = System.currentTimeMillis();
+            animatorSet.start();
+        } else {
+            AnimationSet animationSet = new AnimationSet(true);
+            AlphaAnimation animation = new AlphaAnimation(1.0f, 0.0f);
+            animation.setDuration(150);
+            animation.setFillAfter(false);
+            animationSet.addAnimation(animation);
+            ScaleAnimation scaleAnimation = new ScaleAnimation(1.0f, 0.9f, 1.0f, 0.9f, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
+            scaleAnimation.setDuration(150);
+            scaleAnimation.setFillAfter(false);
+            animationSet.addAnimation(scaleAnimation);
+            animationSet.setDuration(150);
+            animationInProgress = 2;
+            animationEndRunnable = new Runnable() {
+                @Override
+                public void run() {
+                    if (animationListener != null) {
+                        animationInProgress = 0;
+                        onPhotoClosed(object);
+                        animationListener = null;
+                    }
+                }
+            };
+            animationSet.setAnimationListener(animationListener = new Animation.AnimationListener() {
+                @Override
+                public void onAnimationStart(Animation animation) {
+
+                }
+
+                @Override
+                public void onAnimationEnd(Animation animation) {
+                    if (animationEndRunnable != null) {
+                        animationEndRunnable.run();
+                        animationEndRunnable = null;
+                    }
+                }
+
+                @Override
+                public void onAnimationRepeat(Animation animation) {
+
+                }
+            });
+            transitionAnimationStartTime = System.currentTimeMillis();
+            containerView.startAnimation(animationSet);
+        }
+    }
+
+    public void destroyPhotoViewer() {
+        if (parentActivity == null || windowView == null) {
+            return;
+        }
+        try {
+            if (windowView.getParent() != null) {
+                WindowManager wm = (WindowManager) parentActivity.getSystemService(Context.WINDOW_SERVICE);
+                wm.removeViewImmediate(windowView);
+            }
+            windowView = null;
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+        Instance = null;
+    }
+
+    private void onPhotoClosed(PlaceProviderObject object) {
+        disableShowCheck = true;
+        currentMessageObject = null;
+        currentFileLocation = null;
+        currentPathObject = null;
+        currentThumb = null;
+        centerImage.setImageBitmap((Bitmap)null);
+        leftImage.setImageBitmap((Bitmap)null);
+        rightImage.setImageBitmap((Bitmap)null);
+        if (android.os.Build.VERSION.SDK_INT >= 11 && object != null) {
+            object.imageReceiver.setVisible(true, true);
+        }
+        containerView.post(new Runnable() {
+            @Override
+            public void run() {
+                animatingImageView.setImageBitmap(null);
+                try {
+                    if (windowView.getParent() != null) {
+                        WindowManager wm = (WindowManager) parentActivity.getSystemService(Context.WINDOW_SERVICE);
+                        wm.removeView(windowView);
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        });
+        if (placeProvider != null) {
+            placeProvider.willHidePhotoViewer();
+        }
+        placeProvider = null;
+        disableShowCheck = false;
+    }
+
+    public boolean isVisible() {
+        return isVisible;
+    }
+
+    private void updateMinMax(float scale) {
+        int maxW = (int) (centerImage.getImageWidth() * scale - containerView.getWidth()) / 2;
+        int maxH = (int) (centerImage.getImageHeight() * scale - containerView.getHeight()) / 2;
+        if (maxW > 0) {
+            minX = -maxW;
+            maxX = maxW;
+        } else {
+            minX = maxX = 0;
+        }
+        if (maxH > 0) {
+            minY = -maxH;
+            maxY = maxH;
+        } else {
+            minY = maxY = 0;
+        }
+    }
+
+    private boolean onTouchEvent(MotionEvent ev) {
+        if (animationInProgress != 0 || animationStartTime != 0) {
+            if (animationStartTime == 0) {
+                AndroidUtilities.unlockOrientation(parentActivity);
+            }
+            return false;
+        }
+
+        if(ev.getPointerCount() == 1 && gestureDetector.onTouchEvent(ev) && doubleTap) {
+            doubleTap = false;
+            moving = false;
+            zooming = false;
+            checkMinMax(false);
+            return true;
+        }
+
+        if (ev.getActionMasked() == MotionEvent.ACTION_DOWN || ev.getActionMasked() == MotionEvent.ACTION_POINTER_DOWN) {
+            if (!scroller.isFinished()) {
+                scroller.abortAnimation();
+            }
+            if (!draggingDown && !changingPage) {
+                if (canZoom && ev.getPointerCount() == 2) {
+                    pinchStartDistance = (float) Math.hypot(ev.getX(1) - ev.getX(0), ev.getY(1) - ev.getY(0));
+                    pinchStartScale = scale;
+                    pinchCenterX = (ev.getX(0) + ev.getX(1)) / 2.0f;
+                    pinchCenterY = (ev.getY(0) + ev.getY(1)) / 2.0f;
+                    pinchStartX = translationX;
+                    pinchStartY = translationY;
+                    zooming = true;
+                    moving = false;
+                    if (velocityTracker != null) {
+                        velocityTracker.clear();
+                    }
+                } else if (ev.getPointerCount() == 1) {
+                    moveStartX = ev.getX();
+                    dragY = moveStartY = ev.getY();
+                    draggingDown = false;
+                    canDragDown = true;
+                    AndroidUtilities.lockOrientation(parentActivity);
+                    if (velocityTracker != null) {
+                        velocityTracker.clear();
+                    }
+                }
+            }
+        } else if (ev.getActionMasked() == MotionEvent.ACTION_MOVE) {
+            if (canZoom && ev.getPointerCount() == 2 && !draggingDown && zooming && !changingPage) {
+                scale = (float)Math.hypot(ev.getX(1) - ev.getX(0), ev.getY(1) - ev.getY(0)) / pinchStartDistance * pinchStartScale;
+                translationX = (pinchCenterX - containerView.getWidth() / 2) - ((pinchCenterX - containerView.getWidth() / 2) - pinchStartX) * (scale / pinchStartScale);
+                translationY = (pinchCenterY - containerView.getHeight() / 2) - ((pinchCenterY - containerView.getHeight() / 2) - pinchStartY) * (scale / pinchStartScale);
+                updateMinMax(scale);
+                containerView.invalidate();
+            } else if (ev.getPointerCount() == 1) {
+                if (velocityTracker != null) {
+                    velocityTracker.addMovement(ev);
+                }
+                float dx = Math.abs(ev.getX() - moveStartX);
+                float dy = Math.abs(ev.getY() - dragY);
+                if (canDragDown && !draggingDown && scale == 1 && dy >= AndroidUtilities.dp(30) && dy / 2 > dx) {
+                    draggingDown = true;
+                    moving = false;
+                    dragY = ev.getY();
+                    if (isActionBarVisible && canShowBottom) {
+                        toggleActionBar(false, true);
+                    }
+                    return true;
+                } else if (draggingDown) {
+                    translationY = ev.getY() - dragY;
+                    containerView.invalidate();
+                    toggleOverlayView(false);
+                } else if (!invalidCoords && animationStartTime == 0) {
+                    float moveDx = moveStartX - ev.getX();
+                    float moveDy = moveStartY - ev.getY();
+                    if (moving || scale == 1 && Math.abs(moveDy) + AndroidUtilities.dp(12) < Math.abs(moveDx) || scale != 1) {
+                        if (!moving) {
+                            moveDx = 0;
+                            moveDy = 0;
+                            moving = true;
+                            canDragDown = false;
+                        }
+
+                        toggleOverlayView(false);
+
+                        moveStartX = ev.getX();
+                        moveStartY = ev.getY();
+                        updateMinMax(scale);
+                        if (translationX < minX && !rightImage.hasImage() || translationX > maxX && !leftImage.hasImage()) {
+                            moveDx /= 3.0f;
+                        }
+                        if (maxY == 0 && minY == 0) {
+                            if (translationY - moveDy < minY) {
+                                translationY = minY;
+                                moveDy = 0;
+                            } else if (translationY - moveDy > maxY) {
+                                translationY = maxY;
+                                moveDy = 0;
+                            }
+                        } else {
+                            if (translationY < minY || translationY > maxY) {
+                                moveDy /= 3.0f;
+                            }
+                        }
+
+                        translationX -= moveDx;
+                        if (scale != 1) {
+                            translationY -= moveDy;
+                        }
+
+                        containerView.invalidate();
+                    }
+                } else {
+                    invalidCoords = false;
+                    moveStartX = ev.getX();
+                    moveStartY = ev.getY();
+                }
+            }
+        } else if (ev.getActionMasked() == MotionEvent.ACTION_CANCEL || ev.getActionMasked() == MotionEvent.ACTION_UP || ev.getActionMasked() == MotionEvent.ACTION_POINTER_UP) {
+            if (zooming) {
+                invalidCoords = true;
+                if (scale < 1.0f) {
+                    updateMinMax(1.0f);
+                    animateTo(1.0f, 0, 0, true);
+                } else if(scale > 3.0f) {
+                    float atx = (pinchCenterX - containerView.getWidth() / 2) - ((pinchCenterX - containerView.getWidth() / 2) - pinchStartX) * (3.0f / pinchStartScale);
+                    float aty = (pinchCenterY - containerView.getHeight() / 2) - ((pinchCenterY - containerView.getHeight() / 2) - pinchStartY) * (3.0f / pinchStartScale);
+                    updateMinMax(3.0f);
+                    if (atx < minX) {
+                        atx = minX;
+                    } else if (atx > maxX) {
+                        atx = maxX;
+                    }
+                    if (aty < minY) {
+                        aty = minY;
+                    } else if (aty > maxY) {
+                        aty = maxY;
+                    }
+                    animateTo(3.0f, atx, aty, true);
+                } else {
+                    checkMinMax(true);
+                }
+                zooming = false;
+            } else if (draggingDown) {
+                if (Math.abs(dragY - ev.getY()) > containerView.getHeight() / 6.0f) {
+                    closePhoto(true);
+                } else {
+                    animateTo(1, 0, 0);
+                }
+                draggingDown = false;
+            } else if (moving) {
+                float moveToX = translationX;
+                float moveToY = translationY;
+                updateMinMax(scale);
+                moving = false;
+                canDragDown = true;
+                float velocity = 0;
+                if (velocityTracker != null && scale == 1) {
+                    velocityTracker.computeCurrentVelocity(1000);
+                    velocity = velocityTracker.getXVelocity();
+                }
+
+                if((translationX < minX - containerView.getWidth() / 3 || velocity < -AndroidUtilities.dp(650)) && rightImage.hasImage()){
+                    goToNext();
+                    return true;
+                }
+                if((translationX > maxX + containerView.getWidth() / 3 || velocity > AndroidUtilities.dp(650)) && leftImage.hasImage()){
+                    goToPrev();
+                    return true;
+                }
+
+                if (translationX < minX) {
+                    moveToX = minX;
+                } else if (translationX > maxX) {
+                    moveToX = maxX;
+                }
+                if (translationY < minY) {
+                    moveToY = minY;
+                } else if (translationY > maxY) {
+                    moveToY = maxY;
+                }
+                animateTo(scale, moveToX, moveToY);
+            } else {
+                AndroidUtilities.unlockOrientation(parentActivity);
+            }
+        }
+        return false;
+    }
+
+    private void checkMinMax(boolean zoom) {
+        float moveToX = translationX;
+        float moveToY = translationY;
+        updateMinMax(scale);
+        if (translationX < minX) {
+            moveToX = minX;
+        } else if (translationX > maxX) {
+            moveToX = maxX;
+        }
+        if (translationY < minY) {
+            moveToY = minY;
+        } else if (translationY > maxY) {
+            moveToY = maxY;
+        }
+        animateTo(scale, moveToX, moveToY, zoom);
+    }
+
+    private void goToNext() {
+        float extra = 0;
+        if (scale != 1) {
+            extra = (containerView.getWidth() - centerImage.getImageWidth()) / 2 * scale;
+        }
+        switchImageAfterAnimation = 1;
+        animateTo(scale, minX - containerView.getWidth() - extra - PAGE_SPACING / 2, translationY);
+    }
+
+    private void goToPrev() {
+        float extra = 0;
+        if (scale != 1) {
+            extra = (containerView.getWidth() - centerImage.getImageWidth()) / 2 * scale;
+        }
+        switchImageAfterAnimation = 2;
+        animateTo(scale, maxX + containerView.getWidth() + extra + PAGE_SPACING / 2, translationY);
+    }
+
+    private void animateTo(float newScale, float newTx, float newTy) {
+        animateTo(newScale, newTx, newTy, false);
+    }
+
+    private void animateTo(float newScale, float newTx, float newTy, boolean isZoom) {
+        if (switchImageAfterAnimation == 0) {
+            toggleOverlayView(true);
+        }
+        if (scale == newScale && translationX == newTx && translationY == newTy) {
+            AndroidUtilities.unlockOrientation(parentActivity);
+            return;
+        }
+        zoomAnimation = isZoom;
+        animateToScale = newScale;
+        animateToX = newTx;
+        animateToY = newTy;
+        animationStartTime = System.currentTimeMillis();
+        animationDuration = 250;
+        containerView.postInvalidate();
+        AndroidUtilities.lockOrientation(parentActivity);
+    }
+
+    private void onDraw(Canvas canvas) {
+        if (animationInProgress == 1 || !isVisible && animationInProgress != 2) {
+            return;
+        }
+
+        canvas.save();
+
+        canvas.translate(containerView.getWidth() / 2, containerView.getHeight() / 2);
+        float currentTranslationY;
+        float currentTranslationX;
+
+        float aty = -1;
+        float ai = -1;
+        if (System.currentTimeMillis() - animationStartTime < animationDuration) {
+            ai = interpolator.getInterpolation((float)(System.currentTimeMillis() - animationStartTime) / animationDuration);
+            if (ai >= 0.95f) {
+                ai = -1;
+            }
+        }
+
+        if (ai != -1) {
+            if (!scroller.isFinished()) {
+                scroller.abortAnimation();
+            }
+
+            float ts = scale + (animateToScale - scale) * ai;
+            float tx = translationX + (animateToX - translationX) * ai;
+            float ty = translationY + (animateToY - translationY) * ai;
+
+            if (animateToScale == 1 && scale == 1 && translationX == 0) {
+                aty = ty;
+            }
+            canvas.translate(tx, ty);
+            canvas.scale(ts, ts);
+            currentTranslationY = ty / ts;
+            currentTranslationX = tx;
+            containerView.invalidate();
+        } else {
+            if (animationStartTime != 0) {
+                translationX = animateToX;
+                translationY = animateToY;
+                scale = animateToScale;
+                animationStartTime = 0;
+                updateMinMax(scale);
+                AndroidUtilities.unlockOrientation(parentActivity);
+                zoomAnimation = false;
+            }
+            if (!scroller.isFinished()) {
+                if (scroller.computeScrollOffset()) {
+                    if (scroller.getStartX() < maxX && scroller.getStartX() > minX) {
+                        translationX = scroller.getCurrX();
+                    }
+                    if (scroller.getStartY() < maxY && scroller.getStartY() > minY) {
+                        translationY = scroller.getCurrY();
+                    }
+                    containerView.invalidate();
+                }
+            }
+            if (switchImageAfterAnimation != 0) {
+                if (switchImageAfterAnimation == 1) {
+                    setImageIndex(currentIndex + 1, false);
+                } else if (switchImageAfterAnimation == 2) {
+                    setImageIndex(currentIndex - 1, false);
+                }
+                switchImageAfterAnimation = 0;
+                toggleOverlayView(true);
+            }
+
+            canvas.translate(translationX, translationY);
+            canvas.scale(scale, scale);
+            currentTranslationY = translationY / scale;
+            currentTranslationX = translationX;
+            if (!moving) {
+                aty = translationY;
+            }
+        }
+
+        if (scale == 1 && aty != -1) {
+            float maxValue = containerView.getHeight() / 4.0f;
+            backgroundDrawable.setAlpha((int) Math.max(127, 255 * (1.0f - (Math.min(Math.abs(aty), maxValue) / maxValue))));
+        } else {
+            backgroundDrawable.setAlpha(255);
+        }
+
+        Bitmap bitmap = centerImage.getBitmap();
+        if (bitmap != null) {
+            int bitmapWidth = bitmap.getWidth();
+            int bitmapHeight = bitmap.getHeight();
+
+            float scaleX = (float) containerView.getWidth() / (float) bitmapWidth;
+            float scaleY = (float) containerView.getHeight() / (float) bitmapHeight;
+            float scale = scaleX > scaleY ? scaleY : scaleX;
+            int width = (int) (bitmapWidth * scale);
+            int height = (int) (bitmapHeight * scale);
+
+            centerImage.setImageCoords(-width / 2, -height / 2, width, height);
+            centerImage.draw(canvas);
+        }
+
+        if (scale >= 1.0f) {
+            ImageReceiver sideImage = null;
+            float k = 1;
+            if (currentTranslationX > maxX + AndroidUtilities.dp(20)) {
+                k = -1;
+                sideImage = leftImage;
+            } else if (currentTranslationX < minX - AndroidUtilities.dp(20)) {
+                sideImage = rightImage;
+            }
+
+            if (!zoomAnimation && !zooming && sideImage != null) {
+                changingPage = true;
+                canvas.translate(k * containerView.getWidth() / 2, -currentTranslationY);
+                canvas.scale(1.0f / scale, 1.0f / scale);
+                canvas.translate(k * (containerView.getWidth() + PAGE_SPACING) / 2, 0);
+
+                bitmap = sideImage.getBitmap();
+                if (bitmap != null) {
+                    int bitmapWidth = bitmap.getWidth();
+                    int bitmapHeight = bitmap.getHeight();
+
+                    float scaleX = (float) containerView.getWidth() / (float) bitmapWidth;
+                    float scaleY = (float) containerView.getHeight() / (float) bitmapHeight;
+                    float scale = scaleX > scaleY ? scaleY : scaleX;
+                    int width = (int) (bitmapWidth * scale);
+                    int height = (int) (bitmapHeight * scale);
+
+                    sideImage.setImageCoords(-width / 2, -height / 2, width, height);
+                    sideImage.draw(canvas);
+                }
+            } else {
+                changingPage = false;
+            }
+        }
+
+        canvas.restore();
+    }
+
+    @SuppressLint("DrawAllocation")
+    private void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        if(changed) {
+            scale = 1;
+            translationX = 0;
+            translationY = 0;
+            updateMinMax(scale);
+
+            if (checkImageView != null) {
+                checkImageView.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+                    @Override
+                    public boolean onPreDraw() {
+                        checkImageView.getViewTreeObserver().removeOnPreDrawListener(this);
+                        FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams)checkImageView.getLayoutParams();
+                        WindowManager manager = (WindowManager)ApplicationLoader.applicationContext.getSystemService(Activity.WINDOW_SERVICE);
+                        int rotation = manager.getDefaultDisplay().getRotation();
+                        if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
+                            layoutParams.topMargin = AndroidUtilities.dp(48);
+                        } else {
+                            layoutParams.topMargin = AndroidUtilities.dp(58);
+                        }
+                        checkImageView.setLayoutParams(layoutParams);
+                        return false;
+                    }
+                });
+            }
+        }
+    }
+
+    private void onActionClick(View view) {
+        if (currentMessageObject == null || currentFileName == null) {
+            return;
+        }
+        boolean loadFile = false;
+        if (currentMessageObject.messageOwner.attachPath != null && currentMessageObject.messageOwner.attachPath.length() != 0) {
+            File f = new File(currentMessageObject.messageOwner.attachPath);
+            if (f.exists()) {
+                Intent intent = new Intent(Intent.ACTION_VIEW);
+                intent.setDataAndType(Uri.fromFile(f), "video/mp4");
+                parentActivity.startActivity(intent);
+            } else {
+                loadFile = true;
+            }
+        } else {
+            File cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
+            if (cacheFile.exists()) {
+                Intent intent = new Intent(Intent.ACTION_VIEW);
+                intent.setDataAndType(Uri.fromFile(cacheFile), "video/mp4");
+                parentActivity.startActivity(intent);
+            } else {
+                loadFile = true;
+            }
+        }
+        if (loadFile) {
+            if (!FileLoader.getInstance().isLoadingFile(currentFileName)) {
+                FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.video, true);
+            } else {
+                FileLoader.getInstance().cancelLoadFile(currentMessageObject.messageOwner.media.video);
+            }
+            updateActionOverlays();
+        }
+    }
+
+    @Override
+    public boolean onDown(MotionEvent e) {
+        return false;
+    }
+
+    @Override
+    public void onShowPress(MotionEvent e) {
+
+    }
+
+    @Override
+    public boolean onSingleTapUp(MotionEvent e) {
+        return false;
+    }
+
+    @Override
+    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {
+        return false;
+    }
+
+    @Override
+    public void onLongPress(MotionEvent e) {
+
+    }
+
+    @Override
+    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
+        if (scale != 1) {
+            scroller.abortAnimation();
+            scroller.fling(Math.round(translationX), Math.round(translationY), Math.round(velocityX), Math.round(velocityY), (int) minX, (int) maxX, (int) minY, (int) maxY);
+            containerView.postInvalidate();
+        }
+        return false;
+    }
+
+    @Override
+    public boolean onSingleTapConfirmed(MotionEvent e) {
+        if (canShowBottom) {
+            toggleActionBar(!isActionBarVisible, true);
+        } else {
+            checkImageView.performClick();
+        }
+        return true;
+    }
+
+    @Override
+    public boolean onDoubleTap(MotionEvent e) {
+        if (!canZoom || scale == 1.0f && (translationY != 0 || translationX != 0)) {
+            return false;
+        }
+        if (animationStartTime != 0) {
+            return false;
+        }
+        if (scale == 1.0f) {
+            float atx = (e.getX() - containerView.getWidth() / 2) - ((e.getX() - containerView.getWidth() / 2) - translationX) * (3.0f / scale);
+            float aty = (e.getY() - containerView.getHeight() / 2) - ((e.getY() - containerView.getHeight() / 2) - translationY) * (3.0f / scale);
+            updateMinMax(3.0f);
+            if (atx < minX) {
+                atx = minX;
+            } else if (atx > maxX) {
+                atx = maxX;
+            }
+            if (aty < minY) {
+                aty = minY;
+            } else if (aty > maxY) {
+                aty = maxY;
+            }
+            animateTo(3.0f, atx, aty);
+        } else {
+            animateTo(1.0f, 0, 0);
+        }
+        doubleTap = true;
+        return true;
+    }
+
+    @Override
+    public boolean onDoubleTapEvent(MotionEvent e) {
+        return false;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/PopupNotificationActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/PopupNotificationActivity.java
new file mode 100644
index 000000000..4bfbd6cd7
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/PopupNotificationActivity.java
@@ -0,0 +1,964 @@
+/*
+ * This is the source code of Telegram for Android v. 1.4.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.tomato.ui;
+
+import android.app.Activity;
+import android.app.KeyguardManager;
+import android.content.Context;
+import android.content.Intent;
+import android.content.res.Configuration;
+import android.os.Bundle;
+import android.os.PowerManager;
+import android.util.AttributeSet;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.MotionEvent;
+import android.view.VelocityTracker;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.view.WindowManager;
+import android.view.animation.TranslateAnimation;
+import android.widget.FrameLayout;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import org.tomato.PhoneFormat.PhoneFormat;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.ContactsController;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MediaController;
+import org.tomato.android.MessageObject;
+import org.tomato.android.MessagesController;
+import org.tomato.android.NotificationCenter;
+import org.tomato.android.NotificationsController;
+import org.tomato.android.PhotoObject;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLoader;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.ui.Views.ActionBar.ActionBar;
+import org.tomato.ui.Views.ActionBar.ActionBarLayer;
+import org.tomato.ui.Views.ActionBar.ActionBarMenu;
+import org.tomato.ui.Views.BackupImageView;
+import org.tomato.ui.Views.ChatActivityEnterView;
+import org.tomato.ui.Views.FrameLayoutFixed;
+import org.tomato.ui.Views.PopupAudioView;
+import org.tomato.ui.Views.TypingDotsDrawable;
+
+import java.io.File;
+import java.util.ArrayList;
+
+public class PopupNotificationActivity extends Activity implements NotificationCenter.NotificationCenterDelegate {
+
+    private ActionBarLayer actionBarLayer;
+    private ChatActivityEnterView chatActivityEnterView;
+    private BackupImageView avatarImageView;
+    private TextView countText;
+    private ViewGroup messageContainer;
+    private ViewGroup centerView;
+    private ViewGroup leftView;
+    private ViewGroup rightView;
+    private ArrayList<ViewGroup> textViews = new ArrayList<ViewGroup>();
+    private ArrayList<ViewGroup> imageViews = new ArrayList<ViewGroup>();
+    private ArrayList<ViewGroup> audioViews = new ArrayList<ViewGroup>();
+    private VelocityTracker velocityTracker = null;
+    private TypingDotsDrawable typingDotsDrawable;
+
+    private int classGuid;
+    private TLRPC.User currentUser;
+    private TLRPC.Chat currentChat;
+    private boolean finished = false;
+    private CharSequence lastPrintString;
+    private MessageObject currentMessageObject = null;
+    private int currentMessageNum = 0;
+    private PowerManager.WakeLock wakeLock = null;
+    private boolean animationInProgress = false;
+    private long animationStartTime = 0;
+    private float moveStartX = -1;
+    private boolean startedMoving = false;
+    private Runnable onAnimationEndRunnable = null;
+
+    private class FrameLayoutTouch extends FrameLayoutFixed {
+        public FrameLayoutTouch(Context context) {
+            super(context);
+        }
+
+        public FrameLayoutTouch(Context context, AttributeSet attrs) {
+            super(context, attrs);
+        }
+
+        public FrameLayoutTouch(Context context, AttributeSet attrs, int defStyle) {
+            super(context, attrs, defStyle);
+        }
+
+        @Override
+        public boolean onInterceptTouchEvent(MotionEvent ev) {
+            return checkTransitionAnimation() || ((PopupNotificationActivity) getContext()).onTouchEventMy(ev);
+        }
+
+        @Override
+        public boolean onTouchEvent(MotionEvent ev) {
+            return checkTransitionAnimation() || ((PopupNotificationActivity) getContext()).onTouchEventMy(ev);
+        }
+
+        @Override
+        public void requestDisallowInterceptTouchEvent(boolean disallowIntercept) {
+            ((PopupNotificationActivity)getContext()).onTouchEventMy(null);
+            super.requestDisallowInterceptTouchEvent(disallowIntercept);
+        }
+    }
+
+    public class FrameLayoutAnimationListener extends FrameLayoutFixed {
+        public FrameLayoutAnimationListener(Context context) {
+            super(context);
+        }
+
+        public FrameLayoutAnimationListener(Context context, AttributeSet attrs) {
+            super(context, attrs);
+        }
+
+        public FrameLayoutAnimationListener(Context context, AttributeSet attrs, int defStyle) {
+            super(context, attrs, defStyle);
+        }
+
+        @Override
+        protected void onAnimationEnd() {
+            super.onAnimationEnd();
+            if (onAnimationEndRunnable != null) {
+                onAnimationEndRunnable.run();
+                onAnimationEndRunnable = null;
+            }
+        }
+    }
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        classGuid = ConnectionsManager.getInstance().generateClassGuid();
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.appDidLogout);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.pushMessagesUpdated);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioProgressDidChanged);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioDidReset);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.contactsDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
+
+        typingDotsDrawable = new TypingDotsDrawable();
+
+        chatActivityEnterView = new ChatActivityEnterView();
+        chatActivityEnterView.setDelegate(new ChatActivityEnterView.ChatActivityEnterViewDelegate() {
+            @Override
+            public void onMessageSend() {
+                if (currentMessageObject == null) {
+                    return;
+                }
+                if (currentMessageNum >= 0 && currentMessageNum < NotificationsController.getInstance().popupMessages.size()) {
+                    NotificationsController.getInstance().popupMessages.remove(currentMessageNum);
+                }
+                MessagesController.getInstance().markDialogAsRead(currentMessageObject.getDialogId(), currentMessageObject.messageOwner.id, Math.max(0, currentMessageObject.messageOwner.id), 0, currentMessageObject.messageOwner.date, true, true);
+                currentMessageObject = null;
+                getNewMessage();
+            }
+
+            @Override
+            public void needSendTyping() {
+                if (currentMessageObject != null) {
+                    MessagesController.getInstance().sendTyping(currentMessageObject.getDialogId(), classGuid);
+                }
+            }
+        });
+
+        setContentView(R.layout.popup_notification_layout);
+        RelativeLayout popupContainer = (RelativeLayout) findViewById(R.id.popup_container);
+        messageContainer = new FrameLayoutTouch(this);
+        popupContainer.addView(messageContainer, 0);
+
+        ActionBar actionBar = new ActionBar(this);
+        popupContainer.addView(actionBar);
+        ViewGroup.LayoutParams layoutParams = actionBar.getLayoutParams();
+        layoutParams.width = ViewGroup.LayoutParams.MATCH_PARENT;
+        actionBar.setLayoutParams(layoutParams);
+
+        actionBarLayer = actionBar.createLayer();
+        actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
+        actionBarLayer.setBackgroundResource(R.color.header);
+        actionBarLayer.setItemsBackground(R.drawable.bar_selector);
+        actionBar.setCurrentActionBarLayer(actionBarLayer);
+
+        ActionBarMenu menu = actionBarLayer.createMenu();
+        View view = menu.addItemResource(2, R.layout.popup_count_layout);
+        countText = (TextView) view.findViewById(R.id.count_text);
+
+        view = menu.addItemResource(1, R.layout.chat_header_layout);
+        avatarImageView = (BackupImageView)view.findViewById(R.id.chat_avatar_image);
+        avatarImageView.processDetach = false;
+
+        actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    onFinish();
+                    finish();
+                } else if (id == 1) {
+                    openCurrentMessage();
+                } else if (id == 2) {
+                    switchToNextMessage();
+                }
+            }
+        });
+
+        chatActivityEnterView.setContainerView(this, findViewById(R.id.chat_layout));
+
+        PowerManager pm = (PowerManager)ApplicationLoader.applicationContext.getSystemService(Context.POWER_SERVICE);
+        wakeLock = pm.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK | PowerManager.ACQUIRE_CAUSES_WAKEUP, "screen");
+        wakeLock.setReferenceCounted(false);
+
+        handleIntent(getIntent());
+    }
+
+    @Override
+    public void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        AndroidUtilities.checkDisplaySize();
+        fixLayout();
+    }
+
+    @Override
+    protected void onNewIntent(Intent intent) {
+        super.onNewIntent(intent);
+        handleIntent(intent);
+    }
+
+    private void switchToNextMessage() {
+        if (NotificationsController.getInstance().popupMessages.size() > 1) {
+            if (currentMessageNum < NotificationsController.getInstance().popupMessages.size() - 1) {
+                currentMessageNum++;
+            } else {
+                currentMessageNum = 0;
+            }
+            currentMessageObject = NotificationsController.getInstance().popupMessages.get(currentMessageNum);
+            updateInterfaceForCurrentMessage(2);
+            countText.setText(String.format("%d/%d", currentMessageNum + 1, NotificationsController.getInstance().popupMessages.size()));
+        }
+    }
+
+    private void switchToPreviousMessage() {
+        if (NotificationsController.getInstance().popupMessages.size() > 1) {
+            if (currentMessageNum > 0) {
+                currentMessageNum--;
+            } else {
+                currentMessageNum = NotificationsController.getInstance().popupMessages.size() - 1;
+            }
+            currentMessageObject = NotificationsController.getInstance().popupMessages.get(currentMessageNum);
+            updateInterfaceForCurrentMessage(1);
+            countText.setText(String.format("%d/%d", currentMessageNum + 1, NotificationsController.getInstance().popupMessages.size()));
+        }
+    }
+
+    public boolean checkTransitionAnimation() {
+        if (animationInProgress && animationStartTime < System.currentTimeMillis() - 400) {
+            animationInProgress = false;
+            if (onAnimationEndRunnable != null) {
+                onAnimationEndRunnable.run();
+                onAnimationEndRunnable = null;
+            }
+        }
+        return animationInProgress;
+    }
+
+    public boolean onTouchEventMy(MotionEvent motionEvent) {
+        if (checkTransitionAnimation()) {
+            return false;
+        }
+        if (motionEvent != null && motionEvent.getAction() == MotionEvent.ACTION_DOWN) {
+            moveStartX = motionEvent.getX();
+        } else if (motionEvent != null && motionEvent.getAction() == MotionEvent.ACTION_MOVE) {
+            float x = motionEvent.getX();
+            int diff = (int)(x - moveStartX);
+            if (moveStartX != -1 && !startedMoving) {
+                if (Math.abs(diff) > AndroidUtilities.dp(10)) {
+                    startedMoving = true;
+                    moveStartX = x;
+                    AndroidUtilities.lockOrientation(this);
+                    diff = 0;
+                    if (velocityTracker == null) {
+                        velocityTracker = VelocityTracker.obtain();
+                    } else {
+                        velocityTracker.clear();
+                    }
+                }
+            }
+            if (startedMoving) {
+                if (leftView == null && diff > 0) {
+                    diff = 0;
+                }
+                if (rightView == null && diff < 0) {
+                    diff = 0;
+                }
+                if (velocityTracker != null) {
+                    velocityTracker.addMovement(motionEvent);
+                }
+                applyViewsLayoutParams(diff);
+            }
+        } else if (motionEvent == null || motionEvent.getAction() == MotionEvent.ACTION_UP || motionEvent.getAction() == MotionEvent.ACTION_CANCEL) {
+            if (motionEvent != null && startedMoving) {
+                FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) centerView.getLayoutParams();
+                int diff = (int)(motionEvent.getX() - moveStartX);
+                int width = AndroidUtilities.displaySize.x - AndroidUtilities.dp(24);
+                int moveDiff = 0;
+                int forceMove = 0;
+                View otherView = null;
+                if (velocityTracker != null) {
+                    velocityTracker.computeCurrentVelocity(1000);
+                    if (velocityTracker.getXVelocity() >= 3500) {
+                        forceMove = 1;
+                    } else if (velocityTracker.getXVelocity() <= -3500) {
+                        forceMove = 2;
+                    }
+                }
+                if ((forceMove == 1 || diff > width / 3) && leftView != null) {
+                    moveDiff = width - layoutParams.leftMargin;
+                    otherView = leftView;
+                    onAnimationEndRunnable = new Runnable() {
+                        @Override
+                        public void run() {
+                            animationInProgress = false;
+                            switchToPreviousMessage();
+                            AndroidUtilities.unlockOrientation(PopupNotificationActivity.this);
+                        }
+                    };
+                } else if ((forceMove == 2 || diff < -width / 3) && rightView != null) {
+                    moveDiff = -width - layoutParams.leftMargin;
+                    otherView = rightView;
+                    onAnimationEndRunnable = new Runnable() {
+                        @Override
+                        public void run() {
+                            animationInProgress = false;
+                            switchToNextMessage();
+                            AndroidUtilities.unlockOrientation(PopupNotificationActivity.this);
+                        }
+                    };
+                } else if (layoutParams.leftMargin != 0) {
+                    moveDiff = -layoutParams.leftMargin;
+                    otherView = diff > 0 ? leftView : rightView;
+                    onAnimationEndRunnable = new Runnable() {
+                        @Override
+                        public void run() {
+                            animationInProgress = false;
+                            applyViewsLayoutParams(0);
+                            AndroidUtilities.unlockOrientation(PopupNotificationActivity.this);
+                        }
+                    };
+                }
+                if (moveDiff != 0) {
+                    int time = (int)(Math.abs((float)moveDiff / (float)width) * 200);
+                    TranslateAnimation animation = new TranslateAnimation(0, moveDiff, 0, 0);
+                    animation.setDuration(time);
+                    centerView.startAnimation(animation);
+                    if (otherView != null) {
+                        animation = new TranslateAnimation(0, moveDiff, 0, 0);
+                        animation.setDuration(time);
+                        otherView.startAnimation(animation);
+                    }
+                    animationInProgress = true;
+                    animationStartTime = System.currentTimeMillis();
+                }
+            } else {
+                applyViewsLayoutParams(0);
+            }
+            if (velocityTracker != null) {
+                velocityTracker.recycle();
+                velocityTracker = null;
+            }
+            startedMoving = false;
+            moveStartX = -1;
+        }
+        return startedMoving;
+    }
+
+    private void applyViewsLayoutParams(int xOffset) {
+        FrameLayout.LayoutParams layoutParams = null;
+        int widht = AndroidUtilities.displaySize.x - AndroidUtilities.dp(24);
+        if (leftView != null) {
+            layoutParams = (FrameLayout.LayoutParams) leftView.getLayoutParams();
+            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
+            layoutParams.height = ViewGroup.LayoutParams.MATCH_PARENT;
+            layoutParams.width = widht;
+            layoutParams.leftMargin = -widht + xOffset;
+            leftView.setLayoutParams(layoutParams);
+        }
+        if (centerView != null) {
+            layoutParams = (FrameLayout.LayoutParams) centerView.getLayoutParams();
+            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
+            layoutParams.height = ViewGroup.LayoutParams.MATCH_PARENT;
+            layoutParams.width = widht;
+            layoutParams.leftMargin = xOffset;
+            centerView.setLayoutParams(layoutParams);
+        }
+        if (rightView != null) {
+            layoutParams = (FrameLayout.LayoutParams) rightView.getLayoutParams();
+            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
+            layoutParams.height = ViewGroup.LayoutParams.MATCH_PARENT;
+            layoutParams.width = widht;
+            layoutParams.leftMargin = widht + xOffset;
+            rightView.setLayoutParams(layoutParams);
+        }
+        messageContainer.invalidate();
+    }
+
+    private ViewGroup getViewForMessage(int num, boolean applyOffset) {
+        if (NotificationsController.getInstance().popupMessages.size() == 1 && (num < 0 || num >= NotificationsController.getInstance().popupMessages.size())) {
+            return null;
+        }
+        if (num == -1) {
+            num = NotificationsController.getInstance().popupMessages.size() - 1;
+        } else if (num == NotificationsController.getInstance().popupMessages.size()) {
+            num = 0;
+        }
+        ViewGroup view = null;
+        MessageObject messageObject = NotificationsController.getInstance().popupMessages.get(num);
+        if (messageObject.type == 1) {
+            if (imageViews.size() > 0) {
+                view = imageViews.get(0);
+                imageViews.remove(0);
+            } else {
+                view = new FrameLayoutAnimationListener(this);
+                view.addView(getLayoutInflater().inflate(R.layout.popup_image_layout, null));
+                view.setTag(2);
+
+                view.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        openCurrentMessage();
+                    }
+                });
+            }
+
+            TextView messageText = (TextView)view.findViewById(R.id.message_text);
+            BackupImageView imageView = (BackupImageView) view.findViewById(R.id.message_image);
+            imageView.imageReceiver.setAspectFit(true);
+            PhotoObject currentPhotoObject = PhotoObject.getClosestImageWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize());
+            boolean photoSet = false;
+            if (currentPhotoObject != null) {
+                boolean photoExist = true;
+                if (messageObject.type == 1) {
+                    File cacheFile = FileLoader.getPathToMessage(messageObject.messageOwner);
+                    if (!cacheFile.exists()) {
+                        photoExist = false;
+                    }
+                }
+                if (photoExist || MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_PHOTO)) {
+                    imageView.setImage(currentPhotoObject.photoOwner.location, "100_100", messageObject.imagePreview, currentPhotoObject.photoOwner.size);
+                    photoSet = true;
+                } else {
+                    if (messageObject.imagePreview != null) {
+                        imageView.setImageBitmap(messageObject.imagePreview);
+                        photoSet = true;
+                    }
+                }
+            }
+            if (!photoSet) {
+                imageView.setVisibility(View.GONE);
+                messageText.setVisibility(View.VISIBLE);
+                messageText.setTextSize(TypedValue.COMPLEX_UNIT_SP, MessagesController.getInstance().fontSize);
+                messageText.setText(messageObject.messageText);
+            } else {
+                imageView.setVisibility(View.VISIBLE);
+                messageText.setVisibility(View.GONE);
+            }
+        } else if (messageObject.type == 2) {
+            PopupAudioView cell = null;
+            if (audioViews.size() > 0) {
+                view = audioViews.get(0);
+                audioViews.remove(0);
+                cell = (PopupAudioView)view.findViewWithTag(300);
+            } else {
+                view = new FrameLayoutAnimationListener(this);
+                view.addView(getLayoutInflater().inflate(R.layout.popup_audio_layout, null));
+                view.setTag(3);
+
+                view.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        openCurrentMessage();
+                    }
+                });
+
+                ViewGroup audioContainer = (ViewGroup)view.findViewById(R.id.audio_container);
+                cell = new PopupAudioView(this);
+                cell.setTag(300);
+                audioContainer.addView(cell);
+            }
+
+            cell.setMessageObject(messageObject);
+            if (MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_AUDIO)) {
+                cell.downloadAudioIfNeed();
+            }
+        } else {
+            if (textViews.size() > 0) {
+                view = textViews.get(0);
+                textViews.remove(0);
+            } else {
+                view = new FrameLayoutAnimationListener(this);
+                view.addView(getLayoutInflater().inflate(R.layout.popup_text_layout, null));
+                view.setTag(1);
+
+                View textContainer = view.findViewById(R.id.text_container);
+                textContainer.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        openCurrentMessage();
+                    }
+                });
+            }
+            TextView messageText = (TextView)view.findViewById(R.id.message_text);
+            messageText.setTextSize(TypedValue.COMPLEX_UNIT_SP, MessagesController.getInstance().fontSize);
+            messageText.setText(messageObject.messageText);
+        }
+        if (view.getParent() == null) {
+            messageContainer.addView(view);
+        }
+        view.setVisibility(View.VISIBLE);
+
+        if (applyOffset) {
+            int widht = AndroidUtilities.displaySize.x - AndroidUtilities.dp(24);
+            FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) view.getLayoutParams();
+            layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
+            layoutParams.height = ViewGroup.LayoutParams.MATCH_PARENT;
+            layoutParams.width = widht;
+            if (num == currentMessageNum) {
+                layoutParams.leftMargin = 0;
+            } else if (num == currentMessageNum - 1) {
+                layoutParams.leftMargin = -widht;
+            } else if (num == currentMessageNum + 1) {
+                layoutParams.leftMargin = widht;
+            }
+            view.setLayoutParams(layoutParams);
+            view.invalidate();
+        }
+
+        return view;
+    }
+
+    private void reuseView(ViewGroup view) {
+        if (view == null) {
+            return;
+        }
+        int tag = (Integer)view.getTag();
+        view.setVisibility(View.GONE);
+        if (tag == 1) {
+            textViews.add(view);
+        } else if (tag == 2) {
+            imageViews.add(view);
+        } else if (tag == 3) {
+            audioViews.add(view);
+        }
+    }
+
+    private void prepareLayouts(int move) {
+        if (move == 0) {
+            reuseView(centerView);
+            reuseView(leftView);
+            reuseView(rightView);
+            for (int a = currentMessageNum - 1; a < currentMessageNum + 2; a++) {
+                if (a == currentMessageNum - 1) {
+                    leftView = getViewForMessage(a, true);
+                } else if (a == currentMessageNum) {
+                    centerView = getViewForMessage(a, true);
+                } else if (a == currentMessageNum + 1) {
+                    rightView = getViewForMessage(a, true);
+                }
+            }
+        } else if (move == 1) {
+            reuseView(rightView);
+            rightView = centerView;
+            centerView = leftView;
+            leftView = getViewForMessage(currentMessageNum - 1, true);
+        } else if (move == 2) {
+            reuseView(leftView);
+            leftView = centerView;
+            centerView = rightView;
+            rightView = getViewForMessage(currentMessageNum + 1, true);
+        } else if (move == 3) {
+            if (rightView != null) {
+                int offset = ((FrameLayout.LayoutParams) rightView.getLayoutParams()).leftMargin;
+                reuseView(rightView);
+                rightView = getViewForMessage(currentMessageNum + 1, false);
+                int widht = AndroidUtilities.displaySize.x - AndroidUtilities.dp(24);
+                FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) rightView.getLayoutParams();
+                layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
+                layoutParams.height = ViewGroup.LayoutParams.MATCH_PARENT;
+                layoutParams.width = widht;
+                layoutParams.leftMargin = offset;
+                rightView.setLayoutParams(layoutParams);
+                rightView.invalidate();
+            }
+        } else if (move == 4) {
+            if (leftView != null) {
+                int offset = ((FrameLayout.LayoutParams) leftView.getLayoutParams()).leftMargin;
+                reuseView(leftView);
+                leftView = getViewForMessage(0, false);
+                int widht = AndroidUtilities.displaySize.x - AndroidUtilities.dp(24);
+                FrameLayout.LayoutParams layoutParams = (FrameLayout.LayoutParams) leftView.getLayoutParams();
+                layoutParams.gravity = Gravity.TOP | Gravity.LEFT;
+                layoutParams.height = ViewGroup.LayoutParams.MATCH_PARENT;
+                layoutParams.width = widht;
+                layoutParams.leftMargin = offset;
+                leftView.setLayoutParams(layoutParams);
+                leftView.invalidate();
+            }
+        }
+    }
+
+    private void fixLayout() {
+        messageContainer.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+            @Override
+            public boolean onPreDraw() {
+                messageContainer.getViewTreeObserver().removeOnPreDrawListener(this);
+                if (!checkTransitionAnimation() && !startedMoving) {
+                    ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams)messageContainer.getLayoutParams();
+                    if (!AndroidUtilities.isTablet() && PopupNotificationActivity.this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
+                        layoutParams.topMargin = AndroidUtilities.dp(40);
+                    } else {
+                        layoutParams.topMargin = AndroidUtilities.dp(48);
+                    }
+                    layoutParams.bottomMargin = AndroidUtilities.dp(48);
+                    layoutParams.width = ViewGroup.MarginLayoutParams.MATCH_PARENT;
+                    layoutParams.height = ViewGroup.MarginLayoutParams.MATCH_PARENT;
+                    messageContainer.setLayoutParams(layoutParams);
+                    applyViewsLayoutParams(0);
+                }
+                return false;
+            }
+        });
+    }
+
+    private void handleIntent(Intent intent) {
+        KeyguardManager km = (KeyguardManager) getSystemService(KEYGUARD_SERVICE);
+        if (km.inKeyguardRestrictedInputMode() || !ApplicationLoader.isScreenOn) {
+            getWindow().addFlags(
+                            WindowManager.LayoutParams.FLAG_DIM_BEHIND |
+                            WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED |
+                            WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON |
+                            WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);
+        } else {
+            getWindow().addFlags(
+                            WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED |
+                            WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON |
+                            WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);
+            getWindow().clearFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);
+        }
+
+        if (currentMessageObject == null) {
+            currentMessageNum = 0;
+        }
+        getNewMessage();
+    }
+
+    private void getNewMessage() {
+        if (NotificationsController.getInstance().popupMessages.isEmpty()) {
+            onFinish();
+            finish();
+            return;
+        }
+
+        boolean found = false;
+        if ((currentMessageNum != 0 || chatActivityEnterView.hasText() || startedMoving) && currentMessageObject != null) {
+            for (int a = 0; a < NotificationsController.getInstance().popupMessages.size(); a++) {
+                if (NotificationsController.getInstance().popupMessages.get(a).messageOwner.id == currentMessageObject.messageOwner.id) {
+                    currentMessageNum = a;
+                    found = true;
+                    break;
+                }
+            }
+        }
+        if (!found) {
+            currentMessageNum = 0;
+            currentMessageObject = NotificationsController.getInstance().popupMessages.get(0);
+            updateInterfaceForCurrentMessage(0);
+        } else if (startedMoving) {
+            if (currentMessageNum == NotificationsController.getInstance().popupMessages.size() - 1) {
+                prepareLayouts(3);
+            } else if (currentMessageNum == 1) {
+                prepareLayouts(4);
+            }
+        }
+        countText.setText(String.format("%d/%d", currentMessageNum + 1, NotificationsController.getInstance().popupMessages.size()));
+    }
+
+    private void openCurrentMessage() {
+        if (currentMessageObject == null) {
+            return;
+        }
+        Intent intent = new Intent(ApplicationLoader.applicationContext, LaunchActivity.class);
+        long dialog_id = currentMessageObject.getDialogId();
+        if ((int)dialog_id != 0) {
+            int lower_id = (int)dialog_id;
+            if (lower_id < 0) {
+                intent.putExtra("chatId", -lower_id);
+            } else {
+                intent.putExtra("userId", lower_id);
+            }
+        } else {
+            intent.putExtra("encId", (int)(dialog_id >> 32));
+        }
+        intent.setAction("com.tmessages.openchat" + Math.random() + Integer.MAX_VALUE);
+        intent.setFlags(0x00008000);
+        startActivity(intent);
+        onFinish();
+        finish();
+    }
+
+    private void updateInterfaceForCurrentMessage(int move) {
+        if (actionBarLayer == null) {
+            return;
+        }
+        currentChat = null;
+        currentUser = null;
+        long dialog_id = currentMessageObject.getDialogId();
+        chatActivityEnterView.setDialogId(dialog_id);
+        if ((int)dialog_id != 0) {
+            int lower_id = (int)dialog_id;
+            if (lower_id > 0) {
+                currentUser = MessagesController.getInstance().getUser(lower_id);
+            } else {
+                currentChat = MessagesController.getInstance().getChat(-lower_id);
+                currentUser = MessagesController.getInstance().getUser(currentMessageObject.messageOwner.from_id);
+            }
+        } else {
+            TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat((int)(dialog_id >> 32));
+            currentUser = MessagesController.getInstance().getUser(encryptedChat.user_id);
+        }
+
+        if (currentChat != null && currentUser != null) {
+            actionBarLayer.setTitle(currentChat.title);
+            actionBarLayer.setSubtitle(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
+            actionBarLayer.setTitleIcon(0, 0);
+        } else if (currentUser != null) {
+            actionBarLayer.setTitle(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
+            if ((int)dialog_id == 0) {
+                actionBarLayer.setTitleIcon(R.drawable.ic_lock_white, AndroidUtilities.dp(4));
+            } else {
+                actionBarLayer.setTitleIcon(0, 0);
+            }
+        }
+
+        prepareLayouts(move);
+        updateSubtitle();
+        checkAndUpdateAvatar();
+        applyViewsLayoutParams(0);
+    }
+
+    private void updateSubtitle() {
+        if (actionBarLayer == null) {
+            return;
+        }
+        if (currentChat != null || currentUser == null) {
+            return;
+        }
+        if (currentUser.id / 1000 != 777 && currentUser.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(currentUser.id) == null && (ContactsController.getInstance().contactsDict.size() != 0 || !ContactsController.getInstance().isLoadingContacts())) {
+            if (currentUser.phone != null && currentUser.phone.length() != 0) {
+                actionBarLayer.setTitle(PhoneFormat.getInstance().format("+" + currentUser.phone));
+            } else {
+                actionBarLayer.setTitle(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
+            }
+        } else {
+            actionBarLayer.setTitle(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
+        }
+        CharSequence printString = MessagesController.getInstance().printingStrings.get(currentMessageObject.getDialogId());
+        if (printString == null || printString.length() == 0) {
+            lastPrintString = null;
+            setTypingAnimation(false);
+            TLRPC.User user = MessagesController.getInstance().getUser(currentUser.id);
+            if (user != null) {
+                currentUser = user;
+            }
+            actionBarLayer.setSubtitle(LocaleController.formatUserStatus(currentUser));
+        } else {
+            lastPrintString = printString;
+            actionBarLayer.setSubtitle(printString);
+            setTypingAnimation(true);
+        }
+    }
+
+    private void checkAndUpdateAvatar() {
+        TLRPC.FileLocation newPhoto = null;
+        int placeHolderId = 0;
+        if (currentChat != null) {
+            TLRPC.Chat chat = MessagesController.getInstance().getChat(currentChat.id);
+            if (chat == null) {
+                return;
+            }
+            currentChat = chat;
+            if (currentChat.photo != null) {
+                newPhoto = currentChat.photo.photo_small;
+            }
+            placeHolderId = AndroidUtilities.getGroupAvatarForId(currentChat.id);
+        } else if (currentUser != null) {
+            TLRPC.User user = MessagesController.getInstance().getUser(currentUser.id);
+            if (user == null) {
+                return;
+            }
+            currentUser = user;
+            if (currentUser.photo != null) {
+                newPhoto = currentUser.photo.photo_small;
+            }
+            placeHolderId = AndroidUtilities.getUserAvatarForId(currentUser.id);
+        }
+        if (avatarImageView != null) {
+            avatarImageView.setImage(newPhoto, "50_50", placeHolderId);
+        }
+    }
+
+    private void setTypingAnimation(boolean start) {
+        if (actionBarLayer == null) {
+            return;
+        }
+        if (start) {
+            try {
+                actionBarLayer.setSubTitleIcon(0, typingDotsDrawable, AndroidUtilities.dp(4));
+                typingDotsDrawable.start();
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+        } else {
+            actionBarLayer.setSubTitleIcon(0, null, 0);
+            typingDotsDrawable.stop();
+        }
+    }
+
+    @Override
+    public void onBackPressed() {
+        if (chatActivityEnterView.isEmojiPopupShowing()) {
+            chatActivityEnterView.hideEmojiPopup();
+            return;
+        }
+        super.onBackPressed();
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        if (chatActivityEnterView != null) {
+            chatActivityEnterView.setFieldFocused(true);
+        }
+        ConnectionsManager.getInstance().setAppPaused(false, false);
+        fixLayout();
+        wakeLock.acquire(7000);
+    }
+
+    @Override
+    protected void onPause() {
+        super.onPause();
+        overridePendingTransition(0, 0);
+        if (chatActivityEnterView != null) {
+            chatActivityEnterView.hideEmojiPopup();
+            chatActivityEnterView.setFieldFocused(false);
+        }
+        ConnectionsManager.getInstance().setAppPaused(true, false);
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.appDidLogout) {
+            onFinish();
+            finish();
+        } else if (id == NotificationCenter.pushMessagesUpdated) {
+            getNewMessage();
+        } else if (id == NotificationCenter.updateInterfaces) {
+            if (currentMessageObject == null) {
+                return;
+            }
+            int updateMask = (Integer)args[0];
+            if ((updateMask & MessagesController.UPDATE_MASK_NAME) != 0 || (updateMask & MessagesController.UPDATE_MASK_STATUS) != 0 || (updateMask & MessagesController.UPDATE_MASK_CHAT_NAME) != 0 || (updateMask & MessagesController.UPDATE_MASK_CHAT_MEMBERS) != 0) {
+                updateSubtitle();
+            }
+            if ((updateMask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (updateMask & MessagesController.UPDATE_MASK_CHAT_AVATAR) != 0) {
+                checkAndUpdateAvatar();
+            }
+            if ((updateMask & MessagesController.UPDATE_MASK_USER_PRINT) != 0) {
+                CharSequence printString = MessagesController.getInstance().printingStrings.get(currentMessageObject.getDialogId());
+                if (lastPrintString != null && printString == null || lastPrintString == null && printString != null || lastPrintString != null && printString != null && !lastPrintString.equals(printString)) {
+                    updateSubtitle();
+                }
+            }
+        } else if (id == NotificationCenter.audioDidReset) {
+            Integer mid = (Integer)args[0];
+            if (messageContainer != null) {
+                int count = messageContainer.getChildCount();
+                for (int a = 0; a < count; a++) {
+                    View view = messageContainer.getChildAt(a);
+                    if ((Integer)view.getTag() == 3) {
+                        PopupAudioView cell = (PopupAudioView)view.findViewWithTag(300);
+                        if (cell.getMessageObject() != null && cell.getMessageObject().messageOwner.id == mid) {
+                            cell.updateButtonState();
+                            break;
+                        }
+                    }
+                }
+            }
+        } else if (id == NotificationCenter.audioProgressDidChanged) {
+            Integer mid = (Integer)args[0];
+            if (messageContainer != null) {
+                int count = messageContainer.getChildCount();
+                for (int a = 0; a < count; a++) {
+                    View view = messageContainer.getChildAt(a);
+                    if ((Integer)view.getTag() == 3) {
+                        PopupAudioView cell = (PopupAudioView)view.findViewWithTag(300);
+                        if (cell.getMessageObject() != null && cell.getMessageObject().messageOwner.id == mid) {
+                            cell.updateProgress();
+                            break;
+                        }
+                    }
+                }
+            }
+        } else if (id == NotificationCenter.emojiDidLoaded) {
+            if (messageContainer != null) {
+                int count = messageContainer.getChildCount();
+                for (int a = 0; a < count; a++) {
+                    View view = messageContainer.getChildAt(a);
+                    view.invalidate();
+                }
+            }
+        } else if (id == NotificationCenter.contactsDidLoaded) {
+            updateSubtitle();
+        }
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        onFinish();
+        if (wakeLock.isHeld()) {
+            wakeLock.release();
+        }
+    }
+
+    protected void onFinish() {
+        if (finished) {
+            return;
+        }
+        finished = true;
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.appDidLogout);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.pushMessagesUpdated);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioProgressDidChanged);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioDidReset);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.contactsDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
+        if (chatActivityEnterView != null) {
+            chatActivityEnterView.onDestroy();
+        }
+        if (wakeLock.isHeld()) {
+            wakeLock.release();
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/ProfileNotificationsActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/ProfileNotificationsActivity.java
new file mode 100644
index 000000000..c611ec670
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/ProfileNotificationsActivity.java
@@ -0,0 +1,484 @@
+/*
+ * This is the source code of Telegram for Android v. 1.4.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.tomato.ui;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.media.Ringtone;
+import android.media.RingtoneManager;
+import android.net.Uri;
+import android.os.Bundle;
+import android.provider.Settings;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import org.tomato.android.LocaleController;
+import org.tomato.android.MessagesController;
+import org.tomato.android.MessagesStorage;
+import org.tomato.android.NotificationCenter;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.RPCRequest;
+import org.tomato.messenger.TLObject;
+import org.tomato.messenger.TLRPC;
+import org.tomato.ui.Adapters.BaseFragmentAdapter;
+import org.tomato.ui.Views.ActionBar.ActionBarLayer;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+import org.tomato.ui.Views.ColorPickerView;
+
+public class ProfileNotificationsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+
+    private ListView listView;
+    private long dialog_id;
+
+    private int settingsNotificationsRow;
+    private int settingsVibrateRow;
+    private int settingsSoundRow;
+    private int settingsLedRow;
+    private int rowCount = 0;
+
+    public ProfileNotificationsActivity(Bundle args) {
+        super(args);
+        dialog_id = args.getLong("dialog_id");
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        settingsNotificationsRow = rowCount++;
+        settingsVibrateRow = rowCount++;
+        settingsLedRow = rowCount++;
+        settingsSoundRow = rowCount++;
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.notificationsSettingsUpdated);
+        return super.onFragmentCreate();
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.notificationsSettingsUpdated);
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
+            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
+
+            actionBarLayer.setTitle(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds));
+
+            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    }
+                }
+            });
+
+            fragmentView = inflater.inflate(R.layout.settings_layout, container, false);
+
+            listView = (ListView)fragmentView.findViewById(R.id.listView);
+            listView.setAdapter(new ListAdapter(getParentActivity()));
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+                    if (i == settingsVibrateRow) {
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("Vibrate", R.string.Vibrate));
+                        builder.setItems(new CharSequence[] {
+                                LocaleController.getString("Disabled", R.string.Disabled),
+                                LocaleController.getString("SettingsDefault", R.string.SettingsDefault),
+                                LocaleController.getString("SystemDefault", R.string.SystemDefault),
+                                LocaleController.getString("Short", R.string.Short),
+                                LocaleController.getString("Long", R.string.Long)
+                        }, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                if (which == 0) {
+                                    editor.putInt("vibrate_" + dialog_id, 2);
+                                } else if (which == 1) {
+                                    editor.putInt("vibrate_" + dialog_id, 0);
+                                } else if (which == 2) {
+                                    editor.putInt("vibrate_" + dialog_id, 4);
+                                } else if (which == 3) {
+                                    editor.putInt("vibrate_" + dialog_id, 1);
+                                } else if (which == 4) {
+                                    editor.putInt("vibrate_" + dialog_id, 3);
+                                }
+                                editor.commit();
+                                if (listView != null) {
+                                    listView.invalidateViews();
+                                }
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
+                    } else if (i == settingsNotificationsRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                        builder.setItems(new CharSequence[] {
+                                LocaleController.getString("Default", R.string.Default),
+                                LocaleController.getString("Enabled", R.string.Enabled),
+                                LocaleController.getString("Disabled", R.string.Disabled)
+                        }, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                editor.putInt("notify2_" + dialog_id, which);
+                                MessagesStorage.getInstance().setDialogFlags(dialog_id, which == 2 ? 1 : 0);
+                                editor.commit();
+                                if (listView != null) {
+                                    listView.invalidateViews();
+                                }
+                                if (i == settingsNotificationsRow) {
+                                    updateServerNotificationsSettings();
+                                }
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
+                    } else if (i == settingsSoundRow) {
+                        try {
+                            Intent tmpIntent = new Intent(RingtoneManager.ACTION_RINGTONE_PICKER);
+                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE, RingtoneManager.TYPE_NOTIFICATION);
+                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_DEFAULT, true);
+                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_DEFAULT_URI, RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION));
+                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                            Uri currentSound = null;
+
+                            String defaultPath = null;
+                            Uri defaultUri = Settings.System.DEFAULT_NOTIFICATION_URI;
+                            if (defaultUri != null) {
+                                defaultPath = defaultUri.getPath();
+                            }
+
+                            String path = preferences.getString("sound_path_" + dialog_id, defaultPath);
+                            if (path != null && !path.equals("NoSound")) {
+                                if (path.equals(defaultPath)) {
+                                    currentSound = defaultUri;
+                                } else {
+                                    currentSound = Uri.parse(path);
+                                }
+                            }
+
+                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_EXISTING_URI, currentSound);
+                            startActivityForResult(tmpIntent, 12);
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                    } else if (i == settingsLedRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                        view = li.inflate(R.layout.settings_color_dialog_layout, null, false);
+                        final ColorPickerView colorPickerView = (ColorPickerView)view.findViewById(R.id.color_picker);
+
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        if (preferences.contains("color_" + dialog_id)) {
+                            colorPickerView.setOldCenterColor(preferences.getInt("color_" + dialog_id, 0xff00ff00));
+                        } else {
+                            if ((int)dialog_id < 0) {
+                                colorPickerView.setOldCenterColor(preferences.getInt("GroupLed", 0xff00ff00));
+                            } else {
+                                colorPickerView.setOldCenterColor(preferences.getInt("MessagesLed", 0xff00ff00));
+                            }
+                        }
+
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("LedColor", R.string.LedColor));
+                        builder.setView(view);
+                        builder.setPositiveButton(LocaleController.getString("Set", R.string.Set), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int which) {
+                                final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                editor.putInt("color_" + dialog_id, colorPickerView.getColor());
+                                editor.commit();
+                                listView.invalidateViews();
+                            }
+                        });
+                        builder.setNeutralButton(LocaleController.getString("Disabled", R.string.Disabled), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                editor.putInt("color_" + dialog_id, 0);
+                                editor.commit();
+                                listView.invalidateViews();
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Default", R.string.Default), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                editor.remove("color_" + dialog_id);
+                                editor.commit();
+                                listView.invalidateViews();
+                            }
+                        });
+                        showAlertDialog(builder);
+                    }
+                }
+            });
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    public void updateServerNotificationsSettings() {
+        if ((int)dialog_id == 0) {
+            return;
+        }
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+        TLRPC.TL_account_updateNotifySettings req = new TLRPC.TL_account_updateNotifySettings();
+        req.settings = new TLRPC.TL_inputPeerNotifySettings();
+        req.settings.sound = "default";
+        req.settings.events_mask = 0;
+        req.settings.mute_until = preferences.getInt("notify2_" + dialog_id, 0) != 2 ? 0 : Integer.MAX_VALUE;
+        req.settings.show_previews = preferences.getBoolean("preview_" + dialog_id, true);
+
+        req.peer = new TLRPC.TL_inputNotifyPeer();
+
+        if ((int)dialog_id < 0) {
+            ((TLRPC.TL_inputNotifyPeer)req.peer).peer = new TLRPC.TL_inputPeerChat();
+            ((TLRPC.TL_inputNotifyPeer)req.peer).peer.chat_id = -(int)dialog_id;
+        } else {
+            TLRPC.User user = MessagesController.getInstance().getUser((int)dialog_id);
+            if (user == null) {
+                return;
+            }
+            if (user instanceof TLRPC.TL_userForeign || user instanceof TLRPC.TL_userRequest) {
+                ((TLRPC.TL_inputNotifyPeer)req.peer).peer = new TLRPC.TL_inputPeerForeign();
+                ((TLRPC.TL_inputNotifyPeer)req.peer).peer.access_hash = user.access_hash;
+            } else {
+                ((TLRPC.TL_inputNotifyPeer)req.peer).peer = new TLRPC.TL_inputPeerContact();
+            }
+            ((TLRPC.TL_inputNotifyPeer)req.peer).peer.user_id = (int)dialog_id;
+        }
+
+        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+            @Override
+            public void run(TLObject response, TLRPC.TL_error error) {
+
+            }
+        });
+    }
+
+    @Override
+    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
+        if (resultCode == Activity.RESULT_OK) {
+            if (data == null) {
+                return;
+            }
+            Uri ringtone = data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
+            String name = null;
+            if (ringtone != null) {
+                Ringtone rng = RingtoneManager.getRingtone(ApplicationLoader.applicationContext, ringtone);
+                if (rng != null) {
+                    if(ringtone.equals(Settings.System.DEFAULT_NOTIFICATION_URI)) {
+                        name = LocaleController.getString("Default", R.string.Default);
+                    } else {
+                        name = rng.getTitle(getParentActivity());
+                    }
+                    rng.stop();
+                }
+            }
+
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+            SharedPreferences.Editor editor = preferences.edit();
+
+            if (requestCode == 12) {
+                if (name != null && ringtone != null) {
+                    editor.putString("sound_" + dialog_id, name);
+                    editor.putString("sound_path_" + dialog_id, ringtone.toString());
+                } else {
+                    editor.putString("sound_" + dialog_id, "NoSound");
+                    editor.putString("sound_path_" + dialog_id, "NoSound");
+                }
+            }
+            editor.commit();
+            listView.invalidateViews();
+        }
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.notificationsSettingsUpdated) {
+            listView.invalidateViews();
+        }
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return true;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return true;
+        }
+
+        @Override
+        public int getCount() {
+            return rowCount;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            if (type == 0) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.user_profile_leftright_row_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
+
+                View divider = view.findViewById(R.id.settings_row_divider);
+                if (i == settingsVibrateRow) {
+                    textView.setText(LocaleController.getString("Vibrate", R.string.Vibrate));
+                    divider.setVisibility(View.VISIBLE);
+                    SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                    int value = preferences.getInt("vibrate_" + dialog_id, 0);
+                    if (value == 0) {
+                        detailTextView.setText(LocaleController.getString("SettingsDefault", R.string.SettingsDefault));
+                    } else if (value == 1) {
+                        detailTextView.setText(LocaleController.getString("Short", R.string.Short));
+                    } else if (value == 2) {
+                        detailTextView.setText(LocaleController.getString("Disabled", R.string.Disabled));
+                    } else if (value == 3) {
+                        detailTextView.setText(LocaleController.getString("Long", R.string.Long));
+                    } else if (value == 4) {
+                        detailTextView.setText(LocaleController.getString("SystemDefault", R.string.SystemDefault));
+                    }
+                } else if (i == settingsNotificationsRow) {
+                    textView.setText(LocaleController.getString("Notifications", R.string.Notifications));
+                    divider.setVisibility(View.VISIBLE);
+                    SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                    int value = preferences.getInt("notify2_" + dialog_id, 0);
+                    if (value == 0) {
+                        detailTextView.setText(LocaleController.getString("Default", R.string.Default));
+                    } else if (value == 1) {
+                        detailTextView.setText(LocaleController.getString("Enabled", R.string.Enabled));
+                    } else if (value == 2) {
+                        detailTextView.setText(LocaleController.getString("Disabled", R.string.Disabled));
+                    }
+                }
+            } if (type == 1) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_row_detail_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
+
+                View divider = view.findViewById(R.id.settings_row_divider);
+                if (i == settingsSoundRow) {
+                    SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                    String name = preferences.getString("sound_" + dialog_id, LocaleController.getString("Default", R.string.Default));
+                    if (name.equals("NoSound")) {
+                        detailTextView.setText(LocaleController.getString("NoSound", R.string.NoSound));
+                    } else {
+                        detailTextView.setText(name);
+                    }
+                    textView.setText(LocaleController.getString("Sound", R.string.Sound));
+                    divider.setVisibility(View.INVISIBLE);
+                }
+            } else if (type == 2) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_row_color_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                View colorView = view.findViewById(R.id.settings_color);
+                View divider = view.findViewById(R.id.settings_row_divider);
+                textView.setText(LocaleController.getString("LedColor", R.string.LedColor));
+                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+
+                if (preferences.contains("color_" + dialog_id)) {
+                    colorView.setBackgroundColor(preferences.getInt("color_" + dialog_id, 0xff00ff00));
+                } else {
+                    if ((int)dialog_id < 0) {
+                        colorView.setBackgroundColor(preferences.getInt("GroupLed", 0xff00ff00));
+                    } else {
+                        colorView.setBackgroundColor(preferences.getInt("MessagesLed", 0xff00ff00));
+                    }
+                }
+                divider.setVisibility(View.VISIBLE);
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            if (i == settingsNotificationsRow || i == settingsVibrateRow) {
+                return 0;
+            } else if (i == settingsSoundRow) {
+                return 1;
+            } else if (i == settingsLedRow) {
+                return 2;
+            }
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 3;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java b/TMessagesProj/src/main/java/org/tomato/ui/SecretPhotoViewer.java
similarity index 97%
rename from TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java
rename to TMessagesProj/src/main/java/org/tomato/ui/SecretPhotoViewer.java
index a0164a47a..d241afa63 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SecretPhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/SecretPhotoViewer.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.ui;
+package org.tomato.ui;
 
 import android.app.Activity;
 import android.content.Context;
@@ -29,16 +29,16 @@
 import android.view.WindowManager;
 import android.widget.FrameLayout;
 
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ImageLoader;
-import org.telegram.android.ImageReceiver;
-import org.telegram.android.MessageObject;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.TLRPC;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.ImageLoader;
+import org.tomato.android.ImageReceiver;
+import org.tomato.android.MessageObject;
+import org.tomato.android.NotificationCenter;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLoader;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
 
 import java.io.File;
 import java.util.ArrayList;
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/SettingsActivity.java
new file mode 100644
index 000000000..36752b0bf
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/SettingsActivity.java
@@ -0,0 +1,1132 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.content.pm.PackageInfo;
+import android.graphics.Typeface;
+import android.net.Uri;
+import android.os.Bundle;
+import android.text.Html;
+import android.text.Spannable;
+import android.text.method.LinkMovementMethod;
+import android.util.Base64;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.ImageButton;
+import android.widget.ImageView;
+import android.widget.ListView;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import org.tomato.PhoneFormat.PhoneFormat;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.ContactsController;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MediaController;
+import org.tomato.android.MessageObject;
+import org.tomato.android.MessagesController;
+import org.tomato.android.MessagesStorage;
+import org.tomato.android.NotificationCenter;
+import org.tomato.messenger.BuildVars;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLoader;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.RPCRequest;
+import org.tomato.messenger.SerializedData;
+import org.tomato.messenger.TLClassStore;
+import org.tomato.messenger.TLObject;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
+import org.tomato.ui.Adapters.BaseFragmentAdapter;
+import org.tomato.ui.Views.ActionBar.ActionBarLayer;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+import org.tomato.ui.Views.AvatarUpdater;
+import org.tomato.ui.Views.BackupImageView;
+import org.tomato.ui.Views.NumberPicker;
+import org.tomato.ui.Views.SettingsSectionLayout;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Locale;
+
+public class SettingsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, PhotoViewer.PhotoViewerProvider {
+    private ListView listView;
+    private ListAdapter listAdapter;
+    private AvatarUpdater avatarUpdater = new AvatarUpdater();
+
+    private int profileRow;
+    private int numberSectionRow;
+    private int numberRow;
+    private int usernameRow;
+    private int settingsSectionRow;
+    private int textSizeRow;
+    private int enableAnimationsRow;
+    private int notificationRow;
+    private int blockedRow;
+    private int backgroundRow;
+    private int balloonRow;
+    private int themeRow;
+    private int supportSectionRow;
+    private int askQuestionRow;
+    private int logoutRow;
+    private int sendLogsRow;
+    private int clearLogsRow;
+    private int switchBackendButtonRow;
+    private int messagesSectionRow;
+    private int sendByEnterRow;
+    private int terminateSessionsRow;
+    private int mediaDownloadSection;
+    private int mobileDownloadRow;
+    private int wifiDownloadRow;
+    private int roamingDownloadRow;
+    private int saveToGalleryRow;
+    private int telegramFaqRow;
+    private int languageRow;
+    private int versionRow;
+    private int contactsSectionRow;
+    private int contactsReimportRow;
+    private int contactsSortRow;
+    private int rowCount;
+
+    private static class LinkMovementMethodMy extends LinkMovementMethod {
+        @Override
+        public boolean onTouchEvent(TextView widget, Spannable buffer, MotionEvent event) {
+            try {
+                return super.onTouchEvent(widget, buffer, event);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            return false;
+        }
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+        avatarUpdater.parentFragment = this;
+        avatarUpdater.delegate = new AvatarUpdater.AvatarUpdaterDelegate() {
+            @Override
+            public void didUploadedPhoto(TLRPC.InputFile file, TLRPC.PhotoSize small, TLRPC.PhotoSize big) {
+                TLRPC.TL_photos_uploadProfilePhoto req = new TLRPC.TL_photos_uploadProfilePhoto();
+                req.caption = "";
+                req.crop = new TLRPC.TL_inputPhotoCropAuto();
+                req.file = file;
+                req.geo_point = new TLRPC.TL_inputGeoPointEmpty();
+                ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                    @Override
+                    public void run(TLObject response, TLRPC.TL_error error) {
+                        if (error == null) {
+                            TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
+                            if (user == null) {
+                                user = UserConfig.getCurrentUser();
+                                if (user == null) {
+                                    return;
+                                }
+                                MessagesController.getInstance().putUser(user, false);
+                            } else {
+                                UserConfig.setCurrentUser(user);
+                            }
+                            if (user == null) {
+                                return;
+                            }
+                            TLRPC.TL_photos_photo photo = (TLRPC.TL_photos_photo)response;
+                            ArrayList<TLRPC.PhotoSize> sizes = photo.photo.sizes;
+                            TLRPC.PhotoSize smallSize = FileLoader.getClosestPhotoSizeWithSize(sizes, 100);
+                            TLRPC.PhotoSize bigSize = FileLoader.getClosestPhotoSizeWithSize(sizes, 1000);
+                            user.photo = new TLRPC.TL_userProfilePhoto();
+                            user.photo.photo_id = photo.photo.id;
+                            if (smallSize != null) {
+                                user.photo.photo_small = smallSize.location;
+                            }
+                            if (bigSize != null) {
+                                user.photo.photo_big = bigSize.location;
+                            } else if (smallSize != null) {
+                                user.photo.photo_small = smallSize.location;
+                            }
+                            MessagesStorage.getInstance().clearUserPhotos(user.id);
+                            ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
+                            users.add(user);
+                            MessagesStorage.getInstance().putUsersAndChats(users, null, false, true);
+                            AndroidUtilities.RunOnUIThread(new Runnable() {
+                                @Override
+                                public void run() {
+                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, MessagesController.UPDATE_MASK_ALL);
+                                    UserConfig.saveConfig(true);
+                                }
+                            });
+                        }
+                    }
+                });
+            }
+        };
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
+
+
+        rowCount = 0;
+        profileRow = rowCount++;
+        numberSectionRow = rowCount++;
+        numberRow = rowCount++;
+        usernameRow = rowCount++;
+        settingsSectionRow = rowCount++;
+        balloonRow = rowCount++;
+        themeRow = rowCount ++;
+        backgroundRow = rowCount++;
+        enableAnimationsRow = rowCount++;
+        languageRow = rowCount++;
+        notificationRow = rowCount++;
+        blockedRow = rowCount++;
+
+
+        terminateSessionsRow = rowCount++;
+        mediaDownloadSection = rowCount++;
+        mobileDownloadRow = rowCount++;
+        wifiDownloadRow = rowCount++;
+        roamingDownloadRow = rowCount++;
+        saveToGalleryRow = rowCount++;
+        messagesSectionRow = rowCount++;
+        textSizeRow = rowCount++;
+        sendByEnterRow = rowCount++;
+        //contactsSectionRow = rowCount++;
+        //contactsSortRow = rowCount++;
+        //contactsReimportRow = rowCount++;
+        supportSectionRow = rowCount++;
+        if (BuildVars.DEBUG_VERSION) {
+            sendLogsRow = rowCount++;
+            clearLogsRow = rowCount++;
+            switchBackendButtonRow = rowCount++;
+        }
+        telegramFaqRow = rowCount++;
+        askQuestionRow = rowCount++;
+        logoutRow = rowCount++;
+        versionRow = rowCount++;
+
+        MessagesController.getInstance().loadFullUser(UserConfig.getCurrentUser(), classGuid);
+
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        MessagesController.getInstance().cancelLoadFullUser(UserConfig.getClientUserId());
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
+        avatarUpdater.clear();
+        ((LaunchActivity)getParentActivity()).recreate();
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
+            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
+            actionBarLayer.setTitle(LocaleController.getString("Settings", R.string.Settings));
+            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    }
+                }
+            });
+
+            fragmentView = inflater.inflate(R.layout.settings_layout, container, false);
+            listAdapter = new ListAdapter(getParentActivity());
+            listView = (ListView)fragmentView.findViewById(R.id.listView);
+            listView.setAdapter(listAdapter);
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+                    if (i == textSizeRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("TextSize", R.string.TextSize));
+                        final NumberPicker numberPicker = new NumberPicker(getParentActivity());
+                        numberPicker.setMinValue(12);
+                        numberPicker.setMaxValue(30);
+                        numberPicker.setValue(MessagesController.getInstance().fontSize);
+                        builder.setView(numberPicker);
+                        builder.setNegativeButton(LocaleController.getString("Done", R.string.Done), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                editor.putInt("fons_size", numberPicker.getValue());
+                                MessagesController.getInstance().fontSize = numberPicker.getValue();
+                                editor.commit();
+                                if (listView != null) {
+                                    listView.invalidateViews();
+                                }
+                            }
+                        });
+                        showAlertDialog(builder);
+                    } else if (i == enableAnimationsRow) {
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                        boolean animations = preferences.getBoolean("view_animations", true);
+                        SharedPreferences.Editor editor = preferences.edit();
+                        editor.putBoolean("view_animations", !animations);
+                        editor.commit();
+                        if (listView != null) {
+                            listView.invalidateViews();
+                        }
+                    } else if (i == notificationRow) {
+                        presentFragment(new SettingsNotificationsActivity());
+                    } else if (i == blockedRow) {
+                        presentFragment(new SettingsBlockedUsersActivity());
+                    } else if (i == backgroundRow) {
+                        presentFragment(new SettingsWallpapersActivity());
+                    }else if (i == themeRow) {
+                        presentFragment(new SettingsThemeActivity());
+                    }
+
+                    else if (i == balloonRow) {
+                        presentFragment(new SettingsBalloonChatActivity());
+                    } else if (i == askQuestionRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        final TextView message = new TextView(getParentActivity());
+                        message.setText(Html.fromHtml(LocaleController.getString("AskAQuestionInfo", R.string.AskAQuestionInfo)));
+                        message.setTextSize(18);
+                        message.setPadding(AndroidUtilities.dp(8), AndroidUtilities.dp(5), AndroidUtilities.dp(8), AndroidUtilities.dp(6));
+                        message.setMovementMethod(new LinkMovementMethodMy());
+
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setView(message);
+                        builder.setPositiveButton(LocaleController.getString("AskButton", R.string.AskButton), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                performAskAQuestion();
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
+                    } else if (i == sendLogsRow) {
+                        sendLogs();
+                    } else if (i == clearLogsRow) {
+                        FileLog.cleanupLogs();
+                    } else if (i == sendByEnterRow) {
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                        boolean send = preferences.getBoolean("send_by_enter", false);
+                        SharedPreferences.Editor editor = preferences.edit();
+                        editor.putBoolean("send_by_enter", !send);
+                        editor.commit();
+                        if (listView != null) {
+                            listView.invalidateViews();
+                        }
+                    } else if (i == saveToGalleryRow) {
+                        MediaController.getInstance().toggleSaveToGallery();
+                        if (listView != null) {
+                            listView.invalidateViews();
+                        }
+                    } else if (i == terminateSessionsRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setMessage(LocaleController.getString("AreYouSureSessions", R.string.AreYouSureSessions));
+                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                TLRPC.TL_auth_resetAuthorizations req = new TLRPC.TL_auth_resetAuthorizations();
+                                ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                                    @Override
+                                    public void run(final TLObject response, final TLRPC.TL_error error) {
+                                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                                            @Override
+                                            public void run() {
+                                                if (getParentActivity() == null) {
+                                                    return;
+                                                }
+                                                if (error == null && response instanceof TLRPC.TL_boolTrue) {
+                                                    Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("TerminateAllSessions", R.string.TerminateAllSessions), Toast.LENGTH_SHORT);
+                                                    toast.show();
+                                                } else {
+                                                    Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("UnknownError", R.string.UnknownError), Toast.LENGTH_SHORT);
+                                                    toast.show();
+                                                }
+                                            }
+                                        });
+                                        UserConfig.registeredForPush = false;
+                                        UserConfig.registeredForInternalPush = false;
+                                        UserConfig.saveConfig(false);
+                                        MessagesController.getInstance().registerForPush(UserConfig.pushString);
+                                        ConnectionsManager.getInstance().initPushConnection();
+                                    }
+                                });
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
+                    } else if (i == languageRow) {
+                        presentFragment(new LanguageSelectActivity());
+                    } else if (i == switchBackendButtonRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setMessage(LocaleController.getString("AreYouSure", R.string.AreYouSure));
+                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                ConnectionsManager.getInstance().switchBackend();
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
+                    } else if (i == telegramFaqRow) {
+                        try {
+                            Intent pickIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(LocaleController.getString("TelegramFaqUrl", R.string.TelegramFaqUrl)));
+                            getParentActivity().startActivity(pickIntent);
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                    } else if (i == contactsReimportRow) {
+
+                    } else if (i == contactsSortRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("SortBy", R.string.SortBy));
+                        builder.setItems(new CharSequence[]{
+                                LocaleController.getString("Default", R.string.Default),
+                                LocaleController.getString("SortFirstName", R.string.SortFirstName),
+                                LocaleController.getString("SortLastName", R.string.SortLastName)
+                        }, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                editor.putInt("sortContactsBy", which);
+                                editor.commit();
+                                if (listView != null) {
+                                    listView.invalidateViews();
+                                }
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
+                    } else if (i == wifiDownloadRow || i == mobileDownloadRow || i == roamingDownloadRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+
+                        int mask = 0;
+                        if (i == mobileDownloadRow) {
+                            builder.setTitle(LocaleController.getString("WhenUsingMobileData", R.string.WhenUsingMobileData));
+                            mask = MediaController.getInstance().mobileDataDownloadMask;
+                        } else if (i == wifiDownloadRow) {
+                            builder.setTitle(LocaleController.getString("WhenConnectedOnWiFi", R.string.WhenConnectedOnWiFi));
+                            mask = MediaController.getInstance().wifiDownloadMask;
+                        } else if (i == roamingDownloadRow) {
+                            builder.setTitle(LocaleController.getString("WhenRoaming", R.string.WhenRoaming));
+                            mask = MediaController.getInstance().roamingDownloadMask;
+                        }
+                        builder.setMultiChoiceItems(
+                                new CharSequence[]{LocaleController.getString("AttachPhoto", R.string.AttachPhoto), LocaleController.getString("AttachAudio", R.string.AttachAudio), LocaleController.getString("AttachAudio", R.string.AttachVideo), LocaleController.getString("AttachAudio", R.string.AttachDocument)},
+                                new boolean[]{(mask & MediaController.AUTODOWNLOAD_MASK_PHOTO) != 0, (mask & MediaController.AUTODOWNLOAD_MASK_AUDIO) != 0, (mask & MediaController.AUTODOWNLOAD_MASK_VIDEO) != 0, (mask & MediaController.AUTODOWNLOAD_MASK_DOCUMENT) != 0},
+                                new DialogInterface.OnMultiChoiceClickListener() {
+                                    @Override
+                                    public void onClick(DialogInterface dialog, int which, boolean isChecked) {
+                                        int mask = 0;
+                                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                                        SharedPreferences.Editor editor = preferences.edit();
+                                        if (i == mobileDownloadRow) {
+                                            mask = MediaController.getInstance().mobileDataDownloadMask;
+                                        } else if (i == wifiDownloadRow) {
+                                            mask = MediaController.getInstance().wifiDownloadMask;
+                                        } else if (i == roamingDownloadRow) {
+                                            mask = MediaController.getInstance().roamingDownloadMask;
+                                        }
+
+                                        int maskDiff = 0;
+                                        if (which == 0) {
+                                            maskDiff = MediaController.AUTODOWNLOAD_MASK_PHOTO;
+                                        } else if (which == 1) {
+                                            maskDiff = MediaController.AUTODOWNLOAD_MASK_AUDIO;
+                                        } else if (which == 2) {
+                                            maskDiff = MediaController.AUTODOWNLOAD_MASK_VIDEO;
+                                        } else if (which == 3) {
+                                            maskDiff = MediaController.AUTODOWNLOAD_MASK_DOCUMENT;
+                                        }
+
+                                        if (isChecked) {
+                                            mask |= maskDiff;
+                                        } else {
+                                            mask &= ~maskDiff;
+                                        }
+
+                                        if (i == mobileDownloadRow) {
+                                            editor.putInt("mobileDataDownloadMask", mask);
+                                            mask = MediaController.getInstance().mobileDataDownloadMask = mask;
+                                        } else if (i == wifiDownloadRow) {
+                                            editor.putInt("wifiDownloadMask", mask);
+                                            MediaController.getInstance().wifiDownloadMask = mask;
+                                        } else if (i == roamingDownloadRow) {
+                                            editor.putInt("roamingDownloadMask", mask);
+                                            MediaController.getInstance().roamingDownloadMask = mask;
+                                        }
+                                        editor.commit();
+                                        if (listView != null) {
+                                            listView.invalidateViews();
+                                        }
+                                    }
+                                });
+                        builder.setNegativeButton(LocaleController.getString("OK", R.string.OK), null);
+                        showAlertDialog(builder);
+                    } else if (i == usernameRow) {
+                        presentFragment(new SettingsChangeUsernameActivity());
+                    }
+                }
+            });
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    @Override
+    protected void onDialogDismiss() {
+        MediaController.getInstance().checkAutodownloadSettings();
+    }
+
+    @Override
+    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+        if (fileLocation == null) {
+            return null;
+        }
+        TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
+        if (user != null && user.photo != null && user.photo.photo_big != null) {
+            TLRPC.FileLocation photoBig = user.photo.photo_big;
+            if (photoBig.local_id == fileLocation.local_id && photoBig.volume_id == fileLocation.volume_id && photoBig.dc_id == fileLocation.dc_id) {
+                int count = listView.getChildCount();
+                for (int a = 0; a < count; a++) {
+                    View view = listView.getChildAt(a);
+                    BackupImageView avatarImage = (BackupImageView)view.findViewById(R.id.settings_avatar_image);
+                    if (avatarImage != null) {
+                        int coords[] = new int[2];
+                        avatarImage.getLocationInWindow(coords);
+                        PhotoViewer.PlaceProviderObject object = new PhotoViewer.PlaceProviderObject();
+                        object.viewX = coords[0];
+                        object.viewY = coords[1] - AndroidUtilities.statusBarHeight;
+                        object.parentView = listView;
+                        object.imageReceiver = avatarImage.imageReceiver;
+                        object.user_id = UserConfig.getClientUserId();
+                        object.thumb = object.imageReceiver.getBitmap();
+                        object.size = -1;
+                        return object;
+                    }
+                }
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) { }
+
+    @Override
+    public void willHidePhotoViewer() { }
+
+    @Override
+    public boolean isPhotoChecked(int index) { return false; }
+
+    @Override
+    public void setPhotoChecked(int index) { }
+
+    @Override
+    public void cancelButtonPressed() { }
+
+    @Override
+    public void sendButtonPressed(int index) { }
+
+    @Override
+    public int getSelectedCount() { return 0; }
+
+    public void performAskAQuestion() {
+        final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        int uid = preferences.getInt("support_id", 0);
+        TLRPC.User supportUser = null;
+        if (uid != 0) {
+            supportUser = MessagesController.getInstance().getUser(uid);
+            if (supportUser == null) {
+                String userString = preferences.getString("support_user", null);
+                if (userString != null) {
+                    try {
+                        byte[] datacentersBytes = Base64.decode(userString, Base64.DEFAULT);
+                        if (datacentersBytes != null) {
+                            SerializedData data = new SerializedData(datacentersBytes);
+                            supportUser = (TLRPC.User)TLClassStore.Instance().TLdeserialize(data, data.readInt32());
+                            if (supportUser != null && supportUser.id == 333000) {
+                                supportUser = null;
+                            }
+                        }
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                        supportUser = null;
+                    }
+                }
+            }
+        }
+        if (supportUser == null) {
+            final ProgressDialog progressDialog = new ProgressDialog(getParentActivity());
+            progressDialog.setMessage(LocaleController.getString("Loading", R.string.Loading));
+            progressDialog.setCanceledOnTouchOutside(false);
+            progressDialog.setCancelable(false);
+            progressDialog.show();
+            TLRPC.TL_help_getSupport req = new TLRPC.TL_help_getSupport();
+            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                @Override
+                public void run(TLObject response, TLRPC.TL_error error) {
+                    if (error == null) {
+
+                        final TLRPC.TL_help_support res = (TLRPC.TL_help_support)response;
+                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                SharedPreferences.Editor editor = preferences.edit();
+                                editor.putInt("support_id", res.user.id);
+                                SerializedData data = new SerializedData();
+                                res.user.serializeToStream(data);
+                                editor.putString("support_user", Base64.encodeToString(data.toByteArray(), Base64.DEFAULT));
+                                editor.commit();
+                                try {
+                                    progressDialog.dismiss();
+                                } catch (Exception e) {
+                                    FileLog.e("tmessages", e);
+                                }
+                                ArrayList<TLRPC.User> users = new ArrayList<TLRPC.User>();
+                                users.add(res.user);
+                                MessagesStorage.getInstance().putUsersAndChats(users, null, true, true);
+                                MessagesController.getInstance().putUser(res.user, false);
+                                Bundle args = new Bundle();
+                                args.putInt("user_id", res.user.id);
+                                presentFragment(new ChatActivity(args));
+                            }
+                        });
+                    } else {
+                        AndroidUtilities.RunOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                try {
+                                    progressDialog.dismiss();
+                                } catch (Exception e) {
+                                    FileLog.e("tmessages", e);
+                                }
+                            }
+                        });
+                    }
+                }
+            });
+        } else {
+            MessagesController.getInstance().putUser(supportUser, true);
+            Bundle args = new Bundle();
+            args.putInt("user_id", supportUser.id);
+            presentFragment(new ChatActivity(args));
+        }
+    }
+
+    @Override
+    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
+        avatarUpdater.onActivityResult(requestCode, resultCode, data);
+    }
+
+    @Override
+    public void saveSelfArgs(Bundle args) {
+        if (avatarUpdater != null && avatarUpdater.currentPicturePath != null) {
+            args.putString("path", avatarUpdater.currentPicturePath);
+        }
+    }
+
+    @Override
+    public void restoreSelfArgs(Bundle args) {
+        if (avatarUpdater != null) {
+            avatarUpdater.currentPicturePath = args.getString("path");
+        }
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.updateInterfaces) {
+            int mask = (Integer)args[0];
+            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
+                if (listView != null) {
+                    listView.invalidateViews();
+                }
+            }
+        }
+    }
+
+    private void sendLogs() {
+        try {
+            ArrayList<Uri> uris = new ArrayList<Uri>();
+            File sdCard = ApplicationLoader.applicationContext.getExternalFilesDir(null);
+            File dir = new File (sdCard.getAbsolutePath() + "/logs");
+            File[] files = dir.listFiles();
+            for (File file : files) {
+                uris.add(Uri.fromFile(file));
+            }
+
+            if (uris.isEmpty()) {
+                return;
+            }
+            Intent i = new Intent(Intent.ACTION_SEND_MULTIPLE);
+            i.setType("message/rfc822") ;
+            i.putExtra(Intent.EXTRA_EMAIL, new String[]{BuildVars.SEND_LOGS_EMAIL});
+            i.putExtra(Intent.EXTRA_SUBJECT, "last logs");
+            i.putParcelableArrayListExtra(Intent.EXTRA_STREAM, uris);
+            getParentActivity().startActivity(Intent.createChooser(i, "Select email application."));
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return i == textSizeRow || i == enableAnimationsRow || i == blockedRow || i == notificationRow || i == backgroundRow || i == balloonRow ||
+            i == askQuestionRow || i == sendLogsRow || i == sendByEnterRow || i == terminateSessionsRow || i == wifiDownloadRow || i == themeRow ||
+                    i == mobileDownloadRow || i == clearLogsRow || i == roamingDownloadRow || i == languageRow || i == usernameRow ||
+                    i == switchBackendButtonRow || i == telegramFaqRow || i == contactsSortRow || i == contactsReimportRow || i == saveToGalleryRow;
+        }
+
+        @Override
+        public int getCount() {
+            return rowCount;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            if (type == 0) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_name_layout, viewGroup, false);
+
+                    ImageButton button = (ImageButton)view.findViewById(R.id.settings_edit_name);
+                    button.setOnClickListener(new View.OnClickListener() {
+                        @Override
+                        public void onClick(View view) {
+                            presentFragment(new SettingsChangeNameActivity());
+                        }
+                    });
+
+                    final ImageButton button2 = (ImageButton)view.findViewById(R.id.settings_change_avatar_button);
+                    button2.setOnClickListener(new View.OnClickListener() {
+                        @Override
+                        public void onClick(View view) {
+                            if (getParentActivity() == null) {
+                                return;
+                            }
+                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+
+                            CharSequence[] items;
+
+                            TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
+                            if (user == null) {
+                                user = UserConfig.getCurrentUser();
+                            }
+                            if (user == null) {
+                                return;
+                            }
+                            boolean fullMenu = false;
+                            if (user.photo != null && user.photo.photo_big != null && !(user.photo instanceof TLRPC.TL_userProfilePhotoEmpty)) {
+                                items = new CharSequence[] {LocaleController.getString("OpenPhoto", R.string.OpenPhoto), LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley), LocaleController.getString("DeletePhoto", R.string.DeletePhoto)};
+                                fullMenu = true;
+                            } else {
+                                items = new CharSequence[] {LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley)};
+                            }
+
+                            final boolean full = fullMenu;
+                            builder.setItems(items, new DialogInterface.OnClickListener() {
+                                @Override
+                                public void onClick(DialogInterface dialogInterface, int i) {
+                                    if (i == 0 && full) {
+                                        TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
+                                        if (user != null && user.photo != null && user.photo.photo_big != null) {
+                                            PhotoViewer.getInstance().setParentActivity(getParentActivity());
+                                            PhotoViewer.getInstance().openPhoto(user.photo.photo_big, SettingsActivity.this);
+                                        }
+                                    } else if (i == 0 && !full || i == 1 && full) {
+                                        avatarUpdater.openCamera();
+                                    } else if (i == 1 && !full || i == 2 && full) {
+                                        avatarUpdater.openGallery();
+                                    } else if (i == 3) {
+                                        MessagesController.getInstance().deleteUserPhoto(null);
+                                    }
+                                }
+                            });
+                            showAlertDialog(builder);
+                        }
+                    });
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_online);
+                textView.setText(LocaleController.getString("Online", R.string.Online));
+
+                textView = (TextView)view.findViewById(R.id.settings_name);
+                Typeface typeface = AndroidUtilities.getTypeface("fonts/rmedium.ttf");
+                textView.setTypeface(typeface);
+                TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
+                if (user == null) {
+                    user = UserConfig.getCurrentUser();
+                }
+                if (user != null) {
+                    textView.setText(ContactsController.formatName(user.first_name, user.last_name));
+                    BackupImageView avatarImage = (BackupImageView)view.findViewById(R.id.settings_avatar_image);
+                    avatarImage.processDetach = false;
+                    TLRPC.FileLocation photo = null;
+                    TLRPC.FileLocation photoBig = null;
+                    if (user.photo != null) {
+                        photo = user.photo.photo_small;
+                        photoBig = user.photo.photo_big;
+                    }
+                    avatarImage.setImage(photo, "50_50", AndroidUtilities.getUserAvatarForId(user.id));
+                    avatarImage.imageReceiver.setVisible(!PhotoViewer.getInstance().isShowingImage(photoBig), false);
+                }
+                return view;
+            } else if (type == 1) {
+                if (view == null) {
+                    view = new SettingsSectionLayout(mContext);
+                }
+                if (i == numberSectionRow) {
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("Info", R.string.Info));
+                } else if (i == settingsSectionRow) {
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("SETTINGS", R.string.SETTINGS));
+                } else if (i == supportSectionRow) {
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("Support", R.string.Support));
+                } else if (i == messagesSectionRow) {
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("MessagesSettings", R.string.MessagesSettings));
+                } else if (i == mediaDownloadSection) {
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("AutomaticMediaDownload", R.string.AutomaticMediaDownload));
+                } else if (i == contactsSectionRow) {
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("Contacts", R.string.Contacts).toUpperCase());
+                }
+            } else if (type == 2) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_row_button_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                View divider = view.findViewById(R.id.settings_row_divider);
+                if (i == notificationRow) {
+                    textView.setText(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds));
+                    divider.setVisibility(View.VISIBLE);
+                } else if (i == blockedRow) {
+                    textView.setText(LocaleController.getString("BlockedUsers", R.string.BlockedUsers));
+                    divider.setVisibility(backgroundRow != 0 ? View.VISIBLE : View.INVISIBLE);
+                } else if (i == backgroundRow) {
+                    textView.setText(LocaleController.getString("ChatBackground", R.string.ChatBackground));
+                    divider.setVisibility(View.VISIBLE);
+                    textView.setTypeface(Typeface.DEFAULT_BOLD);
+                }else if (i == themeRow) {
+                    textView.setText("Theme");
+                    textView.setTypeface(Typeface.DEFAULT_BOLD);
+                    divider.setVisibility(View.VISIBLE);
+                }
+                else if (i == balloonRow) {
+                    textView.setText("Chat Balloon");
+                    textView.setTypeface(Typeface.DEFAULT_BOLD);
+                    divider.setVisibility(View.VISIBLE);
+                }
+                else if (i == sendLogsRow) {
+                    textView.setText("Send Logs");
+                    divider.setVisibility(View.VISIBLE);
+                } else if (i == clearLogsRow) {
+                    textView.setText("Clear Logs");
+                    divider.setVisibility(View.VISIBLE);
+                } else if (i == askQuestionRow) {
+                    textView.setText(LocaleController.getString("AskAQuestion", R.string.AskAQuestion));
+                    divider.setVisibility(View.INVISIBLE);
+                } else if (i == terminateSessionsRow) {
+                    textView.setText(LocaleController.getString("TerminateAllSessions", R.string.TerminateAllSessions));
+                    divider.setVisibility(View.INVISIBLE);
+                } else if (i == switchBackendButtonRow) {
+                    textView.setText("Switch Backend");
+                    divider.setVisibility(View.VISIBLE);
+                } else if (i == telegramFaqRow) {
+                    textView.setText(LocaleController.getString("TelegramFAQ", R.string.TelegramFaq));
+                    divider.setVisibility(View.VISIBLE);
+                } else if (i == contactsReimportRow) {
+                    textView.setText(LocaleController.getString("ImportContacts", R.string.ImportContacts));
+                    divider.setVisibility(View.INVISIBLE);
+                }
+            } else if (type == 3) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_row_check_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                View divider = view.findViewById(R.id.settings_row_divider);
+                ImageView checkButton = (ImageView)view.findViewById(R.id.settings_row_check_button);
+                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                if (i == enableAnimationsRow) {
+                    textView.setText(LocaleController.getString("EnableAnimations", R.string.EnableAnimations));
+                    divider.setVisibility(View.VISIBLE);
+                    boolean enabled = preferences.getBoolean("view_animations", true);
+                    if (enabled) {
+                        checkButton.setImageResource(R.drawable.btn_check_on);
+                    } else {
+                        checkButton.setImageResource(R.drawable.btn_check_off);
+                    }
+                } else if (i == sendByEnterRow) {
+                    textView.setText(LocaleController.getString("SendByEnter", R.string.SendByEnter));
+                    divider.setVisibility(View.INVISIBLE);
+                    boolean enabled = preferences.getBoolean("send_by_enter", false);
+                    if (enabled) {
+                        checkButton.setImageResource(R.drawable.btn_check_on);
+                    } else {
+                        checkButton.setImageResource(R.drawable.btn_check_off);
+                    }
+                } else if (i == saveToGalleryRow) {
+                    textView.setText(LocaleController.getString("SaveToGallerySettings", R.string.SaveToGallerySettings));
+                    divider.setVisibility(View.INVISIBLE);
+                    if (MediaController.getInstance().canSaveToGallery()) {
+                        checkButton.setImageResource(R.drawable.btn_check_on);
+                    } else {
+                        checkButton.setImageResource(R.drawable.btn_check_off);
+                    }
+                }
+            } else if (type == 4) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_logout_button, viewGroup, false);
+                    TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                    textView.setText(LocaleController.getString("LogOut", R.string.LogOut));
+                    textView.setOnClickListener(new View.OnClickListener() {
+                        @Override
+                        public void onClick(View view) {
+                            if (getParentActivity() == null) {
+                                return;
+                            }
+                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                            builder.setMessage(LocaleController.getString("AreYouSureLogout", R.string.AreYouSureLogout));
+                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                                @Override
+                                public void onClick(DialogInterface dialogInterface, int i) {
+                                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                    SharedPreferences.Editor editor = preferences.edit();
+                                    editor.clear().commit();
+                                    NotificationCenter.getInstance().postNotificationName(NotificationCenter.appDidLogout);
+                                    MessagesController.getInstance().unregistedPush();
+                                    MessagesController.getInstance().logOut();
+                                    UserConfig.clearConfig();
+                                    MessagesStorage.getInstance().cleanUp(false);
+                                    MessagesController.getInstance().cleanUp();
+                                    ContactsController.getInstance().deleteAllAppAccounts();
+                                }
+                            });
+                            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                            showAlertDialog(builder);
+                        }
+                    });
+                }
+            } else if (type == 5) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.user_profile_leftright_row_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
+                View divider = view.findViewById(R.id.settings_row_divider);
+                if (i == numberRow) {
+                    TLRPC.User user = UserConfig.getCurrentUser();
+                    textView.setText(LocaleController.getString("Phone", R.string.Phone));
+                    if (user != null && user.phone != null && user.phone.length() != 0) {
+                        detailTextView.setText(PhoneFormat.getInstance().format("+" + user.phone));
+                    } else {
+                        detailTextView.setText(LocaleController.getString("NumberUnknown", R.string.NumberUnknown));
+                    }
+                    divider.setVisibility(View.VISIBLE);
+                } else if (i == textSizeRow) {
+                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                    int size = preferences.getInt("fons_size", AndroidUtilities.isTablet() ? 18 : 16);
+                    detailTextView.setText(String.format("%d", size));
+                    textView.setText(LocaleController.getString("TextSize", R.string.TextSize));
+                    divider.setVisibility(View.VISIBLE);
+                } else if (i == languageRow) {
+                    detailTextView.setText(LocaleController.getCurrentLanguageName());
+                    textView.setText(LocaleController.getString("Language", R.string.Language));
+                    divider.setVisibility(View.VISIBLE);
+                } else if (i == contactsSortRow) {
+                    textView.setText(LocaleController.getString("SortBy", R.string.SortBy));
+                    divider.setVisibility(View.VISIBLE);
+                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                    int sort = preferences.getInt("sortContactsBy", 0);
+                    if (sort == 0) {
+                        detailTextView.setText(LocaleController.getString("Default", R.string.Default));
+                    } else if (sort == 1) {
+                        detailTextView.setText(LocaleController.getString("FirstName", R.string.SortFirstName));
+                    } else if (sort == 2) {
+                        detailTextView.setText(LocaleController.getString("LastName", R.string.SortLastName));
+                    }
+                } else if (i == usernameRow) {
+                    TLRPC.User user = UserConfig.getCurrentUser();
+                    textView.setText(LocaleController.getString("Username", R.string.Username));
+                    if (user != null && user.username != null && user.username.length() != 0) {
+                        detailTextView.setText("@" + user.username);
+                    } else {
+                        detailTextView.setText(LocaleController.getString("UsernameEmpty", R.string.UsernameEmpty));
+                    }
+                    divider.setVisibility(View.INVISIBLE);
+                }
+            } else if (type == 6) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_row_version, viewGroup, false);
+                    TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                    try {
+                        PackageInfo pInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(ApplicationLoader.applicationContext.getPackageName(), 0);
+                        textView.setText(String.format(Locale.US, "Telegram for Android v%s (%d)", pInfo.versionName, pInfo.versionCode));
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                }
+            } else if (type == 7) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_row_detail_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                TextView textViewDetail = (TextView)view.findViewById(R.id.settings_row_text_detail);
+                View divider = view.findViewById(R.id.settings_row_divider);
+
+                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                int mask = 0;
+                if (i == mobileDownloadRow) {
+                    textView.setText(LocaleController.getString("WhenUsingMobileData", R.string.WhenUsingMobileData));
+                    divider.setVisibility(View.VISIBLE);
+                    mask = MediaController.getInstance().mobileDataDownloadMask;
+                } else if (i == wifiDownloadRow) {
+                    textView.setText(LocaleController.getString("WhenConnectedOnWiFi", R.string.WhenConnectedOnWiFi));
+                    divider.setVisibility(View.VISIBLE);
+                    mask = MediaController.getInstance().wifiDownloadMask;
+                } else if (i == roamingDownloadRow) {
+                    textView.setText(LocaleController.getString("WhenRoaming", R.string.WhenRoaming));
+                    divider.setVisibility(View.VISIBLE);
+                    mask = MediaController.getInstance().roamingDownloadMask;
+                }
+                String text = "";
+                if ((mask & MediaController.AUTODOWNLOAD_MASK_PHOTO) != 0) {
+                    text += LocaleController.getString("AttachPhoto", R.string.AttachPhoto);
+                }
+                if ((mask & MediaController.AUTODOWNLOAD_MASK_AUDIO) != 0) {
+                    if (text.length() != 0) {
+                        text += ", ";
+                    }
+                    text += LocaleController.getString("AttachAudio", R.string.AttachAudio);
+                }
+                if ((mask & MediaController.AUTODOWNLOAD_MASK_VIDEO) != 0) {
+                    if (text.length() != 0) {
+                        text += ", ";
+                    }
+                    text += LocaleController.getString("AttachVideo", R.string.AttachVideo);
+                }
+                if ((mask & MediaController.AUTODOWNLOAD_MASK_DOCUMENT) != 0) {
+                    if (text.length() != 0) {
+                        text += ", ";
+                    }
+                    text += LocaleController.getString("AttachDocument", R.string.AttachDocument);
+                }
+                if (text.length() == 0) {
+                    text = LocaleController.getString("NoMediaAutoDownload", R.string.NoMediaAutoDownload);
+                }
+                textViewDetail.setText(text);
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            if (i == profileRow) {
+                return 0;
+            } else if (i == numberSectionRow || i == settingsSectionRow || i == supportSectionRow || i == messagesSectionRow || i == mediaDownloadSection || i == contactsSectionRow) {
+                return 1;
+            } else if (i == textSizeRow || i == languageRow || i == contactsSortRow || i == numberRow || i == usernameRow) {
+                return 5;
+            } else if (i == enableAnimationsRow || i == sendByEnterRow || i == saveToGalleryRow) {
+                return 3;
+            } else if (i == notificationRow || i == blockedRow || i == backgroundRow || i == balloonRow || i == themeRow || i == askQuestionRow || i == sendLogsRow
+                    || i == terminateSessionsRow || i == clearLogsRow || i == switchBackendButtonRow || i == telegramFaqRow || i == contactsReimportRow) {
+                return 2;
+            } else if (i == logoutRow) {
+                return 4;
+            } else if (i == versionRow) {
+                return 6;
+            } else if (i == wifiDownloadRow || i == mobileDownloadRow || i == roamingDownloadRow) {
+                return 7;
+            } else {
+                return 2;
+            }
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 8;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/SettingsBalloonChatActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/SettingsBalloonChatActivity.java
new file mode 100644
index 000000000..7fb540d0b
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/SettingsBalloonChatActivity.java
@@ -0,0 +1,378 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.content.res.Configuration;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.Button;
+import android.widget.ImageView;
+import android.widget.ListView;
+import android.widget.RadioButton;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.LocaleController;
+import org.tomato.android.NotificationCenter;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.ui.Adapters.BaseFragmentAdapter;
+import org.tomato.ui.Cells.ChatBaseCell;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+
+public class SettingsBalloonChatActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+    private ListView listView;
+    private ListAdapter listAdapter;
+    //private ImageView backgroundImage;
+    //private ProgressBar progressBar;
+    private int selectedBackground;
+    private int selectedColor;
+    private ArrayList<TLRPC.WallPaper> wallPapers = new ArrayList<TLRPC.WallPaper>();
+    private HashMap<Integer, TLRPC.WallPaper> wallpappersByIds = new HashMap<Integer, TLRPC.WallPaper>();
+    private View doneButton;
+    private String loadingFile = null;
+    private File loadingFileObject = null;
+    private TLRPC.PhotoSize loadingSize = null;
+    private String currentPicturePath;
+    private int selectedBaloonType;
+    private static int temporarySelectedType;
+
+    private static List<BallonChatBgData> chatBgDatas;
+    private static int [] hikePreviews = {R.drawable.hike1_ic_bubble_celebration_space, R.drawable.hike2_ic_bubble_blue,
+                                          R.drawable.hike3_ic_bubble_music, R.drawable.hike4_ic_bubble_forest_study_sporty,
+                                          R.drawable.hike5_ic_bubble_mr_right_exam, R.drawable.hike6_ic_bubble_love_floral_bikers_kisses_valentines_girly,
+                                          R.drawable.hike7_ic_bubble_night, R.drawable.hike8_ic_bubble_rains_beach_2,
+                                          R.drawable.hike9_ic_bubble_owl, R.drawable.hike10_ic_bubble_smiley_cheers_pets_sporty_cupcakes
+                                                        };
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        selectedBaloonType = preferences.getInt(ApplicationLoader.BALLON_TYPE, AndroidUtilities.TELEGRAM_BUBBLE_STYLE);
+        temporarySelectedType = selectedBaloonType;
+        if (chatBgDatas == null) {
+            chatBgDatas = new ArrayList<BallonChatBgData>();
+            //add default
+            BallonChatBgData defaultData = new BallonChatBgData(AndroidUtilities.TELEGRAM_BUBBLE_STYLE, R.drawable.msg_out,
+                            selectedBaloonType == AndroidUtilities.TELEGRAM_BUBBLE_STYLE);
+            chatBgDatas.add(defaultData);
+
+            //add line style
+            BallonChatBgData lineData = new BallonChatBgData(AndroidUtilities.LINE_BUBBLE_STYLE, R.drawable.line_v2_img_chats_bg_02,
+                    selectedBaloonType == AndroidUtilities.LINE_BUBBLE_STYLE);
+            chatBgDatas.add(lineData);
+
+            //add viber style
+            BallonChatBgData viberData = new BallonChatBgData(AndroidUtilities.VIBER_BUBBLE_STYLE, R.drawable.viber_text_outgoing_normal,
+                    selectedBaloonType == AndroidUtilities.VIBER_BUBBLE_STYLE);
+            chatBgDatas.add(viberData);
+
+            //add ưhatsapp style
+            BallonChatBgData whatsappData = new BallonChatBgData(AndroidUtilities.WHATSAPP_BUBBLE_STYLE, R.drawable.balloon_outgoing_normal,
+                    selectedBaloonType == AndroidUtilities.WHATSAPP_BUBBLE_STYLE);
+            chatBgDatas.add(whatsappData);
+
+            //add ưhatsapp style
+            BallonChatBgData zaloData = new BallonChatBgData(AndroidUtilities.ZALO_BUBBLE_STYLE, R.drawable.zalo_out_text_normal,
+                    selectedBaloonType == AndroidUtilities.ZALO_BUBBLE_STYLE);
+            chatBgDatas.add(zaloData);
+
+            //add wechat style
+            BallonChatBgData wechatData = new BallonChatBgData(AndroidUtilities.WECHAT_BUBBLE_STYLE, R.drawable.wechat_chat_to_bg_normal,
+                    selectedBaloonType == AndroidUtilities.WECHAT_BUBBLE_STYLE);
+            chatBgDatas.add(wechatData);
+
+            //add hangouts style
+            BallonChatBgData hangoutsData = new BallonChatBgData(AndroidUtilities.HANGOUT_BUBBLE_STYLE, R.drawable.hangouts_msg_bubble_left,
+                    selectedBaloonType == AndroidUtilities.HANGOUT_BUBBLE_STYLE);
+            chatBgDatas.add(hangoutsData);
+
+            // add hike style
+            for (int i = 1; i <= 10; i ++){
+                BallonChatBgData hikeData = new BallonChatBgData(30 + i, hikePreviews[i -1 ],
+                        selectedBaloonType == (30 + i));
+                chatBgDatas.add(hikeData);
+
+            }
+
+            // add
+
+        }
+
+        /*NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileLoadProgressChanged);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.wallpapersDidLoaded);*/
+
+
+        /*selectedBackground = preferences.getInt("selectedBackground", 1000001);
+        selectedColor = preferences.getInt("selectedColor", 0);
+        MessagesStorage.getInstance().getWallpapers();
+        File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper-temp.jpg");
+        toFile.delete();*/
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        /*NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileDidFailedLoad);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileLoadProgressChanged);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.wallpapersDidLoaded);*/
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setCustomView(R.layout.settings_do_action_layout);
+            Button cancelButton = (Button)actionBarLayer.findViewById(R.id.cancel_button);
+            cancelButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    finishFragment();
+                }
+            });
+            doneButton = actionBarLayer.findViewById(R.id.done_button);
+            doneButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+
+
+
+                if (temporarySelectedType != selectedBaloonType) {
+                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                    SharedPreferences.Editor editor = preferences.edit();
+                    editor.putInt(ApplicationLoader.BALLON_TYPE, temporarySelectedType);
+                    ApplicationLoader.balloonType = temporarySelectedType;
+
+
+
+
+
+                    //editor.putInt("selectedColor", selectedColor);
+                    editor.commit();
+                    //ApplicationLoader.cachedWallpaper = null;
+                    ChatBaseCell.backgroundDrawableIn = null;
+                    new ChatBaseCell(ApplicationLoader.applicationContext);
+                }
+                    finishFragment();
+                }
+            });
+
+            cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
+            TextView textView = (TextView)doneButton.findViewById(R.id.done_button_text);
+            textView.setText(LocaleController.getString("Set", R.string.Set).toUpperCase());
+
+            fragmentView = inflater.inflate(R.layout.settings_baloon_chat_layout, container, false);
+            listAdapter = new ListAdapter(getParentActivity());
+
+            //progressBar = (ProgressBar)fragmentView.findViewById(R.id.action_progress);
+            //backgroundImage = (ImageView)fragmentView.findViewById(R.id.background_image);
+            listView = (ListView)fragmentView.findViewById(R.id.ballon_listview);
+            listView.setAdapter(listAdapter);
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    temporarySelectedType = SettingsBalloonChatActivity.chatBgDatas.get(i).collectionType;
+                    listAdapter.notifyDataSetChanged();
+                }
+            });
+
+            processSelectedBackground();
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+
+    @Override
+    public void saveSelfArgs(Bundle args) {
+        if (currentPicturePath != null) {
+            args.putString("path", currentPicturePath);
+        }
+    }
+
+    @Override
+    public void restoreSelfArgs(Bundle args) {
+        currentPicturePath = args.getString("path");
+    }
+
+    private void processSelectedBackground() {
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public void didReceivedNotification(int id, final Object... args) {
+    }
+
+    @Override
+    public void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        fixLayout();
+    }
+
+    private void loadWallpapers() {
+    }
+
+    private void fixLayout() {
+       /* ViewTreeObserver obs = fragmentView.getViewTreeObserver();
+        obs.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+            @Override
+            public boolean onPreDraw() {
+                fragmentView.getViewTreeObserver().removeOnPreDrawListener(this);
+                if (listAdapter != null) {
+                    listAdapter.notifyDataSetChanged();
+                }
+                if (listView != null) {
+                    listView.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            listView.scrollTo(0);
+                        }
+                    });
+                }
+                return false;
+            }
+        });*/
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+        fixLayout();
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+        private LayoutInflater inflater;
+        public ListAdapter(Context context) {
+            mContext = context;
+            inflater = LayoutInflater.from(context);
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return true;
+        }
+
+        @Override
+        public int getCount() {
+            return SettingsBalloonChatActivity.chatBgDatas.size();
+        }
+
+        @Override
+        public BallonChatBgData getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return true;
+        }
+
+        @Override
+        public View getView(int i, View convertedView, ViewGroup viewGroup) {
+            View view = convertedView;
+            ViewHolder holder = null;
+            if (view == null){
+                view = inflater.inflate(R.layout.settings_baloon_item_layout, null);
+                holder = new ViewHolder();
+                holder.balloonPreviewImg = (ImageView)view.findViewById(R.id.ballon_previewImg);
+                holder.checkButton = (RadioButton) view.findViewById(R.id.ballon_item_check_button);
+                holder.rowWrapperLayout = (RelativeLayout) view.findViewById(R.id.ballon_item_wrapper);
+                view.setTag(holder);
+            }
+            else
+            holder = (ViewHolder)view.getTag();
+
+            BallonChatBgData data = SettingsBalloonChatActivity.chatBgDatas.get(i);
+            holder.balloonPreviewImg.setImageDrawable(mContext.getResources().getDrawable(data.previewImageId));
+            holder.checkButton.setChecked(data.collectionType == temporarySelectedType);
+            if (data.collectionType == temporarySelectedType){
+                holder.rowWrapperLayout.setSelected(true);
+
+            }
+            else{
+                holder.rowWrapperLayout.setSelected(false);
+            }
+            return view;
+        }
+
+        /*@Override
+        public int getItemViewType(int i) {
+            if (i == 0) {
+                return 0;
+            }
+            TLRPC.WallPaper wallPaper = wallPapers.get(i - 1);
+            if (wallPaper instanceof TLRPC.TL_wallPaperSolid) {
+                return 0;
+            }
+            return 1;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 2;
+        }*/
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+
+        private class ViewHolder{
+            public RelativeLayout rowWrapperLayout;
+            public ImageView balloonPreviewImg;
+            public RadioButton checkButton;
+        }
+    }
+
+    public static class BallonChatBgData {
+        public int collectionType;
+        public int previewImageId;
+        public boolean isCurrentSelected;
+
+        public BallonChatBgData(int collectionType, int previewImageId, boolean isCurrentSelected) {
+            this.collectionType = collectionType;
+            this.previewImageId = previewImageId;
+            this.isCurrentSelected = isCurrentSelected;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/SettingsBlockedUsersActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/SettingsBlockedUsersActivity.java
new file mode 100644
index 000000000..f4df9c8fe
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/SettingsBlockedUsersActivity.java
@@ -0,0 +1,282 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import org.tomato.PhoneFormat.PhoneFormat;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MessagesController;
+import org.tomato.android.NotificationCenter;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.ui.Adapters.BaseFragmentAdapter;
+import org.tomato.ui.Cells.ChatOrUserCell;
+import org.tomato.ui.Views.ActionBar.ActionBarLayer;
+import org.tomato.ui.Views.ActionBar.ActionBarMenu;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+
+public class SettingsBlockedUsersActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, ContactsActivity.ContactsActivityDelegate {
+    private ListView listView;
+    private ListAdapter listViewAdapter;
+    private View progressView;
+    private TextView emptyView;
+    private int selectedUserId;
+
+    private final static int block_user = 1;
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.blockedUsersDidLoaded);
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.blockedUsersDidLoaded);
+        MessagesController.getInstance().getBlockedUsers(false);
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
+            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
+            actionBarLayer.setTitle(LocaleController.getString("BlockedUsers", R.string.BlockedUsers));
+            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    } else if (id == block_user) {
+                        Bundle args = new Bundle();
+                        args.putBoolean("onlyUsers", true);
+                        args.putBoolean("destroyAfterSelect", true);
+                        args.putBoolean("usersAsSections", true);
+                        args.putBoolean("returnAsResult", true);
+                        ContactsActivity fragment = new ContactsActivity(args);
+                        fragment.setDelegate(SettingsBlockedUsersActivity.this);
+                        presentFragment(fragment);
+                    }
+                }
+            });
+
+            ActionBarMenu menu = actionBarLayer.createMenu();
+            menu.addItem(block_user, R.drawable.plus);
+
+            fragmentView = inflater.inflate(R.layout.settings_blocked_users_layout, container, false);
+            listViewAdapter = new ListAdapter(getParentActivity());
+            listView = (ListView)fragmentView.findViewById(R.id.listView);
+            progressView = fragmentView.findViewById(R.id.progressLayout);
+            emptyView = (TextView)fragmentView.findViewById(R.id.searchEmptyView);
+            emptyView.setOnTouchListener(new View.OnTouchListener() {
+                @Override
+                public boolean onTouch(View v, MotionEvent event) {
+                    return true;
+                }
+            });
+            emptyView.setText(LocaleController.getString("NoBlocked", R.string.NoBlocked));
+            if (MessagesController.getInstance().loadingBlockedUsers) {
+                progressView.setVisibility(View.VISIBLE);
+                emptyView.setVisibility(View.GONE);
+                listView.setEmptyView(null);
+            } else {
+                progressView.setVisibility(View.GONE);
+                listView.setEmptyView(emptyView);
+            }
+            listView.setAdapter(listViewAdapter);
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    if (i < MessagesController.getInstance().blockedUsers.size()) {
+                        Bundle args = new Bundle();
+                        args.putInt("user_id", MessagesController.getInstance().blockedUsers.get(i));
+                        presentFragment(new UserProfileActivity(args));
+                    }
+                }
+            });
+
+            listView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
+                @Override
+                public boolean onItemLongClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    if (i < 0 || i >= MessagesController.getInstance().blockedUsers.size() || getParentActivity() == null) {
+                        return true;
+                    }
+                    selectedUserId = MessagesController.getInstance().blockedUsers.get(i);
+
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+
+                    CharSequence[] items = new CharSequence[] {LocaleController.getString("Unblock", R.string.Unblock)};
+
+                    builder.setItems(items, new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialogInterface, int i) {
+                            if (i == 0) {
+                                MessagesController.getInstance().unblockUser(selectedUserId);
+                            }
+                        }
+                    });
+                    showAlertDialog(builder);
+
+                    return true;
+                }
+            });
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.updateInterfaces) {
+            int mask = (Integer)args[0];
+            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
+                updateVisibleRows(mask);
+            }
+        } else if (id == NotificationCenter.blockedUsersDidLoaded) {
+            if (progressView != null) {
+                progressView.setVisibility(View.GONE);
+            }
+            if (listView != null && listView.getEmptyView() == null) {
+                listView.setEmptyView(emptyView);
+            }
+            if (listViewAdapter != null) {
+                listViewAdapter.notifyDataSetChanged();
+            }
+        }
+    }
+
+    private void updateVisibleRows(int mask) {
+        if (listView == null) {
+            return;
+        }
+        int count = listView.getChildCount();
+        for (int a = 0; a < count; a++) {
+            View child = listView.getChildAt(a);
+            if (child instanceof ChatOrUserCell) {
+                ((ChatOrUserCell) child).update(mask);
+            }
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listViewAdapter != null) {
+            listViewAdapter.notifyDataSetChanged();
+        }
+    }
+
+    @Override
+    public void didSelectContact(final TLRPC.User user, String param) {
+        if (user == null) {
+            return;
+        }
+        MessagesController.getInstance().blockUser(user.id);
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return i != MessagesController.getInstance().blockedUsers.size();
+        }
+
+        @Override
+        public int getCount() {
+            if (MessagesController.getInstance().blockedUsers.isEmpty()) {
+                return 0;
+            }
+            return MessagesController.getInstance().blockedUsers.size() + 1;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            if (type == 0) {
+                if (view == null) {
+                    view = new ChatOrUserCell(mContext);
+                    ((ChatOrUserCell)view).usePadding = false;
+                    ((ChatOrUserCell)view).useSeparator = true;
+                }
+                TLRPC.User user = MessagesController.getInstance().getUser(MessagesController.getInstance().blockedUsers.get(i));
+                ((ChatOrUserCell)view).setData(user, null, null, null, user.phone != null && user.phone.length() != 0 ? PhoneFormat.getInstance().format("+" + user.phone) : LocaleController.getString("NumberUnknown", R.string.NumberUnknown));
+            } else if (type == 1) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_unblock_info_row_layout, viewGroup, false);
+                    TextView textView = (TextView)view.findViewById(R.id.info_text_view);
+                    textView.setText(LocaleController.getString("UnblockText", R.string.UnblockText));
+                }
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            if(i == MessagesController.getInstance().blockedUsers.size()) {
+                return 1;
+            }
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 2;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return MessagesController.getInstance().blockedUsers.isEmpty();
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/SettingsChangeNameActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/SettingsChangeNameActivity.java
new file mode 100644
index 000000000..da759dbcf
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/SettingsChangeNameActivity.java
@@ -0,0 +1,204 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.app.Activity;
+import android.content.SharedPreferences;
+import android.text.InputType;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.KeyEvent;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.inputmethod.EditorInfo;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MessagesController;
+import org.tomato.android.NotificationCenter;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.R;
+import org.tomato.messenger.RPCRequest;
+import org.tomato.messenger.TLObject;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+import org.tomato.ui.Views.SettingsSectionLayout;
+
+public class SettingsChangeNameActivity extends BaseFragment {
+    private EditText firstNameField;
+    private EditText lastNameField;
+    private View headerLabelView;
+    private View doneButton;
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setCustomView(R.layout.settings_do_action_layout);
+            Button cancelButton = (Button)actionBarLayer.findViewById(R.id.cancel_button);
+            cancelButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    finishFragment();
+                }
+            });
+            doneButton = actionBarLayer.findViewById(R.id.done_button);
+            doneButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    if (firstNameField.getText().length() != 0) {
+                        saveName();
+                        finishFragment();
+                    }
+                }
+            });
+
+            cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
+            TextView textView = (TextView)doneButton.findViewById(R.id.done_button_text);
+            textView.setText(LocaleController.getString("Done", R.string.Done).toUpperCase());
+
+            TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
+            if (user == null) {
+                user = UserConfig.getCurrentUser();
+            }
+
+            fragmentView = new LinearLayout(inflater.getContext());
+            fragmentView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
+            fragmentView.setPadding(AndroidUtilities.dp(16), AndroidUtilities.dp(8), AndroidUtilities.dp(16), 0);
+            ((LinearLayout) fragmentView).setOrientation(LinearLayout.VERTICAL);
+
+            SettingsSectionLayout settingsSectionLayout = new SettingsSectionLayout(inflater.getContext());
+            ((LinearLayout) fragmentView).addView(settingsSectionLayout);
+            settingsSectionLayout.setText(LocaleController.getString("YourFirstNameAndLastName", R.string.YourFirstNameAndLastName).toUpperCase());
+
+            firstNameField = new EditText(inflater.getContext());
+            firstNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 19);
+            firstNameField.setHintTextColor(0xffa3a3a3);
+            firstNameField.setTextColor(0xff000000);
+            firstNameField.setPadding(AndroidUtilities.dp(15), 0, AndroidUtilities.dp(15), AndroidUtilities.dp(15));
+            firstNameField.setMaxLines(1);
+            firstNameField.setLines(1);
+            firstNameField.setSingleLine(true);
+            firstNameField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+            firstNameField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
+            firstNameField.setImeOptions(EditorInfo.IME_ACTION_NEXT);
+            firstNameField.setHint(LocaleController.getString("FirstName", R.string.FirstName));
+            firstNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
+                @Override
+                public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
+                    if (i == EditorInfo.IME_ACTION_NEXT) {
+                        lastNameField.requestFocus();
+                        lastNameField.setSelection(lastNameField.length());
+                        return true;
+                    }
+                    return false;
+                }
+            });
+            AndroidUtilities.clearCursorDrawable(firstNameField);
+            ((LinearLayout) fragmentView).addView(firstNameField);
+            LinearLayout.LayoutParams layoutParams = (LinearLayout.LayoutParams)firstNameField.getLayoutParams();
+            layoutParams.topMargin = AndroidUtilities.dp(15);
+            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = LinearLayout.LayoutParams.WRAP_CONTENT;
+            firstNameField.setLayoutParams(layoutParams);
+
+            lastNameField = new EditText(inflater.getContext());
+            lastNameField.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 19);
+            lastNameField.setHintTextColor(0xffa3a3a3);
+            lastNameField.setTextColor(0xff000000);
+            lastNameField.setPadding(AndroidUtilities.dp(15), 0, AndroidUtilities.dp(15), AndroidUtilities.dp(15));
+            lastNameField.setMaxLines(1);
+            lastNameField.setLines(1);
+            lastNameField.setSingleLine(true);
+            lastNameField.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
+            lastNameField.setInputType(InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | InputType.TYPE_TEXT_FLAG_MULTI_LINE | InputType.TYPE_TEXT_FLAG_AUTO_CORRECT);
+            lastNameField.setImeOptions(EditorInfo.IME_ACTION_DONE);
+            lastNameField.setHint(LocaleController.getString("LastName", R.string.LastName));
+            lastNameField.setOnEditorActionListener(new TextView.OnEditorActionListener() {
+                @Override
+                public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
+                    if (i == EditorInfo.IME_ACTION_DONE) {
+                        doneButton.performClick();
+                        return true;
+                    }
+                    return false;
+                }
+            });
+            AndroidUtilities.clearCursorDrawable(lastNameField);
+            ((LinearLayout) fragmentView).addView(lastNameField);
+            layoutParams = (LinearLayout.LayoutParams)lastNameField.getLayoutParams();
+            layoutParams.topMargin = AndroidUtilities.dp(10);
+            layoutParams.width = LinearLayout.LayoutParams.MATCH_PARENT;
+            layoutParams.height = LinearLayout.LayoutParams.WRAP_CONTENT;
+            lastNameField.setLayoutParams(layoutParams);
+
+            if (user != null) {
+                firstNameField.setText(user.first_name);
+                firstNameField.setSelection(firstNameField.length());
+                lastNameField.setText(user.last_name);
+            }
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        boolean animations = preferences.getBoolean("view_animations", true);
+        if (!animations) {
+            firstNameField.requestFocus();
+            AndroidUtilities.showKeyboard(firstNameField);
+        }
+    }
+
+    private void saveName() {
+        TLRPC.User currentUser = UserConfig.getCurrentUser();
+        if (currentUser == null || lastNameField.getText() == null || firstNameField.getText() == null) {
+            return;
+        }
+        String newFirst = firstNameField.getText().toString();
+        String newLast = lastNameField.getText().toString();
+        if (currentUser.first_name != null && currentUser.first_name.equals(newFirst) && currentUser.last_name != null && currentUser.last_name.equals(newLast)) {
+            return;
+        }
+        TLRPC.TL_account_updateProfile req = new TLRPC.TL_account_updateProfile();
+        currentUser.first_name = req.first_name = newFirst;
+        currentUser.last_name = req.last_name = newLast;
+        TLRPC.User user = MessagesController.getInstance().getUser(UserConfig.getClientUserId());
+        if (user != null) {
+            user.first_name = req.first_name;
+            user.last_name = req.last_name;
+        }
+        UserConfig.saveConfig(true);
+        NotificationCenter.getInstance().postNotificationName(NotificationCenter.updateInterfaces, MessagesController.UPDATE_MASK_NAME);
+        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+            @Override
+            public void run(TLObject response, TLRPC.TL_error error) {
+
+            }
+        });
+    }
+
+    @Override
+    public void onOpenAnimationEnd() {
+        firstNameField.requestFocus();
+        AndroidUtilities.showKeyboard(firstNameField);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsChangeUsernameActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/SettingsChangeUsernameActivity.java
similarity index 96%
rename from TMessagesProj/src/main/java/org/telegram/ui/SettingsChangeUsernameActivity.java
rename to TMessagesProj/src/main/java/org/tomato/ui/SettingsChangeUsernameActivity.java
index 3f893ca79..3bfb1d822 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsChangeUsernameActivity.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/SettingsChangeUsernameActivity.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.ui;
+package org.tomato.ui;
 
 import android.app.Activity;
 import android.app.AlertDialog;
@@ -29,20 +29,20 @@
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MessagesController;
-import org.telegram.android.MessagesStorage;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
-import org.telegram.ui.Views.SettingsSectionLayout;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MessagesController;
+import org.tomato.android.MessagesStorage;
+import org.tomato.android.NotificationCenter;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.RPCRequest;
+import org.tomato.messenger.TLObject;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+import org.tomato.ui.Views.SettingsSectionLayout;
 
 import java.util.ArrayList;
 
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/SettingsNotificationsActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/SettingsNotificationsActivity.java
new file mode 100644
index 000000000..d74ec0274
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/SettingsNotificationsActivity.java
@@ -0,0 +1,749 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.media.Ringtone;
+import android.media.RingtoneManager;
+import android.net.Uri;
+import android.provider.Settings;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.ImageView;
+import android.widget.ListView;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MessagesController;
+import org.tomato.android.NotificationCenter;
+import org.tomato.android.NotificationsController;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.RPCRequest;
+import org.tomato.messenger.TLObject;
+import org.tomato.messenger.TLRPC;
+import org.tomato.ui.Adapters.BaseFragmentAdapter;
+import org.tomato.ui.Views.ActionBar.ActionBarLayer;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+import org.tomato.ui.Views.ColorPickerView;
+import org.tomato.ui.Views.SettingsSectionLayout;
+
+public class SettingsNotificationsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+    private ListView listView;
+    private boolean reseting = false;
+
+    private int notificationsServiceRow;
+    private int messageSectionRow;
+    private int messageAlertRow;
+    private int messagePreviewRow;
+    private int messageVibrateRow;
+    private int messageSoundRow;
+    private int messageLedRow;
+    private int messagePopupNotificationRow;
+    private int groupSectionRow;
+    private int groupAlertRow;
+    private int groupPreviewRow;
+    private int groupVibrateRow;
+    private int groupSoundRow;
+    private int groupLedRow;
+    private int groupPopupNotificationRow;
+    private int inappSectionRow;
+    private int inappSoundRow;
+    private int inappVibrateRow;
+    private int inappPreviewRow;
+    private int eventsSectionRow;
+    private int contactJoinedRow;
+    private int otherSectionRow;
+    private int badgeNumberRow;
+    private int pebbleAlertRow;
+    private int resetSectionRow;
+    private int resetNotificationsRow;
+    private int rowCount = 0;
+
+    @Override
+    public boolean onFragmentCreate() {
+        notificationsServiceRow = rowCount++;
+        messageSectionRow = rowCount++;
+        messageAlertRow = rowCount++;
+        messagePreviewRow = rowCount++;
+        messageVibrateRow = rowCount++;
+        messageLedRow = rowCount++;
+        messagePopupNotificationRow = rowCount++;
+        messageSoundRow = rowCount++;
+        groupSectionRow = rowCount++;
+        groupAlertRow = rowCount++;
+        groupPreviewRow = rowCount++;
+        groupVibrateRow = rowCount++;
+        groupLedRow = rowCount++;
+        groupPopupNotificationRow = rowCount++;
+        groupSoundRow = rowCount++;
+        inappSectionRow = rowCount++;
+        inappSoundRow = rowCount++;
+        inappVibrateRow = rowCount++;
+        inappPreviewRow = rowCount++;
+        eventsSectionRow = rowCount++;
+        contactJoinedRow = rowCount++;
+        otherSectionRow = rowCount++;
+        badgeNumberRow = rowCount++;
+        pebbleAlertRow = rowCount++;
+        resetSectionRow = rowCount++;
+        resetNotificationsRow = rowCount++;
+
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.notificationsSettingsUpdated);
+
+        return super.onFragmentCreate();
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.notificationsSettingsUpdated);
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
+            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
+            actionBarLayer.setTitle(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds));
+            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    }
+                }
+            });
+
+            fragmentView = inflater.inflate(R.layout.settings_layout, container, false);
+            final ListAdapter listAdapter = new ListAdapter(getParentActivity());
+            listView = (ListView)fragmentView.findViewById(R.id.listView);
+            listView.setAdapter(listAdapter);
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+                    if (i == messageAlertRow || i == groupAlertRow) {
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        SharedPreferences.Editor editor = preferences.edit();
+                        boolean enabled;
+                        if (i == messageAlertRow) {
+                            enabled = preferences.getBoolean("EnableAll", true);
+                            editor.putBoolean("EnableAll", !enabled);
+                        } else if (i == groupAlertRow) {
+                            enabled = preferences.getBoolean("EnableGroup", true);
+                            editor.putBoolean("EnableGroup", !enabled);
+                        }
+                        editor.commit();
+                        listView.invalidateViews();
+                        updateServerNotificationsSettings(i == groupAlertRow);
+                    } else if (i == messagePreviewRow || i == groupPreviewRow) {
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        SharedPreferences.Editor editor = preferences.edit();
+                        boolean enabled;
+                        if (i == messagePreviewRow) {
+                            enabled = preferences.getBoolean("EnablePreviewAll", true);
+                            editor.putBoolean("EnablePreviewAll", !enabled);
+                        } else if (i == groupPreviewRow) {
+                            enabled = preferences.getBoolean("EnablePreviewGroup", true);
+                            editor.putBoolean("EnablePreviewGroup", !enabled);
+                        }
+                        editor.commit();
+                        listView.invalidateViews();
+                        updateServerNotificationsSettings(i == groupPreviewRow);
+                    } else if (i == messageSoundRow || i == groupSoundRow) {
+                        try {
+                            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                            Intent tmpIntent = new Intent(RingtoneManager.ACTION_RINGTONE_PICKER);
+                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE, RingtoneManager.TYPE_NOTIFICATION);
+                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_DEFAULT, true);
+                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_DEFAULT_URI, RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION));
+                            Uri currentSound = null;
+
+                            String defaultPath = null;
+                            Uri defaultUri = Settings.System.DEFAULT_NOTIFICATION_URI;
+                            if (defaultUri != null) {
+                                defaultPath = defaultUri.getPath();
+                            }
+
+                            if (i == messageSoundRow) {
+                                String path = preferences.getString("GlobalSoundPath", defaultPath);
+                                if (path != null && !path.equals("NoSound")) {
+                                    if (path.equals(defaultPath)) {
+                                        currentSound = defaultUri;
+                                    } else {
+                                        currentSound = Uri.parse(path);
+                                    }
+                                }
+                            } else if (i == groupSoundRow) {
+                                String path = preferences.getString("GroupSoundPath", defaultPath);
+                                if (path != null && !path.equals("NoSound")) {
+                                    if (path.equals(defaultPath)) {
+                                        currentSound = defaultUri;
+                                    } else {
+                                        currentSound = Uri.parse(path);
+                                    }
+                                }
+                            }
+                            tmpIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_EXISTING_URI, currentSound);
+                            startActivityForResult(tmpIntent, i);
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
+                        }
+                    } else if (i == resetNotificationsRow) {
+                        if (reseting) {
+                            return;
+                        }
+                        reseting = true;
+                        TLRPC.TL_account_resetNotifySettings req = new TLRPC.TL_account_resetNotifySettings();
+                        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                            @Override
+                            public void run(TLObject response, TLRPC.TL_error error) {
+                                AndroidUtilities.RunOnUIThread(new Runnable() {
+                                    @Override
+                                    public void run() {
+                                        MessagesController.getInstance().enableJoined = true;
+                                        reseting = false;
+                                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                        SharedPreferences.Editor editor = preferences.edit();
+                                        editor.clear();
+                                        editor.commit();
+                                        if (listView != null) {
+                                            listView.invalidateViews();
+                                        }
+                                        if (getParentActivity() != null) {
+                                            Toast toast = Toast.makeText(getParentActivity(), LocaleController.getString("ResetNotificationsText", R.string.ResetNotificationsText), Toast.LENGTH_SHORT);
+                                            toast.show();
+                                        }
+                                    }
+                                });
+                            }
+                        });
+                    } else if (i == inappSoundRow) {
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        SharedPreferences.Editor editor = preferences.edit();
+                        boolean enabled = preferences.getBoolean("EnableInAppSounds", true);
+                        editor.putBoolean("EnableInAppSounds", !enabled);
+                        editor.commit();
+                        listView.invalidateViews();
+                    } else if (i == inappVibrateRow) {
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        SharedPreferences.Editor editor = preferences.edit();
+                        boolean enabled = preferences.getBoolean("EnableInAppVibrate", true);
+                        editor.putBoolean("EnableInAppVibrate", !enabled);
+                        editor.commit();
+                        listView.invalidateViews();
+                    } else if (i == inappPreviewRow) {
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        SharedPreferences.Editor editor = preferences.edit();
+                        boolean enabled = preferences.getBoolean("EnableInAppPreview", true);
+                        editor.putBoolean("EnableInAppPreview", !enabled);
+                        editor.commit();
+                        listView.invalidateViews();
+                    } else if (i == contactJoinedRow) {
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        SharedPreferences.Editor editor = preferences.edit();
+                        boolean enabled = preferences.getBoolean("EnableContactJoined", true);
+                        MessagesController.getInstance().enableJoined = !enabled;
+                        editor.putBoolean("EnableContactJoined", !enabled);
+                        editor.commit();
+                        listView.invalidateViews();
+                    } else if (i == pebbleAlertRow) {
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        SharedPreferences.Editor editor = preferences.edit();
+                        boolean enabled = preferences.getBoolean("EnablePebbleNotifications", false);
+                        editor.putBoolean("EnablePebbleNotifications", !enabled);
+                        editor.commit();
+                        listView.invalidateViews();
+                    } else if (i == badgeNumberRow) {
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        SharedPreferences.Editor editor = preferences.edit();
+                        boolean enabled = preferences.getBoolean("badgeNumber", true);
+                        editor.putBoolean("badgeNumber", !enabled);
+                        editor.commit();
+                        listView.invalidateViews();
+                        NotificationsController.getInstance().setBadgeEnabled(!enabled);
+                    } else if (i == notificationsServiceRow) {
+                        final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        boolean enabled = preferences.getBoolean("pushService", true);
+                        if (!enabled) {
+                            final SharedPreferences.Editor editor = preferences.edit();
+                            editor.putBoolean("pushService", !enabled);
+                            editor.commit();
+                            listView.invalidateViews();
+                            ApplicationLoader.startPushService();
+                        } else {
+                            if (getParentActivity() == null) {
+                                return;
+                            }
+                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                            builder.setMessage(LocaleController.getString("NotificationsServiceDisableInfo", R.string.NotificationsServiceDisableInfo));
+                            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                                @Override
+                                public void onClick(DialogInterface dialogInterface, int i) {
+                                    ApplicationLoader.stopPushService();
+                                    final SharedPreferences.Editor editor = preferences.edit();
+                                    editor.putBoolean("pushService", false);
+                                    editor.commit();
+                                    listView.invalidateViews();
+                                }
+                            });
+                            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                            showAlertDialog(builder);
+                        }
+                    } else if (i == messageLedRow || i == groupLedRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+
+                        LayoutInflater li = (LayoutInflater)getParentActivity().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                        view = li.inflate(R.layout.settings_color_dialog_layout, null, false);
+                        final ColorPickerView colorPickerView = (ColorPickerView)view.findViewById(R.id.color_picker);
+
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                        if (i == messageLedRow) {
+                            colorPickerView.setOldCenterColor(preferences.getInt("MessagesLed", 0xff00ff00));
+                        } else if (i == groupLedRow) {
+                            colorPickerView.setOldCenterColor(preferences.getInt("GroupLed", 0xff00ff00));
+                        }
+
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("LedColor", R.string.LedColor));
+                        builder.setView(view);
+                        builder.setPositiveButton(LocaleController.getString("Set", R.string.Set), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int which) {
+                                final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                if (i == messageLedRow) {
+                                    editor.putInt("MessagesLed", colorPickerView.getColor());
+                                } else if (i == groupLedRow) {
+                                    editor.putInt("GroupLed", colorPickerView.getColor());
+                                }
+                                editor.commit();
+                                listView.invalidateViews();
+                            }
+                        });
+                        builder.setNeutralButton(LocaleController.getString("Disabled", R.string.Disabled), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                if (i == messageLedRow) {
+                                    editor.putInt("MessagesLed", 0);
+                                } else if (i == groupLedRow) {
+                                    editor.putInt("GroupLed", 0);
+                                }
+                                editor.commit();
+                                listView.invalidateViews();
+                            }
+                        });
+                        showAlertDialog(builder);
+                    } else if (i == messagePopupNotificationRow || i == groupPopupNotificationRow) {
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("PopupNotification", R.string.PopupNotification));
+                        builder.setItems(new CharSequence[] {
+                                LocaleController.getString("NoPopup", R.string.NoPopup),
+                                LocaleController.getString("OnlyWhenScreenOn", R.string.OnlyWhenScreenOn),
+                                LocaleController.getString("OnlyWhenScreenOff", R.string.OnlyWhenScreenOff),
+                                LocaleController.getString("AlwaysShowPopup", R.string.AlwaysShowPopup)
+                        }, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                if (i == messagePopupNotificationRow) {
+                                    editor.putInt("popupAll", which);
+                                } else if (i == groupPopupNotificationRow) {
+                                    editor.putInt("popupGroup", which);
+                                }
+                                editor.commit();
+                                if (listView != null) {
+                                    listView.invalidateViews();
+                                }
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
+                    } else if (i == messageVibrateRow || i == groupVibrateRow) {
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setTitle(LocaleController.getString("Vibrate", R.string.Vibrate));
+                        builder.setItems(new CharSequence[] {
+                                LocaleController.getString("Disabled", R.string.Disabled),
+                                LocaleController.getString("Default", R.string.Default),
+                                LocaleController.getString("Short", R.string.Short),
+                                LocaleController.getString("Long", R.string.Long)
+                        }, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                                SharedPreferences.Editor editor = preferences.edit();
+                                String param = "vibrate_messages";
+                                if (i == groupVibrateRow) {
+                                    param = "vibrate_group";
+                                }
+                                if (which == 0) {
+                                    editor.putInt(param, 2);
+                                } else if (which == 1) {
+                                    editor.putInt(param, 0);
+                                } else if (which == 2) {
+                                    editor.putInt(param, 1);
+                                } else if (which == 3) {
+                                    editor.putInt(param, 3);
+                                }
+                                editor.commit();
+                                if (listView != null) {
+                                    listView.invalidateViews();
+                                }
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
+                    }
+                }
+            });
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    public void updateServerNotificationsSettings(boolean group) {
+        //disable global settings sync
+        /*SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+        TLRPC.TL_account_updateNotifySettings req = new TLRPC.TL_account_updateNotifySettings();
+        req.settings = new TLRPC.TL_inputPeerNotifySettings();
+        req.settings.sound = "default";
+        req.settings.events_mask = 0;
+        if (!group) {
+            req.peer = new TLRPC.TL_inputNotifyUsers();
+            req.settings.mute_until = preferences.getBoolean("EnableAll", true) ? 0 : Integer.MAX_VALUE;
+            req.settings.show_previews = preferences.getBoolean("EnablePreviewAll", true);
+        } else {
+            req.peer = new TLRPC.TL_inputNotifyChats();
+            req.settings.mute_until = preferences.getBoolean("EnableGroup", true) ? 0 : Integer.MAX_VALUE;
+            req.settings.show_previews = preferences.getBoolean("EnablePreviewGroup", true);
+        }
+        ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+            @Override
+            public void run(TLObject response, TLRPC.TL_error error) {
+
+            }
+        });*/
+    }
+
+    @Override
+    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
+        if (resultCode == Activity.RESULT_OK) {
+            Uri ringtone = data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
+            String name = null;
+            if (ringtone != null) {
+                Ringtone rng = RingtoneManager.getRingtone(getParentActivity(), ringtone);
+                if (rng != null) {
+                    if(ringtone.equals(Settings.System.DEFAULT_NOTIFICATION_URI)) {
+                        name = LocaleController.getString("Default", R.string.Default);
+                    } else {
+                        name = rng.getTitle(getParentActivity());
+                    }
+                    rng.stop();
+                }
+            }
+
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+            SharedPreferences.Editor editor = preferences.edit();
+
+            if (requestCode == messageSoundRow) {
+                if (name != null && ringtone != null) {
+                    editor.putString("GlobalSound", name);
+                    editor.putString("GlobalSoundPath", ringtone.toString());
+                } else {
+                    editor.putString("GlobalSound", "NoSound");
+                    editor.putString("GlobalSoundPath", "NoSound");
+                }
+            } else if (requestCode == groupSoundRow) {
+                if (name != null && ringtone != null) {
+                    editor.putString("GroupSound", name);
+                    editor.putString("GroupSoundPath", ringtone.toString());
+                } else {
+                    editor.putString("GroupSound", "NoSound");
+                    editor.putString("GroupSoundPath", "NoSound");
+                }
+            }
+            editor.commit();
+            listView.invalidateViews();
+        }
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.notificationsSettingsUpdated) {
+            listView.invalidateViews();
+        }
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return !(i == messageSectionRow || i == groupSectionRow || i == inappSectionRow || i == eventsSectionRow || i == otherSectionRow || i == resetSectionRow);
+        }
+
+        @Override
+        public int getCount() {
+            return rowCount;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            if (type == 0) {
+                if (view == null) {
+                    view = new SettingsSectionLayout(mContext);
+                }
+                if (i == messageSectionRow) {
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("MessageNotifications", R.string.MessageNotifications));
+                } else if (i == groupSectionRow) {
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("GroupNotifications", R.string.GroupNotifications));
+                } else if (i == inappSectionRow) {
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("InAppNotifications", R.string.InAppNotifications));
+                } else if (i == eventsSectionRow) {
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("Events", R.string.Events));
+                } else if (i == otherSectionRow) {
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("PhoneOther", R.string.PhoneOther));
+                } else if (i == resetSectionRow) {
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("Reset", R.string.Reset));
+                }
+            } if (type == 1) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_row_check_notify_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                View divider = view.findViewById(R.id.settings_row_divider);
+
+                ImageView checkButton = (ImageView)view.findViewById(R.id.settings_row_check_button);
+                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                boolean enabled = false;
+                boolean enabledAll = preferences.getBoolean("EnableAll", true);
+                boolean enabledGroup = preferences.getBoolean("EnableGroup", true);
+
+                if (i == messageAlertRow || i == groupAlertRow) {
+                    if (i == messageAlertRow) {
+                        enabled = enabledAll;
+                    } else if (i == groupAlertRow) {
+                        enabled = enabledGroup;
+                    }
+                    textView.setText(LocaleController.getString("Alert", R.string.Alert));
+                    divider.setVisibility(View.VISIBLE);
+                } else if (i == messagePreviewRow || i == groupPreviewRow) {
+                    if (i == messagePreviewRow) {
+                        enabled = preferences.getBoolean("EnablePreviewAll", true);
+                    } else if (i == groupPreviewRow) {
+                        enabled = preferences.getBoolean("EnablePreviewGroup", true);
+                    }
+                    textView.setText(LocaleController.getString("MessagePreview", R.string.MessagePreview));
+                    divider.setVisibility(View.VISIBLE);
+                } else if (i == inappSoundRow) {
+                    enabled = preferences.getBoolean("EnableInAppSounds", true);
+                    textView.setText(LocaleController.getString("InAppSounds", R.string.InAppSounds));
+                    divider.setVisibility(View.VISIBLE);
+                } else if (i == inappVibrateRow) {
+                    enabled = preferences.getBoolean("EnableInAppVibrate", true);
+                    textView.setText(LocaleController.getString("InAppVibrate", R.string.InAppVibrate));
+                    divider.setVisibility(View.VISIBLE);
+                } else if (i == inappPreviewRow) {
+                    enabled = preferences.getBoolean("EnableInAppPreview", true);
+                    textView.setText(LocaleController.getString("InAppPreview", R.string.InAppPreview));
+                    divider.setVisibility(View.INVISIBLE);
+                } else if (i == contactJoinedRow) {
+                    enabled = preferences.getBoolean("EnableContactJoined", true);
+                    textView.setText(LocaleController.getString("ContactJoined", R.string.ContactJoined));
+                    divider.setVisibility(View.INVISIBLE);
+                } else if (i == pebbleAlertRow) {
+                    enabled = preferences.getBoolean("EnablePebbleNotifications", false);
+                    textView.setText(LocaleController.getString("Pebble", R.string.Pebble));
+                    divider.setVisibility(View.INVISIBLE);
+                } else if (i == notificationsServiceRow) {
+                    enabled = preferences.getBoolean("pushService", true);
+                    textView.setText(LocaleController.getString("NotificationsService", R.string.NotificationsService));
+                    divider.setVisibility(View.INVISIBLE);
+                } else if (i == badgeNumberRow) {
+                    enabled = preferences.getBoolean("badgeNumber", true);
+                    textView.setText(LocaleController.getString("BadgeNumber", R.string.BadgeNumber));
+                    divider.setVisibility(View.VISIBLE);
+                }
+                if (enabled) {
+                    checkButton.setImageResource(R.drawable.btn_check_on);
+                } else {
+                    checkButton.setImageResource(R.drawable.btn_check_off);
+                }
+            } else if (type == 2) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_row_detail_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                TextView textViewDetail = (TextView)view.findViewById(R.id.settings_row_text_detail);
+                View divider = view.findViewById(R.id.settings_row_divider);
+                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                boolean enabledAll = preferences.getBoolean("EnableAll", true);
+                boolean enabledGroup = preferences.getBoolean("EnableGroup", true);
+
+                if (i == messageSoundRow || i == groupSoundRow) {
+                    String name = null;
+                    if (i == messageSoundRow) {
+                        name = preferences.getString("GlobalSound", LocaleController.getString("Default", R.string.Default));
+                    } else if (i == groupSoundRow) {
+                        name = preferences.getString("GroupSound", LocaleController.getString("Default", R.string.Default));
+                    }
+                    if (name.equals("NoSound")) {
+                        textViewDetail.setText(LocaleController.getString("NoSound", R.string.NoSound));
+                    } else {
+                        textViewDetail.setText(name);
+                    }
+                    textView.setText(LocaleController.getString("Sound", R.string.Sound));
+                    divider.setVisibility(View.INVISIBLE);
+                } else if (i == resetNotificationsRow) {
+                    textView.setText(LocaleController.getString("ResetAllNotifications", R.string.ResetAllNotifications));
+                    textViewDetail.setText(LocaleController.getString("UndoAllCustom", R.string.UndoAllCustom));
+                    divider.setVisibility(View.INVISIBLE);
+                } else if (i == messagePopupNotificationRow || i == groupPopupNotificationRow) {
+                    textView.setText(LocaleController.getString("PopupNotification", R.string.PopupNotification));
+                    int option = 0;
+                    if (i == messagePopupNotificationRow) {
+                        option = preferences.getInt("popupAll", 0);
+                    } else if (i == groupPopupNotificationRow) {
+                        option = preferences.getInt("popupGroup", 0);
+                    }
+                    if (option == 0) {
+                        textViewDetail.setText(LocaleController.getString("NoPopup", R.string.NoPopup));
+                    } else if (option == 1) {
+                        textViewDetail.setText(LocaleController.getString("OnlyWhenScreenOn", R.string.OnlyWhenScreenOn));
+                    } else if (option == 2) {
+                        textViewDetail.setText(LocaleController.getString("OnlyWhenScreenOff", R.string.OnlyWhenScreenOff));
+                    } else if (option == 3) {
+                        textViewDetail.setText(LocaleController.getString("AlwaysShowPopup", R.string.AlwaysShowPopup));
+                    }
+                    divider.setVisibility(View.VISIBLE);
+                }
+            } else if (type == 3) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_row_color_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                View colorView = view.findViewById(R.id.settings_color);
+                View divider = view.findViewById(R.id.settings_row_divider);
+                textView.setText(LocaleController.getString("LedColor", R.string.LedColor));
+                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                if (i == messageLedRow) {
+                    colorView.setBackgroundColor(preferences.getInt("MessagesLed", 0xff00ff00));
+                } else if (i == groupLedRow) {
+                    colorView.setBackgroundColor(preferences.getInt("GroupLed", 0xff00ff00));
+                }
+                divider.setVisibility(View.VISIBLE);
+            } else if (type == 4) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.user_profile_leftright_row_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
+
+                View divider = view.findViewById(R.id.settings_row_divider);
+                SharedPreferences preferences = mContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                int value = 0;
+                textView.setText(LocaleController.getString("Vibrate", R.string.Vibrate));
+                divider.setVisibility(View.VISIBLE);
+                if (i == messageVibrateRow) {
+                    value = preferences.getInt("vibrate_messages", 0);
+                } else if (i == groupVibrateRow) {
+                    value = preferences.getInt("vibrate_group", 0);
+                }
+                if (value == 0) {
+                    detailTextView.setText(LocaleController.getString("Default", R.string.Default));
+                } else if (value == 1) {
+                    detailTextView.setText(LocaleController.getString("Short", R.string.Short));
+                } else if (value == 2) {
+                    detailTextView.setText(LocaleController.getString("Disabled", R.string.Disabled));
+                } else if (value == 3) {
+                    detailTextView.setText(LocaleController.getString("Long", R.string.Long));
+                }
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            if (i == messageSectionRow || i == groupSectionRow || i == inappSectionRow || i == eventsSectionRow || i == otherSectionRow || i == resetSectionRow) {
+                return 0;
+            } else if (i == messageAlertRow || i == messagePreviewRow ||
+                    i == groupAlertRow || i == groupPreviewRow ||
+                    i == inappSoundRow || i == inappVibrateRow || i == inappPreviewRow ||
+                    i == contactJoinedRow ||
+                    i == pebbleAlertRow || i == notificationsServiceRow || i == badgeNumberRow) {
+                return 1;
+            } else if (i == messageLedRow || i == groupLedRow) {
+                return 3;
+            } else if (i == groupVibrateRow || i == messageVibrateRow) {
+                return 4;
+            } else {
+                return 2;
+            }
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 5;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/SettingsThemeActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/SettingsThemeActivity.java
new file mode 100644
index 000000000..935e9c775
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/SettingsThemeActivity.java
@@ -0,0 +1,319 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.content.res.Configuration;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.Button;
+import android.widget.ListView;
+import android.widget.RadioButton;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import org.tomato.android.LocaleController;
+import org.tomato.android.NotificationCenter;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.ui.Adapters.BaseFragmentAdapter;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.HashMap;
+
+public class SettingsThemeActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+    private ListView listView;
+    private ListAdapter listAdapter;
+    //private ImageView backgroundImage;
+    //private ProgressBar progressBar;
+    private int selectedBackground;
+    private int selectedColor;
+    private ArrayList<TLRPC.WallPaper> wallPapers = new ArrayList<TLRPC.WallPaper>();
+    private HashMap<Integer, TLRPC.WallPaper> wallpappersByIds = new HashMap<Integer, TLRPC.WallPaper>();
+    private View doneButton;
+    private String loadingFile = null;
+    private File loadingFileObject = null;
+    private TLRPC.PhotoSize loadingSize = null;
+    private String currentPicturePath;
+    private int selectedColorTheme;
+    private static int temporarySelectedColor;
+    private static int temporarySelectedStyle;
+
+    private static int [] colorThemes = {R.color.header, R.color.line_header, R.color.whatsapp_header, R.color.wechat_header,
+                                         R.color.hangouts_header, R.color.bee_header, R.color.viber_header, R.color.hike_header,
+                                         R.color.msngr_header, R.color.gg_messenger_header, R.color.girl_header, R.color.tango_header    };
+
+    private static int [] styleThemes = {R.style.ActionBar_Transparent_TMessages_Start, R.style.ActionBarLine_Transparent_TMessages_Start,
+                                         R.style.ActionBarWhatsapp_Transparent_TMessages_Start, R.style.ActionBarWechat_Transparent_TMessages_Start,
+                                         R.style.ActionBarHangouts_Transparent_TMessages_Start, R.style.ActionBarBee_Transparent_TMessages_Start,
+                                         R.style.ActionBarViber_Transparent_TMessages_Start, R.style.ActionBarHike_Transparent_TMessages_Start,
+                                         R.style.ActionBarHike_Transparent_TMessages_Start, R.style.ActionBarMnsg_Transparent_TMessages_Start,
+                                         R.style.ActionBarGGmess_Transparent_TMessages_Start, R.style.ActionBarGirl_Transparent_TMessages_Start,
+                                         R.style.ActionBarTango_Transparent_TMessages_Start};
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        selectedColorTheme = preferences.getInt(ApplicationLoader.ACTIONBAR_COLOR, R.color.header);
+        temporarySelectedColor = selectedColorTheme;
+
+
+        /*NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileLoadProgressChanged);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.wallpapersDidLoaded);*/
+
+
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        /*NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileDidFailedLoad);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileLoadProgressChanged);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.wallpapersDidLoaded);*/
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setCustomView(R.layout.settings_do_action_layout);
+            Button cancelButton = (Button)actionBarLayer.findViewById(R.id.cancel_button);
+            cancelButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    finishFragment();
+                }
+            });
+            doneButton = actionBarLayer.findViewById(R.id.done_button);
+            doneButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+
+
+
+                if (temporarySelectedColor != selectedColorTheme) {
+                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                    SharedPreferences.Editor editor = preferences.edit();
+                    editor.putInt(ApplicationLoader.ACTIONBAR_COLOR, temporarySelectedColor);
+                    ApplicationLoader.actionbarColor = temporarySelectedColor;
+                    editor.putInt(ApplicationLoader.ACTIONBAR_STYLE, temporarySelectedColor);
+                    ApplicationLoader.actionBarStyle = temporarySelectedStyle;
+
+
+                    //editor.putInt("selectedColor", selectedColor);
+                    editor.commit();
+
+                }
+                    finishFragment();
+                }
+            });
+
+            cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
+            TextView textView = (TextView)doneButton.findViewById(R.id.done_button_text);
+            textView.setText(LocaleController.getString("Set", R.string.Set).toUpperCase());
+
+            fragmentView = inflater.inflate(R.layout.settings_theme_layout, container, false);
+            listAdapter = new ListAdapter(getParentActivity());
+
+            //progressBar = (ProgressBar)fragmentView.findViewById(R.id.action_progress);
+            //backgroundImage = (ImageView)fragmentView.findViewById(R.id.background_image);
+            listView = (ListView)fragmentView.findViewById(R.id.theme_listview);
+            listView.setAdapter(listAdapter);
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    temporarySelectedColor = SettingsThemeActivity.colorThemes[i];
+                    temporarySelectedStyle = SettingsThemeActivity.styleThemes[i];
+                    listAdapter.notifyDataSetChanged();
+                }
+            });
+
+            processSelectedBackground();
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+
+    @Override
+    public void saveSelfArgs(Bundle args) {
+        if (currentPicturePath != null) {
+            args.putString("path", currentPicturePath);
+        }
+    }
+
+    @Override
+    public void restoreSelfArgs(Bundle args) {
+        currentPicturePath = args.getString("path");
+    }
+
+    private void processSelectedBackground() {
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public void didReceivedNotification(int id, final Object... args) {
+    }
+
+    @Override
+    public void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        fixLayout();
+    }
+
+    private void loadWallpapers() {
+    }
+
+    private void fixLayout() {
+       /* ViewTreeObserver obs = fragmentView.getViewTreeObserver();
+        obs.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+            @Override
+            public boolean onPreDraw() {
+                fragmentView.getViewTreeObserver().removeOnPreDrawListener(this);
+                if (listAdapter != null) {
+                    listAdapter.notifyDataSetChanged();
+                }
+                if (listView != null) {
+                    listView.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            listView.scrollTo(0);
+                        }
+                    });
+                }
+                return false;
+            }
+        });*/
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+        fixLayout();
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+        private LayoutInflater inflater;
+        public ListAdapter(Context context) {
+            mContext = context;
+            inflater = LayoutInflater.from(context);
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return true;
+        }
+
+        @Override
+        public int getCount() {
+            return SettingsThemeActivity.colorThemes.length;
+        }
+
+        @Override
+        public Integer getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return true;
+        }
+
+        @Override
+        public View getView(int i, View convertedView, ViewGroup viewGroup) {
+            View view = convertedView;
+            ViewHolder holder = null;
+            if (view == null){
+                view = inflater.inflate(R.layout.settings_themes_item_layout, null);
+                holder = new ViewHolder();
+                holder.checkButton = (RadioButton) view.findViewById(R.id.theme_item_check_button);
+                holder.rowWrapperLayout = (RelativeLayout) view.findViewById(R.id.theme_item_wrapper);
+                view.setTag(holder);
+            }
+            else
+            holder = (ViewHolder)view.getTag();
+
+            holder.rowWrapperLayout.setBackgroundResource(colorThemes[i]);
+            holder.checkButton.setChecked(colorThemes[i] == temporarySelectedColor);
+            if (colorThemes[i] == temporarySelectedColor){
+                holder.rowWrapperLayout.setSelected(true);
+            }
+            else{
+                holder.rowWrapperLayout.setSelected(false);
+            }
+            return view;
+        }
+
+        /*@Override
+        public int getItemViewType(int i) {
+            if (i == 0) {
+                return 0;
+            }
+            TLRPC.WallPaper wallPaper = wallPapers.get(i - 1);
+            if (wallPaper instanceof TLRPC.TL_wallPaperSolid) {
+                return 0;
+            }
+            return 1;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 2;
+        }*/
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+
+        private class ViewHolder{
+            public RelativeLayout rowWrapperLayout;
+            public RadioButton checkButton;
+        }
+    }
+
+    public static class ThemeData {
+        public int colorResId;
+        public boolean isCurrentSelected;
+
+        public ThemeData(int colorResId, boolean isCurrentSelected) {
+            this.colorResId = colorResId;
+            this.isCurrentSelected = isCurrentSelected;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/SettingsWallpapersActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/SettingsWallpapersActivity.java
new file mode 100644
index 000000000..9823a8997
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/SettingsWallpapersActivity.java
@@ -0,0 +1,570 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.content.res.Configuration;
+import android.graphics.Bitmap;
+import android.net.Uri;
+import android.os.Bundle;
+import android.provider.MediaStore;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.widget.AdapterView;
+import android.widget.Button;
+import android.widget.ImageView;
+import android.widget.ProgressBar;
+import android.widget.TextView;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.ImageLoader;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MessagesStorage;
+import org.tomato.android.NotificationCenter;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLoader;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.RPCRequest;
+import org.tomato.messenger.TLObject;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.Utilities;
+import org.tomato.ui.Adapters.BaseFragmentAdapter;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+import org.tomato.ui.Views.BackupImageView;
+import org.tomato.ui.Views.HorizontalListView;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.util.ArrayList;
+import java.util.HashMap;
+
+public class SettingsWallpapersActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+    private HorizontalListView listView;
+    private ListAdapter listAdapter;
+    private ImageView backgroundImage;
+    private ProgressBar progressBar;
+    private int selectedBackground;
+    private int selectedColor;
+    private ArrayList<TLRPC.WallPaper> wallPapers = new ArrayList<TLRPC.WallPaper>();
+    private HashMap<Integer, TLRPC.WallPaper> wallpappersByIds = new HashMap<Integer, TLRPC.WallPaper>();
+    private View doneButton;
+    private String loadingFile = null;
+    private File loadingFileObject = null;
+    private TLRPC.PhotoSize loadingSize = null;
+    private String currentPicturePath;
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidFailedLoad);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.FileLoadProgressChanged);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.wallpapersDidLoaded);
+
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        selectedBackground = preferences.getInt("selectedBackground", 1000001);
+        selectedColor = preferences.getInt("selectedColor", 0);
+        MessagesStorage.getInstance().getWallpapers();
+        File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper-temp.jpg");
+        toFile.delete();
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileDidFailedLoad);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.FileLoadProgressChanged);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.wallpapersDidLoaded);
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setCustomView(R.layout.settings_do_action_layout);
+            Button cancelButton = (Button)actionBarLayer.findViewById(R.id.cancel_button);
+            cancelButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    finishFragment();
+                }
+            });
+            doneButton = actionBarLayer.findViewById(R.id.done_button);
+            doneButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    boolean done;
+                    TLRPC.WallPaper wallPaper = wallpappersByIds.get(selectedBackground);
+                    if (wallPaper != null && wallPaper.id != 1000001 && wallPaper instanceof TLRPC.TL_wallPaper) {
+                        int width = AndroidUtilities.displaySize.x;
+                        int height = AndroidUtilities.displaySize.y;
+                        if (width > height) {
+                            int temp = width;
+                            width = height;
+                            height = temp;
+                        }
+                        TLRPC.PhotoSize size = FileLoader.getClosestPhotoSizeWithSize(wallPaper.sizes, Math.min(width, height));
+                        String fileName = size.location.volume_id + "_" + size.location.local_id + ".jpg";
+                        File f = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
+                        File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper.jpg");
+                        try {
+                            done = Utilities.copyFile(f, toFile);
+                        } catch (Exception e) {
+                            done = false;
+                            FileLog.e("tmessages", e);
+                        }
+                    } else {
+                        if (selectedBackground == -1) {
+                            File fromFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper-temp.jpg");
+                            File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper.jpg");
+                            done = fromFile.renameTo(toFile);
+                        } else {
+                            done = true;
+                        }
+                    }
+
+                    if (done) {
+                        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+                        SharedPreferences.Editor editor = preferences.edit();
+                        editor.putInt("selectedBackground", selectedBackground);
+                        editor.putInt("selectedColor", selectedColor);
+                        editor.commit();
+                        ApplicationLoader.cachedWallpaper = null;
+                    }
+                    finishFragment();
+                }
+            });
+
+            cancelButton.setText(LocaleController.getString("Cancel", R.string.Cancel).toUpperCase());
+            TextView textView = (TextView)doneButton.findViewById(R.id.done_button_text);
+            textView.setText(LocaleController.getString("Set", R.string.Set).toUpperCase());
+
+            fragmentView = inflater.inflate(R.layout.settings_wallpapers_layout, container, false);
+            listAdapter = new ListAdapter(getParentActivity());
+
+            progressBar = (ProgressBar)fragmentView.findViewById(R.id.action_progress);
+            backgroundImage = (ImageView)fragmentView.findViewById(R.id.background_image);
+            listView = (HorizontalListView)fragmentView.findViewById(R.id.listView);
+            listView.setAdapter(listAdapter);
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    if (i == 0) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+
+                        CharSequence[] items = new CharSequence[] {LocaleController.getString("FromCamera", R.string.FromCamera), LocaleController.getString("FromGalley", R.string.FromGalley), LocaleController.getString("Cancel", R.string.Cancel)};
+
+                        builder.setItems(items, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                try {
+                                    if (i == 0) {
+                                        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
+                                        File image = Utilities.generatePicturePath();
+                                        if (image != null) {
+                                            takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(image));
+                                            currentPicturePath = image.getAbsolutePath();
+                                        }
+                                        startActivityForResult(takePictureIntent, 10);
+                                    } else if (i == 1) {
+                                        Intent photoPickerIntent = new Intent(Intent.ACTION_PICK);
+                                        photoPickerIntent.setType("image/*");
+                                        startActivityForResult(photoPickerIntent, 11);
+                                    }
+                                } catch (Exception e) {
+                                    FileLog.e("tmessages", e);
+                                }
+                            }
+                        });
+                        showAlertDialog(builder);
+                    } else {
+                        TLRPC.WallPaper wallPaper = wallPapers.get(i - 1);
+                        selectedBackground = wallPaper.id;
+                        listAdapter.notifyDataSetChanged();
+                        processSelectedBackground();
+                    }
+                }
+            });
+
+            processSelectedBackground();
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    @Override
+    public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
+        if (resultCode == Activity.RESULT_OK) {
+            if (requestCode == 10) {
+                Utilities.addMediaToGallery(currentPicturePath);
+                try {
+                    Bitmap bitmap = ImageLoader.loadBitmap(currentPicturePath, null, AndroidUtilities.dp(320), AndroidUtilities.dp(480));
+                    File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper-temp.jpg");
+                    FileOutputStream stream = new FileOutputStream(toFile);
+                    bitmap.compress(Bitmap.CompressFormat.JPEG, 87, stream);
+                    selectedBackground = -1;
+                    selectedColor = 0;
+                    backgroundImage.setImageBitmap(bitmap);
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+                currentPicturePath = null;
+            } else if (requestCode == 11) {
+                if (data == null || data.getData() == null) {
+                    return;
+                }
+                try {
+                    Bitmap bitmap = ImageLoader.loadBitmap(null, data.getData(), AndroidUtilities.dp(320), AndroidUtilities.dp(480));
+                    File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper-temp.jpg");
+                    FileOutputStream stream = new FileOutputStream(toFile);
+                    bitmap.compress(Bitmap.CompressFormat.JPEG, 87, stream);
+                    selectedBackground = -1;
+                    selectedColor = 0;
+                    backgroundImage.setImageBitmap(bitmap);
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        }
+    }
+
+    @Override
+    public void saveSelfArgs(Bundle args) {
+        if (currentPicturePath != null) {
+            args.putString("path", currentPicturePath);
+        }
+    }
+
+    @Override
+    public void restoreSelfArgs(Bundle args) {
+        currentPicturePath = args.getString("path");
+    }
+
+    private void processSelectedBackground() {
+        TLRPC.WallPaper wallPaper = wallpappersByIds.get(selectedBackground);
+        if (selectedBackground != -1 && selectedBackground != 1000001 && wallPaper != null && wallPaper instanceof TLRPC.TL_wallPaper) {
+            int width = AndroidUtilities.displaySize.x;
+            int height = AndroidUtilities.displaySize.y;
+            if (width > height) {
+                int temp = width;
+                width = height;
+                height = temp;
+            }
+            TLRPC.PhotoSize size = FileLoader.getClosestPhotoSizeWithSize(wallPaper.sizes, Math.min(width, height));
+            String fileName = size.location.volume_id + "_" + size.location.local_id + ".jpg";
+            File f = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), fileName);
+            if (!f.exists()) {
+                progressBar.setProgress(0);
+                loadingFile = fileName;
+                loadingFileObject = f;
+                doneButton.setEnabled(false);
+                progressBar.setVisibility(View.VISIBLE);
+                loadingSize = size;
+                selectedColor = 0;
+                FileLoader.getInstance().loadFile(size, true);
+                backgroundImage.setBackgroundColor(0);
+            } else {
+                if (loadingFile != null) {
+                    FileLoader.getInstance().cancelLoadFile(loadingSize);
+                }
+                loadingFileObject = null;
+                loadingFile = null;
+                loadingSize = null;
+                backgroundImage.setImageURI(Uri.fromFile(f));
+                backgroundImage.setBackgroundColor(0);
+                selectedColor = 0;
+                doneButton.setEnabled(true);
+                progressBar.setVisibility(View.GONE);
+            }
+        } else {
+            if (loadingFile != null) {
+                FileLoader.getInstance().cancelLoadFile(loadingSize);
+            }
+            if (selectedBackground == 1000001) {
+                backgroundImage.setImageResource(R.drawable.background_hd);
+                backgroundImage.setBackgroundColor(0);
+                selectedColor = 0;
+            } else if (selectedBackground == -1) {
+                File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper-temp.jpg");
+                if (!toFile.exists()) {
+                    toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper.jpg");
+                }
+                if (toFile.exists()) {
+                    backgroundImage.setImageURI(Uri.fromFile(toFile));
+                } else {
+                    selectedBackground = 1000001;
+                    processSelectedBackground();
+                }
+            } else {
+                if (wallPaper == null) {
+                    return;
+                }
+                if (wallPaper instanceof TLRPC.TL_wallPaperSolid) {
+                    backgroundImage.setImageBitmap(null);
+                    selectedColor = 0xff000000 | wallPaper.bg_color;
+                    backgroundImage.setBackgroundColor(selectedColor);
+                }
+            }
+            loadingFileObject = null;
+            loadingFile = null;
+            loadingSize = null;
+            doneButton.setEnabled(true);
+            progressBar.setVisibility(View.GONE);
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public void didReceivedNotification(int id, final Object... args) {
+        if (id == NotificationCenter.FileDidFailedLoad) {
+            String location = (String)args[0];
+            if (loadingFile != null && loadingFile.equals(location)) {
+                loadingFileObject = null;
+                loadingFile = null;
+                loadingSize = null;
+                progressBar.setVisibility(View.GONE);
+                doneButton.setEnabled(false);
+            }
+        } else if (id == NotificationCenter.FileDidLoaded) {
+            String location = (String)args[0];
+            if (loadingFile != null && loadingFile.equals(location)) {
+                backgroundImage.setImageURI(Uri.fromFile(loadingFileObject));
+                progressBar.setVisibility(View.GONE);
+                backgroundImage.setBackgroundColor(0);
+                doneButton.setEnabled(true);
+                loadingFileObject = null;
+                loadingFile = null;
+                loadingSize = null;
+            }
+        } else if (id == NotificationCenter.FileLoadProgressChanged) {
+            String location = (String)args[0];
+            if (loadingFile != null && loadingFile.equals(location)) {
+                Float progress = (Float)args[1];
+                progressBar.setProgress((int)(progress * 100));
+            }
+        } else if (id == NotificationCenter.wallpapersDidLoaded) {
+            AndroidUtilities.RunOnUIThread(new Runnable() {
+                @Override
+                public void run() {
+                    wallPapers = (ArrayList<TLRPC.WallPaper>)args[0];
+                    wallpappersByIds.clear();
+                    for (TLRPC.WallPaper wallPaper : wallPapers) {
+                        wallpappersByIds.put(wallPaper.id, wallPaper);
+                    }
+                    if (listAdapter != null) {
+                        listAdapter.notifyDataSetChanged();
+                    }
+                    if (!wallPapers.isEmpty() && backgroundImage != null) {
+                        processSelectedBackground();
+                    }
+                    loadWallpapers();
+                }
+            });
+        }
+    }
+
+    @Override
+    public void onConfigurationChanged(Configuration newConfig) {
+        super.onConfigurationChanged(newConfig);
+        fixLayout();
+    }
+
+    private void loadWallpapers() {
+        TLRPC.TL_account_getWallPapers req = new TLRPC.TL_account_getWallPapers();
+        long reqId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+            @Override
+            public void run(final TLObject response, TLRPC.TL_error error) {
+                if (error != null) {
+                    return;
+                }
+                AndroidUtilities.RunOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        wallPapers.clear();
+                        TLRPC.Vector res = (TLRPC.Vector)response;
+                        wallpappersByIds.clear();
+                        for (Object obj : res.objects) {
+                            wallPapers.add((TLRPC.WallPaper)obj);
+                            wallpappersByIds.put(((TLRPC.WallPaper)obj).id, (TLRPC.WallPaper)obj);
+                        }
+                        listAdapter.notifyDataSetChanged();
+                        if (backgroundImage != null) {
+                            processSelectedBackground();
+                        }
+                        MessagesStorage.getInstance().putWallpapers(wallPapers);
+                    }
+                });
+            }
+        });
+        ConnectionsManager.getInstance().bindRequestToGuid(reqId, classGuid);
+    }
+
+    private void fixLayout() {
+        ViewTreeObserver obs = fragmentView.getViewTreeObserver();
+        obs.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+            @Override
+            public boolean onPreDraw() {
+                fragmentView.getViewTreeObserver().removeOnPreDrawListener(this);
+                if (listAdapter != null) {
+                    listAdapter.notifyDataSetChanged();
+                }
+                if (listView != null) {
+                    listView.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            listView.scrollTo(0);
+                        }
+                    });
+                }
+                return false;
+            }
+        });
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+        processSelectedBackground();
+        fixLayout();
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return true;
+        }
+
+        @Override
+        public int getCount() {
+            return 1 + wallPapers.size();
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return true;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            if (type == 0) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_wallpapers_my_row, viewGroup, false);
+                }
+                View parentView = view.findViewById(R.id.parent);
+                ImageView imageView = (ImageView)view.findViewById(R.id.image);
+                View selection = view.findViewById(R.id.selection);
+                if (i == 0) {
+                    if (selectedBackground == -1 || selectedColor != 0 || selectedBackground == 1000001) {
+                        imageView.setBackgroundColor(0x5A475866);
+                    } else {
+                        imageView.setBackgroundColor(0x5A000000);
+                    }
+                    imageView.setImageResource(R.drawable.ic_gallery_background);
+                    if (selectedBackground == -1) {
+                        selection.setVisibility(View.VISIBLE);
+                    } else {
+                        selection.setVisibility(View.INVISIBLE);
+                    }
+                } else {
+                    imageView.setImageBitmap(null);
+                    TLRPC.WallPaper wallPaper = wallPapers.get(i - 1);
+                    imageView.setBackgroundColor(0xff000000 | wallPaper.bg_color);
+                    if (wallPaper.id == selectedBackground) {
+                        selection.setVisibility(View.VISIBLE);
+                    } else {
+                        selection.setVisibility(View.INVISIBLE);
+                    }
+                }
+            } else if (type == 1) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_wallpapers_other_row, viewGroup, false);
+                }
+                BackupImageView image = (BackupImageView)view.findViewById(R.id.image);
+                View selection = view.findViewById(R.id.selection);
+                TLRPC.WallPaper wallPaper = wallPapers.get(i - 1);
+                TLRPC.PhotoSize size = FileLoader.getClosestPhotoSizeWithSize(wallPaper.sizes, AndroidUtilities.dp(100));
+                if (size != null && size.location != null) {
+                    image.setImage(size.location, "100_100", 0);
+                }
+                if (wallPaper.id == selectedBackground) {
+                    selection.setVisibility(View.VISIBLE);
+                } else {
+                    selection.setVisibility(View.INVISIBLE);
+                }
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            if (i == 0) {
+                return 0;
+            }
+            TLRPC.WallPaper wallPaper = wallPapers.get(i - 1);
+            if (wallPaper instanceof TLRPC.TL_wallPaperSolid) {
+                return 0;
+            }
+            return 1;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 2;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/UserProfileActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/UserProfileActivity.java
new file mode 100644
index 000000000..fc9378f98
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/UserProfileActivity.java
@@ -0,0 +1,719 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.graphics.Typeface;
+import android.net.Uri;
+import android.os.Bundle;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.ImageButton;
+import android.widget.ListView;
+import android.widget.TextView;
+
+import org.tomato.PhoneFormat.PhoneFormat;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.ContactsController;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MessageObject;
+import org.tomato.android.MessagesController;
+import org.tomato.android.NotificationCenter;
+import org.tomato.android.SendMessagesHelper;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.ui.Adapters.BaseFragmentAdapter;
+import org.tomato.ui.Views.ActionBar.ActionBarLayer;
+import org.tomato.ui.Views.ActionBar.ActionBarMenu;
+import org.tomato.ui.Views.ActionBar.ActionBarMenuItem;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+import org.tomato.ui.Views.BackupImageView;
+import org.tomato.ui.Views.IdenticonView;
+import org.tomato.ui.Views.SettingsSectionLayout;
+
+import java.util.ArrayList;
+
+public class UserProfileActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, MessagesActivity.MessagesActivityDelegate, PhotoViewer.PhotoViewerProvider {
+    private ListView listView;
+    private ListAdapter listAdapter;
+    private int user_id;
+    private int totalMediaCount = -1;
+    private boolean creatingChat = false;
+    private long dialog_id;
+    private TLRPC.EncryptedChat currentEncryptedChat;
+    private boolean userBlocked = false;
+
+    private final static int add_contact = 1;
+    private final static int block_contact = 2;
+    private final static int share_contact = 3;
+    private final static int edit_contact = 4;
+    private final static int delete_contact = 5;
+
+    private int avatarRow;
+    private int phoneSectionRow;
+    private int phoneRow;
+    private int usernameRow;
+    private int settingsSectionRow;
+    private int settingsTimerRow;
+    private int settingsKeyRow;
+    private int settingsNotificationsRow;
+    private int sharedMediaSectionRow;
+    private int sharedMediaRow;
+    private int rowCount = 0;
+
+    public UserProfileActivity(Bundle args) {
+        super(args);
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        user_id = arguments.getInt("user_id", 0);
+        dialog_id = arguments.getLong("dialog_id", 0);
+        if (dialog_id != 0) {
+            currentEncryptedChat = MessagesController.getInstance().getEncryptedChat((int)(dialog_id >> 32));
+        }
+        updateRowsIds();
+        if (MessagesController.getInstance().getUser(user_id) == null) {
+            return false;
+        }
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.contactsDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.mediaCountDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatCreated);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.encryptedChatUpdated);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.blockedUsersDidLoaded);
+        userBlocked = MessagesController.getInstance().blockedUsers.contains(user_id);
+
+        MessagesController.getInstance().loadFullUser(MessagesController.getInstance().getUser(user_id), classGuid);
+
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.contactsDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.mediaCountDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatCreated);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.encryptedChatUpdated);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.blockedUsersDidLoaded);
+
+        MessagesController.getInstance().cancelLoadFullUser(user_id);
+    }
+
+    private void updateRowsIds() {
+        rowCount = 0;
+        avatarRow = rowCount++;
+        phoneSectionRow = rowCount++;
+        phoneRow = rowCount++;
+        TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+        if (user != null && user.username != null && user.username.length() > 0) {
+            usernameRow = rowCount++;
+        } else {
+            usernameRow = -1;
+        }
+        settingsSectionRow = rowCount++;
+        if (currentEncryptedChat instanceof TLRPC.TL_encryptedChat) {
+            settingsTimerRow = rowCount++;
+            settingsKeyRow = rowCount++;
+        } else {
+            settingsTimerRow = -1;
+            settingsKeyRow = -1;
+        }
+        settingsNotificationsRow = rowCount++;
+        sharedMediaSectionRow = rowCount++;
+        sharedMediaRow = rowCount++;
+    }
+
+    @Override
+    public View createView(LayoutInflater inflater, ViewGroup container) {
+        if (fragmentView == null) {
+            actionBarLayer.setDisplayHomeAsUpEnabled(true, R.drawable.ic_ab_back);
+            actionBarLayer.setBackOverlay(R.layout.updating_state_layout);
+            if (dialog_id != 0) {
+                actionBarLayer.setTitle(LocaleController.getString("SecretTitle", R.string.SecretTitle));
+                actionBarLayer.setTitleIcon(R.drawable.ic_lock_white, AndroidUtilities.dp(4));
+            } else {
+                actionBarLayer.setTitle(LocaleController.getString("ContactInfo", R.string.ContactInfo));
+            }
+            actionBarLayer.setActionBarMenuOnItemClick(new ActionBarLayer.ActionBarMenuOnItemClick() {
+                @Override
+                public void onItemClick(final int id) {
+                    if (id == -1) {
+                        finishFragment();
+                    } else if (id == block_contact) {
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        if (!userBlocked) {
+                            builder.setMessage(LocaleController.getString("AreYouSureBlockContact", R.string.AreYouSureBlockContact));
+                        } else {
+                            builder.setMessage(LocaleController.getString("AreYouSureUnblockContact", R.string.AreYouSureUnblockContact));
+                        }
+                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                if (!userBlocked) {
+                                    MessagesController.getInstance().blockUser(user_id);
+                                } else {
+                                    MessagesController.getInstance().unblockUser(user_id);
+                                }
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
+                    } else if (id == add_contact) {
+                        TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+                        Bundle args = new Bundle();
+                        args.putInt("user_id", user.id);
+                        presentFragment(new ContactAddActivity(args));
+                    } else if (id == share_contact) {
+                        Bundle args = new Bundle();
+                        args.putBoolean("onlySelect", true);
+                        args.putBoolean("serverOnly", true);
+                        MessagesActivity fragment = new MessagesActivity(args);
+                        fragment.setDelegate(UserProfileActivity.this);
+                        presentFragment(fragment);
+                    } else if (id == edit_contact) {
+                        Bundle args = new Bundle();
+                        args.putInt("user_id", user_id);
+                        presentFragment(new ContactAddActivity(args));
+                    } else if (id == delete_contact) {
+                        final TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+                        if (user == null || getParentActivity() == null) {
+                            return;
+                        }
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                        builder.setMessage(LocaleController.getString("AreYouSureDeleteContact", R.string.AreYouSureDeleteContact));
+                        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialogInterface, int i) {
+                                ArrayList<TLRPC.User> arrayList = new ArrayList<TLRPC.User>();
+                                arrayList.add(user);
+                                ContactsController.getInstance().deleteContact(arrayList);
+                            }
+                        });
+                        builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        showAlertDialog(builder);
+                    }
+                }
+            });
+
+            createActionBarMenu();
+
+            fragmentView = inflater.inflate(R.layout.user_profile_layout, container, false);
+            listAdapter = new ListAdapter(getParentActivity());
+
+            TextView textView = (TextView)fragmentView.findViewById(R.id.start_secret_button_text);
+            textView.setText(LocaleController.getString("StartEncryptedChat", R.string.StartEncryptedChat));
+
+            View startSecretButton = fragmentView.findViewById(R.id.start_secret_button);
+            startSecretButton.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    if (getParentActivity() == null) {
+                        return;
+                    }
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                    builder.setMessage(LocaleController.getString("AreYouSureSecretChat", R.string.AreYouSureSecretChat));
+                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialogInterface, int i) {
+                            creatingChat = true;
+                            MessagesController.getInstance().startSecretChat(getParentActivity(), MessagesController.getInstance().getUser(user_id));
+                        }
+                    });
+                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                    showAlertDialog(builder);
+                }
+            });
+            if (dialog_id == 0) {
+                startSecretButton.setVisibility(View.VISIBLE);
+            } else {
+                startSecretButton.setVisibility(View.GONE);
+            }
+
+            listView = (ListView)fragmentView.findViewById(R.id.listView);
+            listView.setAdapter(listAdapter);
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+                @Override
+                public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+                    if (i == sharedMediaRow) {
+                        Bundle args = new Bundle();
+                        if (dialog_id != 0) {
+                            args.putLong("dialog_id", dialog_id);
+                        } else {
+                            args.putLong("dialog_id", user_id);
+                        }
+                        presentFragment(new MediaActivity(args));
+                    } else if (i == settingsKeyRow) {
+                        Bundle args = new Bundle();
+                        args.putInt("chat_id", (int)(dialog_id >> 32));
+                        presentFragment(new IdenticonActivity(args));
+                    } else if (i == settingsTimerRow) {
+                        if (getParentActivity() == null) {
+                            return;
+                        }
+                        showAlertDialog(AndroidUtilities.buildTTLAlert(getParentActivity(), currentEncryptedChat));
+                    } else if (i == settingsNotificationsRow) {
+                        Bundle args = new Bundle();
+                        args.putLong("dialog_id", dialog_id == 0 ? user_id : dialog_id);
+                        presentFragment(new ProfileNotificationsActivity(args));
+                    }
+                }
+            });
+            if (dialog_id != 0) {
+                MessagesController.getInstance().getMediaCount(dialog_id, classGuid, true);
+            } else {
+                MessagesController.getInstance().getMediaCount(user_id, classGuid, true);
+            }
+        } else {
+            ViewGroup parent = (ViewGroup)fragmentView.getParent();
+            if (parent != null) {
+                parent.removeView(fragmentView);
+            }
+        }
+        return fragmentView;
+    }
+
+    public void didReceivedNotification(int id, final Object... args) {
+        if (id == NotificationCenter.updateInterfaces) {
+            int mask = (Integer)args[0];
+            if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0) {
+                updateRowsIds();
+                if (listView != null) {
+                    listView.invalidateViews();
+                }
+            }
+        } else if (id == NotificationCenter.contactsDidLoaded) {
+            createActionBarMenu();
+        } else if (id == NotificationCenter.mediaCountDidLoaded) {
+            long uid = (Long)args[0];
+            if (uid > 0 && user_id == uid && dialog_id == 0 || dialog_id != 0 && dialog_id == uid) {
+                totalMediaCount = (Integer)args[1];
+                if (listView != null) {
+                    listView.invalidateViews();
+                }
+            }
+        } else if (id == NotificationCenter.encryptedChatCreated) {
+            if (creatingChat) {
+                AndroidUtilities.RunOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+                        TLRPC.EncryptedChat encryptedChat = (TLRPC.EncryptedChat)args[0];
+                        Bundle args2 = new Bundle();
+                        args2.putInt("enc_id", encryptedChat.id);
+                        presentFragment(new ChatActivity(args2), true);
+                    }
+                });
+            }
+        } else if (id == NotificationCenter.encryptedChatUpdated) {
+            TLRPC.EncryptedChat chat = (TLRPC.EncryptedChat)args[0];
+            if (currentEncryptedChat != null && chat.id == currentEncryptedChat.id) {
+                currentEncryptedChat = chat;
+                updateRowsIds();
+                if (listAdapter != null) {
+                    listAdapter.notifyDataSetChanged();
+                }
+            }
+        } else if (id == NotificationCenter.blockedUsersDidLoaded) {
+            boolean oldValue = userBlocked;
+            userBlocked = MessagesController.getInstance().blockedUsers.contains(user_id);
+            if (oldValue != userBlocked) {
+                createActionBarMenu();
+            }
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+    }
+
+    @Override
+    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+        if (fileLocation == null) {
+            return null;
+        }
+        TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+        if (user != null && user.photo != null && user.photo.photo_big != null) {
+            TLRPC.FileLocation photoBig = user.photo.photo_big;
+            if (photoBig.local_id == fileLocation.local_id && photoBig.volume_id == fileLocation.volume_id && photoBig.dc_id == fileLocation.dc_id) {
+                int count = listView.getChildCount();
+                for (int a = 0; a < count; a++) {
+                    View view = listView.getChildAt(a);
+                    BackupImageView avatarImage = (BackupImageView)view.findViewById(R.id.settings_avatar_image);
+                    if (avatarImage != null) {
+                        int coords[] = new int[2];
+                        avatarImage.getLocationInWindow(coords);
+                        PhotoViewer.PlaceProviderObject object = new PhotoViewer.PlaceProviderObject();
+                        object.viewX = coords[0];
+                        object.viewY = coords[1] - AndroidUtilities.statusBarHeight;
+                        object.parentView = listView;
+                        object.imageReceiver = avatarImage.imageReceiver;
+                        object.user_id = user_id;
+                        object.thumb = object.imageReceiver.getBitmap();
+                        object.size = -1;
+                        return object;
+                    }
+                }
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) { }
+
+    @Override
+    public void willHidePhotoViewer() { }
+
+    @Override
+    public boolean isPhotoChecked(int index) { return false; }
+
+    @Override
+    public void setPhotoChecked(int index) { }
+
+    @Override
+    public void cancelButtonPressed() { }
+
+    @Override
+    public void sendButtonPressed(int index) { }
+
+    @Override
+    public int getSelectedCount() { return 0; }
+
+    private void createActionBarMenu() {
+        ActionBarMenu menu = actionBarLayer.createMenu();
+        menu.clearItems();
+
+        if (ContactsController.getInstance().contactsDict.get(user_id) == null) {
+            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+            if (user == null) {
+                return;
+            }
+            ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_other);
+            if (user.phone != null && user.phone.length() != 0) {
+                item.addSubItem(add_contact, LocaleController.getString("AddContact", R.string.AddContact), 0);
+                item.addSubItem(share_contact, LocaleController.getString("ShareContact", R.string.ShareContact), 0);
+                item.addSubItem(block_contact, !userBlocked ? LocaleController.getString("BlockContact", R.string.BlockContact) : LocaleController.getString("Unblock", R.string.Unblock), 0);
+            } else {
+                item.addSubItem(block_contact, !userBlocked ? LocaleController.getString("BlockContact", R.string.BlockContact) : LocaleController.getString("Unblock", R.string.Unblock), 0);
+            }
+        } else {
+            ActionBarMenuItem item = menu.addItem(0, R.drawable.ic_ab_other);
+            item.addSubItem(share_contact, LocaleController.getString("ShareContact", R.string.ShareContact), 0);
+            item.addSubItem(block_contact, !userBlocked ? LocaleController.getString("BlockContact", R.string.BlockContact) : LocaleController.getString("Unblock", R.string.Unblock), 0);
+            item.addSubItem(edit_contact, LocaleController.getString("EditContact", R.string.EditContact), 0);
+            item.addSubItem(delete_contact, LocaleController.getString("DeleteContact", R.string.DeleteContact), 0);
+        }
+    }
+
+    @Override
+    protected void onDialogDismiss() {
+        if (listView != null) {
+            listView.invalidateViews();
+        }
+    }
+
+    @Override
+    public void didSelectDialog(MessagesActivity messageFragment, long dialog_id, boolean param) {
+        if (dialog_id != 0) {
+            Bundle args = new Bundle();
+            args.putBoolean("scrollToTopOnResume", true);
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+            int lower_part = (int)dialog_id;
+            if (lower_part != 0) {
+                if (lower_part > 0) {
+                    args.putInt("user_id", lower_part);
+                } else if (lower_part < 0) {
+                    args.putInt("chat_id", -lower_part);
+                }
+            } else {
+                args.putInt("enc_id", (int)(dialog_id >> 32));
+            }
+            presentFragment(new ChatActivity(args), true);
+            removeSelfFromStack();
+            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+            SendMessagesHelper.getInstance().sendMessage(user, dialog_id);
+        }
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return i == phoneRow || i == settingsTimerRow || i == settingsKeyRow || i == settingsNotificationsRow || i == sharedMediaRow;
+        }
+
+        @Override
+        public int getCount() {
+            return rowCount;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            if (type == 0) {
+                BackupImageView avatarImage;
+                TextView onlineText;
+                TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.user_profile_avatar_layout, viewGroup, false);
+
+                    onlineText = (TextView)view.findViewById(R.id.settings_online);
+                    avatarImage = (BackupImageView)view.findViewById(R.id.settings_avatar_image);
+                    avatarImage.processDetach = false;
+                    avatarImage.setOnClickListener(new View.OnClickListener() {
+                        @Override
+                        public void onClick(View view) {
+                            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+                            if (user.photo != null && user.photo.photo_big != null) {
+                                PhotoViewer.getInstance().setParentActivity(getParentActivity());
+                                PhotoViewer.getInstance().openPhoto(user.photo.photo_big, UserProfileActivity.this);
+                            }
+                        }
+                    });
+                } else {
+                    avatarImage = (BackupImageView)view.findViewById(R.id.settings_avatar_image);
+                    onlineText = (TextView)view.findViewById(R.id.settings_online);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_name);
+                Typeface typeface = AndroidUtilities.getTypeface("fonts/rmedium.ttf");
+                textView.setTypeface(typeface);
+
+                textView.setText(ContactsController.formatName(user.first_name, user.last_name));
+                onlineText.setText(LocaleController.formatUserStatus(user));
+
+                TLRPC.FileLocation photo = null;
+                TLRPC.FileLocation photoBig = null;
+                if (user.photo != null) {
+                    photo = user.photo.photo_small;
+                    photoBig = user.photo.photo_big;
+                }
+                avatarImage.setImage(photo, "50_50", AndroidUtilities.getUserAvatarForId(user.id));
+                avatarImage.imageReceiver.setVisible(!PhotoViewer.getInstance().isShowingImage(photoBig), false);
+                return view;
+            } else if (type == 1) {
+                if (view == null) {
+                    view = new SettingsSectionLayout(mContext);
+                }
+                if (i == phoneSectionRow) {
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("Info", R.string.Info));
+                } else if (i == settingsSectionRow) {
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("SETTINGS", R.string.SETTINGS));
+                } else if (i == sharedMediaSectionRow) {
+                    ((SettingsSectionLayout) view).setText(LocaleController.getString("SHAREDMEDIA", R.string.SHAREDMEDIA));
+                }
+            } else if (type == 2) {
+                final TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.user_profile_phone_layout, viewGroup, false);
+                    view.setOnClickListener(new View.OnClickListener() {
+                        @Override
+                        public void onClick(View view) {
+                            if (user.phone == null || user.phone.length() == 0 || getParentActivity() == null) {
+                                return;
+                            }
+
+                            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+
+                            builder.setItems(new CharSequence[] {LocaleController.getString("Copy", R.string.Copy)}, new DialogInterface.OnClickListener() {
+                                @Override
+                                public void onClick(DialogInterface dialogInterface, int i) {
+                                    if (i == 0) {
+                                        int sdk = android.os.Build.VERSION.SDK_INT;
+                                        if(sdk < android.os.Build.VERSION_CODES.HONEYCOMB) {
+                                            android.text.ClipboardManager clipboard = (android.text.ClipboardManager)ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                                            clipboard.setText(user.phone);
+                                        } else {
+                                            android.content.ClipboardManager clipboard = (android.content.ClipboardManager)ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                                            android.content.ClipData clip = android.content.ClipData.newPlainText("label", user.phone);
+                                            clipboard.setPrimaryClip(clip);
+                                        }
+                                    }
+                                }
+                            });
+                            showAlertDialog(builder);
+                        }
+                    });
+                    ImageButton button = (ImageButton)view.findViewById(R.id.settings_edit_name);
+                    button.setOnClickListener(new View.OnClickListener() {
+                        @Override
+                        public void onClick(View view) {
+                            TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+                            if (user == null || user instanceof TLRPC.TL_userEmpty) {
+                                return;
+                            }
+                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.closeChats);
+                            Bundle args = new Bundle();
+                            args.putInt("user_id", user_id);
+                            presentFragment(new ChatActivity(args), true);
+                        }
+                    });
+                    button = (ImageButton)view.findViewById(R.id.settings_call_phone);
+                    button.setOnClickListener(new View.OnClickListener() {
+                        @Override
+                        public void onClick(View view) {
+                            try {
+                                Intent intent = new Intent(Intent.ACTION_DIAL, Uri.parse("tel:+" + user.phone));
+                                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                                getParentActivity().startActivity(intent);
+                            } catch (Exception e) {
+                                FileLog.e("tmessages", e);
+                            }
+                        }
+                    });
+                }
+                ImageButton button = (ImageButton)view.findViewById(R.id.settings_call_phone);
+                button.setVisibility(user.phone == null || user.phone.length() == 0 ? View.GONE : View.VISIBLE);
+
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
+                View divider = view.findViewById(R.id.settings_row_divider);
+                if (i == phoneRow) {
+                    if (user.phone != null && user.phone.length() != 0) {
+                        textView.setText(PhoneFormat.getInstance().format("+" + user.phone));
+                    } else {
+                        textView.setText(LocaleController.getString("NumberUnknown", R.string.NumberUnknown));
+                    }
+                    divider.setVisibility(usernameRow != -1 ? View.VISIBLE : View.INVISIBLE);
+                    detailTextView.setText(LocaleController.getString("PhoneMobile", R.string.PhoneMobile));
+                }
+            } else if (type == 3) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.user_profile_leftright_row_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                TextView detailTextView = (TextView)view.findViewById(R.id.settings_row_text_detail);
+
+                View divider = view.findViewById(R.id.settings_row_divider);
+                if (i == sharedMediaRow) {
+                    textView.setText(LocaleController.getString("SharedMedia", R.string.SharedMedia));
+                    if (totalMediaCount == -1) {
+                        detailTextView.setText(LocaleController.getString("Loading", R.string.Loading));
+                    } else {
+                        detailTextView.setText(String.format("%d", totalMediaCount));
+                    }
+                    divider.setVisibility(View.INVISIBLE);
+                } else if (i == settingsTimerRow) {
+                    TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat((int)(dialog_id >> 32));
+                    textView.setText(LocaleController.getString("MessageLifetime", R.string.MessageLifetime));
+                    divider.setVisibility(View.VISIBLE);
+                    if (encryptedChat.ttl == 0) {
+                        detailTextView.setText(LocaleController.getString("ShortMessageLifetimeForever", R.string.ShortMessageLifetimeForever));
+                    } else {
+                        detailTextView.setText(AndroidUtilities.formatTTLString(encryptedChat.ttl));
+                    }
+                } else if (i == usernameRow) {
+                    TLRPC.User user = MessagesController.getInstance().getUser(user_id);
+                    textView.setText(LocaleController.getString("Username", R.string.Username));
+                    if (user != null && user.username != null && user.username.length() != 0) {
+                        detailTextView.setText("@" + user.username);
+                    } else {
+                        detailTextView.setText("-");
+                    }
+                    divider.setVisibility(View.INVISIBLE);
+                }
+            } else if (type == 4) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.user_profile_identicon_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                View divider = view.findViewById(R.id.settings_row_divider);
+                divider.setVisibility(View.VISIBLE);
+                IdenticonView identiconView = (IdenticonView)view.findViewById(R.id.identicon_view);
+                TLRPC.EncryptedChat encryptedChat = MessagesController.getInstance().getEncryptedChat((int)(dialog_id >> 32));
+                identiconView.setBytes(encryptedChat.auth_key);
+                textView.setText(LocaleController.getString("EncryptionKey", R.string.EncryptionKey));
+            } else if (type == 5) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_row_button_layout, viewGroup, false);
+                }
+                TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                View divider = view.findViewById(R.id.settings_row_divider);
+                if (i == settingsNotificationsRow) {
+                    textView.setText(LocaleController.getString("NotificationsAndSounds", R.string.NotificationsAndSounds));
+                    divider.setVisibility(View.INVISIBLE);
+                }
+            }
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            if (i == avatarRow) {
+                return 0;
+            } else if (i == phoneSectionRow || i == settingsSectionRow || i == sharedMediaSectionRow) {
+                return 1;
+            } else if (i == phoneRow) {
+                return 2;
+            } else if (i == sharedMediaRow || i == settingsTimerRow || i == usernameRow) {
+                return 3;
+            } else if (i == settingsKeyRow) {
+                return 4;
+            } else if (i == settingsNotificationsRow) {
+                return 5;
+            }
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 6;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java b/TMessagesProj/src/main/java/org/tomato/ui/VideoEditorActivity.java
similarity index 98%
rename from TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
rename to TMessagesProj/src/main/java/org/tomato/ui/VideoEditorActivity.java
index 18ed3fd96..dcc69d1ee 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/VideoEditorActivity.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/VideoEditorActivity.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.ui;
+package org.tomato.ui;
 
 import android.annotation.TargetApi;
 import android.app.Activity;
@@ -40,17 +40,17 @@
 import com.googlecode.mp4parser.util.Matrix;
 import com.googlecode.mp4parser.util.Path;
 
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.android.MediaController;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
-import org.telegram.messenger.Utilities;
-import org.telegram.ui.Views.ActionBar.ActionBarLayer;
-import org.telegram.ui.Views.ActionBar.ActionBarMenu;
-import org.telegram.ui.Views.ActionBar.BaseFragment;
-import org.telegram.ui.Views.VideoSeekBarView;
-import org.telegram.ui.Views.VideoTimelineView;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MediaController;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.Utilities;
+import org.tomato.ui.Views.ActionBar.ActionBarLayer;
+import org.tomato.ui.Views.ActionBar.ActionBarMenu;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+import org.tomato.ui.Views.VideoSeekBarView;
+import org.tomato.ui.Views.VideoTimelineView;
 
 import java.io.File;
 import java.util.List;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBar.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/ActionBar/ActionBar.java
similarity index 94%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBar.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/ActionBar/ActionBar.java
index d616b9dde..1524094d9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBar.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/ActionBar/ActionBar.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.ui.Views.ActionBar;
+package org.tomato.ui.Views.ActionBar;
 
 import android.animation.Animator;
 import android.animation.ObjectAnimator;
@@ -19,8 +19,9 @@
 import android.view.ViewGroup;
 import android.widget.FrameLayout;
 
-import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.R;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.messenger.R;
+import org.tomato.ui.ApplicationLoader;
 
 import java.util.ArrayList;
 
@@ -33,17 +34,17 @@
     private boolean isBackOverlayVisible;
 
     public ActionBar(Context context) {
-        super(context);
+        super(context, null, ApplicationLoader.actionBarStyle);
         createComponents();
     }
 
     public ActionBar(Context context, AttributeSet attrs) {
-        super(context, attrs);
+        super(context, attrs, ApplicationLoader.actionBarStyle);
         createComponents();
     }
 
     public ActionBar(Context context, AttributeSet attrs, int defStyleAttr) {
-        super(context, attrs, defStyleAttr);
+        super(context, attrs, ApplicationLoader.actionBarStyle);
         createComponents();
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayer.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/ActionBar/ActionBarLayer.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayer.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/ActionBar/ActionBarLayer.java
index 1dfef5f50..c7ae00b0b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayer.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/ActionBar/ActionBarLayer.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.ui.Views.ActionBar;
+package org.tomato.ui.Views.ActionBar;
 
 import android.content.Context;
 import android.content.res.Configuration;
@@ -21,8 +21,8 @@
 import android.widget.ImageView;
 import android.widget.TextView;
 
-import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.R;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.messenger.R;
 
 public class ActionBarLayer extends FrameLayout {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayout.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/ActionBar/ActionBarLayout.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayout.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/ActionBar/ActionBarLayout.java
index e4ce88d0c..72fc9519a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarLayout.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/ActionBar/ActionBarLayout.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.ui.Views.ActionBar;
+package org.tomato.ui.Views.ActionBar;
 
 import android.animation.Animator;
 import android.animation.AnimatorSet;
@@ -30,10 +30,10 @@
 import android.view.animation.AnimationUtils;
 import android.widget.FrameLayout;
 
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.NotificationCenter;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.NotificationCenter;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
 
 import java.util.ArrayList;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarMenu.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/ActionBar/ActionBarMenu.java
similarity index 98%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarMenu.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/ActionBar/ActionBarMenu.java
index ae1288bdb..c2e9be94f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarMenu.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/ActionBar/ActionBarMenu.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.ui.Views.ActionBar;
+package org.tomato.ui.Views.ActionBar;
 
 import android.content.Context;
 import android.util.AttributeSet;
@@ -16,7 +16,7 @@
 import android.widget.ImageView;
 import android.widget.LinearLayout;
 
-import org.telegram.android.AndroidUtilities;
+import org.tomato.android.AndroidUtilities;
 
 public class ActionBarMenu extends LinearLayout {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarMenuItem.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/ActionBar/ActionBarMenuItem.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarMenuItem.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/ActionBar/ActionBarMenuItem.java
index c3a3937d8..b0b846fc8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarMenuItem.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/ActionBar/ActionBarMenuItem.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.ui.Views.ActionBar;
+package org.tomato.ui.Views.ActionBar;
 
 import android.content.Context;
 import android.graphics.Rect;
@@ -30,9 +30,9 @@
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.R;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.LocaleController;
+import org.tomato.messenger.R;
 
 import java.lang.reflect.Field;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarPopupWindow.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/ActionBar/ActionBarPopupWindow.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarPopupWindow.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/ActionBar/ActionBarPopupWindow.java
index 698ab7c39..b1bafcbb6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/ActionBarPopupWindow.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/ActionBar/ActionBarPopupWindow.java
@@ -8,7 +8,7 @@
 
 //Thanks to https://github.com/JakeWharton/ActionBarSherlock/
 
-package org.telegram.ui.Views.ActionBar;
+package org.tomato.ui.Views.ActionBar;
 
 import android.content.Context;
 import android.util.AttributeSet;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/BaseFragment.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/ActionBar/BaseFragment.java
similarity index 95%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/BaseFragment.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/ActionBar/BaseFragment.java
index 51e4b430b..cac30dcde 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ActionBar/BaseFragment.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/ActionBar/BaseFragment.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.ui.Views.ActionBar;
+package org.tomato.ui.Views.ActionBar;
 
 import android.app.Activity;
 import android.app.AlertDialog;
@@ -17,9 +17,10 @@
 import android.view.View;
 import android.view.ViewGroup;
 
-import org.telegram.messenger.ConnectionsManager;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.ui.ApplicationLoader;
 
 public class BaseFragment {
     private boolean isFinished = false;
@@ -68,7 +69,7 @@ public void setParentLayout(ActionBarLayout layout) {
                 }
                 actionBarLayer = parentLayout.getInternalActionBar().createLayer();
                 actionBarLayer.parentFragment = this;
-                actionBarLayer.setBackgroundResource(R.color.header);
+                actionBarLayer.setBackgroundResource(ApplicationLoader.actionbarColor);
                 actionBarLayer.setItemsBackground(R.drawable.bar_selector);
             }
         }
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/Views/AvatarUpdater.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/AvatarUpdater.java
new file mode 100644
index 000000000..70e440fb8
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/AvatarUpdater.java
@@ -0,0 +1,183 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui.Views;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.graphics.Bitmap;
+import android.net.Uri;
+import android.os.Bundle;
+import android.provider.MediaStore;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.ImageLoader;
+import org.tomato.android.NotificationCenter;
+import org.tomato.messenger.FileLoader;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.TLRPC;
+import org.tomato.messenger.UserConfig;
+import org.tomato.messenger.Utilities;
+import org.tomato.ui.LaunchActivity;
+import org.tomato.ui.PhotoCropActivity;
+import org.tomato.ui.Views.ActionBar.BaseFragment;
+
+import java.io.File;
+
+public class AvatarUpdater implements NotificationCenter.NotificationCenterDelegate, PhotoCropActivity.PhotoCropActivityDelegate {
+    public String currentPicturePath;
+    private TLRPC.PhotoSize smallPhoto;
+    private TLRPC.PhotoSize bigPhoto;
+    public String uploadingAvatar = null;
+    File picturePath = null;
+    public BaseFragment parentFragment = null;
+    public AvatarUpdaterDelegate delegate;
+    private boolean clearAfterUpdate = false;
+    public boolean returnOnly = false;
+
+    public static abstract interface AvatarUpdaterDelegate {
+        public abstract void didUploadedPhoto(TLRPC.InputFile file, TLRPC.PhotoSize small, TLRPC.PhotoSize big);
+    }
+
+    public void clear() {
+        if (uploadingAvatar != null) {
+            clearAfterUpdate = true;
+        } else {
+            parentFragment = null;
+            delegate = null;
+        }
+    }
+
+    public void openCamera() {
+        try {
+            Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
+            File image = Utilities.generatePicturePath();
+            if (image != null) {
+                takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(image));
+                currentPicturePath = image.getAbsolutePath();
+            }
+            parentFragment.startActivityForResult(takePictureIntent, 13);
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+    }
+
+    public void openGallery() {
+        try {
+            Intent photoPickerIntent = new Intent(Intent.ACTION_GET_CONTENT);
+            photoPickerIntent.setType("image/*");
+            parentFragment.startActivityForResult(photoPickerIntent, 14);
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+    }
+
+    private void startCrop(String path, Uri uri) {
+        try {
+            LaunchActivity activity = (LaunchActivity)parentFragment.getParentActivity();
+            if (activity == null) {
+                return;
+            }
+            Bundle args = new Bundle();
+            if (path != null) {
+                args.putString("photoPath", path);
+            } else if (uri != null) {
+                args.putParcelable("photoUri", uri);
+            }
+            PhotoCropActivity photoCropActivity = new PhotoCropActivity(args);
+            photoCropActivity.setDelegate(this);
+            activity.presentFragment(photoCropActivity);
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+            Bitmap bitmap = ImageLoader.loadBitmap(path, uri, 800, 800);
+            processBitmap(bitmap);
+        }
+    }
+
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        if (resultCode == Activity.RESULT_OK) {
+            if (requestCode == 13) {
+                Utilities.addMediaToGallery(currentPicturePath);
+                startCrop(currentPicturePath, null);
+
+                currentPicturePath = null;
+            } else if (requestCode == 14) {
+                if (data == null || data.getData() == null) {
+                    return;
+                }
+                startCrop(null, data.getData());
+            }
+        }
+    }
+
+    private void processBitmap(Bitmap bitmap) {
+        if (bitmap == null) {
+            return;
+        }
+        smallPhoto = ImageLoader.scaleAndSaveImage(bitmap, 100, 100, 80, false);
+        bigPhoto = ImageLoader.scaleAndSaveImage(bitmap, 800, 800, 80, false);
+        if (bigPhoto != null && smallPhoto != null) {
+            if (returnOnly) {
+                if (delegate != null) {
+                    delegate.didUploadedPhoto(null, smallPhoto, bigPhoto);
+                }
+            } else {
+                UserConfig.saveConfig(false);
+                uploadingAvatar = FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE) + "/" + bigPhoto.location.volume_id + "_" + bigPhoto.location.local_id + ".jpg";
+                NotificationCenter.getInstance().addObserver(AvatarUpdater.this, NotificationCenter.FileDidUpload);
+                NotificationCenter.getInstance().addObserver(AvatarUpdater.this, NotificationCenter.FileDidFailUpload);
+                FileLoader.getInstance().uploadFile(uploadingAvatar, false, true);
+            }
+        }
+    }
+
+    @Override
+    public void didFinishCrop(Bitmap bitmap) {
+        processBitmap(bitmap);
+    }
+
+    @Override
+    public void didReceivedNotification(int id, final Object... args) {
+        if (id == NotificationCenter.FileDidUpload) {
+            String location = (String)args[0];
+            if (uploadingAvatar != null && location.equals(uploadingAvatar)) {
+                AndroidUtilities.RunOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        NotificationCenter.getInstance().removeObserver(AvatarUpdater.this, NotificationCenter.FileDidUpload);
+                        NotificationCenter.getInstance().removeObserver(AvatarUpdater.this, NotificationCenter.FileDidFailUpload);
+                        if (delegate != null) {
+                            delegate.didUploadedPhoto((TLRPC.InputFile)args[1], smallPhoto, bigPhoto);
+                        }
+                        uploadingAvatar = null;
+                        if (clearAfterUpdate) {
+                            parentFragment = null;
+                            delegate = null;
+                        }
+                    }
+                });
+            }
+        } else if (id == NotificationCenter.FileDidFailUpload) {
+            String location = (String)args[0];
+            if (uploadingAvatar != null && location.equals(uploadingAvatar)) {
+                AndroidUtilities.RunOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        NotificationCenter.getInstance().removeObserver(AvatarUpdater.this, NotificationCenter.FileDidUpload);
+                        NotificationCenter.getInstance().removeObserver(AvatarUpdater.this, NotificationCenter.FileDidFailUpload);
+                        uploadingAvatar = null;
+                        if (clearAfterUpdate) {
+                            parentFragment = null;
+                            delegate = null;
+                        }
+                    }
+                });
+            }
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/BackupImageView.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/BackupImageView.java
similarity index 96%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/BackupImageView.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/BackupImageView.java
index b584dcdaf..b605a9a33 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/BackupImageView.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/BackupImageView.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.ui.Views;
+package org.tomato.ui.Views;
 
 import android.content.Context;
 import android.graphics.Bitmap;
@@ -16,8 +16,8 @@
 import android.util.AttributeSet;
 import android.view.View;
 
-import org.telegram.android.ImageReceiver;
-import org.telegram.messenger.TLRPC;
+import org.tomato.android.ImageReceiver;
+import org.tomato.messenger.TLRPC;
 
 public class BackupImageView extends View {
     public ImageReceiver imageReceiver;
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/Views/ChatActivityEnterView.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/ChatActivityEnterView.java
new file mode 100644
index 000000000..3f80089a5
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/ChatActivityEnterView.java
@@ -0,0 +1,767 @@
+/*
+ * This is the source code of Telegram for Android v. 1.4.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.tomato.ui.Views;
+
+import android.animation.Animator;
+import android.animation.AnimatorListenerAdapter;
+import android.animation.AnimatorSet;
+import android.animation.ObjectAnimator;
+import android.app.Activity;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.graphics.Rect;
+import android.os.Build;
+import android.os.PowerManager;
+import android.text.Editable;
+import android.text.TextWatcher;
+import android.text.style.ImageSpan;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.Surface;
+import android.view.View;
+import android.view.WindowManager;
+import android.view.animation.AccelerateDecelerateInterpolator;
+import android.view.inputmethod.EditorInfo;
+import android.view.inputmethod.InputMethodManager;
+import android.widget.EditText;
+import android.widget.FrameLayout;
+import android.widget.ImageButton;
+import android.widget.ImageView;
+import android.widget.PopupWindow;
+import android.widget.TextView;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.Emoji;
+import org.tomato.android.LocaleController;
+import org.tomato.android.MediaController;
+import org.tomato.android.MessagesController;
+import org.tomato.android.NotificationCenter;
+import org.tomato.android.SendMessagesHelper;
+import org.tomato.messenger.ConnectionsManager;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
+import org.tomato.messenger.TLRPC;
+import org.tomato.ui.ApplicationLoader;
+
+public class ChatActivityEnterView implements NotificationCenter.NotificationCenterDelegate, SizeNotifierRelativeLayout.SizeNotifierRelativeLayoutDelegate {
+
+    public static interface ChatActivityEnterViewDelegate {
+        public abstract void onMessageSend();
+        public abstract void needSendTyping();
+    }
+
+    private EditText messsageEditText;
+    private ImageButton sendButton;
+    private PopupWindow emojiPopup;
+    private ImageView emojiButton;
+    private EmojiView emojiView;
+    private TextView recordTimeText;
+    private ImageButton audioSendButton;
+    private View recordPanel;
+    private View slideText;
+    private PowerManager.WakeLock mWakeLock = null;
+    private SizeNotifierRelativeLayout sizeNotifierRelativeLayout;
+    private Object runningAnimation = null;
+    private int runningAnimationType = 0;
+
+    private int keyboardHeight = 0;
+    private int keyboardHeightLand = 0;
+    private boolean keyboardVisible;
+    private boolean sendByEnter = false;
+    private long lastTypingTimeSend = 0;
+    private String lastTimeString = null;
+    private float startedDraggingX = -1;
+    private float distCanMove = AndroidUtilities.dp(80);
+    private boolean recordingAudio = false;
+
+    private Activity parentActivity;
+    private long dialog_id;
+    private boolean ignoreTextChange = false;
+    private ChatActivityEnterViewDelegate delegate;
+
+    public ChatActivityEnterView() {
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.recordStarted);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.recordStartError);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.recordStopped);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.recordProgressChanged);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeChats);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.audioDidSent);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.hideEmojiKeyboard);
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+        sendByEnter = preferences.getBoolean("send_by_enter", false);
+    }
+
+    public void onDestroy() {
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.recordStarted);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.recordStartError);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.recordStopped);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.recordProgressChanged);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.closeChats);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.audioDidSent);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.hideEmojiKeyboard);
+        if (mWakeLock != null) {
+            try {
+                mWakeLock.release();
+                mWakeLock = null;
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+        }
+        if (sizeNotifierRelativeLayout != null) {
+            sizeNotifierRelativeLayout.delegate = null;
+        }
+    }
+
+    public void setContainerView(Activity activity, View containerView) {
+        parentActivity = activity;
+
+        sizeNotifierRelativeLayout = (SizeNotifierRelativeLayout)containerView.findViewById(R.id.chat_layout);
+        sizeNotifierRelativeLayout.delegate = this;
+
+        messsageEditText = (EditText)containerView.findViewById(R.id.chat_text_edit);
+        messsageEditText.setHint(LocaleController.getString("TypeMessage", R.string.TypeMessage));
+
+        sendButton = (ImageButton)containerView.findViewById(R.id.chat_send_button);
+        sendButton.setVisibility(View.INVISIBLE);
+        emojiButton = (ImageView)containerView.findViewById(R.id.chat_smile_button);
+        audioSendButton = (ImageButton)containerView.findViewById(R.id.chat_audio_send_button);
+        recordPanel = containerView.findViewById(R.id.record_panel);
+        recordTimeText = (TextView)containerView.findViewById(R.id.recording_time_text);
+        slideText = containerView.findViewById(R.id.slideText);
+        TextView textView = (TextView)containerView.findViewById(R.id.slideToCancelTextView);
+        textView.setText(LocaleController.getString("SlideToCancel", R.string.SlideToCancel));
+
+        emojiButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                if (emojiPopup == null) {
+                    showEmojiPopup(true);
+                } else {
+                    showEmojiPopup(!emojiPopup.isShowing());
+                }
+            }
+        });
+
+        messsageEditText.setOnKeyListener(new View.OnKeyListener() {
+            @Override
+            public boolean onKey(View view, int i, KeyEvent keyEvent) {
+                if (i == 4 && !keyboardVisible && emojiPopup != null && emojiPopup.isShowing()) {
+                    if (keyEvent.getAction() == 1) {
+                        showEmojiPopup(false);
+                    }
+                    return true;
+                } else if (i == KeyEvent.KEYCODE_ENTER && sendByEnter && keyEvent.getAction() == KeyEvent.ACTION_DOWN) {
+                    sendMessage();
+                    return true;
+                }
+                return false;
+            }
+        });
+
+        messsageEditText.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                if (emojiPopup != null && emojiPopup.isShowing()) {
+                    showEmojiPopup(false);
+                }
+            }
+        });
+
+        messsageEditText.setOnEditorActionListener(new TextView.OnEditorActionListener() {
+            @Override
+            public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
+                if (i == EditorInfo.IME_ACTION_SEND) {
+                    sendMessage();
+                    return true;
+                } else if (sendByEnter) {
+                    if (keyEvent != null && i == EditorInfo.IME_NULL && keyEvent.getAction() == KeyEvent.ACTION_DOWN) {
+                        sendMessage();
+                        return true;
+                    }
+                }
+                return false;
+            }
+        });
+
+        sendButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                sendMessage();
+            }
+        });
+
+        audioSendButton.setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View view, MotionEvent motionEvent) {
+                if (motionEvent.getAction() == MotionEvent.ACTION_DOWN) {
+                    startedDraggingX = -1;
+                    MediaController.getInstance().startRecording(dialog_id);
+                    updateAudioRecordIntefrace();
+                    audioSendButton.getParent().requestDisallowInterceptTouchEvent(true);
+                } else if (motionEvent.getAction() == MotionEvent.ACTION_UP || motionEvent.getAction() == MotionEvent.ACTION_CANCEL) {
+                    startedDraggingX = -1;
+                    MediaController.getInstance().stopRecording(true);
+                    recordingAudio = false;
+                    updateAudioRecordIntefrace();
+                } else if (motionEvent.getAction() == MotionEvent.ACTION_MOVE && recordingAudio) {
+                    float x = motionEvent.getX();
+                    if (x < -distCanMove) {
+                        MediaController.getInstance().stopRecording(false);
+                        recordingAudio = false;
+                        updateAudioRecordIntefrace();
+                    }
+                    if(android.os.Build.VERSION.SDK_INT > 13) {
+                        x = x + audioSendButton.getX();
+                        FrameLayout.LayoutParams params = (FrameLayout.LayoutParams)slideText.getLayoutParams();
+                        if (startedDraggingX != -1) {
+                            float dist = (x - startedDraggingX);
+                            params.leftMargin = AndroidUtilities.dp(30) + (int)dist;
+                            slideText.setLayoutParams(params);
+                            float alpha = 1.0f + dist / distCanMove;
+                            if (alpha > 1) {
+                                alpha = 1;
+                            } else if (alpha < 0) {
+                                alpha = 0;
+                            }
+                            slideText.setAlpha(alpha);
+                        }
+                        if (x <= slideText.getX() + slideText.getWidth() + AndroidUtilities.dp(30)) {
+                            if (startedDraggingX == -1) {
+                                startedDraggingX = x;
+                                distCanMove = (recordPanel.getMeasuredWidth() - slideText.getMeasuredWidth() - AndroidUtilities.dp(48)) / 2.0f;
+                                if (distCanMove <= 0) {
+                                    distCanMove = AndroidUtilities.dp(80);
+                                } else if (distCanMove > AndroidUtilities.dp(80)) {
+                                    distCanMove = AndroidUtilities.dp(80);
+                                }
+                            }
+                        }
+                        if (params.leftMargin > AndroidUtilities.dp(30)) {
+                            params.leftMargin = AndroidUtilities.dp(30);
+                            slideText.setLayoutParams(params);
+                            slideText.setAlpha(1);
+                            startedDraggingX = -1;
+                        }
+                    }
+                }
+                view.onTouchEvent(motionEvent);
+                return true;
+            }
+        });
+
+        messsageEditText.addTextChangedListener(new TextWatcher() {
+            @Override
+            public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+
+            }
+
+            @Override
+            public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
+                String message = getTrimmedString(charSequence.toString());
+                checkSendButton(true);
+
+                if (message.length() != 0 && lastTypingTimeSend < System.currentTimeMillis() - 5000 && !ignoreTextChange) {
+                    int currentTime = ConnectionsManager.getInstance().getCurrentTime();
+                    TLRPC.User currentUser = null;
+                    if ((int)dialog_id > 0) {
+                        currentUser = MessagesController.getInstance().getUser((int)dialog_id);
+                    }
+                    if (currentUser != null && currentUser.status != null && currentUser.status.expires < currentTime) {
+                        return;
+                    }
+                    lastTypingTimeSend = System.currentTimeMillis();
+                    if (delegate != null) {
+                        delegate.needSendTyping();
+                    }
+                }
+            }
+
+            @Override
+            public void afterTextChanged(Editable editable) {
+                if (sendByEnter && editable.length() > 0 && editable.charAt(editable.length() - 1) == '\n') {
+                    sendMessage();
+                }
+                int i = 0;
+                ImageSpan[] arrayOfImageSpan = editable.getSpans(0, editable.length(), ImageSpan.class);
+                int j = arrayOfImageSpan.length;
+                while (true) {
+                    if (i >= j) {
+                        Emoji.replaceEmoji(editable, messsageEditText.getPaint().getFontMetricsInt(), AndroidUtilities.dp(20));
+                        return;
+                    }
+                    editable.removeSpan(arrayOfImageSpan[i]);
+                    i++;
+                }
+            }
+        });
+
+        checkSendButton(false);
+    }
+
+    private void sendMessage() {
+        if (processSendingText(messsageEditText.getText().toString())) {
+            messsageEditText.setText("");
+            lastTypingTimeSend = 0;
+            if (delegate != null) {
+                delegate.onMessageSend();
+            }
+        }
+    }
+
+    public boolean processSendingText(String text) {
+        text = getTrimmedString(text);
+        if (text.length() != 0) {
+            int count = (int)Math.ceil(text.length() / 2048.0f);
+            for (int a = 0; a < count; a++) {
+                String mess = text.substring(a * 2048, Math.min((a + 1) * 2048, text.length()));
+                SendMessagesHelper.getInstance().sendMessage(mess, dialog_id);
+            }
+            return true;
+        }
+        return false;
+    }
+
+    private String getTrimmedString(String src) {
+        String result = src.trim();
+        if (result.length() == 0) {
+            return result;
+        }
+        while (src.startsWith("\n")) {
+            src = src.substring(1);
+        }
+        while (src.endsWith("\n")) {
+            src = src.substring(0, src.length() - 1);
+        }
+        return src;
+    }
+
+    private void checkSendButton(boolean animated) {
+        String message = getTrimmedString(messsageEditText.getText().toString());
+        if (message.length() > 0) {
+            if (audioSendButton.getVisibility() == View.VISIBLE) {
+                if (Build.VERSION.SDK_INT >= 11 && animated) {
+                    if (runningAnimationType == 1) {
+                        return;
+                    }
+                    if (runningAnimation != null) {
+                        ((AnimatorSet)runningAnimation).cancel();
+                        runningAnimation = null;
+                    }
+
+                    sendButton.setVisibility(View.VISIBLE);
+                    AnimatorSet animatorSet = new AnimatorSet();
+                    runningAnimation = animatorSet;
+                    runningAnimationType = 1;
+                    animatorSet.playTogether(
+                            ObjectAnimator.ofFloat(audioSendButton, "scaleX", 0.1f),
+                            ObjectAnimator.ofFloat(audioSendButton, "scaleY", 0.1f),
+                            ObjectAnimator.ofFloat(audioSendButton, "alpha", 0.0f),
+                            ObjectAnimator.ofFloat(sendButton, "scaleX", 1.0f),
+                            ObjectAnimator.ofFloat(sendButton, "scaleY", 1.0f),
+                            ObjectAnimator.ofFloat(sendButton, "alpha", 1.0f)
+                    );
+
+                    animatorSet.setDuration(200);
+                    animatorSet.addListener(new AnimatorListenerAdapter() {
+                        @Override
+                        public void onAnimationEnd(Animator animation) {
+                            if (animation == runningAnimation) {
+                                sendButton.setVisibility(View.VISIBLE);
+                                audioSendButton.setVisibility(View.INVISIBLE);
+                                runningAnimation = null;
+                                runningAnimationType = 0;
+                            }
+                        }
+                    });
+                    animatorSet.start();
+                } else {
+                    if (Build.VERSION.SDK_INT >= 11) {
+                        audioSendButton.setScaleX(0.1f);
+                        audioSendButton.setScaleY(0.1f);
+                        audioSendButton.setAlpha(0.0f);
+                        sendButton.setScaleX(1.0f);
+                        sendButton.setScaleY(1.0f);
+                        sendButton.setAlpha(1.0f);
+                    }
+                    sendButton.setVisibility(View.VISIBLE);
+                    audioSendButton.setVisibility(View.INVISIBLE);
+                }
+            }
+        } else if (sendButton.getVisibility() == View.VISIBLE) {
+            if (Build.VERSION.SDK_INT >= 11 && animated) {
+                if (runningAnimationType == 2) {
+                    return;
+                }
+
+                if (runningAnimation != null) {
+                    ((AnimatorSet)runningAnimation).cancel();
+                    runningAnimation = null;
+                }
+
+                audioSendButton.setVisibility(View.VISIBLE);
+                AnimatorSet animatorSet = new AnimatorSet();
+                runningAnimation = animatorSet;
+                runningAnimationType = 2;
+                animatorSet.playTogether(
+                        ObjectAnimator.ofFloat(sendButton, "scaleX", 0.1f),
+                        ObjectAnimator.ofFloat(sendButton, "scaleY", 0.1f),
+                        ObjectAnimator.ofFloat(sendButton, "alpha", 0.0f),
+                        ObjectAnimator.ofFloat(audioSendButton, "scaleX", 1.0f),
+                        ObjectAnimator.ofFloat(audioSendButton, "scaleY", 1.0f),
+                        ObjectAnimator.ofFloat(audioSendButton, "alpha", 1.0f)
+                );
+
+                animatorSet.setDuration(200);
+                animatorSet.addListener(new AnimatorListenerAdapter() {
+                    @Override
+                    public void onAnimationEnd(Animator animation) {
+                        if (animation == runningAnimation) {
+                            sendButton.setVisibility(View.INVISIBLE);
+                            audioSendButton.setVisibility(View.VISIBLE);
+                            runningAnimation = null;
+                            runningAnimationType = 0;
+                        }
+                    }
+                });
+                animatorSet.start();
+            } else {
+                if (Build.VERSION.SDK_INT >= 11) {
+                    sendButton.setScaleX(0.1f);
+                    sendButton.setScaleY(0.1f);
+                    sendButton.setAlpha(0.0f);
+                    audioSendButton.setScaleX(1.0f);
+                    audioSendButton.setScaleY(1.0f);
+                    audioSendButton.setAlpha(1.0f);
+                }
+                sendButton.setVisibility(View.INVISIBLE);
+                audioSendButton.setVisibility(View.VISIBLE);
+            }
+        }
+    }
+
+    private void updateAudioRecordIntefrace() {
+        if (recordingAudio) {
+            try {
+                if (mWakeLock == null) {
+                    PowerManager pm = (PowerManager) ApplicationLoader.applicationContext.getSystemService(Context.POWER_SERVICE);
+                    mWakeLock = pm.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE, "audio record lock");
+                    mWakeLock.acquire();
+                }
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            AndroidUtilities.lockOrientation(parentActivity);
+
+            recordPanel.setVisibility(View.VISIBLE);
+            recordTimeText.setText("00:00");
+            lastTimeString = null;
+            if(android.os.Build.VERSION.SDK_INT > 13) {
+                FrameLayout.LayoutParams params = (FrameLayout.LayoutParams)slideText.getLayoutParams();
+                params.leftMargin = AndroidUtilities.dp(30);
+                slideText.setLayoutParams(params);
+                slideText.setAlpha(1);
+                recordPanel.setX(AndroidUtilities.displaySize.x);
+                recordPanel.animate().setInterpolator(new AccelerateDecelerateInterpolator()).setListener(new Animator.AnimatorListener() {
+                    @Override
+                    public void onAnimationStart(Animator animator) {
+                    }
+
+                    @Override
+                    public void onAnimationEnd(Animator animator) {
+                        recordPanel.setX(0);
+                    }
+
+                    @Override
+                    public void onAnimationCancel(Animator animator) {
+                    }
+
+                    @Override
+                    public void onAnimationRepeat(Animator animator) {
+                    }
+                }).setDuration(300).translationX(0).start();
+            }
+        } else {
+            if (mWakeLock != null) {
+                try {
+                    mWakeLock.release();
+                    mWakeLock = null;
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+            AndroidUtilities.unlockOrientation(parentActivity);
+            if(android.os.Build.VERSION.SDK_INT > 13) {
+                recordPanel.animate().setInterpolator(new AccelerateDecelerateInterpolator()).setListener(new Animator.AnimatorListener() {
+                    @Override
+                    public void onAnimationStart(Animator animator) {
+
+                    }
+
+                    @Override
+                    public void onAnimationEnd(Animator animator) {
+                        FrameLayout.LayoutParams params = (FrameLayout.LayoutParams)slideText.getLayoutParams();
+                        params.leftMargin = AndroidUtilities.dp(30);
+                        slideText.setLayoutParams(params);
+                        slideText.setAlpha(1);
+                        recordPanel.setVisibility(View.GONE);
+                    }
+
+                    @Override
+                    public void onAnimationCancel(Animator animator) {
+                    }
+
+                    @Override
+                    public void onAnimationRepeat(Animator animator) {
+                    }
+                }).setDuration(300).translationX(AndroidUtilities.displaySize.x).start();
+            } else {
+                recordPanel.setVisibility(View.GONE);
+            }
+        }
+    }
+
+    private void showEmojiPopup(boolean show) {
+        InputMethodManager localInputMethodManager = (InputMethodManager)ApplicationLoader.applicationContext.getSystemService(Context.INPUT_METHOD_SERVICE);
+        if (show) {
+            if (emojiPopup == null) {
+                createEmojiPopup();
+            }
+            int currentHeight;
+            WindowManager manager = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Activity.WINDOW_SERVICE);
+            int rotation = manager.getDefaultDisplay().getRotation();
+            if (keyboardHeight <= 0) {
+                keyboardHeight = ApplicationLoader.applicationContext.getSharedPreferences("emoji", 0).getInt("kbd_height", AndroidUtilities.dp(200));
+            }
+            if (keyboardHeightLand <= 0) {
+                keyboardHeightLand = ApplicationLoader.applicationContext.getSharedPreferences("emoji", 0).getInt("kbd_height_land3", AndroidUtilities.dp(200));
+            }
+            if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
+                currentHeight = keyboardHeightLand;
+            } else {
+                currentHeight = keyboardHeight;
+            }
+            emojiPopup.setHeight(View.MeasureSpec.makeMeasureSpec(currentHeight, View.MeasureSpec.EXACTLY));
+            if (sizeNotifierRelativeLayout != null) {
+                emojiPopup.setWidth(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.displaySize.x, View.MeasureSpec.EXACTLY));
+            }
+
+            emojiPopup.showAtLocation(parentActivity.getWindow().getDecorView(), 83, 0, 0);
+            if (!keyboardVisible) {
+                if (sizeNotifierRelativeLayout != null) {
+                    sizeNotifierRelativeLayout.setPadding(0, 0, 0, currentHeight);
+                    emojiButton.setImageResource(R.drawable.ic_msg_panel_hide);
+                }
+                return;
+            }
+            emojiButton.setImageResource(R.drawable.ic_msg_panel_kb);
+            return;
+        }
+        if (emojiButton != null) {
+            emojiButton.setImageResource(R.drawable.ic_msg_panel_smiles);
+        }
+        if (emojiPopup != null) {
+            emojiPopup.dismiss();
+        }
+        if (sizeNotifierRelativeLayout != null) {
+            sizeNotifierRelativeLayout.post(new Runnable() {
+                public void run() {
+                    if (sizeNotifierRelativeLayout != null) {
+                        sizeNotifierRelativeLayout.setPadding(0, 0, 0, 0);
+                    }
+                }
+            });
+        }
+    }
+
+    public void hideEmojiPopup() {
+        if (emojiPopup != null && emojiPopup.isShowing()) {
+            showEmojiPopup(false);
+        }
+    }
+
+    private void createEmojiPopup() {
+        if (parentActivity == null) {
+            return;
+        }
+        emojiView = new EmojiView(parentActivity);
+        emojiView.setListener(new EmojiView.Listener() {
+            public void onBackspace() {
+                messsageEditText.dispatchKeyEvent(new KeyEvent(0, 67));
+            }
+
+            public void onEmojiSelected(String symbol) {
+                int i = messsageEditText.getSelectionEnd();
+                if (i < 0) {
+                    i = 0;
+                }
+                try {
+                    CharSequence localCharSequence = Emoji.replaceEmoji(symbol, messsageEditText.getPaint().getFontMetricsInt(), AndroidUtilities.dp(20));
+                    messsageEditText.setText(messsageEditText.getText().insert(i, localCharSequence));
+                    int j = i + localCharSequence.length();
+                    messsageEditText.setSelection(j, j);
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+        });
+        emojiPopup = new PopupWindow(emojiView);
+    }
+
+    public void setDelegate(ChatActivityEnterViewDelegate delegate) {
+        this.delegate = delegate;
+    }
+
+    public void setDialogId(long id) {
+        dialog_id = id;
+    }
+
+    public void setFieldText(String text) {
+        ignoreTextChange = true;
+        messsageEditText.setText(text);
+        messsageEditText.setSelection(messsageEditText.getText().length());
+        ignoreTextChange = false;
+    }
+
+    public void setFieldFocused(boolean focus) {
+        if (messsageEditText == null) {
+            return;
+        }
+        if (focus) {
+            if (!messsageEditText.isFocused()) {
+                messsageEditText.postDelayed(new Runnable() {
+                    @Override
+                    public void run() {
+                        if (messsageEditText != null) {
+                            try {
+                                messsageEditText.requestFocus();
+                            } catch (Exception e) {
+                                FileLog.e("tmessages", e);
+                            }
+                        }
+                    }
+                }, 600);
+            }
+        } else {
+            if (messsageEditText.isFocused() && !keyboardVisible) {
+                messsageEditText.clearFocus();
+            }
+        }
+    }
+
+    public boolean hasText() {
+        return messsageEditText != null && messsageEditText.length() > 0;
+    }
+
+    public String getFieldText() {
+        if (messsageEditText != null && messsageEditText.length() > 0) {
+            return messsageEditText.getText().toString();
+        }
+        return null;
+    }
+
+    public boolean isEmojiPopupShowing() {
+        return emojiPopup != null && emojiPopup.isShowing();
+    }
+
+    @Override
+    public void onSizeChanged(int height) {
+        Rect localRect = new Rect();
+        parentActivity.getWindow().getDecorView().getWindowVisibleDisplayFrame(localRect);
+
+        WindowManager manager = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Activity.WINDOW_SERVICE);
+        if (manager == null || manager.getDefaultDisplay() == null) {
+            return;
+        }
+        int rotation = manager.getDefaultDisplay().getRotation();
+
+        if (height > AndroidUtilities.dp(50) && keyboardVisible) {
+            if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
+                keyboardHeightLand = height;
+                ApplicationLoader.applicationContext.getSharedPreferences("emoji", 0).edit().putInt("kbd_height_land3", keyboardHeightLand).commit();
+            } else {
+                keyboardHeight = height;
+                ApplicationLoader.applicationContext.getSharedPreferences("emoji", 0).edit().putInt("kbd_height", keyboardHeight).commit();
+            }
+        }
+
+        if (emojiPopup != null && emojiPopup.isShowing()) {
+            int newHeight = 0;
+            if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
+                newHeight = keyboardHeightLand;
+            } else {
+                newHeight = keyboardHeight;
+            }
+            final WindowManager.LayoutParams layoutParams = (WindowManager.LayoutParams)emojiPopup.getContentView().getLayoutParams();
+            if (layoutParams.width != AndroidUtilities.displaySize.x || layoutParams.height != newHeight) {
+                WindowManager wm = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Context.WINDOW_SERVICE);
+                layoutParams.width = AndroidUtilities.displaySize.x;
+                layoutParams.height = newHeight;
+                wm.updateViewLayout(emojiPopup.getContentView(), layoutParams);
+                if (!keyboardVisible) {
+                    sizeNotifierRelativeLayout.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            if (sizeNotifierRelativeLayout != null) {
+                                sizeNotifierRelativeLayout.setPadding(0, 0, 0, layoutParams.height);
+                                sizeNotifierRelativeLayout.requestLayout();
+                            }
+                        }
+                    });
+                }
+            }
+        }
+
+        boolean oldValue = keyboardVisible;
+        keyboardVisible = height > 0;
+        if (keyboardVisible && sizeNotifierRelativeLayout.getPaddingBottom() > 0) {
+            showEmojiPopup(false);
+        } else if (!keyboardVisible && keyboardVisible != oldValue && emojiPopup != null && emojiPopup.isShowing()) {
+            showEmojiPopup(false);
+        }
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+        if (id == NotificationCenter.emojiDidLoaded) {
+            if (emojiView != null) {
+                emojiView.invalidateViews();
+            }
+        } else if (id == NotificationCenter.recordProgressChanged) {
+            Long time = (Long)args[0] / 1000;
+            String str = String.format("%02d:%02d", time / 60, time % 60);
+            if (lastTimeString == null || !lastTimeString.equals(str)) {
+                if (recordTimeText != null) {
+                    recordTimeText.setText(str);
+                }
+            }
+        } else if (id == NotificationCenter.closeChats) {
+            if (messsageEditText != null && messsageEditText.isFocused()) {
+                AndroidUtilities.hideKeyboard(messsageEditText);
+            }
+        } else if (id == NotificationCenter.recordStartError || id == NotificationCenter.recordStopped) {
+            if (recordingAudio) {
+                recordingAudio = false;
+                updateAudioRecordIntefrace();
+            }
+        } else if (id == NotificationCenter.recordStarted) {
+            if (!recordingAudio) {
+                recordingAudio = true;
+                updateAudioRecordIntefrace();
+            }
+        } else if (id == NotificationCenter.audioDidSent) {
+            if (delegate != null) {
+                delegate.onMessageSend();
+            }
+        } else if (id == NotificationCenter.hideEmojiKeyboard) {
+            hideEmojiPopup();
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ClippingImageView.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/ClippingImageView.java
similarity index 97%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/ClippingImageView.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/ClippingImageView.java
index 543272ba2..8dcf991e7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ClippingImageView.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/ClippingImageView.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.ui.Views;
+package org.tomato.ui.Views;
 
 import android.content.Context;
 import android.graphics.Bitmap;
@@ -15,7 +15,7 @@
 import android.graphics.Rect;
 import android.view.View;
 
-import org.telegram.messenger.FileLog;
+import org.tomato.messenger.FileLog;
 
 public class ClippingImageView extends View {
     private int clipBottom;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ColorPickerView.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/ColorPickerView.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/ColorPickerView.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/ColorPickerView.java
index 7135cbfbc..28b09dd5a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ColorPickerView.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/ColorPickerView.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.telegram.ui.Views;
+package org.tomato.ui.Views;
 
 import android.content.Context;
 import android.graphics.Canvas;
@@ -29,7 +29,7 @@
 import android.view.MotionEvent;
 import android.view.View;
 
-import org.telegram.android.AndroidUtilities;
+import org.tomato.android.AndroidUtilities;
 
 public class ColorPickerView extends View {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/EmojiView.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/EmojiView.java
similarity index 98%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/EmojiView.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/EmojiView.java
index 5664a1cc0..6c0fbed56 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/EmojiView.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/EmojiView.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.ui.Views;
+package org.tomato.ui.Views;
 
 import android.content.Context;
 import android.database.DataSetObserver;
@@ -24,10 +24,10 @@
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.Emoji;
-import org.telegram.android.LocaleController;
-import org.telegram.messenger.R;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.Emoji;
+import org.tomato.android.LocaleController;
+import org.tomato.messenger.R;
 
 import java.util.ArrayList;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/FrameLayoutFixed.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/FrameLayoutFixed.java
similarity index 98%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/FrameLayoutFixed.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/FrameLayoutFixed.java
index 73bcd9dcd..7338a5669 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/FrameLayoutFixed.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/FrameLayoutFixed.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.ui.Views;
+package org.tomato.ui.Views;
 
 import android.content.Context;
 import android.graphics.drawable.Drawable;
@@ -14,7 +14,7 @@
 import android.view.View;
 import android.widget.FrameLayout;
 
-import org.telegram.messenger.FileLog;
+import org.tomato.messenger.FileLog;
 
 import java.util.ArrayList;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/GifDrawable.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/GifDrawable.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/GifDrawable.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/GifDrawable.java
index 5af31e03e..d94297c28 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/GifDrawable.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/GifDrawable.java
@@ -22,7 +22,7 @@ of this software and associated documentation files (the "Software"), to deal
 THE SOFTWARE.
  */
 
-package org.telegram.ui.Views;
+package org.tomato.ui.Views;
 
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/Views/HorizontalListView.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/HorizontalListView.java
new file mode 100644
index 000000000..764aa0962
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/HorizontalListView.java
@@ -0,0 +1,389 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+package org.tomato.ui.Views;
+
+import android.annotation.SuppressLint;
+import android.content.Context;
+import android.database.DataSetObserver;
+import android.graphics.Rect;
+import android.util.AttributeSet;
+import android.view.GestureDetector;
+import android.view.GestureDetector.OnGestureListener;
+import android.view.MotionEvent;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.ListAdapter;
+import android.widget.Scroller;
+
+import java.util.HashMap;
+import java.util.LinkedList;
+
+public class HorizontalListView extends AdapterView<ListAdapter> {
+
+    public boolean mAlwaysOverrideTouch = true;
+    protected ListAdapter mAdapter;
+    private int mLeftViewIndex = -1;
+    private int mRightViewIndex = 0;
+    protected int mCurrentX;
+    protected int mNextX;
+    private int mMaxX = Integer.MAX_VALUE;
+    private int mDisplayOffset = 0;
+    protected Scroller mScroller;
+    private GestureDetector mGesture;
+    private HashMap<Integer, LinkedList<View>> mRemovedViewQueue = new HashMap<Integer, LinkedList<View>>();
+    private OnItemSelectedListener mOnItemSelected;
+    private OnItemClickListener mOnItemClicked;
+    private OnItemLongClickListener mOnItemLongClicked;
+    private boolean mDataChanged = false;
+
+    public HorizontalListView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        initView();
+    }
+
+    private synchronized void initView() {
+        mLeftViewIndex = -1;
+        mRightViewIndex = 0;
+        mDisplayOffset = 0;
+        mCurrentX = 0;
+        mNextX = 0;
+        mMaxX = Integer.MAX_VALUE;
+        mScroller = new Scroller(getContext());
+        mGesture = new GestureDetector(getContext(), mOnGesture);
+    }
+
+    @Override
+    public void setOnItemSelectedListener(AdapterView.OnItemSelectedListener listener) {
+        mOnItemSelected = listener;
+    }
+
+    @Override
+    public void setOnItemClickListener(AdapterView.OnItemClickListener listener) {
+        mOnItemClicked = listener;
+    }
+
+    @Override
+    public void setOnItemLongClickListener(AdapterView.OnItemLongClickListener listener) {
+        mOnItemLongClicked = listener;
+    }
+
+    private DataSetObserver mDataObserver = new DataSetObserver() {
+        @Override
+        public void onChanged() {
+            synchronized (HorizontalListView.this) {
+                mDataChanged = true;
+            }
+            invalidate();
+            requestLayout();
+        }
+
+        @Override
+        public void onInvalidated() {
+            reset();
+            invalidate();
+            requestLayout();
+        }
+    };
+
+    @Override
+    public ListAdapter getAdapter() {
+        return mAdapter;
+    }
+
+    @Override
+    public View getSelectedView() {
+
+        return null;
+    }
+
+    @Override
+    public void setSelection(int position) {
+
+    }
+
+    @Override
+    public void setAdapter(ListAdapter adapter) {
+        if (mAdapter != null && mDataObserver != null) {
+            mAdapter.unregisterDataSetObserver(mDataObserver);
+        }
+        mAdapter = adapter;
+        mAdapter.registerDataSetObserver(mDataObserver);
+        reset();
+    }
+
+    private synchronized void reset() {
+        initView();
+        mRemovedViewQueue.clear();
+        removeAllViewsInLayout();
+        requestLayout();
+    }
+
+    private void addAndMeasureChild(final View child, int viewPos) {
+        LayoutParams params = child.getLayoutParams();
+        if (params == null) {
+            params = new LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
+        }
+        addViewInLayout(child, viewPos, params, true);
+        child.measure(MeasureSpec.makeMeasureSpec(getWidth(), MeasureSpec.AT_MOST), MeasureSpec.makeMeasureSpec(getHeight(), MeasureSpec.AT_MOST));
+    }
+
+
+    @SuppressLint("DrawAllocation")
+    @Override
+    protected synchronized void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        super.onLayout(changed, left, top, right, bottom);
+
+        if (mAdapter == null) {
+            return;
+        }
+
+        if (mDataChanged) {
+            int oldCurrentX = mCurrentX;
+            initView();
+            removeAllViewsInLayout();
+            mNextX = oldCurrentX;
+            mDataChanged = false;
+        }
+
+        if (mScroller.computeScrollOffset()) {
+            mNextX = mScroller.getCurrX();
+        }
+
+        if (mNextX <= 0) {
+            mNextX = 0;
+            mScroller.forceFinished(true);
+        }
+        if (mNextX >= mMaxX) {
+            mNextX = mMaxX;
+            mScroller.forceFinished(true);
+        }
+
+        int dx = mCurrentX - mNextX;
+
+        removeNonVisibleItems(dx);
+        fillList(dx);
+        positionItems(dx);
+
+        mCurrentX = mNextX;
+
+        if (!mScroller.isFinished()) {
+            post(new Runnable() {
+                @Override
+                public void run() {
+                    requestLayout();
+                }
+            });
+        }
+    }
+
+    private void fillList(final int dx) {
+        int edge = 0;
+        View child = getChildAt(getChildCount() - 1);
+        if (child != null) {
+            edge = child.getRight();
+        }
+        fillListRight(edge, dx);
+
+        edge = 0;
+        child = getChildAt(0);
+        if (child != null) {
+            edge = child.getLeft();
+        }
+        fillListLeft(edge, dx);
+    }
+
+    private void fillListRight(int rightEdge, final int dx) {
+        while (rightEdge + dx < getWidth() && mRightViewIndex < mAdapter.getCount()) {
+
+            View v = null;
+            int type = mAdapter.getItemViewType(mRightViewIndex);
+            LinkedList<View> list = mRemovedViewQueue.get(type);
+            if (list != null) {
+                v = list.poll();
+            }
+            View child = mAdapter.getView(mRightViewIndex, v, this);
+            child.setTag(type);
+
+            addAndMeasureChild(child, -1);
+            rightEdge += child.getMeasuredWidth();
+            child.invalidate();
+
+            if (mRightViewIndex == mAdapter.getCount() - 1) {
+                mMaxX = mCurrentX + rightEdge - getWidth() + getPaddingLeft();
+            }
+
+            if (mMaxX < 0) {
+                mMaxX = 0;
+            }
+            mRightViewIndex++;
+        }
+
+    }
+
+    private void fillListLeft(int leftEdge, final int dx) {
+        while (leftEdge + dx > 0 && mLeftViewIndex >= 0) {
+            View v = null;
+            int type = mAdapter.getItemViewType(mLeftViewIndex);
+            LinkedList<View> list = mRemovedViewQueue.get(type);
+            if (list != null) {
+                v = list.poll();
+            }
+            View child = mAdapter.getView(mLeftViewIndex, v, this);
+            child.setTag(type);
+
+            addAndMeasureChild(child, 0);
+            leftEdge -= child.getMeasuredWidth();
+            mLeftViewIndex--;
+            mDisplayOffset -= child.getMeasuredWidth();
+        }
+    }
+
+    private void removeNonVisibleItems(final int dx) {
+        View child = getChildAt(0);
+        while (child != null && child.getRight() + dx <= 0) {
+            mDisplayOffset += child.getMeasuredWidth();
+
+            int type = (Integer) child.getTag();
+            LinkedList<View> list = mRemovedViewQueue.get(type);
+            if (list == null) {
+                list = new LinkedList<View>();
+                mRemovedViewQueue.put(type, list);
+            }
+            list.add(child);
+
+            removeViewInLayout(child);
+            mLeftViewIndex++;
+            child = getChildAt(0);
+        }
+
+        child = getChildAt(getChildCount() - 1);
+        while (child != null && child.getLeft() + dx >= getWidth()) {
+            int type = (Integer) child.getTag();
+            LinkedList<View> list = mRemovedViewQueue.get(type);
+            if (list == null) {
+                list = new LinkedList<View>();
+                mRemovedViewQueue.put(type, list);
+            }
+            list.add(child);
+
+            removeViewInLayout(child);
+            mRightViewIndex--;
+            child = getChildAt(getChildCount() - 1);
+        }
+    }
+
+    private void positionItems(final int dx) {
+        if (getChildCount() > 0) {
+            mDisplayOffset += dx;
+            int left = mDisplayOffset;
+            for (int i = 0; i < getChildCount(); i++) {
+                View child = getChildAt(i);
+                int childWidth = child.getMeasuredWidth();
+                child.layout(left + getPaddingLeft(), 0, left + childWidth + getPaddingLeft(), child.getMeasuredHeight());
+                left += childWidth + child.getPaddingRight();
+            }
+        }
+    }
+
+    public synchronized void scrollTo(int x) {
+        mScroller.startScroll(mNextX, 0, x - mNextX, 0);
+        requestLayout();
+    }
+
+    @Override
+    public boolean dispatchTouchEvent(MotionEvent ev) {
+        boolean handled = super.dispatchTouchEvent(ev);
+        handled |= mGesture.onTouchEvent(ev);
+        return handled;
+    }
+
+    @Override
+    public boolean onInterceptTouchEvent(MotionEvent ev) {
+        requestDisallowInterceptTouchEvent(true);
+        return super.onInterceptTouchEvent(ev);
+    }
+
+    protected boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
+        synchronized (HorizontalListView.this) {
+            mScroller.fling(mNextX, 0, (int) -velocityX, 0, 0, mMaxX, 0, 0);
+        }
+        requestLayout();
+
+        return true;
+    }
+
+    protected boolean onDown(MotionEvent e) {
+        mScroller.forceFinished(true);
+        return true;
+    }
+
+    private OnGestureListener mOnGesture = new GestureDetector.SimpleOnGestureListener() {
+
+        @Override
+        public boolean onDown(MotionEvent e) {
+            return HorizontalListView.this.onDown(e);
+        }
+
+        @Override
+        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
+            return HorizontalListView.this.onFling(e1, e2, velocityX, velocityY);
+        }
+
+        @Override
+        public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {
+            synchronized (HorizontalListView.this) {
+                mNextX += (int) distanceX;
+            }
+            requestLayout();
+            return true;
+        }
+
+        @Override
+        public boolean onSingleTapUp(MotionEvent e) {
+            for (int i = 0; i < getChildCount(); i++) {
+                View child = getChildAt(i);
+                if (isEventWithinView(e, child)) {
+                    if (mOnItemClicked != null) {
+                        mOnItemClicked.onItemClick(HorizontalListView.this, child, mLeftViewIndex + 1 + i, mAdapter.getItemId(mLeftViewIndex + 1 + i));
+                    }
+                    if (mOnItemSelected != null) {
+                        mOnItemSelected.onItemSelected(HorizontalListView.this, child, mLeftViewIndex + 1 + i, mAdapter.getItemId(mLeftViewIndex + 1 + i));
+                    }
+                    break;
+                }
+            }
+            return true;
+        }
+
+        @Override
+        public void onLongPress(MotionEvent e) {
+            int childCount = getChildCount();
+            for (int i = 0; i < childCount; i++) {
+                View child = getChildAt(i);
+                if (isEventWithinView(e, child)) {
+                    if (mOnItemLongClicked != null) {
+                        mOnItemLongClicked.onItemLongClick(HorizontalListView.this, child, mLeftViewIndex + 1 + i, mAdapter.getItemId(mLeftViewIndex + 1 + i));
+                    }
+                    break;
+                }
+            }
+        }
+
+        private boolean isEventWithinView(MotionEvent e, View child) {
+            Rect viewRect = new Rect();
+            int[] childPosition = new int[2];
+            child.getLocationOnScreen(childPosition);
+            int left = childPosition[0];
+            int right = left + child.getWidth();
+            int top = childPosition[1];
+            int bottom = top + child.getHeight();
+            viewRect.set(left, top, right, bottom);
+            return viewRect.contains((int) e.getRawX(), (int) e.getRawY());
+        }
+    };
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/IdenticonView.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/IdenticonView.java
similarity index 97%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/IdenticonView.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/IdenticonView.java
index 52e18d260..2b41487d4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/IdenticonView.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/IdenticonView.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.ui.Views;
+package org.tomato.ui.Views;
 
 import android.content.Context;
 import android.graphics.Canvas;
@@ -14,7 +14,7 @@
 import android.util.AttributeSet;
 import android.view.View;
 
-import org.telegram.messenger.Utilities;
+import org.tomato.messenger.Utilities;
 
 public class IdenticonView extends View {
     private byte[] data;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/LayoutListView.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/LayoutListView.java
similarity index 98%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/LayoutListView.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/LayoutListView.java
index 4d5617a80..e81bc42c7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/LayoutListView.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/LayoutListView.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.ui.Views;
+package org.tomato.ui.Views;
 
 import android.content.Context;
 import android.util.AttributeSet;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/NumberPicker.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/NumberPicker.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/NumberPicker.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/NumberPicker.java
index bd5e23b29..6609aeb59 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/NumberPicker.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/NumberPicker.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.telegram.ui.Views;
+package org.tomato.ui.Views;
 
 import android.content.Context;
 import android.content.res.ColorStateList;
@@ -38,7 +38,7 @@
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
-import org.telegram.messenger.R;
+import org.tomato.messenger.R;
 
 import java.util.Locale;
 
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/Views/PagerSlidingTabStrip.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/PagerSlidingTabStrip.java
new file mode 100644
index 000000000..bc123f395
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/PagerSlidingTabStrip.java
@@ -0,0 +1,574 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui.Views;
+
+import android.annotation.SuppressLint;
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.Paint.Style;
+import android.graphics.Typeface;
+import android.os.Build;
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.support.v4.view.ViewPager;
+import android.support.v4.view.ViewPager.OnPageChangeListener;
+import android.util.AttributeSet;
+import android.util.DisplayMetrics;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.View;
+import android.view.ViewTreeObserver.OnGlobalLayoutListener;
+import android.widget.FrameLayout;
+import android.widget.HorizontalScrollView;
+import android.widget.ImageButton;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import org.tomato.messenger.R;
+
+import java.util.Locale;
+
+public class PagerSlidingTabStrip extends HorizontalScrollView {
+
+    public interface IconTabProvider {
+        public int getPageIconResId(int position);
+    }
+
+    private LinearLayout.LayoutParams defaultTabLayoutParams;
+
+    private final PageListener pageListener = new PageListener();
+    public OnPageChangeListener delegatePageListener;
+
+    private LinearLayout tabsContainer;
+    private ViewPager pager;
+
+    private int tabCount;
+
+    private int currentPosition = 0;
+    private float currentPositionOffset = 0f;
+
+    private Paint rectPaint;
+    private Paint dividerPaint;
+
+    private int indicatorColor = 0xFF666666;
+    private int underlineColor = 0x1A000000;
+    private int dividerColor = 0x1A000000;
+
+    private boolean shouldExpand = false;
+    private boolean textAllCaps = true;
+
+    private int scrollOffset = 52;
+    private int indicatorHeight = 8;
+    private int underlineHeight = 2;
+    private int dividerPadding = 12;
+    private int tabPadding = 24;
+    private int dividerWidth = 1;
+
+    private int tabTextSize = 12;
+    private int tabTextColor = 0xFF666666;
+    private Typeface tabTypeface = null;
+    private int tabTypefaceStyle = Typeface.BOLD;
+
+    private int lastScrollX = 0;
+
+    private int tabBackgroundResId = R.drawable.background_tab;
+
+    private Locale locale;
+
+    public PagerSlidingTabStrip(Context context) {
+        this(context, null);
+    }
+
+    public PagerSlidingTabStrip(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public PagerSlidingTabStrip(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+
+        setFillViewport(true);
+        setWillNotDraw(false);
+
+        tabsContainer = new LinearLayout(context);
+        tabsContainer.setOrientation(LinearLayout.HORIZONTAL);
+        tabsContainer.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
+        addView(tabsContainer);
+
+        DisplayMetrics dm = getResources().getDisplayMetrics();
+
+        scrollOffset = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, scrollOffset, dm);
+        indicatorHeight = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, indicatorHeight, dm);
+        underlineHeight = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, underlineHeight, dm);
+        dividerPadding = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dividerPadding, dm);
+        tabPadding = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, tabPadding, dm);
+        dividerWidth = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dividerWidth, dm);
+        tabTextSize = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP, tabTextSize, dm);
+
+        rectPaint = new Paint();
+        rectPaint.setAntiAlias(true);
+        rectPaint.setStyle(Style.FILL);
+
+        dividerPaint = new Paint();
+        dividerPaint.setAntiAlias(true);
+        dividerPaint.setStrokeWidth(dividerWidth);
+
+        defaultTabLayoutParams = new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);
+
+        if (locale == null) {
+            locale = getResources().getConfiguration().locale;
+        }
+    }
+
+    public void setViewPager(ViewPager pager) {
+        this.pager = pager;
+
+        if (pager.getAdapter() == null) {
+            throw new IllegalStateException("ViewPager does not have adapter instance.");
+        }
+
+        pager.setOnPageChangeListener(pageListener);
+
+        notifyDataSetChanged();
+    }
+
+    public void setOnPageChangeListener(OnPageChangeListener listener) {
+        this.delegatePageListener = listener;
+    }
+
+    public void notifyDataSetChanged() {
+
+        tabsContainer.removeAllViews();
+
+        tabCount = pager.getAdapter().getCount();
+
+        for (int i = 0; i < tabCount; i++) {
+
+            if (pager.getAdapter() instanceof IconTabProvider) {
+                addIconTab(i, ((IconTabProvider) pager.getAdapter()).getPageIconResId(i));
+            } else {
+                addTextTab(i, pager.getAdapter().getPageTitle(i).toString());
+            }
+
+        }
+
+        updateTabStyles();
+
+        getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
+
+            @SuppressWarnings("deprecation")
+            @SuppressLint("NewApi")
+            @Override
+            public void onGlobalLayout() {
+
+                if (Build.VERSION.SDK_INT < 16) {
+                    getViewTreeObserver().removeGlobalOnLayoutListener(this);
+                } else {
+                    getViewTreeObserver().removeOnGlobalLayoutListener(this);
+                }
+
+                currentPosition = pager.getCurrentItem();
+                scrollToChild(currentPosition, 0);
+            }
+        });
+
+        updateExpanded();
+
+    }
+
+    private void addTextTab(final int position, String title) {
+
+        TextView tab = new TextView(getContext());
+        tab.setText(title);
+        tab.setFocusable(true);
+        tab.setGravity(Gravity.CENTER);
+        tab.setSingleLine();
+
+        tab.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                pager.setCurrentItem(position);
+            }
+        });
+
+        tabsContainer.addView(tab);
+
+    }
+
+    private void addIconTab(final int position, int resId) {
+
+        ImageButton tab = new ImageButton(getContext());
+        tab.setFocusable(true);
+        tab.setImageResource(resId);
+
+        tab.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                pager.setCurrentItem(position);
+            }
+        });
+
+        tabsContainer.addView(tab);
+        tab.setSelected(position == currentPosition);
+    }
+
+    private void updateExpanded() {
+        
+    }
+
+    private void updateTabStyles() {
+
+        for (int i = 0; i < tabCount; i++) {
+
+            View v = tabsContainer.getChildAt(i);
+
+            v.setLayoutParams(defaultTabLayoutParams);
+            v.setBackgroundResource(tabBackgroundResId);
+            if (shouldExpand) {
+                v.setPadding(0, 0, 0, 0);
+                v.setLayoutParams(new LinearLayout.LayoutParams(-1, -1, 1.0F));
+            } else {
+                v.setPadding(tabPadding, 0, tabPadding, 0);
+            }
+
+            if (v instanceof TextView) {
+
+                TextView tab = (TextView) v;
+                tab.setTextSize(TypedValue.COMPLEX_UNIT_PX, tabTextSize);
+                tab.setTypeface(tabTypeface, tabTypefaceStyle);
+                tab.setTextColor(tabTextColor);
+
+                // setAllCaps() is only available from API 14, so the upper case is made manually if we are on a
+                // pre-ICS-build
+                if (textAllCaps) {
+                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
+                        tab.setAllCaps(true);
+                    } else {
+                        tab.setText(tab.getText().toString().toUpperCase(locale));
+                    }
+                }
+            }
+        }
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+
+        if (!shouldExpand || MeasureSpec.getMode(widthMeasureSpec) == MeasureSpec.UNSPECIFIED) {
+            return;
+        }
+
+        int myWidth = getMeasuredWidth();
+        tabsContainer.measure(MeasureSpec.EXACTLY | myWidth, heightMeasureSpec);
+    }
+
+    private void scrollToChild(int position, int offset) {
+        if (tabCount == 0) {
+            return;
+        }
+
+        int newScrollX = tabsContainer.getChildAt(position).getLeft() + offset;
+
+        if (position > 0 || offset > 0) {
+            newScrollX -= scrollOffset;
+        }
+
+        if (newScrollX != lastScrollX) {
+            lastScrollX = newScrollX;
+            scrollTo(newScrollX, 0);
+        }
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+
+        if (isInEditMode() || tabCount == 0) {
+            return;
+        }
+
+        final int height = getHeight();
+
+        // draw indicator line
+
+        rectPaint.setColor(indicatorColor);
+
+        // default: line below current tab
+        View currentTab = tabsContainer.getChildAt(currentPosition);
+        float lineLeft = currentTab.getLeft();
+        float lineRight = currentTab.getRight();
+
+        // if there is an offset, start interpolating left and right coordinates between current and next tab
+        if (currentPositionOffset > 0f && currentPosition < tabCount - 1) {
+
+            View nextTab = tabsContainer.getChildAt(currentPosition + 1);
+            final float nextTabLeft = nextTab.getLeft();
+            final float nextTabRight = nextTab.getRight();
+
+            lineLeft = (currentPositionOffset * nextTabLeft + (1f - currentPositionOffset) * lineLeft);
+            lineRight = (currentPositionOffset * nextTabRight + (1f - currentPositionOffset) * lineRight);
+        }
+
+        canvas.drawRect(lineLeft, height - indicatorHeight, lineRight, height, rectPaint);
+
+        // draw underline
+
+        rectPaint.setColor(underlineColor);
+        canvas.drawRect(0, height - underlineHeight, tabsContainer.getWidth(), height, rectPaint);
+
+        // draw divider
+
+        dividerPaint.setColor(dividerColor);
+        for (int i = 0; i < tabCount - 1; i++) {
+            View tab = tabsContainer.getChildAt(i);
+            canvas.drawLine(tab.getRight(), dividerPadding, tab.getRight(), height - dividerPadding, dividerPaint);
+        }
+    }
+
+    private class PageListener implements OnPageChangeListener {
+
+        @Override
+        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
+
+            currentPosition = position;
+            currentPositionOffset = positionOffset;
+
+            scrollToChild(position, (int) (positionOffset * tabsContainer.getChildAt(position).getWidth()));
+
+            invalidate();
+
+            if (delegatePageListener != null) {
+                delegatePageListener.onPageScrolled(position, positionOffset, positionOffsetPixels);
+            }
+        }
+
+        @Override
+        public void onPageScrollStateChanged(int state) {
+            if (state == ViewPager.SCROLL_STATE_IDLE) {
+                scrollToChild(pager.getCurrentItem(), 0);
+            }
+
+            if (delegatePageListener != null) {
+                delegatePageListener.onPageScrollStateChanged(state);
+            }
+        }
+
+        @Override
+        public void onPageSelected(int position) {
+            if (delegatePageListener != null) {
+                delegatePageListener.onPageSelected(position);
+            }
+            for (int a = 0; a < tabsContainer.getChildCount(); a++) {
+                tabsContainer.getChildAt(a).setSelected(a == position);
+            }
+        }
+
+    }
+
+    public void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
+        if (!shouldExpand) {
+            post(new Runnable() {
+                public void run() {
+                    PagerSlidingTabStrip.this.notifyDataSetChanged();
+                }
+            });
+        }
+    }
+
+    public void setIndicatorColor(int indicatorColor) {
+        this.indicatorColor = indicatorColor;
+        invalidate();
+    }
+
+    public void setIndicatorColorResource(int resId) {
+        this.indicatorColor = getResources().getColor(resId);
+        invalidate();
+    }
+
+    public int getIndicatorColor() {
+        return this.indicatorColor;
+    }
+
+    public void setIndicatorHeight(int indicatorLineHeightPx) {
+        this.indicatorHeight = indicatorLineHeightPx;
+        invalidate();
+    }
+
+    public int getIndicatorHeight() {
+        return indicatorHeight;
+    }
+
+    public void setUnderlineColor(int underlineColor) {
+        this.underlineColor = underlineColor;
+        invalidate();
+    }
+
+    public void setUnderlineColorResource(int resId) {
+        this.underlineColor = getResources().getColor(resId);
+        invalidate();
+    }
+
+    public int getUnderlineColor() {
+        return underlineColor;
+    }
+
+    public void setDividerColor(int dividerColor) {
+        this.dividerColor = dividerColor;
+        invalidate();
+    }
+
+    public void setDividerColorResource(int resId) {
+        this.dividerColor = getResources().getColor(resId);
+        invalidate();
+    }
+
+    public int getDividerColor() {
+        return dividerColor;
+    }
+
+    public void setUnderlineHeight(int underlineHeightPx) {
+        this.underlineHeight = underlineHeightPx;
+        invalidate();
+    }
+
+    public int getUnderlineHeight() {
+        return underlineHeight;
+    }
+
+    public void setDividerPadding(int dividerPaddingPx) {
+        this.dividerPadding = dividerPaddingPx;
+        invalidate();
+    }
+
+    public int getDividerPadding() {
+        return dividerPadding;
+    }
+
+    public void setScrollOffset(int scrollOffsetPx) {
+        this.scrollOffset = scrollOffsetPx;
+        invalidate();
+    }
+
+    public int getScrollOffset() {
+        return scrollOffset;
+    }
+
+    public void setShouldExpand(boolean shouldExpand) {
+        this.shouldExpand = shouldExpand;
+        tabsContainer.setLayoutParams(new FrameLayout.LayoutParams(-1, -1));
+        updateTabStyles();
+        requestLayout();
+    }
+
+    public boolean getShouldExpand() {
+        return shouldExpand;
+    }
+
+    public boolean isTextAllCaps() {
+        return textAllCaps;
+    }
+
+    public void setAllCaps(boolean textAllCaps) {
+        this.textAllCaps = textAllCaps;
+    }
+
+    public void setTextSize(int textSizePx) {
+        this.tabTextSize = textSizePx;
+        updateTabStyles();
+    }
+
+    public int getTextSize() {
+        return tabTextSize;
+    }
+
+    public void setTextColor(int textColor) {
+        this.tabTextColor = textColor;
+        updateTabStyles();
+    }
+
+    public void setTextColorResource(int resId) {
+        this.tabTextColor = getResources().getColor(resId);
+        updateTabStyles();
+    }
+
+    public int getTextColor() {
+        return tabTextColor;
+    }
+
+    public void setTypeface(Typeface typeface, int style) {
+        this.tabTypeface = typeface;
+        this.tabTypefaceStyle = style;
+        updateTabStyles();
+    }
+
+    public void setTabBackground(int resId) {
+        this.tabBackgroundResId = resId;
+    }
+
+    public int getTabBackground() {
+        return tabBackgroundResId;
+    }
+
+    public void setTabPaddingLeftRight(int paddingPx) {
+        this.tabPadding = paddingPx;
+        updateTabStyles();
+    }
+
+    public int getTabPaddingLeftRight() {
+        return tabPadding;
+    }
+
+    @Override
+    public void onRestoreInstanceState(Parcelable state) {
+        SavedState savedState = (SavedState) state;
+        super.onRestoreInstanceState(savedState.getSuperState());
+        currentPosition = savedState.currentPosition;
+        requestLayout();
+    }
+
+    @Override
+    public Parcelable onSaveInstanceState() {
+        Parcelable superState = super.onSaveInstanceState();
+        SavedState savedState = new SavedState(superState);
+        savedState.currentPosition = currentPosition;
+        return savedState;
+    }
+
+    static class SavedState extends BaseSavedState {
+        int currentPosition;
+
+        public SavedState(Parcelable superState) {
+            super(superState);
+        }
+
+        private SavedState(Parcel in) {
+            super(in);
+            currentPosition = in.readInt();
+        }
+
+        @Override
+        public void writeToParcel(Parcel dest, int flags) {
+            super.writeToParcel(dest, flags);
+            dest.writeInt(currentPosition);
+        }
+
+        public static final Parcelable.Creator<SavedState> CREATOR = new Parcelable.Creator<SavedState>() {
+            @Override
+            public SavedState createFromParcel(Parcel in) {
+                return new SavedState(in);
+            }
+
+            @Override
+            public SavedState[] newArray(int size) {
+                return new SavedState[size];
+            }
+        };
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/Views/PinnedHeaderListView.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/PinnedHeaderListView.java
new file mode 100644
index 000000000..3af001693
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/PinnedHeaderListView.java
@@ -0,0 +1,274 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.tomato.ui.Views;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.util.AttributeSet;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AbsListView;
+import android.widget.AbsListView.OnScrollListener;
+import android.widget.AdapterView;
+import android.widget.HeaderViewListAdapter;
+import android.widget.ListAdapter;
+import android.widget.ListView;
+
+import org.tomato.messenger.FileLog;
+
+public class PinnedHeaderListView extends ListView implements OnScrollListener, View.OnTouchListener {
+
+    private OnScrollListener mOnScrollListener;
+
+    public static interface PinnedSectionedHeaderAdapter {
+        public boolean isSectionHeader(int position);
+
+        public int getSectionForPosition(int position);
+
+        public View getSectionHeaderView(int section, View convertView, ViewGroup parent);
+
+        public int getSectionHeaderViewType(int section);
+
+        public int getCount();
+
+    }
+
+    private PinnedSectionedHeaderAdapter mAdapter;
+    private OnTouchListener mForwardingTouchListener = null;
+    private float mLastUpEventY = -1;
+    private View mCurrentHeader;
+    private int mCurrentHeaderViewType = 0;
+    private float mHeaderOffset;
+    private boolean mShouldPin = true;
+    private int mCurrentSection = 0;
+    private int mWidthMode;
+    public int exHeaderRightPadding = 0;
+
+    public PinnedHeaderListView(Context context) {
+        super(context);
+        super.setOnScrollListener(this);
+        super.setOnTouchListener(this);
+    }
+
+    public PinnedHeaderListView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        super.setOnScrollListener(this);
+        super.setOnTouchListener(this);
+    }
+
+    public PinnedHeaderListView(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+        super.setOnScrollListener(this);
+        super.setOnTouchListener(this);
+    }
+
+    public void setPinHeaders(boolean shouldPin) {
+        mShouldPin = shouldPin;
+    }
+
+    @Override
+    public void setAdapter(ListAdapter adapter) {
+        if (mAdapter == adapter) {
+            return;
+        }
+        mCurrentHeader = null;
+        if (adapter instanceof PinnedSectionedHeaderAdapter) {
+            mAdapter = (PinnedSectionedHeaderAdapter) adapter;
+        } else {
+            mAdapter = null;
+        }
+        super.setAdapter(adapter);
+    }
+
+    @Override
+    public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
+        if (mOnScrollListener != null) {
+            mOnScrollListener.onScroll(view, firstVisibleItem, visibleItemCount, totalItemCount);
+        }
+        if (mAdapter == null) {
+            return;
+        }
+
+        if (mAdapter.getCount() == 0 || !mShouldPin || (firstVisibleItem < getHeaderViewsCount())) {
+            mCurrentHeader = null;
+            mHeaderOffset = 0.0f;
+            for (int i = firstVisibleItem; i < firstVisibleItem + visibleItemCount; i++) {
+                View header = getChildAt(i);
+                if (header != null) {
+                    header.setVisibility(VISIBLE);
+                }
+            }
+            return;
+        }
+
+        firstVisibleItem -= getHeaderViewsCount();
+
+        int section = mAdapter.getSectionForPosition(firstVisibleItem);
+        int viewType = mAdapter.getSectionHeaderViewType(section);
+        mCurrentHeader = getSectionHeaderView(section, mCurrentHeaderViewType != viewType ? null : mCurrentHeader);
+        if (mCurrentHeader != null && mCurrentHeader.getPaddingLeft() != getPaddingLeft()) {
+            mCurrentHeader.setPadding(getPaddingLeft(), mCurrentHeader.getPaddingTop(), getPaddingRight() + (int)(getResources().getDisplayMetrics().density * exHeaderRightPadding), 0);
+        }
+        ensurePinnedHeaderLayout(mCurrentHeader, false);
+        mCurrentHeaderViewType = viewType;
+
+        mHeaderOffset = 0.0f;
+
+        for (int i = firstVisibleItem; i < firstVisibleItem + visibleItemCount; i++) {
+            if (mAdapter.isSectionHeader(i)) {
+                View header = getChildAt(i - firstVisibleItem);
+                float headerTop = header.getTop();
+                float pinnedHeaderHeight = mCurrentHeader.getMeasuredHeight();
+                header.setVisibility(VISIBLE);
+                if (pinnedHeaderHeight >= headerTop && headerTop > -1) {
+                    mHeaderOffset = headerTop - header.getHeight();
+                } else if (headerTop <= 0) {
+                    header.setVisibility(INVISIBLE);
+                }
+            }
+        }
+
+        invalidate();
+    }
+
+    @Override
+    public void onScrollStateChanged(AbsListView view, int scrollState) {
+        if (mOnScrollListener != null) {
+            mOnScrollListener.onScrollStateChanged(view, scrollState);
+        }
+    }
+
+    private View getSectionHeaderView(int section, View oldView) {
+        boolean shouldLayout = section != mCurrentSection || oldView == null;
+
+        View view = mAdapter.getSectionHeaderView(section, oldView, this);
+        if (shouldLayout) {
+            // a new section, thus a new header. We should lay it out again
+            ensurePinnedHeaderLayout(view, false);
+            mCurrentSection = section;
+        }
+        return view;
+    }
+
+    @Override
+    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
+        super.onSizeChanged(w, h, oldw, oldh);
+        if (mAdapter == null) {
+            return;
+        }
+        if (mCurrentHeader != null) {
+            ensurePinnedHeaderLayout(mCurrentHeader, true);
+        }
+    }
+
+    private void ensurePinnedHeaderLayout(View header, boolean forceLayout) {
+        if (header.isLayoutRequested() || forceLayout) {
+            int widthSpec = MeasureSpec.makeMeasureSpec(getMeasuredWidth(), mWidthMode);
+            
+            int heightSpec;
+            ViewGroup.LayoutParams layoutParams = header.getLayoutParams();
+            if (layoutParams != null && layoutParams.height > 0) {
+                heightSpec = MeasureSpec.makeMeasureSpec(layoutParams.height, MeasureSpec.EXACTLY);
+            } else {
+                heightSpec = MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED);
+            }
+            try {
+                header.measure(widthSpec, heightSpec);
+            } catch (Exception e) {
+                FileLog.e("tmessages", e);
+            }
+            header.layout(0, 0, header.getMeasuredWidth(), header.getMeasuredHeight());
+        }
+    }
+
+    @Override
+    protected void dispatchDraw(Canvas canvas) {
+        super.dispatchDraw(canvas);
+        if (mAdapter == null || !mShouldPin || mCurrentHeader == null) {
+            return;
+        }
+        int saveCount = canvas.save();
+        canvas.translate(0, mHeaderOffset);
+        canvas.clipRect(0, 0, getWidth(), mCurrentHeader.getMeasuredHeight()); // needed for < HONEYCOMB
+        mCurrentHeader.draw(canvas);
+        canvas.restoreToCount(saveCount);
+    }
+
+    @Override
+    public boolean performItemClick(View view, int position, long id) {
+        if (mAdapter != null && mLastUpEventY > 0 && mCurrentHeader != null && mLastUpEventY < mCurrentHeader.getBottom()) {
+            mCurrentHeader.performClick();
+            mLastUpEventY = -1;
+            return true;
+        }
+        return super.performItemClick(view, position, id);
+    }
+
+    @Override
+    public void setOnTouchListener(OnTouchListener l) {
+        mForwardingTouchListener = l;
+    }
+
+    @Override
+    public boolean onTouch(View v, MotionEvent event) {
+        if (mForwardingTouchListener != null) {
+            mForwardingTouchListener.onTouch(v, event);
+        }
+
+        if (mCurrentHeader != null && event.getY() < mCurrentHeader.getHeight()) {
+            if (event.getAction() == MotionEvent.ACTION_UP) {
+                mLastUpEventY = event.getY();
+            }
+        }
+        return false;
+    }
+
+    @Override
+    public void setOnScrollListener(OnScrollListener l) {
+        mOnScrollListener = l;
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+
+        mWidthMode = MeasureSpec.getMode(widthMeasureSpec);
+    }
+
+    public void setOnItemClickListener(PinnedHeaderListView.OnItemClickListener listener) {
+        super.setOnItemClickListener(listener);
+    }
+
+    public static abstract class OnItemClickListener implements AdapterView.OnItemClickListener {
+        @Override
+        public void onItemClick(AdapterView<?> adapterView, View view, int rawPosition, long id) {
+            SectionedBaseAdapter adapter;
+            if (adapterView.getAdapter() instanceof HeaderViewListAdapter) {
+                HeaderViewListAdapter wrapperAdapter = (HeaderViewListAdapter) adapterView.getAdapter();
+                adapter = (SectionedBaseAdapter) wrapperAdapter.getWrappedAdapter();
+            } else {
+                adapter = (SectionedBaseAdapter) adapterView.getAdapter();
+            }
+            int section = adapter.getSectionForPosition(rawPosition);
+            int position = adapter.getPositionInSectionForPosition(rawPosition);
+
+            if (position == -1) {
+                onSectionClick(adapterView, view, section, id);
+            } else {
+                onItemClick(adapterView, view, section, position, id);
+            }
+        }
+
+        public abstract void onItemClick(AdapterView<?> adapterView, View view, int section, int position, long id);
+
+        public abstract void onSectionClick(AdapterView<?> adapterView, View view, int section, long id);
+
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/tomato/ui/Views/PopupAudioView.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/PopupAudioView.java
new file mode 100644
index 000000000..f18415d01
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/PopupAudioView.java
@@ -0,0 +1,355 @@
+/*
+ * This is the source code of Telegram for Android v. 1.4.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.tomato.ui.Views;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.drawable.Drawable;
+import android.text.Layout;
+import android.text.StaticLayout;
+import android.text.TextPaint;
+import android.view.MotionEvent;
+import android.view.SoundEffectConstants;
+
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.MediaController;
+import org.tomato.android.MessageObject;
+import org.tomato.messenger.FileLoader;
+import org.tomato.messenger.R;
+import org.tomato.ui.Cells.BaseCell;
+
+import java.io.File;
+
+public class PopupAudioView extends BaseCell implements SeekBar.SeekBarDelegate, MediaController.FileDownloadProgressListener {
+
+    private boolean wasLayout = false;
+    protected MessageObject currentMessageObject;
+
+    private static Drawable backgroundMediaDrawableIn;
+
+    private static Drawable[][] statesDrawable = new Drawable[8][2];
+    private static TextPaint timePaint;
+
+    private SeekBar seekBar;
+    private ProgressView progressView;
+    private int seekBarX;
+    private int seekBarY;
+
+    private int buttonState = 0;
+    private int buttonX;
+    private int buttonY;
+    private int buttonPressed = 0;
+
+    private StaticLayout timeLayout;
+    private int timeX;
+    int timeWidth = 0;
+    private String lastTimeString = null;
+
+    private int TAG;
+
+    public PopupAudioView(Context context) {
+        super(context);
+        if (backgroundMediaDrawableIn == null) {
+            backgroundMediaDrawableIn = getResources().getDrawable(R.drawable.msg_in_photo);
+            statesDrawable[0][0] = getResources().getDrawable(R.drawable.play1);
+            statesDrawable[0][1] = getResources().getDrawable(R.drawable.play1_pressed);
+            statesDrawable[1][0] = getResources().getDrawable(R.drawable.pause1);
+            statesDrawable[1][1] = getResources().getDrawable(R.drawable.pause1_pressed);
+            statesDrawable[2][0] = getResources().getDrawable(R.drawable.audioload1);
+            statesDrawable[2][1] = getResources().getDrawable(R.drawable.audioload1_pressed);
+            statesDrawable[3][0] = getResources().getDrawable(R.drawable.audiocancel1);
+            statesDrawable[3][1] = getResources().getDrawable(R.drawable.audiocancel1_pressed);
+
+            statesDrawable[4][0] = getResources().getDrawable(R.drawable.play2);
+            statesDrawable[4][1] = getResources().getDrawable(R.drawable.play2_pressed);
+            statesDrawable[5][0] = getResources().getDrawable(R.drawable.pause2);
+            statesDrawable[5][1] = getResources().getDrawable(R.drawable.pause2_pressed);
+            statesDrawable[6][0] = getResources().getDrawable(R.drawable.audioload2);
+            statesDrawable[6][1] = getResources().getDrawable(R.drawable.audioload2_pressed);
+            statesDrawable[7][0] = getResources().getDrawable(R.drawable.audiocancel2);
+            statesDrawable[7][1] = getResources().getDrawable(R.drawable.audiocancel2_pressed);
+
+            timePaint = new TextPaint(TextPaint.ANTI_ALIAS_FLAG);
+            timePaint.setTextSize(AndroidUtilities.dp(16));
+        }
+
+        TAG = MediaController.getInstance().generateObserverTag();
+
+        seekBar = new SeekBar(getContext());
+        seekBar.delegate = this;
+        progressView = new ProgressView();
+    }
+
+    public void setMessageObject(MessageObject messageObject) {
+        if (currentMessageObject != messageObject) {
+            int uid = messageObject.messageOwner.media.audio.user_id;
+            if (uid == 0) {
+                uid = messageObject.messageOwner.from_id;
+            }
+
+            seekBar.type = 1;
+            progressView.setProgressColors(0xffd9e2eb, 0xff86c5f8);
+
+            currentMessageObject = messageObject;
+            wasLayout = false;
+
+            requestLayout();
+        }
+        updateButtonState();
+    }
+
+    public final MessageObject getMessageObject() {
+        return currentMessageObject;
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        int width = MeasureSpec.getSize(widthMeasureSpec);
+        setMeasuredDimension(width, AndroidUtilities.dp(56));
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        if (currentMessageObject == null) {
+            super.onLayout(changed, left, top, right, bottom);
+            return;
+        }
+
+        seekBarX = AndroidUtilities.dp(40);
+        buttonX = AndroidUtilities.dp(10);
+        timeX = getMeasuredWidth() - timeWidth - AndroidUtilities.dp(16);
+
+        seekBar.width = getMeasuredWidth() - AndroidUtilities.dp(56) - timeWidth;
+        seekBar.height = AndroidUtilities.dp(30);
+        progressView.width = getMeasuredWidth() - AndroidUtilities.dp(80) - timeWidth;
+        progressView.height = AndroidUtilities.dp(30);
+        seekBarY = AndroidUtilities.dp(13);
+        buttonY = AndroidUtilities.dp(10);
+
+        updateProgress();
+
+        if (changed || !wasLayout) {
+            wasLayout = true;
+        }
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        if (currentMessageObject == null) {
+            return;
+        }
+
+        if (!wasLayout) {
+            requestLayout();
+            return;
+        }
+
+        setDrawableBounds(backgroundMediaDrawableIn, 0, 0, getMeasuredWidth(), getMeasuredHeight());
+        backgroundMediaDrawableIn.draw(canvas);
+
+        if (currentMessageObject == null) {
+            return;
+        }
+
+        canvas.save();
+        if (buttonState == 0 || buttonState == 1) {
+            canvas.translate(seekBarX, seekBarY);
+            seekBar.draw(canvas);
+        } else {
+            canvas.translate(seekBarX + AndroidUtilities.dp(12), seekBarY);
+            progressView.draw(canvas);
+        }
+        canvas.restore();
+
+        int state = buttonState + 4;
+        timePaint.setColor(0xffa1aab3);
+        Drawable buttonDrawable = statesDrawable[state][buttonPressed];
+        int side = AndroidUtilities.dp(36);
+        int x = (side - buttonDrawable.getIntrinsicWidth()) / 2;
+        int y = (side - buttonDrawable.getIntrinsicHeight()) / 2;
+        setDrawableBounds(buttonDrawable, x + buttonX, y + buttonY);
+        buttonDrawable.draw(canvas);
+
+        canvas.save();
+        canvas.translate(timeX, AndroidUtilities.dp(18));
+        timeLayout.draw(canvas);
+        canvas.restore();
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        MediaController.getInstance().removeLoadingFileObserver(this);
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        float x = event.getX();
+        float y = event.getY();
+        boolean result = seekBar.onTouch(event.getAction(), event.getX() - seekBarX, event.getY() - seekBarY);
+        if (result) {
+            if (event.getAction() == MotionEvent.ACTION_DOWN) {
+                getParent().requestDisallowInterceptTouchEvent(true);
+            }
+            invalidate();
+        } else {
+            int side = AndroidUtilities.dp(36);
+            if (event.getAction() == MotionEvent.ACTION_DOWN) {
+                if (x >= buttonX && x <= buttonX + side && y >= buttonY && y <= buttonY + side) {
+                    buttonPressed = 1;
+                    invalidate();
+                    result = true;
+                }
+            } else if (buttonPressed == 1) {
+                if (event.getAction() == MotionEvent.ACTION_UP) {
+                    buttonPressed = 0;
+                    playSoundEffect(SoundEffectConstants.CLICK);
+                    didPressedButton();
+                    invalidate();
+                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
+                    buttonPressed = 0;
+                    invalidate();
+                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
+                    if (!(x >= buttonX && x <= buttonX + side && y >= buttonY && y <= buttonY + side)) {
+                        buttonPressed = 0;
+                        invalidate();
+                    }
+                }
+            }
+            if (!result) {
+                result = super.onTouchEvent(event);
+            }
+        }
+
+        return result;
+    }
+
+    private void didPressedButton() {
+        if (buttonState == 0) {
+            boolean result = MediaController.getInstance().playAudio(currentMessageObject);
+            if (result) {
+                buttonState = 1;
+                invalidate();
+            }
+        } else if (buttonState == 1) {
+            boolean result = MediaController.getInstance().pauseAudio(currentMessageObject);
+            if (result) {
+                buttonState = 0;
+                invalidate();
+            }
+        } else if (buttonState == 2) {
+            FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.audio, true);
+            buttonState = 3;
+            invalidate();
+        } else if (buttonState == 3) {
+            FileLoader.getInstance().cancelLoadFile(currentMessageObject.messageOwner.media.audio);
+            buttonState = 2;
+            invalidate();
+        }
+    }
+
+    public void updateProgress() {
+        if (currentMessageObject == null) {
+            return;
+        }
+
+        if (!seekBar.isDragging()) {
+            seekBar.setProgress(currentMessageObject.audioProgress);
+        }
+
+        int duration = 0;
+        if (!MediaController.getInstance().isPlayingAudio(currentMessageObject)) {
+            duration = currentMessageObject.messageOwner.media.audio.duration;
+        } else {
+            duration = currentMessageObject.audioProgressSec;
+        }
+        String timeString = String.format("%02d:%02d", duration / 60, duration % 60);
+        if (lastTimeString == null || lastTimeString != null && !lastTimeString.equals(timeString)) {
+            timeWidth = (int)Math.ceil(timePaint.measureText(timeString));
+            timeLayout = new StaticLayout(timeString, timePaint, timeWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+        }
+        invalidate();
+    }
+
+    public void downloadAudioIfNeed() {
+        if (buttonState == 2) {
+            FileLoader.getInstance().loadFile(currentMessageObject.messageOwner.media.audio, true);
+            buttonState = 3;
+            invalidate();
+        }
+    }
+
+    public void updateButtonState() {
+        String fileName = currentMessageObject.getFileName();
+        File cacheFile = FileLoader.getPathToMessage(currentMessageObject.messageOwner);
+        if (cacheFile.exists()) {
+            MediaController.getInstance().removeLoadingFileObserver(this);
+            boolean playing = MediaController.getInstance().isPlayingAudio(currentMessageObject);
+            if (!playing || playing && MediaController.getInstance().isAudioPaused()) {
+                buttonState = 0;
+            } else {
+                buttonState = 1;
+            }
+            progressView.setProgress(0);
+        } else {
+            MediaController.getInstance().addLoadingFileObserver(fileName, this);
+            if (!FileLoader.getInstance().isLoadingFile(fileName)) {
+                buttonState = 2;
+                progressView.setProgress(0);
+            } else {
+                buttonState = 3;
+                Float progress = FileLoader.getInstance().getFileProgress(fileName);
+                if (progress != null) {
+                    progressView.setProgress(progress);
+                } else {
+                    progressView.setProgress(0);
+                }
+            }
+        }
+        updateProgress();
+    }
+
+    @Override
+    public void onFailedDownload(String fileName) {
+        updateButtonState();
+    }
+
+    @Override
+    public void onSuccessDownload(String fileName) {
+        updateButtonState();
+    }
+
+    @Override
+    public void onProgressDownload(String fileName, float progress) {
+        progressView.setProgress(progress);
+        if (buttonState != 3) {
+            updateButtonState();
+        }
+        invalidate();
+    }
+
+    @Override
+    public void onProgressUpload(String fileName, float progress, boolean isEncrypted) {
+
+    }
+
+    @Override
+    public int getObserverTag() {
+        return TAG;
+    }
+
+    @Override
+    public void onSeekBarDrag(float progress) {
+        if (currentMessageObject == null) {
+            return;
+        }
+        currentMessageObject.audioProgress = progress;
+        MediaController.getInstance().seekToProgress(currentMessageObject, progress);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ProgressView.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/ProgressView.java
similarity index 94%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/ProgressView.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/ProgressView.java
index 671c858f2..bc16af92b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ProgressView.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/ProgressView.java
@@ -6,12 +6,12 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.ui.Views;
+package org.tomato.ui.Views;
 
 import android.graphics.Canvas;
 import android.graphics.Paint;
 
-import org.telegram.android.AndroidUtilities;
+import org.tomato.android.AndroidUtilities;
 
 public class ProgressView {
     private Paint innerPaint;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/Scroller.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/Scroller.java
similarity index 99%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/Scroller.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/Scroller.java
index b87b9b7cb..18067c1ec 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/Scroller.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/Scroller.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package org.telegram.ui.Views;
+package org.tomato.ui.Views;
 
 import android.content.Context;
 import android.hardware.SensorManager;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/SectionedBaseAdapter.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/SectionedBaseAdapter.java
old mode 100755
new mode 100644
similarity index 98%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/SectionedBaseAdapter.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/SectionedBaseAdapter.java
index 1c9f97d68..75c073324
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/SectionedBaseAdapter.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/SectionedBaseAdapter.java
@@ -6,14 +6,14 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.ui.Views;
+package org.tomato.ui.Views;
 
 import android.database.DataSetObserver;
 import android.util.SparseArray;
 import android.view.View;
 import android.view.ViewGroup;
 
-import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.tomato.ui.Adapters.BaseFragmentAdapter;
 
 public abstract class SectionedBaseAdapter extends BaseFragmentAdapter implements PinnedHeaderListView.PinnedSectionedHeaderAdapter {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/SeekBar.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/SeekBar.java
similarity index 97%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/SeekBar.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/SeekBar.java
index 37543fc27..615f1f5cd 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/SeekBar.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/SeekBar.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.ui.Views;
+package org.tomato.ui.Views;
 
 import android.content.Context;
 import android.graphics.Canvas;
@@ -14,8 +14,8 @@
 import android.graphics.drawable.Drawable;
 import android.view.MotionEvent;
 
-import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.R;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.messenger.R;
 
 public class SeekBar {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/SettingsSectionLayout.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/SettingsSectionLayout.java
similarity index 95%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/SettingsSectionLayout.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/SettingsSectionLayout.java
index 547e5352f..43abe12c3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/SettingsSectionLayout.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/SettingsSectionLayout.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.ui.Views;
+package org.tomato.ui.Views;
 
 import android.content.Context;
 import android.graphics.Typeface;
@@ -17,8 +17,8 @@
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
-import org.telegram.android.AndroidUtilities;
-import org.telegram.android.LocaleController;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.android.LocaleController;
 
 public class SettingsSectionLayout extends LinearLayout {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/SizeNotifierRelativeLayout.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/SizeNotifierRelativeLayout.java
similarity index 96%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/SizeNotifierRelativeLayout.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/SizeNotifierRelativeLayout.java
index ffe96479a..cfc8fda17 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/SizeNotifierRelativeLayout.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/SizeNotifierRelativeLayout.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.ui.Views;
+package org.tomato.ui.Views;
 
 import android.content.Context;
 import android.graphics.Canvas;
@@ -14,8 +14,8 @@
 import android.graphics.drawable.Drawable;
 import android.widget.RelativeLayout;
 
-import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.FileLog;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.messenger.FileLog;
 
 public class SizeNotifierRelativeLayout extends RelativeLayout {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/SlideView.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/SlideView.java
similarity index 98%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/SlideView.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/SlideView.java
index 3462651ed..f85de344b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/SlideView.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/SlideView.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013.
  */
 
-package org.telegram.ui.Views;
+package org.tomato.ui.Views;
 
 import android.content.Context;
 import android.os.Bundle;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/TimerButton.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/TimerButton.java
similarity index 96%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/TimerButton.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/TimerButton.java
index 9c6c43048..88b773e28 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/TimerButton.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/TimerButton.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.ui.Views;
+package org.tomato.ui.Views;
 
 import android.content.Context;
 import android.graphics.Canvas;
@@ -19,9 +19,9 @@
 import android.util.AttributeSet;
 import android.view.View;
 
-import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
 
 public class TimerButton extends View {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/TypingDotsDrawable.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/TypingDotsDrawable.java
similarity index 97%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/TypingDotsDrawable.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/TypingDotsDrawable.java
index ff9d59c4d..882fb9bc3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/TypingDotsDrawable.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/TypingDotsDrawable.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.ui.Views;
+package org.tomato.ui.Views;
 
 import android.graphics.Canvas;
 import android.graphics.ColorFilter;
@@ -14,7 +14,7 @@
 import android.graphics.drawable.Drawable;
 import android.view.animation.DecelerateInterpolator;
 
-import org.telegram.android.AndroidUtilities;
+import org.tomato.android.AndroidUtilities;
 
 public class TypingDotsDrawable extends Drawable {
     private boolean isChat = false;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/URLSpanNoUnderline.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/URLSpanNoUnderline.java
similarity index 94%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/URLSpanNoUnderline.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/URLSpanNoUnderline.java
index c2d7b1e0f..8d0f283fe 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/URLSpanNoUnderline.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/URLSpanNoUnderline.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.ui.Views;
+package org.tomato.ui.Views;
 
 import android.text.TextPaint;
 import android.text.style.URLSpan;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/VideoSeekBarView.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/VideoSeekBarView.java
similarity index 97%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/VideoSeekBarView.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/VideoSeekBarView.java
index f414b650c..548ce30d2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/VideoSeekBarView.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/VideoSeekBarView.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.ui.Views;
+package org.tomato.ui.Views;
 
 import android.content.Context;
 import android.graphics.Canvas;
@@ -16,8 +16,8 @@
 import android.view.MotionEvent;
 import android.view.View;
 
-import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.R;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.messenger.R;
 
 public class VideoSeekBarView extends View {
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/VideoTimelineView.java b/TMessagesProj/src/main/java/org/tomato/ui/Views/VideoTimelineView.java
similarity index 98%
rename from TMessagesProj/src/main/java/org/telegram/ui/Views/VideoTimelineView.java
rename to TMessagesProj/src/main/java/org/tomato/ui/Views/VideoTimelineView.java
index 451a7e14d..d0a36ab00 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/VideoTimelineView.java
+++ b/TMessagesProj/src/main/java/org/tomato/ui/Views/VideoTimelineView.java
@@ -6,7 +6,7 @@
  * Copyright Nikolai Kudashov, 2013-2014.
  */
 
-package org.telegram.ui.Views;
+package org.tomato.ui.Views;
 
 import android.annotation.TargetApi;
 import android.content.Context;
@@ -21,9 +21,9 @@
 import android.view.MotionEvent;
 import android.view.View;
 
-import org.telegram.android.AndroidUtilities;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.R;
+import org.tomato.android.AndroidUtilities;
+import org.tomato.messenger.FileLog;
+import org.tomato.messenger.R;
 
 import java.util.ArrayList;
 
diff --git a/TMessagesProj/src/main/project.properties b/TMessagesProj/src/main/project.properties
new file mode 100644
index 000000000..4ab125693
--- /dev/null
+++ b/TMessagesProj/src/main/project.properties
@@ -0,0 +1,14 @@
+# This file is automatically generated by Android Tools.
+# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
+#
+# This file must be checked in Version Control Systems.
+#
+# To customize properties used by the Ant build system edit
+# "ant.properties", and override values to adapt the script to your
+# project structure.
+#
+# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
+#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
+
+# Project target.
+target=android-19
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/background_hd.jpg b/TMessagesProj/src/main/res/drawable-hdpi/background_hd.jpg
index 80af0fd1a..919760907 100644
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/background_hd.jpg and b/TMessagesProj/src/main/res/drawable-hdpi/background_hd.jpg differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_logo.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_logo.png
index a9237d7b9..61e318b29 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_logo.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_ab_logo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/ic_launcher.png b/TMessagesProj/src/main/res/drawable-hdpi/ic_launcher.png
index 135cc0fd1..36048ab6e 100644
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/ic_launcher.png and b/TMessagesProj/src/main/res/drawable-hdpi/ic_launcher.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/intro1.png b/TMessagesProj/src/main/res/drawable-hdpi/intro1.png
index 8eb54b3ca..c9cad2441 100755
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/intro1.png and b/TMessagesProj/src/main/res/drawable-hdpi/intro1.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/telegram_avatar.png b/TMessagesProj/src/main/res/drawable-hdpi/telegram_avatar.png
index 254352f2e..92bc06a9e 100644
Binary files a/TMessagesProj/src/main/res/drawable-hdpi/telegram_avatar.png and b/TMessagesProj/src/main/res/drawable-hdpi/telegram_avatar.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_from_bg_normal.9.png b/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_from_bg_normal.9.png
new file mode 100644
index 000000000..10361054a
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_from_bg_normal.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_from_bg_pressed.9.png b/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_from_bg_pressed.9.png
new file mode 100644
index 000000000..e82abf6d2
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_from_bg_pressed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_img_from_bg_mask.9.png b/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_img_from_bg_mask.9.png
new file mode 100644
index 000000000..5527a61cb
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_img_from_bg_mask.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_img_from_bg_mask_press.9.png b/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_img_from_bg_mask_press.9.png
new file mode 100644
index 000000000..ec5a355fb
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_img_from_bg_mask_press.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_img_from_default_bg.9.png b/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_img_from_default_bg.9.png
new file mode 100644
index 000000000..0870788f6
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_img_from_default_bg.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_img_to_bg_mask.9.png b/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_img_to_bg_mask.9.png
new file mode 100644
index 000000000..269399f16
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_img_to_bg_mask.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_img_to_bg_mask_press.9.png b/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_img_to_bg_mask_press.9.png
new file mode 100644
index 000000000..df8ddb0f9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_img_to_bg_mask_press.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_img_to_default_bg.9.png b/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_img_to_default_bg.9.png
new file mode 100644
index 000000000..6c9d1d2a9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_img_to_default_bg.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_to_bg_normal.9.png b/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_to_bg_normal.9.png
new file mode 100644
index 000000000..5665d373d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_to_bg_normal.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_to_bg_pressed.9.png b/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_to_bg_pressed.9.png
new file mode 100644
index 000000000..f2deeffb8
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/wechat_chat_to_bg_pressed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/wechat_chatfrom_bg_pic_from.9.png b/TMessagesProj/src/main/res/drawable-hdpi/wechat_chatfrom_bg_pic_from.9.png
new file mode 100644
index 000000000..3dfdc3393
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/wechat_chatfrom_bg_pic_from.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/wechat_chatfrom_bg_pic_to.9.png b/TMessagesProj/src/main/res/drawable-hdpi/wechat_chatfrom_bg_pic_to.9.png
new file mode 100644
index 000000000..499167c1e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/wechat_chatfrom_bg_pic_to.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/zalo_in_text_normal.9.png b/TMessagesProj/src/main/res/drawable-hdpi/zalo_in_text_normal.9.png
new file mode 100644
index 000000000..589fcd310
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/zalo_in_text_normal.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/zalo_in_text_pressed.9.png b/TMessagesProj/src/main/res/drawable-hdpi/zalo_in_text_pressed.9.png
new file mode 100644
index 000000000..470277c6a
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/zalo_in_text_pressed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/zalo_media_in_normal.9.png b/TMessagesProj/src/main/res/drawable-hdpi/zalo_media_in_normal.9.png
new file mode 100644
index 000000000..f3371b632
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/zalo_media_in_normal.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/zalo_media_in_pressed.9.png b/TMessagesProj/src/main/res/drawable-hdpi/zalo_media_in_pressed.9.png
new file mode 100644
index 000000000..426a422b9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/zalo_media_in_pressed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/zalo_media_out_normal.9.png b/TMessagesProj/src/main/res/drawable-hdpi/zalo_media_out_normal.9.png
new file mode 100644
index 000000000..365b376d0
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/zalo_media_out_normal.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/zalo_media_out_pressed.9.png b/TMessagesProj/src/main/res/drawable-hdpi/zalo_media_out_pressed.9.png
new file mode 100644
index 000000000..bc7e9ac49
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/zalo_media_out_pressed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/zalo_out_text_normal.9.png b/TMessagesProj/src/main/res/drawable-hdpi/zalo_out_text_normal.9.png
new file mode 100644
index 000000000..9a21e847b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/zalo_out_text_normal.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/zalo_out_text_pressed.9.png b/TMessagesProj/src/main/res/drawable-hdpi/zalo_out_text_pressed.9.png
new file mode 100644
index 000000000..3ed873beb
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/zalo_out_text_pressed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/background_hd.jpg b/TMessagesProj/src/main/res/drawable-mdpi/background_hd.jpg
index 5e736ff6d..2b0e04bf9 100644
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/background_hd.jpg and b/TMessagesProj/src/main/res/drawable-mdpi/background_hd.jpg differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_logo.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_logo.png
index 15024faba..82cdf6e9d 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_logo.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_ab_logo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/ic_launcher.png b/TMessagesProj/src/main/res/drawable-mdpi/ic_launcher.png
index d47edd559..61b28cc7a 100644
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/ic_launcher.png and b/TMessagesProj/src/main/res/drawable-mdpi/ic_launcher.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/intro1.png b/TMessagesProj/src/main/res/drawable-mdpi/intro1.png
index 9a068122e..5732ffbee 100755
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/intro1.png and b/TMessagesProj/src/main/res/drawable-mdpi/intro1.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/telegram_avatar.png b/TMessagesProj/src/main/res/drawable-mdpi/telegram_avatar.png
index 04bf4ff70..52943a7f5 100644
Binary files a/TMessagesProj/src/main/res/drawable-mdpi/telegram_avatar.png and b/TMessagesProj/src/main/res/drawable-mdpi/telegram_avatar.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/zalo_in_text_normal.9.png b/TMessagesProj/src/main/res/drawable-mdpi/zalo_in_text_normal.9.png
new file mode 100644
index 000000000..3fab74adc
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/zalo_in_text_normal.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/zalo_in_text_pressed.9.png b/TMessagesProj/src/main/res/drawable-mdpi/zalo_in_text_pressed.9.png
new file mode 100644
index 000000000..589e2cbc4
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/zalo_in_text_pressed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/zalo_media_in_normal.9.png b/TMessagesProj/src/main/res/drawable-mdpi/zalo_media_in_normal.9.png
new file mode 100644
index 000000000..068c4abe7
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/zalo_media_in_normal.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/zalo_media_in_pressed.9.png b/TMessagesProj/src/main/res/drawable-mdpi/zalo_media_in_pressed.9.png
new file mode 100644
index 000000000..9229d30d0
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/zalo_media_in_pressed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/zalo_media_out_normal.9.png b/TMessagesProj/src/main/res/drawable-mdpi/zalo_media_out_normal.9.png
new file mode 100644
index 000000000..63e568f89
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/zalo_media_out_normal.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/zalo_media_out_pressed.9.png b/TMessagesProj/src/main/res/drawable-mdpi/zalo_media_out_pressed.9.png
new file mode 100644
index 000000000..3c285d799
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/zalo_media_out_pressed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/zalo_out_text_normal.9.png b/TMessagesProj/src/main/res/drawable-mdpi/zalo_out_text_normal.9.png
new file mode 100644
index 000000000..85028251b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/zalo_out_text_normal.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/zalo_out_text_pressed.9.png b/TMessagesProj/src/main/res/drawable-mdpi/zalo_out_text_pressed.9.png
new file mode 100644
index 000000000..e11bd8d09
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/zalo_out_text_pressed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/background_hd.jpg b/TMessagesProj/src/main/res/drawable-xhdpi/background_hd.jpg
index 9988286cd..1c07dbfde 100644
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/background_hd.jpg and b/TMessagesProj/src/main/res/drawable-xhdpi/background_hd.jpg differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/balloon_incoming_focused.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/balloon_incoming_focused.9.png
new file mode 100644
index 000000000..a1adaa50f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/balloon_incoming_focused.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/balloon_incoming_normal.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/balloon_incoming_normal.9.png
new file mode 100644
index 000000000..6b1c861af
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/balloon_incoming_normal.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/balloon_outgoing_focused.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/balloon_outgoing_focused.9.png
new file mode 100644
index 000000000..325c89ff9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/balloon_outgoing_focused.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/balloon_outgoing_normal.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/balloon_outgoing_normal.9.png
new file mode 100644
index 000000000..a0336a78d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/balloon_outgoing_normal.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hangouts_media_msg_bubble_left.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hangouts_media_msg_bubble_left.9.png
new file mode 100644
index 000000000..cee37d2d5
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hangouts_media_msg_bubble_left.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hangouts_media_msg_bubble_pressed_left.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hangouts_media_msg_bubble_pressed_left.9.png
new file mode 100644
index 000000000..29e4cc119
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hangouts_media_msg_bubble_pressed_left.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hangouts_media_msg_bubble_pressed_right.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hangouts_media_msg_bubble_pressed_right.9.png
new file mode 100644
index 000000000..ccb6d63c4
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hangouts_media_msg_bubble_pressed_right.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hangouts_media_msg_bubble_right.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hangouts_media_msg_bubble_right.9.png
new file mode 100644
index 000000000..e591b9cef
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hangouts_media_msg_bubble_right.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hangouts_msg_bubble_left.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hangouts_msg_bubble_left.9.png
new file mode 100644
index 000000000..3f5e81c2b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hangouts_msg_bubble_left.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hangouts_msg_bubble_pressed_left.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hangouts_msg_bubble_pressed_left.9.png
new file mode 100644
index 000000000..328d7f0db
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hangouts_msg_bubble_pressed_left.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hangouts_msg_bubble_pressed_right.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hangouts_msg_bubble_pressed_right.9.png
new file mode 100644
index 000000000..7725f8cf7
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hangouts_msg_bubble_pressed_right.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hangouts_msg_bubble_right.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hangouts_msg_bubble_right.9.png
new file mode 100644
index 000000000..bc7e1fcab
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hangouts_msg_bubble_right.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hike0_ic_bubble_white.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hike0_ic_bubble_white.9.png
new file mode 100644
index 000000000..0b726e0dd
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hike0_ic_bubble_white.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hike0_pressed_ic_bubble_white.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hike0_pressed_ic_bubble_white.9.png
new file mode 100644
index 000000000..6f3f7bcaf
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hike0_pressed_ic_bubble_white.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hike10_ic_bubble_smiley_cheers_pets_sporty_cupcakes.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hike10_ic_bubble_smiley_cheers_pets_sporty_cupcakes.9.png
new file mode 100644
index 000000000..5434a8f30
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hike10_ic_bubble_smiley_cheers_pets_sporty_cupcakes.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hike10_pressed_ic_bubble_smiley_cheers_pets_sporty_cupcakes.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hike10_pressed_ic_bubble_smiley_cheers_pets_sporty_cupcakes.9.png
new file mode 100644
index 000000000..4e718e17d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hike10_pressed_ic_bubble_smiley_cheers_pets_sporty_cupcakes.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hike1_ic_bubble_celebration_space.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hike1_ic_bubble_celebration_space.9.png
new file mode 100644
index 000000000..7771a2a22
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hike1_ic_bubble_celebration_space.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hike1_pressed_ic_bubble_celebration_space_pressed.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hike1_pressed_ic_bubble_celebration_space_pressed.9.png
new file mode 100644
index 000000000..edab27f9a
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hike1_pressed_ic_bubble_celebration_space_pressed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hike2_ic_bubble_blue.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hike2_ic_bubble_blue.9.png
new file mode 100644
index 000000000..e7aa9b642
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hike2_ic_bubble_blue.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hike2_pressed_ic_bubble_chatty_beachy_techy.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hike2_pressed_ic_bubble_chatty_beachy_techy.9.png
new file mode 100644
index 000000000..1216c2f7f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hike2_pressed_ic_bubble_chatty_beachy_techy.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hike3_ic_bubble_music.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hike3_ic_bubble_music.9.png
new file mode 100644
index 000000000..25ff83475
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hike3_ic_bubble_music.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hike3_pressed_ic_bubble_creepy.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hike3_pressed_ic_bubble_creepy.9.png
new file mode 100644
index 000000000..35a2d5181
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hike3_pressed_ic_bubble_creepy.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hike4_ic_bubble_forest_study_sporty.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hike4_ic_bubble_forest_study_sporty.9.png
new file mode 100644
index 000000000..35be00fe0
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hike4_ic_bubble_forest_study_sporty.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hike4_pressed_ic_bubble_green.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hike4_pressed_ic_bubble_green.9.png
new file mode 100644
index 000000000..c5e2a4131
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hike4_pressed_ic_bubble_green.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hike5_ic_bubble_mr_right_exam.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hike5_ic_bubble_mr_right_exam.9.png
new file mode 100644
index 000000000..a85c6e0c8
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hike5_ic_bubble_mr_right_exam.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hike5_pressed_ic_bubble_hikin_couple_mountain.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hike5_pressed_ic_bubble_hikin_couple_mountain.9.png
new file mode 100644
index 000000000..288fa6dbc
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hike5_pressed_ic_bubble_hikin_couple_mountain.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hike6_ic_bubble_love_floral_bikers_kisses_valentines_girly.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hike6_ic_bubble_love_floral_bikers_kisses_valentines_girly.9.png
new file mode 100644
index 000000000..e5db71187
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hike6_ic_bubble_love_floral_bikers_kisses_valentines_girly.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hike6_pressed_ic_bubble_hikin_couple_mountain.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hike6_pressed_ic_bubble_hikin_couple_mountain.9.png
new file mode 100644
index 000000000..288fa6dbc
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hike6_pressed_ic_bubble_hikin_couple_mountain.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hike7_ic_bubble_night.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hike7_ic_bubble_night.9.png
new file mode 100644
index 000000000..3500f31c2
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hike7_ic_bubble_night.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hike7_pressed_ic_bubble_starry_space.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hike7_pressed_ic_bubble_starry_space.9.png
new file mode 100644
index 000000000..9cf76fbc4
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hike7_pressed_ic_bubble_starry_space.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hike8_ic_bubble_rains_beach_2.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hike8_ic_bubble_rains_beach_2.9.png
new file mode 100644
index 000000000..2bcbfdd0c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hike8_ic_bubble_rains_beach_2.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hike8_pressed_ic_bubble_starry_space.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hike8_pressed_ic_bubble_starry_space.9.png
new file mode 100644
index 000000000..9cf76fbc4
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hike8_pressed_ic_bubble_starry_space.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hike9_ic_bubble_owl.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hike9_ic_bubble_owl.9.png
new file mode 100644
index 000000000..bab05cfad
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hike9_ic_bubble_owl.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/hike9_pressed_ic_bubble_owl.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/hike9_pressed_ic_bubble_owl.9.png
new file mode 100644
index 000000000..9a3ae7198
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/hike9_pressed_ic_bubble_owl.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_logo.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_logo.png
index ee88fc628..8f3cb612e 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_logo.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_ab_logo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/ic_launcher.png b/TMessagesProj/src/main/res/drawable-xhdpi/ic_launcher.png
index 0d9188eb3..eced89f3d 100644
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/ic_launcher.png and b/TMessagesProj/src/main/res/drawable-xhdpi/ic_launcher.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/intro1.png b/TMessagesProj/src/main/res/drawable-xhdpi/intro1.png
index 639e7d834..244cd1f3e 100755
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/intro1.png and b/TMessagesProj/src/main/res/drawable-xhdpi/intro1.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/line_v2_img_chats_bg_01.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/line_v2_img_chats_bg_01.9.png
new file mode 100644
index 000000000..8b3e2cc13
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/line_v2_img_chats_bg_01.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/line_v2_img_chats_bg_01_pressed.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/line_v2_img_chats_bg_01_pressed.9.png
new file mode 100644
index 000000000..5904870b2
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/line_v2_img_chats_bg_01_pressed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/line_v2_img_chats_bg_02.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/line_v2_img_chats_bg_02.9.png
new file mode 100644
index 000000000..081dc2018
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/line_v2_img_chats_bg_02.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/line_v2_img_chats_bg_02_pressed.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/line_v2_img_chats_bg_02_pressed.9.png
new file mode 100644
index 000000000..d969cc0ec
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/line_v2_img_chats_bg_02_pressed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/telegram_avatar.png b/TMessagesProj/src/main/res/drawable-xhdpi/telegram_avatar.png
index 6514bfda7..bbba174a9 100644
Binary files a/TMessagesProj/src/main/res/drawable-xhdpi/telegram_avatar.png and b/TMessagesProj/src/main/res/drawable-xhdpi/telegram_avatar.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/viber_incoming_normal.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/viber_incoming_normal.9.png
new file mode 100644
index 000000000..39fe3884e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/viber_incoming_normal.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/viber_incoming_selected.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/viber_incoming_selected.9.png
new file mode 100644
index 000000000..d0bfdfb91
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/viber_incoming_selected.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/viber_media_incoming_normal.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/viber_media_incoming_normal.9.png
new file mode 100644
index 000000000..af99d504c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/viber_media_incoming_normal.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/viber_media_outgoing_normal.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/viber_media_outgoing_normal.9.png
new file mode 100644
index 000000000..dd3a46fd5
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/viber_media_outgoing_normal.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/viber_media_outgoing_selected.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/viber_media_outgoing_selected.9.png
new file mode 100644
index 000000000..e4283aa53
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/viber_media_outgoing_selected.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/viber_text_outgoing_normal.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/viber_text_outgoing_normal.9.png
new file mode 100644
index 000000000..c01ca7c2f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/viber_text_outgoing_normal.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/viber_text_outgoing_selected.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/viber_text_outgoing_selected.9.png
new file mode 100644
index 000000000..9504b8867
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/viber_text_outgoing_selected.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/viviber_media_incoming_selected.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/viviber_media_incoming_selected.9.png
new file mode 100644
index 000000000..9332c832e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/viviber_media_incoming_selected.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/wechat_chat_from_bg_normal.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/wechat_chat_from_bg_normal.9.png
new file mode 100644
index 000000000..ffa631e93
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/wechat_chat_from_bg_normal.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/wechat_chat_from_bg_pressed.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/wechat_chat_from_bg_pressed.9.png
new file mode 100644
index 000000000..ca4d5df80
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/wechat_chat_from_bg_pressed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/wechat_chat_to_bg_normal.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/wechat_chat_to_bg_normal.9.png
new file mode 100644
index 000000000..a53dddacf
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/wechat_chat_to_bg_normal.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/wechat_chat_to_bg_pressed.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/wechat_chat_to_bg_pressed.9.png
new file mode 100644
index 000000000..94ceb791e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/wechat_chat_to_bg_pressed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/wechat_chatfrom_bg_pic_from.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/wechat_chatfrom_bg_pic_from.9.png
new file mode 100644
index 000000000..7ddf4b93b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/wechat_chatfrom_bg_pic_from.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/wechat_chatfrom_bg_pic_to.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/wechat_chatfrom_bg_pic_to.9.png
new file mode 100644
index 000000000..d7c799ddf
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/wechat_chatfrom_bg_pic_to.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/zalo_in_text_normal.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/zalo_in_text_normal.9.png
new file mode 100644
index 000000000..2d0104058
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/zalo_in_text_normal.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/zalo_in_text_pressed.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/zalo_in_text_pressed.9.png
new file mode 100644
index 000000000..9e2fa9d2c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/zalo_in_text_pressed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/zalo_media_in_normal.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/zalo_media_in_normal.9.png
new file mode 100644
index 000000000..08b668f24
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/zalo_media_in_normal.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/zalo_media_in_pressed.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/zalo_media_in_pressed.9.png
new file mode 100644
index 000000000..90b031027
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/zalo_media_in_pressed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/zalo_media_out_normal.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/zalo_media_out_normal.9.png
new file mode 100644
index 000000000..48d556491
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/zalo_media_out_normal.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/zalo_media_out_pressed.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/zalo_media_out_pressed.9.png
new file mode 100644
index 000000000..864f1e088
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/zalo_media_out_pressed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/zalo_out_text_normal.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/zalo_out_text_normal.9.png
new file mode 100644
index 000000000..161e19a3c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/zalo_out_text_normal.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/zalo_out_text_pressed.9.png b/TMessagesProj/src/main/res/drawable-xhdpi/zalo_out_text_pressed.9.png
new file mode 100644
index 000000000..de557af18
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/zalo_out_text_pressed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/background_hd.jpg b/TMessagesProj/src/main/res/drawable-xxhdpi/background_hd.jpg
index 46351c313..3183a0486 100644
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/background_hd.jpg and b/TMessagesProj/src/main/res/drawable-xxhdpi/background_hd.jpg differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/chat_tips_bg.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/chat_tips_bg.9.png
new file mode 100644
index 000000000..4ea6d3f66
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/chat_tips_bg.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_logo.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_logo.png
index 67a0225c7..2b13fcfe3 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_logo.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_ab_logo.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_launcher.png b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_launcher.png
index 3639a5f10..8d1b6595c 100644
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/ic_launcher.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/ic_launcher.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/intro1.png b/TMessagesProj/src/main/res/drawable-xxhdpi/intro1.png
index ca6c90bbd..cda1f019f 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/intro1.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/intro1.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/msg_out_photo_selected.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/msg_out_photo_selected.9.png
index 7855d66fa..bd372f514 100755
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/msg_out_photo_selected.9.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/msg_out_photo_selected.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/telegram_avatar.png b/TMessagesProj/src/main/res/drawable-xxhdpi/telegram_avatar.png
index 785dd42e9..52943a7f5 100644
Binary files a/TMessagesProj/src/main/res/drawable-xxhdpi/telegram_avatar.png and b/TMessagesProj/src/main/res/drawable-xxhdpi/telegram_avatar.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/zalo_in_text_normal.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/zalo_in_text_normal.9.png
new file mode 100644
index 000000000..a869fa688
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/zalo_in_text_normal.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/zalo_in_text_pressed.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/zalo_in_text_pressed.9.png
new file mode 100644
index 000000000..0d4493419
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/zalo_in_text_pressed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/zalo_media_in_normal.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/zalo_media_in_normal.9.png
new file mode 100644
index 000000000..293269725
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/zalo_media_in_normal.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/zalo_media_in_pressed.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/zalo_media_in_pressed.9.png
new file mode 100644
index 000000000..bf7169a0d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/zalo_media_in_pressed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/zalo_media_out_normal.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/zalo_media_out_normal.9.png
new file mode 100644
index 000000000..1e1423345
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/zalo_media_out_normal.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/zalo_media_out_pressed.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/zalo_media_out_pressed.9.png
new file mode 100644
index 000000000..f0a6ca930
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/zalo_media_out_pressed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/zalo_out_text_normal.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/zalo_out_text_normal.9.png
new file mode 100644
index 000000000..80e82073a
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/zalo_out_text_normal.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/zalo_out_text_pressed.9.png b/TMessagesProj/src/main/res/drawable-xxhdpi/zalo_out_text_pressed.9.png
new file mode 100644
index 000000000..92305ded1
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/zalo_out_text_pressed.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxxhdpi/ic_launcher.png b/TMessagesProj/src/main/res/drawable-xxxhdpi/ic_launcher.png
index 3d97d66d1..5e770efd4 100644
Binary files a/TMessagesProj/src/main/res/drawable-xxxhdpi/ic_launcher.png and b/TMessagesProj/src/main/res/drawable-xxxhdpi/ic_launcher.png differ
diff --git a/TMessagesProj/src/main/res/drawable/settings_balloon_item_selector_item.xml b/TMessagesProj/src/main/res/drawable/settings_balloon_item_selector_item.xml
new file mode 100644
index 000000000..efa38bd4f
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/settings_balloon_item_selector_item.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="@color/balloon_item_pressed" android:state_pressed="true"></item>
+    <item android:drawable="@color/balloon_item_selected" android:state_selected="true"></item>
+    <item android:drawable="@color/balloon_item_selected" android:state_activated="true"></item>
+    <item android:drawable="@android:color/transparent"/>
+</selector>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout-ar/chat_profile_avatar_layout.xml b/TMessagesProj/src/main/res/layout-ar/chat_profile_avatar_layout.xml
index 5a1b3f9a9..a12e811f9 100644
--- a/TMessagesProj/src/main/res/layout-ar/chat_profile_avatar_layout.xml
+++ b/TMessagesProj/src/main/res/layout-ar/chat_profile_avatar_layout.xml
@@ -62,7 +62,7 @@
         android:layout_width="64dp"
         android:layout_height="64dp">
 
-        <org.telegram.ui.Views.BackupImageView
+        <org.tomato.ui.Views.BackupImageView
             android:id="@+id/settings_avatar_image"
             android:layout_width="fill_parent"
             android:layout_height="fill_parent"/>
diff --git a/TMessagesProj/src/main/res/layout-ar/contact_add_layout.xml b/TMessagesProj/src/main/res/layout-ar/contact_add_layout.xml
index 1fc9c0185..88462c393 100644
--- a/TMessagesProj/src/main/res/layout-ar/contact_add_layout.xml
+++ b/TMessagesProj/src/main/res/layout-ar/contact_add_layout.xml
@@ -51,7 +51,7 @@
 
             </LinearLayout>
 
-            <org.telegram.ui.Views.BackupImageView
+            <org.tomato.ui.Views.BackupImageView
                 android:id="@+id/settings_avatar_image"
                 android:layout_width="64dp"
                 android:layout_height="64dp"
diff --git a/TMessagesProj/src/main/res/layout-ar/contacts_layout.xml b/TMessagesProj/src/main/res/layout-ar/contacts_layout.xml
index eccbfa38f..38ff80452 100644
--- a/TMessagesProj/src/main/res/layout-ar/contacts_layout.xml
+++ b/TMessagesProj/src/main/res/layout-ar/contacts_layout.xml
@@ -3,7 +3,7 @@
     android:layout_width="fill_parent"
     android:layout_height="fill_parent">
 
-    <org.telegram.ui.Views.PinnedHeaderListView
+    <org.tomato.ui.Views.PinnedHeaderListView
             android:layout_width="fill_parent"
             android:layout_height="fill_parent"
             android:id="@+id/listView"
diff --git a/TMessagesProj/src/main/res/layout-ar/country_select_layout.xml b/TMessagesProj/src/main/res/layout-ar/country_select_layout.xml
index 45a52826a..a865453b0 100644
--- a/TMessagesProj/src/main/res/layout-ar/country_select_layout.xml
+++ b/TMessagesProj/src/main/res/layout-ar/country_select_layout.xml
@@ -3,7 +3,7 @@
     android:layout_height="fill_parent"
     android:background="#fafafa">
 
-    <org.telegram.ui.Views.PinnedHeaderListView
+    <org.tomato.ui.Views.PinnedHeaderListView
         android:layout_width="fill_parent"
         android:layout_height="fill_parent"
         android:id="@+id/listView"
diff --git a/TMessagesProj/src/main/res/layout-ar/document_item.xml b/TMessagesProj/src/main/res/layout-ar/document_item.xml
index 96d3d776e..99ec46857 100644
--- a/TMessagesProj/src/main/res/layout-ar/document_item.xml
+++ b/TMessagesProj/src/main/res/layout-ar/document_item.xml
@@ -65,7 +65,7 @@
 
     </LinearLayout>
 
-    <org.telegram.ui.Views.BackupImageView
+    <org.tomato.ui.Views.BackupImageView
         android:id="@+id/docs_item_thumb"
         android:layout_width="55dp"
         android:layout_height="42dp"
diff --git a/TMessagesProj/src/main/res/layout-ar/group_create_final_layout.xml b/TMessagesProj/src/main/res/layout-ar/group_create_final_layout.xml
index f821e53ec..f97207e86 100644
--- a/TMessagesProj/src/main/res/layout-ar/group_create_final_layout.xml
+++ b/TMessagesProj/src/main/res/layout-ar/group_create_final_layout.xml
@@ -18,7 +18,7 @@
             android:layout_marginRight="16dp"
             android:layout_gravity="top|right">
 
-            <org.telegram.ui.Views.BackupImageView
+            <org.tomato.ui.Views.BackupImageView
                 android:id="@+id/settings_avatar_image"
                 android:layout_width="fill_parent"
                 android:layout_height="fill_parent"/>
@@ -56,7 +56,7 @@
         android:layout_width="match_parent"
         android:layout_height="match_parent">
 
-        <org.telegram.ui.Views.PinnedHeaderListView
+        <org.tomato.ui.Views.PinnedHeaderListView
             android:layout_width="fill_parent"
             android:layout_height="fill_parent"
             android:id="@+id/listView"
diff --git a/TMessagesProj/src/main/res/layout-ar/group_create_layout.xml b/TMessagesProj/src/main/res/layout-ar/group_create_layout.xml
index 1de70d4f7..cba0a2d6d 100644
--- a/TMessagesProj/src/main/res/layout-ar/group_create_layout.xml
+++ b/TMessagesProj/src/main/res/layout-ar/group_create_layout.xml
@@ -36,7 +36,7 @@
         android:layout_width="match_parent"
         android:layout_height="match_parent">
 
-        <org.telegram.ui.Views.PinnedHeaderListView
+        <org.tomato.ui.Views.PinnedHeaderListView
             android:layout_width="fill_parent"
             android:layout_height="fill_parent"
             android:id="@+id/listView"
diff --git a/TMessagesProj/src/main/res/layout-ar/group_create_row_layout.xml b/TMessagesProj/src/main/res/layout-ar/group_create_row_layout.xml
index 3505f73aa..76be3f2a7 100644
--- a/TMessagesProj/src/main/res/layout-ar/group_create_row_layout.xml
+++ b/TMessagesProj/src/main/res/layout-ar/group_create_row_layout.xml
@@ -6,7 +6,7 @@
     android:layout_height="66dp"
     android:layout_gravity="top">
 
-    <org.telegram.ui.Views.BackupImageView
+    <org.tomato.ui.Views.BackupImageView
         android:layout_width="50dp"
         android:layout_height="50dp"
         android:id="@+id/messages_list_row_avatar"
diff --git a/TMessagesProj/src/main/res/layout-ar/location_view_layout.xml b/TMessagesProj/src/main/res/layout-ar/location_view_layout.xml
index 68445322f..b087c0ee9 100644
--- a/TMessagesProj/src/main/res/layout-ar/location_view_layout.xml
+++ b/TMessagesProj/src/main/res/layout-ar/location_view_layout.xml
@@ -19,7 +19,7 @@
         android:background="@drawable/location_panel"
         android:id="@+id/location_bottom_view">
 
-        <org.telegram.ui.Views.BackupImageView
+        <org.tomato.ui.Views.BackupImageView
             android:layout_width="64dp"
             android:layout_height="64dp"
             android:id="@+id/location_avatar_view"
diff --git a/TMessagesProj/src/main/res/layout-ar/settings_name_layout.xml b/TMessagesProj/src/main/res/layout-ar/settings_name_layout.xml
index f6e3dc5bd..47ada272b 100644
--- a/TMessagesProj/src/main/res/layout-ar/settings_name_layout.xml
+++ b/TMessagesProj/src/main/res/layout-ar/settings_name_layout.xml
@@ -59,7 +59,7 @@
         android:layout_width="64dp"
         android:layout_height="64dp">
 
-        <org.telegram.ui.Views.BackupImageView
+        <org.tomato.ui.Views.BackupImageView
             android:id="@+id/settings_avatar_image"
             android:layout_width="fill_parent"
             android:layout_height="fill_parent"/>
diff --git a/TMessagesProj/src/main/res/layout-ar/user_profile_avatar_layout.xml b/TMessagesProj/src/main/res/layout-ar/user_profile_avatar_layout.xml
index 34a2b99cf..ff66abdb7 100644
--- a/TMessagesProj/src/main/res/layout-ar/user_profile_avatar_layout.xml
+++ b/TMessagesProj/src/main/res/layout-ar/user_profile_avatar_layout.xml
@@ -39,7 +39,7 @@
 
     </LinearLayout>
 
-    <org.telegram.ui.Views.BackupImageView
+    <org.tomato.ui.Views.BackupImageView
         android:id="@+id/settings_avatar_image"
         android:layout_width="64dp"
         android:layout_height="64dp"
diff --git a/TMessagesProj/src/main/res/layout-ar/user_profile_identicon_layout.xml b/TMessagesProj/src/main/res/layout-ar/user_profile_identicon_layout.xml
index c35c5daa2..080e352a1 100644
--- a/TMessagesProj/src/main/res/layout-ar/user_profile_identicon_layout.xml
+++ b/TMessagesProj/src/main/res/layout-ar/user_profile_identicon_layout.xml
@@ -15,7 +15,7 @@
         android:gravity="center_vertical|right"
         android:layout_gravity="top|right"/>
 
-    <org.telegram.ui.Views.IdenticonView
+    <org.tomato.ui.Views.IdenticonView
         android:id="@+id/identicon_view"
         android:layout_width="32dp"
         android:layout_height="32dp"
diff --git a/TMessagesProj/src/main/res/layout/chat_header_enc_layout.xml b/TMessagesProj/src/main/res/layout/chat_header_enc_layout.xml
index 66a9281eb..dc191367e 100644
--- a/TMessagesProj/src/main/res/layout/chat_header_enc_layout.xml
+++ b/TMessagesProj/src/main/res/layout/chat_header_enc_layout.xml
@@ -5,7 +5,7 @@
     android:layout_height="wrap_content"
     android:layout_alignParentRight="true">
 
-    <org.telegram.ui.Views.TimerButton
+    <org.tomato.ui.Views.TimerButton
         xmlns:android="http://schemas.android.com/apk/res/android"
         android:layout_height="fill_parent"
         android:layout_width="48dp"
diff --git a/TMessagesProj/src/main/res/layout/chat_header_layout.xml b/TMessagesProj/src/main/res/layout/chat_header_layout.xml
index 35e9b977d..1383bf335 100644
--- a/TMessagesProj/src/main/res/layout/chat_header_layout.xml
+++ b/TMessagesProj/src/main/res/layout/chat_header_layout.xml
@@ -6,7 +6,7 @@
     android:layout_height="wrap_content"
     android:layout_alignParentRight="true">
 
-    <org.telegram.ui.Views.BackupImageView
+    <org.tomato.ui.Views.BackupImageView
             android:layout_height="48dp"
             android:layout_width="48dp"
             android:id="@+id/chat_avatar_image"/>
diff --git a/TMessagesProj/src/main/res/layout/chat_layout.xml b/TMessagesProj/src/main/res/layout/chat_layout.xml
index 11e46e8fc..f4833e478 100644
--- a/TMessagesProj/src/main/res/layout/chat_layout.xml
+++ b/TMessagesProj/src/main/res/layout/chat_layout.xml
@@ -1,10 +1,10 @@
-<org.telegram.ui.Views.SizeNotifierRelativeLayout
+<org.tomato.ui.Views.SizeNotifierRelativeLayout
     xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
     android:id="@+id/chat_layout">
 
-    <org.telegram.ui.Views.FrameLayoutFixed
+    <org.tomato.ui.Views.FrameLayoutFixed
         android:layout_height="fill_parent"
         android:layout_width="fill_parent"
         android:paddingBottom="48dp"
@@ -27,9 +27,9 @@
             layout="@layout/encrypted_chat_placeholder"
             android:layout_gravity="center"/>
 
-    </org.telegram.ui.Views.FrameLayoutFixed>
+    </org.tomato.ui.Views.FrameLayoutFixed>
 
-    <org.telegram.ui.Views.LayoutListView
+    <org.tomato.ui.Views.LayoutListView
         android:layout_width="fill_parent"
         android:layout_height="fill_parent"
         android:id="@+id/chat_list_view"
@@ -156,7 +156,7 @@
             android:textCursorDrawable="@null"
             android:textColor="#000000"/>
 
-        <org.telegram.ui.Views.FrameLayoutFixed
+        <org.tomato.ui.Views.FrameLayoutFixed
             android:layout_height="48dp"
             android:layout_width="fill_parent"
             android:layout_marginTop="2dp"
@@ -218,7 +218,7 @@
 
             </LinearLayout>
 
-        </org.telegram.ui.Views.FrameLayoutFixed>
+        </org.tomato.ui.Views.FrameLayoutFixed>
 
         <ImageButton
             android:layout_width="48dp"
@@ -284,4 +284,4 @@
         android:layout_marginBottom="4dp"
         android:id="@+id/pagedown_button"/>
 
-</org.telegram.ui.Views.SizeNotifierRelativeLayout>
\ No newline at end of file
+</org.tomato.ui.Views.SizeNotifierRelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/chat_profile_avatar_layout.xml b/TMessagesProj/src/main/res/layout/chat_profile_avatar_layout.xml
index 85f4a3d4d..97a89f938 100644
--- a/TMessagesProj/src/main/res/layout/chat_profile_avatar_layout.xml
+++ b/TMessagesProj/src/main/res/layout/chat_profile_avatar_layout.xml
@@ -11,7 +11,7 @@
         android:layout_width="64dp"
         android:layout_height="64dp">
 
-        <org.telegram.ui.Views.BackupImageView
+        <org.tomato.ui.Views.BackupImageView
             android:id="@+id/settings_avatar_image"
             android:layout_width="fill_parent"
             android:layout_height="fill_parent"/>
diff --git a/TMessagesProj/src/main/res/layout/contact_add_layout.xml b/TMessagesProj/src/main/res/layout/contact_add_layout.xml
index c4c917e6d..4654c64be 100644
--- a/TMessagesProj/src/main/res/layout/contact_add_layout.xml
+++ b/TMessagesProj/src/main/res/layout/contact_add_layout.xml
@@ -19,7 +19,7 @@
             android:paddingTop="12dp"
             android:paddingBottom="12dp">
 
-            <org.telegram.ui.Views.BackupImageView
+            <org.tomato.ui.Views.BackupImageView
                 android:id="@+id/settings_avatar_image"
                 android:layout_width="64dp"
                 android:layout_height="64dp"/>
diff --git a/TMessagesProj/src/main/res/layout/contacts_layout.xml b/TMessagesProj/src/main/res/layout/contacts_layout.xml
index 8b281bc3e..2374a5e5f 100644
--- a/TMessagesProj/src/main/res/layout/contacts_layout.xml
+++ b/TMessagesProj/src/main/res/layout/contacts_layout.xml
@@ -3,7 +3,7 @@
     android:layout_width="fill_parent"
     android:layout_height="fill_parent">
 
-    <org.telegram.ui.Views.PinnedHeaderListView
+    <org.tomato.ui.Views.PinnedHeaderListView
             android:layout_width="fill_parent"
             android:layout_height="fill_parent"
             android:id="@+id/listView"
diff --git a/TMessagesProj/src/main/res/layout/country_select_layout.xml b/TMessagesProj/src/main/res/layout/country_select_layout.xml
index 2ce0b92bd..01df4d7a5 100644
--- a/TMessagesProj/src/main/res/layout/country_select_layout.xml
+++ b/TMessagesProj/src/main/res/layout/country_select_layout.xml
@@ -4,7 +4,7 @@
     android:layout_height="fill_parent"
     android:background="#fafafa">
 
-    <org.telegram.ui.Views.PinnedHeaderListView
+    <org.tomato.ui.Views.PinnedHeaderListView
         android:layout_width="fill_parent"
         android:layout_height="fill_parent"
         android:id="@+id/listView"
diff --git a/TMessagesProj/src/main/res/layout/document_item.xml b/TMessagesProj/src/main/res/layout/document_item.xml
index f2511bcef..b9bdaac21 100644
--- a/TMessagesProj/src/main/res/layout/document_item.xml
+++ b/TMessagesProj/src/main/res/layout/document_item.xml
@@ -55,7 +55,7 @@
 
     </LinearLayout>
 
-    <org.telegram.ui.Views.BackupImageView
+    <org.tomato.ui.Views.BackupImageView
         android:id="@+id/docs_item_thumb"
         android:layout_width="55dp"
         android:layout_height="42dp"
diff --git a/TMessagesProj/src/main/res/layout/group_create_final_layout.xml b/TMessagesProj/src/main/res/layout/group_create_final_layout.xml
index ba3f3ce36..c8d83b8c9 100644
--- a/TMessagesProj/src/main/res/layout/group_create_final_layout.xml
+++ b/TMessagesProj/src/main/res/layout/group_create_final_layout.xml
@@ -18,7 +18,7 @@
             android:layout_marginLeft="16dp"
             android:layout_gravity="top">
 
-            <org.telegram.ui.Views.BackupImageView
+            <org.tomato.ui.Views.BackupImageView
                 android:id="@+id/settings_avatar_image"
                 android:layout_width="fill_parent"
                 android:layout_height="fill_parent"/>
@@ -57,7 +57,7 @@
         android:layout_width="match_parent"
         android:layout_height="match_parent">
 
-        <org.telegram.ui.Views.PinnedHeaderListView
+        <org.tomato.ui.Views.PinnedHeaderListView
             android:layout_width="fill_parent"
             android:layout_height="fill_parent"
             android:id="@+id/listView"
diff --git a/TMessagesProj/src/main/res/layout/group_create_layout.xml b/TMessagesProj/src/main/res/layout/group_create_layout.xml
index 763c3ea26..cbe29bde4 100644
--- a/TMessagesProj/src/main/res/layout/group_create_layout.xml
+++ b/TMessagesProj/src/main/res/layout/group_create_layout.xml
@@ -34,7 +34,7 @@
         android:layout_width="match_parent"
         android:layout_height="match_parent">
 
-        <org.telegram.ui.Views.PinnedHeaderListView
+        <org.tomato.ui.Views.PinnedHeaderListView
             android:layout_width="fill_parent"
             android:layout_height="fill_parent"
             android:id="@+id/listView"
diff --git a/TMessagesProj/src/main/res/layout/group_create_row_layout.xml b/TMessagesProj/src/main/res/layout/group_create_row_layout.xml
index d72de6d6b..523b4146e 100644
--- a/TMessagesProj/src/main/res/layout/group_create_row_layout.xml
+++ b/TMessagesProj/src/main/res/layout/group_create_row_layout.xml
@@ -6,7 +6,7 @@
     android:layout_height="66dp"
     android:layout_gravity="top">
 
-    <org.telegram.ui.Views.BackupImageView
+    <org.tomato.ui.Views.BackupImageView
         android:layout_width="50dp"
         android:layout_height="50dp"
         android:id="@+id/messages_list_row_avatar"
diff --git a/TMessagesProj/src/main/res/layout/identicon_layout.xml b/TMessagesProj/src/main/res/layout/identicon_layout.xml
index 1b4dac4d7..a1950dcbe 100644
--- a/TMessagesProj/src/main/res/layout/identicon_layout.xml
+++ b/TMessagesProj/src/main/res/layout/identicon_layout.xml
@@ -15,7 +15,7 @@
         android:paddingTop="20dp"
         android:paddingBottom="20dp">
 
-        <org.telegram.ui.Views.IdenticonView
+        <org.tomato.ui.Views.IdenticonView
             android:layout_width="fill_parent"
             android:layout_height="fill_parent"
             android:id="@+id/identicon_view"/>
diff --git a/TMessagesProj/src/main/res/layout/location_view_layout.xml b/TMessagesProj/src/main/res/layout/location_view_layout.xml
index a5285024c..adff3009a 100644
--- a/TMessagesProj/src/main/res/layout/location_view_layout.xml
+++ b/TMessagesProj/src/main/res/layout/location_view_layout.xml
@@ -19,7 +19,7 @@
         android:background="@drawable/location_panel"
         android:id="@+id/location_bottom_view">
 
-        <org.telegram.ui.Views.BackupImageView
+        <org.tomato.ui.Views.BackupImageView
             android:layout_width="64dp"
             android:layout_height="64dp"
             android:id="@+id/location_avatar_view"
diff --git a/TMessagesProj/src/main/res/layout/login_layout.xml b/TMessagesProj/src/main/res/layout/login_layout.xml
index 70818ccca..6e1315e6c 100644
--- a/TMessagesProj/src/main/res/layout/login_layout.xml
+++ b/TMessagesProj/src/main/res/layout/login_layout.xml
@@ -5,12 +5,12 @@
     android:background="#fafafa"
     android:fillViewport="true">
 
-    <org.telegram.ui.Views.FrameLayoutFixed
+    <org.tomato.ui.Views.FrameLayoutFixed
         android:layout_width="fill_parent"
         android:layout_height="wrap_content"
         android:layout_gravity="top|left">
 
-        <org.telegram.ui.LoginActivityPhoneView
+        <org.tomato.ui.LoginActivityPhoneView
             android:orientation="vertical"
             android:layout_width="fill_parent"
             android:layout_height="wrap_content"
@@ -108,9 +108,9 @@
                 android:layout_marginBottom="10dp"
                 android:lineSpacingExtra="2dp"/>
 
-        </org.telegram.ui.LoginActivityPhoneView>
+        </org.tomato.ui.LoginActivityPhoneView>
 
-        <org.telegram.ui.LoginActivitySmsView
+        <org.tomato.ui.LoginActivitySmsView
             android:layout_width="fill_parent"
             android:layout_height="fill_parent"
             android:layout_marginLeft="16dp"
@@ -192,9 +192,9 @@
 
             </LinearLayout>
 
-        </org.telegram.ui.LoginActivitySmsView>
+        </org.tomato.ui.LoginActivitySmsView>
 
-        <org.telegram.ui.LoginActivityRegisterView
+        <org.tomato.ui.LoginActivityRegisterView
             android:layout_width="match_parent"
             android:layout_height="match_parent"
             android:layout_marginTop="30dp"
@@ -289,8 +289,8 @@
 
             </LinearLayout>
 
-        </org.telegram.ui.LoginActivityRegisterView>
+        </org.tomato.ui.LoginActivityRegisterView>
 
-    </org.telegram.ui.Views.FrameLayoutFixed>
+    </org.tomato.ui.Views.FrameLayoutFixed>
 
 </ScrollView>
diff --git a/TMessagesProj/src/main/res/layout/media_photo_layout.xml b/TMessagesProj/src/main/res/layout/media_photo_layout.xml
index c3a16aae9..587ab3958 100644
--- a/TMessagesProj/src/main/res/layout/media_photo_layout.xml
+++ b/TMessagesProj/src/main/res/layout/media_photo_layout.xml
@@ -3,7 +3,7 @@
     android:layout_width="100dp"
     android:layout_height="100dp">
 
-    <org.telegram.ui.Views.BackupImageView
+    <org.tomato.ui.Views.BackupImageView
         android:id="@+id/media_photo_image"
         android:layout_width="fill_parent"
         android:layout_height="fill_parent"/>
diff --git a/TMessagesProj/src/main/res/layout/media_video_layout.xml b/TMessagesProj/src/main/res/layout/media_video_layout.xml
index 810f77f3b..cca31b2f7 100644
--- a/TMessagesProj/src/main/res/layout/media_video_layout.xml
+++ b/TMessagesProj/src/main/res/layout/media_video_layout.xml
@@ -3,7 +3,7 @@
     android:layout_width="100dp"
     android:layout_height="100dp">
 
-    <org.telegram.ui.Views.BackupImageView
+    <org.tomato.ui.Views.BackupImageView
         android:id="@+id/media_photo_image"
         android:layout_width="fill_parent"
         android:layout_height="fill_parent"/>
diff --git a/TMessagesProj/src/main/res/layout/photo_picker_album_layout.xml b/TMessagesProj/src/main/res/layout/photo_picker_album_layout.xml
index 1773bc96d..af79588a6 100644
--- a/TMessagesProj/src/main/res/layout/photo_picker_album_layout.xml
+++ b/TMessagesProj/src/main/res/layout/photo_picker_album_layout.xml
@@ -4,7 +4,7 @@
     android:layout_height="100dp"
     android:layout_gravity="top">
 
-    <org.telegram.ui.Views.BackupImageView
+    <org.tomato.ui.Views.BackupImageView
         android:id="@+id/media_photo_image"
         android:layout_width="fill_parent"
         android:layout_height="fill_parent"/>
diff --git a/TMessagesProj/src/main/res/layout/photo_picker_photo_layout.xml b/TMessagesProj/src/main/res/layout/photo_picker_photo_layout.xml
index a0a6f9142..03e835f9b 100644
--- a/TMessagesProj/src/main/res/layout/photo_picker_photo_layout.xml
+++ b/TMessagesProj/src/main/res/layout/photo_picker_photo_layout.xml
@@ -4,7 +4,7 @@
     android:layout_height="100dp"
     android:layout_gravity="top">
 
-    <org.telegram.ui.Views.BackupImageView
+    <org.tomato.ui.Views.BackupImageView
         android:id="@+id/media_photo_image"
         android:layout_width="fill_parent"
         android:layout_height="fill_parent"/>
diff --git a/TMessagesProj/src/main/res/layout/popup_image_layout.xml b/TMessagesProj/src/main/res/layout/popup_image_layout.xml
index f9e1beb95..4a96a3dd3 100644
--- a/TMessagesProj/src/main/res/layout/popup_image_layout.xml
+++ b/TMessagesProj/src/main/res/layout/popup_image_layout.xml
@@ -7,7 +7,7 @@
     android:padding="10dp"
     android:background="@drawable/list_selector">
 
-    <org.telegram.ui.Views.BackupImageView
+    <org.tomato.ui.Views.BackupImageView
         android:layout_width="match_parent"
         android:layout_height="match_parent"
         android:id="@+id/message_image"
diff --git a/TMessagesProj/src/main/res/layout/popup_notification_layout.xml b/TMessagesProj/src/main/res/layout/popup_notification_layout.xml
index c00e824f6..b732233e2 100644
--- a/TMessagesProj/src/main/res/layout/popup_notification_layout.xml
+++ b/TMessagesProj/src/main/res/layout/popup_notification_layout.xml
@@ -1,4 +1,4 @@
-<org.telegram.ui.Views.SizeNotifierRelativeLayout
+<org.tomato.ui.Views.SizeNotifierRelativeLayout
     xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="match_parent"
@@ -71,7 +71,7 @@
                     android:textCursorDrawable="@null"
                     android:textColor="#000000"/>
 
-                <org.telegram.ui.Views.FrameLayoutFixed
+                <org.tomato.ui.Views.FrameLayoutFixed
                     android:layout_height="48dp"
                     android:layout_width="fill_parent"
                     android:layout_marginTop="2dp"
@@ -133,7 +133,7 @@
 
                     </LinearLayout>
 
-                </org.telegram.ui.Views.FrameLayoutFixed>
+                </org.tomato.ui.Views.FrameLayoutFixed>
 
                 <ImageButton
                     android:layout_width="48dp"
@@ -154,4 +154,4 @@
 
     </RelativeLayout>
 
-</org.telegram.ui.Views.SizeNotifierRelativeLayout>
\ No newline at end of file
+</org.tomato.ui.Views.SizeNotifierRelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/settings_baloon_chat_layout.xml b/TMessagesProj/src/main/res/layout/settings_baloon_chat_layout.xml
new file mode 100644
index 000000000..d94d85588
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/settings_baloon_chat_layout.xml
@@ -0,0 +1,16 @@
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:background="#f7fbfc">
+
+    <ListView
+        android:id="@+id/ballon_listview"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:dividerHeight="1dp"
+        android:divider="#fff">
+
+        </ListView>
+
+</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/settings_baloon_item_layout.xml b/TMessagesProj/src/main/res/layout/settings_baloon_item_layout.xml
new file mode 100644
index 000000000..3fb9ed072
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/settings_baloon_item_layout.xml
@@ -0,0 +1,25 @@
+<RelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="wrap_content"
+    android:id="@+id/ballon_item_wrapper"
+    android:background="@drawable/settings_balloon_item_selector_item"
+    android:descendantFocusability="blocksDescendants">
+
+    <ImageView
+        android:id="@+id/ballon_previewImg"
+        android:layout_width="match_parent"
+        android:layout_height="50dp"
+        android:src="@drawable/wechat_chat_to_bg_normal"/>
+
+    <RadioButton
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:checked="true"
+        android:layout_centerVertical="true"
+        android:layout_alignParentRight="true"
+        android:padding="10dp"
+        android:clickable="false"
+        android:id="@+id/ballon_item_check_button" />
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/settings_color_dialog_layout.xml b/TMessagesProj/src/main/res/layout/settings_color_dialog_layout.xml
index 075480742..e8930561a 100644
--- a/TMessagesProj/src/main/res/layout/settings_color_dialog_layout.xml
+++ b/TMessagesProj/src/main/res/layout/settings_color_dialog_layout.xml
@@ -5,7 +5,7 @@
     android:layout_height="match_parent"
     android:layout_gravity="center">
 
-    <org.telegram.ui.Views.ColorPickerView
+    <org.tomato.ui.Views.ColorPickerView
         android:id="@+id/color_picker"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
diff --git a/TMessagesProj/src/main/res/layout/settings_name_layout.xml b/TMessagesProj/src/main/res/layout/settings_name_layout.xml
index 278f37dc0..949d8646c 100644
--- a/TMessagesProj/src/main/res/layout/settings_name_layout.xml
+++ b/TMessagesProj/src/main/res/layout/settings_name_layout.xml
@@ -11,7 +11,7 @@
         android:layout_width="64dp"
         android:layout_height="64dp">
 
-        <org.telegram.ui.Views.BackupImageView
+        <org.tomato.ui.Views.BackupImageView
             android:id="@+id/settings_avatar_image"
             android:layout_width="fill_parent"
             android:layout_height="fill_parent"/>
diff --git a/TMessagesProj/src/main/res/layout/settings_theme_layout.xml b/TMessagesProj/src/main/res/layout/settings_theme_layout.xml
new file mode 100644
index 000000000..c8a3741f7
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/settings_theme_layout.xml
@@ -0,0 +1,15 @@
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:background="#FFF">
+
+    <ListView
+        android:id="@+id/theme_listview"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:dividerHeight="1dp"
+        android:divider="#fff">
+        </ListView>
+
+</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/settings_themes_item_layout.xml b/TMessagesProj/src/main/res/layout/settings_themes_item_layout.xml
new file mode 100644
index 000000000..e221c443a
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/settings_themes_item_layout.xml
@@ -0,0 +1,18 @@
+<RelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="55dp"
+    android:id="@+id/theme_item_wrapper"
+    android:descendantFocusability="blocksDescendants">
+
+    <RadioButton
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:checked="true"
+        android:layout_centerVertical="true"
+        android:layout_alignParentRight="true"
+        android:padding="10dp"
+        android:clickable="false"
+        android:id="@+id/theme_item_check_button" />
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/settings_wallpapers_layout.xml b/TMessagesProj/src/main/res/layout/settings_wallpapers_layout.xml
index 120b2bd32..f690aa99d 100644
--- a/TMessagesProj/src/main/res/layout/settings_wallpapers_layout.xml
+++ b/TMessagesProj/src/main/res/layout/settings_wallpapers_layout.xml
@@ -19,7 +19,7 @@
         android:visibility="visible"
         android:layout_marginBottom="52dp"/>
 
-    <org.telegram.ui.Views.HorizontalListView
+    <org.tomato.ui.Views.HorizontalListView
         android:layout_width="fill_parent"
         android:layout_height="102dp"
         android:layout_gravity="bottom"
diff --git a/TMessagesProj/src/main/res/layout/settings_wallpapers_other_row.xml b/TMessagesProj/src/main/res/layout/settings_wallpapers_other_row.xml
index 2412415d3..c06720b15 100644
--- a/TMessagesProj/src/main/res/layout/settings_wallpapers_other_row.xml
+++ b/TMessagesProj/src/main/res/layout/settings_wallpapers_other_row.xml
@@ -3,7 +3,7 @@
     android:layout_height="102dp"
     android:layout_width="100dp">
 
-    <org.telegram.ui.Views.BackupImageView
+    <org.tomato.ui.Views.BackupImageView
         android:layout_height="100dp"
         android:layout_width="100dp"
         android:id="@+id/image"
diff --git a/TMessagesProj/src/main/res/layout/updating_state_layout.xml b/TMessagesProj/src/main/res/layout/updating_state_layout.xml
index 9157620e5..405cdbd91 100644
--- a/TMessagesProj/src/main/res/layout/updating_state_layout.xml
+++ b/TMessagesProj/src/main/res/layout/updating_state_layout.xml
@@ -1,4 +1,4 @@
-<org.telegram.ui.Views.FrameLayoutFixed
+<org.tomato.ui.Views.FrameLayoutFixed
     xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="400dp"
     android:layout_height="fill_parent"
@@ -27,4 +27,4 @@
         android:paddingRight="2dp"
         android:id="@+id/status_text"/>
 
-</org.telegram.ui.Views.FrameLayoutFixed>
\ No newline at end of file
+</org.tomato.ui.Views.FrameLayoutFixed>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/user_profile_avatar_layout.xml b/TMessagesProj/src/main/res/layout/user_profile_avatar_layout.xml
index 5f8796188..dc27fa5ea 100644
--- a/TMessagesProj/src/main/res/layout/user_profile_avatar_layout.xml
+++ b/TMessagesProj/src/main/res/layout/user_profile_avatar_layout.xml
@@ -7,7 +7,7 @@
     android:paddingTop="13dp"
     android:paddingBottom="12dp">
 
-    <org.telegram.ui.Views.BackupImageView
+    <org.tomato.ui.Views.BackupImageView
         android:id="@+id/settings_avatar_image"
         android:layout_width="64dp"
         android:layout_height="64dp"/>
diff --git a/TMessagesProj/src/main/res/layout/user_profile_identicon_layout.xml b/TMessagesProj/src/main/res/layout/user_profile_identicon_layout.xml
index ae0129fed..819102b4c 100644
--- a/TMessagesProj/src/main/res/layout/user_profile_identicon_layout.xml
+++ b/TMessagesProj/src/main/res/layout/user_profile_identicon_layout.xml
@@ -15,7 +15,7 @@
         android:gravity="center_vertical"
         android:layout_gravity="top"/>
 
-    <org.telegram.ui.Views.IdenticonView
+    <org.tomato.ui.Views.IdenticonView
         android:id="@+id/identicon_view"
         android:layout_width="32dp"
         android:layout_height="32dp"
diff --git a/TMessagesProj/src/main/res/layout/video_editor_layout.xml b/TMessagesProj/src/main/res/layout/video_editor_layout.xml
index 0eacd6abd..31bd21d6e 100644
--- a/TMessagesProj/src/main/res/layout/video_editor_layout.xml
+++ b/TMessagesProj/src/main/res/layout/video_editor_layout.xml
@@ -33,7 +33,7 @@
         android:layout_height="wrap_content"
         android:id="@+id/control_layout">
 
-        <org.telegram.ui.Views.VideoSeekBarView
+        <org.tomato.ui.Views.VideoSeekBarView
             android:layout_height="36dp"
             android:layout_width="match_parent"
             android:id="@+id/video_seekbar"
@@ -41,7 +41,7 @@
             android:layout_marginLeft="8dp"
             android:layout_marginRight="8dp"/>
 
-        <org.telegram.ui.Views.VideoTimelineView
+        <org.tomato.ui.Views.VideoTimelineView
             android:layout_width="match_parent"
             android:layout_height="74dp"
             android:layout_marginTop="36dp"
diff --git a/TMessagesProj/src/main/res/values-de/strings.xml b/TMessagesProj/src/main/res/values-de/strings.xml
index 9d8888043..a8de5f75c 100644
--- a/TMessagesProj/src/main/res/values-de/strings.xml
+++ b/TMessagesProj/src/main/res/values-de/strings.xml
@@ -3,7 +3,7 @@
 <!--Translation by iLLogical2007, DanielGroeger and everyone from https://github.com/DrKLO/Telegram/pull/129 whom I didn't notice -->
 
 <resources>
-    <string name="AppName">Telegram</string>
+    <string name="AppName">Catchup</string>
     <string name="LanguageName">Deutsch</string>
     <string name="LanguageNameInEnglish">German</string>
     <string name="LanguageCode">de</string>
diff --git a/TMessagesProj/src/main/res/values-es/strings.xml b/TMessagesProj/src/main/res/values-es/strings.xml
index ce8ca4e7f..4361e7370 100644
--- a/TMessagesProj/src/main/res/values-es/strings.xml
+++ b/TMessagesProj/src/main/res/values-es/strings.xml
@@ -3,7 +3,7 @@
 <!--Translation by Borja Campina, Edited by Victor Espinoza and Francisco Vila-->
 
 <resources>
-    <string name="AppName">Telegram</string>
+    <string name="AppName">Catchup</string>
     <string name="LanguageName">Español</string>
     <string name="LanguageNameInEnglish">Spanish</string>
     <string name="LanguageCode">es</string>
diff --git a/TMessagesProj/src/main/res/values-it/strings.xml b/TMessagesProj/src/main/res/values-it/strings.xml
index 835962588..d1f419cd1 100644
--- a/TMessagesProj/src/main/res/values-it/strings.xml
+++ b/TMessagesProj/src/main/res/values-it/strings.xml
@@ -3,7 +3,7 @@
 <!--https://www.transifex.com/projects/p/telegram/language/it/members/-->
 
 <resources>
-    <string name="AppName">Telegram</string>
+    <string name="AppName">CatchUp Messenger</string>
     <string name="LanguageName">Italiano</string>
     <string name="LanguageNameInEnglish">Italian</string>
     <string name="LanguageCode">it</string>
diff --git a/TMessagesProj/src/main/res/values-nl/strings.xml b/TMessagesProj/src/main/res/values-nl/strings.xml
index eafe28483..f49333484 100644
--- a/TMessagesProj/src/main/res/values-nl/strings.xml
+++ b/TMessagesProj/src/main/res/values-nl/strings.xml
@@ -3,7 +3,7 @@
 <!--https://www.transifex.com/projects/p/telegram/language/nl/members/-->
 
 <resources>
-    <string name="AppName">Telegram</string>
+    <string name="AppName">Catchup</string>
     <string name="LanguageName">Nederlands</string>
     <string name="LanguageNameInEnglish">Dutch</string>
     <string name="LanguageCode">nl</string>
diff --git a/TMessagesProj/src/main/res/values-v21/styles.xml b/TMessagesProj/src/main/res/values-v21/styles.xml
index bf6a19182..1e6e6f98d 100644
--- a/TMessagesProj/src/main/res/values-v21/styles.xml
+++ b/TMessagesProj/src/main/res/values-v21/styles.xml
@@ -40,14 +40,116 @@
         <item name="android:windowNoTitle">true</item>
     </style>
 
-    <!--ACTION BAR-->
+    <!--ACTION BAR Default-->
 
-    <style name="ActionBar.Transparent.TMessages.Start" parent="android:style/Widget.Material.Light.ActionBar">
+    <style name="ActionBar.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
         <item name="android:background">@color/header</item>
         <item name="android:logo">@drawable/transparent</item>
         <item name="android:title">""</item>
     </style>
 
+
+    <!--ACTION BAR LINE-->
+
+    <style name="ActionBarLine.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
+        <item name="android:background">@color/line_header</item>
+        <item name="android:logo">@drawable/transparent</item>
+        <item name="android:title">""</item>
+    </style>
+
+    <!--ACTION BAR Viber-->
+
+    <style name="ActionBarViber.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
+        <item name="android:background">@color/viber_header</item>
+        <item name="android:logo">@drawable/transparent</item>
+        <item name="android:title">""</item>
+    </style>
+
+    <!--ACTION BAR Whatsapp-->
+
+    <style name="ActionBarWhatsapp.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
+        <item name="android:background">@color/whatsapp_header</item>
+        <item name="android:logo">@drawable/transparent</item>
+        <item name="android:title">""</item>
+    </style>
+
+    <!--ACTION BAR Wechat-->
+
+    <style name="ActionBarWechat.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
+        <item name="android:background">@color/wechat_header</item>
+        <item name="android:logo">@drawable/transparent</item>
+        <item name="android:title">""</item>
+    </style>
+
+    <!--ACTION BAR Hike-->
+
+    <style name="ActionBarHike.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
+        <item name="android:background">@color/hike_header</item>
+        <item name="android:logo">@drawable/transparent</item>
+        <item name="android:title">""</item>
+    </style>
+
+
+    <!--ACTION BAR Bee-->
+
+    <style name="ActionBarBee.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
+        <item name="android:background">@color/bee_header</item>
+        <item name="android:logo">@drawable/transparent</item>
+        <item name="android:title">""</item>
+    </style>
+
+    <!--ACTION BAR Yahoo-->
+
+    <style name="ActionBarYahoo.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
+        <item name="android:background">@color/yahoo_header</item>
+        <item name="android:logo">@drawable/transparent</item>
+        <item name="android:title">""</item>
+    </style>
+
+
+    <!--ACTION BAR Mnsg-->
+
+    <style name="ActionBarMnsg.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
+        <item name="android:background">@color/msngr_header</item>
+        <item name="android:logo">@drawable/transparent</item>
+        <item name="android:title">""</item>
+    </style>
+
+
+    <!--ACTION BAR Hangouts-->
+
+    <style name="ActionBarHangouts.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
+        <item name="android:background">@color/hangouts_header</item>
+        <item name="android:logo">@drawable/transparent</item>
+        <item name="android:title">""</item>
+    </style>
+
+
+    <!--ACTION BAR Girls-->
+
+    <style name="ActionBarGirl.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
+        <item name="android:background">@color/girl_header</item>
+        <item name="android:logo">@drawable/transparent</item>
+        <item name="android:title">""</item>
+    </style>
+
+
+    <!--ACTION BAR GGMess-->
+
+    <style name="ActionBarGGmess.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
+        <item name="android:background">@color/gg_messenger_header</item>
+        <item name="android:logo">@drawable/transparent</item>
+        <item name="android:title">""</item>
+    </style>
+
+    <!--ACTION BAR Tango-->
+
+    <style name="ActionBarTango.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
+        <item name="android:background">@color/tango_header</item>
+        <item name="android:logo">@drawable/transparent</item>
+        <item name="android:title">""</item>
+    </style>
+
     <!--ACTION BAR ITEMS-->
 
     <style name="ActionBar.Transparent.TMessages.Item" parent="@android:TextAppearance.Widget.IconMenu.Item">
diff --git a/TMessagesProj/src/main/res/values-vi/strings.xml b/TMessagesProj/src/main/res/values-vi/strings.xml
new file mode 100644
index 000000000..b7eba47b4
--- /dev/null
+++ b/TMessagesProj/src/main/res/values-vi/strings.xml
@@ -0,0 +1,483 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<!--Translated by Telegram Team, corrected by Florian Keller-->
+
+<resources>
+    <string name="AppName">CatchUp</string>
+    <string name="LanguageName">Việt Nam</string>
+    <string name="LanguageNameInEnglish">Việt Nam</string>
+    <string name="LanguageCode">vi</string>
+    <!--signin view-->
+    <string name="YourPhone">Số điện thoại của bạn</string>
+    <string name="StartText">Hãy nhập mã quốc gia\nvà số điện thoại của bạn</string>
+    <string name="ChooseCountry">Chọn quốc gia</string>
+    <string name="WrongCountry">Mã quốc gia không đúng</string>
+    <!--code enter view-->
+    <string name="YourCode">Mã xác nhận</string>
+    <string name="SentSmsCode">Chúng tôi vừa gửi tin nhắn với mã kích hoạt đến điện thoại của bạn</string>
+    <string name="CallText">Chúng tôi sẽ gọi cho bạn trong %1$d:%2$02d</string>
+    <string name="Calling">Đang gọi cho bạn...</string>
+    <string name="Code">Mã</string>
+    <string name="WrongNumber">Số điện thoại sai?</string>
+    <string name="DidNotGetTheCode">Didn\'t get the code?</string>
+    <!--signup view-->
+    <string name="YourName">Nhập tên</string>
+    <string name="RegisterText">Nhập họ và tên</string>
+    <!--<string name="RegisterText">Set up your name and picture</string>-->
+    <string name="FirstName">Tên (bắt buộc)</string>
+    <string name="LastName">Họ (không bắt buộc)</string>
+    <string name="CancelRegistration">Hủy</string>
+    <!--chats view-->
+    <string name="Chats">Tin nhắn</string>
+    <string name="Search">Tìm</string>
+    <string name="NewMessages">Tin nhắn mới</string>
+    <string name="Settings">Cài đặt</string>
+    <string name="Contacts">Bạn bè</string>
+    <string name="NewGroup">Tạo mhóm</string>
+    <string name="Yesterday">hôm qua</string>
+    <string name="NoResult">Không thấy</string>
+    <string name="NoChats">Chưa có tin nhắn nào</string>
+    <string name="NoChatsHelp">Soạn tin nhắn mơi bằng cách nhấn\n nút tạo tin nhắn mới trên gó phải\n hoặc nhấn nút menu xem các lựa chọn</string>
+    <string name="WaitingForNetwork">Đang chờ kết nối...</string>
+    <string name="Connecting">Đang kết nối...</string>
+    <string name="Updating">Đang cập nhật...</string>
+    <string name="NewSecretChat">Tạo cuộc trò truyện bảo mật</string>
+    <string name="AwaitingEncryption">Chờ %s online...</string>
+    <string name="EncryptionRejected">Trò chuyện bảo mật đã được hủy</string>
+    <string name="EncryptionProcessing">Đang trao đổi mật khẩu...</string>
+    <string name="EncryptedChatStartedOutgoing">%s đã tham gia trò chuyện riêng tư.</string>
+    <string name="EncryptedChatStartedIncoming">Bạn đã tham gia trò chuyện riêng tư.</string>
+    <string name="ClearHistory">Xóa lịch sử tin nhắn</string>
+    <string name="DeleteChat">Xóa và thoát</string>
+    <string name="HiddenName">Ẩn tên</string>
+    <string name="SelectChat">Chọn cuộc trò chuyện</string>
+    <string name="PhotoTip">Nhấn và giữ để xem</string>
+    <string name="CompatibilityChat">%1$s đang sử dụng phiên bản cũ của Catchup Messenger, nên ảnh sẽ được hiện ở chế độ phù hợp.\n</string>
+    <!--broadcasts-->
+    <string name="BroadcastList">Danh sách nhắn tin nhiều người</string>
+    <string name="NewBroadcastList">Tạo tin nhắn nhiều người</string>
+    <string name="EnterListName">Nhập tên danh sách</string>
+    <string name="YouCreatedBroadcastList">Bạn đã tạo danh sách nhắn tin nhiều người</string>
+    <string name="AddRecipient">Thêm người nhận</string>
+    <string name="KickFromBroadcast">Xóa khỏi danh sách này</string>
+    <!--documents view-->
+    <string name="SelectFile">Đính kèm tệp</string>
+    <string name="FreeOfTotal">Free %1$s of %2$s</string>
+    <string name="UnknownError">Lỗi</string>
+    <string name="AccessError">Lỗi truy cập</string>
+    <string name="NoFiles">Chưa có tệp...</string>
+    <string name="FileUploadLimit">Tệp không được vượt quá %1$s</string>
+    <string name="NotMounted">Bộ nhớ chưa kết nối</string>
+    <string name="UsbActive">Đã kết nối USB</string>
+    <string name="InternalStorage">Bộ nhớ trong</string>
+    <string name="ExternalStorage">Bộ nhớ ngoài</string>
+    <string name="SystemRoot">Gốc hệ thống</string>
+    <string name="SdCard">Thẻ nhớ</string>
+    <!--chat view-->
+    <string name="Invisible">ẩn</string>
+    <string name="Typing">đang viết...</string>
+    <string name="Attach">Đính kèm</string>
+    <string name="IsTyping">đang viết...</string>
+    <string name="AreTyping">đang viết...</string>
+    <string name="GotAQuestion">Thắc mắc về \n Catchup Messenger?</string>
+    <string name="ChatTakePhoto">Thêm ảnh</string>
+    <string name="ChatGallery">Bộ sưu tập</string>
+    <string name="ChatLocation">Vị trí bản đồ</string>
+    <string name="ChatVideo">Video</string>
+    <string name="ChatDocument">Tài liệu</string>
+    <string name="NoMessages">Chưa có tin nhắn nào...</string>
+    <string name="ViewPhoto">Xem Ảnh</string>
+    <string name="ViewLocation">Xem vị trí</string>
+    <string name="ViewVideo">Bật video</string>
+    <string name="ForwardedMessage">Chuyển tiếp tin nhắn</string>
+    <string name="From">Gửi từ</string>
+    <string name="NoRecent">Gần đây không có</string>
+    <string name="Message">Tin nhắn</string>
+    <string name="TypeMessage">Nhắn tin</string>
+    <string name="DOWNLOAD">Tải xuống</string>
+    <string name="Selected">Đã chọn: %d</string>
+    <string name="ShareMyContactInfo">Chia sẻ thông tin liên lạc</string>
+    <string name="AddToContacts">Thêm liên lạc</string>
+    <string name="EncryptedPlaceholderTitleIncoming">%s đã mời bạn vào nhóm bảo mật.</string>
+    <string name="EncryptedPlaceholderTitleOutgoing">Bạn đã mời %s tham gia nhóm chat bảo mật.</string>
+    <string name="EncryptedDescriptionTitle">Nhắn tin bảo mật:</string>
+    <string name="EncryptedDescription1">Sử dụng thuật toán mã hóa hai phía</string>
+    <string name="EncryptedDescription2">Không để lại dấu vết</string>
+    <string name="EncryptedDescription3">Có hẹn giờ tự xóa</string>
+    <string name="EncryptedDescription4">Không cho phép chuyển tiếp</string>
+    <string name="YouWereKicked">Bạn bị đưa ra khỏi nhóm</string>
+    <string name="YouLeft">Bạn bị rời khỏi nhóm</string>
+    <string name="DeleteThisGroup">Xóa nhóm này</string>
+    <string name="DeleteThisChat">Xóa cuộc hội thoại này</string>
+    <string name="SlideToCancel">Kéo để hủy</string>
+    <string name="SaveToDownloads">Lưu vào thư mục Download</string>
+    <string name="ApplyLocalizationFile">Apply localization file</string>
+    <string name="UnsupportedAttachment">Không hộ trợ tệp</string>
+    <!--notification-->
+    <string name="EncryptedChatRequested">Kết nối bảo mật được yêu cầu</string>
+    <string name="EncryptedChatAccepted">Kết nối bảo mật đã bắt đầu</string>
+    <string name="MessageLifetimeChanged">%1$s đã đặt thời gian tự hủy %2$s</string>
+    <string name="MessageLifetimeChangedOutgoing">Bạn đặt thời gian tự hủy là %1$s</string>
+    <string name="MessageLifetimeRemoved">%1$s đã dừng thời gian tự hủy</string>
+    <string name="MessageLifetimeYouRemoved">Bạn đã dừng thời gian tự hủy</string>
+    <string name="YouHaveNewMessage">Bạn có một tin nhắn mới</string>
+    <string name="NotificationMessageText">%1$s: %2$s</string>
+    <string name="NotificationMessageNoText">%1$s đã gửi bạn một tin nhắn</string>
+    <string name="NotificationMessagePhoto">%1$s đã gửi bạn một bức ảnh</string>
+    <string name="NotificationMessageVideo">%1$s đã gửi bạn một video</string>
+    <string name="NotificationMessageContact">%1$s đã chia sẻ một liên lạc với bạn</string>
+    <string name="NotificationMessageMap">%1$s đã gửi bạn vị trí</string>
+    <string name="NotificationMessageDocument">%1$s đã gửi bạn một tài liệu</string>
+    <string name="NotificationMessageAudio">%1$s đã gửi bạn một audio</string>
+    <string name="NotificationMessageGroupText">%1$s @ %2$s: %3$s</string>
+    <string name="NotificationMessageGroupNoText">%1$s đã gửi một tin nhắn vào nhóm %2$s</string>
+    <string name="NotificationMessageGroupPhoto">%1$s đã gửi một bức ảnh vào nhóm %2$s</string>
+    <string name="NotificationMessageGroupVideo">%1$s đã gửi một video vào nhóm %2$s</string>
+    <string name="NotificationMessageGroupContact">%1$s đã chia sẻ một liên lạc vào nhóm %2$s</string>
+    <string name="NotificationMessageGroupMap">%1$s đã gửi một vị trí vào nhóm %2$s</string>
+    <string name="NotificationMessageGroupDocument">%1$s đã gửi một tệp vào nhóm %2$s</string>
+    <string name="NotificationMessageGroupAudio">%1$s đã gửi một audio vào nhóm %2$s</string>
+    <string name="NotificationInvitedToGroup">%1$s đã mời bạn vào nhóm %2$s</string>
+    <string name="NotificationEditedGroupName">%1$s đã sửa tên nhóm %2$s </string>
+    <string name="NotificationEditedGroupPhoto">%1$s sửa ảnh của nhóm %2$s</string>
+    <string name="NotificationGroupAddMember">%1$s đã mời %3$s vào nhóm %2$s</string>
+    <string name="NotificationGroupKickMember">%1$s đã xóa %3$s khỏi nhóm %2$s</string>
+    <string name="NotificationGroupKickYou">%1$s đã xóa bạn khỏi nhóm %2$s</string>
+    <string name="NotificationGroupLeftMember">%1$s đã rời nhóm %2$s</string>
+    <string name="NotificationContactJoined">%1$s đã dùng Catchup Messenger!</string>
+    <string name="NotificationUnrecognizedDevice">%1$s,\nChúng tôi phát hiện tài khoản của bạn đăng nhập trên %2$s\n\n thiết bị: %3$s\n Vị trí: %4$s\n\nNếu không phải bạn, Hãy chọn Cài đặt - Dừng các phiên khác.\n\nTrân thành cảm ơn,\nThe Catchup Messenger Team</string>
+    <string name="NotificationContactNewPhoto">%1$s cập nhật ảnh mới</string>
+    <string name="Reply">Reply</string>
+    <string name="ReplyToGroup">Trả lời %1$s</string>
+    <string name="ReplyToUser">Trả lời %1$s</string>
+    <string name="NotificationMessagesPeopleDisplayOrder">%1$s %2$s</string>
+    <!--contacts view-->
+    <string name="SelectContact">Lựa chọn liên lạc</string>
+    <string name="NoContacts">Chưa có liên lạc nào</string>
+    <string name="InviteText">Ứng dụng nhăn tin của người Việt: https://play.google.com/store/apps/details?id=org.tomato.messenger</string>
+    <string name="TodayAt">hôm nay,</string>
+    <string name="YesterdayAt">hôm qua,</string>
+    <string name="Online">online</string>
+    <string name="Offline">offline</string>
+    <string name="LastSeen">gần đây nhất</string>
+    <string name="LastSeenDate">gần đây nhất</string>
+    <string name="InviteFriends">Mời bạn bè</string>
+    <string name="GlobalSearch">Tìm kiếm</string>
+    <!--group create view-->
+    <string name="SendMessageTo">Gủi tin nhắn tới...</string>
+    <string name="EnterGroupNamePlaceholder">Nhập tên nhóm</string>
+    <string name="GroupName">Tên nhóm</string>
+    <string name="AllContacts">Tất cả danh bạ</string>
+    <string name="MembersCount">%1$d/%2$d thành viên</string>
+    <!--group info view-->
+    <string name="EnterGroupNameTitle">NHẬP TÊN NHÓM</string>
+    <string name="SharedMedia">Đã chia sẻ</string>
+    <string name="GroupInfo">Chi tiết nhóm</string>
+    <string name="SHAREDMEDIA">ĐÃ CHIA SẺ</string>
+    <string name="SETTINGS">CÀI ĐẶT</string>
+    <string name="AddMember">Thêm thành viên</string>
+    <string name="DeleteAndExit">Xóa và rời nhóm</string>
+    <string name="Notifications">Thông báo</string>
+    <string name="KickFromGroup">Rời nhóm</string>
+    <!--contact info view-->
+    <string name="ShareContact">Chia sẻ</string>
+    <string name="AddContact">Thêm</string>
+    <string name="BlockContact">Khóa</string>
+    <string name="EditContact">Sửa</string>
+    <string name="DeleteContact">Xóa</string>
+    <string name="PhoneHome">Trang chủ</string>
+    <string name="PhoneMobile">DI ĐỘNG</string>
+    <string name="PhoneWork">SỐ CƠ QUAN</string>
+    <string name="PhoneOther">KHÁC</string>
+    <string name="PhoneMain">CHÍNH</string>
+    <string name="ContactInfo">Thông tin liên lạc</string>
+    <string name="PHONE">SỐ ĐIỆN THOẠI</string>
+    <string name="StartEncryptedChat">Bắt đầu nhắn tin bảo mật</string>
+    <string name="CreateEncryptedChatError">Có lỗi xảy ra.</string>
+    <string name="SecretTitle">Tin nhắn bảo mật</string>
+    <string name="EncryptionKey">Khóa bảo mật</string>
+    <string name="MessageLifetime">Thời gian tự hủy</string>
+    <string name="ShortMessageLifetimeForever">Tắt</string>
+    <string name="EncryptionKeyDescription">Ảnh minh họa khóa bảo mật <![CDATA[<b>]]>%1$s<![CDATA[</b>]]>.<![CDATA[<br><br>]]>Nếu ảnh này giống với ảnh của <![CDATA[<b>]]>%2$s\'s<![CDATA[</b>]]>, kết nối của bạn 200%% bảo mật.<![CDATA[<br><br>]]> Xem thêm chi tiết tại telegram.org</string>
+    <string name="NumberUnknown">Unknown</string>
+    <string name="Info">INFO</string>
+    <string name="Phone">Phone</string>
+    <!--usernames-->
+    <string name="Username">Tên tài khoản</string>
+    <string name="UsernamePlaceholder">Tài khoản của bạn</string>
+    <string name="UsernameInUse">Rất tiếc, tài khoản của bạn đã có người sử dụng </string>
+    <string name="UsernameInvalid">Rất tiếc tên này không hợp lệ.</string>
+    <string name="UsernameInvalidShort">Tên này phải có ít nhất 5 kí tự</string>
+    <string name="UsernameInvalidLong">Tên không được vượt quá 20 kí tự</string>
+    <string name="UsernameInvalidStartNumber">Xin lỗi, tên không được bắt đầu bằn cữ số</string>
+    <string name="UsernameHelp">Bạn có thể chọn tên <![CDATA[<b>]]>Catchup Messenger<![CDATA[</b>]]>. Bằng cách này người khác có thể tìm được bạn mà không biết số điện thoại.<![CDATA[<br><br>]]>Bạn có thể dùng <![CDATA[<b>]]>a–z<![CDATA[</b>]]>, <![CDATA[<b>]]>0–9<![CDATA[</b>]]> và dấu gạch dưới. Độ dài tối thiểu <![CDATA[<b>]]>5<![CDATA[</b>]]> kí tự.</string>
+    <string name="UsernameChecking">Kiểm tra tên...</string>
+    <string name="UsernameAvailable">%1$s khả dụng.</string>
+    <string name="UsernameEmpty">Trống</string>
+    <string name="ErrorOccurred">Có lỗi xảy ra.</string>
+    <!--settings view-->
+    <string name="ResetNotificationsText">Khôi phục cài đặt thông báo</string>
+    <string name="TextSize">Cỡ chữ</string>
+    <string name="AskAQuestion">Thắc mắc</string>
+    <string name="EnableAnimations">Hiệu ứng</string>
+    <string name="Unblock">Bỏ khóa</string>
+    <string name="UnblockText">Nhấn và giữ để mở khóa.</string>
+    <string name="NoBlocked">Chưa có người dùng bị khóa</string>
+    <string name="MessageNotifications">THÔNG BÁO TIN NHẮN</string>
+    <string name="Alert">Thông báo</string>
+    <string name="MessagePreview">Xem trước tin nhắn</string>
+    <string name="GroupNotifications">THÔNG BÁO</string>
+    <string name="Sound">Âm thanh</string>
+    <string name="InAppNotifications">IN-APP NOTIFICATIONS</string>
+    <string name="InAppSounds">In-App Sounds</string>
+    <string name="InAppVibrate">In-App Vibrate</string>
+    <string name="Vibrate">Vibrate</string>
+    <string name="InAppPreview">In-App Preview</string>
+    <string name="Reset">RESET</string>
+    <string name="ResetAllNotifications">Khôi phục tất cả thông báo</string>
+    <string name="UndoAllCustom">Undo all custom notification settings for all your contacts and groups</string>
+    <string name="NotificationsAndSounds">Notifications and Sounds</string>
+    <string name="BlockedUsers">Blocked Users</string>
+    <string name="SaveIncomingPhotos">Lưu ảnh</string>
+    <string name="LogOut">Log Out</string>
+    <string name="YourFirstNameAndLastName">HỌ VÀ TÊN</string>
+    <string name="NoSound">Tắt âm</string>
+    <string name="Default">Mặt định</string>
+    <string name="Support">SUPPORT</string>
+    <string name="ChatBackground">Hình nền</string>
+    <string name="MessagesSettings">TIN NHẮN</string>
+    <string name="SendByEnter">Send by Enter</string>
+    <string name="TerminateAllSessions">Dừng tất cả các phiên khác</string>
+    <string name="Events">SỰ KIỆN</string>
+    <string name="ContactJoined">Contact joined Catchup Messenger</string>
+    <string name="Pebble">PEBBLE</string>
+    <string name="Language">Ngôn ngữ</string>
+    <string name="AskAQuestionInfo">Please note that Catchup Messenger Support is done by volunteers. We try to respond as quickly as possible, but it may take a while.<![CDATA[<br><br>]]>Please take a look at the <![CDATA[<a href=\"http://telegram.org/faq#general\">Catchup Messenger FAQ</a>]]>: it has answers to most questions and important tips for <![CDATA[<a href=\"http://telegram.org/faq#troubleshooting\">troubleshooting</a>]]>.</string>
+    <string name="AskButton">Ask a volunteer</string>
+    <string name="TelegramFaq">Catchup Messenger FAQ</string>
+    <string name="TelegramFaqUrl">https://telegram.org/faq</string>
+    <string name="DeleteLocalization">Delete localization?</string>
+    <string name="IncorrectLocalization">Incorrect localization file</string>
+    <string name="Enabled">Enabled</string>
+    <string name="Disabled">Disabled</string>
+    <string name="NotificationsService">Notifications Service</string>
+    <string name="NotificationsServiceDisableInfo">If Google Play Services are enough for you to receive notifications, you can disable Notifications Service. However we recommend you to leave it enabled to keep app running in background and receive instant notifications.</string>
+    <string name="SortBy">Sắp xếp theo</string>
+    <string name="ImportContacts">Import Contacts</string>
+    <string name="WiFiOnly">Via WiFi only</string>
+    <string name="SortFirstName">Tên</string>
+    <string name="SortLastName">Họ</string>
+    <string name="LedColor">Màu LED</string>
+    <string name="PopupNotification">Popup Notifications</string>
+    <string name="NoPopup">No popup</string>
+    <string name="OnlyWhenScreenOn">Only when screen \"on\"</string>
+    <string name="OnlyWhenScreenOff">Only when screen \"off\"</string>
+    <string name="AlwaysShowPopup">Always show popup</string>
+    <string name="BadgeNumber">Badge Counter</string>
+    <string name="Short">Short</string>
+    <string name="Long">Long</string>
+    <string name="SystemDefault">System default</string>
+    <string name="SettingsDefault">Settings default</string>
+    <string name="AutomaticMediaDownload">AUTOMATIC MEDIA DOWNLOAD</string>
+    <string name="WhenUsingMobileData">When using mobile data</string>
+    <string name="WhenConnectedOnWiFi">When connected on Wi-Fi</string>
+    <string name="WhenRoaming">When roaming</string>
+    <string name="NoMediaAutoDownload">No media</string>
+    <string name="SaveToGallerySettings">Save to gallery</string>
+    <!--media view-->
+    <string name="NoMedia">Chưa có chia sẻ ảnh và video</string>
+    <string name="CancelDownload">Dừng Download</string>
+    <!--map view-->
+    <string name="MyLocation">Vị trí của tôi</string>
+    <string name="Map">Bản đồ</string>
+    <string name="Satellite">Vệ tinh</string>
+    <string name="Hybrid">Cả hai</string>
+    <string name="MetersAway">m</string>
+    <string name="KMetersAway">km </string>
+    <string name="SendLocation">Gửi vị trí</string>
+    <string name="ShareLocation">Chia sẻ vị trí</string>
+    <!--photo gallery view-->
+    <string name="ShowAllMedia">Hiện tất cả ảnh và video</string>
+    <string name="SaveToGallery">Lưu</string>
+    <string name="Of">%1$d trong %2$d</string>
+    <string name="Gallery">Gallery</string>
+    <string name="AllPhotos">Tất cả ảnh</string>
+    <string name="NoPhotos">Chưa có ảnh</string>
+    <!--edit video view-->
+    <string name="EditVideo">Sửa video</string>
+    <string name="OriginalVideo">Video gốc</string>
+    <string name="EditedVideo">Video đã sửa</string>
+    <string name="SendingVideo">Đang gửi video...</string>
+    <string name="CompressVideo">Nén Video</string>
+    <!--button titles-->
+    <string name="Next">Tiếp</string>
+    <string name="Back">Quay lại</string>
+    <string name="Done">Xong</string>
+    <string name="Open">Mở</string>
+    <string name="Cancel">Hủy</string>
+    <string name="Add">Thêm</string>
+    <string name="Edit">Sửa</string>
+    <string name="Send">Gửi</string>
+    <string name="Call">Gọi</string>
+    <string name="Copy">Chép</string>
+    <string name="Delete">Xóa</string>
+    <string name="Forward">Chuyển</string>
+    <string name="Retry">Thử lại</string>
+    <string name="FromCamera">Từ camera</string>
+    <string name="FromGalley">Từ gallery</string>
+    <string name="DeletePhoto">Xóa ảnh</string>
+    <string name="OpenPhoto">Mở ảnh</string>
+    <string name="Set">Set</string>
+    <string name="OK">OK</string>
+    <!--messages-->
+    <string name="ActionKickUser">un1 đã xóa un2</string>
+    <string name="ActionLeftUser">un1 đã rời group</string>
+    <string name="ActionAddUser">un1 đã thêm un2</string>
+    <string name="ActionRemovedPhoto">un1 đã xóa ảnh của nhóm</string>
+    <string name="ActionChangedPhoto">un1 đẫ thay ảnh của nhóm</string>
+    <string name="ActionChangedTitle">un1 đã đổi tên nhóm thành to un2</string>
+    <string name="ActionCreateGroup">un1 đã tạo ảnh nhóm</string>
+    <string name="ActionYouKickUser">Bạn đã xóa un2</string>
+    <string name="ActionYouLeftUser">Bạn đã rời nhóm</string>
+    <string name="ActionYouAddUser">Bạn đã thêm un2</string>
+    <string name="ActionYouRemovedPhoto">Bạn đã xóa ảnh của nhóm</string>
+    <string name="ActionYouChangedPhoto">Bạn đã thay ảnh nhóm</string>
+    <string name="ActionYouChangedTitle">Bạn đã đổi tên nhóm un2</string>
+    <string name="ActionYouCreateGroup">Bạn đã tạo nhóm</string>
+    <string name="ActionKickUserYou">un1 đã rời bạn khỏi nhóm</string>
+    <string name="ActionAddUserYou">un1 đã thêm bạn</string>
+    <string name="UnsuppotedMedia">This message is not supported on your version of Catchup Messenger. Update the app to view: http://telegram.org/update</string>
+    <string name="AttachPhoto">Ảnh</string>
+    <string name="AttachVideo">Video</string>
+    <string name="AttachLocation">Vị trí</string>
+    <string name="AttachContact">Liên lạc</string>
+    <string name="AttachDocument">Tệp</string>
+    <string name="AttachAudio">Audio</string>
+    <string name="FromYou">Bạn</string>
+    <string name="ActionTakeScreenshootYou">You took a screenshot!</string>
+    <string name="ActionTakeScreenshoot">un1 took a screenshot!</string>
+    <!--Alert messages-->
+    <string name="InvalidPhoneNumber">Số điện thoại sai</string>
+    <string name="CodeExpired">Mã hết hạn, đăng nhập lại</string>
+    <string name="FloodWait">Làm ơn thử lại</string>
+    <string name="InvalidCode">Mã không đúng</string>
+    <string name="InvalidFirstName">Tên không hợp lệ</string>
+    <string name="InvalidLastName">Họ không hợp lệ</string>
+    <string name="Loading">Đang tải...</string>
+    <string name="NoPlayerInstalled">You don\'t have a video player, please install one to continue</string>
+    <string name="NoMailInstalled">Please send an email to sms@telegram.org and tell us about your problem.</string>
+    <string name="NoHandleAppInstalled">You don\'t have applications that can handle the file type \'%1$s\', please install one to continue</string>
+    <string name="InviteUser">Người này chưa dùng Catchup Messenger, gửi tin nhắn mời?</string>
+    <string name="AreYouSure">Bạn chắc chứ?</string>
+    <string name="AddContactQ">Thêm liên lạc?</string>
+    <string name="AddToTheGroup">Thêm %1$s vào nhóm?\n\nSố tin nhắn chuyển tiếp:</string>
+    <string name="ForwardMessagesTo">Chuyển tin nhắn tới %1$s?</string>
+    <string name="DeleteChatQuestion">Xóa cuộc hội thoại?</string>
+    <string name="SendMessagesTo">Gửi tin nhắn tới %1$s?</string>
+    <string name="AreYouSureLogout">Are you sure you want to log out?</string>
+    <string name="AreYouSureSessions">Are you sure you want to terminate all other sessions?</string>
+    <string name="AreYouSureDeleteAndExit">Bạn sẽ xóa và rời nhóm?</string>
+    <string name="AreYouSureDeleteThisChat">Bạn sẽ xóa cuộc hội thoại này?</string>
+    <string name="AreYouSureShareMyContactInfo">Bạn sẽ chia sẻ thông tin liên lạc này?</string>
+    <string name="AreYouSureBlockContact">Khóa người dùng này?</string>
+    <string name="AreYouSureUnblockContact">Bạn mở khóa người dùng này?</string>
+    <string name="AreYouSureDeleteContact">Xóa liên lạc này?</string>
+    <string name="AreYouSureSecretChat">Tạo hội thoại bảo mật?</string>
+    <string name="ForwardFromMyName">forward from my name</string>
+    <string name="SendMessagesToGroup">Gửi tin nhắn đến %1$s?</string>
+    <string name="ForwardMessagesToGroup">Chuyển tin nhắn đến %1$s?</string>
+    <string name="FeatureUnavailable">Sorry, this feature is currently not available in your country.</string>
+    <!--Intro view-->
+    <string name="Page1Title">Catchup Messenger</string>
+    <string name="Page2Title">Nhanh</string>
+    <string name="Page3Title">Miễn phí</string>
+    <string name="Page4Title">Bảo mật</string>
+    <string name="Page5Title">Tốt nhất</string>
+    <string name="Page6Title">Điện toán đám mây</string>
+    <string name="Page7Title">Riêng tư</string>
+    <string name="Page1Message">Ứng dụng nhắn tin <![CDATA[<b>nhanh nhất</b>]]> thế giới.<![CDATA[<br/>]]> <![CDATA[<b>linh hoạt</b>]]>, <![CDATA[<b>miễn phí</b>]]> and <![CDATA[<b>an toàn</b>]]>.</string>
+    <string name="Page2Message"><![CDATA[<b>Catchup Messenger</b>]]> gửi tin nhắn nhanh hơn<![CDATA[<br/>]]>bất kì ứng dụng nào.</string>
+    <string name="Page3Message"><![CDATA[<b>Catchup Messenger</b>]]> miễn phí mãi mãi<![CDATA[<br/>]]>. Không tính phí</string>
+    <string name="Page4Message"><![CDATA[<b>Catchup Messenger</b>]]> bảo vệ tin nhắn của bạn<![CDATA[<br/>]]>khỏi tấn công của hacker.</string>
+    <string name="Page5Message"><![CDATA[<b>Catchup Messenger</b>]]> không giới hạn<![CDATA[<br/>]]>tin nhắn, ảnh và video của bạn.</string>
+    <string name="Page6Message"><![CDATA[<b>Catchup Messenger</b>]]> cho phép bạn truy cập<![CDATA[<br/>]]>từ nhiều thiết bị.</string>
+    <string name="Page7Message"><![CDATA[<b>Catchup Messenger</b>]]> tin nhắn được mã hóa sâu<![CDATA[<br/>]]>và có thể tự hủy.</string>
+    <string name="StartMessaging">Start Messaging</string>
+    <!--plural-->
+    <string name="Online_zero">%1$d online</string>
+    <string name="Online_one">%1$d online</string>
+    <string name="Online_two">%1$d online</string>
+    <string name="Online_few">%1$d online</string>
+    <string name="Online_many">%1$d online</string>
+    <string name="Online_other">%1$d online</string>
+    <string name="Members_zero">không thành viên</string>
+    <string name="Members_one">%1$d thành viên</string>
+    <string name="Members_two">%1$d thành viên</string>
+    <string name="Members_few">%1$d thành viên</string>
+    <string name="Members_many">%1$d thành viên</string>
+    <string name="Members_other">%1$d thành viên</string>
+    <string name="AndMoreTyping_zero">và %1$d nhiều người khác đang viêt</string>
+    <string name="AndMoreTyping_one">và %1$d nhiều người khác đang viêt</string>
+    <string name="AndMoreTyping_two">và %1$d nhiều người khác đang viêt</string>
+    <string name="AndMoreTyping_few">và %1$d nhiều người khác đang viêt</string>
+    <string name="AndMoreTyping_many">và %1$d nhiều người khác đang viêt</string>
+    <string name="AndMoreTyping_other">và %1$d nhiều người khác đang viêt</string>
+    <string name="NewMessages_zero">no tin nhắn mới</string>
+    <string name="NewMessages_one">%1$d tin nhắn mới</string>
+    <string name="NewMessages_two">%1$d tin nhắn mới</string>
+    <string name="NewMessages_few">%1$d tin nhắn mới</string>
+    <string name="NewMessages_many">%1$d tin nhắn mới</string>
+    <string name="NewMessages_other">%1$d tin nhắn mới</string>
+    <string name="messages_zero">không có tin nhắn</string>
+    <string name="messages_one">%1$d tin nhắn</string>
+    <string name="messages_two">%1$d tin nhắn</string>
+    <string name="messages_few">%1$d tin nhắn</string>
+    <string name="messages_many">%1$d tin nhắn</string>
+    <string name="messages_other">%1$d tin nhắn</string>
+    <string name="FromContacts_zero">from no contacts</string>
+    <string name="FromContacts_one">from %1$d contact</string>
+    <string name="FromContacts_two">from %1$d contacts</string>
+    <string name="FromContacts_few">from %1$d contacts</string>
+    <string name="FromContacts_many">from %1$d contacts</string>
+    <string name="FromContacts_other">from %1$d contacts</string>
+    <string name="Seconds_zero">%1$d giây</string>
+    <string name="Seconds_one">%1$d giây</string>
+    <string name="Seconds_two">%1$d giây</string>
+    <string name="Seconds_few">%1$d giây</string>
+    <string name="Seconds_many">%1$d giây</string>
+    <string name="Seconds_other">%1$d  giây</string>
+    <string name="Minutes_zero">%1$d phút</string>
+    <string name="Minutes_one">%1$d phút</string>
+    <string name="Minutes_two">%1$d phút</string>
+    <string name="Minutes_few">%1$d phút</string>
+    <string name="Minutes_many">%1$d phút</string>
+    <string name="Minutes_other">%1$d phút</string>
+    <string name="Hours_zero">%1$d giờ</string>
+    <string name="Hours_one">%1$d giờ</string>
+    <string name="Hours_two">%1$d giờ</string>
+    <string name="Hours_few">%1$d giờ</string>
+    <string name="Hours_many">%1$d giờ</string>
+    <string name="Hours_other">%1$d giờ</string>
+    <string name="Days_zero">%1$d ngày</string>
+    <string name="Days_one">%1$d ngày</string>
+    <string name="Days_two">%1$d ngày</string>
+    <string name="Days_few">%1$d ngày</string>
+    <string name="Days_many">%1$d ngày</string>
+    <string name="Days_other">%1$d ngày</string>
+    <string name="Weeks_zero">%1$d tuần</string>
+    <string name="Weeks_one">%1$d tuần</string>
+    <string name="Weeks_two">%1$d tuần</string>
+    <string name="Weeks_few">%1$d tuần</string>
+    <string name="Weeks_many">%1$d tuần</string>
+    <string name="Weeks_other">%1$d tuần</string>
+    <!--date formatters-->
+    <string name="formatterMonth">MMM dd</string>
+    <string name="formatterYear">dd.MM.yy</string>
+    <string name="formatterYearMax">dd.MM.yyyy</string>
+    <string name="chatDate">MMMM d</string>
+    <string name="chatFullDate">MMMM d, yyyy</string>
+    <string name="formatterWeek">EEE</string>
+    <string name="formatterDay24H">HH:mm</string>
+    <string name="formatterDay12H">h:mm a</string>
+    <string name="formatDateAtTime">%1$s at %2$s</string>
+</resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values/colors.xml b/TMessagesProj/src/main/res/values/colors.xml
index 3636d32c2..b55309585 100755
--- a/TMessagesProj/src/main/res/values/colors.xml
+++ b/TMessagesProj/src/main/res/values/colors.xml
@@ -6,4 +6,18 @@
     <color name="settings_background_color">#ffffffff</color>
     <color name="divider">#dcdcdc</color>
     <color name="header">#ff54759e</color>
+    <color name="line_header">#323C52</color>
+    <color name="viber_header">#764F97</color>
+    <color name="whatsapp_header">#2F4346</color>
+    <color name="wechat_header">#2E3235</color>
+    <color name="hike_header">#0F8FE1</color>
+    <color name="bee_header">#F1BF3A</color>
+    <color name="yahoo_header">#7E3C79</color>
+    <color name="msngr_header">#FFCD05</color>
+    <color name="hangouts_header">#53AB3A</color>
+    <color name="girl_header">#D963AF</color>
+    <color name="tango_header">#F14C2B</color>
+    <color name="gg_messenger_header">#F2580B</color>
+    <color name="balloon_item_pressed">#669bb3dd</color>
+    <color name="balloon_item_selected">#66bacef2</color>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index afb85da55..91bf0cea7 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -3,7 +3,7 @@
 <!--Translated by Telegram Team, corrected by Florian Keller-->
 
 <resources>
-    <string name="AppName">Telegram</string>
+    <string name="AppName">CatchUp</string>
     <string name="LanguageName">English</string>
     <string name="LanguageNameInEnglish">English</string>
     <string name="LanguageCode">en</string>
@@ -52,7 +52,7 @@
     <string name="HiddenName">Hidden Name</string>
     <string name="SelectChat">Select Chat</string>
     <string name="PhotoTip">Tap and hold to view</string>
-    <string name="CompatibilityChat">%1$s is using an older version of Telegram, so secret photos will be shown in compatibility mode.\n\nOnce %2$s updates Telegram, photos with timers for 1 minute or less will start working in \'Tap and hold to view\' mode, and you will be notified whenever the other party takes a screenshot.</string>
+    <string name="CompatibilityChat">%1$s is using an older version of Catchup Messenger, so secret photos will be shown in compatibility mode.\n\nOnce %2$s updates Catchup Messenger, photos with timers for 1 minute or less will start working in \'Tap and hold to view\' mode, and you will be notified whenever the other party takes a screenshot.</string>
     <!--broadcasts-->
     <string name="BroadcastList">Broadcast List</string>
     <string name="NewBroadcastList">New Broadcast List</string>
@@ -79,7 +79,7 @@
     <string name="Attach">Attach</string>
     <string name="IsTyping">is typing...</string>
     <string name="AreTyping">are typing...</string>
-    <string name="GotAQuestion">Got a question\nabout Telegram?</string>
+    <string name="GotAQuestion">Got a question\nabout Catchup Messenger?</string>
     <string name="ChatTakePhoto">Take photo</string>
     <string name="ChatGallery">Gallery</string>
     <string name="ChatLocation">Location</string>
@@ -144,8 +144,8 @@
     <string name="NotificationGroupKickMember">%1$s removed %3$s from the group %2$s</string>
     <string name="NotificationGroupKickYou">%1$s removed you from the group %2$s</string>
     <string name="NotificationGroupLeftMember">%1$s has left the group %2$s</string>
-    <string name="NotificationContactJoined">%1$s joined Telegram!</string>
-    <string name="NotificationUnrecognizedDevice">%1$s,\nWe detected a login into your account from a new device on %2$s\n\nDevice: %3$s\nLocation: %4$s\n\nIf this wasn\'t you, you can go to Settings - Terminate all sessions.\n\nSincerely,\nThe Telegram Team</string>
+    <string name="NotificationContactJoined">%1$s joined Catchup Messenger!</string>
+    <string name="NotificationUnrecognizedDevice">%1$s,\nWe detected a login into your account from a new device on %2$s\n\nDevice: %3$s\nLocation: %4$s\n\nIf this wasn\'t you, you can go to Settings - Terminate all sessions.\n\nSincerely,\nThe Catchup Messenger Team</string>
     <string name="NotificationContactNewPhoto">%1$s updated profile photo</string>
     <string name="Reply">Reply</string>
     <string name="ReplyToGroup">Reply to %1$s</string>
@@ -154,7 +154,7 @@
     <!--contacts view-->
     <string name="SelectContact">Select Contact</string>
     <string name="NoContacts">No contacts yet</string>
-    <string name="InviteText">Hey, let\'s switch to Telegram: http://telegram.org/dl2</string>
+    <string name="InviteText">Hey, let\'s switch to Catchup Messenger: http://telegram.org/dl2</string>
     <string name="TodayAt">today at</string>
     <string name="YesterdayAt">yesterday at</string>
     <string name="Online">online</string>
@@ -210,7 +210,7 @@
     <string name="UsernameInvalidShort">A username must have at least 5 characters.</string>
     <string name="UsernameInvalidLong">The username must not exceed 32 characters.</string>
     <string name="UsernameInvalidStartNumber">Sorry, a username can\'t start with a number.</string>
-    <string name="UsernameHelp">You can choose a username on <![CDATA[<b>]]>Telegram<![CDATA[</b>]]>. If you do, other people will be able to find you by this username and contact you without knowing your phone number.<![CDATA[<br><br>]]>You can use <![CDATA[<b>]]>a–z<![CDATA[</b>]]>, <![CDATA[<b>]]>0–9<![CDATA[</b>]]> and underscores. Minimum length is <![CDATA[<b>]]>5<![CDATA[</b>]]> characters.</string>
+    <string name="UsernameHelp">You can choose a username on <![CDATA[<b>]]>Catchup Messenger<![CDATA[</b>]]>. If you do, other people will be able to find you by this username and contact you without knowing your phone number.<![CDATA[<br><br>]]>You can use <![CDATA[<b>]]>a–z<![CDATA[</b>]]>, <![CDATA[<b>]]>0–9<![CDATA[</b>]]> and underscores. Minimum length is <![CDATA[<b>]]>5<![CDATA[</b>]]> characters.</string>
     <string name="UsernameChecking">Checking username...</string>
     <string name="UsernameAvailable">%1$s is available.</string>
     <string name="UsernameEmpty">None</string>
@@ -249,12 +249,12 @@
     <string name="SendByEnter">Send by Enter</string>
     <string name="TerminateAllSessions">Terminate All Other Sessions</string>
     <string name="Events">EVENTS</string>
-    <string name="ContactJoined">Contact joined Telegram</string>
+    <string name="ContactJoined">Contact joined Catchup Messenger</string>
     <string name="Pebble">PEBBLE</string>
     <string name="Language">Language</string>
-    <string name="AskAQuestionInfo">Please note that Telegram Support is done by volunteers. We try to respond as quickly as possible, but it may take a while.<![CDATA[<br><br>]]>Please take a look at the <![CDATA[<a href=\"http://telegram.org/faq#general\">Telegram FAQ</a>]]>: it has answers to most questions and important tips for <![CDATA[<a href=\"http://telegram.org/faq#troubleshooting\">troubleshooting</a>]]>.</string>
+    <string name="AskAQuestionInfo">Please note that Catchup Messenger Support is done by volunteers. We try to respond as quickly as possible, but it may take a while.<![CDATA[<br><br>]]>Please take a look at the <![CDATA[<a href=\"http://telegram.org/faq#general\">Catchup Messenger FAQ</a>]]>: it has answers to most questions and important tips for <![CDATA[<a href=\"http://telegram.org/faq#troubleshooting\">troubleshooting</a>]]>.</string>
     <string name="AskButton">Ask a volunteer</string>
-    <string name="TelegramFaq">Telegram FAQ</string>
+    <string name="TelegramFaq">Catchup Messenger FAQ</string>
     <string name="TelegramFaqUrl">https://telegram.org/faq</string>
     <string name="DeleteLocalization">Delete localization?</string>
     <string name="IncorrectLocalization">Incorrect localization file</string>
@@ -346,7 +346,7 @@
     <string name="ActionYouCreateGroup">You created the group</string>
     <string name="ActionKickUserYou">un1 removed you</string>
     <string name="ActionAddUserYou">un1 added you</string>
-    <string name="UnsuppotedMedia">This message is not supported on your version of Telegram. Update the app to view: http://telegram.org/update</string>
+    <string name="UnsuppotedMedia">This message is not supported on your version of Catchup Messenger. Update the app to view: http://telegram.org/update</string>
     <string name="AttachPhoto">Photo</string>
     <string name="AttachVideo">Video</string>
     <string name="AttachLocation">Location</string>
@@ -367,41 +367,41 @@
     <string name="NoPlayerInstalled">You don\'t have a video player, please install one to continue</string>
     <string name="NoMailInstalled">Please send an email to sms@telegram.org and tell us about your problem.</string>
     <string name="NoHandleAppInstalled">You don\'t have applications that can handle the file type \'%1$s\', please install one to continue</string>
-    <string name="InviteUser">This user does not have Telegram yet, send an invitation?</string>
+    <string name="InviteUser">This user does not have Catchup Messenger yet, send an invitation?</string>
     <string name="AreYouSure">Are you sure?</string>
     <string name="AddContactQ">Add contact?</string>
     <string name="AddToTheGroup">Add %1$s to the group?\n\nNumber of last messages to forward:</string>
     <string name="ForwardMessagesTo">Forward messages to %1$s?</string>
-    <string name="DeleteChatQuestion">Delete this chat?</string>
-    <string name="SendMessagesTo">Send messages to %1$s?</string>
-    <string name="AreYouSureLogout">Are you sure you want to log out?</string>
-    <string name="AreYouSureSessions">Are you sure you want to terminate all other sessions?</string>
-    <string name="AreYouSureDeleteAndExit">Are you sure you want to delete and leave the group?</string>
-    <string name="AreYouSureDeleteThisChat">Are you sure you want to delete this chat?</string>
-    <string name="AreYouSureShareMyContactInfo">Are you sure you want to share your contact info?</string>
-    <string name="AreYouSureBlockContact">Are you sure you want to block this contact?</string>
-    <string name="AreYouSureUnblockContact">Are you sure you want to unblock this contact?</string>
-    <string name="AreYouSureDeleteContact">Are you sure you want to delete this contact?</string>
-    <string name="AreYouSureSecretChat">Are you sure you want to start a secret chat?</string>
-    <string name="ForwardFromMyName">forward from my name</string>
-    <string name="SendMessagesToGroup">Send messages to %1$s?</string>
-    <string name="ForwardMessagesToGroup">Forward messages to %1$s?</string>
-    <string name="FeatureUnavailable">Sorry, this feature is currently not available in your country.</string>
+<string name="DeleteChatQuestion">Delete this chat?</string>
+<string name="SendMessagesTo">Send messages to %1$s?</string>
+<string name="AreYouSureLogout">Are you sure you want to log out?</string>
+<string name="AreYouSureSessions">Are you sure you want to terminate all other sessions?</string>
+<string name="AreYouSureDeleteAndExit">Are you sure you want to delete and leave the group?</string>
+<string name="AreYouSureDeleteThisChat">Are you sure you want to delete this chat?</string>
+<string name="AreYouSureShareMyContactInfo">Are you sure you want to share your contact info?</string>
+<string name="AreYouSureBlockContact">Are you sure you want to block this contact?</string>
+<string name="AreYouSureUnblockContact">Are you sure you want to unblock this contact?</string>
+<string name="AreYouSureDeleteContact">Are you sure you want to delete this contact?</string>
+<string name="AreYouSureSecretChat">Are you sure you want to start a secret chat?</string>
+<string name="ForwardFromMyName">forward from my name</string>
+<string name="SendMessagesToGroup">Send messages to %1$s?</string>
+<string name="ForwardMessagesToGroup">Forward messages to %1$s?</string>
+<string name="FeatureUnavailable">Sorry, this feature is currently not available in your country.</string>
     <!--Intro view-->
-    <string name="Page1Title">Telegram</string>
-    <string name="Page2Title">Fast</string>
-    <string name="Page3Title">Free</string>
-    <string name="Page4Title">Secure</string>
-    <string name="Page5Title">Powerful</string>
+<string name="Page1Title">Catchup Messenger</string>
+<string name="Page2Title">Fast</string>
+<string name="Page3Title">Free</string>
+<string name="Page4Title">Secure</string>
+<string name="Page5Title">Powerful</string>
     <string name="Page6Title">Cloud-Based</string>
     <string name="Page7Title">Private</string>
-    <string name="Page1Message">The world\'s <![CDATA[<b>fastest</b>]]> messaging app.<![CDATA[<br/>]]>It is <![CDATA[<b>free</b>]]> and <![CDATA[<b>secure</b>]]>.</string>
-    <string name="Page2Message"><![CDATA[<b>Telegram</b>]]> delivers messages faster than<![CDATA[<br/>]]>any other application.</string>
-    <string name="Page3Message"><![CDATA[<b>Telegram</b>]]> is free forever. No ads.<![CDATA[<br/>]]>No subscription fees.</string>
-    <string name="Page4Message"><![CDATA[<b>Telegram</b>]]> keeps your messages safe<![CDATA[<br/>]]>from hacker attacks.</string>
-    <string name="Page5Message"><![CDATA[<b>Telegram</b>]]> has no limits on the size of<![CDATA[<br/>]]>your media and chats.</string>
-    <string name="Page6Message"><![CDATA[<b>Telegram</b>]]> lets you access your messages<![CDATA[<br/>]]>from multiple devices.</string>
-    <string name="Page7Message"><![CDATA[<b>Telegram</b>]]> messages are heavily encrypted<![CDATA[<br/>]]>and can self-destruct.</string>
+    <string name="Page1Message">The world\'s <![CDATA[<b>fastest</b>]]> messaging app.<![CDATA[<br/>]]>It is  <![CDATA[<b>flexible</b>]]>, <![CDATA[<b>free</b>]]> and <![CDATA[<b>secure</b>]]>.</string>
+    <string name="Page2Message"><![CDATA[<b>Catchup Messenger</b>]]> delivers messages faster than<![CDATA[<br/>]]>any other application.</string>
+    <string name="Page3Message"><![CDATA[<b>Catchup Messenger</b>]]> is free forever. No ads.<![CDATA[<br/>]]>No subscription fees.</string>
+    <string name="Page4Message"><![CDATA[<b>Catchup Messenger</b>]]> keeps your messages safe<![CDATA[<br/>]]>from hacker attacks.</string>
+    <string name="Page5Message"><![CDATA[<b>Catchup Messenger</b>]]> has no limits on the size of<![CDATA[<br/>]]>your media and chats.</string>
+    <string name="Page6Message"><![CDATA[<b>Catchup Messenger</b>]]> lets you access your messages<![CDATA[<br/>]]>from multiple devices.</string>
+    <string name="Page7Message"><![CDATA[<b>Catchup Messenger</b>]]> messages are heavily encrypted<![CDATA[<br/>]]>and can self-destruct.</string>
     <string name="StartMessaging">Start Messaging</string>
     <!--plural-->
     <string name="Online_zero">%1$d online</string>
diff --git a/TMessagesProj/src/main/res/values/styles.xml b/TMessagesProj/src/main/res/values/styles.xml
index d3f110e3b..330b5bbe5 100644
--- a/TMessagesProj/src/main/res/values/styles.xml
+++ b/TMessagesProj/src/main/res/values/styles.xml
@@ -4,7 +4,7 @@
     <!--THEMES-->
 
     <style name="Theme.TMessages.Start" parent="@android:style/Theme.Holo.Light">
-        <item name="android:actionBarStyle">@style/ActionBar.Transparent.TMessages.Start</item>
+        <item name="android:actionBarStyle">@style/ActionBarHike.Transparent.TMessages.Start</item>
         <item name="android:colorBackground">@android:color/white</item>
         <item name="android:windowBackground">@android:color/white</item>
         <item name="android:windowContentOverlay">@null</item>
@@ -32,7 +32,7 @@
         <item name="android:windowNoTitle">true</item>
     </style>
 
-    <!--ACTION BAR-->
+    <!--ACTION BAR Default-->
 
     <style name="ActionBar.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
         <item name="android:background">@color/header</item>
@@ -40,6 +40,108 @@
         <item name="android:title">""</item>
     </style>
 
+
+    <!--ACTION BAR LINE-->
+
+    <style name="ActionBarLine.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
+        <item name="android:background">@color/line_header</item>
+        <item name="android:logo">@drawable/transparent</item>
+        <item name="android:title">""</item>
+    </style>
+
+    <!--ACTION BAR Viber-->
+
+    <style name="ActionBarViber.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
+        <item name="android:background">@color/viber_header</item>
+        <item name="android:logo">@drawable/transparent</item>
+        <item name="android:title">""</item>
+    </style>
+
+    <!--ACTION BAR Whatsapp-->
+
+    <style name="ActionBarWhatsapp.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
+        <item name="android:background">@color/whatsapp_header</item>
+        <item name="android:logo">@drawable/transparent</item>
+        <item name="android:title">""</item>
+    </style>
+
+    <!--ACTION BAR Wechat-->
+
+    <style name="ActionBarWechat.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
+        <item name="android:background">@color/wechat_header</item>
+        <item name="android:logo">@drawable/transparent</item>
+        <item name="android:title">""</item>
+    </style>
+
+    <!--ACTION BAR Hike-->
+
+    <style name="ActionBarHike.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
+        <item name="android:background">@color/hike_header</item>
+        <item name="android:logo">@drawable/transparent</item>
+        <item name="android:title">""</item>
+    </style>
+
+
+    <!--ACTION BAR Bee-->
+
+    <style name="ActionBarBee.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
+        <item name="android:background">@color/bee_header</item>
+        <item name="android:logo">@drawable/transparent</item>
+        <item name="android:title">""</item>
+    </style>
+
+    <!--ACTION BAR Yahoo-->
+
+    <style name="ActionBarYahoo.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
+        <item name="android:background">@color/yahoo_header</item>
+        <item name="android:logo">@drawable/transparent</item>
+        <item name="android:title">""</item>
+    </style>
+
+
+    <!--ACTION BAR Mnsg-->
+
+    <style name="ActionBarMnsg.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
+        <item name="android:background">@color/msngr_header</item>
+        <item name="android:logo">@drawable/transparent</item>
+        <item name="android:title">""</item>
+    </style>
+
+
+    <!--ACTION BAR Hangouts-->
+
+    <style name="ActionBarHangouts.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
+        <item name="android:background">@color/hangouts_header</item>
+        <item name="android:logo">@drawable/transparent</item>
+        <item name="android:title">""</item>
+    </style>
+
+
+    <!--ACTION BAR Girls-->
+
+    <style name="ActionBarGirl.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
+        <item name="android:background">@color/girl_header</item>
+        <item name="android:logo">@drawable/transparent</item>
+        <item name="android:title">""</item>
+    </style>
+
+
+    <!--ACTION BAR GGMess-->
+
+    <style name="ActionBarGGmess.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
+        <item name="android:background">@color/gg_messenger_header</item>
+        <item name="android:logo">@drawable/transparent</item>
+        <item name="android:title">""</item>
+    </style>
+
+    <!--ACTION BAR Tango-->
+
+    <style name="ActionBarTango.Transparent.TMessages.Start" parent="android:style/Widget.Holo.Light.ActionBar">
+        <item name="android:background">@color/tango_header</item>
+        <item name="android:logo">@drawable/transparent</item>
+        <item name="android:title">""</item>
+    </style>
+
     <!--ACTION BAR ITEMS-->
 
     <style name="ActionBar.Transparent.TMessages.Item" parent="@android:TextAppearance.Widget.IconMenu.Item">
diff --git a/TMessagesProj/src/main/res/xml/contacts.xml b/TMessagesProj/src/main/res/xml/contacts.xml
index 43fa9fd60..32bf4bbbf 100644
--- a/TMessagesProj/src/main/res/xml/contacts.xml
+++ b/TMessagesProj/src/main/res/xml/contacts.xml
@@ -2,7 +2,7 @@
 
 <ContactsSource xmlns:android="http://schemas.android.com/apk/res/android">
     <ContactsDataKind android:icon="@drawable/ic_launcher"
-        android:mimeType="vnd.android.cursor.item/vnd.org.telegram.messenger.android.profile"
+        android:mimeType="vnd.android.cursor.item/vnd.org.tomato.messenger.android.profile"
         android:summaryColumn="data2"
         android:detailColumn="data3"
         android:detailSocialSummary="true"/>
diff --git a/gmon.out b/gmon.out
new file mode 100644
index 000000000..fc729932a
Binary files /dev/null and b/gmon.out differ
