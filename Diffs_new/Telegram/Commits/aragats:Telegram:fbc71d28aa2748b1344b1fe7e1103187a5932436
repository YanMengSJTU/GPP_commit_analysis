diff --git a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
index 1bba3049d..e5b320f8b 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/MediaController.java
@@ -1049,6 +1049,22 @@ public boolean validateImage(Image image) {
     }
 
 
+    public void deleteFile(String fileUrl) {
+        if (fileUrl == null) {
+            return;
+        }
+        try {
+            File file = new File(fileUrl);
+            if (file.exists()) {
+                file.delete();
+            }
+        } catch (Exception e) {
+            //TODO handle exception
+            e.printStackTrace();
+        }
+
+    }
+
     //TODO works not properly. int increase the size of the file.
     public void saveBitmap(Image image) {
         FileOutputStream out = null;
@@ -1062,12 +1078,27 @@ public void saveBitmap(Image image) {
             out = new FileOutputStream(resizedImage);
             int width = image.getWidth();
             int height = image.getHeight();
-            if (image.getWidth() > Constants.PHOTO_WIDTH_MAX) {
+            if (width > Constants.PHOTO_WIDTH_MAX) {
                 width = Constants.PHOTO_WIDTH_MAX;
                 float scale = (float) image.getWidth() / (float) Constants.PHOTO_WIDTH_MAX; // scale calculate
                 height = (int) (height / scale);
             }
 
+
+//            if (width > height) {
+//                if (width > Constants.PHOTO_WIDTH_MAX) {
+//                    width = Constants.PHOTO_WIDTH_MAX;
+//                    float scale = (float) image.getWidth() / (float) Constants.PHOTO_WIDTH_MAX; // scale calculate
+//                    height = (int) (height / scale);
+//                }
+//            } else {
+//                if (height > Constants.PHOTO_HEIGHT_MAX) {
+//                    height = Constants.PHOTO_HEIGHT_MAX;
+//                    float scale = (float) image.getHeight() / (float) Constants.PHOTO_HEIGHT_MAX; // scale calculate
+//                    width = (int) (width / scale);
+//                }
+//            }
+
 //            BitmapFactory.Options options = new BitmapFactory.Options();
 
 //            Bitmap bitmap = BitmapFactory.decodeFile(image.getUrl(), options);
@@ -1075,12 +1106,13 @@ public void saveBitmap(Image image) {
 //            http://stackoverflow.com/questions/4821488/bad-image-quality-after-resizing-scaling-bitmap
 
             Bitmap resized = Bitmap.createScaledBitmap(image.getBitmap(), width, height, true);
-            Bitmap.CompressFormat compressFormat = Bitmap.CompressFormat.PNG;
+            Bitmap.CompressFormat compressFormat = Bitmap.CompressFormat.JPEG; // always JPEG because if PNG then comress odes not work.
             String type = image.getType();
-            if (!StringUtils.isEmpty(type) &&
-                    (type.toLowerCase().contains("jpeg") || type.toLowerCase().contains("jpg"))) {
-                compressFormat = Bitmap.CompressFormat.JPEG;
-            }
+//            if (!StringUtils.isEmpty(type) &&
+//                    (type.toLowerCase().contains("jpeg") || type.toLowerCase().contains("jpg"))) {
+//                compressFormat = Bitmap.CompressFormat.JPEG;
+//            }
+
 
 //            http://www.hongkiat.com/blog/jpeg-optimization-guide/
 
@@ -1093,11 +1125,13 @@ public void saveBitmap(Image image) {
             resized.compress(compressFormat, Constants.PHOTO_QUALITY, out); // bmp is your Bitmap instance
             // PNG is a lossless format, the compression factor (100) is ignored
 
+//            image.setType("jpg");
             image.setBitmap(resized);
             image.setUrl(resizedImage.getAbsolutePath());
             image.setWidth(width);
             image.setHeight(height);
         } catch (Exception e) {
+            //TODO handle exception
             e.printStackTrace();
         } finally {
             try {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
index 013f89fb2..69dd83c9f 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
@@ -41,6 +41,7 @@
 import ru.aragats.wgo.dto.Coordinates;
 import ru.aragats.wgo.dto.FileUploadRequest;
 import ru.aragats.wgo.dto.Image;
+import ru.aragats.wgo.dto.KeyValue;
 import ru.aragats.wgo.dto.Post;
 import ru.aragats.wgo.dto.PostRequest;
 import ru.aragats.wgo.dto.PostResponse;
@@ -175,12 +176,14 @@ public void addPost(final Post post) {
         RestManager.getInstance().uploadImage(new FileUploadRequest(post.getImage().getUrl(), post.getImage().getType()), new Callback<List<Image>>() {
             @Override
             public void onResponse(Call<List<Image>> call, Response<List<Image>> response) {
-                post.setImages(response.body()); // TODO chek whether images are not empty
+                MediaController.getInstance().deleteFile(post.getImage().getUrl());
+                post.setImages(response.body()); // TODO check whether images are not empty
                 savePost(post);
             }
 
             @Override
             public void onFailure(Call<List<Image>> call, Throwable t) {
+                MediaController.getInstance().deleteFile(post.getImage().getUrl());
                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.savePostError);
             }
         });
@@ -188,15 +191,15 @@ public void onFailure(Call<List<Image>> call, Throwable t) {
 
 
     private void savePost(final Post post) {
-        RestManager.getInstance().savePost(post, new Callback<String>() {
+        RestManager.getInstance().savePost(post, new Callback<KeyValue>() {
             @Override
-            public void onResponse(Call<String> call, Response<String> response) {
-                post.setId(response.body());
+            public void onResponse(Call<KeyValue> call, Response<KeyValue> response) {
+                post.setId(response.body().getKey());
                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.newPostSaved);
             }
 
             @Override
-            public void onFailure(Call<String> call, Throwable t) {
+            public void onFailure(Call<KeyValue> call, Throwable t) {
                 NotificationCenter.getInstance().postNotificationName(NotificationCenter.savePostError);
             }
 
@@ -274,8 +277,8 @@ public void loadPosts(final String idOffset, final int offset, final int count,
             nextOffset = 0;
             loadLocalPosts(postRequest, reload);
         } else {
-//            loadPostFromServer(postRequest, reload);
-            loadVKPhotos(postRequest, reload);
+            loadPostFromServer(postRequest, reload);
+//            loadVKPhotos(postRequest, reload);
         }
 
 
@@ -434,6 +437,9 @@ public void loadPostsMock(final int offset, final int count, boolean reload) {
     }
 
     public void processLoadedPosts(PostResponse postResponse, boolean reload) {
+        if (postResponse.getPosts() == null) {
+            postResponse.setPosts(new ArrayList<Post>());
+        }
         if (reload) {
             posts.clear();
             postsMap.clear();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
index 775bda831..ad5c84a62 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
@@ -676,6 +676,11 @@ public void buildLayout() {
 
                 float scale = (float) previewImage.getWidth() / (float) photoWidth; // scale calculate
 
+//                if (previewImage.getWidth() < 800 && scale < 1) {
+//                    scale = 1;
+//                }
+
+
                 if (previewImage.getSize() == 0) { // size of the file.
                     previewImage.setSize(-1);
                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/utils/Constants.java b/TMessagesProj/src/main/java/org/telegram/utils/Constants.java
index 6ded2cf43..50f815c17 100644
--- a/TMessagesProj/src/main/java/org/telegram/utils/Constants.java
+++ b/TMessagesProj/src/main/java/org/telegram/utils/Constants.java
@@ -34,17 +34,26 @@
 
     // sizes from VK
     public static final int PHOTO_WIDTH_2560 = 2560;
+    public static final int PHOTO_HEIGHT_1920 = 1920;
     public static final int PHOTO_WIDTH_1280 = 1280;
     public static final int PHOTO_WIDTH_807 = 807;
     public static final int PHOTO_WIDTH_604 = 604;
 
 
-    public static final int PHOTO_WIDTH_MAX = PHOTO_WIDTH_2560;
+    public static final int PHOTO_HEIGHT_1600 = 1600;
+
+
+    //    https://colorlib.com/wp/size-of-the-instagram-picture/  1080x1350  1080x566 1080x1080 - instagram
+    // width: 800 or 1080 or 1280 or 1920 or 2560
+    // height: 1000 or 1350 or 1600 or 2400 or 3200s
+    public static final int PHOTO_WIDTH_MAX = PHOTO_WIDTH_1280;
+    public static final int PHOTO_HEIGHT_MAX = PHOTO_HEIGHT_1600;
 
     public static final int PHOTO_WIDTH_MIN = PHOTO_WIDTH_604;
     public static final int PHOTO_HEIGHT_MIN = PHOTO_WIDTH_604;
 
-    public static final int PHOTO_QUALITY = 70;
+    //    http://photo.stackexchange.com/questions/30243/what-quality-to-choose-when-converting-to-jpg 40-60, 70-80, or 90-100
+    public static final int PHOTO_QUALITY = 70; // 70 - was recommendation.
 
 
     public static final String EXTENSION_JPG = ".jpg";
@@ -64,5 +73,5 @@
 
 
     public static final int IMAGE_2_MB = 2 * 1024 * 1024; // 1 MB
-    public static final int IMAGE_1_MB =  1024 * 1024; // 1 MB
+    public static final int IMAGE_1_MB = 1024 * 1024; // 1 MB
 }
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/dto/KeyValue.java b/TMessagesProj/src/main/java/ru/aragats/wgo/dto/KeyValue.java
new file mode 100644
index 000000000..c25e621b0
--- /dev/null
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/dto/KeyValue.java
@@ -0,0 +1,23 @@
+package ru.aragats.wgo.dto;
+
+/**
+ * Created by aragats on 07/05/16.
+ */
+public class KeyValue {
+    String key;
+
+    public KeyValue() {
+    }
+
+    public KeyValue(String value) {
+        this.key = value;
+    }
+
+    public String getKey() {
+        return key;
+    }
+
+    public void setKey(String key) {
+        this.key = key;
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/rest/manager/RestManager.java b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/manager/RestManager.java
index 66f93b85f..6383bc2be 100644
--- a/TMessagesProj/src/main/java/ru/aragats/wgo/rest/manager/RestManager.java
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/manager/RestManager.java
@@ -10,6 +10,7 @@
 import retrofit2.Callback;
 import ru.aragats.wgo.dto.FileUploadRequest;
 import ru.aragats.wgo.dto.Image;
+import ru.aragats.wgo.dto.KeyValue;
 import ru.aragats.wgo.dto.Post;
 import ru.aragats.wgo.dto.PostRequest;
 import ru.aragats.wgo.dto.PostResponse;
@@ -104,13 +105,13 @@ private RestManager() {
     }
 
     // savePost
-    public Call<String> savePost(Post post, Callback<String> callback) {
-        Call<String> call = savePostCall(post);
+    public Call<KeyValue> savePost(Post post, Callback<KeyValue> callback) {
+        Call<KeyValue> call = savePostCall(post);
         call.enqueue(callback);
         return call;
     }
 
-    private Call<String> savePostCall(Post post) {
+    private Call<KeyValue> savePostCall(Post post) {
         return restClient.getRestService().savePost(post);
     }
 
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/rest/service/RestService.java b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/service/RestService.java
index 72945247f..9c3253ec7 100644
--- a/TMessagesProj/src/main/java/ru/aragats/wgo/rest/service/RestService.java
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/service/RestService.java
@@ -11,6 +11,7 @@
 import retrofit2.http.Path;
 import retrofit2.http.Query;
 import ru.aragats.wgo.dto.Image;
+import ru.aragats.wgo.dto.KeyValue;
 import ru.aragats.wgo.dto.Post;
 import ru.aragats.wgo.dto.PostResponse;
 
@@ -36,7 +37,7 @@
 
 
     @POST("/api/posts/save")
-    Call<String> savePost(@Body Post post);
+    Call<KeyValue> savePost(@Body Post post);
 
 
 
