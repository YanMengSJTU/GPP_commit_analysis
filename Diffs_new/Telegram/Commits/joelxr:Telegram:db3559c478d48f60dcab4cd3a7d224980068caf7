diff --git a/TMessagesProj/src/main/java/org/telegram/android/SpotifyHelper.java b/TMessagesProj/src/main/java/org/telegram/android/SpotifyHelper.java
index 84dfa74d6..409d6ee02 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/SpotifyHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/SpotifyHelper.java
@@ -6,6 +6,9 @@
 import com.spotify.sdk.android.authentication.AuthenticationRequest;
 import com.spotify.sdk.android.authentication.AuthenticationResponse;
 
+import kaaes.spotify.webapi.android.SpotifyApi;
+import kaaes.spotify.webapi.android.SpotifyService;
+
 public class SpotifyHelper {
 
     private static SpotifyHelper instance;
@@ -15,6 +18,7 @@
 
     private String accessToken;
     private boolean logged;
+    private SpotifyApi api;
 
     private SpotifyHelper() {}
 
@@ -53,4 +57,8 @@ public boolean isLogged() {
     public void setLogged(boolean logged) {
         this.logged = logged;
     }
+
+    public SpotifyApi getApi() { return api; }
+
+    public void setApi(SpotifyApi api) { this.api = api; }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/LoaderImageView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/LoaderImageView.java
new file mode 100644
index 000000000..9013b0ad2
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/LoaderImageView.java
@@ -0,0 +1,142 @@
+package org.telegram.ui.Components;
+
+import android.content.Context;
+import android.graphics.drawable.Drawable;
+import android.os.Handler;
+import android.os.Handler.Callback;
+import android.os.Message;
+import android.util.AttributeSet;
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.ProgressBar;
+
+import java.io.IOException;
+import java.net.MalformedURLException;
+
+/**
+ * Free for anyone to use, just say thanks and share
+ * @author Blundell
+ *
+ */
+public class LoaderImageView extends LinearLayout{
+
+    private static final int COMPLETE = 0;
+    private static final int FAILED = 1;
+
+    private Context mContext;
+    private Drawable mDrawable;
+    private ProgressBar mSpinner;
+    private ImageView mImage;
+
+    /**
+     * This is used when creating the view in XML
+     * To have an image load in XML use the tag 'image="http://developer.android.com/images/dialog_buttons.png"'
+     * Replacing the url with your desired image
+     * Once you have instantiated the XML view you can call
+     * setImageDrawable(url) to change the image
+     * @param context
+     * @param attrSet
+     */
+    public LoaderImageView(final Context context, final AttributeSet attrSet) {
+        super(context, attrSet);
+        final String url = attrSet.getAttributeValue(null, "image");
+        if(url != null){
+            instantiate(context, url);
+        } else {
+            instantiate(context, null);
+        }
+    }
+
+    /**
+     * This is used when creating the view programatically
+     * Once you have instantiated the view you can call
+     * setImageDrawable(url) to change the image
+     * @param context the Activity context
+     * @param imageUrl the Image URL you wish to load
+     */
+    public LoaderImageView(final Context context, final String imageUrl) {
+        super(context);
+        instantiate(context, imageUrl);
+    }
+
+    /**
+     *  First time loading of the LoaderImageView
+     *  Sets up the LayoutParams of the view, you can change these to
+     *  get the required effects you want
+     */
+    private void instantiate(final Context context, final String imageUrl) {
+        mContext = context;
+
+        mImage = new ImageView(mContext);
+        mImage.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
+
+        mSpinner = new ProgressBar(mContext);
+        mSpinner.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
+
+        mSpinner.setIndeterminate(true);
+
+        addView(mSpinner);
+        addView(mImage);
+
+        if(imageUrl != null){
+            setImageDrawable(imageUrl);
+        }
+    }
+
+    /**
+     * Set's the view's drawable, this uses the internet to retrieve the image
+     * don't forget to add the correct permissions to your manifest
+     * @param imageUrl the url of the image you wish to load
+     */
+    public void setImageDrawable(final String imageUrl) {
+        mDrawable = null;
+        mSpinner.setVisibility(View.VISIBLE);
+        mImage.setVisibility(View.GONE);
+        new Thread(){
+            public void run() {
+                try {
+                    mDrawable = getDrawableFromUrl(imageUrl);
+                    imageLoadedHandler.sendEmptyMessage(COMPLETE);
+                } catch (MalformedURLException e) {
+                    imageLoadedHandler.sendEmptyMessage(FAILED);
+                } catch (IOException e) {
+                    imageLoadedHandler.sendEmptyMessage(FAILED);
+                }
+            };
+        }.start();
+    }
+
+    /**
+     * Callback that is received once the image has been downloaded
+     */
+    private final Handler imageLoadedHandler = new Handler(new Callback() {
+        @Override
+        public boolean handleMessage(Message msg) {
+            switch (msg.what) {
+                case COMPLETE:
+                    mImage.setImageDrawable(mDrawable);
+                    mImage.setVisibility(View.VISIBLE);
+                    mSpinner.setVisibility(View.GONE);
+                    break;
+                case FAILED:
+                default:
+                    // Could change image here to a 'failed' image
+                    // otherwise will just keep on spinning
+                    break;
+            }
+            return true;
+        }
+    });
+
+    /**
+     * Pass in an image url to get a drawable object
+     * @return a drawable object
+     * @throws IOException
+     * @throws MalformedURLException
+     */
+    private static Drawable getDrawableFromUrl(final String url) throws IOException, MalformedURLException {
+        return Drawable.createFromStream(((java.io.InputStream)new java.net.URL(url).getContent()), "name");
+    }
+
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Listeners/SpotifySearchTextListener.java b/TMessagesProj/src/main/java/org/telegram/ui/Listeners/SpotifySearchTextListener.java
new file mode 100644
index 000000000..36512dc09
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Listeners/SpotifySearchTextListener.java
@@ -0,0 +1,66 @@
+package org.telegram.ui.Listeners;
+
+import android.os.Message;
+import android.widget.EditText;
+
+import org.telegram.android.SpotifyHelper;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
+import org.telegram.ui.SongSelectActivity;
+
+import kaaes.spotify.webapi.android.SpotifyService;
+import kaaes.spotify.webapi.android.models.Pager;
+import kaaes.spotify.webapi.android.models.Track;
+import kaaes.spotify.webapi.android.models.TracksPager;
+import retrofit.Callback;
+import retrofit.RetrofitError;
+import retrofit.client.Response;
+
+/**
+ * Created by joel on 14/03/15.
+ */
+public class SpotifySearchTextListener implements ActionBarMenuItem.ActionBarMenuItemSearchListener {
+
+    private SongSelectActivity parent;
+
+    public SpotifySearchTextListener (SongSelectActivity parent) {
+        this.parent = parent;
+    }
+
+    @Override
+    public void onSearchExpand() {}
+
+    @Override
+    public void onSearchCollapse() {}
+
+    @Override
+    public void onTextChanged(EditText editText) {
+        String text = editText.getText().toString();
+        searchText(text);
+    }
+
+    private void searchText(String text) {
+        if (text.length() > 5 ) {
+
+            SpotifyService service = SpotifyHelper.getInstance().getApi().getService();
+
+
+            service.searchTracks(text, new Callback<TracksPager>() {
+                @Override
+                public void success(TracksPager tracksPager, Response response) {
+                    Pager<Track> result = tracksPager.tracks;
+                    parent.setSearchResult(result.items);
+                    Message msg = parent.handler.obtainMessage();
+                    msg.obj = result.items;
+                    parent.handler.sendMessage(msg);
+
+                }
+
+                @Override
+                public void failure(RetrofitError retrofitError) {
+
+                }
+            });
+        }
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
index fe2e71fce..d58453cf6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
@@ -81,6 +81,8 @@
 import java.util.Timer;
 import java.util.TimerTask;
 
+import kaaes.spotify.webapi.android.SpotifyApi;
+
 public class LoginActivity extends BaseFragment {
 
     private final static int done_button = 1;
@@ -455,6 +457,8 @@ public void onActivityResultFragment(int requestCode, int resultCode, Intent dat
                         spotifyView.getConnectButton().setText(LocaleController.getString("Done", R.string.Done));
                         SpotifyHelper.getInstance().setAccessToken(response.getAccessToken());
                         SpotifyHelper.getInstance().setLogged(true);
+                        SpotifyHelper.getInstance().setApi(new SpotifyApi());
+                        SpotifyHelper.getInstance().getApi().setAccessToken(response.getAccessToken());
                         break;
                     case ERROR:
                         spotifyView.setMessage(response.getError());
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SongSelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SongSelectActivity.java
index a11fafc01..5d79ddf82 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SongSelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SongSelectActivity.java
@@ -1,11 +1,14 @@
 package org.telegram.ui;
 
+import android.content.Context;
+import android.os.Handler;
+import android.os.Message;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.Button;
-import android.widget.EditText;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
 import android.widget.ListView;
 import android.widget.TextView;
 
@@ -13,13 +16,19 @@
 import com.spotify.sdk.android.playback.Config;
 import com.spotify.sdk.android.playback.Player;
 
-import org.telegram.android.LocaleController;
 import org.telegram.R;
+import org.telegram.android.LocaleController;
 import org.telegram.android.SpotifyHelper;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Components.LoaderImageView;
+import org.telegram.ui.Listeners.SpotifySearchTextListener;
+
+import java.util.List;
+
+import kaaes.spotify.webapi.android.models.ArtistSimple;
+import kaaes.spotify.webapi.android.models.Track;
 
 public class SongSelectActivity extends BaseFragment {
 
@@ -31,7 +40,15 @@
     private SongSelectActivityDelegate delegate;
     private TextView emptyView;
     private ListView listView;
-    private Button playButton;
+    private SpotifyListAdapter adapter;
+    private List searchResult;
+
+    public final Handler handler = new Handler() {
+        public void handleMessage(Message msg) {
+            List result = (List) msg.obj;
+            adapter.addAll(result);
+        }
+    };
 
     public void setDelegate(SongSelectActivityDelegate delegate) {
         this.delegate = delegate;
@@ -39,7 +56,6 @@ public void setDelegate(SongSelectActivityDelegate delegate) {
 
     @Override
     public View createView(LayoutInflater inflater, ViewGroup container) {
-
         if (fragmentView == null) {
             actionBar.setBackButtonImage(R.drawable.ic_ab_back);
             actionBar.setAllowOverlayTitle(true);
@@ -56,23 +72,7 @@ public void onItemClick(int id) {
             });
 
             ActionBarMenu menu = actionBar.createMenu();
-            menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
-                @Override
-                public void onSearchExpand() {
-
-                }
-
-                @Override
-                public void onSearchCollapse() {
-
-                }
-
-                @Override
-                public void onTextChanged(EditText editText) {
-
-                }
-            });
-
+            menu.addItem(0, R.drawable.ic_ab_search).setIsSearchField(true).setActionBarMenuItemSearchListener(new SpotifySearchTextListener(this));
             fragmentView = inflater.inflate(R.layout.song_select_layout, container, false);
             emptyView = (TextView)fragmentView.findViewById(R.id.searchEmptyView);
             emptyView.setOnTouchListener(new View.OnTouchListener() {
@@ -81,20 +81,23 @@ public boolean onTouch(View v, MotionEvent event) {
                     return true;
                 }
             });
+
             listView = (ListView)fragmentView.findViewById(R.id.listView);
             listView.setEmptyView(emptyView);
-
-            playButton = (Button) fragmentView.findViewById(R.id.play_button);
-            playButton.setOnClickListener(new View.OnClickListener() {
+            listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                 @Override
-                public void onClick(View v) {
+                public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                     play();
                 }
             });
 
+            adapter = new SpotifyListAdapter(getParentActivity());
+            listView.setAdapter(adapter);
+
 
         } else {
             ViewGroup parent = (ViewGroup)fragmentView.getParent();
+
             if (parent != null) {
                 parent.removeView(fragmentView);
             }
@@ -125,5 +128,44 @@ public void onError(Throwable throwable) { }
         }
     }
 
+    public List getSearchResult() { return searchResult; }
+
+    public void setSearchResult(List searchResult) {
+        this.searchResult = searchResult;
+    }
+}
+
+class SpotifyListAdapter extends ArrayAdapter<Track> {
+
+    public SpotifyListAdapter(Context context) {
+        super(context, R.layout.song_list_row);
+    }
 
+    @Override
+    public View getView(int position, View convertView, ViewGroup parent) {
+        LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+        View rowView = inflater.inflate(R.layout.song_list_row, parent, false);
+        TextView firstLineTextView = (TextView) rowView.findViewById(R.id.firstLine);
+        TextView secondLineTextView = (TextView) rowView.findViewById(R.id.secondLine);
+        LoaderImageView imageView = (LoaderImageView) rowView.findViewById(R.id.icon);
+        Track t = this.getItem(position);
+        imageView.setImageDrawable(t.album.images.get(0).url);
+        firstLineTextView.setText(t.name);
+        StringBuilder artists = new StringBuilder();
+
+        for (int i = 0; i < t.artists.size(); i++) {
+            ArtistSimple a = t.artists.get(i);
+            artists.append(a.name) ;
+
+            if (i == t.artists.size()-2) {
+                artists.append(" and ");
+            } else if (i != t.artists.size()-1) {
+                artists.append(", ");
+            }
+        }
+
+        secondLineTextView.setText(artists);
+
+        return rowView;
+    }
 }
diff --git a/TMessagesProj/src/main/res/layout/song_list_row.xml b/TMessagesProj/src/main/res/layout/song_list_row.xml
new file mode 100644
index 000000000..1caa51048
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/song_list_row.xml
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="?android:attr/listPreferredItemHeight"
+    android:padding="6dip" >
+
+    <org.telegram.ui.Components.LoaderImageView
+        android:id="@+id/icon"
+        android:layout_width="wrap_content"
+        android:layout_height="fill_parent"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentTop="true"
+        android:layout_marginRight="6dip"/>
+
+    <TextView
+        android:id="@+id/secondLine"
+        android:layout_width="fill_parent"
+        android:layout_height="26dip"
+        android:layout_alignParentBottom="true"
+        android:layout_alignParentRight="true"
+        android:layout_toRightOf="@id/icon"
+        android:ellipsize="marquee"
+        android:singleLine="true"
+        android:textSize="12sp" />
+
+    <TextView
+        android:id="@+id/firstLine"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:layout_above="@id/secondLine"
+        android:layout_alignParentRight="true"
+        android:layout_alignParentTop="true"
+        android:layout_alignWithParentIfMissing="true"
+        android:layout_toRightOf="@id/icon"
+        android:gravity="center_vertical"
+        android:textSize="16sp" />
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/layout/song_select_layout.xml b/TMessagesProj/src/main/res/layout/song_select_layout.xml
index 1ec55b49c..9576e5914 100644
--- a/TMessagesProj/src/main/res/layout/song_select_layout.xml
+++ b/TMessagesProj/src/main/res/layout/song_select_layout.xml
@@ -24,11 +24,4 @@
         android:visibility="gone"
         android:layout_gravity="top"/>
 
-    <Button
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:id="@+id/play_button"
-        android:text="Play"/>
-
-
 </FrameLayout>
