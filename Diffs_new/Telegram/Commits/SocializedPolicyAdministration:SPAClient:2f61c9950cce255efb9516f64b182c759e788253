diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/SPAConfig.java b/TMessagesProj/src/main/java/org/telegram/messenger/SPAConfig.java
index ade699a07..742fcc820 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/SPAConfig.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/SPAConfig.java
@@ -12,5 +12,7 @@
     public static String sendSPARequest = "http://10.131.1.38:8000/getSPARequest/";
     public static String sendSPAResponse = "http://10.131.1.38:8000/getSPAResponse/";
     public static String resultMergeServer = "http://10.131.1.38/results/";
+    public static String sendSPAResult = "http://10.131.1.38:8000/getResultQuality";
+    public static String sendSPAAssessment = "http://10.131.1.38:8000/sendAssessment";
     public static String SPA_PREFERENCE = "spaconfig";
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/SPAKeyManagePollingService.java b/TMessagesProj/src/main/java/org/telegram/messenger/SPAKeyManagePollingService.java
index 458e37def..d7f37902e 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/SPAKeyManagePollingService.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/SPAKeyManagePollingService.java
@@ -110,6 +110,24 @@ public void onResponse(String response) {
                                             editor.putInt(settings[j] + "_result", value.divide(weight).intValue());
                                         }
                                     }
+                                    editor.commit();
+                                } else if (response.startsWith("result:")) {
+                                    CharSequence text = "Get an SPA result, please go to SPA setting to assess it";
+                                    int duration = Toast.LENGTH_SHORT;
+                                    Toast toast = Toast.makeText(context, text, duration);
+                                    toast.show();
+                                    SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
+                                    SharedPreferences.Editor editor = preferences.edit();
+                                    editor.putString("spa_result_assessment", response.substring(7));
+                                    editor.commit();
+                                } else if (response.startsWith("assess:")) {
+                                    String[] assessment = response.substring(7).split(",");
+                                    CharSequence text = assessment[0] + " friends think result is suitable.\n"
+                                            + assessment[1] + " friends think result is malicious.\n"
+                                            + assessment[2] + " friends have no iead.";
+                                    int duration = Toast.LENGTH_SHORT;
+                                    Toast toast = Toast.makeText(context, text, duration);
+                                    toast.show();
                                 } else {
                                     CharSequence text = "Get an SPA request, please go to SPA setting to response it";
                                     int duration = Toast.LENGTH_SHORT;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SPAFriendListActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SPAFriendListActivity.java
index f4fe5b6ca..ede3d09b7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SPAFriendListActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SPAFriendListActivity.java
@@ -51,6 +51,8 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.Set;
+import java.util.TreeSet;
 
 /**
  * Created by zqguo on 2015/10/28.
@@ -235,7 +237,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
 
     private boolean sendSPARequest(boolean containsLastSeen, boolean containsPasscodeLock,
                                    boolean containsAverage, final Context context) {
-        SharedPreferences preferences =
+        final SharedPreferences preferences =
                 ApplicationLoader. applicationContext.
                         getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
 
@@ -268,11 +270,20 @@ private boolean sendSPARequest(boolean containsLastSeen, boolean containsPasscod
         String opeK = preferences.getString("ope_key", "1");
         PaillierPublicKey pk = new PaillierPublicKey(new BigInteger(paillierN),
                 new BigInteger(paillierG));
+        StringBuffer users = new StringBuffer();
         for (int i = 0; i < respondentsSize; ++i) {
             String[] cu = usersPhoneAndWeight.get(i);
             respondentsId.add(cu[0]);
+            users.append(" " + cu[0]);
             respondentsWeight.add(cu[1]);
         }
+        if (users.length() > 0) {
+            users.deleteCharAt(0);
+        }
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.putString("spa_respondents", users.toString());
+        editor.commit();
+
         final JSONObject sendC = new JSONObject();
         try {
             sendC.put("settings", new JSONArray(settings));
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SPAResultActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SPAResultActivity.java
new file mode 100644
index 000000000..740f2dfd0
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SPAResultActivity.java
@@ -0,0 +1,274 @@
+package org.telegram.ui;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import android.widget.ListView;
+import android.widget.Toast;
+
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.R;
+import org.telegram.messenger.SPAConfig;
+import org.telegram.messenger.UserConfig;
+import org.telegram.messenger.volley.Request;
+import org.telegram.messenger.volley.RequestQueue;
+import org.telegram.messenger.volley.Response;
+import org.telegram.messenger.volley.VolleyError;
+import org.telegram.messenger.volley.toolbox.StringRequest;
+import org.telegram.messenger.volley.toolbox.Volley;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Cells.TextSettingsCell;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+
+/**
+ * Created by zqguo on 16-12-1.
+ */
+
+public class SPAResultActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+    private ListAdapter listAdapter;
+    int listSize = 0;
+    ArrayList<String> settings = new ArrayList<>(4);
+    ArrayList<String> settingsNames = new ArrayList<>(4);
+    String settingsString = "setttings:";
+    String users;
+    final String[] LAST_SEEN_SETTING = {"Everybody", "My Contacts", "Nobody"};
+    final String[] PASSCODE_LOCK_SETTING = {"on", "off"};
+    int averagePolicy = 0;
+    int maxMinPolicy = 0;
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
+        if (preferences.contains("last_seen_setting_result")) {
+            int index = preferences.getInt("last_seen_setting_result", 0);
+            String setting = LAST_SEEN_SETTING[index];
+            settings.add(setting);
+            settingsNames.add("Last Seen");
+            settingsString += "last_seen" + " " + index;
+            listSize += 1;
+        }
+        if (preferences.contains("passcode_lock_setting_result")) {
+            int index = preferences.getInt("passcode_lock_setting_result", 0);
+            String setting = PASSCODE_LOCK_SETTING[index];
+            settings.add(setting);
+            settingsNames.add("Passcode Lock");
+            settingsString += "passcode_lock" + " " + index;
+            listSize += 1;
+        }
+        if (preferences.contains("average_result")) {
+            averagePolicy = preferences.getInt("average_result", 0);
+            settings.add("" + averagePolicy);
+            settingsNames.add("Average");
+            settingsString += "average" + " " + averagePolicy;
+            listSize += 1;
+        }
+        if (preferences.contains("maximum_minimum_policy_result")) {
+            maxMinPolicy = preferences.getInt("maximum_minimum_policy_result", 0);
+            settings.add("" + maxMinPolicy);
+            settingsNames.add("Maximum or Minimum");
+            settingsString += "max_min" + " " + maxMinPolicy;
+            listSize += 1;
+        }
+        users = preferences.getString("spa_respondents", "");
+
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.spaSettings);
+
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.spaSettings);
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+
+        if (id == NotificationCenter.spaSettings) {
+            if (listAdapter != null) {
+                listAdapter.notifyDataSetChanged();
+            }
+        }
+    }
+
+    @Override
+    public View createView(final Context context) {
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setAllowOverlayTitle(true);
+        actionBar.setTitle(LocaleController.getString("ReceivedSPARequest", R.string.SPAReceivedRequest));
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                }
+            }
+        });
+
+        listAdapter = new ListAdapter(context);
+
+        fragmentView = new FrameLayout(context);
+        FrameLayout frameLayout = (FrameLayout) fragmentView;
+        frameLayout.setBackgroundColor(0xfff0f0f0);
+
+        ListView listView = new ListView(context);
+        listView.setDivider(null);
+        listView.setDividerHeight(0);
+        listView.setVerticalScrollBarEnabled(false);
+        listView.setDrawSelectorOnTop(true);
+        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        listView.setAdapter(listAdapter);
+
+        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+                if (i < listSize) {
+                    Log.v("SPA", settingsNames.get(i) + ": " + settings.get(i));
+                } else {
+                    // response format: "ok: last_seen,1 passcode_lock,1"
+                    StringRequest stringRequest = new StringRequest(
+                            Request.Method.POST,
+                            SPAConfig.sendSPAResult,
+                            new Response.Listener<String>() {
+                                @Override
+                                public void onResponse(String response) {
+                                    if (response.startsWith("ok")) {
+                                        CharSequence text = "Success";
+                                        int duration = Toast.LENGTH_SHORT;
+                                        Toast toast = Toast.makeText(context, text, duration);
+                                        toast.show();
+                                    } else {
+                                        CharSequence text = "Invalid response";
+                                        int duration = Toast.LENGTH_SHORT;
+                                        Toast toast = Toast.makeText(context, text, duration);
+                                        toast.show();
+                                    }
+                                }
+                            },
+                            new Response.ErrorListener() {
+                                @Override
+                                public void onErrorResponse(VolleyError error) {
+                                    Log.v("SPA", "SPA friend list activity cannot connect keymanager!");
+                                }
+                            }) {
+                        protected Map<String, String> getParams() {
+                            Map<String, String> params = new HashMap<>();
+                            params.put("content", settingsString);
+                            params.put("ids", users);
+                            TLRPC.User user = UserConfig.getCurrentUser();
+                            String value;
+                            if (user != null && user.phone != null && user.phone.length() != 0) {
+                                value = user.phone;
+                            } else {
+                                value = LocaleController.getString("NumberUnknown", R.string.NumberUnknown);
+                            }
+                            params.put("requester", value);
+                            return params;
+                        }
+                    };
+                    RequestQueue queue = Volley.newRequestQueue(context);
+                    queue.add(stringRequest);
+                }
+            }
+        });
+
+        return fragmentView;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return i <= listSize;
+        }
+
+        @Override
+        public int getCount() {
+            return listSize;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            if (view == null) {
+                view = new TextSettingsCell(mContext);
+                view.setBackgroundColor(0xffffffff);
+            }
+            TextSettingsCell textCell = (TextSettingsCell) view;
+
+            if (i < listSize) {
+                textCell.setText(settingsNames.get(i) + ": " + settings.get(i), true);
+            } else {
+                textCell.setText("Send SPA Result", true);
+            }
+
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int position) {
+            return 0;
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 1;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SPAResultAssessActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SPAResultAssessActivity.java
new file mode 100644
index 000000000..5f2303c45
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SPAResultAssessActivity.java
@@ -0,0 +1,255 @@
+package org.telegram.ui;
+
+import android.app.Activity;
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.FrameLayout;
+import android.widget.ListView;
+import android.widget.Toast;
+
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.R;
+import org.telegram.messenger.SPAConfig;
+import org.telegram.messenger.volley.Request;
+import org.telegram.messenger.volley.RequestQueue;
+import org.telegram.messenger.volley.Response;
+import org.telegram.messenger.volley.VolleyError;
+import org.telegram.messenger.volley.toolbox.StringRequest;
+import org.telegram.messenger.volley.toolbox.Volley;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.Adapters.BaseFragmentAdapter;
+import org.telegram.ui.Cells.TextSettingsCell;
+import org.telegram.ui.Components.LayoutHelper;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Created by zqguo on 16-12-4.
+ */
+
+public class SPAResultAssessActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+
+    private ListAdapter listAdapter;
+    int listSize = 0;
+    String results;
+    int assessment = 3;
+    boolean clicked = false;
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
+
+        results = preferences.getString("spa_result_assessment", "");
+        listSize = 2;
+
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.spaSettings);
+
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.spaSettings);
+    }
+
+    @Override
+    public void didReceivedNotification(int id, Object... args) {
+
+        if (id == NotificationCenter.spaSettings) {
+            if (listAdapter != null) {
+                listAdapter.notifyDataSetChanged();
+            }
+        }
+    }
+
+    @Override
+    public View createView(final Context context) {
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setAllowOverlayTitle(true);
+        actionBar.setTitle(LocaleController.getString("ReceivedSPARequest", R.string.SPAReceivedRequest));
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                }
+            }
+        });
+
+        listAdapter = new ListAdapter(context);
+
+        fragmentView = new FrameLayout(context);
+        FrameLayout frameLayout = (FrameLayout) fragmentView;
+        frameLayout.setBackgroundColor(0xfff0f0f0);
+
+        ListView listView = new ListView(context);
+        listView.setDivider(null);
+        listView.setDividerHeight(0);
+        listView.setVerticalScrollBarEnabled(false);
+        listView.setDrawSelectorOnTop(true);
+        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        listView.setAdapter(listAdapter);
+
+        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override
+            public void onItemClick(AdapterView<?> adapterView, View view, final int i, long l) {
+                if (i < 1) {
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                    CharSequence[] items = new CharSequence[]{"Suitable"
+                            , "Malicious"
+                            , "I don't know"};
+                    builder.setItems(items, new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialogInterface, int i) {
+                            assessment = i;
+                            clicked = true;
+                        }
+                    });
+                    showDialog(builder.create());
+                } else {
+                    if (clicked) {
+                        RequestQueue queue = Volley.newRequestQueue(context);
+                        StringRequest stringRequest = new StringRequest(
+                                Request.Method.POST,
+                                SPAConfig.sendSPAAssessment,
+                                new Response.Listener<String>() {
+                                    @Override
+                                    public void onResponse(String response) {
+                                        if (response.compareTo("ok") == 0) {
+                                            CharSequence text = "Send assessment successfully";
+                                            int duration = Toast.LENGTH_SHORT;
+                                            Toast toast = Toast.makeText(context, text, duration);
+                                            toast.show();
+                                        } else {
+                                            CharSequence text = "You have send request before";
+                                            int duration = Toast.LENGTH_SHORT;
+                                            Toast toast = Toast.makeText(context, text, duration);
+                                            toast.show();
+                                        }
+                                    }
+                                },
+                                new Response.ErrorListener() {
+                                    @Override
+                                    public void onErrorResponse(VolleyError error) {
+                                        CharSequence text = "Cannot connect server";
+                                        int duration = Toast.LENGTH_SHORT;
+                                        Toast toast = Toast.makeText(context, text, duration);
+                                        toast.show();
+                                        Log.v("SPA", "SPA result assess activity cannot connect server!");
+                                    }
+                                }) {
+                            protected Map<String, String> getParams() {
+                                Map<String, String> params = new HashMap<>();
+                                String requester = results.split(": ")[0];
+                                params.put("assess", "" + i);
+                                params.put("requester", requester);
+                                return params;
+                            }
+                        };
+                        queue.add(stringRequest);
+                    }
+                }
+            }
+        });
+
+        return fragmentView;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+    }
+
+    private class ListAdapter extends BaseFragmentAdapter {
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public boolean areAllItemsEnabled() {
+            return false;
+        }
+
+        @Override
+        public boolean isEnabled(int i) {
+            return i < listSize;
+        }
+
+        @Override
+        public int getCount() {
+            return listSize;
+        }
+
+        @Override
+        public Object getItem(int i) {
+            return null;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            return i;
+        }
+
+        @Override
+        public boolean hasStableIds() {
+            return false;
+        }
+
+        @Override
+        public View getView(int i, View view, ViewGroup viewGroup) {
+            int type = getItemViewType(i);
+            if (view == null) {
+                view = new TextSettingsCell(mContext);
+                view.setBackgroundColor(0xffffffff);
+            }
+            TextSettingsCell textCell = (TextSettingsCell) view;
+
+
+            if (type == 0) {
+                textCell.setText(results, true);
+            } else {
+                textCell.setText("Send Assessment", true);
+            }
+
+            return view;
+        }
+
+        @Override
+        public int getItemViewType(int position) {
+            if (position < 1) {
+                return 0;
+            } else {
+                return 1;
+            }
+        }
+
+        @Override
+        public int getViewTypeCount() {
+            return 2;
+        }
+
+        @Override
+        public boolean isEmpty() {
+            return false;
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SPASettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SPASettingsActivity.java
index ca3bc8912..965c688f1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SPASettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SPASettingsActivity.java
@@ -102,7 +102,8 @@ public View createView(Context context) {
                         @Override
                         public void onResponse(String response) {
                             SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
-                            if (response.charAt(0) != '0' && response.charAt(0) != '1') {
+                            char firstChar = response.charAt(0);
+                            if (firstChar < '0' || firstChar > '9') {
                                 Log.v("SPA", response);
                             } else {
                                 String keys[] = response.split(" ");
@@ -171,6 +172,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, final int i, long
                     presentFragment(new SPAReceivedSPARequest());
                 } else if (i == spaResultRow2) {
                     Log.v("SPA", "spa result");
+                    presentFragment(new SPAResultActivity());
                 } else if (i == spaCloseAverageComposite2) {
                     Log.v("SPA", "spa disable average policy");
                     SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(SPAConfig.SPA_PREFERENCE, Activity.MODE_PRIVATE);
@@ -253,22 +255,20 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                     view = new TextSettingsCell(mContext);
                     view.setBackgroundColor(0xffffffff);
                 }
-                TextSettingsCell textCell = (TextSettingsCell) view;
                 if (i == selectPrivacyItemsRow) {
-                    textCell.setText(LocaleController.getString("SPASelectItems", R.string.SPASelectItems), true);
+                    ((TextSettingsCell) view).setText(LocaleController.getString("SPASelectItems", R.string.SPASelectItems), true);
                 } else if (i == friendsListRow) {
-                    textCell.setText(LocaleController.getString("SPAFriendsList", R.string.SPAFriendsList), true);
+                    ((TextSettingsCell) view).setText(LocaleController.getString("SPAFriendsList", R.string.SPAFriendsList), true);
                 } else if (i == receivedSpaRequstRow) {
-                    textCell.setText(LocaleController.getString("SPAReceivedRequest", R.string.SPAReceivedRequest), true);
+                    ((TextSettingsCell) view).setText(LocaleController.getString("SPAReceivedRequest", R.string.SPAReceivedRequest), true);
                 } else if (i == spaResultRow2) {
-                    textCell.setText(LocaleController.getString("SPAResult", R.string.SPAResult), true);
+                    ((TextSettingsCell) view).setText(LocaleController.getString("SPAResult", R.string.SPAResult), true);
                 } else if (i == spaCloseAverageComposite2) {
                     view = new TextCheckCell(mContext);
                     view.setBackgroundColor(0xffffffff);
-                    TextCheckCell textCell2 = (TextCheckCell) view;
+                    TextCheckCell textCell = (TextCheckCell) view;
                     SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("spaconfig", Activity.MODE_PRIVATE);
-                    textCell2.setTextAndCheck("Disable Average Policy", preferences.getBoolean("disable_average_policy", false), false);
-                    return textCell2;
+                    textCell.setTextAndCheck("Disable Average Policy", preferences.getBoolean("disable_average_policy", false), false);
                 }
             } else if (type == 1) {
                 if (view == null) {
