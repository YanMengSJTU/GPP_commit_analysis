diff --git a/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java b/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
index 9c910bd27..d7884f75e 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
@@ -45,21 +45,12 @@
     private Account currentAccount;
     private boolean loadingContacts = false;
     private static final Object loadContactsSync = new Object();
-    private boolean ignoreChanges = false;
-    private boolean contactsSyncInProgress = false;
-    private final Object observerLock = new Object();
     public boolean contactsLoaded = false;
-    private boolean contactsBookLoaded = false;
-    private String lastContactsVersions = "";
     private ArrayList<Integer> delayedContactsUpdate = new ArrayList<>();
     private String inviteText;
     private boolean updatingInviteText = false;
     private HashMap<String, String> sectionsToReplace = new HashMap<>();
 
-    private int loadingDeleteInfo = 0;
-    private int deleteAccountTTL;
-    private int loadingLastSeenInfo = 0;
-    private ArrayList<TLRPC.PrivacyRule> privacyRules = null;
 
     public static class Contact {
         public int id;
@@ -151,14 +142,7 @@ public void cleanup() {
         contactsByPhone.clear();
 
         loadingContacts = false;
-        contactsSyncInProgress = false;
         contactsLoaded = false;
-        contactsBookLoaded = false;
-        lastContactsVersions = "";
-        loadingDeleteInfo = 0;
-        deleteAccountTTL = 0;
-        loadingLastSeenInfo = 0;
-        privacyRules = null;
     }
 
     public void checkInviteText() {
diff --git a/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java b/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
index 66b3d5a05..0b694209b 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
@@ -66,7 +66,6 @@
     private DispatchQueue cacheThumbOutQueue = new DispatchQueue("cacheThumbOutQueue");
     private DispatchQueue imageLoadQueue = new DispatchQueue("imageLoadQueue");
     private ConcurrentHashMap<String, Float> fileProgresses = new ConcurrentHashMap<>();
-    private HashMap<String, ThumbGenerateTask> thumbGenerateTasks = new HashMap<>();
     private static byte[] bytes;
     private static byte[] bytesThumb;
     private static byte[] header = new byte[12];
@@ -393,115 +392,6 @@ public void run() {
         }
     }
 
-    private class ThumbGenerateTask implements Runnable {
-
-        private File originalPath;
-        private int mediaType;
-        private TLRPC.FileLocation thumbLocation;
-        private String filter;
-
-        public ThumbGenerateTask(int type, File path, TLRPC.FileLocation location, String f) {
-            mediaType = type;
-            originalPath = path;
-            thumbLocation = location;
-            filter = f;
-        }
-
-        private void removeTask() {
-            if (thumbLocation == null) {
-                return;
-            }
-            final String name = FileLoader.getAttachFileName(thumbLocation);
-            imageLoadQueue.postRunnable(new Runnable() {
-                @Override
-                public void run() {
-                    thumbGenerateTasks.remove(name);
-                }
-            });
-        }
-
-        @Override
-        public void run() {
-            try {
-                if (thumbLocation == null) {
-                    removeTask();
-                    return;
-                }
-                final String key = thumbLocation.volume_id + "_" + thumbLocation.local_id;
-                File thumbFile = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), "q_" + key + ".jpg");
-                if (thumbFile.exists() || !originalPath.exists()) {
-                    removeTask();
-                    return;
-                }
-                int size = Math.min(180, Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) / 4);
-                Bitmap originalBitmap = null;
-                if (mediaType == FileLoader.MEDIA_DIR_IMAGE) {
-                    originalBitmap = ImageLoader.loadBitmap(originalPath.toString(), null, size, size, false);
-                } else if (mediaType == FileLoader.MEDIA_DIR_VIDEO) {
-                    originalBitmap = ThumbnailUtils.createVideoThumbnail(originalPath.toString(), MediaStore.Video.Thumbnails.MINI_KIND);
-                } else if (mediaType == FileLoader.MEDIA_DIR_DOCUMENT) {
-                    String path = originalPath.toString().toLowerCase();
-                    if (!path.endsWith(".jpg") && !path.endsWith(".jpeg") && !path.endsWith(".png") && !path.endsWith(".gif")) {
-                        removeTask();
-                        return;
-                    }
-                    originalBitmap = ImageLoader.loadBitmap(path, null, size, size, false);
-                }
-                if (originalBitmap == null) {
-                    removeTask();
-                    return;
-                }
-
-                int w = originalBitmap.getWidth();
-                int h = originalBitmap.getHeight();
-                if (w == 0 || h == 0) {
-                    removeTask();
-                    return;
-                }
-                float scaleFactor = Math.min((float) w / size, (float) h / size);
-                Bitmap scaledBitmap = Bitmap.createScaledBitmap(originalBitmap, (int) (w / scaleFactor), (int) (h / scaleFactor), true);
-                if (scaledBitmap != originalBitmap) {
-                    originalBitmap.recycle();
-                }
-                originalBitmap = scaledBitmap;
-                FileOutputStream stream = new FileOutputStream(thumbFile);
-                originalBitmap.compress(Bitmap.CompressFormat.JPEG, 60, stream);
-                try {
-                    stream.close();
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                }
-                final BitmapDrawable bitmapDrawable = new BitmapDrawable(originalBitmap);
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        removeTask();
-
-                        String kf = key;
-                        if (filter != null) {
-                            kf += "@" + filter;
-                        }
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.messageThumbGenerated, bitmapDrawable, kf);
-                        /*BitmapDrawable old = memCache.get(kf);
-                        if (old != null) {
-                            Bitmap image = old.getBitmap();
-                            if (runtimeHack != null) {
-                                runtimeHack.trackAlloc(image.getRowBytes() * image.getHeight());
-                            }
-                            if (!image.isRecycled()) {
-                                image.recycle();
-                            }
-                        }*/
-                        memCache.put(kf, bitmapDrawable);
-                    }
-                });
-            } catch (Throwable e) {
-                FileLog.e("tmessages", e);
-                removeTask();
-            }
-        }
-    }
-
     private class CacheOutTask implements Runnable {
         private Thread runningThread;
         private final Object sync = new Object();
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
index 9042c5b5e..8197d1be7 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
@@ -40,8 +40,7 @@
 public class ApplicationLoader extends Application {
 
     private static Drawable cachedWallpaper;
-    private static int selectedColor;
-    private static boolean isCustomTheme;
+
     private static final Object sync = new Object();
 
     public static volatile Context applicationContext;
@@ -51,18 +50,6 @@
     public static volatile boolean isScreenOn = false;
     public static volatile boolean mainInterfacePaused = true;
 
-    public static boolean isCustomTheme() {
-        return isCustomTheme;
-    }
-
-    public static int getSelectedColor() {
-        return selectedColor;
-    }
-
-    public static void reloadWallpaper() {
-        cachedWallpaper = null;
-        loadWallpaper();
-    }
 
     public static void loadWallpaper() {
         if (cachedWallpaper != null) {
@@ -79,19 +66,7 @@ public void run() {
                         selectedColor = preferences.getInt("selectedColor", 0);
                         int cacheColorHint = 0;
                         if (selectedColor == 0) {
-                            if (selectedBackground == 1000001) {
-                                cachedWallpaper = applicationContext.getResources().getDrawable(R.drawable.background_hd);
-                                isCustomTheme = false;
-                            } else {
-                                File toFile = new File(ApplicationLoader.applicationContext.getFilesDir(), "wallpaper.jpg");
-                                if (toFile.exists()) {
-                                    cachedWallpaper = Drawable.createFromPath(toFile.getAbsolutePath());
-                                    isCustomTheme = true;
-                                } else {
-                                    cachedWallpaper = applicationContext.getResources().getDrawable(R.drawable.background_hd);
-                                    isCustomTheme = false;
-                                }
-                            }
+                            cachedWallpaper = applicationContext.getResources().getDrawable(R.drawable.background_hd);
                         }
                     } catch (Throwable throwable) {
                         //ignore
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerProfileCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerProfileCell.java
index 1c48e82fb..682a868ae 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerProfileCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerProfileCell.java
@@ -96,31 +96,9 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
 
     @Override
     protected void onDraw(Canvas canvas) {
-        Drawable backgroundDrawable = ApplicationLoader.getCachedWallpaper();
-        if (ApplicationLoader.isCustomTheme() && backgroundDrawable != null) {
-            phoneTextView.setTextColor(0xffffffff);
-            shadowView.setVisibility(VISIBLE);
-            if (backgroundDrawable instanceof ColorDrawable) {
-                backgroundDrawable.setBounds(0, 0, getMeasuredWidth(), getMeasuredHeight());
-                backgroundDrawable.draw(canvas);
-            } else if (backgroundDrawable instanceof BitmapDrawable) {
-                Bitmap bitmap = ((BitmapDrawable) backgroundDrawable).getBitmap();
-                float scaleX = (float) getMeasuredWidth() / (float) bitmap.getWidth();
-                float scaleY = (float) getMeasuredHeight() / (float) bitmap.getHeight();
-                float scale = scaleX < scaleY ? scaleY : scaleX;
-                int width = (int) (getMeasuredWidth() / scale);
-                int height = (int) (getMeasuredHeight() / scale);
-                int x = (bitmap.getWidth() - width) / 2;
-                int y = (bitmap.getHeight() - height) / 2;
-                srcRect.set(x, y, x + width, y + height);
-                destRect.set(0, 0, getMeasuredWidth(), getMeasuredHeight());
-                canvas.drawBitmap(bitmap, srcRect, destRect, paint);
-            }
-        } else {
-            shadowView.setVisibility(INVISIBLE);
-            phoneTextView.setTextColor(0xffc2e5ff);
-            super.onDraw(canvas);
-        }
+        shadowView.setVisibility(INVISIBLE);
+        phoneTextView.setTextColor(0xffc2e5ff);
+        super.onDraw(canvas);
     }
 
     public void setUser(User user) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index cd7311492..a0f25e244 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -35,7 +35,6 @@
 import android.view.VelocityTracker;
 import android.view.View;
 import android.view.ViewGroup;
-import android.view.ViewTreeObserver;
 import android.view.WindowManager;
 import android.view.animation.DecelerateInterpolator;
 import android.widget.FrameLayout;
@@ -49,7 +48,6 @@
 import org.telegram.android.AnimationCompat.AnimatorSetProxy;
 import org.telegram.android.AnimationCompat.ObjectAnimatorProxy;
 import org.telegram.android.AnimationCompat.ViewProxy;
-import org.telegram.android.ContactsController;
 import org.telegram.android.ImageLoader;
 import org.telegram.android.ImageReceiver;
 import org.telegram.android.LocaleController;
@@ -66,7 +64,6 @@
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
-import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.CheckBox;
 import org.telegram.ui.Components.ClippingImageView;
 import org.telegram.ui.Components.LayoutHelper;
@@ -136,9 +133,6 @@
 
     private float animationValues[][] = new float[2][8];
 
-    private AnimatorSetProxy mentionListAnimation;
-    private boolean allowMentions;
-
     private int animationInProgress = 0;
     private long transitionAnimationStartTime = 0;
     private Runnable animationEndRunnable = null;
@@ -160,11 +154,7 @@
     private Bitmap currentThumb = null;
 
     private int totalImagesCount;
-    private boolean isFirstLoading;
     private boolean needSearchImageInArr;
-    private boolean loadingMoreImages;
-    private boolean cacheEndReached;
-    private boolean opennedFromMedia;
 
     private boolean draggingDown = false;
     private float dragY;
@@ -207,7 +197,6 @@
 
     private ArrayList<Integer> imagesArrLocationsSizes = new ArrayList<>();
     private ArrayList<Object> imagesArrLocals = new ArrayList<>();
-    private TLRPC.FileLocation currentUserAvatarLocation = null;
 
     private final static int gallery_menu_save = 1;
     private final static int gallery_menu_showall = 2;
@@ -972,12 +961,12 @@ public void onTextChanged(CharSequence text, boolean bigChange) {
             @Override
             public void onWindowSizeChanged(int size) {
 //                int height = AndroidUtilities.dp(36 * Math.min(3, mentionsAdapter.getCount()) + (mentionsAdapter.getCount() > 3 ? 18 : 0));
-                int height = AndroidUtilities.dp(36 * Math.min(3, 0) + (0 > 3 ? 18 : 0));
-                if (size - AndroidUtilities.getCurrentActionBarHeight() * 2 < height) {
-                    allowMentions = false;
-                } else {
-                    allowMentions = true;
-                }
+//                int height = AndroidUtilities.dp(36 * Math.min(3, 0) + (0 > 3 ? 18 : 0));
+//                if (size - AndroidUtilities.getCurrentActionBarHeight() * 2 < height) {
+//                    allowMentions = false;
+//                } else {
+//                    allowMentions = true;
+//                }
             }
         });
         containerView.addView(captionEditText, LayoutHelper.createRelative(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, 0, 0, 0, -400, RelativeLayout.ALIGN_PARENT_BOTTOM));
@@ -1563,11 +1552,7 @@ private void onPhotoShowNew(final Post post, final PlaceProviderObject object) {
         currentFileNames[2] = null;
         totalImagesCount = 0;
         currentEditMode = 0;
-        isFirstLoading = true;
         needSearchImageInArr = false;
-        loadingMoreImages = false;
-        cacheEndReached = false;
-        opennedFromMedia = false;
         needCaptionLayout = false;
         canShowBottom = true;
         //TODO-aragats new
@@ -1575,7 +1560,6 @@ private void onPhotoShowNew(final Post post, final PlaceProviderObject object) {
         //
         imagesArrLocationsSizes.clear();
         imagesArrLocals.clear();
-        currentUserAvatarLocation = null;
         containerView.setPadding(0, 0, 0, 0);
         currentThumb = object != null ? object.thumb : null;
         menuItem.setVisibility(View.VISIBLE);
@@ -1639,11 +1623,7 @@ private void onPhotoShow(final ArrayList<Object> photos, int index, final PlaceP
         currentFileNames[2] = null;
         totalImagesCount = 0;
         currentEditMode = 0;
-        isFirstLoading = true;
         needSearchImageInArr = false;
-        loadingMoreImages = false;
-        cacheEndReached = false;
-        opennedFromMedia = false;
         needCaptionLayout = false;
         canShowBottom = true;
         //TODO-aragats new
@@ -1651,7 +1631,6 @@ private void onPhotoShow(final ArrayList<Object> photos, int index, final PlaceP
         //
         imagesArrLocationsSizes.clear();
         imagesArrLocals.clear();
-        currentUserAvatarLocation = null;
         containerView.setPadding(0, 0, 0, 0);
         currentThumb = object != null ? object.thumb : null;
         menuItem.setVisibility(View.VISIBLE);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
index c62227ff9..c5aa1a35f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
@@ -564,7 +564,8 @@ public boolean onTouch(View v, MotionEvent event) {
         emptyView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
         emptyView.setGravity(Gravity.CENTER);
         emptyView.setTextColor(0xffffffff);
-        emptyView.setBackgroundResource(ApplicationLoader.isCustomTheme() ? R.drawable.system_black : R.drawable.system_blue);
+//        emptyView.setBackgroundResource(ApplicationLoader.isCustomTheme() ? R.drawable.system_black : R.drawable.system_blue);
+        emptyView.setBackgroundResource(R.drawable.system_blue);
         emptyView.setPadding(AndroidUtilities.dp(7), AndroidUtilities.dp(1), AndroidUtilities.dp(7), AndroidUtilities.dp(1));
         emptyView.setOnClickListener(new View.OnClickListener() {
             @Override
@@ -647,7 +648,8 @@ public boolean onInterceptTouchEvent(MotionEvent event) {
         contentView.addView(progressView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT, 0, 0, 0, 48));
 
         View view = new View(context);
-        view.setBackgroundResource(ApplicationLoader.isCustomTheme() ? R.drawable.system_loader2 : R.drawable.system_loader1);
+//        view.setBackgroundResource(ApplicationLoader.isCustomTheme() ? R.drawable.system_loader2 : R.drawable.system_loader1);
+        view.setBackgroundResource(R.drawable.system_loader1);
         progressView.addView(view, LayoutHelper.createFrame(36, 36, Gravity.CENTER));
 
         ProgressBar progressBar = new ProgressBar(context);
@@ -1459,7 +1461,8 @@ public long getItemId(int i) {
             } else if (viewType == 5) {
                 LayoutInflater li = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                 view = li.inflate(R.layout.chat_loading_layout, parent, false);
-                view.findViewById(R.id.progressLayout).setBackgroundResource(ApplicationLoader.isCustomTheme() ? R.drawable.system_loader2 : R.drawable.system_loader1);
+//                view.findViewById(R.id.progressLayout).setBackgroundResource(ApplicationLoader.isCustomTheme() ? R.drawable.system_loader2 : R.drawable.system_loader1);
+                view.findViewById(R.id.progressLayout).setBackgroundResource(R.drawable.system_loader1);
             } else if (viewType == 6) {
                 LayoutInflater li = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                 view = li.inflate(R.layout.chat_unread_layout, parent, false);
