diff --git a/.travis.yml b/.travis.yml
index 3e880d382..c48c313ae 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -19,12 +19,13 @@ before_install:
 script: 
     - ./gradlew assembleAfatDebug
     - .travis/check.sh
+    - mv ${TRAVIS_BUILD_DIR}/TMessagesProj/build/outputs/apk/afat/debug/TMessagesProj-afat-debug.apk ${TRAVIS_BUILD_DIR}/ForkClient.apk
 
 deploy:
   provider: releases
   api_key: $GITHUB_TOKEN
-  file: ${TRAVIS_BUILD_DIR}/TMessagesProj/build/outputs/apk/afat/debug/TMessagesProj-afat-debug.apk
+  file: ${TRAVIS_BUILD_DIR}/ForkClient.apk
   skip_cleanup: true
   draft: true
   on:
-    all_branches: true
\ No newline at end of file
+    all_branches: true
diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 0ac26f886..fa40ae770 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -252,7 +252,7 @@ android {
         }
     }
 
-    defaultConfig.versionCode = 16843
+    defaultConfig.versionCode = 16848
 
     applicationVariants.all { variant ->
         variant.outputs.all { output ->
@@ -286,7 +286,7 @@ android {
     defaultConfig {
         minSdkVersion 16
         targetSdkVersion 28
-        versionName "5.10.0.1"
+        versionName "5.10.0.2"
 
         //obtain your own keys at https://core.telegram.org/api/obtaining_api_id
         buildConfigField 'int', 'APP_ID', System.getenv("APP_ID")
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
index 6861a8302..3247f9e97 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/BuildVars.java
@@ -18,8 +18,8 @@
     public static boolean LOGS_ENABLED = false;
     public static boolean USE_CLOUD_STRINGS = true;
     public static boolean CHECK_UPDATES = false;
-    public static int BUILD_VERSION = 16843;
-    public static String BUILD_VERSION_STRING = "5.10.0.1";
+    public static int BUILD_VERSION = 16848;
+    public static String BUILD_VERSION_STRING = "5.10.0.2";
     public static String PLAYSTORE_APP_URL = "";
     public static String SMS_HASH = ""; //https://developers.google.com/identity/sms-retriever/overview
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/SharedConfig.java b/TMessagesProj/src/main/java/org/telegram/messenger/SharedConfig.java
index 48afddb69..a156c74d0 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/SharedConfig.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/SharedConfig.java
@@ -631,14 +631,6 @@ public static void toggleHasSticker() {
         editor.commit();
     }
 
-    public static void toggleHasSticker() {
-        hasSticker = !hasSticker;
-        SharedPreferences preferences = MessagesController.getGlobalMainSettings();
-        SharedPreferences.Editor editor = preferences.edit();
-        editor.putBoolean("photoHasSticker", hasSticker);
-        editor.commit();
-    }
-
     public static void loadProxyList() {
         if (proxyListLoaded) {
             return;
@@ -795,4 +787,19 @@ public static int getDevicePerfomanceClass() {
 
         return devicePerformanceClass;
     }
+
+    public static boolean hideSensitiveData() {
+        if (isUserOwner()) {
+            return true;
+        }
+        return MessagesController.getGlobalMainSettings().getBoolean("hideSensitiveData", false);
+    }
+
+    public static boolean isUserOwner() {
+        return org.telegram.messenger.UserConfig.getInstance(
+                org.telegram.messenger.UserConfig.selectedAccount).clientUserId == 
+                    org.telegram.messenger.BuildVars.USER_ID_OWNER;
+    }
+
+
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java
index 853c48edd..286a6edbf 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ActionBar/ActionBar.java
@@ -33,6 +33,7 @@
 import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
+import org.telegram.messenger.SharedConfig;
 import org.telegram.ui.Components.FireworksEffect;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.SnowflakesEffect;
@@ -858,7 +859,8 @@ public void setTitleOverlayText(String title, int titleId, Runnable action) {
             return;
         }
         CharSequence textToSet = title != null ? LocaleController.getString(title, titleId) : lastTitle;
-        if (titleId == org.telegram.messenger.R.string.ConnectingToProxy) {
+        if (titleId == org.telegram.messenger.R.string.ConnectingToProxy
+            && (SharedConfig.hideSensitiveData())) {
             textToSet = "...";
         }
         if (textToSet != null && titleTextView == null) {
@@ -969,4 +971,4 @@ public static int getCurrentActionBarHeight() {
     public boolean hasOverlappingRendering() {
         return false;
     }
-}
\ No newline at end of file
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerProfileCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerProfileCell.java
index 5f30738be..7388c0101 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerProfileCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerProfileCell.java
@@ -30,6 +30,7 @@
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.ImageLocation;
 import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.SharedConfig;
 import org.telegram.messenger.UserObject;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
@@ -60,16 +61,26 @@
     public DrawerProfileCell(Context context) {
         super(context);
 
+        if (!SharedConfig.hideSensitiveData()) {
+            avatarSize = 64;
+            heightOfcell = 148;
+        }
+
         shadowView = new ImageView(context);
         shadowView.setVisibility(INVISIBLE);
         shadowView.setScaleType(ImageView.ScaleType.FIT_XY);
         shadowView.setImageResource(R.drawable.bottom_shadow);
         addView(shadowView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 70, Gravity.LEFT | Gravity.BOTTOM));
 
+
+
         avatarImageView = new BackupImageView(context);
         avatarImageView.getImageReceiver().setRoundRadius(AndroidUtilities.dp(32));
-        addView(avatarImageView, LayoutHelper.createFrame(avatarSize, avatarSize, Gravity.LEFT | Gravity.BOTTOM, heightOfcell - avatarSize - 2, 0, 0, (heightOfcell - avatarSize) / 2));
-
+        if (!SharedConfig.hideSensitiveData()) {
+            addView(avatarImageView, LayoutHelper.createFrame(64, 64, Gravity.LEFT | Gravity.BOTTOM, 16, 0, 0, 67));
+        } else {
+            addView(avatarImageView, LayoutHelper.createFrame(avatarSize, avatarSize, Gravity.LEFT | Gravity.BOTTOM, heightOfcell - avatarSize - 2, 0, 0, (heightOfcell - avatarSize) / 2));
+        }
         nameTextView = new TextView(context);
         nameTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
         nameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
@@ -78,7 +89,6 @@ public DrawerProfileCell(Context context) {
         nameTextView.setSingleLine(true);
         nameTextView.setGravity(Gravity.LEFT);
         nameTextView.setEllipsize(TextUtils.TruncateAt.END);
-        // addView(nameTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.BOTTOM, 16, 0, 76, 28));
 
         phoneTextView = new TextView(context);
         phoneTextView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13);
@@ -86,7 +96,11 @@ public DrawerProfileCell(Context context) {
         phoneTextView.setMaxLines(1);
         phoneTextView.setSingleLine(true);
         phoneTextView.setGravity(Gravity.LEFT);
-        // addView(phoneTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.BOTTOM, 16, 0, 76, 9));
+
+        if (!SharedConfig.hideSensitiveData()) {
+            addView(nameTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.BOTTOM, 16, 0, 76, 28));
+            addView(phoneTextView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.BOTTOM, 16, 0, 76, 9));
+        }
 
         arrowView = new ImageView(context);
         arrowView.setScaleType(ImageView.ScaleType.CENTER);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerUserCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerUserCell.java
index bb7f6ee64..7fba588d4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerUserCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DrawerUserCell.java
@@ -21,6 +21,7 @@
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.ImageLocation;
 import org.telegram.messenger.NotificationsController;
+import org.telegram.messenger.SharedConfig;
 import org.telegram.messenger.UserConfig;
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.Theme;
@@ -88,7 +89,11 @@ public void setAccount(int account) {
             return;
         }
         avatarDrawable.setInfo(user);
-        textView.setText("...");
+        if (SharedConfig.hideSensitiveData()) {
+            textView.setText("...");
+        } else {
+            textView.setText(ContactsController.formatName(user.first_name, user.last_name));
+        }
         imageView.getImageReceiver().setCurrentAccount(account);
         imageView.setImage(ImageLocation.getForUser(user, false), "50_50", avatarDrawable, user);
         checkBox.setVisibility(account == UserConfig.selectedAccount ? VISIBLE : INVISIBLE);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 570c6b5bd..0ad57bc15 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -401,7 +401,9 @@
     private long dialog_id;
     private int lastLoadIndex;
     private boolean isBroadcast;
-    private SparseArray<MessageObject>[] selectedMessagesIds = new SparseArray[]{new SparseArray<>(), new SparseArray<>()};
+    private SparseArrayWithTouch<MessageObject>[] selectedMessagesIds = new SparseArrayWithTouch[]{
+        new SparseArrayWithTouch<MessageObject>(),
+        new SparseArrayWithTouch<MessageObject>()};
     private SparseArray<MessageObject>[] selectedMessagesCanCopyIds = new SparseArray[]{new SparseArray<>(), new SparseArray<>()};
     private SparseArray<MessageObject>[] selectedMessagesCanStarIds = new SparseArray[]{new SparseArray<>(), new SparseArray<>()};
     private boolean hasUnfavedSelected;
@@ -487,6 +489,16 @@
     private AnimatorSet scrimAnimatorSet;
     private ActionBarPopupWindow scrimPopupWindow;
 
+    public class SparseArrayWithTouch<E> extends SparseArray<E> {
+        public ArrayList<Integer> withTouch = new ArrayList<>();
+
+        @Override
+        public void clear() {
+            withTouch.clear();
+            super.clear();
+        }
+    }
+
     private class UnreadCounterTextView extends TextView {
 
         private int currentCounter;
@@ -670,6 +682,7 @@ public void sendButtonPressed(int index, VideoEditedInfo videoEditedInfo) {
     private final static int copy = 10;
     private final static int forward = 11;
     private final static int forward_anonym = 111;
+    private final static int select_between = 112;
     private final static int delete = 12;
     private final static int chat_enc_timer = 13;
     private final static int chat_menu_attach = 14;
@@ -1200,6 +1213,25 @@ public void onItemClick(final int id) {
                         return;
                     }
                     createDeleteMessagesAlert(null, null);
+                } else if (id == select_between) {
+                    // For selecting messages between the first and the last.
+                    ArrayList<Integer> ids = new ArrayList<>();
+                    for (int a = 1; a >= 0; a--) {
+                        for (int b = 0; b < selectedMessagesIds[a].size(); b++) {
+                            ids.add(selectedMessagesIds[a].keyAt(b));
+                        }
+                    }
+                    Collections.sort(ids);
+                    Integer begin = ids.get(0);
+                    Integer end = ids.get(ids.size() - 1);
+                    for (int i = 0; i < messages.size(); i++) {
+                        Integer msgId = messages.get(i).getId();
+                        if (msgId > begin && msgId < end && !selectedMessagesIds[0].withTouch.contains(msgId)) {
+                            addToSelectedMessages(messages.get(i), true);
+                            updateActionModeTitle();
+                            updateVisibleRows();
+                        }
+                    }
                 } else if (id == forward) {
                     // IS_ANONYMOUS_FORWARD = id == forward_anonym;
                     openForward();
@@ -1648,12 +1680,18 @@ public boolean forceShowClear() {
         actionMode.addView(selectedMessagesCountTextView, LayoutHelper.createLinear(0, LayoutHelper.MATCH_PARENT, 1.0f, 65, 0, 0, 0));
         selectedMessagesCountTextView.setOnTouchListener((v, event) -> true);
 
+        boolean replaceForward = MessagesController.getGlobalMainSettings().getBoolean("replaceForward", true);
+
         if (currentEncryptedChat == null) {
             actionModeViews.add(actionMode.addItemWithWidth(edit, R.drawable.msg_edit, AndroidUtilities.dp(54), LocaleController.getString("Edit", R.string.Edit)));
+            actionModeViews.add(actionMode.addItemWithWidth(select_between, R.drawable.profile_list, AndroidUtilities.dp(54), LocaleController.getString("Edit", R.string.Edit)));
             actionModeViews.add(actionMode.addItemWithWidth(star, R.drawable.msg_fave, AndroidUtilities.dp(54), LocaleController.getString("AddToFavorites", R.string.AddToFavorites)));
             actionModeViews.add(actionMode.addItemWithWidth(copy, R.drawable.msg_copy, AndroidUtilities.dp(54), LocaleController.getString("Copy", R.string.Copy)));
-            actionModeViews.add(actionMode.addItemWithWidth(forward, R.drawable.msg_forward, AndroidUtilities.dp(54), LocaleController.getString("Forward", R.string.Forward)));
-            actionModeViews.add(actionMode.addItemWithWidth(forward_anonym, R.drawable.ic_ab_forward_anonym, AndroidUtilities.dp(54), LocaleController.getString("Forward", R.string.Forward)));
+            if (!replaceForward) {
+                actionModeViews.add(actionMode.addItemWithWidth(forward, R.drawable.msg_forward, AndroidUtilities.dp(54), LocaleController.getString("Forward", R.string.Forward)));
+            } else {
+                actionModeViews.add(actionMode.addItemWithWidth(forward_anonym, R.drawable.ic_ab_forward_anonym, AndroidUtilities.dp(54), LocaleController.getString("Forward", R.string.Forward)));
+            }
             actionModeViews.add(actionMode.addItemWithWidth(delete, R.drawable.msg_delete, AndroidUtilities.dp(54), LocaleController.getString("Delete", R.string.Delete)));
         } else {
             actionModeViews.add(actionMode.addItemWithWidth(edit, R.drawable.msg_edit, AndroidUtilities.dp(54), LocaleController.getString("Edit", R.string.Edit)));
@@ -1661,6 +1699,7 @@ public boolean forceShowClear() {
             actionModeViews.add(actionMode.addItemWithWidth(copy, R.drawable.msg_copy, AndroidUtilities.dp(54), LocaleController.getString("Copy", R.string.Copy)));
             actionModeViews.add(actionMode.addItemWithWidth(delete, R.drawable.msg_delete, AndroidUtilities.dp(54), LocaleController.getString("Delete", R.string.Delete)));
         }
+        updateMultipleSelection(actionMode);
         actionMode.getItem(edit).setVisibility(canEditMessagesCount == 1 && selectedMessagesIds[0].size() + selectedMessagesIds[1].size() == 1 ? View.VISIBLE : View.GONE);
         actionMode.getItem(copy).setVisibility(selectedMessagesCanCopyIds[0].size() + selectedMessagesCanCopyIds[1].size() != 0 ? View.VISIBLE : View.GONE);
         actionMode.getItem(star).setVisibility(selectedMessagesCanStarIds[0].size() + selectedMessagesCanStarIds[1].size() != 0 ? View.VISIBLE : View.GONE);
@@ -7995,6 +8034,33 @@ private void processRowSelect(View view, boolean outside, float touchX, float to
             return;
         }
         addToSelectedMessages(message, outside);
+
+        // For selecting messages between the first and the last.
+        ArrayList<Integer> ids = new ArrayList<>();
+        for (int a = 1; a >= 0; a--) {
+            for (int b = 0; b < selectedMessagesIds[a].size(); b++) {
+                ids.add(selectedMessagesIds[a].keyAt(b));
+            }
+        }
+        Integer msgId = message.getId();
+        if (ids.contains(msgId)) {
+            if (!selectedMessagesIds[0].withTouch.contains(msgId)) {
+                ArrayList<Integer> sortIds = selectedMessagesIds[0].withTouch;
+                Collections.sort(sortIds);
+                // If there's a new extreme value,
+                // we should mark as 'withTouch' all selected messages.
+                if (sortIds.get(0) <= msgId || sortIds.get(sortIds.size() - 1) >= msgId) {
+                    selectedMessagesIds[0].withTouch.clear();
+                    for (Integer id : ids) {
+                        selectedMessagesIds[0].withTouch.add(id);
+                    }
+                } else {
+                    selectedMessagesIds[0].withTouch.add(msgId);
+                }
+            }
+        } else {
+            selectedMessagesIds[0].withTouch.remove(msgId);
+        }
         updateActionModeTitle();
         updateVisibleRows();
     }
@@ -8006,6 +8072,7 @@ private void updateActionModeTitle() {
         if (selectedMessagesIds[0].size() != 0 || selectedMessagesIds[1].size() != 0) {
             selectedMessagesCountTextView.setNumber(selectedMessagesIds[0].size() + selectedMessagesIds[1].size(), true);
         }
+        updateMultipleSelection(actionBar.createActionMode());
     }
 
     private void updateTitle() {
@@ -12908,11 +12975,19 @@ public void onAnimationEnd(Animator animation) {
         animatorSet.start();
 
         addToSelectedMessages(message, listView);
+        selectedMessagesIds[0].withTouch.clear();
+        selectedMessagesIds[0].withTouch.add(message.getId());
+        updateMultipleSelection(actionMode);
 
         selectedMessagesCountTextView.setNumber(selectedMessagesIds[0].size() + selectedMessagesIds[1].size(), false);
         updateVisibleRows();
     }
 
+    private void updateMultipleSelection(ActionBarMenu actionMode) {
+        actionMode.getItem(select_between).setVisibility(
+            selectedMessagesIds[0].withTouch.size() > 1 ? View.VISIBLE : View.GONE);
+    }
+
     private void startEditingMessageObject(MessageObject messageObject) {
         if (messageObject == null || getParentActivity() == null) {
             return;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachAlert.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachAlert.java
index 54ad4759e..cfeb594a0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachAlert.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAttachAlert.java
@@ -1132,7 +1132,8 @@ public int getSpanSize(int position) {
                 PhotoViewer.getInstance().openPhotoForSelect(arrayList, position, type, photoViewerProvider, chatActivity);
                 AndroidUtilities.hideKeyboard(baseFragment.getFragmentView().findFocus());
             } else {
-                if (SharedConfig.inappCamera) {
+                if (SharedConfig.inappCamera
+                    && !MessagesController.getGlobalMainSettings().getBoolean("systemCamera", false)) {
                     openCamera(true);
                 } else {
                     if (delegate != null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAvatarContainer.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAvatarContainer.java
index 411843075..0471b98a7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAvatarContainer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatAvatarContainer.java
@@ -25,6 +25,7 @@
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
 import org.telegram.messenger.R;
+import org.telegram.messenger.SharedConfig;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.UserObject;
 import org.telegram.tgnet.ConnectionsManager;
@@ -490,7 +491,9 @@ private void updateCurrentConnectionState() {
         } else if (currentConnectionState == ConnectionsManager.ConnectionStateUpdating) {
             title = LocaleController.getString("Updating", R.string.Updating);
         } else if (currentConnectionState == ConnectionsManager.ConnectionStateConnectingToProxy) {
-            title = "...";
+            title = SharedConfig.hideSensitiveData()
+                ? "..."
+                : LocaleController.getString("ConnectingToProxy", R.string.ConnectingToProxy);
         }
         if (title == null) {
             if (lastSubtitle != null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ForkSettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ForkSettingsActivity.java
index 6d92fe366..d56fb3738 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ForkSettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ForkSettingsActivity.java
@@ -33,37 +33,73 @@
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.RecyclerListView;
 
+import java.lang.reflect.*;
+import java.util.ArrayList;
+
 public class ForkSettingsActivity extends BaseFragment {
 
     private RecyclerListView listView;
     private ListAdapter listAdapter;
 
+    private ArrayList<Integer> sectionRows = new ArrayList<Integer>();
+    private String[] sectionStrings = {"General", "ChatCamera"};
+
     private int rowCount;
-    private int sectionRow1;
 
+    private int hideSensitiveDataRow;
     private int squareAvatarsRow;
     private int inappCameraRow;
+    private int systemCameraRow;
     private int photoHasStickerRow;
     private int unmutedOnTopRow;
     private int rearVideoMessages;
+    private int replaceForward;
 
-    private int emptyRow;
+    private ArrayList<Integer> emptyRows = new ArrayList<Integer>();
     private int syncPinsRow;
 
+    private static int getIntLocale(String str) {
+        try {
+            try {
+                return Class.forName("R")
+                    .getDeclaredField("string")
+                    .getDeclaringClass()
+                    .getDeclaredField(str).getInt(null);
+            } catch (IllegalAccessException e) {
+                e.printStackTrace();
+            }
+        } catch (NoSuchFieldException e) {
+            e.printStackTrace();
+        } catch (ClassNotFoundException e) {
+            e.printStackTrace();
+        }
+        return 0;
+    }
+
+    private static String getLocale(String s) {
+        return LocaleController.getString(s, 0);
+    }
+
     @Override
     public boolean onFragmentCreate() {
         super.onFragmentCreate();
 
         rowCount = 0;
         
-        sectionRow1 = rowCount++;
+        sectionRows.add(rowCount++);
+        hideSensitiveDataRow = SharedConfig.isUserOwner() ? -1 : rowCount++;
         squareAvatarsRow = rowCount++;
-        inappCameraRow = rowCount++;
         photoHasStickerRow = rowCount++;
         unmutedOnTopRow = rowCount++;
         rearVideoMessages = rowCount++;
+        replaceForward = rowCount++;
+    
+        emptyRows.add(rowCount++);
+        sectionRows.add(rowCount++);
+        inappCameraRow = rowCount++;
+        systemCameraRow = rowCount++;
 
-        emptyRow = rowCount++;
+        emptyRows.add(rowCount++);
         syncPinsRow = rowCount++;
 
         return true;
@@ -119,19 +155,14 @@ public boolean supportsPredictiveItemAnimations() {
         frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT));
         listView.setOnItemClickListener((view, position, x, y) -> {
             if (position == squareAvatarsRow) {
-                SharedPreferences preferences = MessagesController.getGlobalMainSettings();
-                boolean squareAvatars = preferences.getBoolean("squareAvatars", true);
-                SharedPreferences.Editor editor = preferences.edit();
-                editor.putBoolean("squareAvatars", !squareAvatars);
-                editor.commit();
-                if (view instanceof TextCheckCell) {
-                    ((TextCheckCell) view).setChecked(!squareAvatars);
-                }
+                toggleGlobalMainSetting("squareAvatars", view, false);
             } else if (position == inappCameraRow) {
                 SharedConfig.toggleInappCamera();
                 if (view instanceof TextCheckCell) {
                     ((TextCheckCell) view).setChecked(SharedConfig.inappCamera);
                 }
+            } else if (position == systemCameraRow) {
+                toggleGlobalMainSetting("systemCamera", view, false);
             } else if (position == photoHasStickerRow) {
                 SharedConfig.toggleHasSticker();
                 if (view instanceof TextCheckCell) {
@@ -142,8 +173,12 @@ public boolean supportsPredictiveItemAnimations() {
                 MessagesController.getInstance(currentAccount).sortDialogs(null);
             } else if (position == rearVideoMessages) {
                 toggleGlobalMainSetting("rearVideoMessages", view, false);
+            } else if (position == replaceForward) {
+                toggleGlobalMainSetting("replaceForward", view, true);
             } else if (position == syncPinsRow) {
                 toggleGlobalMainSetting("syncPins", view, true);
+            } else if (position == hideSensitiveDataRow) {
+                toggleGlobalMainSetting("hideSensitiveData", view, false);
             }
         });
 
@@ -184,11 +219,15 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                     if (position == squareAvatarsRow) {
                         String t = LocaleController.getString("SquareAvatars", R.string.SquareAvatars);
                         String info = LocaleController.getString("SquareAvatarsInfo", R.string.SquareAvatarsInfo);
-                        textCell.setTextAndValueAndCheck(t, info, preferences.getBoolean("squareAvatars", true), false, false);
+                        textCell.setTextAndValueAndCheck(t, info, preferences.getBoolean("squareAvatars", false), false, false);
                     } else if (position == inappCameraRow) {
                         String t = LocaleController.getString("InAppCamera", R.string.InAppCamera);
                         String info = LocaleController.getString("InAppCameraInfo", R.string.InAppCameraInfo);
                         textCell.setTextAndValueAndCheck(t, info, preferences.getBoolean("inappCamera", true), false, false);
+                    } else if (position == systemCameraRow) {
+                        String t = LocaleController.getString("SystemCamera", R.string.SystemCamera);
+                        String info = LocaleController.getString("SystemCameraInfo", R.string.SystemCameraInfo);
+                        textCell.setTextAndValueAndCheck(t, info, preferences.getBoolean("systemCamera", false), false, false);
                     } else if (position == photoHasStickerRow) {
                         String t = LocaleController.getString("PhotoHasSticker", R.string.PhotoHasSticker);
                         String info = LocaleController.getString("PhotoHasStickerInfo", R.string.PhotoHasStickerInfo);
@@ -200,18 +239,27 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                     } else if (position == rearVideoMessages) {
                         String t = LocaleController.getString("RearVideoMessages", R.string.RearVideoMessages);
                         textCell.setTextAndCheck(t, preferences.getBoolean("rearVideoMessages", false), false);
+                    } else if (position == replaceForward) {
+                        String t = LocaleController.getString("ReplaceForward", R.string.ReplaceForward);
+                        textCell.setTextAndCheck(t, preferences.getBoolean("replaceForward", true), false);
                     } else if (position == syncPinsRow) {
                         String t = LocaleController.getString("SyncPins", R.string.SyncPins);
                         String info = LocaleController.getString("SyncPinsInfo", R.string.SyncPinsInfo);
                         textCell.setTextAndValueAndCheck(t, info, preferences.getBoolean("syncPins", true), true, false);
+                    } else if (position == hideSensitiveDataRow) {
+                        String t = LocaleController.getString("HideSensitiveData", R.string.HideSensitiveData);
+                        String info = LocaleController.getString("SquareAvatarsInfo", R.string.SquareAvatarsInfo);
+                        textCell.setTextAndValueAndCheck(t, info, preferences.getBoolean("hideSensitiveData", false), true, false);
                     }
                     break;
                 }
                 case 4: {
-                    HeaderCell headerCell = (HeaderCell) holder.itemView;
-                    if (position == sectionRow1) {
-                        headerCell.setText(LocaleController.getString("General", R.string.General));
+                    int i = sectionRows.indexOf(position);
+                    if (i == -1) {
+                        break;
                     }
+                    HeaderCell headerCell = (HeaderCell) holder.itemView;
+                    headerCell.setText(getLocale(sectionStrings[i]));
                     break;
                 }
             }
@@ -221,9 +269,12 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
         public boolean isEnabled(RecyclerView.ViewHolder holder) {
             int position = holder.getAdapterPosition();
             boolean fork = position == squareAvatarsRow
+                        || position == hideSensitiveDataRow
                         || position == inappCameraRow
+                        || position == systemCameraRow
                         || position == unmutedOnTopRow
                         || position == rearVideoMessages
+                        || position == replaceForward
                         || position == syncPinsRow
                         || position == photoHasStickerRow;
             return fork;
@@ -263,18 +314,21 @@ public boolean isEnabled(RecyclerView.ViewHolder holder) {
 
         @Override
         public int getItemViewType(int position) {
-            if (position == emptyRow) {
+            if (emptyRows.contains(position)) {
                 return 1;
             } else if (0 == 1) {
                 return 2;
             } else if (position == squareAvatarsRow
+                || position == hideSensitiveDataRow
                 || position == inappCameraRow
+                || position == systemCameraRow
                 || position == unmutedOnTopRow
                 || position == syncPinsRow
                 || position == rearVideoMessages
+                || position == replaceForward
                 || position == photoHasStickerRow) {
                 return 3;
-            } else if (position == sectionRow1) {
+            } else if (sectionRows.contains(position)) {
                 return 4;
             }
             return 6;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
index 39ae2b6ef..feb350aff 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
@@ -63,6 +63,7 @@
 import org.telegram.messenger.NotificationsController;
 import org.telegram.messenger.SecretChatHelper;
 import org.telegram.messenger.SendMessagesHelper;
+import org.telegram.messenger.SharedConfig;
 import org.telegram.messenger.UserObject;
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.tgnet.ConnectionsManager;
@@ -196,6 +197,7 @@
     private int userInfoRow;
     private int channelInfoRow;
     private int usernameRow;
+    private int idRow;
     private int notificationsDividerRow;
     private int notificationsRow;
     private int infoSectionRow;
@@ -745,6 +747,17 @@ public boolean supportsPredictiveItemAnimations() {
             if (getParentActivity() == null) {
                 return;
             }
+            if (position == idRow && user_id != 0) {
+                try {
+                    android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                    android.content.ClipData clip = android.content.ClipData.newPlainText("label", user_id + "");
+                    clipboard.setPrimaryClip(clip);
+                    Toast.makeText(getParentActivity(), LocaleController.getString("TextCopied", R.string.TextCopied), Toast.LENGTH_SHORT).show();
+                } catch (Exception e) {
+                    FileLog.e(e);
+                }
+                return;
+            }
             if (position == photosRow || position == filesRow || position == linksRow || position == audioRow || position == voiceRow) {
                 int tab;
                 if (position == photosRow) {
@@ -869,6 +882,7 @@ public boolean supportsPredictiveItemAnimations() {
             } else if (position == addMemberRow) {
                 openAddMember();
             } else if (position == usernameRow) {
+                if (!processCopyUsername())
                 if (currentChat != null) {
                     try {
                         Intent intent = new Intent(Intent.ACTION_SEND);
@@ -1286,39 +1300,37 @@ public void didChangeOwner(TLRPC.User user) {
         presentFragment(fragment);
     }
 
-    private boolean processOnClickOrPress(final int position) {
-        if (position == usernameRow) {
-            final String username;
-            if (user_id != 0) {
-                final TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(user_id);
-                if (user == null || user.username == null) {
-                    return false;
-                }
-                username = user.username;
-            } else if (chat_id != 0) {
-                final TLRPC.Chat chat = MessagesController.getInstance(currentAccount).getChat(chat_id);
-                if (chat == null || chat.username == null) {
-                    return false;
-                }
-                username = chat.username;
-            } else {
+    private boolean processCopyUsername() {
+        final String username;
+        if (user_id != 0) {
+            final TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(user_id);
+            if (user == null || user.username == null) {
                 return false;
             }
-            AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-            builder.setItems(new CharSequence[]{LocaleController.getString("Copy", R.string.Copy)}, (dialogInterface, i) -> {
-                if (i == 0) {
-                    try {
-                        android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
-                        android.content.ClipData clip = android.content.ClipData.newPlainText("label", "@" + username);
-                        clipboard.setPrimaryClip(clip);
-                        Toast.makeText(getParentActivity(), LocaleController.getString("TextCopied", R.string.TextCopied), Toast.LENGTH_SHORT).show();
-                    } catch (Exception e) {
-                        FileLog.e(e);
-                    }
-                }
-            });
-            showDialog(builder.create());
-            return true;
+            username = user.username;
+        } else if (chat_id != 0) {
+            final TLRPC.Chat chat = MessagesController.getInstance(currentAccount).getChat(chat_id);
+            if (chat == null || chat.username == null) {
+                return false;
+            }
+            username = chat.username;
+        } else {
+            return false;
+        }
+        try {
+            android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+            android.content.ClipData clip = android.content.ClipData.newPlainText("label", "@" + username);
+            clipboard.setPrimaryClip(clip);
+            Toast.makeText(getParentActivity(), LocaleController.getString("TextCopied", R.string.TextCopied), Toast.LENGTH_SHORT).show();
+        } catch (Exception e) {
+            FileLog.e(e);
+        }
+        return true;
+    }
+
+    private boolean processOnClickOrPress(final int position) {
+        if (position == usernameRow) {
+            processCopyUsername();
         } else if (position == phoneRow) {
             final TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(user_id);
             if (user == null || user.phone == null || user.phone.length() == 0 || getParentActivity() == null) {
@@ -2488,6 +2500,7 @@ private void updateRowsIds() {
         locationRow = -1;
         channelInfoRow = -1;
         usernameRow = -1;
+        idRow = -1;
         settingsTimerRow = -1;
         settingsKeyRow = -1;
         notificationsDividerRow = -1;
@@ -2547,6 +2560,9 @@ private void updateRowsIds() {
             if (user != null && !TextUtils.isEmpty(user.username)) {
                 usernameRow = rowCount++;
             }
+            if (user != null) {
+                idRow = rowCount++;
+            }
             if (phoneRow != -1 || userInfoRow != -1 || usernameRow != -1) {
                 notificationsDividerRow = rowCount++;
             }
@@ -2732,7 +2748,9 @@ private void updateProfileData() {
         } else if (currentConnectionState == ConnectionsManager.ConnectionStateUpdating) {
             onlineTextOverride = LocaleController.getString("Updating", R.string.Updating);
         } else if (currentConnectionState == ConnectionsManager.ConnectionStateConnectingToProxy) {
-            onlineTextOverride = "...";
+            onlineTextOverride = SharedConfig.hideSensitiveData()
+                ? "..."
+                : LocaleController.getString("ConnectingToProxy", R.string.ConnectingToProxy);
         } else {
             onlineTextOverride = null;
         }
@@ -3185,6 +3203,8 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                             text = LocaleController.getString("PhoneHidden", R.string.PhoneHidden);
                         }
                         detailCell.setTextAndValue(text, LocaleController.getString("PhoneMobile", R.string.PhoneMobile), false);
+                    } else if (position == idRow && user_id != 0) {
+                        detailCell.setTextAndValue(user_id + "", "ID", false);
                     } else if (position == usernameRow) {
                         String text;
                         if (user_id != 0) {
@@ -3430,7 +3450,7 @@ public int getItemCount() {
         public int getItemViewType(int i) {
             if (i == infoHeaderRow || i == sharedHeaderRow || i == membersHeaderRow) {
                 return 1;
-            } else if (i == phoneRow || i == usernameRow || i == locationRow) {
+            } else if (i == phoneRow || i == usernameRow || i == idRow || i == locationRow) {
                 return 2;
             } else if (i == userInfoRow || i == channelInfoRow) {
                 return 3;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index d0afe2fa5..e54bd6e4a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -218,10 +218,17 @@ public boolean onFragmentCreate() {
 
         rowCount = 0;
         overscrollRow = rowCount++;
-        numberSectionRow = -1;
-        numberRow = -1;
-        usernameRow = -1;
-        bioRow = -1;
+        if (SharedConfig.hideSensitiveData()) {
+            numberSectionRow = -1;
+            numberRow = -1;
+            usernameRow = -1;
+            bioRow = -1;
+        } else {
+            numberSectionRow = rowCount++;
+            numberRow = rowCount++;
+            usernameRow = rowCount++;
+            bioRow = rowCount++;
+        }
         settingsSectionRow = rowCount++;
         settingsSectionRow2 = rowCount++;
         notificationRow = rowCount++;
diff --git a/TMessagesProj/src/main/res/values-ru/strings.xml b/TMessagesProj/src/main/res/values-ru/strings.xml
index 06ecbc4c7..dc7627bd2 100644
--- a/TMessagesProj/src/main/res/values-ru/strings.xml
+++ b/TMessagesProj/src/main/res/values-ru/strings.xml
@@ -31,5 +31,9 @@
     <string name="PhotoHasStickerInfo">При использовании стикеров на фотографии</string>
     <string name="PinDialogsOrder">Порядок закреп. диалогов</string>
     <string name="RearVideoMessages">Задняя камера в видео сообщениях</string>
-    
+    <string name="ReplaceForward">Использовать быструю пересылку</string>
+    <string name="HideSensitiveData">Скрыть личную информацию</string>
+    <string name="SystemCamera">Использовать системную камеру</string>
+    <string name="SystemCameraInfo">Только в диалоге вложений</string>
+
 </resources>
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 93450911a..d3ec31546 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -2983,4 +2983,8 @@
     <string name="PhotoHasStickerInfo">When using Stickers on Photo</string>
     <string name="PinDialogsOrder">Pin Dialogs Order</string>
     <string name="RearVideoMessages">Rear camera in Video Messages</string>
+    <string name="ReplaceForward">Replace original Forward</string>
+    <string name="HideSensitiveData">Hide Sensitive Data</string>
+    <string name="SystemCamera">Use System Camera for Photo</string>
+    <string name="SystemCameraInfo">Only in Attachment Dialog</string>
 </resources>
