diff --git a/SDMessagesProj/jni/sqlite_cursor.c b/SDMessagesProj/jni/sqlite_cursor.c
new file mode 100755
index 000000000..fc100d654
--- /dev/null
+++ b/SDMessagesProj/jni/sqlite_cursor.c
@@ -0,0 +1,79 @@
+#include "sqlite.h"
+
+int Java_com_sirisdevelopment_telegram_SQLite_SQLiteCursor_columnType(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
+	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
+	return sqlite3_column_type(handle, columnIndex);
+}
+
+int Java_com_sirisdevelopment_telegram_SQLite_SQLiteCursor_columnIsNull(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
+	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
+	int valType = sqlite3_column_type(handle, columnIndex);
+	return SQLITE_NULL == valType;
+}
+
+int Java_com_sirisdevelopment_telegram_SQLite_SQLiteCursor_columnIntValue(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
+	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
+	int valType = sqlite3_column_type(handle, columnIndex);
+	if (SQLITE_NULL == valType) {
+		return 0;
+	}
+	return sqlite3_column_int(handle, columnIndex);
+}
+
+long long Java_com_sirisdevelopment_telegram_SQLite_SQLiteCursor_columnLongValue(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
+	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
+	int valType = sqlite3_column_type(handle, columnIndex);
+	if (SQLITE_NULL == valType) {
+		return 0;
+	}
+	return sqlite3_column_int64(handle, columnIndex);
+}
+
+double Java_com_sirisdevelopment_telegram_SQLite_SQLiteCursor_columnDoubleValue(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
+	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
+	int valType = sqlite3_column_type(handle, columnIndex);
+	if (SQLITE_NULL == valType) {
+		return 0;
+	}
+	return sqlite3_column_double(handle, columnIndex);
+}
+
+jstring Java_com_sirisdevelopment_telegram_SQLite_SQLiteCursor_columnStringValue(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
+	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
+	const char *str = sqlite3_column_text(handle, columnIndex);
+	if (str != 0) {
+		return (*env)->NewStringUTF(env, str);
+	}
+	return 0;
+}
+
+jbyteArray Java_com_sirisdevelopment_telegram_SQLite_SQLiteCursor_columnByteArrayValue(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
+    sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
+	void *buf = sqlite3_column_blob(handle, columnIndex);
+	int length = sqlite3_column_bytes(handle, columnIndex);
+	if (buf != 0 && length > 0) {
+		jbyteArray result = (*env)->NewByteArray(env, length);
+        (*env)->SetByteArrayRegion(env, result, 0, length, buf);
+        return result;
+	}
+	return 0;
+}
+
+int Java_com_sirisdevelopment_telegram_SQLite_SQLiteCursor_columnByteArrayLength(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
+	return sqlite3_column_bytes((sqlite3_stmt *)statementHandle, columnIndex);
+}
+
+int Java_com_sirisdevelopment_telegram_SQLite_SQLiteCursor_columnByteBufferValue(JNIEnv *env, jobject object, int statementHandle, int columnIndex, jobject buffer) {
+    if (!buffer) {
+        return 0;
+    }
+	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
+	void *buf = sqlite3_column_blob(handle, columnIndex);
+	int length = sqlite3_column_bytes(handle, columnIndex);
+	if (buf != 0 && length > 0) {
+        jbyte *byteBuff = (*env)->GetDirectBufferAddress(env, buffer);
+        memcpy(byteBuff, buf, length);
+        return length;
+	}
+	return 0;
+}
diff --git a/SDMessagesProj/jni/sqlite_database.c b/SDMessagesProj/jni/sqlite_database.c
new file mode 100755
index 000000000..63b719a15
--- /dev/null
+++ b/SDMessagesProj/jni/sqlite_database.c
@@ -0,0 +1,42 @@
+#include "sqlite.h"
+
+void Java_com_sirisdevelopment_telegram_SQLite_SQLiteDatabase_closedb(JNIEnv *env, jobject object, int sqliteHandle) {
+	sqlite3 *handle = (sqlite3 *)sqliteHandle;
+	int err = sqlite3_close(handle);
+	if (SQLITE_OK != err) {
+		throw_sqlite3_exception(env, handle, err);
+	}
+}
+
+void Java_com_sirisdevelopment_telegram_SQLite_SQLiteDatabase_beginTransaction(JNIEnv *env, jobject object, int sqliteHandle) {
+    sqlite3 *handle = (sqlite3 *)sqliteHandle;
+    sqlite3_exec(handle, "BEGIN", 0, 0, 0);
+}
+
+void Java_com_sirisdevelopment_telegram_SQLite_SQLiteDatabase_commitTransaction(JNIEnv *env, jobject object, int sqliteHandle) {
+    sqlite3 *handle = (sqlite3 *)sqliteHandle;
+    sqlite3_exec(handle, "COMMIT", 0, 0, 0);
+}
+
+int Java_com_sirisdevelopment_telegram_SQLite_SQLiteDatabase_opendb(JNIEnv *env, jobject object, jstring fileName, jstring tempDir) {
+    char const *fileNameStr = (*env)->GetStringUTFChars(env, fileName, 0);
+    char const *tempDirStr = (*env)->GetStringUTFChars(env, tempDir, 0);
+    
+    if (sqlite3_temp_directory != 0) {
+        sqlite3_free(sqlite3_temp_directory);
+    }
+    sqlite3_temp_directory = sqlite3_mprintf("%s", tempDirStr);
+    
+    sqlite3 *handle = 0;
+    int err = sqlite3_open(fileNameStr, &handle);
+    if (SQLITE_OK != err) {
+    	throw_sqlite3_exception(env, handle, err);
+    }
+    if (fileNameStr != 0) {
+        (*env)->ReleaseStringUTFChars(env, fileName, fileNameStr);
+    }
+    if (tempDirStr != 0) {
+        (*env)->ReleaseStringUTFChars(env, tempDir, tempDirStr);
+    }
+    return (int)handle;
+}
diff --git a/SDMessagesProj/jni/sqlite_statement.c b/SDMessagesProj/jni/sqlite_statement.c
new file mode 100755
index 000000000..6208e5f54
--- /dev/null
+++ b/SDMessagesProj/jni/sqlite_statement.c
@@ -0,0 +1,120 @@
+#include "sqlite.h"
+
+jfieldID queryArgsCountField;
+
+jint sqliteOnJNILoad(JavaVM *vm, void *reserved, JNIEnv *env) {
+	jclass class = (*env)->FindClass(env, "com/sirisdevelopment/telegram/SQLite/SQLitePreparedStatement");
+	queryArgsCountField = (*env)->GetFieldID(env, class, "queryArgsCount", "I");
+	return JNI_VERSION_1_6;
+}
+
+int Java_com_sirisdevelopment_telegram_SQLite_SQLitePreparedStatement_step(JNIEnv *env, jobject object, int statementHandle) {
+	sqlite3_stmt *handle = (sqlite3_stmt *) statementHandle;
+    
+    int errcode = sqlite3_step(handle);
+    if (errcode == SQLITE_ROW)  {
+        return 0;
+    } else if(errcode == SQLITE_DONE) {
+        return 1;
+    }  else if(errcode == SQLITE_BUSY) {
+        return -1;
+    }
+	throw_sqlite3_exception(env, sqlite3_db_handle(handle), errcode);
+}
+
+int Java_com_sirisdevelopment_telegram_SQLite_SQLitePreparedStatement_prepare(JNIEnv *env, jobject object, int sqliteHandle, jstring sql) {
+	sqlite3 *handle = (sqlite3 *) sqliteHandle;
+
+    char const *sqlStr = (*env)->GetStringUTFChars(env, sql, 0);
+
+    sqlite3_stmt *stmt_handle;
+
+    int errcode = sqlite3_prepare_v2(handle, sqlStr, -1, &stmt_handle, 0);
+    if (SQLITE_OK != errcode) {
+    	throw_sqlite3_exception(env, handle, errcode);
+    } else {
+    	int argsCount = sqlite3_bind_parameter_count(stmt_handle);
+    	(*env)->SetIntField(env, object, queryArgsCountField, argsCount);
+    }
+
+    if (sqlStr != 0) {
+        (*env)->ReleaseStringUTFChars(env, sql, sqlStr);
+    }
+
+    return (int) stmt_handle;
+}
+
+void Java_com_sirisdevelopment_telegram_SQLite_SQLitePreparedStatement_reset(JNIEnv *env, jobject object, int statementHandle) {
+	sqlite3_stmt *handle = (sqlite3_stmt *) statementHandle;
+
+	int errcode = sqlite3_reset(handle);
+    if (SQLITE_OK != errcode) {
+    	throw_sqlite3_exception(env, sqlite3_db_handle(handle), errcode);
+    }
+}
+
+void Java_com_sirisdevelopment_telegram_SQLite_SQLitePreparedStatement_finalize(JNIEnv *env, jobject object, int statementHandle) {
+    sqlite3_finalize((sqlite3_stmt *) statementHandle);
+}
+
+void Java_com_sirisdevelopment_telegram_SQLite_SQLitePreparedStatement_bindByteBuffer(JNIEnv *env, jobject object, int statementHandle, int index, jobject value, int length) {
+	sqlite3_stmt *handle = (sqlite3_stmt *) statementHandle;
+    jbyte *buf = (*env)->GetDirectBufferAddress(env, value);
+    
+	int errcode = sqlite3_bind_blob(handle, index, buf, length, SQLITE_STATIC);
+    if (SQLITE_OK != errcode) {
+    	throw_sqlite3_exception(env, sqlite3_db_handle(handle), errcode);
+    }
+}
+
+void Java_com_sirisdevelopment_telegram_SQLite_SQLitePreparedStatement_bindString(JNIEnv *env, jobject object, int statementHandle, int index, jstring value) {
+	sqlite3_stmt *handle = (sqlite3_stmt *) statementHandle;
+
+	char const *valueStr = (*env)->GetStringUTFChars(env, value, 0);
+
+	int errcode = sqlite3_bind_text(handle, index, valueStr, -1, SQLITE_TRANSIENT);
+    if (SQLITE_OK != errcode) {
+    	throw_sqlite3_exception(env, sqlite3_db_handle(handle), errcode);
+    }
+
+	if (valueStr != 0) {
+        (*env)->ReleaseStringUTFChars(env, value, valueStr);
+    }
+}
+
+void Java_com_sirisdevelopment_telegram_SQLite_SQLitePreparedStatement_bindInt(JNIEnv *env, jobject object, int statementHandle, int index, int value) {
+	sqlite3_stmt *handle = (sqlite3_stmt *) statementHandle;
+
+	int errcode = sqlite3_bind_int(handle, index, value);
+    if (SQLITE_OK != errcode) {
+    	throw_sqlite3_exception(env, sqlite3_db_handle(handle), errcode);
+    }
+}
+
+void Java_com_sirisdevelopment_telegram_SQLite_SQLitePreparedStatement_bindLong(JNIEnv *env, jobject object, int statementHandle, int index, long long value) {
+	sqlite3_stmt *handle = (sqlite3_stmt *) statementHandle;
+    
+	int errcode = sqlite3_bind_int64(handle, index, value);
+    if (SQLITE_OK != errcode) {
+    	throw_sqlite3_exception(env, sqlite3_db_handle(handle), errcode);
+    }
+}
+
+void Java_com_sirisdevelopment_telegram_SQLite_SQLitePreparedStatement_bindDouble(JNIEnv *env, jobject object, int statementHandle, int index, double value) {
+	sqlite3_stmt *handle = (sqlite3_stmt *) statementHandle;
+
+	int errcode = sqlite3_bind_double(handle, index, value);
+    if (SQLITE_OK != errcode) {
+    	throw_sqlite3_exception(env, sqlite3_db_handle(handle), errcode);
+    }
+}
+
+void Java_com_sirisdevelopment_telegram_SQLite_SQLitePreparedStatement_bindNull(JNIEnv *env, jobject object, int statementHandle, int index) {
+	sqlite3_stmt *handle = (sqlite3_stmt *) statementHandle;
+
+	int errcode = sqlite3_bind_null(handle, index);
+    if (SQLITE_OK != errcode) {
+    	throw_sqlite3_exception(env, sqlite3_db_handle(handle), errcode);
+    }
+}
+
