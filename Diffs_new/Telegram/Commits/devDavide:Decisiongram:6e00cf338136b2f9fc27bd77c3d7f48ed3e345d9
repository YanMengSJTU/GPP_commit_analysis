diff --git a/TMessagesProj/src/main/java/org/decisiongram/adapter/VoteListAdapter.java b/TMessagesProj/src/main/java/org/decisiongram/adapter/VoteListAdapter.java
index 2d60e3ed3..996237b8b 100644
--- a/TMessagesProj/src/main/java/org/decisiongram/adapter/VoteListAdapter.java
+++ b/TMessagesProj/src/main/java/org/decisiongram/adapter/VoteListAdapter.java
@@ -62,6 +62,7 @@ public VoteListAdapter(BaseFragment baseFragment, boolean editable) {
         inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
         this.editable = editable;
         this.firstVotePerformed = false;
+        this.newVotes = new HashMap<>();
         this.onVoteChangeListener = new OnVoteChangeListener() {
             @Override
             public void voteChanges(boolean areThereChangesToSave) {
diff --git a/TMessagesProj/src/main/java/org/decisiongram/service/DecisionService.java b/TMessagesProj/src/main/java/org/decisiongram/service/DecisionService.java
index 0d91aa2a2..8e99a1fa4 100644
--- a/TMessagesProj/src/main/java/org/decisiongram/service/DecisionService.java
+++ b/TMessagesProj/src/main/java/org/decisiongram/service/DecisionService.java
@@ -5,6 +5,7 @@
 import android.text.style.ClickableSpan;
 
 import org.decisiongram.data.Decision;
+import org.decisiongram.data.DecisiongramException;
 import org.decisiongram.data.Option;
 import org.decisiongram.data.TextOption;
 import org.decisiongram.data.UsersDecisionVotes;
@@ -55,7 +56,7 @@
      * @param decision
      * @param votes2Save
      */
-    void notifyVote(Decision decision, Collection<Vote> votes2Save);
+    void notifyVote(Decision decision, Collection<Vote> votes2Save) throws DecisiongramException;
 
     /**
      * Notify to other groups members that a decision has been closed
@@ -80,7 +81,7 @@
      * @param decision
      * @param newOptions
      */
-    void notifyNewOptions(Decision decision, List<Option> newOptions);
+    void notifyNewOptions(Decision decision, List<Option> newOptions) throws DecisiongramException;
 
     /**
      * Notify that the long description of an option has been changed
@@ -93,7 +94,7 @@
      * @param decision
      * @param deleteOptions
      */
-    void notifyDeleteOptions(Decision decision, List<Option> deleteOptions);
+    void notifyDeleteOptions(Decision decision, List<Option> deleteOptions) throws DecisiongramException;
 
     /**
      * @param message
diff --git a/TMessagesProj/src/main/java/org/decisiongram/service/DecisionServiceImpl.java b/TMessagesProj/src/main/java/org/decisiongram/service/DecisionServiceImpl.java
index 53390e066..e31ce8863 100644
--- a/TMessagesProj/src/main/java/org/decisiongram/service/DecisionServiceImpl.java
+++ b/TMessagesProj/src/main/java/org/decisiongram/service/DecisionServiceImpl.java
@@ -11,6 +11,7 @@
 import org.decisiongram.R;
 import org.decisiongram.data.DBBean;
 import org.decisiongram.data.Decision;
+import org.decisiongram.data.DecisiongramException;
 import org.decisiongram.data.Option;
 import org.decisiongram.data.ParsedMessage;
 import org.decisiongram.data.TextOption;
@@ -102,9 +103,11 @@ public void remindUserToVote(Decision decision, TLRPC.User user) {
     }
 
     @Override
-    public void notifyVote(Decision decision, Collection<Vote> votes2Save) {
+    public void notifyVote(Decision decision, Collection<Vote> votes2Save) throws DecisiongramException {
         Log.d(LOG_TAG, "notifyVote groupChatId[" + decision.getChatId() + "] decision[" + decision + "] votes2Save[" + votes2Save + "]");
 
+        decision = checkAndUpdateDecision(decision);
+
         // Save vote on the db first
         for(Vote v : votes2Save){
             decisiongramDAO.save(v);
@@ -113,6 +116,22 @@ public void notifyVote(Decision decision, Collection<Vote> votes2Save) {
         sendMessage(decision.getChatId(), message);
     }
 
+    @NonNull
+    private Decision checkAndUpdateDecision(Decision decision) throws DecisiongramException {
+        {
+            String oldTitle = decision.getTitle();
+            decision = decisiongramDAO.getDecision(decision.getId());
+            if (decision == null)
+                throw new DecisiongramException(
+                        ApplicationLoader.applicationContext.getString(R.string.decisionNotFound,oldTitle));
+        }
+        if (!decision.isOpen()){
+            throw new DecisiongramException(
+                    ApplicationLoader.applicationContext.getString(R.string.decisionIsClosed,decision.getTitle()));
+        }
+        return decision;
+    }
+
 
     @Override
     public void notifyClose(Decision decision) {
@@ -147,8 +166,9 @@ public void notifyNewDecision(Decision decision, List<Option> options) {
     }
 
     @Override
-    public void notifyNewOptions(Decision decision, List<Option> newOptions) {
+    public void notifyNewOptions(Decision decision, List<Option> newOptions) throws DecisiongramException {
         Log.d(LOG_TAG, "notifyNewOptions decision[" + decision + "] newoptions[" + newOptions + "]");
+        decision = checkAndUpdateDecision(decision);
         saveNewOptions(decision, newOptions);
         String message = messageManager.buildAddOptions(decision, newOptions);
         sendMessage(decision.getChatId(), message);
@@ -168,8 +188,9 @@ public void notifyOptionUpdateLongDescription(TextOption option) {
     }
 
     @Override
-    public void notifyDeleteOptions(Decision decision, List<Option> deleteOptions) {
+    public void notifyDeleteOptions(Decision decision, List<Option> deleteOptions) throws DecisiongramException {
         Log.d(LOG_TAG, "notifyDeleteOptions decision[" + decision + "] deleteOptions[" + deleteOptions + "]");
+        decision = checkAndUpdateDecision(decision);
         deleteOptions(deleteOptions);
         String message = messageManager.buildDeleteOptions(decision, deleteOptions);
         sendMessage(decision.getChatId(), message);
@@ -272,6 +293,8 @@ public void processMessage(MessageObject message, boolean showToastOnError) {
                     if (result == null){
                         throw new MessageParseException("Decision not found for "+msgType+" messsage");
                     }
+                    if (!result.decision.isOpen())
+                        throw new MessageParseException("Add Option not allowed for closed decision ["+result.decision+"]");
                     for (Option o : result.optionList) {
                         o.setDecisionId(result.decision.getId());
                         decisiongramDAO.save(o);
@@ -284,6 +307,8 @@ public void processMessage(MessageObject message, boolean showToastOnError) {
                     if (result == null){
                         throw new MessageParseException("Decision not found for "+msgType+" messsage");
                     }
+                    if (!result.decision.isOpen())
+                        throw new MessageParseException("Delete Option not allowed for closed decision ["+result.decision+"]");
                     for (Option o : result.optionList) {
                         Option found = decisiongramDAO.getOption(o.getTitle(),result.decision);
                         if (found == null){
diff --git a/TMessagesProj/src/main/java/org/decisiongram/service/MessagesManagerImpl.java b/TMessagesProj/src/main/java/org/decisiongram/service/MessagesManagerImpl.java
index e7e19983b..c631f0733 100644
--- a/TMessagesProj/src/main/java/org/decisiongram/service/MessagesManagerImpl.java
+++ b/TMessagesProj/src/main/java/org/decisiongram/service/MessagesManagerImpl.java
@@ -394,6 +394,8 @@ public long getMessageGroupId(long dialog_id) {
             Decision decision = decisiongramDAO.getDecision(decisionTitle, currentChat);
             if (decision == null)
                 throw new MessageParseException("Decision not found for title["+decisionTitle+"]  currentChat["+currentChat+"]");
+            if (!decision.isOpen())
+                throw new MessageParseException("Vote not allowed for closed decision["+decision+"]");
             List<Vote> voteList = new ArrayList<>();
             while (strTok.hasMoreTokens()) {
                 String voteValue = strTok.nextToken();
diff --git a/TMessagesProj/src/main/java/org/decisiongram/ui/EditOptionsFragment.java b/TMessagesProj/src/main/java/org/decisiongram/ui/EditOptionsFragment.java
index 98b9040e9..948544ffc 100644
--- a/TMessagesProj/src/main/java/org/decisiongram/ui/EditOptionsFragment.java
+++ b/TMessagesProj/src/main/java/org/decisiongram/ui/EditOptionsFragment.java
@@ -153,16 +153,19 @@ public void onClick(DialogInterface dialog, int which) {
 
 
     private void saveDecision(List<Option> newOptions, List<Option> deleteOptions) {
-        if (deleteOptions.size() > 0)
-            decisiongramService.notifyDeleteOptions(decision, deleteOptions);
-
-
-        if (newOptions.size() > 0)
-            decisiongramService.notifyNewOptions(decision, newOptions);
-
-        Toast.makeText(getParentActivity(), R.string.decisionSaved, Toast.LENGTH_LONG).show();
+        try {
+            if (deleteOptions.size() > 0)
+                decisiongramService.notifyDeleteOptions(decision, deleteOptions);
+
+            if (newOptions.size() > 0)
+                decisiongramService.notifyNewOptions(decision, newOptions);
+
+            Toast.makeText(getParentActivity(), R.string.decisionSaved, Toast.LENGTH_LONG).show();
+        } catch (DecisiongramException e) {
+            Log.e(LOG_TAG, e.getMessage(), e);
+            Toast.makeText(getParentActivity(), e.getMessage(), Toast.LENGTH_LONG).show();
+        }
         EditOptionsFragment.this.finishFragment();
-        return;
     }
 
 }
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/decisiongram/ui/VotesManagerTabsFragment.java b/TMessagesProj/src/main/java/org/decisiongram/ui/VotesManagerTabsFragment.java
index 595fba294..a8c903cb2 100644
--- a/TMessagesProj/src/main/java/org/decisiongram/ui/VotesManagerTabsFragment.java
+++ b/TMessagesProj/src/main/java/org/decisiongram/ui/VotesManagerTabsFragment.java
@@ -40,6 +40,7 @@
 
 import org.decisiongram.R;
 import org.decisiongram.adapter.VoteListAdapter;
+import org.decisiongram.data.DecisiongramException;
 import org.decisiongram.data.Option;
 import org.decisiongram.data.UsersDecisionVotes;
 import org.decisiongram.data.Vote;
@@ -246,7 +247,13 @@ public void onClick(View view) {
                     votes2Save = voteListAdapter.getNewVotesValues();
 
                 Log.i(LOG_TAG, "saving votes[" + votes2Save + "]");
-                decisiongramService.notifyVote(usersDecisionVotes.getDecision(), votes2Save);
+                try {
+                    decisiongramService.notifyVote(usersDecisionVotes.getDecision(), votes2Save);
+                } catch (DecisiongramException e) {
+                    Log.e(LOG_TAG,e.getMessage(),e);
+                    Toast.makeText(context,e.getMessage(),Toast.LENGTH_LONG).show();
+                    return;
+                }
                 btnSaveOption.setVisibility(View.GONE);
                 voteUnsaved = false;
 
@@ -284,6 +291,9 @@ protected void updateView() {
             // force tabbed pane to rebuild itself
             viewPager.setAdapter(pagerAdapter);
         } else {
+            if (voteListAdapter == null){
+                voteListAdapter = new VoteListAdapter(parentFragment, usersDecisionVotes.getDecision().isOpen());
+            }
             // set new sorted  votes in the voteListAdapter
             voteListAdapter.setData(usersDecisionVotes, currentUserId, voteListAdapter.getNewVotesMap());
             voteListAdapter.setEditable(usersDecisionVotes.getDecision().isOpen());
diff --git a/TMessagesProj/src/main/res/values-it/strings.xml b/TMessagesProj/src/main/res/values-it/strings.xml
index 2ef9bd0cd..5f4f703f7 100644
--- a/TMessagesProj/src/main/res/values-it/strings.xml
+++ b/TMessagesProj/src/main/res/values-it/strings.xml
@@ -1145,6 +1145,7 @@
     <string name="decisionReopened">Decisione riaperta</string>
     <string name="decisionDeleted">Decisione cancellata</string>
     <string name="decisionNotFound">Decisione %1$s not trovata, potrebbe essere stata cancellata.</string>
+    <string name="decisionIsClosed">La decisione %1$s è chiusa, operazione non permessa.</string>
     <string name="title">Titolo</string>
     <string name="notes">Note</string>
     <string name="deleteDecisionQuestion">Sei sicuro di cancellare questa decisione ? Verrà rimossa definitivamente per tutti gli utenti del gruppo non solo per te.\nContinuare ?</string>
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index e9abc85f7..0d8bd0395 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -1148,6 +1148,7 @@
     <string name="decisionReopened">Decision reopened</string>
     <string name="decisionDeleted">Decision deleted</string>
     <string name="decisionNotFound">Decision %1$s not found, it may has been deleted.</string>
+    <string name="decisionIsClosed">Decision %1$s is closed, operation not allowed.</string>
     <string name="title">Title</string>
     <string name="notes">Notes</string>
     <string name="deleteDecisionQuestion">Are you sure you want to delete this decision ?
@@ -1174,7 +1175,7 @@
     <string name="voteNotSavedPleaseSave">There are unsaved votes, please save before close the decision.</string>
     <string name="noVotePresentForClosingDecision">No one vote for this decision.
         \nAre you sure to close it ?</string>
-    <string name="moreThanOneWinningOptionForClosingDecision">There are %1$d options that receive with the maximum positive vote count.
+    <string name="moreThanOneWinningOptionForClosingDecision">There are %1$d options that with the maximum positive vote count.
         \nAre you sure to close this decision ?</string>
     <string name="closeDecisionQuestionPrefixSingle">Only %1$d user out of %2$d voted yet.</string>
     <string name="closeDecisionQuestionPrefixMulti">Only %1$d users out of %2$d voted yet.</string>
@@ -1212,6 +1213,7 @@
     <string name="tutorialString">Press here for managing group decision\n___________________\n\nYou can crate a new decision or option just by tapping on a message</string>
     <string name="gotIt">Got It</string>
     <string name="editableOnlyByDecisionOwner">Editable only by the decision admin.</string>
+
     <!-- END of Decisiongram text -->
 
 
