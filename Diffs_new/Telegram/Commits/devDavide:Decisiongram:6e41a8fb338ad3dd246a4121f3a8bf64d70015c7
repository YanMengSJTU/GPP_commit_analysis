diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java
index b218fae8a..6553734ef 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAO.java
@@ -122,11 +122,11 @@
      */
     class WinningOption{
         public final int voteCount;
-        public final Option option;
+        public final List<Option> options;
 
-        public WinningOption(int voteCount, Option option) {
+        public WinningOption(int voteCount, List<Option> options) {
             this.voteCount = voteCount;
-            this.option = option;
+            this.options = options;
         }
     }
 
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
index 57dc6af81..cb4c84186 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramDAODBImpl.java
@@ -124,25 +124,42 @@ public void delete(Decision decision) {
     @Override
     public WinningOption getWinningOption(Decision decision) {
         SQLiteDatabase db = helper.getReadableDatabase();
-        String voteCountFieldName= "max_vote_count";
+        String voteCountFieldName= "vote_count";
         Cursor c = null;
         try {
-            c =db.rawQuery("SELECT "+PGSqlLiteHelper.T_TextOption.cloumns(null)+" , max(vote_count) as "+voteCountFieldName+" FROM (" +
-                            "SELECT "+PGSqlLiteHelper.T_TextOption.cloumns("o")+",  count (*) as vote_count " +
-                            "FROM decision d inner join text_option o " +
-                            "on d." + PGSqlLiteHelper.T_Decision.ID + " = o." + PGSqlLiteHelper.T_TextOption.FK_DECISION + " " +
-                            "inner join vote v " +
-                            "on o." + PGSqlLiteHelper.T_TextOption.ID + " = v." + PGSqlLiteHelper.T_Vote.FK_OPTION + " " +
-                            "where d." + PGSqlLiteHelper.T_Decision.ID + " = ? " +
-                            "and "+ PGSqlLiteHelper.T_Vote.VOTE + " = ? " +
-                            "group by " + PGSqlLiteHelper.T_Vote.FK_OPTION+
+            c =db.rawQuery("SELECT "+PGSqlLiteHelper.T_TextOption.cloumns("o")+",  count (*) as "+voteCountFieldName+
+                            " FROM decision d inner join text_option o " +
+                            " on d." + PGSqlLiteHelper.T_Decision.ID + " = o." + PGSqlLiteHelper.T_TextOption.FK_DECISION + " " +
+                            " inner join vote v " +
+                            " on o." + PGSqlLiteHelper.T_TextOption.ID + " = v." + PGSqlLiteHelper.T_Vote.FK_OPTION + " " +
+                            " where d." + PGSqlLiteHelper.T_Decision.ID + " = ? " +
+                            " and "+ PGSqlLiteHelper.T_Vote.VOTE + " = ? " +
+                            " group by " + PGSqlLiteHelper.T_Vote.FK_OPTION +
+                            " having vote_count = (" +
+                              " Select max(votes) FROM (\n" +
+                                 " SELECT count (*) as  votes" +
+                                " FROM decision d inner join text_option o " +
+                                " on d." + PGSqlLiteHelper.T_Decision.ID + " = o." + PGSqlLiteHelper.T_TextOption.FK_DECISION + " " +
+                                " inner join vote v " +
+                                " on o." + PGSqlLiteHelper.T_TextOption.ID + " = v." + PGSqlLiteHelper.T_Vote.FK_OPTION + " " +
+                                " where d." + PGSqlLiteHelper.T_Decision.ID + " = ? " +
+                                " and "+ PGSqlLiteHelper.T_Vote.VOTE + " = ? " +
+                                " group by " + PGSqlLiteHelper.T_Vote.FK_OPTION +
+                                ") " +
                             ")",
-                    new String[]{Long.toString(decision.getId()), PGSqlLiteHelper.toString(true)});
+                    new String[]{Long.toString(decision.getId()), PGSqlLiteHelper.toString(true),
+                            Long.toString(decision.getId()), PGSqlLiteHelper.toString(true)});
             if (!c.moveToFirst())
                 return null;
-            else
-              return new WinningOption(c.getInt(c.getColumnIndex(voteCountFieldName)),
-                      helper.TEXT_OPTION_MAPPER.from(c));
+            else {
+                List<Option> options = new ArrayList<>();
+                int voteCount = c.getInt(c.getColumnIndex(voteCountFieldName));
+                while (!c.isAfterLast()) {
+                    options.add(helper.TEXT_OPTION_MAPPER.from(c));
+                    c.moveToNext();
+                }
+                return new WinningOption(voteCount,options);
+            }
         } finally {
             if (db != null)
                 db.close();
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
index a5d622107..cd58807d2 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManager.java
@@ -123,11 +123,11 @@ public String getDescription() {
     /**
      * build a message for notifying that the passed decision is now closed and is no more possible to vote
      * @param decision
-     * @param  winningOption the option that received more votes so far
+     * @param  winningOptions the options that received more votes so far
      * @param voteCount
      * @return the message ready to be sent
      */
-    String buildCloseDecision(Decision decision, Option winningOption, int voteCount);
+    String buildCloseDecision(Decision decision, List<Option> winningOptions, int voteCount);
 
     /**
      * build a message for notifying that the passed decision is has been reopened and is no more possible to vote
@@ -183,11 +183,11 @@ public NewDecisionData(@NonNull Decision decision, @NonNull List<Option> optionL
      */
     class ClosedDecisionDate {
         final Decision decision;
-        final Option winningOption;
+        final List<Option> winningOptions;
 
-        public ClosedDecisionDate(Decision decision, Option winningOption) {
+        public ClosedDecisionDate(Decision decision, List<Option> winningOptions) {
             this.decision = decision;
-            this.winningOption = winningOption;
+            this.winningOptions = winningOptions;
         }
     }
 
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
index 8631f5b9a..b898922f1 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramMessagesManagerImpl.java
@@ -151,18 +151,25 @@ public String buildRemindMessage(String userAsString, Decision decision) {
     }
 
     @Override
-    public String buildCloseDecision(Decision decision, Option winningOption, int voteCount) {
+    public String buildCloseDecision(Decision decision, List<Option> winningOptions, int voteCount) {
         StringBuilder body = new StringBuilder();
         body.append(getResString(R.string.tmsg_CloseDecisionP1));
         body.append(' ');
         body.append(format(decision));
         body.append(getResString(R.string.tmsg_CloseDecisionP2));
         body.append(' ');
+        body.append(getResString(winningOptions.size() == 1 ? R.string.tmsg_CloseDecisionP2Single : R.string.tmsg_CloseDecisionP2Multi));
+        body.append(' ');
         if (voteCount == 0)
             body.append(format(getResString(R.string.tmsg_CloseDecisionNoOptionDesc)));
-        else
-            body.append(format(winningOption));
-        body.append(' ');
+        else {
+            for (Option o : winningOptions) {
+                body.append(NEW_LINE);
+                body.append(BULLET_LIST_EMOJI);
+                body.append(format(o));
+            }
+        }
+        body.append(NEW_LINE);
         body.append(getResString(R.string.tmsg_CloseDecisionP3));
         body.append(' ');
         body.append(voteCount);
@@ -399,28 +406,32 @@ public NewDecisionData getNewDecision(String msg, long currentChat, int userId,
     @Override
     public ClosedDecisionDate getCloseDecision(String msg, long currentChat) throws PollgramParseException {
         Decision decision;
-        Option winningOption;
+        List<Option> optionList;
         try {
             StringTokenizer strTok = new EscapeStringTokenizer(msg);
             strTok.nextToken();//skip this token
             String title = strTok.nextToken();
-            strTok.nextToken();//skip this token
-            String optionTitle = strTok.nextToken();//skip this token
-
-            String longDescription = strTok.nextToken();
             decision = pollgramDAO.getDecision(title, currentChat);
             if (decision == null)
                 throw new PollgramParseException("Decision not found for title  [" + title + "]");
-            winningOption = pollgramDAO.getOption(optionTitle, decision);
-            if (winningOption == null)
-                throw new PollgramParseException("winningOption not found for decision  [" + title + "]");
+
+            optionList = new ArrayList<>();
+            while (strTok.hasMoreTokens()){
+                strTok.nextToken();//skip this token
+                if (!strTok.hasMoreTokens())
+                    break;
+                String optTitle = strTok.nextToken();
+                Option to = pollgramDAO.getOption(optTitle,decision);
+                if (to != null)
+                    optionList.add(to);
+            }
 
         } catch (NoSuchElementException e) {
             Log.e(LOG_TAG, "Error parsing message [" + msg + "]", e);
             throw new PollgramParseException("Token not found", e);
         }
-        Log.d(LOG_TAG, "getNewDecision decision[" + decision + "] winningOption[" + winningOption + "]");
-        return new ClosedDecisionDate(decision, winningOption);
+        Log.d(LOG_TAG, "getNewDecision decision[" + decision + "] winningOption[" + optionList + "]");
+        return new ClosedDecisionDate(decision, optionList);
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
index 76bf54387..064fe8948 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/service/PollgramServiceImpl.java
@@ -111,7 +111,7 @@ public void notifyClose(Decision decision) {
         decision.setOpen(false);
         decision = pollgramDAO.save(decision);
         PollgramDAO.WinningOption winningOption = pollgramDAO.getWinningOption(decision);
-        String message = messageManager.buildCloseDecision(decision, winningOption.option, winningOption.voteCount);
+        String message = messageManager.buildCloseDecision(decision, winningOption.options, winningOption.voteCount);
         sendMessage(decision.getChatId(), message);
     }
 
diff --git a/TMessagesProj/src/main/res/values-it/strings.xml b/TMessagesProj/src/main/res/values-it/strings.xml
index 526373a4e..eca64f28d 100644
--- a/TMessagesProj/src/main/res/values-it/strings.xml
+++ b/TMessagesProj/src/main/res/values-it/strings.xml
@@ -1058,7 +1058,9 @@
 
     <string name="tmsg_CloseDecisionP1">La decisione</string>
     <!-- between Prefix and Suffix goes the decision title -->
-    <string name="tmsg_CloseDecisionP2">, è stata chiusa. L\'opzione che ha ricevuto più voti è</string>
+    <string name="tmsg_CloseDecisionP2">, è stata chiusa.</string>
+    <string name="tmsg_CloseDecisionP2Single">L\'opzione che ha ricevuto più voti è :</string>
+    <string name="tmsg_CloseDecisionP2Multi">Le opzioni che hanno ricevuto più voti sono :</string>
     <!--after P2 goes the winning option title -->
     <string name="tmsg_CloseDecisionNoOptionDesc">nessuna opzione</string>
     <string name="tmsg_CloseDecisionP3">con</string>
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index b211953f9..f312c92e2 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -1054,7 +1054,9 @@
 
     <string name="tmsg_CloseDecisionP1">Decision</string>
     <!-- between Prefix and Suffix goes the decision title -->
-    <string name="tmsg_CloseDecisionP2">, has been closed. The option that receive more vote is</string>
+    <string name="tmsg_CloseDecisionP2">, has been closed.</string>
+    <string name="tmsg_CloseDecisionP2Single">The option that receive more vote is:</string>
+    <string name="tmsg_CloseDecisionP2Multi">The options that receive more vote are:</string>
     <!--after P2 goes the winning option title -->
     <string name="tmsg_CloseDecisionNoOptionDesc">no option</string>
     <string name="tmsg_CloseDecisionP3">with</string>
diff --git a/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java b/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java
index 93092b8d5..5b7cb664b 100644
--- a/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java
+++ b/TMessagesProj/src/test/java/org/pollgram/decision/service/MessagesManagerTest.java
@@ -18,6 +18,7 @@
 import java.security.InvalidParameterException;
 import java.text.ParseException;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.Date;
 import java.util.HashMap;
@@ -165,20 +166,31 @@ private void assertNewDecision(Decision decision, List<Option> options, String m
     }
 
     @Test
-    public void testCloseDecision() throws PollgramParseException {
-        Option winningOption = dao.getOptions(decision).get(0);
+    public void testCloseDecisionMultipleWinningOptions() throws PollgramParseException {
+        List<Option> winningOptions = dao.getOptions(decision);
         int voteCount = 5;
-        String message = messageManager.buildCloseDecision(decision, winningOption, voteCount);
+        String message = messageManager.buildCloseDecision(decision, winningOptions, voteCount);
         Assert.assertEquals(messageManager.getMessageType(message), PollgramMessagesManager.MessageType.CLOSE_DECISION);
 
-        assertCloseDecision(decision, winningOption, message);
-        assertCloseDecision(decision, winningOption, messageManager.reformatMessage(message));
+        assertCloseDecision(decision, winningOptions, message);
+        assertCloseDecision(decision, winningOptions, messageManager.reformatMessage(message));
     }
 
-    private void assertCloseDecision(Decision decision, Option winningOption, String message) throws PollgramParseException {
+    @Test
+    public void testCloseDecisionSingleWinningOptions() throws PollgramParseException {
+        List<Option> winningOptions = Arrays.asList(dao.getOptions(decision).get(0));
+        int voteCount = 5;
+        String message = messageManager.buildCloseDecision(decision, winningOptions, voteCount);
+        Assert.assertEquals(messageManager.getMessageType(message), PollgramMessagesManager.MessageType.CLOSE_DECISION);
+
+        assertCloseDecision(decision, winningOptions, message);
+        assertCloseDecision(decision, winningOptions, messageManager.reformatMessage(message));
+    }
+
+    private void assertCloseDecision(Decision decision, List<Option> winningOption, String message) throws PollgramParseException {
         PollgramMessagesManager.ClosedDecisionDate result = messageManager.getCloseDecision(message, chat.id);
         Assert.assertEquals(decision, result.decision);
-        Assert.assertEquals(winningOption, result.winningOption);
+        Assert.assertEquals(winningOption, result.winningOptions);
     }
 
     @Test
diff --git a/TMessagesProj/src/test/java/org/pollgram/decision/service/PollgramDAOTestImpl.java b/TMessagesProj/src/test/java/org/pollgram/decision/service/PollgramDAOTestImpl.java
index 251e414f6..922cf56f0 100644
--- a/TMessagesProj/src/test/java/org/pollgram/decision/service/PollgramDAOTestImpl.java
+++ b/TMessagesProj/src/test/java/org/pollgram/decision/service/PollgramDAOTestImpl.java
@@ -246,9 +246,6 @@ public ParsedMessage setMessageAsParsed(long groupChatId, int messageId, boolean
     public WinningOption getWinningOption(Decision decision) {
         List<Option> options = getOptions(decision);
         int max = 0;
-        for (Option o : options) {
-            return new WinningOption(max, o);
-        }
-        return  null;
+        return new WinningOption(max, options);
     }
 }
