diff --git a/TMessagesProj/proguard-rules.txt b/TMessagesProj/proguard-rules.txt
index 51f4944f1..b07604458 100644
--- a/TMessagesProj/proguard-rules.txt
+++ b/TMessagesProj/proguard-rules.txt
@@ -27,6 +27,18 @@
 
 -keep class org.telegram.** { *; }
 -keep class com.aniways.** { *; }
+-keep public class com.google.gson
+##---------------Begin: proguard configuration for Gson  ----------
+# Gson uses generic type information stored in a class file when working with fields. Proguard
+# removes such information by default, so configure it to keep all of it.
+-keepattributes Signature
+
+# Gson specific classes
+-keep class sun.misc.Unsafe { *; }
+#-keep class com.google.gson.stream.** { *; }
+
+# Application classes that will be serialized/deserialized over Gson
+# -keep class mypersonalclass.data.model.** { *; }
 
 -keep class android.support.v4.** { *; }
 -keep interface android.support.v4.** { *; }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
index 69425886b..35800b9c9 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
@@ -24,7 +24,6 @@
 import android.os.Build;
 import android.os.Handler;
 import android.os.PowerManager;
-import android.support.multidex.MultiDex;
 
 import com.aniways.Aniways;
 import com.aniways.Utils;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
index 6a05b7cd7..c734d85f1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
@@ -1333,7 +1333,7 @@ public void run() {
                                     Intercom.client().registerIdentifiedUser(
                                             new Registration()
                                                     .withUserId(requestPhone)
-                                                    .withUserAttributes(getCurrentUserAttributes()));
+                                                    .withUserAttributes(getCurrentUserAttributes(requestPhone)));
                                 } else {
                                     lastError = error.text;
 
@@ -2325,7 +2325,7 @@ public void run() {
                                     Intercom.client().registerIdentifiedUser(
                                             new Registration()
                                                     .withUserId(requestPhone)
-                                                    .withUserAttributes(getCurrentUserAttributes()));
+                                                    .withUserAttributes(getCurrentUserAttributes(requestPhone)));
 
                                 } else {
                                     if (error.text.contains("PHONE_NUMBER_INVALID")) {
@@ -2418,12 +2418,13 @@ public void restoreStateParams(Bundle bundle) {
         }
     }
 
-    private Map<String, Object> getCurrentUserAttributes() {
+    private Map<String, Object> getCurrentUserAttributes(String requestPhone) {
         Map<String,Object> userAttributes = new HashMap<>();
 
         userAttributes.put("firstName", UserConfig.getCurrentUser().first_name);
         userAttributes.put("lastName", UserConfig.getCurrentUser().last_name);
         userAttributes.put("userName", UserConfig.getCurrentUser().username);
+        userAttributes.put("phone", requestPhone);
 
         return userAttributes;
     }
