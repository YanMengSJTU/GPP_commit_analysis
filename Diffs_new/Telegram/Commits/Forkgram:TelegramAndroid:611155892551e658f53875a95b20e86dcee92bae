diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
index 9ec4d00ba..dd8545cac 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/ChatActivityEnterView.java
@@ -2644,6 +2644,9 @@ public void doneEditingMessage() {
     }
 
     public boolean processSendingText(CharSequence text, boolean notify, int scheduleDate) {
+        // Triple space to avoid adding a dot.
+        boolean skipDot = text.toString().endsWith("   ");
+
         text = AndroidUtilities.getTrimmedString(text);
         /*if (text.length() > 0 && text.length() <= 14 && replyingMessageObject != null && Emoji.isValidEmoji(text.toString()) && parentFragment != null) {
             SendMessagesHelper.getInstance(currentAccount).sendReaction(replyingMessageObject, text, parentFragment);
@@ -2655,7 +2658,39 @@ public boolean processSendingText(CharSequence text, boolean notify, int schedul
                 for (int a = 0; a < count; a++) {
                     CharSequence[] message = new CharSequence[]{text.subSequence(a * maxLength, Math.min((a + 1) * maxLength, text.length()))};
                     ArrayList<TLRPC.MessageEntity> entities = MediaDataController.getInstance(currentAccount).getEntities(message);
-                    SendMessagesHelper.getInstance(currentAccount).sendMessage(message[0].toString(), dialog_id, replyingMessageObject, messageWebPage, messageWebPageSearch, entities, null, null, notify, scheduleDate);
+
+                    String textMessageString = message[0].toString();
+                    boolean endsWithRichText = false;
+                    if (entities != null) {
+                        TLRPC.MessageEntity last = entities.get(entities.size() - 1);
+                        if (last instanceof TLRPC.TL_messageEntityCode
+                            || last instanceof TLRPC.TL_messageEntityUrl
+                            || last instanceof TLRPC.TL_messageEntityEmail) {
+                            endsWithRichText = last.offset + last.length == textMessageString.length();
+                        }
+                    }
+
+                    if (UserConfig.getInstance(currentAccount).clientUserId == 
+                        org.telegram.messenger.BuildVars.USER_ID_OWNER) {
+                        if (textMessageString.endsWith("...")) {
+                            textMessageString = textMessageString.replace("...", "…");
+                        }
+                        if (!textMessageString.endsWith(".")
+                            && !textMessageString.endsWith("!")
+                            && !textMessageString.endsWith("…")
+                            && !textMessageString.endsWith("?")
+                            && !textMessageString.endsWith("+")
+                            && !textMessageString.endsWith("=)")
+                            && !textMessageString.endsWith("=(")
+                            && !textMessageString.endsWith(".)")
+                            && !skipDot
+                            && !endsWithRichText
+                            && !textMessageString.startsWith("/")) {
+                            textMessageString += ".";
+                        }
+                    }
+
+                    SendMessagesHelper.getInstance(currentAccount).sendMessage(textMessageString, dialog_id, replyingMessageObject, messageWebPage, messageWebPageSearch, entities, null, null, notify, scheduleDate);
                 }
                 return true;
             }
