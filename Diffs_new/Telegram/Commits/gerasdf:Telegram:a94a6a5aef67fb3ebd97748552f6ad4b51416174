diff --git a/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java b/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
index 585be8028..21687f73c 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ContactsController.java
@@ -487,7 +487,6 @@ public void performSyncPhoneBook(final HashMap<Integer, Contact> contactHashMap,
         if (PrivacyPlus) {
             // Force loading contacts from server
             loadContacts(false, true);
-            return;
         }
 
 
@@ -722,59 +721,64 @@ public void run() {
 //                            }
                         }
                         final int count = (int)Math.ceil(toImport.size() / 500.0f);
-                        for (int a = 0; a < count; a++) {
-                            ArrayList<TLRPC.TL_inputPhoneContact> finalToImport = new ArrayList<>();
-                            finalToImport.addAll(toImport.subList(a * 500, Math.min((a + 1) * 500, toImport.size())));
-                            TLRPC.TL_contacts_importContacts req = new TLRPC.TL_contacts_importContacts();
-                            req.contacts = finalToImport;
-                            req.replace = false;
-                            final boolean isLastQuery = a == count - 1;
-                            ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-                                @Override
-                                public void run(TLObject response, TLRPC.TL_error error) {
-                                    if (error == null) {
-                                        FileLog.e("tmessages", "contacts imported");
-                                        if (isLastQuery && !contactsMap.isEmpty()) {
-                                            MessagesStorage.getInstance().putCachedPhoneBook(contactsMap);
-                                        }
-                                        TLRPC.TL_contacts_importedContacts res = (TLRPC.TL_contacts_importedContacts)response;
-                                        if (BuildVars.DEBUG_VERSION) {
-//                                            for (TLRPC.User user : res.users) {
-//                                                FileLog.e("tmessages", "received user " + user.first_name + " " + user.last_name + " " + user.phone);
-//                                            }
-                                        }
-                                        MessagesStorage.getInstance().putUsersAndChats(res.users, null, true, true);
-                                        ArrayList<TLRPC.TL_contact> cArr = new ArrayList<>();
-                                        for (TLRPC.TL_importedContact c : res.imported) {
-                                            TLRPC.TL_contact contact = new TLRPC.TL_contact();
-                                            contact.user_id = c.user_id;
-                                            cArr.add(contact);
+                        if (!PrivacyPlus) {
+                            for (int a = 0; a < count; a++) {
+                                ArrayList<TLRPC.TL_inputPhoneContact> finalToImport = new ArrayList<>();
+                                finalToImport.addAll(toImport.subList(a * 500, Math.min((a + 1) * 500, toImport.size())));
+                                TLRPC.TL_contacts_importContacts req = new TLRPC.TL_contacts_importContacts();
+                                req.contacts = finalToImport;
+                                req.replace = false;
+                                final boolean isLastQuery = a == count - 1;
+                                ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
+                                    @Override
+                                    public void run(TLObject response, TLRPC.TL_error error) {
+                                        if (error == null) {
+                                            FileLog.e("tmessages", "contacts imported");
+                                            if (isLastQuery && !contactsMap.isEmpty()) {
+                                                MessagesStorage.getInstance().putCachedPhoneBook(contactsMap);
+                                            }
+                                            TLRPC.TL_contacts_importedContacts res = (TLRPC.TL_contacts_importedContacts) response;
+                                            if (BuildVars.DEBUG_VERSION) {
+                                                //                                            for (TLRPC.User user : res.users) {
+                                                //                                                FileLog.e("tmessages", "received user " + user.first_name + " " + user.last_name + " " + user.phone);
+                                                //                                            }
+                                            }
+                                            MessagesStorage.getInstance().putUsersAndChats(res.users, null, true, true);
+                                            ArrayList<TLRPC.TL_contact> cArr = new ArrayList<>();
+                                            for (TLRPC.TL_importedContact c : res.imported) {
+                                                TLRPC.TL_contact contact = new TLRPC.TL_contact();
+                                                contact.user_id = c.user_id;
+                                                cArr.add(contact);
+                                            }
+                                            processLoadedContacts(cArr, res.users, 2);
+                                        } else {
+                                            FileLog.e("tmessages", "import contacts error " + error.text);
                                         }
-                                        processLoadedContacts(cArr, res.users, 2);
-                                    } else {
-                                        FileLog.e("tmessages", "import contacts error " + error.text);
-                                    }
-                                    if (isLastQuery) {
-                                        Utilities.stageQueue.postRunnable(new Runnable() {
-                                            @Override
-                                            public void run() {
-                                                contactsBookSPhones = contactsBookShort;
-                                                contactsBook = contactsMap;
-                                                contactsSyncInProgress = false;
-                                                contactsBookLoaded = true;
-                                                if (first) {
-                                                    contactsLoaded = true;
-                                                }
-                                                if (!delayedContactsUpdate.isEmpty() && contactsLoaded && contactsBookLoaded) {
-                                                    applyContactsUpdates(delayedContactsUpdate, null, null, null);
-                                                    delayedContactsUpdate.clear();
+                                        if (isLastQuery) {
+                                            Utilities.stageQueue.postRunnable(new Runnable() {
+                                                @Override
+                                                public void run() {
+                                                    contactsBookSPhones = contactsBookShort;
+                                                    contactsBook = contactsMap;
+                                                    contactsSyncInProgress = false;
+                                                    contactsBookLoaded = true;
+                                                    if (first) {
+                                                        contactsLoaded = true;
+                                                    }
+                                                    if (!delayedContactsUpdate.isEmpty() && contactsLoaded && contactsBookLoaded) {
+                                                        applyContactsUpdates(delayedContactsUpdate, null, null, null);
+                                                        delayedContactsUpdate.clear();
+                                                    }
                                                 }
-                                            }
-                                        });
+                                            });
+                                        }
                                     }
-                                }
-                            }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassCanCompress);
-                        }
+                                }, true, RPCRequest.RPCRequestClassGeneric | RPCRequest.RPCRequestClassFailOnServerErrors | RPCRequest.RPCRequestClassCanCompress);
+                            }
+                        } else {
+                            if (!contactsMap.isEmpty()) {
+                                MessagesStorage.getInstance().putCachedPhoneBook(contactsMap);
+                            }                        }
                     } else {
                         Utilities.stageQueue.postRunnable(new Runnable() {
                             @Override
