diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionContext.java b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionContext.java
new file mode 100644
index 000000000..4abe811f4
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionContext.java
@@ -0,0 +1,109 @@
+/*
+ * This is the source code of Telegram for Android v. 1.4.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.messenger;
+
+import java.util.ArrayList;
+
+import jawnae.pyronet.PyroClientAdapter;
+
+public class ConnectionContext extends PyroClientAdapter {
+
+    public static final boolean isDebugSession = false;
+    private long sessionId;
+
+    private ArrayList<Long> processedMessageIds = new ArrayList<Long>();
+    private ArrayList<Long> messagesIdsForConfirmation = new ArrayList<Long>();
+    private ArrayList<Long> processedSessionChanges = new ArrayList<Long>();
+    private int nextSeqNo = 0;
+
+    public ConnectionContext() {
+        genereateNewSessionId();
+    }
+
+    public void recreateSession() {
+        processedMessageIds.clear();
+        messagesIdsForConfirmation.clear();
+        processedSessionChanges.clear();
+        nextSeqNo = 0;
+
+        genereateNewSessionId();
+    }
+
+    private void genereateNewSessionId() {
+        long newSessionId = Utilities.random.nextLong();
+        sessionId = isDebugSession ? (0xabcd000000000000L | (newSessionId & 0x0000ffffffffffffL)) : newSessionId;
+    }
+
+    public long getSissionId() {
+        return sessionId;
+    }
+
+    public int generateMessageSeqNo(boolean increment) {
+        int value = nextSeqNo;
+        if (increment) {
+            nextSeqNo++;
+        }
+        return value * 2 + (increment ? 1 : 0);
+    }
+
+    boolean isMessageIdProcessed(long messageId) {
+        return processedMessageIds.contains(messageId);
+    }
+
+    public void addProcessedMessageId(long messageId) {
+        if (processedMessageIds.size() > 1000 + 224) {
+            for (int a = 0; a < Math.min(processedMessageIds.size(), 225); a++) {
+                processedMessageIds.remove(0);
+            }
+        }
+        processedMessageIds.add(messageId);
+    }
+
+    public boolean hasMessagesToConfirm() {
+        return !messagesIdsForConfirmation.isEmpty();
+    }
+
+    public void addMessageToConfirm(long messageId) {
+        messagesIdsForConfirmation.add(messageId);
+    }
+
+    public NetworkMessage generateConfirmationRequest() {
+        NetworkMessage networkMessage = null;
+
+        if (!messagesIdsForConfirmation.isEmpty()) {
+            TLRPC.TL_msgs_ack msgAck = new TLRPC.TL_msgs_ack();
+            msgAck.msg_ids = new ArrayList<Long>();
+            msgAck.msg_ids.addAll(messagesIdsForConfirmation);
+
+            ByteBufferDesc os = new ByteBufferDesc(true);
+            msgAck.serializeToStream(os);
+
+            networkMessage = new NetworkMessage();
+            networkMessage.protoMessage = new TLRPC.TL_protoMessage();
+
+            networkMessage.protoMessage.msg_id = ConnectionsManager.getInstance().generateMessageId();
+            networkMessage.protoMessage.seqno = generateMessageSeqNo(false);
+
+            networkMessage.protoMessage.bytes = os.length();
+            networkMessage.protoMessage.body = msgAck;
+
+            messagesIdsForConfirmation.clear();
+        }
+
+        return networkMessage;
+    }
+
+    public boolean isSessionProcessed(long sessionId) {
+        return processedSessionChanges.contains(sessionId);
+    }
+
+    public void addProcessedSession(long sessionId) {
+        processedSessionChanges.add(sessionId);
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
index e5d03df77..1e3d8ede2 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
@@ -31,13 +31,12 @@
 
 public class ConnectionsManager implements Action.ActionDelegate, TcpConnection.TcpConnectionDelegate {
     private HashMap<Integer, Datacenter> datacenters = new HashMap<Integer, Datacenter>();
-    private HashMap<Long, ArrayList<Long>> processedMessageIdsSet = new HashMap<Long, ArrayList<Long>>();
-    private HashMap<Long, Integer> nextSeqNoInSession = new HashMap<Long, Integer>();
+
     private ArrayList<Long> sessionsToDestroy = new ArrayList<Long>();
     private ArrayList<Long> destroyingSessions = new ArrayList<Long>();
     private HashMap<Integer, ArrayList<Long>> quickAckIdToRequestIds = new HashMap<Integer, ArrayList<Long>>();
-    private HashMap<Long, ArrayList<Long>> messagesIdsForConfirmation = new HashMap<Long, ArrayList<Long>>();
-    private HashMap<Long, ArrayList<Long>> processedSessionChanges = new HashMap<Long, ArrayList<Long>>();
+
+
     private HashMap<Long, Integer> pingIdToDate = new HashMap<Long, Integer>();
     private ConcurrentHashMap<Integer, ArrayList<Long>> requestsByGuids = new ConcurrentHashMap<Integer, ArrayList<Long>>(100, 1.0f, 2);
     private ConcurrentHashMap<Long, Integer> requestsByClass = new ConcurrentHashMap<Long, Integer>(100, 1.0f, 2);
@@ -57,7 +56,6 @@
     public int timeDifference = 0;
     public int currentPingTime;
     private int lastDestroySessionRequestTime;
-    public static final boolean isDebugSession = false;
     private boolean updatingDcSettings = false;
     private int updatingDcStartTime = 0;
     private int lastDcUpdateTime = 0;
@@ -327,10 +325,6 @@ public void run() {
 
                 fillDatacenters();
 
-                for (Datacenter datacenter : datacenters.values()) {
-                    datacenter.authSessionId = getNewSessionId();
-                }
-
                 if (datacenters.size() != 0 && currentDatacenterId == 0) {
                     currentDatacenterId = 1;
                     saveSession();
@@ -350,7 +344,7 @@ private void fillDatacenters() {
 
                 datacenter = new Datacenter();
                 datacenter.datacenterId = 2;
-                datacenter.addAddressAndPort("109.239.131.193", 443);
+                datacenter.addAddressAndPort("149.154.167.50", 443);
                 datacenters.put(datacenter.datacenterId, datacenter);
 
                 datacenter = new Datacenter();
@@ -375,7 +369,7 @@ private void fillDatacenters() {
 
                 datacenter = new Datacenter();
                 datacenter.datacenterId = 2;
-                datacenter.addAddressAndPort("109.239.131.195", 443);
+                datacenter.addAddressAndPort("149.154.167.40", 443);
                 datacenters.put(datacenter.datacenterId, datacenter);
 
                 datacenter = new Datacenter();
@@ -386,7 +380,7 @@ private void fillDatacenters() {
         } else if (datacenters.size() == 1) {
             Datacenter datacenter = new Datacenter();
             datacenter.datacenterId = 2;
-            datacenter.addAddressAndPort("109.239.131.193", 443);
+            datacenter.addAddressAndPort("149.154.167.50", 443);
             datacenters.put(datacenter.datacenterId, datacenter);
 
             datacenter = new Datacenter();
@@ -421,14 +415,14 @@ public void run() {
                         editor.putInt("lastDcUpdateTime", lastDcUpdateTime);
 
                         ArrayList<Long> sessions = new ArrayList<Long>();
-                        if (currentDatacenter.authSessionId != 0) {
-                            sessions.add(currentDatacenter.authSessionId);
+                        if (currentDatacenter.connection != null) {
+                            sessions.add(currentDatacenter.connection.getSissionId());
                         }
-                        if (currentDatacenter.authDownloadSessionId != 0) {
-                            sessions.add(currentDatacenter.authDownloadSessionId);
+                        if (currentDatacenter.downloadConnection != null) {
+                            sessions.add(currentDatacenter.downloadConnection.getSissionId());
                         }
-                        if (currentDatacenter.authUploadSessionId != 0) {
-                            sessions.add(currentDatacenter.authUploadSessionId);
+                        if (currentDatacenter.uploadConnection != null) {
+                            sessions.add(currentDatacenter.uploadConnection.getSissionId());
                         }
 
                         if (!sessions.isEmpty()) {
@@ -488,39 +482,23 @@ public void cleanUp() {
             @Override
             public void run() {
                 Datacenter datacenter = datacenterWithId(currentDatacenterId);
-                recreateSession(datacenter.authSessionId, datacenter);
-                recreateSession(datacenter.authDownloadSessionId, datacenter);
-                recreateSession(datacenter.authUploadSessionId, datacenter);
+                if (datacenter.connection != null) {
+                    datacenter.connection.recreateSession();
+                }
+                if (datacenter.downloadConnection != null) {
+                    datacenter.downloadConnection.recreateSession();
+                }
+                if (datacenter.uploadConnection != null) {
+                    datacenter.uploadConnection.recreateSession();
+                }
+
+                clearRequestsForRequestClass(RPCRequest.RPCRequestClassGeneric, datacenter);
+                clearRequestsForRequestClass(RPCRequest.RPCRequestClassDownloadMedia, datacenter);
+                clearRequestsForRequestClass(RPCRequest.RPCRequestClassUploadMedia, datacenter);
             }
         });
     }
 
-    void recreateSession(long sessionId, Datacenter datacenter) {
-        messagesIdsForConfirmation.remove(sessionId);
-        processedMessageIdsSet.remove(sessionId);
-        nextSeqNoInSession.remove(sessionId);
-        processedSessionChanges.remove(sessionId);
-
-        if (sessionId == datacenter.authSessionId) {
-            clearRequestsForRequestClass(RPCRequest.RPCRequestClassGeneric, datacenter);
-            FileLog.d("tmessages", "***** Recreate generic session");
-            datacenter.authSessionId = getNewSessionId();
-        } else if (sessionId == datacenter.authDownloadSessionId) {
-            clearRequestsForRequestClass(RPCRequest.RPCRequestClassDownloadMedia, datacenter);
-            FileLog.d("tmessages", "***** Recreate download session");
-            datacenter.authDownloadSessionId = getNewSessionId();
-        } else if (sessionId == datacenter.authUploadSessionId) {
-            clearRequestsForRequestClass(RPCRequest.RPCRequestClassUploadMedia, datacenter);
-            FileLog.d("tmessages", "***** Recreate upload session");
-            datacenter.authUploadSessionId = getNewSessionId();
-        }
-    }
-
-    long getNewSessionId() {
-        long newSessionId = Utilities.random.nextLong();
-        return isDebugSession ? (0xabcd000000000000L | (newSessionId & 0x0000ffffffffffffL)) : newSessionId;
-    }
-
     long generateMessageId() {
         long messageId = (long)((((double)System.currentTimeMillis() + ((double)timeDifference) * 1000) * 4294967296.0) / 1000.0);
         if (messageId <= lastOutgoingMessageId) {
@@ -537,41 +515,6 @@ long getTimeFromMsgId(long messageId) {
         return (long)(messageId / 4294967296.0 * 1000);
     }
 
-    int generateMessageSeqNo(long session, boolean increment) {
-        int value = 0;
-        if (nextSeqNoInSession.containsKey(session)) {
-            value = nextSeqNoInSession.get(session);
-        }
-        if (increment) {
-            nextSeqNoInSession.put(session, value + 1);
-        }
-        return value * 2 + (increment ? 1 : 0);
-    }
-
-    boolean isMessageIdProcessed(long sessionId, long messageId) {
-        ArrayList<Long> set = processedMessageIdsSet.get(sessionId);
-        return set != null && set.contains(messageId);
-    }
-
-    void addProcessedMessageId(long sessionId, long messageId) {
-        ArrayList<Long> set = processedMessageIdsSet.get(sessionId);
-        if (set != null) {
-            final int eraseLimit = 1000;
-            final int eraseThreshold = 224;
-
-            if (set.size() > eraseLimit + eraseThreshold) {
-                for (int a = 0; a < Math.min(set.size(), eraseThreshold + 1); a++) {
-                    set.remove(0);
-                }
-            }
-            set.add(messageId);
-        } else {
-            ArrayList<Long> sessionMap = new ArrayList<Long>();
-            sessionMap.add(messageId);
-            processedMessageIdsSet.put(sessionId, sessionMap);
-        }
-    }
-
     //================================================================================
     // Requests manage
     //================================================================================
@@ -704,7 +647,6 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         if (existing == null) {
                             existing = new Datacenter();
                             existing.datacenterId = datacenterDesc.id;
-                            existing.authSessionId = Utilities.random.nextLong();
                             datacentersArr.add(existing);
                             datacenterMap.put(existing.datacenterId, existing);
                         }
@@ -988,7 +930,6 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
                     datacenter.downloadConnection = new TcpConnection(datacenter.datacenterId);
                     datacenter.downloadConnection.delegate = this;
                     datacenter.downloadConnection.transportRequestClass = RPCRequest.RPCRequestClassDownloadMedia;
-                    datacenter.authDownloadSessionId = getNewSessionId();
                 }
                 datacenter.downloadConnection.connect();
             }
@@ -1000,7 +941,6 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
                     datacenter.uploadConnection = new TcpConnection(datacenter.datacenterId);
                     datacenter.uploadConnection.delegate = this;
                     datacenter.uploadConnection.transportRequestClass = RPCRequest.RPCRequestClassUploadMedia;
-                    datacenter.authUploadSessionId = getNewSessionId();
                 }
                 datacenter.uploadConnection.connect();
             }
@@ -1094,13 +1034,13 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
                 maxTimeout = 30.0;
             }
 
-            long sessionId = 0;
+            TcpConnection connection = null;
             if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                sessionId = requestDatacenter.authSessionId;
+                connection = requestDatacenter.connection;
             } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
-                sessionId = requestDatacenter.authDownloadSessionId;
+                connection = requestDatacenter.downloadConnection;
             } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0 ) {
-                sessionId = requestDatacenter.authUploadSessionId;
+                connection = requestDatacenter.uploadConnection;
             }
 
             boolean forceThisRequest = (request.flags & requestClass) != 0 && (_datacenterId == Integer.MIN_VALUE || requestDatacenter.datacenterId == _datacenterId);
@@ -1138,7 +1078,7 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
                 networkMessage.protoMessage = new TLRPC.TL_protoMessage();
 
                 if (request.runningMessageSeqNo == 0) {
-                    request.runningMessageSeqNo = generateMessageSeqNo(sessionId, true);
+                    request.runningMessageSeqNo = connection.generateMessageSeqNo(true);
                     request.runningMessageId = generateMessageId();
                 }
                 networkMessage.protoMessage.msg_id = request.runningMessageId;
@@ -1157,12 +1097,12 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
                     request.transportChannelToken = datacenterDownloadTransportToken;
                     ArrayList<NetworkMessage> arr = new ArrayList<NetworkMessage>();
                     arr.add(networkMessage);
-                    proceedToSendingMessages(arr, sessionId, requestDatacenter.downloadConnection, false, false);
+                    proceedToSendingMessages(arr, connection, false, false);
                 } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
                     request.transportChannelToken = datacenterUploadTransportToken;
                     ArrayList<NetworkMessage> arr = new ArrayList<NetworkMessage>();
                     arr.add(networkMessage);
-                    proceedToSendingMessages(arr, sessionId, requestDatacenter.uploadConnection, false, false);
+                    proceedToSendingMessages(arr, connection, false, false);
                 }
             }
         }
@@ -1184,7 +1124,7 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
                         destroyingSessions.add(it);
 
                         NetworkMessage networkMessage = new NetworkMessage();
-                        networkMessage.protoMessage = wrapMessage(destroySession, currentDatacenter.authSessionId, false);
+                        networkMessage.protoMessage = wrapMessage(destroySession, currentDatacenter.connection, false);
                         if (networkMessage.protoMessage != null) {
                             addMessageToDatacenter(genericMessagesToDatacenters, currentDatacenter.datacenterId, networkMessage);
                         }
@@ -1226,7 +1166,7 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
                             break;
                         }
                     }
-                    Datacenter newDc = allDc.get(Math.abs(Utilities.random.nextInt()) % allDc.size());
+                    Datacenter newDc = allDc.get(Math.abs(Utilities.random.nextInt() % allDc.size()));
                     request.runningDatacenterId = newDc.datacenterId;
                 }
             }
@@ -1312,13 +1252,13 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
             int requestLength = os.length();
 
             if (requestLength != 0) {
-                long sessionId = 0;
+                TcpConnection connection = null;
                 if ((request.flags & RPCRequest.RPCRequestClassGeneric) != 0) {
-                    sessionId = requestDatacenter.authSessionId;
+                    connection = requestDatacenter.connection;
                 } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
-                    sessionId = requestDatacenter.authDownloadSessionId;
+                    connection = requestDatacenter.downloadConnection;
                 } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
-                    sessionId = requestDatacenter.authUploadSessionId;
+                    connection = requestDatacenter.uploadConnection;
                 }
 
                 if (canCompress) {
@@ -1340,7 +1280,7 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
                 NetworkMessage networkMessage = new NetworkMessage();
                 networkMessage.protoMessage = new TLRPC.TL_protoMessage();
                 networkMessage.protoMessage.msg_id = messageId;
-                networkMessage.protoMessage.seqno = generateMessageSeqNo(sessionId, true);
+                networkMessage.protoMessage.seqno = connection.generateMessageSeqNo(true);
                 networkMessage.protoMessage.bytes = requestLength;
                 networkMessage.protoMessage.body = request.rpcRequest;
                 networkMessage.rawRequest = request.rawRequest;
@@ -1359,11 +1299,11 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
                 } else if ((request.flags & RPCRequest.RPCRequestClassDownloadMedia) != 0) {
                     ArrayList<NetworkMessage> arr = new ArrayList<NetworkMessage>();
                     arr.add(networkMessage);
-                    proceedToSendingMessages(arr, sessionId, requestDatacenter.downloadConnection, false, false);
+                    proceedToSendingMessages(arr, requestDatacenter.downloadConnection, false, false);
                 } else if ((request.flags & RPCRequest.RPCRequestClassUploadMedia) != 0) {
                     ArrayList<NetworkMessage> arr = new ArrayList<NetworkMessage>();
                     arr.add(networkMessage);
-                    proceedToSendingMessages(arr, sessionId, requestDatacenter.uploadConnection, false, false);
+                    proceedToSendingMessages(arr, requestDatacenter.uploadConnection, false, false);
                 } else {
                     FileLog.e("tmessages", "***** Error: request " + request.rawRequest + " has undefined session");
                 }
@@ -1376,11 +1316,8 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
         }
 
         for (Datacenter datacenter : datacenters.values()) {
-            if (genericMessagesToDatacenters.get(datacenter.datacenterId) == null && datacenter.connection != null && datacenter.connection.channelToken != 0) {
-                ArrayList<Long> arr = messagesIdsForConfirmation.get(datacenter.authSessionId);
-                if (arr != null && arr.size() != 0) {
-                    genericMessagesToDatacenters.put(datacenter.datacenterId, new ArrayList<NetworkMessage>());
-                }
+            if (genericMessagesToDatacenters.get(datacenter.datacenterId) == null && datacenter.connection != null && datacenter.connection.channelToken != 0 && datacenter.connection.hasMessagesToConfirm()) {
+                genericMessagesToDatacenters.put(datacenter.datacenterId, new ArrayList<NetworkMessage>());
             }
         }
 
@@ -1457,7 +1394,7 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
                     datacenter.connection.transportRequestClass = RPCRequest.RPCRequestClassGeneric;
                 }
 
-                proceedToSendingMessages(arr, datacenter.authSessionId, datacenter.connection, hasSendMessage, arr.size() != 0);
+                proceedToSendingMessages(arr, datacenter.connection, hasSendMessage, arr.size() != 0);
             }
         }
 
@@ -1531,7 +1468,7 @@ void addMessageToDatacenter(HashMap<Integer, ArrayList<NetworkMessage>> pMap, in
         arr.add(message);
     }
 
-    TLRPC.TL_protoMessage wrapMessage(TLObject message, long sessionId, boolean meaningful) {
+    TLRPC.TL_protoMessage wrapMessage(TLObject message, TcpConnection connection, boolean meaningful) {
         ByteBufferDesc os = new ByteBufferDesc(true);
         message.serializeToStream(os);
 
@@ -1540,7 +1477,7 @@ void addMessageToDatacenter(HashMap<Integer, ArrayList<NetworkMessage>> pMap, in
             protoMessage.msg_id = generateMessageId();
             protoMessage.bytes = os.length();
             protoMessage.body = message;
-            protoMessage.seqno = generateMessageSeqNo(sessionId, meaningful);
+            protoMessage.seqno = connection.generateMessageSeqNo(meaningful);
             return protoMessage;
         } else {
             FileLog.e("tmessages", "***** Couldn't serialize " + message);
@@ -1548,8 +1485,8 @@ void addMessageToDatacenter(HashMap<Integer, ArrayList<NetworkMessage>> pMap, in
         }
     }
 
-    void proceedToSendingMessages(ArrayList<NetworkMessage> messageList, long sessionId, TcpConnection connection, boolean reportAck, boolean requestShortTimeout) {
-        if (sessionId == 0) {
+    void proceedToSendingMessages(ArrayList<NetworkMessage> messageList, TcpConnection connection, boolean reportAck, boolean requestShortTimeout) {
+        if (connection.getSissionId() == 0) {
             return;
         }
 
@@ -1558,43 +1495,20 @@ void proceedToSendingMessages(ArrayList<NetworkMessage> messageList, long sessio
             messages.addAll(messageList);
         }
 
-        final ArrayList<Long> arr = messagesIdsForConfirmation.get(sessionId);
-        if (arr != null && arr.size() != 0) {
-            TLRPC.TL_msgs_ack msgAck = new TLRPC.TL_msgs_ack();
-            msgAck.msg_ids = new ArrayList<Long>();
-            msgAck.msg_ids.addAll(arr);
-
-            ByteBufferDesc os = new ByteBufferDesc(true);
-            msgAck.serializeToStream(os);
-
-            if (os.length() != 0) {
-                NetworkMessage networkMessage = new NetworkMessage();
-                networkMessage.protoMessage = new TLRPC.TL_protoMessage();
-
-                networkMessage.protoMessage.msg_id = generateMessageId();
-                networkMessage.protoMessage.seqno = generateMessageSeqNo(sessionId, false);
-
-                networkMessage.protoMessage.bytes = os.length();
-                networkMessage.protoMessage.body = msgAck;
-
-                messages.add(networkMessage);
-            } else {
-                FileLog.e("tmessages", "***** Couldn't serialize ");
-            }
-
-            arr.clear();
+        NetworkMessage message = connection.generateConfirmationRequest();
+        if (message != null) {
+            messages.add(message);
         }
 
-        sendMessagesToTransport(messages, connection, sessionId, reportAck, requestShortTimeout);
+        sendMessagesToTransport(messages, connection, reportAck, requestShortTimeout);
     }
 
-    void sendMessagesToTransport(ArrayList<NetworkMessage> messagesToSend, TcpConnection connection, long sessionId, boolean reportAck, boolean requestShortTimeout) {
+    void sendMessagesToTransport(ArrayList<NetworkMessage> messagesToSend, TcpConnection connection, boolean reportAck, boolean requestShortTimeout) {
         if (messagesToSend.size() == 0) {
             return;
         }
 
         if (connection == null) {
-            FileLog.e("tmessages", String.format("***** Transport for session 0x%x not found", sessionId));
             return;
         }
 
@@ -1611,7 +1525,7 @@ void sendMessagesToTransport(ArrayList<NetworkMessage> messagesToSend, TcpConnec
 
             if (currentSize >= 3 * 1024 || a == messagesToSend.size() - 1) {
                 ArrayList<Integer> quickAckId = new ArrayList<Integer>();
-                ByteBufferDesc transportData = createConnectionData(currentMessages, sessionId, quickAckId, connection);
+                ByteBufferDesc transportData = createConnectionData(currentMessages, quickAckId, connection);
 
                 if (transportData != null) {
                     if (reportAck && quickAckId.size() != 0) {
@@ -1646,7 +1560,7 @@ void sendMessagesToTransport(ArrayList<NetworkMessage> messagesToSend, TcpConnec
     }
 
     @SuppressWarnings("unused")
-    ByteBufferDesc createConnectionData(ArrayList<NetworkMessage> messages, long sessionId, ArrayList<Integer> quickAckId, TcpConnection connection) {
+    ByteBufferDesc createConnectionData(ArrayList<NetworkMessage> messages, ArrayList<Integer> quickAckId, TcpConnection connection) {
         Datacenter datacenter = datacenterWithId(connection.getDatacenterId());
         if (datacenter.authKey == null) {
             return null;
@@ -1662,16 +1576,16 @@ ByteBufferDesc createConnectionData(ArrayList<NetworkMessage> messages, long ses
 
             if (BuildVars.DEBUG_VERSION) {
                 if (message.body instanceof TLRPC.invokeWithLayer12) {
-                    FileLog.d("tmessages", sessionId + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + ((TLRPC.invokeWithLayer12)message.body).query);
+                    FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + ((TLRPC.invokeWithLayer12)message.body).query);
                 } else if (message.body instanceof TLRPC.initConnection) {
                     TLRPC.initConnection r = (TLRPC.initConnection)message.body;
                     if (r.query instanceof TLRPC.invokeWithLayer12) {
-                        FileLog.d("tmessages", sessionId + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + ((TLRPC.invokeWithLayer12)r.query).query);
+                        FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + ((TLRPC.invokeWithLayer12)r.query).query);
                     } else {
-                        FileLog.d("tmessages", sessionId + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + r.query);
+                        FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + r.query);
                     }
                 } else {
-                    FileLog.d("tmessages", sessionId + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + message.body);
+                    FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + message.body);
                 }
             }
 
@@ -1686,7 +1600,7 @@ ByteBufferDesc createConnectionData(ArrayList<NetworkMessage> messages, long ses
 
                 messageId = generateMessageId();
                 messageBody = messageContainer;
-                messageSeqNo = generateMessageSeqNo(sessionId, false);
+                messageSeqNo = connection.generateMessageSeqNo(false);
             } else {
                 messageId = message.msg_id;
                 messageBody = message.body;
@@ -1702,16 +1616,16 @@ ByteBufferDesc createConnectionData(ArrayList<NetworkMessage> messages, long ses
                 containerMessages.add(message);
                 if (BuildVars.DEBUG_VERSION) {
                     if (message.body instanceof TLRPC.invokeWithLayer12) {
-                        FileLog.d("tmessages", sessionId + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + ((TLRPC.invokeWithLayer12)message.body).query);
+                        FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + ((TLRPC.invokeWithLayer12)message.body).query);
                     } else if (message.body instanceof TLRPC.initConnection) {
                         TLRPC.initConnection r = (TLRPC.initConnection)message.body;
                         if (r.query instanceof TLRPC.invokeWithLayer12) {
-                            FileLog.d("tmessages", sessionId + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + ((TLRPC.invokeWithLayer12)r.query).query);
+                            FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + ((TLRPC.invokeWithLayer12)r.query).query);
                         } else {
-                            FileLog.d("tmessages", sessionId + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + r.query);
+                            FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + r.query);
                         }
                     } else {
-                        FileLog.d("tmessages", sessionId + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + message.body);
+                        FileLog.d("tmessages", connection.getSissionId() + ":DC" + datacenter.datacenterId + "> Send message (" + message.seqno + ", " + message.msg_id + "): " + message.body);
                     }
                 }
             }
@@ -1720,7 +1634,7 @@ ByteBufferDesc createConnectionData(ArrayList<NetworkMessage> messages, long ses
 
             messageId = generateMessageId();
             messageBody = messageContainer;
-            messageSeqNo = generateMessageSeqNo(sessionId, false);
+            messageSeqNo = connection.generateMessageSeqNo(false);
         }
 
         ByteBufferDesc sizeBuffer = new ByteBufferDesc(true);
@@ -1734,7 +1648,7 @@ ByteBufferDesc createConnectionData(ArrayList<NetworkMessage> messages, long ses
         } else {
             innerOs.writeInt64(serverSalt);
         }
-        innerOs.writeInt64(sessionId);
+        innerOs.writeInt64(connection.getSissionId());
         innerOs.writeInt64(messageId);
         innerOs.writeInt32(messageSeqNo);
         innerOs.writeInt32(sizeBuffer.length());
@@ -1836,7 +1750,7 @@ public void run() {
         });
     }
 
-    void processMessage(TLObject message, long messageId, int messageSeqNo, long messageSalt, TcpConnection connection, long sessionId, long innerMsgId, long containerMessageId) {
+    void processMessage(TLObject message, long messageId, int messageSeqNo, long messageSalt, TcpConnection connection, long innerMsgId, long containerMessageId) {
         if (message == null) {
             FileLog.e("tmessages", "message is null");
             return;
@@ -1845,12 +1759,8 @@ void processMessage(TLObject message, long messageId, int messageSeqNo, long mes
 
         if (message instanceof TLRPC.TL_new_session_created) {
             TLRPC.TL_new_session_created newSession = (TLRPC.TL_new_session_created)message;
-            ArrayList<Long> arr = processedSessionChanges.get(sessionId);
-            if (arr == null) {
-                arr = new ArrayList<Long>();
-                processedSessionChanges.put(sessionId, arr);
-            }
-            if (!arr.contains(newSession.unique_id)) {
+
+            if (!connection.isSessionProcessed(newSession.unique_id)) {
                 FileLog.d("tmessages", "New session:");
                 FileLog.d("tmessages", String.format("    first message id: %d", newSession.first_msg_id));
                 FileLog.d("tmessages", String.format("    server salt: %d", newSession.server_salt));
@@ -1877,10 +1787,10 @@ void processMessage(TLObject message, long messageId, int messageSeqNo, long mes
 
                 saveSession();
 
-                if (sessionId == datacenter.authSessionId && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {
+                if ((connection.transportRequestClass & RPCRequest.RPCRequestClassGeneric) != 0 && datacenter.datacenterId == currentDatacenterId && UserConfig.clientActivated) {
                     MessagesController.getInstance().getDifference();
                 }
-                arr.add(newSession.unique_id);
+                connection.addProcessedSession(newSession.unique_id);
             }
         } else if (message instanceof TLRPC.TL_msg_container) {
             /*if (messageId != 0) {
@@ -1893,18 +1803,13 @@ void processMessage(TLObject message, long messageId, int messageSeqNo, long mes
             for (TLRPC.TL_protoMessage innerMessage : messageContainer.messages) {
                 long innerMessageId = innerMessage.msg_id;
                 if (innerMessage.seqno % 2 != 0) {
-                    ArrayList<Long> set = messagesIdsForConfirmation.get(sessionId);
-                    if (set == null) {
-                        set = new ArrayList<Long>();
-                        messagesIdsForConfirmation.put(sessionId, set);
-                    }
-                    set.add(innerMessageId);
+                    connection.addMessageToConfirm(innerMessageId);
                 }
-                if (isMessageIdProcessed(sessionId, innerMessageId)) {
+                if (connection.isMessageIdProcessed(innerMessageId)) {
                     continue;
                 }
-                processMessage(innerMessage.body, 0, innerMessage.seqno, messageSalt, connection, sessionId, innerMessageId, messageId);
-                addProcessedMessageId(sessionId, innerMessageId);
+                processMessage(innerMessage.body, 0, innerMessage.seqno, messageSalt, connection, innerMessageId, messageId);
+                connection.addProcessedMessageId(innerMessageId);
             }
         } else if (message instanceof TLRPC.TL_pong) {
             TLRPC.TL_pong pong = (TLRPC.TL_pong)message;
@@ -2194,14 +2099,23 @@ public void run() {
                     timeDifference = (int)((time - currentTime) / 1000 - currentPingTime / 2.0);
                 }
 
-                recreateSession(datacenter.authSessionId, datacenter);
-                recreateSession(datacenter.authDownloadSessionId, datacenter);
-                recreateSession(datacenter.authUploadSessionId, datacenter);
+                if (datacenter.connection != null) {
+                    datacenter.connection.recreateSession();
+                }
+                if (datacenter.downloadConnection != null) {
+                    datacenter.downloadConnection.recreateSession();
+                }
+                if (datacenter.uploadConnection != null) {
+                    datacenter.uploadConnection.recreateSession();
+                }
 
                 saveSession();
 
                 lastOutgoingMessageId = 0;
-                clearRequestsForRequestClass(connection.transportRequestClass, datacenter);
+
+                clearRequestsForRequestClass(RPCRequest.RPCRequestClassGeneric, datacenter);
+                clearRequestsForRequestClass(RPCRequest.RPCRequestClassDownloadMedia, datacenter);
+                clearRequestsForRequestClass(RPCRequest.RPCRequestClassUploadMedia, datacenter);
             }
         } else if (message instanceof TLRPC.TL_bad_server_salt) {
             if (messageId != 0) {
@@ -2240,7 +2154,7 @@ public void run() {
                     }
                 }
             } else {
-                if (!isMessageIdProcessed(sessionId, messageId)) {
+                if (!connection.isMessageIdProcessed(messageId)) {
                     requestResend = true;
                 }
             }
@@ -2250,23 +2164,18 @@ public void run() {
                 resendReq.msg_ids.add(detailedInfo.answer_msg_id);
 
                 NetworkMessage networkMessage = new NetworkMessage();
-                networkMessage.protoMessage = wrapMessage(resendReq, sessionId, false);
+                networkMessage.protoMessage = wrapMessage(resendReq, connection, false);
 
                 ArrayList<NetworkMessage> arr = new ArrayList<NetworkMessage>();
                 arr.add(networkMessage);
-                sendMessagesToTransport(arr, connection, sessionId, false, true);
+                sendMessagesToTransport(arr, connection, false, true);
             } else {
-                ArrayList<Long> set = messagesIdsForConfirmation.get(sessionId);
-                if (set == null) {
-                    set = new ArrayList<Long>();
-                    messagesIdsForConfirmation.put(sessionId, set);
-                }
-                set.add(detailedInfo.answer_msg_id);
+                connection.addMessageToConfirm(detailedInfo.answer_msg_id);
             }
         } else if (message instanceof TLRPC.TL_gzip_packed) {
             TLRPC.TL_gzip_packed packet = (TLRPC.TL_gzip_packed)message;
             TLObject result = Utilities.decompress(packet.packed_data, getRequestWithMessageId(messageId));
-            processMessage(result, messageId, messageSeqNo, messageSalt, connection, sessionId, innerMsgId, containerMessageId);
+            processMessage(result, messageId, messageSeqNo, messageSalt, connection, innerMsgId, containerMessageId);
         } else if (message instanceof TLRPC.Updates) {
             MessagesController.getInstance().processUpdates((TLRPC.Updates)message, false);
         } else {
@@ -2284,25 +2193,26 @@ void generatePing() {
 
     static long nextPingId = 0;
     ByteBufferDesc generatePingData(Datacenter datacenter, boolean recordTime) {
-        long sessionId = datacenter.authSessionId;
-        if (sessionId == 0) {
-            return null;
+        if (datacenter.connection == null) {
+            datacenter.connection = new TcpConnection(datacenter.datacenterId);
+            datacenter.connection.delegate = this;
+            datacenter.connection.transportRequestClass = RPCRequest.RPCRequestClassGeneric;
         }
 
         TLRPC.TL_ping_delay_disconnect ping = new TLRPC.TL_ping_delay_disconnect();
         ping.ping_id = nextPingId++;
         ping.disconnect_delay = 35;
 
-        if (recordTime && sessionId == datacenter.authSessionId) {
+        if (recordTime) {
             pingIdToDate.put(ping.ping_id, (int)(System.currentTimeMillis() / 1000));
         }
 
         NetworkMessage networkMessage = new NetworkMessage();
-        networkMessage.protoMessage = wrapMessage(ping, sessionId, false);
+        networkMessage.protoMessage = wrapMessage(ping, datacenter.connection, false);
 
         ArrayList<NetworkMessage> arr = new ArrayList<NetworkMessage>();
         arr.add(networkMessage);
-        return createConnectionData(arr, sessionId, null, datacenter.connection);
+        return createConnectionData(arr, null, datacenter.connection);
     }
 
     void generatePing(Datacenter datacenter) {
@@ -2349,8 +2259,8 @@ public long needsToDecodeMessageIdFromPartialData(TcpConnection connection, byte
             long messageServerSalt = messageIs.readInt64();
             long messageSessionId = messageIs.readInt64();
 
-            if (messageSessionId != datacenter.authSessionId && messageSessionId != datacenter.authDownloadSessionId && messageSessionId != datacenter.authUploadSessionId) {
-                FileLog.e("tmessages", String.format("***** Error: invalid message session ID (%d instead of %d)", messageSessionId, datacenter.authSessionId));
+            if (messageSessionId != connection.getSissionId()) {
+                FileLog.e("tmessages", String.format("***** Error: invalid message session ID (%d instead of %d)", messageSessionId, connection.getSissionId()));
                 finishUpdatingState(connection);
                 return -1;
             }
@@ -2552,7 +2462,7 @@ public void run() {
         long keyId = data.readInt64();
         if (keyId == 0) {
             long messageId = data.readInt64();
-            if (isMessageIdProcessed(0, messageId)) {
+            if (connection.isMessageIdProcessed(messageId)) {
                 finishUpdatingState(connection);
                 return;
             }
@@ -2562,10 +2472,10 @@ public void run() {
 
             TLObject object = TLClassStore.Instance().TLdeserialize(data, constructor, getRequestWithMessageId(messageId));
 
-            processMessage(object, messageId, 0, 0, connection, 0, 0, 0);
+            processMessage(object, messageId, 0, 0, connection, 0, 0);
 
             if (object != null) {
-                addProcessedMessageId(0, messageId);
+                connection.addProcessedMessageId(messageId);
             }
         } else {
             if (datacenter.authKeyId == 0 || keyId != datacenter.authKeyId) {
@@ -2582,18 +2492,12 @@ public void run() {
             data.position(0);
 
             Utilities.aesIgeEncryption2(data.buffer, keyData.aesKey, keyData.aesIv, false, false, length - 24);
-//            if (messageData == null) {
-//                FileLog.e("tmessages", "Error: can't decrypt message data " + connection);
-//                connection.suspendConnection(true);
-//                connection.connect();
-//                return;
-//            }
 
             long messageServerSalt = data.readInt64();
             long messageSessionId = data.readInt64();
 
-            if (messageSessionId != datacenter.authSessionId && messageSessionId != datacenter.authDownloadSessionId && messageSessionId != datacenter.authUploadSessionId) {
-                FileLog.e("tmessages", String.format("***** Error: invalid message session ID (%d instead of %d)", messageSessionId, datacenter.authSessionId));
+            if (messageSessionId != connection.getSissionId()) {
+                FileLog.e("tmessages", String.format("***** Error: invalid message session ID (%d instead of %d)", messageSessionId, connection.getSissionId()));
                 finishUpdatingState(connection);
                 return;
             }
@@ -2604,17 +2508,12 @@ public void run() {
             int messageSeqNo = data.readInt32();
             int messageLength = data.readInt32();
 
-            if (isMessageIdProcessed(messageSessionId, messageId)) {
+            if (connection.isMessageIdProcessed(messageId)) {
                 doNotProcess = true;
             }
 
             if (messageSeqNo % 2 != 0) {
-                ArrayList<Long> set = messagesIdsForConfirmation.get(messageSessionId);
-                if (set == null) {
-                    set = new ArrayList<Long>();
-                    messagesIdsForConfirmation.put(messageSessionId, set);
-                }
-                set.add(messageId);
+                connection.addMessageToConfirm(messageId);
             }
 
             byte[] realMessageKeyFull = Utilities.computeSHA1(data.buffer, 0, Math.min(messageLength + 32, data.limit()));
@@ -2638,12 +2537,11 @@ public void run() {
                 if (message == null) {
                     FileLog.e("tmessages", "***** Error parsing message: " + constructor);
                 } else {
-                    processMessage(message, messageId, messageSeqNo, messageServerSalt, connection, messageSessionId, 0, 0);
-
-                    addProcessedMessageId(messageSessionId, messageId);
+                    processMessage(message, messageId, messageSeqNo, messageServerSalt, connection, 0, 0);
+                    connection.addProcessedMessageId(messageId);
                 }
             } else {
-                proceedToSendingMessages(null, messageSessionId, connection, false, false);
+                proceedToSendingMessages(null, connection, false, false);
             }
             finishUpdatingState(connection);
         }
@@ -2707,9 +2605,19 @@ void authorizeOnMovingDatacenter() {
             return;
         }
 
-        recreateSession(datacenter.authSessionId, datacenter);
-        recreateSession(datacenter.authDownloadSessionId, datacenter);
-        recreateSession(datacenter.authUploadSessionId, datacenter);
+        if (datacenter.connection != null) {
+            datacenter.connection.recreateSession();
+        }
+        if (datacenter.downloadConnection != null) {
+            datacenter.downloadConnection.recreateSession();
+        }
+        if (datacenter.uploadConnection != null) {
+            datacenter.uploadConnection.recreateSession();
+        }
+
+        clearRequestsForRequestClass(RPCRequest.RPCRequestClassGeneric, datacenter);
+        clearRequestsForRequestClass(RPCRequest.RPCRequestClassDownloadMedia, datacenter);
+        clearRequestsForRequestClass(RPCRequest.RPCRequestClassUploadMedia, datacenter);
 
         if (datacenter.authKey == null) {
             datacenter.clearServerSalts();
@@ -2761,12 +2669,6 @@ public void dequeueActor(final Action actor, final boolean execute) {
         actionQueue.add(actor);
     }
 
-    public void cancelActor(final Action actor) {
-        if (actor != null) {
-            actionQueue.remove(actor);
-        }
-    }
-
     @Override
     public void ActionDidFinishExecution(final Action action, HashMap<String, Object> params) {
         if (action instanceof HandshakeAction) {
@@ -2777,9 +2679,19 @@ public void ActionDidFinishExecution(final Action action, HashMap<String, Object
             if (eactor.datacenter.datacenterId == currentDatacenterId || eactor.datacenter.datacenterId == movingToDatacenterId) {
                 timeDifference = (Integer)params.get("timeDifference");
 
-                recreateSession(eactor.datacenter.authSessionId, eactor.datacenter);
-                recreateSession(eactor.datacenter.authDownloadSessionId, eactor.datacenter);
-                recreateSession(eactor.datacenter.authUploadSessionId, eactor.datacenter);
+                if (eactor.datacenter.connection != null) {
+                    eactor.datacenter.connection.recreateSession();
+                }
+                if (eactor.datacenter.downloadConnection != null) {
+                    eactor.datacenter.downloadConnection.recreateSession();
+                }
+                if (eactor.datacenter.uploadConnection != null) {
+                    eactor.datacenter.uploadConnection.recreateSession();
+                }
+
+                clearRequestsForRequestClass(RPCRequest.RPCRequestClassGeneric, eactor.datacenter);
+                clearRequestsForRequestClass(RPCRequest.RPCRequestClassDownloadMedia, eactor.datacenter);
+                clearRequestsForRequestClass(RPCRequest.RPCRequestClassUploadMedia, eactor.datacenter);
             }
             processRequestQueue(RPCRequest.RPCRequestClassTransportMask, eactor.datacenter.datacenterId);
         } else if (action instanceof ExportAuthorizationAction) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Datacenter.java b/TMessagesProj/src/main/java/org/telegram/messenger/Datacenter.java
index 2bdce85de..c89440e8c 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Datacenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/Datacenter.java
@@ -27,9 +27,6 @@
     public int[] defaultPorts =   new int[] {-1, 80, -1, 443, -1, 443, -1, 80, -1, 443, -1};
     public int[] defaultPorts8888 = new int[] {-1, 8888, -1, 443, -1, 8888,  -1, 80, -1, 8888,  -1};
     public boolean authorized;
-    public long authSessionId;
-    public long authDownloadSessionId;
-    public long authUploadSessionId;
     public byte[] authKey;
     public long authKeyId;
     public int lastInitVersion = 0;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
index 43697966e..0c87667d5 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoadOperation.java
@@ -218,7 +218,7 @@ public void run() {
                             BitmapFactory.Options opts = new BitmapFactory.Options();
 
                             float w_filter = 0;
-                            float h_filter;
+                            float h_filter = 0;
                             if (filter != null) {
                                 String args[] = filter.split("_");
                                 w_filter = Float.parseFloat(args[0]) * Utilities.density;
@@ -254,7 +254,7 @@ public void run() {
                                     float bitmapH = image.getHeight();
                                     if (bitmapW != w_filter && bitmapW > w_filter) {
                                         float scaleFactor = bitmapW / w_filter;
-                                        Bitmap scaledBitmap = Bitmap.createScaledBitmap(image, (int)w_filter, (int)(bitmapH / scaleFactor), true);
+                                        Bitmap scaledBitmap = Bitmap.createScaledBitmap(image, (int)w_filter, (int)(bitmapH / scaleFactor), false);
                                         if (image != scaledBitmap) {
                                             if (Build.VERSION.SDK_INT < 11) {
                                                 image.recycle();
@@ -283,6 +283,12 @@ public void run() {
                         if (!dontDelete && cacheFileFinal.length() == 0) {
                             cacheFileFinal.delete();
                         }
+                        Utilities.stageQueue.postRunnable(new Runnable() {
+                            @Override
+                            public void run() {
+                                delegate.didFailedLoadingFile(FileLoadOperation.this);
+                            }
+                        });
                         FileLog.e("tmessages", e);
                     }
                 }
@@ -461,7 +467,7 @@ public void run() {
                             float bitmapH = image.getHeight();
                             if (bitmapW != w_filter && bitmapW > w_filter) {
                                 float scaleFactor = bitmapW / w_filter;
-                                Bitmap scaledBitmap = Bitmap.createScaledBitmap(image, (int) w_filter, (int) (bitmapH / scaleFactor), true);
+                                Bitmap scaledBitmap = Bitmap.createScaledBitmap(image, (int) w_filter, (int) (bitmapH / scaleFactor), false);
                                 if (image != scaledBitmap) {
                                     if (Build.VERSION.SDK_INT < 11) {
                                         image.recycle();
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
index 7be03f823..a23775a3a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
@@ -126,7 +126,7 @@ private void startUploadRequest() {
                 toAdd += 16 - readed % 16;
             }
             ByteBufferDesc sendBuffer = BuffersStorage.getInstance().getFreeBuffer(readed + toAdd);
-            if (readed != uploadChunkSize) {
+            if (readed != uploadChunkSize || totalPartsCount == currentPartNum + 1) {
                 isLastPart = true;
             }
             sendBuffer.writeRaw(readBuffer, 0, readed);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/LocaleController.java b/TMessagesProj/src/main/java/org/telegram/messenger/LocaleController.java
index 2ba729631..3702d6d50 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/LocaleController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/LocaleController.java
@@ -9,6 +9,10 @@
 package org.telegram.messenger;
 
 import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
 import android.content.SharedPreferences;
 import android.content.res.Configuration;
 import android.text.format.DateFormat;
@@ -26,6 +30,7 @@
 import java.util.Date;
 import java.util.HashMap;
 import java.util.Locale;
+import java.util.TimeZone;
 
 public class LocaleController {
 
@@ -47,6 +52,20 @@
     private String languageOverride;
     private boolean changingConfiguration = false;
 
+    private class TimeZoneChangedReceiver extends BroadcastReceiver {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            ApplicationLoader.applicationHandler.post(new Runnable() {
+                @Override
+                public void run() {
+                    if (!formatterMonth.getTimeZone().equals(TimeZone.getDefault())) {
+                        LocaleController.recreateFormatters();
+                    }
+                }
+            });
+        }
+    }
+
     public static class LocaleInfo {
         public String name;
         public String nameEnglish;
@@ -187,6 +206,13 @@ public int compare(LocaleController.LocaleInfo o, LocaleController.LocaleInfo o2
         } catch (Exception e) {
             FileLog.e("tmessages", e);
         }
+
+        try {
+            IntentFilter timezoneFilter = new IntentFilter(Intent.ACTION_TIMEZONE_CHANGED);
+            ApplicationLoader.applicationContext.registerReceiver(new TimeZoneChangedReceiver(), timezoneFilter);
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
     }
 
     public boolean applyLanguageFile(File file) {
@@ -477,7 +503,7 @@ public static String formatDate(long date) {
         if (dateDay == day && year == dateYear) {
             return formatterDay.format(new Date(date * 1000));
         } else if (dateDay + 1 == day && year == dateYear) {
-            return ApplicationLoader.applicationContext.getResources().getString(R.string.Yesterday);
+            return getString("Yesterday", R.string.Yesterday);
         } else if (year == dateYear) {
             return formatterMonth.format(new Date(date * 1000));
         } else {
@@ -568,4 +594,21 @@ public static String stringForMessageListDate(long date) {
             }
         }
     }
+
+    public static String formatUserStatus(TLRPC.User user) {
+        if (user == null || user.status == null || user.status.expires == 0 || user instanceof TLRPC.TL_userDeleted || user instanceof TLRPC.TL_userEmpty) {
+            return getString("Offline", R.string.Offline);
+        } else {
+            int currentTime = ConnectionsManager.getInstance().getCurrentTime();
+            if (user.status.expires > currentTime) {
+                return getString("Online", R.string.Online);
+            } else {
+                if (user.status.expires == -1) {
+                    return getString("Invisible", R.string.Invisible);
+                } else {
+                    return formatDateOnline(user.status.expires);
+                }
+            }
+        }
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
index 515b303b6..e93cef0f6 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MediaController.java
@@ -108,6 +108,8 @@ public AudioBuffer(int capacity) {
     private long currentTotalPcmDuration;
     private long lastPlayPcm;
     private int ignoreFirstProgress = 0;
+    private Timer progressTimer = null;
+    private final Integer progressTimerSync = 1;
 
     private AudioRecord audioRecorder = null;
     private Object audioGainObj = null;
@@ -307,49 +309,74 @@ public MediaController () {
         NotificationCenter.getInstance().addObserver(this, FileLoader.FileDidLoaded);
         NotificationCenter.getInstance().addObserver(this, FileLoader.FileLoadProgressChanged);
         NotificationCenter.getInstance().addObserver(this, FileLoader.FileUploadProgressChanged);
+    }
 
-        Timer progressTimer = new Timer();
-        progressTimer.schedule(new TimerTask() {
-            @Override
-            public void run() {
-                synchronized (sync) {
-                    Utilities.RunOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            if (playingMessageObject != null && (audioPlayer != null || audioTrackPlayer != null) && !isPaused) {
-                                try {
-                                    if (ignoreFirstProgress != 0) {
-                                        ignoreFirstProgress--;
-                                        return;
-                                    }
-                                    int progress = 0;
-                                    float value = 0;
-                                    if (audioPlayer != null) {
-                                        progress = audioPlayer.getCurrentPosition();
-                                        value = (float) lastProgress / (float) audioPlayer.getDuration();
-                                        if (progress <= lastProgress) {
+    private void startProgressTimer() {
+        synchronized (progressTimerSync) {
+            if (progressTimer != null) {
+                try {
+                    progressTimer.cancel();
+                    progressTimer = null;
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
+                }
+            }
+            progressTimer = new Timer();
+            progressTimer.schedule(new TimerTask() {
+                @Override
+                public void run() {
+                    synchronized (sync) {
+                        Utilities.RunOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                if (playingMessageObject != null && (audioPlayer != null || audioTrackPlayer != null) && !isPaused) {
+                                    try {
+                                        if (ignoreFirstProgress != 0) {
+                                            ignoreFirstProgress--;
                                             return;
                                         }
-                                    } else if (audioTrackPlayer != null) {
-                                        progress = (int)(lastPlayPcm / 48.0f);
-                                        value = (float)lastPlayPcm / (float)currentTotalPcmDuration;
-                                        if (progress == lastProgress) {
-                                            return;
+                                        int progress = 0;
+                                        float value = 0;
+                                        if (audioPlayer != null) {
+                                            progress = audioPlayer.getCurrentPosition();
+                                            value = (float) lastProgress / (float) audioPlayer.getDuration();
+                                            if (progress <= lastProgress) {
+                                                return;
+                                            }
+                                        } else if (audioTrackPlayer != null) {
+                                            progress = (int) (lastPlayPcm / 48.0f);
+                                            value = (float) lastPlayPcm / (float) currentTotalPcmDuration;
+                                            if (progress == lastProgress) {
+                                                return;
+                                            }
                                         }
+                                        lastProgress = progress;
+                                        playingMessageObject.audioProgress = value;
+                                        playingMessageObject.audioProgressSec = lastProgress / 1000;
+                                        NotificationCenter.getInstance().postNotificationName(audioProgressDidChanged, playingMessageObject.messageOwner.id, value);
+                                    } catch (Exception e) {
+                                        FileLog.e("tmessages", e);
                                     }
-                                    lastProgress = progress;
-                                    playingMessageObject.audioProgress = value;
-                                    playingMessageObject.audioProgressSec = lastProgress / 1000;
-                                    NotificationCenter.getInstance().postNotificationName(audioProgressDidChanged, playingMessageObject.messageOwner.id, value);
-                                } catch (Exception e) {
-                                    FileLog.e("tmessages", e);
                                 }
                             }
-                        }
-                    });
+                        });
+                    }
+                }
+            }, 0, 17);
+        }
+    }
+
+    private void stopProgressTimer() {
+        synchronized (progressTimerSync) {
+            if (progressTimer != null) {
+                try {
+                    progressTimer.cancel();
+                    progressTimer = null;
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e);
                 }
             }
-        }, 100, 17);
+        }
     }
 
     public void cleanup() {
@@ -782,6 +809,7 @@ private void clenupPlayer(boolean notify) {
                     }
                 }
             }
+            stopProgressTimer();
             lastProgress = 0;
             isPaused = false;
             MessageObject lastFile = playingMessageObject;
@@ -891,6 +919,7 @@ public void onPeriodicNotification(AudioTrack audioTrack) {
                         }
                     });
                     audioTrackPlayer.play();
+                    startProgressTimer();
                 } catch (Exception e) {
                     FileLog.e("tmessages", e);
                     if (audioTrackPlayer != null) {
@@ -915,6 +944,7 @@ public void onCompletion(MediaPlayer mediaPlayer) {
                 });
                 audioPlayer.prepare();
                 audioPlayer.start();
+                startProgressTimer();
             } catch (Exception e) {
                 FileLog.e("tmessages", e);
                 if (audioPlayer != null) {
@@ -947,7 +977,6 @@ public void onCompletion(MediaPlayer mediaPlayer) {
             if (playingMessageObject.audioProgress == 1) {
                 playingMessageObject.audioProgress = 0;
             }
-            //audioTrackPlayer.setNotificationMarkerPosition((int)(currentTotalPcmDuration * (1 - playingMessageObject.audioProgress)));
             fileDecodingQueue.postRunnable(new Runnable() {
                 @Override
                 public void run() {
@@ -995,6 +1024,7 @@ public void stopAudio() {
         } catch (Exception e) {
             FileLog.e("tmessages", e);
         }
+        stopProgressTimer();
         playingMessageObject = null;
         isPaused = false;
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
index e1fa97689..b78678a8a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
@@ -8906,7 +8906,7 @@ public void serializeToStream(AbsSerializedData stream) {
         }
     }
 
-    public static class TL_audioEncrypted extends Audio {
+    public static class TL_audioEncrypted extends TL_audio {
         public static int constructor = 0x555555F6;
 
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java b/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java
index bc8dc87bd..96c3f3c2e 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TcpConnection.java
@@ -18,9 +18,8 @@
 
 import jawnae.pyronet.PyroClient;
 import jawnae.pyronet.PyroSelector;
-import jawnae.pyronet.PyroClientAdapter;
 
-public class TcpConnection extends PyroClientAdapter {
+public class TcpConnection extends ConnectionContext {
     public enum TcpConnectionState {
         TcpConnectionStageIdle,
         TcpConnectionStageConnecting,
diff --git a/TMessagesProj/src/main/java/org/telegram/objects/MessageObject.java b/TMessagesProj/src/main/java/org/telegram/objects/MessageObject.java
index 1408795e9..0a2189304 100644
--- a/TMessagesProj/src/main/java/org/telegram/objects/MessageObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/objects/MessageObject.java
@@ -68,6 +68,8 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
             textPaint.linkColor = 0xff316f9f;
         }
 
+        textPaint.setTextSize(Utilities.dp(MessagesController.getInstance().fontSize));
+
         messageOwner = message;
 
         if (message instanceof TLRPC.TL_messageService) {
@@ -402,8 +404,6 @@ private void generateLayout() {
             }
         }
 
-        textPaint.setTextSize(Utilities.dp(MessagesController.getInstance().fontSize));
-
         int maxWidth;
         if (messageOwner.to_id.chat_id != 0) {
             maxWidth = Math.min(Utilities.displaySize.x, Utilities.displaySize.y) - Utilities.dp(122);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
index a1aa6c9df..6b5e58778 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatBaseCell.java
@@ -281,6 +281,8 @@ public void setMessageObject(MessageObject messageObject) {
             if (currentUser != null) {
                 if (currentUser.photo != null) {
                     currentPhoto = currentUser.photo.photo_small;
+                } else {
+                    currentPhoto = null;
                 }
                 avatarImage.setImage(currentPhoto, "50_50", getResources().getDrawable(Utilities.getUserAvatarForId(currentUser.id)));
             } else {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
index 0c0906000..d33b330a1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatMediaCell.java
@@ -119,6 +119,7 @@ protected void onDetachedFromWindow() {
             photoImage.clearImage();
             currentPhotoObject = null;
         }
+        currentUrl = null;
         if (gifDrawable != null) {
             MediaController.getInstance().clearGifDrawable(this);
             gifDrawable = null;
@@ -248,7 +249,7 @@ private void didPressedButton() {
                     FileLoader.getInstance().cancelLoadingForImageView(photoImage);
                 } else if (currentMessageObject.type == 8) {
                     FileLoader.getInstance().cancelLoadFile(null, null, currentMessageObject.messageOwner.media.document, null);
-                    if (lastDownloadedGifMessage.messageOwner.id == currentMessageObject.messageOwner.id) {
+                    if (lastDownloadedGifMessage != null && lastDownloadedGifMessage.messageOwner.id == currentMessageObject.messageOwner.id) {
                         lastDownloadedGifMessage = null;
                     }
                 } else if (currentMessageObject.type == 3) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatOrUserCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatOrUserCell.java
index 5dd1ca496..a092f8b75 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatOrUserCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/ChatOrUserCell.java
@@ -346,22 +346,10 @@ public void build(int width, int height) {
                 if (subLabel != null) {
                     onlineString = subLabel;
                 } else {
-                    if (user != null) {
-                        if (user.status == null) {
-                            onlineString = getResources().getString(R.string.Offline);
-                        } else {
-                            int currentTime = ConnectionsManager.getInstance().getCurrentTime();
-                            if (user.id == UserConfig.clientUserId || user.status.expires > currentTime) {
-                                currentOnlinePaint = onlinePaint;
-                                onlineString = getResources().getString(R.string.Online);
-                            } else {
-                                if (user.status.expires <= 10000) {
-                                    onlineString = getResources().getString(R.string.Invisible);
-                                } else {
-                                    onlineString = LocaleController.formatDateOnline(user.status.expires);
-                                }
-                            }
-                        }
+                    onlineString = LocaleController.formatUserStatus(user);
+                    if (user != null && (user.id == UserConfig.clientUserId || user.status != null && user.status.expires > ConnectionsManager.getInstance().getCurrentTime())) {
+                        currentOnlinePaint = onlinePaint;
+                        onlineString = LocaleController.getString("Online", R.string.Online);
                     }
                 }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
index 055d0a510..7a41cf2ba 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
@@ -476,11 +476,11 @@ public void build(int width, int height) {
                                     }
                                 }
                             }
+                            checkMessage = false;
                             if (message.messageOwner.media != null && !(message.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty)) {
-                                messageString = message.messageText;
                                 currentMessagePaint = messagePrintingPaint;
+                                messageString = Emoji.replaceEmoji(Html.fromHtml(String.format("<font color=#316f9f>%s:</font> <font color=#316f9f>%s</font>", name, message.messageText)));
                             } else {
-                                checkMessage = false;
                                 if (message.messageOwner.message != null) {
                                     messageString = Emoji.replaceEmoji(Html.fromHtml(String.format("<font color=#316f9f>%s:</font> <font color=#808080>%s</font>", name, message.messageOwner.message.replace("\n", " "))));
                                 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 8cb09a12a..2d17cddf1 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -693,7 +693,11 @@ public void onScroll(AbsListView absListView, int firstVisibleItem, int visibleI
             TextView textView = (TextView)fragmentView.findViewById(R.id.slideToCancelTextView);
             textView.setText(LocaleController.getString("SlideToCancel", R.string.SlideToCancel));
             textView = (TextView)fragmentView.findViewById(R.id.bottom_overlay_chat_text);
-            textView.setText(LocaleController.getString("DeleteThisGroup", R.string.DeleteThisGroup));
+            if (currentUser == null) {
+                textView.setText(LocaleController.getString("DeleteThisGroup", R.string.DeleteThisGroup));
+            } else {
+                textView.setText(LocaleController.getString("DeleteThisChat", R.string.DeleteThisChat));
+            }
             textView = (TextView)fragmentView.findViewById(R.id.secret_title);
             textView.setText(LocaleController.getString("EncryptedDescriptionTitle", R.string.EncryptedDescriptionTitle));
             textView = (TextView)fragmentView.findViewById(R.id.secret_description1);
@@ -749,15 +753,6 @@ public boolean onKey(View view, int i, KeyEvent keyEvent) {
                 }
             });
 
-            messsageEditText.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View view) {
-                    if (emojiPopup != null && emojiPopup.isShowing()) {
-                        showEmojiPopup(false);
-                    }
-                }
-            });
-
             messsageEditText.setOnEditorActionListener(new TextView.OnEditorActionListener() {
                 @Override
                 public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
@@ -856,9 +851,7 @@ public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3)
 
                 @Override
                 public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
-                    String message = charSequence.toString().trim();
-                    message = message.replaceAll("\n\n+", "\n\n");
-                    message = message.replaceAll(" +", " ");
+                    String message = getTrimmedString(charSequence.toString());
                     sendButton.setEnabled(message.length() != 0);
                     checkSendButton();
 
@@ -894,10 +887,19 @@ public void afterTextChanged(Editable editable) {
             bottomOverlayChat.setOnClickListener(new View.OnClickListener() {
                 @Override
                 public void onClick(View view) {
-                    if (currentChat != null) {
-                        MessagesController.getInstance().deleteDialog(-currentChat.id, 0, false);
-                        finishFragment();
-                    }
+                    AlertDialog.Builder builder = new AlertDialog.Builder(parentActivity);
+                    builder.setMessage(LocaleController.getString("AreYouSure", R.string.AreYouSure));
+                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                    builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialogInterface, int i) {
+                            MessagesController.getInstance().deleteDialog(dialog_id, 0, false);
+                            finishFragment();
+                        }
+                    });
+                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                    visibleDialog = builder.show();
+                    visibleDialog.setCanceledOnTouchOutside(true);
                 }
             });
 
@@ -931,7 +933,8 @@ public void onSwipeLeft() {
                     ChatActivity.this.onSwipeLeft();
                 }
             });
-            if (currentChat != null && (currentChat instanceof TLRPC.TL_chatForbidden || currentChat.left)) {
+            if (currentChat != null && (currentChat instanceof TLRPC.TL_chatForbidden || currentChat.left) ||
+                    currentUser != null && (currentUser instanceof TLRPC.TL_userDeleted || currentUser instanceof TLRPC.TL_userEmpty)) {
                 bottomOverlayChat.setVisibility(View.VISIBLE);
             } else {
                 bottomOverlayChat.setVisibility(View.GONE);
@@ -945,6 +948,17 @@ public void onSwipeLeft() {
         return fragmentView;
     }
 
+    private String getTrimmedString(String src) {
+        String result = src.trim();
+        while (src.startsWith("\n")) {
+            src = src.substring(1);
+        }
+        while (src.endsWith("\n")) {
+            src = src.substring(0, src.length() - 1);
+        }
+        return src;
+    }
+
     private boolean onSwipeLeft() {
         if (swipeOpening) {
             return false;
@@ -978,9 +992,7 @@ private boolean onSwipeRight() {
     }
 
     private void checkSendButton() {
-        String message = messsageEditText.getText().toString().trim();
-        message = message.replaceAll("\n\n+", "\n\n");
-        message = message.replaceAll(" +", " ");
+        String message = getTrimmedString(messsageEditText.getText().toString());
         if (message.length() > 0) {
             sendButton.setVisibility(View.VISIBLE);
             audioSendButton.setVisibility(View.INVISIBLE);
@@ -1093,8 +1105,7 @@ public void onAnimationRepeat(Animator animator) {
     }
 
     private void sendMessage() {
-        String message = messsageEditText.getText().toString().trim();
-        if (processSendingText(message)) {
+        if (processSendingText(messsageEditText.getText().toString())) {
             messsageEditText.setText("");
             lastTypingTimeSend = 0;
             chatListView.post(new Runnable() {
@@ -1451,20 +1462,11 @@ private void updateSubtitle() {
                     }
                 }
             } else if (currentUser != null) {
-                if (currentUser.status == null) {
-                    actionBar.setSubtitle(LocaleController.getString("Offline", R.string.Offline));
-                } else {
-                    int currentTime = ConnectionsManager.getInstance().getCurrentTime();
-                    if (currentUser.status.expires > currentTime) {
-                        actionBar.setSubtitle(LocaleController.getString("Online", R.string.Online));
-                    } else {
-                        if (currentUser.status.expires <= 10000) {
-                            actionBar.setSubtitle(LocaleController.getString("Invisible", R.string.Invisible));
-                        } else {
-                            actionBar.setSubtitle(LocaleController.formatDateOnline(currentUser.status.expires));
-                        }
-                    }
+                TLRPC.User user = MessagesController.getInstance().users.get(currentUser.id);
+                if (user != null) {
+                    currentUser = user;
                 }
+                actionBar.setSubtitle(LocaleController.formatUserStatus(currentUser));
             }
         } else {
             lastPrintString = printString;
@@ -1513,7 +1515,7 @@ public void onSizeChanged(int height) {
         }
         int rotation = manager.getDefaultDisplay().getRotation();
 
-        if (height > Emoji.scale(50)) {
+        if (height > Utilities.dp(50)) {
             if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
                 keyboardHeightLand = height;
                 parentActivity.getSharedPreferences("emoji", 0).edit().putInt("kbd_height_land3", keyboardHeightLand).commit();
@@ -1632,8 +1634,7 @@ public void restoreSelfArgs(Bundle args) {
     }
 
     public boolean processSendingText(String text) {
-        text = text.replaceAll("\n\n+", "\n\n");
-        text = text.replaceAll(" +", " ");
+        text = getTrimmedString(text);
         if (text.length() != 0) {
             int count = (int)Math.ceil(text.length() / 2048.0f);
             for (int a = 0; a < count; a++) {
@@ -2453,8 +2454,13 @@ private void updateContactStatus() {
         if (currentUser == null) {
             topPanel.setVisibility(View.GONE);
         } else {
+            TLRPC.User user = MessagesController.getInstance().users.get(currentUser.id);
+            if (user != null) {
+                currentUser = user;
+            }
             if (currentEncryptedChat != null && !(currentEncryptedChat instanceof TLRPC.TL_encryptedChat)
                     || currentUser.id / 1000 == 333
+                    || currentUser instanceof TLRPC.TL_userEmpty || currentUser instanceof TLRPC.TL_userDeleted
                     || (currentUser.phone != null && currentUser.phone.length() != 0 &&
                     ContactsController.getInstance().contactsDict.get(currentUser.id) != null &&
                     (ContactsController.getInstance().contactsDict.size() != 0 || !ContactsController.getInstance().loadingContacts))) {
@@ -2544,7 +2550,7 @@ private void showEmojiPopup(boolean show) {
         if (parentActivity == null) {
             return;
         }
-        InputMethodManager localInputMethodManager = (InputMethodManager)parentActivity.getSystemService("input_method");
+        InputMethodManager localInputMethodManager = (InputMethodManager)parentActivity.getSystemService(Context.INPUT_METHOD_SERVICE);
         if (show) {
             if (emojiPopup == null) {
                 createEmojiPopup();
@@ -2553,10 +2559,10 @@ private void showEmojiPopup(boolean show) {
             WindowManager manager = (WindowManager) ApplicationLoader.applicationContext.getSystemService(Activity.WINDOW_SERVICE);
             int rotation = manager.getDefaultDisplay().getRotation();
             if (keyboardHeight <= 0) {
-                keyboardHeight = parentActivity.getSharedPreferences("emoji", 0).getInt("kbd_height", Emoji.scale(200.0f));
+                keyboardHeight = parentActivity.getSharedPreferences("emoji", 0).getInt("kbd_height", Utilities.dp(200));
             }
             if (keyboardHeightLand <= 0) {
-                keyboardHeightLand = parentActivity.getSharedPreferences("emoji", 0).getInt("kbd_height_land3", Emoji.scale(200.0f));
+                keyboardHeightLand = parentActivity.getSharedPreferences("emoji", 0).getInt("kbd_height_land3", Utilities.dp(200));
             }
             if (rotation == Surface.ROTATION_270 || rotation == Surface.ROTATION_90) {
                 currentHeight = keyboardHeightLand;
@@ -2852,7 +2858,10 @@ public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
         avatarItem.setShowAsAction(SupportMenuItem.SHOW_AS_ACTION_ALWAYS);
         avatarItem.setActionView(R.layout.chat_header_layout);
 
-        if (currentEncryptedChat != null && !(currentEncryptedChat instanceof TLRPC.TL_encryptedChat) || currentChat != null && (currentChat instanceof TLRPC.TL_chatForbidden || currentChat.left)) {
+        if (currentEncryptedChat != null && !(currentEncryptedChat instanceof TLRPC.TL_encryptedChat) ||
+                currentChat != null && (currentChat instanceof TLRPC.TL_chatForbidden || currentChat.left) ||
+                currentUser != null && (currentUser instanceof TLRPC.TL_userDeleted || currentUser instanceof TLRPC.TL_userEmpty)) {
+
             if (menuItem != null) {
                 menuItem.setVisible(false);
             }
@@ -2904,7 +2913,8 @@ public void onClick(DialogInterface dialog, int which) {
                         }
                     });
                     builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    builder.show().setCanceledOnTouchOutside(true);
+                    visibleDialog = builder.show();
+                    visibleDialog.setCanceledOnTouchOutside(true);
                 }
             });
             timerButton.setTime(currentEncryptedChat.ttl);
@@ -3137,6 +3147,9 @@ public void onClick(DialogInterface dialogInterface, int i) {
                                     }
                                 }
                                 if (locFile != null) {
+                                    if (parentActivity == null) {
+                                        return;
+                                    }
                                     if (LocaleController.getInstance().applyLanguageFile(locFile)) {
                                         ((LaunchActivity)parentActivity).presentFragment(new LanguageSelectActivity(), "settings_lang", false);
                                     } else if (parentActivity != null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
index de76abda3..491ff34bb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ContactAddActivity.java
@@ -131,20 +131,7 @@ private void updateAvatarLayout() {
             return;
         }
         phoneText.setText(PhoneFormat.getInstance().format("+" + user.phone));
-        if (user.status == null) {
-            onlineText.setText(LocaleController.getString("Offline", R.string.Offline));
-        } else {
-            int currentTime = ConnectionsManager.getInstance().getCurrentTime();
-            if (user.status.expires > currentTime) {
-                onlineText.setText(LocaleController.getString("Online", R.string.Online));
-            } else {
-                if (user.status.expires <= 10000) {
-                    onlineText.setText(LocaleController.getString("Invisible", R.string.Invisible));
-                } else {
-                    onlineText.setText(LocaleController.formatDateOnline(user.status.expires));
-                }
-            }
-        }
+        onlineText.setText(LocaleController.formatUserStatus(user));
 
         TLRPC.FileLocation photo = null;
         if (user.photo != null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
index 7c220f551..bf4662c90 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/CountrySelectActivity.java
@@ -10,7 +10,6 @@
 
 import android.content.Context;
 import android.content.Intent;
-import android.graphics.PixelFormat;
 import android.os.Bundle;
 import android.support.v4.internal.view.SupportMenuItem;
 import android.support.v4.view.MenuItemCompat;
@@ -150,7 +149,6 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
         });
 
         getWindow().setBackgroundDrawableResource(R.drawable.transparent);
-        getWindow().setFormat(PixelFormat.RGB_565);
     }
 
     public void applySelfActionBar() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
index c550918f7..2142380a4 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/GroupCreateActivity.java
@@ -12,7 +12,9 @@
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
+import android.graphics.Paint;
 import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
 import android.os.Build;
 import android.os.Bundle;
 import android.support.v4.internal.view.SupportMenuItem;
@@ -39,7 +41,6 @@
 import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.ContactsController;
-import org.telegram.messenger.Emoji;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
@@ -57,14 +58,42 @@
 import java.util.TimerTask;
 
 public class GroupCreateActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+
+    public static class XImageSpan extends ImageSpan {
+        public int uid;
+
+        public XImageSpan(Drawable d, int verticalAlignment) {
+            super(d, verticalAlignment);
+        }
+
+        @Override
+        public int getSize(Paint paint, CharSequence text, int start, int end, Paint.FontMetricsInt fm) {
+            if (fm == null) {
+                fm = new Paint.FontMetricsInt();
+            }
+
+            int sz = super.getSize(paint, text, start, end, fm);
+
+            int offset = Utilities.dp(6);
+            int w = (fm.bottom - fm.top) / 2;
+            fm.top = -w - offset;
+            fm.bottom = w - offset;
+            fm.ascent = -w - offset;
+            fm.leading = 0;
+            fm.descent = w - offset;
+
+            return sz;
+        }
+    }
+
     private SectionedBaseAdapter listViewAdapter;
     private PinnedHeaderListView listView;
     private TextView emptyTextView;
     private EditText userSelectEditText;
     private boolean ignoreChange = false;
 
-    private HashMap<Integer, Emoji.XImageSpan> selectedContacts =  new HashMap<Integer, Emoji.XImageSpan>();
-    private ArrayList<Emoji.XImageSpan> allSpans = new ArrayList<Emoji.XImageSpan>();
+    private HashMap<Integer, XImageSpan> selectedContacts =  new HashMap<Integer, XImageSpan>();
+    private ArrayList<XImageSpan> allSpans = new ArrayList<XImageSpan>();
 
     private boolean searchWas;
     private boolean searching;
@@ -150,7 +179,7 @@ public void afterTextChanged(Editable editable) {
                                 }
                                 Spannable span = userSelectEditText.getText();
                                 for (int a = 0; a < allSpans.size(); a++) {
-                                    Emoji.XImageSpan sp = allSpans.get(a);
+                                    XImageSpan sp = allSpans.get(a);
                                     if (span.getSpanStart(sp) == -1) {
                                         allSpans.remove(sp);
                                         selectedContacts.remove(sp.uid);
@@ -207,7 +236,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                         listView.invalidateViews();
                     }
                     if (selectedContacts.containsKey(user.id)) {
-                        Emoji.XImageSpan span = selectedContacts.get(user.id);
+                        XImageSpan span = selectedContacts.get(user.id);
                         selectedContacts.remove(user.id);
                         SpannableStringBuilder text = new SpannableStringBuilder(userSelectEditText.getText());
                         text.delete(text.getSpanStart(span), text.getSpanEnd(span));
@@ -221,7 +250,7 @@ public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                             return;
                         }
                         ignoreChange = true;
-                        Emoji.XImageSpan span = createAndPutChipForUser(user);
+                        XImageSpan span = createAndPutChipForUser(user);
                         span.uid = user.id;
                         ignoreChange = false;
                     }
@@ -295,7 +324,7 @@ public void onResume() {
         ((LaunchActivity)parentActivity).updateActionBar();
     }
 
-    public Emoji.XImageSpan createAndPutChipForUser(TLRPC.User user) {
+    public XImageSpan createAndPutChipForUser(TLRPC.User user) {
         LayoutInflater lf = (LayoutInflater)parentActivity.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
         View textView = lf.inflate(R.layout.group_create_bubble, null);
         TextView text = (TextView)textView.findViewById(R.id.bubble_text_view);
@@ -321,7 +350,7 @@ public void onResume() {
         bmpDrawable.setBounds(0, 0, b.getWidth(), b.getHeight());
 
         SpannableStringBuilder ssb = new SpannableStringBuilder("");
-        Emoji.XImageSpan span = new Emoji.XImageSpan(bmpDrawable, ImageSpan.ALIGN_BASELINE);
+        XImageSpan span = new XImageSpan(bmpDrawable, ImageSpan.ALIGN_BASELINE);
         allSpans.add(span);
         selectedContacts.put(user.id, span);
         for (ImageSpan sp : allSpans) {
@@ -559,22 +588,11 @@ public View getItemView(int section, int position, View convertView, ViewGroup p
             int placeHolderId = Utilities.getUserAvatarForId(user.id);
             holder.avatarImage.setImage(photo, "50_50", placeHolderId);
 
-            if (user.status == null) {
-                holder.messageTextView.setText(LocaleController.getString("Offline", R.string.Offline));
-                holder.messageTextView.setTextColor(0xff808080);
+            holder.messageTextView.setText(LocaleController.formatUserStatus(user));
+            if (user.status != null && user.status.expires > ConnectionsManager.getInstance().getCurrentTime()) {
+                holder.messageTextView.setTextColor(0xff357aa8);
             } else {
-                int currentTime = ConnectionsManager.getInstance().getCurrentTime();
-                if (user.status.expires > currentTime) {
-                    holder.messageTextView.setTextColor(0xff357aa8);
-                    holder.messageTextView.setText(LocaleController.getString("Online", R.string.Online));
-                } else {
-                    if (user.status.expires <= 10000) {
-                        holder.messageTextView.setText(LocaleController.getString("Invisible", R.string.Invisible));
-                    } else {
-                        holder.messageTextView.setText(LocaleController.formatDateOnline(user.status.expires));
-                    }
-                    holder.messageTextView.setTextColor(0xff808080);
-                }
+                holder.messageTextView.setTextColor(0xff808080);
             }
 
             return convertView;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java
index 292d696a8..392979698 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/IntroActivity.java
@@ -218,6 +218,8 @@ protected void onResume() {
             }
             justCreated = false;
         }
+        Utilities.checkForCrashes(this);
+        Utilities.checkForUpdates(this);
     }
 
     private class IntroAdapter extends PagerAdapter {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index 1dcdf76c9..9142e011f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -15,7 +15,6 @@
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.database.Cursor;
-import android.graphics.PixelFormat;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
@@ -35,7 +34,6 @@
 import android.widget.Toast;
 
 import org.telegram.PhoneFormat.PhoneFormat;
-import org.telegram.messenger.BuildVars;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.MediaController;
@@ -49,9 +47,6 @@
 import org.telegram.ui.Views.BaseFragment;
 import org.telegram.ui.Views.NotificationView;
 
-import net.hockeyapp.android.CrashManager;
-import net.hockeyapp.android.UpdateManager;
-
 import java.io.BufferedReader;
 import java.io.InputStream;
 import java.io.InputStreamReader;
@@ -84,7 +79,6 @@ protected void onCreate(Bundle savedInstanceState) {
 
         this.setTheme(R.style.Theme_TMessages);
         getWindow().setBackgroundDrawableResource(R.drawable.transparent);
-        getWindow().setFormat(PixelFormat.RGB_565);
 
         if (!UserConfig.clientActivated) {
             Intent intent = getIntent();
@@ -238,246 +232,249 @@ private void handleIntent(Intent intent, boolean isNew, boolean restore) {
         imagesPathArray = null;
         documentsPathArray = null;
 
-        if (intent != null && intent.getAction() != null && !restore) {
-            if (Intent.ACTION_SEND.equals(intent.getAction())) {
-                boolean error = false;
-                String type = intent.getType();
-                if (type != null && type.equals("text/plain")) {
-                    String text = intent.getStringExtra(Intent.EXTRA_TEXT);
-                    String subject = intent.getStringExtra(Intent.EXTRA_SUBJECT);
+        if ((getIntent().getFlags() & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) == 0) {
+
+            if (intent != null && intent.getAction() != null && !restore) {
+                if (Intent.ACTION_SEND.equals(intent.getAction())) {
+                    boolean error = false;
+                    String type = intent.getType();
+                    if (type != null && type.equals("text/plain")) {
+                        String text = intent.getStringExtra(Intent.EXTRA_TEXT);
+                        String subject = intent.getStringExtra(Intent.EXTRA_SUBJECT);
 
-                    if (text != null && text.length() != 0) {
-                        if ((text.startsWith("http://") || text.startsWith("https://")) && subject != null && subject.length() != 0) {
-                            text = subject + "\n" + text;
+                        if (text != null && text.length() != 0) {
+                            if ((text.startsWith("http://") || text.startsWith("https://")) && subject != null && subject.length() != 0) {
+                                text = subject + "\n" + text;
+                            }
+                            sendingText = text;
+                        } else {
+                            error = true;
                         }
-                        sendingText = text;
-                    } else {
-                        error = true;
-                    }
-                } else if (type != null && type.equals(ContactsContract.Contacts.CONTENT_VCARD_TYPE)) {
-                    try {
-                        Uri uri = (Uri)intent.getExtras().get(Intent.EXTRA_STREAM);
-                        if (uri != null) {
-                            ContentResolver cr = getContentResolver();
-                            InputStream stream = cr.openInputStream(uri);
+                    } else if (type != null && type.equals(ContactsContract.Contacts.CONTENT_VCARD_TYPE)) {
+                        try {
+                            Uri uri = (Uri) intent.getExtras().get(Intent.EXTRA_STREAM);
+                            if (uri != null) {
+                                ContentResolver cr = getContentResolver();
+                                InputStream stream = cr.openInputStream(uri);
 
-                            String name = null;
-                            String nameEncoding = null;
-                            String nameCharset = null;
-                            ArrayList<String> phones = new ArrayList<String>();
-                            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(stream, "UTF-8"));
-                            String line = null;
-                            while ((line = bufferedReader.readLine()) != null) {
-                                String[] args = line.split(":");
-                                if (args.length != 2) {
-                                    continue;
-                                }
-                                if (args[0].startsWith("FN")) {
-                                    String[] params = args[0].split(";");
-                                    for (String param : params) {
-                                        String[] args2 = param.split("=");
-                                        if (args2.length != 2) {
-                                            continue;
-                                        }
-                                        if (args2[0].equals("CHARSET")) {
-                                            nameCharset = args2[1];
-                                        } else if (args2[0].equals("ENCODING")) {
-                                            nameEncoding = args2[1];
-                                        }
+                                String name = null;
+                                String nameEncoding = null;
+                                String nameCharset = null;
+                                ArrayList<String> phones = new ArrayList<String>();
+                                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(stream, "UTF-8"));
+                                String line = null;
+                                while ((line = bufferedReader.readLine()) != null) {
+                                    String[] args = line.split(":");
+                                    if (args.length != 2) {
+                                        continue;
                                     }
-                                    name = args[1];
-                                    if (nameEncoding != null && nameEncoding.equalsIgnoreCase("QUOTED-PRINTABLE")) {
-                                        while (name.endsWith("=") && nameEncoding != null) {
-                                            name = name.substring(0, name.length() - 1);
-                                            line = bufferedReader.readLine();
-                                            if (line == null) {
-                                                break;
+                                    if (args[0].startsWith("FN")) {
+                                        String[] params = args[0].split(";");
+                                        for (String param : params) {
+                                            String[] args2 = param.split("=");
+                                            if (args2.length != 2) {
+                                                continue;
+                                            }
+                                            if (args2[0].equals("CHARSET")) {
+                                                nameCharset = args2[1];
+                                            } else if (args2[0].equals("ENCODING")) {
+                                                nameEncoding = args2[1];
                                             }
-                                            name += line;
                                         }
-                                        byte[] bytes = Utilities.decodeQuotedPrintable(name.getBytes());
-                                        if (bytes != null && bytes.length != 0) {
-                                            String decodedName = new String(bytes, nameCharset);
-                                            if (decodedName != null) {
-                                                name = decodedName;
+                                        name = args[1];
+                                        if (nameEncoding != null && nameEncoding.equalsIgnoreCase("QUOTED-PRINTABLE")) {
+                                            while (name.endsWith("=") && nameEncoding != null) {
+                                                name = name.substring(0, name.length() - 1);
+                                                line = bufferedReader.readLine();
+                                                if (line == null) {
+                                                    break;
+                                                }
+                                                name += line;
+                                            }
+                                            byte[] bytes = Utilities.decodeQuotedPrintable(name.getBytes());
+                                            if (bytes != null && bytes.length != 0) {
+                                                String decodedName = new String(bytes, nameCharset);
+                                                if (decodedName != null) {
+                                                    name = decodedName;
+                                                }
                                             }
                                         }
-                                    }
-                                } else if (args[0].startsWith("TEL")) {
-                                    String phone = PhoneFormat.stripExceptNumbers(args[1], true);
-                                    if (phone.length() > 0) {
-                                        phones.add(phone);
+                                    } else if (args[0].startsWith("TEL")) {
+                                        String phone = PhoneFormat.stripExceptNumbers(args[1], true);
+                                        if (phone.length() > 0) {
+                                            phones.add(phone);
+                                        }
                                     }
                                 }
-                            }
-                            if (name != null && !phones.isEmpty()) {
-                                contactsToSend = new ArrayList<TLRPC.User>();
-                                for (String phone : phones) {
-                                    TLRPC.User user = new TLRPC.TL_userContact();
-                                    user.phone = phone;
-                                    user.first_name = name;
-                                    user.last_name = "";
-                                    user.id = 0;
-                                    contactsToSend.add(user);
+                                if (name != null && !phones.isEmpty()) {
+                                    contactsToSend = new ArrayList<TLRPC.User>();
+                                    for (String phone : phones) {
+                                        TLRPC.User user = new TLRPC.TL_userContact();
+                                        user.phone = phone;
+                                        user.first_name = name;
+                                        user.last_name = "";
+                                        user.id = 0;
+                                        contactsToSend.add(user);
+                                    }
                                 }
+                            } else {
+                                error = true;
                             }
-                        } else {
+                        } catch (Exception e) {
+                            FileLog.e("tmessages", e);
                             error = true;
                         }
-                    } catch (Exception e) {
-                        FileLog.e("tmessages", e);
-                        error = true;
-                    }
-                } else {
-                    Parcelable parcelable = intent.getParcelableExtra(Intent.EXTRA_STREAM);
-                    if (parcelable == null) {
-                        return;
-                    }
-                    String path = null;
-                    if (!(parcelable instanceof Uri)) {
-                        parcelable = Uri.parse(parcelable.toString());
-                    }
-                    Uri uri = (Uri)parcelable;
-                    if (uri != null && type != null && type.startsWith("image/")) {
-                        String tempPath = Utilities.getPath(uri);
-                        boolean isGif = false;
-                        if (tempPath != null && tempPath.endsWith(".gif")) {
-                            isGif = true;
-                            documentPath = tempPath;
-                        } else if (tempPath == null) {
-                            isGif = MediaController.isGif(uri);
-                            if (isGif) {
-                                documentPath = MediaController.copyDocumentToCache(uri);
-                            }
+                    } else {
+                        Parcelable parcelable = intent.getParcelableExtra(Intent.EXTRA_STREAM);
+                        if (parcelable == null) {
+                            return;
                         }
-                        if (!isGif || documentPath == null) {
-                            photoPath = uri;
+                        String path = null;
+                        if (!(parcelable instanceof Uri)) {
+                            parcelable = Uri.parse(parcelable.toString());
                         }
-                    } else {
-                        path = Utilities.getPath(uri);
-                        if (path != null) {
-                            if (path.startsWith("file:")) {
-                                path = path.replace("file://", "");
+                        Uri uri = (Uri) parcelable;
+                        if (uri != null && type != null && type.startsWith("image/")) {
+                            String tempPath = Utilities.getPath(uri);
+                            boolean isGif = false;
+                            if (tempPath != null && tempPath.endsWith(".gif")) {
+                                isGif = true;
+                                documentPath = tempPath;
+                            } else if (tempPath == null) {
+                                isGif = MediaController.isGif(uri);
+                                if (isGif) {
+                                    documentPath = MediaController.copyDocumentToCache(uri);
+                                }
                             }
-                            if (type != null && type.startsWith("video/")) {
-                                videoPath = path;
-                            } else {
-                                documentPath = path;
+                            if (!isGif || documentPath == null) {
+                                photoPath = uri;
                             }
                         } else {
-                            error = true;
-                        }
-                    }
-                    if (error) {
-                        Toast.makeText(this, "Unsupported content", Toast.LENGTH_SHORT).show();
-                    }
-                }
-            } else if (intent.getAction().equals(Intent.ACTION_SEND_MULTIPLE)) {
-                boolean error = false;
-                try {
-                    ArrayList<Parcelable> uris = intent.getParcelableArrayListExtra(Intent.EXTRA_STREAM);
-                    String type = intent.getType();
-                    if (uris != null) {
-                        if (type != null && type.startsWith("image/")) {
-                            for (Parcelable parcelable : uris) {
-                                if (!(parcelable instanceof Uri)) {
-                                    parcelable = Uri.parse(parcelable.toString());
+                            path = Utilities.getPath(uri);
+                            if (path != null) {
+                                if (path.startsWith("file:")) {
+                                    path = path.replace("file://", "");
                                 }
-                                Uri uri = (Uri)parcelable;
-                                String tempPath = Utilities.getPath(uri);
-
-                                boolean isGif = false;
-                                if (tempPath != null && tempPath.endsWith(".gif")) {
-                                    isGif = true;
-                                } else if (tempPath == null) {
-                                    isGif = MediaController.isGif(uri);
-                                    if (isGif) {
-                                        tempPath = MediaController.copyDocumentToCache(uri);
-                                    }
+                                if (type != null && type.startsWith("video/")) {
+                                    videoPath = path;
+                                } else {
+                                    documentPath = path;
                                 }
-                                if (isGif && tempPath != null) {
-                                    if (documentsPathArray == null) {
-                                        documentsPathArray = new ArrayList<String>();
+                            } else {
+                                error = true;
+                            }
+                        }
+                        if (error) {
+                            Toast.makeText(this, "Unsupported content", Toast.LENGTH_SHORT).show();
+                        }
+                    }
+                } else if (intent.getAction().equals(Intent.ACTION_SEND_MULTIPLE)) {
+                    boolean error = false;
+                    try {
+                        ArrayList<Parcelable> uris = intent.getParcelableArrayListExtra(Intent.EXTRA_STREAM);
+                        String type = intent.getType();
+                        if (uris != null) {
+                            if (type != null && type.startsWith("image/")) {
+                                for (Parcelable parcelable : uris) {
+                                    if (!(parcelable instanceof Uri)) {
+                                        parcelable = Uri.parse(parcelable.toString());
                                     }
-                                    try {
-                                        documentsPathArray.add(tempPath);
-                                    } catch (Exception e) {
-                                        FileLog.e("tmessages", e);
+                                    Uri uri = (Uri) parcelable;
+                                    String tempPath = Utilities.getPath(uri);
+
+                                    boolean isGif = false;
+                                    if (tempPath != null && tempPath.endsWith(".gif")) {
+                                        isGif = true;
+                                    } else if (tempPath == null) {
+                                        isGif = MediaController.isGif(uri);
+                                        if (isGif) {
+                                            tempPath = MediaController.copyDocumentToCache(uri);
+                                        }
                                     }
-                                } else {
-                                    if (imagesPathArray == null) {
-                                        imagesPathArray = new ArrayList<Uri>();
+                                    if (isGif && tempPath != null) {
+                                        if (documentsPathArray == null) {
+                                            documentsPathArray = new ArrayList<String>();
+                                        }
+                                        try {
+                                            documentsPathArray.add(tempPath);
+                                        } catch (Exception e) {
+                                            FileLog.e("tmessages", e);
+                                        }
+                                    } else {
+                                        if (imagesPathArray == null) {
+                                            imagesPathArray = new ArrayList<Uri>();
+                                        }
+                                        imagesPathArray.add(uri);
                                     }
-                                    imagesPathArray.add(uri);
-                                }
-                            }
-                        } else {
-                            for (Parcelable parcelable : uris) {
-                                if (!(parcelable instanceof Uri)) {
-                                    parcelable = Uri.parse(parcelable.toString());
                                 }
-                                String path = Utilities.getPath((Uri) parcelable);
-                                if (path != null) {
-                                    if (path.startsWith("file:")) {
-                                        path = path.replace("file://", "");
+                            } else {
+                                for (Parcelable parcelable : uris) {
+                                    if (!(parcelable instanceof Uri)) {
+                                        parcelable = Uri.parse(parcelable.toString());
                                     }
-                                    if (documentsPathArray == null) {
-                                        documentsPathArray = new ArrayList<String>();
+                                    String path = Utilities.getPath((Uri) parcelable);
+                                    if (path != null) {
+                                        if (path.startsWith("file:")) {
+                                            path = path.replace("file://", "");
+                                        }
+                                        if (documentsPathArray == null) {
+                                            documentsPathArray = new ArrayList<String>();
+                                        }
+                                        documentsPathArray.add(path);
                                     }
-                                    documentsPathArray.add(path);
                                 }
                             }
+                        } else {
+                            error = true;
                         }
-                    } else {
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
                         error = true;
                     }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
-                    error = true;
-                }
-                if (error) {
-                    Toast.makeText(this, "Unsupported content", Toast.LENGTH_SHORT).show();
-                }
-            } else if (Intent.ACTION_VIEW.equals(intent.getAction())) {
-                try {
-                    Cursor cursor = getContentResolver().query(intent.getData(), null, null, null, null);
-                    if (cursor != null) {
-                        if (cursor.moveToFirst()) {
-                            int userId = cursor.getInt(cursor.getColumnIndex("DATA4"));
-                            NotificationCenter.getInstance().postNotificationName(MessagesController.closeChats);
-                            push_user_id = userId;
+                    if (error) {
+                        Toast.makeText(this, "Unsupported content", Toast.LENGTH_SHORT).show();
+                    }
+                } else if (Intent.ACTION_VIEW.equals(intent.getAction())) {
+                    try {
+                        Cursor cursor = getContentResolver().query(intent.getData(), null, null, null, null);
+                        if (cursor != null) {
+                            if (cursor.moveToFirst()) {
+                                int userId = cursor.getInt(cursor.getColumnIndex("DATA4"));
+                                NotificationCenter.getInstance().postNotificationName(MessagesController.closeChats);
+                                push_user_id = userId;
+                            }
+                            cursor.close();
                         }
-                        cursor.close();
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
                     }
-                } catch (Exception e) {
-                    FileLog.e("tmessages", e);
+                } else if (intent.getAction().equals("org.telegram.messenger.OPEN_ACCOUNT")) {
+                    open_settings = 1;
                 }
-            } else if (intent.getAction().equals("org.telegram.messenger.OPEN_ACCOUNT")) {
-                open_settings = 1;
             }
-        }
 
-        if (getIntent().getAction() != null && getIntent().getAction().startsWith("com.tmessages.openchat") && (getIntent().getFlags() & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) == 0 && !restore) {
-            int chatId = getIntent().getIntExtra("chatId", 0);
-            int userId = getIntent().getIntExtra("userId", 0);
-            int encId = getIntent().getIntExtra("encId", 0);
-            if (chatId != 0) {
-                TLRPC.Chat chat = MessagesController.getInstance().chats.get(chatId);
-                if (chat != null) {
-                    NotificationCenter.getInstance().postNotificationName(MessagesController.closeChats);
-                    push_chat_id = chatId;
-                }
-            } else if (userId != 0) {
-                TLRPC.User user = MessagesController.getInstance().users.get(userId);
-                if (user != null) {
-                    NotificationCenter.getInstance().postNotificationName(MessagesController.closeChats);
-                    push_user_id = userId;
-                }
-            } else if (encId != 0) {
-                TLRPC.EncryptedChat chat = MessagesController.getInstance().encryptedChats.get(encId);
-                if (chat != null) {
-                    NotificationCenter.getInstance().postNotificationName(MessagesController.closeChats);
-                    push_enc_id = encId;
+            if (getIntent().getAction() != null && getIntent().getAction().startsWith("com.tmessages.openchat") && !restore) {
+                int chatId = getIntent().getIntExtra("chatId", 0);
+                int userId = getIntent().getIntExtra("userId", 0);
+                int encId = getIntent().getIntExtra("encId", 0);
+                if (chatId != 0) {
+                    TLRPC.Chat chat = MessagesController.getInstance().chats.get(chatId);
+                    if (chat != null) {
+                        NotificationCenter.getInstance().postNotificationName(MessagesController.closeChats);
+                        push_chat_id = chatId;
+                    }
+                } else if (userId != 0) {
+                    TLRPC.User user = MessagesController.getInstance().users.get(userId);
+                    if (user != null) {
+                        NotificationCenter.getInstance().postNotificationName(MessagesController.closeChats);
+                        push_user_id = userId;
+                    }
+                } else if (encId != 0) {
+                    TLRPC.EncryptedChat chat = MessagesController.getInstance().encryptedChats.get(encId);
+                    if (chat != null) {
+                        NotificationCenter.getInstance().postNotificationName(MessagesController.closeChats);
+                        push_enc_id = encId;
+                    }
                 }
             }
         }
@@ -618,16 +615,6 @@ public void didSelectDialog(MessagesActivity messageFragment, long dialog_id) {
         }
     }
 
-    private void checkForCrashes() {
-        CrashManager.register(this, BuildVars.HOCKEY_APP_HASH);
-    }
-
-    private void checkForUpdates() {
-        if (BuildVars.DEBUG_VERSION) {
-            UpdateManager.register(this, BuildVars.HOCKEY_APP_HASH);
-        }
-    }
-
     @Override
     protected void onActivityResult(int requestCode, int resultCode, Intent data) {
         super.onActivityResult(requestCode, resultCode, data);
@@ -663,8 +650,8 @@ protected void onResume() {
             notificationView = (NotificationView) getLayoutInflater().inflate(R.layout.notification_layout, null);
         }
         fixLayout();
-        checkForCrashes();
-        checkForUpdates();
+        Utilities.checkForCrashes(this);
+        Utilities.checkForUpdates(this);
         ApplicationLoader.resetLastPauseTime();
         supportInvalidateOptionsMenu();
         updateActionBar();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
index 37dc07ec7..b487659dd 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivity.java
@@ -135,7 +135,11 @@ public void onClick(View view) {
                 }
                 TLRPC.User user = MessagesController.getInstance().users.get(fromId);
                 if (user != null) {
-                    avatarImageView.setImage(user.photo.photo_small, "50_50", Utilities.getUserAvatarForId(user.id));
+                    TLRPC.FileLocation photo = null;
+                    if (user.photo != null) {
+                        photo = user.photo.photo_small;
+                    }
+                    avatarImageView.setImage(photo, "50_50", Utilities.getUserAvatarForId(user.id));
                     nameTextView.setText(Utilities.formatName(user.first_name, user.last_name));
                 }
                 userLocation = new Location("network");
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
index 62bb91234..d4ffe8728 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
@@ -13,7 +13,6 @@
 import android.app.AlertDialog;
 import android.content.Intent;
 import android.content.SharedPreferences;
-import android.graphics.PixelFormat;
 import android.graphics.Point;
 import android.os.Bundle;
 import android.support.v4.internal.view.SupportMenuItem;
@@ -50,6 +49,8 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
     @Override
     protected void onResume() {
         super.onResume();
+        Utilities.checkForCrashes(this);
+        Utilities.checkForUpdates(this);
         ApplicationLoader.resetLastPauseTime();
     }
 
@@ -197,7 +198,6 @@ protected void onCreate(Bundle savedInstanceState) {
         }
 
         getWindow().setBackgroundDrawableResource(R.drawable.transparent);
-        getWindow().setFormat(PixelFormat.RGB_565);
     }
 
     @Override
@@ -241,7 +241,7 @@ public void needShowAlert(String text) {
 
     @Override
     public void needShowProgress() {
-        Utilities.ShowProgressDialog(this, getResources().getString(R.string.Loading));
+        Utilities.ShowProgressDialog(this, LocaleController.getString("Loading", R.string.Loading));
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityPhoneView.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityPhoneView.java
index e6f7bda6b..c46d1d4d5 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityPhoneView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityPhoneView.java
@@ -394,7 +394,7 @@ public void onShow() {
 
     @Override
     public String getHeaderName() {
-        return getResources().getString(R.string.YourPhone);
+        return LocaleController.getString("YourPhone", R.string.YourPhone);
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityRegisterView.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityRegisterView.java
index 2a128493e..5a9485489 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityRegisterView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivityRegisterView.java
@@ -95,7 +95,7 @@ public void onBackPressed() {
 
     @Override
     public String getHeaderName() {
-        return getResources().getString(R.string.YourName);
+        return LocaleController.getString("YourName", R.string.YourName);
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivitySmsView.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivitySmsView.java
index d9283a4b8..e7f4e2845 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivitySmsView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivitySmsView.java
@@ -100,7 +100,7 @@ public boolean onEditorAction(TextView textView, int i, KeyEvent keyEvent) {
 
     @Override
     public String getHeaderName() {
-        return getResources().getString(R.string.YourCode);
+        return LocaleController.getString("YourCode", R.string.YourCode);
     }
 
     @Override
@@ -124,7 +124,7 @@ public void setParams(Bundle params) {
         }
 
         String number = PhoneFormat.getInstance().format(phone);
-        confirmTextView.setText(Html.fromHtml(String.format(ApplicationLoader.applicationContext.getResources().getString(R.string.SentSmsCode) + " <b>%s</b>", number)));
+        confirmTextView.setText(Html.fromHtml(String.format(LocaleController.getString("SentSmsCode", R.string.SentSmsCode) + " <b>%s</b>", number)));
 
         Utilities.showKeyboard(codeField);
         codeField.requestFocus();
@@ -139,7 +139,7 @@ public void setParams(Bundle params) {
         } catch (Exception e) {
             FileLog.e("tmessages", e);
         }
-        timeText.setText(String.format("%s 1:00", ApplicationLoader.applicationContext.getResources().getString(R.string.CallText)));
+        timeText.setText(String.format("%s 1:00", LocaleController.getString("CallText", R.string.CallText)));
         lastCurrentTime = System.currentTimeMillis();
         timeTimer = new Timer();
         timeTimer.schedule(new TimerTask() {
@@ -155,9 +155,9 @@ public void run() {
                         if (time >= 1000) {
                             int minutes = time / 1000 / 60;
                             int seconds = time / 1000 - minutes * 60;
-                            timeText.setText(String.format("%s %d:%02d", ApplicationLoader.applicationContext.getResources().getString(R.string.CallText), minutes, seconds));
+                            timeText.setText(String.format("%s %d:%02d", LocaleController.getString("CallText", R.string.CallText), minutes, seconds));
                         } else {
-                            timeText.setText(ApplicationLoader.applicationContext.getResources().getString(R.string.Calling));
+                            timeText.setText(LocaleController.getString("Calling", R.string.Calling));
                             synchronized(timerSync) {
                                 if (timeTimer != null) {
                                     timeTimer.cancel();
@@ -281,9 +281,9 @@ public void run() {
                                             if (time >= 1000) {
                                                 int minutes = time / 1000 / 60;
                                                 int seconds = time / 1000 - minutes * 60;
-                                                timeText.setText(String.format("%s %d:%02d", ApplicationLoader.applicationContext.getResources().getString(R.string.CallText), minutes, seconds));
+                                                timeText.setText(String.format("%s %d:%02d", LocaleController.getString("CallText", R.string.CallText), minutes, seconds));
                                             } else {
-                                                timeText.setText(ApplicationLoader.applicationContext.getResources().getString(R.string.Calling));
+                                                timeText.setText(LocaleController.getString("Calling", R.string.Calling));
                                                 synchronized(timerSync) {
                                                     if (timeTimer != null) {
                                                         timeTimer.cancel();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index 08a4c8d66..b72b9bdce 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -15,6 +15,7 @@
 import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.SharedPreferences;
+import android.content.pm.PackageInfo;
 import android.graphics.Typeface;
 import android.net.Uri;
 import android.os.Bundle;
@@ -61,6 +62,7 @@
 
 import java.io.File;
 import java.util.ArrayList;
+import java.util.Locale;
 
 public class SettingsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
     private ListView listView;
@@ -82,7 +84,6 @@
     private int sendLogsRow;
     private int clearLogsRow;
     private int switchBackendButtonRow;
-    private int rowCount;
     private int messagesSectionRow;
     private int sendByEnterRow;
     private int terminateSessionsRow;
@@ -94,6 +95,8 @@
     private int audioDownloadPrivateRow;
     private int telegramFaqRow;
     private int languageRow;
+    private int versionRow;
+    private int rowCount;
 
     private static class LinkMovementMethodMy extends LinkMovementMethod {
         @Override
@@ -198,6 +201,7 @@ public void run() {
         telegramFaqRow = rowCount++;
         askQuestionRow = rowCount++;
         logoutRow = rowCount++;
+        versionRow = rowCount++;
 
         return true;
     }
@@ -225,6 +229,9 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
             listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                 @Override
                 public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
+                    if (parentActivity == null) {
+                        return;
+                    }
                     if (i == textSizeRow) {
                         AlertDialog.Builder builder = new AlertDialog.Builder(parentActivity);
                         builder.setTitle(LocaleController.getString("TextSize", R.string.TextSize));
@@ -259,9 +266,6 @@ public void onClick(DialogInterface dialog, int which) {
                     } else if (i == backgroundRow) {
                         ((LaunchActivity)parentActivity).presentFragment(new SettingsWallpapersActivity(), "settings_wallpapers", false);
                     } else if (i == askQuestionRow) {
-                        if (parentActivity == null) {
-                            return;
-                        }
                         final TextView message = new TextView(parentActivity);
                         message.setText(Html.fromHtml(LocaleController.getString("AskAQuestionInfo", R.string.AskAQuestionInfo)));
                         message.setTextSize(18);
@@ -949,6 +953,18 @@ public void onClick(DialogInterface dialogInterface, int i) {
                     textView.setText(LocaleController.getString("Language", R.string.Language));
                     divider.setVisibility(View.VISIBLE);
                 }
+            } else if (type == 6) {
+                if (view == null) {
+                    LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+                    view = li.inflate(R.layout.settings_row_version, viewGroup, false);
+                    TextView textView = (TextView)view.findViewById(R.id.settings_row_text);
+                    try {
+                        PackageInfo pInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(ApplicationLoader.applicationContext.getPackageName(), 0);
+                        textView.setText(String.format(Locale.US, "Telegram for Android v%s (%d)", pInfo.versionName, pInfo.versionCode));
+                    } catch (Exception e) {
+                        FileLog.e("tmessages", e);
+                    }
+                }
             }
             return view;
         }
@@ -967,6 +983,8 @@ public int getItemViewType(int i) {
                 return 2;
             } else if (i == logoutRow) {
                 return 4;
+            } else if (i == versionRow) {
+                return 6;
             } else {
                 return 2;
             }
@@ -974,7 +992,7 @@ public int getItemViewType(int i) {
 
         @Override
         public int getViewTypeCount() {
-            return 6;
+            return 7;
         }
 
         @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/EmojiView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/EmojiView.java
index d147321fa..023a7b4c2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/EmojiView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/EmojiView.java
@@ -26,6 +26,7 @@
 import org.telegram.messenger.Emoji;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
+import org.telegram.messenger.Utilities;
 
 import java.util.ArrayList;
 
@@ -109,8 +110,8 @@ private void init() {
                 tabs.setViewPager(this.pager);
                 tabs.setShouldExpand(true);
                 tabs.setIndicatorColor(0xff33b5e5);
-                tabs.setIndicatorHeight(Emoji.scale(2.0F));
-                tabs.setUnderlineHeight(Emoji.scale(2.0F));
+                tabs.setIndicatorHeight(Utilities.dpf(2.0f));
+                tabs.setUnderlineHeight(Utilities.dpf(2.0f));
                 tabs.setUnderlineColor(1711276032);
                 tabs.setTabBackground(0);
                 LinearLayout localLinearLayout = new LinearLayout(getContext());
@@ -133,23 +134,23 @@ public boolean onLongClick(View paramAnonymousView) {
                         return true;
                     }
                 });
-                localLinearLayout.addView(localImageView, new LinearLayout.LayoutParams(Emoji.scale(61.0F), -1));
+                localLinearLayout.addView(localImageView, new LinearLayout.LayoutParams(Utilities.dpf(61.0f), -1));
                 this.recentsWrap = new FrameLayout(getContext());
                 this.recentsWrap.addView(this.views.get(0));
                 TextView localTextView = new TextView(getContext());
                 localTextView.setText(LocaleController.getString("NoRecent", R.string.NoRecent));
-                localTextView.setTextSize(18.0F);
+                localTextView.setTextSize(18.0f);
                 localTextView.setTextColor(-7829368);
                 localTextView.setGravity(17);
                 this.recentsWrap.addView(localTextView);
                 this.views.get(0).setEmptyView(localTextView);
-                addView(localLinearLayout, new LinearLayout.LayoutParams(-1, Emoji.scale(48.0F)));
+                addView(localLinearLayout, new LinearLayout.LayoutParams(-1, Utilities.dpf(48.0f)));
                 addView(this.pager);
                 loadRecents();
                 return;
             }
             GridView localGridView = new GridView(getContext());
-            localGridView.setColumnWidth(Emoji.scale(45.0F));
+            localGridView.setColumnWidth(Utilities.dpf(45.0f));
             localGridView.setNumColumns(-1);
             EmojiGridAdapter localEmojiGridAdapter = new EmojiGridAdapter(Emoji.data[i]);
             localGridView.setAdapter(localEmojiGridAdapter);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/GifDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/GifDrawable.java
index cf65c1481..93668ed3c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/GifDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/GifDrawable.java
@@ -361,7 +361,9 @@ public void draw(Canvas canvas) {
             }
             canvas.translate(mDstRect.left, mDstRect.top);
             canvas.scale(mSx, mSy);
-            canvas.drawBitmap(mColors, 0, mMetaData[0], 0f, 0f, mMetaData[0], mMetaData[1], true, mPaint);
+            if (mMetaData[0] > 0 && mMetaData[1] > 0) {
+                canvas.drawBitmap(mColors, 0, mMetaData[0], 0f, 0f, mMetaData[0], mMetaData[1], true, mPaint);
+            }
             if (mMetaData[4] >= 0 && mMetaData[2] > 1) {
                 UI_HANDLER.postDelayed(mInvalidateTask, mMetaData[4]);
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/ImageReceiver.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/ImageReceiver.java
index be6271972..1b4895f1c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/ImageReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/ImageReceiver.java
@@ -174,8 +174,30 @@ private void recycleBitmap(Bitmap newBitmap) {
     public void draw(Canvas canvas, int x, int y, int w, int h) {
         try {
             if (currentImage != null) {
-                currentImage.setBounds(x, y, x + w, y + h);
-                currentImage.draw(canvas);
+                int bitmapW = currentImage.getIntrinsicWidth();
+                int bitmapH = currentImage.getIntrinsicHeight();
+                float scaleW = bitmapW / (float)w;
+                float scaleH = bitmapH / (float)h;
+
+                if (Math.abs(scaleW - scaleH) > 0.05f) {
+                    canvas.save();
+                    canvas.clipRect(x, y, x + w, y + h);
+
+                    if (bitmapW / scaleH > w) {
+                        bitmapW /= scaleH;
+                        currentImage.setBounds(x - (bitmapW - w) / 2, y, x + (bitmapW + w) / 2, y + h);
+                    } else {
+                        bitmapH /= scaleW;
+                        currentImage.setBounds(x, y - (bitmapH - h) / 2, x + w, y + (bitmapH + h) / 2);
+                    }
+
+                    currentImage.draw(canvas);
+
+                    canvas.restore();
+                } else {
+                    currentImage.setBounds(x, y, x + w, y + h);
+                    currentImage.draw(canvas);
+                }
             } else if (last_placeholder != null) {
                 last_placeholder.setBounds(x, y, x + w, y + h);
                 last_placeholder.draw(canvas);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/PZSImageView.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/PZSImageView.java
index c3c3b9d19..e57f80a4a 100755
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/PZSImageView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/PZSImageView.java
@@ -25,6 +25,7 @@
 import android.widget.TextView;
 
 import org.telegram.messenger.FileLog;
+import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
 
 public class PZSImageView extends BackupImageView {
@@ -115,12 +116,11 @@ public boolean onSingleTapConfirmed(MotionEvent ev) {
 		});
 
         videoText = new TextView(getContext());
-        videoText.setText(getResources().getString(R.string.NoResult));
         videoText.setTextColor(0xffffffff);
         videoText.setBackgroundColor(0x66000000);
         videoText.setGravity(Gravity.CENTER);
         videoText.setTextSize(TypedValue.COMPLEX_UNIT_SP, 24);
-        videoText.setText(getResources().getString(R.string.NoChats));
+        videoText.setText(LocaleController.getString("NoChats", R.string.NoChats));
         videoText.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT, ViewGroup.LayoutParams.FILL_PARENT));
 	}
 
diff --git a/TMessagesProj/src/main/res/layout/settings_row_version.xml b/TMessagesProj/src/main/res/layout/settings_row_version.xml
new file mode 100644
index 000000000..8620120b6
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/settings_row_version.xml
@@ -0,0 +1,16 @@
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="56dp"
+    android:paddingTop="8dp">
+
+    <TextView
+        android:layout_marginTop="10dp"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:gravity="center"
+        android:textSize="14dp"
+        android:textColor="#a0a0a0"
+        android:id="@+id/settings_row_text"/>
+
+</FrameLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values-ar/strings.xml b/TMessagesProj/src/main/res/values-ar/strings.xml
index c6ab87364..323435c56 100644
--- a/TMessagesProj/src/main/res/values-ar/strings.xml
+++ b/TMessagesProj/src/main/res/values-ar/strings.xml
@@ -94,7 +94,7 @@
     <string name="Message">الرسالة</string>
     <string name="TypeMessage">أكتب رسالة</string>
     <string name="DOWNLOAD">تحميل</string>
-    <string name="Selected">محددة:</string>
+    <string name="Selected">محددة: %d</string>
     <string name="ShareMyContactInfo">شارك جهة الاتصال الخاصة بي</string>
     <string name="AddToContacts">أضف لجهات الاتصال</string>
     <string name="EncryptedPlaceholderTitleIncoming">%s قام بدعوتك لمحادثة سرية</string>
@@ -109,6 +109,7 @@
     <string name="YouWereKicked">لقد تم إخراجك من هذه المجموعة</string>
     <string name="YouLeft">لقد قمت بمغادرة المجموعة</string>
     <string name="DeleteThisGroup">حذف المجموعة</string>
+    <string name="DeleteThisChat">Delete this chat</string>
     <string name="SlideToCancel">قم بالسحب للإلغاء</string>
     <string name="SaveToDownloads">حفظ في الجهاز</string>
     <string name="ApplyLocalizationFile">تطبيق ملف التعريب</string>
@@ -231,7 +232,15 @@
     <string name="InAppNotifications">إشعارات داخل التطبيق</string>
     <string name="InAppSounds">أصوات داخل التطبيق</string>
     <string name="InAppVibrate">اهتزاز داخل التطبيق</string>
-    <string name="Vibrate">اهتزاز</string>
+    <string name="Vibrate">Vibrate</string>
+    <string name="VibrateSpeed">Vibration speed</string>
+    <string name="VibrateSpeedTitle">Pick a speed</string>
+    <string name="VibrateSpeedFast">Fast</string>
+    <string name="VibrateSpeedMedium">Medium</string>
+    <string name="VibrateSpeedSlow">Slow</string>
+    <string name="VibrateSpeedDefault">Standard</string>
+    <string name="VibrateCount">Vibrations number</string>
+    <string name="VibrateCountTitle">Pick the number fo vibrations</string>
     <string name="InAppPreview">معاينة داخل التطبيق</string>
     <string name="Reset">إعادة تعيين</string>
     <string name="ResetAllNotifications">إعادة تعيين كافة الإشعارات</string>
@@ -262,6 +271,8 @@
     <string name="TelegramFaqUrl">https://telegram.org/faq/ar</string>
     <string name="DeleteLocalization">Delete localization?</string>
     <string name="IncorrectLocalization">Incorrect localization file</string>
+    <string name="Enabled">Enabled</string>
+    <string name="Disabled">Disabled</string>
 
     <!--media view-->
     <string name="NoMedia">لا توجد وسائط بعد</string>
diff --git a/TMessagesProj/src/main/res/values-de/strings.xml b/TMessagesProj/src/main/res/values-de/strings.xml
index 28bac65bf..c799955e9 100644
--- a/TMessagesProj/src/main/res/values-de/strings.xml
+++ b/TMessagesProj/src/main/res/values-de/strings.xml
@@ -94,7 +94,7 @@
     <string name="Message">Nachricht</string>
     <string name="TypeMessage">Nachricht verfassen</string>
     <string name="DOWNLOAD">Download</string>
-    <string name="Selected">Ausgewählt:</string>
+    <string name="Selected">Ausgewählt: %d</string>
     <string name="ShareMyContactInfo">MEINE KONTAKTDATEN TEILEN</string>
     <string name="AddToContacts">ZU KONTAKTEN HINZUFÜGEN</string>
     <string name="EncryptedPlaceholderTitleIncoming">%s hat dich zu einem geheimen Chat eingeladen.</string>
@@ -109,6 +109,7 @@
     <string name="YouWereKicked">Du wurdest aus der Gruppe entfernt</string>
     <string name="YouLeft">Du hast die Gruppe verlassen</string>
     <string name="DeleteThisGroup">Diese Gruppe löschen</string>
+    <string name="DeleteThisChat">Delete this chat</string>
     <string name="SlideToCancel">WISCHEN UM ABZUBRECHEN</string>
     <string name="SaveToDownloads">In Ordner Downloads speichern</string>
     <string name="ApplyLocalizationFile">Sprachdatei benutzen</string>
@@ -232,6 +233,14 @@
     <string name="InAppSounds">In-App-Töne</string>
     <string name="InAppVibrate">In-App-Vibration</string>
     <string name="Vibrate">Vibrieren</string>
+    <string name="VibrateSpeed">Vibration speed</string>
+    <string name="VibrateSpeedTitle">Pick a speed</string>
+    <string name="VibrateSpeedFast">Fast</string>
+    <string name="VibrateSpeedMedium">Medium</string>
+    <string name="VibrateSpeedSlow">Slow</string>
+    <string name="VibrateSpeedDefault">Standard</string>
+    <string name="VibrateCount">Vibrations number</string>
+    <string name="VibrateCountTitle">Pick the number fo vibrations</string>
     <string name="InAppPreview">In-App-Vorschau</string>
     <string name="Reset">ZURÜCKSETZEN</string>
     <string name="ResetAllNotifications">Alle Benachrichtigungs-Einstellungen zurücksetzen</string>
@@ -262,6 +271,8 @@
     <string name="TelegramFaqUrl">https://telegram.org/faq</string>
     <string name="DeleteLocalization">Lokalisierung löschen?</string>
     <string name="IncorrectLocalization">Falsche Sprachdatei</string>
+    <string name="Enabled">Enabled</string>
+    <string name="Disabled">Disabled</string>
 
     <!--media view-->
     <string name="NoMedia">Noch keine geteilten Medien vorhanden</string>
diff --git a/TMessagesProj/src/main/res/values-es/strings.xml b/TMessagesProj/src/main/res/values-es/strings.xml
index f5a341b0e..d7e02c2df 100644
--- a/TMessagesProj/src/main/res/values-es/strings.xml
+++ b/TMessagesProj/src/main/res/values-es/strings.xml
@@ -94,7 +94,7 @@
     <string name="Message">Mensaje</string>
     <string name="TypeMessage">Escribe un mensaje</string>
     <string name="DOWNLOAD">Descargar</string>
-    <string name="Selected">Elegidos:</string>
+    <string name="Selected">Elegidos: %d</string>
     <string name="ShareMyContactInfo">COMPARTIR MI INFORMACIÓN DE CONTACTO</string>
     <string name="AddToContacts">AÑADIR A CONTACTOS</string>
     <string name="EncryptedPlaceholderTitleIncoming">%s te ha invitado a un chat secreto.</string>
@@ -109,6 +109,7 @@
     <string name="YouWereKicked">Has sido expulsado de este grupo</string>
     <string name="YouLeft">Has abandonado este grupo</string>
     <string name="DeleteThisGroup">Eliminar este grupo</string>
+    <string name="DeleteThisChat">Delete this chat</string>
     <string name="SlideToCancel">DESLIZA PARA CANCELAR</string>
     <string name="SaveToDownloads">Guardar en descargas</string>
     <string name="ApplyLocalizationFile">Aplicar fichero de localización</string>
@@ -232,6 +233,14 @@
     <string name="InAppSounds">Sonidos en la app</string>
     <string name="InAppVibrate">Vibración en la app</string>
     <string name="Vibrate">Vibración</string>
+    <string name="VibrateSpeed">Vibration speed</string>
+    <string name="VibrateSpeedTitle">Pick a speed</string>
+    <string name="VibrateSpeedFast">Fast</string>
+    <string name="VibrateSpeedMedium">Medium</string>
+    <string name="VibrateSpeedSlow">Slow</string>
+    <string name="VibrateSpeedDefault">Standard</string>
+    <string name="VibrateCount">Vibrations number</string>
+    <string name="VibrateCountTitle">Pick the number fo vibrations</string>
     <string name="InAppPreview">Vista previa en la app</string>
     <string name="Reset">RESTABLECER</string>
     <string name="ResetAllNotifications">Restablecer todas las notificaciones</string>
@@ -262,6 +271,8 @@
     <string name="TelegramFaqUrl">https://telegram.org/faq/es</string>
     <string name="DeleteLocalization">¿Eliminar localización?</string>
     <string name="IncorrectLocalization">Fichero de localización incorrecto</string>
+    <string name="Enabled">Enabled</string>
+    <string name="Disabled">Disabled</string>
 
     <!--media view-->
     <string name="NoMedia">No hay fotos ni vídeos compartidos aún</string>
diff --git a/TMessagesProj/src/main/res/values-nl/strings.xml b/TMessagesProj/src/main/res/values-nl/strings.xml
index c6ef21e91..07f55c4ce 100644
--- a/TMessagesProj/src/main/res/values-nl/strings.xml
+++ b/TMessagesProj/src/main/res/values-nl/strings.xml
@@ -94,7 +94,7 @@
     <string name="Message">Bericht</string>
     <string name="TypeMessage">Typ een bericht...</string>
     <string name="DOWNLOAD">Downloaden</string>
-    <string name="Selected">Geselecteerd:</string>
+    <string name="Selected">Geselecteerd: %d</string>
     <string name="ShareMyContactInfo">MIJN CONTACTGEGEVENS DELEN</string>
     <string name="AddToContacts">TOEVOEGEN AAN CONTACTEN</string>
     <string name="EncryptedPlaceholderTitleIncoming">%s heeft u uitgenodigd voor een privégesprek.</string>
@@ -109,6 +109,7 @@
     <string name="YouWereKicked">U bent verwijderd uit deze groep</string>
     <string name="YouLeft">U hebt deze groep verlaten</string>
     <string name="DeleteThisGroup">Deze groep verwijderen</string>
+    <string name="DeleteThisChat">Delete this chat</string>
     <string name="SlideToCancel">SLEEP OM TE ANNULEREN</string>
     <string name="SaveToDownloads">Opslaan in Downloads</string>
     <string name="ApplyLocalizationFile">Vertaling toepassen</string>
@@ -262,6 +263,8 @@
     <string name="TelegramFaqUrl">https://telegram.org/faq</string>
     <string name="DeleteLocalization">Verwijder vertaling?</string>
     <string name="IncorrectLocalization">Ongeldig vertalingsbestand</string>
+    <string name="Enabled">Enabled</string>
+    <string name="Disabled">Disabled</string>
 
     <!--media view-->
     <string name="NoMedia">Nog geen media gedeeld</string>
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 3cc27fb97..96ba11c09 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -94,7 +94,7 @@
     <string name="Message">Message</string>
     <string name="TypeMessage">Type message</string>
     <string name="DOWNLOAD">Download</string>
-    <string name="Selected">Selected:</string>
+    <string name="Selected">Selected: %d</string>
     <string name="ShareMyContactInfo">SHARE MY CONTACT INFO</string>
     <string name="AddToContacts">ADD TO CONTACTS</string>
     <string name="EncryptedPlaceholderTitleIncoming">%s invited you to join a secret chat.</string>
@@ -109,6 +109,7 @@
     <string name="YouWereKicked">You were removed from this group</string>
     <string name="YouLeft">You left this group</string>
     <string name="DeleteThisGroup">Delete this group</string>
+    <string name="DeleteThisChat">Delete this chat</string>
     <string name="SlideToCancel">SLIDE TO CANCEL</string>
     <string name="SaveToDownloads">Save to downloads</string>
     <string name="ApplyLocalizationFile">Apply localization file</string>
@@ -270,6 +271,8 @@
     <string name="TelegramFaqUrl">https://telegram.org/faq</string>
     <string name="DeleteLocalization">Delete localization?</string>
     <string name="IncorrectLocalization">Incorrect localization file</string>
+    <string name="Enabled">Enabled</string>
+    <string name="Disabled">Disabled</string>
 
     <!--media view-->
     <string name="NoMedia">No shared media yet</string>
