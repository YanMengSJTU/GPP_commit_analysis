diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/data/Vote.java b/TMessagesProj/src/main/java/org/pollgram/decision/data/Vote.java
index 73ca6a9d6..934e26c7c 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/data/Vote.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/data/Vote.java
@@ -64,7 +64,7 @@ public void setVoteTime(Date voteTime) {
 
     @Override
     public String toString() {
-        return "vote : " + vote;
+        return vote == null ? null : Boolean.toString(vote);
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/NewDecisionFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/NewDecisionFragment.java
index 7e8773db8..9f0801b84 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/NewDecisionFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/NewDecisionFragment.java
@@ -58,7 +58,6 @@
     private String decisionTitle;
     private ActionBarMenuItem nextItemMenu;
 
-
     public NewDecisionFragment(Bundle args) {
         super(args);
     }
@@ -199,8 +198,9 @@ private void saveDecision(List<Option> options) {
         return;
     }
 
+
     private void nextStep() {
-        String title = edTitle.getText().toString();
+        String title = UIUtils.getText(edTitle);
         if (title == null || title.trim().isEmpty()){
             Toast.makeText(getParentActivity(), R.string.pleaseSelectATitle, Toast.LENGTH_SHORT).show();
             return;
@@ -212,7 +212,7 @@ private void nextStep() {
         }
 
         decisionTitle = title;
-        decisionLongDescription = edLongDescription.getText().toString();
+        decisionLongDescription = UIUtils.getText(edLongDescription);
         showPage2();
     }
 
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/UIUtils.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/UIUtils.java
index 32eb9d5f7..7251a59a6 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/UIUtils.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/UIUtils.java
@@ -4,6 +4,7 @@
 import android.text.TextUtils;
 import android.util.TypedValue;
 import android.view.Gravity;
+import android.widget.EditText;
 import android.widget.TextView;
 
 import org.pollgram.R;
@@ -77,5 +78,18 @@ public static TextView init(ActionBar actionBar, String title,int drawableIcon){
         return subtitleTextView;
     }
 
+    /**
+     * @param ed
+     * @return a string from and edit text trimming it and removing non necessary newline suffix
+     */
+    public static String getText(EditText ed){
+        if (ed == null || ed.getText() == null)
+            return null;
+        String text = ed.getText().toString().trim();
+        if (text.charAt(text.length()-1) == '\n')
+            text = text.substring(1,text.length()-2);
+        return text;
+    }
+
 
 }
diff --git a/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java
index ff84480ff..b5b158038 100644
--- a/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java
+++ b/TMessagesProj/src/main/java/org/pollgram/decision/ui/VotesManagerFragment.java
@@ -35,9 +35,9 @@
 
     // menu ids
     private static int nextId = 1;
-    private static final int ID_CLOSE_DECISOIN = nextId++;
-    private static final int ID_REOPEN_DECISOIN = nextId++;
-    private static final int ID_DELETE_DECISOIN = nextId++;
+    private static final int ID_CLOSE_DECISION = nextId++;
+    private static final int ID_REOPEN_DECISION = nextId++;
+    private static final int ID_DELETE_DECISION = nextId++;
 
 
     public static final String PAR_DECISION_ID = "PAR_DECISION_ID";
@@ -82,9 +82,9 @@ public View createView(final Context context) {
         tvUserVoteCount = UIUtils.init(actionBar, decision.getTitle(), R.drawable.check_list);
         menu = actionBar.createMenu();
         ActionBarMenuItem headerItem = menu.addItem(0, R.drawable.ic_ab_other);
-        menuCloseDecisionItem = headerItem.addSubItem(ID_CLOSE_DECISOIN, context.getString(R.string.closeDecision), 0);
-        menuReopenDecisionItem =  headerItem.addSubItem(ID_REOPEN_DECISOIN, context.getString(R.string.reopenDecision), 0);
-        menuDeleteDecisionItem =headerItem.addSubItem(ID_DELETE_DECISOIN, context.getString(R.string.deleteDecision), 0);
+        menuCloseDecisionItem = headerItem.addSubItem(ID_CLOSE_DECISION, context.getString(R.string.closeDecision), 0);
+        menuReopenDecisionItem =  headerItem.addSubItem(ID_REOPEN_DECISION, context.getString(R.string.reopenDecision), 0);
+        menuDeleteDecisionItem =headerItem.addSubItem(ID_DELETE_DECISION, context.getString(R.string.deleteDecision), 0);
         
         actionBar.setBackButtonImage(R.drawable.ic_ab_back);
         actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
@@ -94,7 +94,7 @@ public void onItemClick(int id) {
                     finishFragment();
                     return;
                 }
-                if (id == ID_DELETE_DECISOIN) {
+                if (id == ID_DELETE_DECISION) {
                     AlertDialog.Builder builder = new AlertDialog.Builder(context);
                     builder.setMessage(R.string.deleteDecisionQuestion).setPositiveButton(R.string.yes, new DialogInterface.OnClickListener() {
                         @Override
@@ -109,21 +109,41 @@ public void onClick(DialogInterface dialog, int which) {
                             // nothing to do11
                         }
                     }).show();
+                    return;
                 }
-                int stringId;
-                if (id == ID_CLOSE_DECISOIN) {
-                    pollgramService.notifyClose(decision);
-                    stringId = R.string.decisionClosed;
-                } else if (id == ID_REOPEN_DECISOIN) {
+                if (id == ID_CLOSE_DECISION) {
+                    int voteCount = pollgramDAO.getUserVoteCount(decision);
+                    int membersCount = participantsUserIds.length;
+                    if (voteCount == membersCount) {
+                        // all users voted al least one option for the current decision
+                        closeDecision();
+                    } else {
+                        AlertDialog.Builder builder = new AlertDialog.Builder(context);
+                        builder.setMessage(context.getString(R.string.closeDecisionQuestion, voteCount, membersCount));
+                        builder.setPositiveButton(R.string.yes, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                closeDecision();
+                            }
+                        }).setNegativeButton(R.string.no, new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                // nothing to do11
+                            }
+                        }).show();
+                    }
+
+                } else if (id == ID_REOPEN_DECISION) {
                     pollgramService.notifyReopen(decision);
-                    stringId = R.string.decisionReopened;
+                    Toast.makeText(context, context.getString(R.string.decisionReopened), Toast.LENGTH_SHORT).show();
+                    votesManagerTabsFragment.updateView();
+                    updateView();
                 } else {
+
                     Log.e(LOG_TAG, "Unknown action id[" + id + "]");
                     return;
                 }
-                votesManagerTabsFragment.updateView();
-                updateView();
-                Toast.makeText(context, context.getString(stringId), Toast.LENGTH_SHORT).show();
+
             }
         });
         fragmentView = new SizeNotifierFrameLayout(context);
@@ -150,6 +170,14 @@ protected void onVoteSaved() {
         return rootView;
     }
 
+    private void closeDecision() {
+        pollgramService.notifyClose(decision);
+        Toast.makeText(getParentActivity(), getParentActivity().getString(R.string.decisionClosed), Toast.LENGTH_SHORT).show();
+        votesManagerTabsFragment.updateView();
+        updateView();
+    }
+
+
     private void updateView(){
         Context ctx = getParentActivity();
         decision = pollgramDAO.getDecision(decision.getId());
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 61b29b739..cfcdfd0b9 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -1,7 +1,5 @@
 <?xml version="1.0" encoding="utf-8"?>
 
-
-
 <resources>
     <string name="AppName">Pollgram</string>
     <string name="LanguageName">English</string>
@@ -1042,6 +1040,7 @@
     <string name="emptyTitleOnOption">Please select a title for the %1$d option.</string>
     <string name="saveDecisionQuestion">Save decision %1$s with %2$d options ?</string>
     <string name="you">you</string>
+    <string name="closeDecisionQuestion">Only %1$d users out of %2$d voted yet.\nAfter closing the decision it will be no longer possible for other users to vote, unless the decision will be reopened.\nAre you sure to close this decision ?</string>
 
     <!-- END of Pollgram text -->
 
