diff --git a/TMessagesProj/src/main/java/org/telegram/AutoProxy.java b/TMessagesProj/src/main/java/org/telegram/AutoProxy.java
index 5b8f47c83..3e1ed16f1 100644
--- a/TMessagesProj/src/main/java/org/telegram/AutoProxy.java
+++ b/TMessagesProj/src/main/java/org/telegram/AutoProxy.java
@@ -31,6 +31,9 @@
 import org.telegram.ui.ProxySettingsActivity;
 
 import java.util.ArrayList;
+import java.util.List;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 public class AutoProxy implements NotificationCenter.NotificationCenterDelegate {
 
@@ -48,88 +51,93 @@ public AutoProxy() {
         NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.didReceivedNewMessages);
     }
 
-    public boolean addAutoProxy(String urlProxy) {
-
-        try {
-            Uri data = Uri.parse(urlProxy);
-            if (data != null) {
-                user = null;
-                password = null;
-                port = null;
-                address = null;
-                secret = null;
-                String scheme = data.getScheme();
-                if (scheme != null) {
-                    if ((scheme.equals("http") || scheme.equals("https"))) {
-                        String host = data.getHost().toLowerCase();
-                        if (host.equals("telegram.me") || host.equals("t.me") || host.equals("telegram.dog") || host.equals("telesco.pe")) {
-                            String path = data.getPath();
-                            if (path != null) {
-                                if (path.startsWith("/socks") || path.startsWith("/proxy")) {
-                                    address = data.getQueryParameter("server");
-                                    port = data.getQueryParameter("port");
-                                    user = data.getQueryParameter("user");
-                                    password = data.getQueryParameter("pass");
-                                    secret = data.getQueryParameter("secret");
+    public void addAutoProxy(String urlProxy) {
+
+        List<String> urls = extractUrls(urlProxy);
+
+        for (int i = 0; i < urls.size(); i++) {
+            try {
+                Uri data = Uri.parse(urls.get(i));
+                if (data != null) {
+                    user = null;
+                    password = null;
+                    port = null;
+                    address = null;
+                    secret = null;
+                    String scheme = data.getScheme();
+                    if (scheme != null) {
+                        if ((scheme.equals("http") || scheme.equals("https"))) {
+                            String host = data.getHost().toLowerCase();
+                            if (host.equals("telegram.me") || host.equals("t.me") || host.equals("telegram.dog") || host.equals("telesco.pe")) {
+                                String path = data.getPath();
+                                if (path != null) {
+                                    if (path.startsWith("/socks") || path.startsWith("/proxy")) {
+                                        address = data.getQueryParameter("server");
+                                        port = data.getQueryParameter("port");
+                                        user = data.getQueryParameter("user");
+                                        password = data.getQueryParameter("pass");
+                                        secret = data.getQueryParameter("secret");
+                                    }
                                 }
                             }
+                        } else if (scheme.equals("tg")) {
+                            String url = data.toString();
+                            if (url.startsWith("tg:proxy") || url.startsWith("tg://proxy") || url.startsWith("tg:socks") || url.startsWith("tg://socks")) {
+                                url = url.replace("tg:proxy", "tg://telegram.org").replace("tg://proxy", "tg://telegram.org").replace("tg://socks", "tg://telegram.org").replace("tg:socks", "tg://telegram.org");
+                                data = Uri.parse(url);
+                                address = data.getQueryParameter("server");
+                                port = data.getQueryParameter("port");
+                                user = data.getQueryParameter("user");
+                                password = data.getQueryParameter("pass");
+                                secret = data.getQueryParameter("secret");
+                            }
                         }
-                    } else if (scheme.equals("tg")) {
-                        String url = data.toString();
-                        if (url.startsWith("tg:proxy") || url.startsWith("tg://proxy") || url.startsWith("tg:socks") || url.startsWith("tg://socks")) {
-                            url = url.replace("tg:proxy", "tg://telegram.org").replace("tg://proxy", "tg://telegram.org").replace("tg://socks", "tg://telegram.org").replace("tg:socks", "tg://telegram.org");
-                            data = Uri.parse(url);
-                            address = data.getQueryParameter("server");
-                            port = data.getQueryParameter("port");
-                            user = data.getQueryParameter("user");
-                            password = data.getQueryParameter("pass");
-                            secret = data.getQueryParameter("secret");
-                        }
-                    }
-                }
-                if (!TextUtils.isEmpty(address) && !TextUtils.isEmpty(port)) {
-                    if (user == null) {
-                        user = "";
-                    }
-                    if (password == null) {
-                        password = "";
-                    }
-                    if (secret == null) {
-                        secret = "";
                     }
+                    if (!TextUtils.isEmpty(address) && !TextUtils.isEmpty(port)) {
+                        if (user == null) {
+                            user = "";
+                        }
+                        if (password == null) {
+                            password = "";
+                        }
+                        if (secret == null) {
+                            secret = "";
+                        }
 
 
-                    final SharedConfig.ProxyInfo proxyInfo = new SharedConfig.ProxyInfo(secret, Integer.valueOf(port), user, password, secret);
-                    proxyInfo.checking = true;
-                    ConnectionsManager.getInstance(currentAccount).checkProxy(address, Integer.valueOf(port), user, password, secret, new RequestTimeDelegate() {
-                        @Override
-                        public void run(final long time) {
-                            AndroidUtilities.runOnUIThread(new Runnable() {
-                                @Override
-                                public void run() {
-                                    proxyInfo.availableCheckTime = SystemClock.elapsedRealtime();
-                                    proxyInfo.checking = false;
-                                    if (time == -1) {
-                                        proxyInfo.available = false;
-                                        proxyInfo.ping = 0;
-                                    } else {
-                                        proxyInfo.ping = time;
-                                        proxyInfo.available = true;
-                                        addProxy();
+                        final SharedConfig.ProxyInfo proxyInfo = new SharedConfig.ProxyInfo(secret, Integer.valueOf(port), user, password, secret);
+                        proxyInfo.checking = true;
+                        ConnectionsManager.getInstance(currentAccount).checkProxy(address, Integer.valueOf(port), user, password, secret, new RequestTimeDelegate() {
+                            @Override
+                            public void run(final long time) {
+                                AndroidUtilities.runOnUIThread(new Runnable() {
+                                    @Override
+                                    public void run() {
+                                        proxyInfo.availableCheckTime = SystemClock.elapsedRealtime();
+                                        proxyInfo.checking = false;
+                                        if (time == -1) {
+                                            proxyInfo.available = false;
+                                            proxyInfo.ping = 0;
+                                        } else {
+                                            proxyInfo.ping = time;
+                                            proxyInfo.available = true;
+                                            addProxy();
+                                        }
+
                                     }
+                                });
+                            }
+                        });
 
-                                }
-                            });
-                        }
-                    });
 
-                    return true;
+                    }
                 }
-            }
-        } catch (Exception ignore) {
+            } catch (Exception ignore) {
 
+            }
         }
-        return false;
+
+
     }
 
     private void addProxy() {
@@ -161,9 +169,9 @@ private void addProxy() {
         }
         editor.commit();
 
-//        SharedConfig.currentProxy = SharedConfig.addProxy(info);
-//
-//        ConnectionsManager.setProxySettings(true, address, p, user, password, secret);
+        SharedConfig.currentProxy = SharedConfig.addProxy(info);
+
+        ConnectionsManager.setProxySettings(true, address, p, user, password, secret);
         checkProxyList();
         NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.proxySettingsChanged);
 
@@ -177,9 +185,7 @@ public void didReceivedNotification(int id, int account, Object... args) {
             Long dialogId = (Long) args[0];
             ArrayList<MessageObject> messageObjects = (ArrayList<MessageObject>) args[1];
             for (int i = 0; i < messageObjects.size(); i++) {
-                if (messageObjects.get(i).messageText.toString().startsWith("https://t.me/proxy")) {
                     addAutoProxy(messageObjects.get(i).messageText.toString());
-                }
                 try {
 
                     for (int j = 0; j < messageObjects.get(i).messageOwner.reply_markup.rows.size(); j++) {
@@ -313,4 +319,19 @@ public void run() {
         }
     }
 
+
+    public static List<String> extractUrls(String text) {
+        List<String> containedUrls = new ArrayList<String>();
+        String urlRegex = "((https?|ftp|gopher|telnet|file):((//)|(\\\\))+[\\w\\d:#@%/;$()~_?\\+-=\\\\\\.&]*)";
+        Pattern pattern = Pattern.compile(urlRegex, Pattern.CASE_INSENSITIVE);
+        Matcher urlMatcher = pattern.matcher(text);
+
+        while (urlMatcher.find()) {
+            containedUrls.add(text.substring(urlMatcher.start(0),
+                    urlMatcher.end(0)));
+        }
+
+        return containedUrls;
+    }
+
 }
