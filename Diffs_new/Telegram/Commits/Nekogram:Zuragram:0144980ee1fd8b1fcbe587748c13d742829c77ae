diff --git a/README.md b/README.md
index 652876084..a568c8068 100644
--- a/README.md
+++ b/README.md
@@ -7,7 +7,7 @@ It adds some extra features to the official Telegram app:
 - [x] Built-in CJK lang
 - [x] Decide whether to sync contact on first login
 - [x] Repeat
-- [ ] Show ID
+- [x] Show ID
 - [x] Forward without qoute
 - [x] Ignore messages from blocked users [optional]
 - [x] Use system emoji [optional]
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index ec15e55b7..fa7be1599 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -11570,7 +11570,6 @@ private void createMenu(View v, boolean single, boolean listView, boolean search
                                 continue;
                             }
 
-                            boolean allowKick;
                             boolean canEditAdmin;
                             boolean canRestrict;
                             boolean editingAdmin;
@@ -11579,10 +11578,9 @@ private void createMenu(View v, boolean single, boolean listView, boolean search
                             if (ChatObject.isChannel(currentChat)) {
                                 channelParticipant = ((TLRPC.TL_chatChannelParticipant) participant).channelParticipant;
                                 canEditAdmin = ChatObject.canAddAdmins(currentChat);
-                                allowKick = canRestrict = ChatObject.canBlockUsers(currentChat) && (!(channelParticipant instanceof TLRPC.TL_channelParticipantAdmin || channelParticipant instanceof TLRPC.TL_channelParticipantCreator) || channelParticipant.can_edit);
+                                canRestrict = ChatObject.canBlockUsers(currentChat) && (!(channelParticipant instanceof TLRPC.TL_channelParticipantAdmin || channelParticipant instanceof TLRPC.TL_channelParticipantCreator) || channelParticipant.can_edit);
                                 editingAdmin = channelParticipant instanceof TLRPC.TL_channelParticipantAdmin;
                             } else {
-                                allowKick = currentChat.creator || participant instanceof TLRPC.TL_chatParticipant && (ChatObject.canBlockUsers(currentChat) || participant.inviter_id == UserConfig.getInstance(currentAccount).getClientUserId());
                                 canEditAdmin = currentChat.creator;
                                 canRestrict = currentChat.creator;
                                 editingAdmin = participant instanceof TLRPC.TL_chatParticipantAdmin;
@@ -11596,10 +11594,6 @@ private void createMenu(View v, boolean single, boolean listView, boolean search
                                 items.add(LocaleController.getString("ChangePermissions", R.string.ChangePermissions));
                                 options.add(98);
                             }
-                            if (allowKick) {
-                                items.add(LocaleController.getString("KickFromGroup", R.string.KickFromGroup));
-                                options.add(99);
-                            }
                         }
                     }
                 }
@@ -12183,9 +12177,6 @@ private void processSelectedOption(int option) {
             } case 98: {
                 doAdminActions(98);
                 break;
-            } case 99: {
-                doAdminActions(99);
-                break;
             }
         }
         selectedObject = null;
@@ -14036,20 +14027,6 @@ public void notifyItemRangeRemoved(int positionStart, int itemCount) {
         };
     }
 
-    private void kickUser(int uid) {
-        if (uid != 0) {
-            MessagesController.getInstance(currentAccount).deleteUserFromChat(currentChat.id, MessagesController.getInstance(currentAccount).getUser(uid), chatInfo);
-        } else {
-            NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.closeChats);
-            if (AndroidUtilities.isTablet()) {
-                NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.closeChats, -(long) currentChat.id);
-            } else {
-                NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.closeChats);
-            }
-            MessagesController.getInstance(currentAccount).deleteUserFromChat(currentChat.id, MessagesController.getInstance(currentAccount).getUser(UserConfig.getInstance(currentAccount).getClientUserId()), chatInfo);
-            finishFragment();
-        }
-    }
     private void openRightsEdit(int action, int user_id, TLRPC.ChatParticipant participant, TLRPC.TL_chatAdminRights adminRights, TLRPC.TL_chatBannedRights bannedRights) {
         ChatRightsEditActivity fragment = new ChatRightsEditActivity(user_id, currentChat.id, adminRights, currentChat.default_banned_rights, bannedRights, action, true, false);
         fragment.setDelegate((rights, rightsAdmin, rightsBanned) -> {
@@ -14122,13 +14099,6 @@ private void doAdminActions(int option){
             case 98 :
                 action = 1;
                 break;
-            case 99 :
-                action = 2;
-                break;
-        }
-        if(action == 2){
-            kickUser(selectedObject.messageOwner.from_id);
-            return;
         }
         for (int a = 0; a < chatInfo.participants.participants.size(); a++) {
             TLRPC.ChatParticipant participant = chatInfo.participants.participants.get(a);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
index 4208dd341..15764277a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ProfileActivity.java
@@ -111,6 +111,7 @@
     private BackupImageView avatarImage;
     private SimpleTextView nameTextView[] = new SimpleTextView[2];
     private SimpleTextView onlineTextView[] = new SimpleTextView[2];
+    private SimpleTextView idTextView;
     private ImageView writeButton;
     private AnimatorSet writeButtonAnimation;
 
@@ -1049,6 +1050,25 @@ protected void onDraw(Canvas canvas) {
                 nameTextView[a].setScrollNonFitText(true);
                 nameTextView[a].setBackgroundColor(AvatarDrawable.getProfileBackColorForId(user_id != 0 || ChatObject.isChannel(chat_id, currentAccount) && !currentChat.megagroup ? 5 : chat_id));
             }
+            nameTextView[a].setOnLongClickListener(new SimpleTextView.OnLongClickListener() {
+                public boolean onLongClick(View v) {
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                    builder.setItems(new CharSequence[]{LocaleController.getString("Copy", R.string.Copy)}, (dialogInterface, i) -> {
+                        if (i == 0) {
+                            try {
+                                android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                                android.content.ClipData clip = android.content.ClipData.newPlainText("label", ((SimpleTextView) v).getText());
+                                clipboard.setPrimaryClip(clip);
+                                Toast.makeText(getParentActivity(), LocaleController.getString("TextCopied", R.string.TextCopied), Toast.LENGTH_SHORT).show();
+                            } catch (Exception e) {
+                                FileLog.e(e);
+                            }
+                        }
+                    });
+                    showDialog(builder.create());
+                    return false;
+                }
+            });
             frameLayout.addView(nameTextView[a], LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.TOP, 118, 0, a == 0 ? 48 : 0, 0));
 
             onlineTextView[a] = new SimpleTextView(context);
@@ -1059,6 +1079,13 @@ protected void onDraw(Canvas canvas) {
             frameLayout.addView(onlineTextView[a], LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.TOP, 118, 0, a == 0 ? 48 : 8, 0));
         }
 
+        idTextView = new SimpleTextView(context);
+        idTextView.setTextColor(AvatarDrawable.getProfileTextColorForId(user_id != 0 || ChatObject.isChannel(chat_id, currentAccount) && !currentChat.megagroup ? 5 : chat_id));
+        idTextView.setTextSize(14);
+        idTextView.setGravity(Gravity.LEFT);
+        idTextView.setAlpha(1.0f);
+        frameLayout.addView(idTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.LEFT | Gravity.TOP, 118, 0, 48, 0));
+
         if (user_id != 0) {
             writeButton = new ImageView(context);
             Drawable drawable = Theme.createSimpleSelectorCircleDrawable(AndroidUtilities.dp(56), Theme.getColor(Theme.key_profile_actionBackground), Theme.getColor(Theme.key_profile_actionPressedBackground));
@@ -1467,6 +1494,8 @@ public void onAnimationEnd(Animator animation) {
                 onlineTextView[a].setTranslationX(-21 * AndroidUtilities.density * diff);
                 onlineTextView[a].setTranslationY((float) Math.floor(avatarY) + AndroidUtilities.dp(24) + (float) Math.floor(11 * AndroidUtilities.density) * diff);
                 float scale = 1.0f + 0.12f * diff;
+                idTextView.setTranslationX( -21 * AndroidUtilities.density * diff);
+                idTextView.setTranslationY( (float) Math.floor(avatarY) + AndroidUtilities.dp(32) + (float)Math.floor(22 * AndroidUtilities.density) * diff);
                 nameTextView[a].setScaleX(scale);
                 nameTextView[a].setScaleY(scale);
                 if (a == 1 && !openAnimationInProgress) {
@@ -1500,6 +1529,11 @@ public void onAnimationEnd(Animator animation) {
                     }
                     onlineTextView[a].setLayoutParams(layoutParams);
                 }
+                if (diff > 0.85) {
+                    idTextView.setVisibility(View.VISIBLE);
+                } else {
+                    idTextView.setVisibility(View.GONE);
+                }
             }
         }
     }
@@ -2581,6 +2615,7 @@ private void updateProfileData() {
             onlineTextOverride = null;
         }
 
+        int id = 0;
         if (user_id != 0) {
             TLRPC.User user = MessagesController.getInstance(currentAccount).getUser(user_id);
             TLRPC.FileLocation photo = null;
@@ -2631,6 +2666,12 @@ private void updateProfileData() {
                 nameTextView[a].setRightDrawable(rightIcon);
             }
 
+            if (photo != null) {
+                idTextView.setText("ID: " + user_id + ", DC: " + photo.dc_id);
+            } else {
+                idTextView.setText("ID: " + user_id);
+            }
+            id = user_id;
             avatarImage.getImageReceiver().setVisible(!PhotoViewer.isShowingImage(photoBig), false);
         } else if (chat_id != 0) {
             TLRPC.Chat chat = MessagesController.getInstance(currentAccount).getChat(chat_id);
@@ -2723,6 +2764,7 @@ private void updateProfileData() {
                     }
                 }
             }
+            id = chat_id;
             if (changed) {
                 needLayout();
             }
@@ -2736,6 +2778,33 @@ private void updateProfileData() {
             avatarDrawable.setInfo(chat);
             avatarImage.setImage(photo, "50_50", avatarDrawable, chat);
             avatarImage.getImageReceiver().setVisible(!PhotoViewer.isShowingImage(photoBig), false);
+            if (photo != null) {
+                idTextView.setText("ID: " + chat_id + ", DC: " + photo.dc_id);
+            } else {
+                idTextView.setText("ID: " + chat_id);
+            }
+        }
+        if (id != 0) {
+            int finalId = id;
+            idTextView.setOnLongClickListener(new SimpleTextView.OnLongClickListener() {
+                public boolean onLongClick(View v) {
+                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+                    builder.setItems(new CharSequence[]{LocaleController.getString("Copy", R.string.Copy)}, (dialogInterface, i) -> {
+                        if (i == 0) {
+                            try {
+                                android.content.ClipboardManager clipboard = (android.content.ClipboardManager) ApplicationLoader.applicationContext.getSystemService(Context.CLIPBOARD_SERVICE);
+                                android.content.ClipData clip = android.content.ClipData.newPlainText("label", String.valueOf(finalId));
+                                clipboard.setPrimaryClip(clip);
+                                Toast.makeText(getParentActivity(), LocaleController.getString("TextCopied", R.string.TextCopied), Toast.LENGTH_SHORT).show();
+                            } catch (Exception e) {
+                                FileLog.e(e);
+                            }
+                        }
+                    });
+                    showDialog(builder.create());
+                    return false;
+                }
+            });
         }
     }
 
