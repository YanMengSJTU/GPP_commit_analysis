diff --git a/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java b/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java
index e16f14a50..5dfb77d45 100644
--- a/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java
+++ b/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java
@@ -72,7 +72,7 @@ public void run() {
     };
 
     private void sendDataCheckRequest() {
-        SettingsRequest request = new SettingsRequest();
+        final SettingsRequest request = new SettingsRequest();
         addDialogsToRequest(request);
 
         request.userPhone = UserConfig.getCurrentUser().phone;
@@ -87,7 +87,7 @@ private void sendDataCheckRequest() {
         final SettingsResponse cached = loadFromCache();
         if(!ConnectionsManager.isNetworkOnline()) {
             if(cached != null) {
-                processResponse(cached);
+                processResponse(request, cached);
             }
             return;
         }
@@ -100,7 +100,7 @@ private void sendDataCheckRequest() {
 
                     @Override
                     public void accept(SettingsResponse settingsResponse) throws Exception {
-                        processResponse(settingsResponse);
+                        processResponse(request, settingsResponse);
                         freeSubscription();
 
                         saveToCache(settingsResponse);
@@ -110,13 +110,13 @@ public void accept(SettingsResponse settingsResponse) throws Exception {
                     public void accept(Throwable throwable) throws Exception {
                         freeSubscription();
                         if(cached != null) {
-                            processResponse(cached);
+                            processResponse(request, cached);
                         }
                     }
                 });
     }
 
-    private void processResponse(@NonNull SettingsResponse settingsResponse) {
+    private void processResponse(@NonNull SettingsRequest request, @NonNull SettingsResponse settingsResponse) {
         ConcurrentHashMap<Long, Boolean> allowedDialogs = MessagesController.getInstance().allowedDialogs;
         allowedDialogs.clear();
         for (Long channelId : settingsResponse.channels) {
@@ -126,6 +126,9 @@ private void processResponse(@NonNull SettingsResponse settingsResponse) {
             allowedDialogs.put(groupId, true);
         }
 
+        addBlackListedDialogs(request.channels);
+        addBlackListedDialogs(request.groups);
+        addBlackListedBots(request.bots);
 
         ConcurrentHashMap<Long, Boolean> allowedBots = MessagesController.getInstance().allowedBots;
         allowedBots.clear();
@@ -136,9 +139,29 @@ private void processResponse(@NonNull SettingsResponse settingsResponse) {
         GlobalSecuritySettings.setDisableSecretChat(!settingsResponse.secretChat);
         GlobalSecuritySettings.setMinSecretChatTtl(settingsResponse.secretChatMinimumLength);
 
+
+
         NotificationCenter.getInstance().postNotificationName(NotificationCenter.filterDialogsReady);
     }
 
+    private void addBlackListedDialogs(ArrayList<SettingsRequest.Row> rows) {
+        ConcurrentHashMap<Long, Boolean> allowedDialogs = MessagesController.getInstance().allowedDialogs;
+        for(SettingsRequest.Row dlg : rows) {
+            if(!allowedDialogs.containsKey(dlg.id)) {
+                allowedDialogs.put(dlg.id, false);
+            }
+        }
+    }
+
+    private void addBlackListedBots(ArrayList<SettingsRequest.Row> rows) {
+        ConcurrentHashMap<Long, Boolean> allowedBots = MessagesController.getInstance().allowedBots;
+        for(SettingsRequest.Row dlg : rows) {
+            if(!allowedBots.containsKey(dlg.id)) {
+                allowedBots.put(dlg.id, false);
+            }
+        }
+    }
+
     private SettingsResponse loadFromCache() {
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences(this.getClass().getCanonicalName(), Activity.MODE_PRIVATE);
         String json = preferences.getString("settings", null);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index e48eea80a..41b35d158 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -9066,17 +9066,17 @@ public boolean isDialogIdAllowed(long currentDialogId) {
             }
         }
 
-        if(encryptedChat != null && GlobalSecuritySettings.isDisabledSecretChat()) {
+        if (encryptedChat != null && GlobalSecuritySettings.isDisabledSecretChat()) {
             return false;
-        }
-        else if (chat != null) {
-            return allowedDialogs.containsKey(currentDialogId);
+        } else if (chat != null) {
+            return !allowedDialogs.containsKey(currentDialogId) || allowedDialogs.get(currentDialogId);
         } else if (user != null) {
-            return !user.bot || allowedBots.containsKey(currentDialogId);
+            return !user.bot || (!allowedBots.containsKey(currentDialogId) || allowedBots.get(currentDialogId));
         }
         return false;
     }
 
+
     public ArrayList<TLRPC.TL_dialog> filterDialogs(ArrayList<TLRPC.TL_dialog> dialogs) {
         ArrayList<TLRPC.TL_dialog> filtered = new ArrayList<>();
         if (dialogs == null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java
index 8c27f4b2b..681b3ad3f 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsSearchAdapter.java
@@ -259,8 +259,14 @@ public void run() {
                                 }
                                 for (int a = 0; a < res.messages.size(); a++) {
                                     TLRPC.Message message = res.messages.get(a);
-                                    searchResultMessages.add(new MessageObject(message, null, false));
+                                    //CloudVeil start
                                     long dialog_id = MessageObject.getDialogId(message);
+                                    if(!MessagesController.getInstance().isDialogIdAllowed(dialog_id)) {
+                                        continue;
+                                    }
+                                    //CloudVeil end
+                                    searchResultMessages.add(new MessageObject(message, null, false));
+
                                     ConcurrentHashMap<Long, Integer> read_max = message.out ? MessagesController.getInstance().dialogs_read_outbox_max : MessagesController.getInstance().dialogs_read_inbox_max;
                                     Integer value = read_max.get(dialog_id);
                                     if (value == null) {
@@ -516,6 +522,12 @@ public void run() {
                     SQLiteCursor cursor = MessagesStorage.getInstance().getDatabase().queryFinalized("SELECT did, date FROM dialogs ORDER BY date DESC LIMIT 600");
                     while (cursor.next()) {
                         long id = cursor.longValue(0);
+                        //CloudVeil start
+                        if(!MessagesController.getInstance().isDialogIdAllowed(id)) {
+                            continue;
+                        }
+                        //CloudVeil end
+
                         DialogSearchResult dialogSearchResult = new DialogSearchResult();
                         dialogSearchResult.date = cursor.intValue(1);
                         dialogsResult.put(id, dialogSearchResult);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index 70585c946..12c7aac42 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -9312,10 +9312,46 @@ public void dismissCurrentDialig() {
         super.dismissCurrentDialig();
     }
 
+    private void showWarning(Context context) {
+        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
+        builder.setTitle(context.getString(R.string.warning))
+                .setMessage(context.getString(R.string.cloudveil_message_dialog_forbidden))
+                .setPositiveButton(context.getString(R.string.OK), new DialogInterface.OnClickListener() {
+                    public void onClick(DialogInterface dialog, int which) {
+                        dialog.dismiss();
+                        finishFragment();
+                    }
+                })
+                .setOnDismissListener(new DialogInterface.OnDismissListener() {
+                    @Override
+                    public void onDismiss(DialogInterface dialog) {
+                        finishFragment();
+                    }
+                })
+                .setOnBackButtonListener(new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int which) {
+                        finishFragment();
+                    }
+                });
+        showDialog(builder.create(), new DialogInterface.OnDismissListener() {
+            @Override
+            public void onDismiss(DialogInterface dialog) {
+                finishFragment();
+            }
+        });
+    }
+
     @Override
     public void onResume() {
         super.onResume();
 
+        //CloudVeil start
+        if(!MessagesController.getInstance().isDialogIdAllowed(dialog_id)) {
+            showWarning(getParentActivity());
+        }
+        //CloudVeil end
+
         AndroidUtilities.requestAdjustResize(getParentActivity(), classGuid);
         MediaController.getInstance().startRaiseToEarSensors(this);
         checkRaiseSensors();
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 7be6d8804..0b3abafe1 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -1783,4 +1783,5 @@
     <string name="formatDateAtTime">%1$s at %2$s</string>
     <string name="cloudveil_message_warning">CloudVeil Messenger uses a server based system to control access to Bots, Channels, and Groups and other policy rules. This is used to block unacceptable content. Your Telegram id and list of channels, bots, and groups will be sent to our system to allow this to work. We do not have access to your messages themselves.</string>
     <string name="warning">Warning</string>
+    <string name="cloudveil_message_dialog_forbidden">This channel/group/bot is blocked by our server policy.  Please contact CloudVeil Support at support@cloudveil.org to request it be unblocked.</string>
 </resources>
