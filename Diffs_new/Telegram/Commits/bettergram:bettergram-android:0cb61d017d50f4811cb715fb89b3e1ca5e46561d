diff --git a/TMessagesProj/src/main/java/io/bettergram/adapters/CryptoAdapter.java b/TMessagesProj/src/main/java/io/bettergram/adapters/CryptoAdapter.java
index 6ab56a22b..44865aa86 100644
--- a/TMessagesProj/src/main/java/io/bettergram/adapters/CryptoAdapter.java
+++ b/TMessagesProj/src/main/java/io/bettergram/adapters/CryptoAdapter.java
@@ -43,7 +43,7 @@
 import java.util.List;
 
 import static android.text.TextUtils.isEmpty;
-import static io.bettergram.service.CryptoDataService.EXTRA_LIMIT;
+import static io.bettergram.service.CryptoDataService.*;
 import static io.bettergram.telegram.messenger.AndroidUtilities.dp;
 
 public class CryptoAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {
@@ -94,6 +94,8 @@ public void run() {
         String crypto;
         ShineButton star;
 
+        boolean fromBind = false;
+
         public void setCrypto(String crypto) {
             this.crypto = crypto;
         }
@@ -134,20 +136,22 @@ public void setCrypto(String crypto) {
         @Override
         public void onClick(View v) {
             if (!star.isChecked()) {
-                star.setChecked(true);
-                star.showAnim();
+                star.setChecked(true, true);
             } else {
-                star.setChecked(false);
-                star.setCancel();
+                star.setChecked(false, true);
             }
         }
 
         @Override
         public void onCheckedChanged(View view, boolean checked) {
+            if (fromBind) {
+                fromBind = false;
+                return;
+            }
             for (int i = 0, size = data.size(); i < size; i++) {
                 if (data.get(i).code.equals(crypto)) {
                     data.get(i).favorite = checked;
-                    CryptoDataService.faveCrypto(checked, data.get(i));
+                    faveCurrency(checked, data.get(i));
                     break;
                 }
             }
@@ -162,6 +166,7 @@ public void onCheckedChanged(View view, boolean checked) {
                     iterator.remove();
                 }
             }
+            saveCurrencies(data);
         }
 
         @Override
@@ -437,7 +442,8 @@ public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int positi
                 );
                 main.textDayDelta.setCompoundDrawablePadding(2);
             }
-            main.star.setChecked(info.favorite);
+            main.fromBind = true;
+            main.star.setChecked(info.favorite, false);
         }
     }
 
diff --git a/TMessagesProj/src/main/java/io/bettergram/service/CryptoDataService.java b/TMessagesProj/src/main/java/io/bettergram/service/CryptoDataService.java
index 234ea6b0e..1558c90bc 100644
--- a/TMessagesProj/src/main/java/io/bettergram/service/CryptoDataService.java
+++ b/TMessagesProj/src/main/java/io/bettergram/service/CryptoDataService.java
@@ -1,32 +1,22 @@
 package io.bettergram.service;
 
-import static android.text.TextUtils.isEmpty;
-import static io.bettergram.telegram.messenger.ApplicationLoader.okhttp_client;
-
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.support.annotation.Nullable;
-import io.bettergram.data.CryptoCurrency;
-import io.bettergram.data.CryptoCurrencyData;
-import io.bettergram.data.CryptoCurrencyData__JsonHelper;
-import io.bettergram.data.CryptoCurrencyInfo;
-import io.bettergram.data.CryptoCurrencyInfoData;
-import io.bettergram.data.CryptoCurrencyInfoData__JsonHelper;
-import io.bettergram.data.CryptoCurrencyInfoResponse;
-import io.bettergram.data.CryptoCurrencyInfoResponse__JsonHelper;
+import android.util.Log;
+import io.bettergram.data.*;
 import io.bettergram.telegram.messenger.ApplicationLoader;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-import java.util.Objects;
-import java.util.Timer;
-import java.util.TimerTask;
 import okhttp3.HttpUrl;
 import okhttp3.Request;
 import okhttp3.Response;
 
+import java.io.IOException;
+import java.util.*;
+
+import static android.text.TextUtils.isEmpty;
+import static io.bettergram.telegram.messenger.ApplicationLoader.okhttp_client;
+
 public class CryptoDataService extends BaseDataService {
 
     public static final String CRYPTO_PREF = "CRYPTO_PREF";
@@ -89,7 +79,7 @@ private void startTimer(Intent intent) {
     }
 
     private List<CryptoCurrencyInfo> addIcons(List<CryptoCurrencyInfo> list,
-            List<CryptoCurrency> currencies) {
+                                              List<CryptoCurrency> currencies) {
         if (currencies == null) {
             return new ArrayList<>();
         }
@@ -203,15 +193,13 @@ public void run() {
                     cryptoResponse.data.list = addIcons(cryptoResponse.data.list, currencies);
                     if (!cryptoResponse.data.favorites.isEmpty()) {
                         for (int i = 0, size = cryptoResponse.data.favorites.size(); i < size;
-                                i++) {
+                             i++) {
                             cryptoResponse.data.favorites.get(i).favorite = true;
                         }
                     }
-                    String savedFaveCryptoJson = preferences
-                            .getString(KEY_CRYPTO_CURRENCIES_FAVORITE, null);
+                    String savedFaveCryptoJson = preferences.getString(KEY_CRYPTO_CURRENCIES_FAVORITE, null);
                     if (!isEmpty(savedFaveCryptoJson)) {
-                        CryptoCurrencyInfoData data = CryptoCurrencyInfoData__JsonHelper
-                                .parseFromJson(savedFaveCryptoJson);
+                        CryptoCurrencyInfoData data = CryptoCurrencyInfoData__JsonHelper.parseFromJson(savedFaveCryptoJson);
                         if (data != null && !data.favorites.isEmpty()) {
                             for (int i = 0, size = cryptoResponse.data.list.size(); i < size; i++) {
                                 final int index = i;
@@ -223,8 +211,7 @@ public void run() {
                         }
                     }
 
-                    String json = CryptoCurrencyInfoResponse__JsonHelper
-                            .serializeToJson(cryptoResponse);
+                    String json = CryptoCurrencyInfoResponse__JsonHelper.serializeToJson(cryptoResponse);
                     preferences.edit().putString(KEY_CRYPTO_CURRENCIES_SAVED, json).apply();
 
                     publishResults(json, NOTIFICATION, RESULT);
@@ -235,7 +222,28 @@ public void run() {
         }
     }
 
-    public static boolean faveCrypto(boolean fave, CryptoCurrencyInfo crypto) {
+    public static void saveCurrencies(List<CryptoCurrencyInfo> list) {
+        String json = preferences.getString(KEY_CRYPTO_CURRENCIES_SAVED, null);
+        if (!isEmpty(json)) {
+            try {
+                CryptoCurrencyInfoResponse data = CryptoCurrencyInfoResponse__JsonHelper.parseFromJson(json);
+                if (data.data == null) {
+                    data.data = new CryptoCurrencyInfoData();
+                }
+                if (data.data.list == null) {
+                    data.data.list = new ArrayList<>();
+                }
+                data.data.list.clear();
+                data.data.list.addAll(list);
+                json = CryptoCurrencyInfoResponse__JsonHelper.serializeToJson(data);
+                preferences.edit().putString(KEY_CRYPTO_CURRENCIES_SAVED, json).apply();
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+
+    public static void faveCurrency(boolean fave, CryptoCurrencyInfo crypto) {
         String json = preferences.getString(KEY_CRYPTO_CURRENCIES_FAVORITE, null);
 
         CryptoCurrencyInfoData data = null;
@@ -252,18 +260,22 @@ public static boolean faveCrypto(boolean fave, CryptoCurrencyInfo crypto) {
         if (data.favorites == null) {
             data.favorites = new ArrayList<>();
         }
+
         if (fave) {
             data.favorites.add(crypto);
         } else {
-            data.favorites.remove(crypto);
+            for (Iterator<CryptoCurrencyInfo> iter = data.favorites.listIterator(); iter.hasNext(); ) {
+                CryptoCurrencyInfo element = iter.next();
+                if (element.code.equals(crypto.code)) {
+                    iter.remove();
+                }
+            }
         }
         try {
-            preferences.edit().putString(KEY_CRYPTO_CURRENCIES_FAVORITE,
-                    CryptoCurrencyInfoData__JsonHelper.serializeToJson(data)).apply();
-            return true;
+            json = CryptoCurrencyInfoData__JsonHelper.serializeToJson(data);
+            preferences.edit().putString(KEY_CRYPTO_CURRENCIES_FAVORITE, json).apply();
         } catch (IOException e) {
             e.printStackTrace();
         }
-        return false;
     }
 }
diff --git a/TMessagesProj/src/main/java/io/bettergram/telegram/ui/DialogsActivity.java b/TMessagesProj/src/main/java/io/bettergram/telegram/ui/DialogsActivity.java
index 08b799907..8c75e3dcb 100644
--- a/TMessagesProj/src/main/java/io/bettergram/telegram/ui/DialogsActivity.java
+++ b/TMessagesProj/src/main/java/io/bettergram/telegram/ui/DialogsActivity.java
@@ -113,6 +113,8 @@
     private boolean cantSendToChannels;
     private boolean allowSwitchAccount;
 
+    private boolean backPressed = false;
+
     private int currentBottomTabPosition = 0;
 
     private DialogsActivityDelegate delegate;
@@ -1552,11 +1554,23 @@ public void onPause() {
         });
 
         SharedPreferences.Editor editor = ApplicationLoader.applicationContext.getSharedPreferences("userSavedStates", Context.MODE_PRIVATE).edit();
-        int tabPosition = newTabsView.getCurrentPage();
-        int navPosition = bottomBar.getSelectedPosition();
+        if (backPressed) {
+            backPressed = false;
+            int tabPosition = newTabsView.getCurrentPage();
+            int navPosition = bottomBar.getSelectedPosition();
+
+            editor.putInt("tabPosition", tabPosition).apply();
+            editor.putInt("navPosition", navPosition).apply();
+        } else {
+            editor.putInt("tabPosition", 0).apply();
+            editor.putInt("navPosition", 0).apply();
+        }
+    }
 
-        editor.putInt("tabPosition", tabPosition).apply();
-        editor.putInt("navPosition", navPosition).apply();
+    @Override
+    public boolean onBackPressed() {
+        backPressed = true;
+        return super.onBackPressed();
     }
 
     private void checkUnreadCount(boolean animated) {
