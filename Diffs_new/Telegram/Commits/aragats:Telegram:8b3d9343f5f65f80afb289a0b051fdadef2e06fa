diff --git a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
index 80e9dc7e7..7dfc5f4ba 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
@@ -12,14 +12,13 @@
 import android.content.SharedPreferences;
 
 import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.dto.Post;
 import org.telegram.messenger.dto.PostResponse;
-import org.telegram.messenger.object.PostObject;
-import org.telegram.messenger.object.VenueObject;
+import org.telegram.messenger.dto.Venue;
 import org.telegram.messenger.service.mock.PostServiceMock;
 import org.telegram.messenger.service.mock.VenueServiceMock;
 
 import java.util.ArrayList;
-import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
 
 //import org.telegram.messenger.TLRPC;
@@ -28,16 +27,13 @@
 //TODO Look at MessagesController methods. There are many good examples and best practice.
 public class PostsController implements NotificationCenter.NotificationCenterDelegate {
 
-    private ConcurrentHashMap<String, VenueObject> venuesMap = new ConcurrentHashMap<String, VenueObject>(100, 1.0f, 2);
+    public Venue currentVenue;
 
-    public List<VenueObject> venueObjects = new ArrayList<VenueObject>();
-    public VenueObject currentVenueObject;
+    public Post currentPost;
 
 
-
-
-    public ArrayList<PostObject> postObjects = new ArrayList<>();
-    public ConcurrentHashMap<String, PostObject> postsMap = new ConcurrentHashMap<>(100, 1.0f, 2);
+    public ArrayList<Post> posts = new ArrayList<>();
+    public ConcurrentHashMap<String, Post> postsMap = new ConcurrentHashMap<>(100, 1.0f, 2);
 
     public int totalDialogsCount = 0;
     public boolean loadingPosts = false;
@@ -62,7 +58,6 @@
     public static final int UPDATE_MASK_ALL = UPDATE_MASK_AVATAR | UPDATE_MASK_STATUS | UPDATE_MASK_NAME | UPDATE_MASK_CHAT_AVATAR | UPDATE_MASK_CHAT_NAME | UPDATE_MASK_CHAT_MEMBERS | UPDATE_MASK_USER_PRINT | UPDATE_MASK_USER_PHONE | UPDATE_MASK_READ_DIALOG_MESSAGE | UPDATE_MASK_PHONE;
 
 
-
     private static volatile PostsController Instance = null;
 
     public static PostsController getInstance() {
@@ -114,7 +109,7 @@ public void cleanUp() {
         SecretChatHelper.getInstance().cleanUp();
 
         postsMap.clear();
-        postObjects.clear();
+        posts.clear();
 
         totalDialogsCount = 0;
 
@@ -123,25 +118,11 @@ public void cleanUp() {
     }
 
 
-
-
-
-
-
-
-
-
     public void deletePost(final String did, int offset, final boolean onlyHistory) {
         // TODO Delete Post
     }
 
 
-
-
-
-
-
-
     public void loadPosts(final int offset, final int count, boolean fromCache) {
         if (loadingPosts) {
             return;
@@ -149,6 +130,7 @@ public void loadPosts(final int offset, final int count, boolean fromCache) {
         loadingPosts = true;
 //        NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
 
+        //TODO here async  request
         PostResponse postResponse = PostServiceMock.getPosts("location", null, offset, count);
 //        after getting response.
         processLoadedPosts(postResponse, offset, count);
@@ -156,11 +138,10 @@ public void loadPosts(final int offset, final int count, boolean fromCache) {
     }
 
 
-
-    public void processLoadedPosts(PostResponse postResponse,  final int offset,  final int count) {
-        postObjects.addAll(PostServiceMock.convertPost(postResponse.getPosts()));
-        for (PostObject postObject : postObjects) {
-            postsMap.putIfAbsent(postObject.getId(), postObject);
+    public void processLoadedPosts(PostResponse postResponse, final int offset, final int count) {
+        posts.addAll(postResponse.getPosts());
+        for (Post post : posts) {
+            postsMap.putIfAbsent(post.getId(), post);
         }
         loadingPosts = false;
         //TODO notify Activity to run postsAdapter.notifyDataSetChanged();
@@ -173,17 +154,22 @@ public void processLoadedPosts(PostResponse postResponse,  final int offset,  fi
 
 
     public void loadCurrentVenue(String location) {
-        this.currentVenueObject = new VenueObject(VenueServiceMock.getRandomVenue());
+        this.currentVenue = VenueServiceMock.getRandomVenue();
     }
 
-    public VenueObject getCurrentVenueObject() {
-        return this.currentVenueObject;
+    public Venue getCurrentVenue() {
+        return currentVenue;
     }
 
+    public void setCurrentVenue(Venue currentVenue) {
+        this.currentVenue = currentVenue;
+    }
 
+    public Post getCurrentPost() {
+        return currentPost;
+    }
 
-
-
-
-
+    public void setCurrentPost(Post currentPost) {
+        this.currentPost = currentPost;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/dto/Post.java b/TMessagesProj/src/main/java/org/telegram/messenger/dto/Post.java
index e7a409a51..a3b3ddf59 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/dto/Post.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/dto/Post.java
@@ -85,4 +85,15 @@ public long getCreatedDate() {
     public void setCreatedDate(long createdDate) {
         this.createdDate = createdDate;
     }
+
+
+    public String getVenuePreviewImageUrl() {
+        return this.getVenue().getImage().getUrl();
+    }
+
+
+    public String getPreviewImageUrl() {
+        return this.getPreviewImage().getUrl();
+    }
+
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/object/PostObject.java b/TMessagesProj/src/main/java/org/telegram/messenger/object/PostObject.java
index 9dea077bb..dfe760d16 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/object/PostObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/object/PostObject.java
@@ -13,12 +13,6 @@
  */
 public class PostObject {
 
-    public static class TextLayoutBlock {
-        public StaticLayout textLayout;
-        public float textXOffset = 0;
-        public float textYOffset = 0;
-        public int charactersOffset = 0;
-    }
 
     private Post post;
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/object/TextLayoutBlock.java b/TMessagesProj/src/main/java/org/telegram/messenger/object/TextLayoutBlock.java
new file mode 100644
index 000000000..312890592
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/object/TextLayoutBlock.java
@@ -0,0 +1,15 @@
+package org.telegram.messenger.object;
+
+import android.text.StaticLayout;
+
+/**
+ * Created by aragats on 02/08/15.
+ */
+//TODO-aragats
+public class TextLayoutBlock {
+    public StaticLayout textLayout;
+    public float textXOffset = 0;
+    public float textYOffset = 0;
+    public int charactersOffset = 0;
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/PostServiceMock.java b/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/PostServiceMock.java
index f87326865..e60a82e9b 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/PostServiceMock.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/service/mock/PostServiceMock.java
@@ -3,7 +3,6 @@
 import org.telegram.messenger.dto.Image;
 import org.telegram.messenger.dto.Post;
 import org.telegram.messenger.dto.PostResponse;
-import org.telegram.messenger.object.PostObject;
 import org.telegram.utils.StringUtils;
 
 import java.util.ArrayList;
@@ -97,13 +96,13 @@ public static String generateString(String characters, int length) {
     }
 
 
-    public static List<PostObject> convertPost(List<Post> posts) {
-        List<PostObject> result = new ArrayList<>();
-        for (Post post : posts) {
-            result.add(new PostObject(post));
-        }
-        return result;
-    }
+//    public static List<PostObject> convertPost(List<Post> posts) {
+//        List<PostObject> result = new ArrayList<>();
+//        for (Post post : posts) {
+//            result.add(new PostObject(post));
+//        }
+//        return result;
+//    }
 
 
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java
index b2576892d..a4a0be7fe 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java
@@ -16,7 +16,7 @@
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.PostsController;
 import org.telegram.android.support.widget.RecyclerView;
-import org.telegram.messenger.object.PostObject;
+import org.telegram.messenger.dto.Post;
 import org.telegram.ui.Cells.PostCell;
 import org.telegram.ui.Cells.LoadingCell;
 import org.telegram.ui.PhotoViewer;
@@ -55,7 +55,7 @@ public boolean isDataSetChanged() {
 
     @Override
     public int getItemCount() {
-        int count = PostsController.getInstance().postObjects.size();
+        int count = PostsController.getInstance().posts.size();
         if (count == 0 && PostsController.getInstance().loadingPosts) {
             return 0;
         }
@@ -66,12 +66,12 @@ public int getItemCount() {
         return count;
     }
 
-    public PostObject getItem(int i) {
+    public Post getItem(int i) {
 
-        if (i < 0 || i >= PostsController.getInstance().postObjects.size()) {
+        if (i < 0 || i >= PostsController.getInstance().posts.size()) {
             return null;
         }
-        return PostsController.getInstance().postObjects.get(i);
+        return PostsController.getInstance().posts.get(i);
 
     }
 
@@ -96,24 +96,23 @@ public void onBindViewHolder(RecyclerView.ViewHolder viewHolder, int i) {
         if (viewHolder.getItemViewType() == 0) {
             PostCell cell = (PostCell) viewHolder.itemView;
             cell.useSeparator = (i != getItemCount() - 1);
-            PostObject postObject;
-            postObject = PostsController.getInstance().postObjects.get(i);
+            Post post = PostsController.getInstance().posts.get(i);
             if (AndroidUtilities.isTablet()) {
-                cell.setPostSelected(!StringUtils.isEmpty(postObject.getId()) && postObject.getId().equals(openedPostId));
+                cell.setPostSelected(!StringUtils.isEmpty(post.getId()) && post.getId().equals(openedPostId));
             }
 
-            cell.setPostObject(postObject, i);
+            cell.setPostObject(post, i);
 
 //TODO in new version. This in  onCreateViewHolder  method on ChatActivity
             //Set delegate to open photo
             ((PostCell) cell).setDelegate(new PostCell.PostCellDelegate() {
                 @Override
                 public void didClickedImage(PostCell cell) {
-                    PostObject postObject = cell.getPostObject();
+                    Post cellPost = cell.getPost();
 //                    mContext - is getParentActivity form Post Activity. look at instance creation of PostAdapter
                     PhotoViewer.getInstance().setParentActivity((Activity)mContext);
-//                    PhotoViewer.getInstance().openPhoto(postObject, postsActivity);
-                    PhotoViewer.getInstance().openPhotoNew(postObject, postsActivity, postsActivity);
+//                    PhotoViewer.getInstance().openPhoto(post, postsActivity);
+                    PhotoViewer.getInstance().openPhotoNew(cellPost, postsActivity, postsActivity);
                 }
 
                 @Override
@@ -146,7 +145,7 @@ public boolean canPerformActions() {
 
     @Override
     public int getItemViewType(int i) {
-        if (i == PostsController.getInstance().postObjects.size()) {
+        if (i == PostsController.getInstance().posts.size()) {
             return 1; //LoadingCell
         }
         return 0; //PostCell
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsSearchAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsSearchAdapter.java
index a56cc3129..55d5c5e88 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsSearchAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsSearchAdapter.java
@@ -16,8 +16,8 @@
 import org.telegram.android.NotificationCenter;
 import org.telegram.android.support.widget.RecyclerView;
 import org.telegram.messenger.R;
+import org.telegram.messenger.dto.Post;
 import org.telegram.messenger.dto.PostResponse;
-import org.telegram.messenger.object.PostObject;
 import org.telegram.messenger.service.mock.PostServiceMock;
 import org.telegram.ui.Cells.GreySectionCell;
 import org.telegram.ui.Cells.HashtagSearchCell;
@@ -88,7 +88,7 @@ private void searchPostsInternal(final String query, final int offset, final int
         lastPostsSearchString = query;
         //TODO move to controller ?
         PostResponse response = PostServiceMock.getPosts("location", query, offset, count);
-        searchResult.addAll(PostServiceMock.convertPost(response.getPosts()));
+        searchResult.addAll(response.getPosts());
         //TODO notify Activity to run postsAdapter.notifyDataSetChanged();
         if (!response.getPosts().isEmpty()) {
             NotificationCenter.getInstance().postNotificationName(NotificationCenter.postsNeedReload);
@@ -167,7 +167,7 @@ public void searchPosts(final String query) {
         searchResult.clear();
         //TODO move to controller.
         PostResponse response = PostServiceMock.getPosts("location", query, 0, 20);
-        searchResult.addAll(PostServiceMock.convertPost(response.getPosts()));
+        searchResult.addAll(response.getPosts());
         //TODO notify Activity to run postsAdapter.notifyDataSetChanged();
         if (!response.getPosts().isEmpty()) {
             NotificationCenter.getInstance().postNotificationName(NotificationCenter.postsNeedReload);
@@ -333,18 +333,18 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
             case 0: {
 //                PostCell cell = (PostCell) holder.itemView;
 //                cell.useSeparator = (position != getItemCount() - 1);
-//                PostObject postObject = (PostObject) searchResult.get(position);
+//                PostObject post = (PostObject) searchResult.get(position);
                 //TODO open ?? wie in PostsAdapter.
 //                if (AndroidUtilities.isTablet()) {
-//                    cell.setPostSelected(!StringUtils.isEmpty(postObject.getId()) && postObject.getId().equals(openedPostId));
+//                    cell.setPostSelected(!StringUtils.isEmpty(post.getId()) && post.getId().equals(openedPostId));
 //                }
-//                cell.setPostObject(postObject, position, true);
+//                cell.setPost(post, position, true);
 
                 //Copied from 2.
                 PostCell cell = (PostCell) holder.itemView;
                 cell.useSeparator = (position != getItemCount() - 1);
-                PostObject postObject = (PostObject) getItem(position);
-                cell.setPost(postObject.getId(), postObject, postObject.getCreatedDate());
+                Post post = (Post) getItem(position);
+                cell.setPost(post.getId(), post, post.getCreatedDate());
                 break;
             }
             case 1: {
@@ -361,8 +361,8 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
             case 2: {
                 PostCell cell = (PostCell) holder.itemView;
                 cell.useSeparator = (position != getItemCount() - 1);
-                PostObject postObject = (PostObject) getItem(position);
-                cell.setPost(postObject.getId(), postObject, postObject.getCreatedDate());
+                Post post = (Post) getItem(position);
+                cell.setPost(post.getId(), post, post.getCreatedDate());
                 break;
             }
             case 3: {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
index c813187f1..b46998ab6 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostCell.java
@@ -30,7 +30,8 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
 import org.telegram.messenger.dto.Image;
-import org.telegram.messenger.object.PostObject;
+import org.telegram.messenger.dto.Post;
+import org.telegram.messenger.object.TextLayoutBlock;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.utils.StringUtils;
 
@@ -68,7 +69,7 @@
     private static int fontSize = AndroidUtilities.dp(14);
 //    private static int fontSize = AndroidUtilities.dp(16);
 
-    private PostObject.TextLayoutBlock block;
+    private TextLayoutBlock block;
 
     //Text
     private static Drawable errorDrawable;
@@ -79,7 +80,7 @@
 
     private String currentPostId;
     private long lastMessageDate;
-    private PostObject postObject;
+    private Post post;
     private int index;
 
     private ImageReceiver avatarImage;
@@ -183,28 +184,28 @@ public PostCell(Context context) {
         imageDrawable = new AvatarDrawable();
     }
 
-    public PostObject getPostObject() {
-        return postObject;
+    public Post getPost() {
+        return post;
     }
 
-    //TODO. I have 2 method for setting posts. setPostObject and setPost.
-    public void setPostObject(PostObject postObject, int i) {
+    //TODO. I have 2 method for setting posts. setPost and setPost.
+    public void setPostObject(Post post, int i) {
         //TODO I should store id or object. And retrieve from Controller by id.
-        currentPostId = postObject.getId();
-        this.postObject = postObject;
+        currentPostId = post.getId();
+        this.post = post;
         index = i;
         //TODO I use it to calculate build layout before onMeasure will be invoked. And by this way, correct layout
         buildLayout();
         update(0);
     }
 
-    public void setPost(String postId, PostObject postObject, long date) {
+    public void setPost(String postId, Post post, long date) {
         currentPostId = postId;
-        this.postObject = postObject;
+        this.post = post;
         lastMessageDate = date;
-//        lastUnreadState = postObject != null && postObject.isUnread();
-//        if (this.postObject != null) {
-//            lastSendState = this.postObject.getCreatedDate();
+//        lastUnreadState = post != null && post.isUnread();
+//        if (this.post != null) {
+//            lastSendState = this.post.getCreatedDate();
 //        }
         //TODO I use it to calculate build layout before onMeasure will be invoked. And by this way, correct layout
         buildLayout();
@@ -307,7 +308,7 @@ public void buildLayout() {
             nameLeft = AndroidUtilities.dp(14);
         }
 
-        if (postObject == null) {
+        if (post == null) {
             lastPrintString = addressString;
             currentAddressPaint = messagePrintingPaint;
             if (lastMessageDate != 0) {
@@ -319,13 +320,13 @@ public void buildLayout() {
             if (lastMessageDate != 0) {
                 timeString = LocaleController.stringForMessageListDate(lastMessageDate);
             } else {
-                timeString = LocaleController.stringForMessageListDate(postObject.getCreatedDate() / 1000);
+                timeString = LocaleController.stringForMessageListDate(post.getCreatedDate() / 1000);
             }
 
             lastPrintString = null;
 
             String address = "";
-            address = postObject.getAddress();
+            address = post.getVenue().getAddress();
 
 
             checkMessage = false;
@@ -338,7 +339,7 @@ public void buildLayout() {
             }
             distance = distance.replace("\n", " ");
 
-//                addressString = Emoji.replaceEmoji(AndroidUtilities.replaceTags(String.format("<c#ff4d83b3>%s:</c> <c#ff4d83b3>%s</c>", address, postObject.messageText)), addressPaint.getFontMetricsInt(), AndroidUtilities.dp(20));
+//                addressString = Emoji.replaceEmoji(AndroidUtilities.replaceTags(String.format("<c#ff4d83b3>%s:</c> <c#ff4d83b3>%s</c>", address, post.messageText)), addressPaint.getFontMetricsInt(), AndroidUtilities.dp(20));
             // address: distance
             addressString = Emoji.replaceEmoji(AndroidUtilities.replaceTags(String.format("<c#ff4d83b3>%s:</c> <c#ff808080>%s</c>", address, distance)), addressPaint.getFontMetricsInt(), AndroidUtilities.dp(20));
 
@@ -349,7 +350,7 @@ public void buildLayout() {
 //            } else {
 //                drawCount = false;
 //            }
-            //TODO postObject.isOut(). errorSend.
+            //TODO post.isOut(). errorSend.
         }
 
         int timeWidth = (int) Math.ceil(timePaint.measureText(timeString));
@@ -363,7 +364,7 @@ public void buildLayout() {
         //  here was building name string
 
 
-        nameString = postObject.getVenueName();
+        nameString = post.getVenue().getName();
         if (StringUtils.isEmpty(nameString)) {
 //            nameString = LocaleController.getString("HiddenName", R.string.HiddenName);
             nameString = "Point";
@@ -482,13 +483,13 @@ public void buildLayout() {
         //TEXT
 
         // TODO It should be before creating Cell. somewhere in generating entities. Because it is static layout. in Cell we just find the position. !!
-        generateTextLayout(this.postObject);
+        generateTextLayout(this.post);
 
 
         /// TEXT
         //Photo
 
-        if (this.postObject != null) {
+        if (this.post != null) {
 
             if (AndroidUtilities.isTablet()) {
                 photoWidth = (int) (AndroidUtilities.getMinTabletSide() * 1.0f); //0.7f
@@ -523,8 +524,8 @@ public void buildLayout() {
             }
 
 
-            if (postObject.getPreviewImage() != null) {
-                Image previewImage = this.postObject.getPreviewImage();
+            if (post.getPreviewImage() != null) {
+                Image previewImage = this.post.getPreviewImage();
 
                 float scale = (float) previewImage.getWidth() / (float) photoWidth; // scale calculate
 
@@ -584,17 +585,17 @@ public void setPostSelected(boolean value) {
     }
 
     public void checkCurrentPostIndex() {
-        PostObject postObject = null;
+        Post post = null;
 
-        if (index < PostsController.getInstance().postObjects.size()) {
-            postObject = PostsController.getInstance().postObjects.get(index);
+        if (index < PostsController.getInstance().posts.size()) {
+            post = PostsController.getInstance().posts.get(index);
         }
 
-        if (postObject != null) {
-            if (!StringUtils.isEmpty(postObject.getId())
+        if (post != null) {
+            if (!StringUtils.isEmpty(post.getId())
                     && !StringUtils.isEmpty(currentPostId)
-                    && !currentPostId.equals(postObject.getId())) {
-                currentPostId = postObject.getId();
+                    && !currentPostId.equals(post.getId())) {
+                currentPostId = post.getId();
                 update(0);
             }
         }
@@ -602,7 +603,7 @@ public void checkCurrentPostIndex() {
 
     public void update(int mask) {
 
-//        PostObject postObject = PostsController.getInstance().postsMap.get(currentPostId);
+//        PostObject post = PostsController.getInstance().postsMap.get(currentPostId);
 
 
         if (mask != 0) {
@@ -626,18 +627,18 @@ public void update(int mask) {
 
 
         //TODO-DELETE
-//        if(postObject == null) {
+//        if(post == null) {
 //            return;
 //        }
         //
 
-        //TODO null, 0 ??? s ext adn size. int)postObject.getImage().getSize()
+        //TODO null, 0 ??? s ext adn size. int)post.getImage().getSize()
 //        avatarImage.setImage(R.drawable.pin);
-        avatarImage.setImage(postObject.getVenuePreviewImageUrl(), null, avatarDrawable, null, 0);
+        avatarImage.setImage(post.getVenuePreviewImageUrl(), null, avatarDrawable, null, 0);
 
         //Photo
         // TODO null ?
-        photoImage.setImage(postObject.getPreviewImageUrl(), null, imageDrawable, null, 0); // TODO fix it. Create drawable.
+        photoImage.setImage(post.getPreviewImageUrl(), null, imageDrawable, null, 0); // TODO fix it. Create drawable.
 
         //Photo
 
@@ -718,17 +719,17 @@ protected void onDraw(Canvas canvas) {
 
     //TODO utils method ?
     // TODO It should be before creating Cell. somewhere in generating entities. Because it is static layout. in Cell we just find the position. !!
-    private void generateTextLayout(PostObject postObject) {
-        if (postObject == null || postObject.getMessage() == null || postObject.getMessage().length() == 0) {
+    private void generateTextLayout(Post post) {
+        if (post == null || post.getMessage() == null || post.getMessage().length() == 0) {
             return;
         }
 
-        CharSequence messageText = postObject.getMessage();
+        CharSequence messageText = post.getMessage();
 
         messageText = Emoji.replaceEmoji(messageText, textPaint.getFontMetricsInt(), AndroidUtilities.dp(20));
 
-        if (messageText instanceof Spannable && containsUrls(postObject.getMessage())) {
-            if (postObject.getMessage().length() < 100) {
+        if (messageText instanceof Spannable && containsUrls(post.getMessage())) {
+            if (post.getMessage().length() < 100) {
                 Linkify.addLinks((Spannable) messageText, Linkify.WEB_URLS | Linkify.PHONE_NUMBERS);
             } else {
                 Linkify.addLinks((Spannable) messageText, Linkify.WEB_URLS);
@@ -762,7 +763,7 @@ private void generateTextLayout(PostObject postObject) {
             FileLog.e("tmessages", e);
             return;
         }
-        this.block = new PostObject.TextLayoutBlock();
+        this.block = new TextLayoutBlock();
 
         this.block.textLayout = textLayout;
         this.block.textYOffset = 0;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostMediaCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostMediaCell.java
index d0d50f40d..58d4d5986 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostMediaCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostMediaCell.java
@@ -13,26 +13,18 @@
 import android.graphics.Paint;
 import android.graphics.RectF;
 import android.graphics.drawable.Drawable;
-import android.text.Layout;
 import android.text.StaticLayout;
 import android.text.TextPaint;
-import android.text.TextUtils;
-import android.view.Gravity;
 import android.view.MotionEvent;
 import android.view.SoundEffectConstants;
-import android.view.View;
-import android.widget.ImageView;
-import android.widget.Toast;
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ImageReceiver;
 import org.telegram.android.MediaController;
 import org.telegram.android.MessageObject;
-import org.telegram.messenger.R;
 import org.telegram.messenger.dto.Image;
-import org.telegram.messenger.object.PostObject;
+import org.telegram.messenger.dto.Post;
 import org.telegram.ui.Components.AvatarDrawable;
-import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.RadialProgress;
 import org.telegram.ui.Components.ResourceLoader;
 
@@ -74,7 +66,7 @@
     private AvatarDrawable imageDrawable;
 //    private ImageReceiver imageDrawable;
 
-    protected PostObject postObject;
+    protected Post post;
 
     private int layoutWidth;
     //TODO height of cell?
@@ -240,7 +232,7 @@ public boolean onTouchEvent(MotionEvent event) {
                 } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
                     otherPressed = false;
                 } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
-//                    if (postObject.type == 9) {
+//                    if (post.type == 9) {
 //                        if (!(x >= photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(50) && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight())) {
 //                            otherPressed = false;
 //                        }
@@ -279,7 +271,7 @@ private void didPressedButton(boolean animated) {
 
 
     //TODO-aragats-old old method from PostMediaOld.
-    public void setPostObject(PostObject postObjectObject) {
+    public void setPost(Post post) {
 
 
 //        currentInfoString = "INFO";
@@ -288,8 +280,8 @@ public void setPostObject(PostObject postObjectObject) {
 //        infoLayout = new StaticLayout(str2, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
 
 
-        this.postObject = postObjectObject;
-        if (this.postObject != null) {
+        this.post = post;
+        if (this.post != null) {
 //            updateSecretTimeText();
 
             if (AndroidUtilities.isTablet()) {
@@ -308,8 +300,8 @@ public void setPostObject(PostObject postObjectObject) {
 
 
             //TODO Full or Image
-            if (this.postObject.getPreviewImage() != null) {
-                Image previewImage = this.postObject.getPreviewImage();
+            if (this.post.getPreviewImage() != null) {
+                Image previewImage = this.post.getPreviewImage();
 
                 float scale = (float) previewImage.getWidth() / (float) photoWidth; // scale calculate
 
@@ -403,12 +395,12 @@ public void setAllowedToSetPhoto(boolean value) {
         if (allowedToSetPhoto == value) {
             return;
         }
-        if (postObject != null) {
+        if (post != null) {
             allowedToSetPhoto = value;
             if (value) {
-                PostObject temp = postObject;
-                postObject = null;
-                setPostObject(temp);
+                Post temp = post;
+                post = null;
+                setPost(temp);
             }
         }
     }
@@ -417,7 +409,7 @@ public void setAllowedToSetPhoto(boolean value) {
     //TODO-aragats-old is old method from previous method. But I should rake from ChatBaseCell
     @Override
     protected void onDraw(Canvas canvas) {
-        if (this.postObject == null) {
+        if (this.post == null) {
             return;
         }
 
@@ -455,7 +447,7 @@ protected void onAfterBackgroundDraw(Canvas canvas) {
 
 //            photoImage.setPressed(isPressed() && isCheckPressed || !isCheckPressed && isPressed || isHighlighted);
 //        photoImage.setPressed(isPressed());
-//        photoImage.setVisible(!PhotoViewer.getInstance().isShowingImage(postObject), false);
+//        photoImage.setVisible(!PhotoViewer.getInstance().isShowingImage(post), false);
 //        imageDrawn = photoImage.draw(canvas);
 
 
@@ -532,14 +524,14 @@ public void onFailedDownload(String fileName) {
     @Override
     public void onSuccessDownload(String fileName) {
 //        radialProgress.setProgress(1, true);
-//        if (postObject.type == 8 && lastDownloadedGifMessage != null && lastDownloadedGifMessage.getId() == postObject.getId()) {
+//        if (post.type == 8 && lastDownloadedGifMessage != null && lastDownloadedGifMessage.getId() == post.getId()) {
 //            buttonState = 2;
 //            didPressedButton(true);
 //        } else if (!photoNotSet) {
 //            updateButtonState(true);
 //        }
 //        if (photoNotSet) {
-//            setPostObject(postObject);
+//            setPost(post);
 //        }
     }
 
@@ -562,7 +554,7 @@ public int getObserverTag() {
     }
 
 
-    public PostObject getPostObject() {
-        return postObject;
+    public Post getPost() {
+        return post;
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostMediaCellOld.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostMediaCellOld.java
index 8f606a1e8..aaf948a87 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostMediaCellOld.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostMediaCellOld.java
@@ -25,8 +25,8 @@
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.ImageReceiver;
 import org.telegram.messenger.dto.Image;
-import org.telegram.messenger.object.PostObject;
-import org.telegram.messenger.object.UserObject;
+import org.telegram.messenger.dto.Post;
+import org.telegram.messenger.dto.User;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.RadialProgress;
 //TODO-aragats
@@ -37,7 +37,7 @@
 
         public abstract void didPressedOther(PostMediaCellOld cell);
 
-        public abstract void didPressedUserAvatar(PostCell cell, UserObject userObject);
+        public abstract void didPressedUserAvatar(PostCell cell, User userObject);
 
         public abstract void didPressedCancelSendButton(PostCell cell);
 
@@ -58,7 +58,7 @@
     private int buttonX;
     private int buttonY;
 
-    private PostObject postObject;
+    private Post post;
     private AvatarDrawable imageDrawable;
 
     private static Drawable backgroundMediaDrawableOutSelected;
@@ -182,10 +182,10 @@ private void didPressedButton(boolean animated) {
     }
 
 
-    public void setPostObject(PostObject postObjectObject) {
+    public void setPost(Post post) {
 
-        this.postObject = postObjectObject;
-        if (this.postObject != null) {
+        this.post = post;
+        if (this.post != null) {
             updateSecretTimeText();
 
             if (AndroidUtilities.isTablet()) {
@@ -204,8 +204,8 @@ public void setPostObject(PostObject postObjectObject) {
 
 
             //TODO Full or Image
-            if (this.postObject.getPreviewImage() != null) {
-                Image previewImage = this.postObject.getPreviewImage();
+            if (this.post.getPreviewImage() != null) {
+                Image previewImage = this.post.getPreviewImage();
 
                 float scale = (float) previewImage.getWidth() / (float) photoWidth; // scale calculate
 
@@ -302,11 +302,11 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
     private void updateSecretTimeText() {
         String currentInfoString = "";
 
-        if (this.postObject == null) {
+        if (this.post == null) {
             return;
         }
         //TODO info about image. Size. or so on.
-        String str = "" + this.postObject.getPreviewImage().getSize();
+        String str = "" + this.post.getPreviewImage().getSize();
         if (str == null) {
             return;
         }
@@ -324,7 +324,7 @@ private void updateSecretTimeText() {
 
     @Override
     protected void onDraw(Canvas canvas) {
-        if (this.postObject == null) {
+        if (this.post == null) {
             return;
         }
 
@@ -389,7 +389,7 @@ private void onAfterBackgroundDraw(Canvas canvas) {
     }
 
 
-    public PostObject getPostObject() {
-        return postObject;
+    public Post getPost() {
+        return post;
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivityAragats.java b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivityAragats.java
index 23750754b..39b8bb28b 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LocationActivityAragats.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LocationActivityAragats.java
@@ -46,7 +46,6 @@
 import com.google.android.gms.maps.model.MarkerOptions;
 
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.ContactsController;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MessagesController;
 import org.telegram.android.NotificationCenter;
@@ -54,8 +53,8 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
 import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.object.PostObject;
-import org.telegram.messenger.object.VenueObject;
+import org.telegram.messenger.dto.Post;
+import org.telegram.messenger.dto.Venue;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
@@ -63,7 +62,6 @@
 import org.telegram.ui.Adapters.BaseLocationAdapter;
 import org.telegram.ui.Adapters.LocationActivityAdapter;
 import org.telegram.ui.Adapters.LocationActivitySearchAdapter;
-import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.BackupImageView;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.MapPlaceholderDrawable;
@@ -103,7 +101,7 @@
     private Location userLocation;
     private int markerTop;
 
-    private PostObject postObject;
+    private Post post;
     private boolean userLocationMoved = false;
     private boolean firstWas = false;
     private CircleOptions circleOptions;
@@ -123,7 +121,7 @@
 
     @Override
     public boolean needAddActionBar() {
-        return postObject != null;
+        return post != null;
     }
 
     @Override
@@ -131,7 +129,7 @@ public boolean onFragmentCreate() {
         super.onFragmentCreate();
         swipeBackEnabled = false;
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.closeChats);
-        if (postObject != null) {
+        if (post != null) {
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
         }
         return true;
@@ -180,7 +178,7 @@ public void onItemClick(int id) {
                     }
                 } else if (id == share) {
                     try {
-                        List<Double> coordinates = postObject.getCoordinates();
+                        List<Double> coordinates = post.getVenue().getCoordinates().getCoordinates();
                         double lat = coordinates.get(1);
                         double lon = coordinates.get(0);
                         getParentActivity().startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("geo:" + lat + "," + lon + "?q=" + lat + "," + lon)));
@@ -192,8 +190,8 @@ public void onItemClick(int id) {
         });
 
         ActionBarMenu menu = actionBar.createMenu();
-        if (postObject != null) {
-            VenueObject venue = postObject.getVenueObject();
+        if (post != null) {
+            Venue venue = post.getVenue();
             if (venue != null && !StringUtils.isEmpty(venue.getName())) {
                 actionBar.setTitle(venue.getName());
                 if (!StringUtils.isEmpty(venue.getAddress())) {
@@ -280,7 +278,7 @@ public void getOutline(View view, Outline outline) {
             });
         }
 
-        if (postObject != null) {
+        if (post != null) {
             mapView = new MapView(context);
             frameLayout.setBackgroundDrawable(new MapPlaceholderDrawable());
             mapView.onCreate(null);
@@ -330,7 +328,7 @@ public void onClick(View view) {
             distanceTextView.setGravity(LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT);
             bottomView.addView(distanceTextView, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.TOP | (LocaleController.isRTL ? Gravity.RIGHT : Gravity.LEFT), LocaleController.isRTL ? 12 : 72, 33, LocaleController.isRTL ? 72 : 12, 0));
 
-            List<Double> coordinates = postObject.getCoordinates();
+            List<Double> coordinates = post.getVenue().getCoordinates().getCoordinates();
             userLocation = new Location("network");
             userLocation.setLatitude(coordinates.get(1));
             userLocation.setLongitude(coordinates.get(0));
@@ -367,7 +365,7 @@ public void getOutline(View view, Outline outline) {
                 public void onClick(View v) {
                     if (myLocation != null) {
                         try {
-                            List<Double> coordinates = postObject.getCoordinates();
+                            List<Double> coordinates = post.getVenue().getCoordinates().getCoordinates();
                             Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(String.format(Locale.US, "http://maps.google.com/maps?saddr=%f,%f&daddr=%f,%f", myLocation.getLatitude(), myLocation.getLongitude(), coordinates.get(1), coordinates.get(0))));
                             getParentActivity().startActivity(intent);
                         } catch (Exception e) {
@@ -754,7 +752,7 @@ private Location getLastLocation() {
     }
 
     private void updateUserData() {
-        if (postObject != null && avatarImageView != null) {
+        if (post != null && avatarImageView != null) {
            //TODO location is from user. below photo and name.
             Object user = null;
             if (user != null) {
@@ -775,7 +773,7 @@ private void positionMarker(Location location) {
             return;
         }
         myLocation = new Location(location);
-        if (postObject != null) {
+        if (post != null) {
             if (userLocation != null && distanceTextView != null) {
                 float distance = location.distanceTo(userLocation);
                 if (distance < 1000) {
@@ -804,8 +802,8 @@ private void positionMarker(Location location) {
         }
     }
 
-    public void setPostObject(PostObject post) {
-        postObject = post;
+    public void setPost(Post post) {
+        this.post = post;
     }
 
     @Override
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index 8d1bbd108..714a26655 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -65,7 +65,7 @@
 import org.telegram.messenger.UserConfig;
 import org.telegram.android.MessageObject;
 import org.telegram.messenger.Utilities;
-import org.telegram.messenger.object.PostObject;
+import org.telegram.messenger.dto.Post;
 import org.telegram.ui.Adapters.MentionsAdapter;
 import org.telegram.android.AnimationCompat.AnimatorListenerAdapterProxy;
 import org.telegram.android.AnimationCompat.AnimatorSetProxy;
@@ -100,9 +100,9 @@
     //TODO-aragats new
     private PostPhotoViewerProvider postPlaceProvider;
     //TODO-aragats new
-    private ArrayList<PostObject> imagesPostObjectArr = new ArrayList<PostObject>();
+    private ArrayList<Post> imagesPostArr = new ArrayList<Post>();
     //TODO-aragats new
-    private PostObject currentPostObjectObject;
+    private Post currentPost;
     //TODO-aragats new
     private PostsActivity parentPostActivity;
 
@@ -850,8 +850,8 @@ public void onItemClick(int id) {
                 } else if (id == gallery_menu_save) {
                     File f = null;
                     //TODO-aragats new
-                    if(currentPostObjectObject != null) {
-                        currentFileNames[0] = Utilities.MD5(currentPostObjectObject.getImage().getUrl()) + ".jpg";
+                    if(currentPost != null) {
+                        currentFileNames[0] = Utilities.MD5(currentPost.getImage().getUrl()) + ".jpg";
                         f = new File(FileLoader.getInstance().getDirectory(FileLoader.MEDIA_DIR_CACHE), currentFileNames[0]);
                     }
                     else
@@ -2107,11 +2107,11 @@ private void updateSelectedCount() {
 
 
     //TODO-aragats new
-    private void onPhotoShowNew(final PostObject postObject, final PlaceProviderObject object) {
+    private void onPhotoShowNew(final Post post, final PlaceProviderObject object) {
         classGuid = ConnectionsManager.getInstance().generateClassGuid();
         currentMessageObject = null;
         //TODO-aragat new
-        currentPostObjectObject = null;
+        currentPost = null;
         //
         currentFileLocation = null;
         currentPathObject = null;
@@ -2132,7 +2132,7 @@ private void onPhotoShowNew(final PostObject postObject, final PlaceProviderObje
         canShowBottom = true;
         imagesArr.clear();
         //TODO-aragats new
-        imagesPostObjectArr.clear();
+        imagesPostArr.clear();
         //
         imagesArrLocations.clear();
         imagesArrLocationsSizes.clear();
@@ -2183,8 +2183,8 @@ private void onPhotoShowNew(final PostObject postObject, final PlaceProviderObje
             }
         }
 
-        if (postObject != null) {
-            imagesPostObjectArr.add(postObject);
+        if (post != null) {
+            imagesPostArr.add(post);
 
             menuItem.showSubItem(gallery_menu_showall);
 //            else
@@ -2201,7 +2201,7 @@ private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLoca
         classGuid = ConnectionsManager.getInstance().generateClassGuid();
         currentMessageObject = null;
         //TODO-aragat new
-        currentPostObjectObject = null;
+        currentPost = null;
         //
         currentFileLocation = null;
         currentPathObject = null;
@@ -2222,7 +2222,7 @@ private void onPhotoShow(final MessageObject messageObject, final TLRPC.FileLoca
         canShowBottom = true;
         imagesArr.clear();
         //TODO-aragats new
-        imagesPostObjectArr.clear();
+        imagesPostArr.clear();
         //
         imagesArrLocations.clear();
         imagesArrLocationsSizes.clear();
@@ -2606,31 +2606,31 @@ private void setImageIndexPostNew(int index, boolean init) {
         currentFileNames[0] = getFileName(index);
         currentFileNames[1] = getFileName(index + 1);
         currentFileNames[2] = getFileName(index - 1);
-        postPlaceProvider.willSwitchFromPhoto(currentPostObjectObject);
+        postPlaceProvider.willSwitchFromPhoto(currentPost);
         int prevIndex = currentIndex;
         currentIndex = index;
 
         boolean sameImage = false;
 
-        if (!imagesPostObjectArr.isEmpty()) {
+        if (!imagesPostArr.isEmpty()) {
             menuItem.showSubItem(gallery_menu_delete);
-            if (currentIndex < 0 || currentIndex >= imagesPostObjectArr.size()) {
+            if (currentIndex < 0 || currentIndex >= imagesPostArr.size()) {
                 closePhoto(false, false);
                 return;
             }
-            currentPostObjectObject = imagesPostObjectArr.get(currentIndex);
+            currentPost = imagesPostArr.get(currentIndex);
 
                 nameTextView.setText("USER-Aragats");
-            long date = currentPostObjectObject.getCreatedDate();
+            long date = currentPost.getCreatedDate();
             String dateString = LocaleController.formatString("formatDateAtTime", R.string.formatDateAtTime, LocaleController.formatterYear.format(new Date(date)), LocaleController.formatterDay.format(new Date(date)));
 
                 dateTextView.setText(dateString);
-            CharSequence caption = currentPostObjectObject.getMessage();
+            CharSequence caption = currentPost.getMessage();
             setCurrentCaption(caption);
 
             if (totalImagesCount != 0 && !needSearchImageInArr) {
 
-                actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, (totalImagesCount - imagesPostObjectArr.size()) + currentIndex + 1, totalImagesCount));
+                actionBar.setTitle(LocaleController.formatString("Of", R.string.Of, (totalImagesCount - imagesPostArr.size()) + currentIndex + 1, totalImagesCount));
 
             }
 //            if (currentMessageObject.messageOwner.ttl != 0) {
@@ -2651,7 +2651,7 @@ private void setImageIndexPostNew(int index, boolean init) {
                 showAfterAnimation = currentPlaceObject;
             }
         }
-        currentPlaceObject = postPlaceProvider.getPlaceForPhoto(currentPostObjectObject);
+        currentPlaceObject = postPlaceProvider.getPlaceForPhoto(currentPost);
         if (currentPlaceObject != null) {
             if (animationInProgress == 0) {
                 currentPlaceObject.imageReceiver.setVisible(false, true);
@@ -2935,10 +2935,10 @@ private void setIndexToImage(ImageReceiver imageReceiver, int index) {
     //TODO-aragats new
     private void setIndexToImagePostNew(ImageReceiver imageReceiver, int index) {
         imageReceiver.setOrientation(0, false);
-        if (!imagesPostObjectArr.isEmpty()) {
+        if (!imagesPostArr.isEmpty()) {
             imageReceiver.setParentMessageObject(null);
-            if (index >= 0 && index < imagesPostObjectArr.size() && imagesPostObjectArr.get(index) != null) {
-                PostObject postObject = imagesPostObjectArr.get(index);
+            if (index >= 0 && index < imagesPostArr.size() && imagesPostArr.get(index) != null) {
+                Post post = imagesPostArr.get(index);
                 int size = (int) (AndroidUtilities.getPhotoSize() / AndroidUtilities.density);
                 Bitmap placeHolder = null;
                 if (currentThumb != null && imageReceiver == centerImage) {
@@ -2948,7 +2948,7 @@ private void setIndexToImagePostNew(ImageReceiver imageReceiver, int index) {
                 if (placeHolder == null) {
                     placeHolder = postPlaceProvider.getThumbForPhoto(null, index);
                 }
-                String path = postObject.getImage().getUrl();
+                String path = post.getImage().getUrl();
                 int imageSize = 0;
                 //TODO set Image for imageReceiver
                 imageReceiver.setImage(path, String.format(Locale.US, "%d_%d", size, size), placeHolder != null ? new BitmapDrawable(null, placeHolder) : null, null, imageSize);
@@ -2958,14 +2958,14 @@ private void setIndexToImagePostNew(ImageReceiver imageReceiver, int index) {
         }
 
 
-//        PostObject postObject = null;
-//        if (!imagesPostObjectArr.isEmpty() && index < imagesPostObjectArr.size() && index >= 0) {
-//            postObject = imagesPostObjectArr.get(index);
+//        PostObject post = null;
+//        if (!imagesPostArr.isEmpty() && index < imagesPostArr.size() && index >= 0) {
+//            post = imagesPostArr.get(index);
 //        }
 //
 //        //TODO set Image for imageReceiver
-//        if (postObject != null) {
-//            imageReceiver.setImage(postObject.getImage().getUrl(), null, new AvatarDrawable(), null, 0);
+//        if (post != null) {
+//            imageReceiver.setImage(post.getImage().getUrl(), null, new AvatarDrawable(), null, 0);
 //        } else {
 //            imageReceiver.setImageBitmap((Bitmap) null);
 //        }
@@ -3222,13 +3222,13 @@ public void run() {
 
     //TODO-aragats new
     //final PostPhotoViewerProvider provider, PostsActivity postsActivity are the same class.
-    public void openPhotoNew(final PostObject postObject, final PostPhotoViewerProvider provider, PostsActivity postsActivity) {
-        if (parentActivity == null || isVisible || provider == null || checkAnimation() || postObject == null) {
+    public void openPhotoNew(final Post post, final PostPhotoViewerProvider provider, PostsActivity postsActivity) {
+        if (parentActivity == null || isVisible || provider == null || checkAnimation() || post == null) {
             return;
         }
 
         //filocation we do not need here. messageObject is used to find ChatMediaCell by id from messageObject. // method is implemented in provider.
-        final PlaceProviderObject object = provider.getPlaceForPhoto(postObject);
+        final PlaceProviderObject object = provider.getPlaceForPhoto(post);
         if (object == null) {
             return;
         }
@@ -3246,7 +3246,7 @@ public void openPhotoNew(final PostObject postObject, final PostPhotoViewerProvi
 
 
         try {
-            if (postObject.getImage() != null) {
+            if (post.getImage() != null) {
                 windowLayoutParams.type = WindowManager.LayoutParams.LAST_APPLICATION_WINDOW;
                 windowLayoutParams.flags = 0;
                 windowLayoutParams.softInputMode = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN;
@@ -3288,7 +3288,7 @@ public void openPhotoNew(final PostObject postObject, final PostPhotoViewerProvi
         if (object != null) {
             disableShowCheck = true;
             animationInProgress = 1;
-            onPhotoShowNew(postObject, object);
+            onPhotoShowNew(post, object);
 
             final Rect drawRegion = object.imageReceiver.getDrawRegion();
             int orientation = object.imageReceiver.getOrientation();
@@ -3423,19 +3423,19 @@ public void run() {
         } else {
             backgroundDrawable.setAlpha(255);
             ViewProxy.setAlpha(containerView, 1.0f);
-            onPhotoShowNew(postObject, object);
+            onPhotoShowNew(post, object);
         }
     }
 
 
     //TODO-legacy rewrite this method accrodign to new openPhoto because this version is legacy from previous revision
     //TODO my openPhoto
-    public void openPhoto(final PostObject postObject, final PostPhotoViewerProvider provider) {
+    public void openPhoto(final Post post, final PostPhotoViewerProvider provider) {
         if (parentActivity == null || isVisible || provider == null || checkAnimation()) {
             return;
         }
         //filocation we do not need here. messageObject is used to find ChatMediaCell by id from messageObject. // method is implemented in provider.
-        final PlaceProviderObject object = provider.getPlaceForPhoto(postObject);
+        final PlaceProviderObject object = provider.getPlaceForPhoto(post);
         if (object == null) {
             return;
         }
@@ -3474,7 +3474,7 @@ public void openPhoto(final PostObject postObject, final PostPhotoViewerProvider
 
         disableShowCheck = true;
         animationInProgress = 1;
-        onPhotoShow(postObject, object);
+        onPhotoShow(post, object);
         isVisible = true;
         backgroundDrawable.setAlpha(255);
         toggleActionBar(true, false);
@@ -3592,7 +3592,7 @@ public void onAnimationCancel(Object animation) {
 
 
     //TODO-aragats my photo opener.
-    private void onPhotoShow(final PostObject postObject, final PlaceProviderObject object) {
+    private void onPhotoShow(final Post post, final PlaceProviderObject object) {
         classGuid = ConnectionsManager.getInstance().generateClassGuid();
 //        currentMessageObject = null;  // TODO I removed it because it break getting  currentPlaceObject
         currentFileLocation = null;
@@ -3612,7 +3612,7 @@ private void onPhotoShow(final PostObject postObject, final PlaceProviderObject
         canShowBottom = true;
         imagesArr.clear();
         //new
-        imagesPostObjectArr.clear();
+        imagesPostArr.clear();
         imagesArrLocations.clear();
         imagesArrLocationsSizes.clear();
         avatarsArr.clear();
@@ -3634,8 +3634,8 @@ private void onPhotoShow(final PostObject postObject, final PlaceProviderObject
             }
         }
 
-        if (postObject != null) {
-            imagesPostObjectArr.add(postObject);
+        if (post != null) {
+            imagesPostArr.add(post);
             menuItem.showSubItem(gallery_menu_showall);
             setImageIndexPost(0, true);
         }
@@ -3654,7 +3654,7 @@ public void setImageIndexPost(int index, boolean init) {
         currentFileNames[0] = getFileName(index);
         currentFileNames[1] = getFileName(index + 1);
         currentFileNames[2] = getFileName(index - 1);
-        postPlaceProvider.willSwitchFromPhoto(currentPostObjectObject);
+        postPlaceProvider.willSwitchFromPhoto(currentPost);
         int prevIndex = currentIndex;
         currentIndex = index;
 
@@ -3662,15 +3662,15 @@ public void setImageIndexPost(int index, boolean init) {
 
 //        currentMessageObject = imagesArr.get(currentIndex); // TODO is important to load data.
 
-        if (!imagesPostObjectArr.isEmpty()) {
+        if (!imagesPostArr.isEmpty()) {
             //TODO in new version there is not deleteButton
 //            deleteButton.setVisibility(View.VISIBLE);
-            currentPostObjectObject = imagesPostObjectArr.get(currentIndex);
+            currentPost = imagesPostArr.get(currentIndex);
 
-            nameTextView.setText(ContactsController.formatName(this.currentPostObjectObject.getVenueName(), ""));
-            dateTextView.setText(LocaleController.formatterYearMax.format(currentPostObjectObject.getCreatedDate()));
+            nameTextView.setText(ContactsController.formatName(this.currentPost.getVenue().getName(), ""));
+            dateTextView.setText(LocaleController.formatterYearMax.format(currentPost.getCreatedDate()));
 
-            actionBar.setTitle(LocaleController.formatString("Of", org.telegram.messenger.R.string.Of, (totalImagesCount - imagesPostObjectArr.size()) + currentIndex + 1, totalImagesCount));
+            actionBar.setTitle(LocaleController.formatString("Of", org.telegram.messenger.R.string.Of, (totalImagesCount - imagesPostArr.size()) + currentIndex + 1, totalImagesCount));
 
             menuItem.showSubItem(gallery_menu_save);
             shareButton.setVisibility(View.VISIBLE);
@@ -3685,7 +3685,7 @@ public void setImageIndexPost(int index, boolean init) {
             }
         }
         //TODO delete currentMessageObject
-        currentPlaceObject = postPlaceProvider.getPlaceForPhoto(currentPostObjectObject);
+        currentPlaceObject = postPlaceProvider.getPlaceForPhoto(currentPost);
         if (currentPlaceObject != null) {
             if (animationInProgress == 0) {
                 currentPlaceObject.imageReceiver.setVisible(false, true);
@@ -3769,14 +3769,14 @@ public void setImageIndexPost(int index, boolean init) {
     //TODO-aragats my new
     private void setIndexToImagePost(ImageReceiver imageReceiver, int index) {
 
-        PostObject postObject = null;
-        if (!imagesPostObjectArr.isEmpty() && index < imagesPostObjectArr.size() && index >= 0) {
-            postObject = imagesPostObjectArr.get(index);
+        Post post = null;
+        if (!imagesPostArr.isEmpty() && index < imagesPostArr.size() && index >= 0) {
+            post = imagesPostArr.get(index);
         }
 
         //TODO set Image for imageReceiver
-        if (postObject != null) {
-            imageReceiver.setImage(postObject.getImage().getUrl(), null, new AvatarDrawable(), null, 0);
+        if (post != null) {
+            imageReceiver.setImage(post.getImage().getUrl(), null, new AvatarDrawable(), null, 0);
         } else {
             imageReceiver.setImageBitmap((Bitmap) null);
         }
@@ -3846,7 +3846,7 @@ public void closePhoto(boolean animated, boolean fromEditMode) {
         if (placeProvider != null) {
             object1 = placeProvider.getPlaceForPhoto(currentMessageObject, currentFileLocation, currentIndex);
         } else if (this.postPlaceProvider != null) {
-            object1 = this.postPlaceProvider.getPlaceForPhoto(currentPostObjectObject);
+            object1 = this.postPlaceProvider.getPlaceForPhoto(currentPost);
         }
         //TODO
         final PlaceProviderObject object = object1;
@@ -4030,7 +4030,7 @@ private void onPhotoClosed(PlaceProviderObject object) {
         disableShowCheck = true;
         currentMessageObject = null;
         //TODO-aragats my custom
-        currentPostObjectObject = null;
+        currentPost = null;
         //
         currentFileLocation = null;
         currentPathObject = null;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
index 416ca3620..4353f53a2 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
@@ -35,7 +35,6 @@
 import android.view.ViewTreeObserver;
 import android.view.WindowManager;
 import android.widget.FrameLayout;
-import android.widget.ImageView;
 import android.widget.ProgressBar;
 import android.widget.TextView;
 import android.widget.Toast;
@@ -59,8 +58,6 @@
 import org.telegram.messenger.dto.Image;
 import org.telegram.messenger.dto.Post;
 import org.telegram.messenger.dto.Venue;
-import org.telegram.messenger.object.PostObject;
-import org.telegram.messenger.object.VenueObject;
 import org.telegram.messenger.service.mock.PostServiceMock;
 import org.telegram.messenger.service.mock.VenueServiceMock;
 import org.telegram.ui.ActionBar.ActionBar;
@@ -119,7 +116,7 @@
     private TextView sendTextView;
     private FrameLayout sendButtonContainer;
 
-    private PostObject selectedObject;
+    private Post selectedObject;
     private boolean wasPaused = false;
     private TLRPC.WebPage foundWebPage;
     private Runnable waitingForCharaterEnterRunnable;
@@ -127,8 +124,8 @@
     private boolean openAnimationEnded = false;
 
 
-    protected ArrayList<PostObject> postObjects = new ArrayList<>();
-    protected VenueObject venueObject;
+    protected ArrayList<Post> posts = new ArrayList<>();
+    protected Venue venue;
 
     private boolean loading = false;
 
@@ -747,7 +744,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
         bottomOverlayChatText.setTextColor(0xff3e6fa1);
         bottomOverlayChat.addView(bottomOverlayChatText, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER));
 
-//        if (loading && postObjects.isEmpty()) {
+//        if (loading && posts.isEmpty()) {
 //            progressView.setVisibility(View.VISIBLE);
 //            postListView.setEmptyView(null);
 //        } else {
@@ -793,7 +790,7 @@ private boolean searchForHttpInText(CharSequence string) {
 
     private void moveScrollToLastPost() {
 //        if (postListView != null) {
-//            postLayoutManager.scrollToPositionWithOffset(postObjects.size() - 1, -100000 - postListView.getPaddingTop());
+//            postLayoutManager.scrollToPositionWithOffset(posts.size() - 1, -100000 - postListView.getPaddingTop());
 //        }
     }
 
@@ -814,8 +811,8 @@ private void checkActionBarMenu() {
     }
 
 
-    private int getPostType(PostObject postObject) {
-        if (postObject == null) {
+    private int getPostType(Post post) {
+        if (post == null) {
             return -1;
         } else {
             return -1;
@@ -838,9 +835,9 @@ private void updateTitle() {
             return;
         }
         String name = "Current location";
-        if (venueObject != null) {
-            if (!StringUtils.isEmpty(venueObject.getName())) {
-                name = venueObject.getName();
+        if (venue != null) {
+            if (!StringUtils.isEmpty(venue.getName())) {
+                name = venue.getName();
             }
             nameTextView.setText(name);
         }
@@ -867,8 +864,8 @@ private void updateSubtitle() {
         }
 //        CharSequence addressString = "printing";
         CharSequence addressString = "address";
-        if (venueObject != null && !StringUtils.isEmpty(venueObject.getAddress())) {
-            addressString = venueObject.getAddress();
+        if (venue != null && !StringUtils.isEmpty(venue.getAddress())) {
+            addressString = venue.getAddress();
         }
         addressString = TextUtils.replace(addressString, new String[]{"..."}, new String[]{""});
         onlineTextView.setText(addressString);
@@ -883,12 +880,12 @@ private void checkAndUpdateAvatar() {
             AvatarDrawable avatarDrawable = new AvatarDrawable();
 //            avatarImageView.setImage(newPhoto, "50_50", avatarDrawable);
 //            avatarImageView.setImage("/storage/emulated/0/Telegram/Telegram Images/730111210_6623.jpg", "50_50", avatarDrawable);
-            //TODO probably save venueObject. into field in Activity.
-            if (venueObject != null && !StringUtils.isEmpty(venueObject.getVenuePreviewImageUrl())) {
-                avatarImageView.setImage(venueObject.getVenuePreviewImageUrl(), "50_50", avatarDrawable);
+            //TODO probably save venue. into field in Activity.
+            if (venue != null && !StringUtils.isEmpty(venue.getPreviewImage().getUrl())) {
+                avatarImageView.setImage(venue.getPreviewImage().getUrl(), "50_50", avatarDrawable);
             } else {
                 avatarImageView.setImageResource(R.drawable.pin);
-//                    avatarImageView.setImage(PostsController.getInstance().getCurrentVenueObject().getVenuePreviewImageUrl(), "50_50", avatarDrawable);
+//                    avatarImageView.setImage(PostsController.getInstance().getCurrentVenue().getVenuePreviewImageUrl(), "50_50", avatarDrawable);
             }
 
         }
@@ -1035,7 +1032,7 @@ public void onResume() {
             postCreateActivityEnterView.setFieldText(lastMessageText);
         }
         String lastPhotoURL = preferences.getString("new_post_photo", null);
-        if (!StringUtils.isEmpty(lastPhotoURL) && postObjects.isEmpty()) {
+        if (!StringUtils.isEmpty(lastPhotoURL) && posts.isEmpty()) {
             preferences.edit().remove("new_post_photo").commit();
             ArrayList<String> photos = new ArrayList<>();
             photos.add(lastPhotoURL);
@@ -1067,15 +1064,15 @@ public void onPause() {
         if (postCreateActivityEnterView != null) {
             postCreateActivityEnterView.hideEmojiPopup();
             String text = postCreateActivityEnterView.getFieldText();
-            if (text != null || !postObjects.isEmpty()) {
+            if (text != null || !posts.isEmpty()) {
                 SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
                 SharedPreferences.Editor editor = preferences.edit();
                 //TODO save text before pause.
                 if (text != null) {
                     editor.putString("new_post_text", text);
                 }
-                if (!postObjects.isEmpty()) {
-                    editor.putString("new_post_photo", postObjects.get(0).getImage().getUrl());
+                if (!posts.isEmpty()) {
+                    editor.putString("new_post_photo", posts.get(0).getImage().getUrl());
                 }
                 editor.commit();
             }
@@ -1133,14 +1130,14 @@ public void createMenu(View v, boolean single) {
             return;
         }
 
-        PostObject postObject = null;
+        Post post = null;
         if (v instanceof PostMediaCell) {
-            postObject = ((PostMediaCell) v).getPostObject();
+            post = ((PostMediaCell) v).getPost();
         }
-        if (postObject == null) {
+        if (post == null) {
             return;
         }
-        int type = getPostType(postObject);
+        int type = getPostType(post);
 
         type = 1;
         selectedObject = null;
@@ -1148,7 +1145,7 @@ public void createMenu(View v, boolean single) {
 
 //        if (single || type < 2 || type == 20) {
 //            if (type >= 0) {
-        selectedObject = postObject;
+        selectedObject = post;
         if (getParentActivity() == null) {
             return;
         }
@@ -1212,7 +1209,7 @@ private void processSelectedOption(int option) {
             return;
         }
         if (option == 1) {
-            final PostObject finalSelectedObject = selectedObject;
+            final Post finalSelectedObject = selectedObject;
             AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
             builder.setMessage(LocaleController.formatString("AreYouSureDeleteMessages", R.string.AreYouSureDeleteMessages, LocaleController.formatPluralString("messages", 1)));
             builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
@@ -1318,20 +1315,21 @@ public void updatePhotoAtIndex(int index) {
     }
 
     @Override
-    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(PostObject postObject) {
+    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(Post postObject) {
         if (postObject == null) {
             return null;
         }
         int count = postListView.getChildCount();
 
         for (int a = 0; a < count; a++) {
-            PostObject postToOpen = null;
+            Post postToOpen = null;
             ImageReceiver imageReceiver = null;
             View view = postListView.getChildAt(a);
             if (view instanceof PostMediaCell) {
                 PostMediaCell cell = (PostMediaCell) view;
-                PostObject post = cell.getPostObject();
-                if (post != null && post.getId() == postObject.getId()) {
+                Post post = cell.getPost();
+                if (post != null && !StringUtils.isEmpty(post.getId())
+                        &&  post.getId().equals(postObject.getId())) {
                     postToOpen = post;
                     imageReceiver = cell.getPhotoImage();
                 }
@@ -1354,12 +1352,12 @@ public void updatePhotoAtIndex(int index) {
     }
 
     @Override
-    public Bitmap getThumbForPhoto(PostObject postObject, int index) {
+    public Bitmap getThumbForPhoto(Post post, int index) {
         return null;
     }
 
     @Override
-    public void willSwitchFromPhoto(PostObject postObject) {
+    public void willSwitchFromPhoto(Post post) {
     }
 
     @Override
@@ -1405,7 +1403,7 @@ public Holder(View itemView) {
 
         @Override
         public int getItemCount() {
-            return postObjects.size();
+            return posts.size();
         }
 
         @Override
@@ -1441,9 +1439,9 @@ public void didPressedUserAvatar(PostMediaCell cell) {
 
                     @Override
                     public void didPressedCancelSendButton(PostMediaCell cell) {
-                        PostObject postObject = cell.getPostObject();
-                        postObjects.remove(postObject);
-                        postObjects.clear();
+                        Post post = cell.getPost();
+                        posts.remove(post);
+                        posts.clear();
                         postCreateAdapter.notifyDataSetChanged();
                     }
 
@@ -1484,7 +1482,7 @@ public void didPressReplyMessage(PostMediaCell cell, int id) {
                     //TODO Now I do not use it in PostMedia, but I can. Look at PostMedia.didClickedImage
                     @Override
                     public void didClickedImage(PostMediaCell cell) {
-                        PostObject post = cell.getPostObject();
+                        Post post = cell.getPost();
 
                         PhotoViewer.getInstance().setParentActivity(getParentActivity());
                         PhotoViewer.getInstance().openPhoto(post, PostCreateActivity.this);
@@ -1517,8 +1515,8 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                 return;
             }
 
-//            PostObject post = postObjects.get(postObjects.size() - position - (!endReached ? 0 : 1));
-            PostObject post = postObjects.get(position);
+//            PostObject post = posts.get(posts.size() - position - (!endReached ? 0 : 1));
+            Post post = posts.get(position);
             View view = holder.itemView;
 
 //            int type = post.contentType;
@@ -1536,7 +1534,7 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
 
             if (view instanceof PostMediaCell) {
                 PostMediaCell cell = (PostMediaCell) view;
-                cell.setPostObject(post);
+                cell.setPost(post);
             }
         }
 
@@ -1544,16 +1542,16 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
         public int getItemViewType(int position) {
             return 1;
 //            int offset = 1;
-//            if (postObjects.size() != 0) {
+//            if (posts.size() != 0) {
 //                offset = 0;
 //                if (position == 0) {
 //                    return 5;
 //                }
 //            }
-//            if (position == (postObjects.size() + 1 - offset)) {
+//            if (position == (posts.size() + 1 - offset)) {
 //                return 5;
 //            }
-//            PostObject post = postObjects.get(postObjects.size() - position - offset);
+//            PostObject post = posts.get(posts.size() - position - offset);
 ////            return post.contentType;
 //            return 1;
         }
@@ -1562,23 +1560,23 @@ public int getItemViewType(int position) {
         public void onViewAttachedToWindow(RecyclerView.ViewHolder holder) {
         }
 
-        public void updateRowWithPostObject(PostObject postObject) {
-            int index = postObjects.indexOf(postObject);
+        public void updateRowWithPost(Post post) {
+            int index = posts.indexOf(post);
             if (index == -1) {
                 return;
             }
-//            notifyItemChanged(postObjects.size() - (!endReached ? 0 : 1) - index);
-            notifyItemChanged(postObjects.size() - index);
+//            notifyItemChanged(posts.size() - (!endReached ? 0 : 1) - index);
+            notifyItemChanged(posts.size() - index);
         }
 
-        public void removePostObject(PostObject postObject) {
-            int index = postObjects.indexOf(postObject);
+        public void removePost(Post post) {
+            int index = posts.indexOf(post);
             if (index == -1) {
                 return;
             }
-            postObjects.remove(index);
-//            notifyItemRemoved(postObjects.size() - (!endReached ? 0 : 1) - index);
-            notifyItemRemoved(postObjects.size() - index);
+            posts.remove(index);
+//            notifyItemRemoved(posts.size() - (!endReached ? 0 : 1) - index);
+            notifyItemRemoved(posts.size() - index);
         }
     }
 
@@ -1606,7 +1604,7 @@ public void didSelectLocation(TLRPC.MessageMedia location) {
                 if (StringUtils.isEmpty(venue.getAddress())) {
                     venue.setAddress(location.geo._long + ", " + location.geo.lat);
                 }
-                venueObject = new VenueObject(venue);
+                PostCreateActivity.this.venue = venue;
 //                location.iconUrl;
 //                Toast.makeText(getParentActivity(), location.venue_id + " " + location.geo.lat + " " + location.geo._long, Toast.LENGTH_LONG).show();
 //                            SendMessagesHelper.getInstance().sendMessage(location, dialog_id, replyingMessageObject);
@@ -1670,10 +1668,10 @@ private void didSelectPhotos(ArrayList<String> photos) {
             post.setPreviewImage(image);
             post.setVenue(VenueServiceMock.getRandomVenue());
             //TODO-temp
-//            PostCreateActivity.this.postObject = new PostObject(post);
+//            PostCreateActivity.this.post = new PostObject(post);
             //DELETE ALL to store only one
-            PostCreateActivity.this.postObjects.clear();
-            PostCreateActivity.this.postObjects.add(new PostObject(post));
+            PostCreateActivity.this.posts.clear();
+            PostCreateActivity.this.posts.add(post);
 
             postCreateAdapter.notifyDataSetChanged();
         }
@@ -1749,7 +1747,7 @@ private boolean attachPhotoHandle() {
 
 
     private void updateVenue() {
-        if (venueObject != null) {
+        if (venue != null) {
             updateTitle();
             updateSubtitle();
             checkAndUpdateAvatar();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostPhotoViewerProvider.java b/TMessagesProj/src/main/java/org/telegram/ui/PostPhotoViewerProvider.java
index ce8af446c..eb1aaaaa8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostPhotoViewerProvider.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostPhotoViewerProvider.java
@@ -2,9 +2,7 @@
 
 import android.graphics.Bitmap;
 
-import org.telegram.android.MessageObject;
-import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.object.PostObject;
+import org.telegram.messenger.dto.Post;
 
 /**
  * Created by aragats on 05/07/15.
@@ -12,13 +10,13 @@
 //TODO-aragats. This is copy form PhotoViewerProvvider from PhotoViewer.
 public interface PostPhotoViewerProvider {
 
-    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(PostObject postObject);
+    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(Post post);
 
-    Bitmap getThumbForPhoto(PostObject postObject, int index);
+    Bitmap getThumbForPhoto(Post post, int index);
 
 //    void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index);
 
-    public void willSwitchFromPhoto(PostObject postObject);
+    public void willSwitchFromPhoto(Post post);
 
 
     void willHidePhotoViewer();
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
index 5b3114952..2920e4c81 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
@@ -50,8 +50,7 @@
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
 //TODO delte it or reuse.
-import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.object.PostObject;
+import org.telegram.messenger.dto.Post;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
@@ -103,26 +102,26 @@
 
     //TODO-legacy. update according to new version.
     @Override
-    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(PostObject postObjectObject) {
-        if (postObjectObject == null) {
+    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(Post post) {
+        if (post == null) {
             return null;
         }
         int count = this.postListView.getChildCount();
 
         for (int a = 0; a < count; a++) {
-            PostObject postObjectToOpen = null;
+            Post postToOpen = null;
             ImageReceiver imageReceiver = null;
             View view = this.postListView.getChildAt(a);
             if (view instanceof PostCell) {
                 PostCell cell = (PostCell) view;
-                PostObject post = cell.getPostObject();
-                if (post != null && post.getId() != null && post.getId().equals(postObjectObject.getId())) {
-                    postObjectToOpen = post;
+                Post cellPost = cell.getPost();
+                if (cellPost != null && cellPost.getId() != null && cellPost.getId().equals(post.getId())) {
+                    postToOpen = cellPost;
                     imageReceiver = cell.getPhotoImage();
                 }
             }
 
-            if (postObjectToOpen != null) {
+            if (postToOpen != null) {
                 int coords[] = new int[2];
                 view.getLocationInWindow(coords);
                 PhotoViewer.PlaceProviderObject object = new PhotoViewer.PlaceProviderObject();
@@ -140,12 +139,12 @@
     }
 
     @Override
-    public Bitmap getThumbForPhoto(PostObject postObject, int index) {
+    public Bitmap getThumbForPhoto(Post post, int index) {
         return null;
     }
 
     @Override
-    public void willSwitchFromPhoto(PostObject postObject) {
+    public void willSwitchFromPhoto(Post post) {
 
     }
 
@@ -280,7 +279,7 @@ public boolean onSearchCollapse() {
                 searchWas = false;
                 if (postListView != null) {
                     searchEmptyView.setVisibility(View.INVISIBLE);
-                    if (PostsController.getInstance().loadingPosts && PostsController.getInstance().postObjects.isEmpty()) {
+                    if (PostsController.getInstance().loadingPosts && PostsController.getInstance().posts.isEmpty()) {
                         emptyView.setVisibility(View.INVISIBLE);
                         postListView.setEmptyView(progressView);
                     } else {
@@ -410,16 +409,16 @@ public void onItemClick(View view, int position) {
                 String message_id = "";
                 RecyclerView.Adapter adapter = postListView.getAdapter();
                 if (adapter == postsAdapter) {
-                    PostObject postObject = postsAdapter.getItem(position);
+                    Post postObject = postsAdapter.getItem(position);
                     if (postObject == null) {
                         return;
                     }
                     post_id = postObject.getId();
                 } else if (adapter == postsSearchAdapter) {
                     Object obj = postsSearchAdapter.getItem(position);
-                    if (obj instanceof PostObject) {
-                        PostObject postObject = (PostObject) obj;
-                        post_id = postObject.getId();
+                    if (obj instanceof Post) {
+                        Post post = (Post) obj;
+                        post_id = post.getId();
                         postsSearchAdapter.addHashtagsFromMessage(postsSearchAdapter.getLastSearchString());
                     } else if (obj instanceof String) {
                         actionBar.openSearchField((String) obj);
@@ -555,8 +554,8 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                 }
                 //TODO fix it.
                 if (visibleItemCount > 0) {
-                    if (layoutManager.findLastVisibleItemPosition() == PostsController.getInstance().postObjects.size() - 1) {
-                        PostsController.getInstance().loadPosts(PostsController.getInstance().postObjects.size(), 20, true);
+                    if (layoutManager.findLastVisibleItemPosition() == PostsController.getInstance().posts.size() - 1) {
+                        PostsController.getInstance().loadPosts(PostsController.getInstance().posts.size(), 20, true);
                     }
                 }
 
@@ -613,7 +612,7 @@ public void searchStateChanged(boolean search) {
             }
         });
 
-        if (PostsController.getInstance().loadingPosts && PostsController.getInstance().postObjects.isEmpty()) {
+        if (PostsController.getInstance().loadingPosts && PostsController.getInstance().posts.isEmpty()) {
             searchEmptyView.setVisibility(View.INVISIBLE);
             emptyView.setVisibility(View.INVISIBLE);
             postListView.setEmptyView(progressView);
@@ -677,7 +676,7 @@ public void didReceivedNotification(int id, Object... args) {
             }
             if (postListView != null) {
                 try {
-                    if (PostsController.getInstance().loadingPosts && PostsController.getInstance().postObjects.isEmpty()) {
+                    if (PostsController.getInstance().loadingPosts && PostsController.getInstance().posts.isEmpty()) {
                         searchEmptyView.setVisibility(View.INVISIBLE);
                         emptyView.setVisibility(View.INVISIBLE);
                         postListView.setEmptyView(progressView);
@@ -822,11 +821,9 @@ public void onClick(DialogInterface dialogInterface, int i) {
             }
             return;
         }
-        PostObject postObject;
+        Post post = PostsController.getInstance().posts.get(position);
 
-        postObject = PostsController.getInstance().postObjects.get(position);
-
-        selectedPost = postObject.getId();
+        selectedPost = post.getId();
 
                 /*AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
                 builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
