diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index d455c581c..36b62e63f 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -9,9 +9,6 @@ configurations {
 }
 
 dependencies {
-    compile 'com.google.android.gms:play-services-gcm:11.0.4'
-    compile 'com.google.android.gms:play-services-maps:11.0.4'
-    compile 'com.google.android.gms:play-services-wearable:11.0.4'
     compile 'com.android.support:support-core-ui:25.3.1'
     compile 'com.android.support:support-compat:25.3.1'
     compile 'com.android.support:support-core-utils:25.3.1'
@@ -195,5 +192,3 @@ android {
         }
     }
 }
-
-apply plugin: 'com.google.gms.google-services'
diff --git a/TMessagesProj/config/debug/AndroidManifest.xml b/TMessagesProj/config/debug/AndroidManifest.xml
index 28bc1cd74..2bb8f2d62 100644
--- a/TMessagesProj/config/debug/AndroidManifest.xml
+++ b/TMessagesProj/config/debug/AndroidManifest.xml
@@ -9,16 +9,8 @@
     <uses-feature android:name="android.hardware.location" android:required="false" />
     <uses-feature android:name="android.hardware.LOCATION" android:required="false" />
 
-    <uses-permission android:name="com.google.android.c2dm.permission.RECEIVE" />
-    <uses-permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE"/>
-    <uses-permission android:name="org.telegram.messenger.permission.C2D_MESSAGE" />
-    <uses-permission android:name="com.google.android.providers.gsf.permission.READ_GSERVICES"/>
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
-
-    <permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE" android:protectionLevel="signature"/>
-    <permission android:name="org.telegram.messenger.permission.C2D_MESSAGE" android:protectionLevel="signature" />
-
     <application
         android:allowBackup="false"
         android:icon="@drawable/ic_launcher"
@@ -28,56 +20,6 @@
         android:name=".ApplicationLoader"
         android:hardwareAccelerated="@bool/useHardwareAcceleration"
         android:largeHeap="true">
-
-        <meta-data android:name="com.google.android.maps.v2.API_KEY" android:value="AIzaSyA-t0jLPjUt2FxrA8VPK2EiYHcYcboIR6k" />
-
-        <receiver
-            android:name="com.google.android.gms.gcm.GcmReceiver"
-            android:exported="true"
-            android:permission="com.google.android.c2dm.permission.SEND" >
-            <intent-filter>
-                <action android:name="com.google.android.c2dm.intent.RECEIVE" />
-                <action android:name="com.google.android.c2dm.intent.REGISTRATION" />
-                <category android:name="org.telegram.messenger" />
-            </intent-filter>
-        </receiver>
-        <service
-            android:name=".GcmPushListenerService"
-            android:exported="false" >
-            <intent-filter>
-                <action android:name="com.google.android.c2dm.intent.RECEIVE" />
-            </intent-filter>
-        </service>
-        <service
-            android:name=".GcmInstanceIDListenerService"
-            android:exported="false">
-            <intent-filter>
-                <action android:name="com.google.android.gms.iid.InstanceID" />
-            </intent-filter>
-        </service>
-        <service
-            android:name=".GcmRegistrationIntentService"
-            android:exported="false">
-        </service>
-
-        <uses-library android:name="com.google.android.maps" android:required="false"/>
-
-
-        <receiver
-            tools:replace="android:enabled"
-            android:name="com.google.android.gms.measurement.AppMeasurementReceiver"
-            android:enabled="false">
-            <intent-filter>
-                <action android:name="com.google.android.gms.measurement.UPLOAD" />
-            </intent-filter>
-        </receiver>
-
-        <service
-            tools:replace="android:enabled"
-            android:name="com.google.android.gms.measurement.AppMeasurementService"
-            android:enabled="false"
-            android:exported="false" />
-
     </application>
 
 </manifest>
diff --git a/TMessagesProj/config/debug/AndroidManifest_SDK23.xml b/TMessagesProj/config/debug/AndroidManifest_SDK23.xml
index 3b6ffea24..5fde9c05c 100644
--- a/TMessagesProj/config/debug/AndroidManifest_SDK23.xml
+++ b/TMessagesProj/config/debug/AndroidManifest_SDK23.xml
@@ -9,19 +9,11 @@
     <uses-feature android:name="android.hardware.location" android:required="false" />
     <uses-feature android:name="android.hardware.LOCATION" android:required="false" />
 
-    <uses-permission android:name="com.google.android.c2dm.permission.RECEIVE" />
-    <uses-permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE"/>
-    <uses-permission android:name="org.telegram.messenger.permission.C2D_MESSAGE" />
-    <uses-permission android:name="com.google.android.providers.gsf.permission.READ_GSERVICES"/>
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
     <uses-permission android:name="android.permission.CALL_PHONE" />
     <uses-permission android:name="android.permission.READ_CALL_LOG" />
     <uses-permission android:name="android.permission.WRITE_CALL_LOG" />
-
-    <permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE" android:protectionLevel="signature"/>
-    <permission android:name="org.telegram.messenger.permission.C2D_MESSAGE" android:protectionLevel="signature" />
-
     <application
         android:allowBackup="false"
         android:icon="@drawable/ic_launcher"
@@ -31,56 +23,6 @@
         android:name=".ApplicationLoader"
         android:hardwareAccelerated="@bool/useHardwareAcceleration"
         android:largeHeap="true">
-
-        <meta-data android:name="com.google.android.maps.v2.API_KEY" android:value="AIzaSyA-t0jLPjUt2FxrA8VPK2EiYHcYcboIR6k" />
-
-        <receiver
-            android:name="com.google.android.gms.gcm.GcmReceiver"
-            android:exported="true"
-            android:permission="com.google.android.c2dm.permission.SEND" >
-            <intent-filter>
-                <action android:name="com.google.android.c2dm.intent.RECEIVE" />
-                <action android:name="com.google.android.c2dm.intent.REGISTRATION" />
-                <category android:name="org.telegram.messenger" />
-            </intent-filter>
-        </receiver>
-        <service
-            android:name=".GcmPushListenerService"
-            android:exported="false" >
-            <intent-filter>
-                <action android:name="com.google.android.c2dm.intent.RECEIVE" />
-            </intent-filter>
-        </service>
-        <service
-            android:name=".GcmInstanceIDListenerService"
-            android:exported="false">
-            <intent-filter>
-                <action android:name="com.google.android.gms.iid.InstanceID" />
-            </intent-filter>
-        </service>
-        <service
-            android:name=".GcmRegistrationIntentService"
-            android:exported="false">
-        </service>
-
-        <uses-library android:name="com.google.android.maps" android:required="false"/>
-
-
-        <receiver
-            tools:replace="android:enabled"
-            android:name="com.google.android.gms.measurement.AppMeasurementReceiver"
-            android:enabled="false">
-            <intent-filter>
-                <action android:name="com.google.android.gms.measurement.UPLOAD" />
-            </intent-filter>
-        </receiver>
-
-        <service
-            tools:replace="android:enabled"
-            android:name="com.google.android.gms.measurement.AppMeasurementService"
-            android:enabled="false"
-            android:exported="false" />
-
     </application>
 
 </manifest>
diff --git a/TMessagesProj/config/release/AndroidManifest.xml b/TMessagesProj/config/release/AndroidManifest.xml
index 608cdfcce..3c5cba8a0 100644
--- a/TMessagesProj/config/release/AndroidManifest.xml
+++ b/TMessagesProj/config/release/AndroidManifest.xml
@@ -9,16 +9,8 @@
     <uses-feature android:name="android.hardware.location" android:required="false" />
     <uses-feature android:name="android.hardware.LOCATION" android:required="false" />
 
-    <uses-permission android:name="com.google.android.c2dm.permission.RECEIVE" />
-    <uses-permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE"/>
-    <uses-permission android:name="org.telegram.messenger.permission.C2D_MESSAGE" />
-    <uses-permission android:name="com.google.android.providers.gsf.permission.READ_GSERVICES"/>
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
-
-    <permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE" android:protectionLevel="signature"/>
-    <permission android:name="org.telegram.messenger.permission.C2D_MESSAGE" android:protectionLevel="signature" />
-
     <application
         android:allowBackup="false"
         android:icon="@drawable/ic_launcher"
@@ -28,55 +20,6 @@
         android:name=".ApplicationLoader"
         android:hardwareAccelerated="@bool/useHardwareAcceleration"
         android:largeHeap="true">
-
-        <meta-data android:name="com.google.android.maps.v2.API_KEY" android:value="AIzaSyA-t0jLPjUt2FxrA8VPK2EiYHcYcboIR6k" />
-
-        <receiver
-            android:name="com.google.android.gms.gcm.GcmReceiver"
-            android:exported="true"
-            android:permission="com.google.android.c2dm.permission.SEND" >
-            <intent-filter>
-                <action android:name="com.google.android.c2dm.intent.RECEIVE" />
-                <action android:name="com.google.android.c2dm.intent.REGISTRATION" />
-                <category android:name="org.telegram.messenger" />
-            </intent-filter>
-        </receiver>
-        <service
-            android:name=".GcmPushListenerService"
-            android:exported="false" >
-            <intent-filter>
-                <action android:name="com.google.android.c2dm.intent.RECEIVE" />
-            </intent-filter>
-        </service>
-        <service
-            android:name=".GcmInstanceIDListenerService"
-            android:exported="false">
-            <intent-filter>
-                <action android:name="com.google.android.gms.iid.InstanceID" />
-            </intent-filter>
-        </service>
-        <service
-            android:name=".GcmRegistrationIntentService"
-            android:exported="false">
-        </service>
-
-        <uses-library android:name="com.google.android.maps" android:required="false"/>
-
-        <receiver
-            tools:replace="android:enabled"
-            android:name="com.google.android.gms.measurement.AppMeasurementReceiver"
-            android:enabled="false">
-            <intent-filter>
-                <action android:name="com.google.android.gms.measurement.UPLOAD" />
-            </intent-filter>
-        </receiver>
-
-        <service
-            tools:replace="android:enabled"
-            android:name="com.google.android.gms.measurement.AppMeasurementService"
-            android:enabled="false"
-            android:exported="false" />
-
     </application>
 
 </manifest>
diff --git a/TMessagesProj/config/release/AndroidManifest_SDK23.xml b/TMessagesProj/config/release/AndroidManifest_SDK23.xml
index 619daff67..cfba89475 100644
--- a/TMessagesProj/config/release/AndroidManifest_SDK23.xml
+++ b/TMessagesProj/config/release/AndroidManifest_SDK23.xml
@@ -9,19 +9,11 @@
     <uses-feature android:name="android.hardware.location" android:required="false" />
     <uses-feature android:name="android.hardware.LOCATION" android:required="false" />
 
-    <uses-permission android:name="com.google.android.c2dm.permission.RECEIVE" />
-    <uses-permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE"/>
-    <uses-permission android:name="org.telegram.messenger.permission.C2D_MESSAGE" />
-    <uses-permission android:name="com.google.android.providers.gsf.permission.READ_GSERVICES"/>
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
     <uses-permission android:name="android.permission.CALL_PHONE" />
     <uses-permission android:name="android.permission.READ_CALL_LOG" />
     <uses-permission android:name="android.permission.WRITE_CALL_LOG" />
-
-    <permission android:name="org.telegram.messenger.permission.MAPS_RECEIVE" android:protectionLevel="signature"/>
-    <permission android:name="org.telegram.messenger.permission.C2D_MESSAGE" android:protectionLevel="signature" />
-
     <application
         android:allowBackup="false"
         android:icon="@drawable/ic_launcher"
@@ -31,55 +23,6 @@
         android:name=".ApplicationLoader"
         android:hardwareAccelerated="@bool/useHardwareAcceleration"
         android:largeHeap="true">
-
-        <meta-data android:name="com.google.android.maps.v2.API_KEY" android:value="AIzaSyA-t0jLPjUt2FxrA8VPK2EiYHcYcboIR6k" />
-
-        <receiver
-            android:name="com.google.android.gms.gcm.GcmReceiver"
-            android:exported="true"
-            android:permission="com.google.android.c2dm.permission.SEND" >
-            <intent-filter>
-                <action android:name="com.google.android.c2dm.intent.RECEIVE" />
-                <action android:name="com.google.android.c2dm.intent.REGISTRATION" />
-                <category android:name="org.telegram.messenger" />
-            </intent-filter>
-        </receiver>
-        <service
-            android:name=".GcmPushListenerService"
-            android:exported="false" >
-            <intent-filter>
-                <action android:name="com.google.android.c2dm.intent.RECEIVE" />
-            </intent-filter>
-        </service>
-        <service
-            android:name=".GcmInstanceIDListenerService"
-            android:exported="false">
-            <intent-filter>
-                <action android:name="com.google.android.gms.iid.InstanceID" />
-            </intent-filter>
-        </service>
-        <service
-            android:name=".GcmRegistrationIntentService"
-            android:exported="false">
-        </service>
-
-        <uses-library android:name="com.google.android.maps" android:required="false"/>
-
-        <receiver
-            tools:replace="android:enabled"
-            android:name="com.google.android.gms.measurement.AppMeasurementReceiver"
-            android:enabled="false">
-            <intent-filter>
-                <action android:name="com.google.android.gms.measurement.UPLOAD" />
-            </intent-filter>
-        </receiver>
-
-        <service
-            tools:replace="android:enabled"
-            android:name="com.google.android.gms.measurement.AppMeasurementService"
-            android:enabled="false"
-            android:exported="false" />
-
     </application>
 
 </manifest>
diff --git a/TMessagesProj/src/main/AndroidManifest.xml b/TMessagesProj/src/main/AndroidManifest.xml
index c89c21afa..948f69245 100644
--- a/TMessagesProj/src/main/AndroidManifest.xml
+++ b/TMessagesProj/src/main/AndroidManifest.xml
@@ -265,16 +265,6 @@
                 <action android:name="android.media.browse.MediaBrowserService"/>
             </intent-filter>
         </service>
-        <service android:name=".WearDataLayerListenerService">
-            <intent-filter>
-                <!-- listeners receive events that match the action and data filters -->
-                <action android:name="com.google.android.gms.wearable.DATA_CHANGED" />
-                <action android:name="com.google.android.gms.wearable.MESSAGE_RECEIVED" />
-                <action android:name="com.google.android.gms.wearable.CAPABILITY_CHANGED" />
-                <action android:name="com.google.android.gms.wearable.CHANNEL_EVENT" />
-                <data android:scheme="wear" android:host="*" />
-            </intent-filter>
-        </service>
 
         <receiver android:name=".MusicPlayerReceiver" >
             <intent-filter>
@@ -337,9 +327,6 @@
         <meta-data android:name="com.sec.android.multiwindow.MINIMUM_SIZE_W" android:value="632dp" />
         <meta-data android:name="com.sec.android.multiwindow.MINIMUM_SIZE_H" android:value="598dp" />
 
-        <meta-data android:name="com.google.android.gms.car.notification.SmallIcon" android:resource="@drawable/ic_player" />
-        <meta-data android:name="com.google.android.gms.car.application" android:resource="@xml/automotive_app_desc" />
-
         <meta-data android:name="com.samsung.android.icon_container.has_icon_container" android:value="true"/>
         <meta-data android:name="android.max_aspect" android:value="2.5" />
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
index 804d063a6..66809c44a 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ApplicationLoader.java
@@ -23,9 +23,6 @@
 import android.os.Handler;
 import android.os.PowerManager;
 
-import com.google.android.gms.common.ConnectionResult;
-import com.google.android.gms.common.GooglePlayServicesUtil;
-
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.ui.Components.ForegroundDetector;
 
@@ -101,7 +98,6 @@ public static void postInitApplication() {
         }
 
         ApplicationLoader app = (ApplicationLoader)ApplicationLoader.applicationContext;
-        app.initPlayServices();
         FileLog.e("app initied");
 
         ContactsController.getInstance().checkAppAccount();
@@ -169,75 +165,4 @@ public void onConfigurationChanged(Configuration newConfig) {
             e.printStackTrace();
         }
     }
-
-    private void initPlayServices() {
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                if (checkPlayServices()) {
-                    if (UserConfig.pushString != null && UserConfig.pushString.length() != 0) {
-                        FileLog.d("GCM regId = " + UserConfig.pushString);
-                    } else {
-                        FileLog.d("GCM Registration not found.");
-                    }
-
-                    //if (UserConfig.pushString == null || UserConfig.pushString.length() == 0) {
-                    Intent intent = new Intent(applicationContext, GcmRegistrationIntentService.class);
-                    startService(intent);
-                    //} else {
-                    //    FileLog.d("GCM regId = " + UserConfig.pushString);
-                    //}
-                } else {
-                    FileLog.d("No valid Google Play Services APK found.");
-                }
-            }
-        }, 1000);
-    }
-
-    /*private void initPlayServices() {
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                if (checkPlayServices()) {
-                    if (UserConfig.pushString != null && UserConfig.pushString.length() != 0) {
-                        FileLog.d("GCM regId = " + UserConfig.pushString);
-                    } else {
-                        FileLog.d("GCM Registration not found.");
-                    }
-                    try {
-                        if (!FirebaseApp.getApps(ApplicationLoader.applicationContext).isEmpty()) {
-                            String token = FirebaseInstanceId.getInstance().getToken();
-                            if (token != null) {
-                                sendRegIdToBackend(token);
-                            }
-                        }
-                    } catch (Throwable e) {
-                        FileLog.e(e);
-                    }
-                } else {
-                    FileLog.d("No valid Google Play Services APK found.");
-                }
-            }
-        }, 2000);
-    }*/
-
-    private boolean checkPlayServices() {
-        try {
-            int resultCode = GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);
-            return resultCode == ConnectionResult.SUCCESS;
-        } catch (Exception e) {
-            FileLog.e(e);
-        }
-        return true;
-
-        /*if (resultCode != ConnectionResult.SUCCESS) {
-            if (GooglePlayServicesUtil.isUserRecoverableError(resultCode)) {
-                GooglePlayServicesUtil.getErrorDialog(resultCode, this, PLAY_SERVICES_RESOLUTION_REQUEST).show();
-            } else {
-                Log.i("tmessages", "This device is not supported.");
-            }
-            return false;
-        }
-        return true;*/
-    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/GcmInstanceIDListenerService.java b/TMessagesProj/src/main/java/org/telegram/messenger/GcmInstanceIDListenerService.java
deleted file mode 100755
index 11903a18e..000000000
--- a/TMessagesProj/src/main/java/org/telegram/messenger/GcmInstanceIDListenerService.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 3.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2017.
- */
-
-package org.telegram.messenger;
-
-import android.content.Intent;
-
-import com.google.android.gms.iid.InstanceIDListenerService;
-
-public class GcmInstanceIDListenerService extends InstanceIDListenerService {
-
-    @Override
-    public void onTokenRefresh() {
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                ApplicationLoader.postInitApplication();
-                Intent intent = new Intent(ApplicationLoader.applicationContext, GcmRegistrationIntentService.class);
-                startService(intent);
-            }
-        });
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/GcmPushListenerService.java b/TMessagesProj/src/main/java/org/telegram/messenger/GcmPushListenerService.java
deleted file mode 100755
index 466aca38b..000000000
--- a/TMessagesProj/src/main/java/org/telegram/messenger/GcmPushListenerService.java
+++ /dev/null
@@ -1,113 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 3.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2017.
- */
-
-package org.telegram.messenger;
-
-import android.content.Context;
-import android.net.ConnectivityManager;
-import android.net.NetworkInfo;
-import android.os.Build;
-import android.os.Bundle;
-
-import com.google.android.gms.gcm.GcmListenerService;
-
-import org.json.JSONObject;
-import org.telegram.tgnet.ConnectionsManager;
-import org.telegram.tgnet.TLRPC;
-
-import android.net.ConnectivityManager;
-
-public class GcmPushListenerService extends GcmListenerService {
-
-    public static final int NOTIFICATION_ID = 1;
-
-    @Override
-    public void onMessageReceived(String from, final Bundle bundle) {
-        FileLog.d("GCM received bundle: " + bundle + " from: " + from);
-        AndroidUtilities.runOnUIThread(new Runnable() {
-            @Override
-            public void run() {
-                ApplicationLoader.postInitApplication();
-
-                try {
-                    String key = bundle.getString("loc_key");
-                    if ("DC_UPDATE".equals(key)) {
-                        String data = bundle.getString("custom");
-                        JSONObject object = new JSONObject(data);
-                        int dc = object.getInt("dc");
-                        String addr = object.getString("addr");
-                        String[] parts = addr.split(":");
-                        if (parts.length != 2) {
-                            return;
-                        }
-                        String ip = parts[0];
-                        int port = Integer.parseInt(parts[1]);
-                        ConnectionsManager.getInstance().applyDatacenterAddress(dc, ip, port);
-                    } else if ("MESSAGE_ANNOUNCEMENT".equals(key)) {
-                        Object obj = bundle.get("google.sent_time");
-                        long time;
-                        try {
-                            if (obj instanceof String) {
-                                time = Utilities.parseLong((String) obj);
-                            } else if (obj instanceof Long) {
-                                time = (Long) obj;
-                            } else {
-                                time = System.currentTimeMillis();
-                            }
-                        } catch (Exception ignore) {
-                            time = System.currentTimeMillis();
-                        }
-
-                        TLRPC.TL_updateServiceNotification update = new TLRPC.TL_updateServiceNotification();
-                        update.popup = false;
-                        update.flags = 2;
-                        update.inbox_date = (int) (time / 1000);
-                        update.message = bundle.getString("message");
-                        update.type = "announcement";
-                        update.media = new TLRPC.TL_messageMediaEmpty();
-                        final TLRPC.TL_updates updates = new TLRPC.TL_updates();
-                        updates.updates.add(update);
-                        Utilities.stageQueue.postRunnable(new Runnable() {
-                            @Override
-                            public void run() {
-                                MessagesController.getInstance().processUpdates(updates, false);
-                            }
-                        });
-                    } else if (Build.VERSION.SDK_INT >= 24 && ApplicationLoader.mainInterfacePaused && UserConfig.isClientActivated()) {
-                        Object value = bundle.get("badge");
-                        if (value == null) {
-                            Object obj = bundle.get("google.sent_time");
-                            long time;
-                            if (obj instanceof String) {
-                                time = Utilities.parseLong((String) obj);
-                            } else if (obj instanceof Long) {
-                                time = (Long) obj;
-                            } else {
-                                time = -1;
-                            }
-                            if (time == -1 || UserConfig.lastAppPauseTime < time) {
-                                ConnectivityManager connectivityManager = (ConnectivityManager) ApplicationLoader.applicationContext.getSystemService(Context.CONNECTIVITY_SERVICE);
-                                NetworkInfo netInfo = connectivityManager.getActiveNetworkInfo();
-                                if (BuildVars.DEBUG_VERSION) {
-                                    FileLog.d("try show notification in background with time " + time + " with nework info " + netInfo + " and status " + connectivityManager.getRestrictBackgroundStatus());
-                                }
-                                if (connectivityManager.getRestrictBackgroundStatus() == ConnectivityManager.RESTRICT_BACKGROUND_STATUS_ENABLED && netInfo.getType() == ConnectivityManager.TYPE_MOBILE) {
-                                    NotificationsController.getInstance().showSingleBackgroundNotification();
-                                }
-                            }
-                        }
-                    }
-                } catch (Exception e) {
-                    FileLog.e(e);
-                }
-                ConnectionsManager.onInternalPushReceived();
-                ConnectionsManager.getInstance().resumeNetworkMaybe();
-            }
-        });
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/GcmRegistrationIntentService.java b/TMessagesProj/src/main/java/org/telegram/messenger/GcmRegistrationIntentService.java
deleted file mode 100755
index b217161a8..000000000
--- a/TMessagesProj/src/main/java/org/telegram/messenger/GcmRegistrationIntentService.java
+++ /dev/null
@@ -1,76 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 3.x.x.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013-2017.
- */
-
-package org.telegram.messenger;
-
-import android.app.IntentService;
-import android.content.Intent;
-
-import com.google.android.gms.gcm.GoogleCloudMessaging;
-import com.google.android.gms.iid.InstanceID;
-
-public class GcmRegistrationIntentService extends IntentService {
-
-    public GcmRegistrationIntentService() {
-        super("GcmRegistrationIntentService");
-    }
-
-    @Override
-    protected void onHandleIntent(Intent intent) {
-        try {
-            InstanceID instanceID = InstanceID.getInstance(this);
-            final String token = instanceID.getToken(getString(R.string.gcm_defaultSenderId), GoogleCloudMessaging.INSTANCE_ID_SCOPE, null);
-            FileLog.d("GCM Registration Token: " + token);
-            AndroidUtilities.runOnUIThread(new Runnable() {
-                @Override
-                public void run() {
-                    ApplicationLoader.postInitApplication();
-                    sendRegistrationToServer(token);
-                }
-            });
-        } catch (Exception e) {
-            FileLog.e(e);
-            if (intent != null) {
-                final int failCount = intent.getIntExtra("failCount", 0);
-                if (failCount < 60) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            try {
-                                Intent intent = new Intent(ApplicationLoader.applicationContext, GcmRegistrationIntentService.class);
-                                intent.putExtra("failCount", failCount + 1);
-                                startService(intent);
-                            } catch (Exception e) {
-                                FileLog.e(e);
-                            }
-                        }
-                    }, failCount < 20 ? 10000 : 60000 * 30);
-                }
-            }
-        }
-    }
-
-    private void sendRegistrationToServer(final String token) {
-        Utilities.stageQueue.postRunnable(new Runnable() {
-            @Override
-            public void run() {
-                UserConfig.pushString = token;
-                UserConfig.registeredForPush = false;
-                UserConfig.saveConfig(false);
-                if (UserConfig.getClientUserId() != 0) {
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            MessagesController.getInstance().registerForPush(token);
-                        }
-                    });
-                }
-            }
-        });
-    }
-}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/WearDataLayerListenerService.java b/TMessagesProj/src/main/java/org/telegram/messenger/WearDataLayerListenerService.java
deleted file mode 100644
index 0b7e0bbc2..000000000
--- a/TMessagesProj/src/main/java/org/telegram/messenger/WearDataLayerListenerService.java
+++ /dev/null
@@ -1,177 +0,0 @@
-package org.telegram.messenger;
-
-import android.text.TextUtils;
-
-import com.google.android.gms.common.api.GoogleApiClient;
-import com.google.android.gms.wearable.Channel;
-import com.google.android.gms.wearable.Wearable;
-import com.google.android.gms.wearable.WearableListenerService;
-
-import org.telegram.tgnet.ConnectionsManager;
-import org.telegram.tgnet.TLRPC;
-
-import java.io.BufferedOutputStream;
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.util.ArrayList;
-import java.util.concurrent.CyclicBarrier;
-import java.util.concurrent.TimeUnit;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-public class WearDataLayerListenerService extends WearableListenerService {
-
-
-	@Override
-	public void onCreate() {
-		super.onCreate();
-		FileLog.d("WearableDataLayer service created");
-	}
-
-	@Override
-	public void onDestroy() {
-		super.onDestroy();
-		FileLog.d("WearableDataLayer service destroyed");
-	}
-
-	@Override
-	public void onChannelOpened(final Channel ch) {
-		//new Thread(new Runnable(){
-		//	@Override
-		//	public void run(){
-		GoogleApiClient apiClient = new GoogleApiClient.Builder(WearDataLayerListenerService.this).addApi(Wearable.API).build();
-		if (!apiClient.blockingConnect().isSuccess()) {
-			FileLog.e("failed to connect google api client");
-			return;
-		}
-		String path = ch.getPath();
-		FileLog.d("wear channel path: " + path);
-		try {
-			if ("/getCurrentUser".equals(path)) {
-				DataOutputStream out = new DataOutputStream(new BufferedOutputStream(ch.getOutputStream(apiClient).await().getOutputStream()));
-				if (UserConfig.isClientActivated()) {
-					final TLRPC.User user = UserConfig.getCurrentUser();
-					out.writeInt(user.id);
-					out.writeUTF(user.first_name);
-					out.writeUTF(user.last_name);
-					out.writeUTF(user.phone);
-					if (user.photo != null) {
-						final File photo = FileLoader.getPathToAttach(user.photo.photo_small, true);
-						final CyclicBarrier barrier = new CyclicBarrier(2);
-						if (!photo.exists()) {
-							final NotificationCenter.NotificationCenterDelegate listener = new NotificationCenter.NotificationCenterDelegate() {
-								@Override
-								public void didReceivedNotification(int id, Object... args) {
-									if (id == NotificationCenter.FileDidLoaded) {
-										FileLog.d("file loaded: " + args[0] + " " + args[0].getClass().getName());
-										if (args[0].equals(photo.getName())) {
-											FileLog.e("LOADED USER PHOTO");
-											try {
-												barrier.await(10, TimeUnit.MILLISECONDS);
-											} catch (Exception ignore) {
-											}
-										}
-									}
-								}
-							};
-							AndroidUtilities.runOnUIThread(new Runnable() {
-								@Override
-								public void run() {
-									NotificationCenter.getInstance().addObserver(listener, NotificationCenter.FileDidLoaded);
-									FileLoader.getInstance().loadFile(user.photo.photo_small, null, 0, 1);
-								}
-							});
-							try {
-								barrier.await(10, TimeUnit.SECONDS);
-							} catch (Exception ignore) {
-							}
-							AndroidUtilities.runOnUIThread(new Runnable() {
-								@Override
-								public void run() {
-									NotificationCenter.getInstance().removeObserver(listener, NotificationCenter.FileDidLoaded);
-								}
-							});
-						}
-						if (photo.exists() && photo.length() <= 50 * 1024 * 1024) {
-							byte[] photoData = new byte[(int) photo.length()];
-							FileInputStream photoIn = new FileInputStream(photo);
-							new DataInputStream(photoIn).readFully(photoData);
-							photoIn.close();
-							out.writeInt(photoData.length);
-							out.write(photoData);
-						} else {
-							out.writeInt(0);
-						}
-					} else {
-						out.writeInt(0);
-					}
-				} else {
-					out.writeInt(0);
-				}
-				out.flush();
-				out.close();
-			} else if ("/waitForAuthCode".equals(path)) {
-				ConnectionsManager.getInstance().setAppPaused(false, false);
-				final String[] code = {null};
-				final CyclicBarrier barrier = new CyclicBarrier(2);
-				final NotificationCenter.NotificationCenterDelegate listener = new NotificationCenter.NotificationCenterDelegate() {
-					@Override
-					public void didReceivedNotification(int id, Object... args) {
-						if (id == NotificationCenter.didReceivedNewMessages) {
-							long did = (Long) args[0];
-							if (did == 777000) {
-								ArrayList<MessageObject> arr = (ArrayList<MessageObject>) args[1];
-								if (arr.size() > 0) {
-									MessageObject msg = arr.get(0);
-									if (!TextUtils.isEmpty(msg.messageText)) {
-										Matcher matcher = Pattern.compile("[0-9]+").matcher(msg.messageText);
-										if (matcher.find()) {
-											code[0] = matcher.group();
-											try {
-												barrier.await(10, TimeUnit.MILLISECONDS);
-											} catch (Exception ignore) {
-											}
-										}
-									}
-								}
-							}
-						}
-					}
-				};
-				AndroidUtilities.runOnUIThread(new Runnable() {
-					@Override
-					public void run() {
-						NotificationCenter.getInstance().addObserver(listener, NotificationCenter.didReceivedNewMessages);
-					}
-				});
-				try {
-					barrier.await(15, TimeUnit.SECONDS);
-				} catch (Exception ignore) {
-				}
-				AndroidUtilities.runOnUIThread(new Runnable() {
-					@Override
-					public void run() {
-						NotificationCenter.getInstance().removeObserver(listener, NotificationCenter.didReceivedNewMessages);
-					}
-				});
-				DataOutputStream out = new DataOutputStream(ch.getOutputStream(apiClient).await().getOutputStream());
-				if (code[0] != null)
-					out.writeUTF(code[0]);
-				else
-					out.writeUTF("");
-				out.flush();
-				out.close();
-				ConnectionsManager.getInstance().setAppPaused(true, false);
-			}
-		} catch (Exception x) {
-			FileLog.e("error processing wear request", x);
-		}
-		ch.close(apiClient).await();
-		apiClient.disconnect();
-		FileLog.d("WearableDataLayer channel thread exiting");
-		//	}
-		//}).start();
-	}
-}
diff --git a/build.gradle b/build.gradle
index dee7a587f..eb65c7659 100644
--- a/build.gradle
+++ b/build.gradle
@@ -6,6 +6,5 @@ buildscript {
     }
     dependencies {
         classpath 'com.android.tools.build:gradle:3.0.1'
-        classpath 'com.google.gms:google-services:3.1.1'
     }
 }
\ No newline at end of file
