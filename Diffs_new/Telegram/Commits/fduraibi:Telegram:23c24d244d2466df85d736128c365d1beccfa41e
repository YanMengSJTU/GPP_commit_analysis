diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index 649e70706..e0a749d2e 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -1629,7 +1629,7 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
             } else if (msgObj.messageOwner.media.document != null) {
                 document = (TLRPC.TL_document) msgObj.messageOwner.media.document;
             } else if (msgObj.messageOwner.message != null) {
-                message = msgObj.messageOwner.message;
+                message = Emoji.fixSBEmoji(msgObj.messageOwner.message).toString(); //Fix SB encoding if needed before forwarding the message
             } else {
                 // Unknown type, let it continue unchanged [ Maybe show an error to update the code! ]
             }
diff --git a/TMessagesProj/src/main/java/org/telegram/objects/MessageObject.java b/TMessagesProj/src/main/java/org/telegram/objects/MessageObject.java
index 48bacbbda..7bcaad998 100644
--- a/TMessagesProj/src/main/java/org/telegram/objects/MessageObject.java
+++ b/TMessagesProj/src/main/java/org/telegram/objects/MessageObject.java
@@ -253,18 +253,19 @@ public MessageObject(TLRPC.Message message, AbstractMap<Integer, TLRPC.User> use
             }
         } else {
             messageText = message.message;
-        }
-
-        // Text between two * will be in BLUE and text between two ^ will be BIG size
 
-        // To reserve all spaces since "fromHtml" will collapse all consecutive spaces into only 1.
-        // So every two spaces will be replaced by one space and one non-breaking space that way we can reserve the spaces and also allow word wrapping.
-        messageText = messageText.toString().replace("  ", " &nbsp;");
-        messageText = messageText.toString().replaceAll("\\^(.+?)\\^", "<big>$1</big>");
-        messageText = messageText.toString().replaceAll("\\*(.+?)\\*", "<font color='blue'>$1</font>");
-        messageText = messageText.toString().replace("\n", "<br>");     // Change new line to something that Html will understand
-        messageText = Html.fromHtml(messageText.toString());
-        messageText = Emoji.replaceEmoji(messageText);
+            messageText = Emoji.fixSBEmoji(messageText);    //Fix SB encoding if needed before displaying the message
+
+            // To reserve all spaces since "fromHtml" will collapse all consecutive spaces into only 1.
+            // So every two spaces will be replaced by one space and one non-breaking space that way we can reserve the spaces and also allow word wrapping.
+            messageText = messageText.toString().replace("  ", " &nbsp;");
+            // Text between two * will be in BLUE and text between two ^ will be BIG size
+            messageText = messageText.toString().replaceAll("\\^(.+?)\\^", "<big>$1</big>");
+            messageText = messageText.toString().replaceAll("\\*(.+?)\\*", "<font color='blue'>$1</font>");
+            messageText = messageText.toString().replace("\n", "<br>");     // Change new line to something that Html will understand
+            messageText = Html.fromHtml(messageText.toString());
+            messageText = Emoji.replaceEmoji(messageText);
+        }
 
         if (message instanceof TLRPC.TL_message || (message instanceof TLRPC.TL_messageForwarded && (message.media == null || !(message.media instanceof TLRPC.TL_messageMediaEmpty)))) {
             if (message.media == null || message.media instanceof TLRPC.TL_messageMediaEmpty) {
