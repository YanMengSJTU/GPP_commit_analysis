diff --git a/TMessagesProj/src/main/java/io/bettergram/service/CryptoDataService.java b/TMessagesProj/src/main/java/io/bettergram/service/CryptoDataService.java
index 1558c90bc..992560616 100644
--- a/TMessagesProj/src/main/java/io/bettergram/service/CryptoDataService.java
+++ b/TMessagesProj/src/main/java/io/bettergram/service/CryptoDataService.java
@@ -4,9 +4,9 @@
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.support.annotation.Nullable;
-import android.util.Log;
 import io.bettergram.data.*;
 import io.bettergram.telegram.messenger.ApplicationLoader;
+import io.bettergram.utils.CollectionUtil;
 import okhttp3.HttpUrl;
 import okhttp3.Request;
 import okhttp3.Response;
@@ -98,23 +98,6 @@ private void startTimer(Intent intent) {
         return list;
     }
 
-    public interface Predicate<T> {
-
-        boolean contains(T item);
-    }
-
-    public static class CollectionUtil {
-
-        public static <T> T find(final Collection<T> collection, final Predicate<T> predicate) {
-            for (T item : collection) {
-                if (predicate.contains(item)) {
-                    return item;
-                }
-            }
-            return null;
-        }
-    }
-
     //class TimeDisplay for handling task
     class TimeDisplay extends TimerTask {
 
diff --git a/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/NotificationsController.java b/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/NotificationsController.java
index e2c0808e6..be00ba444 100644
--- a/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/NotificationsController.java
+++ b/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/NotificationsController.java
@@ -10,25 +10,11 @@
 
 import android.annotation.SuppressLint;
 import android.annotation.TargetApi;
-import android.app.Activity;
-import android.app.AlarmManager;
-import android.app.Notification;
-import android.app.NotificationChannel;
-import android.app.NotificationManager;
-import android.app.PendingIntent;
+import android.app.*;
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.graphics.Color;
-import android.graphics.ImageDecoder;
-import android.graphics.Paint;
-import android.graphics.Path;
-import android.graphics.PixelFormat;
-import android.graphics.Point;
-import android.graphics.PorterDuff;
-import android.graphics.PorterDuffXfermode;
+import android.graphics.*;
 import android.graphics.drawable.BitmapDrawable;
 import android.media.AudioAttributes;
 import android.media.AudioManager;
@@ -45,27 +31,28 @@
 import android.support.v4.content.FileProvider;
 import android.support.v4.graphics.drawable.IconCompat;
 import android.text.TextUtils;
+import android.util.ArrayMap;
 import android.util.LongSparseArray;
 import android.util.SparseArray;
 import android.util.SparseIntArray;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
+import io.bettergram.messenger.BuildConfig;
+import io.bettergram.messenger.R;
 import io.bettergram.telegram.messenger.support.SparseLongArray;
 import io.bettergram.telegram.tgnet.ConnectionsManager;
 import io.bettergram.telegram.tgnet.TLRPC;
 import io.bettergram.telegram.ui.LaunchActivity;
 import io.bettergram.telegram.ui.PopupNotificationActivity;
+import io.bettergram.utils.CollectionUtil;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
 
 import java.io.File;
 import java.util.ArrayList;
 import java.util.Calendar;
+import java.util.Iterator;
 import java.util.List;
 
-import io.bettergram.messenger.BuildConfig;
-import io.bettergram.messenger.R;
-
 public class NotificationsController {
 
     public static final String EXTRA_VOICE_REPLY = "extra_voice_reply";
@@ -169,7 +156,7 @@ public NotificationsController(int instance) {
 
         try {
             PowerManager pm = (PowerManager) ApplicationLoader.applicationContext.getSystemService(Context.POWER_SERVICE);
-            notificationDelayWakelock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "lock");
+            notificationDelayWakelock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "bettergram:wakelock");
             notificationDelayWakelock.setReferenceCounted(false);
         } catch (Exception e) {
             FileLog.e(e);
@@ -1319,7 +1306,7 @@ private String getShortStringForMessage(MessageObject messageObject, String[] us
                             }
                         } else {
                             if (Build.VERSION.SDK_INT >= 19 && !TextUtils.isEmpty(messageObject.messageOwner.message)) {
-                                return  "\uD83D\uDCCE " + messageObject.messageOwner.message;
+                                return "\uD83D\uDCCE " + messageObject.messageOwner.message;
                             } else {
                                 return LocaleController.getString("AttachDocument", R.string.AttachDocument);
                             }
@@ -2124,7 +2111,7 @@ private String validateChannelId(long dialogId, String name, long[] vibrationPat
                 notificationChannel.setSound(null, builder.build());
             }
             systemNotificationManager.createNotificationChannel(notificationChannel);
-            preferences.edit().putString(key, channelId).putString(key + "_s", newSettingsHash).commit();
+            preferences.edit().putString(key, channelId).putString(key + "_s", newSettingsHash).apply();
         }
         return channelId;
     }
@@ -2401,7 +2388,6 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
                     detailText += LocaleController.formatString("NotificationMessagesPeopleDisplayOrder", R.string.NotificationMessagesPeopleDisplayOrder, LocaleController.formatPluralString("NewMessages", total_unread_count), LocaleController.formatPluralString("FromChats", pushDialogs.size()));
                 }
             }
-
             NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(ApplicationLoader.applicationContext)
                     .setContentTitle(name)
                     .setSmallIcon(R.drawable.notification)
@@ -2448,11 +2434,12 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
                 mBuilder.setContentText(message);
                 mBuilder.setStyle(new NotificationCompat.BigTextStyle().bigText(message));
             } else {
-                mBuilder.setContentText(detailText);
+                //mBuilder.setContentText(detailText);
                 NotificationCompat.InboxStyle inboxStyle = new NotificationCompat.InboxStyle();
                 inboxStyle.setBigContentTitle(name);
                 int count = Math.min(10, pushMessages.size());
                 boolean text[] = new boolean[1];
+                ArrayMap<String, List<String>> message_map = new ArrayMap<>();
                 for (int i = 0; i < count; i++) {
                     MessageObject messageObject = pushMessages.get(i);
                     String message = getStringForMessage(messageObject, false, text);
@@ -2475,9 +2462,37 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
                                 }
                             }
                         }
+                    } else {
+                        if (message.contains(":")) {
+                            String sender = message.substring(0, message.indexOf(":"));
+                            String sender_message = Strings.strip(message.substring(sender.length() + 1, message.length()));
+                            if (message_map.get(sender) == null) {
+                                message_map.put(sender, new ArrayList<>());
+                            }
+                            List<String> sender_message_list = message_map.get(sender);
+                            sender_message_list.add(sender_message);
+                            message_map.put(sender, sender_message_list);
+                        }
                     }
                     inboxStyle.addLine(message);
                 }
+                StringBuilder contentDetailText = new StringBuilder();
+                Iterator<ArrayMap.Entry<String, List<String>>> it = message_map.entrySet().iterator();
+                while (it.hasNext()) {
+                    ArrayMap.Entry<String, List<String>> pair = it.next();
+                    String sender = pair.getKey();
+                    int message_count = pair.getValue().size();
+                    contentDetailText
+                            .append(sender)
+                            .append(" (")
+                            .append(message_count)
+                            .append(" new ")
+                            .append(message_count > 1 ? "messages" : "message")
+                            .append(")")
+                            .append("\n\n");
+                }
+                //mBuilder.setContentText(detailText);
+                mBuilder.setContentText(contentDetailText.length() > 0 ? contentDetailText : detailText);
                 inboxStyle.setSummaryText(detailText);
                 mBuilder.setStyle(inboxStyle);
             }
@@ -2619,11 +2634,12 @@ private void showOrUpdateNotification(boolean notifyAboutLast) {
             lastNotificationIsNoData = false;
             scheduleNotificationRepeat();
         } catch (Exception e) {
+            e.printStackTrace();
             FileLog.e(e);
         }
     }
 
-    @SuppressLint("InlinedApi")
+    @SuppressLint({"InlinedApi", "DefaultLocale"})
     private void showExtraNotifications(NotificationCompat.Builder notificationBuilder, boolean notifyAboutLast, String summary) {
         Notification mainNotification = notificationBuilder.build();
         if (Build.VERSION.SDK_INT < 18) {
@@ -2683,6 +2699,7 @@ void call() {
         for (int b = 0, size = sortedDialogs.size(); b < size; b++) {
             long dialog_id = sortedDialogs.get(b);
             ArrayList<MessageObject> messageObjects = messagesByDialogs.get(dialog_id);
+            int message_count = messageObjects.size();
             int max_id = messageObjects.get(0).getId();
             int lowerId = (int) dialog_id;
             int highId = (int) (dialog_id >> 32);
@@ -2944,7 +2961,12 @@ void call() {
                     personCache.put(uid, person);
                 }
 
-                messagingStyle.addMessage(message, ((long) messageObject.messageOwner.date) * 1000, person);
+                final String target = name;
+                if (CollectionUtil.find(messagingStyle.getMessages(), item -> item.getText().toString().contains(target)) == null) {
+                    String style_message = String.format("%s (%d new %s)", name, message_count, message_count > 1 ? "messages" : "message");
+                    messagingStyle.addMessage(style_message, ((long) messageObject.messageOwner.date) * 1000, person);
+                }
+
                 if (messageObject.isVoice()) {
                     List<NotificationCompat.MessagingStyle.Message> messages = messagingStyle.getMessages();
                     if (!messages.isEmpty()) {
@@ -3033,13 +3055,13 @@ void call() {
             wearableExtender.setBridgeTag("tgaccount" + UserConfig.getInstance(currentAccount).getClientUserId());
 
             long date = ((long) messageObjects.get(0).messageOwner.date) * 1000;
-
+            String content = String.format("%s (%d new %s)", name, message_count, message_count > 1 ? "messages" : "message");
             NotificationCompat.Builder builder = new NotificationCompat.Builder(ApplicationLoader.applicationContext)
                     .setContentTitle(name)
                     .setSmallIcon(R.drawable.notification)
-                    .setContentText(text.toString())
+                    .setContentText(content)
                     .setAutoCancel(true)
-                    .setNumber(messageObjects.size())
+                    .setNumber(message_count)
                     .setColor(0xff2ca5e0)
                     .setGroupSummary(false)
                     .setWhen(date)
diff --git a/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/Strings.java b/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/Strings.java
new file mode 100644
index 000000000..2809ab53d
--- /dev/null
+++ b/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/Strings.java
@@ -0,0 +1,61 @@
+package io.bettergram.telegram.messenger;
+
+import static android.text.TextUtils.isEmpty;
+
+public class Strings {
+
+    public static final int INDEX_NOT_FOUND = -1;
+    public static final String SPACE = " ";
+
+    public static String strip(final String str) {
+        return strip(str, SPACE);
+    }
+
+    public static String stripStart(final String str, final String stripChars) {
+        int strLen;
+        if (str == null || (strLen = str.length()) == 0) {
+            return str;
+        }
+        int start = 0;
+        if (stripChars == null) {
+            while (start != strLen && Character.isWhitespace(str.charAt(start))) {
+                start++;
+            }
+        } else if (stripChars.isEmpty()) {
+            return str;
+        } else {
+            while (start != strLen && stripChars.indexOf(str.charAt(start)) != INDEX_NOT_FOUND) {
+                start++;
+            }
+        }
+        return str.substring(start);
+    }
+
+    public static String stripEnd(final String str, final String stripChars) {
+        int end;
+        if (str == null || (end = str.length()) == 0) {
+            return str;
+        }
+
+        if (stripChars == null) {
+            while (end != 0 && Character.isWhitespace(str.charAt(end - 1))) {
+                end--;
+            }
+        } else if (stripChars.isEmpty()) {
+            return str;
+        } else {
+            while (end != 0 && stripChars.indexOf(str.charAt(end - 1)) != INDEX_NOT_FOUND) {
+                end--;
+            }
+        }
+        return str.substring(0, end);
+    }
+
+    public static String strip(String str, final String stripChars) {
+        if (isEmpty(str)) {
+            return str;
+        }
+        str = stripStart(str, stripChars);
+        return stripEnd(str, stripChars);
+    }
+}
diff --git a/TMessagesProj/src/main/java/io/bettergram/utils/CollectionUtil.java b/TMessagesProj/src/main/java/io/bettergram/utils/CollectionUtil.java
new file mode 100644
index 000000000..7028873e7
--- /dev/null
+++ b/TMessagesProj/src/main/java/io/bettergram/utils/CollectionUtil.java
@@ -0,0 +1,20 @@
+package io.bettergram.utils;
+
+import java.util.Collection;
+
+public final class CollectionUtil {
+
+    public static <T> T find(final Collection<T> collection, final Predicate<T> predicate) {
+        for (T item : collection) {
+            if (predicate.contains(item)) {
+                return item;
+            }
+        }
+        return null;
+    }
+
+    public interface Predicate<T> {
+
+        boolean contains(T item);
+    }
+}
