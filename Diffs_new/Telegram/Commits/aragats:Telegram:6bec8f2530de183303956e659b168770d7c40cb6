diff --git a/MyREADME.md b/MyREADME.md
index d263f275c..1f933fae5 100644
--- a/MyREADME.md
+++ b/MyREADME.md
@@ -81,7 +81,7 @@ TODO:
 5. ContactsController.checkAppAccount UserConfig.loadUser ... and other - do not invoke them. ??
 6. Change drawer left sidebar size of header
 7. Fragen und Antworten - replace the link or create a page with antworten. Landing Page.
-
+8. Loading container error. If I got the empy result ??
 
 
 TOP libraries for Android
diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
index 14b25a632..6ee91aa0e 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
@@ -29,6 +29,9 @@
     public static final int newPostSaved = totalEvents++;
     public static final int postsRefresh = totalEvents++;
 
+    public static final int savePostError = totalEvents++;
+    public static final int loadPostsError = totalEvents++;
+
     public static final int didReceivedNewPosts = totalEvents++; //TODO
     public static final int updateInterfaces = totalEvents++; //TODO
     public static final int closeChats = totalEvents++; //TODO important. force selfClose other activities when open some particular.
diff --git a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
index 9d778cddf..ac4760940 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
@@ -14,12 +14,19 @@
 
 import org.telegram.android.location.LocationManagerHelper;
 
+import retrofit.Callback;
+import retrofit.Response;
+import retrofit.Retrofit;
 import ru.aragats.wgo.ApplicationLoader;
 
+import ru.aragats.wgo.rest.dto.FileUploadRequest;
+import ru.aragats.wgo.rest.dto.Image;
 import ru.aragats.wgo.rest.dto.Post;
+import ru.aragats.wgo.rest.dto.PostRequest;
 import ru.aragats.wgo.rest.dto.PostResponse;
 import ru.aragats.wgo.rest.dto.User;
 import ru.aragats.wgo.rest.dto.Venue;
+import ru.aragats.wgo.rest.manager.RestManager;
 import ru.aragats.wgo.rest.mock.PostServiceMock;
 import ru.aragats.wgo.rest.mock.UserServiceMock;
 
@@ -110,7 +117,40 @@ public void cleanUp() {
     }
 
 
-    public void addPost(Post post) {
+    public void addPost(final Post post) {
+
+        RestManager.getInstance().uploadImage(new FileUploadRequest(post.getImage().getUrl(), post.getImage().getType()), new Callback<List<Image>>() {
+            @Override
+            public void onResponse(Response<List<Image>> response, Retrofit retrofit) {
+                post.setImages(response.body());
+                savePost(post);
+            }
+
+            @Override
+            public void onFailure(Throwable t) {
+                NotificationCenter.getInstance().postNotificationName(NotificationCenter.savePostError);
+            }
+        });
+    }
+
+
+    private void savePost(final Post post) {
+        RestManager.getInstance().savePost(post, new Callback<String>() {
+            @Override
+            public void onResponse(Response<String> response, Retrofit retrofit) {
+                post.setId(response.body());
+                NotificationCenter.getInstance().postNotificationName(NotificationCenter.newPostSaved);
+            }
+
+            @Override
+            public void onFailure(Throwable t) {
+                NotificationCenter.getInstance().postNotificationName(NotificationCenter.savePostError);
+            }
+        });
+    }
+
+
+    public void addPostMock(Post post) {
 
         //TODO temp test
 //        RestManager.getInstance().uploadTest(new PostRequest(post.getImage().getUrl()), new Callback<ru.aragats.wgo.rest.dto.PostResponse>() {
@@ -150,7 +190,41 @@ public void deletePost(final String did, int offset, final boolean onlyHistory)
     }
 
 
-    public void loadPosts(final int offset, final int count, boolean reload, boolean fromCache) {
+    public void loadPosts(final String offset, final int count, final boolean reload, boolean fromCache) {
+        if (loadingPosts) {
+            return;
+        }
+        loadingPosts = true;
+        Location location = LocationManagerHelper.getInstance().getLastLocation();
+        if (location == null) {
+            loadingPosts = false;
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.undefinedLocation);
+            return;
+        }
+        PostRequest postRequest = new PostRequest();
+        postRequest.setLatitude(location.getLatitude());
+        postRequest.setLongitude(location.getLongitude());
+        postRequest.setCount(count);
+        postRequest.setOffset(offset);
+        postRequest.setDistance(1000); // 1000 meters. ??
+        RestManager.getInstance().findNearPosts(postRequest, new Callback<PostResponse>() {
+            @Override
+            public void onResponse(Response<PostResponse> response, Retrofit retrofit) {
+                //        after getting response.
+                processLoadedPosts(response.body(), reload);
+            }
+
+            @Override
+            public void onFailure(Throwable t) {
+                NotificationCenter.getInstance().postNotificationName(NotificationCenter.loadPostsError);
+            }
+        });
+
+
+    }
+
+
+    public void loadPostsMock(final int offset, final int count, boolean reload, boolean fromCache) {
         if (loadingPosts) {
             return;
         }
@@ -164,11 +238,11 @@ public void loadPosts(final int offset, final int count, boolean reload, boolean
         //TODO here async  request
         PostResponse postResponse = PostServiceMock.getPosts("location", null, offset, count);
 //        after getting response.
-        processLoadedPosts(postResponse, offset, count, reload);
+        processLoadedPosts(postResponse, reload);
 
     }
 
-    public void processLoadedPosts(PostResponse postResponse, final int offset, final int count, boolean reload) {
+    public void processLoadedPosts(PostResponse postResponse, boolean reload) {
         if (reload) {
             posts.clear();
             postsMap.clear();
@@ -182,6 +256,7 @@ public void processLoadedPosts(PostResponse postResponse, final int offset, fina
         if (!postResponse.getPosts().isEmpty()) {
             NotificationCenter.getInstance().postNotificationName(NotificationCenter.postsNeedReload);
         } else {
+//            NotificationCenter.getInstance().postNotificationName(NotificationCenter.postsNeedReload);  //TODO hide progress view
             NotificationCenter.getInstance().postNotificationName(NotificationCenter.postRequestFinished);
         }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
index 36ecfc9a0..1cf04d406 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
@@ -35,6 +35,7 @@
 import android.view.ViewGroup;
 import android.view.ViewTreeObserver;
 import android.view.WindowManager;
+import android.webkit.MimeTypeMap;
 import android.widget.FrameLayout;
 import android.widget.TextView;
 import android.widget.Toast;
@@ -165,6 +166,7 @@ public boolean onFragmentCreate() {
         //
 
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.newPostSaved);
+        NotificationCenter.getInstance().addObserver(this, NotificationCenter.savePostError);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
         NotificationCenter.getInstance().addObserver(this, NotificationCenter.didReceivedNewPosts);
@@ -200,6 +202,7 @@ public void onFragmentDestroy() {
             postCreateActivityEnterView.onDestroy();
         }
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.newPostSaved);
+        NotificationCenter.getInstance().removeObserver(this, NotificationCenter.savePostError);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
         NotificationCenter.getInstance().removeObserver(this, NotificationCenter.didReceivedNewPosts);
@@ -872,6 +875,20 @@ public void didReceivedNotification(int id, final Object... args) {
             clearStates();
             finishFragment();
 
+        } else if (id == NotificationCenter.savePostError) {
+//            progressDialog.hide();
+            //clear
+//            venue = null;
+//            if (posts != null) {
+//                posts.clear();
+//            }
+//            if (postCreateActivityEnterView != null) {
+//                postCreateActivityEnterView.setFieldText("");
+//            }
+            progressDialog.dismiss();
+            Toast.makeText(getParentActivity(), "Error in saving post", Toast.LENGTH_SHORT).show();
+
+
         }
     }
 
@@ -1445,19 +1462,23 @@ private void didSelectPhotos(ArrayList<String> photos) {
             int height = options.outHeight;
 //If you want, the MIME type will also be decoded (if possible)
             String type = options.outMimeType;
+//            String type = getMimeType(photoUrl);
 
+//            Java 7
+//            MediaStore.Files.probeContentType(path);
 
             //
             bitmap = Bitmap.createScaledBitmap(bitmap, 100, 100, true);
 
 
             Post post = new Post();
-            post.setId(PostServiceMock.generateString("1234567890", 5));
+//            post.setId(PostServiceMock.generateString("1234567890", 5));
             Image image = new Image();
             image.setUrl(photoUrl);
             image.setWidth(width);
             image.setHeight(height);
             image.setBitmap(bitmap);
+            image.setType(type);
 //            image = ImageServiceMock.getRandomImage();
             List<Image> images = new ArrayList<>();
             images.add(image); // preview
@@ -1474,6 +1495,16 @@ private void didSelectPhotos(ArrayList<String> photos) {
         }
     }
 
+    // url = file path or whatever suitable URL you want.
+    public static String getMimeType(String url) {
+        String type = null;
+        String extension = MimeTypeMap.getFileExtensionFromUrl(url);
+        if (extension != null) {
+            type = MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension);
+        }
+        return type;
+    }
+
 
     private void attachGalleryHandle() {
         //                    //TODO-TEMP
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
index cd148eea3..cec5dc117 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
@@ -38,6 +38,7 @@
 import android.widget.ListView;
 import android.widget.ProgressBar;
 import android.widget.TextView;
+import android.widget.Toast;
 
 import org.telegram.android.AndroidUtilities;
 import org.telegram.android.AnimationCompat.ObjectAnimatorProxy;
@@ -55,7 +56,9 @@
 import ru.aragats.wgo.R;
 
 import org.telegram.messenger.FileLog;
+
 import ru.aragats.wgo.rest.dto.Post;
+
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
@@ -208,6 +211,7 @@ public boolean onFragmentCreate() {
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.undefinedLocation);
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.postRequestFinished);
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.postsNeedReload);
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.loadPostsError);
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.updateInterfaces);
         }
@@ -215,7 +219,7 @@ public boolean onFragmentCreate() {
         LocationManagerHelper.getInstance().runLocationListener();
 
         if (!postsLoaded) {
-            PostsController.getInstance().loadPosts(0, Constants.POST_COUNT, true, true);
+            PostsController.getInstance().loadPosts(null, Constants.POST_COUNT, true, true);
             ContactsController.getInstance().checkInviteText();
             postsLoaded = true;
         }
@@ -230,6 +234,7 @@ public void onFragmentDestroy() {
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.undefinedLocation);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.postRequestFinished);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.postsNeedReload);
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.loadPostsError);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.updateInterfaces);
         }
@@ -361,7 +366,7 @@ public void onItemClick(int id) {
             public void onRefresh() {
                 // TODO temp test
 //                new RestTask().execute("param");
-                PostsController.getInstance().loadPosts(0, Constants.POST_COUNT, true, true);
+                PostsController.getInstance().loadPosts(null, Constants.POST_COUNT, true, true);
 
 //                RestManager.getInstance().uploadTest(new PostRequest(), new Callback<PostResponse>() {
 //                    @Override
@@ -572,7 +577,8 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                 //TODO fix it.
                 if (visibleItemCount > 0) {
                     if (layoutManager.findLastVisibleItemPosition() == PostsController.getInstance().posts.size() - 1) {
-                        PostsController.getInstance().loadPosts(PostsController.getInstance().posts.size(), Constants.POST_COUNT, false, true);
+                        String offset = PostsController.getInstance().posts.get(PostsController.getInstance().posts.size() - 1).getId();
+                        PostsController.getInstance().loadPosts(offset, Constants.POST_COUNT, false, true);
                     }
                 }
 
@@ -704,6 +710,27 @@ public void onClick(DialogInterface dialogInterface, int i) {
                 showDialog(builder.create());
             }
         } else if (id == NotificationCenter.postRequestFinished) {
+            //TODO duplicates
+            if (postListView != null) {
+                try {
+                    if (PostsController.getInstance().isLoadingPosts() && PostsController.getInstance().posts.isEmpty()) {
+                        searchEmptyView.setVisibility(View.INVISIBLE);
+                        emptyView.setVisibility(View.INVISIBLE);
+                        postListView.setEmptyView(progressView);
+                    } else {
+                        progressView.setVisibility(View.INVISIBLE);
+                        if (searching && searchWas) {
+                            emptyView.setVisibility(View.INVISIBLE);
+                            postListView.setEmptyView(searchEmptyView);
+                        } else {
+                            searchEmptyView.setVisibility(View.INVISIBLE);
+                            postListView.setEmptyView(emptyView);
+                        }
+                    }
+                } catch (Exception e) {
+                    FileLog.e("tmessages", e); //TODO fix it in other way?
+                }
+            }
             if (swipeRefreshLayout != null) {
                 swipeRefreshLayout.setRefreshing(false);
             }
@@ -718,6 +745,7 @@ public void onClick(DialogInterface dialogInterface, int i) {
             if (postsSearchAdapter != null) {
                 postsSearchAdapter.notifyDataSetChanged();
             }
+            // TODO duplicates
             if (postListView != null) {
                 try {
                     if (PostsController.getInstance().isLoadingPosts() && PostsController.getInstance().posts.isEmpty()) {
@@ -741,6 +769,12 @@ public void onClick(DialogInterface dialogInterface, int i) {
             if (swipeRefreshLayout != null) {
                 swipeRefreshLayout.setRefreshing(false);
             }
+        } else if (id == NotificationCenter.loadPostsError) {
+            if (swipeRefreshLayout != null) {
+                swipeRefreshLayout.setRefreshing(false);
+            }
+            Toast.makeText(((Context) getParentActivity()), "Load posts Error", Toast.LENGTH_SHORT).show();
+
         } else if (id == NotificationCenter.emojiDidLoaded) {
             if (postListView != null) {
                 updateVisibleRows(0);
@@ -761,7 +795,7 @@ private void refreshPosts(boolean force) {
             if (swipeRefreshLayout != null) {
                 swipeRefreshLayout.setRefreshing(true);
             }
-            PostsController.getInstance().loadPosts(0, Constants.POST_COUNT, true, true);
+            PostsController.getInstance().loadPosts(null, Constants.POST_COUNT, true, true);
         }
     }
 
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/rest/dto/FileUploadRequest.java b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/dto/FileUploadRequest.java
new file mode 100644
index 000000000..97c2efce6
--- /dev/null
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/dto/FileUploadRequest.java
@@ -0,0 +1,34 @@
+package ru.aragats.wgo.rest.dto;
+
+/**
+ * Created by aragats on 12/12/15.
+ */
+public class FileUploadRequest {
+
+    private String filePath;
+    private String contentType;
+
+    public FileUploadRequest() {
+    }
+
+    public FileUploadRequest(String filePath, String contentType) {
+        this.filePath = filePath;
+        this.contentType = contentType;
+    }
+
+    public String getFilePath() {
+        return filePath;
+    }
+
+    public void setFilePath(String filePath) {
+        this.filePath = filePath;
+    }
+
+    public String getContentType() {
+        return contentType;
+    }
+
+    public void setContentType(String contentType) {
+        this.contentType = contentType;
+    }
+}
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/rest/dto/Image.java b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/dto/Image.java
index 350c1b00d..f9dc9ec1b 100644
--- a/TMessagesProj/src/main/java/ru/aragats/wgo/rest/dto/Image.java
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/dto/Image.java
@@ -13,7 +13,7 @@
     private int height;
     private long size;
     //TODO enum // contentType !!!
-    private String contentType;
+    private String type;
     // TODO TEMP. Use other Image class. make it Transient.
     private Bitmap bitmap;
 
@@ -49,12 +49,12 @@ public void setSize(long size) {
         this.size = size;
     }
 
-    public String getContentType() {
-        return contentType;
+    public String getType() {
+        return type;
     }
 
-    public void setContentType(String contentType) {
-        this.contentType = contentType;
+    public void setType(String type) {
+        this.type = type;
     }
 
     public Bitmap getBitmap() {
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/rest/dto/PostRequest.java b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/dto/PostRequest.java
index eecae0643..2d8bdae70 100644
--- a/TMessagesProj/src/main/java/ru/aragats/wgo/rest/dto/PostRequest.java
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/dto/PostRequest.java
@@ -5,24 +5,24 @@
  */
 public class PostRequest extends Request {
 
-    private double lng;
-    private double lat;
+    private double longitude;
+    private double latitude;
     private int distance;
 
-    public double getLng() {
-        return lng;
+    public double getLongitude() {
+        return longitude;
     }
 
-    public void setLng(double lng) {
-        this.lng = lng;
+    public void setLongitude(double longitude) {
+        this.longitude = longitude;
     }
 
-    public double getLat() {
-        return lat;
+    public double getLatitude() {
+        return latitude;
     }
 
-    public void setLat(double lat) {
-        this.lat = lat;
+    public void setLatitude(double latitude) {
+        this.latitude = latitude;
     }
 
     public int getDistance() {
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/rest/manager/RestManager.java b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/manager/RestManager.java
index 189b1da3e..77a48269e 100644
--- a/TMessagesProj/src/main/java/ru/aragats/wgo/rest/manager/RestManager.java
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/manager/RestManager.java
@@ -10,6 +10,7 @@
 import retrofit.Call;
 import retrofit.Callback;
 import ru.aragats.wgo.rest.client.RestClient;
+import ru.aragats.wgo.rest.dto.FileUploadRequest;
 import ru.aragats.wgo.rest.dto.Image;
 import ru.aragats.wgo.rest.dto.Post;
 import ru.aragats.wgo.rest.dto.PostRequest;
@@ -47,29 +48,24 @@ public void findNearPosts(PostRequest request, Callback<PostResponse> callback)
     }
 
     private Call<PostResponse> findNearPostsCall(PostRequest request) {
-        return restClient.getRestService().findNearPosts(request.getLng(), request.getLat(),
+        return restClient.getRestService().findNearPosts(request.getLongitude(), request.getLatitude(),
                 request.getDistance(), request.getOffset(), request.getCount());
     }
 
 
-    public void uploadImage(PostRequest request, Callback<List<Image>> callback) {
+    public void uploadImage(FileUploadRequest request, Callback<List<Image>> callback) {
         uploadImage(request).enqueue(callback);
     }
 
-    private Call<List<Image>> uploadImage(PostRequest request) {
-//        File file = new File("/storage/emulated/0/download/1289.jpeg");
-        File file = new File("/storage/emulated/0/Download/amerIstotia1.jpg");
-//        File file = new File(request.getFilePath());
-
-
-        RequestBody fileBody = RequestBody.create(MediaType.parse("image/jpeg"), file);
+    private Call<List<Image>> uploadImage(FileUploadRequest request) {
+        File file = new File(request.getFilePath());
+        RequestBody fileBody = RequestBody.create(MediaType.parse(request.getContentType()), file);
 //        MultipartBuilder multipartBuilder = new MultipartBuilder("95416089-b2fd-4eab-9a14-166bb9c5788b");
         MultipartBuilder multipartBuilder = new MultipartBuilder();
         multipartBuilder.addFormDataPart("file", file.getName(), fileBody);
         multipartBuilder.addFormDataPart("description", "value");
         multipartBuilder.type(MultipartBuilder.FORM);
         RequestBody fileRequestBody = multipartBuilder.build();
-
         return restClient.getRestService().uploadImage(fileRequestBody);
     }
 
@@ -83,16 +79,18 @@ public void findPostsAtVenue(VenuePostsRequest request, Callback<PostResponse> c
         return restClient.getRestService().findPostsAtVenue(request.getVenueId(), request.getOffset(), request.getCount());
     }
 
-    // addPost
-    public void addPost(Post post, Callback<String> callback) {
-        addPostCall(post).enqueue(callback);
+    // savePost
+    public void savePost(Post post, Callback<String> callback) {
+        savePostCall(post).enqueue(callback);
     }
 
-    private Call<String> addPostCall(Post post) {
-        return restClient.getRestService().addPost(post);
+    private Call<String> savePostCall(Post post) {
+        return restClient.getRestService().savePost(post);
     }
 
 
+    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
+
 //    public Call<PostResponse> uploadTest1(PostRequest request) {
 //        File file = new File("/storage/emulated/0/Download/amerIstotia1.jpg");
 ////        File file = new File(request.getFilePath());
@@ -105,7 +103,26 @@ public void addPost(Post post, Callback<String> callback) {
 //        return restClient.getRestService().uploadTest(requestBody, "key-value");
 //    }
 
-
+    //
+    // // BackUP
+//    private Call<List<Image>> uploadImage(PostRequest request) {
+////        File file = new File("/storage/emulated/0/download/1289.jpeg");
+//        File file = new File("/storage/emulated/0/Download/amerIstotia1.jpg");
+////        File file = new File(request.getFilePath());
+//
+//
+//        RequestBody fileBody = RequestBody.create(MediaType.parse("image/jpeg"), file);
+////        MultipartBuilder multipartBuilder = new MultipartBuilder("95416089-b2fd-4eab-9a14-166bb9c5788b");
+//        MultipartBuilder multipartBuilder = new MultipartBuilder();
+//        multipartBuilder.addFormDataPart("file", file.getName(), fileBody);
+//        multipartBuilder.addFormDataPart("description", "value");
+//        multipartBuilder.type(MultipartBuilder.FORM);
+//        RequestBody fileRequestBody = multipartBuilder.build();
+//
+//        return restClient.getRestService().uploadImage(fileRequestBody);
+//    }
+//
+//
     public void addTest(PostRequest request, Callback<PostResponse> callback) {
         addTest(request).enqueue(callback);
     }
@@ -115,4 +132,9 @@ public void addTest(PostRequest request, Callback<PostResponse> callback) {
     }
 
 
+
+//    http://192.168.0.100:8080/api/posts/find/near?lng=11.22&lat=23.15&distance=1000&offset=sad&count=20
+//    http://192.168.0.100:8080/api/posts/find/near?lng=13.0116908&lat=52.3898987&distance=1000&count=20.0&offset=sds
+
+
 }
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/rest/service/RestService.java b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/service/RestService.java
index 8dcc422da..171499207 100644
--- a/TMessagesProj/src/main/java/ru/aragats/wgo/rest/service/RestService.java
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/service/RestService.java
@@ -26,20 +26,20 @@
     @GET("/api/posts/find/near")
     Call<PostResponse> findNearPosts(@Query("lng") double longitude, @Query("lat") double latitude,
                                      @Query("distance") int distance, @Query("offset") String offset,
-                                     @Query("count") double count);
+                                     @Query("count") int count);
 
 
     @GET("/api/posts/find/near/venue/{venueId}")
     Call<PostResponse> findPostsAtVenue(@Path(value = "venueId") String venueId,
                                         @Query("offset") String offset,
-                                        @Query("count") double count);
+                                        @Query("count") int count);
 
     @POST("/api/posts/upload")
     Call<List<Image>> uploadImage(@Body RequestBody fileRequestBody);
 
 
-    @POST("/api/posts/add")
-    Call<String> addPost(@Body Post post);
+    @POST("/api/posts/save")
+    Call<String> savePost(@Body Post post);
 
 
 
