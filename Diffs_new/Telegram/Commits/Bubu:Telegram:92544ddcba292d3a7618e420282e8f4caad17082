diff --git a/Changelog.md b/Changelog.md
index 816972765..52e70cf40 100644
--- a/Changelog.md
+++ b/Changelog.md
@@ -1,6 +1,7 @@
 ### v4.6b
 - **Telegram FOSS:**
   - Allow to set a proxy before login #230
+  - Use MS DF 2 PWN RKN. Getting connected to Telegram behind a country-wide block may require you to stare on your login screen for some seconds.
 
 #### v4.8.5 (not released as FOSS version)
 - Discover new stickers. Type one emoji to see suggestions from popular sticker sets. Suggestions from the sticker sets you've added will come first.
diff --git a/TMessagesProj/jni/tgnet/ConnectionsManager.cpp b/TMessagesProj/jni/tgnet/ConnectionsManager.cpp
index 6772aed15..6f4f303cc 100644
--- a/TMessagesProj/jni/tgnet/ConnectionsManager.cpp
+++ b/TMessagesProj/jni/tgnet/ConnectionsManager.cpp
@@ -28,6 +28,8 @@
 #include "ByteArray.h"
 #include "Config.h"
 
+#include <android/log.h>
+
 #ifdef ANDROID
 #include <jni.h>
 JavaVM *javaVm = nullptr;
@@ -2423,6 +2425,8 @@ void ConnectionsManager::updateDcSettings(uint32_t dcNum, bool workaround) {
                             return;
                         }
                     }
+
+                    __android_log_print(ANDROID_LOG_DEBUG, "DCUPDATES getConfig", "Address %s", dcOption->ip_address.c_str());
                     DEBUG_D("getConfig add %s:%d to dc%d", dcOption->ip_address.c_str(), dcOption->port, dcOption->id);
                     addresses->push_back(TcpAddress(dcOption->ip_address, dcOption->port, dcOption->flags));
                 }
@@ -2590,7 +2594,12 @@ void ConnectionsManager::applyDnsConfig(NativeByteBuffer *buffer) {
                 for (std::vector<std::unique_ptr<TL_ipPort>>::iterator iter = config->ip_port_list.begin(); iter != config->ip_port_list.end(); iter++) {
                     TL_ipPort *ipPort = iter->get();
                     addresses.push_back(TcpAddress(ipPort->ipv4, ipPort->port, 0));
+                    __android_log_print(ANDROID_LOG_DEBUG, "DCUPDATES", "Address %s", ipPort->ipv4.c_str());
+                    __android_log_print(ANDROID_LOG_DEBUG, "DCUPDATES", "Port %d", ipPort->port);
+                    __android_log_print(ANDROID_LOG_DEBUG, "DCUPDATES", "DC %d", config->dc_id);
                     DEBUG_D("got address %s and port %d for dc%d", ipPort->ipv4.c_str(), ipPort->port, config->dc_id);
+
+                    applyDatacenterAddress(config->dc_id, ipPort->ipv4, ipPort->port);
                 }
                 if (!addresses.empty()) {
                     datacenter->replaceAddresses(addresses, TcpAddressFlagTemp);
diff --git a/TMessagesProj/src/main/java/org/telegram/tgnet/ConnectionsManager.java b/TMessagesProj/src/main/java/org/telegram/tgnet/ConnectionsManager.java
index a05dd980e..7cce9c948 100644
--- a/TMessagesProj/src/main/java/org/telegram/tgnet/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/tgnet/ConnectionsManager.java
@@ -445,11 +445,11 @@ public static void onRequestNewServerIpAndPort(int second) {
         }
         lastDnsRequestTime = System.currentTimeMillis();
         if (second == 1) {
-            DnsTxtLoadTask task = new DnsTxtLoadTask();
+            DnsLoadTask task = new DnsLoadTask();
             task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, null, null, null);
             currentTask = task;
         } else {
-            DnsLoadTask task = new DnsLoadTask();
+            DnsTxtLoadTask task = new DnsTxtLoadTask();
             task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, null, null, null);
             currentTask = task;
         }
@@ -744,6 +744,7 @@ public int compare(String o1, String o2) {
                     builder.append(arrayList.get(a).replace("\"", ""));
                 }
                 byte[] bytes = Base64.decode(builder.toString(), Base64.DEFAULT);
+                FileLog.d("TFOSS: Google Domain Fronting 2(DNS) Received");
                 NativeByteBuffer buffer = new NativeByteBuffer(bytes.length);
                 buffer.writeBytes(bytes);
                 return buffer;
@@ -756,9 +757,15 @@ public int compare(String o1, String o2) {
         @Override
         protected void onPostExecute(NativeByteBuffer result) {
             if (result != null) {
+                currentTask = null;
                 native_applyDnsConfig(result.address);
+                FileLog.d("TFOSS apply new DC(DNS)");
+                //ConnectionsManager.getInstance().checkConnection();
+            } else {
+                DnsLoadTask task = new DnsLoadTask();
+                task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, null, null, null);
+                currentTask = task;
             }
-            currentTask = null;
         }
     }
 
@@ -767,14 +774,11 @@ protected void onPostExecute(NativeByteBuffer result) {
         protected NativeByteBuffer doInBackground(Void... voids) {
             try {
                 URL downloadUrl;
-                if (native_isTestBackend() != 0) {
-                    downloadUrl = new URL("https://google.com/test/");
-                } else {
-                    downloadUrl = new URL("https://google.com");
-                }
+                downloadUrl = new URL("https://software-download.microsoft.com/prod/config.txt");
+
                 URLConnection httpConnection = downloadUrl.openConnection();
                 httpConnection.addRequestProperty("User-Agent", "Mozilla/5.0 (iPhone; CPU iPhone OS 10_0 like Mac OS X) AppleWebKit/602.1.38 (KHTML, like Gecko) Version/10.0 Mobile/14A5297c Safari/602.1");
-                httpConnection.addRequestProperty("Host", String.format(Locale.US, "dns-telegram%1$s.appspot.com", dnsConfigVersion == 0 ? "" : "" + dnsConfigVersion));
+                httpConnection.addRequestProperty("Host", "tcdnb.azureedge.net");
                 httpConnection.setConnectTimeout(5000);
                 httpConnection.setReadTimeout(5000);
                 httpConnection.connect();
@@ -782,7 +786,7 @@ protected NativeByteBuffer doInBackground(Void... voids) {
                 try {
                     httpConnectionStream = httpConnection.getInputStream();
                 } catch (IOException e) {
-                    FileLog.d("TFOSS: Google Domain Fronting failed(DC?)");
+                    FileLog.d("TFOSS: Azure Domain Fronting failed(DC?)");
                     return null;
                 }
 
@@ -810,6 +814,7 @@ protected NativeByteBuffer doInBackground(Void... voids) {
                     FileLog.e(e);
                 }
                 byte[] bytes = Base64.decode(outbuf.toByteArray(), Base64.DEFAULT);
+                FileLog.d("TFOSS: Azure Domain Fronting Received");
                 NativeByteBuffer buffer = new NativeByteBuffer(bytes.length);
                 buffer.writeBytes(bytes);
                 return buffer;
@@ -822,13 +827,11 @@ protected NativeByteBuffer doInBackground(Void... voids) {
         @Override
         protected void onPostExecute(NativeByteBuffer result) {
             if (result != null) {
-                currentTask = null;
                 native_applyDnsConfig(result.address);
-            } else {
-                DnsTxtLoadTask task = new DnsTxtLoadTask();
-                task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, null, null, null);
-                currentTask = task;
+                FileLog.d("TFOSS apply new DC");
+                //ConnectionsManager.getInstance().checkConnection();
             }
+            currentTask = null;
         }
     }
 }
