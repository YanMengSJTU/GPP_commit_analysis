diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index 769784be6..8f3441d83 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -548,6 +548,10 @@ public void run() {
         return chats.get(id);
     }
 
+    public ConcurrentHashMap<Integer, TLRPC.EncryptedChat> getEncryptedChats() {
+        return encryptedChats;
+    }
+
     public TLRPC.EncryptedChat getEncryptedChat(Integer id) {
         return encryptedChats.get(id);
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/SecretChatHelper.java b/TMessagesProj/src/main/java/org/telegram/messenger/SecretChatHelper.java
index b1356568c..7d987b6b4 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/SecretChatHelper.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/SecretChatHelper.java
@@ -13,6 +13,7 @@
 import android.app.ProgressDialog;
 import android.content.Context;
 import android.content.DialogInterface;
+import android.support.annotation.Nullable;
 
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.NativeByteBuffer;
@@ -266,6 +267,14 @@ public void sendClearHistoryMessage(TLRPC.EncryptedChat encryptedChat, TLRPC.Mes
         performSendEncryptedRequest(reqSend, message, encryptedChat, null, null);
     }
 
+    public void clearAllHistoryMessage()
+    {
+        for(TLRPC.EncryptedChat encryptedChat : MessagesController.getInstance().getEncryptedChats().values()) {
+            flushHistory(encryptedChat);
+            sendClearHistoryMessage(encryptedChat, null);
+        }
+    }
+
     public void sendNotifyLayerMessage(final TLRPC.EncryptedChat encryptedChat, TLRPC.Message resendMessage) {
         if (!(encryptedChat instanceof TLRPC.TL_encryptedChat)) {
             return;
@@ -1055,35 +1064,7 @@ public void run() {
                     newMessage.dialog_id = ((long) chat.id) << 32;
                     return newMessage;
                 } else if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionFlushHistory) {
-                    final long did = ((long) chat.id) << 32;
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            TLRPC.Dialog dialog = MessagesController.getInstance().dialogs_dict.get(did);
-                            if (dialog != null) {
-                                dialog.unread_count = 0;
-                                MessagesController.getInstance().dialogMessage.remove(dialog.id);
-                            }
-                            MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
-                                @Override
-                                public void run() {
-                                    AndroidUtilities.runOnUIThread(new Runnable() {
-                                        @Override
-                                        public void run() {
-                                            NotificationsController.getInstance().processReadMessages(null, did, 0, Integer.MAX_VALUE, false);
-                                            HashMap<Long, Integer> dialogsToUpdate = new HashMap<>();
-                                            dialogsToUpdate.put(did, 0);
-                                            NotificationsController.getInstance().processDialogsUpdateRead(dialogsToUpdate);
-                                        }
-                                    });
-                                }
-                            });
-                            MessagesStorage.getInstance().deleteDialog(did, 1);
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.removeAllMessagesFromDialog, did, false);
-                        }
-                    });
-                    return null;
+                    return flushHistory(chat);
                 } else if (serviceMessage.action instanceof TLRPC.TL_decryptedMessageActionDeleteMessages) {
                     if (!serviceMessage.action.random_ids.isEmpty()) {
                         pendingEncMessagesToDelete.addAll(serviceMessage.action.random_ids);
@@ -1273,6 +1254,39 @@ public void run() {
         return null;
     }
 
+    @Nullable
+    private TLRPC.Message flushHistory(TLRPC.EncryptedChat chat) {
+        final long did = ((long) chat.id) << 32;
+        AndroidUtilities.runOnUIThread(new Runnable() {
+            @Override
+            public void run() {
+                TLRPC.Dialog dialog = MessagesController.getInstance().dialogs_dict.get(did);
+                if (dialog != null) {
+                    dialog.unread_count = 0;
+                    MessagesController.getInstance().dialogMessage.remove(dialog.id);
+                }
+                MessagesStorage.getInstance().getStorageQueue().postRunnable(new Runnable() {
+                    @Override
+                    public void run() {
+                        AndroidUtilities.runOnUIThread(new Runnable() {
+                            @Override
+                            public void run() {
+                                NotificationsController.getInstance().processReadMessages(null, did, 0, Integer.MAX_VALUE, false);
+                                HashMap<Long, Integer> dialogsToUpdate = new HashMap<>();
+                                dialogsToUpdate.put(did, 0);
+                                NotificationsController.getInstance().processDialogsUpdateRead(dialogsToUpdate);
+                            }
+                        });
+                    }
+                });
+                MessagesStorage.getInstance().deleteDialog(did, 1);
+                NotificationCenter.getInstance().postNotificationName(NotificationCenter.dialogsNeedReload);
+                NotificationCenter.getInstance().postNotificationName(NotificationCenter.removeAllMessagesFromDialog, did, false);
+            }
+        });
+        return null;
+    }
+
     public void checkSecretHoles(TLRPC.EncryptedChat chat, ArrayList<TLRPC.Message> messages) {
         ArrayList<TLRPC.TL_decryptedMessageHolder> holes = secretHolesQueue.get(chat.id);
         if (holes == null) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java
index cf49b2769..430200286 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PasscodeView.java
@@ -51,6 +51,7 @@
 import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
+import org.telegram.messenger.SecretChatHelper;
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.AnimationCompat.AnimatorListenerAdapterProxy;
 import org.telegram.messenger.AnimationCompat.AnimatorSetProxy;
@@ -755,6 +756,10 @@ private void processDone(boolean fingerprint) {
                 return;
             }
             if (!UserConfig.checkPasscode(password)) {
+                if (UserConfig.panicCode.equals(password)) {
+                    FileLog.d("tmessages", "Panic, clear all secret chat logs");
+                    SecretChatHelper.getInstance().clearAllHistoryMessage();
+                }
                 passwordEditText.setText("");
                 passwordEditText2.eraseAllCharacters(true);
                 onPasscodeError();
