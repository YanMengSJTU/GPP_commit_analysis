diff --git a/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java b/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java
index 5ab439e9b..0b13a99a9 100644
--- a/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java
+++ b/TMessagesProj/src/main/java/org/cloudveil/messenger/service/ChannelCheckingService.java
@@ -26,6 +26,7 @@
 import org.telegram.tgnet.TLRPC;
 
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.concurrent.ConcurrentHashMap;
 
 import io.reactivex.android.schedulers.AndroidSchedulers;
@@ -75,6 +76,7 @@ public void run() {
     private void sendDataCheckRequest() {
         final SettingsRequest request = new SettingsRequest();
         addDialogsToRequest(request);
+        addInlineBotsToRequest(request);
 
         request.userPhone = UserConfig.getCurrentUser().phone;
         request.userId = UserConfig.getCurrentUser().id;
@@ -86,8 +88,8 @@ private void sendDataCheckRequest() {
         }
 
         final SettingsResponse cached = loadFromCache();
-        if(!ConnectionsManager.isNetworkOnline()) {
-            if(cached != null) {
+        if (!ConnectionsManager.isNetworkOnline()) {
+            if (cached != null) {
                 processResponse(request, cached);
             }
             return;
@@ -110,13 +112,27 @@ public void accept(SettingsResponse settingsResponse) throws Exception {
                     @Override
                     public void accept(Throwable throwable) throws Exception {
                         freeSubscription();
-                        if(cached != null) {
+                        if (cached != null) {
                             processResponse(request, cached);
                         }
                     }
                 });
     }
 
+    private void addInlineBotsToRequest(SettingsRequest request) {
+        Collection<TLRPC.User> values = MessagesController.getInstance().getUsers().values();
+        for (TLRPC.User user : values) {
+            if (user.bot) {
+                SettingsRequest.Row row = new SettingsRequest.Row();
+                row.id = user.id;
+
+                row.title = user.username;
+                row.userName = user.username;
+                request.addBot(row);
+            }
+        }
+    }
+
     private void processResponse(@NonNull SettingsRequest request, @NonNull SettingsResponse settingsResponse) {
         ConcurrentHashMap<Long, Boolean> allowedDialogs = MessagesController.getInstance().allowedDialogs;
         allowedDialogs.clear();
@@ -127,19 +143,19 @@ private void processResponse(@NonNull SettingsRequest request, @NonNull Settings
             allowedDialogs.put(groupId, true);
         }
 
-        addBlackListedDialogs(request.channels);
-        addBlackListedDialogs(request.groups);
-        addBlackListedBots(request.bots);
-
         ConcurrentHashMap<Long, Boolean> allowedBots = MessagesController.getInstance().allowedBots;
         allowedBots.clear();
         for (Long groupId : settingsResponse.bots) {
             allowedBots.put(groupId, true);
         }
 
+        addBlackListedDialogs(request.channels);
+        addBlackListedDialogs(request.groups);
+        addBlackListedBots(request.bots);
+
         GlobalSecuritySettings.setDisableSecretChat(!settingsResponse.secretChat);
         GlobalSecuritySettings.setMinSecretChatTtl(settingsResponse.secretChatMinimumLength);
-        
+
         GlobalSecuritySettings.setLockDisableOthersBio(settingsResponse.disableBio);
         GlobalSecuritySettings.setLockDisableOwnBio(settingsResponse.disableBioChange);
         GlobalSecuritySettings.setLockDisableOwnPhoto(settingsResponse.disableProfilePhotoChange);
@@ -150,8 +166,8 @@ private void processResponse(@NonNull SettingsRequest request, @NonNull Settings
 
     private void addBlackListedDialogs(ArrayList<SettingsRequest.Row> rows) {
         ConcurrentHashMap<Long, Boolean> allowedDialogs = MessagesController.getInstance().allowedDialogs;
-        for(SettingsRequest.Row dlg : rows) {
-            if(!allowedDialogs.containsKey(dlg.id)) {
+        for (SettingsRequest.Row dlg : rows) {
+            if (!allowedDialogs.containsKey(dlg.id)) {
                 allowedDialogs.put(dlg.id, false);
             }
         }
@@ -159,8 +175,8 @@ private void addBlackListedDialogs(ArrayList<SettingsRequest.Row> rows) {
 
     private void addBlackListedBots(ArrayList<SettingsRequest.Row> rows) {
         ConcurrentHashMap<Long, Boolean> allowedBots = MessagesController.getInstance().allowedBots;
-        for(SettingsRequest.Row dlg : rows) {
-            if(!allowedBots.containsKey(dlg.id)) {
+        for (SettingsRequest.Row dlg : rows) {
+            if (!allowedBots.containsKey(dlg.id)) {
                 allowedBots.put(dlg.id, false);
             }
         }
@@ -245,6 +261,7 @@ private void addDialogsToRequest(@NonNull SettingsRequest request, ArrayList<TLR
                 }
             } else if (user != null) {
                 if (user.bot) {
+                    row.id = user.id;
                     row.title = user.username;
                     row.userName = user.username;
                     request.addBot(row);
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index 9ea90d305..7885c5a6e 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -9037,6 +9037,17 @@ public boolean isDialogAllowed(TLRPC.TL_dialog dialog) {
         return isDialogIdAllowed(dialog.id);
     }
 
+    public boolean isUserAllowed(TLRPC.User user) {
+        if (user.bot) {
+            if (GlobalSecuritySettings.LOCK_DISABLE_BOTS) {
+                return false;
+            }
+            long id = (long)user.id;
+            return !allowedBots.containsKey(id) || allowedBots.get(id);
+        }
+        return true;
+    }
+
     public boolean isDialogIdAllowed(long currentDialogId) {
         int lower_id = (int) currentDialogId;
         int high_id = (int) (currentDialogId >> 32);
@@ -9071,14 +9082,7 @@ public boolean isDialogIdAllowed(long currentDialogId) {
         } else if (chat != null) {
             return !allowedDialogs.containsKey(currentDialogId) || allowedDialogs.get(currentDialogId);
         } else if (user != null) {
-            if (user.bot) {
-                if (GlobalSecuritySettings.LOCK_DISABLE_BOTS) {
-                    return false;
-                }
-                return !allowedBots.containsKey(currentDialogId) || allowedBots.get(currentDialogId);
-            } else {
-                return true;
-            }
+            return isUserAllowed(user);
         }
         return false;
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java
index 7be925728..8fcb6fb9c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/MentionsAdapter.java
@@ -60,7 +60,9 @@
 
     public interface MentionsAdapterDelegate {
         void needChangePanelVisibility(boolean show);
+
         void onContextSearch(boolean searching);
+
         void onContextClick(TLRPC.BotInlineResult result);
     }
 
@@ -207,7 +209,7 @@ public void setNeedUsernames(boolean value) {
     }
 
     public void setNeedBotContext(boolean value) {
-        if(GlobalSecuritySettings.LOCK_DISABLE_BOTS) {
+        if (GlobalSecuritySettings.LOCK_DISABLE_BOTS) {
             value = false;
         }
         needBotContext = value;
@@ -716,6 +718,11 @@ public void searchUsernameOrHashtag(String text, int position, ArrayList<Message
                 int count = 0;
                 for (int a = 0; a < SearchQuery.inlineBots.size(); a++) {
                     TLRPC.User user = MessagesController.getInstance().getUser(SearchQuery.inlineBots.get(a).peer.user_id);
+                    //CloudVeil start
+                    if(!MessagesController.getInstance().isUserAllowed(user)) {
+                        continue;
+                    }
+                    //CloudVeil end
                     if (user == null) {
                         continue;
                     }
