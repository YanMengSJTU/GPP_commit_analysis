diff --git a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
index bafc88956..6e143e497 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/NotificationCenter.java
@@ -19,6 +19,7 @@
 
     public static final int venuesNeedReload = -1;
     public static final int postsNeedReload = -2;
+    public static final int postRequestFinished = -3;
 
 
     private static int totalEvents = 1;
diff --git a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
index 7dfc5f4ba..7364c6c1f 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
@@ -19,6 +19,7 @@
 import org.telegram.messenger.service.mock.VenueServiceMock;
 
 import java.util.ArrayList;
+import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
 
 //import org.telegram.messenger.TLRPC;
@@ -32,11 +33,10 @@
     public Post currentPost;
 
 
-    public ArrayList<Post> posts = new ArrayList<>();
+    public List<Post> posts = new ArrayList<>();
     public ConcurrentHashMap<String, Post> postsMap = new ConcurrentHashMap<>(100, 1.0f, 2);
 
-    public int totalDialogsCount = 0;
-    public boolean loadingPosts = false;
+    private boolean loadingPosts = false;
 
 
     public int fontSize = AndroidUtilities.dp(16);
@@ -102,17 +102,12 @@ public void didReceivedNotification(int id, Object... args) {
     }
 
     public void cleanUp() {
-        ContactsController.getInstance().cleanup();
         MediaController.getInstance().cleanup();
         NotificationsController.getInstance().cleanup();
-        SendMessagesHelper.getInstance().cleanUp();
-        SecretChatHelper.getInstance().cleanUp();
 
         postsMap.clear();
         posts.clear();
 
-        totalDialogsCount = 0;
-
         loadingPosts = false;
 
     }
@@ -123,7 +118,7 @@ public void deletePost(final String did, int offset, final boolean onlyHistory)
     }
 
 
-    public void loadPosts(final int offset, final int count, boolean fromCache) {
+    public void loadPosts(final int offset, final int count, boolean reload, boolean fromCache) {
         if (loadingPosts) {
             return;
         }
@@ -133,12 +128,16 @@ public void loadPosts(final int offset, final int count, boolean fromCache) {
         //TODO here async  request
         PostResponse postResponse = PostServiceMock.getPosts("location", null, offset, count);
 //        after getting response.
-        processLoadedPosts(postResponse, offset, count);
+        processLoadedPosts(postResponse, offset, count, reload);
 
     }
 
 
-    public void processLoadedPosts(PostResponse postResponse, final int offset, final int count) {
+    public void processLoadedPosts(PostResponse postResponse, final int offset, final int count, boolean reload) {
+        if (reload) {
+            posts.clear();
+            postsMap.clear();
+        }
         posts.addAll(postResponse.getPosts());
         for (Post post : posts) {
             postsMap.putIfAbsent(post.getId(), post);
@@ -147,6 +146,8 @@ public void processLoadedPosts(PostResponse postResponse, final int offset, fina
         //TODO notify Activity to run postsAdapter.notifyDataSetChanged();
         if (!postResponse.getPosts().isEmpty()) {
             NotificationCenter.getInstance().postNotificationName(NotificationCenter.postsNeedReload);
+        } else {
+            NotificationCenter.getInstance().postNotificationName(NotificationCenter.postRequestFinished);
         }
 
 
@@ -172,4 +173,12 @@ public Post getCurrentPost() {
     public void setCurrentPost(Post currentPost) {
         this.currentPost = currentPost;
     }
+
+    public boolean isLoadingPosts() {
+        return loadingPosts;
+    }
+
+    public void setLoadingPosts(boolean loadingPosts) {
+        this.loadingPosts = loadingPosts;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java
index a4a0be7fe..372bc1544 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/PostsAdapter.java
@@ -56,7 +56,7 @@ public boolean isDataSetChanged() {
     @Override
     public int getItemCount() {
         int count = PostsController.getInstance().posts.size();
-        if (count == 0 && PostsController.getInstance().loadingPosts) {
+        if (count == 0 && PostsController.getInstance().isLoadingPosts()) {
             return 0;
         }
 //        if (!PostsController.getInstance().dialogsEndReached) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
index 2920e4c81..6ea8c1b15 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
@@ -64,6 +64,7 @@
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.RecyclerListView;
 import org.telegram.ui.Components.ResourceLoader;
+import org.telegram.utils.Constants;
 import org.telegram.utils.StringUtils;
 
 //TODO refresh list https://www.bignerdranch.com/blog/implementing-swipe-to-refresh/
@@ -201,6 +202,7 @@ public boolean onFragmentCreate() {
 
         if (searchString == null) {
             //TODO learn NotificationCenter class especiallu case when post notification. There is different situations when notify when animation or not.
+            NotificationCenter.getInstance().addObserver(this, NotificationCenter.postRequestFinished);
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.postsNeedReload);
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.dialogsNeedReload);
             NotificationCenter.getInstance().addObserver(this, NotificationCenter.emojiDidLoaded);
@@ -218,7 +220,7 @@ public boolean onFragmentCreate() {
 
 
         if (!postsLoaded) {
-            PostsController.getInstance().loadPosts(0, 20, true);
+            PostsController.getInstance().loadPosts(0, Constants.POST_COUNT, true, true);
             ContactsController.getInstance().checkInviteText();
             postsLoaded = true;
         }
@@ -229,6 +231,7 @@ public boolean onFragmentCreate() {
     public void onFragmentDestroy() {
         super.onFragmentDestroy();
         if (searchString == null) {
+            NotificationCenter.getInstance().removeObserver(this, NotificationCenter.postRequestFinished);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.postsNeedReload);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.dialogsNeedReload);
             NotificationCenter.getInstance().removeObserver(this, NotificationCenter.emojiDidLoaded);
@@ -279,7 +282,7 @@ public boolean onSearchCollapse() {
                 searchWas = false;
                 if (postListView != null) {
                     searchEmptyView.setVisibility(View.INVISIBLE);
-                    if (PostsController.getInstance().loadingPosts && PostsController.getInstance().posts.isEmpty()) {
+                    if (PostsController.getInstance().isLoadingPosts() && PostsController.getInstance().posts.isEmpty()) {
                         emptyView.setVisibility(View.INVISIBLE);
                         postListView.setEmptyView(progressView);
                     } else {
@@ -368,8 +371,9 @@ public void onItemClick(int id) {
         swipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
             @Override
             public void onRefresh() {
+                PostsController.getInstance().loadPosts(0, Constants.POST_COUNT, true, true);
 //                refreshContent();
-                Toast.makeText(((Context) getParentActivity()), "REFRESH BUTTON is CLICKED", Toast.LENGTH_SHORT).show();
+//                Toast.makeText(((Context) getParentActivity()), "REFRESH BUTTON is CLICKED", Toast.LENGTH_SHORT).show();
                 // Probably refresh icon disappear when we update the adapter the content. Because I should not use this method. OR NOT . I think it is ok to use this method. according to tutorial
 //                swipeRefreshLayout.setRefreshing(false);
 //                postsAdapter.notifyDataSetChanged();
@@ -555,7 +559,7 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                 //TODO fix it.
                 if (visibleItemCount > 0) {
                     if (layoutManager.findLastVisibleItemPosition() == PostsController.getInstance().posts.size() - 1) {
-                        PostsController.getInstance().loadPosts(PostsController.getInstance().posts.size(), 20, true);
+                        PostsController.getInstance().loadPosts(PostsController.getInstance().posts.size(), Constants.POST_COUNT, false, true);
                     }
                 }
 
@@ -612,7 +616,7 @@ public void searchStateChanged(boolean search) {
             }
         });
 
-        if (PostsController.getInstance().loadingPosts && PostsController.getInstance().posts.isEmpty()) {
+        if (PostsController.getInstance().isLoadingPosts() && PostsController.getInstance().posts.isEmpty()) {
             searchEmptyView.setVisibility(View.INVISIBLE);
             emptyView.setVisibility(View.INVISIBLE);
             postListView.setEmptyView(progressView);
@@ -663,7 +667,11 @@ public void onGlobalLayout() {
     @Override
     @SuppressWarnings("unchecked")
     public void didReceivedNotification(int id, Object... args) {
-        if (id == NotificationCenter.postsNeedReload) {
+        if (id == NotificationCenter.postRequestFinished) {
+            if(swipeRefreshLayout != null) {
+                swipeRefreshLayout.setRefreshing(false);
+            }
+        } else if (id == NotificationCenter.postsNeedReload) {
             if (postsAdapter != null) {
                 if (postsAdapter.isDataSetChanged()) {
                     postsAdapter.notifyDataSetChanged();
@@ -676,7 +684,7 @@ public void didReceivedNotification(int id, Object... args) {
             }
             if (postListView != null) {
                 try {
-                    if (PostsController.getInstance().loadingPosts && PostsController.getInstance().posts.isEmpty()) {
+                    if (PostsController.getInstance().isLoadingPosts() && PostsController.getInstance().posts.isEmpty()) {
                         searchEmptyView.setVisibility(View.INVISIBLE);
                         emptyView.setVisibility(View.INVISIBLE);
                         postListView.setEmptyView(progressView);
@@ -694,6 +702,9 @@ public void didReceivedNotification(int id, Object... args) {
                     FileLog.e("tmessages", e); //TODO fix it in other way?
                 }
             }
+            if(swipeRefreshLayout != null) {
+                swipeRefreshLayout.setRefreshing(false);
+            }
         } else if (id == NotificationCenter.emojiDidLoaded) {
             if (postListView != null) {
                 updateVisibleRows(0);
diff --git a/TMessagesProj/src/main/java/org/telegram/utils/Constants.java b/TMessagesProj/src/main/java/org/telegram/utils/Constants.java
index e71807478..727cc0c57 100644
--- a/TMessagesProj/src/main/java/org/telegram/utils/Constants.java
+++ b/TMessagesProj/src/main/java/org/telegram/utils/Constants.java
@@ -11,4 +11,8 @@
     public static final String WGO_DOCUMENT = "Whats going on. Documents";
     public static final String WGOFaqUrl = "WGOFaqUrl";
     public static final String WGO_FAQ = "WGOFAQ";
+
+
+
+    public static int POST_COUNT = 20;
 }
