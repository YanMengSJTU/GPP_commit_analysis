diff --git a/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/AppVersionTask.java b/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/AppVersionTask.java
new file mode 100644
index 000000000..585f8f781
--- /dev/null
+++ b/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/AppVersionTask.java
@@ -0,0 +1,128 @@
+package io.bettergram.telegram.messenger;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.AsyncTask;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.URL;
+import java.net.URLConnection;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import java.util.regex.PatternSyntaxException;
+
+public class AppVersionTask extends AsyncTask<Void, String, String> {
+
+    private OnVersionListener listener;
+
+    public AppVersionTask(OnVersionListener listener) {
+        this.listener = listener;
+    }
+
+    @Override
+    protected String doInBackground(Void... voids) {
+
+        String newVersion = null;
+        try {
+            newVersion = getPlayStoreAppVersion("https://play.google.com/store/apps/details?id=" + ApplicationLoader.packageName() + "&hl=en");
+            return newVersion;
+        } catch (Exception e) {
+            e.printStackTrace();
+            return newVersion;
+        }
+    }
+
+    @Override
+    protected void onPostExecute(String onlineVersion) {
+        super.onPostExecute(onlineVersion);
+        if (onlineVersion != null && !onlineVersion.isEmpty()) {
+            if (Long.valueOf(extractDigits(ApplicationLoader.version())) < Long.valueOf(extractDigits(onlineVersion))) {
+                if (listener != null) {
+                    listener.onNewUpdate(true);
+                }
+                return;
+            }
+        }
+        if (listener != null) {
+            listener.onNewUpdate(false);
+        }
+    }
+
+    private String extractDigits(String s) {
+        return s.replaceAll("\\D+", "");
+    }
+
+    private String getAppVersion(String patternString, String inputString) {
+        try {
+            //Create a pattern
+            Pattern pattern = Pattern.compile(patternString);
+            if (null == pattern) {
+                return null;
+            }
+
+            //Match the pattern string in provided string
+            Matcher matcher = pattern.matcher(inputString);
+            if (null != matcher && matcher.find()) {
+                return matcher.group(1);
+            }
+
+        } catch (PatternSyntaxException ex) {
+
+            ex.printStackTrace();
+        }
+
+        return null;
+    }
+
+
+    private String getPlayStoreAppVersion(String appUrlString) throws IOException {
+        final String currentVersion_PatternSeq = "<div[^>]*?>Current\\sVersion</div><span[^>]*?>(.*?)><div[^>]*?>(.*?)><span[^>]*?>(.*?)</span>";
+        final String appVersion_PatternSeq = "htlgb\">([^<]*)</s";
+        String playStoreAppVersion = null;
+
+        BufferedReader inReader = null;
+        URLConnection uc = null;
+        StringBuilder urlData = new StringBuilder();
+
+        final URL url = new URL(appUrlString);
+        uc = url.openConnection();
+        if (uc == null) {
+            return null;
+        }
+        uc.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows; U; WindowsNT 5.1; en-US; rv1.8.1.6) Gecko/20070725 Firefox/2.0.0.6");
+        inReader = new BufferedReader(new InputStreamReader(uc.getInputStream()));
+        if (null != inReader) {
+            String str = "";
+            while ((str = inReader.readLine()) != null) {
+                urlData.append(str);
+            }
+        }
+
+        // Get the current version pattern sequence
+        String versionString = getAppVersion(currentVersion_PatternSeq, urlData.toString());
+        if (null == versionString) {
+            return null;
+        } else {
+            // get version from "htlgb">X.X.X</span>
+            playStoreAppVersion = getAppVersion(appVersion_PatternSeq, versionString);
+        }
+
+        return playStoreAppVersion;
+    }
+
+    public static void openAppInPlayStore(Activity activity) {
+        final String appPackageName = ApplicationLoader.packageName(); // getPackageName() from Context or Activity object
+        try {
+            activity.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=" + appPackageName)));
+        } catch (android.content.ActivityNotFoundException anfe) {
+            activity.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("https://play.google.com/store/apps/details?id=" + appPackageName)));
+        }
+    }
+
+    public interface OnVersionListener {
+        void onNewUpdate(boolean shouldUpdate);
+    }
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/ApplicationLoader.java b/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/ApplicationLoader.java
index a41797dba..e8ecc10b2 100644
--- a/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/ApplicationLoader.java
+++ b/TMessagesProj/src/main/java/io/bettergram/telegram/messenger/ApplicationLoader.java
@@ -13,17 +13,14 @@
 import android.app.AlarmManager;
 import android.app.Application;
 import android.app.PendingIntent;
-import android.content.BroadcastReceiver;
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.content.SharedPreferences;
+import android.content.*;
 import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
 import android.content.res.Configuration;
 import android.os.Handler;
 import android.os.PowerManager;
 import android.text.TextUtils;
-
 import com.crashlytics.android.Crashlytics;
 import com.google.android.gms.common.ConnectionResult;
 import com.google.android.gms.common.GooglePlayServicesNotAvailableException;
@@ -31,17 +28,6 @@
 import com.google.android.gms.common.GooglePlayServicesUtil;
 import com.google.android.gms.security.ProviderInstaller;
 import com.google.firebase.iid.FirebaseInstanceId;
-
-import java.io.File;
-import java.security.KeyManagementException;
-import java.security.NoSuchAlgorithmException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-import java.util.concurrent.TimeUnit;
-
-import javax.net.ssl.SSLContext;
-
 import io.bettergram.service.CryptoDataService;
 import io.bettergram.service.NewsDataService;
 import io.bettergram.telegram.tgnet.ConnectionsManager;
@@ -53,6 +39,15 @@
 import okhttp3.OkHttpClient;
 import okhttp3.TlsVersion;
 
+import javax.net.ssl.SSLContext;
+import java.io.File;
+import java.security.KeyManagementException;
+import java.security.NoSuchAlgorithmException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.concurrent.TimeUnit;
+
 import static io.bettergram.service.CryptoDataService.EXTRA_LIMIT;
 
 public class ApplicationLoader extends Application {
@@ -70,6 +65,20 @@
     public static volatile boolean mainInterfacePausedStageQueue = true;
     public static volatile long mainInterfacePausedStageQueueTime;
 
+    public static String packageName() {
+        return ApplicationLoader.applicationContext.getPackageName();
+    }
+
+    public static String version() {
+        try {
+            PackageInfo pInfo = ApplicationLoader.applicationContext.getPackageManager().getPackageInfo(packageName(), 0);
+            return String.valueOf(pInfo.versionCode);
+        } catch (PackageManager.NameNotFoundException e) {
+            e.printStackTrace();
+            return "";
+        }
+    }
+
     public static File getFilesDirFixed() {
         for (int a = 0; a < 10; a++) {
             File path = ApplicationLoader.applicationContext.getFilesDir();
@@ -176,8 +185,7 @@ public static void startPushService() {
         SharedPreferences preferences = MessagesController.getGlobalNotificationsSettings();
         if (preferences.getBoolean("pushService", true)) {
             try {
-                applicationContext
-                        .startService(new Intent(applicationContext, NotificationsService.class));
+                applicationContext.startService(new Intent(applicationContext, NotificationsService.class));
             } catch (Throwable ignore) {
 
             }
@@ -189,10 +197,8 @@ public static void startPushService() {
     public static void stopPushService() {
         applicationContext.stopService(new Intent(applicationContext, NotificationsService.class));
 
-        PendingIntent pintent = PendingIntent.getService(applicationContext, 0,
-                new Intent(applicationContext, NotificationsService.class), 0);
-        AlarmManager alarm = (AlarmManager) applicationContext
-                .getSystemService(Context.ALARM_SERVICE);
+        PendingIntent pintent = PendingIntent.getService(applicationContext, 0, new Intent(applicationContext, NotificationsService.class), 0);
+        AlarmManager alarm = (AlarmManager) applicationContext.getSystemService(Context.ALARM_SERVICE);
         alarm.cancel(pintent);
     }
 
diff --git a/TMessagesProj/src/main/java/io/bettergram/telegram/ui/Components/AlertsCreator.java b/TMessagesProj/src/main/java/io/bettergram/telegram/ui/Components/AlertsCreator.java
index d6862e935..428180f0c 100644
--- a/TMessagesProj/src/main/java/io/bettergram/telegram/ui/Components/AlertsCreator.java
+++ b/TMessagesProj/src/main/java/io/bettergram/telegram/ui/Components/AlertsCreator.java
@@ -23,21 +23,8 @@
 import android.widget.LinearLayout;
 import android.widget.TextView;
 import android.widget.Toast;
-
-import io.bettergram.telegram.messenger.AndroidUtilities;
-import io.bettergram.telegram.messenger.ApplicationLoader;
-import io.bettergram.telegram.messenger.BuildVars;
-import io.bettergram.telegram.messenger.LocaleController;
-import io.bettergram.telegram.messenger.MessagesController;
-import io.bettergram.telegram.messenger.MessagesStorage;
-import io.bettergram.telegram.messenger.NotificationCenter;
-import io.bettergram.telegram.messenger.NotificationsController;
 import io.bettergram.messenger.R;
-import io.bettergram.telegram.messenger.SecretChatHelper;
-import io.bettergram.telegram.messenger.SharedConfig;
-import io.bettergram.telegram.messenger.UserConfig;
-import io.bettergram.telegram.messenger.UserObject;
-import io.bettergram.telegram.messenger.Utilities;
+import io.bettergram.telegram.messenger.*;
 import io.bettergram.telegram.messenger.browser.Browser;
 import io.bettergram.telegram.tgnet.ConnectionsManager;
 import io.bettergram.telegram.tgnet.TLObject;
@@ -555,38 +542,38 @@ public static Dialog createMuteAlert(Context context, final long dialog_id) {
                 LocaleController.getString("MuteDisable", R.string.MuteDisable)
         };
         builder.setItems(items, (dialogInterface, i) -> {
-            int untilTime = ConnectionsManager.getInstance(UserConfig.selectedAccount).getCurrentTime();
-            if (i == 0) {
-                untilTime += 60 * 60;
-            } else if (i == 1) {
-                untilTime += 60 * 60 * 8;
-            } else if (i == 2) {
-                untilTime += 60 * 60 * 48;
-            } else if (i == 3) {
-                untilTime = Integer.MAX_VALUE;
-            }
+                    int untilTime = ConnectionsManager.getInstance(UserConfig.selectedAccount).getCurrentTime();
+                    if (i == 0) {
+                        untilTime += 60 * 60;
+                    } else if (i == 1) {
+                        untilTime += 60 * 60 * 8;
+                    } else if (i == 2) {
+                        untilTime += 60 * 60 * 48;
+                    } else if (i == 3) {
+                        untilTime = Integer.MAX_VALUE;
+                    }
 
-            SharedPreferences preferences = MessagesController.getNotificationsSettings(UserConfig.selectedAccount);
-            SharedPreferences.Editor editor = preferences.edit();
-            long flags;
-            if (i == 3) {
-                editor.putInt("notify2_" + dialog_id, 2);
-                flags = 1;
-            } else {
-                editor.putInt("notify2_" + dialog_id, 3);
-                editor.putInt("notifyuntil_" + dialog_id, untilTime);
-                flags = ((long) untilTime << 32) | 1;
-            }
-            NotificationsController.getInstance(UserConfig.selectedAccount).removeNotificationsForDialog(dialog_id);
-            MessagesStorage.getInstance(UserConfig.selectedAccount).setDialogFlags(dialog_id, flags);
-            editor.commit();
-            TLRPC.TL_dialog dialog = MessagesController.getInstance(UserConfig.selectedAccount).dialogs_dict.get(dialog_id);
-            if (dialog != null) {
-                dialog.notify_settings = new TLRPC.TL_peerNotifySettings();
-                dialog.notify_settings.mute_until = untilTime;
-            }
-            NotificationsController.getInstance(UserConfig.selectedAccount).updateServerNotificationsSettings(dialog_id);
-        }
+                    SharedPreferences preferences = MessagesController.getNotificationsSettings(UserConfig.selectedAccount);
+                    SharedPreferences.Editor editor = preferences.edit();
+                    long flags;
+                    if (i == 3) {
+                        editor.putInt("notify2_" + dialog_id, 2);
+                        flags = 1;
+                    } else {
+                        editor.putInt("notify2_" + dialog_id, 3);
+                        editor.putInt("notifyuntil_" + dialog_id, untilTime);
+                        flags = ((long) untilTime << 32) | 1;
+                    }
+                    NotificationsController.getInstance(UserConfig.selectedAccount).removeNotificationsForDialog(dialog_id);
+                    MessagesStorage.getInstance(UserConfig.selectedAccount).setDialogFlags(dialog_id, flags);
+                    editor.commit();
+                    TLRPC.TL_dialog dialog = MessagesController.getInstance(UserConfig.selectedAccount).dialogs_dict.get(dialog_id);
+                    if (dialog != null) {
+                        dialog.notify_settings = new TLRPC.TL_peerNotifySettings();
+                        dialog.notify_settings.mute_until = untilTime;
+                    }
+                    NotificationsController.getInstance(UserConfig.selectedAccount).updateServerNotificationsSettings(dialog_id);
+                }
         );
         return builder.create();
     }
@@ -605,44 +592,44 @@ public static Dialog createReportAlert(final Context context, final long dialog_
                 LocaleController.getString("ReportChatOther", R.string.ReportChatOther)
         };
         builder.setItems(items, (dialogInterface, i) -> {
-            if (i == 3) {
-                Bundle args = new Bundle();
-                args.putLong("dialog_id", dialog_id);
-                args.putLong("message_id", messageId);
-                parentFragment.presentFragment(new ReportOtherActivity(args));
-                return;
-            }
-            TLObject req;
-            TLRPC.InputPeer peer = MessagesController.getInstance(UserConfig.selectedAccount).getInputPeer((int) dialog_id);
-            if (messageId != 0) {
-                TLRPC.TL_messages_report request = new TLRPC.TL_messages_report();
-                request.peer = peer;
-                request.id.add(messageId);
-                if (i == 0) {
-                    request.reason = new TLRPC.TL_inputReportReasonSpam();
-                } else if (i == 1) {
-                    request.reason = new TLRPC.TL_inputReportReasonViolence();
-                } else if (i == 2) {
-                    request.reason = new TLRPC.TL_inputReportReasonPornography();
-                }
-                req = request;
-            } else {
-                TLRPC.TL_account_reportPeer request = new TLRPC.TL_account_reportPeer();
-                request.peer = peer;
-                if (i == 0) {
-                    request.reason = new TLRPC.TL_inputReportReasonSpam();
-                } else if (i == 1) {
-                    request.reason = new TLRPC.TL_inputReportReasonViolence();
-                } else if (i == 2) {
-                    request.reason = new TLRPC.TL_inputReportReasonPornography();
-                }
-                req = request;
-            }
-            ConnectionsManager.getInstance(UserConfig.selectedAccount).sendRequest(req, (response, error) -> {
+                    if (i == 3) {
+                        Bundle args = new Bundle();
+                        args.putLong("dialog_id", dialog_id);
+                        args.putLong("message_id", messageId);
+                        parentFragment.presentFragment(new ReportOtherActivity(args));
+                        return;
+                    }
+                    TLObject req;
+                    TLRPC.InputPeer peer = MessagesController.getInstance(UserConfig.selectedAccount).getInputPeer((int) dialog_id);
+                    if (messageId != 0) {
+                        TLRPC.TL_messages_report request = new TLRPC.TL_messages_report();
+                        request.peer = peer;
+                        request.id.add(messageId);
+                        if (i == 0) {
+                            request.reason = new TLRPC.TL_inputReportReasonSpam();
+                        } else if (i == 1) {
+                            request.reason = new TLRPC.TL_inputReportReasonViolence();
+                        } else if (i == 2) {
+                            request.reason = new TLRPC.TL_inputReportReasonPornography();
+                        }
+                        req = request;
+                    } else {
+                        TLRPC.TL_account_reportPeer request = new TLRPC.TL_account_reportPeer();
+                        request.peer = peer;
+                        if (i == 0) {
+                            request.reason = new TLRPC.TL_inputReportReasonSpam();
+                        } else if (i == 1) {
+                            request.reason = new TLRPC.TL_inputReportReasonViolence();
+                        } else if (i == 2) {
+                            request.reason = new TLRPC.TL_inputReportReasonPornography();
+                        }
+                        req = request;
+                    }
+                    ConnectionsManager.getInstance(UserConfig.selectedAccount).sendRequest(req, (response, error) -> {
 
-            });
-            Toast.makeText(context, LocaleController.getString("ReportChatSent", R.string.ReportChatSent), Toast.LENGTH_SHORT).show();
-        }
+                    });
+                    Toast.makeText(context, LocaleController.getString("ReportChatSent", R.string.ReportChatSent), Toast.LENGTH_SHORT).show();
+                }
         );
         return builder.create();
     }
@@ -794,7 +781,7 @@ public static Dialog createColorSelectDialog(Activity parentActivity, final long
         }
         final LinearLayout linearLayout = new LinearLayout(parentActivity);
         linearLayout.setOrientation(LinearLayout.VERTICAL);
-        String descriptions[] = new String[] {LocaleController.getString("ColorRed", R.string.ColorRed),
+        String descriptions[] = new String[]{LocaleController.getString("ColorRed", R.string.ColorRed),
                 LocaleController.getString("ColorOrange", R.string.ColorOrange),
                 LocaleController.getString("ColorYellow", R.string.ColorYellow),
                 LocaleController.getString("ColorGreen", R.string.ColorGreen),
@@ -803,7 +790,7 @@ public static Dialog createColorSelectDialog(Activity parentActivity, final long
                 LocaleController.getString("ColorViolet", R.string.ColorViolet),
                 LocaleController.getString("ColorPink", R.string.ColorPink),
                 LocaleController.getString("ColorWhite", R.string.ColorWhite)};
-        final int selectedColor[] = new int[] {currentColor};
+        final int selectedColor[] = new int[]{currentColor};
         for (int a = 0; a < 9; a++) {
             RadioColorCell cell = new RadioColorCell(parentActivity);
             cell.setPadding(AndroidUtilities.dp(4), 0, AndroidUtilities.dp(4), 0);
@@ -1387,6 +1374,17 @@ public static AlertDialog createAccountSelectDialog(Activity parentActivity, fin
         return alertDialog[0] = builder.create();
     }
 
+    public static AlertDialog.Builder createUpdateDialog(final Activity parentActivity, DialogInterface.OnClickListener listener) {
+        AlertDialog.Builder builder = new AlertDialog.Builder(parentActivity);
+        builder.setTopImage(R.drawable.ic_app_update, Theme.getColor(Theme.key_dialogTopBackground));
+        builder.setMessage(AndroidUtilities.replaceTags(LocaleController.getString("UpdateAlert", R.string.UpdateAlert)));
+        builder.setPositiveButton(LocaleController.getString("UpdateAlertButton", R.string.UpdateAlertButton), (dialog, which) -> {
+            dialog.dismiss();
+            listener.onClick(dialog, which);
+        });
+        return builder;
+    }
+
 //    public static AlertDialog createExpireDateAlert(final Context context, final boolean month, final int[] result, final Runnable callback) {
 //        AlertDialog.Builder builder = new AlertDialog.Builder(context);
 //        builder.setTitle(month ? LocaleController.getString("PaymentCardExpireDateMonth", R.string.PaymentCardExpireDateMonth) : LocaleController.getString("PaymentCardExpireDateYear", R.string.PaymentCardExpireDateYear));
diff --git a/TMessagesProj/src/main/java/io/bettergram/telegram/ui/DialogsActivity.java b/TMessagesProj/src/main/java/io/bettergram/telegram/ui/DialogsActivity.java
index 3cf60163b..57eda00eb 100644
--- a/TMessagesProj/src/main/java/io/bettergram/telegram/ui/DialogsActivity.java
+++ b/TMessagesProj/src/main/java/io/bettergram/telegram/ui/DialogsActivity.java
@@ -34,7 +34,6 @@
 import android.view.animation.AccelerateDecelerateInterpolator;
 import android.view.animation.DecelerateInterpolator;
 import android.widget.*;
-
 import io.bettergram.adapters.*;
 import io.bettergram.messenger.R;
 import io.bettergram.telegram.messenger.*;
@@ -115,6 +114,8 @@
 
     private DialogsActivityDelegate delegate;
 
+    private AppVersionTask appVersionTask;
+
     public interface DialogsActivityDelegate {
         void didSelectDialogs(DialogsActivity fragment, ArrayList<Long> dids, CharSequence message, boolean param);
     }
@@ -1419,6 +1420,24 @@ public void onResume() {
         if (dialogsSearchAdapter != null) {
             dialogsSearchAdapter.notifyDataSetChanged();
         }
+
+        getAvailableActivity(activity -> {
+            if (appVersionTask != null) {
+                appVersionTask.cancel(true);
+            }
+            appVersionTask = new AppVersionTask(shouldUpdate -> {
+                if (shouldUpdate) {
+                    AlertDialog alertDialog = AlertsCreator.createUpdateDialog(activity, (dialog, which) -> {
+                        AppVersionTask.openAppInPlayStore(activity);
+                    }).create();
+                    alertDialog.setCanceledOnTouchOutside(false);
+                    alertDialog.setCancelable(false);
+                    alertDialog.show();
+                }
+            });
+            appVersionTask.execute();
+        });
+
         if (checkPermission && !onlySelect && Build.VERSION.SDK_INT >= 23) {
             Activity activity = getParentActivity();
             if (activity != null) {
diff --git a/TMessagesProj/src/main/res/drawable/ic_app_update.xml b/TMessagesProj/src/main/res/drawable/ic_app_update.xml
new file mode 100644
index 000000000..63979eb3c
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable/ic_app_update.xml
@@ -0,0 +1,5 @@
+<vector android:height="42dp" android:tint="#FFFFFF"
+    android:viewportHeight="24.0" android:viewportWidth="24.0"
+    android:width="42dp" xmlns:android="http://schemas.android.com/apk/res/android">
+    <path android:fillColor="#FF000000" android:pathData="M17,1.01L7,1c-1.1,0 -2,0.9 -2,2v18c0,1.1 0.9,2 2,2h10c1.1,0 2,-0.9 2,-2L19,3c0,-1.1 -0.9,-1.99 -2,-1.99zM17,19L7,19L7,5h10v14zM16,13h-3L13,8h-2v5L8,13l4,4 4,-4z"/>
+</vector>
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 673739538..e5f8c92f2 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -2612,4 +2612,7 @@
     <string name="please_wait">Please wait…</string>
     <string name="success">Success!</string>
     <string name="please_check_email">Please check your email to confirm your sign up</string>
+
+    <string name="UpdateAlertButton">Update</string>
+    <string name="UpdateAlert">There is a newer version available for download. Please update the app by visiting the Play Store.</string>
 </resources>
