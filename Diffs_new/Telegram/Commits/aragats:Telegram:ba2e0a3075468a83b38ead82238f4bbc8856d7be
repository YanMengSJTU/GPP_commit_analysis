diff --git a/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java b/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
index ed10ae55c..3f43acceb 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/ImageLoader.java
@@ -922,101 +922,7 @@ protected void entryRemoved(boolean evicted, String key, final BitmapDrawable ol
             }
         };
 
-        FileLoader.getInstance().setDelegate(new FileLoader.FileLoaderDelegate() {
-            @Override
-            public void fileUploadProgressChanged(final String location, final float progress, final boolean isEncrypted) {
-                fileProgresses.put(location, progress);
-                long currentTime = System.currentTimeMillis();
-                if (lastProgressUpdateTime == 0 || lastProgressUpdateTime < currentTime - 500) {
-                    lastProgressUpdateTime = currentTime;
-
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.FileUploadProgressChanged, location, progress, isEncrypted);
-                        }
-                    });
-                }
-            }
-
-            @Override
-            public void fileDidUploaded(final String location, final TLRPC.InputFile inputFile, final TLRPC.InputEncryptedFile inputEncryptedFile, final byte[] key, final byte[] iv) {
-                Utilities.stageQueue.postRunnable(new Runnable() {
-                    @Override
-                    public void run() {
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.FileDidUpload, location, inputFile, inputEncryptedFile, key, iv);
-                            }
-                        });
-                        fileProgresses.remove(location);
-                    }
-                });
-            }
-
-            @Override
-            public void fileDidFailedUpload(final String location, final boolean isEncrypted) {
-                Utilities.stageQueue.postRunnable(new Runnable() {
-                    @Override
-                    public void run() {
-                        AndroidUtilities.runOnUIThread(new Runnable() {
-                            @Override
-                            public void run() {
-                                NotificationCenter.getInstance().postNotificationName(NotificationCenter.FileDidFailUpload, location, isEncrypted);
-                            }
-                        });
-                        fileProgresses.remove(location);
-                    }
-                });
-            }
-
-            @Override
-            public void fileDidLoaded(final String location, final File finalFile, final int type) {
-                fileProgresses.remove(location);
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        if (location != null) {
-                            if (MediaController.getInstance().canSaveToGallery() && telegramPath != null && finalFile != null && finalFile.exists() && (location.endsWith(".mp4") || location.endsWith(".jpg"))) {
-                                if (finalFile.toString().startsWith(telegramPath.toString())) {
-                                    AndroidUtilities.addMediaToGallery(finalFile.toString());
-                                }
-                            }
-                        }
-                        ImageLoader.this.fileDidLoaded(location, finalFile, type);
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.FileDidLoaded, location);
-                    }
-                });
-            }
-
-            @Override
-            public void fileDidFailedLoad(final String location, final int canceled) {
-                fileProgresses.remove(location);
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        ImageLoader.this.fileDidFailedLoad(location, canceled);
-                        NotificationCenter.getInstance().postNotificationName(NotificationCenter.FileDidFailedLoad, location, canceled);
-                    }
-                });
-            }
-
-            @Override
-            public void fileLoadProgressChanged(final String location, final float progress) {
-                fileProgresses.put(location, progress);
-                long currentTime = System.currentTimeMillis();
-                if (lastProgressUpdateTime == 0 || lastProgressUpdateTime < currentTime - 500) {
-                    lastProgressUpdateTime = currentTime;
-                    AndroidUtilities.runOnUIThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            NotificationCenter.getInstance().postNotificationName(NotificationCenter.FileLoadProgressChanged, location, progress);
-                        }
-                    });
-                }
-            }
-        });
+        ;
 
         BroadcastReceiver receiver = new BroadcastReceiver() {
             @Override
@@ -1256,19 +1162,11 @@ public BitmapDrawable getImageFromMemory(String key) {
         return memCache.get(key);
     }
 
-    public BitmapDrawable getImageFromMemory(TLObject fileLocation, String httpUrl, String filter) {
-        if (fileLocation == null && httpUrl == null) {
+    public BitmapDrawable getImageFromMemory(String httpUrl, String filter) {
+        if (httpUrl == null) {
             return null;
         }
-        String key = null;
-        if (httpUrl != null) {
-            key = Utilities.MD5(httpUrl);
-        } else {
-            if (fileLocation instanceof TLRPC.FileLocation) {
-                TLRPC.FileLocation location = (TLRPC.FileLocation) fileLocation;
-                key = location.volume_id + "_" + location.local_id;
-            }
-        }
+        String key = Utilities.MD5(httpUrl);
         if (filter != null) {
             key += "@" + filter;
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
index 1bb9d976f..db53780fd 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileLoader.java
@@ -14,19 +14,6 @@
 
 public class FileLoader {
 
-    public interface FileLoaderDelegate {
-        void fileUploadProgressChanged(String location, float progress, boolean isEncrypted);
-
-        void fileDidUploaded(String location, TLRPC.InputFile inputFile, TLRPC.InputEncryptedFile inputEncryptedFile, byte[] key, byte[] iv);
-
-        void fileDidFailedUpload(String location, boolean isEncrypted);
-
-        void fileDidLoaded(String location, File finalFile, int type);
-
-        void fileDidFailedLoad(String location, int state);
-
-        void fileLoadProgressChanged(String location, float progress);
-    }
 
     public static final int MEDIA_DIR_IMAGE = 0;
     public static final int MEDIA_DIR_AUDIO = 1;
@@ -37,8 +24,6 @@
     private HashMap<Integer, File> mediaDirs = null;
     private volatile DispatchQueue fileLoaderQueue = new DispatchQueue("fileUploadQueue");
 
-    private FileLoaderDelegate delegate = null;
-
 
     private static volatile FileLoader Instance = null;
 
@@ -75,35 +60,21 @@ public File getDirectory(int type) {
     }
 
 
-    public void setDelegate(FileLoaderDelegate delegate) {
-        this.delegate = delegate;
-    }
-
-
-    public static File getPathToAttach(TLObject attach, boolean forceCache) {
+    public static File getPathToAttach(TLRPC.PhotoSize attach, boolean forceCache) {
         return getPathToAttach(attach, null, forceCache);
     }
 
-    public static File getPathToAttach(TLObject attach, String ext, boolean forceCache) {
+    public static File getPathToAttach(TLRPC.PhotoSize attach, String ext, boolean forceCache) {
         File dir = null;
         if (forceCache) {
             dir = getInstance().getDirectory(MEDIA_DIR_CACHE);
         } else {
-            if (attach instanceof TLRPC.PhotoSize) {
-                TLRPC.PhotoSize photoSize = (TLRPC.PhotoSize) attach;
-                if (photoSize.location == null || photoSize.location.key != null || photoSize.location.volume_id == Integer.MIN_VALUE && photoSize.location.local_id < 0) {
-                    dir = getInstance().getDirectory(MEDIA_DIR_CACHE);
-                } else {
-                    dir = getInstance().getDirectory(MEDIA_DIR_IMAGE);
-                }
-            } else if (attach instanceof TLRPC.FileLocation) {
-                TLRPC.FileLocation fileLocation = (TLRPC.FileLocation) attach;
-                if (fileLocation.key != null || fileLocation.volume_id == Integer.MIN_VALUE && fileLocation.local_id < 0) {
-                    dir = getInstance().getDirectory(MEDIA_DIR_CACHE);
-                } else {
-                    dir = getInstance().getDirectory(MEDIA_DIR_IMAGE);
-                }
+            if (attach.location == null || attach.location.key != null || attach.location.volume_id == Integer.MIN_VALUE && attach.location.local_id < 0) {
+                dir = getInstance().getDirectory(MEDIA_DIR_CACHE);
+            } else {
+                dir = getInstance().getDirectory(MEDIA_DIR_IMAGE);
             }
+
         }
         if (dir == null) {
             return new File("");
@@ -111,22 +82,15 @@ public static File getPathToAttach(TLObject attach, String ext, boolean forceCac
         return new File(dir, getAttachFileName(attach, ext));
     }
 
-    public static String getAttachFileName(TLObject attach) {
+    public static String getAttachFileName(TLRPC.PhotoSize attach) {
         return getAttachFileName(attach, null);
     }
 
-    public static String getAttachFileName(TLObject attach, String ext) {
-        if (attach instanceof TLRPC.PhotoSize) {
-            TLRPC.PhotoSize photo = (TLRPC.PhotoSize) attach;
-            if (photo.location == null) {
-                return "";
-            }
-            return photo.location.volume_id + "_" + photo.location.local_id + "." + (ext != null ? ext : "jpg");
-        }  else if (attach instanceof TLRPC.FileLocation) {
-            TLRPC.FileLocation location = (TLRPC.FileLocation) attach;
-            return location.volume_id + "_" + location.local_id + "." + (ext != null ? ext : "jpg");
+    public static String getAttachFileName(TLRPC.PhotoSize attach, String ext) {
+        if (attach.location == null) {
+            return "";
         }
-        return "";
+        return attach.location.volume_id + "_" + attach.location.local_id + "." + (ext != null ? ext : "jpg");
     }
 
     public void deleteFiles(final ArrayList<File> files) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
index 7da6fd0bc..cc168e3e5 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/TLRPC.java
@@ -8,42 +8,18 @@
 
 package org.telegram.messenger;
 
-import java.util.ArrayList;
-
 @SuppressWarnings("unchecked")
 public class TLRPC {
 
 
-    public static final int MESSAGE_FLAG_FWD = 4;
-
-
-
-
-
-
-
-
-    public static class InputEncryptedFile extends TLObject {
-        public long id;
-        public long access_hash;
-        public int parts;
-        public int key_fingerprint;
-        public String md5_checksum;
-
-
-    }
-
-
-
-
-
+    // Foursquare classes start
     public static class GeoPoint extends TLObject {
         public double _long;
         public double lat;
 
         public static GeoPoint TLdeserialize(AbsSerializedData stream, int constructor, boolean exception) {
             GeoPoint result = null;
-            switch(constructor) {
+            switch (constructor) {
                 case 0x1117dd5f:
                     result = new TL_geoPointEmpty();
                     break;
@@ -87,58 +63,18 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
 
-
-
-
-
     public static class MessageMedia extends TLObject {
-        public byte[] bytes;
-//        public Video video;
-        public String caption;
-        public Photo photo;
-//        public Audio audio;
         public GeoPoint geo;
         public String title;
         public String address;
         public String provider;
         public String venue_id;
-//        public Document document;
-        public String phone_number;
-        public String first_name;
-        public String last_name;
-        public int user_id;
-//        public WebPage webpage;
         //TODO-aragats
         public String iconUrl;
 
-        public static MessageMedia TLdeserialize(AbsSerializedData stream, int constructor, boolean exception) {
-            MessageMedia result = null;
-            switch(constructor) {
-                case 0x7912b71f:
-                    result = new TL_messageMediaVenue();
-                    break;
-                case 0x56e0d474:
-                    result = new TL_messageMediaGeo();
-                    break;
-            }
-            if (result == null && exception) {
-                throw new RuntimeException(String.format("can't parse magic %x in MessageMedia", constructor));
-            }
-            if (result != null) {
-                result.readParams(stream, exception);
-            }
-            return result;
-        }
     }
 
 
-
-
-
-
-
-
-
     public static class TL_messageMediaVenue extends MessageMedia {
         public static int constructor = 0x7912b71f;
 
@@ -162,14 +98,6 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
 
-
-
-
-
-
-
-
-
     public static class TL_messageMediaGeo extends MessageMedia {
         public static int constructor = 0x56e0d474;
 
@@ -183,6 +111,7 @@ public void serializeToStream(AbsSerializedData stream) {
             geo.serializeToStream(stream);
         }
     }
+    // Foursquare classes end
 
 
     public static class FileLocation extends TLObject {
@@ -195,7 +124,7 @@ public void serializeToStream(AbsSerializedData stream) {
 
         public static FileLocation TLdeserialize(AbsSerializedData stream, int constructor, boolean exception) {
             FileLocation result = null;
-            switch(constructor) {
+            switch (constructor) {
                 case 0x53d69076:
                     result = new TL_fileLocation();
                     break;
@@ -237,33 +166,6 @@ public void serializeToStream(AbsSerializedData stream) {
     }
 
 
-
-
-
-    public static class InputFile extends TLObject {
-        public long id;
-        public int parts;
-        public String name;
-        public String md5_checksum;
-
-
-    }
-
-
-
-    public static class Photo extends TLObject {
-        public long id;
-        public long access_hash;
-        public int user_id;
-        public int date;
-        public GeoPoint geo;
-        public ArrayList<PhotoSize> sizes = new ArrayList<>();
-        public String caption;
-
-    }
-
-
-
     public static class PhotoSize extends TLObject {
         public String type;
         public FileLocation location;
@@ -274,7 +176,7 @@ public void serializeToStream(AbsSerializedData stream) {
 
         public static PhotoSize TLdeserialize(AbsSerializedData stream, int constructor, boolean exception) {
             PhotoSize result = null;
-            switch(constructor) {
+            switch (constructor) {
                 case 0x77bfb61b:
                     result = new TL_photoSize();
                     break;
