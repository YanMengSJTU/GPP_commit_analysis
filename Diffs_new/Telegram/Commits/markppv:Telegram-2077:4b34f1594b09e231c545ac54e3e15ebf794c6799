diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropAreaView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropAreaView.java
index 7809244e4..3ea0bfd91 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropAreaView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropAreaView.java
@@ -13,13 +13,14 @@
 import android.graphics.PorterDuffXfermode;
 import android.graphics.RectF;
 import android.os.Build;
-import androidx.annotation.Keep;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.animation.AccelerateDecelerateInterpolator;
 import android.view.animation.Interpolator;
 
+import androidx.annotation.Keep;
+
 import org.telegram.messenger.AndroidUtilities;
 
 public class CropAreaView extends View {
@@ -49,6 +50,7 @@
 
     private Control activeControl;
     private RectF actualRect = new RectF();
+    private RectF actualAnimRect = new RectF();
     private RectF tempRect = new RectF();
     private int previousX;
     private int previousY;
@@ -65,6 +67,7 @@
 
     AccelerateDecelerateInterpolator interpolator = new AccelerateDecelerateInterpolator();
 
+    private float wheelTop;
     private float sidePadding;
     private float minWidth;
 
@@ -149,7 +152,7 @@ public void setListener(AreaViewListener l) {
         listener = l;
     }
 
-    public void setBitmap(Bitmap bitmap, boolean sideward, boolean fform) {
+    public void setBitmap(Bitmap bitmap, boolean sideward, boolean fform, boolean animated) {
         if (bitmap == null || bitmap.isRecycled()) {
             return;
         }
@@ -166,7 +169,13 @@ public void setBitmap(Bitmap bitmap, boolean sideward, boolean fform) {
             lockAspectRatio = 1.0f;
         }
 
-        setActualRect(aspectRatio);
+        if (animated) {
+            RectF rect = new RectF();
+            calculateRect(rect, aspectRatio);
+            fill(rect, null, true);
+        } else {
+            setActualRect(aspectRatio);
+        }
     }
 
     public void setFreeform(boolean fform) {
@@ -187,30 +196,36 @@ public void setActualRect(RectF rect) {
 
     @Override
     protected void onDraw(Canvas canvas) {
+        final int viewWidth = getWidth();
+        final int viewHeight = getHeight();
+
+        float parentScale = ((ViewGroup) getParent()).getScaleX();
+        final float offscrenDimSize = Math.max(viewWidth, viewHeight) / parentScale;
+
         if (freeform) {
-            int lineThickness = AndroidUtilities.dp(2);
-            int handleSize = AndroidUtilities.dp(16);
-            int handleThickness = AndroidUtilities.dp(3);
+            float lineThickness = AndroidUtilities.dp(2f) / parentScale;
+            float handleSize = AndroidUtilities.dp(16f) / parentScale;
+            float handleThickness = AndroidUtilities.dp(3f) / parentScale;
 
-            int originX = (int) actualRect.left - lineThickness;
-            int originY = (int) actualRect.top - lineThickness;
-            int width = (int) (actualRect.right - actualRect.left) + lineThickness * 2;
-            int height = (int) (actualRect.bottom - actualRect.top) + lineThickness * 2;
+            float originX = actualRect.left - lineThickness;
+            float originY = actualRect.top - lineThickness;
+            float width = (actualRect.right - actualRect.left) + lineThickness * 2;
+            float height = (actualRect.bottom - actualRect.top) + lineThickness * 2;
 
             if (dimVisibile) {
-                canvas.drawRect(0, 0, getWidth(), originY + lineThickness, dimPaint);
-                canvas.drawRect(0, originY + lineThickness, originX + lineThickness, originY + height - lineThickness, dimPaint);
-                canvas.drawRect(originX + width - lineThickness, originY + lineThickness, getWidth(), originY + height - lineThickness, dimPaint);
-                canvas.drawRect(0, originY + height - lineThickness, getWidth(), getHeight(), dimPaint);
+                canvas.drawRect(-offscrenDimSize, -offscrenDimSize, viewWidth + offscrenDimSize, originY + lineThickness, dimPaint);
+                canvas.drawRect(-offscrenDimSize, originY + lineThickness , originX + lineThickness, originY + height - lineThickness, dimPaint);
+                canvas.drawRect(originX + width - lineThickness, originY + lineThickness, viewWidth + offscrenDimSize, originY + height - lineThickness, dimPaint);
+                canvas.drawRect(-offscrenDimSize, originY + height - lineThickness, viewWidth + offscrenDimSize, viewHeight + offscrenDimSize, dimPaint);
             }
 
             if (!frameVisible) {
                 return;
             }
 
-            int inset = handleThickness - lineThickness;
-            int gridWidth = width - handleThickness * 2;
-            int gridHeight = height - handleThickness * 2;
+            float inset = handleThickness - lineThickness;
+            float gridWidth = width - handleThickness * 2f;
+            float gridHeight = height - handleThickness * 2f;
 
             GridType type = gridType;
             if (type == GridType.NONE && gridProgress > 0)
@@ -274,10 +289,10 @@ protected void onDraw(Canvas canvas) {
 
                 }
             }
-            canvas.drawRect(0, 0, getWidth(), (int) actualRect.top, dimPaint);
+            canvas.drawRect(0, 0, viewWidth, (int) actualRect.top, dimPaint);
             canvas.drawRect(0, (int) actualRect.top, (int) actualRect.left, (int) actualRect.bottom, dimPaint);
-            canvas.drawRect((int) actualRect.right, (int) actualRect.top, getWidth(), (int) actualRect.bottom, dimPaint);
-            canvas.drawRect(0, (int) actualRect.bottom, getWidth(), getHeight(), dimPaint);
+            canvas.drawRect((int) actualRect.right, (int) actualRect.top, viewWidth, (int) actualRect.bottom, dimPaint);
+            canvas.drawRect(0, (int) actualRect.bottom, viewWidth, viewHeight, dimPaint);
             canvas.drawBitmap(circleBitmap, (int) actualRect.left, (int) actualRect.top, null);
         }
     }
@@ -360,11 +375,13 @@ public void fill(final RectF targetRect, Animator scaleAnimator, boolean animate
                 animator = null;
             }
 
+            actualAnimRect.set(targetRect);
+
             AnimatorSet set = new AnimatorSet();
-            animator = set;
             set.setDuration(300);
+            animator = set;
 
-            Animator animators[] = new Animator[5];
+            Animator animators[] = new Animator[scaleAnimator == null ? 4 : 5];
             animators[0] = ObjectAnimator.ofFloat(this, "cropLeft", targetRect.left);
             animators[0].setInterpolator(interpolator);
             animators[1] = ObjectAnimator.ofFloat(this, "cropTop", targetRect.top);
@@ -373,8 +390,11 @@ public void fill(final RectF targetRect, Animator scaleAnimator, boolean animate
             animators[2].setInterpolator(interpolator);
             animators[3] = ObjectAnimator.ofFloat(this, "cropBottom", targetRect.bottom);
             animators[3].setInterpolator(interpolator);
-            animators[4] = scaleAnimator;
-            animators[4].setInterpolator(interpolator);
+
+            if (scaleAnimator != null) {
+                animators[4] = scaleAnimator;
+                animators[4].setInterpolator(interpolator);
+            }
 
             set.playTogether(animators);
             set.addListener(new AnimatorListenerAdapter() {
@@ -459,6 +479,18 @@ public float getCropHeight() {
         return actualRect.bottom - actualRect.top;
     }
 
+    public float getCropWidthAnimEndValue() {
+        if (animator != null) {
+            return actualAnimRect.right - actualAnimRect.left;
+        } else return getCropWidth();
+    }
+
+    public float getCropHeightAnimEndValue() {
+        if (animator != null) {
+            return actualAnimRect.bottom - actualAnimRect.top;
+        } else return getCropHeight();
+    }
+
     public RectF getTargetRectToFill() {
         RectF rect = new RectF();
         calculateRect(rect, getAspectRatio());
@@ -666,13 +698,19 @@ public boolean onTouchEvent(MotionEvent event) {
                     break;
             }
 
+
+            if (wheelTop > 0f && event.getRawY() >= wheelTop) {
+                tempRect.left = actualRect.left;
+                tempRect.right = actualRect.right;
+            }
+
             if (tempRect.left < sidePadding) {
                 if (lockAspectRatio > 0) {
                     tempRect.bottom = tempRect.top + (tempRect.right - sidePadding) / lockAspectRatio;
                 }
-                tempRect.left = sidePadding;
+                if (wheelTop == 0f) tempRect.left = sidePadding;
             } else if (tempRect.right > getWidth() - sidePadding) {
-                tempRect.right = getWidth() - sidePadding;
+                if (wheelTop == 0f) tempRect.right = getWidth() - sidePadding;
                 if (lockAspectRatio > 0) {
                     tempRect.bottom = tempRect.top + tempRect.width() / lockAspectRatio;
                 }
@@ -684,9 +722,9 @@ public boolean onTouchEvent(MotionEvent event) {
                 if (lockAspectRatio > 0) {
                     tempRect.right = tempRect.left + (tempRect.bottom - topPadding) * lockAspectRatio;
                 }
-                tempRect.top = topPadding;
+                if (wheelTop == 0f) tempRect.top = topPadding;
             } else if (tempRect.bottom > getHeight() - finalBottomPadidng) {
-                tempRect.bottom = getHeight() - finalBottomPadidng;
+                if (wheelTop == 0f) tempRect.bottom = getHeight() - finalBottomPadidng;
                 if (lockAspectRatio > 0) {
                     tempRect.right = tempRect.left + tempRect.height() * lockAspectRatio;
                 }
@@ -744,4 +782,8 @@ private void constrainRectByHeight(RectF rect, float aspectRatio) {
     public void getCropRect(RectF rect) {
         rect.set(actualRect);
     }
+
+    public void setWheelTop(float customHeight) {
+        this.wheelTop = customHeight;
+    }
 }
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropRotationWheel.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropRotationWheel.java
index 06ad4408f..f5d0e2a0c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropRotationWheel.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropRotationWheel.java
@@ -21,6 +21,13 @@
 
 public class CropRotationWheel extends FrameLayout {
 
+    private int dp2p5 = AndroidUtilities.dp(2.5f);
+    private int dp22 = AndroidUtilities.dp(22);
+    private int dp2 = AndroidUtilities.dp(2);
+    private int dp70 = AndroidUtilities.dp(70);
+    private int dp16= AndroidUtilities.dp(16);
+    private int dp12 = AndroidUtilities.dp(12);
+
     public interface RotationWheelListener {
         void onStart();
         void onChange(float angle);
@@ -39,6 +46,7 @@
     private ImageView aspectRatioButton;
     private TextView degreesLabel;
 
+    protected float actualRotation;
     protected float rotation;
     private RectF tempRect;
     private float prevX;
@@ -87,7 +95,9 @@ public CropRotationWheel(Context context) {
 
         degreesLabel = new TextView(context);
         degreesLabel.setTextColor(Color.WHITE);
-        addView(degreesLabel, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.TOP | Gravity.CENTER_HORIZONTAL));
+        degreesLabel.setGravity(Gravity.CENTER);
+        LayoutParams lp = new LayoutParams(LayoutParams.MATCH_PARENT, AndroidUtilities.dp(18));
+        addView(degreesLabel, lp);
 
         setWillNotDraw(false);
 
@@ -112,13 +122,20 @@ public void setListener(RotationWheelListener listener) {
         rotationListener = listener;
     }
 
-    public void setRotation(float rotation, boolean animated) {
+    @Override
+    public float getRotation() {
+        return rotation;
+    }
+
+    public void setRotation(float rotation, boolean silent) {
         this.rotation = rotation;
         float value = this.rotation;
-        if (Math.abs(value) < 0.1 - 0.001)
+        if (Math.abs(value) < 0.1f - 0.001f)
             value = Math.abs(value);
         degreesLabel.setText(String.format("%.1fº", value));
-
+        if (!silent && rotationListener != null) {
+            rotationListener.onChange(this.rotation);
+        }
         invalidate();
     }
 
@@ -146,15 +163,12 @@ public boolean onTouchEvent(MotionEvent ev) {
             float newAngle = this.rotation + (float)(delta / AndroidUtilities.density / Math.PI / 1.65f);
             newAngle = Math.max(-MAX_ANGLE, Math.min(MAX_ANGLE, newAngle));
 
-            if (Math.abs(newAngle - this.rotation) > 0.001) {
-                if (Math.abs(newAngle) < 0.05)
-                    newAngle = 0;
+            if (Math.abs(newAngle - this.rotation) > 0.001f) {
+                if (Math.abs(newAngle) < 0.5f)
+                    newAngle = 0f;
 
                 setRotation(newAngle, false);
 
-                if (rotationListener != null)
-                    rotationListener.onChange(this.rotation);
-
                 prevX = x;
             }
         }
@@ -166,55 +180,56 @@ public boolean onTouchEvent(MotionEvent ev) {
     protected void onDraw(Canvas canvas) {
         super.onDraw(canvas);
 
-        int width = getWidth();
-        int height = getHeight();
+        float widthF = getWidth();
+        float heightF = getHeight();
 
-        float angle = -rotation * 2;
+        float angle = -rotation * 2f;
         float delta = angle % DELTA_ANGLE;
         int segments = (int)Math.floor(angle / DELTA_ANGLE);
 
         for (int i = 0; i < 16; i++) {
             Paint paint = whitePaint;
-            int a = i;
-            if (a < segments || (a == 0 && delta < 0))
-                paint = bluePaint;
 
-            drawLine(canvas, a, delta, width, height, (a == segments || a == 0 && segments == - 1), paint);
+            int a = i;
+            if (a < segments || (a == 0 && delta < 0)) paint = bluePaint;
+            drawLine(canvas, a, delta, widthF, heightF, (a == segments || a == 0 && segments == - 1), paint);
 
             if (i != 0) {
                 a = -i;
                 paint = a > segments ? bluePaint : whitePaint;
-                drawLine(canvas, a, delta, width, height, a == segments + 1, paint);
+                drawLine(canvas, a, delta, widthF, heightF, a == segments + 1, paint);
             }
         }
 
         bluePaint.setAlpha(255);
 
-        tempRect.left = (width - AndroidUtilities.dp(2.5f)) / 2;
-        tempRect.top = (height - AndroidUtilities.dp(22)) / 2;
-        tempRect.right = (width + AndroidUtilities.dp(2.5f)) / 2;
-        tempRect.bottom =  (height + AndroidUtilities.dp(22)) / 2;
-        canvas.drawRoundRect(tempRect, AndroidUtilities.dp(2), AndroidUtilities.dp(2), bluePaint);
+        tempRect.left = (widthF - dp2p5) / 2f;
+        tempRect.top = (heightF - dp22) / 2f;
+        tempRect.right = (widthF + dp2p5) / 2f;
+        tempRect.bottom =  (heightF + dp22) / 2f;
+        canvas.drawRoundRect(tempRect, dp2, dp2, bluePaint);
     }
 
-    protected void drawLine(Canvas canvas, int i, float delta, int width, int height, boolean center, Paint paint) {
-        int radius = (int)(width / 2.0f - AndroidUtilities.dp(70));
+    protected void drawLine(Canvas canvas, int i, float delta, float width, float height, boolean center, Paint paint) {
+        float radius = width / 2.0f - dp70;
 
         float angle = 90 - (i * DELTA_ANGLE + delta);
-        int val = (int)(radius * Math.cos(Math.toRadians(angle)));
-        int x = width / 2 + val;
+        float val = radius * (float) Math.cos(Math.toRadians(angle));
+        float x = width / 2f + val;
 
-        float f = Math.abs(val) / (float)radius;
+        float f = Math.abs(val) / radius;
         int alpha = Math.min(255, Math.max(0, (int)((1.0f - f * f) * 255)));
 
-        if (center)
-            paint = bluePaint;
+        if (center) paint = bluePaint;
+
+        float w = center ? 4f : 2f;
+        float h = center ? dp16 : dp12;
 
         paint.setAlpha(alpha);
+        paint.setStrokeWidth(w);
 
-        int w = center ? 4 : 2;
-        int h = center ? AndroidUtilities.dp(16) : AndroidUtilities.dp(12);
+        canvas.drawLine(x, (height - h) / 2f, x, (height + h) / 2f, paint);
 
-        canvas.drawRect(x - w / 2, (height - h) / 2, x + w / 2, (height + h) / 2, paint);
+        //canvas.drawRect(x - w / 2, (height - h) / 2, x + w / 2, (height + h) / 2, paint);
     }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropView.java
index e3a902e37..bb14c84c9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/Crop/CropView.java
@@ -4,6 +4,7 @@
 import android.animation.AnimatorListenerAdapter;
 import android.animation.ValueAnimator;
 import android.content.Context;
+import android.content.res.Configuration;
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.graphics.Matrix;
@@ -12,11 +13,13 @@
 import android.graphics.RectF;
 import android.os.Build;
 import android.view.MotionEvent;
-import android.view.View;
+import android.view.ViewGroup;
 import android.view.ViewTreeObserver;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
 
+import androidx.core.view.ViewCompat;
+
 import org.telegram.messenger.AndroidUtilities;
 import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.R;
@@ -29,8 +32,6 @@
     private static final int RESULT_SIDE = 1280;
     private static final float MAX_SCALE = 30.0f;
 
-    private View backView;
-
     private CropAreaView areaView;
     private ImageView imageView;
     private Matrix presentationMatrix;
@@ -46,9 +47,13 @@
     private boolean freeform;
     private float bottomPadding;
 
+    private boolean isMoved;
     private boolean animating;
     private CropGestureDetector detector;
 
+    private float scaleAnimEndValue;
+    private float orientationAnimEndValue;
+
     private boolean hasAspectRatioDialog;
 
     private class CropState {
@@ -169,13 +174,19 @@ private void reset(CropAreaView areaView, float orient, boolean freeform) {
         }
 
         private void updateMinimumScale() {
+            updateMinimumScale(false);
+        }
+
+        private void updateMinimumScale(boolean animValue) {
             float w = (orientation + baseRotation) % 180 != 0 ? height : width;
             float h = (orientation + baseRotation) % 180 != 0 ? width : height;
+            float cropWidth = animValue ? areaView.getCropWidthAnimEndValue() : areaView.getCropWidth();
+            float cropHeight = animValue ? areaView.getCropHeightAnimEndValue() : areaView.getCropHeight();
             if (freeform) {
-                minimumScale = areaView.getCropWidth() / w;
+                minimumScale = cropWidth / w;
             } else {
-                float wScale = areaView.getCropWidth() / w;
-                float hScale = areaView.getCropHeight() / h;
+                float wScale = cropWidth / w;
+                float hScale = cropHeight / h;
                 minimumScale = Math.max(wScale, hScale);
             }
         }
@@ -211,11 +222,6 @@ public CropView(Context context) {
         tempMatrix = new Matrix();
         animating = false;
 
-        backView = new View(context);
-        backView.setBackgroundColor(0xff000000);
-        backView.setVisibility(INVISIBLE);
-        addView(backView);
-
         imageView = new ImageView(context);
         imageView.setDrawingCacheEnabled(true);
         imageView.setScaleType(ImageView.ScaleType.MATRIX);
@@ -259,13 +265,14 @@ public void setBitmap(Bitmap b, int rotation, boolean fform, boolean same) {
                 imageView.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
                     @Override
                     public boolean onPreDraw() {
-                        reset();
+                        reset(true);
                         imageView.getViewTreeObserver().removeOnPreDrawListener(this);
                         return false;
                     }
                 });
             } else {
                 state.updateBitmap(bitmap, rotation);
+                resetOrientation(false);
             }
             imageView.setImageBitmap(bitmap);
         }
@@ -277,21 +284,12 @@ public void willShow() {
         areaView.invalidate();
     }
 
-    public void hideBackView() {
-        backView.setVisibility(INVISIBLE);
-    }
-
-    public void showBackView() {
-        backView.setVisibility(VISIBLE);
-    }
-
     public void setFreeform(boolean fform) {
         areaView.setFreeform(fform);
         freeform = fform;
     }
 
     public void show() {
-        backView.setVisibility(VISIBLE);
         imageView.setVisibility(VISIBLE);
         areaView.setDimVisibility(true);
         areaView.setFrameVisibility(true);
@@ -299,22 +297,69 @@ public void show() {
     }
 
     public void hide() {
-        backView.setVisibility(INVISIBLE);
         imageView.setVisibility(INVISIBLE);
         areaView.setDimVisibility(false);
         areaView.setFrameVisibility(false);
         areaView.invalidate();
     }
 
+    private float lerp(float a, float b, float f) {
+        return a + f * (b - a);
+    }
+
     public void reset() {
-        areaView.resetAnimator();
+        reset(false);
+    }
 
-        areaView.setBitmap(bitmap, state.getBaseRotation() % 180 != 0, freeform);
-        areaView.setLockedAspectRatio(freeform ? 0.0f : 1.0f);
-        state.reset(areaView, 0, freeform);
-        areaView.getCropRect(initialAreaRect);
-        updateMatrix();
+    public void reset(boolean initiation) {
+        if (initiation) {
+            resetOrientation(false);
+            areaView.resetAnimator();
+            areaView.setBitmap(bitmap, state.getBaseRotation() % 180f != 0f, freeform, false);
+            areaView.setLockedAspectRatio(freeform ? 0.0f : 1.0f);
+            state.reset(areaView, 0f, freeform);
+            areaView.getCropRect(initialAreaRect);
+            updateMatrix();
+        } else {
+            resetOrientation(true);
+
+            areaView.resetAnimator();
+            areaView.setBitmap(bitmap, state.getBaseRotation() % 180f != 0f, freeform, true);
+            areaView.setLockedAspectRatio(freeform ? 0.0f : 1.0f);
+
+            float[] startValues = new float[9];
+            state.matrix.getValues(startValues);
+
+            state.updateMinimumScale(true);
+
+            tempMatrix.reset();
+            tempMatrix.postScale(state.minimumScale, state.minimumScale);
+            float[] endValues = new float[9];
+            tempMatrix.getValues(endValues);
+
+            float[] values = new float[9];
+            ValueAnimator animator = ValueAnimator.ofFloat(0f, 1f);
+            animator.setDuration(300);
+            animator.addUpdateListener(a -> {
+                float fraction = a.getAnimatedFraction();
+                for (int i = 0; i < 9; i++) {
+                    values[i] = lerp(startValues[i], endValues[i], fraction);
+                }
+                state.matrix.setValues(values);
+                updateMatrix();
+            });
+            animator.addListener(new AnimatorListenerAdapter() {
+                @Override
+                public void onAnimationEnd(Animator animation) {
+                    state.reset(areaView, 0f, freeform);
+                    areaView.getCropRect(initialAreaRect);
+                    updateMatrix();
+                }
+            });
+            animator.start();
+        }
 
+        isMoved = false;
         resetRotationStartScale();
 
         if (listener != null) {
@@ -571,30 +616,95 @@ public void onAnimationEnd(Animator animation) {
         }
     }
 
-    public void rotate90Degrees() {
-        if (state == null) {
-            return;
-        }
-        areaView.resetAnimator();
-
-        resetRotationStartScale();
-
-        float orientation = (state.getOrientation() - state.getBaseRotation() - 90.0f) % 360;
+    @Override
+    protected void onConfigurationChanged(Configuration newConfig) {
+        imageView.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
+            @Override
+            public boolean onPreDraw() {
+                fitViewScale(false, false);
+                imageView.getViewTreeObserver().removeOnPreDrawListener(this);
+                return false;
+            }
+        });
+    }
 
-        boolean fform = freeform;
-        if (freeform && areaView.getLockAspectRatio() > 0) {
-            areaView.setLockedAspectRatio(1.0f / areaView.getLockAspectRatio());
-            areaView.setActualRect(areaView.getLockAspectRatio());
-            fform = false;
+    private void ensurePivot() {
+        float statusBarHeight = (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0f);
+        float actualHeight = getHeight() - AndroidUtilities.dp(64f) - statusBarHeight;
+        setPivotX(getWidth() / 2f);
+        setPivotY(statusBarHeight + actualHeight / 2f);
+    }
+
+    private void fitViewScale(boolean animate, boolean startAnim) {
+        if (orientationAnimEndValue % 180f != 0) {
+            float statusBarHeight = (Build.VERSION.SDK_INT >= 21 ? AndroidUtilities.statusBarHeight : 0f);
+            float actualHeight = getHeight() - AndroidUtilities.dp(64f) - statusBarHeight - AndroidUtilities.dp(32f);
+            float actualWidth = getWidth() - AndroidUtilities.dp(32f);
+            scaleAnimEndValue = Math.min(actualWidth / areaView.getCropHeightAnimEndValue(),
+                    actualHeight / areaView.getCropWidthAnimEndValue());
+        } else scaleAnimEndValue = 1f;
+
+        areaView.setWheelTop(orientationAnimEndValue % 180 != 0 ? getHeight() - AndroidUtilities.dp(64f) - AndroidUtilities.dp(16f) : 0f);
+
+        ensurePivot();
+        if (animate && startAnim) {
+            animate().setDuration(300)
+                    .scaleX(scaleAnimEndValue)
+                    .scaleY(scaleAnimEndValue)
+                    .start();
+        } else if (!animate) {
+            setScaleX(scaleAnimEndValue);
+            setScaleY(scaleAnimEndValue);
+        }
+    }
+
+    private void startOrientationAnim() {
+        ensurePivot();
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
+            animate().setDuration(300)
+                    .scaleX(scaleAnimEndValue)
+                    .scaleY(scaleAnimEndValue)
+                    .rotation(orientationAnimEndValue)
+                    .setUpdateListener(a -> areaView.invalidate())
+                    .start();
         } else {
-            areaView.setBitmap(bitmap, (orientation + state.getBaseRotation()) % 180 != 0, freeform);
+            animate().setDuration(300)
+                    .scaleX(scaleAnimEndValue)
+                    .scaleY(scaleAnimEndValue)
+                    .rotation(orientationAnimEndValue)
+                    .withEndAction(() -> areaView.invalidate())
+                    .start();
+        }
+    }
+
+    private void resetOrientation(boolean animate) {
+        areaView.setWheelTop(0f);
+        scaleAnimEndValue = 1f;
+        if (animate) {
+            final float angle = orientationAnimEndValue % 360f;
+            orientationAnimEndValue -= (angle == -270f) ? 90f : angle;
+            startOrientationAnim();
+        } else {
+            ensurePivot();
+            orientationAnimEndValue = 0f;
+            setScaleX(scaleAnimEndValue);
+            setScaleY(scaleAnimEndValue);
+            super.setRotation(orientationAnimEndValue);
         }
+    }
 
-        state.reset(areaView, orientation, fform);
-        updateMatrix();
+    public void toggleOrientation() {
+        if (!ViewCompat.isLaidOut(this)) return;
+
+        orientationAnimEndValue -= 90f;
+
+        fitViewScale(true, false);
+        startOrientationAnim();
 
-        if (listener != null)
-            listener.onChange(orientation == 0 && areaView.getLockAspectRatio() == 0);
+        if (listener != null) {
+            listener.onChange(orientationAnimEndValue % 360f == 0f && state.rotation == 0f &&
+                    areaView.getLockAspectRatio() == 0f && !isMoved);
+        }
     }
 
     @Override
@@ -622,6 +732,11 @@ public boolean onTouchEvent(MotionEvent event) {
         return result;
     }
 
+    @SuppressWarnings("unused")
+    public boolean pointInView(float localX, float localY, float slop) {
+        return true; // take all unhandled touches from parent
+    }
+
     @Override
     public boolean onInterceptTouchEvent(MotionEvent ev) {
         return true;
@@ -631,7 +746,7 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
     public void onAreaChangeBegan() {
         areaView.getCropRect(previousAreaRect);
         resetRotationStartScale();
-
+        isMoved = true;
         if (listener != null) {
             listener.onChange(false);
         }
@@ -655,6 +770,7 @@ public void onAreaChange() {
     public void onAreaChangeEnded() {
         areaView.setGridType(CropAreaView.GridType.NONE, true);
         fillAreaView(areaView.getTargetRectToFill(), false);
+        fitViewScale(true, true);
     }
 
     public void onDrag(float dx, float dy) {
@@ -727,7 +843,7 @@ public void setRotation(float angle) {
     }
 
     public Bitmap getResult() {
-        if (state == null || !state.hasChanges() && state.getBaseRotation() < EPSILON && freeform) {
+        if ((state == null || !state.hasChanges() && state.getBaseRotation() < EPSILON && freeform) && orientationAnimEndValue % 360f == 0) {
             return bitmap;
         }
 
@@ -752,7 +868,11 @@ public Bitmap getResult() {
         matrix.postTranslate(width / 2, height / 2);
 
         new Canvas(resultBitmap).drawBitmap(bitmap, matrix, new Paint(FILTER_BITMAP_FLAG));
-        return resultBitmap;
+
+        Matrix orientationMatrix = new Matrix();
+        orientationMatrix.postRotate(orientationAnimEndValue);
+        return Bitmap.createBitmap(resultBitmap, 0, 0, resultBitmap.getWidth(),
+                resultBitmap.getHeight(), orientationMatrix, true);
     }
 
     private void setLockedAspectRatio(float aspectRatio) {
@@ -760,6 +880,7 @@ private void setLockedAspectRatio(float aspectRatio) {
         RectF targetRect = new RectF();
         areaView.calculateRect(targetRect, aspectRatio);
         fillAreaView(targetRect, true);
+        fitViewScale(true, true);
 
         if (listener != null) {
             listener.onChange(false);
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoCropView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoCropView.java
index 0ecab1ebd..537d7cb8a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoCropView.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PhotoCropView.java
@@ -8,10 +8,13 @@
 
 package org.telegram.ui.Components;
 
+import android.animation.ValueAnimator;
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.os.Build;
 import android.view.Gravity;
+import android.view.View;
+import android.view.ViewGroup;
 import android.widget.FrameLayout;
 
 import org.telegram.messenger.AndroidUtilities;
@@ -27,13 +30,22 @@
     private PhotoCropViewDelegate delegate;
     private boolean showOnSetBitmap;
 
+    private View backView;
     private CropView cropView;
     private CropRotationWheel wheelView;
 
     public PhotoCropView(Context context) {
         super(context);
 
+        setClipChildren(false);
+
+        backView = new View(context);
+        backView.setBackgroundColor(0xff000000);
+        backView.setVisibility(INVISIBLE);
+        addView(backView);
+
         cropView = new CropView(getContext());
+        cropView.setClipChildren(false);
         cropView.setListener(new CropView.CropViewListener() {
             @Override
             public void onChange(boolean reset) {
@@ -51,6 +63,7 @@ public void onAspectLock(boolean enabled) {
         addView(cropView);
 
         wheelView = new CropRotationWheel(getContext());
+        // wheelView.setBackgroundColor(Color.BLACK);
         wheelView.setListener(new CropRotationWheel.RotationWheelListener() {
             @Override
             public void onStart() {
@@ -77,17 +90,14 @@ public void aspectRatioPressed() {
 
             @Override
             public void rotate90Pressed() {
-                rotate();
+                toggleOrientation();
             }
         });
         addView(wheelView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER | Gravity.BOTTOM, 0, 0, 0, 0));
     }
 
-    public void rotate() {
-        if (wheelView != null) {
-            wheelView.reset();
-        }
-        cropView.rotate90Degrees();
+    public void toggleOrientation() {
+        cropView.toggleOrientation();
     }
 
     public void setBitmap(Bitmap bitmap, int rotation, boolean freeform, boolean update) {
@@ -109,9 +119,19 @@ public boolean isReady() {
         return cropView.isReady();
     }
 
+    private ValueAnimator rotationAnimator = null;
+
     public void reset() {
-        wheelView.reset();
         cropView.reset();
+        if (rotationAnimator == null) {
+            rotationAnimator = ValueAnimator.ofFloat(wheelView.getRotation(), 0f);
+            rotationAnimator.addUpdateListener(a -> wheelView.setRotation((Float) a.getAnimatedValue(), true));
+            rotationAnimator.setDuration(300);
+        } else {
+            rotationAnimator.cancel();
+            rotationAnimator.setFloatValues(wheelView.getRotation(), 0f);
+        }
+        rotationAnimator.start();
     }
 
     public void onAppear() {
@@ -123,11 +143,11 @@ public void setAspectRatio(float ratio) {
     }
 
     public void hideBackView() {
-        cropView.hideBackView();
+        backView.setVisibility(INVISIBLE);
     }
 
     public void showBackView() {
-        cropView.showBackView();
+        backView.setVisibility(VISIBLE);
     }
 
     public void setFreeform(boolean freeform) {
@@ -135,6 +155,9 @@ public void setFreeform(boolean freeform) {
     }
 
     public void onAppeared() {
+        if (backView != null) {
+            backView.setVisibility(VISIBLE);
+        }
         if (cropView != null) {
             cropView.show();
         } else {
@@ -143,6 +166,9 @@ public void onAppeared() {
     }
 
     public void onDisappear() {
+        if (backView != null) {
+            backView.setVisibility(INVISIBLE);
+        }
         if (cropView != null) {
             cropView.hide();
         }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
index 933d6ae5d..c4532ebd7 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PhotoViewer.java
@@ -40,14 +40,6 @@
 import android.os.Bundle;
 import android.os.SystemClock;
 import android.provider.Settings;
-import androidx.annotation.Keep;
-import androidx.annotation.NonNull;
-import androidx.core.content.FileProvider;
-import androidx.recyclerview.widget.DefaultItemAnimator;
-import androidx.recyclerview.widget.LinearLayoutManager;
-import androidx.recyclerview.widget.LinearSmoothScrollerEnd;
-import androidx.recyclerview.widget.RecyclerView;
-
 import android.text.Layout;
 import android.text.Selection;
 import android.text.Spannable;
@@ -86,11 +78,20 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
+import androidx.annotation.Keep;
+import androidx.annotation.NonNull;
+import androidx.core.content.FileProvider;
+import androidx.recyclerview.widget.DefaultItemAnimator;
+import androidx.recyclerview.widget.LinearLayoutManager;
+import androidx.recyclerview.widget.LinearSmoothScrollerEnd;
+import androidx.recyclerview.widget.RecyclerView;
+
 import com.google.android.exoplayer2.C;
 import com.google.android.exoplayer2.ExoPlayer;
 import com.google.android.exoplayer2.ui.AspectRatioFrameLayout;
 
 import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
 import org.telegram.messenger.Bitmaps;
 import org.telegram.messenger.BringAppForegroundService;
 import org.telegram.messenger.BuildConfig;
@@ -99,38 +100,38 @@
 import org.telegram.messenger.ContactsController;
 import org.telegram.messenger.DataQuery;
 import org.telegram.messenger.Emoji;
+import org.telegram.messenger.FileLoader;
+import org.telegram.messenger.FileLog;
 import org.telegram.messenger.ImageLoader;
 import org.telegram.messenger.ImageLocation;
+import org.telegram.messenger.ImageReceiver;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MediaController;
+import org.telegram.messenger.MessageObject;
+import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.MessagesStorage;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.R;
 import org.telegram.messenger.SecureDocument;
 import org.telegram.messenger.SendMessagesHelper;
 import org.telegram.messenger.SharedConfig;
+import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.UserObject;
+import org.telegram.messenger.Utilities;
 import org.telegram.messenger.VideoEditedInfo;
 import org.telegram.messenger.WebFile;
-import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.FileLoader;
-import org.telegram.messenger.FileLog;
-import org.telegram.messenger.LocaleController;
-import org.telegram.messenger.MediaController;
-import org.telegram.messenger.MessagesController;
-import org.telegram.messenger.NotificationCenter;
-import org.telegram.messenger.R;
 import org.telegram.tgnet.ConnectionsManager;
 import org.telegram.tgnet.TLObject;
 import org.telegram.tgnet.TLRPC;
-import org.telegram.messenger.UserConfig;
-import org.telegram.messenger.MessageObject;
-import org.telegram.messenger.Utilities;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.ActionBarMenu;
+import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.ActionBar.ActionBarMenuSubItem;
 import org.telegram.ui.ActionBar.AlertDialog;
 import org.telegram.ui.ActionBar.BottomSheet;
 import org.telegram.ui.ActionBar.SimpleTextView;
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Adapters.MentionsAdapter;
-import org.telegram.ui.ActionBar.ActionBar;
-import org.telegram.ui.ActionBar.ActionBarMenu;
-import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.Cells.CheckBoxCell;
 import org.telegram.ui.Cells.PhotoPickerPhotoCell;
 import org.telegram.ui.Components.AnimatedFileDrawable;
@@ -139,7 +140,6 @@
 import org.telegram.ui.Components.ChatAttachAlert;
 import org.telegram.ui.Components.CheckBox;
 import org.telegram.ui.Components.ClippingImageView;
-import org.telegram.messenger.ImageReceiver;
 import org.telegram.ui.Components.GroupedPhotosListView;
 import org.telegram.ui.Components.LayoutHelper;
 import org.telegram.ui.Components.NumberPicker;
@@ -2590,7 +2590,7 @@ public void didStopDragging() {
             if (photoCropView == null) {
                 return;
             }
-            photoCropView.rotate();
+            photoCropView.toggleOrientation();
         });
         rotateItem.setContentDescription(LocaleController.getString("AccDescrRotate", R.string.AccDescrRotate));
 
