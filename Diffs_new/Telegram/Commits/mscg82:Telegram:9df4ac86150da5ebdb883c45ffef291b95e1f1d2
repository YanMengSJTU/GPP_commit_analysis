diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index d0a742de8..7cd45a5b4 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -3,7 +3,7 @@ buildscript {
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:0.9.+'
+        classpath 'com.android.tools.build:gradle:0.10.+'
     }
 }
 apply plugin: 'android'
@@ -25,7 +25,7 @@ dependencies {
 
 android {
     compileSdkVersion 19
-    buildToolsVersion '19.0.3'
+    buildToolsVersion '19.1.0'
 
     aaptOptions.useAaptPngCruncher = true
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
index 2ea99793e..e5d03df77 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ConnectionsManager.java
@@ -517,7 +517,7 @@ void recreateSession(long sessionId, Datacenter datacenter) {
     }
 
     long getNewSessionId() {
-        long newSessionId = MessagesController.random.nextLong();
+        long newSessionId = Utilities.random.nextLong();
         return isDebugSession ? (0xabcd000000000000L | (newSessionId & 0x0000ffffffffffffL)) : newSessionId;
     }
 
@@ -704,7 +704,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                         if (existing == null) {
                             existing = new Datacenter();
                             existing.datacenterId = datacenterDesc.id;
-                            existing.authSessionId = MessagesController.random.nextLong();
+                            existing.authSessionId = Utilities.random.nextLong();
                             datacentersArr.add(existing);
                             datacenterMap.put(existing.datacenterId, existing);
                         }
@@ -1226,7 +1226,7 @@ private void processRequestQueue(int requestClass, int _datacenterId) {
                             break;
                         }
                     }
-                    Datacenter newDc = allDc.get(Math.abs(MessagesController.random.nextInt()) % allDc.size());
+                    Datacenter newDc = allDc.get(Math.abs(Utilities.random.nextInt()) % allDc.size());
                     request.runningDatacenterId = newDc.datacenterId;
                 }
             }
@@ -1761,7 +1761,7 @@ ByteBufferDesc createConnectionData(ArrayList<NetworkMessage> messages, long ses
         BuffersStorage.getInstance().reuseFreeBuffer(innerOs);
         byte[] b = new byte[1];
         for (int a = 0; a < zeroCount; a++) {
-            MessagesController.random.nextBytes(b);
+            Utilities.random.nextBytes(b);
             dataForEncryption.writeByte(b[0]);
         }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java b/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
index 335ba6a8a..7be03f823 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/FileUploadOperation.java
@@ -62,7 +62,7 @@ public FileUploadOperation(String location, byte[] keyarr, byte[] ivarr) {
                 FileLog.e("tmessages", e);
             }
         }
-        currentFileId = MessagesController.random.nextLong();
+        currentFileId = Utilities.random.nextLong();
         try {
             mdEnc = MessageDigest.getInstance("MD5");
         } catch (NoSuchAlgorithmException e) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java b/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java
index 3d6fc6361..25a926141 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/HandshakeAction.java
@@ -74,7 +74,7 @@ void beginHandshake(boolean dropConnection) {
 
         TLRPC.TL_req_pq reqPq = new TLRPC.TL_req_pq();
         byte[] nonceBytes = new byte[16];
-        MessagesController.random.nextBytes(nonceBytes);
+        Utilities.random.nextBytes(nonceBytes);
         authNonce = reqPq.nonce = nonceBytes;
         reqPQMsgData = sendMessageData(reqPq, generateMessageId());
     }
@@ -243,7 +243,7 @@ public void run() {
                                 innerData.q = reqDH.q;
 
                                 byte[] nonceBytes = new byte[32];
-                                MessagesController.random.nextBytes(nonceBytes);
+                                Utilities.random.nextBytes(nonceBytes);
                                 innerData.new_nonce = authNewNonce = nonceBytes;
                                 innerData.serializeToStream(os);
 
@@ -254,7 +254,7 @@ public void run() {
                                 dataWithHash.writeRaw(innerDataBytes);
                                 byte[] b = new byte[1];
                                 while (dataWithHash.length() < 255) {
-                                    MessagesController.random.nextBytes(b);
+                                    Utilities.random.nextBytes(b);
                                     dataWithHash.writeByte(b[0]);
                                 }
 
@@ -372,7 +372,7 @@ public void run() {
                 }
 
                 byte[] b = new byte[256];
-                MessagesController.random.nextBytes(b);
+                Utilities.random.nextBytes(b);
 
                 BigInteger p = new BigInteger(1, dhInnerData.dh_prime);
                 BigInteger g_a = new BigInteger(1, dhInnerData.g_a);
@@ -436,7 +436,7 @@ public void run() {
                 clientDataWithHash.writeRaw(clientInnerDataBytes);
                 byte[] bb = new byte[1];
                 while (clientDataWithHash.length() % 16 != 0) {
-                    MessagesController.random.nextBytes(bb);
+                    Utilities.random.nextBytes(bb);
                     clientDataWithHash.writeByte(bb[0]);
                 }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index 7b88e4584..105028c2d 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -37,15 +37,12 @@
 import org.json.JSONObject;
 import org.telegram.objects.MessageObject;
 import org.telegram.objects.PhotoObject;
-import org.telegram.objects.VibrationSpeed;
-import org.telegram.ui.Dialog.VibrationCountDialog;
-import org.telegram.ui.LaunchActivity;
+import org.telegram.objects.VibrationOptions;
 import org.telegram.ui.ApplicationLoader;
+import org.telegram.ui.LaunchActivity;
 
 import java.io.File;
-import java.io.FileInputStream;
 import java.math.BigInteger;
-import java.security.SecureRandom;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
@@ -96,7 +93,6 @@
     private String uploadingAvatar = null;
     private SoundPool soundPool;
     private int sound;
-    public static SecureRandom random = new SecureRandom();
     public boolean enableJoined = true;
     public int fontSize = Utilities.dp(16);
     public long scheduleContactsReload = 0;
@@ -107,19 +103,6 @@
 
     }
 
-    static {
-        try {
-            File URANDOM_FILE = new File("/dev/urandom");
-            FileInputStream sUrandomIn = new FileInputStream(URANDOM_FILE);
-            byte[] buffer = new byte[1024];
-            sUrandomIn.read(buffer);
-            sUrandomIn.close();
-            random.setSeed(buffer);
-        } catch (Exception e) {
-            FileLog.e("tmessages", e);
-        }
-    }
-
     public static final int MESSAGE_SEND_STATE_SENDING = 1;
     public static final int MESSAGE_SEND_STATE_SENT = 0;
     public static final int MESSAGE_SEND_STATE_SEND_ERROR = 2;
@@ -1564,7 +1547,7 @@ public void cancelSendingMessage(MessageObject object) {
     private long getNextRandomId() {
         long val = 0;
         while (val == 0) {
-            val = random.nextLong();
+            val = Utilities.random.nextLong();
         }
         return val;
     }
@@ -1620,8 +1603,8 @@ private void sendMessagesDeleteMessage(ArrayList<Long> random_ids, TLRPC.Encrypt
         }
         TLRPC.TL_decryptedMessageService reqSend = new TLRPC.TL_decryptedMessageService();
         reqSend.random_id = getNextRandomId();
-        reqSend.random_bytes = new byte[Math.max(1, (int)Math.ceil(random.nextDouble() * 16))];
-        random.nextBytes(reqSend.random_bytes);
+        reqSend.random_bytes = new byte[Math.max(1, (int)Math.ceil(Utilities.random.nextDouble() * 16))];
+        Utilities.random.nextBytes(reqSend.random_bytes);
         reqSend.action = new TLRPC.TL_decryptedMessageActionDeleteMessages();
         reqSend.action.random_ids = random_ids;
         performSendEncryptedRequest(reqSend, null, encryptedChat, null);
@@ -1634,8 +1617,8 @@ private void sendClearHistoryMessage(TLRPC.EncryptedChat encryptedChat) {
         }
         TLRPC.TL_decryptedMessageService reqSend = new TLRPC.TL_decryptedMessageService();
         reqSend.random_id = getNextRandomId();
-        reqSend.random_bytes = new byte[Math.max(1, (int)Math.ceil(random.nextDouble() * 16))];
-        random.nextBytes(reqSend.random_bytes);
+        reqSend.random_bytes = new byte[Math.max(1, (int)Math.ceil(Utilities.random.nextDouble() * 16))];
+        Utilities.random.nextBytes(reqSend.random_bytes);
         reqSend.action = new TLRPC.TL_decryptedMessageActionFlushHistory();
         performSendEncryptedRequest(reqSend, null, encryptedChat, null);
     }
@@ -1677,8 +1660,8 @@ public void sendTTLMessage(TLRPC.EncryptedChat encryptedChat) {
 
         TLRPC.TL_decryptedMessageService reqSend = new TLRPC.TL_decryptedMessageService();
         reqSend.random_id = newMsg.random_id;
-        reqSend.random_bytes = new byte[Math.max(1, (int)Math.ceil(random.nextDouble() * 16))];
-        random.nextBytes(reqSend.random_bytes);
+        reqSend.random_bytes = new byte[Math.max(1, (int)Math.ceil(Utilities.random.nextDouble() * 16))];
+        Utilities.random.nextBytes(reqSend.random_bytes);
         reqSend.action = new TLRPC.TL_decryptedMessageActionSetMessageTTL();
         reqSend.action.ttl_seconds = encryptedChat.ttl;
         performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null);
@@ -1726,8 +1709,8 @@ public void sendScreenshotMessage(TLRPC.EncryptedChat encryptedChat, ArrayList<L
 
         TLRPC.TL_decryptedMessageService reqSend = new TLRPC.TL_decryptedMessageService();
         reqSend.random_id = newMsg.random_id;
-        reqSend.random_bytes = new byte[Math.max(1, (int)Math.ceil(random.nextDouble() * 16))];
-        random.nextBytes(reqSend.random_bytes);
+        reqSend.random_bytes = new byte[Math.max(1, (int)Math.ceil(Utilities.random.nextDouble() * 16))];
+        Utilities.random.nextBytes(reqSend.random_bytes);
         reqSend.action = action;
         performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null);
     }
@@ -1886,8 +1869,8 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
             } else {
                 TLRPC.TL_decryptedMessage reqSend = new TLRPC.TL_decryptedMessage();
                 reqSend.random_id = newMsg.random_id;
-                reqSend.random_bytes = new byte[Math.max(1, (int)Math.ceil(random.nextDouble() * 16))];
-                random.nextBytes(reqSend.random_bytes);
+                reqSend.random_bytes = new byte[Math.max(1, (int)Math.ceil(Utilities.random.nextDouble() * 16))];
+                Utilities.random.nextBytes(reqSend.random_bytes);
                 reqSend.message = message;
                 reqSend.media = new TLRPC.TL_decryptedMessageMediaEmpty();
                 performSendEncryptedRequest(reqSend, newMsgObj, encryptedChat, null);
@@ -1964,8 +1947,8 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
             } else {
                 TLRPC.TL_decryptedMessage reqSend = new TLRPC.TL_decryptedMessage();
                 reqSend.random_id = newMsg.random_id;
-                reqSend.random_bytes = new byte[Math.max(1, (int)Math.ceil(random.nextDouble() * 16))];
-                random.nextBytes(reqSend.random_bytes);
+                reqSend.random_bytes = new byte[Math.max(1, (int)Math.ceil(Utilities.random.nextDouble() * 16))];
+                Utilities.random.nextBytes(reqSend.random_bytes);
                 reqSend.message = "";
                 if (type == 1) {
                     reqSend.media = new TLRPC.TL_decryptedMessageMediaGeoPoint();
@@ -1976,8 +1959,8 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
                     reqSend.media = new TLRPC.TL_decryptedMessageMediaPhoto();
                     reqSend.media.iv = new byte[32];
                     reqSend.media.key = new byte[32];
-                    random.nextBytes(reqSend.media.iv);
-                    random.nextBytes(reqSend.media.key);
+                    Utilities.random.nextBytes(reqSend.media.iv);
+                    Utilities.random.nextBytes(reqSend.media.key);
                     TLRPC.PhotoSize small = photo.sizes.get(0);
                     TLRPC.PhotoSize big = photo.sizes.get(photo.sizes.size() - 1);
                     reqSend.media.thumb = small.bytes;
@@ -1998,8 +1981,8 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
                     reqSend.media = new TLRPC.TL_decryptedMessageMediaVideo();
                     reqSend.media.iv = new byte[32];
                     reqSend.media.key = new byte[32];
-                    random.nextBytes(reqSend.media.iv);
-                    random.nextBytes(reqSend.media.key);
+                    Utilities.random.nextBytes(reqSend.media.iv);
+                    Utilities.random.nextBytes(reqSend.media.key);
                     reqSend.media.duration = video.duration;
                     reqSend.media.size = video.size;
                     reqSend.media.w = video.w;
@@ -2028,8 +2011,8 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
                     reqSend.media = new TLRPC.TL_decryptedMessageMediaDocument();
                     reqSend.media.iv = new byte[32];
                     reqSend.media.key = new byte[32];
-                    random.nextBytes(reqSend.media.iv);
-                    random.nextBytes(reqSend.media.key);
+                    Utilities.random.nextBytes(reqSend.media.iv);
+                    Utilities.random.nextBytes(reqSend.media.key);
                     reqSend.media.size = document.size;
                     if (!(document.thumb instanceof TLRPC.TL_photoSizeEmpty)) {
                         reqSend.media.thumb = document.thumb.bytes;
@@ -2054,8 +2037,8 @@ private void sendMessage(String message, double lat, double lon, TLRPC.TL_photo
                     reqSend.media = new TLRPC.TL_decryptedMessageMediaAudio();
                     reqSend.media.iv = new byte[32];
                     reqSend.media.key = new byte[32];
-                    random.nextBytes(reqSend.media.iv);
-                    random.nextBytes(reqSend.media.key);
+                    Utilities.random.nextBytes(reqSend.media.iv);
+                    Utilities.random.nextBytes(reqSend.media.key);
                     reqSend.media.duration = audio.duration;
                     reqSend.media.size = audio.size;
 
@@ -2286,7 +2269,7 @@ private void performSendEncryptedRequest(final TLRPC.DecryptedMessage req, final
         dataForEncryption.writeRaw(innerData);
         byte[] b = new byte[1];
         while (dataForEncryption.length() % 16 != 0) {
-            MessagesController.random.nextBytes(b);
+            Utilities.random.nextBytes(b);
             dataForEncryption.writeByte(b[0]);
         }
 
@@ -4319,60 +4302,61 @@ private void showInAppNotification(MessageObject messageObject) {
         }
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Context.MODE_PRIVATE);
         boolean globalEnabled = preferences.getBoolean("EnableAll", true);
-        if (!globalEnabled) {
+        boolean groupEnabled = preferences.getBoolean("EnableGroup", true);
+
+        long dialog_id = messageObject.messageOwner.dialog_id;
+        int chat_id = messageObject.messageOwner.to_id.chat_id;
+        int user_id = messageObject.messageOwner.to_id.user_id;
+        if (user_id == 0) {
+            user_id = messageObject.messageOwner.from_id;
+        } else if (user_id == UserConfig.clientUserId) {
+            user_id = messageObject.messageOwner.from_id;
+        }
+
+        if (dialog_id == 0) {
+            if (chat_id != 0) {
+                dialog_id = -chat_id;
+            } else if (user_id != 0) {
+                dialog_id = user_id;
+            }
+        }
+
+        int notify_override = preferences.getInt("notify2_" + dialog_id, 0);
+        if (notify_override == 2 || (!globalEnabled || chat_id != 0 && !groupEnabled) && notify_override == 0) {
             return;
         }
 
+        TLRPC.User user = users.get(user_id);
+        if (user == null) {
+            return;
+        }
+        TLRPC.Chat chat = null;
+        if (chat_id != 0) {
+            chat = chats.get(chat_id);
+            if (chat == null) {
+                return;
+            }
+        }
+
+        int vibrate_override = preferences.getInt("vibrate_" + dialog_id, 0);
+
         if (ApplicationLoader.lastPauseTime == 0 && ApplicationLoader.isScreenOn) {
             boolean inAppSounds = preferences.getBoolean("EnableInAppSounds", true);
             boolean inAppVibrate = preferences.getBoolean("EnableInAppVibrate", true);
             boolean inAppPreview = preferences.getBoolean("EnableInAppPreview", true);
 
             if (inAppSounds || inAppVibrate || inAppPreview) {
-                long dialog_id = messageObject.messageOwner.dialog_id;
-                int user_id = messageObject.messageOwner.from_id;
-                int chat_id = 0;
-                if (dialog_id == 0) {
-                    if (messageObject.messageOwner.to_id.chat_id != 0) {
-                        dialog_id = -messageObject.messageOwner.to_id.chat_id;
-                        chat_id = messageObject.messageOwner.to_id.chat_id;
-                    } else if (messageObject.messageOwner.to_id.user_id != 0) {
-                        if (messageObject.messageOwner.to_id.user_id == UserConfig.clientUserId) {
-                            dialog_id = messageObject.messageOwner.from_id;
-                        } else {
-                            dialog_id = messageObject.messageOwner.to_id.user_id;
-                        }
-                    }
-                } else {
-                    TLRPC.EncryptedChat chat = encryptedChats.get((int)(dialog_id >> 32));
-                    if (chat == null) {
-                        return;
-                    }
-                }
-                if (dialog_id == 0) {
-                    return;
-                }
-                TLRPC.User user = users.get(user_id);
-                if (user == null) {
-                    return;
-                }
-                TLRPC.Chat chat;
-                if (chat_id != 0) {
-                    chat = chats.get(chat_id);
-                    if (chat == null) {
+                if ((int)dialog_id == 0) {
+                    TLRPC.EncryptedChat encChat = encryptedChats.get((int)(dialog_id >> 32));
+                    if (encChat == null) {
                         return;
                     }
                 }
-                String key = "notify_" + dialog_id;
-                boolean value = preferences.getBoolean(key, true);
-                if (!value) {
-                    return;
-                }
 
                 if (inAppPreview) {
                     NotificationCenter.getInstance().postNotificationName(701, messageObject);
                 }
-                if (inAppVibrate) {
+                if (inAppVibrate && vibrate_override == 0 || vibrate_override == 1) {
                     Vibrator v = (Vibrator)ApplicationLoader.applicationContext.getSystemService(Context.VIBRATOR_SERVICE);
                     v.vibrate(100);
                 }
@@ -4381,49 +4365,8 @@ private void showInAppNotification(MessageObject messageObject) {
                 }
             }
         } else {
-            long dialog_id = messageObject.messageOwner.dialog_id;
-            int chat_id = messageObject.messageOwner.to_id.chat_id;
-            int user_id = messageObject.messageOwner.to_id.user_id;
-            if (user_id != 0 && user_id == UserConfig.clientUserId) {
-                user_id = messageObject.messageOwner.from_id;
-            }
-            if (dialog_id == 0) {
-                if (chat_id != 0) {
-                    dialog_id = -chat_id;
-                } else if (user_id != 0) {
-                    dialog_id = user_id;
-                }
-            }
-
-            if (dialog_id != 0) {
-                String key = "notify_" + dialog_id;
-                boolean value = preferences.getBoolean(key, true);
-                if (!value) {
-                    return;
-                }
-            }
-
-            boolean groupEnabled = preferences.getBoolean("EnableGroup", true);
-            if (chat_id != 0 && !globalEnabled) {
-                return;
-            }
             TLRPC.FileLocation photoPath = null;
-
-            boolean globalVibrate = preferences.getBoolean("EnableVibrateAll", true);
-            boolean groupVibrate = preferences.getBoolean("EnableVibrateGroup", true);
-            boolean groupPreview = preferences.getBoolean("EnablePreviewGroup", true);
-            boolean userPreview = preferences.getBoolean("EnablePreviewAll", true);
-
-            String defaultPath = null;
-            Uri defaultUri = Settings.System.DEFAULT_NOTIFICATION_URI;
-            if (defaultUri != null) {
-                defaultPath = defaultUri.getPath();
-            }
-
-            String globalSound = preferences.getString("GlobalSoundPath", defaultPath);
-            String chatSound = preferences.getString("GroupSoundPath", defaultPath);
-            String userSoundPath = null;
-            String chatSoundPath = null;
+            String defaultPath = Settings.System.DEFAULT_NOTIFICATION_URI.getPath();
 
             NotificationManager mNotificationManager = (NotificationManager)ApplicationLoader.applicationContext.getSystemService(Context.NOTIFICATION_SERVICE);
             Intent intent = new Intent(ApplicationLoader.applicationContext, LaunchActivity.class);
@@ -4432,28 +4375,21 @@ private void showInAppNotification(MessageObject messageObject) {
             if ((int)dialog_id != 0) {
                 if (chat_id != 0) {
                     intent.putExtra("chatId", chat_id);
-                }
-                if (user_id != 0) {
+                } else if (user_id != 0) {
                     intent.putExtra("userId", user_id);
                 }
 
-                if (chat_id == 0 && user_id != 0) {
-
-                    TLRPC.User u = users.get(user_id);
-                    if (u == null) {
-                        return;
-                    }
-
-                    if (u.photo != null && u.photo.photo_small != null && u.photo.photo_small.volume_id != 0 && u.photo.photo_small.local_id != 0) {
-                        photoPath = u.photo.photo_small;
-                    }
+                if (user.photo != null && user.photo.photo_small != null && user.photo.photo_small.volume_id != 0 && user.photo.photo_small.local_id != 0) {
+                    photoPath = user.photo.photo_small;
+                }
 
-                    if (userPreview) {
+                if (chat_id == 0 && user_id != 0) {
+                    if (preferences.getBoolean("EnablePreviewAll", true)) {
                         if (messageObject.messageOwner instanceof TLRPC.TL_messageService) {
                             if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionUserJoined) {
-                                msg = LocaleController.formatString("NotificationContactJoined", R.string.NotificationContactJoined, Utilities.formatName(u.first_name, u.last_name));
+                                msg = LocaleController.formatString("NotificationContactJoined", R.string.NotificationContactJoined, Utilities.formatName(user.first_name, user.last_name));
                             } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionUserUpdatedPhoto) {
-                                msg = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, Utilities.formatName(u.first_name, u.last_name));
+                                msg = LocaleController.formatString("NotificationContactNewPhoto", R.string.NotificationContactNewPhoto, Utilities.formatName(user.first_name, user.last_name));
                             } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionLoginUnknownLocation) {
                                 String date = String.format("%s %s %s", LocaleController.formatterYear.format(((long)messageObject.messageOwner.date) * 1000), LocaleController.getString("OtherAt", R.string.OtherAt), LocaleController.formatterDay.format(((long)messageObject.messageOwner.date) * 1000));
                                 msg = LocaleController.formatString("NotificationUnrecognizedDevice", R.string.NotificationUnrecognizedDevice, UserConfig.currentUser.first_name, date, messageObject.messageOwner.action.title, messageObject.messageOwner.action.address);
@@ -4461,93 +4397,80 @@ private void showInAppNotification(MessageObject messageObject) {
                         } else {
                             if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty) {
                                 if (messageObject.messageOwner.message != null && messageObject.messageOwner.message.length() != 0) {
-                                    msg = LocaleController.formatString("NotificationMessageText", R.string.NotificationMessageText, Utilities.formatName(u.first_name, u.last_name), messageObject.messageOwner.message);
+                                    msg = LocaleController.formatString("NotificationMessageText", R.string.NotificationMessageText, Utilities.formatName(user.first_name, user.last_name), messageObject.messageOwner.message);
                                 } else {
-                                    msg = LocaleController.formatString("NotificationMessageNoText", R.string.NotificationMessageNoText, Utilities.formatName(u.first_name, u.last_name));
+                                    msg = LocaleController.formatString("NotificationMessageNoText", R.string.NotificationMessageNoText, Utilities.formatName(user.first_name, user.last_name));
                                 }
                             } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
-                                msg = LocaleController.formatString("NotificationMessagePhoto", R.string.NotificationMessagePhoto, Utilities.formatName(u.first_name, u.last_name));
+                                msg = LocaleController.formatString("NotificationMessagePhoto", R.string.NotificationMessagePhoto, Utilities.formatName(user.first_name, user.last_name));
                             } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
-                                msg = LocaleController.formatString("NotificationMessageVideo", R.string.NotificationMessageVideo, Utilities.formatName(u.first_name, u.last_name));
+                                msg = LocaleController.formatString("NotificationMessageVideo", R.string.NotificationMessageVideo, Utilities.formatName(user.first_name, user.last_name));
                             } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaContact) {
-                                msg = LocaleController.formatString("NotificationMessageContact", R.string.NotificationMessageContact, Utilities.formatName(u.first_name, u.last_name));
+                                msg = LocaleController.formatString("NotificationMessageContact", R.string.NotificationMessageContact, Utilities.formatName(user.first_name, user.last_name));
                             } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaGeo) {
-                                msg = LocaleController.formatString("NotificationMessageMap", R.string.NotificationMessageMap, Utilities.formatName(u.first_name, u.last_name));
+                                msg = LocaleController.formatString("NotificationMessageMap", R.string.NotificationMessageMap, Utilities.formatName(user.first_name, user.last_name));
                             } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
-                                msg = LocaleController.formatString("NotificationMessageDocument", R.string.NotificationMessageDocument, Utilities.formatName(u.first_name, u.last_name));
+                                msg = LocaleController.formatString("NotificationMessageDocument", R.string.NotificationMessageDocument, Utilities.formatName(user.first_name, user.last_name));
                             } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaAudio) {
-                                msg = LocaleController.formatString("NotificationMessageAudio", R.string.NotificationMessageAudio, Utilities.formatName(u.first_name, u.last_name));
+                                msg = LocaleController.formatString("NotificationMessageAudio", R.string.NotificationMessageAudio, Utilities.formatName(user.first_name, user.last_name));
                             }
                         }
                     } else {
-                        msg = LocaleController.formatString("NotificationMessageNoText", R.string.NotificationMessageNoText, Utilities.formatName(u.first_name, u.last_name));
+                        msg = LocaleController.formatString("NotificationMessageNoText", R.string.NotificationMessageNoText, Utilities.formatName(user.first_name, user.last_name));
                     }
-                } else if (chat_id != 0 && user_id == 0) {
-                    TLRPC.Chat chat = chats.get(chat_id);
-                    if (chat == null) {
-                        return;
-                    }
-                    TLRPC.User u = users.get(messageObject.messageOwner.from_id);
-                    if (u == null) {
-                        return;
-                    }
-
-                    if (u.photo != null && u.photo.photo_small != null && u.photo.photo_small.volume_id != 0 && u.photo.photo_small.local_id != 0) {
-                        photoPath = u.photo.photo_small;
-                    }
-
-                    if (groupPreview) {
+                } else if (chat_id != 0) {
+                    if (preferences.getBoolean("EnablePreviewGroup", true)) {
                         if (messageObject.messageOwner instanceof TLRPC.TL_messageService) {
                             if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatAddUser) {
                                 if (messageObject.messageOwner.action.user_id == UserConfig.clientUserId) {
-                                    msg = LocaleController.formatString("NotificationInvitedToGroup", R.string.NotificationInvitedToGroup, Utilities.formatName(u.first_name, u.last_name), chat.title);
+                                    msg = LocaleController.formatString("NotificationInvitedToGroup", R.string.NotificationInvitedToGroup, Utilities.formatName(user.first_name, user.last_name), chat.title);
                                 } else {
                                     TLRPC.User u2 = users.get(messageObject.messageOwner.action.user_id);
                                     if (u2 == null) {
                                         return;
                                     }
-                                    msg = LocaleController.formatString("NotificationGroupAddMember", R.string.NotificationGroupAddMember, Utilities.formatName(u.first_name, u.last_name), chat.title, Utilities.formatName(u2.first_name, u2.last_name));
+                                    msg = LocaleController.formatString("NotificationGroupAddMember", R.string.NotificationGroupAddMember, Utilities.formatName(user.first_name, user.last_name), chat.title, Utilities.formatName(u2.first_name, u2.last_name));
                                 }
                             } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatEditTitle) {
-                                msg = LocaleController.formatString("NotificationEditedGroupName", R.string.NotificationEditedGroupName, Utilities.formatName(u.first_name, u.last_name), messageObject.messageOwner.action.title);
+                                msg = LocaleController.formatString("NotificationEditedGroupName", R.string.NotificationEditedGroupName, Utilities.formatName(user.first_name, user.last_name), messageObject.messageOwner.action.title);
                             } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatEditPhoto || messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatDeletePhoto) {
-                                msg = LocaleController.formatString("NotificationEditedGroupPhoto", R.string.NotificationEditedGroupPhoto, Utilities.formatName(u.first_name, u.last_name), chat.title);
+                                msg = LocaleController.formatString("NotificationEditedGroupPhoto", R.string.NotificationEditedGroupPhoto, Utilities.formatName(user.first_name, user.last_name), chat.title);
                             } else if (messageObject.messageOwner.action instanceof TLRPC.TL_messageActionChatDeleteUser) {
                                 if (messageObject.messageOwner.action.user_id == UserConfig.clientUserId) {
-                                    msg = LocaleController.formatString("NotificationGroupKickYou", R.string.NotificationGroupKickYou, Utilities.formatName(u.first_name, u.last_name), chat.title);
-                                } else if (messageObject.messageOwner.action.user_id == u.id) {
-                                    msg = LocaleController.formatString("NotificationGroupLeftMember", R.string.NotificationGroupLeftMember, Utilities.formatName(u.first_name, u.last_name), chat.title);
+                                    msg = LocaleController.formatString("NotificationGroupKickYou", R.string.NotificationGroupKickYou, Utilities.formatName(user.first_name, user.last_name), chat.title);
+                                } else if (messageObject.messageOwner.action.user_id == user.id) {
+                                    msg = LocaleController.formatString("NotificationGroupLeftMember", R.string.NotificationGroupLeftMember, Utilities.formatName(user.first_name, user.last_name), chat.title);
                                 } else {
                                     TLRPC.User u2 = users.get(messageObject.messageOwner.action.user_id);
                                     if (u2 == null) {
                                         return;
                                     }
-                                    msg = LocaleController.formatString("NotificationGroupKickMember", R.string.NotificationGroupKickMember, Utilities.formatName(u.first_name, u.last_name), chat.title, Utilities.formatName(u2.first_name, u2.last_name));
+                                    msg = LocaleController.formatString("NotificationGroupKickMember", R.string.NotificationGroupKickMember, Utilities.formatName(user.first_name, user.last_name), chat.title, Utilities.formatName(u2.first_name, u2.last_name));
                                 }
                             }
                         } else {
                             if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaEmpty) {
                                 if (messageObject.messageOwner.message != null && messageObject.messageOwner.message.length() != 0) {
-                                    msg = LocaleController.formatString("NotificationMessageGroupText", R.string.NotificationMessageGroupText, Utilities.formatName(u.first_name, u.last_name), chat.title, messageObject.messageOwner.message);
+                                    msg = LocaleController.formatString("NotificationMessageGroupText", R.string.NotificationMessageGroupText, Utilities.formatName(user.first_name, user.last_name), chat.title, messageObject.messageOwner.message);
                                 } else {
-                                    msg = LocaleController.formatString("NotificationMessageGroupNoText", R.string.NotificationMessageGroupNoText, Utilities.formatName(u.first_name, u.last_name), chat.title);
+                                    msg = LocaleController.formatString("NotificationMessageGroupNoText", R.string.NotificationMessageGroupNoText, Utilities.formatName(user.first_name, user.last_name), chat.title);
                                 }
                             } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) {
-                                msg = LocaleController.formatString("NotificationMessageGroupPhoto", R.string.NotificationMessageGroupPhoto, Utilities.formatName(u.first_name, u.last_name), chat.title);
+                                msg = LocaleController.formatString("NotificationMessageGroupPhoto", R.string.NotificationMessageGroupPhoto, Utilities.formatName(user.first_name, user.last_name), chat.title);
                             } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaVideo) {
-                                msg = LocaleController.formatString("NotificationMessageGroupVideo", R.string.NotificationMessageGroupVideo, Utilities.formatName(u.first_name, u.last_name), chat.title);
+                                msg = LocaleController.formatString("NotificationMessageGroupVideo", R.string.NotificationMessageGroupVideo, Utilities.formatName(user.first_name, user.last_name), chat.title);
                             } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaContact) {
-                                msg = LocaleController.formatString("NotificationMessageGroupContact", R.string.NotificationMessageGroupContact, Utilities.formatName(u.first_name, u.last_name), chat.title);
+                                msg = LocaleController.formatString("NotificationMessageGroupContact", R.string.NotificationMessageGroupContact, Utilities.formatName(user.first_name, user.last_name), chat.title);
                             } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaGeo) {
-                                msg = LocaleController.formatString("NotificationMessageGroupMap", R.string.NotificationMessageGroupMap, Utilities.formatName(u.first_name, u.last_name), chat.title);
+                                msg = LocaleController.formatString("NotificationMessageGroupMap", R.string.NotificationMessageGroupMap, Utilities.formatName(user.first_name, user.last_name), chat.title);
                             } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaDocument) {
-                                msg = LocaleController.formatString("NotificationMessageGroupDocument", R.string.NotificationMessageGroupDocument, Utilities.formatName(u.first_name, u.last_name), chat.title);
+                                msg = LocaleController.formatString("NotificationMessageGroupDocument", R.string.NotificationMessageGroupDocument, Utilities.formatName(user.first_name, user.last_name), chat.title);
                             } else if (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaAudio) {
-                                msg = LocaleController.formatString("NotificationMessageGroupAudio", R.string.NotificationMessageGroupAudio, Utilities.formatName(u.first_name, u.last_name), chat.title);
+                                msg = LocaleController.formatString("NotificationMessageGroupAudio", R.string.NotificationMessageGroupAudio, Utilities.formatName(user.first_name, user.last_name), chat.title);
                             }
                         }
                     } else {
-                        msg = LocaleController.formatString("NotificationMessageGroupNoText", R.string.NotificationMessageGroupNoText, Utilities.formatName(u.first_name, u.last_name), chat.title);
+                        msg = LocaleController.formatString("NotificationMessageGroupNoText", R.string.NotificationMessageGroupNoText, Utilities.formatName(user.first_name, user.last_name), chat.title);
                     }
                 }
             } else {
@@ -4560,38 +4483,44 @@ private void showInAppNotification(MessageObject messageObject) {
             }
 
             boolean needVibrate = false;
-            VibrationSpeed speed = VibrationSpeed.getDefault();
-            int vibrationCount = VibrationCountDialog.DEFAULT_VIBRATION_COUNT;
-
-            if (user_id != 0) {
-                userSoundPath = preferences.getString("sound_path_" + user_id, null);
-                needVibrate = globalVibrate;
-                speed = VibrationSpeed.fromValue(preferences.getInt("VibrationSpeed", 0));
-                vibrationCount = preferences.getInt("VibrationCount", vibrationCount);
-            }
+            String choosenSoundPath = null;
+
             if (chat_id != 0) {
-                chatSoundPath = preferences.getString("sound_chat_path_" + chat_id, null);
-                needVibrate = groupVibrate;
-                speed = VibrationSpeed.fromValue(preferences.getInt("VibrationSpeedGroup", 0));
-                vibrationCount = preferences.getInt("VibrationCountGroup", vibrationCount);
+                choosenSoundPath = preferences.getString("sound_chat_path_" + chat_id, null);
+                if (choosenSoundPath != null && choosenSoundPath.equals(defaultPath)) {
+                    choosenSoundPath = null;
+                } else if (choosenSoundPath == null) {
+                    choosenSoundPath = preferences.getString("GroupSoundPath", defaultPath);
+                }
+                needVibrate = preferences.getBoolean("EnableVibrateGroup", true);
+
+            } else if (user_id != 0) {
+                choosenSoundPath = preferences.getString("sound_path_" + user_id, null);
+                if (choosenSoundPath != null && choosenSoundPath.equals(defaultPath)) {
+                    choosenSoundPath = null;
+                } else if (choosenSoundPath == null) {
+                    choosenSoundPath = preferences.getString("GlobalSoundPath", defaultPath);
+                }
+                needVibrate = preferences.getBoolean("EnableVibrateAll", true);
+
             }
 
-            String choosenSoundPath = null;
+            if (!needVibrate && vibrate_override == 1) {
+                needVibrate = true;
+            } else if (needVibrate && vibrate_override == 2) {
+                needVibrate = false;
+            }
 
-            if (user_id != 0) {
-                if (userSoundPath != null) {
-                    choosenSoundPath = userSoundPath;
-                } else if (globalSound != null) {
-                    choosenSoundPath = globalSound;
-                }
-            } else if (chat_id != 0) {
-                if (chatSoundPath != null) {
-                    choosenSoundPath = chatSoundPath;
-                } else if (chatSound != null) {
-                    choosenSoundPath = chatSound;
+            VibrationOptions.VibrationSpeed speed = VibrationOptions.VibrationSpeed.getDefault();
+            int vibrationCount = VibrationOptions.DEFAULT_VIBRATION_COUNT;
+            if(needVibrate) {
+                if (chat_id != 0) {
+                    speed = VibrationOptions.VibrationSpeed.fromValue(preferences.getInt("VibrationSpeedGroup", 0));
+                    vibrationCount = preferences.getInt("VibrationCountGroup", vibrationCount);
+                } else if (user_id != 0) {
+                    speed = VibrationOptions.VibrationSpeed.fromValue(preferences.getInt("VibrationSpeed", 0));
+                    vibrationCount = preferences.getInt("VibrationCount", vibrationCount);
                 }
-            } else {
-                choosenSoundPath = globalSound;
             }
 
             intent.setAction("com.tmessages.openchat" + Math.random() + Integer.MAX_VALUE);
@@ -4601,8 +4530,7 @@ private void showInAppNotification(MessageObject messageObject) {
             NotificationCompat.Builder mBuilder = new NotificationCompat.Builder(ApplicationLoader.applicationContext)
                     .setContentTitle(LocaleController.getString("AppName", R.string.AppName))
                     .setSmallIcon(R.drawable.notification)
-                    .setStyle(new NotificationCompat.BigTextStyle()
-                            .bigText(msg))
+                    .setStyle(new NotificationCompat.BigTextStyle().bigText(msg))
                     .setContentText(msg)
                     .setAutoCancel(true)
                     .setTicker(msg);
@@ -4614,8 +4542,21 @@ private void showInAppNotification(MessageObject messageObject) {
                 }
             }
 
-            int notificationDefaults = 0;
+            if (choosenSoundPath != null && !choosenSoundPath.equals("NoSound")) {
+                if (choosenSoundPath.equals(defaultPath)) {
+                    mBuilder.setSound(Settings.System.DEFAULT_NOTIFICATION_URI);
+                } else {
+                    mBuilder.setSound(Uri.parse(choosenSoundPath));
+                }
+            }
 
+            currentPushMessage = null;
+            mBuilder.setContentIntent(contentIntent);
+            mNotificationManager.cancel(1);
+            Notification notification = mBuilder.build();
+            notification.ledARGB = 0xff00ff00;
+            notification.ledOnMS = 1000;
+            notification.ledOffMS = 1000;
             if (needVibrate) {
                 long pause, duration;
                 switch (speed) {
@@ -4635,7 +4576,7 @@ private void showInAppNotification(MessageObject messageObject) {
                     default:
                         pause = -1;
                         duration = -1;
-                        notificationDefaults = notificationDefaults | Notification.DEFAULT_VIBRATE;
+                        notification.defaults = Notification.DEFAULT_VIBRATE;
                 }
                 if(pause >= 0 && duration >= 0) {
                     long pattern[] = new long[vibrationCount * 2];
@@ -4644,26 +4585,12 @@ private void showInAppNotification(MessageObject messageObject) {
                         pattern[i] = ((i % 2 != 0) ? duration : pause);
                     }
 
-                    mBuilder.setVibrate(pattern);
-                }
-            }
-            if (choosenSoundPath != null && !choosenSoundPath.equals("NoSound")) {
-                if (choosenSoundPath.equals(defaultPath)) {
-                    mBuilder.setSound(defaultUri);
-                } else {
-                    mBuilder.setSound(Uri.parse(choosenSoundPath));
+                    notification.vibrate = pattern;
                 }
+            } else {
+                notification.vibrate = new long[]{0, 0};
             }
-
-            currentPushMessage = null;
-            mBuilder.setContentIntent(contentIntent);
-            mNotificationManager.cancel(1);
-            Notification notification = mBuilder.build();
-            notification.ledARGB = 0xff00ff00;
-            notification.ledOnMS = 1000;
-            notification.ledOffMS = 1000;
             notification.flags |= Notification.FLAG_SHOW_LIGHTS;
-            notification.defaults = notificationDefaults;
             try {
                 mNotificationManager.notify(1, notification);
                 if (preferences.getBoolean("EnablePebbleNotifications", false)) {
@@ -5097,7 +5024,7 @@ public void run(TLObject response, TLRPC.TL_error error) {
                     }
                     byte[] salt = new byte[256];
                     for (int a = 0; a < 256; a++) {
-                        salt[a] = (byte) ((byte) (random.nextDouble() * 256) ^ res.random[a]);
+                        salt[a] = (byte) ((byte) (Utilities.random.nextDouble() * 256) ^ res.random[a]);
                     }
                     encryptedChat.a_or_b = salt;
                     BigInteger p = new BigInteger(1, MessagesStorage.secretPBytes);
@@ -5210,7 +5137,7 @@ public void run() {
                     }
                     final byte[] salt = new byte[256];
                     for (int a = 0; a < 256; a++) {
-                        salt[a] = (byte) ((byte) (random.nextDouble() * 256) ^ res.random[a]);
+                        salt[a] = (byte) ((byte) (Utilities.random.nextDouble() * 256) ^ res.random[a]);
                     }
 
                     BigInteger i_g_a = BigInteger.valueOf(MessagesStorage.secretG);
@@ -5225,7 +5152,7 @@ public void run() {
                     TLRPC.TL_messages_requestEncryption req2 = new TLRPC.TL_messages_requestEncryption();
                     req2.g_a = g_a;
                     req2.user_id = getInputUser(user);
-                    req2.random_id = random.nextInt();
+                    req2.random_id = Utilities.random.nextInt();
                     ConnectionsManager.getInstance().performRpc(req2, new RPCRequest.RPCRequestDelegate() {
                         @Override
                         public void run(final TLObject response, TLRPC.TL_error error) {
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
index d0193dd9b..dadd28f4c 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/Utilities.java
@@ -15,6 +15,7 @@
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.database.Cursor;
+import android.graphics.Bitmap;
 import android.graphics.Point;
 import android.graphics.Typeface;
 import android.net.Uri;
@@ -30,6 +31,9 @@
 import android.view.WindowManager;
 import android.view.inputmethod.InputMethodManager;
 
+import net.hockeyapp.android.CrashManager;
+import net.hockeyapp.android.UpdateManager;
+
 import org.telegram.ui.ApplicationLoader;
 
 import java.io.ByteArrayInputStream;
@@ -38,13 +42,18 @@
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
 import java.math.BigInteger;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
+import java.nio.channels.Channels;
 import java.nio.channels.FileChannel;
+import java.nio.channels.ReadableByteChannel;
 import java.security.KeyFactory;
 import java.security.MessageDigest;
 import java.security.PublicKey;
+import java.security.SecureRandom;
 import java.security.spec.RSAPublicKeySpec;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -63,6 +72,7 @@
     public static float density = 1;
     public static Point displaySize = new Point();
     public static Pattern pattern = Pattern.compile("[0-9]+");
+    public static SecureRandom random = new SecureRandom();
     private final static Integer lock = 1;
 
     private static boolean waitingForSms = false;
@@ -103,6 +113,17 @@
     public static ProgressDialog progressDialog;
 
     static {
+        try {
+            File URANDOM_FILE = new File("/dev/urandom");
+            FileInputStream sUrandomIn = new FileInputStream(URANDOM_FILE);
+            byte[] buffer = new byte[1024];
+            sUrandomIn.read(buffer);
+            sUrandomIn.close();
+            random.setSeed(buffer);
+        } catch (Exception e) {
+            FileLog.e("tmessages", e);
+        }
+
         density = ApplicationLoader.applicationContext.getResources().getDisplayMetrics().density;
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("primes", Context.MODE_PRIVATE);
         String primes = preferences.getString("primes", null);
@@ -131,6 +152,7 @@
     public native static long doPQNative(long _what);
     public native static byte[] aesIgeEncryption(byte[] _what, byte[] _key, byte[] _iv, boolean encrypt, boolean changeIv, int len);
     public native static void aesIgeEncryption2(ByteBuffer _what, byte[] _key, byte[] _iv, boolean encrypt, boolean changeIv, int len);
+    public native static void loadBitmap(String path, Bitmap bitmap, int scale);
 
     public static boolean isWaitingForSms() {
         boolean value = false;
@@ -201,13 +223,6 @@ public static boolean isGoodPrime(byte[] prime, int g) {
             return false;
         }
 
-        String hex = bytesToHex(prime);
-        for (String cached : goodPrimes) {
-            if (cached.equals(hex)) {
-                return true;
-            }
-        }
-
         BigInteger dhBI = new BigInteger(1, prime);
 
         if (g == 2) { // p mod 8 = 7 for g = 2;
@@ -240,6 +255,13 @@ public static boolean isGoodPrime(byte[] prime, int g) {
             }
         }
 
+        String hex = bytesToHex(prime);
+        for (String cached : goodPrimes) {
+            if (cached.equals(hex)) {
+                return true;
+            }
+        }
+
         BigInteger dhBI2 = dhBI.subtract(BigInteger.valueOf(1)).divide(BigInteger.valueOf(2));
         if (!dhBI.isProbablePrime(30) || !dhBI2.isProbablePrime(30)) {
             return false;
@@ -552,20 +574,31 @@ public void run() {
         });
     }
 
+    public static boolean copyFile(InputStream sourceFile, File destFile) throws IOException {
+        OutputStream out = new FileOutputStream(destFile);
+        byte[] buf = new byte[4096];
+        int len;
+        while ((len = sourceFile.read(buf)) > 0) {
+            Thread.yield();
+            out.write(buf, 0, len);
+        }
+        out.close();
+        return true;
+    }
+
     public static boolean copyFile(File sourceFile, File destFile) throws IOException {
         if(!destFile.exists()) {
             destFile.createNewFile();
         }
         FileChannel source = null;
         FileChannel destination = null;
-        boolean result = true;
         try {
             source = new FileInputStream(sourceFile).getChannel();
             destination = new FileOutputStream(destFile).getChannel();
             destination.transferFrom(source, 0, source.size());
         } catch (Exception e) {
             FileLog.e("tmessages", e);
-            result = false;
+            return false;
         } finally {
             if(source != null) {
                 source.close();
@@ -574,7 +607,7 @@ public static boolean copyFile(File sourceFile, File destFile) throws IOExceptio
                 destination.close();
             }
         }
-        return result;
+        return true;
     }
 
     public static void RunOnUIThread(Runnable runnable) {
@@ -667,7 +700,7 @@ public static void addMediaToGallery(Uri uri) {
     private static File getAlbumDir() {
         File storageDir = null;
         if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {
-            storageDir = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES), ApplicationLoader.applicationContext.getResources().getString(R.string.AppName));
+            storageDir = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES), LocaleController.getString("AppName", R.string.AppName));
             if (storageDir != null) {
                 if (! storageDir.mkdirs()) {
                     if (! storageDir.exists()){
@@ -872,4 +905,14 @@ public static String formatFileSize(long size) {
         }
         return buffer.toByteArray();
     }
+
+    public static void checkForCrashes(Activity context) {
+        CrashManager.register(context, BuildVars.HOCKEY_APP_HASH);
+    }
+
+    public static void checkForUpdates(Activity context) {
+        if (BuildVars.DEBUG_VERSION) {
+            UpdateManager.register(context, BuildVars.HOCKEY_APP_HASH);
+        }
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/objects/VibrationOptions.java b/TMessagesProj/src/main/java/org/telegram/objects/VibrationOptions.java
new file mode 100644
index 000000000..77691aa27
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/objects/VibrationOptions.java
@@ -0,0 +1,57 @@
+/*
+ * This is the source code of Telegram for Android v. 1.3.2.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013.
+ */
+
+package org.telegram.objects;
+
+import org.telegram.messenger.R;
+
+public class VibrationOptions {
+
+    public static int DEFAULT_VIBRATION_COUNT = 2;
+
+    public static enum VibrationSpeed {
+        DEFAULT("VibrateSpeedDefault", R.string.VibrateSpeedDefault),
+        FAST   ("VibrateSpeedFast",    R.string.VibrateSpeedFast),
+        MEDIUM ("VibrateSpeedMedium",  R.string.VibrateSpeedMedium),
+        SLOW   ("VibrateSpeedSlow",    R.string.VibrateSpeedSlow);
+
+        private int value;
+        private String localeKey;
+        private int resourceId;
+
+        VibrationSpeed(String localeKey, int resourceId) {
+            this.value = this.ordinal();
+            this.localeKey = localeKey;
+            this.resourceId = resourceId;
+        }
+
+        public int getValue() {
+            return value;
+        }
+
+        public String getLocaleKey() {
+            return localeKey;
+        }
+
+        public int getResourceId() {
+            return resourceId;
+        }
+
+        public static VibrationSpeed getDefault() {
+            return DEFAULT;
+        }
+
+        public static VibrationSpeed fromValue(int value) {
+            for (VibrationSpeed val : VibrationSpeed.values()) {
+                if(val.value == value)
+                    return val;
+            }
+            return getDefault();
+        }
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/objects/VibrationSpeed.java b/TMessagesProj/src/main/java/org/telegram/objects/VibrationSpeed.java
deleted file mode 100644
index cb9f5f336..000000000
--- a/TMessagesProj/src/main/java/org/telegram/objects/VibrationSpeed.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.objects;
-
-import org.telegram.messenger.LocaleController;
-import org.telegram.messenger.R;
-
-public enum VibrationSpeed {
-    DEFAULT("VibrateSpeedDefault", R.string.VibrateSpeedDefault),
-    FAST   ("VibrateSpeedFast",    R.string.VibrateSpeedFast),
-    MEDIUM ("VibrateSpeedMedium",  R.string.VibrateSpeedMedium),
-    SLOW   ("VibrateSpeedSlow",    R.string.VibrateSpeedSlow);
-
-    private int value;
-    private String localeKey;
-    private int resourceId;
-
-    VibrationSpeed(String localeKey, int resourceId) {
-        this.value = this.ordinal();
-        this.localeKey = localeKey;
-        this.resourceId = resourceId;
-    }
-
-    public int getValue() {
-        return value;
-    }
-
-    public String getLocaleKey() {
-        return localeKey;
-    }
-
-    public int getResourceId() {
-        return resourceId;
-    }
-
-    public static VibrationSpeed getDefault() {
-        return DEFAULT;
-    }
-
-    public static VibrationSpeed fromValue(int value) {
-        for (VibrationSpeed val : values()) {
-            if(val.value == value)
-                return val;
-        }
-        return getDefault();
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
index de7c6819b..8cb09a12a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ChatActivity.java
@@ -1385,7 +1385,7 @@ private void updateActionModeTitle() {
         if (selectedMessagesIds.isEmpty()) {
             mActionMode.finish();
         } else {
-            mActionMode.setTitle(String.format("%s %d", LocaleController.getString("Selected", R.string.Selected), selectedMessagesIds.size()));
+            mActionMode.setTitle(LocaleController.formatString("Selected", R.string.Selected, selectedMessagesIds.size()));
         }
     }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Dialog/VibrationCountDialog.java b/TMessagesProj/src/main/java/org/telegram/ui/Dialog/VibrationCountDialog.java
deleted file mode 100644
index bc7877b7c..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Dialog/VibrationCountDialog.java
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui.Dialog;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.app.Dialog;
-import android.content.DialogInterface;
-import android.os.Bundle;
-import android.support.v4.app.DialogFragment;
-
-import org.telegram.messenger.LocaleController;
-import org.telegram.messenger.R;
-import org.telegram.objects.VibrationSpeed;
-
-import java.io.Serializable;
-
-public class VibrationCountDialog extends DialogFragment {
-
-    public static final int DEFAULT_VIBRATION_COUNT = 2;
-    public static final String KEY_CURRENT_COUNT = "currentCount";
-    public static final String KEY_LISTENER = "mListener";
-
-    public static interface VibrationCountSelectionListener extends Serializable {
-        public void onCountSelected(DialogFragment dialog, int selectedCount);
-    }
-
-    private int count;
-    private VibrationCountSelectionListener mListener;
-
-    public VibrationCountDialog() {
-        count = DEFAULT_VIBRATION_COUNT;
-    }
-
-    @Override
-    public void setArguments(Bundle args) {
-        super.setArguments(args);
-
-        count = args.getInt(KEY_CURRENT_COUNT, DEFAULT_VIBRATION_COUNT);
-        try {
-            mListener = (VibrationCountSelectionListener) args.get(KEY_LISTENER);
-        } catch (ClassCastException e) {}
-    }
-
-    @Override
-    public void onAttach(Activity activity) {
-        super.onAttach(activity);
-        if(mListener == null) {
-            // Verify that the host activity implements the callback interface
-            try {
-                mListener = (VibrationCountSelectionListener) activity;
-            } catch (ClassCastException e) {
-                // The activity doesn't implement the interface, throw exception
-                throw new ClassCastException(activity.toString() + " must implement VibrationCountSelectionListener");
-            }
-        }
-    }
-
-    @Override
-    public Dialog onCreateDialog(Bundle savedInstanceState) {
-        String counts[] = new String[10];
-        for(int i = 0, l = counts.length; i < l; i++)
-            counts[i] = String.valueOf(i + 1);
-
-        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity())
-            .setTitle(LocaleController.getString("VibrateCountTitle", R.string.VibrateCountTitle))
-            .setSingleChoiceItems(counts, count - 1, new DialogInterface.OnClickListener() {
-                @Override
-                public void onClick(DialogInterface dialog, int which) {
-                    mListener.onCountSelected(VibrationCountDialog.this, which + 1);
-
-                    VibrationCountDialog.this.dismiss();
-                }
-            });
-
-        return builder.create();
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Dialog/VibrationSpeedDialog.java b/TMessagesProj/src/main/java/org/telegram/ui/Dialog/VibrationSpeedDialog.java
deleted file mode 100644
index b3a91cbdf..000000000
--- a/TMessagesProj/src/main/java/org/telegram/ui/Dialog/VibrationSpeedDialog.java
+++ /dev/null
@@ -1,93 +0,0 @@
-/*
- * This is the source code of Telegram for Android v. 1.3.2.
- * It is licensed under GNU GPL v. 2 or later.
- * You should have received a copy of the license in this archive (see LICENSE).
- *
- * Copyright Nikolai Kudashov, 2013.
- */
-
-package org.telegram.ui.Dialog;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.app.Dialog;
-import android.content.DialogInterface;
-import android.os.Bundle;
-import android.support.v4.app.DialogFragment;
-
-import org.telegram.messenger.LocaleController;
-import org.telegram.messenger.R;
-import org.telegram.objects.VibrationSpeed;
-
-import java.io.Serializable;
-
-public class VibrationSpeedDialog extends DialogFragment {
-
-    public static final String KEY_CURRENT_SPEED = "currentSpeed";
-    public static final String KEY_LISTENER = "mListener";
-
-    public static interface VibrationSpeedSelectionListener extends Serializable {
-        public void onSpeedSelected(DialogFragment dialog, VibrationSpeed selectedSpeed);
-    }
-
-    private VibrationSpeedSelectionListener mListener;
-    private VibrationSpeed currentSpeed;
-
-    public VibrationSpeedDialog() {
-        this.currentSpeed = VibrationSpeed.getDefault();
-    }
-
-    @Override
-    public void setArguments(Bundle args) {
-        super.setArguments(args);
-
-        try {
-            this.currentSpeed = (VibrationSpeed) args.get(KEY_CURRENT_SPEED);
-        } catch (ClassCastException e) {}
-
-        try {
-            this.mListener = (VibrationSpeedSelectionListener) args.get(KEY_LISTENER);
-        } catch (ClassCastException e) {}
-    }
-
-    @Override
-    public void onAttach(Activity activity) {
-        super.onAttach(activity);
-        if(mListener == null) {
-            // Verify that the host activity implements the callback interface
-            try {
-                mListener = (VibrationSpeedSelectionListener) activity;
-            } catch (ClassCastException e) {
-                // The activity doesn't implement the interface, throw exception
-                throw new ClassCastException(activity.toString() + " must implement VibrationSpeedSelectionListener");
-            }
-        }
-    }
-
-    @Override
-    public Dialog onCreateDialog(Bundle savedInstanceState) {
-        VibrationSpeed[] vibrationSpeeds = VibrationSpeed.values();
-        String speeds[] = new String[vibrationSpeeds.length];
-        for(int i = 0, l = vibrationSpeeds.length; i < l; i++) {
-            VibrationSpeed speed = vibrationSpeeds[i];
-            speeds[i] = LocaleController.getString(speed.getLocaleKey(), speed.getResourceId());
-        }
-
-        int currentSpeedIndex = currentSpeed.getValue();
-
-        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity())
-            .setTitle(LocaleController.getString("VibrateSpeedTitle", R.string.VibrateSpeedTitle))
-            .setSingleChoiceItems(speeds, currentSpeedIndex, new DialogInterface.OnClickListener() {
-                @Override
-                public void onClick(DialogInterface dialog, int which) {
-                    VibrationSpeed speed = VibrationSpeed.fromValue(which);
-
-                    mListener.onSpeedSelected(VibrationSpeedDialog.this, speed);
-
-                    VibrationSpeedDialog.this.dismiss();
-                }
-            });
-
-        return builder.create();
-    }
-}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
index badde5789..006d466b3 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/MessagesActivity.java
@@ -66,7 +66,7 @@
     private boolean searching = false;
     private boolean searchWas = false;
     private boolean onlySelect = false;
-    private int activityToken = (int)(MessagesController.random.nextDouble() * Integer.MAX_VALUE);
+    private int activityToken = (int)(Utilities.random.nextDouble() * Integer.MAX_VALUE);
     private long selectedDialog;
 
     private Timer searchTimer;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java
index 907f03ec8..132802abe 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsNotificationsActivity.java
@@ -9,8 +9,9 @@
 package org.telegram.ui;
 
 import android.app.Activity;
-import android.app.Dialog;
+import android.app.AlertDialog;
 import android.content.Context;
+import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.media.Ringtone;
@@ -18,7 +19,6 @@
 import android.net.Uri;
 import android.os.Bundle;
 import android.provider.Settings;
-import android.support.v4.app.DialogFragment;
 import android.support.v7.app.ActionBar;
 import android.support.v7.app.ActionBarActivity;
 import android.view.LayoutInflater;
@@ -32,55 +32,79 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
-import org.telegram.messenger.LocaleController;
-import org.telegram.messenger.TLObject;
-import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
+import org.telegram.messenger.LocaleController;
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.R;
 import org.telegram.messenger.RPCRequest;
+import org.telegram.messenger.TLObject;
+import org.telegram.messenger.TLRPC;
 import org.telegram.messenger.Utilities;
-import org.telegram.objects.VibrationSpeed;
-import org.telegram.ui.Dialog.VibrationCountDialog;
-import org.telegram.ui.Dialog.VibrationSpeedDialog;
+import org.telegram.objects.VibrationOptions;
 import org.telegram.ui.Views.BaseFragment;
 import org.telegram.ui.Views.OnSwipeTouchListener;
 
 public class SettingsNotificationsActivity extends BaseFragment {
-    private static final int TYPE_HEADER           = 0;
-    private static final int TYPE_BOOLEAN_SETTINGS = 1;
-    private static final int TYPE_INNER_SETTINGS   = 2;
-
-    private static int SETTINGS_COUNT = 0;
-    private static final int SETTINGS_MESSAGE_NOTIFICATIONS = SETTINGS_COUNT++; // 0
-    private static final int SETTINGS_MESSAGE_ALERT         = SETTINGS_COUNT++; // 1
-    private static final int SETTINGS_MESSAGE_PREVIEW       = SETTINGS_COUNT++; // 2
-    private static final int SETTINGS_MESSAGE_VIBRATE       = SETTINGS_COUNT++; // 3
-    private static final int SETTINGS_MESSAGE_VIBRATE_SPD   = SETTINGS_COUNT++; // 4
-    private static final int SETTINGS_MESSAGE_VIBRATE_CNT   = SETTINGS_COUNT++; // 5
-    private static final int SETTINGS_MESSAGE_SOUND         = SETTINGS_COUNT++; // 6
-    private static final int SETTINGS_GROUP_NOTIFICATIONS   = SETTINGS_COUNT++; // 7
-    private static final int SETTINGS_GROUP_ALERT           = SETTINGS_COUNT++; // 8
-    private static final int SETTINGS_GROUP_PREVIEW         = SETTINGS_COUNT++; // 9
-    private static final int SETTINGS_GROUP_VIBRATE         = SETTINGS_COUNT++; // 10
-    private static final int SETTINGS_GROUP_VIBRATE_SPD     = SETTINGS_COUNT++; // 11
-    private static final int SETTINGS_GROUP_VIBRATE_CNT     = SETTINGS_COUNT++; // 12
-    private static final int SETTINGS_GROUP_SOUND           = SETTINGS_COUNT++; // 13
-    private static final int SETTINGS_INAPP_NOTIFICATIONS   = SETTINGS_COUNT++; // 14
-    private static final int SETTINGS_INAPP_SOUND           = SETTINGS_COUNT++; // 15
-    private static final int SETTINGS_INAPP_VIBRATE         = SETTINGS_COUNT++; // 16
-    private static final int SETTINGS_INAPP_PREVIEW         = SETTINGS_COUNT++; // 17
-    private static final int SETTINGS_EVENTS                = SETTINGS_COUNT++; // 18
-    private static final int SETTINGS_CONTACT_JOINED        = SETTINGS_COUNT++; // 19
-    private static final int SETTINGS_PEBBLE                = SETTINGS_COUNT++; // 20
-    private static final int SETTINGS_PEBBLE_ALERT          = SETTINGS_COUNT++; // 21
-    private static final int SETTINGS_RESET                 = SETTINGS_COUNT++; // 22
-    private static final int SETTINGS_RESET_ALL             = SETTINGS_COUNT++; // 23
-
     private ListView listView;
     private boolean reseting = false;
 
+    private int messageSectionRow;
+    private int messageAlertRow;
+    private int messagePreviewRow;
+    private int messageVibrateRow;
+    private int messageVibrationSpeedRow;
+    private int messageVibrationCountRow;
+    private int messageSoundRow;
+    private int groupSectionRow;
+    private int groupAlertRow;
+    private int groupPreviewRow;
+    private int groupVibrateRow;
+    private int groupVibrationSpeedRow;
+    private int groupVibrationCountRow;
+    private int groupSoundRow;
+    private int inappSectionRow;
+    private int inappSoundRow;
+    private int inappVibrateRow;
+    private int inappPreviewRow;
+    private int eventsSectionRow;
+    private int contactJoinedRow;
+    private int pebbleSectionRow;
+    private int pebbleAlertRow;
+    private int resetSectionRow;
+    private int resetNotificationsRow;
+    private int rowCount = 0;
+
+    @Override
+    public boolean onFragmentCreate() {
+        messageSectionRow = rowCount++;
+        messageAlertRow = rowCount++;
+        messagePreviewRow = rowCount++;
+        messageVibrateRow = rowCount++;
+        messageVibrationSpeedRow = rowCount++;
+        messageVibrationCountRow = rowCount++;
+        messageSoundRow = rowCount++;
+        groupSectionRow = rowCount++;
+        groupAlertRow = rowCount++;
+        groupPreviewRow = rowCount++;
+        groupVibrateRow = rowCount++;
+        groupVibrationSpeedRow = rowCount++;
+        groupVibrationCountRow = rowCount++;
+        groupSoundRow = rowCount++;
+        inappSectionRow = rowCount++;
+        inappSoundRow = rowCount++;
+        inappVibrateRow = rowCount++;
+        inappPreviewRow = rowCount++;
+        eventsSectionRow = rowCount++;
+        contactJoinedRow = rowCount++;
+        pebbleSectionRow = rowCount++;
+        pebbleAlertRow = rowCount++;
+        resetSectionRow = rowCount++;
+        resetNotificationsRow = rowCount++;
+
+        return super.onFragmentCreate();
+    }
+
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -97,103 +121,123 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
             listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                 @Override
                 public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
-                    if (i == SETTINGS_MESSAGE_ALERT || i == SETTINGS_GROUP_ALERT) {
+                    if (parentActivity == null) {
+                        return;
+                    }
+                    if (i == messageAlertRow || i == groupAlertRow) {
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                         SharedPreferences.Editor editor = preferences.edit();
                         boolean enabled;
-                        if (i == SETTINGS_MESSAGE_ALERT) {
+                        if (i == messageAlertRow) {
                             enabled = preferences.getBoolean("EnableAll", true);
                             editor.putBoolean("EnableAll", !enabled);
-                        } else if (i == SETTINGS_GROUP_ALERT) {
+                        } else if (i == groupAlertRow) {
                             enabled = preferences.getBoolean("EnableGroup", true);
                             editor.putBoolean("EnableGroup", !enabled);
                         }
                         editor.commit();
                         listView.invalidateViews();
-                    } else if (i == SETTINGS_MESSAGE_PREVIEW || i == SETTINGS_GROUP_PREVIEW) {
+                    } else if (i == messagePreviewRow || i == groupPreviewRow) {
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                         SharedPreferences.Editor editor = preferences.edit();
+                        boolean enabledAll = true;
                         boolean enabled;
-                        if (i == SETTINGS_MESSAGE_PREVIEW) {
+                        if (i == messagePreviewRow) {
                             enabled = preferences.getBoolean("EnablePreviewAll", true);
                             editor.putBoolean("EnablePreviewAll", !enabled);
-                        } else if (i == SETTINGS_GROUP_PREVIEW) {
+                        } else if (i == groupPreviewRow) {
                             enabled = preferences.getBoolean("EnablePreviewGroup", true);
                             editor.putBoolean("EnablePreviewGroup", !enabled);
                         }
                         editor.commit();
                         listView.invalidateViews();
-                    } else if (i == SETTINGS_MESSAGE_VIBRATE || i == SETTINGS_GROUP_VIBRATE) {
+                    } else if (i == messageVibrateRow || i == groupVibrateRow) {
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                         SharedPreferences.Editor editor = preferences.edit();
                         boolean enabled;
-                        if (i == SETTINGS_MESSAGE_VIBRATE) {
+                        if (i == messageVibrateRow) {
                             enabled = preferences.getBoolean("EnableVibrateAll", true);
                             editor.putBoolean("EnableVibrateAll", !enabled);
-                        } else if (i == SETTINGS_GROUP_VIBRATE) {
+                        } else if (i == groupVibrateRow) {
                             enabled = preferences.getBoolean("EnableVibrateGroup", true);
                             editor.putBoolean("EnableVibrateGroup", !enabled);
                         }
                         editor.commit();
                         listView.invalidateViews();
-                    } else if (i == SETTINGS_MESSAGE_VIBRATE_SPD || i == SETTINGS_GROUP_VIBRATE_SPD) {
+                    } else if (i == messageVibrationSpeedRow || i == groupVibrationSpeedRow) {
                         final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                         final int index = i;
-                        VibrationSpeed speed = VibrationSpeed.getDefault();
-                        if (index == SETTINGS_MESSAGE_VIBRATE_SPD) {
-                            speed = VibrationSpeed.fromValue(preferences.getInt("VibrationSpeed", 0));
-                        } else if (index == SETTINGS_GROUP_VIBRATE_SPD) {
-                            speed = VibrationSpeed.fromValue(preferences.getInt("VibrationSpeedGroup", 0));
+                        VibrationOptions.VibrationSpeed currentSpeed = VibrationOptions.VibrationSpeed.getDefault();
+                        if (index == messageVibrationSpeedRow) {
+                            currentSpeed = VibrationOptions.VibrationSpeed.fromValue(preferences.getInt("VibrationSpeed", 0));
+                        } else if (index == groupVibrationSpeedRow) {
+                            currentSpeed = VibrationOptions.VibrationSpeed.fromValue(preferences.getInt("VibrationSpeedGroup", 0));
                         }
-                        VibrationSpeedDialog vibrationSpeedDialog = new VibrationSpeedDialog();
-                        Bundle args = new Bundle();
-                        args.putSerializable(VibrationSpeedDialog.KEY_CURRENT_SPEED, speed);
-                        args.putSerializable(VibrationSpeedDialog.KEY_LISTENER, new VibrationSpeedDialog.VibrationSpeedSelectionListener() {
-                            @Override
-                            public void onSpeedSelected(DialogFragment dialog, VibrationSpeed selectedSpeed) {
-                                SharedPreferences.Editor editor = preferences.edit();
-                                if (index == SETTINGS_MESSAGE_VIBRATE_SPD) {
-                                    editor.putInt("VibrationSpeed", selectedSpeed.getValue());
-                                } else if (index == SETTINGS_GROUP_VIBRATE_SPD) {
-                                    editor.putInt("VibrationSpeedGroup", selectedSpeed.getValue());
+
+                        VibrationOptions.VibrationSpeed[] vibrationSpeeds = VibrationOptions.VibrationSpeed.values();
+                        String speeds[] = new String[vibrationSpeeds.length];
+                        for(int j = 0, vl = vibrationSpeeds.length; j < vl; j++) {
+                            VibrationOptions.VibrationSpeed speedVal = vibrationSpeeds[j];
+                            speeds[j] = LocaleController.getString(speedVal.getLocaleKey(), speedVal.getResourceId());
+                        }
+                        int currentSpeedIndex = currentSpeed.getValue();
+
+                        AlertDialog.Builder builder = new AlertDialog.Builder(parentActivity)
+                            .setTitle(LocaleController.getString("VibrateSpeedTitle", R.string.VibrateSpeedTitle))
+                            .setSingleChoiceItems(speeds, currentSpeedIndex, new DialogInterface.OnClickListener() {
+                                @Override
+                                public void onClick(DialogInterface dialog, int which) {
+                                    VibrationOptions.VibrationSpeed selectedSpeed = VibrationOptions.VibrationSpeed.fromValue(which);
+
+                                    SharedPreferences.Editor editor = preferences.edit();
+                                    if (index == messageVibrationSpeedRow) {
+                                        editor.putInt("VibrationSpeed", selectedSpeed.getValue());
+                                    } else if (index == groupVibrationSpeedRow) {
+                                        editor.putInt("VibrationSpeedGroup", selectedSpeed.getValue());
+                                    }
+                                    editor.commit();
+                                    listView.invalidateViews();
+
+                                    dialog.dismiss();
                                 }
-                                editor.commit();
-                                listView.invalidateViews();
-                            }
-                        });
-                        vibrationSpeedDialog.setArguments(args);
-                        vibrationSpeedDialog.show(getFragmentManager(), "VibrationSpeedDialog");
-                    } else if (i == SETTINGS_MESSAGE_VIBRATE_CNT || i == SETTINGS_GROUP_VIBRATE_CNT) {
+                            })
+                            .setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        builder.show().setCanceledOnTouchOutside(true);
+                    } else if (i == messageVibrationCountRow || i == groupVibrationCountRow) {
                         final SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                         final int index = i;
-                        int count = VibrationCountDialog.DEFAULT_VIBRATION_COUNT;
-                        if (index == SETTINGS_MESSAGE_VIBRATE_CNT) {
+                        int count = VibrationOptions.DEFAULT_VIBRATION_COUNT;
+                        if (index == messageVibrationCountRow) {
                             count = preferences.getInt("VibrationCount", count);
-                        } else if (index == SETTINGS_GROUP_VIBRATE_CNT) {
+                        } else if (index == groupVibrationCountRow) {
                             count = preferences.getInt("VibrationCountGroup", count);
                         }
-                        VibrationCountDialog vibrationCountDialog = new VibrationCountDialog();
-                        Bundle args = new Bundle();
-                        args.putInt(VibrationCountDialog.KEY_CURRENT_COUNT, count);
-                        args.putSerializable(VibrationCountDialog.KEY_LISTENER, new VibrationCountDialog.VibrationCountSelectionListener() {
-                            @Override
-                            public void onCountSelected(DialogFragment dialog, int selectedCount) {
-                                SharedPreferences.Editor editor = preferences.edit();
-                                if (index == SETTINGS_MESSAGE_VIBRATE_CNT) {
-                                    editor.putInt("VibrationCount", selectedCount);
-                                } else if (index == SETTINGS_GROUP_VIBRATE_CNT) {
-                                    editor.putInt("VibrationCountGroup", selectedCount);
+
+                        String counts[] = new String[10];
+                        for(int j = 0, vl = counts.length; j < vl; j++)
+                            counts[j] = String.valueOf(j + 1);
+
+                        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity())
+                            .setTitle(LocaleController.getString("VibrateCountTitle", R.string.VibrateCountTitle))
+                            .setSingleChoiceItems(counts, count - 1, new DialogInterface.OnClickListener() {
+                                @Override
+                                public void onClick(DialogInterface dialog, int which) {
+                                    int selectedCount = which + 1;
+
+                                    SharedPreferences.Editor editor = preferences.edit();
+                                    if (index == messageVibrationCountRow) {
+                                        editor.putInt("VibrationCount", selectedCount);
+                                    } else if (index == groupVibrationCountRow) {
+                                        editor.putInt("VibrationCountGroup", selectedCount);
+                                    }
+                                    editor.commit();
+                                    listView.invalidateViews();
+
+                                    dialog.dismiss();
                                 }
-                                editor.commit();
-                                listView.invalidateViews();
-                            }
-                        });
-                        vibrationCountDialog.setArguments(args);
-                        vibrationCountDialog.show(getFragmentManager(), "VibrateCountDialog");
-                    } else if (i == SETTINGS_MESSAGE_SOUND || i == SETTINGS_GROUP_SOUND) {
-                        if (parentActivity == null) {
-                            return;
-                        }
+                            }).setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                        builder.show().setCanceledOnTouchOutside(true);
+                    } else if (i == messageSoundRow || i == groupSoundRow) {
                         try {
                             SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                             Intent tmpIntent = new Intent(RingtoneManager.ACTION_RINGTONE_PICKER);
@@ -208,7 +252,7 @@ public void onCountSelected(DialogFragment dialog, int selectedCount) {
                                 defaultPath = defaultUri.getPath();
                             }
 
-                            if (i == SETTINGS_MESSAGE_SOUND) {
+                            if (i == messageSoundRow) {
                                 String path = preferences.getString("GlobalSoundPath", defaultPath);
                                 if (path != null && !path.equals("NoSound")) {
                                     if (path.equals(defaultPath)) {
@@ -217,7 +261,7 @@ public void onCountSelected(DialogFragment dialog, int selectedCount) {
                                         currentSound = Uri.parse(path);
                                     }
                                 }
-                            } else if (i == SETTINGS_GROUP_SOUND) {
+                            } else if (i == groupSoundRow) {
                                 String path = preferences.getString("GroupSoundPath", defaultPath);
                                 if (path != null && !path.equals("NoSound")) {
                                     if (path.equals(defaultPath)) {
@@ -232,7 +276,7 @@ public void onCountSelected(DialogFragment dialog, int selectedCount) {
                         } catch (Exception e) {
                             FileLog.e("tmessages", e);
                         }
-                    } else if (i == SETTINGS_RESET_ALL) {
+                    } else if (i == resetNotificationsRow) {
                         if (reseting) {
                             return;
                         }
@@ -264,28 +308,28 @@ public void run() {
                                 });
                             }
                         }, null, true, RPCRequest.RPCRequestClassGeneric);
-                    } else if (i == SETTINGS_INAPP_SOUND) {
+                    } else if (i == inappSoundRow) {
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                         SharedPreferences.Editor editor = preferences.edit();
                         boolean enabled = preferences.getBoolean("EnableInAppSounds", true);
                         editor.putBoolean("EnableInAppSounds", !enabled);
                         editor.commit();
                         listView.invalidateViews();
-                    } else if (i == SETTINGS_INAPP_VIBRATE) {
+                    } else if (i == inappVibrateRow) {
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                         SharedPreferences.Editor editor = preferences.edit();
                         boolean enabled = preferences.getBoolean("EnableInAppVibrate", true);
                         editor.putBoolean("EnableInAppVibrate", !enabled);
                         editor.commit();
                         listView.invalidateViews();
-                    } else if (i == SETTINGS_INAPP_PREVIEW) {
+                    } else if (i == inappPreviewRow) {
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                         SharedPreferences.Editor editor = preferences.edit();
                         boolean enabled = preferences.getBoolean("EnableInAppPreview", true);
                         editor.putBoolean("EnableInAppPreview", !enabled);
                         editor.commit();
                         listView.invalidateViews();
-                    } else if (i == SETTINGS_CONTACT_JOINED) {
+                    } else if (i == contactJoinedRow) {
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                         SharedPreferences.Editor editor = preferences.edit();
                         boolean enabled = preferences.getBoolean("EnableContactJoined", true);
@@ -293,7 +337,7 @@ public void run() {
                         editor.putBoolean("EnableContactJoined", !enabled);
                         editor.commit();
                         listView.invalidateViews();
-                    } else if (i == SETTINGS_PEBBLE_ALERT) {
+                    } else if (i == pebbleAlertRow) {
                         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                         SharedPreferences.Editor editor = preferences.edit();
                         boolean enabled = preferences.getBoolean("EnablePebbleNotifications", false);
@@ -338,7 +382,7 @@ public void onActivityResultFragment(int requestCode, int resultCode, Intent dat
             SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
             SharedPreferences.Editor editor = preferences.edit();
 
-            if (requestCode == SETTINGS_MESSAGE_SOUND) {
+            if (requestCode == messageSoundRow) {
                 if (name != null && ringtone != null) {
                     editor.putString("GlobalSound", name);
                     editor.putString("GlobalSoundPath", ringtone.toString());
@@ -346,7 +390,7 @@ public void onActivityResultFragment(int requestCode, int resultCode, Intent dat
                     editor.putString("GlobalSound", "NoSound");
                     editor.putString("GlobalSoundPath", "NoSound");
                 }
-            } else if (requestCode == SETTINGS_GROUP_SOUND) {
+            } else if (requestCode == groupSoundRow) {
                 if (name != null && ringtone != null) {
                     editor.putString("GroupSound", name);
                     editor.putString("GroupSoundPath", ringtone.toString());
@@ -429,42 +473,34 @@ public boolean areAllItemsEnabled() {
 
         @Override
         public boolean isEnabled(int i) {
-            if (i == SETTINGS_RESET_ALL || i == SETTINGS_CONTACT_JOINED) {
-                return true;
-            }
-
-            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
-            boolean enabledAll = preferences.getBoolean("EnableAll", true);
-            boolean enabled =
-                (enabledAll || i == SETTINGS_MESSAGE_ALERT || i == SETTINGS_INAPP_PREVIEW) &&
-                (i > SETTINGS_MESSAGE_NOTIFICATIONS && i < SETTINGS_GROUP_NOTIFICATIONS || i > SETTINGS_GROUP_NOTIFICATIONS && i < SETTINGS_INAPP_NOTIFICATIONS || i > SETTINGS_INAPP_NOTIFICATIONS && i < SETTINGS_EVENTS) ||
-                (i == SETTINGS_PEBBLE_ALERT);
-
-            if(enabled) {
-                if(i == SETTINGS_MESSAGE_VIBRATE_SPD) {
+            if(i == messageVibrationSpeedRow || i == messageVibrationCountRow || i == groupVibrationSpeedRow || i == groupVibrationCountRow) {
+                boolean enabled = true;
+                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
+                if(i == messageVibrationSpeedRow) {
                     if(!preferences.getBoolean("EnableVibrateAll", true))
                         enabled = false;
                 }
-                else if(i == SETTINGS_GROUP_VIBRATE_SPD) {
+                else if(i == groupVibrationSpeedRow) {
                     if(!preferences.getBoolean("EnableVibrateGroup", true))
                         enabled = false;
                 }
-                else if(i == SETTINGS_MESSAGE_VIBRATE_CNT) {
+                else if(i == messageVibrationCountRow) {
                     if(!preferences.getBoolean("EnableVibrateAll", true) || preferences.getInt("VibrationSpeed", 0) == 0)
                         enabled = false;
                 }
-                else if(i == SETTINGS_GROUP_VIBRATE_CNT) {
+                else if(i == groupVibrationCountRow) {
                     if(!preferences.getBoolean("EnableVibrateGroup", true) || preferences.getInt("VibrationSpeedGroup", 0) == 0)
                         enabled = false;
                 }
+                return enabled;
             }
-
-            return enabled;
+            else
+                return !(i == messageSectionRow || i == groupSectionRow || i == inappSectionRow || i == eventsSectionRow || i == pebbleSectionRow || i == resetSectionRow);
         }
 
         @Override
         public int getCount() {
-            return SETTINGS_COUNT;
+            return rowCount;
         }
 
         @Override
@@ -485,26 +521,26 @@ public boolean hasStableIds() {
         @Override
         public View getView(int i, View view, ViewGroup viewGroup) {
             int type = getItemViewType(i);
-            if (type == TYPE_HEADER) {
+            if (type == 0) {
                 if (view == null) {
                     LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                     view = li.inflate(R.layout.settings_section_layout, viewGroup, false);
                 }
                 TextView textView = (TextView)view.findViewById(R.id.settings_section_text);
-                if (i == SETTINGS_MESSAGE_NOTIFICATIONS) {
+                if (i == messageSectionRow) {
                     textView.setText(LocaleController.getString("MessageNotifications", R.string.MessageNotifications));
-                } else if (i == SETTINGS_GROUP_NOTIFICATIONS) {
+                } else if (i == groupSectionRow) {
                     textView.setText(LocaleController.getString("GroupNotifications", R.string.GroupNotifications));
-                } else if (i == SETTINGS_INAPP_NOTIFICATIONS) {
+                } else if (i == inappSectionRow) {
                     textView.setText(LocaleController.getString("InAppNotifications", R.string.InAppNotifications));
-                } else if (i == SETTINGS_EVENTS) {
+                } else if (i == eventsSectionRow) {
                     textView.setText(LocaleController.getString("Events", R.string.Events));
-                } else if (i == SETTINGS_PEBBLE) {
+                } else if (i == pebbleSectionRow) {
                     textView.setText(LocaleController.getString("Pebble", R.string.Pebble));
-                } else if (i == SETTINGS_RESET) {
+                } else if (i == resetSectionRow) {
                     textView.setText(LocaleController.getString("Reset", R.string.Reset));
                 }
-            } if (type == TYPE_BOOLEAN_SETTINGS) {
+            } if (type == 1) {
                 if (view == null) {
                     LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                     view = li.inflate(R.layout.settings_row_check_notify_layout, viewGroup, false);
@@ -516,48 +552,49 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                 boolean enabled = false;
                 boolean enabledAll = preferences.getBoolean("EnableAll", true);
+                boolean enabledGroup = preferences.getBoolean("EnableGroup", true);
 
-                if (i == SETTINGS_MESSAGE_ALERT || i == SETTINGS_GROUP_ALERT) {
-                    if (i == SETTINGS_MESSAGE_ALERT) {
+                if (i == messageAlertRow || i == groupAlertRow) {
+                    if (i == messageAlertRow) {
                         enabled = enabledAll;
-                    } else if (i == SETTINGS_GROUP_ALERT) {
-                        enabled = preferences.getBoolean("EnableGroup", true);
+                    } else if (i == groupAlertRow) {
+                        enabled = enabledGroup;
                     }
                     textView.setText(LocaleController.getString("Alert", R.string.Alert));
                     divider.setVisibility(View.VISIBLE);
-                } else if (i == SETTINGS_MESSAGE_PREVIEW || i == SETTINGS_GROUP_PREVIEW) {
-                    if (i == SETTINGS_MESSAGE_PREVIEW) {
+                } else if (i == messagePreviewRow || i == groupPreviewRow) {
+                    if (i == messagePreviewRow) {
                         enabled = preferences.getBoolean("EnablePreviewAll", true);
-                    } else if (i == SETTINGS_GROUP_PREVIEW) {
+                    } else if (i == groupPreviewRow) {
                         enabled = preferences.getBoolean("EnablePreviewGroup", true);
                     }
                     textView.setText(LocaleController.getString("MessagePreview", R.string.MessagePreview));
                     divider.setVisibility(View.VISIBLE);
-                } else if (i == SETTINGS_MESSAGE_VIBRATE || i == SETTINGS_GROUP_VIBRATE) {
-                    if (i == SETTINGS_MESSAGE_VIBRATE) {
+                } else if (i == messageVibrateRow || i == groupVibrateRow) {
+                    if (i == messageVibrateRow) {
                         enabled = preferences.getBoolean("EnableVibrateAll", true);
-                    } else if (i == SETTINGS_GROUP_VIBRATE) {
+                    } else if (i == groupVibrateRow) {
                         enabled = preferences.getBoolean("EnableVibrateGroup", true);
                     }
                     textView.setText(LocaleController.getString("Vibrate", R.string.Vibrate));
                     divider.setVisibility(View.VISIBLE);
-                } else if (i == SETTINGS_INAPP_SOUND) {
+                } else if (i == inappSoundRow) {
                     enabled = preferences.getBoolean("EnableInAppSounds", true);
                     textView.setText(LocaleController.getString("InAppSounds", R.string.InAppSounds));
                     divider.setVisibility(View.VISIBLE);
-                } else if (i == SETTINGS_INAPP_VIBRATE) {
+                } else if (i == inappVibrateRow) {
                     enabled = preferences.getBoolean("EnableInAppVibrate", true);
                     textView.setText(LocaleController.getString("InAppVibrate", R.string.InAppVibrate));
                     divider.setVisibility(View.VISIBLE);
-                } else if (i == SETTINGS_INAPP_PREVIEW) {
+                } else if (i == inappPreviewRow) {
                     enabled = preferences.getBoolean("EnableInAppPreview", true);
                     textView.setText(LocaleController.getString("InAppPreview", R.string.InAppPreview));
                     divider.setVisibility(View.INVISIBLE);
-                } else if (i == SETTINGS_CONTACT_JOINED) {
+                } else if (i == contactJoinedRow) {
                     enabled = preferences.getBoolean("EnableContactJoined", true);
                     textView.setText(LocaleController.getString("ContactJoined", R.string.ContactJoined));
                     divider.setVisibility(View.INVISIBLE);
-                } else if (i == SETTINGS_PEBBLE_ALERT) {
+                } else if (i == pebbleAlertRow) {
                     enabled = preferences.getBoolean("EnablePebbleNotifications", false);
                     textView.setText(LocaleController.getString("Alert", R.string.Alert));
                     divider.setVisibility(View.INVISIBLE);
@@ -567,20 +604,7 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 } else {
                     checkButton.setImageResource(R.drawable.btn_check_off);
                 }
-                if (i != SETTINGS_MESSAGE_ALERT && !enabledAll && i != SETTINGS_CONTACT_JOINED) {
-                    view.setEnabled(false);
-                    if(android.os.Build.VERSION.SDK_INT >= SETTINGS_INAPP_SOUND) {
-                        checkButton.setAlpha(0.3f);
-                        textView.setAlpha(0.3f);
-                    }
-                } else {
-                    if(android.os.Build.VERSION.SDK_INT >= SETTINGS_INAPP_SOUND) {
-                        checkButton.setAlpha(1.0f);
-                        textView.setAlpha(1.0f);
-                    }
-                    view.setEnabled(true);
-                }
-            } else if (type == TYPE_INNER_SETTINGS) {
+            } else if (type == 2) {
                 if (view == null) {
                     LayoutInflater li = (LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                     view = li.inflate(R.layout.settings_row_detail_layout, viewGroup, false);
@@ -590,64 +614,47 @@ public View getView(int i, View view, ViewGroup viewGroup) {
                 View divider = view.findViewById(R.id.settings_row_divider);
                 SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", Activity.MODE_PRIVATE);
                 boolean enabledAll = preferences.getBoolean("EnableAll", true);
-                if (i == SETTINGS_MESSAGE_SOUND || i == SETTINGS_GROUP_SOUND) {
-                    if (i == SETTINGS_MESSAGE_SOUND) {
-                        String name = preferences.getString("GlobalSound", LocaleController.getString("Default", R.string.Default));
-                        if (name.equals("NoSound")) {
-                            textViewDetail.setText(LocaleController.getString("NoSound", R.string.NoSound));
-                        } else {
-                            textViewDetail.setText(name);
-                        }
-                    } else if (i == SETTINGS_GROUP_SOUND) {
-                        String name = preferences.getString("GroupSound", LocaleController.getString("Default", R.string.Default));
-                        if (name.equals("NoSound")) {
-                            textViewDetail.setText(LocaleController.getString("NoSound", R.string.NoSound));
-                        } else {
-                            textViewDetail.setText(name);
-                        }
+                boolean enabledGroup = preferences.getBoolean("EnableGroup", true);
+
+                if (i == messageSoundRow || i == groupSoundRow) {
+                    String name = null;
+                    if (i == messageSoundRow) {
+                        name = preferences.getString("GlobalSound", LocaleController.getString("Default", R.string.Default));
+                    } else if (i == groupSoundRow) {
+                        name = preferences.getString("GroupSound", LocaleController.getString("Default", R.string.Default));
+                    }
+                    if (name.equals("NoSound")) {
+                        textViewDetail.setText(LocaleController.getString("NoSound", R.string.NoSound));
+                    } else {
+                        textViewDetail.setText(name);
                     }
                     textView.setText(LocaleController.getString("Sound", R.string.Sound));
                     divider.setVisibility(View.INVISIBLE);
-                } else if (i == SETTINGS_MESSAGE_VIBRATE_SPD || i == SETTINGS_GROUP_VIBRATE_SPD) {
-                    VibrationSpeed speed = VibrationSpeed.getDefault();
-                    if (i == SETTINGS_MESSAGE_VIBRATE_SPD) {
-                        speed = VibrationSpeed.fromValue(preferences.getInt("VibrationSpeed", 0));
-                    } else if (i == SETTINGS_GROUP_VIBRATE_SPD) {
-                        speed = VibrationSpeed.fromValue(preferences.getInt("VibrationSpeedGroup", 0));
+                } else if (i == messageVibrationSpeedRow || i == groupVibrationSpeedRow) {
+                    VibrationOptions.VibrationSpeed speed = VibrationOptions.VibrationSpeed.getDefault();
+                    if (i == messageVibrationSpeedRow) {
+                        speed = VibrationOptions.VibrationSpeed.fromValue(preferences.getInt("VibrationSpeed", 0));
+                    } else if (i == groupVibrationSpeedRow) {
+                        speed = VibrationOptions.VibrationSpeed.fromValue(preferences.getInt("VibrationSpeedGroup", 0));
                     }
                     textViewDetail.setText(LocaleController.getString(speed.getLocaleKey(), speed.getResourceId()));
                     textView.setText(LocaleController.getString("VibrateSpeed", R.string.VibrateSpeed));
                     divider.setVisibility(View.VISIBLE);
-                }  else if (i == SETTINGS_MESSAGE_VIBRATE_CNT || i == SETTINGS_GROUP_VIBRATE_CNT) {
-                    int count = VibrationCountDialog.DEFAULT_VIBRATION_COUNT;
-                    if (i == SETTINGS_MESSAGE_VIBRATE_CNT) {
+                }  else if (i == messageVibrationCountRow || i == groupVibrationCountRow) {
+                    int count = VibrationOptions.DEFAULT_VIBRATION_COUNT;
+                    if (i == messageVibrationCountRow) {
                         count = preferences.getInt("VibrationCount", count);
-                    } else if (i == SETTINGS_GROUP_VIBRATE_CNT) {
+                    } else if (i == groupVibrationCountRow) {
                         count = preferences.getInt("VibrationCountGroup", count);
                     }
                     textViewDetail.setText(String.valueOf(count));
                     textView.setText(LocaleController.getString("VibrateCount", R.string.VibrateCount));
                     divider.setVisibility(View.VISIBLE);
-                } else if (i == SETTINGS_RESET_ALL) {
+                } else if (i == resetNotificationsRow) {
                     textView.setText(LocaleController.getString("ResetAllNotifications", R.string.ResetAllNotifications));
                     textViewDetail.setText(LocaleController.getString("UndoAllCustom", R.string.UndoAllCustom));
                     divider.setVisibility(View.INVISIBLE);
                 }
-                if (i != SETTINGS_RESET_ALL && !enabledAll) {
-                    view.setEnabled(false);
-                    if(android.os.Build.VERSION.SDK_INT >= SETTINGS_INAPP_SOUND) {
-                        textView.setAlpha(0.3f);
-                        textViewDetail.setAlpha(0.3f);
-                        divider.setAlpha(0.3f);
-                    }
-                } else {
-                    if(android.os.Build.VERSION.SDK_INT >= SETTINGS_INAPP_SOUND) {
-                        textView.setAlpha(1.0f);
-                        textViewDetail.setAlpha(1.0f);
-                        divider.setAlpha(1.0f);
-                    }
-                    view.setEnabled(true);
-                }
             }
 
             return view;
@@ -655,14 +662,18 @@ public View getView(int i, View view, ViewGroup viewGroup) {
 
         @Override
         public int getItemViewType(int i) {
-            if (i == SETTINGS_MESSAGE_NOTIFICATIONS || i == SETTINGS_GROUP_NOTIFICATIONS || i == SETTINGS_INAPP_NOTIFICATIONS || i == SETTINGS_EVENTS || i == SETTINGS_PEBBLE || i == SETTINGS_RESET) {
-                return TYPE_HEADER;
-            } else if(i == SETTINGS_MESSAGE_VIBRATE_SPD || i == SETTINGS_GROUP_VIBRATE_SPD || i == SETTINGS_MESSAGE_VIBRATE_CNT || i == SETTINGS_GROUP_VIBRATE_CNT) {
-                return TYPE_INNER_SETTINGS;
-            } else if (i > SETTINGS_MESSAGE_NOTIFICATIONS && i < SETTINGS_MESSAGE_SOUND || i > SETTINGS_GROUP_NOTIFICATIONS && i < SETTINGS_GROUP_SOUND || i > SETTINGS_INAPP_NOTIFICATIONS && i < SETTINGS_EVENTS || i == SETTINGS_CONTACT_JOINED || i == SETTINGS_PEBBLE_ALERT) {
-                return TYPE_BOOLEAN_SETTINGS;
+            if (i == messageSectionRow || i == groupSectionRow || i == inappSectionRow || i == eventsSectionRow || i == pebbleSectionRow || i == resetSectionRow) {
+                return 0;
+            } else if(i == messageVibrationSpeedRow || i == groupVibrationSpeedRow || i == messageVibrationCountRow || i == groupVibrationCountRow) {
+                return 2;
+            } else if (i == messageAlertRow || i == messagePreviewRow || i == messageVibrateRow ||
+                    i == groupAlertRow || i == groupPreviewRow || i == groupVibrateRow ||
+                    i == inappSoundRow || i == inappVibrateRow || i == inappPreviewRow ||
+                    i == contactJoinedRow ||
+                    i == pebbleAlertRow) {
+                return 1;
             } else {
-                return TYPE_INNER_SETTINGS;
+                return 2;
             }
         }
 
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Views/BaseFragment.java b/TMessagesProj/src/main/java/org/telegram/ui/Views/BaseFragment.java
index f46b55347..a43807df0 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Views/BaseFragment.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Views/BaseFragment.java
@@ -22,7 +22,7 @@
 import org.telegram.ui.LaunchActivity;
 import org.telegram.ui.ApplicationLoader;
 
-public class BaseFragment extends DialogFragment {
+public class BaseFragment extends Fragment {
     public int animationType = 0;
     public boolean isFinish = false;
     public View fragmentView;
diff --git a/TMessagesProj/src/main/res/values-it/strings.xml b/TMessagesProj/src/main/res/values-it/strings.xml
index 8e3a32152..edbc00e68 100644
--- a/TMessagesProj/src/main/res/values-it/strings.xml
+++ b/TMessagesProj/src/main/res/values-it/strings.xml
@@ -94,7 +94,7 @@
     <string name="Message">Messaggio</string>
     <string name="TypeMessage">Scrivi il messaggio</string>
     <string name="DOWNLOAD">Scarica</string>
-    <string name="Selected">Selezionato:</string>
+    <string name="Selected">Selezionato: %d</string>
     <string name="ShareMyContactInfo">CONDIVIDI LE MIE INFORMAZIONI DI CONTATTO</string>
     <string name="AddToContacts">AGGIUNGI AI CONTATTI</string>
     <string name="EncryptedPlaceholderTitleIncoming">%s ti ha mandato un invito a una chat privata.</string>
@@ -109,6 +109,7 @@
     <string name="YouWereKicked">Sei stato espulso da questo gruppo</string>
     <string name="YouLeft">Hai lasciato il gruppo</string>
     <string name="DeleteThisGroup">Elimina questo gruppo</string>
+    <string name="DeleteThisChat">Elimina questa conversazione</string>
     <string name="SlideToCancel">TRASCINA PER ANNULLARE</string>
     <string name="SaveToDownloads">Salva in download</string>
     <string name="ApplyLocalizationFile">Applica file di localizzazione</string>
@@ -270,6 +271,8 @@
     <string name="TelegramFaqUrl">https://telegram.org/faq</string>
     <string name="DeleteLocalization">Eliminare la localizzazione?</string>
     <string name="IncorrectLocalization">File della localizzazione non valido</string>
+    <string name="Enabled">Abilitato</string>
+    <string name="Disabled">Disabilitato</string>
 
     <!--media view-->
     <string name="NoMedia">Nessun media condiviso</string>
