diff --git a/SDMessagesProj/build.gradle b/SDMessagesProj/build.gradle
index 9f2c1d4da..11617c99c 100644
--- a/SDMessagesProj/build.gradle
+++ b/SDMessagesProj/build.gradle
@@ -1,4 +1,4 @@
-apply plugin: 'com.android.application'
+apply plugin: 'com.android.library'
 
 repositories {
     mavenCentral()
@@ -9,12 +9,13 @@ repositories {
 
 dependencies {
     compile(name: 'SDMM_SDK-release', ext: 'aar')
-    compile 'com.android.support:support-v4:24.0.0-alpha2'
+    compile 'com.android.support:appcompat-v7:23.0.1'
+    compile 'com.android.support:support-v4:24.0.0'
     compile 'com.google.android.gms:play-services-gcm:8.4.0'
     compile 'com.google.android.gms:play-services-maps:8.4.0'
     compile 'net.hockeyapp.android:HockeySDK:3.6.+'
     compile 'com.googlecode.mp4parser:isoparser:1.0.+'
-    compile fileTree(dir: 'libs', include: ['*.jar'])
+    compile fileTree(dir: 'libs', include: ['*.jar',  '*.so'])
 }
 
 android {
@@ -22,13 +23,16 @@ android {
     buildToolsVersion '23.0.3'
 
     useLibrary 'org.apache.http.legacy'
-    defaultConfig.applicationId = "com.sirisdevelopment.telegram.messenger"
 
     compileOptions {
         sourceCompatibility JavaVersion.VERSION_1_7
         targetCompatibility JavaVersion.VERSION_1_7
     }
 
+    lintOptions {
+        abortOnError false
+    }
+
     signingConfigs {
         debug {
             storeFile file("config/sdtelegram.keystore")
@@ -38,7 +42,7 @@ android {
         }
 
         release {
-            storeFile file("config/release.keystore")
+            storeFile file("config/sdtelegram.keystore")
             storePassword RELEASE_STORE_PASSWORD
             keyAlias RELEASE_KEY_ALIAS
             keyPassword RELEASE_KEY_PASSWORD
@@ -50,7 +54,6 @@ android {
             debuggable true
             jniDebuggable true
             signingConfig signingConfigs.debug
-            applicationIdSuffix ".beta"
         }
 
         release {
@@ -71,7 +74,14 @@ android {
     defaultConfig.versionCode = 787
 
     sourceSets.main {
-        jniLibs.srcDir 'libs'
+        manifest.srcFile 'src/main/AndroidManifest.xml'
+        java.srcDirs         = ['src/main/java']
+        resources.srcDirs    = ['src/main/res']
+        aidl.srcDirs         = ['src/main/aidl']
+        renderscript.srcDirs = ['src/main/java']
+        res.srcDirs          = ['src/main/res']
+        assets.srcDirs       = ['src/main/assets']
+        jniLibs.srcDir 'jniLibs'
         jni.srcDirs = [] //disable automatic ndk-build call
     }
 
@@ -111,7 +121,7 @@ android {
         }
     }
 
-    applicationVariants.all { variant ->
+    libraryVariants.all { variant ->
         def abiVersion = variant.productFlavors.get(0).versionCode
         variant.mergedFlavor.versionCode = defaultConfig.versionCode * 10 + abiVersion;
     }
diff --git a/SDMessagesProj/google-services.json b/SDMessagesProj/google-services.json
index fb7b921be..22a892489 100644
--- a/SDMessagesProj/google-services.json
+++ b/SDMessagesProj/google-services.json
@@ -16,7 +16,39 @@
         }
       },
       "oauth_client": [],
-      "api_key": [],
+      "api_key": [{ "current_key": "AIzaSyAHerZ1-zaue_IFjUOZppOzmfBqNYIZNFM" }],
+      "services": {
+        "analytics_service": {
+          "status": 1
+        },
+        "cloud_messaging_service": {
+          "status": 2,
+          "apns_config": []
+        },
+        "appinvite_service": {
+          "status": 1,
+          "other_platform_oauth_client": []
+        },
+        "google_signin_service": {
+          "status": 1
+        },
+        "ads_service": {
+          "status": 1
+        }
+      }
+    },
+    {
+      "client_info": {
+        "mobilesdk_app_id": "1:760348033671:android:f6afd7b67eae3860",
+        "client_id": "android:com.sirisdevelopment.telegram",
+        "client_type": 1,
+        "android_client_info": {
+          "package_name": "com.sirisdevelopment.telegram",
+          "certificate_hash": []
+        }
+      },
+      "oauth_client": [],
+      "api_key": [{ "current_key": "AIzaSyAHerZ1-zaue_IFjUOZppOzmfBqNYIZNFM" }],
       "services": {
         "analytics_service": {
           "status": 1
diff --git a/SDMessagesProj/jni/Android.mk b/SDMessagesProj/jni/Android.mk
index bbcdfab94..90f4cda3b 100755
--- a/SDMessagesProj/jni/Android.mk
+++ b/SDMessagesProj/jni/Android.mk
@@ -226,8 +226,10 @@ endif
 LOCAL_MODULE := sqlite
 LOCAL_CFLAGS 	:= -w -std=c11 -Os -DNULL=0 -DSOCKLEN_T=socklen_t -DLOCALE_NOT_USED -D_LARGEFILE_SOURCE=1 -D_FILE_OFFSET_BITS=64
 LOCAL_CFLAGS 	+= -DANDROID_NDK -DDISABLE_IMPORTGL -fno-strict-aliasing -fprefetch-loop-arrays -DAVOID_TABLES -DANDROID_TILE_BASED_DECODE -DANDROID_ARMV6_IDCT -DHAVE_STRCHRNUL=0
+LOCAL_C_INCLUDES += ./sqlite
 
 LOCAL_SRC_FILES     := \
+./sqlite.c \
 ./sqlite/sqlite3.c
 
 include $(BUILD_STATIC_LIBRARY)
@@ -242,6 +244,7 @@ LOCAL_CFLAGS 	+= -DANDROID_NDK -DDISABLE_IMPORTGL -fno-strict-aliasing -fprefetc
 LOCAL_CPPFLAGS 	:= -DBSD=1 -ffast-math -Os -funroll-loops -std=c++11
 LOCAL_LDLIBS 	:= -ljnigraphics -llog -lz -latomic
 LOCAL_STATIC_LIBRARIES := webp sqlite tgnet breakpad avformat avcodec avutil
+LOCAL_ALLOW_UNDEFINED_SYMBOLS := true
 
 LOCAL_SRC_FILES     := \
 ./opus/src/opus.c \
@@ -526,6 +529,7 @@ LOCAL_SRC_FILES     += \
 ./audio.c \
 ./utils.c \
 ./image.c \
+./sqlite.c \
 ./video.c \
 ./gifvideo.cpp \
 ./SqliteWrapper.cpp \
diff --git a/SDMessagesProj/jni/SqliteWrapper.cpp b/SDMessagesProj/jni/SqliteWrapper.cpp
new file mode 100755
index 000000000..67cf62315
--- /dev/null
+++ b/SDMessagesProj/jni/SqliteWrapper.cpp
@@ -0,0 +1,241 @@
+#include "sqlite/sqlite3.h"
+#include "tgnet/NativeByteBuffer.h"
+#include "tgnet/BuffersStorage.h"
+
+void throw_sqlite3_exception(JNIEnv *env, sqlite3 *handle, int errcode) {
+    if (SQLITE_OK == errcode) {
+        errcode = sqlite3_errcode(handle);
+    }
+    const char *errmsg = sqlite3_errmsg(handle);
+    jclass exClass = env->FindClass("org/telegram/SQLite/SQLiteException");
+    env->ThrowNew(exClass, errmsg);
+}
+
+extern "C" {
+
+int Java_org_telegram_SQLite_SQLitePreparedStatement_step(JNIEnv *env, jobject object, int statementHandle) {
+    sqlite3_stmt *handle = (sqlite3_stmt *) statementHandle;
+    
+    int errcode = sqlite3_step(handle);
+    if (errcode == SQLITE_ROW)  {
+        return 0;
+    } else if(errcode == SQLITE_DONE) {
+        return 1;
+    }  else if(errcode == SQLITE_BUSY) {
+        return -1;
+    }
+    throw_sqlite3_exception(env, sqlite3_db_handle(handle), errcode);
+}
+
+int Java_org_telegram_SQLite_SQLitePreparedStatement_prepare(JNIEnv *env, jobject object, int sqliteHandle, jstring sql) {
+    sqlite3 *handle = (sqlite3 *) sqliteHandle;
+    
+    char const *sqlStr = env->GetStringUTFChars(sql, 0);
+    
+    sqlite3_stmt *stmt_handle;
+    
+    int errcode = sqlite3_prepare_v2(handle, sqlStr, -1, &stmt_handle, 0);
+    if (SQLITE_OK != errcode) {
+        throw_sqlite3_exception(env, handle, errcode);
+    }
+    
+    if (sqlStr != 0) {
+        env->ReleaseStringUTFChars(sql, sqlStr);
+    }
+    
+    return (int) stmt_handle;
+}
+
+void Java_org_telegram_SQLite_SQLitePreparedStatement_reset(JNIEnv *env, jobject object, int statementHandle) {
+    sqlite3_stmt *handle = (sqlite3_stmt *) statementHandle;
+    
+    int errcode = sqlite3_reset(handle);
+    if (SQLITE_OK != errcode) {
+        throw_sqlite3_exception(env, sqlite3_db_handle(handle), errcode);
+    }
+}
+
+void Java_org_telegram_SQLite_SQLitePreparedStatement_finalize(JNIEnv *env, jobject object, int statementHandle) {
+    sqlite3_finalize((sqlite3_stmt *) statementHandle);
+}
+
+void Java_org_telegram_SQLite_SQLitePreparedStatement_bindByteBuffer(JNIEnv *env, jobject object, int statementHandle, int index, jobject value, int length) {
+    sqlite3_stmt *handle = (sqlite3_stmt *) statementHandle;
+    void *buf = env->GetDirectBufferAddress(value);
+    
+    int errcode = sqlite3_bind_blob(handle, index, buf, length, SQLITE_STATIC);
+    if (SQLITE_OK != errcode) {
+        throw_sqlite3_exception(env, sqlite3_db_handle(handle), errcode);
+    }
+}
+
+void Java_org_telegram_SQLite_SQLitePreparedStatement_bindString(JNIEnv *env, jobject object, int statementHandle, int index, jstring value) {
+    sqlite3_stmt *handle = (sqlite3_stmt *) statementHandle;
+    
+    char const *valueStr = env->GetStringUTFChars(value, 0);
+    
+    int errcode = sqlite3_bind_text(handle, index, valueStr, -1, SQLITE_TRANSIENT);
+    if (SQLITE_OK != errcode) {
+        throw_sqlite3_exception(env, sqlite3_db_handle(handle), errcode);
+    }
+    
+    if (valueStr != 0) {
+        env->ReleaseStringUTFChars(value, valueStr);
+    }
+}
+
+void Java_org_telegram_SQLite_SQLitePreparedStatement_bindInt(JNIEnv *env, jobject object, int statementHandle, int index, int value) {
+    sqlite3_stmt *handle = (sqlite3_stmt *) statementHandle;
+    
+    int errcode = sqlite3_bind_int(handle, index, value);
+    if (SQLITE_OK != errcode) {
+        throw_sqlite3_exception(env, sqlite3_db_handle(handle), errcode);
+    }
+}
+
+void Java_org_telegram_SQLite_SQLitePreparedStatement_bindLong(JNIEnv *env, jobject object, int statementHandle, int index, long long value) {
+    sqlite3_stmt *handle = (sqlite3_stmt *) statementHandle;
+    
+    int errcode = sqlite3_bind_int64(handle, index, value);
+    if (SQLITE_OK != errcode) {
+        throw_sqlite3_exception(env, sqlite3_db_handle(handle), errcode);
+    }
+}
+
+void Java_org_telegram_SQLite_SQLitePreparedStatement_bindDouble(JNIEnv *env, jobject object, int statementHandle, int index, double value) {
+    sqlite3_stmt *handle = (sqlite3_stmt *) statementHandle;
+    
+    int errcode = sqlite3_bind_double(handle, index, value);
+    if (SQLITE_OK != errcode) {
+        throw_sqlite3_exception(env, sqlite3_db_handle(handle), errcode);
+    }
+}
+
+void Java_org_telegram_SQLite_SQLitePreparedStatement_bindNull(JNIEnv *env, jobject object, int statementHandle, int index) {
+    sqlite3_stmt *handle = (sqlite3_stmt *) statementHandle;
+    
+    int errcode = sqlite3_bind_null(handle, index);
+    if (SQLITE_OK != errcode) {
+        throw_sqlite3_exception(env, sqlite3_db_handle(handle), errcode);
+    }
+}
+
+void Java_org_telegram_SQLite_SQLiteDatabase_closedb(JNIEnv *env, jobject object, int sqliteHandle) {
+    sqlite3 *handle = (sqlite3 *)sqliteHandle;
+    int err = sqlite3_close(handle);
+    if (SQLITE_OK != err) {
+        throw_sqlite3_exception(env, handle, err);
+    }
+}
+
+void Java_org_telegram_SQLite_SQLiteDatabase_beginTransaction(JNIEnv *env, jobject object, int sqliteHandle) {
+    sqlite3 *handle = (sqlite3 *)sqliteHandle;
+    sqlite3_exec(handle, "BEGIN", 0, 0, 0);
+}
+
+void Java_org_telegram_SQLite_SQLiteDatabase_commitTransaction(JNIEnv *env, jobject object, int sqliteHandle) {
+    sqlite3 *handle = (sqlite3 *)sqliteHandle;
+    sqlite3_exec(handle, "COMMIT", 0, 0, 0);
+}
+
+int Java_org_telegram_SQLite_SQLiteDatabase_opendb(JNIEnv *env, jobject object, jstring fileName, jstring tempDir) {
+    char const *fileNameStr = env->GetStringUTFChars(fileName, 0);
+    char const *tempDirStr = env->GetStringUTFChars(tempDir, 0);
+    
+    if (sqlite3_temp_directory != 0) {
+        sqlite3_free(sqlite3_temp_directory);
+    }
+    sqlite3_temp_directory = sqlite3_mprintf("%s", tempDirStr);
+    
+    sqlite3 *handle = 0;
+    int err = sqlite3_open(fileNameStr, &handle);
+    if (SQLITE_OK != err) {
+        throw_sqlite3_exception(env, handle, err);
+    }
+    if (fileNameStr != 0) {
+        env->ReleaseStringUTFChars(fileName, fileNameStr);
+    }
+    if (tempDirStr != 0) {
+        env->ReleaseStringUTFChars(tempDir, tempDirStr);
+    }
+    return (int)handle;
+}
+
+int Java_org_telegram_SQLite_SQLiteCursor_columnType(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
+	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
+	return sqlite3_column_type(handle, columnIndex);
+}
+
+int Java_org_telegram_SQLite_SQLiteCursor_columnIsNull(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
+	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
+	int valType = sqlite3_column_type(handle, columnIndex);
+	return SQLITE_NULL == valType;
+}
+
+int Java_org_telegram_SQLite_SQLiteCursor_columnIntValue(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
+	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
+	int valType = sqlite3_column_type(handle, columnIndex);
+	if (SQLITE_NULL == valType) {
+		return 0;
+	}
+	return sqlite3_column_int(handle, columnIndex);
+}
+
+long long Java_org_telegram_SQLite_SQLiteCursor_columnLongValue(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
+	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
+	int valType = sqlite3_column_type(handle, columnIndex);
+	if (SQLITE_NULL == valType) {
+		return 0;
+	}
+	return sqlite3_column_int64(handle, columnIndex);
+}
+
+double Java_org_telegram_SQLite_SQLiteCursor_columnDoubleValue(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
+	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
+	int valType = sqlite3_column_type(handle, columnIndex);
+	if (SQLITE_NULL == valType) {
+		return 0;
+	}
+	return sqlite3_column_double(handle, columnIndex);
+}
+
+jstring Java_org_telegram_SQLite_SQLiteCursor_columnStringValue(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
+	sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
+	const char *str = (const char *) sqlite3_column_text(handle, columnIndex);
+	if (str != 0) {
+		return env->NewStringUTF(str);
+	}
+	return 0;
+}
+
+jbyteArray Java_org_telegram_SQLite_SQLiteCursor_columnByteArrayValue(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
+    sqlite3_stmt *handle = (sqlite3_stmt *)statementHandle;
+	const jbyte *buf = (const jbyte *) sqlite3_column_blob(handle, columnIndex);
+	int length = sqlite3_column_bytes(handle, columnIndex);
+	if (buf != nullptr && length > 0) {
+		jbyteArray result = env->NewByteArray(length);
+        env->SetByteArrayRegion(result, 0, length, buf);
+        return result;
+	}
+	return nullptr;
+}
+
+int Java_org_telegram_SQLite_SQLiteCursor_columnByteBufferValue(JNIEnv *env, jobject object, int statementHandle, int columnIndex) {
+    sqlite3_stmt *handle = (sqlite3_stmt *) statementHandle;
+    int length = sqlite3_column_bytes(handle, columnIndex);
+    if (length <= 0) {
+        return 0;
+    }
+    NativeByteBuffer *buffer = BuffersStorage::getInstance().getFreeBuffer(length);
+    if (buffer == nullptr) {
+        return 0;
+    }
+    const char *buf = (const char *) sqlite3_column_blob(handle, columnIndex);
+    if (buf == nullptr) {
+        return 0;
+    }
+    memcpy(buffer->bytes(), buf, length);
+	return (int) buffer;
+}
+
+}
diff --git a/SDMessagesProj/jni/jni.c b/SDMessagesProj/jni/jni.c
index 195790e80..1c1d0b1c0 100644
--- a/SDMessagesProj/jni/jni.c
+++ b/SDMessagesProj/jni/jni.c
@@ -6,9 +6,10 @@
 #include <stdlib.h>
 #include <openssl/aes.h>
 #include <unistd.h>
-#include "utils.h"
-#include "sqlite.h"
-#include "image.h"
+#include <utils.h>
+#include <sqlite.h>
+#include <sqlite/sqlite3.h>
+#include <image.h>
 
 int registerNativeTgNetFunctions(JavaVM *vm, JNIEnv *env);
 int gifvideoOnJNILoad(JavaVM *vm, JNIEnv *env);
diff --git a/SDMessagesProj/libs/armeabi-v7a.jar b/SDMessagesProj/libs/armeabi-v7a.jar
deleted file mode 100644
index d70dc1286..000000000
Binary files a/SDMessagesProj/libs/armeabi-v7a.jar and /dev/null differ
diff --git a/SDMessagesProj/jniLibs/armeabi-v7a/libtmessages.21.so b/SDMessagesProj/libs/armeabi-v7a/libtmessages.22.so
similarity index 63%
rename from SDMessagesProj/jniLibs/armeabi-v7a/libtmessages.21.so
rename to SDMessagesProj/libs/armeabi-v7a/libtmessages.22.so
index 1a286bc72..b717bbb54 100755
Binary files a/SDMessagesProj/jniLibs/armeabi-v7a/libtmessages.21.so and b/SDMessagesProj/libs/armeabi-v7a/libtmessages.22.so differ
diff --git a/SDMessagesProj/libs/armeabi.jar b/SDMessagesProj/libs/armeabi.jar
deleted file mode 100644
index 28d1a1cd8..000000000
Binary files a/SDMessagesProj/libs/armeabi.jar and /dev/null differ
diff --git a/SDMessagesProj/jniLibs/armeabi/libtmessages.21.so b/SDMessagesProj/libs/armeabi/libtmessages.22.so
similarity index 65%
rename from SDMessagesProj/jniLibs/armeabi/libtmessages.21.so
rename to SDMessagesProj/libs/armeabi/libtmessages.22.so
index 9cc24dc97..eaa8fcfee 100755
Binary files a/SDMessagesProj/jniLibs/armeabi/libtmessages.21.so and b/SDMessagesProj/libs/armeabi/libtmessages.22.so differ
diff --git a/SDMessagesProj/libs/tmessages.21.jar b/SDMessagesProj/libs/tmessages.21.jar
deleted file mode 100644
index 0736a7122..000000000
Binary files a/SDMessagesProj/libs/tmessages.21.jar and /dev/null differ
diff --git a/SDMessagesProj/libs/tmessages.jar b/SDMessagesProj/libs/tmessages.jar
deleted file mode 100644
index 953db3104..000000000
Binary files a/SDMessagesProj/libs/tmessages.jar and /dev/null differ
diff --git a/SDMessagesProj/libs/x86.jar b/SDMessagesProj/libs/x86.jar
deleted file mode 100644
index 2dd81a3d4..000000000
Binary files a/SDMessagesProj/libs/x86.jar and /dev/null differ
diff --git a/SDMessagesProj/jniLibs/lib/x86/tmessages.21.so b/SDMessagesProj/libs/x86/libtmessages.22.so
similarity index 58%
rename from SDMessagesProj/jniLibs/lib/x86/tmessages.21.so
rename to SDMessagesProj/libs/x86/libtmessages.22.so
index d9b0f6738..14d8cb427 100755
Binary files a/SDMessagesProj/jniLibs/lib/x86/tmessages.21.so and b/SDMessagesProj/libs/x86/libtmessages.22.so differ
diff --git a/SDMessagesProj/src/main/AndroidManifest.xml b/SDMessagesProj/src/main/AndroidManifest.xml
index 5d87b0d9b..be1b44577 100644
--- a/SDMessagesProj/src/main/AndroidManifest.xml
+++ b/SDMessagesProj/src/main/AndroidManifest.xml
@@ -132,7 +132,7 @@
         </activity>
 
         <receiver
-            android:name=".AutoMessageHeardReceiver"
+            android:name="com.sirisdevelopment.telegram.messenger.AutoMessageHeardReceiver"
             android:exported="false">
             <intent-filter>
                 <action android:name="com.sirisdevelopment.telegram.messenger.ACTION_MESSAGE_HEARD"/>
@@ -140,26 +140,27 @@
         </receiver>
 
         <receiver
-            android:name=".AutoMessageReplyReceiver"
+            android:name="com.sirisdevelopment.telegram.messenger.AutoMessageReplyReceiver"
             android:exported="false">
             <intent-filter>
                 <action android:name="com.sirisdevelopment.telegram.messenger.ACTION_MESSAGE_REPLY"/>
             </intent-filter>
         </receiver>
 
-        <receiver android:name=".CallReceiver" >
+        <receiver android:name="com.sirisdevelopment.telegram.messenger.CallReceiver" >
             <intent-filter>
                 <action android:name="android.intent.action.PHONE_STATE" />
             </intent-filter>
         </receiver>
 
-        <receiver android:name=".SmsListener">
+        <receiver android:name="com.sirisdevelopment.telegram.messenger.SmsListener">
             <intent-filter>
                 <action android:name="android.provider.Telephony.SMS_RECEIVED" />
             </intent-filter>
         </receiver>
 
-        <service android:name=".AuthenticatorService" android:exported="true">
+        <service android:name="com.sirisdevelopment.telegram.messenger.AuthenticatorService"
+            android:exported="true">
             <intent-filter>
                 <action android:name="android.accounts.AccountAuthenticator"/>
             </intent-filter>
@@ -167,7 +168,8 @@
                 android:resource="@xml/auth"/>
         </service>
 
-        <service android:name=".ContactsSyncAdapterService" android:exported="true">
+        <service android:name="com.sirisdevelopment.telegram.messenger.ContactsSyncAdapterService"
+            android:exported="true">
             <intent-filter>
                 <action android:name="android.content.SyncAdapter" />
             </intent-filter>
@@ -186,13 +188,19 @@
             </intent-filter>
         </service>
 
-        <service android:name=".NotificationsService" android:enabled="true"/>
-        <service android:name=".NotificationRepeat" android:exported="false"/>
-        <service android:name=".ClearCacheService" android:exported="false"/>
-        <service android:name=".VideoEncodingService" android:enabled="true"/>
-        <service android:name=".MusicPlayerService" android:exported="true" android:enabled="true"/>
+        <service android:name="com.sirisdevelopment.telegram.messenger.NotificationsService"
+            android:enabled="true"/>
+        <service android:name="com.sirisdevelopment.telegram.messenger.NotificationRepeat"
+            android:exported="false"/>
+        <service android:name="com.sirisdevelopment.telegram.messenger.ClearCacheService"
+            android:exported="false"/>
+        <service android:name="com.sirisdevelopment.telegram.messenger.VideoEncodingService"
+            android:enabled="true"/>
+        <service android:name="com.sirisdevelopment.telegram.messenger.MusicPlayerService"
+            android:exported="true"
+            android:enabled="true"/>
 
-        <receiver android:name=".MusicPlayerReceiver" >
+        <receiver android:name="com.sirisdevelopment.telegram.messenger.MusicPlayerReceiver" >
             <intent-filter>
                 <action android:name="com.sirisdevelopment.telegram.android.musicplayer.close" />
                 <action android:name="com.sirisdevelopment.telegram.android.musicplayer.pause" />
@@ -204,16 +212,19 @@
             </intent-filter>
         </receiver>
 
-        <receiver android:name=".AppStartReceiver" android:enabled="true">
+        <receiver android:name="com.sirisdevelopment.telegram.messenger.AppStartReceiver"
+            android:enabled="true">
             <intent-filter>
                 <action android:name="com.sirisdevelopment.telegram.start" />
                 <action android:name="android.intent.action.BOOT_COMPLETED" />
             </intent-filter>
         </receiver>
 
-        <receiver android:name=".WearReplyReceiver" android:enabled="true"/>
+        <receiver android:name="com.sirisdevelopment.telegram.messenger.WearReplyReceiver"
+            android:enabled="true"/>
 
-        <receiver android:name=".ShareBroadcastReceiver" android:enabled="true"/>
+        <receiver android:name="com.sirisdevelopment.telegram.messenger.ShareBroadcastReceiver"
+            android:enabled="true"/>
 
         <uses-library android:name="com.sec.android.app.multiwindow" android:required="false" />
         <meta-data android:name="com.sec.android.support.multiwindow" android:value="true" />
diff --git a/SDMessagesProj/jniLibs/lib/armeabi-v7a/tmessages.21.so b/SDMessagesProj/src/main/jniLibs/armeabi-v7a/libtmessages.22.so
similarity index 63%
rename from SDMessagesProj/jniLibs/lib/armeabi-v7a/tmessages.21.so
rename to SDMessagesProj/src/main/jniLibs/armeabi-v7a/libtmessages.22.so
index 1a286bc72..b717bbb54 100755
Binary files a/SDMessagesProj/jniLibs/lib/armeabi-v7a/tmessages.21.so and b/SDMessagesProj/src/main/jniLibs/armeabi-v7a/libtmessages.22.so differ
diff --git a/SDMessagesProj/jniLibs/lib/armeabi/tmessages.21.so b/SDMessagesProj/src/main/jniLibs/armeabi/libtmessages.22.so
similarity index 65%
rename from SDMessagesProj/jniLibs/lib/armeabi/tmessages.21.so
rename to SDMessagesProj/src/main/jniLibs/armeabi/libtmessages.22.so
index 9cc24dc97..eaa8fcfee 100755
Binary files a/SDMessagesProj/jniLibs/lib/armeabi/tmessages.21.so and b/SDMessagesProj/src/main/jniLibs/armeabi/libtmessages.22.so differ
diff --git a/SDMessagesProj/jniLibs/x86/libtmessages.21.so b/SDMessagesProj/src/main/jniLibs/x86/libtmessages.22.so
similarity index 58%
rename from SDMessagesProj/jniLibs/x86/libtmessages.21.so
rename to SDMessagesProj/src/main/jniLibs/x86/libtmessages.22.so
index d9b0f6738..14d8cb427 100755
Binary files a/SDMessagesProj/jniLibs/x86/libtmessages.21.so and b/SDMessagesProj/src/main/jniLibs/x86/libtmessages.22.so differ
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 8c0fb64a8..13372aef5 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index b0b8557e8..0e03cb66c 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Fri Dec 04 13:44:40 MSK 2015
+#Sun Sep 25 23:05:04 CDT 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.11-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-bin.zip
diff --git a/gradlew b/gradlew
index 91a7e269e..9d82f7891 100755
--- a/gradlew
+++ b/gradlew
@@ -42,11 +42,6 @@ case "`uname`" in
     ;;
 esac
 
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
 # Attempt to set APP_HOME
 # Resolve links: $0 may be a link
 PRG="$0"
@@ -61,9 +56,9 @@ while [ -h "$PRG" ] ; do
     fi
 done
 SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >&-
+cd "`dirname \"$PRG\"`/" >/dev/null
 APP_HOME="`pwd -P`"
-cd "$SAVED" >&-
+cd "$SAVED" >/dev/null
 
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
@@ -114,6 +109,7 @@ fi
 if $cygwin ; then
     APP_HOME=`cygpath --path --mixed "$APP_HOME"`
     CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
 
     # We build the pattern for arguments to be converted via cygpath
     ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
index 000000000..aec99730b
--- /dev/null
+++ b/gradlew.bat
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
