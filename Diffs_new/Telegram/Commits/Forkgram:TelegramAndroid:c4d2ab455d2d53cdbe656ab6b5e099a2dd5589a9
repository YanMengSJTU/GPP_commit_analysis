diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/ImageReceiver.java b/TMessagesProj/src/main/java/org/telegram/messenger/ImageReceiver.java
index 23b073449..7410849f7 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/ImageReceiver.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/ImageReceiver.java
@@ -28,6 +28,8 @@
 import org.telegram.ui.Components.AnimatedFileDrawable;
 import org.telegram.ui.Components.RecyclableDrawable;
 
+import android.content.SharedPreferences;
+
 public class ImageReceiver implements NotificationCenter.NotificationCenterDelegate {
 
     public interface ImageReceiverDelegate {
@@ -1315,7 +1317,13 @@ public boolean isForcePreview() {
     }
 
     public void setRoundRadius(int value) {
-        roundRadius = value;
+        SharedPreferences preferences = MessagesController.getGlobalMainSettings();
+        final boolean squareAvatars = preferences.getBoolean("squareAvatars", true);
+        if (!squareAvatars) {
+            roundRadius = value;
+        } else {
+            roundRadius = 0;
+        }
     }
 
     public void setCurrentAccount(int value) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
index 154626606..19b78b033 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/AvatarDrawable.java
@@ -29,6 +29,9 @@
 import org.telegram.tgnet.TLRPC;
 import org.telegram.ui.ActionBar.Theme;
 
+import org.telegram.messenger.MessagesController;
+import android.content.SharedPreferences;
+
 public class AvatarDrawable extends Drawable {
 
     private TextPaint namePaint;
@@ -241,7 +244,14 @@ public void draw(Canvas canvas) {
         Theme.avatar_backgroundPaint.setColor(color);
         canvas.save();
         canvas.translate(bounds.left, bounds.top);
-        canvas.drawCircle(size / 2.0f, size / 2.0f, size / 2.0f, Theme.avatar_backgroundPaint);
+
+        SharedPreferences preferences = MessagesController.getGlobalMainSettings();
+        final boolean squareAvatars = preferences.getBoolean("squareAvatars", true);
+        if (squareAvatars) {
+            canvas.drawRect(0f, 0f, size, size, Theme.avatar_backgroundPaint);
+        } else {
+            canvas.drawCircle(size / 2.0f, size / 2.0f, size / 2.0f, Theme.avatar_backgroundPaint);
+        }
 
         if (avatarType == AVATAR_TYPE_ARCHIVED) {
             if (archivedAvatarProgress != 0) {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/ForkSettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/ForkSettingsActivity.java
new file mode 100644
index 000000000..13193a8b8
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/ForkSettingsActivity.java
@@ -0,0 +1,267 @@
+/*
+ * Copyright 23rd, 2019.
+ */
+
+package org.telegram.ui;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.os.Build;
+import android.view.Gravity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.DataQuery;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.R;
+import org.telegram.messenger.SharedConfig;
+import org.telegram.messenger.support.widget.LinearLayoutManager;
+import org.telegram.messenger.support.widget.RecyclerView;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.AlertDialog;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.BottomSheet;
+import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.ActionBar.ThemeDescription;
+import org.telegram.ui.Cells.CheckBoxCell;
+import org.telegram.ui.Cells.EmptyCell;
+import org.telegram.ui.Cells.HeaderCell;
+import org.telegram.ui.Cells.NotificationsCheckCell;
+import org.telegram.ui.Cells.ShadowSectionCell;
+import org.telegram.ui.Cells.TextCheckCell;
+import org.telegram.ui.Cells.TextDetailSettingsCell;
+import org.telegram.ui.Cells.TextSettingsCell;
+import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.Components.NumberPicker;
+import org.telegram.ui.Components.RecyclerListView;
+
+import androidx.recyclerview.widget.LinearLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
+
+public class ForkSettingsActivity extends BaseFragment {
+
+    private RecyclerListView listView;
+    private ListAdapter listAdapter;
+
+    private int rowCount;
+    private int sectionRow1;
+
+    private int squareAvatarsRow;
+    private int pinOrderRow;
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+
+        rowCount = 0;
+        
+        sectionRow1 = rowCount++;
+        squareAvatarsRow = rowCount++;
+        pinOrderRow = rowCount++;
+
+        return true;
+    }
+
+    @Override
+    public View createView(Context context) {
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setTitle("Fork Settings");
+
+        if (AndroidUtilities.isTablet()) {
+            actionBar.setOccupyStatusBar(false);
+        }
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                }
+            }
+        });
+
+        listAdapter = new ListAdapter(context);
+
+        fragmentView = new FrameLayout(context);
+        fragmentView.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundGray));
+        FrameLayout frameLayout = (FrameLayout) fragmentView;
+
+        listView = new RecyclerListView(context);
+        listView.setVerticalScrollBarEnabled(false);
+        listView.setLayoutManager(new LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false) {
+            @Override
+            public boolean supportsPredictiveItemAnimations() {
+                return false;
+            }
+        });
+        listView.setGlowColor(Theme.getColor(Theme.key_avatar_backgroundActionBarBlue));
+        listView.setAdapter(listAdapter);
+        listView.setItemAnimator(null);
+        listView.setLayoutAnimation(null);
+        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT, Gravity.TOP | Gravity.LEFT));
+        listView.setOnItemClickListener((view, position, x, y) -> {
+            if (position == squareAvatarsRow) {
+                SharedPreferences preferences = MessagesController.getGlobalMainSettings();
+                boolean squareAvatars = preferences.getBoolean("squareAvatars", true);
+                SharedPreferences.Editor editor = preferences.edit();
+                editor.putBoolean("squareAvatars", !squareAvatars);
+                editor.commit();
+                if (view instanceof TextCheckCell) {
+                    ((TextCheckCell) view).setChecked(!squareAvatars);
+                }
+            } else if (position == pinOrderRow) {
+                presentFragment(new PinsOrderActivity());
+            }
+        });
+
+        return fragmentView;
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+    }
+
+    private class ListAdapter extends RecyclerListView.SelectionAdapter {
+
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public int getItemCount() {
+            return rowCount;
+        }
+
+        @Override
+        public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
+            switch (holder.getItemViewType()) {
+                case 2: {
+                    TextSettingsCell textCell = (TextSettingsCell) holder.itemView;
+                    if (position == pinOrderRow) {
+                        textCell.setText(LocaleController.getString("PinDialogsOrder", R.string.PinDialogsOrder), true);
+                    }
+                    break;
+                }
+                case 3: {
+                    TextCheckCell textCell = (TextCheckCell) holder.itemView;
+                    SharedPreferences preferences = MessagesController.getGlobalMainSettings();
+                    if (position == squareAvatarsRow) {
+                        textCell.setTextAndCheck("Square Avatars", preferences.getBoolean("squareAvatars", true), true);
+                    }
+                    break;
+                }
+                case 4: {
+                    HeaderCell headerCell = (HeaderCell) holder.itemView;
+                    if (position == sectionRow1) {
+                        headerCell.setText(LocaleController.getString("General", R.string.General));
+                    }
+                    break;
+                }
+            }
+        }
+
+        @Override
+        public boolean isEnabled(RecyclerView.ViewHolder holder) {
+            int position = holder.getAdapterPosition();
+            boolean fork = position == squareAvatarsRow
+                        || position == pinOrderRow;
+            return fork;
+        }
+
+        @Override
+        public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+            View view = null;
+            switch (viewType) {
+                case 1:
+                    view = new ShadowSectionCell(mContext);
+                    break;
+                case 2:
+                    view = new TextSettingsCell(mContext);
+                    view.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundWhite));
+                    break;
+                case 3:
+                    view = new TextCheckCell(mContext);
+                    view.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundWhite));
+                    break;
+                case 4:
+                    view = new HeaderCell(mContext);
+                    view.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundWhite));
+                    break;
+                case 5:
+                    view = new NotificationsCheckCell(mContext);
+                    view.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundWhite));
+                    break;
+                case 6:
+                    view = new TextDetailSettingsCell(mContext);
+                    view.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundWhite));
+                    break;
+            }
+            view.setLayoutParams(new RecyclerView.LayoutParams(RecyclerView.LayoutParams.MATCH_PARENT, RecyclerView.LayoutParams.WRAP_CONTENT));
+            return new RecyclerListView.Holder(view);
+        }
+
+        @Override
+        public int getItemViewType(int position) {
+            if (position == -2) {
+                return 1;
+            } else if (0 == 1) {
+                return 2;
+            } else if (position == squareAvatarsRow || position == pinOrderRow) {
+                return 3;
+            } else if (position == sectionRow1) {
+                return 4;
+            }
+            return 6;
+        }
+    }
+
+    @Override
+    public ThemeDescription[] getThemeDescriptions() {
+        return new ThemeDescription[]{
+                new ThemeDescription(listView, ThemeDescription.FLAG_CELLBACKGROUNDCOLOR, new Class[]{EmptyCell.class, TextSettingsCell.class, TextCheckCell.class, HeaderCell.class, TextDetailSettingsCell.class, NotificationsCheckCell.class}, null, null, null, Theme.key_windowBackgroundWhite),
+                new ThemeDescription(fragmentView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_windowBackgroundGray),
+
+                new ThemeDescription(actionBar, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_avatar_backgroundActionBarBlue),
+                new ThemeDescription(listView, ThemeDescription.FLAG_LISTGLOWCOLOR, null, null, null, null, Theme.key_avatar_backgroundActionBarBlue),
+                new ThemeDescription(actionBar, ThemeDescription.FLAG_AB_ITEMSCOLOR, null, null, null, null, Theme.key_avatar_actionBarIconBlue),
+                new ThemeDescription(actionBar, ThemeDescription.FLAG_AB_TITLECOLOR, null, null, null, null, Theme.key_actionBarDefaultTitle),
+                new ThemeDescription(actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, null, null, null, null, Theme.key_avatar_actionBarSelectorBlue),
+                new ThemeDescription(actionBar, ThemeDescription.FLAG_AB_SUBMENUBACKGROUND, null, null, null, null, Theme.key_actionBarDefaultSubmenuBackground),
+                new ThemeDescription(actionBar, ThemeDescription.FLAG_AB_SUBMENUITEM, null, null, null, null, Theme.key_actionBarDefaultSubmenuItem),
+
+                new ThemeDescription(listView, ThemeDescription.FLAG_SELECTOR, null, null, null, null, Theme.key_listSelector),
+
+                new ThemeDescription(listView, 0, new Class[]{View.class}, Theme.dividerPaint, null, null, Theme.key_divider),
+
+                new ThemeDescription(listView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ShadowSectionCell.class}, null, null, null, Theme.key_windowBackgroundGrayShadow),
+
+                new ThemeDescription(listView, 0, new Class[]{TextSettingsCell.class}, new String[]{"textView"}, null, null, null, Theme.key_windowBackgroundWhiteBlackText),
+                new ThemeDescription(listView, 0, new Class[]{TextSettingsCell.class}, new String[]{"valueTextView"}, null, null, null, Theme.key_windowBackgroundWhiteValueText),
+
+                new ThemeDescription(listView, 0, new Class[]{NotificationsCheckCell.class}, new String[]{"textView"}, null, null, null, Theme.key_windowBackgroundWhiteBlackText),
+                new ThemeDescription(listView, 0, new Class[]{NotificationsCheckCell.class}, new String[]{"valueTextView"}, null, null, null, Theme.key_windowBackgroundWhiteGrayText2),
+                new ThemeDescription(listView, 0, new Class[]{NotificationsCheckCell.class}, new String[]{"checkBox"}, null, null, null, Theme.key_switchTrack),
+                new ThemeDescription(listView, 0, new Class[]{NotificationsCheckCell.class}, new String[]{"checkBox"}, null, null, null, Theme.key_switchTrackChecked),
+
+                new ThemeDescription(listView, 0, new Class[]{TextCheckCell.class}, new String[]{"textView"}, null, null, null, Theme.key_windowBackgroundWhiteBlackText),
+                new ThemeDescription(listView, 0, new Class[]{TextCheckCell.class}, new String[]{"valueTextView"}, null, null, null, Theme.key_windowBackgroundWhiteGrayText2),
+                new ThemeDescription(listView, 0, new Class[]{TextCheckCell.class}, new String[]{"checkBox"}, null, null, null, Theme.key_switchTrack),
+                new ThemeDescription(listView, 0, new Class[]{TextCheckCell.class}, new String[]{"checkBox"}, null, null, null, Theme.key_switchTrackChecked),
+
+                new ThemeDescription(listView, 0, new Class[]{HeaderCell.class}, new String[]{"textView"}, null, null, null, Theme.key_windowBackgroundWhiteBlueHeader),
+
+                new ThemeDescription(listView, 0, new Class[]{TextDetailSettingsCell.class}, new String[]{"textView"}, null, null, null, Theme.key_windowBackgroundWhiteBlackText),
+                new ThemeDescription(listView, 0, new Class[]{TextDetailSettingsCell.class}, new String[]{"valueTextView"}, null, null, null, Theme.key_windowBackgroundWhiteGrayText2),
+        };
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PinsOrderActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PinsOrderActivity.java
new file mode 100644
index 000000000..dc517df29
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PinsOrderActivity.java
@@ -0,0 +1,350 @@
+/*
+ * This file was created by 23rd.
+ */
+
+package org.telegram.ui;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+
+import org.telegram.messenger.ChatObject;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.MessagesStorage;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.R;
+import org.telegram.messenger.support.widget.LinearLayoutManager;
+import org.telegram.messenger.support.widget.RecyclerView;
+import org.telegram.messenger.support.widget.helper.ItemTouchHelper;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.ActionBar;
+import org.telegram.ui.ActionBar.BaseFragment;
+import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.ActionBar.ThemeDescription;
+import org.telegram.ui.Cells.DialogCell;
+import org.telegram.ui.Cells.ShadowSectionCell;
+import org.telegram.ui.Cells.TextInfoPrivacyCell;
+import org.telegram.ui.Cells.TextSettingsCell;
+import org.telegram.ui.Components.LayoutHelper;
+import org.telegram.ui.Components.RecyclerListView;
+
+import java.util.ArrayList;
+
+public class PinsOrderActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
+
+    private RecyclerListView listView;
+    private ListAdapter listAdapter;
+
+    private int pinnedInfoRow;
+    private int pinnedStartRow;
+    private int pinnedEndRow;
+    private int pinnedShadowRow;
+    private int rowCount;
+
+    private ArrayList<TLRPC.TL_dialog> dialogs = new ArrayList<>();
+
+    public class TouchHelperCallback extends ItemTouchHelper.Callback {
+
+        @Override
+        public boolean isLongPressDragEnabled() {
+            return true;
+        }
+
+        @Override
+        public int getMovementFlags(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder) {
+            if (viewHolder.getItemViewType() != 0) {
+                return makeMovementFlags(0, 0);
+            }
+            return makeMovementFlags(ItemTouchHelper.UP | ItemTouchHelper.DOWN, 0);
+        }
+
+        @Override
+        public boolean onMove(RecyclerView recyclerView, RecyclerView.ViewHolder source, RecyclerView.ViewHolder target) {
+            if (source.getItemViewType() != target.getItemViewType()) {
+                return false;
+            }
+            listAdapter.swapElements(source.getAdapterPosition(), target.getAdapterPosition());
+            return true;
+        }
+
+        @Override
+        public void onChildDraw(Canvas c, RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, float dX, float dY, int actionState, boolean isCurrentlyActive) {
+            super.onChildDraw(c, recyclerView, viewHolder, dX, dY, actionState, isCurrentlyActive);
+        }
+
+        @Override
+        public void onSelectedChanged(RecyclerView.ViewHolder viewHolder, int actionState) {
+            if (actionState != ItemTouchHelper.ACTION_STATE_IDLE) {
+                listView.cancelClickRunnables(false);
+                viewHolder.itemView.setPressed(true);
+            }
+            super.onSelectedChanged(viewHolder, actionState);
+        }
+
+        @Override
+        public void onSwiped(RecyclerView.ViewHolder viewHolder, int direction) {
+
+        }
+
+        @Override
+        public void clearView(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder) {
+            super.clearView(recyclerView, viewHolder);
+            viewHolder.itemView.setPressed(false);
+        }
+    }
+
+    public PinsOrderActivity() {
+        super();
+    }
+
+    @Override
+    public boolean onFragmentCreate() {
+        super.onFragmentCreate();
+        updateRows();
+        return true;
+    }
+
+    @Override
+    public void onFragmentDestroy() {
+        super.onFragmentDestroy();
+    }
+
+    @Override
+    public View createView(Context context) {
+        actionBar.setBackButtonImage(R.drawable.ic_ab_back);
+        actionBar.setAllowOverlayTitle(true);
+        actionBar.setTitle(LocaleController.getString("PinDialogsOrder", R.string.PinDialogsOrder));
+        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
+            @Override
+            public void onItemClick(int id) {
+                if (id == -1) {
+                    finishFragment();
+                }
+            }
+        });
+
+        listAdapter = new ListAdapter(context);
+
+        fragmentView = new FrameLayout(context);
+        FrameLayout frameLayout = (FrameLayout) fragmentView;
+        frameLayout.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundGray));
+
+        listView = new RecyclerListView(context);
+        listView.setFocusable(true);
+        listView.setTag(7);
+        LinearLayoutManager layoutManager = new LinearLayoutManager(context);
+        layoutManager.setOrientation(LinearLayoutManager.VERTICAL);
+        listView.setLayoutManager(layoutManager);
+        ItemTouchHelper itemTouchHelper = new ItemTouchHelper(new TouchHelperCallback());
+        itemTouchHelper.attachToRecyclerView(listView);
+
+        frameLayout.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        listView.setAdapter(listAdapter);
+
+        return fragmentView;
+    }
+
+    @Override
+    public void didReceivedNotification(int id, int account, Object... args) {
+        updateRows();
+    }
+
+    public void fetchPinnedDialogs() {
+        dialogs.clear();
+        for (int a = 0; a < MessagesController.getInstance(currentAccount).dialogsForward.size(); a++) {
+            TLRPC.TL_dialog dialog = MessagesController.getInstance(currentAccount).dialogsForward.get(a);
+            if (!dialog.pinned) {
+                continue;
+            }
+            int lower_id = (int) dialog.id;
+            int high_id = (int) (dialog.id >> 32);
+            if (lower_id != 0 && high_id != 1) {
+                if (lower_id > 0) {
+                    dialogs.add(dialog);
+                } else {
+                    TLRPC.Chat chat = MessagesController.getInstance(currentAccount).getChat(-lower_id);
+                    if (!(chat == null || ChatObject.isNotInChat(chat) || ChatObject.isChannel(chat) && !chat.creator && (chat.admin_rights == null || !chat.admin_rights.post_messages) && !chat.megagroup)) {
+                        dialogs.add(dialog);
+                    }
+                }
+            }
+        }
+    }
+
+    private void updateRows() {
+        rowCount = 0;
+        pinnedInfoRow = rowCount++;
+
+        fetchPinnedDialogs();
+        if (!dialogs.isEmpty()) {
+            pinnedStartRow = rowCount;
+            pinnedEndRow = rowCount + dialogs.size();
+            rowCount += dialogs.size();
+            pinnedShadowRow = rowCount++;
+        } else {
+            pinnedStartRow = -1;
+            pinnedEndRow = -1;
+            pinnedShadowRow = -1;
+        }
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        if (listAdapter != null) {
+            listAdapter.notifyDataSetChanged();
+        }
+    }
+
+    private class ListAdapter extends RecyclerListView.SelectionAdapter {
+
+        private Context mContext;
+
+        public ListAdapter(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        public int getItemCount() {
+            return rowCount;
+        }
+
+        @Override
+        public long getItemId(int i) {
+            if (i >= pinnedStartRow && i < pinnedEndRow) {
+                ArrayList<TLRPC.TL_dialog> arrayList = dialogs;
+                return arrayList.get(i - pinnedStartRow).id;
+            } else if (i == pinnedInfoRow) {
+                return Integer.MIN_VALUE;
+            }
+            return i;
+        }
+
+        public TLRPC.TL_dialog getItem(int i) {
+            if (i < 0 || i >= dialogs.size()) {
+                return null;
+            }
+            return dialogs.get(i);
+        }
+
+        @Override
+        public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
+            switch (holder.getItemViewType()) {
+                case 0:
+                    int row = position - pinnedStartRow;
+
+                    fetchPinnedDialogs();
+                    DialogCell cell = (DialogCell) holder.itemView;
+                    TLRPC.TL_dialog dialog = (TLRPC.TL_dialog) getItem(row);
+                    cell.setDialog(dialog, row, 0);
+                    break;
+                case 1:
+                    if (position == pinnedInfoRow) {
+                        ((TextInfoPrivacyCell) holder.itemView).setText(LocaleController.getString("PinOrderInfo", R.string.PinOrderInfo));
+                    }
+                    break;
+                case 3:
+                    if (position == pinnedShadowRow) {
+                        holder.itemView.setBackgroundDrawable(Theme.getThemedDrawable(mContext, R.drawable.greydivider_bottom, Theme.key_windowBackgroundGrayShadow));
+                    }
+                    break;
+            }
+        }
+
+        @Override
+        public boolean isEnabled(RecyclerView.ViewHolder holder) {
+            int type = holder.getItemViewType();
+            return type == 0 || type == 2;
+        }
+
+        @Override
+        public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+            View view = null;
+            switch (viewType) {
+                case 0:
+                    view = new DialogCell(mContext, false);
+                    view.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundWhite));
+                    break;
+                case 1:
+                    view = new TextInfoPrivacyCell(mContext);
+                    view.setBackgroundDrawable(Theme.getThemedDrawable(mContext, R.drawable.greydivider_bottom, Theme.key_windowBackgroundGrayShadow));
+                    break;
+                case 3:
+                    view = new ShadowSectionCell(mContext);
+                    break;
+            }
+            view.setLayoutParams(new RecyclerView.LayoutParams(RecyclerView.LayoutParams.MATCH_PARENT, RecyclerView.LayoutParams.WRAP_CONTENT));
+            return new RecyclerListView.Holder(view);
+        }
+
+        @Override
+        public int getItemViewType(int i) {
+            if (i >= pinnedStartRow && i < pinnedEndRow) {
+                return 0;
+            } else if (i == pinnedInfoRow) {
+                return 1;
+            } else if (i == pinnedShadowRow) {
+                return 3;
+            }
+            return 0;
+        }
+
+        public void swapElements(int fromIndex, int toIndex) {
+            ArrayList<TLRPC.TL_dialog> arrayList = dialogs;
+            int index1 = fromIndex - pinnedStartRow;
+            int index2 = toIndex - pinnedStartRow;
+
+            TLRPC.TL_dialog dialog1 = arrayList.get(index1);
+            TLRPC.TL_dialog dialog2 = arrayList.get(index2);
+
+            int pinnedNum1 = dialog1.pinnedNum;
+            int pinnedNum2 = dialog2.pinnedNum;
+
+            dialog1.pinnedNum = pinnedNum2;
+            dialog2.pinnedNum = pinnedNum1;
+
+            arrayList.set(index1, dialog2);
+            arrayList.set(index2, dialog1);
+
+            MessagesStorage.getInstance(currentAccount).setDialogPinned(dialog1.id, dialog1.pinnedNum);
+            MessagesStorage.getInstance(currentAccount).setDialogPinned(dialog2.id, dialog2.pinnedNum);
+
+            dialogs = arrayList;
+
+            MessagesController.getInstance(currentAccount).sortDialogs(null);
+            notifyItemMoved(fromIndex, toIndex);
+        }
+    }
+
+    @Override
+    public ThemeDescription[] getThemeDescriptions() {
+        return new ThemeDescription[]{
+                new ThemeDescription(listView, ThemeDescription.FLAG_CELLBACKGROUNDCOLOR, new Class[]{TextSettingsCell.class}, null, null, null, Theme.key_windowBackgroundWhite),
+                new ThemeDescription(fragmentView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_windowBackgroundGray),
+
+                new ThemeDescription(actionBar, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, Theme.key_actionBarDefault),
+                new ThemeDescription(listView, ThemeDescription.FLAG_LISTGLOWCOLOR, null, null, null, null, Theme.key_actionBarDefault),
+                new ThemeDescription(actionBar, ThemeDescription.FLAG_AB_ITEMSCOLOR, null, null, null, null, Theme.key_actionBarDefaultIcon),
+                new ThemeDescription(actionBar, ThemeDescription.FLAG_AB_TITLECOLOR, null, null, null, null, Theme.key_actionBarDefaultTitle),
+                new ThemeDescription(actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, null, null, null, null, Theme.key_actionBarDefaultSelector),
+
+                new ThemeDescription(listView, ThemeDescription.FLAG_SELECTOR, null, null, null, null, Theme.key_listSelector),
+
+                new ThemeDescription(listView, 0, new Class[]{View.class}, Theme.dividerPaint, null, null, Theme.key_divider),
+
+                new ThemeDescription(listView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{TextInfoPrivacyCell.class}, null, null, null, Theme.key_windowBackgroundGrayShadow),
+                new ThemeDescription(listView, 0, new Class[]{TextInfoPrivacyCell.class}, new String[]{"textView"}, null, null, null, Theme.key_windowBackgroundWhiteGrayText4),
+
+                new ThemeDescription(listView, 0, new Class[]{TextSettingsCell.class}, new String[]{"textView"}, null, null, null, Theme.key_windowBackgroundWhiteBlackText),
+                new ThemeDescription(listView, 0, new Class[]{TextSettingsCell.class}, new String[]{"valueTextView"}, null, null, null, Theme.key_windowBackgroundWhiteValueText),
+
+                new ThemeDescription(listView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ShadowSectionCell.class}, null, null, null, Theme.key_windowBackgroundGrayShadow),
+        };
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
index c5646098c..afae4be1a 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/SettingsActivity.java
@@ -164,6 +164,8 @@
     private int versionRow;
     private int rowCount;
 
+    private int forkRow;
+
     private final static int edit_name = 1;
     private final static int logout = 2;
     private final static int search_button = 3;
@@ -226,6 +228,7 @@ public boolean onFragmentCreate() {
         privacyRow = rowCount++;
         dataRow = rowCount++;
         chatRow = rowCount++;
+        forkRow = rowCount++;
         languageRow = rowCount++;
         helpRow = rowCount++;
         versionRow = rowCount++;
@@ -372,6 +375,8 @@ public boolean supportsPredictiveItemAnimations() {
                     presentFragment(new ThemeActivity(ThemeActivity.THEME_TYPE_BASIC));
                 } else if (position == helpRow) {
                     showHelpAlert();
+                } else if (position == forkRow) {
+                    presentFragment(new ForkSettingsActivity());
                 } else if (position == languageRow) {
                     presentFragment(new LanguageSelectActivity());
                 } else if (position == usernameRow) {
@@ -1818,6 +1823,8 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                         textCell.setTextAndIcon(LocaleController.getString("DataSettings", R.string.DataSettings), R.drawable.menu_data, true);
                     } else if (position == chatRow) {
                         textCell.setTextAndIcon(LocaleController.getString("ChatSettings", R.string.ChatSettings), R.drawable.menu_chats, true);
+                    } else if (position == forkRow) {
+                        textCell.setTextAndIcon("Fork Settings", R.drawable.menu_chats, true);
                     } else if (position == helpRow) {
                         textCell.setTextAndIcon(LocaleController.getString("SettingsHelp", R.string.SettingsHelp), R.drawable.menu_help, false);
                     }
@@ -1872,7 +1879,7 @@ public boolean isEnabled(RecyclerView.ViewHolder holder) {
             return position == notificationRow || position == numberRow || position == privacyRow ||
                     position == languageRow || position == usernameRow || position == bioRow ||
                     position == versionRow || position == dataRow || position == chatRow ||
-                    position == helpRow;
+                    position == helpRow || position == forkRow;
         }
 
         @Override
@@ -1949,7 +1956,7 @@ public int getItemViewType(int position) {
             } else if (position == settingsSectionRow) {
                 return 1;
             } else if (position == notificationRow || position == privacyRow || position == languageRow ||
-                    position == dataRow || position == chatRow || position == helpRow) {
+                    position == dataRow || position == chatRow || position == helpRow || position == forkRow) {
                 return 2;
             } else if (position == versionRow) {
                 return 5;
diff --git a/TMessagesProj/src/main/res/values-ru/strings.xml b/TMessagesProj/src/main/res/values-ru/strings.xml
new file mode 100644
index 000000000..a9faf00ea
--- /dev/null
+++ b/TMessagesProj/src/main/res/values-ru/strings.xml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="AppName">Fork Client</string>
+    <string name="AppNameBeta">Fork Client</string>
+    <string name="LanguageName">Русский</string>
+    <string name="English">Русский</string>
+    <string name="LanguageNameInEnglish">Russian</string>
+    <string name="LanguageCode">ru</string>
+    <string name="ContinueOnThisLanguage">Continue in English</string>
+    <!--signin view-->
+    <!--FORK CLIENT-->
+    <string name="AnonymousForward">Переслать анонимно</string>
+    <string name="DateForward">Дата</string>
+    <string name="ShowTitle">Показать заголовок</string>
+    <string name="HideTitle">Скрыть заголовок</string>
+    <string name="RemoveFromHideMode">Убрать из Скрытого Режима</string>
+    <string name="AddToHideMode">Добавить в Скрытый Режим</string>
+    <string name="PinOrderInfo">Здесь Вы можете изменить локальный порядок закреплённых диалогов.</string>
+    <!--fork settings view-->
+    <string name="ForkSettingsTitle">Настройки Fork Client</string>
+    <string name="SquareAvatars">Квадратные аватарки</string>
+    <string name="SquareAvatarsInfo">Требуется рестарт</string>
+    <string name="InAppCamera">Встроенная камера</string>
+    <string name="InAppCameraInfo">Во вложениях</string>
+    <string name="SyncPins">Синх. закреплённых диалогов</string>
+    <string name="SyncPinsInfo">В откл. режиме даёт безлимитное количество закреплённых диалогов</string>
+    <string name="ReverseOrderPins">Обратный порядок</string>
+    <string name="ReverseOrderPinsInfo">Закреплённых диалогов</string>
+    <string name="UnmutedOnTop">Сообщения с увед. находятся сверху</string>
+    <string name="UnmutedOnTopInfo">Сообщения будут под закреплёнными диалогами</string>
+    <string name="PhotoHasSticker">Отправлять инфо о стикере в фото</string>
+    <string name="PhotoHasStickerInfo">При использовании стикеров на фотографии</string>
+    <string name="PinDialogsOrder">Порядок закреп. диалогов</string>
+    
+</resources>
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 66e8671dd..3bc24ed0d 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -2833,4 +2833,27 @@
     <string name="formatterDay12H">h:mm a</string>
     <string name="formatDateAtTime">%1$s at %2$s</string>
     <string name="formatDateScheduleDay">EEE MMM d</string>
+    <!--FORK CLIENT-->
+    <string name="AnonymousForward">Anonymous Forward</string>
+    <string name="DateForward">Date</string>
+    <string name="ShowTitle">Show title</string>
+    <string name="HideTitle">Hide title</string>
+    <string name="RemoveFromHideMode">Remove from Hide Mode</string>
+    <string name="AddToHideMode">Add to Hide Mode</string>
+    <string name="PinOrderInfo">You can manage order of pinned dialogs right here.</string>
+    <!--fork settings view-->
+    <string name="ForkSettingsTitle">Fork Client Settings</string>
+    <string name="SquareAvatars">Square Avatars</string>
+    <string name="SquareAvatarsInfo">Restart required</string>
+    <string name="InAppCamera">Enable In-App Camera</string>
+    <string name="InAppCameraInfo">In Attachments</string>
+    <string name="SyncPins">Sync Pinned Dialogs</string>
+    <string name="SyncPinsInfo">Sync off allows to pin unlimited amount of dialogs</string>
+    <string name="ReverseOrderPins">Reverse Pinned Dialogs Order</string>
+    <string name="ReverseOrderPinsInfo"></string>
+    <string name="UnmutedOnTop">Unmuted Messages are Primary</string>
+    <string name="UnmutedOnTopInfo">Unmuted Messages will be under pinned dialogs</string>
+    <string name="PhotoHasSticker">Send Sticker Info in Photo</string>
+    <string name="PhotoHasStickerInfo">When using Stickers on Photo</string>
+    <string name="PinDialogsOrder">Pin Dialogs Order</string>
 </resources>
