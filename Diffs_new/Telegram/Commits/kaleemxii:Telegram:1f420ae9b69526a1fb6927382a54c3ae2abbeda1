diff --git a/TMessagesProj/src/main/java/DataSchema/Channel.java b/TMessagesProj/src/main/java/DataSchema/Channel.java
index 326fe27d2..61e5a3c41 100644
--- a/TMessagesProj/src/main/java/DataSchema/Channel.java
+++ b/TMessagesProj/src/main/java/DataSchema/Channel.java
@@ -11,14 +11,24 @@
     public User admin;
     public String channelID;
     public String channelTag;
-    private transient HashMap<Integer, User> usersById;
     public String summary;
 
+    public Channel() {
+
+    }
+
     public Channel(Geofence geofence, User admin, String channelID) {
         this.geofence = geofence;
         this.admin = admin;
         this.channelID = channelID;
-        usersById = new HashMap<>();
+    }
+
+    public String getSummary() {
+        return summary;
+    }
+
+    public void setSummary(String summary) {
+        this.summary = summary;
     }
 
     public User getAdmin() {
@@ -53,23 +63,4 @@ public void setChannelTag(String channelTag) {
         this.channelTag = channelTag;
     }
 
-    public String getSummary() {
-        return summary;
-    }
-
-    public void setSummary(String summary) {
-        this.summary = summary;
-    }
-
-    public Collection<User> getUsers() {
-        return usersById.values();
-    }
-
-    public void addUser(User user) {
-        usersById.put(user.userId, user);
-    }
-
-    public void removeUser(String userId) {
-        usersById.remove(userId);
-    }
 }
diff --git a/TMessagesProj/src/main/java/DataSchema/GeoCoordinates.java b/TMessagesProj/src/main/java/DataSchema/GeoCoordinates.java
index 9dd9dffda..788372c24 100644
--- a/TMessagesProj/src/main/java/DataSchema/GeoCoordinates.java
+++ b/TMessagesProj/src/main/java/DataSchema/GeoCoordinates.java
@@ -4,6 +4,9 @@
     public double latitude;
     public double longitude;
 
+    public GeoCoordinates() {
+
+    }
     public GeoCoordinates(double latitude, double longitude) {
         this.latitude = latitude;
         this.longitude = longitude;
diff --git a/TMessagesProj/src/main/java/DataSchema/Geofence.java b/TMessagesProj/src/main/java/DataSchema/Geofence.java
index 3f66f7f5c..e67caaaca 100644
--- a/TMessagesProj/src/main/java/DataSchema/Geofence.java
+++ b/TMessagesProj/src/main/java/DataSchema/Geofence.java
@@ -8,6 +8,10 @@
     public List<GeoCoordinates> coordinates;
     private transient double[] constant, multiple;
 
+    public Geofence() {
+
+    }
+
     public Geofence(GeoCoordinates leftBottom, GeoCoordinates rightBottom, GeoCoordinates leftTop, GeoCoordinates rightTop) {
         coordinates = new ArrayList<>();
 
diff --git a/TMessagesProj/src/main/java/DataSchema/User.java b/TMessagesProj/src/main/java/DataSchema/User.java
index 6b7ceba4e..3d11ad60c 100644
--- a/TMessagesProj/src/main/java/DataSchema/User.java
+++ b/TMessagesProj/src/main/java/DataSchema/User.java
@@ -7,6 +7,10 @@
     public int userId;
     public String userTag;
 
+    public User() {
+
+    }
+
     public User(int userId, String userTag) {
         this.userId = userId;
         this.userTag = userTag;
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/LocationService.java b/TMessagesProj/src/main/java/org/telegram/messenger/LocationService.java
index 049547f33..b8c64c2db 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/LocationService.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/LocationService.java
@@ -24,7 +24,6 @@
 import org.telegram.ui.LaunchActivity;
 
 import java.util.Arrays;
-import java.util.HashMap;
 import java.util.List;
 
 import DataSchema.Channel;
@@ -152,7 +151,8 @@ public void onLocationChanged(final Location loc)
                 loc.getLongitude();
                 int userId = UserConfig.getClientUserId();
                 String userTag = UserConfig.getCurrentUser().first_name;
-                restApiUrl = "http://botchaapis.appspot.com/getchannels?userId=186345694&userTag=gaurav&lat=17.429549&long=78.3411581";
+                restApiUrl = "http://botchaapis.appspot.com/getchannels?userId=" + userId + "&userTag=" + userTag + "&lat=" + loc.getLatitude() + "&long=" + loc.getLongitude();
+                //"http://botchaapis.appspot.com/getchannels?userId=186345694&userTag=Gaurav&lat=17.429549&long=78.3411581";
                 //"http://botchaapis.appspot.com/getchannels?userId=1&lat="+loc.getLatitude()+"&long="+loc.getLongitude();
                 final AsyncTask<Void, Void, List<Channel>> execute;
                 execute = new HttpRequestTask().execute();
@@ -161,40 +161,11 @@ public void onLocationChanged(final Location loc)
                 intent.putExtra("Longitude", loc.getLongitude());
                 intent.putExtra("Provider", loc.getProvider());
                 Toast.makeText(getApplicationContext(), "Changed. UserId: " + userId + ", Lat: " + loc.getLatitude() + ", Long: " + loc.getLongitude(), Toast.LENGTH_SHORT).show();
-                showScreenNotification();
+
                 sendBroadcast(intent);
             }
         }
 
-        public void showScreenNotification() {
-            HashMap<Integer, String> channelsAvailable = new HashMap<Integer, String>();
-            channelsAvailable.put(1, "StciHackathon");
-            channelsAvailable.put(2, "MSHydBuilding3");
-            channelsAvailable.put(3, "MSHyd");
-            NotificationCompat.Builder mBuilder;
-            Intent localIntent = new Intent(ApplicationLoader.applicationContext, LaunchActivity.class);
-            localIntent.setFlags(32768);
-            PendingIntent contentIntent = PendingIntent.getActivity(ApplicationLoader.applicationContext, 0, localIntent, PendingIntent.FLAG_UPDATE_CURRENT);
-            mBuilder = new NotificationCompat.Builder(ApplicationLoader.applicationContext)
-                    .setContentTitle("New channels found")
-                    .setSmallIcon(R.drawable.notification)
-                    .setAutoCancel(true)
-                    .setNumber(1)
-                    .setContentIntent(contentIntent)
-                    .setGroup("messages")
-                    .setGroupSummary(true)
-                    .setColor(0xff2ca5e0);
-            mBuilder.setPriority(NotificationCompat.PRIORITY_HIGH);
-            mBuilder.setCategory(NotificationCompat.CATEGORY_MESSAGE);
-            mBuilder.setContentText("View new channels available at this location");
-            //mBuilder.setStyle(new NotificationCompat.BigTextStyle().bigText("View new channels"));
-            mBuilder.setSound(Settings.System.DEFAULT_NOTIFICATION_URI, AudioManager.STREAM_NOTIFICATION);
-            //showExtraNotifications(mBuilder, true);
-            NotificationManagerCompat notificationManager = NotificationManagerCompat.from(ApplicationLoader.applicationContext);
-            notificationManager.notify(1, mBuilder.build());
-            MessagesController.getInstance().isNewChannelsAvailable = true;
-        }
-
         public void onProviderDisabled(String provider)
         {
             Toast.makeText(getApplicationContext(), "Gps Disabled", Toast.LENGTH_SHORT).show();
@@ -231,7 +202,46 @@ public void onStatusChanged(String provider, int status, Bundle extras)
         protected void onPostExecute(List<Channel> channels) {
             if (channels == null || channels.size() == 0)
                 return;
-            Toast.makeText(getApplicationContext(), "Id: " + channels.get(0).getChannelTag(), Toast.LENGTH_SHORT).show();
+            else {
+                MessagesController.getInstance().channelIds.clear();
+                MessagesController.getInstance().channelTags.clear();
+                for (int i = 0; i < channels.size(); i++) {
+                    MessagesController.getInstance().channelIds.add(channels.get(i).getChannelID());
+                    MessagesController.getInstance().channelTags.add(channels.get(i).getChannelTag());
+                }
+                showScreenNotification();
+            }
+            //Toast.makeText(getApplicationContext(), "Id: " + channels.get(0).getChannelTag(), Toast.LENGTH_SHORT).show();
+        }
+
+        public void showScreenNotification() {
+            if (MessagesController.getInstance().channelTags.size() != 0) {
+                StringBuffer channelNamesBuffer = new StringBuffer();
+                for (int i = 0; i < MessagesController.getInstance().channelTags.size(); i++) {
+                    channelNamesBuffer.append(MessagesController.getInstance().channelTags.get(i));
+                }
+                String channelNames = channelNamesBuffer.toString();
+                NotificationCompat.Builder mBuilder;
+                Intent localIntent = new Intent(ApplicationLoader.applicationContext, LaunchActivity.class);
+                localIntent.setFlags(32768);
+                PendingIntent contentIntent = PendingIntent.getActivity(ApplicationLoader.applicationContext, 0, localIntent, PendingIntent.FLAG_UPDATE_CURRENT);
+                mBuilder = new NotificationCompat.Builder(ApplicationLoader.applicationContext)
+                        .setContentTitle("New channels found")
+                        .setSmallIcon(R.drawable.notification)
+                        .setAutoCancel(true)
+                        .setNumber(1)
+                        .setContentIntent(contentIntent)
+                        .setGroup("messages")
+                        .setGroupSummary(true)
+                        .setColor(0xff2ca5e0);
+                mBuilder.setPriority(NotificationCompat.PRIORITY_HIGH);
+                mBuilder.setCategory(NotificationCompat.CATEGORY_MESSAGE);
+                mBuilder.setContentText("New channels available: " + channelNames);
+                mBuilder.setSound(Settings.System.DEFAULT_NOTIFICATION_URI, AudioManager.STREAM_NOTIFICATION);
+                NotificationManagerCompat notificationManager = NotificationManagerCompat.from(ApplicationLoader.applicationContext);
+                notificationManager.notify(1, mBuilder.build());
+                MessagesController.getInstance().isNewChannelsAvailable = true;
+            }
         }
 
     }
diff --git a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
index 7016429ae..12c7dd652 100644
--- a/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
+++ b/TMessagesProj/src/main/java/org/telegram/messenger/MessagesController.java
@@ -81,6 +81,8 @@
     public boolean isNewChannelsAvailable = false;
     public boolean loadingBlockedUsers = false;
     public ArrayList<Integer> blockedUsers = new ArrayList<>();
+    public ArrayList<String> channelIds = new ArrayList<>();
+    public ArrayList<String> channelTags = new ArrayList<>();
     public boolean loadingDialogs = false;
     public boolean dialogsEndReached = false;
     public boolean gettingDifference = false;
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index 7bdc2c622..fcbf0a3b8 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -82,6 +82,7 @@
 import java.util.ArrayList;
 import java.util.Map;
 
+import BotchaHelper.Helpers;
 import DataSchema.Greeting;
 
 public class LaunchActivity extends Activity implements ActionBarLayout.ActionBarLayoutDelegate, NotificationCenter.NotificationCenterDelegate, DialogsActivity.MessagesActivityDelegate {
@@ -483,41 +484,53 @@ public void onGlobalLayout() {
     }
 
     public void createChannelDialog() {
-        final ArrayList<Integer> mSelectedItems = new ArrayList();  // Where we track the selected items
-        AlertDialog.Builder builder = new AlertDialog.Builder(LaunchActivity.this);
-        // Set the dialog title
-        builder.setTitle("Channels")
-                // Specify the list array, the items to be selected by default (null for none),
-                // and the listener through which to receive callbacks when items are selected
-                .setMultiChoiceItems(new String[]{"Hackathon", "Microsoft"}, null,
-                        new DialogInterface.OnMultiChoiceClickListener() {
-                            @Override
-                            public void onClick(DialogInterface dialog, int which,
-                                                boolean isChecked) {
-                                if (isChecked) {
-                                    // If the user checked the item, add it to the selected items
-                                    mSelectedItems.add(which);
-                                } else if (mSelectedItems.contains(which)) {
-                                    // Else, if the item is already in the array, remove it
-                                    mSelectedItems.remove(Integer.valueOf(which));
+        if (MessagesController.getInstance().channelTags.size() != 0) {
+            final ArrayList<Integer> mSelectedItems = new ArrayList();  // Where we track the selected items
+            AlertDialog.Builder builder = new AlertDialog.Builder(LaunchActivity.this);
+            String[] channelTagNames = new String[MessagesController.getInstance().channelTags.size()];
+            boolean[] isChannelSelected = new boolean[MessagesController.getInstance().channelIds.size()];
+            for (int i = 0; i < MessagesController.getInstance().channelTags.size(); i++) {
+                channelTagNames[i] = MessagesController.getInstance().channelTags.get(i);
+                String channelfullId = MessagesController.getInstance().channelIds.get(i);
+                String channelIdString = channelfullId.substring(0, channelfullId.indexOf(':'));
+                Long channelId = Long.parseLong(channelIdString);
+                isChannelSelected[i] = Helpers.isChannelAllowed(channelId);
+            }
+            // Set the dialog title
+            builder.setTitle("Channels Available")
+                    // Specify the list array, the items to be selected by default (null for none),
+                    // and the listener through which to receive callbacks when items are selected
+                    .setMultiChoiceItems(channelTagNames, isChannelSelected,
+                            new DialogInterface.OnMultiChoiceClickListener() {
+                                @Override
+                                public void onClick(DialogInterface dialog, int which,
+                                                    boolean isChecked) {
+                                    if (isChecked) {
+                                        // If the user checked the item, add it to the selected items
+                                        mSelectedItems.add(which);
+
+                                    } else if (mSelectedItems.contains(which)) {
+                                        // Else, if the item is already in the array, remove it
+                                        mSelectedItems.remove(Integer.valueOf(which));
+                                    }
                                 }
-                            }
-                        })
-                        // Set the action buttons
-                .setPositiveButton("Ok", new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialog, int id) {
-                        // User clicked OK, so save the mSelectedItems results somewhere
-                        // or return them to the component that opened the dialog
-                    }
-                })
-                .setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
-                    @Override
-                    public void onClick(DialogInterface dialog, int id) {
-                    }
-                });
+                            })
+                            // Set the action buttons
+                    .setPositiveButton("Join", new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialog, int id) {
+
+                        }
+                    })
+                    .setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialog, int id) {
 
-        builder.create().show();
+                        }
+                    });
+
+            builder.create().show();
+        }
     }
 
     private void showPasscodeActivity() {
