diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostMediaCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostMediaCell.java
new file mode 100644
index 000000000..e15b04180
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostMediaCell.java
@@ -0,0 +1,1109 @@
+/*
+ * This is the source code of Telegram for Android v. 1.4.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.RectF;
+import android.graphics.drawable.Drawable;
+import android.text.StaticLayout;
+import android.text.TextPaint;
+import android.view.MotionEvent;
+import android.view.SoundEffectConstants;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ImageReceiver;
+import org.telegram.android.MediaController;
+import org.telegram.android.MessageObject;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.TLRPC;
+import org.telegram.messenger.dto.Image;
+import org.telegram.messenger.object.PostObject;
+import org.telegram.ui.Components.AvatarDrawable;
+import org.telegram.ui.Components.RadialProgress;
+import org.telegram.ui.Components.ResourceLoader;
+
+import java.util.Locale;
+
+//TODO-aragats. remove dependency to ChatBaseCell
+public class PostMediaCell extends BaseCell implements MediaController.FileDownloadProgressListener {
+
+
+    public interface PostBaseCellDelegate {
+        void didPressedUserAvatar(PostMediaCell cell);
+
+        void didPressedCancelSendButton(PostMediaCell cell);
+
+        void didLongPressed(PostMediaCell cell);
+
+        void didPressReplyMessage(PostMediaCell cell, int id);
+
+        void didPressUrl(String url);
+
+        void needOpenWebView(String url, String title, String originalUrl, int w, int h);
+
+        boolean canPerformActions();
+    }
+
+    public interface PostMediaCellDelegate {
+        void didClickedImage(PostMediaCell cell);
+
+        void didPressedOther(PostMediaCell cell);
+    }
+
+
+    //TODO from chatBaseCell
+    private PostBaseCellDelegate delegate = null;
+    protected int backgroundWidth = 100;
+    private AvatarDrawable imageDrawable;
+//    private ImageReceiver imageDrawable;
+
+    protected PostObject postObject;
+
+    private int layoutWidth;
+    //TODO height of cell?
+    private int layoutHeight;
+
+    ///
+
+
+    private static TextPaint infoPaint;
+    private static MessageObject lastDownloadedGifMessage = null;
+    private static TextPaint namePaint;
+    private static Paint docBackPaint;
+    private static Paint deleteProgressPaint;
+    private static TextPaint locationTitlePaint;
+    private static TextPaint locationAddressPaint;
+
+    private RadialProgress radialProgress;
+
+    private int photoWidth;
+    private int photoHeight;
+    private TLRPC.PhotoSize currentPhotoObject;
+    private TLRPC.PhotoSize currentPhotoObjectThumb;
+    private String currentUrl;
+    private String currentPhotoFilter;
+    private ImageReceiver photoImage;
+    private boolean photoNotSet = false;
+    private boolean cancelLoading = false;
+    private int additionHeight;
+
+    private boolean allowedToSetPhoto = true;
+
+    private int TAG;
+
+    private boolean imagePressed = false;
+    private boolean otherPressed = false;
+    private int buttonX;
+    private int buttonY;
+
+    private StaticLayout infoLayout;
+    private int infoWidth;
+    private int infoOffset = 0;
+    private String currentInfoString;
+
+    private StaticLayout nameLayout;
+    private int nameWidth = 0;
+    private String currentNameString;
+
+    private PostMediaCellDelegate mediaDelegate = null;
+    private RectF deleteProgressRect = new RectF();
+
+    private int captionX;
+    private int captionY;
+    private int captionHeight;
+
+    public PostMediaCell(Context context) {
+        super(context);
+
+        if (infoPaint == null) {
+            infoPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            infoPaint.setTextSize(AndroidUtilities.dp(12));
+
+            namePaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            namePaint.setColor(0xff212121);
+            namePaint.setTextSize(AndroidUtilities.dp(16));
+
+            docBackPaint = new Paint();
+
+            deleteProgressPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
+            deleteProgressPaint.setColor(0xffe4e2e0);
+
+            locationTitlePaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            locationTitlePaint.setTextSize(AndroidUtilities.dp(14));
+            locationTitlePaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
+
+            locationAddressPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            locationAddressPaint.setTextSize(AndroidUtilities.dp(14));
+
+        }
+
+        TAG = MediaController.getInstance().generateObserverTag();
+
+        photoImage = new ImageReceiver(this);
+        //TODO-aragats from old.
+        imageDrawable = new AvatarDrawable();
+//        imageDrawable = new ImageReceiver(this);
+
+        radialProgress = new RadialProgress(this);
+    }
+
+
+    //TODO two delegates
+
+    public void setMediaDelegate(PostMediaCellDelegate delegate) {
+        this.mediaDelegate = delegate;
+    }
+
+    public void setDelegate(PostBaseCellDelegate delegate) {
+        this.delegate = delegate;
+    }
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        photoImage.onDetachedFromWindow();
+        MediaController.getInstance().removeLoadingFileObserver(this);
+    }
+
+    @Override
+    protected void onAttachedToWindow() {
+        super.onAttachedToWindow();
+        if (photoImage.onAttachedToWindow()) {
+//            updateButtonState(false);
+        }
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        float x = event.getX();
+        float y = event.getY();
+
+        boolean result = false;
+        int side = AndroidUtilities.dp(48);
+        if (event.getAction() == MotionEvent.ACTION_DOWN) {
+            if (delegate == null || delegate.canPerformActions()) {
+                if (x >= photoImage.getImageX() && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
+                    imagePressed = true;
+                    result = true;
+                } else {
+                    //TODO it is my//
+                    otherPressed = true;
+                }
+                if (result) {
+                    startCheckLongPress();
+                }
+            }
+            //TODO my
+        } else if (event.getAction() == MotionEvent.ACTION_UP) {
+            imagePressed = false;
+            playSoundEffect(SoundEffectConstants.CLICK);
+            didClickedImage();
+            invalidate();
+        } else {
+            if (event.getAction() != MotionEvent.ACTION_MOVE) {
+                cancelCheckLongPress();
+            }
+            if (imagePressed) {
+                if (event.getAction() == MotionEvent.ACTION_UP) {
+                    imagePressed = false;
+                    playSoundEffect(SoundEffectConstants.CLICK);
+                    didClickedImage();
+
+                    invalidate();
+                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
+                    imagePressed = false;
+                    invalidate();
+                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
+                    if (!photoImage.isInsideImage(x, y)) {
+                        imagePressed = false;
+                        invalidate();
+                    }
+
+                }
+            } else if (otherPressed) {
+                if (event.getAction() == MotionEvent.ACTION_UP) {
+                    otherPressed = false;
+                    playSoundEffect(SoundEffectConstants.CLICK);
+                    if (mediaDelegate != null) {
+                        mediaDelegate.didPressedOther(this);
+                    }
+                } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {
+                    otherPressed = false;
+                } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
+//                    if (postObject.type == 9) {
+//                        if (!(x >= photoImage.getImageX() + backgroundWidth - AndroidUtilities.dp(50) && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight())) {
+//                            otherPressed = false;
+//                        }
+//                    }
+                }
+            }
+        }
+        if (!result) {
+            result = super.onTouchEvent(event);
+        }
+
+        return result;
+    }
+
+    private void didClickedImage() {
+        if (this.delegate != null) {
+            this.mediaDelegate.didClickedImage(this);
+        }
+    }
+
+
+    private void didPressedButton(boolean animated) {
+
+    }
+
+
+    //TODO-aragats old method from PostMediaOld.
+    public void setPostObject(PostObject postObjectObject) {
+
+        this.postObject = postObjectObject;
+        if (this.postObject != null) {
+//            updateSecretTimeText();
+
+            if (AndroidUtilities.isTablet()) {
+                photoWidth = (int) (AndroidUtilities.getMinTabletSide() * 0.7f);
+            } else {
+                photoWidth = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.7f); // here
+            }
+            photoHeight = photoWidth + AndroidUtilities.dp(100);
+
+            if (photoWidth > AndroidUtilities.getPhotoSize()) {
+                photoWidth = AndroidUtilities.getPhotoSize();
+            }
+            if (photoHeight > AndroidUtilities.getPhotoSize()) {
+                photoHeight = AndroidUtilities.getPhotoSize();
+            }
+
+
+            //TODO Full or Image
+            if (this.postObject.getPreviewImage() != null) {
+                Image previewImage = this.postObject.getPreviewImage();
+
+                float scale = (float) previewImage.getWidth() / (float) photoWidth; // scale calculate
+
+                //TODO placeholder
+//                scale = 1;
+//                post.setWidth(photoWidth);
+//                post.setHeight(photoHeight);
+
+
+                if (previewImage.getSize() == 0) { // size of the file.
+                    previewImage.setSize(-1);
+                }
+
+                int w = (int) (previewImage.getWidth() / scale);
+                int h = (int) (previewImage.getHeight() / scale);
+                if (w == 0) {
+                    w = AndroidUtilities.dp(100);
+                }
+
+                if (h == 0) {
+                    h = AndroidUtilities.dp(100);
+                }
+                if (h > photoHeight) {
+                    float scale2 = h;
+                    h = photoHeight;
+                    scale2 /= h;
+                    w = (int) (w / scale2);
+                } else if (h < AndroidUtilities.dp(120)) {
+                    h = AndroidUtilities.dp(120);
+                    float hScale = (float) previewImage.getHeight() / h;
+                    if (previewImage.getWidth() / hScale < photoWidth) {
+                        w = (int) (previewImage.getWidth() / hScale);
+                    }
+                }
+
+                photoWidth = w;
+                photoHeight = h;
+                backgroundWidth = w + AndroidUtilities.dp(12);
+
+//                photoImage.setImageCoords(avatarLeft, avatarTop + AndroidUtilities.dp(52) + this.block.textLayout.getHeight(), photoWidth, photoHeight);
+
+
+                photoImage.setForcePreview(false);
+
+                int size = (int) (AndroidUtilities.getPhotoSize() / AndroidUtilities.density);
+                photoImage.setImage(previewImage.getUrl(), String.format(Locale.US, "%d_%d", size, size), imageDrawable, null, (int) previewImage.getSize()); // TODO fix it. Create drawable.
+//                photoImage.setImageBitmap(previewImage.getBitmap()); // TODO fix it. Create drawable.
+
+
+                invalidate();
+            }
+        }
+
+    }
+
+
+//    @Override
+//    public void setPostObject(PostObject postObject) {
+//        boolean dataChanged = postObject == postObject ;
+//        if (postObject != postObject) {
+//            currentPhotoObject = null;
+//            currentPhotoObjectThumb = null;
+//            currentUrl = null;
+//            photoNotSet = false;
+//            drawBackground = true;
+//
+//            photoImage.setForcePreview(postObject.isSecretPhoto());
+//            if (postObject.type == 9) {
+//                String name = postObject.getDocumentName();
+//                if (name == null || name.length() == 0) {
+//                    name = LocaleController.getString("AttachDocument", R.string.AttachDocument);
+//                }
+//                int maxWidth;
+//                if (AndroidUtilities.isTablet()) {
+//                    maxWidth = AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(122 + 86 + 24);
+//                } else {
+//                    maxWidth = Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) - AndroidUtilities.dp(122 + 86 + 24);
+//                }
+//                if (currentNameString == null || !currentNameString.equals(name)) {
+//                    currentNameString = name;
+//                    nameLayout = StaticLayoutEx.createStaticLayout(currentNameString, namePaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false, TextUtils.TruncateAt.END, maxWidth, 1);
+//                    if (nameLayout.getLineCount() > 0) {
+//                        nameWidth = Math.min(maxWidth, (int) Math.ceil(nameLayout.getLineWidth(0)));
+//                    } else {
+//                        nameWidth = maxWidth;
+//                    }
+//                }
+//
+//                String fileName = postObject.getFileName();
+//                int idx = fileName.lastIndexOf(".");
+//                String ext = null;
+//                if (idx != -1) {
+//                    ext = fileName.substring(idx + 1);
+//                }
+//                if (ext == null || ext.length() == 0) {
+//                    ext = postObject.messageOwner.media.document.mime_type;
+//                }
+//                ext = ext.toUpperCase();
+//
+//                String str = AndroidUtilities.formatFileSize(postObject.messageOwner.media.document.size) + " " + ext;
+//
+//                if (currentInfoString == null || !currentInfoString.equals(str)) {
+//                    currentInfoString = str;
+//                    infoOffset = 0;
+//                    infoWidth = Math.min(maxWidth, (int) Math.ceil(infoPaint.measureText(currentInfoString)));
+//                    CharSequence str2 = TextUtils.ellipsize(currentInfoString, infoPaint, infoWidth, TextUtils.TruncateAt.END);
+//                    infoLayout = new StaticLayout(str2, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+//                }
+//            } else if (postObject.type == 8) {
+//                gifDrawable = MediaController.getInstance().getGifDrawable(this, false);
+//
+//                String str = AndroidUtilities.formatFileSize(postObject.messageOwner.media.document.size);
+//                if (currentInfoString == null || !currentInfoString.equals(str)) {
+//                    currentInfoString = str;
+//                    infoOffset = 0;
+//                    infoWidth = (int) Math.ceil(infoPaint.measureText(currentInfoString));
+//                    infoLayout = new StaticLayout(currentInfoString, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+//                }
+//                nameLayout = null;
+//                currentNameString = null;
+//            } else if (postObject.type == 3) {
+//                int duration = postObject.messageOwner.media.video.duration;
+//                int minutes = duration / 60;
+//                int seconds = duration - minutes * 60;
+//                String str = String.format("%d:%02d, %s", minutes, seconds, AndroidUtilities.formatFileSize(postObject.messageOwner.media.video.size));
+//                if (currentInfoString == null || !currentInfoString.equals(str)) {
+//                    currentInfoString = str;
+//                    infoOffset = ResourceLoader.videoIconDrawable.getIntrinsicWidth() + AndroidUtilities.dp(4);
+//                    infoWidth = (int) Math.ceil(infoPaint.measureText(currentInfoString));
+//                    infoLayout = new StaticLayout(currentInfoString, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+//                }
+//                nameLayout = null;
+//                currentNameString = null;
+//            } else {
+//                currentInfoString = null;
+//                currentNameString = null;
+//                infoLayout = null;
+//                nameLayout = null;
+//                updateSecretTimeText();
+//            }
+//            if (postObject.type == 9) { //doc
+//                photoWidth = AndroidUtilities.dp(86);
+//                photoHeight = AndroidUtilities.dp(86);
+//                backgroundWidth = photoWidth + Math.max(nameWidth, infoWidth) + AndroidUtilities.dp(68);
+//                currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(postObject.photoThumbs, AndroidUtilities.getPhotoSize());
+//                photoImage.setNeedsQualityThumb(true);
+//                photoImage.setShouldGenerateQualityThumb(true);
+//                photoImage.setParentMessageObject(postObject);
+//                if (currentPhotoObject != null) {
+//                    currentPhotoFilter = String.format(Locale.US, "%d_%d_b", photoWidth, photoHeight);
+//                    photoImage.setImage(null, null, null, null, currentPhotoObject.location, currentPhotoFilter, 0, null, true);
+//                } else {
+//                    photoImage.setImageBitmap((BitmapDrawable) null);
+//                }
+//            } else if (postObject.type == 4) { //geo
+//                double lat = postObject.messageOwner.media.geo.lat;
+//                double lon = postObject.messageOwner.media.geo._long;
+//
+//                if (postObject.messageOwner.media.title != null && postObject.messageOwner.media.title.length() > 0) {
+//                    int maxWidth = (AndroidUtilities.isTablet() ? AndroidUtilities.getMinTabletSide() : Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y)) - AndroidUtilities.dp((isChat && !postObject.isOut() ? 102 : 40) + 86 + 24);
+//                    nameLayout = StaticLayoutEx.createStaticLayout(postObject.messageOwner.media.title, locationTitlePaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false, TextUtils.TruncateAt.END, maxWidth - AndroidUtilities.dp(4), 3);
+//                    int lineCount = nameLayout.getLineCount();
+//                    if (postObject.messageOwner.media.address != null && postObject.messageOwner.media.address.length() > 0) {
+//                        infoLayout = StaticLayoutEx.createStaticLayout(postObject.messageOwner.media.address, locationAddressPaint, maxWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false, TextUtils.TruncateAt.END, maxWidth - AndroidUtilities.dp(4), Math.min(3, 4 - lineCount));
+//                    } else {
+//                        infoLayout = null;
+//                    }
+//
+//                    media = false;
+//                    measureTime(postObject);
+//                    photoWidth = AndroidUtilities.dp(86);
+//                    photoHeight = AndroidUtilities.dp(86);
+//                    maxWidth = timeWidth + AndroidUtilities.dp(postObject.isOut() ? 29 : 9);
+//                    for (int a = 0; a < lineCount; a++) {
+//                        maxWidth = (int) Math.max(maxWidth, nameLayout.getLineWidth(a) + AndroidUtilities.dp(16));
+//                    }
+//                    if (infoLayout != null) {
+//                        for (int a = 0; a < infoLayout.getLineCount(); a++) {
+//                            maxWidth = (int) Math.max(maxWidth, infoLayout.getLineWidth(a) + AndroidUtilities.dp(16));
+//                        }
+//                    }
+//                    backgroundWidth = photoWidth + AndroidUtilities.dp(21) + maxWidth;
+//                    currentUrl = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=13&size=72x72&maptype=roadmap&scale=%d&markers=color:red|size:big|%f,%f&sensor=false", lat, lon, Math.min(2, (int) Math.ceil(AndroidUtilities.density)), lat, lon);
+//                } else {
+//                    photoWidth = AndroidUtilities.dp(200);
+//                    photoHeight = AndroidUtilities.dp(100);
+//                    backgroundWidth = photoWidth + AndroidUtilities.dp(12);
+//                    currentUrl = String.format(Locale.US, "https://maps.googleapis.com/maps/api/staticmap?center=%f,%f&zoom=13&size=200x100&maptype=roadmap&scale=%d&markers=color:red|size:big|%f,%f&sensor=false", lat, lon, Math.min(2, (int) Math.ceil(AndroidUtilities.density)), lat, lon);
+//                }
+//
+//                photoImage.setNeedsQualityThumb(false);
+//                photoImage.setShouldGenerateQualityThumb(false);
+//                photoImage.setParentMessageObject(null);
+//                photoImage.setImage(currentUrl, null, postObject.isOut() ? ResourceLoader.geoOutDrawable : ResourceLoader.geoInDrawable, null, 0);
+//            } else if (postObject.type == 13) { //webp
+//                drawBackground = false;
+//                for (TLRPC.DocumentAttribute attribute : postObject.messageOwner.media.document.attributes) {
+//                    if (attribute instanceof TLRPC.TL_documentAttributeImageSize) {
+//                        photoWidth = attribute.w;
+//                        photoHeight = attribute.h;
+//                        break;
+//                    }
+//                }
+//                float maxHeight = AndroidUtilities.displaySize.y * 0.4f;
+//                float maxWidth;
+//                if (AndroidUtilities.isTablet()) {
+//                    maxWidth = AndroidUtilities.getMinTabletSide() * 0.5f;
+//                } else {
+//                    maxWidth = AndroidUtilities.displaySize.x * 0.5f;
+//                }
+//                if (photoWidth == 0) {
+//                    photoHeight = (int) maxHeight;
+//                    photoWidth = photoHeight + AndroidUtilities.dp(100);
+//                }
+//                if (photoHeight > maxHeight) {
+//                    photoWidth *= maxHeight / photoHeight;
+//                    photoHeight = (int) maxHeight;
+//                }
+//                if (photoWidth > maxWidth) {
+//                    photoHeight *= maxWidth / photoWidth;
+//                    photoWidth = (int) maxWidth;
+//                }
+//                backgroundWidth = photoWidth + AndroidUtilities.dp(12);
+//                currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(postObject.photoThumbs, 80);
+//                photoImage.setNeedsQualityThumb(false);
+//                photoImage.setShouldGenerateQualityThumb(false);
+//                photoImage.setParentMessageObject(null);
+//                if (postObject.messageOwner.attachPath != null && postObject.messageOwner.attachPath.length() > 0) {
+//                    File f = new File(postObject.messageOwner.attachPath);
+//                    if (f.exists()) {
+//                        photoImage.setImage(null, postObject.messageOwner.attachPath,
+//                                String.format(Locale.US, "%d_%d", photoWidth, photoHeight),
+//                                null,
+//                                currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null,
+//                                "b1",
+//                                postObject.messageOwner.media.document.size, "webp", true);
+//                    }
+//                } else if (postObject.messageOwner.media.document.id != 0) {
+//                    photoImage.setImage(postObject.messageOwner.media.document, null,
+//                            String.format(Locale.US, "%d_%d", photoWidth, photoHeight),
+//                            null,
+//                            currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null,
+//                            "b1",
+//                            postObject.messageOwner.media.document.size, "webp", true);
+//                }
+//            } else {
+//                if (AndroidUtilities.isTablet()) {
+//                    photoWidth = (int) (AndroidUtilities.getMinTabletSide() * 0.7f);
+//                } else {
+//                    photoWidth = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.7f);
+//                }
+//                photoHeight = photoWidth + AndroidUtilities.dp(100);
+//
+//                if (photoWidth > AndroidUtilities.getPhotoSize()) {
+//                    photoWidth = AndroidUtilities.getPhotoSize();
+//                }
+//                if (photoHeight > AndroidUtilities.getPhotoSize()) {
+//                    photoHeight = AndroidUtilities.getPhotoSize();
+//                }
+//
+//                if (postObject.type == 1) {
+//                    photoImage.setNeedsQualityThumb(false);
+//                    photoImage.setShouldGenerateQualityThumb(false);
+//                    photoImage.setParentMessageObject(null);
+//                    currentPhotoObjectThumb = FileLoader.getClosestPhotoSizeWithSize(postObject.photoThumbs, 80);
+//                } else if (postObject.type == 3) {
+//                    photoImage.setNeedsQualityThumb(true);
+//                    photoImage.setShouldGenerateQualityThumb(true);
+//                    photoImage.setParentMessageObject(postObject);
+//                } else if (postObject.type == 8) {
+//                    photoImage.setNeedsQualityThumb(true);
+//                    photoImage.setShouldGenerateQualityThumb(true);
+//                    photoImage.setParentMessageObject(postObject);
+//                }
+//                //8 - gif, 1 - photo, 3 - video
+//
+//                if (postObject.caption != null) {
+//                    media = false;
+//                }
+//
+//                currentPhotoObject = FileLoader.getClosestPhotoSizeWithSize(postObject.photoThumbs, AndroidUtilities.getPhotoSize());
+//
+//                if (currentPhotoObject != null) {
+//                    if (currentPhotoObject == currentPhotoObjectThumb) {
+//                        currentPhotoObjectThumb = null;
+//                    }
+//                    boolean noSize = false;
+//                    if (postObject.type == 3 || postObject.type == 8) {
+//                        noSize = true;
+//                    }
+//                    float scale = (float) currentPhotoObject.w / (float) photoWidth;
+//
+//                    if (!noSize && currentPhotoObject.size == 0) {
+//                        currentPhotoObject.size = -1;
+//                    }
+//
+//                    int w = (int) (currentPhotoObject.w / scale);
+//                    int h = (int) (currentPhotoObject.h / scale);
+//                    if (w == 0) {
+//                        if (postObject.type == 3) {
+//                            w = infoWidth + infoOffset + AndroidUtilities.dp(16);
+//                        } else {
+//                            w = AndroidUtilities.dp(100);
+//                        }
+//                    }
+//                    if (h == 0) {
+//                        h = AndroidUtilities.dp(100);
+//                    }
+//                    if (h > photoHeight) {
+//                        float scale2 = h;
+//                        h = photoHeight;
+//                        scale2 /= h;
+//                        w = (int) (w / scale2);
+//                    } else if (h < AndroidUtilities.dp(120)) {
+//                        h = AndroidUtilities.dp(120);
+//                        float hScale = (float) currentPhotoObject.h / h;
+//                        if (currentPhotoObject.w / hScale < photoWidth) {
+//                            w = (int) (currentPhotoObject.w / hScale);
+//                        }
+//                    }
+//                    measureTime(postObject);
+//                    int timeWidthTotal = timeWidth + AndroidUtilities.dp(14 + (postObject.isOut() ? 20 : 0));
+//                    if (w < timeWidthTotal) {
+//                        w = timeWidthTotal;
+//                    }
+//
+//                    if (postObject.isSecretPhoto()) {
+//                        if (AndroidUtilities.isTablet()) {
+//                            w = h = (int) (AndroidUtilities.getMinTabletSide() * 0.5f);
+//                        } else {
+//                            w = h = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.5f);
+//                        }
+//                    }
+//
+//                    photoWidth = w;
+//                    photoHeight = h;
+//                    backgroundWidth = w + AndroidUtilities.dp(12);
+//                    if (!media) {
+//                        backgroundWidth += AndroidUtilities.dp(9);
+//                    }
+//                    if (postObject.caption != null) {
+//                        nameLayout = new StaticLayout(postObject.caption, MessageObject.textPaint, photoWidth - AndroidUtilities.dp(10), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+//                        if (nameLayout.getLineCount() > 0) {
+//                            captionHeight = nameLayout.getHeight();
+//                            additionHeight += captionHeight + AndroidUtilities.dp(9);
+//                            float lastLineWidth = nameLayout.getLineWidth(nameLayout.getLineCount() - 1) + nameLayout.getLineLeft(nameLayout.getLineCount() - 1);
+//                            if (photoWidth - AndroidUtilities.dp(8) - lastLineWidth < timeWidthTotal) {
+//                                additionHeight += AndroidUtilities.dp(14);
+//                            }
+//                        }
+//                    }
+//
+//                    currentPhotoFilter = String.format(Locale.US, "%d_%d", (int) (w / AndroidUtilities.density), (int) (h / AndroidUtilities.density));
+//                    if (postObject.photoThumbs.size() > 1 || postObject.type == 3 || postObject.type == 8) {
+//                        if (postObject.isSecretPhoto()) {
+//                            currentPhotoFilter += "_b2";
+//                        } else {
+//                            currentPhotoFilter += "_b";
+//                        }
+//                    }
+//
+//                    String fileName = FileLoader.getAttachFileName(currentPhotoObject);
+//                    if (postObject.type == 1) {
+//                        boolean photoExist = true;
+//                        File cacheFile = FileLoader.getPathToMessage(postObject.messageOwner);
+//                        if (!cacheFile.exists()) {
+//                            photoExist = false;
+//                        } else {
+//                            MediaController.getInstance().removeLoadingFileObserver(this);
+//                        }
+//
+//                        if (photoExist || MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_PHOTO) || FileLoader.getInstance().isLoadingFile(fileName)) {
+//                            if (allowedToSetPhoto || ImageLoader.getInstance().getImageFromMemory(currentPhotoObject.location, null, currentPhotoFilter) != null) {
+//                                allowedToSetPhoto = true;
+//                                photoImage.setImage(currentPhotoObject.location, currentPhotoFilter, currentPhotoObjectThumb != null ? currentPhotoObjectThumb.location : null, currentPhotoFilter, noSize ? 0 : currentPhotoObject.size, null, false);
+//                            } else if (currentPhotoObjectThumb != null) {
+//                                photoImage.setImage(null, null, currentPhotoObjectThumb.location, currentPhotoFilter, 0, null, false);
+//                            } else {
+//                                photoImage.setImageBitmap((Drawable) null);
+//                            }
+//                        } else {
+//                            photoNotSet = true;
+//                            if (currentPhotoObjectThumb != null) {
+//                                photoImage.setImage(null, null, currentPhotoObjectThumb.location, currentPhotoFilter, 0, null, false);
+//                            } else {
+//                                photoImage.setImageBitmap((Drawable) null);
+//                            }
+//                        }
+//                    } else {
+//                        photoImage.setImage(null, null, currentPhotoObject.location, currentPhotoFilter, 0, null, false);
+//                    }
+//                } else {
+//                    photoImage.setImageBitmap((Bitmap) null);
+//                }
+//            }
+//            super.setMessageObject(postObject);
+//
+//            invalidate();
+//        }
+//    }
+
+    public ImageReceiver getPhotoImage() {
+        return photoImage;
+    }
+
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), photoHeight + AndroidUtilities.dp(14) + additionHeight);
+//        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), photoHeight + AndroidUtilities.dp(14) + namesOffset + additionHeight);
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        super.onLayout(changed, left, top, right, bottom);
+
+        int x = layoutWidth - backgroundWidth - AndroidUtilities.dp(3);
+
+
+//        photoImage.setImageCoords(x, AndroidUtilities.dp(7) + namesOffset, photoWidth, photoHeight);
+        photoImage.setImageCoords(x, AndroidUtilities.dp(7), photoWidth, photoHeight);
+        int size = AndroidUtilities.dp(48);
+        buttonX = (int) (x + (photoWidth - size) / 2.0f);
+//        buttonY = (int) (AndroidUtilities.dp(7) + (photoHeight - size) / 2.0f) + namesOffset;
+        buttonY = (int) (AndroidUtilities.dp(7) + (photoHeight - size) / 2.0f);
+
+        radialProgress.setProgressRect(buttonX, buttonY, buttonX + AndroidUtilities.dp(48), buttonY + AndroidUtilities.dp(48));
+        deleteProgressRect.set(buttonX + AndroidUtilities.dp(3), buttonY + AndroidUtilities.dp(3), buttonX + AndroidUtilities.dp(45), buttonY + AndroidUtilities.dp(45));
+    }
+
+
+    public void setAllowedToSetPhoto(boolean value) {
+        if (allowedToSetPhoto == value) {
+            return;
+        }
+        if (postObject != null) {
+            allowedToSetPhoto = value;
+            if (value) {
+                PostObject temp = postObject;
+                postObject = null;
+                setPostObject(temp);
+            }
+        }
+    }
+
+
+//    @Override
+//    protected void onDraw(Canvas canvas) {
+//        if (postObject == null) {
+//            return;
+//        }
+//
+////        if (!wasLayout) {
+////            requestLayout();
+////            return;
+////        }
+//
+//        if (isAvatarVisible) {
+//            avatarImage.draw(canvas);
+//        }
+//
+//        Drawable currentBackgroundDrawable;
+//        if (currentMessageObject.isOut()) {
+//            if (isPressed() && isCheckPressed || !isCheckPressed && isPressed || isHighlighted) {
+//                if (!media) {
+//                    currentBackgroundDrawable = ResourceLoader.backgroundDrawableOutSelected;
+//                } else {
+//                    currentBackgroundDrawable = ResourceLoader.backgroundMediaDrawableOutSelected;
+//                }
+//            } else {
+//                if (!media) {
+//                    currentBackgroundDrawable = ResourceLoader.backgroundDrawableOut;
+//                } else {
+//                    currentBackgroundDrawable = ResourceLoader.backgroundMediaDrawableOut;
+//                }
+//            }
+//            setDrawableBounds(currentBackgroundDrawable, layoutWidth - backgroundWidth - (!media ? 0 : AndroidUtilities.dp(9)), AndroidUtilities.dp(1), backgroundWidth, layoutHeight - AndroidUtilities.dp(2));
+//        } else {
+//            if (isPressed() && isCheckPressed || !isCheckPressed && isPressed || isHighlighted) {
+//                if (!media) {
+//                    currentBackgroundDrawable = ResourceLoader.backgroundDrawableInSelected;
+//                } else {
+//                    currentBackgroundDrawable = ResourceLoader.backgroundMediaDrawableInSelected;
+//                }
+//            } else {
+//                if (!media) {
+//                    currentBackgroundDrawable = ResourceLoader.backgroundDrawableIn;
+//                } else {
+//                    currentBackgroundDrawable = ResourceLoader.backgroundMediaDrawableIn;
+//                }
+//            }
+//            if (isChat) {
+//                setDrawableBounds(currentBackgroundDrawable, AndroidUtilities.dp(52 + (!media ? 0 : 9)), AndroidUtilities.dp(1), backgroundWidth, layoutHeight - AndroidUtilities.dp(2));
+//            } else {
+//                setDrawableBounds(currentBackgroundDrawable, (!media ? 0 : AndroidUtilities.dp(9)), AndroidUtilities.dp(1), backgroundWidth, layoutHeight - AndroidUtilities.dp(2));
+//            }
+//        }
+//        if (drawBackground) {
+//            currentBackgroundDrawable.draw(canvas);
+//        }
+//
+//        onAfterBackgroundDraw(canvas);
+//
+//        if (drawName && nameLayout != null) {
+//            canvas.save();
+//            canvas.translate(currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(19) - nameOffsetX, AndroidUtilities.dp(10));
+//            namePaint.setColor(AvatarDrawable.getNameColorForId(currentUser.id));
+//            nameLayout.draw(canvas);
+//            canvas.restore();
+//        }
+//
+//        if (drawForwardedName && forwardedNameLayout != null) {
+//            forwardNameY = AndroidUtilities.dp(10 + (drawName ? 19 : 0));
+//            if (currentMessageObject.isOut()) {
+//                forwardNamePaint.setColor(0xff4a923c);
+//                forwardNameX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(10);
+//            } else {
+//                forwardNamePaint.setColor(0xff006fc8);
+//                forwardNameX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(19);
+//            }
+//            canvas.save();
+//            canvas.translate(forwardNameX - forwardNameOffsetX, forwardNameY);
+//            forwardedNameLayout.draw(canvas);
+//            canvas.restore();
+//        }
+//
+//        if (currentMessageObject.isReply()) {
+//            if (currentMessageObject.type == 13) {
+//                replyLinePaint.setColor(0xffffffff);
+//                replyNamePaint.setColor(0xffffffff);
+//                replyTextPaint.setColor(0xffffffff);
+//                int backWidth;
+//                if (currentMessageObject.isOut()) {
+//                    backWidth = currentBackgroundDrawable.getBounds().left - AndroidUtilities.dp(32);
+//                    replyStartX = currentBackgroundDrawable.getBounds().left - AndroidUtilities.dp(9) - backWidth;
+//                } else {
+//                    backWidth = getWidth() - currentBackgroundDrawable.getBounds().right - AndroidUtilities.dp(32);
+//                    replyStartX = currentBackgroundDrawable.getBounds().right + AndroidUtilities.dp(23);
+//                }
+//                Drawable back;
+//                if (ApplicationLoader.isCustomTheme()) {
+//                    back = ResourceLoader.backgroundBlack;
+//                } else {
+//                    back = ResourceLoader.backgroundBlue;
+//                }
+//                replyStartY = layoutHeight - AndroidUtilities.dp(58);
+//                back.setBounds(replyStartX - AndroidUtilities.dp(7), replyStartY - AndroidUtilities.dp(6), replyStartX - AndroidUtilities.dp(7) + backWidth, replyStartY + AndroidUtilities.dp(41));
+//                back.draw(canvas);
+//            } else {
+//                if (currentMessageObject.isOut()) {
+//                    replyLinePaint.setColor(0xff8dc97a);
+//                    replyNamePaint.setColor(0xff61a349);
+//                    if (currentMessageObject.replyMessageObject != null && currentMessageObject.replyMessageObject.type == 0) {
+//                        replyTextPaint.setColor(0xff000000);
+//                    } else {
+//                        replyTextPaint.setColor(0xff70b15c);
+//                    }
+//                    replyStartX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(11);
+//                } else {
+//                    replyLinePaint.setColor(0xff6c9fd2);
+//                    replyNamePaint.setColor(0xff377aae);
+//                    if (currentMessageObject.replyMessageObject != null && currentMessageObject.replyMessageObject.type == 0) {
+//                        replyTextPaint.setColor(0xff000000);
+//                    } else {
+//                        replyTextPaint.setColor(0xff999999);
+//                    }
+//                    if (currentMessageObject.contentType == 1 && media) {
+//                        replyStartX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(11);
+//                    } else {
+//                        replyStartX = currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(20);
+//                    }
+//                }
+//                replyStartY = AndroidUtilities.dp(12 + (drawForwardedName && forwardedNameLayout != null ? 36 : 0) + (drawName && nameLayout != null ? 20 : 0));
+//            }
+//            canvas.drawRect(replyStartX, replyStartY, replyStartX + AndroidUtilities.dp(2), replyStartY + AndroidUtilities.dp(35), replyLinePaint);
+//            if (needReplyImage) {
+//                replyImageReceiver.setImageCoords(replyStartX + AndroidUtilities.dp(10), replyStartY, AndroidUtilities.dp(35), AndroidUtilities.dp(35));
+//                replyImageReceiver.draw(canvas);
+//            }
+//            if (replyNameLayout != null) {
+//                canvas.save();
+//                canvas.translate(replyStartX - replyNameOffset + AndroidUtilities.dp(10 + (needReplyImage ? 44 : 0)), replyStartY);
+//                replyNameLayout.draw(canvas);
+//                canvas.restore();
+//            }
+//            if (replyTextLayout != null) {
+//                canvas.save();
+//                canvas.translate(replyStartX - replyTextOffset + AndroidUtilities.dp(10 + (needReplyImage ? 44 : 0)), replyStartY + AndroidUtilities.dp(19));
+//                replyTextLayout.draw(canvas);
+//                canvas.restore();
+//            }
+//        }
+//
+//        if (drawTime || !media) {
+//            if (media) {
+//                setDrawableBounds(ResourceLoader.mediaBackgroundDrawable, timeX - AndroidUtilities.dp(3), layoutHeight - AndroidUtilities.dp(27.5f), timeWidth + AndroidUtilities.dp(6 + (currentMessageObject.isOut() ? 20 : 0)), AndroidUtilities.dp(16.5f));
+//                ResourceLoader.mediaBackgroundDrawable.draw(canvas);
+//
+//                canvas.save();
+//                canvas.translate(timeX, layoutHeight - AndroidUtilities.dp(12.0f) - timeLayout.getHeight());
+//                timeLayout.draw(canvas);
+//                canvas.restore();
+//            } else {
+//                canvas.save();
+//                canvas.translate(timeX, layoutHeight - AndroidUtilities.dp(6.5f) - timeLayout.getHeight());
+//                timeLayout.draw(canvas);
+//                canvas.restore();
+//            }
+//
+//            if (currentMessageObject.isOut()) {
+//                boolean drawCheck1 = false;
+//                boolean drawCheck2 = false;
+//                boolean drawClock = false;
+//                boolean drawError = false;
+//                boolean isBroadcast = (int)(currentMessageObject.getDialogId() >> 32) == 1;
+//
+//                if (currentMessageObject.isSending()) {
+//                    drawCheck1 = false;
+//                    drawCheck2 = false;
+//                    drawClock = true;
+//                    drawError = false;
+//                } else if (currentMessageObject.isSendError()) {
+//                    drawCheck1 = false;
+//                    drawCheck2 = false;
+//                    drawClock = false;
+//                    drawError = true;
+//                } else if (currentMessageObject.isSent()) {
+//                    if (!currentMessageObject.isUnread()) {
+//                        drawCheck1 = true;
+//                        drawCheck2 = true;
+//                    } else {
+//                        drawCheck1 = false;
+//                        drawCheck2 = true;
+//                    }
+//                    drawClock = false;
+//                    drawError = false;
+//                }
+//
+//                if (drawClock) {
+//                    if (!media) {
+//                        setDrawableBounds(ResourceLoader.clockDrawable, layoutWidth - AndroidUtilities.dp(18.5f) - ResourceLoader.clockDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.5f) - ResourceLoader.clockDrawable.getIntrinsicHeight());
+//                        ResourceLoader.clockDrawable.draw(canvas);
+//                    } else {
+//                        setDrawableBounds(ResourceLoader.clockMediaDrawable, layoutWidth - AndroidUtilities.dp(22.0f) - ResourceLoader.clockMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.0f) - ResourceLoader.clockMediaDrawable.getIntrinsicHeight());
+//                        ResourceLoader.clockMediaDrawable.draw(canvas);
+//                    }
+//                }
+//                if (isBroadcast) {
+//                    if (drawCheck1 || drawCheck2) {
+//                        if (!media) {
+//                            setDrawableBounds(ResourceLoader.broadcastDrawable, layoutWidth - AndroidUtilities.dp(20.5f) - ResourceLoader.broadcastDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.0f) - ResourceLoader.broadcastDrawable.getIntrinsicHeight());
+//                            ResourceLoader.broadcastDrawable.draw(canvas);
+//                        } else {
+//                            setDrawableBounds(ResourceLoader.broadcastMediaDrawable, layoutWidth - AndroidUtilities.dp(24.0f) - ResourceLoader.broadcastMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.0f) - ResourceLoader.broadcastMediaDrawable.getIntrinsicHeight());
+//                            ResourceLoader.broadcastMediaDrawable.draw(canvas);
+//                        }
+//                    }
+//                } else {
+//                    if (drawCheck2) {
+//                        if (!media) {
+//                            if (drawCheck1) {
+//                                setDrawableBounds(ResourceLoader.checkDrawable, layoutWidth - AndroidUtilities.dp(22.5f) - ResourceLoader.checkDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.0f) - ResourceLoader.checkDrawable.getIntrinsicHeight());
+//                            } else {
+//                                setDrawableBounds(ResourceLoader.checkDrawable, layoutWidth - AndroidUtilities.dp(18.5f) - ResourceLoader.checkDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.0f) - ResourceLoader.checkDrawable.getIntrinsicHeight());
+//                            }
+//                            ResourceLoader.checkDrawable.draw(canvas);
+//                        } else {
+//                            if (drawCheck1) {
+//                                setDrawableBounds(ResourceLoader.checkMediaDrawable, layoutWidth - AndroidUtilities.dp(26.0f) - ResourceLoader.checkMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.0f) - ResourceLoader.checkMediaDrawable.getIntrinsicHeight());
+//                            } else {
+//                                setDrawableBounds(ResourceLoader.checkMediaDrawable, layoutWidth - AndroidUtilities.dp(22.0f) - ResourceLoader.checkMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.0f) - ResourceLoader.checkMediaDrawable.getIntrinsicHeight());
+//                            }
+//                            ResourceLoader.checkMediaDrawable.draw(canvas);
+//                        }
+//                    }
+//                    if (drawCheck1) {
+//                        if (!media) {
+//                            setDrawableBounds(ResourceLoader.halfCheckDrawable, layoutWidth - AndroidUtilities.dp(18) - ResourceLoader.halfCheckDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(8.0f) - ResourceLoader.halfCheckDrawable.getIntrinsicHeight());
+//                            ResourceLoader.halfCheckDrawable.draw(canvas);
+//                        } else {
+//                            setDrawableBounds(ResourceLoader.halfCheckMediaDrawable, layoutWidth - AndroidUtilities.dp(20.5f) - ResourceLoader.halfCheckMediaDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(13.0f) - ResourceLoader.halfCheckMediaDrawable.getIntrinsicHeight());
+//                            ResourceLoader.halfCheckMediaDrawable.draw(canvas);
+//                        }
+//                    }
+//                }
+//                if (drawError) {
+//                    if (!media) {
+//                        setDrawableBounds(ResourceLoader.errorDrawable, layoutWidth - AndroidUtilities.dp(18) - ResourceLoader.errorDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(6.5f) - ResourceLoader.errorDrawable.getIntrinsicHeight());
+//                        ResourceLoader.errorDrawable.draw(canvas);
+//                    } else {
+//                        setDrawableBounds(ResourceLoader.errorDrawable, layoutWidth - AndroidUtilities.dp(20.5f) - ResourceLoader.errorDrawable.getIntrinsicWidth(), layoutHeight - AndroidUtilities.dp(12.5f) - ResourceLoader.errorDrawable.getIntrinsicHeight());
+//                        ResourceLoader.errorDrawable.draw(canvas);
+//                    }
+//                }
+//            }
+//        }
+//    }
+
+    //TODO-aragats is old method from previous method. But I should rake from ChatBaseCell
+    @Override
+    protected void onDraw(Canvas canvas) {
+        if (this.postObject == null) {
+            return;
+        }
+
+//        if (!wasLayout) {
+//            requestLayout();
+//            return;
+//        }
+
+
+
+        Drawable currentBackgroundDrawable = ResourceLoader.backgroundMediaDrawableOut;
+//        currentBackgroundDrawable = backgroundMediaDrawableOutSelected;
+
+
+        setDrawableBounds(currentBackgroundDrawable, layoutWidth - backgroundWidth - AndroidUtilities.dp(9), AndroidUtilities.dp(1), backgroundWidth, layoutHeight - AndroidUtilities.dp(2));
+
+        // set background for message
+        currentBackgroundDrawable.draw(canvas);
+
+        onAfterBackgroundDraw(canvas);
+
+//        if (nameLayout != null) {
+//            canvas.save();
+//            canvas.translate(currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(19) - nameOffsetX, AndroidUtilities.dp(10));
+//            namePaint.setColor(AvatarDrawable.getNameColorForId(currentUser.id));
+//            nameLayout.draw(canvas);
+//            canvas.restore();
+//        }
+
+    }
+
+
+
+    //    @Override
+    protected void onAfterBackgroundDraw(Canvas canvas) {
+        boolean imageDrawn = false;
+
+//            photoImage.setPressed(isPressed() && isCheckPressed || !isCheckPressed && isPressed || isHighlighted);
+//        photoImage.setPressed(isPressed());
+//        photoImage.setVisible(!PhotoViewer.getInstance().isShowingImage(postObject), false);
+//        imageDrawn = photoImage.draw(canvas);
+
+
+        radialProgress.setHideCurrentDrawable(false);
+        radialProgress.setProgressColor(0xffffffff);
+
+
+        radialProgress.onDraw(canvas);
+
+//        if (nameLayout != null) {
+//            canvas.save();
+//            canvas.translate(captionX = photoImage.getImageX() + AndroidUtilities.dp(5), captionY = photoImage.getImageY() + photoHeight + AndroidUtilities.dp(6));
+//            if (pressedLink != null) {
+//                canvas.drawPath(urlPath, urlPaint);
+//            }
+//            nameLayout.draw(canvas);
+//            canvas.restore();
+//        }
+//        if (infoLayout != null ) {
+//            infoPaint.setColor(0xffffffff);
+//            setDrawableBounds(ResourceLoader.mediaBackgroundDrawable, photoImage.getImageX() + AndroidUtilities.dp(4), photoImage.getImageY() + AndroidUtilities.dp(4), infoWidth + AndroidUtilities.dp(8) + infoOffset, AndroidUtilities.dp(16.5f));
+//            ResourceLoader.mediaBackgroundDrawable.draw(canvas);
+//
+//            canvas.save();
+//            canvas.translate(photoImage.getImageX() + AndroidUtilities.dp(8) + infoOffset, photoImage.getImageY() + AndroidUtilities.dp(5.5f));
+//            infoLayout.draw(canvas);
+//            canvas.restore();
+//        }
+
+        photoImage.draw(canvas);
+
+    }
+
+    @Override
+    public void onFailedDownload(String fileName) {
+//        updateButtonState(false);
+    }
+
+    @Override
+    public void onSuccessDownload(String fileName) {
+//        radialProgress.setProgress(1, true);
+//        if (postObject.type == 8 && lastDownloadedGifMessage != null && lastDownloadedGifMessage.getId() == postObject.getId()) {
+//            buttonState = 2;
+//            didPressedButton(true);
+//        } else if (!photoNotSet) {
+//            updateButtonState(true);
+//        }
+//        if (photoNotSet) {
+//            setPostObject(postObject);
+//        }
+    }
+
+    @Override
+    public void onProgressDownload(String fileName, float progress) {
+//        radialProgress.setProgress(progress, true);
+//        if (buttonState != 1) {
+//            updateButtonState(false);
+//        }
+    }
+
+    @Override
+    public void onProgressUpload(String fileName, float progress, boolean isEncrypted) {
+        radialProgress.setProgress(progress, true);
+    }
+
+    @Override
+    public int getObserverTag() {
+        return TAG;
+    }
+
+
+
+    public PostObject getPostObject() {
+        return postObject;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostMediaCellOld.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostMediaCellOld.java
new file mode 100644
index 000000000..8f606a1e8
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/PostMediaCellOld.java
@@ -0,0 +1,395 @@
+/*
+ * This is the source code of Telegram for Android v. 1.4.x.
+ * It is licensed under GNU GPL v. 2 or later.
+ * You should have received a copy of the license in this archive (see LICENSE).
+ *
+ * Copyright Nikolai Kudashov, 2013-2014.
+ */
+
+package org.telegram.ui.Cells;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.RectF;
+import android.graphics.drawable.Drawable;
+import android.text.Layout;
+import android.text.StaticLayout;
+import android.text.TextPaint;
+import android.text.TextUtils;
+import android.view.MotionEvent;
+import android.view.SoundEffectConstants;
+
+import java.util.Locale;
+
+import org.telegram.android.AndroidUtilities;
+import org.telegram.android.ImageReceiver;
+import org.telegram.messenger.dto.Image;
+import org.telegram.messenger.object.PostObject;
+import org.telegram.messenger.object.UserObject;
+import org.telegram.ui.Components.AvatarDrawable;
+import org.telegram.ui.Components.RadialProgress;
+//TODO-aragats
+public class PostMediaCellOld extends BaseCell {
+
+    public static interface PostMediaCellDelegate {
+        public abstract void didClickedImage(PostMediaCellOld cell);
+
+        public abstract void didPressedOther(PostMediaCellOld cell);
+
+        public abstract void didPressedUserAvatar(PostCell cell, UserObject userObject);
+
+        public abstract void didPressedCancelSendButton(PostCell cell);
+
+        public abstract void didLongPressed(PostCell cell);
+
+        public abstract boolean canPerformActions();
+
+    }
+
+    private int backgroundWidth = 100;
+
+
+    private int layoutWidth;
+    //TODO height of cell?
+    private int layoutHeight;
+
+
+    private int buttonX;
+    private int buttonY;
+
+    private PostObject postObject;
+    private AvatarDrawable imageDrawable;
+
+    private static Drawable backgroundMediaDrawableOutSelected;
+
+    private static Drawable backgroundMediaDrawableOut;
+
+
+    //TODO icon on media content
+    private static TextPaint infoPaint;
+    private static TextPaint namePaint;
+
+    private RadialProgress radialProgress;
+
+    private int photoWidth;
+    private int photoHeight;
+
+    private ImageReceiver photoImage;
+    private boolean photoNotSet = false;
+    private boolean cancelLoading = false;
+
+
+    private int buttonPressed = 0;
+    private boolean imagePressed = false;
+    private boolean otherPressed = false;
+
+    private StaticLayout infoLayout;
+    private int infoWidth;
+    private int infoOffset = 0;
+    private String currentInfoString;
+
+    private StaticLayout nameLayout;
+    private int nameWidth = 0;
+    private String currentNameString;
+
+    private PostMediaCellDelegate delegate = null;
+    private RectF deleteProgressRect = new RectF();
+
+    public PostMediaCellOld(Context context) {
+        super(context);
+
+        //static
+        if (infoPaint == null) {
+
+            infoPaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            infoPaint.setTextSize(AndroidUtilities.dp(12));
+
+            namePaint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
+            namePaint.setColor(0xff212121);
+            namePaint.setTextSize(AndroidUtilities.dp(16));
+
+            backgroundMediaDrawableOutSelected = getResources().getDrawable(org.telegram.messenger.R.drawable.msg_out_photo_selected);
+            backgroundMediaDrawableOut = getResources().getDrawable(org.telegram.messenger.R.drawable.msg_out_photo);
+
+
+        }
+
+
+        photoImage = new ImageReceiver(this);
+        imageDrawable = new AvatarDrawable();
+
+        radialProgress = new RadialProgress(this);
+    }
+
+
+    public void setDelegate(PostMediaCellDelegate delegate) {
+        this.delegate = delegate;
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        if (photoImage != null) {
+            photoImage.clearImage();
+        }
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        float x = event.getX();
+        float y = event.getY();
+
+        boolean result = false;
+        int side = AndroidUtilities.dp(48);
+
+        if (event.getAction() == MotionEvent.ACTION_DOWN) {
+            if (delegate == null || delegate.canPerformActions()) {
+
+                if (x >= photoImage.getImageX() && x <= photoImage.getImageX() + backgroundWidth && y >= photoImage.getImageY() && y <= photoImage.getImageY() + photoImage.getImageHeight()) {
+                    imagePressed = true;
+                    result = true;
+                }
+            }
+
+            if (result) {
+                startCheckLongPress();
+            }
+
+        } else if (event.getAction() == MotionEvent.ACTION_UP) {
+            imagePressed = false;
+            playSoundEffect(SoundEffectConstants.CLICK);
+            didClickedImage();
+            invalidate();
+        }
+
+
+        if (!result) {
+            result = super.onTouchEvent(event);
+        }
+
+        return result;
+    }
+
+    private void didClickedImage() {
+        if (this.delegate != null) {
+            this.delegate.didClickedImage(this);
+        }
+    }
+
+
+    private void didPressedButton(boolean animated) {
+    }
+
+
+    public void setPostObject(PostObject postObjectObject) {
+
+        this.postObject = postObjectObject;
+        if (this.postObject != null) {
+            updateSecretTimeText();
+
+            if (AndroidUtilities.isTablet()) {
+                photoWidth = (int) (AndroidUtilities.getMinTabletSide() * 0.7f);
+            } else {
+                photoWidth = (int) (Math.min(AndroidUtilities.displaySize.x, AndroidUtilities.displaySize.y) * 0.7f); // here
+            }
+            photoHeight = photoWidth + AndroidUtilities.dp(100);
+
+            if (photoWidth > AndroidUtilities.getPhotoSize()) {
+                photoWidth = AndroidUtilities.getPhotoSize();
+            }
+            if (photoHeight > AndroidUtilities.getPhotoSize()) {
+                photoHeight = AndroidUtilities.getPhotoSize();
+            }
+
+
+            //TODO Full or Image
+            if (this.postObject.getPreviewImage() != null) {
+                Image previewImage = this.postObject.getPreviewImage();
+
+                float scale = (float) previewImage.getWidth() / (float) photoWidth; // scale calculate
+
+                //TODO placeholder
+//                scale = 1;
+//                post.setWidth(photoWidth);
+//                post.setHeight(photoHeight);
+
+
+                if (previewImage.getSize() == 0) { // size of the file.
+                    previewImage.setSize(-1);
+                }
+
+                int w = (int) (previewImage.getWidth() / scale);
+                int h = (int) (previewImage.getHeight() / scale);
+                if (w == 0) {
+                    w = AndroidUtilities.dp(100);
+                }
+
+                if (h == 0) {
+                    h = AndroidUtilities.dp(100);
+                }
+                if (h > photoHeight) {
+                    float scale2 = h;
+                    h = photoHeight;
+                    scale2 /= h;
+                    w = (int) (w / scale2);
+                } else if (h < AndroidUtilities.dp(120)) {
+                    h = AndroidUtilities.dp(120);
+                    float hScale = (float) previewImage.getHeight() / h;
+                    if (previewImage.getWidth() / hScale < photoWidth) {
+                        w = (int) (previewImage.getWidth() / hScale);
+                    }
+                }
+
+                photoWidth = w;
+                photoHeight = h;
+                backgroundWidth = w + AndroidUtilities.dp(12);
+
+//                photoImage.setImageCoords(avatarLeft, avatarTop + AndroidUtilities.dp(52) + this.block.textLayout.getHeight(), photoWidth, photoHeight);
+
+
+                photoImage.setForcePreview(false);
+
+                int size = (int)(AndroidUtilities.getPhotoSize() / AndroidUtilities.density);
+                photoImage.setImage(previewImage.getUrl(), String.format(Locale.US, "%d_%d", size, size), imageDrawable, null, 0); // TODO fix it. Create drawable.
+//                photoImage.setImageBitmap(previewImage.getBitmap()); // TODO fix it. Create drawable.
+
+
+                invalidate();
+            }
+        }
+
+    }
+
+    public ImageReceiver getPhotoImage() {
+        return photoImage;
+    }
+
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec), photoHeight + AndroidUtilities.dp(14));
+    }
+
+
+    @Override
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+        super.onLayout(changed, left, top, right, bottom);
+        layoutWidth = getMeasuredWidth();
+        layoutHeight = getMeasuredHeight();
+
+
+
+        int x;
+//
+//        x = layoutWidth - backgroundWidth + AndroidUtilities.dp(8);
+//        x = AndroidUtilities.dp(16);
+//        x = AndroidUtilities.dp(69);
+
+
+        x = layoutWidth - backgroundWidth - AndroidUtilities.dp(3);
+
+//        x = AndroidUtilities.dp(67);
+        photoImage.setImageCoords(x, AndroidUtilities.dp(7), photoWidth, photoHeight);
+        int size = AndroidUtilities.dp(48);
+        buttonX = (int) (x + (photoWidth - size) / 2.0f);
+        buttonY = (int) (AndroidUtilities.dp(7) + (photoHeight - size) / 2.0f);
+
+        radialProgress.setProgressRect(buttonX, buttonY, buttonX + AndroidUtilities.dp(48), buttonY + AndroidUtilities.dp(48));
+        deleteProgressRect.set(buttonX + AndroidUtilities.dp(3), buttonY + AndroidUtilities.dp(3), buttonX + AndroidUtilities.dp(45), buttonY + AndroidUtilities.dp(45));
+    }
+
+    private void updateSecretTimeText() {
+        String currentInfoString = "";
+
+        if (this.postObject == null) {
+            return;
+        }
+        //TODO info about image. Size. or so on.
+        String str = "" + this.postObject.getPreviewImage().getSize();
+        if (str == null) {
+            return;
+        }
+        infoLayout = null;
+        if (!currentInfoString.equals(str)) {
+            currentInfoString = str;
+            infoOffset = 0;
+            infoWidth = (int) Math.ceil(infoPaint.measureText(currentInfoString));
+            CharSequence str2 = TextUtils.ellipsize(currentInfoString, infoPaint, infoWidth, TextUtils.TruncateAt.END);
+            infoLayout = new StaticLayout(str2, infoPaint, infoWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);
+            invalidate();
+        }
+    }
+
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        if (this.postObject == null) {
+            return;
+        }
+
+//        if (!wasLayout) {
+//            requestLayout();
+//            return;
+//        }
+
+
+        Drawable currentBackgroundDrawable = backgroundMediaDrawableOut;
+//        currentBackgroundDrawable = backgroundMediaDrawableOutSelected;
+
+
+        setDrawableBounds(currentBackgroundDrawable, layoutWidth - backgroundWidth - AndroidUtilities.dp(9), AndroidUtilities.dp(1), backgroundWidth, layoutHeight - AndroidUtilities.dp(2));
+
+        // set background for message
+        currentBackgroundDrawable.draw(canvas);
+
+        onAfterBackgroundDraw(canvas);
+
+//        if (nameLayout != null) {
+//            canvas.save();
+//            canvas.translate(currentBackgroundDrawable.getBounds().left + AndroidUtilities.dp(19) - nameOffsetX, AndroidUtilities.dp(10));
+//            namePaint.setColor(AvatarDrawable.getNameColorForId(currentUser.id));
+//            nameLayout.draw(canvas);
+//            canvas.restore();
+//        }
+
+    }
+
+
+    private void onAfterBackgroundDraw(Canvas canvas) {
+
+//        photoImage.setVisible(true, false);
+
+        radialProgress.setHideCurrentDrawable(false);
+
+        radialProgress.setProgressColor(0xffffffff);
+
+
+        radialProgress.onDraw(canvas);
+
+
+        //TODO name is the name of the document in case of PDF
+//        if (infoLayout != null) {
+//            infoPaint.setColor(0xffffffff);
+//            //TODO background of the media content. without image. just gray background. as with sending pdf.
+////            setDrawableBounds(mediaBackgroundDrawable, photoImage.getImageX() + AndroidUtilities.dp(4), photoImage.getImageY() + AndroidUtilities.dp(4), infoWidth + AndroidUtilities.dp(8) + infoOffset, AndroidUtilities.dp(16.5f));
+////            mediaBackgroundDrawable.draw(canvas);
+//
+//            //TODO save state before change rotation or translate
+//            canvas.save();
+//            canvas.translate(photoImage.getImageX() + AndroidUtilities.dp(8) + infoOffset, photoImage.getImageY() + AndroidUtilities.dp(5.5f));
+//            infoLayout.draw(canvas);
+//            // TODO after complete draw, we can restore saved state: rotation, tranlation
+//            canvas.restore();
+//        }
+
+        photoImage.draw(canvas);
+
+
+    }
+
+
+    public PostObject getPostObject() {
+        return postObject;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
index 821961b9e..2084726f9 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostCreateActivity.java
@@ -18,6 +18,7 @@
 import android.content.pm.PackageManager;
 import android.content.res.Configuration;
 import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
 import android.graphics.Rect;
 import android.media.ExifInterface;
 import android.net.Uri;
@@ -33,52 +34,40 @@
 import android.view.ViewGroup;
 import android.view.ViewTreeObserver;
 import android.view.WindowManager;
-import android.widget.AdapterView;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.LinearLayout;
-import android.widget.ListView;
 import android.widget.ProgressBar;
 import android.widget.TextView;
 import android.widget.Toast;
 
-import org.telegram.PhoneFormat.PhoneFormat;
 import org.telegram.android.AndroidUtilities;
-import org.telegram.android.AnimationCompat.AnimatorListenerAdapterProxy;
 import org.telegram.android.AnimationCompat.AnimatorSetProxy;
 import org.telegram.android.AnimationCompat.ObjectAnimatorProxy;
-import org.telegram.android.AnimationCompat.ViewProxy;
-import org.telegram.android.ContactsController;
 import org.telegram.android.ImageReceiver;
 import org.telegram.android.LocaleController;
 import org.telegram.android.MediaController;
-import org.telegram.android.MessageObject;
 import org.telegram.android.MessagesController;
 import org.telegram.android.NotificationCenter;
-import org.telegram.android.NotificationsController;
 import org.telegram.android.PostsController;
-import org.telegram.android.SendMessagesHelper;
 import org.telegram.android.support.widget.LinearLayoutManager;
 import org.telegram.android.support.widget.RecyclerView;
 import org.telegram.messenger.ApplicationLoader;
-import org.telegram.messenger.ConnectionsManager;
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.R;
-import org.telegram.messenger.RPCRequest;
-import org.telegram.messenger.TLObject;
 import org.telegram.messenger.TLRPC;
-import org.telegram.messenger.UserConfig;
+import org.telegram.messenger.dto.Image;
+import org.telegram.messenger.dto.Post;
+import org.telegram.messenger.object.PostObject;
+import org.telegram.messenger.object.UserObject;
+import org.telegram.messenger.service.mock.PostServiceMock;
 import org.telegram.ui.ActionBar.ActionBar;
 import org.telegram.ui.ActionBar.ActionBarMenu;
 import org.telegram.ui.ActionBar.ActionBarMenuItem;
 import org.telegram.ui.ActionBar.BaseFragment;
 import org.telegram.ui.ActionBar.BottomSheet;
-import org.telegram.ui.Adapters.MentionsAdapter;
-import org.telegram.ui.Cells.ChatActionCell;
-import org.telegram.ui.Cells.ChatAudioCell;
-import org.telegram.ui.Cells.ChatBaseCell;
-import org.telegram.ui.Cells.ChatMediaCell;
-import org.telegram.ui.Cells.ChatMessageCell;
+import org.telegram.ui.Cells.PostCell;
+import org.telegram.ui.Cells.PostMediaCellOld;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.BackupImageView;
 import org.telegram.ui.Components.FrameLayoutFixed;
@@ -86,31 +75,23 @@
 import org.telegram.ui.Components.PostCreateActivityEnterView;
 import org.telegram.ui.Components.RecyclerListView;
 import org.telegram.ui.Components.ResourceLoader;
-import org.telegram.ui.Components.SendingFileExDrawable;
 import org.telegram.ui.Components.SizeNotifierFrameLayout;
 import org.telegram.ui.Components.TimerDrawable;
 import org.telegram.ui.Components.WebFrameLayout;
 
 import java.io.File;
 import java.util.ArrayList;
-import java.util.HashMap;
 
 //TODO-aragats new
 public class PostCreateActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, MessagesActivity.MessagesActivityDelegate,
-        PhotoViewer.PhotoViewerProvider {
+        PostPhotoViewerProvider {
 
-    protected TLRPC.Chat currentChat;
-    protected TLRPC.User currentUser;
-
-    private ArrayList<ChatMediaCell> chatMediaCellsCache = new ArrayList<>();
+    private ArrayList<PostMediaCellOld> postMediaCellsCache = new ArrayList<>();
 
     private FrameLayout progressView;
     private FrameLayout bottomOverlay;
     //TODO aragats
     private PostCreateActivityEnterView postCreateActivityEnterView;
-    private ImageView timeItem;
-    private View timeItem2;
-    private TimerDrawable timerDrawable;
     private ActionBarMenuItem menuItem;
     private ActionBarMenuItem attachItem;
     private ActionBarMenuItem headerItem;
@@ -119,11 +100,10 @@
     private RecyclerListView postListView;
     private LinearLayoutManager postLayoutManager;
     //TODO-aragats
-    private ChatActivityAdapter postCreateAdapter;
+    private PostCreateActivityAdapter postCreateAdapter;
     private BackupImageView avatarImageView;
     private TextView bottomOverlayChatText;
     private FrameLayout bottomOverlayChat;
-    private SendingFileExDrawable sendingFileDrawable;
     private FrameLayout emptyViewContainer;
     private ArrayList<View> actionModeViews = new ArrayList<>();
     private TextView nameTextView;
@@ -131,79 +111,30 @@
     private FrameLayout avatarContainer;
     private TextView bottomOverlayText;
     private TextView muteItem;
-    private ImageView pagedownButton;
-    private MentionsAdapter mentionsAdapter;
-    private ListView mentionListView;
-    private AnimatorSetProxy mentionListAnimation;
 
 
-    private MessageObject selectedObject;
+    private PostObject selectedObject;
     private boolean wasPaused = false;
-    private long linkSearchRequestId;
     private TLRPC.WebPage foundWebPage;
     private Runnable waitingForCharaterEnterRunnable;
 
     private boolean openAnimationEnded = false;
 
-    private int readWithDate = 0;
-    private int readWithMid = 0;
-    private boolean scrollToTopOnResume = false;
-    private boolean scrollToTopUnReadOnResume = false;
-
-    private HashMap<Integer, MessageObject> messagesDict = new HashMap<>();
-    protected ArrayList<MessageObject> messages = new ArrayList<>();
-    private int maxMessageId = Integer.MAX_VALUE;
-    private int minMessageId = Integer.MIN_VALUE;
-    private int maxDate = Integer.MIN_VALUE;
-    private boolean endReached = false;
-    private boolean loading = false;
-    private boolean cacheEndReaced = false;
-    private boolean firstLoading = true;
-    private int loadsCount = 0;
-
-    private boolean needSelectFromMessageId;
-    private int returnToMessageId = 0;
-
-    private int minDate = 0;
-    private boolean first = true;
-    private int unread_to_load = 0;
-    private int first_unread_id = 0;
-    private int last_message_id = 0;
-    private int first_message_id = 0;
-    private boolean forward_end_reached = true;
-    private boolean loadingForward = false;
-    private MessageObject unreadMessageObject = null;
-    private MessageObject scrollToMessage = null;
-    private int highlightMessageId = Integer.MAX_VALUE;
-    private boolean scrollToMessageMiddleScreen = false;
 
-    private String currentPicturePath;
+    protected ArrayList<PostObject> postObjects = new ArrayList<>();
 
-    private Rect scrollRect = new Rect();
+    private boolean loading = false;
 
-    protected TLRPC.ChatParticipants info = null;
-    private int onlineCount = -1;
 
+    private String currentPicturePath;
 
-    private Runnable openSecretPhotoRunnable = null;
-    private float startX = 0;
-    private float startY = 0;
+    private Rect scrollRect = new Rect();
 
-    private final static int copy = 1;
-    private final static int forward = 2;
-    private final static int delete = 3;
-    private final static int chat_enc_timer = 4;
     private final static int chat_menu_attach = 5;
     private final static int attach_photo = 6;
     private final static int attach_gallery = 7;
-    private final static int attach_video = 8;
-    private final static int attach_document = 9;
     private final static int attach_location = 10;
-    private final static int clear_history = 11;
-    private final static int delete_chat = 12;
-    private final static int share_contact = 13;
     private final static int mute = 14;
-    private final static int reply = 15;
 
     private final static int id_chat_compose_panel = 1000;
 
@@ -279,10 +210,6 @@ public boolean onFragmentCreate() {
 //            NotificationCenter.getInstance().postNotificationName(NotificationCenter.openedChatChanged, dialog_id, false);
 //        }
 
-
-        sendingFileDrawable = new SendingFileExDrawable();
-        sendingFileDrawable.setIsChat(currentChat != null);
-
         return true;
     }
 
@@ -328,14 +255,13 @@ public void onFragmentDestroy() {
             getParentActivity().getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
         }
         AndroidUtilities.unlockOrientation(getParentActivity());
-        MediaController.getInstance().stopAudio();
     }
 
     @Override
     public View createView(Context context, LayoutInflater inflater) {
 
         for (int a = 0; a < 4; a++) {
-            chatMediaCellsCache.add(new ChatMediaCell(context));
+            postMediaCellsCache.add(new PostMediaCellOld(context));
         }
 
 
@@ -383,11 +309,14 @@ public void didSelectPhotos(ArrayList<String> photos, ArrayList<String> captions
 //                            SendMessagesHelper.prepareSendingPhotos(photos, null, dialog_id, replyingMessageObject, captions);
 //                            SendMessagesHelper.prepareSendingPhotosSearch(webPhotos, dialog_id, replyingMessageObject);
 //                            showReplyPanel(false, null, null, null, false, true);
-                            System.out.println();
+//                            System.out.println();
+                            PostCreateActivity.this.didSelectPhotos(photos);
+
                         }
 
                         @Override
                         public void startPhotoSelectActivity() {
+                            //TODO-was ?
                             try {
                                 Intent videoPickerIntent = new Intent();
                                 videoPickerIntent.setType("video/*");
@@ -588,11 +517,6 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
                             childTop = lp.topMargin;
                     }
 
-                    if (child == mentionListView) {
-                        childTop -= postCreateActivityEnterView.getMeasuredHeight() - AndroidUtilities.dp(2);
-                    } else if (child == pagedownButton) {
-                        childTop -= postCreateActivityEnterView.getMeasuredHeight();
-                    }
                     child.layout(childLeft, childTop, childLeft + width, childTop + height);
                 }
 
@@ -617,11 +541,7 @@ public boolean onTouch(View v, MotionEvent event) {
         });
 
         TextView emptyView = new TextView(context);
-        if (currentUser != null && currentUser.id != 777000 && currentUser.id != 429000 && (currentUser.id / 1000 == 333 || currentUser.id % 1000 == 0)) {
-            emptyView.setText(LocaleController.getString("GotAQuestion", R.string.GotAQuestion));
-        } else {
-            emptyView.setText(LocaleController.getString("NoMessages", R.string.NoMessages));
-        }
+        emptyView.setText(LocaleController.getString("NoMessages", R.string.NoMessages));
         emptyView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16);
         emptyView.setGravity(Gravity.CENTER);
         emptyView.setTextColor(0xffffffff);
@@ -636,7 +556,7 @@ public boolean onTouch(View v, MotionEvent event) {
 
         postListView = new RecyclerListView(context);
         postListView.setVerticalScrollBarEnabled(true);
-        postListView.setAdapter(postCreateAdapter = new ChatActivityAdapter(context));
+        postListView.setAdapter(postCreateAdapter = new PostCreateActivityAdapter(context));
         postListView.setClipToPadding(false);
         postListView.setPadding(0, AndroidUtilities.dp(4), 0, AndroidUtilities.dp(3));
         postListView.setItemAnimator(null);
@@ -657,8 +577,8 @@ public boolean supportsPredictiveItemAnimations() {
 
             @Override
             public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
-                if (newState != RecyclerView.SCROLL_STATE_DRAGGING && highlightMessageId != Integer.MAX_VALUE) {
-                    highlightMessageId = Integer.MAX_VALUE;
+                //TODO do i need it ?
+                if (newState != RecyclerView.SCROLL_STATE_DRAGGING) {
                     updateVisibleRows();
                 }
             }
@@ -669,21 +589,8 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                 int visibleItemCount = Math.abs(postLayoutManager.findLastVisibleItemPosition() - firstVisibleItem) + 1;
                 if (visibleItemCount > 0) {
                     int totalItemCount = postCreateAdapter.getItemCount();
-                    if (firstVisibleItem <= 10) {
-                        if (!endReached && !loading) {
-                            loading = true;
-                        }
-                    }
-                    if (firstVisibleItem + visibleItemCount >= totalItemCount - 6) {
-                        if (!forward_end_reached && !loadingForward) {
-                            loadingForward = true;
-                        }
-                    }
-                    if (firstVisibleItem + visibleItemCount == totalItemCount && forward_end_reached) {
-                        showPagedownButton(false, true);
-                    }
+
                 }
-                updateMessagesVisisblePart();
             }
         });
         postListView.setOnTouchListener(new View.OnTouchListener() {
@@ -720,92 +627,6 @@ public boolean onInterceptTouchEvent(MotionEvent event) {
         AndroidUtilities.setProgressBarAnimationDuration(progressBar, 1500);
         progressView.addView(progressBar, LayoutHelper.createFrame(32, 32, Gravity.CENTER));
 
-        mentionListView = new ListView(context);
-        mentionListView.setBackgroundResource(R.drawable.compose_panel);
-        mentionListView.setVisibility(View.GONE);
-        mentionListView.setPadding(0, AndroidUtilities.dp(2), 0, 0);
-        mentionListView.setClipToPadding(true);
-        mentionListView.setDividerHeight(0);
-        mentionListView.setDivider(null);
-        if (Build.VERSION.SDK_INT > 8) {
-            mentionListView.setOverScrollMode(ListView.OVER_SCROLL_NEVER);
-        }
-        contentView.addView(mentionListView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, 110, Gravity.LEFT | Gravity.BOTTOM));
-
-        mentionListView.setAdapter(mentionsAdapter = new MentionsAdapter(context, false, new MentionsAdapter.MentionsAdapterDelegate() {
-            @Override
-            public void needChangePanelVisibility(boolean show) {
-                if (show) {
-                    FrameLayout.LayoutParams layoutParams3 = (FrameLayout.LayoutParams) mentionListView.getLayoutParams();
-                    int height = 36 * Math.min(3, mentionsAdapter.getCount()) + (mentionsAdapter.getCount() > 3 ? 18 : 0);
-                    layoutParams3.height = AndroidUtilities.dp(2 + height);
-                    layoutParams3.topMargin = -AndroidUtilities.dp(height);
-                    mentionListView.setLayoutParams(layoutParams3);
-
-                    if (mentionListAnimation != null) {
-                        mentionListAnimation.cancel();
-                        mentionListAnimation = null;
-                    }
-
-                    if (mentionListView.getVisibility() == View.VISIBLE) {
-                        ViewProxy.setAlpha(mentionListView, 1.0f);
-                        return;
-                    }
-                } else {
-                    if (mentionListAnimation != null) {
-                        mentionListAnimation.cancel();
-                        mentionListAnimation = null;
-                    }
-
-                    if (mentionListView.getVisibility() == View.GONE) {
-                        return;
-                    }
-                }
-            }
-        }));
-        mentionsAdapter.setChatInfo(info);
-        mentionsAdapter.setNeedUsernames(currentChat != null);
-
-        mentionListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-                Object object = mentionsAdapter.getItem(position);
-                int start = mentionsAdapter.getResultStartPosition();
-                int len = mentionsAdapter.getResultLength();
-                if (object instanceof TLRPC.User) {
-                    TLRPC.User user = (TLRPC.User) object;
-                    if (user != null) {
-                        postCreateActivityEnterView.replaceWithText(start, len, "@" + user.username + " ");
-                    }
-                } else if (object instanceof String) {
-                    postCreateActivityEnterView.replaceWithText(start, len, object + " ");
-                }
-            }
-        });
-
-        mentionListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
-            @Override
-            public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
-                Object object = mentionsAdapter.getItem(position);
-                if (object instanceof String) {
-                    AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-                    builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-                    builder.setMessage(LocaleController.getString("ClearSearch", R.string.ClearSearch));
-                    builder.setPositiveButton(LocaleController.getString("ClearButton", R.string.ClearButton).toUpperCase(), new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialogInterface, int i) {
-                            mentionsAdapter.clearRecentHashtags();
-                        }
-                    });
-                    builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-                    showDialog(builder.create());
-                    return true;
-                }
-                return false;
-            }
-        });
-
-
         postCreateActivityEnterView = new PostCreateActivityEnterView(getParentActivity(), contentView, this, true);
 //        postCreateActivityEnterView.setDialogId(dialog_id);
         postCreateActivityEnterView.addToAttachLayout(menuItem);
@@ -814,30 +635,27 @@ public void onClick(DialogInterface dialogInterface, int i) {
         postCreateActivityEnterView.setDelegate(new PostCreateActivityEnterView.PostCreateActivityEnterViewDelegate() {
             @Override
             public void onMessageSend(String message) {
-                moveScrollToLastMessage();
-                if (mentionsAdapter != null) {
-                    mentionsAdapter.addHashtagsFromMessage(message);
-                }
+//                moveScrollToLastMessage();
             }
 
             @Override
             public void onTextChanged(final CharSequence text, boolean bigChange) {
-                if (mentionsAdapter != null) {
-                    mentionsAdapter.searchUsernameOrHashtag(text.toString(), postCreateActivityEnterView.getCursorPosition(), messages);
-                }
+//                if (mentionsAdapter != null) {
+//                    mentionsAdapter.searchUsernameOrHashtag(text.toString(), postCreateActivityEnterView.getCursorPosition(), messages);
+//                }
                 if (waitingForCharaterEnterRunnable != null) {
                     AndroidUtilities.cancelRunOnUIThread(waitingForCharaterEnterRunnable);
                     waitingForCharaterEnterRunnable = null;
                 }
                 if (postCreateActivityEnterView.isMessageWebPageSearchEnabled()) {
                     if (bigChange) {
-                        searchLinks(text, true);
+//                        searchLinks(text, true);
                     } else {
                         waitingForCharaterEnterRunnable = new Runnable() {
                             @Override
                             public void run() {
                                 if (this == waitingForCharaterEnterRunnable) {
-                                    searchLinks(text, false);
+//                                    searchLinks(text, false);
                                     waitingForCharaterEnterRunnable = null;
                                 }
                             }
@@ -874,17 +692,9 @@ public void onAttachButtonShow() {
             @Override
             public void onWindowSizeChanged(int size) {
                 if (size < AndroidUtilities.dp(72) + AndroidUtilities.getCurrentActionBarHeight()) {
-                    if (mentionListView != null && mentionListView.getVisibility() == View.VISIBLE) {
-                        mentionListView.clearAnimation();
-                        mentionListView.setVisibility(View.INVISIBLE);
-                    }
                 } else {
-                    if (mentionListView != null && mentionListView.getVisibility() == View.INVISIBLE) {
-                        mentionListView.clearAnimation();
-                        mentionListView.setVisibility(View.VISIBLE);
-                    }
                 }
-                updateMessagesVisisblePart();
+//                updateMessagesVisisblePart();
             }
         });
 
@@ -925,17 +735,17 @@ public void onClick(View view) {
                     return;
                 }
                 AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-            builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-            builder.setMessage(LocaleController.getString("AreYouSureUnblockContact", R.string.AreYouSureUnblockContact));
-            builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
-                @Override
-                public void onClick(DialogInterface dialogInterface, int i) {
+                builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
+                builder.setMessage(LocaleController.getString("AreYouSureUnblockContact", R.string.AreYouSureUnblockContact));
+                builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialogInterface, int i) {
 //                    MessagesController.getInstance().unblockUser(currentUser.id);
-                }
-            });
-            builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
-            showDialog(builder.create());
-        }
+                    }
+                });
+                builder.setNegativeButton(LocaleController.getString("Cancel", R.string.Cancel), null);
+                showDialog(builder.create());
+            }
         });
 
         bottomOverlayChatText = new TextView(context);
@@ -943,28 +753,13 @@ public void onClick(DialogInterface dialogInterface, int i) {
         bottomOverlayChatText.setTextColor(0xff3e6fa1);
         bottomOverlayChat.addView(bottomOverlayChatText, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.CENTER));
 
-        pagedownButton = new ImageView(context);
-        pagedownButton.setVisibility(View.INVISIBLE);
-        pagedownButton.setImageResource(R.drawable.pagedown);
-        contentView.addView(pagedownButton, LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, Gravity.RIGHT | Gravity.BOTTOM, 0, 0, 6, 4));
-        pagedownButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                if (returnToMessageId > 0) {
-                    scrollToMessageId(returnToMessageId, 0, true);
-                } else {
-                    scrollToLastMessage();
-                }
-            }
-        });
-
-        if (loading && messages.isEmpty()) {
-            progressView.setVisibility(View.VISIBLE);
-            postListView.setEmptyView(null);
-        } else {
+//        if (loading && postObjects.isEmpty()) {
+//            progressView.setVisibility(View.VISIBLE);
+//            postListView.setEmptyView(null);
+//        } else {
             progressView.setVisibility(View.INVISIBLE);
             postListView.setEmptyView(emptyViewContainer);
-        }
+//        }
 
         updateBottomOverlay();
 
@@ -998,203 +793,17 @@ private boolean searchForHttpInText(CharSequence string) {
         return false;
     }
 
-    private void searchLinks(CharSequence charSequence, boolean force) {
-        if (linkSearchRequestId != 0) {
-            ConnectionsManager.getInstance().cancelRpc(linkSearchRequestId, true);
-            linkSearchRequestId = 0;
-        }
-        if (force && foundWebPage != null) {
-            if (foundWebPage.url != null) {
-                int index = TextUtils.indexOf(charSequence, foundWebPage.url);
-                char lastChar;
-                boolean lenEqual;
-                if (index == -1) {
-                    index = TextUtils.indexOf(charSequence, foundWebPage.display_url);
-                    lenEqual = index != -1 && index + foundWebPage.display_url.length() == charSequence.length();
-                    lastChar = index != -1 && !lenEqual ? charSequence.charAt(index + foundWebPage.display_url.length()) : 0;
-                } else {
-                    lenEqual = index != -1 && index + foundWebPage.url.length() == charSequence.length();
-                    lastChar = index != -1 && !lenEqual ? charSequence.charAt(index + foundWebPage.url.length()) : 0;
-                }
-                if (index != -1 && (lenEqual || lastChar == ' ' || lastChar == ',' || lastChar == '.' || lastChar == '!' || lastChar == '/')) {
-                    return;
-                }
-            }
-        }
-        if (charSequence.length() < 13 || !searchForHttpInText(charSequence)) {
-            return;
-        }
-        final TLRPC.TL_messages_getWebPagePreview req = new TLRPC.TL_messages_getWebPagePreview();
-        if (charSequence instanceof String) {
-            req.message = (String) charSequence;
-        } else {
-            req.message = charSequence.toString();
-        }
-        linkSearchRequestId = ConnectionsManager.getInstance().performRpc(req, new RPCRequest.RPCRequestDelegate() {
-            @Override
-            public void run(final TLObject response, final TLRPC.TL_error error) {
-                AndroidUtilities.runOnUIThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        linkSearchRequestId = 0;
-                        if (error == null) {
-                            if (response instanceof TLRPC.TL_messageMediaWebPage) {
-                                foundWebPage = ((TLRPC.TL_messageMediaWebPage) response).webpage;
-                                if (foundWebPage instanceof TLRPC.TL_webPage || foundWebPage instanceof TLRPC.TL_webPagePending) {
-                                    if (foundWebPage instanceof TLRPC.TL_webPagePending) {
-                                    }
-                                } else {
-                                    if (foundWebPage != null) {
-                                        foundWebPage = null;
-                                    }
-                                }
-                            } else {
-                                if (foundWebPage != null) {
-                                    foundWebPage = null;
-                                }
-                            }
-                        }
-                    }
-                });
-            }
-        });
-        ConnectionsManager.getInstance().bindRequestToGuid(linkSearchRequestId, classGuid);
-    }
-
-    private void moveScrollToLastMessage() {
-        if (postListView != null) {
-            postLayoutManager.scrollToPositionWithOffset(messages.size() - 1, -100000 - postListView.getPaddingTop());
-        }
-    }
-
-
-    private void scrollToLastMessage() {
-        if (forward_end_reached && first_unread_id == 0) {
-            postLayoutManager.scrollToPositionWithOffset(messages.size() - 1, -100000 - postListView.getPaddingTop());
-        } else {
-            messages.clear();
-            messagesDict.clear();
-            progressView.setVisibility(View.VISIBLE);
-            postListView.setEmptyView(null);
-            maxMessageId = Integer.MAX_VALUE;
-            minMessageId = Integer.MIN_VALUE;
-
-            maxDate = Integer.MIN_VALUE;
-            minDate = 0;
-            forward_end_reached = true;
-            loading = true;
-            needSelectFromMessageId = false;
-            postCreateAdapter.notifyDataSetChanged();
-//            MessagesController.getInstance().loadMessages(dialog_id, 30, 0, true, 0, classGuid, 0, 0, 0, true);
-        }
-    }
+    //TODO-future
+//    private void searchLinks(CharSequence charSequence, boolean force) {
+//    }
 
-    private void updateMessagesVisisblePart() {
-        if (postListView == null) {
-            return;
-        }
-        int count = postListView.getChildCount();
-        for (int a = 0; a < count; a++) {
-            View view = postListView.getChildAt(a);
-            if (view instanceof ChatMessageCell) {
-                ChatMessageCell messageCell = (ChatMessageCell) view;
-                messageCell.getLocalVisibleRect(scrollRect);
-                messageCell.setVisiblePart(scrollRect.top, scrollRect.bottom - scrollRect.top);
-            }
-        }
+    private void moveScrollToLastPost() {
+//        if (postListView != null) {
+//            postLayoutManager.scrollToPositionWithOffset(postObjects.size() - 1, -100000 - postListView.getPaddingTop());
+//        }
     }
 
-    private void scrollToMessageId(int id, int fromMessageId, boolean select) {
-        returnToMessageId = fromMessageId;
-        needSelectFromMessageId = select;
-
-        MessageObject object = messagesDict.get(id);
-        boolean query = false;
-        if (object != null) {
-            int index = messages.indexOf(object);
-            if (index != -1) {
-                if (needSelectFromMessageId) {
-                    highlightMessageId = id;
-                } else {
-                    highlightMessageId = Integer.MAX_VALUE;
-                }
-                final int yOffset = Math.max(0, (postListView.getHeight() - object.getApproximateHeight()) / 2);
-                if (messages.get(messages.size() - 1) == object) {
-                    postLayoutManager.scrollToPositionWithOffset(0, AndroidUtilities.dp(-11) + yOffset);
-                } else {
-                    postLayoutManager.scrollToPositionWithOffset(messages.size() - messages.indexOf(object), AndroidUtilities.dp(-11) + yOffset);
-                }
-                updateVisibleRows();
-                showPagedownButton(true, true);
-            } else {
-                query = true;
-            }
-        } else {
-            query = true;
-        }
 
-        if (query) {
-            messagesDict.clear();
-            messages.clear();
-            maxMessageId = Integer.MAX_VALUE;
-            minMessageId = Integer.MIN_VALUE;
-            maxDate = Integer.MIN_VALUE;
-            endReached = false;
-            loading = false;
-            cacheEndReaced = false;
-            firstLoading = true;
-            loadsCount = 0;
-            minDate = 0;
-            first = true;
-            unread_to_load = 0;
-            first_unread_id = 0;
-            last_message_id = 0;
-            first_message_id = 0;
-            forward_end_reached = true;
-            loadingForward = false;
-            unreadMessageObject = null;
-            scrollToMessage = null;
-            highlightMessageId = Integer.MAX_VALUE;
-            scrollToMessageMiddleScreen = false;
-            loading = true;
-//            MessagesController.getInstance().loadMessages(dialog_id, AndroidUtilities.isTablet() ? 30 : 20, startLoadFromMessageId, true, 0, classGuid, 3, 0, 0, false);
-            postCreateAdapter.notifyDataSetChanged();
-            progressView.setVisibility(View.VISIBLE);
-            postListView.setEmptyView(null);
-            emptyViewContainer.setVisibility(View.INVISIBLE);
-        }
-    }
-
-    private void showPagedownButton(boolean show, boolean animated) {
-        if (pagedownButton == null) {
-            return;
-        }
-        if (show) {
-            if (pagedownButton.getVisibility() == View.INVISIBLE) {
-                if (animated) {
-                    pagedownButton.setVisibility(View.VISIBLE);
-                    ViewProxy.setAlpha(pagedownButton, 0);
-                    ObjectAnimatorProxy.ofFloatProxy(pagedownButton, "alpha", 1.0f).setDuration(200).start();
-                } else {
-                    pagedownButton.setVisibility(View.VISIBLE);
-                }
-            }
-        } else {
-            returnToMessageId = 0;
-            if (pagedownButton.getVisibility() == View.VISIBLE) {
-                if (animated) {
-                    ObjectAnimatorProxy.ofFloatProxy(pagedownButton, "alpha", 0.0f).setDuration(200).addListener(new AnimatorListenerAdapterProxy() {
-                        @Override
-                        public void onAnimationEnd(Object animation) {
-                            pagedownButton.setVisibility(View.INVISIBLE);
-                        }
-                    }).start();
-                } else {
-                    pagedownButton.setVisibility(View.INVISIBLE);
-                }
-            }
-        }
-    }
 
 
     private void checkActionBarMenu() {
@@ -1202,48 +811,27 @@ private void checkActionBarMenu() {
         if (menuItem != null) {
             menuItem.setVisibility(View.VISIBLE);
         }
-        if (timeItem != null) {
-            timeItem.setVisibility(View.VISIBLE);
-        }
-        if (timeItem2 != null) {
-            timeItem2.setVisibility(View.VISIBLE);
-        }
-
-
-//        if (timerDrawable != null) {
-//            timerDrawable.setTime(currentEncryptedChat.ttl);
+//        if (timeItem != null) {
+//            timeItem.setVisibility(View.VISIBLE);
+//        }
+//        if (timeItem2 != null) {
+//            timeItem2.setVisibility(View.VISIBLE);
 //        }
 
         checkAndUpdateAvatar();
     }
 
-    private int updateOnlineCount() {
-        if (info == null) {
-            return 0;
-        }
-        onlineCount = 0;
-        int currentTime = ConnectionsManager.getInstance().getCurrentTime();
-        for (TLRPC.TL_chatParticipant participant : info.participants) {
-            TLRPC.User user = MessagesController.getInstance().getUser(participant.user_id);
-            if (user != null && user.status != null && (user.status.expires > currentTime || user.id == UserConfig.getClientUserId()) && user.status.expires > 10000) {
-                onlineCount++;
-            }
-        }
-        return onlineCount;
-    }
 
-    private int getMessageType(MessageObject messageObject) {
-        if (messageObject == null) {
+    private int getPostType(PostObject postObject) {
+        if (postObject == null) {
             return -1;
-        }else {
+        } else {
             return -1;
         }
 
     }
 
 
-
-
     private void updateActionModeTitle() {
         if (!actionBar.isActionModeShowed()) {
             return;
@@ -1257,23 +845,9 @@ private void updateTitle() {
         if (nameTextView == null) {
             return;
         }
-        if (currentChat != null) {
-            nameTextView.setText(currentChat.title);
-        } else if (currentUser != null) {
-            if (currentUser.id / 1000 != 777 && currentUser.id / 1000 != 333 && ContactsController.getInstance().contactsDict.get(currentUser.id) == null && (ContactsController.getInstance().contactsDict.size() != 0 || !ContactsController.getInstance().isLoadingContacts())) {
-                if (currentUser.phone != null && currentUser.phone.length() != 0) {
-                    nameTextView.setText(PhoneFormat.getInstance().format("+" + currentUser.phone));
-                } else {
-                    if (currentUser instanceof TLRPC.TL_userDeleted) {
-                        nameTextView.setText(LocaleController.getString("HiddenName", R.string.HiddenName));
-                    } else {
-                        nameTextView.setText(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
-                    }
-                }
-            } else {
-                nameTextView.setText(ContactsController.formatName(currentUser.first_name, currentUser.last_name));
-            }
-        }
+//        if (currentChat != null) {
+        nameTextView.setText("My Title");
+//        }
     }
 
     private void updateTitleIcons() {
@@ -1311,7 +885,7 @@ private void checkAndUpdateAvatar() {
         }
     }
 
-//TODO-aragats handle response from camera.
+    //TODO-aragats handle response from camera.
     @Override
     public void onActivityResultFragment(int requestCode, int resultCode, Intent data) {
         if (resultCode == Activity.RESULT_OK) {
@@ -1394,15 +968,12 @@ protected void onOpenAnimationEnd() {
         int count = postListView.getChildCount();
         for (int a = 0; a < count; a++) {
             View view = postListView.getChildAt(a);
-            if (view instanceof ChatMediaCell) {
-                ChatMediaCell cell = (ChatMediaCell) view;
-                cell.setAllowedToSetPhoto(true);
-            }
+//            if (view instanceof ChatMediaCell) {
+//                ChatMediaCell cell = (ChatMediaCell) view;
+//                cell.setAllowedToSetPhoto(true);
+//            }
         }
 
-        if (currentUser != null) {
-            MessagesController.getInstance().loadFullUser(MessagesController.getInstance().getUser(currentUser.id), classGuid);
-        }
     }
 
     private void updateBottomOverlay() {
@@ -1424,21 +995,8 @@ public void onResume() {
         }
 
         checkActionBarMenu();
+//        moveScrollToLastMessage();
 
-//        NotificationsController.getInstance().setOpennedDialogId(dialog_id);
-        if (scrollToTopOnResume) {
-            if (scrollToTopUnReadOnResume && scrollToMessage != null) {
-                if (postListView != null) {
-                    final int yOffset = scrollToMessageMiddleScreen ? Math.max(0, (postListView.getHeight() - scrollToMessage.getApproximateHeight()) / 2) : 0;
-                    postLayoutManager.scrollToPositionWithOffset(messages.size() - messages.indexOf(scrollToMessage), -postListView.getPaddingTop() - AndroidUtilities.dp(7) + yOffset);
-                }
-            } else {
-                moveScrollToLastMessage();
-            }
-            scrollToTopUnReadOnResume = false;
-            scrollToTopOnResume = false;
-            scrollToMessage = null;
-        }
         if (wasPaused) {
             wasPaused = false;
             if (postCreateAdapter != null) {
@@ -1446,6 +1004,7 @@ public void onResume() {
             }
         }
 
+
         fixLayout(true);
         SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
 //        String lastMessageText = preferences.getString("dialog_" + dialog_id, null);
@@ -1476,7 +1035,6 @@ public void onPause() {
             menuItem.closeSubMenu();
         }
         wasPaused = true;
-        NotificationsController.getInstance().setOpennedDialogId(0);
         if (postCreateActivityEnterView != null) {
             postCreateActivityEnterView.hideEmojiPopup();
             String text = postCreateActivityEnterView.getFieldText();
@@ -1537,23 +1095,21 @@ public void createMenu(View v, boolean single) {
             return;
         }
 
-        MessageObject message = null;
-        if (v instanceof ChatBaseCell) {
-            message = ((ChatBaseCell) v).getMessageObject();
-        } else if (v instanceof ChatActionCell) {
-            message = ((ChatActionCell) v).getMessageObject();
+        PostObject postObject = null;
+        if (v instanceof PostMediaCellOld) {
+            postObject = ((PostMediaCellOld) v).getPostObject();
         }
-        if (message == null) {
+        if (postObject == null) {
             return;
         }
-        final int type = getMessageType(message);
+        final int type = getPostType(postObject);
 
         selectedObject = null;
         actionBar.hideActionMode();
 
         if (single || type < 2 || type == 20) {
             if (type >= 0) {
-                selectedObject = message;
+                selectedObject = postObject;
                 if (getParentActivity() == null) {
                     return;
                 }
@@ -1616,19 +1172,15 @@ private void processSelectedOption(int option) {
         if (selectedObject == null) {
             return;
         }
-        if (option == 0) {
-            if (SendMessagesHelper.getInstance().retrySendMessage(selectedObject, false)) {
-                moveScrollToLastMessage();
-            }
-        } else if (option == 1) {
-            final MessageObject finalSelectedObject = selectedObject;
+        if (option == 1) {
+            final PostObject finalSelectedObject = selectedObject;
             AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
             builder.setMessage(LocaleController.formatString("AreYouSureDeleteMessages", R.string.AreYouSureDeleteMessages, LocaleController.formatPluralString("messages", 1)));
             builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
             builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), new DialogInterface.OnClickListener() {
                 @Override
                 public void onClick(DialogInterface dialogInterface, int i) {
-                    ArrayList<Integer> ids = new ArrayList<>();
+                    ArrayList<String> ids = new ArrayList<>();
                     ids.add(finalSelectedObject.getId());
                     ArrayList<Long> random_ids = null;
 //                    MessagesController.getInstance().deleteMessages(ids, random_ids, currentEncryptedChat);
@@ -1696,8 +1248,8 @@ private void updateVisibleRows() {
         int count = postListView.getChildCount();
         for (int a = 0; a < count; a++) {
             View view = postListView.getChildAt(a);
-            if (view instanceof ChatBaseCell) {
-                ChatBaseCell cell = (ChatBaseCell) view;
+            if (view instanceof PostMediaCellOld) {
+                PostMediaCellOld cell = (PostMediaCellOld) view;
 
                 boolean disableSelection = false;
                 boolean selected = false;
@@ -1713,27 +1265,13 @@ private void updateVisibleRows() {
                     view.setBackgroundColor(0);
                 }
 
-                cell.setMessageObject(cell.getMessageObject());
-                cell.setCheckPressed(!disableSelection, disableSelection && selected);
-                cell.setHighlighted(highlightMessageId != Integer.MAX_VALUE && cell.getMessageObject() != null && cell.getMessageObject().getId() == highlightMessageId);
+//                cell.setMessageObject(cell.getMessageObject());
+//                cell.setCheckPressed(!disableSelection, disableSelection && selected);
+//                cell.setHighlighted(highlightMessageId != Integer.MAX_VALUE && cell.getMessageObject() != null && cell.getMessageObject().getId() == highlightMessageId);
             }
         }
     }
 
-    private void alertUserOpenError(MessageObject message) {
-        if (getParentActivity() == null) {
-            return;
-        }
-        AlertDialog.Builder builder = new AlertDialog.Builder(getParentActivity());
-        builder.setTitle(LocaleController.getString("AppName", R.string.AppName));
-        builder.setPositiveButton(LocaleController.getString("OK", R.string.OK), null);
-        if (message.type == 3) {
-            builder.setMessage(LocaleController.getString("NoPlayerInstalled", R.string.NoPlayerInstalled));
-        } else {
-            builder.setMessage(LocaleController.formatString("NoHandleAppInstalled", R.string.NoHandleAppInstalled, message.messageOwner.media.document.mime_type));
-        }
-        showDialog(builder.create());
-    }
 
     @Override
     public void updatePhotoAtIndex(int index) {
@@ -1741,33 +1279,26 @@ public void updatePhotoAtIndex(int index) {
     }
 
     @Override
-    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
-        if (messageObject == null) {
+    public PhotoViewer.PlaceProviderObject getPlaceForPhoto(PostObject postObject) {
+        if (postObject == null) {
             return null;
         }
         int count = postListView.getChildCount();
 
         for (int a = 0; a < count; a++) {
-            MessageObject messageToOpen = null;
+            PostObject postToOpen = null;
             ImageReceiver imageReceiver = null;
             View view = postListView.getChildAt(a);
-            if (view instanceof ChatMediaCell) {
-                ChatMediaCell cell = (ChatMediaCell) view;
-                MessageObject message = cell.getMessageObject();
-                if (message != null && message.getId() == messageObject.getId()) {
-                    messageToOpen = message;
-                    imageReceiver = cell.getPhotoImage();
-                }
-            } else if (view instanceof ChatActionCell) {
-                ChatActionCell cell = (ChatActionCell) view;
-                MessageObject message = cell.getMessageObject();
-                if (message != null && message.getId() == messageObject.getId()) {
-                    messageToOpen = message;
+            if (view instanceof PostMediaCellOld) {
+                PostMediaCellOld cell = (PostMediaCellOld) view;
+                PostObject post = cell.getPostObject();
+                if (post != null && post.getId() == postObject.getId()) {
+                    postToOpen = post;
                     imageReceiver = cell.getPhotoImage();
                 }
             }
 
-            if (messageToOpen != null) {
+            if (postToOpen != null) {
                 int coords[] = new int[2];
                 view.getLocationInWindow(coords);
                 PhotoViewer.PlaceProviderObject object = new PhotoViewer.PlaceProviderObject();
@@ -1784,12 +1315,12 @@ public void updatePhotoAtIndex(int index) {
     }
 
     @Override
-    public Bitmap getThumbForPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+    public Bitmap getThumbForPhoto(PostObject postObject, int index) {
         return null;
     }
 
     @Override
-    public void willSwitchFromPhoto(MessageObject messageObject, TLRPC.FileLocation fileLocation, int index) {
+    public void willSwitchFromPhoto(PostObject postObject) {
     }
 
     @Override
@@ -1818,11 +1349,11 @@ public int getSelectedCount() {
         return 0;
     }
 
-    public class ChatActivityAdapter extends RecyclerView.Adapter {
+    public class PostCreateActivityAdapter extends RecyclerView.Adapter {
 
         private Context mContext;
 
-        public ChatActivityAdapter(Context context) {
+        public PostCreateActivityAdapter(Context context) {
             mContext = context;
         }
 
@@ -1835,16 +1366,7 @@ public Holder(View itemView) {
 
         @Override
         public int getItemCount() {
-            int count = messages.size();
-            if (count != 0) {
-                if (!endReached) {
-                    count++;
-                }
-                if (!forward_end_reached) {
-                    count++;
-                }
-            }
-            return count;
+            return postObjects.size();
         }
 
         @Override
@@ -1856,13 +1378,13 @@ public long getItemId(int i) {
         public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
             View view = null;
             if (viewType == 1) {
-                if (!chatMediaCellsCache.isEmpty()) {
-                    view = chatMediaCellsCache.get(0);
-                    chatMediaCellsCache.remove(0);
+                if (!postMediaCellsCache.isEmpty()) {
+                    view = postMediaCellsCache.get(0);
+                    postMediaCellsCache.remove(0);
                 } else {
-                    view = new ChatMediaCell(mContext);
+                    view = new PostMediaCellOld(mContext);
                 }
-            }  else if (viewType == 5) {
+            } else if (viewType == 5) {
                 LayoutInflater li = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                 view = li.inflate(R.layout.chat_loading_layout, parent, false);
                 view.findViewById(R.id.progressLayout).setBackgroundResource(ApplicationLoader.isCustomTheme() ? R.drawable.system_loader2 : R.drawable.system_loader1);
@@ -1871,83 +1393,56 @@ public long getItemId(int i) {
                 view = li.inflate(R.layout.chat_unread_layout, parent, false);
             }
 
-            if (view instanceof ChatBaseCell) {
-                ((ChatBaseCell) view).setDelegate(new ChatBaseCell.ChatBaseCellDelegate() {
+            if (view instanceof PostMediaCellOld) {
+                ((PostMediaCellOld) view).setDelegate(new PostMediaCellOld.PostMediaCellDelegate() {
                     @Override
-                    public void didPressedUserAvatar(ChatBaseCell cell, TLRPC.User user) {
-
+                    public void didClickedImage(PostMediaCellOld cell) {
+                        PostObject postObject = cell.getPostObject();
+//                    mContext - is getParentActivity form Post Activity. look at instance creation of PostAdapter
+                        PhotoViewer.getInstance().setParentActivity((Activity) mContext);
+//                        PhotoViewer.getInstance().openPhoto(postObject, PostCreateChatActivity.this);
+
+//                        Post post = cell.getMessageObject();
+//                        if (post.isSendError()) {
+//                            createMenu(cell);
+//                            return;
+//                        } else if (post.isSending()) {
+//                            return;
+//                        }
+//                        if (post.type == 1) {
+//                            PhotoViewer.getInstance().setParentActivity(getParentActivity());
+//                            PhotoViewer.getInstance().openPhoto(post, PostCreateChatActivity.this);
+//                        }
                     }
 
                     @Override
-                    public void didPressedCancelSendButton(ChatBaseCell cell) {
-
+                    public void didPressedOther(PostMediaCellOld cell) {
+                        //TODO popup menu.
+//                        createMenu(cell);
                     }
 
                     @Override
-                    public void didLongPressed(ChatBaseCell cell) {
-                        createMenu(cell, false);
-                    }
+                    public void didPressedUserAvatar(PostCell cell, UserObject userObject) {
 
-                    @Override
-                    public boolean canPerformActions() {
-                        return actionBar != null && !actionBar.isActionModeShowed();
                     }
 
                     @Override
-                    public void didPressUrl(String url) {
-                        if (url.startsWith("@")) {
-                            MessagesController.openByUserName(url.substring(1), PostCreateActivity.this, 0);
-                        } else if (url.startsWith("#")) {
-                            MessagesActivity fragment = new MessagesActivity(null);
-                            fragment.setSearchString(url);
-                            presentFragment(fragment);
-                        }
+                    public void didPressedCancelSendButton(PostCell cell) {
+
                     }
 
                     @Override
-                    public void needOpenWebView(String url, String title, String originalUrl, int w, int h) {
-                        BottomSheet.Builder builder = new BottomSheet.Builder(mContext);
-                        builder.setCustomView(new WebFrameLayout(mContext, builder.create(), title, originalUrl, url, w, h));
-                        builder.setOverrideTabletWidth(true);
-                        showDialog(builder.create());
+                    public void didLongPressed(PostCell cell) {
+//                        createMenu(cell);
+
                     }
 
                     @Override
-                    public void didPressReplyMessage(ChatBaseCell cell, int id) {
-                        scrollToMessageId(id, cell.getMessageObject().getId(), true);
+                    public boolean canPerformActions() {
+                        return actionBar != null && !actionBar.isActionModeShowed();
                     }
                 });
-                if (view instanceof ChatMediaCell) {
-                    ((ChatMediaCell) view).setAllowedToSetPhoto(openAnimationEnded);
-                    ((ChatMediaCell) view).setMediaDelegate(new ChatMediaCell.ChatMediaCellDelegate() {
-                        @Override
-                        public void didClickedImage(ChatMediaCell cell) {
-                            MessageObject message = cell.getMessageObject();
-                            if (message.isSendError()) {
-                                createMenu(cell, false);
-                                return;
-                            } else if (message.isSending()) {
-                                return;
-                            }
-                            if (message.type == 1) {
-                                PhotoViewer.getInstance().setParentActivity(getParentActivity());
-                                PhotoViewer.getInstance().openPhoto(message, PostCreateActivity.this);
-                            } else if (message.type == 4) {
-                                if (!isGoogleMapsInstalled()) {
-                                    return;
-                                }
-                                LocationActivity fragment = new LocationActivity();
-                                fragment.setMessageObject(message);
-                                presentFragment(fragment);
-                            }
-                        }
 
-                        @Override
-                        public void didPressedOther(ChatMediaCell cell) {
-                            createMenu(cell, true);
-                        }
-                    });
-                }
             }
 
             return new Holder(view);
@@ -1957,14 +1452,16 @@ public void didPressedOther(ChatMediaCell cell) {
         public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
             int viewType = holder.getItemViewType();
             if (viewType == 5) {
-                holder.itemView.findViewById(R.id.progressLayout).setVisibility(loadsCount > 1 ? View.VISIBLE : View.INVISIBLE);
+                holder.itemView.findViewById(R.id.progressLayout).setVisibility(2 > 1 ? View.VISIBLE : View.INVISIBLE);
                 return;
             }
 
-            MessageObject message = messages.get(messages.size() - position - (!endReached ? 0 : 1));
+//            PostObject post = postObjects.get(postObjects.size() - position - (!endReached ? 0 : 1));
+            PostObject post = postObjects.get(position);
             View view = holder.itemView;
 
-            int type = message.contentType;
+//            int type = post.contentType;
+            int type = 1;
 
             boolean selected = false;
             boolean disableSelection = false;
@@ -1975,80 +1472,56 @@ public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
                 view.setBackgroundColor(0);
             }
 
-            if (view instanceof ChatBaseCell) {
-                ChatBaseCell baseCell = (ChatBaseCell) view;
-                baseCell.isChat = currentChat != null;
-                baseCell.setMessageObject(message);
-                baseCell.setCheckPressed(!disableSelection, disableSelection && selected);
-                if (view instanceof ChatAudioCell && MediaController.getInstance().canDownloadMedia(MediaController.AUTODOWNLOAD_MASK_AUDIO)) {
-                    ((ChatAudioCell) view).downloadAudioIfNeed();
-                }
-                baseCell.setHighlighted(highlightMessageId != Integer.MAX_VALUE && message.getId() == highlightMessageId);
-            } else if (view instanceof ChatActionCell) {
-                ChatActionCell actionCell = (ChatActionCell) view;
-                actionCell.setMessageObject(message);
-            } else if (type == 6) {
-                TextView messageTextView = (TextView) view.findViewById(R.id.chat_message_text);
-                messageTextView.setText(LocaleController.formatPluralString("NewMessages", unread_to_load));
+
+            if (view instanceof PostMediaCellOld) {
+                PostMediaCellOld cell = (PostMediaCellOld) view;
+                cell.setPostObject(post);
             }
         }
 
         @Override
         public int getItemViewType(int position) {
-            int offset = 1;
-            if (!endReached && messages.size() != 0) {
-                offset = 0;
-                if (position == 0) {
-                    return 5;
-                }
-            }
-            if (!forward_end_reached && position == (messages.size() + 1 - offset)) {
-                return 5;
-            }
-            MessageObject message = messages.get(messages.size() - position - offset);
-            return message.contentType;
+            return 1;
+//            int offset = 1;
+//            if (postObjects.size() != 0) {
+//                offset = 0;
+//                if (position == 0) {
+//                    return 5;
+//                }
+//            }
+//            if (position == (postObjects.size() + 1 - offset)) {
+//                return 5;
+//            }
+//            PostObject post = postObjects.get(postObjects.size() - position - offset);
+////            return post.contentType;
+//            return 1;
         }
 
         @Override
         public void onViewAttachedToWindow(RecyclerView.ViewHolder holder) {
-            if (holder.itemView instanceof ChatBaseCell) {
-                ChatBaseCell baseCell = (ChatBaseCell) holder.itemView;
-                baseCell.setHighlighted(highlightMessageId != Integer.MAX_VALUE && baseCell.getMessageObject().getId() == highlightMessageId);
-            }
-            if (holder.itemView instanceof ChatMessageCell) {
-                final ChatMessageCell messageCell = (ChatMessageCell) holder.itemView;
-                messageCell.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
-                    @Override
-                    public boolean onPreDraw() {
-                        messageCell.getViewTreeObserver().removeOnPreDrawListener(this);
-                        messageCell.getLocalVisibleRect(scrollRect);
-                        messageCell.setVisiblePart(scrollRect.top, scrollRect.bottom - scrollRect.top);
-                        return true;
-                    }
-                });
-            }
         }
 
-        public void updateRowWithMessageObject(MessageObject messageObject) {
-            int index = messages.indexOf(messageObject);
+        public void updateRowWithPostObject(PostObject postObject) {
+            int index = postObjects.indexOf(postObject);
             if (index == -1) {
                 return;
             }
-            notifyItemChanged(messages.size() - (!endReached ? 0 : 1) - index);
+//            notifyItemChanged(postObjects.size() - (!endReached ? 0 : 1) - index);
+            notifyItemChanged(postObjects.size() - index);
         }
 
-        public void removeMessageObject(MessageObject messageObject) {
-            int index = messages.indexOf(messageObject);
+        public void removePostObject(PostObject postObject) {
+            int index = postObjects.indexOf(postObject);
             if (index == -1) {
                 return;
             }
-            messages.remove(index);
-            notifyItemRemoved(messages.size() - (!endReached ? 0 : 1) - index);
+            postObjects.remove(index);
+//            notifyItemRemoved(postObjects.size() - (!endReached ? 0 : 1) - index);
+            notifyItemRemoved(postObjects.size() - index);
         }
     }
 
 
-
     private void openLocationChooser() {
         if (!isGoogleMapsInstalled()) {
             return;
@@ -2068,4 +1541,51 @@ public void didSelectLocation(TLRPC.MessageMedia location) {
         });
         presentFragment(fragment);
     }
+
+
+    private void didSelectPhotos(ArrayList<String> photos) {
+        //TODO set Photo after selecting it.
+//                                SendMessagesHelper.prepareSendingPhotos(photos, null, dialog_id);
+
+        //TODO get image width and height
+//                                BufferedImage bimg = ImageIO.read(new File(photos.get(0)));
+//                                int width          = bimg.getWidth();
+//                                int height         = bimg.getHeight();
+
+        if (photos != null && !photos.isEmpty()) {
+            //
+
+            BitmapFactory.Options options = new BitmapFactory.Options();
+            // TODO THIS Do not allow decode the file.
+//            options.inJustDecodeBounds = true;
+
+//Returns null, sizes are in the options variable
+            Bitmap bitmap = BitmapFactory.decodeFile(photos.get(0), options);
+            int width = options.outWidth;
+            int height = options.outHeight;
+//If you want, the MIME type will also be decoded (if possible)
+            String type = options.outMimeType;
+
+
+            //
+            bitmap = Bitmap.createScaledBitmap(bitmap, 100, 100, true);
+
+
+            Post post = new Post();
+            post.setId(PostServiceMock.generateString("1234567890", 5));
+            Image image = new Image();
+            image.setUrl(photos.get(0));
+            image.setWidth(width);
+            image.setHeight(height);
+            image.setBitmap(bitmap);
+//            image = ImageServiceMock.getRandomImage();
+            post.setImage(image);
+            post.setPreviewImage(image);
+            //TODO-temp
+//            PostCreateActivity.this.postObject = new PostObject(post);
+            PostCreateActivity.this.postObjects.add(new PostObject(post));
+
+            postCreateAdapter.notifyDataSetChanged();
+        }
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostPhotoViewerProvider.java b/TMessagesProj/src/main/java/org/telegram/ui/PostPhotoViewerProvider.java
index 82bd37f5d..ce8af446c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostPhotoViewerProvider.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostPhotoViewerProvider.java
@@ -35,14 +35,4 @@
 
     void updatePhotoAtIndex(int index);
 
-
-    public static interface MyPhotoViewerProvider {
-        public void willSwitchFromPhoto(PostObject postObject);
-        public void willHidePhotoViewer();
-        public boolean isPhotoChecked(int index);
-        public void setPhotoChecked(int index);
-        public void cancelButtonPressed();
-        public void sendButtonPressed(int index);
-        public int getSelectedCount();
-    }
 }
\ No newline at end of file
