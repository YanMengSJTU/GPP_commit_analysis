diff --git a/TMessagesProj/build.gradle b/TMessagesProj/build.gradle
index 8e64ce6b9..459e468db 100644
--- a/TMessagesProj/build.gradle
+++ b/TMessagesProj/build.gradle
@@ -1,8 +1,8 @@
 apply plugin: 'com.android.application'
 
 repositories {
-    mavenCentral()
     google()
+    mavenCentral()
     jcenter()
 }
 
@@ -20,12 +20,13 @@ dependencies {
     implementation 'com.google.android.gms:play-services-vision:15.0.2'
     implementation 'com.google.android.gms:play-services-wallet:16.0.0'
     implementation 'com.google.android.gms:play-services-wearable:15.0.1'
-    implementation 'com.android.support:support-core-ui:28.0.0-rc01'
-    implementation 'com.android.support:support-compat:28.0.0-rc01'
-    implementation 'com.android.support:support-core-utils:28.0.0-rc01'
-    implementation 'com.android.support:support-v13:28.0.0-rc01'
-    implementation 'com.android.support:palette-v7:28.0.0-rc01'
-    implementation 'com.android.support:exifinterface:28.0.0-rc01'
+    implementation 'com.android.support:support-core-ui:28.0.0-rc02'
+    implementation 'com.android.support:support-compat:28.0.0-rc02'
+    implementation 'com.android.support:support-core-utils:28.0.0-rc02'
+    implementation 'com.android.support:support-v13:28.0.0-rc02'
+    implementation 'com.android.support:palette-v7:28.0.0-rc02'
+    implementation 'com.android.support:exifinterface:28.0.0-rc02'
+    implementation 'com.android.support:recyclerview-v7:28.0.0-rc02'
     implementation 'net.hockeyapp.android:HockeySDK:5.1.0'
     implementation 'com.googlecode.mp4parser:isoparser:1.0.6'
     implementation 'com.stripe:stripe-android:2.0.2'
diff --git a/TMessagesProj/src/main/assets/better.attheme b/TMessagesProj/src/main/assets/better.attheme
index e5c35ec60..fba19adbf 100644
--- a/TMessagesProj/src/main/assets/better.attheme
+++ b/TMessagesProj/src/main/assets/better.attheme
@@ -11,4 +11,4 @@ windowBackgroundWhiteBlueHeader=-14042522
 dialogTextBlue=-11283062
 windowBackgroundWhiteValueText=-11283062
 switchThumbChecked=-11283062
-switchTrackChecked=-6297666
\ No newline at end of file
+switchTrackChecked=-8989795
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/io/bettergram/tools/DialogsObject.java b/TMessagesProj/src/main/java/io/bettergram/tools/DialogsObject.java
new file mode 100644
index 000000000..7f9b8a368
--- /dev/null
+++ b/TMessagesProj/src/main/java/io/bettergram/tools/DialogsObject.java
@@ -0,0 +1,42 @@
+package io.bettergram.tools;
+
+import org.telegram.messenger.DialogObject;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.UserConfig;
+import org.telegram.tgnet.TLRPC;
+
+public class DialogsObject extends DialogObject {
+
+    public static boolean isGroup(TLRPC.TL_dialog d) {
+//        if (DialogObject.isChannel(d)) {
+//            MessagesController messagesController = MessagesController.getInstance(UserConfig.selectedAccount);
+//            TLRPC.Chat chat = messagesController.getChat(-getLowerId(d));
+//            return (
+//                chat != null && (
+//                    chat.megagroup && (
+//                        chat.admin_rights != null && (
+//                            chat.admin_rights.post_messages || chat.admin_rights.add_admins
+//                        )
+//                    ) || chat.creator
+//                )
+//            );
+//        }
+        return getHigherId(d) != 0;
+    }
+
+    public static boolean isDirect(TLRPC.TL_dialog d) {
+//        int selfId = UserConfig.getInstance(UserConfig.selectedAccount).getClientUserId();
+//        int lower_id = getLowerId(d);
+        return getHigherId(d) == 0;
+    }
+
+    private static int getHigherId(TLRPC.TL_dialog d) {
+        return (int) (d.id >> 32);
+    }
+
+    private static int getLowerId(TLRPC.TL_dialog d) {
+        return (int) d.id;
+    }
+
+
+}
diff --git a/TMessagesProj/src/main/java/io/bettergram/tools/fragment/FragmentFactory.java b/TMessagesProj/src/main/java/io/bettergram/tools/fragment/FragmentFactory.java
new file mode 100644
index 000000000..cbb45c120
--- /dev/null
+++ b/TMessagesProj/src/main/java/io/bettergram/tools/fragment/FragmentFactory.java
@@ -0,0 +1,10 @@
+package io.bettergram.tools.fragment;
+
+import org.telegram.ui.ActionBar.BaseFragment;
+
+/**
+ * Created by User on 02/16/2018.
+ */
+public interface FragmentFactory {
+    BaseFragment createFragment();
+}
diff --git a/TMessagesProj/src/main/java/io/bettergram/ui/adapters/BetterDialogsAdapter.java b/TMessagesProj/src/main/java/io/bettergram/ui/adapters/BetterDialogsAdapter.java
new file mode 100644
index 000000000..29e1695c1
--- /dev/null
+++ b/TMessagesProj/src/main/java/io/bettergram/ui/adapters/BetterDialogsAdapter.java
@@ -0,0 +1,47 @@
+package io.bettergram.ui.adapters;
+
+import android.content.Context;
+
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.UserConfig;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.Adapters.DialogsAdapter;
+
+import java.util.List;
+
+import io.bettergram.tools.DialogsObject;
+import ru.johnlife.lifetools.optional.Mapper;
+import ru.johnlife.lifetools.tools.ListUtil;
+
+public class BetterDialogsAdapter extends DialogsAdapter {
+    private static final Mapper<ListUtil.Filter<TLRPC.TL_dialog>> filterMapper = new Mapper<ListUtil.Filter<TLRPC.TL_dialog>>()
+        .defaultValue(dialog->false)
+        .add(101, DialogsObject::isDirect)
+        .add(102, DialogsObject::isGroup)
+        ;
+    private int currentAccount = UserConfig.selectedAccount;
+    private List<TLRPC.TL_dialog> cache = null;
+
+    public BetterDialogsAdapter(Context context, int type, boolean onlySelect) {
+        super(context, type, onlySelect);
+    }
+
+    public void setDialogsType(int type) {
+        cache = null;
+        super.setDialogsType(type);
+        notifyDataSetChanged();
+    }
+
+    @Override
+    public List<TLRPC.TL_dialog> getDialogsArray() {
+        if (cache == null) {
+            int dialogsType = getDialogsType();
+            if (dialogsType < 100) {
+                cache = super.getDialogsArray();
+            } else {
+                cache = ListUtil.filter(MessagesController.getInstance(currentAccount).dialogs, filterMapper.get(dialogsType).get());
+            }
+        }
+        return cache;
+    }
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
index f4b864e65..98ed651eb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Adapters/DialogsAdapter.java
@@ -41,6 +41,7 @@
 import org.telegram.ui.Components.RecyclerListView;
 
 import java.util.ArrayList;
+import java.util.List;
 
 public class DialogsAdapter extends RecyclerListView.SelectionAdapter {
 
@@ -95,7 +96,7 @@ public boolean isDataSetChanged() {
         return current != getItemCount() || current == 1;
     }
 
-    private ArrayList<TLRPC.TL_dialog> getDialogsArray() {
+    public List<TLRPC.TL_dialog> getDialogsArray() {
         if (dialogsType == 0) {
             return MessagesController.getInstance(currentAccount).dialogs;
         } else if (dialogsType == 1) {
@@ -111,7 +112,7 @@ public boolean isDataSetChanged() {
     @Override
     public int getItemCount() {
         showContacts = false;
-        ArrayList<TLRPC.TL_dialog> array = getDialogsArray();
+        List<TLRPC.TL_dialog> array = getDialogsArray();
         int dialogsCount = array.size();
         if (dialogsCount == 0 && MessagesController.getInstance(currentAccount).loadingDialogs) {
             return 0;
@@ -143,7 +144,7 @@ public TLObject getItem(int i) {
             }
             return MessagesController.getInstance(currentAccount).getUser(ContactsController.getInstance(currentAccount).contacts.get(i).user_id);
         }
-        ArrayList<TLRPC.TL_dialog> arrayList = getDialogsArray();
+        List<TLRPC.TL_dialog> arrayList = getDialogsArray();
         if (hasHints) {
             int count = MessagesController.getInstance(currentAccount).hintDialogs.size();
             if (i < 2 + count) {
@@ -167,7 +168,7 @@ public void notifyDataSetChanged() {
     @Override
     public void onViewAttachedToWindow(RecyclerView.ViewHolder holder) {
         if (holder.itemView instanceof DialogCell) {
-            ((DialogCell) holder.itemView).checkCurrentDialogIndex();
+            ((DialogCell) holder.itemView).checkCurrentDialogIndex(this);
         }
     }
 
@@ -322,4 +323,12 @@ public int getItemViewType(int i) {
         }
         return 0;
     }
+
+    protected int getDialogsType() {
+        return dialogsType;
+    }
+
+    protected void setDialogsType(int dialogsType) {
+        this.dialogsType = dialogsType;
+    }
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
index 27e14bcf3..28cabb97d 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Cells/DialogCell.java
@@ -37,10 +37,11 @@
 import org.telegram.messenger.UserConfig;
 import org.telegram.messenger.ImageReceiver;
 import org.telegram.ui.ActionBar.Theme;
+import org.telegram.ui.Adapters.DialogsAdapter;
 import org.telegram.ui.Components.AvatarDrawable;
 import org.telegram.ui.Components.GroupCreateCheckBox;
 
-import java.util.ArrayList;
+import java.util.List;
 
 public class DialogCell extends BaseCell {
 
@@ -893,22 +894,10 @@ public void setDialogSelected(boolean value) {
         isSelected = value;
     }
 
-    private ArrayList<TLRPC.TL_dialog> getDialogsArray() {
-        if (dialogsType == 0) {
-            return MessagesController.getInstance(currentAccount).dialogs;
-        } else if (dialogsType == 1) {
-            return MessagesController.getInstance(currentAccount).dialogsServerOnly;
-        } else if (dialogsType == 2) {
-            return MessagesController.getInstance(currentAccount).dialogsGroupsOnly;
-        } else if (dialogsType == 3) {
-            return MessagesController.getInstance(currentAccount).dialogsForward;
-        }
-        return null;
-    }
-
-    public void checkCurrentDialogIndex() {
-        if (index < getDialogsArray().size()) {
-            TLRPC.TL_dialog dialog = getDialogsArray().get(index);
+    public void checkCurrentDialogIndex(DialogsAdapter dialogsAdapter) {
+        List<TLRPC.TL_dialog> dialogsArray = dialogsAdapter.getDialogsArray();
+        if (index < dialogsArray.size()) {
+            TLRPC.TL_dialog dialog = dialogsArray.get(index);
             TLRPC.DraftMessage newDraftMessage = DataQuery.getInstance(currentAccount).getDraft(currentDialogId);
             MessageObject newMessageObject = MessagesController.getInstance(currentAccount).dialogMessage.get(dialog.id);
             if (currentDialogId != dialog.id ||
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/PlusPagerSlidingTabStrip.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/PlusPagerSlidingTabStrip.java
new file mode 100644
index 000000000..275c8b3a6
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/PlusPagerSlidingTabStrip.java
@@ -0,0 +1,801 @@
+package org.telegram.ui.Components;
+
+/**
+ * Created by Sergio on 05/10/2016.
+ */
+
+/*
+ * Copyright (C) 2013 Andreas Stuetz <andreas.stuetz@gmail.com>
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.Paint.Style;
+import android.graphics.PorterDuff;
+import android.graphics.Typeface;
+import android.graphics.drawable.GradientDrawable;
+import android.os.Build;
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.support.v4.view.ViewPager;
+import android.support.v4.view.ViewPager.OnPageChangeListener;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.View;
+import android.view.ViewTreeObserver.OnGlobalLayoutListener;
+import android.widget.HorizontalScrollView;
+import android.widget.ImageButton;
+import android.widget.ImageView;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.FileLog;
+import org.telegram.ui.ActionBar.Theme;
+
+
+public class PlusPagerSlidingTabStrip extends HorizontalScrollView {
+
+    private boolean tabTitlesMode = false;
+    private boolean tabShouldExpand = true;
+
+    public interface IconTabProvider {
+        int getPageIconResId(int position);
+        String getPageTitle(int position);
+    }
+
+    public interface PlusScrollSlidingTabStripDelegate {
+        //void onPageSelected(int page);
+        void onTabLongClick(int position);
+        void onTabsUpdated();
+        void onTabClick();
+    }
+
+    private PlusScrollSlidingTabStripDelegate delegate;
+
+    public void setDelegate(PlusScrollSlidingTabStripDelegate scrollSlidingTabStripDelegate) {
+        delegate = scrollSlidingTabStripDelegate;
+    }
+
+    private static final String TAG = "PlusPagerSlidingTab";
+    private LinearLayout.LayoutParams defaultTabLayoutParams;
+    private LinearLayout.LayoutParams expandedTabLayoutParams;
+
+    private final PageListener pageListener = new PageListener();
+    public OnPageChangeListener delegatePageListener;
+
+    private LinearLayout tabsContainer;
+    //private FrameLayout tabsContainerTop;
+    private ViewPager pager;
+
+    private int tabCount;
+
+    private int currentPosition = 0;
+    private float currentPositionOffset = 0f;
+
+    private Paint rectPaint;
+    private Paint dividerPaint;
+
+    private int indicatorColor = 0xFF666666;
+    private int underlineColor = 0x1A000000;
+    private int dividerColor = 0x1A000000;
+
+    //private boolean shouldExpand = true;
+    private boolean textAllCaps = true;
+    //private boolean tabCenterAligned;
+    private int layoutWidth;
+
+    private int scrollOffset = AndroidUtilities.dp(/*52*/20);
+    private int indicatorHeight = AndroidUtilities.dp(8);
+    private int underlineHeight = AndroidUtilities.dp(2);
+    private int dividerPadding = AndroidUtilities.dp(12);
+    private int tabPadding = AndroidUtilities.dp(15);
+    private int dividerWidth = AndroidUtilities.dp(1);
+
+    //private int tabTextSize = Theme.plusTabsTextSize;
+    private int tabTextColor = 0xFF666666;
+    private int tabTextSelectedColor = 0xFF666666;
+    private Typeface tabTypeface = null;
+    private int tabTypefaceStyle = Typeface.BOLD;
+    private int btnBgRes;
+    //private int counterBgColor;
+    //private int counterBgColorMuted;
+
+    private int lastScrollX = 0;
+
+    //private int tabBackgroundResId = Theme.defColor;// = R.drawable.background_tab;
+
+    private int currentPage = 0;
+    //private boolean checkedTabWidths = false;
+    private int tabTextIconUnselectedColor;
+    private int tabTextIconSelectedColor;
+
+    public PlusPagerSlidingTabStrip(Context context) {
+        super(context);
+
+        setFillViewport(true);
+        setWillNotDraw(false);
+        setHorizontalScrollBarEnabled(false);
+
+        tabsContainer = new LinearLayout(context);
+        tabsContainer.setOrientation(LinearLayout.HORIZONTAL);
+        tabsContainer.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
+        tabsContainer.setBackgroundColor(Theme.getColor(Theme.key_actionBarDefault));
+        addView(tabsContainer);
+
+        rectPaint = new Paint();
+        rectPaint.setAntiAlias(true);
+        rectPaint.setStyle(Style.FILL);
+
+        dividerPaint = new Paint();
+        dividerPaint.setAntiAlias(true);
+        dividerPaint.setStrokeWidth(dividerWidth);
+
+        defaultTabLayoutParams = new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT);
+        //expandedTabLayoutParams = new LinearLayout.LayoutParams(0, LayoutParams.MATCH_PARENT, 1.0f);
+        expandedTabLayoutParams = new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT, 1.0F);
+        TypedValue outValue = new TypedValue();
+        getContext().getTheme().resolveAttribute(Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP ? android.R.attr.selectableItemBackgroundBorderless : android.R.attr.selectableItemBackground, outValue, true);
+        btnBgRes = outValue.resourceId;
+
+        //tabCenterAligned = tabTitlesMode;
+        layoutWidth = AndroidUtilities.displaySize.x;
+        if (tabTitlesMode) {
+            scrollOffset = layoutWidth / 2;
+        }
+        //SharedPreferences themePrefs = ApplicationLoader.applicationContext.getSharedPreferences(AndroidUtilities.THEME_PREFS, AndroidUtilities.THEME_PREFS_MODE);
+        //counterBgColorMuted = themePrefs.getInt("chatsHeaderTabCounterSilentBGColor", 0xffb9b9b9);
+        //counterBgColor = themePrefs.getInt("chatsHeaderTabCounterBGColor", 0xffd32f2f);
+        //Log.e("PlusPager", "PlusPagerSlidingTabStrip create");
+        tabTextIconUnselectedColor = Theme.getColor(Theme.key_actionBarDefaultIcon);
+        tabTextIconSelectedColor = Theme.getColor(Theme.key_actionBarDefaultIcon);
+    }
+
+    public void setViewPager(ViewPager pager) {
+        //Log.e("PlusPager", "setViewPager");
+        this.pager = pager;
+        if (pager.getAdapter() == null) {
+            throw new IllegalStateException("ViewPager does not have adapter instance.");
+        }
+        pager.setOnPageChangeListener(pageListener);
+        notifyDataSetChanged();
+        //pager.setOffscreenPageLimit(tabCount); // fixes bug with Nexus 5 6.0.1 and infinite scroll
+    }
+
+    public void setOnPageChangeListener(OnPageChangeListener listener) {
+        this.delegatePageListener = listener;
+    }
+
+    public void notifyDataSetChanged() {
+        //Log.e("PlusPager", "Plus Pager notifyDataSetChanged");
+        tabsContainer.removeAllViews();
+        tabCount = pager.getAdapter().getCount();
+        if(tabCount < 2){
+            return;
+        }
+        for (int i = 0; i < tabCount; i++) {
+            if(tabTitlesMode){
+                addTextTabWithCounter(i, ((IconTabProvider) pager.getAdapter()).getPageTitle(i));
+            } else{
+                addIconTabWithCounter(i, ((IconTabProvider) pager.getAdapter()).getPageIconResId(i));
+            }
+        }
+        updateTabStyles();
+        //checkedTabWidths = false;
+        getViewTreeObserver().addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
+            @Override
+            public void onGlobalLayout() {
+                if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
+                    getViewTreeObserver().removeGlobalOnLayoutListener(this);
+                } else {
+                    getViewTreeObserver().removeOnGlobalLayoutListener(this);
+                }
+                currentPosition = pager.getCurrentItem();
+                currentPage = currentPosition;
+                //scrollToChild(currentPosition, 0);
+                //modified to check if center alignment is true
+                if (tabTitlesMode) {
+                    scrollToChild2(currentPosition, 0);
+                }else {
+                    scrollToChild(currentPosition, 0);
+                }
+            }
+        });
+
+    }
+
+    private void addTextTabWithCounter(final int position, String title) {
+        TextView tab = new TextView(getContext());
+        //tab.setBackgroundResource(btnBgRes);
+        tab.setText(title);
+        tab.setTypeface(Typeface.DEFAULT_BOLD);
+        //tab.setTypeface(position == pager.getCurrentItem() ? Typeface.DEFAULT_BOLD : Typeface.DEFAULT);
+        tab.setTextSize(TypedValue.COMPLEX_UNIT_DIP, getTextSize());
+        tab.setGravity(Gravity.CENTER);
+        tab.setSingleLine();
+        tab.setTextColor(position == pager.getCurrentItem() ? tabTextIconSelectedColor : tabTextIconUnselectedColor);
+        if (textAllCaps) {
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
+                tab.setAllCaps(true);
+            }
+        }
+        addTabWithCounter(position, tab);
+    }
+
+    private void addIconTabWithCounter(final int position, int resId) {
+        ImageButton tab = new ImageButton(getContext());
+        //tab.setBackgroundResource(btnBgRes);
+        tab.setImageResource(resId);
+        //Log.e(TAG, "addIconTabWithCounter position " + position + " pager.getCurrentItem() " + pager.getCurrentItem());
+        tab.setColorFilter(position == pager.getCurrentItem() ? tabTextIconSelectedColor : tabTextIconUnselectedColor, PorterDuff.Mode.SRC_IN);
+        tab.setScaleType(ImageView.ScaleType.CENTER);
+        addTabWithCounter(position, tab);
+    }
+
+    public void addTabWithCounter(final int position, View view) {
+        //Log.e(TAG, "addTabWithCounter " + tabsContainer.getLayoutParams().toString());
+        RelativeLayout tab = new RelativeLayout(getContext());
+        tab.setFocusable(true);
+
+        tabsContainer.addView(tab, tabShouldExpand ? expandedTabLayoutParams : defaultTabLayoutParams);
+        //tab.setPadding(tabPadding, 0, tabPadding, 0);
+        //tabsContainer.addView(tab, position, tabShouldExpand ? expandedTabLayoutParams : defaultTabLayoutParams);
+        view.setBackgroundResource(btnBgRes);
+        //view.setId(1); // changed id from 0 to 1
+        view.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                //Log.e("PlusPager", "position " + position + " / " + pager.getCurrentItem());
+                if(position == pager.getCurrentItem()){
+                    if(delegate != null){
+                        delegate.onTabClick();
+                    }
+                } else {
+                    if (pager != null) {
+                        pager.setCurrentItem(position);
+                    }
+                }
+            }
+        });
+        view.setOnLongClickListener(new View.OnLongClickListener() {
+            public boolean onLongClick(View view) {
+                if(delegate != null){
+                    delegate.onTabLongClick(position);
+                }
+                return true;
+            }
+        });
+
+        tab.addView(view, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        tab.setSelected(position == currentPosition);
+
+        TextView textView = new TextView(getContext());
+
+        textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 12);
+        textView.setTextColor(0xffffffff);
+        textView.setGravity(Gravity.CENTER);
+        //textView.setBackgroundResource(R.drawable.sticker_badge);
+
+        GradientDrawable shape =  new GradientDrawable();
+        shape.setShape(GradientDrawable.RECTANGLE);
+        shape.setCornerRadius(AndroidUtilities.dp(32));
+        textView.setBackgroundDrawable(shape);
+
+        textView.setMinWidth(AndroidUtilities.dp(18));
+
+        //TODO: WHAAAAT!?!? textView.setPadding(AndroidUtilities.dp(Theme.chatsTabCounterSize > 10 ? Theme.chatsTabCounterSize - 7 : 4), 0, AndroidUtilities.dp(Theme.chatsTabCounterSize > 10 ? Theme.chatsTabCounterSize - 7 : 4), 0);
+        textView.setPadding(4,0,4,0);
+        RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
+        params.setMargins(AndroidUtilities.dp(3), AndroidUtilities.dp(5), AndroidUtilities.dp(3), AndroidUtilities.dp(5));  // left, top, right, bottom
+        //RelativeLayout.LayoutParams params = (RelativeLayout.LayoutParams) textView.getLayoutParams();
+        //params.addRule(tabShouldExpand ? RelativeLayout.ALIGN_PARENT_RIGHT : RelativeLayout.RIGHT_OF, view.getId());
+        params.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
+        params.addRule(/*Theme.plusTabsToBottom ? RelativeLayout.ALIGN_PARENT_TOP : */RelativeLayout.ALIGN_PARENT_BOTTOM);
+        //textView.setLayoutParams(params);
+        //tab.addView(textView, LayoutHelper.createRelative(LayoutHelper.WRAP_CONTENT, LayoutHelper.WRAP_CONTENT, 0, 6, 3, 6, RelativeLayout.ALIGN_PARENT_RIGHT));
+        tab.addView(textView, params);
+
+    }
+
+    public void changeTabsColor(int position){
+        //Log.e("PlusPager", "changeTabsColor position " + position + " currentPage " + currentPage);
+        RelativeLayout frame = (RelativeLayout)tabsContainer.getChildAt(currentPage);
+        if(frame != null) {
+            try{
+                View view = ((RelativeLayout)tabsContainer.getChildAt(position)).getChildAt(0);
+                if (view instanceof ImageButton) {
+                    ((ImageButton) frame.getChildAt(0)).setColorFilter(tabTextIconUnselectedColor, PorterDuff.Mode.SRC_IN); // Previous
+                    ((ImageButton) view).setColorFilter(tabTextIconSelectedColor, PorterDuff.Mode.SRC_IN); // Selected
+                } else if (view instanceof TextView) {
+                    ((TextView) frame.getChildAt(0)).setTextColor(tabTextIconUnselectedColor); // Previous
+                    ((TextView) view).setTextColor(tabTextIconSelectedColor); // Selected
+                }
+            } catch (Exception e) {
+                FileLog.e( e);
+            }
+        }
+    }
+
+    public void updateCounter(int position, int count, boolean allMuted, boolean force){
+        RelativeLayout frame = (RelativeLayout)tabsContainer.getChildAt(position);
+        //Log.e("TabsView", "PlusPager updateCounter position " + position + " unreadCount " + count + " allMuted " + allMuted);
+        if(frame != null && frame.getChildCount() > 1) {
+            TextView tv = (TextView) frame.getChildAt(1);
+            if(tv != null){
+                //Log.e("TabsView", "PlusPager updateCounter NOT NULL");
+//                if(count > 0 && !Theme.plusHideTabsCounters){
+//                    tv.setVisibility(VISIBLE);
+//                    tv.setText(count >= 10000 && Theme.plusLimitTabsCounters ? "+9999" : String.format("%d", count));
+//                    tv.getBackground().setColorFilter(allMuted ? Theme.usePlusTheme ? Theme.chatsTabCounterSilentBGColor : Theme.getColor(Theme.key_chats_unreadCounterMuted) : Theme.usePlusTheme ? Theme.chatsTabCounterBGColor : Theme.getColor(Theme.key_chats_unreadCounter), PorterDuff.Mode.SRC_IN);
+//                } else{
+//                    tv.setVisibility(INVISIBLE);
+//                    //tv.getBackground().setColorFilter(0x00000000, PorterDuff.Mode.SRC_IN);
+//                }
+//                if(force) {
+//                    tv.setTextSize(TypedValue.COMPLEX_UNIT_DIP, Theme.chatsTabCounterSize);
+//                    tv.setTextColor(Theme.usePlusTheme ? Theme.chatsTabCounterColor : Theme.getColor(Theme.key_chats_unreadCounterText));
+//                    tv.setPadding(AndroidUtilities.dp(Theme.chatsTabCounterSize > 10 ? Theme.chatsTabCounterSize - 7 : 4), 0, AndroidUtilities.dp(Theme.chatsTabCounterSize > 10 ? Theme.chatsTabCounterSize - 7 : 4), 0);
+//                }
+            }
+        }
+    }
+
+    private void updateTabStyles() {
+        //Log.e("TabsView", "PlusPager updateTabStyles tabShouldExpand " + tabShouldExpand);
+        //int childWidth = 0;
+        //int tabSize = (AndroidUtilities.displaySize.x / tabCount);
+        for (int i = 0; i < tabCount; i++) {
+            View tab = tabsContainer.getChildAt(i); // RelativeLayout
+
+             // ImageButton or TextView
+
+            //Log.e("PlusPager", i + " updateTabStyles view " + tab.toString());
+
+            //v.setPadding(0, 0, 0, 0);
+            tab.setPadding(0, 0, 0, 0);
+            if (tabShouldExpand) {
+                if(tab.getLayoutParams() != expandedTabLayoutParams)tab.setLayoutParams(expandedTabLayoutParams);
+                //v.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 1.0F));
+                //v.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.MATCH_PARENT, 1.0F));
+            } else {
+                if(tab.getLayoutParams() != defaultTabLayoutParams)tab.setLayoutParams(defaultTabLayoutParams);
+                View view = ((RelativeLayout)tabsContainer.getChildAt(i)).getChildAt(0);
+                if(view != null) {
+                    view.setPadding(tabPadding, 0, tabPadding, 0);
+                }
+
+                //v.setPadding(tabPadding, 0, tabPadding, 0);
+            }
+            //Log.e("PlusPager", i + " updateTabStyles tab " + tab.toString() + " " + tab.getMeasuredWidth() + " " + tab.getWidth());
+            //if (v instanceof TextView) {
+
+                //TextView tab = (TextView) v;
+                //tab.setTextSize(TypedValue.COMPLEX_UNIT_DIP, tabTextSize);
+                //tab.setTypeface(tabTypeface, tabTypefaceStyle);
+                //tab.setTypeface(Typeface.DEFAULT_BOLD);
+                //tab.setTextColor(i == currentPosition ? tabTextSelectedColor : tabTextColor);
+
+                // setAllCaps() is only available from API 14, so the upper case is made manually if we are on a
+                // pre-ICS-build
+                //if (textAllCaps) {
+                //    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
+                //        tab.setAllCaps(true);
+                //    }
+                //}
+            //}
+            //childWidth += v.getWidth();
+
+
+
+        }
+        if(delegate != null){
+            delegate.onTabsUpdated();
+        }
+        //Log.e("PlusPager", AndroidUtilities.displaySize.x + " / " + AndroidUtilities.displaySize.x/tabCount + " / " + tabsContainer.getMeasuredWidth() + " " + pager.getCurrentItem());
+
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+        //Log.e("PlusPager", "onMeasure myWidth " + getMeasuredWidth() + " tabsContainer.getWidth() " + tabsContainer.getWidth() + " getWidth " + tabsContainer.getChildAt(0).getWidth());
+        if (!tabShouldExpand || MeasureSpec.getMode(widthMeasureSpec) == MeasureSpec.UNSPECIFIED) {
+            return;
+        }
+        int myWidth = getMeasuredWidth();
+        tabsContainer.measure(MeasureSpec.EXACTLY | myWidth, heightMeasureSpec);
+        /*for (int i = 0; i < tabCount; i++) { Detects if tab title is cutted off
+            View tab = tabsContainer.getChildAt(i);
+            if(tabTitlesMode){
+                TextView tv = (TextView) ((RelativeLayout)tab).getChildAt(0);
+                if(tv != null) {
+                    android.graphics.Rect bounds = new android.graphics.Rect();
+                    String text = String.valueOf(tv.getText());
+                    tv.getPaint().getTextBounds(text, 0, text.length(), bounds);
+                    CharSequence txt = tv.getText();
+                    float width = tv.getPaint().measureText(txt, 0, txt.length());
+                    int w = bounds.left + bounds.width();
+
+
+                    if (w > tv.getWidth()) {
+
+                    }
+                }
+            }
+        }*/
+
+    }
+
+    private void scrollToChild(int position, int offset) {
+        if (tabCount == 0) {
+            return;
+        }
+        if(position >= tabsContainer.getChildCount()){
+            return;
+        }
+
+        int newScrollX = tabsContainer.getChildAt(position).getLeft() + offset; // NullPointerException tabsContainer.getChildAt(position)
+        if (position > 0 || offset > 0) {
+            newScrollX -= scrollOffset;
+        }
+
+        if (newScrollX != lastScrollX) {
+            lastScrollX = newScrollX;
+            scrollTo(newScrollX, 0);
+        }
+    }
+
+    //The method to scroll but still keeping the tab center aligned
+    private void scrollToChild2(int position, float offset) {
+        if (tabCount == 0) {
+            return;
+        }
+        if(position >= tabsContainer.getChildCount()){
+            return;
+        }
+        int cellWidth = tabsContainer.getChildAt(position).getWidth();
+        //Log.e(TAG, "scrollToChild2 tabCount " + tabCount + " cellWidth " + cellWidth);
+        int newScrollX = lastScrollX;
+
+        if (offset < 0.01 && offset > -0.01) {
+            if (position + 1 <= tabCount - 1) {
+                newScrollX = (int) (tabsContainer.getChildAt(position)
+                        .getLeft() + cellWidth / 2 + (float) ((cellWidth + tabsContainer
+                        .getChildAt(position + 1).getWidth() / 2) * offset));
+            } else {
+                newScrollX = (int) (tabsContainer.getChildAt(position)
+                        .getLeft() + cellWidth / 2 + (float) ((cellWidth + tabsContainer
+                        .getChildAt(position).getWidth()) * offset) / 2);
+            }
+        } else {
+            if (position + 1 <= tabCount - 1) {
+                newScrollX = (int) (tabsContainer.getChildAt(position)
+                        .getLeft() + (cellWidth * (float) (1 - offset)) / 2 + (float) ((cellWidth + tabsContainer
+                        .getChildAt(position + 1).getWidth() / 2) * offset));
+            } else {
+                newScrollX = (int) (tabsContainer.getChildAt(position)
+                        .getLeft() + (cellWidth * (float) (1 - offset)) / 2 + (float) ((cellWidth + tabsContainer
+                        .getChildAt(position).getWidth()) * offset) / 2);
+            }
+        }
+
+        if (position >= 0 || offset > 0.01) {
+            newScrollX -= scrollOffset;
+        }
+
+        if (newScrollX != lastScrollX) {
+            lastScrollX = newScrollX;
+            scrollTo(newScrollX, 0);
+        }
+    }
+
+    private void enableShouldExpand() {
+        SharedPreferences plusPreferences = ApplicationLoader.applicationContext.getSharedPreferences("plusconfig", Activity.MODE_PRIVATE);
+        SharedPreferences.Editor editor = plusPreferences.edit();
+        tabShouldExpand = true;
+        editor.putBoolean("tabsShouldExpand", true);
+        editor.apply();
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+        //Log.e("PlusPager", "onDraw");
+        if (isInEditMode() || tabCount == 0 || currentPosition >= tabCount) {
+            return;
+        }
+        //Log.e("PlusPager", "onDraw getWidth " + tabsContainer.getWidth() + " " + tabsContainer.getChildAt(0).getWidth());
+//        if(!tabShouldExpand && tabTitlesMode){
+            if(tabsContainer.getChildAt(0).getWidth() > tabsContainer.getWidth() / 2){
+                enableShouldExpand();
+                notifyDataSetChanged();
+                return;
+            }
+//        }
+        final int height = getHeight();
+
+        //draw underline
+        rectPaint.setColor(Theme.getColor(Theme.key_actionBarDefaultIcon));
+        canvas.drawRect(0, height - underlineHeight, tabsContainer.getWidth(), height, rectPaint);
+
+        // default: line below current tab
+        View currentTab = tabsContainer.getChildAt(currentPosition);
+        float lineLeft = currentTab.getLeft();
+        float lineRight = currentTab.getRight();
+
+        // if there is an offset, start interpolating left and right coordinates between current and next tab
+        if (currentPositionOffset > 0f && currentPosition < tabCount - 1) {
+
+            View nextTab = tabsContainer.getChildAt(currentPosition + 1);
+            final float nextTabLeft = nextTab.getLeft();
+            final float nextTabRight = nextTab.getRight();
+
+            lineLeft = (currentPositionOffset * nextTabLeft + (1f - currentPositionOffset) * lineLeft);
+            lineRight = (currentPositionOffset * nextTabRight + (1f - currentPositionOffset) * lineRight);
+        }
+
+        // draw indicator line
+        rectPaint.setColor(Theme.getColor(Theme.key_actionBarDefaultIcon));
+        canvas.drawRect(lineLeft, height - indicatorHeight, lineRight, height, rectPaint);
+
+        // draw divider
+        dividerPaint.setColor(dividerColor);
+        for (int i = 0; i < tabCount - 1; i++) {
+            View tab = tabsContainer.getChildAt(i);
+            canvas.drawLine(tab.getRight(), dividerPadding, tab.getRight(), height - dividerPadding, dividerPaint);
+        }
+    }
+
+    private class PageListener implements OnPageChangeListener {
+
+        @Override
+        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
+            //Log.e("PlusPager", "PageListener onPageScrolled position " + position + " positionOffset " + positionOffset + " positionOffsetPixels " + positionOffsetPixels + " / " + (int) (positionOffset * tabsContainer.getChildAt(position).getWidth()));
+            //View selectedChild = tabsContainer.getChildAt(position);
+            currentPosition = position;
+            currentPositionOffset = positionOffset;
+            //scrollToChild(position, (int) (positionOffset * selectedChild.getWidth()));
+            scroll();
+            invalidate();
+            if (delegatePageListener != null) {
+                delegatePageListener.onPageScrolled(position, positionOffset, positionOffsetPixels);
+            }
+        }
+
+        @Override
+        public void onPageScrollStateChanged(int state) {
+            //Log.e("PlusPager", "PageListener onPageScrollStateChanged state " + state + " pager.getCurrentItem() " + pager.getCurrentItem() + " currentPosition " + currentPosition);
+            if (state == ViewPager.SCROLL_STATE_IDLE) {
+                //scrollToChild(pager.getCurrentItem(), 0);
+                scroll();
+            }
+            if (delegatePageListener != null) {
+                delegatePageListener.onPageScrollStateChanged(state);
+            }
+        }
+
+        private void scroll() {
+            if (tabTitlesMode) {
+                scrollToChild2(pager.getCurrentItem(), 0);
+            }else {
+                scrollToChild(pager.getCurrentItem(), 0);
+            }
+        }
+
+        @Override
+        public void onPageSelected(int position) {
+            //Log.e("PlusPager", "PageListener onPageSelected position " + position + " currentPosition " + currentPosition);
+            if (delegatePageListener != null) {
+                delegatePageListener.onPageSelected(position);
+            }
+            /*for (int a = 0; a < tabsContainer.getChildCount(); a++) {
+                tabsContainer.getChildAt(a).setSelected(a == position);
+                ((RelativeLayout)tabsContainer.getChildAt(position)).getChildAt(0).setSelected(a == position);
+            }*/
+            changeTabsColor(position);
+            currentPage = position;
+        }
+
+    }
+
+    public void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4) {
+//        if (!tabShouldExpand) {
+            post(new Runnable() {
+                public void run() {
+                    PlusPagerSlidingTabStrip.this.notifyDataSetChanged();
+                }
+            });
+//        }
+    }
+
+    /*public void setIndicatorColor(int indicatorColor) {
+        this.indicatorColor = indicatorColor;
+        invalidate();
+    }
+
+    public void setIndicatorColorResource(int resId) {
+        this.indicatorColor = getResources().getColor(resId);
+        invalidate();
+    }
+
+    public int getIndicatorColor() {
+        return this.indicatorColor;
+    }*/
+
+    public void setIndicatorHeight(int indicatorLineHeightPx) {
+        this.indicatorHeight = indicatorLineHeightPx;
+        invalidate();
+    }
+
+    public int getIndicatorHeight() {
+        return indicatorHeight;
+    }
+
+    public void setUnderlineColor(int underlineColor) {
+        this.underlineColor = underlineColor;
+        invalidate();
+    }
+
+    public void setUnderlineColorResource(int resId) {
+        this.underlineColor = getResources().getColor(resId);
+        invalidate();
+    }
+
+    public int getUnderlineColor() {
+        return underlineColor;
+    }
+
+    public void setUnderlineHeight(int underlineHeightPx) {
+        this.underlineHeight = underlineHeightPx;
+        invalidate();
+    }
+
+    public int getUnderlineHeight() {
+        return underlineHeight;
+    }
+    public void setDividerColor(int dividerColor) {
+        this.dividerColor = dividerColor;
+        invalidate();
+    }
+
+    public void setDividerColorResource(int resId) {
+        this.dividerColor = getResources().getColor(resId);
+        invalidate();
+    }
+
+    public int getDividerColor() {
+        return dividerColor;
+    }
+
+    public void setDividerPadding(int dividerPaddingPx) {
+        this.dividerPadding = dividerPaddingPx;
+        invalidate();
+    }
+
+    public int getDividerPadding() {
+        return dividerPadding;
+    }
+
+    public void setScrollOffset(int scrollOffsetPx) {
+        this.scrollOffset = scrollOffsetPx;
+        invalidate();
+    }
+
+    public int getScrollOffset() {
+        return scrollOffset;
+    }
+
+    public void setShouldExpand(boolean shouldExpand) {
+//        if(tabShouldExpand != shouldExpand) {
+//            tabShouldExpand = shouldExpand;
+            //tabsContainer.setLayoutParams(new FrameLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
+            //updateTabStyles();
+            requestLayout();
+//        }
+    }
+
+    public boolean isTextAllCaps() {
+        return textAllCaps;
+    }
+
+    public void setAllCaps(boolean textAllCaps) {
+        this.textAllCaps = textAllCaps;
+    }
+
+    public void setTextSize(int textSizePx) {
+//        updateTabStyles();
+    }
+
+    public int getTextSize() {
+        return 14;
+    }
+
+    /*public void setTextColor(int textColor) {
+        if(this.tabTextColor != textColor) {
+            this.tabTextColor = textColor;
+            updateTabStyles();
+        }
+    }
+
+    public void setTextSelectedColor(int textColor) {
+        if(this.tabTextSelectedColor != textColor) {
+            this.tabTextSelectedColor = textColor;
+            updateTabStyles();
+        }
+    }
+
+    public int getTextColor() {
+        return tabTextColor;
+    }*/
+
+    public void setTypeface(Typeface typeface, int style) {
+        this.tabTypeface = typeface;
+        this.tabTypefaceStyle = style;
+        updateTabStyles();
+    }
+
+    @Override
+    public void onRestoreInstanceState(Parcelable state) {
+        SavedState savedState = (SavedState) state;
+        super.onRestoreInstanceState(savedState.getSuperState());
+        currentPosition = savedState.currentPosition;
+        requestLayout();
+    }
+
+    @Override
+    public Parcelable onSaveInstanceState() {
+        Parcelable superState = super.onSaveInstanceState();
+        SavedState savedState = new SavedState(superState);
+        savedState.currentPosition = currentPosition;
+        return savedState;
+    }
+
+    static class SavedState extends BaseSavedState {
+        int currentPosition;
+
+        public SavedState(Parcelable superState) {
+            super(superState);
+        }
+
+        private SavedState(Parcel in) {
+            super(in);
+            currentPosition = in.readInt();
+        }
+
+        @Override
+        public void writeToParcel(Parcel dest, int flags) {
+            super.writeToParcel(dest, flags);
+            dest.writeInt(currentPosition);
+        }
+
+        public static final Parcelable.Creator<SavedState> CREATOR = new Parcelable.Creator<SavedState>() {
+            @Override
+            public SavedState createFromParcel(Parcel in) {
+                return new SavedState(in);
+            }
+
+            @Override
+            public SavedState[] newArray(int size) {
+                return new SavedState[size];
+            }
+        };
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/Components/TabsView.java b/TMessagesProj/src/main/java/org/telegram/ui/Components/TabsView.java
new file mode 100644
index 000000000..6b8de6b51
--- /dev/null
+++ b/TMessagesProj/src/main/java/org/telegram/ui/Components/TabsView.java
@@ -0,0 +1,381 @@
+package org.telegram.ui.Components;
+
+import android.annotation.TargetApi;
+import android.app.Activity;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.database.DataSetObserver;
+import android.os.Build;
+import android.support.v4.view.PagerAdapter;
+import android.support.v4.view.ViewPager;
+import android.util.AttributeSet;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+
+import org.telegram.messenger.AndroidUtilities;
+import org.telegram.messenger.ApplicationLoader;
+import org.telegram.messenger.FileLog;
+import org.telegram.messenger.LocaleController;
+import org.telegram.messenger.MessagesController;
+import org.telegram.messenger.NotificationCenter;
+import org.telegram.messenger.UserConfig;
+import org.telegram.tgnet.TLRPC;
+import org.telegram.ui.ActionBar.Theme;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import io.bettergram.messenger.R;
+
+/**
+ * Created by Yan on 09/07/2018.
+ */
+
+public class TabsView extends FrameLayout implements NotificationCenter.NotificationCenterDelegate{
+    private static final String TAG = "TabsView";
+    //TODO: move to controller
+    private static int selectedTab = 0;
+    private static final List<Tab> tabs = Arrays.asList(
+        new Tab(LocaleController.getString("tabsAll", R.string.tabsAll), R.drawable.tab_all, 0),
+        new Tab(LocaleController.getString("tabsDirect", R.string.tabsDirect), R.drawable.tab_user, 101),
+        new Tab(LocaleController.getString("tabsGroups", R.string.tabsGroups), R.drawable.tab_group, 102),
+        new Tab(LocaleController.getString("tabsAnnouncements", R.string.tabsAnnouncements), R.drawable.tab_channel, 103),
+        new Tab(LocaleController.getString("tabsFavorites", R.string.tabsFavorites), R.drawable.tab_favs, 104),
+        new Tab(LocaleController.getString("tabsCrypto", R.string.tabsCrypto), R.drawable.tab_bot, 105)
+    );
+    private static class Tab {
+        private final String title;
+        private final int res;
+        private final int type;
+        private int position; //0:All 1:Users 2:Groups 3:SuperGroups 4:Channels 5:Bots 6:Favs(8) 7:Groups+SuperGroups(9) 8:Creator(10) 9:Unread(11)
+        private int unread;
+
+        Tab(String title, int res, int type) {
+            this(title, res, type, -1);
+        }
+
+        Tab(String title, int res, int type, int position) {
+            this.title = title;
+            this.res = res;
+            this.type = type;
+            this.position = position;
+            this.unread = 0;
+        }
+
+        public String getTitle(){
+            return this.title;
+        }
+
+        public int getRes(){
+            return this.res;
+        }
+
+        public int getType(){
+            return this.type;
+        }
+
+        public int getPosition(){
+            return this.position;
+        }
+
+        public int getUnread(){
+            return this.unread;
+        }
+
+        public void setUnread(int unread){
+            this.unread = unread;
+        }
+    }
+
+    public interface RefreshAction {
+        void onNewTypeSelected(int type);
+    }
+
+    private LinearLayout tabsContainer;
+    private int currentAccount = UserConfig.selectedAccount;
+    private PlusPagerSlidingTabStrip pagerSlidingTabStrip;
+    private ViewPager pager;
+    private int currentPage;
+    private boolean force;
+    private RefreshAction refreshAction;
+
+    public TabsView refershAction(RefreshAction action) {
+        this.refreshAction = action;
+        return this;
+    }
+
+    private void loadArray() {
+        pager.setAdapter(null);
+        pager.setOffscreenPageLimit(tabs.size()); // fixes bug with Nexus 5 6.0.1 and infinite scroll
+        pager.setAdapter(new TabsAdapter());
+        updatePagerItem();
+    }
+
+    public void reloadTabs(){
+        loadArray();
+        pager.getAdapter().notifyDataSetChanged();
+    }
+
+    private void updatePagerItem(){
+        currentPage = selectedTab;
+        pager.setCurrentItem(currentPage);
+    }
+
+    public TabsView(Context context) {
+        super(context);
+        init(context);
+    }
+
+    public TabsView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init(context);
+    }
+
+    public TabsView(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+        init(context);
+    }
+
+    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
+    public TabsView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
+        super(context, attrs, defStyleAttr, defStyleRes);
+        init(context);
+    }
+
+    private void init(Context context) {
+        pager = new ViewPager(context) {
+            @Override
+            public boolean onInterceptTouchEvent(MotionEvent ev) {
+                if (getParent() != null) {
+                    getParent().requestDisallowInterceptTouchEvent(true);
+                }
+                return super.onInterceptTouchEvent(ev);
+            }
+        };
+
+        loadArray();
+        tabsContainer = new LinearLayout(context) {
+            @Override
+            public boolean onInterceptTouchEvent(MotionEvent ev) {
+                if (getParent() != null) {
+                    getParent().requestDisallowInterceptTouchEvent(true);
+                }
+                return super.onInterceptTouchEvent(ev);
+            }
+        };
+        tabsContainer.setOrientation(LinearLayout.HORIZONTAL);
+        addView(tabsContainer, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        pagerSlidingTabStrip = new PlusPagerSlidingTabStrip(context);
+        pagerSlidingTabStrip.setShouldExpand(false);
+        pagerSlidingTabStrip.setViewPager(pager);
+        pagerSlidingTabStrip.setIndicatorHeight(AndroidUtilities.dp(3));
+
+        pagerSlidingTabStrip.setDividerColor(0x00000000);
+        pagerSlidingTabStrip.setUnderlineHeight(0);
+        pagerSlidingTabStrip.setUnderlineColor(/*0xffe2e5e7*/0x00000000);
+
+        tabsContainer.addView(pagerSlidingTabStrip, LayoutHelper.createLinear(0, LayoutHelper.MATCH_PARENT, 1.0f));
+
+        pagerSlidingTabStrip.setDelegate(new PlusPagerSlidingTabStrip.PlusScrollSlidingTabStripDelegate() {
+            @Override
+            public void onTabLongClick(int position) {
+                if(selectedTab == position) {
+                    //TODO
+                }
+            }
+
+            @Override
+            public void onTabsUpdated() {
+                forceUpdateTabCounters();
+                unreadCount();
+            }
+
+            @Override
+            public void onTabClick() {
+                //gone into RefreshAction
+            }
+        });
+
+        pagerSlidingTabStrip.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {
+
+            private boolean loop;
+            @Override
+            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {}
+
+            @Override
+            public void onPageSelected(int position) {
+                if (refreshAction != null) {
+                    refreshAction.onNewTypeSelected(tabs.get(position).getType());
+                }
+                currentPage = position;
+                saveNewPage();
+            }
+
+            @Override
+            public void onPageScrollStateChanged(int state) {
+                if (state == ViewPager.SCROLL_STATE_IDLE) {
+                    if(loop){
+                        AndroidUtilities.runOnUIThread(() -> pager.setCurrentItem(currentPage == 0 ? pager.getAdapter().getCount() - 1 : 0), 100);
+                        loop = false;
+                    }
+                } else if (state == 1) {
+                    loop = false;
+                } else if (state == 2) {
+                    loop = false;
+                }
+            }
+        });
+
+        addView(pager, 0, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        forceUpdateTabCounters();
+        unreadCount();
+    }
+
+    private void saveNewPage() {
+        selectedTab = currentPage;
+        SharedPreferences plusPreferences = ApplicationLoader.applicationContext.getSharedPreferences("plusconfig", Activity.MODE_PRIVATE);
+        SharedPreferences.Editor editor = plusPreferences.edit();
+        editor.putInt("selectedTab", selectedTab);
+        //TODO: important
+//        Theme.plusDialogType = tabsArray.get(selectedTab).getType();
+//        editor.putInt("dialogType", Theme.plusDialogType);
+        editor.apply();
+    }
+
+    public ViewPager getPager(){
+        return pager;
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
+        //TODO: important
+//        NotificationCenter.getInstance(currentAccount).removeObserver(this, NotificationCenter.refreshTabsCounters);
+    }
+
+    @Override
+    protected void onAttachedToWindow() {
+        super.onAttachedToWindow();
+        //TODO: important
+//        NotificationCenter.getInstance(currentAccount).addObserver(this, NotificationCenter.refreshTabsCounters);
+    }
+
+    @Override
+    public void didReceivedNotification(int id, int account, Object... args) {
+        //TODO: important
+//        if (id == NotificationCenter.refreshTabsCounters) {
+//            unreadCount();
+//        }
+    }
+
+    public void forceUpdateTabCounters(){
+        force = true;
+    }
+
+    private void unreadCount(){
+//        MessagesController messagesController = MessagesController.getInstance(currentAccount);
+//        unreadCount(messagesController.dialogsUnread, positions[8]);
+//        unreadCount(messagesController.dialogsAdmin, positions[7]);
+//        unreadCount(messagesController.dialogsFavs, positions[6]);
+//        unreadCount(messagesController.dialogsBots, positions[5]);
+//        unreadCount(messagesController.dialogsChannels, positions[4]);
+//        unreadCountGroups();
+//        unreadCount(messagesController.dialogsUsers, positions[1]);
+//        unreadCountAll(messagesController.dialogs, positions[0]);
+    }
+
+    private void unreadCountGroups(){
+        MessagesController messagesController = MessagesController.getInstance(currentAccount);
+//        if(!Theme.plusHideGroupsTab)unreadCount(!Theme.plusHideSuperGroupsTab ? messagesController.dialogsGroups : messagesController.dialogsGroupsAll, positions[2]);
+//        if(!Theme.plusHideSuperGroupsTab)unreadCount(messagesController.dialogsMegaGroups, positions[3]);
+    }
+
+    private void unreadCount(final ArrayList<TLRPC.TL_dialog> dialogs, int position){
+        if(position == -1){
+            return;
+        }
+        SharedPreferences plusPreferences = ApplicationLoader.applicationContext.getSharedPreferences("plusconfig", Activity.MODE_PRIVATE);
+        boolean allMuted = true;
+        int unreadCount = 0;
+        if (dialogs != null && !dialogs.isEmpty()) {
+            for(int a = 0; a < dialogs.size(); a++) {
+                TLRPC.TL_dialog dialg = dialogs.get(a);
+                if(dialg != null && dialg.unread_count > 0) {
+                    boolean isMuted = MessagesController.getInstance(currentAccount).isDialogMuted(dialg.id);
+                    if (!isMuted) {
+                        int i = dialg.unread_count;
+                        if (i == 0 && plusPreferences.getInt("unread_" + dialg.id, 0) == 1) i = 1;
+                        if (i > 0) {
+                            unreadCount = unreadCount + i;
+                            if (!isMuted) allMuted = false;
+                        }
+                    }
+                }
+            }
+        }
+
+        if(unreadCount != tabs.get(position).getUnread() || force) {
+            tabs.get(position).setUnread(unreadCount);
+            pagerSlidingTabStrip.updateCounter(position, unreadCount, allMuted, force);
+        }
+    }
+
+    private void unreadCountAll(ArrayList<TLRPC.TL_dialog> dialogs, int position){
+        unreadCount(dialogs, position);
+        force = false;
+    }
+
+    private class TabsAdapter extends PagerAdapter implements PlusPagerSlidingTabStrip.IconTabProvider {
+        @Override
+        public int getCount() {
+            return tabs.size();
+        }
+
+        @Override
+        public void notifyDataSetChanged() {
+            super.notifyDataSetChanged();
+            if(pagerSlidingTabStrip != null){
+                pagerSlidingTabStrip.notifyDataSetChanged();
+            }
+        }
+
+        @Override
+        public Object instantiateItem(ViewGroup viewGroup, int position) {
+            View view = new View(viewGroup.getContext());
+            viewGroup.addView(view);
+            return view;
+        }
+
+        @Override
+        public void destroyItem(ViewGroup viewGroup, int position, Object object) {
+            viewGroup.removeView((View)object);
+        }
+
+        @Override
+        public boolean isViewFromObject(View view, Object object) {
+            return view == object;
+        }
+
+        @Override
+        public void unregisterDataSetObserver(DataSetObserver observer) {
+            if (observer != null) {
+                super.unregisterDataSetObserver(observer);
+            }
+        }
+
+        @Override
+        public int getPageIconResId(int position) {
+            return tabs.get(position).getRes();
+        }
+
+        @Override
+        public String getPageTitle(int position) {
+            return tabs.get(position).getTitle();
+        }
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
index 373d7e60b..88436f491 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/DialogsActivity.java
@@ -39,6 +39,7 @@
 import android.widget.EditText;
 import android.widget.FrameLayout;
 import android.widget.ImageView;
+import android.widget.LinearLayout;
 import android.widget.TextView;
 
 import org.telegram.messenger.AndroidUtilities;
@@ -63,11 +64,12 @@
 import org.telegram.messenger.MessagesController;
 import org.telegram.messenger.NotificationCenter;
 import io.bettergram.messenger.R;
+import io.bettergram.ui.adapters.BetterDialogsAdapter;
+
 import org.telegram.messenger.UserConfig;
 import org.telegram.ui.ActionBar.AlertDialog;
 import org.telegram.ui.ActionBar.BottomSheet;
 import org.telegram.ui.ActionBar.ThemeDescription;
-import org.telegram.ui.Adapters.DialogsAdapter;
 import org.telegram.ui.Adapters.DialogsSearchAdapter;
 import org.telegram.ui.Cells.AccountSelectCell;
 import org.telegram.ui.Cells.DialogsEmptyCell;
@@ -104,14 +106,16 @@
 import org.telegram.ui.ActionBar.Theme;
 import org.telegram.ui.Components.SizeNotifierFrameLayout;
 import org.telegram.ui.Components.StickersAlert;
+import org.telegram.ui.Components.TabsView;
 
 import java.util.ArrayList;
+import java.util.List;
 
 public class DialogsActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate {
     
     private RecyclerListView listView;
     private LinearLayoutManager layoutManager;
-    private DialogsAdapter dialogsAdapter;
+    private BetterDialogsAdapter dialogsAdapter;
     private DialogsSearchAdapter dialogsSearchAdapter;
     private EmptyTextProgressView searchEmptyView;
     private RadialProgressView progressView;
@@ -608,7 +612,32 @@ public void smoothScrollToPosition(RecyclerView recyclerView, RecyclerView.State
         layoutManager.setOrientation(LinearLayoutManager.VERTICAL);
         listView.setLayoutManager(layoutManager);
         listView.setVerticalScrollbarPosition(LocaleController.isRTL ? RecyclerListView.SCROLLBAR_POSITION_LEFT : RecyclerListView.SCROLLBAR_POSITION_RIGHT);
-        contentView.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+
+        TabsView newTabsView = new TabsView(context)
+            .refershAction(type->{
+                //todo: check for the same type?
+                int firstVisibleItem = layoutManager.findFirstVisibleItemPosition();
+                //change data set
+                if(dialogsAdapter != null) {
+                    dialogsAdapter.setDialogsType(type);
+                }
+                //scroll to top
+                if(firstVisibleItem < 20){
+                    listView.smoothScrollToPosition(0);
+                } else{
+                    listView.scrollToPosition(0);
+                }
+            });
+        LinearLayout tabsContainer = new LinearLayout(context);
+        tabsContainer.setOrientation(LinearLayout.VERTICAL);
+        tabsContainer.setLayoutParams(new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT));
+
+        tabsContainer.addView(newTabsView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, AndroidUtilities.isTablet() ? 42 : 40, Gravity.TOP));
+        //todo: get back
+//        refreshTabAndListViews(false);
+
+        tabsContainer.addView(listView, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
+        contentView.addView(tabsContainer, LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT, LayoutHelper.MATCH_PARENT));
         listView.setOnItemClickListener((view, position) -> {
             if (listView == null || listView.getAdapter() == null || getParentActivity() == null) {
                 return;
@@ -825,7 +854,7 @@ public boolean onItemClick(View view, int position, float x, float y) {
                     return false;
                 }
                 final TLRPC.TL_dialog dialog;
-                ArrayList<TLRPC.TL_dialog> dialogs = getDialogsArray();
+                List<TLRPC.TL_dialog> dialogs = dialogsAdapter.getDialogsArray();
                 if (position < 0 || position >= dialogs.size()) {
                     return false;
                 }
@@ -1068,7 +1097,7 @@ public void getOutline(View view, Outline outline) {
             if (listView.getAdapter() == dialogsAdapter) {
                 int firstVisibleItem = layoutManager.findFirstVisibleItemPosition();
                 if (firstVisibleItem == 0) {
-                    ArrayList<TLRPC.TL_dialog> array = getDialogsArray();
+                    List<TLRPC.TL_dialog> array = dialogsAdapter.getDialogsArray();
                     for (int a = array.size() - 1; a >= 0; a--) {
                         TLRPC.TL_dialog dialog = array.get(a);
                         if ((dialog.unread_count != 0 || dialog.unread_mark) && !MessagesController.getInstance(currentAccount).isDialogMuted(dialog.id)) {
@@ -1085,7 +1114,7 @@ public void getOutline(View view, Outline outline) {
                             if (child.getTop() <= middle && child.getBottom() >= middle) {
                                 RecyclerListView.Holder holder = (RecyclerListView.Holder) listView.findContainingViewHolder(child);
                                 if (holder != null) {
-                                    ArrayList<TLRPC.TL_dialog> array = getDialogsArray();
+                                    List<TLRPC.TL_dialog> array = dialogsAdapter.getDialogsArray();
                                     for (int a = Math.min(holder.getAdapterPosition(), array.size()) - 1; a >= 0; a--) {
                                         TLRPC.TL_dialog dialog = array.get(a);
                                         if ((dialog.unread_count != 0 || dialog.unread_mark) && !MessagesController.getInstance(currentAccount).isDialogMuted(dialog.id)) {
@@ -1190,7 +1219,7 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                     return;
                 }
                 if (visibleItemCount > 0) {
-                    if (layoutManager.findLastVisibleItemPosition() >= getDialogsArray().size() - 10) {
+                    if (layoutManager.findLastVisibleItemPosition() >= dialogsAdapter.getDialogsArray().size() - 10) {
                         boolean fromCache = !MessagesController.getInstance(currentAccount).dialogsEndReached;
                         if (fromCache || !MessagesController.getInstance(currentAccount).serverDialogsEndReached) {
                             MessagesController.getInstance(currentAccount).loadDialogs(-1, 100, fromCache);
@@ -1226,7 +1255,7 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
         });
 
         if (searchString == null) {
-            dialogsAdapter = new DialogsAdapter(context, dialogsType, onlySelect);
+            dialogsAdapter = new BetterDialogsAdapter(context, dialogsType, onlySelect);
             if (AndroidUtilities.isTablet() && openedDialogId != 0) {
                 dialogsAdapter.setOpenedDialogId(openedDialogId);
             }
@@ -1523,7 +1552,7 @@ private void checkUnreadButton(boolean animated) {
                         if (child.getTop() <= middle && child.getBottom() >= middle) {
                             RecyclerListView.Holder holder = (RecyclerListView.Holder) listView.findContainingViewHolder(child);
                             if (holder != null) {
-                                ArrayList<TLRPC.TL_dialog> array = getDialogsArray();
+                                List<TLRPC.TL_dialog> array = dialogsAdapter.getDialogsArray();
                                 if (firstVisibleItem == 0) {
                                     if (unreadOnScreen != currentUnreadCount) {
                                         for (int a = holder.getAdapterPosition() + 1, size = array.size(); a < size; a++) {
@@ -1843,19 +1872,6 @@ public void onAnimationEnd(Animator animation) {
         }
     }
 
-    private ArrayList<TLRPC.TL_dialog> getDialogsArray() {
-        if (dialogsType == 0) {
-            return MessagesController.getInstance(currentAccount).dialogs;
-        } else if (dialogsType == 1) {
-            return MessagesController.getInstance(currentAccount).dialogsServerOnly;
-        } else if (dialogsType == 2) {
-            return MessagesController.getInstance(currentAccount).dialogsGroupsOnly;
-        } else if (dialogsType == 3) {
-            return MessagesController.getInstance(currentAccount).dialogsForward;
-        }
-        return null;
-    }
-
     public void setSideMenu(RecyclerView recyclerView) {
         sideMenu = recyclerView;
         sideMenu.setBackgroundColor(Theme.getColor(Theme.key_chats_menuBackground));
@@ -1903,7 +1919,7 @@ private void updateVisibleRows(int mask) {
                 if (listView.getAdapter() != dialogsSearchAdapter) {
                     DialogCell cell = (DialogCell) child;
                     if ((mask & MessagesController.UPDATE_MASK_NEW_MESSAGE) != 0) {
-                        cell.checkCurrentDialogIndex();
+                        cell.checkCurrentDialogIndex(dialogsAdapter);
                         if (dialogsType == 0 && AndroidUtilities.isTablet()) {
                             cell.setDialogSelected(cell.getDialogId() == openedDialogId);
                         }
diff --git a/TMessagesProj/src/main/java/ru b/TMessagesProj/src/main/java/ru
new file mode 120000
index 000000000..e509c9901
--- /dev/null
+++ b/TMessagesProj/src/main/java/ru
@@ -0,0 +1 @@
+C:/Java/git/LifeTools/libraries/LifeTools Essentials/src/ru
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tab_bot.png b/TMessagesProj/src/main/res/drawable-hdpi/tab_bot.png
new file mode 100644
index 000000000..bc252c774
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/tab_bot.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tab_channel.png b/TMessagesProj/src/main/res/drawable-hdpi/tab_channel.png
new file mode 100644
index 000000000..439cbb7cd
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/tab_channel.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tab_favs.png b/TMessagesProj/src/main/res/drawable-hdpi/tab_favs.png
new file mode 100644
index 000000000..c42f507ed
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/tab_favs.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tab_group.png b/TMessagesProj/src/main/res/drawable-hdpi/tab_group.png
new file mode 100644
index 000000000..91f99f888
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/tab_group.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tab_selected.9.png b/TMessagesProj/src/main/res/drawable-hdpi/tab_selected.9.png
new file mode 100644
index 000000000..181a528ed
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/tab_selected.9.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tab_supergroup.png b/TMessagesProj/src/main/res/drawable-hdpi/tab_supergroup.png
new file mode 100644
index 000000000..b4e7e907b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/tab_supergroup.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tab_text_selector.xml b/TMessagesProj/src/main/res/drawable-hdpi/tab_text_selector.xml
new file mode 100644
index 000000000..2c74af624
--- /dev/null
+++ b/TMessagesProj/src/main/res/drawable-hdpi/tab_text_selector.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:state_selected="true" android:color="@android:color/white" />
+    <item android:state_focused="true" android:color="@android:color/white" />
+    <item android:state_pressed="true" android:color="@android:color/white" />
+    <item android:color="#575757" />
+</selector>
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tab_unread.png b/TMessagesProj/src/main/res/drawable-hdpi/tab_unread.png
new file mode 100644
index 000000000..eefa5e22c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/tab_unread.png differ
diff --git a/TMessagesProj/src/main/res/drawable-hdpi/tab_user.png b/TMessagesProj/src/main/res/drawable-hdpi/tab_user.png
new file mode 100644
index 000000000..98d50a264
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-hdpi/tab_user.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tab_admin.png b/TMessagesProj/src/main/res/drawable-mdpi/tab_admin.png
new file mode 100644
index 000000000..f2caffcb8
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/tab_admin.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tab_all.png b/TMessagesProj/src/main/res/drawable-mdpi/tab_all.png
new file mode 100644
index 000000000..6b2d9710a
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/tab_all.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tab_bot.png b/TMessagesProj/src/main/res/drawable-mdpi/tab_bot.png
new file mode 100644
index 000000000..32edca1e8
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/tab_bot.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tab_channel.png b/TMessagesProj/src/main/res/drawable-mdpi/tab_channel.png
new file mode 100644
index 000000000..ff619d43b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/tab_channel.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tab_favs.png b/TMessagesProj/src/main/res/drawable-mdpi/tab_favs.png
new file mode 100644
index 000000000..89b79c49b
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/tab_favs.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tab_group.png b/TMessagesProj/src/main/res/drawable-mdpi/tab_group.png
new file mode 100644
index 000000000..3cc59fbe3
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/tab_group.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tab_supergroup.png b/TMessagesProj/src/main/res/drawable-mdpi/tab_supergroup.png
new file mode 100644
index 000000000..4495cd86e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/tab_supergroup.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tab_unread.png b/TMessagesProj/src/main/res/drawable-mdpi/tab_unread.png
new file mode 100644
index 000000000..e4f688845
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/tab_unread.png differ
diff --git a/TMessagesProj/src/main/res/drawable-mdpi/tab_user.png b/TMessagesProj/src/main/res/drawable-mdpi/tab_user.png
new file mode 100644
index 000000000..a78e7e6a0
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-mdpi/tab_user.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tab_admin.png b/TMessagesProj/src/main/res/drawable-xhdpi/tab_admin.png
new file mode 100644
index 000000000..f4e79ff41
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/tab_admin.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tab_all.png b/TMessagesProj/src/main/res/drawable-xhdpi/tab_all.png
new file mode 100644
index 000000000..a8e6b133e
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/tab_all.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tab_bot.png b/TMessagesProj/src/main/res/drawable-xhdpi/tab_bot.png
new file mode 100644
index 000000000..8708650e7
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/tab_bot.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tab_channel.png b/TMessagesProj/src/main/res/drawable-xhdpi/tab_channel.png
new file mode 100644
index 000000000..1a2a61a0c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/tab_channel.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tab_favs.png b/TMessagesProj/src/main/res/drawable-xhdpi/tab_favs.png
new file mode 100644
index 000000000..037adfc6f
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/tab_favs.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tab_group.png b/TMessagesProj/src/main/res/drawable-xhdpi/tab_group.png
new file mode 100644
index 000000000..4258728f6
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/tab_group.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tab_supergroup.png b/TMessagesProj/src/main/res/drawable-xhdpi/tab_supergroup.png
new file mode 100644
index 000000000..2fd5e872a
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/tab_supergroup.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tab_unread.png b/TMessagesProj/src/main/res/drawable-xhdpi/tab_unread.png
new file mode 100644
index 000000000..5fa4716ba
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/tab_unread.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xhdpi/tab_user.png b/TMessagesProj/src/main/res/drawable-xhdpi/tab_user.png
new file mode 100644
index 000000000..738e3490d
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xhdpi/tab_user.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tab_admin.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tab_admin.png
new file mode 100644
index 000000000..a51b598f3
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/tab_admin.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tab_all.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tab_all.png
new file mode 100644
index 000000000..318057b90
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/tab_all.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tab_bot.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tab_bot.png
new file mode 100644
index 000000000..33c486b4c
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/tab_bot.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tab_channel.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tab_channel.png
new file mode 100644
index 000000000..cf8e5baa9
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/tab_channel.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tab_favs.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tab_favs.png
new file mode 100644
index 000000000..4409173e1
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/tab_favs.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tab_group.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tab_group.png
new file mode 100644
index 000000000..5df1d9203
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/tab_group.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tab_supergroup.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tab_supergroup.png
new file mode 100644
index 000000000..324f9c047
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/tab_supergroup.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tab_unread.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tab_unread.png
new file mode 100644
index 000000000..5d1dbff04
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/tab_unread.png differ
diff --git a/TMessagesProj/src/main/res/drawable-xxhdpi/tab_user.png b/TMessagesProj/src/main/res/drawable-xxhdpi/tab_user.png
new file mode 100644
index 000000000..de2a86e89
Binary files /dev/null and b/TMessagesProj/src/main/res/drawable-xxhdpi/tab_user.png differ
diff --git a/TMessagesProj/src/main/res/layout/fragment_pager.xml b/TMessagesProj/src/main/res/layout/fragment_pager.xml
new file mode 100644
index 000000000..776809c86
--- /dev/null
+++ b/TMessagesProj/src/main/res/layout/fragment_pager.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    >
+    <org.telegram.ui.Components.TabsView
+        android:id="@+id/tabs"
+        android:layout_width="match_parent"
+        android:layout_height="48dp"
+        android:text="test"
+        android:gravity="center"
+        android:background="@color/actionBarDefault"
+        />
+    <FrameLayout
+        android:id="@+id/host"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"/>
+</LinearLayout>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values/colors.xml b/TMessagesProj/src/main/res/values/colors.xml
index b4eac3ecb..821125515 100755
--- a/TMessagesProj/src/main/res/values/colors.xml
+++ b/TMessagesProj/src/main/res/values/colors.xml
@@ -1,4 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
     <color name="divider">#dcdcdc</color>
+
+    <color name="actionBarDefault">#FF2DCC70</color>
 </resources>
\ No newline at end of file
diff --git a/TMessagesProj/src/main/res/values/strings.xml b/TMessagesProj/src/main/res/values/strings.xml
index 05916f636..20736ecd1 100644
--- a/TMessagesProj/src/main/res/values/strings.xml
+++ b/TMessagesProj/src/main/res/values/strings.xml
@@ -2181,4 +2181,13 @@
     <string name="formatterDay24H">HH:mm</string>
     <string name="formatterDay12H">h:mm a</string>
     <string name="formatDateAtTime">%1$s at %2$s</string>
+
+
+    <!--Better-->
+    <string name="tabsAll">All</string>
+    <string name="tabsDirect">Direct</string>
+    <string name="tabsGroups">Groups</string>
+    <string name="tabsAnnouncements">Announcements</string>
+    <string name="tabsFavorites">Favorites</string>
+    <string name="tabsCrypto">Crypto</string>
 </resources>
