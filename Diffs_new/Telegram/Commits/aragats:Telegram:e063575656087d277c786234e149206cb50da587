diff --git a/Retrofit.md b/Retrofit.md
new file mode 100644
index 000000000..2f8a3ed40
--- /dev/null
+++ b/Retrofit.md
@@ -0,0 +1,17 @@
+PROGUARD
+
+If you are using Proguard in your project add the following lines to your configuration:
+
+-dontwarn retrofit.**
+-keep class retrofit.** { *; }
+-keepattributes Signature
+-keepattributes Exceptions
+
+Good tutorial: sync, async
+http://blog.robinchutaux.com/blog/a-smart-way-to-use-retrofit/
+
+How to upload image
+https://futurestud.io/blog/retrofit-2-how-to-upload-files-to-server
+
+Other way to upload file
+http://stackoverflow.com/questions/18964288/upload-a-file-through-an-http-form-via-multipartentitybuilder-with-a-progress
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
index 3a86cb4bd..054b3a04e 100644
--- a/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
+++ b/TMessagesProj/src/main/java/org/telegram/android/PostsController.java
@@ -14,7 +14,12 @@
 
 import org.telegram.android.location.LocationManagerHelper;
 
+import retrofit.Callback;
+import retrofit.Response;
+import retrofit.Retrofit;
 import ru.aragats.wgo.ApplicationLoader;
+import ru.aragats.wgo.rest.dto.PostRequest;
+import ru.aragats.wgo.rest.manager.RestManager;
 
 import org.telegram.messenger.dto.Coordinates;
 import org.telegram.messenger.dto.Post;
@@ -114,6 +119,20 @@ public void cleanUp() {
 
 
     public void addPost(Post post) {
+
+        //TODO temp test
+//        RestManager.getInstance().uploadTest(new PostRequest(post.getImage().getUrl()), new Callback<ru.aragats.wgo.rest.dto.PostResponse>() {
+//            @Override
+//            public void onResponse(Response<ru.aragats.wgo.rest.dto.PostResponse> response, Retrofit retrofit) {
+//                System.out.println(response);
+//            }
+//
+//            @Override
+//            public void onFailure(Throwable t) {
+//                System.out.println(t);
+//            }
+//        });
+
         PostServiceMock.addPost(post);
         //TODO mock loading
         AndroidUtilities.runOnUIThread(new Runnable() {
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
index b594e1f80..ad291f0bb 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/PostsActivity.java
@@ -52,8 +52,16 @@
 import org.telegram.android.support.widget.LinearLayoutManager;
 import org.telegram.android.support.widget.RecyclerView;
 
+import retrofit.Callback;
+import retrofit.Response;
+import retrofit.Retrofit;
 import ru.aragats.wgo.ApplicationLoader;
 import ru.aragats.wgo.R;
+import ru.aragats.wgo.rest.client.WGOClient;
+import ru.aragats.wgo.rest.dto.PostRequest;
+import ru.aragats.wgo.rest.dto.PostResponse;
+import ru.aragats.wgo.rest.manager.RestManager;
+import ru.aragats.wgo.rest.task.RestTask;
 
 import org.telegram.messenger.FileLog;
 import org.telegram.messenger.dto.Post;
@@ -360,7 +368,23 @@ public void onItemClick(int id) {
         swipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
             @Override
             public void onRefresh() {
+                // TODO temp test
+//                new RestTask().execute("param");
                 PostsController.getInstance().loadPosts(0, Constants.POST_COUNT, true, true);
+
+//                RestManager.getInstance().uploadTest(new PostRequest(), new Callback<PostResponse>() {
+//                    @Override
+//                    public void onResponse(Response<PostResponse> response, Retrofit retrofit) {
+//                        System.out.println(response);
+//                    }
+//
+//                    @Override
+//                    public void onFailure(Throwable t) {
+//                        System.out.println(t);
+//                    }
+//                });
+
+
 //                refreshContent();
 //                Toast.makeText(((Context) getParentActivity()), "REFRESH BUTTON is CLICKED", Toast.LENGTH_SHORT).show();
                 // Probably refresh icon disappear when we update the adapter the content. Because I should not use this method. OR NOT . I think it is ok to use this method. according to tutorial
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/rest/client/RestClient.java b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/client/RestClient.java
new file mode 100644
index 000000000..38d2bf840
--- /dev/null
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/client/RestClient.java
@@ -0,0 +1,51 @@
+package ru.aragats.wgo.rest.client;
+
+import retrofit.GsonConverterFactory;
+import retrofit.Retrofit;
+import ru.aragats.wgo.rest.service.RestService;
+
+/**
+ * Created by aragats on 05/12/15.
+ */
+//http://blog.robinchutaux.com/blog/a-smart-way-to-use-retrofit/
+public class RestClient {
+    private static final String BASE_URL = "http://192.168.0.100:8080/";
+    private RestService restService;
+
+
+    private static volatile RestClient Instance = null;
+
+    public static RestClient getInstance() {
+        RestClient localInstance = Instance;
+        if (localInstance == null) {
+            synchronized (RestClient.class) {
+                localInstance = Instance;
+                if (localInstance == null) {
+                    Instance = localInstance = new RestClient();
+                }
+            }
+        }
+        return localInstance;
+    }
+
+
+    private RestClient() {
+//        Gson gson = new GsonBuilder()
+//                .setDateFormat("yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'SSS'Z'")
+//                .create();
+//        restAdapter.setConverter(new GsonConverter(gson))
+        Retrofit restAdapter = new Retrofit.Builder()
+                .baseUrl(BASE_URL)
+                .addConverterFactory(GsonConverterFactory.create())
+                .build();
+
+        restService = restAdapter.create(RestService.class);
+    }
+
+    public RestService getRestService() {
+        return restService;
+    }
+
+
+
+}
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/rest/client/WGOClient.java b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/client/WGOClient.java
new file mode 100644
index 000000000..62ab43e5a
--- /dev/null
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/client/WGOClient.java
@@ -0,0 +1,84 @@
+package ru.aragats.wgo.rest.client;
+
+import java.io.IOException;
+
+import retrofit.Call;
+import retrofit.Callback;
+import retrofit.GsonConverterFactory;
+import retrofit.Response;
+import retrofit.Retrofit;
+import ru.aragats.wgo.rest.dto.PostResponse;
+import ru.aragats.wgo.rest.dto.Request;
+import ru.aragats.wgo.rest.service.WGOService;
+
+/**
+ * Created by aragats on 05/12/15.
+ */
+// !!! TODO important
+// TODO http://stackoverflow.com/questions/6343166/android-os-networkonmainthreadexception
+// Retrofit recommendations async.  http://stackoverflow.com/questions/29323095/retrofit-call-inside-asynctask
+    //TODO set time out  http://stackoverflow.com/questions/29380844/how-to-set-a-timeout-in-retrofit-library
+public class WGOClient {
+
+    public String method() {
+
+        try {
+            Retrofit retrofit = new Retrofit.Builder()
+                    .baseUrl("http://192.168.0.100:8080/")
+                    .addConverterFactory(GsonConverterFactory.create())
+                    .build();
+
+            WGOService service = retrofit.create(WGOService.class);
+
+            Call<PostResponse> call = service.all();
+            Response<PostResponse> reposResponse = null;
+
+            reposResponse = call.execute();
+            PostResponse postResponse = reposResponse.body();
+            System.out.println("Error =" + postResponse.getError() + " Posts = " + postResponse.getPosts());
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+
+        return "ome str";
+
+    }
+
+
+    public String asyncMethod() {
+
+        Retrofit retrofit = new Retrofit.Builder()
+                .baseUrl("http://192.168.0.100:8080/")
+                .addConverterFactory(GsonConverterFactory.create())
+                .build();
+
+        WGOService service = retrofit.create(WGOService.class);
+
+        Call<PostResponse> call = service.all();
+
+        call.enqueue(new Callback<PostResponse>() {
+            @Override
+            public void onResponse(Response<PostResponse> response, Retrofit retrofit) {
+                if (response.isSuccess()) {
+                    // tasks available
+                    System.out.println("Error =" + response.body().getError() + " Posts = " + response.body().getPosts());
+
+                } else {
+                    // error response, no access to resource?
+                }
+            }
+
+            @Override
+            public void onFailure(Throwable t) {
+                System.out.println("Failure");
+                // something went completely south (like no internet connection)
+//                                 Log.d("Error", t.getMessage());
+            }
+        });
+
+
+        return "some str";
+
+    }
+
+}
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/rest/dto/Post.java b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/dto/Post.java
new file mode 100644
index 000000000..633068e55
--- /dev/null
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/dto/Post.java
@@ -0,0 +1,33 @@
+package ru.aragats.wgo.rest.dto;
+
+/**
+ * Created by aragats on 05/12/15.
+ */
+public class Post {
+    private int id;
+    private String name;
+
+    public Post() {
+    }
+
+    public Post(int id, String name) {
+        this.id = id;
+        this.name = name;
+    }
+
+    public int getId() {
+        return id;
+    }
+
+    public void setId(int id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+}
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/rest/dto/PostRequest.java b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/dto/PostRequest.java
new file mode 100644
index 000000000..514b2bf31
--- /dev/null
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/dto/PostRequest.java
@@ -0,0 +1,24 @@
+package ru.aragats.wgo.rest.dto;
+
+/**
+ * Created by aragats on 05/12/15.
+ */
+public class PostRequest {
+
+    private String filePath;
+
+    public PostRequest() {
+    }
+
+    public PostRequest(String filePath) {
+        this.filePath = filePath;
+    }
+
+    public String getFilePath() {
+        return filePath;
+    }
+
+    public void setFilePath(String filePath) {
+        this.filePath = filePath;
+    }
+}
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/rest/dto/PostResponse.java b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/dto/PostResponse.java
new file mode 100644
index 000000000..aa4af6826
--- /dev/null
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/dto/PostResponse.java
@@ -0,0 +1,32 @@
+package ru.aragats.wgo.rest.dto;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Created by aragats on 05/12/15.
+ */
+public class PostResponse {
+
+
+    private List<Post> posts = new ArrayList<>();
+    private String error;
+
+
+    public List<Post> getPosts() {
+        return posts;
+    }
+
+    public void setPosts(List<Post> posts) {
+        this.posts = posts;
+    }
+
+    public String getError() {
+        return error;
+    }
+
+    public void setError(String error) {
+        this.error = error;
+    }
+}
+
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/rest/dto/Request.java b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/dto/Request.java
new file mode 100644
index 000000000..80f0ab110
--- /dev/null
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/dto/Request.java
@@ -0,0 +1,7 @@
+package ru.aragats.wgo.rest.dto;
+
+/**
+ * Created by aragats on 05/12/15.
+ */
+public class Request {
+}
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/rest/manager/RestManager.java b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/manager/RestManager.java
new file mode 100644
index 000000000..aca432476
--- /dev/null
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/manager/RestManager.java
@@ -0,0 +1,96 @@
+package ru.aragats.wgo.rest.manager;
+
+import com.squareup.okhttp.MediaType;
+import com.squareup.okhttp.MultipartBuilder;
+import com.squareup.okhttp.RequestBody;
+
+import java.io.File;
+
+import retrofit.Call;
+import retrofit.Callback;
+import retrofit.Response;
+import retrofit.Retrofit;
+import ru.aragats.wgo.rest.client.RestClient;
+import ru.aragats.wgo.rest.dto.Post;
+import ru.aragats.wgo.rest.dto.PostRequest;
+import ru.aragats.wgo.rest.dto.PostResponse;
+
+/**
+ * Created by aragats on 05/12/15.
+ */
+public class RestManager {
+    private static volatile RestManager Instance = null;
+    private static volatile RestClient restClient;
+
+    public static RestManager getInstance() {
+        RestManager localInstance = Instance;
+        if (localInstance == null) {
+            synchronized (RestManager.class) {
+                localInstance = Instance;
+                if (localInstance == null) {
+                    Instance = localInstance = new RestManager();
+                }
+            }
+        }
+        return localInstance;
+    }
+
+
+    private RestManager() {
+        restClient = RestClient.getInstance();
+    }
+
+
+    public void findPosts(PostRequest request, Callback<PostResponse> callback) {
+        findPostsCall(request).enqueue(callback);
+    }
+
+    public Call<PostResponse> findPostsCall(PostRequest request) {
+        return restClient.getRestService().find("sd");
+    }
+
+
+    public void addTest(PostRequest request, Callback<PostResponse> callback) {
+        addTest(request).enqueue(callback);
+    }
+
+    public Call<PostResponse> addTest(PostRequest request) {
+        return restClient.getRestService().addTest(new Post(1, "test"));
+    }
+
+
+    public void uploadTest(PostRequest request, Callback<PostResponse> callback) {
+        uploadTest(request).enqueue(callback);
+    }
+
+    public Call<PostResponse> uploadTest(PostRequest request) {
+//        File file = new File("/storage/emulated/0/download/1289.jpeg");
+        File file = new File("/storage/emulated/0/Download/amerIstotia1.jpg");
+//        File file = new File(request.getFilePath());
+
+
+        RequestBody fileBody = RequestBody.create(MediaType.parse("image/jpeg"), file);
+//        MultipartBuilder multipartBuilder = new MultipartBuilder("95416089-b2fd-4eab-9a14-166bb9c5788b");
+        MultipartBuilder multipartBuilder = new MultipartBuilder();
+        multipartBuilder.addFormDataPart("myfile", file.getName(), fileBody);
+        multipartBuilder.addFormDataPart("description", "value");
+        multipartBuilder.type(MultipartBuilder.FORM);
+        RequestBody fileRequestBody = multipartBuilder.build();
+
+        return restClient.getRestService().uploadTest(fileRequestBody);
+    }
+
+
+//    public Call<PostResponse> uploadTest1(PostRequest request) {
+//        File file = new File("/storage/emulated/0/Download/amerIstotia1.jpg");
+////        File file = new File(request.getFilePath());
+////
+////        // please check you mime type, i'm uploading only images
+//        RequestBody requestBody =
+//                RequestBody.create(MediaType.parse("image/jpeg"), file);
+//
+//
+//        return restClient.getRestService().uploadTest(requestBody, "key-value");
+//    }
+
+}
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/rest/service/RestService.java b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/service/RestService.java
new file mode 100644
index 000000000..ea2b18d95
--- /dev/null
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/service/RestService.java
@@ -0,0 +1,37 @@
+package ru.aragats.wgo.rest.service;
+
+import com.squareup.okhttp.RequestBody;
+
+import retrofit.Call;
+import retrofit.http.Body;
+import retrofit.http.GET;
+import retrofit.http.Multipart;
+import retrofit.http.POST;
+import retrofit.http.PUT;
+import retrofit.http.Part;
+import retrofit.http.Query;
+import ru.aragats.wgo.rest.dto.Post;
+import ru.aragats.wgo.rest.dto.PostResponse;
+
+/**
+ * Created by aragats on 05/12/15.
+ */
+public interface RestService {
+    @GET("/api/posts/find")
+    Call<PostResponse> find(@Query("sort") String sort);
+
+    @POST("/api/posts/addTest")
+    Call<PostResponse> addTest(@Body Post post);
+
+
+    //TODO both methods for uploading work.
+//    @Multipart
+//    @POST("/api/posts/upload")
+//    Call<PostResponse> uploadTest(@Part("myfile\"; filename=\"image.png\" ") RequestBody file, @Part("description") String description);
+
+    @POST("/api/posts/upload")
+    Call<PostResponse> uploadTest(@Body RequestBody myfile);
+
+
+
+}
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/rest/service/WGOService.java b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/service/WGOService.java
new file mode 100644
index 000000000..811512d04
--- /dev/null
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/service/WGOService.java
@@ -0,0 +1,23 @@
+package ru.aragats.wgo.rest.service;
+
+import retrofit.Call;
+import retrofit.Callback;
+import retrofit.http.Body;
+import retrofit.http.GET;
+import ru.aragats.wgo.rest.dto.PostResponse;
+import ru.aragats.wgo.rest.dto.Request;
+
+/**
+ * Created by aragats on 05/12/15.
+ */
+//http://stackoverflow.com/questions/29323095/retrofit-call-inside-asynctask
+public interface WGOService {
+    // sync
+    @GET("/api/posts/all")
+    Call<PostResponse> all();
+
+    // async
+//    @GET("/api/posts/all")
+//    Call<PostResponse> allAsync(Callback<PostResponse> callback);
+//    Call<PostResponse> allAsync(@Body Request request, Callback<PostResponse> callback);
+}
\ No newline at end of file
diff --git a/TMessagesProj/src/main/java/ru/aragats/wgo/rest/task/RestTask.java b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/task/RestTask.java
new file mode 100644
index 000000000..044cf1cee
--- /dev/null
+++ b/TMessagesProj/src/main/java/ru/aragats/wgo/rest/task/RestTask.java
@@ -0,0 +1,30 @@
+package ru.aragats.wgo.rest.task;
+
+import android.os.AsyncTask;
+
+import ru.aragats.wgo.rest.client.WGOClient;
+
+/**
+ * Created by aragats on 05/12/15.
+ */
+//TODO Important http://stackoverflow.com/questions/6343166/android-os-networkonmainthreadexception
+public class RestTask extends AsyncTask<String, Void, String> {
+
+    private Exception exception;
+
+    protected String doInBackground(String... urls) {
+        try {
+            WGOClient wgoClient = new WGOClient();
+            return wgoClient.method();
+        } catch (Exception e) {
+            this.exception = e;
+            return null;
+        }
+    }
+
+    protected void onPostExecute(String feed) {
+        System.out.println("Post Execute");
+        // TODO: check this.exception
+        // TODO: do something with the feed
+    }
+}
\ No newline at end of file
