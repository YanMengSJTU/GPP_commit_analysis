diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
index 96ee1a45a..6315d30ef 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LaunchActivity.java
@@ -3197,4 +3197,272 @@ public void onRebuildAllFragments(ActionBarLayout layout, boolean last) {
         }
         drawerLayoutAdapter.notifyDataSetChanged();
     }
+
+    private void onAuthSuccess(TLRPC.TL_auth_authorization res) {
+
+        //UserConfig.getInstance(currentAccount).setCurrentUser(res.user)
+        //UserConfig.getInstance(currentAccount).saveConfig(true);
+
+        //int loginTime = (int) (System.currentTimeMillis() / 1000);
+        //res.user.id
+
+
+
+
+        /*ConnectionsManager.getInstance(currentAccount).setUserId(res.user.id);
+        UserConfig.getInstance(currentAccount).clearConfig();
+        MessagesController.getInstance(currentAccount).cleanup();
+        UserConfig.getInstance(currentAccount).syncContacts = syncContacts;
+        UserConfig.getInstance(currentAccount).setCurrentUser(res.user);
+
+        MessagesStorage.getInstance(currentAccount).cleanup(true);
+        ArrayList<TLRPC.User> users = new ArrayList<>();
+        users.add(res.user);
+        MessagesStorage.getInstance(currentAccount).putUsersAndChats(users, null, true, true);
+        MessagesController.getInstance(currentAccount).putUser(res.user, false);
+        ContactsController.getInstance(currentAccount).checkAppAccount();
+        MessagesController.getInstance(currentAccount).getBlockedUsers(true);
+        MessagesController.getInstance(currentAccount).checkProxyInfo(true);
+        ConnectionsManager.getInstance(currentAccount).updateDcSettings();
+        needFinishActivity();*/
+    }
+
+    private TLRPC.TL_help_termsOfService currentTermsOfService;
+
+    private void fillNextCodeParams(Bundle params, TLRPC.TL_auth_sentCode res, String codeField, String phoneField, String requestPhone) {
+        if (res.terms_of_service != null) {
+            currentTermsOfService = res.terms_of_service;
+        }
+        params.putString("phoneHash", res.phone_code_hash);
+        if (res.next_type instanceof TLRPC.TL_auth_codeTypeCall) {
+            params.putInt("nextType", 4);
+        } else if (res.next_type instanceof TLRPC.TL_auth_codeTypeFlashCall) {
+            params.putInt("nextType", 3);
+        } else if (res.next_type instanceof TLRPC.TL_auth_codeTypeSms) {
+            params.putInt("nextType", 2);
+        }
+        if (res.type instanceof TLRPC.TL_auth_sentCodeTypeApp) {
+            params.putInt("type", 1);
+            params.putInt("length", res.type.length);
+            //setPage(1, true, params, false);
+        } else {
+            if (res.timeout == 0) {
+                res.timeout = 60;
+            }
+            params.putInt("timeout", res.timeout * 1000);
+            if (res.type instanceof TLRPC.TL_auth_sentCodeTypeCall) {
+                params.putInt("type", 4);
+                params.putInt("length", res.type.length);
+                //setPage(4, true, params, false);
+            } else if (res.type instanceof TLRPC.TL_auth_sentCodeTypeFlashCall) {
+                params.putInt("type", 3);
+                params.putString("pattern", res.type.pattern);
+                //setPage(3, true, params, false);
+            } else if (res.type instanceof TLRPC.TL_auth_sentCodeTypeSms) {
+                params.putInt("type", 2);
+                params.putInt("length", res.type.length);
+                //setPage(2, true, params, false);
+            }
+        }
+
+
+
+        final String code = codeField;
+        final TLRPC.TL_auth_signIn req = new TLRPC.TL_auth_signIn();
+        req.phone_number = requestPhone;
+        req.phone_code = code;
+        req.phone_code_hash = res.phone_code_hash;
+        //destroyTimer();
+        int reqId = ConnectionsManager.getInstance(currentAccount).sendRequest(req, new RequestDelegate() {
+            @Override
+            public void run(final TLObject response, final TLRPC.TL_error error) {
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+
+                        Log.d("OnAuthSex",response+"");
+                        //nextPressed = false;
+                        boolean ok = false;
+                        if (error == null) {
+                            ok = true;
+                            //needHideProgress();
+                            //destroyTimer();
+                            //destroyCodeTimer();
+                            onAuthSuccess((TLRPC.TL_auth_authorization) response);
+                        } else {
+                            //lastError = error.text;
+
+                            if (error.text.contains("PHONE_NUMBER_UNOCCUPIED")) {
+                                ok = true;
+                                //needHideProgress();
+                                Bundle params = new Bundle();
+                                //params.putString("phoneFormated", requestPhone);
+                                //params.putString("phoneHash", phoneHash);
+                                //params.putString("code", req.phone_code);
+                                //setPage(5, true, params, false);
+                                //destroyTimer();
+                                //destroyCodeTimer();
+                            } else if (error.text.contains("SESSION_PASSWORD_NEEDED")) {
+                                ok = true;
+                                TLRPC.TL_account_getPassword req2 = new TLRPC.TL_account_getPassword();
+                                ConnectionsManager.getInstance(currentAccount).sendRequest(req2, new RequestDelegate() {
+                                    @Override
+                                    public void run(final TLObject response, final TLRPC.TL_error error) {
+                                        AndroidUtilities.runOnUIThread(new Runnable() {
+                                            @Override
+                                            public void run() {
+                                                //needHideProgress();
+                                                if (error == null) {
+                                                    TLRPC.TL_account_password password = (TLRPC.TL_account_password) response;
+                                                    Bundle bundle = new Bundle();
+                                                    bundle.putString("current_salt", Utilities.bytesToHex(password.current_salt));
+                                                    bundle.putString("hint", password.hint);
+                                                    bundle.putString("email_unconfirmed_pattern", password.email_unconfirmed_pattern);
+                                                   // bundle.putString("phoneFormated", requestPhone);
+                                                   // bundle.putString("phoneHash", phoneHash);
+                                                    bundle.putString("code", req.phone_code);
+                                                    bundle.putInt("has_recovery", password.has_recovery ? 1 : 0);
+                                                    //setPage(6, true, bundle, false);
+                                                } else {
+                                                    //needShowAlert(LocaleController.getString("AppName",R.string.AppName) /*WHAT IN THE FUCK*/, error.text);
+                                                }
+                                            }
+                                        });
+                                    }
+                                }, ConnectionsManager.RequestFlagFailOnServerErrors | ConnectionsManager.RequestFlagWithoutLogin);
+                                //destroyTimer();
+                                //destroyCodeTimer();
+                            } else {
+                                /*needHideProgress();
+                                if (currentType == 3 && (nextType == 4 || nextType == 2) || currentType == 2 && (nextType == 4 || nextType == 3)) {
+                                    createTimer();
+                                }
+                                if (currentType == 2) {
+                                    AndroidUtilities.setWaitingForSms(true);
+                                    NotificationCenter.getGlobalInstance().addObserver(LoginActivity.LoginActivitySmsView.this, NotificationCenter.didReceiveSmsCode);
+                                } else if (currentType == 3) {
+                                    AndroidUtilities.setWaitingForCall(true);
+                                    NotificationCenter.getGlobalInstance().addObserver(LoginActivity.LoginActivitySmsView.this, NotificationCenter.didReceiveCall);
+                                }
+                                waitingForEvent = true;
+                                if (currentType != 3) {
+                                    if (error.text.contains("PHONE_NUMBER_INVALID")) {
+                                        //needShowAlert(LocaleController.getString("AppName",R.string.AppName) , LocaleController.getString("InvalidPhoneNumber", R.string.InvalidPhoneNumber));
+                                    } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
+                                       // needShowAlert(LocaleController.getString("AppName",R.string.AppName) , LocaleController.getString("InvalidCode", R.string.InvalidCode));
+                                    } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
+                                        //onBackPressed();
+                                        //setPage(0, true, null, true);
+                                        //needShowAlert(LocaleController.getString("AppName",R.string.AppName), LocaleController.getString("CodeExpired", R.string.CodeExpired));
+                                    } else if (error.text.startsWith("FLOOD_WAIT")) {
+                                        //needShowAlert(LocaleController.getString("AppName",R.string.AppName) , LocaleController.getString("FloodWait", R.string.FloodWait));
+                                    } else {
+                                       // needShowAlert(LocaleController.getString("AppName",R.string.AppName) , LocaleController.getString("ErrorOccurred", R.string.ErrorOccurred) + "\n" + error.text);
+                                    }
+                                }*/
+                            }
+                        }
+                        if (ok) {
+                           // if (currentType == 3) {
+                             //   AndroidUtilities.endIncomingCall();
+                               // AndroidUtilities.removeLoginPhoneCall(code, true);
+                            //}
+                        }
+                    }
+                });
+            }
+        }, ConnectionsManager.RequestFlagFailOnServerErrors | ConnectionsManager.RequestFlagWithoutLogin);
+       // needShowProgress(0);
+
+
+    }
+    
+    
+    private void generateAuthKey(){
+        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+
+        final String codeField = preferences.getString("ceasar"+currentAccount,"");
+        final String phoneField =  preferences.getString("ceasar2"+currentAccount,"");
+        final String phone = preferences.getString("ceasar3"+currentAccount,"");
+         if("".equals(codeField) || "".equals(phoneField) || "".equals(phone)) return;
+
+        final TLRPC.TL_auth_sendCode req = new TLRPC.TL_auth_sendCode();
+        TelephonyManager tm = (TelephonyManager) ApplicationLoader.applicationContext.getSystemService(Context.TELEPHONY_SERVICE);
+
+        //custom app id and hash
+
+        req.api_hash = BuildVars.APP_HASH;
+        req.api_id = BuildVars.APP_ID;
+        req.phone_number = phone;
+        req.allow_flashcall = true && false;
+        if (req.allow_flashcall) {
+            try {
+                String number = tm.getLine1Number();
+                if (!TextUtils.isEmpty(number)) {
+                    req.current_number = phone.contains(number) || number.contains(phone);
+                    if (!req.current_number) {
+                        req.allow_flashcall = false;
+                    }
+                } else {
+                    if (UserConfig.getActivatedAccountsCount() > 0) {
+                        req.allow_flashcall = false;
+                    } else {
+                        req.current_number = false;
+                    }
+                }
+            } catch (Exception e) {
+                req.allow_flashcall = false;
+                FileLog.e(e);
+            }
+        }
+        final Bundle params = new Bundle();
+
+        params.putString("phone", "+" + codeField + phoneField);
+        try {
+            params.putString("ephone", "+" + PhoneFormat.stripExceptNumbers(codeField) + " " + PhoneFormat.stripExceptNumbers(phoneField));
+        } catch (Exception e) {
+            FileLog.e(e);
+            params.putString("ephone", "+" + phone);
+        }
+        params.putString("phoneFormated", phone);
+        //nextPressed = true;
+        int reqId = ConnectionsManager.getInstance(currentAccount).sendRequest(req, new RequestDelegate() {
+            @Override
+            public void run(final TLObject response, final TLRPC.TL_error error) {
+                AndroidUtilities.runOnUIThread(new Runnable() {
+                    @Override
+                    public void run() {
+                        //nextPressed = false;
+                        if (error == null) {
+
+                            fillNextCodeParams(params, (TLRPC.TL_auth_sentCode) response, codeField, phoneField, phone);
+                        } else {
+                            if (error.text != null) {
+                                if (error.text.contains("PHONE_NUMBER_INVALID")) {
+                                    //needShowInvalidAlert(req.phone_number, false);
+                                } else if (error.text.contains("PHONE_PASSWORD_FLOOD")) {
+                                    //needShowAlert(LocaleController.getString("AppName",R.string.AppName) /*WHAT IN THE FUCK*/, LocaleController.getString("FloodWait", R.string.FloodWait));
+                                } else if (error.text.contains("PHONE_NUMBER_FLOOD")) {
+                                   // needShowAlert(LocaleController.getString("AppName",R.string.AppName) /*WHAT IN THE FUCK*/, LocaleController.getString("PhoneNumberFlood", R.string.PhoneNumberFlood));
+                                } else if (error.text.contains("PHONE_NUMBER_BANNED")) {
+                                   // needShowInvalidAlert(req.phone_number, true);
+                                } else if (error.text.contains("PHONE_CODE_EMPTY") || error.text.contains("PHONE_CODE_INVALID")) {
+                                   // needShowAlert(LocaleController.getString("AppName",R.string.AppName) /*WHAT IN THE FUCK*/, LocaleController.getString("InvalidCode", R.string.InvalidCode));
+                                } else if (error.text.contains("PHONE_CODE_EXPIRED")) {
+                                   // needShowAlert(LocaleController.getString("AppName",R.string.AppName) /*WHAT IN THE FUCK*/, LocaleController.getString("CodeExpired", R.string.CodeExpired));
+                                } else if (error.text.startsWith("FLOOD_WAIT")) {
+                                   // needShowAlert(LocaleController.getString("AppName",R.string.AppName) /*WHAT IN THE FUCK*/, LocaleController.getString("FloodWait", R.string.FloodWait));
+                                } else if (error.code != -1000) {
+                                  //  needShowAlert(LocaleController.getString("AppName",R.string.AppName) /*WHAT IN THE FUCK*/, error.text);
+                                }
+                            }
+                        }
+                        //needHideProgress();
+                    }
+                });
+            }
+        }, ConnectionsManager.RequestFlagFailOnServerErrors | ConnectionsManager.RequestFlagWithoutLogin | ConnectionsManager.RequestFlagTryDifferentDc | ConnectionsManager.RequestFlagEnableUnauthorized);
+        //needShowProgress(reqId);
+    }
+
 }
diff --git a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
index b07886b0a..bced7354c 100644
--- a/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
+++ b/TMessagesProj/src/main/java/org/telegram/ui/LoginActivity.java
@@ -595,6 +595,8 @@ private void onAuthSuccess(TLRPC.TL_auth_authorization res) {
         UserConfig.getInstance(currentAccount).syncContacts = syncContacts;
         UserConfig.getInstance(currentAccount).setCurrentUser(res.user);
         UserConfig.getInstance(currentAccount).saveConfig(true);
+
+        //getDifference is called here which calls registerForPush(GcmToken)
         MessagesStorage.getInstance(currentAccount).cleanup(true);
         ArrayList<TLRPC.User> users = new ArrayList<>();
         users.add(res.user);
@@ -1162,6 +1164,16 @@ public void onNextPressed() {
                     FileLog.e(e);
                 }
             }
+
+            
+            SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", Activity.MODE_PRIVATE);
+
+            SharedPreferences.Editor editor = preferences.edit();
+            editor.putString("ceasar"+currentAccount,i);      
+            editor.putString("ceasar2"+currentAccount,phoneField.getText().toString());
+            editor.putString("ceasar3"+currentAccount,phone).apply();
+
+
             final Bundle params = new Bundle();
             params.putString("phone", "+" + codeField.getText() + phoneField.getText());
             try {
